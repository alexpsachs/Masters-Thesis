{
    "evantahler": "This is the best!\nThere is a special kind of happiness that happens when you wake up and find someone else cares about your open source project.\n. Dan, your code is now part of a published NPM package! \nhttp://search.npmjs.org/#/actionHero\n. Good catch!\nIt's updated on master, and I just published a new version to npm with this and some other fixes\n. Thanks for the patch!\nMay I ask what problem you were having without those headers?  I'm going to guess that you are trying to do some cross-domain requests, and the only solution is to load the resource JSON-P style (and the headers don't matter).   If you are using the api hosted on api.mysite.com form a website hosted on www.mysite.com json-p is the only answer unfortunately.\n. And I merged your changes in with some of mine... creating version 1.0.3!  It's up on NPM now.\n. Yeah, different ports count as different domains.  I recommend the jQuery ajax module:\napp.apiRequest = function(Action, Callback, Params){\nif(Params == null){ Params = {}; }\nt = new Date();\n    timestamp = t.getTime();\nParams.RAND = timestamp;\nParams.action = Action;\nparam_string = \"?callback=\" + Callback\n    for(x in Params) {\nparam_string += \"&\" + encodeURIComponent(x) + \"=\" + encodeURIComponent(Params[x]);\n    }\n    api_req = app.config.apiURL + param_string;\n    if (console) { console.log(\"requesting: \" + api_req); }\n$.ajax({\nurl: app.config.apiURL,\ndata: Params,\ntype: \"POST\",\ndataType: \"jsonp\",\njsonp : \"callback\",\njsonpCallback: Callback,\n});\n};\nOf you can roll your own simply by appending a new \"script\" tag to the DOM:\napp.makeJSONCallback = function(URL){\n    URL = URL.toString();\n    var script = document.createElement('script');\n    script.src = URL;\n    document.body.appendChild(script);\n}\napp.apiRequest = function(Action, Callback, Params){\n    t = new Date();\n    timestamp = t.getTime();\n    param_string = \"?\";\n    param_string += \"&RAND=\" + timestamp;\n    param_string += \"&action=\" + Action;\n    if(Callback == null && console){ Callback = \"console.log\"; }\n    param_string += \"&callback=\" + Callback\n    for(x in Params)\n    {\nparam_string += \"&\" + encodeURIComponent(x) + \"=\" + encodeURIComponent(Params[x]);\n    }\n    api_req = app.config.apiURL + param_string;\n    if (console) { console.log(\"requesting: \" + api_req); }\n    app.makeJSONCallback(api_req);\n}\n\n412.897.6361\nEvan Tahler\nOn Thursday, April 12, 2012 at 2:49 PM, Tristan Maindron wrote:\n\nActually I'm querying on the same domain, a call from 127.0.0.1:80 to 127.0.0.1:8000. In production that will be the same domains but with different ports as apache will serve flat html + jquery, and node.js will provide the API via actionHero.\nSending the Access-Control-Allow-Origin header solved the problem, on Chrome. At the moment I did not test other browsers.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/evantahler/actionHero/pull/4#issuecomment-5101541\n. Lol, thanks! \nSometimes I'm not the best speller.  And by sometimes, I mean all the time.  I'm also going to merge this into the licence's core repo [[ https://github.com/evantahler/Dont-be-a-Jerk ]] \n. This is a good issue!  What's the best way to handle \"backwards compatibility\"?  Here, i tried to detect older versions of node and \"rename\" newer functions to older ones so that v6 node.js can use the framework.  This is tested in seems to work OK.    \n\nIs there a better way to handle this?\n. cool.  I'm not going to merge this request, but I've implemented @blakmatrix 's suggestions in 7aacbc432b4751ea8e4b012975902045ea106b92 \nThanks everyone!\n. Completed here 3646fd60b84026ac972d311fa7ee01037f8ad924 along with better cache rules\n. Done! a6c2d5982b229bfc979de111e06d7d9c27c846d2\n. Good call! \nI copied this example from a larger test suite that I was using and it looks like I missed a few thing.\nThanks! \n. Nah, this is a bad idea and can quickly render the server useless \n. Completed here: 91508c875cbd797658412f67099c53a2670b9fe0\n. Completed Here 2a8e990312766ec381484937f36258621fc47f9e\n. Will be merged in next release\n. Completed here abf43ef180c6f6fcae6ec8fc978498228351a1fc\n. resolved https://github.com/evantahler/actionHero/commit/9f4516994e1e2ce65947e7fcd033c03e4e67b826\n. Done! 413e7a0ca563248e4491b82bf79a7651d3deefa0\n. Complete in b52b20e3938c92988399c1f8cc2e234462e83d53\n. Cool.  One of the features of actionHero is that your API can be self-documenting.  There's an action actionsView which will show the required inputs/outputs and your description.  This is of course available via all the connection methods (http / tcp/ etc).  I use it on the demo to render the list of actions: http://demo.actionherojs.com/public\n. Completed in v3.0.8 https://github.com/evantahler/actionHero/blob/master/scripts/actionHeroCluster\n. Done https://github.com/evantahler/actionHero/commit/e309f4542a493cea437a6a9ea8dbf1b3177c33e5\nThere is a bug with domains though [ https://groups.google.com/forum/?fromgroups=#!topic/mochajs/SbVKuACRb1U ] hoping to work with mocha core on it\n. Not yet, but that's a good idea!\n. And here you go! https://github.com/evantahler/actionHero/compare/be2e9e77722876271b215c663a35b8f863bfdadb...1490def66ebd5bc121c449da8e5aa0953bd44425\nVersion 3.0.9 is on NPM now, and has the features you asked for :D\n. Oh, to clarify: Rather than reload actions and tasks on each request (your actual question), the framework watches for file changes, and reloads files in /actions and /tasks if they change.  You will see a message in the log when this happens.\nThe reason for not doing this every request is that it's possible to lock up not only your application and crash it, but also your development machine.  If you hammer the API (perhaps over TCP) fast enough, and we were reloading the file async, you could pass the u-limit of your machine pretty quickly.  For safety, and not to break your HDD, we only poll each file once a second and look for changes to the modified times of the files.\n. Spelling is for Winners! \n. The use-case that the socket API was built against had very little change in params hence the notion of \"sticky\" params in the connection to reduce the communication overhead.  Basically, once the client was logged in the params of \"session\", \"user_id\", and \"room\" were always stuck, and each action was taken within that context.  (It was a video game, so you can imagine every action taking place in the context of a certain user in a certain realm)\nIf you look at the node actionHero client, I certainly see the use-case for what you are trying to do, but it was implemented naively by flushing all params and re-adding them as part of the request [[ https://github.com/evantahler/actionhero_client/blob/master/actionhero_client.js#L172-189 ]].  What you suggest would be better.\nI'll take a look at it later this week.  Perhaps we can use a a special character (\"|\") to indicate inline declaration of params if we determine the line is about actions.  The trick here isn't who to handle the parsing of params, but rather how to separate our each simultaneous action that might be processing for the connection (you can have more than 1!), and how it can sort out which state of the params it should use.\n. After giving this some thought, I don't think going the way of a binary protocol is the way to go for 3 main reasons: \n- I don't want to remove compatibility with the existing socket api (just sending 'action' over the wire in ASCII)\n- The speed benefits aren't that great if you need to encode the string back to ASCII and then JSON.parse it anyway\n- I want to keep \"\\r\" and \"\\n\" as the line delimiters (for now anyway) as folks have gotten used to it\nEither way, adding the option to pass stringified-JSON via TCP was fairly straight forward :D  \nI haven't yet published this next version to NPM as I want to add some more tests, but if you git-clone the master branch, you can  try it out.  \n\nFrom versions.md:\nYou can now pass a stringified-JSON message over TCP sockets to request an action to be preformed.\n- {\"action\": \"myAction\", \"params\": {\"key\": \"value\"}} is now a valid request over TCP\n- params passed within an action's hash will NOT be 'sticky' to the connection, unlike paramAdd which remains 'sticky'\n- general refactoring to the TCP codebase which will ensure that the state of params at the time of the action will be used when computing an action, and changes to the connection's state will not effect the action's execution\n- these changes do not break the previous API, and sending single-line 'action' still works!\n. And v3.0.10 is up on NPM.  Marking this as closed.  Enjoy! \n4d2c2ed5eaf3328659ba6ec48d8d2f562e947aea\n. I wondered when this would come up :D\nThere was a conscious choice at the start of this project NOT to support RESTful urls for a couple of reasons:\n- hierarchy confusion: If I POST the following: curl -D \"user=adam\" http://localhost/userCheck/beth?user=charlie is user supposed to be 'adam' (post), 'beth' (RESTful), 'charlie' (GET) or perhaps something else sent in a cookie or previously set in a session.  I've seen frameworks make different preference choices in all directions, and seeing as actionHero isn't primarily a web framework, the choice was made to be overly explicit in prarm definition.\n- multi-method confusion: If RESTful urls are parsed by default, it's really easy to forget about explicitly defined params, which are required for TCP and webSocket clients\nThat aside, I'm more than happy to provide some helper methods if you really want to do RESTful url parsing.  How would you feel about this (it's up on the master branch now):\n\nRoute parsing\nYou can now extract prams per HTTP(s) request from the route requested by the user via an included utility.\nURL routes remain not being a source of RESTful parameters by default, however, you can opt to parse them: \nvar urlMap = ['userID', 'gameID'];\n    connection.params = api.utils.mapParamsFromURL(connection, urlMap);\n- this is still left up to the action as the choice of which to choose as the default: query params, post params, or RESTful params is a deeply personal mater.\n- if your connection is TCP or webSockets, api.utils.mapParamsFromURL will return null\n- map is an array of the param's keys in order (ie: /:action/:userID/:email/:gameID => ['userID', 'email', 'gameID'])\n- the action itself will be omitted from consideration in the mapping\n- these are equivalent: [ localhost:8080/a/path/and/stuff?action=randomNumber ] && [ localhost:8080/randomNumber/a/path/and/stuff ]\n. By the way, thanks for all the awesome feedback! \n. So version 3.0.10 is up on NPM, and it has api.utils.mapParamsFromURL included as part of it.  \nI'm going to close this issue, but if you want to talk about it some more, and perhaps make a case for more tightly integrated URL paring params, feel free to open this issue back up again! \n. Fixed! 0a03366c1e19fc1c3e6d93bd32d14927e9af5261\n. You don't need to add it to any initializer.  Any task with a frequency should be automatically enqueued.  \nThere's a generator to help you create tasks npm run-script actionHero generateTask, but the simplest periodic task would be something like this:\nvar task = {};\ntask.name = \"sayHi\";\ntask.description = \"I will say hi every 3000ms\";\ntask.scope = \"any\";\ntask.frequency = 3000;\ntask.run = function(api, params, next){\n    api.log(\"HELLO\");\n    next(true);\n};\nexports.task = task;\nBe sure that the file name matches the task.name (would be ./tasks/sayHi.js in this case), and that you have a callback that fires when your task is complete next() in my case.  It should return \"true\" if your task completed successfully. \nThere are situations if you are running a cluster where one worker would have 'checked out' the task to process and never finished it.  If this is the case, you can either kill of that worker and one of the other workers will eventually re-add the task, or you can look in the redis hash actionHero::tasksClaimed and remove it.  Or you can just clear out your redis DB and reboot :D\n. well, there's no connection in this context, so it might be flat-out crashing (but you should see that error on the command line...)\n. ha! most likley.\nOther than the 'connection' in there, it all looks good\nexports.task =  {\n    name: \"runTracks\",\n    scope: \"any\",\n    description: \"I do stuff\",\n    frequency: 5000,\n    run: function(api, params, next){\n        api.log('runTracks..');\n        next(true);\n    }\n};\nI'll close this thread then.\nGood luck! \n. Huzzah! \nI'm still pondering your REST thoughts, and looking into exception recovery.  All good thoughts! \n. Yep.  It looks like there has been some progress on an \"async implementation of try/catch\" (which would be required for this) from the Joyent guys.  \nLeaving this link here as reference: https://github.com/joyent/node/wiki/Async-Exception-Handling\n. I'm going to look into this a bit more, and probably add an optional check for catch errors which occur only in actions & tasks (off by default).  It looks like I can inspect the stack trace and decide how to handle the exception globally.  I don't think that planning on your app crashing and restarting is the way to go, but I'll bet a lot of people will do this anyway... so I might as well build it in :D\nIn general, node convention is for async methods to callback with callback(err=bool, data={}).  This way, your calling function can decide what to do, and children shouldn't throw exceptions at all.  Even the system and I/O methods follow this pattern, or have an error event you can catch.\nFor more complex operations, it's common to keep passing around the object you are manipulating and inspect it's state along the way.  In my actionHero code, I do a ton of if(connection.error == false){ }else{ } in this pattern.\n. Oh, and this is basically the exact use case for Domains, but making use of them would require the use of node >= 0.8 and there are quite a few 0.6 users of this API... \n. Yep, domains were 100% the way to handle this kind of thing.  I was able to sort out how to conditionally use them for the right versions of node.  So that means that this will only work for node >= v0.8.0, but we can now catch errors caused within actions and tasks and not kill the server. We also don't need to resort to any sort of global error catching mechanism which would have almost certainly mess with other modules. \nBy design, if there is an error within initialization or some other part of your code, these errors will not be caught, and the server will do down.  You can certainly implement your own domain(s) for your own code as well, but as a default it seemed that the class of 'initializers' should cause the server to exit and be fixded. \nI've added some helpful debug messages to these crashes (including connection information).\nFrom versions.rb:\nnon-breaking Exceptions (node >= v0.8.0 only)\nThanks to node.js domains, exceptions in Actions and Tasks will no longer crash the application.\n- Exceptions within actions will be logged, and a new api.configData.general.serverErrorMessage will be rendered to clients within an action\n  - web clients will be sent the 500 (server error) header\n- Exceptions created in tasks will also be logged, and the task will return\n- If the Exception occured within a periodic task, the task will be re-enqueud.\n- keep in mind that any applicaton-wide settings which may have been modified in this erronious action/task will not be rolled-back\nAn example: \n...\n2012-09-26 23:10:11 | *** Server Started @ 2012-09-26 23:10:11 ***\n2012-09-26 23:10:11 | ! uncaught error from action: badAction\n2012-09-26 23:10:11 | ! connection details:\n2012-09-26 23:10:11 | !     action: \"badAction\"\n2012-09-26 23:10:11 | !     remoteIP: \"127.0.0.1\"\n2012-09-26 23:10:11 | !     type: \"web\"\n2012-09-26 23:10:11 | !     params: {\"action\":\"badAction\",\"limit\":100,\"offset\":0}\n2012-09-26 23:10:11 | ! ReferenceError: thing is not defined\n2012-09-26 23:10:11 | !     at Object.suite.addBatch.I can inject a bad task that breaks.topic.apiObj.actions.badAction.run (/Users/evantahler/PROJECTS/actionHero/spec/core_exceptions.js:21:19)\n2012-09-26 23:10:11 | !     at api.processAction.process.nextTick.api.actions.(anonymous function).run.connection.respondingTo (/Users/evantahler/PROJECTS/actionHero/initializers/initActions.js:118:40)\n2012-09-26 23:10:11 | !     at Domain.bind.b (domain.js:201:18)\n2012-09-26 23:10:11 | !     at Domain.run (domain.js:141:23)\n2012-09-26 23:10:11 | !     at api.processAction.process.nextTick.connection.respondingTo (/Users/evantahler/PROJECTS/actionHero/initializers/initActions.js:117:21)\n2012-09-26 23:10:11 | !     at process.startup.processNextTick.process._tickCallback (node.js:244:9)\n2012-09-26 23:10:11 | *\n...\n. look for this in the next version of actionHero (v3.0.11).\nClosing! \n. I think this is what you are looking for http://www.actionherojs.com/docs/core/exceptions.html#custom-error-reporters\n. As I mentioned before, this API is not only for HTTP clients, so the notion of the HTTP verb inspection can't be a primitive consideration.  Because of this, rather than using the HTTP verbs to determine which action to take on an object, you are actually defining 4 actions here: userView (get), userAdd (post), userEdit (put), and userDelte (del).  If you want to restrict each action to only a specific HTTP verb (in the case when your client is an HTTP client), you could do something like:\nif(connection.type == \"web\"  && connection.method == \"GET\"){  \n  // do stuff\n  next(connection, true)\n}else{\n  connection.error = \"this action is only for http(s) clients using the GET method\"\n  next(connection, true)\n}\nTo make this kind of thing easier, you can define a User.prototype object elsewhere in your code (perhaps a custom initializer), and have each action use your prototypical object.  This would make the action's code rather small.\n. That's exactly what I mean by \"not restful\" :D\nBy design, you need to call out each action explicitly.  I've seen people use a \"mode\" param to emulate HTTP verbs in a way that websockets/TCP clients/etc can also use {action: 'user', mode: 'add'}, but personally prefer the 4 actions.  \nPerhaps another way to phrase your request would be if there was a middleware that knew a mapping from \n- post @ action=user -> userAdd\n- get @ action=user -> userView\n- etc\nwould this help?\n. And here you go!  https://github.com/evantahler/actionHero/commit/d9d80d8564a10a6c64120a52cc6a9fed408059b2\nCheck out an example of what a routes.js looks like for actionHero here [[ https://github.com/evantahler/actionHero/blob/master/routes.js ]] \nI'm pushing the 3.0.11 branch to NPM later this weekend, and this will be included.\n. That should be it.  Just like you can run the various cluster servers on the same box, you just need to be sure no ports would end up in conflict.  If you are using redis, you probably also want to use separate DB's (just change the DB value in the redis config).  \nKeep in mind that the pub/sub part of redis is global (and not related to whichever database you are using).  This means that all of your nodes will see the same events and task queue... which will likely get weird.   I would suggest only using redis for your production server, and local memory for the reset if you only have 1 server you can use.\n. You could try using the api.cache functions (which would use redis when available, and local ram if not), but I think you might be out of luck.  Redis really wasn't built to handle multiple environments at the same time :/  \nYou can probably run more than one redis server on different ports/sockets?\n. It's not a problem with the keys (data).  It's a problem with the pub/sub system.  Take a look at how 'say' works.  actionHero nodes subscribe to message channels to get information from other nodes.  However, there is no way to 'block off' certain channels with prefixes without changing the channel names for collections of servers.   The pub/sub system is global.  So the \"say\" channel would be the same for all your environments.   The cluster management system also uses pub/sub to know who else is present.\nIf you want to submit a patch which would allow folks to change or prefix the channel names (not the key names), it shouldn't be too hard.  Look out for instances of api.redis.registerChannel and you can augment the channel names as you see fit\n. Actually, it turns out that the only real consumer of pub/sub was the intra-connection communication bus (the 'chatroom' system).  Prefixing that with the DB name was actually really simple, and should't break anyone else's work downstream.  \nhttps://github.com/evantahler/actionHero/commit/2b0209c3f1b7a7a2c204f488946059e0f5908453\nLook for this in the next release!  I think now that it should be safe to have separate actionHero clusters sharing the same redis server, but using different DBs\n. Great!  I've been using some of the questions you have asked to craft this more detailed wiki page on how actionHero uses redis\nhttps://github.com/evantahler/actionHero/wiki/Redis\nThanks for all the input! \n. I think websocket.io is just a portion of socket.io (the main protocol layer for the websocket transport).  socket.io has all sorts of cool features, like falling back to flash for browsers that can't handle websockets, and they were classy and broke it out into modules.  \nI think that you are forgetting about the other protocols that exist in actionHero.  The reason for rolling our own chatroom collection is that tcp clients, websocket clients, and http clients all need to be able to use it.  The chatroom core is pretty tiny, and in the case of websockets, doesn't add to much more abstraction.  The reason for not using socketio's internal chatrooms is that there are some web-socket only plugins that use rooms for special things (as they are a part of the spec I think), and we didn't want to mess those up, hence the ancillary protocol.  \nThe chat (and client sync features) are some of the most popular of actionHero, so it's certainly not going to be removed.  If you aren't using redis, it seems like you don't have a problem with this, so perhaps the request is simply to have a way to disable all of the redis gossip?\n. Closing this issue as connection-to-connection communication is a core feature of actionHero, and won't be removed.  I do believe that now with channel prefixes, you are able to continue your project with many environments on the same server?\nI have started a page on the wiki or new initializes which folks can contribute too https://github.com/evantahler/actionHero/wiki/Custom-Initializers\n. Oh, and there is a way to output XML rather than JSON ?outputType=xml but it's not documented.  I'll add some tests and write it up in the wiki\n. This is more of a general node question, but the answer is \"most of the time\".  The biggest variable is execution order.  It's not really clear if your client would be rendered to first or your redis callback will happen first, but they should both happen.  Actions are wrapped in a lot of process.nextTick() statements to try and be fair to all clients.\nWhenever I get confused about callbacks I use this simple demo:\n```\nvar asyncFunction = function(callback){\n    console.log(\"A\");\n    if(typeof callback == \"function\"){\n        console.log(\"B\");\n        process.nextTick(function(){\n            callback();\n        });\n    }\n    console.log(\"C\");\n    setTimeout(function(){\n        console.log(\"D\");\n    }, 5000)\n}\nvar linearFunction = function(){\n    console.log(\"Starting\");\n    asyncFunction(function(){\n        console.log(\"Ending\");\n    });\n}\nlinearFunction();\n```\nThe output is ALWAYS:\nStarting\nA\nB\nC\nEnding\nD\n. Hi!\nI've cleared up the documentation based on your question.  I'm not sure how the internals of your jobProcessor work, but here's a simple task which demonstrates what I mean by \"null\" connection.\n```\nvar task = {};\n/////////////////////////////////////////////////////////////////////\n// metadata\ntask.name = \"messager\";\ntask.description = \"sends messages\";\ntask.scope = \"any\";\ntask.frequency = 5000;\n/////////////////////////////////////////////////////////////////////\n// functional\ntask.run = function(api, params, next){\n    if(params == null){prams = {};}\n    api.chatRoom.socketRoomBroadcast(api, null, \"Hello.  The time is \" + new Date());\n    next(true);\n};\n/////////////////////////////////////////////////////////////////////\n// exports\nexports.task = task;\n```\nIn this case, every 5 seconds clients get messages like:\n```\n\ntelnet localhost 5000\nTrying ::1...\ntelnet: connect to address ::1: Connection refused\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n{\"welcome\":\"Hello! Welcome to the actionHero api\",\"room\":\"defaultRoom\",\"context\":\"api\"}\n{\"message\":\"Hello.  The time is Tue Oct 16 2012 22:07:50 GMT-0700 (PDT)\",\"from\":\"actionHero API\",\"context\":\"user\"}\n{\"message\":\"Hello.  The time is Tue Oct 16 2012 22:07:55 GMT-0700 (PDT)\",\"from\":\"actionHero API\",\"context\":\"user\"}\n{\"message\":\"Hello.  The time is Tue Oct 16 2012 22:08:00 GMT-0700 (PDT)\",\"from\":\"actionHero API\",\"context\":\"user\"}\n```\n\nIf you want to change the chatRoom which the API would broadcast messages to, then you do need to mock the connection object with something like: var mockConnection = {room: \"someOtherRoom\", public: {id: 0}}; (this is probably where your missing ID comes from.  I'll add some logic in to actionHero so that you don't need to pass id in the future (and it will always set it to 0 if you don't).  id is a value exposed to connected clients so they can reference who is sending messages without exposing any user information (like IP address).  Of course clients can share this if they want to, but better safe than sorry for default :D\nI tested this out using the newest version of action hero in a new directory:\nnpm install actionHero\nnpm run-script actionHero generate\nnpm run-script actionHero generateTask\n(copy in task example above)\nnpm start\n. And I've relaxed the mock connection requirements in this commit https://github.com/evantahler/actionHero/commit/b4445af2125ae084c5a21cc9af7d557ea40daec6\nNow you just need to say var mockConnection = {room: \"someOtherRoom\"};  This will release in the next version of actionHero.\nI'm going to close out this ticket, but if I didn't answer your question, feel free to open it again! \n. https://github.com/evantahler/actionHero/commit/2ecc937c62666f9ebbd0b7a5cb5973509dac4498\n. https://github.com/evantahler/actionHero/wiki/Chat\n. closed https://github.com/evantahler/actionHero/commit/8a7a9836d14233b1e0c296254afd5ed1b43b71df\n. What type of encryption are you looking for?  Server-Client or Server-Server?  What protocol are you most concerned about?\nIf you are looking to encrypt Client-Server, the first step is always to encrypt the transport layer (https for web/web sockets and TLS for socket clients).  There aren't helpers for TLS steaming yet, but i'll put in an issue to add it.\n. Assuming you were asking for TLS sockets, that feature is now available on master and will make it into the next release.\nI would like to hear more detail on what you are trying to do so I can help.\nhttps://github.com/evantahler/actionHero/commit/b363b5a557a2949d4bff179110a07bcfdb7221a5\n. I think you are asking for a few separate things here:\n* encryption* \n- I'm assuming you mean client-server communication\n- https and TLS are fully encrypted protocols, and thanks to that last commit, you can enable these and disable their 'plaintext' variants.  This will ensure that your messaging for all protocols (socket, web, websocket) is encrypted.\n- this should meet your requirements unless you are asking to send encrypted strings as well.  If that's the case, I would need to know more about your application, and more importantly, how you plan to send the encryption keys to the client ahead of time (since they can't be encrypted to begin with).\n* fault-data attacks *\n- I'm not entirely sure what you mean here, but I'm going to guess that you are referring to parameter overloading.\n- actionHero will only accept params you define in your actions (all others will be ignores) Check here ('safe param's) for more details https://github.com/evantahler/actionHero/wiki/Web-Clients\n- As with any site, you are responsible for sanitizing and validating user's input before using it.  connection.params will be available for you in any action to check and modify\n- actionHero is meant to be an API framework, and not just for websites.  This means that we will not be doing any CSRF / cross site forgery protection by design.  If you are using the secure variants of connection protocols that shouldn't be a problem.\n- If you want to implement a session-store (based on unique connection IDs which actionHero assigns) here's an example: https://github.com/evantahler/actionHero/wiki/init-session\n* server should ignore data that doesn't come from it's clients *\n- as a rule, the server needs to be available to listen to any new client that might show up\n- using the above methods, you can create authentication systems and enforce that connection.session have an authentication bit for 'protected' actions (this is very common).\n- If you need help writing a log int system, let me know\nI hope this helped! \n. I don't think that this belongs in actionHero core, but here's how easy it is to creates some basic (multi-node) cluster management using actionHero's cache methods\nhttps://github.com/evantahler/actionHero/wiki/init-session\n. https://github.com/evantahler/actionHero/commit/efacf47065a9e8929078f7da07396e049dccdb08\nDone!\n. not needed.  while console.log is sync, it won't wait for the console' renderer (which is the majority of the time)\n. https://github.com/evantahler/actionHero/pull/76\n. https://github.com/evantahler/actionHero/commit/ae78b7d73120cbfdca9c45ef9e20589498d5e8ec\n. Since this issue was drafted, actionsView is no longer an 'action', and we've moved this into a self-documentation class: https://github.com/evantahler/actionHero/blob/master/initializers/documentation.js\nI'm happy to accept Pull requests to change the format of this output. \n. does anyone here have experience with swagger?  Is this still the go-to format?\n. This is awesome!  Are you able to get the route params sorted out as well?  If you are able to do this in one action, I'm OK swapping the format of the documentation to swagger itself (as it's fairly arbitrary as it is now)\n. Because actions are not only for HTTP transports. \n. I guess I'd be open to moving routes into the action definition if everyone was onboard (bring it up on the mailing list).  For now though, this PR should work with the \"current state of the world\" \n. I think the goal should be to:\n- replace the showDocumentarion action and initializer with the swagger\n  stuff\n- either include the swagger UI in /public or bake it into index.html, eg\n  cig already shows docs\nOn Saturday, May 16, 2015, BoLaMN notifications@github.com wrote:\n\ngot caught up in a new angular project. I'll try get something up mid next\nweek for review.\nAlso not sure if we should include the swagger ui as default or just make\nthe endpoint available instead and leave it up to the user to include,\nthoughts?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/evantahler/actionhero/issues/44#issuecomment-102589705\n.\n\n\n\nEvan Tahler | evantahler@gmail.com | +1 (415) 413-8268\n evantahler.com | actionherojs.com\n. That's awesome! \n. We have a swagger plugin now https://github.com/supamii/ah-swagger-plugin\n. something like:\n/api/action will be 'current' which might be a symlink to /api/5/action\nand /api/4/action and /api/3/action will still exist\nFor non-web clients, perhaps a apiVerson protected param can be introduced\n. action.version will now be required, with a default to \"*\", which means the action can be used by all versions of the API.\nThe version defined in config.js will not be determined from the highest level of the api defined from any action\n. https://github.com/evantahler/actionHero/commit/8ac65b38d6b1d166f2786c138d5090ea5b2e1c98\nSome notes on the implementation: \nActionHero can now support multiple versions of the same action.  This will allow you to support actions/routes of the same name with upgraded functionality.\n- actions now hav the action.version attributes\n  - If actions don't have action.version, they will be defaulted to version 1.\n- a new reserverd param, apiVersion has been introduced.  This is used to directly specify the version of an action a client may want\n- if a client doesn't specify an apiVersion, they will be directed to the higest numerical version\n- you can optionally create routes to handle your API versions:\n`` javascript\nexports.routes = {\n  all: [\n    // creates routes like/api/myAction/1/and/api/myAction/2/// will also default/api/myAction` to the latest version\n    { path: \"/myAction/:apiVersion\", action: \"myAction\" },\n// creates routes like `/api/1/myAction/` and `/api/2/myAction/`\n// will also default `/api/myAction` to the latest version\n{ path: \"/:apiVersion/myAction\", action: \"myAction\" },\n\n]\n};\n```\n. https://github.com/evantahler/actionHero/commit/5aee5c0f5fdcd634f56b8d926c156a21c1518e8b\n. I don't have a windows environment handy, but I'll check this out in the next few days and see if I can sort this out.\nCan you paste in your package.json (or is this the result of 'npm install actionHero' ?\nOn Nov 19, 2012, at 6:26 PM, neofloww notifications@github.com wrote:\n\ninstall failed\nactionHero@3.1.3 install C:\\Program Files\\nodejs\\node_modules\\actionHero\n./scripts/install\n'.' is not recognized as an internal or external command,\noperable program or batch file.\nnpm ERR! actionHero@3.1.3 install: ./scripts/install\nnpm ERR! cmd \"/c\" \"./scripts/install\" failed with 1\nnpm ERR!\nnpm ERR! Failed at the actionHero@3.1.3 install script.\nnpm ERR! This is most likely a problem with the actionHero package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR! ./scripts/install\nnpm ERR! You can get their info via:\nnpm ERR! npm owner ls actionHero\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Windows_NT 6.1.7601\nnpm ERR! command \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"\nactionHero\"\nnpm ERR! cwd C:\\Program Files\\nodejs\\actionHero\nnpm ERR! node -v v0.8.14\nnpm ERR! npm -v 1.1.65\nnpm ERR! code ELIFECYCLE\nnpm ERR!\nnpm ERR! Additional logging details can be found in:\nnpm ERR! C:\\Program Files\\nodejs\\actionHero\\npm-debug.log\nnpm ERR! not ok code 0\nC:\\Program Files\\nodejs\\actionHero>\nLOG FILE OUTPUT\n2719 verbose true,C:\\Program Files\\nodejs\\node_modules,C:\\Program Files\\nodejs\\node_modules unbuild actionHero@3.1.3\n2720 info postuninstall actionHero@3.1.3\n2721 error actionHero@3.1.3 install: ./scripts/install\n2721 error cmd \"/c\" \"./scripts/install\" failed with 1\n2722 error Failed at the actionHero@3.1.3 install script.\n2722 error This is most likely a problem with the actionHero package,\n2722 error not with npm itself.\n2722 error Tell the author that this fails on your system:\n2722 error ./scripts/install\n2722 error You can get their info via:\n2722 error npm owner ls actionHero\n2722 error There is likely additional logging output above.\n2723 error System Windows_NT 6.1.7601\n2724 error command \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\"\n\"actionHero\"\n2725 error cwd C:\\Program Files\\nodejs\\actionHero\n2726 error node -v v0.8.14\n2727 error npm -v 1.1.65\n2728 error code ELIFECYCLE\n2729 verbose exit [ 1, true ]\n\u2014\nReply to this email directly or view it on GitHub.\n. Ahh! \nThe issue was that windows doesn't (by default anyway) allow you to run arbitrary scripts without invoking an interpreter.  It's fixed here https://github.com/evantahler/actionHero/commit/47e01b8880a0d34b4e3205524d02e7a4fd2bb493 and will be pushed to NPM in the next version\n. And it's live now on NPM. Enjoy!\n. solved in v4\n. basically, this will only be used by default to choose which config.js to use, but folks can extend this in their own code\n. solved in v4\n. Happy to help!\n\nWhich line in line 16 in the initializer? (I'm assuming that you clipped out some more of your function).\nAt a quick glance, it looks like you defined your sendai function to be called like this: api.sms.sendai(api, connection, next) but are invoking it like this in the action api.sms.sendai(from, to, text, next).  This might be part of the problem.\nOne thing I should clarify is that when requiring modules, the path is relative to the application's root, and not any specific file (although this might change depending on your operating system). Your require statement nexmo = require('../node_modules/nexmo-api/lib/nexmo.js').Nexmo should either start with __dirname and then go up the directory as you have it, or start with process.cwd() and not have the /../\nI would suggest moving these lines up out of sendai into the main body of the initilizer \n```\nnexmo = require('../node_modules/nexmo-api/lib/nexmo.js').Nexmo,\nkey   = 'kkk',\nsecret  = 'sss';\ns = new nexmo(key, secret);\n```\nThis way, s will be built up before someone tries to use api.sms.sendai, and you will see the errors earlier on (at initialization, rather than waiting for someone to use the function)\n. Yeah, don't use nodeChecker for reference.  It's long past its end-of-life.  I'll have a replacement project up one day...\nAs far as hosting actionHero on a PASS, there are currently no hosts (heroku, nodejitsu, app fog, etc) which support persistant connections.  This means that only http/s connection methods are available to you.  This also means that actionHero's TCP and websocket connection types won't work on these types of hosts.  \nHowever, socket.io has a few fallback options where websockets don't work, including XHR ajax requests, and this is what the article is suggesting you try.  I just updated the version of actionHero to allow for hash based options to socket.io (something I should have done a while back).  Change your config.js to look like this and you should be good to go (after upgrading your actionHero version to 3.1.5):\n```\n/////////////////\n// Web Sockets //\n/////////////////\nconfigData.webSockets = {\n    // You must have the web server enabled as well\n    \"enable\": true,\n    \"logLevel\" : 1,\n    \"settings\" : [\n        \"browser client minification\",\n        \"browser client etag\",\n        \"browser client gzip\"\n    ],\n    \"options\" : {\n        \"transports\": [\"xhr-polling\"],\n        \"polling duration\": 10\n    }\n};\n```\n. added this as a note on the wiki https://github.com/evantahler/actionHero/wiki/Web-Socket-Clients\n. Good catch! \nI'll add some tests for this as well\n. And an easy test added: https://github.com/evantahler/actionHero/commit/8a5f7cd630bc1556cc2ac2774ba1c4bcc87d7237\n. What OS are you running actionHero on?\nThe default config.js has the server binding to the 0.0.0.0 interface, which in OSX and most linuxes means \"all the interfaces I have\".  This covers 127.0.0.1, localhost, private and public IPs.  You probably don't want this in production, but it makes things easy when you start developing.  I think on windows there are some weird things that happen when you try to bind to 0.0.0.0.  \nTry setting the bind address to your internal IP (likely to be 192.168.?.?) and setting that as the {someip} in windows as well.\nAlso, I can confirm that using both curl and the openSSL client work on the following OSes which I've used recently:\n- OSX Mountain Lion\n- Joyent SmartOS\n- Ubuntu 12\n- CentOS (I forget which version)\n. Also, while we are on the topic, here's a good way to check if curl can actually reach your server (verbose headers) AND format the JSON response in a pretty way (tested on OSX)\ncurl localhost:8080/actionsView -v | python -mjson.tool\nI'm also a big fan of the httpie tool https://github.com/jkbr/httpie which is almost a drop-in command line replacement for curl which is a heck of a lot easier to use for this kind of debugging\nNote the response in curl:\n- the \"trying\" section was able to resolve localhost to 127.0.0.1\n  - in your case, this is likely not to be working\n- header status = 200\n- a session cookie was set\n- there was some body content (JSON) \n``` bash\n\ncurl localhost:8080/actionsView -v | python -mjson.tool\n About to connect() to localhost port 8080 (#0)\n   Trying 127.0.0.1...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0 connected\n Connected to localhost (127.0.0.1) port 8080 (#0)\nGET /actionsView HTTP/1.1\nUser-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5\nHost: localhost:8080\nAccept: /\n< HTTP/1.1 200 OK\n< X-Powered-By: actionHero API\n< Content-Type: application/json\n< Set-Cookie: sessionID=9be36b63658b93b583d760501a85f52b59405de8\n< Date: Thu, 29 Nov 2012 15:56:41 GMT\n< Connection: keep-alive\n< Transfer-Encoding: chunked\n< \n{ [data not shown]\n100  2084    0  2084    0     0   556k      0 --:--:-- --:--:-- --:--:-- 1017k\n Connection #0 to host localhost left intact\n Closing connection #0\n{\n    \"actions\": [\n        {\n            \"description\": \"I will return an array of all the action accessable to uses of this API\", \n            \"inputs\": {\n                \"optional\": [], \n                \"required\": []\n            }, \n            \"name\": \"actionsView\", \n            \"outputExample\": {\n                \"actions\": [\n                    {\n                        \"description\": \"something about the action\", \n                        \"inputs\": {\n                            \"optional\": [\n                                \"input 3\", \n                                \"input 4\"\n                            ], \n                            \"required\": [\n                                \"input 1\", \n                                \"input 2\"\n                            ]\n                        }, \n                        \"name\": \"actionName\", \n                        \"outputExample\": {\n                            \"listOfStuff\": [\n                                1, \n                                2, \n                                3\n                            ]\n                        }\n                    }\n                ]\n            }\n        }, \n        {\n            \"description\": \"I will test the internal cache functions of the API\", \n            \"inputs\": {\n                \"optional\": [], \n                \"required\": [\n                    \"key\", \n                    \"value\"\n                ]\n            }, \n            \"name\": \"cacheTest\", \n            \"outputExample\": {\n                \"cacheTestResults\": {\n                    \"deleteResp\": \"OK\", \n                    \"key\": \"key\", \n                    \"loadResp\": \"OK\", \n                    \"saveResp\": \"OK\", \n                    \"value\": \"value\"\n                }\n            }\n        }, \n        {\n            \"description\": \"I provide access to chat functions for http(s) clients.  Use method to choose the sub action\", \n            \"inputs\": {\n                \"optional\": [\n                    \"room\", \n                    \"message\"\n                ], \n                \"required\": [\n                    \"method\"\n                ]\n            }, \n            \"name\": \"chat\", \n            \"outputExample\": {\n                \"roomStatus\": {\n                    \"roomStatus\": {\n                        \"members\": [\n                            {\n                                \"id\": \"MTI3LjAuMC4xNjQzNDAwLjUyNDU1NTk1MTgyMjU0OTE=\"\n                            }, \n                            {\n                                \"id\": \"MTI3LjAuMDAwLjasdasgagUyNDU1NTk1MTgyMjU0OTE=\"\n                            }\n                        ], \n                        \"membersCount\": 2\n                    }\n                }\n            }\n        }, \n        {\n            \"description\": \"I will return a static file saved on the API server (usually in /public/).  If fileName is not a param, then I will assume the path specified is the file name.  I will not return a normal API response. I will return the file with proper headers and mime-types on sucess, and a 404 on error.\", \n            \"inputs\": {\n                \"optional\": [\n                    \"fileName\"\n                ], \n                \"required\": []\n            }, \n            \"name\": \"file\", \n            \"outputExample\": {}\n        }, \n        {\n            \"description\": \"I am an API method which will generate a random number.  Different HTTP verbs will multiply the answer\", \n            \"inputs\": {\n                \"optional\": [], \n                \"required\": []\n            }, \n            \"name\": \"randomNumber\", \n            \"outputExample\": {\n                \"randomNumber\": 123\n            }\n        }, \n        {\n            \"description\": \"I will return some basic information about the API\", \n            \"inputs\": {\n                \"optional\": [], \n                \"required\": []\n            }, \n            \"name\": \"status\", \n            \"outputExample\": {\n                \"stats\": {}, \n                \"status\": \"OK\", \n                \"uptime\": 1234\n            }\n        }\n    ], \n    \"requestorInformation\": {\n        \"id\": \"9be36b63658b93b583d760501a85f52b59405de8\", \n        \"receivedParams\": {\n            \"action\": \"actionsView\", \n            \"limit\": 100, \n            \"offset\": 0\n        }, \n        \"remoteAddress\": \"127.0.0.1\"\n    }, \n    \"serverInformation\": {\n        \"apiVersion\": \"4.0.0\", \n        \"currentTime\": 1354204601396, \n        \"requestDuration\": 1, \n        \"serverName\": \"actionHero API\"\n    }\n}\n[07:56:41] evantahler@TheYellowDart-2 [~] \n```\n. There's probably no reason to install python just for the formatting :D (it comes with OSX).\nIf @benjaminchelli can get your PHP to work, and you can get curl working on the command line, its likely a php problem\n\nAlos, looks like you literally curled {someip} and not your actual IP ;) \n. @le-phather any update?  Can I close this issue?\n. d7ad00255822db2cb4e318408512f6674f00f519\n. Actually, this is bad, and we should always prefer local installs.\nAll docs updated.\n. make a new folder and do the following:\ncd my_new_folder\nnpm uninstall actionhero -g ensure that actionhero is not installed globally\nnpm install actionhero install actionhero into node_modules in your new folder\nnode_modules/.bin/actionhero generate create a new actionhero project\nnpm install resolve any dependancies\nnpm start start up the new project\n. Can you share your package.json?\n. Oh, that's not going to work!  Check out the install steps:\nnpm install actionhero\n./node_modules/.bin/actionhero generate\nnpm start\nBasically, THIS https://github.com/evantahler/actionhero/blob/master/bin/templates/package.json package.json will be generated for you. \n. done\n. 3737ba8cc617a0fcdee2c3e9c499939f0541eb03\n. This is a bad pattern, as intit files tend to create connections to other services (DBs, APIs, etc), and this would create a lot of load.  \nChanging an init file (for now) requires a manual restart\n. Done! https://github.com/evantahler/actionHero/commit/4c65aa8baa20ea353a4a86fa6317d671af6ea284\n. That's crazy! (and kind of awesome).\nI'll be honest, moving my terminal around was not a use case I tested :D\nAs that certainly wasn't the intention, I've patched the signals rules in startCluster to ignore SIGWINCH for now, and force-updated to NPM.  4b3b70cb74eeb363c12d19ab261e48bc9a522246\nI'll find a more appropriate signal for 'stop all' in the future\n. After doing some research on other servers [ http://unicorn.bogomips.org/SIGNALS.html ] , it does look like SIGWINCH is a common signal for 'stop all the children', but it should only be used in a detached/daemonized state.  I've done that there https://github.com/evantahler/actionHero/commit/b195f76bcf23724330ec5204121c8d666b24424e\nThanks again! \n. https://github.com/evantahler/actionHero/commit/67843a61003a552716a0f3b12717ffd6884ce3bc\n. Huh, It seems ok for me (OSX, master branch)\n```\n\ncurl -I -L  http://localhost:8080/file/logo/actionHero.png\nHTTP/1.1 200 OK\nCache-Control: max-age=60, must-revalidate\nExpires: Tue, 04 Dec 2012 04:45:28 GMT\nContent-Type: image/png\nX-Powered-By: actionHero API\nSet-Cookie: sessionID=610ce5474843c74e8e7abcf709c778ca2d4fc01e\nDate: Tue, 04 Dec 2012 04:44:28 GMT\nConnection: keep-alive\n```\n\nLet me do some more debugging to see if I can see what the differences might be.\nWhat OS are you on? (and it looks like that image was from Chrome?)\n. Ahh, ok! It looks like node itself ignore duplicate headers, and so does curl in some cases.  I've added some tests and fixed that function here (although the tests won't do that much good, as they themselves seemed to ignore that duplicate header) https://github.com/evantahler/actionHero/commit/883ac6adab6429770092e345fa9bd7375d5e8e4c\nGood catch!\n. turns out you can't expire a hash's key... so back came the sweeper! \nhttps://github.com/evantahler/actionHero/commit/8fdd275540be1d140607213dc8e60b6c9f25c09d\n. better api: connections are still in a 'primary' room (where say and roomView respond to), but you can also register to listen to other rooms with listenToRoom and silenceRoom.   You still need to roomChange to a new 'primary' room to interact with a room however\n. https://github.com/evantahler/actionHero/commit/5203e0f6470f00f279da8087cb66f7ae05a92b40\n. https://github.com/evantahler/actionHero/commit/f71b21c7068871f548a66daf0d3ab5b0ac4d9501\n. 5 seems like a good place to start\n. done and done \nhttps://github.com/evantahler/actionHero/commit/593a5d9cedd663443f36f399d83a214473f1b1c6\njavascript\n{ \n  context: 'response',\n  messageCount: 9,\n  error: 'you have too many pending requests' \n}\n. Relevant https://gist.github.com/4274698\n. Seems like a problem with where/when events from connection pools are emitted (redis, mysql, etc).\n. Solved (a bit hacky) until redis updates\nhttps://github.com/evantahler/actionHero/commit/c5ebfc0e819cc0ed18e3ebb86c09f32b35406d73\n. warn  - client not handshaken client should reconnect\n. Looks like this is a common problem with socket.io... lets try moving to the bare minimum of engine.io \nhttps://github.com/LearnBoost/engine.io\n. Ok... Faye looks to be the better alternative.  Look for that soon\n. I don't understand the desire to connect an actionHero server with another server via rabbitMQ or TCP.  Are you suggesting that you have 1 server that handles requests from a user once they are logged in, and another to handle the oAuth handshakes?\nIf that's the case, it shouldn't be necessary.  Assuming you are asking how you can allow folks to log into your server via facebook, that would make you an oAuth consmer not a server, and you can then just use Passport directly.  I haven't used Passport directly, but I've used the raw oauth package with success https://github.com/ciaranj/node-oauth\nThe trick is having 2 acitons: 1 the user starts at to initiate the response, and a second action to 'catch' the user when they are forwarded back from the provider.  \nI'll try to create a twitter example for you this weekend\n. Happy to help!\nI still don't see what you need rabbitMQ for, as all the auth steps need to be done restFULLy by the browser, so there is no reason for 'offline' processing from the web server.\nYou can certainly access twitter on behalf of a user once they have given you permission.  Just keep their oauth tokens stored somewhere and you can always read their tweets, post for them, etc.  That's the point of oauth: it gives you a way to preform actions on \"behalf\" of a user, which they can revoke at any time, without sharing a password.\nHere's a working example of how to preform the oauthLogin with twitter and get some basic information about them (using just the oauth package): https://gist.github.com/4326070.  Note the 2 actions needed, and how I use actionHero's cache to store the private keys for the user until they come back on the second request.  Also take note of how to implement a redirect with actionHero by manipulating the headers.\nRegarding hosting your own oauth provider, that's a whole other can of worms :D\nI doubt that Oauth2orize will work as it seems really integrate with connect and express, however this looks promising https://github.com/ammmir/node-oauth2-provider  Anything that works with just the connect middleware should work with actionHero.  Check the example https://github.com/ammmir/node-oauth2-provider/blob/master/examples/simple_express2.js  Just make all of their routes (get, post, etc) into actions and it just might work :D\n. Any updates?  I'll close this ticket soon.  feel free to re-open it if you nee something\n. Thanks! https://github.com/evantahler/actionHero/commit/5c3f00a30a3776bf00b4c3d8e7dbb24407dfc25c\n. Sorry for the confusion!  I've deleted that page, as it's not really relevant any more.  \nThe proper way to use actionHero pragmatically is like you have it, but there is no longer an initFunction any more (removed in v4), and these are replaced with more robust initializers [[ https://github.com/evantahler/actionHero/wiki/Initializers ]].  \nAlso, you don't need to write your own 'main' app, and can just use (/node_modules/.bin/)actionHero start and it will read in all your initializers. \nHope this helped!\n. A few thoughts:\nYou are correct that all internal initializers are loaded before your custom initializers except for the servers ('initWebServer', 'initWebSockets', 'initSocketServer').  The reason for this was to ensure that any custom code needed within actions would be available before servers start, otherwise requests would fail (for example an action requires a connection to a database to exist).   I would also suggest not overriding internal methods like api.socketServer.parseRequset, mostly because I can't guarantee they will continue to exist in the future:D\nI tend to do my authentication logic at the action layer.  This way I can have 'public' and 'private' actions.  For example, the 'signup' action should be available to everyone, but the 'logout' action requires folks to be logged in.  Here's an example initializer for sessions using api.cache https://github.com/evantahler/actionHero/wiki/init-session\nYou can have an authentication action which sets a key in a connection's session that they are authenticated, and then check that in all subsequent actions.\nI would prefer to not have servers load until after user-defined initializers, but if you still want to go down that route, I can check it out\n. On reflecting on this more, it was easy to add a _start() method to the initializers  https://github.com/evantahler/actionHero/commit/67d82ce5034f996a682ceec31b8720960a3b2cfd\nI've updated the wiki on this so show how to use the _start() method.  In your case, you would put your override of api.socketServer.parseRequset in _start() and it should work\nI'll push a new version to NPM soon\n. actually, fixing up the load order like this, means you don't even need the _start() method :D\nHere's how to override api.socketServer.parseRequset to just say \"hi\" to every client\n```\nexports._project = function(api, next){\napi.socketServer.parseRequset = function(api, connection, line){\n    api.socketServer.sendSocketMessage(connection, {message: \"hi\"});\n  }\nnext();\n}\n```\n. Good call on the spelling! https://github.com/evantahler/actionHero/commit/d231fc3a188a1655c43e829cdb9a3b5bf57f424b\n. Thanks so much! \nI am not a strong speller :(\nhttps://github.com/evantahler/actionHero/commit/4a51885a52a9e91c5c1bd70c459fde3e205de522\n. You are correct again!  Luckily this was an internal object this time\nhttps://github.com/evantahler/actionHero/commit/ab6f0630ad83c6f1969112b778652ce3fcf58ed6\n. This requires a refactor of the task system.  Generally, tasks should be slid from queue to queue rather than popped and placed back\n. https://github.com/evantahler/actionHero/pull/76\n. Hey!  Thanks for taking the time to do this.\nIt looks like you and I both have been finding similar topics to work on.  I just finished a big refactor of the task system and stats system in v4.1.0 (now current).   I think the changes are pretty worthwhile [[ http://blog.evantahler.com/blog/actionHero-v410.html ]] , but they unfortunately render your pull request unable to be merged.  Can you update it?\nA question:  I am philosophically against the notion that some actions are valid only for certain protocols.  The spirit of the thing is that anyone (TCP, webSocket, etc) can use all actions.  That said, there are certainly things that only make sense for certain clients (like routes for http/s clients), and as such they are routes are treated as optional add-ons, but not a modification to the actions themselves.\nIn the past if I had an action which I really only wanted to be accessible via a certain type of client, I just added something like the following to my action:\njavascript\naction.run = function(api, connection, next){\n  if(connection.type === 'webSocket'){\n    // do stuff\n  }else{\n    connection.error = \"not for you\";\n    next(connection, true);\n  }\n})\nMay I ask what you are doing which requires many actions to be locked to only a certain client type?\nKeep in mind you can always disable servers you don't want running in config.js\n. Hey!\nIt looks like your change became un-mergeable again... I'm almost done with these severe api changes...\nRather than make you update your code again, I implemented a very similar feature for you in version 4.2.1.  I say similar because I did make a few philosophical changes:\n- Rather than define a list of connectionTypes which are allowed to use an action, I prefer a list of connectionTypes which are not allowed.  This follows the general philosophy that in the regular case, actions are available for all connections.\n- This means the variable defining this behavior ended up being called action.blockedConnectionTypes \n- I didn't want to use the term protocol as a great many folks actually think that is specific to 'GET', 'POST', etc, and they ended up confused... so connection.type seemed safer.\nI hope this works for you! If it does, please close this pull request / issue.\nThanks for the great idea! \nThe changes specifically for this feature can be seen here: https://github.com/evantahler/actionHero/compare/v4.2.0...v4.2.1\n. By the way, I'm curious to know what folks are using actionHero for.  \nI just started a mailing list https://groups.google.com/forum/?fromgroups=#!forum/actionhero-js for actionHero.  Feel free to let me know what your use case is, and what new features you might want\n. this is currently happening in the unstable development branch\n. Thanks for this catch!\nI've added a test for this as well https://github.com/evantahler/actionHero/blob/master/test/client_web.js#L108-L115\nI'll release a new version today with this fix.\n. ... And v4.2.2 is up on NPM.\nThanks again!\n. By the way, I'm curious to know what folks are using actionHero for.  \nI just started a mailing list https://groups.google.com/forum/?fromgroups=#!forum/actionhero-js for actionHero.  Feel free to let me know what your use case is, and what new features you might want\n. Good idea! \nHave you tested out some of the more 'esoteric' action names (like you describe) on web clients?  It seems that trying to hit server/api/group/model:create?key=value might cause some problems (while  server/api/?action=group/model:create&key=value is probably OK once it's HTML encoded).\nIf you want to allow totally free-form names in actions, there probably are some rules we need to ensure that at least they are HTML safe.\n. That could be a cool approach.  Perhaps there are additions we can make to the router  https://github.com/evantahler/actionHero/blob/master/routes.js which, in addition to the explicit routes, could extrapolate it's own routes from a naming convention like this.  \nIn general, I would prefer to use the explicit HTTP verb rather than a CRUD verb (IE: model:post rather than model:create).\nI'll play around with it this weekend \n. I merged in your pull request, but I revered your changes to webServer.js, as they break a number of the tests.\nrun the test test/action_chat.js, and you will notice that urls of the type localhost:8080/chat/?method=messages need to be parsed into action=chat with params method=messages.  \nThe changes you introduced parse the action as chat\\.  You will need to add in some logic to fall back on \"simple\" named actions if ones with \"/\" can't be found\n. Good catch!  I'll need to turn off my network card more often :D\nhttps://github.com/evantahler/actionHero/commit/9ea36cc5c87b49d6c4509bc98228652ebbbc96cc\n. var connection = new api.connection({\n    type: 'task', \n    remotePort: '0', \n    remoteIP: '0', \n    rawConnection: {},\n  });\n  connection.params = params;\n. https://github.com/evantahler/actionHero/commit/1d5d52c839f569daa4262868e08678e82e60174b\n. Thanks!\n. To simplify, this the sleep should only be incurred if there are not local actions, no global actions, and no delayed tasks eligible to be popped. \n. Thanks!\n. Yep, we fixed that one last night https://github.com/evantahler/actionHero/commit/01086ec06fe25f929f1fc8ffb17080fdb55e7064.  I'll update NPM with it shortly.\nSorry! \n. And v 4.2.4 is up on npm.\nhttps://npmjs.org/package/actionHero\n. +1 \nI also want too offer the ability to split logs between actions / tasks / and servers.\n. https://github.com/evantahler/actionHero/pull/90\n. Winston is great.  Good call!\n. Note that this caused a major version bump, as the api for using api.log changed\n. Related: https://github.com/evantahler/actionHero/pull/89\n. Fair enough.  It still might be a good idea to investigate allowing for variability in load order (and inclusion options).\nFor now, you can set the servers enable: false to skip them.\n. Actually, the collection of queues should be variable (and defined in config.json)\n. This will be solved by https://github.com/evantahler/actionHero/issues/229\n. May I ask what the use case for this is?  You can disable servers you don't want (all of them even) in the config already, and you can load initializers in your project and specify behaviors to be run after all initilizers have been loaded with the _start() functions.  Is there something missing form the http server that you want to add?\nEither way, I would suggest that rather than requiring that a large, order-specific list bein config.json, we make it optional.  If you don't supply configData.general.startupInitializers, that the default load order is defined elsewhere.\n. Closed?\n. I've got a VM with Ubuntu 12.04 and I just updated to node v0.8.18 (along with running all relevant apt updates) and I can't reproduce your bug :/\nI tried both cloning the actionHero repo and running the server directly, and creating a new project from npm with actionHero generate.  demo.actionherojs.com is also debian-based linux server and is not having trouble.\nThe exception you have is a core node exception... and I don't really know how this library could cause it.  Can you try a small script where you try to catch process exceptions like it's faulting on?\n. Oh! Don't use the version of node from github, as that's likely to be unstable (and I haven't tried actionHero on it)\nGet your node package either from apt or, better yet, compile the latest version from http://nodejs.org/download/ .  We are on v0.8.X.    It's the normal type of configure, make, make install kind of install process for ubuntu.\n. a bit old, but it might work: http://stackoverflow.com/questions/5650169/uninstall-node-js-using-linux-command-line\nWhen you install the 'current' version, it will at least replace the binary in your PATH for you\n. I'm considering changing this behavior in the other direction actually.  I always prefer verbose code and configuration (perhaps you can tell by my style in this project).  I would rather have the app crash with an exception \"no config file found\", than mix partial config files.  While this makes version upgrades annoying, I personally feel that the effort is worth the awareness of the new settings and options.  That is how projects like redis and mysql treat thier config files\n. Here is my proposal in code 04119760ca25a4a58401b82e23c11a749eea8072\n. :+1: \n. 0b3181996b454b35f3879f5b30235be060bcd935\n. Good catch! It looks like at the first request the process dies when running a single server as a daemon.  I can see your bug on OSX and Ubuntu. \nRunning the cluster as a daemon seems to remain OK.  I'll look into it shortly \n. This commit should fix that right up https://github.com/evantahler/actionHero/commit/beb7b0dedc71b9a65cb587e83d3700683945b8c5\n. if you just cloned this repository, simply git pull.  Otherwise, I'll release a new version to NPM in a few days with some more new stuff, and you will need to up the version in your project's package.json\n. fbf6f6b7516fc0c644b505483327b4f7e9bc0669\n. Whops! \nMake this  a pull request and I'll merge it in\n. Green and good to merge!\n. I think you are misunderstanding the order of operations here.  Your last next() (the one you can remove and have everything work) will ALWAYS fire before anything inside the this.query() closure.  This happens because preforming the query takes some amount of time (even 1ms) while just calling next() can happen right now.  One you call the callback of an action, it will render the results back to the client, and any other callbacks will have an indeterminate result (sometimes a TCP client might get 2 responses, HTTP clients won't ever).\nGenerally, you need to defer all of your decision-making logic until you have the results of all of your async data lookups (mysql in your case).  This means inside the closure. IE:\njavascript\nmysql.query(select count(1) as `total` from stuff).execute(function(err, data){\n  if(err != null){ connection.error = err; next(connection, true); }\n  else{\n     if(data.total > 1){\n         connection.response.mysql= 'happy';\n      }else{\n         connection.response.mysql= 'sad';\n      }\n      next(connection, true);\n  }\n});\n. This is also kind of the same thing as this classic nextTick() confusion:\n``` javascript\nfunction foo() {\n  process.nextTick(function(){\n    console.log('foo');\n  });\n}\nfoo();\nconsole.log('bar');\n```\nThe results will always be:\nbar\nfoo\nEven though the function which should echo foo was called first\n. Closing this issue as this a general javascript thing, and not related to actionHero\n. A fine change.  I'll do the same thing for tasks to be consistant. \n. Actually, I was wrong.  We should make the api namespace more like the tasks namespace.  I'm pulling this pull request in now https://github.com/evantahler/actionHero/pull/103 as a sort of addendum to this one.  Note that the functionality you want is maintained, but the name and namespace of the function have changed\n. Fair enough! Having a few people request the feature is a good reason to bump up the priority.  I'll try to get it working this week\n. Doesn't yet work with regex\n. 84d825c6d11a5c48a95c56cb3693d6e408730f59 adds regexp matching support to the routes\n. Well, actionHero is an API framework, not necessarily a rendering framework.  The actions (and the routes which correspond to them) are meant to return data (JSON, XML) and not really render web page (or part of a web page).  You could probably hack the actionProcessor to return HTML, but I don't recommend it. \nThat said, I've seen quite a few \"single page apps\" work with action hero where a small number of pages used !# (or even simple URL params ?state=page1) to dictate which api action the page should call when reloaded.   That's up to the client-side logic to determine.\n. > Am I right to assume then that this scenario will only work with actionHero when running a separate web/express server?\nCertainly not! Many of the sites I see which use actionHero are truly 'static' sites which just consume the API, and there is no reason to not have a single page app.  (let's ignore server-side rendering for SEO).  I've seen folks successfully write actions which contain DOM data to insert into various parts of the page.  \nPersonally, I usually write a getPageState action which passes the hash and cookies along as param to the API to validate which page should be loaded, and then I load in the required partials with Jquery's load() method to modify the dom as needed.  I like this pattern because I can still have sperate \"pages\" which tend to make project management/organization easier, let the user only load what is needed at that moment, and still let the entire front-end of the site be static (full CDN hosting, etc).  I generally try to avoid any server-side rendering entirely, but that's just my philosophy.  \nYou are correct that actionHero currently contains now way of manipulating/rendering \"assets\" (which is a collection I consider HTML pages to be a part of).  Currently, there are no plans to extend actionHero to also be a 'rendering' stack, but I'm happy to check out pull requests or extensions that do just that.  It shouldn't be too hard to hook into the api.fileServer methods to include a preprocessor.\n. Ahh! Your example was helpful.  I'm not sure what I thought you were trying to accomplish, but yes, now I get it :D\nThere IS a way to do exactly this, although it is a little bit of an anit-patern.  To get you going right now with just actionHero, here's what I suggest:\n`` javascript\nexports.action = {\n  name: \"fileResponder\",\n  description: \"fileResponder\",\n  inputs: { required: [], optional: [] },\n  run: function(api, connection, next){\n    api.fileServer.sendFile(__dirname + \"/../public/index.html\", connection, function(){\n      next(connection, false); // notetoRender` => false\n    });\n  }\n};\n```\n1) All the callbacks to actions take 2 options.  The connection, and whether or not to \"render\" it.  The reason for that second param is for cases where the action may have already sent content to the connection and you don't want to use the default response type.\n2) actionHero already has some helpers to send files to folks (determine mime types, etc).  You can use them wherever you want.  Here I read in a static file and return it like you do in express, but you can also render whatever HTML string you want and return it as well more directly operating on connection.rawConnection.req and connection.rawConnection.res.  \nYou can use the new router to pass many routes to this action.\n. happy to help!\n. Update! \nNow with actionHero 6.x, the above example no longer works.  Here's how to accomplish sending a static file via an action now:\nhttps://gist.github.com/evantahler/5711399\n. Thanks! \n. Sorry for the delay, I've been sick for the past few days.\nIt totally makes sense that params should be reloaded when an action changes.  Seeing as this only matters in development mode, we can be a little inefficient here.  I think your solution will work for new variables added, but it won't remove existing params that are no longer referenced.  Why not create a general case loadPostVariables like you have, and just call it any time an action file changes to \"freshly\" reload params?\nI don't understand how the connection changes are releven to this request (createHandlers and destroyHandlers)\n. Your pull request here has 2 separate ides going on: reloading params and connection handlers.  In the future, please separate these to 2 different pull requests so we can check them out one by one.\nTo move things along, I implemented param reloading pretty much as you had done it here in this commit [[ feeace4c2c7c5acff031942fecf83775a80eec76 ]] .  Basically the only difference is that I kept the initial load out of a _start() callback so it would be available to other initializers before that time, and therefore not changing the boot behavior.  \nRegarding connectionHandlers, again the concept is a good one!  I would suggest turning the connection itself (or a new api.connections.manager object) into an eventEmitter rather than keeping an array of callbacks.  This way folks can use the built in register and unregister methods, which seems to be the pattern you are heading towards.   This is also the type of thing which should totally have tests along with it :D\nThanks! \n. Thanks for looking into this!\nI've created a test posting  both \"normal\" string params and multiple files and everything seems to be working out for me (OSX, Crome).  Would you mind taking a look at this test action and HTML and letting me know where your code differs?  Also, I'll add some more detail to the wiki about uploads, seeing as there is none :D\nYou have also made me realize that I'm not allowing anyone to modify the formidable options!   https://github.com/felixge/node-formidable  Changing the upload location and max file-size is pretty important.  This commit fixes that up https://github.com/evantahler/actionHero/commit/18080f193d34dc35cbd4b1ef3faae2805b545d9b\n\nuploader.js (action)\njavascript\nexports.action = {\n  name: 'uploader',\n  description: 'uploader',\n  inputs: {\n    required: [], optional: ['file1', 'file2', 'key1', 'key2']\n  }, \n  outputExample: null,\n  run: function(api, connection, next){\n    console.log(\"\\r\\n\\r\\n\")\n    console.log(connection.params);\n    console.log(\"\\r\\n\\r\\n\")\n    next(connection, true);\n  }\n};\nuploader.html (public)\nhtml\n<html>\n    <head></head>\n    <body>\n        <form method=\"post\" enctype=\"multipart/form-data\" action=\"http://localhost:8080/api/uploader\">\n            <input type=\"file\" name=\"file1\" />\n            <input type=\"file\" name=\"file2\" />\n            <br><br>\n            <input type='text' name=\"key1\" />\n            <input type='text' name=\"key2\" />\n            <br><br>\n            <input type=\"submit\" value=\"send\" />\n        </form>\n    </body>\n</html>\nexample output\n```\n2013-02-13 20:32:47 - notice: server ID: 10.0.1.39:8080\n2013-02-13 20:32:47 - notice:  Server Started @ 2013-02-13 20:32:47 \n{ action: 'uploader',\n  file1: \n   { domain: null,\n     _events: null,\n     _maxListeners: 10,\n     size: 5477608,\n     path: '/Users/evantahler/PROJECTS/actionHero/tmp/86b2aa018a9785e20b3f6cea95babcca',\n     name: '1-02 Concentration Enhancing Menu Initialiser.mp3',\n     type: 'audio/mp3',\n     hash: false,\n     lastModifiedDate: Wed Feb 13 2013 20:32:49 GMT-0800 (PST),\n     _writeStream: \n      { ... },\n     length: [Getter],\n     filename: [Getter],\n     mime: [Getter] },\n  file2: \n   { domain: null,\n     _events: null,\n     _maxListeners: 10,\n     size: 10439802,\n     path: '/Users/evantahler/PROJECTS/actionHero/tmp/6052010f1d75ceaeb9197a9a759124dc',\n     name: '1-10 There She Is.mp3',\n     type: 'audio/mp3',\n     hash: false,\n     lastModifiedDate: Wed Feb 13 2013 20:32:49 GMT-0800 (PST),\n     _writeStream: \n      { ... },\n  key1: '123',\n  key2: '456',\n  limit: 100,\n  offset: 0 }\n``\n. I suddenly realized that you meant a litteralmultiple=\"multiple\"` in the form!  Sorry about that.\nDo you happen to know why the main branch of formidable doesn't have @dvv's patch you referenced?  It's quite old at this point.  However, I also only see 1 of my n files uploaded via this method.  I don't want to require a non-NPM'd module in actionHero, and I would also prefer not to need to patch a dependency either. \nWe are using the current version of formidable... \n. And... it seems like it is still an open issue :/  https://github.com/felixge/node-formidable/issues/33, and has been for some time.\nI'm going to close this issue here (as this seems to be philosophical war going on with the formidable community) and call this a won't fix: dependency issue for actionHero.  \nI'll be sure to update actionHero's dependancies as soon as that issue gets updated, and you guide above is great for anyone who feels gutsy and wants to hack on these modules manually.\n. Unfortunately, recurring tasks (as defined by a frequency) are ALWAYS started at boot.  Injecting a new one into an already-running process is likely to \"get weird\", especially across many nodes.  You would need to work out how to handle synchronizing all the nodes to ensure atomic execution.  Normal recurrent tasks do this with an additional redis hash (actionHero:tasks:enqueuedPeriodicTasks) to ensure that they have been loaded properly in addition to the rest of the task system (which ensures running one-and-only-one instance of the task is running)\nWhat are you trying to accomplish?   I personally end up using the pattern of a 'sweeper' tasks wich is stated at boot and run every n seconds, but inspects data which may be modified by actions to act on.  A simple example of a sweeper task would be something like sendEmails where an action may enqueue a message to be sent to a database, and the task sends any pending messages ( most of the time there will be 0 messages to send).  This allows the task to always be running, but only preform a meaningful activity when there is user data to justify doing so. \nYou can also have the last thing a task does re-enqueue itself:\njavascript\nvar task = new api.task({\n  name: \"myTaskName\",\n  runAt: new Date().getTime() + 30000, // run 30 seconds from now\n});\ntask.enqueue(function(err){\n  next(err)\n});\n. I don't think that I understand entirely :(\nI understand that you want to allow clients to opt-into a subscription event.  I'm going to make up a hypothetical example to help talk though it.  Say I want to allow clients to opt into receiving stock updates every minute for google's stock.\nI would create a task stockPriceUpdate which look something like this:\njavascript\nexports.task{\n  name: 'stockPriceUpdate',\n  frequency: 60 * 1000,\n  scope: 'any',\n  run: function(api, params, callback){\n    request('http://stocks.com/api/google', function(err, data){\n      var mockConnection = {room: 'stocks:google', roomMatchKey: 'auth', roomMatchValue: 'true'};\n      api.chatRoom.socketRoomBroadcast(mockConnection, data);\n      next();\n    });\n  }\n}\nI would have clients interested in getting my information either roomChant or listenToRom a room which will have this information broadcast to it.   Furthermore, I can (using an action) pre-authenticate those connections so only clients in that room whose client.auth = true will get the message.\nTo complicate the example, lets say that every connection could choose which stock it wanted updates for.  Starting a task for all ~5000 stocks seems like a bad idea, but so does starting a task for each connection (which also might drastically increase in number!).  In this case, I would first try to come up with a unique collection of stocks I ned to check.  It's likley that there would be repeated stock requests among connections.  I'm making the assumption more than one actionHero node/cluster is in play, so I would use a redis set to hold the complete list stocks I need to checks, and create an action to add a stock to that set.\nI would modify my task to run more frequently (perhaps even once a second), and keep a hash of stocks => timestamps and find the last-updated stock price and only poll that one.  Still I would only have 1 task, and I would only need 1 taskProcessor\nYou could then make use of some parallelism having n taskProcessors processing n stocks simultaniously.  You could implement a redis list of stocks-to-check which a worker could lpop the name of the stock to check, and just check that one.  The task would then enqueue another task 60 seconds from now to add that stick id back into the list of stocks that can be worked.  In this case, you have 2 taks, a rappidly-running \"pop and check\" task, and another task \"enqueue this stock again\" which you would set the runAt to be 60 seconds from now.   Here's an example:\n``` javascript\nexports.stockChecker{\n  name: \"stockChecker\",\n  frequency: 1000,\n  scope: 'any'\n  run: function(api, params, next){\n    api.redis.lpop(\"stocksToCheck\", function(err, stock){\n      if(stock == null){\n        api.log('no stocks to check right now')\n        next()\n      }else{\n        api.log('checking stock: ' + stock);\n        request('http://stocks.com/api/' + stock , function(err, data){\n          var mockConnection = {room: 'stocks', roomMatchKey: 'stock', roomMatchValue: stock};\n          api.chatRoom.socketRoomBroadcast(mockConnection, data);\n          var task = new api.task({\n              name: \"stockReEnqueue\",\n              runAt: new Date().getTime() + 60 * 1000,\n              params: {stock: stock},\n          });\n          task.enqueu(function(){\n            next();\n          });\n        });\n      }\n    });\n  }\n}\nexports.stockReEnqueue{\n  name: \"stockReEnqueue\",\n  frequency: 0,\n  scope: 'any'\n  run: function(api, params, next){\n    api.redis.client.rpush(\"stocksToCheck\", params.stock, function(){\n      next();\n    });\n  }\n}\n```\nNotice how in this case, I changed from sending a message to clients in the room who have auth=true but now to clients who have stock = $stock to indicate which stock they want to hear about.\nWithout knowing too much about what you are trying to acomplish, I hope this hypothetical helps!\n. I'm closing this ticket for now, as I think that this is more of a logic/imaplamentation issue specific to your project, @macrauder, but feel free to open it again if you feel this is something you need.\nIn general, it's a bad idea to rely on a ton of requiring tasks, as they will drift in their runAt's and will block other tasks from running\n. True!\nInitially, the stats system only worked when the api was running because it was too hard to tell if redis would be up to receive the updates.  Now, we can do ordered shutdowns like we do boot, so we can close off the servers and tasks before closing off stats and redis.  If we change the shutdown order, we don't need to lock the stats system to only work when the server is running\nhttps://github.com/evantahler/actionHero/commit/f90c3b80e61e500d3f9b1f859c0a4aed46901327 and https://github.com/evantahler/actionHero/commit/b9a33b2978c26191e10edc9b7bcec12d80541cfa should fix this up\n. Thanks!\nInitially, I thought the \"time to process delayed task\" message should be used as a 'debug' notion globally to log what was going on with all delayed tasks (which would be hidden at normal logging levels), but you are correct that it should obey the silence settings of the parent task.\nYou didn't make this a pull request, so I re-created your work here https://github.com/evantahler/actionHero/commit/a8e9ac79fafb098f0b72ff2c3295d181a38de52b\n. Nope, there's no coding standard... just me probably doing a lot of \"duplicate line\".\nIs there some sort of \"really-strict\" mode you are running in where the commas break things?\nThanks! \n. We are way to verbose\n. https://github.com/evantahler/actionHero/commit/5c0d30fda739b3c075dbcec180222594393a126e\n. Are you referring to this change https://github.com/macrauder/actionHero/commit/6d5d27da8182a32928361c2433c7a447c04a2743#initializers/tasks.js ?\nIf so, shoot over a pull request please!  It looks like a simple enough change :D\n. Fixed here: https://github.com/evantahler/actionHero/pull/116\n. Thanks! \n. Nice! I'll close this issue, but link this page from the wiki https://github.com/evantahler/actionHero/wiki/Initializers\n. https://github.com/evantahler/actionHero/commit/7b6fe58585feffae8ffade87c304817253c8b71e\n. Works for me! \nI certainly expected people to pass various config files to actionHero (as a proxy for setting a ENVIRONMENT), hence the --config option.  I'll implement just like you described above.\nBTW, http://demo.actionherojs.com/ is on nodejitsu.  Unfortunately, they don't offer persistant TCP connections, so be sure to keep configData.tcpServer.enable = false; or your app won't boot\n. done and done https://github.com/evantahler/actionHero/commit/081b6bc14d988f9b4022164b24cde115f2adc5b8\n. Thanks again for the reference!\nAre you sure that keeping the connection idle though the duration of your server is good practice?  I see you configured your FTP server to ignore all idle timeouts, etc, but often times there is hardware in the way that will still close idle connections at the networking layer.  I would suggest that it would be safer to create a containing method which opens an closes a connection for each upload.  If you are doing a lot of simultaneous uploads, going the connection pool route is one option, or just simply keeping a maxConnections variable around, and having further invokations of your uplaod container sleep and then try again.\n. Cool!  This is good context for anyone looking at this to decide if that rapid upload behavior is similar to the profile of whatever they might be building. \n. Thanks again! \nIt looks like there is a test for reloading actions, but not for tasks.  Whoops! \n. https://github.com/evantahler/actionHero/pull/128 socket.io -> faye\n. https://github.com/faye/faye-redis-node/issues/4\n. Currently using github source for faye-redis until hiredis dependency is removed.\nThis makes me sad, but I don't want to hold up this release any more\n. set faye client's IP: b6a8f8d7696d40f125d610c377bb5adb0e948fbf\n. good catch! It looks like it was only removed from start and not startCluster.  v5.0.1 is up on NPM now\nhttps://github.com/evantahler/actionHero/commit/f8ff54473ae9963cfdd437e84e2ba089c132e19d\n. further reference: https://github.com/joyent/node/issues/1553\n. Just a note about windows: the current code in master will not run on windows until the faye-redis package removes hiredis as a dependency.\nhttps://github.com/faye/faye-redis-node/issues/4\n. The project should run on windows again, but you will need git installed until https://github.com/evantahler/actionHero/issues/131 is sorted out\n. I finally got access to a windows machine!\nI totally agree that ctrl+c is functionally kill -9 in windows, and that shutdown is far to violent.  It looks like event killing the process from another shell (using the git shell in my case) also isn't caught correctly. Even using the task manager and killing node \"politely\" is to forceful.\nI'm closing this task and marking this \"will not fix\", as this looks to be due to a combination of things with how node and windows play together (and is far outside the scope of this project).  \nThis was tested on windows 8 + node 0.10.2 with a sleeping task which in OSX/Linux will complete and then shutdown gracefully:\njavascript\nexports.task = {\n  name: \"task\",\n  description: \"task\",\n  scope: \"any\",\n  frequency: 1000,\n  toAnnounce: true,\n  run: function(api, params, next){\n    if(params == null){ prams = {}; }\n    var error = null;\n    // your logic here\n    api.log(\"IN TASK\");\n    setTimeout(function(){\n        next(error, true);\n    }, 5000);\n  }\n};\n. I take it all back! http://stackoverflow.com/questions/10021373/what-is-the-windows-equivalent-of-process-onsigint-in-node-js has the answers\n. https://github.com/evantahler/actionHero/commit/e66374b217a8593f9c0dba08ffe57000cbdbb4e6\n. Up on NPM now\n. Thanks! \nYou will note that many of the pull requests on this project are about spelling :/\n. Thanks Sebastian! \nThere's a very similar loader for tasks. I don't have a windows computer... would you mind extending your fix to that method as well?\nThanks!\n. Just a note about windows: the current code in master will not run on windows until the faye-redis package removes hiredis as a dependency.\nhttps://github.com/faye/faye-redis-node/issues/4\n. Thanks! \n. Hey IceDevil-\n\"Rules\" is a fairly arbitrary notion, and I imagine the scope of pre-action validation if varies drastically between implementations.  For that reason, I'm going to have to reject this request. \nI recently accepted a pull request allowing for validation based on transport types [ https://github.com/evantahler/actionHero/blob/master/actions/chat.js#L11 for example ].  Connections are global to all actions, and all connections have a type, so this type of validation is simple to understand, and easy to use.  However, I think that your implementation is best left up to your application.\nThe good news is that doing this kind of thing in actionHero is (hopefully) simple with the use of initializers.  You can create an api.actionChecker(connection, callback) in an initializer and use it as the first thing your actions do.  You can even pass next into your api.actionChecker so it can return and render a response to the user without even needing to be error checked within the action:\n``` javascript\napi.actionChecker = function(connection, next, callback){\n  if(connection.params.stuff == good){\n     callback() // return to the action and carry on\n  }else{\n    connection.error = \"validation/rules failed\";\n    next(connection, true);\n  }\n}\n// in your action\n...\nrun: function(api,connection,next){\n  api.actionChecker(connection, next, function(){\n    connection.response.message = \"if you see this, you passed the actionChecker!\";\n    next(connection, true);\n  });\n}\n```\nAlternatively, you can re-write api.actionProcessor.prototype.processAction in your initializer to do whatever you want (this is JS, right?), although I can't guarantee the private methods of the actionProcessor will remain the same going forward.\n. Oh, and you can certainly add any extra metadata you want to your actions (like you have done), and you can still inspect them in your actionChecker.  just pass in the action's scope, and you should be able to inspect all the metadata.  You can also always inspect api.actions.actions[connection.action] and get the same\n. I'd love to, but I'm waiting on a dependency update.\nDetails here: https://github.com/evantahler/actionHero/issues/123\n. its up now, even with the git dependency.  let me know how it goes.\n. Yep, I have it to.\nThis should fix it: https://github.com/evantahler/actionHero/commit/a2b16d14d339b7b2ca4f3668997c412c4dcf3601\nAlso, the faye branch is behind master by a fairly significant margin now\n. @jcoglan just upped the version.  Thanks again! \n. It wouldn't be from this code (this is a faye internal thing), and should be set here https://github.com/evantahler/actionHero/blob/master/initializers/webSocketServer.js#L83\nI'll bet that some clients have that message sent before they are truly connected\n. Yeah, that's the problem.  sending the welcome message should probably be part of api.webSocketServer.createClient, and not it's own method\nOn Monday, March 25, 2013 at 9:21 PM, jacobbubu wrote:\n\nBut I did not see who's got the chance to call \"api.webSocketServer.handleSubscribe\"\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/evantahler/actionHero/issues/133#issuecomment-15440322).\n. ... and this should fix it https://github.com/evantahler/actionHero/commit/d840e775ae52829eeed0c5c48f80a28a31cf12f7\n\nThanks!\n. thanks! a2e4ff4fb74bc56b333b38359c69574bfab7531e\n. 56ba88b2ed955b0394c148b7ba4328c849c27972\n. good idea!\nThere are more redis groups than you listed though:\n- actionHero (core, cluster pings, peers)\n- cache\n- stats\n- chat\n- faye\n- tasks\n. would you want to optionally separate all 6 of these redis servers, or would you group them in some way.  What is your use case?\n. finally~\nWith the impending merge of the resque branch, https://github.com/evantahler/actionHero/issues/92, you can finally choose seperate redis serversd/dbs for (almost) each sub-system!\n- there is no longer a \"core\" redis, as the peering system is removed\n- cache, stats, and some chatroom metadata will always follow the default redis config\n  - these make sense to be related as they all rely on each other\n- faye can be a separate server\n- tasks/resque can be a separate server\nI'm going to close this, and you can follow the resque PR for more information \n. thanks! \n. Very true.  I hope to not require git for much longer.  We are waiting for this issue https://github.com/faye/faye-redis-node/issues/4 to get resolved with FAYE-REDIS, and then the git dependency will be removed.  \nI'll add a note in the mailing list about it for now. Thanks! \n. https://groups.google.com/forum/?fromgroups=#!topic/actionhero-js/-YENPeBO5PY\n. Yep! (this is actually the kind of thing I initially made actionHero for).\n1. GameLogic = actions (morePlayer; processTurn; closeLobyAndStartGame; etc)\n2. Matching logic usually takes the form of a \"lobby\"\n   - player A opens a lobby and waits for more players, then chooses to start the game\n   - OR player A opens a lobby and the system puts in the next available player\n   - OR player A opens a lobby and invites people to join, and the game starts when eveyone invited answers\n3. you can use tasks for timed things.  You can launch a new task [[ https://github.com/evantahler/actionHero/wiki/Tasks ]] at the start of a turn which will fire in 30 seconds and 'force close' the turn if the players haven't acted\nGood Luck!\n. Sorry for the confusion! I've removed the user.authorized section from the post as it doesn't belong. (it was an artifact from the project I copied this example from).  You are correct to comment it out.\n. Cool! \nI'm going to close this ticket for now, as I won't be replacing faye.  Do you envision this as a \"lighter\" protocol that lives alongside faye?  Having the fallbacks to other protocols is a feature I want to keep (and other folks seem to enjoy).  \nIf you are interested in contributing a new transport, please do it in a pull request, and write (or at least contribute your code) in JS.  I will not be adding coffescript to this project.  \nPlease link to this on the mailing list so other folks can find this!\n. A good idea!\nI think that there are some weird situations which can happen with a cluster here.  If server_a has chat enabled, and server_b does't, I think I would still want events on server_b to be messaged to server_a (like when someone enters a room).   I think this toggle should be used to disable which messages are sent to clients, but not on sending data around in the background.  As an example, I I would still api.chatRoom.socketRoomBroadcast in all caes, but disable api.chatRoom.incommingMessage.  \nThoughts? \nThanks for writing a test!\n. These are all excellent ideas.  I'm going down the road of refactoring all the servers to make them more similar, and to have them inherit from a base server which will make it easer to make new server-types, and make the modifications you suggest.\n. Checkout the current develop branch.  I've re-written all the servers to extend from a generic server, and modularized them to make it easy for users to create new ones (like creating an initializer).  Let me know your thoughts!\n. I'm going to close this pull request.  Version 6 is now in master, and should be released soon.  This allows for optional arguments to be passed to servers (including whether or not to enable chatting).  This also introduces prototypical inheritance for servers, which should help you to make your own servers and overwrite the built in ones if you want.\nI'll be updating the wiki soon, but check out the comments here to get a taste of the new features https://github.com/evantahler/actionHero/blob/master/initializers/genericServer.js\n. Thanks for looking into actionHero's Guts!\nI'm curious to learn what situation you found where a second request could retain the params of a previous request?  A new connection should be made for each request, complete with a fresh params = {}\nThe 'persistant' connections (websocket and socket) have the concurrent request problem (where you can have n requests processing simultaneously).  They solve this with a \"proxy\" connection beging created which takes a snapshot of the connection at the instant the action is started, and uses those params.\nIn general, I would like to homogenize action processing in general, so the approach I would prefer would be to have every connection type (even web) use the proxy connection method.\nWould this work for your case?\n. Cool.  Let me know if you run into any trouble.  \nIf you want/are able to, It would be cool to share what you are working on with the mailing list.  I'm always curious to see what types of projects folks end up choosing actionHero for.\n. https://github.com/evantahler/actionHero/commit/b81da24420e94871b9ee57d79fc5abbe8d8676ab\n. This is the 3d time I've seen a request like this.  Folks really seem to want to \"magically\" do some auth logic before the actions, and not write a helper (like this example: http://blog.evantahler.com/blog/authentication-with-actionHero.html).\nI'm going to rename this issue to make it more generic to create an optional action preProcessor which can be replaced however you see fit\n. And... here you go\nCommit: https://github.com/evantahler/actionHero/commit/f6e095abcdba3f30752b693be338b6786412cd30\nWiki: https://github.com/evantahler/actionHero/wiki/Actions#preprocessing\n. https://github.com/evantahler/actionHero/releases/v6.2.0\n. Awesome! Speed improvements are always welcome :D\n. And a great test (we should have had one long ago for the stats module, thanks for making one!) \n. This will make it into v 5.2.0 https://github.com/evantahler/actionHero/commit/5d9a7090c03791150c7fce660c2ecab4309b07bf\nThanks again! \n. https://github.com/evantahler/actionHero/commit/d9dbb0e1b94760cdb5fdd9f1d50f46842b6f1cdf\n. https://github.com/evantahler/actionHero/commit/91d4b9dcc31f74fde3eead09bdf0b02294ffa4c7\n. Cool.  I haven't heard of source-map (looks like a tool for languages that are compiled to JS, like https://github.com/evanw/node-source-map-support).\n. Well, that didn't work.  Looks like many of the modules actionHero requires don't pass this.  We'll come back to this later one day\n. f2a4d2263c1e32b93826261e18fef56334b70b08\n. Done and done.\n. Cool idea. Why did you choose to extend load vs creating a new load-and-extend method?\n. I think I would prefer a more generic 'options' input, and options.expireTimestamp can be passed in to set a new expireTimestamp when loaded.  \nOtherwise, it looks good! \n. 903840f0f8a6d1605075c6eb95d4ab17c3f631ec\n. Yay! \nI'll merge this in and investigate why the tests are failing.  They look good to me\n. docs updated in the wiki\n. FYI: the problem was that your test exipreTime was too short for fakeredis.  Increasing the test time fixed it.  https://github.com/evantahler/actionHero/commit/c521bcdddb4cf6cb5ab227f9dd571afd5931bc8a\n. \n. https://github.com/evantahler/actionHero/commit/afb57134d1d1a9fc6dd5bb4d5414e20747992517\n. A custom version of node will be needed: https://github.com/ramr/nodejs-custom-version-openshift\n. This is more relevant https://www.openshift.com/blogs/any-version-of-nodejs-you-want-in-the-cloud-openshift-does-it-paas-style\n. I'm closing this.  It looks like openshift really doesn't have its stuff together regarding node versions.  I can't get passed V0.6.\n. Eh, they don't \"match\", but they do look slightly better.  I don't want to include all the CSS and assets so we can keep the package small and lean\n. https://github.com/evantahler/actionHero/commit/b16e01a5d9281bd66478a71aa79a6548e16581f7\n. Give api.configData.developmentMode = true a try :D\nhttps://github.com/evantahler/actionHero/blob/master/config.js#L23\n. https://github.com/evantahler/actionHero/wiki/Development-Mode\n. I'm marking this as closed.  If there's something missing that you would like from developmentMode, let me know!\n. Hmm, I was under the impression that you could always reference \"nested\" versions of a package like that (allowing for multiple versions in a project), but I might be wrong.  Digging into it.  Thanks for the catch! \n. looks like you are correct! \nfixed and a new 6.0.2 version is up on NPM https://github.com/evantahler/actionHero/commit/560f84bd40bf068d5d5acfccbf4a6dec2ea93dad\n. https://github.com/evantahler/actionHero/commit/6f980d4b19c1bfd77f4f10e10ee674862e3c6e93\n. Working again! \nhttps://github.com/evantahler/actionhero_client/commit/3c039ebc952f7e941809bcb8908881590a244850\n. I haven't seen any bugs like that myself, but it is a new release.  What OS are you running on?\nHere's the example files served up by nodejitsu http://demo.actionherojs.com/public/index.html\n. Hmm, It's working OK for me (OSX & Ubuntu).  Would you mind trying a fresh install and running the generate command?  There have been some config & init changes in the v6 versions which might cause this.\n. The config / relative path stuff is as designed.  If you don't pass --config=\"/path/to/confgi.js\", it will look for a local config.js. \nI'll give this a try later tonight on a fresh digitalOcean ubuntu server\n. oh, what version of node are you running?\n. Looks like this is a problem with node 0.8!  (I've been developing on 10+).   Looking into it\n. Actually, ignore that.  That was a testing mistake on my part.  \nDigitalOcean is down for me right now, so I tested on amazon, and can't recreate this.  Here's what I did on a new Ubuntu 12.04 TLS 64 bit server:\nbash\nsudo apt-get update\nsudo add-apt-repository ppa:chris-lea/node.js  \nsudo apt-get update  \nsudo apt-get install nodejs git\nnpm install actionHero\n./node_modules/.bin/actionHero generate\nnpm start\nIn call cases I was able to see the content of index.html locally and remotely.\nThis would be testing on node 10.x.  Are you able to try your code a newer node version (the repo above is very good about keeping up to date with releases)\n. I'm glad you are up and running, but it's strange that an older version didn't work.  I'll keep an eye out for similar errors...\n. This issues was finally solved!\nConversation about it on the mailing list https://groups.google.com/forum/#!topic/actionhero-js/l5aYvMs9RM4\n. Sorry, that's not how node works.  The filesystem API is a bad example, as it isn't really blocking in some cases, and some events might be fired off while it is running from your server connections, but a better example would be if you had an action which did some hard, computationally intensive math.  In that case, the whole actionHero server would be blocked until that completes.\nHowever, actionHero does provide some patterns to help you with this:\n- You can run more than one actionHero process on your server (using the node cluster module).  This will share the requests among processes, so that if one is blocked, the others can continue serving requests.  look at the actionHero startCluster command\n- You can move anything slow to a task (but that is not blocking or computationally intensive) to process in the background\n- Being that actions are async, you can have actions which spawn child processes, and you can do anything slow or blocking there.  You can do this with a task as well.\n- You can run some actionHero processes to server only tasks, and others to server only actions.  This will help you split your load and not block incoming connections\nOh, and in a (running) webserver, you should probably use the async variants of the filesystem APIs.  They won't block anything at all.\n. I haven't used Sails myself, so I don't really feel qualified to compare the frameworks, and I don't want to shoot them down.  They are doing cool things.\nIt looks like we both focus on APIs (rather than serving rendered sites like Rails).  actionHero doesn't make any assumptions about which DBs you can use, and leaves that up to you to implement (which is probably a higher barrier to entry).  actionHero also aims to be more flexible with APIs which cannot be represented by CRUD objects (streaming responses, chat servers, etc), but does have good support for it (along with routing to simplify it).  You also hit on the backgoudn task model which I wanted to make a first-class part of the framework\nAs far as multiple nodes, the actionHero startCluster command will use node's cluster module to run N servers on one machine (be sure to use redis so they can communicate).  If you are using more than one server, you will need a load balancer of some sort to join them all together, but you don't need nginx or anything like that to server you app from 1 sever.\n. actionHero is a JSON API server, so it is tuned to serving JSON responses to actions.  However, there is an XML response flag you can use on actions, ie http://demo.actionherojs.com/?outputType=xml\nAs for serving static files, anything you place in /public will be served by actionHero as a file out of that same route.  actionHero is not a \"rendering\" server by default (although you can make an action to do so), so there are no templates or views or anything like that.\n. Those examples are sadly out of date.  I'll update the twitter oAuth one later today. \nAs far as \"diving in\", the public APIs are all here https://github.com/evantahler/actionHero/wiki/API-Methods.  Let me know if something you need is missing\n. Ok, \n- I removed the one, as it doesn't make any sense anymore.\n- The twitter oAuth example works now https://gist.github.com/evantahler/4326070\n- I wrote a modern example of how to send a file from an action https://gist.github.com/evantahler/5711399\n. Frist, make sure you npm install oauth so you can  require('oauth').\nThe oauth_verifier comes back with as a GET param when the user successfully authenticates with twitter.  the oAuth 1 flow is:\n- user visits your site ( action/twitterOauthStart )\n- your site talks to twitter's API and generates an oauth request token for for that user oathClient.getOAuthRequestToken\n- you forward the user to twitter to log in with the unique request token you got from twitter's API connection.response.redirectURL = \"https://twitter.com/oauth/authorize?oauth_token=\"+oauthToken;\n- The user logs in @ twitter, and twitter knows which page on your site to return the user to via the callbackURL\n- The user comes back to your site with an oauth_verifier param, which when coupled with the original oauthToken, prove to twitter that the user really did give your site to do actions on behalf of them \n- You can now use the oauthToken to use the twitter API.\n. thanks!\n. But we are checking the length of a variable which has been coerced into a String() the line above... why treat it like a buffer?\n. makes sense!  Thanks for finding this bug! \n. https://github.com/evantahler/actionHero/commit/ec26e84ed2b1587f96b0bd71f7ae7bb44b2b1b39\n. No there is no CSRF protection, and I don't feel that it is very useful.  There are plenty of other authentication schemes that work, and by definition CSRF tightly couples rendered HTTP pages to your API, which is the opposite of the goals of actionHero :D  I would also probably reject a pull request with that included, but I would have to see how it was implemented. \nYou have a session cookie set by actionHero, why not send that with every request and authenticate with that (some examples http://blog.evantahler.com/blog/authentication-with-actionHero.html)?  You can get and set cookies with server-side JS APIs, and then your http pages can be truly static!  You can even set cookies from within an action if you like (just add a 'set-cookie' to connection.rawConnection.responseHeaders ) You can also create a JS auth method, and use header-based authentication if you like (jQuery has good support for this now).\nIf you really do want to use CSRF, you will need to parse and manipulate page content within an action.  Here is an example of how to do it: https://gist.github.com/evantahler/5711399\n. Regarding the JSON output, whatever is in connection.response is the hash rendered to the user.  You can manipulate it however you like.\n. Nah, this can be accomplished better by debugging.  Here are docs on how to do it with https://github.com/dannycoates/node-inspector\nhttps://github.com/evantahler/actionHero/wiki/Development-Mode\n. note that in your response requestorInformation.recievedParams doesn't contain userID.  I'm going to guess there is something wrong with the way you are sending the data.  It works in the normal way:\n``` bash\n\ncurl -X POST -d \"action=user&userId=123&firstName=evan\" http://localhost:8080 -v\n\n\nAbout to connect() to localhost port 8080 (#0)\nTrying ::1...\nConnection refused\nTrying 127.0.0.1...\nconnected\nConnected to localhost (127.0.0.1) port 8080 (#0)\nPOST / HTTP/1.1\nUser-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8x zlib/1.2.5\nHost: localhost:8080\nAccept: /\nContent-Length: 37\nContent-Type: application/x-www-form-urlencoded\n\n\n\nupload completely sent off: 37 out of 37 bytes\n< HTTP/1.1 200 OK\n< Content-Length: 310\n< X-Powered-By: actionHero API\n< Content-Type: application/json\n< Set-Cookie: sessionID=abc1091f2cda965cbdfdca0bc2d1b97ff4060854\n< Date: Sun, 09 Jun 2013 19:31:29 GMT\n< Connection: keep-alive\n<\nConnection #0 to host localhost left intact\n{\"serverInformation\":{\"serverName\":\"actionHero API\",\"apiVersion\":\"6.0.3\",\"requestDuration\":1,\"currentTime\":1370806289871},\"requestorInformation\":{\"id\":\"abc1091f2cda965cbdfdca0bc2d1b97ff4060854\",\"remoteIP\":\"127.0.0.1\",\"receivedParams\":{\"action\":\"user\",\"userId\":\"123\",\"firstName\":\"evan\",\"limit\":100,\"offset\":0}}}* Closing connection #0\n```\n\nyou can make test action (which does nothing) just to check that the server is getting the params you expect\njavascript\nexports.action = {\n  name: \"user\",\n  description: \"user\",\n  inputs: {\n    \"required\" : [\"userId\"],\n    \"optional\" : [\"firstName\", \"lastName\", \"email\"]\n  },\n  blockedConnectionTypes: [],\n  outputExample: {},\n  run: function(api, connection, next){\n    // your logic here\n    next(connection, true);\n  }\n};\n. ahh, yeah.  That example was written for actionHero 5.x.  A lot has changed in the 6.0 release.  I'll try to update that example later this week.\n.   I've created a new, simpler example for you http://blog.evantahler.com/blog/authentication-with-actionHero-again.html\nThis example uses the built-in api.cache methods to give clearer insight into how to do this with just actions and initializers. \n. 1) check out config.js and change configData.redis.fake = false if you want to use 'real' redis.  By default actionHero uses an in-process redis store without persistance which is to get you up and running fast.\n2) If you can't use cookies, you will need to come up with your own token to pass around wich each request, and authenticate with that.  You would replace all instances of connection.id in the example with connection.params.authToken or something like that\n. Being an API server, actionHero doesn't care what domain/port/etc the connection comes from.  There are no XSS checks, authenticity_tokens, etc.   \nIf you are talking about a web browser and JavaScript, some browsers DO consider a different port a different domain, while others dont.  Either way, JsonP (you can access cross-domain requests very elegantly) requests will work, and you can have a callback fired with the response very easily.\nIn the future, as this isn't a bug or feature request, please ask questions like this to the mailing list so others can see it.\n. you can also set these in config.js under api.configData.servers.web.httpHeaders\n. As a lot of folks seem to ask this question, a simple PR would be to have these set as defaults in config.js if either of you are interested.\n. https://github.com/evantahler/actionHero/commit/28ee65f91c583d6c4d89b606ea402f0a3bf02963\n. This might actually be a very bad idea.\nWe would need to persist (in redis) a request counter for each connection, and that would get big fast.  This probably should be left to be an optional implementation in the middleware. \n. Confirmed.  This is a bad idea.\n. Yeah, I keep all servers other than \"web\" disabled by default, as some PAAS providers have trouble with the other protocols and won't boot the app.  This way, it's clear which servers you have on at least.\n. Might not be possible until this:  https://github.com/isaacs/npm/issues/3494\nAlternatively, we can suggest to users that they do a global npm install -g install.  This is what Sails does.\n. work is here, pending we figure out how arg passing will work \nhttps://github.com/evantahler/actionHero/compare/bin_to_script\n. There's nothing wrong from it from an operations POV (IE: it works), but I suggest that new folks keep all packages locally for a few reasons:\n- clarity on which version you have\n- clarity in which binaries you are running\n- ability to inspect source from within project\n- clearer debugging when wrappers (cron, deployment tools, forever, etc) can't find binary (usually something to do with ENV or shell)\n. ahh! That`s a good idea.  Please submit a PR! \nAs a note, I think that the binary global/local passthrough is a good idea, but not really related to this issue. \n. Lets start with a blog\n- data persistance with api.cache\n- users & auth\n- public and private actions with middleware\nThe we can we websockets\n- chat room\nAnd a custom server\n- catch tweets and add them to a page\n. https://github.com/evantahler/actionHero-tutorial\n. And a preliminary version is up! \nhttps://github.com/evantahler/actionHero-tutorial\nI'm closing this ticket, but I would love to hear your comments!\n. I'm not going to add that to the tutorial, @vitalitymobile as I don't want to confise the tutorial with another unrelated use case.\nHowever, that is a cool example, so here you go https://gist.github.com/evantahler/5898472\nOf course, the api is available over http, tcp, etc\n. And added to the wiki: https://github.com/evantahler/actionHero/wiki/Examples:-Actions\n. Please write some tests for this feature.\n. Thanks for the tests, and the feature seems useful.\nHow would you feel about connections becoming event emitters (and changing the style of this implementation)?  There are already some activities that happen on connect and disconnect (stats, adding to chat, etc), and it seems a bit confusing to have some \"first-class\" callbacks on a connection as well as some user-generated ones with these new methods.  \nIf we make connections event emitters, I think we can simplify a lot of the logic in the servers as well.\n. Sorry, I've been busy lately.  I'll be able to take a look at this in more detail this weekend and have a plan!\n. sorry for the delay!   I've gone with a simpler implementation that you suggested, but the spirit is still there.  Most importantly, I chose to not block any connection + server behavior with these callbacks, as the server may have specific timing requirements (like http connections drop unless they establish within n ms).\nFrom the wiki\n```\nLike the action middleware above, you can also create middleware to react to the creation or destruction of all connections. Unlike action middleware, connection middleware is non-blocking and connection logic will continue as normal regardless of what you do in this type of middleware.\napi.connections.createCallback is an array of functions to call on a new connection and api.connections.destroyCallbacks will be called on destruction. Keep in mind that some connections persist (webSocket, socket) and some only exist for the duration of a single request. You will likely want to inspect connection.type in this middleware.\nAny modification made to the connection at this stage may happen either before or after an action, and may or may not persist to the connection depending on how the server is implemented.\n```\nChangeset here: https://github.com/evantahler/actionHero/commit/96f2d0e1383ddbb9cef986ebc7c032fc548773ae\n. You can!\nYou are looking for connection.rawConnection.responseHttpCode.  It's a hidden under rawConnection, as it's specific to http and none of the other transports actionHero can work with it.\n``` javascript\nexports.action = {\n  name: \"test\",\n  description: \"test\",\n  inputs: {\n    required: [],\n    optional: [],\n  },\n  blockedConnectionTypes: [],\n  outputExample: {},\n  version: 1.0,\n  run: function(api, connection, next){\n    var code = \"999\"\n    connection.response.responseHttpCode = code;\n    connection.rawConnection.responseHttpCode = code;\n    next(connection, true);\n  }\n};\n```\nand from curl:\n``` bash\n\ncurl localhost:8080/api/test -v\n About to connect() to localhost port 8080 (#0)\n   Trying 127.0.0.1...\n connected\n Connected to localhost (127.0.0.1) port 8080 (#0)\nGET /api/test HTTP/1.1\nUser-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8x zlib/1.2.5\nHost: localhost:8080\nAccept: /\n< HTTP/1.1 999 unknown\n< Content-Length: 316\n< X-Powered-By: actionHero API\n< Content-Type: application/json\n< Set-Cookie: sessionID=462f0c5a9059a9571ce1213b2a5bbe88cdd3bb1c\n< Date: Thu, 27 Jun 2013 19:47:38 GMT\n< Connection: keep-alive\n<\n Connection #0 to host localhost left intact\n{\"responseHttpCode\":\"999\",\"serverInformation\":{\"serverName\":\"actionHero API\",\"apiVersion\":\"6.1.0\",\"requestDuration\":3,\"currentTime\":1372362458457},\"requestorInformation\":{\"id\":\"462f0c5a9059a9571ce1213b2a5bbe88cdd3bb1c\",\"remoteIP\":\"127.0.0.1\",\"receivedParams\":{\"action\":\"test\",\"limit\":100,\"offset\":0,\"apiVersion\":1}}} Closing connection #0\n``\n. However, if there is aconnection.error, the normal error codes will be invoked (500, 404, etc)\n. There's in option inconfig.jsabout this:configData.servers.web.returnErrorCodes`.  This will (naively) return a 400 for any error, a 500 for a server error, and some other basic HTTP codes defined here.  \n\nIt's still probably best to manually control your error codes (perhaps in a middleware) if you rely on something more in-depth than the defaults.\n. https://github.com/mde/jake/issues/199\n. unblocked!\n. https://github.com/evantahler/actionHero/pull/188\n. relevant wiki section: https://github.com/evantahler/actionHero/wiki/Running-ActionHero#jake\n. This is closed in release https://github.com/evantahler/actionHero/releases/tag/v6.2.3\nHowever, there is a problem publishing to npm Error: Invalid name: \"actionHero\"\nactionHero should be grandfathered in to be allowed to use camel-case, but I'm not sure\n. conversation about this on the NPM mailing list https://groups.google.com/forum/#!topic/npm-/LXXgFyLZBPQ\n. I cheated! I published with an older node version... this will be a problem going forward though\n. This is a fun one!\nI've spent a few hours on this, and I think your problem may be that your API consumer may not be properly handling \"Chunked\" http requests.  What is consuming your API?  If you look at that large API response in Chrome by itself, is the end of the response body still missing?\nEither way, we can try an experiment to see if this is truly the culprit:\nOpen up node_modules/actionHero/servers/web.js and around line 190, add a default herader setting the transport encoding to \"chunked\", IE:\njavascript\nresponseHeaders.push(['Transfer-Encoding', 'Chunked']); \nresponseHeaders.push(['Content-Type', \"application/json\"]);\nresponseHeaders.push(['X-Powered-By', api.configData.general.serverName]);\nLet me know if that helps.  For me, all of the ways I have been consuming the HTTP API (browser & curl) know to switch to chunked mode automatically, but perhaps your consumer does not.  \nIf this fixes your problem, please create a pull request with the change above, and I'll do a hot-fix release for you\n. Were you able to try this out?\n. Cool.  V6.2.2 is up now with this change\nhttps://github.com/evantahler/actionHero/releases/tag/v6.2.2\n. I'm assuming you mean to say that you want your application to be an oAuth provider (meaning that folks can log in via your application to another application).  If that's the case, there are a number of oauth helpers in node (examples at the end).  You would need to build your user model, store their password in the normal way, and handle all the token auth.  The packages below will help you out.  In your actions, you can always access the raw http response from connection.rawConnection.res and you can manipulate it however you want.  \nIf you mean to say that you want your app to be an oAuth consumer, then following the twitter example you mentioned is probably a very helpful guide.\nhttps://github.com/jaredhanson/oauth2orize\nhttps://github.com/domenic/restify-oauth2\n. oAuth is probably overkill for creating a \"single application\" log in scheme (you just want to allow your users to log into your application directly).\n. That's really up to you.  If you are trying to authenticate a websocket connection, there's nothing wrong with sending a normal name/password pair over an HTTPS socket connection.  If you use the actionHeroWebsocket.js browser client, each client's communication is only between client-server, so you can safely send secret data.  You can create a login action that you can use over the web (rather than websockets) as well (again, taking name/password over HTTPS), get back a session cookie, and use that to authenticate the websocket.  oAuth also works, as you note.\nActionHero doesn't take any stance on the \"proper\" way to do authentication, as there are many ways to do it which are safe & secure.  As with databases (which are required to build any auth server), actionHero doesn't restrict you in any way to mySQL or Mongo... it's up to you!  There are some general good practices you should use (never store plain-text passwords, always use HTTPS, use a random salt for each person, etc, etc), but again, your implementation is up to you. actionHero aims to enable people to build whatever they want.\nIf you are looking for any example about how to use actionHero with authentication, I wrote this blog post about a month ago http://blog.evantahler.com/blog/authentication-with-actionHero-again.html.  You probably shouldn't use redis to persist your data for real, but it servers as a function example.\n. Yep, I agree that you probably shouldn't use redis for mission-critical data.  Redis has the unfortunate property that it fills up your ram rather fast, and is very slow when allowed to use swap (if you choose to go that route).  I use mySQL and couchbase with actionHero, and others use mongo.  \nRedis is included with actionHero to take care of some of actionHero's internals (cache, queue, stats), and it is great at those functions, but you should probably use another DB if your application needs persistance.\n. https://github.com/evantahler/actionHero/releases/tag/v6.2.3\n. There may be something wrong with the way the actionHero binary resolves it's relative location on ironIO: https://github.com/evantahler/actionHero/blob/master/bin/actionHero#L117-L126  I'm assuming your app runs locally, yes?  I'll give it a shot (ironIO is new to me!)\n. I've gotten an actionHero server to boot as a iron.io task just now.  You can't call the normal npm or actionHero binaries directly (as it looks like iron.io strips away any .bin directories even if they are explicitly included), so I made a small 'boot' file, workIt.js:\nworkIt.js\njavascript\nrequire(__dirname + \"/node_modules/actionHero/bin/actionHero\")\nThe default action in the actionHero binary included above is start, which will boot actionHero in the normal way.\nactionHero.worker\n``` ruby\nruntime \"node\"\nexec \"workIt.js\"\ndir \"actions\"\ndir \"certs\"\ndir \"initializers\"\ndir \"jakelib\"\ndir \"public\"\ndir \"servers\"\ndir \"tasks\"\ndir \"node_modules\"\nfile \"config.js\"\nfile \"Jakefile.js\"\nfile \"package.json\"\nfile \"routes.js\"\nfile \"workIt.js\"\n```\nthen iron_worker upload actionHero and you should be good to go.  \n\nAs an aside, if you want to boot actionHero as a 'worker' process and not a web server (which I imagine you would want to do on a platform like iron.io) you can create a config.js with some workers enabled, and no servers.  This would allow you to have workers consume your tasks from iron.io and a shared redis.  I do think they kill off long-running processes, so be careful, you might get 'stuck' with an incomplete job, which would be hard to recover from if it was recurring.  \nPer your note above, I can't quite picture what running a chat server on a worker platform looks like, but I am curious to see the details of how you used actionHero as a remote job worker + sever.  Please share your implementation with the mailing list! \n. No Worries! \nA great way to tell what a product is good for it to check out their competitors list :D  \niron.io is comparing themselves to rabbitMQ (a message passing layer) and resque (a background-tak worker).  actionHero's task system is modeled after resque, and probably is similar to iron.io's workers.  actionHero uses Faye as it's internal (and websocket) message passing proticol, which is sort of like iron.io's ironMQ.   \nTo run a chat server, you need a real server.  A background server is useful to send out emails, process tasks in the background etc, but you will need a 'real' server to communicate with clients on the web (it's probably possible with iron.io's workers, but my guess is that it would be rather complex).\nIf you have any more architecture questions on how to use actionHero, please ask them on the mailing list https://groups.google.com/forum/#!forum/actionhero-js\n. https://github.com/evantahler/actionHero/commit/28a7f79db112bebd686473968c080e8bcf9fa5b8\n. I generally assumed that folks would pass absolute references to argv['config'].  This will allow both absolute and relative paths\nhttps://github.com/evantahler/actionHero/commit/b0943fceaf510b682adcf98417c9f6dea1829cbb\n. Good call on the lower-case headers.\nYour JSON patch is fairly insecure.  Note how the fillParamsFromWebRequest() method only allows in params an action is expecting.  Try passing in fields to fillParamsFromWebRequest.  \nAlso, this means that any GET params sent along with the request could be overwritten by the JSON payload.  Is that the behavior you had in mind?\n. Thanks! https://github.com/evantahler/actionHero/commit/cde4e3348184fbcddac74e0d550abb06a97a4c1f\n. https://github.com/evantahler/actionHero/commit/44c064f9649625055fbd019ae956e6c68058932a\n. You can pass \"silent\" as a flag to startCluster.  For example, if I wanted to startCluster with silent=false and workers=20 I would run ./node_modules/.bin/actionHero startCluster --silent false --workers 20  You should be able to override most of the cluster defaults with command line args.\nYou can learn more about the binary's options with ./node_modules/.bin/actionHero help\nI can't reproduce the failure you mention above.  What OS and node version are you running?\n. I'm on osx 10.8 and node 0.10.15 as well.\nI've done some testing with https://github.com/wg/wrk and I have no problems at all running 1 actionHero server \n``` bash\n\nactionHero start\nwrk -t12 -c400 -d10s \"http://127.0.0.1:8080/api/status\"\nRunning 10s test @ http://127.0.0.1:8080/api/status\n  12 threads and 400 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency   404.14ms   37.58ms 456.05ms   86.49%\n    Req/Sec    48.05     15.44    84.00     68.31%\n  5794 requests in 10.01s, 10.18MB read\n  Socket errors: connect 0, read 15383, write 0, timeout 57\nRequests/sec:    579.05\nTransfer/sec:      1.02MB\n```\n\nThis looks good.\nHowever, when running a cluster, I do see some wierdness:\n``` bash\n\n./node_modules/.bin/actionHero startCluster --nodes=4\nwrk -t12 -c400 -d10s \"http://127.0.0.1:8080/api/status\"\nRunning 10s test @ http://127.0.0.1:8080/api/status\n  12 threads and 400 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency   212.13ms   69.67ms 251.67ms   85.77%\n    Req/Sec     1.08      5.20    41.00     95.45%\n  827 requests in 10.01s, 1.46MB read\n  Socket errors: connect 0, read 255, write 0, timeout 1455\nRequests/sec:     82.61\nTransfer/sec:    149.09KB\n```\n\nAfter my test (which has a significant number of requests), I can conform that none of the workers will answer a request.  I needed far more than your 15 requests, but I was able to get there.  Killing off a worker and spawning a new one was able to answer requests for a while, but it too eventually got \"stuck\".\nWhat's even stranger, is that it looks like the interprocess communication channel in node is broken after a large number of requests (the parent can't send signals/messages to the children).  The parent still is aware of children's existence though, and notices when one dies to start a new one. \nThis problem does exist even with a single child.\nI'll be sure to dig into this more.\n. nope, things look equally broken regardless of silent or daemon\n. looks like in 10.17, silent=false works OK, while silent=true continues to hang after a number of requests\n. I'm doing some strange things with detached processes which are very likely to be the source of this problem.  This cluster code was written a long time ago.\nNow that we have a better logger, we don't really need \"silent\", but rather for the logger to be aware that it is not the master process.  This is simple, and we can disable the 'console' logger in this case.  \nThe 'daemon' mode will need to be revisited too\n. Hey @jacobbubu \nI think I have this sorted out.  Can you give https://github.com/evantahler/actionHero/pull/211 a try?\n. 979ffe72a850d89e5a0c4ff507efe0f268a467a6\n. thanks @bleonard... fixing my spelling for 14 months and counting!\n. https://github.com/evantahler/actionHero/releases/tag/v6.2.7\n. This might be a node.js bug:\nIf you force the contents of your .pem files to be strings, it works.   If you leave them as buffers, it doesn't.  \nI generated my certs like this:\nbash\nopenssl genrsa -out privatekey.pem 1024 \nopenssl req -new -key privatekey.pem -out certrequest.csr \nopenssl x509 -req -in certrequest.csr -signkey privatekey.pem -out certificate.pem\nI have the same error as you with this:\njavascript\nserverOptions: { \n  key: fs.readFileSync('./certs/privatekey.pem'),\n  cert: fs.readFileSync('./certs/certificate.pem')\n}\nHowever, this works fine:\njavascript\nserverOptions: { \n  key: fs.readFileSync('./certs/privatekey.pem').toString(),\n  cert: fs.readFileSync('./certs/certificate.pem').toString()\n}\nThe node docs say that buffers should be ok [[ http://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener ]] but that doesn't seem to be our experience. \n. Hmm, however, this simple server does not have the same problem, so it must be something with actionHero.  I'll keep digging:\n``` javascript\nvar https = require('https');\nvar fs = require('fs');\nvar options = {\n  key: fs.readFileSync('./certs/privatekey.pem'),\n  cert: fs.readFileSync('./certs/certificate.pem')\n}\nhttps.createServer(options, function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello World\\n');\n}).listen(8080, '0.0.0.0');\n```\n. Got it!   This one was a crazy one:\nIt turns out that the initializer for configuration was using a convince method called api.utils.hashMerge to combine the options in config.js with any passed-in ovverides to actionHero.start.  The hash merge was operating recursively so that options.server.web... could be merged with the overrides.\nHowever, the check utils.hashMerge was doing to check if something was an Object was naive, as many of things in JS are \"extended\" from Objects, which include Array, Buffer, RegExp, and more.  We were filtering out Array explicitly, but not Buffer and the rest.  This means that utils.hashMerge would actually try to merge the buffer into a new Object, and bad things would happen.\nLong story short, this fixes it:  https://github.com/evantahler/actionHero/commit/823b00f4daf0fbab7ad1ef7d55cf186e4bea46b0\nThe reason toString() in config.js worked is that it converted the Buffer Object to a String, which doesn't extend from Object, so HashMerge was ignoring it.\n. Updated... thanks! \nAlso updated in the generator https://github.com/evantahler/actionHero/commit/62024bef96e5b118a23d1c585e72fe2009277737\n. Thanks! \n. https://github.com/evantahler/actionHero/pull/208\n. yep! I changed it\n. this is a problem with winston, need to upgrade to get the fix\n. silent is not an option we should be using.  The (console) loggers from the workers are all disabled if they aren't cluster.master, and they will just use their file loggers (or whatever additional loggers you add).  The silent flag was the problem, as it seems there are lots of \"detatching\" bugs in various OSs.\nWhat are you trying to silence?  The workers or the master?\n. hmm, with the new settings, now worker output at all should be piped to the master stdio.  Can you confirm that your config.js logger settings are updated with the new config?\n. Exactly this.  Strange things happen when you detach the pipes from workers.  Most of the time cluster will be run as a daemon (with --dameon or using forever).  It's important to have the defaults be stable for most people.  You can add child logging back if you want and it should work as long as you don't detach/hide the master's pipes.\n. https://github.com/evantahler/actionHero/commit/a708ef358998eb46de4b089cf6e327a32a428551\n. you are correct that we should be safer in our input sanitization.  Right now, we are exposing params (if they exist) in all actions, as long as any action needs them.  I'll work on a PR that cleans this up.\nAs far as sending a \"body\" payload, from what I understand, what Parse is doing is fairly rare.  It's more common to do what github does https://help.github.com/articles/post-receive-hooks and send a \"body\" or \"payload\" param which itself is stringified-json.    Even in your example you are sending stringified json, so to access it you would do something like:\njavascript\ntry{\n  var payload = JSON.parase(connection.params.payload)\n}catch(e){\n  connection.error = e;\n}\n. And this should should cover the better sanitization of inputs into actions https://github.com/evantahler/actionHero/commit/2b243c6467ed052159d5f02fd3eb318b56b9b663\nThanks! \n. I'm really against adding support for wildcard params.  This is the type of thing that causes trouble down the line in many frameworks (most recently rails).  What situation do you have where sending a param called payload with arbitrary JSON won't work?  Can you describe your use case?\n. I'm going to guess there is something wrong with your test.  This works fine: \njavascript\nexports.action = {\n  name: \"json\",\n  description: \"json\",\n  inputs: {\n    required: [\"payload\"],\n    optional: [],\n  },\n  blockedConnectionTypes: [],\n  outputExample: {},\n  version: 1.0,\n  run: function(api, connection, next){\n    try{\n      var payload = JSON.parse(connection.params.payload);\n      connection.response.payload = payload;\n    }catch(e){\n      connection.error = e;\n    }\n    next(connection, true);\n  }\n};\nand you can use it like this:\n``` javascript\n\ncurl -X POST -d 'payload={\"thing\": \"stuff\"}' 'localhost:8080/json'\n{\n  \"payload\": {\n    \"thing\": \"stuff\"\n  },\n  \"serverInformation\": {\n    \"serverName\": \"actionHero API\",\n    \"apiVersion\": \"0.0.1\",\n    \"requestDuration\": 7,\n    \"currentTime\": 1378680616429\n  },\n  \"requestorInformation\": {\n    \"id\": \"1fdb9212c86f0866cd7f3d1995f1abf916d6cd84\",\n    \"remoteIP\": \"127.0.0.1\",\n    \"receivedParams\": {\n      \"payload\": \"{\\\"thing\\\": \\\"stuff\\\"}\",\n      \"action\": \"json\",\n      \"limit\": 100,\n      \"offset\": 0,\n      \"apiVersion\": 1\n    }\n  }\n}\n```\n\nI would suggest not using routes to parse out the payload, as there are a number of issues with URL escaping that are likely to give you trouble with JSON parsing.\n. While not possible to do on a per-action basis, we recently added the ability to disable paramScrubbing server-wide.\nI have added this commit which will ensure that body JSON payloads are parsed and interpreted. This means if you know the top-level keys of the body post, you can list them like normal in your actions' inputs.  IE: This will now work for the cacheTest example curl -X POST -d '{\"key\":\"something\", \"value\":\"myVal\"}' http://localhost:8080/api/cacheTest\n. Sure, I guest the JSON body payload could be an array rather than a hash.  Lets do this then.  We'll call body payloads connection.params.payload when they are arrays.\n\nNow in the readme:\nYou can post BODY json paylaods to actionHero in the form of a hash or array. \nHash: curl -X POST -d '{\"key\":\"something\", \"value\":{\"a\":1, \"b\":2}}' http://localhost:8080/api/cacheTest.  This will result in:\njavascript\nconnection.params = {\n  key: 'something'\n  value: {\n    a: 1,\n    b: 2\n  }\n}\nArray: curl -X POST -d '[{\"key\":\"something\", \"value\":{\"a\":1, \"b\":2}}]' http://localhost:8080/api/cacheTest.\nIn this case, we set the array to the param key payload:\njavascript\nconnection.params = {\n  payload: [\n    { \n      key: 'something'\n      value: {\n        a: 1,\n        b: 2\n      }\n    }\n  ]\n}\n. @guillegette lets move this conversation over to https://github.com/evantahler/actionhero/pull/318\n. long-polling connection persistence solved here: https://github.com/evantahler/actionHero/commit/59edfabce79a0fff578846f7f970d6c6a99b9153\n. And this fixes IP address parsing: https://github.com/evantahler/actionHero/commit/3897ed2be876a825399e4b96091c4269d726a114\n(although it's lame to add timeout)\n. Query string certainly works, however the same params passed via routes or POST will override them.  Like your other PR, the query params must be defined in the action's inputs to be parsed. \n. Good catch! It looks like we only parsing form options for POST (which would ignore PUT, DELETE, and other HTTP verbs).  This commit will allow all HTTP Verbs other than GET to have their form options parsed:\nhttps://github.com/evantahler/actionHero/commit/59a4e34a82824b227f632ca71092046331d0e0a2\n. Thanks for the PR!\nI'm a little confused by the situation you describe.  If api.redis.checkForDroppedPeers() runs every 5 seconds (baed on lostPeerCheckTime), and every server runs api.redis.ping() every 1 second, that means that it's taking more than 5 \"cycles\" of api.redis.ping() for your actionHero servers to reach redis.  That is a really long time!  I'm assuming the log errors you are referring to are \"peer X has gone away\"\nI'm not sure decreasing the sample rate will actually help.  If you check every 5s or every 5m, the check being preformed about how out-of-date a peer's last check-in can be, is still based on api.redis.pingTime, which is fixed at 1s here.  While the occurrences of \"peer has gone away\" will happen less frequently, they are still just as likely to happen per check.  \nI'm not sure if you are using the task sub-system, but knowing who the peers are in the cluster is an important aspect.  It's also pretty rare to have a latency in redis higher than a second.  My redis' are usually in the same data center, but even when I use a remote redis service, like redis2go, I've rarely seen latency over 300ms.  \nIf I had to make a guess as to what was going on, I would think that perhaps your event loop is very busy, and that perhpas  api.redis.ping() is unable to be called every second.   If that's the case, then you could change api.redis.pingTime instead/as well?\n. Bump.\n. Good luck!  Keep in mind that if you need something quickly to make a patch like this, you can always override the actionHero defaults in an initializer.  Feel free to try out changing api.redis.pingTime = 1000 * 60 if you want.\n. Oops! that was an artifact from back before we used faye.  I've removed it.\nThanks! \n. https://github.com/evantahler/actionHero/commit/ac2217974145f4c0b74c8473dea6f30d88cf937b\n. Embarrassing! Fixed now! https://github.com/evantahler/actionHero/commit/10c942449ae13add132c1c77fd284e9135d3de9f\n. That's pretty strange.  Rather than relying on the client to call disconnect, we tap into faye to look for a dropped connection here.  In long-polling connections it takes about a minute to note the client is gone, but with a WS connection it should be instant.  Either way, the clients are removed from the room.  \nTesting with this example page it notes a client disconnet on a page change or reload as expected.\n. Is there a way you can share to reproduce this behavior from a fresh actionHero install?\n. While not directly related, it does look like we weren't clearing away websocket clients on server shutdown.  This should help that https://github.com/evantahler/actionHero/commit/c60d040173dac4e5685073255b118744fdbe2ebb\n. cool.  I just pushed version 6.3.3 to npm, this change made it in\n. seems OK to me with the default config.js settings:\n``` javascript\nexports.task = {\n  name: \"tester\",\n  description: \"tester\",\n  scope: \"any\",\n  frequency: (1000 * 5),\n  toAnnounce: true,\n  run: function(api, params, next){\n    if(params == null){ prams = {}; }\n    console.log(\"TESTER SAYS HI\");\n    api.log(\"THE API LOGGER WORKS TOO\");\n    next(null, true);\n  }\n};\n```\nand the output\nbash\n...\n2013-09-22 22:37:55 - notice: *** Server Started @ 2013-09-22 22:37:54 ***\n2013-09-22 22:37:59 - debug: [taskProcessor 3] time to process delayed task: tester ( 61d6b536-36d2-4b56-b274-7b7ecc441d88 )\n2013-09-22 22:37:59 - notice: [taskProcessor 0] starting task tester, 61d6b536-36d2-4b56-b274-7b7ecc441d88\nTESTER SAYS HI\n2013-09-22 22:37:59 - info: THE API LOGGER WORKS TOO\n2013-09-22 22:37:59 - info: [taskProcessor 0] completed task tester (0s), 61d6b536-36d2-4b56-b274-7b7ecc441d88\n. Ahh, you mean when running in clusters.  Yeah, that's now a requirement to be more compatible with backgound pipes in more OSs (Solaris mainly).  The file logger should still be working as it always had in cluster mode\n. Apologies! I very rarely have the opportunity to test on Windows.  The fix is here https://github.com/evantahler/actionHero/commit/14e81497892052bd0302abd0cc1696c693bff480 \n. Thanks! \n. Thanks! \n. https://github.com/evantahler/actionHero/commit/271664b6e029d919dd1000531310588aace10bac\n. Yep! use server.processFile\n``` javascript\nvar fs = require('fs');\nexports.action = {\n  name: \"fileServer\",\n  description: \"fileServer\",\n  inputs: {\n    required: [],\n    optional: [],\n  },\n  blockedConnectionTypes: [],\n  outputExample: {},\n  version: 1.0,\n  run: function(api, connection, next){\n    var server = api.servers.servers[connection.type];\n    var file = \"index.html\"; // relative to api.configData.general.flatFileDirectory\n    connection._original_connection.params.file = file;\n    server.processFile(connection._original_connection);\n  }\n};\n``\n. https://github.com/evantahler/actionHero/pull/228\n. readme updated to mention you can now change this https://github.com/evantahler/actionHero/wiki/Getting-Started#application-structure\n. https://github.com/evantahler/actionHero/releases/tag/v6.4.0\n. https://github.com/evantahler/actionHero/releases/tag/v6.4.0\n. Work in this branch https://github.com/evantahler/actionHero/tree/resque\n. closing in favor of https://github.com/evantahler/actionHero/pull/260\n. Thanks for catching this! https://github.com/evantahler/actionHero/commit/7db16567270a84941297a10453dbf767b2b00bf0\n. https://github.com/evantahler/actionHero/releases/tag/v6.4.1\n. Seems like a great option to add toconfig.js.  AsrequestorInformationandserverInformationis only presented in thewebserver type, please place that option in theapi.configData.servers.web` hash.\n. Oh, and the obligatory :+1: \n. Closed out in the above PR\n. Yep, there's certainly something up with this new version of redis.  I'll work with them and try to get to the bottom of it.  \nIn the interim, it looks like this only effects faye's 'websocket' transport.  If you drop down to long-polling (which for actionHero will still appear as a websocket-type connection) the bugs seem to go away.  Uncomment this line https://github.com/evantahler/actionHero/blob/master/public/javascript/actionHeroWebSocket.js#L57\n. relevent bug in faye: https://github.com/faye/faye/issues/244 and mailing list thread https://groups.google.com/forum/#!topic/faye-users/RSw8kt0Qe8A\n. In the interim, this change to actionHeroWebSocket.js will handle reconnections of this type better and won't send duplicate messages... however, your client's id will change on each reconnect.  \nhttps://github.com/evantahler/actionHero/commit/bc9c05a54d51d9a4050d9e823f1db60e6853a660\n. making some progress on this (check the mailing list link above).  Looks like the semantics for not responding to clients (IE: when you send a message to the server) have changed.\n. Ok, this should work now https://github.com/evantahler/actionHero/commit/3e0f86c30130db6291900d71bd89f6b4f7a694b0\n. seems like a fine default :+1: \n. 2 thoughts: \n- Please update test/specHelper to set these new fields to true, as some of the tests use this info \n- I would suggest more explicitly setting the booleans to true or false rather than referencing development mode.  That's totally fine to do in your own projects, but for new folks, I don't want to imply a dependency.\n. Travis unfortunately gets stuck every now and again.  I re-ran the tests, and all is well.\n. Do you have a test case?  I think actionHero does handle Error objects properly:\njavascript\nexports.action = {\n  name: \"errorTest\",\n  description: \"errorTest\",\n  inputs: {\n    required: [],\n    optional: [],\n  },\n  blockedConnectionTypes: [],\n  outputExample: {},\n  version: 1.0,\n  run: function(api, connection, next){\n    connection.error = new Error(\"broken stuff here\");\n    next(connection, true);\n  }\n};\nwhich returns the response you would expect: \"error\": \"Error: broken stuff here\",\nIn the servers, we coerce all Error objects to their string representation before building the response payload here\n. or... you might be asking about how to augment  your error messages to provide additional information.\nAs your link shows, there are a lot of schools of thought about how verbose to be when returning errors, whether or not to change HTTP status codes, etc.  To keep actionHero as flexible as possible, I am trying not to take a hard stance on this in either direction (although I have my opinions).  A good example of this is how in the web server, you can choose to return HTTP error codes upon an error or not.  It's up to you.\nThat said, there are a few ways you can make your life easier should you decide you want to provide additional information.\nThe first is, as you noted, to pick another field on your connection's response to add more info:\njavascript\nconnection.error = 'User not found'\nconnection.response.errorDetails = 'User #42 is not found in the DB'\n(As a note, the notion of 'providing more details' (in all circumstances, not just on errors) is why actionHero defaults to showing config.servers.web.metadataOptions)\nYou can also write some middleware to automatically extend and embellish error messages. Something like:\njavascript\napi.actions.postProcessors.push(function(connection, actionTemplate, toRender, next){\n  if(connection.error != null){\n    connection.response.errorMessage = api.errorDetails[connection.error];\n  }\n  next(connection);\n});\n\nor, if you are more simply asking \"can we return JSON as well as strings to connection.error, then yes.  That would be cool :D\n. Either way, I think allowing for connection.error to be a hash is a good thing... here it is https://github.com/evantahler/actionHero/commit/841caa8db1c0587ca6dae1e24352fe18e60b1b3b\n. You can mess with headers in your actions by adding to the connection.rawConnection.responseHeaders array.  \nRight now, actionHero assumes that all the \"parts\" of a route are only delimited by /, that's why :y.:format is being read as one param.  I'm digging though how other frameworks handle non / delimiters, but haven't found much yet.  For example, Rails (with some hacks) will allow \".\" as part of a single param like we have here, but not split variables on it.\nIn the mean time, while you can't have a variable image extension, you can either place it elsewhere in the URL or provide it as a param:\nhttp://www.site.com/images/jpg/my_picture\nor\nhttp://www.site.com/images/my_picture?type=jpg\n. Here's a proposal: https://github.com/evantahler/actionHero/compare/extensions\nWe can do what Rails does: \n- do not treat extensions params\n- treat extensions as a special type of data, and append it to the connections (connection.extension).  You can access this in the action\n- (optionally) auto-set the mime type based on the extension (api.configData.servers.web.matchExtensionMime)\nThe branch linked above isn't quite done yet (needs some tests), but it should be enough to see if it will work for you\n. https://github.com/evantahler/actionHero/pull/237\n. I agree that this is a very naive parser and should be updated (certainly params with \".\" should be allowed).  However, with the addition of file extension parsing for routes, we need a way to be sure that extensions are not included as parts of the params.  For example:\n- { path: \"/images/:imageName\", action: \"renderImage\" }\n  - Here, a URL like site.com/images/profile.jpg should be parsed with connection.params.imageName = \"profile\" and connection.extension = \"jpg\"\n- { path: \"/ping/:url\", action: \"pingCheck\" }\n  - Here, with a url like site.com/ping/google.com (closer to what I think you are doing) you expect connection.params.url = \"google.com\", and you don't expect a file extension at all\nI think the best way to handle this would be to add an option to your routes.js file where you can indicate skipping the . split.\n. I opt for the option that has the least configuration options: Just don't split/parse on ..  If you want to remove the extension from the last param, you can do that in a middleware on in the action.  This commit [[ 13a8d11aa531bc78c02c3b121a6ee0586124aa2a ]] makes the above 2 examples work like this:\n- { path: \"/images/:imageName\", action: \"renderImage\" }\n  - site.com/images/profile.jpg => connection.params.imageName = \"profile.jpg\" and connection.extension = \"jpg\"\n- { path: \"/ping/:url\", action: \"pingCheck\" }\n  - site.com/ping/google.com => connection.params.url = \"google.com\", and connection.extension = \"com\"\nThe trick now is to make api.configData.servers.web.matchExtensionMime an option on the action and not system-wide\n. without seeing more of your code, there's not much I can help with.  Your routes look good (I tried them out in a fresh 6.4.3 project).   \nThe only place the web server would generate a 400 response code is here.  Note that for this to happen:\n- connection.response.error != null\n- api.configData.servers.web.returnErrorCodes == true\n- you haven't messed with connection.rawConnection.responseHttpCode in your action already\nI would suggest adding some debug messaging logging connection.error right before your action calls back, and in that server block mentioned above.  Check connection.error in both places. It could also be a middleware messing with things if you have any.\n. general cleanup notes while doing this refactoring:\n- client shouldn't generate its own unique channel name (createUUID() should be removed)\n- better 'evented' support (perhaps try to emulate server-site EventEmitter)\n- remove internal logger and favor a 'log' event\n- files can be sent to websocket clients\nand continue to use no external libraries!\n. closing in favor of https://github.com/evantahler/actionHero/pull/294\n. Other than 'name' not being a string, everything looks OK here.   As a note, you can't pass 'scope' when you enqueue a task, as it's part of the definition of the task (IE: Should I distribute this task or not when I get it).\nTo verify, I made a test task and enqueued some instances of it in an initializer:\ntasks/test.js\njavascript\nexports.task = {\n  name: \"test\",\n  description: \"test\",\n  scope: \"any\",\n  frequency: 0,\n  toAnnounce: true,\n  run: function(api, params, next){\n    if(params == null){ prams = {}; }\n    var error = null;\n    console.log(params)\n    next(error, true);\n  }\n};\ninitializers/_project.js\n``` javascript\nexports._project = function(api, next){\napi._project = {\n_start: function(api, next){\n  var params={\n  \"name\":\"asdf\", \n  \"payload\": {\n    \"level\": \"info\",\n    \"type\": \"user\",\n    \"message\": \"hello from client1\",\n    \"fields\": {\n     \"count\": 1\n    }\n   }\n  };\n\n  var task1 = new api.task({name:'test',params:params,toAnnounce: true});\n  task1.enqueue();\n  var task2 = new api.task({name:'test',params:params,toAnnounce: true});\n  task2.enqueue();\n\n  next();\n}\n\n}\nnext();\n}\n```\nAnd everything works as expected:\n2013-11-01 19:52:27 - notice: [taskProcessor 3] starting task test, b22256ee-3320-4a16-be6d-74792df9568f name=asdf, level=info, type=user, message=hello from client1, count=1\n{ name: 'asdf',\n  payload:\n   { level: 'info',\n     type: 'user',\n     message: 'hello from client1',\n     fields: { count: 1 } } }\n2013-11-01 19:52:27 - info: [taskProcessor 3] completed task test (0s), b22256ee-3320-4a16-be6d-74792df9568f\nThose circular reference errors happen when you try to JSON encode complex objects (like streams) or functions.  Are you encoding connection?  That's a common object that cannot be converted to JSON as it holds the connection's http socket, etc.  It's probably easier to say that the only things that can be JSON'd are arrays or hashes containing only strings or numbers, and they cannot recurse. \nThe best advice I have for further debugging is to log out what exactly is trying to be JSON'd (literally add some console.log statements in there) so we can get a better look at the object that is causing trouble.\n. sweet.\n. It's an easy fix! https://github.com/evantahler/actionHero/commit/e6b09a156773e3a41b4624b66d32f7766e775388\nThanks for letting me know about it.\n. Task loader updated as well.   \nI think the docs remain correct as exports.action or exports.myAction work in either case.   I agree that previously it was misleading because it looks like you should be able to use those export statements interchangeably.\n. no, not really.  We inspect (object).name to load in the actions' name.  It makes a lot of sense for exports.(name) = {name: (name)} but you don't have to.  exports.action = { name: 'myAction' } is still fine.\n. Please keep creating issues for typos!  I know that I'm a fairly terrible speller...\n. https://github.com/evantahler/actionHero/commit/cc955ce27788f3430bd8a215a9e660aba4026c61\n. (or feel free to fix and PR them :D ) \n. I certainly believe that actionHero is slower than the \"raw\" http library and 'vanilla' express... but that's a lot slower than I would like.  To be honest, I haven't done any performance tests in a while, as I've been focusing on new features.  \nThat said, some of the biggest (obvious) bottlenecks are probably around the stats sub-system, as every invocation of it writes or reads to redis.  This happens every request.\nactionHero also creates a lot of new objects from prototypes (a process which can be slow) every request.  actionHero made the choice early on to focus on portability (reusable actions between http, websockets, telnet, etc), and in doing so probably slowed things down.  \nAt the very least, I'll look into speeding up the stats system by buffering writes\n. https://github.com/evantahler/actionHero/issues/245\n. try your test suite on master and let me know if it got any better\n. Yep! just do this: \n``` javascript\n///////////\n// Stats //\n///////////\nconfigData.stats = {\n  writeFrequency: 0,\n  keys: [ ], \n}\n``\n. for some color, disablingapi.stats.increment` basically halves my test time here\n. https://github.com/evantahler/actionHero/pull/246\n. Perfect.  Thanks! \n. Totally agree.  \nThe good news is that those are all from the \"workers\", which you can choose to disable @ api.configData.general.workers = 0.  There was only one \"system\" redis command during this window (the peerPings one).\nThe worker system in general is getting a complete overhaul and getting moved to a resque-compatible backend.  I read this as a problem with the workers being far to redis-hungry, so I'm going to close out this bug, and direct you to the work being done on the redis branch here.\nThanks! \n. (If I recall) this was only a limit for outgoing requests.  There was never a limit to incoming requests to the server.  If you want to increase the outgoing request pool size (perhaps for the request library), here are some notes\n. Thanks for checking out an upstream branch!\nFixed here https://github.com/evantahler/actionHero/commit/e2fe56b2dca153af9a542920e3798ae0a3d60341\n. Normally, you can use middleware to intecept requests/actions and work with them before they reach the actionProcessor.  Here, you could build a response and indicate that you don't want to process an action when connection.rawConnection.req.method == 'OPTIONS'.\nHowever, you have pointed out that actionHero (being an API server!) really should handle all the http 1.1 methods, which include OPTIONS and TRACE. Check out this PR and let me know if the changes here work for you: https://github.com/evantahler/actionHero/pull/252\n. reopen this ticket if you have any questions\n. thanks again!\n. Thanks!\nAside from the spelling mistake, this was originally implanted with the process.exit() to overcome the wrappers which might book actionHero (like this for example) and truly exit the process even if actionHero.start was wrapped in a try/catch (or a domain).\nHowever, I now feel that if you do write your own actionHero boot manager, you should be able to catch a boot error however you want, and exiting the process belongs in the binaries, if anywhere.\n. In the same vain of this PR, we should probably support all HTTP 1.1 methods, and HEAD is in that collection.   HEAD responses will act just just GETs, but return no body.  This implies that server-side processing can still take place with a GET.\n. it turns out sending HEAD requests has some very specific rules about transfer-type and the body-length headers.  This should do the trick https://github.com/evantahler/actionHero/commit/0498cc0308b9e11908a575da88c38e9d16e49a8f\n. Sorry for the confusion.  actionHero will default the client to the newest version of the action if they don't provide an apiVersion if they make it to the actionProcessor middleware.  However, in web clients, the router and param parser happen first, so if you access actionHero via the router and you don't provide apiVersion, you will error out.  If you access your action directly via http (ie: http://localhost:8080/api/myaction) that will work fine and chose the newest action automatically.\nI'll clarify the docs\n. The docs now read:\nAs a note, if a client accessing actionHero via routes does not provide an apiVersion and it is explicitly defined in the route, the highest number will not be assigned automatically, as will be seen as a routing error.\n. This has to do with the rule for a route to match, all params must be satisfied.  So, if you expect a route to provide api/:a/:b/:c and the request is only for api/:a/:c, the route won't match (save some fancy regexp).  This holds for any variable, including apiVersion.\nIf you want to match both with and without apiVersion, just define the rote 2x, IE:\njavascript\nexports.routes = {\n  all: [\n    { path: \"/cache/:key/:value\",             action:  \"cacheTest\" },\n    { path: \"/:apiVersion/cache/:key/:value\", action:  \"cacheTest\" },\n  ]\n};\n. Added to the wiki @ https://github.com/evantahler/actionhero/commit/54679257a6ad7e763e4076736a967ef513c66fd3\n. You can supply api versions in your action definitions so you can have myAction version 1, myAction version 2, etc.  You can define them in the same file or different file, it doesn't matter. Personally, I like to have explicit folders for each API version (/actions/v1/myAction.js, actions/v2/myAction.js), but that's just me.\nFrom there, each server has a way of allowing clients to pick which version of the API they are interested in.  All servers will default clients to use the 'newest' version of the action, otherwise you can use the reserved param apiVersion in your call to the server.\nThe web server also allows you to use routes to send the apiVersion, IE: /api/v1/myAction\nIf you are looking for more examples on how folks organize their projects, try the mailing list\n. This will close https://github.com/evantahler/actionHero/issues/229 and https://github.com/evantahler/actionHero/issues/92\n. Thanks for checking the branch out @dunse !  You caught some good bugs!\nI was able to reproduce your errors., and I believe that both .1 and .2 can be attributed to to this.  When reloading the task in development mode we were redefining the resque job with a wrapper, and double-adding plugins.  This would cause the worker to try to 'reserve' or 'lock' the job more than once at a time, and strange things would happen. \nYou inspired to me to give a little more love to developer mode and clean it up.  Also, now the server will restart on an initializer change too. \nRegarding the resque UI, I meant to say that it's included as part of the node-resque project.  I have no desire to rewrite this in node, and the ruby one is very good.  bundle install and rackup to get going.\n. That said, I would gladly welcome a PR into node-resque with a node implementation of the resque UI https://github.com/taskrabbit/node-resque/issues/4\n. And... it's resque time!\nHappy Thanksgiving.\n. Looks good! \nbrowser_fingerprint is up to version 0.0.4 now on NPM\n. Cool! I've merged you changes to browser_fingerprint and published a new version.  I've updated the AH defaults here https://github.com/evantahler/actionhero/commit/bec8ee7920d2919e573831e4c4ff6da67fb34a74\n. I'm a heavy chef user at work, but I rarely use chef for 'application deployment', just 'configuration management'... but that's a conversation for a different time...\nYes! It should be fairly straightforward so create a server.js to wrap actionHero's built-in launchers.  For example, this will run the default server boot (equivalent to npm start):\n``` javascript\n!/usr/bin/env node\nrequire('./node_modules/actionHero/bin/actionHero');\n```\nstartCluster does offer a lot of flags/boot options which come from ENV, but you can set them globally with chef and you should be OK.  Alternatively, you can use process.fork to call bash from server.js, but that seems a bit janky.\nAll of the application launcher code is separated from the framework in the bin directory.  You can also copy only the parts you need into a custom server.js and skip actionHero's launchers all together.  This wiki page has some info on that topic\n. https://github.com/evantahler/actionHero/commit/85315b87a57ee293e6d7839e5632ab04aff9f63c\n. Thanks!\n. This was patched later by https://github.com/evantahler/actionHero/commit/297e436ce92ac26de60086094af793894c31f9eb\n. Yeah, I think that Heroku will always npm install unless you check code in.  if you link a git module by SHA rather than branch (aka: master), that should work as well.\n. great catch!  I think we were probably overly clever here (and trying to really optimize that method for speed).  However, this is far clearer (and less broken).  https://github.com/evantahler/actionHero/commit/ab2884daa28d4952b371cda44b25b7473e4ad68f\nNote, the first param now is the number of chars, rather than the bytes of entropy.\nThanks! \n. closing this issue in favor of the PR https://github.com/evantahler/actionHero/pull/272\n. https://github.com/evantahler/actionHero-tutorial/pull/3\n. Thanks @phil-r!\n. Yeah, I know that I'm a terrible speller... thanks for the offer to help! I don't think you can do PRs on GitHub wikis, so if you want to clone it and host your changes somewhere, that would be awesome! Of you could post gists of updates... whatever works for you.\nAs far as testing, I use mocha and should internally for actionHero.  If you checkout /test/server* you can see examples about how I'm testing actions for each of the 3 provided server types (how to make a websocket request, how to test TCP, etc).  \nI think technically, tests against actions would be \"integration tests\", as you would be calling them from outside the framework (with a true HTTP post or some such), and unit tests would be something a little lower level (like testing your 'user' prototype, etc).  Either way, check out _specHelper.  actionHero has support to override your boot options in config.js so you can setup your test environment with only the differences you need for testing.  Alternatively, you can create a separate test_config.js and boot your test server from there.  Philosophically, I hope all you need to change when switching between environments (development, test, stage, production) would live inside config.js\nOther than choosing a new redis DB, I think that each person would have different requirements about what they would need to setup a test environment, which is why I haven't included a slimmed-down spec helper as part of actionHero generate.  Are you using mySQL and your tests need rollback?  Are you using s3 and you need to change buckets?\nWhat are your thoughts?\n. Yeah, those are fine changes.  Thank you!\nI'm personally torn about the use of NODE_ENV.  I can't decide if we should act like rails and have a separate config.js for each env, or suggest folks do like you suggested and have conditional logic in their config/application.  \nI'm leaning towards separate files... \n. I see you found https://github.com/evantahler/actionHero/issues/269, great! In my head, these 2 are very related.  I think first we update the config system and then we make a small _specHelper to include with the project. \nI'm fine bundling in support for mocha and should.  We can make a hook spec.runAction(connection) directly into AH's guts fairly simply.  We can use the genericServer implementation to make a \"spec\" server type that can accept simple connection objects which take just the params required.\nGood luck! \n. Testing is a hot topic these days!\nI'm closing this issue in favor of this PR https://github.com/evantahler/actionHero/pull/293\n. :+1: to the folder layout, description updated.\nI haven't looked into node-convict (or some of the other config plugins).  I'm not opposed to it.\n. closing this ticket in favor of the PR https://github.com/evantahler/actionHero/pull/274\n. I ended up not using convict, as api.utils.hashMerge had all I need, and I want to be very explicit in what overrides folks define in their environment files\n. Thank you for all of this work!\nI'm merged all of your changes (and added a few of my own) except that I left out the note about socket.io.  I really don't want to slam any other projects, and measuring \"graceful\" and \"lighter\" is up to interpretation.  socket.io does also fall back to other protocols now as well. \nThank you again! \n. I like where you head is at!\nThe middleware tooling should allow you build this type of authentication check a layer above your actions.  Want to check that connection.auth == true where action.requireAuth == true?  It should be simple enough.  With oAuth, you'll need a few endpoints (actions) that are un-athenticated to start the request chain, but other than that is seems straightforward.   I have some examples of actionHero being an oAuth consumer (auth via evernote's or twitter's API for example), but I don't think I've seen actionHero acting as the oAuth provider yet.\nThe problem of creating pluggable extensions to actionHero is certainly something that should be worked on in the near future.  Seeing as everything thing you might want to add can/should be expressed as either a server, task, action, or initializer, I think the way to handle modules would be as follow:\nas the package maintainer\n- create a new package with the same folder structure as a default actionHero project (/actions, /initializers, etc)\n- publish to NPM\nas the package consumer\n- add the package you want to your package.json in the normal way\n- in your main actionHero project, add a new extensions.js to the root of the project, and list these packages in there again.  They will be loaded in as if they were local to your project.  This is where you would require('actionHero-oauthProvider) and such.\nactionHero already has some preliminary support for variable load paths for all of its components via api.configData.general.paths. We need to turn these all into arrays, and the loader around extensions.js needs to add to those load paths.  That should be it! \n. neither connection.auth nor action.requireAuth exist explicitly, but you can set them.  It's up to you to decide what you look for in your authentication middleware.  As you are handed the action template, you have access to the entire action object, not just the run method.  \nCheck out this example https://github.com/evantahler/actionHero-tutorial/blob/master/initializers/middleware.js\n. Closing this out, as https://github.com/evantahler/actionhero/releases/tag/v8.0.0 brought the plugin system. \n. This PR places more of a burden on redis, with the addition of these new reserved keys:\njavascript\napi.chatRoom.keys = { \n    rooms:   \"actionHero:chatRoom:rooms\",    // set\n    members: \"actionHero:chatRoom:members:\", // prefix to hashes\n    auth:    \"actionHero:chatRoom:auth\",     // hash\n  }\n. Yep, and this fixed it: https://github.com/evantahler/actionHero/commit/297e436ce92ac26de60086094af793894c31f9eb\nIt's in master, but we haven't cut a new release yet\n. Actually, we probably should be using X-Forwarded-Port if it exists, as you point out.  If you could make that update, that would be great\n. I got it for you here https://github.com/evantahler/actionHero/commit/c6d0cdcf64aaf3b20b949f1506a6ac1045983024\nThe reason to use == null with a double-equal and not a tripple-equal is that it will match both a null and undefined.  This is a wider catch-all, which is what we want here.\n. Merging... and now I need to change all the wiki docs :D \n. I've been digging into this, and there are a few things at play:\n- you are correct, and splitting by : is a bad idea for ipv6\n- while not that common, there are certain load balancers/proxies that will append the port (even in ipv6) to thier x-forwarded-for, so we need to account for them\n- while it is possible to detect what type of connection the client came in on (req.connection._peername.family => \"IPv6\") this API is likely to change (hence the _), and that doesn't help us to know if the port is being reported or not\nWhat I think might be an OK solution is as follows:\n- we know that all IPv4 address have 0 colons\n- IPv6 addresses can have 3 ([::ffff:127.0.0.1]) or 7 ([0:0:0:0:0:0:0:1])\n- so we can safely remove the last part of the string split by \":\" if the number of colons in the string is not 0, 3, or 7 (or the number of parts when split should number 1,4, or 8).\nimplemented here: https://github.com/evantahler/actionHero/commit/3202e2f1ce0f3f4fef0ad983694e7b1aac938238\nThoughts?\n. I'm not too happy with this solution, but I'm glad this will work for you\n. Thanks for this!\nThe problem I'm still stuck on is determining if an address is v4 or v6.  For example if you bind the http server to \"::\", all addresses appear to be coming from ipv6, but the ipv4 addresses will be reported on the connection of that type.  \nPerhaps we can use the colon thing to determine if we are looking at an ipv4 or ipv6 address (more than 1 colon in all cases means ipv6).  We can use your regex above on v6, and go back to the behavior we used to use for v4.\nThoughts?\n. Thanks!\nUsing your regexp, I've gotten us to here: https://github.com/evantahler/actionHero/commit/fe42b24ce3ca5f52910f9b274946c9e971efd91d\n. and a note about how we got here https://github.com/evantahler/actionHero/commit/c84999d84337d035032a739b64bd4737d46963b8\n. Cool. Keep us posted as it matures.\nOn Sunday, December 8, 2013, Bryan Tong wrote:\n\nThe only thing I was going to note is that the function I submitted to the\nipv6 library is a bit more complete than the one you implemented. Might be\nworth adding it as it passes more tests.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionHero/issues/275#issuecomment-30104503\n.\n\n\n\nEvan Tahler\n 412.897.6361\n evantahler@gmail.com\n. https://github.com/evantahler/actionHero-tutorial/pull/4\n. Thanks for doing this work!\nThis is a large PR, and a bit hard to follow.  Would it be possible to submit your changes in batches?  I'll look through your inline-comments, as those are easier to follow, and make those changes in master manually.\nPlease don't include any IDE-specific code (the XML) in a PR.\n. Thanks, its good to have some context.  I'm very happy to see folks interested in cleaning up the source!  Thank you.\nThe smaller PR question was more about how the amount of changes crashed my mobile browser :D   \nI'll take a look in more detail soon, and while I may exclude the XML reports, its good to know what they are for.\n. Thanks! I'm adding some notes as I find them\n\nEvan Tahler\n 412.897.6361\n evantahler@gmail.com\nOn Sun, Dec 8, 2013 at 9:32 PM, Spudz76 notifications@github.com wrote:\n\nTravis-CI https://travis-ci.org/evantahler/actionHero/jobs/15132478seems to think I broke stuff in that 5th commit. I didn't realize Travis-CI\nalso tests PRs, awesome. I'm going to commit a patch for whatever it is\ncomplaining about.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionHero/pull/277#issuecomment-30106642\n.\n. on my end, if you merge with (my) master and fix those 2 notes, it looks like npm test succeeds again.\nPlease remove the XML reports, and I'll merge this in!\n\nBTW, you can have multiple outstanding PRs to a repo, as a pull request is defined as branch-to-branch, so you can have you:branch-1 to evan:master and you:branch-2 to evan:master at the same time\n. Things look good! This PR https://github.com/evantahler/actionHero/pull/280 is me merging all of this in (and fixing some conflicts).  I'll close this PR in favor of that one.\nTHANK YOU!\nI would offer to 'try harder at becoming a good speller', but I've been making that promise for a few decades now and it seems statistically unlikely to happen... It's a good thing you are here to help! \nI'm now going to try out the webstorm IDE.\nI'm always curious to hear what folks are using actionHero for.  If you have anything you want/are able to share, please jump on the mailing list and share!\n. At some point in the distant past, we chose jake over grunt, but looking at the popularity of Grunt these days, I'm willing to make the switch.  \nIf you want to make this PR about whole-hog switching from jake to grunt, that would be cool. I don't however, want to have both runners in the project at once.  \nThere are a few interesting tasks scattered in the jakefile.  Would you be able to port these over as part of the switch?  The most important (and related to any test runner) is the env loader that other tasks inherit.\n. Regarding your error, I'm fairly certain that the mocha executable does some magic around catching uncaught exceptions which would be overruled by grunt.  \nThe test assumes something about the order of how uncaught exceptions work.  In node v0.10, I believe there were some improvements about domain errors, which this test relies on.\n. There's no current plan to depreciate node 0.8.x.  I'd like to keep it\naround as long as possible.  We removed 0.6.x when domains became useful,\nand it would have been a pain to support both domains and not-domains.\n That's the only version requirement I've had so far.\nThe code in question seems to work, so removing 0.8.x for being\n'untestable' seems a bit harsh.  If push comes to shove, I would make that\ntest node v10+ rather then remove the node version.\n\nEvan Tahler\n 412.897.6361\n evantahler@gmail.com\nOn Mon, Dec 9, 2013 at 3:47 PM, Bryan Tong notifications@github.com wrote:\n\n@evantahler https://github.com/evantahler There is a pretty good\nexplanation of the exception issue here:\nhttps://github.com/pghalliday/grunt-mocha-test/blob/master/tasks/lib/MochaWrapper.js\nI am looking at coming up with a workaround and I also found the initial\nthread where you were working on this: visionmedia/mocha#513https://github.com/visionmedia/mocha/issues/513\nSo I read your solution and am trying to piece together exactly how node\n0.8 is causing this to be handled incorrectly and I know it has to do with:\njoyent/node#4375 https://github.com/joyent/node/issues/4375\nWhats the projected EOL for 0.8 just out of curiosity?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionHero/pull/278#issuecomment-30186516\n.\n. Narrowed it down:\n\nThe strange thing that is happening in node v0.8.x is that domains didn't properly catch 'in-line' exceptions, just async ones.  I think this was fixe in node v0.9.x and onward.\nThe exception that we are testing here is an 'inline' exception (no deferred callbacks), and as such, the domain will re-raise.  \nFrankly, I don't know how this test used to work at all.  This commit fixes it https://github.com/evantahler/actionHero/commit/0c3fa6db0b2f5c8e985b2d8d616ab53dc8639a6e\n. I use https://github.com/creationix/nvm locally (osx 10.9) and it works great for switching node versions.\n. That was probably some of the rationale for picking jake initially.\nIn my opinion, grunt and jake are very equivalent tools.  They can both be\nused to run arbitrary scripts, they can both load in the actionHero env,\netc.  As such, I don't see a reason to have both in the project.  Why can't\ngrunt dumpCache, grunt actionsList, etc be implemented in grunt?\nEquivalently, we already have npm test, and jake jshint could be\nimplemented just as well\n\nEvan Tahler\n 412.897.6361\n evantahler@gmail.com\nOn Tue, Dec 10, 2013 at 11:53 PM, Bryan Tong notifications@github.comwrote:\n\n@evantahler https://github.com/evantahler So now I just want to figure\nout what else should be done.\nOkay, I have read through the Jake file etc and I think Jake is the right\ntool what you are trying to accomplish. Grunt is more of a dev tool for\nrelease building and running tests etc and should remain on the dev\ndependencies.\nCurrently I have following implemented.\n- grunt test -- Runs tests with fakeredis for fork environments\n- grunt testProduction -- Runs tests against a live Redis server for\n  E2E tests\n- grunt update -- Basically does npm install / update / prune\n- grunt jshint -- Lint the whole project\nThe items defined in Jake seem to me like they happen as part of the\nactual program.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionHero/pull/278#issuecomment-30300801\n.\n. Travis fails every 1/20 test or so, and I have yet to figure out why.  I re-ran your suite and it was OK.  If you are ready to merge, please rebase on master, and let me know! \n. nice work! A few minor notes:\n- you can remove jake (package) the Jakefile.js and jakelib from the project :D\n- guithub makes it a little hard to tell in the PR, but I think you also removed the license submodule here\n- why did you change the package requires from \"1.x.x\" syntax to \"~1.1.1\"?  I'm generally assuming NPM authors follow the semver rules which mean that a minor version bump shouldn't break anything.  If that's true, wouldn't we always want the latest compatible version (1.0.x?)?\n- looks like you left in a debugging console.log\n\nGood notes on the tests! \nOnce these are changed, I'll merge this in and update all the docs\n. hmm, but wouldn't ~1.1.1 denote that NPM should prefer 1.1.1 over 1.1.9 (which would be assumed by 1.1.x)?\n. Cool (I learned something!).\nI'll merge and sort out the submodule in master.\nThanks! \n. I'll append any relevant fixes here (ignoring sorting out the submodule) \n. https://github.com/evantahler/actionHero/commit/6671ce3c947aa437ca63d36c8b2f0bb3386e9881\n. This one is a big one: https://github.com/evantahler/actionHero/commit/bbed877c7654ac3ec148fdf1b43e3b9bff3ba1a7\nIt looks like your cache tasks were out of date and you weren't properly loading in command line options (taskName, file, etc)\n. cool, I got caught up in another section of the docs.  I'm used to jake clearly telling me the options and how to pass them.  Reverted here https://github.com/evantahler/actionHero/commit/187a0e0ce822a1b018f786f2be44792163f9e637\nI also wanted to provide a sample gruntfile for new projects, so I separated the common AH bits and used them in the generator https://github.com/evantahler/actionHero/commit/49626855d02fb73e0850beadf1f40419c8091a92\n. And here's the doc update https://github.com/evantahler/actionHero/wiki/_compare/f6d5bc7a8c6b9793c97143429ef7f4e33135f229...9ad36a7217ccaa3c352b136bf61d262996e166c4\n. And.... announced. https://groups.google.com/forum/#!topic/actionhero-js/IB3gWfs1k_Y\nI think this issue is closed.\nThanks again! \n. closing in favor of https://github.com/evantahler/actionHero/pull/288\n. Flipping the inequalities around is likely to be OK in all cases, but replacing == with === will probably cause some problems.  \nIn general, we usually mean to check \"is this value undefined OR null\", hence the looser ==.  This tends to make a nicer API.  This only applies to checking properties of objects.\nHere's an example:\n``` javascript\n\no = {}\n{}\no.callback\nundefined\no.callback == null\ntrue\no.callback === null\nfalse\no.callback = null\nnull\no.callback == null\ntrue\no.callback === null\ntrue\n```\n\nIn many cases we want to \"loosely\" check if an object has a certain properly.  For example if(null === api.config.general.id) will probably never happen, as you will either define config.general.id or forget it.  I doubt anyone would set it to null explicitly in config.js\nEven if you switch the comparator to undefined, you still have the same problem\n``` javascript\n\no = {}\n{}\no.callback\nundefined\no.callback == undefined\ntrue\no.callback === undefined\ntrue\no.callback = null\nnull\no.callback == undefined\ntrue\no.callback === undefined\nfalse\n```\n. Yes, that would be better! \nThank you!\n. Hey @Spudz76 do you need any help with this?\n. I'm going to close this out as there hasn't been activity in a while.  If you are still interested, I'm happy to reopen.\n. Hi!\n\nCan you explain a little more about why you want to clone the template?  I'm assuming because you expect the connection to modify the template... but why?  What state information about the request can you not attach to the connection directly?\nWe do something similar to the connections themselves, as we know that the state of a persistent connection (websocket, tcp) is likely to change throughout an action, so we 'snapshot it' into the proxyConnection at the start of each action.  This allows for parallel actions to be run for a single connection.\nIn general, I would rather not include underscore.  It's a heavy library and cloning a hash is simple with something like: \njavascript\nvar proxyTemplate = {};\nfor(var i in actionTemplate){\n    if(actionTemplate.hasOwnProperty(i)){\n      proxyTemplate[i] = actionTemplate[i];\n    }\n}\n. With https://github.com/evantahler/actionHero/issues/275 closed (and released), @macrauder did the right thing and filed a new bug.\nIt looks like we need some special case handling for this.  I can reproduce this locally on OSX by binding to \"::\" and connecting to 127.0.0.1.  Patch incoming shortly.\n. I believe that in the case where IPv4 connections are transported over an IPv6 binding (which looks like what is happening here), the prefix will always be \"::ffff:\", like you have in your example, and as I see on localhost (::ffff:127.0.0.1).\nIf that's true, all we should need to do is this https://github.com/evantahler/actionHero/commit/d1802065a2a270904478a474f506c13ee72c5be1\n. I personally don't yet have any application that uses IPv6, so I don't have a strong opinion on how much of the spec to build in to actionHero.  \nI'm hoping by the time a large number of people require IPv6 (and complex proxy situations), there will be packages which can help us out here.  My current goal is to get the bare minimum feature set we need (just remote IP and port detection) working for most people.    As more feature-requests/bugs come in, we can look at adding in a support module.\nIf anyone wants to bring over a bette IPv6 solution now, that's also fine :D\n. I was able to steal some time on a windows VM, and it looks like these\nerrors are due to fakeRedis on windows.  If you change the test suite to\nrun on a remote redis server (I couldn't get redis to run on windows),\neverything looks to be fine.  This makes sense when you consider that the\nerrors above only appear when the test involves redis (cache, chatRooms,\netc).\nI can't narrow down anything specific about fake redis that's wrong in\nsimple tests.  It might be an interaction with faye?\nOn Wed, Dec 11, 2013 at 12:01 AM, Bryan Tong notifications@github.comwrote:\n\nI know not a lot of developers run node in Windows but I happen to and I\nget some interesting results trying to test and run actionHero on Windows.\nIf I am running Node 0.8.9 I can get all the tests to pass in my fork\nafter modifying the cache timeouts. Most notably fakeredis on Windows is\nincredibly slow. Thus, the time sensitive testing of cache expiration fails.\nNow the really weird part is that when I go to Node 0.10.22 I get the\nfollowing failures:\n166 passing (2m)\n  1 pending\n  11 failing\n1) Server: Socket really long messages are OK:\n     Error: timeout of 2000ms exceeded\n      at null. (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_m\nodules\\grunt-mocha-test\\node_modules\\mocha\\lib\\runnable.js:165:14)\n      at Timer.listOnTimeout as ontimeout\n2) Server: Socket actions will work once all the needed params are added:\n     Error: timeout of 2000ms exceeded\n      at null. (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_m\nodules\\grunt-mocha-test\\node_modules\\mocha\\lib\\runnable.js:165:14)\n      at Timer.listOnTimeout as ontimeout\n3) Server: Socket chat clients are in the default room:\n     Error: timeout of 2000ms exceeded\n      at null. (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_m\nodules\\grunt-mocha-test\\node_modules\\mocha\\lib\\runnable.js:165:14)\n      at Timer.listOnTimeout as ontimeout\n4) Server: Socket chat rooms can be changed:\n     Error: timeout of 2000ms exceeded\n      at null. (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_m\nodules\\grunt-mocha-test\\node_modules\\mocha\\lib\\runnable.js:165:14)\n      at Timer.listOnTimeout as ontimeout\n5) Server: Socket chat connections in the first room see the count go down:\n     Error: timeout of 2000ms exceeded\n      at null. (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_m\nodules\\grunt-mocha-test\\node_modules\\mocha\\lib\\runnable.js:165:14)\n      at Timer.listOnTimeout as ontimeout\n6) Server: Socket chat folks in my room hear what I say (and say works):\n     Error: timeout of 2000ms exceeded\n      at null. (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_m\nodules\\grunt-mocha-test\\node_modules\\mocha\\lib\\runnable.js:165:14)\n      at Timer.listOnTimeout as ontimeout\n7) Server: Socket chat folks NOT in my room DON'T hear what I say:\n     Error: timeout of 2000ms exceeded\n      at null. (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_m\nodules\\grunt-mocha-test\\node_modules\\mocha\\lib\\runnable.js:165:14)\n      at Timer.listOnTimeout as ontimeout\n8) Server: Socket chat Folks are notified when I join a room:\n     Error: timeout of 2000ms exceeded\n      at null. (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_m\nodules\\grunt-mocha-test\\node_modules\\mocha\\lib\\runnable.js:165:14)\n      at Timer.listOnTimeout as ontimeout\n9) Server: Socket chat Folks are notified when I leave a room:\n     Error: timeout of 2000ms exceeded\n      at null. (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_m\nodules\\grunt-mocha-test\\node_modules\\mocha\\lib\\runnable.js:165:14)\n      at Timer.listOnTimeout as ontimeout\n10) Server: Socket chat can join secure rooms when applicable:\n     TypeError: Cannot read property 'id' of undefined\n      at Context. (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\tes\nt\\server_socket.js:337:52)\n      at Test.Runnable.run (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_\nmodules\\grunt-mocha-test\\node_modules\\mocha\\lib\\runnable.js:194:15)\n      at Runner.runTest (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_mod\nules\\grunt-mocha-test\\node_modules\\mocha\\lib\\runner.js:358:10)\n      at C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_modules\\grunt-mocha\n-test\\node_modules\\mocha\\lib\\runner.js:404:12\n      at next (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_modules\\grunt\n-mocha-test\\node_modules\\mocha\\lib\\runner.js:284:14)\n      at C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_modules\\grunt-mocha\n-test\\node_modules\\mocha\\lib\\runner.js:293:7\n      at next (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_modules\\grunt\n-mocha-test\\node_modules\\mocha\\lib\\runner.js:237:23)\n      at C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_modules\\grunt-mocha\n-test\\node_modules\\mocha\\lib\\runner.js:256:7\n      at done (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_modules\\grunt\n-mocha-test\\node_modules\\mocha\\lib\\runnable.js:185:5)\n      at C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_modules\\grunt-mocha\n-test\\node_modules\\mocha\\lib\\runnable.js:197:9\n11) Server: Socket chat cannot join secure rooms when missing attributes:\n     TypeError: Cannot read property 'id' of undefined\n      at Context. (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\tes\nt\\server_socket.js:346:52)\n      at Test.Runnable.run (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_\nmodules\\grunt-mocha-test\\node_modules\\mocha\\lib\\runnable.js:194:15)\n      at Runner.runTest (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_mod\nules\\grunt-mocha-test\\node_modules\\mocha\\lib\\runner.js:358:10)\n      at C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_modules\\grunt-mocha\n-test\\node_modules\\mocha\\lib\\runner.js:404:12\n      at next (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_modules\\grunt\n-mocha-test\\node_modules\\mocha\\lib\\runner.js:284:14)\n      at C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_modules\\grunt-mocha\n-test\\node_modules\\mocha\\lib\\runner.js:293:7\n      at next (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_modules\\grunt\n-mocha-test\\node_modules\\mocha\\lib\\runner.js:237:23)\n      at C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_modules\\grunt-mocha\n-test\\node_modules\\mocha\\lib\\runner.js:256:7\n      at done (C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_modules\\grunt\n-mocha-test\\node_modules\\mocha\\lib\\runnable.js:185:5)\n      at C:\\Users\\nulli_000\\WebstormProjects\\actionHero\\node_modules\\grunt-mocha\n-test\\node_modules\\mocha\\lib\\runnable.js:197:9\nI havent really dug into this yet but I plan on it so I wanted to track\nthe issue here. And see if anyone else has some thoughts,\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionHero/issues/285\n.\n. Heh, I find 2 min to be a ridiculously fast test suite! I think Rails' is around 20 min (single run; single ruby).  I know the test suite can be deeper... there are a lot of error conditions that aren't yet fully tested. \n\nI'm a little confused how the test suite won't boot the environment if you explicitly tell it to in a before like this.  Before's fire even if you only grep for a single test in mocha, IE: NODE_ENV=test mocha test/action_cacheTest.js -g \"just key\"\nSure, its common to split test suites into unit and integration (what you call end-to-end).  The reason I haven't done that is that I think over 75% of all the tests are technically integration tests.  Basically anything that involves a client or request is likely to be an integration test.  We are an API framework after all :D \nAs I personally don't use watch (1/2 the time I've deleted and renamed entire initializers), I guess all that I care about it that npm test runs the entire suite.  Please use the term integration rather than e2e.  Perhaps whatever you are using for watch can take some flags?  watch --all, watch --unit, etc?\nThere's probably a third type of test about environment tests.  These tests would include the developer mode tests that ensure new files get loaded in, and perhaps some tests about the way files are loaded from paths.  I think the benchmarks probably fit here too.\nI don't have an opinion on the chai vs should argument.  They both appear to be equally popular and do about the same thing.  If you want it, go for it!\n. solves https://github.com/evantahler/actionHero/issues/279\n. Hi TJ- \nI believe this PR is to add support for actionHero serving static assets differently for different http domains.  Can you explain why you did this only for static assets and not the API server as well?  Personally, I think that supporting more than 1 domain natively is a bit confusing for new commers, but It would be best to offer equivalent support (api + static files) either way\nNotes on this PR specifically:\n- please ensure the test suite passes (your fle path changes broke some requires)\n- please don't change the default port to '80', as in most envs you don't want to run actionHero as root\n- there are a few file you checked in, like s that I'm guessing you didn't mean to\n. good work on getting tests green!\nAs you point out, doing any domain logic on actions at all will be fairly complex.  I personally feel that this kind of logic belongs in nginx or a load balancer... upstream in either case.  However, as long as this kind of thing doesn't overcomplicate the framework too much, I'm willing to consider it \nIt looks like there are 2 categories of work that seem a bit off to me:\n1) connection.rawConnection.req.*\nIn actionHero, you can't assume that your client is always an HTTP client.  The socket client types are able to request file data as well.  Baking that assumption into staticFile.js is going to blow up for 2/3 the provided connection types.  I would suggest going the route of having the server (web.js, websocket.js, socket.js) append connection.domain as part of each new connection being created.  You can use the same logic for HTTP clients, and you can create a verb for the others.  Something like setDomain would work.\n2) config.js\nSimply because I think folks will find this confusing, I think we can get away without creating any new options here.  I would suggest doing some type inspection on api.config.general.paths.public.  If the type is 'string', serve assets for all domains from the string path.  If the type is a hash, it should be of the form {'regExp_key': file_path}.  So you could define something like this:\njavascript\napi.config.general.paths.public = {\n  \"^.*site\\.com\": __dirname + '/../public/site.com',\n  \".*\":          __dirname + '/../public/default',\n}\nYou can match domains in order, so that \"stuff.site.com\" would match the first asset folder, and anything else would fall through to the wildcard matcher at the end\nIn this way, the 'simple' config doesn't change at all.\nThoughts?\n. Oh, and if you end up making connection.domain, I would suggest you use a middleware in your exploration of cross-domain actions.  You can key each action with action.allowedDomains = [] or similar and compare the connection to it\n. @macrauder I'm personally still generally against the idea of multi-domain support due to how confusing this could get.  The matrix of things to think about when debugging gets pretty complex ([web, socket, websocket] x [action, task] x [domain^n] x etc)  Because my worry is about complexity, the implementation details really matter. I plan to keep quiet until there's some code to look at.\nIn general, I would reiterate what I suggested above, that is trying to append the notion of site or domain on to the connection object by each of the servers/verbs, and making all your choices from there.  @TJKoury I'm not too concerned about any slowness created by regexp, as we use something similar in the router and it's not too bad.  It's also an opt-in feature, so for the 'average' user, it won't even come up.\nI like @macrauder's suggestion on changing the type or api.routes.routes form a hash (single site) to an array (multi site).  Just like my suggestion for api.config.general.paths.public, this would not require any changes for the single-site use case, and we could use the same regexp logic to pick the proper site. (probably move it into a api.util as a few modules will use it).\nYou are correct that routes are only for http clients, but this would still work for the rest.  websocket clients would need to use the verb: A.setDomain(window.location.origin) and TCP sockets would need to do the same (which is OK).\n. I would think that the opposite behavior would be expected.  If I don't define a api.config.servers.web.urlPathForActions, then I would expect no URLs to result in an action being called at all.\nIf you are, in general, trying to set up actionHero so your action's respond at the \"top-level\" of your site, just switch api.config.servers.web.rootEndpointType to \"api\" rather than \"file\".  This would return www.site.com/status to the status action, etc.\n. Would you mind sharing your whole server implementation?\nI don't have any experience with AWS opsworks, but this might be something on their end.  Have you tried deploying a vanella actionHero server?  Since you are seeing this shutdown at almost exactly 1 minute, perhaps they have some policies against long-running processes, or that request from localhost is a health check service and will kill off the process if it doesn't get the proper response. \nAs a note, rather than re-implament the server, you can do the type of auth checks you show here in a middleware, which might be simpler.\n. https://github.com/faye/faye/issues/267\n. https://github.com/maxogden/node-concat-stream/issues/17\n. Yep, I agree.  Thanks! \n. Removing node v0.8.x from the test suite (travis) until Faye is upgraded.\n. Can you be sure that you are running of the latest version of actionHero?  That bug was present earlier, but should be fixed in v7.4.1 (7.4.2 is current)\n. Here's the commit: https://github.com/evantahler/actionHero/commit/96ae1ca77605662ebfd9f3a27c2229f6cc7639e7\nI'll close this for now, and we can re-open if you are still having trouble. \n. I agree that the action and task loaders are similar enough that they can be combined to a single loader (which would be nice to have!)\nI think you might be asking for a way to include mini actionHero \"extensions\" into a larger project, which is generally what we talk about here.  The notion if to be able to include extensions either by NPM or path, each with their own servers/actions/tasks/initializers.  If so, that's the next big thing to add to actionHero which will kick off version 8 :D\nIf you are asking for something else, I guess I'm missing it... would you provide an example?\n. Adding this option is OK.  Please also add it into config.js defaulted to false with a comment explaining it.\nThis PR made me realize that we aren't properly whitelisting params in servers other than web (as you point out).  This commit adds that safety to other servers and the actionProcessor in general.  The bad news is that you'll have a bit more work to do, but the commit illustrates all the places you will need to add a check for your new setting.\n. Looking good!\n. closing this out in favor of the PR\n. solved by https://github.com/evantahler/actionhero/pull/300\n. A  new issue to remember to delete the old repo: https://github.com/evantahler/actionhero/issues/301\n. And... DELETED.\n... so sad.\n. Whoops! Thanks.\nI expect a few more bugs to appear due to the rename.  Working on a case-insensitive file system (OSX) isn't helping either :/\nI will force-update the current version on NPM. \n. A very good idea.  I'll take a look at it\n. This should work.  I followed the Rails conventions https://github.com/evantahler/actionhero/commit/c603ad947e16138c7f922d7489db48f354a05992\n. This will prevent that going forward.  Good catch! It looks like we weren't properly exiting the action's domain while we callback.\n. I'm going to guess that these issues are related to https://github.com/evantahler/actionhero/issues/305 (whcih I think I just sorted out).\n. I'm going to close this, but please open another issue if something continues to pop up\n. I like where you are going with this! good work!\nA few thoughts:\n- Rather than require(common/commonLoader), I would suggest making commonLoader a prototype so you could do something more like api.actions = new api.commonLoader(path);  This way, we can load in actions (etc) from more than one place.  This will be really useful when we allow folks to load in actions from both their own local project and \"extension\" modules.\n- Its going to be important to not overwrite api.actions entirely, but rather append to them if they already exist.  I can imagine using this loader on a few directories loading in lots of actions.  speaking of, It's probably best to assume that api.config.general.paths.actions will become plural\n- You have this loader working for actions and tasks... think you can extend it to servers and initializers?  If you can do that then we have one awesome tool to load in the whole application... which would be awesome.\nLet me know if you want to keep working on this.  If you don't have the time, I'll move your work into a branch and keep at it.\n. Looks like you are moving quickly! \n- Yes, there should only be one \"actions\" loader, but it should be able to look for actions in a number of directories.\nRegarding load order, there are 2 things that influenced the current design which I want to keep:\n- actionhero's 'core' should always be loaded before userland\n  - this is so that we can guarantee a consistent state to userland (IE: ensure that api.log exists as a method, ensure that api.actions exists as a hash, etc).  This also allows userland to replace those methods if they want to change them (which has been valuable... say I want my logger to send notes to S3 rather than $stdout or something).\n  - Since an consistent api module state should be consistent to userland, the code modules should be the only modules that are allowed to enforce load order.  (hence why initializers don't have a _priority attribute like they used to).  I guess we can bring that back if it makes things easier... totally up for discussion.  This might be simpler than your regex idea... \n- there is a separation between 'loading' and 'initializing'\n  - All loading should happen before all _start() methods are called, including those in userland.  This is how we can handle cross dependances around intilizers.\n  - actionhero.init() will load all initializers, but not call _start() on them.  That is what actionhero.start() does :D.  There's a valuable separation there for testing, grunt, etc. \n. Yeah, _complete is my notation for 'the last callback in a series'.  The\nonly thing that actually maintains the order is the order in which the\nfunctions were added to the collection.\n\nEvan Tahler\n 412.897.6361\n evantahler@gmail.com\nOn Mon, Feb 3, 2014 at 11:15 AM, TJKoury notifications@github.com wrote:\n\nI'm still working on it, trying to fit the paradigm to everything that\ngets loaded from a folder, including initializers themselves.\nI can't find anywhere in the 'async' documentation where '_complete' is a\nspecial key for execution after an ordered hash, is this something that you\nadded or is my search-fu weak?\n\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionhero/pull/307#issuecomment-33988889\n.\n. nowhere! In general with async if you have a hash of functions with\ncallbacks, async.syries will exec them in order:\n\n``` javascript\njobs = {\n  a: function(done){ done(); },\n  b: function(done){ done(); },\n  c: function(done){ done(): }\n}\nasync.series(jobs);\n```\n. Thanks for all your work! This is starting to look good!\nI'll add some thoughts in-line.\nGlobal Thoughts:\n- I think at this point all api.confg.general.paths should be made plural, to indicate that you can define many of them. \n- This implies that inherited loaders like api.tasks.initialize() should assume they are being passed an array of paths\n. Yep! That's exactly what the separation is for :D\nJust be sure that anything that happens at load-time should be OK in an\nenvironment where the servers might not be enabled, like running tests or\nwithin a grunt task.  For example, loading in all the actions and tasks\nmakes sense, but running a task worker does not.\n\nEvan Tahler\n 412.897.6361\n evantahler@gmail.com\nOn Mon, Feb 10, 2014 at 12:31 PM, TJKoury notifications@github.com wrote:\n\nI've noticed that even though the '_start' method is called on all objects\nattached to the core 'api' object (if it exists), some initializers don't\nfollow this convention, and are in fact started at load time. I've playing\nwith the idea of, for example, putting a _start method in 'actions' that\nwill call the 'initialize' function and then 'next()', just so the order of\nexecution for all of these initializers is predictable and well-defined.\nWhat do you think?\n\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionhero/pull/307#issuecomment-34678665\n.\n. Ok, good luck! \n. api.config.servers.web.httpHeaders refers to any extra response headers actionhero will send to the client.  You can read the whole collection of headers that actionHero will respond to a web client with via connection.rawConnection.responseHeaders.  An example would look like:\n\njavascript\n[\n  [ 'Set-Cookie', 'sessionID=f12772e60354389f7f9c6ff0ac1987bf8b45f026;path=/;' ],\n  [ 'Transfer-Encoding', 'Chunked' ],\n  [ 'Content-Type', 'application/json' ],\n  [ 'X-Powered-By', 'actionhero API' ],\n  [ 'Access-Control-Allow-Origin', '*' ],\n  [ 'Access-Control-Allow-Methods', 'HEAD, GET, POST, PUT, DELETE, OPTIONS, TRACE' ],\n  [ 'Access-Control-Allow-Headers', 'Content-Type' ]\n ]\nIf you want to read the headers your client reached the server with, you can read those via connection.rawConnection.req.headers, IE:\njavascript\n{ host: 'localhost:8080',\n  connection: 'keep-alive',\n  cache-control: 'max-age=0',\n  accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n  user-agent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36',\n  accept-encoding: 'gzip,deflate,sdch',\n  accept-language: 'en-US,en;q=0.8',\n  cookie: 'sessionID=830fb16073acda5d26ea721f85d5a4e6d858f638;'\n}\n. You can create a simple test to ensure that headers are being applied properly:\nMake an action that will respond to the client with the headers it received: \n``` javascript\nexports.action = {\n  name:                   'header',\n  description:            'header',\n  blockedConnectionTypes: [],\n  outputExample:          {},\n  matchExtensionMimeType: false,\n  version:                1.0,\n  toDocument:             true,\n  inputs: {required: [],optional: [],},\nrun: function(api, connection, next){\n    connection.response.headers = connection.rawConnection.req.headers;\n    next(connection, true);\n  }\n};\n```\nAnd if I curl with some non-traditional headers: \nbash\ncurl -X GET -H \"x-somHeader: name/pass\" -H \"my Crazy Header:12abc\" \"localhost:8080/api/header\"\nThey are logged properly:\n``` javascript\n\"headers\": {\n    \"user-agent\": \"curl/7.30.0\",\n    \"host\": \"localhost:8080\",\n    \"accept\": \"/\",\n    \"x-somheader\": \"name/pass\",\n    \"my crazy header\": \"12abc\"\n  },\n  \"serverInformation\": {\n    \"serverName\": \"actionhero API\",\n    \"apiVersion\": \"0.0.1\",\n    \"requestDuration\": 0,\n    \"currentTime\": 1390717614810\n  },\n  \"requesterInformation\": {\n    \"id\": \"af7463775da4f8ebfd0876a24739beae122010cd\",\n    \"remoteIP\": \"127.0.0.1\",\n    \"receivedParams\": {\n      \"action\": \"header\",\n      \"limit\": 100,\n      \"offset\": 0,\n      \"apiVersion\": 1\n    }\n  }\n}\n```\nA reminder that headers are supposed to be case-insensitive, and lower-cases all headers\n. You are getting into a dangerous place.  CORS (dealing with cross-origin) has the purpose of restricting access to a domain, especially with auth, and you are actively trying to skip this step.  That's why the spec doesn't allow auth with a *Allow-Origin.  JSON-p is usually better suited as a protocol for multi-domain access...\nBut, of course, you can do dangerous things if you want :D\nI won't bake something like this into actionhero's core, but you can easily write a middleware that will respond with the request domain as the Allow-Origin:\njavascript\napi.actions.postProcessors.push(function(connection, actionTemplate, toRender, next){\n  if(connection.type === 'web'){\n    var host = connection.rawConnection.req.headers.host;\n    if(host != null){\n      host = host.split(\":\")[0];\n      connection.rawConnection.responseHeaders.push(['Access-Control-Allow-Origin', host]);\n    }\n  }\n  next(connection);\n});\n. Ahh! Yes.  respondToOptions doesn't follow the action chain... because that HTTP verb can't run an action.  I get it now :D\nI guess we have 2 choices here:\n- make OPTIONS follow the full actionProcessor chain with some sort of null action\n- make api.config.servers.web.optionsHandler = function() so that you can override default behavior.\nI don't really like either options because 1) OPTIONS is a special kind of request, and 2) There already is logic in respondToOptions to handle some special cases (*, etc)... it just doesn't work for multiple domains.\nThoguhts?\n. Well, we already have connection middleware, which is invoked regardless of if an action is called.  I think this is a good solution.  \nThe connection middleware already fires before the server runs respondToOptions, but we were ignoring anything it might have done and replacing headers.  Now you can make a middleware like the one below to change the headers however you want, and respondToOptions will respect it.\njavascript\napi.connections.createCallbacks.push(function(connection){\n  if(connection.type === 'web'){\n    var origin = determineOrigin(connection); // however you want this to work\n    connection.rawConnection.responseHeaders.push(['Access-Control-Allow-Origin',origin]);\n  }\n});\n. https://github.com/evantahler/actionhero-angular-bootstrap-cors-csrf\n. Heh, I spent some time looking up how other projects handle this, as technically JSON should always be encoded/parsed as UTF-8, and all servers and browsers should default to that encoding.  Sending the encoding seems to be a bit of a holy war in other projects, so... I'll choose to be \"safer\" over \"terse\".\nMerged! \n. I don't see anything changed?\n. Oops, I mean that I don't think that is a change?  If the strings are equal, it won't mater? \n. Ah! Good catch! \nHere's a test to lock this in going forward.  Thanks! \n. No there are no options to change what the generator builds.  In newer versions, we only generate one action (status) and one task (runAction).  I guess we can remove the task, but I think we should keep the action.\nThoughts?\n. There are some tutorials that expect the status action, but I'll remove the task.  Thanks! \n. true! \nThanks.\n. It depends on how you post it really:\n- If you post 1 payload as a \"body\", we'll try to parse the body, and\n  nested JSON should appear parsed as you are looking for.\n  --  EX: curl -X POST -H \"Content-Type: application/json\" -d '{\"thing\":\n  \"fromBody\"}' \"http://api.com/api\"\n- If you post the JSON as a real param, it will come in as a stingified\n  JSON blob, and you just need to call JSON.parse at the top level.\n  -- EX: curl -X POST -H \"Content-Type: application/json\" -d\n  'contact={\\\"key\\\"=\\\"value\\\"}' \"http://api.com/api\"\n  -- Then you would need to do connection.params.contact =\n  JSON.parse(connection.prams.contact)\n  -- Now you can do connection.params.contact.key\n. Ahh! Thanks for the clarification. \nRight now, there is no support for nested params in actionhero.   There are also other types of nesting as common as collection[thing][stuff].  Rails uses collection_thing_stuff and some python frameworks have made collection.thing.stuff common.  \nIn this commit I've moved the part of the actionProcessor which errors a connection for not having all of the required params to after middleware execution.  This means that all the params will be available to a middleware you might write to parse this kind of nesting.  In your example, connection.params will look like:\njavascript\nconnection.parms = {\n  \"contact[name]\": \"Evan\",\n  \"contact[address][line_one]\": \"line 1\",\n  \"contact[address][line_two]\": \"line 2\"\n}\nA new note I added to the wiki:\nNote: preProcessor action middleware will be executed before connections have their params filtered. This means that you will have access to all the request's input at connection.params. Extra caution should be used.\n. Also, I'm hesitant to add param parsing to actionhero which chooses a type of nesting (as all 3 of the examples above are \"popular\").  However, I would accept a PR that allows for a user-configurable nesting parser.\n. will be solved via https://github.com/evantahler/actionhero/pull/711\n. No, actionHero does some strict enforcement on files to ensure they reside within the public folder.  \nYou might try moving the file or symlinking /uploads within /public\nI would welcome a PR which allows for more than one public folder (change api.config.general. paths. public (really all of the paths) to arrays.  This is being worked on here https://github.com/evantahler/actionhero/pull/307\n. Thanks for pointing this out! \nThe generator ./node_modules/.bin/actionhero generate does create a README.md, but it is blank.\nI don't want to add back an empty file in initializers, and we have also removed the example task, which I imagine would cause the same problem.  Rather than adding a .gitinclude, I've updated the loader to just move on if the initializer folder defined in config.js is missing (with a warning).\n. @guillegette the weirdest part with your sendgrid array payload with Content-Type: application/json is that it becomes parsed as a hash, not an array.  For example {\"0\": \"a\", \"1\": \"b\"} rather than ['a', 'b'].  \nTo handle this, we'll need the new helper api.utils.collapseObjectToArray.  I really don't want to incur this extra load on every request.  Have any better thoughts on how to detect this \"exploded\" array?\n. It's probably safe to assume that no one will post an array JSON body without the content-type, so I think we can loose the if(varsHash[key] == null || varsHash[key] == '') bit\n. Sure (https://github.com/evantahler/actionhero/commit/ad526a9556427eadccff70132c15066838ba0f73), but be aware with large response bodies you will likely end up with a truncated result (https://github.com/evantahler/actionhero/issues/189)\n. What do you believe is wrong with the Content-Length header?  \nThe node docs all advise calculating Content-Length via the method we are using (Buffer.byteLength()).   I also imagine that a number of other http client libraries would have had problems by now if there was something wrong.  \nDo you have an example of the string you are trying to send?  Perhaps it isn't UTF8 encoded?  Try removing the utf8 argument, and let me know if that helps.\n. Ahh! Yes, you are correct.  \nI believe that technically we should be doing this.  If we are sending a string (API response), we can set the content-length, and for files (which we are streaming to the user), we should be using transfer-encoding: chunked\n. Thoughts?\n. Thanks for all the links.  (after lots of reading and discussions) I think you are correct, and in most cases content-length is the way to go.  I'll rever that change here\nInitially, the reason actionhero had chunked transfers is that we had seen problems sending large files to the client, as the time it it was possible to send \"chunks\" to the client at variable speeds.  Chunked transfers tended to be more forgiving of partial/sectional transfers in this case, but that was before streams2 in node.  Now with streams2, I haven't seen that problem come up.\n. https://github.com/evantahler/actionhero/commit/a81074c79029ad98ca170c62f0d44399ceb41c57\n. https://github.com/evantahler/actionhero/commit/b60079cd9bda0b1a44eabab546d60a78bb464bfc\n. \n. I believe this is already handled here https://github.com/evantahler/actionhero/blob/master/initializers/actionProcessor.js#L22\nWe are making some changes in general to paramScrubbing here https://github.com/evantahler/actionhero/pull/318 which should be merged in soon\n. cool.  https://github.com/evantahler/actionhero/commit/f83f97a879f3d8168b7f091091dca2846bd532b8\n. Thanks! \nYep, that was out of date.  Here's the update.  https://github.com/evantahler/actionhero/commit/b9f999936328b51d4d110d5c7bb074f793ba4392\n. Closing this issue in favor of the PR\n. This issue is very similar to the one discussed in https://github.com/evantahler/actionhero/issues/314\nThere are a number of \"nested param\" schemes that have been developed over the years, as querystring data is inherently 1-dimensional.  Some folks like the thing.stuff approach, while others like the thing[stuff] method.  I don't want to force a choice about nesting type to keep Interoperability high, but actionhero will allow you to create a middleware to modify connection.params however you like before reaching your action.\nYour data will look like this in to a connection preProcessor: connection.params = { 'filter[email]': 'a@b.com', 'filter[name]': 'John' } \n. Have you played with the logger levels?  Note that some of those logging events are \"info\" while others are \"debug\".  actionhero projects start at the \"debug\" log level so you won't miss anything, and it is meant to be absurdly verbose.  Change debug to info here and that should help.\nOther than log levels, what other options would you like to see?\n. actionhero will write its pid to a pidfile in the normal unix way.  The path for the pidfile is set in config.js with config.general.paths.pid.  \nIndividual actionhero servers will name their pidfiles by api.id, which is determined by the logic here and here.  For example, on my laptop with the IP address of 192.168.0.1, running npm start would run one actionhero server and generate a pidfile of ./pids/actionhero-192.168.0.1 in which would be a single line containg the process' pid.\nWhen running the cluster, the cluster process first writes his own pidfile to process.cwd() + './pids/cluster_pidfile'.  Then, every worker the cluster master creates will have a pid like actionhero-worker-1 in the location defined by config.js.\nSo, to send a signal to the cluster master process to reboot all its workers (USR2), you can cat the pidfile (bash):\nkill -s USR2 `cat /path/to/pids/cluster_pidfile`\nIf you want to setup a git-based deployment, the simplest steps would be something like:\n``` bash\n!/usr/bin/env bash\nassuming the actionhero cluster master process is already running\nDEPLOY_PATH=/path/to/your/application\ncd $DEPLOY_PATH && git pull\ncd $DEPLOY_PATH && npm install\nrun any grunt tasks here, like perhaps an asset compile step or a database migration\ncd $DEPLOY_PATH && kill -s USR2 cat pids/cluster_pidfile\n```\nThats it! \n\nNote: The cluster pid names were recently updated here and are not yet this way on NPM\n(I'll add this to the wiki)\n. https://github.com/evantahler/actionhero/commit/ddc61ea258194a58677c9945742694a1061f3690\n. binaryjs looks cool!  \nThe existing websocket driver for actionhero is faye, and I doubt that it would do well with binary data.  Faye is geared more towards smaller strings, and our implementation uses redis heavily for multi server support (and wouldn't handle large binary chunks well). I would suggest creating your own server type with binaryjs to run in concert with the existing faye server.\n. As you mention, nodemon (and others) are a great tool to restart your application upon changes, and you can use it with actionhero if you want nodemon ./node_modules/.bin/actionhero start\nactionhero's development mode is a little different, in that it tries hard not to restart the server process.  Changes to routes, tasks, and actions can simply replace those in memory when they are updated on disk.  Other changes, like changes to config.js or initializers are more severe, and will restart the whole application (much like nodemon).  \nBeing that actionhero supports persistent connections, it is important to not disconnect the clients whenever possible (which is very likley to happen if the server was to restart).\n. If you are looking for a generic way within actionhero to watch for a file and reload, you can do that like this:\njavascript\napi.watchFileAndAct(path_to_file, function(){\n  api.log(rebooting due to config change: ' + path_to_file, 'info');\n  delete require.cache[require.resolve(path_to_file)];\n  api.commands.restart.call(api._self);\n});\n. some updates: https://github.com/evantahler/actionhero/commit/ec9d61f97117dc7790b3a18c130d225b5f7b5942\nand a wiki entry: https://github.com/evantahler/actionhero/commit/74ac03341bf92b46105d384d4f1ddaefe7f68e9a\n. https://github.com/evantahler/actionhero/commit/471ff24dce47549586c6358541e78909ed8cb4bf\n. No problem!\nIf you are looking for a reference implementation of a TCP client for actionHero, check out https://github.com/evantahler/actionhero_client. It's for node, but the principals should be the same (how to handle more than one simultaneous action, errors, etc)\n. Yeah, there are still quite a few things broken in node on windows (process.spawn path resolution, passing environment variables, etc).  This should help https://github.com/evantahler/actionhero/pull/338/files\n. Check out api.specHelper.runTask\nhttp://actionherojs.com/wiki/ops/testing.html#apispechelperruntasktaskname_params_callback\n. And here is actionhero using it internally https://github.com/evantahler/actionhero/commit/7d7c9b8f29df843e7d42b7e1ebf9b6ac405da376\n. Thanks! https://github.com/evantahler/actionhero/commit/8785b1a410b5b82e1d727cce07a93a274bcc4291\n. Thanks! \n. Thanks!\n. @TJKoury this PR doesn't have any of your common loader fanciness, but I think this is a good way to start allowing for a plugin system.  What are your thoughts?\n. The a plugin is a package published to npm you can include in your actionhero projects.  It can contain actions, tasks, initializers and servers.  Plugins are normal NPM packages, so they can also include/require other npm packages.\nThe basic structure of a plugin looks like: \nbash\n/\n| - package.json\n/actions\n/tasks\n/servers\n/initializers\nTo use a plugin: \n- Install it by adding it to the dependencies hash in package.json.\n- Load it within config.js by adding it to config.general.plugins\n. A question remains: how to handle config?  \nA module may expect api.config.myModule.stuff to exist. Do we create new files in /config or do we expect people to add lines to config.js?\n. Cool.  Then what I think we need to do is upgrade the whole config system.  Rather than have 1 config file that we can override with \"env\", we should have a file per \"collection\" (general, tasks, cache, redis, etc). We can also have directories of collections (config/servers/web,js, config/servers/websocket.js, etc).\nIn each of these config files, we'll have a \"defaults\" JSON block, and then a per-env section which will be the override. \nplugins can define their own config file (IE \"ah-plugin-mysql\" would make a config/mysql.js) which would be copied automatically into the project's /config when installed via a post-install script. \nIt looks like we are getting closer and closer to the rails way of doing things.\n. Check out this commit for a proposal of how configuration files might be used in the future https://github.com/evantahler/actionhero/commit/c6a634fbecef67399c1e2c7cf4805e867d2310f8\n. Here's a sample plugin as a demonstration https://github.com/evantahler/ah-sample-plugin\n. TODO: variable plugin paths.\nPlugins should be able to be loaded from node_modules or elsewhere in the project. \n. TODO:\n- update generator\n- update docs/wiki\n. solved by https://github.com/evantahler/actionhero/pull/345\n. Nope, no middleware is run when returning files.  actionhero at this time is not a rendering/templating server.  However, folks have used actions to render templates, and you can run middleware before actions.\n. I guess you could also use a catch-all route and pass all requests to an action which would invoke the file server internally.\n. Unfortunately, to get the functionality you are looking for, you would need to treat every file request as an action to look for the _escaped_fragment_ param.  In an attempt to be as fast as possible when serving files, none of actionhero's logic is invoked, and that includes middleware.   \nI think the best way to go here is really to use the catch-all route and a file-serve action.  This will slow down page request times, but it shouldn't be too bad.  \nInterestingly, @prerender assumes a few things:\n- You aren't using a CDN, and are really processing each request (or your CDN is smart enough to not cache _escaped_fragment_ params)\n- You are using express.  I haven't found any docs from them on how to use their service \"raw\", outside of the express midddleware.\n. Here's an example of actions serving files https://gist.github.com/evantahler/9541992\n. Yeah, I would prefer not add any request modes to the www server to support a vendor (rather than an HTTP spec, etc).  I would probably accept a PR to generically allow you add more request modes though. \n. On which OS do you have this problem?\nI've tested on OSX Maverics, Ubuntu 12.x and Windows 8 (both git gui and node shell) and actionhero generate works properly.  Can you provide any more information?\n. I don't have the string pathtocurrentdir anywhere in the project.  Perhaps you have a case-insensitive file system (the OSX default), and all files have been renamed to actionhero (lowercase), but you are still referencing an ActionHero (upper case) package?\nDoing the following on mavericks works for me:\nbash\ncd ~/Desktop\nmkdir test && cd test\nnpm install actionhero\n./node_modules/.bin/actionhero generate\nnpm install\nnpm start\n. Ahh! That helps.\nYep, there was a bug with global installs https://github.com/evantahler/actionhero/commit/7f01e22bd7e14acb5c6a44e79d1f6078eed76167\n. This looks to be an outstanding philosophical issue with handling \"uploaded\" (multipart) data in formidable.  This will not be fixed/monkeypatched within actionhero.\nSome of the relevant formidable issues are:\n- https://github.com/felixge/node-formidable/pull/77\n- https://github.com/felixge/node-formidable/issues/33\nAs formidable generally sticks very close to the HTTP spec, I will not weigh in with my personal beliefs here :D\n\nWow! I actually had no idea that posting the same value more than once would be collected into an array! The formidable team is doing some fine work.\nTo recreate your error using CURL:\nI'm using a simplified example in curl curl -d 'thing=1' -d 'thing=2' localhost:8080/api/debug and I see the expected behavior.\njavascript\n\"requesterInformation\": {\n    \"id\": \"828dbeb333c9ee20abc56737b28375718db44201\",\n    \"remoteIP\": \"127.0.0.1\",\n    \"receivedParams\": {\n      \"thing\": [\n        \"1\",\n        \"2\"\n      ],\n      \"action\": \"debug\",\n      \"limit\": 100,\n      \"offset\": 0,\n      \"apiVersion\": 1\n    }\nTo represent a multipart upload in curl, it looks like you need to use a file\nFile (note to save with CRLF line endings):\n```\n------------------------------4ebf00fbcf09\nContent-Disposition: form-data; name=\"thing\"\n1\n------------------------------4ebf00fbcf09\nContent-Disposition: form-data; name=\"thing\"\n2\n------------------------------4ebf00fbcf09--\n```\nand the command: curl -X POST -H \"Content-Type: multipart/form-data; boundary=----------------------------4ebf00fbcf09\" --data-binary @test.txt localhost:8080/api/debug\n. https://github.com/evantahler/actionhero/commit/128f9797f7ee48c5d9b1b87b82d73d92eec35a1b\n. referencing previous conversation: https://github.com/evantahler/actionhero/pull/289\n. I still believe that this kind of thing doesn't belong in the project.  It's too complex for most use cases, and I wound't want the static file server to support something that the actionProcessor can't.\nThat said, in v8.0.0, it becomes noticeably easier to modify the the public directory's path.  I just added this commit for you, making path resolution a method.  With our new plugin system, you could write an initializer which replaces api.staticFile.path(connection) with a method of your choice.  Just redefine it :D \n. Linking this issue to https://github.com/evantahler/actionhero/issues/372 for refrence\n. Looks good! The only think I would change is that I think limit = ( configFiles.length *  configFiles.length ).  If you have something like this, you'll need to loop 3 times, which is greater than configFiles.length\nbash\nfile_a.js\nfile_b.js # requires config.c\nfile_c.js # requires config.b\nfile_d.js # requires config.a\n. Ahh! got it.\n. Then I guess we don't need to load the config 2x then.\nRemove that part, and I'll merge.\nThanks! \n. I guess that's true for 1-level deep accessors, and deeper accessors will be caught by your try/catch\n- api.config.thing would be undefined\n- aipi.config.collection.thing would throw an error\nIt looks like this is as good as we are going to get.  \nMerging! Thanks! \n. https://github.com/evantahler/actionhero-tutorial/commit/e69176823ef3d2e83ee15c0baca5d3c78c5cf6fa\n. Sure! https://github.com/evantahler/actionhero/commit/aadfb1beaef14a3c94ad36477d8a45bc75165226\nEnabled by default, disabled in production\n. Curl (and most web browsers and HTTP libraries) have a timeout.  Defaults tend to range from 1 to 5 minutes.  For example, my curl (OSX) is 2 minutes.  Here's a simpler action to demo this:\n``` javascript\nexports.action = {\n  name:                   'slow',\n  description:            'slow',\n  blockedConnectionTypes: [],\n  outputExample:          {},\n  matchExtensionMimeType: false,\n  version:                1.0,\n  toDocument:             true,\ninputs: {\n    required: [],\n    optional: [],\n  },\nrun: function(api, connection, next){\n    setTimeout(function(){\n      next(connection, true);\n    }, (1000 * 60 * 6))\n  }\n};\n```\n``` bash\n[11:55:30] evantahler@xx [~/Desktop/actionhero_tmp]\n\ncurl -v localhost:8080/api/slow\n Adding handle: conn: 0x7fddfb803a00\n Adding handle: send: 0\n Adding handle: recv: 0\n Curl_addHandleToPipeline: length: 1\n - Conn 0 (0x7fddfb803a00) send_pipe: 1, recv_pipe: 0\n About to connect() to localhost port 8080 (#0)\n   Trying ::1...\n   Trying 127.0.0.1...\n Connected to localhost (127.0.0.1) port 8080 (#0)\nGET /api/slow HTTP/1.1\nUser-Agent: curl/7.30.0\nHost: localhost:8080\nAccept: /*\n\nEmpty reply from server\nConnection #0 to host localhost left intact\ncurl: (52) Empty reply from server\n[11:57:45] evantahler@xx [~/Desktop/actionhero_tmp]\n```\n\n\nEven though the client (curl) gives up, this won't stop the action from processing.  \nFolks tend to move queries that slow to a task, and store the result in a cache.  I guess you can also adjust your client's timeout. \n. checkout --connect-timeout and --max-time http://curl.haxx.se/docs/manpage.html#-m\n. thanks! \n. Actually, params should be sticky on websockets, just like with socket clients.  These tests lock that in https://github.com/evantahler/actionhero/commit/1d9e760780d10e3783b7726110f677748fac616b\n. You can certainly test a plugin in development!\nFirst, add the path your plugin is in to api.config.general.paths.plugin.  If your actionhero app is in /var/ah/actionhero and your plugin is in /var/ah/my_plugin, add /var/ah to api.config.general.paths.plugin\nThen, in api.config.general.plugins, add the name of your plugin, in this case my_plugin.  Note that the directory name and the package name in the plugin's package.json should match.\nI'll add this to the wiki. \n. That is correct.  There would be nothing to execute/call actions or to initialize within without a full actionhero project.\nIf you want to contain the actionhero server witin your plugin project, you can try the following (I haven't tested it):\n1) make a folder within your plugin called 'app', and npm install actionhero into it\n2) add the plugin routes to api.js of the containing directory, ie: ./..\n3) run the server\n. Great! \n. Sure, here are some example methods you can use within actions or middleware\n``` javascript\n  renderPage: function(api, connection, next){\n    var destination = determinePage(); // your method to determine the page\n    connection.rawConnection.responseHeaders.push(['Location', destination]);\n    connection.rawConnection.responseHttpCode = 302; \n    next(connection, true);\n  },\nrender404: function(api, connection, next){\n    connection.rawConnection.responseHttpCode = 404; \n    connection.sendFile('404.html'); // file within /public\n    next(connection, false);\n  }\n```\n. I don't have any way of testing this out, any other windows users out there able to comment?\n. https://github.com/evantahler/actionhero/commit/465a85fba9800466ab9ca3d5df65a18f7decd830\n. closing in favor of PR\n. closes https://github.com/evantahler/actionhero/issues/361\n. nice, thanks! \n. I like to use blitz.io to do testing against demo.actionherojs.com, which is a single actionhero instance (no cluster) running on nodejitsu/joyent.  Here are 3 types of responses I\u2019m seeing in this \u201ctest production\u201d environment.  Each test started with a concurrency of 1, up to 100 over 1 minute (meaning a total of 2,200 unique requests within that minute)\nFile - request just the logo (avg 21ms) \nrandomNumber - a very simple api action with no redis (avg 14ms) \ncacheTest - an action that does a lot of redis requests (avg 13ms) (using fakeredis)\nThe error rate on nodejitsu is pretty high, and I believe that it has to do with nodejitsu\u2019s DDOS prevention. \n. (reports linked to each type of request)\n. @m-teslya can you give some more detail on how you tested demo.actionherojs.com/api/randomNumber?  It seems that our numbers don't agree here. \n. Thanks for the research!\nThe biggest place for optimizations would be in the connection initialization stack.  Even for file requests, we initially assume every client might be requesting data from the API, and we build a full connection for it.  Determining earlier on if we need to serve a file would be a big change to the server, but would get likely yield a big preference gain. \nI'll poke around for other places we might have trouble, but would happily accept a PR for the above. \n. Notes about testing:\n- ApacheBench is terrible on OSX, so I've moved to https://www.npmjs.org/package/nodeload\n- be sure that you up your ulimit on both the terminal session you are running node/actionhero from and the terminal you are testing from (ie: ulimit -n 2048)\nWith these settings and a generic actionHero install, I get no errors on either osx (10.9) and ubuntu (13).  As expected, the the response time goes up ~ linearly with concurrency. \n./node_modules/.bin/loadtest -n 10000 -c 1000 http://localhost:8080/api/randomNumber\n``` bash\nRequests: 0 (0%), requests per second: 0, mean latency: 0 ms\nRequests: 3176 (32%), requests per second: 635, mean latency: 1380 ms\nRequests: 6896 (69%), requests per second: 745, mean latency: 1360 ms\nTarget URL:          http://localhost:8080/api/randomNumber\nMax requests:        10000\nConcurrency level:   1000\nAgent:               none\nCompleted requests:  10000\nTotal errors:        0\nTotal time:          14.608806215000001 s\nRequests per second: 685\nTotal time:          14.608806215000001 s\nPercentage of the requests served within a certain time\n  50%      1370 ms\n  90%      1500 ms\n  95%      1546 ms\n  99%      3146 ms\n 100%      3323 ms (longest request)\n``\n. Confirming that I can't see any errors, here's some tests ondemo.actionherojs.com` (and load time seems to go up proportionally to concurrency):\n./node_modules/.bin/loadtest -n 1000 -c 100 http://demo.actionherojs.com/api/randomNumber\n``` bash\nTarget URL:          http://demo.actionherojs.com/api/randomNumber\nMax requests:        1000\nConcurrency level:   100\nAgent:               none\nCompleted requests:  1000\nTotal errors:        0\nTotal time:          3.671956372 s\nRequests per second: 272\nTotal time:          3.671956372 s\nPercentage of the requests served within a certain time\n  50%      348 ms\n  90%      399 ms\n  95%      414 ms\n  99%      443 ms\n 100%      448 ms (longest request)\n```\n./node_modules/.bin/loadtest -n 10000 -c 1000 http://demo.actionherojs.com/api/randomNumber\n``` bash\nTarget URL:          http://demo.actionherojs.com/api/randomNumber\nMax requests:        10000\nConcurrency level:   1000\nAgent:               none\nCompleted requests:  10000\nTotal errors:        0\nTotal time:          49.092436410000005 s\nRequests per second: 204\nTotal time:          49.092436410000005 s\nPercentage of the requests served within a certain time\n  50%      4091 ms\n  90%      8169 ms\n  95%      8671 ms\n  99%      17136 ms\n 100%      21260 ms (longest request)\n```\nI'm having a very hard time reproducing your report @m-teslya \n. Having another datapoint is great!  Can you be more specific about what you\nsaw?  Did you notice the slowdown in actions or file serving?  Are you only using HTTP requests?\n. Another dead end:  Memory Leaks.\nTesting with https://github.com/c4milo/node-webkit-agent, I ran a similar test to the above with cache, looking for potential memory leaks ./node_modules/.bin/loadtest -n 10000 -c 1000 'http://localhost:8080/api/cacheTest?key=k&value=v'\nAfter each batch of 10,000 requests, I took a profile, and the application is always within ~2MB of 10MB total allocation.\n\n. One potential slowdown location is https://github.com/evantahler/actionhero/commit/5e59e25868ff06bb20cf79df7e14526bc107dd77 when comparing nextTick to setImmidieate.  (added Jan 4)\nI believe this commit is in error.  We really do want to execute the actionProcessor as fast as possible, only deferring to force async-ness, not trying to save CPU cycles for other actions.  I'll roll this back, as it does appear to make a positive change. \nRationale explained best here https://groups.google.com/forum/#!topic/nodejs/A_uo0Mfmk5o\n. @passion4code is would be great if you could try out master, and add some more specifics to where you saw the slowdown (actions vs file serving, single node vs cluster, etc)\n. # Actionhero Version Speed Tests\nHere are the results of a more rigorous test against master and v7.6.5.  You will note that on my test machine (OSX Mavericks, 16GB ram, 6-core intel i7, node v0.10.26), it appears that in all tests master is \"faster\" than v7.6.5, but has a higher frequency of connection errors (ECONNRESET)\nThe test: \n- npm install loadtest\n- ulimit -n 2048\n  - do this on BOTH the server console and the testing console\n- tests all preformed with default settings\n  - tests done with fakeredis\n  - verbose/debug logging\n- actionhero fully restarted between tests\n- npm install when switching versions\n- all of the 'error's reported were of the type [Thu May 29 2014 21:53:06 GMT-0700 (PDT)] DEBUG Connection b1bb4bd89eca8e5a311e99e95668081777e31dcd12d93ffdb6413ce9205a8d77 failed: Connection error: connect ECONNRESET, which indicate the socket was saturated (500 conn seems like it would do that)\n  - running the same tests within cluster mode (6 cores, 6 clusters), the errors were entirely removed.  This seems to indicate hardware/network saturation, but might also be indicative of a load limit of the application at ~150 simultaneous requests.\n``` bash\nA) SIMPLE ACTION:\n./node_modules/.bin/loadtest -n 10000 -c 500 http://localhost:8080/api/randomNumber\nB) CACHE ACTION:\n./node_modules/.bin/loadtest -n 10000 -c 500 'http://localhost:8080/api/cacheTest?key=k&value=v'\nC) FILE:\n./node_modules/.bin/loadtest -n 10000 -c 500 http://localhost:8080/public/logo/actionhero.png\n```\nSUMMARY\n| Test | Req/Sec | 50% Avg Response | Total Response Time | Errors |\n| --- | --- | --- | --- | --- |\n| A (master) | 1139 | 298 ms | 8.77 s | 1098 |\n| A (v7.6.5) | 672 | 629 ms | 14.87 s | 434 |\n| ------------ | --------- | ------------------ | --------------------- | -------- |\n| B (master) | 850 | 538 ms | 11.76 s | 399 |\n| B (v7.6.5) | 759 | 619 ms | 13.18 s | 11 |\n| ------------ | --------- | ------------------ | --------------------- | -------- |\n| C (master) | 194 | 2585 ms | 51.46 s | 244 |\n| C (v7.6.5) | 193 | 2525 ms | 51.68 s | 250 |\nMASTER\nnotes:\n- Some locking on the cache test\n- lots of visible locking (GC) on the PNG test\n\nINFO Requests: 0 (0%), requests per second: 0, mean latency: 0 ms\nINFO Requests: 5681 (57%), requests per second: 1136, mean latency: 420 ms\nINFO Errors: 675, accumulated errors: 675, 11.9% of total requests\nINFO\nINFO Target URL:          http://localhost:8080/api/randomNumber\nINFO Max requests:        10000\nINFO Concurrency level:   500\nINFO Agent:               none\nINFO\nINFO Completed requests:  10000\nINFO Total errors:        1098\nINFO Total time:          8.775877925000001 s\nINFO Requests per second: 1139\nINFO Total time:          8.775877925000001 s\nINFO\nINFO Percentage of the requests served within a certain time\nINFO   50%      298 ms\nINFO   90%      618 ms\nINFO   95%      1296 ms\nINFO   99%      1967 ms\nINFO  100%      2084 ms (longest request)\nINFO\nINFO  100%      2084 ms (longest request)\nINFO\nINFO    -1:   1098 errors\n\nINFO Requests: 0 (0%), requests per second: 0, mean latency: 0 ms\nINFO Requests: 4280 (43%), requests per second: 856, mean latency: 550 ms\nINFO Errors: 67, accumulated errors: 67, 1.6% of total requests\nINFO Requests: 8645 (86%), requests per second: 861, mean latency: 600 ms\nINFO Errors: 323, accumulated errors: 390, 4.5% of total requests\nINFO\nINFO Target URL:          http://localhost:8080/api/cacheTest?key=k&value=v\nINFO Max requests:        10000\nINFO Concurrency level:   500\nINFO Agent:               none\nINFO\nINFO Completed requests:  10000\nINFO Total errors:        399\nINFO Total time:          11.763692937 s\nINFO Requests per second: 850\nINFO Total time:          11.763692937 s\nINFO\nINFO Percentage of the requests served within a certain time\nINFO   50%      538 ms\nINFO   90%      767 ms\nINFO   95%      1206 ms\nINFO   99%      1559 ms\nINFO  100%      1981 ms (longest request)\nINFO\nINFO  100%      1981 ms (longest request)\nINFO\nINFO    -1:   399 errors\n\n```\nRequests: 0 (0%), requests per second: 0, mean latency: 0 ms\nRequests: 1113 (11%), requests per second: 209, mean latency: 1760 ms\nErrors: 197, accumulated errors: 197, 17.7% of total requests\nRequests: 2197 (22%), requests per second: 187, mean latency: 2760 ms\nErrors: 0, accumulated errors: 197, 9% of total requests\nRequests: 3197 (32%), requests per second: 195, mean latency: 2560 ms\nErrors: 33, accumulated errors: 230, 7.2% of total requests\nRequests: 4205 (42%), requests per second: 193, mean latency: 2590 ms\nErrors: 14, accumulated errors: 244, 5.8% of total requests\nRequests: 4868 (49%), requests per second: 185, mean latency: 2660 ms\nErrors: 0, accumulated errors: 244, 5% of total requests\nRequests: 5868 (59%), requests per second: 193, mean latency: 2610 ms\nErrors: 0, accumulated errors: 244, 4.2% of total requests\nRequests: 6868 (69%), requests per second: 195, mean latency: 2580 ms\nErrors: 0, accumulated errors: 244, 3.6% of total requests\nRequests: 7868 (79%), requests per second: 194, mean latency: 2570 ms\nErrors: 0, accumulated errors: 244, 3.1% of total requests\nRequests: 8740 (87%), requests per second: 196, mean latency: 2580 ms\nErrors: 0, accumulated errors: 244, 2.8% of total requests\nRequests: 9740 (97%), requests per second: 197, mean latency: 2540 ms\nErrors: 0, accumulated errors: 244, 2.5% of total requests\nTarget URL:          http://localhost:8080/public/logo/actionhero.png\nMax requests:        10000\nConcurrency level:   500\nAgent:               none\nCompleted requests:  10000\nTotal errors:        244\nTotal time:          51.464994534999995 s\nRequests per second: 194\nTotal time:          51.464994534999995 s\nPercentage of the requests served within a certain time\n  50%      2585 ms\n  90%      2718 ms\n  95%      2742 ms\n  99%      3223 ms\n 100%      4884 ms (longest request)\n100%      4884 ms (longest request)\n-1:   244 errors\n```\nv7.6.5\nnotes:\n- lots of visible locking (GC) on the PNG test\n\n```\nRequests: 0 (0%), requests per second: 0, mean latency: 0 ms\nRequests: 3378 (34%), requests per second: 676, mean latency: 690 ms\nRequests: 6287 (63%), requests per second: 582, mean latency: 610 ms\nTarget URL:          http://localhost:8080/api/randomNumber\nMax requests:        10000\nConcurrency level:   500\nAgent:               none\nCompleted requests:  10000\nTotal errors:        434\nTotal time:          14.871668858000001 s\nRequests per second: 672\nTotal time:          14.871668858000001 s\nPercentage of the requests served within a certain time\n  50%      629 ms\n  90%      889 ms\n  95%      2023 ms\n  99%      3208 ms\n 100%      3402 ms (longest request)\n100%      3402 ms (longest request)\n-1:   434 errors\n```\n\n```\nRequests: 0 (0%), requests per second: 0, mean latency: 0 ms\nRequests: 3686 (37%), requests per second: 737, mean latency: 640 ms\nErrors: 11, accumulated errors: 11, 0.3% of total requests\nRequests: 7780 (78%), requests per second: 819, mean latency: 610 ms\nErrors: 0, accumulated errors: 11, 0.1% of total requests\nTarget URL:          http://localhost:8080/api/cacheTest?key=k&value=v\nMax requests:        10000\nConcurrency level:   500\nAgent:               none\nCompleted requests:  10000\nTotal errors:        11\nTotal time:          13.181073554000001 s\nRequests per second: 759\nTotal time:          13.181073554000001 s\nPercentage of the requests served within a certain time\n  50%      619 ms\n  90%      768 ms\n  95%      856 ms\n  99%      1003 ms\n 100%      1134 ms (longest request)\n100%      1134 ms (longest request)\n-1:   11 errors\n```\n\n```\nRequests: 0 (0%), requests per second: 0, mean latency: 0 ms\nRequests: 1000 (10%), requests per second: 174, mean latency: 2330 ms\nRequests: 2000 (20%), requests per second: 181, mean latency: 2740 ms\nRequests: 2664 (27%), requests per second: 170, mean latency: 2740 ms\nRequests: 3657 (37%), requests per second: 185, mean latency: 2620 ms\nRequests: 4508 (45%), requests per second: 188, mean latency: 2760 ms\nRequests: 5775 (58%), requests per second: 245, mean latency: 2140 ms\nErrors: 221, accumulated errors: 221, 3.8% of total requests\nRequests: 6775 (68%), requests per second: 200, mean latency: 2460 ms\nErrors: 11, accumulated errors: 232, 3.4% of total requests\nRequests: 7776 (78%), requests per second: 198, mean latency: 2530 ms\nErrors: 8, accumulated errors: 240, 3.1% of total requests\nRequests: 8779 (88%), requests per second: 199, mean latency: 2510 ms\nErrors: 4, accumulated errors: 244, 2.8% of total requests\nRequests: 9781 (98%), requests per second: 194, mean latency: 2570 ms\nErrors: 4, accumulated errors: 248, 2.5% of total requests\nTarget URL:          http://localhost:8080/public/logo/actionhero.png\nMax requests:        10000\nConcurrency level:   500\nAgent:               none\nCompleted requests:  10000\nTotal errors:        250\nTotal time:          51.682364306000004 s\nRequests per second: 193\nTotal time:          51.682364306000004 s\nPercentage of the requests served within a certain time\n  50%      2525 ms\n  90%      2702 ms\n  95%      2801 ms\n  99%      4288 ms\n 100%      5104 ms (longest request)\n100%      5104 ms (longest request)\n-1:   250 errors\n``\n. Due the above, I am closing this issue and marking it ascannot reproduce. \nIf you continue to see load problems like this, **please** report them, but provide more information so the issue can be reproduced! \n. @m-teslya to respond to one of your earlier points:  I think that a lot of the issues you were seeing are network related.  For example,  I can test therandomNumberaction ondemo.actionhero.com`, and like point out, see a round-trip latency of ~150ms avg.  However, I can check the logs on that server (screen shot) and the sever only spends 1ms processing each request\n\n. Confirming what @davidjairala said above: The errors I have been seeing are only on OSX.  Running an Ubuntu VM (14.4), I have no errors for any request, and it still looks like master outperforms v7.6.5\n. Yeah, both limit and offset should be removed as default params.  That's a holdover from when actionhero had an ORM build in.  This PR gets rid of them entirely.\nhttps://github.com/evantahler/actionhero/pull/369\n. Going Apache. \n. Not right now, no.\nI've made the form object available to you in connection.rawConnection.form, but there's a chicken/egg problem here.  \nYou would want to add a connection middleware to catch the form events, but we can't create a valid connection within actionhero until we know what the connection.params are.  We use formidable to detect not only POST/PUT variables, but files-as-params too.  So... we can't fire off the next step in the action chain until the form is done parseing.  \nIf you have any suggestions, please send in a PR! \n. Sorry, once again the answer is no.\nThere are a few problems with a 'generic' emit:\n1.  How would you communicate state back to the client?  At the vey least, you would need a second connection to either A) poll for state (web) or B) be sent state (websocket).  In either case, the authentication / linking steps are fairly complex to be sure you are only sent information about your connection.  This is certainly possible, but is very dependent on how you implement auth.  For that reason, I won't put something like this in the framework itself... which leads to .2 and .3\n2. What would do the emitting?  Would it be something like api.servers.servers.web.emit('event', data, connection)?  Would we now require all servers to also be event emitters?   This could break compatibility with other types of servers.\n3. Whatever becomes the emitter would need to emit the event and the connection itself.  Emitting the connection becomes dangerous from a management POV, as it creates a very easy way for that connection to never be garbage collected. \n4. emitting, even globally, only works within a single server.  The second connection you create to receive data might connect to another server in a cluster (or on another physical server behind a load balancer).  To handle this, you'll need to make use of chat rooms to broadcast form upload state to that second connection.  Once again, the auth pattern for this is likely to vary per implementation. \nEven with all of the warnings above, there are still probably some hacks you can try (on a single actionhero instance anyway).  All connections are stored in api.connections.connections while they are active.  After #371 is merged in, you can probably loop though the connections and find one with a matching connection.rawConnection.fingerprint.  Once you find it (within an action), you can add the event emitter or inspect connection.rawConnection.form.bytesRecived connection.rawConnection.form.bytesExpected to get a % uploaded for that subsequent connection. (https://github.com/felixge/node-formidable/blob/master/lib/incoming_form.js#L154)\n. By default, we want actionhero to be very locked-down, and only serve files from a single directory.  This is the safest default for beginners. However, you can customize things by changing the behavior of api.staticFile.path.  For example:\n``` javascript\n// in an initializer, override api.staticFile.path\napi.staticFile.path = function(connection){\n  if(connection.action == 'sendFile'){\n    return api.config.general.paths.storage[0];\n  }else{\n    return api.config.general.paths.public[0];\n  }\n}\n```\nI'll add this note to the wiki\n. http://actionherojs.com/wiki/core/file-server.html#customizing-the-file-server\nhttps://github.com/evantahler/actionhero/commit/9fe433207f9fe062596eb11567b0935da733b5b3\n. I'll answer in 2 parts:\nSending complex messages within chat rooms\nYou are correct that when communicating within chat rooms, you can only send strings (with the say command).  This is due to a number of reasons, most importantly the ability for the chat transport to fallback to protocols other than websocket.  However, keep in mind that almost any type of object can be marshaled into a string (JSON.stringify in js).  If you control both the behavior of the sender and receiver, you can then un-marshal it (JSON.parse in js)\nChatRoom Authentication\nThe relevant wiki section\n- Only the server(s) can create rooms with api.chatRoom.add('secretRoom')\n- Once a room is created, you can then set an authentication rule for clients joining it: api.chatRoom.setAuthenticationPattern('secretRoom','authenticated', true)\n  - This means that every connection which attempts to join this room, actionhero will check that connection.authenticated == true before allowing them in.\n- connections can only modify their connection.params hash, which means that only the sever can ever modify connection.authenticated, which makes it a safe key for authentication.\n- In your authentication (login) action, you can set that authentication bit, ie: connection.authenticated = true; connection._original_connection.authenticated = true;.  For you this would mean that when you get a successful oauth callback from Goole or Facebook, whichever action handles that would also set the authentication key to true.\nYou can get more elaborate with this kind of thing.  Perhaps you only want each user to be allowed in one room at all.  Then do something like api.chatRoom.setAuthenticationPattern('secretRoom','authorizedRoom','secretRoom'). \n\nTo add some more documentation around this, I've also added this to the wiki:\nThe details of communicating within a chat room are up to each induvidual server (see websocket or socket), but the same principals apply:\n- Client will join a room (client.roomChange(room)).  A client can be in only one room at a time.\n  - Or client can listen to a room (client.listenToRoom(room)).  A client can listen to any number of rooms at a time.\n- Once in the room, clients can send messages (which are strings) to everyone else in the room via say, ie: client.say('Hello World')\n- Once a client is in a room, they will recive messages from other members of the room as events.  For example, catching say events from the websocket client looks like client.on('say', function(message){ console.log(message); })\n  - The payload of a message will contain the room, sender, and the message body: {message: \"Hello World\", room: \"SecretRoom\", from: \"7d419af9-accf-40ac-8d78-9281591dd59e\", context: \"user\", sentAt: 1399437579346}\n. will be solved by https://github.com/evantahler/actionhero/pull/377\n. You are entirely correct, and this should have been a more major release.  \nSadly, I think that there isn't anything that can be done now, as 8.0.8 has been live for a bit. I don't want to un-publish something folks are using.  I'll pre-bump package.json to 8.1.0, so at least the next release will indicate the severity of the change. \nhttps://github.com/evantahler/actionhero/commit/7ceedd537953930303ee7291e2138ae0cc6c46d3\n. @slattery Yep, I think that it's important to call out that master is (almost always) ahead of the version on NPM. \n. solved in https://github.com/evantahler/actionhero/pull/379\n. Yep, there's no support for text/plain right now.  Please send in a Pull Request! \nAs a note, there is probably a simpler check you can do around line 259.  You can use connectionHasHeader() to help.\n. fixed by https://github.com/evantahler/actionhero/pull/384\n. This breaks the test suite.\nI built on your ideas here, and created a bit more generic of a solution for you. \nhttps://github.com/evantahler/actionhero/pull/384\n. actionhero is a JSON api server, so supporting XML uploads is not something I'm interested in having in the framework.  Feel free to write a plugin for this, but I won't add anything special to actionhero for this.\nIf you can convince the formidable authors to make this change, then we'll include the updated package. \n. I re-ran the Travis suite to get this green (there's a intermittent failure on Travis)\nGreen now! \n. Let me know when you get the above comments sorted out, and I'll merge this in for the 9.0.0 release! \n. Good tests, and the code is getting simpler.  I have a suggestion on your data structures (which I am guessing you are having some trouble with, due to the inclusion of new utils).  May I suggest something like:\n``` javascript\n//  PSUDEO CODE, PROBABLY BUGGY  //\n// store processors as a hash\n// don't need the priority list\napi.actions.preProcessors = {};\n// store an array by priority, ie: api.actions.preProcessors[10] = [func]\napi.actions.addPreProcessor = function(func, priority) {\n  if(!priority) priority = api.config.general.defaultProcessorPriority;\n  priority = Number(priority); // ensure priority is numeric\n  if(!api.actions.preProcessors[priority]) api.actions.preProcessors[priority] = [];\n  return api.actions.preProcessors[priority].push(func);\n}\n// to run the preprocessors, you can get the keys and run them in order:\napi.actionProcessor.prototype.preProcessAction = function(toProcess, callback){\n  var self = this;\n  var priorities = [];\n  var processors = [];\n  for(var p in api.actions.preProcessors) priorities.push(k);\n  priorities.sort();\nif(priorities.length === 0) return callback(toProcess);\npriorities.forEach(function(priority){\n    api.actions.preProcessors[priority].forEach(function(processor){\n      processors.push(function(next){\n        if(toProcess === true){\n          processor(self.connection, self.actionTemplate, function(connection, localToProcess){\n            self.connection = connection;\n            if(localToProcess != null){ toProcess = localToProcess; }\n            next();\n          });\n        } else { next(toProcess) }\n      });\n    });\n  });\nprocessors.push(function(){ callback(toProcess) });\n  async.series(processors);\n}\n``\n. I want to get this in the project for v9, so I'll merge this and make the updates above onmaster.\nThanks! \n. Updates here https://github.com/evantahler/actionhero/pull/392, along with converting the connection middlewares to the same syntax\n. I'd leavedisableParamScrubbing`, as folks have gotten used to it (and got GET as you point out).\nI'm opposed to modifying the raw req object, but if you append this data to connection.rawConnection.form or something like that, it would be ok.\n. Looks good.  Please add a test or 2 demonstrating this (should be simple with request), and I'll merge this in!\n. Yes! This is correct now.  Thank you. \n. re-ran test suite to pass incremental failure.\n. This is OK, but be sure to also add PATCH here https://github.com/evantahler/actionhero/blob/master/config/servers/web.js#L19\n. There's an HTTP test you forgot to update, but I'll get it.  Merging! \n. (Assuming the major memory leaks have been\nfixed) The real problem with socket.io is that it doesn't play well with node's cluster module.  SocketIO requires you to setup \"sticky\" load balancing to ensure that long-polling clients always return to the same nodeJS instance.  Assuming you are willing to put in the work to implement such a load balancer (usually with cookie injection), socketIO will work for deployments with a single nodeJS instance per 'pool-member' (which usually means one-per-server, but you can do deployments over multiple ports).\nActionhero has the goal of working in cluster deployments, and supporting long-polling as a WS fallback, so this is a problem.  Faye's long polling implementation has a similar state problem to socket.io, but faye has the properly of being almost 'stateless' with regard to clients (IE: sending auth params on each message, etc).  Socket.IO on the other hand attempts to store connection state on the server to remember the connections state.  This gets weird of course when all of a sudden the client \"continues\" its long polling connection to a server that knows nothing about this.  We solve this problem with faye by abstracting the faye connection from the actionhero connection.  We then 'rebroadcast' messages from nodes that have a faye connection but not the matching actionhero connection.  This allows parallel path allows long-polling faye connections to connect to any actionhero cluster member, including those on a different server.\nSo this issue is to test a few things:\n- are the socket.io memory leaks fixed?\n- can we disable socket.io's persistence layer / session layer?\n- can we come up with a re-broadcast mechanism for detached long-polling\n  clients?\n- can we disable socket.io's \"room\" system (as we have our own)\nI might investigate engine.io rather than socket.io as well.\n. @esatterwhite can you give some more details about your utilization of Primus?  Which underlying transport did you pick?  Engine.IO appears to be the default.  The new socket.io is just a wrapper around engine.io, so I'll change this issue to be about trying 'engine.io' rather than 'socket.io'\n. After experimenting with Primus, it does seem awesome. Sold.\nA side effect of these experiments showed that using faye for internal cluster-cluster communication was lossy (and slower) when compared to simple redis pub-sub.  I'll be making this switch as well.  I've renamed this issue \"leave Faye\".  I'll open the PR for Primus shortly.\nI want to include this in the 9.0 release, so this will delay that.  This seems better than 2 major version bumps in a row though. \n. Primus PR: https://github.com/evantahler/actionhero/pull/400\n. Of course there will be docs! \nThe good news is that as long as you continue to use the actionheroClient.js in your browser code, other than dropping the in the new version, there shouldn't be much else to change in your application.    We'll still have AH chatrooms, actions, etc.\nThe cool part is that now you can choose which transport you want.  Only need websockets? Choose ws.  Want long-polling? choose socks.js.  Want to stick with engine.io because you have a cool iPhone library?  you can!   There's good info on this on Primus' page\nRegarding faye, we always used the faye-redis plugin, so we technically were relying on redis pub/sub under the hood, so the operational requirements for running AH don't change either.  We'll continue to use api.config.general.serverToken to validate messages from the cluster (especially with the new RPC tools), so again, as far as AH developers are concerned, there shouldn't be too much of a change.\n. One more note on this thread: \nAbove I had noted that \"Actionhero has the goal of working in cluster deployments, and supporting long-polling as a WS fallback, so this is a problem\". \nUnfortunately in the 9.0.0 release, I can no longer say the above is true.  Supporting long-polling with primus (for example, socksjs + only XHR) will no longer be supported.  The implementation to support the whole matrix of options and protocols Primus supports along with the re-routing actionhero used to preform is too complex (and slow).  If you have a load balancer with sticky sessions enabled and you can still use actionhero, but you cannot use the cluster module. \n. Thanks so much! \n. 2 things to do here:\nYou need to make a route for your action (routes.js):\njavascript\nexports.routes = {\n  all: [\n    { path: '/', action: 'some_action' }\n  ]\n};\nand then you need to tell the HTTP server to server actions by default and not files (you can still get files from /public) in config/servers/web: api.config.servers.web.rootEndpointType = 'api'\n. Are you referring to the action middleware? If so, this system is currently not eventEmitter based by design.  We need to process the request in parallel, and guarantee execution order, IE: connection -> connectionMiddleware -> preProcessor -> action -> postProcessor.   Because we can guarantee this order, we can also use the 'series' processing chain to do flow control.  Each preProcessor can halt further execution with the second argument to its callback. \nRegarding zzz.js, your recent PR added the ability to add priority to your pre and post processors, so you can order things however you would like. \nAre you asking to emit event states in general in addition to the middleware flow?  If so, please take this conversation to the mailing list, and we can talk it out! \n. will be fixed by https://github.com/evantahler/actionhero/pull/400\n. Anyone care to update https://github.com/evantahler/actionhero-tutorial ?\n. Solved by https://github.com/evantahler/actionhero-tutorial/pull/7\n. This will need to be updated after merging the primus branch\n. api.reds.client can currently publish, but you'll need a new connection to\nsubscribe to those same messages.  Stay tuned to v9.0, as it will have both\na redis.client and a redis.subscriber.\n. https://github.com/evantahler/actionhero/pull/400\n. There's a lot wrong here, but you are generally on the correct track:\n- This kind of thing will only work with web socket clients, not HTTP clients.  you don't call out what type of client you are using anywhere.  To be explicit you can ban all client types except web socket from your action via blockedConnectionTypes.  This also means that you cannot set any headers at all, as you aren't making an HTTP request anywhere.\n- You seem to create the room api.chatRoom.add(\"channel:\"+apiKey+\":\"+jobId, next); in your action, but the client never joins it.  Somewhere in your client code you'll need to call client.roomAdd(\"channel:\"+apiKey+\":\"+jobId);\n- Calling \"next\" as you create the room within your action breaks the callback chain, and any errors after this point will not be passed to your client and probably crash your server\n- You can set up a responder like you have in your streaming method and send data to the channel... but doing so for every connection will quickly overload your server.  It's better to have one listener for all clients and fan out the data as needed by inspecting a key like jobId in your example.\n- ActionHero's web server will overwrite your headers when the request is complete, which happens when you finally call next.\nI get  the feeling that you are actually trying to get data from redis pub-sub to an HTTP client, and not a web socket.  If that's the case you can't use the chat room features of action hero at all because HTTP clients are not persistent.   Chuncked streaming is poor choice of transport because:\n- not all browsers support it\n- all clients will eventually time out\n- on a reconnect you are duplicating your efforts and you can't tell when a client reconnect -> creating a memory leak\nI would suggest an alternate pattern: long-polling.  Whatever is publishing data to reds in the first place should pre-multiplex it into keys in reds which match a fixed pattern data: apiKey or something like that.  Then, your action to get the data simply loads (and then clears) what ever was stored in Redis for that connection.  You are moving the multiplexing work downstream to the producer and simplifying your action.  Your action can hold the connection open for a few seconds and keep checking reds for new data (long-polling).\nAlso, many of the web-socket implementations (like engine.io already have long-polling built in).  so that means you CAN actually use an older browser with action hero's \"web socket\" server directly... which will automatically fall back to long polling.  There's no need to worry about caching or messing wth headers.  Keep in mind that this requites sticky connections at your load balancer and servers to ensure that the client always reconnects to the same ActionHero node on the backend.\n. In general, the scope of your bucket variable isn't available outside this module.  If you want to access bucket in the rest of your application, you'll need to get bucket onto the api object.  Try api.couchbase.bucket = new couchbase...\n. That's strange! \nFrom the docs, setting useGlobal=true should share the repl's global namespace (grunt) with the global object it's connecting to.  This shouldn't matter in actionhero either way, as we are only concerned with sharing things on the api object, which is passed in directly.\nWhat node version do you have, and do you see any problems with other modules?\n. You have access to connection.rawConnection in your actions.  Parts of the rawConnection which will be useful:\nrawConnection.req the normal node HTTP request \nrawConnection.res the normal node HTTP response\nrawConnection.parsedURL the request URL parsed with path.parse\njavascript\nconnection.rawConnection.parsedURL:\n   { protocol: null,\n     slashes: null,\n     auth: null,\n     host: null,\n     port: null,\n     hostname: null,\n     hash: null,\n     search: '',\n     query: {},\n     pathname: '/api/randomNumber',\n     path: '/api/randomNumber',\n     href: '/api/randomNumber' },\n. (this answer was assuming the code in maser)\n. https://github.com/evantahler/actionhero/commit/3df1f4317f5f4736ae4c37536064eca5174e138a\nhttps://github.com/taskrabbit/node-resque/pull/39\n. Actually, this needs to be done server side.  We'll change api.chatRoom.announceMember into more of a middleware situation\n. closed by https://github.com/evantahler/actionhero/pull/407\n. Thanks for trying master out!\nCan you add https as well?\n. There are some few intermittent test failures that I only seem to appear on travis... no idea why.  Everything looks OK on OSX and Ubuntu.  Running again is green!\nThank! \n. Cool! Thanks\n. 2 thoughts:\nIt's possible to use redis-sentinel with a password, so the block starting here would also need this fix.\nSince your new connect events are in a process.nextTick, it's possible that connect would happen before your set your event listener, so it might never be called. \nIn general, the regular redis client queues all commands issued before ready, and that is what folks are used to.  I would suggest that rather than trying to patch things here, this might be a fix to investigate within the sentinel package(s) \n. Oh! that that is a problem.  I'll dig into it here https://github.com/evantahler/actionhero/pull/411\n. mentioned in https://github.com/evantahler/actionhero/pull/410\n. solved by https://github.com/evantahler/actionhero/pull/412\n. Thanks. https://github.com/evantahler/actionhero/commit/fa1555b0cc4e16e2a15e7ea4224dcf721d8a2572\n. Thanks! \n. Perhaps a safer way to express this condition would be:\nself.connection.error === null && (typeof self.connection.params[param] == null || self.connection.params[param].length == 0\nThe loose comparison to null would count both a literal null and a missing param as \"missing\".\nThoughts?\n. updated here https://github.com/evantahler/actionhero/commit/daa1fddbb68c0d0dbcbeedb35f2e7ff2e9ad45ae\n. Can you confirm that you are using the latest version of actionhero?  There used to be some problems like this with the specHelper, but I think they were resolved here\nI've added some tests to mimic what you are seeing, and I can confirm that on master things appear to be working OK \n. Hmm... I think this sort of thing can only be caused by a domain.  The tests I added should be testing a similar thing, and are OK.  Perhaps your database is creating a domain around its callback and never disposing it?\nTo check this, replace api.models.widget.findAll() with a process.nextTick.  Does that solve the problem?  Unfortunately, if this is the case, to break out of it, you'll need an eventEmitter or something like that to break the callback chain. \n. Any success? \n. no, but this sort of thing seems relevant\nhttps://github.com/caolan/async/issues/465\n\nEvan Tahler\n 412.897.6361\n evantahler@gmail.com\nOn Mon, Jul 14, 2014 at 11:24 PM, Michael notifications@github.com wrote:\n\nHey, thanks for checking in. You were correct, a process.nextTick solved\nthe problem, but I ended up using try/catch blocks in my test code (to\nkeep everything cleaner in the \"real\" code).\nI'm using Sequelizer as my ORM layer, any ideas on where to start making\nthat play a little nicer?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/evantahler/actionhero/issues/416#issuecomment-48994871\n.\n. cool! added to the wiki https://github.com/evantahler/actionhero/commit/8e59e3cbd89ca860dcdd81567fc7f1ad6792ab70\n. The configLoader is fairly forgiving.  If you make a new config file, ie /config/customErrors.js, and still have it export to the errors object (and not overwrite any of the existing names), you will be fine.  Both config files will be merged together.\n\n``` javascript\n// /config/customErrors.js\nexports.default = {\n  errors: function(api){\n    return {\n      '_toExpand': false, \n  my_custom_error: function(){\n    return 'you broke it'\n  }\n}\n\n}\n}\n``\n. cool, thanks!\n. Waiting on response from https://groups.google.com/forum/#!topic/actionhero-js/eZ6XFIQ7mbg\n. This will be solved in https://github.com/evantahler/actionhero/pull/433 (WIP)\n. A neat idea, but there are a few problems:\n- This breaks the test suite\n- therawConnectionyou are passing is not a properly builtHTTP.reqclient object, like  browser_fingerprint expects.  You'll need to poke into Primus' internals. \n. Looking better!  \nCan you add a test somehow?\n. Any luck?\n.request` (which the test suite already uses) also has good cookie support:\njavascript\nvar j = request.jar() \nrequest({url: 'http://www.google.com', jar: j}, function () {\n  var cookie_string = j.getCookieString(uri); // \"key1=value1; key2=value2; ...\"\n  var cookies = j.getCookies(uri); \n  // [{key: 'key1', value: 'value1', domain: \"www.google.com\", ...}, ...]\n})\n. From the primus docs: https://github.com/primus/primus#can-i-send-custom-headers-to-the-server\n... It is not possible to send custom headers from the client to the server.  ...\nPerhaps another angle to achieve this would be to add a method to the client lib that, once the client connects, searches the browser for a matching session cookie (matching api.config.servers.web.fingerprintOptions.cookieKey), and sets it via verb.  This will be most compatible with the various transports. \n. Wouldn't it have the same effect though?  It would create a link (rawConnection.fingerprint) which would be the same between HTTP and Socket client without any additional tooling. The only difference is that there would be a small window of time where the websocket client is connected but not authenticated. \n. I've given this some thought, tried a few alternative approaches, and I think the code here is the right approach.  \nSeeing as how fingerprint will be used across more than one connection type, I've moved it up the stack to connection.fingerprint.  Here's my version of this PR https://github.com/evantahler/actionhero/pull/436\nAlso, this turned out to be basically impossible to test, even with phantomJS, so I've just provided an example in '/public/linkedSession.html'\n. Closed this PR in favor of https://github.com/evantahler/actionhero/pull/436\n. What auth are you referring to?  actionhero doesn't have any notions of authentication built in.  If you are making HTTP requests from IOS, you can certainly include any ID you like to the actions for purposes of authentication. \n. I believe you are asking how to have a user visit \"/fileABC.file\", have the browser interoperate the returned body content as a \"download\", and to assume a name \"data.txt\" for that file.\nCheck out the \"Content-Disposition\" header, which in your case, you would want to set to something like Content-Disposition: attachment; filename=data.html;  Keep in mind this is \"technically\" deprecated, but most browsers still support it. \nYou can set response headers with connection.rawConnection.responseHeaders.push  {'Content-Disposition':  ... }.  Then, send the file connection.sendFile('404.html');\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html\n. Thanks! \n. use the normal fs commands?\n. Ahh. Right now this is not supported. \nEach server implements sendFile, and you would need to modify all of them to fire a callback once the file stream reader has ended (and transmitted).  Pull requests welcome!\nYou could also handle this like uploads work: save the file with a random name in /tmp and then sweep the folder periodically. \n. Not innately no.  You can block various HTTP actions in a middleware or action by inspecting connection.rawConnection.method on web connections.  \nIf you have a rigorous naming convention (ie: user-add, user-delete, etc) you could map the names to HTTP verbs, or alternatively, you can always add additional options to the action definition, perhaps action.allowedHttpVerbs = [], and inspect that in a middleware. \n. This will be addressed by https://github.com/evantahler/actionhero/pull/433\n. The chat system can't be \"turned off\", but if you don't create any rooms, no client can use it.  Remove api.config.general.startingChatRooms and never call api.chatRoom.add(room) from your code and you will have effectively disabled the chat system.  The chat system uses the normal method of cluster communication (redis pub/sub), so there's no additional overhead incurred.\nSimilarly, you can disable the file server from ever being called in a few ways.  You can point api.config.general.paths.public = null and/or for the webserver, you can set api.config.servers.servers.urlPathForFiles = null.  There was a bug when you set both to null which I cleaned up here https://github.com/evantahler/actionhero/commit/1d7eb01be3a2215e99eff1a68ae325c718645576\n. % is not a valid character for a URL, the error URIError: URI malformed is correct.  If you want to send %, you need to HTMLEncode it, IE: % becomes %25\nhttp://www.faqs.org/rfcs/rfc1738.html\n. Ah! Excellent point.  Fixed here https://github.com/evantahler/actionhero/commit/bd8478f81f315452065c280459667921cd8da277\n. I'm not sure what you mean? If you want to exit any node application you can call process.exit() whenever you want.  For a more graceful exit, you can call api.commands.stop()\n. As it has caused so much trouble, I'll remove the headers option, as it really doesn't work (despite Primus' documentation) https://github.com/evantahler/actionhero/commit/6cf6f75d514faa65c1080bba5c459a742b6a900a\nRegarding the multiple messages, I cannot reproduce it.  Can you check your server log and see if the client is sending the message multiple times?\n. Seems OK regardless of redis 'realness' in my testing...\n. are you using a transformer other than websockets ?\n. I tried all day... still can't reproduce :/\n. You can still choose Faye as a transport under prinus if you are partial to it. \n. Thanks! \n. The plugin system was introduced in v8.0.0, so you can't use them as they are.\nIf you want to manually extract the code from the plugin's initializers, actions, config files, etc, into your project, it might work. \nhttps://github.com/evantahler/ah-airbrake-plugin\nhttps://github.com/evantahler/ah-newrelic-plugin\n. This PR is in refrence to https://github.com/evantahler/actionhero/pull/422\n. Doc changes relevant to this PR: https://github.com/evantahler/actionhero/pull/437\n. thanks for pointing this out.  fixed here https://github.com/evantahler/actionhero/commit/4c728a31a87e880ec997ac27112ef0a663906548\n. That would only work with a single node/cluster.  It's better to use the chat system to broadcast a message to all clients in a specific room. \nIn your action, just do api.chatRoom.broadcast({}, 'actionRoom', message);\n. Will do.  Thank! \nhttps://github.com/evantahler/actionhero/commit/16763253ce5bd7fa9219f955ab8548fda4f493d4\n. You should already have similar data in connection.rawConnection.params.body.  Can you explain how this differs?\nAlso, JSON/js hashes are not designed to maintain the order of their component elements.  Relying on order is generally a bad idea.\nReference\n\nAn object is an unordered collection of zero or more name/value\n pairs, where a name is a string and a value is a string, number,\n boolean, null, object, or array.\n. I still don't feel this kind of thing belongs within actionhero's core (as I don't think this will be a common use-case), but you can add your buffer into connection middleware and do the same thing:\n\n``` javascript\n// initializers/body.js\nexports.body = function(api, next){\napi.connections.addCreateCallback(function(connection){\n    if(connection.type === 'web'){\n      connection.rawConnection.rawRequestBodyData = Buffer('');\n      connection.rawConnection.req.on('data', function(buffer) {\n        connection.rawConnection.rawRequestBodyData = Buffer.concat([connection.rawConnection.rawRequestBodyData, buffer]);\n      });\n    }\n  });\nnext();\n}\n```\n. I've always been unsure of the need for such a checksum in APIs.  I've always felt that other means are already in place to address the issue.  \nAre you concerned that an unauthorized client might access your API?  There are tons of vetted token-sharing libraries (oAuth, etc) which allow for revokable and audit-able access per client.  \nAre you concerned that the data might be modified in transit?  Then use HTTPS.  HTTPS not enough?  Use an additional encryption library (like AES) and share keys with the client and server (although as web developers, we already have to trust HTTPS).  You can even combine the 2 and use the oAuth token as the per-device encryption key.\n. Ahh! The replay attack part makes sense!  I still feel that any checksum function is equally as \"backwards-engineerable\" as determining an encryption key (if you have the client), but I understand your use case.  \nI'm happy to hear that actionhero is helping to make games! That was the first use-case I had for the project :D  Are you able to share what games you are working on?\n. I'm not entirely sure what you are asking... is actionhero slow?  Is node.js in general slow?  Either way, both are open source, so if you can identify an issue, send in a note! \n. cool.  Good luck! \nLet us know how it goes on the mailing list. https://groups.google.com/forum/#!forum/actionhero-js\n. Embarrassing! Thank you for the fixes. I guess they were missed here https://github.com/evantahler/actionhero/pull/398\n. Can you be more specific?  Can you provide an example action and URL?\n. Ahh! That is correct behavior.\nIn the latest release we moved documentation to an action, leaving / as a 404.\nYou can control what the 'null' / / url does with routes:\njavascript\nexports.routes = {\n  all: [\n    { path: '/', action: 'status' }\n  ]\n};\n. with file, it sources index.html from public, which makes sense.  A new project set to api with no actions has nothing to respond with, let alone an action important enough to be root.  \nWhat would you suggest to return for / in this case?\n. If you want to keep the old behavior, bring over the new showDocumentation and set up a route to point to it.\n. In a freshly generated project, all you need to change is routes.js to: \njavascript\nexports.routes = {\n  all: [\n    { path: '/', action: 'showDocumentation' }\n  ]\n};\nand change api.config.servers.web.rootEndpointType = 'api'.\nDoes the above not work for you?\n. Good idea.  I think you want to set the values on self.connection._original_connection, even if there is no callback, so here's the relevant change: https://github.com/evantahler/actionhero/commit/928726dfb63bafd955747b6155aee3cefe82c6f4\n. docs updated https://github.com/evantahler/actionhero/commit/98b961353a2b236b85609eaf3c67d0bd6d2fa4b9\n. Awesome! Thanks!\n. Oh! This is awesome! \nI don't think that I ever really considered live route updates, but it should be possible. api.routes.loadRoutes() can optionally take an argument (which can be the existing routes @ api.routes.routes).  If you don't pass any args, it will load up the routes.js file.  Pass in the existing routes with your updates and you should be OK.\nBeing that we rely on redis so heavily, check out https://github.com/joeferner/redis-commander, perhaps you can integrate it\nA widget that might be useful is cluster status: how many nodes are running, how many nodes are on this server, uptime, etc.  If you want to get really fancy, you can add commands to add and kill off worker-servers in each node. \nAnother idea for a widget might be some resque status (which we use the task system).  There's a related issue in the node-resque project\n. hmm...  I would rephrase what you are asking to be 'can there be more than one public folder?'  \nInitializers within plugins have all the same power are a local initializer, so an implementation of this that wouldn't be crazy would do something akin to adding another directory to api.config.general.paths.public = [].  Right now, the staticFile initializer assumes that all assets should be located within a single directory, and URIs are meant to extend from that single point (IE: site.com/pictures/1.jpg maps to /path/to/actionhero/public/pictures/1.jpg)\nWith that in mind, I would suggest opening up a pull request which changes api.staticFile.path() in such a way to allow for \"trying again\" if the first path doesn't contain the asset in question. Then you could add secondary paths from within your initializer to serve up assets. \n. How's this project coming? \n. I've added the ability to serve static files from plugins https://github.com/evantahler/actionhero/pull/464\n. Cool idea! Other than accounting for some of the the other runtime setups, this looks good! (notes in-line)\n. Fancy! I like the implementation of grunt.startActionhero().  Thanks! \n. Seems fine to me! routes.js predates the config system, and I didn't want to break any backwards compatibility... but wanting different routes per NODE_ENVseems like an OK reason to make the change. Send in a PR! \n. Cool.\nThis type of change might also remove the need for some configuration options.  If you plan on moving static files to routes, do you think that having api.config.servers.web.urlPathForFiles needs to continue to exist?  What about the api equivalent, api.config.servers.web.urlPathForActions.   This would also greatly simplify determineRequestParams() in the web server.\nWe still probably want to keep the routing helpers, api.config.servers.web.simpleRouting and  api.config.servers.web.queryRouting, so think about how those would interact without the above options.\n. https://github.com/evantahler/actionhero/issues/450 is merged FYI\n. cool. good luck! \n. This is a good idea! Making the upgrade process less painful is a noble goal.\nI think that I still want to \"list\" all the configuration options (visibly) in the files. This makes development easier (and saves us having to parallel-y document the options somewhere).  Wether or not they are commented out or not I don't really have an opinion on.  Looking at projects like Rails, they tend to list the config options but comment them out. \nThere are a few places in the project where the initializers might also attempt to infer defaults.  If we know we will load the defaults from within actionhero's core, we don't need to do this any more! Would you mind taking a pass and trying to remove some of these?  Here are some examples:\n- https://github.com/evantahler/actionhero/blob/master/initializers/actions.js#L11-L13\n- https://github.com/evantahler/actionhero/blob/master/initializers/redis.js#L14\n. Thanks for checking the defaults! \nI'm open to reading plugin config in the same way, but lets make that a separate PR (as it adds some new, separate functionality).  \nThanks for all the work!\n. For testing, perhaps we make a git submodule with a very basic plugin that ads config, an action, and an initializer.  It doesn't have to do much, just to test that it works. \n. sorry for the delay; I've added some notes in-line\n. Sorry for the delay!\nI agree that a plugin shouldn't need to be able to add another plugin.  There are some use-cases for this (like how an authentication plugin might also require a database plugin), but I don't think we need to worry about this for now.  \nI do want to support multiple api.config.general.paths.public paths as discussed here, but can be a separate PR as well. \nI'll take a look at this again tonight. \n. here are some slight modifications to handle /public from within plugins as well https://github.com/evantahler/actionhero/pull/464\n. I would generally say that if you listed the string \"something.test\" as a param, that should be what is looked for.  That said, I understand the desire to validate the existence of nested data, so I'll look into it.  \nI think a better format for what you are asking for would be something like:\njavascript\naction: {\n  params: {\n    required: [ {something: 'test'} , 'otherThing' ]\n  }\n}\n. On second though, after thinking about this more, I do not feel that inspecting a deep JSON payload is something that actionhero should do.   The required/optional param filters are meant to be top-level sanity checks that a param is present, IE: url.com/action?something=1&otherthing=2.  In your case, you are actually asking more detailed data about the object \"something\", and it's properly \"test\".  \nYou can certainly inspect that value within your action/middleware, but checking for the existence of the param \"something\" is all I feel the framework should do.  So your action would be:\njavascript\naction: {\n  params: {\n    required: ['something' , 'otherThing' ]\n  }\n  run: function(api, connection, next){\n    if(typeof connection.params.something !== 'object' || connection.params.something.test == null){\n      connection.error = 'something.test is required';\n    }else{\n      // ...\n     }\n     next(connection, true);\n  }\n}\nI'll close this issue for now, but we can keep discussing if you want. \n. related to https://github.com/evantahler/actionhero/pull/328 and https://github.com/evantahler/actionhero/issues/314\n... also https://groups.google.com/forum/#!topic/actionhero-js/dfRS7U__Ao0\n. docs updated https://github.com/evantahler/actionhero/commit/e543417cd0d4b6c44ec9e25a282e3c2cbc9e77a3\n. The write you referring to is because we always want to update the readAt property  of the object.   You are correct that re-saving an object will reset the expire TTL.  This update should fix it.\nThe good news is that while the redis object wasn't being deleted, at least the API would still return  Error: Object expired, and stale data would not be consumed. \n. thanks! \n. In general, _start methods are not run from within grunt tasks (we call init and not start).  \nI agree that database connections should be preformed before the _start block, so I've updated the plugin https://github.com/evantahler/ah-sequelize-plugin/commit/8cd30e02738748e1aae3eb68ae66ddcacb1ffebd\n. Right now, there isn't a good guide for upgrading sadly. \nSome recent work has been done to load some new defaults (and not always require changes to your config files) https://github.com/evantahler/actionhero/pull/453.  However, between major releases, there are often changed/deprecated methods.  At the very least they are documented in the change logs (IE: https://github.com/evantahler/actionhero/releases/tag/v9.0.0 -> Breaking Changes) \nIf the community would help by keeping a guide on the wiki, that would be very useful! \n. Please provide more of stack trace.\n. Without more information,  I can't offer any help.  Closing \n. Eh, it would take a lot of modification of the tool to also set cookies like browser_fingerprint does.  Also, we only use the fingerprint parts to initially set the session cookie. Closing\n. implemented in https://github.com/evantahler/actionhero/pull/463\n. relevant docs https://github.com/evantahler/actionhero/commit/793dffaeaaa9557b624692014ba17beb7e5e6fd2\n. Websockect connections, by default, are private.  The clients aren't joined to any rooms, etc, and you can call actions in the normal way (docs here http://actionherojs.com/docs/servers/websocket.html#general).  Data will only be sent to the server (no other clients).  Just don't call client.roomAdd() from the client!\nYou can further lock this down by never calling api.chatRoom.add on your server and removing anything from api.config.general.startingChatRooms.  No clients can create rooms, so if none exist, no one can join any.\n. You can just call connection.send(message) on the server. In the client lib, the event message will be fired. So, client.on('message, function(m){ ... }).\nBe sure to add some descriptive content to the message you send from the sever (like perhaps {\"type\": 'message type'}) so you can route message types on the client.\n. Imported from https://github.com/evantahler/actionhero-tutorial/issues/8 from @bvcoskun\n. Error: The server experienced an internal error is the generic error returned to the client when there is something wrong with the action or middleware.  This comes with a 500 HTTP status code.\nWithout seeing your actions or middleware there's no help I can give.  Look at the sever logs (or console output) for more information.  It will show the stack trace\n. There may be something specific that is misconfigured in your test environment.  Turn on full logging in /config/log.js for the test env to make sure you can see the server output.  It will be noisy, but should help.\nYou can also try using request in your test (which will make a real HTTP request) and see if that helps. There are examples here \nYou can also always boot the server into the test environment NODE_ENV=test ./node_modules/.bin/action start and try it manually\n. I think we still want the domains enabled in NODE_ENV=test for situations like this.  You might want to test that a crash within an action doesn't take down the server and returns a 500 error (which is the point of that domain).  \nIf you remove the domain manually, the test should still fail, yes?  So, you are seeing an error, but you should see something other than timeout?\n. This is related to https://github.com/evantahler/actionhero/pull/489\nThe choice of using domains to wrap actions (in tests, in production, etc), is now exposed.  In general, using domains should be a choice.  It's \"safer\", but it does add overhead. \n. That message isn't anywhere in actionhero's source (or the source of packages it requires).  Search your node_modules for that error.  If you think there's a problem with one of your actions, paste the source here and we can take a look. \n. Looks like it might be a socket issuse.  What transports are you using, and if you are using websockets, can you try another engine?  https://github.com/balderdashy/sails/issues/1981\n. Bump.  Any luck?\n. oh well... keep us posted! That node-mailer plugin seems to be causing you some trouble.  Reach out to the author maybe?\n. Great digging!\nI'm more than happy to change how this line works.  We could String() everything at the very least, or only log objects that are Strings, Arrays, or Objects... \n. Hmm... that's a shame that the node_mailer plugin modifies the job object like that.  The job should just be the JSON that was saved to redis and back, which implicitly means that all the sub-types of the object created from it can be re-serialized again.  Adding the mail object to it (which then has a SMTP connection, which creates a buffer, etc) is generally in bad form IMO.    \nEither way, I've changed the logger per the note above: https://github.com/evantahler/actionhero/commit/48123af8001c5037765535077849b92cc3340d2e\n. Sure! \n9.4.1 is up https://github.com/evantahler/actionhero/releases/tag/v9.4.1\n. Will be solved by the lint branch: https://github.com/evantahler/actionhero/pull/476\n. Thanks! \n. Ha! Thanks. \n. cool.  I leave the available variables in the default config files so developers can see what options they might have. \n. The behavior you are describing actually sounds like Azure is actually closing off the connection when idle.  Either way, this makes sense.\nI would suggest rather than adding in an alreadyConnected variable, you use the stream.once method to more clearly show that you want some actions to happen on every connect event, and others to only happen once. \n. ok.  Thanks! \n. Github cannot merge this PR (because of https://github.com/evantahler/actionhero/pull/475), so I've made the changes manually here: https://github.com/evantahler/actionhero/commit/c772aebb2c8f8358496e07ee15a7d8402a678e04\n. Thanks! \n. doc changes related https://github.com/evantahler/actionhero/pull/477\n. That blog post is probably out of date now, but you can check the code in the plugin for up-to-date examples. \nThe meat of the problem is that AH uses a \"light\" router, and the transaction keys we really want to use are the action names: https://github.com/evantahler/ah-newrelic-plugin/blob/master/initializers/newrelic.js#L12.  That's the main part you need to implement. \n. Thanks! \n. Thank you for the great writeup!\nYes, you should ALWAYS define all the params your action expects!  However, the difference in behavior you were seeing in developerMode with reloading an action is that when you first boot the server we first build the list of allowed params first from actions and then augment that list from the routes.  However, on reloading an action, we were only rebuilding the params and not the routes.  Update pushed to master.\nThe more interesting question is should we be harsher with the params that are allowed into an action... I actually think that this behavior should never work, as you never said in the action that id was an input.  Thoughts?  I think we should remove this line:  https://github.com/evantahler/actionhero/blob/master/initializers/routes.js#L104\n. Removing the auto-adding of 'route' variables in this commit https://github.com/evantahler/actionhero/commit/449587190b8a0af9848e3dac9ffbeab70a6f7827\n. Cool, lets try it out! \n. If you check https://buttons.heroku.com/, it looks like you own the button.  Can you check with heroku support to update it?\n. thanks! \n. This is more of a Node question than actionhero, but yes, there are lots of ways to \"shell out\" from node.  The most basic is to literally exec your process from node:\njavascript\nvar exec = require('child_process').exec;\nchild = exec(\"/usr/bin/php /path/to/file.php\", function (error, stdout, stderr) {\n   ...\n});\nThis method doesn't provide output until the child process completes, but is the simplest.  Node is all about streams and events, so you can of course get events for each line as well:\n``` javascript\nvar spawn = require('child_process').spawn;\nvar php = spawn('/usr/bin/php', ['/path/to/file']);\nphp.stdout.on('data', function (data) {\n  console.log('stdout: ' + data);\n});\nphp.stderr.on('data', function (data) {\n  console.log('stderr: ' + data);\n});\nphp.on('close', function (code) {\n  console.log('child process exited with code ' + code);\n});\n```\nSuper easy! \n. Oh, you need a cron-based PHP script to call the actions?  Just use curl then! \n. I like that! As long as the old 'type less' params still work.  Send in abother PR. \n. Awesome! Thanks! \n. Ahh! Thanks. \n. The first hash (createCallbacks,allowedVerbs, etc) is api.connections which you must be logging... somewhere. The second hash (type, rawConnection) is a raw look at a connection object.  \nLooking at actionhero's master branch, I can't see anywhere where those would be fully dumped (even in debug).  Delete node_modules and try again?\n. Also, that's a fairly old version of actionhero.  There may have been something that could trigger this back then, but doing a quick compare of the v7.x tree (https://github.com/evantahler/actionhero/compare/v7.6.0...7.6.13) I don't see anything obvious\n. Thanks! \n. I'm a little confused about what you are asking for.  The only way to to interact with resque should be by enqueuing a job with various arguments (I guess those args could include an Error object).  As resque jobs can be worked by any node in the server, saving the output onto the api object doens't really make sense either.\nAs far as resque is concerned, the only way to \"return\" state about a job should be though the event emitters. \n. Ahh! Thank you for the details there.  Yes, I agree that this is currently incorrect.  There was a change to node-resque, and now the jobs work like most normal node functions: the first argument is an error, and the second is data.   We just forgot to update this within the jobWrapper.\nhttps://github.com/evantahler/actionhero/pull/499\nnow the output is as expected\n\n. From @jtmarmon via Gitter. \n. This probably has something to do with developmentMode and re-loading the file\n. nice catch! \nSend in a Pull Request @jtmarmon \n. (there's probably a similar bug in the task loader as well) \n. Thanks @s3bb1\n. I'm not entirely sure what you are saying here.  \nYes, in env.test, there should be no loggers active (which is a sensible default as you don't want to see output when you are testing).  If you modify the test logger as you have, you will then see logs.  console.log is not effected by actionhero's log levels, so in all cases console.log should produce stdout output.\nOn booting in test env, (which you probably shouldn't do anyway), note that lots of other things change.  For example, the web server's port change from 8080 to 18080.\n. Ahh! Can you share your test file?\n. It works fine as far as I can tell (OSX and Ubuntu).\nI'll close this for now... Repost something here if you can narrow down the culprit. \n. Oh... what node version and OS are you on?\n. Good luck.  I just tested on another computer with that same node version, and everything looks fine.  Perhaps add a task which console.log every so often so you can see if the whole server really does crash.\nAlso, you are sure that all of your initializers call next(), yes?  Even in the test env?\n. Yay! The system isn't broken. \n. actually, there's a bug here.  We shouldn't allow setting of content-type, but everything else is OK to be variable. \n. Good catch on the bug.  Since in all cases we either call api.routes.loadRoutes either with no options or the existing routes based on the existence of a file, it might be better to simply refactor api.routes.loadRoutes.  We could check for the file within the method, and clean up the IFs. \nThoughts?\n. Travis is buggy somtimes... re-running\n. Hmm, I think this is confusing things:\napi.routes.routesFile is a left-over from an old actionhero version before routes were listed within /config.  We can probably remove that now.  So in general, I would say the flow for loading routes should always be to 1) load the config and 2) then append any \"simple\" routes from actions.\nSo I think there should never be a case when checking for the file matters?  Is your project's route file in /config?\nThe only danger here is that if you change an action's name, we won't remove any old routes.  I think this is OK in development mode for now... \n. Thanks for being cautious by default! I think that enough time has passed that we can feel comfortable only supporting routes within /config.  The config system already reloads the application on config change, so you can be sure that routes will be re-loaded as needed.\n. Yeah, this is cool.   We've had the deprecation warning for long enough :D \nThanks! \n. The generators in both cases follow the \"small\" style.  I'm personally torn about this.  I want the smallest code footprint, so I personally like the generator style.  However, for new folks using the framework for the first time, I think having the code expanded with comments would be useful.\nAnyone have any other thoughts on the mater?\n@jtmarmon I would suggest preparing a PR to clean up the default actions either way :D\n. @jtmarmon Any progress on this?\n. closing in favor of https://github.com/evantahler/actionhero/pull/543\n. You can certainly append a unique ID with a task as an argument (node-uuid is great for this, remember you can't use integers).  However, the storage mechanism of redis does not allow for seeking based on ID (we use a list/array).  You would need to scan each and every element within the queue of tasks to be worked and look for that ID.  \nWe use node-resque as the backend for the task system, and there is a method to seek and delete tasks based on arguments (seeing as you have to scan and deserialize every task either way).  This would be available in actionhero at api.resque.queue.del().  Keep in mind this is a moderately (O(n) * list_length) operation, as all elements of the list are being scanned by redis.\n. Oh, and there is a similar method for delayed tasks  here https://github.com/taskrabbit/node-resque/blob/master/lib/queue.js#L122-L147\n. Cool. \nLinking the related method in node-resque for reference. https://github.com/taskrabbit/node-resque/blob/master/lib/queue.js#L149-L164\n. Please add the method to the documentation http://www.actionherojs.com/docs/core/tasks.html (check out the gh-pages branch in this repo). \n. docs for https://github.com/evantahler/actionhero/pull/510\n. Yeah, this is one of the things that NPM doesn't do so well :D\nI think the solution here has to do with nesting plugins.  The target/client application would require only your 'master' plugin, and that plugin in turn requires all the other plugins (via package.json).  This is kind of like how Rails requires active-support, active-record, etc. \nTry messing with api.config.paths.plugin within your plugin to append more paths to it:\njavascript\napi.config.general.paths.plugin.push(__dirname + '/../node_modules/master_plugin/node_modules');\nFiguring out the load order here is the tricky part.  It might work as-is just adding more relative paths within a config file within you plugin, or you may need to modify api.config.general.paths.plugin in an initializer later. \nAny changes you might need to make would be centralized into this file https://github.com/evantahler/actionhero/blob/master/initializers/configLoader.js\n. Hmm.. can you share more about the use case you are trying to get to work? Perhaps in a gist?  \nIf you are trying to make a project 'generator', it probably doesn't belong as part of the init/boot path (seperation of concerns).  Perhaps it should be a grunt plugin, or maybe we need a way to allow plugins to add \"binary\" commands to actionhero. \n. I've been thinking about this, and here's a tangential question:\nIt seems that the problem is not about having multiple npm install --save commands, but rather the modification of the config/api.js file (modifying api.config.general.plugins = []).  Is that correct?   I personally like requiring both steps because \"downloading a package\" is not the same as \"including a package at runtime\", and calling out that distinction I believe to be valuable.   I view api.config.general.plugins as a shorthand for a require() statement. \nBut lets take this to the community.  We could approach the plugin loading differently, perhaps including some sort of autoloader mechanism.  We could inspect ./node_modules for any package matching ah-*, or perhaps move that section out of config to another flat file.  There's also the option of moving this config intopackage.json, into a newah-pluginssection. \n. Actually... what if we movedapi.config.general.plugins` to it's own config file?  Yes, you would still need to write the full export-able JS, but if you are generating your own project, you can just write if from scratch:\njavascript\nexports.default = {\n  general: function(api){\n    return {\n     %%REPLACE%%\n}}}\nand you can then replace %%REPLACE%% with JSON.stringify(ArrayOfPlugins).\nWe use a template system like this already for the clientlibs and generators\n. Cool.  So the PR needed here would be to change api.config.general.plugins to api.config.plugins.plugins = [], and source that in its own file.  I'll close this issue and await the PR! \n. Closing this in favor of the PR\n. Good work tracking this down, but I think the real solution is more nuanced than what you suggested.\nFor example, if userID is a required param in an action, I would argue that POST /api/action?userId= would be a missing param (the string \"\" shouldn't count).   That said, other \"falsey\" values, like false should totally be allowed.  I think we need to do some typeof checking here.  It also shouldn't ever be possible to send null as a param.  The string \"null\" could happen, but we should fail on true null.\nAlso, please don't use the cacheTest test for testing this.  Use the specHelper and the basic API suite\n. Actually, this might be a good place for another config option.  Something like:\njavascript\napi.config.general.missingParamChecks = [null, '', undefined];\n. Looks good so far!\n- in the tests, please be sure to replace sanitizeMemberDetails methods to what they used to be after words (you can nest describe,before, and after blocks)\n- Please add a related pull request explaining this in the documentation (the gh-pages branch)\n. This is all great.  Thanks! \nIn the future you can run bundle update (like npm update) to update all the gems to the latest version.\n. Yeah, it's probably OK.  That is actionhero trying to name itself (for logging and cluster reasons).  The first choice for a name is passed in from ENV, but otherwise we try to use the public IP address of the server. \nIt gets weird if you have many servers/dynos because we can't identify which one has the error without distinct names, so perhaso you can use process.env.ACTIONHERO_TITLE to name each server/dyno\n. @mstdokumaci is correct.  In the cluster, each worker runs independently, so it undertakes the full boot procedure, including all the initializers.   The cluster boot handler itself is a thin wrapper on top of the normal actionhero worker just to manage logging, signaling, sharing ports, and restarts.  \nThat said, there's no reason you can't put logic within your _start() methods which act differently if you are are a cluster.worker or not.\n. Thanks! https://github.com/evantahler/actionhero/commit/f0a7496887da2660e2d015360bd2fa82b62ee3ef\n. solves https://github.com/evantahler/actionhero/issues/521\n. Hey @neilstuartcraig can you update this and get the test suite passing?\n. Are you asking about how to run/build the test suite?\nnpm test should be all you need to run it locally.  If you look at package.json you can see that npm test is a wrapper for the rather convoluted command:\necho \\\"** FakeRedis -> `echo $FAKEREDIS`, ActionDomains -> `echo $ACTIONDOMAINS` **\\\" && NODE_ENV=test node ./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha\nBreaking this down, the parts are:\n- Determine if we are running the test suite against a real redis server or the in-memory 'fakeredis', also if we should enable a separate domain for each request or not via actionDomains\n  - you can see via the travis.ci test matrix that we want to run the test suite against all possible permutations of these variables\n  - However, you really only need to run this test suite with the defaults to get started, and travis will test all the permutations for you.  (It's only important to test them all locally if you are messing with those sub-systems)\n- we set NODE_ENV=test in the command so we can use those config values.\n  - This lets us have separate options in test, like a separate HTTP port or redis DB. \n  - check those config files to learn more\n- we use the istanbul test coverage tool to inspect how much of the project is actually tested\n- finally we call mocha, which is the actual testing library. \n  - mocha knows to look for a /test folder, and then reads mocha.opts to know which test files to run\nYou can run only specific tests with commands like this: NODE_ENV=test ./node_modules/.bin/mocha /test/path/to/file -g 'matcher'\nI would suggest you first checkout the master branch and ensure you can run the test suite and it passes.  Then, you can run your branch and see where the changes are.  The best advice for debugging I can give is to re-enable logging in the test NODE_ENV (here) and run a single test/file\n- THE TEST SUITE IS ONLY EXPECTED TO RUN ON *nix PLATFORMS (osx, ubuntu, etc).  If you are on windows, you might be out of luck :/\n. Once you fix the existing test suite, we can sort out how to test the new features.   To test the generator, you will probably need to shell out and make a new project in /tmp\n. Oh, I don't really care bout the condition of your conditional.  Just the spaces :D\n. Thanks for your work!\nNo, I don't have a PR guide... feel free to make one!  In general, I follow the rule that \"contain everything you need for the future... and minimize the code to do so\".  So in your example, I think this one PR has the basics with the generate flag.  The other bullets you mention can be updates to the feature later on. \nRegarding tests for the generators, I wrote this story to capture the fact that we have no tests :( \nhttps://github.com/evantahler/actionhero/pull/523#issuecomment-68306025\n. I just tested with local and global actionhero, and it works OK.  What's you:\n- os\n- node version\n- npm version\nCan you uninstall your global actionhero npm uninstall -g actionhero and test locally?\n. Yeah, it's probably best to avoid global modules whenever possible.\nThanks!\nOn Tuesday, December 16, 2014, Jason Marmon notifications@github.com\nwrote:\n\nClosed #524 https://github.com/evantahler/actionhero/issues/524.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/evantahler/actionhero/issues/524#event-208700912.\n\n\nLet's blame the phone for the typos...\n. Will be solved by https://github.com/evantahler/actionhero/pull/528\n. You can certainly use sockets (that's what I use in production behind nginx).  The production section of my config/servers/web.js looks like this:\njavascript\nexports.production = { \n  servers: {\n    web: function(api){\n      return {\n        port: '/home/USER/www/APP/current/tmp/sockets/actionhero.sock',\n        bindIP: null,\n        metadataOptions: {\n          serverInformation: false,\n          requesterInformation: false\n        }\n      }\n    }\n  }\n}\nI am however going to guess that the fact that you are using HTTP vs socket is not the cause of this problem.  I've heard some other users mention an unresponsive client after prolonged use.  I'm personally unable to reproduce this, but please contact the folks on this thread and try and see if you can find the cause! https://groups.google.com/forum/#!topic/actionhero-js/8uvlY2X02_w\n. Closing this issue.  Re-open a new one if somethign goes wrong \n. Here's a sanitized version of one of my working nginx config files for reference.  A few callouts:\n- Note the proxy-pass format to the socket: proxy_pass http://unix:/path/to/socket\n- Note some of the extra work you need to have for the websocket upgrade headers (the primus directive)\n```\nuser  nobody;\nworker_processes  4;\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\nevents {\n  worker_connections 1024;\n  accept_mutex on;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    server_tokens off;\n    sendfile        on;\n    keepalive_timeout  65;\nset_real_ip_from  X.X.X.X/24;\nreal_ip_header    X-Forwarded-For;\n\ngzip on;\ngzip_http_version 1.0;\ngzip_comp_level 9;\ngzip_proxied any;\ngzip_types text/plain text/xml text/css text/comma-separated-values text/javascript application/x-javascript font/ttf font/otf image/svg+xml application/atom+xml;\n\nlog_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\" \"$http_x_forwarded_for\" $request_time';\n\nserver {\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n    proxy_set_header X_FORWARDED_PROTO https;\n    proxy_redirect off;\n\n    listen       80;\n    server_name  _;\n\n    access_log  /var/log/nginx/access.log  main;\n    error_log   /var/log/nginx/error.log;\n\n    root        /home/XXUSERXX/XXAPPLICATIONXX/www/current/public/;\n    try_files /$uri/index.html /cache/$uri/index.html /$uri.html /cache/$uri.html /$uri /cache/$uri @app;\n\n    client_max_body_size 50M;\n\n    location /primus {\n        proxy_http_version 1.1;\n        proxy_buffering off;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_set_header Host $host;\n\n        proxy_pass http://unix:/home/XXUSERXX/www/XXAPPLICATIONXX/shared/tmp/sockets/actionhero.sock;\n    }\n\n    location / {\n        proxy_http_version 1.1;\n        proxy_buffering off;\n        proxy_cache_bypass $http_pragma $http_authorization;\n        proxy_no_cache $http_pragma $http_authorization;\n\n        proxy_pass http://unix:/home/XXUSERXX/www/XXAPPLICATIONXX/shared/tmp/sockets/actionhero.sock;\n    }\n}\n\n}\n```\n. Added this to the documentation site: http://www.actionherojs.com/docs/ops/production-notes.html\n. Ahh, scheduler should be false.  Updated. \n--workers as mentioned here isn't related to this.  The command line argument for --workers is how many seperate actionhero processes are to be run under a node cluster.  These workers are \"internal\" to actionhero to process tasks.  I really want to use the word \"worker threads\", but that would be inaccurate.  I'll try to think of a better name than \"worker\" here... perhaps \"parallel executor\" or something\n. Let's call them \"taskProcessors\".  This would match the naming convention action's have. \n. @crrobinson14 The way it is set up in the example will create a new connection.  That tends to be a wash with sharing the connection and increasing the pool size* as redis connections have fairly low overhead, and this way you can run the tasks off of connection A and leave connection B open for pub/sub, cache, etc.   \n*it's a pool, so there are always more than on physical TCP connection.   I opted for clarity here.  \nYou can pass an active, pre-established redis connection to resque workers/connections, but I don't think we've expanded that out into actionhero\n. I installed web storm to check this out. \nIt looks like I can step over properly to me?  I made an initializer with a break point.  At first the variable tester is undefined, and then I \"step over\" once, and the variable is defined.  This seems correct to me.  Can you add more detail?\n\n\n. Actions look like they are working fine as well \n\nI'm closing this issue, as this seems to have to do with websorm / webstorm config, and not the actionhero library.  I've never used webstorm until this issue, so I'm not in a place to help you out.  I'm on OSX Yosemite also with node v0.10.33\nTry the mailing list or the chat\n. You certainly shouldn't need to clone the whole project.  If you use npm to install actionhero locally within your project, the binary is located at ./node_modules/.bin/actionhero or ./node_modules/actionhero/bin/actionhero\n. For reference, MASTER is always deployed to http://demo.actionherojs.com.  This page requires a few actions to be active within the sevrer. \n. Closing in favor of https://github.com/evantahler/actionhero/pull/551\n. closing in favor of the PR https://github.com/evantahler/actionhero/pull/535 (WIP)\n. Looks good! \nCould you please add a test for this that shows 1) that it works normally and 2) that you can modify that method and change the format?  This way we can 'lock in' the fact that the method is meant to be overwritable. \nThanks! \n. You could add it here.  There are already clients set up and connected to a room https://github.com/evantahler/actionhero/blob/master/test/core/actionCluster.js#L119-L129\n. You'll need to update your branch on master... the chat system has seen some refactoring as of late\n. Thanks for working on the tests!\nI ended up copying your code into a new branch https://github.com/evantahler/actionhero/pull/546 rather than make you go back and make some small changes.  Generally, you want to to test this kind of thing agianst a generic testServer, as this method applies to all transports which can chat... not just websockets.\nThanks for your work! \n. This happens because we signal the client to shutdown when turn off the server: https://github.com/evantahler/actionhero/blob/master/servers/websocket.js#L60-L62\n. Closing in favor of PR https://github.com/evantahler/actionhero/pull/534\n. closing in favor of https://github.com/evantahler/actionhero/pull/549\n. Closing in favor of PR https://github.com/evantahler/actionhero/pull/559\n. Hi @jackbit.  Saddly, you have a lot of plugins there, so I can't really help you out.  The memory hog could be any number of those plugins and their dependancies... or you just might have a lot of traffic!   Start playing around with heap-dumps, and you can at least start by counting up the types of objects you have which are filling up your ram.  Perhaps you have a ton of un-collected DB model instances (sequelize) or email templates (nodemailer).\nI can confirm that a \"plain\" actionhero server running for a few weeks shouldn't go over ~20mb with \"reasonable\" load \n. Looks great! \n. Added to the v10 release & release notes https://gist.github.com/evantahler/f38ee2834d79f52f6996\n. Ha! Thanks.  This will all be changing with the new release of course.\n. Whatever's going on in this branch really makes Travis mad! Do the tests pass locally?\n. This one took me a while!  It turns out the we outright replace one of the actions in the developerMode test.  Istanbul was getting really confused because the test introduced a module it didn't have before, and crashed/hung.  I ended up re-writing your branch here to learn all this https://github.com/evantahler/actionhero/pull/545\n. Ha! It always is.  Static Analysis is basically statistics and witchcraft.  I let the Istanbul folks know https://github.com/gotwarlost/istanbul/issues/296\n. After looking into this, this is sadly way out of scope.  Having an XMPP server would be awesome, but the protocol requires a lot call/response commands to coded in.\n. Also closes https://github.com/evantahler/actionhero/issues/508\n. This branch is a cleanup of https://github.com/evantahler/actionhero/pull/532 from @vahid-sohrabloo\n. Added to the v10 release & release notes https://gist.github.com/evantahler/f38ee2834d79f52f6996\n. Thanks! looks like I need to update the spelling in the navigation too :D\n. https://github.com/evantahler/actionhero-tutorial/pull/12\n. https://github.com/evantahler/ah-sample-plugin/commit/0fce2f927179ee018670c06f84d0382d6e4d3019\n. https://github.com/evantahler/ah-airbrake-plugin/commit/ab71c479d717fc58cfea12847e3fd3b69aeca238\n. https://github.com/evantahler/ah-sequelize-plugin/commit/7b2c376b4042ed8bc044bf55d014b7a08a698271\n. https://github.com/evantahler/ah-bugsnag-plugin/commit/f9b3a0b5155b3f7a9fb266b6b42f29a408759d71\n. Actually.... I deleted this module :D\nI don't know of anyone using it. \n. https://github.com/evantahler/ah-newrelic-plugin/commit/b6195fb03ac3bfa7689ccf910a93f591118e084b\n. Would close https://github.com/evantahler/actionhero/issues/539\n. And we can move the current homepage to an \"in-depth overview\"-type page\n. closing in favor of https://github.com/evantahler/actionhero/pull/566\n. This will require an API change to all actions.  Something like:\n``` javascript\nexports.randomNumber = {\n  name: 'randomNumber',\n  description: 'I am an API method which will generate a random number',\n  outputExample: {\n    randomNumber: 0.123\n  },\nrun: function(api, params, response, connection, next){\n    response.randomNumber = Math.random();\n    next(response, true);\n  }\n};\n```\nParams would be a snapshot of connection.params at the time the action was invoked.  It becomes important to not store any state about the action's name, status, etc on the connection itself, and that data is passed down the actionProcessor chain. \n. And middleware changes acordingly\n. One issue:\nWe should never try to update the state of the connection at the end of an action:  https://github.com/evantahler/actionhero/blob/master/initializers/actionProcessor.js#L81-L84\nThis can cause race conditions when reporting.  Rather, we should just pass the data to the callback.\nIn actions themselves, you shouldn't modify the connection (unless you are explicitly doing so, like with authentication).  Changing connection.response is really a lie here, as you are changing actionProcessor.proxyConnect.  The _originalConnection passthough to modify the connection itself is very misleading, as we are re-using the nouns.\n. I'll add some code soon in a PR we can talk about (talking in the abstract is hard).  Basically, more and more folks expect changes to the connection object to persist.  Middleware doing connection.authorized = true; connection.userId = 123 is expected to work.  While the _originalConnection stuck was a hack to expose the underlying object, I do think we can do better ro reduce confusion for new folks. \nIn @slattery's examples, you would still have access to connection.rawConnection and fingerprint would promote to connection.fingerprint.\nThe reason for _originalConnection was to pass a \"snapshot\" of the state of the params to each action, but if we split out the snapshot as a separate argument to the middleware and actions (see above psudeo code), there's no reason to make the snapshot. \n. Solved by https://github.com/evantahler/actionhero/pull/615\n. The keys command (as you note) is certainly slow, and I agree that this is a silly thing to do at boot.  The method can remain of corse, but we shouldn't invoke it automatically.\nRemoved! 7ed35674e3c2916d95e9e56c9927ff5ed6926306\n. Whoops! That comment block hasn't been updated in a while.  I've fixed it:\n- https://github.com/evantahler/actionhero/commit/61f8a45f9bf5c50c88ca461f493771c89c61fa19\n- https://github.com/evantahler/actionhero/commit/330d497c6af79d3f3d070f0c065cc6a342d3e7e7\nThe opposite is actually true now.  If you want both /api/user/:userId and /api/user to match, that would require 2 routes.\n. What version of actionhero are you using?  We should already be accounting for this:\n1) try 5 times to 'boot' the webserver and bind to the socket file https://github.com/evantahler/actionhero/blob/master/servers/web.js#L52-L66\n2) If there is a failure, we then try to remove the file that's already there and try again https://github.com/evantahler/actionhero/blob/master/servers/web.js#L446-L456.\nYou may be having trouble if actionhero can't actually delete that socket file... perhaps the forever process is run by another user, sudo, etc.\n. cool.  Thanks!\n. Much better looking.  Thanks! \n. In general, I like this a lot.  I think this better in a few ways:\n- having 1 generic \"add middleware\" that can take an object which may have both a pre and post block is better than 2 methods to add only a pre or post block.\n- I think for the majority of folks, choosing the middleware on the action will be more useful than creating global middleware.\nThat said, I can still think of global (or used most-of-the-time middleware), like a rate-limiter or auth plugins, would be usefule.  Perhaps api.actions.addMiddleware's arguments are extended to look like:\njavascript\napi.actions.addMiddleware('jwtSession', {\n  preprocess: function(connection, actionTemplate, next) { \n     // ... \n     next(connection, true);\n  },\n  postprocess: function(connection, actionTemplate, toRender, next) { \n     // ... \n     next(connection, toRender);\n  },\n  global: true // <-- here\n});\nWhere global = true can be set to toggle this middleware on for all actions.  Then, in the action's defintion regarding middleware you can do:\njavascript\nmiddleware: {\n    preprocess: {\n        jwtSession: {\n            loadFullUser: true\n        },\n        quotaManager: {}\n    },\n    postprocess: {\n        requestAuditor: {}\n    },\n    ignoreGlobals: true // <--- here\n},\nI am 100% OK with this PR removing the old middleware stack in favor of the new style if the global considerations are accounted for.  I do not want to have a state in the project with both \"styles\" of middleware are supported (because it is confusing and 2x the work to manage) \n. Nice! Feel free to break anything you want :D \nI've started the v11 milestone, and this is part of it! \n. For the test suite, you can always add actions within: https://github.com/evantahler/actionhero/blob/master/test/servers/web.js#L148-L172\n. @crrobinson14 What do you want to do with this PR?  I think the global flag should be added here... and we should remove the old pre/post processors all in one go. \n. no worries!  Just checking in. \n. Yeah, feel free to break everything (in order to make it better)!\nv12 will be a breaking change already because of this: https://github.com/evantahler/actionhero/pull/615.  \nPlease build this PR against the v11 branch: https://github.com/evantahler/actionhero/pull/623.  This means that the API changes to:\njavascript\napi.actions.addMiddleware('jwtSession', {\n  preprocess: function(data, next) { \n     // ... \n     next(error);\n  },\n  postprocess: function(data, next) { \n     // ... \n     next(error);\n  },\n  global: true // <-- here\n});\nwhere \njavascript\ndata = {\n  connection: connection,\n  action: 'randomNumber',\n  toProcess: true,\n  toRender: true,\n  messageCount: 123,\n  actionTemplate: {...}\n  params: { action: 'randomNumber', apiVersion: 1 },\n  actionStartTime: 123,\n  response: {},\n}\nSo:\n-  toRender is now data.toRender\n-  actionTemplate is now data.actionTemplate\n. I got bored waiting... so I did this myself: https://github.com/evantahler/actionhero/pull/625\n. Everyone move the conversation over here! https://github.com/evantahler/actionhero/pull/625\n. ... and the ideas in this thread are awesome.  Please check https://github.com/evantahler/actionhero/pull/625 to make sure that I actually captured everyone's thoughts! \n. This PR fixes a race condition which would result in the wrong messageIds being sent from the server (compared to what the client expected).  This only occurred when you joined a room before primus was \"fully\" connected, or you rapidly connected and disconnected. \nReported by @crrobinson14 \n. Great, Thanks!\n. Can you provide an example of what this fixes?\n. Awesome!\nPlease add a test for this (probably in this section) https://github.com/evantahler/actionhero/blob/master/test/servers/web.js#L612-L627.  This way we can ensure that it doesn't get broken again. \n. Thanks! \n. Looks like @S3bb1 took care of this! \nClosing. \n. Can you provide an example of what you are seeing?  \"words\" is for the chat system, params is for actions. \n. ahh! It looks like this is actually the problem here: https://github.com/evantahler/actionhero/blob/master/servers/websocket.js#L230\nThe good news is since say is the only \"verb\" that relies on message order, it should be easy to fix.  I'll take a look in a few days.\n. This will be solved here https://github.com/evantahler/actionhero/pull/577\n. Perhaps this comes provided with actionhero, just like the ws client does?\n. Lots of updates made! \nNew package published; old package removed https://github.com/evantahler/actionhero-client\n. The problem is probably here (https://github.com/evantahler/actionhero/blob/master/servers/web.js#L363) with the form parser.  Does this only happen with POST/PUT requests?  I assume GET is OK?  \nSend in a pull request! (It will be important that you also provide a test that demonstrates this.  I imagine crafting a relevant test will actually be harder than the solution) \n. Sure, please send a Pull request!   You can probably add that code around here https://github.com/evantahler/actionhero/blob/master/servers/web.js#L199\nI'm unable to test this, so I'm relying on you. \n. I'm not sure what you are showing us here.  Why are you making a new HTTP server?\n. I'm having trouble understanding why you want extra emitters. The web\nserver should also be hard to access out of scope.  I thought you just\nwanted an extra \"if\" to handle missing headers?\nPlease send a pull request so we can see what you have in mind!  I'm\nlocking this issue, and we can continue discussing code.  It will be much\nclearer that way.\nOn Friday, February 13, 2015, Edwin Liu notifications@github.com wrote:\n\nit is not create new HTTP server , it is exist in web.js file\nhttps://github.com/evantahler/actionhero/blob/master/servers/web.js#L41\nwhat I do is only add\nserver.emit('preProcessRequest', res);\nserver.emit('postProcessRequest', res);\nthen maybe actionhero can public handleRequest to user\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/evantahler/actionhero/issues/579#issuecomment-74228496\n.\n\n\nLet's blame the phone for the typos...\n. nice.\n. You can update this branch and send a new PR from it!\n. This is a great catch.  Can you add a test or 2 showing that only params allowed per action are passed into the action?  \nProbably belongs in test/core/api.js\n. awesome.  Thanks!\n. Thanks! \n. Thanks folks! \n. Thanks! https://github.com/evantahler/actionhero/commit/2226f54359ecabd2b6297df794c9898c970b9c0a\n. You are probably right! Please send in a pull request adding a \"trace\"\nlevel and updating the settings.\nOn Friday, February 13, 2015, Greg Coonrod notifications@github.com wrote:\n\nIs this really necessary? What value does this provide at a debug level?\nIMO, these kinds of messages should be at a trace level.\n2015-02-13 09:46:31 - debug: [10.137.169.221actionhero-10.137.169.221] worker: polling default {\"workerId\":1}\n2015-02-13 09:46:31 - debug: [10.137.169.221actionhero-10.137.169.221] worker: paused {\"workerId\":1}\n2015-02-13 09:46:31 - debug: [10.137.169.221actionhero-10.137.169.221] resque scheduler polling\n2015-02-13 09:46:32 - debug: [10.137.169.221actionhero-10.137.169.221] worker: polling default {\"workerId\":1}\n2015-02-13 09:46:32 - debug: [10.137.169.221actionhero-10.137.169.221] worker: paused {\"workerId\":1}\n2015-02-13 09:46:32 - debug: [10.137.169.221actionhero-10.137.169.221] resque scheduler polling\n2015-02-13 09:46:33 - debug: [10.137.169.221actionhero-10.137.169.221] worker: polling default {\"workerId\":1}\n2015-02-13 09:46:33 - debug: [10.137.169.221actionhero-10.137.169.221] worker: paused {\"workerId\":1}\n2015-02-13 09:46:33 - debug: [10.137.169.221actionhero-10.137.169.221] resque scheduler polling\n2015-02-13 09:46:34 - debug: [10.137.169.221actionhero-10.137.169.221] worker: polling default {\"workerId\":1}\n2015-02-13 09:46:34 - debug: [10.137.169.221actionhero-10.137.169.221] worker: paused {\"workerId\":1}\n2015-02-13 09:46:34 - debug: [10.137.169.221actionhero-10.137.169.221] resque scheduler polling\n2015-02-13 09:46:35 - debug: [10.137.169.221actionhero-10.137.169.221] worker: polling default {\"workerId\":1}\n2015-02-13 09:46:35 - debug: [10.137.169.221actionhero-10.137.169.221] worker: paused {\"workerId\":1}\n2015-02-13 09:46:35 - debug: [10.137.169.221actionhero-10.137.169.221] resque scheduler polling\n2015-02-13 09:46:36 - debug: [10.137.169.221actionhero-10.137.169.221] worker: polling default {\"workerId\":1}\n2015-02-13 09:46:36 - debug: [10.137.169.221actionhero-10.137.169.221] worker: paused {\"workerId\":1}\n2015-02-13 09:46:36 - debug: [10.137.169.221actionhero-10.137.169.221] resque scheduler polling\n2015-02-13 09:46:37 - debug: [10.137.169.221actionhero-10.137.169.221] worker: polling default {\"workerId\":1}\n2015-02-13 09:46:37 - debug: [10.137.169.221actionhero-10.137.169.221] worker: paused {\"workerId\":1}\n2015-02-13 09:46:37 - debug: [10.137.169.221actionhero-10.137.169.221] resque scheduler polling\n2015-02-13 09:46:38 - debug: [10.137.169.221actionhero-10.137.169.221] worker: polling default {\"workerId\":1}\n2015-02-13 09:46:38 - debug: [10.137.169.221actionhero-10.137.169.221] worker: paused {\"workerId\":1}\n2015-02-13 09:46:38 - debug: [10.137.169.221actionhero-10.137.169.221] resque scheduler polling\n2015-02-13 09:46:39 - debug: [10.137.169.221actionhero-10.137.169.221] worker: polling default {\"workerId\":1}\n2015-02-13 09:46:39 - debug: [10.137.169.221actionhero-10.137.169.221] worker: paused {\"workerId\":1}\n2015-02-13 09:46:39 - debug: [10.137.169.221actionhero-10.137.169.221] resque scheduler polling\n2015-02-13 09:46:40 - debug: [10.137.169.221actionhero-10.137.169.221] worker: polling default {\"workerId\":1}\n2015-02-13 09:46:40 - debug: [10.137.169.221actionhero-10.137.169.221] worker: paused {\"workerId\":1}\n2015-02-13 09:46:40 - debug: [10.137.169.221actionhero-10.137.169.221] resque scheduler polling\n2015-02-13 09:46:41 - debug: [10.137.169.221actionhero-10.137.169.221] worker: polling default {\"workerId\":1}\n2015-02-13 09:46:41 - debug: [10.137.169.221actionhero-10.137.169.221] worker: paused {\"workerId\":1}\n2015-02-13 09:46:41 - debug: [10.137.169.221actionhero-10.137.169.221] resque scheduler polling\n2015-02-13 09:46:42 - debug: [10.137.169.221actionhero-10.137.169.221] worker: polling default {\"workerId\":1}\n2015-02-13 09:46:42 - debug: [10.137.169.221actionhero-10.137.169.221] worker: paused {\"workerId\":1}\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/evantahler/actionhero/issues/587.\n\n\nLet's blame the phone for the typos...\n. Closed by https://github.com/evantahler/actionhero/pull/595\n. As far as I know, most folks are running their servers in info level or higher.  It's a nuanced art choosing between trace and debug (especially because it is new).  If you want to make a change, please send in in a pull request!  We have the new trace level now. \nIMO, the only thing that was missed in the previous commit was this: https://github.com/evantahler/actionhero/commit/805eac4a4a1ce6ebf6ff602585c9a99291bdfe9c\n. Awesome! \n. How are you making connections?  Are you using the built in servers?  What OS, node version, and actionhero version are you using?\nYou can enable multiple servers simply with the config files (enabled = true) that are generated along with a new project.  Actionhero comes with a web (http/s), websocket (primus), and tcp server.    Yes, the websocket server requires the web server. \nYou can choose the underlying websocket transport you want with primus (like engine.io).\n. Closing due to lack of communication\n. If you are only seeing the error in test, I'll bet that the java websocket is doing some strange things.  Can you confirm that browers-based ws is OK?  Also, please try out actionhero 10.x.  We've made a number of fixes since then.\n. Lol!\nYes, I try to keep the semver rules in place (break = major, new features = minor).  I was pretty lax about it pre v7.0.0 or so... but I learned! \n. What I guess we really need to do is take a poll:\n- what version of node are you on\n- are you able to upgrade your node version or boot your app with --harmony flags?\n- will moving to generators make you unable to use actionhero?\nThe big issue here is how you deploy.  If you are heroku, you can use iojs.  If you are on elastic beanstalk, you can't.\n. ... how do we run a good survey?\n. Moved to the v12 milestone...\n. As of now (Dec 2015), over 50% of \"commercial node.js projects\" run v0.10.x\nhttps://semaphoreci.com/blog/2015/12/15/nodejs-version-usage-in-commercial-projects-2015-edition.html\n. I'm confused.  \nNode is backwards compatible.  Because we want to support the majority, actionhero core will run on node v0.10 for now.  That said, actionhero will work on every version of node/ioJS upwards.  While the core doesn't use any of the modern features, you can certainly use them within your actions/tasks/initializers if you now the version of node which you run on will locked. \nThe example from @heavyk show cases an action with modern features you can have today.\n. Ah, so the issues are with transpilers and not ES6 at all... which, if you were really using ES6 all the way though, you wouldn't need?\nAnyway, that note for Babel is really good!   Can you open a PR to add this to the documentation?  Probably in the running-actionhero section\n. Many of our dependent package (ws, qs, etc) have stated that they will start only supporting node >=4.0.0 going forward.  That means we need to start doing the same.\nVersion 13 of actionhero will target only >= v4.0.0... which will make this more of a reality. \n. Thanks @S3bb1!\n. This will fix the broken io.js tests on master\n. Thanks for doing this! There's probably a few other things that should be this new trace level:\n- Loading files: https://github.com/evantahler/actionhero/blob/master/actionhero.js#L105\n- Logging about the Logger: https://github.com/evantahler/actionhero/blob/master/initializers/logger.js#L48\n- Route Info: https://github.com/evantahler/actionhero/blob/master/initializers/routes.js#L105 and https://github.com/evantahler/actionhero/blob/master/initializers/routes.js#L117\n. Looks like you haven't actually tried to log something at the trace level, it blows us: We need to tell winston the CLI color for our new level, so the logger config block becomes: \n``` js\napi.logger = new (winston.Logger)({\n      levels: {\n        emerg: 8,\n        alert: 7,\n        crit: 6,\n        error: 5,\n        warning: 4,\n        notice: 3,\n        info: 2,\n        debug: 1,\n        trace: 0\n      },\n  colors: {\n    trace: 'magenta',\n    input: 'grey',\n    verbose: 'cyan',\n    prompt: 'grey',\n    debug: 'blue',\n    info: 'green',\n    data: 'grey',\n    help: 'cyan',\n    warn: 'yellow',\n    error: 'red'\n  },\n\n  transports: transports\n});\n\n```\nwe had been previously lucking out because the names of levels were ones Winston had preset as defaults, but trace is new. \n. This is going to be reverted via https://github.com/evantahler/actionhero/pull/712\n. Sharing a name with an action shouldn't be a problem.  \nIn a fresh actionhero project, I copied in your config, your task, and made an action with the same name.  Check out my boot log:\n```\nnpm start\n\nmy_actionhero_project@0.0.1 start /Users/evantahler/Desktop/test\nactionhero start\n\ninfo: actionhero >> start\n2015-02-24 22:56:47 - notice:  starting actionhero \n2015-02-24 22:56:47 - warning: running with fakeredis\n2015-02-24 22:56:47 - notice: pid: 53756\n2015-02-24 22:56:47 - notice: server ID: 10.0.1.5\n2015-02-24 22:56:47 - info: ensuring the existence of the chatRoom: defaultRoom\n2015-02-24 22:56:47 - info: ensuring the existence of the chatRoom: anotherRoom\n2015-02-24 22:56:47 - info: resque scheduler started\n2015-02-24 22:56:47 - notice: starting server: web\n2015-02-24 22:56:47 - notice: starting server: websocket\n2015-02-24 22:56:48 - info: actionhero member 10.0.1.5 has joined the cluster\n2015-02-24 22:56:48 - info: enqueuing periodic task: metric_push\n2015-02-24 22:56:48 - notice: environment: development\n```\nYou are missing the line info: enqueuing periodic task: metric_push, which means that your app never enqueued that task, thinking it is already enqueued somewhere.  If you are using redis, you may have an old version of that task enqueued, perhaps with a very slow frequency, etc.  You can empty redis with redis-cli flushdb and reboot.  Actionhero will re-enque this task for you.\n. Thanks! \n. great! \n. whoops! Thanks! \n. Thanks for all your work!\nRegrading the queue methods, you can link folks here: https://github.com/taskrabbit/node-resque#queue-managment\n. Oh yeah! That should be updated to pass the err to next() as well.  Good call/catch\n. I'm unable to reproduce this.  Can you share some more code/your file hierarchy?\nI did find a bug where some custom initializers weren't getting watched (if they didn't have a init method).  Fixed here https://github.com/evantahler/actionhero/commit/b8c503c517f03d53b69c90d095d929cbddaf0ea3\nI also added some path normalization to the watch method... which might have been your issue?  \n. Oh, that's just something wacky with the way that glob is dealing with the files.  It's hard to say what they are relative to, so absolute paths are always best:\n``` js\nvar glob = require(\"glob\");\nvar _    = require(\"lodash\");\nmodule.exports = {\n  initialize: function(api, next){\n    glob(\"lib/*.js\", {}, function (err, files) {\n      _.each(files, function(file){\n        api.watchFileAndAct(__dirname + '/../' + file, function(){\n          api.log('rebooting due to config change: ' + file, 'info');\n          api.commands.restart.call(api._self);\n        });\n      });\nnext();\n});\n\n}\n};\n``\n. Fine by me!\n. Your original thought was correct. That was a bug that was fixed in the latest release. https://github.com/evantahler/actionhero/issues/582\n. That line indicates you are missing a config fromconfig/errors.js`, specifically this: https://github.com/evantahler/actionhero/blob/master/config/errors.js#L22-L24\n. Thanks for fixing the typo, but I've removed the fork banner in this commit https://github.com/evantahler/actionhero/commit/1a4f8560c065eefe54ef2bfdd9d3debd7d55f160\nThe banner blocks the menu dropdown in mobile pages.  You can add it back if you like as long as you ensure the banner doesn't exist on the mobile and tablet views.  Use CSS media queries for this. \n. That's not really how the task system works.  You could write a grunt task to enqueue a task, or you could boot another actionhero server to act as a worker (with or without a specific work queue), but executing a task in-line is not something you should be able to do.   Can you talk more about your use case?\nYou can read up on how https://github.com/resque/resque and our fork, https://github.com/taskrabbit/node-resque work regarding enqueuing and workers. \n. The way to handle this properly is a 2-phase approach.    Have a recurring\ntask run each and every minute.  Have that task check what time it is, and\nif it is the proper time, then enqueue a second task (that long one you\nmention).  You can start doing fancy thing with that first task, like use\napi.cache to store the last time it ran, how long it takes, etc.\nAgain, you don't want to rely on actual \"cron\" or something similar because\nit makes one server more \"important\" than the rest.  You can't destroy it,\nyou can't scale it, etc.\n\nEvan Tahler | evantahler@gmail.com | 412.897.6361\n evantahler.com | actionherojs.com\nOn Mon, Mar 2, 2015 at 10:19 PM, Nick Collins notifications@github.com\nwrote:\n\nFor my use case I have some batch processes that need to execute where it\nneeds to recursively GET data from an external API, manipulate it, then PUT\nthe updated data back to the external API. This process takes an hour or\ntwo, so I'd like to schedule it to run every evening during off hours, so\nstarting at 1am, for example. With the current system, and correct me if\nI'm misunderstanding it, but it appears that you can only set the interval\nat which a task runs, not a specific start time.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/evantahler/actionhero/issues/608#issuecomment-76839036\n.\n. Closing this issue.\n\nAnother approach would be, of course, to just create an action that enqueues the task you want.  You can then curl it (probably with authentication). \n. Thanks! \n. I think that the right thing to do is in servers/websocket.js:166 allow both null and undefined.\n. Bump.  Need any help here?\n. Great! Thanks! \n. these types of questions are best to ask on the mailing list/gitter.\nyou can mess with connection.rawConnection.responseHeaders, and from there declare a set-cookie header\n. that means you can set multiple cookies at once!  If you do multiple set-headers for other things (like changing a mime-type) only the most recent one will be used. \n. I'm personally of the opinion that starging/stopping workers should be of the info level, but lets here what others think\ncomments welcome\n. The rationale was in production the lowest log level you probably might use would be \"info\".  On production you are likely to be using a log aggression tool like Splunk, Sumologic, etc, and you probably want to know how many of your workers are running at any time.  You can then scan for the latest log of this type to see how many are up and running.\n. lets see what a PR for that would look like @gcoonrod! Might make sense depending on how much cruft that adds to the config file\n. Lets merge it in for now, although I do expect some future changes.\n. Thanks!\n. You got it! \nhttps://github.com/evantahler/actionhero/commit/33225a6b35effd3da7c2e06a51596e15d57b86ed\n. Looks like you don't have any workers.  Check for a config option like this: https://github.com/evantahler/actionhero/blob/master/config/tasks.js#L12-L14\n. Cool, thanks! \n. There isn't any automatic re-enquing of failed jobs by default (jobs could be expensive, time-dependant, etc).  Ruby's resque is the same way, and they have a mature collection of retry backends (exponential backup, retry-with-lock, etc).   I don't think I've seen any like that with node-resque yet sadly. \nIt looks like you are about to publish a node-resque plugin! \n. Open an issue in node-resque if you need any help\nhttps://github.com/taskrabbit/node-resque\n. Either will work!  We use the name attribute to truly determine the name of the action.   \nIf you have more than one action per file, you'll need to come up with more than one exports name :D\n. I'll update the docs to just say action to be consistent \n. good ideas here! \nI'm happy to go all POST all the time for simplicity.  Please make that update, and I'll merge it in!\n. Looks like github was having issues when you added that lasts commit... re-running tests now... \n. ok, travis is happy now.\nmerging!\nThanks!\n. In the v11 version of actionhero (which is coming out in the next month or so) you can create JSON object error responses, IE:\n``` javascript\nexports.action = {\n  name:                   'complexError',\n  description:            'complexError',\n  blockedConnectionTypes: [],\n  outputExample:          {},\n  matchExtensionMimeType: false,\n  version:                1.0,\n  toDocument:             true,\ninputs: {},\nrun: function(api, data, next){  \n    var error = {\n      a: 'b',\n      thing: { stuff: 'The Error' }\n    };\nnext(error);\n\n}\n};\n``\n. I've codified this with some new tests here https://github.com/evantahler/actionhero/pull/624\n. @kytwb I think this behavior is correct.  When returning a response via JSON (which the web server does), we need to 'stringify' everything, thus flattening all objects.  The error is returned from the action (or middleware) in its native type (new Error()`), and the server then modifies the response payload to be appropriate for the transport. \nHow would you want errors returned via JSON/HTTP?\nErrors that are JSON objects do work: https://github.com/evantahler/actionhero/blob/master/test/servers/web.js#L127-L134\n. Hmn... does that mean we need a custom serialization function (which defaults to String())?.  Send in a pull request! \n. I want to keep some sort of default serialization ability for errors... but what about this?  we can move error object serialization to the config file, this way you can change it to be whatever you want!\nhttps://github.com/evantahler/actionhero/pull/670\n. Actually, lets keep this issue closed... move all commenting to #670!\n. DOCS for this change here https://github.com/evantahler/actionhero/pull/639\n. You have the right idea!   Here's an example that connects to twitter and just like you are doing with RabbitMQ, handles each message.  \nYou should create a new connection per message, like we are doing here: https://github.com/evantahler/actionhero-tutorial/blob/master/servers/twitter.js#L51-L69.  If you don't want to create a new connection per each message, you can just call any function you like... perhaps an aciton doesn't need to be called?\n. You should be using client.action(actionName, data).\n. I cannot reproduce the behavior you are seeing.  In a fresh actionhero install, try your commands again.  You can see that both serial and parallel work as expected:\nparallel\n``` javascript\nvar client = new ActionheroClient({\n    url: 'http://localhost:8080'\n});\nclient.connect(function(){\n    client.action('sleepTest', {sleepDuration: 3000}, function(data){ \n        console.log('response a: ' + data.sleepDuration); \n    });\n    client.action('sleepTest', {sleepDuration: 2000}, function(data){ \n        console.log('response b: ' + data.sleepDuration); \n    });\n    client.action('sleepTest', {sleepDuration: 1000}, function(data){ \n        console.log('response c: ' + data.sleepDuration); \n    });\n});\n// RESULT //\nresponse c: 1000\nresponse b: 2000\nresponse a: 3000\n```\nseries\n``` javascript\nvar client = new ActionheroClient({\n    url: 'http://localhost:8080'\n});\nclient.connect(function(){\n    client.action('sleepTest', {sleepDuration: 3000}, function(data){ \n        console.log('response a: ' + data.sleepDuration);\n        client.action('sleepTest', {sleepDuration: 2000}, function(data){ \n            console.log('response b: ' + data.sleepDuration);\n            client.action('sleepTest', {sleepDuration: 1000}, function(data){ \n                console.log('response c: ' + data.sleepDuration);\n            });\n        });\n    });\n});\n// RESULT //\nresponse a: 3000\nresponse b: 2000\nresponse c: 1000\n```\nYou can also try this in the console on demo.actionherojs.com, which always has the latest master branch deployed to it. \n. Ahh! the void/undefined is the problem.  Reopening... \n. Oh.  so by design (as clarified in this test) we wanted WS params to be 'sticky' at some point.  This means that if you don't overwrite a param explicitly, the old value will be \"stuck\" to your connection.  \nThe idea was that you only ever needed to specify {userId: 1} in one action, and it would be there going forward.  I agree with you, and I think that this is a bad idea.  I'll remove it in v11.  \nSticky params do however, still make sense for the socket server API, which uses the addParam api\n. Closing this and moving the conversation over to https://github.com/evantahler/actionhero/pull/630\n. I'm sorry, but I think params need to be either all of nothing.  Allowing for some params to be sticky just seems confusing to me.\nThat said, you can probably to this in a middleware and ship it as a plugin!  You can store something like connection.stuckParams = {}.  In the middleware (pre action) you can populate any missing connection.params from connection.stuckParams, and then after the action, you can persist some select params to stuckParams for the next action. \n. absolutely! middleware does fire for all connection types.  You can report out connection.type and see what type of connection you have.  There are 3 types of middleware: action, connection, and chat  http://www.actionherojs.com/docs/core/middleware.html.  You probably want \"action\"\n. if you are having trouble with middleware firing with websocket connections, open up a new issue please. \n. This is a duplicate of https://github.com/evantahler/actionhero/issues/620\n(which was solved by https://github.com/evantahler/actionhero/pull/624)\ntldr; it's coming in version 11.0.0\n. The problem in your fiddle (mentioned in https://github.com/evantahler/actionhero/pull/632) is that you aren't waiting for the client.connect() callback (http://www.actionherojs.com/docs/servers/websocket.html). If wait for the callback properly, then you won't need to handle return values separately depending on if you are connected or not.\nYou only changed the return value style of action, but if you want to make this change, you should also update all the other commands, like say, roomView, etc.  Then, we can discuss the change.\n. Also, this breaks all the tests :( \n. Closing due to lack of response.   Feel free to open again! \n. Sure...\n``` javascript\nvar frequency = 1000;\nif(process.env.NODE_ENV === 'production'){\n  frequency = 5000;\n}\nvar task = {\n  name:          'doStuff',\n  description:   'I will do some stuff',\n  queue:         'default',\n  plugins:       [],\n  pluginOptions: [],\n  frequency:     frequency,\n  run: function(api, params, next){\n    // stuff\n    next();\n  }\n};\nexports.task = task;\n```\n. You can also require a 'development_settings' file if it exists or similar. \n. You are going to need to provide a lot more information:\n- tell us about the machine: CPU/RAM/DISK/OS, etc\n- Is the CLUSTER or the WORKERS using up the CPU?\n- how many workers are you running?\n- can you still serve requests while the CPU is pegged?\n- what type of connections (web, websocket, etc)\n- how many connections?\n- what do the logs say?\nEither way, you'll need to use a lot of logging (with timing data) to sort out these types of problems.  Could be an action has a double-callback, could be that you just have a lot of traffic (for the host you are running on).  It also might be that you found a bug!  However, we'll need to be able to reproduce it to fix it.\nIn my experience, the biggest reason for this type of behavior in node is garbage collection... caused by the allocation of a great many objects.  There are a lot of good articles out there about debugging node memory leaks, like this one https://strongloop.com/strongblog/node-js-performance-tip-of-the-week-memory-leak-diagnosis\nI'm closing this issue, as it is vauge.  If you need advice, head over to the mailing list.  If you find a bug, please open up a new issue! \n. Glad you fixed it!  However, trying to return a file that doesn't exist sholdn't cause any higher CPU load than normal... unless your server is constantly crashing and restarting... is that the case?\n. Yeah, that's an old gist :D\nThe first part of connection.id is the same as connection.fingerprint which, for HTTP connections, comes from the session cookie.  So yes, that is a safe cache key. \n. Why would you require coffeescript in an otherwise non-coffeescript project?  Can these not be pre-compiled at boot?\n. Sorry, I will not add support for any other language/compiler/transpiler into this project.   This is a javascript project, and only javascript will supported.  We will not support coffesscript, typescript, livescript, go-to-js, etc.  There are too many options and no clear winner at this time.\nThat said, you have a few options:\n- You can change the behavior of npm start to first run the coffeescript compiler, and then start the server\n  - You will loose development-mode live-reloading on changes of coffeescript files\n- You can write an actionhero plugin which will load/include coffescript at boot\n  - you can always add the ability to watch files and append the list of actions/tasks, etc\n. It's about scope and memory footprint of the application. \n\"users\" of the framework can do whatever they want, but it's best to keep the core as small and lean as possible.   It's the same reason this project doesn't use anything like underscore.\n. Also, feel free to discuss your PR on the mailing list or chat!  If a lot of people want it, we will of course include it.\nhttp://www.actionherojs.com/learn-more/\n. I haven't heard much chatter about Coffeescript since ES6 came out.   Closing this issue\n. First off, thank you for solving how to test this! This has been bugging me for a while!\nSeeing as how you mess with http.request, could you please move this into a new file, something like /test/integrations/web_websocket?  This helps us be Really sure that the changes to HTTP can be rolled back.\nRegarding the way you want to auth via GET url... I'll open a new issue for it: https://github.com/evantahler/actionhero/issues/642\n. Thanks! \n. solved by https://github.com/evantahler/actionhero/pull/640\n. what's wrong with:\njavascript\nroutes = {\n  post: [\n    {path: '/myAction', action: 'myAction'},\n    {path: '/myAction/:apiVersion', action: 'myAction'}\n  ]\n}\n. That's exactly the behavior intended.  /api/foo will always be the latest version, and you can access any older versions with /api/foo/version.    I take it you want the default version to be not the highest version then?\n. Hmm... I don't think that I like this because it feels like duplication of the default variable options that actions already have.  The only problem is that apiVersion is how you pick which action to run, so this would be the only case which can't be handled by the defaults in the action.\nSo perhaps the api gets a little simpler, like:  {path: '/foo/:apiVersion', action: 'foo', apiVersion: 123}.  I don't think I would want to use routes to modify any other params\n. Lets worry about actions calling other actions in another PR :D (this sounds like middleware to me).\nI'll be happy with this PR if we only care about a default apiVersion.\nAlso be sure to have a matching PR with changes to the documentation! \n. awesome, thanks! \n. docs related to this change added here https://github.com/evantahler/actionhero/commit/ca6717cd096261e07fc1d6dd51c271c13a779c19\n. no, you would need to send these manually:  node --expose-gc --nouse-idle-notification ./node_modules/.bin/actionHero start --daemon\n. Perfect. Thanks! \n. Looks like there is something wrong with Travis... lets give it a few hours and try again. \n. looks like this got out of date... can you merge master and try again?\nThanks! \n. Tests are good now.\n. Cool.  \nNow, I moved the docs into a sub folder of the main project (rather than another branch), so all pull requests like this can also update the docs :D\nBe sure to change \n- https://github.com/evantahler/actionhero/blob/master/docs/docs/core/middleware.md\n- https://github.com/evantahler/actionhero/blob/master/docs/docs/core/chat.md\n. bump! Any progress on the docs?\n. The way things work now is that the docs in MASTER (or your branch) are expected to be ahead of what's on live (gh-pages).  When we push to npm, we also sync the docs branch.  This allows us to write new docs for new features, but not confuse folks who are using the currently released version.  \nhttps://github.com/evantahler/actionhero/blob/master/package.json#L65-L66\n. Any updates?\n. Any update here?\n. Closing due to lack of interest by poster. \n. Can you share your use case here?\n. This also fails the test suite. \n. haha, we all know the joys of needing to shim an exiting API.\nI'm always trying to avoid adding more options to the action API/structure, as it is already so verbose & complex.  I understand your usecase too.  We already have the ability to filter a param entirely (made for credit card numbers and such), but I guess that won't work for you if you also want to show the filename in that other action.\nPerhaps we should generically change the logger.  How would you feel about: \n1. adding an option for maxLogDataLength or similar.  We would not log any param value longer than, say 30 chars, and would just show the first 30 letters.  We could also do this via bytes.\n2. type checking.  I imagine somewhere you convert data.params.file into a buffer?  We should probably not log anything that isn't a string or number maybe?\n3. remove it from data.params.   Also, you can just delete data.params.file at the end of your action, and it won't be logged.\n. Yeah, I don't like 3 either, but you can use it right now if you are stuck.\nI would personally vote for 2 in this case.  Do you convert the params to another type from string?\n. Actually, lets do this https://github.com/evantahler/actionhero/pull/650\nI'll implement the string length limit, but move api.actionProcessor.prototype.logAction to its own method.  Now you can just overwrite it :D  I think your use case is unique, so I don't want to make any changes to core yet, but I do want to allow you to \"hack\" the tool to get you moving. \n. Merged! \n. Sorry, this is not something actionhero will support.  A POST (or GET, or PUT, etc) in your example would only have one param, a={\"b\":{'c\":\"thing\",\"d\":\"other_thing\"}}.   Your request presumes that prams are 1) JSON and 2) parseable.  What about XML payloads?  What about Files?  \nI would suggest that you create a small middleware to pre-process params against action.nestedParamRequirements which you can append to your action definitions. \n. Yeah, type checking/conversion will always be left up to the implementer.  Because we aren't coupled to any specific front-end, we can't ask for input valuation before hand, nor can we make assumptions based on the string content (all params always come in as strings). \n. will be solved via https://github.com/evantahler/actionhero/pull/711\n. Have you actually tested this?  This doesn't happen because of the way the actionProcessor (processAction) handles state safety.  In older versions of actionhero, we managed this by duplicating the connection object itself, but now we achieve this safety in a simpler/lighter way by simply duplicating the params before processing: [[ https://github.com/evantahler/actionhero/blob/master/initializers/actionProcessor.js#L18 ]] and [[ https://github.com/evantahler/actionhero/blob/master/initializers/actionProcessor.js#L100-L106 ]] \nnode/js is single threaded, so only 1 action can be \"kicked off\" at a time. server.processAction(connection) is a synchronous call, so it will continue to block execution until the first async callback is reached, which isn't until after data.params is set within the action processor. \nWhile we test param collisions implicitly in many places in the test suite, I've added another test that calls this out explicitly:  https://github.com/evantahler/actionhero/commit/12d21f520d101609d37147102586f87d18d5b050\n. Closing due to lack of response and inability to reproduce\n. The point of the new actionProcessor is to not need to ever modify the connection (to enable task parallelism).  I'll fix this in the in the exceptionHandler. \n. https://github.com/evantahler/actionhero/commit/6d818428ca9d82bdb4bc5361d437585a260df608\n. good catch!\n. You probably also should clearTimeout before each invocation as well. \n. ahh! Oops.\nThanks! \n. tl;dr: it is important to actually shut down workers properly.\n\nIn the situation you describe, this is actually the expected behavior, and here's why:\n- When you kill 9 and actionhero worker, the redis keys which indicated that the periodic tasks was claimed and being worked on are never removed:\n\nThe periodic tasks use 3 resque plugins jobLock, queueLock, and workerLock, which in turn, prevent more than one instance of that job ever being enqueued, enqueued in the delayed queue, or being worked on... which it totally what you want.  \nNow, with those keys still being in redis, when actionhero starts and checks on the delayed jobs which should be enqueued, it sees an (old) worker already working on your cacheToken job, so it thinks all is well and moves on. These resque plugins do have timeouts, but waiting that long is probably not a good idea.\nResque is designed not have a heartbeat or any real worker status mechanism, because it assumes single threaded applications/languages like node.  If your task is CPU-intensive, the event loop will be blocked, so it can't \"ping\" redis every so often with a \"I'm still working\" message.  It's up to you to handle failures/errors with your periodic tasks.\nWe recently added 2 methods to node-resque which are applicable here: queue.cleanOldWorkers(age, callback) and queue.forceCleanWorker(workerName, callback).  I'm opting not to use these methods within actionhero by default, as they are dangerous (you can read the caveats here and the related PR for actionhero here)\nSo the action for you here is to make an initializer that runs at boot to check for these dead workers using your own heuristics (Can you tell they are dead from the start time of the job?  Can you tell they are dead from the host name?).  Once you find those dead workers, you can use queue.forceCleanWorker(workerName, callback) (once PR #655 gets merged)\n. This issue is closed in favor of #655 \n. It's fine to bump the node-resque version, but I don't even want to allow this as a boot option (It is way to dangerous).    I think that we should note in the docs that this is a thing you can do, but it's up to the user to implement this in their own project. \n. This issue will be solved by this PR https://github.com/evantahler/actionhero/issues/654#issuecomment-101665471\n. Let me know when you make those changes! \n. Merged! \n. Nice! I love seeing folks use actionhero to talk to other apps/languages.  \nThe first (and obvious thing) is to make sure that you are telling actionhero's websocket server (via Primus) to actually use faye.  By default we use a raw websocket connection.  You'll need to change the config https://github.com/evantahler/actionhero/blob/master/config/servers/websocket.js#L25 and be sure to npm install faye.  More details on swapping the underlying transports for primus can be found in the primus readme\nOk, so once you can connect, the next thing to do is actually preform the actionhero handshake (which happens after the faye/WS protocol handshake).  You can see what happens in the client-side JS: https://github.com/evantahler/actionhero/blob/master/client/actionheroClient.js#L37-L58.  There isn't much, we just call the detailsView verb to load in our own clientId and check any rooms we might be connected to.  \nWhat's important on the server side: https://github.com/evantahler/actionhero/blob/master/servers/websocket.js#L198-L205.  When primus, via faye in your case, says we have a new connection, we build up the actionhero connection object.  There are a lot of assumptions here about this being a websocket (we even try to parse headers if they exist).  If you see anything failing here, let me know in a new issue, and we can make this more generic for non-browser webcosket implementations. \n\nAs a note, I know some folks have used actionhero (via faye) to talk to IOS apps, so https://github.com/pcrawfor/FayeObjC might be useful to check out as well. \n. Awesome start!  Post this on the mailing list!\nI'm no objC exert, but you may have some problems with the closures introduced on data (if you deallocate the primus connection, I don't think those closures will be garbage collected, as you keep making new ones each callback).  Also, the Primus library seems a little strange requiring \"string\" events, but if it works, it works! \n. Thanks! \n. Good start!\n- As you note, the initializer is a bit of a mess.  I'm looking forward to the JS-native version\n- I don't think that anything for the swagger UI should be included in the web server.  Why can't we include a static HTML file?  We can include a grunt task to generate the static HTML. \n. Looks like the responseCode bit doesn't work:\n\n. actually, the requestURL isn't being built properly on localhost: \n\n. All good! just commenting as a first pass. \n. awesome! Thanks so much for doing this! https://github.com/evantahler/actionhero/issues/44 is a 3-year old issue.\nPing me again when you are ready for the next round of reviews! \n. good updates! \nPlease cleanup the public folder as you want it to be and I'll take a look.  I see that you currently have removed chat.html and actionhero's css.  Why?\n. of course you can make an npm plugin @supamii!  I'd talk to @BoLaMN about who wants to do it... this thread seems to have sadly gone cold :( \n. I'm closing this thread.\n- We now have a swagger plugin thanks to @supamii https://github.com/supamii/ah-swagger-plugin.  This new plugin looks like it was based on the work here. \n- Once some of the kinks get worked out in the plugin, we can talk about merging it into actionhero core and replacing the existing documentation system\n- Converting all of actionhero's default pages to angular might be cool.  If you want to discuss that, please open a new pull request and we can talk about it in isolation.\n. Yep! The specHelper just mocks requests (transport agnostic). If you want to test HTTP, you need to actually make HTTP requests :)\n. Nice.  Thanks! \n. Recurrent jobs absolutely take out resque locks, and actionhero will not re-enqueue jobs that are locked (or that resque thinks are already running).  There's been a lot of talk about this in other threads [[ https://github.com/evantahler/actionhero/issues/654 ]], but here's a summary:\n- You need to be sure you \"gracefully\" shut down your servers/workers (give them time to complete whatever they are working on).  If you don't the job gets \"stuck\" (locked).\n- You can recover failed jobs and retry them if you choose\n- You can recover stuck jobs and retry them if you choose\n- You can remove stuck workers if you choose (which take any stuck jobs with them).  However, this is dangerous and the implementation of this changes based on the topology of your infrastructure.   The commands exist [[ http://www.actionherojs.com/docs/core/tasks.html#failed-job-management ]] for you to make your own initializer or gunt task to help here. \n. If there's more info you need, or this doesn't help, please open a new issue\n. The enqueue method handles many of the cases with fewer params.  This line applies here https://github.com/evantahler/actionhero/blob/master/initializers/tasks.js#L97.  We source the queue name from the task itself. \n. This is a great start for the plugin!  I'll merge this in, and I've made some new issues for you on the plugin's page. \n. will be solved by https://github.com/evantahler/actionhero/pull/680\n. Sine this isn't an issue relating to actionhero itself (rather on how to use it with a specific library), I'm closing this issue. \n@neilstuartcraig has been working on a passport plugin for actionhero, he may be able to help you out.  He's got a chat room for his project: https://gitter.im/neilstuartcraig/ah-passport-plugin, and you can always jump into the normal actionhero room: https://gitter.im/evantahler/actionhero\n. Great catch!\nThat is fixed here https://github.com/evantahler/actionhero/commit/294a134c19d64bd6d01f259723ba93c4ca06c7a5\n. initializers have start and load priorities.  If you need to ensure that your database is connected before running tasks (totally makese sense), then make your database start priority lower than that of tasks, which happens to be 900\n. very possibly... comment here! https://github.com/evantahler/ah-sequelize-plugin/issues/22\n. Good catch.\nThe system should be sourcing any undefined config variables from within the package, but that might not be working.\n. ahh! Yes, the default config merge behavior doesn't work here because we are telling the config loader not to expand these keys, as it would mess up the functions for the error strings.\nI think, as far as semver is concerned, requiring a config change (and no other code change) is OK for a 'medium' version bump?  Either way, I'll update the release notes. \n. You've got a lot of logic in your MDL and your _ reduction, any of which might be failing here silently.   What does getEditDistance do?  \nIf you also add data.response.gotHere = true or something right before the next(), you can at least confirm that actionhero is letting you append response data, and the error is coming from your logic above. \n. haha, fair enough.\nGood luck! \n. Neat! \nBe sure to mention this on the mailing list and gitter as well! \n. Thanks! \nI am bad at spelling. \n. Can you share more information:\n- action hero version\n- type of connection (http? websocket?)\n- haproxy settings?\n- bridge between haproxy and actionhero (sockets, http, etc)\nBasically this happens when you are trying to have a client connect to action hero, but no information about the connection can be determined (like the incoming ip adress) \n. Yeah, that all looks fine...\nSince you have SSL options, all assume you are running the socket server with secure=true, so that's a TLS server.  I can't find anywhere in the documentation which mentions that remotePort would ever be undefined.   It might be that you have connections coming and then disconnecting so quickly that by the time node attempts to access the TCP stream, the client has already disconnected.  There are not async callbacks within the stack from when a connection is created (it's processed in linear time), so it is unlikely, but possible, especially if your server is doing other CPU-intensive things at the time of the connection's instantiation, so the processing of the connection would be delayed.  Do some checks on your CPU utilization by node when you are seeing this error.\nThis is a tricky error to handle, as there is not a valid client yet to send the error too, so the server does the only thing it can, and crashes with an error thrown. \n. This would be the work-around: https://github.com/evantahler/actionhero/compare/enforceConnectionProperties?expand=1\n. This looks more like an issue with the host you are running actionhero on.  The channel closed error happens when one of the children dies in a non-standard way (kill -9 for example) and doesn't have the time/ram/disk to gracefully shutdown properly.\n. Closing for now... let me know if you learn any more information\n. This should be fixed in ah-sequelize-plugin via https://github.com/evantahler/ah-sequelize-plugin/issues/22\n. And if not, please comment on the plugin's page. \n. Thanks! \n. I'm happy to swap out the max-age header for an e-tag header.  It seems silly to do both.  \nI would change things in the following way:\n- sendFile would calculate the etag and pass it on to the calling server, just like it does for the mime.  The staticFile initializer should not be responsible for HTTP actions, like response headers\n- checking the old request etag header and changing the response status code is the responsibility of the web server, somewhere like here.  You can run the staticFile methods, and they will only return a file stream (not the whole file), so there isn't much of a penalty if you decide that the body shouldn't actually be sent down to the user. \nI don't think you need fresh at all.  Always calculate the etag and just look at the old header and see if the new calculation matches. \n. @neilstuartcraig good point!  I forgot that max-age takes priority over etag, and that would prevent the request entirely :D\nA question for @lorenzofox3: I was under the impression that etag and \"Last-Modified\" are functionally equivalent options (just one uses an \"asset sha\" while the other would be using a date).  Since we really are serving files on disk (and not generating assets dynamically with the staticFile engine), wouldn't fs.stat-ing the file, and getting the true last-modified time form disk be simpler and quicker?  No new packages would be needed... \n. closed by https://github.com/evantahler/actionhero/pull/685\n. Thanks! \n. Thanks! \n. There has been a lot of chatter about pm2 in the actionhero chat room in the past 2 months.  A lot of people don't use it any more (stability reasons I think?), and have started using actionCluster directly.  Running a single actionhero server ./node_modules/.bin/actionhero should be fine though.\n@crrobinson14 has had the most experience, and even offered up his config:\n[{\n    \"name\"       : \"API\",\n    \"cwd\"        : \"/opt/firetalk/api\",\n    \"script\"     : \"/opt/firetalk/api/node_modules/.bin/actionhero\",\n    \"args\"       : \"startCluster\",\n    \"watch\"      : false,\n    \"env\"        : {\n      \"NODE_ENV\" : \"production\",\n      \"ACTIONHERO_CONFIG\" : \"config,local-config\",\n      \"ACTIONHERO_ROOT\"    : \"/opt/firetalk/api/node_modules/actionhero\",\n      \"HTTP_PORT\": 8080\n    },\n    \"instances\"  : \"1\",\n    \"error_file\" : \"/var/log/pm2/api.err\",\n    \"out_file\"   : \"/var/log/pm2/api.out\",\n    \"pid_file\"   : \"/var/log/pm2/api.pid\",\n    \"exec_mode\"  : \"fork_mode\"\n}]\n. closing due to lack of response\n. And I always use monit!  I find it is the best combination of both control and monitoring (and with M/monit, you get central control of all your servers...)\nHere's my config.  This is the \"fancy\" version, but you don't need it all (I've also got some hooks into alerting pagerDuty for high CPU, RAM, etc which you can see:\n```\nCHECK PROCESS actionheroApp\nWITH PIDFILE /home/user/www/actionheroApp/shared/pids/cluster_pidfile\nSTART PROGRAM \"/bin/bash -c 'cd /home/user}/www/actionheroApp/current && HOME=/home/user PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH NODE_ENV=production ./node_modules/.bin/actionhero startCluster --daemon --workers=10'\"\n    as uid user\n    with timeout 30 seconds\nSTOP PROGRAM \"/bin/bash -c 'kill cat /home/user}/www/actionheroApp/shared/pids/cluster_pidfile'\" \n    as uid user\nGROUP apps\nif mem is greater than 600 MB for 5 cycles \n    then exec \"/bin/bash -c 'kill -s USR2 cat cat /home/user/www/actionheroApp/shared/pids/cluster_pidfile'\"\nif totalmemory is greater than 800 MB for 10 cycles \n    then exec \"/bin/bash -c 'kill -s USR2 cat cat /home/user/www/actionheroApp/shared/pids/cluster_pidfile'\"\nif mem is greater than 600 MB for 5 cycles \n    then exec \"/etc/monit/pagerduty-trigger actionhero_actionheroApp_ram\"\n  else if passed for 3 cycles\n    then exec \"/etc/monit/pagerduty-resolve actionhero_actionheroApp_ram\"\nif totalmemory is greater than 800 MB for 10 cycles \n    then exec \"/etc/monit/pagerduty-trigger actionhero_actionheroApp_ram\"\n  else if passed for 3 cycles\n    then exec \"/etc/monit/pagerduty-resolve actionhero_actionheroApp_ram\"\nif cpu is greater than 25% for 20 cycles \n    then exec \"/etc/monit/pagerduty-trigger actionhero_actionheroApp_cpu\"\n  else if passed for 3 cycles\n    then exec \"/etc/monit/pagerduty-resolve actionhero_actionheroApp_cpu\"\nif totalcpu is greater than 90% for 10 cycles \n    then exec \"/etc/monit/pagerduty-trigger actionhero_actionheroApp_cpu\"\n  else if passed for 3 cycles\n    then exec \"/etc/monit/pagerduty-resolve actionhero_actionheroApp_cpu\"\nif uptime < 1 minutes for 3 cycles\n    then exec \"/etc/monit/pagerduty-trigger actionhero_actionheroApp\"\n  else if passed for 3 cycles\n    then exec \"/etc/monit/pagerduty-resolve actionhero_actionheroApp\"\n``\n. This is a good start!\n- You have updated how the genericServer and webServer deal with files to handle the new lastModified param.  You need to also update the websocket and socket servers.\n- for testing, since you are truly testing the HTTP transport, use request.  Here are some examples: https://github.com/evantahler/actionhero/blob/master/test/servers/web.js#L289-L349\n. I think you had a problem with your merge/rebase.  You have a lot of files here that shouldn't be included\n. We'll need a lot more information to help (and probably a reproducible example)\n- what version of actionhero are you using?\n- what version of redis?\n- what OS\n- Is the scheduler enabled? \n- Look in redis. Are there jobs in the delayed queue?  \n. closing due to silence \n. @hazemhagrass you'll need to answer those questions above for anyone to provide assistance. one of 2 things is likely happening:\n- your job hashung.  This means that the job never completed its callback and has been \"running\" for a very long time.  Look in redis and see if a worker has been working on this specific job for a while\n- your job has crashed. Look in the resque error queue for the crashed job, and see what the stack trace was. There's this: https://github.com/evantahler/ah-resque-ui, but actionhero lets you configure things very openly, so the monitoring tool you need might not be the same as another implementation.  There are plugins for datadog, new-relic, logly, etc. everything looks fine to me... you've got a worker, some jobs which will run in the future... \nso what's wrong?. Thanks!\n. Either way, you would still need to call redis multiple times (the logic can't be changed).  If you really want this convince method, open up a PR in https://github.com/taskrabbit/node-resque!  Once it's merged in there, we'll add it to actionero \n. It looks like a recent upgrade ofredis(whichfakeredisdepends on) changed some of its internals.  This means that all new installs offakeredis` are failing.\nIssue opened with the fakeredis project  https://github.com/hdachev/fakeredis/issues/31\nThanks for pointing this out! \n. You have a few options:\n1) use \"real\" redis.  Install a redis server and connect to it\n2) fork the fake redis package and lock it's dependency to redis: 2.1.x.  use your fork of rake redis from github rather than the one from NPM\n. @hdachev is awesome has a new version of fakeredis published\n. solved by https://github.com/evantahler/actionhero/commit/686dee3379b0240526db6f56b43245ad3b63cc29\n. v12.1.2: published\n. nice!  I'll update the other servers for you\n. Here's the update for websockets: https://github.com/evantahler/actionhero/commit/f9ac949e1b0d8e51c0e3b2c048aeeb96005f3c14\nThere isn't anything to modify for the socket server\n. I'm not going to merge this now, as a lot of the dependant packages use opject.package, which presumably would also break in node-babel.  I also feel we shouldn't make out programming less clear for transpiler.  \nIf enough people :+1: this issue, indicating high adoption for node-babel, we can re-visit.\n. FYI this will be fixed in v13.0.0 of actionhero. \n. You can see those functions defined here: https://github.com/evantahler/actionhero/blob/master/initializers/utils.js\nCan you give more context to your errors?  A stack trace?  A reproducible error example?\n. Thanks! \n. Whoops! In the future please don't work on the gh-pages branch, but rather the docs folder in master.\nReplaced via https://github.com/evantahler/actionhero/commit/b130fe54a9a566213cc8e23237b94c38829582d3\n. I think you might be misunderstanding how the locking mechanism works:\n1) These locks are to ensure that only one actionhero instance works with a cache object at given time.  Any given server (like you have in your test) can modify the object as many times as it wants.  This means that the same server asking checkLock will always get ok\n2) There is an atomic check to create the lock, which will fail if the object is already locked.  This is handed in the api.cache.lock method via redis.setnx.  Your test never actually locks anything, so checking the lock repeatably will always yield ok\nI took your test case and corrected it so that:\n- you change \"server names\" each test to emulate accessing the lock from other actionhero instances\n- you lock the object the first time obtain the lock so that there is something to test against\n==> https://github.com/evantahler/actionhero/commit/2e8e59a2b470311471860e6752194886e4eae196\n. good catch!   Will be solved by https://github.com/evantahler/actionhero/pull/697\nI guess no one has manually tried to disconnect and reconnect in the same window before\n. If you are trying to send static files from within actions, all you need to do is:\n``` javascript\nexports.bigFile = {\n  name: 'bigFile',\n  description: 'I will return a big file',\noutputExample:{},\nrun: function(api, data, next){  \n    data.connection.sendFile('/path/to/file.mp3');\n    data.toRender = false;\n    next();\n  }\n};\n```\nCalling next(false) indicates that there was an error, and as you point out, would both try to render the error to the client, and send the file.  The only error that should mater when sending files is 404, and that is handled automatically via sendFile\n. The docs were out of data, and I've updated them https://github.com/evantahler/actionhero/commit/2aed6145a4d88374125c69adec594b85906287db\n. There is a redis-cli command which lets you use any of the redis-commands.\nYou can delete all keys in a DB with flushdb or you can list keys keys * and then del [key] one by one.\n. well that would explain things! \n. https://github.com/evantahler/actionhero/releases/tag/v12.2.2\n. I'm totally down with this.   The only note is that folks would really need to ensure that they were using npm shrinkwrap when deploying... which I guess we all should be doing anyway... \n. Travis says that it is safe... so lets do it! \n. This also includes a number of general documentation fixes and updates\n. Good Catches!\nPlease don't make changes to the gh-pages branch.  It's built programmatically.   Rather, make changes against master: https://github.com/evantahler/actionhero/blob/master/site/README.md\n. solved by https://github.com/evantahler/actionhero/commit/d158f99c234c5604e9e1910413586491df4352a9\n. duplicate of https://github.com/evantahler/actionhero/pull/706/\n. solved by https://github.com/evantahler/actionhero/pull/710\n. Thanks! \n. Just linking some of the previous conversations on the topic of 'complex params' here for reference: \n- https://github.com/evantahler/actionhero/issues/649\n- https://github.com/evantahler/actionhero/issues/314\n. I think that at this point I'm generally OK coercing and merging params which end with [] into an array (as you point out in your example).\n- Should we also handle nested params: pizzaType[topping][] => params.pizzaType = {topping: []}, or just handle the simple case?\n- do you want to work on this feature, or is this just an ask?\n. Lets move over to https://github.com/evantahler/actionhero/pull/711\n. Thanks! \n. closes:\n- https://github.com/evantahler/actionhero/issues/709\n- https://github.com/evantahler/actionhero/issues/649\n- https://github.com/evantahler/actionhero/issues/314\n. Note: we cannot use the latest (v6) of qs, as they have moved to only ES6 (node >v1.0).  We will be locked to v5.x of QS so actionhero can still work on node v0.10 and up.\nhttps://github.com/hapijs/qs/issues/124\n. Thanks! \n. Disapearing.  They aren't used anymore.\nThere are also good alternatives for each:\n- date/time -> https://github.com/felixge/node-dateformat\n- random strings -> https://github.com/broofa/node-uuid\n- sleep sync -> a generally terrible idea\n. There's nothing wrong with actionhero here.  \nThe ah-jwtauth2-plugin plugin creates its namespace within the start method.   You are trying to access it within your own plugin within an initialize method.  \nAll initialize steps happen before start steps.  \nI would argue since ah-jwtauth2-plugin is simply creating helper methods (and not connecting to a database or anything) that it should move its setup steps to initialize.  Open an issue on that project.  \nTo make your initializer work, just move your stuff to start with a priority greater than 1000 so that JTW will be loaded ahead of time\n. Initializer documentation for reference: http://www.actionherojs.com/docs/#initializers\n. Can you try to debug this a bit further?  Change out ws for faye (and make the adjustments needed in the websocket config file so primus knows to use this).  It looks like there is something wrong with node v5.x and compiled modules on windows... \n. closing issue due to lack of response\n. Share some example input in the form of a curl statement.  This all woks fine for me.\nIt's strange that you are trying to JSON.parse in both cases, formatter and validator.  Also, in line 41 you are setting param to the literal string Product must be a JSON object., which I don't think is what you intended\n. No problem!  Happy you figured it out. \n. Thanks! \n. Sure! \nMaybe we allow for log levels for each task event that you can customize, like:\n``` js\napi.config.tasks.logLevels.tasks = {\n  start: 'info',\n  success: 'debug',\n  failure: 'error',\n  // ...\n};\napi.config.tasks.logLevels.scheduler = {};\n```\nThis should also replace api.config.tasks.verbose\n. I agree it should be removed\n. This is great! \nI think for the scheduler, you just make another hash, schedulerLogging, which has its events as well.  Yes, this makes the config file pretty large, but now we have all the options exposed to user-space, which is nice.\n. Wait... why are trailing commas so bad?\n. Yeah, sometimes travis times out.  I re-ran them and it's all green!\nThanks! \n. There are new docs about this here: http://www.actionherojs.com/docs/#topology-example with code examples\n1) actionCluster can only start one type of node.  Say you had a 4-CPU server.  You could use actionCluster to start a manager and 2 web nodes, and then start 2 more workers in a new actionCluster (see below).  Note that using ENV flags at boot requires you to update your config files (as noted in the documentation) to read those flags, IE: if(process.env.ACTIONHERO_ROLE === 'worker').\n- start the cluster with 2 web workers:\n  - ACTIONHERO_ROLE='server'  ./node_modules/.bin/actionhero startCluster --workers=2 --daemon\n- start 2 workers:\n  - ACTIONHERO_ROLE='worker' ./node_modules/.bin/actionhero startCluster --workers=2 --daemon \n2) All we are changing here is config settings!  Use boot flags to modify config settings at runtime, or you can lay down new config files for each role (if you have separate servers for each type of node)\n3) Yes, workers more or less run in an infinite loop, but then again, so does all of actionhero.  The worker logic can more or less be though of:\n1. check for jobs\n   - try to 'pop' a job off of an array in redis\n2. if job, work job\n   - goto 1\n3. if no job, sleep 5\n   - goto 1\nTo learn more about how the workers process jobs from redis, you can check out the node-resque package (which actionhero uses under the hood) or the original ruby-resque\n. solved by https://github.com/evantahler/actionhero/pull/737\n. First off, required is a boolean, true or false.  \nIf this is your action \n``` js\nexports.test = {\n  name: 'test',\n  description: 'test',\ninputs: {\n    data: {\n      required: true,\n      formatter: function(n){\n        return JSON.parse(n)\n      },\n    }\n  },\noutputExample: {},\nrun: function(api, data, next){\n    api.log('data => ', 'alert', data.params.data)\n    data.response = 'yay';\n    next();\n  }\n};\n```\n(note how JSON.parse is used)\nYou can send params:\ncurl -v -X POST -d 'data={\"who\":\"some_one\", \"score\":92}' http://localhost:8080/api/test.  The default content-type from CURL (and browsers) is application/x-www-form-urlencoded, which actionhero expects. \nIf you want to change the request content type to application/json, you actually don't use URL-style params, and should CURL like this: curl -v -H \"Content-Type: application/json\" -X POST -d '{\"data\":\"some_one\"}' http://localhost:8080/api/test (note that there is no assignment for the payload, it's the only data param).\nIf this is how you want to interact with the API, you don't need to JSON parse in your action, as JSON like this will automatically be parsed to set data.params.data = 'some_one.  That means your action changes to:\n``` js\nexports.test = {\n  name: 'test',\n  description: 'test',\ninputs: {\n    data: {\n      required: true,\n      formatter: function(n){\n        return String(n)\n      },\n    }\n  },\noutputExample: {},\nrun: function(api, data, next){\n    api.log('data => ', 'alert', data.params.data)\n    data.response = 'yay';\n    next();\n  }\n};\n``\n. solved by https://github.com/evantahler/actionhero/pull/728\n. Check out the PR and let me know if that works for you.\n. Cool.  Closing this issue in favor of this PR https://github.com/evantahler/actionhero/pull/758.\nMove the conversation over there! \n. I think the proposal here is to actually removeconfig/plugins.jsonentirely.  If we startapi.config.general.paths.plugin = [], than it would be an explicit declaration to change that to include./node_modules` and any other folder you want.  This means that anything you've installed via NPM was meant to be a plugin (if it matches some check we need to build).    \nFrom there, we just need a convention on how to make a folder \"appear\" as a plugin (so we don't try to load normal packages you might want within your project), and there are couple of options to do so:\n- lazy-scan the directory for folders called \"actions\" and \"tasks\".\n  - I think this will create too many false positives.\n- scan all package.json files within node_modules for something custom, like isActionheroPlugin: true\n- scan all directories within node_modules for a custom file, something like isActionheroPlugin.json\n- ... other thoughts?\n. oh, I like that @neilstuartcraig.  We could do something like:\njs\n// from node_modules/my_plugin/actionheroPlugin.js\nexports.plugin = {\n  autoload: true,\n  priority: 1000\n}\n. Can you share an example of what would live in the top level project?  So... plugins.js would now only contain overrides?\njs\n// config/plugins.js\nexports.default = {\n  general: function(api)\n  {\n    return {\n      // these are overrides to the plugin settings within each plugin\n      plugins: {\n         'my-awesome-plugin': {  priority: 1 }\n      }\n    };\n  }\n};\n. So here's a wacky idea which would would greatly simplify both plugin registration and nesting (https://github.com/evantahler/actionhero/issues/726): symlinks.\n- Say I want to include ah-plugun-A in my project, which contains some actions and an initializer. \n- I npm install --save ah-plugun-A into my project as I normally would.\n- rather than add the plugin to my config/plugins.js lists, I now would run a new command actionhero link ah-plugun-A.\n- This new command would search all paths listed within api.config.general.paths.plugin for a directory called ah-plugun-A.  Once it finds it, it would then create symlinks from the plugin into my project's top-level directories.\n  - For example, I would have the following for the actions in the plugin: /actions/ah-plugun-A ---> /../node_modules/ah-plugun-A/actions\nThis symlink method has a few awesome side effects:\n- There is no longer a need to maintain a list of plugins anywhere in the project\n- This creates an incredibly clear mapping of what plugins are active in a project, as the symlink is visible in the directory. \n- We could now do 'partial' plugin inclusion.  Only want the actions and not the initializer from a plugin?  Delete that symlink.  Only want some of the actions?  Don't symlink the whole directory in then... just link some of the actions\n- This also greatly simplifies the configLoader, as we no longer need to have any special code for plugins at all!  We already support sub-directories, which (should) already cover symlinks.  \nThis solves the nested plugin problem as well.  If ah-plugin-A relied on ah-plugin-B, the plugin would have included ah-plugin-B via npm, and have already sourced it.  This means that ah-plugin-A would already have a symlink in its own /actions or /initializers directories.  This would chain back to the project top level which would then include all the needed files.\ndownside: Windows users.  Frankly, I'm willing to launch this feature without windows support for now and let that OS catch up later.\n. NPM already handles this with its semver mapping! Check out #1 here: http://blog.izs.me/post/1675072029/10-cool-things-you-probably-didnt-realize-npm\nSo basically each plugin's dependancies would be inside of its own node_modules and we would link all the way down.  I haven't tested it yet, but I think it would work out.\n. Cool.  Closing this issue in favor of this PR https://github.com/evantahler/actionhero/pull/758.\nMove the conversation over there! \n. It's actually further form RESTful development from what I understand: Assuming the object you are modifying can be manipulated in an obtuse (meaning more than one path is valid) way, is what REST explicitly tries to avoid.  \nFor example, PUT users/123 would get a request to modify user 123 and PUT users/123/house would be a request to modify that user's house.  Explicitly requiring those to map to distinct actions enforces the separation of concerns.  Allowing both of those routes to hit the same action, and likely the same object, breaks the convention.\n. Yep, that's working as designed.  If you define your route to have a param, it must be there to match!  \n:apiVersion being optional only applies to the fact that clients don't need to supply it, and if they don't the latest version will be used.  This optionality goes away however if you require it in your route.\n. cool, thanks! \n. closed by https://github.com/evantahler/actionhero/pull/732\n. Thanks!\n. This is basically the same issue as https://github.com/evantahler/actionhero/issues/590, bit I want to call this out clearly. \n. solved in https://github.com/evantahler/actionhero/commit/2b1411482b24d94c19f0c2bbe4e3b5e12115a32e\n. closed by https://github.com/evantahler/actionhero/pull/752\n. solved by https://github.com/evantahler/actionhero/pull/739\n. We've talked about this before here: https://github.com/evantahler/actionhero/pull/692\nAs far as we could tell at the time, package was not a reserved keyword in javascript, but only in some transpilers like babel.  Since that was the case (as far as we could tell), we ignored it at the time.  \nSince we cutting a new major version release soon, this would be the right time to change this.  pkg seems fine to me.  You'll need to change that within this project and within node-resque\n. Awesome, thanks!\nI'm happy to cut a new version of node-resque as well for this. \n. solved via:\n- https://github.com/evantahler/actionhero/pull/746\n- https://github.com/taskrabbit/node-resque/pull/113\n. good catch! \nSolved via https://github.com/evantahler/actionhero/pull/745\nLooks like it has been this way for almost a year... I guess that means no one has tried to change the log path until now... \n. WOW!\nThis is full-on OCD mode.  This is awesome! \n. The easy answer is data.response should always be an Object, not a string.  So: data.response.message =  \"Dummy response\";\nThe WS server appends metadata to data.response, like messageCount as you see in the welcome message.  The WS client looks for that metadata to handle the callback chain in the client.  Without that metadata, the client gets very confused.   \nGreat issue report btw!\n. If you can find somewhere good to note this in the docs, please open a PR to do so! \n. please set this PR to merge into the v13.0.0 branch, not master\n. Closed; https://github.com/evantahler/actionhero/pull/747 is the new PR\n. now you can update the node-resque version in this PR, and it should be good to go! v1.3.0\n. Looks like you just missed this one I did :D\nhttps://github.com/evantahler/actionhero/pull/745\n. good fix though! \n. @paulxtiseo are you certain?  It's pretty directly calling call with api as the scope https://github.com/evantahler/actionhero/blob/master/initializers/actionProcessor.js#L196-L215.\nCan you share some sample code?\n. ... adding new meaning to keep it lean\n. solved by https://github.com/evantahler/actionhero/pull/756\n. makes sense!\nCan you please make this change against the v13.0.0 branch rather than master?\nThanks! \n. Cool.\nThere's a big rewrite of how plugins work going on right now, but this will get fixed as part of that.\nSpecifically: https://github.com/evantahler/actionhero/commit/5b837dec00b9934f91361af06baaeb3f0fe0a63e\n. Oh yeah... there should be no more \"postinstall\" scripts at all after the update.\n. Awesome, thanks! \n. @neilstuartcraig, @l0oky, @hutchike, @slattery @AngeloR what are your thoughts?\nDoes anyone have a windows computer they can try this out on?\n. The main thing to test on windows right now is if it works at all :D \nSo to test this, you'll need to 'make' a plugin:\n- check out this project and npm install\n- make a new plugins directory and add it to api.config.general.paths.plugin array\n- make a new plugin, myPlugin and add some actions and tasks to it.\n- try to link the new plugin via actionhero link myPlugin\n- run the server and see if the plugin's actions are there\n- report back on how it went.\nnode says that symlink commands should be cross platform... so lets find out! \nThanks!\n. was anyone able to test on windows?\n. As much as I love the simplicity of the symlink approach, there are too many problems:\n- Cross-OS issues when developing on windows and deploying to *nix\n- Accidental check in of symlink'd files\n- The need to run actionhero link on production servers as part of deployment.\nI'm going to steal the philosophy of this approach and do what a symlink does at the OS level inside actionhero: use plugin.link files, when present in the proper directory, to signal a scan of the plugins paths.\n. Yep, that's exactly what happens! Glad to see you are getting into the weeds :D\nWe do this because we can't guarantee config load order, and one config file should be allowed to refer to the data within another.  The best example of this is how by default the task config refers to the redis config in the default case.  Generically, since we can't be sure which one will be loaded first (especially when plugins are involved), we basically try to source the config n times each time we get to an undefined object. The code for this is here: https://github.com/evantahler/actionhero/blob/master/initializers/configLoader.js#L106-L128\nSince this is expected behavior, and if you need a method to really only be called one, you have a few options:\n- tools like once exist for this kind of thing\n- since you know these are sync (linear-time) functions, it would be safe to store the output in the locale scope (non-exported), ie:\n``` js\nvar functionData= null;\nfunction myFunction() {\n  if(!functionData){\n    console.log(\"I've been called\");\n    functionData =  \"it's just a flesh wound!\";\n  }\n  return functionData;\n}\nexports.default = {\n  \"myTest\": function (api) {\n    return {\n      test: myFunction\n    }\n  }\n};\n``\n. awesome! Thanks! \n. awesome, thanks!\nI'll copy this into the upcoming v13 branch as well\n. the tool currently doesn't support multiple themes, which we need now to run both the docs and 'common' site in one build.  Ya'll remember to check back in a bit and see if they progress! \n. Thanks @mpociot, we'll give it a shot!\n. @n-s-k is this something you can work on?\n. Awesome!\nLet me know how I can help\n. There were a few reasons to have the docs _within_ the same repo as the code:\n- you can commit new code and the related docs in the same PR\n  - you won't forget to write docs either!\n- we can tie the building/publishing of the site to [npm publish`](https://github.com/evantahler/actionhero/blob/master/package.json#L70-L71) so new docs go out with new code\n- you can always reference the historical state of the docs within the context of historical code (if you view the tag for v13, you'll see the docs for the same version)\n- if you have the code locally, you have the docs locally.\nTo that end, for now, I want to keep the docs within the core repo.  As the project gets bigger, and we have more \"release management\", we can revisit this.\nAs far as changing the site over to some other build/template/server system, have at it!   I like the 3-column layout of whiteboard, but there are plenty of other options.  As long as both words and code can be viewed side-by-side I'm game.\nThe only real requirement is that the site should compile to static assets so we can continue to host the thing on github pages.\n. I guess not! . Thanks! \n. I don't see that in the diff?\n. For example:\nI trust \"my\" node_modules to load plugins from, but I don't trust node_modules/random_plugin/node_modules... who knows whats in there?!\nRight now (v13.0.0), you can chain things in your plugins path, ie\njs\napi.config.general.paths.plugins = [\n  'node_modules', \n  'node_modules/somePlugin/node_modules'\n]\nbut it won't auto load that way.\nYou also can't append api.config.general.paths.plugins in an initializer within your plugin, as the directory list should already be sourced.\n. @l0oky that's the way it is now, yes.  I want to talk here about alternative options...\n1. We could automatically also source the node_modules of all included plugins (least safe, most convenient) \n2. We could note in a warning at boot that \"plugin A require plugin B... add this to your package.json and try again\" (safe, not that convenient)\n3. We could note in a warning at boot that \"plugin A require plugin B... you can add node_modules/plaugin-a/node_modules to your api.config.general.paths.plugn\" (safe, even less convenient)\n4. something else?\n. I'm leaning towards #1 as well.  I personally don't want to audit every (potential) plugin for security, and I don't imagine anyone would either :smile:  \nThe \"security\" I'm most worried about is not so much about \"hackers\" but the integrity of the system.  Say for example your project looks like this:\n| - node_modeules\n| -- ah-sequelize-plugin\n| -- ah-auth-plugin\n| ---- node_modules\n| ------ ah-sequelize-plugin\nYour project in general uses sequelize, as does the ah-auth-plugin.  How do we know which version source into the project?  If the version are more-or-less the same, the top-level project one should win, but there may be occasions where you would want both.  All of a sudden load order matters, as you have 2 ah-sequelize-plugin\\initializers\\sequelize.js to load now, each with the same name and modifying the api object in the same way.\nNPM already handles a lot of this for you, IE: if you require ah-sequelize-plugin v1.x.x and the plugin requires ah-sequelize-plugin v1.2.3, you'll only have the one top level package installed... but if the versions drift, very strange things could happen.   To solve for this, I think our nested plugin logic probably looks something like this:\n1. load all local files first (actions/initializers/etc)\n2. follow all explicitly defined links (to the explicit plugins)\n   - if there's a conflict, for example both your top-level project and a plugin define \"my action\" crash and throw an exception\n3. source the linkfiles of the plugins\n   - check if we've already loaded that plugin by name.  If we have, don't do it again.  There may be a version inconsistency, but that was an explicit choice by the top-level project or an incompatibility between 2 plugins... and the user has to sort that out\n   - only source the node_modules of that plugin for any additionally needed plugins (recursive)\n   - if we ever hit a plugin we've already loaded up, in this case, rather than throwing an exception, ignore it and use the one we've already got loaded + log a message.\nSo if your project looked like this:\n| - node_modeules\n| -- ah-sequelize-plugin\n| -- ah-auth-plugin\n| ---- node_modules\n| ------ ah-sequelize-plugin\n| -- ah-orm-plugin\n| ---- node_modules\n| ------ ah-sequelize-plugin\nWe would use the top-level ah-sequelize-plugin and throw no errors or warnings at boot\nIf your project looked like this (with no top-level ah-sequelize-plugin):\n| - node_modeules\n| -- ah-auth-plugin\n| ---- node_modules\n| ------ ah-sequelize-plugin\n| -- ah-orm-plugin\n| ---- node_modules\n| ------ ah-sequelize-plugin\nYou would get a message like this at boot:\nah-orm-plugin requires \"ah-sequelize-plugin\", but we've already loaded it from \"ah-auth-plugin\".  Be sure the versions are compatible.\n- misc note:\n  It is going to become important for plugin maintainers to be sure they link their dependancies before publishing.  For the obvious reasons, and so they can pull up any config files.  If ah-auth-plugin requires ah-sequelize-plugin, the published version of ah-auth-plugin better also include the database.js sequelize needs so that it can be then re-coppied up to the top-level project on install.\n. @l0oky we don't need to add anything extra to package.json as noted above.  NPM handles the dependencies for us already.   If you package has a linked plugin checked into it, it should be followed... that's the proposal anyway.\nThe hard part is picking which sub-package to load in the event there are conflicts.  Now that NPM flattens all dependancies, it's a harder problem\n. fascinatingly, we haven't had this feature for over 6 months now, and no one seems to have complained. I was sure that someone would need this...   \nI guess we can close it! . much better :D \n. I've added the other way to do it too: https://github.com/evantahler/actionhero/commit/e01b7038222ed28fe15de0321b933c646f7331aa\n. While I like the organization that would produce, I don't like changing the names of actions automatically.  This would have dire effects on routing and however else folks integrate with the plugin.  That said, it's a great \"best practice\" that plugin authors should follow!\nSend in a pull request with a note to that effect for the docs! \n. @S3bb1 sure, that would be cool.\nI usually name my actions in the style object:method, so things like \"user:create\" and \"user:edit\" (example here https://github.com/evantahler/actionhero-angular-bootstrap-cors-csrf/blob/master/actions/user.js).\nAgain, pull requests welcome! \nIf this is just a UI thing for index.html, I would suggest parsing action names for both \":\" and \"-\" to group.\n. @neilstuartcraig I guess we should pick a \"best practice\" for the docs... however the choice of name-spacing break character (:, #, -, /, etc) seems totally arbitrary to me, and I really don't want to enforce something that is that arbitrary. \nThoughts?\n. sounds like a great idea guys! \nMake a PR for some changes to the /docs site, and we'll work on this over there. \nClosing this PR in favor of that one...\n. ha! Thanks!\n. If you change the method to GET, you actually need to serialize the params to URL variables, IE: site.com?thing=stuff.  \nSend in a PR which checks for GET and modifies the URL (which is what would be needed)\n. Looks like you are on the right track.  Please commit this as a pull request so we can track changes and discuss it with the tools github offers. \nThanks! \n. closed by https://github.com/evantahler/actionhero/pull/776\n. I like this, but can you add a warning (api.log) which will show a deprecation warning?  Also, this will work for api.redis, but not for the task system which re-sources the same config.   To be complete, you'll need to make a similar modification to the https://github.com/taskrabbit/node-resque project\n. fyi @synthmeat \n. not dumb at all!\n. Looks like the right implementation!\nPlease add a test (probably in /test/servers/web) so we can lock this in and ensure it won't get changed away in the future.\n. The spec helper is actually a request-agnostic way to test actions (http, ws, etc) and won't help here because we want to test the actual mechanics of the HTTP client.  \nI'll merge this in now and add a test.  Thanks! \n. I was able to source the client lib much like how the websocket tests do: https://github.com/evantahler/actionhero/blob/master/test/servers/websocket.js#L14-L32\nHowever, I realized that XMLHttpRequest isn't a thing.  I found a good library that has a node proxy for it (https://github.com/driverdan/node-XMLHttpRequest) but that seemed kind of crazy to require... so guess we aren't testing this one :D\n. hilarious.  And thanks! \n. So before I merge this in, I guess it would be best to also publish a guide on how to use these hint files... with guides for every OS and a few editors (Atom and Sublime Text are must-haves). \n. @synthmeat yes please! We can also make a CONTRIBUTING file in the project as well.\nNote: looks like you need to rebase\n. @neilstuartcraig I think that's not relevant here.  Open a new issue with it?\n. A few questions added... looking great!\n. Ok, I think the only real issue that might upset people is thing.default => thing['default'].  Does anyone else have an opinion on this?\nThis is a heroic effort, @synthmeat, and I want to merge it in!\n. fuck it, this is awesome... and should be merged in ASAP.\n. I can't reproduce this at all.  I can tell that you are using an older version of node here because the string interpolation isn't working.  Can you try again on node 4+ with the latest version of actionhero?\n```\n\nnode --version\nv4.2.2\n```\n\n```\n2016-02-24T18:18:28.562Z - info: actionhero >> start\n2016-02-24T18:18:28.656Z - notice:  starting actionhero \n2016-02-24T18:18:28.713Z - warning: running with fakeredis\n2016-02-24T18:18:28.724Z - info: actionhero member 192.168.80.162 has joined the cluster\n2016-02-24T18:18:28.846Z - notice: pid: 90064\n2016-02-24T18:18:28.847Z - notice: server ID: 192.168.80.162\n2016-02-24T18:18:28.857Z - notice: Starting server: web\n2016-02-24T18:18:28.865Z - notice: Starting server: websocket\n2016-02-24T18:18:29.460Z - notice: environment: development\n2016-02-24T18:18:29.461Z - notice:  Server Started \n2016-02-24T18:18:31.855Z - info:  Rebooting due to initializer change (/Users/evantahler/Dropbox/Desktop/actionhero_tmp/initializers/test.js) \n2016-02-24T18:18:31.856Z - alert: Shutting down open servers and stopping task processing...\n2016-02-24T18:18:31.858Z - notice: Stopping server: web\n2016-02-24T18:18:31.859Z - notice: Stopping server: websocket\n2016-02-24T18:18:31.864Z - alert: The actionhero has been stopped\n2016-02-24T18:18:31.866Z - info: actionhero member 192.168.80.162 has left the cluster\n2016-02-24T18:18:31.909Z - notice:  starting actionhero \n2016-02-24T18:18:31.913Z - warning: running with fakeredis\n2016-02-24T18:18:31.916Z - info: actionhero member 192.168.80.162 has joined the cluster\n2016-02-24T18:18:31.933Z - notice: pid: 90064\n2016-02-24T18:18:31.933Z - notice: server ID: 192.168.80.162\n2016-02-24T18:18:31.939Z - notice: Starting server: web\n2016-02-24T18:18:31.940Z - notice: Starting server: websocket\n2016-02-24T18:18:32.309Z - notice: environment: development\n2016-02-24T18:18:32.310Z - notice:  Server Started \n2016-02-24T18:18:32.311Z - info:  actionhero restarted \n```\n. Ahh! I missed that it was a config file changing and not an initializer. On it. \n. Got a fix here => https://github.com/evantahler/actionhero/pull/783\n. It looks like folks have gone through a ton of hackery to get stuff like this working, as evidenced by packages like https://www.npmjs.com/package/cross-env and this conversation about NPM itself https://github.com/npm/npm/issues/10575\nI guess the right thing to do here is to make a single node script in the /test/run-test.js directory.  It would be a little JS file which will detect the OS (check process.platform), and then uses the a child process to actually call out to mocha... or you can just pass the ENV directly to the test runner via ENV modification.   This is vaguely what NPM recommends in this note https://github.com/npm/npm/issues/2800\n. This is also why the fancy packages use makefiles for this too https://github.com/mochajs/mocha/blob/master/Makefile\nI was going to suggest a bash script to wrap this all... but then again... windows :(\n. Marked!\n. closing in favor of https://github.com/evantahler/actionhero/pull/790\n. and linux! \n. fyi: OSX does something wacky with tmp paths: https://github.com/evantahler/actionhero/commit/6868196338dbf0038ac008794bcb8f0be1ee6bce\n. hey @krishnaglick ... how does the /test/server/web.js tests work if there's no /tmp on windows?\n. sure... so that test wan't running either then?\n. solves https://github.com/evantahler/actionhero/issues/780\n. no comments... merging! \n. whoops! Thanks! \n. Thanks for the PR!\nI'm not going to merge this for a few reasons:\n- Rather than just adding a method, this should be user configurable.  Do you expect users to meta-program over the existing methods?\n- Should the serializer be set per connection of such a thing can be used for more than one server type?  If so, this belongs in the connection, not the server (and the sever would then invoke connection.serialize or something)\n- no docs\n- no tests for added features.\nThat said, thanks for pointing out that we can do this! \n. Shame that actionhero can't help you out... good luck!\n. I think you are confusing developmentMode (the setting from api.config.general) with the NODE_ENV, which defaults to \"development\" if not set.  api.config.general.developmentMode is a config option which is used to denote that actionhero should be checking for changes in its files (actions/initializers/etc) and load them in and reboot when needed automatically.  The NODE_ENV (which again defaults to \"development\" is used as a flag to know which config settings to use, as you have have NODE_ENV specific overrides, like differnet database options in \"development\" vs \"production\". \nThe note you see in your log, notice: environment: development is talking about NODE_ENV\n. point me to the part that's confusing and I'll update it.\n. Note added! https://github.com/evantahler/actionhero/commit/16b11c189f2ebea8bfde615f836915ebc3eaf95e\n. Awesome! \n. @bluesunrise we'll do some work on it here https://github.com/evantahler/actionhero/pull/790\n. Test suite now working on Windows (10)!  The test for the binary is very unix-specific, with a lot of cp and rm -rf... so we just won't run that on windows.  The rest of the tests all work! \nThere's one redis bug this introduced to work though\n. reported by @donnyhardyanto\n. solved by https://github.com/evantahler/actionhero/pull/794\n. nope, responsee is not a word :(\n. solves https://github.com/evantahler/actionhero/issues/791\n. good find! Thanks!\n. Did you var should = require('should') anywhere in that file?  I often forget that... \n. sure! lots of people are using it in production http://www.actionherojs.com/learn-more/\n. thanks robot! \nSolved via: \n- https://github.com/evantahler/actionhero/commit/6b80f277641ca10666761a7f8a32e20c0eebc308\n- https://github.com/evantahler/actionhero/commit/4977b1a31e7e5e7a8f8c44342701fc1f683c0f64\n. For those who want to lear more about \"use strict\" https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\n. Thanks! \n. You've inspired me! We might as well do this in the core too https://github.com/evantahler/actionhero/pull/800\n. ok, cool!\n. Be sure those spaces pass the ESLINT checks.  @synthmeat is the expert here\n. rebase master onto your branch, and try the new npm run lint @synthmeat just made!\n. nice.\n. so... we have a lot of problems... can you exclude node-modeules?\n. wasn't for me... https://github.com/evantahler/actionhero/commit/56d61a07143c77098578c988c7bc6a43840527df Just in case\n. it's all good now!\n. great catch! \nCan you try this branch out and confirm that it solves the problem?\n. v13.3.1 is now up on NPM with this change\n. solves https://github.com/evantahler/actionhero/issues/807\n. Perfect, thanks!\n. Thanks! \n. :D\n. Thank you!\n. great!\n. cool.\n. Yep, that link you found is old, and that was before we had chat middleware!  Now we have decorators/formatters within the chat system that will (I think) do what you need.  Check the linked documentation above, and if that's not what you need, let me know.  \nAs far as the Bye!, I assume you are using the socket server?  We certainly should have a way to customize it... I've added that for you here: https://github.com/evantahler/actionhero/pull/817.  Does that work?  I still think that it is best to ack the quit response to the client before terminating the connection, but you can send '' if you want now. \nYou can use the localization framework now to configure that message per locale as well!\nSince not that many people use the socket server, can you share what you are making?\nGood luck! \n. helps solve https://github.com/evantahler/actionhero/issues/816\n. nice! Thanks! \nI'll merge this and add it to the table of contents too\n. oh... \nthis belongs in the MASTER branch... gh-pages it built programmatically as  build step. \n. I'll link the proper PR here\n. Here's the proper PR (I'm only changing the markdown build files)\nhttps://github.com/evantahler/actionhero/pull/821\n. This fixes up https://github.com/evantahler/actionhero/pull/819\n. And here we are! http://www.actionherojs.com/docs/#redis-high-availability-configurations\n. Good start @l0oky!  I've added some comments\n. nice!\nchange out that one > and this is good to go\n. First, this is a GREAT pull request!  Tests, docs... it's all here!  Well done!\nBefore this PR, we never allowed static files to be served from outside of the /public directory, as a good way to ensure safety.  Be sure that I can't request a route like /my/special/folder/../../../config/db.js and be shown the contents of the project's source.  I think this would allow that as it stands now...\n. Cool! Let me know when you update this!\n. Awesome! \n. Description?  Purpose?\nYou also checked in some phone numbers, etc... \n. Nice.\n. That is correct.\nWe are no longer using gitter.\nIt's slack time.\n. Can't merge now... my bad... can you rebase @l0oky ?\n. but I like this change!\n. you certainly can! just do this.timeout() in the test, or change it globally in test/mocha.opts\n. lovely\n. one note, otherwise looks good!\n. ready to merge?\n. Please add your example (or something like it) to the docs, and we'll be ready to go! \nhttps://github.com/evantahler/actionhero/blob/master/site/source/includes/docs/core/tasks.md\n. \ud83d\udc4d \n. Thanks! \n. Thank you for the fix!  \nDue to some of the crazy quirks in javascript, you can actually access \"named\" properties of an array, ie: \n``` js\nnode\n\na = []\n[]\na.thing = 'stuff'\n'stuff'\na\n[ thing: 'stuff' ]\na.thing\n'stuff'\nArray.isArray(a)\ntrue\ntypeof a\n'object'\na.length\n0\n```\n\nBut yes, api.servers.servers should be an object.\nAs a note, you can call data.connection.sendFile() from within your actions... you shouldn't need to use the server.\n. For reference: http://www.actionherojs.com/docs/#sending-files-from-actions\n. Ah! That's a pretty cool use-case!  Would you mind sharing more about what you are working on (via Blog Post perhaps?)\nYou can also always use data.connection.rawConnection.res, but that's what api.servers.servers.web.sendFile handles under the hood for you anyway... I would say keep using it.\n. The offending line: https://github.com/evantahler/actionhero/blob/master/initializers/utils.js#L141\n. @S3bb1 has offered to work on this feature\n. Closing in favor of https://github.com/evantahler/actionhero/pull/852\n. Looks good, and I agree with your decision to not delete config files.  I suggest that you add a few more notes, and then this looks ready!\n. \ud83d\udca5 \n. good start!\n. bump! \nAny progress here?\n. also, please change this PR to merge into the v14.0.0 branch, not master\n. I'm going to cut v14 now... which means this isn't going to make it.   We can spend more time on this, and it will make it into v15 then\n. will be solved by https://github.com/evantahler/actionhero/pull/858\n. Thanks! \n. Can you be more specific?  Which link?\n. Ah, Thanks! https://github.com/evantahler/actionhero/commit/fccca1fb9d07d35a71b113c555d345946c476699\n. awesome start!\n. \ud83d\udcaa \n. totally broken.  Fixed here https://github.com/evantahler/actionhero/pull/865\n. good change! I think inside the ASAR, it looks like your app boots at /... which I guess we've never encountered before! \n. First, I love this hack to make a fake transport for winston to delay execution.  However, I think there might be a larger problem if the local options for api.config.general.paths.log aren't loaded in by now.  \nI'll take a look\n. whoops, I read your change entirely wrong.\nRater than make a new logger.transports.push, why not just move the fs steps into the logger.transports.push block, before the return?\n. \ud83d\udc4d \n. Thanks!\n. I don't think I follow what you are trying to do here.  The line api.i18n.setLocale(clocale) seems to set the system locale, but if you are trying to respond to a client in the proper language, you actually need to set the connection's locale. '\nTo set the connection's locale, you should tell the config  (https://github.com/evantahler/actionhero/blob/master/config/i18n.js#L18-L21) which method to use. This is the method which probably uses locale to check the accept-headers.  This method just returns a string locale, ie: en-US.  Then, in your actions you can use data.connection.loacalize() to generate strings in the proper languge\n. yay! \n. It would be awesome if you were to write a blog post about your experiences with this.\n. The best/simplest place to write is probably https://medium.com.... just use the actionherojs tag!\nIf you join the team on slack http://slack.actionherojs.com we can talk more there!\n. \ud83d\udc4d \n. can you share specifically what the steps for On fresh install are?  Thanks!\n. man... developing on windows sucks.  I'm as far as https://github.com/coreybutler/nvm-windows\n. first, on windows the generate command would be ./node_modules/.bin/actionhero.cmd generate\n. other than that, it works fine for me\n```\nEvan Tahler@WIN-JB35ERASRRD MINGW64 ~/Desktop/test\n$ node --version\nv6.2.2\nEvan Tahler@WIN-JB35ERASRRD MINGW64 ~/Desktop/test\n$ npm --version\n3.9.5\n```\n. Can anyone else reproduce this?  If we can't reproduce it, it's not a real bug :/\n. That is great detective work! \nI'll guess that your default locale involves reporting dates in a non-english / non-western way?\n. solved by https://github.com/evantahler/actionhero/pull/884\n. https://github.com/evantahler/actionhero/releases/tag/v14.0.3 released to address this!\n. All fixed!\n. Neat! \n. ActionheroClient is a wrapper around the normal primus client (you can see the source here)\n``` js\n      var client = new ActionheroClient;\n  client.on('connected',    function(){ console.log('connected!') })\n  client.on('disconnected', function(){ console.log('disconnected :(') })\n  client.on('error',        function(error){ console.log('error', error.stack) })\n  client.on('reconnect',    function(){ console.log('reconnect') })\n  client.on('reconnecting', function(){ console.log('reconnecting') })\n  // client.on('message',      function(message){ console.log(message) })\n  client.on('alert',        function(message){ alert( JSON.stringify(message) ) })\n  client.on('api',          function(message){ alert( JSON.stringify(message) ) })\n  client.on('welcome',      function(message){ appendMessage(message); })\n  client.on('say',          function(message){ appendMessage(message); })\n\n  client.connect(function(error, details){\n    if(error != null){\n      console.log(error);\n    }else{\n      client.action('createChatRoom', {name: 'defaultRoom'}, function(data){\n        console.log(data)\n        client.roomAdd(\"defaultRoom\", function(error){ if(error){ console.log(error);} });\n        document.getElementById(\"name\").innerHTML = \"<span style=\\\"color:#\" + intToARGB(hashCode(client.id)) + \"\\\">\" + client.id + \"</span>\";\n      });\n    }\n  });\n\n```\nYou can pass options to the client (or an existing primus connection if you want which is generated elsewhere), ie: var client = new ActionheroClient(options, client);\nThe defaults which options can override are generated automatically into your client-facing JS via the settings in /config/servers/webscoket\n. A few notes on this:\n- The logger which the binary executer uses is a little different than the normal actionhero logger, and can be found here: https://github.com/evantahler/actionhero/blob/master/bin/actionhero#L16-L40\n- Why would you want to use the cluster wrapper around actionerho within Docker?  That violates the \"one container-one process\" rule.  I don't think you actually want the properties that the cluster manager provides:\n  - you don't want more than one worker (as you should use Docker's scaling properties here, not actionhero's, IE: swarm, compose, etc).  You also don't want dynamic in-container scaling\n  - you don't want the server to automatically be restarted.  You want the container to exit if the server exist; you want the errors bubbled up through the docker monitoring chain\n  - you don't want want hot-reload of code (when changed).  That should be a new VM.\n. Thanks @l0oky!\n. done! https://github.com/evantahler/actionhero/commit/0a524d922e0969c9bf2d389b1213adf51f17763f\n. Hi!   This is not an issue with the tool, rather a request for information.  Please join our slack team and ask the question of the community there.\n. slack.actionherojs.com\n. Thanks!\nI'm going to accept this merge, but I'll change back all const to var (to match the style).  At some point in the future we'll move actionhero up to ES6\n. sample time and reporting time should be configuable\n. The methods which do the sampling (taking the queue length, memory usage, and event loop delay) will need to be run via an initializer, and probably populate something like api.statusSamples\n. solved by https://github.com/evantahler/actionhero/pull/895\n. This is excellent, and on the right track!\n. You can now change node-resque to version v2.1.0 and use worker.performInline in specHelper to help with the tests. \nhttps://github.com/taskrabbit/node-resque/releases/tag/v2.1.0\n. GREEN! \n. I think this is good to go! \nPlease change the branch you are merging into to the new v15 branch!\n. \ud83d\udc4d \n. Don't worry! Your report here is easy to understand.\nDo you have fakeredis installed and part of your project's package.json?\n. For newly generated projects it will https://github.com/evantahler/actionhero/blob/master/bin/templates/package.json\n. Could be! \nCan you please add some tests to lock in the functionality?\n. @gcoonrod ready to merge?  LGTM!\n. Oh! @gcoonrod We need Documentation! \n. YAY!\n. Thank you for the great bug report! \nHave you re-configured your /config/redis.js?  There have been drastic (breaking) changes to how redis is to be configured now: https://github.com/evantahler/actionhero/blob/master/config/redis.js\n. > Those don't get updated by default using npm update!?\nAbsolutely not! We have no way of knowing what custom magic you've included in there, and simply overwriting it would be a pretty developer experience.  Even if you are using a configuration close to the default, it would be hard to diff/statically analyze any differences. \nCopy in a new config from either the master branch or a newly generated actionhero project and manually re-apply your changes.  There is no programatic way to do so. \n. We also are well aware that we should be writing upgrade guides between major versions :/\n. We are talking about this very thing right now in the slack channel!\n. All that is formally written down are the release notes, which tend to at least note breaking changes, IE: https://github.com/evantahler/actionhero/releases/tag/v14.0.0\n. Cool! Please share what you've made once it's up and running!\n. That's a start! Thanks! \n. made some changes https://github.com/evantahler/actionhero/commit/8ec5993517059a059127045fdfe32b395819ca11\n. Hi @l0oky!\nI took what you started here and went a bit crazy with it here: https://github.com/evantahler/actionhero/pull/913\n. replaces https://github.com/evantahler/actionhero/pull/909\n. Calling out @l0oky here, because he started this work via #909\n. Great catch! \nI assume you are connecting to a real redis server.  If your connection is spotty (and you reconnect), that double-callback can happen.  We are detecting it and stoping the server to prevent anything bad from happening.\nThis commit will handle this case properly.  I'll release a new version of ActionHero today with the fix.\n. https://github.com/evantahler/actionhero/releases/tag/v15.0.1 released on NPM. \nThanks! \n. Thanks! \n. \ud83d\udc4d \n. Thanks @l0oky \n. oh! I guess this means we can remove this section of the docs too, in favor of your repo: http://www.actionherojs.com/docs/#published-plugins.\n. done here https://github.com/evantahler/actionhero/commit/02ebb79f3c11bd99e72ab5d729a590aa27d84015\n. published!\n. cc @gcoonrod \n. Typo 'ctop'?\n. Can you share your initializer? Any promises or re-assignment of \"this\"?\n. @paulxtiseo if you look at how this is used in the rest of ActionHero, it seems that we've always expected you to pass in a scope arguments.  \nHowever, that is dumb. We can fix it like this: https://github.com/evantahler/actionhero/pull/928\n. Due to the way that scoping works, yes, the api object is not in scope at that level.  I would suggest the following:\njs\n// In ./utils/inputs.js\nmodule.exports = {\n  user: {\n      required: true,\n      formatter: function() {},\n      validator: \"api.validator.user\"\n    }\n}\n``` js\n// in actions/action.js\nvar inputs = require(__dirname + '/../utils/inputs.js')\nexports.userInfo = {\n  name: 'user/info',\n  description: 'view user info',\n  inputs: inputs.user,\n  outputExample: {},\n  run: function(api, data, next) {\n    next();\n  }\n}\n```\n. Yup, looks like tests fail here.  Also:\n- Please add a test which demonstrates and \"locks in\" your new functionality\n- This new feature seems to replace some of the code that exists (in action, init, and task loaders).  Please refactor the code to use this new method! \n. @paulxtiseo Bump?\n. you can put the test here perhaps https://github.com/evantahler/actionhero/blob/master/test/core/api.js, or just make a new file, that's OK too. \nAs far as refactoring, looking though the code again, it's rare that we are watching whole folders (and events happen on the file more than the folder), so maybe there's no refactoring needed.\n. Closing this due to lack of updates. This is a great change.  Since all the work is done in the config file (\"user-land\") this serves as simply a suggestion of a starting config file (which works for \"most\" users).\n. You are sharing the contents of your redis database, not your configuration file in config/redis.js.  \nIt does look like actionhero/resque are creating  data, so that's a good sign! \n. This is a shame.  I know a number of people happily use actionhero and redis on windows.  If you can provide more detail, perhaps we can help?\n. How did you install redis on windows?\n. ok... so we'll chalk it up to the totally unsupported port of Redis on windows :D \n. Can you share more of the log before this snippet?  I'm going to imagine that you have developer mode enabled, and this happens after a reboot of the server?\n. Using the following task (which is guaranteed to create and remove a multiWorker),  I am able reproduce this error.\n``` js\n// task\n'use strict';\nvar async = require('async');\nexports.task = {\n  name:          'looper',\n  description:   'My Task',\n  frequency:     0,\n  queue:         'default',\n  middleware:    [],\nrun: function(api, params, next){\n    var jobs = [];\njobs.push(function(done){\n  var i = 0;\n  while(i < 999999999){\n    i++;\n  }\n\n  done();\n});\n\njobs.push(function(done){\n  api.tasks.enqueueIn(1001, 'looper', {}, 'default', done);\n});\n\nasync.series(jobs, next);\n\n}\n};\n```\nWhich yields:\n```\n...\n192.168.7.25 @ 2016-09-02T15:21:24.367Z - info: worker: ended workerId=2\n192.168.7.25 @ 2016-09-02T15:21:26.288Z - info: worker: job success default workerId=1, class=looper, queue=default, result=[undefined, 0=undefined, 1=1, 2=1, 3=1]\n192.168.7.25 @ 2016-09-02T15:21:27.344Z - info: worker: started workerId=2\n192.168.7.25 @ 2016-09-02T15:21:27.820Z - info: worker: job success default workerId=2, class=looper, queue=default, result=[undefined, 0=undefined, 1=1, 2=1, 3=1]\n192.168.7.25 @ 2016-09-02T15:21:27.845Z - info: worker: ended workerId=2\n192.168.7.25 @ 2016-09-02T15:21:30.778Z - info: worker: job success default workerId=1, class=looper, queue=default, result=[undefined, 0=undefined, 1=1, 2=1, 3=1]\n192.168.7.25 @ 2016-09-02T15:21:31.830Z - info: worker: started workerId=2\n192.168.7.25 @ 2016-09-02T15:21:32.301Z - info: worker: job success default workerId=2, class=looper, queue=default, result=[undefined, 0=undefined, 1=1, 2=1, 3=1]\n192.168.7.25 @ 2016-09-02T15:21:32.333Z - info: worker: ended workerId=2\n192.168.7.25 @ 2016-09-02T15:21:34.231Z - info: worker: job success default workerId=1, class=looper, queue=default, result=[undefined, 0=undefined, 1=1, 2=1, 3=1]\n(node) warning: possible EventEmitter memory leak detected. 21 error listeners added. Use emitter.setMaxListeners() to increase limit.\nTrace\n    at Redis.addListener (events.js:239:17)\n    at connection.connect (/Users/evan/PROJECTS/actionhero/node_modules/node-resque/lib/connection.js:86:14)\n    at queue.connect (/Users/evan/PROJECTS/actionhero/node_modules/node-resque/lib/queue.js:25:19)\n    at worker.connect (/Users/evan/PROJECTS/actionhero/node_modules/node-resque/lib/worker.js:54:20)\n    at multiWorker.startWorker (/Users/evan/PROJECTS/actionhero/node_modules/node-resque/lib/multiWorker.js:67:10)\n    at Immediate._onImmediate (/Users/evan/PROJECTS/actionhero/node_modules/node-resque/lib/multiWorker.js:165:12)\n    at processImmediate [as _immediateCallback] (timers.js:383:17)\n192.168.7.25 @ 2016-09-02T15:21:35.293Z - info: worker: started workerId=2\n192.168.7.25 @ 2016-09-02T15:21:35.761Z - info: worker: job success default workerId=2, class=looper, queue=default, result=[undefined, 0=undefined, 1=1, 2=1, 3=1]\n192.168.7.25 @ 2016-09-02T15:21:35.796Z - info: worker: ended workerId=2\n192.168.7.25 @ 2016-09-02T15:21:38.703Z - info: worker: job success default workerId=1, class=looper, queue=default, result=[undefined, 0=undefined, 1=1, 2=1, 3=1]\n192.168.7.25 @ 2016-09-02T15:21:41.172Z - info: worker: job success default workerId=1, class=looper, queue=default, result=[undefined, 0=undefined, 1=1, 2=1, 3=1]\n(node) warning: possible EventEmitter memory leak detected. 21 end listeners added. Use emitter.setMaxListeners() to increase limit.\nTrace\n    at Redis.addListener (events.js:239:17)\n    at connection.connect (/Users/evan/PROJECTS/actionhero/node_modules/node-resque/lib/connection.js:90:14)\n    at queue.connect (/Users/evan/PROJECTS/actionhero/node_modules/node-resque/lib/queue.js:25:19)\n    at worker.connect (/Users/evan/PROJECTS/actionhero/node_modules/node-resque/lib/worker.js:54:20)\n    at multiWorker.startWorker (/Users/evan/PROJECTS/actionhero/node_modules/node-resque/lib/multiWorker.js:67:10)\n    at Immediate._onImmediate (/Users/evan/PROJECTS/actionhero/node_modules/node-resque/lib/multiWorker.js:165:12)\n    at processImmediate [as _immediateCallback] (timers.js:383:17)\n``\n. This is actually in issue withnode-resque.  Issue created =>  https://github.com/taskrabbit/node-resque/issues/155\n.node-resque` v3.0.3 is published, which fixes this issue.  Thanks for catching it!\nhttps://github.com/taskrabbit/node-resque/releases/tag/v3.0.3\n. node-resque is a dependency of ActionHero.  You can run npm update and it should also check the versions of dependent package's dependancies. \n. \ud83d\udc4d \n. great catch and explanation! \nI think writing a test for this behavior is a bitt to tricky, so we can merge this as-is.\nThanks! \n. great find!\nHowever, don't use a sync call to the filesystem within the request piepline, as this will block all other operations. \n. bump?\n. Yay!\n. A good feature addition! Please address the comments and note you change in the help.txt and website documentation:\n- https://github.com/evantahler/actionhero/blob/master/bin/templates/help.txt\n-  https://github.com/evantahler/actionhero/blob/master/site/source/includes/docs/ops/running_actionhero.md\n. \ud83d\udc4d \n. please use ===\n. \ud83d\udcad \n. I'm glad that actionhero is working out for you!\nWe didn't change anything to stop working with PM2 explicitly (nor did we ever explicitly support it).  Can you share more detail about the errors you are getting?\nIn the current version of ActionHero, this seems to work:\npm2 start \"./node_modules/.bin/actionhero\" --name 'actionhero' -- start \nfor one node, and then\npm2 start ./node_modules/.bin/actionhero -i 0 --name 'actionhero' -- start\nfor the cluster.  (tested on OSX).\n. Great find, and great fix! \nCould you please include a test for the web server to ensure that header priority is maintained?  Request, which we use in our test suite, allows fairly detailed controls over headers: https://github.com/request/request#custom-http-headers\n. Comments in Slack https://actionherojs.slack.com/files/evantahler/F2G6JMKCZ/Untitled.js\n. related to https://github.com/evantahler/actionhero/pull/938 cc @S3bb1 \n. This is wonderful.  Thank you! \n. @aurasalexander please join us on Slack if you have any questions/comments for us! http://slack.actionherojs.com\n. Cool.  Can you please add a test that demonstrates this functionality (and locks it in?).\n. Awesome! \n. related to node-resque https://github.com/taskrabbit/node-resque/issues/170\n. Closing (but keeping the node-resque issue open)\n. We'll certainly need some details to be able to reproduce this.  Lots of folks use cluster mode in production (on Ubuntu) without issue.  Can you share a specific action or initializer which causes the problem?  are you making HTTP requests outside of your app sourced from an action?\n. So there's a lot that can be going wrong here.  The main way to debug something like this is a lot of logging, both before an after a callback.\nIs mongo getting starved of connections?  Try this:\njs\nconsole.log('starting mongo for request: ' + data.connection.id);\napi.mongo.Account.findById(data.params.id)\n...\nWhat about the api.cache?  Have you starved redis?\njs\nconsole.log('starting cache read');\n                    api.cache.load(api.config.app.cacheKeys.accessToken + '_' + req.headers['authentication'], function(error, data){\nconsole.log('ended cache read');\nstuff like that.\nI'm sad to report that using promises make this kind of debugging almost impossible, as you can simply starve the request.  This is why all of ActionHero's methods do not ever return prommises.  To that end, you can at least log the \"start\" of an action and then the end... so you can tell which actions are the source of the problem.  also, if you log the start of an action, this will help you to see that it's not ActionHero that is the source of the problem :)\n\nAs an anecdotal note,  I've seen a number of people with problems like this, and in about 75% of them, a database driver was the problem.  They often hang unresponsively, which looks exactly like the problem you are seeing :( \n. I cannot reproduce this... you are on OSX or Ubuntu, yes?\n```\nnpm install -g actionhero\n...\nTo generate a new actionhero project, run \"node ./node_modules/.bin/actionhero generate\"\n/Users/evan/.nvm/versions/node/v6.3.1/lib\n\u2514\u2500\u252c actionhero@15.1.0\n  \u251c\u2500\u252c async@2.1.1\n...\nconfirm a real global install\nwhich actionhero\n/Users/evan/.nvm/versions/node/v6.3.1/bin/actionhero\nactionhero generate\nnpm install\nconfirming a proper generate and install\nls\nREADME.md    config       locales      node_modules pids         servers      test\nactions      initializers log          package.json public       tasks\nactionhero help\n100.65.234.158 @ 2016-10-12T21:31:05.388Z - notice:  Starting ActionHero \n100.65.234.158 @ 2016-10-12T21:31:05.482Z - info: --------------------------------------\n100.65.234.158 @ 2016-10-12T21:31:05.484Z - info: ACTIONHERO COMMAND >> help\n100.65.234.158 @ 2016-10-12T21:31:05.484Z - info: --------------------------------------\nActionHero - A multi-transport node.js API Server with integrated cluster\n  capabilities and delayed tasks\nBinary options:\n help (default)\n start\n...\n```\n. OH!\nThis happens when you are trying to run an actionhero command and you are not in a directory which has a config directory.  Once you make one, you are fine.\n. solved by https://github.com/evantahler/actionhero/pull/961\n. solves https://github.com/evantahler/actionhero/issues/960\n. Very strange!\nThe best place to log to figure this out is actually in node_modules/actionhero/initializers/staticFile.js on line 62.  You can see that lastModified should be the results of calling fs.stat on your file.  To that end, log out the whole stats object and take a look at it (and share it here!). \nAre you perhaps doing any sort of file/folder rotation at the end of the day?  This could be a symptom of a changing symlink or something similar.  when you say \"every night\", is this UTC night, local night, etc?  Does the problem only persist for a short while and recover, or does it remain until a reboot of the application?\nAlso, does Baidu use actionhero?!  I'd love to talk more if it does!\n. Thanks for the update.  Please let us know what the stats object looks like tonight!\n. That's something that used to only be available in the debug log level.  This will help https://github.com/evantahler/actionhero/pull/965\n. Also, normally folks deploy actionhero behind a proxy (nginx) which does the file serving directly, and they look at the logs there\n. This is a good fix!  Please update the test so it passes, and I'll merge it in!\n. Thanks!\n. THANK YOU!\n. Yes, please send in a PR! \nThis is a funny case, because if the file doesn't exist, the browser shouldn't send a 'if-modified-since header at all.  You can certainly end up in this situation due to deployments I guess. \nTo disable file-serving entirely, you will want to do a few things:\n- yes, remove any entries in api.config.general.paths.public\n- however, then if someone goes to / on your host, you will get a 404.  You'll probably want to adjust the base routes for your API then, check out api.config.servers.web.urlPathForActions,  api.config.servers.web.urlPathForFiles and api.config.servers.web.rootEndpointType\n. That means we should cut a new release! \nI'll do that today\n. Thank you! \n. Can you please provide examples of your middleware (I assume action middleware?) and your test action?  \nThis example project shows the spec helper using action middleware:\n- https://github.com/evantahler/actionhero-angular-bootstrap-cors-csrf/blob/master/test/test.js#L26-L32\n- https://github.com/evantahler/actionhero-angular-bootstrap-cors-csrf/blob/master/initializers/session.js#L49-L70\n. I understand your request now, thanks!\nSince middleware can work on actions both before and after the action's execution, how would you propose to test the \"after\" case?  I think in either way, we would need a built-in no-op action which could be called, and then you could amend your middleware on to it for this one request. \nOne note, you can always access the middleware already (not needing to re-require it) via api.actions.middleware\n. Cool.  Is this a pull request you are intending on writing yourself, or are you looking for help?  Have you joined our slack team yet?  That's best place to ask for help as you are working on a pull request. \n. see https://github.com/evantahler/actionhero/pull/972\n. I'm leaning towards option #3: provide a configuration option to opt-into system localization (and do not do it by default)\n. Proposed solution: https://github.com/evantahler/actionhero/pull/976\n. closed by #976\n. You can turn off response.serverInformation and response.requesterInformation as options to the web server in your NODE_ENV=test environment.  https://github.com/evantahler/actionhero/blob/master/config/servers/web.js#L105-L119  New projects should generate with these options.  As far as the sepcHelper goes, yes, you'll have that additional data, but is that causing any problems?  It's there to help with debugging.\nAs far as response coming as an array, that is strange! Can you share how you are using the specHelper?  You can see the specHelper in use here calling actions directly and data not coming back as an array: https://github.com/evantahler/actionhero/blob/master/test/actions/randomNumber.js\n. The first thing that this issue points out is that we are aren't being \"type safe\" (as safe as you can be in JS) with regard to our error handling and metadata in the SpecHelper.  \nWe shouldn't do things like data.response.error = error if typeof data.response === 'string'!\nThis should help that https://github.com/evantahler/actionhero/pull/979\n. And now, the actual solve to the question you initially asked: https://github.com/evantahler/actionhero/pull/980\napi.specHelper.returnMetadata = false\n. Closed via #979 and #980\n. Thanks for all of your detailed descriptions!\n. will be migrated in this PR https://github.com/evantahler/actionhero/pull/985\n@marcbachmann why the change?. Did you turn on an taskProcessors?\nhttps://github.com/evantahler/actionhero/blob/master/config/tasks.js#L35. Ah! Thanks... some of those examples are very old. I'll update them. You'll need to provide an error message or more details somehow.  That looks like the generate script failed?  Did it create the files needed?. I don't think anyone has considered generating a \"yarn\" bootstrap project for actionhero... Care to take a crack at it?. That seems really dangerous.  The generator never removes any existing files... you might have some data in that file you want to keep around?  . I personally don't like 1 or 2.  actionhero generate is a new project generator.  If you already have a package.json, you aren't running the generator to create a new project!  To that end, the generator does what it can, and won't touch any of your existing files.  \nIf you have ActionHero installed globally, #2 sort of already works... you just need to be inside your new project directory.\nYou should never install any node package globally ever under any circumstances.  What happens when versions change and separate projects you have want separate versions? But... that's just my opinion.\nThis would be a great thing to discuss in our slack room.  http://slack.actionherojs.com/. Closing, because this isn't really about Yarn, but about global packages and overwriting things. . Thanks! . Thanks!. Common practice is to use environment variables to change the runtime behavior of your application. This lets you only need one copy of your code on your server, but you can boot the application in seperate modes. \nFor example, in 'config/tasks.js' you could make minTaskProcessors and maxTaskProcessors equal to equivalent environment variables like 'process.env.MIN_TASK_PROCESSORS' and 'process.env.MAX_TASK_PROCESSORS'. Then you can book your application like this: 'MIN_TASK_PROCESSORS=1 MAX_TASK_PROCESSORS=5 ./node_modules/.bin/actionhero'. \nYou can also set defaults to 0 and false to ensure that \"a web server with no task processors\" is the default behavior. . I would perfer to have consistent logic all the way though wherever possible... ActionHero uses ActionHero to be ActionHero after all!. Interesting! You have chosen to allow the application to boot, but \"skipped\" any initializers which duplicate a name.  \nI personally would prefer the application to crash with the message  Initializer %s{} already exists.  The way you have it here would boot the application into a state which is unexpected for the developer.   A crash is a clear signal that something is wrong, and should be fixed in development.  \nA crash like this wouldn't make it to production, so I don't think we need to be safe about it.. Makes sense! Merged!. This is a good change.  Can you add in a test that shows it is working as expected?  You may be able to extend this test https://github.com/evantahler/actionhero/blob/master/test/actions/sendBuffer.js. Bump! \nany progress here?. Thanks! \ud83d\udc4d . re: v15\nWe've never back-ported a fix to an older major version, sorry.  This will be released in the v16.x  world.  The migration from v15 to v16 is quite small https://github.com/evantahler/actionhero/releases. \ud83d\udc4d \n. This is not an issue with ActionHero, nor is it a feature request.  To that end, I'm closing this issue.  Should you want advice on how to use oAuth with actionhero (I agree there don't seem to be any good examples published), please reach out to the community on Slack. I think this is covered by our new cli tools. This will require us to make some choices about test runners (mocha) and assertion tools (chai), and also how to boot the server in test mode.  This \"booting\" process should be part of core.. @S3bb1 this looks very related to your initializer changes https://github.com/evantahler/actionhero/pull/997.  Can you take a look? . solved by https://github.com/evantahler/actionhero/pull/1007\n. Thanks for the quick fix!. Released within https://github.com/actionhero/actionhero/releases/tag/v16.0.3. I am unable to reproduce this on OSX with node version v4.6.1 and actionhero v16.0.2.  Can anyone else?. Ah! Thanks for finding the @kytwb for finding the reference. Closing. This is tough because ws is optional, and there are other underlying web socket transports which can be used though primus.  I don't want to drop support for LTS node.  At the very least we should have a note on the site about this.  \nI think we should solicit input on the Slack channel.. cool.\nAlso, if you are using ioredis as you redis konstructor (in ./config/redis.js), you can also add the keyPrefix option to any one of those clients.. Fascinating and terrible. \nI agree that the folder names should be the same https://github.com/actionhero/actionhero/commit/60e8d71af480a930d26828d837a89b2af048f138 , but I don't belive that it would be actionhero's place to mess with the TMPDIR.\nUsing npm test on OSX sees this working OK, I wonder if this is Ubuntu specific?  Can you confirm that running Mocha directly ./node_modules/mocha doesn't have the same behavior?\n. Yep, it was a typo... and that was solved in the commit referenced above.   That doesn't change the fact that os.tmpdir() doesn't work, sometimes, if you use NPM. It looks like we only use os.tmpdir in tests.  I'm reluctant to require a new package just for testing.  We can move all of our test dirs inside of the test folder (local to the project), and that should clear this up. (and .gitignore any artifacts we create in the test). I don't think we are creating a cache, this is really just throw-away data for testing.  . @kytwb I'm looking to you for a pull request, so show us what implementation you think is best, and we can talk about it there! . @kytwb I'm closing this for now... and because the locale tests don't create a new directory :D\nChanged as part of https://github.com/actionhero/actionhero/pull/1036. This makes a lot of sense, and is probably a hold over from long ago.\nTo be more explicit, we would be changing the way that actions and initializers set headers for web clients. \nFrom:\njs\n// old\ndata.connection.rawConnection.responseHeaders.push(['myHeader', 'cool'])\nto \njs\n// new\ndata.connection.rawConnection.responseHeaders['myHeader'] = 'cool'. @gergelyke are you able to tackle this via pull request?. looks like cleanHeaders:\n- de-duplicates headers (except for set-cookie)\n- lowercases headers\n- ensures that no headers are sent for a HEAD request\n. closed via https://github.com/actionhero/actionhero/pull/1022. This is the behavior we want!\nWe've recently explicitly denied initializers with duplicated names: https://github.com/actionhero/actionhero/issues/1006 + https://github.com/actionhero/actionhero/pull/1007\nWe want to make it very clean which file is working on/with each part of the api namespace, and if it has problems, crashing. . Perhaps there is something wrong with how ah-sequelize-plugin works?\ncc @l0oky . Thoughts on the direct implantation: \n- Why not remove cleanHeaders here as well?\n- cleanHeaders reverses the header array and the iterates to ensure that the \"newest\" header added if there are duplicates will win out.  You are accomplishing  this directly with hash-propery uniqueness. Nice!\nThis seems like a good step to address your specific goal in using the res.writeHead API as directly as we can.  This will not address your or @neilstuartcraig desire to use data.connection.rawConnection.setHeader('myHeader', 'cool') directly.  I actually really like that approach.  This as written so far is not a breaking change... feel free to make it one!  My only concern is how to \"merge\" duplicate cookie headers, but you can create a helper for that.. Lets merge this in as-it-is, and I'll start a new issue to refactor how we deal with headers in general. . https://github.com/actionhero/actionhero/issues/1025. Released within https://github.com/actionhero/actionhero/releases/tag/v16.0.3. I've done nothing about it.... will be solved by https://github.com/actionhero/actionhero/pull/1053. Can you describe this PR? What are your goals?  Can you share a use-case?  Is this a breaking change?. @witem your work here looks compete to me, with good test coverage! \n@crrobinson14 can you share what trouble you ran into regarding dealing properly with array/nested object types?  \n. I like @witem's approach here very much.  It's non-breaking, and it follows the same patterns and conventions we already have.  In fact, this is probably what people expect should happen anyway with these nested uploads, as I've seen questions about it before. \n@witem I think this looks great. The only thing missing now is to update the Docs to talk about this!  At the very least, a section (here)[https://www.actionherojs.com/docs/core/#actions-inputs] is required.  That would be edited here: https://github.com/actionhero/actionhero/blob/master/docs/_includes/docs/core/actions.html\nWhile a bit out of scope for this PR, @crrobinson14 the pattern I generally advise people to follow with shared validtors/formatters is to put them in a separate file and require them when needed, ie: \n```js\nconst Validators = require('../support/validators.js')\nexports.myAction = {\n  name: 'myAction',\n  description: 'myAction',\ninputs: {\n    email: {\n      required: true,\n      validator: Validators.email,\n    },\n    password: {\n      required: true,\n      validator: Validators.password,\n    },\n  }\nrun: function (api, data, next) {\n    //... \n    next(null)\n  }\n}\n```. Awesome! Thanks so much!. Released within https://github.com/actionhero/actionhero/releases/tag/v16.0.3. I've been testing on your configuration: node v6, ubuntu (+ OSX), and I can't reproduce this... can anyone else?\n. I'm going to close this in favor of https://github.com/actionhero/actionhero/issues/1034. Looks great! Thank you for finding this! . Can you also share your config/redis and config/tasks?  That will be very helpful.  Do you see the same behavior when using a real redis connection?. For example, here's a test suite you can run in isolation against a new actionhero project.  It explicitly runs delayed tasks, a scheduler, multi worker, etc.  It' runs a task N times in a loop. Given this configuration, I can't get the above error to occur:\n```js\nvar chai = require('chai')\nvar dirtyChai = require('dirty-chai')\nvar async = require('async')\nvar expect = chai.expect\nchai.use(dirtyChai)\nvar ActionheroPrototype = require('actionhero')\nvar actionhero = new ActionheroPrototype()\nvar api\ndescribe('actionhero Tests', () => {\n  before((done) => {\n    actionhero.start((error, a) => {\n      expect(error).to.be.null()\n      api = a\n      done()\n    })\n  })\nafter((done) => {\n    actionhero.stop(function (error) {\n      expect(error).to.be.null()\n      done()\n    })\n  })\ndescribe('tasks', () => {\n    var taskOutput = []\nbefore((done) => {\n  api.resque.multiWorker.options.minTaskProcessors = 1\n  api.resque.multiWorker.options.maxTaskProcessors = 1\n  api.config.tasks.queues = ['*']\n  api.config.tasks.scheduler = true\n  api.config.tasks.timeout = 100\n  api.config.tasks.checkTimeout = 50\n\n  api.tasks.tasks.slowTask = {\n    name: 'slowTask',\n    description: 'task: slowTask',\n    queue: 'test',\n    frequency: 0,\n    plugins: [],\n    pluginOptions: {},\n    run: (api, params, next) => {\n      taskOutput.push('slowTask')\n      setTimeout(next, 1000)\n    }\n  }\n\n  api.tasks.jobs.slowTask = api.tasks.jobWrapper('slowTask')\n\n  api.resque.startScheduler(() => {\n    api.resque.multiWorker.start(() => {\n      done()\n    })\n  })\n})\n\nafter((done) => {\n  delete api.tasks.tasks.slowTask\n  delete api.tasks.jobs.slowTask\n  api.config.tasks.queues = []\n  api.config.tasks.scheduler = false\n  api.resque.multiWorker.options.minTaskProcessors = 0\n  api.resque.multiWorker.options.maxTaskProcessors = 0\n  done()\n})\n\nvar times = 20\nfor (var i = 1; i <= times; i++) {\n  it(`enqueues and runs a delayed task (${i})`, (done) => {\n    var jobs = []\n\n    jobs.push((next) => {\n      var time = new Date().getTime() + 1000\n      api.tasks.enqueueAt(time, 'slowTask', {}, (error) => {\n        expect(error).to.be.null()\n        next()\n      })\n    })\n\n    jobs.push((next) => {\n      setTimeout(next, 1000)\n    })\n\n    jobs.push((next) => {\n      taskOutput.forEach((e) => {\n        expect(taskOutput[0]).to.equal('slowTask')\n      })\n      next()\n    })\n\n    async.series(jobs, done)\n  }).timeout(3000)\n}\n\n})\n})\n``. Awesome research, and yes! That makes sense!\nWe've tried to keep allinternal` initializers with a priority under 1000, but I think this is a good special case.   \nhttps://github.com/actionhero/actionhero/commit/dcf6dd9b529c0e844ee0bc821abe7fa75ef9aef2\n. @pckhoi thinking about this more, it is actually dangerous to start the whole server via the CLI.  And, if you are on the same host which you already have a web-server for example, start will fail, as the ports for the web are already open and will block.\nTo that end, if you really do need to start something, whatever start does should be exposed at another method on the api object you can call within your method.. solved by https://github.com/actionhero/actionhero/pull/1041. @chimmelb your middleware seems like a good option for a fix, especially because it only messes with schema-type actions. . BTW, I think the source of the difference in behavior between GET and everything else is here https://github.com/actionhero/actionhero/blob/master/servers/web.js#L481-L489\nWe try to parse uploaded params as a form, which de-URL encodes them, and sorts them out... only when it is not a GET or HEAD.  Perhaps we need to also try to parse URL params in a similar way.  The more I think about this, the more this might be a server issue and not an action issue.. Awesome!. FYI, I've changed the log-level of your error catcher to 'warning', because... that seems important.\n2e69814a0663a4c6268ac527b5e03f69a3b6969b. I like it!\nNow please add a Pull request to https://github.com/actionhero/www.actionherojs.com with the documentation update.. Oh, and also the tests should pass :D. Hi! Can you explain a little more about your use-case?  We've generally not allowed config files to be read from linked plugins, as they can't be changed.  That is why the act of running actionhero link actually copies config files out of your plugin into your main project.  I'd like to hear more about why that behavior doesn't work for you.\nThanks!\n. Ok, fair enough! \nThere are some other place where we might use dot-prop, where we are trying to find a method on the api object as defined by a nested property string.  Would you mind taking a look at those locations within this PR as well?\n\nhttps://github.com/actionhero/actionhero/blob/5a88c5912ed87702b784439c713334ce0f2e8442/initializers/actionProcessor.js#L8\nhttps://github.com/actionhero/actionhero/blob/dcf6dd9b529c0e844ee0bc821abe7fa75ef9aef2/initializers/redis.js#L77\nhttps://github.com/actionhero/actionhero/blob/746f057ca78c86603cd0610f3550bf23746b785d/initializers/i18n.js#L22\n. Perhaps we can use dot-prop to replace api.utils.stringToHash\n. Looks good to me! \nAre you ready to have this merged in?\n. Excellent idea! \nI've implemented that here https://github.com/actionhero/actionhero/pull/1065. solves https://github.com/actionhero/actionhero/issues/1064. Can you explain more about your use case?  Validators have been generally used to ensure proper types & existence, while, for example, looking up uniqueness of a key in a database usually belongs in middleware or in the action itself.\n\nAlso, to account for this type of optional sync or async definition, we would need to check the return values for all actions, and move validation to an async processing chain, which would slow things down for all actions :/  . Closing due to inactivity. Depends on https://github.com/prodatakey/dirty-chai/issues/23, which would allow us to use dirty-chai with chai 4.0. will be solved by https://github.com/actionhero/actionhero/pull/1072. Can you be more specific, and perhaps include a code sample?  What data from URLs is being included?  Are you perhaps asking to filter GET query params from actions?. I don't think I follow here... perhaps an example of how you would use that separation (between params and query) in an action would help?  \nSince your params are unique, (table, field, etc), does the distinction of how they came to be passed in matter?  Does that also mean that you wouldn't want /api/tableEdit?table=table&field&field&val=val&name=me&age=21 to work?\nAlso, today, if you are curious about the URL, you can inspect data.connection.rawConnection.params to see the query https://www.actionherojs.com/docs/servers/web#the-connection-object\n. There's a lot to unpack here!\nFirst, why would you run a task synchronously?  Are you trying to use the same methods in an action and task?  If so, put them in an initializer!   Who would require('./tasks/sometask') ?\nHowever, there have been a number of times I've been tempted to re-write actionhero's API to look more like this, ES6-class-y.  Do you like this syntax better?  Right now, ActionHero looks a lot like next, in that the file-system is the convention for loading the server (tasks live in /tasks, actions in /actions, etc).  If we want to abandon that and do a more explicit \"main\" file which requires everything, perhaps this style makes more sense?. Also, actionhero has CLI commands now! If you have api.nameSpace.doAThing() you can invoke it in an action, a task, and via CLI. Same question as @crrobinson14!  Also, modifying how things use require seems to be a job for webpack or babel?. I'm closing this as the next version of actionHero will require that actions and tasks are ES6 classes, which can be easily extended however you like. Also, all run methods will be async methods, so there will be no ned for a promise-ify wrapper like your example!\nFor example: #1098. Please check the test suite.  Some of your style doesn't pass the linter.  Also, please lock in the behavior you expect with a test.. I'm personally having trouble imaging a use case... but I'm sure that's because I've been stuck inside of ActionHero for too long... can you share a full example (with multiple files) in your PR's description?  The example you have now looks to me like it can be accomplished within the structure that exists already. . @billybonks Also, we would require a test added which locks-in your new functionality, which could also help explain the use-case you have.. I don't think I see what the problem is? Join us on slack if you need help!. I'm closing this as the next version of actionHero will require that actions and tasks are ES6 classes, which can be easily extended however you like.  Also, all run methods will be async methods, so there will be no ned for a promise-ify wrapper like your example!  \nFor example: https://github.com/actionhero/actionhero/pull/1098. Thanks! I'm merging this is now, but I'll be removing your setting the connection to undefined.  We are deleting properties of an object, so delete is the proper command here. . solved by https://github.com/actionhero/actionhero/commit/f6b9c8c8a9179ae0847e4efc6cdea63667f26693\nFYI @gcoonrod . If you are talking about a JSON body payload, ie: curl -H \"Content-Type: application/json\" -X POST -d '{\"username\":\"xyz\",\"password\":\"xyz\"}' http://localhost:8080/api/stripe, you can use connection.rawConnection.params.body.\n```\n\ndata.connection.rawConnection.params.body\n{ username: 'xyz', password: 'xyz' }\n``. keep in mind thatdata.connection.rawConnection.paramsdiffers fromdata.paramsin a few ways:\n- no formatters, validators, defaults, etc will be applied\n- no sanitization will be done on them, so be sure that you are testing that the request is coming from a trusted source (ie: only stripe's servers). Can you provide as test CURL request with a body payload which emulates the response you are trying to access from ActionHero?\n. related to https://github.com/actionhero/actionhero/issues/213 and https://github.com/actionhero/actionhero/pull/318. @antonsapyanov the curl statement will be very helpful.  For example, this is invalidcurl -X POST -H \"Content-Type: text/plain\" --data \"this is raw data\" http://localhost:8080/api/randomnumberbecause you can't have POST data which is just a string (text/plain).  You can have POST data with other content-types, but those are already parsed, as shown above. Also,https://stripe.com/docs/webhooks#signaturesseems to indicate the data you need for verification is actually in a request header, which you can get viaconnection.rawConnection.req.headers`. Got it!  Check out https://github.com/actionhero/actionhero/pull/1082... I think this would solve your problem?. closed by #1082. @crrobinson14 @genexp This is likely to increase the memory footprint of every connection... good idea or bad idea?. I guess the thing to do here would be to make this optional!. Excellent ideas! I'll work some of them up now.  You hit the nail on the head: a lot of this is dangerous (memory, DDOS, etc).. @crrobinson14 I think we would still need to store the body-buffer somewhere, and since we want it destroyed along with the connection, it seems to make sense to append it there.  Regarding the buffer-to-string, you are right! might as well let the consuming action handle that.. regarding action metadata, I really don't like action-metadata which is only useful for one type of connection.  We only have one of those and it tears me up inside :D\n\nMore importantly, the connection is fully parsed (and params extracted) before the action is even determined.  We can't wait until then to know if we need to keep the body around.. The problem is that the stream is complete by the time the action is started.  It needs to work this way because we need all FROM options/uploads, from the body stream, to be available (and added to params) for the action.\n. I really don't like the implementation of this pull request... so send you idea as a pull request! . I think we should at least wait until npm v5.2 is shipped with a version of node.... ActionHero will always target LTS versions of node for as long as they are supported.  So we support v4, 6 and 8 right now.  I belive npm attempts to always be backwards-compatible, so that shouldn't be an issue.. I think this would actually only be a change to the documentation and test suite.  . Since ActionHero v18 requires node v8+, we can make this change now. solved by https://github.com/actionhero/actionhero/pull/1138. Woo! It took 63 commits, but we've got a green build!. A discussion about whether or not actions/tasks etc should become classes can be found here https://github.com/actionhero/actionhero/pull/1098. Save it to the data object!  This is only in-scope for the current connection.  As you have it, data.current_user = user is great.\nHere are some examples which do a similar thing, loading session data from redis and adding it to data.session. https://github.com/actionhero/actionhero-angular-bootstrap-cors-csrf/blob/master/initializers/session.js#L58. Hi! I'm closing this pull request, as this functionality will be included in the next version of ActionHero.  Tasks of the future will be defined as classes, and their frequency property can either be set directly, or by a synchronous method.\nThis behavior was locked-in via this test https://github.com/actionhero/actionhero/pull/1088/commits/1c6825ed50517b13d6d8923552ae6362d257d652\n```js\nconst ActionHero = require('actionhero')\nmodule.exports = class MyTask extends ActionHero.Task {\n  constructor () {\n    super()\n    this.name = 'myTask'\n    this.description = 'myTask'\n    this.queue = 'default'\n  }\nfrequency () {\n    return 1000 * 10\n  }\nasync run (api, data) {\n    // your logic here\n  }\n}\n```. \ud83d\udc4d . covered by https://github.com/actionhero/actionhero/pull/1088. I'm glad you like working with ActionHero!\nWe use the i18n package to handle our translations, and as far as I can tell, this is the only behavior they support (returning a default string/message when none is found).  I've asked about it here https://github.com/mashpie/i18n-node/issues/333. covered by https://github.com/actionhero/actionhero/pull/1088. Potentially a solve for https://github.com/actionhero/actionhero/issues/1074 and an alternative to https://github.com/actionhero/actionhero/pull/1075. Yep, we are doing this!. @gcoonrod I'm going to merge this in, but I'd still love your comments!. Done via release v1.0.1 https://github.com/actionhero/browser_fingerprint/releases/tag/v1.0.1. Updates to the package are currently on node-resque#master, but a new version has not be pushed to NPM yet. published! https://github.com/taskrabbit/node-resque/releases/tag/v5.0.0. closing in favor of https://github.com/actionhero/actionhero/pull/1108. Updated in https://github.com/actionhero/actionhero/pull/1088. @crrobinson14 I took a crack at a more formal JSdoc setup.  Your PR was a good starting point, but for all the initializers, we don't want them exposed as classes, so I think namespaces are a better option.   \n\nHowever, I can't figure out how to make the method names actually say api.cache.load rather than just load.  As silly as that is, I think it is important.. Describing classes, even with virtual methods, makes a little more sense\n\n. I've got some questions on what should be public/private here, but I'll merge it in and we can discuss as we go.. This can be done against the v17 branch https://github.com/actionhero/actionhero/tree/v17. There's still a bit of work to do to add the namespace declarations to the top of each initializer file.  The example I made was https://github.com/actionhero/actionhero/commit/8e6d965b5736a78a6be97b826e140359c115a75c#diff-a3807627aca8240ebff7870d0c3742d0\nThey won't show up on the site until that is complete. https://docs.actionherojs.com/v17.1.0/. solved by https://github.com/actionhero/actionhero/pull/1144. Closed by  #1114. This is a great find, and good solution! \nCan you please add a test that shows that this is working?  You can use the sleepTest action for something slow, and any verb for something fast.  . I've added this test to the master branch which ensures the proper behavior (if I understand your test case properly) https://github.com/actionhero/actionhero/commit/0733574f6469d1b967ac6118eae8e98b8d56644e. re-running your test suite after https://github.com/actionhero/actionhero/commit/642a862f58a93cac63fb0f124d7e91bd3cf7e89d. @gcoonrod want me to wait until you are further along to merge?. Looks great!  There's a merge conflict, but sort that out, and I'll merge it in!\nAfter that, I'll sort out how to have multiple versions of the docs published to the website at the same time. This PR is missing the tooling require to actually build the docs.  jscoc in package.json, the theme, the build script, etc.  I'm happy to add those . oh.  I'll merge this and do some cleanup.  ./docs should be git-ignored.  That's what is failing in the test too. . solved by https://github.com/actionhero/actionhero/pull/1130. Did you sort out what you needed help with?  Join us on slack if you need help! . conversation moved to https://github.com/actionhero/actionhero/pull/1135/. Interesting! I just added https://github.com/actionhero/actionhero/commit/b797da4e5a9252fc3258b9a95d478ae8d2726b2c to the docs to explain what this in a task is at the moment.   Your example for why you want to change what this is makes perfect sense.\nThanks! . Can you please update the reference I mentioned above in the task description to call out explicitly that this is now the task itself?  This might be a breaking change for some folks.. Great! \nSince this problem started as the run method of a task not properly having access to this (per your example), could you also please add a test that confirms this behavior?   After that, I'll merge this in!\n. Amazing.  Thanks!\nI'll get this released today. If you want to talk more about ActionHero, please join the rest of us on https://slack.actionherojs.com!. awesome, great find!. solves https://github.com/actionhero/actionhero/issues/1083. This is a known issue with NPM.  Either upgrading npm install -g npm or downgrading your version of NPM to npm@v5.3.x will fix it.\nhttps://github.com/npm/npm/issues/18520. I'll leave this issue open for a while so others can find it easily. . closing this now as newer versions of NPM have been released which fix this issue.. Upon much reflection... we should not support this.  We should actually throw a warning if actionhero is installed globally.. This can be accomplished with the detect-installed package. solved by https://github.com/actionhero/actionhero/pull/1166. Love it!\nI don't know what's going wrong with the greenkeeper integration... but merging anyway! . Thanks!!!. While this will double-send the error string down as both status and error, I think that is OK.  Can you please add a test (here: https://github.com/actionhero/actionhero/blob/master/test/servers/websocket.js) which confirms this behavior?. checking in again on that test!  Do you have any questions about how to do it?. It seems you are working on things other than this patch in your branch, so I'm going to close this PR.  . Hi Oscar!  Not allowing data.params to be altered was an explicit choice made in this PR https://github.com/actionhero/actionhero/pull/1114 solving this bug https://github.com/actionhero/actionhero/issues/1112.  Basically, action middleware's preprocessors can modify params, but after that, nothing can.\nIn your example, what you are doing actually looks like a great case for an input formatter, which is allowed to modify the params:\n```js\nmodule.exports = class accountCreate extends Action {\n  constructor () {\n    super()\n    this.inputs = {\n      email: { \n        required: true,\n        formatter: (p) => { return p.toLowerCase() }\n      }\n    }\n  }\nasync run (data) {\n}\n};\n``\nIf input formatters are not enough, then yes, you would need to clone the params object:let editableParams = Object.assign({}, data.params). Oh, and remember that one of the great things about using \"real\" classes is that if you have common behavior in many actions (shared inputs, formatters, etc), you can make a base class which you actions extend from. ActionHero doesn't requireansi-styles, so I'm assuming you are installing actionhero into a directory which already has some node_modules and apackage.json?  To isolate the problem, make a new directory and trynpm install --save actionhero && npx actionhero generate`.  \nIf those work, then there's something fishy/incompatible with your project.  If those don't work, we can take a look together.. Closing due to lack of response.. What setting do you have for api.config.servers.web.rootEndpointType?  The default is file, which means that files in your public directory are those that will shown for root paths.  To hit one of your actions (assuming that api.config.servers.web.simpleRouting = true) you would need the API path, ie localhost:8080/api/showDocumentation.  Adding a query parameter to the request has no effect. \nWithout the api, you should actually see the error as defined by the file server That file is not found, set by api.config.errors.fileNotFound and locales/en.json .\n\nIn checking older versions of ActionHero (v17) I can confirm that the behavior is the same, and adding a query parameter to the request has no effect. . Oh! great find!  Thank you for taking the time to submit a fix!. will be solved by https://github.com/actionhero/actionhero/pull/1152. Per https://docs.actionherojs.com/tutorial-development-mode.html, you can do node ./node_modules/.bin/actionhero --inspect start\n\n. Oh, on windows there's some other executable to use, perhaps ./node_modules/.bin/actionhero.bin?   I don't have access to a windows computer to check the exact path, but it should be there!. Can you clarify that:\n1) you have redis installed and it is running on the default ports?\n2) that you are running on either OSX or Linux. Or, are you suggesting that the quickstart include that redis should be running?  That's probably a good idea...\nhttps://www.actionherojs.com/get-started/. Ah! We should have a note about how to tell your project that you intend to skip redis: https://github.com/actionhero/www.actionherojs.com/commit/b3560e5acd031ee43c1257236e0a1e98ec7526ec\nRegarding your other issue, I can't reproduce the error Cannot find module... can you confirm your steps look like the below?\n```\n[08:45:49] evan@evantop [~/Desktop]\n\nmkdir test\n[08:45:51] evan@evantop [~/Desktop]\ncd test/\n[08:45:52] evan@evantop [~/Desktop/test]\nnode --version\nv8.9.0\n[08:46:00] evan@evantop [~/Desktop/test]\nnpm --version\n5.5.1\n[08:46:02] evan@evantop [~/Desktop/test]\nnpm install actionhero\ntypechecker@2.0.8 preinstall /Users/evan/Desktop/test/node_modules/extendr/node_modules/typechecker\nnode ./cyclic.js\ntypechecker@2.0.8 preinstall /Users/evan/Desktop/test/node_modules/extract-opts/node_modules/typechecker\nnode ./cyclic.js\nactionhero@18.0.2 postinstall /Users/evan/Desktop/test/node_modules/actionhero\necho 'To generate a new actionhero project, run \"npx actionhero generate\"'\n\nTo generate a new actionhero project, run \"npx actionhero generate\"\nnpm WARN saveError ENOENT: no such file or directory, open '/Users/evan/Desktop/test/package.json'\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN enoent ENOENT: no such file or directory, open '/Users/evan/Desktop/test/package.json'\nnpm WARN test No description\nnpm WARN test No repository field.\nnpm WARN test No README data\nnpm WARN test No license field.\n\nactionhero@18.0.2\nadded 122 packages in 5.626s\n[08:46:13] evan@evantop [~/Desktop/test]\nnpx actionhero generate\nGenerating a new actionhero project...\ncreated directory '/Users/evan/Desktop/test/actions'\ncreated directory '/Users/evan/Desktop/test/pids'\ncreated directory '/Users/evan/Desktop/test/config'\ncreated directory '/Users/evan/Desktop/test/config/servers'\ncreated directory '/Users/evan/Desktop/test/initializers'\ncreated directory '/Users/evan/Desktop/test/log'\ncreated directory '/Users/evan/Desktop/test/locales'\ncreated directory '/Users/evan/Desktop/test/bin'\ncreated directory '/Users/evan/Desktop/test/servers'\ncreated directory '/Users/evan/Desktop/test/public'\ncreated directory '/Users/evan/Desktop/test/public/javascript'\ncreated directory '/Users/evan/Desktop/test/public/css'\ncreated directory '/Users/evan/Desktop/test/public/logo'\ncreated directory '/Users/evan/Desktop/test/tasks'\ncreated directory '/Users/evan/Desktop/test/test'\nwrote file '/Users/evan/Desktop/test/config/api.js'\nwrote file '/Users/evan/Desktop/test/config/logger.js'\nwrote file '/Users/evan/Desktop/test/config/redis.js'\nwrote file '/Users/evan/Desktop/test/config/tasks.js'\nwrote file '/Users/evan/Desktop/test/config/errors.js'\nwrote file '/Users/evan/Desktop/test/config/plugins.js'\nwrote file '/Users/evan/Desktop/test/config/i18n.js'\nwrote file '/Users/evan/Desktop/test/config/routes.js'\nwrote file '/Users/evan/Desktop/test/config/servers/socket.js'\nwrote file '/Users/evan/Desktop/test/config/servers/web.js'\nwrote file '/Users/evan/Desktop/test/config/servers/websocket.js'\nwrote file '/Users/evan/Desktop/test/package.json'\nwrote file '/Users/evan/Desktop/test/actions/status.js'\nwrote file '/Users/evan/Desktop/test/actions/createChatRoom.js'\nwrote file '/Users/evan/Desktop/test/actions/showDocumentation.js'\nwrote file '/Users/evan/Desktop/test/public/index.html'\nwrote file '/Users/evan/Desktop/test/public/chat.html'\nwrote file '/Users/evan/Desktop/test/public/css/cosmo.css'\nwrote file '/Users/evan/Desktop/test/public/logo/actionhero.png'\nwrote file '/Users/evan/Desktop/test/README.md'\nwrote file '/Users/evan/Desktop/test/test/example.js'\nwrote file '/Users/evan/Desktop/test/locales/en.json'\n\n\n\nGeneration Complete.  Your project directory should look like this:\n|- config\n| -- api.js\n| -- errors.js\n| -- i18n.js\n| -- logger.js\n| -- redis.js\n| -- routes.js\n| -- tasks.js\n| -- servers\n| ---- web.js\n| ---- websocket.js\n| ---- socket.js\n|-- (project settings)\n|\n|- actions\n|-- (your actions)\n|\n|- initializers\n|-- (any additional initializers you want)\n|\n|- log\n|-- (default location for logs)\n|\n|- node_modules\n|-- (your modules, actionhero should be npm installed in here)\n|\n|- pids\n|-- (pidfiles for your running servers)\n|\n|- public\n|-- (your static assets to be served by /file)\n|\n|- servers\n|-- (custom servers you may make)\n|\n|- tasks\n|-- (your tasks)\n|\n|- bin\n|-- (your custom CLI commands)\n|\n|- locales\n|-- (translation files)\n|\n|- tests\n|-- (tests for your API)\n|\nreadme.md\npackage.json\nYou may need to run npm install to install some dependancies alert\nRun 'npm start' to start your server\n[08:46:22] evan@evantop [~/Desktop/test]\n\nnpm start\nmy_actionhero_project@0.1.0 start /Users/evan/Desktop/test\nactionhero start\n\n\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\nACTIONHERO COMMAND >> start\n\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\n192.168.7.25 @ 2017-11-10T16:46:26.319Z - notice:  Starting ActionHero \n192.168.7.25 @ 2017-11-10T16:46:26.320Z - notice: environment: development\n192.168.7.25 @ 2017-11-10T16:46:26.321Z - notice: pid: 42154\n192.168.7.25 @ 2017-11-10T16:46:26.321Z - notice: server ID: 192.168.7.25\n192.168.7.25 @ 2017-11-10T16:46:26.338Z - info: actionhero member 192.168.7.25 has joined the cluster\n192.168.7.25 @ 2017-11-10T16:46:26.342Z - notice: Starting server: web @ 0.0.0.0:8080\n192.168.7.25 @ 2017-11-10T16:46:26.344Z - notice: Starting server: websocket\n192.168.7.25 @ 2017-11-10T16:46:26.862Z - alert:  ActionHero Started \n```. Just to confirm, is everything working for you now?. Oh! This is great! I didn't realize that we had problems on node v9.  I've used your fix here (https://github.com/actionhero/actionhero/pull/1153) and ensured that we test v8 and v9 of Node.JS on CI.\nI don't think we need the extra test, as we were already throwing errors on node v9\nThank you!. It's OK now!. Thanks!. Thank you for this!  \nI think the best behavior would actually be to allow the behavior you thought was possible in the first place.  Only if a validator returns false or throws an error should the param count as invalid.  \nPR to update this here https://github.com/actionhero/actionhero/pull/1158. closing in favor of https://github.com/actionhero/actionhero/pull/1158. @gcoonrod do you see this as a breaking change, or a clarification of what was previously undefined behavior?. Dang... so this would be a major SEMVER change in your opinion? . v18.1.0 it is!. This is a great find! \nI initially wanted to see if there was a way to generically add this kind of check into initializers/staticFile, but I don't think that's a possibility.  Only the connection's server will know if the file's stream was actually used by anyone.  Right now, only the web server has this problem (there's no cache mechanism (etag, etc) for the websocket or socket servers).\nSo it looks like it really is the responsibility of the server to ensure that the filestream really is either pipe'd or closed.  Can you please add a note about this to the docs (https://github.com/actionhero/actionhero/blob/master/classes/server.js#L140)?  . Thanks!. (formatted original bug). Try now! \nIt looks like some of the later versions of ah-node-resque weren't published to NPM (v0.5+ is required for ActionHero v18).  They are now!. Oh, and per the readme (https://github.com/actionhero/ah-resque-ui#setup-for-actionhero-v18) don't forget to add the config file as well. . It seems that this was fixed in Primus in May perhaps?\n https://github.com/primus/primus/commit/fb5cf83ecdab3d8565d13522e14e0c9cd9386819  Can you be sure that you have upgraded all of your dependancies to the latest version?. Interesting!  I cannot reproduce this using the same setup as you outline (osx, node v8.8.1, etc).  This might have to do with the part of the path you have replaced with ***.  Is your path lower case?  Have spaces?. @bhagaban Can you share the full path of the file you are changing please?\n@crrobinson14 or @gcoonrod are you able to reproduce this?. Looking into the code, I don't think block is needed any more, because now we store and compare the file stats.\nI'll remove it via https://github.com/actionhero/actionhero/pull/1163, and I think that should help.  There's no need for that setTimeout at all any more :/\n. This would be the same issue described in https://github.com/actionhero/actionhero/pull/1152 and https://github.com/actionhero/actionhero/pull/1153.\nPer our policy of supporting v17 of ActionHero until March of 2018, we'll need to merge this change into v17 as well. will be solved by https://github.com/actionhero/actionhero/pull/1168. Released in v17.1.2. Can you share more about how you are splitting your services? You already have 2 good options built into ActionHero: \n use web or sockets to have one service call another in-line for concurrent requests\n have one service enqueue a task while another consumes it for asynchronous communications. . Sure.  If all of your services point to the same redis instance for Tasks, you can have one service enqueue jobs, and another service actually do the work on them.  For example, say you have an email sending service.  Rather than teach all of your microservices how to talk to SendGrid, only the email service knows this, and everyone else can just publish a task sendEmail with the proper args to a queue called email, which is only ready the related service.\nThis, of course, only works for async activities.  If you need something to happen within the context of a user's request (ie: ask the user service if the user connecting to the AccountService is logged in), can't you just have one service make an HTTP request to the other? This may not be the fastest form of communication, but it is sure reliable (no persistance or state the connection) and scalable (load balancers are good).. Thanks! https://github.com/actionhero/actionhero/commit/e0693cdbdd4059bd0a87b832a9efda7b59a2181c. In the file config/servers/socket.js set enabled: true.. Can you share more about\n\nbasic tests included in the default install \n\nThe only tests that should be included are the below:\n```js\n'use strict'\nconst chai = require('chai')\nconst dirtyChai = require('dirty-chai')\nconst expect = chai.expect\nchai.use(dirtyChai)\nconst ActionHero = require('actionhero')\nconst actionhero = new ActionHero.Process()\nlet api\ndescribe('actionhero Tests', () => {\n  before(async () => { api = await actionhero.start() })\n  after(async () => { await actionhero.stop() })\nit('should have booted into the test env', () => {\n    expect(process.env.NODE_ENV).to.equal('test')\n    expect(api.env).to.equal('test')\n    expect(api.id).to.be.ok()\n  })\nit('can retrieve server uptime via the status action', async () => {\n    let {uptime} = await api.specHelper.runAction('status')\n    expect(uptime).to.be.above(0)\n  })\n})\n```. Some thoughts\n1) can you be sure that NODE_ENV=test when you run your test suite?  Are you using cross-env?\n2) Are you sure that your test suite uses a different Redis DB than your development environment?\n2) That error line eventually references back to api.config.tasks.workerLogging... have you modified this property (and lost some keys to the hash) in your test environment?  Did you upgrade from an older version of ActionHero whose config didn't have this data?. It might be helpful to hear more about what you are trying to accomplish.   The code above will:\n before any task is run, log \"this\", which is just a description of the middleware (as you see).\n after any task is run, load all failed tasks in the system\n  * If any failed task is found, remove it from the failed queue and re-enqueue it removing any params.\nIs that what you intend?    If you, perhaps, want to retry all failed tasks, there are other ways to accomplish it.  You might be trying to read \"this\" in the task context, which you can't us anonymous functions for.  Try:\njs\nconst middleware = {\n            name: 'tasksFailedControl',\n            global: true,\n            priority: 90,\n            preProcessor: async function () { // note the \"FUNCTION\" \n                console.log(this);\n            },\nhttps://docs.actionherojs.com/tutorial-middleware.html. Can you please help create a failing test case for this?  We'll need to see what your routes.js file looks like as well to debug this. Oh, and are you certain that you are URL-encoding your GET params?. This is generally on hold until AWS Lambda supports node v8+. Thanks for finding this @AAUBSS!\nPlease send in a Pull Request with the fix! Please add a failing test here https://github.com/actionhero/actionhero/blob/master/test/utils/utils.js#L115 and then replace the old regex with your update! \nAt the time, I don't think we found a good IPv6 parser... but one might exist now?  If you can find one, please remove the util function for it!. Closing in favor of https://github.com/actionhero/actionhero/pull/1179. There's something shady going on with your fork of ActionHero... I think you haven't updated it since August.  You are still testing older versions of node which we have moved on from.  Can you please rebase your changes from master and try again?\nThanks!. ... other than that, the change looks great!. Awesome! Thanks!. Thanks!. FYI: to ensure that this is not a breaking change (folks won't see crazy errors if they don't update their config/errors.js), I've added 174138139967891494a18d8e69bdce871d8b2369.  This ensures that the old behavior will be used if api.config.errors.genericError is not found.. I don't know what's going on with GreenKeeper (https://twitter.com/EvanTahler/status/964576993252540416), but this looks great! \nThank you!. Can you please provide an inclusive test case that reproduces this?  I just added another test that shows in a simple case, that changing the content header with connection.pipe is OK: https://github.com/actionhero/actionhero/commit/6fcc60c07dc0abdb79352ce54642cbd5b9e0248c. Ouch, and interesting!\nIt seems that if you were to make those setters/getters, that means you shouldn't destructure the API object... and to solve the /reference/ problem you had, you would also need to not destructure the API object... so either way, there's a behavior problem we need to fix first.\nPerhaps we should update all the docs/examples not to do destructure?. This is a great conversation for the mailing list BTW! . I'm adding a few other folks as reviewers to this PR, as I'm conflicted about what to do: \n- From the slack chat, I think that this PR is in response to a technically invalid request... the request shouldn't be XML, just the payload... I think.\n- That said, allowing folks to handle real-world situations, even if they are out-of-spec is useful.\n  - If this is out-of-spec, rather than making an option, can we create an overridable situation instead?\n- Or is this really a bug?\nEither way, I think seeing the test first would make the failing scenario much clearer, then we can discuss the implementation.  TDD FTW!. Ok, here's a crazy idea:  Rather than provide custom parser options as config files... perhaps all we need to do is not error if the content isn't actually JSON.  \nI could imagine 1 new config option api.config.servers.web.allowInvalidJson, and if it is set to true, we'll catch the formidable error set set connection.rawConnection.params.rawBody.   From there, you can parse the body however you want in a middleware or action.. I added some tests around this to https://github.com/actionhero/actionhero/pull/1196.\n\nRegarding api.config.servers.web.saveRawBody, if fomidable errors, the saved rawBody is a 0-byte Buffer. (Formidable might pause the req processing)\n\nI think the second new test in #1196 shows that this isn't true?. If you can't reproduce a behavior in a test, please do not change anything around.  \nI think my main confusion about your use-case is around:\n\nAnother needed test is when the body is not JSON (like you have) and the Content-Type header is text/plain or something that formidable doesn't know how to handle. It is kind of a different result, and more the use-case for my legacy system or AWS SNS that are setting the content type.\n\ncheck this new test: https://github.com/actionhero/actionhero/commit/a100399ab0aba38da9e13c4fe0611fb707af5511.  This is testing an a plain text payload, and ensuring that rawBody is set.  What else is missing?\n. closing in favor of #1198. Are you able to upgrade to v18 of ActionHero?  here were a number of problems with actionhero link, and it has since been removed.  Acknowledging all the different behaviors in NPM vs YARN, and Windows vs OSX vs Linux, we've moved back to a config/plugins.js config file where you explicitly tell ActionHero were your plugins are.  \nOn OSX & NPM v5, using your plugin would look like:\n```js\n// from config/plugins.js\nconst path = require('path')\nexports['default'] = {\n  plugins: (api) => {\n    return {\n      '@bssgmbh/ah-scope-test': { path: path.join(__dirname, '..', 'node_modules', '@bssgmbh', 'ah-scope-test') }\n    }\n  }\n}\n```\nWith the above, your helloWorld.html page is visible. . No, I'm sorry.  Older versions of ActionHero are no longer supported (by me anyway).  \nIn the short term, you might try making a symlink from node_modules/@namespace/package to node_modules/package, and linking the symlink rather than the true path of the name-spaced package.  \nIf you need more help, please join our slack group, and perhaps someone there has some ideas.. Good idea!   I think in the 'requirements' section, we should add the part about ensuring that redis is always up-and-running too.  Here's the changeset: https://github.com/actionhero/www.actionherojs.com/commit/5b2bec180267d7620d0738575cb9baa1a5ef5b74. PRs now call out the status of various tests explicitly\n\n. Workflows are also cool.\n\n. That's a good idea!  It's safe to say that git has \"won\" the VCS battle, so assuming most folks use GIT these days is probably correct.  Are you comfortable handling this in a Pull Request?   Need any guidance?. That's awesome! welcome to the future!\nAs you suggest, we can use the .gitignore in the project already and copy it to all new generated projects.\n1. Source the existing .gitignore into oldFileMap with a name like \"gitignore\" https://github.com/actionhero/actionhero/blob/master/bin/methods/generate.js#L20\n2. in newFileMap, tell your new file \"gitignore\"'s content to be placed at .gitignore in your newly generated project\nI think that's it for getting it to work, but we need to test this (TDD isn't required, but all new PRs to ActionHero need a test to \"lock in\" the functionality).  We've got tests for the CLI already, and we check that it makes the proper files here https://github.com/actionhero/actionhero/blob/master/test/core/cli.js#L98.  I would add .gitignore to the list of files we are looking for, and that should be enough!. Ping! Checking in if you need help with this.. Ping again!. This will require a test to ensure the functionality added.. I think a more specific way to describe this error would be to say that the Web Server's simple routing can't handle actions with \".\" in their names.\nFor example, the template action random.number\n```js\nconst { Action } = require('actionhero')\nmodule.exports = class RandomNumber extends Action {\n  constructor () {\n    super()\n    this.name = 'random.number'\n    this.description = 'I am an API method which will generate a random number'\n    this.outputExample = { randomNumber: 0.123 }\n  }\nasync run ({connection, response}) {\n    response.randomNumber = Math.random()\n    response.stringRandomNumber = connection.localize(['Your random number is {{number}}', {number: Math.random()}])\n  }\n}\n```\nand the routes:\njs\nexports['default'] = {\n  routes: (api) => {\n    return {\n      get: [\n        { path: '/random/number', action: 'random.number' }\n      ]\n    }\n  }\n}\ncertainly work with curl \"localhost:8080/api/random/number\"\nCan you confirm that this is specifically what you are seeing?. The source of the error when using simple routing can be found here: https://github.com/actionhero/actionhero/blob/master/servers/web.js#L355-L363\nIn essence, requesting a GET to a url like /api/random.number looks like you are requesting a file with the extension \"number\".  In this case, ActionHero will attempt to return a response not with the MIME of application/json, but whatever the mime of your file extension is.  This allows flexible APIs for things like returning text, xml, images, etc.\nThis behavior is actually configurable with the matchExtensionMimeType property of actions.  It defaults to true, you probably want to switch that to false.\nEither way, there is a bug here which fails if we can't determine a MIME/type.  The proper behavior should be to stick with application/json in that case.. Resolves https://github.com/actionhero/actionhero/issues/1192. Are you running tasks in your test suite?  Perhaps there's a processor doing something in the background that isn't stopping properly?. You'll need to provide a lot more information for us to be able to help:  Initializers, Tasks, config examples... I think the slack channel is a better forum to help you debug.\nI'm going to close this issue. If you can create a test which reproduces this case, we can open a new issue.. Awsome, thanks!\nYeah, to test this locally, you'll need to go though a few hoops.  We can't use NPM link, as it doesn't link binary files... so we can do it manually:\n```bash\nmake a test folder\nmkdir ~/Desktop/test && cd ~/Desktop/test\nnpm init #(just agree to all the defaults)\nmkdir node_modules\nsymlink in local actionhero to node_modules\nln -s ~/PROJECTS/actionhero/actionhero node_modules/actionhero\nsymlink the actionhero binary (normally happens on npm install)\nmkdir node_modules/.bin && cd node_modules/.bin\nln -s ../actionhero/bin/actionhero actionhero\ncd ../..\ntry to generate a new project\n./node_modules/.bin/actionhero generate\n```\n. Actually, I think that would be enough!. Do you have development mode enabled?  Also, the server watches files, not folders, so that means if you create a new file, you'll need to manually reload the server, but changes to existing files will be picked up.. Can you share more information about your setup?  What shell are you using, what does your action do, etc.\nWe have a rigorous test that checks this functionality on OSX and Linux, which is passing. https://github.com/actionhero/actionhero/blob/master/test/core/developerMode.js. ping! Any update?. I'm sorry, but I can't reproduce this problem.  I'm closing this issue.  Perhaps the folks on slack (slack.actionherojs.com) can help you?. Ah! Great catch!\nI believe the issue is here . https://github.com/actionhero/actionhero/blob/master/initializers/routes.js#L145.  This line assumes that we are only loading routes once (api.routes.loadRoutes), so we need to set each verb to an empty array.  However, this method will be called once for each config folder, so we would be erasing old data.  \nAre you able to submit a PR to fix this?  Something like the below should work, however a test will need to be added.\njs\napi.routes.routes = {\n  'head': api.routes.routes.head || [], \n  'get':  api.routes.routes.get || [], \n  'post':  api.routes.routes.post || [], \n  'put':  api.routes.routes.put || [], \n  'patch':  api.routes.routes.patch || [], \n  'delete':  api.routes.routes.delete || []\n}. I think you\u2019ll need to do the merge in the routes initialized, no? Either way, writing the approparite test will help ensure it is solver properly\nAs this is a loader, I\u2019m not overly concerned with performance, so if it works, it works!. Ping! Any progress on your solution?  Need any help?. Cool! \nSince we are talking about reading files from the file system, I think you'll need an integration test that really does read & write files.  The good news is that there is already a test harness for this type of thing here https://github.com/actionhero/actionhero/blob/master/tests/core/cli.js\n\nMake a new describe block for this test\nmake a route in the normal config/routes.js\nin the beforeAll, write a new config folder with a new routes file\nstart the server with both config paths\nmake a request to a route from the normal path and the new config path\nin the afterAll delete the new config file. Great catch! \nSolved by https://github.com/actionhero/actionhero/pull/1205. This is a great change, sorry we missed it!\n\nHowever, you don't need to keep around the old version of the documentation.  The docs in the \"master\" branch are appropriate for the master branches' code.  We have other branches/tags with old docs.  \nPlease update this pull request just to contain the updated example. Ping! Let us know if you need any help!. closed by 8cd5d67f9499d7658b4904c548922e809bc74fb0. closed by https://github.com/actionhero/actionhero/pull/1212. Thank you! . This is great, thank you! This will be part of the v19 release https://github.com/actionhero/actionhero/releases/tag/v19.0.0. closed by https://github.com/actionhero/actionhero/pull/1217. Closes https://github.com/actionhero/actionhero/issues/1216. Thanks!. FYI: https://github.com/actionhero/actionhero/commit/07f3a3173a44b1044ca019f74dded93834cb4d1e. it looks like you have some missing information in your /config/tasks.js file\nhttps://github.com/actionhero/actionhero/blob/master/config/tasks.js#L9-L20. If you can't share your config file, there's not much more help we can give.  That line is explicitly about reading a configuration option that comes from the config.. Can you share more of your project's code?  Are you seeing an error?  Do you have schedulers and task-processors running?  Have you updated your config files per the upgrade instructions?. Closing due to lack of response. Can you share any more information?  Is this worker that crashed serving web traffic?  Running tasks? Connected to any database?. Does your cluster ever reach equilibrium?  IE: do you ever see a line like this 10.219.5.146 @ 2018-05-24T16:09:04.251Z - notice: cluster equilibrium state reached with 8 workers, indicating that the N workers your cluster expected to start, did? . So it looks like you have a task that crashes your server.  Perhaps there is a certain combination of arguments which causes the problem.  You should be able to look in Redis to see the tasks that are being worked on at the time of the crash (they are probably still listed as \"working\" workers).  That might provide some guidance. \nAlso, increase the verbosity of your task logging (here).  I'll bet if you do you will see a job start, but never finish because it crashed.  That will narrow down where to start looking \nThat said, this is very bad error message.. note to self: https://github.com/nodejs/node/issues/9523#issuecomment-259303079 is an interesting way to get at better stack traces for uncaughtRejections... but there is a performance penalty. You last note really does indicate that there is some bad data/params that your workers are reading from redis.  . https://github.com/actionhero/actionhero/commit/12d258a9dcf48b8ca833aeb7cf3427c96fb497eb brings better stacktraces and logging to the cluster from uncaught exceptions\nbash\nactionhero start cluster --workers 1\n\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\nACTIONHERO COMMAND >> start cluster\n\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\nusing default value of `actionhero-worker-` for `workerTitlePrefix`\n192.168.7.25 @ 2018-05-26T20:21:26.843Z - notice:  - STARTING CLUSTER -\n192.168.7.25 @ 2018-05-26T20:21:26.843Z - notice: pid: 43960\n192.168.7.25 @ 2018-05-26T20:21:26.844Z - info: starting worker #1\n192.168.7.25 @ 2018-05-26T20:21:27.213Z - info: [worker #1 (43961)]: starting\n192.168.7.25 @ 2018-05-26T20:21:27.216Z - info: actionhero member actionhero-worker-1 has joined the cluster\n192.168.7.25 @ 2018-05-26T20:21:27.823Z - info: [worker #1 (43961)]: started\n192.168.7.25 @ 2018-05-26T20:21:27.823Z - notice: cluster equilibrium state reached with 1 workers\n192.168.7.25 @ 2018-05-26T20:21:30.214Z - alert: [worker #1 (43961)]: unhandled rejection => Oh No!\n192.168.7.25 @ 2018-05-26T20:21:30.214Z - alert: [worker #1 (43961)]:    Error: Oh No!\n192.168.7.25 @ 2018-05-26T20:21:30.215Z - alert: [worker #1 (43961)]:        at Timeout.setTimeout [as _onTimeout] (/Users/evan/PROJECTS/actionhero/actionhero/bin/methods/start.js:136:16)\n192.168.7.25 @ 2018-05-26T20:21:30.215Z - alert: [worker #1 (43961)]:        at ontimeout (timers.js:475:11)\n192.168.7.25 @ 2018-05-26T20:21:30.215Z - alert: [worker #1 (43961)]:        at tryOnTimeout (timers.js:310:5)\n192.168.7.25 @ 2018-05-26T20:21:30.215Z - alert: [worker #1 (43961)]:        at Timer.listOnTimeout (timers.js:270:5). Ok, great research! These errors make sense after a USR2, as there may be a worker with a long-running job which is signaled to stop, takes too long, and is eventually force-killed.   Then, after an hour (which is the default), node resque will attempt to clean the old worker and move the task it was working on to the failure queue... and something is going wrong there.\nCan you confirm that in your application you are not writing anything to redis that would match this glob this.connection.key('worker', 'ping', '*')?. I've fixed a few small things in node-resque (https://github.com/taskrabbit/node-resque/releases/tag/v5.3.1) so we node-resque multiworkers, and therefore actionhero will now properly wait for a task that is being worked on to complete before exiting.  We may have had a case where there was some strange shutdown behavior in your app.\nI've also added better logging of clearing stuck workers to ActionHero via https://github.com/actionhero/actionhero/pull/1223/files\nNow, if you have a job that never ends: \n```js\n// from tasks/verySlow.js\nconst ActionHero = require('actionhero')\nmodule.exports = class MyTask extends ActionHero.Task {\n  constructor () {\n    super()\n    this.name = 'verySlowTask'\n    this.description = 'an actionhero task'\n    this.frequency = 1000\n    this.queue = 'defualt'\n    this.middleware = []\n  }\ntimeout () {\n    return 1000 * 60 * 60 // 1 hour\n  }\nasync run (data) {\n    const timeout = this.timeout()\n    await new Promise((resolve) => {\n      setTimeout(resolve, timeout)\n    })\n  }\n}\n```\nAnd you set api.config.tasks.stuckWorkerTimeout = (1000 * 60) (just to move things along faster)\nYou can run ActionHero once, and then try to stop it / restart it with any signal you like:\n``bash\n\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\nACTIONHERO COMMAND >> start\n\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\nactionhero @ 2018-05-29T03:02:58.172Z - notice: *** Starting ActionHero ***\nactionhero @ 2018-05-29T03:02:58.173Z - notice: environment: development\nactionhero @ 2018-05-29T03:02:58.174Z - notice: pid: 74796\nactionhero @ 2018-05-29T03:02:58.174Z - notice: server ID: actionhero\nactionhero @ 2018-05-29T03:02:58.188Z - info: actionhero member actionhero has joined the cluster\nactionhero @ 2018-05-29T03:02:58.192Z - info: resque scheduler started\nactionhero @ 2018-05-29T03:02:58.193Z - notice: Starting server:web@ 0.0.0.0:8080\nactionhero @ 2018-05-29T03:02:58.195Z - notice: Starting server:websocket`\nactionhero @ 2018-05-29T03:02:58.871Z - alert:  ActionHero Started \nactionhero @ 2018-05-29T03:02:59.356Z - info: [ worker ] started workerId=1\nactionhero @ 2018-05-29T03:03:03.198Z - info: This node is now the Resque scheduler master\n^Cactionhero @ 2018-05-29T03:04:59.198Z - notice: stopping process...\nactionhero @ 2018-05-29T03:04:59.201Z - info: resque scheduler ended\n/Users/evan/PROJECTS/actionhero/actionhero/bin/methods/start.js:72\n      throw new Error('process stop timeout reached.  terminating now.')\n      ^\nError: process stop timeout reached.  terminating now.\n    at Timeout.setTimeout [as _onTimeout] (/Users/evan/PROJECTS/actionhero/actionhero/bin/methods/start.js:72:13)\n    at ontimeout (timers.js:466:11)\n    at tryOnTimeout (timers.js:304:5)\n    at Timer.listOnTimeout (timers.js:267:5)\n``\nYou will see that now ActionHero properly terminates itself with a long-running job after 30s (configurable viaprocess.env.ACTIONHERO_SHUTDOWN_TIMEOUT).  We can now be sure that we have a \"stuck worker\" who was previously working onverySlowTask`.\nWhen you next start up ActionHero (and wait +1 minute), we can now see that the cleanup job happens, and there is no crash\n\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\u208b\nACTIONHERO COMMAND >> start\n\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\nactionhero @ 2018-05-29T03:05:39.914Z - notice: *** Starting ActionHero ***\nactionhero @ 2018-05-29T03:05:39.915Z - notice: environment: development\nactionhero @ 2018-05-29T03:05:39.916Z - notice: pid: 74814\nactionhero @ 2018-05-29T03:05:39.916Z - notice: server ID: actionhero\nactionhero @ 2018-05-29T03:05:39.929Z - info: actionhero member actionhero has joined the cluster\nactionhero @ 2018-05-29T03:05:39.932Z - info: resque scheduler started\nactionhero @ 2018-05-29T03:05:39.934Z - notice: Starting server: `web` @ 0.0.0.0:8080\nactionhero @ 2018-05-29T03:05:39.935Z - notice: Starting server: `websocket`\nactionhero @ 2018-05-29T03:05:40.578Z - alert: *** ActionHero Started ***\nactionhero @ 2018-05-29T03:05:41.067Z - info: [ worker ] started workerId=1\nactionhero @ 2018-05-29T03:05:44.939Z - info: This node is now the Resque scheduler master\nactionhero @ 2018-05-29T03:06:25.038Z - warning: cleaned stuck worker workerName=evan.local:74796+1, worker=evan.local:74796+1, queue=defualt, class=verySlowTask, queue=defualt, args=[], exception=Worker Timeout (killed manually), error=Worker Timeout (killed manually), backtrace=[killed by evan.local at Mon May 28 2018 20:06:25 GMT-0700 (PDT), queue#forceCleanWorker, node-resque], failed_at=Mon May 28 2018 20:06:25 GMT-0700 (PDT), delta=61\nGive it a try please!. The main change was in node-resque.  Update that in your package.json, and you can use it now. Moving the conversation to https://github.com/actionhero/actionhero/issues/1225. In a nutshell:\n client generates messageId however it wants\n client sends messageId with each request (could be a number, string... doesn't matter)\n server stores this onto each running request thread/actionProcessor\n  * server checks for uniqueness of messageId\n server responds to client with messageId. closed by https://github.com/actionhero/actionhero/pull/1231. Note: This code is actually from the node-resque project https://github.com/taskrabbit/node-resque/blob/master/lib/queue.js#L245\nI think this behavior is correct. I'll use redis-cli to validate.  The pid doesn't need to exist any more at the time the worked is cleaned. We are just moving things around in redis.  The goal of foreCleanWorker is to save the payload data of the stuck job, not to delete it, so you can inspect it later.  We \"throw\" and stop the operation when we can't accomplish the task\nworkers in this context is the hash of all workers.  We take the members of the resque:workers set, and take the final section after the last \":\", which is the list of queues it is working on (https://github.com/taskrabbit/node-resque/blob/master/lib/queue.js#L198): \n127.0.0.1:6379> smembers resque:workers\n1) \"evantop.local:58156+1:default\"\n... which would be workers = {'evantop.local:58156+1': 'default'} in this case.\nThe reason for the explicit throw is that if we can't determine what \"queue\" the worker was working on.  We need the queue name to source the \"real\" name of the worker to load the failed job names.\nDo you have : in your job names?  On one of your servers, can you please add api.log(workers) right before if (!queues) { throw new Error('worker not found') }.  That would be helpful for debugging.. oh, that's in node-resque.  You can emit perhaps, of just console.log, depending on how you are logging you actionhero application. @DoctorDimon I've spent a fair amount of time trying to reproduce this, but can't.  That said, it's always best to have some code to look at!  Here's an example ActionHero project we can use\nhttps://github.com/actionhero/test-project-slow-tasks\nI've set this up so we can have an easy way to stop an ActionHero server mid-task, see that the worker is stuck, check the :ping keys, and watch the worker get properly cleared.  \nPlease try to reproduce your issue as a pull request on that new repo so we can discuss real code. . That makes sense then!  So you have a (crashed/exited) worker which only has some of its data in redis.  \nI guess this is what we are talking about then! https://github.com/taskrabbit/node-resque/pull/247\nCan you try the code in this PR, and let me know if it fixes your issue?  How do you feel about relaxing the safety of the method?\nAlso... you should probably get a bigger/better redis server!. minor change pushed... one more try!  Thanks for working though this with me!. Are you still seeing that new error, or was that a one-time thing?  That's odd because we just asked for keys the line before... we may need to do both of those reads in a transaction, or, filter out null/undefiend responses.. ... and I would expect the JSON.parse() to fail at that point. oh! this is also solved by https://github.com/taskrabbit/node-resque/issues/250. Node Resque v5.4.0 is published! . Thank you for this work!  I like your choice to limit the test log file size.\nYou have a lot of work here to generate the log directory... but that's not needed! Winston will do that for us.. Thanks! Let us know if you need any help.. Fascinating! It looks like Winston will create any log files it needs... but not the directory if it doesn't exist.  \nSo, do you A) create the directory within the initializer or B) create the directory as part of the test setup (https://github.com/actionhero/actionhero/blob/master/.circleci/config.yml#L13). ?. I would suggest B), and do the file creation as part of the test setup via cicle.yml.  I would suggest this because the directory for everyone else would exist already because of running the app locally would do so... it's just in the test ENV which won't have it.. Thansk!. closed by https://github.com/actionhero/actionhero/pull/1239. This is by design.  data.params is frozen, as it should always represent the state of the connection's inputs.  If you want to append data to the connection, don't use params... why not just data.personId?. @gcoonrod  a few reasons for the breaking change:\n1. the term messageCount assumes that the IDs need to be incremental integers, which isn't the case.  the new messageId is more clear that \"whatever\" works\n2. \"count\" also seems to imply that there will be some validation on the string.  There won't be\nI guess we could have kept both around, but they really will be doing the same thing, so I thought it would be best to be clear.  For 90% of folks, this upgrade won't be breaking, and for those that it is... I want to call it out very clearly with a major version cahnge. Thank you for contributing, but that is the correct syntax for a javascript arrow function.  Arrow functions are different than normal \"functions\", as they don't change the scope of this, which is exactly what you want in a class. OH! You are correct, I'm sorry! we do want the function because we are assigning this explicitly.  Thank you!. ... aww, it looks like you removed your fork, we can't merge this pull request.  Can you try again please?. Thanks!. You should be passing an instance of Queue, not construtor.. The issues seems to be around knowing when to expand a class vs a function in api.utils.hashMerge.\nThere might be something to\n```\nc = class someClass {}\na = () => {}\nf = function () {}\n\nObject.getOwnPropertyNames(f)\n[ 'length', 'name', 'arguments', 'caller', 'prototype' ]\nObject.getOwnPropertyNames(a)\n[ 'length', 'name' ]\nObject.getOwnPropertyNames(c)\n[ 'length', 'prototype', 'name' ]\n```. @gcoonrod thanks for the feedback!  Waiting on your review. Dang... I'll rety them. re-tested and green. The tests are failing because Jest uses JSDOM, which just published v11.12.  In Jsdom@11.12, they added localstorage (and session storage, etc)... which really hates being run in the way that Jest uses it.\n\nWe could lock our version of Jsdom to v11.11, or see how jest will handle this\nJsdom commit: https://github.com/jsdom/jsdom/commit/3afbc0feb7b2b4ac4c84530ea6af90e1f79a88ee. related to https://github.com/facebook/jest/issues/6766. Please join us on https://slack.actionherojs.com!  I imagine the community has a number of ideas for you.. Thanks for this update!  However, I think a default setting of 1GB, when formidable itself suggests a default of 2MB, is a bit extreme, no?. I agree with @gcoonrod.  Match formidable's defaults, and we'll merge it in!. Thanks! We merged this in and are updating the default options to match formidable's defaults. Neat!\nWhile I don't think we should skip the await (this would cause an uncaught rejection if we can't write to redis), we can ensure that the callback/promise is ready before writing. \nSolved in https://github.com/actionhero/actionhero/pull/1246 maybe. Closing in favor of https://github.com/actionhero/actionhero/pull/1246. awesome! Thank you!. closing in favor of https://github.com/actionhero/actionhero/pull/1250. No, I didn't type all this standard --fix did it for me!. Thanks!. Closing issue as it doesn\u2019t follow the issue guidelines. \nWhat versions of actionhero? Which operating system?\nWhat\u2019s \u201cpacket\u201d and what is \u201cpkg\u201d? \nPerhaps asking for help on slack.actionherojs.com would be a better place to start?. Thank you! \nWould you please contribute this change in a pull request?  If you need help, you can reach the ActionHero community at https://slack.actionherojs.com. solved via https://github.com/actionhero/actionhero/commit/d1960eec19f6a2129e94a8c93fca281c53337651. Thank you for reporting this!\nsolved via https://github.com/actionhero/actionhero/commit/aa62c1f0e37b6405461ce98f3ac60d8ff4658c72. This pull request contains old cold that has since been removed from the project.  Please create a new pull request with these changes and re-submit. oh, sorry... you are actually merging work from v19 to v18 that is a documentation change... but not the part you wanted . Your code does not run, you are missing a \")\".  Please test your code before submitting. closed via https://github.com/actionhero/actionhero/commit/d1960eec19f6a2129e94a8c93fca281c53337651. This looks like a good fix! Can you please provide a test that proves the behavior (and so it won't break in this way again?)\nThanks! . Checking in again! I've updated your branch with the latest changes from master. The file server, either for the web or websocket server-type, is not expected to be able to be disabled.   If you would like to add that feature, please send in a pull request!. You can remove all the files from the public directory in order to serve no files. Good catch! I guess we should disable it then.  \nWhat's interesting is that we'll have to handle some cases from the default configuration where you might disable the file server and still have the default rootEndpointType='file'. Here's a proposal: https://github.com/actionhero/actionhero/pull/1270\n. Thank you for pointing this out!   Solved via https://github.com/actionhero/actionhero/pull/1268. Great! This was talked about in the actionhero slack channel on 12/10/18.  There are some behaviors that the \"soft\" reloading of actions and tasks doesn't do as expected (like updating routes, plugins, etc).  To create the expected user behavior, a full api.commands.restart() could be used.\nPerhaps the places that need to be changed at the specific callbacks for watchFileAndAct in actions and tasks:\n https://github.com/actionhero/actionhero/blob/master/initializers/actions.js#L99-L103\n https://github.com/actionhero/actionhero/blob/master/initializers/tasks.js#L91-L93. Can you share your error trace with us?  Can you confirm that you have nothing running which relies on Redis existing?. The proper way to disable the reliance no redis is enabled = false, as you have found.\nI don't know what a code page is, but good luck!  You can join us on slack.actionherojs.com to ask the community for help.. Ah-resque-ui is a very \u201cheavy\u201d project. It might be the solution. The goal is to have something that is part of (comes with) actionhero. . Can you share more about the use case in your configs in which the difference between undefined and null are useful?  I'm facinated!\nEither way, the requested change here seems ok! Do you need help creating the pull request and tests for this?. sorry! I misread your bug... yes, I agree that full empty objects should be \"passthroughs\" on configs.  Do you need help creating the pull request and tests for this?. After conversations, this is not a bug.  \nIn your example, you are explicitly setting Key = {}, which is a replacement for the original value.  Both undefined and null are properly treated as passthroughs.  An empty hash is not the same as null  . Thank you so much for this thoughtful and complete writeup!  For me personally, I finally got it with the mathematical proof at the end. \nI agree that with configuration, and the name of the method including \"merge\", the mathematical model you describe at the end is the proper behavior set.  I think it also might be important to handle the null and undefined cases as well:\n{} + {} = {}\n{ A, B } = { A, B }\n{} + { A, B } = { A, B }\n{ A, B } + {} = { A, B }\n{ A, B } + { C, D } = { A, B, C, D}\n{ A, B } + { C, D } + {} = { A, B, C, D}\n{ A, B } + { C, D } + undefined = { A, B, C, D}\n{ A, B } + { C, D } + null = null\nI believe there is also a use-case when you want to \"erase\" all previous data in the set(s), and passing null is probably the way to do it?  Maybe?'\nIf you can adjust your PR to match this modeling, I'll merge it!. The test suite is failing with your changes.  I've added an additional test that explains why in 940c2bc9210b599fe648409db30ce2897f3723c5\nBasically, this is used for setting up chat rooms, so all the chat-related tests are failing. . Closing, as #1283 was determined not to be a bug.. This is not an issue that matches the issue template. Please ask your question on slack. . Looks like a great start!\nHere are some suggestions for next steps:\n1. rebase from master so it would be possible to merge it in\n2. add a test showing off an async connection create.  Add an await api.utils.sleep(1) for a simple way to sleep.  This is probably the most important missing step\n3. update the docs to show that you need to call the new async method\n4. complete your TODOs for the docs\nThis is a breaking change!. Perhaps to address @crrobinson14's concerns, this only belongs in the production block?. Please update your code so it passes the linter -> https://circleci.com/gh/actionhero/actionhero/2385. Thanks for pointing this out!   Are you able to update the documentation via a pull request?. Solved by https://github.com/actionhero/actionhero/pull/1290. Thanks for the update!  I'll check on CircleCI.  Sometimes the test times out, or takes a bit too long to start.. You cannot pass arguments to actionhero though npm that way.\n either talk to actionhero directly ./node_modules/.bin/actionhero start cluster --workers 10\n pass the argument around npm npm run actionhero start cluster -- --workers 1\nNew actionhero projects no longer include cluster as a script for this reason. Thanks! . lol, vim\n. Eh, it's in there now!  No worries.\n(I don't know how to accept just certain parts/files of a pull request)\n. Well, it was far easier just to merge, and then use the github site to delete that line :D\nhttps://github.com/evantahler/actionHero/commit/d0189e16761d80e7a1e6db4e63711f5ff43a6667\nOn Jan 27, 2012, at 7:42 AM, dlchet wrote:\n\n\n\\ No newline at end of file\n+npm-debug.log\n+_*.vim\n\ni'm not sure if there is a cleverer way but you can always add my\nbranch as a remote to merge by hand, and you can always revert\nspecific commits. but it seems like i should have \"closed\" the pull\nrequest and/or restricted it to a special branch.\nOn Fri, Jan 27, 2012 at 10:40 AM, Evan Tahler\nreply@reply.github.com\nwrote:\n\n\n\\ No newline at end of file\n+npm-debug.log\n+_*.vim\n\nEh, it's in there now!  No worries.\n(I don't know how to accept just certain parts/files of a pull request)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/evantahler/actionHero/pull/2/files#r392220\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/evantahler/actionHero/pull/2/files#r392236\n. method name needs to be changed here to reflect spelling changes\n. else case lost here for all non HEAD requests\n. rather, logic switched around ( String(message)) should be the default case\n. Yeah, it's fine to have a default of var stringResponse = String(message) to keep the definition out of the if\n. I don't think we really need to worry about this.  The real logger is one of the first initializers loaded, and everything before that is very safe (AKA only we could possibly break it).  actionhero seems to be OK now with things happening prior to the logger loading in.\n. Ha! I really wanted to say to \"move this to an initializer\", but I guess that just wouldn't work out :D\nPerhaps move it to a new file at the top-level of the project, and require() it in?\n. nit-pick, but try to keep consistent with the camelCase methods/variable names.  Coming from ruby, I always mess this up too\n. It looks like this method is never called anywhere?  Do we need it?\n. If we do, most of this is a repeat from below... it probably can be consolidated. \n. ha! this convention always cracked me up.  I've been using var self = this, no big deal to leave it.\n. I understand the desire for a global validator method, but it looks like only tasks can make use of this (everyone else either skips it or writes their own).  Can this be removed?\n. This kind of check can probably be removed and is covered in common_loader.prototype.loadFile.  The require will fail if the file doesn't exist\n. This should be an and not an or.  actionhero should load all his internal initializers first, and then load any new ones defined in the project. \n. You can make it throw an exception about needing to be defined, like the generic server does https://github.com/evantahler/actionhero/blob/master/initializers/genericServer.js#L139\n. Please make this more more generic, just explaining how the option will have the server create a pidfile or not\n. Bump?\n. As you have added the default to config/api.js, I don't think you need to be extra safe here with the this additional check.\n. If possible, don't (re)define a function each and every action (will waste RAM and add even more to GC).  Make this a global helper in the api.actionProcessor namespace.  You can probably share a helper with both pre and post-processing\n. I would have assumed, since priority is an integer, the processors would be run in numerical order, rather than just \"all the low ones\" then \"all the high ones\".  I don't think you are sorting anywhere. \n. Good tests! \n. Yep! I'll enable that once I get the code working :D\n. https://github.com/evantahler/actionhero/commit/d704950ab306a0e157f2c58ce4042cef02292679\n. Note how in grunt/startActionhero.js the method actionheroRoot() does some tricky machinations to attempt to determine where the actionhero package is relative to this file.  You can't always assume a 'normal' node_modules install... it might be a global install or we might be within the actionhero project itself.\n. Check out path.sep... windows folks might need this (I'm not sure if grunt will handle this for you)\n. Here I would try to append actions2 to api.config.general.paths.action rather than replace it.  This seems to be the more likely scenario\n. It would be useful to test that both /actions and /actions2 can be loaded in at the same time (test both actions with specHelper)\n. best to ensure that this starts as nullbefore the task runs\n. be sure to clear this ENV variable in the after() block of your test suite as well, just in case there's a test failure booting the server\n. with such a sparse config file, it looks like you are also testing your previous PR, https://github.com/evantahler/actionhero/pull/453 (which is a good idea!).  I would add some tests generally checking for some of the default values, like api.config.servers.web.port, etc. \n. shouldn't this test fail if api.config.general.paths.action is only actions2?\n. I think it should be possible to change the path collection outright if you want, specifically for public. I can also imaging scenarios with nested apps (think git submodules) which might want to reference the actions of a parent or child. \n. Please change this to main repo.\n. probably safer to grab the image from github: https://raw.githubusercontent.com/evantahler/actionhero/master/public/logo/actionhero.png\n. Get this from package.json\n. Get this from package.json\n. Please add one more test ensuring that the default behavior is maintained, meaning that if using the defaults you set in  the config, and I pass {testParam: ''}, I should get an error about a missing param\n. Today I learned that Array.prototype.some is a thing!\n. be sure to remove this\n. Please stick with the tab = 2 spaces convention of the project\n. Thanks! \n. There's probably something to do here.  We generally know that in this case xmlhttp.responseText will be an error, so to present a homogenous response object, you probably want to return callback({error: xmlhttp.responseText})\n. Please don't check in an action that won't actually run.  The middleware referenced here aren't present in the project. \n. There is a response signature here, and it is (error, data).  Data doesn't do much (just gets logged), but if you return an error, the job will be marked as failed\n. I haven't heard complaints, but I'll remove it now so it goes away in v11\n. Oh, I'm just noting that in documentation it's probably valuable to show all possible arguments, even if they are optional.\n. Don't commit this \n. and don't commit these.  we should start default projects with no workers\n. I don't think that I like having a log option outside of the logging config file.\n\nPerhaps the answer is a hash with each event => log level?\njs\n{start: \"debug\", poll: \"trace\"}\n. Fancy.\n. What's the point of adding this before block now?\n. please don't check this in. \n. why are you hard-coding the daemon options?  This should be an option :D\n. The way it works is that if you indend to boot actionhero (cluser or otherwise) it means that we need to spawn a child process that isn't bound to your current shell.  So to do this, the first process (the one you invoke directly) has the dameon flag passed too it.  It then forks, and and the new process has the isDameon flag in its args.   The main process can then quit once it knows that a child has been booted with the isDameon ags. \n. the slice(6) implies that --node is the first argument, which might not be the case.  For example in ubuntu, the nodejs executable might be used.   Also, any symlinks (perhaps iojs) might break it.\n. This is weird to me.  If --daemon is not present in workArgs, then the index will be a negative number, lets say -5.  So if you assign a value to a negative position in some js environments, strange things happen:\n```\n\na = []\n[]\na[-5] = '--isDaemon'\n'--isDaemon'\na\n[ '-5': '--isDaemon' ]\na.length\n0\na[-5]\n'--isDaemon'\n``\n. This file should replace the existingdocumentationaction\n. The JSON can still be sent to non-HTTP clients\n.documentation` is always enabled, so remove this option.  Disabling it is simply removing the action\n. not needed, the action's name covers this (or folks can add a route)\n. not needed, the action just \"exists\"\n. what does this hash-key mean?\n. This needs to be a devDependancy.  This is not required to run actionhero.\n\nThis is one of the main reasons to move the generation of the static HTML to a grunt task\n. The web server should not be modified at all for this PR.  Slowing down every web requests with more conditionals/logic for documentation is unacceptable. \n. The file is here! https://github.com/evantahler/actionhero/blob/master/public/simple.html\n. This file shouldn't change.  \nI do expect this test to change drastically https://github.com/evantahler/actionhero/blob/master/test/actions/showDocumentation.js\n. Lines 9-12 are OK, I'm asking about the key actionToSwagger\n. This test changes the routes, that's the point: https://github.com/evantahler/actionhero/blob/master/test/servers/web.js#L605-L608\n. The large collection of deps is exactly why I don't want to require/include them in the project!   Making everyone who uses actionhero use swagger if they don't want to is a deal-breaker.  Making the documentation API \"speak\" swagger is OK (because the JSON format we picked is arbitrary), but the UI is huge, and this is an API sever.\nIf you can add the UI without requiring this package, that's great.  Otherwise, you should make a new plugin ah-swagger-ui or something like that that folks can opt-into.  Even without a UI people can just visit http://petstore.swagger.io/ and point it at localhost and use the UI eternally. \n. host not hose\n. this method doesn't seem to be used anywhere?\n. Please rebase this file.  I assume you didn't mean to change it.\n. same here\n. This should be failure?\n. I think you need options for all possible emitters: poll, reEnqueue, etc.\n. Why does the scheduler have a separate pattern?  It should match the worker and have a hash. \n. I would! it's more about having different patters for some emitters and not others.\n. I think this is the only one :D\n. Yep, that should be projectRoot\n. merge issue\n. js\nvar path = require('path');\nrequire('os').tmpdir()  + path.sep + 'locale'\n. This would just be /tmp right now on *nix/OSX\n. And that's why the tests are failing. \n. :+1: \n. :+1: to that.  decodeURIComponent will convert %20 to space... and isn't that all we need?\n``` js\n\ndecodeURIComponent('word%20other%20word')\n'word other word'\n``\n. You've got to update your PR :D\n. I thought constructors were always supposed to be capitalized? \n. I assume we initially did this kind of thing for legibility, but I'm OK with the change. \n. Thanks! I personally don't like this format\n. What does requiring this do?  It's never loaded in the project anywhere... \n. Asked some people, they hate whitespace... remove it!\n. Can you confirm that node v4 is comfortable with theletsyntax?  I thought that came with node v5...\n. might want to add a reminder here that logs and pids (among other things) follow the name.\n. I think this should just bedelimiter, as there is no default... it's just the value.\n. to make this faster for folks who don't need it, don't get thebyteLength(line);until after you've already checked thatapi.config.servers.socket.maxSocketDataLength.  \n. I don't think this is the correct behavior.  Shouldn't the client get an error message?\n. No need for this if youString(api.config.servers.socket.defaultDelimiter)as noted below\n.var d = String(api.config.servers.socket.defaultDelimiter);` for type saftey\n. The \"2\" here is the length of d\n. I think this will be a lot faster:\n\nreturn Buffer.byteLength(string, 'utf8')\n. I wouldn't worry about this per the comments above\n. What is the response here?  Should the error message for this case be set in config/errors.js?\n. probably > 0\n. Wouldn't a more valid test be /my/secret/route/../../../config/servers/web.js?  That file really doesn't exist\n. What was the benefit of creating a new object on the connection rather than setting connection.params.file?\n. If you do that, many of the other modifications aren't needed\n. This would however require the file served to reside within /public\n. I don't understand how that would change the public folder logic?  I want to enforce that we can only serve files from the public folder, so the job of dir within the routes is simply to help build the proper file path\n. How would application developers override this method now?  The docs say to override this method... what is the changed behavior?  http://www.actionherojs.com/docs/#determining-connection-locales\n. Oh! I didn't catch that you were making a 'copy' of i18n = require('i18n');.  Yeah, use Object.assign.\n. I would call this something like resque_overrides or similar, to help indicate the function\n. > ... If your plugin was installed via NPM, also be sure to remove it from your package.json\n. > ... If your plugin was installed via NPM, also be sure to remove it from your package.json\n. Add:\njs\nbinary.log('remember that config files will need to be deleted manually');\nbinary.log('If your plugin was installed via NPM, also be sure to remove it from your package.json');\n. never!\n. Not sure what this file does?\n. Why do you need a whole package (fresh) here?  Aren't you just comparing the requests' if-none-match header to the new etag?\n. If you do have a header match, I think you are just supposed to respond with 304; and not send the body payload.  I think you still will here\n. test should ensure that there is no body returned\n. I did that at first (and started storing samples), but the more I thought about it, the more I realized that what you consider \"important\" for health varies drastically between applications.  To that end, I didn't want to add any initializers for this, but to showcase some of the things you might check, and how to do it.\nThat'' also why I'm using ENV here and not configuration varialbes.  I expect this file to be drastically changed in a production project.\n. this needs to work in new projects which won't have async installed by default.\n. I disagree.  For example, the event-loop check seems like a safe check for a node that is only serving HTTP traffic.  However, if you have a node which is only doing tasks, it's totally fine to block the event loop... and if you are doing something like image processing, that's expected behavior.\n. yep! https://github.com/evantahler/actionhero/pull/895/commits/def9c9d97f1a48fd9a8e2b1decfd9ac06a64e3c9\n. Yeah... That's their own fault then! \n. This is a a great example for the docs, but probably doesn't belong checked in :D\n. Please add a note to that config file that api.config.general.defaultMiddlewarePriority now effects both tasks and actions.\n. Now that both actions and tasks are using this sort, it should probably be moved in to utils.\n. I think without a connection, it will try to connect to redis in all cases.  Best to pass in redis object (api.redis.clients.tasks) like we do in initializers/resque does\n. This might be the source of your travis trouble\n. Just a shorthand note: what you have written is the same as worker.performInline(taskName, params, next)\n. You are only using 2/4 of the possible node-resque hooks.  After this is merged in, please add a github issue to also allow for this middleware to modify api.tasks.enqueue with the before_enqueue and after_enqueue hooks as well\n. Completeness?  Doing so is certainly not part of this PR\n. I'm confused about why test needs to be hacked into params?  You aren't using an action at all in your work, so why does this mater?  Also, there are better ways of getting this in if you need it than polluting an  unrelated action's definition. \n. Oh! You are trying to use the 'run action' task.  I think that's an overly complicated task to use... just define a new simple one in-line as part of your test.  See https://github.com/evantahler/actionhero/blob/master/test/core/tasks.js#L18-L78\n. Don't set defaults within the app, but use the .default() directive within optimist (see line 38 as an example)\n. this description is quite long.  Shorten it here and add more detail in the help text and documentation site.\n. looks like you need to add a use strict to the top of this file so ES6 declarations work in node v4\n. This should no longer be called ignoredInitializers, perhaps duplicatedInitializers?. Why have this new array at all?  why not just fail here directly with a throw?. Good point.  I'll put these in comments to ensure that it passes. Can you be more explicit in this test?  Do you expect the error to be:\n- schemaParam.requiredParam  is a required parameter for this action\n- schemaParam[requiredParam]  is a required parameter for this action\n- requiredParam  is a required parameter for this action\netc?. Awesome.  Please update the test to check for exactly that string.. Ah, because this is a string we actually want localized, as this message would be viewed by someone \"outside\" of the server (someone looking at a webpage which hits this API).  You might want to say this sentence in Spanish, so your /locale/es.json would have Uso de m\u00e1s de {{maxMemoryAlloted}} MB de RAM / HEAP. Or, more realistically the within the action would be changed to data.connection.localize('actions.status.problems.maxMemoryAlloted') and then each of the locale files would have something like \njson\n{\n  \"actions\": {\n    \"status\": {\n      \"maxMemoryAlloted\": \"Uso de m\u00e1s de {{maxMemoryAlloted}} MB de RAM / HEAP\"\n    }\n  }\n}. I don't think I follow.  i18n is a spec (used by ruby, python, node, etc).  Here's the node library we use https://github.com/mashpie/i18n-node#mustache-support.  Mustache is the generally agreed upon templating library across all implementations.  In general, this style allows you to re-use locale files across many instances of your project, perhaps in your ios app and your server. Really, it is just convince here.  This cluster-master process is only doing one 'thread' of work at a time (no parallel requests, blocking one operation until another completes, etc).    \nFeel free to send in a PR to change it!. I think this section only makes sense in the case where the param in question is an object.  I think you can move this under the if (api.utils.isPlainObject(params[i])) { check.  \nI'm sensitive to not introducing a second loop for every log line. shouldn't this be connection.rawConnection.res.setHeader.bind(res). Why would you set the connection to undefined if you are going to delete it on the next line?. Great find!. Please don't add a new action just for testing.  You can create the action within the test suite like here:  https://github.com/actionhero/actionhero/blob/master/test/servers/web.js#L416-L445. normally, we would need to wait until connection.rawConnection.req.on('end'), but formidable does the same thing, we can wait within it's callback. @gcoonrod here's my justification for using the formal class declaration format.  No more need for util.inherits. The function invocation should probably be run in the same context as the task's definition, so therefore: task.frequency.call(this, api). same comment as above, task.frequency.call(this, api). Since you are doing this check (function vs number) so often, you can probably make a helper method in this file to do it. As a general rule, other methods on the api object which are referenced by task or action definitions (like middleware names) are defined as strings, rather than the method itself.  \nThis is important as the method might not actually be defined yet when the task is loaded into RAM.  To evaluate \"api.determineTaskFrequency\" from the string name, see how we do it here: https://github.com/actionhero/actionhero/blob/master/initializers/redis.js#L77-L89. So to me, _ makes me think of the underscore library.  Since you have to assign it to something, why not just leave it as api... because that is the name of the object after all.... This is what I'm doing on the CLI branch: https://github.com/actionhero/actionhero/blob/af22fcbb95fe469b4174b398f260d1f10e17859c/bin/methods/generate/action.js#L19. I really don't like this this.  \nHowever, I'm not sure how to get the API object in scope for the rest of the classes' methods.  For example, the websocket server needs to refrence api.servers.servers.web to bind to it.  The web server wants to read the api.config.general.serverName, etc.... This, on the other hand, seems fine.. @crrobinson14 @gcoonrod  it looks like we also have the opportunity to keep our existing 'docs' pages as 'tutorials' within the docs site... which seems to make some sense. Agree! I'll go with const {Action, api} = require('./../index.js'). a little lower down we also do const actionHeroProcess = new ActionHero.Process(). \ud83e\udd10 . connection was wrong, it's an acton so data is what you get.  I could have done {response} I guess, but I was just correcting a naming error.. The 5 top-level properties of the api object are:\napi.running (bool)\n    api.initialized (bool)\n    api.shuttingDown (bool)\n    api.projectRoot (string)\n    api.bootTime (Date)\nI really do think that these belong at the top of the stack (rather than under api.status or something, as they do describe the API itself.. I tried a few methods of this, but since the package.json#main of actionhero is this index file, it has to be the one exporting... something.   If I have the Process return the API, that means I need to instantiate it within index, and I don't want to do that either. . If you can come up with a better pattern, by all means please submit it! I'm happy enough with how it works now, as only the private classes are strange.  No user-facing files have the require problem.. whoops!. I agree the bulk of this page (methods) doesn't need to be here, but I think the intro and client-use parts are still important.. We should probably move these to a virtual websocket_client.jsdoc file, and consider it a class. The only place these methods show up shouldn't be a tutorial :/. I took care of it! https://github.com/actionhero/actionhero/commit/2fc428b99b7277501021a18dd2132c7952c0f7dc\nhttps://docs.actionherojs.com/ActionHero.ActionHeroClient.html. Cool.  I'll do that for both generated package.json's. There's a whole other conversation we need to have about this... to Slack with it!. good question! You can't override initializers in core (it throws an error), and there are no actions or tasks which core exports (just a few it dumps into a new project on generate).  So... there really was no thought at all given to overriding things.  Should we throw an error?  Should we allow overriding?. Possible, but either you need to shell out (and that's a pain on nix/osx vs windows), or we need to bring in another package to help... I'd rather just skip it. . There's somewhere that returning undefined for the error rather than null... I couldn't find it, but I'll look a little deeper.... closed by https://github.com/actionhero/actionhero/pull/1127. Can you share why you are adding another argument to the validator method signature?  I don't think this belongs in this Pull Request.  Can you please remove it and we'll talk about it separately in a new one?. Great find! Can you please add a test that confirms that aync chat middleware will both fire?  Let me know if you need guidance on creating the test.. I don't think I understand what this does.  You also haven't included a test for it.. \ud83d\udc4d for non-breaking changes!\n. /status/ is an internal actionProcessor thing normally. Yeah... the weird thing here is that the \"entrypoint\" here is this exported function, so this method is the first thing that is called, then* you need to boot actionhero :/. very! good call.. It doesn't, but that's how it has been for over a year.  A change now would be a breaking change, unrelated to this PR.  \nIt's a signal to api.utils.hashMerge & api.utils. isPlainObject to not attempt to expand a function and hydrate it. You are removing an existing test here.  This older behavior should still be tested, and you should add a test for your new behavior. Oh! Got it!. please remove this. I don't think so.  where is that code?  I don't see it referenced here.. please remove these comments. please remove this comment. Great question... I can't quite tell either.  We'll look into it here: https://github.com/actionhero/actionhero/issues/1199. Yep! https://facebook.github.io/jest/docs/en/expect.html#toequalvalue. That's JEST convention... I figure we should use the tool's defaults.. It's simpler to read.  Since this is s boot method, there's no real gain with the /await/.  . I KNOW!. Good call! I'll make that a util.. good catch! added some checks. Please don't check in routes file contents. Winston will do this (and exit if it can't) for us. I like wrapping the path check into a method!. Great idea!. \ud83d\udc4d . Interesting... are arrays not assumed to be sorted?. eh, either way, comment added in fe52475dfa04653f5cfcfacf69549f48c875bef7 !. This will double publish the paylod, no?. Should you then remove this publish, or have an if around it?. Ah! I missed the return!. What would be the case when you don't want syncSetup?. Today I learned that Object.assign properly handles nulls! . ",
    "OwlyCode": "Actually I'm querying on the same domain, a call from 127.0.0.1:80 to 127.0.0.1:8000. In production that will be the same domains but with different ports as apache will serve flat html + jquery, and node.js will provide the API via actionHero.\nSending the Access-Control-Allow-Origin header solved the problem, on Chrome. At the moment I did not test other browsers. \n. ",
    "sjml": "GLAD I COULD HELP\nOn Thu, Apr 12, 2012 at 6:01 PM, Evan Tahler <\nreply@reply.github.com\n\nwrote:\nLol, thanks!\nSometimes I'm not the best speller.  And by sometimes, I mean all the\ntime.  I'm also going to merge this into the licence's core repo [[\nhttps://github.com/evantahler/Dont-be-a-Jerk ]]\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/evantahler/actionHero/pull/5#issuecomment-5101720\n. \n",
    "blakmatrix": "For backwards compatibility please use something like fs.existsSync || (fs.existsSync = path.existsSync);, fs.exists || (fs.exists = path.exists);, and tty.setRawMode || (tty.setRawMode = process.stdin.setRawMode); respectively.\n. ",
    "hampsterx": "oops didnt realise it has this built in. very nice... please close.. i think.\n. Awesome :)\n. ooh i see what you are doing now..\nvar line = api.socketServer.socketDataString.slice(0, index);\n...\nconnection.params[\"action\"] = words[0];\nThis is fine for actions without params but that isn't particularly useful for other cases\nI kind of just want to pass json data to my action to use as the key/values.\nAny ideas?\n. yep framing is the question.\nNot sure how it fits in with web requests but my preference for sockets would be to parse an unsigned int first (4 bytes?) which is the size of the incoming data frame/content, then eat that data, check the next character which should be some sort of terminator and then thats your message defined. The content could be json and include action key for example.. would be nice because then we could implement binary efficient messaging if required.\n. awesome dude. yep sorry I only mentioned the binary option as that is our use case (we have a mobile tracking app that we want to minimize data cost on), I was going to suggest json RPC spec this morning, actually I think your syntax above is the same :)\nWell done sir~\n. wow, good support :)\ntask loaded: runTracks, .../tasks/runTracks.js\nvar task = {};\n/////////////////////////////////////////////////////////////////////\n// metadata\ntask.name = \"runTracks\";\ntask.description = \"Process Incomming Track Events\";\ntask.scope = \"any\";\ntask.frequency = 5000;\n/////////////////////////////////////////////////////////////////////\n// functional\ntask.run = function(api, params, next){\n```\napi.log('runTracks..');\nnext(true, connection);\n```\n};\n/////////////////////////////////////////////////////////////////////\n// exports\nexports.task = task;\n\nstill doesn't seem to do anything tho :(\ni'll have a poke in redis perhaps..\n. oh yep well it wasnt crashing so hence it wasnt running either :(\nAlso interestingly when I edit the file it crashes, I presume that was due to your recent action reload code. hehe\n. oops didnt say that fixed it sir! Code is as above and still no worky :(\nnothing in console and nothing in log either..\nhmm i'll have a poke in the code another day, brain sore..\nthnx for your help :)\n. ok i am a dumbass..\nmy initFunction was missing next() \nThanks for your patience :)\n. hmm interesting, and what would you suggest in the meantime? defensive programming and a daemon/watchdog to restart the server when it falls over?\n. ok i hear ya but this does not particularly help with documenting the api which is my main issue at present. The api document for web clients needs to be more detailed about the type of verbs and the required/optional params. \nI can hack something in but would rather not maintain a hack :(\n. If I take your advise then I would end up with four different actions and all of them supporting a single verb only. You can't sell that to other developers as its butt ugly..\neg\n/api/userView\n/api/userAdd\n/api/userEdit\n/api/userDelete\n. yep that would definitely help, have no problem separating the action by verb as long as the framework could map to find the correct action file. That would avoid the need for code like \nif (connection.method == \"GET\") {\n  // list view\n} ...\nWhich is kinda ugly..\naction = all verbs (no routing, default)\naction_get \n...\nWould be my preference for file naming but hey it's your framework :)\nHonestly you can't really avoid REST for web developers otherwise you are going to alienate a large portion of potential developers. I'm not in favour of automatic RESTful routing beyond verbs such as resource mapping in Rails for example but basic routing of params and verbs is pretty important to building a clean/standard web API these days.\nTiM\n. aha yep, so its just tasks and caching I need to worry about.  It's quite nice using redis though, could'nt you just namespace the keys (eg prefix clusterName) in the redis so a single redis server could have multiple independent instances?\n. thing is actually, I am already using redis for my application (and prepending keys with a api.serverTarget variable set from config params to ensure data is independent for each instance) so I can't just disable redis as then the redis client won't get initialized, oops \n. No I need to use redis specific functionality (eg lists, etc). How come you could'nt just namespace your actionHero keys by prefixing a clustername on the front??\n. ok I am pretty new to github/patching but mike have a crack next week :)\nActually I dont use the message/chat/room stuff (many projects won't I suspect), I kinda wonder if it should'nt be more generic actually but maybe that is the subject of another ticket hehe.\n. > If you are using redis, you probably also want to use separate DB's (just change the DB value in the redis config).\nI overlooked this feature. This solves everything. But if you have namespaced it already, all good :)\n. fantastic!~\n. I have yet to fully investigate websockets and pub/sub for our application, I know I need it at some point but not yet. Yes you are correct in that I don't fully appreciate (or perhaps, care) that actionHero is designed to support multiple protocols. I can see some benefit in this but not at the expense of other features (eg RESTful routing etc) although I am sure you can solve this one no problem.\nMaybe making the chat stuff a bit more modular would appease things considerably, and also perhaps more documentation/support on writing your own (server) extensions to plug in to actionHero would be good. That way the chat would simply be seen as an optional module, an example one if that, whilst the core of actionHero would enable developers to easily extend to develop their own sockets and other custom stuff they may need for a full fledged api.\nAnother example is outputing in other formats, currently it's JSON except for the file server stuff which actually is tied into the initWebServer.js\nAnyhoo, not complaining dude, I love the framework, just we are using it for a reasonably important project so I need to get my head around long term strategy of making it fit our needs.\nKeep up the good work~~\n. ",
    "jackbit": "How to add custom exception handler? I saw this wiki:\njavascript\n// Exceptions \n  // https://github.com/evantahler/actionhero/blob/master/initializers/exceptions.js\n  exceptionHandlers: { \n    reporters: [], // list of exception handlers to call upon errors\n    report: [Function],\n    renderConnection: [Function],\n    loader: [Function],\n    action: [Function],\n    task: [Function] \n  },\nbut how i can add reporters in config or initializer? because i want to send email once error is occured.  thank you\n. Let me try your approach, I will be back\n. I can not connect now by using sock file with this nginx error:\n2014/12/24 16:41:56 [error] 23543#0: *4 connect() to \nunix:/home/user/project/current/tmp/sockets/actionhero.sock failed (111: Connection refused) while\n connecting to upstream, client: xxx.xxx.xxx.xxx, server: localhost, request: \"GET /api/check HTTP/1.1\",\n upstream: \"http://unix:/home/user/project/current/tmp/sockets/actionhero.sock:/api/check\"\n. How can you get Server Name, API Version and Actions list information? mine haven't them, the info are not displayed.\n. ",
    "pluspingya": "Thank you for your quick response, \nI would like to encrypt chunk of data transmission.\nServer should be avoided from fault-data attacks.\nI want to make sure that data transmission will not be modified before reach destination,\nand server should ignore any data that not come from its clients.\n. Thank you very much.\n. Hi Benjaminchelli,\nYes I do http://{someip}:8080/api/actionsView\nAnyways, if you say you prove that: my php code works just fine on your server.\nSo I'll look at my server configuration.\nHi Evantahler, \nMy server is on AMZ ec2 croud, Ubuntu 12.04 LTS (GNU/Linux 3.2.0-25-virtual x86_64)\nI did try \ncurl \"http://{someip}:8080/api/\" -d \"action=actionsView\"\nit works fine\nand I also tried \n$ curl {someip}:8080/actionsView -v | python -mjson.tool\nbut\n\nsh: python: command not found\n* timeout on name lookup is not supported\n* About to connect() to {someip} port 8080 (#0)\n*   Trying {someip}...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0* connected\n* Connected to {someip} ({someip}) port 8080 (#0)\n> GET /actionsView HTTP/1.1\n> User-Agent: curl/7.26.0\n> Host: {someip}:8080\n> Accept: */*\n>\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0* Empty reply from server\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n* Connection #0 to host {someip} left intact\ncurl: (52) Empty reply from server\n* Closing connection #0\n\n. Yes, sure\n. ",
    "pauldub": "That would be awesome, I might give it a try :)\n. ",
    "klh": "+1\n. ",
    "tigerclawn82": "+1\nThis would be a nice feature.\n. Thanks for your quick response. api.commands.stop() is what i was looking for.\n. It worked, cloud9 provide URL for application. So, closing this ticket.\n. ",
    "delemach": "I've played with blueprint and apiary, and it's pretty neat that the spec is basically just markdown. However I don't think it's a good fit here since if we're talking about auto-generated there's no reason NOT to generate a JSON spec. I read about a few other players, and I think swagger is probably still the way to go.\n. I don't want actionhero to be a rendering engine; I like that it's not. As you wrote in the tutorial - \"actionhero is also a great choice to power your front-end applications (angular.js, ember, etc),\" and that's exactly what I'm doing. The problem though with angular, ember etc is that search indexing bots can't crawl them properly. \nTake a look at this article which describes the issue and a solution using prerender. That's all I'm trying to do. That's explicitly NOT using actionhero for rendering/templating - it's passing that job off to prerender in the case when a bot is indexing.\n. I think another to do it would be to add it here by adding a 'crawler' request mode, and allowing some handler to be set for them. Do you have any thoughts about that? I understand if you feel that's taking actionhero beyond it's core purpose.\nI suppose a longer term / more robust solution is to stick nginx or something in front of actionhero and have it handle all the crawler and file requests, and pass along the API calls. I just didn't want to add that level of complexity just yet to our architecture.\nFor now I'll take a look at action serving files approach - thank you very much for the gist!\n. ",
    "chimmelb": "Been evaluating frameworks for an API and happily came across actionhero. On topic to this issue, swagger is indeed a nice API documentation (StrongLoop branded it for their framework as well : ) Custom notes for each route, JSON model definitions and, most importantly, the ability to run commands from the docs. Very nice alternative to curl when doing some API testing (even on a tablet : )\nThings to be aware of when building swagger definitions from source: route definitions, models and authorization. \nRoute Definitions exist for each route, and should define the needed parameters for any route (query, path, body, etc.). So some way to spell that out for each route is needed to use the swagger-ui pages. Perhaps a convention on an action for an array of params (type, description, required . . .)? \nModels are the key one, as each JSON object used in the API must be defined as Swagger Model (which is almost JSON v4 compliant). So that list of models has to exist somewhere to be used in one half of the swagger spec (then the routing info references the model names in the other half). I didn't see a common place for models in actionhero (though in my last project it was rare for different routes to share models . . . all /user/* calls used the User model, but the /reports/user call had the UserReport model : )\nAuthentication is important because the swagger docs show the entire API, and it's usable! Just something to be aware of - any action defined in actionhero will now be very public (unless it defined its own auth middleware - love the actionhero tutorial, by the way). We hijacked swagger-node-restify for my last project to display routes in swagger based on user role. Only our token routes were initially shown, and when that api_key was successfully entered, the role defined in the token would make certain other routes visible. It's nice to have an API documented, unless the entire world shouldn't see or use it!\nGreat feature to have for an API framework, hopefully you get it going. (Hopefully I can give actionhero a whirl on my next one, and maybe contribute a bit as well)\n. I agree, make the action define what it is supposed to do. I'd personally lean toward the harsher treatment, but gather opinions : ) There will be a little double-checking to make sure a route param matches an action param - ever consider defining the routes for an action in the action? Same format as routes.js, just defined for each action that needs a route as well. \nThe fix you committed will resolve this issue. And if AH were harsher with the param enforcement, I would have gotten more errors (or no filled parameters in the first place) and been forced to do it right : ) \n. One thing I've been bitten by is exporting anything in a /actions/ file. Anything exported is considered to follow the action template, even if a function or a variable. \nSo now I know, only actions should be exported in action files : )\n. AH picks up the sub folders (I do the same to group mine). Not sure if this is your issue, but note that anything exported from a file in the /actions directory (or sub directory) is thought to be an action. If it's not an action, you get errors basically saying AH cannot turn that export into an action.\n. Heh, pardon all my extra words in the issue : ) This issue is the test environment hangs server startup for me . . . and if that's repeatable for anyone else it could be worth looking into.\nI ran into this during testing, where the environment gets set at the top of a test file. The server would not boot until I added a logger for the test environment. From a clean install, running NODE_ENV=test npm start failed to start the server, which was confusing to me because I figured it would run (just with some different settings than default)\n. My test wasn't much of anything, but got stuck in my custom initializer. I tried to boil it down into that last half of the original post, but really this is my test case:\n1. actionhero generate\n2. npm install\n3. NODE_ENV=test npm start\nAnd the server never initializes. I think this is similar to what running mocha would produce if using actionheroPrototype to start a server. \nIf this is reproducible and not expected, I thought you should know : )\n. Sure, that's fair to close it if you can't reproduce it. I'll keep my eye out.\nNode 0.10.31\nOS X 10.9.5\n. This is terrible. I wish I could delete this issue (thankfully it is closed already). \nI misinterpreted \"no logs in the terminal\", and not seeing any api.log output during my tests as a hung server. Turns out, that's the point, the logger config for test does not print anything for api.log by default. \nI feel bad, what a goof! I really appreciate your time looking into this non-issue (because I have wasted it!)\n. The configuration was a good option. I've been using TCP only for a project, so am always sending JSON and could see the option for null if wanting to clear a DB field. But that's a special case, so up to the user. \nI didn't know about the specHelper to define custom actions, that's a nice touch for testing.\n. Added default test case. (And removed .only from the test, glad that didn't slip in there...)\n. I redid the tests. More verbose, but more complete too.\n. The general idea would be to put your core logic into initializers, and call those initializers from the actions.  This way your core logic can be used from actions or tasks, and mixed any way you need it to be.\nSo your sms initializer might be at api.sms and your login initializer might be api.auth, and in an action you would chain the two like:\napi.sms.send( arg1, arg2, function(err, data){\n  if( err ){\n    //finish the action\n    return next(err);\n  }\n  api.auth.login( data.whatever, function( err, reply ){\n      if( err ){\n      //finish the action\n      return next(err);\n    }\n    //finish action callback\n    api.response.success = reply;\n    next();  \n  }\n}\n. I'm using that middleware I posted so this isn't a showstopper, but thought I'd report it. If the schema input wasn't an object, I could see rejecting the entire action (and I'd still need my JSON.parse middleware, but at least you could avoid the server crash). I did notice that inside middleware the schema input was a JSON string, not an URL encoded string. It is getting decoded, just not JSON.parsed.. Not a huge concern, but api.utils.objClone, which is used when creating the filteredParams object, is not a deep clone. So after logging and filtering a property 2+ levels down, later users of that data.params object would find the property filtered as well. Just something I noticed - unsure the need for a \"deep clone\" here or not.\nAlso, I see Node4 didn't like my test, I'll fix that.. Would this be considered ready for release? I'll fix something if that is holding it back.\nA separate point release is not necessary for just this PR, just want to be sure it's ready for the next one.. Yep, I will address these. Stay tuned!. Yep, ready : ). Woot! \nhttps://aws.amazon.com/blogs/compute/node-js-8-10-runtime-now-available-in-aws-lambda/. Thanks for thinking about this. I made an update (indexOf() -> includes()) and added some tests. I think the issue at hand is a bit of bullets 1, 2 and 3.\nMostly this is bullet 2, where I have an outside system that I want to talk to AH. That system sends text as the request body and sets the request's Content-Type to \"text/xml\". If it was my own API this wouldn't be an issue, as JSON works great!\nThat's where it is a bit of bullet 1 and 3. AH doesn't like POSTing data on the Web server that isn't handled with formidable. The check happens here, which makes a new IncomingForm and parses. I see the error on L485 about a bad form when I used my curl requests OR my legacy app. If I'm reading it correctly, AH would never handle a POST that specifies a Content-Type header (that formidable doesn't handle natively).\nI'm open to an override option rather than this config-style approach. Hopefully those tests explain a bit as well. \nI wouldn't expect this to be widely used, but for those rare cases it's at least a hook to handle it, rather than no options like I'm seeing now. (If there's another option, I'm all ears! : ) . I updated this to not require a change in config/servers/web.js, to avoid breaking changes. If the array of custom mime types is not found, or does not contain the request's mime type, process as normal using formidable.\nRegarding the '_toExpand' thing, it would not need single quotes. Underscores are valid JS properties, I guess the quoting thing just isn't caught by standardJS rules?. I'm OK with just storing the rawBody if Formidable errors, though would like to try a change to how saveRawBody is done. Could I make an update to how we saveRawBody to be more like this? (in a new PR?)\nlet rawBody = await new Promise((resolve, reject) => {\n            let fullBody = Buffer.alloc(0)\n            if (!connection.rawConnection || !connection.rawConnection.req) {\n              return resolve(fullBody)\n            }\n            connection.rawConnection.req\n              .on('error', (err) => { reject(err) })\n              .on('aborted', () => { reject(new Error('Request aborted')) })\n              .on('data', (chunk) => { fullBody = Buffer.concat([fullBody, chunk]) })\n              .on('end', () => { resolve(fullBody) })\n          })\nI'll rearrange the promise so it doesn't block/await before formidable. I could not get it to happen in the unit tests, but have had times when formidable errors (like we're planning) but the rawBody was not filled, even though the saveRawBody was set. I don't know if formidable paused/ended the stream or what. I don't think this is the culprit of my manual testing, but it's there:\nhttps://github.com/felixge/node-formidable/blob/master/lib/incoming_form.js#L54\nAnother needed test is when the body is not JSON (like you have) and the Content-Type header is text/plain or something that formidable doesn't know how to handle.  It is kind of a different result, and more the use-case for my legacy system or AWS SNS that are setting the content type. See this one: https://github.com/actionhero/actionhero/pull/1184/files#diff-f5572dd2458d60fadaabbbffe99c04d8R423\n. I'll have to find a test, and I like not having to write custom methods in a config.  \nThere is behavior that I see on local server use that prevents me from processing rawConnection.params.rawBody. The two places that I think need addressed are \n\nhow we capture rawBody (if 'data' event does not come, it is possible for formidable to error (unknown header), and middleware to run on an empty rawBody)\nIf formidable errors, connection.error is set, but should not be if we capture saveRawBody? Does it affect response to client?\n\nMaybe I can make a new PR if I can show a test that helps explain this more. Stay tuned. (And thanks again for taking the time to keep looking at this...). Took a while to get there, thanks for all the discussion. \nI think this PR could be closed to be replaced by #1198. PR comments addressed.\nThanks again for sticking with this one. My \"problems\" in that previous PR (#1184) and even the approach with the \"use configs to custom define handling\" were all addressed here. Formidable would fail and the action processing would continue, sometimes with and sometimes without the data of my legacy system.\nHopefully this is a good change for others too, like those Amazon SNS messages and their text/plain payloads : )\n. Do the tests still pass without changing the middleware to async and applying the change? If so, it would be good to repeat one of those tasks as async to account for the different way of running.\nI ask because action middleware can be async or not (tests, code), and still work correctly. \nI think that is important to know whether this is a breaking change or not, especially when thinking of v19. Still would be worthwhile to add to v19, and add an Upgrade note can indicate if people need to make changes for their global chat middleware.. I like these changes. More tests and less code : )\nThis call to api.chatRoom.runMiddleware just awaits the error, whereas this call could probably remove the instanceof Error check, just for clarity. I would guess the tests work without that check, since that toReturn stuff was removed and Errors are thrown, not returned.  \nI'd say ready go after that, nice work \ud83d\udc4d . heh, I was just adding that this morning\n. The first loop is the params of the action. This second loop is for the config options at api.config.general.filteredParams, because it still catches primitive parameters. I split it out to not check the config list for every param in the action, just once at the end. So once through the action's params and once through the config settings.\nI could change the parameter names so it's easier to read (param params filteredParams isn't easy on the eyes).. It allows the functions to get merged as config settings are compiled. Used in config/errors.js and config/redis.js too (for api.utils.hashMerge). Does setting connection.error do anything? Does not seem to affect anything (I thought it did before), but now I don't even know where it goes..... Sorry, the PR review didn't let me comment outside where there were changes. It's this line: https://github.com/actionhero/actionhero/blob/master/servers/web.js#L487  Nothing needs to be changed, but I just wanted to highlight it if there was dead code (or it wasn't updated with new ways of doing things...). ",
    "jacobfike": "+1 for Swagger.  I have been hip-deep in it creating a java module for our in-house server framework to document itself.  I think it is a pretty good way to document an API.\nI would suggest skipping straight to swagger 2.0 and not worrying about trying to support the 1.2 spec.  Even though 2.0 is very new, it's an evolution of the 1.2 spec that should be much easier to generate programatically.\n. Things like mocha recommend installing globally to get the cli commands, and also installing locally to control the version used by your project.  It should be possible to detect what directory the executable is in vs. the current working directory and then call the locally installed actionhero generator, passing it the arguments given to the global one.\nThat would give you the best of both worlds.  All the convenience of system-wide cli commands, but you don't have to worry about version mismatches.\n. Actually, I am unsure of why this typo has the effect that it does, but when I fixed it, I uncovered a memory leak.  Each time either the client reconnects, it calls the original callback which subscribes to the cluster channel.  So if your client gets disconnected often but not the subscriber, you end up with an ever growing # of subscriptions.\n. Added a fix for the infinite subscriptions.\n. Missing the \"t\" in Defaults here. \n. ",
    "BoLaMN": "Ive got the basics of this done with the swagger 2.0 api without the need to change anything i just need to finish up the linking the inputs and custom routes which shouldn't take long.\nnot sure if its going to be possible todo the custom validators thou as thats kinda out of scope for a normal api solution.\n\nill throw a plugin up once its in a state that its actually helpful.\n. only started playing with it tonight but i think ive cracked the actions\\inputs side of it \n\nill start playing with the route params soon but should be fairly easy as when it maps the actions it generates the parameters and schema definitions so the custom routes should be able to piggy back off the previously mapped definitions \n. Is there any reason we don't allow defining the routes within the actions? Wouldnt it be easier to maintain routes contained to their actions? \n. You'd still leave the rest the same so the other transports can talk directly to the actions id just extend the loader to iterate over the routes object while it's iterating over the actions building the simple routes \n. i guess i can support it my self through an initialiser anyway\neg. https://gist.github.com/BoLaMN/113ef0f29146867bacee\n. got caught up in a new angular project. I'll try get something up mid next week for review.\nAlso not sure if we should include the swagger ui as default or just make the endpoint available instead and leave it up to the user to include, thoughts? \n. alright im pretty much done with the initializer just need to intergrate the swagger ui into actionhero now then ill create PR for review.\n\nHeres a couple more showing it actually posting to the api. \nBody: \n\nQuery Param: \n\n. cheers @hornos this was handy to allow me to convert all of actionherojs over to actionherocoffee ;) id throw it on a fork but due to the apache 2.0 licensing trouble of adding change clauses to all the file headers and the other rigmarole needed for the apache 2.0 license. \n. It does a clear at the start of the writeIncrements function but I can remove that and place a clearTimeout before each setTimeout if you wish. \nThe current commit has fixed the issue thou.\nUp to you.\n. just commit the fix for the api:8080 issue, nearly midnight here so missed it by accident. \n. made some of the required changes and removed the old documentation code ill continue on tomorrow as i need to get some rest. \n. @evantahler been busy porting a backbone app over to angular so i hadnt had time to finish this PR off.\nI cleaned up the initialiser and recreated the index.html and baked stats, chat and docs all together with angular \ni'll cleanup the app.js or i can add the seperate .js files and sass files if you want and add a grunt task or i can remove it all and create a seperate plugin as i wasnt sure how else to include swagger-ui without having to include all 37 dep files from the original swagger-ui\nlet me know, cheers\n. hey guys, sorry ive been flat out on a work project so i haven't had time to continue this PR. my last commit the reason i removed the chat.html and actionhero.css is because i rewrote it all into an angular system that include stats, docs and chat to save including the swagger-ui dependencies \n\n. swaggers json structure needed a host: 'host:port' object and the only thing i could see was the bindIp and port but due to https://github.com/evantahler/actionhero/blob/master/test/core/actionCluster.js i had to check to see if it the config values were avaliable or not. \nis there anywhere else that specifies host:port?\n. but its not /a/b/c/simple.html its /public/simple.html or am i missing something.. it is pretty late :/\n. the deps for swagger-ui are pretty big that's why i sought after the web server serving the files from the node_modules folder instead of throwing them into the public folder which made it a bit more flexible for the end user instead of them having to keep on editing the index.html if they move the folder around.\n. ",
    "PhilWaldmann": ":+1: \n. Well... putting \njavascript\n\"websocket\" : {}\ninto the config solved the problem!\nMy fault!\n. Awesome! Thanks\n. :+1: \n. I don't want to allow it for every domain. That's the reason why I'd like to set it explicitly for a specific domain. e.g. domainA and domainB are allowed and I get a request from domainA, actionhero should only return the Origin with \"domainA\".\nHowever, the postProcessors does not work with HTTP OPTIONS calls (see here)\n. OPTIONS requests should not be handled by actions! Neither should we need to override core methods to support such a feature.\nI think we need some kind of post- and preProcessors for every server type.\nFor web it will be called after a new connection is established and before it ends.\nFor websocket and socket it should be called on every new connection and after the connection got closed (?)\nSo we have the global action middleware and specific server middleware. That should be enough freedom to customize everything without overwriting core methods.\nWhat do you thing?\n. Well, I think I totally missed the connection middleware! That's exactly the thing I was thinking of.\nactionhero is great! :smile: \n. Great! Thanks\ne.g. the current Chrome on OSX does not use UTF-8 as a default for application/json - really strange!\n. Thank you very much for this detailed answer!\nKeep up the great work\n. My fault! I've used actionhero 7.6.1. \nThe current version already fixed it!\nThanks,\nPhil\n. +1\n. I did some changes and removed the grunt.loadTask command.\nInstead it's easier to load all actionhero related grunt tasks via require. So it doesn't mater if actionhero is installed locally or globally and it should be nice on windows as well.\n. we could even remove most of the generated default configuration - or put it into comments. What do you thing?\n. it seems that there were only 3 places with such default values.\n. Do you mind if I change the configLoader a little bit to also include the config files from plugins.\nI think it would be nice to load the actionhero defaults, apply the plugin defaults and finally the application specific config options.\n. Sure! ;)\n. We definitely need some tests. I just fixed a bug with plugin actions/initializers/servers/tasks paths. They got overwritten by the application config - so nothing of the plugin got loaded... \n. I've added a new folder plugins to the tests which contains some tests, the test plugin and a custom application config\n. sorry! \n. do you need anything else?\n. At the current state it won't make any sense to have more than one public folder. Even though it would be cool if actionhero would support multiple public paths. For example the actionheroClient.js could remain in the node_modules/actionhero/public folder instead of always cloning it into the projects public folder.\nHowever, almost all the other paths support multiple folders (action, task, initializer and server). My current implementation does the following:\n1. it takes the actionhero default config\n2. The project will overwrite the config with it's options.\n3. Plugins will overwrite the config with it's options.\n4. Temporary save the paths config\n5. Add the actions, tasks, initializers and servers paths to the temporary paths (if they exists)\n6. The project will again overwrite the config with it's options.\n7. Merge (concat()) the temporary paths with the config paths\n8. Overwrite the config with the _startingParams (if available)\nSo it's theoretically possible for a plugin to have e.g. multiple action folders.\nShould it be possible for a plugin to add other plugins to the api.config.general.paths.plugin config? Currently it's not possible! I don't think it's necessary.\nPhilipp\n. do you need anything else?\n. js\nexports.task = {\n  name:          'foo',\n  description:   'foo',\n  queue:         'default',\n  frequency:     0,\n  run: function(api, params, next){\n    setTimeout(function(){\n      next(new Error('FAILED!!'));\n    }, 2000);  \n  }\n};\nwill print resque worker #1 job success default class=foo, queue=default, args=[], result=FAILED!! to the console.\nI would expect something like:\nuncaught error from task: task:foo on queue default\n    arguments: [{}]\nError: FAILED!!\n    at null._onTimeout (.../tasks/foo.js:9:12)\n    at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)\n. the next callback of a task does not pass error objects to resque... so the failure event will never fire, because resque thinks everything went okay!\n. the coffee-script package should be an optional dependency. It won't make any sense to load this package for user which aren't using coffeescript.\nbut it's a good idea to offer that flexibility!\n. if you have an action foo (/api/foo) which is at version 1, it's not possible to keep foo (version 1) via /api/foo but have a second version (/api/foo/2).\nThe original /api/foo will then automatically point to the highest version of foo!\n. The default version could be the highest, but it should be able to target a specific version without specifying the version number in the url.\nFor example you have a legacy application (without an upgrade path) and the url it uses is /api/foo.\nAdding a new version for action foo (with different input or output variables) will break that old application.\nWith this pull request it's possible to define the following:\njs\nroutes = {\n  get: [\n    {path: '/foo', action: 'foo', params:{apiVersion:1}},\n    {path: '/foo/:apiVersion', action: 'foo'}\n  ]\n}\napi/foo will point to version 1\napi/foo/2 will point to version 2\n. Evan is right, adding params is a kind of duplication.\nRoutes are for web only, so it won't work for any other server-type anyways.\nBut adding the apiVersion config option to a route will totally make sense!\nTo solve @dangerdespain problem it would be nice to have some kind of action alias with predefined params. This alias actions could be defined like a normal action but without a run function.\n. I'll change this pull request tomorrow.\n. The configLoader currently merges all paths. So the above config will actually add /actions2 to the paths config. Would you like to change that?\n. ",
    "allenhartwig": "This feature is crucial for my application. Looking forward to its development.\n. ",
    "sallespromanager": "hi evan, i am honored to be supported by you ! tks !\nthe problem was with the wrong function call you pointed out, as well as the npm module, it should be nexmoapi instead of nexmo-api !!\nBy the way, I couldn't figure out what to do with the Heroku socket stuff to run actionHero there.\n( this is not the problem, butis part of what i am struggling to have actionHero complete ) \nhttps://devcenter.heroku.com/articles/using-socket-io-with-node-js-on-heroku\nis it possible ? Do you recommend another node.js host to support websockets too ?\nAnd, tried to learn more about actionHero with the nodeChecker app, but it uses a way old release of the api and some stuff do not match...\nTypeError: Cannot set property 'nodeChecker' of null\nand, it is not clear if i need to include the default in checkers.json.\nlooking forward to controlling a drone flying with action hero actions..!\n[]'s Rafael\n. man, you blow my mind when you make me feel able to do very tricky things with your help.\ni would like to authenticate users using my own Oauth2.0 server, based on Oauth2orize project.\ni would like to provide other sign on services, to facebook and twitter too. ( i know that this is specially the case of twitter because you can not access the API from the client directly. ) \ni would like Action hero for instance, subscribing to a RabbitMQ queue and logging messages to DB.\ni know how to do all this separately. It is not clear for me how to put it all together.\nEm 18/12/2012, \u00e0s 04:39, Evan Tahler escreveu:\n\nI don't understand the desire to connect an actionHero server with another server via rabbitMQ or TCP. Are you suggesting that you have 1 server that handles requests from a user once they are logged in, and another to handle the oAuth handshakes?\nIf that's the case, it shouldn't be necessary. Assuming you are asking how you can allow folks to log into your server via facebook, that would make you an oAuth consmer not a server, and you can then just use Passport directly. I haven't used Passport directly, but I've used the raw oauth package with success https://github.com/ciaranj/node-oauth\nThe trick is having 2 acitons: 1 the user starts at to initiate the response, and a second action to 'catch' the user when they are forwarded back from the provider.\nI'll try to create a twitter example for you this weekend\n\u2014\nReply to this email directly or view it on GitHub.\n. Its running in EC2 and also in OceanDigital Cloud, both ( Ubuntu 12.04 LTS ). \n\neverytime I make a request, it shows : \nubuntu@ip-10-168-47-59:/var/node/aapi$ 2013-05-28 17:18:14 - debug: [ file @ web ] to=189.4.105.34, file=/var/node/aapi/public/index.html, size=140, duration=0, success=true\nbut the browser gets no response after a while.\nit happens on both servers.\n. Hi Evan,\ni noticed it happens with a fresh install as well.\ni thought maybe not having the $PATH setup could make a difference. Nop. One thing i noticed it takes your current dir as the project_root if you start actionHero from elsewhere, and throws the error :\n+1: \ndomain.js:66\n    throw er;\n          ^\nError: undefinedNo config.js found in this project, specified with --config, or found in process.env.ACTIONHERO_CONFIG\nexcept from that i do not know how to dig deeper.\ni will try to implement client-to-client communications with faye in the meantime. If you have some tips to provide in this direction, i know it requires to manage channels in a way they are associated with client_ids. Did you do that already (out-of-the-box ) in actionHero ?\n. man, it's so cool, thanks for your concern.\ni am really glad to see what you're doing to perfect your creation.\nnode-version  v0.8.21\nby the way, i am in Brazil, we've got a lot of bananas but i have never frozen it in wooden sticks, that looks tasty..!\n[]'s raf\nEm 28/05/2013, \u00e0s 19:47, Evan Tahler escreveu:\n\noh, what version of node are you running?\n\u2014\nReply to this email directly or view it on GitHub.\n. Node v0.10.8 is the final solution. thank you !\n. Evan, thanks for the updates !\n\ni am not really sure where to get the oauth_verifier from.\nlooking into the code, it seems it is another parameter i should include to make a twitterOauthCatch ( merging with the cached ones ( savedOauthDetails.oauthToken, and  savedOauthDetails.oauthTokenSecret ).\nShouldn't twitter provide it as a response to twitterOauthStart ?\n. hummm, i don't think so.\ni check if the params get in correctly, and they do.\nit seems something is not right with\napi.session.checkAuth(connection, next, function(err, dbUser) call.\nthis    connection._original_connection      is correct ? \ni don't remember seeing anything like that before. \n. well, the problem seems to be with the connection session loading.\ni got connection.session NULL inserting this checkpoints...\napi.session.checkAuth = function(connection, noAuthCallback, happyAuthCallback){\n    api.session.load(connection, function(value, expireTimestamp, createdAt, readAt){\n      if(connection.session === null){ \n        console.log(\"connection.session is null \");\n        connection.session = {};\n      }else{\n        console.log(\"connection.session is NOT null \" + connection.session.toString());\n        var now = new Date().getTime();\n        if(connection.session.loggedIn != true){\n          console.log(\"You need to be authorized for this action \");\n          connection.error = \"You need to be authorized for this action\";\n          noAuthCallback(connection, true);\n        }else{\n          console.log(\"You ARE authorized for this action \");\n          // check to ensure the user is still ok in the DB\n          api.models.user.find({\n            where: { id: connection.session.userId },\n          }).success(function(user){\n            if(user == null){\n              connection.error = \"This user has been deleted\";\n              api.session.delete(connection, function(){\n                noAuthCallback(connection, true); \n              });\n            }else{\n              connection.auth = \"true\";\n              happyAuthCallback(null, user);\n            }\n          });\n        }\n      }\n    });\n. great ! i am studying the examples and will try to include the ORM stuff in the new one.\n1) One thing i don't understand is why i can not see the cache keys in Redis. \nI thought i would be able to access it ( before they're cleaned up ) using a regular RedisAdmin tool.\nAt startup, i see the message :\n2013-06-09 22:41:38 - debug: Logger loaded.  Possible levels include:  0=debug, 1=info, 2=notice, 3=warning, 4=error, 5=crit, 6=alert, 7=emerg\n2013-06-09 22:41:38 - warning: running with fakeredis\n2013-06-09 22:41:38 - notice: connected to redis @ 127.0.0.1:6379 on DB #76 \nDoes that indicate that actionHero is really using my local Redis instance ?\n2) I tried the examples using curl, and it didn't work because no cookie was being kept,..\nHow can i authenticate HTTP requests ( from a mobile app for instance ) which does not use cookies ? Should i check user/password supplied parameters against the DB stored user data, for a start ?\n. ohhh yes, of course,  i feel stupid, but i believed in the message \n2013-06-09 22:41:38 - notice: connected to redis @ 127.0.0.1:6379 on DB\nwhich for me was like, some misterious behaviour, we tend to accept when discovering new frameworks :-)\nwell, i really appretiate all of your support ! thank you Sir.\n. Hi Evan, as a matter of fact i started building another production server to host it and ended up crawling into puppet manifests very deep !\nYou solution works ! tHANKS !\ni just included in line 182  - of handleRequest function as you indicated.\n```\nresponseHeaders.push(['Transfer-Encoding', 'Chunked']); \n```\nthe main purpose is to cosume the API from an Android App with Async requests. but, these \"tailless\" responses occurred on both, Curl on osx and Chrome based requests.\n. MongoDB can be easily integrated with mongoose and will provide you with the tools to build a Replicaset with several instances in a cluster. \nCouchbase is even more focused on replication.\nRedis is a very nice solution to deal with hot data, sessions, caching, and communication between server instances in a cluster.\nTake a deep dive into the documentation of this server tools and you'll have a very interesting discovery of new possibilities as you match your requirements with the provided functionality.\n. You can build your own easily wrapping Nano, https://github.com/dscape/nano\nfor instance, if you intend to use CouchDB/Couchbase.\nFrom now on, it would be better to address this either in the actionHero mailing list https://groups.google.com/forum/?fromgroups=#!forum/actionhero-js\nor Couchbase one. \ngo for it & have fun.\n. ",
    "ablakely": "Just a note, I am the creator of nexmoapi.  I just updated it so that you just have to do require('nexmoapi').\n. ",
    "bchelli": "Glad I can help :)\n. Hi,\nI copied & paste your code on a php file,\nwith {someip} = localhost\nit works just fine for me :)\nmaybe it's because the url you used on your browser is not on port 8080 ?\nCheers\n. \n. ",
    "katopz": "Hm, I just hit this issue npm start throw \nshell\n0 info it worked if it ends with ok\n1 verbose cli [ 'node', '/usr/local/bin/npm', 'start' ]\n2 info using npm@2.5.1\n3 info using node@v0.10.34\n4 verbose node symlink /usr/local/bin/node\n5 verbose stack Error: missing script: start\n5 verbose stack     at run (/usr/local/lib/node_modules/npm/lib/run-script.js:138:19)\n5 verbose stack     at /usr/local/lib/node_modules/npm/lib/run-script.js:81:5\n5 verbose stack     at /usr/local/lib/node_modules/npm/node_modules/read-package-json/read-json.js:51:40\n5 verbose stack     at final (/usr/local/lib/node_modules/npm/node_modules/read-package-json/read-json.js:349:17)\n5 verbose stack     at then (/usr/local/lib/node_modules/npm/node_modules/read-package-json/read-json.js:126:33)\n5 verbose stack     at /usr/local/lib/node_modules/npm/node_modules/read-package-json/read-json.js:266:40\n5 verbose stack     at evalmachine.<anonymous>:272:14\n5 verbose stack     at /usr/local/lib/node_modules/npm/node_modules/graceful-fs/graceful-fs.js:102:5\n5 verbose stack     at Object.oncomplete (evalmachine.<anonymous>:108:15)\n6 verbose cwd /Users/pirsquare/bit/actionherojs\n7 error Darwin 14.1.0\n8 error argv \"node\" \"/usr/local/bin/npm\" \"start\"\n9 error node v0.10.34\n10 error npm  v2.5.1\n11 error missing script: start\n12 error If you need help, you may report this error at:\n12 error     <http://github.com/npm/npm/issues>\n13 verbose exit [ 1, true ]\nbut actionhero start work fine, do I've to worry or fix something? (noob alarm)\n. No go, I'm also trying upgrade node to 0.12.0 and still\n``` shell\nPis-Mac-mini:actionherojs-authen pirsquare$ npm start\nnpm ERR! Darwin 14.1.0\nnpm ERR! argv \"node\" \"/usr/local/bin/npm\" \"start\"\nnpm ERR! node v0.12.0\nnpm ERR! npm  v2.5.1\nnpm ERR! missing script: start\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     http://github.com/npm/npm/issues\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/pirsquare/bit/actionherojs-authen/npm-debug.log\n```\nNo worry, in case actionhero start is working, I will continue from that point.\nThanks anyway\n. Sure, I use untouch package.json here https://github.com/evantahler/actionhero/blob/master/package.json\n. Hm, Actually yes I did generate and precisely on that step as readme said, \nbut I didn't know exactly what or which and where package.json is actually use at that time.\nSo I think first \"package.json\" one I saw at root should be use somehow. (noob!)\nThe weird part is, which same step (I done this nearly ten times LOL) with my Home Mac \n(just trying now) working just fine. It seem like only my office Mac has this issue, \nso it could be something really wrong which my office's Mac tho.\nThanks for your time. Sorry for my mess up.\nReally appreciated your awesome work, Kinda love it! :heart: \n. Cool! Thanks for more detail. For now, I think I need more experience with Primus and Faye.\nSo I decide to have fun with Primus ObjC first and I will get back to this again when I know what I\"m doing.\nHere's what I got today (prove of concept) : https://github.com/katopz/primus-objc-helloworld\nand my next step is try to port some function from actionheroClient.js -> swift/objc\nI know! it's sound bummer but It's my bad habit to learning from working code.\nYou can close this issue for now. :D\nCheers!\n. ",
    "rinchan": "Thanks!  This helps me out a lot. :)\n. I think what you're saying makes sense to have initializers before server bootup.  I was thinking of doing the Initializers and then, after the services have booted up, a collection of \"post-boot\" functions.  You're right though, I didn't think of using the cache to keep track of things like that.  Stuck in TCP server mode and not Web services mode. :)  One of the things I like about working with actionHero! \nOne of the reasons why I wanted to replace api.socketServer.parseRequset (er, maybe it should be spelt Request instead) was because of the hardcoded commands.  I was going to convert those into actions so they fit under an authentication layer.  Another reason is that eventually my TCP server will be serving plain text responses instead of JSON.  So rather than having it JSON.stringified and back, I'd rather send it straight to begin with.  Or like, attaching said session object to a connection as soon as it connects.  Just little things, I guess.\nBut thanks!  I'll try it out!\n. ",
    "jacobbubu": "Thank you for your reply. I will sync to your new version.\nThe reason I'm trying to provide different actions by different protocols is that, I want these actions could be run in a single process. Since that they could share a bunch of status in a lighter way compare to starting more than one actionHero processes.\nUsing \"if(connection.type === \u2026)\" is also effective, but adding \"action.protocol\" would be more declarative.  \n\nRong Shen\nSent from my Retina MBP\n\u5728 2013\u5e741\u67087\u65e5\u661f\u671f\u4e00\uff0c\u4e0b\u53485:34\uff0cEvan Tahler \u5199\u9053\uff1a\n\nHey! Thanks for taking the time to do this.\nIt looks like you and I both have been finding similar topics to work on. I just finished a big refactor of the task system and stats system in v4.1.0 (now current). I think the changes are pretty worthwhile [[ http://blog.evantahler.com/blog/actionHero-v410.html ]] , but they unfortunately render your pull request unable to be merged. Can you update it?\nA question: I am philosophically against the notion that some actions are valid only for certain protocols. The spirit of the thing is that anyone (TCP, webSocket, etc) can use all actions. That said, there are certainly things that only make sense for certain clients (like routes for http/s clients), and as such they are routes are treated as optional add-ons, but not a modification to the actions themselves.\nIn the past if I had an action which I really only wanted to be accessible via a certain type of client, I just added something like the following to my action:\naction.run = function(api, connection, next){ if(connection.type === 'webSocket'){ // do stuff }else{ connection.error = \"not for you\"; next(connection, true); } })  \nMay I ask what you are doing which requires many actions to be locked to only a certain client type?\nKeep in mind you can always disable servers you don't want running in config.js  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/evantahler/actionHero/pull/75#issuecomment-11945481).\n. Thank you for the implementation. I will go your way:).\n. SIGKILL is still in NPM version.\n. But I did not see who's got the chance to call \"api.webSocketServer.handleSubscribe\"\n. Separated would be a more nature way to deploy this kind of services. Since that whether or not to use redis that should be decided by the service-self.\n. Will be come later when I find spare time:)\n. I think of that the extension is just an option to load just like fs.readFile(filename, [options], callback).\n\n\nRong Shen\nSent from my Retina MBP\n\u5728 2013\u5e745\u670815\u65e5\u661f\u671f\u4e09\uff0c\u4e0a\u53489:42\uff0cEvan Tahler \u5199\u9053\uff1a\n\nCool idea. Why did you choose to extend load vs creating a new load-and-extend method?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/evantahler/actionHero/pull/155#issuecomment-17915966).\n. Oh, the more consistent way would be put the expireExtend into an [options] parameter like this:\n\napi.cache.load(key, [options], callback)\n[options] may include expireExtend property.\nloadAndExtend is also fine with me.\nWhat's your preference?\n\nRong Shen\nSent from my Retina MBP\n\u5728 2013\u5e745\u670815\u65e5\u661f\u671f\u4e09\uff0c\u4e0a\u53489:50\uff0cRong Shen \u5199\u9053\uff1a\n\nI think of that the extension is just an option to load just like fs.readFile(filename, [options], callback).\n\nRong Shen\nSent from my Retina MBP\n\u5728 2013\u5e745\u670815\u65e5\u661f\u671f\u4e09\uff0c\u4e0a\u53489:42\uff0cEvan Tahler \u5199\u9053\uff1a\n\nCool idea. Why did you choose to extend load vs creating a new load-and-extend method?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/evantahler/actionHero/pull/155#issuecomment-17915966).\n. Sure, I will do this way.\n\n\n\nRong Shen\nSent from my Retina MBP\n\u5728 2013\u5e745\u670815\u65e5\u661f\u671f\u4e09\uff0c\u4e0b\u53481:24\uff0cEvan Tahler \u5199\u9053\uff1a\n\nI think I would prefer a more generic 'options' input, and options.expireTimestamp can be passed in to set a new expireTimestamp when loaded.\nOtherwise, it looks good!  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/evantahler/actionHero/pull/155#issuecomment-17920799).\n. to fix that:\nchange the file ./bin/actionHero at line 128:\nfrom:\nbinary.argv = require(binary.paths.actionHero_root + '/node_modules/optimist/').argv;\nto:\nbinary.argv = require('optimist').argv;\n. Because UTF8 will encode one non-ansi character into 3 bytes (for example, some Chinese characters in the  string).\nString.length just retunes the number of characters but not the real bytes length in the response. That will cause the browser truncates the response stream in advance.\n. I\u2019m running on Node.js v0.10.15 and OS X 10.9 (13A538g)\nOn 2013\u5e748\u670820\u65e5 at \u4e0b\u53485:28:07, Evan Tahler (notifications@github.com) wrote:\n\nYou can pass \"silent\" as a flag to startCluster. For example, if I wanted to startCluster with silent=false and workers=20 I would run ./node_modules/.bin/actionHero startCluster --silent false --workers 20\nI can't reproduce the failure you mention above. What OS and node version are you running?\n\u2014\nReply to this email directly or view it on GitHub.\n. Does the silent flag influence the result?\nOn 2013\u5e748\u670823\u65e5 at \u4e0b\u53482:19:13, Evan Tahler (notifications@github.com) wrote:\nI'm on osx 10.8 and node 0.10.15 as well.\nI've done some testing with https://github.com/wg/wrk and I have no problems at all running 1 actionHero server\n\nactionHero start\nwrk -t12 -c400 -d10s \"http://127.0.0.1:8080/api/status\"\nRunning 10s test @ http://127.0.0.1:8080/api/status\n  12 threads and 400 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency   404.14ms   37.58ms 456.05ms   86.49%\n    Req/Sec    48.05     15.44    84.00     68.31%\n  5794 requests in 10.01s, 10.18MB read\n  Socket errors: connect 0, read 15383, write 0, timeout 57\nRequests/sec:    579.05\nTransfer/sec:      1.02MB\nThis looks good.\n\nHowever, when running a cluster, I do see some wierdness:\n\n./node_modules/.bin/actionHero startCluster --nodes=4\nwrk -t12 -c400 -d10s \"http://127.0.0.1:8080/api/status\"\nRunning 10s test @ http://127.0.0.1:8080/api/status\n  12 threads and 400 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency   212.13ms   69.67ms 251.67ms   85.77%\n    Req/Sec     1.08      5.20    41.00     95.45%\n  827 requests in 10.01s, 1.46MB read\n  Socket errors: connect 0, read 255, write 0, timeout 1455\nRequests/sec:     82.61\nTransfer/sec:    149.09KB\nAfter my test (which has a significant number of requests), I can conform that none of the workers will answer a request. I needed far more than your 15 requests, but I was able to get there. Killing off a worker and spawning a new one was able to answer requests for a while, but it too eventually got \"stuck\".\n\nWhat's even stranger, is that it looks like the interprocess communication channel in node is broken after a large number of requests (the parent can't send signals/messages to the children). The parent still is aware of children's existence though, and notices when one dies to start a new one.\nThis problem does exist even with a single child.\nI'll be sure to dig into this more.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thank you for the workaround.\n2013/8/28 Evan Tahler notifications@github.com\n\nThis might be a node.js bug:\nIf you force the contents of your .pem files to be strings, it works. If\nyou leave them as buffers, it doesn't.\nI generated my certs like this:\nopenssl genrsa -out privatekey.pem 1024\nopenssl req -new -key privatekey.pem -out certrequest.csr\nopenssl x509 -req -in certrequest.csr -signkey privatekey.pem -out certificate.pem\nI have the same error as you with this:\nserverOptions: {\n  key: fs.readFileSync('./certs/privatekey.pem'),\n  cert: fs.readFileSync('./certs/certificate.pem')}\nHowever, this works fine:\nserverOptions: {\n  key: fs.readFileSync('./certs/privatekey.pem').toString(),\n  cert: fs.readFileSync('./certs/certificate.pem').toString()}\nThe node docs say that buffers should be ok [[\nhttp://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener]] but that doesn't seem to be our experience.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionHero/issues/204#issuecomment-23382892\n.\n\n\nBest Regards!\nRong Shen\n. silent setting has been missing in actionHero/ bin/include/startCluster.js\njavascript\n    start: function(next){\n      cluster.setupMaster({\n        exec : binary.clusterConfig.exec,\n        args: binary.clusterConfig.args.split(\" \"),\n        //silent setting should be here?\n      });\nAfter adding it (silent: true) by hand, the #200 is still there.\n. I\u2019m trying to silence the master. The default setting in cluster.setupMaster is 'false' that causes a lot of console output from workers redirect to master's stdout.\n. You are right. Things going well after using this new branch and the new config.js.\nBTW, what is the reason you discourage using console logger for workers?\n. looks like that silent: true has been added since v6.3.3 that led to the console output in winston been disabled.\n. Could make it more consistent via path.extname:\njs\nvar initializer = path.basename(f).split('.')[0];\nif (path.extname(file) === '.js') {\n     ...\n}\n. ",
    "macrauder": "Hi Evan,\nthanks for the quick patch.\nIm currently evaluating action hero and I must say that i am impressed regarding the functionality and quality, good job.\nFrom my perspective it would be fine to have some functionality's to customize some things via configuration.\nI need a special web socket handling to authenticate my users. For that it would be good to configure a own websocketserver class so that the default webSocketServer isn't started. I think if we can specify the list auf initialize actions from the main package in the config.json would be a big benefit.\nIn the next days I will take a deeper look, so let us keep in touch.\n-Thomas\nAm 13.01.2013 um 19:37 schrieb Evan Tahler notifications@github.com:\n\nBy the way, I'm curious to know what folks are using actionHero for.\nI just started a mailing list https://groups.google.com/forum/?fromgroups=#!forum/actionhero-js for actionHero. Feel free to let me know what your use case is, and what new features you might want\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi Evan,\n\nin general the fix is needed, because if you have more then one action specified in a class, then the \"name\" property is taken, otherwise the class name.\nSo it is needed for consistencyhttp://www.dict.cc/englisch-deutsch/consistency.html.\nI would like to take special chars like \":create\" to offer CRUD operations to my socket.io/backbone.js consumers.\nMaybe we should talk about a general mapping for CRUD operations, because for REST operations it is also useful\nPOST model/costumer >> model/customer:create\nDELETE model/costumer >> model/Customer:delete\nWhat do you think?\n-Thomas\nAm 14.01.2013 um 16:58 schrieb Evan Tahler notifications@github.com<mailto:notifications@github.com>\n:\nGood idea!\nHave you tested out some of the more 'esoteric' action names (like you describe) on web clients? It seems that trying to hit server/api/group/model:create?key=value might cause some problems (while server/api/?action=group/model:create&key=value is probably OK once it's HTML encoded).\nIf you want to allow totally free-form names in actions, there probably are some rules we need to ensure that at least they are HTML safe.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionHero/pull/80#issuecomment-12224638.\n. To support grouped action names in the webserver as well we should also apply the following patch\nhttps://github.com/macrauder/actionHero/commit/80d8265cdf498143dc859d6f6a64f5f2f46c180a\nAfter that you can call Action lile\n/group/subgroup/action\nand not only a single word.\nThanks\n. Perfect work! Thx\n. Hi Evan,\nthere is a bug, please ignore. We fix ist sorry!\n. The scenario is that i will inject custom initializers in the boot up sequence. So it would be good if i can specify the boot order to make sure that it is loaded in the right sequence. Good hint to make it optional. \n. We got a similar error on windows with a node version prior then 0.8.16.\nDo you running in windows? Maybe do an upgrade of your node version.\n. Good point, with this fix i can also live well.\n. The createHandlers and destroyHandlers are usefull if you need to track connection creations and destroys.\nI think it is very usefull for authorization and log handling by injection. \nThat meas if you need to know how is the user in that connection you can check it in the create handler and add the user profile in the connection a.s.o \nEspecially in enterprise scenarios you must have the possebility to trace every connection creation and deletion, because you must know the user. With this Handler injection we can put such logic in a very easy way, so we must not put such logic in every action.\n. The idea was to run special things repeatable when a user request these via a subscription action.\nLike \"inform me when xx happens\" task that should run every minute for a connection. \nCurrently i have one task running that checks every minute all connection for a subscription and then starts a sub notification task, why not so many connections hase required notification it is better to start a task pro requested subscription.\nDoes it make sense?\n. Hi Evan, tests are now added.\n. Good idea. I also think that will streamline the server logic a lot and offers much more flexibility in handling connections also in terms of action execution. \nWhat do you think would be a good starting point?\n. looks really cool, thanks\nAm 10.09.2013 um 06:06 schrieb Evan Tahler notifications@github.com<mailto:notifications@github.com>\n:\nsorry for the delay! I've gone with a simpler implementation that you suggested, but the spirit is still there. Most importantly, I chose to not block any connection + server behavior with these callbacks, as the server may have specific timing requirements (like http connections drop unless they establish within n ms).\nFrom the wikihttps://github.com/evantahler/actionHero/wiki/Middleware#connection-middleware\nLike the action middleware above, you can also create middleware to react to the creation or destruction of all connections. Unlike action middleware, connection middleware is non-blocking and connection logic will continue as normal regardless of what you do in this type of middleware.\napi.connections.createCallback is an array of functions to call on a new connection and api.connections.destroyCallbacks will be called on destruction. Keep in mind that some connections persist (webSocket, socket) and some only exist for the duration of a single request. You will likely want to inspect connection.type in this middleware.\nAny modification made to the connection at this stage may happen either before or after an action, and may or may not persist to the connection depending on how the server is implemented.\nChangeset here: 96f2d0ehttps://github.com/evantahler/actionHero/commit/96f2d0e1383ddbb9cef986ebc7c032fc548773ae\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionHero/pull/184#issuecomment-24132320.\n. Thanks for clarification Evan.\n. I think that there is currently no 100% save way to deal with the different x-forward headers. \nYour solution sounds good and should fit well for the most scenarios.\n. Hi guys,\nwhat do you think to handle multidomain support via the routes.js initializer.\nSo it could be a clear way to map domains, folder and action in the routes.js file and not in the config.js e.g.\nexports.routes = [\n \"^.*site\\.com\": {\n  get: [\n    { path: \"/test\", dir: __dirname + \"/web\" }, // (GET) /test\n    { path: \"/testaction/:apiVersion\", action:  \"sampleAction\" } // (GET) /sampleAction\n  ],\n}];\n. It shouldn't be hard to support the action alias/routes in general at generic_server side, or what do you think Evan?\n. ",
    "jimpeters": "Thanks, your awesome!\n. ",
    "JulianHH": "Nope, it's ubuntu and it's the latest node version (just cloned from git) :-/\n. Hi! \nIt's node 0.99.9 pre which I seem to be running. At least that's what node -v gives me.\nI'm sorry, I'm new to node.js, sui I don't know how to accomplish what you asked me to.\nThanks for your help anyway.\nWill try to set up a clean ubuntu vm and node install layer today.\n. Ah I see.. Thanks! \nIs there a way to completely remove the node version I have installed?\n. Great! \nThanks a lot!\n. Thanks for letting me know and for looking into it! :+1: \nOh and I'm on Ubuntu right now.\n. Thanks and sorry for opening it again.. but I'm kinda new to this:\nHow to get that commit into my local repo clone of actionHero?\nThanks in advance!\n. Ok, I'm gonna try it or wait then.\nThanks!\n. ",
    "mmadden": "+1 --- This is especially important for JS apps that use pushState on the client; the web server needs to mirror the possible client-side routes/URLs to either serve index.html or a pre-rendered server-side view that can be indexed by google. (e.x.: discourse.org)\nI think this should be a higher priority than nice-to-have unless someone can demonstrate using actionHero and express on the same port/server? I have recently started a project that will use pushState and am rolling my own express + Faye server in the meantime.\n. That was quick, great stuff! :+1: \nI have a n00b question though: How should I go about achieving pushState support on the server as I mentioned in my last comment? In other words; since routes always map to actions, how do I return index.html when there is a browser request for /users/invites or /posts/:id?\n. I understand actionHero is an API framework, but it does serve static files as well. At minimum a pushState \"single page app\" requires all the user-facing URLs to be mapped on the server to a static file (index.html) to support bookmarks and links from outside the app. Server-side rendering of the content would only be required for SEO or to speed-up the initial page load.\nAm I right to assume then that this scenario will only work with actionHero when running a separate web/express server? If so, would you prefer to keep actionHero an API-focused framework or do you have ambitions to provide a more full-featured stack? (such as that provided by SocketStream which also has an RPC mechanism roughly analogous to actions) I appreciate your thoughts on this.\n. > I've seen folks successfully write actions which contain DOM data to insert into various parts of the page.\n\n...\nCurrently, there are no plans to extend actionHero to also be a 'rendering' stack ...\n\nSorry if I'm missing your point, but that isn't really what I'm after. To support pushState the server needs a router capable of serving static assets (the app itself) to virtual paths. Once the app is loaded in the browser it is then responsible for making the good 'ol actionHero API requests to retrieve the JSON data from the server that make sense for the current application context/URL.\nIn my current project I'm exposing data using Faye and using the following to make express serve the static assets and pushState routes:\n``` javascript\n// serve static files\napp.use(express.static(__dirname + config.staticPath));\n// catch-all route responds with index.html\napp.get('*', function (req, res) {\n    fs.createReadStream(__dirname + config.staticPath + '/index.html').pipe(res);\n});\n```\nIt might not be the best way to do it, but it's working for now. I don't know how to accomplish this behavior in actionHero, but I appreciate that pushState apps aren't that common yet.\n. I see, thanks! That makes sense. Seems there's plenty of flexibility here now with the new router.\n. No, my IDE is just good about highlighting things that break my own code styles. Thanks for accepting my PR, if nothing else I'd just like to see fewer warnings after creating a new project with actionhero generate.\n. ",
    "silend": "Great, thank you!\n. ",
    "icedevil": "hi, well i have the server running for 1 week already and is working good, next scenario is to make a reconnect function in case server drops for idle. To open and close connections i think is not such a good idea, because of connection time + in my case i use this as a way to add files into CDN and i will have around 5 pics / mins uploaded, so no point to open/close connection \n. ok. I'll do that because i want future updates, i don't like to alter code. thanks \n. I forgot to add code for the initializer here, so:\nactionchecker.js\n``` javascript\nvar async = require(\"../node_modules/async\");\nvar actionChecker = function (api, next) {\n    api.actionChecker = function (connection, next, callback) {\n    // -- get current action rules\n    var _rules = api.actions.actions[connection.action]['inputs']['rules'];\n    if (_rules !== undefined) {\n        api.log(\"Detected rules\", 'debug');\n        // -- loop rules\n        async.detect(Object.keys(connection.params), function (param, callback) {\n            if (connection.error === null && _rules[param] !== undefined) {\n                // -- check inArray\n                if (_rules[param] instanceof Array) {\n                    api.log(\"Got param: [\" + param + \"] as: [\" + _rules[param] + \"] \" + \"instance of Array rule\", 'debug');\n                    async.detect(_rules[param], function (item, callback) {\n                        (connection.params[param] == item) ? callback(true) : callback(false);\n                    }, function (result) {\n                        if (result == undefined) {\n                            callback(true);\n                        } else {\n                            api.log(\"Rule passed OK\");\n                            callback(false);\n                        }\n                    });\n                }\n                // -- check regex\n                else if (_rules[param] instanceof RegExp) {\n                    api.log(\"Got param: [\" + param + \"] as: [\" + _rules[param] + \"] \" + \"instance of Regexp rule\", 'debug');\n                    if (!connection.params[param].match(_rules[param])) {\n                        callback(true);\n                    } else {\n                        api.log(\"Rule passed OK\");\n                        callback(false);\n                    }\n                }\n                // -- others\n                else {\n                    callback(false);\n                }\n            } else {\n                callback(false);\n            }\n        }, function (err) {\n            if (err !== undefined) {\n                // -- we found error in rules\n                connection.error = new Error(err + \" does not match rules\");\n                if (api.configData.commonWeb.returnErrorCodes == true && connection.type == \"web\") {\n                    connection.responseHttpCode = 422;\n                }\n                next(connection, true);\n            } else {\n                // -- there is no error for rules\n                callback();\n            }\n        });\n    } else {\n        // -- there are no rules for current action\n        callback();\n    }\n}\nnext();\n\n}\n/////////////////////////////////////////////////////////////////////\n// exports\nexports.actionChecker = actionChecker;\n```\nsample action\n``` javascript\n// --> Local\nvar action = {};\n// --> Metadata\naction.name = \"actionsView\";\naction.description = \"I will return an array of all the action accessable to uses of this API\";\naction.inputs = {\n    \"required\": ['Key'],\n    \"optional\": [],\n    \"rules\" :  {'Key' : new RegExp('^[a-zA-Z]+$'),'limit' : [5,10,20]}\n};\naction.blockedConnectionTypes = [];\naction.outputExample = {\n    \"actions\": [\n        {\n            \"name\": \"action Name\",\n            \"description\": \"Something about the action\"\n        }\n    ]\n}\n// --> Functional\naction.run = function (api, connection, next) {\n    api.actionChecker(connection,next,function(){\n        // -- My api.configData.secretKey = IHaveaStrangeKey\n        if (connection.params.Key == api.configData.secretKey) {\n            connection.response.actions = [];\n            for (var i in api.actions.actions) {\n                var action = api.actions.actions[i];\n                connection.response.actions.push({\n                    name: action.name,\n                    description: action.description,\n                    inputs: action.inputs,\n                    outputExample: action.outputExample\n                });\n            }\n            connection.response.actions.sort(function compare(a, b) {\n                if (a.name < b.name)\n                    return -1;\n                if (a.name > b.name)\n                    return 1;\n                return 0;\n            });\n        }\n        next(connection, true);\n    });\n};\n// --> exports\nexports.action = action;\n```\nThanks Evan\n. ",
    "S3bb1": "Hi Evan!\ni'll fix it asap :)\n. Hi Evan,\ni've added the code for the task reloader now :)\n. Hey @calebolin,\nhere's the way you have to run ActionHero with IISnode.\nPrerequisite dependencies  for using:\n- Windows Vista, Windows 7, Windows 8, Windows Server 2008, or Windows Server 2012\n- IIS 7.x with IIS Management Tools and ASP.NET- \n  WebSocket functionality requires IIS 8.x on Windows 8 or Windows Server 2012\n- URL rewrite module for IIS\n- Latest node.js build for Windows\nNow create a Site in the IIS Manager which points to your ActionHero folder ( npm install already done ).\nAfter creating the IIS Site add a web.config file to the ActionHero root folder  which look like this:\n<configuration>\n  <system.webServer>\n        <security>\n            <requestFiltering>\n                <hiddenSegments>\n                    <remove segment=\"bin\" />\n                </hiddenSegments>\n            </requestFiltering>\n        </security>\n    <rewrite>\n      <rules>\n        <rule name=\"actionHero\">\n          <match url=\"/*\" />\n          <action type=\"Rewrite\" url=\"bin/actionhero\" />\n        </rule>\n      </rules>\n    </rewrite>\n  </system.webServer>\n</configuration>\nThis web.config allows you to use \"bin\" folder segments in the url and creates a rewrite rule which route's all requests to the \"bin/actionhero\" file ( the start point of the actionhero ).\nAfter creating the web.config for the actionhero root, please create another web.config in the \"bin\" folder in your actionhero folder which look like this : \n```\n\n\n\n\n \n\n\n\n\n\n\n</appSettings>\n\n\n```\nThis web.config registers an IISNode Handler for requesting the \"bin/actionhero\" file. \nIf you have installed IIS8 you have to disable the defaule WebSocket functionality provided by IIS8. \nAlso you have to tell IISNode to provide the \"X-Forwarded-For\" Header with the configuration parameter \"enableXFF\".\nAt least you have to provide the actionhero_root ad ACTIONHERO_CONFIG configuration parameter as \"appSetting\" to tell the ActionHero where's the root folder ( because the node.exe process starts at the \"bin\" folder ) and where the ActionHero can find the current config file.\nIMPORTANT: please update the \"config/servers/web.js\" line:\n // Port or Socket Path\nport: process.env.PORT\nto the \"process.env.PORT\" parameter to choose the right PORT from IISNode\nAfter creating the web.config files and updating the web.js config file, ActionHero shoud be run fine with IISNode on your specific Port.\nIf you have any question, feel free to ask :)\nGreeting\nS3bb1\n. Hi Caleb,\nSorry for the late response. I will try to reproduce this error ( i have\nthe same one with a earlier version of AH ) in the evening and provide some\ninformation how about to fix it.\nGreets\nS3bb1\n. Hi Caleb,\ni've successfully reproduced your error. This is a iisnode Problem which you've posted already in the github repo. I think iisnode don't implements the \"stdin\" interface because it dont uses any user inputs so theres no need for it.\nA little \"workaround\" for the moment is, to edit the \"start.js\" in the actionhero/bin/methods folder. \nReplace the expression on line 76  : if(process.platform === 'win32')\nwith if(process.platform === 'win32' && !process.env.IISNODE_VERSION)\nNow if the actionhero wants to bind the readline interface it also checks if there's a \"IISNODE_VERSION\" property and skips if the property is present. After this the ActionHero is running well on my IIS8\n\n@evantahler can we provide this as \"Hotfix\" for ActionHero ? \n. Hi evan, \nive removed the browser_fingerprint handling, since we dont need the full functionality. This solution ( adding the sessionid to the websocket session ) should work when a web connection upgrades to websocket.\nSo for now we only have to check if the websocket call provides the configured sessionid cookie and if so, attach it to the websocket session.\nGreets\n. Hi,\nI will try to add a test for this solution today.\nGreetings\n. Hi evan,\nlooks like a test for this is very tricky, because the tests load the actionHero Client file via native node.js require() so we dont have any cookies for websocket requests to test this.\ndo you know a mocha implementation which appends cookies for any outgoing request ?\nGreets\n. Thank you for your responses,\nbut my Problem is, the Socket connection doesn't contain the cookie \nserver.server.on('connection', function(rawConnection){\n  handleConnection(rawConnection);\n});\nin this Part of the websocket.js the rawConnenction contains the Cookie header in the Browser, because the connections from the browser are enriched with the sessionId cookie.\nIn the Test, we dont have this \"automatic cookie enrichment\" and im searching for a way to do this. With request we can set cookies for REST requests ... but not for the WebSocket request from Primus.\nOr am i wrong ?\n. HI Evan,\nwith the Redis UI i've looking forward to redis-commander. I think i'll port this to the dashboard.\nYeah these two Widgets sounds good. I'll give these widgets a try :)\nI'm now working on the Build Process and integration into a plugin. \nIs there a any workaround to map another route to a \"public\" folder in a plugin ? So that we don't have to copy all the web files for a new version to the public folder in the actionhero root ?\n. Hi Evan,\nbig thanks for your ability for static files! This helps a lot!\nive just released a first version to npm ... sill beta and with some issues ... but ready for some playing with it :-) \nhttps://www.npmjs.org/package/ah-dashboard-plugin\nive still working on it and implementing new features, like redis viewer and more support for clusters. \nMaybe you can reference it in the docs.\nI'm closing this now.\nGreetings\nS3bb1\n. sorry for the delay,\ni got some issues in my current implementation and have to think about it. I will reopen this issue with the pull request when everything works fine.\n. I had this Issue when my action requires a module which was not installed\n. Hi,\nnext(connection, false) only says that the server does not return any response to the client \n(from http://actionherojs.com/docs/core/actions.html)\n\nActions are asynchronous, and require in the API object, the connection object, and the callback function. Completing an action is as simple as calling next(connection, toRender). The second param in the callback is a boolean to let the framework know if it needs to render anything else to the client.\n\nyou have to set the variable \n(from http://actionherojs.com/docs/servers/web.html)\n\nconnection.rawConnection.responseHttpCode: the status code to be rendered to the user. Defaults to 200\n\nthis is the HTTP response code if you mean this. \n. Hi @ivancevich \n1st question:\nyou can set the parameter \njavascript\n// disables the whitelisting of client params\ndisableParamScrubbing: false,\nin config/api.js to disable the param validation on every route\n2nd question:\nyou can respond with different status codes if you set \njavascript\nconnection.rawConnection.responseHttpCode\nto return status codes like 404 or 204 ;-)\nGreets ;-)\n. If you want the validation to be optional for a special parameter you can adjust the array in https://github.com/evantahler/actionhero/blob/master/initializers/params.js#L8 there are special paramters stored which arent checked.\nhmm another method is to set connection.error to a string ... then it will be send as HTTP StatusCode 400 look here -> https://github.com/evantahler/actionhero/blob/master/servers/web.js#L240 .. maybe this comes near to your request ?\n. yeah, looks good maybe we could replace the \"f\" variable with the \"file\" variable in the basename parameter too.\njavascript\nvar initializer = path.basename(file).split('.')[0];\nif (path.extname(file) === '.js') {\n     ...\n}\n. Hi,\nthis was already fixed few days ago with pull request https://github.com/evantahler/actionhero/pull/581\n. Hi,\nyou can respond with different status codes if you set \njavascript\nconnection.rawConnection.responseHttpCode\nto return codes like 404 or 204 ;-)\nGreets ;-)\n. HI,\nif i see it right in the https://github.com/evantahler/actionhero/blob/master/servers/web.js#L210 you see the method in connection.rawConnection.method.\nBut anyway i would prefer define the specific actions in the routes.js.\n. Hi,\nthis is commented out in the https://github.com/evantahler/actionhero/blob/master/config/routes.js\nthere you can see the specific arrays for GET, POST, PUT,... Methods.\n. Nice Feature! This looks great when it comes to authentication with the ah-passport plugin! Good Work @evantahler !\n. hm travis don't loves me ... but i think my changes does not affect the failed test\n. I've moved the logic to the docs and reused the text from node-resque, Hope this is okay for you @evantahler \n. I tried it on Win10 and the \"link\" command works, but then the start fails.\nC:\\Temp\\ah\\actionhero-plugins\\actionhero-plugins>node bin\\actionhero link --name\n myPlugin\n2016-01-21T20:12:14.828Z - info: actionhero >> link\n2016-01-21T20:12:14.831Z - info: linking the plugin found at plugins\\myPlugin\n2016-01-21T20:12:14.831Z - info:  - creating symbolic link 'C:\\Temp\\ah\\actionher\no-plugins\\actionhero-plugins\\actions\\myPlugin' => '..\\plugins\\myPlugin\\actions'\nC:\\Temp\\ah\\actionhero-plugins\\actionhero-plugins>npm start\n\nactionhero@13.0.0 start C:\\Temp\\ah\\actionhero-plugins\\actionhero-plugins\nnode ./bin/actionhero\n\n2016-01-21T20:12:20.537Z - info: actionhero >> start\n2016-01-21T20:12:20.709Z - notice: * starting actionhero *\n2016-01-21T20:12:20.756Z - warning: running with fakeredis\nfs.js:659\n  return binding.readdir(pathModule._makeLong(path));\n                 ^\nError: ENOTDIR, not a directory 'C:\\Temp\\ah\\actionhero-plugins\\actionhero-plugin\ns\\actions\\myPlugin'\n    at Object.fs.readdirSync (fs.js:659:18)\n    at Object.api.utils.recursiveDirectoryGlob (C:\\Temp\\ah\\actionhero-plugins\\ac\ntionhero-plugins\\initializers\\utils.js:111:12)\n    at C:\\Temp\\ah\\actionhero-plugins\\actionhero-plugins\\initializers\\utils.js:11\n7:33\n    at Array.forEach (native)\n    at Object.api.utils.recursiveDirectoryGlob (C:\\Temp\\ah\\actionhero-plugins\\ac\ntionhero-plugins\\initializers\\utils.js:111:29)\n    at C:\\Temp\\ah\\actionhero-plugins\\actionhero-plugins\\initializers\\actions.js:\n102:17\n    at Array.forEach (native)\n    at Object.module.exports.initialize (C:\\Temp\\ah\\actionhero-plugins\\actionher\no-plugins\\initializers\\actions.js:101:37)\n    at loadFunction (C:\\Temp\\ah\\actionhero-plugins\\actionhero-plugins\\actionhero\n.js:142:44)\n    at C:\\Temp\\ah\\actionhero-plugins\\actionhero-plugins\\node_modules\\async\\lib\\a\nsync.js:718:13\nin the actions folder now there is a .symlink file \n\ni try to check this why this error is thrown\n. See #761 this additional Parameter fixes the issue. Action is now available\n\n. This was the wrong branch :(\n. Yeah. Auto prefixing would be tricky because the Plugin author has to handle. \nIn the project this issue is still open because it must be done sometime. \nBut what maybe can be great...to group the actions on the startpage to get clearlier informations about the actions.\n. Yeah a section for best practices / templates would be great. \nI think that it is not the right way to enforce a break character ... but the right way is to have a break character to separate different logics\nThis helps developers to start easily with a clear project structure.\n. Maybe we can add also some \"pitfalls\" if they exist.\n. Sure:\n```\nC:\\Users\\Sebastian\\Documents\\GitHub\\actionhero>node --version\nv4.3.1\nC:\\Users\\Sebastian\\Documents\\GitHub\\actionhero>npm start\n\nactionhero@13.0.4 start C:\\Users\\Sebastian\\Documents\\GitHub\\actionhero\nnode ./bin/actionhero\n\n2016-02-24T19:25:21.964Z - info: actionhero >> start\n2016-02-24T19:25:22.044Z - notice:  starting actionhero \n2016-02-24T19:25:22.070Z - warning: running with fakeredis\n2016-02-24T19:25:22.081Z - info: actionhero member 192.168.178.21 has joined the\n cluster\n2016-02-24T19:25:22.256Z - notice: pid: 16084\n2016-02-24T19:25:22.257Z - notice: server ID: 192.168.178.21\n2016-02-24T19:25:22.258Z - info: ensuring the existence of the chatRoom: default\nRoom\n2016-02-24T19:25:22.259Z - info: ensuring the existence of the chatRoom: another\nRoom\n2016-02-24T19:25:22.268Z - info: resque scheduler started\n2016-02-24T19:25:22.271Z - notice: Starting server: web\n2016-02-24T19:25:22.278Z - notice: Starting server: websocket\n2016-02-24T19:25:22.731Z - notice: environment: development\n2016-02-24T19:25:22.732Z - info: init dashboard functionalities\n2016-02-24T19:25:22.735Z - info: init session handling\n2016-02-24T19:25:22.738Z - info: init session handling\n2016-02-24T19:25:22.740Z - notice:  Server Started \n2016-02-24T19:25:22.743Z - info: created admin user\n2016-02-24T19:25:22.785Z - info: worker: started workerId=1\n2016-02-24T19:25:23.422Z - info: worker: started workerId=2\n2016-02-24T19:25:26.776Z - info:  0= rebooting due to config change (%s) ,\n 1=C:\\Users\\Sebastian\\Documents\\GitHub\\actionhero\\config\\api.js\nC:\\Users\\Sebastian\\Documents\\GitHub\\actionhero\\initializers\\config.js:96\n      api.commands.restart.call(api._self);\n                  ^\nTypeError: Cannot read property 'restart' of undefined\n    at rebootCallback (C:\\Users\\Sebastian\\Documents\\GitHub\\actionhero\\initialize\nrs\\config.js:96:19)\n    at C:\\Users\\Sebastian\\Documents\\GitHub\\actionhero\\initializers\\config.js:27:\n15\n    at nextTickCallbackWith0Args (node.js:415:9)\n    at process._tickDomainCallback (node.js:385:13)\nnpm ERR! Windows_NT 10.0.10586\nnpm ERR! argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\\nnode_modules\\npm\\bin\\npm-cli.js\" \"start\"\nnpm ERR! node v4.3.1\nnpm ERR! npm  v2.14.12\nnpm ERR! code ELIFECYCLE\nnpm ERR! actionhero@13.0.4 start: node ./bin/actionhero\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the actionhero@13.0.4 start script 'node ./bin/actionhero'.\nnpm ERR! This is most likely a problem with the actionhero package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node ./bin/actionhero\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls actionhero\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\Users\\Sebastian\\Documents\\GitHub\\actionhero\\npm-debug.log\nC:\\Users\\Sebastian\\Documents\\GitHub\\actionhero>\n```\n. and with 13.1:\n```\nC:\\Users\\Sebastian\\Documents\\GitHub\\actionhero>npm start\n\nactionhero@13.1.0 start C:\\Users\\Sebastian\\Documents\\GitHub\\actionhero\nnode ./bin/actionhero\n\n2016-02-24T19:28:22.598Z - info: actionhero >> start\n2016-02-24T19:28:22.674Z - notice:  starting actionhero \n2016-02-24T19:28:22.702Z - warning: running with fakeredis\n2016-02-24T19:28:22.710Z - info: actionhero member 192.168.178.21 has joined the\n cluster\n2016-02-24T19:28:22.838Z - notice: pid: 16536\n2016-02-24T19:28:22.839Z - notice: server ID: 192.168.178.21\n2016-02-24T19:28:22.845Z - notice: Starting server: web\n2016-02-24T19:28:22.853Z - notice: Starting server: websocket\n2016-02-24T19:28:23.288Z - notice: environment: development\n2016-02-24T19:28:23.289Z - notice:  Server Started \n2016-02-24T19:28:28.416Z - info:  0= rebooting due to config change (%s) ,\n 1=C:\\Users\\Sebastian\\Documents\\GitHub\\actionhero\\config\\api.js\nC:\\Users\\Sebastian\\Documents\\GitHub\\actionhero\\initializers\\config.js:96\n      api.commands.restart.call(api._self);\n                  ^\nTypeError: Cannot read property 'restart' of undefined\n    at rebootCallback (C:\\Users\\Sebastian\\Documents\\GitHub\\actionhero\\initialize\nrs\\config.js:96:19)\n    at C:\\Users\\Sebastian\\Documents\\GitHub\\actionhero\\initializers\\config.js:27:\n15\n    at nextTickCallbackWith0Args (node.js:415:9)\n    at process._tickDomainCallback (node.js:385:13)\nnpm ERR! Windows_NT 10.0.10586\nnpm ERR! argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\\nnode_modules\\npm\\bin\\npm-cli.js\" \"start\"\nnpm ERR! node v4.3.1\nnpm ERR! npm  v2.14.12\nnpm ERR! code ELIFECYCLE\nnpm ERR! actionhero@13.1.0 start: node ./bin/actionhero\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the actionhero@13.1.0 start script 'node ./bin/actionhero'.\nnpm ERR! This is most likely a problem with the actionhero package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node ./bin/actionhero\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls actionhero\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\Users\\Sebastian\\Documents\\GitHub\\actionhero\\npm-debug.log\nC:\\Users\\Sebastian\\Documents\\GitHub\\actionhero>\n```\n. @evantahler \ncan you try changing a config file ? ... you've changed an initializer. This works!\n. There is a test Case for this Problem available in the pull request\n. The Route /my/secret/route is mapped to the ah public folder. \n__dirname + '/../../public'. \nMaybe a second Test where the Access to the public folder is successful resolves the wierdness or I change the Route Name to /route/to/ah/public/folder\n. HI @evantahler \ni've changed the logic that only folders within public folders can be mapped and accessed.\nThe logic to check if the requested file is within a public folder in the \"staticFile.js\" remains as is. So no other file can be accessed.\nKind regards\n. Yeah, removing config files would be more difficult to detect ... so the best way ist to delete them manually\n. Try it:\nchange your index.html (at the bottom) to:\n``` javascript\n    var client = new ActionheroClient();\n    client.connect();\n    client.on('connected', function(){\n      client.action('showDocumentation', function(data){\n        if(data.error){ window.alert(data.error); }\n        populateDocumentation(data)\n      });\n  client.action('status', function(data){\n    if(data.error){ window.alert(data.error); }\n    populateStatus(data)\n  });\n});\n\n```\nthis should wait for the connected event from the websocket. And see the response : \n\nAs you can see, the actions are called via actionWeb (REST) instead of websockets.\nWhen you change the line to my pull request the network tab looks like:\n\n. yeah, good point. I will adjust this to be async\n. Sorry for the delay, was a little busy the last days. I will push the changes today.\n. i agree with your argumentation. So maybe we can add your suggested logic for initializers which came from the actionHero itself (actions,actionProcessor,...) and use the path identifier for others ?. okay so i've removed the file path identifier and included a error message if the initializer already exists. mean't like this ?. found the issue and created a PR for this. sorry for the delay, added a test for it :). Hi,\nyou can simply use \nnode --inspect node_modules/actionhero/bin/actionhero\n. Hi Evan,\nsorry for the late response. I've testet iisnode again with actionhero and\nit works without the changes too. So we can close this pull request because\nit's not longer needed. I'll provide a wiki article how to start actionhero\nwith inside on Windows.\nGreets\nS3bb1\nAm 06.04.2014 23:04 schrieb \"Evan Tahler\" notifications@github.com:\n\nIn config/api.js:\n\n@@ -40,6 +40,9 @@ exports.default = {\n         'initializer': [ __dirname + '/../initializers' ] ,\n         'plugin':      [ __dirname + '/../node_modules' ]\n       },\n+\n-      // Needed config for IISNode, true > write pidfile, false > skip writing pid file\n\nBump?\n\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionhero/pull/360/files#r11328063\n.\n. With this change it dont breaks the logic for the public folders\n. Ah okay now I understand your wanted behavior. Okay i will change the Logic to folders mappable ONLY in their specific public folder :-)\n. you only use lodash for keys ? \n\nthen you can remove the dependency and use Object.keys(data)\n. fixed it\n. No, in the line above it is handled the same. and the check after the logic checks if the responsecode is !== 304 :)\n. yeah thats right. I've removed the module and added the check directly\n. fully agree with this :). yeah if you have more than one conflicting initializer this would be helpful to know all, not just the first one... so you would fix the first initializer and actionhero keeps crashing again . ",
    "vitalitymobile": "Thanks very much! I am very exciting when I know that.\nI will try to implement this\n. @evantahler It is awesome if you write an example tcp server for simple online game, like four or tic tac toe :+1: \n. Thank so much evantahler, very neat example!\n. ",
    "jhansche": "Hmm, that's a case I didn't consider.  In my case, I was just trying to easily strip the overhead of the chat concept so that the API platform itself could be leveraged without worrying about storing unused \"room\" broadcasts.  I'm not sure I understand when you would have a cluster that has an intentional mix of chat being enabled/disabled.\nOne issue with the current infrastructure is that there is a tight coupling between the chatroom module and the server modules:  e.g., entered-room announcements are explicitly disabled when connection.type === 'web' (there are in fact several other checks for connection.type, for that matter, particularly in places where it really doesn't make sense to even care about the connection type, but instead the connection should be the one that decides what it should and shouldn't do for a particular event).\nAs one example, I added a new connection type module that is able to handle actions via an AMQP queue message (using firebaseco/node-orch's RPC client/worker model), and that server frontend/connection type also should not announce \"room\" events (simply because the AMQP queue is typically distributed, so there's no expectation that a single message is from a single client/user).  I think the room announcements should only be relevant for long-lived single-client endpoints, like socketServer and webSockerServer.  As another example, a new MQTT or XMPP connection type would be long-lived, and would be interested in leveraging the chat room events.\nThe best way to address this tight coupling, IMO (and unfortunately I didn't have time to go down this path when creating the \"fix\"/hack), would be to instead use the EventEmitter model:\n- WebSocket and Socket connection types would emit an \"enteredRoom\" event on connection, but Web connection types would not (nor would this new AMQP connection type)\n- The ChatRoom module would receive the enteredRoom event and emit some other kind of broadcastMessage event\n- The connection types would listen for the broadcast event in order to perform its own sendMessage() behavior, however it sees fit (if it sees fit at all)\n- That also removes the need to have api.connection#sendMessage() be an abstract/unimplemented method that all connection types must implement -- and instead each connection can optionally subscribe to the \"message\" event and handle it how it wants to.\nWould that approach be more acceptable?  I think it'll go a long way in making ActionHero even more pluggable, flexible, and portable (than it already is).  I'm not sure if I'll have the cycles to completely tackle that idea, but I don't mind getting the ball rolling if I do have time.\n. This was reported to me by a coworker, and I admit I didn't look into it to determine where the issue was (it's also possible that this was based on an earlier version of the product and maybe it was fixed/changed since then).\nLooking into the code now, I see you're right that each request should be a new connection object.  So perhaps this isn't relevant anymore.\n. ",
    "neilstuartcraig": "Hi Evan\nSorry, i've only just realised i can comment on closed issues.\nThat's awesome, thanks. i grabbed the latest version and it's working exactly as i wanted.\nvery much appreciated.\nCheers\nNeil\n. Hi guys\nSorry to chip in out of the blue (I've been using actionhero for a while now, writing some plugins at the moment) but I'm wondering whether it'd be good to have an arg to determine \"full\" or \"minimal\" generator output. Not sure which would be default though!\nCheers\nNeil\nSent from my iPhone\n\nOn 7 Nov 2014, at 18:54, Evan Tahler notifications@github.com wrote:\nThe generators is either case follow the \"small\" style. I'm personally torn about this. I want the smallest code footprint, so I personally like the generator style. However, for new folks using the framework for the first time, I think having the code expanded with comments would be useful.\nAnyone have any other thoughts on the mater?\n@jtmarmon I would suggest preparing a PR to clean up the default actions either way :D\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi Evan\n\nThanks for the prompt reply, very much appreciated.\nThe above is basically what I tried but the issue is that (it seems to me, maybe i'm wrong) that by the time my custom initialiser is run, it's too late to modify the plugins array as that has already been read in and actioned. I got this info from hacking about and writing out to the console at various stages of the boot and what i saw was that for example, my custom initialiser was always run after the actions have been computed and loaded - am i wrong here?\nI have two major idea streams, perhaps you have a moment to comment on which you think is most appropriate (if any):\n- Modify actionhero to to (optionally) automatically load plugins found in the root package.json whose package name matches a regexp (this is what i was doing myself in my plugin initialiser: https://github.com/neilstuartcraig/TDPAHCMS/blob/master/pluginInitialiser/pluginInitialiser.js)\n- I change my initialiser to manually push actions etc. onto the correct arrays/objects or manually call config loads. This seems like a brittle approach to me though\nJust as an extra note, my top-level (outer) npm module doesn't sub-require modules as such, it is really more of a meta package and installs (and generates) actionhero and then installs my modules (auth, ACL, session handler and so on) as first-class/top-level npm modules (i.e. in /node_modules). This was just a slightly simpler approach in what I wanted to achieve (i think/hope!).\nCheers\nNeil\n. Yeah sure, let me try to explain a little better and illustrate with some examples i have already written...here goes :-).\nI am creating essentially a generator for my project (which is a CMS/framework type application) but I think the solution to the issue i am facing will probably help others, hence my asking you for some guidance. It seems probably that other people will want to automate (to some extent at least) the installation of actionhero plugins - which is the element i'm tackling right now.\nMy thought is that most people will install plugins via npm and that automation is going to be a good selling point. It'd be really nice to just do an npm install <package> --save and then be done (to at least some degree) - it also makes automated testing of plugins a little simpler.\nSo, as i say, my preferred idea is to:\n- add a config option, something like loadActionheroPluginsFromPackageJSON (OK so maybe that's a bit verbose :-))\n- possibly add a package name match regexp - i have /^ah-[a-z\\-]+-plugin$/ which works for the recommended format. People could adjust to be more customised or loose\n- At boot time, add any regexp matching packages form package.json to the config.general.plugins array (de-duped)\nThis way, it's a (generally) non-breaking change which adds a lot of convenience and i think will also encourage the use of the recommended naming convention for plugins.\nSo what I have done so far in the CMS/framework (yeah, I know, another CMS.framework :-)) is here:\nhttps://github.com/neilstuartcraig/TDPAHCMS/ and the initialiser which does some of the above is: https://github.com/neilstuartcraig/TDPAHCMS/blob/master/pluginInitialiser/pluginInitialiser.js\nDoes that help at all? I'm happy to create a PR so you can check it and see how you feel about it - i've done most of the work so it'd be fairly quick to do - perhaps if so, you could let me know roughly where in the codebase i'd add the new bits.\nCheers\nNeil\n. Yep, that's exactly it - I probably did a really bad job of explaining it but yes, the issues is absolutely around modifying config/api.js programmatically.\nI can certainly see the attraction of requiring both steps, from both a visibility and a security PoV and I guess to a degree, I am wrestling with that versus making it \"just work\" when someone does npm install <nameOfCMSOrSystem>. \nThe options (having thought a little more about this) for tackling this, if that's chosen, seem to me to be:\n1. Adding a config setting of something like loadActionheroPluginsFromPackageJSON (as per above) - though if not defaulted to true or an appropriate regex we'd still see the same core issue in that someone would have to amend a config file manually. Possibly this could be set/added by the generator.\n2. Moving the plugins array in config/api.js to a flat file (which is therefore programmatically amendable).\n3. Create a script which amends the existing config/api.js file - this would be very brittle though, a nono-starter I reckon.\n4. Amend the generator to accept a param which is a list of plugins to install at generate time - this may or may not be simple, depending on how config/api.js is formed by the generator.\nWhat do you think? Could/should we take a yes/no vote and if yes, which of the above (plus any other relevant options).\nI'm very happy to write and/or document the necessaries if people opt for this.\nCheers\n.\n. That'd work. It'd be really easy to use and probably more obvious where to configure plugins. I like it!\nSent from my iPhone\n\nOn 10 Dec 2014, at 21:51, Evan Tahler notifications@github.com wrote:\nActually... what if we moved api.config.general.plugins to it's own config file? Yes, you would still need to write the full export-able JS, but if you are generating your own project, you can just write if from scratch:\nexports.default = {\n  general: function(api){\n    return {\n     %%REPLACE%%\n}}}\nand you can then replace %%REPLACE%% with JSON.stringify(ArrayOfPlugins).\nWe use a template system like this already for the clientlibs and generators\n\u2014\nReply to this email directly or view it on GitHub.\n. Great, sounds good. I'll get that together and submit. Might be a week or so but I'll do it.\n\nCheers. \nSent from my iPhone\n\nOn 10 Dec 2014, at 21:58, Evan Tahler notifications@github.com wrote:\nCool. So the PR needed here would be to change api.config.general.plugins to api.config.plugins.plugins = [], and source that in its own file. I'll close this issue and await the PR!\n\u2014\nReply to this email directly or view it on GitHub.\n. Excellent, I was going to raise the same issue as it's been meaning i can;t write complete tests. Thanks for working on this.\n. I don\u2019t know for sure but I think you might need _start() as per: http://www.actionherojs.com/docs/core/initializers.html#initializerstart http://www.actionherojs.com/docs/core/initializers.html#initializerstart\n\nDoes that help?\n\nOn 11 Dec 2014, at 10:31, Mustafa Dokumac\u0131 notifications@github.com wrote:\nIs it possible to configure any of our custom initializers to run before worker forking of cluster?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/evantahler/actionhero/issues/519.\n. Hi guys\n\n@evantahler  - Yep, sorry, it was a bit of a lazy PR. I'll get it properly sorted and passing tests.\n@slattery - WRT to your points:\n1. Yes, that's done (though i need to fix the test failure(s))\n2. What I went for initially was an additional argument (--plugins) on generate which is a comma-separated list of plugins to add to the plugins array. I did this because it was simpler but I could perhaps augment it with an variant which would read plugin names matching the config file regex from either the package.json dependencies and/or, as you suggest, some other object/array. \nI'd suggest I fix the failed tests and then we modify from there - does that sound reasonable?\nCheers\nNeil\n. Hi @evantahler \nI have corrected an error in one file (a stupid copy/paste error) - again, it's in my separatePluginConfigFile branch.\nThat's all i can see that's an issue but I am having a tough time working out how i should test from my fork - are there any docs or a quick starter guide you could point me to please? I may be showing my lack of experience here but i'm keen to understand and get this right so i can contribute more and do so with less hassle for everyone :-).\nCheers\nNeil\n. Thanks @evantahler - that's plenty of info. I should be able to get it sorted as i use all the same components to at least some level. \nApologies for the amateur hour mistake there, i'll get that sorted. I think my previous extra semi-colon is hopefully the major other issue but i'll test properly and confirm.\nI'll also try to make sublime play nicely with 2 spaces instead of a tab. Do you also prefer the style:\nif(<condition>){\n...\n}\nover\nif(<condition>)\n{\n...\n}\nI personally prefer the latter and the same style with for etc. but don't want to cause inconsistencies if that's something you've a strong preference on.\nCheers\nNeil\n. Hi @evantahler \nThat should be all sorted now, i had the chance to read the code more thoroughly and immediately spotted that i simply wasn't providing a config file for the tests to use.\nThe formatting should also now be as per requirements but let me know if you spot any issues and i'll fix.\nI haven't added any tests for my changes yet as you mentioned you wanted to discuss these. We will need to be able to verify that the generate method successfully generates a /config/plugins.js file:\n- with no arguments to generate\n- with one plugin in the --plugins argument\n- with more than one plugin in the --plugins argument\nI don't know of any further tests that'd be required as it looks (on very high-level inspection) that you have tests for the config being loaded properly already.\nFollowing on from this, i'd like to consider adding: \n- An optional config property to define a name format regex for plugins (and where to define this in the config files)\n- An option (e.g. argument to generate of perhaps --plugins=package.json) to load all/matching plugins from the package.json file\n- Any further arguments/options you guys would like\nAlso (sorry, i realise i'm harping on a little bit here), i'd like to know whether you'd prefer for PR's that I update them to be merged with the latest version of your master (or another) branch before i submit the PR to ease merging on your side. Is there a PR guide perhaps? or might we create one? I just want to be able to contribute with the least amount of hassle for all involved really.\nCheers\nNeil\n. Hi guys. \nI'm away in the mountains at the moment so don't gave full access to check this but I have a plugin which does something similar. Maybe the two ideas could merge?\nMy basic plan was to allow glob-able action name patterns and versions mapped to middleware. It's in this repo at the moment: https://github.com/neilstuartcraig/TDPAHDynamicPrePostProcessorLoader\nI'd be very interested to discuss if you guys think this general idea is a go-er. \nCheers\nNeil\nSent from my iPhone\n\nOn 24 Jan 2015, at 20:17, Chad Robinson notifications@github.com wrote:\nOh, note that I illustrate how per-action configs can be handled, but didn't actually provide a sample. loadFullUser in the example above would be config.loadFullUser in the handler shown.\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah, it's something I wrote quite some time ago and then updated to ah v9 more recently. \n\nI think mine could quite easily exist as a plugin and that might be the simplest way to use it. I need to tidy it quite a bit but would really welcome any thoughts and suggestions. \nThat said, I have no objection in some or all of my plugin becoming part of the ah core but that depends very much on it being generic enough and appropriate of course. \nCheers\nSent from my iPhone\n\nOn 24 Jan 2015, at 23:16, Chad Robinson notifications@github.com wrote:\n@neilstuartcraig Your module is very interesting - thanks for contributing it! I'm not sure if they can be MERGED though. I think each contribution adds something different. This PR focuses on allowing actions to be declarative about the middleware they require via settings in their meta-data blocks. Yours focuses on allowing middleware to be much more flexible. They're pretty different goals because one puts the burden on the action developer and the other puts it on the middleware developer.\nIn fact, it seems to be that some people might want BOTH options in their projects. Some kinds of middleware are more utility-oriented, generically useful across a mix of actions. Your plugin is probably the best choice for those because if you want to apply 12 different middlewares across a mix-and-match of actions, it would be kind of annoying to have to specify them in EVERY action file. Your own examples are perfect use-cases - capitalization, translation, and filtering tools.\nMine is more focused on cases where you have fewer choices made on broader bases, and especially where configs might change from action to action. Session managers are a good example, and so are auditing and rate-limiting mechanisms. For those, it would be super confusing to have a huge bucket of config blocks somewhere outside the actions forcing you to look at two files to figure out what an action is going to do...\nI would guess that they could easily be made compatible, though. All we'd need is a call to api.actions.addMiddleware here, where addPreprocessor is also done:\nhttps://github.com/neilstuartcraig/TDPAHDynamicPrePostProcessorLoader/blob/master/TDPAHDynamicPrePostProcessorLoader.js#L35\nIf that was done, developers could use both options simultaneously!\n\u2014\nReply to this email directly or view it on GitHub.\n. I'm torn between wanting to support progress and making life difficult for new users. \nI guess since iojs is installable via nvm now that's probably not too much of an issue but eg my machine is still on node 0.10.x so I'd have to install iojs. \nI guess it's a good prompt for people to upgrade but might cause folk with ah in prod some heafacjes\n. Ah. That's definitely worthy of strong consideration then. \n\nI'll see the aws folk this week at work hopefully so I'll hassle them about it and see if there's a timeline on it. \nSent from my iPhone\n\nOn 22 Feb 2015, at 17:04, omichowdhury notifications@github.com wrote:\nOur staging/production env runs on AWS Elastic Beanstalk's node.js, which currently has support for the following versions:\n[0.8.26, 0.8.28, 0.10.21, 0.10.26, 0.10.31]\nIt's a real bummer that Amazon have not updated node support since August but hopefully they'll get a kick now that a new major stable version is out. We'll see and we may kick EBS to the kerb if this doesn't improve.\n\u2014\nReply to this email directly or view it on GitHub.\n. Info seems like the right choice to me too. It's certainly not higher than that. I guess you could make a case for debug but I'd expect to see it in info. \nFor reference, you could check what apps like nginx etc do. Not saying they're becessarily right but could be validation. \n. Hey guys. It'd be good to also have max-age for cache expiry - both CDN and browser. There's plenty of room for both :-)\n. I have a module (which I don't like the organisation of st the moment and might be a little out of date) which has the main aim to provide a caching AH client for the browser (which works pretty well). It does sone header management for http and also websockets. It should have most of the code you want. https://github.com/neilstuartcraig/ah-tdp-js-connector-plugin\n\nMight safe a little time?\nI was aiming to split out the header management stuff into a separate module. I'd like to be able to eg set headers for http and pseudo headers for websockets by just amending an object in AH which would have defaults. \nAnyway, I'll stop rambling now :-)\n. It's invalid JSON, strictly speaking.\nThat graphic is awesome :-)\n. This (using npm) is what I do, personally. I tend to create a wrapper for my project which had all the deps as npm requirements and has a runnable installer which does the ah generate and any other custom install tasks. It works very well. \n. I have some code for at least part of this already. The difficulty currently is inserting into the plugins.js conf file. It'd be nice and f the format of that file was JSON or could include an external chunk of JSON, otherwise were down to clunky string replacement which is bad news for all but brand new, untouched config files\n. My vote would be for a JSON file in each plugin package directory which held some plugin info. I would image there's other stuff we could put in there too like plugin loading order ( which could perhaps be overridden by the plugin config, if set). \n. @evantahler - yep, exactly. Then ideally there'd be an include, source controllable JSON file in the project files which could override any or all of it. Something along those lines anyway. My main request would be that I can create a automateable file which can be source controlled. \n. Or, just a suggestion - it could have system d style deps where each plugin could state other plugins on which it depends (ie it should be loaded after its deps). This means you don't need numeric priorities at all which makes things simpler in some cases. \nAnd/or we could have the principle of something akin to UNIX run levels. I'm thinking of perhaps 5-10 which could be labelled (either by custom or default) and could be broad levels eg \"data layer\". \nJust a couple of ideas for the pot. \n. Sounds great @evantahler. My personal preference is for something which can be automated, which this clearly can so its great and the re-use of existing tech is a bonus, always up for complexity reduction. \nI don't see why it wouldn't work on Windows - provided the symlinks are made via cross platform libs then I think it's work...or is my tired brainbox missing something? :-)\n. @evantahler - i'll try to take a look today/tomorrow - got some nginx/openssl builds to fix up first.\nWhich windows versions do you want to target? I might be able to persuade a colleague or maybe use the MSFT VMs to test - assuming i can remember how to do anything on windows these days :-)\n. I just added the -- before --name. Just the art separator that npm requires. \n. Hey all. \nSeems to me that plugins are the same as any other node package for at least most purposes - i.e. as @l0oky says, they're really each persons responsibility to audit and be sure of. The node package deps of plugins will be just used/run so i don't really know why we'd treat plugins any differently - am i missing something?\nSo, i think from @evantahler's list above, #1 would be the most node-like and thus fits with the principle of least surprise. #2 & #3 are the most secure though and i can see them being desirable.\nMaking e.g. a curated list of plugins would be fraught with pain and very time-consuming, one persons opinion on \"OK\" will not be anothers and i suspect there'd be major issue with people wanting their new plugins to be added to the list very quickly...it's a no go in my opinion.\nMy opinion is that #1 should be default but #2 & #3 (which are the same from the PoV of work required - make a warning on boot and don't source plugin deps which are plugins) should be configurable as options. I don't think this is going to add any runtime overhead, just a condition on booting.\nHow does that sound? Just my personal take on it from having read the above (i missed most of it on gitter).\nCheers\n. Hi @evantahler - hopefully this 2nd try will work :-). I can see the additional \"--\" in the diff,\n. Same here @evantahler (though I use / as a separator). This would have wreaked havoc with my apps :-)\nMaybe we should have a doc to suggest how to namespace? Or maybe even a doc of best practices/community idioms \n. Agreed @evantahler & @S3bb1- I think the separator is arbitrary and a personal choice. I use / because my action names then match the http request path but that's just my way. \nI was really referring in general to creating a starter set of best practices and recommendations to help new folks get up and running whilst avoiding potential issues. \n. Hi all\nI heard about this today:\nhttps://github.com/kentcdodds/all-contributors\nI haven't looked in detail but might be worth considering. \nCheers\n. Ah sorry, i was looking at it in terms of the CONTRIBUTING file - sorry, probably me cluttering the issue.\n. FWIW - i see this issue (on node v5) too. Happy to help if needed.\n. Apologies for the interjection but it occurs to me that it'd be perhaps useful to ask for e.g. A markdown file with each PR stating impact on updates. Something along those lines at least seems sensible? Any takers?\n. Sorry to interject but since you're looking at reimplementing the http headers behaviour, I just wanted to make sure it'll be standards compliant. A couple of things spring to mind to that end:\nIt's perfectly valid to set multiple versions of the same header (i forget whether that's all response headers or all)\nHeader names (in http 1.x) must be handled case insensitively. This matters a lot, especially once you put an http2 layer in front as http2 forces lowercase http header names. \nSorry if that's all obvious, just thought it was worth chipping in to avoid any wasted effort. . ",
    "ghost": "Thank you, this has been very helpful. I am wondering if you've looked at Sailsjs? We are using actionHero at work but would like to know if there are any additional advantages over Sailsjs. I love the fact that actionHero is built with scalability and multi process to solve this particular issue. I guess a few things appeal to me about Sailsjs is that it builds the urls directly and is able to inject jquery whenever a request is loaded and has a basic templating system. I love that actionHero just bundles everything together. I also see Sailsjs has 2k stars so maybe it's been around longer so then in that case it's just more things to come. Is it possible to just define multiple routes without having to deal with so much clutter? I mean to setup a single rest api end point (ex. /calculatePi) in pi would be to simply generate a model and it would be available. Even in express, it's just a simple line. This is being nitpicky so dont get me wrong, I love actionHero so far and look to continue using it. \n. I especially love the fact that actionHero has thought about asynchronous background tasks and queue. What would you put for node balancing? Say you have multiple nodes but some front facing server instance would be the first to get hit (I like to shy away from nginx).\n. Hi Evan, sorry for this delay. Yes it is from server shutdown unclean websockets clients. Now is ok\n. Thanks for clarifying this. I was looking at the potential of being able to hook functions into the config so that they may be customized at the server level rather than digging down into the bowels of the plugin itself. EG:\n```\nvar utils = require('myCustomLib');\nexports.default = {\n  \"myTest\": function (api) {\n    return {\n      utils: utils\n    }\n  }\n};\n```\nThis may actually not be the approach I want to take, I'm just feeling out the boundaries.\n. ",
    "jfgodoy": "I had the same issue.\nI solved using:\nconnection.rawConnection.responseHeaders.push(['Access-Control-Allow-Origin', '*'])\n      connection.rawConnection.responseHeaders.push(['Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS'])\n      connection.rawConnection.responseHeaders.push(['Access-Control-Allow-Headers', 'Content-Type'])\nsource (for express): http://stackoverflow.com/questions/11181546/node-js-express-cross-domain-scripting\n. thanks!! :D\n. +1\n. is it ok?\nI ran npm test without errors, but travis throws a  timeout  exceeded error.\n. thanks!\n. thanks you very much for your commit. My english is not very well, I only want to return JSON as well as strings to connection.error.\n. I know that is posible  add regex to routes, but that doesn't solve my issue.\nI have an action that serves images in different formats. The parameters of this action are x, y, z and format.\nI would like that these beautiful urls:\n/api/tiles/4/2/3.png\n/api/tiles/4/2/3.jpg\nmatches this route\nexports.routes = {\n  get: [\n    {path: \"/tiles/:z/:x/:y.:format\", action: \"tiles\" }\n  ]\n};\nactionHero just sees one variable between /, so in the previous route sees variables x, y and y.:format.\n. thanks!!\n. I don't like it, but when there is only one action, you must use exports.action = {...} instead of exports.<actionName> = {...}.\n. that happens on loading tasks too. \nremember change the documentation of actions.\n. but the name  of the action must be equals to the variable in exports, or not?\n. ok thanks! :+1: \n. thanks, this lines are not needed anymore.\n. ",
    "NicolasRitouet": "Is there a reason why you don't advise to install actionhero globally ?\nThat's OS proof, shorter in the tutorials and you need to do it once.\nI was surprised to see that when I discovered Actionhero, because all the other frameworks propose that, but maybe you have a good reason :)\n. ",
    "gfhuertac": "The last comment is not true.\nI have the following (coffeescript code):\n\n    users.get connection.params.userId, (error, user) ->\n        data = {}\n        if user\n            data = user.getInfo()\n        connection.error = error\n        connection.response = { data }\n        next connection, true\n\nIf a user does not exists then the get error gives me a \"Error not found\", however the response still gets a 200 OK code. This is the reply I received:\n\n{\n    \"data\": {},\n    \"error\": \"Error: Not found\",\n    \"serverInformation\": {\n        \"serverName\": \"demo\",\n        \"apiVersion\": \"1.0.0\",\n        \"requestDuration\": 78,\n        \"currentTime\": 1379256427200\n    },\n    \"requestorInformation\": {\n        \"id\": \"a1b27028b749caa561f69aa8ccc54404cf36fe3d\",\n        \"remoteIP\": \"127.0.0.1\",\n        \"receivedParams\": {\n            \"userId\": \"1\",\n            \"action\": \"infoIndex\",\n            \"apiVersion\": 1\n        }\n    }\n}\n\nAnd status 200 OK.\nAny hint?\n. ",
    "SudoPlz": "Thank you @evantahler \nWe don't plan to be providers at all. In the future perhaps we might consider to be consumers (with Facebook, Twitter etc) but not just yet. \nOur true purpose is to log users in from our client application to our actionHero node server (by using sockets - Faye?) in a secure and robust way.... \nWhat should we use if not oauth 2 legged (notice I mentioned 2 legged which has nothing to do with third party authentication services) ?\n. ",
    "fotiDim": "I am almost convinced to go the Couchbase route. Is there an initializer for AH I can use?\nDo you suggest the Community or Enterprise edition?\n. ",
    "intelligentspark": "Hey Evan,  \nThanks for the quick response!  If you need any assistance with Iron, let me know.  I have just gotten through the basics of working with their worker files and all that, so I'm new but may be able to save you some time if you get stuck. \nThat's what it looked like, a pathing error, I was thinking an absolute reference vs. relative, but I'm new to node, NPM, the works..\nI'm looking to try using actionhero to be a chat server solution, just as an aside.  My app isn't running locally, I'll be using it with Laravel framework, and I do my dev work on my site5 hosting account.  I never liked WAMPing locally, always find things that differ from local to remote so I just develop against my hosting. \n. Thanks Evan,  I'm jumping into so many new technologies at the same time,  I'm sure that I'm conceiving of some of this incorrectly.  Essentially I saw iron.io as a way to push messages to and from some simple JS/AJAX chat clients and also to/from twilio.  My plan was to find a good node-js-based tool to make this very easy to do, and one that would be able to scale up as concurrency increased, but I'm just a 1st-week student in this particular type of architecture and the idea of using workers and such is all very new to me, so I may be trying to offload too much to Iron.io too.  I'm probably overthinking things, as I usually do, but I thank you for all the hard work on this and for your workaround!  Any suggestions you might have are greatly valued!\n. Thanks Evan,  I'll put Actionhero to work on my own server, which simplfies things greatly.  Thank you for the help and I'll continue on with the group.\n. ",
    "dunse": "I just tried with the latest npm package, and posting JSON works perfectly.\nNot sure if it was my 2w old package which screwed up the JSON while posting..\nClosing this pull request.\n. Nice! Been waiting for this update..\nThe statement \"A simple implementation of the default Resque web UI is included in this project (ruby/sinatra)\". So is it resque-web project you are referring to? And will it be part of actionHero?\nIt seems like it doesn't handle server restart due to config.js change correctly.\nScenario 1: scheduler: false & queues: [], changed to scheduler: true & queues: [\"\"]. After restart, the delayed tasks are not enqueued.\nScenario 2: scheduler: true & queues: [\"\"]. Three tasks with 30s frequency, after restart due to config.js change the following happens:\nbash\n2013-11-23 14:53:53 - info: resque scheduler started\n2013-11-23 14:53:53 - debug:  > start: servers\n2013-11-23 14:53:53 - debug:  > start: tasks\n2013-11-23 14:53:53 - info: resque worker #1 started (queues: *)\n2013-11-23 14:53:53 - debug:  > start: resque\n2013-11-23 14:53:53 - debug: api faye client ID: sk7t5x8gtbvt8ihag8dbki2r0jaxq98\n2013-11-23 14:53:53 - debug:  > start: faye\n2013-11-23 14:53:53 - notice: server ID: 192.168.1.19\n2013-11-23 14:53:53 - notice: *** Server Started @ 2013-11-23 14:53:52 ***\n2013-11-23 14:53:53 - notice: actionHero restarted\n2013-11-23 14:54:08 - debug: resque scheduler working timestamp 1385178847\n2013-11-23 14:54:08 - debug: resque scheduler enquing job 1385178847 class=refreshTask1, queue=default, \n2013-11-23 14:54:08 - debug: resque worker #1 working job default class=refreshTask1, queue=default, \n2013-11-23 14:54:08 - debug: resque scheduler enquing job 1385178847 class=refreshTask2, queue=default, \n2013-11-23 14:54:08 - debug: resque scheduler enquing job 1385178847 class=refreshTask3, queue=default, \n2013-11-23 14:54:09 - debug: resque worker #1 working job default class=refreshTask2, queue=default, \n2013-11-23 14:54:10 - debug: resque worker #1 working job default class=refreshTask3, queue=default, \n2013-11-23 14:54:11 - debug: resque worker #1 working job default class=refreshTask1, queue=default, \n2013-11-23 14:54:12 - debug: resque worker #1 working job default class=refreshTask2, queue=default, \n2013-11-23 14:54:13 - debug: resque worker #1 working job default class=refreshTask3, queue=default, \n2013-11-23 14:54:14 - debug: resque worker #1 working job default class=refreshTask1, queue=default, \n2013-11-23 14:54:15 - debug: resque worker #1 working job default class=refreshTask2, queue=default, \n2013-11-23 14:54:16 - debug: resque worker #1 working job default class=refreshTask3, queue=default, \n2013-11-23 14:54:17 - debug: resque worker #1 working job default class=refreshTask1, queue=default, \n2013-11-23 14:54:18 - debug: resque worker #1 working job default class=refreshTask2, queue=default, \n2013-11-23 14:54:19 - debug: resque worker #1 working job default class=refreshTask3, queue=default, ```\n. I tried the latest commits and they fixed the issue, thanks!\nAh, good idea about restart when initializers change. I should do the same for my \"models\" directory. Would make life easier :)\nI gave bundle install + rackup a change, failed on first and second attempt.. So might look at porting it, if I can find the time... Before that I need to document how to integrate passport into actionHero, was a bit of a challenge..\n. Could you please re-run the Travis build? I think it had some issues when it built this pull request..\n. It failed for:\n\n1) Core: Cache cache.load without changing the expireTime will re-apply the redis expire:\nUncaught AssertionError: expected 'Error: Object expired' to be 'Error: Object not found'\n\nSeems to be some timing issue.. Could you please re-run the build?\n. I was looking at updating the docs fetched from master branch, but they do not seem to match what's published on the site. The branch gh-pages seems to be what is still in use. Please advice how you would like to proceed.\n. ",
    "norman784": "well, seems that was my fault, because it only expose to the connections.params the specified fields in inputs(required and optional), then the question will be, there is a way to pass an json object to a param? or only plain text?\njavascript\nexports.classesCreate = {\n  name: \"classesCreate\",\n  description: \"classes\",\n  inputs: {\n    required: [\"className\", \"data\"],\n    optional: [],\n  },\n  blockedConnectionTypes: [],\n  outputExample: {},\n  version: 1.0,\n  run: function(api, connection, next){\n    next(connection, true);\n  }\n};\nThat I want to achieve its to pass the collection name and collection data (I call it internally classes) but how I can know all the posible combinations of required or optional fields? A soluction that maybe will work (but doesn't) its to add a field called data, but only accepts plain text and not an object, will be ugly to pass it a json object as string in the params and then parse it back.\nTo know a little more about my goal its something like this Object creation, Parse its a baas, maybe some people know it, the most intuitive way to save data its just post/put the data from a form/object just like in the example\nbash\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ahr7sPAdoIBeyg1WO0IhBvQ62OZALqXWjWt1TF1B\" \\\n  -H \"X-Parse-REST-API-Key: BFSwmZ6aloHX3lwwEW7c7ykn6hDZIx05xqJhPftg\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"score\":1337,\"playerName\":\"Sean Plott\",\"cheatMode\":false}' \\\n  https://api.parse.com/1/classes/GameScore\nCan be an option to disable the filter params in some actions to allow this?\n. I've experimenting a little with required and optional inputs  and seems that the server add to a global variable all the inputs and not filtering correctly on each action.\n``` javascript\nexports.action = {\n  name: \"status\",\n  description: \"status\",\n  inputs: {\n    required: [\"email\"],\n    optional: [],\n  },\n  blockedConnectionTypes: [],\n  outputExample: {},\n  version: 1.0,\n  run: function(api, connection, next){\n    next(connection, true);\n  }\n};\nexports.statusTest = {\n  name: \"statusTest\",\n  description: \"status\",\n  inputs: {\n    required: [\"password\"],\n    optional: [],\n  },\n  blockedConnectionTypes: [],\n  outputExample: {},\n  version: 1.0,\n  run: function(api, connection, next){\n    next(connection, true);\n  }\n};\n```\nthen test it\n``` bash\n$   curl -X POST -d \"email=test@test&password=123456\" http://localhost:8080/api/1/statusTest -v\n About to connect() to localhost port 8080 (#0)\n   Trying 127.0.0.1...\n connected\n Connected to localhost (127.0.0.1) port 8080 (#0)\n\nPOST /api/1/status HTTP/1.1\nUser-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8x zlib/1.2.5\nHost: localhost:8080\nAccept: /\nx-wsd-application-id: 5227ea6b7dc272de588898a6\nx-wsd-application-scret: Lst1undefinedundefineddCUhiEPhMXI4Fz7rwn6ZErCPxFLeqpuWQ5QPi\nContent-Length: 31\nContent-Type: application/x-www-form-urlencoded\n\nupload completely sent off: 31 out of 31 bytes\n< HTTP/1.1 200 OK\n< Content-Length: 914\n< X-Powered-By: actionHero API\n< Content-Type: application/json\n< Transfer-Encoding: Chunked\n< Set-Cookie: sessionID=6d0cd14f926691f9f04063c62dfe4628fca75aa6\n< Date: Thu, 05 Sep 2013 21:05:28 GMT\n< Connection: keep-alive\n< \n{\n  \"serverInformation\": {\n    \"serverName\": \"actionHero API\",\n    \"apiVersion\": \"0.0.1\",\n    \"requestDuration\": 3,\n    \"currentTime\": 1378415128232\n  },\n  \"requestorInformation\": {\n    \"id\": \"6d0cd14f926691f9f04063c62dfe4628fca75aa6\",\n    \"remoteIP\": \"127.0.0.1\",\n    \"receivedParams\": {\n      \"email\": \"test@test\",\n      \"password\": \"123456\",\n      \"apiVersion\": 1,\n      \"action\": \"statusTest\",\n      \"limit\": 100,\n      \"offset\": 0\n    }\n  }\nConnection #0 to host localhost left intact\n}* Closing connection #0\n```\n\n\nI've got email and password when only the action requires the email and password even isn't optional in status.\nThis is how I understand that AH must work, only email need to be exposed to status params. Its a bug, or only its the way that should work?\nI've noticed this when try to add a wildcard to some action and in each action all the data sent its exposed when in some actions only few params need to be accessible.\n. Check it out this commit, dunno if its stable but when I feel that works fine and do some more test I will do a pull request...\n. thanks to you... seems much cleaner than my approach, i would try to add the \"*\" (comodin) support with this commit, because I need it!\nthe easier way imo its to add a condition in reduce params that skip the loop if the * its present.\nRegards\n. I need to check well where was and if the issue persist, because I was playing with the action hero core,  Can you provide me the article where talks about the rails issue with wildcards, or how it can cause trouble in the framework?\nMaybe I'm wrong, but your recommendation its to stringify my object before send it?\n. Well seems that can't send json object, dunno if its require issue or action hero issue but with those files you can reproduce the error (I think)\n``` javascript\n// test/_setup.js\nexports._setup = {\n  serverPrototype: require(\"../node_modules/actionHero/actionHero.js\").actionHeroPrototype,\n  testUrl:         \"http://127.0.0.1:9000/api/1\",\nserverConfigChanges: {\n    general: {\n      id: \"test-server-1\",\n      workers: 1,\n      developmentMode: false\n    },\n    logger: { transports: null, },\n    redis: {\n      fake: true,\n      host: \"127.0.0.1\",\n      port: 6379,\n      password: null,\n      options: null,\n      DB: 0,\n    },\n    servers: {\n      web: {\n        secure: false, \n        port: 9000,  \n      },\n    }\n  },\ninit: function(callback){\n    var self = this;\n    if(self.server == null){\n      self.server = new self.serverPrototype();\n      self.server.start({configChanges: self.serverConfigChanges}, function(err, api){\n        self.api = api;\n        callback();\n      });\n    }else{\n      self.server.restart(function(){\n        callback();\n      });\n    }\n  }\n}\n// test/integration.js\nvar request = require(\"request\")\n  , should = require(\"should\")\n  , setup = require(\"./_setup.js\")._setup\ndescribe('Status', function(){\n  before(function(done){\n    setup.init(done);\n  });\nit(\"GET\", function(done){\n    request.get({\n      url: setup.testUrl + \"/status?query=OK\",\n      headers: headers\n    }, function(err, response, body){\n      body = JSON.parse(body);\n      should.not.exist(body.error);\n      done();\n    });\n  });\nit(\"POST stringify\", function(done){\n    request.post({\n      url: setup.testUrl + \"/status\",\n      headers: headers,\n      form: {\n        query: JSON.stringify({\n          ok : \"ok\"\n        })\n      }\n    }, function(err, response, body){\n      body = JSON.parse(body);\n      should.not.exist(body.error);\n      done();\n    });\n  });\nit(\"POST object\", function(done){\n    request.post({\n      url: setup.testUrl + \"/status\",\n      headers: headers,\n      form: {\n        query: {\n          ok : \"ok\"\n        }\n      }\n    }, function(err, response, body){\n      body = JSON.parse(body);\n      should.not.exist(body.error);\n      done();\n    });\n  });\nit(\"PUT\", function(done){\n    request.put({\n      url: setup.testUrl + \"/status\",\n      headers: headers,\n      form: {\n        query: \"OK\"\n      }\n    }, function(err, response, body){\n      body = JSON.parse(body);\n      should.not.exist(body.error);\n      done();\n    });\n  });\nit(\"PUT query string\", function(done){\n    request.put({\n      url: setup.testUrl + \"/status?query=OK\",\n      headers: headers\n    }, function(err, response, body){\n      body = JSON.parse(body);\n      should.not.exist(body.error);\n      done();\n    });\n  });\nit(\"DELETE\", function(done){\n    request.del({\n      url: setup.testUrl + \"/status?query=OK\",\n      headers: headers\n    }, function(err, response, body){\n      body = JSON.parse(body);\n      should.not.exist(body.error);\n      done();\n    });\n  });\n});\n// actions/status.js\nvar _ = require('underscore');\nexports.action = {\n  name: \"status\",\n  description: \"status\",\n  version: 1.0,\n  inputs: {\n    required: [\"query\"],\n    optional: [],\n  },\n  blockedConnectionTypes: [],\n  outputExample: {},\n  version: 1.0,\n  run: function(api, connection, next){\n    connection.response = _.clone(connection.params);\n    next(connection, true);\n  }\n};\n// routes.js\nexports.routes = {\n  get: [\n    { path: \"/:apiVersion/status\", action: \"status\" },\n  ],\n  post: [\n    { path: \"/:apiVersion/status\", action: \"status\" },\n  ],\n  put: [\n    { path: \"/:apiVersion/status\", action: \"status\" },\n  ],\n  delete: [\n    { path: \"/:apiVersion/status\", action: \"status\" },\n  ]\n};\n```\nRegards\n. yes, seems that its an request lib issue, I would find a way around then to write my test to check it! \nEDIT: A simple test with express looks like\n``` javascript\n// package.json\n{\n  \"dependencies\": {\n    \"express\": \"x\"\n  },\n  \"devDependencies\": {\n    \"should\": \"x\",\n    \"mocha\": \"x\",\n    \"request\": \"x\",\n    \"supertest\": \"x\",\n    \"formidable\": \"x\"\n  },\n  \"scripts\": {\n    \"test\": \"node ./node_modules/.bin/mocha --reporter spec ./\"\n  }\n}\n// app.js\nvar express = require('express')\n  , supertest = require('supertest')\n  , request = require('request')\n  , should = require(\"should\")\n  , formidable = require('formidable')\n  , http = require('http')\n  , util = require('util');\ndescribe('POST', function(){\n  it ('supertest object', function(done){\n    var app = express();\napp.use(express.bodyParser());\n\napp.all('/', function(req, res){\n  console.log(req.body);\n  res.send(req.body.query.ok ? 200 : 404);\n});\n\nsupertest(app)\n  .post('/')\n  .send({ query: { ok : \"ok\" } })\n  .expect(200, done);\n\n});\nit ('bodyparser object', function(done){\n    var app = express();\napp.use(express.bodyParser());\n\napp.all('/', function(req, res){\n  console.log(req.body);\n  res.send(req.body.query.ok ? 200 : 404);\n});\n\napp.listen(8000, function(){\n  request.post({\n    url: \"http://localhost:8000\",\n    form: {\n      query: {\n        ok : \"ok\"\n      }\n    }\n  }, function(err, response, body){\n    body.should.equal(\"OK\");\n    done();\n  });\n})\n\n});\nit ('formidable object', function(done){\n    server = http.createServer(function(req, res) {\n  req.on('data', function(chunk) {\n    console.log(chunk.toString());\n  });\n\n  req.on('end', function() {\n    // empty 200 OK response for now\n    res.writeHead(200, \"OK\", {'Content-Type': 'text/html'});\n    res.end();\n  });\n\n  var form = new formidable.IncomingForm();\n\n  form.parse(req, function(err, fields, files) {\n    res.end(util.inspect({fields: fields, files: files}));\n  });\n});\n\nserver.listen(8888, function(err){\n  request.post({\n    url: \"http://localhost:8888/\",\n    form: {\n      query: {\n        ok : \"ok\"\n      }\n    }\n  }, function(err, response, body){\n    body.should.equal(\"OK\");\n    done();\n  });\n})\n\n// });\n});\n```\nTest result\n``` bash\n\nnode ./node_modules/.bin/mocha --reporter spec ./\n\nPOST\n    \u25e6 supertest object: { query: { ok: 'ok' } }\n    \u2713 supertest object (60ms)\n    \u25e6 bodyparser object: { query: { ok: 'ok' } }\n    \u2713 bodyparser object \n    \u25e6 formidable object: query[ok]=ok\n    1) formidable object\n2 passing (92ms)\n  1 failing\n1) POST formidable object:\n  actual expected\n\n  OK\n\n....\n```\nthanks\n. FYI solved changing request with superagent\n``` javascript\nvar request = require('superagent')\n  , should = require(\"should\")\n  , setup = require(\"./_setup.js\")._setup;\ndescribe('Status', function(){\n  before(function(done){\n    setup.init(done);\n  });\nit(\"GET\", function(done){\n    request\n      .get(setup.testUrl + \"/status?query=ok\")\n      .end(function(err, res){\n        should.not.exist(res.body.error);\n        done();\n      });\n  });\nit(\"POST object\", function(done){\n    request\n      .post(setup.testUrl + \"/status\")\n      .send({\n        query: {\n          ok : \"ok\"\n        }\n      })\n      .end(function(err, res){\n        should.not.exist(res.body.error);\n        done();\n      });\n  });\nit(\"PUT object\", function(done){\n    request\n      .put(setup.testUrl + \"/status\")\n      .send({\n        query: {\n          ok : \"ok\"\n        }\n      })\n      .end(function(err, res){\n        should.not.exist(res.body.error);\n        done();\n      });\n  });\nit(\"DELETE\", function(done){\n    request\n      .del(setup.testUrl + \"/status\")\n      .send({\n        query: {\n          ok : \"ok\"\n        }\n      })\n      .end(function(err, res){\n        should.not.exist(res.body.error);\n        done();\n      });\n  });\n});\n```\n. Seems that Sendgrid Webhook just post to the root body the objects/array, maybe @evantahler can give you a hand with that.\nAlso check it out this example, its using hapi.\nRegards\n. seems that I mess with something with the query string... now in a fresh AH instance got work the qs but found another issue, isn't related with the qs but with the PUT verb and form data sent, it doesn't receive, testing with POST works fine.\nAction\n``` javascript\n// actions/test.js\nexports.action = {\n  name: 'test',\n  description: 'Test purpose',\n  inputs: {\n    \"required\" : [\"query\", \"test\"],\n    \"optional\" : []\n  },\n  blockedConnectionTypes: [],\n  outputExample: {},\n  run: function(api, connection, next){\n    next(connection, true);\n  }\n};\n```\nTest\n``` javascript\n// test/_setup.js\nexports._setup = {\n  serverPrototype: require(\"../node_modules/actionHero/actionHero.js\").actionHeroPrototype,\n  testUrl:         \"http://127.0.0.1:9000/api\",\nserverConfigChanges: {\n    general: {\n      id: \"test-server-1\",\n      workers: 1,\n      developmentMode: false\n    },\n    logger: { transports: null, },\n    redis: {\n      fake: true,\n      host: \"127.0.0.1\",\n      port: 6379,\n      password: null,\n      options: null,\n      DB: 0,\n    },\n    servers: {\n      web: {\n        secure: false, \n        port: 9000,  \n      },\n    }\n  },\ninit: function(callback){\n    var self = this;\n    if(self.server == null){\n      self.server = new self.serverPrototype();\n      self.server.start({configChanges: self.serverConfigChanges}, function(err, api){\n        self.api = api;\n        callback();\n      });\n    }else{\n      self.server.restart(function(){\n        callback();\n      });\n    }\n  }\n}\n// test/integration.js\nvar request = require(\"request\")\n  , should = require(\"should\")\n  , setup = require(\"./_setup.js\")._setup\ndescribe('Test', function(){\nbefore(function(done){\n    setup.init(done);\n  });\nit(\"GET\", function(done){\n    request.get(setup.testUrl + \"/test?query=qq&test=tt\", function(err, response, body){\n      body = JSON.parse(body);\n      should.not.exist(body.error);\n      done();\n    });\n  });\nit(\"POST\", function(done){\n    request.post({\n       url:setup.testUrl + \"/test\",\n       form : {\n        query: \"aa\",\n        test: \"tt\"\n       }\n     }, function(err, response, body){\n      body = JSON.parse(body);\n      should.not.exist(body.error);\n      done();\n    });\n  });\nit(\"PUT qs\", function(done){\n    request.put({\n       url:setup.testUrl + \"/test?query=qq&test=tt\",\n       form : {\n        query: \"aa\",\n        test: \"tt\"\n       }\n     }, function(err, response, body){\n      body = JSON.parse(body);\n      should.not.exist(body.error);\n      done();\n    });\n  });\nit(\"PUT\", function(done){\n    request.put({\n       url:setup.testUrl + \"/test\",\n       form : {\n        query: \"aa\",\n        test: \"tt\"\n       }\n     }, function(err, response, body){\n      body = JSON.parse(body);\n      should.not.exist(body.error);\n      done();\n    });\n  });\n});\n```\nOutput\n``` bash\nnode ./node_modules/.bin/mocha --reporter spec ./test\nTest\n    \u2713 GET (41ms)\n    \u2713 POST \n    \u2713 PUT qs \n    1) PUT\n3 passing (1s)\n  1 failing\n1) Test PUT:\n     Uncaught AssertionError: expected 'Error: query is a required parameter for this action' to not exist\n      at Request._callback (~/Projects/Test/actionhero/test/integration.js:57:18)\n      at Request.self.callback (~/Projects/Test/actionhero/node_modules/request/request.js:129:22)\n      at Request.EventEmitter.emit (events.js:98:17)\n      at Request. (~/Projects/Test/actionhero/node_modules/request/request.js:873:14)\n      at Request.EventEmitter.emit (events.js:117:20)\n      at IncomingMessage. (~/Projects/Test/actionhero/node_modules/request/request.js:824:12)\n      at IncomingMessage.EventEmitter.emit (events.js:117:20)\n      at _stream_readable.js:912:16\n      at process._tickDomainCallback (node.js:459:13)\nnpm ERR! weird error 1\nnpm ERR! not ok code 0\n```\nRegards\n. thanks! now its working...\n. ",
    "guillegette": "Hi @norman784 Im trying to implement the wild card as well for one of my actions, Sendgrid webhook sends you their data in the POST body and I would like to be able to parse it. I think it would be good to have something like that, at least keep the post body in the rawConnection object so if you want to use it we can .. \nAppreciate any help! Cheers!\n. Thanks guys for your quick responses! \n@evantahler the problem with Sendgrid is that they send you an array with events so my keys are actually like 0,1,2 ... something like [{email:blabla, event: blabla},{email:blabla2, event:blabla2}] My  work around to this was declare a new property for the connection object call payload. \n- in web.js inside fillParamsFromWebRequest, i did connection.setPayload(varsHash);\n- in connections.js:\n  api.connection.prototype.setPayload = function(payload){\n    this.payload = payload;\n  }\nwhat do you think? that way if you want to go through your payload from your action you can, but we keep the same logic for required and optional params.. \n. @evantahler that looks good and I really appreciate your time. The solution works fine when it is a hash but everything changes when you send \"Content-Type: applicatio/json\". varHash is not a hash any more and in the case of Sendgrid post body its an array.  This is the example call that they provide:\n\ncurl -X POST -H \"Content-Type: applicatio/json\" -d '[{\"email\":\"john.doe@sendgrid.com\",\"timestamp\":1337197600,\"smtp-id\":\"4FB4041F.6080505@sendgrid.com\",\"event\":\"processed\"},{\"email\":\"john.doe@sendgrid.com\",\"timestamp\":1337966815,\"smtp-id\":\"4FBFC0DD.5040601@sendgrid.com\",\"category\":\"newuser\",\"event\":\"clicked\"},{\"email\":\"john.doe@sendgrid.com\",\"timestamp\":1337969592,\"smtp-id\":\"20120525181309.C1A9B40405B3@Example-Mac.local\",\"event\":\"processed\"}]' http://localhost:8080/sendgrid\n\nI understand that we can customize a framework for one service, so that is why i was suggesting having somewhere in the connection the original payload for this rare cases.\n. That is weird, i have a tab \"Files Changed\" and I can see the commit. Here is a link to my commit https://github.com/guillegette/actionhero/commit/2c45a05e9cdba3deb873af48e6fce5574812f964\n. Oh sorry for that. The problem is with the \"Error: \" string that is appended. String(connection.response.error) is already returning \"Error: there was an internal error blabla\" and api.config.general.serverErrorMessage) only has the message and not the string \"Error\" .. that is why i switched them around.. Not sure if I am being clear enough.. \n. no problem, started to work with this a few days a go and im loving it! great work!\n. Yes its really weird. What about just checking the keys first? i dont think anyone would try to have a payload like {\"0\" : \"a\"} as it get really hard to manage .. but yeas its a tricky one .. \n. Actually you are already doing that here:\n\nvar keys = Object.keys(obj)\nif(keys.length < 1){ return \nif(keys[0] !== '0'){ return \nif(keys[(keys.length - 1)] !== String(keys.length - 1)){ return false }\n\n. ",
    "itayw": "Apologies for my tardiness. Yes, the error in question is \"peer X has gone away\".\nFollowing your comment, I've re-visited our use and found the following:\n- We do have occasions of intense processing leading to busy event loop, as you mentioned, during these period we noticed the error and it made sense.\n- What we've recently discovered and lead to this pull request is that on remote deployments where redis is located on a different server than AH, we are receiving this error as well. It's important to mention that the system is idle during the period when we receive the error.\nThat said, bottom line, the change suggest will miss and not provide the desired fix we're after. I will close the request, further investigate the cause and report back with my findings :)\nBest regards,\nItay\n. ",
    "genexp": "Hahaha.. Given your gravatar, the :thumbsup: is even more fitting.  I'll add this in and send and add the pull to this ticket.\nReally loving actionhero!\n. OH hey, thanks for doing this @jfgodoy!  I had planned to get to it here before we launch, this is great!\n. I don't really get the logic here.  You can add your own regex to routes if you like:\npath: \"/login/:userID(^\\\\d{3}$)\", action: \"login\" } // (POST) /api/login/123\nWhat's the thought here?\n. I can see what you're doing, I can also see an argument for using content\ntype header instead.    What you really want here (i think) is ActionHero\nto turn .png into a content type of image/png (which is what, for example,\nrails does)\nOn Thu, Oct 24, 2013 at 2:33 PM, jfgodoy notifications@github.com wrote:\n\nI know that is posible add regex to routes, but that doesn't solve my\nissue.\nI have an action that serves images in different formats. The parameters\nof this action are x, y, z and format.\nI would like that these beautiful urls:\n/api/tiles/4/2/3.png\n/api/tiles/4/2/3.jpg\nmatches this route\nexports.routes = {\n  get: [\n    {path: \"/tiles/:z/:x/:y.:format\", action: \"tiles\" }\n  ]\n};\nactionHero just sees one variable between /, so in the previous route sees\nvariables x, y and y.:format.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionHero/issues/236#issuecomment-27017970\n.\n. I think this is really good!\n\nOn Fri, Oct 25, 2013 at 9:08 PM, Evan Tahler notifications@github.comwrote:\n\nHere's a proposal:\nhttps://github.com/evantahler/actionHero/compare/extensions\nWe can do what Rails does:\n- do not treat extensions params\n- treat extensions as a special type of data, and append it to the\n  connections (connection.params). You can access this in the action\n- (optionally) auto-set the mime type based on the extension (\n  api.configData.servers.web.matchExtensionMime)\nThe branch linked above isn't quite done yet (needs some tests), but it\nshould be enough to see if it will work for you\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionHero/issues/236#issuecomment-27136191\n.\n. In an attempt to fix this, I updated to 6.4.3. No luck.  What's strange about this is that my other route (pollsCreate & pollsList) works as expected.\n. Hey Guys - This was my bug.  I was accidentally setting error in my code somewhere and didn't realize it.  Apologies for the confusion, but thanks for the help!\n. Yeah, this is exactly what I was thinking too.  Nice :)\n\nOn Wed, Nov 20, 2013 at 12:11 PM, Evan Tahler notifications@github.comwrote:\n\nIn the same vane of this PRhttps://github.com/evantahler/actionHero/pull/252,\nwe should probably support all HTTP 1.1 methods, and HEAD is in that\ncollection. HEAD responses will act just just GETs, but return no body.\nThis implies that server-side processing can still take place with a GET.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionHero/issues/255#issuecomment-28908245\n.\n. I seem to get errors on Heroku even after this patch.  Specifically:\n\nError: remotePort is required to create a new connection object\n. I figured I'd note that when testing this, I had another problem related to Heroku.  Apparently they cache npm modules by default using the version, not the commitish.  Essentially, heroku was using an old version.  I fixed this by adding my npm modules to the repo since none of the other noted methods (updating package file, etc.) were working.  This is very annoying, but works for now.\n. Turns out there's a bug with the buildpack!  Following the ticket and will\nupdate if anyone is interested.\nOn Wed, Dec 4, 2013 at 9:09 PM, Evan Tahler notifications@github.comwrote:\n\nYeah, I think that Heroku will always npm install unless you check code\nin. if you link a git module by SHA rather than branch (aka: master), that\nshould work as well.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionHero/pull/264#issuecomment-29865852\n.\n. Hey Evan - I'll make that update tomorrow and send you a pull.  Regarding\nthe update, I'm still seeing the problem.  I'll test that out too and\nassume its something I'm doing wrong.  (I would have thought the comparator\nshould be against undefined, not null, something like  (! IP[1] === void 0)\n\nOn Tue, Dec 3, 2013 at 12:44 PM, Evan Tahler notifications@github.comwrote:\n\nActually, we probably should be using X-Forwarded-Port if it exists, as\nyou point out. If you could make that update, that would be great\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionHero/issues/273#issuecomment-29732893\n.\n. +1 on this!  We did this locally on both projects and have been meaning to pull it in!\n. +1 This looks perfect :)  Thanks y'all!\n. Hey Evan - Absolutely!  I created an initializer to watch my lib folder.  Here's what I have:\n\n```\nvar glob = require(\"glob\")\nvar _    = require(\"lodash\")\nmodule.exports = {\n  initialize: function(api, next){\n    glob(\"lib/*.js\", {}, function (err, files) {\n      _.each(files, function(file){\n        api.watchFileAndAct(file, function(){\n          api.log('rebooting due to config change: ' + file, 'info');\n          api.commands.restart.call(api._self);\n        });\n      });\nnext();\n});\n\n}\n};\n```\n. Ahhh. I should have noticed that.  Thanks dude!\nOn Thu, Feb 26, 2015, 15:06 Evan Tahler notifications@github.com wrote:\n\nClosed #603 https://github.com/evantahler/actionhero/issues/603.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/evantahler/actionhero/issues/603#event-242792803.\n. \n",
    "alligator-io": "Exactly encoding connection was the problem.\nThanks for your help\n. ",
    "spacepluk": "Excellent! now I'm getting consistent 1500~1700 :+1: :)\nIs it possible to disable the stats?  I'm not sure I need them right now.\n. thanks :)\n. ",
    "psykomo": "Did you close this issue? So, how can we modify node's default connection pool size?\n. @evantahler, the PR works as expected... Thanks! \n. Thanks for your response... it's clear now.\n. ",
    "kytwb": "@evantahler saw this closed ticket but I'm having the same \"issue\". I want to implement versioning but prefer to access my endpoints directly in the browser as /v1/user/42 or /user/42/ and not /getUser?id=42 or something. I didn't dig the code \"responsible\" for that yet, asking your point of view first (why?).\n. That's ... very strange. Commenting out a task that was sending an email (ah-nodemailer-plugin) did the trick. Let the \"Waiting On Poster\" tag, I'll investigate this more.\n. Didn't answer this one, sorry. I tried to investigate but wasn't able to reproduce.\n. @evantahler Can we expect a patch to be published any time soon?\n. Done. Let me know if you see more or feel free to merge.\n. Doesn't seem to work with instances of Error, just return a string. Maybe because some properties are not enumerable on Error?\n. @evantahler I think this is due to servers/web.js:262:\nif(data.response.error && util.isError(data.response.error)){\n  data.response.error = String( data.response.error.message );\n}\n. Why not just removing this part of the web server?\n. My bad, it's still present in data.\nGot confused by the description of data made in the changelog.\n. This looks great!\n. You need Node.js 4.5.0 or greater if you are using ws@2\nSee https://github.com/websockets/ws/issues/998#issuecomment-279144218. @evantahler should I submit a PR updating node engine requirement?. My bad, this is not a bug as that's the specified behavior for the test environment in config/api.js.\nIt might be confusing for other people as well, what can be done to enhance this?. I see something was done to handle this here to use the OS temp directory.\nThe issue is related to npm/npm#4531.. Closing as not related to Actionhero.\nSolved using the solution mentionned in https://github.com/npm/npm/issues/4531#issuecomment-272534113:\n\nJust set npm config set unsafe-perm true. I talked a bit too fast. This doesn't work for me.\nWhat about implementing https://github.com/avajs/find-cache-dir?. @evantahler maybe we can just follow their ~convention and store temp things in ./node_modules/.cache/actionhero?. Just a heads up, I haven't forgotten about this, just been busy with work and life.\nWill come back with a PR soon!. Not sure why the CI doesn't pass, my PR is only doc text edits.\nLet me know if you want me to investigate and fix before merging.. \n",
    "dsshap": "Thank you!\n. I have implemented other server types (json socket and binary socket) and everything worked fine with opsworks. It was only when i copied the code from your \"web\" server into my own \"custom server\" does it give me the restarts (i just renamed it and changed references to config.js otherwise the code is all the same) .\nI dont believe a middleware is the answer because i only require the auth_token verification on http requests, not socket connections.\nI saw this\njavascript\n  server._teardown = function(next){\n    // long-lasting connections will be terminated by process.exit from the startServer manager's timeout\n    server.server.close();\n    next();\n  }\nwhich made me think that somehow the connection is getting passed back to the original \"web\" server and the response is not being completed, thus hitting the internal actionhero timeout. But i have a hard time believing that since I only initiate my custom server in config.js (i know because i dont see \"initialized server: web \" in the logs)\n. I figured out the issue. I was aware of the \"keep alive\" http request from opsworks. With the stock web server, HTTP status code 404 is returned when it hits the root ('no action found' response). I had changed the code to return 401 when the authorization token wasn't validated. \nIt appears codes 200's and 404 are acceptable responses for Opsworks keep alive, anything else it assumes is an issue an kills+restarts the process.\n. Thats what I was wondering, if someone has created their own server type that supports video streaming.\n. Thank you!\n. I found your article, http://blog.evantahler.com/blog/newrelic_and_actionhero.html\nI am trying to add it do my version of AH, but am having trouble getting the application to accept my \nexports.newrelic the overrides I placed in the config.js file\n. ",
    "saxn-paule": "config is only parsed once at server startup. because of that, expire date is only generated once too. Would be better to handle the expire date for its own.\njavascript\nif(options.toSetCookie == true){\n    if (options.settings != undefined) {\n        // Settings must be in proper cookie format, IE: options.settings=\"path=/;secure=yes;expire=12345\"\n        var settings = options.settings;\n            if(options.expires != undefined) {\n                settings = settings + 'expires=' + (new Date (new Date ().getTime () + options.expires).toUTCString ()) + ';';\n            }\n    cookeHash = {'Set-Cookie': options.cookieKey + '=' + fingerprint + ';' + settings };\n    } else {\n        cookeHash = {'Set-Cookie': options.cookieKey + '=' + fingerprint };\n    }\n}\nConfig params:\njavascript\nfingerprintOptions    : {\n    cookieKey                : 'appHeroID',\n    toSetCookie             : true,\n    onlyStaticElements  : false,\n    expires     : 86400000,\n    settings                    : 'path=/;'\n}\n. api.redis.client.once('connect', function(err){ ... }\nisn't working neither. I think because the redis module is completly restarting. Every time I close the sockets, the event is catched and the code processed.\n. ",
    "nullivex": "I made a few fixed on the Wiki, let me know if you agree with them. If so Ill continue through where I saw a few other niggles.\n. Well I agree about the integration testing but I think it would be good to use something like supertest to mock the client and unit test actions. It would be good to have these tests within the project code so that the maintainer of the API does not need to interact with any clients to design the API. Should also allow more public API's to accept pull requests with with e2e tests for new features.\nTesting tasks would be a little more difficult depending on the scope of the task. Since most tasks would be sending emails / modifying a database / modifying or scanning files, etc. I've seen on grunt plugins they use fixtures and expected file results for the file system modification plugins. Database modifying tasks could be tested using like mockgoose.\nMainly before starting off trying to make the project test friendly I wanted to make sure I wasn't missing something or someone else's implementation with e2e testing. If this is something that could be added I can definitely allocate some time to it. I just think it would be nice to have some sort of testing coming with the generator to ensure better BDD/TDD on API's which I think is important.\n. On second thought supertest wouldnt be a good fit because it only tests the HTTP side and I believe that we can take a lot of the connection handling/management for granted upstream in the project code. So maybe it would be better to test against the action objects directly and skip the connection stack.\nOver the next few days I am going to setup a project and work on some testing Ill submit pull requests if I get something decent together.\n. I definitely agree with mocha for the framework but bringing your own assertion library probably wouldnt be a bad idea. I've used should on a few projects and keep ending up using chai which gives all 3 major assertion types (assert,expect,should) and also works fine in the browser which is nice for full stack testing.\nAnd yes thats more of what I was thinking and genericServer is perfect for this sort of testing. There is no need to worry about what kind of server brought the connection since we are just testing the action logic.\nWhen reading through the initial docs I thought the outputExample in action object was used for testing sort of like expected output type.\nIll let you know what I come up with and Ill see if I can implement what you are saying above. I assume it shouldnt be too much of a hassle.\n. Okay,\nI am down to actually writing a testing harness around actions (I havent worked on tasks yet)\nI added a test folder and then a test/mocks folder and I am creating a mock connection and API object there. Then from the test I am calling action.run and passing it the objects from test/mocks. I think this will work well and I think the best way to setup the testing would be to distribute these mocks as a separate package similar to like angular-mocks. Which will make the mock objects available.\nWhen I have my first test running Ill attach it to a gist and post it here.\n. Okay, I got this working here is a gist of my example.\nhttps://gist.github.com/nullivex/7817339\nNow I know my mocks are incomplete so thats where we would need to focus any energy. I think a separate package called actionhero-mocks could be installed via NPM and then the usage would look like this:\n``` js\nvar mocks = require('actionhero-mocks')\n//grab fresh mocks\nvar apiMock = mocks.api()\nvar connectionMock = mocks.connection()\nvar action = require('../actions/status.js') //assuming we're in test/test.js\n//actual test code\ndescribe('My Test',function(){\n  action.run(apiMock,connectionMock,function(connection){\n    it('should have a connection property',function(){\n      expect(connection.property).to.equal('foo')\n    })\n  })\n})\n```\n. If config is getting moved into a directory then we should be able to have a default or main config and then flavors that override the object.\nLike\n-- config\n--- default.js\n--- development.js\n--- production.js\nThen have the NODE_ENV point the specific config file. Sort of the best of both worlds. Also could do something like actionHero start --config=production\n. I was also going to ask if you had looked into using a package like https://github.com/mozilla/node-convict to setup the configuration.\n. convict is nice because it has some inline documentation does overrides nicely and have the ENV support for free. Also allows end users to make JSON config files to cut down on the amount of logic being using in the config. (And its JSONC which allows comments) but really could skip that part and just use JS config files. It handles all the merging as well.\n. Nice work!\nAnd ya its pretty simple overall so thats cool. Thanks for this!\n. Tasks Page: 35217d9c863f93ff583178ee2ae9772423b742fd\n. Servers Page: bd4d5467c84dbf45af95845f9657507b408515f2\n. Cache Page: 43f9f8781ef37504aa1d8db2e9caef24581b9bc1\n. Initializers Page: 67ae97ab8a11982a296cb52bbf2fb904bffff729\n. Stats Page: ce519115b1eb1658e74ff18bdfca83de498a9a09\n. Middleware Page: da4c19d62197e442f3b7b3c4fb37be11dc2bc863\n. actionCluster Page: 3d35ad9bb7aa686d7be26950e171a8b5cad88779\n. Exceptions Page: 29a9d9b4e868c9b1edc47d334c359e414f9bbe8c\n. Websocket Page: 2ea4ff94897bc1d96a25f17a7ff1d0844cdd1ab0 and a97dcfc346121deab3cf4515cffa4d1b6efee9f6\nMy commit message\nAdded some notation in the websocket section about why socket.io was removed in favor of Faye. I want to add some more verbiage about how to interact with Faye coming from a Socket.IO environment but I need to get more familiar with Faye first.\n. Production Notes: 796adc28465fcd606ffc8027d60f4fd6deddf141\n. Running actionHero: c3b318fa7fd81297e81c1ba0e8783f9a34dc0804 and e908185c228daeae4a3b4b38567fdb76cc609691\n. Im finished, thats everything I can find.\n. Well you could reword it. The only reason I added the note was because it confused me for a good long while until I dug up that pull request.\n. Ya I think it would follow something like the way that grunt plugins are loaded like.\njs\napi.loadNpmPlugin(\"actionHero-oauth2-provider\")\napi.loadPlugin(\"my-private-plugin\")\nThen we could have some sort of scaffold for plugins that the above method would scan and register the different parts of the plugin. That scaffold could then be added to the generator.\n. Okay,\nI just want to make sure connection.auth and connection.requireAuth do those properties already exist?\n. I can help with the docs if needed!\nOn Wed, Dec 4, 2013 at 6:49 PM, Evan Tahler notifications@github.comwrote:\n\nMerged #274 https://github.com/evantahler/actionHero/pull/274.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionHero/pull/274\n.\n\n\neSited LLC\n(701) 390-9638\n. Hey Guys,\nI have built several IP management systems before and was looking through the commit. Valid IPv6 notation comes in a lot of different formats and I dont know if the rules in your patch work quite right. However here are some of the rules.\n- The address must start with hex and end with hex and can use \"::\" in the middle to signal a string of zeros think of the following 2001::1 would be the equivalent of 2001:0000:0000:0000:0000:0000:0000:0001 which is how the IPv6 parsing code will treat it.\n- The address can start with all zeros this is done in the format you mentioned ::1 which is the real address of 0000:0000:0000:0000:0000:0000:0000:0001\n- However most real addresses look more like 2604:4480::5\nIts not a good ideal to try and parse them as a string like you are doing in the patch this is not going to be reliable and will require continual patching.\nFrom the Wikipedia documentation: http://en.wikipedia.org/wiki/IPv6_address\nIt should be using square bracket notation as noted here: http://tools.ietf.org/html/rfc5952#page-11\nI would remove this patch and parse the notations provided in the IETF document. Proxies need to fix their bugs of appending :num to the address without brackets.\nI took a look at this library: https://github.com/beaugunderson/javascript-ipv6 but it doesnt properly support this format by default. I filed an issue against it being supported here: https://github.com/beaugunderson/javascript-ipv6/issues/12\nParsing should be pretty simple without that library being patched though. I put together this example.\n``` js\nvar parseIPv6URI = function(addr){\n  var host = '::1'\n    , port = '80'\n    , regexp = new RegExp(/[([0-9a-f:]+)]:([0-9]{1,5})/)\n  //if we have brackets parse them and find a port\n  if(-1 < addr.indexOf('[') && -1 < addr.indexOf(']')){\n    var res = regexp.exec(addr)\n    if(null === res){\n      throw new Error('failed to parse address')\n    }\n    host = res[1]\n    port = res[2]\n  } else {\n    host = addr\n  }\n  return {host: host, port: parseInt(port,10)}\n}\n//address with port\nconsole.log(parseIPv6URI('[2604:4480::5]:80'))\n//address without port\nconsole.log(parseIPv6URI('2604:4480::5'))\n//full uri\nconsole.log(parseIPv6URI('http://[2604:4480::5]:80/foo/bar'))\n//failing address\nconsole.log(parseIPv6URI('[2604:4480:z:5]:80'))\n```\nHere is the output\n```\n{ host: '2604:4480::5', port: 80 }\n{ host: '2604:4480::5', port: 80 }\n{ host: '2604:4480::5', port: 80 }\nC:\\Users\\nulli_000\\WebstormProjects\\test\\test.js:9\n      throw new Error('failed to parse address')\n            ^\nError: failed to parse address\n```\n. I submitted a pull request on the other repo but I figured this might be useful code to this issue.\nhttps://github.com/beaugunderson/javascript-ipv6/pull/13\n. Well ipv6 doesnt have dots. So you could do an indexOf on it and check for a dot.\nIf there are no dots or colons then you should treat it as a long ipv4 eg: 199.87.232.5 in octet notation is really 3344427013 in long notation which is what you should default to since its not possible to transport IPv6 as an integer.\n. Awesome! Glad it was of some use.\n. The only thing I was going to note is that the function I submitted to the ipv6 library is a bit more complete than the one you implemented. Might be worth adding it as it passes more tests.\n. Awesome to see this get merged in I think these cleanups and standardizing will help a long way to getting more contributors and making it easier to contribute.\nI would also definitely check out WebStorm. I have used: vim, gvim, gedit, notepad++, eclipse, netbeans and so far webstorm has been the best experience I have had in terms of productivity and project visualization. It also works really well with github.\nIf you want some quick setup nodes check this out: https://gist.github.com/nullivex/7175567 I also have a custom built color file there that works well with all the node related languages.\n. Evan maybe you have some insight to why the Node 0.8 test is failing.\nCore: Exceptions\n    \u25e6 I can inject a bad task that breaks:   \u2713 I can inject a bad task that breaks \n    \u25e6 the bad action should fail gracefully: \n/home/travis/build/evantahler/actionHero/test/core_exceptions.js:39\n          thing // undefined\n          ^\nReferenceError: thing is not defined\n    at Object.apiObj.actions.actions.badAction.1.run (/home/travis/build/evantahler/actionHero/test/core_exceptions.js:39:11)\n    at api.actionProcessor.processAction (/home/travis/build/evantahler/actionHero/initializers/actionProcessor.js:203:37)\n    at api.actionProcessor.preProcessAction (/home/travis/build/evantahler/actionHero/initializers/actionProcessor.js:104:7)\n    at api.actionProcessor.processAction (/home/travis/build/evantahler/actionHero/initializers/actionProcessor.js:201:18)\n    at Domain.bind.b (domain.js:201:18)\n    at Domain.run (domain.js:141:23)\n    at api.actionProcessor.processAction (/home/travis/build/evantahler/actionHero/initializers/actionProcessor.js:199:24)\n    at process.startup.processNextTick.process._tickCallback (node.js:245:9)\nnpm ERR! weird error 1\nnpm ERR! not ok code 0\nObviously the exception is supposed to be thrown but it seems like its supposed to be caught I think. I dont really understand how anything I changed would affect this. It also passes in Node 0.10\n. Ya I looked into jake but I was thinking for the familiarity of contributors grunt is going to make it easier to people to contribute.\nIll look into the tasks that you have in the current jakefile and see what I can do.\nAs for the error I will look into getting it to catch that exception properly.\n. @evantahler There is a pretty good explanation of the exception issue here: https://github.com/pghalliday/grunt-mocha-test/blob/master/tasks/lib/MochaWrapper.js\nI am looking at coming up with a workaround and I also found the initial thread where you were working on this: https://github.com/visionmedia/mocha/issues/513\nSo I read your solution and am trying to piece together exactly how node 0.8 is causing this to be handled incorrectly and I know it has to do with: https://github.com/joyent/node/issues/4375\nWhats the projected EOL for 0.8 just out of curiosity?\n. Okay so correct me if I am wrong but this is how I think its failing.\nThe gruntWrapper is basically using your workaround that you put in place in the core_exceptions file. And since they removed the uncaughtException handling in Node 0.10, Node 0.8 is still using the uncaughtException handling which is why the Mocha wrapper is catching this in Node 0.8.\nNow with that said it doesnt really give me a clear idea on how to fix it. Except I think that if I were to remove your exception handling from the core_exceptions file it should just work.\n. Okay,\nI just wanted to see.\n. Okay cool! Thanks for helping me with this I was a little lost chasing things around!\nI am going to see if I can get my travis working and then I will work on porting whats in the Jakelib I might need a little help gluing it in properly.\n. It seems like there is still a bit of the gap I need to bridge here to get everything working properly.\nInstead of thrashing Travis and this PR with commits I am going to get a Node 0.8 test environment together that I can test with.\n. Yep! Im using nvmw now just getting setup.\n. Okay, I am having some local environment problems that I am attempting to squash but im going to try and get this fixed tonight!\n. @evantahler So now I just want to figure out what else should be done.\nOkay, I have read through the Jake file etc and I think Jake is the right tool what you are trying to accomplish. Grunt is more of a dev tool for release building and running tests etc and should remain on the dev dependencies.\nCurrently I have following implemented.\n- grunt test -- Runs tests with fakeredis for fork environments\n- grunt testProduction -- Runs tests against a live Redis server for E2E tests\n- grunt update -- Basically does npm install / update / prune\n- grunt jshint -- Lint the whole project\nThe items defined in Jake seem to me like they happen as part of the actual program.\n. Okay, I can implement the Jake actions in grunt and move it out of dev dependencies.\nI want to get mocha and should upgraded to the latest versions but I will work on that in a separate PR.\n. Okay I moved all the tasks from Jake into grunt and they all appear to be working. I misunderstood Jake a little bit now and I get it and see the similarities so you are definite right there.\nI guess grunt gives us the community plugin support which gives us a lot functionality to work with especially with more complicated builds / tasks.\nI guess the next part would be how this is handled down at the client level since there is a jakefile that gets generated in the client project.\nNote I have no idea why the Travis build failed, tests work fine locally for me. I didnt change anything that would break that particular seems like a botches Travis build to me.\n. Should be ready to go.\n. I think on the license submodule my git repo just got confused when I\nrebased from @spudz76 changes.\n~1.1.1 and 1.1.x are virtually the same thing except that ~1.1.1 denotes\nthat 1.1.0 might not work. It's more declarative to see which version was\nused at install time. This is also the same format that npm install\npackage --save uses.\nOn Tue, Dec 17, 2013 at 9:01 PM, Evan Tahler notifications@github.comwrote:\n\nnice work! A few minor notes:\n- you can remove jake ([ackage) the Jakefile.js and jakelib from the\n  project :D\n- guithub makes it a little hard to tell in the PR, but I think you\n  also removed the license submodule here\n- why did you change the package requires from \"1.x.x\" syntax to\n  \"~1.1.1\"? I'm generally assuming NPM authors follow the semver rules which\n  mean that a minor version bump shouldn't break anything. If that's true,\n  wouldn't we always want the latest compatible version (1.0.x?)?\n- looks like you left in a debugging console.loghttps://github.com/nullivex/actionHero/blob/ea72cfd33d9bc406761e7bef28cd1528b17adef3/initializers/actionProcessor.js#L193\nGood notes on the tests!\nOnce these are changed, I'll merge this in and update all the docs\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/evantahler/actionHero/pull/278#issuecomment-30814525\n.\n\n\neSited LLC\n(701) 390-9638\n. Okay, the removal of Jake is done I wanted to make sure this was reviewed before I removed it.\nI have no idea on the submodule for license my git might just be totally confused. If there is something I should run to link it up let me know. I've yet to really mess with submodules.\n~1.1.1 means >= 1.1.1 <= 1.2.0\n. Hmm,\nIt works if you use grunt enqueuePeriodicTask:<taskname>\nWhich I believe is the prescribed way to pass required arguments.\nI tested all the commands working in my instance using the above syntax.\nIt looks like you changed it to use grunt enqueuePeriodicTask --taskname foo. It doesnt matter to me whichever you are more comfortable with.\n. Look here: http://gruntjs.com/creating-tasks under the Basic Tasks section.\n. Looking good!\nYa I was curious about the part with the generator. I didnt really know how to attack it.\n. Thanks for the shout out and accepting the change!\nIm glad it was useful :+1: \n. I would say call it notEmpty rather varExists because technically null exists.\n. Isnt this basically a duplicate of #275 or am I missing something?\n. @evantahler Well I just wanted to make sure we were still talking about the same issue or how it differed thats all.\nHow much of the Teredo are we attempting to support is my question. If its full there is quite a lengthy amount of work involved as noted here: http://en.wikipedia.org/wiki/Teredo_tunneling\nI also think it would be a good idea for actionHero to look at a more full dual-stack approach when dealing with IP's.\n. Still kind of curious how they work fine on Node 0.8.x\nAs for Redis try this: https://github.com/MSOpenTech/redis under the bin folder there is a zip with the binaries. Works like a charm for me.\nThere are probably some backflips inside fakeRedis that are implemented in pure javascript in non *nix environments.\n\n. If I run grunt testProduction everything is fine on my box. However fakeRedis works fine on Node 0.8.x so I guess any issues would need to be filed upstream with them.\nClosing this.\n. ",
    "Spudz76": "This _is_ in batches, LOL.  I even backed up my \"real changes\" and then went through with a fine-toothed meld like 5 times cherry picking just the quotes, and then just the spelling, and then just the... etc.  If you'd like me to start over again, respectfully, no thanks.\nSo far there are no serious logic edits at all, and those that do exist are inline commented so you can check them out.  The ones where I wasn't 100% sure on the logic intent are tagged IMPORTANT...  Whitespace, commas, semicolons, making every if() while() and etc() the same format everywhere, consistency cleanup, and then the spelling patches are the only other changes in this PR up through the first four commits - the fifth one has the annotated code changes where anything major happened, which I believe also fix these invisible/future bugs.\nAlso, I quadruple checked, and I'm Aspergers+OCD so that's like a normal person checking ten times (proofreading is one of my innate skills, stuff just jumps out at me).  I work directly with @nullivex who has also been sending you PRs on the documentation, if that helps you trust my PR content more.  We're gearing up to use actionHero as a basis of almost every project we do from here on out, therefore all this cleanup so we can really trust it.  Some of the things I tagged as IMPORTANT are pretty serious bugs that wouldn't have been caught the normal ways, spell checker and the inspector really put a spotlight on them.\nThe XML are the inspection reports, not really code and not really IDE-specific.  It just doesn't export a singular text file or anything simpler... it does HTML but that's even messier and less diff-able to see progress.  And I added them to the project so that everyone can benefit from seeing the things it complains about, and maybe clean up a couple on their own.  Simply skip over them while scrolling the diffs, unless you specifically want to see the errors melt away.  I could also just drop them completely, but I was sort of using them (and the diffs on Github of them) myself, and I'm not sure how to blacklist a folder from PRs but not my commits.\nI have a continuing pile of \"patches that might break stuff\" that also fix deeper JSHint complaints but aren't related to spelling errors and etc, which are nowhere near this PR, and I think it's pretty easy to scroll through and skip the whitespace/quote changes, but then again I've been all over this code in a diff tool for two days, so...\nI am also not sure how to make multiple pull requests, if you even can, so as I commit the other batches (which I'd really prefer to be held for my next PR) they are piling in here.  Really this was only for the first four, which should apply so cleanly you won't even notice.  Also if it fails tests then you know I broke something (that's what tests are for?  If there aren't enough tests to prove no ill effects, then there aren't enough tests yet - and several of the patches are _in_ the tests).  If you personally peruse every line of every patch I'm going to submit during this consistency cleanup, we are all going to be here for eons. :)  I've split it up into \"safe to not even read\" commits and then the fifth one \"needs some light checking where I pointed\" but it's otherwise straggling fixes that would have belonged in the first four.\nThe serious changes in my pipeline will be in smaller, atomic, commits.  This one is just insane due to the severe inconsistency... whitespaces hanging out off the end of lines, extra commas at the end of literal arrays/objects, extra semicolons where they certainly aren't needed... we're fully anti-semicolon... be glad we're leaving _any_ of them! :)\n. One of the upcoming commits will flip every if() backwards like all the cool kids do, and it's more readable that way and some argue having the literal first is faster and more optimal somehow.  Also changing every double-equals to triples, as those are safer and will not execute magical type conversions to try and make a match.\nif(someVar == null) \nbecomes\nif(null === someVar)\nIt does feel a little backwards (Yoda-speak), but I think the readability goes up a bunch since in long if-chains it looks a bit more like a switch/case with very easily picked out values first and the var being tested second.  Also it's one of the main style complaints JSHint offers.  Once you get used to it that way, the other \"normal\" way will be almost as unreadable to you as they are to us.\nThen the remaining patches are for more minor JSHint complaints like using snake_case instead of camelCase on various things, unnecessary variable usage, scoping issues, etc.\n. Yeah Chrome on my workstation sort of chokes for a hitch while loading them up.  They would be shorter, if you had less things wrong! :P\nBut yeah the XML is a bit bloaty and was mostly just so you could also see the cruft melt away, granted it's not as exciting as it is in the IDE itself, probably could have just taken a screenshot each time and just made an animated gif.\n. Also I forgot to drop all the XML before regenerating the next inpection, which inspected the XML results of the previous inspection (spelling errors found in the XML complaining about spelling errors in the code, etc).  Sort of a hall of mirrors problem.  I could reroll this set without the XML (or put the XML in some other repo) on second thought.\n. Travis-CI seems to think I broke stuff in that 5th commit.  I didn't realize Travis-CI also tests PRs, awesome.  I'm going to commit a patch for whatever it is complaining about.\n. And speaking of strict mode, that is coming in one of these commits as well, global 'use strict';...\n. AHA! see I knew it was something simple.  I really never used branching but I guess things like this are exactly what it's for.  I already have 900 branches going on in my head 24/7 (non-optional) so having multiple branches in git always seems unwieldy versus the gains it offers.\n. I will commit the fixes that cause this to pass again, and branch/PR on the next stuff.  Thanks!\n. Not sure about the license/licence submodule problem, maybe you know what to do?\n. Not sure why line-endings went weird on a couple of the files...\n. There we go, more accurate change counts, this is ready to merge now.\n. this somewhat explains the position of never using the coercing != and == which is basically so that bugs have nowhere to hide.  I would motion to add something like:\njavascript\nutils.varExists = function(x){ return ('undefined' !== typeof x && null !== x) }\nand then I'll run through and convert every null === ... check to use the [api|binary].utils.varExists() shortcut, which is even more readable as a bonus, and not much more typing.\nIt's all about safety and it is better to know every one of them should be exactly equal and not \"fuzzy equal\", or unexpected things can happen.\n. Not really, I was side tracked trying to get tests working in my local environment, and then away from programming for a few days.\n. Agreed, logic needs to flip for it to work the same.  \"Known knowns\" are always better than \"iffy if's\" so I unrolled a few of them like this one.\nActually a side-effect of cherrypicking, in my final fully changed version this bug doesn't exist (the if is also flipped around, so I missed the subtle logic inversion while ignoring the flipped order)\n. Also having a var X within an if block like that in strict mode is evil and can cause odd scope problems, so my way moves the declaration outside (higher) and drops the individual var declarations below.\n. Figures I'd miss one.  Also blaming this on the cherry pick, it's correct in my \"do every change at once\" repo.\n. missed this one in the \"extra commas eradication\"\n. this is a good example of readability improvement\n. rolled this up, missed the other one above (will get next time)\n. Inlined logic to eliminate temporary var\n. simplified and inlined resp logic\n. explicitly set cacheObj to null on exception\n. Added these to catch crashes when load_resp does not return (failed timeout)\n. IMPORTANT pretty sure this is a bug, patch forthcoming in separate PR\n. missed this one in the first normalization\n. ",
    "coderReview": "I am trying to save database connection instances for an action. If there is an error during action processing I could rollback. Using the connection object could be better ?\nThe main issue is to run the same action in different connections. The attached variables of the first action being processed will be overwritten by the last one because we are using the same actionTemplate.\nthanks\n. Hi, using the connection object worked fine. No need for changing the actionTemplate. Closing pull request.\nThank you for your help.\n. ",
    "TJKoury": "Evan,\nThanks for the quick response.  I just fixed those three issues, sorry about that.  I'm having issues running the test suite locally, and I'm working across three different machines/OSes (no excuse, though, I know).\nAs far as the domain issue, I wanted to start with static assets specifically so as not to confuse newcomers; if you start it the way it is right now with no additional domains, then everything acts very predictably, and it's a fairly straightforward mapping from domain to public/subfolder.\nThe API domain issue is a bit different; should actions be namespaced?  Will there then be a common namespace for shared actions, or no namespace at all?  What if you want to share multiple actions among multiple exclusive domains?  How do you deal with multi-transport authentication?  I'm still working on these issues, hopefully will have an answer soon.\nI won't take it amiss if you don't accept this PR right away, just wanted to get the conversation going.  I'm building a webapp right now that is using this as it's foundation, so I'll be adding features as I need them.  Thanks for getting this ball rolling, AH has replaced my own internal framework that did something similar.\nEDIT:  Ok, I officially can't figure out how to get the test suite to run correctly, keep getting errors about fakeredis not existing.  Can you point me towards the documentation?  I couldn't find any on the wiki.  \nEDIT2: It's a Windows thing, switching to my nix box....\nEDIT3: Finally.\n. Evan,\nAgree with the comments about reading the 'req' object, after looking at the code a little more I can see that you're not coercing all the connection metadata on the rawConnection object for each server.  I'm going to take a long hard look at glomming 'domain' onto the connection object, that does seem like the way to go.\nDue to the recent changes in the clustering algorithm included in Node 0.12, I'm more inclined to forgo other upstream solutions like HAProxy and Nginx (parts of which, like http_parser.c, are already in Node) to maximize OS compatibility for operational implementation and minimize configuration creep.  \nI've run into this already in a small way trying to deploy actionHero using pm2, since pm2 has it's own support for clustering and cluster monitoring as well.\nI do have reservations about using regexp for performance reasons.  Doing object key lookup is much faster than doing a regexp, though as I'm sure you realize this means that every domain/subdomain (including www) will have to be explicitly stated.  This could be handled through a generator (or maybe even a GUI), but the payoff is not having to regexp for each request, which adds up quickly.  I haven't backed this up with any actual tests on this codebase, let me know if you disagree.\n-TJ\n. Mac,\nThat looks like a great solution from a configuration/separation of concerns standpoint, but what about non-web clients?  From what I can tell (I'm still fairly new to this codebase) that 'routes' file is for the web server.  Do you think that this should be expanded?\n-TJ\n. Sorry I didn't follow up with this; turns out the most sane answer is to let each individual server deal with domains by parsing request metadata, since certain servers (like socket servers) don't have domain info readily available as part of the raw request.  In my case I only need domains for web servers, so I just created a 'multidomain webserver' and fired it up. \n. After experimenting I think just combining common loaders is the way to go, since there isn't enough similarity between all of the initializers to support a common prototype.\nThat link you sent actually takes care of most of my question.  I'll try to finish up the common loader and send a PR.\n. This is the conclusion of a previous issue.  I think this cleans up the implementation and helps developers write new initializers without having to copy/paste synchronous code (like the dir/file loaders), which could lead to expensive mistakes.\n. I will keep working on this, thanks for the quick feedback!  A few notes:\n- Making the common loader a prototype becomes a bit dicey because it uses methods on the global 'api' object, and everything that inherits from it uses a visitor pattern as you pass in 'api'.  That means that changes on the 'api' object will be reflected in load order on downstream prototypes, which means that you'll have to anticipate load order or method calls become non-deterministic (though I guess you do that already when you load the initializers in order).   Since you mention that you want to use a common loader to load initializers as well, should I also add properties/methods to enable ordered loading?   I'll revisit this and see what I can do to clean it up.\n- I can easily modify the initializer to detect multiple paths and load them all, but there shouldn't be two 'actions' initializers, or multiple initializers for any module type.  If I misunderstood your meaning please let me know.\n- Now that I know that I'm on the right track, I absolutely will roll in the other 'loader' initializers.  Which brings up the question of differentiating between initializers that create prototypes (like genericServer), initializers that create global functionality (resque,faye), and initializers that create persistent business entities (chatRoom), and others I haven't really classified yet.  Any ideas?\n. Here's a further clarification after a bit more hacking:\nCore \n->(1->Many) Initializer\n -->(1->Many) Module \n -->(1->Many) Utility\n -->(1->Many) Singletons\n -->(1->Many) Factory\n ...\nTo do dependency management, I'm planning on executing a regex on each initializer source looking for /([\\W]api|^api).[\\w]*/g, then do a transitive reduction algo to figure out what initializers need to be loaded in what order.  The only reason to do this instead of using AMD or commonjs modules is allowing things to be run in conditional series with branching (evaluation before calling 'next()').\n. Understood.  I'll finish up the conversions for the current initializers that load modules from folders,  then take it from there.\n. I'm still working on it, trying to fit the paradigm to everything that gets loaded from a folder, including initializers themselves.  \nI can't find anywhere in the 'async' documentation where '_complete' is a special key for execution after an ordered hash, is this something that you added or is my search-fu weak?\n. Ok, where is that in the code?\n. ...got it.  The underscore threw me.  Convention over code, as they say.  The issue is making sure that all the required references exist before execution; that function is declared as a stand-alone while everything else in that hash is loaded from a file, so they have to be handled differently.\n. I think I'm getting close, the last one that needs to be rolled in is the servers loader but that has so many specialized pieces (and tie-ins to the core actionhero logic) I'm wondering if it's better to just leave it alone for now.  \nThe common_loader prototype exists in actionhero.js which allows the down-chain objects to:\n-Load from directories using the 'loadDirectory' method, which accepts folders as well as ordered file lists (for when ordered loading is necessary)\n-Specify file load behavior using the 'fileHandler' method\n-Specify custom error handling using the 'exceptionManager' method\n-Specify a 'watchFileAndActCallback' method to override/augment the watchFileAndAct default functionality\n-Validate modules loaded using custom logic, as well as a validator short-hand\nThis implementation adds about 100 lines to actionhero.js, and allows creation of a new module-type loader requiring only a path, a fileHandler function, and an exceptionManager function.  I'm going to use this to create a new type of module in the near future as an example (data provider).\nLet me know if you think this is ready to merge, or if there is more work that needs to be done.\nEDIT: I found a fairly significant bug, give me a few days to fix/test.\nEDIT 2: Nevermind, fixed it.\n. I like the path idea.  Thanks for taking the time to do such an extensive write up, I'm waiting to make any other changes until you get a chance to look at my follow-up comments.\n. I've noticed that even though the '_start' method is called on all objects attached to the core 'api' object (if it exists), some initializers don't follow this convention, and are in fact started at load time.  I've playing with the idea of, for example, putting a _start method in 'actions' that will call the 'initialize' function and then 'next()', just so the order of execution for all of these initializers is predictable and well-defined.  What do you think?\n. Is there anything else you'd like to see on this concept before making a decision whether to merge?  I'm going to do a merge from the last two weeks into my codebase for my own project, but if there is an issue here that is stopping this pull request from being excepted please let me know so I can fix it.\n. I'm going to close this and open a new one when I'm done merging the changes.\n. I think this is a great idea!\nI think having a /config folder that comes along with the plugin is the way to go.  You don't want the user to be responsible for setting sane defaults in the confg.js for each plugin, that should be up to the developer, and should be ready to go on install.\n. Unfortunately, this is required due to a lack of an 'api.log' method that is needed for all 'common loaders', including those loaded before the logger is loaded.\n. This is one of those things that I think gets more complicated the more you try to simplify it.  In this case, if you moved line 53 to it's own file, you've now created a whole layer of complexity for one line.  If you try to move anything else, you now have to pass in the 'api' object, and worry about all the scoping that is done in this file.  I'll keep looking at it (since it's bothered me too), but I don't see a simple way to fix it.\n. Will do.\n. It is called on Line 74, and it's functionality that is expressed in most of the use cases (deleting the require cache, etc).  It's the default unless it's overridden.\n. Ha!  Thanks, I didn't even noticed I did this until you pointed it out, it's become a 'Nodeism' for me.\n. Everyone that did validation before (in this case, both actions and tasks), even if they have additional logic.  You'll notice that the looping over the 'map' argument took the place of the if(typeof.... logic, which was used in checking property types for modules.  I want to move this somewhere else (maybe a utility?) and perhaps use a well-known library like validator.\n. Sounds good.\n. I combined the two implementations you had previously; the 'prepArray' loads all the internal initializers first by creating those loader functions (line 173), then adds a loader function at the index '_projectInitializers' which loads the project initalizers, which gets called in order (this was the source of my previous question on async execution order).  So it has to be an 'or', since if the user does not define a custom initializer path in the config, it should default to the root 'initializer' directory, as it does in the previous version.\n. ",
    "enginespot": "Great , It works!!!\nThanks!!!!!!\n. hmm... I know how to remove file , but currently I want delete file once file downloaded from client side\nlike\njavascript\nconnection.sendFile('data.zip',function(error, result)\n{\n    //remove file logic\n});\n. for example , the root url like http://localhost:8080, open it within browser , error will occur\n. if I change \"rootEndpointType\" to \"file\", the 404 error will not occur, so I think it is not a better way to throw 404 error when the \"rootEndpointType\" is \"api\"\n. hmm... for my team , the url like \"api.bda.tst\" ,for the old actionhero , for the root , it is a big json api, which make sense\n. hmm... sorry, it does not work well with the above method.\n. ```\nvar HeaderFix;\nHeaderFix = (function() {\n  function HeaderFix(api) {\n    var EmptyFunc, orignalEvent;\n    this.api = api;\n    EmptyFunc = function(connection, actionTemplate, next) {\n      next(connection, true);\n    };\n    api.actions.addPreProcessor(EmptyFunc);\n    orignalEvent = api.servers.servers.web._events['connection'];\n    api.servers.servers.web._events['connection'] = function(connection) {\n      if (connection.rawConnection.req.headers[\"content-type\"] === void 0) {\n        connection.rawConnection.req.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n      }\n      orignalEvent(connection);\n    };\n  }\n  return HeaderFix;\n})();\nexports.headerFix = function(api, next) {\n  api.headerFix = new HeaderFix(api);\n  next();\n};\n```\ncurrently we add the above code fix the bug , hope that in future we can find a good solution.\nThanks.\n. yes , it is the problem , since that there is no content-type header when use xdomainrequest\ncurrently our team add a fix by the way\nif (connection.rawConnection.req.headers[\"content-type\"] === void 0) {\n        connection.rawConnection.req.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n}\n. I read the web.js ,and maybe I find a better solution ,\nadd process request event to server , then for clientside , we can custom it , if you think so , I will try to pull a request .\nvar http = require('http');\n      server.server = http.createServer(function(req, res){\n        server.emit('preProcessRequest', res);\n        handleRequest(req, res);\n        server.emit('postProcessRequest', res);\n      });\n. it is not create new HTTP server , it is exist in web.js file\nhttps://github.com/evantahler/actionhero/blob/master/servers/web.js#L41\nwhat I do is only add \nserver.emit('preProcessRequest', res);\nserver.emit('postProcessRequest', res);\nthen maybe actionhero can public handleRequest to user\n. I find what's wrong with my code \nit is a file server , code like:\napi.staticFile.path = function(connection){\n  if(connection.action == 'sendFile'){\n    return '/tmp/uploads';\n  }else{\n    return api.config.general.paths.public[0];\n  }\n}\nif user send a request like \nhttp://api.web.com/abc.png and for the file exist in the directory '/tmp/uploads' , it will get response \nbut if user send a request like\nhttp://api.web.com/asdfghjk.png , but for the file does not exist , the follow code will run\nconnection.rawConnection.responseHttpCode = 404; \nconnection.sendFile('404.html');\nnext(connection, false);\nbut , the problem is that for 404.html , it does not exist in the /tmp/uploads , so the above code called again and again.\nthen cpu up to 100%\nby now , I put 404.html to /tmp/uploads , and it works.\n. Hmm...\nI think the default workflow like the follows:\nfor server side , if we want to return 404 , we can call a default function (action) , and for the default function we can also custom it .\nbtw , currently our team use actionhero 9.4.1 , since that the logic of \"action\" has some difference with version 10 , and also for our team , we use coffeescript (compile it to js auto) as our main nodejs language , so by now , we did not upgrade it \n. ",
    "maxogden": "sorry about that, didn't realize the dependency here was \"\", it should be updated to the version known to work w/ faye (~1.2.1)\nhttps://github.com/faye/faye/blob/master/package.json#L13\n. ",
    "slattery": "nice!\n. Just so folks are aware: if you clone the current repo, and then use actionhero generate, you need to edit the package.json before trying npm install in your new directory, at least until there is an 8.1.0 in the npm registry.\n-     \"actionhero\": \"8.1.0\",\n+     \"actionhero\": \"evantahler/actionhero\",\n. Evan, you have put a lot of thought into this.   I have a naive question about this.  What necessitates stickiness?     Does the whole sticky business boil down to the fact the handshakes from different workers of the node cluster or different servers would issue incompatible session ids?    If a person uses redis clustering behind a node cluster or group of servers, couldn't the ids be issued and stored in redis and ask each node to access the session ids?    I suspect it can't be that easy...\n. Wow, this is a big deal!    Will you be publishing a design doc on this?   So many possibilities!  \nOn Jun 12, 2014, at 10:18 PM, Evan Tahler notifications@github.com wrote:\n\nA side effect of these experiments showed that using faye for internal cluster-cluster communication was lossy (and slower) when compared to simple redis pub-sub. I'll be making this switch as well. I've renamed this issue \"leave Faye\". I'll open the PR for Primus shortly.\n. Oh, I wasn't worried!   I'm just excited about the streams/pipes, multiplexing/channels and other nicenesses.  Cheers!\n. So there are two things happening?\n1. use a separated plugin configs file as a peer like redis, etc.   --NICE \n2. try to use package.json to build that file on actionhero generate \n\nI'll contribute something more to this discussion soon, but for now:\nThe separate plugin config file (1) is a great idea.   I'm assuming that will support NODE_ENV sections (development, etc) and overriding default vals like the other config files do.\nIs (2) optional depending on that packageJSONDependencyNameRegexForPlugins var?   \nThe routines being added to generate now (2) will build the default plugin array.   That's good.   I think we might ask more of the package.json file for more involved project generation scenarios too.  ( I use the config section now to help me determine if I'm building a development env or a production env, so I can pre-clone and npm link for dev, or do the standard npm fetch-package-untar for production. )\nWe might support something like this:\njs\n\"config\" : {\n  \"ah-plugins\" : {\n    \"general\" : { \"mode\" : \"regex\", \"regex\" : '/^ah-[a-z\\-]+-plugin$/g' },  \n    \"development\" : { \"mode\" : \"regex\", \"regex\" : '/^ah-[a-z\\-]+-dev-plugin$/g' },  \n    \"foobar\" : { \"mode\" : \"array\", \"array\" : ['ah-public-git-plugin','ah-public-npm-plugin'],     \n    \"production\" : { \"mode\" : \"priority\", \"list\" : [\n            { \n                \"name\" : \"ah-private-git-plugin\",\n                \"priority\" : \"1\"\n            },\n            { \n                \"name\" : \"ah-public-git-plugin\",\n                \"priority\" : \"100\"\n            },\n            { \n                \"name\" : \"ah-public-npm-plugin\",\n                \"priority\" : \"10\"\n            }           \n        ]}\n    },\n\"dependencies\" : {\n    \"actionhero\"            : \"9.4.1\",\n    \"ws\"                    : \"latest\",\n    \"grunt\"                 : \"latest\",\n    \"ah-private-git-plugin\" : \"git+ssh://longgiturl.git\",\n    \"ah-public-git-plugin\" : \"gituser/ah-public-git-plugin\",\n    \"ah-public-npm-plugin\" : \"ah-public-npm-plugin\",\n},\nPlugin load order can be important.  When we go from a hash in package.json to an array in AH, the order must be controlled or relinquished by the user/generator-er.   That could happen at generate-time or run-time.\n1. we could allow for a priority field like AH does for middleware.  We could read each plugins' package.json for a config.ah.priority value as we build the plugin config array on generate.\n2. we could just allow that the config section of package.json to hold arrays so the order is there.\nI hadn't thought about using the generator for anything past a clean skeleton, this is a nice entry into the possibility of using generator for more than that.     I've got to put my thinking cap on relative to what parts of project deployment happen with \n- pre-generation prep\n- generation logic\n- npm/grunt scripts during npm lifecycle events\n- AH start-time events\n- independent npm/grunt scripts\nI'd be very happy to contribute something to enable what I'm talking about, answer questions, etc.\n. That sounds good!\nThanks for diving into this part of the system, Neil.\n\nOn Dec 24, 2014, at 3:43 PM, Neil Craig notifications@github.com wrote:\nHi guys\n@evantahler https://github.com/evantahler - Yep, sorry, it was a bit of a lazy PR. I'll get it properly sorted and passing tests.\n@slattery https://github.com/slattery - WRT to your points:\nYes, that's done (though i need to fix the test failure(s))\nWhat I went for initially was an additional argument (--plugins) on generate which is a comma-separated list of plugins to add to the plugins array. I did this because it was simpler but I could perhaps augment it with an variant which would read plugin names matching the config file regex from either the package.json dependencies and/or, as you suggest, some other object/array.\nI'd suggest I fix the failed tests and then we modify from there - does that sound reasonable?\nCheers\nNeil\n\u2014\nReply to this email directly or view it on GitHub https://github.com/evantahler/actionhero/pull/523#issuecomment-68073530.\n. @jackbit are you looking at a public/index.html from a clean `actionhero generate/npm install/actionhero start'?    (this may deserve its own issue, or check out the email list/gitter chat)\n. I also need more info!    Are you unhappy with the vocab/terms or the functionality?    I thought _original's purpose was to help as we cascade over preProcessors, etc?\n\nI have often found myself mining/comparing raw and _original with the higher level connection.   I agree it is hard to track persistent stuff, and the vocab can be slippery, so I somethings hang my own objs on connection.   IIRC autosession does this too.    For SCIENCE I plugged in passport.js and needed to access/pass req and res from raw and found that all made perfect sense, not that raw is under scrutiny...\nI have thought it very clever to leave everything nuts-and-bolts in raw and _original.   Most useful is fingerprint for ex: it has been great tying in the first vanilla HTTP and XHR requests with WS messaging.\nSo I'm hungry for more discussion about this, to see how it could be made better in your opinion.\n. Just a drive-by, sorry, but the elevenses sync (AH<->node/io) makes sense to me!\n. @omichowdhury , good point.  It is instructive and correct to highlight semver use/disuse there.      \nI\u2019ll rephrase and say that \n1. the changes proposed here are probably considered semver Major, and therefore anyone having to support io and node10 will have a clear direction in terms of their own installs.\n2. The poetry with 11:11 there was too good to pass up, so cheers to both @crrobinson14 and yourself...\n\nOn Feb 23, 2015, at 10:03 AM, omichowdhury notifications@github.com wrote:\n@slattery io.js is actually at 1.3.0 now because it uses semver and node.js does not. I see no reason to tie AH's versioning to anything other than its own changes since it also uses semver (correct me if I'm wrong @evantahler). Cookie to the first project that gets to 100.x\n\u2014\nReply to this email directly or view it on GitHub.\n. Hmmm, the README.md needs work too, new PR incoming, sorry about the gh-pages mixup last time...\n. Nice!  I have a plugin that could use a catchall, for two reasons. \n\nI set up a quick testing plugin that would take any action request that had a production plugin's action name and return test content instead.   \nThe test plugin would either return test data when the test plugin had a corresponding action in its own actions folder,  or return the output_sample from the production plugin's action if the name matched a production action but had no corresponding test action of its own.   \nWithout a catchall, how would we account for changes in the production action array, and catch all the production actions that had no test counterpart? \nWithout a catch-all, I run an initializer every start.   For each production action that had no corresponding action in the test plugin, I generate a test action that returns the production twin's output_sample.   \nTo allow API consumers to address the test actions with a single consistent switch, I register the test actions with the same name as production and set the API version to zero.    This way each call just needs to add the API version in all requests to get test content.\nHaving a catchall route near the root for the test plugin might be better or more polite than using API versioning there.   As a bonus I could pair a test action with a production action on the fly if none is found in the actions folder.\nSo thanks!!!\n. Do you mean match for ah-{pluginname}-plugin in node_modules?  That would be nice.\n. Thanks Evan and everyone for having this conversation.   Plugins are very valuable!   They shape the way I approach dev and deployment.  Even if you remove chat and tasks - plugins and the way AH homogenizes different connection types makes AH super super helpful.\nOn this immediate topic of discovery, there is the naming convention for starters and I would think that has to remain the first condition in any search. \nRegarding subdirs, with content plugins and some others I have no actions folder.  Some only need initializers to provide middleware or to log and display which git branch is loading for plugins in development.\nTo step back a sec, there are two features (intentional or not) I wanted to highlight.   I would need to preserve or workaround them in an auto-reg system.  They are ability to ignore plugins on the file system and the ability to direct load order.\nI like having the ability to load a subset of plugins if I ship a number of plugins in an archive or VM etc.  So that might mean a convention in each plugin's config like an 'enable' field?\nI have plugins that simply exist to deliver content, and I use the load order to overlap and serve the 'last entity in the stack' when naming files in the public folders.\nCheers everyone,\nMike\n. ",
    "yshaul": "I thought I was. I'll check in the morning.\nSent from my iPad\n\nOn Jan 13, 2014, at 8:23 PM, Evan Tahler notifications@github.com wrote:\nCan you be sure that you are running of the latest version of actionHero? That bug was present earlier, but should be fixed in v7.4.1 (7.4.2 is current)\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "omichowdhury": "New commit is up, can you update the wiki with something like:\nmarkdown\n* `actions.inputs.required` and `actions.inputs.optional` are used for both documentation and for building the whitelist of allowed parameters the API will accept.  Client params not included in these lists will be ignored for security. If you wish to disable the whitelisting you can use the flag at `api.config.general.disableParamScrubbing`. This is for situations when you want to validate input using [Middleware](https://github.com/evantahler/actionHero/wiki/middleware).\n. I'd also consider removing the disableParamScrubbing option I added a while back to simplify the codebase. This would mean that you can either live in the whitelisted world of connection.params or access this new variable if you don't want scrubbing. \nAlthough disableParamScrubbing is possibly an orthogonal feature as it handles things like GET parameters too.\n. Yup good point. I've left the IncomingForm alone as well and added connection.rawConnection.params which has unfiltered access to body, query and file parameters.\n. @evantahler \n. Test suite locally runs with 202 passing, 1 pending\n. @evantahler \n. Our staging/production env runs on AWS Elastic Beanstalk's node.js, which currently has support for the following versions:\n[0.8.26, 0.8.28, 0.10.21, 0.10.26, 0.10.31]\nIt's a real bummer that Amazon have not updated node support since August but hopefully they'll get a move on now that a new major stable version is out. We'll see and we may end up kicking EBS to the kerb if this doesn't improve.\n. @slattery io.js is actually at 1.3.0 now because it uses semver and node.js does not. I see no reason to tie AH's versioning to anything other than its own changes since it also uses semver (correct me if I'm wrong @evantahler). Cookie to the first project that gets to 100.x \n. I propose a haiku as our versioning system.\nFirst line changed? Major.\nSecond? Minor, new features!\nThird? Chill, just a patch.\nYou'll know what changed by reading the new version. Now that's semantic versioning.\n. Amazon released 0.12 support on Elastic Beanstalk last week.\nSo any reasons left to stick with 0.10.x?\n. Well this post by Eran Hammer advocates sticking with 0.10:\nhttp://hueniverse.com/2015/03/02/the-node-version-dilemma/\n. \nI have no idea what's happening in this PR\n. ",
    "joseym": "Ok\n\nI'm not seeing it within connection.rawConnection.req.headers ...\n\nMy client is sending the Authorization header, but that doesn't appear in the above.\n. Ah, I was expected case sensitive Authorization. \nWhen I changed to authorization it worked correctly, thought still wasn't returned in the object of all headers.\n. It's not really an issue, just seems like unnecessary weight to start a new project with all of the demo scripts.\nLighter is better. Perhaps an option to generate demo for onboarding users?\n. no, thank you!\n. I dont think I asked my question correctly ...\nI test requests to my api with Postman.\nPostman builds the request with key and value inputs.\nThe classic way to pass nested params in a post would be something like this:\nhtml\n<input name=\"contact[name]\" type=\"text\" placeholder=\"Your Name\" />\n<input name=\"contact[address][line_one]\" type=\"text\" placeholder=\"Your Street\" />\n<input name=\"contact[address][line_two]\" type=\"text\" placeholder=\"Your Suite, optional\" />\nSo my question is really this:\n\nHow do I set up my action to accept nested params? Will actionhero parse the params into a nested object to be worked with, or do I need to manually parse the incoming data into the format necessary myself?\n. Ok, thanks!\n\nSo basically I can create a preProcessor that \"catches\" the params and creates the nesting myself, which is then passed to the action as the format I defined in the middleware?\nGood enough for me.\n. That looks to be it exactly.\n. Like I said, this was all me - I'm just looking for a way to make it go away.\nIn the past I accidentally overrode some AH global method and after removing my code the bug caused by the override remained. To fix that instance I had to delete whatever key it was I accidentally modified and upon restarting it rebuilt and all was well. \nI've looked for any hanging logs, there are none, but I did log connections when working on the transport those months ago.\n. :+1: \n. ",
    "passion4code": "Hey guys, \nI was recently working on this problem and just published a few files in a public gist.. Basically there's an initializer which adds a preprocessor. The preprocessor is then responsible for checking the headers and configured allowed domains, then setting the appropriate Access-Control-Allow-Origin header. The code in the gist does not set the Access-Control-Allow-Methods header.\nhttps://gist.github.com/passion4code/cf83fb25f64f5cb636a7\n. Hey guys,\nI'm just gonna +1 in here. We recently upgraded an app from Actionhero 7.6.5 to 8.0.1 (I think it was 8.0.7 at the time) and had to immediately roll back due to scale issues. \nOur problem could have been related to certain bits of logic that had been changed to accommodate for the new version, but we made an assumption that there were underlying issues with the newer version of Actionhero and rolled back, and haven't had issues since. \nCurrently running 2 AWS m1.large boxes with 2 actionhero processes each, serving about 100-200 requests per second, and an average of 11-15ms response time. \n. ",
    "groupsky": "In case someone else needs this functionality, I made a plugin that enables configuring a list of allowed origins that are supported by the server.. ",
    "bitbay": "Even nicer solution!\nCheers.\n. ",
    "snyx1": "I'm sorry due to my inexperience with http i was thinking that the length was wrong. The issue i have lies with both actionhero and the Ion library. \nactionhero sends both headers. Content-Length and Transfer-Encoding: chunked wich it must not do according to http://greenbytes.de/tech/webdav/rfc2616.html#rfc.section.4.4\nMessages must not include both a Content-Length header field and a non-identity transfer-coding.\nmy problem is now that Ion doesn't ignore the Content-Length header if Transfer-Encoding is set to chunked wich it should.\nIf the message does include a non-identity transfer-coding, the Content-Length must be ignored.\nif both headers are set Ion parses the body including the length of the chunk and missing part of the actual body. e.g:\n3a3\n{\n  \"id\": \"10.112.39.66\",\n  \"uptime\": 22909168,\n  \"stats\": {\n    \"actionhero:stats\": {\n      \"actions:actionsCurrentlyProcessing\": \"0\",\n      \"actions:actionsNotFound\": \"4\",\n      \"actions:processedActions:cacheTest\": \"2\",\n      \"actions:processedActions:roomManager\": \"1\",\n      \"actions:processedActions:status\": \"12\",\n      \"actions:totalProcessedActions\": \"15\",\n      \"chatRoom:messagesReceived\": \"2\",\n      \"chatRoom:messagesSent\": \"2\",\n      \"chatRoom:messagesSent:defaultRoom\": \"2\",\n      \"chatRoom:roomMembers:defaultRoom\": \"0\",\n      \"connections:activeConnections:web\": \"0\",\n      \"connections:activeConnections:websocket\": \"0\",\n      \"connections:connections:web\": \"47\",\n      \"connections:connections:websocket\": \"2\",\n      \"connections:totalActiveConnections\": \"0\",\n      \"connections:totalConnections\": \"49\",\n      \"staticFiles:failedFileRequests\": \"4\",\n      \"staticFiles:filesSent\": \"24\"\n    }\n  },\n  \"queues\":\ninstead of the complete message.\nmay be a check for Transfer-Encoding and deletion of the Content-Length header inside cleanHeaders should do the trick?\n. That solution works for me but i'm not quite sure about the usefulness of chunked encoding for every flat file that actionhero delivers. \nFrom what i've read the last couple of days i understand that its use case is to send the header of a page to the browser so it can start fetching assets while the webserver is generating dynamic content. This comes with the cost of the browser not knowing how big the complete file is so the display of remaining download time is impossible.\nResources: \nhttp://en.wikipedia.org/wiki/Chunked_transfer_encoding\nhttp://stackoverflow.com/questions/3304126/chunked-encoding-and-content-length-header\nhttp://stackoverflow.com/questions/2419281/content-length-header-versus-chunked-encoding\nimo chunked is to much of a special use case to have it as default parameter but i'm a noob so you should get more opinions on that :)\n. Sorry the code above was not well written readability wise. But that was not the issue.\nI discovered that if i disable the useGloabal option the repl works with the couchbase module.\n. I'm running node v.0.10.28. So far I havn't encountered any other bugs in my app while using the repl.\nIf I can spare some time I'll try to set up a repl with couchbase and open an issue over there since this doesn't seem to be an actionhero issue.\n. I'm not sure why Travis is failing. The first build went fine. Then i decided to rebase to keep the commit log clean and now it's failing with the same code?\nv9 looks great so far. My (relatively few) tests are passing now. I'll dive in to the new features next week.\n. seems like this doesn't fix the issue. actionhero responds to the second action with the assertion error. \nmaybe an option to deactivate error domains while testing?\n. ",
    "jaulz": "Please move the \"api.config.general.disableParamScrubbing !== true\" to the beginning of the function otherwise the loop will still be processed but each iteration does nothing.\n. ",
    "clockwork189": "Perfect, thanks!\n. ",
    "cantoine": "I've dug into this issue some more and it appears to be related to how many commands are being sent across the socket very quickly. Should I be delaying the send commands to allow AH time to process them or is there a way to allow it to parse the commands it's receiving better?\nHere is a script that replicates what I'm doing in my app: https://gist.github.com/cantoine/9261038 and the responses I get from AH look like this: https://www.dropbox.com/s/s77o058u0aglzpi/Screenshot%202014-02-27%2017.31.05.png\nSome of the requests make it through but others don't. From what I can tell the issue revolves around how the information is received/parsed by the socket but I'm not sure how best to handle the issue.\nAny help would be greatly appreciated.\nThanks!\nChris\n. I've found the problem due to the ArrayBuffer on the front end appending null values into the socket when the text doesn't fill the original size set so this isn't an AH issue, I apologize.\n. Evan,\nThat's exactly what I was expecting based on what I had seen in the code. Do you think there is anyway to at least emit something in the progress events by default? I'm just hoping to be able to show a progress bar as things are uploaded.\nThanks!\nChris\n. Evan,\nThanks for the information. After reading through what you said I went and looked at formidable again and realized I had misread how the progress events are setup. I was reading it originally as there was a way for it to emit some json back through the connection as it was uploading. Thought it was a new trick I had never heard of and got excited but should have read it more carefully.\nSorry for the waste of time.\nChris\n. ",
    "trevorhiley": "OSX Mavericks\nHere's the error when I run actionhero generate\nfs.js:654\n  return binding.readdir(pathModule._makeLong(path));\n                 ^\nError: ENOENT, no such file or directory 'pathtocurrentdir/ActionHero/bin/methods/'\n    at Object.fs.readdirSync (fs.js:654:18)\n    at Object. (/usr/local/lib/node_modules/actionhero/bin/actionhero:165:4)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:902:3\n. That worked, thanks.  I was trying to do this with a global install and it didn't work.  This only works when I have actionhero installed in the target project's directory npm_module directory.  With 7.6.7 I could do it globally or by running it from a different directory.\n. ",
    "rwatler": "Evan:\nMaybe. However, notice that files that have missing dependencies are tossed to the end of the list. This means that in the example above it would run like this:\nfile_a.js loaded\nfile_b.js fails and is tossed to the end of the list\nfile_c.js fails and is again stuck on the end of the list\nfile_d.js loaded\nfile_b.js fails and is stuck on the end\nfile_c.js fails and the limit is reached because the example you had is cyclic and cannot be loaded.\nNow, if instead you had this example:\nfile_a.js\nfile_b.js # requires config.d\nfile_c.js # requires config.b\nfile_d.js # requires config.a\nThis runs like this:\nfile_a.js loaded\nfile_b.js fails : end of list\nfile_c.js fails : end of list\nfile_d.js loaded\nfile_b.js loaded\nfile_c.js loaded\nThe looping happens since the processing queues failed loads ahead of itself.\nDoes that make sense?\nRandy\n. Evan:\nI'm not sure that we can remove the 2x sadly. I think the reason you had it doing 2x was that 'literals' don't generate an error loading. If I understand correctly, literal references load as undefined on the first pass and you had it going through the second time to define those. Am I correct?\nAs it is here, the first pass takes care of references into nested configs, (our case), and the second pass takes care of any dangling literals/leaves that might remain. No?\nRandy \n. ",
    "kliakos": "Thanks man, you are awesome!\n. ",
    "panjiesw": "So, currently there is no way to test the plugin without integrate it first into some actionhero app?\n. Right, i think that's one of the way to do it, thanks! :)\n. ",
    "calebolin": "Hey @S3bb1,\nI'm trying to get an AH app running on iisnode. Were you able to make this work? I'd love to see that wiki article! :)\n. Thank you very much for this writeup! I will work through it today and report back.\n. Thanks for this again. It's been very helpful. My scenario is slightly different in that my AH app (\"shim\") is a subdirectory of the parent app in IIS. Here's my configuration:\nroot/Web.config:\n<location path=\"shim\">\n  <system.webServer>\n    <security>\n      <requestFiltering>\n        <hiddenSegments>\n          <remove segment=\"bin\" />\n        </hiddenSegments>\n      </requestFiltering>\n    </security>\n    <rewrite>\n    <rules>\n      <rule name=\"actionHero\">\n        <match url=\"shim/*\" />\n        <action type=\"Rewrite\" url=\"shim/node_modules/actionhero/bin/actionhero\" />\n      </rule>\n    </rules>\n    </rewrite>\n  </system.webServer>\n</location>\nroot/shim/Web.config:\n<configuration>\n    <system.webServer>\n        <webSocket enabled=\"false\" /> <!-- IIS8 only -->\n        <handlers>\n          <add name=\"iisnode\" path=\"shim/node_modules/actionhero/bin/actionhero\" verb=\"*\" modules=\"iisnode\" />\n        </handlers>\n        <iisnode\n        node_env=\"%node_env%\"\n        nodeProcessCommandLine=\"&quot;C:\\code\\trunk\\Lib\\Node\\nodist\\node.exe&quot;\"\n        enableXFF=\"true\"\n        loggingEnabled=\"true\"\n        logDirectory=\"iisnode\"\n        maxLogFileSizeInKB=\"128\"\n        maxTotalLogFileSizeInKB=\"1024\"\n        maxLogFiles=\"20\"\n        devErrorsEnabled=\"true\"\n       />\n    </system.webServer>\n    <appSettings>\n        <add key=\"actionhero_root\" value=\"C:\\ApprendaPlatform\\SiteData\\developer\\v1\\root\\shim\\node_modules\\actionhero\" />\n        <add key=\"ACTIONHERO_CONFIG\" value=\"C:\\ApprendaPlatform\\SiteData\\developer\\v1\\root\\shim\\config\" />\n    </appSettings>\n</configuration>\nroot/shim/config/servers/web.js:\nport: process.env.PORT,\nWhen I hit root/shim/foo I get the following error:\n```\niisnode encountered an error when processing the request.\nHRESULT: 0x2\nHTTP status: 500\nHTTP reason: Internal Server Error\nApplication has thrown an uncaught exception and is terminated:\nError: Implement me. Unknown stdin file type!\n    at process.startup.processStdio.process.openStdin [as stdin] (node.js:405:17)\n    at Object.exports.start (C:\\ApprendaPlatform\\SiteData\\developer\\v1\\root\\shim\\node_modules\\actionhero\\bin\\methods\\start.js:82:21)\n    at Object. (C:\\ApprendaPlatform\\SiteData\\developer\\v1\\root\\shim\\node_modules\\actionhero\\bin\\actionhero:200:38)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.require (module.js:362:17)\n    at require (module.js:378:17)\n    at Object. (C:\\Program Files\\iisnode\\interceptor.js:210:1)\n```\nWe're working hard on tracking this down, but if you see anything wrong that I've done here please let me know. :)\n. Further research shows that this is likely a problem with iisnode, not AH:\nhttps://github.com/tjanczuk/iisnode/issues/337\n@S3bb1, I'm surprised you didn't run into this!\n. ",
    "DarrenAllen": "Looks like it was already correct in _stop but hadn't changed for _start\n. ",
    "chulkilee": "Could you check the network condition?\nI ran ab on Vagrant VM for my app which making several Redis calls, and here are the results...\n```\nDocument Length:        6692 bytes\nConcurrency Level:      2\nTime taken for tests:   4.076 seconds\nComplete requests:      500\nFailed requests:        0\nWrite errors:           0\nTotal transferred:      3545000 bytes\nHTML transferred:       3346000 bytes\nRequests per second:    122.68 [#/sec] (mean)\nTime per request:       16.303 [ms] (mean)\nTime per request:       8.152 [ms] (mean, across all concurrent requests)\nTransfer rate:          849.39 [Kbytes/sec] received\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        3    7  51.9      5    1166\nProcessing:     4    9   3.0      9      22\nWaiting:        4    9   3.0      9      22\nTotal:          7   16  52.0     14    1173\nPercentage of the requests served within a certain time (ms)\n  50%     14\n  66%     15\n  75%     16\n  80%     17\n  90%     18\n  95%     19\n  98%     23\n  99%     27\n 100%   1173 (longest request)\n```\n(yeah, I need to look in to why there is a few very long request...)\n. ",
    "m-teslya": "Testing was performed using load UI (http://www.loadui.org), on 200 MBit fiber network with no traffic.\nWell, registered on blitz.io and created very simple app server on pure Node.js.\nUrl:\nhttp://165.225.145.50:8080/tinytrans.gif - ActionHero, one pixel gif in public folder\nScreenshot: http://screencast.com/t/MfpPLXSJPjIq\nCSV: https://www.dropbox.com/s/dyuadjc1gqibul6/action-hero.csv\nUrl: http://165.225.145.50:1337/ (With Nagle algorithm enabled)\nScreenshot: http://screencast.com/t/DycW4NJ0bKE\nCSV: https://www.dropbox.com/s/7vcy3pc5jyivve2/pure-node-nagle-enabled.csv\nUrl: http://165.225.145.50:1338/ (Nagle algorithm disabled)\nScreenshot: http://screencast.com/t/eXZcfnRyI4BN\nCSV: https://www.dropbox.com/s/701zjn6d9j5dpf3/pure-node-nagle-disabled.csv\nFinally, code: https://www.dropbox.com/s/eqh7r6yro4pegs5/server.js\nI think, the problem with stability under load is unmistakable\nEdit\nForgot to say, that all tests were done with following settings:\nFrom: Virginia\nInterval: 1000ms\nusers: 1- 1000\nduration: 1 minute\n. ",
    "davidjairala": "Another data point for those interested, done in a Thinkpad T440s.\nhttps://gist.github.com/davidjairala/0b3979bcc42f499d6359\n. ",
    "lombausch": "Brilliant, this will do. Thanks a lot.\n. ",
    "betz": "awesome!\n. ",
    "innerdvations": "Oops, sorry, went one commit too far fixing the initial error.\nFirst time with github pull requests, let's see if I can remove the extra commit or make things worse...\n. I rewrote most of it to make it shorter, faster, and just generally better.\nTrying to move any of the functions out of the processor and into a generalized class method is a scoping nightmare (and bind is much slower), but in the latest commit it should at least be more efficient than the master branch since it's only creating one anonymous function per processor rather than two.\n. No problem.  I was afraid of breaking old code but it's a lot simpler if we don't worry about that.\n. That refers to lower and higher than the default (old style) array which needs to fit in there too.  Since \"for in\" on sparse arrays only loops through indices that exist (and since we can't even count on it running at all if it's empty) we can't check when the proper time is to run through the default array inside there, so we have to put it outside, forcing us to split the loop in two.\nOne alternative that seems less ridiculous on the surface is to merge the default and priority arrays into a new array then loop through that, but that seemed like it would be a bit slower.\n. ",
    "esatterwhite": "I've recently fell into socket.io memory and clustering problems the hard way in production. I have since replaced it with primus and exposed the transport switching as config, with zmqbus to deal with event broadcasting\nI've also found the cluster module in Node.js to be rather buggy. Children often lose their connection to the parent process under heavy load or after being up for extended periods of time.\nYou also have nasty problems if you want to split instances across machines or use rooms  with socket .io/cluster.\nwith zmq bus you can spin up N number of instances on X number of machines, even across data centers and they will cluster themselves.\nAlso, primus is entirely plugin based, so if the functionality doesn't exist, you can certainly add it.\n. we defaulted to use the ws library where possible. otherwise we switched to sockjs if fallback was needed.\nbut this was all server setup. it was exposed as a flag. so if server A has clients that didn't have strict browser requirements, we runit it with node server --transport=websockets\notherwise it would just be: node server --transport=sockjs.\nprimus makes switching transparent and delivers the right client library wrapped in a primus class, so it shouldn't really make a difference.\nEngine.io can maintain about ~250 connections and still leaks memory where as ws can take on ~450 with primus and the ws library, and  doesn't leak much if at all. In any event. Primus is nice because it leaves picking a backend ( and problem set ) up to the implementation / use case.\n. ",
    "sanmoy27": "I am using redis pubsub.I am publishing the message on a channel and subsribint it on an api call but I am unable to send the data in the client-side as event-stream.\n. ``` js\nexports.streamRedisPubSub= {\n    name: 'streamRedisPubSub',\n    description: 'It uses the PUBSUB mechanism of Redis',\n    inputs: {\n        id: {required: true},\n        apiKey: {required: true}\n    },\n    run: function(api, data, next){\n    var apiKey = data.params.apiKey\n    var jobId = data.params.id;\n    api.chatRoom.add(\"channel:\"+apiKey+\":\"+jobId, next);\n    api.taskController.streaming(data,jobId,apiKey, function(error, success){\n\n\n        if(error)\n            next(error);\n        else {\n\n            //data.response.success = success;\n\n            //data.connection.sendMessage(success);\n\n            next(null,success);\n\n\n        }\n    });\n\n}\n\nvar redisNode = require(\"redis\");\nvar subscriber = redisNode.createClient()\nvar publisher  = redisNode.createClient();\nstreaming : function(data,jobId, apiKey, next) {\n                console.log(\"In streaming......\"+apiKey+\":\"+jobId);\n                subscriber.subscribe(\"channel:\"+apiKey+\":\"+jobId);\n                data.connection.rawConnection.responseHeaders.push(['Connection', 'keep-alive']);\n                data.connection.rawConnection.responseHeaders.push(['Transfer-Encoding', 'chunked']);\n                data.connection.rawConnection.responseHeaders.splice(0,1);\n                data.connection.rawConnection.responseHeaders.push(['Content-Type', 'text/event-stream']);\n            subscriber.on(\"message\", function(channel, message) {\n                console.log(\"Message on channel '\" + channel + \"' arrived!\");\n                console.log(message);\n                *******here the required message is coming but I am unable to send it as a event/stream response in the client side*************\n                api.chatRoom.broadcast(data.connection, channel, message, next)\n                //data.connection.sendMessage(message);\n                //next(null,message);\n\n            });\n\n```\nI have already published the mesasge using publisher.publish(\"channel:\"+apiKey+\":\"+jobId,JSON.stringify(payload));\npayload contains the message\n. ",
    "panva": "I ended up changing the sentinel library. https://github.com/panva/node-redis-sentinel-client/commit/ab794d3f6c7dc1a82b89071c2237e3d55973eff3 for my specific case.\nIt is true that the created redis client queues commands, however actionhero is sending commands before there even is one which is why this exact exception (https://github.com/DocuSignDev/node-redis-sentinel-client/issues/19) is being thrown. Using redis-sentinel-client should therefore not be mentioned in the generated scaffold app configs.\n. ",
    "joezg": "Yes, that is better. Only, you have to remove typeof. \njavascript\ntypeof null == 'object'\nAnother question is whether parameter with null value is missing, at all.\nI guess that I can mark parameter as optional if I have to send null to action.\nSo, this would be ok:\njavascript\nself.connection.error === null \n          && (self.connection.params[param] == null \n                       || self.connection.params[param].length == 0)\n. Sorry for the closing of issue.\nMissclick.\n. ",
    "submitteddenied": "I poked around a little bit and found my problem. I had set the test up to fail by seeding the database with bad data. This caused the assertion widget.name.should.equal(fakeWidgetAttrs.name) to throw an exception (because it did not pass).\nThe exception propagated back up into actionhero and caused the testServer to think that the action had failed, causing it to send an error response to my callback (the second callback).\nMy code now looks like this:\nit('returns a list of all widgets in the database', function(done){\n  api.specHelper.runAction(\"widgetList\", function(response, connection) {\n    console.log(\"response: \", response);\n    var widget = response.widgets[0];\n    try {\n      widget.name.should.equal(fakeWidgetAttrs.name);\n      done();\n    } catch (ex) {\n      done(ex);\n    }\n  });\n});\nNote that the done() callback has to be listed twice to ensure that it is called.\nIs there a more elegant way to do this kind of test?\n. Thanks for the quick response!\nMy project has actionhero@9.0.1, but my issue isn't so much with try/catch blocks in the spec, but more with the fact that a failing test (\"a\".should.eql(\"b\")) works by throwing an exception which is usually handled by mocha (and interpreted as a test failure expected \"a\" to equal \"b\" or similar).\nWhat's happening is that the exception is being caught inside actionhero and interpreted as a failure in running the action, which results in the callback being called again, this time with an error object rather than a result.\nWhat I expect is that the test failure exception is ignored by actionhero and allowed to bubble back up to mocha and cause the test to fail with the correct message. If this is unfeasible for some reason (error handling is in the actionProcessor which should not have test-specific code in it), perhaps a spec helper method that wraps the test code and checks for mocha exceptions would do the trick? I'm happy to take something like that on.\n. Hey, thanks for checking in. You were correct, a process.nextTick solved the problem, but I ended up using try/catch blocks in my test code (to keep everything cleaner in the \"real\" code).\nI'm using Sequelizer as my ORM layer, any ideas on where to start making that play a little nicer?\n. I'd like to sweep back through here again and add more documentation/examples for the various queue inspection methods, but I think that's a PR for another day :smiley: \n. How about this example, where the sendWelcomeEmail task passes the error through to fail the job if sendEmail fails. This also puts the example of failing a task close to where it is documented.\n. Ah, I see my editor has taken liberties with your whitespace too. Sorry about the messy diff :\\\n. I have updated it so that falsey values will prevent client side JS from being generated\n. It might be worth removing this line, but for users who are upgrading from < v10, this will be helpful.\nHopefully, it's easy enough for new users to ignore.\n. I do mention that higher up on Line 111, do you think an example of a job that fails (like a divide by with a param 0?) might be a better demonstration of failing a job like this?\n. I'd prefer that this test was more obviously broken, the extra % gets lost pretty easily\n. I'm happy to be overruled here, but I don't like the addition of handling +.\nIf decodeURIComponent doesn't convert + to space, it's better to fix offending clients than add extra handling here, IMO.\n. ",
    "harlanmilkove": ":bow: Thanks for addressing this!!!\n. fix for https://github.com/evantahler/actionhero/issues/421 looks good, but we probably want some version of this test to stick around  ( :thought_balloon: I know you mentioned this was a WIP still)\n. ",
    "englercj": "Awesome, this would make it much easier to do SSO accross web and websockets.\n. @S3bb1 You can manually set cookies on a native http request. Mocha is just for running/organizing tests. It doesn't do asserts, mocks, or anything like that.\n``` javascript\nvar http = require('http');\nhttp.get(\n    {\n        headers: { Cookie: \"sessionId=OHI7wUJZDDA4dCqfNEBIRphCRs2M5T5C\" }\n    },\n    \"http://somewhere\",\n    function (res) {\n        // success\n    })\n    .on('error', function (err) {\n        // error\n    });\n```\nI would be happy to fork your changes @S3bb1 and write the tests myself if you want, I need these changes.\n. @evantahler That doesn't really solve what this PR tries to fix, we can do that right now by sending the sessionID accross the wire when the connection starts up to auth that transport.\nThe benefit of this PR is that web and websockets are treated the same for that logic instead of differently. Though, thinking of websocket connection that are not from a browser maybe it makes more sense to build to the transport instead of building for a transport on a specific platform.\n. @evantahler The difference is that now it is client-logic as opposed to server-logic. If I am writing an open API that doesn't assume use of a specific client, this doesn't guarantee those sessions are tied unless the user of the API does extra work.\nWith this PR the user of the API does no extra work, their sessions (in browser) are just magically tied together which is desirable.\n. I think my title is bad, really what I want to do is just disable the built-in /api/:actionName route. It would be really nice to have an option to turn off this magic routing that the library does by default.\nSometimes in addition to not being necessary this functionality can potentially introduce a security risk (e.g. webserver access logs will log plaintext passwords, tokens, and other params as they are in the URL). Disabling this magic route is necessary for hardening a production API.\n. :+1:\n. ",
    "JehandadK": "Thanks for pinging back! I guess I am misinformed! \n. ",
    "skyhit": "but it should not cause actionhero server crash, right?\n. ",
    "mellodev": "I've experienced the multiple messages in chat bug also. I couldn't figure out how to replicate it either. It only seemed to manifest when I started using an external redis server, but I never went back to fakeredis to double check. OP, are you using fakeredis? Sorry this isn't much help, just wanted to +1 multiple messages bug.\n. ",
    "sallespro": "hi, i presume this happens when the websockets are closed and reconnect.\nmy use case was, i started two browser tabs to chat ( FFOS & Chrome ) and have let them still for half an hour maybe. when you try to send messages after that, it will always be multiplied.\nI also use a real Redis instance.\n. thanks anyway. \nis it an option to use Faye ? what's the trade off from Primus ?\n. ",
    "chiefy": "Answering my own question, here's what I had to do. Please let me know if this is not best-practice:\n(inside my action's run method, required lodash)\n_(api.connections.connections).each(function(connection) {\n     if (connection.type !== 'websocket') {\n         return;\n     }\n     connection.sendMessage({\n         \"message\": \"hi\"\n     });\n });\n. @evantahler Thanks for the tip. Found this example, not sure if you want to keep it, or add a note that it won't work when clustered?\nhttp://actionherojs.com/docs/examples/tasks/pingSocketClients.html\n. ",
    "lookaflyingdonkey": "connection.rawConnection.params.body only has the processed output from formidable, not the raw data that has been posted to the server. The only other location would be in the actual formidable parser (i.e. json_parser), but that data is set to null on end.\nHaving access to the raw POST data can be useful, our case is that on the requesting end we have a checksum generation system that bases it off the request data (in out case a JSON string) and sticks the checksum into a HTTP header, then we validate that on the server side in the preProcessing middleware by comparing exactly what was sent in raw data (before being processed by JSON parser/formidable).\nI agree totally about not relying on the order of JSON, that is exactly why we need this change, currently ActionHero is passing the req over to formidable and just giving us the JSON object back in connection.rawConnection.params.body, so we are unable to just re-stringify it and generate the checksum as the order may have changed. \n. No worries, just thought I would share. Good to know I can just use the connection middleware.\nOut of interest how would you suggest creating a message checksum for an API? Needs to ensure that the data leaving the app is the same that is coming into the API and hasn't been modified at all.\n. It is to ensure that data isn't changed in transit, i.e. we develop games what have real-world prizes and leaderboards that could damage the client integrity if items are modified. It also isn't hard to tunnel HTTPS to replay and modify requests. Encrypting and decrypting the content on both sides was a consideration but not ideal for game API as it would increase processing requirements much more than a simple checksum.\nWe also make use of the checksum to stop replay attacks by caching a list of recently used checksums and they would be unique sue to a millis timestamp in the message packets.\nWas just interested if you had come across this before as it doesn't seem to be discussed too often but for our use is its quite important.\n. I am currently in the process of doing a trial port of our existing, PHP based, backend that we have used for many client games over to node. There are games for Nickelodeon, McDonalds, Ansarada, etc in the mix with varying amounts of traffic. I would like to see a significantly higher request per second per node value with the new version.\n. Ah sorry for the confusion, I wasn't saying it was slow, just that I am hoping that once I am done this will be much faster than our existing system.\n. ",
    "bradfair": "Looks like you're using single quotes in your request, but you should be using double quotes.\n. ",
    "DoctorDimon": "One more, there is wrong info here - http://actionherojs.com/docs/core/cache.html#apicachesave\n-- options can be {expireTime: 1234} where the act of reading the key will reset the key\u2019s expire time\nbut i need to pass \"expireTimeMS\" param, not \"expireTime\".\n. Thank you!\nSorry, but i have one more, i hope last one, question. How can I push some data to web client (via WS) without request from web client.\nI have a periodic task that sometimes generate some data, this data should be send to web client via WS. Web client should just connect to api and wait for data.\nI can't understand where connections are stored and how to push data...\n. Thanks @s3bb1\n. Tnx! )\n. Tnx, now I know where I can get it.\nBut how can I define specific actions in router base on request method?\n. This is what im looking for!\nCool! Thanks!\n. I have found the problem!\nMy task has name \"metric_push\", but I have action with the same name \"metric_push\". So what I have done is just change the task name.\nWill be perfect if you could provide error message in such case. Thanks!\n. I had found that, BUT in your documentation i found this - \nconnection.rawConnection.responseHeaders: array of headers which can be built up in the action. Headers will be made unique, and latest header will be used (except setting cookies)\n. Oh, now I've understood. Tnx!\n. Actually this is financial system with several microservices:\n- UserService\n- AccountService\n- SecureStorage\n- PaymentGateway\nand so on...\nweb or socket connections can be interrupted, as my point of view... but maybe not.\nAnd what about the second scenario? Can you please explain it? And one more, in some cases I need something like broadcast event, can I do it with tasks approach?\nThanks for your help!\n. Hi!\nThank toy for your advice! For now I have decided to use actionhero-node-client and i have created something like socket transport for sync actions executions. Its OK for now, but I dont know what to do with load balancing with this approach, I think i need to go HTTP for LB as you describe above!\nThanks a lot for your help!. Thank you for your answer! Actually I want to retry all tasks witch was failed but not now, in 10 seconds from now. My tasks has no params, so i skip it.\nWhat im trying to do - is to access task name in middleware and write stats from this task to DB.\nWill try your example.... Yes it works!\nThank you! The problem was that i used async () => insted of async function(). Actually I always think it is the same... Good experience!\nThanks again!. All tests have same:\nbefore(async () => {\n        if(process.env.NODE_ENV !== 'test') {\n            throw new Error('Should have booted into the test env')\n        }\n        api = await actionhero.start();\n        await api.models.payments.update({\n            status: 'REJECTED'\n        },{\n            where: {\n                status: 'NEW'\n            }\n        });\n    });\n    after(async () => {\n        await actionhero.stop()\n    });. After update to node v 8.10.0 - \n(node:16967) UnhandledPromiseRejectionWarning: Error: Connection is closed.\n    at close (/var/easybits/PaymentGateway/node_modules/ioredis/lib/redis/event_handler.js:101:21)\n    at Socket.<anonymous> (/var/easybits/PaymentGateway/node_modules/ioredis/lib/redis/event_handler.js:76:14)\n    at Object.onceWrapper (events.js:315:30)\n    at emitOne (events.js:116:13)\n    at Socket.emit (events.js:211:7)\n    at TCP._handle.close [as _onclose] (net.js:567:12). I have more than 10 tasks in this project, but for test env, I set scheduler to false. Dont know what to do, sometimes all is Ok, simetimes I see errors.... No, config is OK and up to date.. I cant find out the reason it crashes. I have 2 workers, and cluster starts OK:\nACTIONHERO COMMAND >> start cluster\n\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\u207b\nusing default value of `actionhero-worker-` for `workerTitlePrefix`\nPaymentGateway @ 2018-05-25T08:06:31.209Z - notice:  - STARTING CLUSTER -\nPaymentGateway @ 2018-05-25T08:06:31.210Z - notice: pid: 5388\nPaymentGateway @ 2018-05-25T08:06:31.211Z - info: starting worker #1\nPaymentGateway @ 2018-05-25T08:06:32.196Z - info: [worker #1 (5402)]: starting\nPaymentGateway @ 2018-05-25T08:06:32.200Z - info: actionhero member actionhero-worker-1 has joined the cluster\nPaymentGateway @ 2018-05-25T08:06:32.494Z - info: [worker #1 (5402)]: started\nPaymentGateway @ 2018-05-25T08:06:32.494Z - info: starting worker #2\nPaymentGateway @ 2018-05-25T08:06:34.644Z - info: [worker #2 (5417)]: starting\nPaymentGateway @ 2018-05-25T08:06:34.661Z - info: actionhero member actionhero-worker-2 has joined the cluster\nPaymentGateway @ 2018-05-25T08:06:34.938Z - info: [worker #2 (5417)]: started\nPaymentGateway @ 2018-05-25T08:06:34.938Z - notice: cluster equilibrium state reached with 2 workers\nIt can crash within a minutes or within a hours (>24). When it happens, I see this picture in cluster log:\nPaymentGateway @ 2018-05-25T08:00:59.122Z - alert: worker #84 [1169]: unhandled rejection => {\"reason\":{},\"p\":{}}\nPaymentGateway @ 2018-05-25T08:00:59.122Z - notice: cluster equilibrium state reached with 2 workers\nPaymentGateway @ 2018-05-25T08:00:59.143Z - info: [worker #1 (1169)]: exited\nPaymentGateway @ 2018-05-25T08:00:59.143Z - info: starting worker #1\nPaymentGateway @ 2018-05-25T08:01:00.568Z - info: [worker #1 (3696)]: starting\nPaymentGateway @ 2018-05-25T08:01:00.568Z - info: actionhero member actionhero-worker-1 has joined the cluster\nPaymentGateway @ 2018-05-25T08:01:01.095Z - info: [worker #1 (3696)]: started\nPaymentGateway @ 2018-05-25T08:01:01.095Z - notice: cluster equilibrium state reached with 2 workers\nPaymentGateway @ 2018-05-25T08:03:59.390Z - alert: worker #86 [2877]: unhandled rejection => {\"reason\":{},\"p\":{}}\nPaymentGateway @ 2018-05-25T08:03:59.411Z - notice: cluster equilibrium state reached with 2 workers\nPaymentGateway @ 2018-05-25T08:03:59.412Z - info: [worker #2 (2877)]: exited\nPaymentGateway @ 2018-05-25T08:03:59.412Z - info: starting worker #2\nPaymentGateway @ 2018-05-25T08:04:01.073Z - info: [worker #2 (4613)]: starting\nPaymentGateway @ 2018-05-25T08:04:01.088Z - info: actionhero member actionhero-worker-2 has joined the cluster\nPaymentGateway @ 2018-05-25T08:04:01.584Z - info: [worker #2 (4613)]: started\nPaymentGateway @ 2018-05-25T08:04:01.584Z - notice: cluster equilibrium state reached with 2 workers\nand so on...\nBoth of workers are serving socket connections, and run tasks. Just before crash log:\nactionhero-worker-2 @ 2018-05-25T03:54:45.054Z - info: [ task ] name=paymentsTransitBalanceStatus, duration=17, error=false\nactionhero-worker-2 @ 2018-05-25T03:54:45.054Z - info: [ task ] name=paymentsWithdraw, duration=17, error=false\nactionhero-worker-2 @ 2018-05-25T03:54:45.054Z - info: [ task ] name=paymentsInConfirmation, duration=17, error=false\nactionhero-worker-2 @ 2018-05-25T03:54:45.054Z - info: [ task ] name=paymentsOutStatus, duration=17, error=false\nactionhero-worker-2 @ 2018-05-25T03:54:45.055Z - info: [ worker ] job success high workerId=5, class=paymentsTransitBalanceStatus, queue=high, result=true\nactionhero-worker-2 @ 2018-05-25T03:54:45.055Z - info: [ worker ] job success high workerId=2, class=paymentsWithdraw, queue=high, result=true\nactionhero-worker-2 @ 2018-05-25T03:54:45.055Z - info: [ worker ] job success high workerId=1, class=paymentsInConfirmation, queue=high, result=true\nactionhero-worker-2 @ 2018-05-25T03:54:45.055Z - info: [ worker ] job success high workerId=3, class=paymentsOutStatus, queue=high, result=true\nactionhero-worker-1 @ 2018-05-25T03:54:45.058Z - info: [ task ] name=paymentsVerifyProcessing, duration=26, error=false\nactionhero-worker-1 @ 2018-05-25T03:54:45.062Z - info: [ worker ] job success high workerId=3, class=paymentsVerifyProcessing, queue=high, result=true\nactionhero-worker-1 @ 2018-05-25T03:54:45.063Z - info: [ task ] name=paymentsVerifyStatus, duration=22, error=false\nactionhero-worker-1 @ 2018-05-25T03:54:45.063Z - info: [ task ] name=paymentsInProcessing, duration=22, error=false\nactionhero-worker-1 @ 2018-05-25T03:54:45.063Z - info: [ task ] name=paymentsInStatus, duration=22, error=false\nactionhero-worker-1 @ 2018-05-25T03:54:45.063Z - info: [ worker ] job success high workerId=4, class=paymentsVerifyStatus, queue=high, result=true\nactionhero-worker-1 @ 2018-05-25T03:54:45.063Z - info: [ worker ] job success high workerId=2, class=paymentsInProcessing, queue=high, result=true\nactionhero-worker-1 @ 2018-05-25T03:54:45.063Z - info: [ worker ] job success high workerId=5, class=paymentsInStatus, queue=high, result=true\nactionhero-worker-1 @ 2018-05-25T03:54:47.999Z - info: actionhero member actionhero-worker-2 has joined the cluster\nactionhero-worker-2 @ 2018-05-25T03:54:47.985Z - notice: *** Starting ActionHero ***\nactionhero-worker-2 @ 2018-05-25T03:54:47.987Z - notice: environment: sandbox\nactionhero-worker-2 @ 2018-05-25T03:54:47.987Z - notice: pid: 494\nactionhero-worker-2 @ 2018-05-25T03:54:47.987Z - notice: server ID: actionhero-worker-2\nPaymentGateway @ 2018-05-25T03:54:48.074Z - info: actionhero member actionhero-worker-2 has joined the cluster\nactionhero-worker-2 @ 2018-05-25T03:54:48.031Z - info: actionhero member actionhero-worker-2 has joined the cluster\nactionhero-worker-2 @ 2018-05-25T03:54:48.135Z - info: Executing (default): SELECT NOW()\nactionhero-worker-2 @ 2018-05-25T03:54:48.143Z - info: resque scheduler started\nactionhero-worker-2 @ 2018-05-25T03:54:48.145Z - notice: Starting server: `socket` @ 127.0.0.1:5004\nactionhero-worker-2 @ 2018-05-25T03:54:48.290Z - alert: *** ActionHero Started ***\nactionhero-worker-2 @ 2018-05-25T03:54:48.296Z - info: [ status ] status=NodeHealthy, uptime=6, eventLoopDelay=0.042, consumedMemoryMB=29.16, resqueTotalQueueLength=0\nactionhero-worker-2 @ 2018-05-25T03:54:48.318Z - info: LINKUP: Hey! SecureStorage here!\nactionhero-worker-2 @ 2018-05-25T03:54:48.324Z - info: LINKUP: Hey! ClientService here!\nactionhero-worker-2 @ 2018-05-25T03:54:48.410Z - info: LINKUP: Hey! AccountService here!\nactionhero-worker-2 @ 2018-05-25T03:54:48.648Z - info: [ worker ] started workerId=1\nactionhero-worker-2 @ 2018-05-25T03:54:49.152Z - info: [ worker ] started workerId=2\nactionhero-worker-2 @ 2018-05-25T03:54:49.655Z - info: [ worker ] started workerId=3\nactionhero-worker-2 @ 2018-05-25T03:54:50.157Z - info: [ worker ] started workerId=4\nactionhero-worker-2 @ 2018-05-25T03:54:50.594Z - info: [server: socket] new connection to=127.0.0.1\nactionhero-worker-1 @ 2018-05-25T03:54:50.598Z - info: [server: socket] new connection to=127.0.0.1\nactionhero-worker-2 @ 2018-05-25T03:54:50.600Z - info: [server: socket] new connection to=127.0.0.1\nactionhero-worker-2 @ 2018-05-25T03:54:50.660Z - info: [ worker ] started workerId=5\nactionhero-worker-1 @ 2018-05-25T03:55:10.299Z - info: [ status ] status=NodeHealthy, uptime=2819980, eventLoopDelay=0.021, consumedMemoryMB=29.66, resqueTotalQueueLength=0\nAfter this both of workers stops executing tasks and the service become unusable. As I can see in last log, worker2 crashed, but I cant figure out why.\nI hope you can help me, thank you!\n. I use actionhero-node-client for socket connections between services. Some more info - this happens only in services that uses tasks. Here is what I can find:\nworker log:\nactionhero-worker-1 @ 2018-05-25T08:57:02.831Z - info: This node is now the Resque scheduler master\ncluster log:\n10.10.15.12 @ 2018-05-25T08:57:02.887Z - alert: worker #1286 [12674]: unhandled rejection => {\"reason\":{},\"p\":{}}\n. Thank you for advice. But I think the problem is not in task itself. I have one AH instance that have only one task (pereodic, without any params). Before crash happen, it runs absolutely normally more then 20K times. And I added try catch to all code that executes in task body.\nIt starts happening periodically when I moved to version 19, from 18. And in same time we have changed deploy logic, from restart to USR2 strategy.\nSo in next days I will:\n1. Add process.on in workers, maybe it will catch something.\n2. Will test system without USR2 restarts.\n3. Will test system with downgrade to version 18.\nPlease, do not close this issue, I feel the problem is somewhere in node-resque or in resque initializer. I will try to find more information.\nThanx. \n . One more interesting thing! Service start to operate normally without restart if i remove resque:worker namespace and all it content from Redis. Any ideas? :). Hi! Thanks!\nI think this problems appears only when cluster is reloaded via USR2 command, because services that was hard restarted works fine, but I will monitor more days.\nI update one AH instance with your update (loaded from master) and rebooted it via USR2, waiting for crash and report.\n. Got!\n10.10.15.12 @ 2018-05-27T13:29:59.817Z - notice: cluster equilibrium state reached with 2 workers\n10.10.15.12 @ 2018-05-28T01:22:32.140Z - alert: [worker #2 (20218)]: unhandled rejection => Cannot destructure property `name` of 'undefined' or 'null'.\n10.10.15.12 @ 2018-05-28T01:22:32.165Z - alert: [worker #2 (20218)]:    TypeError: Cannot destructure property `name` of 'undefined' or 'null'.\n10.10.15.12 @ 2018-05-28T01:22:32.166Z - alert: [worker #2 (20218)]:        at Scheduler.checkStuckWorkers (/var/opt/NotifyService/node_modules/actionhero/node_modules/node-resque/lib/scheduler.js:202:36)\n10.10.15.12 @ 2018-05-28T01:22:32.166Z - alert: [worker #2 (20218)]:        at <anonymous>\n10.10.15.12 @ 2018-05-28T01:22:32.167Z - notice: cluster equilibrium state reached with 2 workers. And this crash appears only is cluster is restarted via USR2 signal. Services that were restarted in hard way are working OK within last 48 hours.. One more, in worker\n(node:3010) UnhandledPromiseRejectionWarning: Error: worker not found\n    at Queue.forceCleanWorker (/var/easybits/UserAPI/node_modules/node-resque/lib/queue.js:250:26)\n    at <anonymous>\n(node:3010) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\n(node:3010) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.. I confirm. In my application I use only locks via api object.. So I think the problem is now solved!!!\nI have updated the heaviest instance which have more then 15 periodic tasks. Turn it on and restarted several times via USR2, and it work absolutely stable! Great! No more errors in cluster log, no in workers logs. I will monitor this instance for next 48 hours to be absolutely sure.\nWhen changes in AH will be in release?\nThanks a lot! )))\n. Hi!\nSorry, but the problem still exists. Now I see this messages:\nPaymentGateway @ 2018-06-01T10:12:33.589Z - alert: worker #22 [6857]: unhandled rejection => {\"message\":\"worker not found\",\"stack\":[\"Error: worker not found\",\"    at Queue.forceCleanWorker (/var/opt/EasyBits/PaymentGateway/node_modules/node-resque/lib/queue.js:250:26)\",\"    at <anonymous>\"]}\nAnd again, service reboot worker at soon it become a resque master.\nPlease help! :)\n. Added, wait for result.... Oh... api is not available there. Can you help me, how I can log from queue.js?. SecureStorage @ 2018-06-03T20:31:25.839Z - info: This node is now the Resque scheduler master\nworkers { 'easybits-vm:1738+1': 'high',\n  'easybits-vm:21825+1': 'high',\n  'easybits-vm:6025+1': 'high',\n  'easybits-vm:21769+1': 'high',\n  'easybits-vm:21611+1': 'high',\n  'easybits-vm:21520+1': 'high',\n  'easybits-vm:7278+1': 'high',\n  'easybits-vm:21423+1': 'high',\n  'easybits-vm:21455+1': 'high',\n  'easybits-vm:21703+1': 'high',\n  'easybits-vm:21632+1': 'high',\n  'easybits-vm:21477+1': 'high',\n  'easybits-vm:20093+1': 'high',\n  'easybits-vm:21769+2': 'high',\n  'easybits-vm:7300+1': 'high',\n  'easybits-vm:21433+1': 'high',\n  'easybits-vm:21372+1': 'high',\n  'easybits-vm:21835+1': 'high' }\nworkerName easybits-vm:21498+1\n(node:7300) UnhandledPromiseRejectionWarning: Error: worker not round\n    at Queue.forceCleanWorker (/var/easybits/SecureStorage/node_modules/node-resque/lib/queue.js:251:26)\n    at <anonymous>\n    at emitWarning (internal/process/promises.js:65:17)\n    at emitPendingUnhandledRejections (internal/process/promises.js:109:11)\n    at runMicrotasksCallback (internal/process/next_tick.js:124:9)\n    at _combinedTickCallback (internal/process/next_tick.js:131:7)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\n(node:7300) Error: worker not round\n    at Queue.forceCleanWorker (/var/easybits/SecureStorage/node_modules/node-resque/lib/queue.js:251:26)\n    at <anonymous>\n(node:7300) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.. So, as I can see, it cannot find worker with name easybits-vm:21498+1 in workers list and crashes. As I can understand, it takes it from resque:stat:processed namespace, from here resque:stat:processed:easybits-vm:21498+1. Strange thing is that the key resque:worker:easybits-vm:21498+1:high:started actually available in redis in resque:worker namespace, but why it is not loaded in array of workers?. This crash happens IF:\nresque:worker:ping:easybits-vm:XXXX+1 - present in resque:worker:ping namespace and NOT present in resque:workers.. Any ideas?. @evantahler, can you help me this?. Great! Now Im testing my stuff...\nI have analyzed the code, and have the theory - Look at https://github.com/taskrabbit/node-resque/blob/master/lib/worker.js#L290. The problem appears if record is exist in :ping keys and not exist in resque:workers.\nIf I have a temporary problem with redis (connection or overload), I can be a situation when worker will be removed from resque:workers and cannot be removed from :ping keys, because redis have a problem. In this case, I will see Worker not found error each time worker will become a resque master (this is my case).\nWhat do you think about it?\n. Thanks! Im trying to test it, but I catch new Error:\nSecureStorage @ 2018-06-12T09:48:44.165Z - alert: [worker #1 (17883)]:        at JSON.parse (<anonymous>)\nSecureStorage @ 2018-06-12T09:48:44.166Z - alert: [worker #1 (17883)]:        at data.map (/var/opt/SecureStorage/node_modules/actionhero/node_modules/node-resque/lib/queue.js:310:49)\nSecureStorage @ 2018-06-12T09:48:44.166Z - alert: [worker #1 (17883)]:        at Array.map (<anonymous>)\nSecureStorage @ 2018-06-12T09:48:44.166Z - alert: [worker #1 (17883)]:        at Queue.failed (/var/opt/SecureStorage/node_modules/actionhero/node_modules/node-resque/lib/queue.js:310:24)\nSecureStorage @ 2018-06-12T09:48:44.166Z - alert: [worker #1 (17883)]:        at <anonymous>\nAs I can see I have blank records in resque:failed, just row number and blank value... Dont know why.... Updated. Waiting for results... :). So, it looks like the system became absolutely stable, even with unstable connections to redis.\nGreat work! If I will be in Seattle, I will buy you a beer, man! Thanx a lot! \nHope this was the last catch ))). And hello again! )))\nUnfortunately, one more:\nNotifyService @ 2018-06-14T21:12:12.892Z - notice: cluster equilibrium state reached with 2 workers\nNotifyService @ 2018-06-15T05:44:05.555Z - alert: [worker #2 (24402)]: unhandled rejection => Cannot destructure property `name` of 'undefined' or 'null'.\nNotifyService @ 2018-06-15T05:44:05.556Z - alert: [worker #2 (24402)]:    TypeError: Cannot destructure property `name` of 'undefined' or 'null'.\nNotifyService @ 2018-06-15T05:44:05.556Z - alert: [worker #2 (24402)]:        at Scheduler.checkStuckWorkers (/var/opt/NotifyService/node_modules/actionhero/node_modules/node-resque/lib/scheduler.js:201:36)\nNotifyService @ 2018-06-15T05:44:05.556Z - alert: [worker #2 (24402)]:        at <anonymous>\nNotifyService @ 2018-06-15T05:44:05.556Z - notice: cluster equilibrium state reached with 2 workers\n. ",
    "DmitriySheludko": "Thanx a lot!\n. ",
    "giacomorebonato": "Maybe the connection api methods are what you are looking for for direct messaging:\nhttp://actionherojs.com/docs/methods.html#connection\n. ",
    "jonthulu": "In case anyone else is having this problem, I managed to track it down.  If a large Buffer object is logged by actionhero (api.log), and winston (what actionhero uses to log) sends the Buffer object through the cycle package, it will parse every byte in the buffer which can use up all your memory and up your cpu usage to 100%.  This was happening for me when using the ah-nodemailer-plugin (though I'm still not sure why there was a large Buffer object). The task success event (defined in actionhero/initializers/resque.js, worker.on('success', ...)) logs the job object which contains the buffer deep inside the arguments.\nIdeally, actionhero would not log the job object since there is no way of telling what will be inside it.\nTo fix this, I stopped using the ah-nodemailer-plugin package and wrote a resque-plugin to clean up the job before it is logged.\nAlternatively, you could create a low priority initializer that loops through the api.resque.workers and changes the worker events to not log the job (worker.on('success', ...) and work.on('job', ...)).\n. The safest thing I can think of would be to change\njavascript\n{job: job, result: result}\nto\njavascript\n{job: {class: job.class, queue: job.queue}, result: result}\nin order to filter out the arguments altogether. The 'job' handler on the previous line should also be updated.\nIn my case, the troublesome buffer was in \njavascript\njob.args[0].mail.transport.transport.pool._connectionsInUse[0].socket.pair.encrypted._buffer.pool\nwhich would be difficult to identify and prevent.\n. ",
    "benburwell": "Created a support ticket. I'll see what they have to say.\n. Looks like https://buttons.heroku.com/ just hadn't updated. Looking now, I see two buttons listed. It seems that the resolution is just to wait for the one pointing to my fork to fizzle out.\n. Oops, sorry!\n. ",
    "alexzaporozhets": "Thanks for your reply, but we have a misunderstanding here. \nWe are planning to build new API based on actionhero, old version of the system was builded on PHP. And I am trying to find correct approach for cron-jobs that generate email-reports.\nIn the old codebase they accessing DB directly, in new one I want to have all communications going through the central API.  Thats why I was asking about calling actionhero PHP script. Maybe there is a way to call \"action\" directly (RPC)?\n. ",
    "dangerdespain": "This is my first ever pull request (baby steps!) so I'm open to and appreciate any feedback on both the pull request itself and my method of integrating the validation library.\n. I like Sequelize's implementation of the validator library better. (http://sequelizejs.com/docs/latest/models#validations). I'm going to go ahead and close this pull request. Evan - would you be open to a change in the core to allow for an array of objects in the optional/required parameters arrays? Something along the lines of extending \nrequired : ['objectId', 'title']\nwith \nrequired : [\n\u00a0\u00a0 'objectId' : {\n\u00a0\u00a0\u00a0\u00a0 validate : { isUUID : 4 }\n\u00a0\u00a0 },\n\u00a0\u00a0 'title' : {\n\u00a0\u00a0\u00a0\u00a0 validate : { \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 len : [2,20],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 isAlpha : true,\n\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0 }\n]\n. Sounds good to me, keep an eye out for a new pull request soon.\n. Here's the error from Travis\n1) Core: Developer Mode \"after all\" hook:\n     Error: timeout of 5000ms exceeded\n      at null. (/home/travis/build/evantahler/actionhero/node_modules/mocha/lib/runnable.js:158:19)\n      at Timer.listOnTimeout (timers.js:133:15)\n. I was being conscious to make this a refactor rather than introduce any breaking changes or modifying any expected behaviors. If there's no longer any reason to support a routes file in the root directory then that wouldn't be a hard modification. I did include a new warning so that there's still a deprecation notice in the console.\nThe reason I'm checking for the file is that I wanted to replicate the watchFileAndAct() method on the routes config file (requiring the file path) so that it autoloads routes on the routes.js file change. \n. I've created a fresh pull request with a cleaner fix and cleared out the support for root-directory routes (#507)\n. Let me know if you'd like the deprecation notice added back in. Otherwise, this is a nice clean fix to #504 without the fs module overhead or file watching that was loading up the previous pull request.\n. I've added a test to check for expected filtering behavior. More specifically, I used a parameter defined in a different action (sleepDuration from actions/sleepTest.js) to ensure that parameters aren't leaking in from other actions' parameter definitions as was the case pre-fix.\n. Sure thing!\n. Is parameter injection at the route level against best practices? I could see this being useful for other things. Being able to create a reusable getChildren action with scope-limiting done through the route definitions would be pretty useful in my project and would make for faster prototyping. Don't want to expose (or filter) all the combinations of parent/children relationships with a { path: '/:parent/:id/:child', action: 'getAllChildren' } route but want to quickly add an endpoint for GET /projects/:id/campaigns route?\nIt'd be easy with \n{ path: '/projects/:id/campaigns', action: 'getChildren', params : { parent : 'projects', child : 'campaigns' } }\nMy project is loaded with a couple dozen actions like campaignGetTasks, projectGetCampaigns, campaignGetNotifications and they could all be distilled into the same action with parameter injection. Seems appealing to me.\n. Good point, @PhilWaldmann! I haven't used WS/sockets in AH yet so thanks for chiming in about that. I do like Evan's approach of using apiVersion as its own parameter. This would provide a good option for managing versions for people who didn't integrate API version selection into their clients (note to self... integrate API version selection into my project!)\n. Perfect! Thanks for the quick reply.\n. Love it! :+1: \n. Alright, details are in the pull request. As always, I'm open to input or tweaks!\n. So should the verbose option be stripped altogether, then? I like the idea of having a single override for debugging, but perhaps it's just too confusing.\n. Alright.. you may still not like having all of these options under the taskLogging object. If that's the case, I'd like more specific direction on how you'd like the options split between taskLogging and schedulerLogging and would be happy to make those changes.\n. Haha you guys crack me up.\nI'm coming down from a weekend in the mountains, should have this PR wrapped up tomorrow (:\n. Alright, my apologies for the delay. This ought to do the trick.The failing build seems to be unrelated timeouts.\nPlease be extra verbose if further tweaks are needed ;) \n. Hahaha :+1: \n. @hzahoori - It looks like you're on the right track here. The reason that /allUsers is available through all of the http methods is that \"simpleRouting\" is enabled. Disable that option in config/servers/web.js so that the only method of accessing that endpoint is through the routing configuration.\nRegarding the payload options, you could easily create a bit of middleware to meet your specific use-case. Check out the docs here - http://www.actionherojs.com/docs/#action-middleware\n. More specifically, the query/body payloads can be accessed at \ndata.connection.rawConnection.params = {\n  query : {},\n  body : {},\n  files : {}\n}\n. Fantastic! Glad that was a quick fix.\n. Yes, good catch! Copypasta.. Fix inbound.\n. I was keeping things simple and leaving the debug-level stuff alone. We can take it to that level of detail though, if you'd like.\n. ",
    "jtmarmon": "If you don't define an action it still blows up in development or production, so I'm pretty sure the wack is on the side of the test environment, not the other two\nEDIT: now I can't recreate the blowup in dev or production so maybe i'm wrong here.\n. As far as I can tell I don't have any files without an action o_O\n. Maybe it's because I have sub-folders in /actions i.e. /actions/GET/action.js\n. As far as I can tell everything in /actions exports an action ..\n. @S3bb1 Ah makes sense.  Ok so the bug happens in the catch from lines 92-96 of actions.js:\n} catch(err){\n      api.exceptionHandlers.loader(fullFilePath, err);\n      delete api.actions.actions[action.name][action.version];\n }\nIt tries to load in the module but if any error occurs in requiring the module it tries to delete the action from api.actions.actions.  I think we should add another try/catch that attempts to delete the action and if that fails throw the first error because that error is more informative about what's going on in the required module.\nSuggested fix:\n} catch(err){\n      try {\n        api.exceptionHandlers.loader(fullFilePath, err);\n        delete api.actions.actions[action.name][action.version];  \n      } catch(err2) {\n        throw err;\n      }     \n    }\n. > \"nice catch!\"\nNice pun ;)\n. @evantahler I also like the generator style.  I'll submit a PR when I get a chance.\n@neilstuartcraig Might be more work than it's worth if no one actually likes the verbose style.  Do you?\n. hey sorry @evantahler i should get to it by next weekend\n. oops accidental close\n. If people agree this would be useful I'll try to submit it in a PR along with #508 \n. Got it.  I wanted to be able to cancel a scheduled event when a user hits a certain route, as the alternative is to check if the user had accessed said route in our database, but it seems more efficient the latter way considering I'll have a lot of tasks.  Thanks :+1: \n. Ah - uninstalling and reinstalling the package globally worked. My bad :P\nFor the record:\n- OSX v10.9.4\n- Node v0.10.26\n- Npm v1.4.3\n. awesome :+1: did you intend to have the default value for scheduler be true? Previously it was false. Also, how does this affect the use of the --workers flag?\n. I like it. Workers also sound like they're run on separate threads so that's probably a better nomenclature.\n. Perhaps I'm not grepping the purpose of your PR, but it seems a lot cleaner and simpler to use env variables for this stuff. It makes more sense to me to have config files which container their own logic and just let you use env variables for the secure configuration parts. That's what I've been doing at least.\n. fair nuff. consider me educated :smile: \n. just noticed that this typo contradicted the point of that section so i figured i'd fix it\n. hmm it looks like locally what's happening is that it's hanging on the coverage step... i'll mess around with it tomorrow and see if i can get it to pass :confused: \n. any idea why this might break istanbul? for some reason it just hangs when writing coverage\n. who knew code coverage was such a pain :unamused: \n. awesome. being able to write middleware for specific actions is definitely something I've needed (e.g. rate limiting certain actions per-ip)\n. ",
    "mstdokumaci": "Unfortuantely no, starters run even more late, just before server boot. I guess current architecture is built on independent workers scenario. Nothing runs before forking. Each worker should have its own DB connection pool and everything.\n. I was mistaken by thinking that process.env.NODE_ENV was not set yet while loading tasks. Thanks for the answer. \n. - actionhero 11.5.1\n- tcp socket only (not websocket)\n- haproxy settings here:\nlisten game\n        mode tcp\n        bind :5000 ssl crt ...\n        log global\n        option log-health-checks\n        option tcplog\n        option tcpka\n        timeout client 3600s\n        timeout server 3600s\n        timeout queue 5s\n        timeout connect 5s\n        maxconn 100000\n        server app1 app1:5000 check on-marked-down shutdown-sessions\n        server app2 app2:5000 check on-marked-down shutdown-sessions\n        server app3 app3:5000 check on-marked-down shutdown-sessions\n        server maintenance 127.0.0.1:15000 backup\n- haproxy and app servers are on same local network. app1, app2 and app3 are aliases for local 10.something ips written in hosts file.\n. actionhero socket server is not secure actually.\nssl connection is terminated at haproxy loadbalancer and connectin from haproxy to app servers are insecure. they are already in same local network.\nour mobile app is still waiting for review at itunes so servers are not loaded in any way yet. there is a connection middleware making a redis call but that function has no callbacks so can not be blocking i guess.\nhow can i workaround this thing until we discover the real reason, without ignoring all other errors. can you think of an elegant way?\n. With same setup I've seen this trace at one of app servers today. Cluster seems stopped working with no reason. Nothing I can see in logs. Might this be because of a weird behaviour of HAProxy?\nnotice: cluster complete, Bye!\nevents.js:85\n      throw er; // Unhandled 'error' event\n            ^\nError: channel closed\n    at ChildProcess.target.send (child_process.js:414:26)\n    at sendHelper (cluster.js:676:8)\n    at RoundRobinHandle.handoff (cluster.js:198:3)\n    at RoundRobinHandle.distribute (cluster.js:184:20)\n. ",
    "crrobinson14": "I love the simplification. My only question is about the Redis config. Does referencing the redis block from the rest of the config share that connection, or will it use those details to make a new one?\n. That's not the best strategy for the kinds of material this PR lets you provide overrides for. Consider:\n1. Environment variables are exposed in a number of ways - they're not great places to put passwords.\n2. Some types of config elements require access to the \"api\" object to make decisions (which is why it's passed to each callback in the first place). Environment setup is too early to use PART of the startup to make the next decision.\n3. Environment variables are a tedious place to put settings if you need many of them. It's fine for a port or two... but not for an entire MySQL/Redis config setup with host, port, user, pass, pooling, etc.\nWhat this PR does is allow you to use the standard 'config' folder, as you do today, but in addition you can provide something like a 'local-config' folder that would provide overrides. This makes it very easy to put that folder into your .gitignore and thus avoid accidentally (or deliberately) committing passwords, API keys, and other things to your repository. This is a common best practice and is very important for enterprise software projects. You can look at Drupal, Loopback.io, Django, and well, most other major frameworks for examples of this pattern.\nIt's also optional. The old functionality still works as-is - this just gives you an extra level of control when you want it.\n. I'm confused - what is the goal of this change? Can you add some detail?\n. Oh, I see now what you mean. Yes, we're hacking around this ourselves. It's especially important for long-lived connections like WebSocket requests.\n. Travis did the same thing to me last time. The tests all pass, but one node runs too slowly and times out. Just luck? Committing again to bump it through.\n. Closing this PR because it's a little awkward in Github to have overlapping PRs from a single fork. Let's discuss the other one, about more flexible middleware declarations, first, then revisit this.\n. Oh, note that I illustrate how per-action configs can be handled, but didn't actually provide a sample. loadFullUser in the example above would be config.loadFullUser in the handler shown.\n. @neilstuartcraig Your module is very interesting - thanks for contributing it! I'm not sure if they can be MERGED though. I think each contribution adds something different. This PR focuses on allowing actions to be declarative about the middleware they require via settings in their meta-data blocks. Yours focuses on allowing middleware to be much more flexible. They're pretty different goals because one puts the burden on the action developer and the other puts it on the middleware developer.\nIn fact, it seems to be that some people might want BOTH options in their projects. Some kinds of middleware are more utility-oriented, generically useful across a mix of actions. Your plugin is probably the best choice for those because if you want to apply 12 different middlewares across a mix-and-match of actions, it would be kind of annoying to have to specify them in EVERY action file. Your own examples are perfect use-cases - capitalization, translation, and filtering tools.\nMine is more focused on cases where you have fewer choices made on broader bases, and especially where configs might change from action to action. Session managers are a good example, and so are auditing and rate-limiting mechanisms. For those, it would be super confusing to have a huge bucket of config blocks somewhere outside the actions forcing you to look at two files to figure out what an action is going to do...\nI would guess that they could easily be made compatible, though. All we'd need is a call to api.actions.addMiddleware here, where addPreprocessor is also done:\nhttps://github.com/neilstuartcraig/TDPAHDynamicPrePostProcessorLoader/blob/master/TDPAHDynamicPrePostProcessorLoader.js#L35\nIf that was done, developers could use both options simultaneously!\n. That makes perfect sense to me. I can adjust it tonight. I assume that means you'd want to put this in 11x since it's a breaking change... Or do you want to keep the add[Pre|Post]Processor and just have them be basically a polyfill from the old behavior to the new?\n. OK, I switched the tests to the other method, but just to confirm, you'd want this to remove add[Pre|Post]Processor? The only thing that uses them in the framework is the test suite. You have a lot more tests for the generic functionality than I put into my case because I hit a lot of combinations in one pass.\nFor example, the current test list has a check to be sure it can run a pre-processor. Then it tests that it can run pre-processors in the right order. I didn't do the first test against the middleware aspect because by proving you can run them in the right order, you prove that you can run them at all. :) But that's a personal preference - I know some people prefer more, smaller tests to help identify where failures happen when they do. Let me know what you're comfortable with here.\n. FYI this is just me rebasing these changes on top of PR #571 and getting rid of the dummy action per Evan's request above. It does not (yet) remove add[Pre|Post]Processor.\n. @evantahler Makes sense to me, but we're pre-launch on our project and I'm super tight on time for a bit. It might be next week before I can complete this.\n. @evantahler I'm ready to get back into this and just wanted to review where we stand so we can get it finalized.\nJust to recap, you're cool with making middleware more expressive and declarative, but you want to go all-in and remove the old addPreprocessor/addPostprocessor options as well? I just want to confirm this because it looks like there's increasing interest from some other contributors for making plugins, and I didn't want this to be a blocker for them.\n. Why not make ActionHero 11 line up with Node 11? Put the generators there. I really like them but they're \"candy\", not \"oatmeal\".\n. Why the fork? Forks are great if you think you're going to change your mind, but it's not like the old versions are going away. The whole point of NPM and semver is to allow old clients to continue with what they have, and those that are prepared to upgrade can do so.\nSome projects fork to make it easy to maintain old versions - but the fix:feature ratio for AH is very low if you look at recent commits...\nAnother option would be for people who want to stay on the old code tree to make the forks themselves...\n. @paulxtiseo I don't disagree. It's just that the trend in the project has been to follow semver, where an in-project branch and major build number did the same thing. If it's going to be embraced by the core project, forks get complicated when people want to contribute because it's not always clear what to fork from and how to stay up to date. This is all personal opinion, of course. Just tossing in my 2c. Ultimately it's Evan's call.\n. Just a data point: using AH 12.2.3 here on NodeJS 4.2.3 which includes v8 4.5.103.35 (node -p process.versions.v8). We're successfully using a bunch of the ES6 \"staging\" features included in NodeJS without using the Harmony flag or a transpiler, including block scoping, Object.assign (very handy), etc. It's a good combination.\nI'm not in any way suggestion that Babel users don't have a point, but I'm PERSONALLY not a fan of the transpiler approach for the same reason I'm not a huge fan of CoffeeScript. In the end, the code will \"run\" as whatever is natively supported - so that's where you have to optimize, debug, etc. I prefer not to think in one language and debug in another. It doesn't feel like these new features are so far off that I can't wait until 2016 for the bulk of them.\nJust my own personal opinion, FWIW.\n. Yes, we used it here to manage ActionHero for http://firetalk.com. I'm a big fan of it, but we just couldn't get its CPU usage to be consistent. It's a problem that's been reported and solved several time for several different reasons just in the past year we've used PM2, and we just couldn't run it any more. We still use it on QA boxes where we don't need clustered operation but everywhere else we've converted to foreverjs.\nHowever, the config above does work very well for us and we do have boxes still running it. I don't know what \"don't play well together means\" but we use Jenkins to rebuild on every git commit/push and PM2 worked very well restarting ActionHero reliably.\n. @kodypeterson I'm guessing that's what it is. Our staging server deployment script was nothing more than:\nssh root@STAGING \"cd /opt/app && git pull && npm install && pm2 restart WWW\"\nNote that pm2 is sensitive to user permissions/rights. Any user can use it to restart a service - but only if they have read/write access to the .pm2 folder! This is created by default in the home directory of the first user who runs it and causes trouble for all others, especially if you go between root and non-root. You can move it with an environment variable... but you have to be careful to avoid getting two \"God daemons\", which happens for the slightest mistake. Heaven forbid you need to change the environment variables of the process. You basically need to delete and re-create it.\nThis was one of the reasons we dropped it for foreverjs. Forever isn't quite as feature-rich but it's much more forgiving.\nI would suggest that none of this actually has anything to do with ActionHero - you might want to confirm back to Evan so he can close the ticket.\n. Update for posterity (not re-opening, this is just comment/doc). We have now switched away even from foreverjs to using Supervisor. Although this is a Python tool it's a REALLY well made application, very easy to use, and it hits all our NodeJS buttons as well as those for other languages as well.\nHere's a sample config - note that you can include a \"stop signal\" that ties to TERM/USR2/etc. to allow ActionHero to do friendly-restart actions. This is very important when running a task processing node to let AH clean up its workers being stopped.\n[program:myapp]\ncommand=/opt/myapp/api/node_modules/.bin/actionhero startCluster\ndirectory=/opt/myapp/api\nenvironment=NODE_ENV=\"production\",ACTIONHERO_CONFIG=\"config,local-config\"\nautostart=true\nautorestart=true\nstopsignal=TERM\nstderr_logfile=/var/log/myapp.err.log\nstdout_logfile=/var/log/myapp.out.log\n. Does this have to be more than a simple typo?\nconfig/api.js:        'locale': [path.join(__dirname, '/../locales')]\nconfig/api.js:        'locale': [require('os').tmpdir() + require('path').sep + 'locale']\n\nOne uses singular, the other, plural.. I went partially down this road myself at one point but I realized that it would probably be a lot of work to do \"really well\", which is to say, dealing properly with array/nested object types and things like that.\nI would suggest you re-approach this with a simple initializer that exposes a validation call for the top level element itself, and uses http://json-schema.org/ and a validator like https://github.com/epoberezkin/ajv to do the checking. It would be pretty easy to do, would rely on standards everybody else is doing, and would make a great plugin without adding complexity to AH Core. I'd be happy to help if necessary.. @evantahler Sorry, to clarify, I wasn't taking issue with the PR. Just suggesting an alternate route I've used that's fairly easy to implement with an initializer. It meshes well with the Swagger typed-object approach where to define the schema for an object ahead of time and make it part of your API spec. For implementation in an action, you can do things like:\njavascript\nbookData: {\n    required: false,\n    validateType: 'Book'\n  },\nThe initializer can look for a validateType (or similar) key defined in this way, and call a JSON schema validator tor check this.\nThe reason this is valuable is when you have multiple actions all needing similar/identical type checks. Defining the validations purely in the action template could be messy in those cases. But obviously it's a valid approach for some others - that's why I call this \"another option\", not \"it should be done like...\". I'm personally a little confused about the purpose here. The entire purpose of the design of ActionHero is to \"decouple\" the declaration of a task or action from the mechanism that invokes it. \nThis is an architectural characteristic. Decoupling means you can do things like have task workers executing tasks on different servers from where they were originally enqueued (orchestrated through Redis). For actions, it makes it easier to do things like have middleware layers that define pre/post-execution handlers to add services like session management, QOS tracking, etc.\nBut decoupling is also a design decision. It means you do not specifically require the task from another file and directly run it. It's not so much that you CAN'T - it is that you are not supposed to. It is literally a design choice in the system to not do this, not a shortcoming but rather a strength if decoupling is something you believe is valuable.\nThis is 100% my personal opinion, but I think there's incredible value in the architecture and design approach of ActionHero, and you get the most value out of it when you want those things in the first place. That does NOT in any way mean there aren't \"better ways\" for various things. I did this myself: I have a Gist here that allows the use of async/await mechanics in Tasks and Actions so you can do linear logic processing instead of using callbacks/promises:\nhttps://gist.github.com/crrobinson14/1750f3f6e8c0a941751b\n(Note: this should be updated now that Node 8 is out with native async/await, but you get the idea.)\nJust my 2c, but if you prefer a more procedural approach you might be happier with Express or Sails.... @billybonks I'm not challenging the approach at all, this is truly a for-my-information question: what would this approach actually do? In what use-case would you replace the require call with something else? Are you trying to hook the module load process at this stage?. @evantahler Aside from the length checking ability it adds, why jump through the Buffer/toString hoops to copy rawBody out? It seems like it's extra processing that may not be necessary?\nTwo possible options that might be an enhancement?\n1. Instead of making this a global setting, make it metadata in the action. I think it's likely that only one or two API calls in most stacks will need this, so most devs probably don't need to turn it on for every call, just weird stuff like Stripe (which signs the body with a header field so you need to check the raw body).\n2. Just store a ref to rawBody, but add a connection class method to obtain it, such as .getRawBody(). That could do the buffer/string/length limit dance only where required. This doesn't reduce the memory footprint (because a ref is saved for rawBody, of course), but defers it until other things have done. What if input validation fails, or other middleware aborts the connection? The raw body processing will have been wasted - making it a great DDOS make-work vector.... Although this change is generally a good idea, it has the potential to break some sites that aren't prepared to deal with it (non-SSL-enabled ones). I feel it:\n\n\nShould be behind at least a \"minor\" version bump, and\n\n\nShould include at least one or more adjustments to the documentation to call it out, particularly for new users.\n\n\nIt's not clear to me but won't making this a global default also break local development usage (e.g. on non-HTTPS localhost)?. I looked into this a little more. It seems this is correct, MDN has this to say:\n\nNote: The Strict-Transport-Security header is ignored by the browser when your site is accessed using HTTP; this is because an attacker may intercept HTTP connections and inject the header or remove it. When your site is accessed over HTTPS with no certificate errors, the browser knows your site is HTTPS capable and will honor the Strict-Transport-Security header.\n\nIt still makes me a little nervous, because the RFC itself doesn't appear to call this out. It seems like a behavior browser vendors could change in the future based on evolving security policies.\nThat said, I created a sample ActionHero project using the documented starter process at https://www.actionherojs.com/downloads/. I made this change manually to my local configuration then ran the service in both dev and production modes. I tested access to it via Safari, Firefox, and Chrome and encountered no issues. In all three browsers I inspected the network traffic to verify that the header was being sent, and follow up requests to verify that nothing broke. It looks good to me. I suppose if browser manufacturers do change their policies it's no different than any of the other past things they've done that developers have had to put up with - and not anything AH should be solely responsible for.\n@grsmyth If this header is important enough to want to include by default it would be good to add a test case to verify that it's being sent. (There are code pathways where headers can be altered and we'd want to know nothing was nuking it.) If you have time please consider adding one for it. That said, I know from personal experience that adding barriers here stymies contributions, so hopefully Evan won't kill me but I'm going to merge this now. Thanks for your contribution!. It's used by the test case. Is there another way to do the test case (since the other actions don't need middleware)?\n. Because of a quirk in NPM's Semver I suggest starting at 0.1.0. NPM allows updates that don't\ntouch the LEFT MOST non-zero number. If we are on version 0.4.3, this will allow an update to 0.4.4 but NOT 0.5.1. However, if we are on 1.4.3, and we publish 1.5.1, this WILL be brought in automatically.\nThe trouble with 0.0.# is that if you bump from 0.0.5 to 0.0.6 your changes will not be brought in even though instinctively this is a non-breaking change! In this case the left-most non-zero number is the patch level itself, so npm update won't see it.. This neatly solves the scoping issue too. Nice.. Should we start git-ignoring the generated files and just have Travis do this generation and publication? We're going to start getting some awfully messy diffs.... A little confused about a detail - you may know this instinctively because you just wrote it. What's the order of operations here if your main project overrides a file in the plugin, as it can override core today? Will that still work? It SEEMS like this is backward to support that but I wasn't sure at first glance and it's late.... ",
    "donnyhardyanto": "Dear Evan,\nThe Actionhero library is superb. Thank you very much!\nI was using actions and now I am replicating your simple.js example and\ntried to do exactly like you and find out cannot do Step Over.\nSo it might be my debug configuration or my nodejs is the problem? I am\nusing node v.0.10.33.\nCan you tell me what is your debug configuration in WebStorm?\nDonny\nOn Sat, Dec 27, 2014 at 1:12 AM, Evan Tahler notifications@github.com\nwrote:\n\nI installed web storm to check this out.\nIt looks like I can step over properly to me? I made an initializer with a\nbreak point. At first the variable tester is undefined, and then I \"step\nover\" once, and the variable is defined. This seems correct to me. Can you\nadd more detail?\n[image: screen shot 2014-12-26 at 10 09 47 am]\nhttps://cloud.githubusercontent.com/assets/303226/5558750/a4177fa6-8ce7-11e4-9f31-ec43304d088f.png\n[image: screen shot 2014-12-26 at 10 10 07 am]\nhttps://cloud.githubusercontent.com/assets/303226/5558751/a568720c-8ce7-11e4-8f93-dfa207cf20e1.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/evantahler/actionhero/issues/529#issuecomment-68151678\n.\n. I finally can get this working. The problem is because the Debugger cannot find bin/actionhero in the project directory if you install ActionHero using NPM. To use Debugger you have to use git clone the entire project, which give bin/actionhero on the project directory.\n\nThe debugging parameter is below:\nNode interpreter: /usr/local/bin/node\nWorking Directory: \nJavascript file: ./bin/actionhero\nThe last line of config is the most important.\nAgain thank again to Mr. Evan Tahler for creating great library. Thanks.\nRegards,\nDonny\n. ",
    "vahid-sohrabloo": "@evantahler  Thanks.\nYou want I add test in Test folder? I don't found any test for chatroom in test folder. Can you help me?\n. Sorry for my delay.\nThis is my first Test in nodejs :smile: \n. ",
    "aimbot": "Excellent, so my test case was flawed to test the re connection stuff. I'm not too knowledgeable about the \"proper\" way to handle reconnecting and whatnot but does this mean that the client side since its cleanly closed will not reconnect unless manually prompted? Thanks a ton for looking into it this far so quickly! I'm really loving this framework.\n. ",
    "MacTynow": "Ho, right, we are using 8.0.1...\nSorry about that, thanks for the help.\n. ",
    "coveralls": "\nChanges Unknown when pulling 8c384968688c86fc86d5d5cde565d983c630fd63 on coveralls into * on master*.\n. \nChanges Unknown when pulling 7f53d0f63bea5e72ccabfed09017c1055f26d98b on coveralls into * on master*.\n. \nCoverage increased (+0.03%) to 92.16% when pulling 71c2526a90992355cffd25f1d5b74b3380ca4c12 on crrobinson14:master into 4386c60497813d8cbe4a0903b13a9399359c98a5 on evantahler:master.\n. \nCoverage increased (+0.03%) to 92.16% when pulling ce7a821e28839bf1b3aef6dea0e21737f47cb46b on crrobinson14:master into 4386c60497813d8cbe4a0903b13a9399359c98a5 on evantahler:master.\n. \nCoverage increased (+0.03%) to 92.15% when pulling b498d33188e2256a1e80e585f7ef5be1bdd8ed3a on crrobinson14:master into bead9c15d7eed180e8d800a11a368b72863827ed on evantahler:master.\n. \nCoverage increased (+0.03%) to 92.15% when pulling bef5f9e10300f840c9a01f6896035b835ffd9c54 on connection_fix into d2eee1d363759486d265390329554845e291670b on master.\n. \nCoverage remained the same at 92.12% when pulling 42dbc33f5ade3626274f5003a588124dd357ef71 on nodeEnthu:master into bead9c15d7eed180e8d800a11a368b72863827ed on evantahler:master.\n. \nCoverage remained the same at 92.12% when pulling 2f67dc0edf728fd23085bea59c489a1a75aff866 on keifukuda:fix_route_regexp into c600dbc0cd13e38f5d70a524ddef54dbe6a7203e on evantahler:master.\n. \nCoverage increased (+0.01%) to 92.13% when pulling 2a2b886e04b146dea9ac17e5d54eeb26ea00b771 on keifukuda:fix_route_regexp into c600dbc0cd13e38f5d70a524ddef54dbe6a7203e on evantahler:master.\n. \nCoverage increased (+0.03%) to 92.16% when pulling 8dc111ff51e8444c6c7e3a1196c422a7cd996d80 on ws_say_order into e8f04165a08add06172b7edb0144f029a6cb6ebe on master.\n. \nCoverage remained the same at 92.16% when pulling b65503d159008babed74220a6bdc1d56f24c8840 on v0.11.0 into f74a3bb50720fd998d70b3168872c8593e6a175c on master.\n. \nCoverage remained the same at 92.16% when pulling b65503d159008babed74220a6bdc1d56f24c8840 on v0.11.0 into f74a3bb50720fd998d70b3168872c8593e6a175c on master.\n. \nCoverage remained the same at 92.16% when pulling b65503d159008babed74220a6bdc1d56f24c8840 on v0.11.0 into f74a3bb50720fd998d70b3168872c8593e6a175c on master.\n. \nCoverage remained the same at 92.17% when pulling af646c60b30230dadb68f98fe1c21db48e9f91ee on S3bb1:master into e7b6b8f221d295a4e36de55404ef916dfc72a7a3 on evantahler:master.\n. \nCoverage remained the same at 92.17% when pulling 8400287d2a5e9d4da2d15c5f52cda352c505c21a on dangerdespain:params-fix into a140badf20d3cd9e8abe255203dd9d6712a1c948 on evantahler:master.\n. \nCoverage remained the same at 92.17% when pulling 8400287d2a5e9d4da2d15c5f52cda352c505c21a on dangerdespain:params-fix into a140badf20d3cd9e8abe255203dd9d6712a1c948 on evantahler:master.\n. \nCoverage remained the same at 92.17% when pulling 8400287d2a5e9d4da2d15c5f52cda352c505c21a on dangerdespain:params-fix into a140badf20d3cd9e8abe255203dd9d6712a1c948 on evantahler:master.\n. \nCoverage remained the same at 92.17% when pulling 40ce21d5e590f568f4ce74c8b87545936b6d96f9 on dangerdespain:params-fix into a140badf20d3cd9e8abe255203dd9d6712a1c948 on evantahler:master.\n. \nCoverage increased (+0.0%) to 92.18% when pulling 4816d74b722b88748a24bfcb0f9f6e586eaa58c2 on rootStar-lock:master into 2226f54359ecabd2b6297df794c9898c970b9c0a on evantahler:master.\n. \nCoverage remained the same at 92.18% when pulling c10b076662c10028397d901eaa943956c045a331 on flapper into 501d07b9cf9801518f84b936cd1ead5a9c462c0b on master.\n. \nCoverage remained the same at 92.18% when pulling adde3c325fd4f1d2ada72cbf1991b2c681ad42bc on formal_event_protoype_client into f523bd2dcc4161223a93c3c885f4874f4e30bf68 on master.\n. \nCoverage remained the same at 92.18% when pulling adde3c325fd4f1d2ada72cbf1991b2c681ad42bc on formal_event_protoype_client into f523bd2dcc4161223a93c3c885f4874f4e30bf68 on master.\n. \nCoverage remained the same at 92.18% when pulling adde3c325fd4f1d2ada72cbf1991b2c681ad42bc on formal_event_protoype_client into f523bd2dcc4161223a93c3c885f4874f4e30bf68 on master.\n. \nCoverage remained the same at 92.18% when pulling adde3c325fd4f1d2ada72cbf1991b2c681ad42bc on formal_event_protoype_client into f523bd2dcc4161223a93c3c885f4874f4e30bf68 on master.\n. ",
    "keifukuda": "Including the parentheses is a regular expression.\njavascript\npath: '/login/:userID(^foo(bar|baz)$)'\n. ",
    "ivancevich": "Hi @S3bb1 thanks for your quick reply.\nI didn't know about the disableParamScrubbing property. It's nice to have that. The thing is, if I would like validation to be optional, say I want to be able to read the connection.params.userId parameter no matter if there is validation or not.\nFor the 2nd answer, I already knew that. All what I'm saying it is quite hard to find that, and not very handy. It'd better to have something like: connection.error(404, \"User not found\");\nWhat do you think?\n. Ok, I'll look into that. Thanks @S3bb1 !!\n. ",
    "rootStar-lock": "We use https://github.com/seegno/primus-objc and can\u2019t order params sent via websocket\nIn data log we see 2015-02-03 19:23:27.917 Primus-ios-test[12032:3805114] Sent outgoing::data: {\"message\":\"test\",\"event\":\"say\",\"room\":\"defaultRoom\"}\nIn this case handleData recieve {\"message\":\"test\",\"event\":\"say\",\"room\":\"defaultRoom\"}, after that AH remove \"event\" key and store data object into array \"words\" like ['test', 'defaultRoom']. In verbs processing AH make mistake and try to send message='defaultRoom' to room='test'. \n. Debug level log:\n2015-02-04 13:08:19 - debug: [server: websocket] verb verb=say, to=192.168.10.17, params=[\"test\",\"defaultRoom\"]\n. :thumbsup: and sorry for EOLs)\n. Sorry but this solution don't work for me.\nIn fork I just add data.response.gc_exposed = global.gc ? true : false; to actions/status.js \nand run $ node --expose-gc --nouse-idle-notification bin/actionhero start --daemon gc_exposed was false all the time.\niojs v1.8.1\n. Tested with \n1) node bin/actionhero startCluster --daemon --node-expose-gc --workers=4 --node-debug --title HelloCluster --node-harmony --workerTitlePrefix Worker\n2) node bin/actionhero start --node-expose-gc --node-debug --title Title --node-harmony --daemon\n. Ok i minimize own code. Now we can use node arguments like\n$ node --nouse-idle-notification --expose-gc bin/actionhero start(startCluster) --daemon\n. Sorry\n. OMG! A see I forgot some more important that hard-coded --isDaemon. Otherwise, is if(binary.argv.daemon){ is not guarantee that we must spawn child with --isDaemon=true?\n. No --node that is --node-x param where x is debug, expose-gc etc. Thats params splits and normilize to --x format. The are no connection between executable and this params. Executable to spawn child process always get from process.argv[0] which I assume the correct way.\n. Ok let imagine that line of code workArgs[workArgs.indexOf('--daemon')] = '--isDaemon'; will be executed when --daemon is missing. Then we have -1 constantly. But there are no chance to be with if(binary.argv.daemon){ \np.s I can rewrite base code use process.execArgv and it will go with minimal changes but it block us to spawn AH simple like $ actionhero startCluster --daemon --node-debug --node-harmony.\n. ",
    "cfr": "Hey Evan, I'm mobile developer working with @rootStar-lock. Do you need additional client-side info to clarify this issue?\n. ",
    "gcoonrod": "In what way is the following better than the preceding? I don't want to sound snarky but I feel like we traded one overly verbose debug level for another. Now both the debug and info level are overly cluttered with worker status information. \nIs there something obvious that I'm missing?\n015-03-06 00:52:28 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: x (event loop delay: 1ms)\n2015-03-06 00:52:29 - info: [10.0.2.15actionhero-hero] worker: started {\"workerId\":2}\n2015-03-06 00:52:29 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: + (event loop delay: 1ms)\n2015-03-06 00:52:30 - info: [10.0.2.15actionhero-hero] worker: ended {\"workerId\":2}\n2015-03-06 00:52:30 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: - (event loop delay: 1ms)\n2015-03-06 00:52:30 - info: [10.0.2.15actionhero-hero] worker: started {\"workerId\":2}\n2015-03-06 00:52:30 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: + (event loop delay: 1ms)\n2015-03-06 00:52:31 - info: [10.0.2.15actionhero-hero] worker: ended {\"workerId\":2}\n2015-03-06 00:52:31 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: - (event loop delay: 1ms)\n2015-03-06 00:52:31 - info: [10.0.2.15actionhero-hero] worker: started {\"workerId\":2}\n2015-03-06 00:52:31 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: + (event loop delay: 1ms)\n2015-03-06 00:52:32 - info: [10.0.2.15actionhero-hero] worker: ended {\"workerId\":2}\n2015-03-06 00:52:32 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: - (event loop delay: 0ms)\n2015-03-06 00:52:32 - info: [10.0.2.15actionhero-hero] worker: started {\"workerId\":2}\n2015-03-06 00:52:32 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: + (event loop delay: 0ms)\n2015-03-06 00:52:33 - info: [10.0.2.15actionhero-hero] worker: ended {\"workerId\":2}\n2015-03-06 00:52:33 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: - (event loop delay: 0ms)\n2015-03-06 00:52:33 - info: [10.0.2.15actionhero-hero] worker: started {\"workerId\":2}\n2015-03-06 00:52:33 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: + (event loop delay: 2ms)\n2015-03-06 00:52:34 - info: [10.0.2.15actionhero-hero] worker: ended {\"workerId\":2}\n2015-03-06 00:52:34 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: - (event loop delay: 0ms)\n2015-03-06 00:52:34 - info: [10.0.2.15actionhero-hero] worker: started {\"workerId\":2}\n2015-03-06 00:52:34 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: + (event loop delay: 0ms)\n2015-03-06 00:52:35 - info: [10.0.2.15actionhero-hero] worker: ended {\"workerId\":2}\n2015-03-06 00:52:35 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: - (event loop delay: 1ms)\n2015-03-06 00:52:35 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: x (event loop delay: 0ms)\n2015-03-06 00:52:36 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: x (event loop delay: 1ms)\n2015-03-06 00:52:36 - info: [10.0.2.15actionhero-hero] worker: started {\"workerId\":2}\n2015-03-06 00:52:36 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: + (event loop delay: 3ms)\n2015-03-06 00:52:37 - info: [10.0.2.15actionhero-hero] worker: ended {\"workerId\":2}\n2015-03-06 00:52:37 - debug: [10.0.2.15actionhero-hero] *** checked for worker status: - (event loop delay: 0ms)\n2015-03-06 00:52:37 - info: [10.0.2.15actionhero-hero] worker: started {\"workerId\":2}\n. When using multiworkers i was seeing workers stopped and started every second. Which really cluttered up the logs. What is the rationale for having those events at the info level?\n. Any thoughts on making the worker log levels controllable?\n. @evantahler, I added an attribute to the tasks config and set some of the node-resque messages to use that attribute to determine their logging level. I only applied that option to the messages that have been bugging me. \nAre there other messages that this option could/should be applied to?\n. @evantahler Any further comments or suggestions?\n. Should this still be open? @evantahler . Should this issue still be open? @evantahler . Looking for comments before making final changes. This current version will fail tests.\n. I'm ready.\n. Docs updated. Let me know if I need to add more detail.\n. \ud83d\udc4d \n. Closing request after talking with @evantahler. I will cut a new PR from the current version in the near future. :pray: \n. Should these functions be in the action or should they be added as an initializer and then exampled in the status action? \n. Hmm, not sure why tests won't pass on Travis...\n. Slight gotcha on the enqueue hooks. Sending an error in the before_enqueue next isn't enough to prevent the task from being enqueued. You must explicitly pass false for toRun.\n. I'm ready to merge.\n. Docs added!\n. I like this approach. \ud83d\udc4d \n. @evantahler what is the status of this issue?. @vladbalmos Can you add a test for this case?. @evantahler Any comments before I merge this?. @evantahler Ready for round two!. Sorry this is taking so long. Hope to have time in the coming week to work on it!. @jkelkar Can you provide a more detailed example? I'm having trouble understanding how having the path variables separated from the query variables in params is valuable. As @evantahler said they are all named variables so you should know how to address them without issue. \nIn addition a path like the one you described seems nonsensical... its just three variables. Did you mean to use /table/:table/field/:field/var/:var?. Perhaps nonsensical was a poor choice of words. I apologize. Let me explain\nmy confusion. The path you have described would match any three part path\n(e.g. /users/bob/listBeers, /orders/:id/items, /city/Stockholm/bars) which\ncould cause a conflict with other routes that you've registered in\nActionHero. If, however, you'll only ever register a single route like the\none you've described then you could achieve the result you desire by using\naction middleware to alter the params object prior to the action running.\nOn Fri, Jun 16, 2017 at 16:33 Jay Kelkar notifications@github.com wrote:\n\nActually:\n/:table/:field/:val\nmakes sense. It would be the last 3 segment route in this method. Here I\nchoose to mean I look for field with that value.\nSo say I want to update a row in table 'orderhead', where 'id' equals 20.\nI would use\n/orderhead/id/20\nand the payload would contain the fields that are being updated. say\nsubtotal=12.23, tax=... and total=....\nThe code processing this request already knows the path and that table,\nfield and val are part of the url and hence are to be used in the where\npart of the query and the rest of the payload (in what is traditionally\ncalled the body) is to be used in the set part (in this example: update\norderhead set subtotal=12.23, ... where id=20).\nIf this still seems nonsensical, we can drop the whole thing.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/actionhero/actionhero/issues/1073#issuecomment-309139263,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAshZCtFWcMeo_Gssi5R1E7VOPc6Tt9Vks5sEvSvgaJpZM4N4soz\n.\n. I'm glad I could help. If you have any other questions please feel free to\njoin our Slack channel.\nOn Fri, Jun 16, 2017 at 16:50 Jay Kelkar notifications@github.com wrote:\nI like with your suggestion. You have a very good point, one I had not\nthought of.\nI only have one route of this nature for a method and given the # of\nsegments in a route.\nI shall use middleware to extract what I need out of params and also to\nbuild the query. Thanks.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/actionhero/actionhero/issues/1073#issuecomment-309142410,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAshZJeG3D80w8BM0RoSWeJI-OtoqmlWks5sEviegaJpZM4N4soz\n.\n. Wouldn't this change only impact newly created projects? . Please add tests to cover normal behavior and error cases.. I like this. The empty super() is kind of annoying, but looking at the required parameters I don't see anything that can be readily left off.. I am marking this issue as complete after #1126 was merged. Ah, good catch!. I need to figure out what is going on with my commits here.. @evantahler Yes. I will remove the Waiting On Poster label and assign this PR to you when I believe it is ready. . @evantahler This is ready for your review now.. This is a change of current behavior. If existing users relied on this behavior it would be a breaking change.. Do actions failing after an upgrade with no other code change amount to a breaking change? The documentation does state that returning nothing is a valid response from a validator. So this change brings the behavior in line with the documentation. I could go either way honestly. Though I'm leaning more towards a minor version change.. If I understand this correctly messageCount was an incrementing value that kept a running tally of the number of requests the server had received? Why replace it with messageId and have a breaking change? Why not keep messageCount and add messageId?. @evantahler update?. What happens when you try and specify the auth function in config/servers/websocket.js?. We build up an instance of Queue in the Resque initializer. I don't think we have the necessary configuration information to pass to the constructor in the config file. We may need to treat these overrides similarly to how the Redis constructors are handled.. @witem Apologies for the delay. I'll try and pick this back up shortly.. @evantahler Our assumption about the property names of a class vs a function doesn't seem to hold.\n\n```js\ntest('class vs function', () => {\n      let f = function () {}\n      let k = class K {\n        constructor () {\n          this.a = 1\n        }\n      }\n      let a = () => {}\n  console.log('function')\n  console.log(f)\n  console.log(typeof f)\n  console.log(Object.getOwnPropertyNames(f))\n  console.log(api.utils.isFunctionNotClass(f))\n\n  console.log('class')\n  console.log(k)\n  console.log(typeof k)\n  console.log(Object.getOwnPropertyNames(k))\n  console.log(api.utils.isFunctionNotClass(k))\n\n  console.log('arrow')\n  console.log(a)\n  console.log(typeof a)\n  console.log(Object.getOwnPropertyNames(a))\n  console.log(api.utils.isFunctionNotClass(a))\n\n  expect(api.utils.isFunctionNotClass(f)).toEqual(true)\n  expect(api.utils.isFunctionNotClass(k)).toEqual(false)\n  expect(api.utils.isFunctionNotClass(a)).toEqual(true)\n  expect(api.utils.isFunctionNotClass({})).toEqual(false)\n})\n\n```\nlogs the following and fails on the first assertion.\n```bash\nconsole.log tests/utils/utils.js:121\n    function\nconsole.log tests/utils/utils.js:122\n    [Function: f]\nconsole.log tests/utils/utils.js:123\n    function\nconsole.log tests/utils/utils.js:124\n    [ 'length', 'name', 'prototype' ]\nconsole.log tests/utils/utils.js:125\n    false\nconsole.log tests/utils/utils.js:127\n    class\nconsole.log tests/utils/utils.js:128\n    [Function: K]\nconsole.log tests/utils/utils.js:129\n    function\nconsole.log tests/utils/utils.js:130\n    [ 'length', 'prototype', 'name' ]\nconsole.log tests/utils/utils.js:131\n    false\nconsole.log tests/utils/utils.js:133\n    arrow\nconsole.log tests/utils/utils.js:134\n    [Function: a]\nconsole.log tests/utils/utils.js:135\n    function\nconsole.log tests/utils/utils.js:136\n    [ 'length', 'name' ]\nconsole.log tests/utils/utils.js:137\n```\nNote that both the function and the class report the same properties.. https://stackoverflow.com/questions/30758961/how-to-check-if-a-variable-is-an-es6-class-declaration Gives some good context. Look in the comments of the second answer.. @evantahler Looks like we're getting some intermittent test failures.. I just want to see the tests run for now.. I think it might be better to match the formidable default of 200MB and add a configuration override that allows setting the value higher.. Is there any way to test this?. This initializer is only there as a demo. It'll be removed completely.\n. This dep will be removed before the final PR is ready.\n. This is the resque plugin that handles the middleware processing.\n. Why not move these helper functions into api.status initializer? Provide a couple OOTB status apis.\n. No async series?\n. Should we do a check on itterations to avoid any endless while loops?\n. True, but I think that AH should have a minimum opinion about whether or not an individual node is healthy. Now, you could achieve that with documentation. But I personally think that adding a few initializers is valuable.\n. Won't prevent someone passing in Infinity and creating an endless loop. But that would be a very specific action.\n. Those are not trivial changes. Why do you want to expose them? \n. Please add a test for this change as per @evantahler request.. By default the generated tasks will fail?. Is there a reason we can't use ES6 string templates here?. So the actual limitation is that the localized string templates are stored in JSON files which do not support ES6 string templates?. My point was that it would be nice to only have a single type of templated string in the codebase. But I understand the limitations of use i18n-node.. :+1: . That makes sense.. This pattern feels odd to me. If you're only going to need one thing out of api I believe that const cache = ActionHero.api.cache is clearer. Destructuring makes more sense in cases where you need to pull a number of things out of api. e.g. const {cache, log, orm} = ActionHero.api.. This is \ud83d\udcaf . ActionHero is only used once. Could be condensed to const api = require(path.join(__dirname, '..', 'index.js')).api.. Oops. Is there a reason these parameters aren't namespaced? e.g. api.actionheroInstance.running.. Each one of the classes in this file are going to require in api and then modify it. Why not create the api object at the start of the file and then run a reduce over the array of Classes and pass in api. That should remove the need for the weird require statements.. Why the change from connection to data?. Do we have an examples folder or the like that can house jsdoc'd files?. Could we read this value from their git config?. What does this do? If there is no error delete it?. I like the idea of allowing overriding but logging a warning message.. What is this doing?. I would prefer to see Array.prototype.includes() used here as it is less confusing to future readers.. Is this a check to wait for the server to finish starting up?. These two lines seem brittle.... I'm not a fan of an option name that needs to be in single quotes because it isn't a valid javascript key. Why does this need to be the option key?. toEqual() is equivalent to to.deep.equal() as well as to.equal()?. Why the folder rename?. Why change this to a blocking method?. I like that we can reduce our dependencies!. What if any of these parts are null or undefined?. You have this defined elsewhere why not import it here?. Typo: utils.arrayStartingMatch. This assumes that the arrays are sorted. Maybe add that assumption to the jsdoc.. ",
    "Frankzhaopku": "Sorry for not replay in time and happy Chinese New Year. We use Java-websocket as our Android connection tool. The OS is CentOS 6.6 with actionhero 9.4.1 and node v0.10.33. The error still happens today. PS. when I use test environment, the error happens, but the error never shows under production environment.\n. OK, thanks. We don't have a browser client but we have some debug tools using websocket-js and they work well. I will upgrade soon and thank you again.\n. ",
    "paulxtiseo": "Why an XOR on the options? I would actually recommend forking AH into a separate AH2 codebase, and slowly transitioning AH1 into a maintenance-like mode with little functionality changes for the projects that cannot migrate quickly for whatever reason. But, only if all the upcoming ES6 changes will extensively change the codebase.\n. @crrobinson14 I suggest (humbly! :) ) that if AH wants to make new or improved functionality available to everyone, yet wants to migrate the platform to ES6, there is an inherent fork in the road, isn't there? Either you choose to make your new/improved stuff available to all (ES6 and non-ES6 end users) and that requires mutually-incompatible code diffs, or only to ES6-friendly end users.\n. QuestionPro or SurveyGizmo. The former may have good, free service for projects like yours if you talk to them. Lots of free, open poll options if you google for it... Google itself has Google Forms.\n. When I use a console.log(this) in the input validator, I get the action, not the api, object. Is this what was intended? I have AH v13.3.1.\n. My apologies. I was using a fat arrow for the validator function.\n. Oops, yes. Should be stop() in my post. I am using it correctly in the code.\n. Here's the initializer in question. The error is triggered by passing a poorly-formatted task.schedule to the parser in line 20. If I move the stop() to line 16, it still errors.\n```\n'use strict';\nvar _ = require('lodash');\nvar ruleStringParser = require('rrule').rrulestr; \nmodule.exports = {\n  loadPriority:  1010,\n  startPriority: 1010,\n  stopPriority:  1010,\ninitialize: function(api, next) {\n    next();\n  },\nstart: function(api, next) {\n_.forEach(api.config.agent.tasks, function(task) {\n  if(task.active != false && (typeof task.schedule === \"string\")) {\n    var schedule;\n    try {\n      schedule = new ruleStringParser(task.schedule);\n      api.log('fileSynchronizer.schedule: ' + schedule.all(), 'info');\n      //api.tasks.enqueue('fileSynchronizer', null, 'default');\n    }\n    catch(e) {\n      api.log('Could not parse schedule for ' + task.name + '. Agent will stop.', 'error', task.schedule);\n      api.commands.stop();\n    }\n  }\n});\n\nnext();\n\n},\nstop: function(api, next) {\n    next();\n  }\n};\n``\n. - Where do I put a test for a new API function.\n- I believe on the second point I added a second test to an if statement (line 122) toinitializers/utils.js` that may be a problem? If so, I'm not sure how to \"refactor the code to use this new method\"?\n. ",
    "heavyk": "btw you can use generators now... I will give an example using our sign-in action (forgive the livescript)\n``` ls\nrequire! \\genny\naction = (gen) ->\n    fn = genny.fn gen\n    (api, connection, next) ->\n        fn api, connection, (err, res) ->\n            if err\n                connection.error = err.stack\n                res = true\n            next connection, !!res\nexport sign-in =\n    name: \"sign-in\"\n    description: \"I am sign in\"\n    inputs:\n        ident:\n            required: true\n            min: 4\n            max: 100\n            validator: (v) ->\n                if v.length >= 4 then true\n                else throw new Error \"ident must be between 4 and 100 characters\"\n        password:\n            required: true\n            min: 4\n            max: 100\n            validator: (v) ->\n                if v.length >= 4 then true\n                else throw new Error \"password must have 4 and 100 characters\"\n    authenticated: false\n    version: 1.0\n    run: action sign-in = (api, connection, resume) ->\n        # yield from -> yield\n        dd = yield from api.identities.sign-in connection.params.ident,\n            connection.params.password,\n            resume.gen!\n        # passing resume.gen() allows you to use other node-style callbacks in the resulting generator\n        # you can see how I use it to get the session from redis-sessions below\n        connection.response.data = dd\n        return true\n```\nthen, api.identities.signIn looks like this:\nls\nsign-in: (ident, password, resume) ->*\n    hashword = @hashword password\n    unless identity = yield api.mongo.db.identities.find-one { ident, hashword }\n        throw new Error \"could not authenticate identity #ident\"\n    # this is just a redis-sessions session\n    sess = yield api.identities.session.create {\n        # ...\n    }, resume!\n    return sess\nuse https://github.com/spion/genny ... it's da bomb :+1:\nas you can see, if any error is thrown inside of the generator, it'll be picked up automatically and put in connection.error the action function at the very top\n. I just started AH on port 8880, copied the sleeptest.js action, and changed the code per your suggestion to client.action(...)\na fully working example\na fiddle: https://jsfiddle.net/0bckekto/4/\nthe code:\n``` js\nvar logC = document.getElementById('log');\nfunction log(msg){\n    var c = document.createElement('pre');\n    c.innerHTML = msg;\n    logC.appendChild(c);\n}\nvar client = new ActionheroClient({\n    url: 'http://localhost:8880'\n});\nclient.connect(function() {\n    log('client connected');\n    client.action('sleepTest', {sleepDuration: 2000}, function(res) {\n        log('first request:\\n' + JSON.stringify(res, null, '\\t'));\n        client.action('sleepTest', {sleepDuration: void(0)}, function(res2) {\n            log('second request:\\n' + JSON.stringify(res2, null, '\\t'));\n            client.action('sleepTest', function(res3) {\n                log('third request:\\n' + JSON.stringify(res3, null, '\\t'));\n            });\n        });\n    });\n});\nlog('client created');\n```\nthe result:\n```\nclient created\nclient connected\nfirst request:\n{\n    \"sleepStarted\": 1428359221480,\n    \"sleepEnded\": 1428359223480,\n    \"sleepDelta\": 2000,\n    \"sleepDuration\": 2000,\n    \"messageCount\": 2,\n    \"context\": \"response\"\n}\nsecond request:\n{\n    \"sleepStarted\": 1428359223482,\n    \"sleepEnded\": 1428359225482,\n    \"sleepDelta\": 2000,\n    \"sleepDuration\": 2000,\n    \"messageCount\": 3,\n    \"context\": \"response\"\n}\nthird request:\n{\n    \"sleepStarted\": 1428359225484,\n    \"sleepEnded\": 1428359227484,\n    \"sleepDelta\": 2000,\n    \"sleepDuration\": 2000,\n    \"messageCount\": 4,\n    \"context\": \"response\"\n}\n```\nas you can see, all requests are 2000ms. if I change the duration in the second request to 500, then the third will be 500ms as well.\n. I figured it was something along that line, great... actually that could potentially be very useful to not neet to send the token every time. so, perhaps there could be a way to instead define which params are sticky?\nso, we definitely need to be able to undefine some parameters in some way... is there a quick fix we can introduce? actually, I just realized it may be as easy as looking on the rawConnection and undefine everything that's not the token for the duration of this version. I'll try that now. ok cool :+1: \nEDIT: just realized this is websocket, not http, so quickfix wonit work :) I'm gonna simply patch the websocket server directly for now...\n. all fixed! https://github.com/evantahler/actionhero/pull/630\n. I wrote this fix kinda fast... I realized you may not want 'token' by default a stickyParam (though, I'd say that's probably the only default acceptable and fits my use case). also it's silly to do stickyParams: api.config.servers.websocket.stickyParams || [] (the || [] bit) if it's already defined. I was going to make it a property of genericConnecion but I didn't want to read so much code to figure out how to do that. this would be nice to be able to set it to true for example on socket connections and have all params persist like it is now.\nI also broke your test :/\n. last thing: we needed this fix kinda fast but later after work I can rebase against v11.0 branch and add the true ability to the stickyParameters option (to persist all params and consequently not break existing people's socket connections) - additionally, I think this should be better located on the genericConnection prototype. I can think of other use-cases where it may be nice to decide which params to persist. so, yeah if you'd like me to do that and feel that's the direction to go, I'll do it, I made this PR just cause I wanted to contribute it back .. this fix was sufficient for our purposes. peace.\n. fair enough. I did try with middleware, however there is a constraint that middleware is not fired for websocket connections (only web). there is literally no way to do this without modifying AH... (other than re-implement all of the websocket server myself)\nthis is why I had suggested that it become a part of genericServer.\n. which reminds me, is there a chance to get middleware on non-web connections?\n. I will have a look at it again tomorrow. I honestly can't really remember exactly what was the issue.\nthank you for your time\n. Jaja... Actually I was thinking about it and I'd rater it all be on one\nobject and check the error property. I'll change it when I get home and\nresend the request... Still haven't tried the middkeware thing. Today was a\nlong day at work\nCheers!\nOn 13 Apr 2015 11:45, \"Evan Tahler\" notifications@github.com wrote:\n\nAlso, this breaks all the tests :(\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/evantahler/actionhero/pull/633#issuecomment-92294061.\n. \n",
    "wasd171": "So the other ~ 45% of \"commercial node.js projects\" running > v0.10.x with at least v0.12.x having significant 25% are not enough?\nIt would be really great to start using all modern features, they make life a lot easier.\n. Actually I wrote it due to this pull request. AH could at least be more friendly for Babel users :)\nAnyway, I found a solution:\nOne needs to create index.js with the following\n```\nrequire(\"babel-register\")({\n    ignore: /(redis.js|node_modules)/\n});\nrequire(\"actionhero/bin/actionhero\");\n```\nIt forces Babel to skip redis.js and every file from node_modules, loading them the usual way.\nThen running node . instead of actionhero start would do the trick\nBTW, thanks for great tool!\n. ",
    "justingosan": "My bad. I totally missed this in the docs:\nactions.inputs are used for both documentation and for building the whitelist of allowed parameters the API will accept. Client params not included in these whitelists will be ignored for security. If you wish to disable the whitelisting you can use the flag at api.config.general.disableParamScrubbing. Note that Middleware preProcessors will always have access to all params pre-scrubbing.\nSorry! Will close this now.\n. thanks! weird though, I never edited that particular file and it seemed to\nwork perfectly before.\n. Tried to model my tests after this https://github.com/evantahler/actionhero/blob/master/test/servers/web.js\nTurns out the problem exists when using specHelper. Works fine when manually using request to do the http call.\n. Makes sense! Thanks!\n. Thanks for the quick fix!\n. ",
    "ndcollins": "For my use case I have some batch processes that need to execute where it needs to recursively GET data from an external API, manipulate it, then PUT the updated data back to the external API. This process takes an hour or two, so I'd like to schedule it to run every evening during off hours, so starting at 1am, for example. With the current system, and correct me if I'm misunderstanding it, but it appears that you can only set the interval at which a task runs, not a specific start time.\n. ",
    "levansuper": "that was the case. I set maxTaskProcessors: 1 and it works now.\n thank you!\n. im not sure about the tests and why they fail. i just added one line and you can check it.\nbut about use case:\ni have this action that gets the byte code of the file and saves is. so i definitely dont want to have 5mb files byte code in the log.\n{\n    \"name\": \"FilesSaveFile\",\n    \"description\": 'saves file',\n    \"inputs\": {\n        \"file\": {\n            \"filterInLog\" : true,\n            \"required\": false\n        }\n    },\n    \"blockedConnectionTypes\": [],\n    \"outputExample\": {},\n    \"run\": function(api, connection, next) {\n        var file = connection.params.file1;\n        var date = new Date();\n        //rootDir is set in one of my initializers\n        fs.writeFile(api.rootDir) + date.getTime(), new Buffer(file));\n        connection.response.result = {};\n        next(null);\n    }\n}\nand i have another input named \"file\" in another action where file really means \"file name\".\nI know the naming in not perfect but that's the interface and i cant change it now because a lot of apps use it.  so i need to log in the second case and don't want to log in the firs case\n. The first and second cases are very similar and can be accomplished but i think the flexibility is lost if there is no config to allow logging, because in some cases i might be willing to log them.\nthe third is just i need but not having config field in the input and deleting the parameter in \"run\" method will make it a little confusing for people who doesn't know Actionhero and  have to work on the existing project.\nthat's in my humble opinion :) \n. i'm directly sending an array of bytes and  putting into the buffer so i'm not using the string at all\n. in my example a is one of fields that can be added.\nlike: \na : {\n        b: { \n            c : { required : false},\n            d : [{required : true}]\n        }\n   },\ne : {\n required :false\n}\nOne more question related to that.\nare you going to support types in the input fields or this will remain the job of the validator function?\n. ",
    "awinder": "Thanks much!\n. ",
    "hippich": "Got it! Thanks!\n. I still want this action to be callable from web/socket/websocket, so action must be used (unless there is other way?)\nI guess \"connection\" was confusing to me, this is really more like a \"request\"-type of thing in its own nature.\nThank you for confirming it. I will try using connection-per-message to see how it goes.\n. Thanks!\n. ",
    "samuelbrian": "Done! Although I left in being able to override the HTTP method.\nAlso, I don't really know what is going on with the automated testing. I'm certain I didn't touch any of the code that caused the failed tests.\n. ",
    "lorenzofox3": "@evantahler The problem is that you might want to extend the Error prototype to benefits from the stack trace etc but add some capabilities. A popular library is for example https://www.npmjs.com/package/http-errors \nbut the custom properties you may define won't be in the payload, only the message\n. Great, I did not know I could set the priority lower than the core components !\nI am afraid there will still be some issues with plugins on which if I am not wrong I don't have the priority control (like ah-sequelize-plugin)\n. If I understand correctly the specifications:\n-Etag is a hash of the content and you are right is more relevant when the content is generated dynamically ie by fetching data from a database and compiling in a document. Actually in AH, it would be more useful for the action part (and REST API for example), but this can be done with a middleware with no extra work on the framework.\n- last-modified would be more appropriate for static files as you said\nAs @neilstuartcraig said, max-age remains relevant (it avoid any request to the server altogether) and I don't think it should be dropped.\nI was suggesting fresh as it is very robust, light and support both (Etag and last modified): it is used in popular web frameworks express and Koa. That would be code not to maintain on AH side, but if you prefer to roll you own solution is fine too.\nI'll make the pull request this week end if you want, according to your instructions\n. great, thanks. just a little head up to let you know I am back from my vacation and hopefully complete the PR this week. Thanks for your patience\n. Rebased and updated with the spec. \nNot sure if the if-modified-since should be implemented with socket and websocket as they don't use the same specifications for the transport protocol ? (not familiar with these protocoles)\n. I think it should be fine now, sorry for the mess \n\n. thanks a lot\n. ",
    "hornos": "Literate coffeescript is probably the best lang for JS development. Coffeescript is compiled at boot by the coffee interpreter without any extra build step, it just works and no need to precompile. If you won't accept the request please allow some other method to define source extensions.\n. Live reload works like a charm, you don't loose it. Can you give real reason why you against giving the option for more source extension? I do not want to include coffee just an option for more extensions besides js.\n. I agree if you want to keep the core pure, however I do not see why a non-js source option (eg. by an ACTIONHERO environment var) violates the KISS principle of the core since it is up to the user if they want to use it or not. But without it you severly limit their ability to build upon the core and force js-only on everybody.\n. ",
    "supamii": "FYI - I've been able to separate this (with tweaks) into a plugin for my own personal use - so far so good.\nSo like you suggested Evan, there's really no need for this to merge directly into AH itself.\nStill, very nice work from Mr BoLaMN.  +props.\nAlso, any of you guys can let me know and I can try to submit the npm ah-swaggerhero-plugin in some form.\n. @evantahler Ok, I'm currently customizing the base code for my own work but if i happen to cover enough bases i'll present a first shot at the plugin.  \nThere are surprisingly a lot of cases to handle for APIs that use only routes vs simple queries or action queries, etc etc etc.  Versioning for api routes is another beast all together.\n. Yeah I definitely saw that, pretty cool stuff you got going.  What I'm going to propose is a more passive approach to take in the swagger-ui dependencies and also a few fixes to handle routes better with model-schemas and even the option to include enums to toggle on.  All of this, will be made available as a plugin.  Really cool stuff you've done here, I'll keep you all posted.\n. ",
    "guiguan": "Based on @supamii 's work, I changed to use a new swagger material ui. https://github.com/guiguan/ah-swagger-material-ui :)\n. ",
    "krlicmuhamed": "wow looks slick, I am going to try that\n. Hmm, thanks for sharing @crrobinson14 - I wonder what features does it have that makes It better then PM2.\n. The first 'working' and second 'non-working' action in my gist gave you the same result?\nMy goal was to allow input of stringified type and of normal object like this:\n``` bash\n{\"name\":\"test\",\"version\":\"1.0.0\"}\ncurl -d 'product={\"name\":\"test\",\"version\":\"1.0.0\"}' 'http://127.0.0.1:8080/api/addProduct'\n\"{\\\"name\\\":\\\"test\\\",\\\"version\\\":\\\"1.0.0\\\"}\"\ncurl -d 'product=\"{\\\"name\\\":\\\"test\\\",\\\"version\\\":\\\"1.0.0\\\"}\"' 'http://127.0.0.1:8080/api/addProduct'\n( product is represented as a JSON with canonical notation )\n```\njavascript\nformatter: function(param, connection, actionTemplate){\n if(typeof param === 'string'){  // If product input is string ( \"{\\\"name\\\":\\\"test\\\",\\\"version\\\":\\\"1.0.0\\\"}\" ) then parse it.\n        try{ \n            return JSON.parse(param);\n          }catch(e){\n            throw Error('Product must be a JSON object.');\n          }\n }\n return param; // If It's not a string just return it as it is ( as it will be object )\n});\nAlso I am using JSON.parse(); in validator because It's the only way to check If JSON is valid.\nYes you're right about me setting the param at line 40 I changed that to throw Error(..);\nand now I get this exception thrown constantly. ( as opposed to no errors at all before, this is much better )\nIt seems that I am confused as to which type param is in which function. Is it a typeof object or typeof string?\nThanks for your response!\n. OK, I really feel bad for taking your time now because I got this to work. \nThe real issue is that I remained ignorant on what does formatter really do.\nSo here's the working version. With great flexibility comes great responsibility :D\nSorry for taking for precious time, and thanks for all your help!\n. Call me ignorant about domains. But what really are they in actionhero? Little is said about them in the documentation.\n. Yes! What If an actionhero plugin needs another actionhero plugin? A solution like this would be awesome. +1\n. When I think of it a bit more, nested plugins probably have the same agenda as plugin auto-registration.. Am I right?\n. Yes. Using NPM for this is a must.\n. Plugins should also have the ability to set the minimum actionhero version required in packages.json. I guess that means having actionhero in node_modules directory. That can come in handy.\n. Makes sense, since you have a naming convention for plugins.\n. Plugin order could be made like an expression higher than, equal to. For example : \njavascript\n{\n//...  \n// this overrides the plugin settings \n// you normally wouldn't need to do this unless there is a conflict between two plugins that \n// need 'manual' fixing, continue reading to see what I mean..\n plugins:{ \n  'ah-databaseconnector-plugin': { priority: '<' },  // Highest priority\n  'ah-awesome2-plugin': { priority: '<' }, // Lower priority then the first\n  'ah-awesome3-plugin': { priority: '=' }, // Same priority as the previous\n  'ah-awesome4-plugin': { priority: '=' }, // Same priority as the previous\n  'ah-awesome5-plugin': { priority: '<' }, // Lower priority then the previous five plugins\n  'ah-awesome6-plugin': { priority: '=' }, // Same priority as the previous\n }\n}\nI used the < sign since the lower the number the higher the priority ( which is a bit counter-intuitive ) but oh well.\nUsing the same concept we can apply this for plugin settings: \njavascript\nexports.plugin = {\n  autoload: true,\n   priority:{ \n    'ah-sequelize-plugin': { priority: '<' }, // If ah-sequelize-plugin exists in the project set it to higher priority then this plugin (I called it `_self`).\n// even If ah-sequelize-plugin priority number is 500 by default\n    '_self': { priority: 500 },  // This plugin we are defining is set to priority 500\n    'ah-awesome-plugin': { priority: '<' } // If ah-awesome-plugin exists set _self priority to lower then this one\n  }\n}\nThis makes are more flexible in terms of compatibility with other ah-plugins too!\n. @neilstuartcraig Yeah your first suggestion is better I think. But don't ask me, I don't really know why there are numeric priorities for the developer to edit at the first place. In the chat I suggested that priorities stay hidden from the developer and let each initializer have Its own dependency like you mentioned, developer should not worry about changing priority numbers. Maybe numeric ordering has some flexibility advantages.\n. Good thing I just moved to debian. :)\nThe idea sounds great!\n. Looks cool. Enables RESTful API develompent I guess.\n. Made a pull request for this. Thanks. \n. next() is a configLoader thing.. means this config script is over with parameters - go to the next one..\nDon't really have a clue why is it in there though.\n. Great! Tests passed. Linter complains less now. There were places where semicolons really should be like var a = 'blab', however, most of them were in a closed block like this {var a = 'blab'}.\n. :+1: \n. So in one example scenario, I want to install a explugin that depends on subplugin. Subplugin is not installed on top-level project. When I want to install explugin 'npm install ah-ex-plugin' npm should also install subplugin and source it in 'package.json' ?\n. Note a warning on plugin A install that \"plugin A requires plugin B\" and \"Do you want to add this plugin B to your package.json? yes/no/all\". In development mode If the user is confident enough he can choose whether to ignore these warnings via a setting in package.json or somewhere else? \nI wouldn't worry about the security that much, since It's all open source and the user has all the responsibility what they install their machines. Unless a third party hacker targets your server filesystem, then you could deny plugin install in production mode? What's your main security concern?\n. Or we could make a global list of actionhero trusted plugins/modules, and If the plugin/module is not on the list, give user a warning that module/plugin is untrusted by actionhero community. That requires a bit work - but If security is our main concern so be It (or something similar in this regard?).\n. I agree with @neilstuartcraig. I added some additional ideas we can consider - just so we have more options on the table :)\n. I suggest we read a \"pluginDependencies\" key in package.json from plugin root. \nExample:\njson\n{\n  \"name\": \"ah-sample-plugin\",\n  \"version\": \"1.0.0\",\n  \"main\": \"sample.js\",\n  \"pluginDependencies\": {\n    \"ah-sequelize-plugin\": \"latest\"\n  },\n  \"dependencies\": {\n    \"jsonwebtoken\": \"^7.0.0\",\n    \"bluebird\": \"^3.4.0\",\n    \"node-uuid\": \"^1.4.7\",\n  },\n  \"devDependencies\": {\n    \"mocha\": \"latest\",\n    \"should\": \"latest\",\n    \"request\": \"latest\",\n    \"sinon\": \"latest\"\n  }\n}\nThis way we can just read all links and find plugin package.json - and with pluginDependencies key install these plugins in projectRoot. No need to mess with recursions and all that.\n. Line 33; same file; Is responsee also a typo?\n. Sorry for doing two commits, wasn't sure If responsee was some internal variable or something :)\n. Nice nickname :D\n. Are those spaces a ESLINT standard? Cause I am pretty used to the one without the spaces hehe :)\n. I recently deleted my actionhero fork so I have to create a new pull request and close this one.\n. There we go :) Thanks for your help, getting familiar with the actionhero core day by day.\n. Fixed :) https://github.com/evantahler/actionhero/pull/837\n. Not sure why build #2550.4 failed :-/\nMaybe that occurs from time to time?\n. Can we increase the timeout on some of these tests? Travis gets slow sometimes..\n. This should be it. I'll be waiting for your review :)\n. Did I explain the api.i18n.localize well? I added It in the docs :)\n. Nevertheless, this shouldn't crash on Windows...\n. When you return next() in middleware actionhero will process the action that was requested. You can do something like this:\njavascript\nreturn next({message: 'Error Generating Token'});\nSo the response would look something like:\njson\n{\n \"error\":{\n   \"message\":\"Error Generating Token\"\n }\n}\nAlso If you want to set your own response status code you do something like this:\njavascript\ndata.connection.rawConnection.responseHttpCode = 422;\nAs for unification of errors, you can declare your error function in config/errors.js and then just api.config.errors.yourMultilangualErrorFunction();\n. When you actionhero generate, you'll need to also npm install. After that your good to go, actionhero generateAction --name=actionName.\n. This should be it. Tests are unpredictable with Travis as always (they're passing)...\n. Your pull request seems to fail tests\n. What does your redis config look like? Can you post it here? Did you just upgrade your actionhero project?\n. Oh of course, ActionHero has many hidden issues/bugs on windows...\nCould you recreate the issue in a project so we can dig more into it?\n. Wait, does It matter If you place that line above or below If statement when nodejs runs this non-blocking?\n. Pardon me, I didn't notice this is from public/javascript/actionheroClient.js. Good catch!\n. Can I read a request body Stream in some action instead of It just storing complete body data in store connection.rawConnection.params.rawBody?\nIt would solve the potential memory footprint issue.. Maybe we can add another function in exports.action that runs before body stream starts?\nThat way we can have some shared memory with server code. \nSomething like this:\nvar rawBody;\nexports.action = {\n name: 'test',\n initialize: function(shared){\n  shared.events.on('rawbodydata', function(raw){\n   ...\n   rawBody = raw;\n  });\n }\n run: function (api, data, next) {}\n}\nThis is the connection.rawConnection.params.rawBody done in a different way though, except you gain more flexibility :). Is that extra comma intentionally left there? , :smiley:\n. Trailing comma :smile: \n\n. This is one big line. I changed the link where it says [not to write any logs when testing] ..\n. What do you think about following a single naming convention? actionhero_root for example is much easier to read because project_root is snake case too. ( or the other way around )\n. This feature should solve the potential memory leak issue...? Any thoughts on this?\n. I didn't know how to test this. This is straight forward, I guess It works. (line 276)\n. Yeah, by 2 miliseconds. I did a benchmark on a random 10000 Byte string (15 ms).\n. blen could be used intead of line.length at line 119? I guess we get the same effect?\n. Line 117 shouldn't be blen because of cases like a message only with spaces? I am fixing this right now.\n. Still not sure about this message format. Is this the standard?\n{status:'error', error: error, context: 'response'}\n. I guess Object.assign({}, obj); is more appropriate as util._extend() is not meant to be used outside of nodejs internals. \nHmm, looks like actionhero documentation shouldn't change anything. api.config.i18n stays the same as before, connection.localize stays the same. What I meant by \"I guess documentation has to be changed now.\" is probably adding the function api.i18n.localize to the docs.\n. What's wrong with lodash?\n. ",
    "Roam-Cooper": "Okay, since we're on the old version, I'll write the code required to fix the lock up if the server is not restarted gracefully (which happens sometimes, it's nice to have tasks still run after this event).\nBut is 'enqueueAllRecurrentJobs' in Actionhero's tasks initialiser calling 'self.enqueue' with the correct parameters? Or am I wrong?\n. ",
    "DefunctExodus": "Not sure if it is any faster but having one package the deals with sentinel/cluster  would be very nice.\n. ",
    "fairhat": "seems to be related to #481 \nWhat's the best way to force a param on (almost) all routes? We have a route param \"mdl\" which is required in 26/30 routes.\nRight now it is done via a preprocessor in /initializers/file.js which checks the actionTemplate and then validates the \"mdl\" param.\n. Hey, thanks for the quick response!\ngetEditDistance is just returning the levenshtein distance for 2 strings (which is tested and actually working).\nI have tried to set data.response.gotHere = true but the actual response is empty (again).\nEdit: oh my god, this is actually quite embarrassing, i forgot to delete a file \"testactions.js\" where some actions had the same name as other actions... Anyways, thanks for your help! Actionhero is great. :-)\n. ",
    "kodypeterson": "@crrobinson14 @evantahler Thanks for the config. I am going to see the difference I have in my config. Maybe that is the issue. I just notice when we have travis run pm2 restart it is not always returning the status code in order to have travis complete the build. It also might be something up with our ssh script or something silly. Still want to look into it as even running pm2 restart on the box does not always do as expected, but only with actionhero.\n. ",
    "hazemhagrass": "@evantahler I have the same issue, periodic tasks stopped working suddenly \n. @evantahler here we go\n- what version of actionhero are you using?\n15.3.0\n- what version of redis?\n3.2\n- what OS?\nUbuntu 16.04\n- Is the scheduler enabled?\nYes\n- Look in redis. Are there jobs in the delayed queue?\nYes. Will check them then back to you.\n@evantahler Do you recommend any dashboard view for actionhero platform to monitor logs, queues and redis?. @evantahler Many thanks. your tool is perfect. I will monitor all delayed tasks and locks then let you know. thanks a lot for your help.. @evantahler see this is my case\n\n\n\n\n\n. Yes you are right, it's my fault, anyway it's working now, I will keep tracking it.. ",
    "ifavo": "This is an issue with fakeredis and how it includes the RedisClient. I didn't dive deep enough to find the real problem but if you have a redis instance, using it should get you started again.\n. ",
    "liorhson": "Hey,\nfakeredis is good for me to handle in memory cache such as Session. \nThe framework is actually broken, even when you try to start vanilla version of Actionhero it doesn't start\nnpm install actionhero\n./node_modules/.bin/actionhero generate\nnpm start\n@evantahler please check this issue\n. Thanks,\nCan you give me a workaround for know, we are using Actionhero in one off our products\n. Thanks for the quick response!\n. ",
    "hdachev": "np, my bad! wasn't really responsible with the deps\n. ",
    "zhhz": "Hi Evan,\nThanks for looking into this. I didn't realize there are issues with other dependent package. I agree with your decision. For now, I can live with that. I'm not sure how long it could be before node make ES6 as a standard, until then we are safe...\n. Cool. Thanks Evan!\nOn Sun, Jan 10, 2016 at 11:43 AM, Evan Tahler notifications@github.com\nwrote:\n\nFYI this will be fixed in v13.0.0 of actionhero.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/evantahler/actionhero/pull/692#issuecomment-170366204\n.\n. \n",
    "hueneburg": "here is a stacktrace for the api.utils.padDateDoubleStr is not a function exception:\n```\nnpm start                                                                               ] 13:58:30 \n\nmy_actionhero_project@0.0.1 start /home/armin/arbeit/SitHandler\nactionhero start\n\ninfo: actionhero >> start\n2015-10-27 13:58:36 - notice:  starting actionhero \n2015-10-27 13:58:36 - warning: running with fakeredis\n/home/armin/arbeit/SitHandler/node_modules/actionhero/initializers/utils.js:15\n        api.utils.padDateDoubleStr(time.getFullYear()) +\n                  ^\nTypeError: api.utils.padDateDoubleStr is not a function\n    at api.utils.sqlDateTime (/home/armin/arbeit/SitHandler/node_modules/actionhero/initializers/utils.js:15:19)\n    at Object.exports.log (/home/armin/arbeit/SitHandler/node_modules/winston/lib/winston/common.js:132:41)\n    at Console.log (/home/armin/arbeit/SitHandler/node_modules/winston/lib/winston/transports/console.js:97:19)\n    at emit (/home/armin/arbeit/SitHandler/node_modules/winston/lib/winston/logger.js:186:17)\n    at /home/armin/arbeit/SitHandler/node_modules/winston/node_modules/async/lib/async.js:157:13\n    at _each (/home/armin/arbeit/SitHandler/node_modules/winston/node_modules/async/lib/async.js:57:9)\n    at Object.async.each (/home/armin/arbeit/SitHandler/node_modules/winston/node_modules/async/lib/async.js:156:9)\n    at Logger.log (/home/armin/arbeit/SitHandler/node_modules/winston/lib/winston/logger.js:214:9)\n    at Object.api.log (/home/armin/arbeit/SitHandler/node_modules/actionhero/initializers/logger.js:54:22)\n    at Object.module.exports.start (/home/armin/arbeit/SitHandler/node_modules/actionhero/initializers/pids.js:48:9)\n```\n. ok, found the error. i had an initializer with the name utils. that seems to mess up the other utils object in the api.\n. ",
    "krishnaglick": "Will do in the future, thanks!\n. Roger, I'll throw up the necessary changes tomorrow. Thanks for letting me know!\n. I had missed a ;\nFelt dumb :P\n. Well, it looks like it does. :/\n. I'm gonna say this isn't worth the work unless some adventurous young dev wants to go through the trouble.\nMaybe mark it as a low priority error?\n. Works on windows now.\n. On windows the temp folder is located at '%appdata%/Local/Temp'\nThis roughly translates to 'driveLetter:\\Users\\accountName\\AppData\\Local\\Temp'\n. Huh? An AH test?\n. Using 4.4.2 I ran:\n```\n'use strict';\nlet path = require('path');\nlet glob = require('globby');\nglob(path.resolve('node_modules/actionhero/bin/templates/**'))\n.then(console.log);\n```\nAnd it ran fine. This is a test.js file I have in my app.\n. Honestly, I don't know. I tend to replicate coding styles I commonly see.\nFWIW, here's Ember doing the same thing: https://github.com/emberjs/ember.js/blob/master/tests/node/component-rendering-test.js\n. Do we wanna merge this (since the other PR was), or drop it and let the task do its thing?\n. I got 11,906 of...\n\"Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\"\nWindows lol....\n. Lmk if you think that covers it, I'm not very familiar with those areas.\n. ",
    "ccapo": "Glad I could help, but I'd like to thank you for the rapid response and for creating such a fantastic product!\n. ",
    "AngeloR": "After testing a few different libraries it looks like\n- HapiJS supports it\n- Restify does not support it\n- Express supports it through the new express body parser, which is actually reliant on the core Hapijs QS parser\nI think if it is going to be implemented, the simple case outlined above can be integrated into the core. The more complex scenarios are a much more opinionated change and there is really no spec for it. I think it is best provided as middleware, as you suggested in #314. This way actionhero is free to define how to define input params in the action definition. I believe this is really the hard part and what is up for discussion. \nThe way @joseym suggested works, but perhaps an extension as follows\njs\n{\n inputs: {\n    required: [\n       { 'amount': {formatter: ..., validator: ...}}\n      , 'contact.purchaser.name'\n      , {'contact.purchaser.email': {formatter: ..., validator: ...}}\n      , 'contact.purchaser.address.line_1'\n      , 'contact.purchaser.address.city'\n      , 'contact.purchaser.address.state'\n      , 'contact.purchaser.address.postal'\n    ],\n    optional: [\n        'contact.purchaser.phone'\n        'contact.purchaser.address.line_2'\n    ]\n  }\n}\nI wouldn't mind digging into these myself. Are there contribution guidelines somewhere?\n. There are scenarios where symbolic links break on windows, (IE: if you are developing in a vagrant box, it doesn't support symlinks within directories shared with a windows host). However, I think forgoing windows support may be a good idea in order to get this functionality in. \nHowever, what would happen in the case of two plugins requiring two different versions of the same plugin? \n. I will only have access to a windows machine this evening (EST) around 7pm. Will test there. Are there any particular edge cases you require tested? or just running the built in tests is enough? \n. ",
    "hutchike": "Just curious: Are these functions available elsewhere, or are they just disappearing?\n. This is domains: https://nodejs.org/api/domain.html\nThey're used in a few places in ActionHero code, e.g. initializers/actionProcessor.js\n. Just wanted to point out that NPM has been doing this job rather well for quite a while now. It might make sense to leverage NPM by requiring \"actionhero-plugin\" in your plugin, obeying some design pattern, then publishing your plugin as a module to NPM? Just my 2c.\n. Looks like it might work on Windows too:\nhttps://en.wikipedia.org/wiki/NTFS_symbolic_link\nOn 17 January 2016 at 17:03, Neil Craig notifications@github.com wrote:\n\nSounds great @evantahler https://github.com/evantahler. My personal\npreference is for something which can be automated, which this clearly can\nso its great and the re-use of existing tech is a bonus, always up for\ncomplexity reduction.\nI don't see why it wouldn't work on Windows - provided the symlinks are\nmade via cross platform libs then I think it's work...or is my tired\nbrainbox missing something? :-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/evantahler/actionhero/issues/727#issuecomment-172393169\n.\n. FWIW I think it's a great idea. Elegance wins, and so does leveraging npm.\n\nOn 17 January 2016 at 23:37, Evan Tahler notifications@github.com wrote:\n\nNPM already handles this with its semver mapping! Check out #1\nhttps://github.com/evantahler/actionhero/issues/1 here:\nhttp://blog.izs.me/post/1675072029/10-cool-things-you-probably-didnt-realize-npm\nSo basically each plugin's dependancies would be inside of its own\nnode_modules and we would link all the way down. I haven't tested it yet,\nbut I think it would work out.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/evantahler/actionhero/issues/727#issuecomment-172430684\n.\n. Sorry I'm Mac-only, with Ubuntu servers, so no opportunity to test\nsym-links on MS Win.\n\nOn 21 January 2016 at 00:27, Evan Tahler notifications@github.com wrote:\n\nwas anyone able to test on windows?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/evantahler/actionhero/pull/758#issuecomment-173473163\n.\n. \n",
    "ymote": "Both way works for me. Thanks so much.\n. ",
    "running-coder": "Ah! my first toughts were that http://127.0.0.1:8080/api/v1/randomNumber/ (doesn't work) would be the equivalent to http://127.0.0.1:8080/api?action=randomNumber&apiVersion=v1 (works). Also reading the documentation @ http://www.actionherojs.com/docs/#inputs, I tought that the params wouldn't need to be there if working with \"folder structure\" urls. My bad perhaps I missunderstood that part\nThanks for the fast answer!\n. I've slightly modified the method to include the GET case. The toUpperCase is not mandatory but I have the habit of always doing strict comparisons\n``` javascript\nActionheroClient.prototype.actionWeb = function(params, callback) {\n  var xmlhttp = new XMLHttpRequest();\n  xmlhttp.onreadystatechange = function () {\n    var response;\n    if(xmlhttp.readyState === 4) {\n      if(xmlhttp.status === 200) {\n        response = JSON.parse(xmlhttp.responseText);\n      }else{\n        try{\n          response = JSON.parse(xmlhttp.responseText);\n        }catch(e){\n          response = { error: {statusText: xmlhttp.statusText, responseText: xmlhttp.responseText} };\n        }\n      }\n      callback(response);\n    }\n  };\nvar method = (params.httpMethod || 'POST').toUpperCase();\n  var url = this.options.url + this.options.apiPath + '?action=' + params.action;\nif (method === 'GET') {\n    for (var param in params) {\n      if (~['action', 'httpMethod'].indexOf(param)) continue;\n      url += '&' + param + '=' + params[param];\n    }\n  }\nxmlhttp.open(method, url, true);\n  xmlhttp.setRequestHeader('Content-Type', 'application/json');\n  xmlhttp.send(JSON.stringify(params));\n}\n```\n. Sure, I had some difficulties running the test under windows and found out it have to be written in a special way\njavascript\n\"test\": \"SET NODE_ENV=test & mocha\",\nI'll commit a test as soon as I get some time to learn / work on it\n. I'm trying to reach the ActionheroClient().action function but having difficulties... (imo it seems pointless to call the request module since the issue to be tested is how the request gets formed). I saw api.specHelper.runAction method in other test files but for some reason api.specHelper is undefined on my setup (lets blame windows). Maybe this task gets beyond of my testing framework understandings...\njavascript\nit('will create a xhr GET request with multiple parameters', function(done){\n  api.specHelper.runAction('x', {httpMethod: 'GET', thing: 'stuff', moreThings: 'moreStuff'}, function(response){\n    // Not sure how to validate the request method to be GET\n    // Also would api.specHelper.runActionWeb be available to force a xhr request?\n    response.requesterInformation.receivedParams.action.should.equal('x');\n    response.requesterInformation.receivedParams.thing.should.equal('stuff');\n    response.requesterInformation.receivedParams.moreThings.should.equal('moreStuff');\n    done();\n  });\n});\n. Cool! Let me know how the test looks like (I'm very curious with the result)\nThanks\n. haha! alright\n. oh just found out 10 seconds after creating the ticket, my mistake... perhaps i should correctly read the error message :)\n. was using:\nresponse.data.userId.should.be('42');\ninstead of:\nresponse.data.userId.should.equal(42);\n. ",
    "synthmeat": "It was reserved as far as es2. https://mathiasbynens.be/notes/reserved-keywords\nOk, forking and fixing here and in node-resque...\n. Well, it crashes with undefined next if I force it to go to catch block in some way.\n. Updated issue title because it's another related issue in the same block - log path is hardcoded in try, but we already have it in config/api.js. Template as well as source.\n. @evantahler I'm game for this, now that style is in order. Was to go through docs properly now anyways.\n. @evantahler Well, I would like to discuss:\n- possibility of moving site (with docs) to separate repo\n- ignoring whiteboard since it is:\n  - not an npm module\n  - just styles and scripts ripped from Slate\n  - a very thin wrapper around hexo, static generator\nI personally didn't like Slate, for just one reason though - couldn't open chapters on the left in new tabs.  Hexo itself is a good choice, and can handle entire site, including docs, as can be seen here, has bajillion plugins, and is regulary maintained for quite a while now.\nSite could still be included as submodule within ActionHero repo itself if that's found useful, though then it couldn't be versioned differently between branches (to my knowledge).\n. Sure, I'll whip up something over the weekend. Contributing chapter in docs good entry point?\n. Moved from JSHint + JSCS to just ESLint after evaluating all of them for my own projects. Single tool, has option to mark things as warnings as well as errors, and (what I particulary like) does not do anything  by default.\n. eslint is added as dev dep because that way we get control over its version, and plugins (as far as I've seen) have preference for project's own eslint binary.\nI've actually now dropped requirement for upper-casing constructors since there's quite a few of them to be added exceptions just from node-resque. I can work that out on both actionhero and node-resque some time later?\n.eslintrc was actually broken in prior commit (so it didn't report some issues I've fixed now). Fixed it and ran through everything once again. Just to confirm - we'd like this style:\njavascript\nfunction(){\n  try{\n    if(stuff){\n      stuff();\n    }else if{\n      stuff();\n    }else{\n     stuff();\n    }\n  }catch(e){\n    stuff();\n  }\n};\n?\nLastly, meanwhile there has been a lot of reserved keywords introduced as properties (default, class, do) so I've wrapped those to be name-accessed.\n. \ud83c\udf89\n. @krishnaglick No, the existing codebase before adding ESLint didn't have space. It's pretty dense style all in all.\n@l0oky One of the reasons for the move to ESLint was that it has no rules by default.\n@evantahler I'll make a grunt task to check as well as autofix the code according to the style this weekend.\n. @evantahler Well, not grunt task. npm script. Didn't even notice grunt's gone! :)\n. Hm, node_modules is ignored by default, and npm run lint gives me no errors.\n. ",
    "n-s-k": "+1\n. ",
    "mpociot": "Please see my updated answer on the whiteboard issue\n. ",
    "pahlgrimm": "Ah okay! Thanks for your work and patience! You might have to update the documentation, 'cause the description of development mode doesn't mention it.\n. http://www.actionherojs.com/docs/#development-mode -> About\n. This might be the wrong place but thnaks for your awsome work!!!\n. ",
    "bluesunrise": "\nYou've got to update your PR :D\n\nupdated it with removal of + conversion to space, now it only converts %20\nalso made the failed test case more obvious with lots of %%%%%%\n. > I'm going to update the test not to use /tmp (windows users hate that), but otherwise, great PR!\nI was about to ask you about /tmp on Windows. \nThere is another test in test/servers/web.js that also uses /tmp, see line 577, 585\n. LOL, what a classic photo!\n. The + support was added because I've just usually done that in the past. There are lots of examples of URLs with + in them for spaces. My case doesn't need the pluses, feel free to remove it\n. Would that be more obvious?:\n/sky%20%%%%%%%with+space.jpg'\n. ",
    "DanielHreben": "Yes, it works fine, thanks!\n. ",
    "TombolaShepless": "@evantahler thanks for getting back so quickly! The Bye message change is bang on.\nI'm investigating/prototyping a potential replacement for a C# chat server that we have started seeing performance issues with and is difficult to scale in it's current form.\nI initially started out with the chatRoom API but I shelved it in favour of going down a manual route. This was at about 2am on Saturday so I honestly can't remember what the problems were! I've just sat here for 5 minutes trying to remember!\nI'll go back to the chatApi this evening and let you know what issues I run into (if I do! I'm still learning action hero!)\nAgain, thanks for getting back so quickly!\n. ",
    "hzahoori": "Great!! That worked for me!! That was the only thing I needed!! I think once the the http methods are specific to the specified routing that would solve a lot of issues.\n. ",
    "TobiTonner": "Thanks for merging.\nYes, I'm already using the data.connection.sendFile() when I'm returning actual files from the file system.\nIn this case, however, I wanted to stream results from a database query (thousands of rows) back to the client. Using api.servers.servers.web.sendFile(connection, error, fileStream, mime, length, lastModified) seems to work well - or are there any other options to pipe data back to the client?\n. ",
    "marcmmx": "https://blog.evantahler.com/blog/authentication-with-actionHero-again.html https://blog.evantahler.com/blog/authentication-with-actionHero-again.html\n\nAm 08.06.2016 um 03:13 schrieb Evan Tahler notifications@github.com:\nCan you be more specific? Which link?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/evantahler/actionhero/issues/861#issuecomment-224460354, or mute the thread https://github.com/notifications/unsubscribe/AHULEmAxBa_72VpFS1IrxgWdiMevTFBxks5qJhcmgaJpZM4ItY0U.\n. \n",
    "louiszuckerman": "Thank you\n. That's what I did \ud83d\ude03\n. The diff view might make it look weird though\n. ",
    "miguelavaqrod": "Hi Evan!\nI will try to explain it better...\nIn config/i18n.js, I set determineConnectionLocale to 'api.customLocalization.lookup'.\nLater, I created the initializer I mention above (with the \"lookup\" method).\nWhat I am trying to do is offer the client localized messages based on the client's browser language (based on accept-language headers).\nOn every client request, I can see that the lookup method is executed and it returns the right locale (\"es\" in my case -- \"clocale\" variable).\nThis is my actions/index.js handler:\njs\nexports.index = {\n    name: 'index',\n    description: 'API Index',\n    run: function(api, data, next){\n        data.response.id = api.id;\n        data.response.message = api.i18n.localize('Welcome to my API');\n        data.response.uptime = new Date().getTime() - api.bootTime;\n        next();\n    }\n};\nProblem... it always localize the \"Welcome to my API\" in the default language (\"en\").\nSo, I set \"api.i18n.setLocale(clocale)\" in the initializer and it localize fine.\nHaving said that...\nI think I am the one doing things wrong... if, as you said \"The line api.i18n.setLocale(clocale) seems to set the system locale\", I am setting the SYSTEM locale, I think I am changing the locale for ALL clients, and not only the client request... don't I?\nI think the correct handler would be:\njs\nexports.index = {\n    name: 'index',\n    description: 'API Index',\n    run: function(api, data, next){\n        data.response.id = api.id;\n        data.response.message = **data.connection.localize('Welcome to my API');**\n        data.response.uptime = new Date().getTime() - api.bootTime;\n        next();\n    }\n};\nGoing to test it!!\nThanks again!\nUPDATE: Yes! All works fine that way!!\nThanks for your support!!\n. Hi!\nI am a bit new using AH, but if you think my experience will help, for sure I will!\nPlease inform me about how and where I have to proceed.\n:-)\n. Ok then! :-)\n. ",
    "norfair00": "I just install with \"./node_modules/.bin/actionhero generate\"\n. And run for test ! (npm start)\n. Which version I use ?\n. Not work, swit project to ubuntu !\n. ",
    "yinwz": "me too, crash on  http://127.0.0.1:8080/ \nOS: win10_x64\nnode:4.4.5\nnpm:2.15.5\nthe error log is:\nD:\\yinwz\\Desktop\\node>npm start\n\nmy_actionhero_project@0.0.1 start D:\\yinwz\\Desktop\\node\nactionhero start\n\n2016-06-30T08:42:07.145Z - info: actionhero >> start\n2016-06-30T08:42:07.261Z - notice: ** starting actionhero \n2016-06-30T08:42:07.277Z - info: Redis connection client connected\n2016-06-30T08:42:07.277Z - info: Redis connection subscriber connected\n2016-06-30T08:42:07.277Z - info: Redis connection tasks connected\n2016-06-30T08:42:07.293Z - info: actionhero member 192.168.10.69 has joined the cluster\n2016-06-30T08:42:07.428Z - notice: pid: 3576\n2016-06-30T08:42:07.428Z - notice: server ID: 192.168.10.69\n2016-06-30T08:42:07.461Z - notice: Starting server: web @ 0.0.0.0:8080\n2016-06-30T08:42:07.461Z - notice: Starting server: websocket\n2016-06-30T08:42:08.079Z - notice: environment: development\n2016-06-30T08:42:08.079Z - notice: ** Server Started \n_http_outgoing.js:309\n      throw new TypeError('The header content contains invalid characters');\n      ^\nTypeError: The header content contains invalid characters\n    at storeHeader (_http_outgoing.js:309:13)\n    at ServerResponse.OutgoingMessage._storeHeader (_http_outgoing.js:222:9)\n    at ServerResponse.writeHead (_http_server.js:218:8)\n    at server.sendWithCompression (D:\\yinwz\\Desktop\\node\\node_modules\\actionhero\\servers\\web.js:194:38)\n    at server.sendFile (D:\\yinwz\\Desktop\\node\\node_modules\\actionhero\\servers\\web.js:148:14)\n    at D:\\yinwz\\Desktop\\node\\node_modules\\actionhero\\initializers\\genericServer.js:99:14\n    at ReadStream. (D:\\yinwz\\Desktop\\node\\node_modules\\actionhero\\initializers\\staticFile.js:73:15)\n    at emitOne (events.js:77:13)\n    at ReadStream.emit (events.js:169:7)\n    at fs.js:1683:10\nnpm ERR! Windows_NT 10.0.14366\nnpm ERR! argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"start\"\nnpm ERR! node v4.4.5\nnpm ERR! npm  v2.15.5\nnpm ERR! code ELIFECYCLE\nnpm ERR! my_actionhero_project@0.0.1 start: actionhero start\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the my_actionhero_project@0.0.1 start script 'actionhero start'.\nnpm ERR! This is most likely a problem with the my_actionhero_project package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     actionhero start\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs my_actionhero_project\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!\nnpm ERR!     npm owner ls my_actionhero_project\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     D:\\yinwz\\Desktop\\node\\npm-debug.log\nD:\\yinwz\\Desktop\\node>\n. look this url\nhttp://www.alexkras.com/typeerror-the-header-content-contains-invalid-characters/?utm_source=tuicool&utm_medium=referral\n. node_modules\\actionhero\\servers\\web.js\nline 110\nif(lastModified){ connection.rawConnection.responseHeaders.push(['Last-Modified', new Date(lastModified)]); }\nmodify to\nif(lastModified){ connection.rawConnection.responseHeaders.push(['Last-Modified', new Date(lastModified).toUTCString()]); }\n. > I'll guess that your default locale involves reporting dates in a non-english / non-western way?\nYes, one fifth of population are Chinese \n. redis 127.0.0.1:6379> config get \n 1) \"dbfilename\"\n 2) \"dump.rdb\"\n 3) \"requirepass\"\n 4) \"\"\n 5) \"masterauth\"\n 6) \"\"\n 7) \"bind\"\n 8) \"\"\n 9) \"unixsocket\"\n10) \"\"\n11) \"logfile\"\n12) \"\"\n13) \"pidfile\"\n14) \"/var/run/redis.pid\"\n15) \"maxmemory\"\n16) \"3221225472\"\n17) \"maxmemory-samples\"\n18) \"3\"\n19) \"timeout\"\n20) \"0\"\n21) \"tcp-keepalive\"\n22) \"0\"\n23) \"auto-aof-rewrite-percentage\"\n24) \"100\"\n25) \"auto-aof-rewrite-min-size\"\n26) \"1048576\"\n27) \"hash-max-ziplist-entries\"\n28) \"512\"\n29) \"hash-max-ziplist-value\"\n30) \"64\"\n31) \"list-max-ziplist-entries\"\n32) \"512\"\n33) \"list-max-ziplist-value\"\n34) \"64\"\n35) \"set-max-intset-entries\"\n36) \"512\"\n37) \"zset-max-ziplist-entries\"\n38) \"128\"\n39) \"zset-max-ziplist-value\"\n40) \"64\"\n41) \"lua-time-limit\"\n42) \"5000\"\n43) \"slowlog-log-slower-than\"\n44) \"10000\"\n45) \"slowlog-max-len\"\n46) \"128\"\n47) \"port\"\n48) \"6379\"\n49) \"databases\"\n50) \"16\"\n51) \"repl-ping-slave-period\"\n52) \"10\"\n53) \"repl-timeout\"\n54) \"60\"\n55) \"maxclients\"\n56) \"10000\"\n57) \"watchdog-period\"\n58) \"0\"\n59) \"slave-priority\"\n60) \"100\"\n61) \"hz\"\n62) \"10\"\n63) \"no-appendfsync-on-rewrite\"\n64) \"no\"\n65) \"slave-serve-stale-data\"\n66) \"yes\"\n67) \"slave-read-only\"\n68) \"yes\"\n69) \"stop-writes-on-bgsave-error\"\n70) \"yes\"\n71) \"daemonize\"\n72) \"no\"\n73) \"rdbcompression\"\n74) \"yes\"\n75) \"rdbchecksum\"\n76) \"yes\"\n77) \"activerehashing\"\n78) \"yes\"\n79) \"repl-disable-tcp-nodelay\"\n80) \"no\"\n81) \"appendonly\"\n82) \"no\"\n83) \"dir\"\n84) \"D:\\yinwz\\Desktop\\iotmw\"\n85) \"maxmemory-policy\"\n86) \"noeviction\"\n87) \"appendfsync\"\n88) \"everysec\"\n89) \"save\"\n90) \"3600 0 300 0 60 0\"\n91) \"loglevel\"\n92) \"notice\"\n93) \"client-output-buffer-limit\"\n94) \"normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60\"\n95) \"unixsocketperm\"\n96) \"0\"\n97) \"slaveof\"\n98) \"\"\n. redis 127.0.0.1:6379> keys  \n1) \"resque:workers\"\n2) \"resque:worker:yinwz-pc:6244+1:default:started\"\n3) \"resque:queue:default\"\n4) \"resque:resque_scheduler_master_lock\"\n5) \"resque:connection_test_key\"\n6) \"resque:stat:processed\"\n7) \"resque:stat:processed:yinwz-pc:6244+1\"\n8) \"actionhero:cache:__session:e778a269def57578491ce76fa0bcbb2c6a44b085\"\n9) \"resque:queues\"\n. process.env.FAKEREDIS = false;\nvar host     = process.env.REDIS_HOST || '127.0.0.1';\nvar port     = process.env.REDIS_PORT || 6379;\nvar db       = process.env.REDIS_DB   || 0;\nvar password = process.env.REDIS_PASS || null;\nexports['default'] = {\n  redis: function(api){\n``\n// konstructor: The redis client constructor method\n// args: The arguments to pass to the constructor\n// buildNew: is itnew konstructor()or justkonstructor()`?\nif(process.env.FAKEREDIS === 'false' || process.env.REDIS_HOST !== undefined){\nreturn {\n    '_toExpand': false,\n    client: {\n      konstructor: require('ioredis'),\n      args: [{ port: port, host: host, password: password, db: db }],\n      buildNew: true\n    },\n    subscriber: {\n      konstructor: require('ioredis'),\n      args: [{ port: port, host: host, password: password, db: db }],\n      buildNew: true\n    },\n    tasks: {\n      konstructor: require('ioredis'),\n      args: [{ port: port, host: host, password: password, db: db }],\n      buildNew: true\n    }\n  };\n}else{\nreturn {\n    '_toExpand': false,\n    client: {\n      konstructor: require('fakeredis').createClient,\n      args: [port, host, {fast: true}],\n      buildNew: false\n    },\n    subscriber: {\n      konstructor: require('fakeredis').createClient,\n      args: [port, host, {fast: true}],\n      buildNew: false\n    },\n    tasks: {\n      konstructor: require('fakeredis').createClient,\n      args: [port, host, {fast: true}],\n      buildNew: false\n    }\n  };\n}\n```\n}\n};\n. btw\uff1athe same code is running ok on linux\n. I has given up the attempt on windows.\n. NOW, It is running OK.\nI reinstall the  newest version redis on windows.\nhttps://github.com/MSOpenTech/redis/releases\n. OS\uff1awin10_x64\nNode.js\uff1a4.4.5\nactionhero\uff1a16.0.0\nredis\uff1a3.2.10(windows), default config. I modify the id and serverToken in config/api.js for each role, the result is still same.. I use environment variables 'ACTIONHERO_ROLE' to determin the runtime behavior, and change the queues in config/tasks.js for each role. Thus, it works well!\nFollow your help, change  'MIN_TASK_PROCESSORS=0, MAX_TASK_PROCESSORS=0', no change quenes, also it works well.\nThank you!. ",
    "alvarojoao": "My code follows:\n```\n        vm.wsClient = new ActionheroClient;\n    var room = \"Some#id\";\n    console.log(\"Room: \", room);\n    var apiUrl = 'wss://host/primus/?_primuscb=1467385830253-0'\n    wsClient.options = {\n        url: apiUrl,\n        ping: 10000,\n        pong: 4000,\n        reconnect: {\n            maxDelay: 8000,\n            minDelay: 5000,\n            retries: 100000,\n            factor: 0\n        }\n    };\n\n    wsClient.connect(function(error, details){\n        $scope.$apply(function(){\n\n            if (error) {\n                console.log(\"Error while trying to connect to websocketServer: \", error);\n                forceShowError();\n                return;\n            }\n\n            console.log(\"\\n\\n\\n Details: \", details, \"\\n\\n\");\n        });\n    });\n\n```\n. ",
    "daper": "Many thanks, you are right... One container - one process. I'll change my approach.\n. ",
    "tienne": "hero my config/redis.js\n```\nexports['default'] = {\n  redis: function(api){\n// konstructor: The redis client constructor method\n// args: The arguments to pass to the constructor\n// buildNew: is it `new konstructor()` or just `konstructor()`?\n\nif(process.env.FAKEREDIS === 'false' || process.env.REDIS_HOST !== undefined){\n  return {\n    '_toExpand': false,\n    client: {\n      konstructor: require('ioredis'),\n      args: [{ port: port, host: host, password: password, db: db }],\n      buildNew: true\n    },\n    subscriber: {\n      konstructor: require('ioredis'),\n      args: [{ port: port, host: host, password: password, db: db }],\n      buildNew: true\n    },\n    tasks: {\n      konstructor: require('ioredis'),\n      args: [{ port: port, host: host, password: password, db: db }],\n      buildNew: true\n    }\n  };\n}else {\n  return {\n    '_toExpand': false,\n    client: {\n      konstructor: require('fakeredis').createClient,\n      args: [port, host, {fast: true}],\n      buildNew: false\n    },\n    subscriber: {\n      konstructor: require('fakeredis').createClient,\n      args: [port, host, {fast: true}],\n      buildNew: false\n    },\n    tasks: {\n      konstructor: require('fakeredis').createClient,\n      args: [port, host, {fast: true}],\n      buildNew: false\n    }\n  };\n}\n\n}\n};\n```\n. @evantahler myproject package.json not include fakeredis\n. oh Thank you\ni'm testing~\n. this issue close thank you\n. Thank you to understand I try to apply comment\nthis issues closed\n. I'm sorry now that I 've seen\nBut node-resque is not include dependencies in my project package.json\nwhat will be fixed inactionhero package.json dependencies?\nOr will I need to be modified in myproject package.json\nthank you\n. @evantahler thank you~\n. ",
    "MarcusSpecht": "Seems like i use an old config/redis.js file\n```\nexports['default'] = {\n  redis: function(api){\n    var redisDetails = {\n      // Which channel to use on redis pub/sub for RPC communication\n      channel: 'actionhero',\n      // How long to wait for an RPC call before considering it a failure\n      rpcTimeout: 5000,\n      // which redis package should you ise?\n      pkg: 'fakeredis',\n  // Basic configuration options\n  host     : process.env.REDIS_HOST || '127.0.0.1',\n  port     : process.env.REDIS_PORT || 6379,\n  database : process.env.REDIS_DB   || 0,\n};\n...\n\n```\nThose don't get updated by default using npm update!? I can see why. What is the best way to update actionhero config files while still maintaining customizations?\n. Thx I will update my files manually. I am a newb to nodejs so I was looking for a convenient but awesome entry into api programming... so actionhero. A generic Chapter on the github page or documentation about what to do/consider when updating actionhero packages would help.\nKeep up the awesome work. If you are curious I am programming a \"datacentral\" for library data starting with german universities. Opensource actionhero with cluster capabilities could really be something here. So thx.\n. ",
    "thEpisode": "Uhmm!, it's ok!, thank you so much! :dancer: \n. ",
    "Martinlck": "Thanks a lot @evantahler, this was a mistake on my end on how I was passing the command through docker.\nI really appreciate the dedication and enthusiasm you put into the project, keep it up! \n. Sure, I'll make some time today to submit one, thanks a lot!!!\n. Ok, I've been knocking my head a little bit because I started writing a test to reproduce the issue and couldnt reproduce it, and I also found a test that already should have reproduced the problem, but it wasnt happening. \nThen I went to the code on web.js inside servers and found out that on the repository is different than the npm module and the issue is fixed. So no need to do a PR :( I was excited to contribute... Well it will be next time! \nThanks again for AH! And for your patience.\n. Ok, after testing with the specHelper, this only happens when using the action hero client.. Ok never mind, I found the cause of the issue, is on my end.\nI did not add the locale folder on CI, and then on the parseRequest function it matches the string error message and instead of getting the expected locale message it was just getting the raw error code verbNotAllowed. Maybe that could be improved? using some error code or something? I mean if there is a different locale with different text or in different language it will cause the same issue since the function parseRequest checks explicitly for the English text.\nLet me know your ideas, if you think we could do something I can create a PR.\nI can't thank you guys enough for the amazing project and for it to be open source! \n. Hello @evantahler I'm sorry my mistake, the url is actually localhost:8080/api/showDocumentation \nAnd it does not work it throws the error. \n(node:13181) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 3): TypeError: Cannot read property 'slice' of null\n(node:13181) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\nEverything else is the same, just empty action hero project with new version, and hit that url on a GET request.\nDoing a little bit of research, the error comes from file web.js line 473\nlet search = connection.rawConnection.parsedURL.search.slice(1)\nand parsedURL on my get request is\n{\n  protocol: null,\n  slashes: null,\n  auth: null,\n  host: null,\n  port: null,\n  hostname: null,\n  hash: null,\n  search: null,\n  query: {},\n  pathname: '/api/showDocumentation',\n  path: '/api/showDocumentation',\n  href: '/api/showDocumentation' }\nAlso tried to change the rootEndpointType as you say, it still throws the same error.. Ok after researching about the issue, found out this: https://github.com/nodejs/node/issues/13404\nSo is non related to the AH version, rather AH not working on GET requests with action and not QS on latest node versions.\nI will submit a PR linking to this issue.. Thank you for building such an amazing API server.. How do you want us to prove or not prove that is unused code path.\nI'm assuming just removing it and running the tests might not be enough?. Current implementation (not handling the promise results of the middleware functions )\nhttps://gist.github.com/Martinlck/d446702d1193d2e439039503695762c6\nProposed solution (handling the promise results appropriately, bubbling up errors if they are thrown)\nhttps://gist.github.com/Martinlck/d391709195922b67dd86fbae5ad59fd3\nPlease let me know if you agree with the proposed solution or if you have a better idea and I will submit PR and tests for this.\nThanks.. Based on our Slack discussion, I reverted the test changes, and I replicated them all with async middleware functions, proving that we still have backwards compatibility and that the issue is fixed.. Took care of all the cases where the instanceof was being used.\nIt should be good to go. Thank you for the help. \nLet me know if further issues or comments.\n. ",
    "aurasalexander": "Sure, I will take a look into it some hours from now.\n. ... continuing from my private account.\nThere are quite some IPv6 parsers out there, but the ones I've seen seem to dual focus on parsing and manipulating. I don't feel like pulling in another lib with noticeable overhead in favor of an eight character regex change ;-).. Oh! I'm sorry. I had some issues updating my branch to the current HEAD. I thought I tackled them as the files changed in this request were seemingly correct. I'll look into it again soon.. I rebased my branch. Could you please check if the fork issue is resolved now?. ",
    "itopenup": "I have this action:\n`'use strict';\nexports.getECG = {\n    name: 'getECGs',\n    summary: 'Get ECG\\'s of account by id',\n    description: 'Get ECG\\'s of account by id',\n```\ntags: ['ECG'],\nauthenticated: true,\nheaders: {\n    Authentication: {\n        required: true\n    }\n},\ninputs: {\n    id: { required: true },\n},\nrun: function (api, data, next) {\napi.mongo.Account.findById(data.params.id)\n    .populate({ path: 'analyzes', match: { deleted: false } })\n    .exec((err, user) => {\n\n    if (err) {\n        return next(err);\n    }\n\n    if (!user) {\n        data.connection.rawConnection.responseHttpCode = 404;\n        return next(new Error('User not found'));\n    }\n\n    if (user.whoami !== 'patient') {\n        return next(new Error('Just for patients.'));\n    }\n\n    data.response = user.analyzes;\n    next();\n\n});\n\n}\n```\n};`\nI'm making requests via curl using bash script which makes requests in a loop with i sec delay between.\n. And for authentication I have the only action pre-processor middleware:\n`'use strict';\nrequire('sugar');\nmodule.exports = {\n    loadPriority: 1000,\n    startPriority: 1000,\n    stopPriority: 1000,\n```\ninitialize: function (api, next) {\n    let authenticationMiddleware = {\n        name: 'Authentication middleware',\n        global: true,\n        priority: 1,\n        preProcessor: function(data, next) {\n        /*\n         * params\n         * connection,\n         * action,\n         * actionTemplate\n         * ...\n         * */\n\n        if(data.actionTemplate.authenticated === true) {\n\n            /*data.actionTemplate.inputs.id = {\n                required: true\n            };\n            data.actionTemplate.inputs.requesterIsPrivileged = {\n                required: true\n            };*/\n\n            let req = data.connection.rawConnection.req;\n\n            if(req.headers && req.headers['authentication']) {\n\n                api.cache.load(api.config.app.cacheKeys.accessToken + '_' + req.headers['authentication'],\n                    function(err, value, expireAt) {\n\n                        if(!value) {\n                            data.connection.rawConnection.responseHttpCode = 401;\n                            return next(new Error('Access token is invalid'));\n                        }\n\n                        if(err) {\n                            data.connection.rawConnection.responseHttpCode = 500;\n                            return next(err);\n                        }\n\n                        api.mongo.Account.findById(value.id)\n                            .then(account => {\n                                if (account.is_blocked) {\n                                    data.connection.rawConnection.responseHttpCode = 403;\n                                    throw new Error('Account is blocked');\n                                }\n                                return next();\n                            })\n                            .catch(err => {\n                                return next(err);\n                            });\n                    });\n            } else {\n                data.connection.rawConnection.responseHttpCode = 403;\n                return next(new Error('Authentication is required'));\n            }\n        } else {\n            next();\n        }\n    }\n};\n\napi.actions.addMiddleware(authenticationMiddleware);\nnext();\n\n},\nstart: function (api, next) {\n    next();\n},\nstop: function (api, next) {\n    next();\n}\n```\n};`\n. Actually it's not important how to make requests. I tried swagger, the same result.\n. Thanks a lot. The reason why I opened this issue is that I saw similar issue in ActionHero. I even could not think I have a problem with mongo driver. But when I just removed Mongo-request from the action it became working.\nClosing issue. Sorry for troubling )\n. ",
    "BigForNothing": "I didn't see your reply until this morning, so while it did crash overnight, I'll have to wait until tomorrow morning to get the stats object output. \nI'm not doing any rotation at all. This is currently just being used as a dev server. I have a production cluster running as well (it's in production mode, but is just an internal beta server). The incident is happening there as well. I went ahead and did a grep against the log directory for \"FSReqWrap.oncomplete\" and these are the timestamps: \ncluster.log:{\"level\":\"alert\",\"message\":\"[worker #4 (4627)]:        at FSReqWrap.oncomplete (fs.js:123:15)\",\"timestamp\":\"2016-10-06T07:00:49.468Z\"}\ncluster.log:{\"level\":\"alert\",\"message\":\"[worker #2 (4590)]:        at FSReqWrap.oncomplete (fs.js:123:15)\",\"timestamp\":\"2016-10-06T15:15:12.222Z\"}\ncluster.log:{\"level\":\"alert\",\"message\":\"[worker #1 (30954)]:        at FSReqWrap.oncomplete (fs.js:123:15)\",\"timestamp\":\"2016-10-11T01:13:47.757Z\"}\ncluster.log:{\"level\":\"alert\",\"message\":\"[worker #3 (30991)]:        at FSReqWrap.oncomplete (fs.js:123:15)\",\"timestamp\":\"2016-10-11T16:17:56.181Z\"}\ncluster.log:{\"level\":\"alert\",\"message\":\"[worker #3 (7382)]:        at FSReqWrap.oncomplete (fs.js:123:15)\",\"timestamp\":\"2016-10-12T05:42:43.086Z\"}\ncluster.log:{\"level\":\"alert\",\"message\":\"[worker #3 (5050)]:        at FSReqWrap.oncomplete (fs.js:123:15)\",\"timestamp\":\"2016-10-13T08:34:50.295Z\"}\ncluster.log:{\"level\":\"alert\",\"message\":\"[worker #4 (31011)]:        at FSReqWrap.oncomplete (fs.js:123:15)\",\"timestamp\":\"2016-10-13T10:13:10.760Z\"}\ncluster.log:{\"level\":\"alert\",\"message\":\"[worker #1 (26562)]:        at FSReqWrap.oncomplete (fs.js:123:15)\",\"timestamp\":\"2016-10-14T14:43:26.877Z\"}\ncluster.log:{\"level\":\"alert\",\"message\":\"[worker #2 (30977)]:        at FSReqWrap.oncomplete (fs.js:123:15)\",\"timestamp\":\"2016-10-15T19:14:23.351Z\"}\ncluster.log:{\"level\":\"alert\",\"message\":\"[worker #3 (32206)]:        at FSReqWrap.oncomplete (fs.js:123:15)\",\"timestamp\":\"2016-10-16T00:35:03.143Z\"}\ncluster.log:{\"level\":\"alert\",\"message\":\"[worker #5 (31030)]:        at FSReqWrap.oncomplete (fs.js:123:15)\",\"timestamp\":\"2016-10-16T23:41:36.811Z\"}\ncluster.log:{\"level\":\"alert\",\"message\":\"[worker #1 (9671)]:        at FSReqWrap.oncomplete (fs.js:123:15)\",\"timestamp\":\"2016-10-17T16:47:20.584Z\"}\ncluster.log:{\"level\":\"alert\",\"message\":\"[worker #4 (9665)]:        at FSReqWrap.oncomplete (fs.js:123:15)\",\"timestamp\":\"2016-10-18T04:05:41.349Z\"}\ncluster.log:{\"level\":\"alert\",\"message\":\"[worker #5 (9677)]:        at FSReqWrap.oncomplete (fs.js:123:15)\",\"timestamp\":\"2016-10-19T08:33:54.346Z\"}\ncluster.log:{\"level\":\"alert\",\"message\":\"[worker #1 (9918)]:        at FSReqWrap.oncomplete (fs.js:123:15)\",\"timestamp\":\"2016-10-19T09:01:29.512Z\"}\nIf running in cluster mode, the individual workers restart as expected and all functionality remains. When running in single mode, it drops to the command line as would be expected. \nI should also add that there are no plugins being used and I don't have any tasks being ran.\nI'm sorry, I have no idea about Baidu. Since this hasn't been released publicly, I'm assuming they are just scanning IPs to see what exists. \n. Please see the pull request, I may have resolved it for you with a quick reorder. \nQuick Edit, how do we turn on a 404 logging? The original triggering request never showed up in my logs.\n. Completely valid. I do actually have a deploy behind nginx. But since this was happening on my deployments regardless of proxy use, I didn't think to check nginx's log. Just looked at the merge. Glad to see it. Thanks!\n. Will do, do you want me to change it to a request.get instead of request.post as well? \n. ",
    "NamespaceValentine": "The trouble is that, yes, I can test my middleware with an action, but I cannot test my middleware by itself. For instance, this works:\n```\n// initializers/middleware.js\nvar authToken = function(api) {\n  return {\n    name: 'authToken',\n    preProcessor: function(data, next){\n      try {\n        //Do stuff\n      } catch (e) {\n        data.connection.rawConnection.responseHttpCode = 400;\n        data.response.errors = [e];\n        next();\n      }\n    }\n  }\n};\nmodule.exports = {\n  testAuth: authToken,\ninitialize: function(api, next){\n    api.actions.addMiddleware(authToken(api));\n    next();\n  }\n}; \n```\n```\n// actions/auth.js\nexports.getLookupSelf = {\n  name: 'getLookupSelf',\n  description: 'I return metadata about the given token',\noutputExample: {},\ninputs: {\n  },\nmiddleware:[\"authToken\"],\nrun: function(api, data, next){\n    data.response.data = {};\n    next();\n  }\n};\n```\n```\n// tests/middleware.js\nvar should = require('should');\nvar actionheroPrototype = require('actionhero').actionheroPrototype;\nvar actionhero = new actionheroPrototype();\nvar api;\ndescribe('middleware', function(){\nbefore(function(done){\n  actionhero.start(function(error, a){\n    api = a;\n    done();\n  })\n});\n\nafter(function(done){\n  actionhero.stop(function(error){\n    done();\n  });\n});\n\nit('should work', function(done){\n  testConnection.rawConnection.req = {headers:{'someheader': 'somevalue'}}\n  testConnection.rawConnection.responseHeaders = [];\n  api.specHelper.runAction('getLookupSelf, testConnection, function(response){\n    should.not.exist(response.errors);\n    done();\n  });\n\n});\n\n```\nHowever, if I want to test just the middleware without the getLookupSelf call (so I can test that the middleware itself is doing what it should without getLookupSelf possibly messing up the test), the only way I can see to currently do that is:\n```\n// tests/middleware.js\nvar should = require('should');\nvar actionheroPrototype = require('actionhero').actionheroPrototype;\nvar actionhero = new actionheroPrototype();\nvar api;\nvar authMiddleware = require('../initializers/middleware').testAuth;\ndescribe('middleware', function(){\nbefore(function(done){\n  actionhero.start(function(error, a){\n    api = a;\n    done();\n  })\n});\n\nafter(function(done){\n  actionhero.stop(function(error){\n    done();\n  });\n});\n\nit('should work', function(done){\n  var testConnection = new api.specHelper.connection();\n  var authMiddlewareInitialized = authMiddleware(api).preProcessor;\n\n  testConnection.rawConnection.req = {headers:{'someheader': 'somevalue'}}\n  var data = {connection: testConnection, response:{errors:null}};\n  authMiddlewareInitialized(data, function(){\n    should.not.exist(data.response.errors);\n    done();\n  });\n\n});\n\n});\n``\n. I would prefer that we have a way of doing this through the specHelper, rather than having to manually fetch the portion of the middleware we want to run and directly calling it.\n. Ideally the test helper would consider the middleware agnostic of where it appears in the flow, pre or post. It should be able to take in an expected state (read payload and anything else the middleware reads) and run the middleware, then test its output to either the next step (how does it affect the response and what is the modified state after the middleware has run).\n. Oh, unfortunately I dont have the bandwitdth to contribute for it, I'm just submitting the feature request and use case. I currently have the workaround for it, as I showed in the OP.\n. My current workaround on every response is:delete response.messageCount;delete response.serverInformation;delete response.requesterInformation;`\n. If the response that I give back from my action is an array, the specHelper simply pushes it into the array. I shudder to think what it would do with a string. Here is the relevant source code from specHelper that shows that it is always appending this data, regardless of settings:\n```\nserver.on('actionComplete', function(data){\n      data.response.messageCount = data.messageCount;\n      data.response.serverInformation = {\n        serverName:      api.config.general.serverName,\n        apiVersion:      api.config.general.apiVersion,\n      };\n\n      data.response.requesterInformation = {\n        id: data.connection.id,\n        remoteIP: data.connection.remoteIP,\n        receivedParams: {}\n      };\n\n      if(data.response.error){\n        data.response.error = api.config.errors.serializers.servers.specHelper(data.response.error);\n      }\n\n      for(let k in data.params){\n        data.response.requesterInformation.receivedParams[k] = data.params[k];\n      }\n\n      if(data.toRender === true){\n        server.sendMessage(data.connection, data.response, data.messageCount);\n      }\n    });\n\n```\nMy request would be that there is some env flag, option flag, or server flag that I could set that would gate the logic on whether or not this meta information is applied to specHelper responses. I get that the info can be useful, but it is information that can be disabled in servers, and so for testing it should be able to be disabled as well. Adding that information without the ability to disable it destroys the dev/prod parity and makes unit tests behave differently than actual servers. Because of this, unit tests using specHelper need to use workarounds to test that the data comes in formatted as expected in production.\n. Thank you so much for the quick response and turnaround ^_^\n. ",
    "Stuey2": "Thanks Evan, that worked, thought I'd read the documentation. Just a note, some of the example tasks from: http://www.actionherojs.com/docs/overview/#examples-tasks show next(true) or next(true, null) called which throws an error (but doesn't stop task processing), I presume the API for tasks is next() for success. Some learning to do on my part. Thanks again, I'll try the slack group if I get stuck.. ",
    "anhldbk": "@evantahler Thanks for your timely response. It's my fault. \nCurrently I'm using yarn instead of npm. Just run yarn add actionhero and it will generate file package.json also. In this case, our actionhero generator does not replace the file with the template one.\nDon't you think the generator should remove package.json first before generating other files?. @evantahler What's about the question of: \n\nDon't you think the generator should remove package.json first before generating other files?\n\nIf we remove it first, it doesn't matter if users use yarn or npm. Wow, I think we should improve our generator a little bit. \nHere is our package.json if properly generated:\njs\n///\n \"author\"      : \"YOU <YOU@example.com>\",\n  \"name\"        : \"my_actionhero_project\",\n  \"description\" : \"my actionhero project\",\n///. @evantahler You're right! \nI think there are 2 solutions for this problem.\nSolution 1\nSo the generator should detect file package.json (if any) and properly merge it with the template one, right?\nBut what is properly? Should we override or keep existing fields? \nSolution 2\nThe generator should create a new directory, just like the way react-native does:\nreact-native init AwesomeProject\ncd AwesomeProject\nreact-native run-android\nI think solution #2 is much better.\nBtw, we should guide users to install actionhero globally, right?. ",
    "jacekgdudek": "Note: Required when f.e. making a call to elasticsearch during the action call. Acquiring elasticsearch readStream and passing it as a sendFile using api.servers.servers.web.sendFile. At that point we don't know how big (compressed or not) the stream is going to be.. @evantahler  Sorry for the delay. Hope the test is up to your satisfaction. Is there any chance to have it also re-released under v15.0.3?. Thanks!. Added. ",
    "vladbalmos": "Hi Evan,\nThank you for the reply.I have 3 microservices that share the same data structures in Redis. For example microservice A creates a redis hash with the key X. The microservice B then receives the key X from a client and is responsible with manipulating only some of the fields in the hash X.\nIf I would to set each microservice use a different redis db, then from my understanding of redis db - the data could not be shared between then - if this is not the case, please correct me and this feature would not be necessary.\nRegards,Vlad Balmos \nOn Friday, March 3, 2017 7:18 AM, Evan Tahler <notifications@github.com> wrote:\n\nHi Vlad, that's a good hack.\nTo better understand your use-case, can you share why changing the redis DB identifier (0,1,2,etc) is not viable for your use-case?\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.  \n. While explaining my use case to you I had another ideea which would solve this. I could create a new Redis client which would use the same DB as the other  microservice and its primary use case would be to share the common data, and the default actionhero client would use another DB to prevent the conflicts.\nI'll be closing this issue. Thanks for helping me discover this new fix :)). I can reproduce it in a vagrant machine (ubuntu/xenial64) using node v6.10.1:\nVagrantfile.txt\n```\nubuntu@ubuntu-xenial:/vagrant$ NODE_ENV=test node_modules/.bin/mocha test/tasks/\nTest: Task Middleware\ntest-server-10883 @ 2017-03-30T18:36:28.372Z - notice:  Starting ActionHero \ntest-server-10883 @ 2017-03-30T18:36:28.658Z - notice: pid: 10883\ntest-server-10883 @ 2017-03-30T18:36:28.659Z - notice: server ID: test-server-10883\ntest-server-10883 @ 2017-03-30T18:36:28.661Z - info: ensuring the existence of the chatRoom: defaultRoom\ntest-server-10883 @ 2017-03-30T18:36:28.661Z - info: ensuring the existence of the chatRoom: otherRoom\ntest-server-10883 @ 2017-03-30T18:36:28.667Z - info: actionhero member test-server-10883 has joined the cluster\ntest-server-10883 @ 2017-03-30T18:36:28.671Z - notice: Starting server: socket @ 0.0.0.0:11884\ntest-server-10883 @ 2017-03-30T18:36:28.675Z - notice: Starting server: web @ 0.0.0.0:11883\ntest-server-10883 @ 2017-03-30T18:36:28.681Z - notice: Starting server: websocket\ntest-server-10883 @ 2017-03-30T18:36:29.450Z - warning: loading the testServer\ntest-server-10883 @ 2017-03-30T18:36:29.451Z - notice: environment: test\ntest-server-10883 @ 2017-03-30T18:36:29.451Z - alert:  ActionHero Started \n    1) can modify parameters before a task and modify result after task completion\ntest-server-10883 @ 2017-03-30T18:36:29.762Z - notice: Shutting down open servers and stopping task processing...\ntest-server-10883 @ 2017-03-30T18:36:29.763Z - notice: Stopping server: socket\ntest-server-10883 @ 2017-03-30T18:36:29.764Z - notice: Stopping server: web\ntest-server-10883 @ 2017-03-30T18:36:29.764Z - notice: Stopping server: websocket\ntest-server-10883 @ 2017-03-30T18:36:29.767Z - alert:  ActionHero Stopped \nTest: RunAction\ntest-server-10883 @ 2017-03-30T18:36:29.848Z - notice:  Starting ActionHero \ntest-server-10883 @ 2017-03-30T18:36:29.870Z - notice: pid: 10883\ntest-server-10883 @ 2017-03-30T18:36:29.871Z - notice: server ID: test-server-10883\ntest-server-10883 @ 2017-03-30T18:36:29.871Z - info: ensuring the existence of the chatRoom: defaultRoom\ntest-server-10883 @ 2017-03-30T18:36:29.872Z - info: ensuring the existence of the chatRoom: otherRoom\ntest-server-10883 @ 2017-03-30T18:36:29.873Z - info: actionhero member test-server-10883 has left the cluster\n    2) \"before all\" hook\ntest-server-10883 @ 2017-03-30T18:36:29.876Z - notice: Shutting down open servers and stopping task processing...\ntest-server-10883 @ 2017-03-30T18:36:29.877Z - notice: Stopping server: socket\ntest-server-10883 @ 2017-03-30T18:36:29.877Z - notice: Stopping server: web\ntest-server-10883 @ 2017-03-30T18:36:29.878Z - notice: Stopping server: websocket\ntest-server-10883 @ 2017-03-30T18:36:29.880Z - alert:  ActionHero Stopped \ntest-server-10883 @ 2017-03-30T18:36:29.881Z - info: actionhero member test-server-10883 has joined the cluster\n  3) \"after all\" hook\n0 passing (2s)\n  3 failing\n1) Test: Task Middleware can modify parameters before a task and modify result after task completion:\n     Uncaught Error: Uncaught, unspecified \"error\" event. (null)\n      at queue. (node_modules/node-resque/lib/worker.js:35:10)\n      at connection. (node_modules/node-resque/lib/queue.js:17:10)\n      at Redis.self.listeners.error (node_modules/node-resque/lib/connection.js:87:48)\n      at Redis.silentEmit (node_modules/ioredis/lib/redis.js:472:22)\n      at Socket. (node_modules/ioredis/lib/redis/event_handler.js:114:10)\n      at emitErrorNT (net.js:1281:8)\n      at _combinedTickCallback (internal/process/next_tick.js:80:11)\n      at process._tickCallback (internal/process/next_tick.js:104:9)\n2) Test: RunAction \"before all\" hook:\n     Uncaught Error: Uncaught, unspecified \"error\" event. (null)\n      at queue. (node_modules/node-resque/lib/worker.js:35:10)\n      at connection. (node_modules/node-resque/lib/queue.js:17:10)\n      at Redis.self.listeners.error (node_modules/node-resque/lib/connection.js:87:48)\n      at Redis.silentEmit (node_modules/ioredis/lib/redis.js:472:22)\n      at Socket. (node_modules/ioredis/lib/redis/event_handler.js:114:10)\n      at emitErrorNT (net.js:1281:8)\n      at _combinedTickCallback (internal/process/next_tick.js:80:11)\n      at process._tickCallback (internal/process/next_tick.js:104:9)\n3) Test: RunAction \"after all\" hook:\n     Uncaught Error: fakeredis: You've closed this connection with QUIT, cannot GET\n      at CLOSED (node_modules/fakeredis/lib/connection.js:244:11)\n      at push (node_modules/fakeredis/lib/connection.js:16:5)\n      at RedisClient.cl.send_command (node_modules/fakeredis/main.js:151:7)\n      at RedisClient.(anonymous function).RedisClient.(anonymous function) (node_modules/redis/lib/commands.js:45:25)\n      at node_modules/node-resque/lib/connection.js:44:18\n      at node_modules/async/dist/async.js:3791:9\n      at replenish (node_modules/async/dist/async.js:882:17)\n      at iterateeCallback (node_modules/async/dist/async.js:867:17)\n      at node_modules/async/dist/async.js:844:16\n      at node_modules/async/dist/async.js:3796:13\n      at apply (node_modules/async/dist/async.js:21:25)\n      at node_modules/async/dist/async.js:56:12\n      at node_modules/fakeredis/main.js:195:5\n      at Timeout._onTimeout (node_modules/fakeredis/lib/connection.js:343:18)\n```\nIt's quite random, I get the first 2 errors consistently but the fakeredis one doesn't come up everytime. Done. I'm glad I could help!. With an actual Redis server the issue doesn't come up; below are the requested config files. I will run your test case as soon as I have some spare time. Thanks for looking into this!\nconfig/redis.js:\nvar host     = process.env.REDIS_HOST || '127.0.0.1';\nvar port     = process.env.REDIS_PORT || 6379;\nvar db       = process.env.REDIS_DB   || 0;\nvar password = process.env.REDIS_PASS || null;\n\nexports['default'] = {\n  redis: function (api) {\n\n    // konstructor: The redis client constructor method\n    // args: The arguments to pass to the constructor\n    // buildNew: is it `new konstructor()` or just `konstructor()`?\n\n    if (process.env.FAKEREDIS === 'false' || process.env.REDIS_HOST !== undefined) {\n\n      return {\n        '_toExpand': false,\n        client: {\n          konstructor: require('ioredis'),\n          args: [{ port: port, host: host, password: password, db: db }],\n          buildNew: true\n        },\n        subscriber: {\n          konstructor: require('ioredis'),\n          args: [{ port: port, host: host, password: password, db: db }],\n          buildNew: true\n        },\n        tasks: {\n          konstructor: require('ioredis'),\n          args: [{ port: port, host: host, password: password, db: db }],\n          buildNew: true\n        }\n      };\n\n    } else {\n\n      return {\n        '_toExpand': false,\n        client: {\n          konstructor: require('fakeredis').createClient,\n          args: [port, host, {fast: true}],\n          buildNew: false\n        },\n        subscriber: {\n          konstructor: require('fakeredis').createClient,\n          args: [port, host, {fast: true}],\n          buildNew: false\n        },\n        tasks: {\n          konstructor: require('fakeredis').createClient,\n          args: [port, host, {fast: true}],\n          buildNew: false\n        }\n      };\n\n    }\n  }\n};\n\nconfig/tasks.js\nexports['default'] = {\n  tasks: function (api) {\n    return {\n      // Should this node run a scheduler to promote delayed tasks?\n      scheduler: (process.env.NODE_ENV == 'test') ? false : true,\n      // what queues should the taskProcessors work?\n      queues: ['*'],\n      // Logging levels of task workers\n      workerLogging : {\n        failure   : 'error', // task failure\n        success   : 'info',  // task success\n        start     : 'info',\n        end       : 'info',\n        cleaning_worker : 'info',\n        poll      : 'debug',\n        job       : 'debug',\n        pause     : 'debug',\n        internalError : 'error',\n        multiWorkerAction : 'debug'\n      },\n      // Logging levels of the task scheduler\n      schedulerLogging : {\n        start     : 'info',\n        end       : 'info',\n        poll      : 'debug',\n        enqueue   : 'debug',\n        reEnqueue : 'debug',\n        working_timestamp : 'debug',\n        transferred_job   : 'debug'\n      },\n      // how long to sleep between jobs / scheduler checks\n      timeout: 5000,\n      // at minimum, how many parallel taskProcessors should this node spawn?\n      // (have number > 0 to enable, and < 1 to disable)\n      minTaskProcessors: 1,\n      // at maximum, how many parallel taskProcessors should this node spawn?\n      maxTaskProcessors: 5,\n      // how often should we check the event loop to spawn more taskProcessors?\n      checkTimeout: 500,\n      // how many ms would constitue an event loop delay to halt taskProcessors spawning?\n      maxEventLoopDelay: 5,\n      // When we kill off a taskProcessor, should we disconnect that local redis connection?\n      toDisconnectProcessors: true,\n      // Customize Resque primitives, replace null with required replacement.\n      resque_overrides: {\n        queue: null,\n        multiWorker: null,\n        scheduler: null\n      }\n    };\n  }\n};\n\nexports.test = {\n  tasks: function (api) {\n    return {\n      timeout: 100,\n      checkTimeout: 50\n    };\n  }\n};\n\n. I forgot to mention that the tests are running inside a Docker container\nUPDATE\nI ran the tests directly on the host and the result is the same, so it's not related to Docker. Running your test on a clean install of actionhero passes, no problem. If I add the test to my project and run it I get this everytime:\nactionhero Tests\n     tasks\n       \u2713 enqueues and runs a delayed task (1) (1015ms)\n       \u2713 enqueues and runs a delayed task (2) (1020ms)\n       \u2713 enqueues and runs a delayed task (3) (1015ms)\n       \u2713 enqueues and runs a delayed task (4) (1013ms)\n       \u2713 enqueues and runs a delayed task (5) (1012ms)\n       \u2713 enqueues and runs a delayed task (6) (1014ms)\n       \u2713 enqueues and runs a delayed task (7) (1024ms)\n       \u2713 enqueues and runs a delayed task (8) (1017ms)\n       \u2713 enqueues and runs a delayed task (9) (1037ms)\n       \u2713 enqueues and runs a delayed task (10) (1015ms)\n       \u2713 enqueues and runs a delayed task (11) (1014ms)\n       \u2713 enqueues and runs a delayed task (12) (1017ms)\n       \u2713 enqueues and runs a delayed task (13) (1013ms)\n       \u2713 enqueues and runs a delayed task (14) (1019ms)\n       \u2713 enqueues and runs a delayed task (15) (1012ms)\n       \u2713 enqueues and runs a delayed task (16) (1014ms)\n       \u2713 enqueues and runs a delayed task (17) (1013ms)\n       \u2713 enqueues and runs a delayed task (18) (1013ms)\n       \u2713 enqueues and runs a delayed task (19) (1011ms)\n       \u2713 enqueues and runs a delayed task (20) (1012ms)\n     1) \"after all\" hook\n20 passing (22s)\n   1 failing\n1) actionhero Tests \"after all\" hook:\n      Uncaught TypeError: Cannot read property 'frequency' of undefined\n       at Object.api.tasks.jobWrapper.validateTask.enqueueRecurrentJob (node_modules/actionhero/initializers/tasks.js:244:17)\n       at null._onTimeout (node_modules/actionhero/initializers/tasks.js:102:22)\nI don't understand. Should I have done something after the upgrade? Update some files maybe?\n. I have discovered that if I modify the stopPriority property of the Redis initializer to 10000 the issue disappears. \nShouldn't the Redis initializer be the last one stopped? If my application initializers have a priority value of over 1000 (as stated in the docs) and in the stop phase of one of those I publish a message on a Redis channel, it will fail, since the Redis initializer is stopped before mine is (Redis initializer stop priority is 999).\n. If i'm not overlooking something, it shouldn't. If waitForResponse is true, then doCluster returns the promise with the  try { wait publish } catch (...) and skips the next publish call. . If waitForResponse is true, then this publish won't be executed. ",
    "gergelyke": "Wouldn't it make more sense to simply call this?\ndata.connection.rawConnection.setHeader('myHeader', 'cool'). It's okay, thanks. This is why I'd prefer using setHeader, because that handles everything. @evantahler I am kind of stuck - can you help me what's the purpose of cleanHeaders?. @evantahler what do  you think: https://github.com/actionhero/actionhero/pull/1022/files?. ",
    "greenkeeper[bot]": "Version 2.8.14 just got published.\nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nv2.8.14\n\u00a0\n\n\nCommits\nThe new version differs by 8 commits .\n\n30a7504 v2.8.14\na3cc3a9 make expect_stdout work on Node.js 0.12 (#1623)\n96f8bef fix commit 88fb83a (#1622)\ncd58635 fix AST_Binary.lift_sequences() (#1621)\n274331d transform String.charAt() to index access (#1620)\n0489d6d handle runtime errors in expect_stdout (#1618)\nfb09283 fix top-level directives in compress tests (#1615)\nb7c112e Add --in-source-map inline documentation (#1611)\n\nSee the full diff.\n\n. ## Version 3.0.7 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nv3.0.7\n\u00a0\n\n\nCommits\nThe new version differs by 2 commits.\n\nc881394 v3.0.7\ncb45886 export TreeTransformer (#1950)\n\nSee the full diff\n\n. ## Version 3.0.8 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nv3.0.8\n\u00a0\n\n\nCommits\nThe new version differs by 7 commits.\n\n43add94 v3.0.8\nefcf167 make expect_stdout node version specific (#1963)\n6ed9091 fix docs for side_effects flag to reflect current behavior (#1966)\n569c21e improve RegExp handling (#1959)\n87c3a2c remove space_colon (#1960)\nbaef8bf update output options in readme (#1958)\n0813c53 remove Travis CI badge\n\nSee the full diff\n\n. ## Version 3.0.10 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nv3.0.10\n\u00a0\n\n\nCommits\nThe new version differs by 6 commits.\n\nd3c4a8e v3.0.10\n7e164ab add \"es5\" to package.json keywords (#1980)\n22aedef document minify() option toplevel (#1979)\n58fae7d enhance if_return to handle return void... (#1977)\n5bf8d7e document 3.x minify() does not throw errors (#1975)\n1df9d06 document minify warnings and add an error example (#1973)\n\nSee the full diff\n\n. ## Version 3.1.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nv3.1.1: Hi, Node.js v8.0.0\nIn this version, we add Node.js v8 into our test matrix of Travis CI.\nBug Fixes\n\nshow error name in the error stack for Node.js 8 (a628aa7)\n\n\n\nCommits\nThe new version differs by 4 commits.\n\nd287fdc chore(release): 3.1.1\ne9bae69 docs(CHANGELOG): 3.1.1\na628aa7 fix: show error name the error stack for Node.js 8\n32a073a test: add test case for Node.js v8\n\nSee the full diff\n\n. After pinning to 6.4.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 2.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 4 commits.\n\na52b627 2.0.1\necae1b0 require node 6+\n930187b 'use strict' fixes #170\nef0b204 eslint, rm types.json\n\nSee the full diff\n\n. ## Version 2.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 8 commits ahead by 8, behind by 1.\n\n4a375ab 2.0.2\n8e67b6c v2.0.2 changelog\n722e151 fix cli\na78dad7 fix cli\n362a233 changelog task\n371e7e9 2.0.1\n966aefb Update CHANGELOG.md\nde18593 Fix #171\n\nSee the full diff\n\n. ## Version 1.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\n8937aea update main path\n\nSee the full diff\n\n. After pinning to 5.5.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 1.0.3 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 6.0.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. After pinning to 7.2.2 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 4.0.1 your tests are passing again. Downgrade this dependency \ud83d\udccc.. - The dependency ioredis was updated from 4.0.2 to 4.1.0.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80\n\nRelease Notes for v4.1.0\nBug Fixes\n\ncluster: quit() ignores errors caused by disconnected connection (#720) (fb3eb76)\ncluster: robust solution for pub/sub in cluster (#697) (13a5bc4), closes #696\ncluster: stop subscriber when disconnecting (fb27b66)\n\nFeatures\n\ncluster: re-select subscriber when the currenct one is failed (c091f2e)\n\nPerformance Improvements\n\nremove lodash deps for smaller memory footprint (80f4a45)\ncluster: make disconnecting from cluster faster (#721) (ce46d6b)\n\n\n\nCommits\nThe new version differs by 10 commits ahead by 10, behind by 1.\n\naeded57 chore(release): 4.1.0\n12aec1f docs(CHANGELOG): 4.1.0\n901c47e deps: upgrade redis-commands to v1.4.0 for Redis 5.0 commands\nce46d6b perf(cluster): make disconnecting from cluster faster (#721)\nfb27b66 fix(cluster): stop subscriber when disconnecting\nfb3eb76 fix(cluster): quit() ignores errors caused by disconnected connection (#720)\n16643e2 refactor: migrate cluster-related code to TypeScript (#717)\n80f4a45 perf: remove lodash deps for smaller memory footprint\nc091f2e feat(cluster): re-select subscriber when the currenct one is failed\n69712c4 chore(release): 4.0.2\n\nSee the full diff\n\n. After pinning to 6.1.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. - The dependency ws was updated from 6.1.1 to 6.1.2.\nYour tests are still failing with this version. Compare changes\n\nCommits\nThe new version differs by 6 commits.\n\n14d9088 [dist] 6.1.2\ncc86d22 [test] Remove no longer needed comment\n26436e0 [fix] Restore compatibility with Node.js < 6.13.0\n96b638c [pkg] Fix lint script\n761b1a4 [doc] Fix formatting in ISSUE_TEMPLATE.md\nb9fad73 [lint] Use prettier\n\nSee the full diff\n\n. After pinning to 7.2.3 your tests are passing again. Downgrade this dependency \ud83d\udccc.. - The dependency primus was updated from 7.3.0 to 7.3.1.\nYour tests are still failing with this version. Compare changes\n\nRelease Notes for Bug fix\n\nFixed a bug that prevented the socket attribute on the Spark from being\nset  (#705).\n\n\n\nCommits\nThe new version differs by 2 commits.\n\n4054df6 [dist] 7.3.1\n2d96d66 [fix] Add socket parameter in Spark constructor wrapper (#705)\n\nSee the full diff\n\n. - The dependency primus was updated from 7.3.1 to 7.3.2.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80\n\nRelease Notes for Bug fix\n\nFixed an issue that prevented the engine.io client bundle from working\nproperly (f8529fb, ceaed56).\n\n\n\nCommits\nThe new version differs by 3 commits.\n\nc0e0e82 [dist] 7.3.2\nceaed56 [minor] Rebuild the Engine.IO client -- version 3.3.1\nf8529fb [fix] Update browserify options for engine.io-client\n\nSee the full diff\n\n. After pinning to 6.5.2 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 5.5.1 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. ",
    "witem": "@evantahler \nThis PR add the ability to handle nested objects in inputs. Any nesting.\nThey support the same parameters as regular inputs(default, formatter, validator, required).\nGoals: accept nested objects.\nUse-case: need accept, validate and formatter request with nested object to API. Example:\n```\nexports.addUser = {\n  name: 'api/addUser',\n  description: 'I add user',\nfirstName: { required: true },\n  lastName: { required: false },\n  username: { required: true },\n  address: {\n    required: false,\n    schema: {\n      country: {\n        required: true,\n        default: 'USA'\n      },\n      state: { required: false },\n      city: {\n        required: true,\n        formatter: (val) => City:${val},\n        validator: (val) => val.length > 10,\n      }\n    }\n  }\n  run: () => {},\n}\n```\nNo breaking changes.\n@crrobinson14 it`s hard to realize as plugin with default, validator, formatter and required/. @crrobinson14 Plugin that overwrites the standard function, not very good solutions.. @evantahler I update docs and add example. And about validator. I use wrapper on https://www.npmjs.com/package/validator\nvalidatorWrapper.js:\n``\nconst validator = require('validator');\nconst validationWrapper = function(method, _message, secondArg) {\n    let message = _message;\n    if (validator[method] == null) {\n        throw new Error(Not exists method for validator: ${method});\n    }\n    if (message == null) {\n        message =validation error with method ${method}`;\n    }\nreturn function(value) {\n    try {\n        if (validator[method](`${value}`)) {\n            return true;\n        }\n    } catch (err) {\n        message = err.message;\n    }\n    return new this.AppError(message, 100);\n};\n\n};\nmodule.exports = validationWrapper;\n```\nAnd in actions in look like:\n```\nconst validator = require('./validationWrapper');\ninputs: {\n  userEmail: {\n    required: true,\n    validator: validator('isEmail', 'userEmail validate error'),\n  },\n},\n. Thanks for issue. \nI can create PR for fix error. But I not sure about add `JSON.parse`.. @evantahler I add test. Ok, thanks!\n. @gcoonrod in AH test I have not found any test for testing periodic(with frequency) tasks. Therefore, I think testing this functional should not be included in PR. Need include mock util(like sinon) and write tests with it. But it will take a lot of time. @evantahler but in initialize it be called with `new`:\nhttps://github.com/actionhero/actionhero/blob/4f9375253625e260ecdb9e8ea31b8674b962855f/initializers/resque.js#L40-L41. @gcoonrod maybe in `api.utils.hashMerge` check if function `class` and don't call it, use simple reassign.. I resolve it by adding hack(`queueOverride` function):\nconst NodeResque = require('node-resque')\nclass Queue extends NodeResque.Queue {\n    constructor(...args) {\n        super(...args);\n    }\n}\nconst queueOverride = () => Queue;\nexports.default = {\n    tasks(api) {\n        return {\n            resque_overrides: {\n                queue: queueOverride,\n            },\n         };\n    },\n};\n```\nIssue may be closed. Thanks\nUPD. Sorry, I'm wrong, hack not help.. @gcoonrod @evantahler \nMaybe add overrides not for classes, but for options?. @evantahler @gcoonrod ping. You can try this:\n```js\n\nc.toString()\n\"class someClass {}\"\nf.toString()\n\"function () {}\"\na.toString()\n\"() => {}\"\n``\n. @gcoonrod @evantahler any updates?. Thanks! When do you plan to release new version?. expect:schemaParam.requiredParam is a required parameter for this action. done. Set toundefinedhelp GC clear data, butdelete` only delete property, not clear memory.\nhttp://bertanguven.com/preventing-memory-leaks-in-javascript-null-vs-delete. done\n. \n",
    "pckhoi": "A way to configure the commands to also run start and stop functions of initializers would be nice. Perhaps serverLevel: \"started\" or serverPhase: \"started\" (default to \"initialized\").. ",
    "jkelkar": "As an example, for this route:\nput: [\n   { path: '/:table/:field/:val', action: 'tableEdit' } // params: {name: 'me', age: 12}\n]\nIt would be useful is 'table', 'field', 'val' with values were provided separately from 'name' and 'age'. Currently they all appear in data.params. The change will help to figure out what data was for search and which to be used in the update and thereby reduce the number of actions needed.\n. >  Does that also mean that you wouldn't want /api/tableEdit?table=table&field&field&val=val&name=me&age=21to work?\nActually yes, I would not because the placeholders in the path\n/:table/:field/:val\nhave a significantly different meaning from those provided in the query or params. The first is used to locate or identify the resource and the second acts on it. Thinking of automation, and not limiting your self to just one path, I can see a situation where a code generator would be able to use the path and the values collected to automatically access the DB to do the necessary.\nAs in Express.js, it would be nice to have a separation between: params, body and query.. Actually:\n/:table/:field/:val\nmakes sense. It would be the last 3 segment route in this method. Here I choose to mean I look for field with that value. \nSo say I want to update a row in table 'orderhead', where 'id' equals 20.\nI would use\n/orderhead/id/20 \nand the payload would contain the fields that are being updated. say subtotal=12.23, tax=... and total=.... \nThe code processing this request already knows the path and that table, field and val are part of the url and hence are to be used in the where part of the query and the rest of the payload (in what is traditionally called the body) is to be used in the set part (in this example:  update orderhead set subtotal=12.23, ... where id=20).\nIf this still seems nonsensical, we can drop the whole thing. . I like with your suggestion. You have a very good point, one I had not thought of. \nI only have one route of this nature for a method and given the # of segments in a route.\nI shall use middleware to extract what I need out of params and also to build the query. Thanks. . ",
    "billybonks": "ye it is quite a bit of information, was worried about putting to much.\n\nRight now, ActionHero looks a lot like next, in that the file-system is the convention for loading the server (tasks live in /tasks, actions in /actions, etc). If we want to abandon that and do a more explicit \"main\" file which requires everything, perhaps this style makes more sense?\n\nI am happy with the filesystem layout, but either a main file or a config file where custom loaders can be added would be great, i would go with a config for now since it seems like the easiest. \n\nES6-class-y. Do you like this syntax better?\n\nI much prefer the ES6 class syntax, but i also prefer promise chains vs callbacks, and i plan to use them when i make a similar loader for actions.\n\nwhy would you run a task synchronously\n\ni mainly use it when i want to run the task from ah console.\nAnother reason why i prefer not to use api.tasks directly is it's easy for me to make a mistake with a string, but if i have to require a file, if i need to run a task node will crash if i made a mistake. so gives extra defense.\nin the future i pan to use decorators when they are in node, but this way of using actionhero is slightly experimental :).. @crrobinson14 i do see how the decoupling is a strength, and if i need a server to run in the cluster that doesn't have the code to run the task, then i will call it via the string name :). I am quite happy with action hero in quite a few respects, and would rather to use it and perhaps i will find a way to help it grow. i dislike sails. As for express would require more work to get it set up.\n@evantahler i will definitely try out the commands, my current syntax shape is 100% compatible with the way that action hero works\nbut i don't want to get sidetracked from what my main goal of this issue is.\nright now the initializers/tasks.js file loads the file using require\nhttps://github.com/billybonks/actionhero/blob/1b6b86fc05f502d24312fe5ef07c65380af00e4f/initializers/tasks.js#L28\ntry {\n          const collection = require(fullFilePath) <-------\n          for (let i in collection) {\n           ....\n          }\nI would like to see if we can find a way to change that to be\ntry {\n          const collection = config.loaders.task(fullFilePath) <-------\n          for (let i in collection) {\n           ....\n          }\nwhere config config.loaders.task would default to require unless overridden ?. @evantahler i don't think shimming require with webpack or bable is the correct course of action\n@crrobinson14 this is the function that i am using atm, of course i have lost a quite a few action hero features, but i plan on iterating over the function\nhttps://github.com/billybonks/actionhero/commit/2093aeb6c0cfcfa4d452e84ba3b4bcdc978f5a6f#diff-af4d0f17c39abaac1efe373a4721d4ccR4. will do so the overall strategy looks okay to you ?. Sorry for the delay on finalising this, it will be ready by Monday for\nsure. Thanks for your patience :)\nOn Thu, Jul 27, 2017 at 12:04 AM Evan Tahler notifications@github.com\nwrote:\n\n@billybonks https://github.com/billybonks Also, we would require a test\nadded which locks-in your new functionality, which could also help explain\nthe use-case you have.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/actionhero/actionhero/pull/1075#issuecomment-318100761,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABkGyMTeXE62g-QpynJsEUjINf5Wm1e_ks5sR2NzgaJpZM4OEgq4\n.\n. sorry again for the delay very, tied up atm. @evantahler  when I try to run the test I just get\n\n\n. awesome thanks :)\nOn Fri, Sep 22, 2017 at 12:30 PM Evan Tahler notifications@github.com\nwrote:\n\nClosed #1075 https://github.com/actionhero/actionhero/pull/1075.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/actionhero/actionhero/pull/1075#event-1260584469, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABkGyBuoR-3KazyRB0chc11Y60rZ42ooks5skzfdgaJpZM4OEgq4\n.\n. \n",
    "usebaz": "I think this is not necessary functionality. It is too specific and rarely used. And unclear. why you use sync function and in next line call callback?\nmaybe better: fs.unlink(file, callback)?. ",
    "antonsapyanov": "I mean exactly raw body (String or Buffer), before it is parsed to an object.. Stripe sends JSON object. There is no reason to stringify data.connection.rawConnection.params.body, because there is no guarantee, that result string will equal request's raw body string (which is used to make Stripe Signature header).. Could you reopen the issue please? I think it is quite important. Here is an emulation of request, that Stripe sends:\ncurl -X POST -H \"Content-Type: application/json\" -H \"Stripe-Signature: <STRIPE_SIGNATURE_MADE_FROM_REQUEST_BODY_CONTENT>\" -d '{\"id\":\"evt_1AdxX6JJkD9VAcbRjTfTLfBi\",\"data\":{\"object\":{\"id\":\"ii_1AdxX6JJkD9VAcbR6VmutlEc\",\"object\":\"invoiceitem\",\"amount\":99972,\"currency\":\"usd\",\"customer\":\"cus_AzxFyutLWWVW0x\",\"date\":1499676380,\"description\":\"Remaining time on Enterprise after 10 Jul 2017\",\"discountable\":false,\"invoice\":null,\"livemode\":false,\"metadata\":{},\"period\":{\"start\":1499676380,\"end\":1502354032},\"plan\":{\"id\":\"3\",\"object\":\"plan\",\"amount\":100000,\"created\":1497342793,\"currency\":\"usd\",\"interval\":\"month\",\"interval_count\":1,\"livemode\":false,\"metadata\":{},\"name\":\"Enterprise\",\"statement_descriptor\":null,\"trial_period_days\":null},\"proration\":true,\"quantity\":1,\"subscription\":\"sub_AzxFTHB8YZx78C\",\"subscription_item\":\"si_1AdxL2JJkD9VAcbRf8uStNkt\"}},\"type\":\"invoiceitem.created\"}' http://localhost:8080/api/stripe_handler\nTo verify the request, I need to call:\nstripe.webhooks.constructEvent(<RAW_REQUEST_BODY>, <STRIPE_SIGNATURE_HEADER>, <SIGNING_SECRET>)\nHere is exactly what I call:\nvar sign = data.connection.rawConnection.req.headers['stripe-signature'];\ntry {\n  var event = api.stripe.webhooks.constructEvent(JSON.stringify(data.connection.rawConnection.params.body), sign, api.config.stripe.sign_secret);\n} catch (e) {\n  next(e);\n}\nAnd that results with an exception: 'No signatures found matching the expected signature for payload'.. To successfully pass the try-catch block, I need to provide not JSON.stringify(data.connection.rawConnection.params.body), but exactly the request`s raw body, which is the JSON object (as a String) sent by Stripe.. Thanks! It is exactly what we need. Waiting for successful pull request.. ",
    "nicolasembleton": "Saw that yesterday and thought about exactly the same thing. That'll be a great improvement from a readability perspective. . Yes. Smart. It's not critical to change yet. But breaking it or others will make it a critical bug. So yeah, makes total sense. Could offer both at some point too I suppose. (curious up to which node / npm version is actionhero going to be supported?)\nSent from my HTC U11 using FastHub. ",
    "rakhnin": "Hi @evantahler. In my vision this context for the task class instance itself is missing inside run method (One not able to call additional task methods through this). But it seems this hack is used in the unit tests ;(. So I need to dive deeply in this before merge request. Or I miss something else in the AH task/worker architecture?. @evantahler done.. Sorry @evantahler. Seems it is bad idea with current passing worker instance. Cause task is a singleton ;). I\u2019ll update passing as a second argument of the \u2018run\u2019 method.. I've added the test.. Thanks for the invitation ;). ",
    "boardmain": "tried to install manualy ansy-style and now..\n`$ npm install actionhero\nnpm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but npm-shrinkwrap.json was generated for lockfileVersion@0. I'll try to do my best with it!\nnpm WARN francesco@1.0.0 No description\nnpm WARN francesco@1.0.0 No repository field.\nnpm ERR! Cannot read property '0' of undefined\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/francesco/.npm/_logs/2017-11-02T10_20_41_550Z-debug.log\n`\nim on node 8.9.0. ",
    "ampsarfraz": "I am trying it on windows and below is the error that I get when I run node ./node_modules/.bin/actionhero --inspect start\nbasedir=$(dirname \"$(echo \"$0\" | sed -e 's,\\,/,g')\")\n          ^^^^^^^\nSyntaxError: missing ) after argument list\n    at createScript (vm.js:80:10)\n    at Object.runInThisContext (vm.js:139:10)\n    at Module._compile (module.js:599:28)\n    at Object.Module._extensions..js (module.js:646:10)\n    at Module.load (module.js:554:32)\n    at tryModuleLoad (module.js:497:12)\n    at Function.Module._load (module.js:489:3)\n    at Function.Module.runMain (module.js:676:10)\n    at startup (bootstrap_node.js:187:16)\n    at bootstrap_node.js:608:3. ",
    "hontas": "\nI do not have redis installed at all.\nThis is what it sais in the quickstart-section of https://www.actionherojs.com/get-started/\n\nredis (for cluster support, cache, stats, and tasks); but not required\nDid I misinterpret this? Is it required?\n\nSorry, missed rhat one - I am running on OSX. Yes thank you! (documentation)\nI guess the other part has to do with npx and not actionhero- wasn't aware of the npx-command until a few days ago.. Thanks for your concern, actually since I ran in to this little wall I haven't had the time to keep playing around with it. But I will, eventually :). \n",
    "nvtin": "After worked around it, I realize it relate to redis server. It is not a bug in actionhero.\nSo I will close this issue.. ",
    "derstrassi": "Made a small note about closing the fileStream if it is not piped.. ",
    "rubens21": "Forget it, \nI have tried to reproduce it destroying and up it again, and now it is working. I did not change the package.json. I did change the node version though.\nI will close the issue, sorry about the false alarm.\n. ",
    "bhagaban": "\nHi @evantahler - Above is the actual screenshot with the actual path. The path has an Uppercase letter.. @evantahler - The filepath is /Users/bhagaban/Projects/verifylabs-server/initializers/bigchaindb.js. ",
    "alimvedats": "same issue, when i changed the file, actionhero gives this error\nbecause api.unWatchAllFiles called before this error\ni was added throw for tests and logged api.watchedFiles and i saw /node_modules/actionhero/initializers/config.js in the list..\nthrow flow:\nat Object.api.unWatchAllFiles (/app/node_modules/actionhero/initializers/config.js:77:13)\n    at Config.stop (/app/node_modules/actionhero/initializers/config.js:202:9)\n    at Utils.stopFunction (/app/node_modules/actionhero/classes/process.js:168:31)\n    at Object.api.utils.asyncWaterfall (/app/node_modules/actionhero/initializers/utils.js:77:31)\n    at Process.stop (/app/node_modules/actionhero/classes/process.js:249:25)\n    at Process.restart (/app/node_modules/actionhero/classes/process.js:269:18)\n    at Object.restart (/app/node_modules/actionhero/classes/process.js:37:50)\n    at api.watchFileAndAct (/app/node_modules/actionhero/classes/process.js:131:30)\n    at FSWatcher.fs.watch (/app/node_modules/actionhero/initializers/config.js:67:13)\n    at FSWatcher.emit (events.js:159:13)\n    at FSEvent.FSWatcher._handle.onchange (fs.js:1379:12)\n. ah-resque-ui is not for this?. > Looks like a great start!\n\nHere are some suggestions for next steps:\n\n~~rebase from master so it would be possible to merge it in~~\n~~add a test showing off an async connection create.  Add an await api.utils.sleep(1) for a simple way to sleep.  This is probably the most important missing step~~\n~~update the docs to show that you need to call the new async method~~\n~~complete your TODOs for the docs~~\n\nThis is a breaking change!\n\n\ud83d\udc4ddone \nand I've remove one of TODO. any update or suggestion?\nI think this solution fully supports backward compatibility. i moved to here with some enhancements\nhttps://github.com/actionhero/actionhero/pull/1189/files/a14b53dabd9efb30a0d6d540e554b5762abda180#diff-f5572dd2458d60fadaabbbffe99c04d8R918. you right!\n\ud83d\udca1Also if I change the argument name to \"callCreateMethods\" I think this confusion will be disappear. \nsuggestion\n    if (callCreateMethods) {. ",
    "Cheese-Yu": "Thanks!. ",
    "bayssmekanique": "Yes, I guess I added a docs section to mine, but it's more or less the same.\n```javascript\nconst chai = require('chai')\nconst dirtyChai = require('dirty-chai')\nconst expect = chai.expect\nchai.use(dirtyChai)\nconst ActionHero = require('actionhero')\nconst actionhero = new ActionHero.Process()\nlet api\ndescribe('core', function () {\n  this.timeout(100000)\n  before(async () => { api = await actionhero.start() })\n  after(async () => { await actionhero.stop() })\nit('should have booted into the test env', () => {\n    expect(process.env.NODE_ENV).to.equal('test')\n    expect(api.env).to.equal('test')\n    expect(api.id).to.be.ok()\n  })\nit('can retrieve server uptime via the status action', async () => {\n    let { uptime } = await api.specHelper.runAction('core:status')\n    expect(uptime).to.be.above(0)\n  })\nit('can retrieve documentation', async () => {\n    let { error } = await api.specHelper.runAction('core:docs')\n    expect(error).to.not.exist()\n  })\n})\n``. 1) It is usingcross-envand theNODE_ENVis set totrue.\n2) It is not using a different Redis DB, however, it is using a different namespace.\n3)workerLoggingstill default too (fresh install, working on migrating to 18). Clearing out the redis database entirely before running tests resolves this issue.. As an added note, this only appears when using a declared route.  It does not appear when passing in a route through the query routing.. Ok, so this turns out be an obscure bug in Postman which seems to only happen when there is a URL in the query parameters and you use a variable as the base route.  Took me a while to track it down.  Sorry for the trouble :-P. Once again, this was an error on my part.  I was using destructuring assignment to pull apart thedataobject, and becausetoRenderis a primitive, mytoRendervariable was just a value (_not a reference_) and thus thedata.toRenderwas still set totrue`.\nWould it make sense to make a setter functions on the data object for setting the toRender and toProcess values rather than relying on setting them directly?  I know it sounds a little overkill, but those are the only primitives on the root data object which would be modified, and it would prevent future issues like this.. ",
    "JennyWe": "Hello Evan, \nthank you for your quick reply and your solution. But unfortunately we need the ActionHero version 17.1.2. \nHave you any idea for the version 17.1.2 ? \nThanks in advance.\n. ",
    "NealHumphrey": "Perfect, looks good!. thanks @evantahler. I'm actually doing this as my first Node app - I'm coming from Python backends and client-side JS, so I'd be a little lost trying to find where this update should happen. If you can point me to the right place in the codebase of where the generate command is being executed I can take a stab at it and see if I can figure it out quickly enough. . I will get on it today/tomorrow- been out on vacation. Thanks for checking\nin.\n. @evantahler this issue should be able to be closed now - this was resolved in this merged PR: https://github.com/actionhero/actionhero/pull/1195. ",
    "kamontat": "\nAlready enabled\nYes, I try. But nothing refresh. I didn\u2019t do nothing, just create new project and try to change something. \n\nBut hot reload server when config files changed, it work.. ",
    "walbertoibarra": "I don't think that's gonna work as api.routes.loadRoutes gets called only once when initializing https://github.com/actionhero/actionhero/blob/master/initializers/routes.js#L190 and when a file changes https://github.com/actionhero/actionhero/blob/master/initializers/actions.js#L102. Also, it expects all routes to be on api.config.routes.\nWas thinking to add a validation here https://github.com/actionhero/actionhero/blob/master/initializers/config.js#L134 to check if file is routes.js and merge the route arrays instead of replacing them entirely. Any thoughts?. Hi, sorry, was a little busy, but yes, I kind of have a solution, here's the commit.\nI'm just unsure of how can I test this new behavior, can you point me to the right direction?. Should I create  2 new config directories instead?. ",
    "etorrejon": "Thanks for the review, @evantahler !! I'll update . Creating in the initializer feels like a good place for it - I think that way it'll create the dir even if you're not running tests...\nIf that works for you, I'll add a commit that does that.. Actually I guess it'd be in config/logger.js since that's where the transport is configured. ... unless you're thinking it'd be cleaner to leave that code out of config by keeping it in the build script. ok sounds good! Sorry for the delay - will have an update soon.. thanks! :). :). Looks like there's a typo - should be arrayStartingMatch?. ",
    "eric-zadara": "@evantahler I guess I'm still a bit confused, especially when comparing to https://github.com/actionhero/actionhero/issues/1175#issuecomment-363312158:\nPerhaps I'm missing the point of the example in the docs for a tasks middleware?\nDoesn't middleware usually want the data objects passing through it?\nDocs example:\nconst middleware = {\n      name: 'timer',\n      global: true,\n      priority: 90,\n      preProcessor: async () => {\n        const worker = this.worker\n        worker.startTime = process.hrtime()\n      },\n      postProcessor: async () => {\n        const worker = this.worker\n        const elapsed = process.hrtime(worker.startTime)\n        const seconds = elapsed[0]\n        const millis = elapsed[1] / 1000000\n        api.log(worker.job.class + ' done in ' + seconds + ' s and ' + millis + ' ms.', 'info')\n      },\n      preEnqueue: async () => {\n        const arg = this.args[0]\n        return (arg === 'ok') // returing `false` will prevent the task from enqueing\n      },\n      postEnqueue: async () => {\n        api.log(\"Task successfully enqueued!\")\n      }\n    }\nSimple example:\nconst middleware = {\n      name: 'console-task',\n      global: true,\n      priority: 1000,\n      preEnqueue: async () => {\n        const data = this\n        console.log({preEnqueue: data})\n      },\n      postEnqueue: async () => {\n        const data = this\n        console.log({postEnqueue: data})\n      },\n      preProcessor: async () => {\n        const data = this\n        console.log({preProcessor: data})\n      },\n      postProcessor: async () => {\n        const data = this\n        console.log({postProcessor: data})\n      }\n    }\nIf declared outside the Class:\n{ preEnqueue: {} }\n{ postEnqueue: {} }\n{ preProcessor: {} }\n{ postProcessor: {} }\nOr in the class:\n{ preEnqueue: \n   MyInitializerClass {\n     name: 'my:initializer',\n     loadPriority: 703,\n     startPriority: 103,\n     stopPriority: 300 } }\n{ postEnqueue: \n   MyInitializerClass {\n     name: 'my:initializer',\n     loadPriority: 703,\n     startPriority: 103,\n     stopPriority: 300 } }\n{ preProcessor: \n   MyInitializerClass {\n     name: 'my:initializer',\n     loadPriority: 703,\n     startPriority: 103,\n     stopPriority: 300 } }\n{ postProcessor: \n   MyInitializerClass {\n     name: 'my:initializer',\n     loadPriority: 703,\n     startPriority: 103,\n     stopPriority: 300 } }\nWhereas:\nconst middleware = {\n      name: 'console-task',\n      global: true,\n      priority: 1000,\n      preEnqueue: async function () {\n        const data = this\n        console.log({preEnqueue: data})\n      },\n      postEnqueue: async function () {\n        const data = this\n        console.log({postEnqueue: data})\n      },\n      preProcessor: async function () {\n        const data = this\n        console.log({preProcessor: data})\n      },\n      postProcessor: async function () {\n        const data = this\n        console.log({postProcessor: data})\n      }\n    }\nI actually get back an object describing the task and worker I'm trying to apply middleware to.\nIf this is supposed to reference the class containing the middleware itself, then the example is still invalid as there would be no access to obtain this.worker or this.args[0].. @evantahler I'll switch over to my personal account for it, realized I had also missed the jsdoc reference in the initializer too. ",
    "DaniilBabanin": "The default form.maxFileSize has been set to 200MB. We have been using actionhero for various file sizes well above 200MB.\nthe form.maxFieldsSize is 20MB\n. ",
    "cecofreeman": "Hello,\nReally sorry! Will not repeat...\nOn Thu, 11 Oct 2018, 20:59 Evan Tahler, notifications@github.com wrote:\n\nYour code does not run, you are missing a \")\". Please test your code\nbefore submitting\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/actionhero/actionhero/pull/1262#issuecomment-429057912,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFIkyYW5bKjeAx584lgWsSYHQV_xbh7Uks5uj4cVgaJpZM4XW49j\n.\n. Hello,\nThank you for the comment!\nWill try to provide the test within couple of days.\n\nRegards\nOn Fri, 2 Nov 2018, 03:37 Evan Tahler <notifications@github.com wrote:\n\nThis looks like a good fix! Can you please provide a test that proves the\nbehavior (and so it won't break in this way again?)\nThanks!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/actionhero/actionhero/pull/1265#issuecomment-435243198,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFIkyRCRokXAMN3_AvnctSwhzwiOVoGXks5uq6G8gaJpZM4YGbMr\n.\n. \n",
    "inian": "I think the documentation needs to be updated at multiple places then. For example, https://docs.actionherojs.com/tutorial-web-server.html says \"set to `null` to disable the file server entirely\". ",
    "Mingyiz": "May be I  confused you, there are 2 point in this isuee\n1.  Is it a right way to disable redis ( I confirm my project is not relies on Redis for now)\n2.  npm start  failed\n    But after dig a while, I found this releated to my eniroment changes.\n   I install the node in windows code page 936, and install/run actionhero and my project in code page 65001 command, the error is come out.  I believe this not issue of actionhero, so it is not problem for me now ( I will do all the work in same code page).\nwhatever I complete the reproduce steps and attached the trace, hope help other people avoid same problem in my case.. ",
    "shookie": "Ok, maybe we misunderstand each other, and I should explain myself better. But maybe it really is the wanted behavior. But I have already heard from others that ran into issues from this merging behavior.\nThe use case isn't really about null or undefined, for both of which it is completely fine if later values overwrite earlier values. The use case is about empty objects being treated differently than non-empty-objects on merge.\nThe whole purpose of having the configuration distributed over many files is to allow grouping of configuration values that logically belong together into files, but still have the whole merged configuration available at run time.\nSo, you define a configuration structure that all the different config files must adhere to, because the code expects the values at the locations it expects them.\nMaybe a more instructive example would help, the test case I defined is just the minimal test case, but it doesn't demonstrate why it is needed.\n// config/departmentA.js\nexports.default = {\n  user:  { \n     john: { email: \"john@company.com\", rights: 0x1a77 },\n     billy: { email: \"billy@company.com\", rights: 0x6a03 },\n  }\n}\n// config/departmentB.js\nexports.default = {\n  // user is merged with previous file, all users are configured\n  user:  { \n     annie: { email: \"annie@company.com\", rights: 0x5556 },\n     george: { email: \"george@company.com\", rights: 0xFFFF },\n  }\n}\n// config/departmentC.js\n// a new department is created, and an predefined config file for it is created too\n// there aren't just any users yet\n// which means, once actionhero reads all configs, all users from the whole company are gone\nexports.default = {\n  // all previous users are overwritten by empty user object, no one is configured\n  user:  { \n     // add new users here\n     // username: { email: \"username@company.com\", rights: 0x0000 }\n  }\n}\nWith the patch I have provided, all empty objects are ignored, which means later empty objects don't overwrite/delete the configuration values in earlier non-empty objects. It also means you can't create preexisting keys with empty objects as their value, which is possible with the existing code.\nIf both should be possible, i.e. creating empty objects under a new key, and having empty objects keys not overwrite existing keys, then I need to adjust the provided patch a little.\nBut as it stands, the merging of objects does not happen according to the well defined mathematical set operators. \nCurrent behavior:\n{} + {} = {}\n{ A, B } = { A, B }\n{} + { A, B } = { A, B }\n{ A, B } + {} = {}\n{ A, B } + { C, D } = { A, B, C, D}\n{ A, B } + { C, D } + {} = {}\nAnd the last part is the problem.\nMy fix makes it so that \n{} + {} = undefined\n{ A, B } = { A, B }\n{} + { A, B } = { A, B }\n{ A, B } + {} = { A, B }\n{ A, B } + { C, D } = { A, B, C, D}\n{ A, B } + { C, D } + {} = { A, B, C, D}\nIdeal would probably be\n{} + {} = {}\n{ A, B } = { A, B }\n{} + { A, B } = { A, B }\n{ A, B } + {} = { A, B }\n{ A, B } + { C, D } = { A, B, C, D}\n{ A, B } + { C, D } + {} = { A, B, C, D}\nbut for that I need to adjust my fix a little.\n. Ok, I'll make a new patch ready, which implements the behavior you have described last. Maybe Today, more likely tomorrow. Testing and stuff.. ",
    "grsmyth": "So just some information on Strict Transport Security header.\nWhen you visit a site that has this header on https. For example, 'https://www.google.com', this header tells your browser to lock this site to https. That means when you type 'google.com' in the browser, it will redirect you to 'https://www.google.com' for as long as the lifetime set in max-age (obviously reset when you revisit the site).\nHowever this only kicks off when you visit the https site. If you visit http://www.google.com, nothing happens. It works like normal (well unless they build a redirect into the http site to make sure you always visit https but that's another system entirely...).\nAs such, there is no issue for anyone developing a non-secure site, it won't affect localhost development, and is only applicable to sites that have https capabilities. But really you shouldn't be developing non-https sites these days anyway. But that again is another topic!\n. ",
    "samking314": "Sure can, Evan. Thanks for replying.. This is curious. I am not sure why it's not passing. Either way, if you're using AH v19 and node v10 then this fixes the tutorial. Although, there could be something going on behind the scenes of which I am unaware.. ",
    "dlchet": "oops, i didnt mean to put that in the pull request! i guess i didnt\nunderstand pull requests exactly. i figured i would keep that in my\nbranch. not that its a big deal either way, just seems a bit\npresumptuous to put a pull request in for an editor foible.\nOn Fri, Jan 27, 2012 at 10:21 AM, Evan Tahler\nreply@reply.github.com\nwrote:\n\n\n\\ No newline at end of file\n+npm-debug.log\n+_*.vim\n\nlol, vim\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/evantahler/actionHero/pull/2/files#r392128\n. i'm not sure if there is a cleverer way but you can always add my\nbranch as a remote to merge by hand, and you can always revert\nspecific commits. but it seems like i should have \"closed\" the pull\nrequest and/or restricted it to a special branch.\n\nOn Fri, Jan 27, 2012 at 10:40 AM, Evan Tahler\nreply@reply.github.com\nwrote:\n\n\n\\ No newline at end of file\n+npm-debug.log\n+_*.vim\n\nEh, it's in there now! \u00a0No worries.\n(I don't know how to accept just certain parts/files of a pull request)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/evantahler/actionHero/pull/2/files#r392220\n. \n"
}