{
    "JakeWharton": "ea64e683eba17fade3b3415375b0cb3bbb1ce977\n. Released with v2.1.0\n. Requires low-level support in FragmentManagerImpl which we won't get. You can simply animate as a traditional view.\n. Released with 2.3.0\n. Bah I'm an idiot. Fixed in dev branch. I'll have to see if I'm able to do a release at work or not... can't remember if I have the proper setup. Good catch.\n. Released with 2.1.1. Updated on Market too.\n. Do you have a stacktrace? Or could you install it from the Market and click 'Report' when it crashes?\n. Awesome thanks. I did get one crash report from a Nexus One on 2.3.4 as well which is odd because I tested on 1.1, 1.5, 1.6, 2.2, and 2.3.3 in the emulator.\n. The error seems to be this:\njava.lang.NoClassDefFoundError: com.jakewharton.nineoldandroids.sample.VPADemo$1\nat com.jakewharton.nineoldandroids.sample.VPADemo.onCreate(VPADemo.java:29)\nat android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1047)\nat android.app.ActivityThread.performLaunchActivity(ActivityThread.java:1623)\nat android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:1675)\nat android.app.ActivityThread.access$1500(ActivityThread.java:121)\nat android.app.ActivityThread$H.handleMessage(ActivityThread.java:943)\nat android.os.Handler.dispatchMessage(Handler.java:99)\nat android.os.Looper.loop(Looper.java:130)\nat android.app.ActivityThread.main(ActivityThread.java:3701)\nat java.lang.reflect.Method.invokeNative(Native Method)\nat java.lang.reflect.Method.invoke(Method.java:507)\nat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:866)\nat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:624)\nat dalvik.system.NativeStart.main(Native Method)\nVery odd behavior because the first anonymous inner-class would be the first click listener. I'm going to try to just rebuild the APK for the market as the sample runs fine when I compile it myself.\nForgot to mention that I see this too on a N1 @ 2.1 and a Galaxy Nexus @ 4.0.2\n. New version deployed. After you receive the update please comment and/or close the issue if it worked.\n. Works on all my stuff. Must have just been a bad build. Thanks for reporting.\n. Good catch. Rolled an implementation myself since I had time to kill on a plane ride. Didn't get a chance to test it, though, since apparently a recent update borked adb on my laptop.\nTake a look if you want. Otherwise I'll get to testing tonight to make sure it works.\n. Nope. Tested and released as v2.2.0. Thanks for the report! I would have never have found it myself haha\n. It should work find on 1.6 as long as you compile with 3.0+. I refrained from including custom attributes directly in the library since that would knock it from being a .jar to a library project.\n. Merged to dev.\n. Wicked! I'll have a look this evening.\n. Nice find. Merged to dev.\n. Merged to dev. Thanks!\n. This is a limitation of the platform, not the library. There is nothing you can do other than update the LayoutParams once the animation completes to get the functionality you desire.\n. Use the onAnimationEnd callback to adjust the button's location on the screen to physically be where the animation ends. This is a fundamental limitation of Android and not the library.\n. LayoutTransition is not supported since it requires deep integration with ViewGroup which we obviously cannot fake. This is mentioned on the website (though very briefly).\n. You can read (or set directly) new properties of views using the ViewHelper class. The sample includes demos for how to animate the other properties (like 'x').\n. The SuppressLint class is not available for compilation via Maven :(\n. This is finally available for use through Maven. I will try to add this weekend.\n. This is a fundamental limitation of the framework on pre-Honeycomb. The View class simply moves the area of the canvas on which controls draw during animations rather than moving where the view actually exists.\nIf you are moving a button with an animation and having it exist somewhere else for a long period of time (such that you can interact with it) you should be actually moving it to the destination location when the animation ends.\nIn any case, this is a platform restriction and there's nothing the library can do about it.\n. Fixed on dev. Thanks.\n. Correct. There is nothing I can do about this, however, as it's the only avenue for animation. I suggest you take approaches like ActionBarSherlock does and handle this case in the views you are animating using custom containers or simple extensions of widgets.\n. This is simply a fundamental limitation of animating touchable views on pre-Honeycomb. There is no workaround for the animation portion. I recommend that when your animation completes, you modify the LayoutParams of the view that you are animating to actually move it to its destination position.\n. You should use the animation listeners to actually move the view in your layout once animation completes. The fact that only the drawing position can move on pre-Honeycomb is a fundamental limitation of the platform rather than the library.\n. Dupe #31. Can't be fixed.\n. Maven doesn't copy jars to your project directory. It just adds the ones in ~/.m2/ to the classpath.\n. Yes. I will try to!\n. In normal property animation you would call things like view.setTranslationX(0) in your callback. Since those methods are obviously not available on all API levels there's a helper included with the library called ViewHelper. Since you are translating you should be able to call ViewHelper.setTranslationX(view, 0) in order to reset the position.\n. Nice catch. Thanks.\n. This can't be done. The fragment animations are done deep inside the fragment manager and cannot be controlled or changed.\n. Merged to dev.\n. NineOldAndroids is a jar. You should pull it from Maven central using Gradle's dependency management.\n. ``` groovy\ndependencies {\n  repositories {\n    mavenCentral()\n  }\ncompile 'com.nineoldandroids:library:2.4.0'\n}\n``\n. Using the compatibility transformations requires an animation be playing on the view which requires it to be visible. There's no way to work around this fact.\n. This is a limitation of the pre-3.0 View rendering system. There's no easy way to work around this, sorry. \n. The hard way would be a customViewGroupwhich intercepted touch events and remapped them to the object's new coordinate system based on the transformationMatrixthat was currently applied. You could even do this by dynamically replacing the content view of an activity (android.R.id.content`) dynamically without requiring the implementer to use this custom view group explicitly.\nI spent about a day exploring this way, way back in the early days of this library. It turned out to be far too much work without a lot of payoff so I chose to abandon it.\n. ViewHelper has methods for this!\n. Indeed it is. Good find. I'll try to get to this...\n. Dupe: https://github.com/JakeWharton/NineOldAndroids/pull/59\n. No new functionality will be added, sorry.\n. This is a problem with your build, proguard, or that library.\n. This is already on master\n. ea64e683eba17fade3b3415375b0cb3bbb1ce977\n. Released with v2.1.0\n. Requires low-level support in FragmentManagerImpl which we won't get. You can simply animate as a traditional view.\n. Released with 2.3.0\n. Bah I'm an idiot. Fixed in dev branch. I'll have to see if I'm able to do a release at work or not... can't remember if I have the proper setup. Good catch.\n. Released with 2.1.1. Updated on Market too.\n. Do you have a stacktrace? Or could you install it from the Market and click 'Report' when it crashes?\n. Awesome thanks. I did get one crash report from a Nexus One on 2.3.4 as well which is odd because I tested on 1.1, 1.5, 1.6, 2.2, and 2.3.3 in the emulator.\n. The error seems to be this:\njava.lang.NoClassDefFoundError: com.jakewharton.nineoldandroids.sample.VPADemo$1\nat com.jakewharton.nineoldandroids.sample.VPADemo.onCreate(VPADemo.java:29)\nat android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1047)\nat android.app.ActivityThread.performLaunchActivity(ActivityThread.java:1623)\nat android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:1675)\nat android.app.ActivityThread.access$1500(ActivityThread.java:121)\nat android.app.ActivityThread$H.handleMessage(ActivityThread.java:943)\nat android.os.Handler.dispatchMessage(Handler.java:99)\nat android.os.Looper.loop(Looper.java:130)\nat android.app.ActivityThread.main(ActivityThread.java:3701)\nat java.lang.reflect.Method.invokeNative(Native Method)\nat java.lang.reflect.Method.invoke(Method.java:507)\nat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:866)\nat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:624)\nat dalvik.system.NativeStart.main(Native Method)\nVery odd behavior because the first anonymous inner-class would be the first click listener. I'm going to try to just rebuild the APK for the market as the sample runs fine when I compile it myself.\nForgot to mention that I see this too on a N1 @ 2.1 and a Galaxy Nexus @ 4.0.2\n. New version deployed. After you receive the update please comment and/or close the issue if it worked.\n. Works on all my stuff. Must have just been a bad build. Thanks for reporting.\n. Good catch. Rolled an implementation myself since I had time to kill on a plane ride. Didn't get a chance to test it, though, since apparently a recent update borked adb on my laptop.\nTake a look if you want. Otherwise I'll get to testing tonight to make sure it works.\n. Nope. Tested and released as v2.2.0. Thanks for the report! I would have never have found it myself haha\n. It should work find on 1.6 as long as you compile with 3.0+. I refrained from including custom attributes directly in the library since that would knock it from being a .jar to a library project.\n. Merged to dev.\n. Wicked! I'll have a look this evening.\n. Nice find. Merged to dev.\n. Merged to dev. Thanks!\n. This is a limitation of the platform, not the library. There is nothing you can do other than update the LayoutParams once the animation completes to get the functionality you desire.\n. Use the onAnimationEnd callback to adjust the button's location on the screen to physically be where the animation ends. This is a fundamental limitation of Android and not the library.\n. LayoutTransition is not supported since it requires deep integration with ViewGroup which we obviously cannot fake. This is mentioned on the website (though very briefly).\n. You can read (or set directly) new properties of views using the ViewHelper class. The sample includes demos for how to animate the other properties (like 'x').\n. The SuppressLint class is not available for compilation via Maven :(\n. This is finally available for use through Maven. I will try to add this weekend.\n. This is a fundamental limitation of the framework on pre-Honeycomb. The View class simply moves the area of the canvas on which controls draw during animations rather than moving where the view actually exists.\nIf you are moving a button with an animation and having it exist somewhere else for a long period of time (such that you can interact with it) you should be actually moving it to the destination location when the animation ends.\nIn any case, this is a platform restriction and there's nothing the library can do about it.\n. Fixed on dev. Thanks.\n. Correct. There is nothing I can do about this, however, as it's the only avenue for animation. I suggest you take approaches like ActionBarSherlock does and handle this case in the views you are animating using custom containers or simple extensions of widgets.\n. This is simply a fundamental limitation of animating touchable views on pre-Honeycomb. There is no workaround for the animation portion. I recommend that when your animation completes, you modify the LayoutParams of the view that you are animating to actually move it to its destination position.\n. You should use the animation listeners to actually move the view in your layout once animation completes. The fact that only the drawing position can move on pre-Honeycomb is a fundamental limitation of the platform rather than the library.\n. Dupe #31. Can't be fixed.\n. Maven doesn't copy jars to your project directory. It just adds the ones in ~/.m2/ to the classpath.\n. Yes. I will try to!\n. In normal property animation you would call things like view.setTranslationX(0) in your callback. Since those methods are obviously not available on all API levels there's a helper included with the library called ViewHelper. Since you are translating you should be able to call ViewHelper.setTranslationX(view, 0) in order to reset the position.\n. Nice catch. Thanks.\n. This can't be done. The fragment animations are done deep inside the fragment manager and cannot be controlled or changed.\n. Merged to dev.\n. NineOldAndroids is a jar. You should pull it from Maven central using Gradle's dependency management.\n. ``` groovy\ndependencies {\n  repositories {\n    mavenCentral()\n  }\ncompile 'com.nineoldandroids:library:2.4.0'\n}\n``\n. Using the compatibility transformations requires an animation be playing on the view which requires it to be visible. There's no way to work around this fact.\n. This is a limitation of the pre-3.0 View rendering system. There's no easy way to work around this, sorry. \n. The hard way would be a customViewGroupwhich intercepted touch events and remapped them to the object's new coordinate system based on the transformationMatrixthat was currently applied. You could even do this by dynamically replacing the content view of an activity (android.R.id.content`) dynamically without requiring the implementer to use this custom view group explicitly.\nI spent about a day exploring this way, way back in the early days of this library. It turned out to be far too much work without a lot of payoff so I chose to abandon it.\n. ViewHelper has methods for this!\n. Indeed it is. Good find. I'll try to get to this...\n. Dupe: https://github.com/JakeWharton/NineOldAndroids/pull/59\n. No new functionality will be added, sorry.\n. This is a problem with your build, proguard, or that library.\n. This is already on master\n. ",
    "fpillet": "I second this. I was looking into some issues and was trying to figure out why you were invalidating the parent every time a change is made. This doesn't make sense in many cases, and is a performance killer if the parent happens to cover the whole screen.\nI understand that this can be a hard issue as when rotations are involved, you'll need to compute a minimal invalidation rectangle using the 2d projection before and after -- the fact that Camera doesn't include utilities to do this doesn't make it easy\n. I second this. I was looking into some issues and was trying to figure out why you were invalidating the parent every time a change is made. This doesn't make sense in many cases, and is a performance killer if the parent happens to cover the whole screen.\nI understand that this can be a hard issue as when rotations are involved, you'll need to compute a minimal invalidation rectangle using the 2d projection before and after -- the fact that Camera doesn't include utilities to do this doesn't make it easy\n. ",
    "dcaunt": "No rush Jake, was just playing with the demos :)\n. No rush Jake, was just playing with the demos :)\n. ",
    "stepango": "Install from market and two reports sended.\n. Install from market and two reports sended.\n. ",
    "BeowulfBjornson": "It seems to be working. But only now I remembered what was the reason I should've waited a little bit more before updating my tablet for ICS :)\nBut if you wish, I can do a backup and install HC again and try it.\n. It seems to be working. But only now I remembered what was the reason I should've waited a little bit more before updating my tablet for ICS :)\nBut if you wish, I can do a backup and install HC again and try it.\n. ",
    "biodreamer": "if your require the code to compile on 3.0+ you should state so in your requirements. Preferably with instructions on how to make it work when targeting API is set to < 11. there can be reasons to keep old maintenance code below API 11 to avoid refactoring the JNI layer of said software. due to new memory handling.\n. if your require the code to compile on 3.0+ you should state so in your requirements. Preferably with instructions on how to make it work when targeting API is set to < 11. there can be reasons to keep old maintenance code below API 11 to avoid refactoring the JNI layer of said software. due to new memory handling.\n. ",
    "Amokrane": "Ok, thanks!\n. Ok, thanks!\n. ",
    "jameswald": "I was having the same problem so I'm going to do what you suggest.  Thanks Jake!\n. I was having the same problem so I'm going to do what you suggest.  Thanks Jake!\n. ",
    "Macarse": "@dzbanek: Check the AnimatorProxy class.\nTo modify those values you should do something like:\nAnimatorProxy.wrap(mView).setScaleY(1);\n. @dzbanek: Check the AnimatorProxy class.\nTo modify those values you should do something like:\nAnimatorProxy.wrap(mView).setScaleY(1);\n. ",
    "raghuc": "How about @TargetApi(11)?  I think that'd be technically more accurate than @SuppressLint too.\n. How about @TargetApi(11)?  I think that'd be technically more accurate than @SuppressLint too.\n. ",
    "chrisjenx": "Haha ok, I have pushed to my fork some lint fixes, if it helps but you'll\nprobably see them all anyway.\nOn 21 November 2012 23:19, Jake Wharton notifications@github.com wrote:\n\nThis is finally available for use through Maven. I will try to add this\nweekend.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/JakeWharton/NineOldAndroids/issues/25#issuecomment-10618271.\n. Haha ok, I have pushed to my fork some lint fixes, if it helps but you'll\nprobably see them all anyway.\n\nOn 21 November 2012 23:19, Jake Wharton notifications@github.com wrote:\n\nThis is finally available for use through Maven. I will try to add this\nweekend.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/JakeWharton/NineOldAndroids/issues/25#issuecomment-10618271.\n. \n",
    "SimonVT": "You're only animating where the view is drawn. When the animation is done you have to move the view to the new position.\n. You need to ask this question on e.g. stackoverflow. This is not a support forum.\n. Use the separate library. The one bundled in ABS is not a complete implementation (it's just the parts that's relevant to ABS), and there's no guarantee that it even works as you'd expect.\n. View#animate is a framework method, you have to use ViewPropertyAnimator#animate(View).\n. You're only animating where the view is drawn. When the animation is done you have to move the view to the new position.\n. You need to ask this question on e.g. stackoverflow. This is not a support forum.\n. Use the separate library. The one bundled in ABS is not a complete implementation (it's just the parts that's relevant to ABS), and there's no guarantee that it even works as you'd expect.\n. View#animate is a framework method, you have to use ViewPropertyAnimator#animate(View).\n. ",
    "manjunathab": "i need to have continues animation. (INFINITE animation) in that case how i can implement the things\n. i didn't got answer there ... thats y i asked here...\nthanks for yr valuable suggestion\n. i need to have continues animation. (INFINITE animation) in that case how i can implement the things\n. i didn't got answer there ... thats y i asked here...\nthanks for yr valuable suggestion\n. ",
    "wais2010": "You have to clear the view animation then you can setVisibility\nanimation.setAnimationListener(new Animation.AnimationListener() {\n@Override\npublic void onAnimationStart(Animation animation) {}\n@Override\npublic void onAnimationEnd(Animation animation) {\nview.clearAnimation();\nview.setVisibility(View.GONE);\n}\n@Override\npublic void onAnimationRepeat(Animation animation) {}\n            });\n. You have to clear the view animation then you can setVisibility\nanimation.setAnimationListener(new Animation.AnimationListener() {\n@Override\npublic void onAnimationStart(Animation animation) {}\n@Override\npublic void onAnimationEnd(Animation animation) {\nview.clearAnimation();\nview.setVisibility(View.GONE);\n}\n@Override\npublic void onAnimationRepeat(Animation animation) {}\n            });\n. ",
    "LukasPaczos": "@wais2010 This solved my struggle. Thanks.. @wais2010 This solved my struggle. Thanks.. ",
    "nobre84": "This is very unfortunate! What is sad is that its not mentioned on the project home page - at least I didn't find it. Even being aware of the limitations of Animations pre-honeycomb, it seemed these limitations were handled and abstracted away by the library! Unfortunately I'll still need to do conditional code to update view positions\nThe library is great, a life saver! But this one really hurt :(\n. This is very unfortunate! What is sad is that its not mentioned on the project home page - at least I didn't find it. Even being aware of the limitations of Animations pre-honeycomb, it seemed these limitations were handled and abstracted away by the library! Unfortunately I'll still need to do conditional code to update view positions\nThe library is great, a life saver! But this one really hurt :(\n. ",
    "shredmaster": "thank you for your prompt response. I am new to android development, can you show me how to move the contentview to actual position after slide out? much appreciated!!\n. in case anyone might run into same issue. For pre honeycomb, I use v.layout method to slide the content view. Thanks\npublic void move(View v, int inSlideAmount) {\n```\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n            if (menuOut) {\n                inSlideAmount = 0;\n            }\n            ObjectAnimator.ofFloat(itsListView, \"translationX\", inSlideAmount).start();\n        } else {\n        if (menuOut) {\n            inSlideAmount = 0 - inSlideAmount;\n        }\n        v.layout(v.getLeft() + inSlideAmount, 0, v.getLeft() + inSlideAmount + v.getWidth(), v.getHeight());\n    }\n}\n\n```\n. for below honeycomb, I came up with better solution by updating layout param in the onAnimationEnd listener. This way, the view still get the animation effect. \nbut there is one weird issue. Jake, if you have the chance, would be please take a look. Thanks for a million.\nhttp://stackoverflow.com/questions/14541265/changecursor-cause-layout-container-of-the-listview-to-reposition\n. thank you for your prompt response. I am new to android development, can you show me how to move the contentview to actual position after slide out? much appreciated!!\n. in case anyone might run into same issue. For pre honeycomb, I use v.layout method to slide the content view. Thanks\npublic void move(View v, int inSlideAmount) {\n```\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n            if (menuOut) {\n                inSlideAmount = 0;\n            }\n            ObjectAnimator.ofFloat(itsListView, \"translationX\", inSlideAmount).start();\n        } else {\n        if (menuOut) {\n            inSlideAmount = 0 - inSlideAmount;\n        }\n        v.layout(v.getLeft() + inSlideAmount, 0, v.getLeft() + inSlideAmount + v.getWidth(), v.getHeight());\n    }\n}\n\n```\n. for below honeycomb, I came up with better solution by updating layout param in the onAnimationEnd listener. This way, the view still get the animation effect. \nbut there is one weird issue. Jake, if you have the chance, would be please take a look. Thanks for a million.\nhttp://stackoverflow.com/questions/14541265/changecursor-cause-layout-container-of-the-listview-to-reposition\n. ",
    "Drenet": "Beautiful - that works perfectly! Thank you very much for the quick response to set me straight, not to mention the library itself :). \n. Beautiful - that works perfectly! Thank you very much for the quick response to set me straight, not to mention the library itself :). \n. ",
    "FredJul": "After some investigations, it seems that the culprit is the ObjectAnimator with setRepeatCount(ValueAnimator.INFINITE);\nWithout this line I have no memory leak.\n. After some investigations, it seems that the culprit is the ObjectAnimator with setRepeatCount(ValueAnimator.INFINITE);\nWithout this line I have no memory leak.\n. ",
    "bishopmatthew": "Thanks for the writeup, I ran into the same issue.\n. Thanks for the writeup, I ran into the same issue.\n. ",
    "yuanjunli": "how to fix it.i have the same problem.and it is no used to set cancel and removeListener\n. as FRED Jul said.i try to setRepeatCount(1) when the activity destroy and it make sense.\n. how to fix it.i have the same problem.and it is no used to set cancel and removeListener\n. as FRED Jul said.i try to setRepeatCount(1) when the activity destroy and it make sense.\n. ",
    "qhm123": "me too\n. me too\n. ",
    "DSteve595": "This feature would be perfect.\nIt's described here: http://developer.android.com/reference/android/view/ViewPropertyAnimator.html#withEndAction(java.lang.Runnable)\nMy current workaround is to add an AnimationListener, which wastes tons of lines of code for one simple thing.\n. This feature would be perfect.\nIt's described here: http://developer.android.com/reference/android/view/ViewPropertyAnimator.html#withEndAction(java.lang.Runnable)\nMy current workaround is to add an AnimationListener, which wastes tons of lines of code for one simple thing.\n. ",
    "cypressious": "There is AnimatorListenerAdapter which you can create an anonymous subclass of. You only need to override onAnimationEnd().\n. There is AnimatorListenerAdapter which you can create an anonymous subclass of. You only need to override onAnimationEnd().\n. ",
    "felipecsl": "+1 for withEndAction\n. +1 for withEndAction\n. ",
    "orip": "Subclassing Animator.AnimatorListener isn't too verbose, but you can always create a helper to simulate withEndAction.\n. Subclassing Animator.AnimatorListener isn't too verbose, but you can always create a helper to simulate withEndAction.\n. ",
    "DE5": "Nice\n. Nice\n. ",
    "andacaydin": "Ok after some research, it seems to be similar to  https://github.com/JakeWharton/ActionBarSherlock/issues/317\nin this case it's also the string \"@16973911\" which is causing the NumberFormatException unable to get parsed.\nWorkaround can be found in my fork.\n. Ok after some research, it seems to be similar to  https://github.com/JakeWharton/ActionBarSherlock/issues/317\nin this case it's also the string \"@16973911\" which is causing the NumberFormatException unable to get parsed.\nWorkaround can be found in my fork.\n. ",
    "kulik": "Please tell me how i should add maven dependency in build.gradle? \n buildscript {\n    repositories {\n        maven { url 'http://repo1.maven.org/maven2' }\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:0.4'\n    }\n}\napply plugin: 'android'\ndependencies {\n    compile 'com.nineoldandroids:library:2.4.0'\n}\n...\nnow this is my build script. I am not familiar with gradle, could you help me, how i can add your project in gradle dependency\n. Thank you, I have already resolve my problem. It was not right place for repository. Any way thank you for quick answer.\n. Please tell me how i should add maven dependency in build.gradle? \n buildscript {\n    repositories {\n        maven { url 'http://repo1.maven.org/maven2' }\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:0.4'\n    }\n}\napply plugin: 'android'\ndependencies {\n    compile 'com.nineoldandroids:library:2.4.0'\n}\n...\nnow this is my build script. I am not familiar with gradle, could you help me, how i can add your project in gradle dependency\n. Thank you, I have already resolve my problem. It was not right place for repository. Any way thank you for quick answer.\n. ",
    "scottdweber": "It seems like this ought to be built into the library, but there is a workaround:\nPropertyValuesHolder pvh = PropertyValuesHolder.ofFloat(\"alpha\", 0f, 1f);\nObjectAnimator.ofPropertyValuesHolder(AnimatorProxy.NEEDS_PROXY ?\n        AnimatorProxy.wrap(myView) : myView, pvh).start();\n. It seems like this ought to be built into the library, but there is a workaround:\nPropertyValuesHolder pvh = PropertyValuesHolder.ofFloat(\"alpha\", 0f, 1f);\nObjectAnimator.ofPropertyValuesHolder(AnimatorProxy.NEEDS_PROXY ?\n        AnimatorProxy.wrap(myView) : myView, pvh).start();\n. ",
    "marshallino16": "Yeah, I figured it out few minutes ago.... dummy. \nThank you\n. Yeah, I figured it out few minutes ago.... dummy. \nThank you\n. ",
    "Quamber": "Also that i am not starting a single animation sometimes i am starting even two animations\n. Also that i am not starting a single animation sometimes i am starting even two animations\n. ",
    "gaurav17281": "You need to set the listener before the animation. The problem here is the animation has already started before the listener is added, whereas listener is already present when the animation ends.\n. You need to set the listener before the animation. The problem here is the animation has already started before the listener is added, whereas listener is already present when the animation ends.\n. ",
    "wliuxingxiangyu": "set the listener before the animation.\n. set the listener before the animation.\n. ",
    "lengthy": "\\\n. \\\n. ",
    "renfu8888": "thanks a lot  appreciate your effort .\nAt 2013-09-05 02:50:37,\"Bill Dawson\" notifications@github.com wrote:\nA simple alpha animation ....\nViewPropertyAnimator.animate(view).alpha(0.0f); // does nothing pre-HC if view has background\n... appears to do nothing on pre-HC (Gingerbread, specifically) if the view has a background. Specifically, a color background (ColorDrawable) -- I haven't tested other background drawables.\nIf I add a transformation such as a rotation ...\nViewPropertyAnimator.animate(view).alpha(0.0f).rotationBy(45f); // works fine\n... then it all works fine. Also, if I remove the background from the view, it works fine even when only the alpha property is changed.\nI've studied the code a bit, and it pretty much seems like the alpha animation is being done in the same way as the built-in, old-style AlphaAnimation.\n\u00a1\u00aa\nReply to this email directly or view it on GitHub.\n. thanks a lot  appreciate your effort .\nAt 2013-09-05 02:50:37,\"Bill Dawson\" notifications@github.com wrote:\nA simple alpha animation ....\nViewPropertyAnimator.animate(view).alpha(0.0f); // does nothing pre-HC if view has background\n... appears to do nothing on pre-HC (Gingerbread, specifically) if the view has a background. Specifically, a color background (ColorDrawable) -- I haven't tested other background drawables.\nIf I add a transformation such as a rotation ...\nViewPropertyAnimator.animate(view).alpha(0.0f).rotationBy(45f); // works fine\n... then it all works fine. Also, if I remove the background from the view, it works fine even when only the alpha property is changed.\nI've studied the code a bit, and it pretty much seems like the alpha animation is being done in the same way as the built-in, old-style AlphaAnimation.\n\u00a1\u00aa\nReply to this email directly or view it on GitHub.\n. ",
    "kapuia": "Thanks for the fast response!\nIf we consider the hard way, could this be solved in a general way?\nWhat is your opinion?\n. Thanks for the fast response!\nIf we consider the hard way, could this be solved in a general way?\nWhat is your opinion?\n. ",
    "jskierbi": "Bump :)\nI've also run into this issue, only 3.x reporting crashes.\n. Bump :)\nI've also run into this issue, only 3.x reporting crashes.\n. ",
    "yoheimuta": "Why this patch is not merged w/ master ?\nTravis CI notified failed, but the reason why build failed is Could not find .travis.yml, using standard configuration., not logic failures.\nThis problem is still issued duplicately again and again. \n. Why this patch is not merged w/ master ?\nTravis CI notified failed, but the reason why build failed is Could not find .travis.yml, using standard configuration., not logic failures.\nThis problem is still issued duplicately again and again. \n. ",
    "snard6": "It will have similar difficulties.  I attempted to port the transition package.  I had some success, but ran into a couple of issues due to two missing features:  1) ViewGroup.suppressLayout and 2) View.setTransitionAlpha.\nSee the repo here:\nhttps://github.com/snard6/Android-Scene-Transition\n. I attempted to port the transition package.  I had some success, but ran into a couple of issues due to two missing features:  1) ViewGroup.suppressLayout and 2) View.setTransitionAlpha.  It doesn't use nine-old-androids, but could probably be modified fairly easily to use it for the animations instead.\nSee the repo here:\nhttps://github.com/snard6/Android-Scene-Transition\n. It will have similar difficulties.  I attempted to port the transition package.  I had some success, but ran into a couple of issues due to two missing features:  1) ViewGroup.suppressLayout and 2) View.setTransitionAlpha.\nSee the repo here:\nhttps://github.com/snard6/Android-Scene-Transition\n. I attempted to port the transition package.  I had some success, but ran into a couple of issues due to two missing features:  1) ViewGroup.suppressLayout and 2) View.setTransitionAlpha.  It doesn't use nine-old-androids, but could probably be modified fairly easily to use it for the animations instead.\nSee the repo here:\nhttps://github.com/snard6/Android-Scene-Transition\n. ",
    "BenjaminRuehl": "In the meantime any successes?\n. In the meantime any successes?\n. ",
    "arichiardi": "A question, I tried to load something like:\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:shareInterpolator=\"false\" >\n    <translate\n        android:duration=\"@android:integer/config_mediumAnimTime\"\n        android:fromXDelta=\"50%p\"\n        android:toXDelta=\"0\" />\n    <alpha\n        android:duration=\"@android:integer/config_mediumAnimTime\"\n        android:fromAlpha=\"0.0\"\n        android:toAlpha=\"1.0\" />\n</set>\nBut I saw that the code launches a RuntimeException on the translate element. The case is not handled by AnimatorInflator. Would your port solve it? I am definitely interested in it and I will be able to contribute.\nThanks!\n. A question, I tried to load something like:\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:shareInterpolator=\"false\" >\n    <translate\n        android:duration=\"@android:integer/config_mediumAnimTime\"\n        android:fromXDelta=\"50%p\"\n        android:toXDelta=\"0\" />\n    <alpha\n        android:duration=\"@android:integer/config_mediumAnimTime\"\n        android:fromAlpha=\"0.0\"\n        android:toAlpha=\"1.0\" />\n</set>\nBut I saw that the code launches a RuntimeException on the translate element. The case is not handled by AnimatorInflator. Would your port solve it? I am definitely interested in it and I will be able to contribute.\nThanks!\n. ",
    "benjaminVadon": "Thanks for reply, and I will do it another way using your lib because, for your information, your lib is better than official Animation for atleast one (important) point : you don't leak activity (for more read  https://code.google.com/p/android/issues/detail?id=78263)\n. Thanks for reply, and I will do it another way using your lib because, for your information, your lib is better than official Animation for atleast one (important) point : you don't leak activity (for more read  https://code.google.com/p/android/issues/detail?id=78263)\n. ",
    "ashakirov": "I fixed this problem via setting pivot points throught XML.\nandroid:transformPivotX=\"0dp\"\nandroid:transformPivotY=\"0dp\"\nI dont know why but setting same points programmatically via setPivotX, setPivotY methods doesn't work on my 4.1.1 and 4.2 devices.\n. I fixed this problem via setting pivot points throught XML.\nandroid:transformPivotX=\"0dp\"\nandroid:transformPivotY=\"0dp\"\nI dont know why but setting same points programmatically via setPivotX, setPivotY methods doesn't work on my 4.1.1 and 4.2 devices.\n. ",
    "Richard-Cao": "you can try this:\nfinal AnimatorSet mSetAnim = new AnimatorSet();\nfinal Animator topAnim = ObjectAnimator.ofFloat(topImage, \"translationY\", (bmp.getHeight() / 2) * -1).setDuration(duration);\nfinal Animator bottomAnim = ObjectAnimator.ofFloat(bottomImage, \"translationY\", bmp.getHeight() / 2).setDuration(duration);\nmSetAnim.playTogether(topAnim, bottomAnim);\nmSetAnim.start();\n. you can try this:\nfinal AnimatorSet mSetAnim = new AnimatorSet();\nfinal Animator topAnim = ObjectAnimator.ofFloat(topImage, \"translationY\", (bmp.getHeight() / 2) * -1).setDuration(duration);\nfinal Animator bottomAnim = ObjectAnimator.ofFloat(bottomImage, \"translationY\", bmp.getHeight() / 2).setDuration(duration);\nmSetAnim.playTogether(topAnim, bottomAnim);\nmSetAnim.start();\n. ",
    "pighead4u": "in my phone, it doesn't work\n. in my phone, it doesn't work\n. ",
    "serso": "Possible workarounds:\n1. Use Build Tools v. 21\n2. Create animators in the code instead of inflating them from xml files\n. Possible workarounds:\n1. Use Build Tools v. 21\n2. Create animators in the code instead of inflating them from xml files\n. ",
    "rahulwadhai": "but tokudu told me its problem in NineOldAndroids\n library\n. but its work good in android 4.4\n. it is problem created in target 10\n. but tokudu told me its problem in NineOldAndroids\n library\n. but its work good in android 4.4\n. it is problem created in target 10\n. ",
    "mvysny": "Hmm, apparently this bug is present on the SDK's version of the Animator, so it's not a bug, it's a feature. Sigh.\n. Hmm, apparently this bug is present on the SDK's version of the Animator, so it's not a bug, it's a feature. Sigh.\n. ",
    "andy199609": "I have this problem too. How to solve this problem?\n. I have this problem too. How to solve this problem?\n. ",
    "jordond": "Encountering the same problem.  Found a fix courtesy of this.\nChanging \ncompile 'com.nineoldandroids:library:2.4.+' \nto \ncompile 'com.nineoldandroids:library:2.4.0' \nworked for me.\n. Encountering the same problem.  Found a fix courtesy of this.\nChanging \ncompile 'com.nineoldandroids:library:2.4.+' \nto \ncompile 'com.nineoldandroids:library:2.4.0' \nworked for me.\n. ",
    "rsv355": "Worked for me thanks to @iballan \ncompile 'com.nineoldandroids:library:2.4.0'\ncompile ('konifar:fab-transformation:1.0.0') {\n        exclude group: 'com.nineoldandroids', module: 'library'\n}\n. Worked for me thanks to @iballan \ncompile 'com.nineoldandroids:library:2.4.0'\ncompile ('konifar:fab-transformation:1.0.0') {\n        exclude group: 'com.nineoldandroids', module: 'library'\n}\n. ",
    "18316583895": "\u82f1\u8bed\u5dee\uff1f. \u82f1\u8bed\u5dee\uff1f. "
}