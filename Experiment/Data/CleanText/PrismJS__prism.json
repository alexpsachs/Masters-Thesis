{
    "LeaVerou": "Accepted, will be done as a plugin. Should be fairly easy to do. :)\n. Good idea.\n. Done. :) Check this commit: https://github.com/LeaVerou/prism/commit/483831ee6d5b1ef99e2b4030f0c6c45a710d7d92\n. I removed the bold highlighting, so marking this as fixed.\n. The problem with this is that it breaks copying the code. I really don\u2019t want to have to add a separate view mode for copying code, like some other highlighters. :(\n. Oh, that\u2019s what you were thinking. I was thinking of using unicode characters to show it. \nUsing images would mean I\u2019d have to distribute images together with Prism, which makes it harder to use it and increases the size of the file.\nPerhaps a solution would be to use pseudoelements somehow, since they're not selectable.\n. The problem with gradients is that they don't inherit the text-shadow and they look aliased.\n. Btw, not sure if you noticed (or if I wrote it elsewhere), but I've coded a first version of this plugin: http://leaverou.github.com/prism/plugins/show-invisibles/\n. The good thing with that approach is that it's easier to implement. The drawback is that it needs updating every time the code is changed.\n. This has been now added, through a plugin. Very rough around the edges, I coded it in its entirety (with the docs) on a plane ride from Denver to San Jose :P.\nhttp://leaverou.github.com/prism/plugins/line-highlight/\n. Oh right, z-index:-1 should do that trick. Pointer-events too. Thanks!\n. z-index was a stupid idea, but I fixed the bug. :)\n. and I also added linking: http://leaverou.github.com/prism/plugins/line-highlight/#play.50-55,60\nCool, huh?\n. Absolutely not. I\u2019m very firm on this one. I\u2019m fed up seeing scripts with awful prefixed class names, making everything uglier just for the off chance there might be a collision. \nWhat we could do, is add .token before each class selector, since every token also has this class as well. So .number would become .token.number.\n. First complaint I get about a real collision, on a real website, I\u2019m changing the selectors. I don't want to change them for a theoretical fear of a potential collision that might never happen.\n. Btw, I've added .token in front of the selectors a while ago so closing this.\n. Hi @jonmilner,\nWhen I said \"first complaint I get, I change the selectors\", it was 2012 and Prism had just been released. Now it's way too late, as it would break tons of sites, plugins, themes etc.\nHaving human readable names was a design decision that I made pretty early on in this project. I knew there was a chance of collision, but the advantages outweighed the disadvantages and there are plenty of workarounds for collisions.\nThat said, perhaps this can be solved by just prefixing all Prism selectors with \"code \" so they don't apply to any random area in the page. Can anyone think of any drawbacks to this?\n. Yeah, I ran out of colors :P\n. Done, a while ago. Closing issue.\n. Nice!\nI\u2019ll try to add sufficient hooks to do this as a plugin.\n. Not sure if you've noticed, but I've included this in the Markup language definition a while ago: https://github.com/LeaVerou/prism/blob/gh-pages/components/prism-markup.js#L35\n. Prism itself shouldn't throw any errors on IE6. It's the page that does.\n. Oh good point. I also want to look into the possibility of writing a plugin that adds IE8 support. If that's possible, it would be perfect.\n. Notice that I said IE8 support. Who bothers with IE6-7 anymore?\n. Oh, that's a good idea. Will look into it.\n. Hi Mathias,\nI started work on this, here: http://prismjs.com/plugins/ie8/\nI'm not sure how to solve the line break bug. It's not as simple as I thought. Apparently, it's not just that innerHTML discards line breaks, it's also that innerText silently discards a few (seemingly at random) when getting. Same with innerHTML. It seems there's no way to read those line breaks in the first place!\nI guess I'll need to have a look tomorrow at how other highlighters solved this.\n. Hi Steven,\nI'm aware of the outerHTML workaround, I had used it too back in the day. However, here it seems that the problem is getting the line breaks. \nHmmm.\nUnless outerHTML could help with that too. Will try this tomorrow!\n. Thank you @ccampbell! I quite like Rainbow too, kudos! Thanks a lot for the discussion, that will help very much!\nHowever, I'm a bit too busy with my new job right now, so anything Prism-related will have to wait a bit.\n. The reason the plugin is not listed anywhere in the website is that it\u2019s not finished. It solves some issues with IE8 but not all, so I just gave up at some point as it wasn't worth that much effort for a dying browser.\nRegarding your bug @lukaszlenart, the new issue is because the pile of shit called IE8 doesn\u2019t even support addEventListener, but needs attachEvent instead. Also, it looks like this is code from a plugin you\u2019re using, not Prism itself, which is what the IE8 plugin would target anyway, even if it was working.\nFurthermore, I\u2019d find it very strange if WorkerGlobalScope caused an issue in IE8, as that branch shouldn\u2019t even be evaluated, since window Is defined there. \n. That would just prevent the error, but it would also remove the functionality of changing the hash to highlight certain lines (which you may not want anyway) in IE8. I\u2019d hardly call it a \u201csolution\u201d, more like sweeping under the rug.\n. Prism is not supposed to work in IE8. That would require too much code for an edge case. That was the whole point of developing a plugin for it.\nHowever, IE8 support is definitely not a priority. \n. Oh, that\u2019s a different issue. Yes, nothing should break. If it does, we should fix it.\n. Thanks, that's great!\nAlthough they shouldn't have implemented it without a prefix, but in this case it's convenient.\n. They are, in the CSS. They are used with .token, like .token.comment. I find it highly unlikely that .token.whatever will clash with author styles.\n. can't they get around that by tag qualifying the other code? Prism\u2019s .comments are spans, I doubt WP .comments are.\nI really like the sensible class names it currently has (they're one of the 6 advantages listed in the header), so I'm very reluctant to throw this away for the possibility of a collision. After all, if an author wants to customize the token names, it's trivial. \n. No, as I have no idea how to do that :P\nBut if you want to help, that would be welcome :)\n. @mathiasbynens The heart of Prism is Prism.highlight(), Prism.tokenize() and Prism.Token.stringify(). Neither of those use DOM methods.\n. I think so :)\n. Oh that's trivial to fix. Will do later today.\n. Hi there,\nYou've already discovered how this can be solved, by adding an extra script. I'd prefer to keep Prism\u2019s core pure, but it would be great if you blogged about your workaround, to help others. :)\nLanguage guessing is something I have in mind, if I find a compact and extensible way to do it.\nCheers,\nLea\n. Hi,\nOops, thanks for spotting that! \nHowever, you fixed it in the generated prism.js, not in prism-core.js, which is the source file.\nIf you don't want to bother, I can fix it myself. Thanks again!\n. Hi there,\nThank you so much for your effort and contribution!\nHowever, it seems your editor changed the indentation of several files. Not only this breaks the code conventions of the project (tabs for indentation, spaces for alignment), but it also makes it incredibly hard to review the actual, \"real\" changes.\nWould you be kind enough to fix this and submit a new pull request? :)\nThanks!!\n. @mrbrdo: I\u2019m sorry, but these are the conventions of the project. I have my reasons for using them but this is not the place for that debate. Also, if you\u2019re disappointed in a project because of the indentation style and the lack of newlines at the end of files, I\u2019ll happily live without your contributions. :)\nI don\u2019t get how you expect for a PR that changes the project\u2019s conventions to be accepted. It\u2019s pretty common knowledge in open source that project conventions are to be respected and followed. It\u2019s also common knowledge in programming that good coders don\u2019t throw temper tantrums over disagreement with said conventions. That\u2019s why most editors have file-level settings.\nThat said, I could have reviewed this by adding ?w=1 to the URL, which I didn\u2019t know a year ago. However, it has a couple other issues as well, which I explained in #18.\n@samflores I\u2019m sorry about that. I really want Ruby in Prism, so if I had the time to fix it myself, I would. :/ If you ever decide to work on it again, let me know if you need any help.\n. @mrbrdo The reason I used to reject PRs because of whitespace changes is that without w=1, it was impossible to properly review the diff. Although, intentionally contributing to a project with your own preferences instead of following the code style of the project doesn\u2019t exactly show good team spirit (in most cases it\u2019s not intentional though). \nAlso, removing trailing whitespace is good, I never rejected anything because of that! It\u2019s just that my editor doesn\u2019t do it, so there\u2019s always some left in there. \n. Hi there,\nI was about to merge this right now (better late than never...) but I noticed a few things:\n- Language definitions are defined as plugins. This is not correct. They should be in the components folder, with names like prism-xxx.js and listed in code.js to be included in the custom builder.\n- It looks like some of these definitions could benefit from inheriting from the clike language. Understandably, language inheritance was not added to Prism yet when you submitted this PR. If you still want to work on this, you could look into how JavaScript, PHP and other C-style languages are doing it.\n- You have modified the prism-dark.css file, but not the other themes, which could be confusing for someone using these languages, in case they're not using that theme.\nI'm really sorry it took me so long to review this. If you don't want to work on it any more, I understand. I hope it doesn't put you off future contributions. Thank you for your efforts!\nI'm closing this PR to keep things tidy, but feel free to reopen if you want to work on the issues above.\n. Yay!!\nI\u2019d prefer one PR per language. In general, the smaller PRs, the better.\n. Hi there,\nThanks for the great theme! Did you add it to the theme switcher? Just needs a line in the components object here: https://github.com/LeaVerou/prism/blob/gh-pages/code.js\n. Huh, no idea why this wasn't merged. Merging now. Thank you!!\n. Hi there,\nI might not have merged this pull request, but I recently merged one about PHP which was based off of yours (with credit) so thank you for your efforts on this! I'm closing this pull request now, but I'd love it if you wanted to take a look on the merged PHP definition and send any feedback or improvements to either me or its author.\nThanks again for starting this!\nCheers,\nLea\n. I think what you are really trying to do here is to highlight C-style languages, even when the exact language is unknown. \nSince we now have JS and Java, and soon PHP, which are all C-like, perhaps it would be wise to include some kind of inheritance, so people could define languages as inheriting of others, and only declare the differences. That would make new language definitions easier. I'll need to look more into the idea.\n. Not possible at the moment.\nCould you explain why do you think it\u2019s needed? What does it help for? I didn't include such functionality, because I think it's one of those things that add visual noise, without actually being useful most of the time (there is the line highlight plugin for when some line numbers are actually needed) and we're just used to them.\nI am considering to add the functionality of seeing the line number on hover though, in the line highlight plugin.\n. Hi,\n- The first use case will be solved by what I mentioned above.\n- The second one could easily be solved with dynamically highlighting lines by linking to them, like http://prismjs.com/plugins/line-highlight/#play.50-55,60\n. Closing, see #425\n. Thank you! Great fixes!\n. Hi there,\nThanks for your efforts and support of Prism!\nIs the only difference from the JS one the keywords?\n. I think it is, and I (or someone) should do it for JS as well (for 0x).\nBtw, you don't need to edit prism.js or prism-java.min.js, they are automatically generated by CodeKit.\n. Cool! I would also be nice if you could use lookbehind on operators to avoid things like java.util.* being highlighted. JS doesn't have this issue.\n. That's fine, how common can that be? I don't remember ever using that form while writing Java.\nDid you add the language to the components object in code.js?\n. Cool, merged! You can see it listed here now: http://prismjs.com/download.html\nThanks!!\n. Hi there,\nHave you read the documentation? http://prismjs.com/extending.html#language-definitions\nIt could be more complete, but it should still help.\nAlso, keep an eye for my comments on these pull requests:\nhttps://github.com/LeaVerou/prism/pull/18\nhttps://github.com/LeaVerou/prism/pull/20\nI'm planning to reply next week with some comments about best practices when coding new language definitions.\n. Yes, you can optionally define tokens as permitted inside other tokens only. Here's the documentation, I think it explains it quite extensively: http://prismjs.com/extending.html#language-definitions \nLet me know if you have questions.\n. Hey, are you trying to make a Markdown language definition? :)\n. Looking forward to your pull requests!\n. Merged, thanks!\nAlthough I prefer white over #fff, but whatevs. :)\n. Both are done, so closing. Thanks!\n. Merged, thanks!\nRe: license, it's MIT license like almost all my stuff.\n. Hi there,\nThanks for the awesome effort you put into porting this to Node! \nHowever, the changes seem a bit too invasive, i.e. a big part of the code is changed just for Node. Perhaps we could keep it in a fork? Alternatively, it would be nice to explore ways to make it need fewer changes. For example, instead of replacing self everywhere, we could have one check at the top which assigns the global object to self, if self is not defined. i.e. something like:\nif (typeof self === 'undefined') {\n   var self = global;\n}\nWhat do you think?\nI'd also be very open to the idea of keeping the Node changes in a plugin, even if it means we should add more hooks and make a few changes to the code.\n. Oh wow, no idea how I missed this. Thank you!\n. Hi there,\nIt looks like currently there is a Python language definition on the Prism website, I don't remember by who (these should have authors listed at some point) or when it was added. So I'm closing this pull request. It would be great if you could take a look at it and improve it, so that we get the best of both worlds. :)\nThanks for your efforts on contributing to Prism, very appreciated!\nCheers,\nLea\n. I think that instead of trying to keep the language definitions for all C-style languages in sync, there should be an inheritance mechanism. Perhaps a base language \"cstyle\" which child languages would clone and override tokens as necessary. What do you think?\n. Oh, I see. That doesn't need a pull request, it just needs me to pull, use CodeKit and then push.\nI wish there was some config file that codekit could use, so that everyone that has cloned this repo could also have the same setup :(  / CC @bdkjones\n. Is that an issue in the prism.js that exists in the site or in the generated one through the download page?\nThe former sounds like a CodeKit bug, the latter a bug I could fix in my download script.\n. Hi there,\nLooks like this has gotten out of date, and these issues have been fixed by other code changes, so I'm closing this.\nSorry I couldn't review it on time :( \nThank you very much for contributing to Prism, and I hope this does not put you off future contributions.\n. Wow, nice to know. Does it mess up if you use UglifyJS manually to minify it? AFAIK that's what CodeKit uses to minify them.\n. Sorry about that. I'll have to do that very soon.\n. It has been fixed a while ago I think. Could you please verify?\n. I\u2019m afraid the benefit of people being able to include Prism and have it \"just work\" far outweighs this edge case. You could always use a fork ;)\n. Hey, sorry for the huge delay. I really need to get my act together. :(\nHow is this better than maintaining a separate fork that's linked from the main site? \n. I think I will hold off reviewing & merging the node commits until:\na) I find a contributor that knows Node and wants to help with the project OR\nb) I start using Node myself\nAt this point, I'm afraid I lack the knowledge to review these properly.\n. I just merged #179 for Node.js, should I close this?\n. Closing. We can always reopen in the future, if needed.\n. For the one used in the Prism website, it\u2019s done through CodeKit. For the download, it's built through JS on the fly, based on your options. :)\nAt some point I should use a public config file for CodeKit so that other people could use the same configuration in their local Prism clone...\n. Hey, thanks for looking into this!\nHowever, I'm afraid we have different views on the topic. Unless something is objectively slow, I favor syntactical elegance over performance. So, I'm afraid I'm gonna reject this. :(\nAny chance you'll publish the benchmark you ran? I'd love to see the results!\n. You need to properly encode at least the < entity (as &lt;), there is no way around this. Any client-side syntax highlighter has this issue. Some solve it by using CDATA tags like <script>, but I preferred to keep it semantic.\n. You can use insertBefore for that, look here for an example: http://prismjs.com/components/prism-javascript.js\nRegarding not including too many tokens for CSS, that was a conscious choice, since most use cases don't need that kind of granularity.\n. Gah, the pull request cannot be merged. Could you please submit a new one? Sorry I took so long, it's my fault :(\n. Hi there,\n@MoOx Of course I want additional themes, extensibility is something Prism takes very seriously :)\n@remybach Sorry for the delay and thank you for contributing this! Can I see a demo of it somewhere? Is it the one used in your blog? http://remy.bach.me.uk/2013/04/organizing-your-sasscompass-files-using-partials/\n. Hi Remy,\nI merged it, but you still need to add it to components.js, otherwise it won\u2019t show up anywhere. I\u2019ll be expecting a pull request for that :)\nThanks for the contributions!\n. Ah, right, I forgot to add it to CodeKit. Thanks!\n. Yes, I was thinking about that for a while, actually.\n. That would mean this code wouldn't be parsed correctly:\nfoo(); // runs \"foo\"\n. Didn't we merge a change with (fake) lookbehind that doesn't let : before //? if not, we should.\n. Yup, we have. Closing this now.\n. There is Ruby now in the list of languages, so closing this :)\n. Argh, window should change to self. Pull requests welcome, otherwise I'll fix it in a couple days. Thanks!\n. Thanks!\n. Why don't you send a pull request with the hook? :)\n. Merged, thanks!\n. No idea why I hadn\u2019t merged this before. Anyway, merged, thanks!\n. Thanks!\n. Can\u2019t reproduce either. Closing. :)\n. Hi there,\nThanks for this contribution! It looks like your editor changed the whitespace, causing the diff to be all messed up, which makes it impossible for me to review changes. Could you please fix that? Thanks!\nAlso, it would be great if you ported these changes to the clike language as well! \n. Gah, can't merge this any more. Could you please submit a new one? Sorry :(\nBtw, JavaScript inherits from clike, so since you added them there, they don't need to be in the JS definition any more.\n. Thanks to @kizu\u2019s suggestion (thanks!) I was able to review this and it looks great. Disregard my previous comment, I will merge this manually.\n. Merged, thank you @mseeboeck!\n. Hi, thanks! Is there any demo online where I can see this in action?\nBtw you could re-use some of the CSS for the line highlighter plugin (or make changes to that instead)\n. Thank you both! @kuba-kubula\u2019s way looks closer to the way to go. But why the extra elements? Why not just break for every line (\\n), since you\u2019re using a separate element anyway?\n. Why do you need generated content? Can\u2019t you do something like el.textContent.split('\\n').map(function(v,i) { return i+1 }).join('\\n') ?\n. Hi @kuba-kubula,\nAre you interested in developing your idea further or should I take it up when I find more time (and give you credit of course)? I'm very interested in this, as line numbers is a very highly requested feature (for reasons I don't fully understand, but well...) :)\n. @kuba-kubula Ok, I\u2019m closing this one then. Please don't prematurely optimize performance and end up with tons of code. I liked how short and elegant it was :)\nThanks @JustinTheClouds for stirring up the line numbers plugin discussion! Hope the fact that this PR is not merged doesn\u2019t discourage you from future contributions.\n. Merged, thanks!\n. Since Prism doesn\u2019t have this issue out of the box, it sounds like an issue with the WP plugin. Anyone know its author so we can @mention him/her here?\n. Oh, maybe I misunderstood the issue. Well of course you need to define the language somewhere, otherwise Prism wouldn\u2019t know how to highlight it. \nSome syntax highlighters auto-detect languages, but this is usually done by brute force: Trying to highlight with every available language and counting the number of resulting tokens. I think it\u2019s pretty inefficient.\n. Hey, thanks!!\nShouldn't the coffeescript definition inherit from JavaScript?\nAlso, is the theme anywhere online so I can take a look? \n(in general, it would've been better if those two were submitted as separate pull requests)\n. Awesome, thanks! Will you add it to the downloader too (code.js file) or should I?\n. Hi Rose, \nThank you so much! I just noticed something. If you are inserting all the other definitions before keyword, why not have them before keyword in the first place, instead of calling insertBefore? insertBefore was designed to insert definitions before tokens in the parent language. \nAlso, what\u2019s the difference string has from JavaScript? I don\u2019t see any. If there isn't one, it's redundant.\nIf you want, I can fix those, but thought I'd run it by you first :)\n. Merged for now, but lets look into what's wrong at some point. Thanks again!\n. One thing I just noticed: You don't need to update prism.js, that's the version of Prism used by the Prism website. Since the Prism website doesn't include CS code examples, it's not needed. \n. Sorry, I missed this. Will try to review today or tomorrow!\n. Thanks! Merged, but somebody (or me) should add it to the theme chooser to enable previewing and downloading...\n. Hey, thanks! Looks good, only a couple nitpicks:\n- You don't need to update prism.js, since that's the version of Prism used by the Prism website. Since there are no Python code examples on the website, it's not needed.\n- Please update code.js to add it to the downloader (unchecked by default)\n- Please put lookbehind: true on a separate line so it's more clear.\nThanks!\n. Looks good! One last thing, is this using space-based indentation? The rest of the project is using tab-based indentation, so it would be inconsistent. Any chance you might fix that? \nI could do it myself, but not sure when I'll find the time :(\n. Ah, they probably do it to avoid having to use tab-size: 4 to set tab size. Ok, cool, thanks again!\n. Nothing really. I haven\u2019t reviewed it much, but I guess I could merge it and see how it goes. However, Github says it can\u2019t be automatically merged :(\n. Merged! Thanks!\n. Thanks again!\nA couple things:\n- You don't need to modify prism.js, that's the version of Prism the Prism website uses and there aren't any SASS examples there.\n- You don't need to modify examples.html, that's mostly meant to test the Prism core. Loading all the languages there would bloat the website. I'm thinking of having separate pages per language, just like plugins.\n- Is there any online version where I could play with it and see how it works? SASS highlighting is pretty tricky. If not, it's ok, I'll just test it manually, but thought I'd ask first. :)\n. 1. Yes please :)\n2. Probably a better idea would be to have a separate page for languages, just like we do for plugins. Or extend test.html to allow testing for all languages. Or both. But for now, it should be removed from examples.html\n3. Looks good! \n. Merged, thanks! Lets see how it goes.\n. > Note: the Sass lexer is not merged for now :p \nOops, I\u2019ll get to that, soon, promise!\n. Closing, see #425\n. Oh, good point. Let me look into this. I recall there was a way of testing whether the DOM was loaded (with try...catch and querying <body>) but not sure I remember it correctly.\n. I recall there were a few incompatibilities with that, have they been solved?\n. Yeah, that\u2019s old...\n. If it doesn't add too much code, no objections :)\nWe'd need to adapt it a lot though, as they all contain a lot of older browser compat stuff.\n. Wow, that sucks! Do you have a testcase online somewhere?\n. Hey, thanks, this looks cool! Could you please merge changes and resend the pull request cause now it has conflicts? Thanks!\n. Doesn't seem to happen with CSS, so it must be something with the SCSS definition.\n. Hi there,\nThanks for this PR! How does this change fix the issue? Were comments wrongly highlighted inside strings?\nI can see a case of this failing, but not sure how common:\njs\nvar foo = {\n    bar://comment\n        5\n};\n. No, this is a better solution that putting strings before comments. Merged, thanks!\n. Hi there,\nThanks for the contribution! However, this seems like an edge case. It would be unwise for authors to set font-size for all <a>s globally. If they do so, they could cancel it in pre tags themselves, in the website\u2019s CSS. I can't cancel all CSS properties in Prism\u2019s CSS (at least until all gets added), that would bloat it hugely. \n. Yup, you\u2019re using the wrong class. If you want to use language-html instead of language-markup you have to add Prism.languages.html = Prism.languages.markup; after Prism, but I don\u2019t think it\u2019s worth it.\n. Some pull requests require a lot more time to be reviewed properly, which is hard to come by. It\u2019s not like no pull requests have been merged the past few months!\n. I'm a bit reluctant to give commit access to everybody submitting a pull request at this point, but having contributors approve pull requests instead of me, would be a great idea indeed. I should go over the merged pull requests and select the ones who have submitted the most (=they're probably interested in the project) and have the best code and ask them if they would like to take a more active role in developing it. Thanks, great idea!\n. I guess, but I'd need to review their code again anyway. Quality > Quantity\n. Well, I\u2019ve always wanted to have collaborators, I just find it very hard to delegate. I\u2019m very picky about what\u2019s good code, which is not always a good thing.\nBtw whoever wants to go through the closed pull requests and help identifying potential collaborators would be doubly awesome.\n. Btw, I did some tidying up today, and there are only 5 open pull requests now :)\n. Language definitions generally get merged pretty quickly. The open PRs are about major changes to the core.\n. I\u2019ve never heard of Puppet before, but if it\u2019s not just similar to Ruby, but more like an extension of it, you could look into extending the Ruby definition instead (e.g. look at how JavaScript extends clike)\n. Wat? I\u2019m confused.\n. Oh, that sucks. Thanks for reporting, will try to look into it soon. Which language definition are you using? PHP is not an officially supported one yet so you might want to contact those who wrote it. Generally when this happens, it\u2019s a bug in the language definition.\n. Then the above applies. It\u2019s a bug in that language definition. I guess Prism can be designed to avoid this though, which is why I'll keep this bug open. \nWhere can I find the code of that language definition?\n. Hi Miles,\nThanks for this big contribution! However, in general, smaller pull requests are more efficient, as they\u2019re reviewed faster (easier to find the time to review) and have higher chances of being merged. When somebody submits a huge pull request with a number of different changes, I often might want to merge a few of them and not others, which is hard.\n. I was just talking about future pull requests. I\u2019ll try to find some time to review this one and let you know if it needs splitting.\n. Oh, thank you. Sorry it's taking me so long to review long pull requests :(\n. Btw passing the language name in the wrap hook is something I plan to do very soon, as I need it myself as well. \n. Fixed, closing.\n. Hi Rob,\nThanks!! \nIf I\u2019m not mistaken, this is not simply a C-Like language, it\u2019s built on top of Java, right? Perhaps it would result in less code if you inherited from java instead of clike?\n. Heh, ok, understood. Will try to review this this weekend. Thanks again!\n. Hi Rob,\nI added the functionality to access the language from the wrap hook. :)\nCheers\n. Hi Rob,\nI merged this, but it won't show up in the downloader until you add it to the object at the top of the code.js file (it should be pretty simple). \nThanks for the contribution!\nCheers,\nLea\n. Thanks!\nPS: See? Easy to review pull requests do get merged quickly :P\n. Splendid, thanks for this!\n. This was added to prevent URLs in strings being highlighted as comments. But it consumes one character, so I see what the problem is. Yes, ? seems like a good fix. Thanks!\n. great! pull request?\n. This is the closest thing to unit testing this project has right now: http://prismjs.com/examples.html\n. > Well, not all comments are on the start of the line.\nI think you\u2019re misunderstanding his regex.\n. Thx!\n. Hi Miles,\nThanks for the contribution!\n@MoOx is right, I'd prefer to keep the base CSS definition basic, most people don't need that kind of granularity. However, I agree it would be useful, which is why it would be nice as an extra language definition that inherits from CSS. My extensions for dabblet might be useful in this: http://dabblet.com/code/code-highlight.js\nBtw, if you're adding child tokens to selectors, it might be useful to highlight other parts too.\nIs #27 still an issue? I see that URLs come before properties now, so that should have solved it.\n. Hi Miles,\nThanks for the updates! See inline comments.\n. Thanks! See inline comments. I apologize in advance for being a pain in the arse :)\n. Sorry, I don't have much time to review on weekdays. Will get to it this weekend.\n. It doesn\u2019t, so good call for posting ;) Oh, and thanks!\n. Looks good. Two more things:\na) You don't need to modify examples.html, only the default languages are there, mostly to show off the parser. If someone wants to test it out, they can go to the Test Drive page.\nb) You need to add it to components.js, right after CSS.\n. Thanks, merged!\n. Hi Miles,\nI have a few qualms (see comments), but I went ahead and merged this anyway, since PHP is a very highly requested language. Lets work through the issues after merging :)\nThanks for your continued efforts on improving Prism, very appreciated!\nCheers,\nLea\n. Another issue is that prism.js is merely the version of Prism required for the Prism website itself, it's not meant to have every language for previewing. There should be another mechanism for this, as otherwise the Prism website will end up becoming huge. Probably some improvement on the test drive page which is quite buggy and neglected right now.\n. Which browser does this happen in? I just tried it in Chrome and Firefox and no line breaks are getting lost.\n. Hi there,\nThanks! Could you also add it to index.html after the other logos? Also, a smaller logo would work better, to minimize load times, since it's going to be scaled down anyway. Also, I don't mind adding this logo (at a smaller size) but I think it won't work very well with the white background.\n. Hi there,\nI don't understand why a function is needed. You can do it in a similar fashion as the JavaScript definition. After all, people shouldn't have to use <? and ?> to highlight PHP chunks, as they might be highlighting parts of code, not entire files. They will however have to use them if they're including HTML around them as well. So, it's basically almost exactly the same as the JS definition.\n. Also, whitespace changes have been commited again.\n. Let me think about it for a bit. The markup solution certainly seems easier, but I understand your point.\n. Thinking about this a lot, I believe that your original approach was best, compared to the other solutions we discussed or this. You just need to amend it accordingly for cases where it starts or ends with HTML.\nBtw keep in mind that no matter what we do, Prism will never be able to highlight every case correctly with the current architecture, since PHP tokens can be intermixed with HTML tokens, and Prism, by design, cannot work with that. I.e. this will always be highlighted incorrectly:\nphp\n<p foo<?php echo '=\"bar' ?>\">Content</p>\nbut then again, Github\u2019s highlighter doesn\u2019t seem to do a great job at it either :P \nBtw, you did it again :) : This pull request could have been split into multiple smaller ones. Then I would already have merged the small enhancements two weeks ago and left the hard part only, which required more thought.\nBtw, have you added support for shorttags? I.e. \nphp\n<?= 'This is equivalent to an echo' ?>\n(If you do, please do it in a separate PR)\nThanks!!\n. I strongly disagree. Both syntaxes should be highlighted, that\u2019s why proper editors highlight both.\nIf you want to make the markup highlighting more subtle in PHP blocks you can always do it through descendant CSS rules.\n. Not necessarily. A lot, if not most, text editors use regex-based highlighting for speed reasons and even fail on some cases. I know for sure that Sublime and Espresso use regex-based highlighting. Of course, the regex engines of the languages they're written on are better than JavaScript\u2019s JS engine which doesn\u2019t even have lookbehind...\nWhat was the issue with the old code? Perhaps I could help.\n. Hm, you\u2019re right. Even if we don\u2019t highlight HTML, how will you distinguish the HTML (that shouldn't be highlighted) from PHP code when no opening/closing tags are used?\n. Also, if HTML is not highlighted, perhaps it should be a different color (i.e. anything that's not PHP).\n. I have a crazy, super hacky idea about proper HTML + PHP highlighting. Could be clever or completely silly.\nOn first pass, the <?php ... ?> tokens are identified, extracted, highlighted and pushed on a stack. In their place a unique character sequence is added (same for all of them) which doesn't trigger markup highlighting, e.g. {[{^PHP^}]}. Markup is highlighted as usual and then the (already highlighted) PHP tokens are popped from the stack and inserted in where the weird character string is.\nPotential issue is that if the string is broken in two because of the highlighting, hell will ensue (i.e. \"What happened to my PHP code?!!!???\")\n. Hi Miles,\nThank you so much for working on this.\nI've added a few comments. Another thing is that the examples.html page doesn't currently work like that. It's not a bad idea to make it work like that, but you'd have to add the other languages as well, not just PHP. In fact, if the performance is not terrible, it could be a great idea to showcase all the languages without littering the site's prism.js.\nAside from the small things that affect other parts of Prism/the website, I trust that you've sufficiently tested your changes and I'm willing to merge them. Prism\u2019s PHP is your project basically, I'm just helping :) In fact, I want to add \"subproject owners\" to components, so that a) they get proper credit and b) people know who to ask and CC when filing a bug. So, if you could add your username to the components.js object for when I get around to that, that would be great.\nAlso, do you want contributor access for making changes to the PHP definition? You'll still have to send pull requests for changes that affect other parts (there's no way to do that with permissions, I'll just have to trust you on that) but you've demonstrated a significant commitment to this and I'm feeling confident to give you access.\n(let me know if anything doesn't make sense, I'm kinda tired right now)\nThanks again!!\n. Hi Miles,\nThank you so much!\nThere is no =< operator, it\u2019s <=. \nI merged it anyway, because I would feel bad to have you wait after all this effort, but please fix it at some point?\nI also added you as a collaborator, so now you should have commit access to the project. Use it wisely and try to restrict it to either your own language definitions (PHP and not sure if anything else), or really obvious stuff. When in doubt, send a pull request. :)\nThanks again!\n. Hi there, thanks! I don\u2019t get why the attribute is needed, since it has no value. A class would be sufficient. Unless the attribute can also specify the starting line number (which would be useful and easy to implement). In any case data-line-numbers is a very long name. I\u2019d suggest data-line if it specifies the starting line number, otherwise a class name (line-numbers)\n. Oh, this can work together with the line highlighter plugin? data-first-line then maybe?\n. If they can\u2019t work together, then I don\u2019t see what\u2019s the point of avoiding conflict. Especially since they can't work together, the same attribute name would make it obvious they can\u2019t be combined.\n. Looks good, thanks! Merged. Sorry for the delay.\n. Why did you close the issue? Does it work now?\n. Gah, it\u2019s the flie highlight plugin, because it has no CSS file. Thanks for the report!\n. Should be easy to fix, if anyone wants to send a PR. Just check if it has content before adding it.\n. Thanks, merged!\n. Closing, see #425\n. Thanks for looking into this!\nHow about using the same variable and explicitly testing for false (i.e. lookbehind === false etc)\n. There is, but it\u2019s in my CodeKit config... \nLet me think about the other question a bit.\n. Actually, could you explain the problem? It might be the lack of caffeine, but I just took a good look at the code and I don\u2019t see it. \nUntil line 229, lookbehind is used as a boolean derived from pattern.lookbehind. In line 229 it\u2019s set to the length of the first capturing group and functions as lookbehindLength thereafter. It\u2019s not used as a boolean after that point, so I don\u2019t see how the error occurs. What am I missing?\nThanks!\n. Oh nevermind, I just noticed the \"future\" matches part. Got it.\nI\u2019d love to merge this, but there are merge conflicts. Could you please pull in the latest changes and resubmit this PR? Thanks!\n. Merged, thanks!\nIn the future, keep in mind you don\u2019t need to modify prism.js, I can do it myself after pulling, it\u2019s done automatically. Not that I mind if you do of course :)\n. Hi there,\nThanks for this! I really wanted to add HTTP highlighting!\nA few small things:\n- prism.js is the version of Prism used in the Prism website. It\u2019s not supposed to contain every language.\n- Similarly, since prism.js doesn't contain every language, not every language can be showcased in the Examples page. Different languages can be tested in the Test Drive page, but I\u2019m still looking into something that showcases the potential of languages with specific pre-written examples.\n- I LOOOOVE the idea of highlighting the response body when a Content-Type header is set! But why only do it for those languages? Why not run a loop over a predefined object that maps languages to content-types (after checking the languge definition is loaded)? That would be even cooler!\n. Merged, thanks! Please follow the issues for any bug reports pertaining to this language definition.\n. Hi Phil,\nThanks. Can you reproduce this on a separate page? Also, are you using any Prism plugins? Could you try without the plugins and see if it can be reproduced?\nThanks!\n. Does this only happen with JSON?\n. Um, where did you find the JSON language definition? It\u2019s not here... http://prismjs.com/download.html\n. LOL!\nYou can use the JavaScript definition to highlight JSON.\nIf you want the class to be language-json, you can alias it by adding this line:\njs\nPrism.languages.json = Prism.languages.javascript;\n. That\u2019s not how -prefix-free works. It doesn't add all the prefixes, just the ones needed for the current browser. Therefore, it wouldn't work in this case, sorry :(\n. Howdy,\nThere is some documentation here: http://prismjs.com/extending.html\nIn general, as long as your regex skills are good, the API is pretty simple.\nThanks!\n. Thanks!\n. Thanks!\n. I think #905 would work better, with a white text color for .token. Feel free to send a PR if you want, otherwise I\u2019ll do it myself next time I\u2019ll work on Prism.\n. Thanks!\n. Thx!\nYes, it should. \n. Great! Looking forward to it :)\n. ???\n. Sorry, I\u2019m currently traveling. Will take a look tomorrow.\n. Perhaps we could also go that way about JS as well: Having a noJS key instead of hasJS, since most components do have JS.\n. Looks good. Have you tested?\n. Merged, thanks!\n. @katsgeorgeek It looks like this started happening after your changes to the download page, could you please take a look? Thanks!\n. In any case, thanks!\n. Btw: If my reply seemed weird, it's because I didn't realize you opened the issue. I thought it was somebody else. D'oh!\n. Closing, see #425\n. Hi George,\nI agree with the others. However, I don't mind adding this, but somebody needs to keep it up to date. I can't do that. If you're willing to take up the responsibility of updating it in a timely fashion, I don't mind merging it.\nCheers,\nLea\n. Thanks for this contribution! Sorry it took so long to get to it.\nI\u2019ve added a comment inline. Also, the examples you added are not really valid code samples, they\u2019re just a list of tokens. \nThere are merge conflicts right now, could you please pull and merge them? Thanks!!\n. Hi,\nprism.js is the website's build of prism, not the build you're supposed to download. On the Prism website, Prism does not run asynchronously, so I don't see the problem.\n. 1. I know that Prism has an async mode that uses workers, I wrote it :-) My question was which page in the Prism website uses that mode. Is it async on the download page?\n2. That window.Prism should be changed to self.Prism. Then that error won't be thrown (though maybe another one will). But in general it's good practice to use self instead of window so if you could change that I'd be grateful :)\n3. I cannot remove the entire file highlight plugin from the entire prism.js script, it's actually needed in the Prism website. It's not decorative.\n. I think the best solution would be to make the file highlight plugin compatible to run in a worker context.\nE.g. check for the presence of self.document in the beginning if. That should solve it in a much better way.\n. What are your reservations about it?\nPeople might include this plugin and then run Prism asynchronously. It's not just a problem with the Prism website so it shouldn't be fixed in the Prism website. IMO.\nRegarding the pull request, I think it's better if you send a new one. This one has merge conflicts too. \n. Thx!\n. I think it would be better if we did if (!self.Prism || !self.document || !document.querySelector). Fewer characters & easier to understand. Do you mind doing that? I could merge this PR as is if you don't want to, it's pretty minor.\n. Thanks!\n. Oh why are there separate functions? Why not just hsla? and rgba??\n. Yeah, I'm just saying, the above would be more compact. ;)\n. Miles, are you not allowed to merge it yourself?\n. You wrote the CSS extras, right? If so, feel free to make any changes to it. \nAlso small changes to other stuff are ok, as long as you're confident about them.\n. Closing, see #425\n. Merged, thanks!\n. Hi,\nThanks for the contribution! Is there a separate demo somewhere? I'm having trouble telling what's the page style and what's the Prism theme without dwelling on the CSS code.\nCheers\n. Oooh, I like it!\nIt might look even better with zebra striped lines with a very light blue vs white (could be done with simple linear gradients). \nThe overflow-y seems a bit off, check the \"Embedded JS and CSS\" example.\n. Yes, I didn't mean diagonal stripes. I meant horizontal stripes, with a background-size set to double the line-height, so they follow the text lines.\nDon't forget to add background-origin: content-box so that they follow the padding as well. \nWhy is overflow-y even needed? Why are you constraining the height?\n. Closer, but not quite.\na) I was thinking of a subtler color difference between the stripes, these are too obtrusive\nb) background-attachment: fixed prevents them from serving their functional purpose: Allowing the user to follow long lines of code.\nc) The background on inline  doesn\u2019t help.\nRegarding the overflow, perhaps you could set the  element to display: block and overflow: auto that? \nAlso, please don't style html, body as this affects the whole page, not just Prism.\nFloating the container is also pretty dangerous, why is it needed? Same with width: 100%. Keep in mind these styles will be dropped in a variety of environments and some will be overriden. They shouldn't break easily.\n. Nooooo! The lifted shadows are awesome, they\u2019re the main reason I liked it. We\u2019ll find a way to make this work.\nWill look into it tomorrow, now I'm going to bed :)\n. re:stripes, that's better. Do you like it? Please size it in ems, not pixels. It needs to follow the line-height.\n. Sorry for the delay, haven't reviewed it yet :( Thanks for the reminder!\n. Looks good, but why haven\u2019t you added it in the components.js? Even if I merge, it won't show up in the theme chooser unless it's added there.\n. I\u2019m really sorry for stalling this, but it seems you made the change on an old version of the file and there are merge conflicts. Would you mind pulling the changes in first and resolving the conflicts? I\u2019ll merge it immediately after that, promise!\n. Thanks!\n. Hello,\nIt seems that you've added an incomplete components object in the code.js file, as well as adding Coy in the components.js file. This way, you wiped out all the other themes except yours and mine. Please fix this. Apologies I didn't see it before merging, but it had been a while and I really wanted to merge this quickly.\n. I\u2019m afraid I can\u2019t reopen it, there doesn\u2019t seem to be a way. Could you please send a new one? Sorry!\n. Thanks for the bug report! Pinging @milesj since he developed the PHP language definition. :)\n. I have to admit I agree with Karmac: PHP could add a language definition for language-php which doesn't require delimiters and doesn\u2019t account for HTML, and also add PHP tokens to language-markup which highlight PHP inside markup, akin to how the JS or CSS language definitions do it.\nBut, it\u2019s ultimately your call Miles, the PHP lang definition is your project :)\n. Why on Earth would you do that?\n. Most of my projects are using gh-pages as the default branch, to have it automatically published in Github pages. See http://oli.jp/2011/github-pages-workflow/\n. Hi there,\nThanks & sorry for the delay! It seems that this has been fixed already, could you please check?\n. Sorry for the delay. Merged now, thanks!!\n. Merci :)\n. Hi there,\nSorry for the delay. :( Thanks for this!!\nThis PR looks fine, but there are merge conflicts now. would you mind pulling in the newest changes and resolving said conflicts?\nBtw, you could simplify the number regex in C by using the i flag, so that you don\u2019t have to include lowercase & uppercase versions of each letter. \n. Hi Philip,\nThanks for this!\na) Why is the \"View source\" link needed? The code is perfectly selectable without it. This is useful in syntax highlighters where the line numbers are mixed with the code, so you can\u2019t select and copy without that.\nb) Wouldn\u2019t an icon fit better for copying?\nc) Why require a class to opt in? If somebody wants to use this, they will likely use it in every code sample. \n. a) Re: printing, that\u2019s what media queries are for. All Prism themes should look good on print, otherwise I consider it a bug. If the highlighting gets distracting, that also sounds like an issue with the theme.\nb) Data URI or, even better, SVG? Remember Prism doesn\u2019t support IE8, so SVG is perfectly acceptable.\nc) Yup. Although I can't think of any use cases for the opt out. Can you? I\u2019d rather avoid feature creep.\n. Hey, why did you close this?\n. Ah, the infamous escaping bug. Damn, I need to fix this.\nThanks for providing another example.\n. Done! Closing this issue, feel free to reopen if the issue persists.\nThanks again @apfelbox!\n. Your regex fails on escaped quotes, such as \"foo\\\"bar\", mine doesn\u2019t.\n. No reason, I probably just forgot. :)\nThanks!\n. Solved with pull request #150 .\n. Did you commit these fixes Miles?\n. Guess we should close then. \n. This looks fine, merging! Thank you @bartveneman!\n@milesj We should write a short guide about contributing to Prism at some point, this is very confusing to newbies, almost 50% of contributors get confused at first. :(\n. Hey,\nThis is supposed to serve that purpose, but it's currently kinda messed up wrt other langs: http://prismjs.com/examples.html\n. I think it would be best to include separate <script> elements with each language, just on that page. It would be a bit heavy, but it's just one page. Somebody had done that in a pull request but I don't see it live now. \n. The question you just asked is exactly what I've been asking myself every time I thought about working on this. Honestly, I don\u2019t know which way to go. It seems like it shouldn't be centralized, but then every language would need a whole folder of its own, which I\u2019d rather avoid. Perhaps a folder called \"examples\" with one JSON file per language? (and not all languages will have examples, so we need to design the page based under that assumption). What do you think?\n. Yup, totally agree! I hadn't really thought much about the format, my point was the examples/* approach.\nLove the alias listing too, tons of people have been asking for this!\n. This is really cool!!\n. Could you please provide an example? I'm not sure I follow.\n. Ouch, this will be tough to fix. Thankfully, it's quite an edge case (look how there are both comment opening & closing tokens in this code).\nThanks for reporting!!\n. Ahem, it looks like this reverses other changes as well :( Look at the diff...\n. Oh right, it was just that your commit had added changes. Merged, thanks!\n. Thx!\n. I could add a dummy version, but there\u2019s no way I\u2019d manage to keep it up to date. I\u2019m never even sure when to jump versions. In general, I disagree with the whole versioning idea. Would it help to add a dummy version? (e.g. 1.0.0)\n. If anyone wants to commit into updating the version numbers, I\u2019d be fine with it. I don\u2019t have the resources to do it personally.\n. Oops, thanks!\n. Closing, see #425\n. Yes Miles, Jayden is right. It\u2019s always a no-no to have to maintain lists of stuff when that stuff changes so much. Both for maintainability and file size. \nAnd it\u2019s very easy to do this in a more futureproof way. Something like \\b[\\w-]+(?=\\()\n. @milesj: Not if it's after selector, since that would consume selectors so they wouldn't be matched further.\n. Let's continue the discussion on #239.\n. > I also feel like the prism source and website should be separated. Throw in some Grunt and build packaging as well.\nWell, at least they\u2019re in separate folders now :P\n. Sorry, just haven't found time to review yet :(\n. PRs are not merged on a FIFO basis. Some of them are more time consuming to review than others, although I have to admit, I've been pretty bad for the past few months at reviewing PRs. :(\nAnyways, I\u2019ve taken another look now and although I haven't reviewed it as thoroughly as I wanted, I think I'd better merge it and hope you'll be around to help fix issues if any arise. :)\n. PS: Thanks a lot for contributing!!\n. This is awesome, you even updated all the themes!\nThanks man, you rock!\n. Merci!\n. Can I keep using the same version number or will I have to keep incrementing it every time I push?\n. Which theme? I believe this was fixed ages ago, but maybe not in all themes.\n. Aw, it looks like it wasn\u2019t fixed there. Perhaps someone could submit a PR for it? You can see how it should be solved here: https://github.com/LeaVerou/prism/blob/gh-pages/prism.css#L27-37\n. Looking forward to it, thank you so much!!\n. Argh, I\u2019m sorry, I made some conflicting edits before merging this (changed the path of theme files). Would you mind pulling and resolving any conflicts? \nAs to the content of this PR, it looks fine but why did you change the colours?\n. Looks fine to me. Merged, thanks!\n. So the bug only happens when you have slashes in the URL? That sounds unlikely, as Prism doesn\u2019t differentiate between HTML attributes/URLs/etc.\n. Closing this then, since it's not a Prism bug.\n. I\u2019m afraid this looks like it should be fixed on the PHP plugin level\u2026\nOr we can just agree they\u2019re incompatible. This is a bit overkill IMO.\nBut thanks for working on it and spotting the issue!\n. I don\u2019t object to that, although there's an issue of which themes/languages/plugins that build would contain...\n. Prism is kinda useless without any language definitions...\n. Exactly :(\n. This is most certainly a bug. :(\n. That's not true, unless there's a bug there, regexps are used as a whole for replacement (except when you're using fake lookbehind).\n. I don't know much Ruby but I think & is only an operator there. In any case, highlighting happens after the ampersands have been escaped, so even if & was required there, it should really be &amp; (and obviously not use a char class). This is what breaks things, you're right. Could you send a pull request for this edit? Thanks!\n. Still need to minify - be careful.\n. Thanks! Could you fix the indentation? It seems inconsistent between files, on some of them it\u2019s properly left-aligned and on others it seems right-aligned with the declaration above.\nPS: Sorry for the delay in getting back to you, I just noticed how old this is!\n. Thanks!\n. Hi there,\nThanks for this!\nI can merge it, but without corresponding entries to components.js it won't show up in the downloader.\nAlso, additional minified versions (ending in .min.js) would be welcome, but I can generate them myself if that's not easy.\nCheers\n. Thank you so much, merged!!\nBtw in the future, please submit separate pull requests for separate languages, if possible. \n. Yes, good call! There needs to be a list somewhere, or at least mention the IDs in the download page...\n. Hi there!\nThank you so much for doing this. This looks perfect, I wanted to add Node support with a minimum amount of changes for a long time. However, I will need someone to review this who does code in Node, as I don't. Any takers?\nYou don't need to edit prism.js, that's just the version of Prism used by the website and is built automatically. It would make the changes easier to review if you removed the ones about prism.js.\nRegarding the build system, I'm using CodeKit locally, which isn't optimal as everyone is confused. At some point I will need to export my configuration somehow in a config file and include it in the repo. Currently the configuration is just a bunch of CodeKit settings :(\n. Finally found some time to review this properly, sorry for the delay! Merged!!\n. Can anyone help with publishing to npm? Too busy to research it right now. Thanks!\n. Hi Adam,\nI made an npm account, but I'm still not sure how to publish...\n. The only reason this is on gh-pages is that Github only uses that for Github Pages. Once Github allows Github pages from master, I will switch all my repos to use a master branch instead. \nI like @adam-lynch\u2019s idea of using the master branch for all Prism code and gh-pages for the website files. That would also eliminate contributor confusion about which file to edit. However, I'm still not sure how to do this in a maintainable way. I don't want to have to manually keep the branches in sync\u2026\n. The whole components folder. Not sure if components.js should even be in the master branch, it's only used by the website. But if it's not, then people would have to issue PRs to two branches every time they add a language/theme/plugin, which is suboptimal\u2026\n. Sure, but it's an extra step every single time a change is made. I know from experience that even a tiny extra step every time adds quite a lot of extra work in total. If it could be automatic somehow, sure.\n. > My, gosh. Hopeless branchy structure.\nMy, gosh. Useless comment.\n. There didn\u2019t use to be a master branch in the past, to prevent the inevitable syncing issues between the two. I don\u2019t quite remember when one was added, @Golmote do you?\n. A pull request would be much easier to review, though this seems a bit like a hack. Surely, there should be a better way to handle this.\nThanks for looking into it!\n. Perhaps we need a new hook? (or, if we have one, to change the hook line numbers uses)\n. Thanks man, merged!!\nDid you use any code from the original PR? If so, you should credit its author somewhere, even in a comment.\n. Yeah, that kind of thing is a pretty well known rare failure, as Prism employs some clever regex matching instead of a full-blown parser, for performance and simplicity. Not sure if there's a sensible way to fix this, but keeping it open in case anyone has any ideas. I don't, for the time being. :(\n. That's exactly what I was trying to avoid. It's much better to create an extra element than N extra elements where N = your number of lines. Why do you think this is a better approach?\n. Hi there,\nYour approach is actually less semantic, as there is no semantic reason to wrap every line with an <a> element. So, instead of 1 extra non-semantic element, you are adding N. \nFurthermore, the more elements in the DOM, the slower it becomes. This would be really slow for larger code samples.\nAs you've probably guessed, I can't merge this, and I\u2019d suggest you don't use this approach either. But thanks for spending time on contributing to Prism, that's very appreciated!\n. Hi there,\nI'm in favor of merging this change, but I can't due to all the other irrelevant commits. Please fix this?\nThanks!!\n. Wow, these examples are pretty bad indeed. I should be reviewing PRs more carefully. Thanks for looking into it! Could you please note which language definitions had such mistakes, if that wouldn't be too much extra effort?\nIt looks like CoffeeScript was added by @R-osey in PR #69. Rose, do you remember what that regex is supposed to do, by any chance?\nUntil Rose replies, my guess would be it means _?[A-Za-z-]+. But that's just a guess, as I have no idea about CoffeeScript either.\n. Yes, this really needs a testsuite, but I don't have the time to do it. Any help would be very welcome!!\n. Also, didn't know about the CNAME issue. Sounds more like a Github bug than anything.\n. ping @tshedor @kuba-kubula\n. Thanks!\n. Thanks!\n. Thanks! Some comments:\n- You don't need the parentheses, the pipe operator has low precedence anyway\n- This will only work on the first line, as there's no m flag. If you add an m flag, check if it breaks anything else in the regex.\n- The prompt is not always just a $, sometimes it has stuff before the $. E.g. in my terminal, the prompt in my current tab is: Leas-MacBaby-3:css-backgrounds leaverou$\n. There\u2019s only one <code> element and that\u2019s actually the way that's recommended by the HTML5 spec to mark up code blocks, not something Prism-specific. Spans have no semantics by default, and thus should not be acknowledged in any special way by screen readers.\n. Hi there!\nI think this is not very useful as it is, but it could be turned into something very useful if you are willing to work more on it. For example, you could add icons for file types (with a CSS ::before pseudo), convert the dashes into lines etc. Then it could be used to make really pretty dir listings!\n. First off, thanks for working on this! I\u2019m positive to the idea of adding a hook, but it seems that just adding a hook won't suffice. Do you have any specific code changes to suggest? Not sure I follow what the 2 lines at the bottom of your post are supposed to do. \n. I didn\u2019t write the SCSS definition, somebody else did, I just merged their pull request. If someone sends a decent PR for SASS, I will merge that too. I don\u2019t currently have the time nor the desire to do it myself (as I don\u2019t use SCSS/SASS), sorry.\n. Sorry, I don't have the time to add a bower.json file. Every one of my projects that has them, it was because somebody sent a pull request. It would have taken you less time than this lengthy post if you did that.\n. Yup, I know. I got 3-4 in my repos.\n. Thanks Remy. Can anyone else reproduce this?\n. Thanks!\n. Closing, see #425\n. Hey, thanks!\nCould you please fix merge conflicts and add an owner property in components.js with your username?\n. Hey, thanks for the contribution!\nWhy only Github? Other servers can be CORS-enabled too ;)\n. Hi there,\nThere's no API method currently for this, you have to remove the div manually. I just tried it on the demo page and it doesn't seem to leave any \"bubbles\" behind, which makes sense as those are just generated content on that div\u2026\nDo you have any online testcase I could look at?\n. Thank you so much for stepping in here and submitting this patch!\nI merged it as is, since fixing the issue is more important. But could you think of an elegant way to avoid duplicating the regexes, that would be most welcome. :)\nThanks again!\n. That's a good idea. The problem is that should be in the Core, and I'm trying to avoid having the core grow too much. Perhaps there could be a plugins.js file that adds convenience functions for plugins and have the downloader add it to every download that contains plugins (since everything is concatenated anyway). Just an idea.\n. Hi, thanks! \nSmall issue: This seems to depend on csharp, but it's not declared as a dependency in components.js.\n. It is better to keep changes separate, but don't worry about it. Could you fix the merge conflicts and add yourself as the owner in components.js? Thanks & sorry for the delay!\n. Thanks, merged!\n. Thanks! Can I haz PR?? :D\n. Yay, thanks man!\n. Thanks!\n. Hey, sorry for the delay! Merged it, thanks!\n. Hey, thanks & sorry for the delay! Is there any online demo or screenshots? \n. Nice, I like this! Been meaning to make something similar for ages. Could you please add an owner property to components.js with yourself as the owner? It's a new thing.\n. Brilliant, thanks, merged!\nAs a further improvement, it would be nice if it used a different font (Helvetica Neue, sans-serif would be a safe choice) and the background was a darker/lighter version of the code's background instead of a shade of gray (which doesn't quite match). Some more padding could improve it too.\n. Not currently, though it is something I want to add at some point.\n. I've certainly seen the issue you describe, and I'd welcome a PR. Thanks for taking the time to debug it!\nNot sure I understand why you set the file highlight plugin as selected by default though.\n. Thanks!\n. Hey, thanks! Is there any online version where I can test this out?\n. This is awesome! Love how it's added to the files as well. My only comment is that the pipe character (|) is not very common for separating multiple values. How about a plus sign?\n. Thanks, merged!\n. Thanks!!\n. Hi, thanks! Doesn't this make the code areas longer however? It looks a bit like a solution that treats the symptom instead of the cause. i.e., if the theme has a problem, it will still be present, even if the Download page doesn't expose it.\n. Which browser? Demo?\n. Nothing planned, but pull requests are always welcome :) All that's needed is regex knowledge, the API is very simple. As you can see in the download page most languages are not written by me at this point :)\nYou can see some documentation here and the existing language definitions should serve well as examples. Let me know if you have any specific questions!\nThanks for the feedback too!\n. Thank you so much!\n. Hey, thanks for the contribution!\nI added a few comments. Basically, I think most of your regexes would benefit from using the m flag. \nAlso, there are merge conflicts (probably because I merged another new language definition which also modified components.js), could you try to resolve them please? \nThanks again!\n. > I don't know for the m flag because some regexp have to match a single line in git output. \nNot sure I understand what you mean here. What the m flag does is it changes the behavior of ^ and $ to match beginning and end of line respectively. Nothing more.\n. Thx!\n. Well, they are generated automatically on my laptop, but I have to pull first, navigate to each and save. So, if anybody wants to minify as well, it's not discouraged. \n. Not sure what you mean. The FAQ item you link to is not relevant to the fact that pre-existing HTML in code blocks will be stripped out before highlighted. That\u2019s a limitation that's mentioned in Prism's homepage.\nWhat you need to do to highlight this code is to encode < as &lt; (at least), so that it\u2019s not parsed as HTML by the browser.\nBtw you don't need to use the class language-markup twice, once is enough.\nAlso (off topic), are you sure spacer gifs are a good idea in this flexslider? You could just remove the <img> altogether and apply the background to the <li> or something.\n. This is great, thanks! Will try to do it if I get some time.\n. Would I need to change any URLs in the files if I tried this? (pardon my ignorance, never used git subtree before)\n. Hi Rob,\nThanks for offering to help. I don\u2019t mind making the change, but I want something that won't add unnecessary future overhead for contributors. The Prism website currently has a downloader that needs access to all components to build the download. Therefore, the only way I see this working is if I can somehow point the master branch to be a subfolder of the website that updates automatically every time I commit to gh-pages. Themes and plugins though are on separate folders, so it gets more complicated. I really, really don't want to have to manually sync master and gh-pages after every single change though.\n. Well, that\u2019s exactly what I don\u2019t want to end up having to do. Keeping two things in sync manually is recipe for disaster.\n. I've thought about doing that myself many times too. Thanks!\n. Thanks @nauzilus!\n. Thanks!\n. ping @MoOx\nPerhaps we could copy the one from prism-clike for functions?\n. Yeah, there's a token in css-extras for this, but it's far from ideal (see #239) :/\n. I think the main reason was that you rarely need that kind of fine grained highlighting for CSS, and I didn't want to bloat the main CSS definition. However, functions are rather common, so I wouldn't object to moving them into the main CSS definition after we fix them. Especially since they'd also solve this issue.\n. Closing, see #425\n. ping @MoOx\n. Heh, thanks @jaydenseric, I had completely forgotten about that issue.\n. Closing, see #425\n. Hi Mel,\nThanks for the contribution, but I honestly have no clue what this PR of 450+ SLOC (!) is about or even what kind of thing it is (a plugin? a language? an improvement of the Prism website? ...?). \nBtw JS (at least in the browsers that Prism supports) has base64 encoding/decoding natively through btoa() and atob(). \n. Isn't this basically the same idea as #208?\n. Hi, thanks for this! Can you remove .gitignore and change the package name to prismjs please? Thanks!!\n. Thanks!\n. No, sorry :(\nI need to read up on it first, and I\u2019m very swamped. :(\n. Agreed.\n. Thanks!\n. Thanks!\n. Hey,\n\nwould this belong in the clike component?\n\nNo, because not all C-like languages support this.\n\nIs there a way to add an additional comment pattern in the PHP component without repeating the pattern from the clike component for // and /* */ comments?\n\nUnfortunately not :/\n. Thanks, merged!\nping @milesj\n. Good point, thanks! What kind of token do you think they should be?\n. ping @multipetros\nShould be pretty easy to fix. Perhaps by converting the string token to something like /\"\"\"[.\\r\\n]+?\"\"\"|(\"|')(\\\\?.)*?\\1/g\n. > I don't think you can use a wildcard inside square brackets; it acts like a literal period instead.\nAh yeah, what a rookie mistake of mine! I guess [\\s\\S\\r\\n] would work.\n. In case you're interested @mattprice, it doesn't work because you're using a capturing group, so you changed the meaning of the \\1 backreference to refer to your group. Your way could work if you changed \\1 to \\2. \n. Ugh, I wish I saw this PR before I made the change myself. Sorry mate :(\n. Thanks @ravinggenius for looking into this and writing this detailed write-up! I will need some time to properly review the suggested changes (and try to remember why the hell I did the escaping there in the first place \u2014 I\u2019m sure I had a reason :P)\n. I think you're right and it does make sense to do the escaping in Token.stringify. If it breaks existing plugins/grammars etc, who cares, we\u2019ll fix them. This escaping has been annoying me for a while, as it results in lots of weirdness in grammars. So, if you'd like to work on it @ravinggenius, I'd be delighted!\nHowever, this is yet another case where it really bugs me that there are no tests. It\u2019s like developing with a blindfold. Somebody needs to add tests at some point, but I have zero time to do it myself :(\n. Thanks man!\n. Closing, see #425\n. Thanks @apfelbox! Closing.\n. Because someone might want to style all tokens in a certain way, and it would be very cumbersome to list them all. \n. > Working on this, together with #231\nAwesome, thank you so much @apfelbox! I really can't put my gratitude in words about your help on this project so far! You rock! :D\n. Thanks!!\n. Hi there,\nThanks for working on this! Did you test it with the other grammars (after they are adjusted of course)? Does it work? Could you fix one of them and add it to this PR? (ideally markup, as otherwise the whole Prism website will break once I merge this). Then I could fix the rest myself. :)\nThanks again!!\n. Thank you so much!\n. Oh always components/prism-*.js. prism.js is generated from those and is the version of Prism the website uses :)\n. Oops, yeah, I hadn't noticed you made them to prism.js!! Yeah, prism-core.js is where they should go.\n. Hi @ravinggenius! Merging this, fingers crossed!\nAnswers:\n1. It's just CodeKit concatenating the files & generating the minified versions. Everything (unminified) in components is source. \n2. Yeah, some proper testing infrastructure is long overdue on this project. :( Currently, I just load the website and/or test.html\u2026 Given that it loads the languages on demand, it should probably point to prism-core.js instead of prism.js. But in the long term, test.html is insufficient for actual testing of changes. \n. Hey @nauzilus @zeitgeist87 @R-osey @arnehormann @robfletcher @sherblot @idleberg @milesj @multipetros! \nCould you check & convert your grammars? It will only take a minute :)\nThanks!\n. Yup. No more &lt; and &amp; shit in our grammars :) I\u2019ve updated mine and so far it seems smooth. I really wonder why I didn't do it this way from the beginning, what was I thinking. I hope there wasn't some serious reason that I will remember long after all grammars have been converted!! :P\n. That's because you haven't escaped any tokens, so your browser thinks you have an open HTML tag <iostream>. Convert it to &lt;iostream> and it shall be ok :)\n. Thanks! I saw it but was planning to remove it myself :)\n. Why not a lookahead?\nAlso, not relevant to this PR, but is the ignore token still needed?\n. Looks good, thanks!\n. Thanks!\n. Hey, thanks! Where can I read more about Rip?\n. Merged, thanks!\n. You did, thanks!\n. Sweet, thanks!\n. Brilliant, thanks!\n. Hi Ben!\nThanks so much for working on this! I really like the idea of a proper build process that's transparent to contributors. However, wouldn't this require everybody contributing to use node every time they're working on Prism? Not sure this is optimal, since not every Prism contributor is familiar with Node.\n(not saying no, just that I need to think about it more carefully)\n. At least with CodeKit though, you set it up once and then it watches the files forever. With gulp, you need to run node and call gulp watch every time you work on Prism, non?\nAlthough, on the other hand, you still have to launch CodeKit if it's not already open, so that's a step as well\u2026\n. Sure, let\u2019s merge it. As long as somebody also updates the README.md to explain what to do for contributors, step by step.\nBtw, thank you so much for your help @apfelbox!\n. Thank you both for your work!\nCould somebody please update the readme?\n. Thanks! And thank you again @apfelbox so much for all your hard work recently. You rock!\n. Thank you very much!\n. Merged, thanks!\n. 1. If some text is processed already (i.e. recognized as a token) it will not be processed further, not even for lookbehind. You can perhaps do what you want by using inside with another bracket token in there.\n2. Because your first regex basically says \"everything after exten and until the line break\", so it wraps priority as well. Like I said, if a token is recognized, it won't be processed further. I think this one will also benefit from inside: Write a simple regex to recognize the whole line, then simple regexes inside it for extension, priority etc.\n. Hi there,\nThanks for working on this!\nHowever:\na) There are 9 lines of comments for 2 lines of code. I think this description belongs in the extended description of the commit message, not cluttering the code.\nb) Not sure what this is trying to achieve. AFAIK self is defined anywhere window is, and in web workers window isn\u2019t defined but self is, so I\u2019ve used that for any code that executes in both contexts. Perhaps I\u2019m missing the point as I\u2019m not aware of the kinds of polyfills you mention, could you provide an example?\nThanks!\n. Why not change the condition on https://github.com/LeaVerou/prism/blob/gh-pages/components/prism-core.js#L336  into something more robust then instead of trying to work around an overly loose condition? I.e. instead of checking if self.document is truthy, check if it\u2019s an actual HTMLDocument element (e.g. self.document && self.document.nodeType === 9). \n. Duplicate of #180\n. Thanks!\n. Hey, thanks. Is there any online demo I could look at?\n. Also, please give me a list of Prism plugins/languages/themes you have.\n. Thanks. Agreed on the idea, disagree on the specific line-height. 1.2 is way too small and looks ugly. 1.5 please.\n. Brilliant, thanks!\n. Perhaps it could be done with the Clipboard API. Not sure why it's useful though. \n. It\u2019s an existing API, so the privacy concerns would have been voiced in the standards group that created it, since implementors always participate in them. Current bad browser support is not an issue, as the feature is an enchancement. As long as the icon/link is hidden on non supporting browsers, we're good.\n. Hey, thanks for the contribution!\n@chrischares do you approve this patch?\n. Since @chrischares hasn\u2019t replied, I don\u2019t see why we should hold off merging. Sorry for the delay! Could you please pull and resolve merge conflicts though? Thanks!\n. Awesome, thanks!\n. Hey, thanks!!\nTo add a new language definition, you also need to modify components.js and add its info there (including your username). A minified version would also be nice, but not needed.\nCheers,\nLea\n. Thanks!\nI just realized the language id was objc. I think objectivec might work better. If people want something shorter, they can always alias it with just one line.\n. Thanks & sorry for the hassle, merged now! \n. Hello, is there an online testcase that demonstrates the issue? Thanks.\n. JSFiddle has had issues with Prism in the past, can you reproduce the problem outside JSFiddle as well?\n. Merged, thanks!\n. Thanks!\n. There never was such a plugin. I only remember some pull requests. Any more info?\n. Sure, that\u2019s what plugins are for. (of course it\u2019s always better to not depend on 3rd party tools, but we\u2019re not going to reinvent the wheel for no reason \u2014 we reinvent the wheel only when it results in shorter/more elegant/otherwise better code :) ). \n. Is this still only solvable with Flash or does the Clipboard API support this now?\n. Hi there,\nThanks for contributing!\nThe \"by Avi Aryan\" comments in the files aren't needed, that's what the \"author\" property is for in components.js.\nMinified versions would be nice, but I can generate them.\nMost importantly, PLEASE DON'T INCLUDE MULTIPLE CHANGES IN ONE PULL REQUEST. I can merge this now, but please, don\u2019t do this again. It\u2019s even in the readme. This is like Open Source 101, it\u2019s not just a guideline of this project. Why do people do this so much baffles me.\n. I generated them now.\n. Thanks!\n. Hi there,\nThanks. Have you tested it with other languages? Most people using Prism use it with CSS, HTML/XML and JS, so it\u2019s very important that it works well with those. Is there an online demo I could look at? The number of tokens seems insufficient, but it might just be my idea.\n. The more I think about this, the less I think this would be a good idea to add. Github syntax highlighting isn\u2019t particularly good looking. Why would somebody want to emulate it? Especially given that it\u2019s not even exactly the same as Github. \nI\u2019m thinking we should have a separate repository for semi-official themes and only feature the best ones on the actual Prism website. \n. Yes it would\u2026 If it\u2019s just a repo, I can make it, but it would be awesome if it also had a site with previews and even ratings! But who has time to build that\u2026 (I certainly don\u2019t sob :( )\n. Done! :)\n. What do you mean? I have added myself to the organization when I created it\u2026 Should I add you too? I hadn\u2019t seen you around for a while :)\n. Hi there,\nThanks so much, I wanted Haskell support in Prism for ages!\nI believe this is based on the way language definitions worked in the past, where entities needed to be escaped. Please pull any recent changes, look into existing grammars and change the grammar accordingly. It should only take a couple minutes, it\u2019s not usually a huge change :)\nThanks again!\n. Hi there, sorry for the delay. It seems there are still entity stuff, e.g. the ignore token.\n. Closing then.\n. It would be good if you did, but not necessary. Thanks!\n. Yeah, that example page is broken and should be completely recoded at some point. Use this instead to test out language definitions: http://prismjs.com/test.html\nSorry!\n. Hi there,\nThanks for writing this!\nHowever, I\u2019m afraid it\u2019s way too short and introductory; this material has been covered by other posts in the list. In addition, the grammar/syntax of the post could use some improvement, as it\u2019s currently a bit hard to read.\nBut thanks for supporting Prism! <3 :)\nCheers,\nLea\n. Thanks for working on this!\nWhy not overflow: auto so you don't get scrollbars when not needed?\nAlso, I\u2019m not comfortable with removing the shadows from the coy theme, especially not without hearing from @tshedor first.\n. Check the before and after screenshots. The shadows at the bottom are gone.\nProbably because they rely on overflow: visible to be displayed :(\n. Wouldn\u2019t this change prevent scrolling altogether since there\u2019s now no max-height?\n. Oh I see, I missed the readdition of max-height on <code>. Nice work! Merging!\nIf there are any issues, we can always fix them with future PRs.\n. Thanks!\n. Should I wait then? \n. Thank you so much!! Merged now.\n. Btw, I really liked your research here so I reviewed the rest of your contributions to Prism (replies to issues, commits etc) and I liked what I saw so I added you as a collaborator. Which means I trust you to fix stuff without sending a PR first, though if it\u2019s more than a few lines (especially in prism-core.js), I\u2019d still appreciate it. :)\n. Thanks!\n. Yay! :) Always great to get good feedback :)\n. It\u2019s super easy to add an alias. All you have to do is this:\njs\nPrism.languages.js = Prism.languages.javascript;\nI wouldn't mind a PR about this, as I think js is indeed very common for this.\n. For a certain definition of \u201cfixed\u201d. The alias is not added to the main language definition yet, but anyone could use it, just by running that line of JS after including Prism :)\n. I don\u2019t have the time, but if you want to, why not? js is a good, common one. Not sure if there are any other such examples. markup would benefit from a few aliases (html, svg, xml\u2026) but we need to be careful not to overwrite language definitions under these aliases. For example, someone might want to add an svg definition in the future.\nPerhaps we should add an alias method in core that automatically checks for that and creates an alias. \nSpeaking of which, at some point we need to have a resource on the website that lists these ids. People are often confused regarding what they should use. :/\n. Yeah, I\u2019d rather not slow down the general case to work around an edge case either\u2026\n. That looks like a parser of sorts. Of course it would be correct, but I doubt the performance will be decent, especially for larger snippets.\n. The problem with removing strings and using placeholders is that it doesn't handle all other kinds of nested tokens, and if we handle those too we're basically parsing the input, so we may as well do some proper lightweight parsing first.\nI wonder how much that would slow us down, actually. We could have a special kind of token that is nested (has a start and an end delimiter), then go over the input once and figure out what the groups are. Done right it might be a workable solution, perhaps. \n. Why not create a #prismjs room on freenode and just add an irc:// link instead of gitter? Does gitter have some advantage re: discussing code?\n. From a (very) quick look, it seems that this regex is really slow, like @apfelbox explained in another issue. Am I missing something?\n. ???\n. Is there anyone here that actually knows LaTeX to review this?\n. Merged, thanks :)\nA minified file would be nice too :)\n. Thanks Jannik!\n. Odd. I\u2019d swear I took care of that a while ago. Guess not. :-S\n. I\u2019m loving this change, especially with how little code you managed to make it happen! Thanks!\nI\u2019m inclined to merge it. @apfelbox what do you think? \nBtw, if we decide to merge this, @zeitgeist87 could you please update the documentation and add it to your PR?\n. Thank you so much!\nI\u2019m gonna go ahead and merge this, as I really like the idea.\nHowever, it would be nice if in the future we could have the secondary token indentifier as a CSS class as well. I think it could be useful for styling.\n. I\u2019m also not sure if a # is the best choice for separating the names. This is something we need to resolve on soon, before people start using the new syntax.\n. Another idea to allow multiple token definitions with the same token name could be to allow arrays as token values, with regular token objects. That would have the benefit of being more natural, i.e. somebody could try it even without seeing the docs. However, it would require more extensive code changes.\nThoughts?\n. I assume #321 undid this change. Shouldn\u2019t clike be changed to fix the comment issues using the new array syntax?\nAlso, is there going to be a new PR about the sub-identifiers per token? In that case, we should discuss syntax.\n. I\u2019m not sure either. Perhaps we should wait until the array syntax is used in a few language defs first, and see if it would make sense to style them differently. However, styling single line comments differently than multiline comments is not unheard of, even in editors. Same for different types of strings. For example, in Java or PHP double quote strings are quite different from single quote strings, so I can see a use case. And it makes the array syntax more useful.\nBtw, if we decide to add such a thing, we need to decide on its naming. I\u2019m not sure classes would be the best option, I just listed a few examples off the top of my head.\n. What does // do in latex? Can\u2019t find any docs. If it\u2019s comments, it shouldn't need aliases to be highlighted.\nAlso, I\u2019m not sure why all these functions are needed. The point of Prism isn\u2019t to always be 100% correct, it\u2019s to be simple, elegant, small and mostly correct. Syntax highlighting is not a mission critical use case where any errors are deadly. If getting something from 99% correct to 100% correct requires 20 lines of extra code, then the tradeoff is not worth it. Otherwise, we\u2019ll end up with the same amount of bloat as other highlighters, so what\u2019s the point\u2026\nFor example, why do we need matchLatexEnv? It looks like something that could be done in 1 regex. However, if there is significant need for a regex builder, it would make more sense to include it in the core. Perhaps something like what I did for dabblet.\nBtw, thanks for your continued effort @zeitgeist87 :)\n. Thanks for working on this!\nYeah, I really like the array syntax, glad we went with that. \nBut you\u2019re right, the diff makes it SO hard to review the changes. It\u2019s basically useless, I had to just view the whole file.\nLooks good to me, but I haven\u2019t tested it yet. Have you tested that it doesn\u2019t break the other languages?\n. > By the way, do you know if  pattern instanceof Array works with all supported browsers? \nIt works well for most cases. It won\u2019t work for arrays from another global object (e.g. an iframe), but not sure if that matters in this case. The most robust way is Object.prototype.toString.call(pattern) == [object Array], but that\u2019s ugly and verbose so I\u2019d rather avoid it if we don\u2019t really need to. There is also Array.isArray(pattern), but not sure if it works across all our target browsers.\n. If I\u2019m not mistaken, it seems that the additional CSS classes is a separate feature, not related with the arrays, right? If so, it would be better if it was in a separate PR, like every separate feature. Please people, keep PRs as small and targeted as possible. :) I really want to merge the arrays functionality ASAP, but not so sure about the multiple classes per regex. Specifically, I\u2019m not so sure about the syntax. I\u2019d rather keep the token names as the actual token names (since we solved the original problem by allowing for arrays) and allow for an additional property in token objects (potential names: meta, classes, subtoken etc). No strong opinion though.\nAs a side comment, I think it\u2019s better when documentation examples feature actual \u201creal\u201d use cases, rather than placeholders such as class0, class1 etc. As a reader, I\u2019d be confused as to how these can be useful.\nAnyways, thank you both so much for working on this!\n(hope the above makes sense, I haven\u2019t really gotten any sleep)\n. No need to be sorry, I\u2019m grateful for all your efforts improving Prism :) But thanks for splitting them!\n. Thanks!!\nThis is extremely nitpicky, but could you convert \"Array\" === _.util.type(patterns) to _.util.type(patterns) === \"Array\" (i.e. reversing their order) to be easier to read, more consistent with the rest of the codebase (and it\u2019s also a widespread code convention I believe)\n. LOL thanks @apfelbox, I had no idea they had a name, especially such an awesome name! :D \nYeah, it seems there are some advantages I hadn\u2019t thought of, but I\u2019d still favor readability on this one :)\n. Brilliant, merged! Thanks again!!\n. Hey there, thanks for the contribution.\nI suspect this breaks the shadows at the bottom, but I haven't tested it. Do you have a screenshot?\n. Yup, what @apfelbox said. Sorry!\n. Regarding the second issue, the line numbers plugin won\u2019t work with text wrapping and it\u2019s pretty tricky to make it do so. :/\nBtw, I get why you want to highlight specific lines, but why have the line number twice? Note to self & contributors: One of the two plugins needs to hide the highlight lines line numbers when the line numbers plugin is present. Not sure which one should be responsible for this. \nCCing @kuba-kubula (author of the Line Numbers plugin)\n. > perhaps the Line Numbers plugin should include some CSS to make sure text wrapping doesn't occur? \nPrism itself does that, it applies white-space: pre. It must be something in your CSS that makes the code wrap.\n. Thanks! Looks good to me, merged! The regex could be improved even further to make it more readable, but that\u2019s not high priority.\n. Not out of the box, but you could add generated content (line breaks and whitespace) after certain tokens pretty easily with CSS.\n. It depends on the kind of formatting. You\u2019ll probably end up writing a plugin anyway, as it seems impossible to add nested whitespace with CSS, especially since Prism does not distinguish between starting and closing tags (and even if it did, you\u2019d have no way of knowing what closes what).\nOh well, it sounded like a cool idea at first :/\n. Brilliant, thanks!!\n. I don\u2019t think things like token-bold would be a good idea. It\u2019s basically glorified presentational classes.\nHowever, I do think this is useful and I mentioned a few use cases in another thread: Styling single line comments differently than multiline comments, styling certain types of strings differently (e.g. chars vs strings in Java) etc.\n. I\u2019m leaning towards adding the functionality. After all, it\u2019s very little code to add. \nHowever, I\u2019d like a discussion about the name, with more opinions. I\u2019m not super fond of subtype.\nAny other ideas? API changes are hard and backwards incompatible, so I\u2019d rather put some more thought into naming things. (Keep in mind that there are many Prism extensions out there in the wild, we can\u2019t just edit the ones in the repo and conclude that an a change didn\u2019t break anything.)\n. Thanks! I\u2019m hoping for some input from others about it. @apfelbox what do you think?\n. It\u2019s not exactly an alias though\u2026\n. Anyway, this needs to move on and it\u2019s been open for too long. If we can\u2019t think of a better name than alias, let\u2019s resolve to that & merge.\n. Um, you realize that JS regexes have native lookahead, right? :p \njs\n'foob'.match(/fo+(?=b)/) // [\"foo\"]\n'foo'.match(/fo+(?=b)/) // null\nThe lookbehind flag is a hack to work around the lack of native lookbehind in JS.\n. Hehe no worries! :)\n. LGTM, thanks :)\n. Hi there, thanks for working on this!!\nI have to admit I\u2019m not very fond of the idea but I need to review it more carefully later. \nThe main question is: Have you done any performance testing? My hunch is that it would be considerably slower, but until we actually test, it's just conjecture. Under no circumstances should this be merged without any perf testing.\nAlso, even if this is merged, the name checkMatch needs to be changed. It\u2019s clumsy and inconsistent with the rest of the API. If we decide this is a good idea, we should then discuss naming.\nHopefully I can find some time to properly review it tonight.\n. Hi there,\nThanks for your efforts improving Prism!\nHowever, I\u2019m afraid I\u2019ll have to reject this PR. Not supporting IE8 was a conscious decision to avoid cluttering the code with exactly this sort of thing. I understand it\u2019s a tiny polyfill, but merging it sets a slippery slope precedent.\nYou can help support IE8 by improving the (yet unfinished) IE8 plugin, and add the polyfill there. :)\n. Also, I just realized this is a wrapper, and not a polyfill. Why not make it a polyfill?! Then the original code doesn\u2019t have to change at all.\n. Hi there,\nI\u2019m a bit confused, does this cancel #331? Should I just review this and not that one? Or are they independent?\n. Also, you don't need to add documentation before we decide to accept a PR, as it will be wasted effort in case it doesn\u2019t get accepted. If it does, I\u2019ll ask you to add documentation then :)\n. notInBetween is suboptimal: Every nested structure needs to \u201cknow\u201d about every other nested structure (unless I'm misunderstanding it). It would be much better to just provide the start and end token and let Prism figure it out\u2026\n. Thanks for working on this!\nAdding a new method is really clumsy though. I think it would be better to do this with an optional 3rd argument on add() that accepts an index that would be resolved relative to the others. If that\u2019s too difficult, then just an array index (you can use Array#splice() to add an element at a specific index). push() would still be the default if the argument was not provided.\nSomething like:\n``` js\n    add: function (name, callback, index) {\n            var hooks = _.hooks.all;\n        hooks[name] = hooks[name] || [];\n        index = index || hooks[name].length;\n        hooks[name].splice(index, 0, callback);\n    },\n\n```\n(haven't tested it)\n. The latter, an index that has nothing to do with the array index. It could be 9999, it could be negative etc. That would be the best solution I think, but more complex to implement and the use case for it isn\u2019t that strong, so it\u2019s probably better to implement the easier array index method I outlined above.\nDefinitely not worth more than 1-2 extra loc for the relative index approach.\n. Andreas, thanks but this is exactly why I said \u201cit\u2019s not worth more than 1-2 extra loc for this\u201d. The use case is just not common enough to warrant this much extra code. I\u2019m sorry, I hate not accepting PRs that people put effort in, but I said this just one message above!\n. I meant that I\u2019m not sure the use case warrants this kind of complexity. Lines of code are just a heuristic. It\u2019s pointless to try to minimize loc by reformatting code, that\u2019s like trying to follow the letter of a rule but not its spirit :)\nAnyway, more importantly, why all this code in the line numbers plugin? I thought the issue would be solved if the callbacks are just executed in a different order?\n(btw I\u2019m getting ready to move to the US this Sunday, so I\u2019m really busy this week & the past few days, this is why I\u2019ve been slow with other PRs and have very little time for github)\n. It\u2019s great that you were able to solve it without Core changes! Thanks!\nBtw the line numbers plugin should always be last anyway, like all plugins. That\u2019s how the downloader builds it.\nThis PHP language definition is quite a mess and has been so from the beginning :/\n@milesj what do you think of this change? Is there any way we could improve it further? Otherwise I\u2019ll merge.\n. Yes, I think it\u2019s fair to expect plugins to always be after languages.\n. Thanks, merged! If @milesj wants to improve it further, he can make additional commits.\n\nAll the effort for nothing ;)\n\nThe effort is never for nothing ;)\n. Hey, thanks! Could you elaborate why this is needed? (I haven't worked on this part of the code for ages)\n. Have you tested that the fix works?\n. Merged, thanks!\n. Can\u2019t reproduce this one either. \nCould you test if it happens with the non-minified version too?\n. Closing, see #425\n. Can anybody else reproduce this? I can\u2019t. I just tested and it seems to work fine in Chrome & FF at least.\n. Nice to know! Thanks for debugging @strandedpirate!\n. Closing, see #425\n. FWIW I do have something in the works ;)\n. Yes, but no promises on when it will be available. I'm doing it as a hack for my talks for now, then will release once it's at a stable stage.\n. For now, you could look at CodeFlask\n. You need to explicitly specify the branch for now, like prism#gh-pages, sorry!\nClosing as duplicate of #180 #231.\n. Ouch, thanks!\n. Hey there,\nYou can read how to add new languages here: http://prismjs.com/extending.html\nIf you know regexes, it\u2019s really easy!\n. However, it should be noted that you should try to be conservative about the tokens you add.\n. It\u2019s a tradeoff. If it\u2019s possible to use existing tokens it\u2019s preferred, but if existing tokens are way too far from the semantic meaning of the tokens in your language, it\u2019s better to add new ones.\n. language-none is a hack, it shouldn\u2019t needed. If it is, that\u2019s a bug with Prism.\n. In general the downloader was written back at a time when Prism only had like 4-5 languages. It\u2019s very inefficient for the current amount of components.\n. To remove the text fields we need to test if the download buttons work in every browser that Prism supports (IE9+ etc).\nBtw @apfelbox thanks so much for all your help!! I\u2019m currently starting at MIT, moved to Boston and I won\u2019t be very active here until I settle in.\n. Thank you both :)\n\nWe should throttle the calls and .terminate() all still running web workers.\n\nThat\u2019s sounds like a great first step :)\n. Yes, this shouldn't happen. And it doesn\u2019t when I try it here: http://prismjs.com/test.html\nPerhaps something in your code? Can you reduce it?\n. These colors need to be tweaked a bit at some point (hopefully when I find some time). One of the reasons people use Prism is that it looks better than other highlighters.\nAlso most of these themes already have a red and a green hue, can\u2019t we use those?\n. I didn't even know we had a .gitignore here (I also use a local one). Anyways, +1 from me too.\n. Brilliant, thanks!!\nSo now we only need a new Deleted hue in Funky & Dark and an Inserted one in Tomorrow, right?\n. No, you shouldn\u2019t be required to get it manually. @lgiraudel ?\n. I\u2019m not comfortable with the idea of aliasing tokens to completely irrelevant tokens just for styling. I thought aliasing was for metadata or subcategories, or tokens that could be considered similar. If there\u2019s NO existing token that could fit, please just add a new one (to one of the existing colors).\n. There\u2019s definitely the need to solve this in a generic way. It\u2019s troubling me since the beginning, but until now others hadn\u2019t noticed the problem :P\n. In general, please people, do not submit multiple changes on the same PR. It\u2019s also in the readme:\n\nPlease try to err towards more smaller PRs rather than few huge PRs. If a PR includes changes I want to merge and changes I don't, handling it becomes difficult.\n\n(Btw @apfelbox we need to change the readme to mention that contributors can also merge PRs, as it still says that merging PRs takes ages because it was written when only I could do it.)\n. Sounds like a bug to me.\n. Closing, see #425\n. The code could be a bit more elegant (e.g. by using a ternary operator in the 3rd arg) but LGTM for now, especially given that this bug is pressing! Merging. Thanks @zeitgeist87 for working on this!\n. I thought it was obvious initially, but it confuses so many people that we should add it to the docs I think\u2026\n. Thank you Jannik! We badly need tests\u2026\n\nSent from my iPhone. Please excuse weird typos and/or terseness.\n\nOn 22 Sep 2014, at 09:04, Jannik Zschiesche notifications@github.com wrote:\nBoth valid points. We probably need a clean up session in all language definitions.\nI am currently working on an easy and extensible test system, which would allow us to do automated regression testing (which is required for a bigger cleanup effort). Will post an update here as soon as I have a working example.\n\u2014\nReply to this email directly or view it on GitHub.\n. I think we should just find a way to improve the API. The cases where you want this to run immediately are way more than the cases where you don't and I really don't want to risk confusing the first group. A default plugin isn't a bad idea, but it's difficult to notice for those who want to disable it, and I also want to avoid too much fragmentation. Prism is already very fragmented. Of course, if we can't think of anything, we can go with that.\nBut yeah, agreed that the attribute on the script tag wasn't a great idea. Any ideas to improve it?\n. I have no idea what you just said in your first paragraph. Also, what is PRISM_JS_MANUAL and why should there be any results on it?\n. @apfelbox was suggesting that the auto-highlighting should be a separate plugin, not the disabling of it.\n\nBreaking existing code is a concern indeed with that idea. If people try to redownload Prism from the link on top of their files, auto-highlighting will break as the link will not include the plugin.\n. Sure:\njs\nPrism.languages.html = Prism.languages.markup;\nIf they\u2019re as common aliases as the above, I\u2019d welcome a PR.\n. Hey, first off, thanks for contributing to Prism!\nWhy is JSON needed? Can\u2019t it be highlighted as JS? If anything, it should inherit from JS and override what\u2019s needed (mainly properties I guess. But then again, why not add that in javascript too?). \nEven ignoring the above, the definition is suboptimal: JSON does not allow single quoted strings, the null & boolean tokens don\u2019t need both spellings (they could do with the i flag, which would also catch things like Null.\n. See my comments on #369, they remain valid.\nBtw you can update pull requests, you don\u2019t need to close them and send a new one. :)\n. > By the way, is there a way I can safely rename my branch, because I get a build warning email with every commit because the branch is still named gh-pages.\nThat\u2019s a known issue that will eventually be solved once we separate master and gh-pages\u2026 That would also satisfy the bower crowd. The problem is that currently, I'm not sure how to make such a split in a DRY manner.\n. > If you do want me to move the JSON to a javascript extension, you'd have to tell me how to remove the things it inherits that it doesn't need. \njs\ndelete Prism.languages.foo;\n\nI just checked and JSON would only inherit 2 definitions (number and boolean), which really doesn't seem to make it worthwhile.\n\nYou\u2019re right, it\u2019s not worth it just for two tokens, one of which is rather simple. @apfelbox what do you think?\nAlso, IMO we should merge JSON and JSONP, either by having both on the same file, or in the same language definition too (any opinions?)\n. > Prism is a forgiving highlighter, no merciless linter\nExcellent point. This should be in all bold on the contributor readme I think :p \nI think the main issue between sharing strings in these two defs is that JSON doesn't allow single quoted strings (which also makes its regex easier, as no backreference is needed)\n. What happened here? Why did this stall? \n. Holy crap, I\u2019m so sorry for taking this long. \nIt looks fine and can always be fixed later. However:\na) We need a minified version and an entry in components.js otherwise it won\u2019t show up anywhere.\nb) A few examples would be nice, but not required. @Golmote do we have any docs for doing that?\n. @CupOfTea696 Reversing the order of the number and string tokens shall fix this. Please refer to the JS language definition for the optimal order.\n. Sorry this has taken so long. I just took a look and added a few comments.\n. Merged, thanks!\n@darobin I think a change to accommodate JSON-LD would be awesome!! Please submit a PR for it, I would love this.\n. @drodil Any merged PR is immediately available to the live site.\nBtw, @CupOfTea696, I noticed you made this enabled by default. While I did merge it to include it in Prism, I do not agree with it being enabled by default. Could you or someone else please send another PR to remove option: default? \n. Thank you Andrea!!\n. +1 for no version numbers in the aliases. The file highlight plugin is a special case and could perhaps define its own aliases. \n\nSent from my iPhone. Please excuse weird typos and/or terseness.\n\nOn 22 Sep 2014, at 08:31, Jannik Zschiesche notifications@github.com wrote:\nI don't think that we should include version numbers in the aliases. There probably won't be any difference between html and html5 ever, so it is just redundant.\nOne could argue, that these mappings could be added to the file highlighting plugin, because php4, php5 are all (more or less) common file extensions for php (for example).\n\u2014\nReply to this email directly or view it on GitHub.\n. > I guess I'll remove them then. But I'm keeping them in my own build :p\n\nMay I ask why? Just curious. :)\n. I still don't think they should be in the show language plugin. The cases where you want to show a version too are pretty rare. The only place where we might need them is file highlight, if they also serve as file extensions.\n. Actually, just escaping < is sufficient. You don\u2019t need to escape > as well.\n. Thanks! Any screenshot/demo? Also, the indentation seems off, please verify that you\u2019re using tabs.\n. What\u2019s the point of highlighting selectors e.g. green if parts of them are going to have other colors though? Perhaps it would be better if it was shades of the original token color, e.g. lighter/darker green?\nWhat do others think?\n. Thanks!\n. Could you link to an online testcase? Is it reproducible in the test drive page? Which language definition is this about?\n. Have you tried opening an issue with Ghost?\n. Closing, see #425\n. Thank you! :)\n. Damn, so it's not Prism that changed, it\u2019s the regex. :(\nThanks @Golmote, nice find!!\n. The trailing line behavior is how HTML preformatted text works, although I wouldn\u2019t be opposed to doing something about it, as long as there\u2019s an easy opt-out.\nHowever the overflow thing is definitely a bug. Which theme is this? Can you reproduce with other themes as well?\n. Hey there,\nThanks for writing this! However, as I discussed with Hugo, its target group is too niche to be included at this point (in the future where we have a more scalable download page, I won't mind including niche languages). I told him it would be nice if you submitted a PR to add it as a link on the website (for now). Sorry for the miscommunication/confusion!\n. No, as it's not a plugin. It\u2019s not a tutorial either. Hmm, I think we need a new section between the two :) Don't worry, it won't be just for this, I\u2019ve seen lots of similarly niche Prism language definitions around the web that would fit there! :)\n. Third-party language definitions perhaps? But I\u2019m open to suggestions :)\n. Merged, thanks!\n. Thanks!\nWhy don't we just remove it then, by replacing it with ''?\nBtw, have you tested a good variety of browsers?\n. @Golmote The way we're handling the initial line feed is terrible (sorry, I think it's my fault) and is causing problems in dabblet currently (try pressing enter in the beginning of your code). I think we should remove that.\nAs for the last line break, the issue is that browsers don't display that last line, so we shouldn't calculate it. This is not the same as the initial line break, which is displayed (which is why I was \"conveniently\" removing it).\n. Not sure, I\u2019ve never used bower and I didn't write this file myself. What is main supposed to point to? The main what?\n. I guess @apfelbox is right then, though prism-core.js doesn't do anything useful by itself.\n. The prism.css and prism.js file that this example refers to are the ones obtained from the downloader, not the ones the website uses.\n. I have no idea why I used themes/ there, it\u2019s rather confusing. Unless I\u2019m forgetting something, it should probably be changed.\n\nThe other thing I'm noticing is that it seems like prism.js at the root level of this repo is generated from the gulp file, which means it's the custom build of prism.js used in the website and only contains a few languages.\n\nYour understanding is correct.\n\nOne idea for a good JS candidate for main is to create a compiled JS file of all the languages. Then when somebody uses bower to grab Prism they can use the main property to easily grab the two things they need to use Prism in their project.\n\nThat\u2019s a great idea! Something like prism-all.js, that would be generated by gulp. What about plugins? I guess no plugins, right?\nAlso, there are some pretty obscure languages in the repo (e.g. NASM), maybe those shouldn\u2019t be included\u2026\nCan bower display a warning somehow that the filesize is huge that way?\nIt seems like quite a handicap that bower can\u2019t deal with modular libraries\u2026\n. Agreed that 53KB is way, way too much for a syntax highlighter. \nI\u2019m not so sure HTML, CSS and JS should be the most common case. It probably currently is for Prism, because:\n1. It\u2019s more well-known in the front-end dev community\n2. We are visiting such websites more so we notice it more there (confirmation bias)\n3. These language definitions are generally more taken care of, so it becomes a catch-22.\nHowever, for syntax highlighters in general, I doubt these languages are the most common and we shouldn\u2019t aim for Prism to remain confined in the front-end dev bubble.\nBtw one can get a list of all languages by running Object.keys(components.languages) in the console, on the Prism website. These currently are (ignore \"meta\"):\njs\n[\"meta\", \"markup\", \"twig\", \"css\", \"css-extras\", \"clike\", \"javascript\", \"java\", \"php\", \"php-extras\", \"coffeescript\", \"scss\", \"bash\", \"c\", \"cpp\", \"python\", \"sql\", \"groovy\", \"http\", \"ruby\", \"rip\", \"gherkin\", \"csharp\", \"go\", \"nsis\", \"aspnet\", \"scala\", \"haskell\", \"swift\", \"objectivec\", \"autohotkey\", \"ini\", \"latex\", \"apacheconf\", \"git\", \"scheme\"]\nI believe the most common ones are:\njs\n[\"markup\", \"css\", \"clike\", \"javascript\", \"java\", \"php\", \"c\", \"cpp\", \"python\", \"sql\", \"ruby\"]\nSuggestions welcome (but feedback of the type \u201cI believe X should be included because I think it\u2019s common\u201d with no justification only counts as a vote (i.e. it makes no difference by itself, unless many people (which in this context would be around \u2265 3 I guess) make a similar statement).\n. I\u2019m not sure if popular languages directly translates to popular syntax highlighting use cases, as not every language has the same amount of online resources devoted to it\u2026\n3 was arbitrary, as 2 feels too little. But sure, why not.\n. Nice, thanks!\nCan you add a minified version as well?\nAlso, there's no point in having tokens like:\njs\ntokenname: {\n    pattern: regex\n}\nif there are no other options in the {...}, it should be just:\njs\ntokenname: regex\n. Thanks! Why does keyword, builtin and function need to follow an opening paren? (I'm not very familiar with Scheme\u2019s syntax, sorry)\nPS: It didn't notify me, so thanks for posting.\n. The matching sounds a bit fragile as it currently stands, but since we don't have a Scheme language definition yet and we should have one, I\u2019m gonna go ahead merge. As always, anyone could further improve this, if they want. :)\nThanks for writing this!!\n. Hi there,\nThanks for working on this. Could you please send a PR? It\u2019s very hard to review the code if it's just in a post like this, with no diff, especially given that my time these months is extremely limited\u2026\n. What's the use case for this? If Prism was called synchronously, wouldn't you also want the callback to be called synchronously?\n. Yes, but when web workers are not supported, Prism will be executed synchronously as well, so it makes sense for the callback to be too. Non?\n. What\u2019s the point of an async callback if Prism itself CANNOT be executed in a worker because there is no worker support?! How is that consistent? How does it benefit anyone\u2019s code if the callback is executed in a timeout of 0? The whole point of async is to offload processing to workers to speed up highlighting longer code. If workers are not supported, there is absolutely no point in pseudo-asyncing it just to match some weird notion of \u201cconsistency\u201d. Theoretical purity can always be argued, but if you have any real use cases for this change, sure, let\u2019s talk about it. Otherwise, if the only argument is (your idea of) \u201cconsistency\u201d, I\u2019ll be closing this.\n. Not sure I follow. You\u2019re not even using the callback parameter in these examples! And what does expect() do exactly? \n. > Thanks for creating such a great library!\nYou\u2019re welcome!\n@apfelbox thanks for such a detailed reply!\n. There is generally no reason to escape >: As long as < is escaped, there are no parsing issues. Could you provide more details about your issue, including examples? I\u2019m having trouble understanding what's going on.\n. Sh*t, I broke Prism with yesterday\u2019s changes! Will fix later today, thanks so much!!\n@apfelbox any chance you could take a look, as I'm busy for the next few hours? It should be easy to fix...\n. Closing, see #425\n. What I was trying to do is add the class language-css etc to inline CSS, to make it easier to style CSS even when it's inline in HTML. Is that possible at all with our current implementation of alias? I thought that was what it's supposed to do?\n. Sure!\n. Merged!\n. Um, not sure I follow why highlightElement doesn\u2019t suffice in this case?\n. Yes, that's a known issue...\n. That\u2019s fine, I can merge it. I was just waiting for your feedback @lgiraudel :)\n. Where is the extra line added? Do you have an online example demonstrating the issue?\n. LGTM, but I\u2019ll leave it open in case @apfelbox can take a second look.\n. Sorry, I thought this had already been merged. Done now, thanks!!\n. Merged, thanks! Though several regexes could be improved, especially numbers (see other language defs). @Golmote perhaps you could help?\n. Same as the other: Thanks, but needs to be added to components.js!\n. Thanks! Could you please pull and resolve merge conflicts? Because I just merged your other PR, now this one has conflicts.\n. Merged, thanks!\n. LOL nice, thanks! You forgot to add it to components.js :)\n. Thanks, merged!\n. OMG, this is so great, it does have the filesize! Then it should be pretty straightforward!!\nAbout the building part, I guess we could try that and see how it goes. Presumably most people won't include too many components in their bundle, though I don't really have any stats for that\u2026\n. This is an inherent limitation of regular languages: Any language with nested structures is not recognizable by a regular expression.\nHowever, perhaps we could get around this by implementing some basic parser functionality. Also, languages with limited nesting are regular I believe (although that doesn't mean that any regexp for them would be sane).\nI'm not opposed to trying anything to solve this (which is IMO Prism's biggest flaw), but please keep the design goals of Prism in mind: It needs to be easy to extend (i.e. language definitions need to have an EASY and straightforward syntax, at least for someone very familiar with regexps) and it needs to be fast and small. These goals are more important than absolute correctness.\nThis means that a proper parser is out of the question: It's slow, incredibly hard to write and it entails craploads of code. However, perhaps we could add some sort of BNF-like extension to language definition syntax.\nSo far every attempt to fix this problem has been rejected because it violated one or more of the above goals. Of course, it's all relative: some decrease of speed is ok, some extra complexity is ok, some extra code is ok, but the tradeoff needs to be worth it.\nBtw keep in mind that even if you fix the issue for some cases (without too many tradeoffs), that\u2019s still a big improvement! Again, absolute correctness is not the goal here, Prism is not a linter.\n. No problem, if it was that broken! :)\nCould you explain what this ___HANDLEBARSXX___ does, as Polymer seems to have the same thing?\n. Looks good to me. Conflicts need to be resolved.\nHowever, for MD, it might be a good idea to apply some formatting instead of just highlighting it. E.g. make bold tokens bold, make italic tokens italic, Make headings bigger, de-emphasize the MD symbols to make the content stand out (like Byword does) etc. \n. Nice!\nBtw, we can fix some of the issues by:\n- Giving priority to MD over HTML highlighting\n- Adding nested rules after we define the grammar, for some common cases\n. If commenting is the main conflict, we can add it as a separate token. But if cases like the second are common, then probably not a good idea. I\u2019m really not sure :(\n. Then we should probably add a comment token early on, referencing HTML\u2019s comment token.\n. Sure! It\u2019s not perfect, but then again, what is :)\n. Thank you so much for working on this! Is there any demo online so I could test it out before merging?\nThanks!\n. Finally found some time to start reviewing PRs, thanks for your patience! Great work, thank you so much!! I merged it already, but regarding the error handling (if you have time to work on it), it would be better to print a message in red above the download area, since I assume people won't actually read the code. Yes, this shouldn\u2019t happen, but then again, every app is full of examples of behaviors that \u201cshould never happen\u201d and we should plan for it :)\n. Yup!\n. Merged, thanks!\n. Amazing work, thanks!\n. Thanks, merged!\n. Hey, sorry for the huge delay! Hope my feedback is still welcome :)\nI'm a little concerned that this doesn't seem to play nice with Line Numbers. The data-start attribute is meant to designate the starting number, not to remove lines. What if someone wants to use data-start for its intended purpose?\nI like the feature, but I don't see why we need to use an attribute that conflicts with the Line Numbers attribute but does different things AND add Line Numbers as a dependency. I'd suggest using a different name, such as data-trim-lines or data-line-clamp or something along these lines (pun intended), and not require the Line Numbers plugin. The syntax could accept values like 5 to 7 (absolute, show lines 5 to 7) or -1 to -5 (relative: chop 1 line from start and 5 lines from end).\nI'm also not convinced about the regex syntax for now. We could merge in the simpler, line number based syntax, and evaluate different syntaxes in the future, based on usage.. This looks very promising, thanks so much for working on it! (and on the other PRs, esp. the one about the download page)\nI\u2019m gonna need a few days to be able to review any outstanding PRs (except the most simple), as I\u2019m crazy busy until Monday (and after Monday, I\u2019ll need a couple days to relax from being super busy). Sorry for the delay, and thanks again for working on Prism!\n. Nice idea.\nHave you measured what the performance hit is for this? It would just be a matter of timing the highlighting of a few really large chunks of code (be sure to use performance.now() where available instead of Date objects), though we need to add some sort of infrastructure for perf testing in the future (which could be as simple as a generalized version of that), as this issue arises in most Core edits.\nI\u2019m very skeptical about the API (competition: \"enclosing\"). First off, it\u2019s basically a toggle, so no need for a value (a text value is deceiving; it implies there are other possible values as well), it should just be a boolean (with an appropriate name \u2014 not competition: true!). However, even with the current design, I would have no clue what competition: enclosing meant when reading a language def and whether I needed to include it in mine or not (assuming I was a random dev, new to Prism, trying to hack together a language definition). \nIdeally, I think there should be a new type of token definition, that uses start and end properties instead of pattern. This is closer to our mental model of how these work, and essentially any token with a start and end exhibits this problem, except the ones very limited in their contents (there should be a property about limiting contents too, with the default being [\\s\\S]+? I guess. This way, the definition is not only specifying which patterns have this problem, but also provides a convenient shortcut and is more readable too!\nWhat do you think?\n. Good point, I was thinking \\n but yeah, the line break is not actually matched, so it should be a lookahead. On the other hand, that seems like a reasonable default for the end property, so if we don't find a better default for it, then we could use that (and then we don't need to specify it in single line comments). :)\n. @Golmote: If the dev gives us the escape character too (which would default to \\, but other languages may have different escape characters), can\u2019t we build the necessary regex ourselves in the background?\nI really think the flag idea is confusing for devs trying to hack together language definitions. Prism\u2019s priorities are: 1. API & code simplicity 2. Performance 3. Small code size, in that order.\nAlso, have we done any performance comparison between this compared to the current version of Prism that fails on such nested structures? A small performance hit is acceptable, but if Prism has to become e.g. 4 times slower to become a bit more correct, it wouldn't be worth it. It's a tradeoff.\n. Wow, @Golmote you never cease to impress!! Nice work!!\n. Thank you so much for this summary!!! Like I said in another thread, I'm basically off until mid next week, but just wanted to thank you for this effort. You rock!\n. @vkbansal Yes they are, but you\u2019re not helping in any way by asking when they will be merged on a dozen PRs and then complaining here that PRs are overloaded. You\u2019re only making everyone feel bad. If you want things to move faster, contribute more, like @Golmote has been doing. \n. I feel offended that what you understood from my message is that I got offended.\nBtw, even if I was offended \u201cI\u2019m sorry you were offended\u201d is a non-apology. Keep that in mind for when you actually offend someone. :P \n. Good to go for merging, but you need to resolve conflicts (in components.js)\u2026\nThanks for this!\n. I'm fine either way, up to you @Golmote!. I\u2019m a bit uncomfortable with the whole replacing content with __SMARTYXXX___ tokens and then adding content back etc, but whatevs, better to have an imperfect language definition than none at all. Feel free to merge conflicts & merge this.\n. LGTM, thanks!\n. Apart from the notes re:arrays, looks good to me! Thanks!\n. Looks fine to me, but I can't merge: there are conflicts. @Golmote, could you please fix the conflicts and then merge the PR? Thanks!\n. LGTM, see note re:filters.\n. LGTM, see comments for minor edits. Thanks!\n. LGTM. Not sure about the quoted-atom vs atom bit, could you explain that decision a bit?\nThanks!\n. I see, that makes perfect sense :)\n. LGTM, thanks!\n(merge conflicts tho)\n. LOL, not sure about this one. On one hand, we don't really lose anything by adding it, on the other hand, who really needs to highlight LOLCODE?\n. Ok, let\u2019s add it, it\u2019s always good to not take ourselves too seriously :)\n. Good to go for merging, but you need to resolve conflicts (in components.js)\u2026\nThanks for this!\n. There are also merge conflicts on this one\u2026\nActually, since it seems that you clearly like working on this project and I like your code, I just added you as a collaborator :) So feel free to merge this PR and the others that I said are OK yourself. \nAlso, in the future, feel free to make smaller commits without sending a PR first.  (please still send a PR for substantial changes) You could also merge small PRs if you want :)\n(also the policy is that we usually merge new languages even if their code is subpar (not that this one is!!), as it's better to have something that sorta works, so that the community can improve on it, than nothing at all, so feel free to merge those too if you want, unless they\u2019re deviating too much from the usual lang. definition code \u2014 e.g. the Polymer one deviates too much and I would want to review it first)\n. Looking good, thanks!\n. That makes sense! Should there be a visual separation? I.e. groups labeled \"popular\" and \"other languages\"?\n. Not necessarily. We just need to insert a label above the first language in the 2nd group. This could even be done in the CSS, as the 1st language in the 2nd group won't change very often. It's a bit hacky, but saves us from having to change a lot of code.\n. In the CSS selector, by the data-id attribute. No components.js edit, but you can see why it\u2019s hacky :)\n. > But really, the code used to iterate over might need some change anyway. Currently for .. in is used to traverse through the language keys, but the ECMAScript spec never promised the ordering of the iteration (although implementations tend to result in ordered keys)\nGiven that every implementation preserves the order, it\u2019s a de facto standard that I would be extremely surprised if a browser violated. In fact, a few years ago when a certain didn\u2019t preserve the order it was considered a bug and was promptly fixed.\n. Merged, but you didn't need to send a PR for that. :)\n. Nice! When it\u2019s more stable, we should probably link to it from the Prism homepage :)\n. @vkbansai, there aren't that many differences between PHP regexes and JS regexes, as long as you\u2019re using the Perl-compatible regexes (preg_*) and not the POSIX ones (ereg_*). (at least from what I remember, it\u2019s been a long time)\n. - That\u2019s true for JS as well, if you use the regexp constructor. It has to do with whether you\u2019re providing the regex as a string or not.\n- Yeah, but you can use a different function to emulate it IIRC\n- That\u2019s trivial to find & replace\n- IIRC any symbol can be used, the idea is that the first symbol you use also denotes the end of the regex. # is just a convention (unless PHP has regex literals now).\nSo far, none of these points prove that a conversion script would be impossible (or even hard) to code.\n. Nice idea! Funnily, I thought of suggesting something like this yesterday. What about arrays that contain e.g. 5 regexes and 1 object? Then the 5 regexes could still be combined, non?\nAlso, it would be nice to allow strings too, especially for the various keywords in languages. Then they could all become arrays of strings, and when inheriting from a language we could just push the new keywords, not override the whole thing.\n@Golmote could you please take a look to see if this can be done with less code?\n. What happens with regexes that have different flags? They shouldn't be combined. \n\nSent from my iPhone. Please excuse weird typos and/or terseness.\n\nOn 22 Dec 2014, at 21:03, Andreas Rohner notifications@github.com wrote:\nI have updated the PR. It can now turn the following definition:\n'test': [\n    'key.1', 'key.2', 'key.3', /regex1/, /regex2/, { pattern: /regex3/ }, /regex4/, 'key.4',\n],\ninto this:\n'test': [\n    /(?:\\b(?:key.1|key.2|key.3)\\b|regex1|regex2)/,\n    { pattern: /regex3/ },\n    /(?:regex4|\\bkey.4\\b)/\n],\n\u2014\nReply to this email directly or view it on GitHub.\n. Sorry for the (possibly) silly questions, but I don't have time to properly dive in the code right now and find out for myself\u2026\n\nIf we have e.g. this:\njs\n[\n/some-regex/i,\n/some-regex2/m,\n'some string',\n/some-regex3/im,\n/some-regex4/m,\n'some other string',\n/some-regex5/i,\n{ ... },\n'string', 'string2'\n]\nhow will it be combined by the existing algorithm?\nAlso, we're optimizing grammars lazily, right? (i.e. when they're actually used to highlight something)\n. Thanks! Why wouldn't the two i and the two m regexes be combined, since we're messing the order anyway?\n. We only need to keep a hash of 4 items max depending on their flags { 'm': [..., ], 'i': [..., ], 'im': [..., ], '': [..., ] } for every array, then at the end combine everything in each of those 4 arrays. Not sure how this was coded and it ended up only working with consecutive stuff (which is not as useful), but I'll try to take a look soon.\n. Strings definitely need to be supported, as my plan for this is to convert keywords in languages to arrays of strings and then push/remove as necessary in inherited languages instead of overriding the entire list to add/remove a few.\nBtw happy new year!!\n. Happy new year and thanks for working on this!\nPlease do not merge this or the competition PR before I have time to take a proper look, as these are very substantial changes.\n. What happened with this? It was a nice improvement. :/. This looks great, I love it!! But since you said not to merge, I won't merge :)\n. Yeah it looks fine! You've been following the style of the rest of the page anyway :)\nThe only thing that worries me is that people need to scroll down significantly to see the list of languages. But I can't think of a way around it, it doesn't make sense to put it on top, does it?\n. Yeah, exactly, it is a bit weird :/\n. Yup! It's much better than it used to be.\nThanks so much!!\n. Yay!!! Thank you so, so much for everything and I hope you have an amazing holiday!!!\n. Could you include an example of what you mean by \u201ccorrectly\u201d? Thanks for working on this!\n. So you fix this by terminating the string where the parentheses start/end? That doesn\u2019t seem correct.\nIt would be better to add a token inside the string (see the API docs about this) with the name variable.\nThis way people will also be able to use selectors like .string .variable to highlight interpolated variables differently. :)\n. Thanks!\n. Overall looks nice, see a few minor comments.\nThanks for adding examples too!\nPlease fix the merge conflicts?\nRe:git, once I merge this, feel free to submit a PR to make it dependent on diff. It makes sense. Just because you don\u2019t own it doesn\u2019t mean you can\u2019t suggest changes to it!\n. Looks like this is so common we should add it to the Core. It would be as trivial as one call to .trim() or one .replace(). Is there any legit use case where somebody might want a newline in the beginning? @Golmote, thoughts?\n. Why would anyone want a line break at the end?\n. I think instead of the data-manual attribute, we should support a data-config attribute that would accept multiple whitespace-separated tokens to toggle certain things on and off. One of them could be to opt-out of this. Would that be an acceptable solution @haarg ?\n. @haarg makes a good point: The file highlight plugin should somehow disable this behavior, as the accidental new line issue is not present there anyway.\n. Because it\u2019s functionality that a) requires little code and b) is needed by a very high percentage of our userbase.\n. Options are not an alternative for sensible defaults. That\u2019s user experience 101.\n. > But not when it breaks your current working code for existing userbase. That's software design 101.\nDepends on how much of an edge case it is, otherwise nothing would ever get fixed because somewhere, someone always depends on that behavior. That\u2019s Common Sense 101.\n. The more I think about it, the more I believe that it should be a plug-in that is enabled by default.\n\nSent from my iPhone. Please excuse weird typos and/or terseness.\n\nOn 14 Jan 2015, at 16:04, Golmote notifications@github.com wrote:\nOne of my use cases though is displaying source files. In this situation, I need the display to accurately represent what exists in the file, including leading newlines.\n@haarg Oh, I get it now... You're perfectly right. What do you think of @LeaVerou's proposal?\n\u2014\nReply to this email directly or view it on GitHub.\n. > Thanks :)\n\n\u201cEnabled by default\u201d is very different than what you were suggesting. \n. Gosh, are you always this obnoxious?\nEnabling it by default is the crucial part here, as statistically most users tend to go with the defaults. Whether it\u2019s a plugin or an option is secondary.\n. Thanks @Golmote! You\u2019re awesome. I have no idea where Prism would be without all your help. \n. I would definitely be interested in this functionality. Not so sure it should be in the Core though, maybe it would be better as a plugin.\nWe should also offer an easy link with all languages as separate files, cause the downloader creates only one JS file which is pointless with this approach. \n. I\u2019m also not too fond of the dependency duplication in @vkbansal\u2019s proposal, nor the UMD syntax. \nI\u2019d much rather reinvent the wheel than use some ugly complicated truck wheel that I don\u2019t actually need and this has always been one of Prism\u2019s main design principles. Extra long code that is full of design patterns is almost always terrible code, despite what its authors think.\n. Hey, I just tried to highlight this in the test drive page:\n``` css\n/*\n * Basic border-image demo\n /\ndiv {\n    border: 40px solid transparent;\n    border-image: 33.334% url('data:image/svg+xml, \\\n                           \\\n                           \\\n                           \\\n                           \\\n                          <%2Fsvg>');\n    padding: 1em;\n    max-width: 20em;\n    font: 130%/1.6 Baskerville, Palatino, serif;\n}\ndiv:nth-child(2) {\n    margin-top: 1em;\n    border-image-repeat: round;\n}\n```\nAnd the multiline string wasn't highlighted...\n. Can\u2019t think of any reason for property to be before string. As for selector, perhaps if there's some pseudo-class in the future that accepts a string argument? Can't think of anything at this point. \nThanks for the commit btw!\n. Thanks!!\n. Oh I remembered re: selectors: Attribute selectors would then break.\n. Asking plugin authors to register load and unload events will discourage many from plugin development I\u2019m afraid :(\n. What about \\r\\n and \\r line breaks? Admittedly they\u2019re rare these days though, so not sure that\u2019s an issue. \nBtw that\u2019s a tiny PR, you could\u2019ve just committed directly :)\n. Merge conflicts :(\nBut you really didn\u2019t have to send a PR for such a small straightforward change. That\u2019s the whole point of being a collaborator, that I trust you enough to make certain (small) commits without going through the PR process!\n. Hey, no need to be sorry :) I wasn\u2019t telling you off, apologies if it seemed that way! I don\u2019t mind it if you send PRs for everything, that wasn\u2019t my point. I just mentioned it cause it\u2019s a hassle for you to go through the PR process when it\u2019s not necessary. :)\n. Thanks, merged!\nWhich browser did this issue happen in? \n. No, I was asking in which browsers the original bug was present, not in which ones you tested that the fix works.\n. Also, if it\u2019s based off Python, it might be a good idea to make it inherit from Python. I don\u2019t know much about Julia though and how related it is to Python\u2026\n. Indentation of \"title\" is still off compared to the others.\nApart from that, LGTM. @Golmote, what do you think?\n. The ignore pattern was a hack that was needed in the early days that Prism escaped stuff. It hasn\u2019t been needed for a while now. Similarly, the &lt; etc tokens won't match, because Prism operates on textContent and doesn't escape stuff any more (it\u2019s not needed). You need to remove the ignore token and convert entities to their equivalent symbol.\nWe also need to fix the Python language for the above issues, how did we miss that when the big conversion happened, I have no idea\u2026\n. LGTM. Thanks!\n. Thanks for fixing this @Golmote!\n. How big of an issue is that? What are formal generics? Is there anything to distinguish them on the syntax level? \n(also, thanks!)\n. @juliancheal, can we fix this on my server please?\n. Ouchie, that must have been a tough one to debug. Thanks, merged!!\n. First off, if we did this, we would bake it inside the selector, with :not([contentEditable=\"true\"]). Secondly, I plan at some point to release PrismEdit, which would turn Prism into an editor, similarly to how I\u2019ve done it on dabblet. PrismEdit could use contentEditable=\"true\" as a hook, so that it knows which areas should be editable.\n. Lolwut? Please read up a bit more about how selectors work.\nIf you use :not([contentEditable=\"true\"]) by itself, yes, it can match anything. If you use it as a filter on an existing selector, that\u2019s not the case. For example, pre:not([contentEditable=\"true\"]) > code would only match code elements inside pre elements that don\u2019t match [contentEditable=\"true\"].\n. Ah, I see, I hadn\u2019t noticed the * in your code. Sorry for being rude.\nAre we sure that all users would want this behavior? If not, it might be better to add a hook there, so that everyone could add their own filters via plugins (with a hook, it would be only 2 loc to add this functionality\u2026). \n. Is there any actual problem with these class names besides aesthetics?\n. Heh, fair enough. However, I have a bigger compulsion with the aesthetics of the code we work with, rather than the generated markup one only sees in the dev toops. Hope u understand! \n. LGTM, merged, thanks!\n. > Please welcome our first multi-dependencies language! \\o/\nHehe yeah, I noticed that! Woohoo! :)\n. Lovely idea! Two things:\n- I\u2019d suggest prepending the classes with keyword-, otherwise there will be a lot of clashes and unexpected results.\n- Please explain a bit more how this is used. Just a couple of sentences should be enough. I had to read the plugin code to understand what it does exactly.\n. Merged, thanks!\n@mAAdhaTTah I don\u2019t think that\u2019s needed commonly enough to be in the core. Also, I'd rather the core be agnostic regarding specific tokens, like keyword.\n. thanks, merged!\nAt some point we should convert all keywords to arrays, so we can push and remove keywords when overriding languages instead of having to repeat the whole list for just a few changes\u2026 (but that should happen after we optimize arrays)\n. > #444 is still pending.\nYes, I know, and it\u2019s my fault :(\n. break-inside: avoid; on the labels should fix that, but I doubt it's well supported\u2026\n. Of course it wouldn\u2019t be in Core, I was planning to have it as a language definition.\nRe:data URIs, I meant the urlencoded ones (which these days can have no urlencoded characters at all, as few characters really need escaping in them)\n. Thanks, merged!\nNow somebody needs to run gulp and generate the minified version\u2026\n. Thanks!\n. That would be great, but I\u2019ve never worked with Travis and have no clue how it works. Could you describe a bit more how this would work? What would we need to after the initial setup? Thanks!\n. Isn\u2019t there anything of value this can borrow from the CSS definition? I feel that a lot of stuff is repeated, but it might just be my impression.\n. Ok, merged, though I have my doubts about the CSS thing.\nAnyway, thanks for contributing!!\n. Why are there objects with just a pattern attribute instead of just regexes? The object syntax is for when you need to set more attributes than just the pattern...\n. LGTM, merging.\nAs a minor comment, the array would be more readable if every regex was on separate lines.\n. Perhaps we should have a list in the homepage. There we don't need the name of the maintainer or the file size, only the alias.\n. Not really. If you want to work on it @Golmote a) I trust your judgement and b) I will be very grateful for whatever you do :)\n. This is awesome, thanks so much!!!\n. Hmmm, yes, you\u2019re right. I was thinking that the implementation would be completely different, but that\u2019s a bad way to think. Users don\u2019t care about implementation, they care about function.\nSpeaking of that, it should also be possible to highlight lines without knowing their number, just by marking them up somehow.\n. Yeah, that was just an example. \n. Hmmm, perhaps it could be user-defined\u2026\n. Thanks! Wow, how on Earth had nobody noticed this before?\n. Damn, I really have to do that at some point :(\n. Thanks man! Have I told you how awesome you are lately? :D \n. Doesn't it have a redirect? I don't think we should be chasing old URLs if so. \n. The owner of a language is the person expected to provide support, so given that @hason seems willing, that\u2019s perfectly fine by me. \nThanks, merging!\n. Agreed, it would be a nice to have, though not a priority. If anyone wants to do it, I\u2019m up for merging it :)\n. Um, sorry for being thick, but what\u2019s the purpose of this?\n. Merged, thanks!\n. From a quick look, LGTM, thanks! Merging.\n. Merged, thanks!\nSorry for the delay, I've been getting tons of Github spam recently in another repo, and the legit notifications get lost in the trillions of spam ones. :(\n. Um, I think you made a mistake with this PR and typed your message as the PR code. In any case, I wouldn\u2019t be opposed to adding that tutorial as well (though it\u2019s a bit small), but you need to send a PR with the change :)\nGithub lets you do this graphically, by pressing \"Edit\" on a file in the repo and then clicking \"Send Pull Request\". Perhaps this is what you did and it went wrong here?\n. Is cloning really needed? So what if they refer to the same object? It\u2019s not like it\u2019s mutated at any point.\n. You really don\u2019t need to send PRs for new language definitions @Golmote :)\nYour language defs are always better than 99% of the PRs we usually get :)\nBut there are merge conflicts so I can't merge it now. Please fix the conflicts and merge the PR? \nThanks again!!\n. LGTM, merged, thanks! :)\n. Merci!\n. I suspect that this could be simplified a lot, but merging anyway, since we don\u2019t have a definition for reST. Thanks so much!\n. Nice one, thanks!\nAt some point we should do something better with all these languages, they\u2019re so many now!! But that\u2019s for the distant future\u2026\n. Oops, sorry! Which language does the issue happen in? Swift, I guess (judging by the comment)?\n. ping @chrischares\n. Closing as duplicate. If you have any follow-ups, please post on #478 .\n. We can probably use classList instead of className, which is the proper way to modify classes and the only reason it wasn\u2019t done like that in the first place was IE9 support. However, IE9 is not quite significant anymore (and those who care about it can always use a classList polyfill).\n. Also, there\u2019s no pragmatic reason to trim that attribute. It causes absolutely no issues in any use case I can think of. It\u2019s entirely cosmetic.\n. @Golmote Ideally, we should support both on the official release! :)\n. @StanBPublic Demo or it didn\u2019t happen :)\n. Ah yeah, aria-hidden! \n. Looks good to me, but could you please fix the merge conflicts?\n. If you mean existing keywords. you can just do .token.keyword { font-style: italic; } in your CSS.\nIf you mean keywords that are not highlighted in the language, you can use the API, but I will need more details to provide a code example (e.g. what language are you using?)\n. @Golmote do you think this is good to merge now?\n. Thanks for contributing!\nHowever, it\u2019s very difficult for us to review it and choose what to merge when you send one big pull request for multiple changes. Please split the changes into one PR for the test drive page and one for the soft breaks? Thanks!\n. On the topic of separate pull requests, if you wish to modify the general code structure of a file, please send a separate PR to do that and a separate PR for any other changes. In general, the smaller the PRs (obviously as long as they\u2019re coherent), the better. From a quick look, it seems that the changes in the line numbers plugin are way more extensive than required for this change (but I might be wrong).\n. Also, I\u2019m not a huge fan of using a line-numbers-break-word class here. Why not just get the computed style of white-space and if it\u2019s pre-wrap or normal do the thing required to have proper line numbers with wrapped code? This would basically always do what the user expects, transparently, without having them think about what they need.\n. @apfelbox is right. We should relax the markup grammar a bit, as long as it doesn\u2019t result in incorrect highlighting of HTML examples.\n. Thank you both! Looks good to me from a quick look.\n. So lemme get this straight: Currently people using Prism on Node have to individually require() every single language?!?\nIf so, this is terrible, I\u2019m so sorry, we need to fix it. :(\nIt would be trivial to get gulp to build a file with all languages, for whomever wants it.\nPlugins should still be included individually, as they're not all interoperable and some are not even opt-in once they're included.\n. > I left the [01uxzwlh-] part in the number pattern and not in the vhdl-vectors pattern to avoid the issue of a '0' inside of a string (example: \"blah blah '1' blah\") being highlighted before strings had their chance.\nNot sure what you mean here exactly, but strings are processed before numbers, since the string token comes earlier in your definition.\n. LGTM! Please add a minified version? Also, examples in the examples page would be nice, but not required.\nThanks for the contribution!!\n. Thx!\n. Merged, thank you both!\n. Nice, thanks!\n. Awesome!!\n. Merged, thanks!\nDon\u2019t have Ubuntu either, but it won\u2019t break anything :)\n. Nice work!\nI\u2019m not quite sure about the aliases; is there any semantic meaning in them, or are they purely to get highlighting for the current themes?\n. FWIW I always wanted to make PrismEdit, as a separate project. I was planning to clean up & release Dabblet's editor code (which is built on contentEditable), but recently someone made a really cool demo that overlays a textarea on top of a pre, which simplifies the code quite a lot, so ideally I would adapt that and then use it in Dabblet too.\n. Also, why on earth does that codepen have the whole Prism code pasted in? Why not just add it as a resource from the CDN and get updates as they are released?\nYeah, I second @mAAdhaTTah\u2019s decision.. I\u2019m not opposed, but it looks like this PR makes way more changes than adding this plugin. Please separate your changes into individual PRs? Thanks!\n. A straight quote is not an apostrophe. These apps should fix their bugs parsing Unicode instead of Prism using crude ASCII substitutions like it\u2019s the 90s.\n. I\u2019m happy to trigger Unicode bugs in any system that is too dumb to know that not every character is ASCII. It\u2019s not about how many characters it is, it\u2019s about whose bug it is. It\u2019s clearly their bug, and I\u2019m not going to use the wrong glyph because of it. That\u2019s like suggesting I use a comma instead of a period or an exclamation mark instead of a question mark. Um, no.\n. On it.. So I enabled Travis on this repo, but nothing seems to trigger a build. Any ideas? . Golmote, in the spirit that some tests are better than no tests, feel free to merge all the tests PRs. Thanks so much!!\n. Why did you close? Is the issue fixed? What was it?\n. Hey, thanks for your work!\nI might be missing something, but the website you linked to just has the same info as the readme here, in English (not Chinese). What am I missing?\n. Hi there @awesomes-cn, even when I select Chinese, there is a large blob of untranslated text and it's only very short bits of text that have been translated. Am I missing something? \n. Hi there,\nSorry for the delay.\nI would be inclined to merge this, but not as the first thing immediately after the heading. How about a \"Translations\" section at the end of the readme, with a list that has this as the only item?. Sure, why not.. Hey there, thanks for working on Prism!\nWhy don\u2019t you submit a PR so we can actually have a diff of the changes? Also, explaining your changes and what drawbacks they entail would help.\n. We already have a setting for this, though via HTML (<script data-manual>). We should have a JS property for this, and just set that if data-manual is found on the script element, to have both a JS and an HTML API for this. It's probably a good first pull request, if there are any takers! :). > This isn't a \"setting\" (in the normal sense)... it's a DOM hack.\nIt's funny how anything done via JS is considered \"the normal way\" by some. I consider an HTML API just as important (if not more important) than a JS API. Many people who use Prism cannot write JS. Allowing configuration via HTML is not a hack. Try being a little more inclusive in your thinking.\nIn any case, I wasn't even arguing that this is sufficient, I said myself that we should add a JS property for this as well, so not sure exactly what your problem is.. @Golmote Just saw your message. I'm not a huge fan of adding a separate global object, I'd prefer Prism.manual. If Prism has not been created at the time of setting, we can use a similar solution to what we do in Bliss where we copy any properties from a pre-existing Bliss object onto the newly created Bliss object.. @markcarver Wow. You do realize that this is an open source project and all of us are working on it on our free time, right? We're not your employees, so I would advise you to watch your tone. And to think I didn't even reject your suggestion, lol. I wonder what kind of reaction that would have ensued!\n\nand need this pretty major bug fixed for very involved setups.\n\nI'd be careful labelling this as a \"major bug\". Thousands of people and big websites use Prism without having any issues with this. Just because it's causing trouble in your specific setup does not make it a major bug. It's not even a bug, you're requesting a feature.\n\nExcept that Prism (itself) isn't HTML, it's written and executed in JS.\nWhen a website adds prism, it's executing JS, not HTML.\nWhen highlighting code on node.js, it's executing JS, not HTML.\n\nYes, Prism is JS, that doesn't mean everyone who uses it needs to know JS. That's the whole point of abstractions. You use software coded in C++ or even assembly daily, that doesn't mean you have to know these languages to use this software. Also, given that I did not disagree with you about it being a good idea to have a JS property, it's still unclear to me why you're complaining. Just the existence of the HTML setting bothers you?!\n\nas evidence from the divisiveness of even the collaborators in the project itself above\n\nWhat divisiveness? @Golmote suggested three solutions, indicated that he prefers the 3rd, and I agreed with his suggestion and proposed a few tweaks. That's not divisiveness, that's how projects work.. Guys, it's obvious that @markcarver has a lot more time in his hands than we do, so I'd recommend we stop this fruitless conversation and focus on more productive and/or enjoyable things. Don't try to convince him of anything, it's very clear to him that he's right and we're all wrong and he's not even considering what we're saying, just being on the defensive. Don't let people like that suck the energy out of you.\n@mAAdhaTTah thanks for the pull request! Yup, that's the way open source projects work. I'm glad the community has people like you.. Wow, amazing!!\n. Merged, thank you so much!!\n. Thank you Golmote!! You rock as always!!\n. Sorry I'm so late to this!\nGreat idea!!\nDoes this solve the \"foo /**/ bar\" problem? I think this type of thing is our most common highlighting fail that I see on random websites using Prism (especially recently, as I was reading gulp tutorials :p ). If I\u2019m understanding it correctly, I think it should, but making sure.\nIn terms of size or quality, the code looks ok to me. :) I don\u2019t currently have the time to read it carefully though. @Golmote, what do you think?\n. Btw @Golmote, if you, applying your strictest code review criteria, think this is ok, you have the ok from me to merge it :)\n(Yoohoo, 3 years later we\u2019re finally fixing this issue!! (at least for most cases). So happy!)\nEdit: Just looked at the samples more clearly, yup, it definitely does work on \"foo /**/ bar\". Awesome! \n. @foo123 Another reason that Prism does not work with a parser, is that a parser generally fails in invalid code. A syntax highlighter needs to work well with invalid code (i.e. highlight most of it as correctly as possible), as any code being typed in an editor goes through invalid states. Not to mention that tons of code examples on the Web are actually invalid. Prism is not a linter, neither does it need to be. I see Prism all the time in websites I visit, and I notice very few failures (and almost always of the kind this PR solves).\nThat said, I would like being able to define tokens by start, end and escape and a state machine with 2 states shouldn\u2019t take too much code. If you want to give it a shot, a PR would be nice. However, if it\u2019s a huge PR that adds a couple hundred lines, chances are it won\u2019t be merged. Not only because it increases complexity and download size, but also because every line added to Prism Core increases the effort required for future contributors and maintainers. We are very liberal with accepting PRs for language definitions, styles and plugins, but very strict when it comes to Core changes, especially extensive ones.\n. I hope we can get this merged at some point, I really like this functionality.\n@zeitgeist87, it would make it easier to review if you added some comments though. It's really hard to follow as it currently stands. (and yes, I'm fully aware that I don't add enough comments either, I'm not saying it won't be merged without them, just that it might speed things up)\n. > To be honest I find it hard to understand my own code after all this time :smile:\nYeah, this is exactly why comments are useful :P \n. Is this completely backwards compatible? Can we think of any cases that would be highlighted correctly in the past but not after this is merged?\n. Yay! Congrats team!! This is fantastic!\nNeither greedy nor backtrack describe what it does, just how it works. I think it's worth it to bikeshed the name a bit, as we can't change it easily once people start using it.\n. Haha, we use that expression all the time in the CSS WG to mean \"endless discussions about the name of a new feature\". :)\nimportant or privileged are on the right track in the sense that they attempt to describe the purpose instead of the way, but are still confusing.\nJust throwing some ideas in the brainstorming: What about something centered around nesting? You would use this flag in tokens that can be nested inside other tokens, right? If not, can we find a general description about which tokens this will be used in? It will help us a lot in coming up with a good name. \n. >  this property should be set on every token, that may contain other tokens.\nWell, every token that can contain other tokens which could also contain the same token. Otherwise one could just nest it in the grammar. \nI think we're on to something here :) \n. > It is for tokens, that match arbitrary content between start and end markers, because the content can contain stuff that could be matched by other tokens. The Problem is, that Prism has to execute its tokens in order. It the token in the content matches first, the outer token cannot match any more.\nI have no idea what this is saying, and I've even seen the code.\nI think you're too close to the implementation right now to write good docs. This is not a flaw, it happens to almost everyone.\nIdeally, someone else should write the docs for this, and you could review to correct factual mistakes.\nI might give it a shot later on, if nobody is available, but I would be very grateful to anyone who offers.\n. How about:\nEnable this flag to cancel out tokens that come earlier in the language definition if they appear inside this token. For example, comments are parsed first, but if the string /* foo */ appears inside a string, you would not want it to be highlighted as a comment. Use this flag with restraint, as it incurs a small performance overhead.\nJust an idea to get us started, I'm not saying it's perfect!\n. The English was correct, the problem was it read like code written in natural language.\nThe docs you're suggesting are much better though, so I retract my statement. :) \nNow if only we can decide on a good name :) \n. I think important is a bit confusing. \nnonesting is hard to parse (I first read it as \"none sting\" and was scratching my head as to what you meant)\n. We could include a small screenshot or something. It\u2019s a government website, this is big! We won't let a lack of logo stop us in including it :D \nI\u2019m afraid TypePlate is a bit small compared to the other websites in the list, which affects the impression the whole list makes. I\u2019m on the fence re:raspberry pi, it's well known, but not as well known as e.g. sitepoint or MDN. We can remove WebPlatform, since they're not using it everywhere, and it's also smaller than the rest of them. Or just add a third row with 1 item. Up to you, both are fine with me!\n. If we\u2019re not gonna use a screenshot, perhaps we could just have styled text instead of an image of styled text?\n. Oh, I didn\u2019t realize you were using the font from the website! Of course then.\nAnother option would be to use a screenshot like this:\n\nwith background-size: cover;, if its title is readable at such a small size.\n. Thanks!\n. I like it too, thanks!\nImage tags are more semantic, but we'd need object-fit support to do this with image tags, which is not supported by IE/Edge :/\n. I guess the Chrome guys fixed it! Closing.\n. Why not use promises? Callbacks and whenLoaded-type methods are a bit outdated. \n. Promises are supported in Edge, so polyfills will soon become irrelevant, whereas we can't easily change our API.\nHow large is a basic promise polyfill?\n. promiscuous looks pretty good. We could include it as an addon (\"IE9-11 support\") :P \n. That does seem like a pretty huge change. Can you hold off making these changes for a few more days please in case I find a moment to think about it? (I don't want to stall progress, and there's high probability I won't find the time, but give me a chance to :)\n. @Golmote any ideas where the 9000 came from? Is it safe to remove?\n. This seems to be a very common point of confusion. @Golmote perhaps we should add aliases? (html, xml, svg)\n. I like the idea.\nFWIW, to match \\s without [\\r\\n] you could do something like /(?![\\r\\n])\\s/\nMore info on this technique: http://lea.verou.me/2012/05/hacking-lookahead-to-mimic-intersection-subtraction-and-negation/\n. Closing this, since the whitespace normalizer plugin already does this. Thanks for your efforts, I hope you contribute again in the future!\n. Hey, thanks for contributing!!\nI like the idea, though tbh this seems like too much code for a simple feature like this. I understand that debugging is important, but here over 50% of the code is error handling! It\u2019s a bit overkill for a tiny plugin, IMO. @Golmote what do you think?\nBtw any chance you could temporarily add these commits to gh-pages so we could see a live demo of this on http://jandockx.github.io/prism/#plugins ? \n. On a second look, since this is a plugin, I guess the amount of code doesn't matter much. I'd be in favor of merging it if the others agree.. That would restrict the use cases though. I'd prefer a big warning in the docs to not use this if the code samples are user-generated.. Thanks! See comment.\n. Thanks!\n. Hi there, sorry I\u2019m late to this.\nThanks @chriswells0 for the contribution and @zeitgeist87 for assisting with the review!\nQuesiton: Why a plugin and not just a language definition?\nSorry if this has been answered, it's a long thread and I\u2019m in a rush\u2026\n. Hi all! Thanks @chriswells0 for contributing and @zeitgeist87 for reviewing!\nA few remarks:\n\nYou seem to have an editor that removes trailing whitespace, which is very good, but you should put all unrelated whitespace changes of prism-core.js into a separate commit.\n\nYou can use ?w=1 to strip whitespace-only changes when reviewing a diff. Historically we have been allowing stripping trailing whitespace. Other whitespace changes do indeed need a separate commit or even PR sometimes.\n\nIt is correct to add it as a plugin and a language.\n\nI\u2019m a bit uneasy with that. I don\u2019t see such a need. There are many language definitions with code, let\u2019s not clutter the plugin listing with things that, semantically, are not plugins. @zeitgeist87 had a good suggestion about how to turn this into just a language definition.\n. Thanks!\n. Thanks for the contribution! Totally agree with the idea.\nWhat are we using data-language for? If nothing, why not use data-language? data-language-label is a bit unwieldy.\n. Argh, after merging @nauzilus\u2019 PR, this one now has merge conflicts. Could you please resolve?\n\nHowever, it appears that loading a file from the root is disallowed.\n\n?\n. Thanks!\nBtw, is there any particular reason for using innerHTML instead of textContent?\n. Looks great! Merging. Thank you so much!\n. Btw, you've got mail :)\n. LGTM, merging, thanks!\n. Thanks for contributing @cormacmccarthy!\nDon't we have a general plugin for whitespace removal? If not, we should. We can't have one plugin for extra indent removal, one for last line, one for first line etc, it\u2019s getting ridiculous. We can always allow options (not on the element, as these options are likely intended to be global).\n. Thanks @chriswells0!\nHowever, no browser we\u2019re targeting doesn't support addEventListener. This is a pointless check that adds pointless extra code for everyone. Can we please remove it?\n. Thanks! LGTM, see comment :)\n. Thanks Andreas, we definitely need something like this!\nA few remarks:\n- In general, a design goal of Prism is to be usable by people with no JS knowledge. This is why it highlights automatically, and this is why most plugins accept their options as data-xxx attributes and act on anything with a certain class or attribute without requiring anyone to manually create a new instance. Requiring JS for advanced usage is ok, but as long as there's no real reason for a plugin to require JS knowledge, I'd rather it had at least a basic HTML API. We often don't realize, but there are a LOT of people getting by with only HTML and CSS, and struggle with writing even a single line of JS (fun fact: my research at MIT is about that and making things easier for these people).\n- Why convert tabs to spaces? That seems a bit backwards when we have the CSS tab-size. I hate it when people do that just because they like spaces, then I copy their code and have a bunch of spaces in my tab-indented code. Interestingly, nobody seems to do the opposite (not that I'd advocate for it, I think it would be an equally bad idea).\n- What are the defaults of these options? Sensible defaults are of utmost importance for good usability.\n- The options are a bit long and they would be even more unwieldy as data- attributes. But I\u2019m aware I tend to favor overly short names, so I'd merge it regardless :)\n- \"Normalize Whitespace\" would probably be a name more consistent with the rest of the plugins.\nThanks again! Don't be discouraged by the long list above, I really do appreciate the work you've put into this, and we badly need it :)\n. An HTML API doesn't have to be on every element that is highlighted. Prism solves that problem by inheriting the .language-xxx class from ancestors, so you could set it on any common ancestor. In practice, I find that much more pleasant to use than setting options via JS and it doesn't exclude those of us who are less familiar with JS. Of course, there should be a JS API as well.\nPerhaps you could write a general framework so that people can have plugins with options that are specified via inheritable data- attributes :)\n. And yes, Java conventions result in huge names, to the point that Java developers are often made fun of for it :P Thankfully, native JS APIs are moving away from this (e.g. things like element.contains() vs element.compareDocumentPosition()).\n. Sorry to spring more work on you, but can we split the two PRs?\nAdding the general framework for inheritable data properties is a separate PR and the normalize whitespace plugin is a separate one. The former might even be added in Prism Core if we polish it enough (and hopefully, shorten it a bit).\n. It's not your fault, there are a lot of PRs\u2026\n. Yes, code size/readability/elegance are more important, unless of course there is a noticeable performance impact on average use cases. But avoiding map, forEach etc is premature optimization more often than not.\n. > Yes I think I am guilty of premature optimization :smile:\nHeh, I know what you mean, I was too in the past. Then I realized that these differences shown in jsperf didn't matter for 99% of the projects, 99% of the time. However keeping the code small does, mainly so that humans can process and skim it quickly.\n. Merged, thanks!\nSorry I haven't reviewed the parse settings plugin yet, I'll get to it!\n. Then it would be wiped on rehighlighting and it would need to be recreated and repositioned. \nRegarding your assumptions:\n- Correct. However code without pre works.\n- Correct\n- Inline code is highlighted. (see first bullet point)\n. > What's the use case for rehighlighting of already highlighted code?\nAny changes to the code, such as those made in dabblet or CodeFlask. \n\nAre you worried about performance?\n\nNo.\n\nI mean line-numbering and line-highlighting plugins should work if and only if both pre and code are present and there is no point in line-highlighting or line-numbering of a single line of code - when there is a code but not pre. I already saw the docs so I just wanted to make sure.\n\nYup, that's correct.\n. Thanks & happy new year :)\nThis breaks the shadows under the code area in this theme :(\n. Also, plugins should probably not be included in the cdnjs file.\n. Thanks for implementing this, sorry it took so long to give feedback!\nI think a better approach is to get the plugins to declare which settings they need and their values (e.g. non-boolean values don't need to even check class names) via an object literal, then the plugin would provide a method to get their values for a given element. This would avoid having to specially mark elements that contain data to avoid false matches, or the awkwardness and perf overhead of iterating over attributes. Having the plugins provide a settings spec would also allow for cool things like default values and type casting, that this plugin could handle as well to give even more incentive to plugin authors to use it. It could also be used for automatic documentation in the future! I suspect it would also make the code smaller, enough that it would be worth including. Right now, it's still easier for most plugin authors to just do it themselves and avoid the perf overhead and syntactic awkardness. As it currently stands, I wouldn't use this as a plugin author I'm afraid :/ \nHere's an example of a settings spec I've seen in another project: https://github.com/haystack/flotr-extension/blob/master/src/scripts/bar-chart-view.js#L64-L85\nWe don't have to follow that format, but it's a good starting point.\n. > Only if you want settings on some unrelated tag you have to mark it\nI don't see why you would want settings on anything other than a) an ancestor b) the element itself c) the script element. This is confusing and I'd advocate for getting rid of it.\n\nFor the plugin author nothing changes. \n\nYes, but we cannot treat every class and data attribute as a potential setting. It's just a lot of overhead, for little reason.\n. > I think the marking attribute is useful. Most of the time it can be avoided by placing the settings on the same tag as the language class, but it is still a nice option to have.\nAncestors should not need any kind of special marking to contain settings. Inheriting settings should be as easy as specifying them on the pre/code elements themselves, just like how language inheritance works. Yet another reason to have plugins declare their settings.\n\nI disagree. Only the parent elements are scanned. How deep does an average DOM tree go? I would guess 10 at the most. So you have 10 elements that get immediately and efficiently filtered. All elements without a Prism language class or the marker attribute are thrown away. Most of the time this leaves only one or two elements. There is no reason for a user to put Prism settings on all 10 ancestors so we parse all attributes of 2 elements!\n\nIf you have plugins declare their settings this is not needed though. People use classes and data- attributes for all sorts of reasons. You will end up getting tons of pointless \"settings\" that will be passed to each plugin, whether they are relevant or not. It's not just a matter of how slow it is, it's also that it's doing unneeded work.\n\nCurrently every plugin parses the DOM for its settings. Basically the same operations are repeated for every plugin used. It is better to do it once for all plugins.\n\nThat's an implementation detail, not something that should affect the plugin's API. The plugin could combine all declared settings and do it in one pass. \nOverall: I'm strongly opposed to parsing random classes and data attributes as settings just because they happen to be specified on a Prism element. I'm also strongly opposed to having to add attributes to ancestors to allow them the privilege of being able to specify settings, which is a side effect of parsing every random class and data attribute as a setting. If plugins declare their settings, all these issues go away at a very small price: Plugins just giving us a literal of all the settings they expect, which is something they often do anyway. That way, we could even take care of default values for them.\n. Because I convinced you or because I said I'm strongly opposed to the alternative?\nIf it's the latter, we should discuss more.\n. Yes, plugins will declare their settings and their defaults, then this plugin will be responsible for returning their actual settings to the calling plugin, after looking for these specific classes and/or attributes in the pre/code and its ancestors.\n. Nooooo, don't close it :(\n. If someone wants to submit a PR for this, I wouldn't be opposed :)\n. Yeah, I have no idea why I added that, since as you pointed out, \\w doesn't include * anyway. It can be safely removed.\n. Actually, Solarized is such a popular theme that I think it should be here, and on the website (theme sidebar). Thank you so much  @hectormatos2011, I've been wanting this theme for Prism for ages!!\n. I use Solarized Light on my editor, and this is not Solarized Light. All the colors are darker. Compare:\n\n\nTop image is the official screenshot from http://ethanschoonover.com/solarized , bottom image is from Prism\u2019s website. Do they look the same to any of you?\nI would be very grateful to whoever can fix this disparity.\n. > Sorry for the mess. I'll fix it tomorrow.\nYou're the last person that should be sorry!! Thank you so much for your hard work.\n. Thanks! Wouldn't it be more usable if there was a character in the beginning of such lines to indicate them instead of having to figure out line numbers for data-output?\n. > It seems like a kludge (for lack of a better word) to add fake data when the role of markup is to describe data.\nYour argument seems like a philosophical concern, whereas the problem I pointed out is very real: Specifying line numbers is not only difficult (how do you even know if you're not using the line number plugin? Do you count them, one by one, with your finger?), but also fragile (all numbers change if new lines are added).\nPhilosophical purity is NOT above usability. At least not in this project.\n\nHow would we choose character(s) to identify output in any given language and know it's never part of the code/output?\n\nSame way as any metacharacter or keyword in any language, ever: You provide an escape sequence to escape it in the odd chance it's actually used as code. We're not treading new ground here :P \n. From a usability perspective, I would definitely prefer to add a prefix before these lines than to have to find their line numbers and keep them in sync with the code.\nThe main issue I see with that approach is that it spoils the fallback in case Prism fails to load/run for whatever reason. But we could make the prefix readable, e.g. something like (Output) or (Out).\nOf course, both approaches can co-exist so that you can still use your line numbers and everyone else can use a prefix.\n. I think > is not a good option exactly because it's like the multiline character, so multiline commands and output would get confused.\nAnything works for me, but please choose something that is short to type and works as a fallback too.\nI suggested (Out) earlier, but I'm not married to it.\n. Thanks!\n. Yeah not sure why this should be something that Prism addresses tbh.\n. I would put it inside @media screen {...}. @garretwilson is right that nobody would want this for print.\n. If we remove it, the theme breaks (the shadows are the wrong size). No time to debug why right now, but I suspect it has a lot to do with how hacky these shadows are. They've been giving us trouble with other things too (they break the line highlight plugin for example) but damn, they look nice :P \n. I wouldn't be happy without the shadows and neither would many people who use it. \nThat said, putting them inside @media screen would be good to prevent them from showing up in print.\n. We should put the shadows inside @media screen so they only show up on the screen.\n. Cannot reproduce on the http://prismjs.com/test.html page. It seems to format just fine with the first attribute being on a separate line...\n. Yes, we need a page with doc info for all languages, not just this. Perhaps we should add a description field to components.js and have a page that lists all languages and their descriptions. Currently the only listing is the download page. This design worked well 3 years ago when Prism had a few languages, but is very confusing now...\n. Why a new rule? There's already a rule styling <code> inside a Prism-highlighted pre.\n. Merged, thanks!\n. Cool!\n. To collaborators: We should have a config option on the <script> element for the selector used. This is a variation of a very frequent request.\n. Sigh. Maybe we should not add this then (and reverse the PR already merged). No point bloating the code if nobody is interested in the functionality.\nBloating the code and themes by default to include elements extremely few people use though is also not going to happen. If at some point enough people start requesting support for these elements, sure, but not at this point.\n@garretwilson, your call. data-tags and data-selector attributes on the <script> element or nothing?\n. Good idea. If we merge in support for Prism.selector again, the tags one can easily be a plugin, I think.\nWe would need to expose the script variable in a hook though.\n. Gawd I can\u2019t wait for :matches(). Once :matches() is supported, that would just be:\njs\nPrism.hooks.add('before-highlightall', function (env) {\n    env.selector += \", :matches([class*='lang-'], [class*='language-']) :matches(kbd, samp)\";\n});. Why not data-selector? It's not like it's used for another setting.\nBtw (tangentially related), we should use document.currentScript to get the script, and only use getElementsByTagName as a fallback.\n. Merged, but keep in mind we need docs too.\nThanks!\n. Interesting idea, thanks! See comments. Also, merge conflicts.\nAlso, it might produce cleaner code to do something like:\njs\nvar selector = _.tags.map(function(tag) {\n    return [\n        tag + '[class*=\"language-\"]',\n        '[class*=\"language-\"] ' + tag,\n        tag + '[class*=\"lang-\"]',\n        '[class*=\"lang-\"] ' + tag\n    ].join(\", \");\n}).join(\", \");\nJust an idea, you don't have to follow it, but the current version of the code is a bit verbose and repetitive.\n. I like the code changes.\nHowever, I'm a bit worried that we're jumping to add features way too early, which is a slippery slope and can result in bloat over time. I actually like this feature and how elegantly we implemented it. However, the guy who actually opened #867 did not and I'm a bit hesitant to merge a feature we have no real use cases for. What do you think? :/\n. I actually needed something similar yesterday, and neither this, nor selector cut it: I was using <script type=\"text/code\"> to be able to have unescaped markup. Since it wasn't highlighted by default, I wrote a small script:\njs\n$$(\"script[type='text/code']\").forEach(script=>{\n    var pre = document.createElement(\"pre\");\n    var code = document.createElement(\"code\");\n    pre.appendChild(code);\n    script.parentNode.insertBefore(pre, script);\n    code.appendChild(script);\n});\nIt was better for me than replicating the entire selector just to add script[type=\"text/code\"] to it.\n. I was thinking more something like:\njs\nvar script = document.currentScript || [].slice.call(document.getElementsByTagName(\"script\")).pop();\n. Thanks!\nThe main problem I see is that the default color is too light. We should use the darkest color there.\n. For anyone interested in helping, here is a comparison. First image is Solarized Light in my editor, second is Prism from the website.\n\n\nOurs looks a bit more colorless, but overall, not too bad actually!!\nThanks again @zeitgeist87!!\n. Thanks for working on this!\nHowever, I disagree with such a bright color for punctuation. In all our themes, punctuation has a color that will make it less noticeable, not more. The reason is that you don't want it to stand out when you scan the code, you want it to fade to the background so you can scan what actually matters.\n. This is how Solarized Light looks in my editor (Atom) btw, if it helps:\n\n. Sorry :(\nI think it might be good to collect samples for our core languages from various editors, compare them and try to do something similar. But it's kind of a chore to do that.\n. Nice!\n. Thanks from me too!\nHey, @Golmote, nice to see you again around here! \ud83d\udc4b\n. Agreed. We badly need a plugin for emphasise parts of the code on top of the code highlighting. I've needed this SO MANY TIMES, the last one in a talk yesterday!\nHowever, every time I look into it, it's nontrivial to implement. Perhaps someone will have a clever idea that will bypass the issues.\n. @garretwilson you can see his PR and all its comments too, it\u2019s referenced right above your comment.\n. You\u2019re looking at the wrong commit. Just go to \"Files changed\" in the PR.\n. Hey, thanks for looking into this! It's a nice little plugin and it's sad that it had that bug.\nI\u2019m very surprised this fix works. The new regex won't match newlines in many (if not all) modern systems, since they tend to be \\n these days. Perhaps commenting out that line has the same effect?\n. Good! Should I close this PR so you can send a new one or do you prefer to update it?\n\nNot sure how it would behave with the Remove initial line feed plugin...\n\nWe can make sure to include that plugin before this one.\n. Awesome, thanks!\n. Ah yeah, you need to run gulp.\n. Please don't use w3schools, for your own good. Use MDN or the W3C specs.\nHowever in this case, the point is correct: We need to convert left to to right. When this code was written, the syntax of linear-gradient was different.\n. Feel free to send a pull request if you want to fix it yourself btw!\n. Merged, thanks!\nBtw, it's your plugin, you can commit without PRs. Unless you want feedback, in which case PRs are ok :)\n. Btw I used this yesterday. Works really well. The documentation needs some updating, if I didn't know I would assume it requires the Parse Settings plugin (which isn't even merged AFAIK!)\n. Oh, sorry, I had skimmed this very quickly.\nYes, that would cause issues with plugins that also modify env.code before yours runs, I think.\nYou could at least check if the keep markup plugin is actually loaded before doing all this.\nAlso, you're telling people to load the keep markup plugin after this one, but most people make their own build through our download page, so we should make sure this happens (we can introduce an after key in components.js and try to follow the order (try because it will not be possible if there are cycles). \n. This introduces latency during runtime though, whereas making sure the order is correct in the bundle is something that has zero performance impact when Prism is actually running.\n. Heh, this is why I don't like bower much. Is there even a way to specify which plugins you want with it or do you just get all of them?\nThe hooks data structure is public. Whoever wants to do fancy stuff with it can always do it manually, we don't need to add methods for every possible kind of array manipulation.\n. Closing then :) \n. I\u2019ve had this problem myself and I use <script type=\"text/plain\">...</script> elements.\nThen I use a small script to convert them to <pre><code>, which runs before Prism inits:\njs\n$$(\"script[type='text/plain']\").forEach(script=>{\n    var pre = document.createElement(\"pre\");\n    var code = document.createElement(\"code\");\n    code.className = script.className;\n    pre.appendChild(code);\n    script.parentNode.insertBefore(pre, script);\n    code.appendChild(script);\n});\nNote that this depends on Prism\u2019s behavior of removing markup. If using the keep markup plugin, it will need a few adjustments.\nI should clean up the code and add it as a plugin, since that's such a common request.\n. Btw @hlaporthein there is now a beta plugin here: http://prismjs.com/plugins/unescaped-markup/\nIt's experimental so not listed in the download page.\nFeel free to try it out and let us know what you think!\n. Should we change the regexp in markup to include periods? Is there anything that could break if we do?\n. Awesome, thanks for catching this and for fixing it!\n. For parity or because there are use cases?\n. I like that idea!\n. Yeah, I would be opposed to adding global dependencies to support a plugin.\nHowever, I'm not sure about just mentioning that Clipboard.js is needed. Part of why Prism is so easy to use is that you download a copy and it just works. I wonder if we can use gulp to pull in the latest version from clipboard.js\u2019 repo and bundle it with the plugin.\nAlternatively, the plugin could load the CDN version of clipboard.js dynamically.\n. What about checking if Clipboard.js is loaded (e.g. via some global it defines) and if not, loading it dynamically from the CDN? That way we don't have the issues of bundling a possibly outdated version or the hassle of requiring users to load it themselves.\n. You can listen to the script's load event, then add the toolbar to already highlighted elements, and use the hook for elements that are going to be highlighted in the future.\n. I'm not super concerned with BC on plugins, especially when the improvement is quite substantial. It's a concern, but a low priority one.\n. Wait, what? How did we get to such a dependency? What I was agreeing on was refactoring the Show Language plugin to be more generic\u2026\n. I'm not sure I understand why we need two plugins where one's functionality is a subset of the other. In similar cases when this happened in the past, we just kept one (e.g. whitespace normalizer vs trim first line plugin). We can just have a setting that shows the language.\nAlso, \"Toolbar\" is a rather confusing name for a plugin that shows labels on code snippets. What about \"Show labels\" or something?\n. And what if people want to display custom labels? They write their own plugin? This goes against our design goal of being able to do things with HTML alone.\n. Here's a different idea, not sure if it's a good one, but I'm throwing it on the table anyway:\nWhat about, the label plugin sets a CSS variable with the language name (e.g. --language). Then, in the CSS for the label, it uses content: var(--label, var(--language)). This means that:\na) If --label is not defined, it will fall back to --language\nb) If --language is not defined, there will be no pseudo element\nSure, style=\"--label: 'foo'\" is a bit more syntax than data-label=\"foo\" but not a crazy amount. And you get inheritance and decoupling CSS & JS out of the box!\n. They are supported everywhere except Edge (and they're in development on Edge) and this is a plugin.\n. Global usage doesn't matter in this case: Prism is used on sites that developers are reading, not random people. Developers tend to use modern browsers. When Prism itself came out, every other library had IE8 support, and Prism did not, for the same reason. Just over the years, Prism's browser support got better as people were upgrading. That shouldn't make us conservative today though.\n. > I also don't know CSS variables (although I feel like I read there are differences between them and say, SASS variables), so I would have to spend some time learning them in order to implement this myself.\nThey are more like custom properties than Sass variables. They work exactly like any CSS inheritable property (including setting/getting with JS), and they start with --. You call them with var(), e.g. var(--foo). The second argument to var() is a fallback if the variable is not set. There, now that you know CSS variables, perhaps we can move on? :)\n. Screen readers are supposed to read generated content, per the specification.\nAnyway, as I said, I was just throwing an idea out there, it's not necessarily a good one. But browser support or accessibility are not the reasons why it may not be good, I'm more concerned about usability for our users.\n. > No worries. I guess I'm just not sure what the benefits are of CSS variables over an HTML data-attribute API.\n1. Inheritance out of the box, i.e. users can set a default --label on <body> or <html> and use that for every code snippet.\n2. People can set it in their CSS, it can use other variables etc. It's more flexible.\n\nIf I'm following correctly, the Show Language plugin would inject the CSS --language variable into an inline-style on the pre element. The CSS content uses the --label first, which would be set by the Prism user on the HTML element, falling back to the injected --language if --label isn't found. Is this correct?\n\nYes.\n\nI think how the --language variable gets injected is where I'm not sure\n\nNot sure why you're confused, I said you set it and get it exactly like any other CSS property. \n``` js\n// Get variable from inline style\nelement.style.getPropertyValue(\"--foo\");\n// Get variable from wherever\ngetComputedStyle(element).getPropertyValue(\"--foo\");\n// Set variable on inline style\nelement.style.setProperty(\"--foo\", 38 + 4);\n``\n. If there are buttons etc that's not gonna work.data-attributes it is then!\n. Idea: What about enablingdata-labelto link to aelement containing arbitrary HTML? Then people can have custom buttons and everything in that, with their own event handlers.\nOf course it shouldn't be the only way to specify a label, because having to include a separateelement if all you want is a textual label is kind of annoying.\n. > How would someone declare their event handlers in a`? \nEither inline or through event delegation.\n. Huh, you\u2019re right! How did I miss that? innerHTML does indeed work! I feel so silly now.\nWe should still provide the other options (script and the comment method), since template only works in modern browsers.\n. What syntax would you suggest for <template>? We cannot be processing every template tag on the page, but also, we don't want people to have to add a language class to every template they use for this.\nWhat about <template> inside <pre>? But that is kinda verbose. Alternatively, template with either a language class or a code class?\n. Interesting. Indeed, it seems there are use cases for other languages too, and we should not restrict it to markup. I don't like the opt-in though. Perhaps an opt out would be best. \n. No matter what we do for this, it will be a hack. Which is ok, as long as we keep it out of the core and in the unescaped markup plugin. Wanna move the commit to that? :)\n. Just please amend the documentation to mention this, and make sure to only apply it for block code (it's much more likely that inline code will actually contain a single comment, for block code I think it's kinda rare).\nNice hack!\n. I\u2019m a bit worried that this could be a breaking change for third party plugins. Perhaps we should add a new hook before the check?\n. Sure, ok! Thanks!\n. No offense right back at you, but did you actually try visiting the download page? You know, the huge blue download button on the header of every page?\n. Prism itself works on the server, but most plugins do not.\nThe takeaway from this is that there should be a notice on each plugin\u2019s page about whether it\u2019s compatible with Node or not, so that people don't have to peek into the code.\nHowever, you might want to tone down the disgruntled customer attitude next time you post an issue at an open source project. Nobody here is being paid to serve you, we're all working on Prism on our spare time, for free. By using this kind of tone, you're putting off everyone from helping you or being polite to you, making Github a worse place for everyone.\n. Not sure where that part is from, but plugins are often contributed via pull requests from outside contributors (i.e. non team members), and thus documentation is of variable quality. We still think it's best to include them anyway, than reject the PR on the grounds of insufficient documentation.\n. Yeah, it\u2019s from here.\nApart from changing \"variables\" to \"properties\", I\u2019m not quite sure how to best explain that. The properties on env depend on the hook used, so there's no more specific description that we're withholding.\nIf you have any suggestions about how that paragraph could be made more clear, be my guest.\nAlso, this section is intended for people who want to write their own plugins, not just use Prism. To write your own plugins, a basic level of familiarity with the codebase is required.\n. Counting lines and characters sounds like a huge hassle to me. Is there any use case where this is pleasant UX?\n. Yeah, let's remove it.\nDidn't know epub even supported JS. Cool!\n. All three :)\n1. Yes, we should have a reasonable order in components.js\n2. That can be achieved by putting Unescaped Markup first.\n3. A new hook would be nice regardless.\nI tend to be opposed to things like anything forcing itself to be first or last, unless it's really a last resort. This is why in CSS we end up with unmaintainable websites with z-index: 99999999999999. Because every element thought it had the right to be first. \n. Awesome, thanks!!!\n. What about aliasing it to punctuation? Then it would look discreet in all themes.\n(just an idea)\n. We make releases periodically, but it's already in Prism. Everyone downloading Prism from the website can get it. :)\n. We do not make releases for specific features, we release periodically. This will be in the next release, which will happen soon.\n. Nice, thanks! We also don't need the prefixes anymore.\n. Prism only runs on DOMContentLoaded and highlights what's there. To highlight any other element, use Prism.highlightElement(). If there are many, use Prism.highlightAll(), but keep in mind that will also go over already highlighted elements and re-highlight them.\nFor more info on Prism's JS API, look here: http://prismjs.com/extending.html#api\n. ping @Golmote \n. You don\u2019t seem to have the file highlight plugin loaded.\n. @lukasoppermann You can just add a pseudoelement, like so:\ncss\npre[data-file]::before {\n  content: attr(data-file);\n  position: absolute;\n  top: 0;\n  right: 0;\n}\n. Oops, yes! Thanks, edited.\nYou're limited when using an attribute as well. How would you put the icon there? Would you put HTML in an attribute? Ewwww. :P \nI guess you could put the icon there via a pseudo-element, but then you're still kinda limited.\n. Note that it's super easy to roll your own plugin, by modifying the Show Language one.\nAt this point, I don't think it's wise to address individual use cases, but it's clear the use cases extend to more than simply showing the language, so we should make the Show Language plugin more generic, IMO.\n. It\u2019s super easy to do so yourself, as a pre-processing step before Prism runs. Assuming you're using a no-line-numbers class to opt out, you'd run something like (using Bliss in the example below, tweak accordingly if using another DOM helper library):\njs\n$$(\"pre:not(.no-line-numbers) > code\").forEach(code => code.parentNode.classList.add(\"line-numbers\"));\nIf you\u2019re not using <pre> for anything other than code, it can be simplified even further:\njs\n$$(\"pre:not(.no-line-numbers)\").forEach(pre => pre.classList.add(\"line-numbers\"));\n. I was just suggesting a temporary workaround that will work now, independently of what decision we make here.\nFWIW, I think it makes sense to make it opt-out. If someone is adding this to their Prism download, they are clearly interested in having line numbers, so it doesn't make sense to force them to opt in further, on every single code example. So I would be in favor of this change. My main concern though would be: What about backwards compat?\n. Another way to go would be to make it an inherited option, just like language. i.e. you can put the line-numbers class on a shared ancestor instead of having to repeat it on every element. Of course then we still need a no-line-numbers class to opt-out.\n. I like the idea of having plugins in separate repos!\nThough somebody would need to do the work of modifying the download page to build from repos instead of folders. Also, how would somebody send a PR to add a new repo?\n\nif there is configuration, wouldn't it be better to make it real and add it in js?\n\nNot everybody using Prism can code JS, but all our users can work with HTML. Note that around 50% or more of HTML authors are not super comfortable with JS. Ideally there should be a way to provide both and it should be in the core or some base plugin that gets included if at least one plugin is included. @zeitgeist87 did some work on writing such a plugin a while ago, but it was way too large for this purpose IIRC. We need something small and compact, even if it doesn't cover all possible use cases ever, so that it doesn't add any significant weight to the plugins.\n. Actually, it doesn't need to be repos under PrismJS, it could be any repo, as long as we store its info in components.js. That way people can push fixes to their plugins without requiring our approval, and we can still offer a nice build with everything from the Prism page.\nUnfortunately, I don't have the time to work on this, but perhaps @Golmote or @zeitgeist87 do?\n. Awesome!\nI would suggest using inheritable classes to opt-out, e.g. no-gradient-previewer on the element or an ancestor disables gradient previewers.\n. Any progress on this?\n. Yup, you're right (in fact, dabblet previewers also do both CSS and HTML).\nI think the Previewer plugin should add all of them by default, in whatever languages are included, and support a configuration attribute (inherited) to only enable specific ones. E.g. data-previewers=\"color length image\".\nWhat do you think?. Thanks!\n. Hi there,\nThanks for this, but I think we should wait a bit. Stage 1 is too early. If you need it for your blog etc, you can add a line to overwritePrism.languages.clike.operator`. I will leave this open for when the proposal has advanced a bit. Please ping us then? Thanks!\n. But it doesn't have any browser support yet, right? Also, if it's JS only, it should be in javascript, not clike.\n. Well, there are many other JS-specific new operators we could add, e.g. the spread operator (...) or the exponentiation operator (**)\n. Yes, we should!\nAnyone willing to add it?\n. Nice!\n. Given that Cloudflare is not free, if you want to pay for it @fuzzyroddis, I'm game. Otherwise, I'm not sure how that would work, given that Prism is a non-profit project with no funds.\n(Hmm, I wonder if there's a good service to use that is easy to set up, to let people donate to the project. It would be useful for things like this)\n. When I go to do that, it's not enabled \ud83d\ude15 \n\n. Done! Thanks @mAAdhaTTah for your help!. Awesome, thanks! \n. Why did you close this? Was it a bug on your end?\n. Which plugins are you using? Is there an online example we could look at?\nPS: \"Hello sir\" is needlessly specific. Not all of us working on this project are men.\n. Interestingly, it works if I call Prism.highlightAll() from the console, so it looks like some sort of race condition. Perhaps you're loading the posts asynchronously?\n. @Golmote @zeitgeist87 Why do we have a remove initial line feed plugin? Isn't this covered by the whitespace normalizer?\n. Thanks, merged!\n. Thanks, merged!\n. The functionality is useful. I would suggest you also allow nested objects, in case someone wants to customize these tokens differently per language.\nAlso, do not use a global function, instead hang it on Prism.plugins.yourpluginname\n. Damn. No, wrap is the perfect hook for this. @zeitgeist87 do you think it would be easy to add language to env there?\n. I think @dvkndn should submit a PR with a basic version of this plugin, and he can add this functionality in the future, if people request it. I suggested it in case it was trivial. I don't think it's worth spending any more time on this, unless people actually ask about it.\n. This seems very hacky to me. Also not sure it's needed (see my comment in the other thread).\n. Thanks for this PR @Lucretia! \nI'm also in favour of merging them. Prism is not a linter and doesn't need to be precise.\nIf anything, this will be harder to use, as people will be using language-ada and expecting it to just work.\n. > Sorry for the late response. I was quite busy last month. Looking over your source code I had the following idea. Your plugin could also offer the option of a prefix to all classes. Something like a namespace:\n\njs\nPrism.plugins.customClassName.prefix(\"mynamespace-\");\nThat way the user would not have to provide a map for every possible class. You can of course still support the map. What do you think?\n\nAccepting a function as a parameter that takes a class and returns the namespaced class would also be good for maximum customization (though I'm a bit worried it might be going towards feature creep :P)\n. Also, customClass would be a better I think, customClassName is a bit too verbose. \n. Actually, only < needs escaping, not >.\n. Thanks!\n. @zeitgeist87 what do you think? Is it time for a new release?\n. Oops, thanks!\n. Thanks!\n. Fixed, thanks!\n. The reason is that most people modify the CSS at least to a degree, but don't modify the JS. Also the CSS is much smaller, so it's not really worth it to minify.\n. Thanks!\n. Oh wow, I thought we fixed that ages ago. Thanks for spotting that!\nI would suggest requestAnimationFrame instead of setTimeout.\nOtherwise, LGTM, but I want someone else on the team to weigh in too before merging. \n. I think if you're using the autoloader the easiest way is to just clone the repo and take the components folder from there. You can then download Prism core & any plugins from the Download page, without checking any languages (or just check the languages you want to load by default, e.g. if you're using a language a lot, then you probably want to save the extra HTTP request).\n@Golmote, perhaps we can add something like the above to the plugin's documentation? Is there an easy way to provide a download of the components folder as a zip without having to manually update it?\n. What do you mean by \"it's not made pretty\"? It seems fine to me. Is the first line break stripped? Perhaps that's the problem?\nWhich plugins do you have loaded?\n. The PR @zeitgeist87 linked to above is actually merged now, so I'm closing this. Please use that plugin. If you want to make suggestions for that plugin's functionality, please open a new issue and tag @dvkndn \n. Agreed.\n. Sounds good to me!\n. Oops, I completely missed that you implemented specs. Thank you! Will try to find time to review soon, I'm really swamped with preparing a talk right now :(\n. Thank you @zeitgeist87! \nI'm rally swamped with preparing talks right now, so if @Golmote feels it's ok, feel free to merge!\nFrom a quick look it looks good!\n. You could run:\njs\nPrism.languages.properties = Prism.languages.ini\nright after including Prism. Once eventually there is a proper definition for this language, you remove the line. Would that work for you?\n. Or you can just insert it at the end of prism.js, but that means it's more of a hassle to update Prism.\n. It would be nice to have this indeed, and it can be automatically generated via gulp\u2026\n. Would it help if we split components.js to a components.json which can be easily parsed and then create components.js + module.exports with gulp?\n. No, because components.js would still exist, it would just be generated with gulp! :)\nAlso I don't think that many people are relying on components.js :P \n. Thanks!\n. Good to see you back @Golmote!!\n. What other scripts are you using? Perhaps one of them is overwriting native methods, and making match() return an empty array?\n. Good call and on par with Prism's design principles. Merged, thanks!\n. Btw I noticed you only removed these from 2 themes. Have you looked at the rest and there aren't any?\n. Awesome, thanks!\n. Please add viewBox back. Every SVG should have a viewBox. @svgeesus can explain why. \n. Nice, thanks! Was about time :D\n. Prism was released in 2012, when IE8 mattered more. In 2016, to hell with IE8. Also, indeed the plugin never worked. It was an abandoned WIP which I gave up on when I discovered the same newline issue. Feel free to remove it, as it's kind of misleading.\nAs for triggering errors, if there's a simple check that we can put in the beginning (I.e. If X not supported, return), fine. Anything more than that is way too much for way too little benefit.\n. Agreed with Golmote, we need both Imperative and declarative ways to set settings. \n. Things like data-foo=\"true\" are a bit of an abomination. They are against the design of HTML in which boolean properties are true by presence and their value has nothing to do with it. Also, boolean settings should/could be set by a class (foo or no-foo, which is consistent with current practice).\n. In general, keep in mind that the priority of constituencies is us < plugin authors < Prism users < their end users. Requiring people to use attributes for everything (no classes, no JS API) is against this: It makes things harder for Prism users, for the benefit of plugin authors (and us?).\nI would suggest boolean settings be classes by default, with a switch to make them attributes.\nEdit: Ah, turns out this already supports class names! Nice! I'll leave the above because it's useful as a general principle.\n. I see that one of the main concerns was that there was no JS API to set these settings. Has this been resolved?\nAlso, what about inheritance? It looks like this supports inheritance by manually traversing the DOM. Why not construct an appropriate selector and just use element.closest(selector)?. @Golmote Browser compatibility is > 88% of users, which seems pretty good to me. Anyone wanting IE11 support can use polyfill.io... What do you think?. Thanks! Nitpick: Can you remove the line break? \n. Thanks!\n. That's a very good point. Although once we don't host them anymore, our users won't hold us responsible for them, so perhaps we'll get out of fixing these compat issues altogether!\n. I would suggest using the Keep Markup plugin, then mark the code that should stand out with <mark> tags and use appropriate CSS. That's what I do when I need this!\n. Closing this then, let us know if you need any more help and we can reopen it!\n. Do we set the size with CSS? If not, we should before merging this.\n. Thanks!\n. This can be done with a plugin. I'll let someone comment on which hook.\n. Thanks!\n. First off, thanks for contributing!\nThis has come up before as a request, basically people need the ability to add custom labels to their code snippets beyond simple language. I suggest we modify show-language to be sufficiently broad and customizable to include these use cases (e.g. perhaps have a setting about where to take the label from that is a function.) instead of having a dozen plugins that do the same thing with minor differences.\n. Hi there Sandro, thank you for contributing to Prism!\nHowever, I think this is a stylistic decision that should be left up to the authors, not something we should bake in to the default stylesheet. Therefore, I will close this PR. I hope this does not put off you off from future contributions!\n. Thanks!\n. Thanks!\n. Oops, sorry, I should have noticed! Thanks!\n. Yeah, this looks like a bug on our end. Note that if the JSON was formatted properly, the highlighting works.\n. @snakeman21 We typically don't just add tutorials on our own, someone sends a pull request and we merge it. Feel free to send a pull request to remove the dead link and add your tutorial :). Thx!\n. Yeah, I've often thought the current theme should be the default on the download page.\nThat should be relatively easy to implement, and a good first PR!\nBtw, we should add a \"good first PR\" label for issues. I would add it but I'm not sure if there's a standard wording, and searching didn't yield any good results. Anyone knows?\n. Why close this?\n. Thank you!\n. You can use descendant selectors, like code.language-css .important and code.language-ini .important.\n. I was suggesting that you use these selectors to style .important in CSS and INI blocks differently.\nWe try to reuse classes otherwise the CSS files would be unmaintainable. Agreed though that important seems an odd choice. @aviaryan, perhaps you can explain your rationale on picking that? Is there something more appropriate?\n. My usability 2 cents: I would be opposed to specifying line numbers for collapsed sections. That's very fragile and unmaintainable. It would be good as an override, but not as the only way to collapse sections. Sections should be determined by code structure.\n. True. Alternatively, how about it requires the keep markup plugin and uses <details>/<summary>? That'd be more semantic too.\n. Nice! While <details> and <summary> does most of the job decently, there might still be value in a stylesheet-only plugin that makes it more suitable for code folding. E.g. right now the arrow of the summary messes with the code alignment. Also, there is no arrow indicating where the folding region ends.\n. No, replacing semantic elements with spans is terrible. \nWhat is not possible exactly?. Thanks!\n. Keep in mind that themes do more than just change colors, e.g. we have themes that add striped backgrounds, shadows, borders etc. We don't want to limit what themes can do.\nAlso, the main issue with generating things with gulp is that every theme needs to have tokens for every single language, regardless whether the language is actually included or not, which is very counterintuitive (hence why we reuse token names now, which is also counterintuitive, but less so).\n. If we use Sass, how will we build these custom builds? There is a JS port of Sass, but it's not exactly mature yet\u2026 \n. AFAIK node-sass uses libsass which is C++, not JS.\n. WE HAVE TO DO THE COMPILATION IN THE BROWSER. That's what I've been saying all along. We are hosted on Github Pages, which does not run any server side code, and I want to keep it that way. Given that Prism is a non-profit project that is not bringing anyone a single dollar, costs must be kept low.\n. That's the one I was referring to earlier.\n. Prism is already doing that with .token.tokenname, but that doesn't prevent existing rules for .tokenname from leaking into the syntax highlighting.\n\nI'm desperate to find ways to work around these problems, and I'm offering suggestions. \n\nWhat you don't realize is that for many people, human readable class names is an advantage and one of the reasons they use Prism. We are certainly interested in preventing clashes, but not at the expense of one of our primary advantages. You don't seem to be suggesting any solution that solves these problems without sacrificing this (also, backwards compatibility!). \n\nWhy is no one interested in even discussing these problems with such an enthusiastic and committed user?\n\nProbably because we're all doing this on our free time, which is very limited, and there are a lot more issues to attend to than this. Maybe if you started reviewing some pull requests we'd have more time to respond to issues like yours. . Thanks!. Interesting. We should set up a fund or something, so that the maintainers would also get something, since they do most of the work these days. What do other projects do?. Yup, the Keep Markup plugin does what you want!. I published manually, and tried to configure Travis to publish automatically from now on, but I doubt that will work\u2026 Anyhow, since 1.6.0 is on npm now, closing this.. Is there any info in master that we should retain or is it sufficient to delete the master branch and rename gh-pages to master?. Awesome thanks, will do it in a few days (currently rushing to meet a deadline)!. Sorry for dropping the ball on this \ud83d\ude33\nIf you decide it's a good idea, I can still do it.\nPerhaps we can leave the gh-pages branch intact as an archive to avoid breaking people's code and just start using master for all intents and purposes, including Github Pages?. Ok, I just set Github Pages to come from master, and set master as the default branch.\nAs far as I understand it, we were using gh-pages as a dev branch and publishing releases to master, right?\nWe need to decide on a few things:\n\nAre we going to now use master as a dev branch?\nIf not, are we going to have a separate dev branch? If yes, are we going to have a separate branch for releases, like master used to be?\nAre we going to keep updating gh-pages or just freeze it in time? What are we going to do with existing PRs that are for gh-pages?. Autolinker has a candidates array with token names that are candidates for autolinking. If we make this a property of Prism.autolinker then external devs can modify it for their purposes. Would that solve your use case @EliasCK?. Thanks for contributing!\n\nES6 is still JS, so not sure I understand the need to distinguish. That said, I'm not opposed to this PR if the others think it's ok. \n@spen  Do you need this to be in the core or would a custom alias work for you guys?. > By the way, the solution I've used for the related PR is to manually alias the language like so\nI think this solution is fine, if it works for you. This is a perfectly good use of Prism's API, and it was designed to make aliases easy to define on purpose. If many people need the es6 alias we can always revisit this, but I'd be opposed with adding it just for this.. Awesome @Golmote is awesome!. Thanks! See comment.. Thanks, merged!\nYeah it does, but it could be as simple as:\njs\n(window.Prism = window.Prism || {}).manual = true;. Oh, right. The check for _.manual should be in the callback, not before attaching the event! Is there any problem if we change it to that?. I think that's ok, since this is much more robust :) What do you think?. Ideally it should be in the docs, alongside the docs for data-manual.. @garretwilson The problem is that we need to reuse token names across languages, otherwise every theme would need to be updated for every language, which as you can imagine, does not scale. It's indeed a tough problem, if you have any ideas, please post them in #1055. However, complaining about the current state of things without proposing an alternative is not very productive for any of us.. > If there are no <?php tags, then it assumes, that it is pure PHP code, which could be wrong:\nI don't think that's a huge problem (they can use markup in those cases), as long as it supports the shortened PHP tags as well (<?= etc). Though I don't see why we can't check if a PHP tag is present and use the markup definition if not. . Ah yeah, excellent point! Completely agree.. I've added a few comments, though I'd wait for some more review from the other maintainers before merging. \nBut I'm really excited about this! I assume you're using Prism in specs then?. I\u2019m fine with removing it. :)\nI don't think we need to add a pre-init option for it, as @mAAdhaTTah pointed out, there's a hook if someone needs it desperately.. I'm fine with it :). Thanks!\nPS: Nice username :P . > That's not the usual reaction from Greeks!\nHaha, I thought you chose it ironically :) Also that dude seriously needs to chill, geez.. > Seemed innocent enough until those real Papandreous got into all those scandals and bankrupted the country ;)\nTrue, though they also passed many laws to bring the country up to date with other developed countries, such as the gender equality laws of 1983, or civil marriage in 1982. I dislike PASOK as much as the next person, but they did some good things too, \u03b3\u03b9\u03b1 \u03bd\u03b1 \u03bb\u03ad\u03bc\u03b5 \u03ba\u03b1\u03b9 \u03c4\u03bf\u03c5 \u03c3\u03c4\u03c1\u03b1\u03b2\u03bf\u03cd \u03c4\u03bf \u03b4\u03af\u03ba\u03b9\u03bf :). What value of white-space causes this? Could you define what \"chaos\" is? Even better, could you provide a testcase that reproduces the issue?. Could you provide a bit more context? Where does var-1 appear in your code? Pasting a bigger code snippet that contains this would help\u2026. I disagree, negative numbers are numbers, not an operator and a number. It's very easy to convert our number regexes to include signed numbers, in fact I'm surprised they don't already. @Golmote, @zeitgeist87 what do you guys think?. What if we convert it to (?:\\B-|\\b)?\nOr we could make it an operator. . (?:-|\\b) would fail with prefix decrement operators like --i;.\n\\B is the opposite of \\b: \\b matches at a word boundary, e.g. non-word character before a word character. \\B matches a non-word boundary, i.e. when both characters are of the same type, either both word characters or both non-word characters. Since - is a non-word character, it would match before it when it\u2019s after another non-word character. Now that I think about it, that would also fail for --i;. Sigh :( . Yeah, or use the lookbehind flag\u2026 Sigh, true lookbehind in regexps cannot come fast enough :( . Ok! Would probably simplify some regexps too :) . >  I have to imagine that anyone who knows how to inject new DOM nodes into the page can figure out how to run the JS api, but you would know better than I.\nThey might be using another library that injects the HTML, through an HTML-based API. Remember that Prism is also a JS library, but we have many users that don't know JS. Prism is not the only library with an HTML API :)\nI guess a plugin makes sense though. Good idea!. Don\u2019t we have a plugin that allows a custom prefix for classes @Golmote @zeitgeist87? Changing the default classes is impossible at this point for backwards compat. Even if it wasn't for backwards compat, one of the things people love about Prism is its sensible class names, and as long as there's a way to optionally add a prefix, I don't think we should change that.  . Excellent! Thanks @Golmote, closing.. I think that's overkill, and these are technically not properties anyway. No strong opinion though\u2026. IIRC there's a syntax for init that lets you specify plugins by id and fetches their URL from the cloud. . Any chance you could make an online testcase for this? Thanks!. That probably happens because the Custom Class plugin doesn't come with any CSS. Is there any actual issue?. Technically, the site told you nothing. It's not the site's fault you were peeking at the console. AFAIK there's actually no way to client-side check if a file exists without a 404 showing up in the console.\nSo, as long as there's no actual issue, I'm closing this. Feel free to reopen if there is!. Yeah, sorry for the misunderstanding, this does look like a bug. Probably a bug with the site though, not with your bundle, so still try downloading, I bet there won't be any issue.. The first issue seems normal: Custom class names don't also rewrite the CSS files, you would need to do that manually based on your prefix.\nAbout the second issue (TypeError), can you provide an online testcase that reproduces it?. LGTM. Note that this also allowed invalid 5 digit formats, but eh, Prism is not a linter.. Thanks for contributing!\nHowever, we tend to avoid duplicating expressions, and instead prefer to point to them by reference. This way, they will always be in sync. You could add a line under the language definition that does this.\nPS: Nice theme! Yours?. Merged, thanks!\nPlease consider releasing the theme somewhere, it's gorgeous.. How are you including Prism? Did you build a download from the website?. If you type Prism in the console and press enter, what do you get?\nThat will help distinguish Prism not actually loading vs Prism loading but not running.. I don't think that was the problem. Perhaps you were adding them to the page after Prism had run, in which case calling Prism.highlightAll() manually should solve it.. LGTM. Thanks!. You can use the API! http://prismjs.com/extending.html#api. I wonder if something like this would help, but where the mutation observer tracks the content of the <code> elements, not just new ones. Then every time Vue updates the <code> element, Prism automatically highlights it.. @grayghostvisuals are you using a recent version of Prism? @Golmote @zeitgeist87 Didn't one of you push a fix for this ages ago?. Could you try redownloading to see if the bug is fixed? You can find a link at the top of your source file that will maintain all parameters.. Yup, @Golmote is right, sorry! . > I heard that having extra space may cause problems during the class string manipulations\nOnly for extremely sloppy code, which doesn't typically make it to big libraries. @kylekatarnls is right.. Hey, thanks! Is there an online demo of this fix anywhere?. Thanks for the demo, that was fast!\n\nI realized that this removes the 'curved' dropshadow\n\nYeah, that would be a problem I\u2019m afraid\u2026 :/. Thanks!. It is intentional, but you can easily override it with CSS and set background: none :). Is there any actual reason to remove that space? It's perfectly valid and browsers deal with it just fine.\nThe only argument I've seen about it is variations of \"I don't like how it looks\", which is not a serious reason to do code changes, especially changes that hinder code readability.. > Yes, you're right, the only reason people want to remove it is \"aesthetic\".\nSelective aesthetics may I add. The proposed change to Prism\u2019s code is much less aesthetically pleasing than an extra space IMO.. Isn't this a subset of the Normalize Whitespace plugin?. @Golmote it could inherit from C++ and just redefine the parts that are different.. Can't we autodetect this instead of requiring some special parameter? I believe worker environments can be detected, so why do we need this?. I see. Can we instead explicitly handle case 1 somehow? That way including Prism from a worker would just work without any special syntax, and we can use whatever special syntax we want inside Prism when we create the worker for async highlighting.\nNot that I can think of a way to do this right now, but maybe you have an idea?. Ok, I trust your judgement @Golmote :)\nAnd you're right, I guess it's not that common.. Yay!! \ud83c\udf89 \nYou rock!. Can't see why it's useful for other languages, but can't see any harm either.\nI guess other languages exist that have a lot of angle brackets?. @Golmote Thanks for doing this then!!. Yeah, that\u2019s definitely a bug\u2026\nWhat if we have the tag pattern be matched before keywords?. Oh I see, you fixed the highlighting for some of the plain text, but not all cases!\nSorry, I hadn\u2019t seen the linked issue before.. I\u2019m pretty late in the game so I might be suggesting silly ideas that you've already considered, but instead of merging the two languages like this (where you have no control over how it works), have you considered using the JS def (cloned obvs), adding a token to it for the tags (before keywords) and then matching HTML inside it?\nIsn't that how we usually do embedded languages?. Yes, definitely not globals! Imagine having 200 globals in the future, for 200 phrases.\nHowever, the functionality is definitely useful.\nProbably the ideal thing would be to inherit data attributes, like @Golmote suggests.\nSuch attributes should probably have a prefix, like data-prism-phrase-copy or data-prism-phrases with a list of key-value pairs separated by colons and commas.. Me too! Thank you!. What is it trying to override?. Ugh, I hate specificity. Merged, thanks!. LGTM. If we haven't yet folded gh-pages into master we can just go ahead and merge this as-is.. Looks good to me. I suspect this was copied from JS, and the punctuation was never adjusted.\nBtw we should probably have common tokens as re-usable variables or something (E.g. Prism.NUMBER). Currently every language needs to redefine numbers, and in most cases they're the same... We could also have factory helpers, e.g. Prism.keywords(\"foo\", \"bar\", ...) that generate regexes for common things.\nWhat do you think?. Yes, that would be great!\nYou can probably copy the one from Mavo as a starting point: https://github.com/mavoweb/mavo/blob/master/.eslintrc.json. Hey @RunDevelopment, thanks for submitting this!\n\nDefinitely need @LeaVerou & @Golmote to weigh in on this ruleset.\n\nYes, this needs serious review by all of us.\nI see a ton of changes (229 files changed?!). I would prefer to pave the cowpaths and pick rules that are actually mostly enforced already, than to make such extensive changes to the codebase.\nI also disagree with several of these rules. Many seem to be applying an arbitrary code style that neither matches the project, nor has any objective reasoning (e.g. enforce quotes in object keys?! Why?!). Also, our indentation is not tabs, it's smart tabs, i.e. tabs for indentation and spaces for alignment.\nI'm also opposed to overlinting, as it tends to get in the way. Let's start with a small set that we mostly follow already, and expand as needed. I suggested what I consider a good starting point above, but did not see a response. Is there a reason you feel we need more rules? Do you disagree with any of the rules there?\nComments would also be useful for reviewing this, both now and in the future, so that people don't have to look up every single cryptic ESLint code to understand what's going on.\nI also disagree with using errors for this. Anything related to linting should just be a warning. An error is something that would actually break code, not code style!. > Do you mean \"the names of tokens are surrounded by single quotes\"?\nThe rationale behind this is to clearly distinguish between token names (e.g. class-name, number) and Prism properties (e.g. pattern, rest). This makes language definitions way easier to read imo.\nTo be clear: This only applies to language definitions.\nOk, agreed.\n\nI actually plan to reintroduce the spaces before we (hopefully) merge but I want to apply that rule to all files consistently and not just to core. (And even core ignores that rules in many places.)\nBut because there is no nice fixable ESLint rule for that (at least nothing that I know of), it is going to be tedious manual work, so I want to do that right be merging so that there isn't even the possibility that I will have to do it again.\n\nOk. Thank you for being willing to do the tedious manual work.\n\nI simply consider many rules of ESLint to be very useful and think we should encourage contributors to follow best practices and avoid possible errors (by force).\n\nI disagree with blanket adoption of \"best practices\" lists. We should evaluate each of these practices and see if we want it in our project.\n\nI honestly did not know that this was possible with ESLint because JSON does not allow comment by default.\nI will add them when I have time.\n\nThank you. I will wait until then to review rules in more detail.\n\nI made this decision with Travis CI in mind because if a build fails, the contributor will see that change is required without anyone having to tell them. This is supposed to speed up the review process as the linter will point out common mistakes like wrong indentation.\n\nI'm generally opposed to linting by force. Linting is helpful to point out potential issues, but ultimately, most rules are rules of thumb and should not be followed in cases when they doesn't actually help readability or maintainability. Also, linting is not just utilized in Travis, but also by many editor plugins. It's very annoying if a syntax error is highlighted the same way in my editor as a stylistic error.\n. Also the helper that generates keyword regexes could be general enough to be able to combine other regexes as alternatives. Then we could have a Prism.NUMBER for the actual numbers, and then we could do something like Prism.or(Prism.NUMBER, 'NaN', 'Infinity') for JS numbers for example. I think something like that has the potential to simplify many grammars, if done well.. > Doesn't this imply\nHow does it imply that? \ud83e\udd14. That defeats the whole point of using CSS variables, since any combination of theme and language would have to be pre-compiled.. If the others are ok with it!. No strong opinions, but is our API large enough to warrant something like this?\nOn the other hand, keeping things DRY is always a good argument.. As I have expressed in the other issue, I disagree with any linting being classed as \"error\". It should be warnings, and errors should be reserved for actual JS errors. A wrong indent is not the same importance as a JS parse error that breaks the whole script.. Oh I wasn't even thinking about CI. I primarily find ESLint useful as an authoring environment plugin that highlights errors and warnings inline. I would find it frustrating if it highlighted syntax errors and stylistic issues the same way.. I\u2019m not sure I agree with having this in clike. It doesn't apply to every C-style language, e.g. JavaScript doesn't need this.\n. Yes, I realized that a bit later. That's fine then. :)\n. hasMinJS is not needed. Everything should have minified JS, if not it\u2019s a bug.\n. What\u2019s the point of hasCSS: true? It should be true for everything with few exceptions. Only those exceptions should be marked. Perhaps with a key like noCSS. \n. Why the < or the &gt;? Neither are supposed to match: Prism converts < to an &lt; but leaves > intact, since no conversion is needed there...\n. Is global really needed? Can't we clump it together with keyword? We should be reluctant to add new token types unless absolutely required...\n. Same as above for &gt; and <\n. Instead of adding a new token, you can use lookahead for those keywords ((?=::)) and clump :: together with general punctuation. Just an idea, haven't thought it through.\n. Good point. How about you make it a child token of variable?\nJust an idea to consider, you don't have to.\n. Have you tested with the latest version? I believe I worked a bit on that part of Prism a few weeks ago...\n. Yes, I mean < is encoded, but > is not. Also, is deliminator a word? Maybe you mean delimiter or something else?\n. It\u2019s simply not needed. :)\n. This is not a good idea, as Prism will still iterate over this token and I suspect it even throws errors. Just delete it from the object, with the delete operator, like so:\njs\ndelete Prism.languages.golang['class-name'];\n. This never existed.\n. -ms-border-radius never existed.\n. -ms-linear-gradient never made it on a stable browser. IE10 supports unprefixed gradients.\n. It would be better if this was /^commit \\w{40}$/m\n. Similarly, /\\+[^+\\n]+/m would be better. {1} is implied, so never needed.\nBtw could you give some examples of what this is supposed to match? I have a hunch there might be a logical mistake in it.\n. prism.js is just the version of prism used in the website, you don't need to modify this file.\n. Great point. I\u2019d recommend \u201cinserted\u201d and \u201cdeleted\u201d.\n. - A character class with only 1 character is pointless, just use \\\\ instead of [\\\\]\n- You can avoid a-zA-Z by using the i flag to make it case insensitive\n. Braces don\u2019t need escaping in character classes.\n. I would prefer something like:\njs\nif (o.subtype) {\n    var subtypes = _.util.type(o.subtype) === 'Array'? o.subtype : [o.subtype];\n    Array.prototype.push.apply(env.classes, subtypes);\n}\nAlso please use braces and semicolons per the coding guidelines of this project.\n. I'm generally all for descriptive names, but I believe those are established convention for this kind of thing. No?\n\nSent from my iPhone. Please excuse weird typos and/or terseness.\n\nOn 22 Sep 2014, at 09:00, Jannik Zschiesche notifications@github.com wrote:\nIn components/prism-core.js:\n\n@@ -96,12 +96,16 @@ var _ = self.Prism = {\n        },\n// Traverse a language definition with Depth First Search\n-       DFS: function(o, callback) {\n-       DFS: function(o, callback, type) {\n          for (var i in o) {\n  I know it's not part of this PR, but could we please update the internal variable names to something more meaningful than i and o. We now have automatic minification, so no need to make our life hard here. \n\n\u2014\nReply to this email directly or view it on GitHub.\n. I would argue that this one isn\u2019t common enough.\n. It would be nice to add a few more SGML/XML-like languages (xml, svg, mathml)\n. This looks like a file extension. Prism should be readable. language-py is not very clear (in contrast, other 2 letter abbreviations are common enough that are understandable, e.g. language-js.\n. Yes!\n. Yes!\n. I\u2019m opposed to having these version numbers in language identifiers, unless they are absolutely needed (and the only case where they are is perhaps file highlighter, but that has its own array of aliases)\n. I\u2019d argue that === is not needed when we know that both variables are of the same type, but no strong opinions.\n. Perhaps we should have a swap utility function hanging on Prism.languages, to make this easier...\n. These could be a single regex, with the different bases separated by pipes (|). Yes, this is more readable, but the single regex will be more performant (and the [-+]? is shared). I\u2019m fine with this too though, there\u2019s certainly a tradeoff here, and both options seem reasonable.\n. This is fine. Prism is not a linter and things don\u2019t have to be 100% accurate. In this case, the only drawback would be that an incorrect number would be highlighted. That\u2019s perfectly fine and actually better than trying to only highlight correct numbers. Prism\u2019s primary purpose is to make code readable, not to highlight errors. (keep that in mind for the number token too)\n. Wouldn\u2019t it be better if this was an array of strings and objects (string when filter & language are the same)? It would only take a line to handle that, something like:\n\njs\nvar filter = filters[i];\nfilter = 'filter' in filter? filter : {filter: filter, language: filter};\n\u2026and we would save a lot of repetition :)\n. new is not needed, just RegExp(...) works fine ;)\n. space after if, for etc keywords please :)\n. Space after commas please?\n. Same comments as for Haml filters.\n. Yup, it\u2019s fine. The idea is, we want to minimize matching correct code wrongly, but the way we match incorrect code is whatever suits us, readability and perf-wise.=\n. What\u2019s the point of separating these two groups? This is not done in any other language. Yes, readability matters, but I think here the tradeoff is not worth it. \n. Why are we redefining numbers? At first glance, this seems almost identical to JS numbers\u2026\n. Same as above. Why are we redefining these?\n. This should be inside a conditional that checks if markup is available (see the markup definition for such conditionals, it has two).\n. This also looks like it could be a single, pipe-separated regex\u2026\n. Why are there two patterns here? Looks like they could be merged. Please do not overuse arrays. They were added fairly recently, to solve very specific use cases\u2026\n. I think we should then add the + in the JS one, and use that. If AS has no hex numbers, then they won\u2019t occur and it won't be applied. If somebody includes hex numbers in AS code, this is invalid code and we bear no responsibility to highlight it correctly. :)\n. Yup, it should.\n. Thanks!\n. \"plugin\", singular please :)\nAlso, \"will have the class keyword-if as well\". It will still have the class keyword too, right?\nstylesheet -> CSS rules (stylesheet implies separate file, which is not necessary)\nApart from that, looks ok!\n. We most certainly don\u2019t. Think of CSS styling that adds a background too. This should be converted to a lookahead. Thanks for catching that Golmote!\n. I just checked and we are indeed using this in clike. This should be fixed there too\u2026\n. Ah yeah, even better!\n. Wow, a lot of repetition here. Why not define one object and clone it?\n. Why escape the angle brackets? Also + doesn\u2019t need escaping inside a character class. \nAlso, what\u2019s the negative lookahead trying to prevent? What happens if the line starts with e.g. ++ or >>?\n. Why not just make the closing bit optional then, with (\\/\\*)?? This is exactly what this does, but with more duplication.\n. JSON doesn't have functions\u2026\n. This seems misaligned. Different indent, perhaps?\n. JSON doesn't support single quoted strings.\n. Any valid string is a key, not just [\\w-].\n. How about something like:\njs\n[\"user\", \"host\", \"prompt\"].forEach(function(attr) { node.removeAttribute(\"data-\" + attr); });\n. It\u2019s not about doing it in one line, it's about removing repetition. Actually, I wouldn't do it in one line, I would format it as 3, for readability. Anyhow, no strong opinion here.\n. If they're just tag names why comma separate them? Why not just space-separated?\n. You don't need multiple push calls. push accepts multiple arguments.\n. Why the filtering?\n. Just call .trim() before splitting then :)\n. Small remark: Readability is more important than strict adherence to a certain line length. Please don't break comments in multiple lines unless the second line is actually long enough to warrant this.\n. Why do these elements need to be specifically marked? Can't we just check whether they are processed by Prism? No other plugin requires elements to be marked, unless it's to provide setting values. Perhaps I'm misunderstanding this, dunno.\n. I would rather we added a separate polyfill for flags instead of refactoring our code not to use it. That way, once support is more broad, we can just ditch the polyfill.\n. bool is not a thing in JS. boolean please.\n. I would be in favor of minimizing the number of changes required. It would all be done here:\njs\nmanual: _self.Prism && _self.Prism.manual\nThat way, there's no need for the code changes above!. What's the point of calling insertBefore for webidl right after you've defined webidl? insertBefore is used to modify existing languages, if you're defining a language yourself you don't need it, just put \"class-name\" in the object literal. \nAlso, your dependencies list C-like, but here you seem to be extending C. These are two different language definitions.. Just add the \"class-name\" token before the keyword token. There's no need for it to be separate. What the cpp language is doing is weird too, @zeitgeist87 what was the rationale?\nAs for the dependencies, I don't mind which one you inherit from, just be consistent between your code and the components declaration, otherwise people will get a download that doesn't work. Perhaps look over their examples to decide which of the three is closer to WebIDL?. I see. So the main blocker here is that @grorg needs to decide whether he's extending C, C++ or C-like. I think the latter is probably a better fit, but he knows WebIDL better.. Yes. We could use an iframe whose srcset is set dynamically for the demo :)\nPS: Awwww, I wish we could remove <script> elements and have their effects undone, that would be so nicely reactive! :) . I'm not a fan of dangling commas. I see the benefit in multiline cases, but they are also less natural and I think optimizing our code for tooling is a slippery slope. But my objection is not so strong that is should hold this up if the rest of you agree. If you don't however, do count it as an objection.. ",
    "kizu": "What exactly would break copying? There would be only some CSS styles like backgrounds (like small light gray circle for nbsp), I don't think those would break anything.\n. But we can use gradients! Like this \u2014 http://dabblet.com/gist/3092469 \u2014 it's very quick rough example, but you can get the idea.\n. I'm for the data- attributes. Also, it would be cool to expand this to be able to mark not only lines, but any symbols.\nI can see such syntax for it:\n- data-highlight=\"10\" \u2014 highlight the 10th line;\n- data-highlight=\"10..14\" \u2014 highlight the lines from the 10th to 14th;\n- data-highlight=\"10..14\" \u2014 highlight the lines from the 10th to 14th;\n- data-highlight=\"4, 10..14\" \u2014 highlight the 4th line and lines from the 10th to 14th;\n- data-highlight=\"10:4..10:13\" \u2014 highlight the symbols 4..13 on the 10th line.\n- etc.\nThe exact syntax and the data- name can vary, but this could be really useful.\nAnd I agree that it can be a plugin over the Prism, 'cause it's not something that everyone would use.\n. Cool! The only minor fixes can be moving the highlightings before .language-css and adding pointer-events: none to it, so it wouldn't stand on the way of text selection.\n. Well, then I'm for .token for each token selector.\n. @LeaVerou btw, GitHub have a way to see any diff without the changes in whitespaces: you can just add ?w=1 to any url with diff and get it nice and clean, so diff of this PR would be this: https://github.com/LeaVerou/prism/pull/63/files?w=1\n. There is a really nice page on GitHub for this (and there is always a link to this page at the top of every GitHub repo), maintaining this by hand is, well, strange. In theory it could be done automatically by using a bot with hooks, but it would be still useless overall.\n. ",
    "jonmilner": "@LeaVerou First of all, I think this project rocks. Thanks for all the work you've done to make it so simple for people like me to easily add syntax highlighting to our projects.\nThat being said, I'd like to offer the first \"complaint\" about a real collision on a real project that I'm working on.\nI'm styling a UI component that my team has decided to call a \"tag.\" Tags look like this:\n\nHere's CSS I've written to style these tags:\ncss\n.tag {\n  display: inline-block;\n  max-width: 200px;\n  margin-bottom: var(--base-spacing-xs);\n  padding: var(--base-spacing-xs) var(--base-spacing-sm);\n  border: 2px solid var(--base-accent-color);\n  border-radius: 100px;\n  color: var(--base-accent-color);\n  font-size: var(--font-size-sm);\n  font-weight: var(--font-weight-bold);\n  line-height: 1;\n  text-transform: uppercase;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n}\nThe problem here is that <span class=\"token tag\">...</span> is inheriting the styles from our .tag component.\n\nObviously, when removed, the styles are fixed: \n\nI understand this may seem like an annoying request... If I had the domain knowledge, I'd be happy to submit a pull request on this issue.\nOf course, I'm able to fix the issue myself if I were to prefix my own class names, or add the increased specificity by nesting my selectors, e.g...\n\n...but the way the classes are currently named in PrismJS prevents it from being used in combination with literally any other CSS library or custom CSS that include class names such as .token, .tag, .punctuation, .number, etc. at the root level.\nThe solution @kizu suggested seems pretty standard, and has no obvious drawbacks.\n. Hey @LeaVerou, thanks for the quick response.\nI think prefixing all Prism selectors with code is an excellent solution that would solve this problem.\nFor what it's worth, another popular syntax highlighting library, Rainbow, has the same issue.\n. ",
    "mathiasbynens": "Oh, super! \nHow about making this more clear in the documentation? Something like:\n\nWhile syntax highlighting is not supported in IE6\u2013IE8, Prism.js will not throw any errors in those browsers.\n. A plugin that adds IE6\u20138 support would be perfect++ :)\n. I did notice you said IE8 only, hence my previous comment: \u201ca plugin that adds IE6\u20138 support would be even better\u201d. Sorry for the confusion.\nWho bothers with IE6-7 anymore?\n\nI do for some client projects, and for pretty much all browser-based open-source projects I release.\nIf I release a script that works on IE6 and I want to use a syntax highlighter for its documentation, I wouldn\u2019t use one that only works in modern browsers \u2014 I would want the documentation to be highlighted in all browsers the script itself supports.\nOf course, not all of Prism would have to support IE6+. E.g. instead of calling highlightAll, end users could avoid the querySelectorAll calls by fetching the elements with e.g. jQuery and simply calling highlightElement on each of them instead.\n. /cc @jdalton \n. The same line can be removed from prism-dark.css and prism-funky.css, but I\u2019ll leave that up to you :)\n. @jzaefferer How would that work exactly, given Prism.js heavily relies on (non-ECMAScript) DOM extensions for most of its core methods?\n. @LeaVerou Oh, that\u2019s good news, then!\n. You\u2019re welcome :) You may want to tweak the background color value btw \u2014 perhaps there is some color that matches the Prism design better. (I\u2019ve just used a light-blue-ish color that resembles the default selection color on most systems.)\n. The nasm highlighter works well for various assembly flavors, but I'd rather not want to mark non-nasm assembly code blocks as nasm just to get syntax highlighting.\nCould we perhaps do Prism.languages.asm = Prism.languages.nasm; in Prism core?. ",
    "slevithan": "I solved it in RegexPal by using outerHTML.\nThis comment is in my circa 1997 RegexPal source code:\njs\n/* outerHTML is used to work around the fact that IE applies text normalization\nwhen using innerHTML, which can cause problems with whitespace, etc. Note that\neven this approach doesn't work with some elements such as <div>. However, it\nmostly works with <pre> elements, at least. */\nAnd here's my old code for this:\njs\nfunction replaceOuterHtml (el, html) {\n    replaceHtml(el, \"\");\n    if (el.outerHTML) { // If IE\n        var id = el.id,\n            className = el.className,\n            nodeName = el.nodeName;\n        el.outerHTML = \"<\" + nodeName + \" id=\\\"\" + id + \"\\\" class=\\\"\" + className + \"\\\">\" + html + \"</\" + nodeName + \">\";\n        el = $(id); // Reassign, since we just overwrote the element in the DOM\n    } else {\n        el.innerHTML = html;\n    }\n    return el;\n};\nThe replaceHtml function takes a node out of the DOM (for performance reasons), updates its innerHTML, then puts it back. Since replaceOuterHtml kills the old node, it returns a reference to the new node so that variable references can be restored (el = replaceOuterHtml(el, html)).\n. ",
    "ccampbell": "@LeaVerou I realize we have competing projects, but I think prism looks nice.  I have the same problem in https://github.com/ccampbell/rainbow and haven't had the time or energy to find a fix for it.  \nI was able to do some hackery to get it to somewhat work, but I ran into the same issue where some linebreaks were just missing completely.\nYou can look at the discussion here:\nhttps://github.com/ccampbell/rainbow/pull/69#issuecomment-6769764\nIt's nice that most developers don't use these browsers so therefore the target audience for showing code samples is usually people using modern browsers.\n. ",
    "danielwertheim": "Just curious, is there anyone that has managed to make a plugin to support IE8?\n. ",
    "lukaszlenart": "I'm using Prism and calling it manually to apply highlighting to dynamically rendered html sections but under IE8 I get such error message:\n\nI'm using such a CoffeeScript code\ncoffeescript\nPrism?.highlightElement $('#element-id pre code')[0]\nThe issue happens when loading prism.js, do you have any idea how to solve this?\n. @apfelbox here you have\n\nI think the problem is with WorkerGlobalScope and when I removed the whole highlighted code the previous issue is gone but new one appeared:\n\n. I'm not using the ie8 plugin, I have solved the problem with \njavascript\n  if (document.addEventListener) {\n    document.addEventListener('hashchange', applyHash);\n  }\n. (must test on other browsers)\n. highlighting doesn't work at all in IE8 ;-) I was wrongly assuming that Prism object is null/undefined under IE8 and base my logic on that - unfortunately it is a valid object so my Prism?.highlightElementdoesn't work as I expected.\n. I don't care about supporting IE8 - just don't break anything in IE8 ;-)\n. Right now I've implemented my changes and testing them, when new version of PrismJS will be released I will give it a try :-)\n. hm... with css, my first thought was about some Prism plugin which I can write, but will try with CSS first, thanks!\n. I ended up with \nscss\ncode.one-liner {\n  .tag > .tag > .punctuation {\n    &:before {\n      content: \"\\A\"; \n      white-space: pre;\n    }\n  }\n}\nbut it isn't perfect :\\ Anyway thanks for your effort!\n. ",
    "apfelbox": "Could you please use a non-minified version, so that the error location is more narrow?\n. @danielwertheim there already is one: https://github.com/LeaVerou/prism/tree/gh-pages/plugins/ie8\nalthough it is not linked in the plugins page or in the downloader on prismjs.com. \n. Ok, addEventListener is in fact undefined in IE8, but I will need to take a closer look at the first example.\n. I will take a look at it - unfortunately not before I can use my other computer (currently running 10.10 and parallels doesn't work on it anymore (just like everything else doesn't work anymore, yay)).\n. @mrbrdo You can extract the content and resubmit it as new PR (if @samflores is ok with that)\n. A python highlighter was added in the meantime.\n. The prism version used in the github pages (https://github.com/LeaVerou/prism/blob/gh-pages/prism.js#L397) does support Infinity, NaN, numbers and hexadecimal numbers. All other version are out of sync (and do not have these features).\n. (Added javascript and java definitions as well)\n. Actually, this PR fixed something different.\nIn the current repository, all languages are defined in 3 places:\n1. In components/prism-#lang#.js\n2. In components/prism-#lang#.min.js\n3. In prism.js\nThis is fine, because every place serves a different purpose, although these 3 definitions are out of sync. (for example in #35 a patch was made to 1., but not reflected in 2. and 3.\nThis PR should fix that.\nRegarding your question:\nI think it would be a quite nice idea, something like #21 tries to do.\nAlthough I am not quite sure, how much of the syntax can be actually shared.\n. Basically what I did ;-)\nBut please keep in mind to re-add the omitted trailing semicolon in the minifed versions (see problem in #39).\nAlso in some cases the definitions in /components/... are more frequent, sometimes it's the other way round: the definitions in /prism.js are more frequent.\n. Which file did you download?\n. It seems that there is a problem in the Line Highlight Plugin. Could you download the Development version, the error message is more detailed then.\n. Codekit uses Uglify.js, yes.\nOn which website and with which Chrome version did you see the error? I tried to reproduce it, but everything works correctly, here.\n. Strange error message, simple fix:\nJust add the (missing) semicolon to the line starting with Prism.languages.java=...\n@LeaVerou this is a bug in the script which generates the bundled js on the page.\nLong explanation:\nIf you take the core js file and minify it using uglify.js, it omits the last ; since it is not needed (in this script). \nBut if you append some other scripts to the end of the file (in this case the line-highlight plugin), the missing ; becomes an error.\n. I also noticed this error (FF for me), although I could not yet take a look at it.\n. No, it's not yet fixed.\n. Seems to be fixed now - because we join the language definitions with a ;.\n. I can confirm this issue.\nAlthough it is not quite solvable by prism: since (nearly?) every browser has it's own default line height, prism has to choose one (depending on the font-size probably).\n. The benefit of doing it in JavaScript is that you can use the existing value, if there is one. So if somebody has set a line-height, it automatically applies to the <pre> as well. If you just define it in the prism stylesheet, one would override the line-height (and as suggested the font-size) of the theme - what probably is not wanted.\n. We should probably close this, Prism should work on node.js already.\n. Maybe we could just include a working & proven domready function (which matches our browser support table)? \n. I am not sure whether this should be implemented.\nDon't get me wrong - I would love to be able to just use it with the regular CommonJS require-structure, but we need to touch every single plugin & language definition - this is a lot of work.\nAlso we need to make sure that everything still works if we just through a couple of prism files at a page - without configuring anything.\nIs there a recommended way to handle a plugin structure with AMD?\n. For point 1 & 2 see #597.\n. @javatlacati did you notice that you are gravedigging this thread? I think in the last two years a lot has changed. :wink:\n. Both are fixed.\n@Golmote @LeaVerou this can be closed.\n. Do you have a test case? I currently can't reproduce the issue.\n. Would be nice.\nI tried it with this code and didn't get an error:\n``` html\n<!doctype html>\n\n\n\nPrism Test\n    <link rel=\"stylesheet\" href=\"/_Github/LeaVerou/prism/themes/prism.css\" />\n    <link rel=\"stylesheet\" href=\"/_Github/LeaVerou/prism/plugins/wpd/prism-wpd.css\" />\n</head>\n<body>\n\n    <pre><code class=\"language-css\"><?= file_get_contents(\"content.css\") ?></code></pre>\n\n    <script src=\"/_Github/LeaVerou/prism/components/prism-core.js\"></script>\n    <script src=\"/_Github/LeaVerou/prism/components/prism-css.js\"></script>\n    <script src=\"/_Github/LeaVerou/prism/plugins/wpd/prism-wpd.min.js\"></script>\n</body>\n\n\n```\n(installed version: cc36c8567d7aa216114f4215c1e8c361a8420c79)\n. Aha! I can reproduce it now.\n. Ok, found the issue.\nThe wpd-plugin assumes, that Prism.languages.css.selector is just a regex, but if you load css-extras it is not just a regex anymore.\nPatch should be trivial.\n. @hiulit done.\n@LeaVerou could you take a look and merge it, if everything is all right?\n. The real issue seems to be the comment in the string '/*', which marks the rest as comment.\n. See here: #307\n. See here: #307\n. @LeaVerou versions are really important if you build software, which depens on other software (see #165)\n. @jaydenseric is this fixed?\n. Currently in work. Please keep patient just a little longer.\n. @franz-josef-kaiser yep. Although I have to confess that I mainly work on my local machine and just push to my fork as soon as its ready for the PR.\nI will try to change that, that one can see the progress of the work.\n. We now have a v1.0 :balloon: \n. @franz-josef-kaiser I didn't create the tag, I am just the announcer. ;)\nI currently prefer it without the \"v\", but as practically all package manager handle both cases quite well, it is up to the personal taste of the maintainer.\n. I think we could probably close this issue?\nDue to the inherent structure this seems like a \"won't fix\"? @RomainSauvaire @LeaVerou \n. What exactly do you need to keep in sync? Isn't it just the components.js?\nThis file needs to be edited manually anyways, so there should be no issues. The only thing you need to change then would be the download URL in the website.\n(Or am I missing something?)\n. @homosaur because you can't include these files to be runnable. Github serves these files as text/plain therefore it won't work if you include them in a <script> tag (not in all browsers at least...).\nBut: I am currently working on a github setup which would solve all these things. Just a little more patience. :wink: \n. Shouldn't this be the fallback, if I choose an unknown language, too?\n. See here: #307\n. See #183, #155 and #153.\n. See here: #307\n. I have a bugfix ready, which slightly changes the style of the theme:\nNew:\n\nvs.\nold (= current):\n\n(notice the position of the scroll bars - although I actually like the new version better..)\nIf the changes look ok, I will send in the PR.\n. Seems to be fixed.\n. @remy do you still encounter this issue?\n. All right. Thanks for your feedback!\n. @mahnunchik could you please check if you still have the issues after the latest updates to the coy theme?\n. @japborst could you please rebase on master?\n. @japborst you could have just rebased and then force-push in your pull-request-branch. :wink: but it is fine either way.\nThanks!\n. I thought about that, too. There should a generic way (function?) that automatically applies modifications to existing patterns (no matter which format they have (direct RegExp, nested, etc..)).\nI will submit a patch if something comes to my mind.\n. Seems to be resolved by now. If you still encounter this issue, please comment again and we will investigate a bit further.\nCan't reproduce it right now.\n. Could you please rebase on master?\n. @lgiraudel I would really love the get this merged. Could you take a look at the following points?\n- Take a look at the comments in this PR (Rename oldline and newline to deleted, inserted, typo in comments)\n- Rebase your commit on master\n- Add your name in components.js as author & format it as valid JSON (always use \")\n- Probably use aliases to support proper highlighting in the themes (take a look at the documentation here: http://prismjs.com/extending.html)\nThank you very much for your contribution.\n. Ok, for inserted and removed it would be quite sensible to only use special tokens, as I think that in both cases a red / green line is expected and we can't change that without confusing the reader.\nI will merge this now and if you want you can submit a second PR which adds highlighting for .token-inserted and .token-removed to the themes.\n. Thank you for your work! :fireworks: \n. @lgiraudel I know had a closer look and found some issues with the matching:\nWhy did you disallow the - resp. + in the following matchers:\njs\n'deleted': /^-[^-\\n]+$/m,\n'inserted': /^\\+[^+\\n]+$/m,\nWas there a specific use case you wanted to exclude? I am asking because the following diff fails to highlight:\n``` diff\ndiff --git a/components/prism-php.js b/components/prism-php.js\nindex abeb57b..c554a4a 100644\n--- a/components/prism-php.js\n+++ b/components/prism-php.js\n@@ -3,12 +3,12 @@\n  * Modified by Miles Johnson: http://milesj.me\n  \n  * Supports the following:\n- *             - Extends clike syntax\n- *             - Support for PHP 5.3+ (namespaces, traits, generators, etc)\n- *             - Smarter constant and function matching\n+ *        - Extends clike syntax\n+ *        - Support for PHP 5.3+ (namespaces, traits, generators, etc)\n+ *        - Smarter constant and function matching\n  \n  * Adds the following new token classes:\n- *             constant, delimiter, variable, function, package\n+ *        constant, delimiter, variable, function, package\n  */\nPrism.languages.php = Prism.languages.extend('clike', {\n```\n(compare it to the github highlighting)\n\n. Somebody should update the minified version as well.\n. I would rather focus on #248, it seems like a cleaner implementation.\nThanks for the PR, though.\n. I would say we should clean up the structure at first - i.e. separating docs & code.\n. Wouldn't it be worthwile to be able to globally add the adapters? Otherwise you need to specify your adapter in every single code tag.\n. PS: you need to rebase on master.\n. Hmm, it would be possible to expose the plugins via something like Prism.plugins just like you suggested. Will keep brainstorming though, maybe I come up with a good solution (if you don't beat me to it).\n. Duplicate of #180 (& probably #52 and similar issues).\n. Working on this, together with #231 \n. Duplicate of #165 \n. @LeaVerou you could say the same thing about Codekit right now.\nAnd besides: you don't need to know node, you just need to do npm install && gulp xyz.\n. @LeaVerou what do you think? I would say we include it - at least for the people who want to minify.\nSo a random PR can still just include the raw & unminified components/ file but we have a common way to auto-generate the minified files.\n. @ben-eb do you want to rebase your PR on master? Otherwise I would send a PR probably later this week.\n. @ben-eb nice, thanks! I will merge it in the morning, when I have time to look at it in detail (and go for a test run :wink:).\nLooks very good though, thanks for your work!\n. Will do. I also wanted to add a paragraph to the website on how to contribute.\n. This is due to the fact, that some minifiers strip the trailing ; of a file. So, if you just concatenate them, you will get invalid JS.\n(Ok you could make the concatenation more intelligent, but this is a quick and easy fix.)\n. Duplicate of #40 \n. @LeaVerou not a problem, updated.\n. I will test this tomorrow and merge it, if everything works as expected.\n. Looked good.\n. I don't think that this is on the agenda, since you can only achieve it by using Flash (javascript isn't allowed to access the clipboard).\nYou probably need to do a custom implementation with something like ZeroClipboard.\n. @LeaVerou browser support is not very good at the moment and probably never will be (because of privacy concerns)...\n. As far as I know: the existing API mostly handles catching the already fired copy event, not triggering it yourself. You can edit the copied text, but you can't initiated the \"copy\" yourself.\n. It might be worthwile, especially due to the very long list of keywords, if you might be able to sort them alphabetically (for ease of maintenance).\n. @aviaryan pushing in the branch you created your PR from will always automatically update the PR.\nBest practice: create a separate branch just for the PR before sending it. :wink:\n. @aviaryan I would go with ghcolors\n. @LeaVerou if you create a github group for prismjs we can add this repository there.\n. @LeaVerou how about creating a Github organisation and including prism and prism-themes repositories?\n. @LeaVerou you could add yourself to the organization ;)\nAs we are cleaning up the repositories -- this could be the time to separate the website and core into different repositories. I will try to come up with a working solution.\n. @LeaVerou I just saw \"This organization has no public members.\" :wink: \nI was heavily time-constrained by more work in the university and my work at... well, work. I am currently planning on writing up my thoughts on a possible clean up and modernization of some of the code (which would bring its own caveats, therefore the write-up). I will be able to invest more time in my OSS work, so you probably will read more from me again in the future.\n. Looks good to me.\n. Thank you!\n. Ok, so this PR just adds c to prism.js?\nThat is wrong - prism.js is for usage on the prismjs.com only - if you use the library, you should build your own release.\n. Aha! Thanks for the clarification.\nIn fact, the test drive page is broken for every language which has a dependency not included in prism.js.\nThe solution however is not to include everything in prism.js but to either make the loader smarter or include all languages on test.html only.\n. Ah, you are right - will look into overflow: auto.\nWhat do you mean with the shadows? I didn't change anything related to them.\nedit: never mind, found it. Will recreate them.\n. New \"after\" screenshot:\n\n. @LeaVerou the<code> is the scrolling element now, and it still has the max-height\n@tshedor padding-left stayed.\npadding-right was removed from <pre>, so that the distance betweend the scrollbar and the right edge of the container is removed (it was added to the <code> block, so the padding is still symmetrical).\n-top & -bottom made it (in my tests) to not match the background stripes anymore. Will try to fix that.\n. Oh, you already merged it (was typing for a long time :laughing:)\nThanks!\n. Already found the issue, will send in a PR tomorrow. \n. The issue is that workers currently don't work at all, due to an incomplete check for the environment from the node.js-integration. \n. Oh, and found one bug: it currently breaks when setting an explicit height on the <pre>. Will work on that.\n. Yep, another commit coming in in just a few minutes.\n. (accidentally closed)\n. So, the second commit allows the <pre> to have a defined height, like on the downloads-page:\ncss\npre {\n    height: 20em;\n}\nI think this should cover most of it.\nOne issue remains though: if you want to make the code block explicitly larger than the defined max-height: 30em (i.e. 50em fixed) you need to set both max-height & height.\n(Just max-height works too, but if you want to set it to a fixed height you will need both (instead of just height)) \nIf somebody knows a fix for that: comment please.\nOtherwise this should be finished now.\n. Oh, my IDE didn't recognize that it should use tabs. Will be fixed in 1min.\n. Tabs it is.\n. Don't merge yet, firefox is still defending to highlight on the downloads page.\n. It seems, that firefox is way more strict than webkit-based browser. The worker check with\njs\nvar self = /* ... */ : self;\nwon't work, because the self on the right side always refers to the local variable and not the global one. So we need to set the self variable without var (accessing the global one or silently creating a global one). Seems kind of hacky, but I currently see no other way.\nThis can be merged now.\n. \\o/ Thanks a lot. I will do my best. :tada:\nYeah, sending PRs for changes is the best way, at least to have a documentation for this specific changeset.\n. Is this fixed?\n. Ah! Ok, was wondering if it would be worthwhile to add a couple of common aliases.\n. This was my first thought, but I didn't have any chance to look at it yet.\nHow SyntaxHighlighter fixes it is by simple checking for nested matches and removing these: https://github.com/alexgorbatchev/syntaxhighlighter/blob/master/src/js/shCore.js#L1325\n. You should format your comment as code, otherwise it is not really readable :wink: \n(^[^\"]*(\"[^\"]*\"[^\"]*)*)\nmy only problem is that this regex is pretty slow.\n. Ok, so we basically have two issues:\n1. performance impact of highly quantified regex ((x*x*)* is pretty much the negative example of Catastrophic backtracking)\n2. The global check for \" or ' doesn't work because we only match parts of the input and not the whole text everytime. Therefore we can't reliably count the number of quotes.\n1. Performance\nLet's take a look at some numbers.\nThe current regex for clike goes like this:\n/(^|[^\\\\])(\\/\\*[\\w\\W]*?\\*\\/|(^|[^:])\\/\\/.*?(\\r?\\n|$))/g\nIt does some pretty basic lookbehind testing to ensure that we match only if there is no \\ right before the comment.\nIf we skip this requirement (to keep it simple and it doesn't cause a performance hit) we end up with:\n/(^[^\"]*(\"[^\"]*\"[^\"]*)*[^\"\\\\]*)(\\/\\*[\\w\\W]*?\\*\\/|(^|[^:])\\/\\/.*?(\\r?\\n|$))/g\nI will take the canonical example of a failing test case - the grunt config:\njs\ngrunt.initConfig({\n    sass: {\n        dist: {\n            files: [{\n                test: 5, //a\n                src: \"scss/**/*.scss\"\n            }]\n        }\n    }\n});\nSo, the current issue (\"known failure\") is that /**/ is matched as comment inside the string.\nSo we can fix the issue with the improved regex above, but let's take a look at some numbers:\nThe first match is the first comment (//a, should match), the second match the \"comment\" inside the string (\"../**/...\", should not match).\n1. the improved version: http://regex101.com/r/hP3rA0/1\n   MATCH 1 - FINISHED IN 8445 STEPS (match :white_check_mark:)\n   MATCH 2 - FINISHED IN 3 STEPS (no match :white_check_mark:)\n   Total: 8448 Steps (+ 614%)\n2. the current version: http://regex101.com/r/oZ4iV2/1\n   MATCH 1 - FINISHED IN 895 STEPS (match :white_check_mark:)\n   MATCH 2 - FINISHED IN 287 STEPS (match :heavy_exclamation_mark:)\n   Total: 1182 Steps (+/- 0%)\nThat's a pretty heavy performance impact - and what is pretty ugly: it depends on the length of the input (so it might get even worse).\nMaybe there is a regex guru out there who optimizes the hell out of the regex - please step forward, we would all benefit from it. :wink: \n2. Partial matches with global context\nWell, this is the main problem. There is no global context available.\nYou could - however - extend the logic so that still only the small part is matched, but there is a \"global lookbehind\" (= the input up to the currently matched part). \nThis would be doable (I guess), although it doesn't strike me as very elegant.\n3. Solution?\nWell, I will try to look at the way SyntaxHighlighter has implemented it (by transforming the content in a \"sort-of-AST\" and optimizing it). I have the hopes up that this could be implementable without much effort and complication. But we will see when the prototype stands.\nedit: typo in new regex fixed\nedit 2: relative performance calculated \n. Regarding your last question: in the left sidebar you need to click on Tools > regex debugger.\n. Ok, update. After sleeping a night over it I realized, that making all the quantified selectors in the lookbehind non-greedy could speed up the regex a lot, because we dramatically reduce the branching factor of the regex matching.\n```\nold improved version\n/(^[^\"](\"[^\"]\"[^\"])[^\"\\])(\\/*[\\w\\W]?*\\/|(^|[^:])\\/\\/.*?(\\r?\\n|$))/g\nnew improved version\n/(^[^\"]?(\"[^\"]?\"[^\"]?)?[^\"\\]?)(\\/*[\\w\\W]?*\\/|(^|[^:])\\/\\/.*?(\\r?\\n|$))/g\n```\nimproved & optimized solution: http://regex101.com/r/yS6dY5/1\nMATCH 1 - FINISHED IN 660 Steps (match :white_check_mark:)\nMATCH 2 - FINISHED IN 3 STEPS  (no match :white_check_mark:)\nTotal: 663 Steps (- 44%)\nWhile this looks promising we need to be very careful not to break existing language definitions.\nPS: if this works out we can try to profile and possibly optimize regex'es of other existing language definitions.\n. PS2: we still need to fix the global lookbehind issue.\n. See 2. in https://github.com/LeaVerou/prism/issues/307#issuecomment-50788976\n. I know that, but there are several problems:\n- the current architecture of prism only matches parts of the string. So the part on which the regex matches is not always the complete input up to this point. You just can't reliably count the number of quotes up to this point then.\n- [^\"\\n] will fail for multiline strings.\n\"blabla\nblabla // test\"\nYour regex won't match that.\n. > Oh sorry. Multi-line strings are not there in AutoHotkey. I should have appended \"in case C syntax allows that\".\nThere are languages which extend clike that don't allow them (javascript for example), but for now we just need to fix it for all clike cases.\nIf your language just allows single linge comments it is perfectly fine to do it with the regex - there won't be any problems and by anchoring the regex in the line with ^ it will be pretty fast.\n\nWhat if I keep the comments regex right at the top.Then the whole of haystack will be available as input.\n\nThis is true. I will evaluate all possible solutions in the coming time, so maybe I can tell a bit more about it in the future.\n. Thank you for your PR.\nDo you think it would be good to use the newly added alias (Docs: http://prismjs.com/extending.html) functionality instead of introducing a lot of new tokens in all themes?\n. Also, one could add a badge for Gitter to ease the communication if some questions arise.\nCode:\n[![Gitter chat](https://badges.gitter.im/LeaVerou/prism.png)](https://gitter.im/LeaVerou/prism)\nWill look like: \n. This seems to be the new link: http://www.kevinlorenz.com/home/prism_js\n. @aviaryan thanks for the info :smile: \n. It isn't quite as bad, because the regex only matches the lines and not the complete string.\nOn the other hand: @aviaryan did you try to make the selectors non-greedy so that the branching while matching is reduced?\nIf it doesn't work: do you have some test cases which fail?\n. (see #315)\n. I was thinking about adding it, but it might take me some time.\nI won't be mad if somebody beats me to it :laughing: \n. I just pushed the minified version.\n. Fixes #296 \n. > I needed to explicitly set the line-height in my pre-tag.\nThis will be fixed as soon as #279 is merged.\n. The issues is not fixable while still implementing the shadows.\nBackground:\nThe shadows are added via ::before and ::after on the <pre> tag. Therefore they act as child HTML elements of this tag. And due to their positioning outside of the container, the <pre> needs to be set to overflow: visible - can't scroll.\nBecause of this the inner <code> needs to solve the scrolling - but if we set the background gradient on the <code> or the <pre> we will encounter this issue. Both won't scroll, because just the content of <code> is scrolling. So we would actually need a third level.\n. I love the idea and the implementation is pretty straight forward.\nTwo comments though (both already mentioned by Lea):\n- I would apply all classes to the element, not just the first one\n- Not sure about the separation token, though. Maybe ! (as in \"the part before the exclamation mark is the main part\"), | (as in \"the token is an alternation of another one\") or & (as in \"this token is both - the left and the right part) would be a better fit?\nI would vote for &. Especially since there is no technical reason to limit this to two tokens: \"test&a&b&c\": /* ... */.\n. > The most robust way is Object.prototype.toString.call(pattern) == [object Array], but that\u2019s ugly and verbose so I\u2019d rather avoid it if we don\u2019t really need to.\nThere already is a helper for that:\n_.type(pattern) === \"Array\", see here\n. @zeitgeist87 I would like if you could send in separate PRs for the language definition issues and the problems on the examples page.\n. About the implementation: I think it would improve readability if you would just always use an array & loop:\njs\npatter = (\"Array\" === _.type(pattern)) ? pattern : [pattern];\n. It would allocate one array + one variable (the iteration variable of the loop).\nThat should be ok - it seems like a case of premature optimization otherwise. :wink: \n. Wow, ?w=1 makes the diff way more readable, lol https://github.com/LeaVerou/prism/pull/321/files?w=1\n. Looks good from here :+1:\n. The first example is a case of yoda conditions which have their use cases. But if the rest of the codebase doesn't use them so far it wouldn't be good to include them now.\n. I think I would actually prefer the second version (just including them on the pages which need them).\n. Thank you!\n. IIRC this was needed since the shadows are added using ::after and ::before and will now be hidden.\nI am afraid a proper fix is not as simple as this one.\n. Ok. I hope you can understand that we can't merge it in this case, but need to take a closer look at how we can fix it an other way.\n. Did you try to set a line-height?\n. Does word-wrap: break-word; not work?\nIt is not optimal, but on the other hand - you could always reformat the XML before highlighting it.\n. For the current language definitions - is there a specific use case up until now?\nI can see that this could be generally a nice-to-have, but was just wondering if the idea resulted from a specific use case.\n. Not sure about token-bold either, but I think I get your point. It is about having a sensible \"base highlighting\" which can be extended for the own use.\nAbout styling different comment styles differently: if they are in fact different things and should look differently, it might be good to in fact keep them as separate tokens (for example: doc-comments and regular multiline comments are different enough to justify different tokens). But there might be use cases where you want to keep them somehow together.\nIf we think about \"base tokens\" we can take a look at PhpStorm (or any other Jetbrains IDE for that matter) - they define these:\nBad character\nKeyword\nIdentifier\nString\nValid escape sequence\nInvalid escape sequence\nNumber\nOperator sign\nBraces\nParentheses\nDot\nComma\nSemicolon\nLine comment\nBlock comment\nDoc comment\nDoc comment markup\nDoc comment tag\nLabel\nConstant\nPredefined symbol\nLocal variable\nGlobal variable\nFunction declaration\nFunction call\nParameter\nInterface name\nMetadata\nClass name\nClass reference\nInstance method\nInstance field\nStatic method\nStatic field\nMarkup Tag\nMarkup Attribute\nMarkup Entity\nTemplate language\nThe list is long and some of them are awfully specific, some of them don't apply to all supported languages but it might be a good start.\n. Hmm, since it is a specialization something along specializationType(s)? No real good name comes to my mind, currently.\n. :+1: looks solid - names, code & docs.\n. Although I see the point from @LeaVerou (that it is a sort of specialization/sub token), I think that the real use cases will nearly always use it as an alias (see #348 for example).\n. I'm :+1: for alias. \n. I will merge this now.\n@GuiTeK you should update #329, so that it only sends in the changes from your language.\n. Thanks @zeitgeist87 for your work on this one. :fireworks: \n. @GuiTeK I meant #349, sorry. :smile: In fact, you should rebase all PRs touching this area.\n. The implementation is fine, although I would do the following:\nAdd the following definition to prism-core:\njs\nindexOf: function(collection, element) {\n    return collection.indexOf(element);\n}\nMonkeypatch this method in the ie8 plugin.\n. Will take a look at it soon.\n. If you need to add new tokens, you should add them to every themes themes/prism-....css (so that your language has proper support in every theme).\n. @LeaVerou couldn't we use #328 for this?\nSo we could define the actual token types (.directive-block) and alias them to existing token subtypes (.tag or something).\nSo we have a tradeoff between semantic tags and reusing the existing ones?\n. @zeitgeist87 you are right, lol. :sunglasses: \n. It is expected that your CPU load increases with every selected language: your download code (at the bottom of the page) is highlighted and the more code to highlight there is, the higher the load for the CPU will be.\nSo the real problem seems to be either a really slow regex/javascript engine (shouldn't be the case) or some other inefficiencies.\nCan't confirm on OSX with Chrome 36.0.1985.143, but will try to reproduce it.\n. @zeitgeist87 thanks for investigating. It seems that there are some bad regex expressions which have a too high branching factor.\nWe will need to investigate it further.\n. @LeaVerou the problem is not the downloader itself but regexes like this for code snippets with a length of > 10k chars: /(\"|')(\\\\?.)*?\\1/g (which is just string matching of clike).\nThe problem is the really unspecific *? in the middle. This just explodes for long strings.\nIf you just add a big language definition (NSIS for example), download it and just run this regex on the string, you get this: http://regex101.com/r/pS0qT1/1\nIf you click on \"regex debugger\" on the left side, you will see that this regex alone produces 100k+ steps. It just explodes.\nThe really simple fix would be to just hide the higlighted text fields on the download page - they are not very helpful either way: they just produces CPU cycles and are not usable. You can't Cmd+A for example to select the text in the textbox. So I would just display the download buttons.\n. If JavaScript would support atomic grouping you could reduce the backtracking from 100k+ to 30k+ in just 2 characters.\n. @LeaVerou glad I can help.\nAnd congratulations for MIT! :tada:\nI will do my best to keep up and fill in your good work.\n. @zeitgeist87 I noticed it, too. If you are a slow clicker, you are safe when selecting the languages. :smile: \nWe should throttle the calls and .terminate() all still running web workers.\n. Not sure about the new tokens, rest looks good from here. :+1: \n. @GuiTeK to get this finally merged, could you please (all in this PR):\n- add the language + your name as author to /components.js.\n- rename the language to apache-conf? We prefer dashes in language names.\n- Please squash all your commits to a single one?\nObligatory question: did you test everything after rebasing it on the new alias-functionality?\n. Thank you for your work.\nI just found out, that we only use dashes in the *-extras, but not in the languages themselves (for example objectivec). I will merge this now (that we finally have it in core) and just quickly fix it myself.\nThanks again!\n. Ah, all right - thanks.\nMerged via #348, so this will be closed.\n. Looks good, thanks!\n. You can ignore it globally in all your local repository without adding it to the repositories: https://help.github.com/articles/ignoring-files#create-a-global-gitignore\nThat's how I ignore .idea on my machine.\nNot sure whether we should add this to the main repository, since everybody uses a different IDE and this seems very developer machine specfic.\n. I guess it won't hurt. :wink: \nBut shouldn't it be /.idea because you only want to exclude it in the top directory?\n. Ah, you are right.\nThanks for the contribution.\n. Nice & thank you!\n. The CSS is included, but the token commit_sha1 is currently unstyled in every theme.\n. As a matter of principal every theme should contain all styled tokens - so that you only have to download one theme file and be done.\nIn reality, the number of different tokens would explode. That's why you can alias your custom token to an existing one and take the styling from it (\"alias\" in the docs). That's what I would do in this case.\n. The alias is in fact just for the styling, for nothing else (or at least that's the main use case). :wink: \n. Thanks! I am currently working on a test environment, too, but want to make it a little bit more comfortable and automated, so that it is very easy to add new test / alter existing tests.\nI will come back to this in the future - as soon as I have a working prototype.\n. @lgiraudel if you split this PR in two (one with the git language changes and one with jasmine testing), I could merge the git one right away.\n. @jonkemp not sure about this being documented, but in fact you want to insert the text and not the actual DOM elements. So if you don't escape the text, Prism only sees DOM elements and no text to highlight.\n. Both valid points. We probably need a clean up session in all language definitions.\nI am currently working on an easy and extensible test system, which would allow us to do automated regression testing (which is required for a bigger cleanup effort). Will post an update here as soon as I have a working example.\n. > [...] so you could catch things like labels without ending colons, etc. \nI think it's fine to match not every case. In the end, prism is just highlighting and no linter.\nCould somebody cross-check this? I am not very familiar with Assembler.\n. @LeaVerou I know that you added this to ease implementation, but I think we should probably move this line of code out of the main project and into a default plugin.\nNot sure how to proceed in terms of BC, though.\n. @omeid I was thinking something similar.\nCurrently Prism (as in the object in code) isn't very reusable, because it is a global singleton. Which is convenient up to a specific point, but begins getting very annoying once you want to test something in isolation.\nSo my (very rough) idea is something like this:\n- Have the main Prism library\n- per default a new Prism object is created and applied to all matching HTMLElements.\nUnfortunately this requires quite a lot code changes - need to send in a PR and discuss with @LeaVerou whether this will be a direction she wants to proceed.\nMy goal is to make the code cleaner (in terms of SRP, etc..) but keep the simplicity of for example language definitions. Also we should try to avoid to much BC changes.\nI will cook something up, so that we have a basis for discussion. I would like to defer your PR up until then.\n. Continued in #370\n. > Lastly, the reason why I didn't just use the i flag for the booleans and null is because things like faLSE aren't semantically correct, although it probably would make sense to highlight them anyway.\nNeither is NULL. So you should either include all cases or just the one in the spec (null).\n\nAlso I'm still debating on wether I should use 'property' or 'variable' for the properties. It might be a good idea to just use property and then add some css for .language-json .token.property\n\nOr define it as alias (@LeaVerou did we agree on using alias for things like this)?\nFor the implementation: I would probably go with extending javascript, too. At least for not having to duplicate a lot of code.\nPrism is no lint tool - so accepting invalid JSON is perfectly fine here.\nIf there are issues with using javascript with JSON data: all right - let's fix it. :smiley: \n. I would argue that loading too much doesn't harm a lot. The complete javascript markup is < 1kB, compile time in the browser is practically non-existant.\nThe only difference between JS and JSON seems to be (according to the link @uranusjr posted) native support for UTF-8 in all strings - which we could easily fix by just allowing them in JS too (again: Prism is a forgiving highlighter, no merciless linter).\nBut:\nAs my main issue (code duplication) doesn't stand (as @CupOfTea696 noted) I would vote for just releasing it as a standalone JSON + JSONP language. :+1: \n. (as a single language definition json with alias for jsonp)\n. Not sure. Seems fine though, can be merged :+1: \n. I don't think that we should include version numbers in the aliases. There probably won't be any difference between html and html5 ever, so it is just redundant.\nOne could argue, that these mappings could be added to the file highlighting plugin, because php4, php5 are all (more or less) common file extensions for php (for example).\n. @CupOfTea696 I understand your reasoning, but I think that the core should only include the most common ones.\nIt is perfectly fine to just add a custom plugin which adds a whole lot of aliases, but I would'nt add them to core, though.\n. > Additionally I added punctuation and string definitions to the css.selector.inside which ins't required for this plugin but is something that I felt was missing. (Also the CSS Extra seems to be adding these definitions but there is no CSS in place for them?)\nPlease remove these changes from this PR and submit a new one with just these changes. Otherwise we can't evaluate the additions separately.\n. We can add this as soon as somebody volunteers on generating the necessary definitions.\n. Great news, that you were able to resolve the issue.\n@mallakas everything is working for you now? Can we close this issue?\n. Good catch!\n@LeaVerou shouldn't the main JS file be components/prism-core.js? \n. I would just stick to the languages currently included in prism.js (to be BC safe, if somebody used it). I am currently thinking about an implementation which would allow custom user builds using something like browserify or webpack, which would solve the rest of the issues.\n. I created #406 for the discussion of the main js file, so that this can be merged now. :wink: \n. Thank you!\n. @tomchentw I know what you are trying to say, but your proposal won't be implemented (at least not reliably). Let me explain the promises (literal ones, nothing related to new Promise()...) the code currently makes:\n1. async = false\nThe code will be highlighted as soon as the call to Prism.highlightElement(...) is finished.\n2. async = true\nThe code will be highlighted as soon as the callback is called. Nothing more, nothing less.\nThe API does not make any promises (again, literal ones) about anything coming after the code. The only thing you might rely on is that the code is highlighted as soon as the callback is called.\nIt can be executed synchronously, asynchronously or however it wants.\nThe best way to implement this would be to always return a promise (this time new Promise()) - but this ship has already sailed (at least for 1.x - supposed we are currently at 1.x)\n\nedit about your specific points:\ntesting will be harder\nIf you change the code to be async and still use synchronous testing code, you are doing it wrong (TM). Unless the library returns a structure which will handle both the same way (like a library returning promises).\nAdding async option might change the behaviour\nTrue, that looks like a optimizable API decision. We won't be able to change that for the current releases (not until we release something like v2.0 or similar).\n. I just merged #395, which at least solves the immediate error. (thanks @zeitgeist87)\n. Merged to fix the immediate error.\n. This is a BC break. If you add the parameter as the last one, it would be BC safe. Also, I would name the parameter rootElement.\n. Ah, you are right.\nI could live with a new function. Maybe something more modern (promises, anyone)? So that we could slowly move all code to the new functions - this one could automatically and intelligently handle both a single element or a set of elements.\n. No expert in assembler, but LGTM. Maybe you want to add the two missing operators there too, but it won't harm if not.\n. For reference, see discussion in #386\n. You could highlight it with prism and add your <mark></mark> tag after the highlighting is done.\n. This would indeed be nice, but it would mean a massive PR touching all language definitions.\nAlso we would need to duplicate the \"require\" information across the actual language definition and the components.js file.\nOn the end of the day, I would nevertheless add it.\n. This is fixed now /cc @LeaVerou \n. @Golmote this can be closed. \n. Yes, there is one now: http://bower.io/search/?q=prism\n@DelmerGA or @Golmote you can close this now.\n. HTML and XML don't share the same grammar, as XML allows additional characters while HTML only allows alphanumeric ASCII characters as tag names.\nWe could either create a separate XML language, that relaxes some of the rules of HTML or in the spirit of (\"highlighter, not a linter\") allow some invalid HTML.\n. You could try something like this [^\\s>\\/]+ instead of [\\w:-]+:\njs\n'tag': {\n               // \u2193-------\u2193 here   \n    pattern: /<\\/?[^\\s>\\/]+\\s*(?:\\s+[\\w:-]+(?:=(?:(\"|')(\\\\?[\\w\\W])*?\\1|[^\\s'\">=]+))?\\s*)*\\/?>/i,\n    inside: {\n        'tag': {\n                        // \u2193-------\u2193 and here   \n            pattern: /^<\\/?[^\\s>\\/]+/i,\n            inside: {\n                'punctuation': /^<\\/?/,\n                'namespace': /^[\\w-]+?:/\n            }\n        },\n        // ...\nWhich translates to \"a tag name is anything that is not a whitespace character, a closing bracket > or a slash /\". Not sure whether this produces other weird special cases (by being too greedy), but it solves your issue.\n. Thanks for taking a look at it! :tada: \n\nI also realised it was meant to run only one test per file. Wouldn't it be useful to write several tests in a single file.\n\nAs you already mentioned you can just make the test case longer so that it tests multiple cases. We just need to find a balance between small and self-contained test cases and a myriad of too small test cases.\nBut I guess grouping them by topic (like \"all string variants\") might work well. We can also adopt the naming scheme from the PHP core test suite (\"bug453.phpt\") to directly guard against specific regressions (and add a hint on why a specific test case exists and what it should guard against).\n\nAlso, I'd like the test files to be suffixed with some extension (like .test?)\n\nI also thought about the issue with broken syntax highlighting and have no real answer. Splitting the test and the expected result into two files is not a good idea so we won't find something that doesn't break syntax highlighting and in the same time works with a lot of different languages. So using a \"neutral\" file extension is probably the best way.\n\n(and we could remove that extension when displaying the filename in the test results)\n\nThat is a good idea, I will add that.\n\nAnother thought: should we also add the possibility to optionally add another section for a comment to a test case? Might be good for self-documenting the test case?\nSomething like this:\n```\n\"test\"\n'test'\n\"te\\\"st\"\n'te\\'st'\n\n[\n    [\"string\", \"\\\"test\\\"\"],\n    [\"string\", \"'test'\"],\n    [\"string\", \"\\\"te\\\\\"st\\\"\"],\n    [\"string\", \"'te\\'st'\"]\n]\n\nThis is a test for testing all possible string variants.\nIt also checks for escaped delimiters inside the strings.\nSee #588 for related info.\n```\n(still open for suggestions about the test case file layout)\n. I just pushed comment support:\n\nI just use the message parameter from chai.\nI just pushed the requirement for all test cases to have the .test file extension:\nThis should both prevent highlighting issues in common IDEs as well as preventing the test runner to choke on non test-related files like .DS_Store or Thumbs.db.\nAlso the file extension is now hidden in the test description (you can see that in the screenshot above).\n. I just pushed support for language inclusion / language integration tests\nBy using composed language names like javascript+css or markup+php both languages will be loaded. This way you can test whether two languages interact nicely with each other and more importantly you can test language inclusions.\nThe first language (javascript for javascript+css) will be passed to Prism for highlighting, but the additional languages will be loaded, too. (For that I extended the language loader as it now needs to keep track on the already loaded languages, so that it doesn't load languages twice (so for bash+javascript the clike requirement will only be loaded once, etc\u2026)).\n. If the implementation looks good, I will write some documentation. As soon as the docs are finished, this is ready for merging.\n. @Golmote all right. I am currently moving (as in moving to another apartment) but may get some free time next week. \n. > Actually, it seems that CSS and JS are the only exceptions here: they modify another grammar to add themselves into it.\nI think we should change that. We should unify the way languages extend each other.\n(This would be a BC break, hover, as you need to reorder these language definitions.)\n\nBecause the string pattern has an inside key to match variables, the simplified token streams produced by this test are:\n\nNo, the simplified token stream would look like this:\n[\n    [\"string\", [\"\\\"foo bar\\\"\"]]\n    [\"string\", [\"'foo bar'\"]]\n    ...\n]\nAs the strings are not empty.\nMy description is misleading.\n\nAll non-matched parts (strings in the compiled token stream) are simply ignored.\n\n\u201cStrings\u201d is meant here as generic character lists instead of the actual token string.\nIf you have a language that only matches a and you highlight the text:\na b a\nThen you would get\n[\n   [\"my-token\", \"a\"]\n   [\"my-token\", \"a\"]\n]\nb is unknown and therefore ignored \u2013 that is what is meant with 5.)\nDoes this clear things up?\n. > Are you sure about this? Because I don't reproduce this behaviour with your current code...\nThe current code produces the token stream as defined above, the empty array comes from your recursive implementation (it doesn't correctly handle arrays). I have just pushed an implementation for support of nested token streams, which should handle the case quite well.\nI also updated the apacheconf test case (it is now passing), so that you can see how the expected token stream looks like.\n. > Should we filter the strings at all?\nWe could include them. But I would remove all strings, that just include whitespace, like \"\\r\\n\" and \"\\r\\n\\t\".\n. I just pushed some updates.\nI think I got it all \u2013 I even managed to reduce code complexity a bit.\nIf you want to learn the details about the token stream transformation you can check the newly created test file testrunner-tests.js (as we are at a point where we should test our test runner).\n. @Golmote sorry for the delay. All done.\n. Just added travis support. You can see the result of the travis build of my fork here: https://travis-ci.org/apfelbox/prism\n. And I finally pushed a documentation page, explaining the test runner, test suite and everything in it (I am no native speaker, so please correct me if anything doesn't make sense :wink: ).\n. This is now ready to be merged :shipit: \n. A final note:\n\nWe could probably move the prism loader to a separate helper directory, outside of /tests/ as this seems to be useful for multiple use cases and not just tests.\n\nWhat do you think?\n. :tada: thanks\n. The test on regex101 confirmed it as fixed.\n. Currently this is not easily possible. You could reuse my implementation from here and then the file tests/helper/prism-loader.js.\n. @am true, that is a lot of boiler code.\nBut keep in mind: you can just reuse the loader code from #588, as soon as the PR is merged :wink: \n. @astoilkov as soon as #588 is merged, this could should work:\n``` js\nvar PrismLoader = require(\"tests/helper/prism-loader\");\nvar Prism = PrismLoader.createInstance([\"javascript\", \"css\", \"eiffel\"]);\n```\nWe could probably move the prism loader to a separate helper directory, outside of /tests/ as this seems to be useful for multiple use cases and not just tests.\n. This would be the ideal world \u2013 but unlikely to happen.\nThis would both mix a lot of functionality only available for node into prism, as well as being a massive BC break. So the current solution is ok in that regard, as it completely keeps BC.\n. Actually, the test runner already has a working & running loader for prism @LeaVerou @benjycui \nTo reiterate my comment above:\n\nLook at the file: https://github.com/PrismJS/prism/blob/master/tests/helper/prism-loader.js\n\nIn your own code you can just do:\n``` js\nvar PrismLoader = require(\"tests/helper/prism-loader\");\nvar Prism = PrismLoader.createInstance([\"php\", \"javascript\", \"bash\"]);\n```\nThis will load all required language definitions in the correct order and generate a fresh instance every time. Somebody could use this implementation, clean it up and provide it as proper extension point for node.js users.\n. @benjycui no worries. \ud83d\ude04 my comment first comment was quite sparse in details, so no wonder it gets by unnoticed.\nIf you want to, you could take my implementation, clean it up, move it to the main directory and provide it as a proper extension point to node.js users. Afterwards you can refactor the test suite to use you newly exposed node.js API for generating Prism instances. (and document the loader somewhere on the website and in the README)\nAs @LeaVerou mentioned, I think it would be nice to have something like this in core.\n. @Soreine as previously mentioned, you could just have wrapped tests/helper/prism-loader.js instead of duplicating all logic.\n\u00af\\_(\u30c4)_/\u00af. @Golmote this can be merged. \n. (As we now have tag-based versioning)\n. You can merge #596 before this one, so I can rebase my PR based on these javascript changes.\n. So, i just rebased and squashed the changes in one commit.\nReady to be merged @Golmote \n. @Golmote no problem, done.\n. @vkbansal @loganfranken even easier than that. If you take a closer look at the braces in the regex, you will see that only Infinity has a negative sign. That is because that whole match already has a negative sign at the beginning \u2013 and therefore the one right before Infinity is duplicate.\n\n@loganfranken you are right, the regex matches it, but it isn't included in the token. Because of this it will be highlighted as operator later on.\n. I think this is a nice addition.\n/cc @Golmote @LeaVerou ?\n. Yeah, you need to rebase it with the current master, otherwise you pull in all the changes. :wink: \n. UMD would be really nice, but that would be quite a massive rewrite with touching nearly every file in the repository.\n. :+1: \n. Looks good to me :+1: \nI think thats exactly the right size for tests, it hits the balance between small enough to grasp in one or two looks but not too small so that we end up with a plethora of different tests files.\n. Was fixed in the meantime \ud83c\udf89 . This is no issue with the theme, but the x is just not matched. In the default theme unmatched tokens and the token for the classname looks the same:\n\n. @DeNelo this is actually not directly a bug with Prism.\nYour \"x\" in new Regex is not the default ASCII \"x\", as you can see here: http://jsbin.com/robohonohi/edit?html,css,js,console,output\nYour first Regex foo prints\n\"x -> 120\"\nbut the second one (new Regex) prints\n\"\u0445 -> 1093\"\nSo this is a unicode character, that looks like an \"x\", but isn't really a \"x\".\nWe could argue whether we should allow everything (except whitespace) in classnames, but for now only a-z (the real a-z :wink:), 0-9, \"-\" and \"\\\" are allowed, as you can see here.\n. Rounding pixels is always ugly and ultimately up to every single browser. So I am :+1: on trying to fix this problem by just rounding and applying the rounded line-height to the element\n. See my comments in #674.\nYou should use a build tool that can load arbitrary files and transform them to AMD or CommonJS.\n. Nice idea, but this completely breaks the website, as it is using the the values in the components variable. So :-1:  from me.\nIf you want to use it in an external file, just strip the leading var components = and parse it as JSON. The file is formatted in a way so that this is possible.\n. I know that this is not the best solution, but it is up to the maintainers to ensure that everything after the equals sign is valid JSON.\nIf you want to adapt the website, we could hover switch to JSON, although this would make the test and download pages more fragile.\n. I am not sure whether we should/could test hooks with the currently used test syntax.\nI think we should use the test case syntax strictly for unit testing the produced tokenstream. \nIn this case I would manually write regular, asynchronous test using the test framework directly. \nI would propose adding a second directory, in which all .test.js are discovered, loaded and executed. \nThis way we can keep the token stream tests as simple as they currently are but in the same time can use the full power of the test framework for the more elaborate and complicated tests. \n. Couldn't you just use the m flag?\n. typo\n. I would rename both of them. Especially 'newline' sounds like \"\\n\".\n\"line-added\" and \"line-removed\" maybe?\n. Would make sense to update these dependencies now before merging.\n. Could you return null here? This is the only way to differentiate between \"not supported\" and just an empty file.\nThe same goes for the bitbucket handler.\n. You could then add some documentation here in the way of \n\"return a string, if your handler understands and supports the given response, null if it doesn't support it\"\n. Or you can use the m flag and add a $ so that it only matches the line\n. Could you add support for\n- hex numbers (hexit   \u2192 digit | A | \u2026 | F | a | \u2026 | f)\n- floats (float    \u2192 decimal . decimal [exponent] & exponent   \u2192 (e | E) [+ | -] decimal)\n? I know that this would be one of the first issues, so it would be nice if it was included right from the start.\nSee here for the full grammar: http://www.haskell.org/onlinereport/haskell2010/haskellch2.html#x7-190002.5\n. Merged too fast, there was a comma missing. :wink: \nJust added in 011e430c6249e8c5abe356789560b2aef1998353\n. Would it make sense to group the directives with the same prefix?\nSo instead of\nAllow|AllowCONNECT|AllowEncodedSlashes|AllowMethods|AllowOverride|AllowOverrideList\nmaybe\nAllow(|CONNECT|EncodedSlashes|Methods|Override|OverrideList)\n?\n. Oh, and instead of *\\t* you should probably use \\s*.\n. You should use the negative lookahead (?!...) for that - this is the exact use case of it.\nAlso you can just use .+ instead of [^\\n] if you're using the m modifier. \nSo everything will be even simpler:\njs\n'deleted': /^-(?!-).+$/m,\n'inserted': /^\\+(?!\\+).+$/m,\n. Just to be consistent:\njs\nPrism.languages.html   = Prism.languages.markup;\nPrism.languages.html5 = Prism.languages.markup;\n(in php you did it the same way)\n. Wouldn't it be nicer to pass the global Prism variable here?\nAnd add it as an argument for the anonymous function?\nThis way, you would have a fixed and static dependency on Prism.\n. Nitpicking: if you use Object.prototype you won't need to create a new object just to discard it.\nCode Style: please use ===\n. I know it's not part of this PR, but could we please update the internal variable names to something more meaningful than i and o. We now have automatic minification, so no need to make our life hard here. :wink: \n. PS: didn't know that hasOwnProperty also works for array indexes...\n. Yes, but at least for me i always is an array index, although o doesn't have to be an array...\nfor (var rule in ruleset) would probably make it more readable? But it might very well be that this is just me personal preference. :wink: \n. Prism.languages.jsonp = Prism.languages.json;\n. It looks fine for now, but I need to take a closer look. Will try to do it tomorrow.\n. That's true, but saying\n\nalways use ===\n\nis a much simpler styleguide. :sunglasses: \n. Maybe you could add / and % here, too?\n. a.k.a. some more of them listed here: http://www.nasm.us/doc/nasmdoci.html\n>, <, %, /, =, ^, |\n. Nitpicking, but I think it is called shebang: http://en.wikipedia.org/wiki/Shebang_%28Unix%29\n. Do you want to highlight the rest after the shebang? If not, you could just use /^#!.*$/ (edit since we should not use multiline mode, probably something like: /^#!.*\\n/)\nI didn't find anything specific, but I think the shebang must start at the beginning of the complete input (and especially no whitespace before it).\n. See comment in your PR:\nThe docs say .deepEqual(actual, expected, [message]), so the current implementation is correct.\n. Nitpicking: could you please re-add the final ;?\n. ",
    "benplum": "Lots of errors in IE8, starting with the 'self' reference at the start of prism-core.js \n. ",
    "necolas": "That doesn't help because you can still end up with specificity problems. All it takes if for someone (e.g. a wordpress user) to have CSS like #comments .comment and then any code in a comment is going to be affected. Hence, either namespace the classes or use !important in the theme CSS.\n. I don't think you need to throw them away, but it's also sensible to protect your plugin from author styles without relying on them making other changes to their code. Hope you'll consider adding a simple namespace or the option to do so. Thanks\n. ",
    "jzaefferer": "@mathiasbynens no idea, haven't looked at the code yet, but that sounds like it would become a problem. Though jsdom, or even better yet, cheeriosjs, might help there: https://github.com/MatthewMueller/cheerio\n. Also usage of self would need to be replaced. Within the node context, module.export = Prism would be the right way to expose that object.\n. ",
    "tbranyen": "https://github.com/LeaVerou/prism/blob/gh-pages/prism.js#L300\nwould need to be changed before this script could run in node without a ReferenceError\n. ",
    "buymeasoda": "Hi folks,\nI've done some work to adapt the current prism.js code to work within a node context, as well as the browser.\nTo see the changes involved, have a look at the following branch / diff for the details: \nDiff: https://github.com/buymeasoda/prism/compare/npm-node-support\nBranch: https://github.com/buymeasoda/prism/tree/npm-node-support\nThis version allows you to do the following:\n```\n$ node\n\nvar prism = require('./prism.js');\nprism.highlight('var test = \"my string\";', prism.languages.javascript);\n\n'var test = \"my string\";'\n```\nI've included a sample package.json file for publishing to npm and will add a pull request to give you some more visibility of the merge results.\nAlthough this adaption is working fine for providing require support, I think the node / npm side of things could be improved further with some changes to the way the base project files are organised.\nThe plugins that work in a node (non-browser) context, have also had a couple of minor changes to allow them to work. For example, Show Invisibles and Autolinker are both usable scripts in a node context.\nLet me know what you think and if there's anything else I can do to help.\n. Based on feedback from Lea, I've created a new version of this pull request that includes the bare minimum needed to get Prism functioning in node.\nThe pull request is: https://github.com/LeaVerou/prism/pull/42/\n. Based on further discussion, a new version has been submitted that creates a dedicated node version of prism.js.\nThe pull request is: https://github.com/LeaVerou/prism/pull/45\n. I agree that the changes aren't ideal. Feels a bit clunky having both code paths in there, especially for the browser use case.\nI think it'd be nice if the end result was something like - a Prism base that could be wrapped to generate a dedicated browser version and a dedicated node version, or the plugin / extension approach you mentioned might work well too.\nThe main change needed in the core is to not have any directly actioned, browser specific calls that would fail in a node context.\nI'll have another go at this, and for the next submission I'll also keep all the peripheral changes out (like changing _ and self), which will make the footprint of changes much smaller.\n. Unfortunately, we wouldn't be able to use:\njavascript\nif (typeof self === 'undefined') {\n   var self = global;\n}\nFor the check inside the main function as the hoisted self ends up becoming undefined, rather than being interpreted as already existing via window.self. Which causes the browser version to try to assign the value of global.\nThis form works though:\njavascript\nvar self = (typeof window !== 'undefined') ? window.self : global\n. I've created a new version of this pull request that includes the bare minimum needed to get Prism functioning in node.\nThe pull request is: https://github.com/LeaVerou/prism/pull/42/\n. Closing this pull request in favour of a standalone node version.\nReference: https://github.com/LeaVerou/prism/pull/45\n. Closing this pull request in favour of a standalone node version.\nReference: https://github.com/LeaVerou/prism/pull/45\n. > How is this better than maintaining a separate fork that's linked from the main site?\n@LeaVerou In this form, it's no better than a separate fork.\nThe benefit would only materialise by updating the Prism build process and source file structure, so that both versions (browser and node) could be automatically generated, allowing them to be up to date and in sync, rather than manually maintained.\nI think the choices are:\n- Adjust the build process and source structure of the main repo to generate clean browser and node versions from one canonical origin\n- Leave the existing code as is, and duplicate the source, manually maintaining the code for a node version\n- Embed the existing, unaltered Prism browser version in a node wrapper and monkey patch aspects out for the node version\n\n+1 to the idea of node.js support, but I think maintaining a separate file is a mistake\n\n@indexzero I agree. I'd like to see an automatically generated node version alongside the browser version, from a canonical Prism core.\nYou might also be interested in checking out two earlier proposals and the related discussion: \nhttps://github.com/LeaVerou/prism/pull/34\nhttps://github.com/LeaVerou/prism/pull/42\n\nSo the only incompatibility I can see @LeaVerou is use of the document keyword in four places\n\nIf the monkey patched route was considered reasonable, the following solution works to create a wrapped node version, with an unaltered embed of the current prism.js source:\n``` javascript\nvar Prism,\n    self = {\n        addEventListener: function () {},\n        set Prism(implementation) {\n            Prism = implementation;\n        }\n    };\n//\n// Existing prism.js source code embedded verbatim\n//\nmodule.exports = Prism;\n```\n. I'm also happy to submit a build step based solution (using grunt), for generating the node and browser versions if you're open to that approach.\n. @indexzero and @balupton Prism support in blacksmith and DocPad would be nice. I'd also like to see it ported to Wintersmith as an alternative highlighter.\nWith the current pull requests, I think progress has stalled for trying to integrate the creation of the node version into the main prism repo.\nThere are working versions though - for example the monkey patch solution mentioned above in https://github.com/LeaVerou/prism/pull/45#issuecomment-10281548 is quite simple and works. I've thrown it into a gist that you can grab and try out: https://gist.github.com/4536797/\nNot sure I'd be happy publishing that approach to npm though, what do you think?\n. ",
    "adam-lynch": "This can be closed since #179 was merged, right?\n. @LeaVerou I can publish to npm for you. Later then, once you get around to creating an npm account, I can add you as an owner to the package.\nIs that ok?\nNote: I'd publish it along with the changes contained in #241\n. @LeaVerou at the root of the project;\n- npm adduser\n- npm publish. This will take the name and version number from package.json so you should merge #241 or it will complain that a package with that name already exists.\n\nAs far as I remember from Fluent you have a Mac so you might get an error running those above like I did but there's an easy fix.\n. +1\n. @LeaVerou: as far as I can tell, you should do the following:\n- Merge #241\n- Create a new \"master\" branch. This can be done from GitHub itself.\n  \n- Go to the project's Settings and change the default branch to the new \"master\" branch.\n  \n- Create a new git tag (which publishes a new bower version) matching the version in bower.json (0.0.1 as of #241)\n\nNote\nTypically when a project has a master and gh-pages branch, you'd have everything for dev on master plus anything needed for package managers. So no css-tricks logo, etc. \nThen the gh-pages branch would only have what's needed for prismjs.com, so no package.json, bower.json, etc.\nThis means though that any outstanding pull requests would have to be re-issued to the master branch.\n. @apfelbox @homosaur what about rawgit? \n. @LeaVerou done\n. ",
    "gildas-lormeau": "Sorry for the extra line deletion, it seems the embedded editor from github has some bugs.\n. ",
    "Aaron3": "There are are few questions, such as should $this->var all be colored as a variable, or should just $this with the rest be colored as punctuation. I left $this['var'] alone, so only this is a $var.\nThere were also issues with $this->function() not being able to use the lookbehind:true while using the function pattern (for named functions, lookbehind is not needed, so it would throw an error.) Lookbehind should probably check to make sure that this particular match should use it.\n. There are are few questions, such as should $this->var all be colored as a variable, or should just $this with the rest be colored as punctuation. I left $this['var'] alone, so only this is a $var.\nThere were also issues with $this->function() not being able to use the lookbehind:true while using the function pattern (for named functions, lookbehind is not needed, so it would throw an error.) Lookbehind should probably check to make sure that this particular match should use it.\nAlso, strings such as <<<EOT blah blah EOT; are not validated and  the following fails:\n<<<EOT \n  blah blah EOT; \nEOT; \n. Yes, most of my experience is with C-style languages. I assume anyone else can add anything they need to it. The most important parts are the string highlights, punctuation and comments. \nAs for inheritance, that could be easily done with an argument to just pull the details from another array. The problem is if the defaults from the original array are modified by plugins. Possibly, the actual array used should be generated after loading from pristine versions instead of using one array for everything.\n. ",
    "mrbrdo": "Would still be nice to merge this. Not merging because of a couple of spaces that a decent text editor can fix in seconds is a little ridiculous.\n. My god, I just finished rebasing and squashing these commits to finally realise you're using tabs for indentation. That's retarded. And then you jump on the guy that's using sane conventions. You don't even have newlines at the end of files. Sigh, huge disappoint.\n. I don't really care which conventions you use as far as whitespace goes, but if someone goes through a lot of work and is then turned down because of something like that, I don't consider it normal or nice at all. Considering it would not take you more than a few minutes to do it yourself, and since it is your decision to enforce this rules. A lot of text editors Ruby people use strip out trailing whitespace automatically and convert tabs to spaces too. In such a case it would be considerably easier and faster for you to do that than for someone with said editor.\n. ",
    "samflores": "I actually made another PR (#18) using the project conventions. Turns out it wasn't accepted too and I don't have the time to fix it right now.\n. I've got some time to work on this and have one question: do you prefer one PR per language or everything in a huge PR is fine?\n. ",
    "wa0x6e": "Code seems to have trouble detecting code like\nphp\n$this->{array_shift($this->args)}();\nIt displays\nphp\n$this-&gt;{array_shift($this->args)}();\nIt also does have trouble parsing\nphp\n'a' => 'a'\nand displaying\nphp\n'a' =&gt; 'a'\n. ",
    "Cottser": "This should be rewritten to inherit from the C-like syntax. See https://github.com/LeaVerou/prism/commit/1b40db975c0b5225a5888f0406f9b0452eb730b8. That should greatly reduce the code needed and fix issues with operators and such.\nEdit: I'm willing to help with the conversion, but wanted to give @Aaron3 a chance first :)\n. ",
    "nextgenthemes": "Why is nothing happening here? I am not so much into JS so I can't help but I am so ready to use prism if there would be PHP support.\n. ",
    "MoOx": "Maybe this can be closed since there is now a C-like definition ?\n. @kuba-kubula Your work seems nice. Just 2 things. There is I think a non updated link from a copy paste here https://github.com/kuba-kubula/prism/compare/gh-pages...node-npm#L4R33 to another repo, & you don't follow the code convention on some .js file (2 spaces instead of tabs).\nBtw, @LeaVerou should add a .editorconfig file :) \n. I'll update this PR with a lighter version as you recommend\n. I've try something, but it fails since the order of the declaration are important. Using extend() we can't control order of the parsing, so some rules are not parsed & this doesn't take effect. That's why I overwrite a lot of thing.\nBeside that problem, I understand that I've put too much thing, non especially sass/scss related, but this is another issue :)\n. Oh sorry, I don't look closer enough. This is just what I need. Your highlighter is so well done.\n. Completely rewrote. Lighter & inherit from CSS. Tell me what you think about that now.\n. What about this PR ? :)\n. I think just adding a CSS file is not enough. Maybe you should add some reference to the rest of the project that user now there is one more theme ?\nI've made another theme too but I don't really know how @LeaVerou want to integrated additional themes to her project since the header of the website will change.\n. After reading your comment here about your choice, do you think you can still keep some more CSS tokens in your repo has a extension or a plugin ? What do you think ?\n. What do you think about adding small things to CSS definition like number, hexa & unit tokens ?\nAbout others big stuffs can be add on a extension ? Maybe a 'css-more' definition extending from 'css' & adding time, angle, font-family & easing timing ?\n. Or just search for ruby in the opened issues... And found that https://github.com/samflores/prism/tree/gh-pages/plugins/ruby-language\n. Viewing raw file show it's tabs. It's weird that Github make this kind of change in a diff...\n. It probably needs a merge from master to this branch before merging back :)\n. - Do you want me to undo the modification on prism.js for the PR ?\n- Nice idea for an alternate more-examples.html :). Again do you want me to undo this ? Or maybe you will keep it to create the new example page ?\n- You can it see it running online on the homepage here http://compass-recipes.moox.fr/\n(Btw, it's Sass not SASS :) )\n. I undo the changes you ask.\nJust ping me if you create more example page to add the Sass example back.\n. I'm watching the repo, to handle support for this one :)\n. @jwebcat did you take a look to mine https://github.com/MoOx/sass-prism-theme-base ?\n. I'm working on that. Please follow this issue https://github.com/MoOx/sass-prism-theme-base/issues/1 (btw, I rename the repo)\n. An image is not enough to found the problem. Can you please deliver a live exemple ?\n. It's just your theme does not add specific color for variable (all default theme doesn't). It's correctly parsed.\n\nYou can try to use the theme I create MoOx/prism-sass-theme-monokai. It's a theme made with sass so you can just update it with the color you want :)\n. Note: the Sass lexer is not merged for now :p\n. Ah, you're right it's a tiny error. I read too quickly, again. I'll see if I've time to handle that.\n. I take a look to that issue. It's just that %/# is not highlighted. It's not recognized as anything.\nIt's hard to handle interpolated variable because you can use them into a selector & here it make thing very hard to understand... Take a look at my comment into the source.\nIf we add interpolated one as variable (I mean make #{$*} to be highlighted the same way $*) we are probably going to don't have them recognized into selector. But maybe we can do that for interpolated var that aren't into a selector ?\n. Maybe yes, we can just change that part\njs\nPrism.languages.insertBefore('scss', 'property', {\n    'variable': /\\$[-_\\w]+/i\n});\nto that\njs\nPrism.languages.insertBefore('scss', 'property', {\n    'variable': /((\\$[-_\\w]+)|(#\\{\\$[-_\\w]+\\}))/i\n});\n. It's probably not a big deal. I'll try to take a look at these.\nOr you can. And if you want to test, you can use this example :p\n. It's hard to handle all case with just some regex. I currently use this simple test file. Can you provide some examples of snippets that fail ?\nBtw, PRs are welcome :p \n. I'll take a look to that asap.\n. @mojavelinux :+1:. A good post on what you'r talkin' about http://felixge.de/2013/03/11/the-pull-request-hack.html\n. @LeaVerou You can also cherry pick some players here https://github.com/LeaVerou/prism/contributors :D\n. Totally agree on the last point.\n. Did you take in consideration this comment.\nI think @LeaVerou want to make an extension of CSS, I don't know if it's still relevant.\n. Seems crazy to update this by hand. All that stats are available on Github, this is enough imo. Maybe just top 3 maintainers + links to contributors page.\n. a) Maybe rename \"View source\" to \"View raw\"\n. Sorry, I'm not using Sass nor Prismjs anymore (rework & highlight.js server side).\nI'm also involved in other projects that have higher priorities in my todolist so dont have time for this issue right now.\n. Removing whitespace on empty lines should be in these commit. Maybe this repo need an .editorconfig\n. ",
    "sherblot": "Hello,\nDisplaying all the lines can be very useful for some reasons:\n- It avoid to have to find all the lines numbers using an external app. That can be time consuming when you have long codes and a lot of lines to highlight/refer to (I can be kinda lazy I know :) ).\n- It will help to easily refer to some part of the code we don't want to \"line highlight\" for some reason (reference, notice, out of the scope of an article, etc.)\nIf you are interested I have a 8 lines piece of code improvement for the Line Highlight plugin which do the job using data-line='*'. In that way, the all lines display will be an option.\n. Operators are different too. The number regex will maybe be different to include some other syntaxes for the binary (0b11110101), the floats (2.5F, 0.5f, etc) and the doubles but I'm not sure if it is useful or not. \n. I will work on the numeric notations then. \n\nI (or someone) should do it for JS as well (for 0x).\n\nThe 0x notation is already implemented for JS: \njavascript\n'number': /\\b-?(0x)?\\d*\\.?\\d+\\b/g,\n\nBtw, you don't need to edit prism.js or prism-java.min.js, they are automatically generated by CodeKit.\n\nGood to know, thanks.\n. Hello,\nHere is the number number highlight for Java. I still have one issue with \"1.2345DF\". It shouldn't be highlighted but the \"1\" is. Otherwise all the other number syntax are good.\n. This syntax doesn't exist. I just tried to not highlight invalid syntax but in this case I can't. I didn't added it to code.js, I'll do it right now.\nEdit: My mistake, I did it in the first commit (201077e).\n. ",
    "martinvium": "Hi,\nLine numbers on hover sounds awesome, and would solve a problem im facing. Any news on that or any pointer on how you want it implemented (in which case i might do it my self)?\n. There is the problem of mobile devices, which cannot hover. Maybe a hook could be provided, which would allow enabling line numbers for mobile devices or a button if people prefer so...\n. ",
    "semisedlak": "If no one made Python highlighter for Prism yet, I am working on it.\n. Comments with multiline support can be like this I think:\n'comment': {\n    pattern: /(^|[^])(\\'\\'\\'[\\w\\W]?\\'\\'\\'|#.?(\\r?\\n|$))/g,\n    lookbehind: true\n},\n. ",
    "kuba-kubula": "Here you have it already inside Issues:\nhttps://github.com/LeaVerou/prism/pull/36/files\n. Hi @LeaVerou, it's me again :+1: \nI made a first kick-off for node-friendly Prism (without plugins, which are mostly client-side scripts) > see compare of gh-pages...node-npm https://github.com/kuba-kubula/prism/compare/gh-pages...node-npm\nIt has a prepublish script (tools/prism-node-builder.js), that generates the build/prism-node.js file from prism-core and all the language definitions already set in components.js\nP.S.: It is heavily based on @buymeasoda work here in this pull\n. @MoOx thanks for your precious eye-catch. Fixing.\nFixed.\n. Can be solved by exchanging order of parsers patterns from comment...string => string...comment in the lang files.\n. Used google and found this https://gist.github.com/3430542\n. Hi Lea,\nI have managed to make another approach for building the lineNum plugin\u2026\nSee http://docs.examples.apiary.io\nThe prims.js build for apiary.io is made of just few lines:\n``` javascript\nPrism.hooks.add('after-highlight', function(env){\n    var el = env.element;\n    var textLen = el.textContent.split('\\n').length;\n    lines = new Array(textLen+1);\n    lines = lines.join('');\n    var lineWrapper = document.createElement('span');\n    lineWrapper.className = 'line';\nlineWrapper.innerHTML = lines;\nel.appendChild(lineWrapper)\n\n});\n```\nand few lines in CSS\ncss\nspan.line {\n    position: absolute;\n    pointer-events: none;\n    left: -3.8em;\n    top: 0;\n    width: 3em;\n    letter-spacing: -1px;\n    border-right: 1px solid #ccc;\n}\nspan.line > span {\n    pointer-events: none;\n    display: block;\n    counter-increment: linenumber;\n}\nspan.line > span:before {\n    content: counter(linenumber);\n    font-size: 100%;\n    display: block;\n    font-weight: normal;\n    color: #bbb;\n    padding-right: 0.8em;\n    text-align: right;\n}\nTogether with position:relative and greater padding attached to pre element (because of the line column), it is faster and performance optimized.\n. Why insert spans? Because generated content does need element to be before. Better than wrapping, not yet good enough to be without cluttering the DOM, but there is not one for-loop, so it's fast enough, thanks to Array(length) builder and the glue of  afterwards.\n. @LeaVerou oh, you mean like write the real numbers\u2026 yes, of course you can. Definitely looks like a bit better solution.\nBut the generated content is not selected with mouse when copy-pasta. Avoiding it via pointer-events: none; helps a bit, but still generated text (aka content) doesn't exist at all in the DOM.\n. @LeaVerou I'll make it a pull-request soon, keep up the other commits going into Prism master. I'll polish it more to be performance optimized.\nAnd developers often discuss code, with line-numbers in their texts. Therefore line-numbers are important for them.\n. there needs to be language-markup class\n. :+1: looks like Prism is alive again, thanks\n. Hm, class is sufficient. Just wanted to have possibility to say which <pre> will be and won't be line-numbered.\nI'll add the possibility to change \"start\".\ndata-line-numbers is used because conflict with line-highlighter plugin data-line.\n\u2026 polishing\n. Nope, can't work together, all I wanted was to not-conflict at all.\n. Done. Please review.\n. ping @LeaVerou \n. MY only take is string should happen before comment. Why? Because if you have some code with a URL inside a string (e.g. \"http://www.example.com\") the URL would be highlighted as a comment.\n. @zeitgeist87 isn't highlighting of comments higher priority than showing \"code inside comment\"?\nI'd lovely live in other world, but having code in comment means it is still highlighted as comment.\n. I guess this might happen if your <pre> block contains a trailing whitespace at the end of code, e.g.\n``` html\nsome\nlines\nend\nthere\n\n```\nIs that it?\nEdit: And for Windows, there are \\r\\n related highlightable \\r characters.\n. ",
    "milesj": "This has been superseded by the url matcher.\n. I noticed you haven't started on this. I will give it a go since I will be needing it.\n. CSS now includes pseudos, hexcodes, entities, numbers, functions, classes, IDs, and many more. Closing.\n. I just ran into this issue. I'd rather have broken URLs instead of broken commented code. I haven't found a good solution for this yet.\n. Just tested this locally and could not reproduce. Perhaps it was fixed already?\n. I have a modified PHP version you can try: https://github.com/milesj/prism/blob/php/components/prism-php.js\n. Doesn't seem to be an issue now because of https://github.com/LeaVerou/prism/pull/258\n. How would you like it split up? The clike, java and PHP ones all affect each other.\nI could separate the CSS portion easily.\n. Oh ok, no problem. Just let me know, I have no problem breaking it up.\n. I'm going to split these up since there are a few master commits that I want to get merged in.\n. I tried the ? locally about a week ago and ran into issues where it would fix 1 case, but break another. I'll see if I can replicate it again.\n. Well, not all comments are on the start of the line.\n. Yeah I commented a bit too early. After going over it again, it should work.\n. It should work in unison with your SASS changes. Perhaps add the pseudo stuff into SASS also?\nNot sure what she wants to do with it, but we'll see what she has to say.\n. Ok, I moved all the rules to a css-extras file. At first I was going to have it extend the CSS rules, but since it's not really an extension, but an addition, I simply added the rules to the previous set. \nShould I inherit those CSS rules that you linked?\nSo I tested #27 and it is fixed, so you can close that issue.\n. Improved the patterns based on your input.\n. Updated.\n. No worries, wasn't sure if the commit notified you.\n. Done!\n. Can see an example on my site: http://milesj.me/code/php/decoda\n. Thanks for merging! \nI'll setup some more test cases for those problems you pointed out and get back to you on them.\n. The difference between the Javascript definition and the PHP one is that the PHP one inserts the rules within the PHP language set, while the Javascript inserts them into the markup language set.\nIf a code block contains HTML and PHP, the language type should be PHP, not markup. PHP is the primary language in that case and the rules are defined as such. Seems odd to extend markup with PHP rules, where as the CSS/JS ones make sense.\nAlso the whitespace changes are my IDE stripping trailing spaces/tabs at the end of lines.\n. Been thinking about this a lot as well. Personally, I feel that markup should not be highlighted at all and should just inherit the default text color. This adds emphasis on the PHP syntax and doesn't steal your focus.\nI'll remove the markup stuff for now so the other changes can be merged in.\n. They support multiple languages because they use lexical analysis. I'll have to look at the old code, but it didn't work too well in most cases.\n. The problem is similar to what you mentioned. Any PHP that is written on an HTML tag breaks the parsing. Using nested rules may work but that depends on how deep we go.\n. Let me create a few test cases and see what I can come up with.\n. Ok, took long enough! Took your idea of tokenizing everything and handled it all through hooks. Works in all the examples.\nWhen I have your approval, I'll revert the example changes and we should be good to go.\n. Ok, took long enough! Took your idea of tokenizing everything and handled it all through hooks. Works in all the examples.\nWhen I have your approval, I'll revert the example changes and we should be good to go.\n. Ok, so I spent an hour or two and created test PHP examples for every pattern in all scenarios I could think of. Committed some changes to clike that fixed any problems, for example, > not being highlighted as an operator (not working on the official site either), and =< being backwards.\nAlso removed the this, global and scope patterns. Thinking of placing them in a php-extras file, similar to css-extras. Only the primary patterns now exist in the default PHP language.\nAs for the contributor stuff, that would be great. I really enjoy helping out other people and projects.\nAs usual, let me know if you have any changes.\n. Oh man, that's what I get making these changes at 3am. Thanks for merging and all the feedback!\n. I simple listed all the functions from this page: https://developer.mozilla.org/en-US/docs/Web/CSS/Reference\n. Ooops, didn't even notice the ? in your little code snippets. Easy enough change!\n. Looks like I'll bump this.\n. Well, still wanted all non-PHP stuff to be vetted by you. If your cool with small stuff like this, I could handle it next time.\n. Ok sounds good!\n. Heh, this one looks like it will be tough. Thanks for the report.\n. I don't know if this will be possible to fix, perhaps @LeaVerou has some insight. The problem is as follows:\n1. The parser extracts <(.*?)> first and then <?php(.*?)> second so that we can operate on them separately. Any code that does not fall within those is treated as PHP. This allows for PHP nested within HTML, not the reverse.\n2. If a portion of the code has a token in it, the parser will skip over it. That's why the string 'El archivo <code>' does not get tokenized as a string since it has markup code in it (the <code> has already been parsed). In turn, that's why ' . $controllerPath . ' does become a string since it's the next sequence of open and closing quotes. It then breaks again with the remaining string.\nWhat I was trying to do is have all strings be parsed before markup and PHP blocks, but that would cause all the HTML attributes to be wrapped and therefor breaking markup pattern matching. Tried some other approaches but nothing worked... what I really need is a way to pattern match portions of the string that already have token's in it, so that I could remove the tokens appropriately.\nFor the mean time, you could change the code to this which looks better, but is still a bit broken.\nphp\nif ( ! file_exists( $controllerPath ) ) {\n    throw new DomainException( sprintf('El archivo <code>%s</code> no existe.', $controllerPath) );\n}\n. That's exactly what we didn't want. The primary language is PHP not HTML, and we shouldn't need to wrap large code blocks in delimiters. There's a larger discussion about it here: https://github.com/LeaVerou/prism/pull/101\n. I disagree, HTML has the lowest importance. Rendering markup as the primary language still won't solve the problems listed above, the same issues arise.\n. Actually the way it works is that I tokenize all PHP delimiter groups before highlighting begins, so I replace <?php(.*?)> with {{{PHP#}}}. Then I trigger the markup patterns and then the PHP patterns. Once those are done, I re-insert the PHP code into the token slots and highlight it. This was the only way to easily solve markup + PHP.\nThere's so many different combinations to consider, PHP in HTML, HTML between PHP, HTML in PHP strings, PHP between HTML tags, etc. We solved most cases except this one, which I can't seem to figure out without some major change to either the PHP layer or the parser itself.\nMaybe I can try tokenizing markup alongside PHP also? Not sure if it will work though or how much extra overhead that causes. Would also have to try Lea's suggestion, but not sure that works either.\n. You shouldn't be including this project in bower because all of these files are primarily for the website. You would have to customize a download through the website to get the correct file code.\n. Well that's odd. @LeaVerou have any insight into why this would happen before I jump into it?\n. I tested this with the latest code in my updated branch and everything worked correctly.\nhttps://github.com/milesj/prism/tree/php-fixes\n. I tested it with the latest master code and I couldn't reproduce. Not sure if it's still relevant.\n. Is this using the latest master code?\n. That's not the file you edit, you edit the components/prism-clike.js file.\n. Hey Lea, if you want to build out an example system (switching between languages), I can populate the languages with examples that support every ruleset.\n. Would need to make the function pattern matching smarter, maybe by checking for ( at the end of the word.\n. Wouldn't that conflict with pseudo elements/classes? Will need to test it.\n. I also feel like the prism source and website should be separated. Throw in some Grunt and build packaging as well.\n. Related to https://github.com/LeaVerou/prism/issues/149\n. It's the name of these files: https://github.com/LeaVerou/prism/tree/gh-pages/components\nShould probably add a definite list somewhere though.\n. Do your changes still work well when mixing HTML and PHP?\n. Cheers\n. Yeah, I can get to this sometime this week.\n. Closing. https://github.com/LeaVerou/prism/pull/245\n. Yeah, looks good to me.\n. On top of that, the primary reason is for namespacing. .keyword is much more troublesome than .token.keyword.\n. Just to keep informed, this simply moves the entity encoding till the end, so we no longer need to add them manually? Will update in a bit.\n. Been a while since I messed with this. Let me try lookahead.\n. Updated to lookahead. Removed ignore as it didn't seem necessary anymore in my tests.\n. Looks good! Thanks a lot for looking into this, I haven't had the time to.\n. The other issue I believe is that the comment pattern is ran before the string pattern.\n. Ah yeah, that makes more sense. That would solve the issue I believe.\n. You would have to add a new matching pattern after the string declaration that only matches #.\n'comment_hash': {\n        pattern: /.../g,\n        lookbehind: true\n    }\n. Yeah, not much we can do about those 2 bottom issues without a true lexer. Looks good to me.\n. Javascript actually benefits from it. Anytime new FunctionName (or instanceof) is called it gets triggered as a class. This is especially nice for frameworks like MooTools or Prototype.\n. While testing I noticed many PHP operators not being highlighted, this seemed to fix that. Not sure if it's caused by the tokenizing or string replacements.\n. I can remove it but it would inherit from variable instead of keyword since they are simply special vars.\n. I just tested my new code on my personal site and this doesn't seem to be a problem, but did in the examples. I'll revert it.\n. Simply added the shorthand PHP tag <?\n. Actually, the problem still persists. In the operator \"=>\" only the = is being wrapped. Will look into it more.\n. You may be right, that was taken from the other contributed PHP code.\n. What's the reasoning for not encoding >?\n. border-radius and box-shadow are vendor-prefixless supported for a while now. How far back is Prism trying to support? :P\n. ",
    "beep": "Awesome\u2014thanks, Lea. I\u2019d been tinkering with inside, but wasn\u2019t sure if there was another option. Thanks!\n. Not quite. ;) Thanks again, Lea! You rock mightily.\n. ",
    "danielfilho": "sorry, I've made something but isn't even close to be acceptable. Go on with this and sorry for not have committed anything.\nlooking forward for the implementation :)\n. ",
    "christiannaths": ":+1: \n. ",
    "bdkjones": "Hi Guys,\nWish granted over 8 months ago. Please read about Project Settings on the CodeKit site. Thanks!\n-Bryan\nOn 12 Oct 2012, at 06:34 AM, Lea Verou notifications@github.com wrote:\n\nOh, I see. That doesn't need a pull request, it just needs me to pull, use CodeKit and then push.\nI wish there was some config file that codekit could use, so that everyone that has cloned this repo could also have the same setup :( / CC @bdkjones\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "tnguyen14": "I went to prismjs.com,  go to the download page, picked my options (all 4\nlanguages, line highlighter and invisible character), and click on\n\"Download js\" at the bottom.\nMy Jelly Bean sent you this message\nOn Sep 19, 2012 5:49 PM, \"Jannik Zschiesche\" notifications@github.com\nwrote:\n\nWhich file did you download?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/LeaVerou/prism/issues/39#issuecomment-8708728.\n. Anyone knows if this issue has been fixed on the main webpage? I.e. is it safe to download the minified version now?\n. \n",
    "Zeneraith": "Hi apfelbox,\nI got this error as well, and followed your advice in regards to downloading the Development version. The Line Highlight plugin works fine using the Development version. It continued to work correctly even after I minified it myself.\nIt only messes up if I use the minified version that I got from the Download page.\n. Try visiting this page: http://zeneraith.com/playground/prism-test/\nAll I've done is linked in the CSS and the minified PrismJS with the Line Highlight plugin that I got from the Download page.\nI'm on Chrome 21.0.1180.89, and I'm getting the error mentioned in the original post.\n. Alright, cool. I've updated the test page, and the error is no longer happening. (:\nA weird problem occurs though (only in that test page), and it is specific to Chrome: the position of the line-highlight is incorrect, whereas in Firefox it works fine.\n. ",
    "kpzani": "I did a bit of googling earlier and it seems that the default line-height is usually between 1.2 and 1.3 em.  But as long as the prism style sheets specify a font size and line-height in the pre tag definition then everything should be ok, even if the setting is different from all browsers. \nI'm using twitter bootstrap which has a line-height, so didnt notice it at first.  And on the prismjs site Lea has a definition in styles.css.  \nI think this bug is quite important because if you download the standard pack from the official site and make a test page that just includes prism.js and prism.css (as per instructions) you will get this error.  And you wont be able to see the same error on the official site.  Could be a pretty frustrating afternoon for some users :-(\n. I understand your point but tend to disagree.  a simple !important in their own style sheet would remove this.  if you do it in javascript you are going to have to run getComputedStyle, and then fight the browser differences with this function.  I found an interesting solution here -> stackoverflow.com/questions/3191342/safari-returning-value-normal-for-line-height-style\nwhich creates a clones an element, replaces its content with 10 lines and measures the new height / 10.  \nWhilst I appreciate the enthusiasm of that solution i would tend to think that specifying a line-height would be better.\nIts easy enough to override in your own css.  \nI think it would also be ok to detail the problem in the official site and/or readme and explain that each user should define some standard settings in their own css and this should include pre with font-size and line-height \n. ",
    "loganfranken": "In my tests, @philippkuehn's solution seems to work perfectly for IE9 (tested using IE9 emulation in IE11) and doesn't break the functionality in other browsers (tested in latest Chrome, latest Firefox, latest IE, and emulated IE9/10).\nIf removing a \\r\\n was going to break anywhere, I would think it would break in Windows/IE, right?\nAny gotchas I'm not thinking about or can I move forward with creating a PR with @philippkuehn's fix?\n(BTW: thanks for the solution, @philippkuehn!)\n. Hey @poifox!\nI know it's been a long while, but is this still happening for you? (Your images no longer work)\nLine highlighting works for me in both the latest Chrome and Opera, so I imagine this is now fixed unless you say otherwise.\n. Sounds good, @poifox!\nI can't reproduce this on my end and it sounds like it might be a bit before you can test, so how would you feel about closing this for now and reopening if it pops up for you again?\n. I think this can be closed! (Unless you are able to reproduce it, @poifox?)\n. I think this issue can be closed?\nhttp://bower.io/search/?q=prism\n. To be clear, it looks like the WordPress plugin just takes care of adding the Prism assets to the page:\nhttp://plugins.svn.wordpress.org/prism-syntax-highlighter/trunk/wp-prism.php\nThe real issue here (as @iamdto explained) is that the following two examples render exactly the same:\n<pre class=\"language-css\"><code>p { color: red }</code></pre>\n<pre><code class=\"language-css\">p { color: red }</code></pre>\nWhile the following two examples render differently:\n<pre class=\"language-none\"><code>p { color: red }</code></pre>\n<pre><code class=\"language-none\">p { color: red }</code></pre>\n(They match @iamdto's results from above)\nI think this is all due to the following line of CSS:\nhttps://github.com/loganfranken/prism/blob/gh-pages/themes/prism.css#L55\nRemoving the :not(pre) > appears to fix it. I can put a PR for this unless there are any objections.\n. 8030db914a1e7331d245db0b9b787b4364994440 actually fixed this as well (nice work @Golmote!):\nhttps://jsfiddle.net/za1qg99x/\nLooks like this can be closed!\n. Hey @Golmote, I think this can be closed (unless you had a live example you wanted us to dig into a little further, @murtaugh?)\n. @Golmote Did you want to still keep this one open?\n. I put together a CodePen that shows the current level of support for ES6 features in Prism:\nhttp://codepen.io/loganfranken/pen/aOwMXw\nIt actually looks like the arrow function syntax is now supported (wahoo!), but there are just a few missing pieces:\n- [x] Octal Literals (0o543)\n- [x] Binary Literals (0b101011)\n- [x] Template Strings\n- [x] Regex y Flag\n- [x] Regex u Flag\n- [x] of Keyword (used in for..of loops)\n- [x] as Keyword (used w/ import statement)\n- [x] from Keyword (used w/ import statement)\n. You're all so awesome!\nI think we're done here, right? We can close this issue?\n(Unless you wanted to keep it open to address the edge cases you described, @Golmote?)\n. The article has since changed, but I used the Wayback machine to pull up the old version:\nhttps://web.archive.org/web/20140708044116/http://philsturgeon.uk/blog/2013/06/facebook-message-with-xmpp-access-tokens-python\nHere's the source from the original page:\n``` html\nimport sleekxmpp\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\nclass SendMsgBot(sleekxmpp.ClientXMPP):\n    \"\"\"\n    A basic SleekXMPP bot that will log in, send a message,\n    and then log out.\n    \"\"\"\n    def init(self, jid, recipient, message):\n    sleekxmpp.ClientXMPP.__init__(self, jid, 'ignore')\n\n    # The message we wish to send, and the JID that\n    # will receive it.\n    self.recipient = recipient\n    self.msg = message\n\n    # The session_start event will be triggered when\n    # the bot establishes its connection with the server\n    # and the XML streams are ready for use. We want to\n    # listen for this event so that we we can initialize\n    # our roster.\n    self.add_event_handler(\"session_start\", self.start, threaded=True)\n\ndef start(self, event):\n\n    self.send_presence()\n\n    self.get_roster()\n\n    self.send_message(mto=self.recipient,\n                    mbody=self.msg,\n                    mtype='chat')\n\n    # Using wait=True ensures that the send queue will be\n    # emptied before ending the session.\n    self.disconnect(wait=True)\n\n\n```\nCheck out the bottom line:\nhtml\n</code></pre><p></code></pre></p>\nThat opening p around the closing </code> and </pre> causes the Chrome Dev Tools to get a little confused here, causing the oddity that @philsturgeon shows above.\n(I imagine some CMS auto-inserting a p is the culprit here)\nI think this can be closed unless you disagree, @philsturgeon?\n. @Golmote I think this can be closed; I'm pretty confident the overlapping HTML elements were causing the strange behavior above.\n. Looks like this works! :confetti_ball:\nhttps://jsfiddle.net/9wL6ywx4/\nI think we can close this one!\n. I think this can be closed, right? The Examples page is up and running and it's working great.\n. @opatry, are you still able to reproduce this?\nI swear I reproduced this last night, but I can no longer get it to occur:\nhttps://jsfiddle.net/eyu3xo7r/\nEven though I think I was able to reproduce this under some conditions, I'm guessing it must be a rare edge case (maybe I had setting off in Chrome Dev Tools or something), so I would vote to close this unless you're able to reproduce this, @opatry.\n. Hey @hilja, I know it's been awhile, but do you have an example of this?\nThe minified code works just fine for me, so maybe this got fixed?\n. @Golmote I think this one can be closed\n. It looks like someone did this (wahoo!):\nhttps://cdnjs.com/libraries/prism\nI think this can be closed.\n. Hey @sujilesh, do you have a live example of this?\nWhen I embedded the latest Prism in a fiddle, I wasn't able to recreate the problem:\nhttps://jsfiddle.net/8rzwq5sp/\nMaybe the issue has been fixed?\n. Hey @Golmote, I think we can close this issue since I'm unable to reproduce it.\n(Unless you can, @sujilesh?)\n. As mentioned in #158, this is done:\nhttps://cdnjs.com/libraries/prism\nSo I agree with @apfelbox that we should close this.\n. @Golmote I think we can close this; #158 has the discussion on releasing a new version out to CDN JS (which is the next step for this)\n. This is done here:\nhttp://prismjs.com/#languages-list\nSo I think this can be closed?\n. We're pretty close this one; styling is done regardless if Prism recognizes the language:\nhttps://jsfiddle.net/c6ao3tb9/1/\nLine numbers, however, are a different story.\n. This is awesome @kbjr and @Golmote!\nIt doesn't look like there are plans to bring this into the core Prism, right? If not, we could probably close this issue,\n. I might be missing something, but I don't think I see the bug in the pictures above?\n. Ahh, thanks @mahnunchik!\nLooks fixed on the Examples page now:\nhttp://prismjs.com/index.html#examples\nDoes it seem fixed to you too, @mahnunchik?\n. Awesome, @mahnunchik!\nI think we can close this one!\n. The download page does an awesome job of this:\nhttp://prismjs.com/download.html\nI think this can be closed?\n. As I've been looking through the issues, this is a pretty hot topic (the whole gh-pages as the main branch over master debate): I think we might want to try and keep the discussion in one place.\nI think #180 is where most of this talk is happening right now.\nMaybe we can close this issue as a duplicate?\n. This is awesome, @vjeux!\nSince there are no plans to integrate this back into the core project, I think we can close this issue.\n(Unless you wanted to open a PR for your hard work, @vjeux? :wink:)\n. Based on @thadin's suggestion and @zeitgeist87's working example, it looks like this can be closed.\n. While there is some discussion above of an extensive toolbar, it looks like this issue is mostly about the \"Copy to Clipboard\" feature: this is also discussed in #280.\nI think this a cool feature to pursue, but maybe we should close either this issue or #280 to simplify things?\n. Looks like this can be closed now?\n. Looks like this one can be closed?\n. No problem, @Golmote! Thanks for keeping this awesome project going!\n. Nice demo, @javatlacati!\nBut I think we're specifically trying to see a demo of Prism stripping &lt;? (Correct me if I'm wrong, though!)\nAlso, we should leave references to physical attractiveness out of this; they aren't relevant.\n. Hey @vkbansal, maybe I'm wrong, but it doesn't look like operators are highlighted as part of numbers with Prism currently:\nhttp://codepen.io/loganfranken/pen/gpxaLe\nSo it would seem to fall in line that -Infinity shouldn't be highlighted as a number (if the minus operator in -123 isn't highlighted as number, for example).\nTotally let me know if I'm missing something, though!\n. @apfelbox Ahh, thanks for clearing that up!\n. Hey @TheZoker, I think your new lines might be getting stripped.\nIf you look at the source code (view-source:http://demo.comboot.io/viewtopic.php?style=2&f=2&t=7&p=66#p66) from the original issue you reported:\nhtml\n<div class=\"content\">\n                            <dl class=\"codebox\"><dt>Code: <a href=\"#\" onclick=\"selectCode(this); return false;\">Select all</a></dt><dd><pre class=\"line-numbers\"><code class=\"language-markup\">&lt;?php <br />&nbsp;Print &quot;Hello, World!&quot;;<br />&nbsp;?&gt; <br /><br />&nbsp;&lt;?php <br />&nbsp;Echo &quot;Hello, World!&quot;;<br />&nbsp;?&gt;<br /></code></pre></dd></dl>\n                        </div>\nIt looks like it's all in one line in the markup, so Prism will display it in kind.\nLet me know if I'm off base, though!\n. Augh, sorry about this: I can no longer get this issue to occur.\nLast night, I swore I was able to recreate @opatry's example from #152: basically, the first xhr request would fail, causing Prism to bomb out and not attempt the second xhr request, leaving the second code block blank.\nBut I can no longer reproduce it; in fact, it works perfectly in this Fiddle:\nhttps://jsfiddle.net/eyu3xo7r/\n(Maybe I passed out and had a very specific Prism-related dream last night)\nI'll close this pull request given that I can't recreate the behavior.\n. Dang! You are killing it, Golmote! Thanks for getting all of these languages incorporated!\n. I do get notified each time, but I definitely don't see it as spam!\n. Hey @TheZoker, what do you mean exactly by the padding isn't correct? Are you talking about how the \"4\" is cut off in your picture? Or something else?\n. Hmm, it comes up for me too!\n. Hey @markg85!\n(Thanks for reporting this!)\nI think this is the same problem that was discussed in #181: basically, (as @Golmote explains), the line numbers plugin runs in the after-highlight hook, which is never called because no highlighting occurs.\n@Golmote lays out two approaches to fix this in #181: add a no-grammar hook or a complete hook. I think the latter approach makes the most sense.\nI'm wondering if we should close #181 and have this be the main issue for this problem since #181 is actually about two different issues, the first of which we already solved.\n(Let me know if you feel like I got this wrong, @markg85!)\n. This is awesome!\n. How exciting! :tada:\n. I can't reproduce the issue either: I also don't get a warning when downloading the script from the Prism website.\n. ",
    "Golmote": "\nAny gotchas I'm not thinking about or can I move forward with creating a PR with @philippkuehn's fix?\n\nI can't think of any. Feel free to submit a PR. ;)\n. As it cannot be reproduced, I'm closing this issue.\n. I think so.\n. Indeed. Thanks!\n. Sure. To build the prism.js file, you just need to run gulp.\n. #959 fixed this issue. First JSFiddle is working as expected.\n. @loganfranken: I think Prism still have issues with some long patterns, but since the issue described here is so specific I think we could close it, indeed. But before doing so, I'd like to hear @LeaVerou's opinion about this.\n. @LeaVerou Feel free to reopen this issue if you think we should investigate further. For now, the issue cannot be reproduced, so I'm closing it.\n. This should be fixed now.\n. I'm closing this issue. We're doing our best to handle PRs as they come in.\n. Fat arrow and spread operators are highlighted, indeed, but not as whole tokens. => gets highlighted because of = and > being operators, and ... because of . being punctuation.\nI wonder if we should add them on their own.\n. Just added support for template strings (04f72b1495278dccea1d6d994fbc885d5f841692). I updated the examples with a section illustrating those ES6 features:\n\nI also updated the known failures:\n\n. No, I think we can close it for now. We'll think about those spread and fat arrow operators later, since they are currently highlighted, though not as semantically as expected.\n. You're right.\n. All < appearing in you code must be encoded as &lt;, otherwise they can be interpreted as HTML by your browser, preventing the code to be highlighted properly.\nThis is not related to Prism. Even without doing any highlighting, your browser would output only var i = ' '.\n. The behaviour of the php component must not have changed that much, though. =/\n. I think the greedy feature (#779) and/or its improvement (#967) fixed this issue. Both codes in the first message now highlight properly.\n. I merged it manually. I messed up a bit though, so there are two commits: 4d64d077265b6e229701f486ce704fb921c69384 and 071c3ddf767d3d30bc17e4ee0b27f3543eca7a15.\n. You're right, this was fixed with commit 3aeecb5a83b181d4218ebd6555bcd1ddb5003c3b.\n. This looks fixed with the current version of the component.\n\n. @LeaVerou, do you have a clear idea of how should work the Examples page you describe ?\nShould the examples be hard-coded in a single HTML page ? Or maybe each language could have its own template file and we would load it dynamically based on the languages defined in components.js ? (in this case, where would the templates be stored ? In components/ ?)\nFinally, showing all examples for all languages on the same page might be more than a bit heavy... couldn't we find a way to show then on demand ? (just like the reworked Download page) With checkboxes... or tabs... ?\nIf you could describe your expectations better, I could try working on it.\n. @LeaVerou While you're around, would you mind give me your thoughts about this ? With some directions, I could probably look at it soon.\n. I agree that an \"examples\" folder is needed. But I'm not sure JSON is the best format to store code examples. They would be hardly maintainable.\nWhy not use html files directly ? We would call highlightAll (or highlightElement for a smarter approach) once the file is loaded and inserted.\nWe could do something like the download page. We load the components.js file and the tree from the Github API. We can then create checkboxes for languages that have examples (markup, css and js would be pre-checked). The examples for the checked languages would be requested, inserted below the checkboxes, and highlighted dynamically.\nI can provide examples for most of the languages.\nAll examples files would have a simple structure, something like :\n``` html\n\nName of the language\nTo use this language, use the class \"language-alias-of-the-language\".\n<h2>Feature 1 (e.g. Variables and types)</h2>\n<p>Maybe some notes before (e.g. All built-in types are highlighted)</p>\n<pre><code>Example goes here</code></pre>\n<p>Maybe some notes after (e.g. Note that user-defined types are not highlighted)</p>\n\n<h2>Feature 2</h2>\n...\n\n<h2>Known issues</h2>\n...\n\n\n```\nHow about this ?\n. I started working on this. See PR #445 for the code and this online version.\n. Unable to reproduce the bug. I close the issue.\n. The version is outdated. I guess since we now have release 1.0.0, something can be done to update CDNJS.\n. @thednp I configured the autopupdate on jsdelivr. (https://github.com/jsdelivr/jsdelivr/tree/master/files/prism)\n. No, there are all themes, all components (minified), all plugins (minified) and a default prism.js file that is mainly used for Prism's website, currently. We can argue about the minification of the themes, but well, I think we're ok for now.\n. Both CDNJS and jsDeliver look up to date. I'm closing this issue.\n. @NullVoxPopuli Unfortunately, using the CDN, you need to handle language dependencies yourself.\nHandlebars requires Markup-templating, so a working example would be: https://codesandbox.io/s/3vx76wq76m. @hades200082 I'm pretty sure this has been suggested before, but I'm unable to find the thread I'm looking for. Yet, there are short discussions about this in https://github.com/PrismJS/prism/issues/174#issuecomment-26757046 and https://github.com/PrismJS/prism/issues/768#issuecomment-140006315.\nThis would be a ~274Kb (minified) file, though. Do we really want people to load such a file?. @mAAdhaTTah That's definitely what I'm worried about. I guess we could add a message warning about the file size, so that we don't hold the responsability.... Not reproduced.\n. @benjaminapetersen Can you provide an online example that reproduces the issue please?\n. Yup. Discussion goes on in #158.\n. There is still no \"master\" branch. So Bower will still require you to specify the \"gh-pages\" branch.\n. Crap! I didn't realize there were a master branch! I have no idea who created it and when. I don't know how to get the info...\nI might even have created it by mistake... I think my local branch is named \"master\"...\n. A test build hook would be useful... if we actually had tests.\n. Sure, and I agree that this needs to be sorted out. Eventually we'll need tests too.\n. As we now have a master branch, that is updated on every new official release, I think this issue can be closed.\nThe current situation is probably not perfect yet, but it works for now.\n. The line numbers plugin runs during the after-highlight hook. Triggering the after-highlight hook if no highlighting has been done makes no sense to me.\nI'm open to suggestions though.\n. The highlighting function returns early when it can't find the grammar.\nSo I can think of two options:\n- Add a no-grammar hook and plug the line numbers plugin on both hooks (no-grammar and after-highlight)\n- or add a complete (or done?) hook that runs when the highlighting function returns, no matter if it highlighted something or not.\n. I'm closing this issue now, since the styling is applied even if Prism can't find the grammar. Discussion regarding line-numbers plugins for unrecognized languages goes on in #645.\n. Now we have tests, most of the regexps have been rewritten (or at least checked). I can't assure you there are no more issues in them but if there are, they'll have to be fixed on a case-by-case basis.\n. I think this can be closed, in favor of the Command Line plugin which provides a nice display for the prompt and is configurable.. I just tried with NVDA. It seems to read <pre><code> elements line by line, whether they are highlighted by prism or not.\n. The thread is a year old, but I found it funny, so I followed kbjr's path and did this : https://github.com/Golmote/prism-treeview\n(I don't think this should be included in Prism, but it was fun to do)\n. @mAAdhaTTah Actually, I just followed the syntax given by kbjr in his first comment. ^^ But if there is something official, I'd be glad to add support for it.\nEDIT : After a quick research, yes, it looks like the syntax used by tree (http://mama.indstate.edu/users/ice/tree/), except for the [dir] part I added to make the distinction between files and folders...\n@uranusjr Sounds fun, I'll see what I can do. :)\nEDIT : Now it does.\n. Currently it requires the [dir] part to display the icon of a folder. Without it, the entry will be considered to be a file.\nThis is needed to make the distinction between an empty folder and a file without known extension.\nAs far as I can tell, tree only makes the color different for folders. There is no symbol I could rely on...\n. Seems good to me. Now it will identify directories based on the trailing slash. The other chars appended by -F are stripped.\n. You're right.\n. Here you go.\n\n. This is a screenshot of the Examples page of the website.\n. And individual components can be found (minified and not minified) in the components folder on GitHub.\n. You're right. See #180 for discussion about this.\n. I closed this issue by adding a alias. I know there is still a naming problem... but it's not specific to SCSS. Prism has a general naming problem that would need to be fixed at some point.\nFor now, those flags are highlighted as keywords. And indeed, they are keywords.\n. Thanks! I manually merged it in b2f14d961e6e1c355f040a7a0932f58b06198863.\n. npm package is now published, with the latest release version. We'll try to keep it that way in the future. ;)\n. This showed up recently: https://github.com/zenorocha/clipboard.js.\nJust thought I would let you know ;)\n. This issue is fixed with those PRs merged.. AFAIK, still only Flash. And ZeroClipboard (used in the above example) is the reference for this.\nEDIT: This is what Github uses, for example.\n. @uranusjr I'm still pretty sure we can't use it to make a \"Copy to clipboard\" button, but please show me I'm wrong.\n. Alright, let's recap.\nFor the plugin by Philip Lawrence, see http://dev.misterphilip.com/prism/plugins/toolbar/.\nFor the repo created by santo007, see https://github.com/santo007/prism-toolbar.\nFor the \"Copy to Clipboard\" feature request, see #280.\n. @LeaVerou Well, first create the repo. We'll see if anyone can do a website, next. Some screenshots of the available themes in the README could probably be enough to begin with.\n. @aviaryan: I just added your Github theme to the prism-themes repo.\nI also added a few tokens to handle git and markdown better (inserted, deleted, bold, italic).\n. > Highlighting of JS and CSS inside HTML doesn't happen. Maybe it's because I am using individual js files instead of a pack.\nBTW, this is because Markup must be included before CSS and JS for this to work properly.\n. This is mostly fixed by the greedy feature (#779) and its improvement (#967). I'm closing the issue.\n. I merged this manually. Added some aliases too.\nThanks for contributing! ;)\n. Then we'll close the PR. If anyone needs the language definition, it's still here anyway.. I think highlighting keywords would be quite a mess. Any CSS value (other than text, color, and some other few types) is actually a keyword, so I guess the full list would be huge. The same goes for the 145 CSS3 colors...\n. Most of the requests in original message have been handled:\n- hex colors are handled by CSS Extras component\n- ids, classes and attributes in selectors are handled by CSS Extras component\n- numbers are highlighted ; keywords are not and won't be\n- interpolation is highlighted in selectors, properties and values in SCSS\n- parent selector & is highlighted in SCSS\nIf I missed something, please create a new issue. I'm closing this one.\n. @zeitgeist87 Sorry for the delay. I merged this manually in 942a6ec7694ecd343b44e3f7b6fc9079d3b8bbfe. Would you mind updating the examples in examples/prism-latex.html to reflect the additions you made?\n. This should be fixed by #732.\n. I like the idea of a formatter plugin, but I'm not super optimistic about it, since the beautifying will depend on the language used.\nAnyway, if anyone ends up with an awesome idea to do it, feel free to submit a PR.\n. Indeed, this looks like a browser bug (see here, here and here)...\n. I can't reproduce this issue anymore. They must have fixed it somehow.\n. Building a WYSIWYG is not the current purpose of Prism, so I'm closing this issue.\n. The optimisation of the regexps in the JavaScript component over the past years seem to have solve this issue. I'm closing it. Please comment if you're still able to reproduce it, so we can reopen.. There is no need to remove the existing line-highlight divs at the beginning of the highlightLines()-function, since the highlighting gets rid of existing markup.\nI'm closing this issue.\n. I consider this fixed.\n. I assume this is no longer relevant. Since we do no longer overwrite the self global directly, and instead use a _self variable.. I made the change in the C-like component (d4194c93cfec0982a851a8a3dc1e89842ee72a64).\nFor JS in markup, I'll wait for tests, since the change seems to affect ASP.NET as well.\n. I just applied the change to <script> and <style> tags (29643f4e462d2fdac353c44c2d826f0c4c5dc62f).\n. No there is no actual guidelines for writing the examples. Just try to follow the format used in the current examples and to provide a pretty complete overview of the features of the component.\n. @chris-martin: This component has not made it into Prism yet. I think you'd better use the JS component to highlight your JSON, for now, as it seems to work properly:\n\n. In theory they are. In practice all engines follow the order in which the properties were defined. And Prism relies on this behaviour.\n. @darobin I'll try to make a proper review of this PR by the end of the week. \n. I added some very common language aliases in 2f9fe1efb80e4744092cfd1e0ad245df18e59c0d. Please submit another PR if you wish to add any.\n. As far as I can tell, current version of Prism does not trigger errors in Google Closure Compiler. I'm closing this issue.\n. The regexp contains two quotes of the same type, so the failure is a known issue. Commit a74ff8782a9efa2fbb336bace4e733e91b88b391 seems to be in cause.\n. I think this was fixed in 14f3f80df4d58dd6e556f022f43029fac4ffb1ec. Please reopen if you can still reproduce it.\n. Couldn't it be handled the same way an initial line feed is?\nSee https://github.com/PrismJS/prism/blob/gh-pages/components/prism-core.js#L185\n. I'm just trying to find the best way to solve it.\n. @LeaVerou: Thank you for the feedback on this. I might create a plugin to remove the initial line feed then, so that those who want that behaviour can have it.\n. I consider this issue was fixed by #514.\n. @ryanzec #479 has been merged.\n. Yes it's been released. And yes it should highlight your example.\nHave you loaded the jsx component? Only a few languages are bundled in the main prism.js file. \n. It seems to me this issue, if still relevant, is on jsviews' side, not Prism's. I'm closing it.. #1230 fixed this issue in a more compatible way.. I think this issue is fixed, isn't it? The list of all the languages, with their associated class, is displayed on the homepage.\nFurthermore, the Examples page also specifies for each language the class to use.\n. Yup. BTW, thanks for pointing out all those fixed issues ;)\n. @axelduch: Your regexp seems to tolerate too many characters. []^`( is definitely not a valid identifier, but it matches your regexp. ^^\n. (This thread on Stack Overflow may help.)\n. Bower was officially deprecated last year, so I'll close this issue.\nAt some point in the future (like a hypothetical major version bump), we might even want to delete our current bower.json file and drop support for it.. Sure, I'll give it a look.\n. Hm... in fact, this is approximately the same regexp I used for Rust language.The visual separators are a pain in the neck ^^.\nDo you suggest we use inaccurate matching like /\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/ig for hexa, octal and bin numbers at once ?\nI'm also concerned with the string regexps, which could be written (if I understand well) /\"([^[]*)\\[[\\s\\S]+?\\]\\1\"/, /\"([^{]*)\\{[\\s\\S]+?\\}\\1\"/ and /\"(?:%\\s+%|%\"|.)*?\"/. I don't think there is a need to match all special characters.\nThe same could apply to the \"char\" token : /'(?:%'|.)+?'/\n@Conaclos : Am I getting this right ? Would these regexps match all valid numbers, strings and chars ? (as we don't care about invalid ones)\n. Added here too ! :)\n. Alright, seems good to me now.\n. Added ! :)\n. Using Github API sounds like a good and simple idea (https://api.github.com/repos/LeaVerou/prism/contents/components).\nAbout the building part, why not keeping it dynamic by downloading the needed files at the moment they are checked ?\n. @lydell Quoting the link you provided :\n\nLimitations\nTokenizing JavaScript using regexes\u2014in fact, one single regex\u2014won\u2019t be\nperfect. But that\u2019s not the point either.\nDivision and regex literals collision\nConsider this example:\njs\nvar g = 9.82\nvar number = bar / 2/g\nvar regex = / 2/g\nA human can easily understand that in the number line we\u2019re dealing with\ndivision, and in the regex line we\u2019re dealing with a regex literal. How come?\nBecause humans can look at the whole code to put the / characters in context.\nA JavaScript regex cannot. It only sees forwards.\nWhen the jsTokens regex scans throught the above, it will see the following\nat the end of both the number and regex rows:\njs\n/ 2/g\nIt is then impossible to know if that is a regex literal, or part of an\nexpression dealing with division.\nHere is a similar case:\njs\nfoo /= 2/g\nfoo(/= 2/g)\nThe first line divides the foo variable with 2/g. The second line calls the\nfoo function with the regex literal /= 2/g. Again, since jsTokens only\nsees forwards, it cannot tell the two cases apart.\n\nThis is an example among others (even if this one is not clearly related to nested structures).\nAbout nested structures, consider the Rust language, which supports nested block comments :\nrust\n/* This is a comment\n    /* with another comment inside\n        /* and maybe a third ?\n            /* and so on...\n            infinitely... */\n        */\n    */\n*/\nNow find me a regexp that matches this comment and any other combination of nested comments... (and see how Github also fails at highlighting this code properly...)\nThere may be simple ways to improve highlighting in Prism (hence the PR I'm proposing) but it surely still won't be perfect.\n. I misunderstood your first comment, I think, making my answer quite irrelevant... Sorry about that. :s\nIt would be possible, in effect, to use only one regexp to match all \"enclosing\" patterns at once, and then use the \"inside\" feature to highlight each one. But the language grammars would become quite messy. And inheritance between components would be more complicated.\nThe idea here is to change the way Prism processes the grammars to obtain the same results without changing too much stuff. See #424 for my attempt at doing it.\nConcerning Rust, I submitted a PR (#430) a few days ago.\n. Yes I know about your addon. I don't think it's a solution we want to include into Prism though. \n. You are right that regexes can't solve the issue completely but it can definitely do better than now. And Prism will keep working this way. We won't add parsing abilities to it.\n. I'm closing this, since the greedy feature works pretty well.\n. Need to merge this. Handlebars is just so broken right now...\n. It uses the same principle used in the PHP component.\nBy replacing the handlebars parts by a simple symbol, the Markup grammar can be applied properly. After the highlighting is done, the symbols are \"manually\" highlighted (line 76) with the grammar and inserted back in the (already highlighted) code.\nIt allows code like this to be highlighted quite correctly :\n\nWhen not doing this, every Handlebars tag that appear inside an HTML tag breaks the higlighting. Like the Twig component does currently, for example :\n\nI'd like if there was another way of achieving the expected result, but I couldn't think of any. See your discussion with milesj on PHP last year : https://github.com/LeaVerou/prism/pull/101 (mainly this comment of yours https://github.com/LeaVerou/prism/pull/101#issuecomment-19006772)\n. That's a good point.\nThere's a crazy idea right now in my mind, where some languages could be tagged as \"templating languages\". And there would be a way to specify two languages for highlighting (e.g. class=\"language-markup language-template-handlebars\"). But it would not prevent the use of a templating language alone (for use with plain text, for example).\nBut all this does not solve the problem of the hacky way used to highlight a templating language inside another. ^^'\n. Oh, I just realized that this is already supposed to be handled by css-extras, but it's broken since the removal of the \"ignore\" pattern... (7b20bc1a407e71157d1f1d1ce8c51b75fbafc32b)\nI'll update this PR, then.\n. @vkbansal When @LeaVerou will have time to review it.\n. I'll review this one before merging. I guess I'll have to modify the themes.\n. @LeaVerou Does it look better now?\n\n. Giving priority to MD over HTML will raise other issues, like the inability to comment markdown:\nmarkdown\n<!-- *italic* -->\nIt will also break HTML highlighting in some cases like this one:\nmarkdown\n<div class=\"_test_\"></div>\nAre we sure we want to do this?\n. I don't think people really make extensive use of HTML attributes in markdown. So I guess it's ok to give priority to MD.\n. I inserted markdown before the prolog key of markup, so HTML comments have priority.\nI added some nested patterns with inside but since the bold, italic and link patterns are in competition, the result is not perfect.\n\n. @mAAdhaTTah Yes, that is why the text says \"italic inside bold does work\". ^^\n. @mAAdhaTTah Is it more clear like this?\n\n. @LeaVerou Looks good for you?\n. Hi, sorry for the delay. I merged this PR manually in a3e751a48ce830b64377081f5c7d4974b534eef2.\n. Sure. Here you go : http://golmote.free.fr/prism/download.html\n. I just spotted one difference between the current download page and the one in this PR : if a file does not exist (e.g. scheme-min.js), current page displays undefined in the textarea, whereas the new version fails silently and does not update the textarea until the broken language is unchecked (because the contentsPromise never resolves).\nI could reject to contentsPromise if the XHR return code is >= 400, but what should be the exact behaviour ?\n. Last commit handles the case where a file does not exist by printing a comment in the textarea :\n/* Error downloading file path/of/the/file */\nScreenshot :\n\nJust tell me if you want another behaviour. Anyway, this kind of error should normally not happen :)\n. Does something like this looks good to you ?\n\n. I saw issue #186 in the meantime... so I did a bigger review.\nHere is the comparison of the same CoffeeScript code, before and after. The code is based on all the examples from the CoffeeScript documentation.\nClick to see comparison (the file is large so I won't inline it)\nTo sum it up :\n- Prevented single line comments to mess up with string interpolation\n- Highlighted string interpolation\n- Added missing keywords like and, then, etc.\n- Changed the string pattern to match multiline strings\n- Fixed highlighting of class members (@foo)\n- Highlighted inline javascript (between backticks)\n- Highlighted block strings\n- Highlighted block regexps\n- Fixed most the regexps...\n. I like the original idea. But IMO the regexp option would only solve some uncommon use cases and so is not really nedded.\n. I must admit I'm not very fond of the API neither. I used a string to allow for multiple groups of competitors, that would need to run one after the other without competition between the groups... but I can't find any example where this could be useful. \nI like the start/end pattern but what about single line comments ? Should we specify an end pattern like /(?=\\n|$)/ ? Or just omit the end key ?\n. Seems good to me. Thanks for the directions, I'll dive into it and update this PR eventually.\n. Hi there!\nI thought a lot about this stuff during the holidays. Your suggestion using start and end patterns would raise some tricky problems...\nTo match the whole symbol, we'd need to merge the start, contents and end regexps together, leading to the same problems encountered in PR #444! What happens if the user sets the i modifier only on the start token, for example?\nWhat do you think? Can we sort it out or should we go back to the boolean solution, and just find a better name than competition?\n. This looked like an awesome idea until I tested strings like \"foo \\\" bar\". When searching for end, we find the escaped quote.\nEven if we add some lookbehind check to ensure the quote is not escaped, it will fail on \"foo \\\\\" by thinking the quote is escaped when it's not...\nSo we might need to consume contents before searching for end, but this would require contents to be more precise. Like /(\\\\.|[^\"])*/ instead of just /(\\\\?.)*/ for strings, for example. This is probably not easy enough for \"a random dev, new to Prism, trying to hack together a language definition\".\nWhat do you think?\n. I just ran a quick benchmark on the three concerned versions of Prism: the original (current state on Prism website), the one from this PR (in the current state) and the one from PR #444 (at commit zeitgeist87/prism@0187761a56d8abdc83288921e4c4782ecbab955d).\nI did not benchmark your proposed API as I could not yet make it work properly.\nThe benchmark highlights the following code:\njavascript\n/*fo\"/o*/ \"*/bar\", /ba\"z*/;\n\"Foo // bar\"\n\"/foo/\"; /* \"bar\" /baz/ */\n/\"foo\"/, \"/*bar\", \"baz*/\";\n/foo\"/, \"bar\", \"baz\";\n// foo \"bar\" baz\n\"foo /* bar */ baz\";\nI repeated this code fragment multiple times to test for longer codes.\nThe code was highlighted a first time before the benchmark runs so that I could check the result and ignore the grammar optimization time in PR #444.\nHere are the results in Chrome 39.0.2171.95:\n| Prism version | Code length | Number of runs | Average time |\n| --- | --- | --- | --- |\n| Original | 155 chars | 1000 | 0.29 ms |\n| PR #424 | 155 chars | 1000 | 0.37 ms (27% slower) |\n| PR #444 | 155 chars | 1000 | 0.35 ms (20% slower) |\n| Original | 1550 chars | 100 | 1.86 ms |\n| PR #424 | 1550 chars | 100 | 2.64 ms (41% slower) |\n| PR #444 | 1550 chars | 100 | 2.38 ms (28% slower) |\n| Original | 15500 chars | 50 | 9.99 ms |\n| PR #424 | 15500 chars | 50 | 14.28 ms (43% slower) |\n| PR #444 | 15500 chars | 50 | 13.67 ms (37% slower) |\n| Original | 155000 chars | 10 | 171.87 ms |\n| PR #424 | 155000 chars | 10 | 208.23 ms (21% slower) |\n| PR #444 | 155000 chars | 10 | 200.53 ms (17% slower) |\nHere are the results in Firefox 34.0.5:\n| Prism version | Code length | Number of runs | Average time |\n| --- | --- | --- | --- |\n| Original | 155 chars | 1000 | 1.11 ms |\n| PR #424 | 155 chars | 1000 | 1.46 ms (31% slower) |\n| PR #444 | 155 chars | 1000 | 1.39 ms (25% slower) |\n| Original | 1550 chars | 100 | 5.53 ms |\n| PR #424 | 1550 chars | 100 | 7.08 ms (28% slower) |\n| PR #444 | 1550 chars | 100 | 7.12 ms (28% slower) |\n| Original | 15500 chars | 50 | 51.35 ms |\n| PR #424 | 15500 chars | 50 | 74.60 ms (45% slower) |\n| PR #444 | 15500 chars | 50 | 69.39 ms (35% slower) |\n| Original | 155000 chars | 10 | 1022.95 ms |\n| PR #424 | 155000 chars | 10 | 1705.92 ms (66% slower) |\n| PR #444 | 155000 chars | 10 | 2153.13 ms (110% slower) |\nFinally, here is the benchmark code I used:\n``` html\n/fo\"/o/ \"/bar\", /ba\"z/;\n\"Foo // bar\"\n\"/foo/\"; / \"bar\" /baz/ /\n/\"foo\"/, \"/bar\", \"baz/\";\n/foo\"/, \"bar\", \"baz\";\n// foo \"bar\" baz\n\"foo / bar / baz\";\n\n\n\n\n\n    (function() {\n        var elt = document.getElementById('benchmark-core'),\n            code = elt.textContent;\n\n        Prism.highlightElement(elt);\n\n        function avg(arr) {\n            return arr.reduce(function(a,b) { return a+b; })/arr.length;\n        }\n        function str_repeat(s, n) {\n            var res = '';\n            while(n--) {\n                res += s;\n            }\n            return res;\n        }\n\n        function benchmark(code, cpt, cb) {\n            var logs = [],\n                f = function() {\n                    if(cpt--) {\n                        var start = performance.now();\n                        Prism.highlight(code, Prism.languages.javascript, 'javascript');\n                        logs.push(performance.now() - start);\n                        requestAnimationFrame(f);\n                    } else {\n                        console.log('Average time: ' + avg(logs) + ' ms');\n                        cb && cb();\n                    }\n                };\n            console.log('Highlighting '+code.length+'-char code '+cpt+' times.');\n            f();\n        }\n\n        window.onload = function() {\n            benchmark(code, 1000, function () {\n                benchmark(str_repeat(code, 10), 100, function () {\n                    benchmark(str_repeat(code, 100), 50, function () {\n                        benchmark(str_repeat(code, 1000), 10, function () {\n                            console.log('Done');\n                        });\n                    });\n                });\n            });\n        };\n    }());\n\n```\n. > @Golmote: If the dev gives us the escape character too (which would default to \\, but other languages may have different escape characters), can\u2019t we build the necessary regex ourselves in the background?\n@LeaVerou If we need to build the regexp by combining the start, contents and end patterns, with or without any escape character, we will encouter the same problems with the regexp flags (see previously https://github.com/LeaVerou/prism/pull/424#issuecomment-68592959, or yours here https://github.com/LeaVerou/prism/pull/444#issuecomment-67894079)\nIf we try to add the escape character to zeitgeist87's suggestion (https://github.com/LeaVerou/prism/pull/424#issuecomment-68594600), we could indeed ensure the start and end pattern are not preceded by the escape character, but it would fail on cases like \"foo \\\\\".\nAnother idea, to ease the merging of the different parts, we could ask the dev to input \"regexp-strings\" instead of real regexps so that we don't have any flag problems. For example, the C-like string pattern would become something like {start: '(\"|\\')', contents: '(\\\\\\\\?.)*?', end: '\\\\1'}. But IMO, all these backslashes are quite ugly, and the whole thing isn't really easy to get.\nFinally, as the C-like string pattern shows it, there is the problem of the back references, which are particularly needed for patterns that allow any identifier to be used as a delimiter (e.g Heredoc strings in PHP:\nphp\n$str = <<<PRISM_IS_GREAT\nExample of string\nspanning multiple lines\nusing heredoc syntax.\nPRISM_IS_GREAT;\nThis needs back references, to be matched properly.)\n. I'm still trying to think about a better word for an hypothetical boolean flag but I'm quite stuck with my lack of english vocabulary. Maybe something like matchFirst would be more appropriate?\nAlso remember that not setting the boolean flag would just keep the current behaviour of Prism and devs will write new language definitions by looking at the existing ones so I guess they will quickly understand what the boolean is meant for...\n. Wouldn't greedy be confusing regarding its meaning when talking about regexps?\n. >  I am awful at nameing things...\nHaha! So I am.\nWell, if we stay with the flag solution, maybe @LeaVerou would have a better idea for the name.\n. Yes, I know you're being busy. I just drop it here so that you may come back here when you have time ! ;)\n. @vkbansal Yes, I know.\n. Most of the fixed issues have been closed by now, so I think I can close this one too.\n. I don't know Polymer at all, but this does not look like valid CSS.\n. Well, I heard about it, but never gave it a look.\nAs I understand it, your problem relates to the syntax Polymer uses to provide data-binding in templates. Thus it's normal that the CSS highlighter fails on it ^^\nPolymer would probably need a small component on its own.\n. Ideally we should be able to make only one component for all versions of Polymer. This PR certainly needs to be reworked anyway, considering its age. I'll have to dive into this at some point.. @mAAdhaTTah Yes, this PR needs to be rewritten from scratch and it will certainly use markup-templating.\nI never took the time to work on this PR again, because I know @LeaVerou was reticent to include it into Prism, although I don't remember exactly why. I don't know if she has changed her mind since then.. Oh, here it is: https://github.com/PrismJS/prism/pull/439#issuecomment-67732158. I guess this comment is no longer relevant in that case, since we've been using this exact pattern in templating languages for some time now. I'll try to update this PR anytime soon.. @vkbansal When @LeaVerou will have time to review it.\n. > I\u2019m a bit uncomfortable with the whole replacing content with __SMARTYXXX__ tokens and then adding content back etc\nYes, so am I. We'll need to think about the whole issue regarding templating languages.\n. I'll add them to my todo list and see what I can do ;)\n. Here is AppleScript #431 \n. And here is ActionScript #432 \nI looked at ColdFusion (both CFScript and CFML), but I don't think I'm going to add it. I don't know the language at all and the documentation is a real mess. Sorry about that.\n. All fixed. Keywords are all in one regexp ; 'number' and 'function' keys were moved to JS grammar and the XML highlighting is inside a conditional that checks for markup.\n. @vkbansal When @LeaVerou will have time to review the last version.\n. Edits done :)\n. Well, atoms in erlang must be enclosed within quotes if they contains special chars, or if they start with a uppercase letter.\nThese are valid atoms :\nerlang\nhello\nphone_number\n'Monday'\n'phone number'\nI had to separate both kinds so that quoted atoms are matched before keywords ('fun when case' should be a valid atom) and variables. And normal atoms must be matched after the keywords because they are more generic.\nI couldn't find an easy way to match both kinds of atoms in the same grammar token.\n. I don't know, but highlighting surely makes it easier to read : https://github.com/LoganKelly/LOLTracer/blob/master/LOLTracer.lol\n. KTHXBYE :)\n. Thank you so much!!! It's a great honor. :)\n. Language popularity is hard to determine.\nBut alphabetical order would push markup far in the list.\nMaybe a mix of both ? With some featured languages at the top (e.g. markup, css, js...) and all the others alphabetically ?\n. It could, but this would mean modifying the structure of the components file, wouldn't it ? (this will have impacts on other JS files used for the website)\n. How would you specify the beginning of the 2nd group in the components.js file ?\n. > Currently for .. in is used to traverse through the language keys, but the ECMAScript spec never promised the ordering of the iteration (although implementations tend to result in ordered keys), so it might not be a good idea (at least I don\u2019t think it is) to depend on it.\nI totally agree with this. But currently, everything in Prism relies on this behaviour... and I don't feel like changing it for now...\nI like the idea of adding a featured key though. Maybe just order the languages alphabetically and tag those we want in front with this special key. This should not impact that much files.\n. Or... https://code.google.com/p/v8/issues/detail?id=164 ? (which does not seem to be fixed, btw)\n. Looks promising ! ;)\n. So you'll be reviewing all the regexps ! ^^ Please open an issue if you spot something that looks strange or could be improved ! :)\n. The code looks fine to me. It seems to handle the edge cases really well.\nAllowing strings would require to escape all Regexp special characters, but it's not hard to do.\nI'd like to notice that this may change the behaviour arrays used to have, as the combined regexps will be evaluated \"at the same time\" and not \"one after the other\". But I can't find an example where it would be harmful. In fact it could even solve some \"competition\" problems.\n. @LeaVerou I think the case is handled. The conditions seem to make sure the modifiers are consistent with the previous merged strings or regexps. And in the else clause, the modifiers are reset.\n. For the first question : I'd say something like this\njavascript\n[\n/some-regex/i,\n/(?:some-regex2|\\bsome string\\b)/m,\n/some-regex3/im,\n/(?:some-regex4|\\bsome other string\\b)/m,\n/some-regex5/i,\n{ ... },\n/\\b(?:string|string2)\\b/\n]\nbut I'll wait for @zeitgeist87's confirmation.\nFor the second question : yes, they are optimized only on usage and only once per grammar.\n. They could, I guess. But it won't make the code shorter :)\n. That actually seems to be a great idea!\n. I really like this version. Much more understandable!\n. (Oops, I commented in the commit instead of the current diff, sorry)\n. LGFM now ;)\n. I also feel like both PR could be merged somehow, but we first need to find some rock-solid solutions for the problems...\n. It also looks like the competition behaviour is applied everytime a competition pattern is encountered. If I understand your code properly, the first time already matches all the patterns, so the others are not required.\n. > For every partial string, all the patterns that are in competition are applied once.\nThat's the point I don't agree with.\nThe _competition property contains all the competition patterns found in the grammar.\nOn line 316, when looping through the patterns, if the current pattern is a competition pattern, you \"replace\" it with all the competition patterns stored in the _competition property. So, after this iteration, all competition patterns are processed.\nThen when you'll encounter another competition pattern after the first one, you'll replace it again with the _competition property, although this pattern has already been processed with the other competition patterns.\nDo you get my point?\n. Of course I won't. ^^ And happy new year to you too :)\n. I'm mostly worried about one edge case, now.\nBecause the optimization process modifies the structure of the grammar, what would happen if an asynchronously loaded component tries to extend an already optimized grammar?\n. Did you see my edit about the elements in the same array? I think the order should not be a problem here.\nAbout the extension mechanism, maybe we could store the optimized grammar in a non-enumerable property of the original grammar (kept unchanged)?\nIn the tokenize function, we would work on the optimized grammar, but the extension mechanism would use the original grammar.\n. While doing a benchmark, I noticed that this PR does not highlight properly the following two cases:\njavascript\n\"/*bar baz*/\";\n\"//bar\";\nIf there is a space between the opening quote and the slash, the highlighting is fine.\nScreenshot: \n. It is fixed, indeed! Nice work\n. @zeitgeist87 I think @LeaVerou will not agree to add the \"enclosing\" boolean (at least for now). Would you mind refactor this PR to focus only on regexps combination? I think she might be ok to merge it, then.\nI'll keep thinking about enclosing patterns, so we can handle them properly in the future.\n. @LeaVerou I think @zeitgeist87 never had the time to refactor the PR to keep only the regexps combination. We might have to refactor it ourselves, but that means closing it and opening a new one.. I was worried about the whole appearance. Fonts sizes and stuff... but I'm not good at it.\nIf it looks ok enough for you, I'll merge it as is and add more examples later today.\n. The top part could be considered as a example itself. We could add a checkbox named \"basic usage\" or something, and handle it as a special case in the code. I find it a bit weird, though.\n. So let's keep it like this for now and think about it eventually... ?\n. My pleasure!\n. I'll consider this issue fixed for now. The few missing examples left could be provided someday by anyone willing to.\n. Thx, I'll check this tonight! :)\n. Fixed by #491\n. (You should not have included the autohotkey changes in this PR)\nThanks, I'm merging.\n. @uranusjr Is it intended that those two lines in unified diff are matched as \"coord\"?\n--- qcli.yml    2014-12-16 11:43:41.000000000 +0800\n+++ /Users/uranusjr/Desktop/qcli.yml    2014-12-31 11:28:08.000000000 +0800\nEDIT: The separator --- in normal diff is also matched as coord.\n. I'm telling because of #401 and #769. I just modified the git component to match those lines as \"inserted\" and \"deleted\".\nI'll try to think of a way to distinguish between those lines containing file names and the lines containing coords.\n. Merged manually in 125e91ff1db2d385150d5e63c4779933e851f70c.\n. Thanks!\n. It should be better now. See 72cde69424eed49e16f222891bad8840c06e6e7e for details.\nI added your example on the examples page.\nThanks for reporting. Tell me if everything looks good to you.\n. IMO, we should replace only one line break at the beginning, if any. (Exactly the behaviour of the <pre> tag when it does not contain a <code> element, in fact.)\n. I'm not sure I understand your problem, @haarg... Could you give an example?\n. > One of my use cases though is displaying source files. In this situation, I need the display to accurately represent what exists in the file, including leading newlines.\n@haarg Oh, I get it now... You're perfectly right. What do you think of @LeaVerou's proposal?\n. The removal of the initial line feed has been moved from core to a plugin: http://prismjs.com/plugins/remove-initial-line-feed/\n. Couldn't we just add a link to the github components/ directory in the plugin description page?\n. I started thinking about this. How will the plugin know about the dependencies of the languages?\n I hope we don't have to duplicate the languages list.\nHere is a first try (that fails on loading the dependencies). Go is highlighted because C-like is bundled into the prism.js file used by the website. The failure can be seen on Objective C.\n@LeaVerou Do you have any awesome idea?\n(Here is the code of the plugin)\n. @vkbansal I don't understand how this could solve the problem of knowing the dependencies of a language from inside the plugin.\n. @vkbansal Your proposal is for including this feature in Prism core. Here, @LeaVerou explicitely stated that it should preferably be provided as a plugin.\nBut this kind of syntax might be used to solve the problem, maybe. I'll try something tonight.\n. @uranusjr \n\nthe autoloader can catch that exception\n\nI think it can't, unless it overrides entirely the extend() function with something like:\njavascript\nvar _extend = Prism.languages.extend;\nPrism.languages.extend = function (id, redef) {\n    try {\n        _extend(id, redef);\n    } catch(e) {...}\n};\nI think I'm starting to understand @vkbansal's point. This feature would require Prism to be much more asynchronous than it currently is.\nConsider the case of the Go component: if C-like is asynchronously loaded somehow (because it is not found when extend is called), what happens to the last line in the Go component?\njavascript\ndelete Prism.languages.go['class-name'];\nAt the time the line would be called, the grammar would not exist yet.\n. This is harder than it looks. Everywhere in Prism, we use direct access to the languages (to create them, to extend them), we iterate through them (some plugins do this). All those operations would need to be rewritten in an asynchronous way.\nAny kind of access to a language should be done through a Promise or something. IMO, this will not be easy from inside a plugin.\n. @mAAdhaTTah Then it would no be a plugin, properly speaking. But it could work, I guess.\nSome issues will remain, though, for languages like Jade, which allows other languages to be embedded directly. (See the end of the file https://github.com/LeaVerou/prism/blob/gh-pages/components/prism-pug.js#L156)\nAn autoloader could not know what languages are to be loaded in advance.\n. This should be fixed by now, since the Autoloader plugin was merged.\n. The bug for JS strings was already mentioned in #66. PR #417 should solve it.\n. This must be because I did not allowed multi-line urls. I did not notice they were handle as a separated token. I'll check it tonight.\nBut this makes me worry about another point: do you know why the selector and property tokens are before the string token?\n. Multi-line urls are supported now : e4a13e5ccfd286331ff68fdfebb0debb3e92162d\nThere is still the problem of the position of the string pattern, though. It prevents Prism from properly highlighting something like:\ncss\nfoo {\n  content: 'foo:bar'\n}\nbecause foo: in the string is highlighted as a property...\nAre you aware of any requirement for selector and property to be listed before string?\n. I'll move the string pattern above the property one, then.\n. And that's a really good point!\n. I have several ideas for this, but each has its own issues.\nWe could ask the plugins to input a third parameter when they add hooks:\njavascript\nPrism.hooks.add('after-highlight', function (env) { /* ... */ }, 'line-numbers');\nso that we can do something like Prism.hooks.removePlugin('line-numbers'); to remove all hooks added by this plugin.\nUnfortunately, some plugins also modify the language definitions to add/change some tokens. So another mechanism may be needed.\nWe could ask the plugins to \"register\" themselves to Prism, by providing a load and an unload method. This may be combined with the first idea.\njavascript\nPrism.plugins.add('autolinker', function () {\n    // Code to init plugin here\n    for (var language in Prism.languages) {\n        /* ... */\n    }\n    Prism.hooks.add('wrap', function (env) { /* ... */ }, 'autolinker');\n}, function () {\n    // Code to unload plugin here\n    for (var language in Prism.languages) {\n        // Undo what was done in init\n    }\n    Prism.hooks.removePlugin('autolinker');\n});\nHence giving us the ability to provide something like Prism.disablePlugin('autolinker'); (and even Prism.enablePlugin('autolinker'); to enable it again).\nEDIT: I'm afraid there may sometimes be some difficulties to properly undo all the changes done in the init part, though.\nBut another issue will be related to the CSS files added by the plugins. I don't see a way to easily apply the styling only on one code block and not the other, especially if the styling applies to tokens that were not added by the plugin...\nEDIT: About the styling issue, we could in fact add a CSS class on the code block for each plugin that were enabled at the moment it was highlighted. Then, the CSS rules used in the plugin's stylesheet could be applied only to the blocks concerned.\n. @vkbansal Great to see it's apt. Unfortunately, if @LeaVerou considers this will be too much work for the plugins developers, we'll have to think differently for Prism JS.\nI guess it would be quite good already if we only added the third parameter on hooks.add() and the CSS classes to restrict the styling...\n. Yes, why not. I'm not sure I see the real difference with something like\njavascript\nPrism.hooks.add('after-highlight', function (env) { /* ... */ }, 'line-numbers');\nbut I don't mind.\n. Now handled in 36999ddf3e65b853b7e50a435a0cb27acb632fc5\n. Ok, sorry.\n. If I understand correctly, this is not something we should care about. The case of a script tag having a style attribute is obviously not common at all. Wether this attribute is highlighted as CSS by Prism or not is not a big deal.\n. Feel free to submit a PR if you know how to fix this. I won't be able to take a look before tomorrow night.\nDate: Sat, 10 Jan 2015 07:39:04 -0800\nFrom: notifications@github.com\nTo: prism@noreply.github.com\nSubject: [prism] Show invisible plugin does not handle windows line endings well (#464)\nIt's get weirder when combined with line-numbers plugin\n\u2014\nReply to this email directly or view it on GitHub.\n=\n. Could you please use tabs for indentation instead of spaces?\n. Apart from the \"ignore\" pattern, which I don't think will ever match (because of the \"operator\" pattern), it looks good to me.\n. Does it still work when used in a Worker?\n. You should be able to test it by adding the data-manual attribute on the script and then calling highlightAll(true) yourself. The async parameter should run Prism in a Worker.\n. @cookch10 It should be fixed now. Thanks for the report!\n. Does it still work when used in a Web Worker? (i.e. highlightAll(true))\nEDIT: And what about Node.js?\n. Sorry for the long time waiting. Thank you for contributing!. Thanks!\nApart from the note I added, this looks good to me.\n. @mAAdhaTTah Do you confirm this issue is fixed?\n. This has been fixed in 8030db914a1e7331d245db0b9b787b4364994440. Thanks for contributing.\n. (This fixes #391)\n. Please welcome our first multi-dependencies language! \\o/ d380942a12e2f35b023e43a18007d47cf9a57be2\n. Sure, feel free to submit a PR!\n. Just something like:\n\"This plugins adds special CSS classes for each keyword matched in the code. For example, the keyword if will have the class keyword-if. You can customize the appearance of each keyword by providing your own stylesheet.\"\n?\nI'm not particularly good at writing english. This is not my native language. ^^'\nAlso, I'm not sure I like the idea of including a stylesheet with the plugin. IMO, you should provide no stylesheet and simply include an inline <style> in the HTML file to highlight your example.\n. @aoighost I too thought NASM was somehow similar to Assembly. If it's not and we should add a component, feel free to reopen.\n. > At some point we should convert all keywords to arrays, so we can push and remove keywords when overriding languages instead of having to repeat the whole list for just a few changes\u2026 (but that should happen after we optimize arrays)\n444 is still pending.\n. @vkbansal About this grammar definition... why are the Array and Function constructors considered as keywords but not the other native constructors (Object, Date, RegExp...)? TypeScript doesn't recognize them?\n. Alright then ^^\n. \"kuba-kubula\" would get cut between two columns :(\n\n. Not even close...\n\n. Should we put the columns anyway and add break-inside: avoid; already for when it'll get implemented?\n. Fixed in a88936ace2794a7506009f0bef9ef67af975ba82.\n. This may not be easy, since data URIs can contain pretty much anything, right?\nAlso, this should probably be a plugin.\n. If it is as a language definition, then could it be used in combination with another language definition?\nIn the example you gave, with the data URI containing SVG inside CSS, how will it be possible to highlight both the CSS and the content of the data URI (as markup) if it's implemented as a language definition?\nWhat I meant about the contents of the data URI is that it may need to be highlighted as markup (like in your example, again) or as pretty much anything else depending on the mime type used.\n. > Now somebody needs to run gulp and generate the minified version\u2026\nDone.\n. Yes, this is a known issue.\nPHP supports shell-like comments starting with an hash, and Prism does not handle properly comment-like substrings. So this includes any string containing an hash...\nIt might be a good thing, though, to handle shell-like comments after the strings, because I think strings containing hashes are more common than shell-like comments containing two quotes of the same type.\n@milesj what do you think?\n. @milesj Yes, that's my point...\nI was suggesting we should run the \"classic\" comment pattern first (// and /* */), then the string pattern, and then the shell-like pattern.\n(Or maybe multi-line comments first, then strings and then single-line comments (both styles))\nSorry if it wasn't clear ^^\n. Please see 00955466fd0da55ddedb1d997574dbd051d2ee34 for details.\nWith that change, we get the following results:\n\nI hope this will handle better the most common use cases.\n@milesblackwood Can you update your version of Prism and confirm the issue is fixed?\n. Thanks for reporting!\n. Thanks for submitting this.\n(Note for later: this fixes #447 )\n. Concretely I think the number patterns should be:\njavascript\n    [\n        {\n            pattern: /\\b-?0x[\\da-fA-F]+(un|lf|LF)\\b/g\n        },\n(at least one hexadecimal char and mandatory suffix)\njavascript\n        {\n            pattern: /\\b-?0b[01]+(y|uy)\\b/g\n        },\n(at least one binary char and mandatory suffix)\njavascript\n        {\n            pattern: /\\b-?(\\d+\\.|\\d*\\.?\\d+)([fFmM]|[eE][+-]?\\d+)?\\b/g\n        },\n(a number followed by a dot alone or a decimal number, followed by optional suffix or optional exponential notation)\njavascript\n        {\n            pattern: /\\b-?\\d+(y|uy|s|us|l|u|ul|L|UL|I)?\\b/g\n        }\n    ]\n(an integer followed by optional suffix)\nDo you think this handles all the cases?\n. Great!\nThis looks good to me, @LeaVerou.\n. Hi, sorry for the delay.\nI just added a parameter in the worker message that forces it to close after highlighting. So when you use it directly from the outside, it should not close itself unless you pass the parameter.\njavascript\nvar worker = new Worker('prism.js');\nworker.onmessage = function(evt) {\n    console.log(JSON.parse(evt.data));\n};\nworker.postMessage(JSON.stringify({\n    language: 'markup',\n    code: '<span>'\n}));\n// Here, the worker is still open!\nworker.postMessage(JSON.stringify({\n    language: 'markup',\n    code: '<div>',\n    immediateClose: true\n}));\n// Now the worker is closed.\n. Thanks for reporting! This should be fixed now:\n\n. Aren't the lists on the Download page and the Examples page enough?\n. Each example starts with a line explaining which alias to use.\nAlthough I do agree that it would be convenient to have them mentionned directly in the list, each item would have a lot of content (especially on the Download page... Which already provides the file size and the name of the maintainer...) I can't think of a way to make it look good.\n. Do you have any opinion on the appearance it should have? (number of columns, or anything?)\n. Here we go, then: 85ec87e4431ad57c337b7f114bc4afc5e2a0e7fc\n\n. Shouldn't it be part of the line-highlight plugin? I mean, a plugin that enables to highlight any part of the code, may it be lines or fragments of line?\n. But we need to find a way to mark them that will not conflict with any language.\nThe example you gave before (**) is already in conflict with the Markdown syntax, and probably with the \"power\" operation in some languages, like python (2 ** 3 ** 4).\n. My point was that it may be hard to find a single pattern that would play nice with all languages. Unless the marking is based on some configuration specific to the block of code.\n. See #386 and #180 for discussions about it.\n. It seems to work now! :)\n. This is not related to empty value but to the style attribute.\nIt should be fixed now.\n. Thanks!\n. It didn't look like it had. The website was broken since the change. I had to change the url on the Download page too.\n. All these translations looks quite ugly to me, but I guess this is the only way to handle the localisation of the language. And I like the idea of Prism being able to handle it.\nI'm also not opposed to you taking the \"ownership\" of the language (<- is that proper English? :confused: ) since it appears you improved it a lot!\nIn any case, the final decision is up to @LeaVerou.\n. Reported to GitHub...\n. This could be useful, for sure.\n. I'd prefer if the variable was not declared globally. Using it as a property of the Prism object would be better IMO (Prism.fileHighlight(...)).\n. What I'm asking for is in fact just a little change:\nInstead of doing this:\n``` javascript\nvar fileHighlight = (function fileHighlight(){\n    if (!self.Prism || !self.document || !document.querySelector) {\n        return;\n    }\nvar Extensions = /* ...\n    Plugin's code...\n... */\n\nreturn fileHighlight;\n\n}());\n```\nI'm suggesting you do this:\n``` javascript\n(function () {\n    if (!self.Prism || !self.document || !document.querySelector) {\n        return;\n    }\n// Declare it as a property of the Prism object\nself.Prism.fileHighlight = function() {\n\n    var Extensions = /* ...\n        Plugin's code...\n    ... */\n\n};\n\n// Call it immediately\nself.Prism.fileHighlight();\n\n}());\n```\n. It's all explained in issue #390. The purpose is to be able to call fileHighlight dynamically...\n. This looks good to me now ;) Thanks for refactoring it.\nNow it's up to @LeaVerou to decide whether to merge it or not.\n. Their documentation is... huge! I'm not sure I want to dive into this. Also, I couldn't find any standard grammar defining the language...\nIf I read correctly the beginning of the reference, there is no concept of reserved words, which makes the matching of the keywords difficult. And I guess highlighting only the numbers and the strings would be quite pointless.\n. Fine, here it is.\n. @huyingjie Now it has been merged, you should see it on the download page. Please feel free to report issues as you're using it! ;)\n. Prism is already compatible with Node, isn't it?\n. Can't you be more specific? What does not work in node?\n. Asynchronous loading of the components (with dependencies) is a feature request that is not limited to node.\nIMO, no prism-node should be required if we find a proper way to enable this feature.\n. @vkbansal: Note that #754 fixed this issue.\n. I don't know seajs. But if the loading of Prism is asynchronous somehow, you'll probably have to call prism.highlightAll() to run it.\n. @LeaVerou It should be more DRY now. Does it look good to you?\n. Well, I do not mutate it in any way but a plugin could. The last time I forgot to clone duplicated parts of the grammar, bad things happened (remember #469), so I thought prevention was better than cure.\n. I guess I like the idea of you reviewing the grammars I write before they're included in Prism. I'll try to work on this lack of self-confidence ^^\n. It looks good to me. Now it's up to @LeaVerou to decide.\n. I think your suggestion would not work for expressions like z=$(($z+3)) (http://tldp.org/LDP/abs/html/arithexp.html).\nMaybe we just need to consider the dot . as a word-character and do something like:\njavascript\nnumber: {\n    pattern: /([^\\w\\.])-?(0x[\\dA-Fa-f]+|\\d*\\.?\\d+([Ee]-?\\d+)?)\\b/,\n    lookbehind: true\n}\nWhat do you think?\n(Regarding test suite, it's a known problem. For now, the closest thing we have is the Examples page... So I'll add an example for this specific issue once we agree on the way to fix it.)\n. I'll commit this directly. For now, I'll consider this only applies to bash, because I don't think the case can happen in all c-like languages.\n. Well... both are already supported... aren't they? See the Examples page:\n\n. Could you be more specific? The screenshot I posted was taken with the default theme... Do you have an online example of your problem?\n. Oh... The site uses .language-git to highlight git usage on the command line. But the git component in Prism is for highlighting the messages provided by git, not the git command itself.\nI think there is currently no component in Prism dedicated to the highlighting of simple commands like this.\n. Does it get overwritten if you use language-none instead of language-git?\n. > I can't imagine trying to shoehorn highlighting for all the different shell commands into the Bash language.\nHowever, this might not be a bad idea to highlight some of them. We could start with the ones listed here, for example, and add some other well-known commands like git, service, htop, etc.\n. @AndyF I added a bunch of commands to highlight in Bash (551cebc4fea692a441f75410679f0b03ec91c582). So now, using .git-bash on your example should render as:\n\n. Wow, this looks really great! Congrats!\n. I'm closing this issue, since it is not really one.\n. Is this the same as #346?\n. Closed as duplicate, then.\n. I'll try to check this tomorrow.\n. @LeaVerou Yes, I know this looks overcomplicated. But those kinds of markup languages (markdown, rest, textile, etc.) are quite hard to highlight, since they are merged with raw text...\nFeel free to suggest some simplifications if you have the time to review this deeply. ;)\n. The <code> element must not be indented inside the <pre> element.\ni.e. You should do this:\nhtml\n<pre class=\"language-...\"><code>your\ncode\nhere</code></pre>\ninstead of this:\nhtml\n<pre class=\"language-...\">\n    <code>your\ncode\nhere</code>\n</pre>\n. @vkbansal I'm not sure preCode handles the spaces between the opening <pre> and the opening <code> by default, though.\n. Since this issue is not a problem with Prism, but the normal behaviour of <pre> tags, I'm closing it.\n. @esr360 Hi! We built the Normalize Whitespace plugin to fix this common issue, indeed.. @vlrprbttst : @vkbansal is right. <pre> tags may contain HTML that is to be interpreted. So < needs to be escaped as &lt; inside <pre> tags if you want the content to be displayed without being interpreted.\n. I think a plugin could probably be made for this.\nThe way I see it, it could use the same principle used by the PHP component, that is: replace all the desired tags by placeholders during highlighting and reinject them once it's done. But I'm pretty sure this would break somewhere (just like the PHP component does).\n. I just did a quick-n-dirty gist to illustrate the idea: https://gist.github.com/Golmote/c532812e88c6234c48b3\n. Hi,\nCould you give a link to some gist or anything so that I can test your actual code?\n. I played around with the idea for a while, and I perfectly understand all the problems you faced! The fact than spaces are discarded when copy-pasted from inside a block element is a real pain in the neck!\nI also reproduced the problem with the position of the .line-numbers-rows span, but this appears to be some glitch to me, since if the browser rerenders the element for some reason, it goes in the right place.\nSo well... I found out that forcing the rerender of the code block at the end of the code actually fixes the problem (at least in Firefox, I didn't test anywhere else):\n``` javascript\n  env.element.appendChild(lineNumbersWrapper);\n// Force browser to rerender the element\n  env.element.style.display = 'none';\n  env.element.offsetHeight;\n  env.element.style.display = '';\n});\n```\nBut yes, I know, this is an ugly hack.\n. If I remember correctly, getting the size is actually what \"invalidates\" the current rendering and forces the browser to render it again. ;)\n. I consider this problem solved, so I'm closing the issue.\n. LGTM. Merged.\n. Actually, this might be a problem in C-like.\nDo all C-like languages allow empty single-line comments? If so, it should definitely use .* instead of .+ in the regex...\nhttps://github.com/PrismJS/prism/blob/gh-pages/components/prism-clike.js#L8\n. I guess we can assume all of them do, then. I'll make the change right now. We'll make exceptions for those that don't allow empty single-line comments, if any. It seems more natural to me this way.\n. We might want to ask ourselves whether removing an unneeded space in an attribute is worth losing the compatibility with IE9, though.\n. You should have put this commit in the other PR! ^^\n. Oh, ok I understand ^^ Thanks, anyway!\n. I can't reproduce the problem you're describing. The scrollbars are visible whenever needed:\n\n\n. The \"line-numbers\" class is not supported on the <code> tag, indeed.\nhttps://github.com/PrismJS/prism/blob/gh-pages/plugins/line-numbers/prism-line-numbers.js#L2\n. Well, as markdown supports raw HTML, I guess you could write directly the needed tags instead of the convenient shortcut ```.\nOtherwise, you could also modify the code of the plugin to move the class from the <code> tag to the <pre> tag, though I'm not sure this is something we want to do on the official release.\nFor example, you could change the beginning of the plugin to this:\n``` javascript\nPrism.hooks.add('after-highlight', function (env) {\n    // works only for  wrapped inside  (not inline)\n    var pre = env.element.parentNode;\nif (\n    !pre || !/pre/i.test(pre.nodeName) ||\n    // Abort only if nor the <pre> nor the <code> have the class\n    (pre.className.indexOf('line-numbers') === -1 && env.element.className.indexOf('line-numbers') === -1)\n) {\n    return;\n}\n\nif (env.element.className.indexOf('line-numbers') > -1) {\n    // Remove the class \"line-numbers\" from the <code>\n    env.element.className = env.element.className.replace(/\\s*\\bline-numbers\\b\\s*/, '');\n}\nif (pre.className.indexOf('line-numbers') === -1) {\n    // Add the class \"line-numbers\" to the <pre>\n    pre.className += ' line-numbers';\n}\n\nvar linesNum = (1 + env.code.split('\\n').length);\n// ...\n\n```\n. Ok, I'll look into it tonight.\n. @LeaVerou Done. Tested with the following snippets:\n``` html\n(function(foo) {\ndo_something(foo, 'bar');\n}(bar + 3));\n(function(foo) {\ndo_something(foo, 'bar');\n}(bar + 3));\n(function(foo) {\ndo_something(foo, 'bar');\n}(bar + 3));\n(function(foo) {\ndo_something(foo, 'bar');\n}(bar + 3));\n``\n. @dylanmackenzie  Can you confirm the problem is fixed, now #571 has been merged?\n. This could solve several issues, indeed. This could even not be limited to this plugin. But this would be a breaking change regarding the global markup of the` elements.\n. Poke @nauzilus, this is related to the change you made in #563. What do you think?\n. > But that's better than completely breaking another plugin.\nIndeed.\n. This is the way <pre> elements work. It has nothing to do with Prism itself.\n. @iLightGit: The point @vkbansal is trying to make is that even without Prism, if you use the following code:\nhtml\n<pre><code><p>hi234234 sdfs!</p></code></pre>\nthe browser will not make the <p> tag appear litterally, it will be interpreted as standard HTML.\nPrism removes standard HTML from the tags before highlighting. But it could be able to keep it in some cases (see #558 if you're interested in this). So... to be able to keep it sometimes, you have to escape your own code you want to display, so that it is not to be confused with standard HTML.\n. You should escape the actual code before even storing it IMO. . Thanks for reporting!\n. Thanks for contributing! Would you mind taking a look at my comments?\nAlso, you need to rename the JS file from prism-docker.js to prism-dockerfile.js, since the component is dockerfile.\n. @JustinBeckwith Sorry for the delay. Your updates look good to me. You did not add the LABEL keyword though, is it intended?\n@LeaVerou, if it looks good to you too, feel free to merge this. I'll run the gulp task to generate the minified file if you don't have the time to do so.\n. Sadly this is more or less a known issue. Markup is handled first during highlighting and it may break it when it appears inside PHP code (instead of the opposite: PHP embedded inside HTML)...\nAs far as I know, nobody has found a solution so far.\n. I can't reproduce this issue anymore on the Test drive page.. I'm not sure about the dist directory containing only themes (i.e. not a usable distribution of Prism). Couldn't it have a name that reflects better its content?\n. Our configuration for travis-ci now publishes automatically to npm on every new release.. This was fixed by #583.\n. Thanks for reporting. This should be fixed now (d795397ef0880bfb79efa2481b7155981be8ef4e).\n. I don't have time to test it right now, but I quickly reviewed the code. Please take a look at my comments ;)\n. I finally got some time to play around with your PR.\nI think you could fix the second failure (\"Double quoted strings inside of string interpolation\") by changing the string pattern to /(\"|')(#\\{[^}]+\\}|\\\\\\n|\\\\?.)*?\\1/. What do you think?\n. Oh, I did not notice the last commit. So yes, it looks good to me now.\n. This looks quite good to me, though I did not take the time to properly download it to test it.\nDid you make sure it was still compatible with other plugins, different themes, etc.?\n. I can say that the indentation is a bit messed up right now. Please use tabs (and this applies to CSS too).\nAlso, please don't include the .gitignore file in this PR. (I just added .DS_Store to the list myself (1707e4e3a54a506e915c3b6ba7ca165fff9a2c1c))\nNow about the plugin code itself:\n- The way you add the resize listener makes it impossible (or at least hard) to apply the plugin dynamically on code blocks, which should normally be doable by calling highlightElement() (which will execute the hook). I guess you could maintain a list of code blocks that require the resize check to allow this. (I'm not sure I'm making my point here, so feel free to tell me if you don't get what I mean)\n- The above point would also solve the issue of getting the computed style in each call of _resizeElement() since it would be called only for code blocks that have the soft-wrap.\n- The _resizeElement() function should probably be kept as small as possible since it's called on the resize event. For example, you could create lineNumberSizer element in the hook.\n. Sorry for the long time waiting. It appears to work just fine. Thank you very much for this contribution!. @VitaliyR Better late than never!. @siavashs Indeed I should have expected that. Those are two different plugins... I'll open a new issue so that it can be handled at some point.. Fixed and added in the examples:\n\n. I'll definitely try to take a look at this soon! Hopefully this weekend\n. I finally found some time to pull your branch to test it, although a week later than I thought. Sorry about that.\nI'm currently having some troubles making it work... (weird error... I'm trying to update node.js right now)\nI reviewed your code in the meantime, though, and I must say that I like the way you implemented it. The code is clean and straightforward. Well done!\nI also realised it was meant to run only one test per file. Wouldn't it be useful to write several tests in a single file. Like for example, a test file that tests for strings highlighting might need to check single and double quotes. Using two files for this feels strange to me. I would have think of one file per pattern or something like that. What do you think?\nAlso, I'd like the test files to be suffixed with some extension (like .test?) (and we could remove that extension when displaying the filename in the test results) so that my IDE stops complaining about syntax errors:\n\n. Wow, it took me so much time to understand the testing is supposed to be done with the command npm test. ><\nRegarding what I said earlier about the \"only one test per file is not enough\" stuff, I realised that multiple tests could actually be run simply by merging them into one...\n```\n\"test\"\n'test'\n\"te\\\"st\"\n'te\\'st'\n\n[\n    [\"string\", \"\\\"test\\\"\"],\n    [\"string\", \"'test'\"],\n    [\"string\", \"\\\"te\\\\\"st\\\"\"],\n    [\"string\", \"'te\\'st'\"]\n]\n```\nso I guess this is not really an issue.\n. I like the idea of the comment part. The test case file layout looks fine to me. It is both easy to create and easy to read.\nI kinda like the Phpt tests naming convention:\n\nPhpt tests follow a very strict naming convention. This is done to easily identify what each phpt test is for. Tests should be named according to the following list:\nTests for bugs\n\u00a0\u00a0\u00a0\u00a0bug<bugid>.phpt (bug17123.phpt)\nTests for a function's basic behaviour\n\u00a0\u00a0\u00a0\u00a0<functionname>_basic.phpt (dba_open_basic.phpt)\nTests for a function's error behaviour\n\u00a0\u00a0\u00a0\u00a0<functionname>_error.phpt (dba_open_error.phpt)\nTests for variations in a function's behaviour\n\u00a0\u00a0\u00a0\u00a0<functionname>_variation.phpt (dba_open_variation.phpt)\nGeneral tests for extensions\n\u00a0\u00a0\u00a0\u00a0<extname><no>.phpt (dba_003.phpt)\n\nIt could be simplified for Prism like this, for example:\n- Tests for issues: issue<issueid> (issue590)\n- Tests for features: <featurename>_feature (string_feature, string_interpolation_feature)\n- Tests for specific usages: <usagename>_usage (css_in_markup_usage) (I can't think of anything but language inclusion that could fit in this last category... so maybe the name is not well chosen...)\nBTW, is it possible to test language inclusion inside another? It requires both components to be loaded, even if they aren't dependent one from the other... Maybe the test case file could indicate another component is required?\nAlso, do we need to write tests for known failures too? Those would be tests that we expect to fail, so that we will know if some change fixes them? (This sounds a bit weird...)\n. Thanks for all those updates! This looks good to me. @LeaVerou, did you have time to take a look at this PR? What do you think of it?\n. Great! :) Then, @apfelbox, tell us when the PR is ready for merging.\n. @apfelbox: I ran into an issue related to language inclusion with the \"lang1+lang2\" feature. \nThere are cases in our grammars where the secondary language needs to be loaded before the primary language (see XML inside ActionScript, filters in HAML, filters in Jade...)\nActually, it seems that CSS and JS are the only exceptions here: they modify another grammar to add themselves into it.\nIMO, this is not the right way to do it. Currently, the CSS component adds itself inside Markup if it is available. I think it should be the opposite: Markup should add CSS inclusion if available, because it's much easier to know which languages can be embedded inside another, than to know which are the other languages a language can be embedded into. (I hope the previous sentence makes some sense...) What's your opinion on this, @LeaVerou?\n. If we want to keep both ways of doing this, then we need a way to specify the main language to use in the test, that is not related to the order of the languages in the folder name.\nMaybe something like markup+!actionscript? (Markup should be loaded before ActionScript, but the latter is actually the main language to be used for highlighting)\n. @apfelbox \n\n5 . All non-matched parts (strings in the compiled token stream) are simply ignored.\n\nThis might be an issue for patterns using the inside feature.\nConsider the following test, that checks for strings in the apacheconf component.\n\"foo bar\"\n'foo bar'\n\"%{REMOTE_HOST}\"\nBecause the string pattern has an inside key to match variables, the simplified token streams produced by this test are:\n[\n    [\"string\", []],\n    [\"string\", []],\n    [\"string\", [\n        [\"variable\", \"%{REMOTE_HOST}\"]\n    ]]\n]\nThe first two are quite useless, don't you think?\n. > No, the simplified token stream would look like this:\n\n[\n    [\"string\", [\"\\\"foo bar\\\"\"]]\n    [\"string\", [\"'foo bar'\"]]\n    ...\n]\n\nAre you sure about this? Because I don't reproduce this behaviour with your current code...\nWith the following pattern in the grammar (here apacheconf):\njavascript\n'string': {\n    pattern: /(\"|').*\\1/,\n    inside: {\n        'variable': /(\\$|%)\\{?(\\w\\.?(\\+|\\-|:)?)+\\}?/\n    }\n},\nand the following test:\n```\n\"foobar\"\n\n[\n    [\"string\", [\"foobar\"]]\n]\n\n```\nHere is the result I get:\n```\n  1) Testing language 'apacheconf' - should pass test case 'test':\n  AssertionError: expected [ [ 'string', [ 'foobar' ] ] ] to deeply equal [ [ 'string', [] ] ]\n  + expected - actual\n\n   [\n     [\n       \"string\"\n  -    [\n  -      \"foobar\"\n  -    ]\n  +    []\n     ]\n   ]\n\n```\n. > > Actually, it seems that CSS and JS are the only exceptions here: they modify another grammar to add themselves into it.\n\nI think we should change that. We should unify the way languages extend each other.\n(This would be a BC break, hover, as you need to reorder these language definitions.)\n\n@LeaVerou Would you be okay with this? (moving CSS inclusion and JS inclusion into the Markup component)\n. Ok, thank you for the updates!\nI'm still a bit confused with the behaviour regarding those strings that are filtered.\nCompare those two test, that both pass with the current implementation:\n1. CSS only\n```\n   foo {\n     bar: baz;\n   }\n\n[\n     [\"selector\", \"foo\"],\n     [\"punctuation\", \"{\"],\n     [\"property\", \"bar\"],\n     [\"punctuation\", \":\"],\n     [\"punctuation\", \";\"],\n     [\"punctuation\", \"}\"]\n   ]\n\nSimple CSS test.\n   ```\n2. CSS embedded into Markup\n```\n   \n   foo {\n     bar: baz;\n   }\n   \n\n[\n     [\"style\", [\n         [\"tag\", [\n             [\"tag\", [\n                 [\"punctuation\", \"<\"],\n                 \"style\"\n             ]],\n             \" \",\n             [\"attr-name\", [\n                 \"type\"\n             ]],\n             [\"attr-value\", [\n                 [\"punctuation\", \"=\"],\n                 [\"punctuation\", \"\\\"\"],\n                 \"text/css\",\n                 [\"punctuation\", \"\\\"\"]\n             ]],\n             [\"punctuation\", \">\"]\n         ]],\n         \"\\r\\n\",\n     [\"selector\", \"foo\"],\n     \" \",\n     [\"punctuation\", \"{\"],\n     \"\\r\\n\\t\",\n     [\"property\", \"bar\"],\n     [\"punctuation\", \":\"],\n     \" baz\",\n     [\"punctuation\", \";\"],\n     \"\\r\\n\",\n     [\"punctuation\", \"}\"],\n\n     \"\\r\\n\",\n     [\"tag\", [\n         [\"tag\", [\n             [\"punctuation\", \"</\"],\n             \"style\"\n         ]],\n         [\"punctuation\", \">\"]\n     ]]\n ]]\n\n]\n\nSimple CSS embedded into Markup test.\n   ```\nNotice how the strings (inside the CSS part) are handled differently depending on whether they appear at the first level or in an inside clause.\nShould we filter the strings at all?\n. Sounds good to me. Just make sure to do this at each level of recursion.\n. I think you forgot the filter the blank strings (that just contain whitespaces) you were talking about. \n[EDIT: Oh, sorry, you actually did filter them. I got confused again with those colors and the meaning of actual and expected in the diff...]\nAlso, since we don't hear from @LeaVerou regarding the BC breaking change for language inclusions, would you mind allowing both behaviours for now? i.e. we need to assume the main language is the last one listed, because this is the most common case, and we need a way to override this behaviour for the CSS and JS components (I suggested tagging the main language with some character like \"!\" but any solution would do).\n. Also, I think your example testcase1.test does not pass right now, since the variable name \" a \" is missing in the JSON.\n. Oh, and one last thing, since you commited about quote style consistency, I noticed you are not consistent in the position of the curly braces (sometimes at the end of the line, sometimes on their own line)? ^^ Prism mostly uses braces at the end of the line.\n. It might be useful indeed, but maybe we can wait for an actual use case. ^^\nI'll merge the PR during next week, as I'm still away from home right now. I already wrote a bunch of tests for a few components, so I will also submit PRs for them.\n. Here we go! :)\n. I think I managed to optimize the regexp somehow (see 75452ba11b3b1c6074b99f54b7a7a592e2adb0f1). Can you confirm this issue is fixed now?\n. Thanks for reporting and sorry for the delay. This should be fixed now.\n. @VitaliyR I chose to fix it separately. You'll probably need to update your PR to allow automatic merge to work.\n. I don't have much time to properly test this, for the moment.\n. Or you can use the Download page on the website to build a file that includes all the languages you need.\n. Thanks to the fix provided by @valorkin in PR #754, you can now use the components directly with node.js.\n``` javascript\nvar Prism = require('./components/prism-core.js');\nrequire('./components/prism-markup.js');\nrequire('./components/prism-markdown.js');\nconsole.log(Prism.highlight('foo', Prism.languages.markdown, 'markdown'));\n// Outputs:\n// foo\n```\nNote that you have to handle the dependencies by yourself, though.\n. See #972 on how to load components in Node using the loadLanguages() utility function.. Thanks for contributing!\nPlease take a look at my comments ;)\n. Alright, this makes sense. Since vhdl-vectors are processed before strings, he wanted to prevent those single-quoted numbers from breaking the highlighting of strings.\n. I added a couple of comments. Apart from them, this looks good to me.\n. If needed, I can merge, build the minified version and add the example given in the first message of this PR, when I get back from work.\n. This looks great, thanks. As it looks good to @LeaVerou too, I'll merge now.\n. Thanks for contributing!\n. I just merged #596. Let me know when this PR is updated.\n. Sorry, can you do it again?\n. Thanks for reporting.\nCould you provide an online page reproducing the problem?\n. Oh, sorry I didn't see the other issue on the other repo.\nIt looks like your line feeds are replaced with <br /> tags, which are stripped during highlighing (like any other HTML tags in the code block).\n. I think you might fix your issue with a little hook like the following (to be inserted after Prism main script):\njavascript\nPrism.hooks.add('before-highlight', function(env) {\n    env.element.innerHTML = env.element.innerHTML.replace(/<br\\s*\\/?>/g,'\\n');\n    env.code = env.element.textContent.replace(/^(?:\\r?\\n|\\r)/,'');\n});\n@LeaVerou Should we handle this in the official release?\n. The version of Prism you're using seems quite outdated. Have you tried to redownload it from http://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript&plugins=line-numbers+autolinker ?\n. Be sure to empty your browser cache. I can no longer reproduce the issue on the two links you posted previously:\nhttp://demo.comboot.io/viewtopic.php?style=2&f=2&t=34\nhttp://demo.comboot.io/viewtopic.php?style=2&f=2&t=7&p=66#p66\n. Thanks for contributing!\n. I wasn't aware that the send method could throw exceptions. In which case does it happen? Could you provide on online example of this issue before and after the fix?\n. Thanks for reporting!\nAfter some optimizations in C-like strings and JS regexps, I am now able to highlight this code on Prism website's test page.\nNote that the regexps on the line that starts with b = RegExp((/\\bO:\\)\\B... will not get highlighted properly, because we don't handle the case of two regexps being separated by the + operator (which is a bit weird, if you care about my opinion)...\n. Thanks\n. The JS component should also work quite well.\n. This issue was fixed by #370. I'm closing it.\n. Hi, sorry for the delay. Can you please submit this PR in the prism-themes repo?\nAlso, I think you did something wrong when you committed, because 44 changed files is a lot for a single theme ^^ Make sure to fix this.\n. Yes, I totally agree with you. I'll see if I can make the change.\n. Thank you for reporting!\n. I don't feel like it should make its way into the core, but I definitely like the idea of a plugin. I'll think about it.\n. Oh, that's true. I always forget about it. If this script solves the issue well, I guess there is no need for a plugin.\n. We could talk about it in the FAQ, indeed.\n. We now have the Normalize Whitespace plugin to deal with this kind of issue. ;)\n. Thanks for contributing. Please take a look at my comments.\n. Thanks, this looks good to me now.\n@LeaVerou what do you think?\n. I'll do soon. I'm currently reviewing all pending PRs including mines. I'll need to write tests for it, before I merge it, though. Hopefully I'll find some time this weekend. I'll prioritize this one. \n. @estevaoam Here you go! ;)\n. @loganfranken Sorry for the spam if you get notified each time ^^\nThere is still a bunch of languages that I'd like to see included in Prism, and I have a bit of spare time these days. :)\n. You're right. In fact, it seems they aren't even reserved words according to the documentation!\nEDIT: They are listed in another version of the doc ^^\n. I don't have an Ubuntu to test it so I don't really have an opinion on this. I'll leave it to you.\n. Dammit you're right. I'll try to fix this.\n. So I reverted the commit on the master branch. @LeaVerou, have we decided anything about this master branch? Should we sync it with gh-pages on a regular basis?\n. @LeaVerou I have synced it right now. But please tell me how you want to handle this.\n. I'd say that the directives aliased as functions have some meaning.\nBut I must admit the type token aliased as variable is purely for visual purpose... I kinda thought that's what aliases were for.\n. The builtin alias could be the easy alternative (as it does not mean much by itself...), but this is just bypassing the problem, isn't it?\n. @mAAdhaTTah: Yes, I still find some time to sleep. ^^\n@javatlacati: If you know more about Prolog than I do, please feel free to take a look at this PR and suggest improvements. ;)\n. I guess we would need to match to whole query and then add inside rules to be able to highlight properly the conditions. I may check this out later. For now, I'll merge this, thanks!\n. Wow... I see 89 commits and 84 changed files: I'm pretty sure something went wrong with this PR.  Can you clean it up, so that we can see what this is about?\n. Apart from the keywords being provided as arrays, there is still the huge work of creating an actual editor with real-time highlighting.\n. You're right. And Dabblet uses Prism for the highlighting, so I have no doubt this is doable. But should it really be included in Prism itself? I feel like it should be another project. Prism focuses on highlighting only, and that other project could use it to provide highlighting in an editor.\n. We agreed that it would be done as a different project, so I'm closing the issue.\n. Thanks for contributing! Please take a look at my comments.\n. This looks good to me. @LeaVerou, can you take a look, too?\n. Sorry for the delay, I'm merging this.\n. I'm not sure about this. The pens you provide (why are they hosted on two different websites, BTW? oO) aren't really helpful...\nI guess we could host a grammar template in the repo, but I don't really see the point, since there are lots of components already available to get inspired!\n. Your first example mostly fails because the included files ([1], [2]) do not exist...\nYour third example works fine too, once you fix the wrong stylesheet URL.\nFor your second example... well, we can't do much about the JSFiddle issue. And regarding the fact that <pre> tags interpret HTML, as I already explained in #639, this is its normal behaviour, and Prism does not change anything to it. To display an HTML tag inside a <pre>, you must escape the \"less-than\" character as &lt;.\n. I get your point. I'll let @LeaVerou decide whether she wants to merge this.\nThanks for contributing, anyway.\n. I'm not certain explaining the regexp this precisely is useful.\nComments may be useful to explain a behaviour that would not be obvious otherwise but just describing the whole meaning of the regexp is not needed.\n. Don't misunderstand me. I'm not telling regexps are obvious to everyone. I'm telling that people wishing to add a grammar in Prism need to know how to write regexps (EDIT: although we are (more or less actively) thinking about easier ways to build grammars in Prism).\n\n\u00ab Comments should provide additional information that is not readily obtainable from the code itself. They should never parrot the code. \u00bb\n\nIMO, this:\njavascript\n// a word consisting of 0b the 0 or 1 number one or more times\n/\\b0b[01]+\\b/\nis really the same as this:\njavascript\n// assign the number 5 to the variable foo\nvar foo = 5;\n. I took some time to think again about this. Your comments are definitely overkill.\nI'm closing this PR. Feel free to update it if you wish to merge only the changes you made to the regexp.\n. No, there is no way to provide multiple languages on a single code block.\nBut some languages already allow to embed other languages inside themselves, with the inside feature. So the inclusions you mention could probably be added in the grammars. Take a look at the CSS, JS, HAML, Jade or ActionScript components for examples.\nRegarding the <pre> tag that interpretes HTML code, yes, this is its normal behaviour.\nTo highlight the code you provided with Prism, you need to write it like this:\nhtml\n<pre class=\"line-numbers\">\n<code class=\"language-java language-markup\">\nb2 = new JButton(\"middle button\", middleButtonIcon);\nb2.setFont(font);\nb2.setForeground(new Color(0xffffdd));\nb3 = new JButton(\"&lt;html>&lt;center>&lt;b>&lt;u>E&lt;/u>nable&lt;/b>&lt;br>\"\n             + \"&lt;font color=#ffffdd>middle button&lt;/font>\",\n             rightButtonIcon);\n  b1 = new JButton(\"&lt;html>&lt;center>&lt;b>&lt;u>D&lt;/u>isable&lt;/b>&lt;br>\"\n             + \"&lt;font color=#ffffdd>middle button&lt;/font>\",\n             leftButtonIcon);\n    Font font = b1.getFont().deriveFont(Font.PLAIN);\n    b1.setFont(font);        \n    b3.setFont(font);\n    }\n    </code>\n</pre>\n. I don't see any reason to keep this issue open. We won't add support for multiple languages on a single block. Language inclusion should be handled inside the components themselves.\n. Thanks for contributing! Please take a look at my comments.\n. Thanks. This looks quite good to me now! @LeaVerou what do you think?\n. Sorry for the delay, I'm merging this now.\n. Hm? http://bower.io/search/?q=prism\n\n. That is weird, indeed.\nI suggest you submit an issue on Bower.\n. True.\n. Oh thanks! I was looking for this issue and couldn't find it.\n@XVincentX Yes, we can do something about that, but it's not a small change. See https://github.com/PrismJS/prism/issues/456#issuecomment-74967426.\nI'd love to see Prism going asynchronous but this will require quite some work!\n. You say your entire app can switch themes. Doesn't this mean that all code blocks should switch theme at the same time?\nTo answer you question, no, the functionality of setting a theme on a specific code block does not exist. But as you already guessed, you can easily modify the themes to look for a specific attribute on the instance.\n. This is also what is done on Prism website\n. language-go should work perfectly fine.\nDid you make sure the Go component was included?\n. Maybe provide an online example.\n. May you provide an online example of the problem, so that I can look into it?\n. On the page with go examples, the component for Go is not loaded. Only are those ones: \"markup\", \"css\", \"clike\", \"javascript\".\n. Currently no, this is not possible.\n. Hi both of you.\nI followed your advice, @loganfranken, and closed the other issue.\n@markg85 I agree that the complete hook makes more sense than my other proposal. PRs are welcome to solve this issue, since I won't have much time during the next weeks to look into this. But I'll give it a try after my holidays if nobody did it in the meantime.\n. This is fixed, as you can see in the last example on the plugin page.\n. That's fine, I already patched it: ed9d7e354c20a95755af7641e3a2a0c77a713791\nThank you, anyway :)\n. Thanks !\n. Sorry for the time it took for this PR to be merged. Thank you for contributing!. This looks interesting. I'll try to review it properly soon.\n. I finally took time to review this, and it looks good to me. This plugin is a really nice idea, thanks for submitting it!\n@LeaVerou What do you think?\n. See here and also there\n. Well, if you follow the links in the second link I gave you, you'll find a small quick'n'dirty plugin for Prism that does what you want. I may eventually take the time to write it officially, but for now it's just a gist. https://gist.github.com/Golmote/c532812e88c6234c48b3\n. There might be other ways to do it. See the source code of the Basic Usage section on Prism website for example.\nBut I thought a plugin would make it easier for everyone. I'll definitely ask for an update in the FAQ when I release it.\nSo, did you manage to make your code work with the plugin?\n. Thanks!\n. May you submit a proper PR for this?\n. I'll take a closer look at this next week, to see what can be done.\n. Thanks for contributing! :)\n. Oh, it looks like this was merged in master branch again... I'll sync branches on sunday.\n. I made a few changes to your PR (see fd549959cd57d1c5de8be2f6d7600fe9bd050857) to take @uranusjr's comment into account.\n. Thanks for contributing! Please take a look at my comments.\n. I spotted two other little things.\nAlso, could you add an example file to this PR, following the format used by the existing ones.\n. Thanks, it looks quite good to me now.\n@LeaVerou: what do you think?\n. Hi @Hyuchia. I'm really sorry for the long delay. Ren'py is finally merged! Thank you very much for contributing.\nActually, it would be awesome if you could write the tests for Ren'py, since I don't know anything about it. See the tests for the other languages and the Test suite page for more information about it.\nAlso, please make your PR against the gh-pages branch instead of the master branch.. @suture I took a minute to chat with a guy from Shopify on their Support website:\n\nWould you mind give us the link to your online shop so the dev team can look into it?\n. Great, thanks !\n. @mvalipour Could you take a look?\n. @mvalipour: Can you submit a PR if you think you can improve the current highlighting?\n. Regexp are powerful though. The idea here is trying to achieve the best possible result using them. :)\n. Fixes for #1365 and #1371 seem to have fixed this issue too, so i'm closing it.. I'm not sure I understand the issue this PR is supposed to fix... Can you provide an example?\n. Can you take a look at this Fiddle? It uses the code you just provided with the line numbers plugin. And I can't see any problem.\n. The \"complete\" hook is a really recent change. It is not part of release 1.0.1.\ngh-pages is always the most up-to-date branch, but we're trying to sync master regularly.\n. Thanks for looking into this @apfelbox! I consider the issue can be closed.\n. Are you seeing this issue on a specific browser? I can't reproduce it with Firefox or Chrome. I made a quick JSFiddle to test: http://jsfiddle.net/au6yu4kv/\n. Alright, I reproduce it with your fiddle under Chrome. Please feel free to submit a PR. ;)\n. Well. It looks like it fixed the bug on Chrome... and it created it on Firefox. :(\n. Damn I can't find any obvious solution for this!\nIt looks like Firefox and Chrome just don't behave the same...\nTake a look at this really simple fiddle: http://jsfiddle.net/p5283dtv/\nFirefox result: \nChrome result: \nIE 11 to 9 seems to behave the same way Firefox does.\nDoes anyone have an awesome idea to fix this?\nEDIT: It could be only Chrome for Windows? See http://stackoverflow.com/questions/19669598/forcing-chrome-for-windows-to-respect-sub-pixel-line-heights\n. So... I added a test to check if browser rounds the line-height, so that we can use parseInt or parseFloat depending on the result: 8ed7ce3a6d11d68d6c65801459d4aed78455baad\nThis is quite ugly, but I don't have any better idea.\nTested with this fiddle under Firefox, Chrome and IE 11 to 9 on Windows.\n. @mortalis13 gave it a try some time ago: #560. It resulted in the creation on this repo: https://github.com/mortalis13/Prism-Wrap-Lines-Test\nNote that he wanted each wrapped line to count as only 1. Is that also what you expect or do you expect your example code to display 8 line numbers?\n. I took some time to play around with his code again. There seems to be a way to achieve the expected result without modifying prism-core, but this can only work for raw text, since highlighted code might have HTML elements spanning multiple lines and my code would break them.\nOriginal behaviour: http://jsfiddle.net/7wL6dtmw/\nModified plugin + css to make it work with wrapped lines: http://jsfiddle.net/7wL6dtmw/2/ (Tested in Firefox and Chrome)\nThis is far from being perfect. ><\n. This was finally fixed with #584 merged.. @nauzilus, sorry for the merge order. I usually don't merge new components or new plugins without @LeaVerou's approval.\n. Thanks !\n. Arf! I made a typo in the commit message. ><\nAnyway, thanks for reporting!\n. The problem is related to the parts (?!^) in your regexp. Prism breaks the string into pieces progressively as it matches patterns, so here are the strings that are tested, in order:\nFirst, Prism will test the entire text for your `def` pattern:\n\n``` javascript\nvar x;\nvar y;\n//or\nvar x, y; //with multiple variables declared\n\nvar x,\n    y = undefined;\n```\n\nThis will match `var x`\nThen Prism will test the following string. Notice how the first match has been removed.\n\n``` javascript\n;\nvar y;\n//or\nvar x, y; //with multiple variables declared\n\nvar x,\n    y = undefined;\n```\n\nIt will match `var y`\nThen we have this:\n\n``` javascript\n;\n//or\nvar x, y; //with multiple variables declared\n\nvar x,\n    y = undefined;\n```\n\nIt will match `var x`\nThen we have this:\n\n``` javascript\n, y; //with multiple variables declared\n\nvar x,\n    y = undefined;\n```\n\nAnd here is the problem: your regexp can't match because of the `(?!^)` clauses that fail. Indeed, the way Prism works, the comma is actually at the beginning of the string.\n\n\n\nI hope it is more clear.\n. What you're trying to achieve won't be easy, given the various things that can appear on the right side of the variable.\n\n``` javascript\nvar a = \"var b\",\n    b = function() { var c, d; },\n    e = [a, b = 5];\n```\n\nI can't think of a way of matching only the newly declared variables with just regexps. :/\n. It seems Brackets uses the code from CodeMirror to do the highlighting. CodeMirror uses parsers, not regexps... https://github.com/adobe/brackets/wiki/Language-Support\n. Well... CodeMirror reads the code character by character to determine the tokens. This way of doing things allows it to _understand_ the code. See the code source of the JS mode in CodeMirror: http://codemirror.net/mode/javascript/javascript.js.\n\nPrism, on the other side, uses regexps to determine the tokens. So it is not aware of the actual meaning of the code. This was a design choice made by @LeaVerou, to allow for easier addition of new languages and small code size. See the code source of the JS component in Prism: https://github.com/PrismJS/prism/blob/gh-pages/components/prism-javascript.js\n. Could we update it automatically through a gulp task? Say, we insert a placeholder in the plugin's code, for example:\n\n```\nvar Languages = {\n    /* [languages_placeholder] */\n};\n```\n\nand we just replace it with the actual mapping, computed from the `components.js` file?\n. Incorporating it only in the Download page would prevent users from using the source files directly (that is, prism-core + any plugins + any components)...\n\nFurthermore, it is a really specific edge case. I don't really like the idea of inserting specific code everywhere to handle it. :(\n. No problem! :wink: \n. I'm closing this issue. As discussed in #674, the `components.js` file can easily be parsed as JSON. The annoying comment in the middle has be removed in #679.\n. Thanks for contributing. This PR, in its current state, won't be merged though, since it breaks the website.\nWhen Prism will go fully asynchronous - I'm confident in that it will, someday -, it would probably be a good idea to make the components fetching asynchronous too, but for now, I think you'll have to rely on the global object.\nFeel free to submit a PR that makes the right part of the equals sign valid JSON: we'll ensure it stays valid in the future.\n. @tshedor? Could you take a look?\n. Fixed by #725.\n. Thanks for contributing! Please take a look at my comment.\n. Could you submit this PR in the [Prism themes](https://github.com/PrismJS/prism-themes) repo please?\n. I'll leave it to you, then. Thanks! \n. All merged! \\o/\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. Yes, I started to merge the first ones this morning. This one will be merged tomorrow.\n. I'm intentionally leaving them pending for a week, so that they can be reviewed. That's the whole point of a PR right? Otherwise I would just commit directly. ^^\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. Can you please provide examples that are not highlighted properly now and would be fixed with this change?\n. Thanks for reporting! :wink: \n. I understood the problem when I saw the actual code ^^\n. Thanks! ;)\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. You're right, separating the two things sounds like a good idea. I'll see how this can be done once all token stream tests will be written.\n. Closed by c1a0c1b.\nWe support two kinds of tests now, `.test` files using the special syntax for token stream, and `.js` ones comparing code to actual rendered HTML.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. Can you reproduce the bug on the [Test drive page](http://prismjs.com/test.html)?\nDo you have the last version of the component?\n. Can you provide a link to an online page reproducing the issue please? \n. Alright, feel free to reopen the issue then.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. Thanks for reporting! Should be ok now.\nPlease note that if you add another object inside, it will break again, though.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. Thanks for reporting. It should be fixed now.\n. lol! Yes you did. :)\n\nYou can use the builder on the [Download page](http://prismjs.com/download.html) to get an updated JS file. (Pro-tip: if you originally used this builder to get Prism, you should have a URL at the very top of your JS file. Open it in your browser and all your themes/languages/plugins should be pre-checked)\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. Thanks!\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. Yay! Thanks for submitting this!\n\n> There were some errors revealed\n\nI know, right? That's the great consequence of adding tests ^^\n\nWould you mind taking a look at my comments?\n. Thanks!\n. The `white-space: pre` property already prevents long lines from wrapping, doesn't it?\n. Ok, I get your point. But I cannot reproduce the behaviour you're describing in Prism. Adding `word-wrap: break-word` has no effect when `white-space` is set to `pre`: see [this Fiddle](http://jsfiddle.net/8ru3e79w/).\n\nUnless it is only happening in a specific browser?\n. No no, it's fine, I just couldn't reproduce the bug in Firefox. But you are right that it happens in Chrome.\n\nThanks for fixing this!\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. Damn, I misclicked and merged it immediately. Sorry about that, this Merge button is far too big.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. Please do not modify `prism.js` directly, it is used mainly for the website. Can you update the PR to modify the files `components/prism-core.js`, `plugins/file-highlight/prism-file-highlight.js`, etc. separately?\n\nYou can then run the default gulp task to build the minified versions and the file `prism.js`.\n. Thanks for contributing ;)\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. It's been 7 days. According to what I said in #680, I'm merging this.\n. I'll try to implement them tomorrow if I have time. \n. In the meantime, you can still use the Twig component. It should do a pretty decent job highlighting Django's templates, jinja and nunjucks.\n. And this leads me to the conclusion that those templating languages should share a common dependency. I'll think about how to do this properly.\n. Thanks for reporting. Can you tell me which components (i.e. languages) are loaded?\n. Thanks! It should be much better now. Please redownload with the link you provided and give it a try. If the problem persists, feel free to reopen!\n. Don't have any Nexus to investigate this. But if you're concerned with the performance, you should probably consider loading Prism asynchronously and running the highlighting by yourself.\n. Don't get me wrong: you are very welcome to suggest any optimisation you think could improve the performance on such devices. You are also welcome to point at some specific CPU heavy initialization you think could be improved. \nBut with only those screenshots, there is nothing I can do.\n. Without any more specific information, I'm afraid there is nothing we can do about this. I'm closing the issue.. Hi @AnujRNair. Thanks for contributing again.\nI am unable to reproduce the issue in the first place, though. Can you please provide an online example of the problem, before I merge the fix?\n. I'll go with solution 2 as well. The creator of this theme did not include spacing, so let's respect that choice and only fix the issue.\n\nYou don't have to create a new PR, though. Just update your fork and this PR will be updated automagically.\n. You can read the discussion about the prism-themes repo [here](https://github.com/PrismJS/prism/pull/293). The short answer is no, those themes probably won't be added to the official website, but they could have their own mini-website, someday.\n. I can think of multiple ways to solve this:\n- Release a plugin that would basically contain:\n\n  ``` javascript\n  document.removeEventListener('DOMContentLoaded', Prism.highlightAll);\n  ```\n\n  This looks a bit ridiculous, though.\n- Look for a class or an attribute on the `` tags (or their ancestors) to determine which code blocks are candidates to auto highlighing and which are not. This would allow some granularity, but I don't think anybody would actually need it.\n- Allow for a global configuration variable to be defined before Prism. Something like:\n\n  ``` html\n  \n  var Prism_config = {\n     manual: true\n  };\n  \n  \n  ```\n\n  This is probably, despite the global variable, my preferred solution. We could think about adding more options to this configuration object, like hooks definitions, async highlighting by default, maybe some plugin-related stuff...\n\n@LeaVerou: what's your opinion on this?\n\n@markcarver: Note that the first solution would be an easy way to solve your issue for now.\n. Well that escalated quickly!\n\n@markcarver This issue has, indeed, been open for a long time. You'll notice, though, that as of the first day you submitted it, we came out with an immediate (temporary) solution for you.\nYou bumped up the issue last year, without explicitely saying that the solution had stopped working for you (was it actually the case?). There did not seem to be any kind of urgency to fix this not critical lack of configuration through JS.\n\nThere has been no progress after that because we had not reached any consensus about the way of solving this issue. Now that we kinda have, someone might start working on it. Closing this issue won't help moving that way, though.\n\n> That solution, however, has since stopped working now that the site has undergone some performance tuning and now aggregates/minifies absolutely everything.\n\nI'm not sure I understand this specific statement. If the `removeListener` is registered after the Prism code, it should still work, being minified or not, shouldn't it?. @mAAdhaTTah: Please let me know if you find any flaw.\n. You can currently use this:\n\n``` javascript\nvar Prism = require('./components/prism-core.js');\nrequire('./components/prism-markup.js');\nrequire('./components/prism-markdown.js');\n\nconsole.log(Prism.highlight('_foo_', Prism.languages.markdown, 'markdown'));\n// Outputs:\n// _foo_\n```\n\nThe biggest flaw is that you need to handle the dependencies by yourself.\n. If I get it right, currently your wrapper is just a concatenation of all components, isn't it? If that is the case, couldn't you [build a version of Prism](http://prismjs.com/download.html) with all languages included and require it? You could then access the definitions using `Prism.languages`.\n. I'm not sure I understand well what you expect us to do. Should we automatically build a full-featured version of Prism, with all languages included?\nWe currently don't publish automatically to npm, but it has already been suggested (#578), so this build could be published as well.\n. Ok, so the steps described in my previous comments should do what you want. I agree that the current published package is far from ideal, as it is actually the build used for the website. I'll try to dive into #578 soon.\n. Using UMD has been suggested too, but it would require many changes so I won't do it for now.\n\nBTW, would this require publishing an npm package for each and every language definition, separately from the core?\n. Which plugins are you trying to use? \n. Like you said, both plugins are made to be used in the DOM, not directly from node.\n. See https://github.com/PrismJS/prism/issues/972#issuecomment-374736957 for an easy way to load language definitions in Node.. Hi, thanks for reporting. It should be fixed now. Just use the `git` component for diffs.\n\nNote that there is also a pending PR (#450) to make a proper component for diffs. It might be merged some day.\n. Wow! That was a nasty bug and it also impacted Handlebars and Smarty. Thank you so much for reporting this. It should be fixed now.\n. I'm glad you like it! It is heavily inspired by the feature currently implemented in Dabblet,  though ;)\n. Thanks for contributing!\nUnfortunately, this change will lead to other issues (e.g. strings will be highlighted inside comments (breaking them))...\nComments might be used to comment code out, and that's why we usually handle them first.\n\nWould it be ok to only change the negative look-ahead in the comment pattern, so that we ignore comments starting with more than one hash?  `/#(?![{#]).*/`\n. Damn you're perfectly right! Please use the `lookbehind` feature provided by Prism, though, so that the char before the hash is not consumed:\n\n``` javascript\n'comment': {\n    pattern: /([^#])#(?![{#]).*/,\n    lookbehind: true\n}\n```\n\nCan you also fix the indentation before the comments you added?\n\nI can merge this once it's done ;)\n. Thanks!\n. Oh, I had to add an alternative to handle the empty comment `#` and pass the tests.\nThe final pattern is: `/(^|[^#])#(?![{#]).*/m`\n. By running `npm test` (see http://prismjs.com/test-suite.html)\n. It's fixed already! See ccb6566ccb14f365ab221525f09247d775a9bd06\n. Thanks for contributing! Would you mind adding an example file, that reflects most of the features and flaws, following the format of [the existing ones](https://github.com/PrismJS/prism/tree/gh-pages/examples) ?\n. Also, please keep your changes on separated branches, so that this PR contains only Nginx-related stuff. You just pushed vim support ^^\n. I did a quick review. Please take a look at my inline comments.\n. Considering the mess this PR is (I don't know what happended with all those commits, but something definitely went wront ^^), I merged it manually.\nI rewrote the operator pattern to match the actual operators used in vim (based on [this manual](http://vimdoc.sourceforge.net/htmldoc/eval.html#expression-syntax)).\nI also removed many duplicates between keywords and builtins. I'm still worried by the huge number of keywords and builtins listed in the grammar, though, and I'd be glad if you could check them out to see if all are actually needed.\n\nSee 69ea994 for the details.\n. Also, the [example](http://prismjs.com/examples.html) looks mostly broken. Regexps are not highlighted, some obvious keywords seem to be missing (`func`, `endfunc`, etc.)... I know you are not the creator of this grammar, but as the new maintainer, you could probably try to improve it.\n. Hi! Nice catch, indeed. Thanks for contributing!\n. Don't think I didn't care about this PR. I just know @LeaVerou has a strong opinion about this so I consider only her can take a decision. I hope you're not closing because of a lack of interest.\n. I'll make my best to find some time to review this properly by the end of the week.\n. Ok so apart from my tiny comment related to the condition, this looks good to me. I still feel quite frustrated by the fact we aren't actually completely solving the issue, but I guess this is better than nothing.\n\nMaybe you could add a few tests for the C-like and the JS components, so that we can ensure it works and it will continue to work in the future. ;)\n. Sure! Whenever you want! :)\n. IMO this property should be set on every token, that may contain other tokens. I think the term \"nesting\" can be misleading as one might understand the token can be nested inside itself.\n. container? Cause it may contain other tokens? \n. Hi! Thanks for contributing. With example and tests, this is a great PR!\n\nWould you mind taking a look at the few comments I made?\n. Thanks. For some reason, the indentation of one line went crazy, can you check it out? Once this is fixed, I can merge the PR.\n. Thanks for reporting this behaviour. I think gradient should always take precedence if included (no matter the order). I'll see if I can fix this.\n. @nauzilus The issue should be fixed. Now the gradient previewer should take precedence over the color previewer if both are included, even if the color previewer is included first.\n. Hi! Thanks for contributing!\n\nYour idea is really smart, I like it! I noticed that when the hook executes twice, the extra divs are inserted twice per block too. Could you make some check to prevent this?\n\n(You can reproduce the bug on the Show Language plugin page, because the File Highlight plugin runs the highlighting twice per block)\n. Sorry it didn't work.\nSo right now, we're back with the first solution and its two issues right? I took some time to think about them but I can't find a way to solve them.\n. That's awesome!\nDo they have any logo, though? Also, which of the existing websites will we remove? (Or we can add a third line by displaying back Typeplate and adding [Raspberry Pi](https://www.raspberrypi.org/learning/kids-ruby-quiz/worksheet/) for example. What do you think?\n. Here we go!\n. I'm not sure I wanna add the Merriweather font just for 4 words on the homepage... Can't we just consider this a logo?\n. I'll give it a try tomorrow ;)\n. Nice idea, it is still readable and it looks great IMO. If you want us to use backgrounds instead of image tags for the other logos too (I made a special case of this one), just tell me ;)\n. Ok, let's leave it that way for now! ;)\n. For some reason, I can't reproduce the issue with the latest Chrome on my computer... Makes it a bit hard to investigate.\n\nI noticed you suggested using Blobs, so maybe this change in download.js could work?\n\n``` javascript\nif (typeof Blob !== 'undefined' && window.URL && typeof window.URL.createObjectURL === 'function') {\n    var blob = new Blob([redownloadUrl + \"\\n\" + code[type]], {\n        type: 'application/octet-stream;charset=utf-8' // Not really sure about this...\n    });\n    $('#download-' + type + ' .download-button').href = window.URL.createObjectURL(blob);\n} else {\n    $('#download-' + type + ' .download-button').href = 'data:application/octet-stream;charset=utf-8,' + encodeURIComponent(redownloadUrl + \"\\n\" + code[type]);\n}\n```\n\nI can't test it, though. Can anybody tell me if it changes anything about the alert in Chrome?\n\nIf it doesn't, I suspect the issue could be due to the mime type, couldn't it? We might want to try using `application/javascript` and `text/css` instead. Why did we use `application/octet-stream` in the first place? Was it to force the download in browsers that do not support the `download` attribute?\n. Thank you for working on this.\n\nCan you rename the test file from `important_feature.test` to `shebang_feature.test`?\n. Thanks!\n. Sure, as soon as we have a proper releasing process, I'll fix this. (related #578)\n. Better late than never, the Download page now adds the current version number at the beginning of the generated files.. Thanks!\n. Thanks for fixing it\n. I guess `myElement` is a `` tag in your example. Please try referencing the `` tag instead.\n. This is fixed now #797 is merged.\nThanks for reporting!\n. Thank you very much for investigating and fixing this @podgorskiy!\n. Could you provide on online example reproducing this issue? Also, which browser are you using to reproduce it?\n. @fladd Thanks. The issue is due to the `white-space: pre-wrap` that is applied to code blocks in your `screen.css` stylesheet. Please use `white-space: pre` for code blocks highlighted with Prism.\n. Or if you really want to preserve the soft wrapping, you can take a look at [this pending PR](https://github.com/PrismJS/prism/pull/584).\n. EDIT: @fladd Sorry, you might need to uncomment `word-wrap: normal` too.\n. I think it might have to do with other styles too. I'll check this out though.\nFor now, this issue is fixed ;)\n. That's a great idea. I'll give it a try tonight! \n. It took me a moment to make the `remove()` method work properly when it's called during the `run()` method, but I think I found a way of handling it that is not too ugly. What do you think @zeitgeist87?\n. You really wanna add a promise library in Prism?\n. Well, [the one we use](https://github.com/jakearchibald/es6-promise) on Prism website is around 5kb minified.\nThere are some others, like [promiscuous](https://github.com/RubenVerborgh/promiscuous) or the less known [plite](https://github.com/chrisdavies/plite), that are around 1kb minified. I never had the occasion of testing any of them, though. [EDIT: Just found this one too [native-promise-only](https://github.com/getify/native-promise-only) that seems to be around the same size]\nI may give them a try.\n. Well... I played around with Promises for several hours now... The biggest issue I encounter, ironically, is that they are _really_ asynchronous. ^^' The consequence is that changes in grammars may happen at any time, including once Prism is done highlighting.\n\nThe only solution I've found so far would be to add another hook `updated-language` that should be triggered by any component/plugin after a grammar has been updated.\n\nConsider the filters in the jade component as an example:\n\n``` javascript\nfilters.forEach(function (filter) {\n    /* [...] build an object o with additional tokens */\n    Prism.languages.insertBefore('jade', 'filter', o);\n    Prism.hooks.run('updated-language', 'jade');\n});\n```\n\nand in `highlightElement()`, we would have something like:\n\n``` javascript\n// Whenever the language is loaded\n_.languages.getPromise(language).then(function (grammar) {\n    env.grammar = grammar;\n    var doHighlight = function () {\n        /* [...] */\n        env.element.innerHTML = env.highlightedCode;\n        /* [...] */\n    };\n    doHighlight();\n    _.hooks.add('updated-language', function (langId) {\n        if (language === langId) {\n            // The language for this code block has been updated somehow:\n            // refresh the grammar and highlight again!\n            env.grammar = grammar = _.languages[language];\n            doHighlight();\n        }\n    });\n});\n```\n\nWould that be ok?\n. Also, because of the asynchronicity, note that this change is not backward compatible and will lead to the release of a major version.\n. Sure, that's why I changed the title of this PR this morning. ^^\nIt is indeed a huge change and we need to carefully think about all of this.\n. Thanks!\n. Thanks for contributing!\n. Hi! Prism does not currently provide a way to do this out of the box, though you could probably change the selectors used in those themes to fit your needs. \nIf it were to be a feature, how would you see it? How could we allow both a global default theme and block-specific ones? \n. We could try to rely on selectors specificity, but this would require all themes to properly reset any property the default theme would have set...\n. You shouldn't have to change anything in the JS.\n\nYou just need to add a class name on every code blocks, for example:\n\n``` html\n\n```\n\nand change the dark theme like this, for example:\n\n``` css\ncode.dark-block[class*=\"language-\"],\npre.dark-block[class*=\"language-\"] {\n```\n\n(just make sure you change all the required selectors in the theme)\n\nAnd you can do the same with the Coy theme.\n. Hi! I already noticed this, though I'm quite satisfied with the current behaviour where the `-` symbol is highlighted as operator (furthermore, AFAIK, most languages actually implement it as an unary minus operator, so it makes sense).\n\nThe solution you propose will indeed highlight `-1` as a number, but it will also highlight `4-1` as a whole number...\n\nI definitely think the best move here would be to remove all intents to include the minus operator in the number regexes.\n. I understand your use case. However, as I said, I think negative numbers should precisely be tokenized as an unary minus operator followed by a number, at least in most languages. :)\n\nThe specific usage you want would indeed require some customization.\n. No. Everything is first merged into gh-pages. gh-pages is merged into master when we release a new version. I'll try to do it soon. Hopefully this week. \n. Hi. Comment-like substrings are a known issue. But I think we could prioritize triple-quoted strings over single-line comments in Python.\nI'll look into it tonight.\n. Hi! Thanks for contributing!\n. Hi, thanks for reporting.\n\nThis issue will be a tough one to fix... The DFS function is not able anymore to walk through all the languages. And the DFS function is called anytime insertBefore is called, which means... many times.\n\nThe DFS function is mainly needed because Prism relies on the order of the keys in the grammars. insertBefore creates a new object each time it's called (it can't be done \"in place\") and it needs to walk through all references of the previous object to update each one to the new reference.\n\nI think #799 could help fixing this. I need to get back working on it.\n\nFor now, the only solution I can suggest is that you reduce the number of languages you included in your installation, preferably to match only the ones you actually need.\n. @LeaVerou Hey, sorry for not answering that before! I missed this issue somehow.\nI don't know where those weird versions come from. They are dated at the time of the creation of the NPM package... so I guess they may have been mistakes, or automatically created maybe?\nAnyway, I'm pretty sure they are safe to remove.\n. I do not have access to our npm repo. Only @LeaVerou can do this at the moment. . This file http://antoniojsantos.me/assets/js/prism.js?v=184a49e805 is supposed to contain JS, not CSS.\n. Hi. Could you please provide a link to an online example reproducing the issue please? Your CSS looks quite wrong to me. You have to specify the unit for every value in your padding declaration. \n. I'm not sure I understand how it could work without Prism either. But I'm convinced there is a logical explanation! \nGlad I could help ;)\n. Thanks for reporting. This is a known issue, though. \n. Yes I'd like to get this solved at some point. But the issue is not that trivial. Several PRs have already been submitted in an attempt to fix it. We are definitely working on fixing this but it might take some time.\nI'll keep this issue open for now.\n. This must have been fixed by #967. I cannot reproduce the issue on the [Test page](http://prismjs.com/test.html) anymore.\n. Hi! Could you provide an online example reproducing the issue please? \nI guess the router loads your changes dynamically. You might have to trigger the highlighting yourself by calling `Prism.highlightAll()` once they are added into the DOM. \n. You have to use the component named \"markup\" which is a common highlighter for all XML-based languages\n. We already have: https://github.com/PrismJS/prism/blob/gh-pages/components/prism-markup.js#L44\n. I made the change manually. @LeaVerou actually just making the closing bit optional would not have worked because the lack of greediness would have stopped the highlighting far too soon. I found a way by adding a `$` anchor as an alternative to the closing bit.. Hi all! Have you tried using the [Keep Markup plugin](http://prismjs.com/plugins/keep-markup/)? I just did a quick test and it seems to work as you would expect.\n\nI'll close this issue. If you think this issue deserves a better solution, please tell us so we can reopen it!. See #818\n. Most hooks don't run when `highlight()` is called directly, because they usually use the DOM elements and stuff.\n\nRecently, we added the `before-tokenize` and `after-tokenize` hooks, which _do_ run when `highlight()` is called directly. This should allow you to add custom templating and do all kind of cool stuff with the generated tokens.\n\nSee [JSX](https://github.com/PrismJS/prism/blob/gh-pages/components/prism-jsx.js) and [Markup templating](https://github.com/PrismJS/prism/blob/gh-pages/components/prism-markup-templating.js) for examples.. As PR #847 was merged, I'm closing this PR.\n. I updated [the original fiddle](http://codepen.io/anon/pen/RrKGLw) to the last version of Prism: https://codepen.io/anon/pen/rdqMmM. It appears the problem is fixed.. Issue #848 was fixed.. Yay this looks like a great idea! \n. @LeaVerou Ok so plugins might declare their settings... But will it still be possible to override the plugin's defaults by setting classes or data- attributes on pre, code, or any ancestor?\n. Alright, looks good to me!. Couldn't reproduce, I'm closing this issue.\n. So the official way to do this is something along the lines of:\n\n```js\nPrism.hooks.add('before-highlightall', function (env) {\n    env.selector += \", [class*='lang-'] kbd, [class*='language-'] kbd\" +\n        \", kbd[class*='lang-'], kbd[class*='language-']\" +\n        \", [class*='lang-'] samp, [class*='language-'] samp\" +\n        \", samp[class*='lang-'], samp[class*='language-']\";\n});\n```\n\nAlternatively, `env.elements` can be set directly to the set of elements that are to be highlighted.. Implemented in #876. I'm closing this issue.\n. Looks like an quite efficient fix to me. You can start the id at 0 since you use pre-incrementation. \nThanks for reacting so quickly! \n. I guess I wrote it at a time where the initial line feeds were trimmed in the core.\nNot sure how it would behave with the Remove initial line feed plugin...\n. Can you provide an online example reproducing the issue please? \n. Issue could not be reproduced. I'm closing it.\n. (Fixed in f1c719945d74889757bfd7152763fff7cbb46724)\n. You are right. HTML code needs to be escaped to be displayed properly in Prism. Note that this is not related to Prism but to the way the browsers interpret content inside pre and code. \n. Well we do have tests now, don't we? \n. > Why does Textile extend Markup anyway?\n\nBecause it allows HTML:\n\n> You can certainly use HTML tags inside your Textile documents.\n> `I am very serious.`\n\nhttp://redcloth.org/hobix.com/textile/#writing-in-textile\n. > This is recognized as a HTML-tag: ``\n\nShould we allow the exclamation point though?\n. Looks good to me. Thanks for working on this!\n. Regarding third party scripts, I think the plugin page should simply mention explicitly that script is required. And that's it. ^^ I think Prism should not distribute directly the third party script. \n. I really don't feel like including it as a dependency of Prism globally. \nDon't know much about Browserify so I really can't tell. \n. Regarding the HTML API, isn't registerButton enough?  Or am I missing the exact expectation here? \n. Regarding the Show Language plugin (or anything it might evolve into), couldn't it require this plugin and use it just like the Copy to clipboard plugin does? \n. > The first question I have is whether this is an acceptable approach, as I'm not sure how to deal with BC, if that's even an issue here. I'm honestly not entirely certain how you think about BC; are you assuming people have to download the latest version from the site? If so, then as long as the downloadable work, it should be BC.\n\nI think @LeaVerou should decide about this. I don't know if CSS changes can be considered BC breaking in our case.\n\n> The other issue I had last time I played around with this was getting the download page to automatically check the toolbar plugin w/ show-language. Any thoughts on handling that?\n\nI had to deal with this in the Previewers plugins (even though it's on my todo list to merge them into a single plugin... as suggested in #913). If I remember properly, you just have to add the `require` key in the `components.js` file, just like you would do for a language.\n. The Toolbar plugin was meant to be the hook on which other plugins could be attached, like Show language, Copy to clipboard, Download source file, you name it. \n. I personally don't think the name should be changed. The name \"Toolbar\" reflects the plugin ability to display labels and / or button to perform actions.\n\nThe plugins should allow custom labels and / or action buttons to be added in the simplest possible way. And it should be used as a \"container\" for the Show Language plugin and the hypothetic plugins Copy to clipboard (issue #280) and Download source (issue #1030).\n. Oh, sorry about that! You're right! ^^\n. Having an HTML API has been mentioned as a good idea in this very thread : https://github.com/PrismJS/prism/pull/891#issuecomment-214761557\n. Should we really use CSS variables that early? I would be in favor of waiting for better support first. \n. Still. IE11 and Edge represent a large part of global usage. Our plugins should not be that less compatible than Prism's core.\n. IMO we should still stay compatible with at least the last version of every major browser, including edge. We should not restrict the usage of Prism just because we think it's used only on tech oriented websites read by people not using IE. We cannot make that assumption just like this. \n\nMoreover, an HTML API would be perfectly usable, as much easy to implement and more coherent with all the other plugins.\n\nI can't see any valuable reason to insist on using CSS variables here.\n. I guess she meant \"without JS\" instead of \"with HTML alone\".\n. Hence the HTML API. Which might even allow to add multiple labels at once, set the order and configure other stuff.\n. I think there should be a way to reorder the labels/actions in the toolbar, especially since some of them may be added automatically by plugins, and so depend on the order in which the plugins executed.\n\nThere could be a way to add buttons with the HTML API by providing a `data-label-onclick` attribute that takes the name of a global function?\n\nThere should also be a way to add multiple labels, maybe with numbered attributes, like data-label-1, data-label-2, etc.\n\n``` html\n\nfunction version_info() { alert('Some info about the version'); };\n\n\n```\n\nI'm still very bad at naming things, so there are really just suggestions...\n. You're right the data-label-onclick is quite useless. \n\nRegarding the coordination, I think there should be a way to position the buttons that were added through plugins. Maybe this could be achieved with other data attributes \n. I'm fine with it. If there is a real need for multiple labels through HTML API, it might be added later anyway. \n\nWhat about the order, when using plugins? Can you think of a way to handle this using HTML? \n. It seems good. Though I don't think there's a need for the brackets and single quotes. A comma separated list of aliases should be enough.\n\nWould it be possible to control the position of the label added through the data-label attribute this way? Maybe by giving it an arbitrary alias? \n. Oh no, sorry, \"label\" is fine! I missed it somehow. \n\nThe plugins should probably register their exact name for consistency, i.e. \"show-language\".\n. Sorry for the late answer. I'm merging now.\n. I agree that this should not be limited to the Markup component.\n. I think this issue can be closed now.. This looks related to #496\n. Maybe add the aliases into the components file, so we can use them during the gulp generation. \n. This is exactly what I meant :) Could you take some time to implement it? \n. I consider the question answered. I'm closing the issue ;)\n. According to the spec, authors should use the \"dir\" HTML attribute rather than the \"direction\" CSS property. So I guess it should be fine.\n\nUsers who need to force code direction will still be able to set the attribute directly on their tags. \n. @zeitgeist87 @LeaVerou So... did #893 fix this issue?\n. You must not use indentation inside the tag. Indented text in markdown is interpreted as code.\n\nIf you don't indent it, it should be fine, as you can see on the [test page](http://prismjs.com/test.html):\n\n![http://puu.sh/nIZDC/4ed58c7145.png](http://puu.sh/nIZDC/4ed58c7145.png)\n. Code is already shared across Previewers since they all require the Previewer: Base plugin.\n\nI agree they could be merged, though. But we still don't have any global configuration for Prism, have we? What API do you imagine to turn off some previewers?\n. Hi @LeaVerou.\nI was finally taking a closer look at this (it's almost done, actually), and now I have second thoughts...\n\nThe Previewer: Color plugin does preview colors in HTML `bgcolor` attributes, which is not CSS. Thus I'm worried about merging it into a CSS Previewers plugin.\n\nWhile thinking about this, I realized it would be great to add a previewer for images. But those can appear both in CSS and HTML (and Markdown, and probably other components...). So the grouping of previewers by language looks less relevant in this case.. Sounds good to me.. I'll close this issue as a duplicate of #832. Hopefully the same solutions apply.. @mAAdhaTTah I'm ok with it. I wasn't sure it was a finished PR, since @wesalvaro never commented after his last commit, and some on the stuff @zeitgeist87 pointed out have not been addressed at all (like usings tabs).\nAn example file would also be needed, and maybe more atomic tests.\n\nI don't think we have write access on this one, so we'll need to make a new PR if @wesalvaro does not update it himself.. I think we'll wait for, at least, an official specification. I couldn't find them in the [ES2016 spec](http://www.ecma-international.org/ecma-262/7.0/), so I'm closing this PR for now.\n. Guidelines regarding how to write tests can be found here: http://prismjs.com/test-suite.html\n. Yes. All PRs should be done on gh-pages ;)\n. > Unavailable for you site because your domain is not properly configured to support HTTPS.\n\nI guess there is some action to perform on the domain to enable/configure a LetsEncrypt certificate first, before we can enforce HTTPS.. Something like this?\n\n``` javascript\nPrism.hooks.add('after-highlight', function (env) {\n    env.element.innerHTML = '' + env.highlightedCode.replace(/\\r\\n?|\\n/g, '') + '';\n});\n```\n\nYou might want to add some CSS like so:\n\n``` css\ncode div:empty:before {\n    content: '\\00a0'; /* keeps empty divs visible */\n}\n```\n. This issue did not appear to be due to Prism itself, so I'm closing it.\n. Please provide a link to an online page reproducing the issue.\n. As far as I can tell, the plugin works properly, except the Prism stylesheet is not included in the second editor. This is probably an issue you should file directly on the [TinyMCE repo](https://github.com/tinymce/tinymce).\n. See https://github.com/PrismJS/prism/issues/1069. Duplicate of #649 no?\n. Fixed with PR #950. I'm also in favor of merging all those variants into one single language (or maybe two if there is a real need). That's what we did for Pascal for example, because having too many languages would be tedious for both the maintainers and the users.\n. I merged them manually.\n. @dvkndn I only had time to look through the code right now. It looks quite good to me. I'll find a moment this week to actually test your plugin.\n\nI think I spotted some grammar errors in your plugin HTML page. I'm not an native English speaker myself, though, so I'm not really the best candidate to help fixing this.\n. Ok, it looks good to me.\n\nOne last thing... why is components/prism-markup.min.js listed in the changed file? Can you revert the changes on this file?\n. Great! Merging, then!\n. Because everything is merged to `gh-pages` first. I'll try to make a release on `master` this month if nobody does it before.\n. Hi. I think you need to escape the chars `<` and `>` (as `<` and `>` respectively) inside the `` tag. Otherwise they might be awkwardly interpreted by your browser. \n. I'm not sure I understand what the issue is in the first place...? \n. OK. I'm still not sure I understand why Jekyll would force caps in languages names, but nevermind. Your change looks good to me.\n. I checked quickly and couldn't find native support for Prism in Jekyll. Are you using a plugin or something? \n. Hi! Sorry for the late answer. I updated the plugin documentation to include info on how to get the grammars.\n\nWe could also add a \"Download all languages grammars\" button on the plugin page, that would generate a zip file automatically in JS. I gave it a try and it seems to work pretty well, using [JSZip](https://github.com/Stuk/jszip) and [FileSaver](https://github.com/eligrey/FileSaver.js). I will make a PR so you can take a look.\n. Please provide the entirety of the code you're trying to highlight. It seems to me that the initial highlighting problem occurs before this snippet.\n. @LeaVerou @zeitgeist87 Does it look safe to you to move up the template string pattern in the language definition of JS so that it's processed before normal strings? IMO it is much more common to encounter quotes inside template strings than backticks inside normal strings. What do you think?\n. Yup, agreed!\n. That's a nice idea.\nI guess it would still require publishing to npm, right? We do not have automated publishing at this time, and I think @LeaVerou is the only one who currently has the rights to publish...\n. @QuantumInformation npm installation instructions are on [the homepage of the website](http://prismjs.com/#basic-usage).\n@felixsanz I realized that if you really want to use the `gh-pages` version in your projects, you can already use a direct link to github ([see this SO answer](https://stackoverflow.com/questions/39732397/install-specific-branch-from-github-using-npm)). So I don't think we need this `@next` tag. Also, I'm trying to set up regular releases, based on the change activity.. Sounds awesome! I'll try to get some time to review this later this week. \n. This looks good to me, @zeitgeist87. It seems to works really well, kudos! Merge it whenever you want.\n. If you can wait til the end of the week, I will merge PR #980\n. @garretwilson It is merged. ;)\n. I digged into this last night, and the loadComponent() option works great.\n\nIt might even be able to handle dependencies by reading the `components.js` file. But here is the problem: the `components.js` file can not be `require()`'d in Node.js without a `module.exports` at the end. This would break any script that tried to parse the `components.js` file (like we currently do in the `gulpfile`).\nIs that a BC break?\nShould we add the `module.exports` line to the `components.js` to `require()` it or parse the file?\nShould we handle dependencies at all in this helper?\n. @LeaVerou Indeed that would be nice! But shouldn't it be considered a BC break anyway, since people relying on parsing the `components.js` file would have to change to `components.json`?\n. Ok, we added a `loadLanguages()` function that can be used as suggested here:\n\n```js\nvar Prism = require('./components/prism-core.js');\nvar loadLanguages = require('./components/index.js');\nloadLanguages(['php', 'ruby']);\n\nPrism.highlight(...);\n```\n\nIt will load the required dependencies.\n\nI still need to document this somewhere. I'll close the issue once it's done.. I do not reproduce this issue on the [Test drive page](http://prismjs.com/test.html)...\n. Yay! That's great! :)\n. The line-numbers plugin is meant to be used with [its associated CSS file](https://github.com/PrismJS/prism/blob/gh-pages/plugins/line-numbers/prism-line-numbers.css), which already includes this padding.\n. The line-numbers plugin is meant to be used with [its associated CSS file](https://github.com/PrismJS/prism/blob/gh-pages/plugins/line-numbers/prism-line-numbers.css), which already includes this padding.\n. Hi @nfagerlund!\nYour PR looks ok to me, and it does not break any existing tests. Merging now. ;)\n. > I've noticed one minor thing: You added `` twice.\n\nWoops! Nice catch.\n\n> We could also add all the third party libs to `package.json` and copy them over with `gulp`.\n\nWe probably could. But we did not do it for es6-promises. Should we? I don't see the real benefits here.\n. Anyway, we'll be able to change this anytime in the future if we feel the need ;). I'm merging.\n. Thanks! :)\n. What does your input file contain exactly? HTML?\n. The highlightAll method selects pre/code blocks in the DOM.\nThe highlight method process _the contents_ of those blocks, one by one. It's meant to process a string of code, not HTML (well, except to highlight markup...).\n\n`Prism.highlight('var i = 4', Prism.languages.javascript)`\n\nYou'll have to make the replacement yourself. Maybe you should use the help of a templating library here.\n. You need to escape the opening `<` using `<`. This is required to prevent your browser from interpreting this as a tag. \n. You're welcome ;)\n. Please reopen if you can provide more information regarding this issue.. I'd rather fallback on setTimeout since we're supposed to support IE9. \n. Indeed. It was there because it originally was a setTimeout and the person who changed it forgot to remove it. \nIt went unnoticed because that change was part of an unrelated PR... \n. Why 16, by the way? \n. Just noticed you created the PR against the master branch. We currently work on gh-pages. The master is only updated on new release.\nI merged this PR manually.\n. Looks good to me ;) Thanks for contributing!\n. Thanks!\n. I'd just like to say that there is a difference between deleting the IE8 plugin (that has never worked and was not officially public) and triggering errors in IE8.\n\nI think @LeaVerou was in favor of not triggering errors in IE8, even if Prism would not work. But maybe she changed her mind?\n\nI personally do agree we should drop support for IE8 entirely and stop caring about triggering errors on this browser, though.\n. You're right. And we already removed some of the IE8 checks [in the past](3656a08508149ceb9f6b13bb4dc73fd08773b436)...\nI'd like to hear @LeaVerou's opinion on this, but having to keep being error-proof on IE8 really is a pain in the neck. :/\n. Merged!. Can settings still be set in a programmatic way, rather than using attributes?\n. We do need a way to set defaults / global options. This PR is great for per-block options, but harder to use for global options. I think we need both mechanisms.\nAnd yes, we might need to question about BC too...\n. @LeaVerou Beware of the browser compatibility for [`closest()`](https://caniuse.com/#feat=element-closest).. @LeaVerou As long as we document our compatibility limitations (and solutions) explicitely, like maybe on the website *and* in the README, I'm fine with the idea.. @eriklieben, since [you originally added](https://github.com/PrismJS/prism/pull/918) special configuration for JSPM, do you have any opinion on this?. @eriklieben Ok, thanks!. Haha indeed this is ridiculous! ^^ This is fixed, thanks!\n. Hi. Thanks for reporting.\n\nYou're right, `language-none` is the preferred way to do that. The Autoloader plugin won't try to load the \"none\" component anymore.\n. Hi! Thanks for reporting.\n\nThe issue should be fixed now. I managed to highlight your file. Feel free to reopen if not ;)\n. This sounds like a huge work to do...\n\nI'm also afraid that it might get really hard to fix bugs related to using several components together, once they're all around on github and we don't have write rights on the repos. (I have in mind the recent issues regarding the use of the line-numbers plugin + normalize-whitespace plugin, and the ones about the line-numbers plugin + PHP component.)\n\nThat being said, I admit it would be great to let the maintaining work to the actual creators, sometimes...\n. I merged this manually. Thanks for contributing.. Hi @binarygenius. As 50Wliu said in the atom issue, the code you're highlighting is not bash, so it does not get highlighted properly.\n\nIf you're looking for a way to get the Prism's theme applied to the code block without any actual highlighting done, you can indeed use any non-existant language. We do advice using the class `language-none` though, to prevent any future conflict.\n. Sorry for the long time waiting. Thank you for contributing!\n\nNote that I did not include the changes in the `index.html` file, because I consider your change is not a feature that needs to be shown, it's just the way it should have worked all along ;). It looks like the `string` pattern in the CSS components lacks the `greedy` flag.\n. Thanks for contributing. Please take a look at the few comments I made on the code.\n\nAlso, it would be truly awesome if you could:\n- add some code examples, like the [existing ones here](https://github.com/PrismJS/prism/tree/gh-pages/examples)\n- add some tests, like the [existing ones here](https://github.com/PrismJS/prism/tree/gh-pages/tests/languages) (more info regarding tests on [the Test Suite page](http://prismjs.com/test-suite.html))\n- run `gulp` on the command line to generate the minified version of your component.\n. I reviewed your additions and made a bunch of comments about them. Please take a look when you can.\n\nThose additions would also need test files ;)\n. Great! Almost there!\n. The code looks quite good to me now.\n\nI pulled your branch to test it a bit, and I noticed your examples for strings and numbers aren't exactly working well, though. Most of those cases don't appear to be handled by the current regexps. Either we need to handle them or they should not appear in the examples. Can you take a look?\n\n![prism-jolie-broken-examples](https://cloud.githubusercontent.com/assets/565460/18219502/67970dda-716a-11e6-8c7b-a60e52a1291f.png)\n\nAlso, in the full example, I'm curious about the color of the parentheses and commas. They probably should go inside the `punctuation` rule, shouldn't they?\n. Sorry for the late answer too. It's merged now.\n. Hi @dawsonbotsford. As far as I can tell, this can not been accomplished right now, since most plugins rely on the DOM, and on the code being put inside an HTML tag. For that reason, Prism is unable to run those plugins server-side.\n. Feel free to try. If you manage to make it work, maybe you can share the code here to help other people trying to achieve that.\n. Thanks for contributing! Please take a look at the comments I made regarding the code itself. \nAlso, it looks to me that hpkp and hsts look alike a lot. Couldn't they be merged as a single component? \n\nIt would be great if you could add examples and tests. Please refer to my comment https://github.com/PrismJS/prism/pull/1014#issuecomment-240993951 for details. \n. I won't merge until I'm back on a computer next week (currently reviewing with my phone). In the meantime, if you can write examples and tests, and think about my suggestion to merge hpkp and hsts, it would be really great! \n. Closing after #1275 was merged.. Could you provide an online example of your not working code? \n. I'm not familiar with Angular but, because Prism overrides the contents of the elements containing your Angular placeholders, I'm pretty sure you need to manually trigger the highlighting again anytime you model's data change, so that Prism highlights the updated code.\nHopefully, Angular provides that kind of feature...\n. Hi, thanks for reporting.\n\nIt looks like I was wrong in #998. We _do_ need to store and restore the original code for the line-numbers plugin to work properly.\nDoing so, though, creates an issue when used with the remove-initial-line-feed or the normalise-whitespace plugins. This is because those plugins need to run _before_ the `before-highlight` hook. Moving them to the `before-sanity-check` hook appears to solve the problem.\n. I assume [the solution to #972](https://github.com/PrismJS/prism/issues/972#issuecomment-374736957) will also work for this issue.. The link to the download page you provided does not have the JavaScript language included in the bundle.\n\nThe file `prism.js` on github is used by the Prism website, so it already has the JS language included. When you use the bundle generated by the download page however, you do need to check JavaScript to actually be able to highlight JS code.\n. @LeaVerou The PR was accidentally merged into master.\n\nSo I merged the commit into `gh-pages`, added the iota underbar in the tests and ran gulp to get the minified component. I also reverted the commit on `master`.\n. Hi, could you show us your code so we can investigate this issue?\n\nAlso, shouting is not necessary ;)\n. Thanks for the code sample. It should be fixed now.\n. Hi!\nThe `lookbehind` cannot work if the part being matched behind has already been highlighted. The patterns are processed in the order they are defined in, so I guess you need to move the `function` and `variable` patterns up, above the `keyword` pattern.\n. Hi!\n\nYou should be able to override the name displayed by adding a `data-language` attribute on the `` element containing your code. This is the easiest solution.\n\nAlternatively, you could add you language definition to the `components.js` file, give it a proper `title` and then run the `gulp` command to regenerate the map used by the Show Language plugin.\n. @LeaVerou I won't add any new links in the Third-party tutorials on my own choice. So if you wish to add the proposed one, feel free to do so (or say so and I'll do it).. Sorry for the delay. Thank you for contributing!. I added a basic feature to do that. See http://prismjs.com/plugins/file-highlight/. @mAAdhaTTah On the last example? I can see it working properly.... @mAAdhaTTah I've just fixed an issue in cd22499c363bcdc6a290b77d271516886dad130f, but it seems totally unrelated to the issue you're showing there.\nI don't get it, I can't reproduce the issue on neither Firefox nor Chrome. Are you sure you don't have some sort of browser cache or something?. @mAAdhaTTah Did you find anything? :worried: . Hi, sorry for the late answer. Could you give examples illustrating the changes made in this PR please?\n. Thanks for contributing!. Hi, sorry for the late answer.\nCan you provide a screenshot of the actual result versus the expected result? I can't reproduce the issue myself.\n. Please reopen if you can provide a screeenshot or (better) an online example reproducing the issue.. @LeaVerou Here are suggestions for label names, taken from https://github.com/MunGell/awesome-for-beginners:\n\n- `first-timers-only` (it's popular, but I'm not a big fan of it, since [it _prevents_ anyone more experienced from fixing the issue](http://www.firsttimersonly.com/), which I think is stupid)\n- `good first issue`, `good-beginner-issue`, `good-for-beginner`, `easy-pick`, `first timers welcome`, `good-first-contribution`, `beginner-friendly`\n- `beginner`, `Level:Starter`, `exp/beginner`, `difficulty/newcomer` (which implies, I suppose, creating other labels for other levels of estimated difficulty). You just need to include both plugins and use both classes just as you said.\n. Hi, sorry for the late answer. Can you reproduce this issue on the [test page](http://prismjs.com/test.html)?\n. Hi! I checked to demo and I admit this looks really promising! ;)\n. Yes, it could be merged as a plugin in the official repo, no problem.\n\nJust tell us once you consider it done so we can test it.\n. Haha yes that crossed my mind too. But that would imply Prism has info about the code structure for each and every language we support... That's a huge feature to add, don't you think? I agree it would be awesome though! \n. Hi! Well, the JSON grammar you linked to could be helpful, but it definitely requires some work, since it appears to be far more specific than what Prism would require, and it also seems to use POSIX character classes that JavaScript doesn't support. I might give a try anytime soon, though.\n. Support for Reason has been added.\nI mostly based the component on the [documentation](http://facebook.github.io/reason). It looks quite partial, though... So I took the list of keywords directly from the [lexer](https://github.com/facebook/reason/blob/master/src/reason_lexer.mll) and added some stuff I found in the [test files](https://github.com/facebook/reason/tree/master/formatTest/unit_tests/expected_output).\n\nHopefully I did not miss too many features. If you encounter issues using it, feel free to open some issues so we can improve the support.\n. I can't reproduce this issue on the Test page...\n\n![https://puu.sh/sbplT/24b861700b.png](https://puu.sh/sbplT/24b861700b.png)\n. Oh, sorry, I didn't realize they were part of the code block! Issue confirmed! ;)\n. I can't reproduce this issue on the test page...\n\n![https://puu.sh/sbuA2/da38ca8775.png](https://puu.sh/sbuA2/da38ca8775.png)\n. I remember the Handlebars component was broken not so long ago. I guess you had the broken file cached in your browser or something.\n. Yes, this is a known flaw. If you have any idea to improve these components, feel free to submit a PR.\n. How could we solve this? Should we generate a different pattern for the sentinel based on the code? Like, we could look for different patterns in the initial code, and keep generating new ones while we find they are already used. That way we would end up with a not (or less) predictable pattern that is safe using for the replacements? \n\nEdit: oh that's actually exactly what you suggested in your initial post... I did not read it again before posting ><. I don't see what can be done (if there is to do) without an actual proof of concept, so I'm closing this issue in the mean time.. The build tool on the Download page could be smart enough to build its own stylesheet using only the styles required for the selected languages in the selected theme.\nFull stylesheets would then only be released for npm users I guess... \n. Or, still using the same idea, we could have one stylesheet per language, containing only references to the variables declared in the themes. It might be easier then to generate custom builds for a subset of languages. \n. If we do need to compile Sass directly on the Download page, I just came across this repo: https://github.com/medialize/sass.js/\n. Hi! I can't reproduce the issue. Could you provide an online example?\n. Please reopen if you can provide on online example reproducing the issue.. You must encode the opening bracket as `<`, i.e. `<br>`.\n. Regarding the empty lines, you might want to use the [Normalize Whitespace plugin](http://prismjs.com/plugins/normalize-whitespace/).\n. You should be able to use Prism in node.js already. See https://github.com/PrismJS/prism/issues/593#issuecomment-137566125. Please feel free to reopen this issue if you encounter any problem.\n. Can you provide some example code to reproduce the issue? Prism should be able to be used in a Worker. I just tested the following code, that works:\n\n``` javascript\n    var worker = new Worker('prism.js');\n    worker.onmessage = function(evt) {\n        console.log(evt.data);\n        // Displays <span>\n    };\n    worker.postMessage(JSON.stringify({\n        language: 'markup',\n        code: ''\n    }));\n```\n. Could we add a public method to detach the message listener? Would this help?\n. You need to escape it only when it appears inside HTML (e.g. inside a <code> tag). When you call Prism directly from JS, you don't need to do any escaping. ;)\n. @vkbansal: Can you investigate this?. You need to add the class name `line-numbers` to your `` tag. http://prismjs.com/plugins/line-numbers/. Hi! If you still need to report actual issues regarding Prism, please create a new issue describing a single problem at a time.. The Copy to Clipboard plugin was merged the 09/11/2016, but the next version of Prism (1.6.0) was only released the 03/12/2016. Considering the date of your comment, I'll assume this was the reason. Hopefully it is available via Bower now, as I can't see why it wouldn't.. Hi! I think this could be achieved by inserting this content dynamically after highlighting. The [Keep Markup plugin](http://prismjs.com/plugins/keep-markup/) should help.\nSee http://codepen.io/anon/pen/VmQpYz for a quick attempt.\n\nNote that this might not be super easy to combine with the Line Numbers plugin, though.. I asked @LeaVerou to publish it. She will surely be able to do it anytime soon.. Yup, we do have an open issue for that: #661. Probably not. This situation has been confusing for some users in the past, and surely still is.. I just compared the two branches. There does not seem to be any info in master that is not already in gh-pages (we just did some weird reverting once after an accidental merge of a PR directly on master).\n\nSo I think your idea is the way to go ;). @mAAdhaTTah Having never used Github pages, I must admit I'm not confident at all doing this. I was hoping @LeaVerou would handle it.\n\nAlso, I think some people used to reference the `gh-pages` branch directly. See Bower-related issues https://github.com/PrismJS/prism/issues/137#issuecomment-21528734, https://github.com/PrismJS/prism/issues/165#issuecomment-47699782, https://github.com/PrismJS/prism/issues/180#issuecomment-28613947, https://github.com/PrismJS/prism/issues/231#issuecomment-48849176, https://github.com/PrismJS/prism/issues/257#issue-34122668, https://github.com/PrismJS/prism/issues/497#issuecomment-83185647, and the more recent one using npm https://github.com/PrismJS/prism/issues/966#issuecomment-379167653. See also this Github search: https://github.com/search?q=%22prism.git%23gh-pages%22&type=Code.\nSo... will this be considered a breaking change? I'm a bit worried after v1.14's mess.\n\nFinally, we do need to remember we are currently referencing the `gh-pages` branch in our code too, at least in [`download.js`](https://github.com/PrismJS/prism/blob/gh-pages/download.js#L13) and in [`examples.js`](https://github.com/PrismJS/prism/blob/gh-pages/examples.js#L9). We'll need to update all references when making the change.. I like this idea @LeaVerou, that way we don't break anything! :+1: . I agree with everything you said. I think we'll use `master` as the dev branch, use tags to release, and freeze gh-pages. And yes, we need to merge `gh-pages` into `master`.. The reaction on the last comment in https://github.com/jspm/jspm-cli/issues/1441 makes me think this issue has been solved. I'm closing it. Feel free to reopen if I'm wrong.. Thanks!. I could not reproduce the issue on the [Test drive page](http://prismjs.com/test.html). Can you provide an online example reproducing it?\n\n![https://puu.sh/tcStG/b7fd63df04.png](https://puu.sh/tcStG/b7fd63df04.png). Feel free to reopen if you can provide an actual example reproducing the issue ;). @mjrussell: thanks for reporting.\n`greedy: true` on the string pattern seems to be the right solution here, indeed. Could you provide the problematic edge case you tested, please?\n\n(Poke @hason: you might want to check this issue). As you can see in my commit above, the issue with # inside strings should be solved. That is, `foo: \"#bar\"` should get highlighted properly.\n\nBut we are still facing two issues here.\n\nThe first one, related to YAML, is the abusive use of that group `$|,|]|}` everywhere. I'm pretty sure there is a better way to handle those highlightings. (If we fix it, YAML would end up with the same behaviour as the other components, descibed below.)\n\nThe second one is a flaw in the current greedy behaviour, which can be reproduced with nearly every other component:\nJS:\n![https://puu.sh/tSVId/a394453b85.png](https://puu.sh/tSVId/a394453b85.png)\n![https://puu.sh/tSVKc/cd5b6e06ec.png](https://puu.sh/tSVKc/cd5b6e06ec.png)\n\nCSS:\n![https://puu.sh/tSVLM/8bea2e8705.png](https://puu.sh/tSVLM/8bea2e8705.png)\n![https://puu.sh/tSVNn/ba73a79f5b.png](https://puu.sh/tSVNn/ba73a79f5b.png)\n\neven LOLCODE:\n![https://puu.sh/tSVRB/9bf1245395.png](https://puu.sh/tSVRB/9bf1245395.png)\n![https://puu.sh/tSVSP/0dff84caa9.png](https://puu.sh/tSVSP/0dff84caa9.png)\n\n... and probably nearly all other components...\n\nThe greedy string, when processed, invalidates the previously matched comment (the large one, beginning at the middle of the string) but does not force it to be reconsidered. So even the smaller comment, the one that actually is to be highligted, is ignored...\n\nObviously, the `greedy` flag, how it is currently implemented, won't allow that.\n\nPoke @LeaVerou, @zeitgeist87: Should I open an issue for this? Will we go on [that](https://github.com/PrismJS/prism/pull/779) [road](https://github.com/PrismJS/prism/pull/424) [again](https://github.com/PrismJS/prism/issues/412)? Are we willing to improve the greedy behaviour?. Hi! Can you provide an online example reproducing this issue, please?. There's not much we can do to help without an online example reproducing this issue. I'm closing it.. Hi. I don't understand exactly what you're trying to achieve. Could you provide an online example reproducing the issue and explain the behaviour you'd expect?\n\nRegarding the WPD plugin, that's a great a idea, though it will require some smart thinking to implement ^^. You need to include the [components](https://github.com/PrismJS/prism/tree/gh-pages/components) for the languages you want to use. Or you can use the [Autoloader plugin](http://prismjs.com/plugins/autoloader/).\n\nThe thing is that the `prism.js` file you currently use is the one used on the website: it already comes bundled with a few components (Markup, CSS, JS, the File Highlight plugin). The standalone library is the `prism-core.js` component.. Thanks for your precise report! This should be fixed now.. Hi @calebeaires.\nNo, PrismJS has no formatting ability, and AFAIK this is not on the agenda.. Hi. In your example, the code is highlighted as bash, not as TypeScript.. Hi! Thanks for reporting. This should be fixed now.. Hi! Thanks for contributing!. Hi! I think this is a duplicate of #1080. If I'm right about this, then this issue is already fixed. Try using the latest version of [the JSON component](https://github.com/PrismJS/prism/blob/gh-pages/components/prism-json.js).. Hi! I guess you could create your own hybrid component by extending the `diff` component with the `csharp` one. Something like this : http://codepen.io/anon/pen/zNPpdb. @mAAdhaTTah It seems a bit like a niche usage, but why not. There is stuff to do on this PR though, there are changes related to `manual` that seem unrelevant here, and it will need examples, tests, etc. It seems we do have write access on the branch, so we _could_ update it ourselves.. I'd argue that titles are indeed important. That seems quite semantic to me.\n\nThere are many classes we use that are likely to already have styles: `tag` (on blog posts for example), `comment` (blog posts too), `symbol` and `entity` (quite generic terms too)... We can't take everyone's stylesheets into account. Those classes are semantic in the context of the languages they are used in.\n\nIf your own styles do not play well with Prism's ones, then you might just need to write a bit of CSS to fix this.. And I'm pretty sure @LeaVerou will agree with you.\n\nThe `important` class was initially used for the `!important` keyword in CSS. And the reuse of classes in Prism, useful to prevent constantly BC breaking all [existing themes](https://github.com/PrismJS/prism/tree/gh-pages/themes) (including the [\"non-official\" ones](https://github.com/PrismJS/prism-themes)), is already subject to debate and considered an issue (#1055). Anyway, I made my point.. Another issue is that, to be semantically correct in all languages, Prism would have to use a huuuge number of different classes, which do not currently exist in the themes stylesheets. The `title` class (markdown example) does not exist in the themes.\nOther languages use other vocabulary: verbs, adverbs, directives, flags, blocks, lists, tables, commands, labels, rules, macros, enums, registers, atoms, sigils, captures, parameters, filters, dates, conjunctions, mixins, keys, annotations, targets, vectors, matrices, constructors, shortcuts, maps, sequences... All those names should, semantically, have an associated CSS class in Prism's themes. But we can't do it the way we handle themes currently.. The recent issue #1119 made me think that you might want to use [this plugin](http://prismjs.com/plugins/custom-class/) to solve your problem. I'll close this issue, though, since there is no obvious way to solve it in the near future.. Hi! Thanks for reporting. It should be fixed now.. Done, sorry for the delay.. Thanks!. Thank you for taking a look into this!\nI think your idea should be able to fix even the template string example. After the part ``//\" ` sdsf ` `` is invalidated, we could reprocess only the remaining fragment, that is `` ` sdsf ` ``, which should highlight as a template string, right?. @zeitgeist87 Again sorry for the long time before review. This looks good to me. Thank you so much for digging into this.\n\nFeel free to merge when you can!. All supported languages with their associated alias are listed on the [homepage](http://prismjs.com/#languages-list) of the website. Those aliases can also be found on the [Examples](http://prismjs.com/examples.html) page. Is it what you were looking for?. Sorry for the delay. Thanks for contributing!. @zeitgeist87 Sorry for the looong time before review. This looks ok to me! ;) Feel free to merge.. Thanks for reporting. This should be fixed now, see 867ea42877cbdfb8b8d3645b1ccbf93308157d9f.. Hi! Can you provide a bit of context with this question, please? What exactly do you mean?. I'll reopen this issue if more context is provided.. Hi @emmanuelgautier. Is there any way we could keep when not on AMP pages? Like, could we detect we're on an AMP page and decide to not add it then?. I'd rather add it as a global option for Prism, the kind we have for `manual` highlighting. Something in the lines of:\n\n```html\n\nvar Prism = {\n    spellcheck: false\n};\n\n\n```\n\nSee https://github.com/PrismJS/prism/pull/1087 and https://github.com/PrismJS/prism/pull/1188. I actually never though about this... I guess @LeaVerou tought it would be convenient. This has been around for quite some time I believe. Now that I think about it, it only makes sense with `contenteditable=\"true\"`, so it must have been used initially in [Dabblet](http://dabblet.com/).. Wow, I actually didn't know about the `[^]` shortcut. Although it sounds clever, I'm afraid it might be less clear than the more usual `[\\s\\S]` and `[\\w\\W]` variants.\nI'm perfectly ok with replacing `[0-9]` with `\\d` though.\n\nWhat's your opinion about this @LeaVerou, @zeitgeist87 ?. @zeitgeist87, I agree. @valtlai, would you mind updating this PR to use one of `[\\s\\S]` or `[\\w\\W]` (we could definitely uniform all occurrences to one of those choices) to match any character, instead of `[^]` which might lead to confusion?. Thanks for contributing!. It this related to this issue? https://github.com/PrismJS/prism/issues/666. I'm pretty sure this regexp is used in at least one component in Prism, though I'm not on a computer to do a full search on the project. But I have a terrible memory so maybe I'm wrong... \nNevertheless, if it works as expected, I don't mind using it. . Haha we might get back to what I was saying in #810 in the end. Always highlight as operator + number.... This was apparently fixed in https://github.com/kennetpostigo/rdn/pull/10.. @LeaVerou, @zeitgeist87: I have no idea what this PR does or what impact it has, if any. I'll let one of you handle it.. Hi! I can't reproduce your issue on the [Test page](http://prismjs.com/test.html).\n\n![https://puu.sh/v2Kub/a60a3e04bc.png](https://puu.sh/v2Kub/a60a3e04bc.png)\n\nPlease reopen this issue if there is more to it.. I have no problem regarding a plugin doing so ;). Can you please provide an example reproducing your issue? The JSX component is supposed to work just as properly as any other.. Hi! Thanks for reporting. AFAICT, this issue is fixed. Using `import Prism from 'prismjs'` currently works as expected.. http://prismjs.com/plugins/custom-class/. Hi! Don't hesitate to override Prism's themes styles if they don't fit your requirements. Or provide a PR so that we can include this improvement in the project, if every maintainer agrees.. Hi! Thanks for contributing. Since you created this PR against the `master` branch instead of the `gh-pages` branch, I merged it manually.. Thanks for contributing!. We need to highlight what's inside the parentheses: e.g. min-width: 960px, etc. Don't we? . I think I remember there were issues with media queries highlighting at some point. We fixed it that way. Can't search commits history right now to confirm though. . Well, back on my computer, I've found [the commit](https://github.com/PrismJS/prism/commit/e25408898e247646d26d23bc7b744d822d427c5b), but there is no mention of any PR or issue. So maybe this was just an issue I noticed on my own.\n\nNevertheless, any improvement you can think of are welcome, as always ;). Hi! The Twig highlighting should do a decent job. . Hi! Chrome releases are really fast: Chrome 58 is already out. Can you still reproduce the issue on that last version? I took a look at Prism's website using it and couldn't notice any obvious performance issue.. Hi @gre! Can you please open a new issue with said code snippet so we can investigate?. Thanks for contributing!. Thanks for reporting.\nThe Keep markup plugin should now handle those cases properly.. Hi! I'm not exactly sure what you're trying to achieve. But released versions of Prism are available at [cdnjs](https://cdnjs.com/libraries/prism). Maybe you can use those files?. There is already a plugin for tinyMCE using Prism. It's called [Code Sample](https://www.tinymce.com/docs/plugins/codesample/). I guess you just need to include it in the plugins list, as shown in the linked documentation. You'll need to add the Prism's scripts and stylesheets in you page, too. As I said earlier, you could grab those directly from CDNJS if you want.. I tested the page [1] on Chrome using my Wiko Highway Star and could not reproduce the scrolling issue. It is buttery smooth on my device.. I'll close this issue, since it was not reproduced. If you keep experiencing scrolling issue and if you can provide reproduction steps, I'll reopen it.. Hi! This is a subtle one, but you're actually right.\nUnfortunately, the fix you propose won't work well with the Coy theme.. Hi, what language are you highlighting?. Thanks for reporting. This should be fixed now.. Thanks for reporting. I was able to reproduce the issue. It should be fixed now.. Please provide a description if this PR is supposed to do anything useful. . Thanks @uranusjr for digging out those issues ;)\n\n@bojone The solutions explained in those will fix your current problem. You might also wanna check the [Unescaped markup plugin](http://prismjs.com/plugins/unescaped-markup/).. Hi guys! Sorry for the delay. Thank you for contributing!. Thanks for reporting! It should be fixed now.. JavaScript in included by default in Prism, that's why it works out of the box.\nIf you want to highlight as JSON, you do need to include the JSON component somehow, though. See #1129 for example. This should solve your issue, let us know if it doesn't.. Thanks!. Hi @snakeman21! Thanks for reminding me of this long time missing feature. It's added now, and will be included in the next release.. Please let us know if you happen to reproduce it again ;). Thanks for reporting, the performance issue should be fixed now. (Though the Node tags are still not highlighted since Prism does not support comments in those.). Hi! Thanks for reporting! I can't reproduce the issue anymore on your example. Can you confirm it appears to be fixed?. Closing this issue, since it does not seem to exist anymore.. @LeaVerou Indeed, I can't reproduce the issue on the [Test page](http://prismjs.com/test.html). @grayghostvisuals, can you try updating your version of Prism? http://prismjs.com/download.html. Thanks!. Currently, you can use Prism this way:\n```html\n\n    <div>\n\n```\nWhen Prism runs, the class `language-markup` will be added on the `` tag.\n\nI'm pretty sure your change would break this behaviour, and set the class to `foobarlanguage-markup` instead of `foobar language-markup`.. I checked again this morning. In many other use cases, the extra space is perfectly useless and it would be fine to remove it. But I confirm your PR prevents Prism from properly adding a class when there is already a class on the `` or `` tag, and breaks the example I gave previously.\n\n. Hi! Thanks for reporting. I tracked the performance issue down to the `/` char in the string `\"Mismatched closing tag (expected \"`. Prism was checking for a regexp starting from this point and had a really hard time backtracking. It should be fixed now.. Hi! Could you give an example of what you mean by \"cURL language\" ? AFAIK it's not a language.... I see. The closest we have would probably be the Bash component. But I'm afraid it won't do such a great job. :/. Well, actually I expected something worse. The easy thing we can do to improve highlighting is to add the `curl` keyword to the list of common bash functions.. As previously stated, I've added `curl` to the list of common functions in the Bash component.\n\nIf you really want to highlight cURL the way Stripe does it, you can still take a look at their custom language definition: https://stripe.com/assets/compiled/js/sprockets-js-documentation-c4b3ec3ed7e62075f018.min.js.\n\n```js\n// Prism curl\nPrism.languages.curl = {\n  'curl': /\\bcurl\\b/,\n  'url': /https?:[a-zA-Z0-9:.?=\\/\\-_{}]*/,\n  'parameter': {\n    pattern: /[A-Za-z0-9\\[\\]-_]+ *(?=[=])/,\n  },\n  'value': [{\n    pattern: /([=])([A-Za-z0-9-_.]*)/,\n    lookbehind: true,\n  }, {\n    pattern: /([\"'])(\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n  }, {\n    pattern: /(\\-u )([A-Za-z0-9-_.{}]*)/,\n    lookbehind: true,\n  }],\n  'option': / *-[a-zA-Z]*\\b/,\n};\n```. Demo seems to work just fine! Thank you for contributing!. What is your exact Safari version, please?. Hi. Please provide on online example reproducing your issue.. There's not much we can do to help without an online example reproducing this issue. I'm closing it.. @LeaVerou Could you give a look at this PR? I know you have been quite reticent about changes regarding this extra-space in the past. Please tell me if you think this PR is worth it or not.. Yes, you're right, the only reason people want to remove it is \"aesthetic\".\nThat's what I thought you'd answer. ^^ So I'm closing this PR.. @florinpop17 Can you provide on online example reproducing your issue?. There's not much we can do without an online example, so I'm closing this issue.. @florinpop17 @megamindbrian At the moment, most plugins won't work on Node because they use the DOM (Line numbers and Keep markup are one of those).\n\nAre you trying to use those with some virtual DOM node modules or something?. @mAAdhaTTah Most plugin don't work in Node indeed. From a quick look:\n\n- **Autolinker**: Should work if the `before-highlight` hook is run manually.\n- Autoloader: Does not work and returns early. Requires DOM.\n- Command line: Does not work and returns early. Requires DOM.\n- Copy to clipboard: Does not work and returns early. Requires DOM.\n- **Custom class**: Should work.\n- **Data-URI highlight**: Should work if the `before-highlight` hook is run manually.\n- File Highlight: Does not work and returns early. Requires DOM.\n- **Highlight keywords**: Should work.\n- JSONP highlight: Does not work and returns early. Requires DOM.\n- Keep Markup: Does not work and returns early. Requires DOM.\n- Line Highlight: Does not work and returns early. Requires DOM.\n- Line Numbers: Does not work and returns early. Requires DOM.\n- **Normalize Whitespace**: Should work if the `before-sanity-check` hook is run manually.\n- Previewers: Does not work and returns early. Requires DOM.\n- **Remove initial line feed**: Deprecated, but should work if the `before-sanity-check` hook is run manually.\n- **Show invisibles**: Should work if the `before-highlight` hook is run manually.\n- Show language: Does not work and returns early. Requires DOM.\n- Toolbar: Does not work and returns early. Requires DOM.\n- Unescaped markup: Does not work and returns early. Requires DOM.\n- **WPD**: Should work.\n\nI left this issue open, because I know this is a common expectation from our users. Yet I think you are right, most of the plugins that do not work currently probably won't ever be compatible with Node in the future.\n\nRegarding a `loadPlugins` function, is it something that would be useful? They usually don't have any dependency.... I just merged #1188, fixing #1059. Let us know if you're still encoutering issues.. Thanks for contributing!. Nice! Thank you both for sticking around. Expect a new version release (1.10) during the week.. @zwilias @kachkaev And 1.10.0 is out and published on NPM! \ud83c\udf89 . Merged! Thank you for contributing!. I just released v1.7.0. @LeaVerou should publish it to npm soon.\n\nEDIT: Oh, it appears it is published already. Some kind of automation must be at play here. ^^ I'm closing this issue.. Thank you for contributing!. Hi! Could you be more specific about the issue you have with the operators?\n\nYou can find documentation on language creation on [this page](http://prismjs.com/extending.html).\n\nRegarding the addition of this to the official repo, I'm not sure \"Arduino\" can be considered as a language. If I understand correctly, this is just C++.\n\nThat being said, I think it's great that you're creating your own language extension to have it highlighted as you want it to be.. That's because you're loading two themes at the same time. Remove `prism.css` ;). @LeaVerou Do you have an opinion on this? Should we add support for this Arduino specific C++?. @LeaVerou Yes it's already what it does. I'll take that as a yes. ^^\n@eisbehr- Feel free to submit a PR, then! . Hi! Sorry for the long delay. I don't understand what you're asking here. Are you talking about the Nodepad2 software? How is it related to Prism? Please provide more details regarding your issue.. Merged! Thank you for contributing!. @wle8300 The updated highlighting for functions should match those two properties.. Hi! Thanks for reporting. It should be fixed now.. Hopefully before next week, I can't promise, though.. Hm... That's a really good point I did not tought about. I think you're right. Let's give ClipboardJS some time to fix this on their own, and if need be this PR would still be usable. I'm closing for now. Thank you for reviewing!. @LeaVerou @zeitgeist87 Any advice on the naming? I'm receiving mixed signals there. :'). @LeaVerou We must differentiate two cases where Prism might find itself inside a worker.\n1) When Prism itself creates a Worker for async highlighting.\n2) When the user decides to load Prism _from_ inside a Worker.\n\nThe core autodetects when it's in a Worker, but it only handles case 1. We need a param to handle explicitely case 2, so that we can skip attaching the listener for messages.\n\n. @Rob--W Unless I missed something in your explanation, I can't see how this will help us differentiate when Prism is loaded as a worker and when it's loaded with `importScripts`. In both cases, `location` will be an instance of `WorkerLocation`, won't it?\n\n@LeaVerou No, I can't think of any way to differentiate the two automatically.. @Rob--W Oh, ok, I get it now. That's smart, I don't know if it's a reliable enough solution to be considered the default behaviour, though.\n@LeaVerou Considering that loading Prism from inside a worker is probably an edge case already, I think requiring a manual configuration is not that annoying.. Ok, I went for the long explicit one: `disableWorkerMessageHandler`.. It looks like it is, as long as the correct grammars are loaded first.\n\n```js\nmarked.setOptions({\n    highlight: function (code, lang) {\n        return Prism.highlight(code, Prism.languages[lang], lang);\n    }\n});\n```. Prism has no way to autodetect the language currently. And it's not planned afaik.\nI guess you could also fallback to doing no highlighting whatsoever when the language is not specified.. Hi! Please provide an online example reproducing this issue.. Should be good now that #1206 is merged.. No need to be sorry at all. And a huge thanks for diving into this!.  P.S. Sorry for long response\n\nI can't blame you, can I? ^^\n\nIs the hook required? Not that I'm particularly against it, but since the plugin already runs in the `complete` hook and the highlighting occurs when the DOM is ready... do you have a use case where the `complete` hook can run before both plugins are loaded?. Looks good to me! Thanks for working on this!. I don't think I'll have time for Prism until next weekend. This PR is on my to-check list though . Ok, merged!. @aeoril Do you have an example page online reproducing the issue?. @aeoril The example page you provided does not work properly in Chrome desktop either.\n@mAAdhaTTah I'm pretty sure it's the same error as #1181 . @aeoril Yes the problem occurs only on Chrome 61+. Refer to #1181 from now on. I'm closing this issue as a duplicate.. Hi! The expected behaviour is the one in the code. The doc might need so clarification indeed. . Hi @mattdsteele. This is tricky. JS can easily be supported inside HTML because it is explicitely identified as JS (with `` tags). Here, your string could contain absolutely any language Prism supports, and there is no way for it to identify which one. I don't think Prism will provide support for this feature.. Hi! I can't test it right now, but I'm pretty sure we already alias \"javascript\" as \"js\". Have you tried using `language-js`?. Thank you for contributing!. You need to escape `<` as `&lt;`.. I think we use `textContent` to dynamically set the content of the code block on this page, so those chars can't be interpreted as HTML tags by the browser.. Thanks for reporting. It should be fixed now. It will be in next release.. Yes, it's `1.8.4`. I just released it now.. Hi @erinwild! Thanks for contributing.\nWould you mind adding/updating the tests for this (see http://prismjs.com/test-suite.html and existing tests: https://github.com/PrismJS/prism/tree/gh-pages/tests/languages/python).\nAlso, please run `gulp` on your local version to generate the minified version of the component.. While you're at it, could you also add the `nonlocal` keyword, requested in #1208 ?. Well, I can't say it's pretty. If it fixes the issue, that's ok for me, though. Hopefully this will be a temporary fix.. @erinwild Can you also add tests and minified version for this PR, please?. @jcubic It has been added now. ;). AFAICT this is an intended behaviour. The Line Highlight plugin doesn't add a line number to the highlighted line if the Line Numbers plugin is also loaded.\nPlease provide an online example if I misunderstood the issue.. No, the way the plugin works, you can not set the color of the highlighted line automatically. But you could use the [Keep Markup plugin](http://prismjs.com/plugins/keep-markup/) to manually achieve this effect.. I do reproduce the issue.\nAre you loading Prism asynchronously? If so, you must call `Prism.highlightAll()` manually once it's loaded.. Prism by default tries to highlight stuff once your page is loaded. If Prism manages to load before your page has finished loading, highlighting should work properly (I guess this scenario happens on mobile somehow). But if it loads after the page is loaded, it might not catch the event, and you'd have to trigger highlighting manually.\n\nIt's just a theory though, I don't know how your website works and handles file loading.... There is already a pending PR (#1174) for this, waiting for changes to be done. . Hi! Couldn't you use the `wrap` hook to do this?. Oooh ok, I see the issue, sorry. I guess you could override `Prism.Token.stringify` from the outside without having to modify the original code.\n\nYou idea is interesting though. Maybe there is too much logic done there and we should have a function dedicated just to the `return` part of this function, so that there is less to override. That could be a first step towards a more generic approach to renderers.. Actually, I played around a bit with this idea, and I realized it is much more powerful to override `Prism.highlight()` or manually call `Prism.tokenize()` and process the result. This is IMO the best way to achive this sort of custom rendering.. #1311 is now merged, so I'm closing this PR.. You could make a PR if you want EJS to be available directly from this repo, and on Prism website.\nYou'd have to add [tests](https://github.com/PrismJS/prism/tree/gh-pages/tests/languages) ([Test suite](http://prismjs.com/test-suite.html)), though.. Hi. This looks quite tedious... Flow syntax allows many many things, and it appears to be quite hard to highlight those precisely without breaking some of the normal JS highlighting.\n\nThe best I managed to come up with is the following:\n\nThe component would only highlight these types:\n\n- `number`, `Number`\n- `string`, `String`\n- `boolean`, `Boolean`\n- `Function`\n- `any`, `mixed`, `null` and `void`\n\nIt would highlight these keywords:\n\n- `type`, `opaque`, `declare`, `Class`\n- `$await`, `$Diff`, `$Exact`, `$Keys`, `$ObjMap`, `$PropertyType`, `$Shape`, `$Record`, `$Supertype`, `$Subtype`, `$Enum`\n\nIt would highlight `{|` and `|}` as punctuation.\n\nIt would *not* highlight generic types, or custom types.\n\nHere is what it would look like (those are examples from the documentation):\n\n![capture d ecran 2017-11-05 a 16 46 56](https://user-images.githubusercontent.com/565460/32416413-f6cc4364-c248-11e7-94ed-e897bd6a0428.png)\n\nWould it be good enough?\n\n. Just added support for Flow ;). The Keep Markup plugin is used to do exactly what your screenshot describes: keep the markup _and let the browser interpret it_.\nI think what you're looking for is the [Unescaped Markup plugin](http://prismjs.com/plugins/unescaped-markup/), which allows you to write HTML code without having to manually escape `<` as `&lt;`.. It seems to work just fine on my side:\n\n```html\n<link type=\"text/css\" rel=\"stylesheet\" href=\"themes/prism.css\" />\n<link type=\"text/css\" rel=\"stylesheet\" href=\"plugins/unescaped-markup/prism-unescaped-markup.css\" />\n<link type=\"text/css\" rel=\"stylesheet\" href=\"plugins/command-line/prism-command-line.css\" />\n<link type=\"text/css\" rel=\"stylesheet\" href=\"plugins/line-numbers/prism-line-numbers.css\" />\n\n<pre><code class=\"language-markup line-numbers\"><!--<div class=\"foo\">\n    <span class=\"bar\"></span>\n</div>--></code></pre>\n\n<pre><code class=\"language-markup command-line\"><!--<div class=\"foo\">\n    <span class=\"bar\"></span>\n</div>--></code></pre>\n\n<script type=\"text/plain\" class=\"language-markup line-numbers\"><div class=\"foo\">\n    <span class=\"bar\"></span>\n</div>\n\n<div class=\"foo\">\n    <span class=\"bar\"></span>\n</div>\n\n\n\n\n\n```\n\n![https://i.imgur.com/EQjEHbZ.png](https://i.imgur.com/EQjEHbZ.png). > In some cases we could workaround it, by defining language-specific rules [...] but it is not always possible, as some languages are not wrapped into a language-specific class.\n\nIs that true? Do we have cases where a language is not wrapped into a language-specific class?\n\n> all the languages get highlighted only if the outermost element has the \"language-php\" class;\n> associating the \"language-html\" class to the outermost element, will cause the PHP code to be not highlighted.\n\nIs that an issue? In Prism, we consider PHP as the \"parent\" language here. PHP code _usually_ might contain HTML code. While the opposite is not true. HTML code can appear with many server-side languages and templating languages.\n\n> there is no \"language-html\" class Prism.js applies to the HTML code. It means that is impossible defining HTML specific classes.\n\nThe way the PHP component is defined, all classes used for HTML parts are unique to HTML, and all classes used for PHP parts are unique to PHP. Highlighting `.language-php .token.tag` will highlight only HTML tags in PHP.\n\nI think I'm missing your point here...\n\nRegarding your last comment, though, the answer is provided in the [FAQ](http://prismjs.com/faq.html#how-do-i-know-which-tokens-i-can-style-for). This should give you everything you need to customize the CSS as much as you want.\n. I just tested the code linked on the [Test drive page](http://prismjs.com/test.html) and it works ok with language set to \"JavaScript\", or language set to \"React JSX\". So I suspect this is an issue on your side.\n. Even more, if I go on the Live demo and run the following code in the console:\n\n```js\ndocument.querySelector('code').classList.add('language-javascript');\nPrism.highlightElement(document.querySelector('code'));\n```\nthe highlighting works as expected.. Thank you for reporting. The version used has been updated.. Indeed you do have the following CSS somewhere on your page:\n\n![https://i.imgur.com/TeSdGla.png](https://i.imgur.com/TeSdGla.png)\n\nYou could add `:not(.token)` to it, maybe.. Hi. This sounds more like a Jira issue than a Prism issue.. I'm not sure what it was for... But I couldn't find any explicit browser issue without the `height` property, so I guess it's ok to remove it. Thanks!. Thanks for contributing!. > The doc should be fixed though.\n\nDo you have an online example reproducing the issue please?. This sounds very inconsistent indeed. But the code you downloaded should be just fine. And without an example that can reproduce the issue consistently, we won't be able to fix the problem if any.. Hi! Thanks for contributing. Could you run `gulp` to generate the minified versions (and the prism.js file) please?\n\nAlso, can you update the [test file for CSS properties](https://github.com/PrismJS/prism/blob/gh-pages/tests/languages/css/property_feature.test) with an example using unicode characters, and make sure it passes? You can use `npm test` to run the tests.. > Do I need to install Gulp and NPM, eh?\n\nYes, indeed.. You need to `cd` to the local directory and run `npm install`.\nOnce it's done, you should be able to run `gulp` and `npm test`.. Awesome thanks! Can you add the `prism.js` file to the PR? It should have been modified when you ran `gulp`.. Great! Looks good to me. Thanks again for contributing!. No it's not possible. Can you describe a specific use case where you would need it?. It seems to me the kind of highlighting you're looking for would need to have a certain \"understanding\" of the code. Prism, which uses only regexps, can hardly achieve this granularity. Unless I'm missing something, I don't think it's doable.. Maybe you'd be interested in the `after-tokenize` hook (defined [here](https://github.com/PrismJS/prism/blob/gh-pages/components/prism-core.js#L280-L282)). It would allow you to do all sorts of things with the generated tokens, including creating new ones or destroying others.\n\nThis allowed us to add [support for plain-text in JSX](https://github.com/PrismJS/prism/blob/gh-pages/components/prism-jsx.js), for example. The other use we currently have is for [templating languages](https://github.com/PrismJS/prism/blob/gh-pages/components/prism-markup-templating.js#L34), where tokens are inserted after highlighting the markup code.\n\nThis hook makes it possible to achieve some sort of contextual highlighting.. Perfect! Thanks!. Yes! Thanks for contributing!. I'm not exactly sure why, but it appears the \"courier new\" font-family that you have on a `span {` rule somewhere in your styles messes up with the rendering height of your code.\n\nIf you really want to apply this font to your code blocks, you should consider applying on the `code` elements, so that the line-height stays consistent.. Yes, the one you commented out was the one I was refering to.\n\nCan you try also adding a `display: block` on the selector `pre.line-numbers > code`?. You can adjust the styling if you want. But I can confirm lines and codes are actually aligned on your online version.\n\n![https://i.imgur.com/oORZqVk.png](https://i.imgur.com/oORZqVk.png)\n\n. Hi, sorry for the delay.\nBecause `code`s are `inline` by default, their total height is not exactly `line-height * number of lines`, leading to some mispositioning of the elements holding the line numbers.\n\nI think the fact that you use `line-height: 1` instead of our default `1.5` on `code`s and `pre`s somehow increases the visual difference and makes the problem easier to spot in your use case.. I'm closing this issue, since your specific use case is fixed, and #1132 already describes this problem more generally.. Removing the `greedy` option on strings will likely lead to wrong highlighting on code like `\"foo // bar\"` where it will be interpreted as a comment instead of a string.\n\nRegarding you initial issue, aren't those tags meant to be replaced with something else, if there are not part of the actual code you want to highlight?. Ok I see. Well, I can't think of a native option that would make Prism just ignore those tags. So if the workaround you found works, it's probably your best bet here.. Thanks for reporting! Should be fixed now.. It's a bit hacky, but assuming `myNode` is a `` element inside a `` element, and one of them has the `line-numbers` CSS class, you should be able to trigger the line numbers plugin with:\n\n```js\nPrism.hooks.run('complete', {\n    code: html,\n    element: myNode\n});\n```. You need to run the hook after having set innerHTML.. I think you can keep the same code. Just make sure you have a proper `data-line` attribute on the ``.. Do you have on online example reproducing the issue?. Thanks for reporting. It should be fixed now. Also take a look at https://github.com/PrismJS/prism/issues/1236#issuecomment-347778525.. Thanks for reporting. It should be fixed now.\n\nNote, though, that Prism will still fail on other cases. AFAIK JSX can contain almost all JS has to offer in those tags, and matching everything would be really complicated with just regexps.\n\nExamples that will fail, and I think we won't fix, include:\n```jsx\n// Spread with anything other than a variable or a simple property access\n\n```\n```jsx\n// Nested objects in attribute value\n\n```\nI'm not even sure those are valid JSX example, but I do know they would fail.. @benjaminBrownlee Or you could also set `white-space: pre-wrap` in CSS to enable line wrapping in your code blocks.. @freakmaxi Can you please fix the example so that it's like [all the others](https://github.com/PrismJS/prism/tree/gh-pages/examples)? (Add a title, explicitely state which class to use, add subtitles listing the main features of the component with examples in code blocks, etc.). Thanks for contributing!. Nice catch! Thanks for reporting!. Thank you for reporting! It should be fixed now.. You have conflicts to resolve now @bazooka07 \nApart from this, the PR looks to me. I'll wait for your approval too, @mAAdhaTTah, since you're around.. Don't worry it's ok. I solved the conflict locally. Thanks for contributing!. LGTM, thanks!. @BlueCocoa Nice! Looks good enough to me, I'm merging. Thanks for contributing!. Hi! You can change the wrapping behaviour in Prism by simply overriding the `white-space` CSS property on `` and `` tags.. Hi! Your post is really messy, I can't even understand your problem. I'm closing this issue: if you still have a problem, please open a new one, providing an online example reproducing this issue, and appropriate code blocks (if needed), properly formatted.. Hi!\n\n> I'd gratefully accept tips or advice on the above.\n\nThis looks pretty good to me. Note that you can remove all the `g` flags as Prism will not need them.\nAlso, the character `*` does not need to be escaped when it appears inside a character class. `[^\\*\\s]` can be written `[^*\\s]`.\nI wonder if the `$` is useful in `.*$`. All chars should consumed until the end of the line anyway, because of the default greediness of the `*` quantifier.\nYou might want to consider avoiding arrays in your definition unless you can't do without them. `[ /^\\/\\/\\*.*$/mg, /^\\*.*$/mg ]` can probably be written as `/^(?:\\/\\/)?\\*.*$/mg`. Same thing for the punctuation feature.\n\n> However, I'm unclear what else I need to do.\n\nYou've listed the essential steps already. However, it's better if you can provide a PR that includes two more things:\n- an example file (you can take a look at [all the other ones](https://github.com/PrismJS/prism/tree/gh-pages/examples) to see the usual format) \n- tests for every token you've defined (you can read the [Test suite](http://prismjs.com/test-suite.html) page for information, and look at the [existing ones](https://github.com/PrismJS/prism/tree/gh-pages/tests/languages))\n\n> Should I coin new tokens?\n\nNow that's a tough one. My answer _should_ be \"Yes, your classes must be semantically appropriate and you do need to update all themes accordingly indeed\". Unfortunately, this is hardly maintainable (even more considering the [non-official themes](https://github.com/PrismJS/prism-themes)). We do have an open issue to address this problem (#1055) but haven't come with an appropriate solution yet.\nFor the time being, I would suggest you use the `alias` key to add additional classes to your tokens. That way, your tokens will still have one semantically appropriated class, but also another less-semantic class that will be used for the styling.\nFrom the `alias` section in [Extending Prism](http://prismjs.com/extending.html):\n> This can be useful, to combine the styling of a well known token, which is already supported by most of the themes, with a semantically correct token name.\n. > since I had chosen to perform highlighting asynchronously, that meant [...] that my language definition needed to be included in prism.js.\n\nYou're right, the async highlighting uses the main `prism.js` file in a worker, and all languages must be included within it.\n\nWe usually consider most people will use the [Download page](http://prismjs.com/download.html) to craft their own bundle of Prism, including all the languages they want to highlight. Doing this, they'll end up with a single file, indeed.\n\nWe might want to update the documentation somewhere to help new users address the issue you faced.. LGTM, thanks!. I assume you're talking about the configuration syntax for Terraform, known as HashiCorp Configuration Language (HCL). For future reference, here are the [syntax documentation](https://www.terraform.io/docs/configuration/syntax.html) and the [interpolation documentation](https://www.terraform.io/docs/configuration/interpolation.html).. @zeitgeist87 Great! Looks good to me now. \ud83d\udc4d. The change looks quite harmless. Even if it does not address the different themes, it can be a nice shortcut to access the default theme.. Duplicate of #1256, I'm closing this one.. Your pattern for `html-template-string` does not allow backticks except for the surrounding ones. You could change your regexp to allow one or two levels of nesting, but you can hardly make it infinite, because JS regexps aren't recursive indeed. . @ORESoftware How are you including this CSS file? Are you sure you use a ``? The error you get in the console makes me think you included it like a JS file instead.\n  . All the main themes are in a different stylesheet each. Just load the one you want. https://github.com/PrismJS/prism/tree/gh-pages/themes . Hi!\nThere was discussion about not restricting the plugin to the Markup component in #892. But it appears no one had a chance to work on this yet.\nThe trick used in the SO answer you linked is smart too. It can be a workaround for the time being.\n\nI'll try to dig into this issue in the near future.. Hi @paul-hammant! I like this idea.\nThe query string version of this already exists indeed. The URL is included at the first line of the generated JS and CSS files, for easy redownload. I guess an hash version should be ok too (and would allow for a nice onhashchange event handling), as long as we keep backward compatibility for the query-string version on page load.\nWould you like to give it a try and make a PR for this?. Hi @garretwilson. I don't think we would include the SURF format support directly inside Prism, since as you say it, there might not be a huge demand for it at the moment.\nI'll let this issue open, though, and I might take a look at it at some point.. Wow I must have failed miserably to explain myself because you completely misunderstood my answer apparently.\nAll you need to highlight SURF is a grammar definition. It does not need to be part of the official Prism repo to work properly.\nSo, even if we probably won't add it to the official repo, I will let this issue open so that I (or someone else) can make said grammar file so that you can use it to highlight SURF on your website.\nHope it makes more sense now. . @garretwilson Here, give this grammar a try. You can obviously change/remove the aliases if you want to adjust the styling.\nNote that I'm not willing to do any kind of maintenance for this. Also, I do not ask for any money. This is just to lend a hand.\nIf SURF becomes somewhat popular at some point, I'd be glad to reconsider adding it to the main Prism repo.\n\n```javascript\nPrism.languages.surf = {\n    'comment': /!.*/,\n    'uuid': {\n        // &5623962b-22b1-4680-ae1c-7174a46144fc\n        pattern: /&[\\da-f]{8}-(?:[\\da-f]{4}-){3}[\\da-f]{12}/i,\n        alias: 'number'\n    },\n    'email': {\n        // ^jdoe@example.com\n        pattern: /\\^[\\w-]+@[\\w-]+\\.[a-z]{2,6}/i,\n        alias: 'string'\n    },\n    'phone': {\n        // +12015550123\n        pattern: /\\B\\+\\d+/,\n        alias: 'number'\n    },\n    'binary': {\n        // %Zm9vYmFy\n        pattern: /%[a-z\\d+/]+/i,\n        alias: 'string'\n    },\n    'string': {\n        pattern: /([\"'])(?:\\\\[^\\r\\n]|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n    },\n    'regex': {\n        pattern: /\\/(?!\\/)(\\[[^\\]\\r\\n]+]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}/,\n        greedy: true\n    },\n    'label': {\n        // |label| <|tags|> |\"Ids\"|\n        pattern: /\\|[^|]+\\|/,\n        greedy: true,\n        alias: 'variable'\n    },\n    'iri': {\n        /*\n        \n        <&5623962b-22b1-4680-ae1c-7174a46144fc>\n        \n        <^jdoe@example.com>\n        \n        <+12015550123>\n        \n        */\n        pattern: /<[^>]+>/,\n        greedy: true,\n        alias: 'variable'\n    },\n    'datetime': {\n        /*\n        @2017-02-12T23:29:18.829Z\n        @2017-02-12T15:29:18.829-08:00[America/Los_Angeles]\n        @2017-02-12T15:29:18.829-08:00\n        @2017-02-12T15:29:18.829\n        @2017-02-12-08:00\n        @2017-02-12\n        @2017-02\n        @2017\n        @--02-12\n        @15:29:18.829-08:00\n        @15:29:18.829\n        */\n        /*\n        instant |\n        year[-month[-day[Ttime[.prec]][+-offset[tz]]]] |\n        --month-day |\n        time[.prec[+-offset]]\n        */\n        pattern: /@(?:\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.\\d+)?Z|\\d{4}(?:-\\d\\d(?:-\\d\\d(?:T\\d\\d:\\d\\d:\\d\\d(?:\\.\\d+)?)?(?:[+-]\\d\\d:\\d\\d(?:\\[[^\\]]+])?)?)?)?|\\d{4}(?:-\\d\\d)?|--\\d\\d-\\d\\d|\\d\\d:\\d\\d:\\d\\d(?:\\.\\d+(?:[+-]\\d\\d:\\d\\d)?)?)/,\n        alias: 'number'\n    },\n    'type': {\n        pattern: /(\\*)(?:[a-z\\xA0-\\uFFFF][\\w\\xA0-\\uFFFF]*-)*[a-z\\xA0-\\uFFFF][\\w\\xA0-\\uFFFF]*(?=:)/i,\n        lookbehind: true,\n        greedy: true,\n        alias: 'variable'\n    },\n    'boolean': /\\b(?:true|false)\\b/,\n    'number': /[#$]?-?\\d*\\.?\\d+(?:e[+-]?\\d+)?/i,\n    'operator': /\\*/,\n    'punctuation': /[=:;,[\\](){}]/\n};\n```\n\nIf it fits your needs, feel free to close this issue.. Yes you just need to include it after the main Prism script. \nFor documentation, you can take a look at this page: http://prismjs.com/extending.html. @LeaVerou, @zeitgeist87, thanks!\nYes, there are definitely languages using angle brackets out there. First of all, languages that work with HTML, such as PHP, ASP, Handlebars, Smarty, Twig, JSX, Markdown, Textile, etc. Also, Wiki markup, syntaxes like `vector` in C++ that are quite common, or even `s` in Perl... and probably other use cases I can't think of. There is a real need for this. :). Hi! The Examples page uses the Github API to provide the examples. You'll have to temporarily edit the URL in [`examples.js`](https://github.com/PrismJS/prism/blob/gh-pages/examples.js) to set it to your repo to see your new language working properly on this page. . Hm there should be nothing special to do to make it work on this page... You did add your component to the `components.js` file right? . @davidgatti Ok so I double-checked and I can confirm there is nothing special to do for the test page to work. But maybe the page is not doing what you expect it to do. It's a simple page where you enter text in the textarea at the top, and it will be highlighted just below using the selected language.. Hi! This component depends on the [BASIC component](https://github.com/PrismJS/prism/blob/gh-pages/components/prism-basic.js). You need to include it before the VB.NET component.. Hi. Could you be more specific? Maybe add an online example reproducing the issue? . I'm sorry, Prism is a syntax highlighter, not a markup language nor a Markdown interpreter. We do not provide such a feature.. Hi! Thanks for contributing. Could you please keep the keywords in alphabetical order?\nAlso, please run `gulp` to generate the minified version of this file. \nFinally, could you update [the test](https://github.com/PrismJS/prism/blob/gh-pages/tests/languages/cpp/keyword_feature.test) to reflect those additions? You should run `npm test` to make sure they still pass. . Thanks! Please do the same for your other PRs \ud83d\ude09. Thanks!\n(The `prism.js` file is used on the website, it's a bundle containing only a few components. It does use C-Like but does not use C++, that's why it wasn't changed here.). Thanks again for contributing.\nI'm a bit worried though when it comes to making changes to the `c-like` component, since it's used by _many_ other components.\nSo I did a thorough check of each language using it, to see whether or not they support binary literals. The first thing that surprised me is that [Standard C does not seem to support binary literals](https://stackoverflow.com/a/15114188/1980551). AFAICT, although they are supported in GCC, they were only [added in C++14](https://stackoverflow.com/a/2612556/1980551). Therefore, I think they should be added to the `cpp` component instead of the `c` component.\n\nHere follow the results of the current support state for binary literals in C-like languages in Prism.\n\nComponent | Support for binary literals | Redefinition of `number` | Justification for redefinition | Highlighting support in Prism\n-- | -- | -- | -- | --\n**JavaScript** | Yes | Yes | Binary literals, NaN, Infinity | Yes\nJavaScript > **ActionScript** | Yes | No | | Yes\nJavaScript > **CoffeeScript** | Yes | No | | Yes\nJavaScript > **Flow** | Yes | No | | Yes\nJavaScript > **N4JS** | Yes | No | | Yes\nJavaScript > **Pug** | Yes | No | | Yes\nJavaScript > **React JSX** | Yes | No | | Yes\nJavaScript > **TypeScript** | Yes | No | | Yes\n**C** | [No](https://stackoverflow.com/a/15114188/1980551) | Yes | `/[ful]/` suffix | No\nC > **Bison** | No | No | | No\nC > **C++** | [Yes](https://stackoverflow.com/a/2612556/1980551) | No | | **No**\nC > C++ > **Arduino** | Yes | No | | **No**\nC > **Objective-C** | No | No | | No\nC > **OpenCL** | No | No | | No\n**C#** | [Yes](https://stackoverflow.com/a/23546326/1980551) | Yes | Adds `f` suffix, drops `e` notation support (?). Should support optional underscores. | **No**\n**D** | Yes | Yes | Binary literals, `/[ulfi]/` suffix | Yes\n**Dart** | No | No | | No\n**F#** | Yes | Yes | Binary literals, `/y|uy|s|us|l|u|ul|L|UL|I/` suffix | Yes\n**GLSL** | No | Yes | `/[ulf]/` suffix | No\n**Go** | [No](https://github.com/golang/go/issues/19308) | Yes | `i` suffix | No\n**Groovy** | Yes | Yes | Binary literals, underscores, `/[glidf]/` suffix | Yes\n**Haxe** | No | No | | No\n**Java** | Yes | Yes | Binary literals, floating-point hexadecimal, `/[df]/` suffix | Yes\nJava > **Scala** | No | Yes | Adds `/[dfl]/` suffix, drops binary literals | No\n**Jolie** | No | Yes | Restricts to decimal numbers | No\n**Kotlin** | Yes | Yes | Binary literals, `/[fFL]/` suffix | Yes\n**nginx** | Yes ? | No | | Yes\n**PHP** | Yes | No | | **No**\n**Processing** | No | No | | No\n**Protocol Buffers** | No | No | | No\n**Qore** | Yes | Yes | Binary literals, floating-point hexadecimal, `/[df]/` suffix | Yes\n**Reason** | No | No | | No\n**Ruby** | Yes | No | | **No**\nRuby > **Crystal** | Yes | Yes | Underscores, `/[uif](8|16|32|64)/` suffix | **No**\nRuby > **Haml** | Yes | No | | **No**\n**Swift** | Yes | Yes | Binary literals, underscores | Yes\n\nSo, as you can (hopefully) see from this table, there is a number of languages that do not have support for binary literals and do not override the definition of the `numbers` pattern inherited from the `c-like` component. This means adding support for binary literals in the `c-like` component would add unwanted support for them in those languages, and I don't think we want this to happen.\n\nI'm closing this PR. If you want, feel free to create a new one to add support for binary literals in the `cpp` component instead (by redefining the `numbers` pattern entirely).. Hi! Thanks for contributing.\n\nThe only one I'm \"worried\" about is `components.js`. It is the only file that currently holds the information on which component depends on which other component. And we do know that some users might rely on it to get the list of dependencies.\n\nThere was an explicit request for this in https://github.com/PrismJS/prism/pull/1108 (this specific issue was also asking for the `/tests/helper/components.js` file, so we should not ignore this one too).. Hi @papandreou! Thanks for working on this.\nFrom a quick look, this seems quite complete to me. I'll have to give it a try before merging though.\n\nI think running `gulp` should make changes to the Show Language plugin. Could you include them in the PR?\n\n@ScottHelme Let me know if you're ok with this being merged instead of #1016. Note that @papandreou referenced you as the \"owner\" of the languages. This means we expect you to do some kind of maintenance if future issues occur on these components. Please discuss it if @papandreou should have this responsability instead.. Thank you both for contributing!. Looks good to me!. Thanks for contributing!. Hi! Could you provide us with on online example reproducing the issue so we can investigate? . I think this is a bug with the Line Numbers plugin, that has already been fixed. Please grab the last Prism version from your redownload URL: http://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript+c+bash+cpp+java+python&plugins=line-numbers. You should include it, yes. . @fyrkant Could you add an example file for TSX, following the format used in [existing examples](https://github.com/PrismJS/prism/tree/gh-pages/examples)?\n\nAlso, could you please move the component up in the `components.js` file, so that the alphabetical order is based on the `title` value instead of the key. I know this is kinda counter-intuitive, but it's the way we did with JSX, so let's keep it consistent.\n\nFinally, you need to merge/rebase the `gh-pages` branch to fix the conflict. Your branch is a few commits behind, and the Show Language plugin has been modified in b08cae5603ac0a594814e7c88e9fa60f001cf00c.. I think the issue is caused somehow by these two rules in the CSS.\n\n![8b0gswu](https://user-images.githubusercontent.com/565460/35823528-1e7b8cb2-0ab0-11e8-9c89-4cb275d19848.png)\n. It behaves as if setting `::(moz-)selection` (at all, even with no styles defined) entirely replaced the default styles.\n@MaxCCC No it won't be fixed in Prism, because AFAICT, this is not a Prism bug. The default theme in Prism [applies a background on the selection](https://github.com/PrismJS/prism/blob/gh-pages/themes/prism.css#L33) so the issue does not occur by default.\n\nI think you should create an issue in the [Velox](https://github.com/dreyacosta/velox) repo, because [there lies the incriminated CSS](https://github.com/dreyacosta/velox/blob/master/assets/stylesheets/velox.css#L754).. Hi! Thanks for reporting! Can you reproduce the performance issue on the [test page](http://prismjs.com/test.html)? All your examples seem to perform ok to me, there. If so, maybe make sure you're using the last version of the JSON component.. Hi @idleberg! Thanks for contributing again!\nCould you please not remove the `?:` parts? They were intended, as all those captures are not required.\nOnly the two occurrences of `(^\\s*)` are required to be captured for the `lookbehind` feature to work.. You misunderstood me. The `?:` should **not** be removed.. Hm... The global diff on the PR tells differently.\nAre you working from an up-to-date branch? The `?:` are in [the current NSIS file](https://github.com/PrismJS/prism/blob/gh-pages/components/prism-nsis.js), but are not in your first commit (a98c16b3e76f5a7320e22bcc23d3a13c14b0d2df).. Hi! Thanks for reporting. I don't reproduce the issue on the [test page](http://prismjs.com/test.html). Can you make sure you're using the last version of Prism please? . The key difference would probably be the addition of the `greedy` key on the `string` pattern, rather than a change in the `comment` pattern. Please keep us informed if the issue is fixed. . Thanks for reporting! It should be fixed now.. Thanks and sorry for the all the confusion in #1285 ^^\nCan you please remove `yarn.lock` from this PR (because it is unrelated to the NSIS changes) and run `gulp` to generate the minified version of the component?. Great, LGTM! Thanks for contributing!. Thanks for reporting! Should be fixed now.. Hi @rafalwrzeszcz. Thanks for reporting. I was unable to reproduce the issue, though. https://codepen.io/anon/pen/xYrXzz. Closing this issue, since it could not be reproduced.. Hi. I guess this could be made the same way the [syntaxhighlighter plugin was made](https://github.com/sharpchi/moodle-filter_syntaxhighlighter). The thing that might be tricky is that Prism does not autodetect languages.. Hi! Thanks for reporting.\nWhat do you think @vkbansal? Can we fix or improve plain text support in JSX markup tags?. Fixed in PR #1357! :tada: . Hi. Please give us an online example reproducing the issue, so that we can investigate.. It seems that you're triggering the highlighting while the elements to be highlighted are not displayed on the page. This is not compatible with the Line numbers plugin, at least with the line wrap support (I think the problem would not occur if there wasn't a `white-space: pre-wrap` set).\n\nThe easy solution would be to call `Prism.highlightAll()` manually once the page has been loaded _and displayed_.\n\nEDIT: More specifically, you could probably call `Prism.highlightAll()` in the callback for `main.fadeIn()`. . I can assure you that calling `Prism.highlightAll()` fixes the issue (you can even try in the devtools' console). You just need to call it at the right time.. Sorry for the long delay! And thanks for contributing!. @akirak No worries. I noticed that some patterns are not handled by the official themes. It's not the first component doing so though, and it's ok if some parts are tagged but not styled. I'll just check the appearance once the PR is ready to be merged and maybe we'll make some adjustments.  We might also want to add a comment with a link to your original repo, to credit your original work and in case some users are interested in using the Dracula theme you made.\n\nThe transpilation to ES5 should not be that tedious in this case: you're really just using tiny bits of syntactic sugar. Transforming `const` to `var`, fat arrows to regular functions, and template strings to good old string concatenation should be pretty straightforward.\n\nI understand the naming limitation you had. Maybe we can still add `emacs` as an alias, since it seems to be the main scripting language used by this editor.\n\nThanks for showing up on the PR anyway! I hope @JuanCaicedo can take it to a mergeable state. :). @JuanCaicedo Note that I've just updated the `components.js` file to fix the code style. You'll have to merge `gh-pages` and fix the conflicts.. @JuanCaicedo Yay! :tada: . Hi! Could you provide an online example reproducing the issue so that we can investigate?. Hi. You need to [call the highlighting manually](http://prismjs.com/extending.html#api) after your modal is open and its content is set.\n\nhttps://jsfiddle.net/2uyj5ykg/12/. Hi! Can you provide on online example reproducing this issue please?. Closing this issue, since there is nothing we can do without an example reproducing it.. Hi! Can you provide on online example reproducing the issue, so that we can investigate, please?. Are you sure you don't have some sort of cache? I just tested the link you gave in Chrome 64 on Windows 7 and could not reproduce this issue. (Unfortunately I did not have the chance to test it before you made the update, so I can't tell for sure the issue was reproduced before that point.). From the \"redownload\" URL that appears at the top of your `prism.js` file, I think you somehow did not include those plugins in your download (or the download page is broken, which would suck). Can you please try downloading it again and double check your selected plugins?. Why can't you see the buttons?\n\nThe redownload URL is at the top of both the JS and the CSS files, as you can see partially selected in this screenshot:\n\n![https://i.imgur.com/H4AgOzY.png](https://i.imgur.com/H4AgOzY.png). Alright, this looks good to me. This is the content you need to download. You said you could not see the download buttons, why is that?. Is it something that happens on one browser only or on all of them? Did you have the chance to try?. This is really weird... I can't reproduce in any of them. If you manage to find any clue that could help us understand this new issue, please let us know! (Maybe an extension that you would have on both browsers? An antivirus thing maybe?)\n\nDid you manage to copy-paste the code to make your page work properly again?. Here you go: [prism.zip](https://github.com/PrismJS/prism/files/1741416/prism.zip)\n. Glad this is fixed. I'll close the issue. If you happen to understand the cause for the disappearing buttons, please let us know.. Hi! I could not reproduce your issue on Edge 16.\nBut I reproduced it in IE11 and lower, where `matches` is not supported in its unprefixed form. We should probably use `msMatchesSelector` as a fallback for those browsers (IE9-11).. Hi! I fixed it in a direct commit (not a PR). It should work properly on `gh-pages` and I'll make an official release this week. . You should be able to make it work with something like:\n\n```js\nvar Prism = {\n    disableWorkerMessageHandler: true\n};\nimport Prism from 'prismjs';\n// or self.importScripts('prism.js');\n```. @tvooo's answer looks like an appropriate solution to this problem. I'm closing this issue.. Yes, it's exactly what I mean. It's clearer,  expressed like this, thanks ^^. @LeaVerou well no it's not a bug, that's precisely my point here. It is an case that is explicitly not handled by the behaviour I described in the first post.\nBut it does _look_ like a bug.\n\nChanging the order of the patterns won't help here AFAICT. But maybe there is a better algorithm... . I'm afraid we would face the same issue (although I agree the way the component is done currently differs from our other embedded languages).\n\nCurrently, the `tag` pattern is already before the `keyword` pattern (since Markup is extended with JS and not the opposite). But the `tag` pattern only matches the part between an opening and a closing brackets (`<` `>`).\nHere, we need to match the contents of the tags, and this can include an infinitely deep nesting of children tags.\n\nQuick list of ideas I already tried:\n- We could match between an opening tag and a corresponding closing tag, but this would still fail on nested ``s for example. And it would require using `rest` to recursively highlight the inner tags that would have been included in the `plain-text` match.\n- We could match between any tags (opening or closing), but this would be too greedy and would fail on `a = foo; b = bar;` think `; b = ` is plain text.\n\nI honestly think we can't get a perfect result here. So the following question would be: is it worth adding partial support as shown in the screenshots in the PR, or it is better if we assume Prism can't match plain text in JSX?. Closing this PR in favor of #1357.. @mAAdhaTTah @arxeiss Shouldn't we check for the existence of the wrapper so that calling Prism highlighting multiple times on the same block does not add multiple toolbars? (Condition on line 62 suggests this case was handled before). I think it's OK if we don't handle this in a generic way for now, cause we don't need other wrappers. . Hi! There is no real solution to make it infinitely recursive, because JS regexps can't do this.\n\nThe better you can do might be to allow for a certain number of recursion levels. With your square brackets example, that would be something like:\nOne level deep: `/\\[[^\\[\\]]+\\]/` will match `[X]`\nTwo levels deep: `/\\[(?:\\[[^\\[\\]]+\\]|[^\\[\\]])+\\]/` will match `[X[X]]`\nThree levels deep: `/\\[(?:\\[(?:\\[[^\\[\\]]+\\]|[^\\[\\]])+\\]|[^\\[\\]])+\\]/` will match `[X[X[X]]]`. @CoenraadS Yes, PHP does have recursive patterns. But we're doing JS here. ^^. @mAAdhaTTah Could it be inherited, like the `language-XXX` class is? Therefore any ancestor of a `pre` or `code` could provide the translations attributes.. Yes indeed! Thanks!. I just merged #1309. Thanks for reporting!. @tkjone Yay! LGTM!. Hi! Prism does supports `lang-xxx` too. So you should be able to use `lang-python` directly!. @akshaybabloo I don't think so... This behaviour has been here for a very long time. I traced it back to this commit https://github.com/PrismJS/prism/commit/de85c1ae7b7c1c32d730ecba1d259bb891746bbf.\n\nI agree it should appear somewhere in the docs.. @uhafner Take a look at the [File Highlight plugin](http://prismjs.com/plugins/file-highlight/). . I don't get how this would solve the issue of auto-detection. AFAIK highlight.js does it by testing the code (or part of it?) with every language. Each test returns a relevance score, based on specific caracteristics of the language (mainly keywords, but also special syntaxes). Sometimes a test can return early with a relevance of 0 if it detects an invalid syntax.\n\nThis is a smart approach, but it still requires to test every language and it's something I'm not happy about. Yet, Prism _could_ probably support this by adding these concepts (relevancy and invalid syntaxes).. Nice! Finally! LGTM :+1: . Hi! Thanks for reporting. The example regexp you provide is not a feature supported by regexps in JS.\n\nBut we can surely add support for one level of nested brackets to fix this issue.. Isn't it the same thing as `bash`? . Great! Thanks for contributing!. It works fine on the [test page](http://prismjs.com/test.html). Note that there are three components needed for the highlighting to work here: `prism-markup`, `prism-clike` and `prism-javascript`, in this order.. No it can't. . Here is a working example: https://codepen.io/anon/pen/VQRpvB\n\nIf you still don't manage to make it work, please provide an online example reproducing the issue.. I updated the example with manual highlighting: https://codepen.io/anon/pen/VQRpvB. Damn! Please use the \"Edit\" option on your comments instead of adding a new one every hour please!\n\n> @Golmote could you reopen this please? :)\n\nI guess you could not wait and already opened #1325. So this one can definitely stay closed.. AFAICT this is not needed. Titles are used by the Show Language plugin, but they are only needed when the title is not the capitalized version of the component's alias.\n\nIt already works as intended without this addition. https://codepen.io/anon/pen/Jpzaqm. Hi!\nWe do have [a plugin](http://prismjs.com/plugins/custom-class/) to add prefix to all classes added on tokens. You'll have to change the theme's stylesheet yourself, though.. Please use the \"Edit\" option on your comments instead of commenting multiple times in a row.\n\nI understand your issue now, and I see how highlight.js implemented a solution for it. That being said, Prism does not really work the same way, so I'm not sure it would be doable.\nKnowing what was \"parsed\" in the lines before the one we want to highlight is one thing, but Prism might need to know what comes _after_ the current line. And I don't see how we could circumvent this.. Great! Thanks for contributing!. Thanks!. Thank you! I also removed tests against node 0.10 and 0.12 in df01b1b920b8c06af8563ee9d5bf7b51ab7e7abe.. Thanks for reporting! Should be fixed now.. Hi! Thanks for reporting. This was fixed in https://github.com/PrismJS/prism/commit/05bf67dc45422d45ee8e4a364a7761ad2d2dddee when investigating https://github.com/PrismJS/prism/issues/1335.. Hi! Thanks for reporting. I couldn't reproduce your issue on the [Test page](http://prismjs.com/test.html) with the following code:\n\n```jsx\n\n    \n\n```\n\n![https://i.imgur.com/kevscVn.png](https://i.imgur.com/kevscVn.png)\n\nPlease make sure you're using the latest version of Prism. If the issue is still relevant after that, please provide us with an online example reproducing it.. Thanks for reporting! Should be fixed now.. Happy to help when I can! ;). I reverted cebacdfa195b298ee6046e4d6a5c06058cb54090. Because the use-case for single line comment inside multi-line comment is more common than the opposite.\n\nAt the moment, we can't have both this and #1340. So we'll stick with the previous behaviour for now, while I try to find a way.. Hopefully both will stay fixed now!. I reverted cebacdfa195b298ee6046e4d6a5c06058cb54090 to fix this issue. Because the use-case for single line comment inside multi-line comment is more common than the opposite.. CI tests only occur when `master` branch is updated and when tags are pushed (i.e. a new release is made).\n\nEDIT: Oh, that's not true actually. Some of our PRs do have a CI status. I don't know why some of them and not all, though.... Ah, you're right, the PR I was looking at was for the master branch.\n\nSo I guess we could [add the `gh-pages` branch explicitely](https://docs.travis-ci.com/user/customizing-the-build/#Building-Specific-Branches). Since\n> By default, the gh-pages branch is not built unless you add it to the safelist.\n\nAs long as we don't change the deployment rules, it should be ok.\n. Hi! Thanks for reporting.\nI don't think we're gonna fix this one, though. Prism can't (at the moment anyway) handle infinitely deep recursions of patterns.\n\nWe might handle it at some point, but this is really not on agenda for the near future.. I reopen this issue, since it _should_ actually be fixable.. I accidently closed the issue when #1345 was merged. But it was actually fixed in the next commit (cc80ccda8a2ec5565750ce67a2135b109748b5cd). A test for this specific use case was added in f0e6249e4f4417a7497792c0b9b8fcd133e9564e.\n\nSo it should be fixed now! :tada: \n\nNote that we probably still won't be able to handle infinite recursion (since JS regexps are not recursive), but at least this use case is handled!. > By the way, just for your information, I'm using prismjs for syntax highlighting with Monaco Editor. See the live demo at: http://demo.rekit.org/element/src%2Ffeatures%2Fcommon%2Fmonaco%2Fworkers%2FsyntaxHighlighter.js/code . Did some job on finding jsx text elements.\n\nYou mean to handle plain text (#1304 and #1294)? That's interesting! Unfortunately, this looks too complicated to be included in Prism like this... I'd love to find a lighter solution to this issue.. Hi! Indeed, the Line numbers plugin, only when used with line wrapping, requires the code block to be visible (or at least to have dimensions) so the height for each line can be computed. In your case, rehighlighting manually seems to be the appropriate solution.. Hi!\n\nI'm afraid at the moment the best place to find a list of the dependencies is the [`components.js`](https://github.com/PrismJS/prism/blob/gh-pages/components.js) file, which is far from convenient.\n\nRegarding your use case, I think you should take a look at the [Autoloader plugin](http://prismjs.com/plugins/autoloader/), because it will take care of the dependencies for you.\n\nI'll let this issue open to remind us we need to generate the full list of dependencies somewhere on the website.. @kid-wumeng I [just updated](c3ed5b5247484ab3b27118cb4b5301c0bb662361) the [Examples](http://prismjs.com/examples.html) page. It know displays the dependencies for each language, if any.\n\n![bur5mdi](https://user-images.githubusercontent.com/565460/37252179-371bcf02-251d-11e8-89d8-f252cfceaf39.png)\n. @mAAdhaTTah You're right! That's much more clear now. Thanks for reviewing!. I think it's tokenized, but no theme handle it. You should try adding a CSS rule for `.token.class-name` to add the styling you want to them.. The same as the `function` names should be fine. In the default theme, that's `#DD4A68`.. Since you decided to change the background color of the theme, you should probably change or remove the background color of the operators, indeed.\n\nThis is ok as part of the original theme, tho.. The background color of the code block, I meant. This greenish background isn't the original background of the default theme is it?. So I consider you did some customization, and so you might also need to customize more to make it look less weird.. IMO no we should not. It looks good on the theme and the author did it like this, I won't discuss it.\nThis is theme customization, and theme customization should be in your own CSS.. Agreed, we could highlight uppercase variable names as constants.. Thanks for reporting.. Prism is not a parser, nor a linter. It's just a highlighter: it's meant to make code more beautiful and easier to read. But Prism has no idea of how the code actually work. It doesn't know what a variable is or anything like this.. Oh I meant add it in _your_ CSS. But I guess we could go through all the official themes to add it.... @mAAdhaTTah Yes, I think we should try to make the official themes support the same tokens, indeed.. Thanks for reporting.. In Prism, you _have_ to use the PHP component to highlight PHP in Markup. Please remember that Prism is not HighlightJS and that we have no intention to align perfectly the behaviours of the two libraries.. @mAAdhaTTah No it is not included in this PR. It would probably live in a `components/index.js` file.. Thanks for reporting! It should be fixed now.. Thanks for reporting! Should be fixed now.. Hi @chriswells0! This sounds like a good idea. If you start working again on #856, feel free to @ me so I can review it.. @bradhowes, I merged #856, so you'll have to merge or rebase the `gh-pages` branch in order to address my remaining comment, and eventually get this PR merged.. @mAAdhaTTah Do you wish to do a quick review on this?. Yes ! Both valid points. I updated the PR.. Hi, thanks for taking care of this.\n\nI noticed the Tomorrow Night theme and the Coy theme already have the class-name handled actually, so there should be nothing to change in these files.\n\nOn the contrary, we should add support for it in the Solarized Light theme.\n\nThe change in the Okaidia theme looks good to me.. @mAAdhaTTah No, the changes in ` themes/prism-coy.css` and `themes/prism-tomorrow.css` need to be reverted. Those themes already handle the `class-name` token (line 149 in Coy, and 79 in Tomorrow).. @paladox Thank you!. @CoenraadS Do the square brackets have any meaning here? I'm wondering if the issue is the color of the closing bracket or the opening bracket... I can't find anything about interpolating things inside square brackets, so I'd say the latter. Can you confirm?\n\nI mean the first bracket should probably not be highlighted as punctuation, should it?\n\nEDIT: Oh, sorry, I thought you might be able to answer this yourself. I'll ask directly in the linked issue next time ;). At the moment there is no auto-detection of the language. This feature has been asked already in issue #1313.\n\nYou have to set the right class yourself.. Can you provide more details about this? Do you reproduce the issue on the [Test page](http://prismjs.com/test.html)?\n\n![b26zqtl](https://user-images.githubusercontent.com/565460/37756062-56cefd0e-2da8-11e8-8bd8-bac75ddd64cd.png). Are you using the `highlight()` function directly? Could this be related to https://github.com/PrismJS/prism/pull/1367 ?. @paladox Ruby needs to be included before ERB: https://codepen.io/anon/pen/eMEgNo\n\nSo I confirm this will be fixed by #1367 when it's merged.. #1367 is now merged, so this issue should be fixed. Thanks for reporting!. Hi! Thanks for reporting.\n\nWe currently match class names based on the preceding keyword (`class`, `interface`, etc.).\nAre class names mandatorily capitalized in C#? Would this be a viable enough way to match them?. Should be fixed now!. Hi. We are aware of this issue. Unfortunately, this won't likely be fixed before the next major release of Prism, since this would be quite BC breaking. Refer to https://github.com/PrismJS/prism/issues/470 for a temporary \"wrapper\" solution that might fit your need.. I guess it could, at least for ERB, Handlebars and Smarty (PHP is _slightly_ different). But where would we put it? I'm not really in favor of adding it directly to `prism-core`.... > Testing this on https://codepen.io/anon/pen/dmzpKg it dosen't seem to work.\n\nRuby needs to be included before ERB. See https://codepen.io/anon/pen/eMEgNo\n\n> I was thinking the `Prism.util` namespace, but if you don't think it belongs there, it's fine, especially if it's not universally reusable (cuz PHP is different).\n\nI think this is too much code, used by too few languages (3 or 4 out of 141), to belong in `prism-core`. But I will keep thinking about this, cause I agree there's far too much repetition here. :confused: . Maybe this can be something like `prism-templating.js` since it's their common point: we need this extra replacement process because those are templating languages, that can be embedded everywhere inside Markup.\n\nI'll give it a try this weekend, we'll see how this goes.\n\n(On a side note, Twig and Django components should probably be rewritten in the same fashion, since they belong to the same kind of languages. Although it can be done at anytime later). Ok, so I gave this a try and it works really well.\n\nI managed to make all four of the languages behave the same way. Their definition does not extend Markup anymore. Instead, like PHP does, they switch the grammar to Markup in `before-tokenize` and use their own grammar in `after-tokenize`. I guess this could even be a step towards a more generic templating behaviour (not focused only on Markup).\n\nSorry the diff is getting a bit hard to read.. AFAIK, this is automatic. I don't know the update frequency though.. Closing as duplicate of #956.. Hi @paladox. This change should not be needed, because the `generics` token is aliased as `function`, leading to a ``. You should not need to change anything in your theme to get the proper highlighting.. Thanks for reporting.\nAs an introduction, remember that Prism is not a parser nor a linter, only a highlighter. It does not aim to be perfectly semantically accurate.\n\nI played around with your examples a bit, and managed to end up with the following, where (for the sake of this example) functions are red and classes are dark green:\n\n![](https://i.imgur.com/n7Ay8pX.png)\n\n![](https://i.imgur.com/xYpvcgK.png)\n\n![](https://i.imgur.com/5Ym4yV3.png)\n\n![](https://i.imgur.com/4LqXE0h.png)\n\n![](https://i.imgur.com/PYb7dHQ.png)\n\nLooks good enough to me, can you confirm?. Hi! Can you provide on online example reproducing this issue please?. @Hapeki You do have a CSS rule that adds an inset `box-shadow` on your `` elements.\n\nCf https://hapeki.com/assets/css/style.css?v=cfb97db1c3 at lines 195-196.\n\n```css\ncode, tt {\n    ...\n    -webkit-box-shadow:inset 0 0 1px 0 #e6e6e6;\n    box-shadow:inset 0 0 1px 0 #e6e6e6;\n}\n```. Thanks for reporting! Should be fixed now.. Hi and thanks for contributing!\nCan you please run `gulp` to generate the minified version of the component and include it in this PR.\nAlso, you'll have to update the [test file for keywords in Switch](https://github.com/PrismJS/prism/blob/gh-pages/tests/languages/swift/keyword_feature.test#L47).. Hi! No, it can't be called in `tokenize()` directly, since `tokenize()` is being called inside those hooks in the [`markup-templating`](https://github.com/PrismJS/prism/blob/gh-pages/components/prism-markup-templating.js#L61) component.\n\nBut you can execute de hooks yourself, like it's currently done in the test runner: https://github.com/PrismJS/prism/blob/gh-pages/tests/helper/test-case.js#L65-L72. Hi! Thanks for reporting. The issue should be fixed now.. Sounds good. Could you open a new issue for this?. I'd say ~15-20px. . What plugin(s) are you talking about? Most plugin should already have opt-in or opt-out options.. Those are indeed valid examples. Thanks for reporting.. So I just tested it, and it appears the uppercased class names in Eiffel are already matched and highlighted.\nThe color of the token essentially depends of the theme, so there is nothing we can really do here. If you want to change the color of those tokens in your specific CSS, you can always add a rule for it:\n\n```css\n.language-eiffel .token.class-name {\n    color: blue; /* or whatever shade of blue you want */\n}\n```. Hi! Thanks for contributing! Could you please run `gulp` so that the minified version of the component is generated and include it in this PR please?. Thanks!. Hi! This looks great. Thanks for contributing!. Thanks!. Hi! Thanks for contributing again.\nBut please don't include both changes in a single PR, instead make two PRs, one for each issue.. Thanks for reporting!. Hi, can you provide a full runnable snippet to illustrate the issue please? I'm not sure I get it. . Oh, OK I see now. The JS components adds support for JS in Markup only if the Markup component is loaded before the JS component is. Hence, when you first load the JS component, the Markup component is not loaded and the support is not added. When you then load Markup + JS, it too late because of `require()`'s cache... and the JS component won't be executed again. \nWe should find a way to invalidate the cache here. . Should we do this on every call? Or should we provide a second parameter to force the cache invalidation?\nFirst one sounds quite inefficient. But the second one requires some knowledge of the inner behaviour of the components.... Yes, they should. I don't think reloading a component can break any previously loaded component.. Alright, agreed.. > I don't think reloading a component can break any previously loaded component.\n\nActually, I am wrong about this.\n\nConsider we do implement the cache clearing, and a user wants to highlight JS in HTML:\n\nThis will work, obviously:\n```js\nloadLanguages(['markup', 'javascript']);\n```\nThis will work too, thanks to the cache being cleared:\n```js\nloadLanguages('javascript'); loadLanguages(['markup', 'javascript']);\n```\nBut this will break, _because of_ the cache being cleared...\n```js\nloadLanguages(['markup', 'javascript']); loadLanguages('markup');\n```\nSlightly more subtle, this won't work either, because `markdown` requires `markup` and thus refreshes it:\n```js\nloadLanguages(['markup', 'javascript']); loadLanguages('markdown');\n```\n\nI'm really reconsidering the idea of the second parameter.... Ok, I dug into this.\n\nHere is the list of the \"optional dependencies\" I've come up with:\n\nLanguage|Optional dependencies\n---------|--------------\nCSS|Markup\nJavaScript|Markup\nActionScript|Markup\nDjango|CSS, JavaScript\nHaml|CSS, CoffeeScript, ERB, JavaScript, Less, Markdown, Ruby, SCSS, Textile\nHTTP|JavaScript, Markup\nOpenCL|C, C++ (***)\nPug|CoffeeScript, EJS, Handlebars, (Hogan), Less, LiveScript, Markdown, (Mustache), (Plates), SCSS, Stylus, (Swig)\nPure|C, C++, Fortran, (ATS), (DSP)\nTextile|CSS\n\n(*** This is a weird one: OpenCL extends C++ which extends C, but it also add keywords to both languages. Apparently this was done so that C/C++ code blocks could use the OpenCL host API and it would be properly highlighted. The thing that worries me the most here is the name `optionalDependencies`... since they are not optional at all in that specific case.)\n\nAs you can see, this is not such a long list. Yet, it may have huge impacts on the loading order.\n\nOne of the worst case scenario I've found is:\n```js\nloadLanguages(['actionscript', 'http', 'textile', 'django', 'haml', 'css', 'javascript', 'markup', 'xeora']);\n```\nwhich will lead to the following files being actually required:\n\n\nClick to expand the \"graph\".\n\n- `c-like`\n  - `javascript`\n    - `actionscript`\n- `http`\n- `markup`\n  - -> reload dependents\n    - `javascript`\n    - `actionscript`\n    - `http`\n  - `textile`\n- `markup`\n  - -> reload dependents\n    - `javascript`\n    - `actionscript`\n    - `http`\n  - `django`\n- `c-like`\n  - `ruby`\n    - `haml`\n- `css`\n  - -> reload dependents\n    - `django`\n    - `haml`\n    - `textile`\n      - -> reload dependents\n        - `haml`\n- `c-like`\n  - `javascript`\n    - -> reload dependents\n      - `django`\n      - `haml`\n      - `http`\n- `markup`\n  - -> reload dependents\n    - `css`\n      - -> reload dependents\n        - `django`\n        - `haml`\n        - `textile`\n          - -> reload dependents\n            - `haml`\n    - `javascript`\n      - -> reload dependents\n        - `django`\n        - `haml`\n    - `actionscript`\n    - `http`\n- `markup`\n  - -> reload dependents\n    - `css`\n      - -> reload dependents\n        - `django`\n        - `haml`\n        - `textile`\n          - -> reload dependents\n            - `haml`\n    - `javascript`\n      - -> reload dependents\n        - `django`\n        - `haml`\n    - `actionscript`\n    - `http`\n  - `xeora`\n\n\n\n(That's 50 files `require`'d, for 9 languages)\n\nObviously, calling `loadLanguages()` without paremeters also leads to a huge amounts of dependencies. (413 files `require`d, for our 148 languages)\n\nAm I overthinking an edge case?\nDo you have alternative names in mind, for the OpenCL case?. The dependency for PHP has changed in #1367. You need to include the component `markup-templating` in addition to `c-like` (and probably `markup` depending on your use case).\n\nEDIT: Woops, I wrote PHP here, instead of Handlebars. So Handlebars requires the component `markup-templating`, which requires `markup`.. Hi.\n\n> This seems like a breaking change for consumers of this library, should there have been a major version bump?\n\nI've took the time to wonder about this since you posted this issue.\n\nPrism provides no insurance that the dependencies between the components won't change. It does provide the insurance that the files [`components.json`](https://github.com/PrismJS/prism/blob/gh-pages/components.json) (and [`components.js`](https://github.com/PrismJS/prism/blob/gh-pages/components.js)) will contain the required information regarding those dependencies.\n\nFurthermore, we usually assume that users using Prism in the browser will get a bundle from the [Download page](http://prismjs.com/download.html). If they were to upgrade to 1.14 using the \"redownload URL\" on this page, there would be no problem.\nThe ones who don't can still use the [Autoloader plugin](http://prismjs.com/plugins/autoloader/) if they don't want to handle the dependencies themselves.\nUsers using Prism with Node are encouraged to use the [`loadLanguages()` helper function](https://github.com/PrismJS/prism/blob/gh-pages/components/index.js), introduced in 1.13, if they want the dependencies to be automatically handled.\n\nFor the rest of the users, the ones who decided, on their own, to manually handle those dependencies, yes 1.14 will break their code, regarding the ERB, Handlebars, PHP and Smarty components.\n\nTaking all of this into account, I don't consider 1.14 a BC-breaking release.\n\nI'm really sorry this introduced an issue on Spectacle's side, yet [the way they handle the dependencies](https://github.com/FormidableLabs/spectacle/blob/master/src/utils/prism-import.js) is not really realiable. I don't know their use case, but they should probably have come to us (and maybe they still should) so we could discuss to find a better solution.. @ryan-roemer Hi, thanks for getting in touch. I'll join the discussion in FormidableLabs/spectacle#546.. The dependency for PHP has changed in https://github.com/PrismJS/prism/pull/1367. You need to include the component `markup-templating` in addition to `c-like` (and probably `markup` depending on your use case).. Alright then! Looks good to me. Thanks for contributing!. Hi! Thanks for reporting.\n\nBecause regexps in JavaScript are not recursive, there is no way for Prism to handle infinite levels of nesting. Yet, we can allow for one level of nesting in this special case.. @ChrisBrownie55 The issue here is not handling the recursiveness of whatever is inside the template string (this should theoretically work), but rather simply matching the \"outer\" template string. AFAIK this is not doable with any regexp in JS and it would require a parsing function (that consumes characters until it knows for sure the template string token is fully matched). At the moment, this is not something we want to add to Prism, because of its complexity. See also related https://github.com/PrismJS/prism/issues/1306#issuecomment-368333382.. Thanks!. This is a weird one. It seems [I originally introduced](https://github.com/PrismJS/prism/commit/8030db914a1e7331d245db0b9b787b4364994440#diff-c096d2934bc4bc31364a77d74b1a00f1R23) this regexp in this file. My guess is that I copy-pasted it from the file `prism-core` ~[where it's also used currently](https://github.com/PrismJS/prism/blob/5f133c800fdd178f6899c1ffa8a38ffbdc7a746f/components/prism-core.js#L18)~ (Edit: no it's not...).\n@LeaVerou It appears [you did this change](https://github.com/PrismJS/prism/commit/cfaf681db9018bd1d6e296b526db3e1467986fb3#diff-be553e8a1b66b66f387cb98326dbae83R10) a long time ago. Would you by any chance remember what this negative look-ahead assertion was for?. Oh! And I didn't even realize I was not looking at the current version of `prism-core` in my previous comment. :sweat_smile: \n\nAlright then! Thanks!\n. Hi! Thanks for reporting.\nUnfortunately, Prism is not a parser and it has no knowledge regarding the actual meaning of your code. This means it can't recognize whether `BigData` is a class or anything else when used outside of a few easily identifiable places.\n\nMore specifically, in your example, the first occurrence of `BigData` can easily be matched as a class (or rather an interface in that case) because it immediately follows the `interface` keyword. But Prism has no easy way to identify it later.\n\nThe only thing I can think of would be to use the `after-tokenize` hook to post-process the tokens and identify classes used elsewhere. That would require some work, but I think it's doable. (See related https://github.com/PrismJS/prism/issues/1228#issuecomment-379012088)\n\nI don't think this is something we want to handle by default in Prism.. For future reference, see related #1409.. The dependency graph can be inferred from the data from [`components.js`](https://github.com/PrismJS/prism/blob/gh-pages/components.js) or [`components.json`](https://github.com/PrismJS/prism/blob/gh-pages/components.json). Here is a quick'n'dirty example of the dependency graph in latest release 1.14: https://codepen.io/anon/pen/mLKqPN Note that this does not take \"peer dependencies\" into account (discussed in #1393). . Thanks for reporting!. Thanks for reporting!. Yay! :tada: Nice job!. No, LGTM too. . Absolutely not.. You could \"look behind\" for the line break, using a regexp like `/(\\r|\\n)%%.../` and setting `lookbehind: true`.\nYou could even add `^` inside the parentheses to match this feature at the beginning of the code block, but note that this has flaws: it will also match the pattern if another pattern immediately precedes it, because it will be considered the beginning of the string. (`,%% foo` would match, if you highlight the `,` as punctuation, for example).. > My fork is messed up. :(\n\nI might be able to force push a cleaned up version on your branch, since you gave us write permission, if need be (https://github.com/PrismJS/prism/compare/gh-pages...Golmote:gflohr-fix?expand=1).. >  I will then not commit any generated files.\n\nI'll still ask you to commit them, but it can be done after the first review I guess. I'm closing this PR and expect to see a new one soon, then.. Hi! Thanks for contributing to Prism.\n\nI think the solution to this issue could be implemented directly in the Command line plugin. Instead of aborting the process when the `.command-line-prompt` element is found, we should probably update its content instead. This is usually what we expect from calling `highlightElement` again on an already highlighted code block.\n\nSo, I think you should update this PR to make the following changes:\n\n- Remove [the piece of code that aborts the process](https://github.com/PrismJS/prism/blob/gh-pages/plugins/command-line/prism-command-line.js#L26-L29).\n- Before [creating the `.command-line-prompt` element](https://github.com/PrismJS/prism/blob/gh-pages/plugins/command-line/prism-command-line.js#L121), first check for its existence. It needs to be created only if it does not already exist.\n- Move [the node insertion](https://github.com/PrismJS/prism/blob/gh-pages/plugins/command-line/prism-command-line.js#L135) in the condition created above. The node needs to be inserted only if it wasn't already there.. Hi, thanks for reporting.\n\nCan you reproduce the issue on the [Test page](http://prismjs.com/test.html) ? I couldn't so you might just need to upgrade Prism to the latest version.. Hi!\n\nThe patterns are all matched in their definition order. Here, you're trying to match this custom pattern before the normal `attr-name` pattern, so you'll need to use [`insertBefore()`](http://prismjs.com/extending.html#language-definitions) to do so.\n\n```js\nPrism.languages.insertBefore('inside', 'attr-name', {\n    'attr-socket': /\\s*socket=?/i\n}, Prism.languages.markup['tag']);\n```. Sure, take your time!. I updated the PR to address your comments.\n\nRegarding `withoutDependencies`, I kept it for now, I still need to understand what you meant in your first comment. But I removed it from the export so it's not exposed anymore.\nAnd the map of dependents is now built only once.\n\nLet me know what you think.. @mAAdhaTTah Since we don't seem to have any circular dependencies at the moment, I would suggest we keep it this way, at least for now.\nDid I address all your requested changes? It this good to be merged?. Yes please!. Thanks for contributing!. Hi @CoenraadS and thanks for reporting.\n\nI'm not familiar at all with Razor, but I don't think we have support for it at the moment, since issue #1225 asks for it. If the syntax in your example is not pure ASP.NET, I guess it makes sense it's not highlighted at this time.\n\nPlease close this issue if this is indeed a duplicate of #1225. Otherwise, can you tell me more about this (maybe a link to some documentation)?. Hi!\n\nSeveral things looks strange to me in your example:\nYou can't use `data-src` without the [File Highlight plugin](http://prismjs.com/plugins/file-highlight/). Also, you're trying to highlight a JS file using the Scala language. Finally, on JSFiddle, you need to specify the \"load type\" for the JS. Otherwise, it will run on the \"load\" event, which would prevent automatic highlighting.\n\nAnyway, here is an updated JSFiddle not using the File Highlight plugin: https://jsfiddle.net/0474cdhd/1/\nAnd here is an updated JSFiddle using the File Highlight plugin: https://jsfiddle.net/0474cdhd/2/. > I didn't think the plugin would know the difference between JS and Scala to any degree relevant to this question.\n\nIt does not (in that case).\n\nSo, I managed to reproduce the issue on JSFiddle with an example actually using Reveal.JS.\n\nAFAICT, the line numbers are not visible, due to some styles Reveal.JS adds on `` elements. You can easily override them to make the numbers reappear:\n\n```css\n.reveal pre.line-numbers > code {\n  overflow: visible;\n  padding: 0;\n}\n```\n\nSee example: https://jsfiddle.net/d3L2ro9e/. You need to include the `markup-templating` component in your code. See related #1395 and #1400.. How did you download Prism? And what language are you highlighting? \n\n`markup-templating` is a component just like `c-like` or any other language definition. It is required for several languages to be highlighted properly. . Hm, it seems the Download page fails to handle cases with multiple dependencies, when specified from the redownload URL. I'll take a look, thanks for reporting.. It should be fixed with c2ff24822a750f2aad24b9393bd78c6e896fe633. Can you please try to redownload Prism using the same link you posted above? You should see that the checkbox \"Markup templating\" is automatically checked now.. Hi, thanks for reporting. I understand your use case, yet I'm not sure this can be considered a bug.\n\nIn your first example, the first line is not indented at all, so this will be the starting reference for the plugin... Since your lowest indentation is 0, it will consider everything is indented correctly.\n\nNote that this plugin does not provide automatic indentation, it can only remove extra indentation applied to the whole code. Yet again, your first line has no extra indentation... . Hi! Thanks for reporting.\n\nIf we were to add `ObjectPascal` to Prism, it would be added as an `alias` to the `pascal` component, along with `TurboPascal` and `FreePascal`. But I'm not even sure Bracket Pair Colorizer can use aliases at the moment, seeing it already has custom language name associations: https://github.com/CoenraadS/BracketPair/blob/master/src/documentDecorationManager.ts#L129\n\nIt appears that @CoenraadS already had to deal with language name mappings for its extension in the past (https://github.com/CoenraadS/BracketPair/issues/99, https://github.com/CoenraadS/BracketPair/issues/128, https://github.com/CoenraadS/BracketPair/issues/131...). Maybe this issue should be fixed the same way here. Thoughts, @CoenraadS?. @CoenraadS I think `loadLanguages` can't work with aliases at the moment. But it definitely could, so I just created #1427. Yet, I don't know if Prism would add all the aliases you defined in your `getPrismLanguageID` function (like `scad` or `apex` which seem to be actual languages, even if they might look like existing ones, or `javascriptreact` and `typescriptreact` which are really weird names for JSX and TSX IMO).\n\n@pakLebah You seem to know your stuff, so i'll trust you on this ^^. We could then add only `objectpascal` as an alias to the `pascal` component.. @mAAdhaTTah Yes, we need to make `loadLanguages()` work with aliases.. We can. . You're very welcome to start a PR if you want \ud83d\ude09. I would say you need something like\n\n```js\n    yamlish: {\n        pattern: /(^[^\\S\\r\\n]*)---(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?[^\\S\\r\\n]*\\.\\.\\.$/m,\n        lookbehind: true,\n        inside: Prism.languages.yaml,\n        alias: 'language-yaml'\n    }\n```\n\nThe lookbehind (the first capturing group) matches the optional spaces before `---`. Then we match multiple lines `(?:.*(?:\\r\\n?|\\n))*?`, then we end up with the optional spaces and the final `...`.\n\nThis should match:\n\n```\n  ---\n  but: this one\n  has:\n    - lots\n    - of\n    - stuff\n  ...\n```. Looks quite good to me. There are still a few nitpicks, but I won't mind if this is merged as is.\n\nYou did not give me feedback regarding this comment. Did you give it a try? Are those needed?\n> Since you removed the `(^|\\n)` parts that were checking for the beginning of the string in several regexps, I'm wondering if the `(    )*` parts are still needed. You might want to try removing them and see how the tests go.\n\nAlso I can still see some unneeded parentheses:\n- around `(.*)` in `bailout`\n- around `(\\d+)` in `version`\n- around `(\\d+)` in `plan`.\n\nFinally, all the remaining groups, expect in the `yamlish` pattern that uses lookbehind, could be made non-capturing using `?:`.. Wow, good catch. It does not happen on the website because we switch the theme \"in place\" so the order is kept. Looks good to me!. @Sylphony You also need to import `prismjs/components/prism-markup.js`, before `prismjs/components/prism-markup-templating.js`.. @mAAdhaTTah Please commit the minified version too, before merging this.. Hi! Wow this looks great! I'll try to do a proper review this week-end.\n\nFrom a really quick look, I can already tell that some indentations are weird (note that we do use tabs for indentation in Prism), and that you should probably add a `builtin_feature.test` test file just like the one for the keywords.\n\n> I also noticed that lots of things were missing.\n\nMost of the time, components need to be actually used extensively to reveal their flaws. I'm glad you took the time to improve the component to fit your needs and even submitted a PR for it! Thanks!. Re: #1457, the issue is that the `$()` match ends at the first closing parenthesis `)` encoutered, instead of the second one in this case. But don't worry if you don't want to take time for it, it can be fixed later in a separated PR.. > `components/prism-kotlin.min.js` gets modified when I run Gulp, even though it does not seem related to Bash in any way\u2026 I'll refrain from committing it for now; warn me if it is required.\n\nHm that's weird. Please don't commit it.\n\nAre there actual differences in the git diff?\nWhat's your version of UglifyJS?\n```\nD:\\Documents\\prism>npm list uglify-js\nprismjs@1.15.0 D:\\Documents\\prism\n`-- gulp-uglify@0.3.2\n  `-- uglify-js@2.4.6\n```. Found the Kotlin commit here: 41e3d6a6f6926a4273c928ae857ce375a25fbd6e It was done right after you opened this PR, so your version is a bit behind `master`. Mystery solved!. Don't worry, as long as the merge can be made without conflict, this is fine.. > The main problem here is that we try to accomplish the impossible. We try to match structures like Foo, E, H>, I>>>, M>> which require a context free grammar with regular expressions.\nHave fun with that, because regular expressions can't count the pointy brackets!\n\n> In my testing it's on average about 2~5 times slower than (?:<[^>]+>)? (which can't match nested generic types).\n\nDo people really do 5 nested levels of generics in real-world code? The regexp could certainly be faster if we limited Prism's support to a certain number of nested levels (like 2... or maybe 3. Above, the regexp will get really ugly).. > but we're not a code validator, are we?\n\nWe're definitely not!\n\nThe regexp in your last message looks ok to me. I'll review again once the PR gets updated.. @RunDevelopment I like this idea. Regarding the wording, I'd prefer something like `lookbehindNegative: true` (defaults to `false`) rather than any of you propositions.\nApart from this, your implementation concept looks quite straightforward. Would you be interested in submitting a PR for this?. Hi @jcubic. You can definitely submit a PR fixing 3 bugs out of 4, and you are very welcome to do so!\n\nRegarding the `lambda` case, it might be tricky. The negative lookbehind suggested in #1445 might come in handy to solve such a case.. From a really quick look at it, it appears to be more about the `''` part of the string than about the comment. I think our component does not handle \"quote-escaped quotes\" (is there a name for this?) in [the string pattern](https://github.com/PrismJS/prism/blob/master/components/prism-sql.js#L7) at the moment.. Hi!\nAre you using other plugins as well? If so, which are they?. Hi! Thanks for reporting. I think this is a problem with the `variable` pattern, not the `comment` one. But there's definitely something wrong starting around line 55.\n\nWould #1443 help there?. I'm not sure I'm in favor of this addition. Vue is not a language is it? It does not even have a special syntax?\n\nWhat issue is this PR supposed to fix? It it to be able to add class `language-vue` to code blocks?. @mAAdhaTTah I'm not worried about the filesize, we have minified versions to deal with this (obtw it appears to be missing from this PR). I'm worried about the semantics...\n\nI went through the VueJS doc, and I see it has a Mustache-like template syntax. If we were to add a component for this (maybe it could handle multiple templating languages depending on how similar they are), we could then consider it a \"language\". But just adding `vue` as a alias for `markup` seems not appropriate to me.\n. Hi! Does `require('prismjs/components/')` (with the trailing slash) work for you? I think it's what was meant to be written.. Thanks for contributing!. Thanks!\n\nCould you add a test for it in https://github.com/PrismJS/prism/blob/master/tests/languages/scheme/function_feature.test please?. Thanks!. This looks quite hacky to me... Could you add a comment above the pattern, explaining why you needed to do this? That way, when the `greedy` issue is fixed, we'll be able to rollback to a simpler pattern.\n\nAlso, can you run `gulp` and include the generated minified version `prism-python.min.js` in this PR please?. I just committed aba1a72 where I use the same inaccurate regexp for these numbers and the ones in the control strings. Some we end up with only two regexps in the 'number' array, a more performant code, but less accurate matching.\n\nIs it ok for you ?\n. Yes, it was for readibility and because they are separated in the [spec](http://help.adobe.com/livedocs/specs/actionscript/3/wwhelp/wwhimpl/common/html/wwhelp.htm?context=LiveDocs_Parts&file=as3_specification118.html). But I really don't mind, I'll join them together.\n. I don't think ActionScript has hexadecimal numbers. So I had removed them from the RegExp.\n\nBut I also added the `+` after the exponent symbol, which is a change that should also be implied to the JS component.\n. Because the clike pattern does not allow `$` in function names. This change should probably go directly in the JS component.\n. Ok for this.\n. Alright, I'll look at it.\n. Inside a character class, you don't need to escape all the characters :\n`/[\\-\\[\\]\\/{}()*+?.\\\\^$|]/g` should work just fine.\n. Why do you use `call` ? Aren't we sure that `patterns` is an array ?\n. Could you explain what this is for ? I can't get it...\n. Same as above for the use of `call`.\n. Your explanation was great, I get it now. :)\n. Yes, it's probably some safety check.\n. Is it important to consume the line feed ? Otherwise, I think the regexp could end simply with `.+`\n. Shouldn't it be `pattern` (singular) ? We won't set a `competition` property on the array. Same might apply to the next line?\n. What about arrays containing competition patterns? Like the c-like comments :\n\n``` javascript\n[\n    {\n        pattern: /(^|[^\\\\])\\/\\*[\\w\\W]*?\\*\\//g,\n        lookbehind: true,\n        competition: true\n    },\n    {\n        pattern: /(^|[^\\\\:])\\/\\/.*?(\\r?\\n|$)/g,\n        lookbehind: true,\n        competition: true\n    }\n]\n```\n. The non-enumerable property `_competition` won't be added to the grammar in the for/in loop that follows.\nThis seems to raise errors when the code tries to handle competition in `inside` scenarios (like embedded JS in HTML).\n. Yes, this should work. (But `concat` returns a new array so you must assign the result. And thus the property must be writable.)\n. There is no need for this paragraph. The h3 says it all ;)\n. @vkbansal Sure. e444b56ae65c3815689b167ff272e9b36e9de3de\n. I think you forgot parentheses around the keywords alternatives.\nAlso, `:{1,2}` could be written `::?`.\n. Is it important to distinguish between pseudo-elements and pseudo-classes?\nIt would probably be more future-proof to match them both with a more generic pattern like `/::?[\\w-]+(?:\\(.*\\))?/` or something.\n\nI'd like to hear @LeaVerou's opinion on this.\n. Why did you make the first pattern `[\\w-]+?` ungreedy? It can only be follow by an operator or a closing square bracket so it should be safe to keep it greedy, don't you think?\n\nWhat about selectors like `input[type]`? All the value-related part should be made optional, I think.\nEDIT : Oh, I realize you did it, more or less. But the first part of the operator should be inside the parentheses. `(?:[*~|$^]?=\\s*\\S+)?` \n\nIn the part for the value, `\\S+` is greedy. Couldn't it be a problem with selectors like `div[foo=bar][baz=bar]`?\n\nFinally, the parentheses around the whole regexp aren't needed.\n. Parentheses around `[\\w-]+` are not needed.\n\nAlso, I think you forgot the `*=` operator. You should probably keep them always in the same order, for clarity.\n. You forgot the `*` again.\n\nI think it would be better to match the whole selector instead of each characters separately: `[*~|$^]?=`\n. Again, listing all the elements is not very future-proof. Isn't there a way to match them more generically?\n. What I meant about the parentheses is this:\n\n`/::?(?:after|before|first-letter|first-line|selection)/g`\n. > Also how is it different from listing keywords?\n\nIt's not. If keywords could be matched generically, I would also ask them to be ^^\nIf it is not possible to match elements generically in Stylus, then it's fine.\n. Would you mind moving the `|` after the `^` so that it's coherent with the other usages below?\n. What about all the other CSS units? (http://www.w3.org/TR/css-values/#lengths chapters 5 and 6)\n. Is the last group needed? Do we want to consume the line feed?\n. Shouldn't you allow hexadecimal characters too? `[\\da-fA-F]`?\n. Even a lookahead should normally not be needed. A simple `.*` should do the job, right?\n. I'm not sure I get this new pattern properly. Why are there two dots? Can hexadecimal numbers use a floating point syntax in F#? If not, I guess `\\d*\\.?[\\da-fA-F]+` should be enough.\nMaybe you should add a \"Numbers\" part in the example file so that you can check they are highlighted properly. (Maybe check [those listed there](https://msdn.microsoft.com/en-us/library/dd233193.aspx), for example?)\n. I think you should simplify the 4 patterns here:\n1st: `((\\d*)|([a-fA-F]*))*` => `[\\da-fA-F]*`. And there seems to be a pair of parentheses that can be removed around the whole number.\n2nd: `((0|1))*` => `[01]*`. There is also a pair of parentheses that's not needed.\n3rd: I guess the `f` in the middle is for handling the numers ending with a dot? What about... `2.F` or `2.m`? Are they valid numbers in F#? Furthermore, `(E|e)` should be simplified as `[Ee]` and `f|F|m|M` as `[fFmM]`. And still a pair of unneeded parentheses.\n4th: `\\d{1,}` => `\\d+`. An the pair of unneeded parentheses can be removed.\n\nTry to keep the patterns as short as possible. This will actually make them more readable. Counting the parentheses is probably the hardest part in understanding a regexp ^^\n. Woops, this should probably not be committed.\n. I don't see the numbers you were telling me about earlier. The ones that end with a dot?\n. You should remove the unneeded parentheses around the `B`.\n. Why the dot? Is it supposed to be an actual dot or any character? I don't get this.\nAlso, I think you should use `+` instead of `*` since we want at least one char.\nThere are still unneeded parentheses around the whole number.\nFinally, [this page on the MSDN](https://msdn.microsoft.com/en-us/library/dd233193.aspx) show an example using `lf` in lowercase, that is not handled here.\n. Here again, I think we need a `+` instead of the `*`.\nAnd you can remove the parentheses around the whole number.\n. If I read this properly, I think this pattern would match a single dot.\n\nFurthermore:\n- Regarding the part `(\\d*)?`, why the question mark? The `*` already makes it optional. Also note that if you remove the question mark, you should remove the parentheses too.\n- `(\\+|-)?` can be replaced with `[+-]?`\n- And you can remove the unneeded parentheses around the whole number.\n. Why the dot? Is it supposed to be an actual dot or any character?\n. Please be careful about the indentation here. You must use tabs.\n. The `!` character does not need to be escaped, AFAIK.\n. Why is the order of the languages different in this rules than in the previous ones?\n\nIt would probably be easier to read if the order of the translations was always the same.\n. You meant \"Numbers and timestamps\", right?\n. If I read this correctly, the `\\3` refers to the group `(\\n[ \\t]+)` which is part of an optional group. Shoudn't the last bit `(?:\\3[^\\r\\n]+)*` be included in the same optional group (as the `\\3` is mandatory)?\n. There is no need to escape the braces `{` and `}` inside character classes.\n. Also, is the `i` flag actually useful?\n. Here again, no need to escape the curly brace in the first character class.\n. Is the `i` flag useful here?\n. The `*` does not need to be escaped inside a character class.\n. The curly braces `{}` and the pipe `|` do not need to be escaped inside a character class.\n. I missed one here: the `|` does not need to be escaped inside character classes.\n. Please be careful with the indentation. Prism uses tabs to indent, not spaces.\n. The `\\b` parts seems redundant with the `\\s` parts (the latter implies the former). Also, do we really need to include those whitespaces in the match? What about something like:\n\n``` javascript\n{\n    pattern: /(^\\s*)(?:ONBUILD|...|ENTRYPOINT)(?=\\s)/mi,\n    lookbehind: true\n}\n```\n\nFinally, what about the [`LABEL` keyword](https://docs.docker.com/reference/builder/#label)?\n. The \"Instructions\" and the \"Full example\" look more or less the same to me. I guess you could remove the \"Instructions\" one.\nAlso, I find the official example more complete than yours. https://docs.docker.com/reference/builder/#dockerfile-examples\n. No need for the parentheses here.\n. I think the `[^\\n]+` could be replaced with `.+`. This would even add support for `\\r`.\n. There is a quote missing, no?\n\nAlso, could you please add some examples of string interpolations in the file `examples/prism-ruby.html`?\n. Why the fallback? In which case would we get there?\n. Please use tabs to indent, not spaces.\n\nAlso, why the `g` flags everywhere? It is not used by Prism.\n. You should use `Prism.util.clone` instead of `extend`.\n. Again, be careful with the indentation. Prism uses tabs, not spaces.\n. Why not `.+` instead of `[^\\r\\n]+`? And there is no need for the parentheses.\n. It looks like all letters are uppercase or lowercase: you could use the `i` modifier to simplify the regexp.\n. No need for the first couple of parentheses.\n. I think there are a lot of duplicates here (unless I'm missing something...?): `'left`, `'right`, etc.\n. No need for the enclosing parentheses.\n\nWhy is the `'[UuXx01ZzWwLlHh-]'` part listed here? Couldn't it be handled in the `vhdl-vectors` pattern above?\n\nAlso, I think `([_.]+)?` can be written `[_.]*`.\n\nFinally, if all letters are uppercase or lowercase (it looks like it's the case), you can use the `i` flag to simplify the regexp.\n. The `{1}` is not needed.\n\nI think `:=` should be listed before `=`, otherwise it won't get highlighted properly... right?\n\n`&`, `\\*` and `\\/` could be included in the first character class, like so: `[-+&*\\/]`. You could even add `=` if you reorder the parts so that the character class is after the other operators that use `=`.\n. No need for the enclosing parentheses here.\n. No need for the brackets in `[e]`\n. You can simplify the regexp by using the `i` flag.\nAlso, I think you can remove the last part `?(\\r?\\n|$)` since the dot `.` does not match line feeds. (Unless you intentionally wanted to consume the line feed?)\n. I think you meant `[TKU]` instead of `[T|K|U]`, even though I can't find any usage of `T` or `U` in the documentation...\n\nFurthermore, if I'm reading this properly, you don't need the three pairs of inner parentheses in the last part: `([T|K|U]_[a-z0-9_]+|\".+\"|'.+')`.\n\nAlso, it looks like you forgot the `CAPS` and `NCAPS` shift codes.\n\nFinally, the documentation mentions key codes like `K_KANJI?15` which do not appear to be handled here (due to the `?` char)\n. The parentheses are not needed around `using keys`.\n. The parentheses are not needed around `caps on only`, `caps always off` and `shift frees caps`\n. You should use the `i` flag to simplify the regexp.\nAlso, the inner pairs of parentheses around each alternative are not needed.\n. You don't need to escape `(` and `)` inside a character class.\n. You should add small examples for virtual keys and prefixes, since there don't seem to be any in the large example below.\n. @apfelbox: I think the two first parameters here should be swapped.\n\nCurrently, the \"expected\" and \"actual\" values look like they are inverted.\n. @apfelbox: This should be made recursive, or it will not be able to handle `inside` parts.\n\nMaybe something like:\n\n``` javascript\nreturn [\n    entry.type,\n    (typeof entry.content === \"object\") ? self.transformCompiledTokenStream(entry.content) : entry.content\n];\n```\n\n(with `self` being assigned `this`)\n. May you add a space before the `=`?\n. There is no need to escape the `*` inside a character class.\nAlso, I think the `$` is useless here, since `.*` will consume everything until the end of line anyway.\n\nFinally, the `g` flag can be removed: it is not used by Prism. (This applies to all your regexps)\n. Please be careful with the indentation here. Prism uses tabs, not spaces.\n. There is no need for `lookbehind` to be `false`. It is `false` by default.\n. Please remove the trailing comma here.\n. \"surounded\" => \"surrounded\"\n. Please remove the trailing comma here.\n. Why isn't this aliased as \"operator\" instead of \"keyword\"?\n. There is no need to escape those characters inside a character class. The regexp can be rewritten as `/[|{}]/`.\n. Same here, no need to escape the parentheses.\n. There is no need to escape the double quote here.\nEDIT: Also, the `$` is probably not needed, as explained in a previous comment.\n. Why did you change `[e]` to `(e|E)`? The regexp is case-insensitive so there is no need to specify the `E`. Furthermore, it could be simplified to `e` without the brackets.\n\nAlso, `([\\+]|[\\-])?` should be written `[+-]?`.\n. Alright, then.\n. The parentheses aren't needed around `&{1,2}`. Also, it would be shorter written as `&&?`. (BTW this also apply to `\\*{1,2}` in the operator regexp above.)\n. Would you mind naming the language with a dash instead of an underscore?\nOr maybe just name it `verilog`, since this is the base language?\n. Please add support for \\r and \\r\\n too: `(\\\\(?:\\r\\n?|\\n)|`\n. Why do you use a look-ahead here? Replacing `(?!\\b)` with `\\B` should do exactly the same result, I think...\n. Same as comment above.\n. Here, it would probably be better to use a look-ahead instead of the `inside` (since the parenthesis will be highlighted by the `punctuation` pattern anyway):\n\n```\n'function': {\n    'pattern': /[a-z0-9_]+(?=\\()/i\n},\n```\n. - Same as before regarding the negative look-ahead.\n- `#{1,2}` could be simplified as `##?`.\n- In the second alternative, shouldn't there be a `\\b` before the part `[\\da-f10zx_\\?]+` (since the `\\b` just before is inside an optional capture)?\n- You don't need to escape the interrogation mark inside a character class.\n- In the last alternative, it seems you allow no digit between the decimal dot and the `e`... is that intended? Also, make sure you did not forget the `Xe+XX` syntax (I don't know whether Verilog allows it or not).\n. - You don't need to escape the curly braces inside the character class.\n- `<{1,2}` and the two other similar patterns could be simplified as `<` (Although I might agree that `={1,3}` may be more readable than `==?=?`).\n- Is there a reason you did not include those operators `^ ~ % ? * \\/` in the first character class?\n. Here, you might want to add a paragraph explaining that the component is also compatible with Verilog (or with System Verilog if you choose to rename the component).\n. Did you really mean to use the `$` anchor without the `m` flag? This implies those hexadecimal patterns can only appear at the very end of the code.\n. There is not need for the enclosing parentheses.\nAlso, the `g` flag is not used at all by Prism, so you may remove it too.\n. Lookbehind is `false` by default, so you can simplify the `function` value by just providing the regexp.\n. You can shorten this pattern by writing `/\\b([Tt]rue|[Ff]alse)\\b/`\n. You could include all those single chars `! ? * / ~ ^ %` in the first character class. You won't even need to escape them (except for the `/`).\n. Here the whole part `.*?(\\r?\\n|$)` can be replaced with `.+`, since I'm pretty sure we don't care about consuming the line feed.\n. You could make use of the `i` flag to simplify you character classes.\n\n``` javascript\n/[a-z_][a-z0-9_]*(?=\\()/i\n```\n. I think there is a missing pipe between `\\|?\\|` and `\\/`\n. I don't see the need for the `insertBefore()` here. The `class-name` pattern could go directly into before the `keyword` key in the object above.\n. You don't need the parentheses here. The `m` flag is not needed either.\n\nActually, I think this could be simplified as `/'[^']*'/`, even if we might want to handle the escaping better. (See my comment in the string test).\n. This is not really a string, but multiple strings. Couldn't you handle the escaping so that this is only one token?\n. The `m` flag is not needed here.\n. `[-+]{2}` matches `--`, `-+`, `+-` and `++`.\n. Here, we might want to get rid of the last group and just end the regexp with `#.+`, unless you really need to consume the line feed.\n. Could you add a comment like \"See at the end\" or something, so that this looks more intentional?\n. Yup, that's fine.\n. I'm not sure of what you mean by artifact, but yes, it was built automatically through gulp.\n. TODO: Change to `=`\n. TODO: Returns the path to a grammar, using the language_path and use_minified config keys.\n. Oh! Yes, the gulp task uses them to know where to insert the generated object.\n. @mAAdhaTTah: Here is where the magic happens.\n. Well, it is discarded in the minified version of the plugin :D\n. I think you'll need a `lookbehind: true` here, so that no char is consumed before the comment.\nAlso, you probably don't need the last group ; `/(^|[^\"{\\\\])#.*/` should be enough (since it does not match line feeds).\n. `$` and `@` will only match when they are surrounded by word characters, since they are themselves non-word chars. Is that what you expect ? If not, they should not be included in the same group as the other keywords.\n. You don't need the parentheses around the whole pattern. Also, you're using the `i` flag so you can simplify the character class a bit. Finally, there is no need for the `g` flag in Prism (it is not used).\n. Please use `true` here. We can leave this kind of compression for the generated minified version.\n. I think `/\"+.*/` would do quite the same thing. Can you test it out?\n. `[-+]{1,2}` matches `-+` and `+-`. You probably wanted to write `--?|\\+\\+?`\nAlso, the HTML-escaped are not used anymore in Prism, please use `<` `>` and `&` directly.\nFinally, you might want to combine those single chars (`!` `?` `*` and `/`) together in a character class: `[!?*\\/]`\n. Please fix the indentation here.\n. This part `(?:[0-9][0-9_]*[0-9]|[0-9])` could probably be rewritten as `[0-9](?:[0-9_]*[0-9])?`.\nAlso, the last group `(?:8|16|32|64|)` might be more explicit written as `(?:8|16|32|64)?`.\n. Why do you use `insertBefore` to handle keywords instead of just overriding it in the `extend` call?\n. Because you took care of making all others groups non-capturing where not needed, may I suggest you add `?:` to the second group here too?\n. Aren't there also failures when strings contain attribute-like or expansion-like substrings?\n. Can you fix the indentation of this line? It needs 4 tabs.\n. Well, there is no reason. And this is a good idea. I'll definitely think about adding it. ;)\n. I just added a basic .editorconfig file. Thanks for suggesting this.\n. For consistency with line 315, I would have probably changed this condition to `if (!match) { continue; }`\n. @zeitgeist87: How recent is the `flags` property? It [looks like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags) it's not supported very well... I just ran into errors running `npm test` and I think they are due to this.\n\nMaybe we could refactor like so:\n\n``` javascript\nvar flags = pattern.pattern.toString().match(/[imuy]*$/)[0];\npattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n```\n\nWhat do you think?\n. @zeitgeist87 I [just did](9893489c04bcea81f3e14d6a00b738a3ce0c4dac), thanks. ;)\n. I changed my mind in the middle, and forgot to remove it here, indeed. Thank you so much for reviewing ;)\n. I think the arrow `<-` near the end of the regexp was not intended to be there anymore.\n. Are `-+` and `+-` valid operators in Jolie? If not, you should write something like `--?|\\+\\+?` instead of `[-+]{1,2}`.\n\nAlso, you could make the regexp more clear by combining all single symbols into a character class : `[!*\\/]`\n. There is no need for the square brackets around `[e]` or `[\\d]`. This would be fine: `e?\\d*`\n. Here, a character class would make the regexp more clear, IMO: `[|;@]`\n. The dot `.` does not need escaping inside a character class.\n. The `@` character does not need escaping in regexps in JS. (This comment applies to the regexp for `'services'`, below, too)\n\nAlso, why the `m` flag?\n. Finally, could you add the non-capturing part `?:` inside all parenthesized group that do not need capture? Like the last one in this regexp, and also in the words list in `'keyword'` and `'builtin'`, at the top. ;)\n. Couldn't `{1,}` be written as `+`? Also why is the last single quote between parentheses? \nFinally, couldn't the single quotes be put outside of the alternative to prevent unneeded repetition? \n. Please use non capturing groups when capture is not needed, using `(?: ... )`. This comment applies to all your regexps. \n. Maybe a `\\b` could be added at the beginning, couldn't it? \n. Same comment here regarding an hypothetical `\\b`\n. Parentheses are not needed around the whole pattern. Same goes for the regexp below and the others in the hsts component. ;)\n. The group starting before `nonce` should also be non capturing \n. Even with the `\\b` at the end? \n. I'm pretty sure there is still a problem with the parentheses in the second group. \n. There is not need for the square brackets around `[l]`. Also, the second `\\b` seems redundant to me. Finally, it looks like your regexp may match nothing at all, since everything is optional. Please replace one of the two first `\\d*` occurrences with `\\d+`. I also suspect this part `e[+-]?\\d*` should be `e[+-]?\\d+` since numbers after the exponent symbol are usually not optional.\n. Couldn't you combine all single operators into one character class `[<>!?*\\/%^]`?\n. `?` is already listed in the `operator` regexp, so I guess it will never match as a `symbol`. It should be removed, then.\n. The last pair of parentheses looks unneeded to me. There is nothing to group or capture here ;)\n. Be aware that `@` is not a word-character (so `\\b@` will match `a@` and not `;@`). I'm not sure this is intended.\n. There are also unneeded parentheses here... I think only the one pair surrounding the keywords is needed. And it should be non-capturing ;)\n. Here, the first 2 pairs of parentheses look unneeded to me (the third one being the capture for the `lookbehind`).\nThe `\\b` after `Aggregates` can be removed as well.\n`\\r` and `\\n` are already part of the `\\s` class, so all instances of `[\\n\\r\\s]*` can be replaced with `\\s*`.\nThe occurrences of `[A-Za-z0-9_]+` should probably be replaced with `\\w+` to improve readibility.\nFinally, all remaining parenthesized groups should be non-capturing by adding `?:`\n. In your first regexp, the blank character after `with` was optional, here it's mandatory. Is it intended?\nIf it is indeed mandatory, the `\\b` is not needed.\n\nPlease take my previous comments into account in this regexp, regarding `\\s` and `\\w+`.\n. Same comment regarding `\\w+`\n. All comments about `aggregates` also apply to this one ;)\n. `\\w+` here\n. `[A-Za-z0-9_]+` can be replaced by `\\w+` ;)\n. The outer parentheses are not needed here. And the inner ones should be made non-capturing.\n\n`/\\b\\d*\\.?\\d+(?:e[+-]?\\d+)?l?\\b/i`\n. I can't see any support for `<=` here. Supposing it exists, it probably should be added to `[!+->=]?=`.\nOn the opposite, I couldn't find any reference to the `=<` operator from a quick look at the docs. Please confirm this isn't a typo.\nI think Jolie also supports `*=` and `%=` (but not `/=`... ?). Could you check?\n. I still don't see any use for the last pair of parentheses. They should be removed.\n. Here, your parentheses still have problems. I think what we expect is this:\n\n`/((?:\\b(?:outputPort|inputPort|in|service|courier)\\b|@)\\s*)\\w+/`\n. There is still a group here `(\\s+with\\s+\\w+)?` that should be made non-capturing.\n. I notice you've removed the initial `\\b`? Is it intended? This one actually made sense to me.\n. Shouldn't it be \"suit\" instead of \"suite\"?\n. I should be \"existing\" instead of \"existed\".\n. \"with its value is the\" should probably be replaced with something like... \"with their values being the\", I guess...\n. \"is to use\" should probably be replaced by \"is to be used\".\n. We should probably use a `` element here, instead of an ``. \n\nOr we could allow for both depending on whether there is an `onClick` property (button) or an `href` property (link).\n. I'm a bit surprised by this change. Are those keywords really required to be at the very beginning of the file? Also, I don't think the eventual spaces should be included, since they are really not part of the keyword, are they?\n. Could you please also update the [test file](https://github.com/PrismJS/prism/blob/gh-pages/tests/languages/nsis/variable_feature.test) for this pattern, so that we have tests illustrating those additions? (If needed, refer to [this page](http://prismjs.com/test-suite.html) to check how to write tests and how to run them.)\n. Ok, then you should add the `m` flag to the regexp. You could also use the `lookbehind` feature to remove the spaces from the match.\n. To remove the blank characters from the match with `lookbehind` (and pass the tests), you need to do the following:\n\n``` javascript\n    'keyword': {\n        pattern: /(^\\s*)(Abort|Add(BrandingImage|Size)|[...]|XPStyle)\\b/m,\n        lookbehind: true\n    },\n```\n. The outer pair of parentheses are not needed here.\n. Same as above, you need to use `lookbehind` here too, and wrap the initial part `^\\s*` into parentheses.\n. One of your changes in the component was to include `.` and `:` in the allowed characters. Could you add examples using those?\n. The brackets are not needed anymore if there is just `\\w` in the character class.\n. Could you please explain that change a bit? There seems to be a large part of the regexp that would now be able to match only whitespaces... I'm afraid this could increase the amount of backtracking.. The consequence is that you are allowing a whole bunch of weird stuff doing this. With the new regexp, `` would match, for example.\n\nI'd prefer a more explicit version, that allows the spread operator. Something like...\n\n```\n/<\\/?[\\w\\.:-]+\\s*(?:\\s+(?:[\\w\\.:-]+(?:=(?:(\"|')(\\\\?[\\w\\W])*?\\1|[^\\s'\">=]+|(\\{[\\w\\W]*?\\})))?|\\{\\.{3}\\w+\\})\\s*)*\\/?>/i\n```\n\nor if you want to combine the spread part with the existing part using curly braces, then something like:\n\n```\n/<\\/?[\\w\\.:-]+\\s*(?:\\s+(?:[\\w\\.:-]+(?:=(?:(\"|')(\\\\?[\\w\\W])*?\\1|[^\\s'\">=]+))?|(?:[\\w\\.:-]+=)?\\{[\\w\\W]*?\\})\\s*)*\\/?>/i\n```\nthough I think the first one is a little bit more readable, and might backtrack a bit less.\n\nWhat do you think?. - Do you really need to capture the line-feed at the beginning? Isn't the `^` anchor enough with the `m` flag?\n- Occurrences of `[_a-zA-Z0-9]` should be simplified as `\\w`.\n- There is no need for the parentheses around `([A-Z][_a-zA-Z0-9]*)`.. This looks quite overkill to me. Remember that Prism is not a linter.\nIs there any case where a single-quoted string of characters should not be highlighted as `char`? If there isn't, you should be able to drastically simplify this regexp.. Also, you might want to add the `greedy` flag, here.. Same comment here: this looks overcomplicated. Are there string-like patterns in Elm that are not to be highlighted as `string`?. Occurrences of `[_a-zA-Z0-9]` should be replaced with `\\w`.. Occurrences of `[_a-zA-Z0-9]` should be replaced with `\\w`.. - Occurrences of `[_a-zA-Z0-9']` should be replaced with `[\\w']`.\n- I might be wrong, but couldn't the whole regexp be rewritten as this one?\n(single dot | special char (including dot) appearing two or more times | special char alone (not including dot) | backtick stuff)\n``/\\s\\.\\s|[-!#$%*+=?&@|~:<>^\\\\\\/.]{2,}|[-!#$%*+=?&@|~:<>^\\\\\\/]|`([A-Z][\\w']*\\.)*[_a-z][\\w']*`/``. Wow those are huge regexps. You might want to consider at least combining some of them?\n\n-  `bool(16|2|3|4|8)?`\n- `double(16(x(1|16|2|4|8))?|1x(1|16|2|4|8)|2(x(1|16|2|4|8))?|3|4(x(1|16|2|4|8))?|8(x(1|16|2|4|8))?)?`\n- `image(1d_(array_|buffer_)?t|2d_(array_(depth_|msaa_depth_|msaa_)?|depth_|msaa_depth_|msaa_)?t|3d_t)`\netc.. Same comment here. I can see a lot of common prefixes that could help combining those alternatives into a shorter regexp. (`native_`, `read_`, `vstore_`, etc.). Same comment here.. Same comment here. All of those share the `cl_` prefix!. Same comment here. They seem to all share the `CL_` prefix, plus other parts are ofter repeated.. Same comment here. `cl` prefix plus other common parts.. True that!. Well, yeah I know... It's supposed to be a temporary fix, anyway. I hope ClipboardJS will release a non-conflicting version soon, so we can properly rollback this.. This is redundant with `codeElement` declared a few lines below.. I understand why you want to rename this data attribute... but it looks quite BC-breaking to me. We would need to update the docs, etc.\n\nI would suggest you do the exact opposite: rename the data attribute used in line-highlight. AFAIK it's only used for the CSS ;). @VitaliyR I think there is something wrong here. `children` is zero-indexed, while `number` (a value from `data-line`) is one-indexed. I tested in local and the highlighted line is indeed shifted down by one when line-numbers is used.. `g` flags are ignored in Prism. Could you remove them?\nAlso, I'm pretty sure `[^\\r\\n]*` is the complicated way of writing `.*`, so we could make this replacement.. There isn't really a need for the capture here, since there is only one possibility. Also, I think this can be rewritten in a more performant way. Could you please rewrite as:\n`/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/`. Please make the parentheses non-capturing here (using `(?:`), since the capture is not used.\nAlso, it's usually better to provide alternatives that exclude each other. This should probably be: `::?|[|']`.\nFinally, I'm worried about the `!-_` part in the character class. I'm pretty sure it's unintended and meant to be `!\\-_`. Anyway, since `a-zA-Z0-9_` seems to be allowed here, I guess this whole character class could be rewritten as `[\\w*+!?-]`.. Can you use non-capturing parentheses for the ones around the keywords list? `(?:def|if|...|zipper)`. Please make the parentheses non-capturing here too.. Please make the parentheses non-capturing here too.\nAlso, `0x` usually indicates support for hexadecimal numbers. But here, letters `a-f` are not allowed. Is it intended?. Please add something like this at the very beginning of this file:\n```html\nClojure\nTo use this language, use the class \"language-clojure\".\n```. Those two are exactly the same, aren't they? There is no need to test for the exact same thing twice.. Can you fix the indentation in this file, please?. The parentheses around `@?` are not needed.\nYou don't have to escape the dash `-` in the character class since it's in this first position.\nYou don't need to escape the `.` in the character class either: `[\\w.]`\nSince you don't use the capture, please make you parentheses non capturing, by adding `?:`.. This pattern can be simplified as `[$.]`. This pattern can be simplified as `#+|[-+*~=^@]`. You don't need to escape the dot and the dash in those character classes: `[.\\w-]`, `[#-]*`, `[\\w+.]`\nThe parentheses in `(\\|)?` can be removed: `\\|?`\nIn the character class `[#\\.^\\-+*~]`, if you move the dash around, you can remove all the escaping: `[#.^+*~-]`\nYou can remove the parentheses around `([\\w+][^$]*)`, around `([\\S+][^$]*)` and around `(\\w+\\.)`\n\nIs this `[\\w+]` intended? This will match a single word-character or a single `+` character, and I don't see many plus signs in the tests below... I have the same doubt for `[\\w+\\.]+`, please double-check.\n\nPlease make the groups non-capturing.\n\nAlso, I'm a bit worried about the actual meaning of everything after the comma. If I simplify it, it goes like\n`(,(\\|?(stuff)?)*)?`: the repeated group is allowed to match nothing at all. Is it intended?. This pattern can be simplified as `[$:{}?.,|]`. You don't need the parentheses around `(\\+)?`\nYou don't need those escapes in `[\\.\\w\\-]` and `[\\/\\.\\w\\-]`\nPlease make the groups non-capturing.. Those lonely chars can be combined in a character class.\nAlso, to avoid backtracking, you should try to exclude every part of the disjunction from the others, that is:\n```js\n/\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/\n```. Same comment as previously.. You can remove the parentheses around `(\\+)?`\nYou can remove the escapes in `[\\.\\w\\-]` -> `[.\\w-]`\nPlease make the groups non-capturing.. `[\\.\\w\\-]` -> `[.\\w-]`. Can be simplified to `[:{}]`. Same comment as previously.. Can be simplified to `[}:$]`. Shouldn't you set `languages_path` here instead?\nAlso, you don't need to escape `\\-` in that case.. Here too, I think you meants `languages_path`.. Please set the owner to you Github username `\"freakmaxi\"`.\n\nOnce this is changed I think we're good to go!. Is there a reason to explicitely allow `\\r` here? Can't you use `;.*`?. Is it intended to consume the final space here? If not, you might want to consider using a positive look-ahead assertion instead `(?= )`.. Please make the group non-capturing her, since you don't need the capture.. `[\\d]` can be simplified to `\\d`.. Please set `owner` to your exact Github username, so that we can link to your page from the Prism download page.. Is there an english version of this reference? If there is we should add it to this comment. If there is not, could you just add `(JP)` somewhere in the comment?. The only differences between IchigoJam BASIC and standard BASIC, AFAICT, lie in the `keyword` and `function` patterns. You should really extend the original `basic` component here.. Please use single quotes around `'function'`, only for consistency.. The parentheses around the whole regexp are not necessary. The same goes for the outer parentheses in\n``(?:(?:\\B`)(?:0|1)+))``.\n\nIn fact, the whole part you added does not need any parentheses, if you rewrite it as: ``\\B`[01]+``. I'm a bit confused here.\nI kinda get that you want the have a word boundary _before_ the `REM`, but are you sure you want to remove the one that was _after_? This would currently make `REMABC` be highlighted as a comment, is it intended?\n\nAlso, `.*` is already a pattern that can match nothing, you don't need to make it optional with `?`.\n\nPlease double check this pattern, and see if something like `/(?:'|\\bREM\\b).*/i` wouldn't be more appropriate.. I see the documentation also refers to hexadecimal numbers. Don't you want to highlight them too?. The reference you linked seems to enumerate existing operators. Since you make a full component for IchigoJam, you might want to make a specific list and not just copy-paste the one from `basic`.\nFor example, the reference mentions `~` but does not seem to have `EQV` or `IMP`. Please double check this.. The reference you linked mentions array variables using `[]` notation. You might want to add those chars to the `punctuation` pattern.. I think you can remove the `:` in the lookbehind as it is (was?) used to prevent URLs to match `//` comments (not even sure it's useful anymore).. Are you sure line terminators can't be escaped? Cause if they are you need to replace `\\\\.` with `\\\\[\\s\\S]`. Please double check. . You can remove the negative look-ahead if you include `\"` in the negated character class. . I think some of those could be combined. Please try to group them by starting character (like `\\/[=/]?` for example).\nAlso you should probably add word boundaries around the keyword operators (`\\b(?:return|and|or|not)\\b`). Please don't include this change in this PR. It is irrelevant to the addition of the support for Io.. I'm reviewing from my phone so I can't actually check, but can you make sure you're using tabs for indentation in this file please? . Please don't include this change in this PR. It is irrelevant to the addition of the support for Io.. There is no need to escape the space char in the char class, is there?\nAlso, the part in the parentheses looks greedy: does this mean `R\"(foo)\"R\"(bar)\"` is a single string? . Is there an actual need for the positive look-ahead here?\nAlso, can you rewrite `(.|\\s)` as `[\\s\\S]`? It's what we use everywhere else as a match-everything token.. Can you use a tab to fix the indentation of this line please?. Same here, please use a tab.. Please don't include this change here and rather make another PR for it.. I think there is no need to require `markup` and `javascript` here, since they are already requirements for `jsx`.. Also, could you please move the component up so that the alphabetical order is based on the `title` value instead of the key. I know this is kinda counter-intuitive, but it's the way we did with JSX, so let's keep it consistent.. Can you write \"TSX\" in uppercase here?. I think you must escape all `<` characters in this file using `<`.\n\nYou can ensure the example displays properly by updating your branch, and then changing [this line](https://github.com/PrismJS/prism/blob/gh-pages/examples.js#L9) to test your [Examples](http://prismjs.com/examples.html) page locally.. I think you removed this test by mistake.. Same here.. Same here. This keyword still exists in the pattern, so it should be tested.. Same here.. Same here.. Same here.. - `emacs` is an editor before being a language. I think it would be less confusing to name the component `emacs-lisp`.\n- Since this is a dialect of Lisp, it would have been interesting to have generic support for Lisp first, and then maybe add specific dialects support if the generic component can't handle them. . - Prism is written is ES5. ES6 is not compatible with IE11 so this component would need to be transpiled or rewrittent in ES5. Here, this just means the `const` should be replaced with `var`.\n- The `_` should not be needed here as it's already included in `\\w`.. - Same thing for fat arrows and template strings. Please use ES5.\n- There is no need to espace the closing parenthesis in the character class at the end.. No need to espace the opening and closing parentheses in the character classes here.. What about line feeds? Are multiline strings supported in Emacs Lisp? If not, the character class should probably also exclude `\\r` and `\\n`.. Since the array contains only one pattern, it could be be removed.. I wonder what the highlighting would be here with a code piece like `(defvar defabc`? Maybe a `^` anchor should be added at the beginning of this regexp.. A `^` anchor might be needed here too.. A ^ anchor might be needed here too.. Currently, your string pattern in the component allows only unescaped line feeds. https://github.com/PrismJS/prism/pull/1297#discussion_r168692063. @akirak has a point, here. In Prism, we do expect the component's \"owner\" to do some kind of maintenance if issues regarding this component arise.\nSo you should probably keep it with your ownership, @JuanCaicedo.. Could you move this down at the very bottom, just before `})(Prism);` please?. Can you make the group non-capturing here? And also remove the `g` flag. You could add the `i` flag to shorten the regexp a bit, and use `\\w` in the second character class. Finally, I think the last `-` is supposed to be escaped (or moved at the end).\nThe whole pattern could be something like:\n`/(?:::|[:|'])\\b[a-z][\\w*+!?-]*\\b/i`. Could you add a test for `nil` here? Since it's handled in the `boolean` pattern.. Ideally, we should add checks for each and every keyword here.. Could you indent those lines with a tab, please?. I agree it makes the file more consistent. But this change should not be included in this PR as it is unrelated to the addition of emacs.. Please don't include those changes in this PR. They are perfectly ok, except they are unrelated to the addition of emacs.. Please restore this semicolon.. Could you please wrap the whole file in `(function (Prism) {` and `}(Prism));` please ? That way, we won't pollute the global scope with vars and stuff.. You added `elisp` and `lisp` in this file, but not `emacs`.\nThe general rule here is to only add one entry, the _main_ one. So I guess here it should be `lisp` since it's the most generic. Please remove the `elisp` entry.\n\nThat also means the component should be renamed to `prism-lisp`, along with the test folder and so on.. Please add semicolons, everywhere needed, in this file. We don't do semicolon-less JS in this repo.. Please remove all trailing commas in the file.. Couldn't those two patterns be merged into one?. Could you add a comment here, something like `// See below` so that it's obvious this will be filled later on.. Same here.. Those two patterns could definitely be merged into a single disjunction: ``/['`,]?\\(|[)\\[\\]]/``. I would suggest move `lisp` in first position, so that it's made clear it is the main language here.. Same thing here: let's use `Lisp` as the main language. And move the class `\"language-lisp\"` in first position.. This is perfectly fine. :). Can you move it above `livescript` to keep the alphabetical order please?. I don't think this file (or the minified version) should have changed, because the `title` of your component is now the capitalized version of its alias.\n\nCan you run `gulp` again to regenerate this file, please?. Ideally, we should test the full list, here.. Please use tabs instead of spaces to indent this file.. Please indent this line with a tab.. You could use the `hasAttribute` method instead, to allow for empty values or absence of value too.. If I understand this correctly, it means users who don't use the `data-filter` attribute won't benefit from the styled ``. Am I right? Couldn't this behaviour be added in every cases?. I think that would be better to have a predictible behaviour when the span is always present, indeed. But yes we need to make sure nothing breaks.. I'm not a big fan of iterating through Arrays with `for/in` loops. Could you change this to a regular `for` loop please?. You might want to specify `parseInt`'s second parameter to `10`, just to make `012-013` work the same as `12-13`.. Same here, please use a regular `for` loop.. Same here.. I'm wondering: if the class of the `` is something like `language-shell command-line foobar`, won't it be replaced with `language-shellfoobar` here? The replacement string should probably be a space `' '`.. Maybe you could move that declaration outside of the hooks definitions, since you use it twice.. Same here, please use a regular `for` loop.. Oh! I never realized a minified version was generated for it.\nI don't think it's needed, though. I'll have to update the gulpfile to exclude it. In the meantime, you can remove it from this PR, indeed.\n\nSorry about this, and thanks for pointing it out!. It's ok, we can keep it.. Due to [a recent update](https://github.com/PrismJS/prism/commit/c3ed5b5247484ab3b27118cb4b5301c0bb662361), you can remove everything above this comment, in this file. The example header will be generated automatically.. Can you capitalize the name here? `\"Lisp\"`\n\nNote that you'll need to run `gulp` after this change, to update the Show Language plugin files.. Looks like there's a duplicate here. I don't think there's a need to test it twice.. This change should not be here. This file was changed 10 days ago in https://github.com/PrismJS/prism/commit/8aea939a6287f0147d1d64d3f0a238b6cadbc9c6. `#9a6e3a` is the correct value.. On a really quick first look, Solidity appears to be closer to JavaScript than C-like. Don't you think you'd benefit from extending `javascript` directly?. You don't need to use an object here, since you only need the `pattern` key. You can provide the regexp directly.\nAlso, you might want to reorder the keywords alphabetically for easier additions/removal in the future.\nFinally, you don't need to escape the `_`.. Please use non-capturing groups `(?:)` everywhere capture is not needed. Here, all groups can be made non-capturing.\nAlso, I think there are unneeded groups in the second part of the regexp:\n- `([A-Za-z_]\\w*)` I think the parentheses here can be removed\n- `((?:[A-Za-z_][\\,\\s]*)*)` the outer parentheses here can be removed too, and you don't need to escape `,`.. My previous comment also applies to this line. Except you do need the first group to be capturing, since it will be used by the `lookbehind` feature.. This is some kind of indentation mess around here. Please use exclusively tabs for indentation.. Those three lines seem to be exactly the same as the `javascript` component, hence my earlier suggestion: you should probably extend `javascript` instead of `c-like` so that they don't need to be repeated.. Please use non-capturing groups everywhere in this regexp.\nAlso, I think the parentheses around `([A-Za-z_]\\w*)` are not needed.\nFinally, you don't need to escape the `)` inside a character class.. Same as my previous comment, except you do need the first capture for the `lookbehind` to work.. The `lookbehind` here seems unused, since there is no capture in the pattern. Also, please don't use trailing commas in objects.\nAnyway, since you should end up with only a pattern, you can skip the object and put the regexp directly as the value for `punctuation:`.. The parentheses around `(mapping)` can be removed. Same goes for `(.*)` and ([A-Za-z_]\\w*).\nPlease make all remaining groups non-capturing.. The outer parentheses of this regexp can be removed. Also if you use only the `pattern`, you can remove the object and use a regexp directly.\nExcept here, you are matching the initial spaces as part of the keyword. Maybe you'd like to use a `lookbehind` to exclude them.. This should probably be removed if you extend `javascript`. Furthermore, the `constant` pattern was already declared previously.. This should probably be removed if you extend `javascript`.. Please remove this change. This array lists the components included by default in the `prism.js` file used of the website. Solidity does not need to be added there.. Please remove this file from the PR. It is unrelated to the addition of support for Solidity.. Please remove this file from this PR, it is unrelated to the addition of support for Solidity.. Please don't change this file. (It should be restored anyway once you remove the changes in the gulpfile)\nThis is the file used by Prism's website. There is no need for Solidity there.. I would suggest using the name `tt` as the main name, since it seems to be the more generic (if I understand correctly, `tt2` would be the second version?). If you do so, you'll need to rename the component file too.. Also, starting with Prism 1.14, we made it more simple to craft templating languages using the placeholders `___...___`.\nTo benefit from this, your component should `\"require\": \"markup-templating\"` here. That way, you'll have access to utilities functions to automate the placeholders creation/replacement process.\n\nHave a look at the [ERB](https://github.com/PrismJS/prism/blob/gh-pages/components/prism-erb.js), [Handlebars](https://github.com/PrismJS/prism/blob/gh-pages/components/prism-handlebars.js), [PHP](https://github.com/PrismJS/prism/blob/gh-pages/components/prism-php.js) or [Smarty](https://github.com/PrismJS/prism/blob/gh-pages/components/prism-smarty.js) components for examples. You can also take a look at the functions in the [Markup-templating](https://github.com/PrismJS/prism/blob/gh-pages/components/prism-markup-templating.js) component.\n\nThe way to create/replace the placeholders changed a bit, but from your component perspective, it should only make it simpler, really.. If you use the new markup-templating component (see my previous comment), you won't have to extend `markup` anymore.. Something looks weird here: `&&\\|\\|!`. Is it intended? Wasn't it supposed to be something like... `&&|\\|\\||!` instead, maybe?\n\nAlso, I'm not sure the word-boundaries are a good idea for the operators other than words. Your regexp should probably look like:\n`/=>|==|...|\\b(?:and|or|not)\\b/`. You don't need those three escapes in the caracter class. Also, you could benefit from the `i` flag here to remove the `A-Z` occurrences, and could use `\\d` instead of `0-9`.. As previously expressed, this whole code can now be drastically simplified by using the functions available in the Markup-templating component. Plus it will make the component fully compatible with NodeJS.. Sounds good to me. No alias at all, use `tt2` as the identifier. Maybe just simplify the title to \"Template Toolkit 2\" :wink: . Haha, you're right that I usually go for the shortest form instead, at the cost of a tiny bit of readability. But hey, regexps _are_ quite hard to read anyway. ^^\n\n(Note that regarding your unicode-related points, I'm pretty sure they do not apply unless the `u` flag is used, if they even do.). No worries.. Couldn't `[\\011-\\015\\040]` be replaced with `\\s`? Both don't have _exactly_ the same meaning but it would make the regexp more clear I think.\nAlso, you can replace `_a-z0-9` with `\\w`.\nDo you need the colon `:` inside the second part too?. We've decided to use `[\\s\\S]` instead of `[^]` in #1107. Could you change this?. Considering the large number of keywords here, you might want to consider ordering them alphabetically, for easier addition/removal in the future.. I think you should add a line like `delete Prism.languages.tt2['operator'];` before you call `insertBefore`, so that the `operator` property can effectively be inserted. If it already exists, it will have unexpected behaviour.. See my previous comment regarding the deletion of the `operator` property. It should allow you to remove those lines.. This regexp is super smart! Love it!\n\nIt looks like TT2 allows multiline strings. Souldn't the regexp allow to escape line feeds? That is using `\\\\[\\s\\S]` instead of `\\\\.`?. Same comment regarding escaped line feeds.. You can replace `[_a-z0-9]` with `\\w`.. Do variables really need to be greedy? The `greedy` behaviour has a bit of a performance hit, so you should make sure you actually require it.. Please indent this comment with a tab.. Same comment here about the `greedy` feature.. Same comment here about `[^]`. Please use `[\\s\\S]` instead.. You'll probably need to escape the `<` characters using `<` in `` and ``.. You could probably combine some patterns here to avoid backtracking.\nAlso, the parentheses around the whole regexp are not needed.\nFinally, wouldn't it be safer to add `\\b` assertions around the keyword operators?\n\nSomething like `/=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/`?. \"supp**o**rted\"\n\nEDIT: Considering the title of the PR, I guess you really don't like the \"o\" in \"support\". :smile: . Please indent this line with a tab.. If you were to reorder the keywords in the regexp, it would be nice to reorder the tests alphabetically too. Note that tests do not need to be valid structures in TT2.\nIt's perfectly ok if you test something like:\n```\n...\n[% ELSE %]\n[% ELSIF %]\n[% END %]\n...\n```\n. Identation is a bit weird in this file. Maybe you can keep it concise (I guess it was the intention here) doing something like:\n\n```\n[\n    [\"tt2\", [\n        [\"delimiter\", \"[%\"], [\"keyword\", \"GET\"], \n        [\"variable\", \"foo\"], [\"delimiter\", \"%]\"]\n    ]],\n```. Same comment here regarding indentation.. Indentation seems a bit off here too.\nSomething like the following would be easier to read:\n```\n[\"double-quoted-string\", [\n    \"\\\"Hello, \",\n    [\"variable\", \"$name\"],\n    \"!\\\"\"\n],\n```. Could you add a test for the `Project::Specials` kind of variables here? I know it's technically already tested in the test for keywords, but since it's handled by the `variable` pattern, it definitely belongs here too.. Ok, could you then add a link to this doc page, in a comment above the regexp?. No, it's not really a problem. It was just a suggestion, feel free to let it as it is.. You could probably combine some patterns here to avoid backtracking.\nAlso, the parentheses around the whole regexp are not needed.\nFinally, wouldn't it be safer to add `\\b` assertions around the keyword operators?\n\nSomething like `/=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/`?. You'll probably need to escape the `<` characters using `<` in `` and ``.. There is a typo here: \"supp**o**rted\".. Please indent this line with a tab.. Do variables really need to be greedy? The `greedy` behaviour has a bit of a performance hit, so you should make sure you actually require it.. You can replace `[_a-z0-9]` with `\\w`.. Same comment here about the `greedy` feature.. Hahaha. I take good note of this. And if you really want to revert this change, you might. But you'd have to add a comment above the regexp, specifying what are those characters, something like\n`// [\\011-\\015\\040] -> Tab, LF, vertical tab, form feed, CR and space`\nor use the character escapes `/[\\t\\n\\v\\f\\r ]/`. Just so that the meaning is obvious without looking at an ASCII reference table. :wink: . Actually no, it wasn't to prevent an infinite loop. I think an infinite loop can still happen if we have circular dependencies, hopefully this is not the case at this time AFAIK.\n\nIt was supposed to be an optimisation, because you need to reload a component so that it takes its updated \"peerDependencies\" into account, but you don't need to reload the whole \"inheritance\" tree. There's already a lot of files being required there, so I tried to keep the amount as low as possible.. I'm not sure I understand your whole idea here.\n\nWe could indeed process the languages only once, though. We could build a structure that maps a language to its \"peerDependencies\" and therefore just access it by key. Something like:\n\n```js\nvar dependentsMap = null;\nfunction getOptionallyDependents(mainLanguage) {\n    if (!dependentsMap) {\n        dependentsMap = {};\n        /* Build a structure like:\n        dependentsMap = {\n            \"fortran\": [\"pure\"],\n            \"coffeescript\": [\"haml\", \"pug\"],\n            ...\n        }\n        */\n    }\n    return dependentsMap[mainLanguage] || [];\n}\n```\n\nIs it what you meant?. Do we want to remove any reference to manual requiring? I mean it _can_ still be useful, for example to load a custom language definition.. We used `loadLanguages()` previously. We should probably harmonise this.. You do not need to escape the `{` in the character class in those two regexps.\nAlso, we should probably include `\\r` in the character class too, to handle the different line endings.. You do not need to escape the `+` in the character class.\nAlso, the last two pairs of parentheses are not needed.. You can replace all occurrences of `([0-9]+)` with `\\d+` (no parentheses needed here) in those two regexps.\nAlso, it seems the `m` could be removed, since the regexp does not use `^` or `$` assertions.\nFinally, the `[^\\n]*` part could probably be replaced with `.*`.. The parentheses around `(.*)` are not needed.. Considering you added this test, I think it can be overkill to also have the `pass_feature` and `fail_feature` tests separately.. The `plan` pattern in the language definition seems to also include an optional directive (e.g. `# foobar`) after the numbers part. If this is what is intended, we should add a test for it here.. Sorry for getting there so late! Actually it does not. Examples files are included dynamically, and they are all wrapped in a `` element, using the language the example is for. (See https://github.com/PrismJS/prism/blob/master/examples.js#L69-L73). Oh, sorry. I stopped reading at your \"Thanks!\" comment. x) Please ignore me.. The non-capturing group and the `i` flag are not needed here: `/\\$\\{[^}]+\\}/`. The `#` character does not need to be escaped in JS regexps.. This regexp could probably be condensed to `/\\$(?:\\w+|[#?*!@$])/`. Also, the `i` flag seems unneeded.. Can you make all groups but the very first one non-capturing (using `?:`) please?\nAlso, the group around `\\w+` is not needed.\n\nFinally, I think this pattern definition should have an `alias: 'function'`, so that it's colored without need for customisation.. The group around `\\w+` is not needed.\nAnd this pattern could have an `alias: 'function'` too.. Why don't you use the same `(^|\\W)` here that you used for the `function` keyword previously? What special cases does it handle?\n\nAlso, can you make all the groups but the first one non-capturing please?\nAnd you can remove the group around `\\w+`.. The group around `\\w+?` can be removed.\nAlso, it might be safer to replace all occurrences of `\\r?\\n` with `(?:\\r?\\n|\\r)`.. Yay, that's a nice addition there!\n\nMy previous comment regarding unquoted heredoc strings also applies here.\n\nWe could probably add a back-reference here to ensure the quotes are the same on both sides of the tag. Something like `([\"'])\\w+?\\2`?. You don't need to escape the `)` in the character class at the end. This is also true for the `keyword`, `builtin` and `boolean` patterns below.\n\nAlso, I think we should remove the comment `// Originally based on http://ss64.com/bash/` since you split the list between functions and builtins.. So I learnt by reading your document that they are actually not booleans. :astonished: Do you think they should be moved to the `function` pattern above?. You can remove the group around `&[0-9]`. Also, `[0-9]` could be replaced with `\\d`.. The part `&>|&&?` could be replaced with `&[>&]?`, and `\\|&|\\|\\|?` with `\\|[&|]?` without hurting the readability too much. \n\n(I would even refactor the whole regexp by grouping the operators based on their first character to avoid backtracking as much as possible, but that would certainly do hurt readability). Is the lookbehind needed here? I don't see any operator that uses a number except in first position. It seems using `^` would be sufficient.\nThe look-ahead also seems unneeded to me. The operators listed do not seem to allow for multiple digits numbers anyway.\n\nAlso, you can remove the group around `\\d`.. You can include the `\\\\` in the character class here.. Could you make the groups non-capturing and remove the unneeded one around the middle part?\nAlso, I think the look-ahead can be replaced with a simple `\\b` here.\n\nResult would be something like `/(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/`. It would be great to test for the whole list from `envVarList`, at least in one of their syntaxes (probably the simplest `$XXX` form).. This is quite hard to read, especially when an array wraps on a new line. We should rather use the same line repartition as the test code.\n\n```\n    [\"keyword\", \"if\"],\n    [\"keyword\", \"then\"],\n    ...\n    [\"keyword\", \"for\"], [\"for-or-select\", \"x\"], [\"keyword\", \"in\"], \" a\\r\\n\",\n    ...\n```. Would you mind put each function on its own line? The readability would improve a lot.\n\n```\napropos\napt\napt-get\naptitude\naspell\n...\n```\n\n```\n    [\"function\", \"apropos\"],\n    [\"function\", \"apt\"],\n    [\"function\", \"apt-get\"],\n    [\"function\", \"aptitude\"],\n    [\"function\", \"aspell\"],\n    ...\n```. I wonder if this test file is needed on its own. Maybe a file `operator_feature.test` could test all operators including process substitution?. Same comment here, this could go in a new test file that checks all operators.. We usually try to have a correspondance between test files' names and patterns in the language definition. So you should rename this file `assign-left_feature.test` or rename the pattern, so that it's more clear what this test file does without even reading it.. Same comment here. Can you rename the file `for-or-select_feature.test` please?. Can you rename this file `function-name_feature.test` please?. Also, it would be great to have a similar file `builtin_feature.test` to test the `builtin` pattern you added.. This is probably no need for the sentence here. The tests makes it obvious. ;). They probably are a bit overkill, but they proved themselves useful in the past on a few occasions. \nAnd they are quick to write with a few \"search and replace\" action.. I see you separated the tests for class names in multiple files... But I'm having a hard time figuring out which test file applies to which pattern here. Would you mind adding a comment above each example specifying stuff like \"Declaration\", \"Attribute\", \"Variable parameters\", etc.?. This looks complicated. Could you explain what are the different cases you want to match here? The examples listed in the comments above look more simple that what this regexp seems to achieve.\n\nIt appears to match weird stuff like `Foo.bar.baz<>,>>>>,,>.foo.bar[)?<<.foo<> test {` and there seems to be some backtracking taking place here and there.. Am I right assuming no underscores are allowed in the decimal part of floats?. This file should be named `type-expression_feature.test` to reflect the pattern it's testing.. Could you add a simple test file `constructor-invocation_feature.test` to test this pattern please?\nI guess a `type-list_feature.test` would also be needed.. I feel like this is redundant with the first class-name pattern defined previously. Are those look-ahead actually needed? Are there cases where a \"class name-like\" word (for example a capitalized word `Foo`) can appear in C# while not being an actual class name?. You could add a test with a base-10 number using underscores too.. The very first group need to stay capturing `(^|\\W)`. It's used by the `lookbehind` feature. (We do need to know what was matched to be able to remove it later.). Woops you're right! I missed the `\\2` there. Sorry about that!. Here too, I missed the `\\2`, so the quote stuff would look like `([\"'])(\\w+?)\\2` and the backreference at the end would be `\\3`.. Oops, indeed it is!. Alright. As long as we have good reasons to do complicated stuff, I'm ok with that ^^\n.",
    "indexzero": "+1 to the idea of node.js support, but I think maintaining a separate file is a mistake. Based on my brief code read I noticed that most of the internals are based on strings and not the DOM. \nSo the only incompatibility I can see @LeaVerou is use of the document keyword in four places:\n- .highlightAll()\n- Getting script tags\n- Listening to the DOMContentLoaded event\nMost of these could be easily cleaned up and wrapped in something like:\n(function (exports, document) {\n    //\n    // Existing code...\n    //\n  })(typeof exports === \"object\" ? exports : window, typeof document === \"undefined\" ? document : {});\nThen all you have to do is add a package.json file, publish it to npm and you're all set. \n. Oops I might have misread this; @buymeasoda is node/prism.js a generated file?\n. Just an FYI I've opted to go with highlight.js in the meantime for things like blacksmith: http://github.com/flatiron/blacksmith.\n@LeaVerou If you can give us some direction / your approval I can make it happen. \n. ",
    "balupton": "We've also gone with highlight.js for DocPad, but some users have expressed interest in prism as well. It seems that progress on this has stalled, is there a working node version up and running already @buymeasoda?\n. ",
    "remybach": "I think that kind of decision lies with @LeaVerou, not with me tbh since it's her site and her project. As far as I'm concerned, the way the header currently shows themes is going to get really messy, really quickly the more themes are added so I don't think it's up to me to make that big of a decision.\n@LeaVerou, could you by any chance provide some clarity on how you want us to submit themes/plugins? ie: What to include when we submit a pull request.\n. Just in case you manage to get to this, please hold fire until I commit better colours. I couldn't tell on my little netbook screen in Ubuntu how off they were!\n. Hi @LeaVerou, no worries at all... I know you've been rather busy!\nNo, that's some other crappy quick and easy thing I threw onto my WordPress installation a while back :P (before you released Prism).\nYou can see a live example of it here: remy.bach.me.uk/superlabels_demo.\nThanks again :+1: \n. Doh... I should totally have merged in master - my apologies. Going to submit another pull request.\n. ",
    "poifox": "@loganfranken IDK, I stopped using the lib shortly after reporting this bug, I may start using it soon on my personal site, I'll let you know if I notice anything.\n. ",
    "vvo": "Yup it does works, should we merge this ?\n. ",
    "CIAvash": "What should it be named?\nSince it was between before-highlight and after-highlight, I used between-highlight! :) But it's more like before-insert.\n. ",
    "davidl": "I feel compelled to add that Prism is a great tool thank you!\n. A nice looking theme! It seems the example is located at the root of the \"prism\" directory: http://lifeasrose.ca/code/prism/\n. ",
    "jelmerdemaat": "Could be fixed already, haven't encountered it since.\n. ",
    "zeitgeist87": "This should be merged. It correctly fixes a bug.\n. Done :)\n. I think the problem is, that PHP and the line number plugin both use the after-highlight hook. This is internally implemented as an array, so the order matters. If you include the line-number plugin first and then php it won't work. If you do it the other way around it will work. I haven't tested that theory though. Could someone confirm that?\nEDIT: No that's not it. Seems to be more complicated than that...\n. I have submitted a PR #337 with a fix for the issue  It fixes the problem for me, can anyone confirm that it is fixed by that change?\n. Wouldn't it be easier to just add a new branch master and keep it in sync with gh-pages, instead of using a subtree. Future commits would go to master and updating the webpage would look something like this: \n1. git checkout gh-pages\n2. git reset --hard master\n3. git push\n4. git checkout master\n. Seems to work fine with highlightElement: http://plnkr.co/edit/VzXDWlia55yJrGnFBneq?p=preview\n. This is just a joke, so don't take it too seriously :). But it does actually work and it solves most of the above problems. I don't know how good the performance is though. I use a fake RegExp object and do some extra checking. It handles single quotes, regexes, double quotes and escaped quotes. I don't think your proposed solutions can do that.\n``` js\nPrism.languages.clike = {\n    'comment':{\n        pattern: {\n            pattern: /(?:\\/\\/.|\\/*[\\w\\W]?*\\/)/g,\n            exec: function(str) {\n                var p = this.pattern,\n                    match;\n            p.lastIndex = 0;\n            match = p.exec(str);\n            while (match) {\n                var inDoubleQuote = false,\n                    inSingleQuote = false,\n                    inRegex = false,\n                    isEscaped = false;\n\n                for (var i = 0; i < match.index; ++i) {\n                    switch(str[i]) {\n                        case '\"':\n                            inDoubleQuote = (!inDoubleQuote || isEscaped) &&\n                                            !inSingleQuote &&\n                                            !inRegex;\n                            break;\n                        case '\\'':\n                            inSingleQuote = !inDoubleQuote &&\n                                            (!inSingleQuote || isEscaped) &&\n                                            !inRegex;\n                            break;\n                        case '/':\n                            inRegex = !inDoubleQuote &&\n                                        !inSingleQuote &&\n                                        (!inRegex || isEscaped);\n                            break;\n                        case '\\n':\n                            inRegex = false;\n                            break;\n                        case '\\\\':\n                            isEscaped = !isEscaped;\n                            break;\n                        default:\n                            isEscaped = false;\n                    }\n                }\n\n                if (!inDoubleQuote && !inSingleQuote && !inRegex)\n                    return match;\n\n                p.lastIndex = match.index + 1;\n                match = p.exec(str);\n            }\n            return match;\n        }\n    }\n},\n\n...\n```\n. @WebReflection your solution would certainly work for strings, although it seems more like a hack. Do you have any proposal for turning it into a general purpose solution?\nWe have recently merged a partial solution for that problem #779. It can correctly handle strings with one comment inside but not more (e.g.: \"hello/**/world!\")\n. > well, the general purpose solution is what you call the hack:\n\nfind all strings and put a string placeholder\nparse everything without problems and ignoring all strings content\nput strings content back using the placeholder\n\nI understand how it works and it is a nice solution. With general purpose solution I mean something that works for any grammar and not only for strings but also for other stuff. This problem is not limited to strings. For example you can have a regex with strings inside /something\"foo\"something\"bar\"/\n. > i still suggest using a special (delimited) tokenizer which handles only delimited tokens (e.g comments, strings, regexps, cdata and what not, which are all over the place). it is not difficult, it is not slower (in fact it will be faster) and is actually intuitive to define in a specification e.g\nI've already implemented exactly that some time ago, but the code size got too big. The problem is that prism-core.js has to stay small and light-weight, because that is one of the major features of Prism.\n. > Does this make sense?\nWell it seems to get quite complicated. The constraints for performance and code size are quite challenging here. We already had a few proposed solutions that didn't cut the mustard. Nevertheless I am happy to test and review any proof of concept implementations...\n. @WebReflection Your expanded solution works as a proof of concept, but you have to fully integrate it into prism-core.js, which I believe is possible and could work. However I am still skeptical if it would be any better than the solution we already have. The input for your function must be an arbitrary Prism grammar for an arbitrary language. It shouldn't be limited to JavaScript.\nAlso the string inside of a regex example var re = /this is a re\" with a string \"inside/g; doesn't work, because placeRe encodes the \" characters to &quot;. Therefore they cannot be found any more by the restoreStr regex.\n\nThere are surely edge cases, but since edge cases are a \"won't fix\" here, due nature of the parser which is RegExp based and, as such, cannot be perfect, I guess at least reducing them would be already a good achievement.\n\nWe have recently merged a general purpose, small solution with minimal performance impact, which reduces these edge cases significantly #779. \n. Sure! I have updated the documentation and added it to the PR. Maybe a native speaker could check my spelling and grammar...\n. Thanks for merging it. I also wasn't sure if # is the right choice. I am of course open for suggestions. I really like the idea of using arrays, because my current approach with the separation character is kind of a hack. I will try to implement that.\n. Yes #321 undid this change.\nI was just about to create a PR for clike and coffeescript to use the new syntax.\nI like your idea of using an object property like classes instead of my hacky proposal. I sometimes tend to do quick and dirty hacks instead of thinking a bit further and designing a proper solution. But do you think this feature is really necessary and useful in the first place? I am not entirely sure about that.\n. @japborst What do you think about this PR? You probably know Latex better than I do ;)\n. Is anyone interested in this? Is it maybe a bit over the top? I modelled the highlighting after the Latex editor Kile, which I personally use. I would be happy to change it. Is it better to reuse existing tokens like string or regex for different things or should I update all the themes with new more appropriate tokens like equation or headline? Is it ok to use helper functions in a language definition if they do not leak into the global namespace?\n. Hi @japborst,\nThanks for the test post. As far as I can see the \\functions are correctly recognised and wrapped into <span class=\"token function\">\\begin</span> tags, but your theme doesn't seem to highlight functions at all. With the default theme it looks quite nice. But that is a difficult issue. You used the selector token class for functions in your original approach. Presumably that looks nice with your theme, but with the default theme it has the same color as string and everything looks green.\nI don't know what would be the best way to solve this.\n\nEdit: @zeitgeist87 Sorry btw for my late reply, been away for couple of days\n\nNo problem :)\n. I am currently not happy with the fact, that \\section, \\chapter etc are bold orange in the default theme. I would prefer them to just stand out a bit more. Maybe just bold and black, but I don't think that's possible without modifying all the themes.\n. I have updated this pull request to use aliases and here is a before after picture:\n\n. > What does // do in latex? Can\u2019t find any docs. If it\u2019s comments, it shouldn't need aliases to be\n\nhighlighted.\n\nDo you mean the stuff that is inside the verbatim environment? That is java code. The verbatim environment is kind of like the html <pre> tag. It preserves whitespace and it uses a monospaced font in the final document. You can use it to print code in your documents. I highlighted the verbatim environment as cdata and didn't use an alias for that, because I think cdata is close enough. In the default theme cdata looks like a comment.\n\nFor example, why do we need matchLatexEnv? It looks like something that could be done in 1 \nregex. However, if there is significant need for a regex builder, it would make more sense to \ninclude it in the core. Perhaps something like what I did for dabblet.\n\nYes matchLatexEnv is probably not needed, but it was originally more complicated, because I didn't know about the lookahead regex feature. With lookahead it can be done in one regex. I will fix that. Your code from dabblet looks interesting. It is a really nice way to split up complicated regexes. My primary goal was to reduce repetiton. I need to think about that.\n. @LeaVerou I removed the generating functions. They really weren't necessary at all. I still use two local variables, but I could remove them as well.\n. I simplified this PR significantly. I would appreciate any review or comment...\n. I have tested it with C and C++ and it seems to work very well. Today it is quite late, but I will test it tomorrow with the more important languages like javascript, markup and css and probably a few of the others too. By the way, do you know if  pattern instanceof Array works with all supported browsers? Unfortunately I have no access to Windows and cannot test it on IE.\n. I have now tested it with all languages on the examples.html page. Everything worked flawlessly, without any bugs.\nBut currently examples.html is seriously broken, because Java, Http and Coffescript are not included in the generated prism.js. Additionally Java operators are seriously broken. They aren't even correctly highlighted on the examples.html page. These are independent bugs and not caused by this PR.\nI tried to fix the above problems. Shall I include the commits with this PR or create a new one?\n. I didn't know there was a helper function like that. I will update the PR accordingly.\nI thought about converting everything into an array and use a normal for loop, but I wanted to reduce the performance impact as much as possible. Since most tokens do not use arrays your suggestion would add a needless memory allocation to every iteration of the loop.  I am not sure if browsers can optimize that away. I could instead add more comments explaining what the loop does...\nHmm on the other hand maybe you are right. It would only allocate one additional array for every token in the language. That shouldn't be too bad.\n. I have now changed it to use a for loop as suggested by @apfelbox and I have added another commit to allow for multiple CSS classes.\n. @LeaVerou I agree I should have used separate PRs. Sorry for the extra trouble. I will fix it right away.\n. Should be fixed now.\n. No problem. I already changed it :)\n. An alternative would be to add the following to examples.html\nhtml\n<script src=\"/components/prism-java.js\"></script>\n<script src=\"/components/prism-http.js\"></script>\n<script src=\"/components/prism-coffeescript.js\"></script>\n. I changed the commit to include the scripts in examples.html instead of the gulpfile. You are right, that's clearly the better solution. I don't know why I included them in the gulpfile in the first place.\n. I should probably add, that block-comment is currently not supported by any theme, so block comments are not highlighted at all.\n. @apfelbox The existing CSS classes are designed to highlight HTML, CSS and JS, but it is often hard to find a suitable match for other languages. It would be very messy to add new classes for every language and update all the themes. I think it would be nice to have a few general styles, that are defined in all themes like token-bold or token-emphasize. By combining these with the existing classes one could get more flexibility for example in highlighting two different types of strings or numbers.\nBut it is basically a nice-to-have feature. On the other hand language definitions should probably stay free of styling information. Maybe it is better to keep the two totally separated...\n. Thanks for taking the time and reviewing it. I am awful at naming things, but how about this list. I have included the ones you mentioned in #321:\n- extra\n- tokens\n- subtoken\n- meta\n- classes\n- styles\n. How about include, require or import like you load a module with a programming language. Or one of the following:\n- expand/expansion\n- extend/extension\n- add-on\n- enhance/enhancement\n- categories\n- group\n- lookandfeel\n- belongs/belongsTo\n- refinement/refinementType\n- map/mapped/mapTo\n- additional\n. I just changed the name of the option to alias and updated the commit message and the documentation.\n. @LeaVerou well it isn't exactly an alias but it is quite close don't you think?\njs\n{\n    'preprocessor': {\n        pattern: /someregex/g,\n        alias: 'property'\n    } \n}\npreprocessor is another name for property, preprocessor is an alias for property, preprocessor is highlighted the same as property. Besides it is a nice short catchy name ;)\nIn the languages I have contributed, there are lots of places, where I wrote in the comments something like: \"This is acutally a preprocessor statement, but I reused the property class to highlight it\". It would be great if I could instead do something like the above code sample.\nThe advantages are, that the language looks good with current themes, and later on a theme author can acutally implement the preprocessor class to look different. Also people who use Prism on their website could descide, that they like how the property class looks, but they want to highlight preprocessor differently.\n. Nice, I will update my PRs for bash and latex to use aliases.\n. Oh I didn't know that! I thought I was really smart with that one. In that case it is of course totally useless :) \n. Thanks for reviewing it. I know it breaks with the current design pattern of Prism. Prism is designed to be small and simple yet powerful and this patch would complicate language definitions.\nI made some performance tests to determine the best way to go through every char in a string. Unsurprisingly the winner is charCodeAt(): http://jsperf.com/a-simple-parser-in-js\nI was surprised, that firefox beats chrome in this test by a fair margin.\nI will test the performance impact on Prism as a whole next... \n. I have created a JSPerf Testcase to test this: http://jsperf.com/test-performance-of-prism-extension\nIt compares the current Prism with the extended version. On Firefox I get very unreliable results (+- 50%). Sometimes the old version is faster sometimes the new version. I suspect, that it has to do with something unrelated, like memory allocation or garbage collection, because on Chrome I get very reliable results (+-1%). Here the two versions seem to be exactly the same.\nThe sample code is Prism itself copied four or five times, to get a realistic sample.\n. How would you feel about a declarative property which does essentially the same thing?\njs\n'comment': {\n    pattern: /\\/\\*[\\w\\W]*?\\*\\/|\\/\\/.*/g,\n    notInBetween: [ '\"', '\\'', '/']\n}\n. Nevermind this issue only occurs if you copy and paste the resulting code. If you use the download button everything works.\n. Hi @LeaVerou,\nSorry for the confusion. You stated in the comments of #331, that you didn't particularily like the idea of a callback function and so I started to think about alternatives, that would keep the language definitions clean and preserve the declarative style. The two PRs are meant as alternatives to choose from. I personally like #334 better, because it leaves the language definitions neat and simple.\nThey could however easily be made compatible, if you want to support both...\n. I just realized, that my coding style is not in line with the projects guidelines. I will fix that.\n. This would solve the issue #381, but I can understand if it is too much extra code for Prism. I also think it scales well, because the generated code can be compiled into assembler by most JavaScript-Engines. But since this was just an experiment I will close the PR if it isn't suitable for Prism...\n. > notInBetween is suboptimal: Every nested structure needs to \u201cknow\u201d about every other nested structure (unless I'm misunderstanding it).\nYes you are correct.\n\nIt would be much better to just provide the start and end token and let Prism figure it out\u2026\n\nYes that is a great idea. I think you could easily turn it around. The first time a language is used Prism would walk through the language definition and collect all the start and end tokens. Then it would generate the extremly simple parser, that only tracks if you are inside or outside a nested statement. It would then store the generated parser in a local attribute of the language definition. \n. I changed it so that you only have to define start and end characters for a pattern. Prism collects all the characters and generates a small parser. The parser is then JIT compiled by Javascript. It seems to work very nicely right now, but I have to do further testing, to make sure all the generated parsers are correct.\nThe generated Parsers are tiny and efficient.\njs\nfunction(match, lastIndex) {\nvar in34 = !!this.in34;\nvar in39 = !!this.in39;\nvar in47 = !!this.in47;\nvar i = lastIndex || 0,\n    str = match.input,\n    len = match.index,\n    last = this.last || 0,\n    c = last;\nfor (; i < len; ++i) {\n    last = c;\n    c = str.charCodeAt(i);\n    switch (c) {\n        case 34:\n            in34 = (!in34 || last === 92) && !in39 && !in47;\n            break;\n        case 39:\n            in39 = !in34 && (!in39 || last === 92) && !in47;\n            break;\n        case 47:\n            in47 = !in34 && !in39 && (!in47 || last === 92);\n            break;\n        case 10:\n            in47 = false;\n            break;\n    }\n};\nthis.in34 = in34;\nthis.in39 = in39;\nthis.in47 = in47;\nthis.last = last;\nreturn !in34 && !in39 && !in47;\n}\n. Ping :smile:  Is someone interested in this?\n. Hi in my opinion this could be merged, unless it is too much code for a simple language like Bash. The problem ist, that the old Version had some minor bugs.\n. @kuba-kubula This problem is well known, but reordering does not help, because then you get strings inside comments, which is worse in my opinion, because you cannot comment out code any more:\n``` bash\nif [ \"$SOMETHING\" == \"FOO\" ]; then\n```\nFurthermore this is bash, which uses # for comments. So your example with the URL doesn't even apply.  \"http://www.example.com\" works just fine.  Your example applies to clike languages which use // for single line comments. But even clike makes an exception for URLs.\nAnyway something like \"foo # bar\" would be highlighted as a comment inside a string, but there is no easy way around this. It's a limitation of Prism. \n. > isn't highlighting of comments higher priority than showing \"code inside comment\"?\nYes and that's why comment is before string. Nobody is suggesting to show code inside a comment. Have you even read my post?\n\nI'd lovely live in other world, but having code in comment means it is still highlighted as comment.\n\nYes it is. But it wouldn't if string happens before comment, as you suggested. That's the whole point I was trying to make.\n. The array index would certainly work, but what exactly do you mean by \"an index that would be resolved relative to the others\"? Could you give an example?  Something simple like add('after-highlight', fn, 'top') or just an index, that has nothing to do with the actual array index like:\njs\nadd('after-highlight', phpfn, 10)\nadd('after-highlight', somethingelsefn, 50) \nadd('after-highlight', linenumbersfn, 9999) // always at the end\n. I implemented the relative indices. Instead of index I called the parameter priority, which seemed more appropriate. I chose the default priority to be 50 because I didn't want to use negative priority values to represent something that has a higher priority than normal. Negative priorities are still possible though.\n. I changed it to two lines of extra code ;). Shouldn't be less efficient either...\n. The thing is, that the array index wouldn't be very useful, because you could effectively only use the value 0 to put the callback on top. You might as well accept a string \"top\" or \"bottom\".\n. > It\u2019s pointless to try to minimize loc by reformatting code, that\u2019s like trying to follow the letter of a rule but not its spirit :)\nThe code is different. This time I used sort().\n\nAnyway, more importantly, why all this code in the line numbers plugin? I thought the issue would be solved if the callbacks are just executed in a different order?\n\nThe problem is, that the php language is pretty invasive. It modifies env.code, but never restores it. The line-number plugin uses env.code to count the lines. So it has to count the lines before php destroys env.code und it has to insert the line number side bar after php overwrites env.element.innerHtml. So I split up the task of counting the lines and inserting the line number side bar. Another way to solve this would be to store a backup of env.code say env.bakCode and restore it from that.\n\n(btw I\u2019m getting ready to move to the US this Sunday, so I\u2019m really busy this week & the past few days, this is why I\u2019ve been slow with other PRs and have very little time for github)\n\nCool! The PRs can of course wait. Thanks for taking the time to review this anyway and good luck :) \n. The way to solve this with the least amount of code would be to make php restore env.code and require the user to include php before the line-numbers plugin:\nhtml\n<script src=\"components/prism-core.js\"></script>\n<script src=\"components/prism-clike.js\"></script>\n<script src=\"components/prism-php.js\"></script>\n<!-- line-numbers must be last, because php overwrites everything -->\n<script src=\"plugins/line-numbers/prism-line-numbers.js\"></script>\n. Ok I updated the patch, so that php restores env.code. This further reduces the complexity of the fix and it is probably a good idea anyway. Maybe there are other plugins, which rely on a env.code that is intact.\n. Ok now I use an array index as you suggested. There are only a few lines that need to be changed.\n. I found a solution without editing prism-core.js.\n. If we can assume that plugins will always be after the languages, then the ugly stuff wouldn't be necessary. I could remove the following lines:\njs\nvar lineNums;\nif (env.element.getElementsByClassName) {\n    lineNums = env.element.getElementsByClassName('line-numbers-rows')[0];\n}\n...\nif (lineNums) {\n    env.element.appendChild(lineNums);\n}\n. Ok, I will remove it.\n. Done, the extra lines are removed. Now it is a really simple fix. All the effort for nothing ;)\n. I would solve this like so:\njs\nself.postMessage(_.highlight(code, _.languages[lang], lang));\n.highlight returns a string and includes the call to .util.encode\nYou would also have to change the receiving end:\njs\nenv.highlightedCode = evt.data;\n. This patch also fixes the invalid highlighting on download.html\n. This could be the result of copying and pasting the script from the box on the download page. Should be fixed with #338. But someone first has to update the minified version and the auto generated prism.js\n. I can confirm this issue. If you copy the highlighted code on the download page and paste it into a file you get the exact same error message. I can also confirm, that it is fixed by #338. But prism.js and prism-core.min.js are currently not up to date. That's why the bug is still present on the download page.\n. I can't reproduce it in Firefox. Works just fine.\n. Sorry, guess that was my fault. I should have tested it a bit more...\n. @apfelbox alias would be a great name for the option ...\n. I can confirm this with Chromium on Linux. Really strange bug. All CPUs are on 100% for 5 minutes now. It doesn't seem to stop at all. It works on Firefox.\n. It seems to be some quirk in the regex engine. Chromium really doesn't like long lines. The minified versions have extremely long lines. There also seems to be a huge difference if the regex is stored in a global variable or not. I have put up a small test:\nhttp://jsperf.com/regex-on-long-lines\n. @LeaVerou congratulations for getting into MIT! I just read your blog post about it from february. If anyone deserves it it's you :smiley:\nCurrently the downloader starts one WebWorker for every language you add. If you can click faster than the time it takes one of them to finish you can get all cpu cores to go up to 100%. Maybe the highlighting should only start 2 seconds or so after the last language was selected. This could be easily implemented with a timestamp and setTimeout(). It wouldn't solve the regex problem, but it would only max out one core instead of all of them.\nEDIT:\nI just realized, that is already implemented, but with a timeout of 500ms. Maybe increasing that would be a good idea...\n. This regex seems to solve the problem with Chromium: http://regex101.com/r/yR9kI6/5\nIt is still slow, but it doesn't go on forever any more. I am not sure if it does exactly the same though.\n. There is a new feature, where you can add multiple patterns in the form of an array to one token type. This causes the problem, because autolinker uses Prism.languages.DFS to traverse the language and Prism.languages.DFS doesn't account for the new feature. The best fix would be to fix DFS. Since I implemented the array feature I will fix this and make a PR.\n. You have to escape at least some of the characters like < and & inside of the code element. The following code from your example works for me:\nhtml\n<pre><code class=\"language-markup\">&lt;button type=\"button\" class=\"button\">Cancel&lt;/button></code></pre>\n. Are you using the autolinker plugin? If so this could be related to #359. I already submitted a PR with a fix for that bug in #360.\n. Lookahead would also be useful for javascript in markup:\njs\n'script': {\n    pattern: /<script[\\w\\W]*?>[\\w\\W]*?<\\/script>/ig,\n    inside: {\n        'tag': {\n            pattern: /<script[\\w\\W]*?>|<\\/script>/ig,\n            inside: Prism.languages.markup.tag.inside\n        },\n        rest: Prism.languages.javascript\n    }\n}\nCould change to:\njs\n'script': {\n    pattern: /(<script[\\w\\W]*?>)[\\w\\W]*?(?=<\\/script>)/ig,\n    lookbehind: true,\n    inside:  Prism.languages.javascript\n}\n. I really like the idea of NASM support. I just noticed a few things. You overuse the arrays to define your tokens a little bit. It is probably more efficient to merge a few of your regexes into one. If you use the array syntax you have to take care of the order within the array. For example hex constants do not work currently. You have to move \njs\n{\n    pattern: /(\\W)\\d+/g,\n    lookbehind: true\n},\nto the end of the array to make it work. The elements of the array are matched in order and the first match will be used. Or you could merge all of the different formats into one regex like in most of the other languages. Furthermore the scientific notation for floating point constants is not supported e.g.: 1.234567e20.  Floating point registers like st0,st1 are not supported. Why not use the token type number for this kind of stuff like most other languages?\nOtherwise it looks good :+1: \n. How about this version:\njs\nPrism.languages.nasm = {\n    'comment': /;.*$/m,\n    'string': /(\"|'|`)(\\\\?.)*?\\1/gm,\n    'label': {\n        pattern: /^\\s*[A-Za-z\\._\\?\\$][\\w\\.\\?\\$@~#]*:/m,\n        alias: 'function'\n    },\n    'keyword': [\n        /\\[?BITS (16|32|64)\\]?/m,\n        /^\\s*section\\s*[a-zA-Z\\.]+:?/im,\n        /(?:extern|global)[^;]*/im,\n        /(?:CPU|FLOAT|DEFAULT).*$/m,\n    ],\n    'register': {\n        pattern: /\\b(?:st\\d|xmm\\d\\d?|[er]?[abcd]x|[abcd][hl]|[er]?(bp|sp|si|di)|[cdefgs]s)\\b/gi,\n        alias: 'variable'\n    },\n    'number': /\\b-?(0x[\\dA-Fa-f]+|[\\dA-Fa-f]+h|[01]+b|\\d*\\.?\\d+([Ee]-?\\d+)?)\\b/g,\n    'operator': /[\\[\\]\\*+\\-]/gm\n};\n. > I think number should be:\n\njs\n'number': /(\\b|-|(?=\\$))(0[hx][\\dA-Fa-f]+|[\\dA-Fa-f]+h|\\$\\d[\\dA-Fa-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0d\\d+|\\d*\\.?\\d+([Ee][+-]?\\d+)?|0x[\\dA-Fa-f]+\\.[\\dA-Fa-f]*[pP][+-]?\\d+)\\b/g\nTo account for e+, octal, and a few of the more obscure integer constant modes.\n\nI agree. Also great work with the octal and binary constants. Shouldn't there be a leading decimal digit for hex values with an h at the end like 0abcdh?\n\nI don't know if prism supports the lookahead construct\n\nIt does.\n\nNASM supports _ as a separator\n\nWhat exactly do you mean?\n\nNASM also supports 0xabcd.ef12p+12 for floating point literals. I wasn't able to find a way to get this to work.\n\nI don't know exactly, why your version doesn't work, but I tried to model it after the regex for the decimal floating point integers and it seems to work quite nicely:\njs\n'number': /(\\b|-|(?=\\$))(0[hx][\\dA-Fa-f]*\\.?[\\dA-Fa-f]+([pP][+-]?\\d+)?|\\d[\\dA-Fa-f]+h|\\$\\d[\\dA-Fa-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0d\\d+|\\d*\\.?\\d+([Ee][+-]?\\d+)?)\\b/g,\n. > By accepting _ as a separator, I mean a usage similar to the new usage of ' within numeric literals in c++, e.g. 123_456_789 is parsed as 123456789. Not sure to what extent we should bother supporting that syntax - I (personally) haven't seen it used very often, and the builtin syntax highlighter in vim doesn't catch it.\nI don't think we have to support that syntax, but you can if you want to. To me it looks a bit strange.\nBy the way, you should add your language to the file components.js and generate a minified version of prism-nasm.js called prism-nasm.min.js by using gulp. Then you add all that to your PR and update it (git push --force). Make sure it is only one clean commit.\nAlso I can't merge it. You have to convince @LeaVerou or @apfelbox to merge it :smile: \n. Hi,\nCould you be more specific about the exception that is being thrown? I cannot reproduce it. There is currently a problem with the autolinker plugin #359 #363. Maybe this is related to your problem. If not, could you please download a non minified version of prism and reproduce the exception and post a screenshot. This would be very helpful. Thanks.\n. You also need:\nhtml\n<script type=\"text/javascript\" src=\"bower_components/prism/components/prism-c.js\"></script>\ncpp depends on c which depends on clike. If you use the downloader the dependencies are resolved automatically.\n. > Could you or someone else please send another PR to remove option: default?\nI've removed the default option.\n. I fixed it with #395, but maybe removing the alias is not the right thing to do...\n. Ah ok, now I understand. Yes that is possible, but the alias must be inside the pattern. I will update my pull request to that effect.\n. Sorry my patch was not entirely correct. One of the alias was correct and should not have been moved. Shall I make a new PR?\n. @LeaVerou How about #334. You havn't explicitly rejected it, except maybe with silence ;). It is really fast and has a simple syntax for the language definitions. I invested a lot of effort to make the generated code run really fast on all modern JS Engines. I would be happy to implement any changes you might deem necessary.\n. You don't have to combine them. You search for start and get an index, then you search for end and get an index, then you check if contents matches inbetween. If it's possible, you combine them of course.\n. You could even optimize a bit, by matching only start for tokens that are in competition. Then sort the resulting list of start indices in decending order. Then go through the list and match end and contents. The first match is the new token.\n. @Golmote yes you are absolutely right. I hadn't thought of escaped end patterns. You could also not use back references to refer to the string that was matched with start.\nA boolean flag competition would probably be best, although I like your idea of allowing different scopes of competition by nameing them with a string.\n. @Golmote Thanks for the performance tests. Really nice work!\n. I kind of like the name greedy for the flag.\n. @Golmote I think greedy is a good choice, because it has essentially the same meaning as in the context of a regex, but on the scope of the whole language. So people who know what geediness means for regexes can intuitively understand what it means on a larger scale. But maybe I am wrong. I am awful at nameing things...\n. > What about arrays that contain e.g. 5 regexes and 1 object? Then the 5 regexes could still be combined, non?\nYes that wouldn't be hard to implement.\n\nAlso, it would be nice to allow strings too, especially for the various keywords in languages. Then they could all become arrays of strings, and when inheriting from a language we could just push the new keywords, not override the whole thing.\n\nYes that's a good idea. I will work on that.\nI also found a bug in this PR. I forgot to add the modifiers to the new regex. It should be something like this:\njs\ngrammar[token] = new RegExp(regex.join(''), mods);\n. I have updated the PR. It can now turn the following definition:\njs\n'test': [\n    'key.1', 'key.2', 'key.3', /regex1/, /regex2/, { pattern: /regex3/ }, /regex4/, 'key.4',\n],\ninto this:\njs\n'test': [\n    /(?:\\b(?:key\\.1|key\\.2|key\\.3)\\b|regex1|regex2)/,\n    { pattern: /regex3/ },\n    /(?:regex4|\\bkey\\.4\\b)/\n],\n. > What happens with regexes that have different flags? They shouldn't be combined.\nThat's what the variables modm and modi are for. The global flag makes no difference for Prism, so my code ignores it. For example the following token:\njs\n'test': [\n    'key.1', 'key.2', 'key.3', /regex1/, /regex2/i, /regex5/i, 'key.4',\n],\nwill be combined into this:\njs\n'test': [\n    /(?:\\b(?:key\\.1|key\\.2|key\\.3)\\b|regex1)/,\n    /(?:regex2|regex5)/i\n    /\\bkey\\.4\\b/\n],\nStrings can only be combined with regexes, that have the ignoreCase flag not set.\nI know it is a bit too much code for Prism, but the only way I can think of to make it smaller would be to strip out some of the features.\n. Yes @Golmote's combined array is correct. It currently only cominbes the stuff in order. I thought the order is somehow significant, but on second thought it probably isn't. @LeaVerou's suggestion with the hash is great, but I would simply use 4 variables instead. You can't actually get the modifiers out of the RegExp object as a string, so it makes little sense to use them as a hash. I think this would make the code much simpler. I will work on it.\n. On the other hand a hash is probably not a bad idea after all, because it would save a lot of if-statements...\n. Using the hash was the best solution. Now it is really straight forward and much more effective.\n. I fixed the style issues. Thanks for your quick review @Golmote. I didn't know, that you could omit the new operator for RegExp.\n. I had to change it again, because I forgot to account for back references inside the regexes.\n. I also think we should not change the order of the regexes, because this can change the meaning. For example:\njs\n'number': [\n    /0x[\\dA-Fa-f]+/,\n    /\\d*\\.?\\d+([Ee]-?\\d+)?/i,\n],\nThe regexes are not combined because of the i modifier, but the order is reversed, which breaks it. For a value like 0xABCD, the first regex will match the whole string as a number, but the second regex will only match the 0 and then stop, thereby preventing a later match.\nTherefore my original implementation, which preserves the order is the only valid solution. What do you think?\n. I reset it to the old version, because the order of the regexes needs to be preserved.\n. I could remove support for strings. That would significantly simplify it....\n. We could combine this with #424. If every element of an array is in \"competition\" with the other elements of the same array, the order wouldn't matter any more. The code for optimizeGrammar() would be much simpler, we could optimize more aggressively and it would be more consistent, because the user expects the order to be not significant.\nThe only problem is of course performance.\n\nBtw happy new year!!\n\n@LeaVerou Happy new year to you too!!\n. I combined this PR with #424 and the result is very nice. I basically just plagiarised @Golmote's idea and work, so I don't want to take credit for it. But the combination just works so beatifully, that I had to try it. I gave credit to @Golmote in the commit message. We could also merge the two PRs in some other way...\n. > It also looks like the competition behaviour is applied everytime a competition pattern is encountered. If I understand your code properly, the first time already matches all the patterns, so the others are not required.\nCould you explain a bit further. I don't know exactly what you mean.\nFor every partial string, all the patterns that are in competition are applied once. The best result is chosen. For the next partial string all the patterns have to be tried again. Maybe I miss something here...\nBtw, thanks for your thorough review.\n. > Do you get my point?\nYes thanks. Now I get it.\n. I think I fixed all of the issues. I no longer use _competition to store an array of competing patterns. Instead I directly insert them into the grammar in the optimizeGrammar() function. This way I can avoid the issue pointed out by @Golmote of the competition patters getting applied repeatedly. It is also a much nicer design.\n. There are synergetic effects between the combination of regexes and the idea of competition, because to combine regexes more aggressively, the arrays of regexes have to be greedy. To make them greedy I use competition. To introduce globale competition with a flag I only have to collect them in an array and insert it at the right position into the grammar. Because arrays are already greedy, we get the global competition basically for free.\n. > Are we sure we want to push it, and not unshift it?\nWhat difference would that make? I don't see how adding them to the front of the array would be beneficial.\n\nAlso, this seems to mean that the other elements in the array will be in competition with the \"competition patterns\", even if they were not supposed to be. If I'm right, could this lead to unexpected behaviours?\n\nYou are right. I can't think of an example, where it would lead to unexpected behaviour though, but I can't rule out the possibility either.\n\nBecause the optimization process modifies the structure of the grammar, what would happen if an asynchronously loaded component tries to extend an already optimized grammar?\n\nThat's a good point. Some tokens in the grammer will be set to null. This shouldn't lead to any problems except in _.util.clone() and in _.languages.DFS(), but I think I can fix that.\n. > About the extension mechanism, maybe we could store the optimized grammar in a non-enumerable property of the original grammar (kept unchanged)?\n\nIn the tokenize function, we would work on the optimized grammar, but the extension mechanism would use the original grammar.\n\nI just had the same idea. Then I could also easily add a special token like _competition before the element, instead of pushing it to the end of the existing array.\n. I have updated the PR. Now the original grammar is not modified by optimizeGrammar() any more. Instead the optimized grammar is stored in the non enumerable property _optimized. Now it is also possible to \"deoptimize\" by simply deleting the property _optimized. Since _.languages.DFS() can do in place modifications of the grammar I deoptimize at this point. The changed grammar will be optimized again next time it is passed to _.tokenize().\n. @Golmote Thanks. It should be fixed now. The previous version did not account for the lookbehind in the sort function. Therefore the index was wrong.\n. I have created a performance test on http://jsperf.com to compare #334, #444, #424, which all solve the same problem:\nhttp://jsperf.com/prism-parser-performance/3\nYou are welcome to make revisions of the test or change the parameters.\nFor some reason I can't get Firefox to give consistent results. This has probably something to do with memory management issues. So firefox should perform more consistently with less demo code.\n. @vkbansal I used https://rawgit.com to load the files directly from github, but this service sometimes failes. You could try to refresh the page and try again. It certainly works for me.\nBut maybe there is something else wrong. Could you post the error log from the js console?\n. @vkbansal could you run the tests again. I updated the test and now the results are gone. Thanks\n. @italodr I have added support for Node.js to the Normalize Whitespace plugin. It should be available in the next release.. My previous attempts at this (#444, #334) were too big in terms of code size and the performance impact was too large. This time I reduced it to the bare minimum (41 lines) and the performance should be almost identical. It is only a partial solution, but it should fix most cases, where a comment-like substring appears unintentionally in a piece of code.\n. Sorry I closed it by accident. I locally updated my gh-pages branch to the newest version of prism and deleted this commit in the process. I should have put the commit in a separate branch. It is now reopened.\n. Hi @LeaVerou, there seems to be renewed interest in solving this issue #307. I think this PR is a compromise between a full blown LR parser, which is what @foo123 seems to be suggesting, and the regex only approach of Prism. The performance impact should be negligible.\n. @foo123 sorry I didn't mean to misrepresent your prism-grammar project.\nConcerning your suggestion of delimited-block tokens. I think something like this was already discussed a few months ago and the consensus was, that the added size and complexity isn't really worth it. Prism aims to be a pure small and fast regex highlighter. It does not have to be totally correct. If you want to parse a language without any errors, you need something at least as powerful as a LR(1) parser and Prism is not designed to do that.\n. @foo123 Yes a full blown parser is probably not necessary. I would love to see something like delimited-block tokens for prism. You could implement it and make a PR...\n. > Btw @Golmote, if you, applying your strictest code review criteria, think this is ok, you have the ok from me to merge it :)\n\n(Yoohoo, 3 years later we\u2019re finally fixing this issue!! (at least for most cases). So happy!)\nEdit: Just looked at the samples more clearly, yup, it definitely does work on \"foo /**/ bar\". Awesome!\n\n@Golmote If you can find the time, could you please review this PR. I think it is a nice solution and it has potential, but it is also quite complicated and definitely needs a review. There is no rush, though. I just wanted to \"ping\" the PR again.\n. > it would make it easier to review if you added some comments though. It's really hard to follow as it currently stands.\nTo be honest I find it hard to understand my own code after all this time :smile:. I will review it again and add more comments.\n. > I'll make my best to find some time to review this properly by the end of the week.\nThanks! It's really appreciated. I'll add more comments to make the intended functionality clear.\n. > Ok so apart from my tiny comment related to the condition, this looks good to me.\nNice! Thanks for the review.\n\nI still feel quite frustrated by the fact we aren't actually completely solving the issue, but I guess this is better than nothing.\n\nI tend to see it more like the perfect compromise. Prism is supposed to be lightweight.\n\nMaybe you could add a few tests for the C-like and the JS components, so that we can ensure it works and it will continue to work in the future. ;)\n\nI'll get right on to it.\n. > Is this completely backwards compatible? Can we think of any cases that would be highlighted correctly in the past but not after this is merged?\nI can't think of any situation where it would make things worse. It also passes all of the tests in our test-suite.\n. I am really excited about this. I've fixed the small issues you pointed out. Can we merge it?\n. While writing the documentation for the greedy-property, I had an idea for a better name. What do you think of the name backtrack: true?\n. How about ignoreOtherMatches or something shorter along those lines.\nBTW, I love the expression \"to bikeshed something\". I had never heard it before. I had to look it up on Wikipedia. \n. How about important: true or privileged: true\n. Here is my description:\nIt is for tokens, that match arbitrary content between start and end markers, because the content can contain stuff that could be matched by other tokens. The Problem is, that Prism has to execute its tokens in order. It the token in the content matches first, the outer token cannot match any more.\n. > I have no idea what this is saying, and I've even seen the code.\nIt's probably because of my bad English. At least in part...\n\nIdeally, someone else should write the docs for this\n\nProbably a good idea, but the above text, was not my proposal for the documentation. This is my draft:\nhtml\n<dt>greedy</dt>\n        <dd>This is a boolean attribute. It is intended to solve a common problem with\n        patterns that match long strings like comments, regex or string literals. For\n        example a comment enclosed by a string should be highlighted as a string.\n        However, if the pattern for comments is executed before the pattern for strings, then\n        the comment is highlighted and the string cannot match anymore.\n        <pre><code class=\"language-javascript\">\"my /* comment */ string\"</code></pre>\n        The greedy-property allows a pattern to ignore previous matches of other patterns, and\n        overwrite them when necessary. The following example demonstrates its usage:\n        <pre><code class=\"language-javascript\">'string': {\n    pattern: /([\"'])(\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n}</code></pre>\nEDIT:\nYour version sounds better, though.\n. nonesting because we want to prevent the nested tokens from being highlighted...\n. I still think important is quite good, because it kind of has the same meaning in CSS. The order of the rules in CSS is significant. The rules further down overwrite earlier properties. With !important the rule cannot be overwritten any more by following rules.\nIt is kind of the same with Prism, only in reverse. The tokens that come first are the most important ones. With the property important: true we can increase the importance of tokens lower down in the chain.\n. We could even make it an integer important: 5, so that a token can only replace less important tokens.\nEDIT:\nAlthough I can't think of any useful application for that.\n. What about global: true? Instead of matching against local string snippets between previous matches, it matches globally on the whole text. In the process it overwrites previous matches that happen to conflict with the new match.\n. I've just found a bug related to this. It is quite limited, because the second slash has to be followed by [,.;]:\njs\nvar test = 1 / 4 + \"/,  bug\";\nThis / 4 + \"/ is incorrectly highlighted as a regex. A possible fix would be, to prevent greedy patterns from deleting tokens created by other greedy patterns. I'll work on it.\n. > Can you rename the test file from important_feature.test to shebang_feature.test?\nSure, I just updated the PR.\n. The regression was introduced by my latest patch series for the Bash language. Sorry for the mess :(\n. I think this is a good idea. I only have one comment. Couldn't you reuse the existing hook system for that?\nSome pseudo-code to give you an idea what i mean (NOT tested):\n``` js\nfunction add(id, dependencies, callback) {\n     // wait for dependencies\n// call callback\n\n_.hooks.run('new-language', id);\n\n}\nfunction whenLoaded(id, cb) {\n    // ....\n    var langCb = function(langId) {\n        if (id === langId) {\n            cb();\n            .hooks.remove('new-language', langCb);\n        }\n    }\n    .hooks.add('new-language', langCb);\n    // ...\n}\n```\nThe method _.hooks.remove() does not exist, but can be implemented easily.\n. It is not the number of languages that causes the problem. AsciiDoc contains an infinite recursion and DFS runs into it if you include any language with a call to insertBefore() after AsciiDoc.\nAsciiDoc includes the following pattern:\njs\nPrism.languages.asciidoc = {\n            'macro': {\n            pattern: /\\b[a-z\\d][a-z\\d-]*::?(?:(?:\\S+)??\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n            inside: {\n                'function': /^[a-z\\d-]+(?=:)/,\n                'punctuation': /^::?/,\n                'attributes': {\n                    pattern: /(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n                    inside: attributes.inside\n                }\n            }\n        },\n}\nLater it adds a reference to macro inside of macro:\n``` js\n// Allow some nesting. There is no recursion though, so cloning should not be needed.\nattributes.inside['interpreted'].inside.rest = {\n    'macro': Prism.languages.asciidoc['macro'],\n    'inline': Prism.languages.asciidoc['inline'],\n    'replacement': Prism.languages.asciidoc['replacement'],\n    'entity': Prism.languages.asciidoc['entity']\n};\n\n```\n. The simplest way to reproduce the problem is to select AsciiDoc first and then for example Ruby:\nhttp://prismjs.com/download.html?themes=prism&languages=asciidoc+ruby\n. I have quickly put together a PR to prevent infinite recursion in DFS #841. That PR would also solve this issue, but it is probably better to fix AsciiDoc instead.\n. The following patch solves this issue, but it kind of breaks the AsciiDoc language. The cloned versions of macro and inline don't have all the fields, because that would cause an infinite recursion.\n``` patch\ndiff --git a/components/prism-asciidoc.js b/components/prism-asciidoc.js\nindex 55a6330..63bb51b 100644\n--- a/components/prism-asciidoc.js\n+++ b/components/prism-asciidoc.js\n@@ -200,8 +200,8 @@\n        // Allow some nesting. There is no recursion though, so cloning should not be needed.\n    attributes.inside['interpreted'].inside.rest = {\n\n\n'macro': Prism.languages.asciidoc['macro'],\n'inline': Prism.languages.asciidoc['inline'],\n'macro': Prism.util.clone(Prism.languages.asciidoc['macro']),\n'inline': Prism.util.clone(Prism.languages.asciidoc['inline']),\n                'replacement': Prism.languages.asciidoc['replacement'],\n                'entity': Prism.languages.asciidoc['entity']\n        };\n@@ -238,7 +238,7 @@\n        };Prism.languages.asciidoc['other-block'].inside.rest = {\n\n\n'table': Prism.languages.asciidoc['table'],\n'table': Prism.util.clone(Prism.languages.asciidoc['table']),\n            'list-punctuation': Prism.languages.asciidoc['list-punctuation'],\n            'indented-block': Prism.languages.asciidoc['indented-block'],\n            'comment': Prism.languages.asciidoc['comment'],\n```\n\n\n\nI think the better solution is #841, because it enables such complex self-referencing languages like AsciiDoc.\n. This issue was fixed with #841. Closing.\n. I really like your plugin. I think it would be a very useful addition to Prism. I have just a few remarks:\n- First of all the file ./prism.js is auto-generated by gulp. If you want to change the core of Prism you have to edit the file ./components/prism-core.js.\n- You seem to have an editor that removes trailing whitespace, which is very good, but you should put all unrelated whitespace changes of prism-core.js into a separate commit.\n- You added your new language shell twice to the language list in ./components.js.\n- Your language shell seems to be just a copy of bash. Why exactly do you need a new language anyway? \n. > Do you mean a separate commit or a separate PR for the whitespace?\nI meant as a separate commit, but a separate PR would also be great. If you create a separate whitespace PR it probably would be accepted immediately, because such a PR doesn't require any review. But this is just my opinion and not a requirement at all. I am also not a project owner so feel free to ignore my comments...\n\nI added shell to ./components.js twice because I was trying to add a language and a plugin. If that's not the right approach, let me know.\n\nSorry that was my mistake. It is correct to add it as a plugin and a language.\n\nThe shell language is currently just a copy of bash.\n\nWe could also rename bash into shell or provide an alias. I think the bash language is actually meant as a general purpose bourne shell. But I think @Golmote or @LeaVerou should make this decision.\n. First of all I'd like to stress, that I am not a project owner of Prism, so you don't have to follow any of my suggestions :smile: . I just like your plugin and I wrote the Bash language plugin.\nIf you add a language to the list in ./components.js, it will show up on the website in the Download section as a separate language. I think two Unix-shell languages would confuse people.\nAlso the term shell is a bit ambiguous. I know it is commonly understood to mean Unix-shell or Bourne Shell, but it could also mean Powershell or Windows Shell etc. That is the reason why I chose bash for my language, but that is not ideal either. Maybe we could rename bash to unix-shell and provide an alias for bash and shell. I don't feel comfortable making this decision though, so this point definitely needs more discussion.\nThe name of the plugin is also a bit confusing. How about something like terminal-simulator, command-line, cli-simulator, command-line-prompt or something else more descriptive. What do you think?\nIt would be nice if the plugin could also simulate the appearance of a Windows Powershell and maybe other command line interfaces. You could simply add an additional attribute data-prompt. So if it is a Unix-shell one would use data-user and data-host. If it is anything else like Powershell, PHP or Python we could use data-prompt to provide the prompt directly.\n. One other thing: A PR should be about only one issue or feature. I think the plugin could be accepted right away.But if you bundle it up with lots of other more controversial changes that affect ./components/prism-core.js and other plugins, your PR is less likely to be accepted. I would suggest that you make this PR only about the plugin and create separate PRs for the other stuff you want added to Prism.\n. > That highlighting is actually part of the plugin, because it seemed more semantically correct to mark up interactive shells using kbd rather than code.\nOk. \n\nThe thing I'd like to ensure is that bash scripts and interactive shell examples can be presented on the same page without showing the same label from the show-language plugin. I'm open as to how to make that happen, though.\n\nThe show-language plugin is quite smart. The only thing you have to do is add the following line to the bottom of ./components/prism-bash.js:\njs\n// shell is an alias for bash\nPrism.languages.shell = Prism.languages.bash;\nEverything else should work automatically. You don't even have to change the file prism-show-languages.js, because the show-language plugin will generate an upper case Shell string by default.\nhtml\n<pre><code class=\"language-shell\">ls -al</code></pre>\nThe show-language plugin works with a simple reference just as well as with your new language.\n\nI'd even be on board with removing data-user and data-host in favor of specifying data-prompt for every case. What do you think?\n\nI really like the data-user and data-host feature. I especially like that it automatically adds the correct # and $ signs. I also like that it can be freely styled with CSS. I would add data-prompt only as a fallback or for other languages.\n\nThe shell name makes sense to me, but I can see where you're coming from. Perhaps a name like terminal, cli, or command-line would be more descriptive and/or universal.\n\nI like command-line but I am quite bad at naming stuff.\n\nI'd lean away from including \"simulator\" in the name since it's not really simulating in this case (more representational than interactive).\n\nI agree.\n\nSimilarly, I'd leave \"prompt\" out of the plugin name and let that refer specifically to the prompt displayed for command input (i.e., the prompt is one part of the shell/cli).\n\nI would argue that prompt is the most important part. It is the main thing your plugin does. It gives the user the ability to easily add different command line prompts to any highlighted code in any language. But I don't want to influence you too much. You can name it however you like.\n. I would love to use your plugin on my website, but I don't use the show-language plugin and I am not a semantic tag purist, so I don't really care about the kbd tag. My point is, that your plugin works perfectly fine without these things. If you remove the show-language support and the kbd tag this PR would boil down to a neat, self-contained and still very useful plugin.\nThis doesn't mean that adding the kbd tag is a bad idea, but it definitely needs a separate PR, where it can be discussed on its own. Adding a new tag is kind of a big deal. It will take a lot of discussion, testing and convincing.\nThe best approach for your issue with show-language would probably be to patch the show-language plugin directly (with another PR) . You could add an attribute data-language-alias or data-rename-language, which one could use to specify a custom name:\nhtml\n<pre class=\"shell\" data-user=\"chris\" data-host=\"remotehost\" data-output=\"2\">\n<code class=\"language-bash\" data-language-alias=\"My Favorite Shell\">pwd\n/usr/home/chris/bin</code></pre>\nhtml\n<pre><code class=\"language-python\" data-language-alias=\"Python 2.7.1.1\">....</code></pre>\nhtml\n<pre><code class=\"language-python\" data-language-alias=\"Python 3.1.4\">....</code></pre>\nhtml\n<pre><code class=\"language-python\" data-language-alias=\"PyPy\">....</code></pre>\nTry to see it from the reviewers perspective. Every PR that gets accepted is immediately published on the website. Thousands of people use Prism. So the reviewers have to make absolutely sure that your changes don't adversely affect other stuff. If your PR changes things all over the place, it takes more work to review. If your PR is a self-contained plugin that touches nothing else, the review takes 5 minutes.\nAlso once people start using your plugin, you have a better argument for the kbd tag.\n. > I've made the suggested changes and updated the documentation page to include an example using the data-prompt attribute.\nIt looks good to me :+1: . There are currently 7 commits in this PR and they include all the changes you made so far. Since the PR will eventually end up in the Prism git-log it is considered nice to squash everything down into a single commit and give it a nice descriptive commit message.\n\nIs there a way for me to notify the project owner that I'm finished making changes related to this PR?\n\nThe project owner usually gets notified automatically by email. They seem to be a bit busy at the moment so you have to be a bit patient. You can address them directly by using tags in your message. As far as I know @LeaVerou is the original author of Prism and @Golmote is very active and has admin rights for the project.\n\nThis is my first GitHub PR and I'm new to Prism, so thanks for the guidance as well as the feedback.\n\nYou're welcome. Thanks for the great plugin and your contribution to Prism.\n. Hi @LeaVerou,\n\nQuesiton: Why a plugin and not just a language definition?\n\nThat is a good point. A language definition would definitely be possible. The following points are some of the advantages of the plugin in my opinion:\n- I guess the main advantage of the plugin is, that it works for all languages. Most scripting languages like Python, Lua, PHP and even JavaScript have an interactive shell. With the plugin the user can define an arbitrary command prompt.\n- The plugin is also very convenient to use. Especially if you use the default prompt for Unix/Linux shells.\n- The command prompts created by the plugin cannot be copy and pasted. Usually the user only wants to copy the command and not the prompt. The plugin makes this process easier.\nBut a command-line language definition would definitely be a viable alternative. I would implement it something like this (not tested):\njs\nPrism.languages['command-line'] = {\n    'bash-command': {\n        pattern: /(^\\[\\w+@\\w+\\s+\\]\\s+[$#]).*/m,\n        lookbehind: true,\n        inside: Prism.languages.bash\n    },\n    'unix-prompt': /^\\[\\w+@\\w+\\s+\\]\\s+[$#]/\n}\n. Instead of using an output class you could also simply remove the relevant attributes on the output lines:\njs\nvar node = prompt.children[j - 1];\nnode.removeAttribute('data-user');\nnode.removeAttribute('data-host');\nnode.removeAttribute('data-prompt');\nWith some small rearrangements of the CSS code we can avoid the output class altogether. What do you think?\n. > Where are you suggesting the sample code you provided would go?\nSorry my comment was unclear. My sample code should replace the line number 66 in plugins/command-line/prism-command-line.js\n\nI may be misunderstanding, but do you mean the user would need to add that script for the lines that should be rendered as output?\n\nNo not at all.\nHere is how I would modify the CSS:\n``` css\n.command-line-prompt > span:before {\n    color: #999;\n    content: ' ';\n    display: block;\n    padding-right: 0.8em;\n}\n.command-line-prompt > span[data-user]:before, .command-line-prompt > span[data-host]:before {\n    content: \"[\" attr(data-user) \"@\" attr(data-host) \"] $\";\n}\n.command-line-prompt > span[data-user=\"root\"]:before {\n    content: \"[\" attr(data-user) \"@\" attr(data-host) \"] #\";\n}\n.command-line-prompt > span[data-prompt]:before {\n    content: attr(data-prompt);\n}\n```\nOn the other hand the output class would allow the user potentially greater freedom to create her own CSS style for the output lines.\n. I think this PR is ready to be merged. You don't have to implement my suggestion about the output class. It was just an idea I had while reviewing your code.\n. > I notice that it fails to fetch the minified version of the JS for this plugin.\nThanks for pointing that out.\n\nI didn't include a minified version because I expected it to be created as part of the build process.\n\nWe use gulp to auto-generate the minified versions.\n\nShould I minify it myself and submit a PR to add it?\n\nI've already commited a minified version, so there is no need for a PR. It would be nice if you could include minified versions in future PRs though.\n. > You can use ?w=1 to strip whitespace-only changes when reviewing a diff. Historically we have been allowing stripping trailing whitespace. Other whitespace changes do indeed need a separate commit or even PR sometimes.\nThanks I'll keep that in mind. I didn't know Github had a strip-whitespace-changes feature.\n\nIt is correct to add it as a plugin and a language.\n\nI was referring to a now obsolete version of the PR with that statement. The original PR included a new language shell that was just a copy of bash. The reason for that was to get the show-language plugin to show the string \"Shell\" instead of \"Bash\". But #837 solves this much more elegantly.\n\nI\u2019m a bit uneasy with that. I don\u2019t see such a need. There are many language definitions with code, let\u2019s not clutter the plugin listing with things that, semantically, are not plugins. @zeitgeist87 had a good suggestion about how to turn this into just a language definition.\n\nSorry if I merged this too early. In my mind this is more like a line marker than a full blown language. The commands are marked with a prompt. But it would be quite easy to convert it into a language-definition. @LeaVerou shall I remove the plugin for now?\n. > If this is converted to a language, how would that impact the ability to use any language you want with it?\nYou would have to explicitly add support for any language you want to use. That being said, a language-definition would have other advantages:\n- It would look a bit more natural, because the prompt is part of the source code\n- You would only highlight the lines with prompts and not the output lines, which can prevent false matches of keywords and operators in the output of a command\n. > I don't want to waste your time here, but would you mind giving an example? Rough pseudo-code is fine. I'm trying to imagine how that would work from the user's perspective with one or more code blocks on a given page/site and a variety of potential languages.\nIt would look something like this (not tested):\n``` js\nPrism.languages['command-line'] = {\n    /\n     * Bash support\n     /\n    'bash-command': {\n        pattern: /(^[\\w+@\\w+\\s+]\\s+[$#]).*/m,\n        lookbehind: true,\n        inside: Prism.languages.bash\n    },\n    'unix-prompt': /^[\\w+@\\w+\\s+]\\s+[$#]/,\n/*\n * Powershell support\n */\n'powershell-command': {\n    pattern: /(^PS .*?>).*/m,\n    lookbehind: true,\n    inside: Prism.languages.powershell\n},\n'powershell-prompt': /^PS .*?>/,\n\n/*\n * Support for other languages\n */\n\n}\n```\nYou just explicitly match the prompts in your source code and use the matched language for the inside attribute.\n\nThis seems unnatural to me. The prompt is merely the setting you're in. Imagine if anyone who wanted line numbers had to number them manually when they're not actually part of the code.\n\nI agree that its merely the setting the command is executed in. I was trying to say, that it would look a bit more like a real terminal window, since in a terminal everything is monospace text of the same size, including the prompt.\n\nIs there an existing way to tell languages not to highlight certain lines?\n\nNot that I am aware of.\n. > I don't want to waste your time here, but would you mind giving an example? Rough pseudo-code is fine. I'm trying to imagine how that would work from the user's perspective with one or more code blocks on a given page/site and a variety of potential languages.\nThe end user would use it like this:\nhtml\n<pre class=\"language-command-line\"><code>[andreas@terok]$ date\nMit Dez 30 21:11:42 CET 2015</code></pre>\n. Unfortunately the conflicts are not resolved. There seems to be something wrong with your rebase. The simplest and crudest way to fix that in your case would be:\nshell\ngit fetch upstream\ngit reset --hard upstream/gh-pages\ngit cherry-pick 9f0ff2dc4b41460a6ba7e0debe103e8c3bdf0cb5\nThe commands above will reset everything to the upstream gh-pages branch, deleting all your changes in the process. Then the cherry-pick command will apply only your commit to the new base. 9f0ff2dc4b41460a6ba7e0debe103e8c3bdf0cb5 is the hash of your commit \"Allow custom label without a language mapping.\". I do not recommend this approach in general though.\n. Thanks!\n. Thanks for the PR. It seems like you've included the file components/prism-jsx.min.js by accident.\nI don't know if this was discussed already somewhere, but I find the plugin remove-initial-line-feed and remove-final-line-feed quite odd. Why don't we just create a simple trim plugin that does both? The user could add the class no-left-trim and no-right-trim to disable the respective trim operation. @Golmote Is there a particular reason why the plugin remove-initial-line-feed removes only a single line feed and not all leading whitespace?\n. > Don't we have a general plugin for whitespace removal?\nI don't think so. There is only the remove-initial-line-feed plugin, which removes exactly one line from the start.\n. @cormacmccarthy I have just submitted a PR #847 with a general purpose whitespace plugin, that also does extra indent removal, but it needs more testing and I probably have to change the way it gets its global configuration, since that is a new feature to Prism and subject to change.\n. Thanks!\n. > However, no browser we\u2019re targeting doesn't support addEventListener. This is a pointless check that adds pointless extra code for everyone. Can we please remove it?\nGood point. I've removed the check.\n. I see, the heading links on all of the plugin pages are wrong because of the <base href=\"../..\" /> tag. This fix looks good to me.\n. Thanks!\n. My idea for this PR was to create a standardized way for plugins to get access to global configuration options. But I am really not sure if this is the right way to do it. We could also do it with classes or data-* attributes. This is just an experiment. I am open for suggestions and feedback :smile: \n. @cormacmccarthy Thank you for testing it!\n. I am thinking about removing the Plugin base class. It is doesn't do much and the whitespace normalizer works perfectly fine without it.\n. > In general, a design goal of Prism is to be usable by people with no JS knowledge. This is why it highlights automatically, and this is why most plugins accept their options as data-xxx attributes and act on anything with a certain class or attribute without requiring anyone to manually create a new instance. Requiring JS for advanced usage is ok, but as long as there's no real reason for a plugin to require JS knowledge, I'd rather it had at least a basic HTML API. We often don't realize, but there are a LOT of people getting by with only HTML and CSS, and struggle with writing even a single line of JS (fun fact: my research at MIT is about that and making things easier for these people).\nYes that is exactly the kind of problem I was struggling with. Currently Prism has no standard way to allow a user to change global settings for plugins. My solution involves a bit of JS, but it is quite declarative and there are sensible defaults:\nhtml\n<script src=\"plugins/whitespace-normalizer/prism-whitespace-normalizer.js\"></script>\n<script type=\"text/javascript\">\nPrism.plugins.WhitespaceNormalizer.setOptions({\n    rightTrim: false,\n});\n</script>\nI agree a basic HTML API can't hurt. I'll start working on it.\n\nWhy convert tabs to spaces? That seems a bit backwards when we have the CSS tab-size.\n\nI completely agree. Both of these options are disabled by default. I thought maybe there is a use for someone.\n\nWhat are the defaults of these options? Sensible defaults are of utmost importance for good usability.\n\nThe defaults are set in the constructor:\njs\nPrism.plugins.WhitespaceNormalizer = new WhitespaceNormalizer({\n    removeTrailingWhitespace: true,\n    removeExtraIndent: true,\n    leftTrim: true,\n    rightTrim: true,\n    //tabsToSpaces: 4,\n    //spacesToTabs: 4,\n});\n\nThe options are a bit long and they would be even more unwieldy as data- attributes. But I\u2019m aware I tend to favor overly short names, so I'd merge it regardless :)\n\nThe names have to match the names of the methods of the WhitespaceNormalizer object. I used the Java naming conventions for methods. But I can use shorter names that are a better fit for data-* attributes.\n\n\"Normalize Whitespace\" would probably be a name more consistent with the rest of the plugins.\n\nI'll change it.\n. > Perhaps you could write a general framework so that people can have plugins with options that are specified via inheritable data- attributes :)\nThat's a great idea! I'll work on it. It shouldn't be too hard to implement. Why didn't I think of that :smile: \n\nAnd yes, Java conventions result in huge names, to the point that Java developers are often made fun of for it :P Thankfully, native JS APIs are moving away from this (e.g. things like element.contains() vs element.compareDocumentPosition()).\n\nYeah I know. I am usually the one who makes fun of Java developers for that. Nevertheless I like camel case for method names. The shorter the better of course.\n. I have added another plugin to this PR. The plugin parses inheritable data-* attributes and classes and stores the result in the environment object \u00e8nv.settings. The Normalize Whitespace plugin uses the Parse Settings plugin to get its settings. The JS interface is still available.\n. I've just found an old PR #825. It's a Trim plugin, that does exactly the same thing as the Whitespace Normalizer. Argh, I should have checked the list of existing PRs before starting this plugin...\n. > Sorry to spring more work on you, but can we split the two PRs?\nI'd be happy to, but the Normalize-Whitespace plugin depends on the Parse-Settings plugin. If I separate them into two PRs the Normalize-Whitespace plugin wouldn't work and couldn't be tested properly.\nPR #825 has some nice ideas. We should also consider it. The object-oriented approach of my Normalize-Whitespace plugin makes it a bit bulky compared to the simpler Trim plugin.\n. > The former might even be added in Prism Core if we polish it enough (and hopefully, shorten it a bit).\nI could do most of the stuff in a more functional programming style by using filter(), map(), forEach() etc. I didn't do that because I wanted to maximize performance. If code size is more important I can easily change it.\n. > Yes, code size/readability/elegance are more important, unless of course there is a noticeable performance impact. But avoiding map, forEach etc is premature optimization more often than not.\nYes I think I am guilty of premature optimization :smile:. I don't think that there is a noticeable performance impact. I will clean it up and submit another PR for the parse-settings plugin.\n. I've removed the hard dependency on the parse-settings plugin, shortened the names of the options and fixed some minor bugs. The parse-settings plugin has its own PR #851.\n. I've added support for automatic line breaks to this PR.\n. Hi @maruilian11,\nUnfortunately I am not very familiar with the npm package for Prism, but maybe I can help anyway.\nThe website prismjs.com is generated from the gh-pages branch of this project. We use the gh-pages branch as our development branch. So the website contains the latest version of Prism.\nThe npm package is generated from the master branch as far as I know. The master branch contains our stable releases. The last release is version 1.3.0 from the 26. Oct 2015. The command-line plugin is a new development and was added quite recently. Therefore it is present on the website and in the gh-pages branch, but not in the master branch. Maybe we should do another release soon...\nI hope this answers your question.\n. @LeaVerou @Golmote ping \ud83d\ude04 \n. > then the plugin would provide a method to get their values for a given element.\nBut the whole idea of the plugin is, that settings can be inherited from parent elements. So you can set your settings on the <body> tag and every code block inherits them.\n\nThis would avoid having to specially mark elements that contain data to avoid false matches, or the awkwardness and perf overhead of iterating over attributes.\n\nMaybe I misunderstand you here, but the settings get parsed into a normal JavaScript object. Using it couldn't be easier. No awkwardness...\njs\nif (env.settings['left-trim']) {\n    // do something\n}\nDefault options are trivial:\njs\nassign({\n    'left-trim': true,\n    'right-trim': false,\n    something: 80\n}, env.settings);\n\nHaving the plugins provide a settings spec would also allow for cool things like default values and type casting, that this plugin could handle as well to give even more incentive to plugin authors to use it.\n\nBoolean values are already typecast:\nhtml\n<!-- The result would be: env.settings['something'] = false -->\n<div class=\"language-javascript no-something\">\n<!-- The result would be: env.settings['something'] = true -->\n<code data-something></code>\n<!-- The result would be: env.settings['something'] = true -->\n<code data-something=\"true\"></code>\n<!-- The result would be: env.settings['something'] = false -->\n<code data-something=\"false\"></code>\n</div>\n\nI suspect it would also make the code smaller, enough that it would be worth including.\n\nI don't see how a spec would make the code smaller. I still have to go through all the parent elements and parse all the attributes to compare them to the spec. Maybe I misunderstand your proposal here...\n. > Right now, it's still easier for most plugin authors to just do it themselves and avoid the perf overhead and syntactic awkardness.\nI don't understand. It supports exactly the same syntax that most plugins use right now:\nhtml\n<pre class=\"language-javascript line-numbers\"><code>\n// JS code\n</code></pre>\nHere is what the line numbers plugin does right now:\njs\n    var pre = env.element.parentNode;\n    var clsReg = /\\s*\\bline-numbers\\b\\s*/;\n    if (\n        !pre || !/pre/i.test(pre.nodeName) ||\n            // Abort only if nor the <pre> nor the <code> have the class\n        (!clsReg.test(pre.className) && !clsReg.test(env.element.className))\n    ) {\n        return;\n    }\nHere is how it would look with the parse settings plugin using the exact same HTML code:\njs\nvar pre = env.element.parentNode;\nif (!pre || !/pre/i.test(pre.nodeName) || !env.settings || !env.settings['line-numbers']) {\n    return;\n}\nNot only that. You can also set line-numbers globally with the same syntax people are already used to:\n``` html\n\n\n// JS code\n\n\n// JS code\n\n\n// JS code\n\n\n```\n. You can also disable the global setting locally:\n``` html\n\n\n// JS code\n\n\n// JS code\n\n\n// JS code\n\n\n// JS code\n\n\n```\nFor the plugin author nothing changes. The following code is still enough:\njs\nvar pre = env.element.parentNode;\nif (!pre || !/pre/i.test(pre.nodeName) || !env.settings || !env.settings['line-numbers']) {\n    return;\n}\n. > Only if you want settings on some unrelated tag you have to mark it\n\nI don't see why you would want settings on anything other than a) an ancestor b) the element itself c) the script element. This is confusing and I'd advocate for getting rid of it.\n\nIt always has to be an ancestor. Only ancestors are considered.\n``` html\n IS an ancestor, but has no Prism language class.\nTherefore it needs the marking attribute data-prism \n\n does NOT work because it is not an ancestor \n\n no mark is needed because of the language-javascript class \n\n no mark is needed because it is the pre tag \n\n// JS code\n\n\n// JS code\n\n\n\n```\nI think the marking attribute is useful. Most of the time it can be avoided by placing the settings on the same tag as the language class, but it is still a nice option to have.\nNevertheless I can remove it if you dislike it that much \ud83d\ude04 \n\nFor the plugin author nothing changes.\nYes, but we cannot treat every class and data attribute as a potential setting. It's just a lot of overhead, for little reason.\n\nI disagree. Only the parent elements are scanned. How deep does an average DOM tree go? I would guess 10 at the most. So you have 10 elements that get immediately and efficiently filtered. All elements without a Prism language class or the marker attribute are thrown away. Most of the time this leaves only one or two elements. There is no reason for a user to put Prism settings on all 10 ancestors so we parse all attributes of 2 elements!\nCurrently every plugin parses the DOM for its settings. Basically the same operations are repeated for every plugin used. It is better to do it once for all plugins.\n. Ok I give up. I will implement it with specs \ud83d\ude04 \n. > Because I convinced you or because I said I'm strongly opposed to the alternative?\nYou've convinced me to give it a try. At first I thought, that it would only complicate things, but in your last comment you described your idea in more detail and I can see the advantages. Especially the fact, that settings can be on any ancestor is nice.\n. @LeaVerou I have implemented your suggestion. It works pretty well, but it needs slightly more code to do it. Maybe we can remove a few features to make it smaller...\n. Thanks!\n. Hi @hectormatos2011,\nThank you for your contribution. Your theme looks quite nice. You seem to have forgotten to add the file extension .css to the prism-solarizedlight file. You also have to add the theme to the themes section in the /components.js file:\njs\n\"prism-solarizedlight\": {\n    \"title\": \"Solarized Light\",\n    \"owner\": \"hectormatos2011 \"\n}\nI like the subtle nice colors of the theme.\n. > Prism does have a themes repo: https://github.com/PrismJS/prism-themes Dunno if this theme should be there or here.\n@mAAdhaTTah yes that is a good point. I think it should be in prism-themes repo.\n. > Top image is the official screenshot from http://ethanschoonover.com/solarized , bottom image is from Prism\u2019s website. Do they look the same to any of you?\n\nI would be very grateful to whoever can fix this disparity.\n\nSorry for the mess. I'll fix it tomorrow.\n. My fix is in PR #872\n. It is a bit strange, that user has to specify the output lines with data-output. Wouldn't it be more natural to specify the lines that have prompts? I think that could also simplify the code. What do you think @chriswells0 ?\nEDIT: I guess it depends on the type of content. If you have more commands or more output lines...\n. I think it is a good idea to also support a marker character for the output lines. You already have the code lines in the variable codeLines. It would be a simple matter to iterate through them and check if they start with a certain character. A simple loop and regex should do it. You can still support your data-output attribute at the same time:\njs\n// using > as line marker and \\> to escape it\nfor (var i = 0; i < codeLines.length; ++i) {\n    codeLines[i] = codeLines[i].replace(/(^\\s*)(\\\\?>)(.*)/, function(match, p1, p2, p3) {\n        if (p2 == '>') {\n            outputLines[i] = p1 + p3;\n            return '';\n        } else {\n            return p1 + '>' + p3;\n        }\n    });\n}\n. > Is > specifically the character we want to use?\nNo, that was just an example. Feel free to use something different. I chose it, because it reminded me of the multiline string marker in bash:\n```\n[andreas@terok ~]$ echo \"multiline\n\nstring\"\n```\nIf it's being used to mark the output lines, is there any reason to allow whitespace in front of the marker? I would think it should come at the beginning of the line when used as a marker.\n\nYou are right, there is no good reason. If we disallow whitespace, then we don't need a regex and we can simplify the code. \n. > Would you expect the data-output attribute and the line prefix to be allowed on the same code block or would you prefer to skip the prefix check if the attribute is provided?\nI think it's better not to allow them at the same time. As you pointed out, there is no need to force the user to escape code that only uses the data-output attribute.\n\nthoughts on (Out) or other suggestions?\n\nWe could do it like the diff format used by git diff. Instead of using a long marker like (Out) and escaping it, we could simply add a marker to every line. For example a + for a prompt and a space  for an output line. For example this code\nls -al\ntotal 44\ndrwxr-xr-x 11 root root 4096 Jan 23 23:44 .\ndrwxr-xr-x  5 root root 4096 Dec 31  2014 ..\nwould be escaped like this:\n+ls -al\n total 44\n drwxr-xr-x 11 root root 4096 Jan 23 23:44 .\n drwxr-xr-x  5 root root 4096 Dec 31  2014 ..\nNotice that the output lines also have a space added in front of them. We don't have to use + and . We can use any single character and don't have to worry about escaping things. What do you think about that?\n. You could use the recently added data-language \u00e0ttribute of the show-language plugin, but that's not what it was designed for.\nAnyway what's wrong with this:\n``` html\nTest.java\n\n  public class Test {\nprivate final static String TAG = PrintUtils.class.getSimpleName();\npublic static byte[] NEW_LINE = {0x0A};\npublic static byte[] POWER_OFF = {0x1B, 0x3D, 0x02};\n\n}\n\n\n```\n. > I don't know if it is part of Prism or part of the coy skin.\nI think it is only part of the coy theme and I agree that such a restriction should not be determined in the theme but left to the end user. Changing it now would probably break a lot of websites which expect this behavior.\n. > As for long-term, deprecate this behavior. Create a checkbox on the download page that you have to check to get the restricted height. Indicate that you will eventually remove it.\nI don't think there is any need for that. I think we can remove it immediately for the next release. If people want the old behavior, they can use an earlier version.\n. @LeaVerou maybe you would like to comment on this? Otherwise I would remove the max-height: 30em attribute from the coy theme.\n. > I would put it inside @media screen {...}.\nDone.\n. > Is this available from the website now?\nYes. It is also in the gh-pages branch in this repo.\n\nP.S. I also recommend documenting somewhere how a user can change this or disable it altogether, so people don't have to go hunting around in a debugger. Just a thought. Thanks!\n\nI would be in favor of removing it altogether. It is inconsistent with the other themes.\n. > I wouldn't be happy without the shadows and neither would many people who use it.\nI think I have fixed the shadow bug with #865.\n. Thanks!\n. > To collaborators: We should have a config option on the script element for the selector used. This is a variation of a very frequent request.\n@LeaVerou I've created two versions of this. A simple attribute to provide the selector directly #868 and another version where the user can specify the tag names of the code blocks #869.\nIn any case the user has to modify the prism theme to support the selected elements.\n. > I don't want to choose between <code> and <kbd>\nYou don't have to choose. You can use a comma separated list of tags like so:\nhtml\n<script src=\"prism.js\" data-tags=\"code, kbd, samp\"></script>\nI probably should have included an example in my PR to make the usage clearer.\n\nEach has its purpose. I was just opening this up for discussion. Please don't ruin Prism. I can live with just <code>.\n\nDon't worry. The PRs are just my contribution to the discussion.\nEDIT: The main problem I see is that the selector is only half of the equation. The themes have to be changed as well.\n. > Sigh. Maybe we should not add this then (and reverse the PR already merged). No point bloating the code if nobody is interested in the functionality.\nI've reversed the merge for now. If we add this feature I would prefer the data-tags attribute. It is much nicer and easier to use.\n. > Why not data-selector? It's not like it's used for another setting.\nGood point. It's data-selector now.\n\nBtw (tangentially related), we should use document.currentScript to get the script, and only use getElementsByTagName as a fallback.\n\nGood idea. I've created another PR for that #870.\n. I have just updated the PR according to your suggestions. I changed the map function a little bit.\n. I totally agree. If nobody uses it, we shouldn't add it. It is only really useful with a custom theme anyway.\n. > I was thinking more something like:\n\nvar script = document.currentScript || [].slice.call(document.getElementsByTagName(\"script\")).pop();\n\nBrilliant I love it!\n. Hi @hongthaiis,\nUntil recently the Coy theme limited the height of the code block, but the other themes didn't. We have just removed that limit a few days ago. If you try the latest version from http://prismjs.com you shouldn't get any scrollbars.\n. It definitely needs a bit of tweaking. I am not very good at themes, so I'm open for suggestions on how to improve it.\n. The result looks like this:\n\n. > Not sure more can be done without changing Prism itself.\nWe can quite easily make the punctuation red. But I agree, that some of it is not possible with Prism.\n\nAlso, wondering if a new version of Prism could be pubbed to npm. Would love to get this theme into my plugin \u263a.\n\n@mAAdhaTTah I will try to create a new release this weekend. There is a bit of work involved, because the CHANGELOG has to updated.\n. > The show invisibles shows tabs and line endings. Is it possible to add support for displaying spaces as well? Was there a technical reason for not including them?\nI am not the author of that plugin, so I can only guess. The only reason I can think of is performance, but we can easily test that.\n\nOtherwise, I'd be interested in adding support, if this is something the project would accept.\n\nIf you implement this, we would surely accept it.\n. @mAAdhaTTah I've already implemented it #876. The main problem was, that a naive implementation would make the space character twice as wide, which looks weird. I solved this by a few simple css position attributes. It would be nice if you could test it. I personally don't use the show-invisibles plugin and don't know what people expect of it.\n. Your solution is correct. In the future we should add some kind of language-loaded hook.\n. Thanks!\n. > However, I disagree with such a bright color for punctuation.\nOn PR #872 you posted this picture:\n\nIt has red punctuation. I just tried to match it as closely as possible.\n. I could easily make an exception for markup:\ncss\n.language-markup .token.punctuation {\n    color: #586e75; /* base01 */\n}\n. Hi @losocreativ,\nAre you sure you posted this to the right project? This is Prism.js the syntax highlighter. Maybe you are looking for Prism Slider.\n. > Perhaps commenting out that line has the same effect?\nYes it does. it works perfectly in Firefox and Chrome if you comment out the whole firstWhiteSpaces stuff.\n. > Not sure how it would behave with the Remove initial line feed plugin...\nIt would probably stop working in combination with any plugin, that trims whitespace or changes the length of the text in any way. Like my proposed whitespace normalizer plugin #847.\n. > So, I should send another PR with the minified version updated to the gh-pages branch?\nIt is usually a good idea, to include the minified version in your PR. You don't have to create a new PR for keep-markup, because I have updated the minified version for it a few minutes ago.\nWe periodically run gulp on the gh-pages branch to update all minified files, but there is no fully automatic update process.\n. > It would be a nice perf improvement if we checked if `env.element.children.length > 0 and returning if not,\nThis works very well. Browser support shouldn't be a problem either. I used it for #884.\n. > Btw, it's your plugin, you can commit without PRs. Unless you want feedback, in which case PRs are ok :)\nOk, I'll keep that in mind. In fact I wanted some feedback on this PR. This change is a bit intrusive:\njs\nvar html = before + env.element.innerHTML + after;\nenv.element.innerHTML = Normalizer.normalize(html, env.settings);\nenv.code = env.element.textContent;\nIt basically requires, that normalize-whitespace is loaded before any other plugin that manipulates env.code. It shouldn't be a problem, because no other plugin that I am aware of seems to change env.code directly.\n\nBtw I used this yesterday. Works really well.\n\nGlad to hear it :smile: \n\nThe documentation needs some updating, if I didn't know I would assume it requires the Parse Settings plugin (which isn't even merged AFAIK!)\n\nYeah it is designed to work with Parse Settings, but it is not a hard requirement. I'll update the documentation to make this clear.\n. > You could at least check if the keep markup plugin is actually loaded before doing all this.\nAgreed.\n\n(we can introduce an after key in components.js and try to follow the order (try because it will not be possible if there are cycles).\n\nHow about we add a new function to Prism.hooks. Something like this:\n``` js\nunshift: function (name, callback) {\n    var hooks = _.hooks.all;\nhooks[name] = hooks[name] || [];\n\nhooks[name].unshift(callback);\n\n},\n```\nIt would add the callback at the start of the list instead of the end. This way the order in which the plugins are loaded is no longer relevant. Any plugin that needs to run before all others uses Prism.hooks.unshift() instead of Prism.hooks.add().\nWe could also add a third parameter to the Prism.hooks.add() function:\n``` js\nadd: function (name, callback, onTop) {\n    var hooks = _.hooks.all;\nhooks[name] = hooks[name] || [];\n\nhooks[name][(onTop) ? 'unshift' : 'push'](callback);\n\n},\n```\n. > This introduces latency during runtime though, whereas making sure the order is correct in the bundle is something that has zero performance impact when Prism is actually running.\nWell, in case of the extra parameter for Prism.hooks.add() it is literally one extra if statement (onTop) ? 'unshift' : 'push' and it is only ever executed once or twice per plugin on startup. I doubt it would even be measurable.\nNevertheless, it is a good idea to implement a mechanism to get the right order in the bundle. I will work on an after-key in components.js.\n. I think one problem is, that a lot of people, including myself, don't use the download page on http://prismjs.com. I for example get Prism through bower. So it would be useful if the order of the plugins  is also enforced at runtime.\n. > Heh, this is why I don't like bower much. Is there even a way to specify which plugins you want with it or do you just get all of them?\nI think you can only specify the version of Prism you want. You basically get the whole git repo into the directory bower_components/prism. I then use gulp to pick the stuff I need from  bower_components/prism/components and merge it into a big minified javascript file. The nice thing about it is, that everything is automated.\n\nThe hooks data structure is public. Whoever wants to do fancy stuff with it can always do it manually, we don't need to add methods for every possible kind of array manipulation.\n\nAh I see. With Prism.hooks.all I can access the whole data structure.\n. Hi @sbrl,\nThank you for contributing!\nIt should work on both tags and the examples in plugins/command-line/index.html have it on the <pre>-tag and it seems to work. Rather than updating the documentation, we should fix it. Could you provide an online example that reproduces this bug?\n. It seems to work with the epub-reader that is included with Calibre.\n. The XML specification explicitly allows the . character for tag names: \nhttps://www.w3.org/TR/REC-xml/#NT-Name\nBut HTML only allows alphanumeric ASCII characters as tag names:\nhttps://www.w3.org/TR/html5/syntax.html#syntax-tag-name\nSince Prism is not a parser it should be more permissive and allow the . character, but I don't know if that would cause anything to break...\n. > Well we do have tests now, don't we?\nAllowing the . character will break the following Textile-language test:\ntextile\n!<foo.png! !>bar.jpg!\nThis is recognized as a HTML-tag: <foo.png! !>. Why does Textile extend Markup anyway?\n. > This is recognized as a HTML-tag: \n\nShould we allow the exclamation point though?\n\nIf I disallow the exclamation point, then the following line fails:\n|_. foo |<_. bar |>_. baz |\nbecause <_. bar |> is recognized as the tag _., with the two boolean attributes bar and |.\nSince HTML only allows alpha-numeric tags \u00e0nyway we could do this:\nPrism.languages.textile.tag.pattern = /<\\/?(?!\\d)[a-z0-9]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\\\1|\\\\?(?!\\1)[\\w\\W])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;\n. I created a PR for this, because I would like someone to double-check my regexps.\n. > Alternatively, we could reinstate @zeitgeist87\u2019s PR about making the selector a config option.\nThe hook before-highlightall is definitely a better solution than the config option. How about this small addition:\njs\nvar elements = env.elements || document.querySelectorAll(env.selector);\nThis would optionally enable a plugin to select/filter the elements directly. Could be useful in the future...\n. Hi @mAAdhaTTah,\nI've tested your plugin and it works fine. I have a few comments on the plugin itself, but I can't really help you with your question about third-party dependencies.\n- Why do you need to expose the hook method? Is there a need to execute the hook manually?\n- You could additionally to registerButton provide a higher level method to create a button. Something like: createButton(text, onClick)\n- I think the helloworld button should do something. Maybe something like alert('Hello World!');\n- You could also create a useful demo button, that selects all of the code in the box: http://stackoverflow.com/questions/11128130/select-text-in-javascript\n- The CSS styling looks a bit boring, but that is just my opinion\nThanks for contributing to Prism! Sorry for the late response.\n. > This is actually a good idea. What about making the registerButton method polymorphic:\nI like that idea. It also allows later additions to the interface. Maybe someone would like to implement buttons with icons or something else...\n. The design on the https://clipboardjs.com/ homepage looks nice. They have nice copy buttons for their source code samples. Nice fade-in and fade-out animations, nice icon, colored box-shadows and small transparent speech bubbles with status messages. We could use that design as an inspiration.\n. Hi @LeaVerou,\nGreat plugin! Here are my thoughts on it. First of all there seem to be a few minor whitespace issues in the before-highlight hook, where you mixed tabs and spaces a bit inconsistently. Secondly, Is there any reason to limit the plugin to the markup language? Lastly, the title of index.html is still Keep Markup.\n. What do you think about #893. I know it is wrong to abuse HTML-comments like this, but it works very well.\n. innerHTML seems to work with <template>-tags. No need for cloning.\n. > What syntax would you suggest for <template>?\nPuh, I don't know.\n\nWhat about <template> inside <pre>? But that is kinda verbose. Alternatively, template with either a language class or a code class?\n\nWe could allow both...\n. I've updated the PR. Unfortunately some small changes to prism-core.js are still necessary. I had to move the check for empty code below the before-highlight hook.\n. > I\u2019m a bit worried that this could be a breaking change for third party plugins.\nI think the chances of that happening are quite low, because env.code contains an empty string at that point and not something unexpected like undefined or null. Any plugin should be able to handle that. It seems to me, the if-statement is mainly a performance improvement that allows Prism to return early if there is nothing to highlight. In my opinion there is no reason to add another hook.\n. On the other hand, a new hook would guarantee, that the unescape-markup plugin runs before any other plugin that needs to change env.code.\n. @LeaVerou I've resolved the merge conflicts for this PR. Do you think it is ready to be merged?\n. Sorry if we missed your question. This should do it:\ncss\npre[class*=\"language-\"]:before,\npre[class*=\"language-\"]:after {\n    display: none;\n}\n. > Since you can't add (or anything) to html syntax (markup) here is an idea.\nIt works for me. You have to escape the HTML-code like this:\nhtml\n<pre><code class=\"language-markup\">&lt;p><mark>Test</mark>&lt;/p></code></pre>\n\n(Also, i didn't get this plugin to work correctly inside javascript code, only on CSS snippets).\n\nCould you provide a online demo page, that reproduces your problem? Before we can fix a bug, we have to be able to reproduce it. As I understand it, it should work with any language.\nWe recently fixed a small bug that isn't in the latest release yet. You could try the version you get from http://prismjs.com/download.html and see if the bug is still there.\n\nIf need multiple marks in the same line:\ndata-mark=\"4[20-32,40-62],5[0-50]...\"\nWhat do you think?\n\nYour idea sounds nice. If someone submits a PR, I would be happy to review it.\n. > Maybe add the aliases into the components file, so we can use them during the gulp generation.\nThat would probably be best. Something like:\njs\n\"markup\": {\n    \"title\": \"Markup\",\n    \"aliasTitles\": { \"html\": \"HTML\", \"xml\": \"XML\", \"svg\": \"SVG\", \"mathml\": \"MathML\" },\n    \"option\": \"default\"\n},\nWe could add them directly to the language map in the gulpfile:\njs\nfor (var name in data.languages[p].aliasTitles) {\n    languagesMap[name] = data.languages[p].aliasTitles[name];\n}\n. > This is exactly what I meant :) Could you take some time to implement it?\nSure :smile:. I've just commited it: https://github.com/PrismJS/prism/commit/54400fbaa33e005f527c37f77e401a54b8d9adcd\n. We already have the language Basic. How much difference is there between Xojo and normal Basic? Maybe you could try prism-basic.js and give us a concrete list of things, that are missing?\n. I can confirm this bug. It is because of line 40 in prism-groovy.js. env.content is already HTML-encoded and Prism.highlight() encodes it again.\nUnfortunately there is no easy solution for this. I think we should remove the wrap hook altogether from groovy and implement the same functionality with the inside property on the string-pattern. I'll work on it.\n. @acerberus Thanks for reporting this issue!\n. Should be fixed now.\n. I've removed it from all themes.\n. The problem is, that normalize-whitespace forces itself to the top of the callback list for the before-highlight hook:\njs\n// Make sure our callback runs first\nvar hooks = Prism.hooks.all['before-highlight'];\nhooks.unshift(hooks.pop());\nBut it only runs if the parent node is a pre tag, which fails for script tags before the unescaped-markup plugin is run:\njs\nvar pre = env.element.parentNode;\nif (!env.code || !pre || pre.nodeName.toLowerCase() !== 'pre' ||\n        (env.settings && env.settings['whitespace-normalization'] === false))\n    return;\nSo if I remove the forcing to the top of the callback list, and ensure that unescaped-markup is loaded before normalize-whitespace, everything works. I think that is the best option. I will continue my work on the \"after\" property in components.js, so that the download page adds them in the right order.\n. A lot of plugins check for the pre tag to determine if it is a code block. So unescaped-markup has to run before all other plugins, to make sure the script tags are converted.\n. We could also add a new earlier hook to solve this problem. A new hook would also be nice for #893. I am not sure, what's the best approach here. What do you think?\n. I've just removed the force-to-the-top hack from normalize-whitespace and I added a new hook to #893. I'll work on the order in components.js later...\n. Yes everything here has been implemented:\n- Remove force-to-top for normalize-whitespace\n- Add new hook before-sanity-check\n- Add \"after\" property for components, so the downloader can put them in the right order, \"after\" is a weak version of \"require\". It means that the component does not require anything, but if the target is loaded the component has to be loaded after it.\n. Hi @desertjim \nThanks for contributing. Annotations are indeed missing in Java.\nYour PR contains a lot of minified files, that have nothing to do with Java annotations. What minifier did you use to create these?\nYou either have to add the css class .token.annotation to all themes, or use the alias property:\njs\n'annotation': {\n    pattern: /(@{1}\\w*\\(.*?\\))|(@{1}\\w+)/i,\n    alias: 'regex'\n}\nIsn't @{1} equivalend to just @?\n. > I was just using gulp. I thought it was minifying the js files.\ngulp is correct. Maybe you are using an older or newer version of gulp-uglify. You could try executing npm update before you call gulp.\n\n\ntested it with all the themes, looks good\n\n\n\nI am not sure if the colors you chose are such a good idea. They are very bright and prominent. My Eclipse standard theme for Java uses a more subtle grayish color for annotations. Intellij uses some kind of olive green. I am not sure how other IDEs and themes style annotations:\n\n\nWe should probably use a color, that is more familiar to most Java developers. What do you think? Do you have a particular reason for choosing bright orange?\nThe groovy language already has a simpler regex for annotations:\njs\nPrism.languages.insertBefore('groovy', 'function', {\n    'annotation': {\n        pattern: /(^|[^.])@\\w+/,\n        lookbehind: true\n    }\n});\nAlso you don't need the capturing groups and the case insensitive flag. This should be enough: /@\\w*\\(.*?\\)|@\\w+/. Do we really need to capture the annotation parameters @{1}\\w*\\(.*?\\)?\n. > To avoid bikeshedding I'll leave the color to whatever you suggest :).\nWell I am not really sure what the best choice is here. Here are a few examples:\n- Netbeans\n\n- Stackoverflow \n\n- Github\njava\npublic class Duck extends Base {\n    @Override\n    public void quack() {\n        System.out.println(\"Quack\");\n    }\n}\nI am open for suggestions, but in my opinion annotations should not stand out more than for example keywords.\n\nI can update the regex to match groovy, should I use the lookBehind: true also(sorry not familiar with this)?\n\nYes lookbehind is necessary.\n. > What about aliasing it to punctuation? Then it would look discreet in all themes.\n\n(just an idea)\n\nYes let's do that. I think it looks nice. We can always change it later:\n\n@desertjim You could also add alias: 'punctuation' to the Groovy language while you're at it. Thanks!\n. > @zeitgeist87 should be good now\nThanks! It looks good to me. You should also squash down all of your commits into a single commit. Otherwise we get all the back and forth into the PrismJS git log after the merge.\n. Hi @wesalvaro \nThanks for contributing. I like your idea. This could be quite useful.\nI'll try to do a proper review until tomorrow.\n. Your solution is very precise. It is almost a complete semantically correct parser for Java stack traces. It must have taken you a lot of effort to get it there.\nHowever I think in its current version it is unnecessarily complex. Prism is not a parser and it strives to be as simple and fast as possible. I can get almost the same result with the following simple language definition:\njs\nPrism.languages.stackjava = {\n    'function': /[a-z0-9_$<>-]+(?=\\()/i,\n    'path': {\n        pattern: /[a-z0-9_]+\\.java(?=:\\d+)/i,\n        alias: 'entity',\n    },\n    'package': {\n        pattern: /\\b[a-z0-9_]+(?:\\.[a-z0-9_$]+)+/i,\n        inside: {\n            'class-name': {\n                pattern: /(\\.)[^.]+$/,\n                lookbehind: true,\n                alias: 'entity'\n            }\n        }\n    },\n    'keyword': /\\b(?:Caused by|at|more)\\b/,\n    'number': /\\d+/,\n    'punctuation': /[:.()]/,\n};\nThe above definition exploits the fact that Prism executes every pattern in order and that later patterns cannot overwrite existing matches. The above definition is of course just a quick draft to show you what I mean. It is not tested very well and only intended as a rough guide.\nI like how you constructed the IDENTIFIER_CLS variable.\nAnother minor thing Prism generally uses tabs instead of spaces.\nI hope you are not discouraged by my critique. I think adding a language for Java stack traces is a good idea.\nEDIT:\nOn second thought, do we really need all those obscure unicode characters in JAVA_IDENTIFIERS? I know they are theoretically possible, but I have never seen any of them used in practice. Prism doesn't have to be a compliant parser.\n. Thanks!\n. > Yes, we should!\n\nAnyone willing to add it?\n\nI've created a PR #924\n. Hi @chucknelson \nThanks for your contribution.\nFirst of all I have never used SAS, so please correct me if I am wrong on the language specific details. As I understand it, the proc keyword calls some kind of library function. If that is true, wouldn't it be better to highlight the function name as a function instead of as a keyword:\njs\n    'function': {\n        pattern: /(\\bproc\\s+)\\w+\\b/i,\n        lookbehind: true\n    },\n    'keyword': /\\b(?:data|else|format|if|input|proc|quit|run|then)\\b/i,\n. > PROC is actually a \"special\" boundary/step in SAS, similar to the DATA step. For more info, SAS documentation is a good reference for how they refer to some of these concepts (the PROC step in this case).\nI see. In that case ignore my previous comments.\n\nThis was just a little \"warm up\" contribution, but the eventual goal I want to hit is to get SAS support much more complete in Prism, eventually trying to mimic what users are familiar with in the Base SAS editor when it comes to syntax highlighting, as seen below:\n\nThat would be great. I am happy to help if you have any questions concerning the implementation. Unfortunately I know next to nothing about SAS.\nThe regex proc\\s\\S+ only allows a single space between proc and the procedure name. Is this intentional? \\S+ matches anything that is not a space, which is probably too much. For example your regex matches proc te;st. I would suggest something like proc\\s+\\w+\n. > I also have an issue open on how to do language-specific styling for included languages like SAS (#923), in an effort to get to that Base SAS editor styling I mentioned. If you have any input on that I'd really appreciate it! Thanks!\nThere is currently no support for themes that are only used for specific languages. To get the colors you want, you have to create your own theme. The language definition can only define the tokens. The themes set the colors.\nHowever the alias property is very useful to get the colors you want out of a general purpose theme.\njs\n'semantically-correct-token-name': {\n    pattern: /something/,\n    // use the same color as 'number'\n    alias: 'number'\n}\nIf your theme looks good with SAS it'll probably look good with other languages too. Then you can submit it to https://github.com/PrismJS/prism-themes\n. Hi @wayward710 \nThanks for your contribution! Bro is a really interesting language.\nHere are some things I've noticed about your PR:\n- There are some minor whitespace issues in your PR. You mixed tabs and spaces for indentation. You should only use tabs.\n- > Please ignore the change I made to examples.js -- I did that for local testing purposes.\nWell you have to remove it from the PR eventually :smile:\n- You overuse the array syntax for tokens a little bit. The performance is actually quite bad, so it is better to avoid it if possible. There are other issues too. For example the order of the array elements is important. The first elements are matched first and can prevent longer and better matches from other elements down the line.\n- You should use non-capturing groups whereever possible \\b(?:keyword1|keyword2)\\b\n- On the example page you use the module keyword in an example, but it is missing in the language definition.\n- I don't know anything about Bro, but in your example, the redef builtin seems to be used without the leading ampersand. Is the ampersand part of the builtin keyword or more like an operator? On this page it seems to be highlighted as an operator https://www.bro.org/sphinx/scripting/index.html\n. I am away for the weekend, so I cannot answer any questions until Monday...\n. Hi @wayward710,\nThanks! It looks really nice now.\nThere are only a few small issues. Other than that I think it is ready to be merged.\n- You still have some whitespace issues. I know it is not all that important, but it just looks unprofessional:\n  \n  You should configure your editor to display whitespace characters and automatically remove trailing whitespace on save.\n- Your tokens seem to be in a random order, but the order is important, because the tokens are matched by Prism in that order. For example operator and punctuation should be last. Operators that are matched too early can prevent later matches. For example the minus sign in @load-sigs is matched as an operator: \n  \n- I don't know Bro, but I assume that this 'italic':  /\\b(TODO|FIXME|XXX)\\b/, should be inside of a comment?\njs\n  'comment': {\n  pattern: /(^|[^\\\\$])#.*/,\n  lookbehind: true,\n  inside: {\n      'italic':  /\\b(TODO|FIXME|XXX)\\b/,\n  }\n  },\n- What minimizer do you use? If I use gulp to generate prism-bro.min.js I get a different result than yours. Maybe you used another version of gulp...\n- When you are finished you should also squash all your commits down into one or two nice commits, so that we don't have all the corrections in the log.\n. Thanks for your contribution!\nIt would be really nice if you could create a few test cases for the Bro language. The tests are in the directory tests/languages. You can run the tests with the command npm test. The syntax should be straight forward.\n. I missed that this was a PR for the master branch. You should create your PR for the gh-pages branch. I moved your commits there and removed them from master.\n. The Prism website is hosted by Github Pages https://pages.github.com/. Is it possible to use HTTPS with that?\n. Hi @benembery \nThanks for contributing. The C# functions indeed need to be updated.\nHere are some things I've noticed:\n- You use negative lookahead (?!\\[)  and (?!\\<) but that doesn't seem to work. Test] is highlighted as a function the same as [Test]. I think you need lookbehind, which is not supported by JavaScript. Prism has a workaround for it though.\n- What about the array access operator. That shouldn't be highlighted as a function: myarray[0] = 7; You could avoid that by limiting attributes to the start of the line.\n- What about the following example. test is highlighted as a function: if (test<3) { /* do something */ } \n- Generics can have multiple parameters:\n``` csharp\n  Dictionary example = new Dictionary();\nexample.Add(\"hello\",\"world\");\nvar index = \"hello\";\nConsole.Writeline(example[index]);\n  ```\n- You could use non-capturing groups in a few places.\n- You could also support whitespace between the generics and the function name (optional)\nI think you have to match the whole function call including the generics and use the inside property to highlight punctuation. But I have not tested that and maybe there is a better way...\n. Thank you for reporting this bug. I've decided to solve this a little bit differently [6f75735].\nAlso I think attributes look just fine. There is no need to include them in the functions pattern.\n. Thanks!\n. > @Golmote @zeitgeist87 Why do we have a remove initial line feed plugin? Isn't this covered by the whitespace normalizer?\nThe remove initial line feed plugin is deprecated. It says so in all caps on its page. We could remove it in the next release.\n. Thanks!\n. I renamed the language to protobuf. It would be nice if you could add an examples page examples/prism-protobuf.html and/or some test cases. We have a tutorial on how to create test cases: http://prismjs.com/test-suite.html\n. Thanks!\n. I can reproduce this with the yaml language.  The problem seems to be, that the yaml language definition uses an elaborate lookbehind to determine if something is a key or not:\njs\n'key': {\n        pattern: /(\\s*[:\\-,[{\\r\\n?][ \\t]*(![^\\s]+)?[ \\t]*)[^\\r\\n{[\\]},#]+?(?=\\s*:\\s)/,\n        lookbehind: true,\n        alias: 'atrule'\n    },\nBasically any of these characters have to precede a keyword: [:\\-,[{\\r\\n?]\nThis example works:\nhtml\n<pre class=\"language-yaml\"><code>---\nsomkey: somevalue\nanotherkey: anothervalue\n</code></pre>\nShould we consider that a feature or a bug? I'm not sure...\n. Thanks!\n. Thanks!\n. It is possible, that __id doesn't exist. It is added on the fly by the  _.util.objId() function. In the rare event where insertBefore is never called you would have no __id fields:\nThis should work in all cases, but I havn't tested it:\njs\nif (typeof language === 'undefined') {\n    for (var key in Prism.languages) {\n        if (_.util.objId(grammar) === _.util.objId(Prism.languages[key])) {\n            language = key;\n            break;\n        }\n    }\n}\nThe question is, if we should make the language parameter for the highlight function optional. Inside Prism the parameter is always supplied. You could use the above code just as easily in your plugin or before you call the highlight function.\nOn the other hand we have examples on http://prismjs.com/ without the language parameter:\n``` js\nvar Prism = require('prismjs');\n// The code snippet you want to highlight, as a string\nvar code = \"var data = 1;\";\n// Returns a highlighted HTML string\nvar html = Prism.highlight(code, Prism.languages.javascript);\n```\nBut this example was added only a few days ago with a PR. @LeaVerou What do you think?\n. Prism autohighlight runs only after all other JS has finished. This should be fine:\nhtml\n<script src=\"prism.js\"></script>\n<script src=\"plugins/your-plugin/your-plugin.js\"></script>\n<script>\nPrism.plugins.YourPlugin.customizeClasses({ .... });\n</script>\nDon't add it to the wrap hook inside of customizeClasses. I would do it like this:\n``` js\n(function() {\nvar classMap;\nPrism.plugins.YourPlugin = {\n    customizeClasses: function (map) {\n        // maybe merge classMap and map?\n        classMap = map;\n    }\n}\nPrism.hooks.add('wrap', function (env) {\n    if (!classMap) {\n        return;\n    }\n/* use classMap */\n\n});\n}());\n``\n. You don't need__id` to get the language. You can compare objects directly. If a reference points to the exact same object, a comparison returns true.\n``` js\nobj1 = {};\nobj2 = obj1;\nobj3 = {};\nconsole.log(obj1 == obj2, obj1 == obj3); // prints true  false\n```\nSo this should work (I haven't tested it though):\njs\n    for (var key in Prism.languages) {\n        if (grammar == Prism.languages[key]) {\n            language = key;\n            break;\n        }\n    }\n. Hi @Lucretia \nEvery self-respecting syntax highlighter needs support for Ada. Thanks for your contribution!\nThe only difference between the various Ada versions is the keyword token. Would it be possible to create one language definition  simply called prism-ada.js to fit them all? That is the approach we used for other languages with multiple versions.\n. > I had these as one language file (with each language defined as they are now) originally, but due to the way the examples.html/js worked ending up splitting them up.\nEvery language has to be in a separate file that is correct.\n\nI would be possible to have one definition with all keywords included for all, I suppose, but this would then mean that the interface keyword would be highlighted as a keyword even when it's not, prior to Ada 2005.\n\nWould that be so bad? The Prism language definitions don't have to be perfect. They should be small and fast. How likely is it, that somebody has some Ada-83 code with a variable named interface.\nBut I can see your point. Let's leave it as separate languages for now. I'll do a proper review this weekend.\n. Sorry for the late response. I was quite busy last month. Looking over your source code I had the following idea. Your plugin could also offer the option of a prefix to all classes. Something like a namespace:\njs\nPrism.plugins.customClassName.prefix(\"mynamespace-\");\nThat way the user would not have to provide a map for every possible class. You can of course still support the map. What do you think?\n. Your example JavaScript files like example-2.js cause the minifier to crash. You cannot have any extra *.js files in that directory.\nAlso your examples are very small. It is probably best if you include them inline in index.html.\n. Your plugin currently only maps a single token type to a single class, which is a bit limiting. Prism supports aliases, so env.classes could look like this:\njs\nenv.classes = ['token', 'equation', 'string', 'important'];\nWouldn't it be better to map classes to classes?\njs\nenv.classes = env.classes.map(function(c){\n    return classMap[c] || c;\n});\n. @LeaVerou Sure I have time this weekend. It's probably a good idea to do smaller releases more often.\n. I've reproduced the bug and confirmed that the solution works. Thanks!\n. There is a PR for a plugin that changes the class names at runtime #950. Would that be an acceptable solution?\n. If we move the template-string before string, then one of the tests for coffeescript fails, because coffeescript uses backticks for inline javascript. However this is easily fixed by adding the following line to the coffeescript language:\njs\ndelete Prism.languages.coffeescript['template-string'];\nShall I commit my changes?\n. Should be fixed with [1158e46]\n. For a quick test you can use http://prismjs.com/test.html or check out the gh-pages branch manually. The fix will be published to npm with the next release, which should be soon.\n. Yes it was supposed to use the settings plugin. I've implemented your suggestions a month ago #851 and it works very nicely. I've implemented specs, type casting and default values. Unfortunately it is too much code to include it into prism-core.js. @LeaVerou Do you have any suggestions to make it smaller?\n. I can of course add a simple class to opt out of the normalize-whitespace plugin, but I would prefer it if we could merge the parse-settings plugin.\n. Hi @garretwilson,\nThanks for reporting this! Could you provide a simple online example that demonstrates this behavior?\n. Hi @garretwilson,\nSorry for the late response, I was really busy in the last couple of months.\nThe command-line plugin uses the property float: left to position the command prompts. Unfortunately a float usually does not change the width of the parent. I've tried many things to solve this with floats and I came to the conclusion, that it is pretty much impossible.\nBut I found a working solution without float using inline-blocks Branch Commit. It is a bit of a hack. Maybe you could test it and if it works I would create a PR.. I found a bug in my solution. Here is the new commit. It is quite possible, that this will break some stuff. We should test it extensively, before we apply it to the Prism.. The issue #963 inspired me to look into improving the greedy-flag feature and I am quite excited about the result.\nThe idea is essentially the same as before, but instead of matching a greedy-pattern against the concatenated string of the next few tokens, it matches against the whole text. With this patch the following code matches correctly:\njs\n/ '1' '2' '3' '4' '5' /\n\"foo `a` `b` `c` `d` bar\"\n. Thanks!\n. It seems to work fine here http://prismjs.com/plugins/line-numbers/. Could you provide an online example that reproduces this bug?\n. I've tested it in multiple browsers and it works really great! Amazing what you can do with JavaScript.\nI've noticed one minor thing: You added <script src=\"components.js\"></script> twice. Other than that it is ready to be merged.\n. We could also add all the third party libs to package.json and copy them over with gulp. For example add this to package.json:\njson\n    \"jszip\": \"^3.0.0\",\n    \"file-saver\": \"^1.3.2\"\nand this to gulp:\njs\ngulp.task('vendor', function () {\n    return gulp.src([\n            './node_modules/jszip/dist/jszip.min.js',\n            './node_modules/file-saver/FileSaver.min.js'\n        ])\n        .pipe(gulp.dest('vendor/'));\n});\nWhat do you think?\n. > We probably could. But we did not do it for es6-promises. Should we? I don't see the real benefits here.\nOn the one hand, it would make it easier to keep these libs up to date. On the other hand, every second PR would probably contain changes to these files, because people don't know how to use git \ud83d\ude04.\nYou're right it's probably not a good idea.\n. Hi @isglass,\nThanks for reporting this. I cannot see how flags could become undefined. The expression 'anystring'.match(/[imuy]*$/)[0]; returns at least an empty string for any input string.\njs\n'xxx'.match(/[imuy]*$/)[0];\n''.match(/[imuy]*$/)[0];\nRegExp('', '').toString().match(/[imuy]*$/)[0];\nAnd if pattern.pattern.toString() would somehow return undefined, then you would get an error right there.\nThe following is the only way I can think of, that would cause this bug:\njs\nRegExp.prototype.toString = function() {\n    return {\n        match: function() { return [] }\n    }\n}\nI think we should get to the root of this problem. Could you provide more details for this bug? What browser did you use? Maybe a simple online demo that reproduces it?\nThanks!\n. For flags to be undefined, match() has to return an empty array, which cannot happen under normal circumstances:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\n\nAn Array containing the entire match result and any parentheses-captured matched results, or null if there were no matches.\n. The user-agent would suggest, that it is a 64bit Linux system running Chromium 47.0.2526.80 which is over a year old now. Do all these users have the same user-agent? Could it be some kind of crawler that uses a fake user-agent?\n\nThe only way for flags to become undefined is if you change either the prototype of RegExp or String. At least as far as I can see. I don't think we will add these changes if you cannot reproduce the bug, or show a plausible way how flags can be undefined.\nMaybe you could add some debug code to your site that provides more information:\njs\nif (flags === undefined) {\n    console.log(pattern, pattern.pattern, pattern.pattern.toString(), pattern.pattern.toString().match(/[imuy]*$/));\n}\n. Do we really have to support IE9? We could also simply add a polyfill for requestAnimationFrame to the ie8 plugin, or create an ie9 plugin with the polyfill...\n. You could also do it with a one-liner:\njs\n(requestAnimationFrame || setTimeout)(_.highlightAll, 0);\nBut it would be a bit of a hack and your solution is probably better.\n. I've just spent more than 3 hours, trying to get Prism to work in IE8 with the ie8 plugin. I had some minor success, but I had to make substantial changes to prism-core.js to get anything to work. I added a few extra polyfills to the ie8 plugin and rewrote some of the existing ones.\nThen an unfixable issue cropped up. IE8 removes newline characters with innerHTML und textContent. Unfortunately there is no good solution for that problem. So I concluded, that IE8 support is not possible, even with polyfills and plugins. We may just as well drop it entirely.\n. > I think @LeaVerou was in favor of not triggering errors in IE8, even if Prism would not work. But maybe she changed her mind?\nWell I tested it, and we are triggering lots of errors in IE8 right now. We would have to make substantial changes to prism-core.js to change that. Or some IE8 specific code like:\njs\nif (document.documentMode < 9)\n    return null;\n. I may have overstated my case in the previous post. These things cause errors in prism-core.js in IE8:\nYou cannot slice DOM elements. We would have to use a bit more code to get the current script:\njs\n[].slice.call(document.getElementsByTagName(\"script\")).pop();\nObject.defineProperty only works on DOM elements. We would have to use obj['__id'] instead, which makes the __id property enumerable and we have to check for it in other parts of the code:\njs\nObject.defineProperty(obj, '__id', { value: ++uniqueId });\nBut there are numerous other things wrong with the plugins. The file-highlight plugin causes an error because IE8 has no document.addEventListener. We would have to put an if (document.addEventListener) statement there.\n. A brand new approach for Prism to parse settings out of the DOM tree. It is a nice alternative to the ParseSettings plugin. The PR also demonstrates the use on the normalize-whitespace plugin.\n. > Can settings still be set in a programmatic way, rather than using attributes?\nNo, I removed that. I didn't like the interface. I probably should put it back in for backwards compatibility...\n. > Edit: Ah, turns out this already supports class names! Nice! I'll leave the above because it's useful as a general principle.\nIt also already supports properties that are true by presence:\nhtml\n<div data-true-by-presence></div>\n. Very nice plugin! It works very well.\nMaybe we should remove 'comment' from the candidates array. It is very unlikely that a data-uri is inside a comment and even if there is one it probably shouldn't be highlighted, because it looks a bit weird:\n\nWhat do you think?\n. I cannot reproduce this issue either. I used this HTML:\n```html\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html>\n\n\n\nprism.js entity reference bug\n\n\n\n\n<foo>bar</foo>\nThis &eacute; confuses prism.js.\n<foo>bar</foo>\n<script src=\"prism.js\"></script>\n<script src=\"components/prism-java.js\"></script>\n<script src=\"plugins/line-numbers/prism-line-numbers.js\"></script>\n\n\n\n```\nThis is the result:\n\nMaybe a CSS class from your ../../css/lesson.css is conflicting with a class that is used by language-xml.\n. This was indeed a bug. It should be fixed now. Thanks for reporting it!\n. Should be fixed now in all three languages.. > Another problem with replacing predictable sentinels in the HTML after highlighting is that if someone manages to put the sentinel in a HTML attribute, then the resulting HTML can be unsafe, leading to XSS in the worst case.\nYou are correct. The autolinker plugin for example puts a possibly user supplied URL in the href attribute. This URL could easily contain a string like ___SMARTY0___. I hadn't thought of that.\n\nAnd also, instead of replacing in a loop, I suggest to use a regexp and a function in the replacer. Then you can be certain that the replacement string cannot affect the next replacements.\n\nThat is a good idea.\nYou cannot use a quotation mark in the sentinel, because it would interfere with the highlighting:\nhtml\n<p class=\"<?php ?>\"></p>\nThe above would become this for markup highlighting:\nhtml\n<p class=\"___PHP\"0___\"></p>\nThen the regex for tag in markup would no longer match.\nHow about we count the sentinel occurrences? Every sentinel can only occur once in env.highlightedCode. If there are more, then something is fishy and we refuse to do the replacement.... On second thought, if ___PHP0___ was in a URL in a comment, then my code would also find it in env.code and avoid it:\nhtml\n<!-- Exploit: http://example.com/___PHP0___ -->\n<?php /* some kind of XSS*/ ?>\nYou are definitely right, that env.attributes is super dangerous, but I don't see a practical exploit with the current stock plugins. Maybe I am wrong with this assessment. Can you provide a proof of concept exploit?. > This is an easy way out, but may cause unexpected behavior when the code has a legitimate need for using the sentinel as a part of the code.\nIn that case my recent patches would choose a different sentinel. If for example ___PHP2___ already occurs in the code, then it is simply skipped and not used as a sentinel.. Hi @Golmote,\nThanks for your great work. I've quickly thrown together a fix for this bug #1095. It seems to work for your examples, and it passes all tests in our test suite. I haven't tested it further though.\nThe PR refactors the tokenize() method, so that a subset of it can be called recursively. That way the greedy flag can cleanup after itself. The diff looks worse than it is, because I had to move a few things around.. This should be fixed by #1095. I think this PR is ok. Another alias can't hurt. \ud83d\udc4d . Actually this is not a good solution after all. It only works if the comment contains another comment.. The same error occurs with a template string in JS:\n\n. Yes I think it is possible to optimize and generalize this approach. I will try a few things and then update this PR.. I don't think we can make the greedy flag perfect. It was a compromise from the beginning and there will always be a few corner cases where it fails.\nAt some point we have to decide if the extra effort of fixing greedy is worth it.. It should be fixed now. I've also added test cases to a few languages including one test case for template strings in Javascript.. @Golmote Do you think this can be merged?. @Golmote Thanks for the review! I've rebased it and solved the merge conflicts.. Thanks for reporting this. This is definitely a bug.\nThe problem is, that the greedy flag is set on the comment token. Comments are always highlighted first, so there seems to be no reason for the flag there. I suspect, that it was put there to fix some other issue.. This issue should be fixed by #1100. Before (Note: The JavaScript function is erroneously highlighted by PHP. CSS is not highlighted at all. Strings inside comments do not work):\n\nAfter (Note: The string \"px\" looks different, because CSS has custom styles for the class token string. JavaScript and CSS are highlighted by the correct language.) :\n\n. There is one problem with this PR. If there are no <?php tags, then it assumes, that it is pure PHP code, which could be wrong:\n\n\nIf a <?php tag is present, then markup is also highlighted:\n\n. @LeaVerou @Golmote What do you think about this PR?. > Though I don't see why we can't check if a PHP tag is present and use the markup definition if not.\nYes that is one option, but I think it is more intuitive to assume that it is all PHP in that case. For example someone could use small snippets of PHP code between paragraphs on a blog to explain a larger file:\nphp\n$test = \"<div>\" . $_SERVER['PHP_SELF'] . \"</div>\";\nIf we switch to markup in that scenario, we would force the users to put PHP tags around every small snippet:\nphp\n<?php $test = \"<div>\" . $_SERVER['PHP_SELF'] . \"</div>\"; ?>\nIf there is no PHP code at all, people should use markup directly.. @Golmote Thanks again for the review! Merging.... Thank you for reporting this. It should be fixed now 79b723d\nThe problem was, that line-highlight appends a few tags to the <code> tag. These tags contain whitespace, which is later picked up by the autoloader plugin with the textContent property and interpreted as normal source code.. According to https://regex101.com/ the [^] regex works only with the Javascript flavor. It doesn't work in Python, Go or PHP. I don't know how accurate that is and I haven't actually tested it with different regex engines. It seems to be a pretty obscure trick though. Maybe we should take that into consideration.... The behavior is a bit inconsistent. The problem is, that the number definition for most languages begins with the following regex \\b-?. The minus sign can also be a word boundary at the same time and \\b is a zero-length match. This complicates things a bit:\n\nCase word -1: The zero-length \\b matches between - and 1 because - is seen as a word boundary. So - will become an operator and 1 will be a number.\nCase word-1: The \\b matches the end of word between d and -. This time - is part of the number.\n\nWe could make it more consistent and remove all -? from the number definitions of all languages. Then it would always be an operator.. How about (?:-|\\b)? I couldn't find any case where it would not work, but maybe I am missing something. @LeaVerou What is the \\B for?. I think we should accept, that we can never make it semantically correct using only regular expressions:\njs\ni = i -1; // Operator \ni = -1; // Negative number\nThe simplest solution would be to always highlight as an operator. It wouldn't be a big change either, because we are already more than half way there:\n\n[EDIT]\nWith (?:\\B-|\\b) it would look like this:\n\nLooks also quite good.... This would be fixed with my PR #1100. This was fixed by PR #1100. It should be fixed with ba64f8dcfbb914f93d2ad9c94f64a790726d0ac9. The property noCSS: true was missing for the Custom Class plugin in components.js. By default the downloader assumes, that there is a CSS file.. You can use the Normalize-Whitespace plugin to break lines that are wider than a certain number of characters: http://prismjs.com/plugins/normalize-whitespace/. It does work perfectly for PHP. There has to be at least one <?php ?> tag in the source code, for Prism to detect if it is a HTML page with PHP tags included or simple plain PHP code. So if you add <?php ?> and make sure that the Markup, Javascript and CSS languages are loaded before PHP, it should work.\nYou can try it on the test page: http://prismjs.com/test.html. I created a PR #1254 that fixes this issue.. @lshamis Thank you for reporting this issue. It should be fixed now.. This should fix issue #1253. Looks good to me. I can't think of any situation where it would be harmful to allow it for other languages.. Also [\\w\\W]* will match the whole file, but Latex uses one line comments. It should be something like: 'comment': /%.*?(\\r?\\n|$)/g,\n. I agree the use of i is a bit confusing. But the more important issue is if you like the solution to the problem. It is a bit tricky and I am not sure if that is the best solution, but it is quite urgent. Because of this bug the autolinker plugin is completely broken and a lot of people have complained already (#359, #363). Apparantly a common Wordpress plugin automatically packages the autolinker plugin and so Prism is broken on Wordpress...\n. It is also called hashbang. It even says so on the Wikipedia link you posted. But I guess shebang is more common. I will change it.\n. Yes I agree. It only works properly without whitespace. I will remove it.\n. @Golmote Yes that is a good point.\n. It is best explained with an example. If you start off with this array:\njs\n'test': [\n    'key.1', 'key.2', 'key.3', /regex1/\n],\nThen the strings are combined and get a \\b added, because they are supposed to be keywords. I don't want to add the \\b to every string. Instead I want to add them in the last step. But then I can't combine them with other regexes. So I do it in two steps. Next step looks like this with i = 0:\njs\n'test': [\n    /\\b(?:key\\.1|key\\.2|key\\.3)\\b/, /regex1/\n],\nWithout the i -= 1 this would be the last step. Instead I decrement i. It will be immediately incremented again by the for loop, and the regex I created from the strings will be used as input. The end result is this:\njs\n'test': /(?:\\b(?:key\\.1|key\\.2|key\\.3)\\b|regex1)/\n. I used it, because the rest of the Prism code does it like that. patterns can be of the type Array, but the array object could still have a property named splice, which would overwrite the method splice() of the prototype. But maybe I misunderstood something here...\n. The easiest way to understand it, is probably to step through the example with a js debugger...\n. Yes you are correct. It's a copy&paste error.\n. Yes that is also an error. Sorry for that. I first implemented the competition inside of arrays and then patched on the global competition without enough testing as it seems. I have to think about how to solve this. Thanks for your review!\n. That is a good point. I could just concatinate it to the _competition property of grammar.\n``` js\nif (rest) {\n    .optimizeGrammar(grammar);\n    .optimizeGrammar(rest);\nfor (var token in rest) {\n    grammar[token] = rest[token];\n}\ndelete grammar.rest;\ngrammar._competition.concat(rest._competition);\n\n}\n```\n. But I can use \njs\nArray.prototype.push.apply(grammar._competition, rest._competition);\n. You also have to include your language here:\nhtml\n<script src=\"components/prism-shell.js\"></script>\n. On Firefox and Chromium the alignment between the prompts and the commands is off. If I change kbd to code everything is properly aligned. The problem seems to be, that the tag kbd doesn't automatically inherit the front from pre. The following CSS fixes the problem:\ncss\nkbd {\n    font-family: inherit;\n}\nYou would have to add that or something to that effect to every theme. That's why changes to prism-core.js are kind of problematic.\n. How about some sensible defaults for user and host like \"user\" and \"localhost\". Do you think that would be useful or maybe just confusing?\n. It works on your blog, because you use a general CSS reset in all.min.css. The CSS reset sets the font of the kbd tag to font: inherit.\nI've just pulled the newest version and tried again with Chromium and Firefox and it still doesn't work. It probably works for you, because you have other fonts installed than me. Prism sets the font-family to:\ncss\ncode[class*=\"language-\"],\npre[class*=\"language-\"] {\n    font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n}\nThe tag kbd uses the font monospace by default. If you have only monospace installed and none of the alternatives like Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', it will work on your system.\n. > Are you saying the language or alias should be defined in components/prism-shell.js?\nNo I just meant that however we eventually decide to solve the language question, you have to include that language here for it to work.\n. Your CSS is correct and it has to go in every theme. You can't just add a feature to prism-core.js, which only works properly in combination with your plugin. Most people who use Prism won't use your plugin.\nAdding the kbd tag to Prism is kind of a big thing.\n. data-output=\"2-19\" is missing here.\n. You have to include the languages you use explicitly:\nhtml\n<script src=\"components/prism-bash.js\"></script>\n<script src=\"components/prism-powershell.js\"></script>\nThe auto-generated file prism.js only contains the most commonly used languages like Markup, CSS and JavaScript. That is the only way I could get it to highlight your examples. Did it work for you without the inclusion of components/prism-bash.js and components/prism-powershell.js?\n. I know this is not part of this PR, but I've just noticed this line. How about something like this:\njs\npre.insertBefore(prompt, env.element);\n. Or even better:\njs\nenv.element.insertBefore(prompt, env.element.firstChild);\n. I think you should store your state in the env object. That's what it's for.\n. You have to do the test for the command-line class here as well.\nYou could move all the tests from the complete-hook here and add a flag to the env object, so you don't have to test it again for the other hooks.\n. You could use for (var i in outputLines) { here, like you do in the before-insert-hook. Then you wouldn't need to store the output ranges and then you could simplify the before-highlight-hook.\n. It seems a bit wasteful to split env.code again, just to get to the number of lines. You could store that information in the env object and reuse it here.\n. The forEach() is fine. I was just suggesting something like this:\njs\nfor (var i in outputLines) {\n    var node = prompt.children[i];\n    node.removeAttribute('data-user');\n    node.removeAttribute('data-host');\n    node.removeAttribute('data-prompt');\n}\nThen you would not need the variable outputRanges at all.\n. At the moment plugins and languages use the env object directly for their variables. For example php creates the property env.backupCode and the keep-markup plugin uses env.keepMarkup. As you rightly point out this practice could lead to conflicts. I like your proposed solution, but maybe we should use a shorter name like:\njs\nenv.vars = env.vars || {};\nenv.vars['command-line'].outputLines = [];\n. Good point.\n. To filter empty strings. For example the following code\njs\n '   code kbd   '.split(/\\s+/g);\nreturns this array:\njs\n[ '', 'code', 'kbd', '' ]\nafter the filter I get:\njs\n[ 'code', 'kbd' ]\n. I would appreciate it, if someone could check if the selection looks right. I am not sure if base02 is the right color for that.\n. I would also pass the this pointer like this:\njs\nopts.onClick.call(this, env, opts);\nThat way the callback function gets access to the element that was clicked.\n. Is this use of innerHTML intentional or would textContent be enough?\n. Well without it, the this pointer will point to the opts object and the developer has no access to the created DOM element. I think it is standard practice to set the this pointer to something sensible, like the source of the click event. In what specific use case would the developer want this to be the opts object?\n. You can use a single regex instead of the array here. You should also use a non-capturing group.\n. You can combine that into:\njs\n'function': {\n    pattern: /(?:function|hook|event) [a-zA-Z0-9_]+(::[a-zA-Z0-9_]+)?/,\n    inside: {\n        keyword: /^(?:function|hook|event)/\n    }\n},\nYou should limit the inside keyword to the start of the line by using ^.\n. You can combine the elements of the array. Same as above.\n. You don't need the array here.\n. @load-sigs does not work, because the - sign is matched first as an operator and prevents the match as @load-sigs. You probably have to reorder operator and builtin in some manner for this to work.\n. You don't need the object here. You can add the regex directly to the array.\n. Why do you only match \\s+? The examples here https://www.bro.org/sphinx/scripting/index.html match to the end of the line. Again I don't know Bro, so please correct me if I am wrong.\n. Maybe my description is a bit unclear. The pre and code tags do not have to be marked:\nhtml\n<pre data-option1=\"something\"><code data-option2=\"something\">\n // Code\n</code></pre>\nAny tag with a prism language class does not have to be marked:\n``` html\n\n stuff \n\n// code block 1\n\n\n// code block 2\n\n\n```\nOnly if you want settings on some unrelated tag you have to mark it:\n``` html\n\n stuff \n\n\n\n// code block 2\n\n\n``\n. I think you have this wrong. What if bothselfandglobal` are undefined? How about this:\njs\n(typeof self === 'undefined' || !self.Prism) && (typeof global === 'undefined' || !global.Prism)\n. @Golmote Yes you are right it is not supported well at all. Good catch. Your solution is perfect and we should add it.\n. @Golmote Shall I add this fix or do you?\n. \"require\": \"basic\" seems to be left over...\n. Sure no problem. Thank you for your great work!\n. @LeaVerou The c language actually deletes the class-name property from clike, so if you inherit from c and you want to put class-name at a certain position, you have to use insertBefore(). However if you inherit from clike, you can directly add class-name to the language.. Hi @Golmote, thanks for the review. Yes you are correct. My intention was not to escape the space char, but to exclude the backslash. It should be \\\\ instead of a single \\. You are also correct in that R\"(foo)\"R\"(bar)\" should not be a single string. I guess my regex skills are getting a bit rusty \ud83d\ude04 I'll fix it.... ",
    "kahlil": "Seems like it belongs to the c-like definition since you can do the same in c++ see the answer to this question http://stackoverflow.com/questions/1135841/c-multiline-string-literal\nSent from my iPhone\nOn 01.01.2013, at 16:44, Lea Verou notifications@github.com wrote:\n\nAs seen in http://thenittygritty.co/css-masking\nNot sure if this needs to be changed on the clike definition or the JavaScript one. Do all/most C-like languages allow line break escaping like JS does?\ncc @drublic @kahlil\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes def the c-like def http://stackoverflow.com/questions/797318/how-to-split-a-string-literal-across-multiple-lines-in-c-objective-c\n\nSent from my iPhone\nOn 01.01.2013, at 16:44, Lea Verou notifications@github.com wrote:\n\nAs seen in http://thenittygritty.co/css-masking\nNot sure if this needs to be changed on the clike definition or the JavaScript one. Do all/most C-like languages allow line break escaping like JS does?\ncc @drublic @kahlil\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "iamdto": "I'm having the same issue.\nThis works correctly :\nhtml\n<pre><code class=\"language-css\">p { color: red }</code></pre>\nWhilst this failed at highlighting syntax :\nhtml\n<pre><code class=\"language-none\">p { color: red }</code></pre>\nI have to set the class on the <pre> tag to make it work :\nhtml\n<pre class=\"language-none\"><code>p { color: red }</code></pre>\n. Not sure this has something to do with WordPress. See this JS Bin : http://jsbin.com/aduvun/1/\nNote that this happens on Chrome 26.0.1410.65 and Safari 6.0.4 (7536.29.13). Not tested on other browsers.\n\n. Sorry, I think I have poorly expressed myself. The issue is not really auto-detecting of languages, but setting a default highlighting when a <code> tag has an undefined language setted in its class.\nSee the second example, when class=\"language-none\" is setted on the <code> tag, the text loses the dark background color (it is kind of difficult to notice it on the screenshot because it's almost white on white). However if I set class=\"language-none\" on the <pre> tag it works perfectly.\nMaybe that's the intended behaviour, but it looks odd to me.\n. ",
    "JonathanMH": "So cool, seriously didn't think this would get picked up, amazing work! <3\n. ",
    "Rosey": "Cool, I'll close this, fix up, re-request.\n. Oops, sorry, guess I'm not totally savvy on everything that needs to be updated!\nI just added another commit :)\n. >  why not have them before keyword in the first place, instead of calling insertBefore\nI fiddled around with this a bit but certain patterns seem to get executed first and then the class-name, attr-name, and function don't get parsed correctly. (for example, class-name looks for the word class and then adds a span around the text after it. But if class has keyword applied to it first then class-name won't look for the right pattern.  And if I just put the class definition above keyword definition, it doesn't seem to make a difference. )\nI did rearrange it so that comments are now in the main coffeescript object definition & I removed the string definition (you're right, I don't know why that was there.)\nIf you try for yourself  - moving those other definitions up into the extends, you'll see that, for example, class-name doesn't work anymore.  This might just be me misunderstanding how the parser works?\nAt any rate, I can look at this some more later and see if I can figure out why that happens, or if this is an issue you recognize and know what I'm doing wrong, feel free to rearrange.  I appreciate the time you've taken reviewing my PR :)\n. ",
    "multipetros": "OK Lea, changes done!\n. The indentation it's tab-based.\nAlmost always I use tab-based indentation at my projects, because I believe that it is better and more flexible.\n. SQL Syntax example:\n\n. I have merge my branch with the latest changes of Lea's head branch and I send back a pull request. Maybe this helps?\n. I must thank you, for accepting my pull request. Keep up the good work Lea!\n. ",
    "jrf0110": "Anything else holding this PR back?\n. ",
    "dorfire": "The SQL syntax is missing functions, such as MIN, SUM, DATEDIFF and SQRT... Was this left out on purpose?\n. ",
    "jwebcat": "Hey Ya'll. \nWhat is the status on this? I would love to see this merged.\n. I'm so happy :) thanks for coding this bit Maxime! And thanks for merging\nthis! I will post here once I mod my custom color scheme monokai dark style.\nOn Mar 12, 2013 1:38 PM, \"Maxime Thirouin\" notifications@github.com wrote:\n\nI'm watching the repo, to handle support for this one :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/LeaVerou/prism/pull/72#issuecomment-14801650\n.\n. I did, I forked it.\nI was super excited to use it, but when I compile your stylesheet using\ncompass and use it with prism my scss syntax highlighting doesn't look like\nin your screenshot. Sadface :(\nI am using prism with the Jekyll plugin.\nDid I miss a step?\nIn Your link to compass recipes the syntax highlighting isn't like the\nscreenshot either.\nAny ideas?\nOn Mar 12, 2013 2:11 PM, \"Maxime Thirouin\" notifications@github.com wrote:\n@jwebcat https://github.com/jwebcat did you take a look to mine\nhttps://github.com/MoOx/prism-sass-theme-monokai ?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/LeaVerou/prism/pull/72#issuecomment-14803650\n.\n. \n",
    "zakkain": "Sure: http://cdpn.io/tlFan\nOn Mon, Feb 18, 2013 at 12:38 AM, Maxime Thirouin\nnotifications@github.comwrote:\n\nAn image is not enough to found the problem. Can you please deliver a live\nexemple ?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/LeaVerou/prism/issues/73#issuecomment-13707220.\n\n\n\u2013 Zachary Kain\nDesigner, Creative Technologist\n416-712-8895\nzakkain@gmail.com\n\u2192 view my resume/profile http://zerply.com/zakkain/public\n. Aha, OK. I can wait :)\nJust to clarify though, the part I meant was broken was the bit two lines\nbelow what your screenshot shows\u2014it is lumping the %/# together when really\nthe # is part of the Sass expression and the %/ is just part of the normal\nCSS rule.\n(and that's an awesome repo, thanks! :+1: )\n. Thank you! :D\nOn Mon, Feb 18, 2013 at 1:04 AM, Maxime Thirouin\nnotifications@github.comwrote:\n\nAh, you're right it's a tiny error. I read too quickly, again. I'll see if\nI've time to handle that.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/LeaVerou/prism/issues/73#issuecomment-13707667.\n\n\n\u2013 Zachary Kain\nDesigner, Creative Technologist\n416-712-8895\nzakkain@gmail.com\n\u2192 view my resume/profile http://zerply.com/zakkain/public\n. ",
    "PaulUithol": "Sorry, looks like this may be a dup of #63. Maybe time to pull that in?\n. ",
    "WickyNilliams": "Can you check readyState on the document?\n. Not 100% sure, to be honest that suggestion came about after 10 seconds of googling - which usually means there are a million edge cases and things to workaround :) Though i suppose because you have limited browser support you may be able to get away with it?\nIf not you could always sniff around the jQuery source and pilfer something from there haha\n. This may inspire: https://github.com/cms/domready/blob/master/domready.js\nIt has some try catch thing for IE, but I guess this is IE <8?\n. I must say, it's bloody hard to find info on DOM ready stuff. It's like everyone was baffled by it years back (loads of stuff from that period), then jQuery basically solved the issue, and now there's no info describing the current state of play!\nif i make the small alteration:\njavascript\n// in case dom has already loaded\nif(document.readyState !== \"loading\") {\n    _.highlightAll();\n}\nelse {\n    document.addEventListener('DOMContentLoaded', _.highlightAll);\n}\nIt seems to now call highlightAll() when loaded async, but not highlighting anything. Will delve deeper now. Any progress your end?\n. Right so the above doesn't work because Prism.languages hasn't been populated yet. I guess this could be populated before the main function is executed? Without reorganising large swathes of code though, you could do this (little hack) which staggers highlightAll enough to have Prism.languages populated:\njavascript\nif(document.readyState !== \"loading\") {\n    setTimeout(_.highlightAll, 0);\n}\nelse {\n    document.addEventListener('DOMContentLoaded', _.highlightAll);\n}\nI'll leave you to decide which is the more favourable approach (reshuffle or a bit of a hack).\nEDIT: tested in safari, chrome, opera, firefox. All good. Still feels a bit dirty though...\n. hey @LeaVerou, did you make any progress on this?\n. I altered this line to read as above. I've been working with it like that since I discovered the fix and I've had no problems, works perfectly\n@LeaVerou would you accept my solution above as a pull request? It's inelegant but functional. I may spend a little time investigating a cleaner solution today.\n. One use case that would definitely require proper dom ready handling (rather than using defer): I want to create a bookmarklet to highlight code on the fly (nothing worse than trying to read an article without highlighting). In this scneario, Prism would be injected into the page long after dom ready has passed.\nHappy to help where I can.\nAlso, my ugly hack above still works great - maybe that's the simplest fix for now?\n. Thanks for this! My little hacky solution from years ago finally made it in :) \n. ",
    "kyleaffolder": "@WickyNilliams Where did you include this hack within the version of Prism from prismjs.com? I would love to use this with Modernizr/yepnope and may have to settle with the hack for now. Any further luck with this WickyNilliams? Any help would be much appreciated. Thanks!\n. ",
    "arsenetar": "When loading Prism as an extension in MediaWiki using the following allowed it to highlight successfully. Granted this is in an external script but if something like this could be integrated into the core.\njavascript\ndocument.onreadystatechange = function () {\n    if (document.readyState == \"complete\") {\n        Prism.highlightAll();\n    }\n}\nInitially the internal ._highlightAll() call happens before the languages are all loaded into the script when loading from separate files at least.\n. ",
    "brendanfalkowski": "Guessing this wasn't resolved. Just tried loading with async param and it's not working.\n. Bonus: using the defer attribute does work. This is probably best for performance because the HTML parser isn't blocked during download or execution. async does block execution. See: http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\nSo use something like: \nhtml\n<script defer src=\"/path/to/my-bundle-including-prism-etc.js\"></script>\n. I think the class list should be in the \"Basic Usage\" section because it mentions the \"language-xxxx\" syntax, but to do anything you need to know the language abbreviations available. It shouldn't require starting to assemble a kit to see which languages are available or how to configure them.\n. Yep, that works. Thanks!\n. Great, thanks!\n. ",
    "aykevl": "Can I make a pull request for that? I would really like prism to support async. I don't know how to test it though - is there any documentation how to build the prism.js file?\n. ",
    "tenbits": "Closing, as outdated. \n\nIs there a recommended way to handle a plugin structure with AMD?\n\nThere would be 2 ways of plugin handling. \n- As is it was proposed By embedding the plugin into the library source: when the Builder replaces %PLUGINS%  placeholder with the concatenated plugins. \n  - Pros: No umd wrappers. Direct prism scope access.\n  - Cons: Some kind of Builder required. Prism library grows in size\n- Each plugin should contain a service function, which would resolve the Prism library: smth. like that:\njavascript\n(function(global, init){\n    var Prism;\n    /* get/require/define Prism library */\n    init(Prism);\n}(typeof global !== 'undefined' ? global : window, function(Prism){\n   Prism.languages.c = /* ... */\n}));\n. ",
    "murtaugh": "I haven't been able to duplicate the problem separately form the site, so it's probably some sort of conflict with my other scripts. Probably not worth your worrying about then \u2014 I\"ll just keep it in mind until I figure out what it is.\n. I had a chance to revisit this issue, and it turns out the problem is unrelated to the specific snippet.\nThe site I'm working on is run by ExpressionEngine, and we use a plugin called NSM Live Look that allows us to preview posts before they go live.\nThose specifics are unimportant, but what is important is that NSM Live Look loads the preview in an iframe, hidden behind a tab-style navigation \u2014 and it loads the preview whether you click over to that tab or not.\nThe issue seems to be one of volume (articles with one or two code samples don't cause the problem, but ones with many (8-10) do.\nAnyway, probably not strictly a Prism issue in this case. Safari doesn't like this particular (probably very rare) scenario.\n. ",
    "softprops": "bash would be cool. +1 for adding this\n. ",
    "ngryman": "Hi Lea,\nYou arer right, your example now fails.\nThis PR was just to resolve urls inside strings by ensuring there is no : before // for comments parsing.\nThis now highlights correctly (not before):\njavascript\nvar url = 'http://prismjs.com/';\nThis happened because the comments regexp came before the string regexp in the clike language definition, so //prismjs.com/' was first considered as a comment and then 'http: matched nothing.\nThe other solution, by setting string regexp before the comments regexp in the clike language, make urls in strings also work and the failed case you describe in the failures section now highlights correctly as a string:\njavascript\n\"foo /* bar */ baz\"; \"foo // bar\";\nThis happens because strings get parsed before comments.\nBut this does not anymore:\njavascript\n// Hi my name is \"Nicolas\" and I love sushi.\nThis happens for the same reason.\nTell me what solution you prefer, I'll update this PR in consequence.\nThanks!\n. ",
    "grayghostvisuals": "Here''s another situation I just came across this morning. Pretty much the same issue as above I believe. Using @if statements that are followed by a variable wrap the variable token in an incorrectly labeled class (.token.selector instead of .token.variable\n\n).\n. well I believe a thank you is in order good sir :metal:\n. \\o/\n. Ok let me resubmit a new PR. I'll put both logos in the img folder for you to choose from. If you don't like the look of the circle version I'll use in the markup you can try the square one instead.\n. @LeaVerou  Cheers! I'll see if I can find a fix as well, but me no good at internet and stuff LOL.\n. @apfelbox Can you reopen this issue please? The error I've posted initially above still remains.\n. Thanks! This does fix the issue although using a leading --- is typically for YAML Front Matter and this is a data file not requiring any trailing slashes.\n. wow! @mAAdhaTTah That is totally enlightening. Thanks for pointing this out. Will follow the spec from now on and continue with this convention you and @nauzilus mention :beers: \n. It's hard for me to tell which version is in use because it's a custom download and the version number is not in the output.. Ok great. Thanks for the quick attention. All good. \ud83c\udfd6 . ",
    "mojavelinux": "Perhaps I may offer some advice. I'm really impressed by this library and I also would like to get involved. But I recognize that lots of participation leads to a lot of work on the maintainers part. If you haven't already, perhaps you should consider taking a collaborative approach to code reviews. Ask contributors that have been around for a while to pick up a code review and report back to you whether they recommend accepting it as is, or whether it needs more review. It's rare that this approach doesn't lead to a better project, from code to community.\n. Exactly the one I had in mind. That's a pretty liberal approach, so it won't be right for everyone. However, it points out, at the very least, that empowering others is the best way to grow the project without getting overworked.\nI've grown several communities over the last couple of years, and I always come to the same conclusion as to why they take off. Empowering the contributors by giving them responsibility. They will surprise you. They always do.\n. Great!\n. +1\n. ",
    "gsklee": "Glad to see the direction you are considering to take @LeaVerou =)\n. ",
    "jtappa": "Since this issue is still unresolved, I thought I'd comment here. I'm considering making a language definition and theme for Puppet, but looking at PRs, there's a lot there and several that have been waiting for some time (2+ months). For now I've just broken into MacDown's package contents to edit Prism files to work with Puppet and highlight in my own theme, but I'd like to share this hack more easily with my team, and I'd like to know that if I spent the time to write and polish a new language extension it'd be merged in a reasonable amount of time.\n. If that's the case, I'll work on a Puppet definition. It's syntactically very close to ruby, so it shouldn't be too difficult. Thanks.\n. Was anything ever decided in relation to this and having a separate repo for extra themes? Because my team would also appreciate having a github theme for live previews in MacDown. \n. ",
    "mAAdhaTTah": "I don't know about the open ones, but there have been a ton of languages added lately so the project is definitely still active and merging PRs.\n. @Golmote You wouldn't want to use it in production, but if you're pulling together like a small demo or something, it would be easier setup than figuring out exactly what languages you need. The counterpoint is it could easily be a \"go-to\" when people have problems (e.g. the markup-templating issue) that blows up their site weight without thinking deeply about what the problem is.. Just to take a step back, what's the use case / user flow that we're trying to solve here? @hades200082 since you made the suggestion, how are you thinking about using it?. @Golmote That's neat. How do you generate the dir structure text? Does treework?\n. Does your version require the [dir] part or can we rely on tree entirely? I might include this in a project I'm working on, as it could be really useful for writing tutorials.\n. I think this is now handled by the JSONP plugin.. I'm definitely in need of that, @vkbansal; was going to look at tackling it myself but probably not for a while.\n. I mostly need \"copy to clipboard,\" but leaving it open for hooking into would also be great, as I also will need to add an edit button that will take you to the backend (if possible).\n. This PR is wrong - you don't edit prism.js directly, as that's compiled from the components. Make the fix in the relevant component, or in this case, you may need to create a new file.\n. @Golmote On one hand, I don't think there's a lot of harm in merging this, given how small it is, but there's not a whole lot to it, so I don't know if it's all that valuable. Thoughts?. I thought this was fixed in #167?\n. Do you really?! I'm using Ace as an editor on the back end and would to love an editor that matches the syntax highlighting. \n. The effective use of a CSS preprocessor could solve this. You could just create one partial that implements all the of the styling on all of the classes, and each theme would just become a list of variables for the particular color/layout scheme. Then, when you need to add a new token, you add the class to the partial with a default color variable, and now all of the themes will have it without any extra work.\nEach theme would be able to override the defaults if they wanted as well, but it would give you a single place to add new tokens.\nI'd be willing to contribute if this is something you're interested in. Just let me know which preprocessor you prefer.\n@lgiraudel Not sure what you mean by \"heavy for color-variables\" - the pre-processor gets compiled to CSS, so I don't think there's any additional \"heaviness.\"\n. Yeah, we'll have to include the compiled CSS in the repo.\n. Is this to work around a Safari bug? Is this Safari bug still present?. Also, I thought they voted to make the next version php7?\n. I don't think is needed anymore.. @LeaVerou @Golmote I could use this; just wrote a blog post with Yaml.\n. Just FYI, looks like some of the edge cases are no longer (italic looks like it's working inside bold).\n. Reading comprehension FTW. :-p\n. Works for me.\n. Does this need to use markup-templating now?. @Golmote I think this would be great to include, but if it needs to be rewritten from scratch, I'm going to close this PR for now.. Any chance you're taking requests? I had to remove support for a few languages when I switched to Prism in a project and the possibility of getting them added back in would be pretty awesome.\nThese are the ones I'm missing:\n- AppleScript\n- ActionScript3\n- ColdFusion\nIf you're just working on languages you use, then no worries, but figured I'd ask.\n. No worries, that is awesome! Thanks so much for your help.\n. Was it IE? I bet it was IE...\n. This is very interesting. I may play around with this in the WordPress plugin I'm working on.\nYou know, it might be easier to write a script that converts the language definitions automatically rather than converting them all by hand, especially because you'll have to backport all changes if any of them get updated.\n. Going close this, but happy to revisit if we want to include these changes.. Do we really wan to add a dependency on UMD for this? I think one of the principles of Prism is that it's self-contained.\n. > The solution was to concatenate the files and that too in particular order, which is what this issue is about.\nThis is basically what I'm doing now, which is why I opened this issue, to see if there's a better way of doing this.\nI was thinking something more along the lines of @Golmote's first take, and the asynchronicity was what I was going for. If I'm not mistaken, if we got a hook here:\nhttps://github.com/LeaVerou/prism/blob/gh-pages/components/prism-core.js#L160\nor where @uranusjr suggested:\nhttps://github.com/LeaVerou/prism/blob/gh-pages/components/prism-core.js#L62\nwe'd be able to write in a plugin that hooks in, checks the language for the highlighted snippet, and if it's not loaded yet, loads it up. I think that would work, though I have no idea how to make that work across environments (browser, webworker, node).\nAlthough (not to leave Node out in the cold), how much does that actually matter? Is rolling up a big file on the server a big deal? I wanted to split this out to lower the overhead for site load.\nI'm still pretty new at JS, but I'd still like to take a shot at this if we can work out the general idea of how to make this work.\n. What if we approached it the other way: Instead of starting with core + plugin (assuming the browser for now), we just enqueue the autoloader plugin, which then checks what languages are on the page and loads them up before loading Prism?\n. Awesome! I haven't had a chance to test it, as the plugin I'm using w/ Prism is going through some major BE refactoring. I'm also going to see what I do about pushing Prism towards more a async-friendly operation.\n. I don't think we're going to support AMD. As mentioned, this is a big change, so we're just going to still w/ the globals we've been using.. Yes, sorry, it wasn't at first but I am no longer getting the error.\n. Just to throw it out there, but is this worth merging into prism-core, rather than as a plugin?\n. I hope so - I referred to them as the same in my project...\n. git clone <url> is a shell (Bash) command. I can't imagine trying to shoehorn highlighting for all the different shell commands into the Bash language.\n. I can say PHP does. You know JS does, obv. Dunno about the rest but probably?\n. If it's PHP, use htmlspecialchars to escape the output from the database, which you should do anyway for security reasons. . You should just store the code snippet itself in the DB, not the wrapping pre and code elements. . There are a couple places you could choose to handle this, but you'll have to decide that based on your application's architecture. As mentioned above, auto escaping is not something Prism intends to handle, so you'll need to devise your own solution here. You could escape it in the text editor, save the code snippets separately so you can escape them on their own (what I do), or use JS to escape the characters on the front end before Prism runs or use a Prism hook to do it. . @VitaliyR Our apologies on the delay! I know its been a while, but would you be interested in making the changes suggested here?. @RunDevelopment I'm not sure this has been addressed (or even how to address it). Although I think the point of clobbering & replacing the global Prism object might be enough. We should test this before we merge, but I dig it.. @RunDevelopment We have a PR to add line-numbers to the test page. Do we / can we combine it with this?. (Didn't mean to close). Do you sleep? \n. I don't think this is necessary, tbh. Appreciate the contribution, but going to close.. Related: #456 \n. @Golmote Yeah, I have it bookmarked because I'd like to tackle it at some point, but I haven't had the time nor the approach yet. @apfelbox is probably right, that asynchronously loading Prism's languages would probably be a major undertaking.\n. This should be resolved as part of #1359.. You can swap out the link tag with JavaScript, and when you do, the browser will repaint the page with the new CSS. I did this on a settings page I used Prism on so people can see the different themes before selecting one.\n. Yes and no; from the spec:\n\nA line beginning with \u201c---\u201d may be used to explicitly denote the beginning of a new YAML document.\n\nIt's not required, as you say, but it can be used to indicate the start of the document. Most of the YAML files I've seen do start with ---, so it does seem to be a convention. Not sure what that mean for Prism as a highlighter, but just thought I'd throw that out there.\n. I could see this being pretty neat as a separate plugin with a dependency on line-highlight.. @LeaVerou If we moved it to a list, should we keep the badge?. @bimohxh Landed in https://github.com/PrismJS/prism/commit/f2b19644931a9b13428aab08839fada6ca3d9b46 \u2013 thank you for the contribution!. > Seriously?! What kind of BS reason is this?\nIt's pretty much the fundamental motivation behind the development of the project in the first place and has been a driving factor in a number of decisions related to the plugins. All of the plugins have HTML APIs.\n\nMy \"problem\" is that I don't particularly enjoy comments that just add more fluff to a conversation without actually adding anything to the conversation or even attempt to fix it.\n\nIn the amount of time it took you to write this giant comment, you could have opened a pull request and proposed a solution, instead of throwing a tantrum. If you don't like Prism.manual, then open the PR with Prism.options.autoHighlight and hash it out there.. @markcarver I opened a pull request for this (#1087), because that's how open source works. It does not work by whining in GitHub issues. I spent 9 months shepherding a pull request into this repository, and not once did it rise to the level of acrimony you introduced in the past day or so.\nI highly recommend you read this from James Kyle and reconsider how you treat maintainers of open-source projects in the future.. @markcarver Go away. Seriously, we've all had enough of your childish behavior.. I shepherded a PR into this project over 9 months, and it got nowhere near as acrimonious as this, despite a significant amount of debate on it. You're the problem here.. Awesome, I'll have to play around with this.\n. Promises aren't supported in any version of IE... go figure.\n. You'd have to scope the CSS or something to the context you want to highlight it in; I can't imagine how you'd support this by default, if you even wanted to.\n. @Golmote I still see '9000.0.1' in npm view prismjs. Can we unpub that too?. Any security / sandboxing concerns about straight eval'ing like this? Given Prism aims to be as broadly targeted as possible, I'd be a bit worried about enabling something like this without either ensuring the eval was sandboxed appropriately or big, screaming warnings were included in the documentation.. I appreciate the contribution and work that went into this, but I'm inclined to think this should live outside Prism core, as no core changes are required and this does more than just highlight existing code. Happy to revisit this, but going to close for now.\nThank you for the contribution! I'd definitely be willing to add a link to the site if you create an external repository for this.. Prism does have a themes repo: https://github.com/PrismJS/prism-themes Dunno if this theme should be there or here.\n. If either of you are still having problems and can provide a reproducible test case, we'd be happy to take a closer look, but I'm going to close this for now.. Maybe this is more appropriate as a plugin? \n. That may be a function of the syntax highlighting rather than the theme. You'll notice in the editor tokens.content is two different colors, whereas they're both the same in Prism. Also, in the editor, tokens.map (e.g. {object}.{method}) is highlighted differently than  tokens.replace. Not sure more can be done without changing Prism itself. \nAlso, wondering if a new version of Prism could be pubbed to npm. Would love to get this theme into my plugin \u263a. \n. Will test it this evening. Thanks! \n. Nice! \n. I dig it. I think the saturation could be turned down a bit. Compared to how I have it in my editor, I think they're a bit dark and hard to distinguish from the characters surrounding them. I changed it to this:\ncss\n.token.space:before {\n  color: hsl(24, 20%, 35%);\n  content: '\\00B7';\n}\n. Actually, that only looks better on the darker themes (which is what I tend to use). Not sure what the balance is here.\n. If we're getting a before-highlightall hook, can we get an after-highlightall hook as well?\n. A place to resolve a promise was what I was thinking originally, though in retrospect, it wouldn't actually handle what I was trying to do at the time, which was resolve a promise when all the async highlighting was finished. I ended up not going that route, so maybe it's not necessary, but I thought it might still be useful to include.\n. @LeaVerou @Golmote @zeitgeist87 I'm on vacation this coming week, so I should have some time to tweak this and extract the other plugin to your preferences, if you have guys have a chance to take a look and let me know what you think.\nThanks!\n. > Why do you need to expose the hook method? Is there a need to execute the hook manually?\nIt was mostly to expose the function in case a plugin/developer wanted to unhook and possibly run manually. Not sure if it's necessary, but figured the extra flexibility would be helpful down the line.\n\nYou could additionally to registerButton provide a higher level method to create a button. Something like: createButton(text, onClick)\n\nThis is actually a good idea. What about making the registerButton method polymorphic:\n``` javascript\nfunction registerButton(opts) {\n  var callback;\nif (typeof opts === 'function') {\n    callback = opts;\n  } else {\n    callback = function(env) {\n      // create element from opts.text & optional opts.onClick\n    };\n  }\n  callbacks.push(callback);\n}\n```\nI would probably set this up to ensure the env is passed into the onClick method as well.\n\nI think the helloworld button should do something. Maybe something like alert('Hello World!');\n\nCan do. And if we like the polymorphic idea, we can use the helloworld button to demonstrate how to do it that way.\n\nYou could also create a useful demo button, that selects all of the code in the box: http://stackoverflow.com/questions/11128130/select-text-in-javascript\n\nInteresting. Might be more useful as an example than the helloworld button. The Clipboard.js implementation uses \"select-all\" as a fallback when the actual copying fails (primarily in Safari, maybe older browsers).\n\nThe CSS styling looks a bit boring, but that is just my opinion\n\nI mostly copied it from the original implementation with some tweaks (I preferred having each button appear visually distinct), but I am not really a designer, so if anyone has any improvements, I'm all ears.\n\nThanks for contributing to Prism! Sorry for the late response.\n\nNot a problem! Figured it was worth following up, since you guys are pretty active. I've added checkboxes for the open questions remaining on this PR. If the polymorphic idea is acceptable, I should be able to make those changes tonight.\n. @golmote Any issues/considerations for Node/Browserify users? I don't know if that matters on the Node side, but Browserify users, I believe, will have to explicitly assign the Clipboard var as a global. I'll have to take a closer look myself, but would a require check and call be acceptable? And would we be ok including it as a dependency in package.json?\n. There is an optionalDependencies key, but it doesn't appear to function differently from regular dependencies. I'll investigate some options and report back. \n. So optionalDependencies would mean that the dependency gets installed when installed from npm, but it's not required, so if it's not found or something, the install would still work. I don't know if that's acceptable, but one option is to add Clipboard.js as an optionalDependency. Presumably, if you're installing from npm, you have a build process (likely Browserify/Webpack), which should work with the require check I added (though I still need to fully test that).\nAlternatively:\n\nI wonder if we can use gulp to pull in the latest version from clipboard.js\u2019 repo and bundle it with the plugin.\n\nThis should be possible; maybe we could do something similar to the way the autoloader's language dependencies map is built. It would mean that the Clipboard.js library would be inlined into the Copy to Clipboard plugin.\n\nAlternatively, the plugin could load the CDN version of clipboard.js dynamically.\n\nThe only issue with this is we can't be sure the CDN asset will be fully loaded before the highlighting starts, unless DOMContentLoaded will only fire after all assets (including async ones) are loaded.\nThe only other idea I had was to modify the downloads page and ensure Clipboard.js is loaded first there when selecting the Copy to Clipboard plugin, but I'm not sure how to accomplish that at first glance of the downloads.js file.\nI've pushed a first pass at Copy to Clipboard plugin. The demo page has Clipboard.js loaded from the CDN. Definitely interested in your feedback.\n. Added a hover animation and a drop shadown. Does that make it pop a little bit more?\nAlso, I added Clipboard.js to optionalDependencies, but if that's not something you want, I can remove that commit. Even with that added, the download page doesn't bundle with Clipboard.js. Should it?\n. Bump. Thoughts on handling the dependency?\n. The issue I had with that is you can't be sure the CDN dependency is loaded before highlighting begins. How would you suggest resolving that? \n. @LeaVerou Thanks! I think I got it. This should cover all use cases. You can load it yourself, it will get compiled automatically if you're using browserify/webpack, and if you don't do either, it'll load automatically from a CDN.\n. I added two open questions to the PR as well, related to the discussions around the filename plugin and/or a potential HTML API for this plugin to automatically add labels to the toolbar from data-attributes.\n. Bump. Any thoughts on the remaining open issues?\n. > Regarding the HTML API, isn't registerButton enough? Or am I missing the exact expectation here?\nThere was a suggestion to add something like data-label to read from and add a label to highlighted code.\n\nRegarding the Show Language plugin (or anything it might evolve into), couldn't it require this plugin and use it just like the Copy to clipboard plugin does?\n\nIt can; the question is whether we subsume the current plugin into an extension for the toolbar, how that impacts BC, etc.\n. Bumping this PR again. I've seen @LeaVerou mention a few times that expanding the Show Language plugin to be more generic would be a good idea. I've been spending a lot of time lately on my plugin that uses PrismJS, so I'm wondering how feasible it is to get some of this work merged back upstream. The toolbar plugin would be useful for #1030, which was opened recently.\nMy proposal here is to make the show-language plugin dependent on the toolbar plugin, using the same API in the HTML to provide the language. The major difference is the styles changed in order for me to get it work. The position: absolute of the show-language styles made it difficult to include several buttons without positioning each individually.\nThe first question I have is whether this is an acceptable approach, as I'm not sure how to deal with BC, if that's even an issue here. I'm honestly not entirely certain how you think about BC; are you assuming people have to download the latest version from the site? If so, then as long as the downloadable work, it should be BC.\nThe other issue I had last time I played around with this was getting the download page to automatically check the toolbar plugin w/ show-language. Any thoughts on handling that?\nThanks!\n. Ok, I'll update this PR to update the show-language plugin to depend on the toolbar plugin.\n. The Toolbar plugin is the \"generic\" version, with which you can register a callback to generate a label on a prism code snippet. The Show Language plugin will turn into a plugin that registers a callback with the Toolbar to show the language.\n. > I'm not sure I understand why we need two plugins where one's functionality is a subset of the other. In similar cases when this happened in the past, we just kept one (e.g. whitespace normalizer vs trim first line plugin). We can just have a setting that shows the language.\nToolbar doesn't do anything on its own. It just exposes an API to allow other plugins to register labels to it, which the Toolbar plugin will add during highlighting. The Show Language plugin will be one of these plugins; all it will do is register the callback to create the language label. So there isn't really any overlap. Toolbar manages & adds all of the label; Show Language creates one of these labels for the Toolbar to add.\n\nAlso, \"Toolbar\" is a rather confusing name for a plugin that shows labels on code snippets. What about \"Show labels\" or something?\n\nHappy to oblige. Should get a chance to work on this over the weekend.\n. @Golmote Copy to Clipboard is included in this PR, so not so \"hypothetic\" :).\n. If the design goal is to be able to do things with HTML alone, why would we use CSS variables?\nI also don't know CSS variables (although I feel like I read there are differences between them and say, SASS variables), so I would have to spend some time learning them in order to implement this myself.\n. Ok, but I'm still not sure of the benefit over data-label. Wouldn't the use of content be bad for accessibility? \n. > Anyway, as I said, I was just throwing an idea out there, it's not necessarily a good one.\nNo worries. I guess I'm just not sure what the benefits are of CSS variables over an HTML data-attribute API.\nIf I'm following correctly, the Show Language plugin would inject the CSS --language variable into an inline-style on the pre element. The CSS content uses the --label first, which would be set by the Prism user on the HTML element, falling back to the injected --language if --label isn't found. Is this correct?\nI think how the --language variable gets injected is where I'm not sure, unless that's set in the CSS, in which case, we'd need to create language-{languageKey} classes in the CSS for every language to set it.\nThat would decouple things, which would be nice, though wouldn't it mean the user could have either a label or a language, but not both?\n\nI'm more concerned about usability for our users.\n\nThat's part of why I pointed out my ignorance of the feature. I'm not sure its widespread/common enough to be in the toolset of an average developer (yet). Also, the data-attribute method is already in use in other plugins, so it would be more consistent for users to continue that pattern rather than introduce a new pattern here.\nAll of that said, I'll play around with this idea when I get chance to work on this so we can see what it looks like and how we feel about it.\n\nHence the HTML API. Which might even allow to add multiple labels at once, set the order and configure other stuff.\n\nDo you have other ideas about the HTML API besides just a simple data-label?\n. > Not sure why you're confused, I said you set it and get it exactly like any other CSS property.\nWell, yes, I assumed you can do it w/ JavaScript. But for --language specifically, is that how you want to inject it, with JavaScript, for the show-language plugin? I also mentioned we could do it in CSS, with a class for each language setting the custom property. I think this is more for our implementation than userland.\nAlso, the current implementation is intended to allow multiple labels, e.g. the plugin I'm building has a copy button, an edit button (for logged in users to easily edit the snippet, so that's a link) and the language. Right now, that's handled by registering an element-returning callback with the toolbar plugin. How do you envision that working?\nRight now, the Toolbar just accepts callback or configuration objects to register a label or button. Is this label functionality with the CSS variables going into the Toolbar itself or the label registered by the Show Language plugin?\n. Updated the Show Languages plugin & added a basic HTML API using data-label to add labels to the code snippet. Any ideas for anything more complicated/extensive?\n. That sounds interesting, but how do we coordinate between the HTML API & the JS API? Copy to Clipboard isn't using the HTML API; should it just go second, all of the HTML-based labels/buttons have been added?\nRegarding the data-label-onclick, if you're going to have to write JavaScript anyway, I think I'd rather push the user to use the JS API than reference a global function. Providing a url via HTML attributes would be useful though.\n. I fixed the a -> button and added support for data-url to add a link instead of just a plain label. I was looking into managing multiple labels, and I'm beginning to feel that API might get ugly & unwieldy. I think if you need multiple labels/buttons, you should be doing them in JS.\nThe HTML API provides a simple API for adding a single label. If you need multiple labels, or onClick handlers, or anything else more complex, I think we should push users to use the JS API.\n. We could ask plugins to register by name, then have users declare on a the html or body the order they should appear, e.g.:\n<html data-toolbar-order=\"['label', 'clipboard', 'language']\">\nWe can fall back to the order they were registered if the data attribute doesn't exist.\n. > Would it be possible to control the position of the label added through the data-label attribute this way? Maybe by giving it an arbitrary alias?\nIn the above example, label was supposed to refer to the position of the data-label attribute. Maybe toolbar is more explicit?\n. Just updated to control the order via data-attribute.\n@LeaVerou I'll take a look at that later today. Would be useful if someone wanted to include an icon or something of that nature. How would someone declare their event handlers in a <template>? Unless you just mean inline JS, e.g:\nhtml\n<template id=\"my-custom-button\">\n    <button onclick=\"alert('Hi')\">Hello!</button>\n</template>\n. If we wanted to go crazy w/ that idea, we could even implement a mini-DSL and allow people to slot in the code snippet's language and such into the label:\nhtml\n<template id=\"my-custom-button\">\n    <button onclick=\"alert('Hi')\">Hello {{language}}!</button>\n</template>\n. @LeaVerou PR updated to include that suggestion.\nI think that addresses all of the questions I had when I opened the PR originally. I know this is a big one, and I just want to say thank you for everyone's patience and feedback in working through this.\n. Will have some time this weekend to make edits as needed. Bumping this PR; maybe get a merge?\n. No worries! Happy to contribute.\n. This could be achieved with the Toolbar plugin I'm working on in #891. We're still working out questions about how to handle the Clipboard.js dependency, but you can definitely use it now to add your own label if you want. I'm using it in a WordPress to do exactly that.\n. I would be the opposite. You pull in the toolbar plugin which just makes a function available to you to register your own buttons with. You could then register a function that will check that data attribute and add the file name label. \n. If we needed an HTML API for the toolbar plugin, that's definitely possible, but hasn't been implemented yet, since I don't know what that would look like. \n. Toolbar plugin doesn't. Copy to Clipboard plugin does, as well as having a dependency on the toolbar plugin itself. \n. No worries, there are two plugins in that PR, so the confusion is understandable.\nTo use it, add prism-toolbar.js from the PR and its matching CSS to your project (which could be different depending on how you're developing) and check the index.html file in that plugin's folder for how to register a new button. If the documentation is confusing or unclear, let me know so I can update it for others.\n. I'd be open to that. Would be up to the maintainers whether they'd want the Toolbar plugin to supersede the language plugin like that though, given whatever BC issues may arise.\n. With the toolbar plugin, you could process it in js first. \n. I think the main difference between the show-language plugin & the toolbar plugin is the styles, honestly. I do know, for now, they don't play well together, so perhaps one should supersede the other.\n. These have been combined now, so this is resolved.. @Golmote You think this would be useful to include?. Superceded by #1520.. GitHub has enabled this for free for custom domains with LetsEncrypt. @LeaVerou I think an admin needs to make the changes to turn this on.. Sweet! Happy to help.. There is a line-highlight plugin now.. @johnsmeeth If you can provide a reproducible test case, feel free to reopen and we'd be happy to take a look and see if we can resolve it, but since it's been a while, I'm going to close this.. FWIW, I looked at your site on both Chrome & FF, and neither of them highlight. I also see an error in the console in Chrome from an unrelated script.\n. @garretwilson I know it's been a while, but the commit referenced isn't in Prism, just his fork. You would need to copy the code in manually to your codebase to test if it resolves your issue. If it does, we can pull it in.\nIf you're not really having a problem anymore, we can close this issue. Let me know.. It's similar to .ini, right?\n. @LeaVerou I'm working on an integration that might require access to a component.js{on}. I'm bundling with webpack and am looking to use its async loading to load up the languages & their dependencies, rather than using the autoloader, as this would simplify my build setup and allow me to run everything through webpack (including the CSS, which is pretty useful).\nCurrently, the component.js is not distributed on npm, which is what I was planning on using to determine the language dependencies and load them at runtime. Converting it to a JSON would be helpful for me, as the current, undistributed component.js is not require-able as-is. Any chance that update could be made? Would a PR for that be accepted? And does the original component.js still need to be generated?\n. There are a couple of techniques to solve this. I've used this one before, but there are other suggestions in that SO thread. I don't think there's anything we can do in Prism to work around this.. This would also be a pretty good solution for #1438. Two birds w/ one stone.\n@LeaVerou Besides some minor code style questions (and resolving conflicts), is there anything else here to fix?. > I see that one of the main concerns was that there was no JS API to set these settings. Has this been resolved?\nThis might would to be resolved on a per-plugin basis, so normalize-whitespace would need a method for overriding the settings. Alternatively, we could migrate configuration settings to a Prism.config object, then getSettings can be updated to check that first and then search the DOM if the setting isn't found there.\nNeither of these feel great though; any other ideas?\n\nWhy not construct an appropriate selector and just use element.closest(selector)?\n\nI'm not sure the amount of code required to do it w/o .closest() is prohibitive, unless we're planning on replacing a couple other traversals w/ it. I believe there are a few spots in core that do similar traversals that could be replaced with .closest(). Do we want to make those changes?. I'm going to close this, as I don't see a pressing need for a settings API at this time, but happy to revisit this if we decide we need it.. This is pretty old and the documentation has (hopefully) improved since then. If there are areas you still think are lacking, please feel free to open an issue or (even better!) a PR. Otherwise, I don't think there's anything actionable left here.. Related: https://github.com/PrismJS/prism/pull/891\n. Use:\nimport Prism from 'prismjs/components/prism-core';\n. scala has a depdency on java, as per the components.js. Make sure you import java first.\n. @Golmote I'm not seeing the download link on the linked page.. Yeah, looks like this in the Chrome devtools:\n\nToolbar doesn't have anything in it. :/. Weird... let me clone the repo locally and dig into it.. Haven't had a chance to dig into it\u2013just moved into a new place. It's on my todo list tho.. If this is something you're interested in pursuing, we'd welcome a PR! Otherwise, I'm closing as we probably won't address this ourselves.. The version on npm is often behind the version on GitHub & the download page. I usually install prism from GitHub using npm for this reason.. I actually had on my todo list setting something like this up with Sass. Each theme could (primarily) be a declaration of variables. Combine that with a shared set of rules, and you could generate each theme with a gulp task by applying the set of variables to the shared ruleset. Then if you need additional token names, you would just have to update the main ruleset and the generated themes would get them with one of the styles/colors applied.\nThat said, I don't know how that would work with the separate themes directory, but it's an idea.\n. Yeah, you could still include those theme-specific rules in the individual theme Sass file. What the main ruleset would do is provide a base set of tokens with a variable to apply to them, so you wouldn't need all the tokens in each theme.\nThat said, it doesn't necessarily address your second concern, unless each language had a common base of its own to then apply to. But then you'd be generating a stylesheet for each theme/language combo... :-/\n. I don't know if I would say that. I've used node-sass without issues in a few projects. From what I understand, it isn't (yet) at feature parity with ruby-sass, but it's stable. If we want to stay in JavaScript-land, there's LESS, or we could even use PostCSS to just pull in the minimal features we need. The way I was thinking it, if we had variables and nesting, that would be enough to make it work.\n. Yeah, it provides node bindings & a JS API for libsass, but libsass itself is stable.\nUnless you're suggesting that we want do the compilation in the browser for the download page, which I hadn't considered.\n. We can't compile them in advance and commit them? If you wanted the css files on the download page to only contain styles for the languages the user had selected, you'd have to compile a css file for every theme/language combo, and have the download page just grab the ones needed + the language base. For npm, would just ship  them all and a \"master\" that contains everything and let the consumer figure out what they want to do with them. \nThat said, I'm going to cede the floor to give others a chance to propose alternative solutions. If this solution seems workable at a future point, with changes, I'm happy to work on it. \n. Are there supposed to be images? I don't see anything in those spaces.\n. Maybe PR it to prism-themes ;). @Golmote Can we go ahead with this?. Fair enough. I don't really feel strongly that we need to change it. We're working with gh-pages as a \"development\" branch, with master matching what's on npm, so we can just leave it and go with that approach.. Sweet!\n\nAre we going to now use master as a dev branch?\n\nI think we should. There's not so much churn / new features in Prism where we need to be able to hotfix off master to release bugfixes while we develop new features on a separate branch.\n\nIf yes, are we going to have a separate branch for releases, like master used to be?\n\nI don't think it's necessary, for the same reason. Tagging the branch triggers a release with Travis (I think?), so that should work well.\n\nAre we going to keep updating gh-pages or just freeze it in time? What are we going to do with existing PRs that are for gh-pages?\n\nThis, I'm not so sure. For the most part, I expect we could just point those PRs at master without an issue, but a lot of them are fairly stale. I wouldn't feel that bad about just blanket closing them with a note that we'd love to land the changes but they need to updated from master etc.\nAlternatively, for the ones we decide we want to include, we could include them \"manually\", as I did with the tap component\u2013just make the changes ourselves and merge them in to clear out the PRs we have open that we like.\nI tried to do a little bit of cleaning of the PRs over the weekend, but the currently-opened ones felt like things we should merge in.. I think we also need to merge gh-pages -> master?. I'm going to reopen this, as there's still the open question as to what to do with the open PRs pointing @ gh-pages.. clipboard is an optional dependency for Prism, as it's only required if you use the copy-to-clipboard plugin. How does jspm handle optional deps?. > Error: Cannot find module 'prismjs/components/prism-javasrcipt.js'\nYou spelled Javascript wrong . Updated!. Just a thought: this does require some checks in the code that's supposed to disable Prism, if as in the scenario from the original issue, the \"disabling\" script can't know whether it's been loaded before or after Prism, but I don't think there's anything we can do about that.. I dont think that'll work because the callback will have already been attached. So more like:\njs\nif (window.Prism) {\n  document.removeEventListener('DOMContentLoaded', Prism.highlightAll);\nelse {\n  window.Prism = { manual: true };\n}. We can; we would break BC for people using the old document.removeEventListener('DOMContentLoaded', Prism.highlightAll) method of removing auto-highlighting, as now the callback we're attaching won't be just Prism.highlightAll.. Fine by me; if we do that, we should document that somewhere though. Is the CHANGELOG enough or should we include a \"how to disable auto-highlighting\" somewhere?. @omeid Thanks for the reminder. Open #1402 to track. Would love a PR if you've figured out how to use it \ud83d\ude09. @Golmote This also looks useful. Thoughts?. Superceded by  #1430.. This would also make a good first issue: expose highlightLines as Prism.plugins.highlightLines in that plugin.. @grorg Are you able to make the changes suggested here? We'd love to land this!. Why do comments need spellcheck=\"true\"?. There is a _.hooks.run('wrap', env); right after the env gets built. If this is needed by Dabblet, it should be doable to hook into the env from outside and add spellcheck=\"true\" if needed by Dabblet or anyone else. I'm :+1: for going ahead and removing, unless @LeaVerou has objections due to conflicts in Dabblet.. This doesn't seem necessary, given everything already works and the install steps are pretty minimal.. Interesting. I have to imagine that anyone who knows how to inject new DOM nodes into the page can figure out how to run  the JS api, but you would know better than I.\nWhat about writing it as a plugin?. prism.languages.bash is probably undefined. When you require prismjs in node, you need to import the components: require('prismjs/components/bash') or whatever the exact path is. . @pinheadmz Yeah, should be prism-bash, but you can use the new loadLanguages helper as well.. This: require('prismjs/components/bash') -> require('prismjs/components/prism-bash'). I didn't type out the whole path.. @chakrihacker If you're interested in opening a PR, we're always open to new language additions.. Right now, no. How would you like to specify that? I could look into that.. Is this issue still valid? Are any of the plugins workable in Node? If they are, we could expose a loadPlugins, similar to loadComponents, for Node, but not worth doing if we can't even use them.. > Regarding a loadPlugins function, is it something that would be useful? They usually don't have any dependency...\nThe main benefit would be not needing to know the paths. I dunno if it's that beneficial, but it does at least provide some symmetry with the way loadLanguages works.. Right now the suggestion is to use the babel plugin: https://github.com/mAAdhaTTah/babel-plugin-prismjs/ \u2013 there are definitely still details to iron out if you're providing a library using Prism, as it suggests the consumer of the library needs to run babel over their dependencies (or at least that library), which may or may not be easy to do.. That's correct. May not be worth it / possible to highlight server-side in that case.. They can highlight on componentDidUpdate, so it doesn't fire on the server. They also should not be using loadLanguages in any code intended to be used on the client.. Is Clipboard.js included on the page? Do you have a public, reproducible example?. You need Clipboard.js installed. That's what handles the clipboard interactions. The \"invalid constructor\" is the attempt to instantiate the Clipboard.js object failing.. Did it really? We check window.Clipboard to determine whether to inject/provide the CDN version. If Chrome has a window.Clipboard already, we can't check inject the correct one.\nPoking at it in the console, it doesn't appear to... do anything. I can't new it, it has no static methods, although there are a few prototype methods, and I can't find any documentation on it. There's also a ticket open @ Clipboard.js to change the global name: https://github.com/zenorocha/clipboard.js/issues/468\nHoping Chrome will provide some docs on this feature so maybe we can figure out how to detect it properly or Clipboard.js changes the global name. I don't have a solution off the top though.. @ayumihamsaki Anything after 61 will have this problem, as that's when the global Clipboard object was introduced. The plugin normally installs Clipboard.js at runtime for you, if you don't install it yourself, but with the introduction of window.Clipboard in Chrome 61, this check fails, as window.Clipboard already exists. It's just not the Clipboard.js instance we're expecting here.. @caraya Thanks, that might be it, but Chrome 61 (or 63) doesn't have a navigator.clipboard property. I'm still not sure the cause.\nUpdate: Yes, the window.Clipboard prototype matches the Clipboard inteface in the spec, so this must be an early introduction as they build out the infra for this Clipboard api.\nJust so everyone knows, this can be resolved by including Clipboard.js yourself, either in a script tag or bundled into your JS. It's specifically the plugin's behavior to fallback to a CDN version if it doesn't find Clipboard.js that is failing.. So the require step doesn't work either because window.Clipboard was found initially. The only way this works is to load up the Clipboard first and assign the correct instance to window.Clipboard D:.. @Golmote Would it be a terrible hack to do something like this instead:\njs\n/(native code)/.test(window.Clipboard.toString()). This version of the fix is here: #1206.. tbh, the thing that bugs me about this, given Prism's target audience, is I'm not sure how many people are going to upgrade to the new version, which is part of why I'm hesitant to push in a temp fix. Users are going to have to realize the problem, trace it back to Prism (difficult on its own), then regenerate the prism.js file from the site and put it up on their site, a not-uninvolved process that could need to repeat should the browser change its behavior.\nWhich is why I was holding off on a fix until I got more info. I don't know if it makes more sense to push out a temp fix now and then fix it again or give it a chance to be resolved in a more permanent way.. Ugh, yeah, this is #1181. This is painful.... @Golmote All of the plugins except this one check the existence of grammar first. This PR is good to go. Can you merge this tomorrow? #hacktoberfest. I'm not sure I follow. It should only copy the current snippet, not all snippets on a page. . I'm able to reproduce this on my phone now. And you're saying this highlights both correctly when not using copy-to-clipboard?\nAlso, what version of Chrome Mobile are you using (Settings -> About Chrome)? . Just to eliminate any relationship to #1181, can you add this script tag right before the prism.js:\nhtml\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/1.5.8/clipboard.min.js\"></script>. @Golmote How do you feel about this approach?. I'm inclined to doubt it'll be temporary, as I haven't seen any movement from the developer on the Clipboard.js repository. I do think it'll be stable, so I don't think we'll need to remove it.. Do you have a public example we can look at? . Highlighting seems to work fine here: https://neutrondev.com/how-build-first-app-electron/\n\nWhat browser / OS are you seeing this issue on?. Do you see any errors in the console? I'm on the same version of Chrome (but for Mac) and don't see any issues, so this is a bit weird.\nAlso, can you provide that URL as well?. If you can write regex, best bet, I think, would be to modify the language definition at runtime, or create an extended language definition. You can see here how C++ extends the C language. You can extend C++ w/ like a \"C++ Extras\" that includes the keywords you want highlighted, then highlight your code snippets with your new language.. I think this is resolved but feel free to reopen if there's still an issue here.. This seems to be specific to the styles of the Prism site. The usage of the large margin to the right causes the button to be positioned too far to the right to be visible. Will need to dig in.\nChrome 68, OSX.. LGTM. Just need to rebuild the autoloader.min.js.. If you could add the new tutorial at the end of the list, we can merge this.. Thank you for contributing!. What's the purpose / need for this. Yes, please do.. Can you provide a live page where we could investigate?. Do you have a live example we can look at?. @Golmote Yeah, if I disable that in devtools, the issue goes away. Gonna have to look up the ::selection selector now, first time I've seen that :D.. FWIW, Atom's JSX highlighting seems to have this bug as well, so this may be a tough one to fix.. @svalat Any chance you could provide a repo case here?. This is caused by #1181. You need to update to the latest version.. Yeah, I'm not seeing the plugins in the JS served on your site.. The download page produces a URL with everything you selected. Could you share that here?. In the CSS & JS files on the download page, you see the Prism version and a URL underneath it. That's the one I'm asking for.. @Golmote You can't do it in that order, import statements are hoisted. If you swapped import for require, that would work if you changed var Prism to global.Prism.\n@mikehardenize Are you using a bundler of some kind here?. > The thing that worries me is that with this improvement, those look even more like bugs than unhandled cases.\nJust to clarify what you mean, you're worried that because the first batch of plaintext (\"this is plaintext\" in ur screenshot) doesn't highlight \"this\", the second batch that does looks more like a bug?. I dig it, and I don't see any complications.. @arxeiss Thank you for the contribution!. @Golmote Nice catch, and agreed. If we need a wrapper for other plugins, we can develop a generic method then.. Thanks! This is definitely something I was planning on implementing as I i18n a plugin I'm working on. However, I don't think we should use global variable to handle this but data-attributes instead.\n@Golmote @LeaVerou I don't think we want the translation on every code or pre instance, although maybe that's fine. What about putting it on the script tag itself work? Body tag? Where else? Thoughts?. @AlexTorresSk Do you have enough information to take a shot at an implementation here? You can see how inheritance is handled in core here.. Hi @AlexTorresSk, thank you for the contribution. We're definitely not going to go with globals for this, so I'm going to close this PR, but we'd love to merge a fix for this, if you'd be interested in taking it on. If you do, please branch from master, as we're in the process of deprecating gh-pages and moving everything to master.\nI've opened #1438 to capture this issue, as it's something we definitely want to address. Please let us know if you have any questions if you do pick this up.\nThanks again!. Honestly, I think this is unlikely to be supported / implemented by the core team, but we'd accept a PR for a plugin.. Thanks for the fix! Don't forget to run gulp and commit the minified file.. LGTM!. @juancampa There's a command-line plugin that may suit your needs.. I'm not sure this is really possible, given Prism's design. Going to close this as wontfix.. @Golmote Should we include this in the rest of the themes?. Does this include the loadComponents part of that issue? I'm assuming not, but the file is minified, so I can't see the results.. I'm still into this if we can get the conflicts merged.. Maybe loadLanguages would be more appropriate as a name, since it can't load other components, like themes or plugins?\nAlso, we get slightly less code if we just call load within the if block, e.g.:\njs\nif (components.languages[language] && components.languages[language].require) {\n    loadComponents(components.languages[language].require);\n}. @paladox Would love to get this in. Would you be able to make the minor changes requested here?. Is walkTokens similar enough that we can make that reusable in some way between the languages?. I was thinking the Prism.util namespace, but if you don't think it belongs there, it's fine, especially if it's not universally reusable (cuz PHP is different).. Possibly-terrible-idea: Have all of them depend on a \"language\" who's sole responsibility is to make this function available on Prism.util.. By Velocity, you mean, Apache Velocity, the templating language? http://velocity.apache.org/. @ileitch Would you be able to make the change suggested by @Golmote? If not, I'd be happy to pick this up. Let me know.. How wide is the scroll bar? I'm on a Mac so I can't test, but we should be able to shift that over a little.\nEven better, if you want to submit a PR, that would be great!. Basic idea is this:\njs\ndelete require.cache[require.resolve(pathToLanguage)]\nWould make a Good First Issue\u2122.. I don't think it's that inefficient. We're not loading that many files. Users also probably shouldn't be loading the same language multiple times anyway. Maybe document all of this and just invalidate every time?\nAdding a second parameter seems like the type of thing people will just throw in when things aren't working.. Wow, nice catch.\nIf we wanted to still avoid said second parameter, we'd have to resolve them in the loadLanguages function, e.g. when we do this:\njs\nloadLanguages(['markup', 'javascript']); loadLanguages('markup');\nWe'd have to reload javascript after we've loaded markup the second time.\nIs that \"optional dependency\" made explicit anywhere? We could add optional dependencies to components.js, and reload them conditionally based on whether they've been loaded already or not.\nIt's not ideal, from an implementation perspective, but I'd much rather pull that complexity into Prism rather than expecting users to understand whether or not they should be invalidating the cache. Understanding whether to do so requires users to understand Prism's internals, which I'd like to avoid even at the expense of making loadLanguages more complex.. I don't know if that's a big deal for node applications. A standard node_modules is pretty huge and has a ton of files, you're often installing a couple hundred dependencies and require'ing a boatload of files on startup.\nAre people going to be re-require'ing language definitions often enough for this to be a problem? I'm inclined to think the surprise of it not working as expected and needing to dig into why would be worse than tracking down why so many files are loaded. That's also an easier problem to solve: load up all the required languages up front, then you don't get slowdown while your app is running.\nEdit: That said, I'm not writing a lot of node applications, so I don't have a lot of experience here to lean on.. @sslotsky The dependency is internal to Prism. Prism languages have dependencies on other Prism languages.. It's not a bug. However you decide to consume Prism, you need to make sure the languages have their dependencies satisfied. Those dependencies are described here. You can see here that handlebars has a dependency on markup-templating.. @sslotsky I might suggest opening an issue on Spectacle's repo to open a line of communication about this issue. We don't really have a good \"story\" for bundlers right now besides that kind of manual setup, so maybe this is a good opportunity to try and solve that.. Related to #1395.\nAlso, you can use the new loadLanguages function added in #1359 to load the languages with the correct dependencies in Node. That PR has an example.. loadLanguages is intended for using in Node specifically. We should probably make this clear in the documentation. It imports dynamically, so Webpack sees that as \"import everything that could possibly go here\", which is all the languages.\nI don't know as we have a good \"story\" for bundlers, tbh. Maybe a babel plugin?. Just to be clear, to anyone who wants to pick this up, the \"good first issue\" here is to add documentation.. The babel plugin is ready here: https://www.npmjs.com/package/babel-plugin-prismjs. Open PR for Solidity is here: #1406 \u2013 it currently requires changes if you want to pick it up.. @glachaud We've love to get this landed. Would you be able to make the changes suggested by @Golmote? Otherwise, I'd be happy to pick this up and shepherd this in if you're busy.. @jonnyhsy If you're interested, you could use this PR as a base for a new PR to add Solidity to Prism.. @omrllm There are a number of suggestions from @Golmote above that need to be added. There are also merge conflicts to resolve. If you're interested in picking up this issue, feel free to use this PR as a base. Let us know if you have any questions!. Going to close, as we haven't heard from the original developer in a while. Happy to accept a PR for Solidity, and this PR can be used as base, if anyone wants to pick this up.. This has been created and published here: https://www.npmjs.com/package/babel-plugin-prismjs\nLeaving this issue open to remind me to add docs to prismjs. If the babel plugin works, we'll migrate it over to the PrismJS organization.. This shouldn't go there. Right under it, you can see a conditional that checks a number of other things before it falls back to env.language. The check should go before that conditional.. We actually do commit the generated files though.. That said, it does look like your fork is mess up. Maybe a botched rebase?. First, don't modify the the prism.js file. That's the one served on the website and is generated by the gulp file. You'd want to modify components/prism-core.js.\nWe're going to have to dig into this and make sure it doesn't conflict w/ other plugins & usages before we decide is this works or not though.. I'll probably be able to review this PR this weekend, just FYI.. > But I removed it from the export so it's not exposed anymore.\nThis may be fine; the idea is essentially to keep track of what languages we're in the process of loading and avoid reloading them if we hit them again via circular references. Doing it that way would ensure we recurse down all the way down instead of (what looks like?) one level down.\nBut maybe that's not actually an issue? This is certainly a simpler implementation.. Also, I think this PR may be needed by the babel plugin to ensure we load everything in the correct order.. Yeah, this is good. Just need to fix the conflict in components.js.. Duplicate of #1403. Will be solved by #1409.. The babel plugin is ready here: https://www.npmjs.com/package/babel-plugin-prismjs. We're open to PRs, if you want to attempt it, but I suspect writing a \"pretty-printer\" that works for all the languages we have is going to be impossible.. I have no idea, I didn't write it, sorry. That said, it's Hacktoberfest, so I'd encourage you to take a stab at it!. @Golmote You've added ObjectPascal as an alias for Pascal. Is there any other action item here?. @Golmote Can we close this one in favor of #1427?. We could limit the complexity a bit if we broke this into two steps:\n\nGenerate a list of languages to load based on a provided list of languages and reorder them to ensure peer dependencies are loaded first.\nLoad the languages.\n\nI suggest this because I built something like step 1 into the babel plugin but it doesn't currently handle peerDependencies or aliases. Step 2 in the babel plugin injects the dependencies into the AST.  If we extracted that out to a common function, I could offload that logic to prism itself and share it between loadLanguages and the babel plgin.. Also, I think implementing that logic would be easier if the aliases were keyed in components.js, so we would add \"js\": { \"alias\": \"javascript\" } and then we know to go look at \"javascript\": { ... } for details.. This isn't a highlighting but, but a code bug. This:\n['${file.meta.video_codec}','!=', ']\nThe last element in the array is missing a closing quote. So the highlighter is treating '],[' as a string. If you run this, it would error.. @Golmote I made the one change you suggested here; if you think we should re-include manual requiring for node, let me know and I'll fix, but I'm going to merge for now.. @Golmote Not great at regex, so I'm struggling with getting yamlish working. Got an idea?. @Golmote I think we're looking good here. Let me know if you have suggestions.. @Golmote Updated.. I missed that comment the first time around. Made the changes suggested; tests still pass. Also added the minified file.. The PHP language has a dependency on markup-templating, which you'd previously have to import manually. However, I recently put together a babel plugin to manage these internal dependencies for you. If you're using create-react-app, you should be able to use it pretty easily. Check out the documentation and open up any issues you find on that repo.. The prism.js file you downloaded should have a link to the download page with the options you selected preconfigured. The link is in a comment at the top of the file.\nPlugins can be found in this repository. You can download them and include them as separate files if you choose; they will work fine that way.\nAll the plugins are in this repository, so there isn't another repository to link to. We try to make the download page the easiest way to get Prism, which includes bundling it into a single JS file. The download link the file you downloaded makes it easy to add additional plugins to your bundle, so there's not really a need to link to the plugins separately.\nGoing to close, as there isn't an issue to address here, but feel free to ask additional questions if you need.. So this introduces a bug in the Coy theme unless the CSS is loaded in reverse, because Coy moves the padding to the code element.. @LeaVerou The CSS added in this PR: https://github.com/PrismJS/prism/pull/1434. @Golmote @LeaVerou This looks good to me, and we have no other open PRs for Kotlin, so I think this is good to merge into master w/o conflicts. Agree?\n@ilaborie Thank you for the PR! We're in the process of switching to master and closing out old PRs pointing to gh-pages, so I'm trying to be cautious. We appreciate your patience :).. The parsed HTML looks basically correct. Do you have a reproducible test case we can look at?. Based on the repo test case, it appears docsify is bundling an older version of Prism vs the one you're loading via CDN. It doesn't include the {before/after}-tokenize hooks required to make the markup-templating work. You'll want to ask them to update to the latest version.\nAlso, if you're using Prism with a bundler, you want want to look at the new babel plugin for handling language dependencies.. @Golmote Fixed. Going to merge once tests pass. Also updated master.. Definitely related to innerHTML, based on your charts, but if you get it @ 500ms consistently normally, but 10s when used w/ React / Webpack, that would suggest it's something about the interaction between those two that's causing the issue. I'll leave this open for other to weigh in, but I'm not sure we can do anything on our end.. Performance profiling itself can cause slowness, as it has to instrument the code in a way that can impact how fast it runs, but that's the first time I've seen the impact be that large. Admittedly, I'm not entirely surprised IE11's devtools aren't great.. Alright, I think we're ok to close this then, but if you find an issue here we should look it, please reopen. Thanks!. This would make an interesting plugin.. There is a link to a small blog post in that issue, but the developer closed the PR. You can pick up where they left off if you'd like.. @RunDevelopment Would you mind taking a pass through this PR and providing a final sign off & merge if everything looks good? These look like good improvements, so might be nice to get them landed.. @RunDevelopment No worries! Just wanted to get your attention.\n@alice-mm This just fell through the cracks. I know Golmote's been busy as well so he probably just didn't have a chance to get back to it. I unfortunately have little / no regex skills, so I usually defer to my co-maintainers to review that stuff.. Minor note: you'll need to commit the minified file for C#. Otherwise, I'll defer to my co-maintainers to review the Regex here.. @RunDevelopment Besides the conflict, is this PR ready to go?. @RunDevelopment I'm OK with this PR in the main JS language; maybe that PR is extensive enough to break it out into a separate language?. Can you provide an online reproducible test case? I've seen this type of thing before, and it's been another css file applying padding to the code element.. How are you bundling prism?. Based on the linked ticket, this appears to be build-related. Ideally, you should be using babel-plugin-prism to bundle prism, but without more information, I don't think this is a bug on our end.. @jaune162 We would need the above question answered or a reproducible test case to look at before we can help you.. Thanks!. Now that I'm looking closely, it turns out the class wasn't needed because of the way the examples page works. It injects your HTML page in a section tag with the correct class, and Prism inherits from that. I removed it on master for consistency.. Yup, only the size. Otherwise, same code. Use .min.js when you care about performance; .js when you're trying to debug.. I'm not seeing that behavior at the page (https://reactjs.org/docs/add-react-to-a-website.html) in the linked issue. Regardless, I don't think this is something we would change by default since it would be breaking for current users and can be adjusted with some custom CSS if you need.. The theme is determined by the CSS file. You'll need to add / update that to change themes.. You'll need to write some custom CSS for that, as I don't think our built-in themes set a max-width on them.. I think for this one, just adding async as a keyword in F# should suffice. I don't think I would highlight the {} the way VSCode does.. What other keywords can go there? I'm not entirely sure we can handle this in a generic way with regexes.\nTo put it more generically, what's the grammar for computation expressions?. @Golmote Basically; I use Vue so I think it's a nice-to-have. We could also one-liner the assignments here which might cut some bytes from the filesize.. I had previously labeled this needs changes, but it appears those changes were actually integrated.\n@Golmote Are you still interested in looking into that \"greedy\" fix or are we good to merge this as-is?. This seems fine; there is a bit of duplication in the calls into the hooks in that area of the code now though. Is that something we should address?. Maybe this should be combined w/ #1714 and put into a js-extras language?. I could see this being provided as an additional language; maybe a \"language\" that enhances existing languages?. Yeah, my thought is we could have a single docblock language (or whathaveyou) that modifies all of the languages that can use JavaDoc-style documentation.. The loadLanguages function exported by components/index.js is intended for node use, not webpack. See the documentation for usage with webpack: https://prismjs.com/#basic-usage. @ybiquitous If you resolve this conflict, I'm good to merge this.. @RunDevelopment I'm into it. We use that combo @ work without issues. We had also talked about introducing ESLint (#1483); might be worth bundling that together.. @LeaVerou @Golmote These regexes look like simplifications to me, and tests all pass, so I'm going to merge this. If you think there are things to change, would love to get your feedback, as I'm not great at regex.. Opened an issue to track (#1494).. F# allows apostrophes in the variable name?! Weird.... Test failures :(. @LeaVerou @Golmote Would an ESLint config be worth introducing?. If eslint itself is compatible with Node 4, we could just put it in pkg#scriptsand have travis run that, and even put the gulp test command there. Otherwise, I don't personally have a problem with dropping Node 4 from our test matrix, considering its EOL already.. Marked as \"need consensus.\" Definitely need @LeaVerou & @Golmote to weigh in on this ruleset.. Thanks!. Could you provide a reproducible test case?. I can. You're going to have to be patient, as I do this in my free time and haven't had a chance to dive into this yet.. Oh, loadLanguages is intended for use in node. For using with webpack, we recommend the babel plugin (More details here). If you have issues with it, please open an issue in that repo.. If you're using webpack, we recommend configuring with the babel plugin: https://github.com/mAAdhaTTah/babel-plugin-prismjs. Yeah, switched to needs review.. If we get the conflicts resolved, we can merge this.. @RunDevelopment I'm sorry, that's the opposite of what I intended. I think I confused you because I commented on a line that was correct, not one to fix. My apologies for that.\nTo be clear, I like assign the variable as well as to Prism.languages.language all on one line, the way you had it. When I saw it, I commented, intending to say \"let's do it this way\", fixing the ones that were on two (specifically asciidoc, and if there were others that I hadn't gotten to yet).\nSorry about that!. > Unrelated: Maybe we should expand the tests for django. I just made a mistake messing up the language definition a little. It wasn't detected by the tests...\nThis would be great. You should be able to add additional tests in a separate PR without conflicting with this one.. This looks good to me. A little concerned about introducing a lot of conflicts merging this. There's a PR for plsql I think that will be rough to land after this.. @RunDevelopment If we resolve these conflicts, I'll give this a final review and get this in.. peerDependencies were added here: https://github.com/PrismJS/prism/pull/1417 \u2013 They're components that are modified by the component when it's added. e.g. if markup is present when css gets added, markup is modified by css to highlight <style> tag contents.\nThere is no doc for components.json at this time.. They're currently used by loadComponents in Node to ensure the require.cache is cleared as expected. That's a good idea, use peerDeps for download page as well as the babel plugin.. > Babel is still an open issue but I don't have any experience working with it.\nYou might be able to tackle it if you'd like. I opened an issue here: https://github.com/mAAdhaTTah/babel-plugin-prismjs/issues/3\nThe logic is all really here: https://github.com/mAAdhaTTah/babel-plugin-prismjs/blob/master/src/getComponents.js and none of it is babel-specific. It just products an array of component paths, which is used by the babel-specific logic to update the file.. If you mean in the babel plugin, you can change that if you'd like. You can post your questions in that issue if you need help.. This seems fine, and less code.. > 'number': Prism.NUMBER\nI think places like these is the intention. If the same pattern isn't used in multiple places, then we don't get much and isn't worth it.. Just to confirm, &.class-name would no longer select the & symbol as part of it?. @verfriemelt-dot-org This something you're still interested in pursuing?. So is this still a valid issue or no?. Updated title to match. Thanks for the suggestion!. @LeaVerou @Golmote I marked this one as \"needs consensus\" as we're going to have to discuss whether and how to leverage this.. My overall issue w/ the pattern builder / generator stuff you've proposed so far is that is isn't clear to me that the introduction of those constructs results in an overall reduction of code, as the code to support the features is pretty lengthy.. Got conflicts here, probs a result of the other SQL PR I just merged.. Are there styles for quoted-variable? I don't think that's a currently-existing token.... Give that a shot if you think it's feasible. I'd definitely like to avoid introducing new tokens used in a single language, if possible.. I suspect this one is going to be tough to get right with a regex.. Ok cool, would you be able to open a PR with that change + tests? Thanks!. I think the simplest implementation is just another alias for the current lisp language.\nOtherwise, simpler is generally going to better if it's \"good enough\". We're not a parser, so perfection isn't the goal. Would def be interested in a PR if you want to give it a shot.. @durka Can you double check if this issue is still valid?. loadLanguages is intended for node usage. We recommend the babel plugin for usage with webpack and other bundlers. Please see the documentation for more details: https://prismjs.com/#basic-usage\nWe've gotten this issue a lot; where did you see the suggestion to use loadLanguages? I'd like to adjust that source so we can help avoid this confusion in the future.. By \"node\", do you mean \"I'm running a node server and need to highlight on the server\" or \"I'm using node to run my build tools\"?. Yeah, then you need to follow the webpack instructions in the documentation. Let me know if there's anything in there that's unclear.. This is probably a result of how your webpack is configured. If the css loaders only include css files within the project (e.g. Ignoring node_modules), it'll ignore css dependencies and throw this error. . Hey @RunDevelopment \u2013 Just wanted to say I appreciate the reviews & PRs you've made to Prism. I haven't had a lot of time to dig into all of them, and a lot of the regex changes I'm unfortunately not really qualified to review, but I just wanted to let you know we see the work you've done and thank you for it.. Can we get tests for this?. But you could confirm that <Button /> styles Button as a class-name?. I dig this, much closer to what I was thinking.. Thanks for this. One quick note: let's leave the package-lock.json out of this PR for now, since we don't have one currently. If we're going to add it, we should do that separately.. Tests all look pretty good here, but I'll need @Golmote or @LeaVerou to review the Regex here. Also got a conflict that will need to be resolved.. If we resolve these conflicts, we can merge this PR.. If we're going to add scss, we should take advantage of what scss provides us. As @RunDevelopment mentioned, if we're just adding a bunch of new files that don't do anything, there's not a lot of value to adding them and it's an extra maintenance burden to keep them in sync.\nI'm definitely interested in bringing sass in as tool, but I wouldn't do it piecemeal like this. We haven't settled on how we'd organize a project, but code talks; if you have an idea, we'd be interested in seeing it!\nI'm going to close this PR, but feel free to open a new one if you have more fleshed out ideas!. Can we get tests for the new keywords?. Captured in #1533. You should be able to check out the other .feature files and see how the top part (where the code goes) translate to the bottom part (the list of tokens). Keywords should be fairly straightforward, but let me know if you have issues.. Thank you for the contribution!. @RunDevelopment How is this PR looking?. This might be more interesting / useful if you demonstrate where this could be used. Can you update the code this would simplify?. Do we still need this? If there's no current code that needs it, I'd prefer not to land it until it has a use-case.. I think if we highlight catch as a keyword only if it's not preceded by a dot, that would work?. This seems good, thank you for you contributions!. If Edge has problems w/ local/session storage, do we need try / catch's for it?. I don't suppose we can capture this in a test somehow? Does this have a real-world impact on any of the language definitions?. > I believe, there are also other languages using this workaround.\nIf there are, can we remove those workarounds? That would also help to ensure the fix produces the result we expect.. This looks good to me!. I see the improvement, but I'm not really sure we need something more complex than what we have, as we're not doing a lot of generation. We can leave this open as a \"maybe later\" but this seems unnecessary at this time.. Can you provide more details? Code snippets, source code, etc?. You have an old version of Prism; the latest version includes shell as an alias for bash.. This may be an issue with Gitbook itself, if the version of Prism is bundled with that library.. Travis does weird stuff sometimes. I wouldn't worry too much about it.. Overall, this looks good. Obvs there's some conflicts, but I think they're just files to regen. Regex's seem fine, but I'm not really qualified to review them. That said, I think we're comfortable merging now even if I can't and making changes later if we have improvements.. I'm trying! \ud83d\ude03 . This looks good to me. If you resolve the conflicts, I'll merge.. Thank you for the contribution! We keep custom themes in prism-themes. Would you mind opening this PR in that repository?. @Eugleo @RunDevelopment Is there still work to be done on this PR?. @Eugleo No worries! Just wanted to make sure we didn't leave you hanging.. I suspect this is going to be one of those sticky issues around JSX. Prism is regex-based, which is famously bad for parsing HTML, so we may not be able to solve this.. LGTM!. Oops, I wrote this comment but never posted it:\nOne suuuuuuuuuuuuuuuuuuuper minor adjustment, and you need to run gulp and commit the minified version of gml.. Still need to commit the minified file, then we're all set!. Thanks for the contribution!. I suppose this is a nit, but wouldn't my-function() also get caught by this?. I like the concept, but it looks like you inlined the CSS / JS from the plugin. Can we reuse the code we have so we don't have it duplicated in both places?. Sorry for the delay. On board with the suggestion, but needs some minor tweaks to get merged.. Sure, why not? :D. Looks like there are some conflicts here to resolve.. Thought for the future: can we integrate w/ the autoloader so you can write Markdown & it'll autoload the languages you need?. What does this solve?. This looks good. Just some conflicts to resolve.. Looks like you need to update / fix the function_feature test. @ahotzler I'll give it another review when I get some time.. @ahotzler Sorry for the delay, thank you for the contribution!. I'm personally OK w/ dropping IE11 support, but I know projects I work on generally still support it as MSFT is still supporting that browser. Additionally, IE11 still works w/ Windows 10, so MSFT may continue to support it for a while.\nThis is also definitely a breaking change, so we should release as a 2.0. If we drop IE11 support, we could probably go all-in on ES6 as well, if that helps the code at all.\nJust some thoughts. Not really sure where I stand, tbh.. In the docs, under \"Basic Usage\" see \"Usage with Webpack, Browserify, & Other Bundlers\". Let me know if any of that is unclear so we can improve the documentation.\nClosing, but feel free to ask follow-up questions.. \"Second statement\" in the above example is the echo PHP_EOL; line?. @wibimaster Thanks for the contribution!\n@RunDevelopment Thanks for your help!. Intuitively, this feels \"right\", in that highlighting isn't \"done\" until after everything has run. I guess I'm a little concerned this could be a breaking change for anyone relying on callback to be run before those hooks.. Merged as a bugfix.. I'm not sure, tbh. Admittedly, we tend to release infrequently because you can always download the latest from the website.. I don't know as we need to modify JSON; if you want comments, couldn't you use the JS language instead? I also find most of the editors I use don't highlight comments in JSON files correctly.\nThat said, I'm open to being convinced otherwise.. I will merge this fix, but should we file this as a bug for the JS language?. Fair enough. This also seems like something that won't come up a lot in practice. Thanks for explaining! . Couple of quick notes:\n\nFilename should be prism-cil.js, to match the rest of the languages.\nRun gulp to generate the minfied version.\nUpdate the components.js file with the language information.. Thanks for the contribution. One minor comment, but I'll need someone with stronger regex skills to give this a full review. Also, if this is a .NET extension, should this extend from the csharp language?. @RunDevelopment @sbrl I haven't forgotten! Holidays are busy :). I want to take a pass through Prism's PRs sometime this week(end) so I'll be taking a closer look at this soon.. @sbrl If you can resolve the conflict (just merge up from master & rerun gulp), I can merge this.. @sbrl Thank you for the contribution!. We're on board with this change.. Based on the tests, I like this change. I'll have to dig through the regexes to give this a full review.. Thank you for the contribution!. Love this. I always thought the dark theme dots were too bright.. Bah, conflicts here too. Tough merging so many PRs at once :/. If you're just trying to add more languages, you can import / require them manually, e.g. require('prismjs/components/prism-java');. You'll also want to import prism-core from the components folder first. If it helps, the fixtures in the babel plugin may be insightful here.\n\nI'm going to close, as this isn't an issue, but feel free to follow-up if you have additional questions.. If you need to load languages at runtime, we have an autoloader plugin that may be of interest.. Thanks for raising the issue. If you've got a fix, would you be willing to open a PR with it? You can confirm if it introduces other issues with the test suite.. If we wanted to go all-out, something w/ JSDOM + snapshot tests could work. We have a (admittedly complex) mocha/chai setup for the current tests. Might be nice to get some tests going for the plugins.. @Mogztter I really appreciate the enthusiasm and the contribution. I think if we're going to do this (introduce testing for plugins), we should break up this PR into one that introduces the framework and maybe some basic, passing tests, then a separate PR that adds tests for & fixes this bug. That'll allow us to evaluate each of those things separately.. @Mogztter I'd prefer to evaluate the bugfix in a separate PR. It's not clear to me this comment isn't a result of introducing that change. What I'd suggest is ending up with 2 PRs:\n\nIntroduce the testing infrastructure, including some basic tests for this plugin that pass, without changing any plugins. We can then start adding tests for the plugins as we go.\nA PR that fixes this bug and introduces tests to cover the bugfix.\n\nHow you want to break that up (modifying this PR to be just tests, or closing and creating them separately) is up to you, but that's the place I'd like to end up if we want to add tests at this time.\nThe smaller the PR, the easier it will be to get each of them in, and I'd like to evaluate & think through the testing infrastructure as well as whatever tests you're introducing without also needing to evaluate the change(s) you're making to the plugin.\nDoes that make sense? My apologies for making this complex; I threw out the suggesting not expecting you to run with it so fast. And I appreciate it, but it does ramp up the overall complexity of what you're doing, and I just want to simplify it as much as possible.. Let's get the tests in first, then we'll get this fix.. Looks good; needs conflicts resolved :/. ugh more conflicts. Couple options:\n\nAdd data-manual to the script tag.\nManually remove the highlighting with document.removeEventListener('DOMContentLoaded', Prism.highlightAll);.\n\nWe need to document this still (#1402). That issues includes a link to the original PR where we discussed this.. I'm going to close as not an issue, but feel free to ask follow-up questions if you still need help.. Can we include the \"known failure\" in our list of list of known failures for Python?. Does that mean #1464 is no longer necessary?. I need to think about this a bit. I'm not in love with mocking createRange, but if JSDOM doesn't have it yet, then maybe that's fine? Also, the test setup is in the keepmarkup test file rather than being something reusable between tests. Lastly, there's the question of whether / how we can bootstrap Prism in an isolated way between test suites.. I'm on board with this, and we can massage it into place as we add additional tests. I would however prefer to keep all tests in the root tests directory, which may require some adjustments. We also have removed node 4 since this PR was first opened, so we have some conflicts that need to be resolved.. Last nit: please remove the package-lock.json, as we don't have one of those at this time.. Thank you for the contribution! If you fixup #1622, we can get that in now too.. We're always open to pull requests if you're interested. Happy to answer any questions if you need help.. Make sure you have the latest version. This may have fixed the issue.. @eakarpov The issue is the indentation. You would need to write it as such:\nhtml\n <pre class=\"command-line line-numbers\" ref=\"pre\"><code class=\"language-cpp\" ref=\"code\">{{code}}</code></pre>. @RunDevelopment That's what normalize whitespace does.\n@eakarpov Sounds like your issue is resolved, so I'm going to close this, but feel free to ask any follow up questions if you need help.. I can't say I'm in love with this, tbh. While I get that this is a problem that comes up not-infrequently, I feel like the solution is in formatting the HTML properly, not magically transforming the HTML for them. I'd be concerned about unindented side effects as well as feeling this isn't Prism's responsibility, so we're adding extra code to fix something that should be resolved elsewhere.. LGTM!. My initial inclination is this this adds more code than it eliminates. Is this really a benefit here?. The open question in #1070 is just what to do with the open PRs, so this doesn't resolve it but definitely fixes a lingering issue caused by it.. We have #1578 to track when we can drop IE11 support. We can't use new RegEx features until we've decided that we're going to abandon IE11.. Yeah, we should do this soon. I've been meaning to take a pass over @RunDevelopment's PRs as well\u2013definitely some good things in there. I'll see about doing that and cutting a release soon.\nIn the meantime, you can always download the latest version of Prism from the download page: https://prismjs.com/download. Sorry for the dlay.\nBesides the conflicts we now have, this feels like it might be better as a js-extras language, rather than part of JS code, since most users won't need this functionality.\nThoughts?. @mxstbr jsx-extras? Since this is targeted at a subset of people who use JS(X), I'd prefer people to opt into it.. Summary:\nThe issue I had is shipping code to users that will never execute if the languages are coded up correctly.\nPotential suggestions:\n\nESLint plugin to make sure those values are valid.\nExternal test to validate param exists.. It won't help because that dynamic call will cause Webpack to bundle every language definition and every plugin, which is not what you want. We recommend using babel-plugin-prismjs with Webpack.. The components.js also maniulates the cache and some other things that are node-specific, and I think would add all the plugins as well. Additionally, we already have issues with people using the components.js with webpack and ending up with a lot more things bundled than they expect. Saying \"you should use components.js w/ node + the babel plugin with webpack\" is a lot easier than saying \"you can use components.js with webpack and node, but only if you want everything, otherwise, use the babel plugin.\"\n\nWe could add an option to the babel plugin to add everything, like \"languages\": \"all\" or something of that nature, which could solve the problem. If that interests you, please open an issue over there so we can triage (I haven't worked on that plugin in a bit, but shouldn't be hard to add).. It seems curious that JSON is the only language that has .token.null for null. I think we highlight it as a keyword in other languages. Might make more sense to change how we highlight in JSON.\n@RunDevelopment Thoughts?. Agreed. I'd prefer to use a token we reuse across a lot of languages than handling a token used once or twice in a theme. I find it a little curious some of them are using boolean for null; keyword seems to make the most sense, so maybe we just decide now to consistently use keyword for it?\nAppreciate you raising this to our attention!. Fair enough; choosing something that makes sense for each language is fine. I'm admittedly less familiar with those languages, but I think a null token for JSON & SCSSS only doesn't really make sense. So we should update the JSON + SCSS languages to give null different tokens. Agree?. I'm on board with that.. I'm personally opposed to changing the theme here, as I think handling a token in all the themes that only appears in two languages is unnecessary and the correct fix is the keyword change, as suggested.. Bah, I've been saying I was going to take care of that for weeks. Sorry for the delay. In the meantime, you can download the latest version from the website, but yeah, I need to publish the latest.\nDupe of #1713.. Didn't we upgrade to gulp 4 already?. Can we go straight to mocha@6?. If we're going to do this, we should add an issue template for it so we can ask for more info.. https://github.com/siddharthkp/bundlesize. @SetTrend Under Basic Usage see the section on Webpack.. Right now, the babel plugin doesn't have an \"all\" functionality. I filed https://github.com/mAAdhaTTah/babel-plugin-prismjs/issues/7 to track.. Can you provide an online reproducible example?. My only concern about this is it's a little weird to only allow ES6 in the tests but not in the core of the library. Maybe we can enforce this with ESLint?. I'm pretty sure we can enforce es5 env in the core / languages / plugins area and enable es6 env in the tests with ESLint.. It's weird mostly cuz, as a developer, I have to remember \"I'm in core, I can only use ES5\" to \"now I'm in tests, I can use ES6+\".. @LeaVerou Is that to suggest we can merge in PRs with warnings? We could switch warnings -> errors in CI if not, so they're just warnings during development.. Sounds good, so we should bump warnings -> errors in CI and downgrade style issues to warnings during development.. This might work. Another suggestion is to use a .js file for config and use env vars. There's a package called is-ci that could help here.. @RunDevelopment Yeah, that's what I was thinking. If you're just testing a single language, you wouldn't run the main command, you'd just run npm run test:languages with the appropriate flag. You wouldn't want to run all the other tests at the same time.. Is this an artifact of the gulp task?\n. The comment strings at the beginning and end. \n. Yeah, I was just wondering if the comment needed to be included in the final product. It's not a huge deal :).\n. I don't know how important it is, but I didn't want to change the this value of the passed in callback in case the developer is relying on it. \n. Should be, actually. I don't expect (or even want) other buttons to provide more complicated HTML content. \n. I guess it was more about not messing with developer expectations, but I think you're right. Will update. \n. Will do. I used the a b/c there would be fewer style overrides, as browsers tend to add a number of default styles to buttons, but it would be more semantically correct.\n. You probably don't need the .destroy() bit cuz new Clipboard will throw on its own, so if we new and it doesn't throw, we should be able to assume it's not the global version? Unless window.Clipboard becomes instantiable.\nAlthough we're kind of fighting against the future, trying to guess what the global Clipboard will be capable of.... We shouldn't need to restore here because require('clipboard') shouldn't change the global instance.. If this condition isn't met, we'd end up with languages_path as undefined. Should we have a fall back / default for languages_path?. We do this a couple times; we could definitely do this once and remove meta and reuse that array. If we're mostly going to be doing iteration, we could just map over the keys and turn them into values, so end up w/ an array of languages. If we want to go a step further, we could tag the objects w/ a loading property and remove the withoutDependencies information and just recurse until you hit a component that's already being loaded.\nThis would be a bit more stateful but shouldn't be hard to implement and would allow us to hide the implementation details from consumers. I don't really love exposing withoutDependencies, if if it's not technically public API, and that would do away with it nicely.. If we change this to:\njs\nif (!components.languages[language]) {\n  console.warn('Language does not exist ' + language);\n  return;\n}\n...then we can save an indentation. I like early returns :). peerDependencies maybe?. One-liner these two?. Is the purpose of withoutDependents to avoid an infinite loop? Are we sure it recurses through everything? If it is, maybe we don't need it (see above).. Can we remove the localStorage related stuff and split that into a separate PR?. We should resolve the Promise here and return Promise.all([...]) within the then handler. It'll be a little cleaner.. Not all plugins have associated CSS, so we should check if it does first.. \ud83d\udc4d will fix.. My approach was to, for both bundlers & Node, give them One True Way\u2122 to load Prism, to reduce confusion about how they should go about it. My assumption / expectation was manual requiring is what people are going to try before reading the documentation and I don't want to encourage manual requiring of language definitions so we don't repeat what happened in 1.14.0 with the markup-templating change. Now that we've got solutions for handling internal language dependencies, we should be pushing people to use them.. Minor, but do we need to indent case under switch?. @Golmote @LeaVerou Removing this script tag doesn't undo what the script has done. I think we'd need to implement #1381 before we can do this. Any other ideas?. Yeah, that's the idea.. It's unrelated to the main feature (testing plugins on the test page).. It would be an unnecessary HTTP request we can avoid based on the information we have available.. The pre needs the language-python class.. The comma at the end of this line is invalid JSON. That's why the build is failing. . Yeah, I caught that, see my comment below.. That's a git diff, saying those lines were added :D. I'd have to dig through the download page logic a bit, but should we be combining peerDeps + after in some way?. My initial thought was something more like:\n```js\nvar after = all[id].after;\nif (all[id].peerDependencies) {\n   after.push($u.type(all[id].peerDependencies) === 'string' ? [all[id].peerDependencies] : all[id].peerDependencies);\n}\n```\nwhich would be a little simpler but would need a couple extra type checks.\nThoughts?. Can we get a test for the apply / bind / call cases?. Tests for prototype / constructor?. The  CSS you added appears indented further than the code around it.. This selector is really brittle. Is there a better way of styling this?. I think we could update all of the initial assignments like this:\njs\nvar language = Prism.languages.language = { ... object ... };\nwhich would be a little nicer than having it on a separate line.. No, I just mean to suggest, when we want to also assign it to a separate variable, do it on one line, rather than two.. Ah ok, that works.. Update django as well?. Can we dedupe the hooks code here?. It's called requireName in getSortedComponents; might as well go with that.. Ok, so this is fine then.. What's the story with this line in this PR?. No, I think this is fine. Maybe a comment would be helpful?\nCould we also get a test for promise().catch().finally() to make sure they're caught as functions?. Wait, we have that already, my bad.. Nit:\n\n... and rebuild Prism by running gulp, .... Can we do this assignment on line 1?. Why were these removed?. Ah I see. enum appears twice on the list, so I didn't see it added.. displayTitle doesn't go here, you already have it in the components.json.. Can we add a test for the example in your PR comment?\n\n```\n\u00dcberschrift\n\n```\n. This should remain script: npm test. test is not a valid configuration for Travis.. Fair enough. Looks like we had a similar test already but no harm in another.. j/c but why defineProperty?. I remember we're doing this for minification reasons, but if we're only using it once, do we actually get those benefits here?. I think this actually would benefit from a var phpdoc = and reusing below?. Curious about these semicolons here. Are they syntactically correct for F#?. To rephrase, were the old code snippets wrong?. Worth adding a test that demonstrates this? Or do we have one for that?. I'm not sure what our style policy is on this, but I generally prefer {} around if blocks like this.. Yeah, looks like core uses {} with if blocks. Otherwise, code looks good. Love this improvement.. Do we want to highlight the whole line as a decorator or just the @ symbol? How do other highlighters do it?. {} around the if.. I think this should return Promise.resolve() to make the return value consistent?. You can just use ! here.. Do we want to cache objId(property) instead of just the objId function?. Gah, hit merge too quickly!. This destructuring is what's breaking the tests, as Node 4 didn't support this syntax. Maybe we don't need to test on Node 4?. I will say, conceptually, Prism is not a strict linter. My understanding is class true in PHP would be a syntax error, so I'd be more concerned here w/ reducing the amount of code we ship than getting the highlighting exactly right.. The way the code is set up, I'm not sure these aliases are correct; only t4-cs is an alias. The reason this might be an issue is at least the babel plugin is going to have to implement aliases, which is going to have to search the aliases and replace them with the source, so in this case, searching for t4-cs would load t4, which is not what is really wanted.\nGiven the relationship to the languages they're extending from, I'm not really sure what the best solution is here.. Why is util.encode used here?. I don't think we just want to run this through addLanguageTitle, as we do want to add the name even if the guessed title doesn't match the title.. Oh wait, this is the gulpfile, not show-language,. I don't think I'd include this check, tbh, since this is something that should be controlled / fixed at \"develop-time\", rather than runtime.. Why just comment this out?. Ah, and this was handled previous here:\njs\nenv.element.textContent = env.code;\nwhich uses textContent rather than innerHTML.. I haven't implemented the alias usage in the babel plugin, hence the linked issue, but given the meaning of \"alias\", I'm not sure it's fixable because the meaning \"alias\" in this case is a bit different from the others. We could hard-code an exception, but I'd rather not do that, tbh.\nIf there's no way to derive a single T4 language, I kinda think 3 separate T4 languages might be best? But I'm open to other solutions.\n@Golmote @LeaVerou Thoughts?. Sorry, what I meant was that we should be verifying as we develop that we're not including unnecessary calls to insertBefore. Otherwise, we're shopping extra bytes that don't actually do anything at runtime.. The basic problem is that we're adding code to throw in a case that, if we code up the languages right, will never happen in production, so we're shipping code to end users that only benefits developers.\nI understand the perspective of what's \"right\" for the function to do, but I think that only applies insofar as a function like this is primarily internal, rather than an API we are exposing to users.. That would be better. Or a custom ESLint plugin that checks this (it should be verifiable statically).. If you're planning on going the ESLint route, let's just merge this without the check and implement that separately.. Missing {}.. {}. And last one I think.. If we're ES6-ifying everything, we can make this a template string.. What's the backstory on valueOf here?. Nit: this should be on the same line as the closing }.. I think we don't want to remove the peerDependencies here.. These 2 aren't repeated. Why are they extracted here?. Should we test with {% %} as the delimiter? I thought this was only for filters.. Should we reject on error?. n-th is a class in our themes already?. I almost think snapshot tests would be better here than all these assertions. The other thing I've done is something like:\njs\nexpect(result.innerHtml).to.equal('<some>html</some>');\nIf we didn't want to add a new dep & auto-generate them.. We shouldn't need to check its existence, since it'll always be there.. Let's query for this above and reuse the result. Also, let's use this.checked to determine whether or not to add / remove the class rather than relying on toggle always matching the value.. Add {}.. Do we want to use pushState or replaceState here?. We probably shouldn't lint prism.js, as that's a generated file. That said we should probably not build if lint errors, right?. Great, no additional lib needed then. Alternatively: https://github.com/suchipi/chai-jest-snapshot. I might add a line here saying \"If you're using Prism with Node or Webpack, please see the usage section.\" Since that's an issue we get commonly, it's worth calling out more explicitly.. Maybe make it more generic like, \"Does Prism's documentation say anything about the issue?\" and just link to the website.. suggestion\nDoes Prism's [documentation](https://prismjs.com/) say anything about the issue?. We should split this into 3 commands, and have test run them, so if someone wants to test the languages, they could do npm run test:languages -- --language=css without issue. It also allows you to e.g. just test plugins without needing to run the other tests around it.. suggestion\n    \"test:runner\": \"mocha tests/testrunner-tests.js\",. ",
    "alexcarpenter": "example:\n\n\n$params = array(\n    'url'       => 'http://myothersite.com/some/page',\n    'entry_id'  => '340'\n);\n$custom_fields = array(\n    'screen_name'   => 'SuperDuperDev',\n    'page_load'     => '2013-08-13 04:23:44'\n);\n$url = $this->EE->link_vault_library->url($params, $custom_fields);\n\n\nand its spitting out \n=> as  =&gt ;\n. yeah PHP\n. ",
    "Garbee": "Doing a simple test in a codepen I am unable to replicate this issue. Can a working example of the issue be provided please?\n. I agree with HTML + PHP making PHP the primary language. That is source code and the source is PHP. Even if it is just echoing the date, that <?= date('c'); ?> within a lot of HTML, it is still going to be parsed by PHP. I'm not sure of any edge-case that would be otherwise except showing how to do example code of PHP in HTML. Basically an inception style thing with prism.\nHowever if this update requires <?/<?php to be used to achieve highlighting in PHP code, then it would be a no-go in my opinion (I can't seem to actually get it running locally to test the update.) In situations where you are doing large documentation efforts you will be showing just snippets of code a lot. There is no reason for <?/<?php to be added to every little example, it will just end up confusing people. \nUPDATE: After getting the new code running, there is either some issue with it or the way I am constructing the markup. This pen shows the issues. First, doing &lt;?php causes that to not display as <?php for some reason. Also doing &lt;/some_element> causes the </ to not display for some reason.\nOther than that, the output seems find to me and how it works. So I would personally give this merge an OK as long as it doesn't interfere with other plugins functions.\n. If I just go to the page in chrome it is showing me these errors without touching anything:\n\nI also forgot to update later on that when tested on regular Chrome and Firefox the page will load and operate regularly. It is only on ChromeOS where the page doesn't render. So, it appears there may be a bug in ChromeOS.\n. ",
    "andrewheekin": "getting this same error on the JS highligter. ",
    "robfletcher": "I found another way to achieve this: use a unique token rather than 'string' then manipulate the class names in the wrap callback. That way the Groovy language won't affect any others.\n. I tried that but found I was overriding all the things the Java definition specified so it seemed pointless.\n. Specifically Groovy has a couple of additional keywords to Java, many additional operators and some extra things you can do with numeric literals which are the 3 things prism-java contains over prism-clike. All the extra stuff I'm doing around regex literals & interpolated strings is not syntax that Java supports.\n. Cool, I'll rationalize the Groovy syntax then. That means I can use the\n'string' token & not invent a new one then change it back later!\nOn Thursday, May 9, 2013, Lea Verou wrote:\n\nHi Rob,\nI added the functionality to access the language from the wrap hook. :)\nCheers\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/LeaVerou/prism/pull/89#issuecomment-17692353\n.\n. Cool, I will do it tonight.\n\nThanks for the awesome framework!\nOn Saturday, May 18, 2013, Lea Verou wrote:\n\nHi Rob,\nI merged this, but it won't show up in the downloader until you add it to\nthe object at the top of the code.js file (it should be pretty simple).\nThanks for the contribution!\nCheers,\nLea\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/LeaVerou/prism/pull/89#issuecomment-18102954\n.\n. That makes things a little more logical in my grammar. I was having to use entities in some places and plain character in others which took me a while to figure out. Now it's consistent.\n. \n",
    "gr2m": "I know, now urls http://example.com get interpreted as comments, the //example.com part of it\nThat can be fixed by replacing [^:]? with (^|[^:]), so it matches when it's the start of the line, or if the preceding character is not a :.\nGood?\n. coming up. Shall we add some tests?\n. I've tested it, don't worry ;-)\n. ",
    "darkwing": "Confirmed as an issue with something else;  sorry!\n. You would Verou, you would.\nhttps://github.com/LeaVerou/prism/pull/213\n. ",
    "simov": "Uhm, not sure, I was closing a couple of my own issues hanging around for way too long. I don't think I'm using the autolinker in any of my projects relying on prism for syntax highlighting.\n. ",
    "katsgeorgeek": "You can close this issue.\n. So I can do it.\n. I don't know, but github not add new commit to current pull-request. \nNew pull-request there https://github.com/LeaVerou/prism/pull/122.\n.  @LeaVerou can you accept my pull-request? or you have better solution?\n. So I changed implementation to noJS and noCSS. Do you have any propositions?\n. yep.\n. Thanks :)\n. No, this is an old defect. But I forgot to open it.\nSure I can investigate issue tomorrow.\n. Many popular repositories provide list of contributors in Readme.md\n. Ok. I think you can close this PR.\n. You can close this issue.\n. https://github.com/katsgeorgeek/prism/blob/676651ec9175079b46b40ee83f4c5ecd5c45d94f/prism.js#L152\nHere prism.js executes at worker. And this part of code runs https://github.com/LeaVerou/prism/blob/gh-pages/prism.js#L513.\nOn download page you can see this error:\nUncaught ReferenceError: window is not defined prism.js:513\nB/c of this page is available for user after some time.\n. 1. Yes, download page.\n2. self.Prism will be work. But this part of code use document binding. https://github.com/LeaVerou/prism/blob/gh-pages/prism.js#L523\n3. I can move this functional to the separate file. Please name me the page, which needs it.\n. I'm not sure that this is the best solution. But I force updated my pull request.\n. It's not important for me.\n. Thank you!\n. Ok, I will remove this option.\n. I use hasCSS: true, b/c I don't want to complicate conditions of download components. Actualy I agree with you, more goodlooking using noCSS key.\n. ",
    "jdflorezPA": "It seems that is missing. When you pick 'File Highlight' from the plugins at http://prismjs.com/download.html, the last line of CSS says 'Undefined' instead of loading it.\n. ",
    "Mr0grog": "If we did that, more code would have to be duplicated and wrapped in if/else blocks (namely, where from and match are calculated on lines 226-227 of prism-core). I thought having two separate vars would be simpler and involve the least code change.\nI can do what you're suggesting if you'd prefer, though.\n. Also, is there a process by which the prism.js file in the repository root is supposed to be built? I didn't see anything obvious, so I just modified it by hand.\n. Done! You ought to be able to merge automatically now.\n. > In the future, keep in mind you don\u2019t need to modify prism.js, I can do it myself after pulling, it\u2019s done automatically.\nOh, thanks! I wasn't sure what the procedure for that was. Good to know for next time.\n. ",
    "darenju": "Any work on that? I understand these operators are already highlighted, but a drawback is for people who use fonts with ligatures.\nSince Prism renders those operators in two separate spans, the ligature can't be processed.. ",
    "danielgtaylor": "Lea,\nI've changed the code a bit:\n- prism.js is no longer modified to include the http language module.\n- I have kept the examples on the examples page. Once you figure out how to showcase different languages you should use these, and until then they will not show highlighted, but I'd rather have them in the repository than not. The idea of adding this feature without any examples makes me uncomfortable.\n- I've modified the code to take a mapping of Content-Type -> Prism.languages.foo that is now used to handle application/json, application/xml, text/xml, and text/html content types. The way that this is implemented incurs slightly more processing overhead than before, but new languages can be added very easily.\nLet me know if there's anything else I can do to get this merged.\n. Ping?\n. ",
    "philsturgeon": "python, php and bash have all been fine.\n. That'll be the problem then.  \n\nPhil Sturgeon\nOn Tuesday, June 4, 2013 at 5:14 PM, Lea Verou wrote:\n\nDoes this only happen with JSON?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/LeaVerou/prism/issues/114#issuecomment-18939724).\n. Let's just call this one a feature request. :fearful: \n. Ha! Nicely done @reinink.\n. \n",
    "AliMD": "Awesome, Thank you.\n. ",
    "kennethormandy": "@AliMD Just wondering, were able to get Prism highlighting Jade and Stylus?\n. ",
    "suprMax": "@AliMD @LeaVerou I'm lazy and I have no experience with making custom highlighting themes. Are you guys planning on releasing that? Would be totally sweet!\n. ",
    "byverdu": "Really thanks to you!!!\nOn 11/06/2013, at 20:00, Lea Verou notifications@github.com wrote:\n\nThanks!\n\u2014\nReply to this email directly or view it on GitHub.\n. Sure @mAAdhaTTah, I've already done it.... closing this one :) . \n",
    "tshedor": "Sure - here's the examples.html page.\nhttp://timshedor.com/prism/examples.html\n. So I updated the example to include the stripes and have a hack for the Embedded example (see last commit). Since the shadows are added as a psuedo, they're being not showing on overflow-y:hidden. \nFor the stipes, riffing off this and the Funky theme, I think it makes it a little busy. With and without screens attached below.\n\n\n. re: Overflow-y\nBecause of the lifted shadows at the bottom, overflow:auto hides them and I can't think of a better way around this. The last commit is better than the first, because I noticed pre had a max-height of 30em, so I gave code a max-height of 29em and floated all of them to inherit the height.\nre: stripes\nmore along what you were thinking? With background-attachment:fixed is pretty cool.\n\n. re: body body, html was a leftover from trying to fix overflow\nre: stripes - I'm sorry, but I just don't know what you're going for. They're super light now.\nre: overflow  - Tried it again, but nothing works. It's a psuedo element that's hanging around outside the container. Using float was the closest I got. Trust me, I'm a much bigger believer in inline-block or similar over float, but the overflow property hides it. I'm just getting rid of the lifted shadows and replacing with a box-shadow on the element directly.\n\n. Alright. I think this is the winner. \nI don't like the stripes, but then again, it's not my repo, it's not intrusive, and I started to become serious about front-end development and web design barely a year ago. So I'll defer to your judgement/advice over mine.\nIn case this is the last commit, thanks for the bomb script. Performance and extendibility is way ahead of everything else.\n. Hey @LeaVerou, just checking in to see if that last commit was satisfactory or if more touch-ups need to be made.\n. Sorry about that. I just added it in there in the last commit. The four radio buttons/circles go over the bottom of the hero; i can tweak that so they're smaller but stay within that container.\n. I hope that worked. \n. @LeaVerou I made the commit, but it's not populating here. Could you re-open this pull request, or should I create a new one?\n. @LeaVerou Opened new request #157 \n. It's pulling the changes made in this commit. The file still seems to match.\nGoing off the history, this is the latest commit. Are there other changes?\n. Wow, great catch. Sorry, I should've tested the theme with line numbers. I agree, new looks better, send in the PR. I think @LeaVerou has to approve the merge in the end, though I'd love to see the code just 'cause.\n. This looks good to me again. I think the shadows are kind of what gives this theme its legs, so +1 to leaving it in, and props for balancing the overflow/max-height issue. Gave me trouble in development, and some of that sloppiness was left over from early stages. Also, code by itself shouldn't have the shadows, only pre should, and this update maintains that rule.\n@LeaVerou I'm testing this out now and there's still vertical scrolling\n@apfelbox What was the reason for the padding changes? \n. ",
    "Karmac": "OK, it is already sent by @milesj at https://github.com/LeaVerou/prism/pull/130. Didn't notice.\n. @milesj may be interested in this too.\n. What about looking at it from a different point of view? Why don't make HTML the main language? The only thing you'd have to do is to look for <?php(.*?)> inside de document and parse it's contents. Everything in the document would be treated as HTML but the PHP parts (which must have a delimiter to work).\n. When writing a part of a PHP file the language would be PHP, as if we write a entire PHP file, and there wouldn't be delimiters needed. When mixing HTML and PHP the last one must use delimiters, and the language would be HTML. \nEvery syntax highlighter I've used makes it like this. You're right about the fact that the primary language is PHP, but who does care about those things in this cases? I think the main point is to get a good highlighting. If it can't be done in another way you must have to sacrifice PHP's importance facing HTML. That's my opinion.\nHope you don't have any problem understading my English. Thanks for your help.\n. Is there any problem on extracting <?php(.*?)> before <(.*?)>? That would maintain PHP as the main language and solve the problem.\n. I am talking about getting all parts of PHP, then every HTML tag, and leaving some reference in the place. Then, parsing them at the same time and replacing them with their reference so their in the same place.\n. Ouch, that was just the second part of my comment, didn't see yours haha\nIt's just an alternative to keep PHP being the main language, even though it's convoluted.\n. ",
    "javatlacati": "@Karmac Can u provide a fiddle to test further into my Fiddle?\n. @apfelbox code still made the highlighting process crash I'd like to close all bugs either old or new. Cheers\n. @aoighost  Wich gramamr you can help with? As far as I know x86 assembly is the most common. To make ithappen you could provide a list of reserved keywords, operators, and special values ( like strings or hexadecimal numbers ).\n. Did some pretty scientist said demo? \nProblem\nSolution\n. My bad, I was thinking it was a pre escaping html as html issue. Please continue on your philosophical discussion on the < entity\n. I was trying to create this one too, so please count me in.\nhttp://jsfiddle.net/javatlacati/nu4ywjd8/\n. My bad please reject it, I mixed branches accidentally.\n. It should be changed from:\npre.line-numbers::before, pre.line-numbers::after {\n    display: block !important;\n}\nto:\npre.line-numbers::before, pre.line-numbers::after {\n    display: inline !important;\n}\nTo avoid the line showing upper extar space.\nSince the inspector says that the css for that is inline, it should be generated from a js.\n. Well... concerning that please check that Fiddle.\nis there a function for highlight without replacing everything?\nAs you can see as you type DOM gets regenerated and cursor moves position.\n. Please keep us updated :D\n. Just not to favore one site, even if my favorite is plnkr.\nWell... I've checked some running examples and most of them fail because user's don't know how to integrate into code the functionality.\nFor example this, or this, or this one.\n. I know, but I didn't created the examples as you may nottice. If people are making mistakes is because of a lack of a template they can easily reach trough google search. JSFiddle and codepen excels in ease to find in google search because of their tag functionality meanwhile github doesn't.\nI know I don't have the best example ever made, if you can improve it we'll be pleased.\nI consider that the repo needs more than a template a running example that we can modify and get the output instantly without the need to download and configure it locally as you can achieve with those kind of sites.\nThose sites have also the advantage of being social aware, because they integrate social network & sharing functionalities, and many people use them as portfolio when getting some job, so.. they're serious and high audience with a huge community wiling to learn and share each one.\n. I'm sorry to telling you but... regex is not obvious to most IT people (at least 90% of the people I know for example). Even for me wasn't that clear.. because I wasn't used it in about 3 or 4 years and at college teached me to use it only 3 or 4 days.\n. when I open the page can't see the imports of the js, and css in the head O.o\nHipe this fiddle can help u: http://jsfiddle.net/javatlacati/d56xhoc4/3/\n. Sorry I've been busy... perhaps on the weekend :cat2: \n. Do you have any running code? i.e. jsfiddle, codepen, plnkr, etc\n. Nope, @suture your's is a retrograde one. Prism supports modern encoding so... that means if some system fails because forces ASCII mode it's not a Prism Issue per se, please report your ancient-encoding issue to https://github.com/Shopify.\n. You can fix this minor mistakes once integrated ( Actually is faster than place a comment about it )\n. ",
    "foo123": "Check prism-grammar external parsing add-on for Prism, which uses a grammar to highlight solving all these issues (and more)\n. Hi there, this is also mentioned in this issue:\nhttps://github.com/LeaVerou/prism/issues/196\nNice idea\n. Actually i am not sure myself :)\nThe idea is for a way the highlight work is not done twice (by Prism and the plugin).\nThe plugin works like this:\n- user defines a grammar in JSON\n- grammar is fed into the PrismGrammar.getMode method and a syntax-highlighter mode is returned\n- the returned mode has 2 methods hook and unhook\n- hook method hooks the mode into Prism for a specific laguage ( eg \"css\")\n- unhook unhooks the mode (if hooked) and the language is handled as default by Prism\nWas trying to look for a way, either to pass to prism the tokens or override the prism.tokenize method to avoid double work.\nit would be nice if the grammar can be already tokenized so the prism tokenizer wont tokenize it again, or\nsomehow if the tokenizer could be overriden selectively (although not the best solution)\nAny suggestions welcome\nPS: how about defining custom languages or language ids (for example hook for a \"custom\" language) ?\n. How about a 'get-tokens' hook which would return the tokens (so default tokenize shoudl not run), the rest workflow could be as is.\nOr what if env had a \"tokens\" property set?\nAlso it would be nice if prism would not check if language has a defined grammar (since tokens could be passed with no predefined grammar)\nif neither is set, then the raw code text can just be returned from main prism highlight method\n. Closing this issue as have posted a newer issue (https://github.com/PrismJS/prism/issues/817) which includes this scope\n. Hi take a look at this prism plugin:\nhttps://github.com/foo123/prism-grammar\nUser can define a JSON grammar (quite flexibly) to be used for prism for a specific language\nPS i am the author\n. Check prism-grammar external parsing add-on for Prism, which uses a grammar to highlight solving all these issues (and more)\n. Since i happen to get notified in this discussion, let me enter my 2 cents\nYes using placeholders partialy solves the problem, so in this sense it is a hack, a nice hack though.\nFor example multiply escaped strings, inside strings e.g \"a string with \\\\\\\\\\\\\"escaped string\\\\\\\\\\\\\\\\\\\\\" inside\" (used in javascript) will fail, and so on.. A major problem is escaping, which needs char-by-char parsing (at least in such cases) since regexps cannot count parentheses, escapes and so on..\nThen other combinations, e.g strings inside comments, or vice-versa, or comments inside regexps and so on.. Or tags inside CDATA and so on..\nSo this is not a good solution, only partial and even this in some cases.\ni still suggest using a special (delimited) tokenizer which handles only delimited tokens (e.g comments, strings, regexps, cdata and what not, which are all over the place). it is not difficult, it is not slower (in fact it will be faster) and is actually intuitive to define in a specification e.g\njavascript\n\"comment\" : [\"/*\",\"*/\"],\n\"string\": [\"'\",\"'\",\"\\\\\"],\n\"regexp\": [\"/\",\"/\",\"\\\\\"]\n// and so on..\nCheers\n. The fact remains that regexps cannot count (e.g number of parentheses, or number of escapes and so on..) So if they cannot count, all delimited tokens that can be escaped , meaning they can contain their own end-pattern if it is escaped in a perfectly valid way, cannot be parsed correctly with regexps. Maybe i phrased it better now.\n. Yes having the regexp take account of any preceding escapes does fix the thing, however i;m not sure what would happen with multiple escaped strings inside a single string, does it work the same? It should be tested. true not usual case, but lets do it for science :)\nBtw even ace editor (if i'm not mistaken) which github uses to highlight code has a hard time with these things even though it uses a state machine for parsing tokens (ace javascript mode)\n. there is an add-on with these capabilities (and more) prism-grammar\nFYI prism developers dont want to add parsing into prism (although they already have a limited parser, it is just a matter of terminology and degree)\n. One should use an editor (like codemirror or ace) for that functionality instead of a static syntax highlighter as prism (imo) But then again prism, could be extended to a full live editor\n. Check prism-grammar external parsing add-on for Prism, which uses a grammar to highlight solving all these issues (and more)\n. @Golmote  eventualy, if this is going to be solved adequately, sth like that add-on will have to be created; since simple regexes cannot account for that complexity of language. It needs a grammar (or sth equivalent to that, it doesnt have to be the prism-grammar add-on, see here as well for further options).\n. i did not suggest to add that to prism if you dont want to, i just suggested an add-on to prism, as so many other ad-ons, which indeed solves this optimaly. This is already there, no need to add anything new. i specificaly made this for my own needs, but anyone can use it and i suggest others use it. Thats all, relax\n. @Golmote \nAnd anyway to answer your original question and follow Lea's suggestions these tokens like comments, strings regexes i call block tokens or delimited tokens (and in a refinement, escaped-blocks). So you can just add these two types of special block tokens and solve almost all these issues  Block tokens have a start and end pattern, when start pattern is found it matches up to the end pattern, no matter what is within (including multiple lines). Escaped block tokens are like block tokens with the exception that their end-pattern can appear inside if it is escaped else the token closes.Just these additions should meet the requirements by Lea, some more code is ok, some more complexity is ok, solves almost all such issues. (ps it requires just a small state machine, instead of a more refined parser machine) Cheers!\nps2 @LeaVerou  and no, writing a parser is not extremely hard nor slow, except by bad coding\n. Check prism-grammar external parsing add-on for Prism, which uses a grammar to highlight solving all these issues (and more)\n. Check prism-grammar external parsing add-on for Prism, which uses a grammar to highlight solving all these issues (and more)\nYou can use the json grammar from here (just change the style model to use prism styling) that's all!\n. @zeitgeist87, the prism-grammar suggestion is just an add-on (which handles these cases among others) but for a solution to this issue with prism itself, i suggested delimited-block tokens (as in here https://github.com/PrismJS/prism/issues/412), which simply require a small state machine (since they have to keep state untill their pattern closes), instead of a parser machine (as in the add-on)\nand indeed the perfrormance is neglizible, or even faster, (if implemented correctly), since fewer regex matches need to be tested while inside a block (after all this is what a block means)\nIMO this issue should be fixed and fixed correctly else there is no reason using a highlighter which highlights wrongly / or only partially correct\n. @zeitgeist87 no problem\nAgree \"Prism aims to be a pure small and fast regex highlighter\", but disagree\n\"It does not have to be totally correct\". One is not asking to do context-sensitive parsing but this is about lexical analysis, highlight comments CDATA, strings, literal regexes correctly (which are all over the place). If this is not done it is not good (and of course Prism is not alone in that, and afaik many people are not happy with these highlighters not highlighting). \nHowever since these tokens are blocks (in the sense mentioned earlier) it needs a kind of state to be kept so \"parser\" knows it is inside a block and match accordingly.\nAnd it is not much additional code (for what i suggested dont know about other approach). One only has a generic block tokenizer and just passes to it the different start and end paterns (for the different block tokens represented in the language model), so it is just one additional function (and a small one that is, one that matches untill end pattern, no matter what else)\nFor example the problem of comments and strings is solved as such:\nThe comment block has /* and */ start-end patterns\nwhile a string block has \" and \" start-end patterns, so depending on what is encountered first the end pattern is fixed (for the start pattern encountered) and is not confused by strings inside comments (or vice-versa) Additionaly it should be faster because while inside the block nothing else is tested except the end pattern of that block (so a bunch of other regexes are not tested and this saves time, especialy if the block is a large one, say large comments or a large string or large CDATA block)\nA highlighter needs to highlight not parse in general, however if highlighting requires some parsing to be done correctly it should be done. Let me give a personal example, i was creating a template engine and wanted to avoid having a full parser for speed and size reasons, however i indeed implemented all the parser parts necessary for the engine to do what it was supposed to do (instead of working half the time, lets say) And it still does not have a full parser (for example function arguments are not tokenised separately but passed as one argument, but there is no problem there for what the engine is supposed to achieve, see what i mean).\n. @zeitgeist87 \nIf the devs here want me to do a PR for this i could try, else it is just a suggestion, among others. Cheers!\n. @LeaVerou if you are refering to my last comment/suggestion, yes it solves that problem exactly with what is described\n(if not ignore this comment)\n. @LeaVerou , ok i'm working on sth else right now but i will make a PR as soon as i can for the delimited tokens suggestion\nAbout the other things, every highlighter (including Prism) does some kind of parsing. For example using just regexes is parsing. The way invalid code is highlighted is an option (for example it can be bypassed, or highlighted as is). Personaly i would prefer the highlighter to highlight correct code and highlight invalid code in a different way (i think this is the raison d' etre of highlighting, highlight what is relevant to a given language semanticaly, but opinions can vary on this)\n. ",
    "clmsnskr": "According to that article, it indicates that you generally mirror the master branch to gh-pages.  By not having a master branch, I'm no longer able to use bower to install the package in my project space.\n. ",
    "mattprice": "You can use a hashtag format to specify a branch: bower install prism#gh-pages.\n. Try this:\njavascript\n'string' : /\"\"\"(.|\\r|\\n)+?\"\"\"|(\"|')(\\\\?.)*?\\1/g,\nI don't think you can use a wildcard inside square brackets; it acts like a literal period instead.\n. > Your solution doesn't work with single line strings (they would no longer work)\nOops, sorry! I didn't think to test those.\n. ",
    "philwareham": "Maybe this should be revisited as Bower is rapidly gaining popularity. i.e. separate the project's website code from the javascript code so that people can use it properly as a Bower component and with build scripts such as Grunt, not just by downloading direct from website.\n. Scratch that - the languages do show up in your example, but the behaviour seems to have changed to show just on hover which is not great implementation to be honest. I'll check latest CSS code against what I have in my setup.. ",
    "isGabe": "Yep, looks like it's been fixed. Thanks!\n. Now Codepen is being weird about displaying the escaped opening PHP tags inside the code block. \nBut what I wanted to demonstrate, and it still shows up, is that removing the ? in the PHP tag brings the line numbers back:\n\nNot sure if that helps or not...\nOdd that removing the ? also causes Codepen to show the tag.\n. @milesj @LeaVerou Any ideas on this one? I see you guys have a lot to work on here, and I wish I could contribute, but I'm afraid it's beyond my meager JS abilities.\n. ",
    "MisterPhilip": "Thanks for the feedback!\na) You're correct in that it is usually for those that are harder to copy. I've also found it extremely useful for the few times wanting to print code or if the highlighting gets too distracting (e.g. someone messed with a theme and I can't read keywords, comments, etc.)\nb) It would be but I was trying to be mindful of http requests / external files given that I was already loading a 3rd party\nc) A good point, perhaps an opt-out would be better suited to this for the times you don't want to use it.\n. Unfortunately I've lost the time to do this & some interest. If anybody wants to pick up where I left off, it'd probably be easier to start fresh than to continue to remove / refactor the code. \n. ",
    "chanjarster": "@LeaVerou there is another bug\nxml\n<eams.selenium.test.version>1.0.0</eams.selenium.test.version>\nprismjs doesn't give color to it\n. ",
    "hiulit": "Same here!\nWhen using WebPlatform Docs plugin you can no longer use language-css as @ifdattic stated. You have to use language-scss when targeting css code blocks.\nI had to tweak the plugin in a lame (and hardcoded) way to add support for scss code blocks, like so:\nif (env.language == 'css' || env.language == 'scss')\nBut this doesn't change the fact that there's something there throwing an error when using css code blocks.\nCheers.\n. Actually I don't. \nAll I did was download Prism and then start adding plugins to it until I found WebPlatform was the one.\nDo you want me to set up an example and share it with you?\n. I'll try make an example when I get home, right now I'm at work :P\nBut let me tell you that I used the compiled JS you get from http://prismjs.com/download.html (Development version, Languages: All, Pugins: Autolinker, WebPlatform and File highlighter)\n. Do you think you can fix it and submit a pull request @apfelbox ?\n. Hi there!\nI'm no JavaScript ninja but I did find a solution. I don't know if it's the best one, but it worked for me. \nSo here it is:\n``` javascript\n// File Highlight Plugin - start\nvar fileHighlight = (function fileHighlight(){  // Reference to fileHighlight function.\n                                                // This is a \"feature\" that doesn't\n                                                // come with the default plugin.\nif (!self.Prism || !self.document || !document.querySelector) {\n    return;\n}\n\nvar Extensions = {\n    'js': 'javascript',\n    'html': 'markup',\n    'svg': 'markup',\n    'xml': 'markup',\n    'py': 'python'\n};\n\nArray.prototype.slice.call(document.querySelectorAll('pre[data-src]')).forEach(function(pre) {\n    var src = pre.getAttribute('data-src');\n    var extension = (src.match(/\\.(\\w+)$/) || [,''])[1];\n    var language = Extensions[extension] || extension;\n\n    var code = document.createElement('code');\n    code.className = 'language-' + language;\n\n    pre.textContent = '';\n\n    code.textContent = 'Loading\u2026';\n\n    pre.appendChild(code);\n\n    var xhr = new XMLHttpRequest();\n\n    xhr.open('GET', src, true);\n\n    xhr.onreadystatechange = function() {\n        if (xhr.readyState == 4) {\n\n            if (xhr.status < 400 && xhr.responseText) {\n                code.textContent = xhr.responseText;\n\n                Prism.highlightElement(code);\n            }\n            else if (xhr.status >= 400) {\n                code.textContent = '\u2716 Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;\n            }\n            else {\n                code.textContent = '\u2716 Error: File does not exist or is empty';\n            }\n        }\n    };\n\n    xhr.send(null);\n});\n\nreturn fileHighlight;   // Reference to fileHighlight function.\n                        // This is a \"feature\" that doesn't\n                        // come with the default plugin.\n\n})();;\n```\nBasically what I did was turn the self-executing anonymous function into one that you can actually call, called fileHighlight(). Now you just have to call it whenever you need it :wink: \nI know it's bad to rewrite third-party code, but I don't know how to extend it properly.\n. Did it work for you as well? Happy to help! :)\n. Hey @morkro can you try it? It should be fixed now.\n. Yeah, that could be it @kuba-kubula now that you mention it.\nLet me test it and I'll get back to both of you @LeaVerou \n. Thanks!\n. I'll try and take a look at it, when I have the time.\n. I don't know if I feel capable to do the task... As I mentioned earlier, I'm no JavaScript ninja :P\nIf you think that would be useful, be my guest, or have someone else do it, for the sake of Prism! Hehe!\n. Have I done it right? It's works for me.\n. ",
    "josueochoa": "Same problem here, bump.\n. Found a solution, adding this fixed the problem:\nbody {\n    font: 100%/1.5 \"Helvetica Neue\", \"Helvetica\", Helvetica, Arial, sans-serif;\n    tab-size: 4;\n    hyphens: auto;\n}\n. ",
    "calvinjuarez": "Ditto\n. There's aria-hidden, which has this note/caveat:\n\nAuthors MAY, with caution, use aria-hidden to hide visibly rendered content from assistive technologies only if the act of hiding this content is intended to improve the experience for users of assistive technologies by removing redundant or extraneous content. Authors using aria-hidden to hide visible content from screen readers MUST ensure that identical or equivalent meaning and functionality is exposed to assistive technologies.\n. \n",
    "braders": "I am getting a similar problem. When I use PHP, the line numbers are ending at the point I have a closing PHP tag. e.g.:\n\nIf I remove the closing tag, or put a space between the  ? and the > it then works:\n\n. Just updated the JS/ CSS now, and it is unfortunately suffering the same problem. I have managed to get around the problem for now by using class=\"language-markup\", but of course this means that the PHP is not syntax highlighted.\n. ",
    "Chathula": "when i use php inside html attributes codes were braked! look at this\n\n. ",
    "eduardomart": "I just downloaded the master and used the generator from download.html and I can confirm that this issue is still present. The question mark in php code breaks the line-numbers.\n\nIf I add a space between the ? and > lines suddenly work:\n\n. Thank you so much for working on this, it has fixed the issue for me!\n\n. And strangely line-numbers load for language-php but not language-css or language-markup\n. Never mind, I realized I had an outdated version of Prism, I updated and everything works now.\n. ",
    "bartveneman": "Oh, this refs #148 \n. I'm ever so sorry, I hope these commits will do? Otherwise you might actually better change them yourselve.\n. @LeaVerou True, got me confused, as you've noticed. Should have watched more carefully, but a contributing guide would be very useful. :+1: \n. Why not just provide the core? I mean, Prism is about syntax highlighting, so why not let a CDN provide a build which does just that? Then you might point to that from within the Prism docs and add a note that devs will have to take care about themes and plugins themselves. Just a thought.\n. Also, I think this refs #158.\n. That. Is a very good point. I guess including them all is a bit overkill and renders the CDN pointless, doesn't it?\n. My timeline today was full of this one person sending this exact same issue to different repos. Must be some automated thing.\n. Tried this with MacOSX 10.9.2, Chrome 34.0.1847.116 but not able to reproduce.\n. I tried it with the sleep mode (3 times), but none of those caused the screen to shake or drop performance, for that matter.\n. ",
    "opatry": "Yes, I found that page, but, yes it seems a little messed up and it's not language representative code snippets that can illustrate a theme.\nSo, I'll certainly start something around that to validate my little theme (simple derivation of the default one to match flat UI colors).\n. Hmm, let's say you have several <pre data-src=\"\"></pre> on your page and none of the referenced file exists nor is reachable (the simplest way to reproduce is to use such use case with file:// URL instead of http:// to \"break\" the XHR behavior.\nFrom this HTML source:\nhtml\n<pre data-src=\"DOESNT_EXISTS_prism.js\"></pre>\n<pre data-src=\"DOESNT_EXISTS_style.css\"></pre>\nI get this HTML result:\nhtml\n<pre data-src=\"DOESNT_EXISTS_prism.js\" class=\" language-javascript\"><code class=\" language-javascript\">\u2716 Error<span class=\"token punctuation\">:</span> File does not exist or is empty</code></pre>\n<pre data-src=\"DOESNT_EXISTS_style.css\"></pre>\nThe second <pre> element doesn't contains the error message but is erroneous too.\nWhat I expect is to have the error message on each erroneous <pre data-src=\"\">.\nIs it clear?\n. I've downloaded prism.js and prism-file-highlight.js from the repository and it seems ok for me (replaced my *.markup files by *.xml version).\nBe aware that the minified file commited in repository seems out of date.\nWhen will it be available from prismjs.com website?\nIs there something like a changelog available when downloading to know the issues solved?\nThanks.\n. ",
    "Dither": "Sorry, seems I duplicated this issue in #155 but, really, this is not an \"edge case\".\n. ",
    "vkbansal": "@grayghostvisuals see #307 \n. @LeaVerou what @HarleyKwyn says is true. And its a huge public demand.\nI'll be happy to help in maintaining the semver for this repo\n. @geoffreymcgill Thanks for the link! I was working on something similar. \n@LeaVerou Will it make sense to have a plugin that depends on third party tools in the official repo?\n. @mAAdhaTTah can you tell what features are commonly required in a toolbar?\n. @santo007 nice!\n. and what about this PR? When will this be merged?\n. @Golmote PRs are also overloaded\n. @LeaVerou I'm sorry if I offended you. I did mean to make you feel bad. As for contributions, I know I've been not helping as much as @Golmoye has been because I'm occupied with my porting project. In that process I've found couple of issues and reported them.\nMy main motive was to give momentum to PRs. Sorry if you feel offended.\n. My bad. Will keep that in mind.\n. When will this be merged?\n. When will this be merged?\n. I've thought of that but there is huge difference between regex in javascript and php. So initially I'll be doing it manually because it will help me understand the differences better. \nYou can open an issue at my repo and we can move the discussion over there.\n. @Golmote Yep. Sure will do :)\n. There actually are few major ones that I noticed during my experiments.\n- \\\\ have to converted into \\\\\\\\\n- g modifier doesn't work\n- \\1 backreference has to be written as \\g{1}\n- # can also used to denoted regex\nThere's also something related to unicode, which I don't remember exactly right now.\nPS: you misspelled my name.\n. I've followed a bit different approach for loading language definitions on demand.\n- I've encapsulated each definition to in its own class.\n- I maintain a mapping between language-* class used and the class to be loaded. and also the aliases. A custom mapping can be provided by user to include their own definitions.\nI didn't say It's impossible. I just want to get the hang of the regex thing. :).\n Surely I'll write a script in future that can do the conversion.\n. I've released a v0.1.0 for prism.php :)\n@mAAdhaTTah You can use it and let me know if any issues are found.\n. @zeitgeist87 I'm getting error on Prism PR #444\nAdditional details: Using chrome 40.0.2214.69 beta-m on Windows 8.1\n. @zeitgeist87 it seems that the problem was asynchronous loading of the scripts.\nThe log was:\nCannot set property 'keyword' of undefined\nAfter couple of dozens of reloads, I've managed to get it work!\nGreat work :+1: \n. @zeitgeist87 Ran on Chrome, Firefox, Opera and IE11\n. @Golmote If you like, you can grab them from http://vkbansal.github.io/spectrum/samples\n. Thanks! Everything looks good. Closing this issue for now.\n. You can use https://github.com/leeoniya/preCode.js\n. Why not include this functionality as a plugin?\n. > a) requires little code\nshow-language plugin also has a couple of lines of code.\n\nb) is needed by a very high percentage of our userbase.\n\nI don't see how it'll harm the users. You certainly have an option to include it at download page. Don't you?\n. Ok. you must know better.\n\nThis throws off line numbers\n\nBut not when it breaks your current working code for existing userbase. That's software design 101.\n. > I believe that it should be a plug-in that is enabled by default\nThanks :)\n. My suggestion was a plugin\n\nWhy not include this functionality as a plugin?\n\nEnabling it by default is your choice\n. And those who do not want it can safely remove the plugin without effecting the core functionality.\nNow we are on the same page.\n. IMO, requirejs can be used to accomplish this task easily\n. @Golmote Prism languages are basically modules that are dependent on prism-core.js. This problem can be solved using UMD as shown here https://github.com/umdjs/umd. This would allow users to use Prism with their favourite module loader.\n. I'll explain AMD first. Lets take your example of GO and ObjectiveC.\nThe GO definition would be something like\njs\ndefine(['clike'] function(clike){\n  /** Rest of the code **/\n})\nThe Objective-C definition would be something like\njs\ndefine(['c'] function(c){\n  /** Rest of the code **/\n})\nThe C definition would be something like\njs\ndefine(['clike'] function(clike){\n  /** Rest of the code **/\n})\nSo when objectivec is required, it will load c and it in turn will check if clike exists and load it if required.\nAll the dependencies will be managed by the module loader. I can put a working example if you would like to see it in action.\n. @mAAdhaTTah The beauty of UMD is that it's backwards compatible and Prism can still be used like it's used currently.\n. @golmote by creating a plugin, you'll be reinventing the wheel\n. The plugin just solves one use case i.e. browser. What about nodejs? How does one handle that except for concatenating the files.\n. @LeaVerou UMD is to support wide variety of platforms.\nAs an example, Prism does not work in Node.js directly. Anyone would except this code to work in NodeJS\njs\nvar prism = require('path/to/prism/components/prism-core');\nrequire('path/to/prism/components/prism-markup');\nBut, It will not. I found this, when I tried to write a script to compare the differences between regexps in Prism.js and the php port I'm working on. The solution was to concatenate the files and that too in particular order, which is what this issue is about.\n\nload up only the required language definitions, rather than requiring that all that language definitions\n. @mAAdhaTTah Loading languages before Prism would not be possible (in its current state) as the languages are added inside Prism global object\n. Just to put it out there, I'm working on stylus definition and have written selector definitions from ground up. I think it shall be able to solve the problem. Will open a PR as soon as it's ready.\n. It's the expected behavior of the pre element. \nhttp://www.sitepoint.com/everything-need-know-html-pre-element/\n\nYou must use the following code\nhtml\n<pre class=\"language-markup\"><code class=\"language-markup\">&lt;div&gt;hi&lt;/div&gt;</code>\n</pre>\n. I also wanted to add this functionality to my port and I swear I too had similar ideas in my mind. In fact I've Implemented couple of plugins using an approach similar to your first approach.\nEDIT: Updated Link\nhttps://github.com/vkbansal/prism.php/blob/4955af8e71157dba26f2d69b13e1a529e91f6cf8/src/Components/Plugin/LineNumbers.php\nBut while I was looking at show-invisibles plugin, I too was set back by seeing that it modified languages. A way around it is that plugins should modify env.grammar,and not the original language definitions. But again the first approach would allow each plugin to add one and only one hook. What if a plugin wants to add multiple hooks?\nI like your second approach but will need to check it out.\nAs for the styling is considered, you are correct, adding a class will tackle the problem. I've used the very same technique in the port. \n. @Golmote I tested your second proposal and It's apt (at least for my project). Though I had to change how hooks were registered so as to keep track of which plugin is adding which hook and how to remove it.\nCode:\nhttps://github.com/vkbansal/prism.php/blob/64ac12879b1e409419da30a669d3898add02c449/src/Components/Plugin/LineNumbers.php\nEDIT: Updated link\n. @Golmote How about namespaced listeners similar to jQuery?\nFor example before-highlight.show-linenumbers should be\nhooks = {\n    'before-highlight': {\n        'show-linenumbers': callback()\n    }\n}\nremoving hooks should be straight-forward then.\n. Yes your are right. It popped in my head and just wanted to share.\n. Thanks, I just needed a clarification. :)\n. I'm on it. Will let you know as soon as I find some thing.\n. Yes, this is bound to happen as prism strips all the pre-existing tags as specified in the documentation.\nhttp://prismjs.com/#limitations\nI'm not aware of the apparent workarounds mentioned though. May be someone else will be able to help you.\n. Tested on IE11, Firefox (Stable and Developer Edition), Opera and Chrome on Windows.\n. BTW. Can you fix the CSS for tab in this plugin? The empty space after the tab symbol is kind of misleading.\n. The problem was in all of them.\n. @Golmote Thanks for the quick fix!\n. I too am in favor of this as I stated in #456 \n. @LeaVerou http://enable-cors.org/\n. It's just aesthetics. \nI have compulsion for such thing :p\n. No problem :)\n. > I\u2019d suggest prepending the classes with keyword-, otherwise there will be a lot of clashes and unexpected results.\nfixed it.\n\nPlease explain a bit more how this is used. Just a couple of sentences should be enough. I had to read the plugin code to understand what it does exactly.\n\nI'm not good at writing :p \nMay be @Golmote could help\n. @LeaVerou updated the description\n. @LeaVerou done. Anything else?\n. I'm just curious. Is  NASM similar to Assembly ?\n. @golmote because they are not constructors. They are static types just like string or boolean. It's just how typescript is.\nEdit:\nReference: http://www.typescriptlang.org/Handbook#basic-types-array\n. > Now somebody needs to run gulp and generate the minified version\u2026\n@LeaVerou We can setup travis-ci to automatically do such things whenever something is pushed and this would also solve #180 \n. References:\n- https://developer.mozilla.org/en-US/docs/Web/CSS/pseudo-elements\n- https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\n. @LeaVerou Fixed merge conflict\n. @LeaVerou Please review this too\n. @LeaVerou That was what I tried at first. But, it didn't workout.\n. Thanks! I'm open to suggestions.\n. see #465 \n. they support auto updating but require an npm package with semver.\n. @huyingjie The syntax definition is a PR and is still not merged. It will be merged and added once @LeaVerou reviews it.\n. @huyingjie PR is short for \"Pull Request\"\n. No it isn't. Just putting module.exports at end of the file does not make it node compatible\n. As I mentioned in #456 \nThe following code will simply fail:\njs\nvar prism = require('path/to/prism/components/prism-core');\nrequire('path/to/prism/components/prism-markup');\n. There already exists well known ways for module loading and resolving dependencies. I assume that you are familiar with them.\nMy motive behind this type of build is to let users use prism with tools like browserify and webpack which are very popular.\n. Closing this for lack of interest\n. After taking a quick look at seajs website, I can say that its a CommonJS module loader similar to that used in NodeJS. And Prism in it's current state is not completely ready for it.\n. @SandraShklyaeva AWESOME STUFF!\n. @rwwagner90 @uranusjr There's already a well-tested script for that\nhttps://github.com/leeoniya/preCode.js\n. What's in your css/crtitical.css.php file?\n. Try this\n<pre class=\"language-markup\"><code class=\"language-markup\">\n&lt;style type=\"text/css\"&gt;\n<?php include 'css/critical.css.php';?>\n&lt;/style&gt;</code>\n</pre>\n. If you want to include the file and show the file contents: DO NOT add &lt; and &gt; to the php line\n. Yes it should, but you have to escape some special chars like < and >\nhttp://www.sitepoint.com/everything-need-know-html-pre-element/\n. @valtlait I know but It's just my choice.\n. @vlrprbttst that is not a workaround its the solution! Please read the article I linked carefully.\n. @vlrprbttst you have a misunderstanding.\nThat's how HTML works and prism can't do anything about it.\nEven prism's own examples are escaped\nhttps://github.com/PrismJS/prism/blob/gh-pages/examples/prism-markup.html\n. The problem is in your prism.css\nFind\ncss\npre[class*='language-'] > code[data-language] {\n  overflow: scroll;\n  max-height: 28em;\n  display: block;\n}\nand remove the overflow:scroll line\n. see #478 \n. I agree with @Golmote \n. http://www.sitepoint.com/everything-need-know-html-pre-element/\nPlease do some research before posting queries.\n. @iLightGit Did you even go through the link, I posted?.\nIt's html that does not work like this:\n<pre><code><p>hi234234 sdfs!</p></code></pre>\nIt has nothing to do with prism.\nYou can try it without prism and see for yourself.\n. You can push updates to the same branch to update the PR. \nUpdate: OK. Now I see that you made a PR on master branch and not gh-pages\n. As @apfelbox pointed, the only way to do it by using fs.readFileSync. \n. @apfelbox thanks for the clarification :)\n. see #370\n. @brentonstrine There is already a well-tested script for this.\nhttps://github.com/leeoniya/preCode.js\n. @Golmote May be put a note about it somewhere.\n. @bebraw I too had same use-case of rendering on node, so I made -> https://github.com/vkbansal/illuminate-js\n. @bebraw sure will look into it :+1: \n. @jquense No problem. Glad to help :)\n. @Golmote I'll try it over the weekend. LGTM. Nice work!. @Golmote can you change alias to 'language-javascript' ?\n. Keywords seems fine to me\n. This not possible in case of stylus as far as I know. You can think of a better way. \nAlso how is it different from listing keywords?\n. The change is that it was previously matching a word followed by = and it was compulsory. I just made the word and = optional by replacing + with * for the word and adding ? after =.. I too like the first approach. I'll update the PR. done. ",
    "lydell": "http://prismjs.com/examples.html#failures ?\n. > This is an inherent limitation of regular languages: Any language with nested structures is not recognizable by a regular expression.\nI don\u2019t understand this. What \u201cnested structures\u201d? Regex can almost perfectly tokenize JavaScript and CSS. The problem is not regex, it\u2019s prism\u2019s way of matching (like @Golmote described).\n. > About nested structures, consider the Rust language, which supports nested block comments :\nThat makes perfect sense. That\u2019s nested structures. As far as I know that cannot be tokenized by JavaScript regexes (as you imply). \nHowever, this issue is called \u201cThoughts about strings, comments, regexps and other \"enclosing\" patterns\u201d. It does not appear to be about nested structures. And the OP specifically mentions problems in the JS component (not the Rust one (is there one, btw?), or CoffeeScript, or whatever). It shows examples that are 100% possible to solve with regex only (see js-tokens for proof), but that currently fail in prism.\nAlso, I\u2019m well aware of the text you quoted (after all, I\u2019ve written it myself ;) ). I don\u2019t think it has very much to do with this issue.\n. ",
    "thednp": "Please change/add CDN provider. I use jsDeliver, it automatically adds new release tags to clouds.\nThe 0.0.1 version on cdnjs is pretty buggy with JS.\nUpdate\nI found it on jsdeliver but it's still the old version!\n. Thanks, as I can see the jsdeliver repository, there is no prism.min.js and prism.min.css, so you better check that too.\n. ",
    "wmh": ":+1: \n. ",
    "NullVoxPopuli": "Is there a simple example / html file that demonstrates how to use the cdn?\nbeen trying to get this working: https://codesandbox.io/s/4xm5lzvkn7. ",
    "hades200082": "Why not put a \"Complete\" js on CDN that includes all languages... and each theme css as individual CDN files.  that way the developer only has two files to include from CDN.\nIf anyone doesn't want everything included they can still build their own version.. This has been around for a while now... is there any solution yet?. @DM2489 That's exactly why I reported it.\nI understand now though that it might be semantically outside the scope of this plugin. It would be nice to have a \"pretty print\" plugin however that did this.. I wonder if something more basic might suffice though.\nCould your plugin be changed to compare the indent level of each line to those next to it to see if it needs to add/remove any?. @DM2489 Do you think this would work for all languages...\nCompare first and last line, if indent of last line is greater than that of first line adjust all lines except first by the negative difference.\nThen pass the result to the rest of the process this plugin uses.. ",
    "sujilesh": "Hello, I have tried the same issue with latest prism its not replicable. Working fine in  IE9.\nThanks\nSujilesh\nSent from my iPhone\n\nOn Jun 20, 2015, at 9:53 AM, Logan Franken notifications@github.com wrote:\nHey @sujilesh, do you have a live example of this?\nWhen I embedded the latest Prism in a fiddle, I wasn't able to recreate the problem:\nhttps://jsfiddle.net/8rzwq5sp/\nMaybe the issue has been fixed?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "anselmh": "It is still broken as there is no version defined in bower.json. If you try to install it through bower you will get the following error:\nThere were errors, here's a summary of them:\n- prism no version\nAn error was caught when reading the bower.json: no version\nWould be great if you could fix that.\n. It would certainly help. 0.0.0 would also work and might be clearer that this is a dummy-version.\n. Thanks for the merge. Unfortunately the repo still needs a tag called v0.0.0 to get it work with bower. Do you want to do that, @LeaVerou? Downside of it is git tags require you to do that constantly (increaser version number in bower.json and create a new git tag) whenever you do some more changes in the source-code.\n. As a git tag is creating a tag in the history of a project they're bound to specific commits (see http://git-scm.com/book/en/Git-Basics-Tagging) for more information. Therefore you will need to increase the number for every 'release'. But you still define what a release is \u2013 not every commit/push is a version in my projects for example. So you could do this only for major releases '0.1.0' and not for every commit in your case.\nJust be aware that bower users get the state of the project that is tagged, not the newer commits that aren't tagged.\n. ",
    "jaydenseric": "That sounds like a good, fast solution. Would it be superior overall to look for strings between the : or a ) and a ( and assume that is a function instead of hardcoding a list of function names that must be maintained?\n. Nice :)\n. I haven't tried it out, but this might also be relevant in CSS for things like this:\nCSS\na::after {\n    content: attr(href);\n}\n. Well, SCSS highlighting extends CSS highlighting, right? So if we fix #239 to pick up on all functions (not from a hardcoded list) it would kill two birds with one stone.\nWhat defines CSS extras as special, should there not just be one well-done CSS mode? Maybe it's documented somewhere what features \"extras\" adds but I can't easily find it.\n. Related: https://github.com/LeaVerou/prism/issues/164\n. ",
    "rxaviers": ":+1: \n. ",
    "markdalgleish": "+1\nI use Prism in Bespoke.js Generator and moving the themes into a separate folder broke my boilerplate (see this pull request I received to fix it). I'd love to lock in a version of Prism with the generator to avoid these sorts of issues.\nI agree that the themes should have been moved, but that should also constitute a version bump IMO.\n. ",
    "franz-josef-kaiser": ":+1: \nGruntfile would be nice.\n. @apfelbox  Is this the repo where you send PRs from?\n. If you'd do micro commits (one minor changed block, one commit) it would be easier to drop or replace certain things later on. It as well would make it possible for someone to jump in. Anyway :+1: for doing that!\n. @apfelbox why the v? Semver does not have the v. \n(Still a big win as most package manager will recognize that as valid)\n. As I'm still subscribed to that ticket: A lot of tools (like package managers) are highly confused if there is no master branch.\nAlso: If you add a Gruntfile.js and explain your build process, people (like me) might jump in and help pulling off some automation :)\n. ",
    "CaryLandholt": "Terrific library.  Definitely need tagged releases to be consumable in a predictable way.\nPulling from gh-pages is not sufficient.  As mentioned in other issues, bower doesn't like it.\nAlthough the following works, it's not versioned or convenient.\nbash\n$ bower install git@github.com:LeaVerou/prism.git\\#gh-pages\n@LeaVerou, terrific job on the library, however.\n. ",
    "Anahkiasen": "Is there still no plans for tagged releases?\n. ",
    "paazmaya": "+1\n. ",
    "alde": "From what I can tell, the code needs to follow the pre with class='line-numbers' immediately for the line numbers to work, you have a div in-between.\n. ",
    "ryanzec": "If I could get any word on whether or not this change will make it into the repo that would be great because if not, I will then just maintain this forked version myself and add it to bower so I can manage it through bower like I do all my other libraries.\n. anyone?\n. If this is not going to be merged in can I at least get a reason?\n. Well its been another 2 months and still nothing.  There have been a bunch of merged pull requests since this one so I can only assume 1 of two things.\n1.  There is a problem with this pull request which if that is the case, please let me know what I need to do to fix it.\n2.  You don't want to add this pull request which if that is the case, please let me know so that I can manage and keep up-to date my forked version of this library.\n. If you find any issues, I'll be more than happy to fix them.\n. This is because I have a differently default font size of 13px, check this fiddle out:\nhttp://jsfiddle.net/g50keua0/\nI have tested the parseInt locally with a font size of 13px, 23px, and 33px and all of them have proper line highlighting.\n. #668\n. ",
    "benjaminapetersen": "Ping on this one!  I just tried Prism for the first time, made a plain index.html file, installed Prism with bower and added a JS & CSS block.  Here is a screenshot if it helps:\n\n. ",
    "citkane": "Another ping on this one given the caveat that I have prism well embedded within an angular app, so I have not tested the default behaviour. This is what I am getting when line numbering and line highlighting are enabled together:\n\nAnd how it looks with a dirty CSS hack:\n\nBy overriding the css thus:\ncss\n.line-highlight{\n    min-height:28px;\n}\n.line-highlight::before, .line-highlight[data-end]::after {\n    border-radius:0;\n    top:0;\n    left:0;\n    height:28px;\n    width:38px;\n    box-shadow:none;\n}\nIt would be nice if the two can play together reliably - thanks for a great product.\n. ",
    "heycarsten": "@LeaVerou You can also use GitHub's Releases feature which will take care of tagging for you. If you're curious about best practices for versioning Semantic Versioning is superb. Thanks so much for Prism and all the time you and the community have invested in it, it's an excellent library.\n. ",
    "dewyatt": "This was in Twilight.\n. Thanks, I'll create a pull request!\n. Merged.\nSorry, I didn't realize I changed the colours.\nI removed a part without fully understanding, thinking it was unused (CSS is not my forte).\nI believe it is ready to pull.\n. ",
    "rodneyrehm": "I don't think this is a prism issue after all, considering the following is hilited just fine in the test page\nhtml\n<a href=\"/hello/world.html\">link text<a/>\n<a href=\"world.html\">link text<a/>\n<a href=\"http://foobar.com/hello/world.html\">link text<a/>\n<a href=\"http://foobar.com/hello/\">link text<a/>\n. ",
    "RomainSauvaire": "What about separating .js and .css and provide at least the default theme to measure the enthusiasm it generates ?\n. Arf, I did not think to it :s \n. ",
    "urielhdz": "Looks like does so for every \"<\" in ruby code, for example:\nThis:\nclass Code < ActiveRecord::Base\nIs converted into this:\nclass Code <; ActiveRecord::Base\n. ",
    "guilhermesimoes": "Yeah... I'm gonna edit the title of this issue.\nThis is what you get for working with regexes, LeaVerou :(\n. Thanks! :clap: \n. Just applied the patch locally, no problem!\n. ",
    "arnehormann": "Maybe that's because clike uses parens in \"ignore\". On writing the current Go pull request, I encountered similar problems when I used parentheses in a regexp. As soon as I added outer parens around the whole expression, the problem disappeared.\nI guess the regexps use only the parenthesised expression for replacement as soon as parens are used.\n. Yes, I copied number and string and gained inspiration concerning the structure.\nThe rest came from the language specs.\n@munckymagik how would you like to be mentioned here? I'd prefer you add yourself in a new PR so you can officialy join the commit history :grinning:\nSorry for the oversight on my part, I didn't mean to steal credit here.\n. @LeaVerou btw. - did you find time to look at my comment in https://github.com/LeaVerou/prism/issues/175#issuecomment-29622115 ? I think that also eliminates #183 and maybe some other bugs.\nIt is a bit far reaching - many of the regular expressions throughout the whole library have to be adapted and I was a little uncertain how to do it due to the missing build system. If you have pointers and I know this won't clash with other attempts, I can give it a shot, but it's probably best if you do so yourself.\n. I started at the top and found examples everywhere. I also started a fix, but had serious trouble getting it anywhere - it's not testable as is and I don't want to check everything visually.\nhttps://github.com/arnehormann/prism/commit/5c2a9d58259e1713333d09c7880cd96f142cec41\nWhat I would have loved to be more productive is a test suite with test cases per language.\nIdeally, you'd also split the repository into gh-pages and master - otherwise everyone gets a build error email by github on pushing their own changes into their forks because the CNAME is taken.\n. ",
    "pothibo": "& alone also adds a ; after.\n. https://github.com/LeaVerou/prism/blob/gh-pages/components/prism-ruby.js#L19 is the culprit.\nI have no idea why but the [@$&]\u00a0portion of the regex screws things on my installation.\njavascript\n  'variable': /[@$]+\\b[a-zA-Z_][a-zA-Z_0-9]*[?!]?\\b/g\nFixed it for me. Also, I have never seen a variable starting with & in ruby. Is this part a valid token?\n. ",
    "shakyShane": "You should find that the latest commit fixes the indentation issues.\n\"PS: Sorry for the delay in getting back to you, I just noticed how old this is!\" - No worries, glad to help OS projects as always :)\n. ",
    "mvalipour": "Hi,\nI applied the changes.\nCheers :)\n. Sure, I noticed it myself too, but it was too late!\nBTW, here is an example of the gherkin one: http://manorey.net/mo/blog/2013/10/26/gherkin-highlighting-example/\n. well, attribute selection is going to be tricky because there can be confusion between [Attribute] and \nc#6's dictionary initialization:\ncsharp\nvar dic = new Dictionary<string, string> {\n    [key] = value,\n    [key2] = value2\n}\nfor generics tho, it should be fine. do you guys agree?\n. I'm happy to do so, however, what I'm trying to figure out is that this is something within the possibilities of prism. -- to my understanding, prism is very limited in terms of syntaxes it can find (given it doesn't parse the code and purely relies on regular expressions).\nI had a quick look and nothing seems to be done around for example templates in cpp (which are the equivalent of c# generics)\n. ",
    "panique": "It's totally weird that this plugin has absolutly no list of supported languages and how to use them! This is #1 prio, lots of people will reject this plugin otherwise. \n. ",
    "imabot2": "For those who are looking for a drop-down (<select><option>) list of supported languages, it can be found here : https://ans.wiki/q/ou-trouver-une-liste-deroulante-des-languages-supportes-par-prism/\n. ",
    "geraintluff": "I also confess that I couldn't instantly see a build system, so I just copied the changes from one file to another.  I also wasn't sure how the minified files actually got produced, so I just left them alone - I hope that's OK.\n. Ah - I seem I'm not the only person to have proposed this.\nIf this isn't suitable, would you be able to tell me what kind of thing you'd be looking for in a Node adaptation?  I would very much like to see Prism in NPM, but I can understand if you have strong views about what happens to your codebase.\n. If it would help this get merged, I'd be happy to be first contact for future Node-specific issues.  I've already been using my modified fork to do server-side code-highlighting, and I'd love for it to be more official. :)\n. @LeaVerou - Thanks for the merge. :)\nI'm also happy to help out if there are any issues publishing to NPM.\n. If a Git repo doesn't have a master, then you need to specify one when installing with NPM.  This is done using fragments (e.g. #gh-pages).\nIf you want to test-drive the package, give something like the following a go:\nnpm install git+https://github.com/LeaVerou/prism.git#gh-pages\nThis should have no effect on \"ordinary\" installation from NPM (because that doesn't rely on Git at all, storing the code locally instead).\n(BTW, when trying a \"git+ssh://\" URL I get \"Permission denied (publickey)\" - but I get the same thing when doing a git clone so I don't think that's an issue with NPM or the package).\n. Right now, package.json references this prism.js.  If you think it would be better-off referencing something else, then I'm happy to change it.\nMy reasoning was that if it just referenced prism-core.js then it wouldn't appear pre-loaded with various languages.  \nSeparate JS files don't share a global namespace in Node, so adding the ability to load these languages individually would require more (possibly awkward) code-changes, and I wasn't sure if there would be any benefit.  The simplest thing seemed to be to reference what looked like a grand-bundle of stuff.\n. ",
    "odsod": "+1 on this @LeaVerou!\nI'm building a touch typing trainer for code (similar to typing.io) using Node and Browserify, and I'd love to use Prism for syntax highlighting. I'm really impressed with it's simplicity, I think you're doing an awesome job.\nI looked over @geraintluff's commit, and it looks solid. I do however recommend that you spend some time getting comfortable with Node if you finally decide to merge it in. \nOn the flipside, Node is a great support tool for any type of general web development, so it won't be time wasted. Writing modular code using Browserify and automating build tasks with Grunt.js are things I really recommend looking into.\n. ",
    "Thomasdezeeuw": "I would love to use this with Browserify, however there's already a package named prism, though it's not really anything.\nBesides that it's this getting accepted any time soon?\n. ",
    "nitriques": "+1 on all of this. Thanks!\n. Not working for me either.\n\nnpm ERR! Failed resolving git HEAD (git@github.com:LeaVerou/prism.git) fatal: ambiguous argument 'master': unknown revision or path not in the working tree.\n\nnpm wants to download the 'master' branch, but it does not exists since everything is in the 'gh-pages' branch.\n. Good to know, thanks @geraintluff.\n. ",
    "sir-dunxalot": "In advance of this, I've been trying to install directly from this github repo. For example:\nnpm install LeaVerou/prism\nnpm install git+ssh://git@github.com:LeaVerou/prism.git\n...and so forth. I have encountered an error on every attempt. I'm not sure if this will be resolved when published to NPM or if there is an issue in how the package has been set up.\nHas anyone successfully installed from this repo and/or are we confident the package is ready for publishing?\n. ",
    "kud": "A way to fix it:\nbower install git@github.com:LeaVerou/prism.git\\#gh-pages --save-dev\n. @callumacrae It's not the subject here, do --save-dev or --save :)\n. I don't use anymore bower, instead npm.\n. Okay, thank you for your answer ;) \nWill see if I can do something.\n. ",
    "callumacrae": "Thanks for the fix.\nI suspect if you're only using Prism during development though, you're doing something wrong!\n. You could branch gh-pages into master, and then delete all website stuff from master. Merge master into gh-pages, then use git revert in the gh-pages branch to revert the changes so you've got the website stuff back. You will then have two branches, one containing only the code, and the other containing both the code and the website stuff.\nPrism changes would need to be made to master and then merged into gh-pages, but that's pretty easy (you could probably even have it running on a hook, although that could be dangerous). So, it's sort of manual, but it's not as bad as copying and pasting code.\nIt sounds more confusing than it is. I could fork the repo and demonstrate, if you want.\n. The way I'm suggesting, they'd only need to send it to master, but then you'd need to merge it (although it really would be as simple as git checkout gh-pages && git merge master).\nIt would be confusing if the branches diverged, but they don't need to.\n. You could use a git hook\u2014use the post-merge hook to merge a change into gh-pages when you merge it into master.\n. I'd guess it was created on March 21st by you, because that's the last commit!\nIf you delete the master branch now, you could break any site that's started using prism between March and now. Could I suggest that now would be a good time to start using the master branch?\nnpm weekly had a couple links this week on how you can use npm scripts to speed this up.\n. ",
    "dristic": "+1 For fixing this. Also had issues installing here\n. ",
    "sabcio": "I'm trying to use prism with https://rails-assets.org so I can ditch bower when developing my Rails apps. rails-assets uses master branch by default to build ruby gems.\nAlso I think this project should be properly versioned with a change log. \n. ",
    "sgarbesi": "This really should have a master branch, we don't need the gh-pages in our code repos.\nAlso it's defeating the purpose of Bower. Bower aka making it easy for us (developers) to install JS libraries without having to browse the web.\n. @LeaVerou http://gruntjs.com/\n. ",
    "thomaswelton": "I'd like to see this repo refactored to have a master branch. It's not just a bower thing \n. ",
    "hastebrot": "@kud With the \\ it throws an error on my machine. It worked without the \\.\nbower install git@github.com:LeaVerou/prism.git#gh-pages --save\n. > Tbh merging changes to the master branch, and then only pushing to\n\ngh-pages\nupon release is probably a better way of doing things anyway. You could\nuse\na CI service such as Travis to only push to gh-pages if the tests are\nsuccessful, ensuring tested code only ever makes release.\n\nThat's a good idea. It prevents the GitHub page being broken and reduces\nbranch synchronisation to a no-op administratively.\n. ",
    "homosaur": "I personally believe this you have the wrong outlook to have on this issue @LeaVerou. Who cares about the gh-pages branch being up to the minute accurate? It's just a demo. The far more important issue is that Prism works in packaging systems so people can easily include it in their projects which means that master should be the default branch.\nIf it is important to have the demo up to the minute, why can't you just link to the default raw file in the master branch like https://raw.githubusercontent.com/LeaVerou/prism/gh-pages/prism.js?\n. ",
    "cheshrkat": "+1 to being bower friendly.\n. ",
    "karlgroves": "+1 to the other plus 1s!\n. ",
    "ImanMh": "I think I don't really need the gh-pages in my development environment please make a master branch. \nI wish:\n   bower install prism --save \nwould just pull necessary files for using prism and defining new languages. \n. ",
    "maciejczyzewski": "My, gosh. Hopeless branchy structure.\n. ",
    "awc737": "Still seems impossible to install with bower, without specifying #gh-pages branch.\n. ",
    "xsynaptic": "Prism is great! I also look forward to when it can be consumed via Bower without a workaround :+1: \n. ",
    "Robdel12": "Makes this hard to use with Ember CLI.\n. ",
    "brunowego": "Need make a tag with the version 0.0.1 :+1: \n. +1\n. ",
    "kwyn": "Would love to use this but I would love to not have to use the gh-pages branch. It's not semantic and makes it a pain to manage. Also proper semver would be great on bower distribution. You can do it with git-tags and if you need to you can also use an interactive rebase on a master branch to tag appropriately. I know it's a lot of work but it'll make your project much more successful.\n. ",
    "johnwilliams713": "Hi all. I'm seeing this error when trying to install with this:\nbower install git@github.com:LeaVerou/prism.git#gh-pages --save\nError:\nFailed to execute \"git ls-remote --tags --heads git@github.com:LeaVerou/prism.git\", exit code of #128\n. ",
    "foxx": "Has this now been resolved? Or does it need more work?\n. I can see a \"master\" branch on this repo, which was last updated approx 1 month ago, could you explain what you mean, given that there is one?\nAlso bower seems to work without problem for me lol.\nAm I missing something here?\n```\n$ bower install prism\n? May bower anonymously report usage statistics to improve the tool over time? No\nbower prism#               not-cached git://github.com/LeaVerou/prism.git#\nbower prism#                  resolve git://github.com/LeaVerou/prism.git#\nbower prism#                 checkout master\nbower prism#                 resolved git://github.com/LeaVerou/prism.git#6dbe885142\nbower prism#*                  install prism#6dbe885142\nprism#6dbe885142 bower_components/prism\n ls -lah bower_components/prism/\ntotal 56K\ndrwxr-xr-x 1 vagrant vagrant  544 May  4 13:17 .\ndrwxr-xr-x 1 vagrant vagrant  136 May  4 13:17 ..\n-rw-rw-r-- 1 vagrant vagrant  750 May  4 13:17 .bower.json\n-rw-rw-r-- 1 vagrant vagrant  503 May  4 13:17 bower.json\ndrwxr-xr-x 1 vagrant vagrant 4.4K May  4 13:17 components\n-rw-rw-r-- 1 vagrant vagrant 6.0K May  4 13:17 components.js\ndrwxr-xr-x 1 vagrant vagrant   68 May  4 13:17 examples\n-rw-rw-r-- 1 vagrant vagrant 4.5K May  4 13:17 examples.js\n-rw-rw-r-- 1 vagrant vagrant 1.4K May  4 13:17 gulpfile.js\n-rw-rw-r-- 1 vagrant vagrant 1.1K May  4 13:17 LICENSE\n-rw-rw-r-- 1 vagrant vagrant  635 May  4 13:17 package.json\ndrwxr-xr-x 1 vagrant vagrant  374 May  4 13:17 plugins\n-rw-rw-r-- 1 vagrant vagrant  16K May  4 13:17 prism.js\n-rw-rw-r-- 1 vagrant vagrant 2.3K May  4 13:17 README.md\ndrwxr-xr-x 1 vagrant vagrant  306 May  4 13:17 themes\ndrwxr-xr-x 1 vagrant vagrant  102 May  4 13:17 vendor\n```\n. Tbh merging changes to the master branch, and then only pushing to gh-pages\nupon release is probably a better way of doing things anyway. You could use\na CI service such as Travis to only push to gh-pages if the tests are\nsuccessful, ensuring tested code only ever makes release. I'd be happy to\ncontribute some time to make that happen, it's a pipe work task I've done\nfor several other GitHub projects.\nOn Tuesday, May 5, 2015, Lea Verou notifications@github.com wrote:\n\nThere didn\u2019t use to be a master branch in the past, to prevent the\ninevitable syncing issues between the two. I don\u2019t quite remember when one\nwas added, @Golmote https://github.com/Golmote do you?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismJS/prism/issues/180#issuecomment-98927673.\n. @LeaVerou Majority of this I can do in a PR, but some will require you to setup up hooks and accounts, which I can talk you through on Skype with screenshare etc. Travis CI will also give us all those lovely integrations we see on other projects, such as a build status logo on the README and a test build hook on every commit/PR, and most importantly it will give this project CI, which should be an absolute minimum imho.\n\nAlso the general rule of the thumb is that no one should be committing to master directly, all changes should happen within a feature branch and all merges to master should be done via a PR. If you haven't already, I'd strongly recommend reading Github Flow.\nAnyway, my skype is cal.leeming. I'm free tonight after 8pm GMT.\n. Heh, so TDD is out of the window.. At the absolute very least we can have a\n\"does it compile/parse\" acceptance test. Either way, the original proposal\nis still valid.\nOn Tuesday, May 5, 2015, Golmote notifications@github.com wrote:\n\nA test build hook would be useful... if we actually had tests.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismJS/prism/issues/180#issuecomment-99081675.\n. @LeaVerou could you please merge this PR? LGTM.\n. Just a heads up, this version doesn't seem to work as nicely as the one on\nStripe. I was able to rip out their Prism.languages.json code but it needs\nwork. I'll submit an alternative later today so you guys can compare the\ndifferences.\n\nOn Tuesday, May 5, 2015, Lea Verou notifications@github.com wrote:\n\nHoly crap, I\u2019m so sorry for taking this long.\nIt looks fine and can always be fixed later. However:\na) We need a minified version and an entry in components.js otherwise it\nwon\u2019t show up anywhere.\nb) A few examples would be nice, but not required. @Golmote\nhttps://github.com/Golmote do we have any docs for doing that?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismJS/prism/pull/370#issuecomment-98926923.\n. \n",
    "butesa": "Yes, that's what this is about. When I choose a language that prism doesn't know, it nevertheless should do some styling.\n. ",
    "munckymagik": "Hi\nSorry for my lack of response and thank you Arne for finishing the job properly :)\nNo need to worry about crediting me, but thanks for the consideration.\nAll the best\nDan\nOn 9 Dec 2013, at 21:39, Arne Hormann notifications@github.com wrote:\n\nYes, I copied number and string and gained inspiration concerning the structure.\nThe rest came from the language specs.\n@munckymagik how would you like to be mentioned here? I'd prefer you add yourself in a new PR so you can officialy join the commit history \nSorry for the oversight on my part, I didn't mean to steal credit here.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "dwachss": "I hadn't looked at it that way. My thought is that the wrappers for the lines is more semantic than an element just for the gutter.\nI will not be offended if you don't use it--Prism is a great package and I appreciate your releasing it!\nDanny\n\nFrom: Lea Verou notifications@github.com\nTo: LeaVerou/prism prism@noreply.github.com \nCc: Daniel Wachsstock d.wachss@prodigy.net \nSent: Monday, December 9, 2013 11:26 AM\nSubject: Re: [prism] New line numbering plugin that uses ::before rather than a new element (#184)\nThat's exactly what I was trying to avoid. It's much better to create an extra element than N extra elements where N = your number of lines. Why do you think this is a better approach?\n\u2014\nReply to this email directly or view it on GitHub.\n. I will try. I'm still figuring out how to use git. Can you close this and I will create a new fork with just the relevant change?\nSent from my iPad\n\nOn Dec 14, 2013, at 8:40 AM, Lea Verou notifications@github.com wrote:\nHi there,\nI'm in favor of merging this change, but I can't due to all the other irrelevant commits. Please fix this?\nThanks!!\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "kbjr": "I wasn't sure about the parentheses due to the way I was using the ^ anchor, so I chose to go with the side of caution.\nI will try adding the m flag and see how it reacts. I am admittedly only using this for a very simple case, so I haven't done much testing of it.\nI am aware of that, like I mentioned above I had a very specific use case in mind when I changed this. If I wanted to make it more globally useful to people, I would have to give some more though to how to write this regex. I'm almost tempted not to highlight different variations of the prompt because, in theory, your prompt string could be anything, it doesn't even need the $. Thoughts?\n. I actually just had a thought, this could also be expanded to do things like highlight names of different types of files (such as directories, as opposed to regular files).\n. That is kind of what I was implying by my comment, that it could be expanded on to be more useful. As I said, I wrote threw this together because I am trying to implement directory listings like this in a project I'm working on; I will likely keep expanding on it as I work on my project, and I will keep you informed.\n. A little more mature example, this adds classnames based on file extension, so you can highlight different types of files differently:\n`` javascript\nPrism.languages.folders = {\n    // Highlight symbols used to denote folder structure\n    'punctuation': /^([-|+\\s]+)/gm,\n// Highlight the individual file names\n'keyword':  /([a-zA-Z0-9._].+)/g\n\n};\nPrism.hooks.add('wrap', function(env) {\n    // Add classnames for file extensions\n    if (env.language === 'folders' && env.type === 'keyword') {\n        var parts = env.content.split('.');\n        while (parts.length > 1) {\n            parts.shift();\n            // Ex. 'foo.min.js' would become 'foo.min.js'\n            env.classes.push('ext-' + parts.join('-'));\n        }\n    }\n});\n``\n. ... nice ... :)\n. Actually, the-Fflag will causetree` to output symbols based on file type\nFrom the man page:\n-F\nAppend a '/' for directories, a '=' for socket files, a '*' for executable files and a '|' for FIFO's, as per ls -F\n. ",
    "uranusjr": "I think you may need to specify ASCII encoding to get the syntax (tree --charset=ascii). Wish this would work with UTF-8 box-drawing characters (\u2500\u2502\u2514\u251c) too. This looks awesome.\n. (Edit) I saw that this is added already. You rock! :+1:\n. Oops sorry, I missed that in my commit. Added now.\n. Updated. objectivec was my initial choice, but thought that was a bit strange. Would rather use objective-c, but that doesn\u2019t seem to conform with the current naming convention? objectivec is fine, though.\n. For this particular use-case only copy to clipboard is needed, and surprisingly (at least to me) support for it seems pretty decent. It\u2019s mostly only unsupported on mobile browsers, so maybe a Flash-free solution is reasonable?\n. Yes, you\u2019re right, I misread the support description. Sorry for the mess-up.\n. I should modify the gulp script, I think? Will do\n. > Ok, so this PR just adds c to prism.js?\nYes.\n\nprism.js is for usage on the prismjs.com only.\n\nWhich I am aware of. The point of this PR is to fix prismjs.com. Objective-C highlighting is broken in the Test drive page because prism.js does not contain prism-c.js, which is needed by prism-objectivec.js.\nSorry I didn\u2019t make this clear. Hope this justifies this PR.\n. Which is exactly the same statement with #358. I did a quick debugging and the problem seems to be in prism-core.js, around these lines:\njs\nvar patterns = grammar[token];\npatterns = (_.util.type(patterns) === \"Array\") ? patterns : [patterns];\nin which grammar[token] is not an Array but a wrapper for it. The relevant lines should be\njs\nvar patterns = grammar[token].tokens;\npatterns = (_.util.type(patterns) === \"Array\") ? patterns : [patterns];\nI don\u2019t know enough about Prism\u2019s internals to determine whether this should be fixed here or where things are fed into grammar instead.\n. As I said in the last paragraph, I don\u2019t know enough about Prism\u2019s internals. I\u2019m not even confident that my \u201cfix\u201d is correct.\n. Wild guess: You didn\u2019t include prism-clike. prism-csharp depends on it for constructs common in C-like languages.\nThe scripts part needs to be like this:\nhtml\n<script type=\"text/javascript\" src=\"components/prism-core.min.js\"></script>\n<script type=\"text/javascript\" src=\"components/prism-clike.min.js\"></script>\n<script type=\"text/javascript\" src=\"components/prism-csharp.min.js\"></script>\n. There is actually one extreme edge case, as described in this post, in which the JavaScript rules wouldn\u2019t highlight JSON properly, while this implementation does. This can be fixed by extending JavaScript instead, obviously, but that seems a bit backwards IMO to include so much (C-like and JavaScript) for so few syntax features.\n. (See also discussion in #441)\n. You need to escape < (and maybe >) in the code block.\nhtml\n<pre><code class=\"language-markup\">&lt;div class=\"pat-a\"&gt;...&lt;/div&gt;</code></pre>\n. I would like to jump in and offer an idea, if you don\u2019t mind: While Handlebars is used mainly for HTML templates, it is not limited to that purpose. Under certain circumstances the markup highlighting may not be desired. Would it be possible to split the logic into two syntaxes, one highlighting HTML, and one does not?\n. To solve the merge conflict problem, the most important part would be the last item in the list, so really this can work by just reversing the order\u2014add new language definitions to the beginning of the list, not last.\nBut really, the code used to iterate over might need some change anyway. Currently for .. in is used to traverse through the language keys, but the ECMAScript spec never promised the ordering of the iteration (although implementations tend to result in ordered keys), so it might not be a good idea (at least I don\u2019t think it is) to depend on it. Maybe it would be better to solve things once and for all by adding a featured key in meta listing special languages to put in the front, with others sorted alphabetically after them.\n. I don\u2019t own the Git syntax though. Would be happy to help if @lgiraudel thinks this is a good idea.\n. Thanks @LeaVerou, amended. Sorry for the changes taking so long, I totally forgot about this. :(\n. @Golmote Yes that is what I intended, since they sort of act as separators between diff chunks, like the *** lines in context diff. That\u2019s just my opinion though; I wouldn\u2019t mind if you want it be done differently.\n. As mentioned in #385, the trailing line break does not cause visual differences, i.e. this\n<pre><code>foo\nbar\n</code></pre>\nand this\n<pre><code>foo\nbar</code></pre>\nwould look identical in the browser. Trimming trailing line breaks at the end may produce unexpected results to the following:\n```\nfoo\nbar\n\n```\nsince the user might expect a trailing empty line at the end (whatever the reason is).\n. If I understand currently, using UMD would mean that someone needs to maintain a set of definitions outside of Prism (or at least its core) to make sure that the dependencies are resolved correctly. I\u2019m not sure that is a good idea. Prism already has its own way to record dependencies (in components.js), and unless it is to be deprecated or changed or what, having a new set of rules is duplicate logic and isn\u2019t nice. It would be fine if someone wants to build something standalone, but not in Prism itself.\nI can think of two ways to do this:\n1. Just load components.js (or a subset of it) in somehow, like how autoloader_path currently works, and use it to resolve dependencies. I use this method in some of my projects to implement something similar (add script tags dynamically based on what languages are used in the page).\n2. If a dependency is needed, lang would be undefined when Prism tries to find the language definition for extend. We can raise an exception right there, instead of failing later in the process. This wouldn\u2019t affect existing code (unless the user does something funky with the undefined error we currently get when a language is not defined), and the autoloader can catch that exception and run load_script recursively until all dependencies are loaded (or fail completely if a script for the dependency is not found\u2014which means something is terribly wrong in the user\u2019s code).\nPersonally the second one has an extra appeal of making the error more explicit when I do something wrong (misspell the language name, for example). The current exception (TypeError: undefined is not an object (evaluating 'lang[key] = redef[key]')) is very puzzling when you first see it.\n. This really isn\u2019t Prism\u2019s problem, if I am not mistaken. Prism works by replacing the <code> block with highlighted content, and does not touch anything outside it. That includes newlines and white-spaces between the <pre> and <code> tags. So if your <code> block was indented, the highlighted content will be indented.\nThe best \u201csolution\u201d here might be some custom JavaScript to strip the extra content yourself, outside Prism. Or it can be done as a Prism plugin, I think.\n. Just made a quick hack of a plugin, available here. Should be straightforward to use.\n. Objective-C is a strict superset of C, which is why I chose c as its dependency, instead of clike.\n. The problem is in your own CSS; your .post rule contains word-wrap: break-word; that is inherited by the code blocks and makes the lines break. Didn\u2019t dig into why this only happens on Safari (probably all WebKit and Blink browsers?), but this is just browser quirk, I guess.\nJust add this to your CSS and things will work correctly:\ncss\ncode {\n    word-wrap: normal;\n}\n. I think what @iLightGit means is: Since Prism strips out HTML tags inside <code> anyway, why not just allow unescaped HTML inside it?\nIf you add a language-markup class to the above example, and run it through Prism, you will get\n<pre><code class=\"language-markup\">hi234234 sdfs!</code></pre>\nSo it really wouldn\u2019t break anything whether Prism auto-escapes HTML or not.\nI don\u2019t agree with this myself, to be honest. I\u2019m just trying to figure out the reasoning behind the comment. Auto-escaping should not be part of Prism in any case, and you can always loop through the code blocks yourself, or just write a plugin to escape the block before Prism process them.\n. See #558.\n. This happens because Prism uses \\w+ to match a tag name, but in JavaScript this matches only ASCII characters. There\u2019s no easy solution here; to override this you will need to explicitly specify what you want to match, which is doable but far from pretty. If all you want are characters with umlauts, you can only include what you want\u2014for example, changing line 10 in the above file from\njs\npattern: /^<\\/?[\\w:-]+/i,\nto \njs\npattern: /^<\\/?[\\w\\u00e4:-]+/i,\nand Prism will correctly highlight the above snippet. I am not sure how a more general fix is reasonable though. Would something like /^<\\/?[^ >]+/ work?\n. Just noticed this was merged into the master branch instead of gh-pages. Is this intended?\n. Just saying, it\u2019s always easy to just fork this repository and make any modification you feel necessary, you know. Every project has its scope, and every project maintainer views things differently, but you can always customise if something doesn\u2019t suit your need. That\u2019s the point of free software.\n. FWIW, all of Safari, Chrome, and Opera on OS X behave the same as Chrome on Windows. I guess this is a WebKit/Blink thing.\n. @Golmote Yup, this is exactly what I need. I don\u2019t currently need to highlight things, so I\u2019ll probably go for your modified version. Thanks. :)\n. Just tried the latest version via prismjs.com and this is indeed fixed. I\u2019ll close this.\nBTW I noticed another problem with the Coy theme on the website. It overflows the content section and overlaps the theme chooser on the right:\n\nFor comparison, this is how the default theme looks:\n\n. I\u2019m not very familiar with the workflow, but it sounds like a good idea. Will this apply only to the minified version?\n. I would argue powershell does need to be mapped to PowerShell though. Case is important, especially to most programmers. I think most languages with only the first letter capitalised can be omitted, i.e. python does not need to be mapped to Python (it can be converted automatically in the plugin), while javascript need to be mapped to JavaScript. But it might be better to just process the whole list in components.js anyway.\n. Might want to take Handlebars and Mustache into account. They use very similar syntaxes, too.\n. Based on my observations, I think the current practice is to just submit the PR here, and just ping the main author/maintainer of the plugin for suggestions and review in it.\n. #259 #373 #572 #984. ",
    "mavimo": "Problem is related on line 80 of prism-php.js, using:\njavascript\nPrism.languages.insertBefore('php', 'keyword', {\n  'markup': {\n    pattern: /a^/g,\n    inside: Prism.languages.markup\n  }\n});\ntemporary solve the issue.\n. ",
    "labo-css": "I hate to necropost but. Is this issue somewhat resolved? I have a hard time to found any syntax highlighter that support the sass syntax. Only pygments is doing it but... python.\n. Thanx but where is the online version of this screenshot?\n. Thanx!\n. ",
    "nauzilus": "Hi @opatry, this should be fixed now, are you able to get the latest code and test please?\n. Ok cool. Damn, forgot about the minified file, only found out recently they weren't automatically generated. I've put in another PR for that... will let you know once it's merged.\n. Minified file is merged now, so you should be good to go. \n. Hi Lea,\nIt doesn't really depend on csharp though, if csharp isn't loaded, embedded code simply won't be highlighted. csharp is to aspnet as javascript is to markup - markup will still work fine without javascript, you just won't have embedded JavaScript highlighted if you don't include javascript.\nI have configured markup as required, since that's what aspnet extends.\nHope I'm making sense, maybe I've missed something obvious :)\n. Oh bugger, didn't realise that commit was going to automatically get included in this pull request. \nI would like a211c26 pulled also, but it's probably better to keep changes separate. Do you want me to revert that commit, or can you pull the commits individually? (It's been so long since I've used git :( ).\n. No worries, done!\n. Hi Lea,\nYes, you can view at http://nauzilus.net/prism/plugins/show-language/ or a \"real life\" example at http://danielflint.im/2014/03/migrating-to-prism/.\n. Done!\n. Hi Lea, glad that made sense, probably helped you'd seen the symptoms before =) \nI'll submit a PR tonight. \nSetting file-highlight as default was only so the bug is easily replicated on page load, I won't actually include that in the PR. \n. Wow that was quick! You're welcome :)\n. No worries =) You can view at: http://nauzilus.net/prism/download.html\nIt's a bit of a mixed bag... I've included my asp.net changes and the 'show language' plugin. None of which should affect download.html. If you want me to strip that though out I can do and will let you know when done.\n. Fine by me, change committed.\nI've also put that change back on http://nauzilus.net/prism/download.html if you want to have a look (just make sure to clear cache).\n. Autolinker will only look for links in places they should reasonably exist, namely comments, urls (as in, the CSS url token), attribute values (markup) and strings (valid strings, according to the language).\nA URL simply entered in to bash isn't valid I don't believe (you'd get an error if you opened up bash, typed a URL and hit enter right?), so the syntax highlighter isn't looking for links there.\nIf you change your example to one of the following:\n```\nhttp://github.com/kinghrothgar/goblin-scripts\n```\nor\nfoo=\"http://github.com/kinghrothgar/goblin-scripts\"\nit should work (at least it did for me).\nOr change your language to markup, where links are expected to be floating around plainly.\n. Per the readme, \"the minified files are also generated automatically\", so we shouldn't need to update them ourselves, right?\n. Prism.js doesn't auto-detect the language to highlight, you need to tell it what the language is. Your current code is telling Prism to highlight as \"markup\", so it's probably not doing anything.\nYou need to tell Prism you're trying to highlight PHP (I'm assuming), so change\n    <code class=\"language-markup\">\nto\n    <code class=\"language-php\">\n. @moljac, is this what you were trying to achieve:\nMy branch: https://github.com/nauzilus/prism/tree/plugin-jsonp\nExample in action: http://nauzilus-prism.azurewebsites.net/plugins/jsonp-highlight/\nI've taken what I think you were trying to do and turned it in to a plugin. It doesn't touch Prism core, it's isolated and parses GitHub and Bitbucket JSONP APIs (for simple file gets anyway), and allows your own adapters for whatever JSONP API you need to use.\nI think it works pretty well, it this is something of use, I'll submit this as a PR.\n. For github, yeah it'll have the same result. But that plugin only works for CORS enabled sites, and you need to start manipulating request headers to get the raw content. Bitbucket for instance doesn't have CORS, so you must use JSONP, and then probably also mess with request headers specific to that host.\nThis plugin will work for any other JSONP API also (provided the user supplies an adapter to turn the JSONP response to the data string).\nSo similar, but different :)\n. Can you try again please @moljac? There's a bug with some browsers not handling the newlines in the string properly, so I've just removed that. I'd rather not have to include an entire module to accomplish what the browser should be able to do natively :)\nOut of curiosity, what browser version are you using? Works ok for me in Chrome 34 and Firefox 27, but not Safari 6 or FF 20.\n. Thanks @apfelbox, have merged latest from master.\nGlobally registering handlers could be useful, but will have to think about how. I don't want to pollute the global namespace with my own function/object, and don't really want to just tack a method onto Prism (e.g. Prism.registerAdapter(myfunc)). Maybe if there was something like the languages property for plugins, e.g. Prism.plugins.jsonphighlight.registerAdapter(myfunc), but I feel I'm overcomplicating things.\nWill have a think about it, otherwise do you have any recommendations?\n. Sorry for the tardiness, became lazy after moving city/changing jobs.\nHave updated documentation and now expect adapters to return null if they cannot parse a response.\nI have also created a Prism.plugins property for plugins to expose configuration/functions etc to. I still feel uneasy about changing prism-core, but haven't thought of a better way. If this change is not ideal, I'm more than happy to remove and just use the previous method of using data-adapter attribute (or a better suggestion).\nWorking example updated: http://nauzilus-prism.azurewebsites.net/plugins/jsonp-highlight/\n. highlightElement does some text \"massaging\" before it gets passed in to highlight, things like replacing < with &lt;, but not > with &gt;. The pattern matching for markup looks for a tag starting with &lt; but ending in >, so you've done \"too much\" encoding :)\nTry this:\nvar hw = '&lt;h1>Hello World&lt;/>';\nconsole.log(Prism.highlight(hw, Prism.languages.markup));\nNot a permanent solution, but at least a short term workaround for you.\nHaving said that, I wonder if this needs \"fixing\", assuming highlight is a function intended for internal use.\n. I think this can be closed now since #360 is merged.\n@dkanicki can you confirm this is fixed?\n. This is done automatically via the gulp build task: https://github.com/PrismJS/prism/blob/gh-pages/gulpfile.js#L52-L89\n. Bugger... that's my fault. I'll fix up and submit a PR.\nThe code will need to have at least scroll: auto. If scrolling is handled by the outer pre, the language will scroll out of view (which isn't necessarily a bad thing, but all other cod highlighters don't do that, and I think it looks better).\nBut unnecessary scrollbars suck, so needs to be fixed.\n. Actually I think the problem was always there =(\nAs  mentioned in #563, this is to keep the language (in the generated content) stick to the top right of the pre element regardless of scrolling. But that doesn't seem to be practical without breaking things.\nWhen I get home, I'll make a change to just put  the generated content on the pre,  and it'll just have to scroll, demonstrated here: http://nauzilus.net/show-lang-fix.html\n. Submitted #571\nExample: http://nauzilus-prism.azurewebsites.net/plugins/show-language\n. It looks like the leading --- is important. It highlights correctly with that included.\nI can't see to upload a screen shot, but you can probably test easily enough your self :smile: \n```\na:\n  version: a\n  modifierclass: active\n  state: checked\nb:\n  version: b\n  modifierclass: hidden\n``\n. Great thanks, will do! I'll close this off an submit two new PRs.\n. @StanBPublic The markup is fine, but Prism highlights by retrieving all elements to be highlighted (e.g. yourand) and then highlights them one by one. As all markup is stripped during highlighting, the secondno longer exists in the DOM thus has noparentwill end up asnull` (prism-core.js#L57), which later explodes when Prism tries to highlight it.\nThe plugin may restore nested tags after highlighting, but the DOM nodes Prism has already fetched will be stale.\nI don't have a solution, that's just what is happening :)\nThough, why would you have \"AND\" highlighted as markup inside of SQL? Doesn't that plugin allow you to use the <kbd> tag you wanted to use initially?\n. Have a look at this: http://jsfiddle.net/nauzilus/aek8udvr/1/\nNote the plugin Golmote linked to only works for simple tags (e.g. of the form <tag>...</tag>, class names or other attributes will stop it working).\nI had to do some hackery with adding the language-sql classes with JavaScript, because of the way Prism auto-highlights it was running before the plugin ran, and I can't use the data-manual trick on jsfiddle. So ignore that bit. If it's all bundled together in one file it should be fine.\nHope that helps otherwise :)\n. I've also noticed it doesn't highlight generics:\npublic void Foo() { Bar(); }\npublic void Foo<T>() { Bar<T>(); }\nThe method name and invocation will highlight on the first line, but not the second.\nI started to look into these a while ago but got busy :(\nI'll try and have a look again if I can get time (and it's not tended to in the meantime).\n. You're right :( I'll look at fixing this soon. What I'm thinking of doing will mean only the right hand side will have the shadow, so only the bottom right corner will appear to be lifting from the page when using show-language with coy theme. But that's probably an ok compromise.\nActually another PR I'm waiting on #650 would make this easier, since it allows plugins to have theme specific CSS, so I could target the fix just for coy theme :)\n. Was hoping to get #650 merged first then I'd fix this in the theme specific CSS, but #703 has been merged so this can be closed I should think.\n+@uranusjr \n. I think both the dev and minified version should have the mapping code injected so they're functionally the same.\nOne concern with just injecting via a gulp task is it would mean all languages are included in this plugin, even if you've only configured Prism with a couple of languages. So perhaps this should be incorporated into download.js so only what's needed can be included.\nThoughts?\n. Hrm that's a good point. download.js should really just be for ease of bundling together, not generating code on the fly.\nHaving a closer look, there are only 14 languages with titles different to their internal names (ignoring case, e.g. powershell doesn't need to be mapped to PowerShell), so that's not going to add much to the file size.\nGulp task should work fine, ideally I'd like both the dev and minified versions to include the mapping though. Time to learn more about gulp :smiley: \n. Wow that's great! Thanks @Golmote, that would have taken me a long time to figure out :+1: \n. I am starting to work on PowerShell tests, so if you haven't touched that one yet, happily skip over it :+1: \n. Have updated PR after incorporating feedback. Thanks so much for a thorough review! :+1: \n. FYI, I've created a simple gist to inject community themes on the Prism site. The bookmarklet is just a small loader for the actual script.js in the gist.\nIt works OK (although it doesn't handle long them names well :wink:), and of course it just affects the page you're on, so each time you load a new page you have to re-run the bookmarklet, but it might be useful to see how community themes look under various plugins or the test page for example.\n. Should this also work alongside with previewer-colour? It seems which ever comes first out of gradient and colour will take precedence:\n- Colour before gradient\n- Gradient before colour\nIt might just be one of those edge cases like strings inside comments that can't really be helped, just thought I'd bring it up :)\n. These are brilliant :+1: \n. Woah :(\nBison extends the language c, but Prism is loads bison first (since components.js is in alphabetical order), and the c grammar hasn't yet been defined, so fails to load anything after bison.\nI think crystal is also going to be a problem, because it loads ruby.\nI'm at work so can't fix this at the moment. I think Prism (specifically download.js) is going to need to be smarter about handling dependencies. To make sure they're loaded in an appropriate manner.\n@fladd: temporary workaround, uncheck bison and ruby.\n. Nice :+1: \nThis is the cause of #796, and also fixes the Crytsal dependency on Ruby.\n. Agree, good idea :)\nThe data-language attribute could be used to allow the user to specify a custom label, however could it live on the enclosing pre tag instead? That way code using the file highlight plugin can still specify an alternate language label.\nAs an side, the data-language attribute doesn't actually do anything anymore, since the label is now living inside a div. It could be removed entirely (the CSS would also need the attribute removed from the selector, and a couple of other bits and pieces), but that's probably out of scope for this PR.\n. > Would it impact any existing users to reuse the data-language attribute for a different purpose?\nNot that I can see. That attribute is only used internally by the plugin, and is currently assigned to without reading from it at all, so if a user has been specifying any value, it's has clobbered anyway.\n. I've created PR #840 to remove the data-language excess. If you want to pull that and apply your changes on top (or wait until it's merged, either way).\nPerhaps also update the index.html to demonstrate the new functionality behind data-language attribute? For example loading components.json (using JavaScript to highlight) and set the language to show JSON.\n. Nope, no reason, it was already there from earlier commit; I just rearranged the code and didn't notice it :( I shall fix later this evening.\n. As far as I could tell, distro.size wasn't actually used anywhere.\n. Missing a comma here\n. Ah yes, you're right :(\nUsing /'([^']|'')*'/ seems to handle escaping (and empty '' string) ok. If that's fine, I'll commit.\n. ",
    "remy": "No, it's related to the machine coming out of sleep. I'm petty certain\nBart's test was rudimental, but I'd also sat this is a chrome bug, not\nprism.\nAnd suspect it's triggered by something in prism (combined with a\nparticular environment).\nOn 21 Apr 2014 11:50, \"Bart Veneman\" notifications@github.com wrote:\n\nTried this with MacOSX 10.9.2, Chrome 34.0.1847.116 but not able to\nreproduce.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/LeaVerou/prism/issues/202#issuecomment-40928609\n.\n. I don't - but in retrospect, this (was?) a chrome bug rather than prism.\nDefinitely think you van close this.\n\n\u2013 Remy\nOn 29 Jul 2014 08:56, \"Jannik Zschiesche\" notifications@github.com wrote:\n\n@remy https://github.com/remy do you still encounter this issue?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/LeaVerou/prism/issues/202#issuecomment-50446219.\n. \n",
    "mahnunchik": "Bug was unnecessary scrollbars.\n. @loganfranken yep :+1: \n. ",
    "japborst": "@LeaVerou @apfelbox sorry, will do.\n. See pull 316 for new rebased version\n. @apfelbox sorry, holiday didn't do me any good it seems ;)\n. Thanks for the suggestions!\nI merged that into the files now. Ran it just now on some massive files we used for our graduation project and everything seemed to be highlighted just fine. \n. Awesome. Thanks both :)\n. From what I can see in your comments and code, it looks pretty awesome!\nHowever, I have some issues highlighting things. Created a test post. Seems lot of the \\function aren't highlighted. Or was this intended?\nEdit: @zeitgeist87 Sorry btw for my late reply, been away for couple of days\n. Ah of course! Used an older version of the default theme and altered it, might need to do some again it seems ;-) \nBut I agree, lot's of green indeed. Will do some CSS adaptations and see how it looks then\n. ",
    "andreicek": "Take a look at this @moljac\n. ",
    "moljac": "@ahluntang: \nHi.\nThis is only if the code is hosted on github right? I mean if I have it on my server then this is CORS (cross origin resource sharing) and XHR will fail. We have pre alpha extension where we use JSON-P protools for github and bitbucket, so we can do CORS requests.\nOr am I missunderstanding something?\ncheers\nmoljac\n. Hi Lea\nFirst my apologies because I was too brief and then thanks for Your work on prism.js and patience with us.\nOK. The details:\nActually I'm not versed in javascript (being mostly c# full stack developer mostly Xamarin), but am working on learning it. I have bunch of howtos and tutorials waiting to be published in html and would like to get the code from sites like github or bitbucket.\nCurrent prism.js works \n1.  there is no cross origin requests (for example hosting html on my site and getting source code from public repos on github or bitbucket)\n2.  if the code is served from server\nSo my pull request solves problem #1 (for github) with CORS and JSON-P github API.\nI\\m not sure if this would be plugin or what. It is not (for sure) \"improvement of the website\" and it is not (again for sure) \"new language\" it is merely XHR and data-src extension.\nThe easiest way would be to add HTTP headers on my git servers:\nAccess-Control-Allow-Origin: *\nBut I wanted to make this for github and other.\nMerely (in cors-jsonp-holisticware.html geting code sample for Android layout Main.axml within my public repo on github)\n<pre\n     data-src=\"https://api.github.com/repos/moljac/Xamarin.Component.Template/contents/AndroidApplication1/Resources/Layout/Main.axml?callback=parse_jsonp_response\"\n    data-src-lines=\"2-30,37,40\"\n     >\n     pre github\n </pre>\ndata-src-lines was not part of this pull request, because I'd like to polish it more. It will grab only certain lines from the file\nThanks for base64 info -  I was not aware of that. This will be removed.\nAbout 450+ SLOC (!)\n1.  index.html added link to new cors-jsonp-holisticware.html file where users can see getting source from github with CORS XHR and JSONP\n2. prism.js - lines 555-578 intercepting JSONP responses (and File API planned) before handing it over to Prism.highlightElement(code) \n3.  cors-jsonp-holisticware-prism.max.js - JSONP handling and response parsing\n4.  base64.max.js -  can be removed\nFurther plans:\nI do my presentations about Xamarin with reveal.js and host it on my website, but for the emergency I have local copy on filesystem in the case there is no internet access. In that case prism.js will not be able to load source let say from disk with FileAPI.\nI hope I could clarify this a bit more.\nFeel free to hit me with requests, critics and questions.\nthanks again\nregards\nMel\n. @nauzilus Wow great! This is what I need (and not only myself).Thanks. Cant wait to try it.\n@LeaVerou : Regarding #208. This is not the same. It will work for html code hosted on github, but not generally. I have started it that way, but failed. Then I contacted github and bitbucket support and they pointed to jsonp. Of course they were not willing to change Access-Control-Allow-Origin header - of course.\nLea I think @nauzilus plugin is really cool feature and I would suggest to add it to prism.js.\nthanks and best regards\nMel\n. @nauzilus Did You see that github request crashes in atob() function call? The exception is \nUncaught InvalidCharacterError: 'atob' failed: The string to be decoded is not correctly encoded.\nhttp://nauzilus-prism.azurewebsites.net/#examples\nFriend of mine that tested code I wrote told me about atob() (I was not aware of that API), but I did not use, because I implemented it with base64.js code I found.\n. It works now with this newline fix.\nI have several Windows boxes for testing and a Mac. Each box has 3 Chrome browsers, Firefox, Safari and IE (if windows).\nThis one was Windows box with \nChrome Version 31.0.1650.63 m\nChrome Canary Version 34.0.1766.0 canary\nChromium Version 30.0.1599.0 (217174)\nand I experienced problems with Chrome v.31\nregards\n. ",
    "PragTob": "My bad, I used jQuery .empty() instead of .remove() which had the result described above. Remove works.\nThanks for your quick answer!\n. ",
    "idleberg": "If there's anything to make it easier for you to test this, please let me know if I can be of any support (maybe example code)\n. Faster than light. Thank you, Lea!\n. Thanks for your patience, I hope everything is in order\n. Updated the test. Since I'm not aware of a real-life example, ${^EXAMPLE} is made up - but it's perfectly valid code.\n. I forgot I already submitted a PR for this -> #1035 \ud83d\ude05\n. I don't see which commit (prior to b490d6a29611be3e4a50102e85aced75bda50968) removed any ?:. You were right, my fork was not up-to-date. Closing in favour of #1288. > Can you please remove yarn.lock from this PR\nWhoops, sorry about that. These keywords need to be first on a line and can't be preceeded by anything but whitespace\n. Sure, will add them in the morning\n. I've added the m flag as suggested. I also tried using lookbehind, but I don't see any difference in the result. Also, the test still fails and I have no idea how to fix it.\n. ",
    "kinghrothgar": "Thanks for the quick reply.  That's was indeed my problem.\n. ",
    "kajrietberg": "Hi Lea,\nIt makes it longer, but I believe it is a type error, because\nprism-style.css brings in an max-height of 29 em. By making the code areas\nwith the inline css 30 em it is ok. Or the prism-style should be changed to\n19 em, but then we change the program. Now we change the theme.\nCheers,\nKaj\nOp donderdag 6 maart 2014 heeft Lea Verou notifications@github.com het\nvolgende geschreven:\n\nHi, thanks! Doesn't this make the code areas longer however? It looks a\nbit like a solution that treats the symptom instead of the cause. i.e., if\nthe theme has a problem, it will still be present, even if the Download\npage doesn't expose it.\n\nReply to this email directly or view it on GitHubhttps://github.com/LeaVerou/prism/pull/223#issuecomment-36917910\n.\n\n\n\nSpeel, leer en werk op het web\nhttp://www.kajrietberg.nl\nKaj Rietberg\n[e]  kaj@kajrietberg.nl\n[m] 06-11955688\nBTW: 194488998B01\nKVK: 011401460\n. ",
    "ags131": "Sorry for the trouble, while trying to create a quick demo I noticed I was replacing line endings with  tags, adjusting that to preserve the line endings while still inserting  the formatting worked as expected.\n. ",
    "toytonics": "Hey. It's been 3 years now. Is there support for x86 assembly (at least) planned?. ",
    "lgiraudel": "I don't know for the m flag because some regexp have to match a single line in git output. The string regexp could use the flag but this regexp is just a c/p from another language (components/prism-javascript.js I think).\nNo problem for conflict resolution. I will add some comments too.\n. Ok, I changed most (all ?) regexp to use the m flag.\n. I don't know which alias should be useful in the Git-language case. I already use string and comment token names.\nMaybe the others tokens are too specific to use aliases.\n. Sorry for the mix tab / spaces.\nI'm going to create a PR for .token-inserted and .token-removed, it's a good idea.\n. Good point.\nI wanted to avoid to match the lines starting with --- or +++ but I missed your usecase.\nPR incoming.\n. Indeed, I'm not used to the negative lookahead, the regexp is easier to read know.\nThanks =)\n. Yeah. I think one of the deleted colors is nearly pink (can't remember which theme), maybe it can be tweaked too.\n. I didn't had any git-specific token in the themes like commit_sha1, command (even if it's also relevant in Bash language) or coord.\nShould I create a separate Git CSS ? Or the themes should contain all tokens of all languages ?\n. I understood the principle of aliases but it sounds weird to me to use an alias just for a matter of color. I'm fine with aliasing \"git comment\" by \"comment\" but what should be the alias of \"git sha1\" or \"git diff coordinates\" ?\n. Ok, then I'll add an alias for each token.\nIs this ok to update example.html to add some examples for each language (git in my case) ?\n. Maybe we should have a common stylesheet for each theme and a language-specific stylesheet (for each theme too). It's the JS approach, it seems relevant to have the same thing for CSS.\nA negative point is the obligation to repeat colors in the language-specific CSS. A CSS pre-processor should avoid that but it's heavy for color variables.\n. By \"heavy\" I mean that a Prism user shouldn't have to install a Less or Sass environment to generate code highlighting CSS : the CSS should be contained in Prism sources.\n. Fixed in the PR adding some jasmine tests #355 (not yet merged).\nThis said, I'm gonna check all examples in your awesome article, may be it will highlight some weird behaviors (strings in deleted / inserted lines for example).\n. Hi,\nIt's in my todo list to check it  but I won't be able to merge it in master.\n. Ok, I'll check the two commits today then.\n. I don't know if in most console the filenames in git diff are in red and green but in the one I used as reference (bash console in ubuntu), the filenames are in white bold.\nBut we can apply the green / red color, it's not illogical...\n. I don't know if this issue is still relevant or not, but what about passing the code to highlight as an attribute of the code tag ?\nSomething like this:\n<pre><code class=\"language-css\" data-highlight=\"L2\">\np {\n  color: red\n}\n</code></pre>\nAnd we can think about more complex syntax in this attribute, like lines range, column position, column range, multiple ranges, etc.\n. Yep, the {1} is totally useless, my bad =)\nThose 2 regexp match the diff lines in a git diffcommand. The [^-\\n] is required to not match the ---file.txt part and to stop at the end of the line.\n$ git diff\ndiff --git file.txt file.txt\nindex 6214953..1d54a52 100644\n--- file.txt\n+++ file.txt\n@@ -1 +1,2 @@\n-Here's my tetx file\n+Here's my text file\n+And this is the second line\n. ",
    "jeroenvisser101": "@LeaVerou, @apfelbox is right, I haven't got to minifying the script itself.\n. I haven't seen that yet, but if it states that it is, I guess it's alright by now?\n. ",
    "shaekuronen": "Thanks Lea, really appreciate the work you've put into this project!  Yeah, that Flexslider markup isn't production.  The actual version is lazyload + picturefill, so it's a hot mess...  I might try optimizing Flexslider using bg images next, though solution has to work w/ cms user uploaded content, so not sure how the templating would work.  Maybe inline styles in the template?\nAnyways, for anyone else looking syntax highlight HTML, just need to encode.  I used htmlentities.net/, worked great! \n. ",
    "ghost": "I'd like to give this a bump and offer to help, if necessary. Just had to go through diagnosing what was wrong with bower install prism not realizing bower install prism#gh-pages was required as the repo only has a gh-pages branch.\nTo get things a little more sane, the first thing you might want to do is just create a master branch and pull the current contents of gh-pages into it. After that, if the contents need to diverge (they probably should), let them. More importantly, though, I think it would help adoption if you just created the master branch and pulled the current gh-pages into it.\n. Wouldn't you, instead, prefer to cut your downloads off master instead of\nusing gh-pages? Master is conventionally a release branch. You're cutting\nyour releases out of an odd branch, which is why there is so much tool\nconfusion.\nOn Jul 13, 2014 3:25 PM, \"Lea Verou\" notifications@github.com wrote:\n\nHi Rob,\nThanks for offering to help. I don\u2019t mind making the change, but I want\nsomething that won't add unnecessary future overhead for contributors. The\nPrism website currently has a downloader that needs access to all\ncomponents to build the download. Therefore, the only way I see this\nworking is if I can somehow point the master branch to be a subfolder of\nthe website that updates automatically every time I commit to gh-pages.\nThemes and plugins though are on separate folders, so it gets more\ncomplicated. I really, really don't want to have to manually sync master\nand gh-pages after every single change though.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/LeaVerou/prism/issues/231#issuecomment-48849710.\n. A Gruntfile isn't really necessary, but would be great.\n\nI may just fork this project and get it done. If Lea takes a pull back,\nthat'd be great. I can delete my fork. But, I want/need a Prism that\nintegrates into other things instead of always needing to be a manual\nintegration after visiting a web page to download a \"build\" that happens on\nthat server, then manually add to my local git and need to repeat the\nprocess any time there's an update to Prism. Hassles.\nI'd really rather integrate Prism as a Bower component, NPM module or even\na gem or whatever so that forward maintenance is automatic as updates\noccur. I know it seems pretty trivial - it's not that big of a library,\netc. But, time spent on maintenance that is avoidable is wasted time. And,\nwith a little more work in this repo, that maintenance can be automatic.\nLea, you have two people now willing to jump in and help. Would you prefer\nme/us to fork Prism and send you a pull request once we create a master\nbranch and integrate your build process in a way that also works for\nintegration systems?\n-Rob\nOn Mon, Jul 14, 2014 at 2:43 AM, Kaiser notifications@github.com wrote:\n\nAs I'm still subscribed to that ticket: A lot of tools (like package\nmanagers) are highly confused if there is no master branch.\nAlso: If you add a Gruntfile.js and explain your build process, people\n(like me) might jump in and help pulling off some automation :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/LeaVerou/prism/issues/231#issuecomment-48869752.\n. Forked. Thanks, Lea. I tried.\nOn Jul 16, 2014 8:45 AM, \"Lea Verou\" notifications@github.com wrote:\nWell, that\u2019s exactly what I don\u2019t want to end up having to do. Keeping two\nthings in sync manually is recipe for disaster.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/LeaVerou/prism/issues/231#issuecomment-49159656.\n. I was just looking at the /components/prism-php.js\n\nThe comment pattern gets run all at once: (lines 17 thru 20)\n'comment': {\n        pattern: /(^|[^\\\\])(\\/\\*[\\w\\W]*?\\*\\/|(^|[^:])(\\/\\/|#).*?(\\r?\\n|$))/g,\n        lookbehind: true\n    }\nThis is the particular capture group causing the issue: (\\/\\/|#).*?\nWe are using prism for an internal knowledge-sharing library at my job, so we simply changed that to remove the OR and hash, resulting in (\\/\\/).*?. (which if I understand correctly looks for two literal forward slashes, then any number of characters.)\nI don't know much about prism.js, but where would this pattern get moved to match after the string matching pattern has run?\n. You can find more infos here https://github.com/PrismJS/prism/blob/gh-pages/components/prism-git.js\n. Yes you are right, I moved it to the existing rule\n\n. @LeaVerou and @Golmote Yes. No matter how it is implemented, what I was looking for was the same, that can be translated or written in the language that the user decides.. @Golmote sure you can find the example on my website: https://hapeki.com/protocol-oriented-programming/. ",
    "iliakan": "Not yet, right? :)\n. ",
    "themightychris": "I created a pull request for this at #245 \n. ",
    "ryon": "Maybe flag? That is accurate for both !optional and !default, and doesn't sound as generic as statement.\n. ",
    "oliverschneider": "I have the same problem, your suggested solution seems not to work.\n. Solution: \n'string': /\"\"\"[\\s\\S\\r\\n]+?\"\"\"|(\"|')(\\\\?.)*?\\1/g,\nThank you, @LeaVerou. @mattprice: Your solution doesn't work with single line strings (they would no longer work)\n. Thank you for your comments. If I change line 10 as suggested by @uranusjr it doesn't change anything. If I add the characters to line 7, the syntax gets highlighted but the highlighter thinks that after the Umlaut the attr-name starts (see the picture below). Can I address that?\nLine 7 now looks like this:\npattern:/&lt;\\/?[\\w\\u00c4\\u00d6\\u00dc\\u00e4\\u00f6\\u00fc:-]+\\s*(?:\\s+[\\w\\u00c4\\u00d6\\u00dc\\u00e4\\u00f6\\u00fc:-]+(?:=(?:(\"|')(\\\\?[\\w\\W])*?\\1|[^\\s'\">=]+))?\\s*)*\\/?>/gi,\n\n. So, I used @apfelbox' solution and came up with this (masked < with &lt;), which seems to work pretty great:\n``` javascript\nPrism.languages.markup = {\n    'comment': /<!--[\\w\\W]?-->/g,\n    'prolog':/<\\?.+?\\?>/,\n    'doctype': /<!DOCTYPE.+?>/,\n    'cdata': /<![CDATA[[\\w\\W]?]]>/i,\n    'tag': {\n        pattern: /<\\/?[^\\s>\\/]+\\s(?:\\s+[\\w:-]+(?:=(?:(\"|')(\\?[\\w\\W])?\\1|[^\\s'\">=]+))?\\s)\\/?>/i,\n        inside: {\n            'tag': {\n                pattern: /^<\\/?[^\\s&>\\/]+/i,\n                inside: {\n                    'punctuation': /^<\\/?/,\n                    'namespace': /^[\\w-]+?:/\n                }\n            },\n            'attr-value': {\n                pattern: /=(?:('|\")[\\w\\W]*?(\\1)|[^\\s>]+)/i,\n                inside: {\n                    'punctuation': /=|>|\"/\n                }\n            },\n            'punctuation': /\\/?>/,\n            'attr-name': {\n                pattern: /[\\w:-]+/,\n                inside: {\n                    'namespace': /^[\\w-]+?:/\n                }\n            }\n    }\n},\n'entity': /&#?[\\da-z]{1,8};/i\n\n};\n```\n. ",
    "ravinggenius": "I was surprised at this behavior. I believe the proper place place to escape HTML entities would likely be in Token.stringify, not a pre-parse step. Pros and cons are on both sides:\n- pre-escaping code pros\n  - established convention - established code doesn't have to be fixed\n  - potentially far fewer calls to String.prototype.replace\n- pre-escaping code cons\n  - confusing, unexpected behavior - I had to dive into the code to find where my extra ; was coming from and was much perplexed when I found the pre-escaping code.\n  - all grammars have to deal with arbitrary escaping rules, which should not be part of a grammar's business logic\n  - unlimited number of languages have to provide work-arounds\n  - work-arounds (for instance in the markup grammar) lead to special cases that shouldn't be present and are awkward to read\n- Token.stringify escaping pros\n  - arguably the most correct place\n  - single place for escaping\n  - offload special escaping knowledge from all grammars\n- Token.stringify escaping cons\n  - refactor potentially required for existing code\nI vote for moving the escaping into Token.stringify, but I may have missed something. Pre-escaping is affecting my grammar (#254), for what that's worth.\n. I'm willing to help/start/do this refactor. To avoid waisting my time though, I'd like some interest expressed by the maintainers first.\nThoughts?\n. I'll take a crack at this over the weekend and see where I get.\n. Submitted merge request #258.\n. @Snugug\nI just refactored Prism.highlight to do HTML encoding after tokenizing the input text. What this means is that you should not have to escape anything before calling.\njavascript\nvar hw = '<h1>Hello World</h1>';\nconsole.log(Prism.highlight(hw, Prism.languages.markup));\n// <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>h1</span><span class=\"token punctuation\" >></span></span>Hello World<span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;/</span>h1</span><span class=\"token punctuation\" >></span></span>\n. I commented on #250 with some more thoughts on where escaping should happen.\n. I'll fix markup.\n. Some grammars (markup, css, clike, javascript) are defined in prism.js and components/prism-*.js. Where should I make changes?\n. If prism.js is generated, did I make changes to the wrong file? I should have changed components/prism-core.js, I think.\n. I moved the changes into the correct file and force-pushed my branch.\nNow I have some questions:\n1. What does the build process look like? I haven't been able to find code that does that, and I'd like to see exactly what happens. Plus it would be nice to know which files are source and which are build artifacts.\n2. How have you been testing up to this point? I've been pointing a static server at the directory and opening up /test.html. However /test.html is pointing to build files (prism.js et cetera). Is there a way to point it to components/prism-core.js instead (other than editing test.html directly)?\n. While working of the markup grammar, I realized that my initial approach to fixing this was a bit naive. I've updated my commits and took a crack at fixing the clike and markup grammars. If everything looks good to you, I think this one is ready to merge.\nLet me know if I missed anything.\n. http://www.rip-lang.org/\nPlease don't judge the website too harshly. It's slightly outdated/in progress, and I'm not much of a designer.\n. ",
    "catamphetamine": "My variant of a React wrapper:\njs\nfunction Highlight({ lang, children }) {\n  return (\n    <pre className={`language-${lang}`}>\n      <code dangerouslySetInnerHTML={{__html: Prism.highlight(children.trim(), Prism.languages[lang], lang)}}/>\n    </pre>\n  )\n}\njs\n<Highlight lang=\"jsx\">{`\n<PageAndMenu>\n  <CollapsibleMenu>\n    <div>Item 1</div>\n    <div>Item 2</div>\n  </CollapsibleMenu>\n  <Page>\n    <MenuButton />\n    Page content\n  </Page>\n</PageAndMenu>\n`}</Highlight>. ",
    "iamvdo": "Same question!\nI'm using prism from npm (targeting the gh-pages branch) but all new commits break old code! I have to specify a specific commit in my package.json :/ Not using semantic version is really disappointed.\n. ",
    "jsmreese": "+1\nI periodically download the latest version (under the assumption that it must have a few useful improvements) but I have no idea what version I was using or what's changed in the interim.\nPublishing a package or just simply tagging release versions would fix that!\nEven something as simple as incrementing the last version point value would really help, and would orient me in the project: I have version 0.0.24 and version 0.0.43 was just published...\n. ",
    "guybedford": "Thanks I searched for \"tag\" and didn't see anything. Closing this.\n. ",
    "ben-eb": "@LeaVerou As @apfelbox says you don't need a working knowledge of Node to use this, you just need Node installed, then you can pull down the dependencies using npm install. Installing node is very straightforward, and the watch task is set up so that you can just work on the relevant part of the codebase with the minified files generated automatically.\nI think so long as the workflow for contributing to Prism is properly documented, it won't be a problem for people who want to contribute to the project, even if they have zero Node experience. I'd hope that having something like this would encourage people to learn more about it. :-)\n. That's correct, yes. Well it's your decision Lea so I'll leave it with you, but if you have any further questions then let me know. :-)\n. @apfelbox See above. I just merged gh-pages and ran the build again, seemed like there was only conflicts in 'built' files.\n. You're very welcome. :smile: \n. ",
    "chesstrian": "Thanks Lea, it works great. :smile: \n. ",
    "JohnHeitmann": "\na) There are 9 lines of comment for 2 lines of code. I think this long description belongs in the extended description of the commit message, not cluttering the code.\n\nAgreed, I\u2019ll cut it.\n\nb) Not sure what this is trying to achieve. AFAIK self is defined anywhere window is, and in web workers window isn\u2019t defined but self is, so I\u2019ve used that for any code that executes in both contexts. Perhaps I\u2019m missing the point as I\u2019m not aware of the kinds of polyfills you mention, could you provide an example?\n\nWe run prism and several other libraries concatenated together in our web worker. At the head of the concatenation is a window polyfill that looks, roughly, like this (safety checks and other ceremony removed for clarity):\njavascript\nvar window = self;\nwindow.console = { log: \u2026 };\nwindow.document = { \u2026 };\nThat polyfill lets us run other JavaScript libraries that haven't been designed for web workers.\nPrism runs afterwards with this initialization:\njavascript\nvar self = (typeof window !== 'undefined') ? window : {};\nWith our polyfill in place window is not undefined, so the code is in effect var self = window, which is var self = self.\nThat works fine in Chrome and Safari, but FireFox (29 and 30 at least) has trouble with it. FireFox won\u2019t complain at the self-assignment line, but instead will die at the first use of self afterwards with TypeError: self is undefined.\nI don\u2019t know what the expected browser behavior here is; this might simply be an undefined area.\n. Sorry for the slow response (and thanks for your fast responses!). I think I confused matters by bringing up document. That part of the constellation of polyfills might also need some tweaking, but the specific global causing us trouble is self. When our polyfills combine with Prism's module setup, then the expression browsers run is self = self, which on FireFox results in self being undefined.\nIf I'm reading between the lines right you might be pushing back because this is slapping a patch on top of a patch. I'll see if there's a better way to structure the module scaffolding in order to avoid this conflict dance in the first place. I'd also like to understand the browser behavior here-- I'm not sure why this simple-ish code works differently across browsers.\nClosing for now since I need some time to get familiar with NodeJS, and the followup will probably look a lot different than this.\n. ",
    "Harshdand": "I have created a small example http://jsfiddle.net/harshdand/cNbX2/\n   The problem seems to be in this line\njavascript\nvar lineHeight = parseFloat(getComputedStyle(pre).lineHeight);\nin highlightLines function\njavascript\ngetComputedStyle(pre).lineHeight\ngives a string 'normal' in chrome not a number\nso lineHeight is getting NAN.\n. If i add \n``` css\nline-height: 1em;\nto\ncode[class=\"language-\"],\npre[class=\"language-\"] {\n}\n```\nselector its working fine for me\nin prism.css\n. ",
    "zenorocha": "+1 for clipboard.js ;)\n. ",
    "natecook1000": "Will do! There have been some minor changes to Swift syntax since this request, so I'll get those in as well. Thanks!\n. Okay, this is ready for merging -- it incorporates the changes to Swift up through beta 5.\n. ",
    "ChrisChares": "Hey sorry if I held things up!  I completely missed the first mention.  @natecook1000 's pull request looks like a major improvement over my initial work.\n. ",
    "huyinghuan": "I got it.\nthe hightlight function have not call after-hightlight ,just call wrap.\nI add some code for solve it.\nhttps://github.com/huyinghuan/prism/commit/fca2f2a8dc011ea9caaf43688973975b6d4bf7f1\nI know them are not good code,but i don't have second thoughts. can you give me some cool code? Thank you ! \n. @LeaVerou  jsfiddle   http://jsfiddle.net/4923x/4/\nNow is 2 o 'clock in the morning, I went to rest. Come back after a few hours.  Thank you!\n. http://plnkr.co/edit/I6HhQI8Kc75PVOc23U23?p=preview\n. ",
    "thadin": "This doesn't seem like a bug to me, after-highlight is only called when using highlightElement, which makes sense because most after-highlight hooks use the element in the enviroment argument.\nThe solution for @huyinghuan would be to set the text / html in the element and call highlightAll / highlightElement after that.\n. ",
    "TheCrambler": "No problem, thanks Lea! \n. ",
    "geoffreymcgill": "The following Copy to Clipboard sample should be helpful to anyone wanting to implement this functionality within their Prism code sample.\nhttps://gist.github.com/geoffreymcgill/d118939d1d358d2ed5e8\nThis sample is adapted from a sample originally posted by Philip Lawrence.\nHope this helps.\n. ",
    "santo007": "@Golmote @mAAdhaTTah @vkbansal Get the plugin from the public repository i have created Prism-toolbar\n. ",
    "aviaryan": "\nAdded Ini highlighting \n. @apfelbox OK, done !\n. > Minified versions would be nice, but I can generate them.\n\nI thought \"The minified files are also generated automatically\". \n\nMost importantly, PLEASE DON'T INCLUDE MULTIPLE CHANGES IN ONE PULL REQUEST.\n\nMy ignorance. Actually I was not sure that updating my gh-pages branch after creating the pull request will update the request itself. :-;\n. It seems to me that http://prismjs.com/download.html is not loading properly because min.js versions for swift, objective-c, autohotkey and ini don't exist. Thus the js seems to hang when calculating sizes of the\n files. \n. So I had a look at the markup syntax and there were some problems. I have fixed it now. \nHere's the demo\nSome issues\n- The CSS syntax doesn't highlight the strings (like \"language-\" in the demo). It is a problem in css.js itself. Maybe re-ordering the regex'es in the javascript file will fix it. Corresponding gist\n- Highlighting of JS and CSS inside HTML doesn't happen. Maybe it's because I am using individual js files instead of a pack.\n- I had not highlighted the value in ini files. I will add a attr-value token to them and send you a pull request #294. Corresponding gist\nGist HTML\n. Larger preview of Javascript and CSS highlighting\n. @LeaVerou Should I change the theme's name to something else? I see that as this theme fails to copy  github colors exactly for all the languages, it should not use the name. I am thinking of GHColors or GHLike or Light. What you suggest ?\n. > Github syntax highlighting isn\u2019t particularly good looking.\nFew people do like it.\n\nI\u2019m thinking we should have a separate repository for semi-official themes and only feature the best ones on the actual Prism website.\n\nThat would be plausible. Something like the highlight.js test page will look nice. \n. An extra repo (like prism-themes) will be nice.\n. @Golmote Thanks. I will look forward to it.\n. Second commits fixes a bug where spaced key was not highlighted\nkey = this was not highlighted\nkey= this was highlighted\n. I have used SyntaxHighlighter in the past which doesn't have this problem. It would be a good idea to look at its core.\n. Maybe this can be solved by using lookbehind and then looking for even number of quotes (\") before the comment character.  I am trying this for AutoHotkey, doesn't work currently..\n'comment': {\n        pattern: /((\"[^\"]*\"[^\"]*)*)(\\s;[^\\n]*|^\\s*\\/\\*[\\s\\S]*\\s*\\*\\/)/gm,\n        lookbehind: true\n    },\n. It works now :-)\n(^[^\"]*(\"[^\"]*\"[^\"]*)*)\n(\"[^\"]*\"[^\"]*)* was not sufficient as it easily matched 0 matches because of the last * . Adding the extra, independent ^[^\"]* forces it to match something from the start of the string and thus fail in case even number of quotes (\") are not available.\n. > Well, I will try to look at the way SyntaxHighlighter has implemented it (by transforming the content in a \"sort-of-AST\" and optimizing it). I have the hopes up that this could be implementable without much effort and complication.\nThat would be the best. Currently I feel that PrismJS locks the string which is highlighted once and then prevents it from matching successive tokens. Thus results are not what you expect. \nA problem that I am stuck with in the last few days is purely because of this fact. I am in need to highlight the first word of the first line of code.\nhighlight not_highlight no no no\nI can't find a way to highlight only the highlight word and leave the rest untouched. Using ^ to match the start of code matches not_highlight once highlight has been highlighted and this process continues. BTW, is there a google group/forum to discuss such things.. \n. > That's a pretty heavy performance impact - and what is pretty ugly: it depends on the length of the input (so it might get even worse).\nI use a large 1600 lined code for testing my prism definition for autohotkey language. Before implementing the fix for this issue, it took about 4 seconds to load on my computer and now too takes almost 4 seconds. I know this is not precise, and so I tried to use regex101.com to measure the performance impact but I can't find where they display number of \"STEPS\". \n. Thanks @apfelbox \ni tried the old and new pattern (see pull request) on this code\nautohotkey\nmsgbox % \";str\" \" /*str\"\" \" ;comment\nmsgbox % \"Loading ;str\" \"\" ;comment\nOld - (38|65|4) - http://regex101.com/r/nY6iY0/1\nNew - (87|85|3) - http://regex101.com/r/sZ2yU2/3\nNew when compared to Old - 163%\nUpdated\nNew - (76|73|3) - http://regex101.com/r/sZ2yU2/4  - 142%\nUpdated\nNew - (51|49|3) - http://regex101.com/r/sZ2yU2/5  -  97% :+1: :100:\n. > PS2: we still need to fix the global lookbehind issue.\nWhat is it ?\n. I have used the m modifier combined with anchor ^ and in AHK and this helps in not matching the whole input everytime. As I see, you don't use m in clike. Does C syntax doesn't allow that ? \nUpdate\nYou should also try using [^\"\\n] in place of [^\"] to prevent taking additional lines into account.\nUpdate\n[^something]* is pure disaster, it matches everything including \\n\n. > [^\"\\n] will fail for multiline strings.\nOh sorry. Multi-line strings are not there in AutoHotkey. I should have appended \"in case C syntax allows that\".\n\nthe current architecture of prism only matches parts of the string. So the part on which the regex matches is not always the complete input up to this point. You just can't reliably count the number of quotes up to this point then.\n\nWhat if I keep the comments regex right at the top.Then the whole of haystack will be available as input. \n. Closing pull request, will reopen it after adding more optimizations.\n. OK Done. Please merge it\n. @apfelbox Oops! Not sure how I missed it. I had used the ungreedy operator earlier but deleted it when things were not working.. \nI added the non-greedy operator at needed places and tested it now. It works even better than the current version distributed with Prism. See the autohotkey steps test report I wrote at https://github.com/LeaVerou/prism/issues/307 . \nI have tested it extensively, it hasn't failed yet. \nI think it's suitable for merging, it will not have any issues.. Why would it ?\n. @LeaVerou Why is this PR not merged ? This stops me from updating the syntax further.\n. @LeaVerou Sorry. I haven't been in touch with the Prism codebase lately. I found the commit which has the change. https://github.com/PrismJS/prism/commit/706774950563df643dc39fb51601dba38b0f8dc9 \nAs far as I think, I may have added the important class because attr-value would also match section names like [section=name=with=equals]. I am not sure if this is an issue now or not. I will check and reply back. Rest assured, I will remove the important token in whatever way possible. \n. Opened PR #1047\n. ",
    "bholst": "Hi,\nI removed the escaped entities from the language definitions. Additionally, I fixed a bug regarding the handling of the character '.', which was wrongly highlighted as an operator in every case (even if it was just the separator between a module name and another name.\nThanks for your work. It helps me a lot!\n. Hi,\nno problem. The /ignore/ token was unneccassary, so I removed it completely.\n. Thank for the feedback. It should be supported now. I also corrected the support for strings and characters while characters are tokenized as a different token.\n. ",
    "krman009": "You should close it because it's already opened @ #188 ..\n. I'll try to improve as I can.\n. ",
    "brandonkelly": "Certainly. And thank you so much for Prism! I had first tried to do the same thing using Rainbow.js and found it pretty much impossible to get right, due to a very confusing and limiting language definition syntax. Then I found Prism, and was delighted to find your syntax both straight forward and much more powerful (due to nested patterns and your lookbehind trick). Great work!\n. ",
    "WebReflection": "chiming in with a proof of concept that I've no idea if is worth exploring.\nBasically, it removes strings, highlight the content, then it puts strings back.\n``` js\nfunction safeHighlight(content, highgligh) {\n  var\n    uniqueID = '@no\\x01shenanigans@',\n    restore = new RegExp('([\"\\'])' + uniqueID + '(.+?)\\1', 'g'),\n    str = []\n  ;\n  function pre(content) {\n    return content.replace(\n      /([\"'])(?:(?=(\\?))\\2.)*?\\1/g,\n      ($0, $1) => $1 + uniqueID + (str.push($0.slice(1, -1)) - 1) + $1\n    );\n  }\n  function post(content) {\n    return content.replace(\n      restore,\n      ($0, $1, $2) => $1 + str[$2] + $1\n    );\n  }\n  return post(highgligh(pre(content)));\n}\nvar content = 'var str = \"hello/**/world//!\";';\n// use prism or the actual highlighter instead of String\nsafeHighlight(content, String);\n```\nI haven't done many benchmarks but it seems like a simple/safe solution for strings in comments and/or in code: it will put them back in their context, if that was highlighted, strings will result highlighted too.\nBest Regards\n[edit] it might be worth using a unique token to avoid conflicts with generated html so that any <span atribute=\"23\"> won't be injected by the replacer\n[edit 2] I've updated the code with the better placeholder\n. well, the general purpose solution is what you call the hack:\n- find all strings and put a string placeholder\n- parse everything without problems and ignoring all strings content\n- put strings content back using the placeholder\nA char-by-char parser wouldn't have this problem because it would know it's inside a string ... my work-around does exactly the same making the \"inside a string\" a no-brainer for the parser.\nI could write a more robust example with a better placeholder but I honestly don't know how to improve every language parsed by prism\n[edit] this would be my best pick\njs\nvar safeHighlight = (function () {\n  var\n    uid = '_@no\\x01shenanigans@_',\n    find = /([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g,\n    restore = new RegExp('([\"\\'])' + uid + '(\\\\d+)\\\\1', 'g'),\n    rp1 = function ($0, $1) {\n      return $1 + uid + (str.push($0.slice(1, -1)) - 1) + $1;\n    },\n    rp2 = function ($0, $1, $2) {\n      return $1 + str[$2] + $1;\n    },\n    str\n  ;\n  return function safeHighlight(content, highgligh) {\n    str = [];\n    console.log(restore);\n    var out = highgligh(content.replace(find, rp1)).replace(restore, rp2);\n    str = [];\n    return out;\n  };\n}());\n. > For example you can have a regex with strings inside /something\"foo\"something\"bar\"/\nnot an issue, regexp will be highlighted as such, and strings will be put back.\nSo this: /something\"foo\"something\"bar\"/ will become /something\"_@no\\x01shenanigans@_\"something\"_@no\\x01shenanigans@_\"/ and then it will become again the original string.\nTL;DR it should work universally but the order obviously matters.\n- literal  RegExp don't suffer the code bug because both multiline and single line needs to be escaped, so comments first\n- regular expressions would be second and the same trick could be done for literal RegExp too ... you remove strings first, then literal RegExp, then you parse\n- string parsing at the end because it's now safer, easier\nThis would be my order/solution ... but yet it's crafted for JS comments and JS strings.\n. to better explain:\n- pre process dropping strings\n- process processed outcome finding comments, literal regexp, rest of the code, strings\n- put all strings back in place so those within comments will be comments, those within regexp will be regexp, those within strings will be strings\nIf needed, drop strings entirely (remove $1 too and return just a placeholder) and put them back at the end using a restore callback that put back them highlighted.\nDoes this make sense?\n. @foo123 your example is broken, while this string doesn't create a SyntaxError:\n\"a string with \\\\\\\\\\\\\\\"escaped string\\\\\\\\\\\\\\\\\\\\\\\" inside\"\nMoreover, that's not an issue at all with the RegExp I've used.\njs\nvar code = 'var s = \"a string with \\\\\\\\\\\\\\\"escaped string\\\\\\\\\\\\\\\\\\\\\\\" inside\";';\ncode.replace(/([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g, '$1hello$1');\n// \"var s = \"hello\";\"\nSo I'm not sure what are your concerns about correctly escaped strings.\nFor non correctly escaped strings though, well ... that's a \"who cares\" case because the code is broken and cannot be possibly highlighted correctly, right?\n. I agree char-by-char is a rock-solid solution but still I'd like to underline the RegExp I'm using works with escaped strings, no matter how many escapes, because the RegExp I'm using does count escapes.\nIt's not a universal solution, I agree, but it works with strings and with literal RegExp.\nHere an improved example that make the intermediate content easily parsable via prism\n``` js\nvar safeHighlight = (function (Prism) {\n  // v3 without shenanigans\n  var\n    html = {\n      chars: {\n        '&': '&',\n        '<': '<',\n        '>': '>',\n        \"'\": ''',\n        '\"': '\"'\n      },\n      escape: function (content) {\n        return content.replace(html.find, html.replace);\n      },\n      find: /[&<>'\"]/g,\n      replace: function ($0) {\n        return html.chars[$0];\n      }\n    },\n    uid = (Math.random() + '').slice(2),\n    uidFinder = uidFinder = new RegExp(\n      '(?:<[^>]+?>)?' +\n        uid + '\\.(\\d+)' +\n      '(?:<\\/[^>]+?>)?', 'g'\n    ),\n    uidReplacer = function ($0, $1) {\n      return html.escape(chunks[$1]);\n    },\n    commonStringRegExp =\n      /([\"'])(?:(?=(\\?))\\2.)?\\1/g,\n    commonReplacer = function ($0, $1) {\n      var len = $1.length;\n      return $1 + uid + '.' + (\n        chunks.push($0.slice(len, -len)) - 1\n      ) + $1;\n    },\n    languageWrap = {\n      javascript: {\n        find: [\n          commonStringRegExp,\n          /(\\/)^/*\\1([^/=*]|$)/g\n        ],\n        replace: [\n          commonReplacer,\n          function ($0, $1, $2, $3) {\n            var len = $1.length;\n            return $1 + uid + '.' + (\n              chunks.push($0.slice(len, -(len + $3.length))) - 1\n            ) + $1 + $3;\n          }\n        ]\n      },\n      python: {\n        find: [commonStringRegExp],\n        replace: [commonReplacer]\n      },\n      ruby: {\n        find: [commonStringRegExp],\n        replace: [commonReplacer]\n      }\n    },\n    langMap = new Map(\n      Object.keys(Prism.languages).map(function (key) {\n        return [Prism.languages[key], key];\n      })\n    ),\n    chunks\n  ;\n// some language has a shortcut equivalent.\n  languageWrap.js = languageWrap.javascript;\n  languageWrap.py = languageWrap.python;\nreturn function safeHighlight(content, language) {\n    var\n      languageName = langMap.get(language) || '',\n      wrap = languageWrap.hasOwnProperty(languageName) ?\n        languageWrap[languageName] : null,\n      out = content,\n      i = 0\n    ;\n    chunks = [];\n    if (wrap) {\n      while (i < wrap.find.length) {\n        out = out.replace(wrap.find[i], wrap.replace[i]);\n        i++;\n      }\n    }\n    out = Prism.highlight(out, language);\n    if (wrap) {\n      while (i--) out = out.replace(uidFinder, uidReplacer);\n    }\n    chunks = [];\n    return out;\n  };\n}(Prism));\nvar code = /* this is a multiline comment */\n  var s = \"a string with \\\\\\\\\\\\\\\"escaped string\\\\\\\\\\\\\\\\\\\\\\\" inside\";\n  var c = \"a string with /*ml comment*/ and a //sl too\";\n  // this is a single line comment\n  var re = /this is a re\" with a string \"inside/g;\n  var rec = /this is a re with a [^/*ml*/] inside/g;;\nsafeHighlight(code, Prism.languages.js);\n```\nHow does the intermediate code look like?\njs\n/* this is a multiline comment */\nvar s = \"123123882183.0\";\nvar c = \"123123882183.1\";\n// this is a single line comment\nvar re = /123123882183.2/g;\nvar rec = /123123882183.3/g;\nIs that middle-content easy to parse for prism? I think so.\nhere a jsbin\n. dunno, what I think is good, is that I've created a jsbin for this case.\nAt least, if nothing, there is a playground to test nasty code and see how to proceed.\nThere are surely edge cases, but since edge cases are a \"won't fix\" here, due nature of the parser which is RegExp based and, as such, cannot be perfect, I guess at least reducing them would be already a good achievement.\nHopefully worth exploring.\n. nice catch about the regExp, it's because I've adde the HTML escaper without retesting (stupid me).\nI understand it should work as general purpose solution but I don't think it will be accepted here (because of skepticism) so I won't bother with a PR but I'll fix my proof of concept.\nIf there is real interest in having it in I'll try to improve the proof of concept and submit a PR with the feature in.\n. FYI I've fixed the issue with strings in regexps (with strings in general) https://jsbin.com/qazida / @zeitgeist87 \n. I'm not sure you should handle any nested token within single or double quoted strings but I've improved the example with better code, Python and Ruby compatible too (easy to make it safer with others) and improved a bit in terms of API\nhttps://github.com/PrismJS/prism/issues/307#issuecomment-205453544\nThe previous version was suffering nested tokens indeed, now in the worst case scenario you gonna have a number highlight instead of string.\nStill not perfect but we all know with RegExp only it's hard to be so :-)\n. ",
    "JasonDyalog": "This is now in use on http://tryapl.org\n. ",
    "JasonRivers": "That's probably a good idea, I will have a look at this and update the PR\nThanks.\n. ",
    "QuantumInformation": "+1 for gitter. What is the status of this?. Where are the npm installation instructions?. @donnieflorence  I just done it like this:\nimport \"prismjs\"\nimport \"prismjs/components/prism-typescript\"\n. ",
    "kylekatarnls": "Oh, thanks to consider this. But I have to say SBP is no longer maintained. Nowadays, it would not be useful I think even if I can't say how many other people could have used it.. HI, foo(?!bar) mean \"take foo if it's not followed with bar\". * is the * symbol. So it takes - if it's not followed with * then a word. So lang-php, language-html, but not lang-php.\n. Ho, indeed, \\w exclude , you're right it's redundant. What's the line and file? With them we could know who wrote this and ask him/her if there is a reason.\n. It seems @LeaVerou added this piece of the RegExp specifically: cfaf681\nBut there are no differences when I test with examples.html classes.\n. As you can see here, the highlighting in GitHub also consider - as an operator in front of 1. To me, it's not different from !1 or ~1 or -input. Except maybe when you do: input - -1, here we really have operator then -1. So my opinion is: works as expected.. It would not be the responsibility of Prism but of the library that manipulate the class string. HTML coder should be able to write this freely:\nhtml\n<p class=\"\n  foo\n  bar\n\"></p>\nEvery browser will understand this properly for getElementByClassName API or for CSS.\nSo libraries too could be free to add spaces anywhere in classes if it helps.. ",
    "tjbenton": "I hit enter one to many times and it submitted the issue. Sorry about that.\n. ",
    "HannesBBR": "I have solved both issues. The last one where a line was not highlighted at all was caused by the same reason as mentioned in #40. I needed to explicitly set the line-height in my pre-tag. \nWhile I was trying to fix the first problem I also noticed that the background (the horizontal stripes) was also fixed while scrolling. This could lead to a situation where a code line is not properly aligned with a background stripe. I've isolated the problem and it can be fixed by some small changes to the theme's css file. I will enter a pull request for this.\n. Yes, you are right. I never noticed it but shadows indeed have disappeared. In my opinion (and for my usecase) the fixed highlighted line + background is a bigger problem than the broken shadows but I understand that you want to keep the shadows.\n. I'm doing some debugging and the after-highlight hook where 'highlightLines()' is called, is working fine. So probably something goes wrong in the highlightLines() function itself. I'll investigate the issue some more.\nEDIT:\nAfter some more investigating I now found that the new <div class=\"line-highlight\"> element (for the new highlighted line) is actually inserted with the correct style=\"top:609px;\" but for some reason is not displayed.\nAlso, after 'refreshing', the old \u00b4<div class=\"line-highlight\"> (for the old highlighted line) is still there and is not removed. These should probably also be removed at the beginning of the highlightLines() function?\n. The problem in my setup was that there were suddenly multiple <pre>-tags. This has probably something to do with the fact that I use Prism in combination with the Highslide plugin.\nThe new div-tag wasn't inserted in the correct <pre>-tag, causing the highlight not to show.\nSo this is probably something you should not be worrying about, although I think it is probably still better to remove the existing line-highlight divs at the beginning of the highlightLines()-function?\n. ",
    "rmzelle": "Doesn't help with either issue as far as I can see, but I'm not very familiar with CSS.\n. > Btw, I get why you want to highlight specific lines, but why have the line number twice?\nI agree that showing line numbers twice is unnecessary.\nMy use case is a website for validating large XML documents (up to a few hundred lines). I think line numbers will help users orient themselves within these documents. I need line highlighting so validation errors can be anchored to the affected lines, and for the actual line highlighting.\n. > Regarding the second issue, the line numbers plugin won\u2019t work with text wrapping and it\u2019s pretty tricky to make it do so. :/\nI checked how http://validator.nu does this, and they use an ordered list (<ol/>), which works with text wrapping.\n\nhttp://bit.ly/1q8Xn96\n. Alternatively, if it's unfeasible to support text wrapping, perhaps the Line Numbers plugin should include some CSS to make sure text wrapping doesn't occur? That would certainly be preferable to having incorrectly aligned line numbers due to text wrapping, right?\n. I think it happens because the Bootstrap CSS uses word-wrap: break-word;:\n\nUnchecking that CSS line stops the text wrapping.\nWould it be an option to change the Prism CSS to include word-wrap: normal; for pre[class*=\"language-\"]? That prevents text wrapping in my case.\n. More on the line wrapping issue here (along with some possible solutions): http://dellsystem.me/posts/line-numbering/\n. Just wanting to let you know that I switched to using Ace, which handles both line numbering of wrapping lines, and line highlighting correctly for me:\n\n. ",
    "Swissa": "You can add the following css:\npre {\n  overflow: auto;\n  word-wrap: normal;\n  white-space: pre;\n}\n. ",
    "bendman": "@lukaszlenart I would recommend going through your code with a programmatic beautifier before running Prism.  I've been using https://github.com/beautify-web/js-beautify which has versions for HTML (or any XML/HTMLish markup), Javascript and CSS.\n. ",
    "GuiTeK": "So what do we do? I created #349.\n. @apfelbox I assume you meant #348 ? If so, I updated it.\n. You're welcome!\n. I guess I have to do it then :stuck_out_tongue: .\nHere is the JavaScript part: see below comment ~~https://github.com/GuiTeK/prism/commit/98b5c0f9b45309879188be8f5de80df07a91f027~~\nI didn't do a PR yet. Tell me if it seems correct.\nAlso, I was wondering where I  should add the CSS part (I created three classes):\n- In themes/prism.js\n- In every themes/prism-theme.css\n?\n~~EDIT: preview screenshot~~\n. I've made some fixes and additions.\nSee here: https://github.com/GuiTeK/prism/commit/ed6c0663cdfd7f7992cbc116d826f26b06b72c03\n. @apfelbox Thank you.\nI sent a PR.\n. There should be no need to add other tokens.\nI could have used existing tokens but the class names wouldn't have reflected the reality. Tell me if that's a problem and I should use existing tokens.\n. I could use the existings .token.property and .token.tag respectively for .token.directive-inline and .token.directive-block but it's quite far from the original meaning.\nThen I could use .token.attr-value and .token.keyword respectively for .token.directive-block-parameter and .token.directive-flags but once again that does not make much sense.\nWhat's your opinion?\n. Indeed #328 might be the solution.\nThis way there is no need to modify the themes for a single language definition and it allows for relevant semantic tags.\n. Even if I opened this issue for the Apache configuration syntax and this is solved, I still believe a language-none would be useful.\nIndeed:\n- there are lots of syntaxes which are not supported by Prism (not especially by Prism, by most of syntax highlighters), for good reason: we can't add them all. Some softwares use their own syntax for their configuration files and we can't add each and every custom syntax into Prism.\n- sometimes you just want to show some program output in a code block, which is not a particular syntax\nAs Prism doesn't format <pre> tags if no valid language is specified, I think a language-none would be useful.\n. @apfelbox I understand the CPU load may slightly increase but the problem here is that it goes up to 100% and never decreases. Plus, I have an Intel Core i7 2600, I expect it to handle some regexes at least...\n@zeitgeist87 you must be right. I ran your test and the \"Normal (Short Lines)\" test completes in a few seconds, however, it seems the second test \"Minified (Long Lines)\" freezes the tab (the test doesn't end and I can't scroll the page anymore).\n. I made all the changes, rebased the branch on the updated gh-pages and squashed all the commits into one.\nThen I tested everything again and it looks like everything works as expected. Tell me if there is any problem.\n. @apfelbox I think you can close this PR now :smiley:.\nThanks for the support!\n. Well seen. I made the change for the regex. Thanks.\nRegarding the directives groups, I'm not sure it's needed. It may shorten the line but we'd have to review all 600+ directives and it doesn't improve readability (in my opinion).\n. ",
    "webdev1hcc": "This seems to be a problem on Google Chrome, but not on Firefox.  It is also a problem on Internet Explorer, but that is not important to me.  However, it is important to me for the line highlighting to work correctly on Google Chrome.  I realize this is not necessarily the fault of Prism, as this line highlighting works correctly on Firefox, but if anyone comes up with a workaround that would be great.\n. ",
    "planerist": "This bug occurs If you use async highlighting and code contains some html symbols. The obvious example is any C/C++ code \"include \", etc.\n. Sure, I have tested it and it works fine.\n. ",
    "Strandedpirate": "Yea, I copied and pasted the code from the page because the download buttons weren't working for me at the time. I downloaded the entire project from github and that works just fine.\n. I disabled all my add-ons and it started working. Turned out to be DAP (download accelerator plus) issue.\n. ",
    "brandones": "For those finding this later -- Prism now formats <pre> tags even if no valid language is specified!. ",
    "cezarykluczynski": "Turns out it has nothing to do with Prism. It's the innerHTML itself that changes newlines to spaces, http://jsfiddle.net/ruiz/jwq69wz5/ so I'm out of luck with what i wanted to do. Thanks for help!\n. ",
    "FuzzySockets": "Fair enough.  I figured I would just make it easier for the next intellij guy that doesn't use a global .gitignore :)\nFYI: the angularjs project includes .idea in their master .gitignore.\n. No, I could make any folder a new intellij project.  So I could (potentially) have a different configuration file nested somewhere within the project.\n. ",
    "ccoley": "You can see on your test page. If you add the CSS from @lgiraudel's repo the syntax highlighting for the commit SHA is better.\nBefore adding the CSS:\n\nAfter adding the CSS via inspector:\n\n. ",
    "HugoGiraudel": "Thanks bro.\n. My apologies for the confusion @LeaVerou and @valeriangalliat . Do you think a link here would be a good spot?\n. What should we call this new section? \"Niche\"? :D\n. Let's create a new \"Third-party language definitions\" between \"Plugins\" and \"Third-party tutorials\" if that's okay with you Lea.\nSo I would say the code should be there.\n. Looks like it's alright Lea. Feel free to review and merge when you have time. :)\n. ",
    "TimothyGu": "Is there a reason why you used Jasmine instead of Mocha? I don't intend to start a flame war but am just wondering since Mocha is a lot more popular (1620 vs 302240 npm downloads in last week)\n. @himedlooff Can you please update the pull request to use components/prism-core.js instead as well?\n. > That\u2019s a great idea! Something like prism-all.js, that would be generated by gulp. What about plugins? I guess no plugins, right?\nI think plugins should be included but not enabled by default. (And of course, we should make it easy for users to enable it if that's what they want.)\n\nAlso, there are some pretty obscure languages in the repo (e.g. NASM), maybe those shouldn\u2019t be included\u2026\n\nEverybody have different definitions for \"obscure,\" as I know people who work with NASM/Yasm assembly on a daily basis. I guess it's just a matter of finding a perfect balance/threshold...\n\nCan bower display a warning somehow that the filesize is huge that way?\n\nI don't know Bower well enough but it seems to me that you never know what the user is going to do with the Bower installation. The person might copy the file after bower install, or copy only the necessary files. One way is to always warn about the -all.js file being big when a user installs prism, but that's kinda overkill.\n\nIt seems like quite a handicap that bower can\u2019t deal with modular libraries\u2026\n\nAgreed. Would diskwriter/grunt-bower-modular-install help in any way? (Just Googled \"bower modular\")\n(From a quick look at least it makes it easier to build different bundles with Grunt. Don't know where Bower comes into play.)\n. @LeaVerou said:\n\nI believe the most common ones are:\njson\n[\"markup\", \"css\", \"clike\", \"javascript\", \"java\", \"php\", \"c\", \"cpp\", \"python\", \"sql\", \"ruby\"]\n\nIn general I think this list is pretty good, but I doubt the usefulness of sql. Maybe it's just me, but it's not even as prevalent as C# according to http://langpop.com/ Also, I feel bash should be in this list as well, as in any case it is the basis of all Unix operations.\n\nSuggestions welcome (but feedback of the type \u201cI believe X should be included because I think it\u2019s common\u201d with no justification only counts as a vote (i.e. it makes no difference by itself, unless many people (which in this context would be around \u2265 3 I guess) make a similar statement).\n\nGiven the limited number of people following this issue I am not sure 3 is a good choice.\n. Any news on this PR? (Ping @lgiraudel again)\n. @lgiraudel although Git doesn't highlight it, most highlighting engine highlights it (and I feel it's better), including:\n- Pygments\n- GitHub linguist\n- GNU nano\nEven those that don't highlight the lines as red and green at least have some styles for these lines, including:\n- Highlight.js\n- vim\n- SyntaxHighlighter\n(there should be more)\nI don't object to add some styles that are different from addition/deletion, but it seems to me that just using add/del colors is the simplest.\n. In general, +1, although I would appreciate it if you can make Git depend on diff instead of still being stand-alone.\n. @LeaVerou, done.\n. This doesn't highlight ymm or zmm (AVX2 and AVX-512 registers).\n. ",
    "adaminfinitum": "@uranusjr It looks like you have a pretty good idea of the problem, why not submit a pull request?\n. Right, but the author can decide if it is or not. In the 'contributing' section the author asks people to submit small patches that address single issues. Yours is perfect and even if it isn't correct it probably provides a better starting place than my issue which was basically just \"it's broken.\"\nI encourage you to submit a pull request with a commit message explaining your doubts.\n. ",
    "dkanicki": "If the fix would be to replace just the one line\nvar patterns = grammar[token];\nwith\nvar patterns = grammar[token].tokens;\nI tried it in my local environment and ... it doesn't work :(\n. ",
    "jonkemp": "Thank you! Is this documented somewhere and I just missed it? That would have been very helpful to know after trying to get this to work over the last couple of days.\n. ",
    "shannonmoeller": "That was the issue. Removed the plugin as a workaround. Thanks!\n. ",
    "rbmj": "I'll try to update and test the regexes this week, and push more commits when I get something working.\nI also chose only to support a subset of all of the literal syntaxes allowed by NASM (for now), as there's an insane number of different formats (see http://www.nasm.us/doc/nasmdoc3.html#section-3.4.1).  I'll see what I can do about adding a few more in as well this week.  Again, this was a v0.01, so it was mostly written to highlight the subset of assembly I usually work with.\nBear with me - I don't use regexes very much.  There will probably be some small bugs.\nI also hadn't looked at all of the other languages, so I wasn't aware that I should use the number type.\n. I think number should be:\n'number': /(\\b|-|(?=\\$))(0[hx][\\dA-Fa-f]+|[\\dA-Fa-f]+h|\\$\\d[\\dA-Fa-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0d\\d+|\\d*\\.?\\d+([Ee][+-]?\\d+)?|0x[\\dA-Fa-f]+\\.[\\dA-Fa-f]*[pP][+-]?\\d+)\\b/g\nTo account for e+, octal, and a few of the more obscure integer constant modes.\nThere are still a few issues with this:\n- I don't know if prism supports the lookahead construct in the first grouping.  If not, then something akin to the following:\n'number': /((\\b|-)(0[hx][\\dA-Fa-f]+|[\\dA-Fa-f]+h|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0d\\d+|\\d*\\.?\\d+([Ee][+-]?\\d+)?|0x[\\dA-Fa-f]+\\.[\\dA-Fa-f]*[pP][+-]?\\d+)\\b|\\$\\d[\\dA-Fa-f]*\\b)/g\nmight work\n- NASM supports _ as a separator\n- NASM also supports 0xabcd.ef12p+12 for floating point literals.  I wasn't able to find a way to get this to work.\n. Notes after reading the manual again:\n- Should add \\d+[dt] for decimal values\n- Should change [oq] to [oOqQ], etc.\nBy accepting _ as a separator, I mean a usage similar to the new usage of ' within numeric literals in c++, e.g. 123_456_789 is parsed as 123456789.  Not sure to what extent we should bother supporting that syntax - I (personally) haven't seen it used very often, and the builtin syntax highlighter in vim doesn't catch it.\n. I screwed up the rebase, so I'm going to try and open a new pull request.\n. I updated the PR to add the operators.\nOne small bug is that when highlighting expressions like [ebp-256], the - is interpreted to be part of the numeric literal and not as an operator.\n. Two quick notes:\n- I'm not sure how to fix the bug I mentioned in my previous comment without breaking regular negative numbers\n- I'm not sure it's important, as if the highlighting correctly is that important for presentation a user can just add a space after the -\n. I will update to add r\\d\\d?[bwd]? for 64 bit register extensions, change xmm\\d\\d? to [xyz]mm\\d\\d? for AVX, and add registers [cdt]r\\d.\nRegex for registers is now: /\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(bp|sp|si|di)|[cdefgs]s)\\b/gi\n. Register updates are done.\n. ping\n. ",
    "omeid": "I think it is just one parameter and a very simple one too to grant creating not only plugin but changing the API for it too, as I believe it is now not possible to do. I don't think having a global var is going to effect anyone.\nAnd Google, Github returns no results for \"PRISM_JS_MANUAL\" so the chance of it breaking anything is virtually nil.\n. My point was, the option to disable auto highlighting is too simple a task to create a plugin for it. It is also not possible with current API.\nAnd with reference to search, explaining how it isn't going to break current code.\n. I think my point still applies, auto-highlighting is also an integral part of the library that shouldn't be span out into a plugin.  Perhaps, the Highlighting engine should be forked out into it's own project while Prism.js provides the hooks and plugins system for that said engine. Akin to jQuery and Sizzle.\n. @mAAdhaTTah I am using PrimsJS yet again after many years and hit the same issue that had before, (#366), so thanks for fixing this.\nThis could use some documentation though. It is not obvious how one would set this option.. ",
    "sergeyzwezdin": "Yes, I've included clike.\nSorry, the problem with another thing - I also added \"cpp\" language and it throws exception. As declaration of csharp was behind cpp, csharp stopped working as well.\nSo, seems need to fix cpp, not csharp.\n. I can reproduce exception with following code -\n\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <title>Code</title>\n  <link href=\"bower_components/prism/themes/prism.css\" rel=\"stylesheet\" />\n</head>\n<body>\n  <pre><code class=\"language-cpp\">int x = 5;</code></pre>\n  <script type=\"text/javascript\" src=\"bower_components/prism/prism.js\"></script>\n  <script type=\"text/javascript\" src=\"bower_components/prism/components/prism-clike.js\"></script>\n  <script type=\"text/javascript\" src=\"bower_components/prism/components/prism-cpp.js\"></script>\n</body>\n</html>\n\nIf you try this in chrome you will see exception like this\n\nUncaught TypeError: Cannot set property 'keyword' of undefined prism.js:70\n. Yep, it was my mistake with csharp/cpp. Sorry.\nThanks for assistance.\n. \n",
    "SenuraMalaka": "My problem was that when I am downloading Prism JS, I forgot to tick the CSharp checkbox.  . ",
    "CupOfTea696": "I think they'd be especially useful for people using the Show language plugin, if they for example would like to specify php4 or php5. I'll try and make a list of common aliases and send in a PR.\n. Alternatively, 'variable' could be used instead of 'property', which would look nicer in my opinion but is semantically incorrect.\n. Right, sorry I didn't know you could do that. \nFirst of, the reason I added JSON is because the highlighting didn't work properly when just using javascript, I got a TypeError on var match = pattern.exec(str);\nThe reason I didn't extend javascript is because javascript has a lot more things in it than JSON has, so they would have to be removed from the definition and I wasn't sure that was possible. Regardless, it doesn't seem to make sense to me if you extend something and than scratch at least 50% of the parent.\nSecondly, I hadn't realised that single quotes strings weren't allowed in JSON, so I do need yo update that. \nLastly, the reason why I didn't just use the i flag for the booleans and null is because things like faLSE aren't semantically correct, although it probably would make sense to highlight them anyway.\nAlso I'm still debating on wether I should use 'property' or 'variable' for the properties. It might be a good idea to just use property and then add some css for .language-json .token.property\n. If you do want me to move the JSON to a javascript extension, you'd have to tell me how to remove the things it inherits that it doesn't need. But I completely agree with @uranusjr on this one. I just checked and JSON would only inherit 2 definitions (number and boolean), which really doesn't seem to make it worthwhile. \n. By the way, is there a way I can safely rename my branch, because I get a build warning email with every commit because the branch is still named gh-pages. \n. Same file would make sense, but I would recommend keeping the distinction between the two. Awaiting your decision before making additional changes.\n. > Prism is a forgiving highlighter, no merciless linter\nSince we are being so forgiving I really can't deny that putting the jsonp in the json definition and just making it an alias is a bad idea :)\n. Not sure either, everything seemed fine to me :)\n. That should've fixed it.\n. @LeaVerou no worries! Applied the necessary changes.\n. @LeaVerou That's probably because I copied it over from javascript. Sorry about that. Probably wasn't sure on what it did and just left it that way :p\n. Mainly for the show language plugin. I'm using a lot of Markdown that gets parsed by PHP and then I'm using Prism to highlight the code blocks. And it sometimes happens when people specify the code language in markdown they add versioning. I could either remove that in PHP or add an alias in Prism, the latter made more sense to me :)\n~~~~~~~~~~~~ php5\n<?php\n    code();\n?>\n~~~~~~~~~~~~\n. Which is why I moved them to the show languages plugin in 3229cb9.\n. I had already removed them I was just saying that I'm gonna keep them in my own custom build which I'm using :p \n. Alright I moved it to a separate branch.\n. You can see a live demo here.\nI hadn't noticed the indentation, I'll fix that.\n. Well that's just the css, I didn't edit anything about that I just added the definitions.\n. I did this ages ago and haven't really actively contributed on Prism since. But maybe I can help out.\nYou say your browser crashes? Have you tried using a different browser and checking if the console shows any error messages?. From the looks of it, seems like it got in an infinite loop somewhere. The invalid HTML might've indeed been the culprit.. The reason I used the .html for the .html5 is because it is shorter, thus taking a tiny bit less space. Prism is known for being lightweight so I took that into account.\n. Sure! One sec.\n. I guess I'll remove them then. But I'm keeping them in my own build :p\n. oh wow im stoopid :p\n. ",
    "AViscatanius": "Rename a branch? I hope it's easy\n. ",
    "ibc": "Will it be finally pulled?\n. ",
    "chris-martin": "JSON is the only thing I'm using Prism for, so I'm not sure whether this is a bug in this plugin or in the library, but FWIW: This doesn't work well with strings that contain numbers.\n\n. I'm confused about how this can make a difference. Aren't JS objects unordered?\n. ",
    "markcarver": "This works rather well.\nThe only thing that I see missing is that if you use the show-language plugin, it only capitalizes the first letter. This will need to be added to the Languages object in https://github.com/PrismJS/prism/blob/gh-pages/plugins/show-language/prism-show-language.js#L8\nHere is a temporary work around:\njs\n  Prism.hooks.add('before-highlight', function(env) {\n    var pre = env.element.parentNode;\n    if (!pre || !/pre/i.test(pre.nodeName)) return;\n    if (/^json/i.test(env.language)) {\n      pre.setAttribute('data-language', 'JSON');\n    }\n  });\n. Sorry. I was being a space head and this was totally my mistake. I am trying to integrate this into a Drupal subtheme and just copied and pasted the CSS info to the JS array without changing the extension to js. Spent a good 10-20 minutes trying to figure out why it wasn't \"loading\"... Go figure, user error :)\nTypos courteous of Siri\n\nOn Aug 30, 2015, at 10:32 AM, Lea Verou notifications@github.com wrote:\nWhy did you close? Is the issue fixed? What was it?\n\u2014\nReply to this email directly or view it on GitHub.\n. http://drupal-bootstrap.org/api/bootstrap/templates%21menu%21menu-tree.func.php/7.x-3.x-dev#code.14-26\n. @Golmote that's brilliant! Thank you! I'm not even sure why I didn't try that to begin with, makes total sense now that I'm looking at it.\n\nFWIW, the third suggestion is my preference too. This is a very common approach in other JS libraries, especially ones like jQuery, e.g. $.fn.somePlugin.defaults. Granted, they have the jQuery ($) global already defined, but the concept is the same regardless.\n. Actually, considering that it doesn't highlight until the DOMContentLoaded event, this means that one can modify global Prism object after the script has been added. This would avoid having some weird standalone global object (Prism_config).\n\nHypothetically, all that's really needed is something like the following.\nAdd a config object to _self.Prism:\njs\nvar _ = _self.Prism = {\n  config: {\n    autoHighlight: true\n  },\n  // ...\n};\nThen, refactor the script tag/autoHighlighting a bit:\n``` js\n// Get current script and check for \"data-manual\" attribute.\n// @todo deprecate this?\nvar script = document.getElementsByTagName('script');\nscript = script[script.length - 1];\nif (script) {\n  .filename = script.src;\n  .config.autoHighlight = !script.hasAttribute('data-manual');\n}\n// Auto Highlight.\nif (document.addEventListener) {\n  document.addEventListener('DOMContentLoaded', function () {\n    if (.config.autoHighlight) {\n      .highlightAll()\n    }\n  });\n}\n```\n\nThen all one would have to do is:\nhtml\n<script src=\"prism.js\"></script>\n<script src=\"script.js\"></script> <!-- script added after Prism in the CMS. -->\nscript.js:\n``` js\n// Disable Prism auto highlighting.\nPrism.config.autoHighlight = false\n// Script continues to do some stuff, like extending Prism.\n// ...\n// Then the script can manually highlight on DOMContentLoaded.\n$(document).ready(function () {\n  Prism.highlightAll();\n});\n```\n. > We already have a setting for this, though via HTML\nNo there's not. This is a hard-coded DOM check; one that isn't able to be added in certain CMS/CMF instances very easily. This isn't a \"setting\" (in the normal sense)... it's a DOM hack. In fact, there are no true JS settings for that matter, nor is there any standard way of initialization of this plugin, regardless of when the script is loaded vs. DOM ready.\n\nIt's probably a good first pull request, if there are any takers! :)\n\nConsidering that this issue nearly a year and a half old, I doubt that's going to happen... especially since this issue implies some much needed refactoring around how and when this \"auto highlight\" is actually invoked based on possible \"settings\".. > It's funny how anything done via JS is considered \"the normal way\" by some.\nI meant that there is no (JS) configurable \"options\" or \"settings\" anywhere in Prism's JS code. Almost ever single JS plugin/app out there has this... that's what is \"normal\". This isn't a radical idea............\n\nI consider an HTML API just as important (if not more important) than a JS API.\n\nExcept that Prism (itself) isn't HTML, it's written and executed in JS.\nWhen a website adds prism, it's executing JS, not HTML.\nWhen highlighting code on node.js, it's executing JS, not HTML.\nIf a site needs to load additional plugins/events/whatever BEFORE Prism \"autoloading\" occurs, it should be able to set some configuration (in JS somewhere) that disables this \"autoloading\".\n\nMany people who use Prism cannot write JS.\n\nSeriously?! What kind of BS reason is this? It's certainly not reason enough to chastise those who do know how to \"write JS\" and need this pretty major bug fixed for very involved setups.\n\nAllowing configuration via HTML is not a hack.\n\nOn normal DOM element, perhaps, however in this case... it most certainly is. There are too many assumptions with this approach, the least of which that there is some \"dedicated <script> tag\" for including Prism. As mentioned above, in CMS/CMF applications... this is rarely the case when these scripts are aggregated/minified.\nFurthermore, and expanding on the \"normal\" comment above, the fact that this type of configuration has no native JS equivalent is massive anti-pattern in almost ever single piece of JS software out there. So yes, this type of configuration is a \"hack\", for the simple fact that it's using HTML to configure JS.\n\nTry being a little more inclusive in your thinking.\n\nTry not insinuating that I'm \"close minded\". It's clear from my comment above that I was relatively \"happy\" with the temporarily solution. That solution, however, has since stopped working now that the site has undergone some performance tuning and now aggregates/minifies absolutely everything.\n\nIn any case, I wasn't even arguing that this is sufficient, I said myself that we should add a JS property for this as well, so not sure exactly what your problem is.\n\nMy problem is that you essentially pawned this pretty major bug on other (non-project-specific) people:\n\"It's probably a good first pull request, if there are any takers! :)\"\n\nThis issue isn't something that can be \"easily fixed\", if only because:\nThere will need to be a concise plan around how to move forward on this topic (as evidence from the divisiveness of even the collaborators in the project itself above).\nContinues to ignore the problem by shifting responsibility from the ones actually responsible for the project. Granted, I get how open source works, but considering that it's already been almost a year and a half and there have been no \"takers\"..... that should have been a sign in and of itself....\n\nMy \"problem\" is that I don't particularly enjoy comments that just add more fluff to a conversation without actually adding anything to the conversation or even attempt to fix it.\nMy \"problem\" is that I need a more stable and standardized solution for this issue and it can only be provided upstream given how this code is constructed.\nMy \"problem\" is that it's been nearly a year and half with practically no progress from the initial report.\n\n\nI'd prefer Prism.manual\n\nI'd prefer that this project stop using anti-patterns (arbitrary naming) and instead use a dedicated configuration object (options/settings/config/whatever...) and property:\nPrism.options.autoHighlight\n\nIt properly identifies what this configuration is/does.\nIt places this configuration is an appropriate namespace.\nBy virtue of the above, also allows for any future configuration growth.\n\nThis is what is \"normal\" looks like in JS..... > It's pretty much the fundamental motivation behind the development of the project in the first place\nIt's not reason enough to justify not putting in some basic JS configuration, nor should it be used as an excuse.\n\nIn the amount of time it took you to write this giant comment, you could have opened a pull request and proposed a solution, instead of throwing a tantrum.\n\nFirst, it wasn't a \"tantrum\"; I was stating facts for an issue that has been overlooked time and time again. Second, the \"giant comment\" is exactly what I have been \"hashing out\" here in this issue (the issue I already created almost a year and a half ago).\n\nYou do realize that this is an open source project and all of us are working on it on our free time, right? We're not your employees, so I would advise you to watch your tone.\n\nOf course I know this is open source. I'm not stupid, unlike the consistent insults y'all continue to insinuate my way regarding as such.\nWe aren't your \"employees\" either. A \"solution\" to an issue shouldn't be \"open up a PR\". There are reasons there are both ISSUES and PRs.\nI don't have the time to setup a local dev/test environment for this project... jump through whatever insane local \"PR/contributing rules\" y'all might have and then go through the minutia of trivial bickering that will clearly happen as is quite evident in this issue and several other PRs/issues I have witnessed in this project.\nI informed this project of a serious bug and I'm being treated as if it's trivial and some wayward soul who doesn't know what he's talking about.\nI am very well versed in open source and maintain one of the most popular Drupal (CMS) Bootstrap base theme integrations.\n\nI'd be careful labelling this as a \"major bug\".\n\nThe plugin auto highlights and there there is absolutely no way to turn it off at the JS level..... that's a major bug.\n\nThousands of people and big websites use Prism without having any issues with this.\n\nI'm not discounting that. However, you are all assuming these are static implementations. When dealing at a CMS/CDN level... that is so not the case. This data-manual attribute cannot be added to the <script> tag because there is no dedicated/standalone <script> tag for Prism in CMSes like Drupal (and I'm not the \"only one who uses\" Drupal)....\nI really, don't understand how many times I have to say that.\n\nIt's not even a bug, you're requesting a feature.\n\nNo I'm not. The \"feature\" (auto-highlighting/toggling it) is already in, it's just not configurable from JS.\n\nJust the existence of the HTML setting bothers you?!\n\nNo. Just the fact that there is no JS configuration ability of any kind. The only \"configuration\" is done via HTML data attributes, which.... again.... is quite assumptive.\nData attributes came after... everything. I wouldn't have imagined that is the only way to configure a JS plugin... but alas, that is the case.\n\nThat all being said, I can see now that this issue is a moot point. Clearly all any of you really care about is patting yourselves on the back and insulting people rather than actually fixing the problem in the first place (evidence by all the thumbs up/downs).\nIf any of you truly were concerned about the project you'd see that my frustration stems from the lack of progress and continued finger pointing. That's my \"problem\".. > You bumped up the issue last year, without explicitely saying that the solution had stopped working for you (was it actually the case?).\nAt that time, no it wasn't as apparent that it had stopped working.\n\nIf the removeListener is registered after the Prism code, it should still work, being minified or not, shouldn't it?\n\nIt's actually not that it doesn't work, but rather doesn't work consistently. This \"solution\" depends on when/where the removeListener event is actually registered.\nIf Prism and the custom removeListener event are located in separate files (which can happen in complex CMS aggregation), then the DOM ready event from Prism can still actually fire depending on any latency that may creep in (at least that has seemed to be the case from what I have observed).\nSuffice it to say, this workaround is just that... a work around, it's not an stable enough solution.\n\n\nWell that escalated quickly!\n\n@LeaVerou made a comment without, what seemed, to have actually read the issue before hand.\nI rebutted with my comment. It contained facts and no negative connotations towards anyone in particular.\nThis should have been the end of it, or at least the start of actually moving something forward.\nHowever that was not the case and it escalated because @LeaVerou then started insinuating, insulting and belittling me.\nIt further escalated because I defended myself and this issue.\nIt blew way out of proportion because @mAAdhaTTah continued the insinuations, insults and belittling and I again, defended myself.\n\nI'm very well aware of how open source works @mAAdhaTTah: the squeaky wheel gets the oil, no matter whether it's for positive or negative reasons... that's human nature. Case in point: the attention this issue got and the PR you have since submitted.\nHowever, I find it extremely hypocritical and egotistical to reference a blog piece about tolerance and level-headedness when all you or @LeaVerou has does is nothing short of the opposite.\nIf you want people to \"treat maintainers\" with respect and in the spirit of collaboration, perhaps neither of you should belittle and insult them while also trying to make your points.\nAlso, all of you \"thumbs down-ing\" my comments and \"thumbs up-ing\" yours. I was under the impression that those tools were meant to convey importance of ideas, not be used as tools for ostracizing, criticizing and bullying people and what they have to say.\nCan any of you see how that just furthers the escalation? You talk about being open-minded, but then (visually) negatively dismiss everything I said. Yeah, real mature.\nOpen source is about communication and being open to what the other person has to say. Just because I chose to talk this out instead of \"opening a PR\" doesn't mean that you have license to treat me or others like crap.\nI'm really not an asshole, but can see how people may misconstrue my passion and defense of being insulted and belittled... as such. That isn't my problem.\n\nClosing this issue won't help moving that way, though.\n\nThe summation of escalation was at a pinnacle when I realized that all @LeaVerou or @mAAdhaTTah were doing was continuing an ego and power trip instead of actually talking about the issue at hand.\nI felt that, since I opened the issue, closing it would stop the incessant bickering, regardless if my OP has been \"fixed\" or not.\nI'm sorry that you feel I was responsible for \"acrimony\" and that it got to this point.\nI have no desire to cause discord or strife in any community.\nI will not, however, allow myself to be treated like y'all have treated me.\nPeace.. @LeaVerou, thanks for continuing to insult me, you just proved my point.. So defending myself against consistent insults and blatant attacks is considered \"childish\"?\nWow.... just wow...\nThe \"contributors\" of this project have some serious issues when it comes to people disagreeing with them, the least of which are down right cruel and rude remarks.\nI will gladly unsubscribe myself now. I don't even care if this issue gets fixed anymore. I don't need this kind of abuse from power tripping egomaniacs.. ",
    "darobin": "Is there any hope of this landing soonish? Highlighting with JS isn't very helpful as pretty much everything ends up being pretty much the same colour :) Also, I've been thinking of making it possible to style keys starting with @ differently so it works for JSON-LD too, if that's acceptable.\n. ",
    "vsimonian": "Hate to be that guy (I understand this is an OSS project), but any updates on a code review? This PR has been around for over a year now.\n. ",
    "drodil": "Anything new to this?\n. Hi, good work! Is this going to be released anytime soon?\n. ",
    "ldexterldesign": "Hey,\nHehe, I forgot I already addressed this last week:\nCreate escaped HTML characters (in Prism)\nhttp://underscorejs.org/#escape\n========================================================================== */\n  // List of HTML entities for escaping.\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '/': '&#x2F;'\n  };\n  // Regex containing the keys listed immediately above.\n  var htmlEscaper = /[&<>\"'\\/]/g;\n  // Escape a string for HTML interpolation.\n  escapeHTML = function(string) {\n    return ('' + string).replace(htmlEscaper, function(match) {\n      return htmlEscapes[match];\n    });\n  };\n  // Find Prism code snippet and escape markup\n  $('.language-markup').each(function() {\n    var codeHtml = $(this).html();\n    codeHtml = escapeHTML(codeHtml);\n    $(this).html(codeHtml);\n  });\n});\nIt would validate through console :P\nRegards,\n. ",
    "lordofscripts": "Perl would be a great addition\n. Never mind, I switched to another Syntax Highlighter package that worked fine on my website.\n. ",
    "nfriedly": "My pleasure, thanks for doing the hard part ;)\n. I may end up adding an additional pair of options, something along the lines of data-start-match and data-end-match that would allow the user to indicate which line to start and stop on via RegEx's (or strings). \nI think that will be considerably more useful then line numbers (that must be manually updated) if the underlying file is changing frequently. I could make sure it adds the appropriate data-start attribute to ensure line numbers continue to work properly.\nIs that something you'd be interested in including?\n. @Golmote hah, I got pretty much the exact opposite response from a couple of my coworkers - they thought that line numbers were relatively annoying and would much prefer being able to add a comment to the code to mark the start and end of the snippet to show. \nHowever, I'll admit that it might be a little bit uncommon, and that's part of why I hadn't included it yet. (Also, I was hoping to hear from @LeaVerou before putting much more work into this.)\n. Hey, we should probably just close this. I don't work at the same employer anymore and I don't think they're still using any of this :/. ",
    "Gexos": "@mallakas  I had the same issue too, it seems that prism doesn't like the  @ sign, I managed to fix this by replacing the @ sign with this special HTML character &#64;.  Test it and see if it works for you.\n. Brilliant @reinink , I feel bad now that I almost \"blamed\" Prism. :)\n. ",
    "mallakas": "@Gexos , thank you your solution fixed my issue, it doesn't throw these lines anymore.\n@LeaVerou , in the test drive page it works fine, the language I use is Python, on my Ghost blog which is powered by Nodejs I tried the standard markdown code and highlight.js and it worked fine, I believe is not a Ghost issue, here is an online testcase http://codepen.io/anon/pen/cFykp, it works fine there too, I can not understand why it happens only in me.\nThank you\n. Well I post it there, but I answered my self with the solution @Gexos  provided above. But I will open a new one in the bug section. I will let you know if I have a solution from there.\nThank you @LeaVerou\n. well done @reinink , I'm using cloudflare too and I disabled email address obfuscation, and the code works fine, of course I do need the obfuscation too, so if cloudflare don't mess with anything else, I will just use the html code trick. I will post this solution at the Ghost forum also, since I opened an issue there. \nThank you! \n. ",
    "reinink": "Hi all, I think I figured out the issue to this problem. I believe this is being caused by Cloudflare's email protection. We had the same problem recently and I couldn't figure out why the exact same code didn't cause the same results on my local system. Looking at the source code, I noticed that a __cf_email__ class was being applied to the email address, which tipped me off, since we recently switched to Cloudflare for our DNS.\nYou can disable the e-mail address obfuscation in the Cloudflare control panel under \"Security Settings\".\n\nHope that helps!\n. @philsturgeon Thanks ;)\nJust an update for anyone else who arrives here, I've successfully disabled email address obfuscation in Cloudflare, and then forced a cache refresh, and now things are good. See this doc for more information on purging the cache.\n. ",
    "valeriangalliat": "Okay, no problem.\nTell me where to put the link and I'll update this PR.\nEdit: @LeaVerou, do you want me to add this section within the PR?\n. ",
    "haarg": "Tested and working in the latest versions of Firefox, Chrome, Safari, IE, and Android Chrome.\nWithout this change, the way the number of lines is calculated doesn't correspond to how HTML works.  It makes more sense to me to fix it where that calculation happens like this patch does, rather than relying on something elsewhere to strip off a newline.\n. Is there anything more required to get this merged?\n. Why not just use this patch as is?  Rather than trying to hack around the issue, it just does the appropriate thing and fixes the line number calculation to match browsers.\n. #385 should fix this\n. This throws off line numbers for things that generate HTML, and also changes the content (not just the visual presentation) compared to how a browser would present represent the markup in the absence of Prism.\nFor my usage, this means I'll have to add a wrapper to pre-munge the content to add a newline to every highlighted tag before handing it to Prism.\n. For a code fragment, this change generally will be fine.\nOne of my use cases though is displaying source files.  In this situation, I need the display to accurately represent what exists in the file, including leading newlines.  The display also needs to be accurate when JavaScript is disabled.  If I add a leading newline in the markup to account for what Prism will strip off, then it will be inaccurately displayed with JavaScript disabled.\n. Having it as a plugin that can be disabled sounds fine to me.\n. ",
    "aldanor": "Wondering about this one as well; any reason why it hasn't been merged in?\n. @LeaVerou @haarg \nHere's the simplest minimal example in JSFiddle: http://jsfiddle.net/g8zwu9fr/ (which works perfectly well with the suggested patch but adds an extra newline without it)\nNote that there's a use case for it since e.g. it's exactly what Jekyll (Kramdown) outputs when you have a fenced code block like this:\n~~~ python\nprint 'foo'\nprint 'bar'\n~~~\n. ",
    "AlexAltea": "@LeaVerou: main defines the files required to use the package (more info here).\n. ",
    "himedlooff": "My PR should be merged as-is. Look at the documentation; prism.js and themes/prism.css are the two files needed to run Prism: http://prismjs.com/#basic-usage\n\nThe benefit of listing these two files as main in bower.json is that build tools can pull those two files out while ignoring the rest. This is the majority use-case for the main property. If someone wants a custom build of Prism they can still do that. The main property does not delete any files, it just lists the main files you need to run the code.\n. :blush: Can we still please merge my pull request? My only change was to point to the correct CSS file. It doesn't have anything to do with the JS.\n\nRE: the JS in bower.json\nThanks for the clarification @LeaVerou. The documentation shows themes/prism.css, notice the themes folder. This made me assume it was from the GitHub repo because the downloader gives you two separate files without any folders: prism.js and a prism.css. Maybe there should be an update to http://prismjs.com/#basic-usage to remove the themes folder.\nThe other thing I'm noticing is that it seems like prism.js at the root level of this repo is generated from the gulp file, which means it's the custom build of prism.js used in the website and only contains a few languages. If that's true then it probably shouldn't be listed under main in bower.json.\nOne idea for a good JS candidate for main is to create a compiled JS file of all the languages. Then when somebody uses bower to grab Prism they can use the main property to easily grab the two things they need to use Prism in their project.\n. I went to the download page and selected all languages (and no plugins), it's about 53kb total. That's a lot. What about a prism-basic.js which just does HTML, CSS, and JS? That is, if those are the most common use-cases. Anyone who wants more can still build it custom through bower, they just won't be able to take advantage of the main property, which is perfectly fine.\n\n. The main property in bower does not mean anything is excluded. Bower will download everything in this repo regardless of what's in the main property.\nEven though all of the languages would be kind of hefty I think that's the way to go.\nLook at bootstrap's bower.json and you'll see they list the compiled CSS and JS which has everything in it. If you want a custom build you can do that, the files are all there. If you want to just import everything quickly then utilize the main files in your task runner. Same with jQuery, main points to ALL of jQuery. The src directory will still be downloaded and you can create your own custom combinations if you want.\n. @LeaVerou, sorry, the \"majority languages\" thing was not a great idea for the reasons you highlighted and also because that's not really what main is about. I hope my previous comment makes a better case for an \"all languages in Prism\" approach, at least for the JS listed in main.\n. Here's a list of what's in that file according to https://github.com/LeaVerou/prism/blob/gh-pages/gulpfile.js\n- prism-core.js\n- prism-markup.js\n- prism-css.js\n- prism-clike.js\n- prism-javascript.js\n- plugins/file-highlight/prism-file-highlight.js\n. I'm ok with leaving the JS path as-is. After all, this PR is meant to fix the CSS path. :wink: \n. Thanks! :smile: \n. prism.css doesn't appear to be at the root level anymore.\n. ",
    "compyman": "This is my first PR so I don't know if it notifies automatically but I added those things!\nthanks!\n. The syntax is all like (define (name-of-function parameter1 p2 ...) (body-of-function)),\nand applying a function to arguments is like (function arg1 arg2...) but then if you have a function called make-list 'list' would be parsed as a builtin when it's actually the name of the function, so making it starts with a parenthesis is a kinda hacky way to make sure things are delimited correctly. I'm not sure that made any sense and I can try to explain it better if it didn't.\n. my pleasure! I'll try and improve when I get some free time!\n. ",
    "morkro": "Thanks for the workaround! \nI hope someone from the core team can confirm this or at least take a look at the issue :)\n. ",
    "DominicTobias": "Thanks, has this been released? I npm installed prism and jsx isn't in prism.languages? And will it work for JSX outside of JS? e.g. in docs:\n\n. A right thanks - will see how to do that (I was just doing import prism from 'prismjs')\n. I'm still pretty confused how to do this, i.e:\njs\nconst prism = require('prismjs');\nconst prismJsx = require('prismjs/components/prism-jsx');\nThe signature of prism-jsx is like:\njs\n(function(Prism) {\n// ....\n}(Prism));\nBut prismJsx is self-calling, doesn't return anything, and assumes a global Prism object for some reason. I was hoping I could mix  the language in with prismJsx(prism). I found the docs lacking in any information about how to load custom languages?\n. @felixsanz thanks that works great, I didn't think prism-jsx could pick up that var name from another file :o\n. ",
    "gpbaculio": "is there a documentation how to integrate this in react? cant seem to find. ",
    "tomchentw": "javascript\nPrism.highlightElement(domEl, true, callback);\nThe issue is even if I pass true to it, the callback will be called synchronously when the following condition are met: WebWorker is absent.\nYou can also see my test code here:\nhttps://github.com/tomchentw/react-prism/blob/81dc3759819890217a06576bfd940fa0124d805b/src/tests/PrismCode-test.js\n. For me, I'd want the API to be consistent. If I use async version, it should be truely async.\nI'd suggest creating and extra version to handle async request\njavascript\nPrism.highlightElement(domEl) // synchronously return\n//and\nPrism.highlightElementAsync(domEl, callback) // will try to leverage WebWorker\n. Because it makes the code using Prism.hightlightElement harder to test. Think about it:\njs\nPrism.highlightElement(domEl);\nexpect(domEl.innerHTML).toContainsLotsOfSpans();\nNo problem. Works perfect, right? But adding async option changes this:\njs\nPrism.highlightElement(domEl, true);\nexpect(domEl.innerHTML).toContainsLotsOfSpans();\nWhat's the result should I expect? If the test code is running against different browser/context, different result would be given. If an Async version is provided, you can write code like this:\njs\nPrism.highlightElement(domEl, true);\nsetTimeout(() => {\n  expect(domEl.innerHTML).toContainsLotsOfSpans();\n  done(); \n}, 5000);// let's assume it's long enough for work to be done.\nIf this cannot still convince you, please feel free to close this.\n. Sorry I make you confused, let me start over:\nAsync=true should be truly async.\nThe async=true option should execute highlighting after the method returns (even if not in WebWorker context)\nWhy?\nHarder to test behaviour\nIt makes the code using Prism.hightlightElement harder to test. Think about the following test code:\njs\nPrism.highlightElement(domEl);\nvar result = isDomElNowContainingSpansInsteadOfRawText(domEl); // it returns true if highlight succeed\nexpect(result).toBeTrue();\nNo problem. Works perfect, right? \nAdding async option might change the behaviour:\njs\nPrism.highlightElement(domEl, true);\nvar result = isDomElNowContainingSpansInsteadOfRawText(domEl);\nexpect(result).toBeTrue(); // Really?\nThe last expect would have two results:\n1. true, where synchronously highlighting is applied, might be in nodes/window context\n2. false, where asynchronously highlighting is applied, might be in WebWorker context\nProposed Solution\nAdd an Prism.highlightElementAsync version, which will highlight after next tick. The implementation can be as simple as:\njs\nPrism.highlightElementAsync = (domEl, callback) => {\n  setTimeout(() => {\n    Prism.hightlightElement(domEl, true, callback);\n  });\n};\nAnd now we can write our test code like this:\n``` js\nPrism.highlightElementAsync(domEl);\nvar result = isDomElNowContainingSpansInsteadOfRawText(domEl);\nexpect(result).toBeFalse();\nsetTimeout(() => {\n  var result = isDomElNowContainingSpansInsteadOfRawText(domEl);\n  expect(result).toBeTrue();\n  done(); \n}, 5000);// let's assume it's long enough for work to be done.\n``\n. @apfelbox Thanks for the response. Ya I still believe the API design ofasync` could be further discussed.\nAnyway, I'll close this issue. Thanks for creating such a great library!\n. ",
    "everett1992": "I have a jsviews tag that uses prism to highlight code. If Prism's output includes /> jsviews will throw an exception. The fault is probably with jsviews but I was able to mitigate the problem by encoding modifying Prism's encoding function to also replace >.\njavascript\n  // Prism's default encoding method does not encode `>` which will cause\n  // jsviews to throw an error.\n  var old_encode = Prism.util.encode;\n  Prism.util.encode = function (tokens) {\n    if (_.isString(tokens)) return old_encode(tokens).replace(/>/g, '&gt')\n    return old_encode(tokens);\n  };\nI opened this issue in case anyone knew of a reason to avoid encoding >\n. ",
    "AlexeiDrake": "That would make the argument order inconsistent with that of highlightElement. Perhaps we could avoid breakage by introducing a new function altogether? Perhaps one called highlightChildren or some such.\n. Because highlightElement does not highlight any of its children, and it would be nice if we could query a node other than document.\n. ",
    "tanakahisateru": "I created another pull-request #1230. ",
    "sbrl": "A simple list in the README or on the site would be very helpful.\n. Oh I didn't notice that!\nI was looking at the download page, not the homepage :)\nOn 01/04/2015 06:18pm, Golmote wrote:\n\nI think this issue is fixed, isn't it? The list of all the languages, \nwith their associated class, is displayed on the homepage.\nFurthermore, the Examples page also specifies for each language the \nclass to use.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/PrismJS/prism/issues/399#issuecomment-88562416.\n. @zeitgeist87 Never mind, it is working as expected now that I get it isolated on a test page. Here's a link to the test page on my website:\n\nhttps://starbeamrainbowlabs.com/libraries/prism-test.html\nI'm sure it wasn't working before...!\n. Done - thanks for the comment, @mAAdhaTTah! I was wondering how that worked.\nLooks like you've got some vulnerabilities in your required npm packages though:\n\nnpm audit fix should do the trick to fix that.. All done! Is that better?. I've made the changes requested (even though it's recommended that you commit package-lock.json).\nHow do I add tests? Is there any documentation on this?. Ah, thanks!\nLooking at it, I think test cases are going to be challenging as I don't know the language well enough to create a valid cut-down program that would do the job as a test case. In addition, there's a lot of boilerplate code that's appears to be common across multiple IL files, which further complicates the process of writing tests.\nThoughts?. Tests added! Let's see if Travis likes them.. @RunDevelopment Hrm. It looks to be failing, but I don't understand what Travis is trying to tell me.. Thanks for the helpful advice, @RunDevelopment! That test tool is very helpful (for my own reference, make sure you re-select the language every time you refresh the page :P).\nI've improved the handling of command prefixes and made the tests pass.. Thanks for the comments! PR updated. This is a much longer process than I thought it would be :P. Done, @RunDevelopment. What's the status on this please, @RunDevelopment? I thought I'd done everything required, but it's been a while and this hasn't been merged yet? Did I miss something?. Done, @mAAdhaTTah :D. I tried to pick the most appropriate token out of my prism css file I had on-hand.\nHow do I define an alias?. Good point! I'll update now.. Done. I originally pulled out of the Wikipedia article with a bit of JS and a regex or two to process it.. Good thinking! I didn't know JS supported positive lookaheads.. ",
    "axelduch": "Damn you are right, my RegExp is accepting total garbage characters :p, I'll delete my comment as it is harmful\n. ",
    "Mrman": "+1\n. ",
    "Conaclos": "Is there any missing stuff?\n. Hi,\nThanks for merging ;)\n@Golmote\nYes it looks good.\n@Golmote @LeaVerou\nI thinks that the question covers the whole of Prism: \nShould Prism be usable with a code editor?\n. ### Formal generic parameters and class-names\nEiffel Standard (ECMA 367) 8.12:\n\nThe genericity mechanism, still based on classes, gives us a new level of flexibility through type parameterization. You may for example define a class as LIST [G], yielding not just one type but many: LIST [INTEGER], LIST [AIRPLANE] and so on, parameterized by G.\n\nThe only way to know if the identifier is a class-name or a formal generic parameter is to know the class declaration.\ne.g.\n``` eiffel\ndeferred class\n    A [G]\nfeature\n    items: G\n        deferred  end\nend\n```\nThe declaration class A [G] enables to say that G is a formal generic parameter. All occurrences of G in the class denotes this generic.\n. @LeaVerou \nIs it really an issue?\nUsing the same CSS class for class-names and formal generic parameter names is not really a problem. The notion are related...\n. @Golmote Hi!\nA new commit from @carlfriess is now integrated (See #827).\nEiffel users which use Prism for Eiffel highlighting gave me a positive feedback about this PR.\nFor example http://eiffel-guide.com/ uses a modified version of Prism in order to benefit of these changes.\n. Thanks,\nI've just to remove the unneeded paragraph ;)\n. Hi!\nhttps://github.com/PrismJS/prism/pull/471 could handle the highligthing of the basic types since theyr are also classes in Eiffel :)\n. ",
    "PeterChaplin": "http://jsfiddle.net/PeterChaplin/ta9vy1e0/\n. ",
    "jdfreder": "I'm very excited for this fix, thanks @Golmote .\n. ",
    "ericrange": "polymer replace the \"{{shareSize}}\" with a number. so at the end it is valid css.\nyou dont know polymer?? you dont know the future of the web?? :P\nhttps://www.polymer-project.org/\n. ",
    "paladox": "As polymer is based in html, this may not work as the lang returned would be html or markup. (im thinking of when users use the Prism.highlight function.. Also polymer 2 is out now which uses es6 syntax. Polymer 1.x still uses the old syntax :).\nShould we do polymer 2 seperate?. Also considering this is in html + javascript this should extend the javascript language so that there's no need for Prism.language.prism . bump @JuanCaicedo :). cc @Golmote  wondering if you could review this please? :). Thank you :). https://github.com/PrismJS/prism/pull/1311. @Golmote Kind of, but looking at https://github.com/isagalaev/highlight.js/blob/master/src/languages/shell.js#L14 it may have slightly different syntax for some things\nSo this lang could extend bash.. @Golmote actually, it seems it checks for #/bin/bash and /bin/sh in the bash file so i will just add shell as the alias for bash.\nsee https://github.com/PrismJS/prism/pull/1321. @Golmote thank you :).\nIm trying to switch from highlight.js to prism in gerrit https://gerrit-review.googlesource.com/c/gerrit/+/163090 :). @Golmote oh, so it carn't be in alphabetical order?. @Golmote i've put it in the order you said too, but it still dosen't highlight in ",
    "florianpircher": "\nIn the second <pre>-tag the Swift code gets wrapped by the string. This pull request fixes this incorrect behavior (first <pre>-tag).\n. ",
    "chrisronline": "Makes sense. Thanks so much!\n. ",
    "talal": "@vkbansal Thank you for your help. I was able to resolve the issue by breaking the block of code as mentioned on the Prism FAQ.\n. ",
    "cdagnino": "@Golmote : changed the indentation to tabs (sorry about that, should have been more careful)\n@LeaVerou : I based it off the Python component just to get me started and because they share a few things, but Julia takes things from many other languages. A second iteration should depart more from the Python component, so I don't think it's useful to make it inherit from Python.\n. Let me know if you need anything else from my end, thanks.\n. I removed the ignore token and changed the entities to symbols (<  and >)\nLet me know if I need to pull/rebase any changes (and I'd appreciate if you are explicit on what I need to do, my git knowledge isn't that solid)\n. ",
    "Pinpickle": "@Golmote I'm afraid I don't know and I'm not even sure how to test that. I'm fairly sure the new code means exactly the same thing, so this shouldn't change any functionality anywhere.\nHappy to test with some instructions!\n. Tested it on Chrome, Firefox, Safari (Mac), and Chrome, IE11 (Windows). Everything looked to be working. An error was thrown about an undefined document (because workers don't have access to the DOM). I was getting these with or without the change in my tests so that's an issue for another day.\nSo yes, it works when used in a Worker.\n. ",
    "Joeynoh": "Came here to submit the same pull request. This issue keeps failing our IE tests on deploy, and now we cannot use a package manager to install Prism.\n. ",
    "cookch10": "@Golmote thanks for the fast follow-up.  Works without fail, now! \ud83d\udc4d\n. Thanks for fixing!\n. ",
    "sergeyt": "@Golmote export wrapper could be UMD-style to work in all environments, my example use AMD only. Web Worker should be browser global case.\n. :+1: \n. ",
    "davidkudera": ":+1: \n. ",
    "juliancheal": "Enabled.\ncurl -I lea.verou.me\nHTTP/1.1 200 OK\nDate: Thu, 15 Jan 2015 12:08:40 GMT\nServer: Apache\nX-Powered-By: PHP/5.5.9-1ubuntu4.5\nX-Pingback: http://lea.verou.me/xmlrpc.php\nLink: http://wp.me/roQm; rel=shortlink\nAccess-Control-Allow-Origin: *\nContent-Type: text/html; charset=UTF-8\n. ",
    "nazar-pc": "Unfortunately, it will not be possible to use just selector, because :not([contentEditable=\"true\"]) will stand for anything like html, body or any other parent of pre > code, that it why the only working solution I found is to use element.matches to match actual selector against :not([contentEditable=\"true\"]) *.\n. I do know very well how selectors work. The point is that [contentEditable=\"true\"] can be anywhere. In my case WYSIWYG editor TinyMCE makes div editable, and all pre>code are inside, but this only one case, in general you can't account all cases like this purely with selector, any parent may be editable.\n. I'm not sure about others, but I definitely do not want external modifications to what is happening inside edited area.\nThanks to how Prism is written I've already solved this for myself in such way (coffeescript):\ncoffeescript\ndocument.removeEventListener('DOMContentLoaded', Prism.highlightAll)\nPrism.highlightAll = (async, callback) ->\n    elements = document.querySelectorAll('code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code')\n    for element in elements\n        if element.matches('[contenteditable=true] *') || element.matches('.INLINE_EDITOR *')\n            continue\n        (\n            if element.parentNode.tagName == 'PRE'\n                element.parentNode\n            else\n                element\n        ).classList.add('line-numbers')\n        Prism.highlightElement(element, async == true, callback);\ndocument.addEventListener('DOMContentLoaded', Prism.highlightAll)\nThis code is included right after Prism itself. Additionally, I have INLINE_EDITOR class in my particular case and forcing line numbers everywhere, so I need to patch in anyway.\nHowever, pull request contains part for [contenteditable=true] only.\nProbably, hook would work even better here.\n. Must have at least to specify version, so I'll know when new version released and decide whether I have latest one.\n. ",
    "simontaite": "The patterns you suggest look good, better than what I could write\nThe only changes I made where to make the suffixes for binary and hexadecimal numbers optional as they are valid ints\n. Whoops, my bad. I've changed them to a simple array as per the documentation\n. Good point. I've added support for hexadecimal characters\n. The last group matches the pattern found in prism-clike.js for single line comments\nF# uses the same syntax for single line comments, but the comment property had to copied across as F# uses (* multi-line comment_) instead of the usual C /_ multi-line comment */\n. It was getting a bit complex as F# floating point numbers can be declared by ending a number with a dot\nI've instead split the numbers regex to handle different scenarios as per commit message. Good idea with the Numbers section in the example file, I've included that as well\n. Woops indeed, reversing this\n. Added now\n. Done\n. Thanks for the suggestions\n. ",
    "jakearchibald": "Ohh thanks! \n. ",
    "MaxXor": "Thanks for fixing!\n. ",
    "cowboycodur": "Not really, the names on those pages don't necessarily match the class names. For example, C# is not the class name, it is csharp. While most are very easily guessed, I would rather not guess. Maybe you could put the class name next to the language on the Download and example pages.\n. This is very awesome! This will be very handy! Thank you!!\n. ",
    "hason": ":+1: \n. @Golmote @LeaVerou What do you think?\n. @Golmote @LeaVerou What do you think?\n. @Golmote Thanks so much!\n. Fixed\n. Fixed\n. ",
    "rwwagner90": "bower install prism#gh-pages --save\nWorked for me.\n. My IDE literally won't allow me to do this. I just put it all on one line, and it works, but that is not very good. It would be nice to ignore the indentation of the <code> tag and just look at the content inside. Is there a reason to not do that?\n. ",
    "fundon": "WTF?\n. ",
    "huyingjie": "@Golmote Thank you for your reply. I do not want to read the lengthy documentation, either. I searched online and found some related codes. Could you adapt their codes?  Thank you in advance. \nSomeone wrote SAS syntax highlighter for sublime.  The websites are: \nhttps://github.com/Jiangtang/sas.tmbundle\nhttp://www.jiangtanghu.com/blog/2012/07/13/sublimetext2-sas/\nhttp://implementing-vdw.blogspot.com/2012/10/new-sublime-text-package-available-for.html\nGeShi has SAS highlighter, too.\nhttps://github.com/GeSHi/geshi-1.0/blob/master/src/geshi/sas.php\n. Thank you very much!!!!\nCould you add SAS to the page http://prismjs.com/download.html ?\nI use Prism through MacDown (http://macdown.uranusjr.com/features/)\nI tried the fence in MacDown \n~~~sas\nproc logistic data=;\n~~~\nbut it is not working. I am not sure which one affect highlighter function, prism or MacDown. If MacDown need improve, I will open an issue in MacDown's GitHub.\n\n. @vkbansal Thank you for your reply. What is \"PR\"? I hope that @LeaVerou can review it soon :-)\n. ",
    "tangbc": "Thanks, it works after use Prism.highlightAll() !\n. ",
    "marshmellow1328": "Adding this to bash component seems to work for me, but didn't see a test suite to feel comfortable just submitting pull request.\nnumber: {\n    pattern: /(\\s|=)-?(0x[\\dA-Fa-f]+|\\d*\\.?\\d+([Ee]-?\\d+)?)\\b/,\n    lookbehind: true\n}\n. That's where I started, but wasn't sure on the regex and switched to what I posted. What you posted works for my few brief examples. Would you say this is a clike problem or a bash problem? Let me know if you'd prefer I submit the pull request.\n. It only seems to occur after checking/unchecking a number of options. I have yet to find a consistent pattern to it.\n. Yep, sounds like it. Don't know how I didn't encounter the past few days, but looks like the same issue.\n. ",
    "SandraShklyaeva": "Thank you very much, guys! I hope it can be useful for the community :)\n. ",
    "0ctobat": "THANKS @vkbansal , you made my day !! \n. ",
    "esr360": "May not be a problem with Prism, but it's certainly a problem that Prism could solve, right? Seems like a pretty common use-case to expect code's whitespace to be formatted relative to it's wrapper div. I'd love for this feature to be reconsidered, even if easy external fixes are available.. ",
    "vlrprbttst": "some css, why? that should not be incorporated, just shown and syntax highlighted. even if i put in there anything else, i still get a blank block of code\n\n. works now! thanks, i added &lt and &gt to the php line as well\n<pre class=\"language-markup\"><code class=\"language-markup\">&lt;style type=\"text/css\"&gt;\n  &lt;?php include 'css/critical.css.php';?&gt;\n&lt;/style&gt;</code>\n</pre>\nis this a bug? it just happens sometimes\n. i don't want to, i just need to show the codeblock. shouldn't anything in a pre or code tag be rendered as code by default?\n. that was the work-around, what about the solution? :)\n. @vkbansal i opened this issue on prismjs repo and prism doesn't need escaping to show code blocks and highlight the syntax inside it. that's why i called your solution a work-around and not a permanent solution to the problem.\nhttp://prismjs.com/#basic-usage\n. ok , thanks y'all\n. ",
    "valtlai": "@vkbansal There\u2019s no need to escape >.\n. @vlrprbttst, you can create a PHP function like this:\nphp\nfunction code($lang, $str) {\n    return \"<pre><code class=\\\"lang-{$lang}\\\">\" . htmlspecialchars($str) . \"</code></pre>\\n\";\n}\nUsing it:\nphp\n<?=code('markup',\n'<p>Lorem ipsum dolor...</p>'\n)?>\nResult:\nhtml\n<pre><code class=\"lang-markup\">&lt;p&gt;Lorem ipsum dolor...&lt;/p&gt;</code></pre>\n. But how that regex differs from one without (?!\\*)?\njs\n/\\blang(?:uage)?-(?!\\*)(\\w+)\\b/i.test('lang-*php');  // returns `false`\n/\\blang(?:uage)?-(\\w+)\\b/i.test('lang-*php');  // returns `false` too!\n. It\u2019s here: /components/prism-core.js:18\nAdded in cfaf681db9018bd1d6e296b526db3e1467986fb3\n. Thanks!\n. requestAnimationFrame doesn\u2019t have the second parameter. Can you remove it, please?\n. @LeaVerou Yes, I searched in the whole project and there was no more to remove.\n. @LeaVerou, see #1002.\n. > Every SVG should have a viewBox. @svgeesus can explain why.\n@svgeesus, I\u2019m very interested to know why.\n. @LeaVerou, done.\n. @Golmote Yeah, done.. Done.\nYeah, it\u2019s mine. Most of the colors are from Chrome DevTools\u2019 material colors palette.. Do I need to install Gulp and NPM, eh?. Added a test (and fixed indentation).. I have not use them ever. When I have installed both do I just cd to the local directory and run the commands?. Added minified versions, and tests passed.. New PRs: #1398 and #1399.. @Golmote See https://github.com/PrismJS/prism/issues/853#issuecomment-172139753.. @RunDevelopment A test added. I also fixed the indentation errors in the test file.. There\u2019s extra space after \u201creport-uri\u201d.\n. ",
    "joeworkman": "Ha! You know what, I completely overlooked the fact that there was a C component. Not sure how I overlooked that about 5 times... \n. ",
    "moshmage": "@Golmote You're a godsend :)\n. ",
    "Otolock": "Alright. I shall wait for the PR.\nOn Thu, Apr 2, 2015 at 8:41 AM Daniel Flint notifications@github.com\nwrote:\n\nBugger... that's my fault. I'll fix up and submit a PR.\nThe code will need to have at least scroll: auto. If scrolling is handled\nby the outer pre, the language will scroll out of view (which isn't\nnecessarily a bad thing, but all other cod highlighters don't do that, and\nI think it looks better).\nBut unnecessary scrollbars suck, so needs to be fixed.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismJS/prism/issues/559#issuecomment-88885355.\n. \n",
    "mortalis13": "Sorry for disturbance.\nI already solved this problem.\nSometimes it's useful to write down your problem somewhere. It helps to think and find a solution faster then when kiping it i mind...\nI wrapped each line in a div but the line-numbers-rows span is block styled. That's why they conflicted. I've set float:right to the code section and the two parts were aligned right.  \nJust strange that if I don't get any size properties before the line numbers are added to the <pre> block the alignment doesn't smash. And if, for example, I uncheck/check the position property in Firefox Inspetor the gutter goes to the right place.\n...\nBut after these experiments I found that if I select the code in these div-lines on the page and then paste it in a text editor the spaces don't save and the code indentation becomes completely broken.\nSo I left the code to be in native span's (without div's around the lines). But only used a \"div'ved\" simulation in the prism.js code to get the right line heights. Then used these heights to set line-numbers-rows span's heights.\nSo now the code produces acceptable results for me.\n\nIf you can please look at the repository I've created. It contains files I edited and runs from a local place. I marked my changes in prism.js and prism.css files as  \n\n/* ---add--- */\n    ...\n/* ---add_end--- */\n\nMaybe my floats isn't the right way to solve the alignment...\nCould you say something about it?\nThanks.\n. OK, thanks man.\nI tried the similar part\nenv.element.style.display = 'none';\nenv.element.style.display = 'block';\nand with position but without getting the size.\nSo it wasn't enough to reload the rendering of the elements...\n. ",
    "netergart": "update\n. ",
    "larsenwork": "That is correctly guessed - sorry, forgot to mention that :)\n. great\n. I know - but I was on my iPad so made the edits in the web interface by just pressing the edit button. Will combine if I pull something again :wink: \n. ",
    "anio": "OK, Thanks.\n. ",
    "draveness": "I don't know why, but on my Mac.\n\n\nHow to make this scroll bar always appear.\nWhich browser are you using? I meet this problem both on chrome and safari  and only works on firefox.\n. @uranusjr  Thanks this really works, and I have another question about the line-number plugin, I write markdown like this\n\nAnd html\n\nI am confused whether the question is caused that I add line-number to <code> instead of <pre>. But I don't know how to solve this.\nAnd the line-number doesn't display correctly. Could you help me with this, thank you so much~\n(I'm really not goot at such things, and I searched for help, but useless  :-(\n. I know that, but how to solve it. Do I need to add linenumber class to pre tag after I wrote a blog with markdown? That's terrible.\n. I tried this but not work.\n. ",
    "dylanmackenzie": "Yup, the line numbers look good now. Obviously the tag does not stay in view when scrolling anymore. Out of curiosity, would wrapping the pre element with a div when the plugin is loading be worth considering? I can't think of any other way to get that scrolling behavior without messing with prism core. It seems like a pretty inelegant solution though.\n. ",
    "iLightGit": "Why if it work nice in your example you do something like this:\n    <pre><code><p>hi234234 sdfs!</p></code></pre>\nWhy you cant write:\n        <pre><code><p>hi234234 sdfs!</p></code></pre>\nprism-gh-pages/example.html\nMaybe i don't understand something, but prism don`t work with native html. Right?\n. ",
    "bashtavenko": "Even if I escape the opening html tags with \"lt;\", prism still strips them off. \n. Golmote, still cannot make it work. Can somebody point out to an example of how to prevent HTML markup from being stripped off by Prism?\n. So, the only way to achieve that it is by writing a custom Prism plugin (Golmote, thank you very much for sharing).  Perhaps documentation should be updated, because there doesn't seem to be a way to strip off markup by using just configuration or tag escaping.\n. @Golmote I discovered that prism blows up with \"TypeError: Cannot read property 'nodeName' of null\" at _self.Prism.highlightElement @ prism.js:2 as soon as add nested code block (this isn't related to your plugin):\n<pre class=\"language-sql\">\n    <code class=\"language-sql\">\n    CREATE PROCEDURE [dbo].[SalesByCategory]\n    AS\n    IF OrdYear != '1996<pre class=\"language-markup\"><code class=\"language-markup\">AND</code></pre>OrdYear != '1997'\n    BEGIN\n        SELECT TOP(1) FROM Orders\n    END\n    </code>\n</pre>\nI don't see what's wrong with this markup..\n. @nauzilus thanks for explanation. Here's why I need to highlight \"AND\". Part of my code search utility is to highlight search term in the source files (SQL, C#, JavaScript). I know the start and end indexes of the search term hits and insert html tags before and after the hit. These tags are <kbd> but can be <span> or anything. That all works fine, but I want the source files syntax-highlighted with Prism and I also need the search hit highlighted at the same time...\n. @nauzilus that's fantastic, exactly what I need. Thank you very much!\n. ",
    "nsklaus": "i'm still having the problem with \"<\".\nforgive me i'm not that much skilled, but here's my problem:\ni'm pulling snippets of code stored in mysql. (bash, python,..)\nand when i try to display some code with this:\necho \"<br>\".$myrow[\"body\"].\"<br>\";\nthe data pulled from mysql look like this:\npass script to ssh:\n<pre><code class=\"language-bash\">ssh host -l user $(<cmd.txt)</pre></code>\nbut in the browser it get displayed like this:\npass script to ssh:\nssh host -l user $(\neverything after the < is missing on that line.\nwhat can i do about it ?\nthanks\n. thanks for the quick reply but,\nif i do that, the output in the browser is not highlighted anymore. it shows a flat line like this:\npass script to ssh.<br /> <pre><code class=\"language-bash\">ssh host -l user $(<cmd.txt)</pre></code><br /> <br />\nno highlight, no newline, just a long raw string.\nhere's the line i used with php:\necho \"<br>\".htmlspecialchars(nl2br($myrow[\"body\"])).\"<br><br>\";. that's not possible, my whole article is stored in the DB.\nthat would put the whole article inside <pre><code> and try to highlight it. that is not reasonable.\nwhat i'm describing here about storing whole blog article in DB is very common thing. \ni have part of the article that need highlighting, and some other part that are just text.\nfor what it's worth, i used to do it with syntax highter. it worked that way. geshi and some other highlighter i tried worked too.\nyou're sure about that answer you gave me ?\nor am i missing something ?\nif i do like you said: my whole blog entry will be highlighted as if it was a giant code snippet... thanks for the reply Golmote, but,\nthat would mean i would be storing escaped code & text in DB.\ni was reading on stackoverflow this is the kind of thing i'd want to avoid.\ni have reverted back my site to previous highlighter, the one from Gorbatchev. Prism looked nice, but i cannot seem to be able to use it right now. i will have to see if i can find a workaround all this problem i was describing above.. the only thing i can think of, is to grab the body of the blog entry off the DB, and then parse it to isolate bits between  custom tags then i would need to replace the custom tags with <pre><code> </code></pre> . this is a bit of a hassle. unless i can figure something easier, i think i'll stick with what i have at the moment. thanks for the help though.\n  . ",
    "JustinBeckwith": "Thanks for the awesome feedback.  I updated the PR with all of the requested updates.  Let me know if there's anything else!\n. That was an oversight :) Thanks again!\n. ",
    "egut": "Ohh exactly what I was looking for, any idea when it will be merged?\n(As I'm currently using bower so its nifty if I don't have to modify files within bower components)\n/BR\n. ",
    "stubbornella": "Hi @LeaVerou, \nThis is the PR I was telling you about. It makes a gulp task for publishing your packages to npm. We made you an owner of all of the Prism packages, does it look like it's working on your end?\nCheers,\nNicole\n. ",
    "valorkin": "@Golmote please take a look at this PR\n. @Golmote now prismjs can be used with web pack require see here\nI will create a PR to marked lib, and prismjs can be used as highlighter for markdown code peaces,\ncurrently have to use\n``` js\n// marked renderer hack\nmarked.Renderer.prototype.code = function (code, lang) {\n  var out = this.options.highlight(code, lang);\nif (!lang) {\n    return ' ';\n  }\nvar classMap = this.options.langPrefix + lang;\n  return '' + out + '\\n\\n';\n};\n```\nand\njs\nmarkdownLoader: {\n    langPrefix: 'language-',\n    highlight: function (code, lang) {\n      var language = !lang || lang === 'html' ? 'markup' : lang;\n      var Prism = require('prismjs');\n      if (!Prism.languages[language]) {\n        require('prismjs/components/prism-' + language + '.js');\n      }\n      return Prism.highlight(code, Prism.languages[language]);\n    }\n  },\nbut in general I like PrismJs more over other similar tools :)\n. @Golmote updated, please review\n. ",
    "westonganger": "I created a new pull request. Someone please advise me if there was a way I should have done it to update the this pull request\n. ",
    "JoshuaKGoldberg": "That was a fantastic turnaround time, thanks so much!\n. ",
    "VitaliyR": "Any updates on this one? \n. @Golmote one more update - I've updated test.html with support for testing plugins. I've tested in different browsers - everything is fine for me :) \n\n. @LeaVerou, definitely, I will separate them soon when I will have time for it.\nAbout class name. It was just my decision. I can make it to be automatically, if you wish so. \n. Okay, so I've separated updates to test.html to separate branch/pr at https://github.com/PrismJS/prism/pull/592.\nAlso I have updated current one, so now it is determining automatically soft-wrap as @LeaVerou proposed.\n@LeaVerou, @Golmote, what can you say about this? \n. @Golmote the previous implementation was just about it - just when you adding a class - everything is rock & roll.\nWe can also move computed style to afterHighlight hook, so it would check if the block has proper white-space - and if it is - just add a class to it. (and, also, we can move back lineNumberSizer to afterHighlight hook). So, in the _resizeElement we would just query for .line-numbers.break-word (or whatever class name) and thats it.\nWhat do you think? \nP.S. Yes, already removed that gitignore from my branch, sorry for that.\n. @Golmote wow, man, 2.5 years. Amazing, I'm already married and visited 8 countries by this time :D. @LeaVerou, @Golmote \nIn the scope of PR https://github.com/PrismJS/prism/pull/584 there are updates to the test page which is adding support of testing the plugins.\nIn the same PR we can push this one too.\n. @Golmote I've merged your changes into this branch\n. @Golmote any updates?\n. @Golmote, sure, take your time. Maybe you have propositions how to make it better?\n. Oki, here're few changes.\n\nPromises fixes\nCheck if plugin has css file and only then load it\nRemoved localStorage stuff from this PR. FYI: Updated PR and replied to your comment. @Golmote https://github.com/PrismJS/prism/pull/1194. @Golmote Thanks! PR fixed. I've revert rename and, also, found that we can even don't rename it at all - anyway if these plugins used together, line highlight won't need data-start attribute at all. \n\nAnd thanks for showing me that silly mistake, removed it.. So, guys, what do you say? Should we wait two years for this one? :D. @Golmote thanks for finding! Indeed, I've encountered a bug. So, I've pushed fixes for it, which are also includes other bugfixes related to compatibility issues between this two plugins. \nAlso, I've created a hook for line-numbers - in the case, when line highlight is loaded before line numbers. It could be if user manually connects ",
    "nuba": "+1! :)\n. ",
    "siavashs": "I seems line highlighting does not work properly when soft wrap is enabled.. ",
    "miguelcobain": "Awesome!\n. ",
    "miketaylr": "I can no longer reproduce on http://prismjs.com/test.html, so assuming that page was updated--lgtm! Thanks!\n. ",
    "kytrinyx": "Thanks!\n. ",
    "RunDevelopment": "@mAAdhaTTah Is this going to get merged anytime soon?. @mAAdhaTTah I don't see why we would need #1554 after this.. Well, it is fixed in JavaScript but not C#.\nThe title ~is~ was kind of ambiguous.. It seems like this bug is caused by #1492.. @mAAdhaTTah I'm quite busy at the moment, so it might take a while until I get to it.. Looks good!\nWell, that's all I can do for now. I will get back to you when I'm a little more comfortable with bash.. I added support for foreach variable declarations and improved the number highlighting.. Maybe I should explain the main part that matches almost every class name. That is this:\njs\n/[A-Z]\\w*(?:\\.\\w+)*(?:<(?:[^>\\n=;{}]+|>(?=\\s*(?:\\[\\s*(?:,\\s*)*\\]\\s*)*[,.>?)]))+?>)?(?:\\.\\w+)*(?:\\[\\s*(?:,\\s*)*\\])*/\nSeems complicated? Things get a little easier when you take out the part responsable for generics. Then we get:\njs\n/[A-Z]\\w*(?:\\.\\w+)*(?:\\[\\s*(?:,\\s*)*\\])*/\nNow that's friendlier. (I removed the redundant (?:\\.\\w+)*)\nAll this does is to match classes, subclasses and their namespace. At the end we include possible array brackets and that's it.\nOk back to the part for generics:\njs\n/(?:<(?:[^>\\n=;{}]+|>(?=\\s*(?:\\[\\s*(?:,\\s*)*\\]\\s*)*[,.>?)]))+?>)?/\nThe main problem here is that we try to accomplish the impossible. We try to match structures like Foo<A<B<C<D>, E<F<G>, H>, I<J<K<L>>>>, M>> which require a context free grammar with regular expressions. \nHave fun with that, because regular expressions can't count the pointy brackets!\nAnd fun I had. What I did, was to say that there are only a limited number of characters which can follow after a >, if that > is not the one closing the initiale class name.\nThis yields quite good results but is neither perfect nor very fast. In my testing it's on average about 2~5 times slower than (?:<[^>]+>)? (which can't match nested generic types). In certain edge case it also matches too much but that can be avoided by using lookarounds and cleverly ordering of the different patterns.\nI know that this is far from perfect but it work quite reliably in all of my tests and code examples.\n. I'm also thinking of adding real support for nullables, because with C# 8.0 coming it might be important. \nNeedless to say, this will make thinks even more complicated.... > Do people really do 5 nested levels of generics in real-world code?\nI certainly hope not, but generics can get messy. (Hopefully not that messy...)\n\nlike 2... or maybe 3. Above, the regexp will get really ugly\n\njs\n/<(?:[^<>]+|<(?:[^<>]+|<(?:[^<>]+|<[^<>]+>)+>)+>)+>/\nI settled for 4 as the maximum depth. A depth of 3 should be enough for everything I do and 4 should satisfy even hardliners. It's probably a little overkill but better safe than sorry.\nI also choose to not do any other validation as before to include things like arrays, tuples and nullables. This means that it also includes trash like Foo<.............>, but we're not a code validator, are we?\nBtw. That beauty above is 9 characters less than its predecessor. . Now there is a small problem. Consider the regex for generic methods simplified for a max depth of 2:\njs\n/\\w+\\s*<(?:[^<>]+|<[^<>]+>)+>(?=\\s*\\()/\nJust try to match the text\nfor (Int32 i = 0; i < count; i++); foreach (Foo e in Elements);\nand see how long it takes for you. It will terminate returning that no match was found, but only after exponential time.\nTo match this text it will take my computer approximately 30 minutes.... Update:\n\n\nThe solution to the backtracking problem was actually quite simple:\njs\n/<(?:[^<>]|<(?:[^<>]|<(?:[^<>]|<[^<>]+>)+>)+>)+>/\nRemoving the + behind almost all of the [^<>] solved it.\n\n\nNamespaces and using directives are now highlighted.\nI assumed that using aliases are always used for types. They could be used for namespaces, but that's rarely done.\n\n\nTo write less code I made a replace function which inserts the source code of regular expressions into another regular expression. It's done using placeholders and simple text replacement, but it works quite well and helps to save both file size and time. Now we can easily change the definition for commonly used parts of expressions (e.g. class name) without having to worry if the same definition was also used elsewhere.\nIt's simple and has its flaws, but it's really useful when handling more complex language definitions. Maybe other language definitions could also profit from this (or a better version of it).. So I removed support for explicit implementation, because there are too many false positives. It might be added again in the future once features like #1472 exist.. I will redo this PR once #1538, #1664, and #1679 are through.\n. I'd like to suggest the following system:\n\n\njs\n'positive-number': {\n    pattern: /(-)?\\d+/,\n    lookbehind: true,\n    lookbehindDirection: false\n}\nThe default value for lookbehindDirection is true, representing a positive lookbehind. false will represent a negative lookbehind.\nThe first capturing group will be optional to represent a matched or not matched lookbehind. If the lookbehind is positive, the first group will be optionally optional.\nAn expression will be considered a match, if wholeExpressionMatches && (firstGroupMatches ^ !lookbehindDirection) is true.\nBackwards compaitibility\nIf the lookbehind is positive, the first group will be optionally optional, meaning that it can be optional to be more consistent with the way negative lookbehinds will work, but does not have to. This is to achieve backwards compatibility.\nA non-optional positive lookbehind groups will behave as they do now, but optional ones won't. If not matched. they will not be ignored (current behavior) but instead considered non-matching.\nA possible fix is to simply wrap a new capturing groups around the optional one and to make optional one non-capturing.\n(As a less verbose alternative for lookbehindDirection: false, one could use lookbehind: -1). Sure, I can take a shot at implementing this. \nAlso: Yes, lookbehindNegative is better.. First of all, I like this RP. \nWe could use this to fix the false positives of keywords in parameter names (like in the API docs). You don't currently do that, but we could.\nNow for the execution:\n\nI don't get why you don't just put everything you don't want (function name) in lookarounds?\nWe don't you just make one 'parameter': [ /* patterns */ ]? This will save you from using this many aliases.\n\nApart from that, I like it.\n(Even though this might not equate to much because I'm not a maintainer or anything...). @RexSkz \n\nBecause we need to identify function name too, function name is also wrapped in parameters. This is not the best idea, but I can't find another way.\n\nI meant that despite the name parameter, you not only match the parameters, but also the function name itself. This is somewhat confusing, so I wanted to suggest, that the function name (and trailing spaces) should be included into a lookbehind.\nI don't know if this approach given us trouble identifying the function name itself, so maybe I'm overlooking something?. @RexSkz \nNot problems, just the suggestion to replace (?:async(?:(?:\\s*(?=\\())|\\s+))?(function with (?:async\\s*)?(?:\\bfunction. It's less verbose and easier to understand imo.\nAt last, a question:\nOne of your expressions uses a bunch of keywords to avoid matching stuff like if(abc){}. Why did you use this specific subset of JS keywords?\n````js\n/((?:\\b|\\s|^)(?!(?:await|delete|export|for|if|new|return|switch|throw|typeof|while|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]\\s)(\\s)[^\\s()][^()]?(?=\\s)\\s{)/. @mAAdhaTTah Yep, I think this is ready to go.\n\nMaybe it's time for JS-Extras? (Especially when considering #1468.). > maybe that PR is extensive enough to break it out into a separate language?\n@mAAdhaTTah Do you mean the Regex one? If so, then I agree but I think we need to discuss how that language should look like because the JS regex syntax is a very stripped down version of the syntax other languages (e.g. Java, .Net) use. (And they are not necessarly compatible with each other...). @colshacol \nYou have to import import \"prismjs/components/prism-markup\"; markup before JSX (and change the highlighted language to jsx) and it will work.. Too late it seems.\nI'll make a new PR.. @jcubic \nNumber 2 is already addessed in #1556.\n(And Prism doesn't split the code by lines before processing.). #1444 covers both generic classes and return types (generic or not).. Thank you! \nBut this still needs rebasing before we can merge this.\nI don't know why Travis is taking the day off but it should test your branch.. Perfect!\nThank you for contributing!. Regarding the quantifiers:\nI think that it's a good idea to keep them separately, but *, + and ? (for optional) are also quantifiers, so we should include them as well. \nAnd when we include those, then maybe we should include ? (for lazy) as well? I'm not really sure, what do you think?\nRegarding the escapes:\nI still think that we should put anchors and default character classes into their own category, as they are not really escape sequences.. @RexSkz \nYou are absolutely right. charset has to be run before escape. (I forgot to mention it...)\nDon't worry, take your time ^^. @RexSkz \nLooks good!\nFrom a correctness point of view, this PR is ready for merge, but the maintainers might have a thing or two to say about it.. This is already captured by #1682.\n@RexSkz\nThank you for your hard work!. This is contained in #1473 . Closed because of #1679.. 7. I added support for underscores in numeric literals.\n    The pattern for these numbers is actually simplified to decrease its size and complexity. It will match invalid numeric literals.\n1. There are now tests for packages and functions (normal and :: syntax). I originally imagined this as an extension of existing languages, but making them into their languages might be better idea. \nLike this we could also support wildly different styles, which might be necessary if we ever wanted to support a language where there is no one dominating standard.\nUsing this approach we could do it like this:\njs\n// Prism.languages.java\n'doc-comment': {\n    pattern: /\\/\\*\\*[\\s\\S]*?\\*\\//,\n    greedy: true\n},\n...\nSomething like Prism.languages.javadoc would then add itself as inside.. My idea is to make a base language javadoclike (similar to clike) and derive different languages from there. \nThe base language (e.g. javadoclike) will add itself to supported languages (e.g. Java) and its derived languages (e.g. javadoc) will overwrite it.\nLike this, both the user and the language creators have a little more freedom.. I'm closing this now because you can have a much nicer syntax with ES6 tagged template literals.. @ybiquitous \nPlease also run gulp to generate the minified files.. This certainly is an interesting option.\n@mAAdhaTTah What do you think?. That's because the browser will interpret <String[], List<String> as an HTML tag.\nJust escape all < with &lt; and it will work as expected.. @mAAdhaTTah \nTests were added. Misclicked. Fixed ;). Hmmm. It seems like gulp-eslint is incompatible with NodeJS v4 because it uses the spread operator.\nAny idea on how to fix this?. ESLint dropped supporting Node.js 4 in April.. Definitely, yes.\nI simply looked through the list of ESLint rules picked out what I thought was useful.\nAlso, there is the issue that (because I used the VSCode auto formatter) all pairs of 4 spaces are converted into one tab, breaking the tabs for indent and spaces for alignment rule. \nI will have to manually reintroduce that before we (hopefully) merge.. @LeaVerou \n\n229 files changed?!\n\nWell, almost every language definition, plugin and most of the minified files thanks to \"no-useless-escape\".\n\nI would prefer to pave the cowpaths and pick rules that are actually mostly enforced already, than to make such extensive changes to the codebase.\n\nI don't think that that is possible. Many language definitions have vastly different from e.g. core and javascript (which I consider exemplary files) when it comes to spacing.\nEven your suggest rules caused like 1k warnings and a few hundred errors if I remember correctly.\nThe point is that most files are going to change if we introduce ESLint, so why not consider this a stylistic spring cleaning. The rules are still up in the air and I will gladly implement the style we decide upon.\n\ne.g. enforce quotes in object keys?! Why?!\n\nDo you mean \"the names of tokens are surrounded by single quotes\"?\nThe rationale behind this is to clearly distinguish between token names (e.g. class-name, number) and Prism properties (e.g. pattern, rest). This makes language definitions way easier to read imo.\nTo be clear: This only applies to language definitions.\n\nAlso, our indentation is not tabs, it's smart tabs, i.e. tabs for indentation and spaces for alignment.\n\nWell, it still is \"no-mixed-spaces-and-tabs\": [ 2, \"smart-tabs\" ]. (\"indent\" cannot have the value \"smart-tabs\")\nBut you are right that right now, we don't use smart-tabs because I used to VS Code auto formatter to fix the spacing of most files and as mentioned before, converts 4 spaces into one tab. Bye bye spaces for alignment.\nI actually plan to reintroduce the spaces before we (hopefully) merge but I want to apply that rule to all files consistently and not just to core. (And even core ignores that rules in many places.)\nBut because there is no nice fixable ESLint rule for that (at least nothing that I know of), it is going to be tedious manual work, so I want to do that right be merging so that there isn't even the possibility that I will have to do it again.\n\nI suggested what I consider a good starting point above, but did not see a response. [...] Do you disagree with any of the rules there?\n\nI actually used your suggestion as the starting point and went from there. Some rules I had to change (\"quotes\": [1, \"double\", \"avoid-escape\"]) and others I added.\nBut since you don't even recognize it anymore I suppose I overdid it a little...\n\nIs there a reason you feel we need more rules?\n\nI simply consider many rules of ESLint to be very useful and think we should encourage contributors to follow best practices and avoid possible errors (by force).\n\nComments would also be useful for reviewing this [...]\n\nI honestly did not know that this was possible with ESLint because JSON does not allow comment by default. \nI will add them when I have time.\n\nI also disagree with using errors for this.\n\nI made this decision with Travis CI in mind because if a build fails, the contributor will see that change is required without anyone having to tell them. This is supposed to speed up the review process as the linter will point out common mistakes like wrong indentation.. @LeaVerou \n\nI disagree with blanket adoption of \"best practices\" lists. We should evaluate each of these practices and see if we want it in our project.\n\nYou're exactly right. This is what I also intended to do.\n\nIt's very annoying if a syntax error is highlighted the same way in my editor as a stylistic error.\n\nThat's true. Warning it is then for most stylistic rules. I'd still like to keep things like indent as an error.. Closed in favor of #1796.. We could modify components.json and give languages with extras an appropriate new field.\nExample:\njs\n\"css\": {\n    \"title\": \"CSS\",\n    \"option\": \"default\",\n    \"peerDependencies\": \"markup\",\n    \"extensions\": [\"css-extras\"]\n}\nWe could then modify the download page to mark every unselected language extra (e.g. CSS extras) that has a selected main language (CSS).\nTo mark extras we could e.g make the name bold or change its color.. @mAAdhaTTah \nTest were added.\nI'm looking forward to the review.. @mAAdhaTTah \nIsn't the label supposed to be needs review ?. @johng-cn \nWell, I'm looking forward to this too but someone has to thoroughly review it. Unfortunately, @Golmote is quite busy right now, so it might take a little while.. @mAAdhaTTah \nVariables are now assigned on a separate line.. @mAAdhaTTah \nHahaha. Happens to the best of us.. @mAAdhaTTah \nOk done.\nUnrelated: Maybe we should expand the tests for django. I just made a mistake messing up the language definition a little. It wasn't detected by the tests.... That's right, we should land #1501 before this.. Using a little copy function, I compressed AsciiDoc even further. This should also be a plus in terms of maintainability.. Done.\nDjango is now left unchanged.. >  They're components that are modified by the component when it's added.\nThat being the case, one would expect, that e.g. markup has to be loaded before css, right? Because otherwise css cannot modify markup.\nBut when you move css above markup in components.json, css will be loaded first when downloading prism.js. No nice <style> tag.\nPeer dependencies don't do anything for the download page, so what do they do?. I'm currently implementing #1475, so I have a lot of peer dependencies.\n~~When will this be ready, or should I try implementing it myself?~~  (I don't know about babel though.)\n(Just out of curiosity: Is there anything checking that there are no circular dependencies? ...apart from a stack overflow?). I went ahead and fixed the download page. \nBabel is still an open issue but I don't have any experience working with it.. I found an other issue related to peer dependencies:\nThe Test Drive page doesn't handle peer dependencies at all. This is very similar to the problem #1417 solved.. On an unrelated note: \nI really have to say that renaming components to config is very confusing... Among other things...\nBut I'll try.. Thank you very much.\nES6 isn't a very common sight for me so it takes some time to get used to, but I get it now.\nHowever, I have to say that I am shocked by the lack of strict indentation conventions ;). @mAAdhaTTah \nIs there anything else that has to be done?. Here is a minimal example showing the bug in action:\n\nLanguage definition\n\nI used aliases for styling.\n\n```js\nPrism.languages['greedy-test'] = {\n    'a': {\n        pattern: /'[^'\\r\\n]*'/,\n        alias: 'comment'\n    },\n    'b': {\n        pattern: /\"[^\"\\r\\n]*\"/,\n        greedy: true,\n        alias: 'string'\n    },\n    'c': {\n        pattern: /<[^>\\r\\n]*>/,\n        greedy: true,\n        alias: 'keyword'\n    }\n}\n```\n\n\nCode:\n<'> '' ''\n<\"> \"\" \"\"\n(Each line is one example.)\nResult:\n\nNotes:\n1. The order of a and b is not significant. They just have to be before c.\n2. Both example lines of code are independent of each other.. What are the use cases of this?\nLet's take e.g. NUMBER:\nWhat should it be like? Only decimal numbers? If so, are floating point numbers include (with or without exponents)? What about constants like NaN, Infinity or \u221e?\nAnd when you think about hexadecimal and binary numbers, and optional underscores within numbers and the whole thing becomes a mess. (And I don't need something like \\d+)\nI don't think that there are many places where we can get away with 'number': Prism.NUMBER or even 'number': [ number-style 1, 2, 3, 4, simple pattern for edge cases ].\nPatterns like COMMENT or STRING look more promising but they also will fall short in many cases.\nThe cases where you can easily share patterns are between languages with very similar syntax and these are already taken care of by Prism.languages.extend.\nSo, where will they be used?. > Prism.or(Prism.NUMBER, 'NaN', 'Infinity')\nDoesn't this imply that NUMBER will be a rather broad pattern, matching all kinds of numbers? \nSo in general, are we going to tolerating false positives to increases the applicability of these constants?\nIt might be ok because we don't valid syntax, but do we really want to be that inclusive?. > How does it imply that?\nIf NUMBER didn't include stuff like e.g. hexadecimal numbers, it wouldn't work for JS.\nOr did I take your example too literal? If so, I'm sorry.\nBut I would still like to hear the answer to the other questions. \ud83d\ude04. The keywords function could then look like this:\njs\nfunction keywords(keywords, caseInsensitive) {\n    keywords.generate = function (keywords) {\n        return RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', caseInsensitive ? 'i' : '');\n    };\n    return keywords;\n}. Which browser are you using?\nI can confirm this bug on FireFox, but not on Chrome.. How did you solve it?. The one from my commit?. Ok, thanks for the clarification.\nThis commit is not the final version yet, so I would like to ask you to wait until I publish the final version.\nYou can still use that commit, but be sure to update to the latest version of Prism once the final version has been included. (Likely in a few days). We will close the issue once the final bug fix has been include, so you can leave it open.\nYou're welcome ^^. No, it's still part of it.\n& is included in [^@;{}()], so nothing changed apart from performance. I don't know why it was extra in the first place.... @verfriemelt-dot-org \nCould you please also update the keyword_feature test for plsql?. > so I could understand if you would reject that PR\nYou did nothing wrong. Other languages have huge keyword list too and with a few adjustments, we can make the list a little shorter. ;)\nOk, right now this PR needs a few changes:\n\n\nWe have 757 keywords. This will blow up the file size but with some tricks, we ought to be able to manage it.\n\nMerge them all keywords into one pattern. \nThis will eliminate the overhead that comes from /\\bword/i. Just make one pattern like before: /\\b(?:word1|word2|...)/i. This alone will save us 34% of the minified file size.\nTry to group similar patterns together.\nE.g.: ANALY[SZ]E, TYPES?, CHARACTER_SET_(?:NAME|CATALOG|SCHEMA), INTERSECT(?:ION)?\nThis will yield especially good results for long keywords. This grouping method is quite tedious to do, so don't overdo it.\nNote: The method used for the last example will only be really efficient if you save >=6 characters.\n\n\n\nThe same also applies to our 81 operators.\n    Same as above: Merge all into one pattern and try to group things together.\n    E.g.: <[-#?]?>, #[-#<>=]?\nBe careful when you merge the operators into one pattern! You can trick the otherwise greedy RegEx engine into matching less than it could have. Order matters!\nE.g. /##|###/.exec(\"###\")[0] == \"##\" but /###|##/.exec(\"###\")[0] == \"###\"\n\n\nYou don't need to do Prism.languages.plsql['keyword'] = [ ... ]. You can just add 'keyword': [ ... ] anywhere to the Prism.languages.extend('sql', { ... here ... }) object block. (Same for operators)\n\n\nWith these techniques, we should be able to half the current file size to about 5~6kb. Relatively big but manageable.\n(And don't forget to update the minified file ^^). I can reproduce this error with neither the Prism master branch nor your fork on Windows 10.\nCould this be a Linux specific problem?\nWhat Linux distribution are you using?\nUpdate:\nI just made a VM with Ubuntu 18.04.1 LTS and again I cannot reproduce the error.. You might want to give updating npm a try. \nThe current version 6.1.0. Your version seems to be 1.4.21.. This is a prerequisite for features like the keyword-lists mentioned in #1495.\nBut I'm closing this now anyway because new functions like the mentioned keywordlist are required for this to have any benefit at all.. Alright, so I extended the scope of this PR to include Prism.util.clone as well. Just some caching and naming.. Cannot reproduce.\n\nAre you also using some plugin or do have other code which also produces the error?. Thank you for providing this example.\nI have found the problem and will provide a fix soon.. While the simple example of\nsql\nSET @'quoted-variable' = 3;\nSET @'quoted-variable' = 3;\nis now working correctly, due to a greedy matching bug (#1492) the other example is still not highlighted correctly.\nsql\nCREATE USER 'user'@'server-ip' IDENTIFIED BY 'password';\nGRANT ALL PRIVILEGES ON scheme.* TO 'user'@'server-ip' WITH GRANT OPTION;\n\n. I used a littly trick to by pass the greedy bug. I won't work 100% of the time but it should solve your issue.\n\n. I know any styles for quoted-variable either. It's just a temporary name because it has to be matched before string.\nBut we could move variable before string as well and merge the two into one variable token without any side effects (I think).. I did implement the merged variable token.\nIs it ready to merge then?. Cannot reproduce using Test drive.\n\nThe rust language definition your using seems to be outdated (or modified).. I will close this issue now because neither can I reproduce the issue now nor was I able to reproduce it in August. It's really hard to follow this up because the Redux team switched to Highlight.js since.\nAlso, it seems to be highly unlikely that Prism adds any characters on its own.\nIf the issue should ever come up again, feel free to reopen this.. Unfortunately, it is not possible to test this feature with our usual tests.\nBecause this PR only adds an alias to a token, the alias will not show up in the JSON (see jsx/tag_feature.test which I did not have to change, but is styled like a class in the test page.).. > But you could confirm that  styles Button as a class-name?\nDepends:\nWith the current implementation of this PR and the test suite, definitely no.\nBut, we could change the implementation of this PR so that it will replace the string Button with a new token with the type class-name. instead of adding an alias to the tag token. That will be testable.. One last note:\nBecause the implementation is now different, the CSS selector to highlight the class-name token of tags has to look like this:\ncss\n.token.tag > .token.class-name {\n    color: red;\n}. Oops, my bad. I forgot to delete it.. It'd be good to also have a proper workflow to compile the SCSS files if we were to add this to Prism.\nOtherwise, these files just sit there, not doing anything.\nThe repo you mentioned links a gulp plugin for SASS, so maybe we could use it. \nThoughts?. Thank you for this PR!\nBut you seem to have forgotten to add the minified files. Could you please commit them as well?. If you want to complete the list of builtins and keywords you could also add the is and keyof keyword as well as the unknown and never builtin.. I also think that the syntax coloring of VS Code is just gorgeous.\nBut you don't have to change the core for that. All you need is a little hook like this:\n```js\nPrism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'typescript') {\n        return;\n    }\nfor (var i = 0; i < env.tokens.length; i++) {\n    var token = env.tokens[i];\n\n    if (typeof token === 'string')\n        continue;\n\n    if (token.type === 'keyword' && /^(?:return|if|else|other special keywords)$/.test(token.content)) {\n        var specialKeywordAlias = 'specialKeyword';\n\n        if (!token.alias)\n            token.alias = [specialKeywordAlias];\n        else if (typeof token.alias === 'string')\n            token.alias = [token.alias, specialKeywordAlias];\n        else\n            token.alias.push(specialKeywordAlias);\n    }\n}\n\n});\n```\nAdd this hook before you do the highlighting and all keywords matching the regular expression will get an additional CSS class which can be used to change the color of certain keywords.\n(This ought to work. I haven't thoroughly tested it though.). @19majkel94 Maybe you should open an issue for that first.\nThis feature will not only change the feel of Prism (if we were to also change the themes) but it will also be quite hard to maintain with my quick and dirty solution.\nA better way to achieve this would be to split the keyword lists into two and to mark special keywords with an alias. If we were to do this (and also were to change the themes), we should probably add this for a bunch of languages to keep the feel of Prism consistent. \nI think? \nOthers might have better ideas (that don't require to change like 50 languages...).. Ok, I looked into it and the problem has to do with how greedy matching is currently implemented. We might need to change that behavior but for the time being, there is an easy workaround:\nYour pattern requires that it can match the def keyword, so searching for functions before the keywords are matched solves the problem. There are some patterns which are inserted before keyword already, so you can insert your pattern (without greedy: true) after symbol.\nNow, because of the way insertBefore is implemented, you will also have to delete Prism.languages.ruby.function before you insert your new function.. @cbothner \nTwo things concerning the insides of function names:\n\nPunctuation: Right now . is considered punctuation, but it is not inside of function names.\nKeywords: The self keyword is not highlighted.\n\nBoth are illustrated by your example:\nruby\ndef self.bar\nend. @cbothner \nYeah, I see the problem. How about this:\nWe give up on function make it function-declaration (or a more fitting name) which will look like this:\njs\n'function-declaration': {\n    pattern: /(\\bdef\\s+)[\\w.]+/,\n    lookbehind: true,\n    inside: {\n        'function': /\\w+$/,\n        rest: null\n    }\n}\nand at the end of the language definition (after string) we include:\njs\nPrism.languages.ruby['function-declaration'].inside.rest = Prism.languages.ruby;\nAnd like that, we should have a function-declaration wrapper for those who want one color, and the more detailed contents for anybody else (default).\n(It seems to work but I haven't thoroughly tested it). @cbothner \nYes, you did exactly the right thing.. I haven't found any language or plugin which currently has the need to add aliases to tokens, so there is no code to be simplified right now.\nHowever, #1519 has to do exactly that and it can be compressed into a single if-statement using addAlias:\njs\n// class-name alias to tags which refer to classes\nif (token.type === 'tag' && token.content.length === 2 && token.content[0].type === 'punctuation'\n    && typeof token.content[1] === 'string' && /^[A-Z]/.test(token.content[1]))\n    token.addAlias('class-name');\n\nI added addAlias because after writing #1519, I wrote another hook and had to implement it again. This PR is for eliminating this redundancy.\nPlus, I think that something as basic as adding an alias to a token should be simple.. Well, your right.. I can imagine 3 solutions for this:\n\nThrow an error.\n    We would detect duplicates and throw if we were to find one. Let the creator of the language decide how this case should be handled.\nRemove duplicates from inside.\n    We remove all duplicates from the grammar of inside and then go on as usual. This ensures that new patterns are both at the correct position and not overwritten by old patterns.\nDon't insert duplicates.\n    If we detect that a token of insert is also present in inside, we ignore it.\n\nI personally prefer option number 2 because it's what I intuitively expected.\nThoughts?. In JS, catch is only used in try...catch blocks so we could say, that it will only a keyword if it's preceded by /}\\s*/. (Same for finally.)\nLike this, we should also be able to eliminate most false positives from identifiers and functions.\nOr am I forgetting something?. All done.\nI choose to use pushState, so you can switch between languages by going back and forward.. > I don't suppose we can capture this in a test somehow?\nWe could do that with ease. The last expression of #1530 is basically that.\nBut, I don't think that there are any tests concerning Prism core functionality.\n\nDoes this have a real-world impact on any of the language definitions?\n\nNo, it doesn't have any impact right now because there is an easy workaround:\nSetting token.inside.rest after insertBefore was called.\nThis is also the workaround I used when discovering the bug.\nI believe, there are also other languages using this workaround.. Ok, so I went through all languages and found that only JS and PHP used the workaround I described.\nWhat's even more interesting is that some languages didn't even care about the bug. They used different versions of their own language and the tests did not capture it.\nThe ones I found are Crystal and Ruby.\nDespite the different language definitions, I wasn't able to find any differences in their examples. We should probably extend the tests of both languages.\n\nBtw. JS and PHP both fail their tests without the workaround using the old insertBefore.. I'm actually planning for a few other features which will make this completely unnecessary, so I'm closing this now.. It intrigues me that the build failed despite the fact that I only changed some comments...\nIt seems like the npm install -g gulp command took longer than 10 minutes. How can that be?\nNode v6 took each about 7 minutes for npm install and nom install -g gulp.. Now it worked again.\nAnd it took at most 20 seconds for the npm install commands.. This is just an idea for now but with ES6 tagged template literals we could make a function Prism.regex which will behave like Prism.patterns.build but has a nice syntax:\n```js\nconst foo = /\\bfoo\\b/;\nPrism.regex\\w\\s${foo}\\s; // returns /\\w\\s(?:\\bfoo\\b)/\n// instead of\nPrism.patterns.build(/\\w\\s<<0>>/, [foo]);\n```\nThere a few drawbacks (~flags~, browser compatibility, no regex syntax highlighting).\nThe fact, that the tag approach does not use regex literals is both an advantage (no regex compile overhead) and a disadvantage (syntax check only during runtime, no syntax highlighting).\nEdit: Flags can be declared using regex (no flags), regex.i, regex.m, and regex.im.. One note on the required dependency system:\nI'm currently working on fixing #1490 and mAAdhaTTah/babel-plugin-prismjs#3. To do that, I wrote a new implementation of widely used dependency-related methods, which are used by the website, loadLanguages and our testing suite.\nThis means that it will be very easy to implement such a feature.. It's been a while since I last looked at this. \nI'd actually like to make a few changes, so please wait a little bit longer.. Alright, I think this is ready now.\n@mAAdhaTTah You might want to take a look at the changes I made.. Wow.\nThat was the fastest merge I ever experienced. \ud83d\ude04. And I really want to thank you for that! \ud83d\ude04 . Thanks for the implementation!\nNow, there a few things we will have to do before we can accept this:\n\nAdd Racket to components.json. Otherwise, Prism doesn't know your language definition exists.\nRun gulp via the npx gulp command. This will rebuild Prism and (among other things) add a minified version of your language definition.\n\nIt would also be great if you were to add a few tests.. @Eugleo Sure, take your time for the tests \ud83d\ude04\nBtw. Don't worry about the failed checks. It's not your fault.. @Eugleo \n\nWill you merge now or after the tests?\n\nI'm sorry but I can't merge anything. A maintainer will have to do that. But before that, we will thoroughly review your language definition.\nI will most likely review it in the next few days or so.. @Eugleo \nWhile using Scheme as the base for Racket is not a bad idea, please use the Prism.languages.extend method to do so.\nAlso, Racket supports some features which Scheme does not and they should be added as well (maybe not all of them).\nI can really recommend Beau\u00adti\u00adful Racket which has short explainations on all Racket features many of which differ from Scheme. E.g. name keyword arguments, condinitionals with [], and more.. @Eugleo \nIt's totally fine to keep it minimalistic for now. We can always add more complex language features after we have base support.\nIt's just that some Racket features (like conditionals with []) will break Scheme highlighting.\nI don't know Racket very well, but I think that we should cover commonly used features.. @LiarOnce \nPlease do not modify the README.md in this PR. I will make a separate one for this change.. @LiarOnce \nWhat IDE (or text editor) are you using? . @LiarOnce \nYes, but you will have to tell VS Code that you want to use tabs, otherwise, it will insert spaces.\nTo change the indentation, select the prism-gml.js. On the bottom right you will see a button Spaces: 4. Click on it and select Indent using tabs and select 4. \nPress Alt + Shift + F and done.. You can also enable the Render Whitespace preference in VS Code to see different white spaces. (I recommend the boundary option.). @LiarOnce Yes, that worked.. @LiarOnce \nYou said that point 6 (extending clike) was completed and also added the dependency, but you did not actually extend clike. You have to use Prism.languages.extend to do that.\nI just noticed that there is no documentation for that function, so here is a quick explanation for our example:\nextend('clike', { /* your gml language */ } will create a new language based on clike. \nTokens that do not occur in clike will be appended at the end (all in order). \nTokens in clike that also exist in GML will be overwritten, so that our your new GML tokens will be used. (The clike token order will be kept.)\nSo our new language extending clike could look like this:\njs\nPrism.languages.gml = Prism.languages.extend('clike', {\n    'keyword': ...,\n    'number': ...,\n    'operator': ...,\n    'constant': ...,\n    'variable': ...,\n});. @LiarOnce \nYes, that was my bad. It has to be 'clike', not 'c-like'. I fixed that in the original example.. @LiarOnce \nWorks like a charm!\nNow, I have a few questions and suggestions:\n\nDidn't you already move var and enum into the keyword pattern?\nI noticed numpad(?:0|1|2|3|4|5|6|7|8|9) in constant which is the same as numpad\\d\nAlso in the constant pattern: Can [0-9]+\\.[0-9]+|[0-9]+ really match anything? All numbers are matched by number already.. @LiarOnce \nNice!\n\nI noticed that you accidentally reverted the alias you added. Also you will have to rebuild Prism by running gulp.\nAfter that is done @mAAdhaTTah or @Golmote can merge it.. No, \\w is equal to [a-zA-Z0-9_]. - is not included.. @mAAdhaTTah Are we going to merge this?. Closed because #1651 was merged,. @ripperhe \nUse objectivec after the first tripple backtick.\nThe language names are the same as you would use after language- in code or pre tags.. @ripperhe That's because you are using https://unpkg.com/prismjs@1.15.0/ which does not include this PR.. @ripperhe \nThis is an open pull request as of right now, which means that until properly reviewed by one of the maintainers, it is not even clear if this PR is going to be included into Prism's code base.\nIt is also very likely that there will be changes made to this PR during the review process.\nI highly suggest you wait until this PR is reviewed and (hopefully) included in the latest release (which might take a few weeks). \nIf you really need this feature for your website right now, you can do the following:\n1. Download this branch of my fork.\n2. Include the downloaded files into the JS folder of your website.\n3. Change all references to prism-markdown.min.js from https://unpkg.com/prismjs/components/prism-markdown.min.js to path_to_js_folder/prism/components/prism-markdown.min.js.. > write Markdown & it'll autoload the languages you need\nI also thought about but for that would we need the Autoloader itself to expose the API and find a clever way to highlight the code asynchronously after the markdown pass.\nI'll make an issue after this is merged.. @DavinaLeong\n@bennycooly Is correct. It is also stated in the how to use section of the command line plugin:\n\nAdd class command-line to your <pre>.\n\nThe command-line-prompt class is used internally by the command line plugin and it should not be possible to enable command lines via this class. \nThis is a bug.. Syntax highlighting is supposed to improve readability by using different styles according to the category of terms.\nI don't see how highlighting words which have a special meaning in some programming languages is improving the readability of plain text. Not highlighting anything is a better choice than highlighting randomly IMO.\n\nYou can, however, use inheritance to define a quasi default language.\nPrism will go up the DOM tree if the <pre> or <code> don't have a language-xxxx class until it finds such a class or reaches the root. So you can define a language-xxxx class for <body> to have a quasi default language. (This only works if the <pre>/<code> is actually part of the DOM tree of course.)\nThe quasi default language can then be your favorite functional language or a new custom language which highlights these common functional keywords.. @sheljohn \nYes, that's normal. Most Prism languages have some requirements, meaning languages which have to be loaded beforehand.\nIn our case: cpp depends on c. But we also have to consider transitive dependencies, because c depends on clike. This means that the load order has to be clike before c before cpp.\nIf you want to know the dependencies of a language (not including transitive ones), select the language on the Prism example page. If the language has any dependencies, they will be displayed like this: (for C++)\n\nDependencies: The following dependencies need to be loaded before this component: c.\n\nAlternatively, you can open components.json which holds the dependencies of all languages in the require property.. @sheljohn \nDependencies should not be included in each .js files because this will increase the overall amount of bytes which have to be loaded. \nAs an example, let's say we want to highlight C++ and Java code. Both languages require clike, so both would include it. This means that we might be loading a lot of redundant language definitions.\nI suggest using the Autoloader plugin. It will automatically load necessary language definitions and all dependencies for you. (You don't even need to include C++ yourself.)\nhtml\n<script src=\"https://unpkg.com/prismjs@1.15.0/components/prism-core.min.js\"></script>\n<script src=\"https://unpkg.com/prismjs@1.15.0/plugins/autoloader/prism-autoloader.min.js\"></script>\n<script>\n    Prism.plugins.autoloader.languages_path = 'https://unpkg.com/prismjs@1.15.0/components/'\n</script>. @mAAdhaTTah \nThere is another variable named script.. @marc-medley \nMay I ask what the * property refers to? I can't find it in the linked Wikipedia page.. @marc-medley \nThank you!\nWe might as well also add strings before they destroy our comments.. @marc-medley \nBig changes, like adding a new language, require a proper code review, which is typically done by one of the maintains. But Prism's maintains seem to be very busy at the moment and they also have quite a list of PRs to go through.\nSo, maybe a few weeks? \nIt's hard to tell.. (I'm going to assume that tokens is a language definition (e.g. C++).)\nIf you add the patterns for tab and space like in the above code, they will be appended at the end of the language definition meaning that they will be matched last.\nAs a consequence, ^ (in the beginning-of-string sense) will match after tokens like ) because of the way Prism splits the input code making lots of substrings.\nTo fix this, it should be enough to make both tab and space greedy (greedy: true).\nThe problem that will still remain is that leading spaces inside of tokens (e.g. multi-line comments) are not going to be matched.\nA better approach is to let Prism tokenize the code with the vanilla language definitions (so without your tab and space). Then you let Prism tokenize the code a second time with only your tab and space. With the positions of all leading tabs and spaces, you can now modify the token stream of the highlighted code (the one tokenized first).\nThis is way more complicated than your approach, but it will work correctly in (I think) all scenarios.\n\nAnd the m flag does not make a difference because if present it makes ^ a lookbehind for \\r and \\n which are also included in \\s. So it doesn't matter in this case.. I think that this might be a nice extension of the Show Invisibles plugin.. Could you please explain the issue?\nAll I can see is Prism not highlighting incorrect syntax, which is to be expected.\n. @bilalmalkoc @mAAdhaTTah Can this issue be closed?. You can create your own bundle on the download page to get it right now.\nWe don't have a date for the new release yet (#1713).. @19majkel94 \nSince you mentioned my comment, I should make a correction. At the time I wrote this comment, I did not know of the existence of the Highlight Keywords plugin which allows you to highlight specific keywords via CSS.\nTo achieve the violet color one could use the following CSS rule:\ncss\n.token.keyword-import,\n.token.keyword-export,\n.token.keyword-from,\n.token.keyword-return {\n    color: #F0F;\n}. @wibimaster \nThank you for this addition!\nCould you please also update the keyword tests?. @wibimaster \nPerfect!\n@mAAdhaTTah I think we are ready to merge.. callback according to the documentation:\n\nAn optional callback to be invoked after the highlighting is done. [...]\n\nNow, when exactly do we consider that \"highlighting is done\"? Right now that is after the highlighted code is inserted into its element.\nWouldn't it be better if the callback were invoked after the complete hook was run so that all plugins (including line numbers and command line) take effect?\n\nAlso, callback is invoked in line 252 and line 270 so we have to change both.. @Jocs Well, I can do that but please run gulp before.. I looked at the code and everything seems to be allright. The Prism website works as expected.\n@mAAdhaTTah What do you think about this change?. Using the comments pattern from C-like will work but since JS (and therefore JSON) does not have all syntactical features of C, we can simplify the pattern. This should also work:\njs\n'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/\nAlso, property has to be greedy because it is not the first pattern anymore.\nBtw. Are you interested in making this a PR?. You're right that I just treated the symptoms of the underlying problem but that's because the underlying problem is not really fixable.\nThe regex in the before state did not match because a regex literal has to be preceded by a character like =, ,, +, /, etc. (not including alphanumeric characters!) followed by any number of spaces (\\s). But because of the single-line comment, the character preceding our regex is an s, so no match.\nTo correctly match the regex, we have to detect the preceding single-line comment.\nJust include a //.* into the lookbehind and done, right?\nWell, no. Consider the following example:\njs\nvar foo = 1, g = 2;\nvar a = /* // this will make our lives hard */ 5\n/foo/g;\n(GitHub gets this wrong. It thinks that /foo/g is a regex.)\n// can also be part of strings and even regexes to make matters worse.\nSo to correctly match the regex we need to correctly match the preceding single-comment for which need to consider comments, strings, and regexes.\nPut simply, it's impossible (IMO) to fix this bug with the methods Prism currently offers.\n(And I don't see the point in opening an issue which we cannot fix.). CIL is a language on its own and C# is to CIL basically what C is to Assembly; Namely, C# compiles to CIL.\nSo, I don't think that extending C# is going to help very much.. Looks good!\nThere are still a few things I noticed:\n\nPlease use non-capturing groups, if the group is not used as a lookbehind.\nAgain, please remove the package-lock.json and revert the changes made to prism.js. They simply do not belong to this PR.\nCould you please consider adding some tests? It'd be great to have a test to cover all functions and keywords to verify that everything is matched correctly.. Here's the documentation on how to add tests.. Prism test cases usually test specific features (e.g. numbers, comments, small aspects of a language in general). So you don't have to come up with a minimal program which includes all features. Just write small tests which test one feature each.\n\nFor examples on how to do tests right, I suggest looking at the JavaScript and C-like tests.. @sbrl Could you please fix the instructions test. After the test passes, we should be able to merge this.. @sbrl \nTravis gives you the output of npm test, so you can run all tests locally on your computer with the npm test command (or npm test -- --lanuage=cil for CIL related test). No need to ask Travis.\nThe error message you get is because the token stream (the one that Prism currently creates; L1996) is not equal to the expected token stream (the JSON part of your test file; L1999).\nThe following red and green lines are a git-like difference view.\nI suggest to use the local test.html to visualize your test case, so you can make out the errors.\nAdjust the tested instruction list and the function pattern until everything is highlighted nicely. \nThen you can use my favorite dirty trick:\nInsert your updated instruction list into the instructions test file, run npm test and let it fail. Then you can just copy the token stream Prism outputted into the error message and insert it as the expected token stream into your test file. (Maybe do some formatting.)\nStill, be sure to check that the token stream is correct.\nI hope that helps.. @sbrl I'm glad that it helped you out! (I also know how annoying it is to re-select the language, hence #1529)\nThe tests all pass, but I have another nit before we can merge this: \nThe function pattern still contains a capturing group (i[1248]?|r[48]|ref). Please make it non-capturing.. While playing around I also found a few minor things:\n\nobject, method (for overwrites), native (IntPtr), literal (consts and enums), valuetype (enums), runtime (delegates), and implements (interfaces) should be keywords.\ntry-catch/try-finally blocks don't have catch/finally highlighted.. @sbrl Looks good!\n\nI found another missing keyword :) char. Also, all of the unsigned integers are missing, so uint and all uint<N>.\n(And please update the keyword test to include the newly added ones.)\nDon't worry, this is going to be the last nit.. Looks good! Tests pass. @mAAdhaTTah I think we are ready to merge this.. @sbrl You've done everything we asked of and you definitely have my OK. \nIt's just that @mAAdhaTTah seems to be quite busy at the moment and hasn't had the time to look at changes himself.\nSo don't worry! This has not been forgotten.. @outsideris I'm sorry, I missed your last commit! I will review the changes ASAP.. Maybe another example: hcl.keyword.inside.type is currently defined as follows:\njs\n'type': [ // start of array\n    {   // one item\n        pattern: /(resource|data|\\s+)(?:[\\w-]+|\"[\\w-]+\")/i,\n        lookbehind: true,\n        alias: 'variable'\n    }\n] // end of array\nBut this can be replaced with a simpler expression:\njs\n'type': {\n    pattern: /(resource|data|\\s+)(?:[\\w-]+|\"[\\w-]+\")/i,\n    lookbehind: true,\n    alias: 'variable'\n}\nOther examples like this can be found on line 7, 19, 32, 36, and 48.. @outsideris \nGood!\nThe things left to do now are:\n\nInterpolation as discussed here.\nHere-doc strings.. Any JSON which has properties that contain comment-like text will be highlighted incorrectly.\nE.g.\n\njson\n{\n    \"//\": 5,\n    \"/*\": \"I have a problem\",\n    \"*/\": null\n}. The code looks good and there is even a test to check the new feature.\nSo, @mAAdhaTTah. What do you think?. This might actually cause problems for all the people (like me) who use language-markup for HTML code because that's how the language is called by Prism. Also, there are a bunch of other languages that expect markup to behave like html.\nBut you pointed out a legitimate problem, so how about this solution:\nWe will keep markup, html, svg, etc. as it and make it so that xml will treat <style> and <script> like any other tag. \nWould that solve your problem?. Perfect!\n@mAAdhaTTah I think we are ready to merge.. This bug seems to be cause by the spaces between the opening pre and code tags.\nhtml\n<pre class=\"line-numbers\">\n    <code class=\"language-python\">from __future__ import unicode_literals\nPrism does not expect that there are any characters between the pre and code tags.\nSimply removing these spaces will solve the problem.\n\nOne small correction: The first line also overlaps with the list of line numbers; it's just that the first line is also indented with 4 spaces, so it looks right but really isn't.. <div aria-hidden=\"true\"> has the property pointer-events: none. This is necessary because of the div being on top of the text which makes interacting with the text below impossible otherwise.\nBut one JavaScript-side effect of pointer-events: none is that all mouse events are suppressed, so no mouseover :(\nHowever, you can use the mouseover of the underlying pre can calculate if the current pointer position is inside (or \"over\") the div.. @bit-player I cannot reproduce your issue. It works perfectly fine on my side (using Prism test drive) because the pattern fragment you showed is preceded by (?:\\b(?=\\d)|\\B(?=\\.)), so it is guaranteed that the first character of a number is a decimal digit or a decimal dot.\nIs your version of Prism up to date?. This is because the git uses mostly non-standard token names which are not supported by any Prism themes.\nYou can edit the Okaidia theme to highlight the different parts of git commands and their outputs to your liking. You can find all tokens names in the language definition along with comments explaining every single one of them.. Well, there are results for comment, string, and parameter.\nThe rest of the language is for the outputs of git commands which are pretty hard to fit into the current style system of Prism themes. \nSo leaving the choice of color to the user doesn't seem like a bad idea IMO.\nYou are right in that it is a little confusing that the themes of Prism do not cover/highlight every (little) feature Prism supports. But as these themes are intended to be modified by the user, I think that it is alright for them to be minimalistic.. > It would be surely better if the standard commands had directly specific syntax colors according to theme chosen pro install.\nThat's true but doing so for every little feature of every theme would blow up the file size of the themes and it makes them hard to maintain. So for simplicity's sake, only the most common features are supported by Prism's themes.. So, and, not, and or should be keywords (e.g. in VB does the same and it does look better as keywords). Ok, good point.\nBut splitting the (Prism) Python language?\nI don't quite get the critique of raw_input. It's highlighted in Python2 and because it is not supported by Python3, nobody will use it, thus nothing is highlighted.\nAre there a lot of case where Python2 and Python3 use the same syntax for different semantics? (I don't know python that well.). You could use the Highlight Keywords plugin to change the style of print depending on the Python version.. I'm closing this now because without knowing the Python version of the code, it is impossible to when print is not a function.\nExample:\npy\nprint('foo')\nIt's impossible to tell from syntax alone whether it's Python 2 or 3.\n\nAs I state before:\nYou can change the highlighting of the print keyword specifically using the Highlight Keywords plugin and a bit of CSS.. Here is my full review:\nYour current implementation does not support object construction and array slicing.\nThese two and my comments are all I could find. Really good work!. Looks really good @TMWilds!\nPlease resolve the merge conflict, so we can merge this.\nAlso, could you please add .02e2 and 2. to the number test?. The only real conflict is in prism-show-language.js. \nTo replace\n```\n<<<<<<< master\nvar Languages = /languages_placeholder[/{ ... }/]/;\n======= \nvar Languages = /languages_placeholder[/{ ... }/]/;\n\n\n\n\n\n\n\nmaster\n```\n\n\n\n\n\n\n\nwith\nvar Languages = /*languages_placeholder[*/{ ... }/*]*/;\nWhat's between the brackets doesn't really matter, cause gulp will fill it in.\ncomponents.js and prism-show-language.min.js are both generated so running gulp will resolve these.. Thank you for contributing!. You need to escape any < character with &lt; because of HTML.. You seem to be using some kind of UI/CMS (I don't recognize it). \nPrism itself works (I use it myself) and said utility function is definitely executed. So what you are using to add the code or some steps afterward cause the problem.. @suvamkundu \n\nIf util is replacing it then why should I do it again?\n\nYou are not doing it again. This method is called after the code has been highlighted, so it has nothing to do with the input. You have to escape any < character because otherwise, the browser will incorrectly parse your HTML-document. It's quite unlikely that this is the cause of your problem.\nHow are you using Prism? Are you calling the Prism.highlight/ Prism.highlightElement (or any other highlight method) yourself?\nIf you are not doing that then there is something else you can do to find out if Prism is the problem. However, for this to work, you have to have the development version (can be downloaded here).\nOpen the development console in your browser on your webpage, open prism.js in the source tab and set a breakpoint on line 219 inside highlightElement that reads\njs\nvar code = element.textContent;\nThis is where Prism gets the text from an HTML-Element.\nIf code were to be a plain text version of the code to be highlighted (as it normally would be) then Prism is the problem.\nIf not, then Prism is not to blame and either your code or a library you are using is causing the problem.. I'm going to close this now, as it's not an issue caused by Prism.. @Mogztter No, plugins are not tested (at least right now).. It seems like the current implementation of Keep Markup assumes that every tag contains at least one character, causing #1618.\nThis PR does handle the case of the last tag correctly but it handles some other case worse than the current implementation.\n\nOrder swapping:\n    The order of all zero-length tags which have the same start position will the reversed. E.g.: \n    <x></x><y></y> -> <y></y><x></x>\nTag inclusion:\n    Zero-length tags after a closing tag will be included into the preceding tag (in reversed order). E.g.:\n    <x>foo</x><y></y><z></z> -> <x>foo<z></z><y></y></x>\n\nTag inclusion is probably just a symptom of #1640.\nRight now, this implementation does more harm than good, so we will have to address the above points before we can merge this.. Of course, you can submit the proposal but it will require to implement a very different test suite than the one we have right now. So, no small task.\n\nOtherwise it will be a nightmare to fix\n\nI don't see why that is. A little hacky but I just made a little test page based on the index page of the plugin. Insert the markup to be tested and verify yourself. Not pretty but it works.. If you want more fine-grained control about the way keywords are highlighted, I recommend the Highlight keywords plugin.\nAlso, token parameter is kind of covered by #1446.. Insert this code into prism-javascript.js in line 37 and you will have most of the features.\n\nThe code\n\n```js\nPrism.languages.insertBefore('javascript', 'punctuation', {\n    'definition': {\n        pattern: /([{,]\\s*)[a-z]\\w*(?=\\s*:)/i,\n        lookbehind: true,\n        alias: 'property'\n    },\n    'access': {\n        pattern: /(\\.\\s*)[a-z]\\w*/i,\n        lookbehind: true,\n        alias: 'property'\n    },\n    'variable ': {\n        pattern: /\\b(?:window|document|navigator|performance|localStorage)\\b/,\n        alias: 'dom'\n    },\n    'console': /\\bconsole\\b/,\n    'spread': {\n        pattern: /\\.{3}/,\n        alias: 'punctuation'\n    }\n});\n```\n\n\nBut let me warn you: \n1. I did this quick and dirty, so it's not perfect and no guarantees. \n2. It really doesn't look nice IMO, you will probably have to adjust the default theme you're using.\nKeep in mind that if you want to use the minified file, you will have to rebuild Prism (refer to README.md).. > Spread wasn't working, adding it before operator works though.\nMy bad.\n\nAlso need _$ in the property regex.\n\nJust insert them into the character sets. Change [a-z]\\w* to [a-z_$][\\w$]*.\n\nHowever, the property definition doesn't work if there are comments within the object.\n\nThat's a really tough one. \nYou see, the pattern tries to eliminate false positive from uses of the conditional operator foo ? bar: 0 by saying: Every property definition has to preceded by either a , or { which works fine as long as you ignore comments.\nWe could adjust the lookbehind ([{,]\\s*) to be something like this ([{,]\\s*(?:\\/\\/.*\\r?\\n\\s*)?). But then the property definition has to be matched before comments which causes all kinds of problems.\nSo a perfect solution is probably impossible.\nYou can however say: My code is well-formatted as such: property: value (no space before the colon) and cond ? ifValue : elseValue (space(s) before the colon).\nThen you can remove the lookbehind and change the lookahead from (?=\\s*:) to (?=:).. > How would I make \"value\" receive the string token?\nThis will come soon to CSS Extras with #1638 and #1671.\nThe only difference is that I highlight your \"value\" not as string but as value (that's the token name).. I gotta say: The code on your website looks really good!. @atomiks Can I use this for a new language JS Extras?. Thank you very much!. I'm going to close this now because #1743 and #1671 are merged.. @mAAdhaTTah Could you please merge this before I resolve the other merge conflicts? \nIt has the rebuild for #1532 in it. (I forgot)\n(And I'd rather not merge my own request...). Thank you for your contribution!\nHowever, there are a few problems with this PR we will have to resolve before we can merge this:\n\nPlease run npx gulp to generate the minified files.\nPlease adjust the rust keyword test to include the new keywords.. I also removed the old known issue which works now.\n\n\n. It is still necessary because it has 3 feature (empty triple-quoted strings, the example, and a fix for comments) of which this only covers the example part.. Thank you for contributing to Prism!\nBut you only need to modify prism-core.js and plugins/file-higlight/prism-file-highlight.js. \nThen you can use the npxgulp command to rebuild Prism and copy your changes to to prism.js.. Captured by #1755.. Thank you for your contribution!\nPlease also run gulp to generate the minified files. After that, we are ready to merge.. Tests failed because I deleted the branch faster than Travis could fetch. (I will keep that in mind from now on.)\nMaster branch tests pass, so no problem.. Please re-run gulp and then I will gladly merge this.. I should have asked this a lot sooner but is that even valid (X)HTML?\nIt looks valid but I wasn't able to get any browser to parse a CDATA in a script element (in HTML) correctly when containing a \"</script>\" string. I think HTML ignores CDATAs because script and style tags are parsed like CDATA content anyway (without the closing ]]> of course).\nI wasn't even able to get XHTML to recognize CDATA at all.\n(All findings for Chrome, FF, IE)\nSo, what is this change for?\nBecause if it's for XML, then you won't like #1603.. > Are you sure you weren\u2019t accidentally loading the XHTML document as HTML?\nPretty sure. I got an error message that the <!CDATA[[ inside script cannot be parsed which I don't get in HTML.\nBut maybe I'm doing something wrong. Could you please provide an example of a valid XHTML page with CDATAs?\nEdit:\nI got it working. It's <![CDATA[ and not <!CDATA[[. My bad.. Any number of CDATA can now be included in <style> and <script> tags.\n\nThe whole job is done by Prism.languages.markup.tag.addInlined (rename this?) which adds support for languages which are contained by special tags such as <style>.\n(I actually wanted to add this function to markup instead of markup.tag but that means that addInlined will be lost after insertBefore.). Sorry @ExE-Boss!\nI completely forgot about this. I'll make it ready tomorrow.. There is a difference between the test page and the download link you provided.\nThe test page uses the unminified Prism files and the download page uses the minified ones by default, so there could be a problem with the minification process but this is highly unlikely. \n(I just tested the minified files using you download link and everything worked.)\nCan you please verify that the after-tokenize hook is run. (You will find this function somewhere in you prism.js file.)\nAre you using any plugins?. Already addressed in #1651.. The line highlight not scrolling with is a feature, I think. The plugin page also shows this behavior.\nIt does not seem to have anything to do with the line numbers plugin, see the example here.\nAlso, your website does not load Prism correctly, so I cannot reproduce the described bug.. The bug seems to be caused by the Coy theme you based your theme on.\n\nIs this correct behaviour as its specification?\n\nNo, it isn't. My bad. I misunderstood you thinking that you meant horizontal scrolling. (Well, they are both affected.)\nThe missing vertical scrolling is definitely a bug.. Could you please add a description on how to reproduce the bug?\nA link to the website or JSFiddle showcasing the bug would be even better.. @mAAdhaTTah The problem of spaces between <pre> and <code> has also caused some problems in the past, I believe. Why not do a kind of preprocessing step to correct that automatically?. It's important because of the way the line number plugin is currently implemented:\nThe line numbers list you see starts at the <code> element and goes down from there as a block. This means that any initial offset (e.g. the indentation of <code>) will move the whole line numbers list to the right.. > the solution is in formatting the HTML properly, not magically transforming the HTML for them\nThat's true.\nThen I'll just leave the magic to Normalize Whitespace as you mentioned. \ud83d\ude09. This bug seems to be specific to Chrome. FF and Edge do not show this bug.\n\nprettify.css overwrites the font-size property of code elements which causes this drift.\nRemoving line 80 in prettify.css or adding a line font-size: inherit; in line 38 in prism.css will solve your problem.\nThis is not a general fix.\n~~It seems like every font-size which is not a multiple of 8px will cause this behavior.~~\n\nUpdate:\nThis is definitely a bug of Chrome. The font sizes at which the lines will go out of sync depend on both your current zoom-level and your system's DPI scaling settings.\nBut it seems that choosing a multiple of 2px will hide this bug on 100% DPI scaling with no zoom.. Are you ok with this @LeaVerou ? I'm asking because of your comment here.\n(Same for #1650). Since people seem to be interested in this feature, I'm going to merge this if @mAAdhaTTah gives his OK.. You load both languages and CSS Extras will add new features to CSS, so you just use the normal language-css class.. Are you using the Autoloader?\n\nis the name language-css-extras?\n\nIt's css-extras, yes but there is no language.. That seems to be a problem with the library. Seems like they don't support loading language extensions.\nIt would probably be best to open an issue over there.. > Is this (^|\\n) the right way to match the beginning of each line for PrismJS?\nNo, use ^ in combination with the m flag. This flag changes the meaning of ^ and $ from start of text and end of text to start of line and end of line.\nThat should solve all of your other problems as well.\nAnd one hint: ^\\s{0,3}[\\w\\d\\[\\]()@-]*[>%$#] can include up to 3 line breaks (even with the m flag), meaning that \"\\n\\n\\n#\" will match. \\s also includes line breaks, so ^[ \\t]{0,3} ... will probably serve you better.. The problem seems to be the .typeset code rule in style.min.css which sets font-size: 1.06667rem.\nBut I don't know why line number has a problem with that.. This is actually quite useful. While making a few of the new language definition, I could have used this a few times.\nOf couse this is not the solution to all our problems but it does solve quite a few of mine:\n\nProblems I lose sleep over \ud83d\ude2a\n\n### Delimiters\n\nThere are some language syntaxes which have code surrounded by some delimiter.\n\nAn example is [JS template strings](https://github.com/PrismJS/prism/blob/master/components/prism-javascript.js#L60) where the string content and interpolated expressions are surrounded by backticks. Here I want to focus on the `${ expr }` which are used for interpolation. We highlight the surrounding `${` and `}` as [`interpolation-punctuation`](https://github.com/PrismJS/prism/blob/master/components/prism-javascript.js#L67).\nThe token use a fairly common way to match surrounding delimiters:\n\n```js\n'interpolation': {\n    pattern: /\\${[^}]+}/,\n    inside: {\n        'interpolation-punctuation': {\n            pattern: /^\\${|}$/,\n            alias: 'punctuation'\n        },\n        rest: Prism.languages.javascript\n    }\n}\n```\n\nThe only problem is that this will match you as many of the left delimiter (here `${`) as you'd like. E.g. `${${${}`.\nSure, this is not valid syntax in JS but something similar is for other languages. See regex charsets below.\n\nThe correct way would be to use a wrapper token like so:\n\n```js\n'interpolation': {\n    pattern: /\\${[^}]+}/,\n    inside: {\n        'wrapper': {\n            pattern: /(^\\${)[\\s\\S]+(?=}$)/,\n            lookbehind: true,\n            inside: Prism.languages.javascript\n        },\n        'interpolation-punctuation': {\n            pattern: /\\${|}/,\n            alias: 'punctuation'\n        }\n    }\n}\n```\n\nThis is rarely done however because you have to write first pattern at least twice.\n\nUsing groups and the proposed alias syntax, it is quite easy to implement correctly without the wrapper token:\n\n```js\n'interpolation': {\n    pattern: /(\\${)([^}]+)(})/,\n    groups: {\n        $1: ['interpolation-punctuation', 'punctuation'],\n        $2: Prism.languages.javascript,\n        $3: ['interpolation-punctuation', 'punctuation']\n    }\n}\n```\n\n\n### Regex charset \n\nLet's take an example from the regex language: [Charsets](https://github.com/PrismJS/prism/blob/master/components/prism-regex.js#L31).\nCharsets can be negated like this `[^not these chars]`. Now I want to match `[` and `]` as `punctuation`, `^` as `charset-negation` and the content as something else.\nThis is pretty easy to implement using groups:\n\n```js\n'charset': {\n    pattern: /(lookbehind)(\\[)(^)?(?:...content...)*(\\])/,\n    lookbehind: true,\n    greedy: true,\n    groups: {\n        // starting from $2 because of the lookbehind\n        $2: 'punctuation',\n        $2: 'charset-negation',\n        $3: { /* grammar for charset content */ },\n        $4: 'punctuation'\n    }\n}\n```\n\nBut it's __impossible__ to do without them (right now) while also avoiding empty tokens and false positives.\n\n_Btw. You can have it working with either no empty tokens or no false positives but not both. (I won't proof this here, but try implementing it yourself and you'll see that you can always find a valid JS regex charset which produces false positives or empty tokens (or both if you're really unlucky). For those curious, I choose to avoid empty tokens.)_\n\n\nI understand that this adds a lot of code to Prism core (809 bytes or +13%) for just one feature which not even all languages profit from but I also consider this a very useful feature which can save me and others writing language definitions a lot of trouble. It makes it easier to write correct language definitions without the repetition of (more or less) complex patterns. It even enables matching which it's possible right now (charset example and this) using only one regex execution and a few string operations.\nI should also mention that I only applied it to Java stack traces until now because I wanted to avoid merge conflicts (didn't quite work out) but as shown above, this feature can be applied to other languages as well.. This approach has the problem that when scrolled to the bottom of the page, the TOC is under the footer.\nA better (but also more complex) solution would be to move the TOC to the top while scrolling using JavaScript, so that toc.style.top = max(0, header.height - scrolled) + 'px'.. Sorry for not getting back to you!\nMy problem is that the TOC will disappear at the end of the page. On smaller screens, this might not be a problem but for larger ones, the end of the page comes to you quickly.\nSo how about this: We wrap your bottom: 1%; into a media query with (max-height: 800px) so that only smaller screens have the fix.\n800px nicely picks up the TOC on all pages that use it.. > I think your idea has a problem as well.\nWhat problem?\n\nThe TOC overlaps part of the page for small screen widths.\nIt did that before as well but then it wasn't noticeable.\nApart from that, I really like it.\n\n. Seems like this can be fixed by setting the TOC's box-sizing to border-box and its max-width to calc(48% - 450px - 30px).\n- 30px for the \u00a7 anchor marks.. Also, what do think about making left and bottom fixed px values?\nIt's a little awkward to see the TOC move a few pixels as you resize the page.. Nice!\nCould you please restore the green checkmarks to their former size (400%)? They are not covered anymore, are they?\nAnd please bring back the hover effect. Changing the color instead of the opacity in #toc:hover should do the trick.. I forgot one last thing:\nThe FAQ page treats the TOC as part of the content section. The cool hover effect shouldn't be there.. Thank you for contributing!. This also includes a different version of java.min.js. I don't know why uglify chooses different variables names, but those are the ones you get with a fresh installation, so it should be alright, I think.. This might be interesting for #1070.. Thank you for contributing!\nPlease also add this alias to the asciidoc entry in components.json and run the npxgulp command to generate the minified files.. @ExE-Boss This also won't work well for the download page.. I don't think it's a good idea to say that any word which isn't highlighted as anything else should be a constant.\nLet's say there is a feature of PHP which Prism doesn't support (yet). All of the keywords/names related to this feature will be highlighted as constants.\nToday, these features are type declarations, group use declarations, return types, and type casting just to name a few. These are only partially supported or not at all.\nI encourage you to play around with the examples on the PHP.net page and see for yourself what would be highlighted as constants.\nBut apart from that, isn't it a naming convention to not use lowercase characters for constants?\nEven the page you linked to follows it.. > Should we have single\u00ad\u2011letter constants (X), then?\nSure!. Thank you for contributing!. Don't worry about that.\nWhen you look at the detail, you'll see that all tests passed on 2/4 Node version and the other 2 couldn't find this PR (probably because it was merged already).. It's a good idea to update the PHP keyword. I think we can copy the keyword list you linked to as is (including empty, eval, and so on).\nRegex looks good (sans the PHP 4 keywords). I'm looking forward to the PR.\n\nremove cfunction or add old_function. Both are defined in PHP 4 only.\n\nI think it's ok to remove the keywords of a PHP version for which support has ended a decade ago.\n\nIs it alright to arrange keywords in alphabetical order? Is there a meaning in the current order? Is it connected with optimization?\n\nAlphabetic order is very much appreciated because it makes it easy to spot missing/duplicate keyword (yes, that happens). Apart from that, the order doesn't matter in this case.. Sorry, but I'll give the same answer as @Golmote. We won't change the themes.\nThat aside:\nAdd a <style> tag anywhere after the <link> you load prism.css with and insert the following rule:\ncss\n.token.operator {\n    background: none;\n}\nThat should solve the issue.\nAlternatively, the rule can also be included in another .css file, it just has to be loaded after prism.css.\nAnother alternative is use the rule:\ncss\n.token.operator {\n    background: none !important;\n}\nI don't like !important but like this, load order doesn't matter.. Thank you for contributing!. Closed by #1704.. Thank you for contributing!. Thank you for contributing!. You have to load Java before Scala.\nAlternatively, you can use the Autoloader plugin to handle it for you.. The leading spaces are the problem (I think). Because of them, you don't have any lines with the prefix (out) but a few with the prefix [ ][ ](out) ([ ] for one space).\nAlso, please don't indent your code. For pre elements, every (leading) space counts. They will not be removed as in other tags.. It should work even without the grammar being imported, so I still think that this needs fixing.\nThe first version of my fix can be found here. I will make a PR for this.. Thank you for contributing!. Sorry, but this feature is so new that not even FireFox (64.0.2) supports it at this point in time. It will probably take a few years until the majority of browsers support this feature.\nSo Prism is likely to be stuck with the pseudo-lookbehinds for at least 5 years or so.\nAlso, I don't think that a polyfill is possible for this as the underlying Regex-engine itself has to be changed for this.\nSure, you can implement one yourself in JS but then we don't have to talk about performance.. I was actually also thinking that this might be a good idea at some point. \"The browser (and Node) can optimize way better than we ever could and everything would be so much nicer\", I was thinking.\nBut unfortunately, we can't do this because Prism's lookbehinds are not real lookbehinds; they behave differently.\nTo illustrate this, suppose the following pattern: /(a*)./ which is used to highlight this string: aa.\n\nWith Prism's lookbehind, we find 1 match which is the second a.\nWith real lookbehinds, we find both as.\n\nThe real lookbehind obviously behaves correct but the point is that some patterns actually use this 'incorrect' behavior of Prism's lookbehinds, so we might get different highlighting results depending on the browser (version).\nAnother problem is that real lookbehinds can even access parts of the string before lastIndex. Prism cannot. This means that greedy matching will behave differently. So we would have to change that implementation as well.\nI do think that we should totally go for real Regex lookbehinds as soon as they become available on a majority of browsers. We can then remove the fake Prism lookbehinds and live happily ever after.\nBut until then the hassle of making Prism work with 2 slightly different lookbehinds is just too much to be worth it.\n\nTo be clear:\nOne can use ECMAScript\u00a02018 lookbehinds in patterns right now of course.. @mAAdhaTTah We can't even use it IF we were to abandon IE11. This Regex feature is so new that not even the latest release of FF supports it. Only V8 implements this at the moment.. Nice work.\nWouldn't it be possible to use the C-like function here? I don't know if stuff like Not, And, and so on are called functions here but they do look like it.\nAnd could you please also add an example page?\nAlso, is there a spec for this language?. > There is only an informal spec in the appendix of the course\u2018s accompanying book.\nWell, can't do anything about that.\n\nThe semantics behind And and Not is actually a bit different than the notion of functions. They have to be HDL scripts in the same folder with the same name. Actually, they could be called Bananarama as long as there is a Bananarama.hdl file next to it.\n\nSo the function name has to relate to a file name (excluding builtins like And I suppose).\nI think this pretty much falls within the concept of a function so can we land this feature?. Thank you for contributing!. Indeed! I'll fix it.. Thank you for contributing!. I'll just go ahead and merge this.. > Actually, this does not correctly highlight CSS, right? \ud83e\udd14\nWhat does?. Well, you did remove the CSS part. so that's to be expected.\nBut don't worry, PR is on its way.. Moving this to JS-Extras also means that the createTemplate method which creates the template-string token has to remain in JS. The only lines moved to JS-Extras will be:\njs\nif (Prism.languages.css) {\n    Prism.languages.javascript['template-string'].unshift(createTemplate('css', /\\b(?:styled(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))*)*|css|createGlobalStyle|keyframes)/.source));\n}\nTechnically, I also think that this feature should be moved of JS-Extras. All three lines of it.... Also, JS-Extras has its dependencies set up in a way so that it doesn't affect TypeScript.\nThis feature should also be available for TypeScript, so we would have to either \n\nChange the dependencies and make JS-Extras compatible with TypeScript.\nMake a new language/extension similar to JS-Extras exclusively for JS/TS and JSX/TSX for just this feature (all three lines of it).\nJust leave it as it is now...\n\nIt might seem like overkill, but I think that option 2 is the best one.. @mAAdhaTTah \nConflicts are resolved.\nRegarding offloading the CSS templates:\nHow about we leave it as it is for now (so as a part of JS) and make a new 'language' (something like JS-Templates) in the future which only handles different languages embedded in template strings?\nWhen adding this new 'language' we can add support for Polymer's html as well.. I cannot reproduce this bug. Are you using any other plugins besides Line numbers?\nCould you please provide a JSFiddle (or similar) reproducing it?. I'm going to close the issue then because the cause doesn't seem to be Prism.. Would you like to add a PR implementing your proposed solutions?\n\nnginx doesn\u2019t have [...], booleans, [...]\n\nDon't on and off pretty much behave like booleans?\n\nMaybe it\u2019s better to replace the list with a single regular expression?\n\nThat would be ideal but it's usually quite hard to find this expression.\n\nIs it obligatory to highlight numbers?\n\nNo, it isn't. If they get in your way or produce too many errors feel free to remove or change them.\nPersonally, I would like to see them stay in a stricter form and with units. \n/(^|\\s)(?:\\d*\\.)?\\d+[a-z]*(?=$|[;\\s])/ (with lookbehind: true) should work.. > Sure! Most ideas are already implemented.\n\ud83d\udc4d\n\nBut clike doesn\u2019t implement support for on and off. Anyway, these are only tokens for specific directives.\n\nThis is a suggestion from my side because highlight.js also highlights on and off in the doc.\n\nBut I have doubts about directives. What do you think about searching for directives by their position?\n\nI think it's a good approach but your current pattern does not account for strings:\nnginx\nname ';oh no';\nIt's good to know that the strict comment rules work in our favour here.. > I forgot to mention I also have a greedy string pattern. It catches ';oh no'.\nBut then this causes problems, doesn't it?\nnginx\nname ';oh no' parameter;. This has problems with this:\nnginx\nname \" #foo\"; #bar\nAlso, I don't think that we should capture trailing spaces like in:\nnginx\ninternal      ;\nThis should fix all of that:\njs\nPrism.languages.nginx = {\n    'comment': {\n        pattern: /((?:^|[{};])\\s*)#.*/m,\n        lookbehind: true\n    },\n    'directive': {\n        pattern: /\\b\\w+(?:[^;{}\"'\\\\]|\\\\.|(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1)*?(?=\\s*[;{])/,\n        greedy: true\n    },\n    'punctuation': /[{};]/\n};\nThe lookbehind of the comment pattern is a little more complex so we can avoid greedy rematching which causes #1492. I also simplified the escape rules but that shouldn't cause problems.\nI hope that works!\nAlso, we don't have to concern ourselves about how to parse syntactically incorrect code.. The reason I made these changes to the lookbehind is to avoid greedy rematching:\nBecause comment is matched before directive, it is possible for some comments to be wrong before  directive is matched. E.g.\nnginx\nname \"#foo\"; name; #bar\nThe greedy matching of directive will then 'correct' these wrong matches of comment applying the comment pattern on the text after the current match of directive. We want to avoid this rematching of the comment pattern for two reasons:\n\nPerformance. We match the comment pattern more often than we have to.\nThe bug I mentioned. The bug boils down to the rematching being aborted too early. So there might still be text which has to be matched but it isn't.\n You don't have to worry about this too much though because it's really hard to provoke.\n\nThis is why I want to avoid rematching.\nSo, how does the modified lookahead achieve that?\nIt avoids matching non-comments like this:\nnginx\nlocation = \"/example\" # This is not a comment\n{}\n\n# can be immediately preceded by [\\s;{}], so \\s* doesn\u2019t work well.\n\n\\s* alone doesn't, but because the ^ of (?:^|[{};]) is combined with the m flags, ^ matches the start of the text or the start of a line. And if it's the start of a line, the line is preceded by either \\r or \\n which are part of \\s.\nSo (?:^|[{};])\\s* also guaranttes that the comment is preceded by [\\s;{}]. It's just a little stricter.. > Proof.\nSorry, but I don't see the proof... I assume nginx.conf. Which line?\n\nIt doesn\u2019t guarantee that the comment is preceded by \\s.\n\nWell, true. It doesn't in the case of the start of the file, but that should be it.\n\nAlso, is there a spec page of the NGINX configuration syntax?. These examples I can work with!\nBut, it's the \"/example3\"# from location = \"/example3\"# This is not a comment. There is no space syntactically invalid?. Just to confirm this:\nIt is invalid for a string to be followed by [^\\s;]. So after a string, there has to be a white space or ;.. Alright, assuming strings can indeed only be followed by a white space or ;, this should work.\n```js\nPrism.languages.nginx = {\n    'comment': {\n        pattern: /(^|[\\s{};])#./,\n        lookbehind: true\n    },\n    'directive': {\n        pattern: /\\b\\w+(?:[^;{}\"'\\]|\\.|(\"|')(?:(?!\\1)[^\\]|\\.)\\1)?(?=\\s[;{])/,\n        greedy: true,\n        inside: {\n            'string': {\n                // I assumed that \" and ' can be escaped using \\\" and \\' and that \\ can be escaped using \\\n                pattern: /((?:^|[^\\])(?:\\\\))(\"|')(?:(?!\\2)[^\\]|\\.)\\2/,\n                lookbehind: true\n            },\n            'comment': {\n                pattern: /(\\s)#.*/,\n                lookbehind: true,\n                greedy: true\n            },\n            'keyword': /^\\S+/\n        // other patterns\n    }\n},\n'punctuation': /[{};]/\n\n};\n```\nI tested everything with the examples here and this:\n\n\n```nginx\nevents # A comment\n{\n    worker_connections 512;\n}\n\n# A comment\n\nhttp# This is not a comment. There is no space\n{\n    server {# A comment\n        listen 80;# A comment\n\n        location = \"/example1\" # This is a comment. There is a space\n        {# This is a comment after \"{\". No spaces required\n            return 200 \"Hello, world!\";# This is a comment after \";\". No spaces required\n        }# This is a comment after \"}\". No spaces required\n\n        location = /example2 # This is a comment. There is a space\n        {}\n\n        location = /example4# This is not a comment. There is no space\n        {}\n    }# A comment\n}\nname parameter1;\nname \"parameter1\";\nname parameter1 parameter2;\nname parameter1 \"parameter2\";\nname \"parameter1\" parameter2;\nname para\\;meter1;\nname \"para;meter1\";\nname \"para\\;meter1\";\ninternal;\ninternal    ;\n\n# A multiline parameter\nname \"para\n\nmeter1\";\n\nname {\n    name parameter1  'parameter2' \\; par#ameter3;\n    name parameter1 \\\" 'he\"llo' par#ameter2;\n    name parameter1; name parameter1;\n    name parameter1 \\{ 'hello';\n    name {\n        internal;\n        name parameter1 parameter2;\n        name para;meter1; # An error!\n        name para{meter1; # An error!\n        name parameter1 {; # An error!\n    }\n}\n\nname \"#foo\"; name; #bar\nname \" #foo\"; #bar\nname ';oh no' parameter;\n```\n\n\n. > Your solution is perfect!\nIt isn't...\nThere aren't any comments in the following, are there?\nnginx\nname # foo;\nAlso, I have another question: How does NGINX handle the following:\nnginx\nname # am I a comment;\n;\nAnyway, here's a corrected version. I also updated the name directive expression for the name:\n\n\nOnly `directive` and `directive.inside.comment` changed.\n```js\nPrism.languages.nginx = {\n    'comment': {\n        pattern: /(^|[\\s{};])#.*/,\n        lookbehind: true\n    },\n    'directive': {\n        pattern: /(^|\\s)\\w(?:[^;{}\"'\\\\]|\\\\.|(\"|')(?:(?!\\2)[^\\\\]|\\\\.)*\\2)*?(?=[ \\t]*[;{])/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n            'string': {\n                // I assumed that \" and ' can be escaped using \\\" and \\' and that \\ can be escaped using \\\\\n                pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)(\"|')(?:(?!\\2)[^\\\\]|\\\\.)*\\2/,\n                lookbehind: true\n            },\n            'comment': {\n                pattern: /(\\s)#.*(?=[\\r\\n])/,\n                lookbehind: true,\n                greedy: true\n            },\n            'keyword': /^\\S+/\n\n            // other patterns\n        }\n    },\n    'punctuation': /[{};]/\n};\n```\n\n\n. I applied your fix!\n\n\n```js\nPrism.languages.nginx = {\n    'comment': {\n        pattern: /(^|[\\s{};])#.*/,\n        lookbehind: true\n    },\n    'directive': {\n        pattern: /(^|\\s)\\w(?:[^;{}\"'\\\\\\s]|\\\\.|(\"|')(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\s(?:#.*)?)*?(?=[ \\t]*[;{])/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n            'string': {\n                pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)(\"|')(?:(?!\\2)[^\\\\]|\\\\.)*\\2/,\n                lookbehind: true\n            },\n            'comment': {\n                pattern: /(\\s)#.*(?=[\\r\\n])/,\n                lookbehind: true,\n                greedy: true\n            },\n            'keyword': /^\\S+/\n\n            // other patterns\n        }\n    },\n    'punctuation': /[{};]/\n};\n\n```\n\n\nI just have a bad feeling that \\s(?:#.*)? might cause catastrophic backtracking. So if you find (relatively short) examples which take longer than ~1sec to highlight, please tell me.. Upon testing the two regexes I found that my pattern fails in linear time while yours takes exponential time. So please use my pattern.. Thank you for contributing!. What language are you using to tokenize the code snippets?\nAlso, is that token stream something from prism-react-renderer?. What really bugs me is that the token stream you posted for the first example does not contain template-string tokens. The variable tokens are also very strange, mainly because the JS grammar does not contain a variable pattern.\nThat tells me one of two things: Either you are using the wrong grammar to highlight your code (unlikely but maybe) or something modifies the JS grammar beside you.\nWhat other languages do you have for Prism?\nCould you please tell me the result of this: Object.keys(Prism.languages.javascript)?\n\nIs there a way to insert my rule as the very first rule?\n\nYes, using insertBefore:\njs\nPrism.languages.insertBefore('javascript', Object.keys(Prism.languages.javascript)[0], {\n        // tokens\n});\nBut if you want to highlight things inside of template strings like here\njs\nlet line = `Stay @@@${attr2}@@@ Stay @@@${attr2}@@@`\nthen you should insert these pattern in Prism.languages.javascript['template-string'].inside.. To handle the inside properties, I recommend using Prism.languages.DFS, which can be used to also modify nested insides like so:\njs\nPrism.languages.DFS(Prism.languages, function (key, value) {\n    if (key === 'inside') {\n        this[key] = { ...rules, ...value };\n    }\n});\nThis snippet will handle all languages at once, so you can remove the Object.keys(language) chain and insert this after .forEach(lang => ...).. The top-level group of the expression before the lookahead has to be reluctant because we will match too many spaces otherwise. So +?.. Thank you for contributing!. \ud83c\udf89 . I really like this change but I also think that we should include a punctuation pattern for the dots.. Well, it is as you said, it's easy to add later on.. Thank you for contributing!. Thank you for contributing!. At this point in time, the only languages which have a null token without aliases are JSON and SCSS.\n\nI think we highlight it as a keyword in other languages.\n\nDepends on the language. Most use keyword, some use boolean, few use others.\n\nMight make more sense to change how we highlight in JSON.\n\nI also think it's better for JSON to have null as a keyword instead of changing the themes to include null for a few reasons:\n\nYou only have to change one file. keyword is supported by all themes.\nJS uses keyword for null and JSON is supposed to be a subset of JS (it's not, but almost).\nWe can always use the Highlight Keywords plugin to change the style of null.. > That said, I\u2019d still like to fix highlighting of .token.null.\n\n.token.null is pretty much a non-standard token name, so I think it's ok to ignore it.\nPlus, changing JSON and SCSS is simply easier.. > keyword seems to make the most sense, so maybe we just decide now to consistently use keyword for it?\nWell, it's not that easy... \nMost languages in which null (so similar) is a language construct highlight it as keyword. But we can't just make null a keyword in all languages.\nI.e. in C/C++ NULL is a macro, in PHP it's a constant.\nBut I think that null (or conceptually similar) should not be boolean as in Python (None), SQL, and Twig.. > So we should update the JSON + SCSS languages to give null different tokens. Agree?\nMaybe the alias idea from @ExE-Boss is even better. I mean, we used these token names for quite some time now, so there might be some folks out there how incorporated null into their themes. With an alias, it's unlikely (but still possible) that we break them.. Just for clarification: We are not going to change the themes now, are we? @ExE-Boss @mAAdhaTTah . @ExE-Boss With or without the aliases? Because after the aliases, there's nothing to fix.. So you want to change the look of null to be highlighted the different from keyword, I suppose.\nI think is better if JSON's nulls are highlighted like JS's nulls. Consistency.. I feel like this question should have been asked a lot sooner, but why do you want null to look like boolean?\nNull and true/false are not conceptually close (IMO) and most editors highlight both like keywords, so why boolean?. > I'm personally opposed to changing the theme here\nAgreed. After #1735 there's nothing left to fix.\nI'm closing this now. Feel free to reopen this if further discussion is necessary.. LGTM.\nThank you for contributing!. Thank you for contributing!. Conflict resolved. Yes, but only gulp. This updates mocha and gulp-uglify.. I updated all dependencies now and everything works just fine.\nI just wonder why the minified files changed again.... The failed tests, failed because of git clone... \n2/4 node versions and my local system all passed the tests.. I hope that #1747 works for you!\nIf you were to find any other incorrectly highlighted code snippets, please feel free to open another issue!. > P.S. it would be cool if all I needed to do was pull down a menu at https://prismjs.com/test.html to select the PR, and it loaded the language files direct from the PR.\nThat's a pretty cool idea!. Isn't that YAML and not a docker file?. Cannot reproduce.\n\nTest code:\ngroovy\n// copy code to the dir\nsh \"/bin/cp -a -a ${env.WORKSPACE}/* ${env.GOPATH}/${env.PROJECT_PATH}/\"\n// highlighting error, so here must add an '*/'\nAre you using the latest version of Prism? Are you using any plugins?\nCould you please provide the full example, if possible. Maybe the cause of the error lies somewhere else in the code.. Might have to adjust Pug after #1769.. I was thinking the same but I also think that we should also include templates for other common issue types while we're at it.. Check out the Keep Markup plugin for this.. Ok, I see your issue but I don't think that Prism should just ignore element with languages it doesn't know.\nHow about a CSS class which makes Prism ignore the element in highlightAllUnder and highlightAll? Something like prism-ignore?. Another way would be to use hooks to basically \"get around\" highlighting, ~~but that's a little hacky~~.\nWe could add a filter property to the env of the before-highlightall hook, so you can pass a function which then decides if a given element should really be highlighted.\nThe new highlightAllUnder would then look like this:\n```js\nhighlightAllUnder: function (container, async, callback) {\n    var env = {\n        callback: callback,\n        filter: null,\n        selector: 'code[class=\"language-\"], [class=\"language-\"] code, code[class=\"lang-\"], [class=\"lang-\"] code'\n    };\n_.hooks.run(\"before-highlightall\", env);\n\nvar elements = env.elements || container.querySelectorAll(env.selector);\n\nfor (var i=0, element; element = elements[i++];) {\n    if (!filter || filter(element)) {\n        _.highlightElement(element, async === true, env.callback);\n    }\n}\n\n}\n```\nNote that this does not change highlightElement (which removes the markup) itself. It just ensures that elements which should not be highlighted do not get caught in the crossfire of highlightAllUnder.. js\nPrism.hooks.add('before-insert', function (env) {\n    env.highlightedCode = env.element.innerHTML;\n});\nThis will still execute all plugins (might have problems with command line) AND keep the markup.\nWith a bit of overhead tho.. > A good default would be to automatically skip the highlightElement call for elements which have an unknown language inside highlightAll and highlightAllUnder (but still add line numbers).\nThe hooks of plugins like line numbers are executed by highlightElement, so we can't just skip them (unfortunately).. Thanks for reporting!. I assume that you wrote the highlighted code yourself (because of contenteditable=\"true\").\nThe problem here is that Prism uses a literal string line break (so \\n or \\r\\n).\nBut that is not what the browser will insert when you press Enter. It will insert a new <br> which Prism will ignore (just like all other HTML elements).\nThe best solution, in that case, is to use keyboard events to handle Enter yourself.\nA working example of this is dabblet. The editor code can be found here.\n\nI believe this is not supposed to happen?\n\nIf my assumption is correct, this is supposed to happen.\nOtherwise, please provide the full example producing the bug.. https://cdnjs.com/libraries/prism will work I guess.. Prism will also add the language-js CSS class to the <pre> element.\nCould it be that this changes the white-space property to something which is not pre, pre-line, or pre-wrap?\n\nI will upload a sample in short time.\n\nThank you.. innerText has a few other properties which make it less useful for Prism.\nIt would also change the current behavior of Prism, so for some people out there, this might be a breaking change.\nAlso, you can use hooks to make Prism use innerText.\njs\nPrism.hooks.add('before-sanity-check', function (env) {\n    env.code = env.element.innerText;\n});. > From the description you mentioned I can only read the inteded behaviour and a performance issue.\nPerformance aside: Is breaking change not enough reason?\nAlso, I don't think that it's a good idea for the text Prism highlights to change depending on whether the element is being rendered or not.\nWhat do you think @mAAdhaTTah ?. > <pre> is supposed to retain newline characters\nIt does but only characters.\n\nFrom my perspective I don't see any negative consequences\n\nMy main problem is that textContent and innerText behave slightly differently. Most users of Prism probably wouldn't even notice the change because the <code> element Prism highlights isn't supposed to contain markup.\n( except when it does)\n\nWould you mind elaborating on the issues you see?\n\ninnerText is intended to return the text the user gets when selecting and copying the visible text of an element.\nSo it makes sense that this is what you want. You're writing a text editor, so it makes sense that Prism should highlight what the user sees.\nMy problem is that this not how Prism behaves now. Prism doesn't highlight the text the user sees, but the text which is there (sounds dumb, I know...).\nAs an example: innerText doesn't return the text of elements which have display: none, because they are not visible. Now, how should Prism behave?\nI say display: none shouldn't matter because markup is stripped. \nBtw.: Same problem for display: block where extra \\ns will be inserted around the block.\nNow, the next problem: innerText is only really defined for elements which are visible. As a consequence, its behavior changes depending on whether the element, from which you want the innerText, is visible.\nExample: Let's say we highlight a code element. With innerText we might get different results depending on whether the element is visible (right now) or not. (Happy debugging...)\n(Well and then again: Most users don't care, so why not do them a favor and use what's faster.)\nSummary:\nMy main issue is that the behavior of Prism changes. So we risk breaking the code of a lot of Prism users.\nAlso, there is this more general question of how Prism should behave. Should it highlight the visible text or all text?\n\nAgain: I can see why you want to use innerText in your specific use case but you don't need to change all of  Prism for that. You can use the features Prism already provides to implement this.. > The hook appears to be incorrect. The correct hook name is: before-highlight\nI specifically wanted before-sanity-check because it is executed before (almost) all other hooks and (more importantly) before the checks of highlightElement.\nDid it not work?. I'm going to make a new issue for that.. Thanks for reporting!. > How does this compare to\u00a0#1215?\nI didn't know #1215 exists...\nThe main difference is that I use markup-templating which is usually better suited for this kind of work than extending and modifying markup.. Could you please tell me the value of env.language?\nI'm asking because I can image 2 possible values right now:\n\n\"md\": The after-tokenize hook can't handle the language-md alias ATM. (I will fix that soon)\nundefined: This means that Prism.highlight was called without (or with an invalid) language parameter.. The problem seems to be that the Worker doesn't get the language. env.language isn't supposed to be undefined.\n\nI cannot reproduce your problem. Workers are working fine on my side.\nCould you please provide a full example reproducing the bug?\nThe only real cause for env.language == undefined I can image is plugins. Some hook is probably accidentally overwriting env.language which leads to this bug.\nSo, what plugins are you using? Did you add some custom hooks?. There's the problem:\nhtml\n<script>\n    var text = document.getElementById('test').textContent;\n    console.log(Prism.highlight(text, Prism.languages.markdown));\n</script>\nPrism.highlight requires that you also pass the name of the language as the third argument. That's why the language is undefined. So Prism.highlight(text, Prism.languages.markdown, 'markdown') will work.\nI can't blame you. The docs don't mention this.. Fixed the docs. #1774. Tests would require a virtual DOM, which we don't have right now. So no tests for now.. #1646. We can simply ignore this when #1777 get merged.. @mAAdhaTTah . Seems like Travis has the day off. Well, I tested it locally without any problem, so it should be fine.. I will gladly setup JSDoc and document prism-core.js.\nJust tell me if we want this.. Shouldn't you get the same warning for id as well? Because I do.\nEdit: My bad, that was SonarLint. But it's still the same for id.. Ahh, so it complained because of the different types. SonarLint complains because the variable id is redeclared in the same (function) scope.\nIt would be nice to fix that as well.. I think the gained readability (it just looks cleaner IMO) is more important.\nAnd then again: It's only 8 bytes.. Thank you for contributing!. Thank you!\nI will review this tomorrow.. Thank you for contributing!. @mAAdhaTTah . /cc @mAAdhaTTah @LeaVerou @Golmote . I looked a little into this and there don't seem to be any workarounds for this, are there?. Well, there is an issue so the hope is there...\nI'm actually quite a fan of TS but I think that:\n\nPorting the project for the sake of JS-Check isn't worth it.\nTS isn't necessary for Prism.\n\nAlso, TS is not as popular as JS, so some people might get held back from contributing.. That's a good idea. I'll change all similar occurrences.. I was also thinking about using async functions when writing #1780 but didn't because Node v6 isn't dead yet even though it will be very soon.\nSo I really don't know if we want to drop Node v6 just to have a nicer build process.\nI don't think it's worth it.. Let's just keep this open for a month or two until Node v6 is dead.\n@ExE-Boss You might want to remove Node v6 from .travis.yml to make the build succeed.. Thank you for your contribution!\nHowever, you seem to have forgotten to commit the language file prism-sas.js.\nAlso, please add the new keywords to the SAS keyword test. More infos on tests can be found here.. Thank you for contributing!. Thank you for reporting!. That would be nice to have. I'm totally on board.. These are all the default languages of the prism.js file.\nTo get other languages, go to the download page and select the languages you need. You can then download your personal bundle which contains everything Prism needs to work and the languages you want.\nFor more details, see the basic usage section.. So you are using NodeJS to generate your website?\nIn that case, you can use the loadLanguages function to get the languages you want, as described in the basic usage section.. ~~Seems like Edge doesn't calculate line-height correctly.~~\nActually, it's font-size that's wrong.\nBut isn't the real question why the Coy theme works on the prismjs.com website?\nAnswer: The indirect font-size: 100% saves Edge.. I'm just going to merge this real quick.\nIf there are any issues, feel free to revert it.. Why is this weird? Everything made exclusively for a node environment is ES6 and the code which is also available for browser is ES5.\nWell, we could use Babel to solve this and make everything ES6 or we could wait for #1578.\n\nMaybe we can enforce this with ESLint?\n\nEnforce what? . We enforce ES5 for core / languages / plugins already because Uglify doesn't support ES6.\nSo it lets you know when you use modern features.... We could also check the output of eslint and throw if we got any warnings.. Thank you for reporting!\nThis seems to be caused by #1660. I will fix this soon.. The difference between {{ }} and {% %} is that the first can only contain simple expressions (e.g. {{ foo.bar|baz:\"arg\" }}) while the latter can hold more complex statements (e.g. {% if foo.bar|baz:\"arg\" is defined or x > 5 %}).\nTherefore it's usually sufficient to just test the more complex case (also most of the features implemented are for statements). The cases where I do use {{}} are usually code I copied from the official specs.. Resolved by #1805.. @mAAdhaTTah . from is a keyword but can also be used as an identifier. That's why it's not in that list.\nMore on imports.. I can see the problem with from and other keywords but what's wrong with forEach? It's not a keyword AFAIK.. Agreed.. Like this @mAAdhaTTah ?\nThis, of course, has the disadvantage that none of the arguments of npm test are passed to either of the called commands.\nNote to self: Don't forget to adjust the docs.. Alright, then I'll adjust the docs and then this should be gtg.. @atomize, that's an awesome plugin. I really like the idea and I think that Prism should definitely support this feature.\nBut I don't think that there needs to be a new plugin.\nWe already have the File highlight plugin which does almost exactly the same as yours (apart from the line range), the difference being that it's based on XHRs and used by many already (e.g. prismjs.com).\nSo rather than making a new plugin, why not make this a new feature of File highlight? This would also remove the necessity for a fetch polyfill but the File highlight plugin doesn't support caching files, so we would have to implement this.. @atomize Thank you for taking on this problem!\nDon't hesitate to ask me if you have any problems along the way. . I made ourselves a new home \ud83c\udfe0 #1812.\n\nYou need to run npx gulp. This will rebuild prism.js.. Alright, it failed when some generated files were changed and it succeeds when Prism is built properly. \nSeems to work.. This is a more general question:\nYou assigned the outputs of these commands the following token names, right?\n\ncmake --help-command-list -> function\ncmake --help-property-list -> property\ncmake --help-variable-list ->keyword\n\nThe command list contains stuff like if, while, etc., so could we make this keyword to make it more consistent with other languages?\nWe could give the variables list the variable highlighting as well.. @LOGANLEEE Thank you for reporting. Unfortunately, the link you provided doesn't work, so please provide a working example. You can also link to the repository with the source files.. The first one (+1_000_000) is base 10. You're right. Underscores are allowed everywhere. Even the exponent.... Properties, some fields, compile time constants (basically fields) and methods are written in Pascal-case. So yes, there are many places in which Foo could not be a class. E.g. Foo.Bar: Bar could be a property, field, method or subclass. There is no way of knowing from the syntax alone.\nThe return-type is a stand-alone pattern because it has to be executed before generic-method (which is the look ahead). I know that it might seem complicated but generic methods (Foo<A, B<C, D, (E, F>, (G, H)> I<J, K, L>();), explicite implementation (Foo<A> IBar<B, C<D>>.Bar<E, F>(); and stuff like properties and indexers make things a little more complicated.... Shouldn't this be async\\s+ ?. This will also match functionAbc(). Maybe something like this is more suitable:\njs\n/(function)(?:\\s+[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*(\\([^()]*\\))/. This is called a character set, not a group.. This can be simplified to /\\[(?:\\\\.|[^\\\\\\]])*\\]/.. So all anchors (\\b) and character sets (\\w) are escape sequences too?\nAlso, this should match \\xFF (hex), \\uFFFF (unicode), \\u{100000} (unicode extended), \\0123 (octal) and \\cA (control) completely.. regex-punctuation, alias operator. What?\nI know you did it for the highlighting, but this is somewhat confusing.... > BTW \\0123 will not be treated as one char in JS, which only supports \\00~\\077\nUups, my bad.. This doesn't match a{1,} and a{,1}.. Yeah, editing the themes is a little overkill.... Sorry, but I don't quite get what token is supposed to match.\nIt includes alternation |, anchors ^$, quantifiers +*?{}, groups () and the lazy modifier ?. Also, the matching for ? is a little strange: a?=, a*?! are both valid and in neither ? is matched.\nAlso, what about the modifiers of groups? E.g. (?:), (?=), (?!).. 2 Problems here:\n\nYou probably don't want trailing spaces, so please make it [^()]*?. Otherwise (?=\\s* won't match anything.\nThis also matches function a()). Not valid JS, I know, but still. Replace \\S with [^\\s()] and your good to go.. Leading and trailing spaces might not be wanted.. 1. There might be problems with \\S again.\nSpaces?\nawaitSomething(a){} is not matched. Neither is $await(a){} (\\b might not have been the best choice).. What's up with the +?. ... Oops.\nMy bad. This lookbehind isn't necessary.. This pattern will match [s\\\\]d].\nTry \\[(?:\\\\.|[^\\\\\\]])*\\] instead. (And even this pattern has its problems, because it will match /\\[s]/.). It's actually \\\\[1-9].\n\\0 escapes NUL. This will also match \\b and \\XA1, but it won't match \\0.\nAlso \\\\|\\+ is unnecessary because of the last char set.. This \\b won't match anything because of escape\nAlso, why the group?. js\n/((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:\\\\.|[^\\\\\\]])*\\]/\n\nThis should work with lookbehind: true and resolve the issue that escaped [ were matched.\nI haven't thoroughly tested it, so there might still be a problem.. *negated. This has problems with ranges like \\xA0-\\uFFFF.\nTo do this correctly one will have to look out for escape sequences, include them as well into range and then match them inside again as escape. \nTroublesome.\nMaybe we want to leave that one out?\nThe pattern will be ridiculously long.... Why the group?. @mAAdhaTTah Do you have a better idea for the name of this variable?. @mAAdhaTTah They are separated now.. Well, because it is about elements inside form label, so it gets indented.\nThis practice can also be seen further down below.. The whole idea of these assignments was that we do not have to write the whole name again, but I agree that your idea seems nicer.\nLike this?\n```js\nPrism.languages.language = { ... object ... };\nvar language = Prism.languages.language;. @mAAdhaTTah Fixed. It's kind of unnecessary because there is always only either after (plugins) or peerDependencies (languages).. Well, that's ambiguous because \"require\" is also a literal requireName.\nMaybe optionalRequireName ?. I just noticed that the name optional requirement is really bitter sweet.\nI'll just use afterName.. This is kind of nitpicky but could you please indent using tabs instead of spaces?. Probably just nitpicking, but could you please remove the additional comma?. I had a little fun with a Ruby REPL and found that this pattern will also happily match:\nruby\nmy_function_def variable\nBut at the same time, it doesn't match\nruby\ndef   \nextra_spaces_and_new_line(arg)\nend\nChanging the lookbehind group to (\\bdef\\s+) ought to solve these cases.. Well, me either, but the compiler can handle it, so there is probably someone out there using it.. This line changes the class-name pattern to remove catch to no longer highlight the exception variable as a class name. (I added a new test for that)\ntrait was also removed, because this isn't a keyword in JS. (I forgot to mention it)\nI didn't overwrite class-name in extend because it would have required more code to do so. (lookbehind and inside)\nOr should I do it anyway for better readability?. Why is this extra line here?. Please escape the < using &lt; to make it valid markup.. Did you mean \\$?\n\\b\\\\$[0-9]* can never match anything and neither can \\b\\$[0-9]*.. [.] == \\. but the latter is more readable.. Did you mean \\w ?. ((global)?var)|(enum)\nPlease remove the outer groups as don't do anything.. (obj|scr|spr|rm)_\\w+|(obj|scr|spr|rm)\\w+ == (obj|scr|spr|rm)\\w+ because of the \\b at the end.. This lookbehind doesn't do anything, does it?. @LiarOnce\nI'm sorry if I did make myself clear enough but I meant the \\\\w in (obj|scr|spr|rm)\\\\w+ not variable as a whole.. @LiarOnce \nExactly. I assume that you want to match stuff like obj_hello or rm_all, right? And that means that (obj|scr|spr|rm)\\\\w+ (double \\) is not what you want; you'll need (obj|scr|spr|rm)\\w+ (single \\).. @mAAdhaTTah Sorry, I didn't implement your suggestion correctly. It's now taken as is.. Why did you remove the testing part itself ?? \ud83d\ude15 . This alias has to be added to components.json as well.. Why? C-like has the same definition of boolean so this does not have any effect.. @LiarOnce \nWhat @mAAdhaTTah meant was this:\njs\nPrism.languages.gamemakerlanguage = Prism.languages.gml = Prism.languages.extend('clike' , .... @wibimaster Thanks for the quick change! \nBut please use tabs for indentation.. Because [^\\n]* is greedy it will also consume the \\r at the end of a line.\nThe pattern /\\/\\/.*/ will do what you want and is really simple.. Why did you call this class-name when it is an assembler directive? This is really confusing.\nIt's better to call it a directive and to use an alias 'class-name'.. This is really nitpicky but we usually have the pattern before everything else (namely: lookbehind).. A few things about this keyword list:\n\ninitonly is missing.\nPlease split things like unsigned int32 into unsigned and int32. This will reduce the number of keywords.\nPlease sort the keywords alphabetically. This makes the list easier to maintain and you will notice the keywords which are included twice.. . and = should also be punctuation.. What about floating point numbers?. 1. Why do some end with .?\nPlease sort this list by descending length. \n    Because of the way alternations work and the fact that . is not included in \\w (which is why \\b won't help), some function names are not going to be matched correctly.\n    E.g.: add.ovf will be matched as [add].ovf. \n    This is because alternations will use the first one that matches (in this case add).\nPlease compress the list a little.\n    There is a lot of redundancy which can be used to make the list smaller.\n    E.g.: All functions which start with conv can be matched with the following pattern: conv\\.(?:[iu][1248]?|ovf\\.[iu][1248]?(?:\\.un)?|r\\.un|r4|r8).. You have to place this further down below (under C++, I think).\nThese here are special languages for Prism.. Also, does CIL support multi-line comments?. Via an alias property, so in this case alias: 'class-name'.. This does not support hexadecimal numbers and numbers in scientific notation.. 1. _ is included by \\w.\nWhy are the char-set [\\w-] and = wrapped in a group?\nThe i flag is useless.\nThe \\s* after (=) is useless.\nPlease also support complex keys.\nDoesn't HCL also allow assignments via colon?. 1. Does HCL support single-quoted strings? If not, this pattern can be simplified to /\"(?:[^\\n\\r\\\\\"]|\\\\.)*\"/ (assuming that line breaks are not allowed inside of strings).\nShouldn't strings be greedy?. You should match numbers after keys. Otherwise abc-123 = 4 will look funny.\n(Same goes for booleans: hello-true-there: \"General Kenobi\"). You seem to have based this comment pattern upon the C-like comment pattern.\nBut I don't think you need the lookbehinds which are important for C/C++, so you can simplify and merge these three patterns into one:\n\njs\n'comment': /(?:\\/\\/|#).*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/. 1. [\\w\\-] == [\\w-]\n2. Why is that last \\s+ before the lookahead not part of it?\n3. (\")?(\\w+)(\")? .... \n    How about (?:\\w+| <<simplified version of the double-quoted string pattern>> )?\n    (This also goes for all other occurences of (\")?(\\w+)(\")?.). 1. Why is the first \\s+ not part of the lookahead?\n2. Why is the last \\s+ even here?. Why the i flag?. Why the i flag?. Please just use\njs\n'operator': /\\$\\{|[}.]/. Please use 'keyword': / <<pattern>> /.. Why the i flag?. 1. Why the i flag?\n2. You only have to escape the ] and - characters.. Why the i flag?. Why is this part of the keyword test? Wouldn't an interpolation test be better?. How about a few new lines?. Please remove the capturing group around \\s*#.. I meant that you don't need the group at all...\nSorry for not making myself clear enough.. The first group has to be capturing otherwise, strings won't be highlighted.\nMaybe a string test would be good?. 1. .method (only this string, nothing else) will not be matched. Please change the first group to (^|\\W) ([^a-zA-Z0-9] == \\W).\n2. .ctor() will be matched. Isn't there always at least one space after a directive, so why don't we use (?=\\s) instead of \\b?. What about [System.Core]?. 1. Why is there this non-capturing group?\n2. What about comments which go until the end of the text? I'm suggesting to replace \\*\\/ with (?:$|\\*\\/).. Please just use the pattern. There's no need to put it into an array.. 1. Ignore case flag and [eE]. Please choose one (I recommend the i).\n2. Please remove the first [+\\-]?. It will only cause trouble and you don't even match -1.\n2. You don't need to escape the - if it's the last char in a set.\n1. Too bad that my favorite numbers .02e2 and 2. are not matched.. (?:[>=])? == [>=]?. Also, this pattern can be simplified to\njs\n/(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^\\\\`]|``)*`/. string and identifier both cannot be preceded by an @. I'm guessing that you copied this from SQL where strings and variables interfere with each other but since this is not the case in N1QL, you can remove it.\nThe backslash is also bugging me. I don't understand why it is there neither here nor in SQL. Am I missing something?. @outsideris If I understand you correctly you want something like #1472 (which is only an idea right now)?\nI meant that (\")?(\\w+)(\")? should be split into two part: First a simple \\w+ to match unquoted keys and second, one for quoted keys.. 1. We usually don't want leading or trailing spaces inside a token. That's why I think it should be part of the lookbehind.\n2. Nice!. 2. Comments alone can destroy your non-greedy strings: \"abc // what now?\". Just move interpolation into ['string'].inside. I mean, isn't inpolation just part of a string?\nThis necessitates that the string pattern itself is aware of interpolation and thus it has to be adjusted accordingly.\nQuestion: Does HCL support nested interpolation e.g. \"${file(\"/${var.trouble}.txt\")}\" ?. Maybe a little help from my side: The string pattern should be:\njs\n/\"(?:[^\\n\\r\\\\$\"]|\\\\.|\\$(?:(?=\"|\\$(?!\\{))|[^\\n\\r\\{$]|\\$\\{|\\{(?:[^\\n\\r}\"]|\"(?:[^\\n\\r\\\\\"]|\\\\.)*\")*\\}))*\"/\nIt's more complex because of this:\n\nYou can escape interpolation with double dollar signs: $${foo} will be rendered as a literal ${foo}.. If I were to guess it's probably a relic of the time when Prism did not support greedy matching.\nWe generally don't worry about highlighting syntactically incorrect code, so that should not concern us.\nIt's probably safe to remove the whole lookbehind.. That, I cannot do because of the way .test files are parsed, so I added a similar test.. Because otherwise, Prism will assume that addSupport is a normal token and throw an error.\nBut a property defined using Object.defineProperty cannot be enumerated and is effectively hidden.. That's because after type, inherit, etc. follow class names.\nIf that semicolon isn't there, the next keyword will be highlighted as a class name.. Sure we have! class-name_feature.test. You're right!. Yes, but not here. Further down below there is an insertBefore, which changes the object associated with Prism.languages.phpdoc.\n\nBut we could do:\njs\nvar phpdoc = Prism.languages.insertBefore('phpdoc', 'keyword', { ... });\n. You're right! I will remove it.. I err towards highlighting @some.decorator as Notepad++ and VS both do.\n(VS Code doesn't highlight anything). I just wanted to cache the function itself but now that I look at it, we might as well cache the result.. This pattern will also include possible default values.\nBut we can use the naming convention of custom properties to make a simple pattern which matches all variables accessed via var or not.\n\nA custom property [= variable] is any property whose name starts with two dashes [...].\n\nUsing that, /(^|[^-\\w\\xA0-\\uFFFF])--[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*/i should do the job.\nDepending on whether we insert it before property we can also highlight the custom property declarations.. It's alright, I reviewed too late.. I tried to cache the result and you can't really do it without producing ugly code. \nThat's because you can only call objId(property) after you know that it's an object/array, otherwise, Object.defineProperty will throw an error.. It's that config even better than #1559?. Seems like I misunderstood the meaning of lts/*. I thought it includes all LTS releases of NodeJS given the * suffix. My bad.. Ok, I've now decided against adding a variable there because we only save 15 bytes and because it is not obvious why the variable has to be there.\nAlso, I think it looks ugly. (<-- the real reason). But !!!undefined is also true. Please sort the keywords in alphabetic order.. Please use the following instead:\njs\n/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)[a-z]\\w*(\\.[a-z]\\w*)+/\nIt's a little shorter and has the keywords in the right order.. Why is this case insensitive? Does TRUE also work as a boolean?. This does not include 3.1e4.. This pattern causes catastrophic backtracking when given this.. Again, why the i flag?. 1. This is not a good string pattern. Use the real string pattern instead.\n2. Why the i flag?. function should really not have a variable alias.. [\\w] == \\w. 1. The surrounding ${} are generally considered punctuation like they are in JavaScript's template strings.\n2. . is also considered punctuation is almost every other language.. This does not include structs and enums.. It's better to have a 'string': /[\\s\\S]+/ after interpolation instead of this alias, so that the code inside interpolation is not highlighted like a string.. Please correct the indentation here.. Why not /\"\"\"[\\s\\S]*?\"\"\"/?. 1. => for lambdas is missing.\n2. ... should also be an operator.. It's quite common for types to be nullable. E.g.: Color? c = getColor();\nAlso pointers? (Foo* f_ptr = f;). Wrong flags.. You should also require php.. This variable is only used once in inside.string[1].inside.interpolation, so why not inline it?. Please give this function a more readable name and add some documentation.. Why the group? Do the i and g flags have any effect?. Please extract this assignment.. This is not highlighted.. Please use \\w instead of a-zA-Z0-9_.\nThere are also a few other places where the same should be done.. Why is this a keyword and a boolean? Almost all other languages (including PHP) have a boolean pattern and that's it, no keyword.. That's not necessary. Pointers have a few constraints in C#, so that shouldn't be necessary (as far as I know).. You cannot use (?<!-) which is a lookbehind, which is not part of the ECMAScript standard. (It does work in few browsers and Node, but we generally can't use it for the whole web. Maybe in future.)\n(This is why the tests fail for older Node versions.). Then let's make this really simple for ourselves and just make -> an operator. \n(C# also does this. My bad...). Shouldn't regex be greedy?\nE.g. /\"foo\"/i. This pattern will also capture \"foo\"bar\".\nPlease use /\"/?:\\\\[\\s\\S]|[^\\\\\"])*\"/ to capture multiline strings.. Again, please use the proper string pattern instead of \"[^\\\\\\r\\n]\".. So \"\" = true and /%$()[]{}\u00df\u00f6\u00fc\u00fc,.;:   = false (including the spaces before =) are keys?\nWhy did you change the previous pattern? I thought [\\w-]+(?=\\s*=) worked or did it not?. Could you also include { and }?. It has to be \\.?. (Really easy to miss)\nAlso couldn't we make this /\\d+\\.?\\d*(?:e[+-]?\\d+)?|0x[\\da-f]+/i? Octal numbers are included by the first \\d+.. Why did you use the same example twice?. We don't support single quoted string, so you can remove this case.. Yes, that's true. My bad.. Why did you make this a capturing group?. @outsideris \nI'm going to reuse this thread when talking about interpolation. I hope that's alright.\n\nThis pattern is a little simpler (and is based on the new string pattern): \n(1)\njs\n/\"(?:[^\\\\$\"]|\\\\[\\s\\S]|\\$(?:(?=\")|\\$+|[^\"${])|\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\})*\"/\nI can think of simpler patterns but all of them will fail in O(2^n) in certain cases, meaning that they are practically useless.\nSo that is the simplest (useful) pattern I can think of which handles the following cases correctly:\n```hcl\n\"foo\\nbar\" // simple\n\"$foo\", \"a$b\", \"foo$\" // strings containing $\n\"${\",\"}\" // simple interpolation\n// two strings in each line because the interpolation is escaped\n// (GitHub gets all of these wrong)\n\"$${\",\"}\"\n\"$$${\",\"}\"\n\"$$$${\",\"}\"\n\"$$$$${\",\"}\"\n```\nWe can then use the following pattern to get the interpolations parts of a string: \n(2)\njs\n{\n    pattern: /(^|[^$])\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\}/,\n    lookbehind: true\n}\n(Everything after the lookbehind is copied from the above string pattern (1).)\nUsing these two patterns we can make a string pattern similar to JavaScript's template strings using (1) for template-string and (2) for interpolation.\nWe have to adjust the inside of interpolation of course, but for that, we can use your current interpolation's inside.. [^\\1]: Backreferences don't work that way (unfortunately).\nThen why did it work in the first place? Tests pass.\nThat's because the Regex engine just ignored the backreference and was left with [^] which is equal to [\\s\\S] (so all characters), but [^] is not supported by all browsers (if I remember correctly) so we generally use [\\s\\S].\nUse: /<<-?(\\w+)[\\s\\S]*?^\\s*<<\\1/m instead. This will also handle indented strings.\nAlso, please make this greedy to also capture strings like:\nhcl\nfoo = <<FOO\n # I'm not a comment\n // me neither\n /* this might make a good test */\n This string can contain FOO but not at the start of a line.\nFOO. Please make this greedy.. You don't need the g flag.. Why don't you use the real number pattern here?. Please make this greedy or make it the first pattern to be matched.. You have to match the punctuation after number because punctuation also includes the decimal ... Please surround these with \\b(?: ... )\\b to prevent matching things like filepath.foo.\nSame for type.. My bad.. The lookahead still contains the old \"[\\w-]+\".. I tested a little and names containing numbers are incorrectly highlighted as numbers.\nPlease add make it /\\b0x.../i to fix this.. @outsideris Here is another number pattern to fix.. So, white?. how about border-radius: 0 3px 3px 0;?. That's the default, so you can just remove it.. Now that left is 0, we can change this to calc(50% - 450px - 40px).\n50% because 48% was used to have a distance of 1% left and right (margin basically).\nAnd 40px because I made a mistake. The greed checks are 40px wide.. Why don't you just overwrite clike's boolean in extend?. Yes, that definitely better.\nJust two small nits:\n\nPlease don't write { pattern: /.../ }. Just use the regex directly.\nPlease position boolean before constant. constant after boolean creates the false impression that boolean is matched after constant.. You probab\u00f6y borrowed this from C-like, but this language isn't as complex as C, C++, etc., so we can simplify and combine the two comment patterns to this:\n\njs\n/\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/\nNo lookbehind or greedy required.. You don't need the i flag.. I don't think you have to test for negatives. (In keywords and numbers as well.). There also seems to be a range operator .. (I guess).. Yes, that should work.. Typo?. You don't need the m flag.\n\\s will also match \\n and \\r. Do keep ^ though.. How about this:\njs\n/(^\\s*)\\/\\*.*$(?:[\\s\\S]*?\\*\\/|[\\s\\S]*)/m\nLike this, we can just let JS handle all different kinds of line breaks.. This has to be greedy because of:\nahk\n/* ; what now?\n*/. TIL: English has some nice abbreviations. \ud83d\ude04. How about /[a-z]\\w*(?=\\()/i?. Alright. It's good as is then.. One last thing: Please insert this at its alphanumerical correct position, after N4JS.. 2 nits:\n\nPlease use [^()] inside the parentheses.\nI think the lookahead would be easier to understand like this: (?=\\s*(?:\\([^()]*\\))?:).\n    This also removes the capturing group (we want to avoid these if possible).. Because the code can contain XML-like tags which will be parsed as HTML because I use env.element.innerHTML.\nAlso, it's what highlight does.. One solution would be to split it into 3 different languages each with their own files: t4-cs, t4-vb, and t4-template (for creating the T4 variants).\n\nOr we could fix the Babel plugin. In this case, it would be good to also adjust our tests to be able to deal with aliases. I'd know if I can do that though.. Because it will always be true when you consider the above if.\nIt's just there for clarity because it's not obvious IMO.. My only idea on how to check this at \"develop-time\" would be what I did here.. > we should be verifying as we develop\nAgreed, and the error is supposed to make all tests related to that language fail so that the dev notices that he/she broke something.\nExample:\njs\nlanguages.foo = extend('bar', {});\ninsertBefore('foo', 'baz', { ... }); // 'baz' is defined in 'bar'\nIf somebody then removes bar, that will break foo without him/her ever knowing.\nSure, tests are supposed to prevent that from happening but I think it's better to check at the source of the error.\nAlso, another reason why I think that check is necessary: How do you expect insertBefore to behave when before is not present in root[inside]?\nMy first guess wouldn't have been: It just creates a deep copy of root[inside] and updates all references it can find.\nI actually expect this to throw an error in that case.. Note to self: Depending on how this goes out, I will have to change #1603.. Then an insertBefore.test (like here) might be the best solution.\nIt behaves \"right\" during development but doesn't include the checks for the users.. I'll just remove the check for now so we can merge this.. 1. Please don't use capturing groups if not necessary.\n2. You don't need to escape ) in a char set.\nA corrected minimal pattern could look like this: styled(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))*)+ (plus the rest). You're right, my bad. The last + has to be a *, so styled(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))*)*.. ~~You don't want string highlighting?~~\nNo, my bad, now I get it.. Please split these so that each function name gets its own line.. 1. Missing semicolon.\n2. I think that the name \"envVarList\" is misleading because it's really a pattern. How about just \"envVars\"?. Why don't we surround the pattern with \\b(?: ... )\\b?\nThis has multiple advantages:\n\nNo need for the (?:) every time we use pattern.\nNo need for (?=$|\\W) after the pattern. \\b will do just that.\n    Regarding the lookahead: In line 9, you use (?=\\W). Do you really necessitate an extra character after the environment or did you mean (?=$|\\W)? Also in line 48, (?=$|\\}|\\W) == (?=$|\\W).\n\nThis should greatly simplify all expressions which use envVarList.. I know this is not one of your changes but could you please add a new line between [ and {?. 1. Please make the group non-capturing.\n2. [abceEfnrtv\\\\\"] looks like black magic to me. Could you please explain this to someone who doesn't know bash?. 1. Please make the non-lookbehind capturing groups non-capturing.\n2. You can replace (^|\\W) with a simple \\b.. Please format this line. One space after for. No double spaces.. You can replace the lookbehind with \\b.. You can replace (?:^|\\W) with \\b.. Why is \\w+? reluctant?\nIt's always followed by either \" or ', so why not let it be greedy?. You can replace (?=$|\\W) with \\b.\n(But not (^|\\W)!). You don't need that anymore.. > I'll make the existing comment more\u2026 human-readable, I guess.\nYou don't have to. It's clear to me now. Thank you.. The \\(.*\\) will be too greedy for cases like this:\njs\nvar a = () => {}, b = () => {};\nBecause you really want to match recursive expressions (don't you? I'm pretty sure that's what you what), we can use the standard trick for a recursive depth of 2:\njs\n/\\((?:[^()]|\\([^()]*\\))*\\)/\nThis won't always work for stuff like that:\njs\nvar a = (b = \"(\") => {};\nBut I really don't want to maintain the pattern once (template-)strings get involved, so I kinda just hope that strings behave nicely. But we might use #1664 to solve that in the future.\nWell, not that it matters to us since we can't have parameters containing string right now (that's not necessarily a bad thing). This is just something to keep in mind for the future.. 1. Why don't you use the i flag here as well? It uses fewer characters than A-Z.\n2. [^\\s] == \\S\n2. Please use a pattern for recursive expressions.\n3. I get why you changed the lookahead but this won't be necessary after we use a pattern for recursive expression.. 1. The i flag doesn't do anything here.\n2. [^\\s] == \\S.\n3. Please use a pattern for recursive expressions.. 1. [^\\s] == \\S.\n3. Please use a pattern for recursive expressions.. Yeah, comments and strings are a huge pain.... Oh, you're right! I missed that part. My bad!. I think that \\S isn't an optimal solution because it could match ( or ).\nHow about this:\njs\n/(... \\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/. Should boolean stay as is?. Alright, there you go!\nI also think that it's a cleaner solution like that.. Why did you remove this?. This line only escapes text to be valid HTML, so that e.g. the code <p> is not interpreted as a tag but as text.\nI'm asking why you removed the removal of No-break spaces. I don't see how this relates to new lines.\n(TBH, I don't know why we remove NBSPs in the first place). Yes, please remove this change.\nIt's better to keep things simple.. That's true.. There seems to be some problem here.. Wouldn't it be a good idea to make a default case then?. You missed a quote \" there after libname. That's why the test is failing.. I didn't do this because then the line ends of prism.js depend on the line ends of gulpfile.js.\nBut if you think that that's not a problem I'll change it.. nvm. Template strings ftw! I already use them anyway for components.js.. Is this some kind of default package or did you forget to commit your package.json?. Could you please make it (?=\\s|$)?\nIt's shorter because the non-capturing group can be removed.. Same as above but (?=[\\s)]|$) this time.. I split T4 into 3 different languages as suggested.. Ladies and Gentleman,\nI present to you: The smallest languages definition!. I added docs for it but made them private because I don't think that this method, which only ever used by prism-core itself, should appear in the public API doc.. Well, it still isn't working properly because of the @memberofs.... No idea, I just kept it as is.. We don't check arguments anyway, so we don't need this pattern.. There are no unused variables which match this pattern.. Do you really want to not fail on lint errors?. Hmmm, unused variables are usually a sign that something went wrong during refactoring or writing, so why would we want to ignore these?\n(_)after is a good example: Why is it there? Does it do anything?\nnextSibling should be side-effect free, so why not remove it. I don't see the benefit in ignoring a potential mistake because of its name.\n(I mean, even after the ESLint warning disappears, I have like 3 other linters which all scream at me to remove it...)\nAlso, even after you remove the ignore pattern, after stays the only unused variable.. Why did you turn this off?\n(There are 2 missing semicolons in these files.). Why did you change the behavior here?. I'm not really sure if we should lint this file. It feels more like a library to me.\n@LeaVerou Isn't this the predecessor to Bliss?. But do we really want to force people to use commas because of that?\nAlso, isn't ESLint support to make the code style consistent?. Wait. Don't we ignore utopia anyway? (.eslintignore). I think we can just remove the unused variable.. I can see why you want this but it literally requires us to change (almost) every language definition.\nI'm personally quite a fan of \"only-multiline\".\nWe should get some more opinions on this.\n@mAAdhaTTah @Golmote @LeaVerou . Can't we remove the ignore pattern now or is there a reason to keep it?. Nice catch!. I get that it's convenient to just declare it here but wouldn't it be better to make an overwrite in .eslintrc for components/prism-core.js and prism.js to add this global variable?. s?. Missing . after Promise?. Isn't just gulp-eslint enough? Why do we also need eslint itself?. ES-lint is a normal dependency now.. Seems like JSDoc is also able to handle this syntax.. Yes we do because they aren't really peer dependencies in the sense that Django modifies JS or CSS. It just has to be loaded after them.\nThe new implementation doesn't care about the markup language because markup-templating takes care of that, so we can safely remove them.. Seems like I forgot to inline them.. If one works, the other should also work. But sure, better be safe than sorry.. Done.. No, but it's a necessary wrapper for the number and operator tokens.. I really like this simple approach.\nWe can always add a more elaborate testing scheme later on.. > Alternatively: https://github.com/suchipi/chai-jest-snapshot\nMaybe I don't get the library but don't they separate the expected result from the actual input? Wouldn't it be better to have actual and expected in the same file in our case?. Should I also remove the current line of text linking to the usage section?. That's not really Prism's doc, is it?. Maybe we should just remove this line?. Should we really call fileHighlight if the site is already loaded?\nIsn't the else block only executed if the site finished loading already and this plugin was loaded by adding a <script> tag? (Not an active web developer, so please correct me if I'm wrong)\nI don't know if you would expect it to do the file highlighting as soon as you load it.\nI'm kinda split on this so I would really like to hear your opinions @atomize and @mAAdhaTTah.\n\nJust for reference: Previously (so right now) we only did the event listener.. We use single quotes for all our token names.. Why did you choose to extend Python?\nI'm not very familiar with the CMake syntax but they don't seem to be that much alike.\n(Also, single quotes please.). [+-]{1,2}: Does that mean that +- is a valid operator?. Instead of defining a bunch of single characters via alternation, it's usually better to make them a character set.\nSo \\^|~|%|&{1,2}|\\|?\\||\\?|\\*|\\/ -> &&?|\\|\\|?|[~^%?*/]. Here, I'm guessing, but you probably don't want .* for two reasons:\n\nI guess that _OUTPUT_NAME isn't a valid function, right? So please use the + operator. If it is, please ignore this point.\nThe dot . will match any character except line breaks. This includes spaces, brackets, punctuation, etc meaning that the \\b you use to guard the properties doesn't mean much. In this case, you should probably use \\w (== [A-Za-z0-9_]) instead of ..\n\nAlso, could you please group all words starting with .* (or \\w+) together to get .*(?:_OUTPUT_NAME|_POSTFIX|...)?\nAll of these points also apply to keyword.. Guessing from the test, could it be that a function is always followed by (?\nIf so, we can simplify this expression to /\\b[a-z_]\\w*(?=\\s*\\()/i.. The language list is largely sorted alphabetically, so please insert this before CoffeeScript.. \"Checks for all namespaces.\". \"Checks for all properties.\". But if is already matched as a keyword, so it can't be matched again as a function.\nOther programming languages (every C-style one) have the same issue with if, while, etc. and they use this exact trick.\nSo after matching the keywords, are there any function-like constructs left?. Hmmm, the CMake doc for --help-command-list says:\n\nThe list contains all commands for which help may be obtained by using the --help-command option followed by a command name.\n\nSimilar for the other ones. So are these lists complete?. Wait. if is also in the functions list.. So, the only things we need from Python are comments, strings, and punctuation. Is that right?\nIn that case we could just copy them over from Python.. Do we really want this indentation here?. No, unfortunately, we cant.\nThe examples page gets the info of what examples are available from Github using the master branch of this project. So it won't be accessible until it gets merged.\nI know, not the best setup but you can always the test page of your local project to see the results.. Ok, so until proven otherwise, we'll just assume that they are complete. Works for me.. Sure thing!\nYou probably want ${...} as well, right?\nIf so: /[()>}]|\\$[<{]/. Now that we control the comment pattern, we can simplify it!\nThis is simpler and should also work:\njs\n'comment': /#.*/. Now that we control strings, we might as well remove the (?:[rub]|rb|br)? prefix (and the i flag).\nI also have a few questions about strings:\n\nDo backslash escapes work? (e.g. \"\\n\\t\")\nAre multiline strings allowed?. Just a little question: Why apart from cmake_minimum_required (VERSION 2.8.11) are numbers used? Aren't math expressions done via strings?. Alright, then this should work:\n\njs\n'string': {\n    pattern: /\"(?:[^\\\\\"]|\\\\.)*\"/,\n    greedy: true\n}. Then shouldn't the more simple pattern: \\d+(?:\\.\\d+)* also work?\nThe Python number pattern also handles binary, hexadecimal, and complex numbers and scientific notation. We don't need that, do we?. You don't need the lookbehind anymore.\nIt can just be \njs\n'comment': /#.*/,\n... other tokens. I just think that these, well, feel like keywords, so I would much rather have them highlighted as such. function could then match user-defined functions and macros using the pattern: /\\b[a-z_]\\w*(?=\\s*\\()/i.\nWhat do you think?. You seem to have mixed indentation here.. This still needs fixing.. Also, you can inline the regex to get\njs\n'comment': /#.*/,\n.... Looks good!\nAs suggested here we could rename the current keyword to variable.. The < should be escaped using &lt;.. My bad, I forgot the boundaries. The following should work.\njs\n/\\b\\d+(?:\\.\\d+)*\\b/. I'm using VSCode. It can auto convert back and forth between spaces and tabs.\nIf you don't find any better solution, a replace regex usually works wonders.. > I still haven't figured out how to run this example\nAs I said, you can't until we merge this PR.. That because you already match the ( in punctuation. Is usually a good idea to match operators and punctuation last.. Please move comment and string before all other tokens. This will solve the current issue with:\n```\nON OFF add_compile_options\n\"ON\"\n```\nAlso, please make it 'comment': /#.*/. You don't need to create a new object.. Please only use non-capturing groups, so \\b(?:ON|...)\\b instead of  \\b(ON|...)\\b.\nThis also applies to all other tokens.. You still need to reorder.. Comments?. No, we don't need to introduce an unnecessary group, so you can leave it as is.. This needs an i flag, otherwise, we don't match Foobar().. While testing I found this:\ncmake\ninclude_directories(~/exploringBB/extras/cmake/studentlib_shared/include)\nThe last include is highlighted as a keyword.\nHow about we replace a (?=\\s*\\() to the pattern to eliminate these false positives? This assumes that all keywords are followed by a (.. Sorry, I mistyped. Fixed it.. @mjrogozinski The i flag is necessary, i.e. Foobar().. ",
    "am": "Thank you! \nThat's a pity that there is no official way to do this. @apfelbox I thought about that but it's a too much boilerplate just to load a language. @Golmote thank you for pointing out the download page, I didn't knew that was possible. Really dislike to version vendor code, but looks like the best approach at the moment. \nIt would be super to find a better approach to this.\n. ",
    "astoilkov": "I have the same problem.\nCan you consider creating a simple implementation that supports this scenario?\n. I believe the API should be even more intuitive. Something like this: (that internally uses the PrismLoader):\njavascript\nvar Prism = require('prismjs');\nPrism.loadLanguages('*'); // this could also be Prism.loadLanguages(['*']); for consistency\n// or\nPrism.loadLanguages(['go', 'csharp']);\n. I actually implemented my own solution to this issue. I created a prism-electron repo which is perfect for scenarios like Electron and nw.js. It lazy-loads languages and the size of the repo is a lot smaller.\nI am posting this here for anyone that has had the same problem like me.. @troglotit Are you willing to finish this pull request? It would be awesome Prism to have Clojure support.. @tkjone I haven't started working on this. But anyone with a little free time could fix the issues super quick. @Golmote did an amazing job of pointing out everything that should be done.. ",
    "benjycui": "It will be more friendly for Node.js developers, if:\njs\nconst Prism = require('prismjs/components/prism-all');\n. Hey, guys. I wrote an adapter to make it easier to use Prism in Node.js node-prismjs.\n. @apfelbox sorry, I didn't notice that :-( So, are you going to expose this directly, or I should refactor node-prismjs?\n. ",
    "felixsanz": "@apfelbox But the helper uses var components = require(\"./components\");, and because of that you get Error: Cannot find module './components' because components is not in the same level.\n. @DominicTobias The components injects itself into the Prism object So you can also do:\njavascript\nconst Prism = require('prismjs');\nrequire('prismjs/components/prism-jsx');\nbut notice you need Prism not prism. The components are like:\njavascript\nPrism.languages.ini= {\n    'comment': /^\\s*;.*$/m,\n    'important': /\\[.*?\\]/m,\n    'constant': /^\\s*[^\\s=]+?(?=[ \\t]*=)/m,\n    'attr-value': {\n        pattern: /=.*/m,\n        inside: {\n            'punctuation': /^[=]/\n        }\n    }\n};\nSo when you require that file, the component injects itself into Prism.languages. No need to do anything else\n. It doesn't. you are importing prism-jsx into where Prism is\n. @montogeek I used the example from website:\n<pre><code class=\"language-css\">\n@media <mark>screen</mark> {\n    div {\n        <mark>text</mark>-decoration: <mark><mark>under</mark>line</mark>;\n        back<mark>ground: url</mark>('foo.png');\n    }\n}</code></pre>\nand the bug still happens, its not aligned\n. @LeaVerou  Why would i do that? I'm using node, not browser. So i get everything with npm install prismjs. My folder node_modules/prismjs/plugins/ contains all plugins already, but i just can't use them with node, or i don't know how.\nFor example, line-numbers plugin starts with:\njavascript\nif (typeof self === 'undefined' || !self.Prism || !self.document) {\n    return;\n}\nIt always return because self doesn't exist. I don't want to use it in the browser, i want to pre-process every code block in the server.\n. Ok, it's impossible to use plugins in the server. Some plugins also  use document var. :(\n. I wasn't trying to sound rude, i'm sorry if it seems so. I was just trying to say that the website lacks heavily on documentation, i know it's an open-source project, but i can't contribute/help much if the core features are not well explained. Things like callback is a function that accepts one parameter: an object with various variables that can be modified doesn't help :(\n. thats from PrismJS API Docs page, which is only accesible from a link on the footer\n. Yup, i was not trying to write my own plugin, just trying to use existing ones outside the browser scope. Would be awesome if that worked btw, but can't complain on that, thats how it is :sweat_smile: \nThanks\n. @LeaVerou It is indeed, but you don't have to count them. Just paste the code into an editor like Atom and place the cursor at the desired location. In the Atom bottom bar you can see \"4:20\" which correspond to line 4 and character 20. So after all, it's so easy to get the positions. Of course if you do it manually it will be a pain in the arse.\nBut the proposal is because having mark inside my code looks like a bigger hassle and too dirty. It makes the code less mantainable, so if i have to edit something i'll run into several problems trying to read the code again.\nConsider the following:\n`` javascript\n  async function clearFolder() {\n    <mark>return new Promise((resolve, reject) => {</mark>\n      fs.readdir(${app.config.cwd}/html`, (err, files) => {\n        if (err) return reject(err)\n        if (!files.length) return resolve()\n    Promise.all(files.map(file => <mark>new Promise((resolve2, reject2) => {</mark>\n      fs.unlink(`${app.config.cwd}/html/${file}`, err => {\n        if (err) return <mark>reject2(err)</mark>\n\n        <mark>resolve2()</mark>\n      })\n    <mark>}))).then(resolve)</mark>\n  })\n<mark>})</mark>\n\n}\n```\nDo you understand something? Because i don't anymore. Obviusly having the syntax i proposed is hard to manage too, but it's way easier, more mantainable and avoid adding extra markup to the code.\nEDIT: And of course, if you use an editor for big code examples (and you should, doing it without an editor sounds crazy), the editor will have problems highlighting it and also linters will complain (and code will not work anymore because of the markup).\nOther benefits are:\n- You can get rid of the marks just by removing the data-mark attribute.\n- You can replace prism for the next big highlighter without having to fix every single code tag (sorry, but you know it will happen someday! :stuck_out_tongue_closed_eyes: Or even a newer Prism major version which breaks the plugi) - aka future-proof.\n- You don't have to escape code anymore.\nEDIT: I'm fine having keep-markup as it is, but having a plugin/add-marks with my proposal sounds cool\n. Maybe auto generating the variable like is done now, but also appending manually to the variable some values.\n. You're right. That single piece works better as standalone.\n``` javascript\nimport cluster from 'cluster'\nimport os from 'os'\nconst workers = os.cpus().length\ncluster.setupMaster({ exec: 'app.js' })\nfunction log(msg) {\n  console.log([SERVER] ${new Date().toISOString().replace(/T/, ' ').replace(/\\..+/, '')} ${msg})\n}\nlog(Master with pid ${process.pid} starting...)\nfor (let i = 0; i < workers; i++) {\n  cluster.fork()\n}\ncluster.on('exit', (worker, code, signal) => {\n  log(worker with pid ${worker.process.pid} died. Restarting...)\n  cluster.fork()\n})\ncluster.on('online', worker => {\n  log(Worker with pid ${worker.process.pid} started)\n})\n```\n^ GitHub's syntax highlighter has no problems\n. I was about to test this (even if it's already a closed issue...) to report the status and how that code renders now, but i don't know how to install this with npm since this versions are published into gh-pages branch (uh?), and that is not released into npm, right?\nHow i do install it then?\n. this look much better now, thanks\n. Sorry i should have test that page first. It's a problem on my own :)\n. ",
    "Soreine": "To make the current PrismJS node package a lot friendlier, the following design improvements need to be done:\n\nSeparate data from logic. The data for language definitions should be separated from the code to inject them.\n  Just like @DominicTobias said, it would be a cleaner and more functional approach to let people do\n  js\n  // Just load the definition data\n  const prismJsx = require('prismjs/components/prism-jsx');\n  // Inject it now\n  Prism.loadComponent(prismJsx);\n  In my web app, which is a rich-text editor, I support highlighting every languages available. I have to load every individual components at startup, which adds 1.7s startup time to the web page!. I which I could lazy load the components...\nExport components list and their definition. Basically, the published package should export component.js. It has some really useful meta-data (title, ids). But above all, it declares the components dependencies (component.require) ! I had to copy these data and hard-code a script that would generate the individual requires (see above) in the right order.\n  I'm glad that @LeaVerou removed component.js from the .npmignore. But I don't think the package was published yet.\n\nBelow are less critical design improvements:\n\nDo not assume a global Prism instance. I don't know if it is possible while keeping Prism to \"just work\" for people who just want to add a <script> tag to their HTML file. Hopefully, all it takes is to pass the Prism instance as an argument to the relevant functions/methods, and default to a global instance...\nExpose a minimal Prism instance. Currently, requiring Prism returns the same instance used for the Prism website, which includes a few languages and one plugin. The exposed Prism instance should be bare.\n. I made a package to expose component.js and to allow lazy loading the components\nhttps://github.com/Soreine/prismjs-components-loader. Hmm I could have borrowed some logic from there... But when I had a look at it, I did not dig further because it is node specific (using fs). I am writing a web app using webpack. Maybe I'm not contributing to the appropriate issue.\nAnyway, my rationale was that this issue is 2 years old, and the last comment was 1 year old. I could not afford to wait for changes on this repo.. \n",
    "megamindbrian": "What is the correct syntax for using plugins within node?\n. @adnanoner Tried that.  Seems the before and after hooks aren't working for this html plugin.. This doesn't work:\nvar prism = require('prismjs');\nrequire('prismjs/plugins/keep-markup/prism-keep-markup.js');\nIn node doesn't work for me either. This is awful.\nI really wish I could use the Keep Markup plugin with node.\n. @florinpop17 Thank you!  Good advice.  I was about to go down that path but I've given up for now.  Not sure how document.createRange can even be used from the keep-markup plugin in NodeJs so I'm stuck until deeper investigation.. Thank you for circling back. I'll try that but I am trying to run from\nnode. Basically trying to combine prism with node diff to get an even\nprettier output than GitHub gives you in code compare.\nOn Sep 13, 2017 5:35 AM, \"schwastek\" notifications@github.com wrote:\n\n@megamindbrian https://github.com/megamindbrian both import 'prismjs'\nand require('prismjs') should work. They create Prism object.\nTo check if you are able to access the properties of the created Prism\nobject, open the DevTools Console and type Prism (it's case sensitive).\nInitially, Prism.plugins is an empty object {}.\nEverytime you require Prism's plugin it injects itself into the\nPrism.plugins object.\nTake a look at prism-keep-markup.js file, line 7:\nPrism.plugins.KeepMarkup = true;\nIn conclusion, this should work for you:\nimport 'prismjs';import 'prismjs/plugins/keep-markup/prism-keep-markup.js';\nMaybe you should check your bundler's paths - what directories are being\nsearched when resolving modules and if the node_modules directory is\nbeing taken into account.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismJS/prism/issues/1171#issuecomment-329153509, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AX5XblYzCBK4228K8jHrYJwBWTKDuK1-ks5sh8v6gaJpZM4Ork19\n.\n. Haven't tried it with virtual DOM.  Good idea though.\n\nOn Wed, Sep 13, 2017 at 1:21 PM, Golmote notifications@github.com wrote:\n\n@florinpop17 https://github.com/florinpop17 @megamindbrian\nhttps://github.com/megamindbrian At the moment, most plugins won't work\non Node because they use the DOM (Line numbers and Keep markup are one of\nthose).\nAre you trying to use those with some virtual DOM node modules or\nsomething?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismJS/prism/issues/1171#issuecomment-329285456, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AX5XbsAgTEosEREx991pbiqHwceGZeFMks5siDk9gaJpZM4Ork19\n.\n. \n",
    "adnanoner": "@megamindbrian you can just use:\nimport Prism from 'prismjs';\nrequire('prismjs/components/prism-swift');. ",
    "a-rey": "Thank you for your comments! \nI made the changes you brought up. Let me know if you see anything else.\n. Made the requested changes. Thanks again!\n. minified and example ready!\n. Renamed the component to verilog. Added more info to components.js and prism-verilog.html to note the crossover between the 2 languages. Made the requested changes and updated a few mistakes on my part with the languages. Let me know if you see anything else.\n. ",
    "TheZoker": "Hi, thanks for the fast answer :)\nJust included the code, but now its totaly messed :P\nhttp://demo.comboot.io/viewtopic.php?style=2&f=2&t=34 \nhttp://demo.comboot.io/viewtopic.php?style=2&f=2&t=7&p=66#p66 (code completly missing)\n. I re-downloaded it and same issue :/\n. Your right, was cached in my browser :)\nThank you very much!\n. Fixed! Thank you :)\n. ",
    "javadoug": "+1 for json highlight grammar to be built-in out of the box.\n. ",
    "trombonehero": "Maybe somewhere around plugins/file-highlight/prism-file-highlight.js:24 the plugin should check \"if my pre has a class that includes language-, let me copy that rather than using the extension\"?\n. The new version works perfectly. Thank you!\n. ",
    "brentonstrine": "If I get a chance, I'll try to re-work my function to something that would work as a plugin. Any general suggestions before I start on that? E.g., should it just automatically run on all multi-line blocks if it's instantiated as a plugin, or should it require an extra class to trigger it (as I've done above.)\n. @vkbansal Awesome!\n. ",
    "italodr": "This plugin looks nice, but how can you use it with npm import?. Awesome news @zeitgeist87 Thanks!!!. ",
    "mcdurdin": "Thanks for the deep review. I think all comments addressed, a couple of extra minor tweaks as well.\n. Thank you both as well -- that's how a pull request should always work :)  Smooth as.\n. Added extra keywords baselayout, layer, platform, as well\n. T, U are referenced in http://help.keyman.com/developer/9.0/guides/touch-layouts/creating-a-touch-keyboard-layout-for-amharic-the-nitty-gritty.php. \nAlso will tweak quoted strings (non-greedy match).\nAware that ordering virtual keys ahead of strings will format \"[K_A]\" wrongly but in practice this would never be used so not worth supporting.\n. ",
    "siemiatj": "This should get you going. Mind, that I'm highlighting manually : \n```\n\n\n\nangular.module('app.code-highlight-directive', [])\n  .directive('codeHighlight', ['$compile', '$timeout',\n    function ($compile, $timeout) {\n      return {\n        restrict: 'E',\n        scope: {\n          type: '@',\n          source: '=',\n          disableHighlighting: '@'\n        },\n        link: function(scope, element) {\n          var timeout;\n          scope.$watch('source', function(value) {\n            if (!value) return;\n            element.html('{{ source }}');\n            $compile(element.contents())(scope);\n            var code = element.find('code')[0];\n            code.className = 'language-'+scope.type;\n            if (scope.disableHighlighting !== 'true') {\n              timeout = $timeout(function() {\n                Prism.highlightElement(code);\n              }, 0, false);\n            } else {\n              element.find('pre')[0].className = 'language-'+scope.type + ' line-numbers';\n            }\n          });\n      scope.$on('$destroy', function () {\n        $timeout.cancel( timeout );\n      });\n    }\n  };\n}\n\n]);\n```\n. Not sure if that helps in your case but I've rewritten the tokenizing part of prism as it was too slow and unstable with large files : https://github.com/siemiatj/prism-lite . It comes with some drawbacks but maybe this won't be a problem for you.\n. ",
    "estevaoam": "Please, merge this. :+1:\n. ",
    "polybuildr": "Thank you! Now I'll have a nicer experience on all those websites using Prism. :D\n. Opened #646 in case it helps.\n. /cc @Golmote\n. ",
    "dellagustin": "Thanks for the comments, I did the changes.\n. I remember I had a similar issue when reusing code from a Chrome extension in a Greasemonkey script. I had to adapt my code accordingly. Solution 1 would have probably worked, but I am a WebDev newbie.\n(the script: https://github.com/dellagustin/SAP_Note_Enhancer/blob/firefox_gm_user_script/greasemonkey/sap_note_enhancer.user.js)\nThe third option looks interesting, maybe it would work with Greasemonkey by having a @require to a .js file containing the configuration before the @require to prismJS, but this would force the hosting of one additional file.\nMaybe, you should provide a method in Prism that encapsulates \njavascript\ndocument.removeEventListener('DOMContentLoaded', Prism.highlightAll);\nlike Prism.preventAutoHighlighting or Prism.manualHighlighting. This way you would be able to fix users implementations in case you make changes to the way the listener is currently used. \n. That is because in the official ABAP Editor this specific kind of operator is highlighted as keyword.\n. ",
    "ronilaukkarinen": "Hmm, weird.\n\n. ",
    "XVincentX": "@Golmote Cool, can we do something for that?\n. ",
    "breeswish": "+1 for this feature. in fact you only need to add something like var prism = require('./prism-core.js') in each file\n. ",
    "SirZach": "The code blocks should switch themes but without a page refresh to grab different CSS. I'll probably end up supplying my own theme that can flip back and forth based on attributes. Thanks!\n. ",
    "darul75": "Hi, yes go is there but when I look into my generated lib code or debug it I only get a clike grammar matching. I will check it again\n. Sure I will need to make some checks before and send it back to you then, thanks for quick answer\n. I am calling manually highlight function\njavascript\nprism.highlightAll()\nwhen debugging it I got something like in highlightElement function\njavascript\nhighlightElement: function(element, async, callback) {\n...\nif (parent) {\n            language = (parent.className.match(lang) || [,''])[1];\n                        // language: \"go\"\n                       //\n            grammar = _.languages[language];\n        }\nthen can not retrieve grammar because grammar looks like \nObject {markup: Object, css: Object, clike: Object, javascript: Object}DFS: (o, callback, type) {clike: Objectcss: Objectextend: (id, redef) {insertBefore: (inside, before, insert, root) {javascript: Objectmarkup: Object__proto__: Object\neven if go extends clike, I do not see how it could work.\n. Hi,\nEverything is bundled with webpack but content rendered is here.\nexample with go\nhttp://www.darul.io/post/2015-07-22_go-lang-simple-reverse-proxy\nexample with js\nhttp://www.darul.io/post/2015-07-06_immutablejs-overview\nUsing React, Prism call is made in componentDidMount() event cycle method.\nprism.highlightAll(() => {};\nI think I make something wrong but do not know why it works with language-clike or language-javascript but not for language-go\n. Ok I have missed something somewhere, thx a lot. Prism is so great, really good job.\n. thx both @javatlacati @Golmote \nwell, I have downloaded the right prism library distribution by hand...but my code is using npm dependency instead, my mistake.\nif I want to continue to use my npm dependency, is it a way to force loading of some languages (components folder) \ntoday, I naively do:\nlet prism = require('prismjs');\nwould it be possible to get something like\nlet prism = require('prismjs');\nprims.load([\"go\"], \"...\");...\n. ",
    "markg85": "hi @loganfranken,\nYou seem to be spot on. A \"no-grammer\" hook sounds a bit weird to me. I'd probably go for a \"complete\", \"completed\" or \"done\" hook which should probably be run when the core prismjs is done doing it's thing.\n. @Golmote I'm not quite familiar with how this script works and where it should be adapted. So I happily leave this to your (or anyone else who knows what needs to be done) capable hands :)\n. Thank you folks for fixing this (issue #645). It looks perfectly fine to me now.\n. Hi Golmote,\nWeird.. On my devices it's clearly not smooth.\nin FPS terms, it would be about 20 FPS. Just notably sluggish.. ",
    "davidpeach": "No probs!\ntake care,\nDave.\nDavid Peach\nFreelance Web Designer\ndavidpeach.co.uk\nOn 31 July 2015 at 15:07, Golmote notifications@github.com wrote:\n\nThanks !\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismJS/prism/pull/647#issuecomment-126703530.\n. \n",
    "manfer": "@javatlacati No, I'm developing on a private server. I was now trying to make a jsfiddle but there is no build of the prism library (with all those components) that I know so I could load it on jsfiddle. So I suppose I will have to upload it myself somewhere. Unless I can use the download link from the \"Customize your download\" prism page.\nI forgot to mention. There are no errors on the console at all.\n. http://codepen.io/anon/pen/LVqGoj\nSome combinations of plugins must not play well together. Otherwise I can't understand it. With this combination I can't use file highlight either. If I try:\n<pre class=\"line-numbers\" data-src=\"someurl\"></pre>\nI get no result at all. Only if I run myself:\nPrism.fileHighlight()\nthen the code of the file is loaded and displayed with syntax highlight but ignoring line-numbers too.\n. This is really annoying. If I create in customize your download one with just core, default theme, the 4 default languages and line numbers plugin. It still doesn't work.\nIf on the other hand I load individually the core prism.js, the javascript language component, and the line numbers plugin from the tag 1.0.1, it works fine.\nIf I try to genere that combination with the customize download I'm forced to selec c-like too. And it doesn't work. Don't know if it would work without the c-like because it can't be deselected having javascript selected at the same time.\nI'm going to create a last customize one with only css language to test. My last attempt. If it still fails I will need to try to join the files myself and see what happens.\n. I found the problem. The generated js and css files are fully dependant. You can't build a css with a group of components selected and then change components and download only the js file because it won't work.\n. ```\n(function(){\nif(!window.Prism) {\n    return;\n}\n```\nThis is the prism code were it fails. I can't provide a line number as it is from a generated prism.js from the prism download page and will be different depending on what you choose.\nI will try to find out to what plugin or component that code belongs to.\n. Ok. That looks a bug in Highlight Lines. Looking into other plugins they use\nif(!self.Prism) {\nAnyway, even changing that line my code is still not working because when highlightAll callback is triggered highlight lines hasn't been triggered yet. I will need to extend Prism in some way. I read you were thinking on adding an onComplete event to Prism. I suppose that would be a place to put my code. And I could forget about the callback.\n. Ok. I have done it by editing the line numbers plugin and adding at the end of its hook callback the onclick binding.\n``` javascript\nPrism.hooks.add('after-highlight', function (env) {\n    // works only for  wrapped inside  (not inline)\n    var pre = env.element.parentNode;\n    var clsReg = /\\s\\bline-numbers\\b\\s/;\n    if (\n        !pre || !/pre/i.test(pre.nodeName) ||\n        // Abort only if nor the  nor the  have the class\n        (!clsReg.test(pre.className) && !clsReg.test(env.element.className))\n    ) {\n        return;\n    }\nif (clsReg.test(env.element.className)) {\n    // Remove the class \"line-numbers\" from the <code>\n    env.element.className = env.element.className.replace(clsReg, '');\n}\nif (!clsReg.test(pre.className)) {\n    // Add the class \"line-numbers\" to the <pre>\n    pre.className += ' line-numbers';\n}\n\nvar linesNum = (1 + env.code.split('\\n').length);\nvar lineNumbersWrapper;\n\nvar lines = new Array(linesNum);\nlines = lines.join('<span></span>');\n\nlineNumbersWrapper = document.createElement('span');\nlineNumbersWrapper.className = 'line-numbers-rows';\nlineNumbersWrapper.innerHTML = lines;\n\nif (pre.hasAttribute('data-start')) {\n    pre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);\n}\n\nenv.element.appendChild(lineNumbersWrapper);\n\n$(\".line-numbers-rows > span\").on(\"click\", function() {\n    var line = $(this).index() + 1;\n    $(pre).attr(\"data-line\", line);\n    Prism.highlightAll();\n});\n\n});;\n```\n. > Just curious, why is this branch moved here? It can be argued that an empty code block should still trigger the complete hook.\nNot sure if you mean that an empty code block now triggers the complete hook and it shouldn't or if you want to trigger it and it doesn't. Anyway this code has nothing to do with that issue.\nIf,\n<pre><code></code></pre>\nis a problem before or after this code,\n<pre><code class=\"lang-xxx\"></code></pre>\nfor a valid xxx language is/was either. And this code does not deal in any way with that issue if there is any.\nThe hook addition has been suggested on https://github.com/PrismJS/prism/issues/645 and the problem that tries to solve is to include line numbers on source code for which there is no grammar.\nSo the complete hook runs at the end of proccess. For source code for which there is a grammar that's at the end, line 233. But for source code for which there is no grammar (!grammar) that's on line 196 before the return.\nI'm not too familiarized with the library so the PR can be wrong of course. So needs review.\nI'm curious which other place will be better for a complete hook.\n. ",
    "SergeyPodgornyy": "I also had the same problem, that plugin line-numbers was not displayed. The problem was, that I had a custom css for pre tag, that overwrites padding from plugin css. So, line numbers were not displayed because of the wrong padding.. ",
    "Hyuchia": "Thanks, I applied fixes for the issues. Actually the regex for hex values was not needed since they are expected to be strings. \n. I've added the examples file as well as simplified those expressions. Thanks!\n. Hey guys, anything left I can do to get this PR merged?. ",
    "suture": "That's a dumb attitude. You're happy to let this break on some systems, for the sake of a single character in a comment. \n. Shopify is not an open source system. It's not possible for me to submit an issue on their github page. In all likelihood it has nothing to do with their webapp, but rather their server/security configuration. \nIt's not surprising for a system which processes online payments, to have restrictive limits that might otherwise seem archaic. \nYour program fails address backward compatibility. You have essentially built in an unnecessary weakness. For what gain? \nEven the Don't be dumb website says that it's okay to use straight quotes in code. \n. Hi @Golmote and @uranusjr \nMy sites are working fine. I simply deleted the apostrophe.\nI only raised this ticket to help others avoid the issue.\n. ",
    "janvanhelvoort": "if you have a code block with the following layout, E.g.\n<pre class=\"line-numbers\"><code class=\"language-handlebars\">{{template}}</code></pre>\nIn the 'Line-Number' plugin, on the following lines #40 - #42, the output is set on env.element.\nIf you use it with handlebars syntax highlight, the added code from the 'Line-Numbers' plugging is removed, because on line #75 - #79 the code is overwritten. It uses env.highlightedCode instead of env.element.\nThe fix of mine, takes env.element.innerHTML if it is there, otherwise it will take the env.highlightedCode\n. Strange, in your example, it works, in our project, it isn't working,\nCan I mail jou the project?\n. I see it, on you site: Prism-line-numbers.js rule #1: Prism.hooks.add('complete', function (env) {\nIf i get it from Bower, rule #1 Prism.hooks.add('after-highlight', function (env) {\nbut on git, the correct line is displayed ( Prism.hooks.add('complete', function (env) { )\nBower is serving old code?\n::Edit\nAnd it uses the wrong git: git://github.com/LeaVerou/prism.git#~1.0.1\n$ bower update prism\nbower not-cached    git://github.com/LeaVerou/prism.git#~1.0.1\nbower resolve       git://github.com/LeaVerou/prism.git#~1.0.1\nbower download      https://github.com/LeaVerou/prism/archive/v1.\nbower extract       prism#~1.0.1 archive.tar.gz\nbower resolved      git://github.com/LeaVerou/prism.git#1.0.1\nbower extra-resolution      Unnecessary resolution: angular#1.4.3\n. $ bower install 'git://github.com/PrismJS/prism#gh-pages' --save works for now :+1: \n\"dependencies\": {\n    \"prism\": \"git://github.com/PrismJS/prism#gh-pages\"\n  },\n. ",
    "DeNelo": "Oh I see. Would that be covered by another bug report?\n. I see! Thanks for enlightening me. Wow, this is complex... :)\nI suppose that ideally prism should accept whatever the owner of the format accepts, in this case Microsoft, in classnames. But I can see that would defeat the purpose of keeping prism very light-weight. So I'll be more careful with my x's another time..! Thanks!\n. ",
    "laukstein": "Needs compatibility also on <code> width change.. ",
    "windowsair": "@Golmote :pensive:It does not seem to work properly. When you change the window size, the above problems will occur.. > Chaos....  I mean there may be some problems with typography.\nLike this:\n\nYou can clearly see the problems. When the white-space is removed, the normal situation is like this :\n\n.   By the way, this problem does not occur only if the value of white-space is pre. However, the effect here is equivalent to not add white-space. \nLook forward to your favourable reply.. Uh..... The This picture may be more obvious ...\n\n. @LeaVerou Do you see it?:-). @Golmote :smile:LGTM.That's what I want.  You seem to forget to add a class called line-numbers. I'm not sure if you have the correct write. Of course, I may be wrong, please point out ..... Could you let me have a look at your web page code?\n. Can you give me a copy of the output page file (js, css, html)?. ",
    "danvim": "@Golmote Oh darn! I wanted to avoid highlighting:\n```\nx , y;\nx,\ny\n```\nI can't first grab /var[\\w\\W]+;/ because JavaScript doesn't require the semicolon at the end.\nI guess I will have to find a new way then\n. @Golmote Actually, I want to achieve this: http://brackets.io It is definitely using some kind of JS regex highlighter. But, oh well~\n. @Golmote I'm sorry for my stupidity. But I don't quite sure what is regex vs parser type of highlighting. I've seen CodeMirror, can you point me to a page for explaining?\n. ",
    "malash": "I made a PR here https://github.com/PrismJS/prism/pull/674\n. Using JSON.parse may work, but is not perfect. Even code comments can cause parse failed.( See https://github.com/PrismJS/prism/blob/b8d098e1d420715366302274c511ab4aeaeeb2fe/components.js:58 // ---, Other situation like ' instead of \" can also cause failed ). Because JSON is the subset of JavaScript. Contributors won't program in strict JSON format. So if I program the Angular Module depend on this repo, it will not work someday, or today :(\nThe new components.js get components.json data via Ajax, and it can work well on Github Page http://prismjs.com/. Maybe the problem is some 3rd-part websites include the components.js and read the global var components. In the new components.js the Ajax will cause the Cross-Domain error. So the problem is that how many 3rd-part wensites imclude the components.js?\n. Thank you. I'm waiting for your approval.\n. ",
    "AnujRNair": "@uranusjr I ran into the same issue today.\nA quick fix is available by adding the following CSS code:\ncss\n:not(pre) > code[class*=\"language-\"] {\n    display: inline;\n}\nEdit: I have added a pull request for this fix here: https://github.com/PrismJS/prism/pull/725\n. It will, however bootstrap sets word-wrap: break-word, which means that if wrapping is needed, a word (or unbroken string) will be broken to allow text to wrap so it fits in it's container. \nFrom my understanding, the white-space: pre property only stops lines wrapping at white spaces!\nSetting both means that lines will overflow correctly and not break on whitespace, or words\n. I am using Chrome Version 44.0.2403.157 (64-bit) on a Mac.\nI see these for word-wrap: break-word:\n1)\n\n2)\n\nIsn't the goal to always keep a line of text on one line, and not wrap it, so that the line numbers render correctly next to their respective lines?\nApologies if I am being confusing, or I am missing something!\n. Awesome, thanks!\n. Hi @Golmote, no problem! Im loving PrismJS :)\nI've realised the problem actually exists because Bootstrap3 is applying some styling to the pre blocks, as seen here:\nhttp://codepen.io/anon/pen/jbPjwm\n2 options can help solve this:\n- The proposed commit\n- Setting pre[class*=\"language-\"] { padding: 0; } to reset the bootstrap styling\nSolution 1 leaves some nice space at the top and bottom of the code block.\nSolution 2 resets the problematic styling, however, doesn't leave any spacing at the top and bottom of the code block\nMy proposed solution would be solution 2, as this fixes the actual issue, and then allow the developer to add more styling on their own in they would like to fix spacing.\nIf you're happy with solution 2, I can kill this merge request and create a new one?\n. Thanks, done!\n. ",
    "gibsjose": "Switching to dedicated branch\n. Fixed!\n. Sure thing!\n. Interesting discussion! Thanks for the link.\n. Very nice! I'll give it a shot!\n. Thanks mate :)\n. Upon further review, it appears that self is not a keyword (which is likely why it wasn't there in the first place...).  I will correct this and commit an updated version only including the class-name.\n. ",
    "zot": "The highlighting shows properly if you don't use the CSS classes for anything other than the default setup.  The problem comes when you want to use the CSS class for something like drawing a box around the numbers on hover.  This expression:\n(+ 3 4)\ngenerates this markup:\n(+ 3 4)\n\nSingle preceding spaces are included in the \"token number\" class spans because the regexp has a (\\s|)) group at the beginning which matches a single space or close paren.  Adding lookbehind: true fixes the problem.\n. Thanks for the timely fix!  I fell asleep before I put in a better example, since GitHub stripped the HTML out of the one I gave.  Guess you didn't need it :).\n. javascript's number definition (which is what I'm actually using) also begins with \\b-? and should probably be changed to -?\\b\n. The current def works fine for for people who only want pretty colors (probably most users of prism).  I, however, am using prism for both pretty colors and tokenization in my playground, so that I can find numbers to change with value sliders.  I'll just make my own def.\n. ",
    "codemedic": "I do have the version downloaded yesterday from the webiste; I presume that is the latest version.\nI must say, I couldn't reproduce the issue on the Test Drive page. :(\n. I can, but unfortunately this website is still in development and would\nonly be available in a couple of weeks.\nI will update the ticket, when it comes out.\nOn 25 August 2015 at 17:50, Golmote notifications@github.com wrote:\n\nCan you provide a link to an online page reproducing the issue please?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismJS/prism/issues/712#issuecomment-134667977.\n. \n",
    "EpicTimoZz": "i was able to reproduce the issue outside of the website. \nhttp://pastebin.com/1kuiqGid\nim aware that the code above the not highlighted code has the span tags already apply to it. but this is what happens when the js error accures. so i think i isolated it properly.\n. i really found an issue? wow! how do i get the fixed version now? :) (wow i cant believe it wasnt my code that broke something that worked before)\n. thank you! everything is fixed. open source is truely awsome. thanks for making my forum possible!\nhttp://altpalace.com/thread.php?id=1\nif you want to see how i integrated prism into my site!\n. ",
    "bimohxh": "Just visit http://www.awesomes.cn/repo/PrismJS/prism you see the same info   as the readme here,because your browser language is English.Our website support both Chinese and English language,so we will detect the browser language ,if it is Chinese we will default show Chinese translation,otherwise show the English readme.And we offer a language switch on the top right as EN / \u4e2d,you can click \u4e2d to read Chinese version.\n. ",
    "brutalcrozt": "ping to update\n. ",
    "thetutlage": "Yes twig does a good job :-)\n. Closing as twig works great\n. ",
    "chr22": "These languages:\nPrism download page\n. Thanks. The problem is fixed.\n. The problem isn't specific to the Nexus, it is devices with slow CPUs (all smartphones and tablets), because you have so much initialization that are very CPU heavy. But i hear you, you don't want to change that (which is fair), so i will play with som async loading, or change framework.\n. ",
    "k-funk": "+1 for any solution that doesn't require me editing my html files.\nAlternative to the other suggestions, if Prism was split into separate files, I could just import { highlight, languages } from 'prism/lib';. My use case, which I think is fairly general when wanting to use manual, is to import and use the Prism.highlight function directly. An example of that on the docs would be really helpful.\nThis is what I'm currently using, with the data-manual on my html/script tag. I'm hoping with this PR I can take that html tag out.\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-json';\n\n// initialize view\nPrism.highlight(JSON.stringify(rawJSON, null, 2), Prism.languages.json).\n",
    "bebraw": "Yeah. That is exactly what I wanted to avoid, hence the wrapper. I can just do a lookup against it when highlighting and that's it. :+1:\n. Yeah, that would work. I would still need to publish the result through npm given I consume this as a package dependency (highlighting plugin for a static site generator).\n. Here's the problem:\n``` bash\n\nprism = require('prismjs')\n...\nObject.keys(prism.languages)\n[ 'extend',\n  'insertBefore',\n  'DFS',\n  'markup',\n  'css',\n  'clike',\n  'javascript' ]\n```\n\nThe current distribution provides only a subset of languages through package main making it tough to consume. As you mentioned, a consumer could just require every language. That's not ideal.\nIt would be far better if the listing above would contain all language definitions. That would render by package obsolete (good thing).\nRegarding #578, that might be a good idea. Just having an official npm package with the definitions in an easy to consume format would do the trick.\n. Cool, let me know if I can be of any help. Feel free to reuse my script thinger as you want. It just concats the files, deals with the global and exposes the language definitions.\nIt's possible to do something more sophisticated and generate a separate entry point in addition to a CommonJS wrapper for each. In fact you can push one more step forward from that and go UMD. If you need a library for that, maybe libumd would work. That would make it really easy to consume individual definitions from global/AMD/CommonJS environments.\n. @Golmote Publishing a package for each and every language definition might be a little much. I would be happy with a single package that's easy to consume in various ways. Just having a nice entry point through Node would do for me personally.\n. @glenjamin Bummer. Two options. We can fix this on Prism side (preferable) or I can undeprecate the package. I am not maintaining it actively as I don't need it anymore. Of course if you are interested, I could transfer the package to you and you could take over. It's bit of a hack, but the definitions are there.\n. Yeah. prismjs/all would definitely solve it. Feel free to reuse any code you want from my approach in case you make a PR. There was some ordering business I had to hack manually to make it work.\n. FYI, I hit the same problem at prism-languages when trying to get it up to date. Given I just concat the language definitions, this happens.\n. I \"resolved\" this problem at prism-languages. I simply hacked together a dependency declaration of my own. Now it's possible to consume the definitions from Node easily. This makes it ideal for backend processing. You probably don't want to use this on frontend, though, due to the sheer amount of definitions.\nIdeally we would be able to drop prism-languages altogether. The current Node version of Prism seems better than what it used to be, but it's still missing most fo the language definitions.\n. @vkbansal Thanks! That looks nice. FYI, there's a better language definition for jsx. Maybe you can adapt that.\n. ",
    "rrag": "The plugins are handled via hooks and they are called from inside highlightElement which accepts an element. When running from node I am using the highlight (text, grammar, language) { which does not trigger the hooks.\nAny ideas on how to use plugins on node?\n. prismjs/plugins/line-numbers/prism-line-numbers\nTo better explain what I am trying to do, I have some documentation as markdown and build a static site with some custom code. I can pass a highlight function to the markdown parser, and the parser returns an HTML.\nMy highlight function now looks like this\n``` js\nvar Prism = require('prismjs/components/prism-core');\nrequire('prismjs/components/prism-jsx');\n...\n...\nhighlight: function (str, lang) {\n    var grammar = lang !== undefined ? Prism.languages[lang] : Prism.languages.markup;\n    return Prism.highlight(str, grammar, lang);\n}\n```\nthe line-number plugin does not expose a function it only adds a hook, and this function also takes an env object which has a dom element \nas for \nprismjs/plugins/line-highlight/prism-line-highlight\nI have some ideas where markdown will send me the line range as part of the lang and I can slice that string to call the line numbers plugin. But the highlightLines method takes a pre element as an input.\n. ",
    "glenjamin": "@bebraw I notice you've marked prism-languages as deprecated, but it doesn't look like all the languages are available in the default bundle. Is there a trick to make this work?\n. I think it'd be neat if there was a prismjs/all entrypoint which included all the components - ideally via some code generation pre-publish so it will work with browserify/webpack.\nI'll probably try doing something similar in my build for now.\n. ",
    "feimosi": "I've encountered the same problem. Would be great if this issue could be resolved. Currently as a workaround I'm using the global scope instead of the imported Prism instance.\n. ",
    "danielberkompas": "I'll give it a try and let you know.\n. Changing the negative lookahead wasn't enough. If it was given this:\n``` elixir\n@doc \"\"\"\nHeader\n\"\"\"\n```\nIt would match on # Header. Since Javascript doesn't support negative lookbehinds, I added a negated capture group to assert that the # is not preceded by any other #s. What do you think of this solution?\n. Done! I amended the commit.\n. How do you run the tests?\n. I'm fixing this now.\n. :+1:\n. ",
    "MakeNowJust": "@Golmote Thanks for reviewing my code.  I fixed them.\n. @Golmote @zeitgeist87 Can you merge this? It is small fix.. @Golmote No problem. Thank you!. Sorry. I'll fix it.  My editor uses spaces as indent. Why doesn't this project use linter or .editorconfig?\n. ",
    "chaosshen": "Yeah, this bug can be fixed by checking the extra divs' existence and I'll add it in the next commit.\nOn the Show language plugin page I found another bug in my code. The label doesn't move with a nonzero margin-right of pre. What's more, if I limit the height of pre, the label will cover a part of vertical scroll bar... I still can't solve them. Do you have any good idea?\n. ~~I've found the solution to this not using the extra divs! Add the following code to prism-show-language.css:~~\n``` CSS\npre[class='language-'][data-language] {\n    padding: 0;\n    position: relative;\n    / hide pre's scroll bar */\n    overflow: hidden;\n}\ncode[class=\"language\"] {\n    padding: 1em;\n    display: block;\n    / use code's scroll bar */\n    overflow: auto;\n}\n```\n~~Then pre::before won't be affected by scrolling of code. The solution is from theme coy.~~\n~~However, part of the vertical scroll bar may still be covered by the label. One way is to add a margin-right: 1em; to pre::before and set overflow-y: scroll; to code, which will always show the vertical scroll bar even if no need.~~\n~~In addition, it's best to set code[class*=\"language-\"] the same max-height as pre in style.css when applying display: block; like above.~~\n~~Please close this PR and I'll open another. Or you do it yourself?~~\nFailed with Line Numbers plugin... :joy: \n. ",
    "podgorskiy": "Yes, it also fixes issue with Crystal, I've just checked. \n. Was glad to help!\n. ",
    "fladd": "@Golmote \nhttp://ghost.fladd.de/welcome-to-ghost/\nSafari and Chrome.\n. @Golmote Unfortunately, white-space: pre does not solve the problem.\nI just added this to my prism.css (which is loaded after the screen.css). But the problem still persists. Actually, now the numbers don't even line up with the code lines...\nAnything else wrong with my setup?\n. @Golmote Indeed, word wrap was it.\nTo fix the issue of line numbers not lining up with the code: pre.line-numbers > code needs a padding-top: 6px. No clue why. But now it is lined up. Maybe this can be fixed in your default code?\n. ",
    "pawanrawal": "Hi, do you mean to say that I change the code and pre selectors in the css and js files of one of the themes to some other selectors and use the new selectors to style an element ?\n. Thanks @Golmote that works. Please close this issue.\n. ",
    "hamaluik": "Uhh.. shouldn't this have been merged to master instead of gh-pages??\n. ",
    "gytdau": "After some testing, I can indeed confirm that the problem stems from too many languages. \nThanks for your support!\n. ",
    "digitalmoksha": "I don't think the cause is from too many languages.  I started running into this same problem when I wanted to add a couple languages, and of course pulled the very latest js code.\nThere is something about a specific language module that seems to cause the problem.  haml is one of them.  For example, this combination works:\nhttp://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript+actionscript+apacheconf+applescript+aspnet+bash+c+csharp+cpp+coffeescript+ruby+css-extras+dart+git+go+handlebars+java+latex+less+lua+makefile+markdown+nginx+objectivec+perl+php+php-extras+python+r+scala+sql+swift+wiki+yaml\nAdd haml to it, and you get the error.  It was through the process of elimination that I found haml was the problem.  So even the following minimal set fails:\nhttp://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript+ruby+haml\nThere is at least one other language (not in my normal use set) that is causing the same problem, because if I include all languages except haml, the error occurs.\nSo the solution for me at the moment is not to include haml. I don't have the time to try and figure out exactly why haml causes the failure, but maybe this points someone in the right direction.\n. ",
    "iboshkov": "For some reason HAML didn't trigger the error for me, it was AsciiDoc that did it. Not sure why, at all.\nI included all languages a few at a time (including haml), and the only one that caused the error was AsciiDoc.\n. ",
    "amr66": "Yes, that's it! It worked after i changed that! Courious that prism \"detects\" the error. So thank you very much!\n. ",
    "dangelion": "So is still a bug? Have you in plan to solve it?\n. ",
    "vexhack": "That did it! Thanks so much!\n. ",
    "GaneshKandu": "thanks a lot ! its working\n. <pre>\n<code class=\"language-markup\" >\n&lt;html&gt;\n\u00a0\u00a0&lt;head&gt;\n\u00a0\u00a0\u00a0\u00a0&lt;title&gt;title&lt;/title&gt;\n\u00a0\u00a0&lt;/head&gt;\n\u00a0\u00a0&lt;body&gt;\n\u00a0\u00a0\u00a0\u00a0&lt;p&gt;MyBody&lt;/p&gt;\n\u00a0\u00a0&lt;/body&gt;\n</code>\n</pre>\nWorks\n. yes!\n. ",
    "GitHub-Yann": "So , it must replace \"<\"/ \">\" as \"& lt;\" / \"& gt;\" ?\n. ",
    "telic": "Yes, that would arguably make it more readable. The negative lookahead would need to be repeated for every character though (i.e. /(?:(?![\\r\\n])\\s)+$/), which I imagine could be quite slow\u2026\nHere's a JSPerf test: http://jsperf.com/negated-vs-modified-class. Safari does especially poorly with the lookahead version for me.\n. ",
    "jandockx": "merged eval into gh-pages in the clone.\nSee http://jandockx.github.io/prism/plugins/eval/index.html.\n. Hi, Lea.\nIf you can detail which parts you think are overkill, we can no doubt resolve that. But you might want to take a second look. I believe \"over 50% of the code is error handling\" is a bit of a misunderstanding.\nThere are some (6) debug/trace-outputs, and we can remove them, if you like (although I normally don't think that is a good idea - they were put there during development for a reason, but anyway - potato, potato). The conditional structures they are in are functional, however, so the only thing that can be removed are the 6 output statements (and the debug function and \"debug log level\", if it is no longer used).\nThe other output is either 1) the point of the plugin - giving output, or 2a) info and warning about probable tag / attribute misconfiguration and 2b) problems during execution of the subject code. This was added during use.\nI found myself hunting for \"why doesn't this output doesn't show up\". A simple info or warn in the console helps me to find the tag / attribute misconfiguration quickly.\nAs the plugin is intended for literate programming, I also need a mechanism to kind of \"debug\" the subject code. If something goes wrong with the subject code, like an uncaught exception, a syntax error, etc., I would like as good and as direct as feedback as possible. It's a negative point that I cannot give more clear feedback than I do now (no line numbers, no stacktrace, ...).\n. @mAAdhaTTah : eval an sich is not an issue. Any code you run in a browser is a security concern. \nIn the threat model, 3 parties are involved: the user, the author of the web site visited, and potentially 3rd parties. The browser has measures to protect the user from malicious intent by the author, by sandboxing, and to protect the code of the author as much as possible from malicious 3rd parties. The user trusts the author in the functionality between the user and the author. The author must protect its code from malicious 3rd parties (such as other users) within the leeway left by the browser. The latter comes down to 'do not execute code in your site that you have not authored yourself'. And here eval is a potential vector to watch out for. But so is, e.g., loading a Javascript file from a user supplied URL.\nMDN says:\n\nDo not ever use eval!\neval() is a dangerous function, which executes the code it's passed with the privileges of the caller. If you run eval() with a string that could be affected by a malicious party, you may end up running malicious code on the user's machine with the permissions of your webpage / extension. More importantly, a third-party code can see the scope in which eval() was invoked, which can lead to  possible attacks in ways to which the similar Function is not susceptible.\n\nA more important caveat might be that eval is very slow, and it also slows down other code in the page.\nThere is nothing against adding 'screaming warnings' that this feature executes code. As this is not the primary goal of prism, that might indeed by cautious. But, as @LeaVerou  already noted, that's kind of the point of this feature. And when you author code, any code, the  issues mentioned above arise.\nApart from that, I am sure the code can be ameliorated in a thousand ways \u2026 . ",
    "carlfriess": "Jep! True, I didn't know about your PR when I made this one. It might be nice to add an alias like builtin so that themes highlight class names by default.\n. ",
    "ashkitten": "Oh sorry, forgot about this. Thanks @Golmote for implementing it, when I put my new website up I'll be sure to update it with this change.. ",
    "chriswells0": "Thanks for the feedback.  I wanted to respond sooner, but I had a busy week leading up to getting my wisdom teeth removed on Thursday.\n- I'll revert ./prism.js and edit ./components/prism-core.js instead.\n- Do you mean a separate commit or a separate PR for the whitespace?\n- I added shell to ./components.js twice because I was trying to add a language and a plugin.  If that's not the right approach, let me know.\n- The shell language is currently just a copy of bash. The reason for creating a standalone language was three-fold:\n  1. It felt more semantically correct.\n  2. When the show-language plugin is used, shell and bash blocks are easily distinguished.\n  3. If someone wanted to extend or modify the shell language to suit their tastes, they can easily do so.  For example, as a FreeBSD user, I might want to override shell to use the commands/builtins that are part of csh instead of bash.\n. I'd suggest an alias rather than renaming bash to shell if a separate, stubbed language is not an option.  I can imagine renaming would cause issues for people with existing code using bash for the language.  Also, renaming wouldn't address the scenario of a bash script and interactive shell appearing on the same web page: they would show the same label while presenting different types of data.  There could be cases where a single web page presents an interactive shell as well as a bash script to be created on the remote server.\nI've reverted the changes to ./prism.js and made the same change (minus white space removal) to ./components/prism-core.js.\nPlease let me know if I should make further changes.\n. > I'd like to stress, that I am not a project owner of Prism, so you don't have to follow any of my suggestions\nThat's OK.  You're clearly more familiar with it than I am, and I appreciate the input.  You also sound like someone who might actually use this plugin, so your feedback is even more relevant.\n\nA PR should be about only one issue or feature.\n\nThis PR was meant to only add the language and plugin for styling shells.  I'm not sure if you're suggesting the language should be removed until that discussion is complete or if you're referring specifically to the change that allows highlighting of kbd elements.  That highlighting is actually part of the plugin, because it seemed more semantically correct to mark up interactive shells using kbd rather than code.\n\nMaybe we could rename bash to unix-shell and provide an alias for bash and shell.\n\nI think bash makes perfect sense for what it is.  While bash isn't my preferred shell, it's a good base for other UNIX shells since many of the commands are the same.  My original shell language actually used keywords/builtins from csh instead, but I thought I was being too specific to my own usage.  The thing I'd like to ensure is that bash scripts and interactive shell examples can be presented on the same page without showing the same label from the show-language plugin.  I'm open as to how to make that happen, though.\n\nIt would be nice if the plugin could also simulate the appearance of a Windows Powershell and maybe other command line interfaces.\n\nI'm admittedly out of touch with Windows, so I didn't think about it at all.  I thought creating the prompt via CSS would make it flexible enough, but it's a great idea to embed the entire prompt in the markup for the examples you gave.  I'd even be on board with removing data-user and data-host in favor of specifying data-prompt for every case.  What do you think?\n\nThe name of the plugin is also a bit confusing. How about something like terminal-simulator, command-line, cli-simulator, command-line-prompt or something else more descriptive.\n\nThe shell name makes sense to me, but I can see where you're coming from.  Perhaps a name like terminal, cli, or command-line would be more descriptive and/or universal.  Both shell and terminal are interchangeable in my mind, but obviously you're running a specific shell any time you're inside a terminal.  I'd lean away from including \"simulator\" in the name since it's not really simulating in this case (more representational than interactive).  Similarly, I'd leave \"prompt\" out of the plugin name and let that refer specifically to the prompt displayed for command input (i.e., the prompt is one part of the shell/cli).\n. I'm still pondering what to do about the language and the plugin name.  Renaming the plugin will require a lot of changes, so I want to be sure before doing that.\n. Give me your thoughts on this, please:\nAs I stated before, I wanted to be able to distinguish shell scripts and sessions when shown on the same web page.  Specifically, I didn't want the Show Language plugin to display Bash for both.\nAdding an alias for bash (e.g., shell, terminal, or whatever) seems to be a \"good enough\" solution for that.  However, now that the plugin supports other types of prompts, it doesn't seem to make sense anymore.  The plugin could be displaying any type of code in the interactive session, so the highlighting may need to be Bash, PHP, PowerShell, or anything else.\nI'm not sure how I'd prefer my code snippets to be labeled in a case where there are shell scripts and shell sessions on the same page, but maybe it should stick with the name of the language being highlighted and remove the new language completely. Of course, I (or others) could always add an alias in my own JS if I want Show Language to display a different value on my site.\n. I've made the suggested changes and updated the documentation page to include an example using the data-prompt attribute.  Is there a way for me to notify the project owner that I'm finished making changes related to this PR?\nI do believe an alias attribute would be a great addition to the show-language plugin, so I'll make that change and submit a separate PR.\nThis is my first GitHub PR and I'm new to Prism, so thanks for the guidance as well as the feedback.\n. It's rebased and committed.  Should look a lot cleaner now.\n. If I may, I have one more question:  when making an update to someone else's plugin, would it be a better practice to submit the PR to that plugin maintainer's fork and let them upstream the changes or submit the PR to the main project?\nFor example, I submitted a PR to add support for a data-language-label attribute in the show-language plugin, but I thought it might have been better to submit that to nauzilus so he could provide feedback/changes first.\n. Thanks!\n. In addition to the benefits listed by @zeitgeist87, the plugin also allows you to have some lines display the prompt while other lines are output (no prompt) without manually adding the prompt to every line where it should appear.\n. The output class makes it very simple to exclude the prompt from some lines, so I'd be hesitant to remove that.  Where are you suggesting the sample code you provided would go?  I may be misunderstanding, but do you mean the user would need to add that script for the lines that should be rendered as output?\n. Sorry, it's been a while since I looked at this code.  I thought you were suggesting removal of the data-output attribute rather than the output class.  I could go either way on that:  I don't mind removing it if you think there's a benefit in simplifying it further.\n. Thanks for merging this!  I was in the process of removing the output class, but I can submit that change as a separate PR.\nI was updating the Prism code on my site today, so I went back to grab the latest after you merged my 2 PRs.  I notice that it fails to fetch the minified version of the JS for this plugin.  I didn't include a minified version because I expected it to be created as part of the build process.  Should I minify it myself and submit a PR to add it?\n. Historically, how do you distinguish between a language and plugin?  I'd expect the language to refer to the syntax/highlighting and plugins to add meta-functionality.\nIf this is converted to a language, how would that impact the ability to use any language you want with it?\n. > You would have to explicitly add support for any language you want to use.\nI don't want to waste your time here, but would you mind giving an example?  Rough pseudo-code is fine.  I'm trying to imagine how that would work from the user's perspective with one or more code blocks on a given page/site and a variety of potential languages.\n\nthe prompt is part of the source code\n\nThis seems unnatural to me.  The prompt is merely the setting you're in.  Imagine if anyone who wanted line numbers had to number them manually when they're not actually part of the code.\n\nYou would only highlight the lines with prompts and not the output lines, which can prevent false matches of keywords and operators in the output of a command\n\nI like the thought of that.  I considered the possibility of false positives but hadn't addressed it yet.  As a plugin, we could do this with a command-line-output CSS class applied to the output lines.  Is there an existing way to tell languages not to highlight certain lines?  It would need to apply to the prompt portions as well since they would become part of the code in this case.\n. So the language code would loop through the *-command properties looking for a matching pattern and then use the associated inside property to decide which language to use for highlighting?  Forcing the user to hard-code prompts in order to match the language for highlighting seems limiting.  How about an attribute such as data-language to simply specify it?\nAdditionally, if we want to allow special highlighting/styling of the prompt, there could be a data-prompt attribute that accepts either the exact prompt being used or a regex of it.\nWe'd be limiting the supported languages to those that are explicitly defined in this meta-language, but we could start with a pretty good set (Bash, PHP, Python, JavaScript, PowerShell, Batch) and expand it on request.  That could be a barrier to use, though.\nAs someone who expected to use this plugin, which approach would you prefer as a user?  I'd try the meta-language approach with an open mind if you guys believe it's an improvement, but I'm still leaning toward the plugin for my own use because I don't want to hard-code shell prompts on every line.  I'd likely add the command-line-output CSS class to prevent false positives and possibly set the font to monospace.\n. @nauzilus - Adding you to this thread in case you have comments about the idea or implementation.\n. I went with data-language-label for 2 reasons:\n1. I saw data-language already being used in the code.\n2. To differentiate between the language used for highlighting and the label (closely matching the existing prism-show-language-label class).\n\nAs an side, the data-language attribute doesn't actually do anything anymore, since the label is now living inside a div. It could be removed entirely...\n\nWould it impact any existing users to reuse the data-language attribute for a different purpose?\n\nThe data-language attribute could be used to allow the user to specify a custom label, however could it live on the enclosing pre tag instead?\n\nI'll make this change once we settle on a final name for the attribute.\n. To give credit where it's due, it was @zeitgeist87 who recommended adding support for a language alias in our thread about PR 831.  I implemented his idea because I agreed it was a good solution to the problem.\n. In that case, removing it needs to be part of this PR (or another PR accepted prior to this one), right?  Should I make those changes?  If so, do you want it in a separate PR or this one?\n. I've merged in your changes from PR #840, changed my PR to use data-language on the pre, and added an example in index.html.  However, it appears that loading a file from the root is disallowed.  I ended up putting the contents of logo.svg inside the page and highlighting it.\nWhat is the \"proper\" way to mark this PR as depending upon yours?\n. I believe the conflicts are resolved now.  I also rebased the commits.\nI didn't really dig, but it seems a data-src pointing to any file outside the current directory doesn't load inside the pre.\n. I didn't realize the error message on this page would update automatically.  It's definitely resolved now.  Thanks, @zeitgeist87.\n. > no browser we\u2019re targeting doesn't support addEventListener.\nI thought that was the case, but I'm old school and struggle with telling browsers \"no.\"  ;)  I'll get used to it one day.\n. Do you mean some sort of non-code text at the beginning of every line of output?  My instinct says that's at least as cumbersome as identifying the output lines in an attribute, but then I haven't tried it.  :)\nThere are 2 other concerns that come to mind:\n1. It seems like a kludge (for lack of a better word) to add fake data when the role of markup is to describe data.\n2. How would we choose character(s) to identify output in any given language and know it's never part of the code/output?\nI may have misunderstood what you were suggesting, though.  Please correct me if I'm misinterpreting it.\n. > I guess it depends on the type of content. If you have more commands or more output lines...\nExactly.  If the purpose of the plugin is to highlight commands, then the output lines would be the outliers.  That's the way I see it, anyway.\n. > Do you count them, one by one, with your finger?\nThat seems easier than manually adding text before every line of output, but that could be solely because I've only done it a handful of times using the current approach and no other.  From a usability perspective, would you rather count the lines or paste special chars before each line?  To simplify that, we could instead insert beginning and ending markers around the output lines, but then we're effectively resorting to marking it up.\n\nYou provide an escape sequence to escape it in the odd chance it's actually used as code.\n\nObviously, we could make it very unlikely that the characters would match the output (e.g., ^\\[OUTPUT\\]) or go with something simple (e.g., ^_{5}).  Then we're asking users to insert those chars in front of every line and also escape the ones that do exist in their output.\n. > it spoils the fallback in case Prism fails to load/run for whatever reason\nIf that's a concern, then it might make sense to add extra data.  I'd appreciate retaining the attribute's functionality so I wouldn't have to add the data in my case, but maybe I'll change my mind once I see it in action.\n1. What would you like the prefix to be?\n2. Do you want that in a separate PR?  Seems like it should be.\n3. Should I add the same fallback functionality to the Line Highlight plugin?\n. Is > specifically the character we want to use?\nIf it's being used to mark the output lines, is there any reason to allow whitespace in front of the marker?  I would think it should come at the beginning of the line when used as a marker.\n. @zeitgeist87:  thoughts on (Out) or other suggestions?\nI'd lean toward all lowercase or all uppercase, but we might as well make it case-insensitive anyway.\n. @LeaVerou, @zeitgeist87:  Would you expect the data-output attribute and the line prefix to be allowed on the same code block or would you prefer to skip the prefix check if the attribute is provided?  I could go either way on that.\nEDIT:  Actually, I'd lean toward skipping the line prefix check if the user provides a data-output attribute.  There's no reason to potentially make someone escape their code if we know they specified the output already.  Let me know if you disagree.\n. The only issue I see with such an approach is that would mean a little more effort to prefix every line--even when there are no output lines.  Although, we could allow an empty data-output attribute for scenarios where there are no output lines and the user doesn't want to prefix every line.\n. Allowed specifying output prefix using data-filter-output attribute, so users can choose their own prefix for the output lines.\n+ @Golmote for review.. I've made the updates and squashed it all into 1 commit.. I like the concept for this functionality.  I wonder if a more descriptive name could be used for the data-filter attribute to hint at what would be filtered (e.g., data-filter-prompt).\nI have an open PR #856 from 2 years ago that automatically treats lines beginning with > as output, but we never really settled on the char to use as the indicator.  I see that I also have local changes that were never merged into that PR.  Perhaps if this PR used data-filter-prompt, we could then use data-filter-output=\">\" to do the reverse: provide a way for users to specify the leading character or character sequence for automatic output treatment.  Obviously, you would only use 1 data-filter attribute at a time.  Thoughts?. My apologies for the delay--been swamped at work during the week.  I just updated #856 with my old changes modified to use data-filter-output to specify the prefix for output lines and rebased it.\n@bradhowes, I realize this will require changes for your PR, so I was hoping to hear your thoughts before implementing the changes in mine.  I just didn't expect to have more time soon, so I changed it while I could.  I do believe the new approach will make it easier to accomplish what you're doing, though.  Search for outputFilter to see that I've split prompt lines / code into one array with blank placeholders where output lines belong and stored the actual output lines in another array.  After highlighting is done, the arrays get merged back together.. @bradhowes, I didn't mean it was a dupe.  It's the reverse, which I think is a useful feature.  My approach specifies the prefix for output lines, so you could use data-filter-output=\"out\" (or any value) and it would treat lines beginning with \"out\" as output.  I see both as useful depending upon whether you have more commands or output in a given code block.. Sorry, I had a busy work week and just now had a minute to return to this. @bradhowes, like I said, I can see the benefit of having both options, so it's up to you if you want to merge it.  I appreciate the contribution.\n@mAAdhaTTah, in the meantime, you can also look at the data-filter-output attribute, which does the reverse of this PR.. This works for me in Firefox and Chromium as-is, which makes me wonder if I missed some code for the merge.  Does it work for you in both browsers on the following blog entry?\nhttps://chriswells.io/blog/view/style-shell-commands-with-css\n. I just added the ability to specify data-prompt and created defaults for data-user/data-host.\n. Are you saying the language or alias should be defined in components/prism-shell.js?\n. This seems to capture the specific change that's needed:\ncss\nkbd[class*=\"language-\"] {\n    font: inherit;\n}\nI could add that rule only to plugins/shell/prism-shell.css for a lighter touch.  If it should go in every theme instead, it may be better to add a selector to the existing rulesets so all of the same declarations apply to kbd:\ncss\ncode[class*=\"language-\"],\nkbd[class*=\"language-\"],\npre[class*=\"language-\"] {\n    ...\n}\nThoughts?\n. I can't believe I did that.  I noticed it when I pasted the code from that file to another, but forgot to put the fix back into my git branch.  It's there now.\n. No, it didn't.  I was using the other pages as examples and thought there may be something that happens during the build process to add the referenced languages.  I've explicitly added them now.\n. In my opinion, the original code is cleaner and easier to read.  It's \"nice\" that it could be done in 1 line, but saving those 18 characters effectively adds 4 function calls and 3 string concatenations.\n. I had the same thought and considered sending a note to ask about adding a way to compartmentalize variables in the env object, but I didn't want to rock the boat too much for my own needs.  I would have done a few things differently if there was an obvious way to set variables without concern for stepping on anyone else's code.\nI suggest adding a property on the env object specifically for plugin usage such as:\njavascript\nenv.pluginVars[\"command-line\"].outputLines = [];\nWith this approach, every plugin (being uniquely named) could have its own variables in the env.pluginVars array using any names the developer chooses without regard to other plugins' variables.  Thoughts?\n. I'm in a rush and will need to come back to revisit this.\n. I chose forEach() here because it made the code easier to read for anyone coming behind me.  My initial code was actually a nested for loop with i and j variables.  I rewrote it using forEach() and it looked cleaner and easier to read.\n. > Then you would not need the variable outputRanges at all.\nIndeed.  I'll wipe out that var.\n. I can't believe I missed that.  :(  Thanks for catching it.. outputLines should only have an i for lines that are output, so I leveraged that in each loop through its properties.  I switched the loops anyway and guarded with hasOwnProperty().. ",
    "MichaelFromin": "+1 I have this same issue\n. For a workaround I have found that this works:\nStep 1: Use TinyMCE's APIs to extract the content from the editor. For example:\nvar htmlToLoad = tinyMCE.get('area3').getContent();\nStep 2: Replace any<br /> elements in the content with a simple newline:\nvar htmlToLoad = tinyMCE.get('area3').getContent();\nhtmlToLoad = htmlToLoad.replace(/<br \\/>/g,'\\n');\nYou need to do this because Prism's highlight function will remove the <br /> tags causing the spacing to not look as things do in TinyMCE.\nStep 3: Place the content into an HTML block element:\ndocument.getElementById(\"result\").innerHTML = htmlToLoad;\nStep 4: Run Prism's highlight function\nPrism.highlightAll();\nThis triggers Prism to re-evaluate the DOM for things that it should highlight - it won't do this automatically.\n. ",
    "subuta": "Maybe too late, but I found another work around.\nIt looks like Prism uses element.textContent but textContent method does not treat <br/> tag as a line feed and then everything become inline. \nhttps://github.com/PrismJS/prism/blob/6530709e85533b7a5aa5da93f894512aefde3d4f/components/prism-core.js#L195\nI added plugin hook to force Prism to use element.innerText(that treats <br/> tag as a line feed) and now it works well for me :)\nPrism.hooks.add('before-highlight', function (env) {\n  env.code = env.element.innerText;\n});. ",
    "Swaagie": "My bad, apparently there was an on/off error, only sometimes visible in another part of the application.\n. ",
    "commonsguy": "FWIW, this can be hacked into the plugin via the work shown in this Stack Overflow answer.\n. ",
    "jquense": "thanks for the PR :) I've not had a free moment to do it myself so much appreciated. Glad the original code was helpful\n. ",
    "cormacmccarthy": "I'd love to see remove-initial-line-feed remove all leading whitespace as well.\nAnd, yeah, a simple trim plugin that does both would probably be better, but, remove-initial already existed, so...\n. @LeaVerou if you know of such a plugin, please let me know! I'm about to write one for extra indent removal today if I can't find it, because that's the next thing I need. I agree it would totally be better for them all to be the same plugin. If I write one that does extra indent removal, I'll just throw the trim stuff in there as well to consolidate it all down to one.\n. Nice, thanks! OK, I'll pull that into my project to help test. I'll comment on #847 with findings.\n. I've tried this on at least 30 different HTML and JS Prism highlighted snippets and have not seen any issues. Thanks!\n. ",
    "mdolbin": "@LeaVerou what do you think about always putting div.line-highlight inside code and updating styles for each theme? I know it's a global modification that can lead to new issues but nesting looks like the best and the most convenient & correct solution if we want to position one block inside another.\nSo, just to be sure that we're on the same page, I assume that, \n- pre without code is not enough for prism to work\n- in order for line-number or line-highlighter plugins to works, there must be both pre and code elements on the page. \n- there is no point in enumerating \\ highlighting of 'inline' code - when code is used without pre\nPlease let me know if there are any objections or I can try to do my best to improve highlighting :)\n. @LeaVerou \n\nThen it would be wiped on rehighlighting and it would need to be recreated and repositioned.\n\nWhat's the use case for rehighlighting of already highlighted code? Are you worried about performance? At the end of the day, line-numbers plugin is placed inside the code the same way I propose to put line-highlighting and it seems to work fine.\n\nInline code is highlighted. (see first bullet point)\n\nI mean line-numbering and line-highlighting plugins should work if and only if both pre and code are present and there is no point in line-highlighting or line-numbering of a single line of code - when there is a code but not pre. I already saw the docs so I just wanted to make sure.\n. I see, but if you're not concerned about performance, updating a highlighted area is seems to be a desirable behavior to ensure that everything is positioned correctly after each change. \nChanging a css without recreating a whole div would be the best case scenario but I found no reasonable way to position an outside div inside code and don't break shadows or anything else. Moreover, line-number plugin is placed inside  code for the default theme right now.\nSo, can we take this approach of moving line-highlight div into code for all themes or it's not an option from your perspective?\n. ",
    "jimaek": "Its already hosted on jsDelivr with auto-updates based on Github tags if you are interested http://www.jsdelivr.com/projects/prism\n. ",
    "maruilian11": "thank you! guys\n. ",
    "eriklieben": "Created a PR on the DefinitelyTyped repo https://github.com/DefinitelyTyped/DefinitelyTyped/pull/8674\n. I must honestly say that I haven't been using JSPM/SystemJS in the last year or so and that knowledge faded away. It sounds like a good thing to do, so the dev using it is in charge of the way to do minification to the files.. ",
    "garretwilson": "IMHO, this is better semantically---it's what I use:\n``` html\nTest.java\n\n  public class Test {\nprivate final static String TAG = PrintUtils.class.getSimpleName();\npublic static byte[] NEW_LINE = {0x0A};\npublic static byte[] POWER_OFF = {0x1B, 0x3D, 0x02};\n\n}\n\n\n\n``\n. The offending code is amax-heightset for`. I don't know if it is part of Prism or part of the coy skin.\nHere is the workaround for CSS after Prism is included:\npre {\n  max-height: none !important; /*workaround for Prism scrollbars*/\n}\n. I hate this \"we can never ever change this for backwards-compatibility, even though it sucks\" argument that keeps coming up.\nDo it the right way: turn it off for print. Nobody could every want it for print, because you lose information. Leave it on temporarily for backwards-compatibility on web sites.\nAs for long-term, deprecate this behavior. Create a checkbox on the download page that you have to check to get the restricted height. Indicate that you will eventually remove it.\nI shouldn't have to add workarounds in my clean code just to get things to work the right way.\n. Yay!! Thank you. Sorry, I guess I had misunderstood you earlier, thinking you were going to always leave it in.\n. Is this available from the website now? I just want to know when to test it. Thanks.\n. P.S. I also recommend documenting somewhere how a user can change this or disable it altogether, so people don't have to go hunting around in a debugger. Just a thought. Thanks!\n. OK, the latest version from the site is printing without vertical scrollbars now. Thanks for addressing this so quickly!\nI still get horizontal scrollbars for things I have made too wide, but I'm not sure what my opinion is on that. I suppose I just need to fix the content.\n\nI would be in favor of removing it altogether. It is inconsistent with the other themes.\n\nFine with me!\n. > I would be in favor of removing it altogether. It is inconsistent with the other themes.\nThe problem with having this in by default is that there's no way to even guess what a \"default\" value might be for a majority of users. Best to leave it out altogether and make a note about what a user would need to do to restrict the height---although that should be pretty much self-explanatory, anyway.\n. > I would be in favor of removing it altogether. It is inconsistent with the other themes.\nYeah, I think that's the best option. Even after removing it from the print version, it still gives me trouble on a web page because I'm using it as a document in a screen-sharing session to give a class, and being forced to scroll two things (the larger document and then the code snippet) is a hassle. I'm going to go back to permanently removing it in my stylesheet, and I would recommend you get rid of it altogether too.\n. That's odd, because I didn't notice a difference when I took the size restriction off (see workaround above).\nFrankly the shadows aren't that great for me anyway. They look odd, as if the page is curled up. And when printing to a PDF from Chrome they look odd. And sometimes the shadow will show up half on one page and half on another. I'd be happy without the shadows in coy.\nCoy is a pretty theme. No use trying to make it do too much. I'd be happy without the shadows.\n. > I wouldn't be happy without the shadows and neither would many people who use it. \nThat's fine, I can see how many people love it. It looks pretty on the screen (although it's a bit odd that I get it on both sides). Just let me know how to turn it off for print. Thanks.\n. > We should put the shadows inside @media screen so they only show up on the screen.\nDo you plan on doing that soon? I don't want to rush you, but if it's going to take a while, do you know an easy way for me to turn them off from my own CSS? They are really starting to get in the way in my resulting PDFs. Thanks.\n. > do you know an easy way for me to turn them off from my own CSS?\nSo nobody knows how I can just turn off the shadows manually from my own CSS?\n. Oh, it's output from the Git command. That's sort of interesting.\nIt should would be helpful it something was mentioned on the main page, or if there was a link to the prism-git file, or something.\nCheers!\n. Hmmm... no, I was wrong. I don't think this is about the shadow, about coy, or even about Prism. It seems that my figure is taking up the entire width anyway --- I only notice it when I turn on Prism, as it gives my figure a background. I guess I'll just have to float the figure containing the <pre><code> as well. That seems to work.\nOK, you can close this issue as invalid; I don't think Prism or coy is at fault here.\n. Ack, no---that's hideous! We don't need more data-* attributes. Plus it defeats the whole purpose of semantic tags! The whole point of HTML5's recommendations is for people to use <code> for source code, <kbd> for keyboard input, and <samp> for sample output. That's what they say, not me.\nBut if you're going to add all these weird extra kludge things, I withdraw my suggestion. I'd rather just continue using <code> everywhere the way it is now that to dirty up my markup with this stuff.\nAre you forgetting what the Prism page itself says? \"Prism does its best to encourage good authoring practices. Therefore, it only works with <code> elements, since marking up code without a <code> element is semantically invalid.\" And that's the way it should be!\nI was only suggesting that things like language-bash and the command-line plugin should work with <kbd>---automatically, not with an ugly hack. And maybe things like language-git should apply to <samp>, since it applies to sample output from Git.\nBut I completely withdraw my suggestion. I pointed out at the beginning of this issue that \"you've done a good job and making it simple and 'just work'\". I should have left well enough alone---please don't ruin things.\n. Oh, I see you're talking about adding things to the <script> tag, not to my source code, but still---I don't want to choose between <code> and <kbd>. Each has its purpose. I was just opening this up for discussion. Please don't ruin Prism. I can live with just <code>.\n. Sorry for all the confusion, amigos. I opened this to start a discussion. I'm still not sure which way I would go---I was only expressing that it would be nice to be able to use <kbd> and <samp> with certain types of content so that we can stay with best practices. But I also don't want to bloat Prism.\nLet me do some more thinking on this and maybe I can come up wit a better approach.\n. @montogeek , what you show in Chrome is what I'm seeing with Firefox 44.0 on Windows. So it must be a bug.\n. @montogeek how exactly can I help? Are you wanting me to look into the source code? I'm afraid I don't know anything about the Prism source code. Is there some other way I could help? I could look into the source code if you want, but it would have to be another day as it is a bit late where I am now.\n. @montogeek , I haven't yet had a chance to look at your change, but I just downloaded the latest version of Prism with the Keep Markup plugin and it seems to work on Chrome and Firefox! Thanks!\n\nI removed a Regex and it solved the problem, but my guess is that the problem is caused by something else.\n\nThat statement worries me a little bit. Could you post the ID of your Git commit so that I can see what you changed? I may not understand it, but I can see how it \"smells\", as they say.\n. (I'm now seeing that you looked into this more as part of #880, so if you don't have any doubts about it, no problem. It seems to work for me.)\n. So I guess you're saying the fix is 704ba4f951418ad8c6680a47a3f0381cb7c06bbd? If so, it looks like it's doing incorrect EOL checking, as you commented elsewhere. I added a comment to the commit.\n. Oh, I see---that's a pull request. Someone had indicated a commit ID, so I thought that was the code. I haven't worked with pull requests on GitHub. So the fix was just to remove the whole thing. OK, if that works.\nSorry for static, and thanks for pointing me in the right direction.\n. I just wanted to say that I've been using <mark> for a while in Prism, and it's working like a dream! So useful. Thanks for the effort done to get this working.\n. Bingo! That seems to work. Thanks so much!\n. I'll provide you with complete HTML source code:\n``` html\n<!DOCTYPE html>\n\n\n\nPrism Floating Command Line Bug\n\n\n\n\nmkdir doc\ncd helloworld/src\njavadoc -d ../doc com.example\n\n\n\n\n```\nTo reproduce this issue you should download Prism from http://prismjs.com/download.html using the \"coy\" theme for all languages, and include the following plugins:\n- Line Highlight\n- Line Numbers\n- Keep Markup\n- Command Line\n. I'm updating a series of lessons that I intend to teach in a computer course starting on Monday, and I see that this bug still hasn't been fixed. \ud83d\ude1e . Now my course is being translated to Portuguese, and we have a class using this next week. Still no movement on this? Anything I can do to get the ball rolling? Can I contribute some money somewhere to get someone to look at this? Thanks.. Hi, @zeitgeist87. Thanks for looking into this. I've been so busy writing this course that I'm only now getting a chance to look back at the status here.\nCan you clarify whether your commit got into a release, so I can try it out, or is it only on a branch? Or do I need to download your fork and try that?. I'm still having this problem. In fact it cropped up just a few days ago. I had an example bash input in a figure that I had made be less than half the page horizontally. Once I turned on the command line plugin, even though the figure had plenty of space, it forced horizontal lines. If I remember correctly, it doesn't account for the extra command-line prompt that appears on the left. Unfortunately I don't have time to try pulling in the test fix right now. But it's not resolved, so it shouldn't be closed.. It's similar, yes, but but not identical.\n. I just had an idea, based upon @mAAdhaTTah 's comment. If someone could simply copy the language-ini plugin to make an identical language-properties plugin, that would be helpful. The greatest benefit would be that it would allow us to include language-properties in our content and let the plugin be improved later. This would be better than putting an artificial language-ini identifier in our source code that would need to be changed later.\n. You mean insert some sort of custom JavaScript every time I include prism.js? That's a little unwieldy, especially since I have so much content that already includes prism.js I'd have to add an extra <script> tag, right? And then go through and remove them all once Prism got the properties language type?\n. Oooh! So can I fork Prism and make a pull request with prism.js updated with Prism.languages.properties = Prism.languages.ini at the end ... for the time being? Or is there a better approach?\n. Oh, sure, that would be awesome! There's no emergency on my part---I was just wanting to register the issue so it could be addressed.\nLet me know when it is merged so that I can update my documents with the correct Prism language ID.\nThanks!!\n. It seems to work great, @Golmote ! Thank you so much for your work on this.\nIn the next month or two I plan on trying to build my own Prism language plugin for another format, so maybe I'll send you a private note later for you to give me some pointers.\nAll the best.\n. It's odd that you couldn't reproduce it. I gave exactly the files needed to reproduce it. In fact I couldn't even find the original files, so I created them by copying from my own issue. Here's a screen shot. You'll see the second code block is not formatted, even though it's the same as the first. It's the presence of that single line.\n\nPrism gets confused by an &amp; followed by eacute;. You'll notice that this is an &eacute;, but encoded. Because the ampersand is encoded, it shouldn't be recognized as an HTML entity reference. I wouldn't doubt someone is just recursively decoding entities---which would be completely incorrect (and would produce a bug like this). The whole point of encoding the &amp; is so that it won't be recognized as a delimiter.\nBut maybe I'm guessing wrong about the source of the problem. Whatever the case... there is a problem!. No, it's Prism. In Chrome Prism is giving me the exception:\n\nUncaught DOMException: Failed to set the 'innerHTML' property on 'Element': The provided markup is invalid XML, and therefore cannot be inserted into an XML document.\n    at Object.highlightElement (file:///.../prism.js:2:2874)\n    at XMLDocument.highlightAll (file:///.../prism.js:2:1846)\n\nI'm running the minified version. I don't have time right now to download the full one, although I'll try to get to it some day.\nI'm running Prism with the \"coy\" theme, all languages, and the following plugins:\n Line Numbers\n Keep Markup\n* Command Line\n. I note that you're not including all the plugins I mentioned.\nBut an even bigger issue I see is that you're parsing the file as HTML, even though the test file you're using is clearing trying to be XML. (It has an XML header, and it uses namespaces.) Yet the file is not well-formed XML, because you have an attribute data-noprefix with no value!\nDo the following and I can almost guarantee you'll the the problem.\n\nCopy exactly the non-working example I gave:\n\nhtml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html>\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>prism.js entity reference bug</title>\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"../../css/lesson.css\" />\n  </head>\n  <body>\n    <pre class=\"line-numbers\"><code class=\"language-java\">&lt;foo&gt;bar&lt;/foo&gt;</code></pre>\n    <p>This <code class=\"language-xml\">&amp;eacute;</code> confuses prism.js.</p>\n    <pre class=\"line-numbers\"><code class=\"language-java\">&lt;foo&gt;bar&lt;/foo&gt;</code></pre>\n    <script src=\"../../js/prism.js\"></script>\n  </body>\n</html>\n\nReplace the stylesheet links with the appropriate links to Prism with the \"coy\" theme and the plugins I mention above. (Obviously update the JavaScript link as well.)\nSave the file with an .xhtml extention and load it in Chrome.\n. I'm unclear if you are suggesting that I use these selectors, or that the author of the language-ini plugin use these selectors. Either way there is a problem. The INI section headers are getting my style for my general important class, which I do not want to happen.\n\nI don't think that the language-ini plugin should be adding such a general word such as important to the markup. It would be so easy to clash with somebody else's semantics for \"important\". Besides, the semantics for the word \"important\" don't even match here --- how is an INI section header more \"important\" than anything else in an INI file?\nWouldn't it be more appropriate to use a word such as \"ini-section\"? Isn't that more semantically correct? It has much less chance of getting the styles applied from some user's \"important\" class.\n. Thank you for looking into this, @aviaryan .\n. Oh, no---people, this is biting me once again. I'm posting here because @LeaVerou said in #1090 to post this here (even thought it's not entirely obvious to me it's the appropriate place).\nHere's the issue, plain and simple: Prism uses all sorts of style classes with short, common names that have common semantics, and hijacks them for its own use, without bothering to perform any namespacing. This raises the possibility of clashes. For example if I create a style with the selector .cool with the color blue, then anything I mark with class=\"cool\" will be blue. And if I want something in a <code> block to be blue, I add a cool class in the same way. But if Prism decides it wants to hijack the style cool (I'm only using cool as an example), I'll suddenly see blue stuff all through my <code> blocks --- stuff I did not mark as \"cool\".\nThis is not simple to work around. I can't say in my own stylesheet not(code).cool because sometimes I do want to mark things in <code> as \"cool\"!\nThis all started for me in #1044. I have an important selector that adds an exclamation mark icon. Suddenly exclamation marks started showing up all through my language-ini Prism code. It seems that language decided some things were \"important\". (Semantically it doesn't even make sense.) @aviaryan graciously removed the important class from language-ini.\nBut then in #1090 it showed up again. Suddenly all my language-markdown code started showing exclamation mark icons. Sure enough, language-markdown decided it wanted to mark things with the very general word important. This time no one would rename the important class, and @Golmote closed the issue, saying that I should use the custom class plugin.\nThe problem with the custom class plugin (besides the fact that I get an error trying to download it; see #1136) is that I will need to go back and modify all of my documents, adding a new code segment with custom JavaScript to all my pages! (Either that or modify the source code of Prism.) Unfortunately the plugin doesn't seem to allow a default prefix, such as prism-- as listed in the examples, without my adding extra code to all my pages.\nAnd now, as I mentioned at the beginning, this whole issue is majorly biting me again. I decided to add an annotation class to my documents to make a little note icon appear. That seemed to go fine until I looked at a page using Prism language-java that had Java annotations. Oh, no---little note icons all over the place. In this case (unlike with important) the name is appropriate --- but it's a different sense of the word than I meant with my annotation class. In other words, it's a different \"annotation\" thing.\nBut I'm puzzled why any of this should even be an issue. Why doesn't Prism simply use a special prefix (such as prism- or prism-- for all its class names? If the custom class plugin can do it (I mean, if that plugin weren't broken, i.e. when #1136 is fixed), why can't Prism simply use a prefix out of the box? That would drastically lower the possibility of conflicts to virtually zero. (I mean, who would be using prism- prefixes except Prism?) What is difficult about this?\nPlease help me understand; maybe there's something I'm missing, but I just don't see how it is difficult to keep Prism from hijacking common words like important and annotation.\nIn the meantime, does anybody know a workaround? How can I continue to use e.g. important with the language-markdown plugin (or annotation with the language-java plugin) and only show my special styles when I use those classes, and not when Prism uses them? Are there any special selectors I can use when defining my styles? No, I don't want to rename my classes just to try to step around Prism. Why should Prism drive my stylesheet design? And besides, if I managed to tip-toe around Prism now, how do I know that I don't inadvertently have a conflict, or that Prism won't hijack a new style with a common word in the future?. > But I'm puzzled why any of this should even be an issue. Why doesn't Prism simply use a special prefix (such as prism- or prism-- for all its class names?\nSo I took the minified prism.js file (since the custom class plugin is still broken; see #1137) and did a search-and-replace in my text editor, replacing annotation with prism_annotation. (Some of the occurrences use object property notation, which is probably why prism- didn't seem to work.) This immediately fixed the problem with the annotation clash with my own style name.\n(I was afraid to do a search and replace for important, as there is a CSS keyword with the same name and I was afraid of changing those occurrences as well. But that is a limitation of my search-and-replace tool, not of the concept.)\nSo could somebody explain to me what I'm missing, and why it is not an issue of simply renaming styles with a prefix and saving us users from grief when our styles get used in places we didn't intend them?. Can no one give me any response on this? Is this a valid suggestion or not?\nSomething needs to be done, because this is seriously screwing up my documents. I need to know a way forward. If my proposal is acceptable, I can can look into dedicating resources to making the changes, or put up money for someone else to do it. If my proposal is not acceptable, please tell me what's wrong with it. Thank you.. Why not the approach that Bootstrap took? Instead of having a prefix, just add an extra prism class, and select using e.g. .prism.annotation? I note that apparently you go halfway in this direction in prism.css, with things like .token.number; you could easily make this .prism.token.number, and the problem is solved.\nWhy is this so hard? Why does no one seem to care enough to respond?\nAm I the only person this is affecting? Perhaps maybe that's because I'm one of the users who is using it extensively. Currently I'm using Prism in the class materials for an entire software development course my company is using in several countries in multiple languages. I'm using Prism on several Bootstrap web sites, and I just used Prism in a reveal.js presentation unveiling a new file format at a user's group meeting in Seattle a couple of weeks ago. I'm a big fan of Prism. I advocate it. I use it extensively, which is why I run into these problems. I'm desperate to find ways to work around these problems, and I'm offering suggestions. I'm even ready to offer financial assistance to get these things fixed. Why is no one interested in even discussing these problems with such an enthusiastic and committed user?. > Prism is already doing that with .token.tokenname, but that doesn't prevent existing rules for .tokenname from leaking into the syntax highlighting.\nThis is very, very good to know! I'm going to try to write my own selectors that say, \"not in a <pre><code> block with a token class\". Maybe this will solve my problem!! Like I said, I was grasping for anything!\n\nProbably because we're all doing this on our free time, which is very limited, and there are a lot more issues to attend to than this.\n\nLike the broken custom class plugin, for instance, #1137. But I'm trying to do my part --- I've just donated to pay someone to have time to fix this:\nhttps://www.bountysource.com/issues/45180945-custom-class-plugin-broken\nI hope that's helpful.\n. > Prism is already doing that with .token.tokenname \u2026\nOK, that's very helpful! I was able to work around the problem (for the meantime) using :not(.token), for example:\ncss\n.annotation:not(.token):before {\n  font-family: FontAwesome;\n  content: \"\\F24A\\00A0\";\n}\nUnfortunately :not(code .token) didn't seem to work, so I can't be so specific as to talk about Prism code blocks. (Even though it's likely to happen for annotation, some of my other styles might theoretically use a token class as well.)\n\nWhat you don't realize is that for many people, human readable class names is an advantage and one of the reasons they use Prism.\n\nActually, no I didn't realize that. I thought people just put a language-* class in a code block and let Prism take over. I didn't know people cared what classes Prism used internally.\nI wish Prism would go all the way and just add a prism class, too, which would fix probably 100% of the problems. In my own stylesheet, for example, I wanted to show an \"abstract class\", but then I realized that even this could be ambiguous, so I added \"uml\" as a class, making e.g. code.uml.class.abstract in case I wanted to show abstract classes in another style (that didn't follow UML for instance). So seeing <span class=\"prism token annotation\"> to me seems reasonable; I look forward to hearing what other people think.\nIn the meantime I think the :not(.token) trick will get me by. Thanks again for pointing out the token class.. > I'd argue that titles are indeed important. That seems quite semantic to me.\nBy that argument, everything is important. What, is the text less important than the titles?\nIn fact if you study law you'll learn that the titles of statutes and contracts are usually less important than the text, as they are given for simple organization purposes and do not provide any additional normative weight to the text. Learn more about this reading about the \"Headings clause\".\nThe purpose of the Prism markup is to show syntax highlighting for the various formats. So maybe I should better state my case by saying that if the style is going to be so general, it should be a noun, not an adjective.\nLet's not make this complicated: Prism found a Markdown heading. So it should give it a style of \"heading\". Whether the heading/title is \"important\" or not is not for Prism to decide; that's an opinionated judgment call. Just mark it as a Markdown heading, which is what it is, and we'll all be happy. If I have CSS code using \"heading\" or \"title\", then I'll modify it so that it doesn't apply to Prism. But my beef is that Prism has no business trying to tell me what is \"important\" or not.\nJust my opinion---but I think my reasoning here not too far off.. @LeaVerou I wasn't aware of the wider problem. I was just making you aware of the immediate problem, which had been addressed in #1044 for another language. If there is a wider problem, sure I'll look into it and see if I have any ideas. But in for the immediate issue, are you saying that you addressed it for language-ini but you don't intend to address in the same way for language-markdown? I'm just trying to clarify what you're saying.. For you to understand better why this is such a problem, and why I cannot just set up my stylesheet selectors to ignore things inside <code> blocks, consider this excerpt from the lesson on \"inheritance\" in my Java programming class (I'm writing the materials):\nhtml\n<pre><code class=\"language-java\">final Vehicle vehicle = new Airplane();\n  vehicle.move(); //<span class=\"important\">invoked Airplane.move()</span></code></pre>\nNote that I have my own style for important that I want to show up inside the code block! For java-language this is working beautifully. But for language-markdown, as you saw above, Prism decides it wants to make other things important (even though they have nothing to do with the semantics of \"important\"), so my styles start appearing in unrelated places.\nYou're right that it is only coincidental that there is a semantic mismatch here; it is possible in other cases that Prism might use a style with the correct semantics related to a code block, yet it would incorrectly bring in a style I had of the same name. So I acknowledge that there is a bigger issue here: namely, of style name clashes. But name clashes is by no means a new issue in computing. Why not simply prefix all Prism styles with some sort of \"namespace\" prefix, e.g. \"prism-\"?\nBut suggestions for resolving name clashing I'll post on #1055. For this present issue, I reiterate that \"important\" is not semantically correct in the first place, and if we change it as was done in #1044 this will buy us time for addressing #1055. Do you see where I'm coming from, and what do you think?. > The recent issue #1119 made me think that you might want to use this plugin to solve your problem.\n@Golmote I was overjoyed to see that plugin, but then I saw that I will need to go back and modify all of my documents, adding a new code segment with custom JavaScript to all my pages!\nIs there no way someone could provide a version of this plugin with a default prefix, so that Prism simply automatically uses a prism- prefix, for example?\nIt is a lot of overhead to not only force my authors to add extra JavaScript to all pages --- not only for future documents, but for all past document! (If there were an option to include this in Prism, we could easily update it across the board by simply updating the shared CSS/JS file.). > The recent issue #1119 made me think that you might want to use this plugin to solve your problem.\nI can't try it yet, because the download mechanism seems to be broken; see #1136 .. Thank you.. I haven't tried it yet --- I assumed a big error message meant that there was an error. I didn't want to waste my time when the site clearly told me that something was wrong.. Er, @LeaVerou, I'm not talking about the console. I'm talking about HTML message right there on the page.\nDid you try to reproduce this?. \n. > Feel free to reopen if there is!\nI don't seem to have permissions on this project to reopen this issue. But don't you agree that the message above sure looks like there was a real error, and that something went wrong?. > Technically, the site told you nothing.\nTechnically... I need to drink some tequila. It's been a long, frustrating day. But I'm going to bed and save the tequila for tomorrow. Good night.. Thanks @zeitgeist87 and @LeaVerou; it seems I was able download the custom class plugin.\nBut the plugin seems completely broken; see #1137.\nPlease, could someone go to https://github.com/PrismJS/prism/issues/1055#issuecomment-301209192 and tell me why I have to go through this whole rigmarole in the first place? Why can't Prism simply prefix all its classes with something (anything!) by default, to avoid intercepting my own classes?. > Custom class names don't also rewrite the CSS files, you would need to do that manually based on your prefix.\nWhat do you mean exactly. What do I modify in the CSS files? I assume you mean I have to rename some classes to use prefixes. But how do I know all the style classes Prism uses? How do I know what to rename? Do I rename everything? Or just the .token.\u2026 selectors? What about .namespace? What about \u2026 all those other things (e.g. .command-line-prompt)?. > About the second issue (TypeError), can you provide an online testcase that reproduces it?\nIt would seem to me that anything reproduces it. Have you tried to reproduce this?\nHere is a simple test case using the \"coy\" theme, all languages, and the following plugins:\n\nLine Numbers\nCustom Class\nKeep Markup\nCommand Line\n\nI then modified the prism.js file and added the following to the end:\njavascript\nPrism.plugins.customClass.prefix('prism-');\nHere is the test case:\n```html\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html>\n\n\n\nPrism Bug #1137 Demo with JAX-RS\n\n\n\n\n@ApplicationPath(\"/foo/\")\npublic class FooApplication extends Application {\n@Override\n  public Set<Class<?>> getClasses() {\n    return ImmutableSet.of(BarResourceService.class);  //implementation of BarResource\n  }\n}\n\n\n\n```\nYes, I even replaced all .token. occurrences with .token.prism- in prism.css, but it doesn't matter --- this problem occurs even without including the CSS file. Here is what Chrome shows in the console:\nprism.js:126 Uncaught TypeError: Cannot read property 'token' of undefined\n    at file:///\u2026/js/prism.js:126:340\n    at Array.map (native)\n    at file:///\u2026/js/prism.js:126:286\n    at Object.run (file:///\u2026/js/prism.js:2:4595)\n    at Function.a.stringify (file:///\u2026/js/prism.js:2:5163)\n    at file:///\u2026/js/prism.js:2:4843\n    at Array.map (native)\n    at Function.a.stringify (file:///\u2026/js/prism.js:2:4818)\n    at Object.highlight (file:///\u2026/js/prism.js:2:3168)\n    at Object.highlightElement (file:///\u2026/js/prism.js:2:2930). I've posted a bounty for someone to fix this:\nhttps://www.bountysource.com/issues/45180945-custom-class-plugin-broken. @jimmyhmiller, sorry for the delay --- a few days of vacation with no good Internet connection, work, traveling, etc.\nBut I think your fix works!! I created my exact test case above and downloaded the latest published Prism code. I followed my own directions, and the error no longer occurs! Moreover I'm seeing that Prism is generating the prefix I asked for. As a test I renamed some of the selectors in the Prism CSS, and they styled the new classes.\nThis whole thing is less important to me now that I found out (see https://github.com/PrismJS/prism/issues/1055#issuecomment-304695496) that I can unselect token in my selectors, but I may still use this custom class feature in the future. In any case, I'm happy I could contribute to getting it fixed.\nThanks, @jimmyhmiller ! I'll go figure out how to assign the bounty now.. So what is the alternative? I have sites and lessons and presentations all using Prism, waiting for Prism format support for SURF. Is it possible to create a Prism plugin for the SURF format separate from the main Prism distribution? Fine. I'll pay for that.\nIt's a chicken-and-egg problem. No one will adopt a new format if there are no tools support. But you're saying that we don't want tools support until lots of people have adopted the format, so we're in a circle.\nI'll have to admit that I'm a tiny bit skeptical at your reasoning. Prism already has support for formats I've never heard of, including inform7, j, mel, mizar, and parigp. Remember that users get to choose which of these formats they download, so I'm not sure I understand the problem.\nAs I said I need this support now, and I'm willing to pay for it. It doesn't have to be part of the main Prism distribution yet, but I need it done. It can be part of a completely different repository if you want, but I thought I'd post it here because here are where the Prism experts are hanging out. And if you do want it as part of Prism, you benefit for free. Is anyone interested?. I've just placed a USD $200 bounty on this ticket.\nhttps://www.bountysource.com/issues/53722666-support-for-surf-format-language-surf\nHopefully someone here knows how to write grammar definitions and is interested in doing the work. Let me know if some other amount is more reasonable. Thanks in advance.. Woohoo! Thank you, @Golmote . I'm anxious to try it out. So I can just include this as JavaScript in my pages? Does it need to be before or after the main Prism include, or does it matter?\nThis will be a huge help! I'm sure we can tweak this. The biggest step is just getting started, which would have taken a lot of time and research for how to create Prism templates. This gives us a great head start, and I really appreciate it.\nLastly, is there a page with official documentation and explanation of Prism plugin programming if we have questions and when we tweak/extend this?. ",
    "DevExchanges": "Thank you, garretwilson and zeitgeist87! both ways are very useful.\nAuthor can close this issue now! :dancer: \n. ",
    "jwp": "The highlight and numbering plugins seem a bit fragile. (Misdocumented or misreadable.)\nI \"fixed\" the problem by setting the documented attributes on both the <pre/> and <code/> elements. (My context may be different than yours. I was creating the elements with DOM interfaces)\n. ",
    "hongthaiis": "Thank you, Zeitgeist87!\nChanging to default theme, my code blocks height is not limited!\nI hope you fix Coy theme soon!\nThe issue can be closed!\n. ",
    "losocreativ": "Oups ! sorry :S thanke you ! ;)\n. ",
    "montogeek": "This plugin does it: http://prismjs.com/plugins/keep-markup/\nAlthough it does not look good in Chrome: \n\n. Is Chrome Version 49.0.2623.39 beta (64-bit) on OSX Yosemite, just for the record\n. Yes, is a bug, the plugin is not marking the correct word, the example source code is correct: https://github.com/PrismJS/prism/blob/gh-pages/plugins/keep-markup/index.html#L59\n. @garretwilson  I found the bug, its solution but I am not completely sure if it is the correct solution, Can you give me a hand?\n. Try debugging the plugin source code: https://github.com/PrismJS/prism/blob/gh-pages/plugins/keep-markup/prism-keep-markup.js\nI removed a Regex and it solved the problem, but my guess is that the problem is caused by something else.\nIs late here too, tomorrow!\n. Hey! thanks for answer :)\n\nPerhaps commenting out that line has the same effect?\n\nYes, by removing the replace line or removing the firstWhiteSpaces stuff like @zeitgeist87 said, it completely works.\n. Hi @LeaVerou I just updated this PR with the latest changes.\n. Thanks to you!\n. Hi @LeaVerou \nI noticed that the minified version of the plugin was not updated, ~~it should be updated manually~~?\nI just noticed the Gulpfile task :)\n. So, I should send another PR with the minified version updated to the gh-pages branch?\nOr it is automatically updated when the master branch is synced and a new version is released?\nI am just trying to understand how is the branch workflow :)\n. ",
    "eximius313": "good to know - thanks ;)\n. ",
    "ignaciogros": "Yes. I think it's a Readium's problem. Thanks!\n. ",
    "hlaporthein": "Thanks All guys. Have a great day :)\n. ",
    "andrewmur": "Hi, guys restriction of the plugin to markup language only is not enough for me as well.\nSo i just use plugin script with edited language check statement in the following way and it works for me:\nPrism.hooks.add('before-sanity-check', function (env) {\n        if (!env.language == \"markup\" && !env.element.className.includes(\"unescaped\")) {\n            return;\n        }\n                ....\nSo the code embedded code block in html looks like \n```\n<!--\n import { Component } from '@angular/core';\n@Component({\n  selector: 'app-banana',\n  template: `<h1 class=\"banana-title\">Hello Banana!</h1>`\n  styles: ['.banana-title {color: yellow}']\n}) \nexport class BananaComponent { }\n\n-->\n```\nOr just \n<pre><code class=\"language-markup\"><!--\n<h1 class=\"banana-title\">Hello Banana!</h1>\n--></pre></code>\n. ",
    "Haprog": "This is also useful for any language in systems that might remove line breaks and whitespace, but which do preserve comments or scripts as is.\n. ",
    "neu1886": "Know...there are a lot of differences. I can sent you a list with all keywords, functions etc.\n. To be continued\nCommands\nBad\nElse\nElseIf\nIf\nEndIf\nPragma\nTag\nAddHandler\nApp\nArray\nAs\nAssigns\nByRef\nByVal\nBreak\nCall\nCase\nCatch\nConst\nContinue\nEnd\nCurrentMethodName\nDeclare\nDim\nDo\nDo...Loop\nDownTo\nEach\nElse\nElseIf\nEnd\nEnum\nExit\nExtends\nFalse\nFinally\nFor\nFor...Next\nFor Each...Next\nGlobal\nIf\nIf...Then...Else\nIn\nLib\nLine Continuation\nLoop\nMe\nNext\nNil\nOptional\nParamArray\nRaise\nRaiseEvent\nReDim\nRem\nRemoveHandler\nReturn\nSelect\nSelect...Case\nSelf\nSoft\nStatic\nStep\nSuper\nThen\nTo\nTrue\nTry\nTry..Catch\nUbound\nUntil\nUsing\nWend\nWhile\nWhile...Wend\nData Types\nAuto\nVariant\nBoolean\nColors: &cRRGGBBAA\nCurrency\nDouble\nInteger\nInt8\nShort\nInt16\nInt32\nInt64\nUInteger\nUInt8\nUInt16\nUInt32\nUInt64\nByte\nSingle\nText\nString\nDictionary\nDictionaryEntry\nPair\nCollection\nDate\nDateInterval\nMemoryBlock\nMuteableMemoryBlock\nPoint\nRect\nSize\nBinaryStream\nFolderItem\nTextInputStream\nTextOutputStream\nLiterals\n\"\" (String/Text)\n&b (Binary Literal)\n&h (Hexdecimal Literal)\n&o (Octal Literal)\n&u (Unicode Literal)\nOperators\n+\nAddressOf\nAnd\nCType\n/\n^\n\n=\nIs\nIsA\n<\n<=\nMod\n*\nNew\nNot\n<>\nOr\n-\nXor\nWeakAddressOf\n\nMethods\nAbs\nACos\nASin\nATan\nATan2\nCeil\nCos\nExp\nFloor\nLog\nMax\nMin\nRandomInt\nRound\nSign\nSin\nSqrt\nTan\n. ",
    "lukasoppermann": "All themes can be found here: https://github.com/PrismJS/prism/tree/gh-pages/themes you can also easily overwrite anything. Just create a new css file based on one of the themes and load this instead of the default prism.css\n. Hmm, interesting. But it seems a little overkill for this small thing. Wouldn't it make more sense to change the show language plugin to pickup all data-label-xyz attributes and put them into a a div within the <pre>? \nYour toolbar plugin could than require this plugin and add buttons to this div.\n. Hmm, sounds like a good idea, but didn't you say it has a Clipboard.js dependency? If it is a basis for many plugins and such, it should be as slim as possible.\n. Ahh, then it was a misunderstanding. So how would I go ahead adding this functionality?\n. Hey @mAAdhaTTah thank, this worked fine like so:\njavascript\nPrism.plugins.toolbar.registerButton(function(env) {\n    var button = document.createElement('span');\n    button.innerHTML = env.element.parentNode.getAttribute('data-label-file');\n    return button;\n});\nBut would it not make sense to merge your toolbar with the language plugin and extend the language plugin to pick up everything with a data-label-x attribute?\n. Hey @LeaVerou ,\nI guess you mean:\npre[data-file]:before {\ncontent: attr(data-file);\n  position: absolute;\n  top: 0;\n  right: 0;\n}\nWhich is very true, thank you for the tip. The only \"issue\" I have with it, is that it makes it hard to add more content. If I wanted to add an icon to this I am more limited, etc. because I am already using one of the two pseudo elements.\n. Yes, that was the idea:\ndata-label-file would be turned into something like:\nhtml\n<span data-label-file=\"file.php\">file.php</span>\nSo this way you could via css add a pseudo-element for the icon (but you have more options, for multiple attributes as well, since every attribute adds a span element e.g. to the toolbar).\nAnyway, I think it could be pretty neat, maybe just by extending/generalising the language plugin to a label-plugin or something.\nHowever, with your css idea and the toolbar plugin, I do have enough options available for my current use-case.\n. Hey @LeaVerou I am totally with you on this, maybe we should open a new ticket to discuss how the language plugin could be extended / replaced with a more generic plugin that serves the old purpose, but also the new?\n. This is exactly what I am doing at the moment. I just feel it would be nicer to actually have that within the plugin. But I guess you do not like it because it needs config?\n. Hmm, I definitely agree with the reasoning for opt-out. :+1: Of course, BC breaks are a concern. A possibility would be a version bump. Also of course, it is not going to really break anything, as it is just adding line numbers, but I see your problem. We could make it opt-out, but have the possibility of a no-line-numbers class on a shared ancestor, which would make it easy to fix any breakage. But this would mean we would than have to check for the individual line-numbers again, to add it there. \nI think the beast would be to think in the direction of opt-out and how this can be done with none to minimum BC problems.\n. Hey @LeaVerou I have been thinking about this a bit:\n- maybe it would actually be a good idea to extract plugins to their own git repos, this way they could be individually sem-versioned (one could easily communicate BC breakage by sem-version)\n  - you website could still build a download with everything included\n  - it would make working with prism via bower a little easier\n  - a changelog much like here http://keepachangelog.com/ can communicate any changes and like to an upgrade FAQ to help people fix BC breakage. (I no there already is a changelog which is fine, but maybe a little more details could be added to the realses :-D ) \n- somehow adding a class to an ancestor e.g. the <article> feels like configuration to me\n  - if there is configuration, wouldn't it be better to make it real and add it in js?\nThe Prism object could have a small config method, which only has a getter and setter (no other logic). This way any plugin (also thrid-party plugins) could have the user add configs and retrieve it in the plugin to deal with it. Of course, there should be sensible defaults, so that the \"load a go\" way of using Prism, that you have going now, still works.\njavascript\nPrism.config({\n  'auto-line-numbers': true \n});\nI really like the idea of just adding a js and css file and everything starts automatically, thus I would say it should still work. But if feel Prism is at a point, where this approach needs to be extended because whenever you actually want to do some more \"advanced\" stuff, its getting a little hard.\n. Hey @LeaVerou, sadly I have no idea how you build the editor and also not how one would change it to use repos, but it could possibly be done with something like gulp on the server.\nThe plugins should be underneath https://github.com/PrismJS and somewhere there would be a repo where you send an issue to add a new plugin. If it is agreed the plugin should be added, you (or somebody) could create a new repo there.\nThemes could potentially also get their own repos, but maybe that is overkill.\nMaybe it would make sense to add a \"Prism-project\" repo, which is the code for the website. There users could add an issue for a new plugin.\n\nNot everybody using Prism can code JS, but all our users can work with HTML. Note that around 50% or more of HTML authors are not super comfortable with JS.\n\nI totally agree with this and I think this is one of the advantages of Prism. But this could be easily solved by adding (and requiring every plugin to have) sensible defaults. This should make it possible to use prism just like now without any config, put still allow for configuration.\nI think my suggestions would be very small as it is just a getter / setter idea and could be easily get to the core (and also used in the core but of course with sensible defaults.)\n. This is true, although I think it is still better than having only half of the nav for the entire time. \ud83d\ude09 . No worries, I know that everybody is busy, especially around new years. \ud83c\udf86 \nAnyway, I think your idea has a problem as well. What do you think of this solution?\n\n\n. Will change it. I prefer px values, just stuck with percentage as it was used before.. Okay, changed it.\n\nneed to adjust the green checkmarks as they would have been otherwise covered by the very small screen size.\nmoved it flush to the left and removed some padding to make it work on the smallest screen size as well.. Should all be fixed by now.. Done. \ud83d\udc4d . Updated the faq.html.. Sure, happy to see it fixed. \ud83d\ude09 . Sure, whatever style of color suits you. \ud83d\ude09 . Ahh, that explains why it did overlap the \"\u00a7\" at some size.. \n",
    "acerberus": "@zeitgeist87 looks good. thanks for the quick fix.\n. ",
    "strgg": "you could parse it through prism's javascript and then just use the created code (with span's etc) to inlcude it with html and css only. so there is no need for javascript in your ebook . ",
    "desertjim": "Hi @zeitgeist87\nI was just using gulp.  I thought it was minifying the js files.  Here is what I did:\n- 1. reset the mini files (except prism-java.min.js)\n- 2. added .token.annotation to all the themes\n- 3. update the regex to just use @ instead of @{1}\n- 4. tested it with all the themes, looks good\n. I just installed gulp-uglify so I must be using a newer version.\nI do like the color choice, but my aim was to not end up having code directly adjacent to the annotations being the same color.  So I just picked an existing color to make sure it was still in the same theme and went with it.  To avoid bikeshedding I'll leave the color to whatever you suggest :).\nI can update the regex to match groovy, should I use the lookBehind: true also(sorry not familiar with this)?\n. How about this?  Still in the theme, darker and not the same color as surrounding text:\n\n. @zeitgeist87 should be good now\n. ok, it's ready\n. ",
    "just-boris": "Is this going to be released?\n. I am installing this from NPM and it seems that it doesn't have this feature. Could you please make a release for it?\n. ",
    "elgs": "Thanks @LeaVerou it works.\n. I see. It's not evaluating markdown, instead it highlights it. Thanks.\n. ",
    "JRCrawford": "Ah, I thought that this was part of the core library. This was indeed the issue.\n. ",
    "bricebou": "Hi, any news about this ? It would be really nice to simply have to download this plugin and let it numbering line by default :-)\nThanks !. ",
    "rmawatson": "\nHi, any news about this ? It would be really nice to simply have to download this plugin and let it numbering line by default :-)\nThanks !\n\n+1. ",
    "lieszkol": "+1. ",
    "wesalvaro": "Sounds great. I look forward to hearing your suggestions.\n. Thanks for the review! I admit that I struggled a bit getting to the point where things were recognized in a coherent way. Our project also includes a plugin to link classes and things in the stack traces to the actual code files, so that's part of the rationale for detecting things the way I did. However, I'm sure it's a little overboard.\nI will try out your suggestions and see how they go with the test cases that I amassed from our stack trace investigations.\nAs for the JAVA_IDENTIFIERS, we were seeing some weird identifiers in the stack traces and so I felt that completeness there was a fine approach. I would say it's definitely (hopefully) unnecessary, though.\nGlad to know that you like the idea. I'll work on it some more this week and update you on the result.\nThanks again,\n-Wes\n. ",
    "tomatau": "Already doing the customisation line. But felt this was worth adding just because decorators are already being adopted all over the place. The @ operator has not been in question, only the finer details of the implementation.\n. Both true! But JSX doesn't work in a browser either so I don't think that makes a difference :) And you can make decorators work in a browser if you use babel's browser transform.\nWould you rather duplicate the whole operator regex for JavaScript just to add that operator when it goes into the language? I was considering whether to do that in this PR but felt like it wasn't worth duplicating the regex value just to avoid adding support for the @ operator in other c-like languages.\n. Happy to move them into this PR, or would you prefer separate requests?\n. ",
    "chucknelson": "Hi @zeitgeist87,\nPROC is actually a \"special\" boundary/step in SAS, similar to the DATA step. For more info, SAS documentation is a good reference for how they refer to some of these concepts (the PROC step in this case).\nFunctions are also a concept in SAS, but more of what you expect, passing parameters within parentheses (e.g., x = SUM(a, b);).\nThis was just a little \"warm up\" contribution, but the eventual goal I want to hit is to get SAS support much more complete in Prism, eventually trying to mimic what users are familiar with in the Base SAS editor when it comes to syntax highlighting, as seen below:\n\nAny thoughts on how we can work towards that goal? Thanks!\n. The single space was intentional due to how PROC is always followed by a single space and then a single word name, but I definitely agree with your change to a word match versus the way-too-open \\S+ I had in there.\nI'm going to push a new commit with the regex change for PROC. I think for this small pull request we should keep things in keywords for now, and I'll play around in my own fork on how I can get the SAS language implementation more complete in general (which may involve custom token names, not sure yet).\nI also have an issue open on how to do language-specific styling for included languages like SAS (#923), in an effort to get to that Base SAS editor styling I mentioned. If you have any input on that I'd really appreciate it! Thanks!\n. Great, thanks so much! I'll do what I can to help build out some of the SAS support :)\n. ",
    "darol100": ":+1:  For this PR.\n. ",
    "wayward710": "Added support for Bro language.  Please let me know if you need any additions or changes.\n. Please ignore the change I made to examples.js -- I did that for local testing purposes.\n. Thanks for your feedback!  I'm also traveling this weekend, so it may be a few days before I can work on the changes.\n. OK, I think I fixed the issues that you pointed out.  Please let me know if anything else needs to be changed.\n. OK, I fixed the whitespaces, reordered the tokens, fixed the italics, and used Gulp for magnification instead of the other tool.\n. OK, and use the gh-pages branch for the test suites?\n. No problem!  Sorry it took a while for me to write the tests -- really busy last month.\n. ",
    "fuzzyroddis": "Sadly not directly :( But it is possible to put Cloudflare in front of it using it's \"Universal SSL\"\nhttps://support.cloudflare.com/hc/en-us/articles/203663694-How-do-I-enable-free-Universal-SSL-with-Github-\n. @LeaVerou totally understand about costs. https://www.cloudflare.com/plans/ has a free plan, which is probably just burning through their vc money at this point :P\n. ",
    "benembery": "Yeah, a bit gung-ho of me there, sorry about that. \nI feel bad enough shoe-horning attributes into functions, couple that with the full functionality of generics and it feels like they should all be separate.\nhttps://regex101.com/r/iB3xW2/6\nI've stripped the functionality of Generics and just gone for attributes and methods. \nInstead of the look behind I've highlighted the entire wrapped attribute as limiting to the start of the line means attributes for properties weren't getting highlighted.\npublic class Test \n{\n    [Magic]\n    public int Case { get; set; }\n}\n. ",
    "vapits": "+1\nMy case is this:\nhttp://stackoverflow.com/questions/36497869/is-it-possible-to-add-a-div-wrapper-in-prismjs-result\n. ",
    "alindsay55661": "Yes, user error. It worked after importing the bash plugin.\nOn Apr 18, 2016 9:59 PM, \"Lea Verou\" notifications@github.com wrote:\n\nWhy did you close this? Was it a bug on your end?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismJS/prism/issues/932#issuecomment-211729475\n. \n",
    "mastertinner": "thanks, @mAAdhaTTah. i didn't know that i had the same problem with FF... i have no idea where it comes from though...\n. ",
    "viriis": "Sorry\nhttp://www.viriis.com/testTynimce.php\nThank you\n. Ok Thank you very much for your help :)\n. ",
    "superandrew": "+1\n. ",
    "bodia-uz": "Could You please publish to npm 1.6.0 version?. ",
    "larsks": "I'm pretty sure I would call it a bug.  Would the following pattern fix it?\n(\\s*(?:^|[:\\-,[{\\r\\n?])[ \\t]*(![^\\s]+)?[ \\t]*)[^\\r\\n{[\\]},#]+?(?=\\s*:\\s)\nThis looks for ^ (beginning of input) in addition to a newline or carriage return at the beginning of the pattern.\n. That is the same issue, although the resolution suggested there (use ---) is a non-starter, because I'm highlighting individual chunks of YAML from a larger document.  The pattern I suggested in my previous comments seems to resolve this completely for all of my inputs.\n. ",
    "dvkndn": "Thank you, I'll make the pull request\n. @LeaVerou Hi LeaVerou, can you suggest which hooks should I use? I'm currently use 'wrap' but env.language is undefined\njavascript\n{\n  \"type\": \"punctuation\",\n  \"content\": \"&lt;\",\n  \"tag\": \"span\",\n  \"classes\": [\n    \"token\",\n    \"punctuation\"\n  ],\n  \"attributes\": {},\n  \"parent\": [\n    //...\n  ]\n}\n. Ok.. as far as I see, the step when use highlightAll and highlightElement is 1) we find the language name by element's class name, then 2) we find the grammar by that language name, then 3) we call highlight with grammar and language\nThe problem is when we use highlight API, we don't mention the language name but we pass the grammar directly, like highlight(someString, Prism.languages.jsx), so highlight function doesn't know about language name now\n. @LeaVerou I got an idea, how about in highlight function, if language is undefined then we find it by grammar? Something like this:\n``` javascript\nhighlight: function (text, grammar, language) {\n// find language name by grammar if undefined\nif (typeof language === 'undefined') {\n  language = _.keyBy(Prism.languages, grammar);\n}\n\nvar tokens = _.tokenize(text, grammar);\nreturn Token.stringify(_.util.encode(tokens), language);\n\n},\n```\nThe lodash function is just for example. I think we can find it using the __id property of grammar\n. Ok, real code here, how about this:\n``` javascript\nhighlight: function (text, grammar, language) {\n// find language name by grammar if undefined\nif (typeof language === 'undefined') {\n  for (var key in Prism.languages) {\n    if (grammar.__id === Prism.languages[key].__id) {\n      language = key;\n    }\n  }\n}\n\nvar tokens = _.tokenize(text, grammar);\nreturn Token.stringify(_.util.encode(tokens), language);\n\n},\n```\n. @zeitgeist87 sorry I created a pull request before I see your comment. My mistake.\nPersonally, I don't think we should have both the grammar and language parameter in highlight function, or at least in the API. One can be found be the other. If both of them can be set, someone can call Prism.highlight(code, Prism.languages.javascript, 'css');\nAlso, I think it is ok to implement that inside the plugin only.\n. Hi @LeaVerou @zeitgeist87 if you don't mind, can I ask one more thing: where should I let user pass the style map object?\nMy idea is that user should call a function like Prism.plugins.customizeClasses(classMap), with classMap is defined by them. Inside that function I add the code into 'wrap' hook. Then when they call any of those functions in API, everything will be fine. The same applied when they use <script src=\"prism.js\" data-manual></script>\nHowever, for the use case when Prism automatically highlight after loaded, I'm afraid it would not work because the plugin function will be called after Prism auto highlight elements.\nSo I'm thinking about 2 approach:\n- First one is we tell them to have a specific object (in global?), and we will try to load the style map from that object when the plugin automatically run when Prism is loaded (before Prism highlight things).\n- Second one is we just tell them \"this plugin require manual highlight to work\" so they will use data-manual and call the API themselves, after calling the plugin function.\nWhat do you think?\n. I think I will follow 2nd approach\n. Yes I see. Let close it.\n. @LeaVerou @zeitgeist87 I have some time to write the plugin as discussed previously with you two. Please take a look at it.\nI also have one problem here: I create several separate files in my plugins folder to demo how this plugin works, but it seems that make uglify failed to run. Do you have any advice to fix this pull request?\n. Oh right, I should have that. Actually that is my first solution when trying to isolate Prism's class (before I meet CSS Modules)\n. Hi @zeitgeist87 and @LeaVerou , I'm very sorry for the late response. I finally have time to enhance the pull request as your suggestions. Please take a look and tell me anything that I need to fix.\nSummary changes:\n- Rename customClassName to customClass (https://github.com/PrismJS/prism/pull/950#issuecomment-224289704)\n- Inline example code (https://github.com/PrismJS/prism/pull/950#issuecomment-223747175)\n- Support prefix namespace (https://github.com/PrismJS/prism/pull/950#issuecomment-223519639)\n- Map classes to classes (instead of single class) (https://github.com/PrismJS/prism/pull/950#issuecomment-223748063)\n- Update docs (docs for prefix feature, add \u201cMotivation\u201d, simplify examples)\n. Hi @Golmote , would you mind taking a look at this? It seems @zeitgeist87 and @LeaVerou don't have time for this :(\n. Thank you @Golmote :D I fixed those grammar errors as you spotted. Sorry for my bad English :(\n. Sure I reverted the file. That is an accident, sorry\n. ",
    "Lucretia": "I had these as one language file (with each language defined as they are now) originally, but due to the way the examples.html/js worked ending up splitting them up. I would be possible to have one definition with all keywords included for all, I suppose, but this would then mean that the interface keyword would be highlighted as a keyword even when it's not, prior to Ada 2005.\n. ",
    "jGleitz": "Why was this meged into gh-pages? Will it be merged into master and published to npm any time soon?\n. I see. Thanks!\n. ",
    "KhanMaytok": "Many thanks, problem done\n. ",
    "TimvdLippe": "@LeaVerou could you maybe publish a 1.5.1 release? We want to adopt this improvement in our application. Thank you for your time!\n. ",
    "andeersg": "If the class names on code-element is:\n<code class=\"language-Javascript\"\nprism.js wont actually work on it. The initial check detects it, since it only checks for lang(uage)-*\nvar lang = /\\blang(?:uage)?-(\\w+)\\b/i;\nBut this part of highlightElement saves it as \"Javascript\":\nlanguage = (parent.className.match(lang) || [,''])[1];\nwhile the rest of the code uses \"javascript\" (with only lower case). This seems to be the same for the rest of the languages as well. By running toLowerCase the only difference is that \"language-JavaScript\", \"language-JAVASCRIPT\" or for example \"language-javaSCRIPT\" would be parsed to \"javascript\".\nIt's not a major issue, but as far as I have found out it's not something you can control when using Jekyll with Github Pages.\n. I'm not sure of that either, makes no sense to me. But when I try to use \"javascript\" it ignores it.\n. I\u2019m loading prism on the pages I want it and define my codeblocks in Markdown with three backticks and language name, if that's what you are thinking on.\nPlugin support is very limited in Jekyll and specially on Github Pages.\n. ",
    "rupl": "No problem, branch is updated with rAF.\n. woohoo! \ud83c\udf89 \n. ",
    "rmhrisk": "My issue, please forgive.\n. ",
    "sprynm": "Did a bunch of reading in the issue history and it seems this is a touchy subject.  Key limitation now seems to be the backward compatibility so any solution would have to be opt-in only.  I don't see it being THAT big of a deal.  Potential steps:\n1) Decided the best place to set the constant so it can be easily accessed when built/run.\n2) Set the constant to \"\" so the build is backward compatible by default.\n3) Adjust prism-core.js, line 426 to something like:\nvar namespace = _.constants.namespace ? _.constants.namespace+\"-\" : \"\";\n        var env = {\n                ...\n        classes: [ namespace + 'token', namespace + o.type],\n                ...\n        }\n4) create a SASS/LESS variable to automatically update themes\n5) Use a environment flag in the gulpfile to customize the build\nNow running something like gulp --namespace=Wookie builds a custom set of files with zero collisions.\nPerhaps on the page something like Prism.constants.namespace = 'Wookie'; could set the variable on the fly?  CSS is up to the author then.\nI don't think the language packs need to be updated in this scenario?\nDisclaimer, this is only after my first run through the source code so I may have misunderstood the structure badly.  Apologies if wasting your time.\n. ",
    "lukewhitehouse": "Hey!\nWhats the likelihood of this getting implemented? Unfortunately I ran into this problem today as I had already used .comment to style up a Comment listing, something I imagine will be very common for blogs.\nJust seems a shame that I've now had to namespace my own comments section rather than a plugin doing this.\n. Cheers @LeaVerou :)\n. ",
    "exander77": "It still seems to be broken for backticks, try this:\nvar a = [\n    '`a',\n    '`b'\n];. ",
    "larshp": "Does anyone know when the next release is planned?\n. ",
    "JivanRoquet": "Here is the Prism reference in my package.json\njavascript\n{\n    \"dependencies\": {\n        \"prismjs\": \"^1.5.1\"\n    }\n}\nAnd the way I'm trying to use it in my code\njavascript\nimport Prism from 'prismjs'\nPrism.highlightAll();\nThis produces the result explained above:\n- Tokenizing works for basic languages (html, javascript...)\n- Tokenizing does not work for other specific languages (lua, handlebars...)\n- For all languages, syntax coloring isn't applied (css file doesn't seem loaded)\nSo I'm wondering\n- Are there other language-specific packages (like prismjs-handlebars for instance)?\n- Are there theme-specific packages (like prism-okaidia for instance) which would import the css?\n. ",
    "scottbedard": "Are there any updates on this? Being able to pull in additional languages via npm would be great!. ",
    "KyleAMathews": "This pattern works well https://github.com/PrismJS/prism/issues/593#issuecomment-137590486. ",
    "sumitsahu28": "i am using prismjs highlighter in nodejs, able to highlight the code but it fails to give line number although i have added the line number plugin and line-numbers class to the target <pre> element.\nPlease suggest a method to implement line number via prismjs in nodejs.. ",
    "muuvmuuv": "@Golmote Could you add the link to the documentation?. I got the same bug. It seems that the command-line plugin does not push the text input to the output tag.. Hey @RunDevelopment, I have tried this with no success:\nhtml\n            <tr>\n              <td>\n                <pre class=\"command-line language-bash\" data-filter-output=\"(out)\" data-user=\"user\" data-host=\"remotehost\">\n<code>\npwd\n(out)/usr/home/user/bin\nls -la\n(out)total 2\n(out)drwxr-xr-x   2 user  group     11 Jan 10 16:48 .\n(out)drwxr--r-x  45 user  group     92 Feb 14 11:10 ..\n(out)-rwxr-xr-x   1 user  group    444 Aug 25  2013 backup\n(out)-rwxr-xr-x   1 user  group    642 Jan 17 14:42 deploy\n</code>\n                </pre>\n              </td>\n              <td>\nrenders to:\n```html\n\npwd\nls -la\n\n```\nI have also tried to just activate the core and command-line again.. I have created a fiddle: https://jsfiddle.net/muuvmuuv/tckqsa1j/. I have found the issue, I had not imported the required languages... \ud83d\ude06 sorry, so obvious. ",
    "gauntface": "Struggling to get this to work in Typescript as well.\nUpdate: Could get Typescript to work on Node using require like so:\n```\nimport * as prism from 'prismjs';\nconst loadLanguages = require('prismjs/components/index');\nloadLanguages(['lang-1', 'lang-2]);\n```. ",
    "anirudhb": "Download Prism itself and use it on a local page. Then try. The line numbers do not display correctly. The reason they display correctly at http://prismjs.com/plugins/line-numbers/ is because it includes the correct CSS file, but the downloaded copy [JS only] does not contain the patch I've submitted.\n. ",
    "nfagerlund": "Pinging @Golmote b/c you submitted the original highlighter component.\n. yaaaay, thanks!\n. ",
    "dmsimard": "So I worked around the \"scrollIntoView\" function to \"false\" so the anchor would be at the bottom of the screen, not at the top.\n. ",
    "jeffschwartz": "@Golmote thanks and yes, the file just contains markup, which is produced by showdown. I want to use Prism in a pre-production workflow to produce static markup. As an aside, though, I am really confused by Prism now because the docs say it only targets <pre><code> blocks but when I feed it markup it is touching everything in the file. I know this isn't related to this issue but I am just wondering about the state of the project now.\n. @Golmote btw here is the code I developed for my workflow:\n``` typescript\n! /usr/bin/env node\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nlet Prism = require(\"prismjs\");  // prism isn't typescript friendly just import it\n// console.log(process.argv.length);\nconsole.log(\"Args passed:\");\nprocess.argv.forEach( arg => console.log(arg));\n/\n * args:\n \n * argv[0]: path to node\n * argv[1]: path to this executable\n * argv[2]: path to the input file\n * argv[3]: an array of languages, all as strings\n * argv[4]: path to the output file, which will be overwritten if it exists\n /\n// arg validation\nif (process.argv.length !== 5) {\n    console.log(\"Usage: np  [languages[, ...]] \");\n    process.exit(1);\n}\n// resolve input/output paths\nlet input = path.resolve(process.argv[2]);\nlet output = path.resolve(process.argv[4]);\n// languages requested\nlet languages: string[] = JSON.parse(process.argv[3]);\nconsole.log(\"languages requested\", languages.length);\n// read markup from input file\nlet markup = fs.readFileSync(input).toString();\nconsole.log(\"input length\", markup.length + \"(bytes)\");\n// highlight the markup\nlet highlightedMarkup = markup;\nlanguages.forEach(language => {\n    console.log(\"highlighting language\", language);\n    highlightedMarkup = Prism.highlight(highlightedMarkup, Prism.languages[language]);\n});\n// highlightedMarkup now contains the completed highlighted markup so time to save it to a file\nfs.writeFileSync(output, highlightedMarkup);\n// all done. time to say goodbye!\nprocess.exit(0);\n```\n. Thank you @Golmote for the clarification. I looked through the source and now I understand what highlight is actually doing. Obviously it will not satisfy my use case so I am closing out this issue. Thanks again.\n. ",
    "MaherJendoubi": "@Golmote Thanks a lot!\n. ",
    "kleerkoat": "would be nice!\n. ",
    "n1crack": "\ud83d\udc4d  yes please. ",
    "tfryman": ":+1: Please!. ",
    "isglass": "Hi @zeitgeist87 ,\nUnfortunately I can't reproduce it, have only noticed it in our \"visitor-exception-logs\" over the last couple of days. All I have got is their user agent:\nMozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.80 Safari/537.36\nAnd a stack trace:\nnew RegExp  @ (native):\nRegExp  @ (native):\nObject._self.Prism.tokenize @ prism.js:3\nObject._self.Prism.highlight    @ prism.js:3\nObject._self.Prism.highlightElement @ prism.js:3\nXMLHttpRequest.i.onreadystatechange @ prism.js:8\nAnd exception message:\n\nInvalid flags supplied to RegExp constructor 'undefinedg'\n. \n",
    "brentertz": "Yep, removed.  Not sure why that was in there in the first place or why I didn't notice it.\n. 60 frames per second (fps) is the target for smooth animations\n1s or 1000ms / 60fps = ~16ms\n. ",
    "svgeesus": "The width and height attributes make an SVG image non-scalable. Unless it is desired to always force a specific size, they should not be present.\nA viewbox specified the range of world coordinates used. In this case, the range started at 0,0 (which is the default if viewBox is not specified) and extends to the same numbers as the width and height attributes (whichis why removing the viewBox was successful in this instance). However, it still forces a fixed size rather than being, well, scalable.\nUsing a viewBox (and no width or height) allows the logo to be used at different sizes. See https://github.com/PrismJS/prism/pull/1005\nAlso see\nhttps://www.w3.org/TR/SVG2/coords.html#ViewBoxAttribute\nfor the more complex cases, in which width/height and viewBox are not providing essentially the same info.\n. Yes, you should\n. ",
    "Flynxify": "Can confirm that this does fix #997.\n. Check the plugin-pages to get additional information about how to use them. Line numbering only works if you add an additional class to your desired pre: http://prismjs.com/plugins/line-numbers/ and line highlighting needs a data-line-attribute http://prismjs.com/plugins/line-highlight/\n. ",
    "jaggerwang": "ok\uff0cThanks\uff01\n. ",
    "SamyPesse": "It works if I normalize newlines with: text = text.replace(/\\r\\n/g, '\\n');\n. Thanks \ud83c\udf7b \nYou can also setup NPM deployment with travis to automate this: https://docs.travis-ci.com/user/deployment/npm/. Thanks @LeaVerou \ud83d\udc4d . ",
    "sheriffderek": "Wonderful. Thank you Lea. That sounds like a good plan. : )\n. ",
    "Jameskmonger": "Thanks @LeaVerou. I solved it :smile:\nprism.hooks.add('wrap', function(env) {\n    if (env.type == 'comment') {\n        delete env.attributes.spellcheck;\n    }\n});\n. ",
    "unixsheikh": "Hi @Golmote, thank you very much for the feedback. I have adopted the language-none option.\n. ",
    "thesave": "Hi, thanks for the very useful comments :)\nI took the time to extend the support for the Jolie language (also following you advises).\nAs suggested, I added the examples, tests, and built with gulp.\n. Hi, thank you very much for your review, I really appreciate it :)\nI tried to follow all your suggestions and added tests for the new features.\n. Did the required fixes.\nYou are right about <= and =<, I added also the support for *= (whilst %= is not supported)\nI also moved => from operators to symbols.\n. Sorry for the late reply. Work swamped me :)\nI fixed the example file and the errors on strings and punctuations.\n. Thank you very much for your time :)\n. ",
    "dawsbot": "Is there no way to mock the dom and then detect newlines within that?\n. I appreciate the response but I've not got the ability to contribute to a codebase this large at this time. Thanks for the response \ud83d\udc4d \n. ",
    "ScottHelme": "Hey :-)\nI fixed up the code based on the comments. I think that should now be good.\nI will have a look at the requirements for the examples and tests.\n. I've learnt a lot more about regexp than I intended ;-)\nHow is it looking now?\n. Getting there... :-D\n. We could merge HPKP and HSTS but they're different technologies and may diverge further in the future. Also, the numeric value ranges are different for the two. From my side it makes sense to keep these separate. \nAs for the examples and test I will take a look at what's required.\n. I think it's just the examples and test that are outstanding. . All good on my side!. This was intentional :-)\n. ",
    "papandreou": "Very interested in seeing this landed. Anything I can do to help out?. @ScottHelme, fixed some bugs and added the missing pieces over here: #1275\nIf you'd rather work some more on this, feel free to cherry-pick the relevant changes back here :). Thanks :)\n\nPS: Nice username :P\n\nThat's not the usual reaction from Greeks! (eg. https://github.com/less/less.js/issues/462#issuecomment-3814595). > I thought you chose it ironically\nIt's actually been with me since I was a kid. My name is Andreas and my parents thought that \"Andreas Papandreou\" sounded cute. Seemed innocent enough until those real Papandreous got into all those scandals and bankrupted the country ;). @Golmote, thanks for taking a look! I moved the error propagation thing to a separate PR (https://github.com/PrismJS/prism/pull/1276) and force pushed my branch here.\nAlso pushed commits that build the minified components and the \"Show Language\" plugin.. I can help out as well, but @ScottHelme is certainly riding the bleeding edge more than I am :). ",
    "mattes": "Big +1 on this, too. We just contributed the Content-Security-Policy highlighting to the ace editor. https://github.com/ajaxorg/ace/pull/3511. Would be great to have it for prism as well.. Oops, had an outdated cached tab open. Glad it's merged! . ",
    "thiaguerd": "https://jsfiddle.net/rckwnhx1/\n. ",
    "getsnoopy": "You can require the languages you need as dependencies directly in the file that specifies Prism as a dependency. For example:\nvar prism = require('prismjs');\nrequire('prismjs/components/prism-scala');\n. Hmm...the code I posted works for me. It seems like it can't find the reference to the global Prism. One thing you might want to check is what the transpiled code looks like. The Babel preset treats modules as ES6 modules where top-level this resolves to undefined. This affects UMD-style libraries which try to use this as a reference to the global scope. You might be able to get around this by using an imports-loader on your modules, or by allowing top-level this explicitly: https://github.com/babel/babelify/issues/37\n. ",
    "jswny": "@getsnoopy Using Webpack with \nvar prism = require('prismjs');\nrequire('prismjs/components/prism-scala');\nin my entry.js and then using the resulting bundle in my page I still cannot get syntax highlighting to work with Scala. JS syntax highlighting works fine, however my Scala snippets do not.\nAdditionally, the page is completely broken when I try to use your suggestion in the ES6 syntax style with Babel like so:\nimport 'prismjs';\nimport 'prismjs/components/prism-scala';\nor\nimport prism from 'prismjs';\nimport 'prismjs/components/prism-scala';\nin my entry.js file.\n. @mAAdhaTTah That seems to work fine in terms of getting Prism loaded into my pages. However, when I try to put either\nrequire('prismjs/components/prism-scala');\nor\nimport 'prismjs/components/prism-scala';\nAfter I import Prism into my entry.js so that I can include the Scala syntax highlighting I get the following error: prism-core.js:74 Uncaught TypeError: Cannot set property 'keyword' of undefined.\n. @mAAdhaTTah Thanks but that still doesn't work. Using\nimport 'prismjs/themes/prism-okaidia.css';\nimport Prism from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-java';\nimport 'prismjs/components/prism-scala';\nmy css breaks, while using\nimport 'prismjs/themes/prism-okaidia.css';\nimport Prism from 'prismjs/components/prism-core';\nrequire('prismjs/components/prism-java');\nrequire('prismjs/components/prism-scala');\nmy CSS doesn't break but nothing is highlighted. In both instances I still get the same error: rism-core.js:74 Uncaught TypeError: Cannot set property 'keyword' of undefined. I've also tried loading the theme after the JS but that didn't work either.\n. ",
    "otakustay": "I find a solution using the val-loader to \"build\" a custom prism, here is the prism.js code:\n```js\nconst {readFileSync} = require('fs');\nconst {flatMap} = require('lodash');\nconst createResolver = transform => name => {\n    const path = require.resolve(transform(name));\n    const content = readFileSync(path, 'utf-8');\nreturn {path, content};\n\n};\nconst resolveMain = createResolver(() => 'prismjs/components/prism-core');\nconst resolvePlugin = createResolver(name => prismjs/plugins/${name}/prism-${name});\nconst resolveLanguage = createResolver(name => prismjs/components/prism-${name});\n// \u628a\u914d\u7f6e\u6587\u4ef6\u8bfb\u51fa\u6765\uff0c\u53bb\u6389\u524d\u9762\u7684var components =\u548c\u6700\u540e\u7684;\uff0c\u4e2d\u95f4\u7684\u90e8\u5206\u662f\u4e2aJSON\nconst prismComponentsCode = readFileSync(require.resolve('prismjs/components'), 'utf-8');\nconst prismComponents = JSON.parse(/({[\\w\\W]+});/.exec(prismComponentsCode)[1]);\nconst resolveLanguageDependencies = language => {\n    const requires = prismComponents.languages[language].require;\nif (!requires) {\n    return [];\n}\n\nconst dependencies = [].concat(requires);\n\nreturn [\n    ...flatMap(dependencies, resolveLanguageDependencies),\n    ...dependencies\n];\n\n};\nconst sortLanguages = languages => {\n    const result = languages.reduce(\n        (result, current) => {\n            const requires = resolveLanguageDependencies(current);\n            requires.forEach(language => result.add(language));\n        return result.add(current);\n    },\n    new Set()\n);\nreturn Array.from(result);\n\n};\nconst config = {\n    plugins: [\n        'keep-markup'\n    ],\n    languages: [\n        'actionscript',\n        'applescript',\n        'aspnet'\n    ]\n};\nmodule.exports = () => {\n    const main = resolveMain();\n    const plugins = config.plugins.map(resolvePlugin);\n    const languages = sortLanguages(config.languages).map(resolveLanguage);\n    const modules = [...plugins, ...languages];\nconst code = [\n    'const global = {};',\n    'const self = global;',\n    'const window = global;',\n    main.content,\n    ...modules.map(result => result.content)\n];\nconst dependencies = [\n    main.path,\n    ...modules.map(result => result.path)\n];\n\nreturn {\n    code: code.join('\\n'),\n    dependencies: dependencies,\n    cacheable: true\n};\n\n};\n```\nSet this file to use ['babel-loader', 'val-loader'] in webpack.config.js, then by import Prism from 'xxx' you can get a prism object with configured plugins and languages. ",
    "felixhao28": "I figured it out by using this:\njs\nimport Prism from 'prismjs/components/prism-core'\nimport 'prismjs/components/prism-clike'\nimport 'prismjs/components/prism-java'\nimport 'prismjs/themes/prism.css'\nPrism is pretty stupid on resolving dynamic dependencies. First prism-core set Prism object to global.Prism, then it's used in language definition files. The definition files have dependencies with each other. In this case, \"scale\" depends on \"java\" which depends on \"clike\".\nMy webpack.config.js is very standard:\n```js\nconst path = require('path');\nmodule.exports = {\n    entry: './src/index.js',\n    // devtool: 'sourcemap',\n    output: {\n        filename: 'bundle.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n        rules: [{\n            test: /.js$/,\n            exclude: /(node_modules|bower_components)/,\n            use: {\n                loader: 'babel-loader',\n                options: {\n                    presets: ['@babel/preset-env']\n                }\n            }\n        }, {\n            test: /.css$/,\n            use: ['style-loader', 'css-loader']\n        }]\n    }\n};\n```. ",
    "spooky": "Ok, thanks.\n. ",
    "Megafarm": "Thanks for replying,\nhere is the code:\nHTML formated:\n<pre class=\" language-json\"><code class=\" language-json\"><span class=\"token punctuation\">{</span><span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span><span class=\"token property\">\"created new file -all-, value inserted;created new file -24h-, value inserted;created new file -168h-, value inserted;created new file -current-, value inserted;\",\"data\"</span><span class=\"token operator\">:</span><span class=\"token property\">\"YOUR TEMPERATURE VALUE\",\"ip\"</span><span class=\"token operator\">:</span><span class=\"token property\">\"YOUR IP-ADDRESS\",\"appid\"</span><span class=\"token operator\">:</span><span class=\"token property\">\"YOUR APPID\",\"lastinsert\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"TIME OF UPLOADING\"</span><span class=\"token punctuation\">}</span></code>\n</pre>\nHTML unformated:\n<pre>\n<code class=\"language-json\">{\"message\":\"created new file -all-, value inserted;created new file -24h-, value inserted;created new file -168h-, value inserted;created new file -current-, value inserted;\",\"data\":\"YOUR TEMPERATURE VALUE\",\"ip\":\"YOUR IP-ADDRESS\",\"appid\":\"YOUR APPID\",\"lastinsert\":\"TIME OF UPLOADING\"}</code>\n</pre>\nJust the \"TIME OF UPLOADING\" is green, other red\n. Yes, @Golmote \nit works now :D\n. ",
    "hanyuone": "Oh yeah, I forgot about the keyword matching everything.\nWell, thanks for the quick reply @Golmote, everything works!\n. ",
    "flashpixx": "Thanks I'm using the data-language attribute\n. ",
    "snakeman21": "@LeaVerou Sorry, don't mean to be annoying, but would it be possible to add my tutorial? Or are you guys not adding third-party tutorials anymore?. Thank you so much, you're the best! Will do so. @Golmote already did remove it actually.. @LeaVerou Is this tutorial good enough to be merged?. @Golmote or @LeaVerou sorry, I apologize for being extremely obnoxious here, but I didn't realize changes to the site are made to gh-pages, not master. Should I send another pull request or can one of you guys merge those changes into gh-pages? Again, I'm really sorry for being annoying.. ",
    "jarodium": "If is this you are refering to, then I got the same issue.\nThis was the result after I linked with #id-div.2-5\nAlso, I'm not sure if this helps, but I am using the code highlighter inside a second level tabbed page on bootstrap, which is not loaded at page loading. Basically I load the code highlighter after a ajax request.\n\n. ",
    "MastroLindus": "I discovered that the plugin runs, there were some issues with TSX and the way the code strings were indented, ideally I would have loved the plugin to fix it for me, but with some minor changes I managed to obtain a decent result, so for the moment I'll be closing this one.\n. ",
    "romanvm": "Thanks! It seems to be fixed now. I'll test my language definition more and then submit it to Prism.\n. Since this issue is fixed, I'm closing it. Thanks for your help.\n. ",
    "gre": "here is another example\nPrism\n\nAtom\n\nGithub\n`` js\nconst c =\n// do something\nfloat a = p.x * p.y;\n// do something else\nfloat b = a * 2.0;\n`;\n```\n. any workaround or idea of where the bug is ?\n. mmh, no I can't, is it running a special version? mmh I'm using version 1.5.1 published on npm.\nI can still reproduce it if I paste this:\n``\ndocument.write(`);\nvar Prism = require('prismjs');\nvar code = [\n\"const c = \",\n\"// do something\",\n\"float a = p.x * p.y;\",\n\"\",\n\"// do something else\",\n\"float b = a * 2.0;\",\n\";\"\n].join(\"\\n\");      \nvar html = Prism.highlight(code, Prism.languages.javascript);\ndocument.write(' ');\n```\nin http://requirebin.com/. :+1:\nI was about to raise something similar for JSX and comments:\n\n\ntell me if you prefer to create another issue, but there are multiple ways like this that breaks highlighting.\n. I'm experiencing something somewhat similar on a specific code snippet (I have like 30 different code, but a specific snippet trigger the bug)\ngoing to investigate a bit more the source of the problem but it's a regression to me (don't know if it's a regression of browser or libs)\n\nwhy would executing a RegExp that slow (8s) \u2013 very weird, and it's always reproducible to that same ~8s.. woo, cool thanks. ",
    "GordonLesti": "@Golmote do you think it has a chance to be merged if I fix the open issues from above or should I better develop it outside of Prism?\n. I like the idea with the keep markup plugin.\n. I have tested the idea with details and summary and it works pretty well. I have written a small post about it and will close this PR.\n. Hello @Golmote @LeaVerou \nI tried the last weeks something like a CSS only plugin for <details> and <summary> combined with the Keep markup plugin, but unfortunately it is not possible with the current browsers to style the elements as expected.\nWhat do you think about replacing <details> and <summary> with something like <span class=\"prism-details\"> and <span class=\"prism-summary\">, combined with the Keep markup plugin and some Javascript that is doing the same behavior as <details> and <summary>?. ",
    "Rob--W": "@Golmote You forgot to copy the quotes (those quotation marks in my steps-to-reproduce are required for the test case).\n. (rebased because of conflicts in toolbar-plugin.min.js)\n@Golmote Can you take a look at this PR and merge it? I tweeted @LeaVerou, but she probably overlooked it.\n. I refreshed the test page, repeated the above steps, and indeed: the issue no longer shows up.\n. The following commits solve the first part of my reported issue:\n5df26e23f10f54d84a25878c00e7cb77207c2229 Smarty\n36bc560edcbe506d5c46afc4e743152daa12d913 PHP\n7a1a404229d96ac82f9d5099e048daccbb317e7a Handlebars\nI don't see anything that fixes the second part,\n\nAnother problem with replacing predictable sentinels in the HTML after highlighting is that if someone manages to put the sentinel in a HTML attribute, then the resulting HTML can be unsafe, leading to XSS in the worst case.. I haven't suggested a solution yet. My suggestion and what you wrote there is exactly what was implemented in the three commits that I referencecd in my last comment (which fixed the first of the two reported issues).\n\nTo fix the last outstanding issue, you have to detect the difference between content that is inside an attribute, and content that is outside of it. For example, currently \" is not escaped unless it is inside an auto-generated HTML attribute - https://github.com/PrismJS/prism/blob/8eb0ab6f76484ca47fa7acbf77657fab17b03ca7/prism.js#L456-L460\nAnd also, instead of replacing in a loop, I suggest to use a regexp and a function in the replacer. Then you can be certain that the replacement string cannot affect the next replacements.\nHere is a quick example for the Smarty highlighter:\nhttps://github.com/PrismJS/prism/blob/8eb0ab6f76484ca47fa7acbf77657fab17b03ca7/components/prism-smarty.js#L98 Replace\njs\n                return '___SMARTY' + env.tokenStack.length + '___';\nwith\n```js\n                return 'SMARTY\"' + env.tokenStack.length + '';\n````\nhttps://github.com/PrismJS/prism/blob/8eb0ab6f76484ca47fa7acbf77657fab17b03ca7/components/prism-smarty.js#L119-L122 Replace\njs\nfor (var i = 0, t; t = env.tokenStack[i]; i++) {\n    // The replace prevents $$, $&, $`, $', $n, $nn from being interpreted as special patterns\n    env.highlightedCode = env.highlightedCode.replace('___SMARTY' + (i + 1) + '___', Prism.highlight(t, env.grammar, 'smarty').replace(/\\$/g, '$$$$'));\n}\nwith\njs\nif (env.tokenStack.length) {\n    env.highlightedCode = env.highlightedCode.replace(/___SMARTY(&quot;)([0-9]+)___)/g, function(match, quot, i) {\n        if (!(i in env.tokenStack)) return match;\n        var text = env.tokenStack[i];\n        if (quot === '&quot;') {\n            // \" was escaped, so we are inside a HTML attribute. Don't highlight.\n            return text.replace(/\"/g, '&quot;');\n        }\n        // The replace prevents $$, $&, $`, $', $n, $nn from being interpreted as special patterns\n        return Prism.highlight(text, env.grammar, 'smarty').replace(/\\$/g, '$$$$'));\n    });\n}. > How about we count the sentinel occurrences? Every sentinel can only occur once in env.highlightedCode. If there are more, then something is fishy and we refuse to do the replacement...\nThis is an easy way out, but may cause unexpected behavior when the code has a legitimate need for using the sentinel as a part of the code.\nIf \" cannot be used, you could use another special character and do a safe replacement. E.g. replacing some rarely used unicode character with its &#[code];-equivalent, and using that special unicode character in the sentinel. In the event that the unicode character occurs in the original code, the user doesn't see the difference because the &#[code];-entity renders the original glyph.. I have attached a patch to PR #1051.\n. #1051 was merged.\n. @Golmote Look at the code linked from the report. It is quite obvious that it unconditionally handles any messages. That makes Prism.js in its current form unsuitable as a library in a Web worker (opposed to being the sole and only script running in the worker, as the code currently assumes). \nI worked around the issue in my own project by temporarily clearing the addEventListener method because then prism.js will not attach a global message listener (ref in prism source): https://github.com/Rob--W/crxviewer/blob/ce1c9ec1bd5dc61f6d302ba835b76c16418d9ac0/src/lib/prettify/prism-source-extensions.js#L8-L14\nIdeally there would be a global flag to disable this, e.g. _self.prismAsWorkerLib (if this is set, then Prism.js will not attach a message handler).\n. > Ideally the onmessage handler should be installed in case Prism.highlightElement is run with async option: https://github.com/PrismJS/prism/blob/gh-pages/components/prism-core.js#L212\nThe onmessage handler must be registered in the worker, not in the main thread, so this does not work unless you plan on creating a dynamic worker script.. LGTM. How about replacing insideWorker with a name that more accurately describes the purpose or effect of the option? E.g. disableMessageHandler: true?. You could use location.pathname to test whether the worker script is\nloaded via importScripts.\nThis \"location\" object is a WorkerLocation instance and only supported by\nrecent browser versions. Perhaps you can use this to select a reasonable\nenvironment-dependent default, and allow users to override the default\n(e.g. if the option is not supported).\nAlternatively/additionally, detect the presence of the Prism global before\nthe script has loaded. If it was set, then a script has run before the\nlibrary was loaded, so you can then infer that importScripts had been\nused.\n. > @Rob--W Unless I missed something in your explanation, I can't see how this will help us differentiate when Prism is loaded as a worker and when it's loaded with importScripts. In both cases, location will be an instance of WorkerLocation, won't it?\nIn both cases location is an instance of WorkerLocation indeed. But that is besides the point. I explicitly referred to location as WorkerLocation to emphasize that this is a relatively new API, so that if you want to use it, then you'd better include a fallback in case the location global isn't available.\nThat having said, when loaded as a worker by Prism, location.pathname.endsWith('/prism.js') is most likely true (unless renamed). When loaded as a library, the condition is most likely false. This difference is how you can reasonably accurately guess whether Prism is used as a stand-alone worker, or as a library in a Worker.. ",
    "reyronald": "Hello guys, sorry for commenting on a closed issue. I stumbled upon something similar to what has been discussed here and just wanted to make sure it was the same issue. For a Smarty snippet, after running .highlightElement I'm getting this:\nsmarty\n<div style=\"color: {$color};\"></div>\n=>\nsmarty\n<div style=\"color: ___SMARTY0___;\"></div>\nHere's a CodeSandbox with the reproduction in case it's useful: https://codesandbox.io/s/2pk8rlmxwr. Something similar is happening with Erb files too.\nJust want to know if I can expect a fix sometime eventually @Golmote  \nReference: https://github.com/refined-bitbucket/refined-bitbucket/issues/234. Just wanted to drop by to thank @fyrkant and @Golmote for working on this, and for having the updated version of PrismJS up and runing so quickly!\nMy user base and myself were waiting for this here https://github.com/refined-bitbucket/refined-bitbucket/issues/129 and we are satisfied with the results! \ud83d\ude4c . Wow, that was really quick!\nThanks a lot guys!. ",
    "craigharman": "Apologies, not, images but code:\n<pre id=\"code-deploy-existing\" class=\"line-numbers\"><code></code></pre>\nthis will not:\n<pre id=\"code-deploy-existing\" class=\"line-numbers\"><code class=\"language-php\"></code></pre>\nThe only difference being the language-php class. If you mouse over the prism code block using the first one you see the \"copy\" button. But with the second it doesn't show. All other code remains the same.\n. ",
    "gusbemacbe": "Thank you! It is fixed. \n. @Golmote \nI have fixed all the bugs yesterday after I saw somebody wanted to use my theme for Prism.js, now it is finished and it works and the theme is official on Dracula Themes. . @mAAdhaTTah, ready. Reference: https://github.com/PrismJS/prism-themes/issues/74.. ",
    "ligaz": "Ideally the onmessage handler should be installed in case Prism.highlightElement is run with async option: https://github.com/PrismJS/prism/blob/gh-pages/components/prism-core.js#L212. You can also check the format of the incoming message and do nothing if it cannot be processed.. @Rob--W True that. There are ways to hack this around (like passing arguments via location) but they are not stable.. disableMessageHandler does not ring a bell to me what exactly it is supposed to do. insideWorker although not perfect makes more sense.\nOther alternatives that I can come up with are: runInWorker, inWorker, or just worker, but I'm not sure they are better.. ",
    "runemadsen": "Ah cool, thanks for the quick reply. For the record, this string actually came from a DOM element like this:\njs\nvar pres = document.getElementsByTagName('pre');\nfor(var i = 0; i < pres.length; i++) {\n  pres[i].firstChild.innerHTML = Prism.highlight(pres[i].firstChild.innerHTML, Prism.languages.javascript)\n}\nSo I changed .innterHTML to .textContent and that solved it. THX!\n. ",
    "jsight": "Oh, wow, somehow I missed that it could do this. I'll try it out, thank you!. ",
    "jadekler": "@Golmote Huh, weird. I'll see if I can provide you something. ",
    "mjrussell": "Ah looks like the key is to have greedy: true on the string. Will submit a PR. Actually its pretty tricky to support all these edge cases so not going to submit a PR yet.\nThe current behavior supports multi line strings, but Im having trouble keeping that functionality while enabling comments inside of strings. Hoping someone more experienced with Prism might have some insights. Mutli line's with comments i.e.:\nyaml\nmutli: \"mutli line\n  with # inside\" # and out\nwill fail because the regex (probably not new behavior actually with greedy):\n/([:\\-,[{]\\s*(![^\\s]+)?[ \\t]*)(\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*')(?=[ \\t]*($|,|]|}))/m\nExpects the last capture group $|,|]|} at the end in order to be treated as a string. Seems like it needs one more alternative to eat whitespace until another comment (but let it be parsed as a comment). Awesome to see some progress on this! Agree I had many issues with greedy behavior before so excited to see how @zeitgeist87's tweaks work. ",
    "EliasCK": "Hi, \nThansk for the reply, maybe looking at my current solution clarifies the problem :p\nPrism.hooks.add('wrap', function (env) {\n    if (documentationUrlTable[env.content] !== undefined) {\n        env.content = \"<a href='\" + documentationUrlTable[env.content] + \"'>\" + env.content + \"</a>\";\n    }\n});\nHowever it doesn't quite work in all cases, since it's not all types / elements that gets evaluated by the wrap hook.\nBut basicly, i want stuff to be clickable^^\nHere is an example using csharp syntax where the wrap hook does not work.\n```\n[SkippedByTheWrapHookForSomeReason]\n[NotSkippedSinceItNowsItIsAFunction()] // i guess^^\npublic class NotSkippedItKnowsItsAClass : BaseClassIsAlsoSkipped\n{\n}\n```\nUpdate\nSince csharp syntax doesn't identify classes correctly i'm just gonna go away from PrismJS. Too many complications with my current approach.\n. Yeah, i think it would, then i could just add all possible tokens, and have links work everywhere.\nBut it turned out that in order to get proper syntax coloring i needed a much more reliable type identification than PrismJs or any other js parser out there i could find. So I ended up making a custom parser that retrieves type meta data directly from a compiled assembly in order to associate tokens with the correct types.. ",
    "Slapbox": "@Golmote I'm using Slate-Prism, a package which adds Prism highlighting to the SlateJS text editor.\nIt uses a line, Prism.languages, which obviously only includes the core languages. Could you elaborate a little on how to add languages to Prism?. Nevermind. That was really easy... I just added the require and it was added to the list of languages... Amazing!. ",
    "spen": "Hi @LeaVerou - thanks for taking a look at this!\nAlthough ES6 is JS, I was seeing an error / no processing on code blocks tagged ases6 like so:\n```es6  someCode... ``` when using Prism with marked because es6 was not being found as a language in Prism.languages.\nHere's the code (annotated) from the PR referenced above :\nes6\nmarked.setOptions( {\n    // 'code' may be 'js', 'javascript' or 'es6' amongst others.\n    highlight: function( code, language ) {\n        // making sure that there is a language, otherwise Prism.highlight(code, undefined) errors.\n        const syntax = Prism.languages[ language ];\n        return syntax ? Prism.highlight( code, syntax ) : code; // skip highlighting if lang is not found.\n    }\n} );\nCalypso has a lot (hundreds?) of readmes, many of which have es6 tagged code-blocks.\nWe could look to convert all existing es6 tags with js tags. \nThat would be reasonable as I think that GitHub now renders the same highlighting for both (I feel like previously that was not the case) but I worry that es6 tagged blocks may find their way in to the codebase over time.\nBy the way, the solution I've used for the related PR is to manually alias the language like so:\njs\nPrism.languages.es6 = Prism.languages.js\nThat's fine for the needs of the PR I referenced but I feel others may see the same issue though it really might not be a very common issue :)\nJust to summarise: I'm aiming for as much consistency between Prism's highlighting and GitHub's. No Worries @LeaVerou, thanks for taking a look! - I didn't actually realise that it was so simple until after opening this PR :). ",
    "timehat": "After one more check, really having too many \\ characters will get you into this situation:\n{ \"a\": \"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" }\n{ \"a\": \"\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\" }\n{ \"a\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\" }. Thank you for the fast turnaround. \ud83d\udc4d . ",
    "zq99299": "en en \u7684\u786e\u9519\u4e86\u3002 \u4e0d\u77e5\u9053\u5199\u9519\u4e86\u9700\u8981\u683c\u5f0f\u5316\u7684\u8bed\u6cd5 \u4e5f\u4f1a\u9519\u8bef\u3002. ",
    "alex-sherwin": "Thanks @Golmote, it is a duplicate, the new version of the JOSN component is working fine\n. ",
    "vlellouche": "thanks you. ",
    "grorg": "\nBut I'm really excited about this! I assume you're using Prism in specs then?\n\nI was using it in some WebGPU stuff. Neither prism or highlight.js supported WebIDL. I decided prism was easier :). Yeah, thanks for poking me. I'll clean it up and post again soon.. I copied the cpp implementation, so maybe there is something in the insertBefore code that it needed. Either way, I don't understand so I'm happy to do whatever.\nAs for the dependencies, you're right that it's not clear. WebIDL isn't technically C, C-like, or CPP. I figured it would be ok to extend from cpp though, since it does have fairly similar syntax.. Thanks for the tips @LeaVerou and @zeitgeist87. I'll update the patch soon.\n\nhe knows WebIDL better\n\nHahahahaha. If only.. ",
    "emmanuelgautier": "Hi @Golmote, highlighting is processing on server side so it could be possible to imagine an option for the highlight function. It also possible to detect that the tag <html \u26a1> or this one <html amp> is present. I think the best way is to give function the capability to know his running context.\nWhat do you think about this two solutions ?. ",
    "oliviertassinari": "\ud83c\udf89 . @Golmote Awesome :). ",
    "s3131212": "After some more trying, I believe the problem might be, it can't inspect the negative number :(\n\n. python\ninput = -1    # \"-1\" should be a number\ninput = input - 1     # \"-1\" should be divided into \"-\" and \"1\"\nAlso, after some researching, I found out that there are the similar issue ( #810 ) already. Is this there any plan to deal with this problem or still remain the decision made by Golmote ?\nThanks a lot and sorry for my poor English.. ",
    "kennetpostigo": "@windowsair the line-numbers class name is being added onto the pre element, it is grabbed from the plugin object title field.. Do think we can chat on discord? Because the highlighter module is in one repo and the webpage in another repo. I can send you an invite to both if you would like.. ",
    "abhisheksoni27": "Any news on this?. ",
    "kopax": "@Golmote could you try to display correctly using prism the following JSX code \n```jsx\nimport React from 'react';\nimport {\n  Alert,\n  Button,\n} from 'bootstrap-styled';\nexport default class AlertDismissExample extends React.Component {\nstate = {\n    visible: true,\n  };\nonDismiss = () => {\n    this.setState({ visible: false });\n  };\nrender() {\n    return (\n      \n\n          I am an alert and I can be dismissed!\n        \nReset alert\n\n    )\n  }\n}\n```\nWhen I am using the class language-js it can be displayed with color, but if I use language-jsx, it seems to be not working at all.\nI have imported prism like in webpack 2 like this : \njsx\nimport '../node_modules/prismjs/themes/prism-okaidia.css';\nimport Prism from 'prismjs';\nWhat syntax are you using for defining language-jsx ?\nI am using prismjs v1.6.0. Solved by importing : \nimport PrismJsx from 'prismjs/components/prism-jsx.min';\n\nEdit\nThat does always work on recent build environment because of the non existing default PrismJsx imported.\nIn this case you can use require('prismjs/components/prism-jsx.min') instead if es6 import synthax.. ",
    "JulienDemarque": "Is that a bug? It seems other language option do not need to be imported this way?. ",
    "Xaviju": "Sorry, missed that. \nThanks a lot for your help @Golmote @LeaVerou !. ",
    "Bigsby": "One is glad to be os service.. ",
    "sanorama": "worked like a charm, thank you. ",
    "jonasjacek": "I was using reveal.js for this document. Reveal uses https://highlightjs.org/ for highlighting. I assume that caused the error. . ",
    "theoscat": "Thanks, it seems that i missed this information while reading the documentation.\nIt's working as expected now.\nTheo. ",
    "pinheadmz": "I'm having this issue. require('prismjs/components/bash') isn't right either. I see a file at node_modules/prismjs/components/prism-bash.js ?. hm, Cannot find module 'prism-bash'\nI'm trying run this script: https://github.com/pinheadmz/bcoin-org.github.io/blob/piguide1/guide-generator.js\nWhich throws an error from this script: https://github.com/pinheadmz/bcoin-org.github.io/blob/piguide1/utils/createHTML.js\nThere was a problem:  TypeError: Cannot read property 'rest' of undefined\nPlease report this to https://github.com/chjj/marked.\n    at Object.tokenize (/Users/pinhead/bcoin-org.github.io/node_modules/prismjs/prism.js:265:22)\n    at Object.highlight (/Users/pinhead/bcoin-org.github.io/node_modules/prismjs/prism.js:256:18)\n    at Renderer.renderer.code (/Users/pinhead/bcoin-org.github.io/utils/createHTML.js:66:22)\n    at Parser.tok (/Users/pinhead/bcoin-org.github.io/node_modules/marked/lib/marked.js:999:28)\n    at Parser.parse (/Users/pinhead/bcoin-org.github.io/node_modules/marked/lib/marked.js:944:17)\n    at Function.Parser.parse (/Users/pinhead/bcoin-org.github.io/node_modules/marked/lib/marked.js:931:17)\n    at marked (/Users/pinhead/bcoin-org.github.io/node_modules/marked/lib/marked.js:1252:19)\n    at createHTML (/Users/pinhead/bcoin-org.github.io/utils/createHTML.js:81:18)\n    at generatePages (/Users/pinhead/bcoin-org.github.io/utils/generatePages.js:45:11)\n    at Object.<anonymous> (/Users/pinhead/bcoin-org.github.io/guide-generator.js:49:1). ",
    "Carogato": "Hello. \nTinyMCE has a no installable version: https://www.tinymce.com/docs/get-started-cloud/ \nThen, I use it in my web but I have no repositories.\nExternal plugins works with this setup:\ntinymce.init({\n  selector: 'textarea',  // change this value according to your HTML\n  external_plugins: {\n    'testing': 'http://www.testing.com/plugin.min.js',\n    'maths': 'http://www.maths.com/plugin.min.js'\n  }\n});\nSince Prism hasn't got this facilities, I'm unable to use it... Or there are any way?\nThanks.. Thanks, LeaVerou, but I don't know how get this ID... sorry I'm lost :(. ",
    "FezVrasta": "JavaScript.. ",
    "hax": "@Golmote  Could you publish a new version on npm?. ",
    "ManuelRauber": "Is this really fixed?\n\nSeems not to work for C# code. ",
    "jimmyhmiller": "@garretwilson I've put in a PR for this. Let me know if it fixes it for you.. ",
    "mmews-n4": "@Golmote @zeitgeist87 Can you merge this? It is highlight support for the Eclipse project N4JS.. ",
    "bsmith-n4": "Thanks @Golmote . ",
    "prtksxna": "Thanks @Golmote :). ",
    "wzup": "I have tried javascript in place of json. Plugin doesn't throw now, but it doesn't highlight json either:\nlet json = Prism.highlight('{\"a\": 10, \"b\": 20, \"c\": [10,20]}', Prism.languages.javascript);\nOutput:\n<pre class=\"pre_812 language-json\">\n    <code class=\" language-json\">{\"a\": 10, \"b\": 20, \"c\": [10,20]}</code>\n</pre>\n\n. With npm and webpack:\n$ npm install -S prismjs\napp@1.0.0 C:\\Users\\user\\app\n`-- prismjs@1.6.0\n  `-- clipboard@1.7.1\n    +-- good-listener@1.2.2\n    | `-- delegate@3.1.3\n    +-- select@1.1.2\n    `-- tiny-emitter@2.0.0\nComponent.js\nconst Prism = require('prismjs');\nstyles.scss\n@import \"prismjs/themes/prism\";\nHowever, I've managed to solve it. I've switched to javascript completely everywhere and it does highlights now. Probably it doesn't know json keyword or something:\n```\nlet sUser = JSON.stringify(this.props.user, undefined, 2);\nlet hUser = Prism.highlight(sUser, Prism.languages.javascript);\n\n```\n\n. ",
    "LucaJunge": "@LeaVerou There are no Error Messages in the \"Console\"-Tab of the Developer Tools in Chrome, but the js and css files are listed in the \"Sources.\"-Tab So I assume it gets loaded, but just doesnt run properly?. I solved it.\nFor everyone that has the same issue:\nIt was because I created the necessary pre's and code's inside a jquery $.each function, which doesnt seem to work.\nCreate them in another function. ",
    "stephenkeable-allies": "Chrome would sit stuck for a while, then eventually declare the tab has crashed and ask if you want to kill it. Without any messages in console.\nHowever awkwardly, when I tried switching the highlighting back on to get a screen recording, the problem has resolved itself, we had made a couple of changes to some invalid HTML elsewhere on our template. So that might have been the real cause.\nFeel free to close this issue and thanks for the response @CupOfTea696 . The odd thing was the invalid tags we fixed, existed on all other pages of the site as in header and footer.\nNot that it matters now as can't seem to reproduce, if it comes up again will let you know.\nThanks. ",
    "Sjoerrdd": "That doesn't work :/\n(https://gyazo.com/b56294adf1375aed6156ee056da3ad21). It doesn't work for me, the [dot] between paste and content (paste.content) is unexpected. . @haryratsimba thank You so much! It works :). ",
    "haryratsimba": "Hello, \nsomeone had a similar issue, using highlightjs which does a similar job as Prism (check the lastest answer from LinusBorg).\nI don't know if it's your case, but I guess you are updating your model (paste.content) from your Vue / Component instance and you are expecting the DOM to be updated and highlighted in the same time.\nThe problem is that Prism will update your model rendered value (raw string), then apply a lot of HTML transformations. Then VueJS won't be able to update the DOM. This is well described in the link I mentionned above : \n\n\nEither it's real HTML DOM elements, and Vue handles them (then {{content}} works),\nor it's supposed to be highlighted HTML markup, and highlightjs handles them underlying DOM elements that it needs to print it's highlighted text (then {{content}} won't work because highlightJS controls that DOM, not Vue).\n\n\nOne possible dirty solution is to update manually the DOM : \n\nWhen your model changes, replace your code element content with your model value\nHighlight your element on VueJS next tick\n\nEDIT:\nAn exemple of code is : \nwatch: {\n  // Note : paste.content is declared as string and assume paste is defined in Vue data\n  'paste.content': function(value) {\n    let editor = document.querySelector('#editor code');\n    editor.innerHTML = value;\n    this.$nextTick(()=> Prism.highlightElement(editor));\n  }\n}\nOne other option is to watch the paste object using the deep option which will help you to observe inner property change:\nwatch: {\n  // Observe paste instance defined in Vue data using the deep option\n  paste:  {\n    handler(value) {\n      let editor = document.querySelector('#editor code');\n      editor.innerHTML = value;\n      this.$nextTick(()=> Prism.highlightElement(editor));\n    },\n    deep: true\n  }\n}\nHope it will help you. Sorry, I bring some corrections. To watch paste inner property, the syntax should be 'paste.content': function(value)\nPlease check the previous edited answer.. ",
    "morissette": "Solved using updated property on component:\njavascript\n  var Post = {\n    data: function() {\n      var postData = {\n        post: ''\n      };   \n      var articleTitle = this.$route.path.replace('/', '');\n      fetch(getPostUrl + articleTitle, {method: \"GET\", cache: \"default\"}).then(\n        function(response) { \n          if (!response.ok) {\n            console.log(\"bad response from server\");\n          }                  \n          return response.json()\n        }).then(\n          function(responseData) {\n            postData.post = responseData;\n        }).catch(function(err) {\n          console.log(err);\n        });\n      return postData\n    },     \n    template: `\n      <div class=\"uk-card uk-card-body uk-card-default\">\n        <article class=\"uk-article\">\n          <h1 class=\"uk-article-title uk-text-center uk-text-uppercase\">{{post.title}}</h1>\n          <p class=\"uk-article-metadata uk-text-center\" v-show=\"post.author\">Written by {{post.author}} on {{post.timestamp}}</p>\n          <hr class=\"uk-divider-icon\" v-show=\"post.author\">\n          <p v-html=\"post.content\"></p>\n          <div class=\"uk-text-center\">\n            <div uk-spinner=\"ratio: 5\" v-show=\"!post.author\"></div>\n          </div>\n        </article>\n      </div>\n    `,     \n    updated: function() {\n      Prism.highlightAll();\n    }      \n  };. ",
    "sibiraj-s": "No @Golmote. I made this PR because there is an extra space . let me attach the screen shot too\nit is appending like this. and I checked that too \n<div class=\" language-markup\">\n    <pre class=\"foobar\"><code>&lt;div></code></pre>\n</div>. This is a plunker I showing it to test http://embed.plnkr.co/F77rcio6e4Cj5T0Pk2w3/\n\nI marked the extra space. ie., actually three spaces between class\n\nCheck this once.\n. yeah. i checked too.  My PR breaks the code.. @Golmote, @LeaVerou  . I heard that having extra space may cause problems during the class string manipulations. ",
    "Viiruus": "Hello @Golmote :-) thanks for your quick answer!\nI would like to highlight cURL request like Stripe does here.. Yes, I was testing with the bash language and you're right, it doesn't seem to be good enough.\nLook at my screenshot.\n\n. @Golmote I took a look at my previous code and I found a solution for the Bash language:\nI added this part of code to the prism.js library:\n```\nPrism.languages.insertBefore(\"bash\", \"operator\", {\n  \"api-key\": {\n    pattern: /(?:-u )([a-zA-Z0-9_]+)/g,\n    inside: {\n      \"request-flag\": /(^-u)/g\n    }\n  },\n  \"request-param\": {\n    pattern: /(?:-d )([a-zA-Z0-9]+)/g,\n    inside: {\n      \"request-flag\": /(^-d)/g\n    }\n  },\n  \"request-value\": {\n    pattern: /(?:=)(.*?)(?:\\n|\\)/g,\n    inside: {\n      operator: /(^=)|(\\$)/g\n    }\n  }\n})\nPrism.languages.insertBefore(\"bash\", \"number\", {\n  \"request-url\": {\n    pattern: /(?:^curl )(.*?)(?:\\n|\\)/g,\n    inside: {\n      operator: /(\\$)/g,\n      keyword: /(^curl)/g\n    }\n  }\n});\nand this part of SASS code (or CSS):\n.include-prompt code.language-bash:before\n  content: \"$ \"\n  color: #939da3\npre\n  margin: 0\n  padding: 20px 40px\n  background: #272b2d\n  border-radius: 5px\n  font-family: Source Code Pro,Menlo,monospace\n  font-size: 13px\n  line-height: 1.5em\n  font-weight: 500\ncode, pre\n  color: #d0d0d0\n  direction: ltr\n  font-family: monospace\n  text-align: left\n  white-space: pre-wrap\n  word-break: break-word\n  word-spacing: normal\n  -moz-tab-size: 4\n  -o-tab-size: 4\n  tab-size: 4\n  -webkit-hyphens: none\n  -moz-hyphens: none\n  -ms-hyphens: none\n  hyphens: none\ncode .token\n  &.cdata, &.comment, &.doctype, &.prolog\n    color: #777279\npre .token\n  &.cdata, &.comment, &.doctype, &.prolog\n    color: #777279\ncode\n  .namespace, .token.punctuation\n    color: #d0d4d7\npre\n  .namespace, .token.punctuation\n    color: #d0d4d7\ncode .token\n  &.constant, &.deleted, &.property, &.symbol, &.tag\n    color: #ebde68\npre .token\n  &.constant, &.deleted, &.property, &.symbol, &.tag\n    color: #ebde68\ncode .token\n  &.boolean, &.number\n    color: #77bcd7\npre .token\n  &.boolean, &.number\n    color: #77bcd7\ncode .token\n  &.attr-name, &.builtin, &.char, &.inserted, &.selector\n    color: #ebde68\npre .token\n  &.attr-name, &.builtin, &.char, &.inserted, &.selector\n    color: #ebde68\ncode .token\n  &.json-key, &.string\n    color: #c1ef65\npre .token\n  &.json-key, &.string\n    color: #c1ef65\ncode\n  .language-css .token.string, .style .token.string\n    color: #d0d4d7\n  .token\n    &.entity, &.url, &.variable\n      color: #d0d4d7\npre\n  .language-css .token.string, .style .token.string\n    color: #d0d4d7\n  .token\n    &.entity, &.url, &.variable\n      color: #d0d4d7\ncode .token.operator, pre .token.operator\n  color: #f099a6\ncode .token.json-string, pre .token.json-string\n  color: #d0d0d0\ncode .token\n  &.atrule, &.attr-value\n    color: #ebde68\npre .token\n  &.atrule, &.attr-value\n    color: #ebde68\ncode .token\n  &.api-key, &.request-url, &.request-value\n    color: #c1ef65\npre .token\n  &.api-key, &.request-url, &.request-value\n    color: #c1ef65\ncode .token.keyword, pre .token.keyword\n  color: #ebde68\ncode .token.request-flag, pre .token.request-flag\n  color: #d0d0d0\ncode .token.request-param, pre .token.request-param\n  color: #f099a6\ncode .token\n  &.important, &.regex\n    color: #ebde68\npre .token\n  &.important, &.regex\n    color: #ebde68\ncode .token.important, pre .token.important\n  font-weight: 700\ncode .token.entity, pre .token.entity\n  cursor: help\n```\nHope it will help someone \ud83d\ude04 . ",
    "chakrihacker": "Why not add this to PrismJS this would be an amazing PR. ",
    "ibrahimBeladi": "<pre><code class=\"language-java no-copy\"> ... </code></pre> , where the default is to include copy-to-clipboard\nOR\n<pre><code class=\"language-java copy-to-clipboard\"> ... </code></pre> , where the default is to exclude copy-to-clipboard\nBoth are equally good, feel free to work out on any of the two . ",
    "nickersonm": "Changed to https://github.com/PrismJS/prism/pull/1163. Usage: drag the scroll bar vertically by small amounts.\nMain branch: https://jsfiddle.net/d3L8nvjf/\nWith patched coy-style.css: https://jsfiddle.net/dbksxu0c/1/\nHowever, from reading other prism commits and comments, I realized that this removes the 'curved' dropshadow below the <pre> blocks (which are hidden at narrower sizes- expand the fiddle result window), inserted with :before and :after entities.  This is because the dropshadow is on the same layer as the background: the contents of the <pre>, and is also aligned to the <pre>.  I have not been able to find a good CSS-only solution to including both.\nIt would be possible by wrapping the <pre> in a <div> for the positioning (explained here), but that's not desired behavior.. Understood.  I committed a change to this pull branch that reverts to using the original overflow: auto on the <code> block and moves the background from the <pre> block to the <code>.\nIt seems to both scroll the background and preserve everything else, but I have not tested it as extensively.\nDemo: \nMain branch: https://jsfiddle.net/d3L8nvjf/\nWith patched coy-style.css: https://jsfiddle.net/dbksxu0c/1/ (auto-updated as it uses the raw nickersonm/patch-2 branch CSS)\n. ",
    "rbiggs": "Version 10.1.1 (12603.2.4). ",
    "mit-mit": "OK, thanks!. ",
    "oleksii-udovychenko": "@florinpop17 It worked nicely for me. Make sure you have <pre> and <code> tags rendered with correct classes. . ",
    "florinpop17": "What I did was to copy the entire JS file into my static folder, and use it from there... Not the most elegant thing to do.... ",
    "schwastek": "@megamindbrian both import 'prismjs' and require('prismjs') should work. They create Prism object.\nTo check if you are able to access the properties of the created Prism object, open the DevTools Console and type Prism (it's case sensitive). Initially, Prism.plugins is an empty object {}.\nEverytime you require Prism's plugin it injects itself into the Prism.plugins object. \nTake a look at prism-keep-markup.js file, line 7:\njavascript\nPrism.plugins.KeepMarkup = true;\nIn conclusion, this should work for you:\njavascript\nimport 'prismjs';\nimport 'prismjs/plugins/keep-markup/prism-keep-markup.js';\nMaybe you should check your bundler's paths - what directories are being searched when resolving modules and if the node_modules directory is being taken into account.. ",
    "benwiley4000": "This is a major bummer especially when using something like Spectacle/react-live which relies on Node prism for the client side. Any thoughts on improving this? :slightly_smiling_face: . I may be incorrect but I don't think this will work for the Node API (which react-live uses for rendering server and client side) because the plugins (line numbers, line highlight) rely on DOM attributes being present, and prism node doesn't operate on DOM elements.. Right. The issue is that most React based libraries including this one use the node variant of a library even for the client side because it fits much better into the way React renders. So more and more consumers of popular libraries like spectacle are going to be unable to take full advantage of Prismjs's client side capabilities, which is a shame. :/. ",
    "lunelson": "AFAICT currently some plugins are using Node's global object to pick up Prism and register the plugins. The following two work, but other plugins do not do this. Ultimately the best solution is probably to copy the body of the IIFEs in those files in to the file where you require Prism.\n```js\nglobal.Prism = require('prismjs');\nrequire('prismjs/plugins/normalize-whitespace/prism-normalize-whitespace');\nrequire('prismjs/plugins/data-uri-highlight/prism-data-uri-highlight');\nObject.keys(Prism.plugins); // [ 'NormalizeWhitespace', 'dataURIHighlight' ]\n```. ",
    "kachkaev": "Thanks a lot for this PR @zwilias! Just pinging here as it'd be great if you could respond to @Golmote's review. Looking forward to see elm highlighting in markdown-preview-enhanced atom & vscode plugins, which use PrismJS under the hood!\nPerhaps, someone else from the elm community could help here? I'm very new to this language :\u2013). @zwilias can I help with anything?. @zwilias would you be happy to address @Golmote's comments? So few bits are left to amend! \ud83d\ude80 \n. ping @zwilias \ud83d\ude4c . Many thanks @zwilias! \ud83d\udc4f  @Golmote do you think the PR can be now merged and produce a new PrismJS version?. ",
    "zwilias": "Put it on my todo list; I'll try to get back to this asap. Thanks for the reminder, @kachkaev, and so sorry for dropping the ball here, @Golmote. <3. Finally got around to cleaning up the patterns and fixing a few more bugs \ud83d\ude05 . Yeah, upon closer inspection, I think /'([^\\\\']|\\\\([abfnrtv']|\\d+|x[0-9a-fA-F]+))'/ will do - any single character (except ' itself) or an escape sequence which comes in a few forms. Thanks!. You're right, this is way overcomplicated. I adapted it from the haskell one; and I'm now realizing that - other than being overcomplicated - it's also wrong. Elm doesn't do multiline strings that way, but rather with \"\"\". Trying to figure out a good way to match either simple strings or multiline strings, which is slightly complicated by the latter being able to include single \". . Yep. I'm gonna have a look at the characters the actual Elm parser allows, which should allow me to scrap a few. I included the backtick stuff for compatibility with Elm 0.17 but I think there's no real point to doing that, especially with 0.19 coming close to release.\nI'll simplify, thanks :). \ud83d\udc4c . ",
    "Milania1": "Thanks for the review!\nI updated the regexes so that they are (a bit) shorter.. ",
    "MattewEon": "I made a pull request to fix this issue ! :). You're right, I didn't thought about checking in an existing plugin as it seemed to be important !\nSorry for this mistake . ",
    "ayumihamsaki": "@mAAdhaTTah I don't have clipboard.js installed on that website. Also I have prism running in the backend of a custom cms so I can't show you the URL.. Interesting points was not aware of needing Clipboard.js installed.\nActually I am running Chrome V63 see here:\n\n. ",
    "jakeNiemiec": "This was also a problem with webpack.\nThe problem was the same: use clipboard/lib/clipboard.js instead of the dist. This seems to be an issue with how they transpile.. ",
    "knyy": "Any chance your browser is Chrome v61?\nChrome v61 added a window.Clipboard which is probably causing a namespace collision with copyToClipboard plugin.\nI only got the error on Chrome v61, tested on Chrome v60 and v61.. ",
    "dmytrodemchenko": "Hi, \nThe same issue I got in the latest version of Chrome.\n[Version 61.0.3163.79 (Official Build) (64-bit)]\nScreenshot from devTool\n\n. ",
    "caraya": "I was having the same problem with Prism installed manually in a Wordpress theme. \nAdding clipboard.js explicitly solved the issue in Chrome 61 and Canary (63.0.3213.0). \n@mAAdhaTTah Chromestatus has an entry for Asynchronous Clipboard API. It also has a couple links to demos and docs.\nThe links point to an explainer and the proposal at wicg\nHope this helps\n. ",
    "nunos7": "In my scenario\n<script src=\"prism.js\"></script>\n<script src=\"prism-toolbar.min.js\"></script>\n<script src=\"copy-to-clipboard/prism-copy-to-clipboard.min.js\"></script>\ni just inverting the position of the copy-to-clipboard plugin to be the first one to be loaded, and problem solved!.\n<script src=\"copy-to-clipboard/prism-copy-to-clipboard.min.js\"></script>\n<script src=\"prism.js\"></script>\n<script src=\"prism-toolbar.min.js\"></script>\nHowever loading the plugin before the main component seems a bit strange...\nNS. ",
    "timhemendinger": "I added:\n$(\"<script />\", { type: \"text/javascript\", src: \"https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/1.5.8/clipboard.min.js\" }).appendTo(\"head\"); right after Prism = function () { in prism.js. \nIt's essentially the same thing as adding the clipboard script to <head> but I wanted to keep it contained to the script itself. . ",
    "ldemailly": "@timhemendinger I tried that but didn't get it to work - do you have a diff ?\n. ",
    "rwebster85": "If you're using PrismJS in a custom wordpress plugin, you can enqueue \"clipboard.min.js\" before you enqueue \"prismJS\" like so...\nwp_register_script( 'prismJS', plugins_url('/includes/prism.js',__FILE__ ));\nwp_register_script( 'clipboardPrismJS', 'https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/1.5.8/clipboard.min.js' );\nwp_enqueue_script('clipboardPrismJS');\nwp_enqueue_script('prismJS');. ",
    "eisbehr-": "Hello @Golmote \nBasically you're right, it's c++ (thats why I'm extending c++ in my example), but with other function, keyswords and constants. As you see in my example. Not a decent language, but used very often. If this not suit your needs, I'm fine with it. But other tools like highlight.js supporting it already.\nBut back to the problem: if you take a look into my example, you see in the result on the very top, that things like = are highlighted with a background color. I don't know why this happens and how I could change this.. I made you a shorter example, where you should see the problem easily.. Ha. Great. \ud83d\udc4d Typically user problem. \ud83d\ude09 \nThanks for the hint!\nSo you don't want a PR/to add this to prism, correct? Then I'm hosting it by myself.. Will do! \ud83d\ude09 . Done. https://github.com/PrismJS/prism/pull/1184. ",
    "jarrodek": "Thanks for quick response!\nWhen do you plan to make a new release? (more or less) Bower won't update the library unless it's released.. ",
    "agcolom": "@cferdinandi The PHP code is highlighted for me when I visit your page. I'm on Mac OS X 10.11.6 Chrome 61, Safari 9.1.2 or Firefox 55.0.3. @cferdinandi You're welcome :-) . ",
    "cferdinandi": "Well this is odd/embarassing. They work for me when I visit in incognito mode, or in a browser I don't typically use. Must be a Chrome caching issue. Apologies. Closing this one out.\nThanks for checking @agcolom!. ",
    "myst729": "If someone writes markdown code block without specifying the language, it fails.\n\n```\nsome unknown code here\n```\n\nNow I get rid of it by fallback to markup, any better ideas?\njs\nfunction (code, lang) {\n  return prism.highlight(code, prism.languages[lang || 'markup'])\n}\nBTW, I found highlight.js provides an \"auto\" method to predict the language.\n. ",
    "it-community": "Hello I have the same workarround\nThe issue is not on firefox, but only on chrome or opera.\nExample :\nhttps://www.sysadmin-community.com/remove-a-host-from-backuppc/\nOn firefox https://www.xulin-tan.de/post/19 => no problem\nOn chrome/opera https://www.xulin-tan.de/post/19 => only first code OK\nBest Regards. May be link to issue #1181\nFix in my side with \nwp_register_script( 'prismJS', plugins_url('/includes/prism.js',FILE ));\nwp_register_script( 'clipboardPrismJS', 'https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/1.5.8/clipboard.min.js' );\nwp_enqueue_script('clipboardPrismJS');\nwp_enqueue_script('prismJS');. ",
    "aeoril": "@Golmote Yes:\nhttps://aeoril.github.io/2017-08-19-center-animated-css-3D-cube-in-page-test.html\nGithub:\nhttps://github.com/aeoril/aeoril.github.io/blob/master/2017-08-19-center-animated-css-3D-cube-in-page-test.html\nI am using the Coy theme with it.. @mAAdhaTTah It is not the copy to clipboard functionality that is in question.  The syntax highlighting on the web page itself is the problem.  When I include that plugin, on Chrome on Android and only on Chrome on Android (of the ones I can try), the first code snippet is highlighted on my web page but the others are not.. I just verified it works fine on the native Android Internet browser.. @mAAdhaTTah @Golmote here is a screenshot:\n\n. Chrome version 61.0.3163.98 on my phone.\nYes, it works fine when I do not download the copy-to-clipboard plugin from the download page, but that also downloads the toolbar plugin automatically, and I deselected both in my testing to make it work.\nJust to be sure, you are able to reproduce this problem on your phone?\nI will try to get to further testing as you suggest above when I have time, but if you want to alter the code and test it yourself, everything is on my github repo:\nhttps://github.com/aeoril/aeoril.github.io. @Golmote @mAAdhaTTah It works fine for me on Chrome for Desktop.  What OS are you using for Chrome for Desktop?  What version of Chrome for Desktop?\nI can use the copy buttons fine, without any console errors in the dev tools.  Here is a screenshot of Chrome Desktop (Version 60.0.3112.113 (Official Build) (64-bit)) with that page up after a hard refresh (Ctrl-Shift-R):\n\n. @Golmote @mAAdhaTTah Adding the line you suggested above fixed the problem:\nhttps://aeoril.github.io/prism-troubleshooting.html. ",
    "dutchenkoOleg": "@mAAdhaTTah thx, That helped\nhtml\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/1.5.8/clipboard.min.js\"></script>\n. when it would be merged? i need it. Finally! thx!. ",
    "mattdsteele": "Yeah, that makes sense. Thanks for considering!. ",
    "jipexu": "yes it's seems to work .... yes it's work thank !. ",
    "sansSpoon": "Not a bug, it was my issue.. ",
    "frontenddojo": "Thank you Golmote. Solved the issue by using  tags.. ",
    "ianizaguirre": "I have this same issue and escaping it does solve the problem. But how come it works without having to escape the code when I test it on the test-drive page: http://prismjs.com/test.html . ?. ",
    "kvz": "Excellent, thanks so much for the quick fix \ud83d\udc4c \nWould that be 1.8.4? I just upgraded to 1.8.3 but noticed the same behavior still. Awesome! That fixed it:\u00a0https://transloadit.com/demos/video-encoding/encode-for-ipad/\u00a0:tada: :smile:\n--\nKevin van Zonneveld (kvz.io)\nCo-founder at Transloadit (transloadit.com)\nCore-author of tus (tus.io)\nOn 5 November 2017 at 17:41:16, Golmote (notifications@github.com) wrote:\n\nYes, it's 1.8.4. I just released it now.\n--\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/PrismJS/prism/issues/1204#issuecomment-341986612\n\n. Oops!! Very sorry about wasting your time!!. ",
    "erinwild": "@Golmote Done!. @Golmote Sure thing, I've added those changes now.. ",
    "nghuuquyen": "i waiting this PR, i have error on my product because this problem . @mAAdhaTTah Hi, Currently my solution for my product is remove your copy-to-clipboard plugin, so sad :( . But i hope it will work well later. ",
    "jcubic": "Great, thanks. Looking at the source code _.hooks.run('wrap', env); is called but result of it it's not returned by Token.stringify and it always return html.. It seems that numbers are correct and string regex don't match single quote string but symbols, so only function without arguments is not marked as function, will create PR.. Found another issue. In scheme there are no operators only functions and if you're adding function ** it's marked as operator and nothing (span without *&nbsp;). will create PR for this as well.. Found another 2 issues with scheme mode:\n strings in scheme can be multiline\n function name that start as keyword like define is not mark as function (to fix this the regex first need to check for function name and after if fail it need to check for keyword like define or lambda)\nExample:\nscheme\n(display (list->array '(1 2 3 \"foo\nbar\nbaz\")))\n(list 1 2 3)\non GitHub multiline strings works and list->array don't have list highlighted (on GitHub scheme syntax function names are black)\n\nissue can bee fixed by changing regex (if PrismJS don't split text with newlin before processing)\nissue may be problematic if keyword is processed by prism before processing functions (maybe using negative look ahead with space or ) will solve the issue).. I can create PR with the fix. Last one was not merged, @Golmote did you notice it?. Updated the tests. Updated the code as requested, tests are passing (it seems that travis is enabled only on gh-pages).. \n",
    "wyl320": "this is my code . \n<!DOCTYPE html>\n html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>html</title> \n<link href=\"prism.css\" rel=\"stylesheet\">   \n<script src=\"prism.js\"></script>\n</head>\n<body>\n   <pre class=\"line-numbers\" data-line=\"6\"  ><code class=\"language-css\" class=\"line-numbers-rows\">\n    function k(v) {\n        return v.replace(/&/gm, \"&amp;\").replace(/</gm, \"&lt;\").replace(/>/gm, \"&gt;\")\n    }\n    function d(v) {\n        return Array.prototype.map.call(v.childNodes,\n        function(w) {\n            if (w.nodeType == 3) {\n                return b.useBR ? w.nodeValue.replace(/\\n/g, \"\") : w.nodeValue\n            }\n            if (t(w) == \"br\") {\n                return \"\\n\"\n            }\n            return d(w)\n        }).join(\"\")\n    }\n   </code></pre> \n</body>\n</html>. ",
    "Tynael": "I tested on Google Chrome Version 61.0.3163.100 (Official Build) (64-bit) , Mozilla Firefox 56.0.1 (64-bit) on Windows 10.\n\nOn my iPhone 6 on the latest Google Chrome and Mozilla Firefox builds, the syntax highlighting works ok.... There are no errors in the console. I even tried different (and the default) WordPress themes but without success, the syntax highlighting is not working on Desktop (at least for me and other people I've asked to also check out this issue).\n@mAAdhaTTah what URL are you referring to?. @Golmote I'm a bit newbie here and I'm not quite sure I understand. If the PrismJS loads synchronously, why does it work only on Mobile version of the website and not on Desktop too?\nHow do I manually call Prism.highlightAll() manually once it's loaded?. Thanks for the clarification.\nI am using add_action() and wp_enqueue_scripts to load the Prism .js and .css file into my child-theme like this:\n```\n function add_prism() {\n    wp_register_style('prismCSS', get_stylesheet_directory_uri() . '/css/prism.css');\n    // Register prism.js file\n    wp_register_script('prismJS', get_stylesheet_directory_uri() . '/js/prism.js');\n    // Enqueue the registered style and script files\n    wp_enqueue_style('prismCSS');\n    wp_enqueue_script('prismJS');\n}\nadd_action('wp_enqueue_scripts', 'add_prism'); \n``\nI will try and see if I can use Async with enqueue.. All right, thank's to @Golmote comment here is what I've done.\nI couldn't find a proper solution to use Async withwp_enqueue_scriptsso I've done the following:\n1. Create a new JS file in thejschild-theme folder\n2.  Add this JS code to the newly created JS file(function($) {\n    Prism.highlightAll();\n})(jQuery);3. Load the newly created JS file withwp_register_script('testJS', get_stylesheet_directory_uri() . '/js/test.js');`\nNow the Prism.highlightAll(); will be called when the DOM has been loaded.\nI don't know if this is the most elegant solution but at least it works for now.... ",
    "fourjr": "Okay thanks! . ",
    "troglotit": "@astoilkov I had a wish of finishing it, but I was quite busy. I'd gladly hand this PR over if you wish to work on it, so open PR with pinging this PR, so I'd close this one.. ",
    "tkjone": "@astoilkov Do we know if any progress has been made on this PR or getting clojure support in Prism?  If not, I am happy to take a stab at this.. Requested updates should be resolved in #1311  . @Golmote Thanks for the review!  Let me know what you think \ud83d\udcaa . Resolved. Resolved. I added about 70 new keywords here - a lot of the ones that were posing issues when I was testing e.g. <= and >=.  I am happy to fill out the rest, but I have a high degree of confidence that the ones I did not include will pass \ud83d\ude09 . Finished \ud83d\ude0c . ",
    "martin-badin": "Hi, good, it should be enough.. ",
    "jan-dh": "Aha, i see, any way to combine this with the line-numbers and command-line plugins? The first way: \n\nInstead of using <pre><code> elements, use <script type=\"text/plain\">\n\ndoesn't seem to work with the line-numbers. The second way: \n\nUse a HTML-comment to escape your code \n\ndoesn't seem to output anything . Was markup issue on my side, thx for the examples. ",
    "landzup": "I tried to read all the tokens available to the library with the following snippet:\nfor (var lang in Prism.languages) {\n    console.log('-----' + lang + '-----');\n\n    for (var tokenName in Prism.languages[lang]) {\n        console.log(tokenName);\n    }\n}\nDoes it represent all the tokens used in the highlighting by Prism.js?\nIf yes, it would help in hacking the CSS as well.. > Is that true? Do we have cases where a language is not wrapped into a language-specific class?\nYes, it is.\nHTML tokens inside PHP code are not marked with the language-html class.\nFor instance, a HTML tag is marked as\n.language-php .token.tag\ninstead of\n.language-html .token.tag\nor, to give more specificity to CSS selectors\n.language-php .language-html .token.tag\n\nIs that an issue? In Prism, we consider PHP as the \"parent\" language here. PHP code usually might contain HTML code. While the opposite is not true. HTML code can appear with many server-side languages and templating languages.\n\nYes, it is an issue, because Prism.js is not associating a coherent style to the same token.\nI don't mind if a HTML tag is in a standalone HTML code or in a HTML code embedded into PHP.\nIt has the same logic value.\nInstead you are subduing its style to the process it has to pass to become a HTML tag.\nBrowsers do not care if it was generated from PHP, Ruby, Pascal or Fortran. They parse it always the same way, as a HTML tag.\nAnd users too would like to see tokens coherently styled with their final logic role apart of the pre-process, just like browsers.\nIn the end, considering PHP the parent language should not prevent the syntax highlighter from giving the HTML tokens the same style, apart of the preprocessor they are wrapped into.. I tested it and works perfectly, thanks very much!. ",
    "benjaminBrownlee": "I accidentally opened another issue on this very topic, but I wanted to say that I agree with @landzup. I find nested languages lacking proper syntax rather annoying. However, I am no authority to speak on how to improve this. My only guiding question could be is how does the way this library is structured different from in browser IDEs (such as my favorite cloud9) who have these code markup capabilities?. I realize that this is an already open issue here: #1218.. ",
    "mxstbr": "Hm, interesting. Sorry for the noise then, must be an issue on my side!. Thank you so much for that in-depth review!\nThe latest commits clean everything up apart from 3. and 4.\u2014I'm not entirely sure where to put that util and how to use it. Would you mind quickly implementing that? You'd be much faster than me \ud83d\udc4d  . Actually, this does not correctly highlight CSS, right? \ud83e\udd14 . I mean, the CSS part inside the tagged template strings is not highlighted as CSS:\nJS\nstyled.button`\n  color: blue;\n`\nIt is treated as a string, rather than as CSS. At least in the tests?. Oh yeah sorry, I totally messed that up \ud83d\ude05 \nThank you! :pray:. @mAAdhaTTah if anything, it should be part of JSX since it is React-specific. What would you think about that? \nHappy to resolve the conflicts tomorrow if we can agree on moving this to JSX!. That specific RegExp does not correctly match\nJS\nstyled(Button)`\n  background: red;\n`\nResults in this test failure:\n```\n  1) Testing language 'javascript' \u2013 should pass test case 'styled-components_feature':\n  + expected - actual\n\n       \"punctuation\"\n       \")\"\n     ]\n     [\n  -    \"template-string\"\n  +    \"styled-components-template-string\"\n       [\n         [\n           \"string\"\n  -        \"`\\n  background: red;\\n`\"\n  +        \"`\\n  background: red\"\n         ]\n  +      \";\"\n  +      [\n  +        \"string\"\n  +        \"\\n`\"\n  +      ]\n       ]\n     ]\n\n```. ",
    "acegilz": "Thanks @Golmote .\nIt worked :). ",
    "lukewhitmore": "Would be very useful for .NET FE projects. ",
    "Ma-XX-oN": "Hmmm. Ok, looks like extending the language is pretty easy.  I'll give it a go.  The doc should be fixed though.  Thanks. :). I've been testing this out with my blog.  While trying to make a smaller test case, it would seem that I'm getting inconsistent results.  Does the code that I have downloaded refer to code outside that which I downloaded?  Sometimes it is working and sometimes it isn't.  Just refreshing is causing this behaviour to be random.. So it doesn't reference anything outside?  Then I'm at a loss.  Now seems to be working with what was documented and doesn't work with what I'm saying.  Very weird.. When I define a struct or macro and I don't want to forcibly state that the defined struct or macro is a type or macro.\nExample:\n```\ndefine BLAH 1\nstruct foo\n{\n  int bar;\n  foo(int bar) : bar(bar) {}\n};\nint main()\n{\n  return foo(BLAH).bar;\n}\n``\nI'd wantfoo` to be coloured the same as int (or maybe different).  I'd also want BLAH to be coloured different.. Barring a two scan process, maybe have some way to indicate tokens take on particular class type?  Perhaps one or more attributes in the <code> tag or some parent (thus removing the need to repeat myself for a group of source snippits)?. That is why I suggested the second option.. Hi @Golmote,\nCan you give me a location?  Or how you found that this was so, so that I can find this issue?\nAre you referring to the one located here: http://adrians-musings.blogspot.ca/2017/11/c-templates-how-to-effectively-and.html on line 617?  That came with the theme template.  I didn't make that.  I've commented it out and I don't see any difference so thanks for diagnosing the issue.. One other thing:\n\nIf you notice, the numbers are slightly higher then the line it is referring to.  It is very noticeable on the bottom, but is also there on all of the other lines.  Also the vertical line is also too high, probably due to the same reason.  What's gong on?. Seems to be better:\n\nThough I think it might be better down one or more more pixels.. Oh, you're right.  Nm.  Thanks.\nWhy did I need to add a \"display: block on the selector pre.line-numbers > code\".  Is the CSS from my blog interfering with the one for the line numbers?. ",
    "aolin480": "I was actually able to get this going using the following code below. I had to turn off the greedy variable in the string object in Prism.languages.javascript because it was only highlighting the first template tag and not the others. Not too sure what repercussions are to doing that, but it works.\nHere's the code I used to get it to work\n```\n    Prism.languages.insertBefore('javascript', 'comment', {\n        'mergetag':  {\n            pattern: /({#.*?})/g\n        }\n    });\nPrism.languages.javascript.string.greedy = false;\n\n```\nNow it wraps my custom template tags with a mergetag token.\n. The template tags are getting replaced later, however I am building an interface which shows code and the merge tags, a user has input(s) which when typed it changes out the merge tag with the typed out value. It kind of shows them in real time what variables they are replacing . Thanks @Golmote! Yeah, this is what I am using Prism for. I love it, and it's super simple. Was just a small hurdle, and I think I am good now. Great library! http://recordit.co/x4EiNSrNwz. ",
    "xliiv": "I did this..\nupdate(code, lineNumber, lang) {\n        var myNode = this.shadowRoot.querySelector('code');\n        var html = Prism.highlight(code, Prism.languages[lang]);\n        Prism.hooks.run('complete', {\n          code: html,\n          element: myNode\n        });\n        myNode.innerHTML = html;\n     }\nbut still fails.. However some shade appeard. Am i doing it ok?\nHere's the visual effect..\n\nBTW: i'd like to use line-highlighting plugin either.. Final version:\nupdate(code, lineNumber, lang) {\n        var myNode = this.shadowRoot.querySelector('code');\n        var html = Prism.highlight(code, Prism.languages[lang]);\n        this.$['formatted-src'].innerHTML = html\n        Prism.hooks.run('complete', {\n          code: html,\n          element: myNode\n        });\n      }\nwhich works.\nThanks @Golmote :)\nHow can I add to the current code another plugin: line-highlighting. The gray box is caused by line-highlighting or my code using it :)\nHere's picture\n\nI'll debug it.. This line\nvar lineHeight = parseMethod(getComputedStyle(pre).lineHeight);\ngives me\nNaN\nbecause\ngetComputedStyle(pre).lineHeight == normal\nI'm looking deeper.. .\nUpdate:\nI don't know why but styles are different.\npre styles in working version:\n\npre styles in broken version:\n\n. I don't. However It's present in my project.\nTo be specific.. if I remove this shameful code:\nhttps://github.com/xliiv/callspect/blob/master/viewer/callspect/static/src-code.html#L32-L34\nI'll get NaN, I'll bet it's related to shadowDom.. ",
    "jlmakes": "I spy {\\.{3}\\w+\\} in /components/prism-jsx.js on line 6. Really appreciate the fix @Golmote, hyper merci. ",
    "freakmaxi": "Oh my god, I'm so sorry. I didn't realize that there is a format for examples. \ud83d\ude1e I'm fixing it immediately. . I thank you for your interest and cooperation. That was a pleasure for me \ud83d\udc4d. ",
    "mrgrt": "This seems to be an issue again. Can't see the copy to clipboard on the demo page - https://prismjs.com/plugins/copy-to-clipboard. ",
    "bazooka07": "Yes, you are right. I fix my PR\nvar script = document.getElementsByTagName('script');\n    script = script[script.length - 1];\n    var languages_path = 'components/';\n    if(script.hasAttribute('data-autoloader-path')) {\n        var path = script.getAttribute('data-autoloader-path').trim();\n        if(path.length > 0 && !/^[a-z]+:\\/\\//i.test(script.src)) {\n            languages_path = path.replace(/\\/?$/, '/');\n        }\n    } else if (/[\\w-]+\\.js$/.test(script.src)) {\n        languages_path = script.src.replace(/[\\w-]+\\.js$/, 'components/');\n    }\n    var config = Prism.plugins.autoloader = {\n        languages_path: languages_path,\n        use_minified: true\n    };\n@mAAdhaTTah \nIf the test is broken, we fallback into the initial value.\n@Golmote \nWe rejected data-autoloader-path beginning with \"http://\", ... for security reason.\na '/' is added at the end if missing.. I'm not an expert about Git and I don't know how to resolve this conflict.\nSomebody updates the gh-pages branch just an hour before I pushed my pull-request.\nSo I do the following commands :\ngit checkout gh-pages\ngit pull upstream gh-pages\ngit checkout autoloader-path1\ngit rebase gh-pages\nBut at last, I have a conflict with prism-autoloader.min.js. Even, if I launch gulp.\nCan somebody help me ?\nIf not, I have to create a new branch.\n. ",
    "kwesterfeld": "It may be the case that the prismjs package.json should not specify the jspm registry, when itself is not in the jspm registry:\n\"jspm\": {\n    \"main\": \"prism\",\n    \"registry\": \"jspm\",\n. ",
    "aluanhaddad": "Thanks @kwesterfeld I added a mapping in the JSPM registry for clipboard. PrismJS is now installing without incident for me.. ",
    "kzurawel": "Thanks for the feedback, I think I've addressed everything.. ",
    "BlueCocoa": "Hi, I've made some modifications and I decided to keep this as a standalone language after digging into its docs. Because IchigoJam uses a very small set of basic and introduces its own markers.. Yes, based on its docs and real code, commands starting with REM  is all comments, no space required.\nAnd the regex (?:.*)? is my mistake, I'll correct it in the next commit.. I'm so sorry for the regexp, I'm not quite familiar with it. And thank you for your advices, I'm going to change it to the pattern below.\n/(?:\\b|\\B[.-])(?:\\d+\\.?\\d*)(?:E[+-]?\\d+)?|(?:\\B`[01]+)|(?:\\B#[0-9A-F]+)/i. Yes, I forget the punctuation part and I'll just fix it in the next commit.\nThank you for your time on checking all these mistakes and providing the detailed suggestions.. Okay, I'm going to do a double check for all the parts before the next commit.. ",
    "scratchyone": "Thanks! I'll do that the next time I use prism.\nOn Jan 16, 2018 2:56 AM, \"Golmote\" notifications@github.com wrote:\n\nHi! You can change the wrapping behaviour in Prism by simply overriding\nthe white-space CSS property on  and  tags.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismJS/prism/issues/1247#issuecomment-357880204, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AK8oJftau21GMjTSeG-KOFUSWi3Ht70wks5tLFYVgaJpZM4Q-Tpt\n.\n. \n",
    "GrahamHannington": "Thanks very much for the informative reply.\nI've edited the regexes as you suggest, except, so far, for the arrays: I'm going to cogitate over that. I'm torn between the readability (as far as regexes can be considered to be readable) of the arrays (matching distinctly different forms of syntax) versus performance.\nRegarding coining new tokens: I've shown the styled results to a few experienced JCL users, and, while they like the idea of the highlighted syntax, they're not thrilled with the colors used for the \"less-semantic\" classes in the default Prism theme; in particular, red or reddish colors. Many JCL users will only ever have seen JCL syntax highlighted in the native z/OS ISPF text editor, as displayed in a terminal emulator such as IBM Personal Communications (\"PCOMM\"); to such users, other color schemes might look odd. For now, partly because I don't have much time to spend on this, for my local repo, I will continue to use bespoke, semantically appropriate class names for styling. Another reason: I want more variety. For example, JCL supplied with a product often includes \"placeholder\" values (to be replaced with actual values) that, by convention, are <enclosed in angle brackets> (similar to an XML start tag):\nJS:\n\"placeholder\": /<.+>/m,\n\nCSS:\n.token.placeholder {\n  color: slategray;\n  background-color: #FFFF90;\n}\n\nFinally, for now: I will admit this is entirely my problem, but I thought I'd share this \"noob\" experience with you...\nI am not, primarily, a JavaScript developer. I have dipped into JavaScript every few years since the early web browsers (with increasing frequency, especially since node.js arrived). Web workers are new to me. This caused me some head-scratching when I added the JavaScript definition of the JCL language via a <script> element following the <script> element for prism.js. I am embarrassed to admit that it took me nearly an hour to realize that, since I had chosen to perform highlighting asynchronously, that meant using web workers, which in turn meant (if I understand this correctly; I might not) that my language definition needed to be included in prism.js. Before that realization, I spent some time questioning my own understanding of script execution order.\nWhy am I bothering telling you this? Perhaps in case other noobs report similar issues; perhaps, they, too, might be trying to put their own language definitions in a custom script, heeding\u2014without fully understanding\u2014the instructions about not editing prism.js, and then attempting to apply async highlighting. (Also: perhaps in case my explanation is entirely wrong!). ",
    "rquast": "My apologies. I seem to have gotten confused thinking that the problem happened on your site when it didn't. The screenshot horizontal overflow is caused by something further up on your page, and isn't like my problem. I must have some kind of reset or something that's causing an issue. Sorry for bothering you. . ",
    "ZhouHansen": "I'm using a browserify style transform sheetify, now:\njs\nvar css = require('sheetify')\ncss('prismjs/themes/prism.css')\nafter add attribute \"style\": \"themes/prism.css\":\njs\nvar css = require('sheetify')\ncss('prismjs')\nsheetify \"resolves\" module that targets CSS instead of JavaScript by the style attribute.. ",
    "Banou26": "Yeah, that's what i thought so too, thanks. ",
    "ORESoftware": "import * as Prism from 'prismjs';\nthat should work. I also tried this:\nhtml\n    <mat-card-content>\n      ZOOM\n      <div class=\"language-js\" [innerHTML]=\"muchoCodo\"></div>\n    </mat-card-content>\nI added a class to the div, but that didn't change anything. So I get this error when loading this CSS:\n\n```css\n/ PrismJS 1.9.0\nhttp://prismjs.com/download.html?themes=prism-solarizedlight&languages=markup+css+clike+javascript /\n/*\n Solarized Color Schemes originally by Ethan Schoonover\n http://ethanschoonover.com/solarized\nPorted for PrismJS by Hector Matos\n Website: https://krakendev.io\n Twitter Handle: https://twitter.com/allonsykraken)\n*/\n/*\nSOLARIZED HEX\n\nbase03    #002b36\nbase02    #073642\nbase01    #586e75\nbase00    #657b83\nbase0     #839496\nbase1     #93a1a1\nbase2     #eee8d5\nbase3     #fdf6e3\nyellow    #b58900\norange    #cb4b16\nred       #dc322f\nmagenta   #d33682\nviolet    #6c71c4\nblue      #268bd2\ncyan      #2aa198\ngreen     #859900\n*/\ncode[class=\"language-\"],\npre[class=\"language-\"] {\n    color: #657b83; / base00 /\n    font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n    text-align: left;\n    white-space: pre;\n    word-spacing: normal;\n    word-break: normal;\n    word-wrap: normal;\nline-height: 1.5;\n\n-moz-tab-size: 4;\n-o-tab-size: 4;\ntab-size: 4;\n\n-webkit-hyphens: none;\n-moz-hyphens: none;\n-ms-hyphens: none;\nhyphens: none;\n\n}\npre[class=\"language-\"]::-moz-selection, pre[class=\"language-\"] ::-moz-selection,\ncode[class=\"language-\"]::-moz-selection, code[class=\"language-\"] ::-moz-selection {\n    background: #073642; / base02 /\n}\npre[class=\"language-\"]::selection, pre[class=\"language-\"] ::selection,\ncode[class=\"language-\"]::selection, code[class=\"language-\"] ::selection {\n    background: #073642; / base02 /\n}\n/ Code blocks /\npre[class*=\"language-\"] {\n    padding: 1em;\n    margin: .5em 0;\n    overflow: auto;\n    border-radius: 0.3em;\n}\n:not(pre) > code[class=\"language-\"],\npre[class=\"language-\"] {\n    background-color: #fdf6e3; / base3 /\n}\n/ Inline code /\n:not(pre) > code[class*=\"language-\"] {\n    padding: .1em;\n    border-radius: .3em;\n}\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n    color: #93a1a1; / base1 /\n}\n.token.punctuation {\n    color: #586e75; / base01 /\n}\n.namespace {\n    opacity: .7;\n}\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.constant,\n.token.symbol,\n.token.deleted {\n    color: #268bd2; / blue /\n}\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.url,\n.token.inserted {\n    color: #2aa198; / cyan /\n}\n.token.entity {\n    color: #657b83; / base00 /\n    background: #eee8d5; / base2 /\n}\n.token.atrule,\n.token.attr-value,\n.token.keyword {\n    color: #859900; / green /\n}\n.token.function {\n    color: #b58900; / yellow /\n}\n.token.regex,\n.token.important,\n.token.variable {\n    color: #cb4b16; / orange /\n}\n.token.important,\n.token.bold {\n    font-weight: bold;\n}\n.token.italic {\n    font-style: italic;\n}\n.token.entity {\n    cursor: help;\n}\n``\n. @Golmote yes that was it! thanks..I was using",
    "the1mills": "Ok thank you. ",
    "paul-hammant": "OK, I see that it is halfway there already - http://prismjs.com/download.html?themes=prism&languages=markup+clike+javascript+csharp+ruby+java+python&plugins=line-highlight+file-highlight+toolbar+highlight-keywords - but \"?\"  implies a server-side operation, whereas \"#\" can mutate safely on the client side as the end user clicks - right?. Good work, @Golmote :). ",
    "iwasherefirst2": "Thank you! That is a great feature!. ",
    "davidgatti": "Nice, it did work. In this case I have the same question for the test.html file. How can I make it work with the language? I did try to look for a test.js file, but didn't find any. It seams that the utopia.js plays a role here, but I'm not sure how. I'd love if you could drop me a hint :). \nYes, I'm sharing a screenshot to show you also the surroundings. And if this turns out to be OK, could you give ma hint to see how could I debug this? Meaning how can I see if my regexp are working?. OK, cool. Soo.. in this case lets point to my amazing ;) work, and if you could take a look and see what maybe I'm missing, it id be very grateful. \nThis is what I did: https://github.com/templarbit/prism/blob/CSP/components/prism-csp.js. The goal is to add new keyword related to CSP.. OK, another thing that I did is to just copy and paste the content of for example prism-makefile.js in to what I did and see what happens. Sadly no reaction. If I choose the makefile option on the HTML itself. My text becomes green. But if I select CSP with the exact same content of the Makefiel rules, nothing. \nWhen I click on the CSP radio-button, I see in the inspector that the right file is loaded.\n\nAs you can see from this screenshot. End no errors to be seen. . Ehh \u00af_(\u30c4)_/\u00af, I made it work... I just rewrote the rule, and it started coloring. Sorry for this long issue. . Never mind, I had a problem with the regexp. Sorry for bothering.. ",
    "dragokas": "Thanks a much, it is fixed now.. ",
    "JarboU": "| Date  |  Name |  Pay |  $ |\n| ------------ | ------------ | ------------ | ------------ |\n| 2017-11-09  | Dawei| WEIXIN  |  18.8 |\nLike this Markdown syntax, the output is a table\uff1b. | Date|  Name |  Pay |  $ |\n| ------------ | ------------ | ------------ | ------------ |\n| 2017-11-09  | Dawei  | WEIXIN  |  18.8 |. How to use prism.js implementation one\uff1f. ",
    "isc30": "Hi!\nI thought that minifier was running on merge. I'll update the tests + min versions.. I don't understand why gulp isn't updating prism.js in this PR but it does for the other one: \nhttps://github.com/PrismJS/prism/pull/1272\nplease check it before merging. ready. ",
    "evanplaice": "OK. I'll update the PR as soon as I get back to my computer.. ",
    "fyrkant": "Ok, I'll remove the tsx stuff from this one and a separate PR for that! \ud83d\udc4d . Removed tsx from this one and opened up a new PR with only tsx! . Hmm, should I not include the show-language file? . Ah sorry about the example and components order, you already told me that\nonce! \ud83d\ude05\nOn Sat, 3 Feb 2018 at 12:25, Golmote notifications@github.com wrote:\n\n@fyrkant https://github.com/fyrkant Could you add an example file for\nTSX, following the format used in existing examples\nhttps://github.com/PrismJS/prism/tree/gh-pages/examples?\nAlso, could you please move the component up in the components.js file,\nso that the alphabetical order is based on the title value instead of the\nkey. I know this is kinda counter-intuitive, but it's the way we did with\nJSX, so let's keep it consistent.\nFinally, you need to merge/rebase the gh-pages branch to fix the\nconflict. Your branch is a few commits behind, and the Show Language plugin\nhas been modified in b08cae5\nhttps://github.com/PrismJS/prism/commit/b08cae5603ac0a594814e7c88e9fa60f001cf00c\n.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismJS/prism/pull/1280#issuecomment-362799285, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AIQTIXxFKL_H_DGAr63q2APW7L-EKn9uks5tREIbgaJpZM4R32t8\n.\n. Rebased, fixed components.js order and add example file!. Fixed it!. \n",
    "webmix": "Hi @mAAdhaTTah \nThanks for your answer\nWhile preparing a live example for you, the problem disappeared.\nI'm on big node project, so obviously something else is interfering here.\nI will investigate in my side, and let you know what's going on here, if it can help somebody else\nthanks. ",
    "wrayzheng": "Of course. Check out this post. Or this post.. It works. Thanks a lot!. ",
    "MaxCCC": "@mAAdhaTTah Well, I found this example (same theme): https://dreyacosta.com/functional-javascript/\nOr you can also clone the repo of lvthillo and zip it. run ghost in docker: docker run -d -p 80:2368 ghost, go to localhost/admin and upload the theme + configs of above. I'm looking now if I can put it online easily\n. @Golmote @mAAdhaTTah Thanks, so this means it will be fixed in a next version of prismjs? 1.11.1 already or not? Thanks for the replies.. @Golmote @mAAdhaTTah Okay, thanks for the info. You can close this.. ",
    "bobby-brennan": "Managed to pare it down a bit. The above confFile string has length 12473. \nHere's one where length is 150, and takes 3-4 seconds to finish highlighting:\njson\n{\n  \"confFile\": \"r\\\" \\r\\n\\t     \\t\\t\\tverticalAlign=\\\"middle\\\" horizontalAlign=\\\"center\\\" \\r\\n\\t     \\t\\t\\tincludeInLayout=\\\"false\\\"\\r\\n\\t\\t\\t\\t    width=\\\"100%\\\" height=\\\"100%\\\" >\\r\\n\\t\\t\\t\\t    <Space\"\n} \nHere's one where length is 484, and never completes (window freezes after 1m or so):\njson\n{\n  \"confFile\": \" id=\\\"movieName\\\" styleName=\\\"movieName\\\" width=\\\"100%\\\" text=\\\"{mediaProxy.entry.name}\\\" dynamicColor=\\\"true\\\" color1=\\\"14540253\\\" font=\\\"Arial\\\"/>\\r\\n      </HBox>\\r\\n      <Canvas height=\\\"100%\\\" width=\\\"100%\\\" id=\\\"PlayerHolder\\\" styleName=\\\"black\\\">\\r\\n        <Video id=\\\"video\\\" width=\\\"100%\\\" height=\\\"100%\\\" mantainAspectRatio=\\\"false\\\"/>\\r\\n        <VBox id=\\\"offlineMessageHolder\\\" \\r\\n\\t     \\t\\t\\tverticalAlign=\\\"middle\\\" horizontalAlign=\\\"center\\\" \\r\\n\\t     \\t\\t\\tincludeInLayout=\\\"false\\\"\\r\\n\\t\\t\\t\\t    width=\\\"100%\\\" height=\\\"100%\\\" >\"\n}\nIf I call .replace(/\\r\\n/g, '') OR .replace(/\\t/g, '') on the string, it returns right away. If I call .replace(/\"/g, ''), it takes a few seconds but eventually returns.\nAlso, here's the highlight code:\njs\nPrism.highlight(JSON.stringify(obj), Prism.languages.json)\nHope that helps.. One more note:\nOn the giant example above (12473 chars), replacing both \\r\\n AND \\t fixes the issue, but neither one alone fixes it.. Updating to 1.11.0 fixed it, thanks!. ",
    "markcaron": "https://www.regexpal.com/?fam=102376. I will update to make sure. I couldn't replicate it on the test page either. When I compared the new version with my version (which is older), the comment regex for \"clike\" was identical, so it appeared--to me at least--like this was still an issue.\nThanks for helping out. I'll update and test to make sure it was just me!. @Golmote that was the issue. Thanks for the heads up!. ",
    "pixelass": "Seems there was a tear in time.\nThe problem disappeared. . ",
    "m-allanson": "Great stuff, thanks @Golmote! . ",
    "etetlow": "If you go to http://con.etetlow.co.uk and go to documentation, either the third white dot down or if you click the hamburger you'll see it. When it loads you'll see the line-numbers all bunched up together. If you then refresh the page it'll come directly from that page and the numbers are all fine, so all I need is a way to call line-numbers to reload it on the ajax load.\nThanks.. I moved the call to Prism.highlightAll() until after the element fadein and the result stays the same. I don't think that Prism.highlightAll() covers the plugins because normalize whitespace also didn't work until I added \nPrism.plugins.NormalizeWhitespace.setDefaults({\n    'remove-trailing': true,\n    'remove-indent': true,\n    'left-trim': true,\n    'right-trim': true\n});\nIs there anything similar to refresh line-numbers because I'm sure that's what's needed. I looked through the plugin and tried a few things but unfortunately without success. . I've got it working now but had to put it on a delay before calling. Thanks for your help.. ",
    "JuanCaicedo": "I'll try to post an example soon of this working. You can see some of the highlighting at https://prism-emacs-ogfsnjvwlg.now.sh/post. @Golmote Thanks for the feedback! I'm having some trouble understanding the tests. I'll upload here with some comments on what I'm having trouble with.\nI think the renamings I made will cause the previous comments to appear outdated. I'm adding this here as a reminder that they still need to be addressed. @Golmote I've made some updates in this PR to address your comments, let me know what you think!. @paladox Would love to do some work to get this wrapped up, but I've been busy with some other coding project over the past few weeks. I plan to get to it over the next few days \ud83d\ude03 . @Golmote sorry for the delay, I'm working through these changes now \ud83d\ude00. @Golmote I fixed the merge conflicts and addressed the majority of the code comments (sorry for the accidental style changes \ud83d\ude2c)\nI'm working on trying to combine the regexes you mentioned. I'm finding it difficult though, so if it's okay to merge this without doing that, let me know \ud83d\ude00. @Golmote I've updated based on your last comments \ud83d\ude00. I'm not sure if I should be the owner, since I didn't develop this. Totally willing to defer to @akirak if they would like to take it over \ud83d\ude00. This leads to a failure which I don't understand\n```\nToken Stream:\n[[\"string\",[\"\\\"\\\"\"]],\"\\r\\n\\\"foo\\\\r\\nbar\\\"\"]\n\nExpected Token Stream:\n[[\"string\",[\"\\\"\\\"\"]],[\"string\",\"\\\"foo\\\\r\\nbar\\\"\"]]\n\n. My impression is that the second case is not recognized as a string. I'm not sure if it's a problem I'm how I'm writing the test cases or in the implementation. I'm inclined to assume the implementation is right and my testing is wrong. If so, maybe the problem is that listing strings like this isn't valid lisp. Maybe the test tokens could me changed tolisp\n(\n\"\"\n\"foo\nbar\"\n)\n```. I think multiline feeds are supported, I say that because this is a valid function definition\nelisp\n(defun multiply-by-seven (number)\n       \"Multiply NUMBER by seven,\nsecond line\"\n       (* 7 number)). Lots of changes in this file were made by prettier in my editor. I tired to undo most of them, but I left in these last ones that I think make the file more consistent. Let me know though if you disagree and I can fi these as well. I was unsure about how to name these files where the feature is hyphenated. Let me know if it should be changed. @Golmote is this a required change for you or a nice to have? I ask because the tests fail when I switch to the regex you suggested. I think it probably just requires a little tweaking, but working through regexes is challenging for me \ud83d\ude05It seems to me like having it splitting up is clearer, but if you disagree I can work through it. I can try to combine these, but I'm finding it challenging. If it's a required change, I'll definitely work through it, but I'm going to push an update without it in case it isn't. This file was generated when I ran gulp. Not sure if it should be included. If not, I can revert the commit that added it . Not sure if this alias is allowed. I added it to allow more flexibility, but I can remove it you'd rather not have it. ",
    "akirak": "Also note, you may have to add some classes to your theme (CSS) to fully take advantage of it. I have tried it with Dracula theme included in the repo, which is a dedicated effort for the language, but I haven't tested it with any other themes for Prism. . @Golmote I'm the original author of the plugin, and I'm sorry for this tedious work. That code was not meant to be merged into the code base of PrismJS. It should be transpiled using babel, but apparently its resulting code will not be suitable for maintenance by human. Therefore I didn't send a merge request to you. \nI am currently working on another project, and I'm not sure if I will adapt this stuff to the proper plugin format. Thank you for your comments. . The name emacs relates to a limitation of a blog engine I am using. My blog source contains code blocks in emacs-lisp language, but my blog engine somehow splits the name by hyphen, and the resulting class name becomes emacs. The plugin was named emacs so that it can highlight Emacs Lisp code in my blog, and I didn't consider supporting other Lisp dialects. Perhaps it should have been first named emacs-lisp, but I would still have to add an alias emacs for use in my blog. . Thanks for creating this pull request. \nI don't mind your being owner of the module, but this plugin is experimental, and there are some corner cases where it doesn't render well, like in this example. It's doing complex things, and I don't know how to fix this bug. \nIf you still don't mind using the plugin, you or whoever can be its owner. As you've put an effort in adapting the plugin, I think you deserve the credit. I will mention this merge in the README of my repo, but I won't be responsible for maintaining the plugin. . ",
    "svalat": "Sure I will make one.. Ok, I made a reproducer here : https://jsfiddle.net/kkaubxf1/\nBut, I searched a lot to understand how to reproduce it. It was not the case out of my app. I finally saw that my page was zoomed on my app (don't know why chrome remembered I zoomed on that page a long time ago).\nBy default it workds. The bug appear only if you zoom on the page. On firefox it is OK. On chrome not.. ",
    "mansona": "\ud83d\udc4b Any chance that we can get this reopened? We are hitting this exact issue with the Ember Guides and there has been a really great Twitter thread explaining the issue here\nI was able to alleviate a little bit of the problem by adding the following to our CSS: \ncss\ncode[class*=language-], pre[class*=language-] {\n  text-shadow: unset;\n}\nwhich seems to reduce some of the compositing time, but it doesn't completely clear the problem.\nI would recommend looking at the YouTube video that shows the exact code example that is giving the issue. The unaltered page that Don is using there is this one: https://guides.emberjs.com/release/tutorial/simple-component/ and the WIP that we're currently working on is here: https://ember-guides-prod-pr-216.herokuapp.com/release/tutorial/simple-component/\nI would appreciate some help on this because I don't really know too much about how to debug compositing issues on Safari \ud83d\ude16 \n. ",
    "rtwk": "For example, in this page - https://www.w3resource.com/python/python-list.php.. Well, I did update to the latest version of Prism. It's PrismJS 1.11.0 (and corresponding css file is also updated). But the issue is yet to be fixed.. Well, write you are. We have Cloudfare Cache. I am in Dev mode now and I see it is working. But, but, \nline numbering and copy to clipboard are gone. I selected those two options while downloading the js and css code though. My code includes line-numbers class like <pre class=\"line-numbers\"> and it used to come before I updated.. Ok. Let me try it once again.. Strange problem. I actually select those two plugins. But since I can't see the download js and download css buttons, I have to select, copy and paste both js and css code manually. May be it is missing some code in the process.. Where it is? I found a button for downloading js but no button for css.. Ok.\nhttp://prismjs.com/download.html?themes=prism-coy&languages=markup+css+clike+javascript+abap+actionscript+ada+apacheconf+apl+applescript+c+asciidoc+asm6502+aspnet+autohotkey+autoit+bash+basic+batch+bison+brainfuck+bro+cpp+csharp+arduino+coffeescript+ruby+csp+css-extras+d+dart+diff+django+docker+eiffel+elixir+elm+erlang+fsharp+flow+fortran+gherkin+git+glsl+go+graphql+groovy+haml+handlebars+haskell+haxe+http+hpkp+hsts+ichigojam+icon+inform7+ini+io+j+java+jolie+json+julia+keyman+kotlin+latex+less+livescript+lolcode+lua+makefile+markdown+matlab+mel+mizar+monkey+n4js+nasm+nginx+nim+nix+nsis+objectivec+ocaml+opencl+oz+parigp+parser+pascal+perl+php+php-extras+powershell+processing+prolog+properties+protobuf+pug+puppet+pure+python+q+qore+r+jsx+typescript+renpy+reason+rest+rip+roboconf+crystal+rust+sas+sass+scss+scala+scheme+smalltalk+smarty+sql+stylus+swift+tcl+textile+twig+tsx+vbnet+verilog+vhdl+vim+wiki+xeora+xojo+yaml&plugins=line-numbers+toolbar+copy-to-clipboard */. No idea. It comes when I load that url and disappears immediately.\n. I tried both FF and Chrome. Both. Same.. Nope. I think when I copy I am missing some code. So Line numbers are not coming.\n. Perfect. It worked. Thanks a ton. May I close this issue?. Well, adding line-height: 1em; to the  tag, this isssue is fixed.. ",
    "aaronstezycki": "Hi @Golmote, was this issue fixed and a PR merged? I could do with this plugin working for IE. Sorry if it has \ud83d\udc4d. ",
    "mikehardenize": "This doesn't work. I get: Module build failed: SyntaxError: \"Prism\" is read-only. So I tried:\njavascript\nvar Prism = { disableWorkerMessageHandler: true };\nimport 'prismjs';\nThis also didn't work as the import doesn't merge stuff into the Prism object. So I tried:\njavascript\nPrism = {\n    disableWorkerMessageHandler: true,\n};\nimport PrismLib from 'prismjs';\nPrism = {\n    ...PrismLib,\n    ...Prism,\n}\nThis also didn't work as the unwanted message handler was still created.. I'm using webpack with babel-loader. I've tried various combinations of loading the module using require and using global.Prism and it's making no difference.. After further investigation, the existing web worker functionality is actually broken. If you postMessage two pieces of code for highlighting at the same'ish time, the response order is unpredictable. You don't know if the first code you get back was the first code you submitted or the second.. ",
    "tvooo": "I managed to achieve this the following way:\njs\nglobal.Prism = { disableWorkerMessageHandler: true };\nconst Prism = require('prismjs');\nThen, I load the worker using webpack's worker-loader like this:\njs\nconst Worker = require('worker-loader?inline=true!./worker');\nHope that helps :)\nEDIT: It's not necessary to import Prism as PrismLib or something else. Prism works just fine.. ",
    "arxeiss": "@Golmote You are right! I did not see it..\nAnd I found maybe another problem. That if another plugin will need wrapper as well, there can be conflict. Maybe adding some wrapping method to the core? That only 1 wrapper can be present?\nAny ideas?. @mAAdhaTTah Thanks for notifying, of course I forget.\nMinified version is there now. ",
    "raulviitor1": "To exemplify my doubt, I need to make this recursive.\nI can accept:\n[X [X]]\nalso accept\n[X [X [X]]]\netc. I looked in ruby example that has insertBefore and pattern with interpolation. It may help but I didn't understand this function.. ",
    "CoenraadS": "~~\\[([^[\\]]|(?R))*\\]~~\n~~https://regex101.com/r/glzFZB/2~~\nI don't know what I'm doing. Hmm I see that https://www.npmjs.com/package/prism-languages ships its own version of json.js, I will investigate that first... Here is a regex that matches equal []'s: \\[([^[\\]]|(?R))*\\]\nBut I read at https://github.com/PrismJS/prism/blob/7035d4ef55c219e4ebcc5f91507f9c9be589a68a/components/prism-powershell.js#L29 something about not matching array indices but couldn't find an example of when it should not match. Could two levels be added to support attributes with generic lists, i.e. [OutputType([System.Collections.Generic.List[int]])]\nThanks for this great project. I really appreciate your work man!. I found this regex: (')([^'\\\\]|(\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)))(')  from https://github.com/carols10cents/rust.tmbundle/blob/3005916b957bfede01792734a595922a0c1c82d7/Syntaxes/Rust.tmLanguage#L98. I asked the OP and he said they are part of the string, so the first bracket is indeed incorrect.. ```\nvar Prism = require(\"prismjs/components/prism-core.js\");\nvar loadLanguages = require(\"prismjs/components/index.js\");\nloadLanguages(\"javascript\"); // This line causes script parsing to break in the following html file\nloadLanguages([\"markup\", \"javascript\"]);\nvar someFile = \n<!DOCTYPE html>\n<html lang=\"en\"> \n  <head>\n    <script>\n     export default \n     {\n       v\n     }\n    </script>\n</html>\nvar tokenized = Prism.tokenize(someFile, Prism.languages[\"markup\"]);\nconsole.log(tokenized);\n``. If its done that way, will previously loaded languages still work? . Loading all languages is~300msfor me (on demand loading was~4ms`). I can live with this since its a one time cost if everything else works correctly. If I'm the only one encountering this issue then you guys don't need to follow this up any further.\nPreviously I was calling loadLanguages('language') for every document the user opened, so it would be worse for my current situation if that got slower. One time slow or multiple times fast, but not multiple times slow \ud83d\udc4d \nMaybe when the node global issue is fixed, you can just keep a dictionary of languages and prism objects, and not worry about them conflicting since each object is independent. . Is there a better way? I would like to be able to pass an alias to the loadLanguages function and have it choose the correct parameters, so I don't have to do so myself. This code was actually from before loadLanguages was available, so maybe it can already handle aliases, but I didn't check very hard.. @Golmote Great! I was just talking about the PrismJS aliases also, not vscode specific ones or languages hacks I did just because existing languages are good enough to get the bracket information.. ",
    "benkimball": "Can you add a class name to a parent element? For example if you add class=\u201clanguage-ruby\u201d to your body tag, it will be inherited by any code blocks it contains.. ",
    "akshaybabloo": "@benkimball Can't do that in Squarespace, unfortunately.\n@Golmote Thanks, I didn't know that. Is it documented somewhere?. ",
    "uhafner": "Is there at least a mapping of file extensions to class names available? I would like to use it in an application where the actual visualized file is not known in advance.. Thanks, that did the trick!. ",
    "HarryCaveMan": "Is there some where to view the dependency graph of the language packs? A simple way to get auto detection support for all languages (without importing  them all) is to import the languages that are high on the dependency tree (i.e. clike, c, java,html, javascript) every time, then load the extension classes dynamically from the input (i.e import('prismjs/components/prism-'+inputLang)), but , aside from reading/testing them all or seeing the dependency graph, it is hard to determine which language packs to load initially. This may not be a good solution if there are lots of nested dependencies because you'd still end up importing a lot of stuff for every instance. I will attempt to fork and do some testing in a few weeks if no one else has time. Here is an example react-markdown plugin that (kind of) adds support automatically (works for at least 20 or so langs), and works with real-time previews. It defaults to JavaScript if no support is found or if deps are missing:\n```js\nimport React from \"react\";\nimport Prism from \"prismjs/components/prism-core\";\n//other languages depend on these\nimport \"prismjs/components/prism-clike\";\nimport \"prismjs/components/prism-c\";\nimport \"prismjs/components/prism-java\";\nimport \"prismjs/components/prism-html\";\n//include javascript as default fallback\nimport \"prismjs/components/prism-javascript\";\nlet CodeBlock = {\n  Block (props){\n    let html;\n    let cls;\n    //console.log(props.value)\n    try{\n      //try to load prism component for language\n      import(\"prismjs/components/prism-\"+props.language);\n      html = Prism.highlight(props.value ||\"...\", Prism.languages[props.language]);\n      cls = language-${props.language};\n    }\n    catch(er){\n      //if load failed, fall back to javascript\n      console.log(er.message+\": \\\"\"+props.language+\"\\\"\");\n      html = Prism.highlight(props.value||\"...\", Prism.languages[\"js\"]);\n      cls = \"language-js\";\n    }  \n    return (\n      \n        \n      \n    );\n  },\n  InLine(props) {\n      let html = props.value;\n      let cls = \"language-js\";  \n      return (\n          \n      );\n  }\n};\nexport default CodeBlock;\n. Trying to train some sort of statistical classifier with a training set could be a viable option. Something like [this](https://github.com/nemo/natural-synaptic) , which can train a model from samples and then just load the trained model to detect.. Would loading a few dependencies up front and then using dynamic imports to specific files possibly avert this bloat? Something like this:js\nimport React from \"react\";\nimport Prism from \"prismjs/components/prism-core\";\n//other languages depend on these\nimport \"prismjs/components/prism-clike\";\nimport \"prismjs/components/prism-c\";\nimport \"prismjs/components/prism-java\";\nclass CodeBlock extends React.Component {\n.\n.\n//try to load prism component for language\nimport(\"prismjs/components/prism-\"+props.language);\n.\n.\nrender(){...}\n}\nexport default CodeBlock;\n```\nIs there a dependency graph for all the language packs available somewhere? Importing clike, c, and java helps support most languages but there are a lot of other dependencies. It would be awesome to know the bare minimum (i.e which imports are needed up front for all dynamic imports to work like this) or for a language pack to import the pack(s) it extends automatically if it/they hasn't been imported. Right now I just use this and a try/catch that defaults it to JavaScript if it can't import because of dependencies.. ",
    "izelnakri": "Any updates on this? This would really enhance the developer experience if the code block doesn't have a language class.. ",
    "juancampa": "@paladox, highlight's shell is not just bash. It's to highlight interactive shell sessions where commands lines start with $. Like the following:\nshell\n$ cd dir\n$ ls\nfile1/ file2\nWhich is not bash but if a line starts with /[$%#>]/, then the rest is bash, otherwise, it's plain text (e.g. the output of ls).\n. ",
    "whitemuu": "\n@juancampa There's a command-line plugin that may suit your needs.\n\nThat looks great. The sad thing is that it can't be used in node. Still wanting a special lang named shell-session or command-line.. ",
    "jkcclemens": ":+1: for namespacing Prism's classes. Frankly, I'm surprised it doesn't already. Not doing so is only asking for trouble.. ",
    "cinhtau": "Hi @Golmote. Thanks for the review, I will apply those changes as requested.. Hi @Golmote, sorry that I didn't pay attention to that. My IntelliJ default settings did mix it up. I just corrected it. Thanks to all previous contributors, to make this feature extension simply happen.. ",
    "danieldilly": "I figured out my problem.  I was not aware that I had to import components to get some features working.\nimport prism from 'prismjs'\nimport 'prismjs/themes/prism.css'\nimport 'prismjs/components/prism-php'\nimport 'prismjs/components/prism-bash'. ",
    "supnate": "Thanks for the quick fix! I will verify it soon.. That's fine. Thanks.. Thanks @Golmote ! Can't wait to try it!. By the way, just for your information, I'm using prismjs for syntax highlighting with Monaco Editor. See the live demo at: http://demo.rekit.org/element/src%2Ffeatures%2Fcommon%2Fmonaco%2Fworkers%2FsyntaxHighlighter.js/code .  Did some job on finding jsx text elements.. Yes exactly! Both for the problem and code complication.. Hope it would be resolved from prismjs side finally some day!\nThanks for your effort on making such a  great tool!. Looks good, quite neat code! Thanks @Golmote ! Glad to see my approach could help. Just one comment: could you make jsx text a special token type (like jsx-text) rather than plain text? So that we could differentiate it from other text like variable definition, then they can have different colors.. Ah, just realized the hook name is after-\"tokenize\". I can call it myself, thanks for the information!. ",
    "ericgio": "You're right, I must have been using an older version of the JSX package. Thanks for pointing me to the testing page as well, I'll go there first next time.. Other examples:\nPassing an array of objects\njsx\n<Component\n  data={[\n    {id: 0, name: 'Joe'},\n    {id: 1, name: 'Sue'},\n  ]}\n/>\n\nTemplate literals (in some cases)\n``jsx\n// This works\n<Component title={${name}`} />\n// This does not\n${name}'s page} />\n```\n\n. ",
    "kid-wumeng": "@Golmote Think you very much!. ",
    "bradhowes": "Pinging @chriswells0 as he is the author of the command-line plugin.. @chriswells0 That sounds good to me. Thanks! I'm fine with closing this as a dupe of your work then.. Agreed.. I did not want to cause any possibly breaking change, hence the clear separation. I am more than willing to rework it if desired.. ",
    "maulwuff": "Yes, viable enough. Not 100% correct but better than now ;-)\nClasses are written capitalized, but there are for example structs, which are capitalized, too, but behave somewhat different (or delegates and stuff) . They would get colored the same way as classes, but in my opinion that would still be better than black / no coloring.\nAm 23. M\u00e4rz 2018 20:57:50 MEZ schrieb Golmote notifications@github.com:\n\nHi! Thanks for reporting.\nWe currently match class names based on the preceding keyword (class,\ninterface, etc.).\nAre class names mandatorily capitalized in C#? Would this a viable\nenough way to match them?\n-- \nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/PrismJS/prism/issues/1365#issuecomment-375781521\n. looks great :+1: . \n",
    "ileitch": "@mAAdhaTTah You're welcome to take it. Prism is also missing the extension keyword.. ",
    "finnianr": "Many thanks for the fix. \nBTW, I would like to offer a suggestion. The most popular Eiffel IDE (EiffelStudio) highlights Eiffel class names with the color blue. Screenshot If PrismJS could do the same it would be fantastic. This should be relatively easy to achieve as any identifier consisting of all upper case letters can be assumed to be a class name. This is a universal naming convention in the Eiffel community.. Done! \"Class name highlighting for Eiffel #1383\". Many thanks. I tested it and it works a treat. Fantastic job.. It seems I was using an out of date version of one of prism.css or prism.js. I installed the latest versions and the problem went away.. ",
    "filips123": "Yes. And there should be space between two buttons.. Keep markup and Copy to Clipboard.\nMaybe there are also some other plugins with this issue.. Maybe there are also some other plugins with this issue.. ",
    "xtuc": "Wow that was fast! Thanks @Golmote :clap: . ",
    "tstapleton": "@Golmote done!. ",
    "sslotsky": "Thanks for the reply @Golmote . I'm not totally sure I understand the suggestion. Are you saying that projects that use prism now have additional peer dependencies to satisfy? This seems like a breaking change for consumers of this library, should there have been a major version bump? Perhaps I'm misunderstanding what the issue is?. Just to confirm, that means this is a bug with no userland workaround? Just want to be sure I understand. Thanks.. I am sorry if I'm being slow, I just really do not understand how this isn't a breaking change. We upgrade a minor version of prism and suddenly our code doesn't work anymore.. Thank you @Golmote for the thorough explanation.. Thanks @mAAdhaTTah I actually reported it there first! No activity from them yet but hopefully they respond soon.. ",
    "ryan-roemer": "Hi @Golmote!\nIf you're still up for it, we're game chatting out a reliable solution for getting a subset of prism deps for Spectacle that we need. Maybe best bet is head over to https://github.com/FormidableLabs/spectacle/issues/546 since it looks like the issue is our method of importing?\nFor hopefully a useful background, we target CJS + ESM individual files with Babel, and UMD with Webpack.\nThanks! . ",
    "wispyoureyes": "Ah, it worked! Thanks a lot!. ",
    "ChrisBrownie55": "@Golmote, there may not be a way to do this with the built-in functions in Javascript, however, it is possible to include a function that makes that possible, however, I do understand that adding in another function that handles recursive regexp just for this would probably be a bit much but I think it would be plausible to add an extension for recursive matching for Javascript in case someone needed it (like me).. ",
    "marc136": "Thank you @mAAdhaTTah, that solves my problem.\nUpdated example:\n```js\nconst Prism = require('prismjs'),\n    loadLanguages = require('prismjs/components/index')\nloadLanguages(['php', 'python'])\nconsole.log('Available languages:')\nconsole.log(JSON.stringify(Object.keys(Prism.languages)))\nlet code = 'just a string'\nlet lang = 'php'\nlang = 'python'\nconsole.log(${lang}: \"${Prism.highlight(code, Prism.languages[lang])}\")\n```. ",
    "JaimeStill": "Hi! Thank you for your response and the corresponding information. I'll check it out and see what I can do with it.\nI believe, in the cases shown above, that there are a couple standard instances with TypeScript where you can always easily match a custom class name:\n\n\nAs a type constraint inside of generic angle brackets\n\n\nInside of parenthesis following a colon.. \n\n",
    "Fi1osof": "Any progress?. Run gulp\nAssertionError [ERR_ASSERTION]: Task function must be specified\nHave no this error on master branch.. ",
    "testrain": "Is this issue going to be resolved or deprecated already? Supporting solidity is a nice feature :). ",
    "glachaud": "Hi,\nI've been quite busy in the last few months, so I hadn't time to apply the changes. \nI'd be happy to collaborate with anyone who wants to improve the PR. :) \nIn the meantime, I'll try to incorporate the required changes to the PR sometime next wee.\nCheers. ",
    "omrllm": "Hey guys,\nSo, what is missing to get it working?. ",
    "jwworth": "Great point! I moved the conditional down, and added a check for language to ensure undefined isn't put into the span.. ",
    "gflohr": "My fork is messed up. :( I shouldn't have committed the generated files.\nDo you mind if I create a new fork and pull request? . @mAAdhaTTah Ummh ... I actually wanted to get rid of the conflicts with the rebase.  Looks like that went slightly wrong .;)\nOther than that I think that I'm done except for one TT2 feature:\n<div>\n[% variable %]\n%% variable\n   %% variable\n</div>\nThe first two lines are equivalent (when the non-default feature \"outline tags\" are activated) and will both render the contents of variable variable.  The third line is not considered template code because the \"outline tag\" %% is not in column 1.  I don't see how this could be implemented with any justifiable effort or did I miss something?. As for the \"outline tags\": There are not enabled by default and I suggest to ignore them.  This is also documented.\nI can really just create a new fork and new PR.  I will then not commit any generated files.  That's  less work, especially for you.  So feel free to close this.. I think I am through now except for the generated files which I will push as soon as I have your okay.\nI have ordered the keywords alphabetically, easier to maintain.\nAnd I have removed the Namespace::Plugin feature as it seems not to work in templates.. I have applied all your changes.  Push the generated stuff now?. Pushed.\nAnd thanks for the review process.  That was very instructive for me.. Thanks for the thorough review.  I must admit that I implemented the component a couple of months ago and obviously missed to follow changes to Prism.  I had tested it with my own use cases only, never spotted any problems, and finally decided to send the pull request. My bad.\nI will pick one of your four suggestions as a new starting point and give it a new try.\nAs for the name: I spend some time thinking on that and still can't say which is right. So I'm happy with you having the last word on that.\nTemplate Toolkit version 2 is the version in wide use and documented on the project web site.  The author did a rewrite from scratch, Template Toolkit 3 which he considered superior in design but still pre-alpha in 2009.  But he already announced that he would move the \"Template\" namespace to \"Template::TT2\", see https://github.com/abw/Template-TT3/blob/master/docs/pod/Template/TT3/Manual/Compatibility.pod\nWith my decision I tried to support the author's view.  On the other, version 3 hasn't seen any commits since 2012 ...\nMy suggestion: No alias at all, and use tt2 as the identifier, and \"Template Toolkit (version 2)\" as the title?. Cut and paste errors from my side.. That's my personal style but I can follow your convention.  Off-topic, but this is my rationale:\n\nThe extraneous escapes help both syntax highlighters and inexperienced readers.\n/[a-zA-Z]/ is slightly more efficient than /[a-z]/i.  Since the i modifier is unicode aware, case-insensitive matching is potentially expensive.\nDoes \\d match \"\u06f4\u06f2\" or not? It does not.  But why make people figure, when you can be explicit.\n\nYes, rather academic, and I have no problem following your style instead.. Agreed, I will just use \"Template Toolkit 2\".. True.  The u makes a difference in this case:\njavascript\nconsole.log(\"\\u212a\".toLowerCase());\nconsole.log(\"\\u212a\".match(/[a-z]/iu));\nAlthough the behavior without /u could also be qualified as a bug.\nBut, honestly, do you know whether \"\u06f2\" (an Arabic two) matches /d or whether \"\\u3000\" (ideographic space) matches \\s (without /u)?  The Arabic digit does not match \\d but ideographic space matches \\s.\nI think the usage in Prism is correct everywhere so this is rather academic and it was really not meant as criticism.. I am rewriting the component from scratch now but I am not sure that I am completely on the right track.\nA typical example for a TT2 template is https://github.com/gflohr/qgoda-site/blob/master/_views/components/listing.html.\nMy current component is here: https://github.com/gflohr/prism/blob/gh-pages/components/prism-tt2.js\nTwo features are causing me a headache:\n[%# This is a multi-line comment\n    because the \"#\" is immediately following\n    the opening tag.\n%]\n[% # And this is a normal comment.\n    x = 42 # So is this.\n%]\nI tried to implement that morelike this:\njavascript\nPrism.languages.insertBefore('tt2', 'delimiter', {\n    comment: /\\[%#[^]*?\\%\\]/\n});\nBut at no avail.  Only the first line is recognized as comment.\nAnd as an alternative to [% ... %] you can use outline tags:\n%% IF foo = \"bar\"\n<br />\n%% END\nThe \"closing delimiter\" is a newline here.  How can I specify that?\nBoth features are a little bit esoteric, and could also be left as a known limitation if there is no solution.. Okay, with syntactically correct code \\s is equivalent.  Same for\\w.  I will change it to your preferences.\nThe colon was for fully qualified plug-in names (Foo::Bar).  I thought they are supported but it looks like they actually don't work.  So I will remove the colons.  Even if they did work, the colons will then be highlighted as punctuation which is also okay.. Sure, I didn't know that.. They are in the order of the directives documentation.  Switch to alphabetical or go with the docs?. Okay, I didn't know that and see whether that also fixes the FIXME below.. I understood that but I found a bug or two because of the more realistic test cases.  Is that really a problem? It's better test coverage in the end.\nReordering: see above, whatever you prefer.  Although ELSE before IF looks really strange to me. ;)\n. The problem is the tabwidth.  I had assumed 4 here.  I will reformat with 8 (also for your other remarks on that issue).. Looks like it's not supported anyway, see above.  So I'll remove the colons from the variable regex as well.. Yes, the regexp is very smart.  It's from Jeffrey Friedl, see http://regex.info/book.html\nAnd, yes, you're right, in the absence of /s the newline must be matched as well.  I'll fix it.. With the \\b around the keyword-like operators and|or|not it is no longer needed.  Thanks for the hint.. True, that's more efficient and the \\b also makes the greedy variables unnecessary, see below.\nBut - sorry for being a smart ass ;) - matching a 58 million character string without any space against \\s takes about 50 % longer than matching against the more correct /[\\011-\\015\\040]/, both in Firefox and Chrome.. ",
    "xmuyoucai": "Thanks for your reply\uff01For mAAdhaTTah, I don't want to modify this core file prism.js, because i known this maybe cause some other issues. I just want to make this issue known by Prism. I expect the new version will fix this problem. For Golmote, your solution is just my first way that i thought of! But i really don\u2019t have so much time to read all of these source code, so,  hah, i just leave these works for prism!. ",
    "trsh": "Document str:\n<html><head>\n <meta charset=\"UTF-8\" socket=\"true\">\n <title socket=\"true\">title</title>\n </head>\n <body socket=\"true\"> \n </body></html>. @Golmote tnx, will try this soon.. ",
    "neilchaudhuri": "I'm actually not using data-src in my real code, but all the examples used it, so I thought I'd try it on the JSFiddle. Also, I know I was mixing code types, but since I was using data-src, I needed a publicly available resource. I didn't think the plugin would know the difference between JS and Scala to any degree relevant to this question.\nAnyway, your response and further experimentation showed me that it is a loading issue. What I didn't mention is that I am doing all this in the context of a Reveal.JS presentation. I am loading Prism in a fairly obvious way:\n$( document ).ready(function() {\n                Reveal.initialize({\n                    dependencies: [\n                        {\n                            src: 'https://myCDN.com/js/prism.min.js',\n                            async: true,\n                            callback: function () {\n                                Prism.highlightAll();\n                            }\n                        }\n                    ]\n                });\n            });\nThis highlights the code, and the Copy-to-Clipboard works. Line Numbers doesn't. What do I need to do here?. That is indeed the issue--not a loading problem but rather a hiding problem. Thanks for the help.. ",
    "jwillmer": "What is markup-templating? The website says I only need to add the js and css to my website in order to work. Is the website wrong or is the current version broken?. I use the following link to get the css and js:\nhttp://prismjs.com/download.html?#themes=prism&languages=markup+css+clike+javascript+c+csharp+bash+batch+cpp+aspnet+arduino+coffeescript+ruby+git+java+json+less+objectivec+php+powershell+python+scss&plugins=line-highlight+line-numbers\nI implement it in a static web site by referencing the css and js file. I highlight Arduino code.\nInterestingly adding the markup-templating to my selection fixes the problem. But that looks more like a workaround then a solution.. Now it works, thank you!. ",
    "DM2489": "I've just spent hours trying to get this to work, only to find out here that it doesn't provide indentation!\nIs there any way to automatically indent?. HTML/XML markup shouldn't be too difficult. Other languages such as JS of C# will be much harder.\n. Maybe in  some cases that could work.\nMy use case would be using it programatically in JavaScript, parsing large\nstrings, which would be much more complicated.\nOn Fri, 12 Oct 2018, 16:57 Lee Conlin, notifications@github.com wrote:\n\n@DM2489 https://github.com/DM2489 Do you think this would work for all\nlanguages...\nCompare first and last line, if indent of last line is greater than that\nof first line adjust all lines except first by the negative difference.\nThen pass the result to the rest of the process this plugin uses.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismJS/prism/issues/1425#issuecomment-429374522, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AmhPxIvZrc7LEa_WrgrnCdc5L-SS65s6ks5ukLvrgaJpZM4UGMUS\n.\n. \n",
    "pakLebah": "@Golmote: The language are Pascal (the classic one) and ObjectPascal (the modern one). Delphi, TurboPascal (who is still using TP anyway?), FreePascal, and Oxygene are the names of compilers that implement Pascal language in various dialects. Along with those popular Pascal compilers, there are many other Pascal compilers out there with its own dialect e.g. NewPascal, SmartPascal, Turbo51, PascalABC, etc. but even those are still using either Pascal or ObjectPascal language, despite their dialects are not completely compatible. So, PrismJS should only support Pascal and ObjectPascal, not the compiler names.. @Golmote: Thank you. I've been a professional Pascal programmer for more than fifteen years, mostly with Delphi and Free Pascal. Well\u2026 it was before I retired a few years ago. Now I'm doing programming just for fun and hobby So, yes\u2026 I know this Pascal stuffs well enough. \ud83d\ude0a . ",
    "TimeDropsDream": "@Golmote Prism includes markup by default so that won't change anything.  For the record, I did try doing that though - it doesn't change anything.\n@mAAdhaTTah Here's a small repo test case.  Load index.html through a server.\nOne thing I neglected to mention is that I'm actually writing the code snippet in a markdown file, which is then passed through a markdown parser prior to outputting the DOM.  This is done through the Marked library.  How the library outputs markdown to HTML to the DOM I'm not sure.\nStandalone, the PHP highlight does work as expected.  When comparing the differences between the standalone and the repo example, the only difference I can tell is in the standalone, Prism does one more routine to apply additional PHP tokens after it gets inserted into the DOM, presumably by a hook.  I'm not sure how hooks work though and I'm not sure if there needs to be a specific way for the Prism parsed results to be inserted into the DOM for the hook to work.\n. ",
    "gitgrimbo": "I think the reason IE11 takes so long might have something to do with React (currently using v16.4.0).\nThe \"set innerHTML\" row for the first load is 57ms, and the reload is 10.45s.\nPerformance trace from IE11 on first load of the page with highlighting:\n\nPerformance trace from IE11 on a reload of the page with highlighting:\n\nBelow are the JavaScript call stacks of a different, but also slow, render.\nIt looks like _self.Prism.highlight (and subtree) doesn't take much time, and the culprit lies somewhere else within _self.Prism.highlightElement - probably the assignment to innerHTML if we use the previous chart as evidence (https://github.com/PrismJS/prism/blob/435eb2e6cd94948627b044255aab7605235bdfa5/components/prism-core.js#L261..L270).\n\n. I created a fiddle as an example\nhttps://jsfiddle.net/fiddlegrimbo/vhgj510p/20/show\nConsistently highlights the HTML in ~500ms on IE11.  So there is something going on in my webpack/React code to slow the highlighting down.\n. Thanks for your reply.\nI'm starting to suspect IE11 devtools now. I restarted IE11 and did not open devtools, and both my vanilla test of Prism and my React app are highlighting quickly.\nWhen I open devtools it slows to a crawl.\nThis slowdown can be reproduced using the test page, https://prismjs.com/test.html, and the content of this gist, https://gist.github.com/gitgrimbo/3ae03923ae1fb3b4865895c07a6e65f2#file-html-html.\nWhen IE11 devtools is not open, this highlights for me in less than a second. With devtools open, it highlights in ~9 seconds.\nSo in summary I don't think this is a real issue with Prism, although it might be interesting to know why IE11 devtools could cause such a slowdown.\n. Yeah.  For my purposes I'm not too fussed if IE11 is somewhat slower than current browsers; that's to be expected in most cases. But I couldn't really justify a multi-second slowdown.  Cheers.. ",
    "Calytic": "1045 What happened to this?. I was able to use his approach with <details> and <summary> tags effectively in my own code.  However, this approach was inconsistent with the line numbers plugin.\nDespite \"folding\" the code correctly, the line numbers do not fold in tandem and as such were incorrect relative to the document being folded.\nIf the line numbers plugin was updated to be compatible with the presence of <details> and <summary> tags, that would be a good first step to fixing this issue.. ",
    "alice-mm": "Thanks for your time and for those comments. I'll do my best to fix all that.\nSorry for the indentation. I was pretty sure my editor was using tabs, but I guess some spaces slipped through or something.\nThere's a lot of work, but I guess that was to be expected with such a monolithic PR :sweat_smile: It won't be trivial to delve into these things again but I don't have much choice.\nRegarding https://github.com/PrismJS/prism/issues/1457 (after a quick look), I'm not sure I get what happens :open_mouth: It looks like the first single quote within $(\u2026) wasn't considered as the beginning of a string while the second one was, thus gobbling nearly the whole script in a pseudo-string. Weird.. components/prism-kotlin.min.js gets modified when I run Gulp, even though it does not seem related to Bash in any way\u2026 I'll refrain from committing it for now; warn me if it is required.. For https://github.com/PrismJS/prism/issues/1457, note that if you allow a pair of parentheses within $(\u2026), the opening one should not be right after the $( as it would look like arithmetic expansion ($((\u2026))).\nAnd yeah I'm not sure it would be wise to hammer new features in this PR. :smile:. $ npm list uglify-js\nprismjs@1.14.0 /home/alice/prog/prism/prism\n\u2514\u2500\u252c gulp-uglify@0.3.2\n  \u2514\u2500\u2500 uglify-js@2.4.6\nGit diff shows a bunch of differences, but as it is a minified file it's not really readable.\nHm\u2026 It seems the only difference is that the keyword to is added in the \u201cafter build\u201d version. Did someone add that in a PR and forgot to commit the minified version?. I think I took most of the comments into account. I have yet to try to simplify the operator list, though, and I did nothing regarding https://github.com/PrismJS/prism/issues/1457. I'll have lunch, for now. :smile:\nThanks again for your guidance so far.. Your regexp for (\u2026) within $(\u2026) seems to work wonders.\n\nI don't see anything else that needs to be done, now, but maybe I forgot something. I'll let you check all that.. Yeah, I haven't pulled from Prism's repository for a while. Does that mean that I should now, or is it OK as long as the only files I edited did not change in the meantime? Travis seemed happy so I did not give it much thought.. > Any ETA on this?\nNot sure what exactly is happening. According to the tag changes, it seems @Golmote acknowledged my changes and intends to check them or to let someone else do so. I'm on standby, should any new remark surface.. Hi everyone. Wanted to see how things were going. Noticed conflicts sprouted after https://github.com/PrismJS/prism/pull/1577 was merged. I tried to compute the union of the commands listed in the two PRs, still excluding shell builtins that tend to be mistaken for external commands. Looks like the conflicts are gone, now. Pfiou. Not used to working with multiple Git remotes. :sweat_smile:\n/cc @Golmote\nStill not sure why this PR is stalled right at the final-ish review stage. :cry: \nA few months ago, I used my version again (for a Reveal.js slideshow to teach Bash stuff to my workmates) and didn't notice anything weird. Prism is fun.. No problem! Indeed, his profile seems to show that his activity plummeted around the time of his reviews of this PR.\nThanks for reacting so fast. :slightly_smiling_face: . Thanks for the comments!\n\nI will have to learn a little bash to fully review this PR, so if you know a good place to get started, please let me know. Also I found this spec. If there is a better one please let me know.\n\nWell, I learned Bash with a lot of trial and error. The \u201cFirst do it, then do it better\u201d spirit. Note that man bash contains far more information than people tend to think. Info on specific builtins and even stuff like select or for can be obtained via help <name>. The link you provide here seems to be nice, though. Maybe even overkill for this context.. Here you go, I think. :slightly_smiling_face:\nThanks again!\nGosh, now I'm hungry and it's two in the morning\u2026 :woman_facepalming:. > I didn't mean the object properties\nHaha I had huge doubts, yeah, and I thought I was supposed to be consistent. But now that I fixed that, I agree that it's convenient to be able to spot tokens in a glance.\nHere, two additional cleaning commits.. Rebased to solve conflicts stemming from:\n https://github.com/PrismJS/prism/pull/1731\n https://github.com/PrismJS/prism/pull/1734\n(only new command names in the \u201cfunction\u201d list)\nBy the way, I was a bit surprised to see that \u201cadd\u201d was added to this list because of yarn add. This blurs the line between command names and their arguments, and we might end up with the whole English dictionary highlighted as commands. :thinking: Well, the decision was already taken so I went with it and integrated \u201cadd\u201d to this branch. :slightly_smiling_face:. I tried to apply a regexp by @Golmote in my PR and it seems to make things better.\n\nIf you cannot wait for this to be merged or improved or whatever, I guess you can replace\na=$(complicated stuff)\nwith\n```\nfunction foo {\n    complicated stuff\n}\na=$(foo)\n```\nThis should prevent Prism from interpreting the parentheses in your strings as the end of the command substitution, and I think it's a good practice anyway when it comes to scripting as it adds semantics and stuff. Furthermore, even some heavy editors have trouble correctly highlighting complicated command substitutions, whereas functions are generally perfectly fine.\nBy the way, I don't really understand why this issue's title mentions comments since it seems it's the command substitution that is incorrectly parsed.. You're welcome, @Rychu-Pawel. Also, grep -E '(foo|bar|plop)' is equivalent to grep -E 'foo|bar|plop', so you should be able to remove these problematic parentheses (from the (DEGRADED|FAULTED|\u2026 part) altogether:\n$ seq 100 | grep -E '56|97'\n56\n97\n(egrep has been deprecated for years, hence the grep -E in these examples.). Hmm\u2026 I used all this at the beginning to handle <(for blabla\u2026) and so on, but I guess you're right, a \\W might do the trick, and even more.. Wow, I don't know why I didn't think about backreferences. I use them all the time in sed and stuff but I still feel oddly uneasy when working with JS regexs. Thanks.. I was wondering about that, yeah, but since they're used as booleans and have a similar semantic, I kept that as it was.. I actually changed this regexp tons of times and noticed that the slightest change, even the most innocent one, could break multiple-character operators into several occurrences of shorter operators, like a <> being interpreted as < followed by > rather than as a single operator. So I have to admit I grew kind of scared of this part of the code. :fearful: I'll give it a try, I guess, but I think readability should (alas) become secondary for this particular line. But it's too soon to give up altogether.. I was wondering if those tests with whole lists were overkill things or the standard way to go for Prism, haha. I'll do as you wish.. Hm\u2026 If I write /(?:^|\\W)\\w+(?=\\s*\\(\\s*\\)\\s*\\{)/, a \\n gets gobbled in the function's name, whereas it looks fine without the first ?:. The // a) and c) case seems to be fine with this ?:, though. :thinking:. Isn't this group used to make sure the here document is ended with the same tag? Like, to prevent:\ncat << _PLOP_\nblabla\n_PLAP_\n(_PLOP_ \u2260 _PLAP_)\nThere's a \\2 for this at the end.\nThe tests go haywire if I ungroup this thing.. OK, thanks for the explanation as it initially looked very strange to me. So I guess no ?: here for the a) and c) case either.\nAh, I think I get it: in a) and c) this part is already in a bigger captured group anyway.. Hm, yeah, seems OK.. Yeah, I did that and it seems to work fine (not pushed yet).. So just /^\\d/? :smile: It seems OK, though.. You're perfectly right: creating the builtin test allowed me to notice that cd was in both functions and builtins, seconds ago. Haha.\n$ type cd\ncd is a shell builtin\n\u2192 Removed from functions.. Now that you mention it\u2026 These are the characters than can have special meanings when escaped within a string. Well, it ultimately depends on the command that receives the string, but as in 99.9\u202f% of cases the meaning will indeed be special, I thought it would be a shame not to highlight such sequences. This subset is some sort of union of what echo and printf support. The \" is for escaped quotes, because string that contain quotation marks tend to get unreadable fast in Bash.\nI'll make the existing comment more\u2026 human-readable, I guess.. Woops, an old habit of mine. Never encountered anyone that liked it. :cry:. I guess you're right. Probably copypasted that from the \u201cwithout quotes\u201d version, and my lack of confidence prevented me from fiddling with the regex too much.. > Do you really necessitate an extra character after the environment [\u2026]?\nI guess not. Probably a mistake.. ",
    "Rychu-Pawel": "Hey Guys. Any ETA on this? @Golmote  @alice-mm . Nope, didn't help. I replaced bash plugin content with the one from prism-bash.js from mentioned PR but highlighting looks exactly the same :(\nI created fiddle for it, with bash algorithm from the PR, here: https://jsfiddle.net/c7ak1p82/2/. Nice work @alice-mm. I can confirm that changes from your current PR fixes my issue. I'll wait for it to get merged. Thanks!. ",
    "magkal": "Any updates on this PR? Would be awesome if it could get merged within a few months. I realize you seem to be swamped with work. . ",
    "RexSkz": "@RunDevelopment \n\nDo you mean those reserve words in the regex for es6-class-method-parameter? I thought in a normal JS code, beside function names, only those words will appear before a (. If someone thinks it hard to find all possible words, I will put all JS reserve words in it.\nI didn't realize I can use an array here, will fix my code soon.. @RunDevelopment\n\nI just found another way to exclude \"function name\" from \"parameters\": exclude () from \"parameters\" at the same time so Prism can keep using ( to recognize \"function\".\nA new commit was just created.. @RunDevelopment \nAll fixed. Is there any other problems?. @RunDevelopment \n\nYour suggestion seems good, I'll replace my regex.\nIn normal JS code, beside function names, only those words will appear before a (. Maybe putting all JS keywords here is a better idea? But it will make this regex much longer.. @atomantic Yes, it's my fault. :-/\n\nPrism now does work with destructuring, but I forgot to add i flag to regex, so it fails when your function name (which I use [_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]* to recognize) starts with an uppercase letter. Will make a new PR to fix it.\nUpdate: will be fixed in #1722 . Hi, this PR can now recognize operators in css-extras~. I started to think that highlighting regex is not a simple job, maybe I should treat regex as a kind of \"pseudo language\" rather than just improve highlight for some situations. I'll keep trying.. @RunDevelopment \nHi, I have re-written my code according to the reference in https://regexr.com.\n\nIn this reference, ? for both optional and lazy are called \"quantifier\".\nNow the code can recognize flag, character set, escape, reference, anchor, quantifier and alternation.\nIt's a pity that recognizing capture group is not a thing where pure regex way can do, because regex can't be used for matching bracket. VSCode can't do this either, it can be proved from here (the class .mtk6 means normal character):\n. @RunDevelopment \nRun escape first will seperate the regex (for example [a\\\\b\\\\c] will be seperated to [a, b and c]), so that \\\\b\\\\ won't be wrapped in charset.\nHighlighting stuff inside the character set was not taken into consideration at first, but if it's necessary, using inside (and extra patterns) is a way. The problem is: what should I name the pattern like a-z or the ^ right after [?\nOther suggestions seems great, I'll make changes to my code tomorrow, it's midnight here now :(. @RunDevelopment \nI have pushed another commit, which fixes the bugs and provides more test cases. The most important thing is: it can recognize stuff inside charset now!. @RunDevelopment \nAll issues are fixed, range is removed.. @RunDevelopment Finished~. It's easy to add punctuation inside, but both VSCode and GitHub treats dot as a normal character in JSX tag, and there's no other special characters in it, so I think it's not necessary to recognize dot here.. If we use async\\s+, we couldn't match the variable foo in foo = async(a, b) =>, where the async here is a reserve word instead of the function name.\nI found a better solution async(?:(?:\\s*(?=\\())|\\s+).. You are right, I'll fix my code. Thanks~. In highlight they are the same type of chars, maybe \"escape\" is a bad name, but I couldn't find a better one. Any ideas?\nI'll modify this regex to support them. (BTW \\0123 will not be treated as one char in JS, which only supports \\00~\\077.). I admit that \"punctuation\" and \"operator\" is also a bad name, maybe the name \"regex-token\" is better?\nAnd I found that VSCode highlights quantifiers (such as {1,2}) just like the other \"punctuations\", I'll add this situations later (aliased \"operator\" for now).\nRemoving the alias and changing the name is easy, but the matched characters will not have special color unless we modify the themes.... Wow, it's a great idea to match the even number of leading \\!\nIf a \\ is right after any characters except \\ (and it's not inside the []), it means the beginning of an escape character, so I think your pattern will work correctly.. You're right... I want to match recursive brackets, but it's not the thing that pure regex can do, so I thought matching the start ( and the end ) is enough.\nThe finite recursive depth trick is fine in most cases, I'll take your advice.\nWe can have neither strings nor comments in parameters because they'll split the codes before function-variable and parameter get to work, this is another example that comments break the highlight in Prism (what a pity):\njsx\n<Button\n    prop1={value1}\n    // some comments\n/>. The keyword function is case-sensitive, so i flag can't be used here.. Yeah, negative lookahead is better here.. ",
    "atomiks": "This doesn't appear to work with destructuring:\njs\nfunction Example({ prop }) {}. Could this be changed to tag-component or tag-class instead of class-name. The reason is to desire as much granularity with the highlighting as possible, if we don't want the JavaScript class color to match the component tag color.. Ah ok, looks good then!. Thanks, I didn't see that plugin.\nAnd the PR looks good. I'll create my own language extension and copy some of that code while the PR waits to be merged.\nDo you have ideas for the regex necessary for the other tokens listed in the OP? I'm really not great with regex and can't figure it out on my own. \ud83d\ude2d . Wow thank you so much. For the code snippets I'm using it's working pretty well. I appreciate it!. Spread wasn't working, adding it before operator works though. Also need _$ in the property regex.\nI was able to add method as well inserting it before function.\nHowever, the  property definition doesn't work if there are comments within the object.\njs\n{\n  // Here's a comment\n  property: true\n}\nAny fix for that? Everything's working nicely apart from that \ud83d\ude04. Thanks tons for the help @RunDevelopment . > Just insert them into the character sets. Change [a-z]\\w to [a-z_$][\\w$].\nYeah sorry I did add them to the character set and it works fine.\nI had a feeling the comment thing would make it really hard! Your final sentence works fine for my code though. Thanks!. For anyone wondering, here are all the tokens I've hacked on to get pretty close to my VS code theme \ud83d\ude1c. I'm also using Prism directly from GitHub to get the parameter highlighting.\n@RunDevelopment I kind of don't know what I'm doing with alias here and I had to add some \"fake\" tokens like func to prevent overriding things. Improving this would be welcome because it feels pretty awful to me!\nThe func definition is meant to fix set in obj.set() receiving keyword as a token instead of function.\n```js\nPrism.languages.insertBefore('javascript', 'keyword', {\n  module: {\n    pattern: /\\b(?:import|as|export|from|default)\\b/,\n    alias: 'keyword',\n  },\n  op: {\n    pattern: /\\b(?:typeof|new|of|delete)\\b/,\n    alias: 'keyword',\n  },\n  nil: {\n    pattern: /\\b(?:null|undefined)\\b/,\n    alias: 'keyword',\n  },\n  flow: {\n    pattern: /\\b(?:return|await)\\b/,\n    alias: 'keyword',\n  },\n  func: {\n    pattern: /(.\\s)[a-z_$][\\w$](?=(())/i,\n    lookbehind: true,\n    alias: 'method',\n  },\n})\nPrism.languages.insertBefore('javascript', 'punctuation', {\n  definition: {\n    pattern: /[a-z]\\w(?=:)/i,\n    lookbehind: true,\n    alias: 'property',\n  },\n  access: {\n    pattern: /(.\\s)[a-z_$][\\w$]*/i,\n    lookbehind: true,\n    alias: 'property',\n  },\n  dom: {\n    pattern: /\\b(?:window|document|navigator|performance|localStorage)\\b/,\n    alias: 'variable',\n  },\n  console: /\\bconsole\\b/,\n  class: {\n    pattern: /\\b[A-Z][A-Za-z0-9_]+\\b/,\n    alias: 'class-name',\n  },\n})\nPrism.languages.insertBefore('javascript', 'operator', {\n  spread: {\n    pattern: /.{3}/,\n    alias: 'punctuation',\n  },\n  arrow: {\n    pattern: /=>/,\n    alias: 'operator',\n  },\n})\nPrism.languages.insertBefore('javascript', 'function', {\n  method: {\n    pattern: /(.\\s)[a-z_$][\\w$](?=(())/i,\n    lookbehind: true,\n    alias: 'function',\n  },\n})\n```\nAlso one last thing I'd like to have: string highlighting in CSS attribute selectors. Example:\ncss\n.example[attr=\"value\"] {\n  color: red;\n}\nHow would I make \"value\" receive the string token?\n\nHere you can see tons of highlighting granularity as an example that you don't get by default with Prism: https://atomiks.github.io/tippyjs/tippy-instance/. Yup sure! You'd need to test it with a bunch of code samples of unexpected code (as you mentioned before with the ? : thing, but for most code using Prettier, it should work well. I haven't noticed anything unexpected on my website.. How do I use CSS extras? Is it documented somewhere?. I'm using a plugin for this which indirectly loads them for me, is the name language-css-extras?. It's a gatsby plugin, here's the source: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/src/load-prism-language.js\nI could just do some filesystem monkey-patching which I'm already doing elsewhere, to manually add the extras to the CSS file \ud83e\udd14 . ",
    "alexisdrakopoulos": "I've been playing around with it, and it seems to be the \"Normalize White Space\" that causes it. \nOkay so it seems to be the Normalize White space and the remove first line. Both of them cause this issue. \nEven without the Normalize White space it happens if I don't have a leading line. So you might be right. I'll go through the other CSS files.\nFixed it was my own CSS file, sorry. . ",
    "jaune162": "I test this bug start at v1.11.0.\nI commont all my code in index.js except import PrismJs from 'prismjs';. Then start my project and open my home page.\nIt always throw this exception when the version above '1.11.0'.. ",
    "colshacol": "I seem to be having a similar issue.\n(CodeSandbox to reproduce found here.)\nWhen using prismjs/components/prism-javascript and prismjs/components/prism-jsx, I receive two different errors. (At random. Never know which one will happen.)\n```\nMost commonly:\n\"Cannot set property 'comment' of undefined\"\nAnd sometimes:\n\"Cannot read property 'tag' of undefined\"\n```\nIt seems like the comment error happens more often when prism-jsx is imported after prism-javascript.\nHere are a handful of screenshots to give you a quick glance at it:\n\n\n\n\n\n\n. ",
    "brandon-rhodes": "Let me know if there's a better way to get this documented for Python users of your library \u2014 or if there's a quick fix that I wasn't yet able to see from the examples.. There, I added it. Thanks!. (By the way \u2014 none of the other <pre> tags in that file have the Python language specified, in case that's something you need to fix up later.). Okay, I was able to solve the problem: only accept # as a comment character if any simple strings that get opened previously on the line also get closed.. (I didn't try to be fancy and use back-references for single-vs-double-quoted strings because then I couldn't quite read the RE and convince myself it was correct. And \u00ad\u2014 are back-references like \\1 supported inside [^...]? Anyway, it seemed simpler to read this way.). ",
    "ripperhe": "OK! Thank you very much! . How I use this for Objective-C\uff1f What I should write after \"```\"?. But it not works for me. When I use it for ruby or bash is OK,  only use it for Objective-C is not available. \nI have add this to index.html\nhtml\n<script src=\"//unpkg.com/prismjs/components/prism-objectivec.min.js\"></script>\nBut it not works for me . This is the final result.\nhttps://ripperhe.com/ZYDebugo/#/Guide/quick-login\nThis is GitHub link\nhttps://github.com/ripperhe/ZYDebugo/blob/master/docs/Guide/quick-login.md\nI had add  objectivec.. @RunDevelopment So, how can I get the latest prism code for Objective-C? What should I write in index.html? Please tell the solution, thank you!  \ud83d\ude4f. @RunDevelopment OK, I see. Thank you very much. \ud83d\ude4f. ",
    "yakov116": "@fabsenet me too :grinning:\nI however use it more for documentation. . ",
    "Omar-Aziz": "thank you. Would I be able to control the size of the box too from the CSS file?. Perfect. Thank you.. ",
    "m47730": "Yes, I'm using: \n```\n      \"https://cdn.jsdelivr.net/npm/prismjs@1.15.0/components/prism-core.min.js\"\n      \"https://cdn.jsdelivr.net/npm/prismjs@1.15.0/plugins/autoloader/prism-autoloader.min.js\",\n      \"https://cdn.jsdelivr.net/npm/prismjs@1.15.0/plugins/normalize-whitespace/prism-normalize-whitespace.min.js\",\n      \"https://cdn.jsdelivr.net/npm/prismjs@1.13.0/plugins/command-line/prism-command-line.min.js\",\n```\nI'm using also fetch-inject to load primjs and its plugins. If i put 1.14.0 as version for command line plugin the result is the image that i posted before.. ",
    "mikhailshilkov": "It would help for async, but that can actually be any literal:\n\n. I can be any valid F# literal, because they are also user-defined.\nInterestingly, VS Code does hightlight async, task, seq and maybe, but doesn't highlight some others.\nVisual Studio highlights anything:\n\n. ",
    "riophae": "@Golmote Yeah... Sort of like that.\nI'm fine if you decide to reject this PR.. @Golmote I agree with you.. For example, the current markup definition doesn't handle this well:\n<div>{{ look_at_me }}</div>. Sorry for that, since I have been really used to always add a comma at the end of line (yes, even at the last line).... Fixed.. ",
    "Shivang44": "Hey, thanks for the quick response @Golmote. That does actually fix it! I've revised my PR accordingly . ",
    "myjian": "I also encounter this issue. Can we merge this PR?. ",
    "verfriemelt-dot-org": "another downside i forgot to mention is the language extention and the urge to take a shower afterwards! :D. sure. all done now.. i will replace the spaces with tabs no problem. i implement the missing default operators from pgsql, since there are quite some, which are not present in standard sql, that we use.\nso i go ahead and add them all at once, the complete list would be the following.\n!\n!!\n!~\n!~*\n!~~\n!~~*\n#\n##\n#-\n#<\n#<=\n#<>\n#=\n#>\n#>=\n#>>\n%\n&\n&&\n&<\n&<|\n&>\n*\n*<\n*<=\n*<>\n*=\n*>\n*>=\n+\n-\n->\n->>\n-|-\n/\n<\n<#>\n<->\n<<\n<<=\n<<|\n<=\n<>\n<?>\n<@\n<^\n=\n>\n>=\n>>\n>>=\n>^\n?\n?#\n?&\n?-\n?-|\n?|\n?||\n@\n@-@\n@>\n@@\n@@@\n^\n|\n|&>\n|/\n|>>\n||\n||/\n~\n~*\n~<=~\n~<~\n~=\n~>=~\n~>~\n~~\n~~*\n\nwhile im at it, i would go ahead and sort out any mixups between operators ( LIKE, AND, OR, XOR ) and  keywords.. while fact checking for some keywords i noticed that there are a lot missing, and while i added the all operators i figured, i could add all keywords present in the current pgsql version.\nthe list is quite long, and im not sure, if this is the right thing to do.\nso i could understand if you would reject that PR. i added this as an array in the current form because i dont know if its feasible with so many keywords, and i woulndt waste my time getting rejected after combining this query.\ni will see what i can do, maybe i split this up into pgsql and pgsql extra to avoid having only this big option for using this language.. debian unstable, nothing to fancy about it.\nits quite rare that i use node at all, so there is no additional config done to the system with regards to node or npm. ```\n $ npm test\n\nprismjs@1.15.0 test /home/easteregg/Coding/prism\nmocha tests/testrunner-tests.js && mocha tests/run.js\n\nThe token stream transformer\n    \u2713 should handle all kinds of simple transformations\n    \u2713 should handle nested structures\n    \u2713 should strip empty tokens\n[ ... ]\n```\ni noticed the output of the commands invoked and used the mocha module directly:\n./node_modules/mocha/bin/mocha tests/run.js\nwhen i invoke that script with the argument --languages=plsql i get the expected results.\nas you pointed out, it might have something to do, with that old npm version shipped with debian sid.\nit seems only newer versions pass off that argument.. depends, i would suggest updating the documentation and stating the npm version supporting this feature. ",
    "ybiquitous": "@mAAdhaTTah Sorry late reply. \ud83d\ude47 \nI merged right now, please check it when you have a time!. @RunDevelopment Sorry, I pushed now minified version via gulp. \ud83d\udc4d \n. \nBy the way, what about thinking about auto-minification?\nFor example, Using lint-staged and husky can force to generate and commit minified files before commiting *.js files.\njson5\n// package.json\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\",\n    }\n  },\n  \"lint-staged\": {\n    \"*.js\": [\"gulp\", \"git add\"]\n  }\n}\n. ",
    "NobbZ": "On exercism/exercism.io#3831 there is a screenshot of a bigger chunk of code which suffers from the same problem.. Thats pretty common in functional languages.\nAlso I haven't even checked so far, what would happen when one uses typevariables in a function.\nThey are preceeded with an apostrophe, and highlighted as a string as well, check this example which could be a stub for a function that maps a function over a list:\nfs\nlet map (f: 'a -> 'b) (xs: 'a list): 'b list = failWith \"not implemented\"\nIn this example we get 2 strings highlichted: 'a -> ' and 'a list): '.. ",
    "Zmoonpie": "i find the error in \"primsjs/components/index\"\nvar pathToLanguages='./prism-'+language\ndelete require.cache[require.resolve(pathToLanguage)]\n. @mAAdhaTTah. i find a demo in https://github.com/scfido/codeHighlighter.git. @mAAdhaTTah  can you help me please . sorry for my rudeness . ",
    "yinxin630": "Thanks, i will try it. Hi. I have used babel-plugin-prismjs. But it still not show line numbers.\nDebug code found that it has never executed the Prism.plugins.lineNumbers.getLine method.\n.babelrc\njson\n[\n    \"prismjs\", {\n        \"languages\": [\"clike\", \"javascript\", \"typescript\", \"java\", \"c\", \"cpp\", \"python\", \"ruby\", \"markup\", \"markup-templating\", \"php\", \"go\", \"csharp\", \"css\", \"markdown\", \"sql\", \"json\" ],\n        \"plugins\": [\"line-numbers\"],\n        \"theme\": \"default\",\n        \"css\": true\n    }\n]\nuse\n```js\nimport Prism from 'prismjs';\nconst html = Prism.highlight(rawCode, Prism.languages[language]);\nrender() {\n    \n            language-javascript} dangerouslySetInnerHTML={{ __html: html }} />\n    \n}\n.js\nsetTimeout(() => {\n    Prism.highlightAll();\n}, 0);\n```\nIf I add this code after Prism.highlight(), It can display the line number correctly.\n. Is magic. ",
    "edgexie": "@yinxin630 why it need a setTimeout ?. ",
    "cavo789": "Thanks a lot @yinxin630 !\nI had a similar problem: using Vue.js, in my HTML page, in the left part, I've an editor allowing to type markdown content and in the right part, the rendered html.\nBy displaying the page the first time, the rendering was correct like here below\n\nBy typing something in the editor, the HTML is automatically refreshed by Vue and the style is lost\n\nBut, by adding the timeout, the style is correctly applied.\njavascript\nsetTimeout(() => {\n    Prism.highlightAll();\n}, 0);\n\n. ",
    "johngcn": "How it is going, I am quite looking forward to this feature.. ",
    "verythorough": "Thanks, @RunDevelopment!. ",
    "Alxndr6eo1yG8Lv8AJ0TkliH6": "I use Firefox Developer Edition.. Now it works thanks!\nThis is my 1st time on githab. Do I need to click something because the problem is solved to me?. I downloaded a new script \"Previewers\". Yes (  Fixed bug #1496  ). Thank you very much =). ",
    "H3dg3": "I can reproduce it like this:\nSET @'quoted-variable' = 3;\nSET @'quoted-variable' = 3;\nIt seems to be a multiline issue. I will try to assemble a minimal example.. Here you go: https://jsfiddle.net/zL9hbdo4/2/\nI hope a fiddle is OK.. I just tested with the last commit on my end and it works like a charm. Hope the fix makes it into the 1.16.0 :+1: . ",
    "zackw": "For the line comments,\n/\\/(?:|\\\\\\n)\\/.*?(?:\\\\\\n.*)*?[^\\\\]$/m\n\nWFM in casual testing (see https://regex101.com/r/Q1xuiv/2 ).  I didn't bother with trigraphs, because I didn't see a good way to do it without negative lookbehind, which JS regexen don't have.  But trigraphs come up far less often.. I'm sorry, I will not have time to do that for at least two months.  (Throwing together regexes is easy.  Writing tests is hard.). ",
    "ExE-Boss": "TIL: The Java compiler does weird things with unicode escapes, I\u2019ll need to test it myself to make sure that it works (and probably see if I can get the JDK team to change it).. We could maybe support CSS variables and use postcss-custom-properties for rudimentary IE11\u00a0support.. @abulka Are you using element.innerHTML instead of element.textContent to insert visual code into the document?. @abulka You need to do:\n```js\nlet preview = $(\"#source_code_preview\");\npreview.empty();\nlet wrapper = $.parseHTML(' ');\nlet code = wrapper.find(\"code\");\ncode.attr(\"id\", id);\ncode.text(data);\npreview.append(wrapper);\n```\n(it should work, but I don\u2019t really use jQuery).. I\u00a0would\u2019ve thought that jQuery would pre\u2011wrap the result of\u00a0$.parseHTML(\u2026).. It\u2019s for XHTML, and from my testing (in\u00a0Firefox) XHTML supports CDATA.\nAlso, are you sure you weren\u2019t accidentally loading the XHTML document as HTML?. This needs rebasing.\n(also, I\u00a0thought this was merged already). review?(@mAAdhaTTah). I would still prefer if the master branch were to\u00a0only contain sources and the\u00a0minified files would only\u00a0be generated for\u00a0npm\u00a0publish and\u00a0such, but\u00a0that probably wouldn\u2019t work well with Bower.. I don\u2019t mean implement a polyfill, I mean keep using the current code path for browsers which don\u2019t support lookbehind, but add a new code path for browsers which do support this, which would convert the first ( into (?<= for lookbehind:\u00a0true during runtime if\u00a0it\u2019s\u00a0supported.. I think it should print a\u00a0warning or\u00a0an\u00a0error in\u00a0the\u00a0development console.\nAnd cause the\u00a0PrismJS build to\u00a0fail by\u00a0enabling a\u00a0config setting to\u00a0have inserBefore calls that fail cause the\u00a0whole build to\u00a0fail.. Well, PHP used .token.null at\u00a0one point too: https://github.com/PrismJS/prism/blob/c5160a1908d0f2a752cae394b1289a5b7ef956f1/components/prism-php.js#L53-L58\nAnd there might be\u00a0other languages that do\u00a0the\u00a0same.. > 2. JS uses keyword for null and JSON is supposed to be a subset of JS (it's not, but almost).\nIt is a subset of ES2019+, as ES2019 now allows unescaped \\u2028 and \\u2029 in strings:\njs\nlet str = \"a\u2028b\"; // This string contains an unescaped Line Separator\n\nThat said, I\u2019d still like to fix highlighting of .token.null.. I dunno, the null token makes a lot of sense for JSON, maybe we could add keyword as\u00a0an\u00a0alias?. I\u2019d like to\u00a0fix the\u00a0themes.. Well, even with the aliases, .token.null should still take precedence over .token.keyword.. After a\u00a0day of\u00a0thinking it\u00a0over, I\u00a0think it might be better to\u00a0just highlight it\u00a0using keyword as\u00a0an\u00a0alias.. Well, JSON5 is an extension of JSON.\nI believe that we can have it extend JSON for the most part, since we already support comments in\u00a0vanilla\u00a0JSON.. I\u00a0agree with this, because when I\u00a0wanted to\u00a0see all known failures, I\u00a0had to\u00a0load all language examples and\u00a0use\u00a0ctrl+F.. Actually, files loaded using the file: protocol can have URL fragments (the\u00a0part after\u00a0#) and query strings (the\u00a0part after\u00a0?). But Keep\u00a0Markup doesn\u2019t do\u00a0what I\u00a0want, which\u00a0is\u00a0to\u00a0remove all <span\u00a0class=\"token\u00a0*\"> and other markup from known languages, but\u00a0keep\u00a0it, and\u00a0just\u00a0it, for\u00a0unknown languages.. A good default would be\u00a0to\u00a0automatically skip the\u00a0highlightElement call for\u00a0elements which have an\u00a0unknown language inside highlightAll and\u00a0highlightAllUnder (but\u00a0still add\u00a0line\u00a0numbers).. I think a better solution would be a hook that would auto\u2011convert <br> elements into \\n.. How does this compare to\u00a0https://github.com/PrismJS/prism/issues/1215?\n\nAlso, I\u2019d like to add this to MDN.\n/cc @Elchi3 @escattone @jwhitlock. It might be a good idea to add tests for this.. You could probably use JSDOM  for\u00a0that, but\u00a0that\u2019s\u00a0probably for\u00a0a\u00a0separate\u00a0PR.. You can rebase this on\u00a0top\u00a0of\u00a0#1778\u00a0now.. Right, id is string, so the default TypeScript configuration doesn\u2019t complain.\n. Results:\n- Without https://github.com/PrismJS/prism/commit/a17303c40541eff04da06f35af7f077035aaa5f8: 16\u00a0bytes\u00a0saved.\n- With https://github.com/PrismJS/prism/commit/a17303c40541eff04da06f35af7f077035aaa5f8: 8\u00a0bytes\u00a0saved.\n. This will make things easier on\u00a0#1796, once I\u00a0resolve the\u00a0conflicts.. It works decently with TypeScript\u2019s checkJs, although that doesn\u2019t yet support @memberof.. The only solution would be if TypeScript would add support for @memberof or\u00a0if\u00a0we\u00a0would migrate portions\u00a0of\u00a0this project to\u00a0TypeScript.. In the meantime, you should get\u00a0#1780 and\u00a0#1776 merged.. Travis was acting\u00a0up, closing and reopening solves\u00a0it in\u00a0most cases.. https://github.com/PrismJS/prism/pull/1778 improved the\u00a0code size\u00a0too.. And how do you propose to do that?. Well, as\u00a0long as\u00a0we\u00a0don\u2019t use it\u00a0on\u00a0SVG elements and avoid using the\u00a0replace() method, we\u00a0should be\u00a0fine.. Probably.. This should be\u00a0moved into the\u00a0jsonp language which would be\u00a0extending\u00a0json.. Shouldn\u2019t null get the null alias to match JSON (see: #1727, #1733, #1735)?\nsuggestion\n            pattern: /\\bnull\\b/,\n            alias: 'null'\n        },\n        {\n            pattern: /\\bundefined\\b/,. That shouldn\u2019t be an issue, I just put that there so that I would remind myself that it\u2019s only run when the above switch doesn\u2019t match anything (I almost changed the following line from return o to return clone).. suggestion\n    pump([src(paths.main), header(`\n/* **********************************************. suggestion\n     Begin <%= file.relative %>. ```suggestion\n********* /\n), concat('prism.js'), dest('./')], cb);\n```. This is&nbsp;a&nbsp;built&#x2011;in&nbsp;API: https://nodejs.org/api/util.html. This doesn\u2019t need to be anHTMLElement:\n```suggestion\n * @param {Element} element The element successfully highlighted.\n```. There\u2019s nocontainerparameter for this function.\n```suggestion\n```.Documentisn\u2019t an instance ofParentNode, which is why this causes issues withtsc.\n```suggestion\n     * @param {ParentNode} container The root element, whose descendants that have a.language-xxxxclass will be highlighted.\n```. This doesn\u2019t need to be an HTMLElement:\n```suggestion\n     * @param {Element} element The element containing the code.\n```. This adds JSDoc for&nbsp;the&nbsp;Token.stringify(\u2026)` static method.\n```suggestion\n/\n * Converts the token to an HTML representation.\n \n * @param {string|Token|Token[]} o The token to convert to an HTML representation.\n * @param {string} language The current programming language.\n * @param {string|Token|Token[]} [parent] The parent token, if any.\n * @return {string} The HTML representation of the token.\n /\n```. It\u2019s still good to have that for type checking.. I\u00a0accidentally forgot to\u00a0add\u00a0it.. There\u00a0is\u00a0now:\nhttps://github.com/PrismJS/prism/blob/c56a848eb9a49875a404db8df463c5dc519b265f/code.js#L21. Ok, I\u2019ll\u00a0fix\u00a0it.\nI\u00a0originally tried to\u00a0avoid changing code.js and\u00a0downloads.js too\u00a0much.. Yes, this is the predecessor to Bliss, but it\u2019s not a 100% drop\u2011in replacement.. Because gulpfile.js already has traling commas in\u00a0most places.. Right, we\u00a0do\u2026. I eventually want to enforce comma\u2011dangle:\u00a0\"always\u2011multiline\" everywhere.. Because gulp\u2011eslint declares eslint as\u00a0a\u00a0peerDependency (or\u00a0at\u00a0least it\u00a0did when I\u00a0last checked). Typo (I\u00a0was trying to\u00a0do\u00a0ctrl+S, but\u00a0must\u2019ve unpressed ctrl by\u00a0accident). It\u2019s unnecessary, also I use the TypeScript style syntax for JSDoc types.. I\u2019ve made the\u00a0lint task depend on\u00a0everything in\u00a0default, since if\u00a0the\u00a0prism.js file hasn\u2019t finished building yet and the\u00a0lint task tries to\u00a0lint\u00a0it while it\u2019s\u00a0being\u00a0built, it will cause the\u00a0build to\u00a0fail (it\u00a0happened\u00a0to\u00a0me\u00a0locally).. The prop alias is\u00a0only available as\u00a0a\u00a0fallback when passed to\u00a0the\u00a0$u.element.set(\u2026)\u00a0method (it\u2019s\u00a0ignored\u00a0in\u00a0$u.element.create(\u2026), because create(\u2026) always creates a\u00a0properties\u00a0key).. suggestion\n * @returns {string[]} the list of dependencies. Empty if the language has none.. suggestion\n     * @returns {{testSource: string, expectedTokenStream: string[][], comment:string?}|null}. suggestion\n     * @returns {string[]}. suggestion\n     * @returns {string[]}. suggestion\n     * @returns {string[]}. ",
    "durka": "It is indeed fixed in the latest release.. ",
    "neginbasiri": "I am using node and webpack. node to run my build tools,\nnode/webpack4/es6/React. I followed the instruction and I get this error:\n`\nERROR in ../node_modules/prismjs/plugins/line-numbers/prism-line-numbers.css 1:9\nModule parse failed: Unexpected token (1:9)\nYou may need an appropriate loader to handle this file type.\n\npre[class*=\"language-\"].line-numbers {\n|       position: relative;\n|       padding-left: 3.8em;\n @ ./scripts/style.guide.js 28:0-62\n @ multi ../node_modules/webpack-dev-server/client?http://localhost:8080 ./scripts/style.guide.js\n`\n\nI already use MiniCssExtractPlugin.loader, css-loader, postcss-loader and sass-loader\nwondering how to pass this error?. ",
    "Templarian": "@RunDevelopment Thanks for writing this so quickly, exactly what I needed. The code/results looks good to me. \ud83d\ude03. @atomiks The theme will just use a more specific CSS selector.\ncss\n.token.tag.class-name {\n    color: red;\n}. @bilalmalkoc You probably need to disable smart quotes in your CMS (not sure what one you're using but a few have this feature).. ",
    "TokugawaTakesi": "\nIt'd be good to also have a proper workflow to compile the SCSS files if we were to add this to Prism.\n\nOf course. But maybe we need to reconsider the project file system for the logical separation source and destination folders.\n\nOtherwise, these files just sit there, not doing anything.\n\nLibraries often included in other files. Same for prismjs: .scss could be included in other .scss or .sass files, so at least sass warning that I mentioned will disappear. \n\nThe repo you mentioned links a gulp plugin for SASS, so maybe we could use it. Thoughts?\n\nI think it will be very good decision for the future library development. Please let me know how you want to re-organize your project file system before adding gulp.. ",
    "19majkel94": "Sorry, I've used GitHub editor to edit the file in browser.\nWill find contribution guidelines and fix this PR soon \ud83d\ude09 . That makes sense, I've only checked my docusaurus documentation for missing stuffs.\nI've pushed the suggested changes \ud83d\ude09 \nI miss the most the special keyword colouring feature (violet keywords on screenshot below) but I guess it would require changes in core to support this \ud83d\ude1e \n\n. @RunDevelopment Maybe I will make a separate PR with this feature in the future \ud83d\ude09 . Can we get contribution guide with the info about how to write tests for the new keywords?. @mAAdhaTTah The tests has been updated \ud83c\udf89 . I use Docusaurus that has Prism support but I think it might be hard to apply this kind of plugin:\nhttps://github.com/facebook/Docusaurus/blob/aae5c4dc85ab6f04d4d7c7ad99b926e57fdd4fb9/v1/lib/core/renderMarkdown.js#L49-L53. @RunDevelopment \nIs there any ETA or some blockers for this feature?\nI would love to release it ASAP and update Prism in Docusaurus for my docs page \ud83d\ude03 . Not removed, just sorted alphabetically. I've added the missing cases too.. ",
    "cbothner": "Okay, I definitely forgot to consider the knock-on effects of my changes on languages that extend ruby. Before I go changing tests of other languages/defining \u201cfunction\u201d back to clike\u2019s version in those language, I would like your opinion of whether this change is acceptable. I think the consistent lack of highlighting at call-sites is better than highlighting foo(bar) but not foo bar \u2014 this is what I\u2019ve seen in editors and on this website. But others may disagree.\n\nAdditionally, I found that my PR is also still not ready to merge, since it broke static method definitions.\nruby\nclass Foo\n  def self.bar # This is broken in my PR: <def> <self>.bar where <_> is \u201ckeyword\u201d\n  end\nend\nI can\u2019t seem to make it look back past two other highlighted segments so I\u2019d appreciate guidance.. @RunDevelopment I had intended for class method definitions to be highlighted that way, since that\u2019s how I\u2019m used to seeing it in atom, vscode, Github, and Textmate. A more complete survey, however, reveals that\u2019s far from universal: vim and pygment (which ruby-lang.org uses, and I\u2019m taking that as an endorsement of its style) both highlight def self.foo with self and . different colors than foo. (Interestingly, both do def in a different color than self, but that\u2019s not important)\nAlso to my horror I have found it is possible to do this\n```ruby\nclass Foo\n  def String.bar\n    42\n  end\nend\nString.bar # => 42\n```. Ah, nice job thinking like a platform maker. Here I was thinking we had to make a decision, and your suggestion preserves the user\u2019s a ability to choose. I like that.\nI think I correctly understood your merged PR #1531 and didn\u2019t use the workaround you initially proposed\u2026. Good catch. (Although I\u2019ve never seen someone put a newline between def and the method name). ",
    "huweihuang": "The error will appear in the following ways\uff1a\n```shell\nshell scripts\n```\nfailed to load prism syntax: shell\uff0c\nthis problem can be solved like :\n```bash\nshell scripts\n```\n. I just run the command gitbook install\nthe output is :\ninfo: installing plugin \"prism\"\ninfo: install plugin \"prism\" (*) from NPM with version 2.4.0\ninfo: >> plugin \"prism\" installed with success\nso the prism version is 2.4.0\uff0cbut the latest version is v1.15.0?\n. ",
    "Lsnsh": "@huweihuang gitbook-plugin-prism plugin default not support shell as an alias for bash. but you can customize alias, like this:\njsonc\n// book.json\n\"pluginsConfig\": {\n    \"prism\": {\n      \"lang\": {\n        \"shell\": \"bash\"\n      }\n    }\n}",
    "Eugleo": "@RunDevelopment Sure, I wondered whether some \"registration\" of the new file will be needed. Done! \nI'm quite bussy at the moment, but rather than simply copying over the tests from Scheme, I'll reserve some time in the future to do some better ones. So, no tests now, if it's ok.. @RunDevelopment Should be ok now. Thanks for the heads up about the checks \u2014 I'm fairly new to GitHub and don't really understand these things \ud83d\ude03 Will you merge now or after the tests? I'm not sure when I'll be able to add them.... @RunDevelopment I know Racket well, but from the conversation in the issue I linked I got the feeling that it will be better to have a minimal implementation. But I agree with you; I'll work on a more complete grammar/regex definition for Racket and rework this PR.. @mAAdhaTTah There is, I just don't have time atm. I'll try to make some work on it during the holidays.. No idea. Will fix, sorry.. ",
    "PatrickSachs": "Alright then. Thank you for your time regardless.. ",
    "LiarOnce": "Currently completed 1, 3, 5, 6 and I will modify it completely later.. @RunDevelopment \n4 is completed (I am not sure if this is the case).\nBut I don't know how to add tabs for indentation because I don't understand it very well.. @RunDevelopment Visual Studio Code. @RunDevelopment Is it indent (Tab key)?. @RunDevelopment \nI tried to reach No.2, is it like this?. @RunDevelopment \nI canceled to extend c-like because it got an unexpected error:\nUncaught TypeError: Cannot set property 'keyword' of undefined\nIt worked fine when I removed c-like. @RunDevelopment \nNow it works well.. @RunDevelopment The alias has been restored.. @mAAdhaTTah \nThe minified file is uploaded.. Fixed.. @RunDevelopment No, there are a lot of variables and constants that are unique to GameMaker Language.. Those are constants that I missed.. @mAAdhaTTah Yes.. ",
    "kostasx": "Made some changes. Should be OK now.. ",
    "miriambudayr": "Hello,\nI would like to work on the first bullet on the list: \"Bold italic text is not supported. E.g. bold italic, also bold italic\".\nMay I claim this portion of the issue? Thanks!. ",
    "bennycooly": "I think you are supposed to use the class command-line, not command-line-prompt.. ",
    "sheljohn": "My bad; it seems to be because prism-c needs to be loaded beforehand, in order for the prism-cpp syntax to work properly. Is that normal?\nhtml\n<script src=\"//unpkg.com/prismjs/components/prism-c.min.js\"></script>\n<script src=\"//unpkg.com/prismjs/components/prism-cpp.min.js\"></script>\n. It might be good to consider packaging all dependencies in each .js file, and protecting definitions within if blocks to avoid redefining things. Would it be of interest if I contributed code to do this automatically?. ",
    "marc-medley": "/;.*/ is comment string wildcard \nproperty\u2026\\*)\u2026 is for a checksum field that may appear at the end of the executable portion of the line:\nN3 T0*57 ; This is a comment\nN4 G92 E0*67\n; So is this\nN5 G28*22\nsee https://reprap.org/wiki/G-code#.2A:_Checksum\n. > \u2026 also add strings before they destroy our comments.\ngood catch.. @RunDevelopment Any insight (time estimate) regarding when https://github.com/PrismJS/prism/pull/1572 might actually be merged?. ",
    "ahotzler": "\nLooks like you need to update / fix the function_feature test\n\nThank you very much for the hint. I will do this in the next days. > Looks like you need to update / fix the function_feature test\nWhat to do now? This was my first Pull Request :-). ",
    "Timmmm": "Thanks for the reply - what I ended up doing was looking through the tokenisation stream and finding unmatched tokens (since nothing matches space by default) and converting those to space/tab tokens. Seems to work ok. Feel free to add it as a plugin if you like!\n```\nPrism.hooks.add(\"after-tokenize\", function(env) {\n    // Tokenise leading spaces and tabs after the rest of the tokenisation\n    // because its really difficult to do otherwise.\n    for (let i = 0; i < env.tokens.length; ++i) {\n        let str = env.tokens[i];\n        if (typeof str === \"string\") {\n            console.log(JSON.stringify(str));\n            // If the first token is a string it doesn't start with a newline but\n            // we start visualising whitespace anyway. After that we only start\n            // when we encounter a newline character.\n            let vis = (i === 0);\n            let replacement = new Array();\n            // Replace space or tab characters with tokens.\n            for (let k = 0; k < str.length; ++k) {\n                if (vis) {\n                    switch (str[k]) {\n                    case \" \":\n                        replacement.push(new Prism.Token(\"space\", \" \", undefined, \" \", false));\n                        continue;\n                    case \"\\t\":\n                        replacement.push(new Prism.Token(\"tab\", \"\\t\", undefined, \"\\t\", false));\n                        continue;\n                    }\n                }\n                if (replacement.length > 0 && typeof replacement[replacement.length-1] === \"string\") {\n                    replacement[replacement.length-1] += str[k];\n                } else {\n                    replacement.push(str[k]);\n                }\n                vis = (str[k] === \"\\n\");\n            }\n        env.tokens.splice(\n            i, 1,\n            ...replacement\n        );\n        i += replacement.length - 1;\n    }\n}\n\n});\n```. ",
    "bilalmalkoc": "It can be related my cms. Idk. It is wordpress. But i put normal and italic quotes. All way to out italic. But i am glad to it is not prism error. . ",
    "nterray": "Yes\n. Thanks for the fix!\nDo you have any approximation date when it will be released?. ",
    "wibimaster": "Done ;)\nSorry for the missing :). ",
    "Jocs": "\nWouldn't it be better if the callback were invoked after the complete hook?\n\nYeh, I think it's better, I'll update this PR.. @RunDevelopment Updated this PR, can you help review it?. @RunDevelopment I have run gulp and build the min file. \ud83d\ude38 . @mAAdhaTTah I think we can give a notification in the changelog. After all, according to the documentation, the callback should be placed after after-highlight, and I really need such a callback.. @mAAdhaTTah \bBTW, when will release this bugfix version?. @mAAdhaTTah thank you!. ",
    "BRevzin": "This had nothing to do with Prism, and had everything to do with some other code highlighter competing with it.. ",
    "mariusschulz": "That's exactly what I did to unblock myself for now. I highlighted my code example using the JS language, but the results aren't great since quoted properties and string literals use the same color:\n\nIf you feel uncomfortable modifying JSON directly, we could introduce a new JSON5 language that extends JSON. However, I'd prefer to add comments to JSON directly. Comments are useful in general, e.g. to indicate that some parts have been omitted:\njson5\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    // ...\n}. For further consideration, here's what the above screenshot would look like if the JSON language supported comments. I think it looks much better! \n\nWe could reuse the comment patterns from the clike language:\ndiff\nPrism.languages.json = {\n+  comment: [\n+    {\n+      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n+      lookbehind: true\n+    },\n+    {\n+      pattern: /(^|[^\\\\:])\\/\\/.*/,\n+      lookbehind: true,\n+      greedy: true\n+    }\n+  ],\n  property: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/i,\n  string: {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    greedy: true\n  },\n  number: /-?\\d+\\.?\\d*([Ee][+-]?\\d+)?/,\n  punctuation: /[{}[\\],]/,\n  operator: /:/g,\n  boolean: /\\b(?:true|false)\\b/i,\n  null: /\\bnull\\b/i\n};. Sure, I'll be happy to! Just wanted to run this by everyone first. I'll send a PR tonight!. Closing this issue, now that support has landed in https://github.com/PrismJS/prism/pull/1595.. ",
    "outsideris": "Sorry for late, I will fix them until next weekend.. I started to work on it. \nSorry, I really was busy for company things.. I'm updating code as your great feedback. Thank you!!\nI will push new commits soon after I'm done. Sorry for late response.. I modified them as your feedback.. @maartenvanderhoef It is not parse hcl2 and hcl2 is still experimental.\nFor me, name \"hcl\" is fine because HashiCorp also call them as \"HCL\" and \"HCL2\". How do you think? . I rebased onto latest master.. I fixed as your feedback. Sorry for bordering you because I'm not regexp expert.. > Also, please replace all arrays which only contain one item with said item.\nI believe I didn't understand what you mean exactly. I can't find more arrays which only contain one item.. fixed.. @RunDevelopment \nI moved interpolation into string as your advice. Thanks. -> 8022bed85c91b886d6399e6187fd06b0b8a6edf0\nI supported heredoc. -> c05d49806eaeedd02e92ca18a4e87cbb7a910de7\n. Fixed! :). Done.. @RunDevelopment Fixed. Sorry for I missed it.. @RunDevelopment You are awesome. I couldn't make this PR without you. Thank you.. Aha! Sorry, I missed it even I searched it.. 3.  Can I capture non-capturing group in inside?. 1. I don't understand it. I just matched it with above pattern.\n2. I removed it.. 2. I think greedy is not needed here.. You are right.\n\nNumbers are assumed to be base 10. If you prefix a number with 0x, it is treated as a hexadecimal. If it is prefixed with 0, it is treated as an octal. Numbers can be in scientific notation: \"1e10\".\n\nI have inspired it from sublime terraform addon, but I don't think kKmMgG is not needed here.. 1. HCL support only double-quoted strings.\n\nIt is hard to handle. HCL heavily use double-quoted strings like below. That's why I said greedy is not needed. If string is greedy, all interpolation in double-quoted is treated as string. Any idea?\n\n\n. Done except this comment. \n\nQuestion: Does HCL support nested interpolation\n\nI don't think so. . > Just move interpolation into ['string'].inside. I mean, isn't inpolation just part of a string?\nThis is a good approach. I will try to find a way to support interpolation under string. I didn't fully understand prism's language definitions.. I tried it. However, I feels it is too complex to maintain to me.. https://github.com/hashicorp/hcl/blob/master/test-fixtures/basic_bool_string.hcl\nI believe hcl treats TRUE as boolean.. fixed. In my test, given example isn't captured here. It is captured as string.\nBTW, I fixed it to handle given example.. fixed.. fixed.. fixed.. fixed.. fixed. fixed. I misunderstood your previous review, so I matched two patterns for a property. I restored it.. good. I fix it with what you suggested. However, I defined 0x[\\da-f]+ first, because 0x1a isn't matched.. fixed. Ok.. Really thanks. I changed /<<-?(\\w+)[\\s\\S]*?^\\s*<<\\1/m to /<<-?(\\w+)[\\s\\S]*?^\\s*\\1/m, because last << is not needed.. ok. fixed. fixed. ok. Good catch.. fixed. Sorry, I missed them.. ",
    "robmorgan": "@outsideris any luck? need a hand?. @outsideris no need to apologise for open source work mate ;). Good job! \ud83d\udc4d . ",
    "maartenvanderhoef": "@outsideris Will this also parse hcl2 ? If not, would it be an idea to name this hcl1 ?. hi @outsideris, you're right, let's stick Hashicorp's own naming. . ",
    "sr8e": "I think that it will solve my problem.. ",
    "plaindocs": "Thanks @Chris-Johnston @RunDevelopment @mAAdhaTTah . ",
    "amikrop": "Thanks!. Found it, through .line-highlight. Thanks, already resorted to implementing a solution based on this idea, which I present for future reference (includes business-logic-specific code too, though): https://pastecode.xyz/view/ba2ed1b8. ",
    "peterpeterparker": "@mAAdhaTTah thx for pointing me in the right direction. Actually I already did load correctly the extra languages but I faced a problem because I include prismjs in a Web Component where I don't want to bundle extra languages but only load them if necessary in the projects where the component is used.\nAnyway I think I found a work around, according the user specified language the component will inject and load the scripts from unpkg (https://github.com/fluster/deckdeckgo/blob/master/src/components/slides/deckdeckgo-slide-code/deckdeckgo-slide-code.tsx)\nThx again for the answer and library.\nBtw. I quoted you in the documentation of my component (https://github.com/fluster/deckdeckgo/blob/master/doc/slides/slides.md). @mAAdhaTTah no worries my loader is already implemented ;) but cool to know if case I would notice problem later on \ud83d\udc4d . ",
    "bit-player": "@RunDevelopment Right you are! The copy of Prism I updated was not the copy loaded into the page. Sorry for the distraction.. ",
    "Nemzag": "Thank pro your help,\nbut it is strange that \"prismjs\" propose support of this language without any result ?. I'm not very good in JavaScript (beginner) to start to configure by my self this language-git \"js\" & \"css\", I'm still happy to get good result with HTML, CSS, PHP & JS language, but really I don't comprehend why each user's should make this modification by himself, it's such a waste of time, if we addition all the time we use all of us to make them. It would be surely better if the standard commands had directly specific syntax colors according to theme chosen pro install.. I comprehend the problem of file size, but \u00ab\u00a0prism\u00a0\u00bb could be proposed in two version light & heavy, at least we will have the choice\u2026. ",
    "ncassetta": "The only annoying thing should be print, which is a command in Python2 and a builtin function in Python3\n# Python 2\ns = 'mum'\nprint 'I love', s\n\nand\n# Python 3\ns = 'mum'\nprint('I love', s)\n\nIn Prism print gets the same color of while, for etc, while (in Python 3) it should have the same of len abs etc.. Ok, thanks!\nI have not tried all the plugins yet!. ",
    "TMWilds": "@RunDevelopment Thank you for the feedback! Seems to mostly come down to me not being the best with regexes, and a few oversights also... \nI'll aim to make the changes and additions you suggested soon. Thanks again!. Took me much longer than I expected to get round to doing this, but the changes @RunDevelopment have been added!. @RunDevelopment maybe an obvious question, but how do you recommend resolving those conflicts  given they're generated by the build process? Rebase and then re-build perhaps?. Thanks @RunDevelopment, that seems to have gone well!. You're completely right with the @. I did borrow heavily from the SQL regexes here, which is why this slipped in. \nI believe the backslash is so you cannot have a single backslash at the end of the string. \nFor example, this prevents us matching \"foo\\\", which is an invalid string due to the last quotation mark.. ",
    "suvamkundu": "\n. \n. @RunDevelopment I have done that too. Not helping.. \nAs you can see here, the content inside code block is that. Any idea or any hack anyone knows to solve this issue. I have seen inside Util prism is replacing it &lt but that part is not executing I guess.. thanks for responding @RunDevelopment. If util is replacing it then why should I do it again? and the current content inside the HTML is this -\n\n     \n           jQuery(\"#setRowsModal\").find(\".grid-vals\").each(function() { //check if inputs are valid\n           var thisVal = jQuery(this).val();\n           if (thisVal && thisVal < 12) { //Value cannot be equal to 12 as atleast 2 rows are required\n                  var val = parseInt(thisVal);\n                  vals.push(val);\n                  var cls = \"col-md-\" + val; //Create class name from the input value\n            } else {\n                  valid = false;\n                  return false;\n            })\n     \n  \n. ",
    "abulka": "I too noticed swathes of code being lost when viewed using Prism, till I stumbled across this Github issue and realised that I had to always replace the < character of source code being displayed in html.  For example the following Python code gets prematurely chopped:\n  \n        \n    class Automaton:\n        kernel_core = {\n            0: lambda r: (4 * r * (1-r))4,  # polynomial (quad4)\n            3: lambda r, q=1/4: (r>=q)(r<=1-q) + (r<q)0.5 # staircase (life)\n        }\n    def __init__(self, world):\n        pass\n    </code>\n</pre>\n\nunless I first run the javascript on the source code code fragment data before injecting it into my html\ndata.replace(/\\</g, '&lt;') ;\n\nwhich fixed the problem for me.. My html\n<div id=\"source_code_preview\">\n</div>\n\nMy javascript dynamically inserting the prism highlighted source code.  All works ok.\nvar preview = $(\"#source_code_preview\")\npreview.empty()\n\n  preview.append(\n    '<div class=\"prism_wrapper\"\"><pre><code class=\"language-python\" id=\"' +\n      id +\n      '\">' +\n      data.replace(/\\</g, '&lt;') +\n      \"</code></pre></div>\"\n  ).\n",
    "volado": "@ExE-Boss is right.\nThe only correction is that you have to wrap $.parseHTML() in $():\njavascript\nlet wrapper = $($.parseHTML('<div class=\"preview_wrapper\"><pre><code class=\"language-python\"></code></pre></div>'));\nAdditionally, code.text(data) relies on textContent, which helps to prevent XSS. append(data) and data.replace(/\\</g, '&lt;') don\u2019t do the trick.. It would be logical. But $.parseHTML() returns an array of DOM nodes.. > All of the keywords/names related to this feature will be highlighted as constants.\nThat\u2019s the way PHP behaves in some circumstances, such as echo X. However, I shall agree that there are other contexts, such as function f($x): type {}.\nPrism definitely shouldn\u2019t mark unsupported elements as constants.\nOK, let\u2019s stick with PSR\u20111, not language itself, i.\u00a0e., underscore as a word separator only, no lower\u00ad\u2011case letters. Should we have single\u00ad\u2011letter constants (X), then? I think we should. It doesn\u2019t affect type declarations, group use declarations, etc.. Thank you!\nBut it\u2019s sad that the PR was merged before Travis CI has finished building :(. OK, thank you!. Great, I\u2019ll make this PR today.\nI\u2019ll keep null and parent (which are not in the list of keywords) in the RegExp until the next my PR.. You\u2019re welcome! Thank you for your work!. Great! Thank you very much for your help!. It seems to me that components/prism-hdl.min.js shouldn\u2019t have been committed.. > Don't on and off pretty much behave like booleans?\nThey do. But clike doesn\u2019t implement support for on and off. Anyway, these are only tokens for specific directives.\n\nThat would be ideal but it's usually quite hard to find this expression.\n\nnginx syntax is pretty strict. A directive can be found by its position. A directive is placed at the beginning of a text or preceded by ;, {, }.\nnginx\nname_1 parameters_1;\nname_2 {\n    name_2_1 parameters2_1;\n    # A comment...\n    name_2_2 parameters_2_2;\n}\nname_3 parameters_3;\nNames of directives can be described with \\w+.\njavascript\n'DIRECTIVE': {\n    pattern: /((?:^|[;{}])\\s*)\\w+[^;{]*?(?=\\s*[;{]|$)/, // Directive\u2019s name and parameters\n    lookbehind: true,\n    inside: {\n        'NAME': /^\\w+(?=[\\s;{]|$)/ // Name of a directive\n    }\n}\nWe have to find name and parameters first, because ^\\s*\\w+ can also catch a parameter.\n\nWould you like to add a PR implementing your proposed solutions?\n\nSure! Most ideas are already implemented. But I have doubts about directives. What do you think about searching for directives by their position? Doesn\u2019t it sound too naive?\n\n/(^|\\s)(?:\\d*\\.)?\\d+[a-z]*(?=$|[;\\s])/\n\nI\u2019ll try to insert your regex into my code.. > This is a suggestion from my side because highlight.js also highlights on and off in the doc.\nPersonally, I can\u2019t see the difference between on/off and other tokens. For example, ssl_verify_client supports four mutually exclusive properties: on, off, optional, optional_no_ca. expires has epoch, max, off, but not on. That\u2019s why I find the highlighting of on and off confusing.\nAnyway, I\u2019ll try to add it for compatibility.\n\nI think it's a good approach but your current pattern does not account for strings:\nnginx\nname ';oh no';\n\nI forgot to mention I also have a greedy string pattern. It catches ';oh no'.. I\u2019ll make a PR on the weekend.. It does. Thank you.\nMaybe, this works better.\njavascript\n'comment': {\n    pattern: /(^|[\\s;{}])#.*/,\n    lookbehind: true\n},\n'function': {\n    pattern: /((?:^|[;{}])\\s*)\\w+(?:([\"'])(?:\\\\\\2|(?!\\2)[\\S\\s])*\\2|\\\\[\"';{]|[^\"';{])+/,\n    lookbehind: true,\n    inside: {\n        'attr-name': /^\\w+(?=[\\s;{]|$)/\n    }\n}\nHere are some test cases I used:\n```nginx\nname parameter1;\nname \"parameter1\";\nname parameter1 parameter2;\nname parameter1 \"parameter2\";\nname \"parameter1\" parameter2;\nname para\\;meter1;\nname \"para;meter1\";\nname \"para\\;meter1\";\ninternal;\ninternal    ;\nA multiline parameter\nname \"para\nmeter1\";\nname {\n    name parameter1  'parameter2' \\; par#ameter3;\n    name parameter1 \\\" 'hello' par#ameter2;\n    name parameter1; name parameter1;\n    name parameter1 { 'hello';\n    name {\n        internal;\n        name parameter1 parameter2;\n        name para;meter1; # An error!\n        name para{meter1; # An error!\n        name parameter1 {; # An error!\n    }\n}\n. >javascript\n\n'comment': {\n  pattern: /((?:^|[{};])\\s)#./m,\n  lookbehind: true\n},\n```\n\nHm, this look similar to the lookbehind I used before. Could you explain, what exactly helps to avoid the bug you mentioned, because the example has problems with\nnginx\nlocation = \"/example\" # This is a comment\n{}\n# can be immediately preceded by [\\s;{}], so \\s* doesn\u2019t work well.. Thank you!\n\nthey only accept # at the beginning of a line for a comment\n\nThis answer from Stack Exchange is not complete.\n```nginx\nlocation = \"/example\" # This IS a comment. There is a space\n{# This is a comment after \"{\". No spaces required\n    return 200 \"Hello, world!\";# This is a comment after \";\". No spaces required\n}# This is a comment after \"}\". No spaces required\nlocation = /example # This IS a comment. There is a space\n{}\nlocation = \"/example\"# This is NOT a comment. There is no space\n{}\nlocation = /example# This is NOT a comment. There is no space\n{}\n```\nProof.\n\nSo (?:^|[{};])\\s* also guaranttes that the comment is preceded by [\\s;{}].\n\nIt doesn\u2019t guarantte that the comment is preceded by \\s.. > Sorry, but I don't see the proof\nDamn. There are examples of ; # and { #, but there are no examples of anything #. I\u2019m sorry. See the explanation below.\n\nAlso, is there a spec page of the NGINX configuration syntax?\n\nI\u2019m not sure. I haven\u2019t found it yet. I use nginx -t -c /path/to/nginx.conf to reveal the rules.\n```nginx\nevents # A comment\n{\n    worker_connections 512;\n}\nA comment\nhttp# This is not a comment. There is no space\n{\n    server {# A comment\n        listen 80;# A comment\n    location = \"/example1\" # This is a comment. There is a space\n    {# This is a comment after \"{\". No spaces required\n        return 200 \"Hello, world!\";# This is a comment after \";\". No spaces required\n    }# This is a comment after \"}\". No spaces required\n\n    location = /example2 # This is a comment. There is a space\n    {}\n\n    location = \"/example3\"# This is not a comment. There is no space\n    {}\n\n    location = /example4# This is not a comment. There is no space\n    {}\n}# A comment\n\n}\n```\nnginx outputs the following:\nbash\nnginx: [emerg] unknown directive \"http#\" in /path/to/nginx.conf:9\nnginx: [emerg] unexpected \"#\" in /path/to/nginx.conf:21\nnginx: [emerg] invalid number of arguments in \"location\" directive in /path/to/nginx.conf:25\nThus, the # This is not a comment part in your example is actually a comment.\nnginx\nlocation = \"/example\" # This is not a comment\n{}\nP.S. I hope I don\u2019t bother you too much :). > So after a string, there has to be a white space or ;.\nIt looks that way.. > this should work.\nYour solution is perfect!. > There aren't any comments in the following, are there?\n\nnginx\nname # foo;\n\nnginx recognizes # foo; as a comment. The punctuation at the end of the line is the only problem in your previous solution. Yes, name # foo; causes a syntax error, but parsing # foo as a parameter is wrong. If someone wants to pass a # with a preceding space, he should use quotes: name \" # foo\";. For example,\nnginx\nlocation # A comment;\n{\n}\ncauses nginx: [emerg] invalid number of arguments in \"location\" directive, because nginx doesn\u2019t take # A comment; as a parameter. Removing spaces after # has no effect.\nI think, your previous solution could be fixed easily:\njavascript\n'directive': {\n    pattern: /\\b\\w+(?:(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1|(\\s)#.*|[^;{}\"'\\\\]|\\\\.)*?(?=\\s*[;{])/,\n    // ...\n}\n\nAlso, I have another question: How does NGINX handle the following:\nnginx\nname # am I a comment;\n;\n\nNo syntax errors. The first token punctuation span is unwanted.\nOh, I see the GitHub highlighter fails on some examples  :). @RunDevelopment, thank you! I\u2019ll test it and write you back in a couple of days.\nWhat about the next pattern?\njavascript\n'directive': {\n    pattern: /(^|\\s)\\w(?:[^;{}\"'\\\\\\s]|\\\\.|(\"|')(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\s#.*|\\s+)*?(?=\\s*[;{])/,\n    // ...\n}\n. > Why don't you just overwrite clike's boolean in extend?\nI think the boolean regex should be executed before class-name, because a boolean can\u2019t be a class/trait name (see the table in #1693).\nCurrently, Prism converts\nphp\n<?php\nclass true\n{\n}\nto\nhtml\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">true</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\nOverwriting boolean from clike doesn\u2019t fix it.\nUsing insertBefore() I get\nhtml\n<span class=\"token keyword\">class</span> <span class=\"token boolean constant predefined-constant\">true</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\nAnyway, I can make changes if this behaviour is intentional. Maybe I overdid this.. Same with null.. Yes, I can keep it simple :)\njavascript\nPrism.languages.php = Prism.languages.extend('clike', {\n    // ...\n    'constant': [\n        {\n            pattern: /\\b[A-Z_][A-Z0-9_]*\\b/\n        },\n        {\n            pattern: /\\b(?:null)\\b/i\n        }\n    ],\n    'boolean': {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'constant'\n    },\n    // ...\n});\nfalse and true get token boolean constant.\nnull loses keyword and gets token constant.\nIs it better?. > class true in PHP would be a syntax error\nYes.\n\nI will say, conceptually, Prism is not a strict linter.\n\nRight. I definitely tried to make it lint. I\u2019ll fix that.. ",
    "Mogztter": "@RunDevelopment I didn't find any tests on this plugins, is there a way to add tests ?. OH! we really need tests :smile: \nCan I submit a proposal to add unit tests on this plugin ? Otherwise it will be a nightmare to fix :neutral_face: . > If we wanted to go all-out, something w/ JSDOM + snapshot tests could work. \nThat's exactly what I had in mind :+1: \nI've added a failing tests but I don't know how to solve this issue. To be honest I'm a bit lost with all the start/end position...\n$ npm run test:plugins. > I think if we're going to do this (introduce testing for plugins), we should break up this PR into one that introduces the framework and maybe some basic, passing tests, then a separate PR that adds tests for & fixes this bug. \n@mAAdhaTTah Sure no worries.\nMy initial bugfix is a one-liner. I can revert this change and only add a test that check that the extension has been registered ? ie. Prism.hooks.all['before-highlight'] and Prism.hooks.all['after-highlight'] are not empty ? Does it sound good to you ?. @mAAdhaTTah Done, see https://github.com/PrismJS/prism/pull/1646. @mAAdhaTTah Rebased :+1: \n@RunDevelopment You're right, I can reproduce the \"order swapping\" regression. With this fix the test \"should preserve markup order\" is failing :wink: . > I need to think about this a bit. I'm not in love with mocking createRange, but if JSDOM doesn't have it yet, then maybe that's fine?\nIf you have a better idea, I'm more than interested! :wink: \n\nAlso, the test setup is in the keepmarkup test file rather than being something reusable between tests. \n\nI don't think we can reuse much (or anything at all).\nWe could reuse the \"fake DOM\" part but that's really just 4-5 lines of code and not all the plugins check for the same things.\nFor instance Custom Class checks:\njs\nif ((typeof self === 'undefined' || !self.Prism) && (typeof global === 'undefined' || !global.Prism)) {\n  return;\n}\nBut copy to clipboard checks:\njs\nif (typeof self === 'undefined' || !self.Prism || !self.document) {\n  return;\n}\nAnd this plugin checks:\njs\nif (typeof self === 'undefined' || !self.Prism || !self.document || !document.createRange) {\n  return;\n}\n\nLastly, there's the question of whether / how we can bootstrap Prism in an isolated way between test suites.\n\nNode.js has a cache but it's possible to invalidate the cache so every require is a new \"instance\":\njs\ndelete require.cache[require.resolve('../../../prism')]\nrequire('../../../prism')\nWe could create a tiny wrapper to require Prim in the tests:\njs\nconst util = require('../plugin-test-util')\nutil.requirePrism()\n. @RunDevelopment I've removed Node.js 4 and Node.js 9 (EOL) and added lts/* (Node.js 10) + node (Node.js 11 current stable release).\nSo Prism is building against  Node.js 6, 8, 10 and 11.. Conflicts resolved and I've moved the tests to the tests directory.. > Last nit: please remove the package-lock.json, as we don't have one of those at this time.\nDone :+1: . createRange is not implemented in JSDOM: https://github.com/jsdom/jsdom/issues/317. I'm using a fake createRange function to register the \"actions\". This test currently fails, <a></a><b></b> are inverted in the result.\nInput\nhtml\n<code class=\"language-javascript\">x<a></a><b></b>y</code>\nOutput\nhtml\n<code class=\"language-javascript\">x<b></b><a></a>y</code>. As far as I know, this change is mandatory otherwise we can't fake self and document in the unit tests.\nIn a browser environment both self and document are global and will be resolved.. Node 4 is EOL since 30/04/2018: https://github.com/nodejs/Release\nI think we should set a minimum version in the package.json:\njs\n{\n  \"engines\": {\n    \"node\": \">=8.11\",\n    \"npm\": \">=5.0.0\"\n  }\n}\nI'm using the following configuration in .travis.yml to test against LTS (and the latest stable release of Node):\nnode_js:\n- 'lts/*'\n- 'node'. I guess since you don't have to update the version of Node when a new LTS comes out.\nI don't think we should test against EOL versions of Node.js.\nIn my opinion lts/* + node is a good default. But if you want to build against Node 6 and Node 8 I'm fine :smile: . Yes the name is confusing but it's just the latest LTS release (current) :neutral_face: \nRight now it's Node.js 10 (latest LTS) and Node.js 11 (latest stable release).. > I almost think snapshot tests would be better here than all these assertions. The other thing I've done is something like:\nYou tell me \ud83d\ude09 \nDo you know a good snapshot testing library ? In my opinion we should do what you suggest:\njs\nexpect(result.innerHtml).to.equal('<some>html</some>');\nKeep it simple.. I just get back to the code and it won't work because we are using a dummy implementation of createRange (since jsdom doesn't implement it).\nSo innerHTML will be empty/undefined.\n. ",
    "sardmhmd": "You need to leave a comment indicating the requested changes.. ",
    "spectras": "Wow that was quick.\nJust a short comment to thank all for the amazing work. :+1: . ",
    "vai0": "That does it, thanks!. ",
    "Schniz": "oh, sure! no problem. thanks! \ud83d\ude38 . ",
    "anton-balaniuc": "I have fixed the incorrect order of keywords (sorted alphabetically now) and namespace pattern contains a shorter regex now. As well the keywords test for java has been updated and new module test has been added. . Keywords are now sorted.. Thanks a lot,  the pattern section contains a shorter version now.. ",
    "thec0keman": "The bundle does say it is running 1.15, but I was thinking of building manually and see if that is any different.. Yeah I just tested it off of master and am seeing the same behavior.. I realize my mistake, thanks for helping me debug!\nI had all of the pieces I mentioned above, but I forgot I also had a WIP ES6 import that was stomping on the after-tokenize hook.\nThanks again!. ",
    "tousei-seiso": "\nAlso, your website does not load Prism correctly, so I cannot reproduce the described bug.\n\nSorry for the mistake, please check the website again.\nAt upper box (with line number), line highlight(yellow background) doesn't follow with vertical scrolling.\nAt lower box(without line number), line highlight(yellow background) does follow with vertical scrolling.\nIs this correct behaviour  as its specification? If so, I'd like someone to improve it so that we can keep highlighting specified line when scrolling vertically.. >The missing vertical scrolling is definitely a bug.\nGlad to know you recognize this issue.\nExpecting that this issue of Coy theme will be fixed.\nI think Coy theme has two other bugs, so I'll write these issues in another  posts.. >This is definitely a bug of Chrome. The font sizes at which the lines will go out of sync depend on both >your current zoom-level and your system's DPI scaling settings.\n\nBut it seems that choosing a multiple of 2px will hide this bug on 100% DPI scaling with no zoom.\n\nThanks to the comment. I confirmed that IE11, Edge, Fire Fox shows the stripe correctly.\n\nRemoving line 80 in prettify.css or adding a line font-size: inherit; in line 38 in prism.css will solve your problem.\n\nUnfortunately, I tried both of above but nothing changed with Chrome. I sent the feedback to Chrome developer from Chrome/menu/help.. ",
    "eakarpov": "\nCould you please add a description on how to reproduce the bug?\nA link to the website or JSFiddle showcasing the bug would be even better.\n\nI can't properly tune Prism via CDN, so...: https://jsfiddle.net/65ernfb7/1/\nI use the same code in my problem place:\nhtml\n <pre class=\"command-line line-numbers\" ref=\"pre\">\n    <code class=\"language-cpp\" ref=\"code\">\n       {{code}}\n    </code>\n</pre>. > @eakarpov The issue is the indentation. You would need to write it as such:\n\n<pre class=\"command-line line-numbers\" ref=\"pre\"><code class=\"language-cpp\" ref=\"code\">{{code}}</code></pre>\n\nHmm.... This fixed the issue... But why is it important? It is rather strange to have necessity of single-lined code-block.. ",
    "sgon00": "@RunDevelopment Thank you very much for your reply. After your comment, I have changed my pattern to be pattern: /^[\\w\\d\\[(@-]*((?!^)\\ )?[\\])~\\/\\w\\d-]*[>%$#].*/m now. It works well so far. My complete js code is at https://gist.github.com/sgon00/836386ba8b16e95297e4e5aa0a7089ae. I did many modifications. I am new to all of these. So I am not sure if my solution is the proper way to handle it or not. but so far, it works well. Just one more weird behavior. I don't know why I need to add \\n to 'cmdOut': /\\n.*/,. I thought .* should work, but it doesn't. Thanks a lot and closing this issue. . ",
    "farlock85": "Looks like it's a combination of these 2 lines:\n```\ncode {\n    @include fontsize(theta, all);\nline-height: 1rem;\n\n}\n```\nOnly when I remove both of those it lines up again nicely.. ",
    "oncletom": "Done, I've made the change \ud83d\ude42 \nThanks for guiding me.. ",
    "lippirk": "Okay no problem - thanks for having a look!. Maintainers do not want to change the theme. ",
    "nnnik": "If Im at it I might as well remove the requirement that the closing sequence for a block comment needs to be at the start of a line. This requirement was removed from AutoHotkey a while back.\n(^[^\";\\n]*(\"[^\"\\n]*?\"[^\"\\n]*?)*)(?:;.*$|^\\s*\\/\\*([^*]|\\*[^\\/])*\\*\\/)/m. See: https://github.com/PrismJS/prism/pull/1703\nAs the oficial AutoHotkey forum is using this great tool, we will probably keep making enhancements.\nI look forward to working together :). > However before we can merge this, we will have to make a few changes.\n\nThe comment pattern has two parts:\n(^[^\";\\n](\"[^\"\\n]?\"[^\"\\n]?))(?:;.$) to match single-line comments and\n^\\s\\/*[^\\n](?:\\n(?:[^]|*[^\\/])*(?:*\\/)?)? to match multi-line comments.\nYou only changed the second part but we might as well take this chance to improve the first one as well, so let's start with that:\nThe single-line comment pattern can be simplified to ;.. The $ at the end is redundant (see .) and the lookbehind group (^[^\";\\n](\"[^\"\\n]?\"[^\"\\n]?)*) is to prevent matching ;s inside strings.\nI removed the lookbehind group because Prism has a better way to deal with that: greedy matching. So making string greedy will have the same effect and makes the pattern simpler.\n\nI dont know about the single line comments for now. I haven't looked into them extensively.\nEspecially since I haven't checked how extensive the string detection is - especially with the 2 syntaxes around and continuation sections etc. - so I'm going to leave them as it stands and might work on them at another time.\n\nNow to multi-line comments:\nFirst of all, there are 3 possible end of line sequences: \\n, \\r, and \\r\\n. So the pattern doesn't support \\r line ends.\n\nI kind of assumed that the parser would handle the newlines accordingly. AutoHotkey can deal with all types of Unicode newlines - sadly thats not a feature javascript can handle apparently.\nFor now I guess it would be fine if we only cover all \\r and \\n options.\n\nSecond, the requirement for */ to close the comment is to be at the start of a line (plus spaces). This means that the following is a comment:\n\nThats incorrect - the latest AHK Version use exactly the behavior I implemented.\nI didn't read the source code though - I only ran several tests with a few AHK scripts.\nNamely:\n/**/\nMsgbox this is still a comment\nAnd will go on without closing.\nMsgbox /*\nMsgbox This is not a comment */\n/* This is all part of the\nComment */Msgbox this is code\nMsgbox the following is recognized as a comment:\n/*\nSo this would be correct:\n/*\n * I do end here */ Msgbox not there\n\n(Leading and trailing spaces should not be part of any token, so I use the lookbehind group to remove them.)\n\nOh I will fix that\nI will also add more unit tests to verify the new features.\n. I added multiple regexes to the comment matching in order to split of multi-line comments from single-line comments.\nI have one issue with the unit tests though. For multiline testing I added a few new tests which involve new-line characters. Locally those were encoded as \\r\\n and I had to match that in the string. If somebody changes those line-endings locally (for reasons I cannot understand) the unit tests will actually fail. \nWhich way would you suggest around this? Or is it fine and I'm just worrying for nothing?. So I went ahead and looked into single line comments and it seems that the only requirements that AHK has regarding single line comments are:\n\n; must follow a whitespace character or new-line\ncontinuation sections disregard ; for comments unless set in their options\n\nWhich actually means that strings will be torn apart by ; if it follows a whitespace\nSee:\nFileDelete,  test.txt\nFileAppend, \"This is a comment: ; inside the comment\"\n, test.txt\nFileAppend, \"`nThis is not a comment:; still just text\"`n\n, test.txt\n;FileAppend,  % \"`n This is a comment and would cause an error if it wasn't commented out (commentception?) ; inside the comment\"\n;, test.txt\nFileAppend, \n(\n;This is not a comment\nIts just text and more text\n/*\nNo comments here\n*/\n), test.txt\nWill result in the creation of test.txt with the content:\n\"This is a comment:\"\nThis is not a comment:; still just text\"\n;This is not a comment\nIts just text and more text\n/*\nNo comments here\n*/\nIt will be hard to detect whether \"\" is currently inside an expression or not so highlighting it all the time doesn't seem to be wrong. Since ; interupts it not highlighting it then seems to be the safest option.\nE.g.:\nMsgbox This is text\nMsgbox \"This is still text\" this too \"and also this\"\nMsgbox % \"This is text\" thisIsAVariable\nSoundBeep \"13\", thisIsAVariable ;since both parameters can be expressions\nSingle line comments can be reduced to:\n/(^|\\s);.*/m\nusing this logic.. I greatly simplified single-line comment matching and made the behavior equivalent to autohotkeys own behavior. Strings don't take precedence over comments in my browser but I will probably modify the regex for strings in order to cover that case.\nSadly greedy cannot be used since continuation sections exist.. This one is a minor fix that fixes if( and while(. ",
    "timaschew": "Thanks a lot!. ",
    "stephanmax": "Thanks for your feedback, @RunDevelopment. I applied all changes as requested. PS. Say Hi to my hometown Leipzig \ud83d\ude03 . The semantics behind And and Not is actually a bit different than the notion of functions. They have to be HDL scripts in the same folder with the same name. Actually, they could be called Bananarama as long as there is a Bananarama.hdl file next to it.\nThere is only an informal spec in the appendix of the course\u2018s accompanying book.. > So the function name has to relate to a file name (excluding builtins like And I suppose).\n\nI think this pretty much falls within the concept of a function so can we land this feature?\n\nYou got me convinced! Yes, it is actually like a function \ud83d\udc4d. True, I accidentally put the single dot as punctuation, but it is rather just a double dot range operator here. 'operator': /=|\\.\\./ should do the trick, right?\n. You mean \"iff\"? No, that\u2018s just short for \"if and only if\".. \\w doesn't work, because the underscore _ is not a valid character for an identifier.\nDo you want me to use i instead of A-Za-z?. Great catch. Done.. ",
    "jiantosca": "Cool, sounds good!. ",
    "pgilad": "In the meantime, as it seems the npm release is taking forever, I use this receipt in my package.json:\n\"prismjs\": \"PrismJS/prism#master\".\nIt's annoying because it makes the install step slower, but it works directly from git.. ",
    "sanjay51": "It's probably not a bug with prism - here is how I fixed it.\nI'm developing wordpress gutenberg blocks where this is happening, and my hunch is that some preprocessing step (with gutenberg) is messing the content of \"code\" blocks.\nHere is how I fixed it: I renamed \"code\" to \"codex\" in the html tag, prism JS, prism CSS, and now the problem is fixed.\nThanks for looking into it anyway.. ",
    "sourabhv": "I'm using javascript, and not sure where the token stream is coming from.\nI just tried using this and it worked:\njavascript\n      Prism.languages.insertBefore('javascript', 'keyword', {\n        'gap': {\n          pattern: /\\?\\?\\?/,\n          greedy: true,\n        },\n        'delim': {\n          pattern: /(?:@{3})((?:(?!@{3}).)*)(?:@{3})/,\n          greedy: true,\n        },\n      });\nI picked keyword randomly because I saw it in the token stream above. Is there a way to insert my rule as the very first rule?. Maybe prism-react-renderer is changing them or it's possible I logged something internal to their library and not prism's.\nSo I wanted that rule to work before every other rule in every language and tried this snipped and it seems like it's working.\njavascript\nconst rules = {\n  gap: {\n    pattern: /\\?\\?\\?/,\n    greedy: true,\n  },\n  delim: {\n    pattern: /(?:@{3})((?:(?!@{3}).)*)(?:@{3})/,\n    greedy: true,\n  },\n};\nObject.keys(Prism.languages)\n// there are 3 funcs in every lang definition. This is to remove them\n.filter(lang => typeof Prism.languages[lang] === 'object')\n.forEach(lang => {\n  const language = Prism.languages[lang];\n  const firstRule = Object.keys(language)[0];\n  Prism.languages.insertBefore(lang, firstRule, { ...rules });\n  Object.keys(language)\n    .filter(ruleKey => {\n      const rule = language[ruleKey];\n      return (\n        rule.inside &&\n        typeof rule.inside === 'object' &&\n        Object.keys(rule.inside).length > 0\n      );\n    })\n    .forEach(ruleKey => {\n      language[ruleKey].inside = {\n        ...rules,\n        ...language[ruleKey].inside,\n      };\n    });\n});. Works like a charm. Thanks for all the help :) I'll close this issue now.. ",
    "fabiospampinato": "\nwhich is not what you want\n\nIt isn't? I want all plugins and language definitions to be available to me when I load them.\n\nWe recommend using babel-plugin-prismjs with Webpack\n\nI don't think that's what I want, I want everything to be available to me in case I need it, why would I want to narrow down the list of languages manually or list them all maunally?. Keep in mind that a WebPack bundle is not necessarily meant for the web. I'm using WebPack to bundle an Electron app, the few extra kilobytes getting included in the bundle do not matter for me.\nRight now I'm using this function for loading languages, which is basically a reimplementation of the included one, minus support for peer dependencies, which I'm not sure what their purpose is.\nI don't understand, why would it be bad to make prismjs work with webpack and then suggesting to use the babel plugin as a further optimization rather than forcing to use the babel plugin?. > Saying \"you should use components.js w/ node + the babel plugin with webpack\" is a lot easier than saying \"you can use components.js with webpack and node, but only if you want everything, otherwise, use the babel plugin.\"\nI can't really say the former sounds a lot easier than the latter to be honest, if anything the latter seems a bit clearer to me actually.\n\nand I think would add all the plugins as well\n\nI'm using prism with webpack and I'm not seeing any extra plugins or languages getting loaded, but they are available to me if I need them, i.e. I can load them.\n\nWe could add an option to the babel plugin to add everything, like \"languages\": \"all\" or something of that nature, which could solve the problem.\n\nIMHO this is the wrong solution, I shouldn't have to use a babel transform just for things to work. Like: there isn't a babel transform for loading all of lodash, because that doesn't make sense, there's instead a babel transform for loading some of lodash.. ",
    "bencoman": "I'm guessing this is the pertinent test file...\nhttps://github.com/PrismJS/prism/blob/master/tests/languages/smalltalk/string_feature.test\nwhich I'm guessing should maybe be like this...\n```\n''\n'foobar'\n'foo''bar\nbaz'\n\n[\n    [\"string\", \"''\"],\n    [\"string\", \"'foobar'\"],\n    [\"string\", \"'foo''bar\\r\\nbaz'\"]\n]\n```. @RunDevelopment thankyou for the fix.. @RunDevelopment, Thanks for the prompt response.  I see your regex changes - they make perfect sense, so it should work but I'm not sure the best way to test it in practice to observe the highlighting.  (P.S. it would be cool if all I needed to do was pull down a menu at https://prismjs.com/test.html to select the PR, and it loaded the language files direct from the PR.). ",
    "SilencerWeb": "@RunDevelopment, you are right, I'm sorry for this, I mixed up file extensions :(. ",
    "nealwon": "OK!\nBut I still have this issue, maybe my develop environment is damaged.. ",
    "SetTrend": "\nIt will insert a new <br> which Prism will ignore (just like all other HTML elements).\n\nNope. The <code> element lies within a <pre> element (as suggested by the Prism homepage), so \\r\\n and \\n are both interpreted as newlines by the browser. I debugged my session and I can confirm that \\n characters are being inserted.\nI will upload a sample in short time.. Is there a public CDN available for Prism I can link to in my sample page?. Nope. Checked.. I created a test page now (the following ZIP file contains the HTML file):\nPrismJS Test.zip\nYou were right: The browser adds <br> tags instead of using \\n.\nSo I needed to replace every occurrence of <br> with \\n:\n```js\nlet code = document.getElementsByTagName(\"code\")[0];\ncode.innerHTML = code.innerHTML.replace(/[<]br[/]?[>]/gi,\"\\n\");\nPrism.highlightElement(code);\n```\nIt was the reason you suggested. Thanks!\n\nThough, AFAICS, the reason is based on the fact that prism.js uses var code = element.textContent;. If Prism would use element.innerText instead, the <br> would be converted to \\n by the browser itself, automatically:\n\n\n\n\nWouldn't it make sense to update the code line in prism.js accordingly?. From the description you mentioned I can only read the inteded behaviour and a performance issue.\nIn contrast to the documents' statement, innerText has become a standard meanwhile:\n. Please pardon me for being ignorant. Would you mind elaborating on the issues you see?\nI'm just trying to being constructive.\nI tested three different scenarios now:\n\n<pre><code> </code></pre>, as suggested by Prism documentation.\n<code></code>\n<pre></pre>\n\nFrom my perspective I don't see any negative consequences when applying #1766. On the contrary.\n<pre> is supposed to retain newline characters, so it doesn't make sense to remove them (in the original code, see merge request).. I'm not sure whether these edge cases really matter. However, of course, I refrain from my pull request.\nJust to finish the discussion, regardless of the result:\n\n\nI wouldn't expect nodes deliberately designated to be display: none to still appear. I personally would consider this behaviour unexpected, or even not desired, if I happened to stumble over it.\n\n\nI would expect nodes deliberately designated to be display: block to be displayed with line-breaks. Otherwise I wouldn't expect the web page designer to have applied that attribute to those nodes in the first place.\n\n\nA few minutes ago I applied display: none to the <code style=\"display: none\"> element. The result: innerText was the same as textContent: Both omit child elements when the element is hidden.\n\n\nI comprehend that old (pre-standard) IE implementations behave differently. For these edge cases element.innerText || element.textContent should have sufficed.\n\nI would have considered the innerText behaviour - including its line-break behaviour - much more what I'd expect from the converted result as the textContent behaviour.. The hook appears to be incorrect. The correct hook name is: before-highlight\njs\nPrism.hooks.add('before-highlight', function (env)\n{\n  env.code = env.element.innerText;\n});. As @RunDevelopment correctly mentioned in his reply to #1764, innerText also adds \\n for non-nested block elements, mimicking what the user sees. I guess the complex calculation for what's supposed to add a \\n character is what's making innerText slower than textContent.. As I wrote yesterday in #1764, I'm now going to close this pull-request.\nI'd be interested, though, to learn how many users preferred the current behaviour over the suggested behaviour. I believe the current behaviour is odd, but I'm open to opinions, though.. I actually did.\nI called $ npm install prismjs --save-dev and import Prism from 'prismjs'; Still I am only getting these nine languages.\nWhat am I doing wrong?. Yes, more or less. I'm using webpack/TypeScript. Webpack checks for dependencies and creates a single, bundled, JS file.\nI want to have all the languages available in the first place. As I'm creating an editor I require them all.\nWhat would be the suggested best method to do this with webpack?. How would I get PrismJS load all the languages if I'd be using the CDN version instead of bundling PrismJS?. Yes, but as I wrote, it doesn't unleash all the languages.\nI, however, want to get all the languages.\nFrom the documentation it isn't clear what's the best practice to load Prism with all the languages on-board right from the beginning. No filtering, no explicit language selection, just all the languages there are.\nIs there a loadAllLanguages API function call?. <pre> is supposed to retain newline characters, so it doesn't make sense to remove them.. This line caused text tokens to be altered from \\nTest\\n to Test.\nSo what was ...\n```javascript\nvar i;\nTest\nvar j;\n```\n... in the original <code> element became ...\njavascript\nvar i; Test var j;\n... when highlightElement() was called.. See my sample HTML file in issue #1764.\nCheck the result when you alter the code content to:\n```javascript\nvar i = 1;\nTest\nfunction()\n{}\n``. D'oh! You are right. I misread the\\u00a0as\\u000a`.\nThe Firefox debugger I'm using is not very stable. While debugging it turned out that the debugger stripped the new-lines from my test when I stepped over that function. I then examined that function and misread the literal value.\nYet, it's like you wrote: There is no need to escape the non-breaking space. I can remove the change, though, if you prefer.. ",
    "olets": "Thanks @RunDevelopment \ud83d\udc4f . ",
    "bitst0rm": "Hi RunDevelopment, this is what i got:\ninput:\nPrism.hooks.add('after-tokenize', function (env) {\n    console.log(env);\n    if (env.language !== 'markdown') {\n        return;\n    }\noutput:\n...\ngrammar: {comment: /<!--[\\s\\S]*?-->/, blockquote: {\u2026}, code: Array(3), title: Array(2), hr: {\u2026}, \u2026}\nlanguage: undefined\ntokens: (20) [_.Token, \"\u21b5\",\n...\nWithout Patch:\n\nWith Patch:\n\n. I make a simple test without to use web worker and plugins and got the same result:\nexample.html\n```html\n<!DOCTYPE html>\n\n\n\n\n\n\n\nBOLD\n`python\nif True:\n    print \"hi\" ` (note: 3 back ticks w/o space)\n` javascript\nvar foo = bar;\nfunction test() {\n  console.log(\"hello\");\n} `(note: 3 back ticks w/o space)\nBOLD\n12345\n\n\n\n\n\n\n\n\n    var text = document.getElementById('test').textContent;\n    console.log(Prism.highlight(text, Prism.languages.markdown));\n\n\n\n```\nLog without Patch, no highlighting in fenced code blocks:\n```\nexamples.html:36 \nBOLD\n</span><span class=\"token code-language\">python</span>\n<span class=\"token code-block\">if True:\n    print \"hi\"</span>\n<span class=\"token punctuation\">\n</span><span class=\"token code-language\"> javascript</span>\n<span class=\"token code-block\">var foo = bar;\nfunction test() {\n  console.log(\"hello\");\n}</span>\n<span class=\"token punctuation\">\nBOLD\n## 12345\n```\nLog with patch, correct highlighting in fenced code blocks::\n```\nexamples.html:36 \nBOLD\n</span><span class=\"token code-language\">python</span>\n<span class=\"token code-block language-python\"><span class=\"token keyword\">if</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\"hi\"</span></span>\n<span class=\"token punctuation\">\n</span><span class=\"token code-language\"> javascript</span>\n<span class=\"token code-block language-javascript\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">\nBOLD\n## 12345\n```. Thank you, so important that piece of the 3. phantom.. ",
    "logiclink": "see helloworld_coy.html in the zip archive helloworld_coy.zip, please open with Edge.\n. ",
    "rumkin": "This is an example of different behavior. Highlighting should be the same in both cases.. ",
    "atomize": "@RunDevelopment, hey there & thanks for the speedy reply! I'm glad you think this feature is useful. Ohh... Aha! The File Highlight plugin does seem to be just a small step away from having the ability to split line ranges and stay efficient. I would be happy to take this on and see what implementing the efficient line splitting feature in the File Highlight plugin might require.. Sure thing, I have a question actually... I have successfully extended the prism-file-highlight.js to include this functionality, no fetch no promises, and it works just fine as it did, caching the response and the DOM etc.... However, as I was testing it didn't work at first, until I saw the comment in the plugin's index.html reading <!-- The File Highlight plugin is already included into Prism.js build -->  -- once I included a script tag to my modified version beneath the call to prism.js - all worked well -- So my question, how do I bake in my modified plugin source to the core, since this plugin is baked in? Also, should we close this and continue discussion of this in a different place? or is here good? =)\n. Hooray! thanks for the infoz on how to build... I think this is good to go: #1813 - seems to be working on the page build and I over commented the additions in the source file  just in case. :nerd_face: \nNote that I changed the File-Highlight plugin index.html to demonstrate it working. You may or may not want to keep this/let me know how you would like it to be if you need me to do that as well.. hmm not sure why this time it seems to be failing checks. any insight? #1813\nedit:\nnevermind, some gulp thing from my package.json... I got it.. I actually just noticed this as well while messing with my fork from the file-highlight enhancement, but I was having a hard time replicating it as it seemed to only happen on my local dev server that was auto-reloading and I chalked it up to that.\nI could take a look in to this and report back. Also, I think that your #1816 suggestion is the best, as the 'download button' seems a bit out of scope with the fileHighlight plugin, especially since it depends on ANOTHER separate plugin (toolbar). It would seem reasonable for both the simplicity of the file-highlight plugin, as well as for ease of debug and integration, that suggestion #1816 be taken in to consideration. Just my 2 cents. . oh was just poking around other issues and saw that this might be fixed? I do think I have a solution though. lmk. . This is simply best practices when listening for DOMContentLoaded as can be referenced here Checking_whether_loading_is_already_complete\ndeveloper.mozilla.org. In our case it is in fact unlikely this condition will apply but I included it in the plugin source of my code because it was separate from the core. . I would also like to hear someone elses opinion though, as I am very green to Prism core, although it seems rather straightforward. I would hate to assume.. ",
    "temnoregg": "If you think it would be better then change it - I am not good at regexp and I have probably copy pasted from somewhere - actually it is year old or so - so I don't exactly remember where or how I got it - I have just started using bower so I wanted to add it to primary repository to use it with the project\n. ",
    "Chris-Johnston": "My mistake, I had assumed that a grouping would be necessary. I just tried it and you are right.. ",
    "TemplarVolk": "I copied the classes from the C# component, so I'm guessing pointers should be added there as well.. Oh right, sorry. How should i go about doing it then.\nThe -> is being parsed as - and > operators, but if i use punctuations over operators the ... will be parsed as 3 . punctuations. ",
    "kuldar": "Thank you for the suggestion, Michael! The new version reads better for sure. \ud83d\udc4d I also ran Gulp to include the minified version.. ",
    "zaborek": "Thanks for bearing with me; this is my first github edit.. ",
    "mjrogozinski": "Sure thing.. Two reasons:\n1. # comments\n2. parenthesis\nI haven't found any generic script-like syntax so I chose the simplest possible syntax :)\n. CMake has different ones. This entire line will be replaced.. This entire line will be replaced.. Unfortunately, it's not that simple. if() is also followed by (. This is the list of built-in functions generated by CMake's help. You can define your own functions, but it's quite rare and there is no way to know it with a regex.. Since the order is the same as generated from CMake's help cmake --help-command-list cmake --help-property-list cmake --help-variable-list, I propose to use the \\w+ approach and not group them. . Welcome to CMake world ;). Of course not :). I somehow couldn't get it to work. How to see if this example works? When I open examples.html, it says that CMake has no examples.. In general constructs like ifs and whiles are used very sparingly during CMake \"development\" so treating them like keywords or functions does not really matter. I think it's enough they are \"recognized\" by the highlighter and coloured in some way.. It covers much more than is used in everyday development. I will give it a spin on my blog and evaluate whether we need some additional commands/functions/keywords.. Ok. Could you give me a hand with punctation?\nWe need ( ) $< >. $< is a generator expression, so we have to match those two characters, not only <. Yes, that's right. Thank you!. In CMake everything is a string. The only numbers look like the one you pasted. Numbers are used for versioning mainly and are separated with a dot.. Multiline strings - yes.\nBashslash escapes - yes. (edit). Simplified.\nI will go now. Thank you very much for your help!\nI will address further comments tomorrow.. I agree that user-defined functions should be highlighted differently. However e.g. WIN32 should be highlighted differently than add_library. All of the IDEs supporting CMake work this way and it makes reading code easier.\nI propose to use the keyword highlighting for add_library, find_package, if, while - everything that's generally known to CMake and written with lowercase with parens after.\nI agree with the function proposal of yours. Let's use it.\nLet's leave properties as they are.\nNow, what can we do with the current keyword marking? It's different than the others. Can we use some other class?. Fixed. Fixed. Yes, we might use that. However, we need a bit more sophisticated pattern. The one proposed matches the 4 from e.g. CTEST_P4_CLIENT and somehow \\r\\n.\nI will revisit this issue after examining other comments.. I guess the other one with &gt;? I still haven't figured out how to run this example, hence the trivial mistakes.. Sorry about that, I think I have fixed them properly. However, I might still need to convert it to tabs. Isn't there some automatic an formatter like clang-format in C++?. As you pointed out: \"We could give the variables list the variable highlighting as well.\"\nThe variable concept matches what's underneath the current keyword as e.g. CMAKE_ABSOLUTE_DESTINATION_FILES is a variable holding a list of files and can be used using variable semantics.. I've pushed my proposal.\nIt lacks function tag as I tried the proposed one and it did not match what I expected i.e. bar in expression bar().. ok. Strange, according to Regexr, your regex works just fine. I will debug this a bit more.. Ok, sorry about missing this answer earlier.. Fixed.. Yes, you are right.\nI've pushed the correction.. done. Of course, but not to comments, right?. pushed. 'comment': /#.*/, Should this be a non-capturing group?. Well, it's not a group, so probably not :). Ok, sure I misunderstood that.. Now it should be fine. How is it possible?\nfoobar is matched without this flag in the function_feature.test.. Good idea. Keyword has to be followed by (.. pushed. "
}