{
    "flavioribeiro": "PlaybackHandler should know what container plugins should be used to play the resources\n. https://github.com/globoi/player/commit/2660521315cdfcf14d8273f1fe3cf7b021028e5b\n. Core should be also responsible for handling global plug-ins\n. https://github.com/globoi/player/commit/6ecaa595ec219b548a789794096c8872a6517b66\n. It's not a bug. We've tested with python's SimpleHTTPServer, which doesn't support byte range.\n. It's not a bug. We've tested with python's SimpleHTTPServer, which doesn't support byte range.\n. it needs to receive poster option on embed\n. watermark should receive \"top-left\", \"top-right\", \"down-left\" or \"down-right\"\n. do we have plans to open source our auditude plugin? I'm +1 on this but we need to talk with managers and take a look on the contract details\n. https://github.com/globocom/player/commit/150a566e633bdd99f80c41c0a8c699da16a430c5\n. Stats plugin is on master, It dispatches stats:report events on the container. You can add new metrics (statsAdd) or just listen to reports.\n. Since the HLS plugin supports it natively, I think that all we need is display the media control and bind seek events\n. Since html5_video canPlay() is called before HLS plugin (on https://github.com/globocom/clappr/blob/master/src%2Fcomponents%2Floader%2Floader.js#L34) I think this issue can be closed right now. \nWe can reopen when thinking about clappr behavior on mobile browsers.\nrefs #117 \n. closed on 74c1329df7934243a000cab51c91b08abb812e14\n. Refs #13 (duplicated?)\n. I'm using an extremelely easy lib called mousetrap. We can use to solve this also.\n@towerz @thiagopnts what are the shortcuts we're planning to add? \n. space -> play/stop or play/pause\n. It seems that clappr is not handling rebuffering events after the first one on html5 playback. Since we don't have events like flash's BUFFERING and BUFFER_FULL , I think that the best approach is to follow currentTime and buffered.end() values and figure out a good heuristics to define if the playback is stuck or not.\n. yes, I'm trying with mp4 and the main problem is indeed with media api (video tag behavior). I'm gonna try to suggest something here in a pr.\n. indeed there's an old bug (2011) which was not solved yet. I found this stackoverflow thread also. I think that a \"good\" workaround is to look if currentTime >= buffered.end(buffered.length -1) and if so, dispatch the buffering event. We could check it every timeupdate or progress event, for example. What do u think about it?\n. something like this might work. I made some tests using charles and it worked fine, however there's some entropy on the numbers reported when the bandwidth is floating right in the same rate of the video (there's some cases where the browser says it has 3 seconds of buffered video but it keeps stuck). To summarize, this snippet should solve 90% of the cases. \n``` diff\ndiff --git src/playbacks/html5_video/html5_video.js src/playbacks/html5_video/html5_video.js\nindex 4424ecb..e47affe 100644\n--- src/playbacks/html5_video/html5_video.js\n+++ src/playbacks/html5_video/html5_video.js\n@@ -198,9 +198,20 @@ class HTML5Video extends Playback {\n         break\n       }\n     }\n+    this.checkPlaybackState()\n     this.trigger(Events.PLAYBACK_PROGRESS, this.el.buffered.start(bufferedPos), this.el.buffered.end(bufferedPos), this.el.duration, this.name)\n   }\n\ncheckPlaybackState() {\nif (this.el.currentTime >= this.el.buffered.end(this.el.buffered.length - 1)) {\nthis.trigger(Events.PLAYBACK_BUFFERING, this.name)\nthis.buffering = true\n} else if (this.buffering === true) {\nthis.trigger(Events.PLAYBACK_BUFFERFULL, this.name)\nthis.buffering = false\n}\n}\n+\n   typeFor(src) {\n     return (src.indexOf('.m3u8') > 0) ? 'application/vnd.apple.mpegurl' : 'video/mp4'\n   }\n```\n. yes, you are right! I'm gonna change this and submit a pull request.\n. This issue was created to solve problems related to multiple instances on the same page and their playback plugins that have communication between js and as3. Since this issue was solved and we have uniqueId's on base_object (https://github.com/globocom/clappr/blob/master/src%2Fbase%2Fbase_object.js#L13) I think we can close this. \n\n@towerz can you confirm if I'm correct or not and close this one? thanks!\n. see #21\n. - Playback Plugins (html5, hls, smoothstreaming)\n- Container Plugins (watermark, poster, pre-roll)\n- Player Plugins (pip, mosaic)\n. We saw that dynamic loading does not change player size that much. skipping this feature for now.\n. :100: \n. refs #7 \n. refs #7 \n. #7\n. we're going to do nothing \n. #7 \n. refs #21 \n. closed on 72d7698e35c8229bdf1d8349194b872d8134b6d4\n. 6cef65788db7480599de60205a7bcc9e110251dc\n. f475b55 \n. https://github.com/globocom/player/blob/master/src/playbacks/hls/hls.js#L253\n. :+1: \n. cube, play, video, box, blocks/blox, bloxplayer\n. frames, flow, pixel, spot\n. boxtream\n. segretto +1\n. @towerz  it seems you've fixed this issue. If so, can you close it?\nthanks!\n. Issue solved with https://github.com/globocom/generator-clappr-plugin\n. We talked about this issue, it makes sense to playback containers bind functions on the global scope. We need to make something event-driven and a router to avoid bind overlaps\n. The use of Mediator fixes this one.\n. hello @svanscho. The ?time= parameter is a workaround to fix internal flash cache issues with some combination of Flash Player / IE. The configuration to enable/disable it is here. \nThe embed parameters are received by the plugin as you can see here. If you need to turn on/off this feature using the embed parameters, please send a pull request. \n. Closing this since we don't have sequence plugin anymore.\n. can't reproduce this issue on others browsers, this is a chrome+macos related bug. Closing as wontfix.\n. Maybe Core Manager / Containers Manager?\n. could not reproduce this anymore, it seems last commits solved this one.\n. refs #21 \n. http://stackoverflow.com/questions/13516203/distinguish-between-windows-8-web-browser-and-app-user-agent\n. hi @guilhermef, for now clappr will try to play the source on windows 8 native apps using  <video> tag. Internet explorer knows how to handle mp4 containers and h264 codecs, but I'm not sure if it works the same way inside a native app.\nCan you confirm if your native app can play mp4 files? If so, this commit should solve your problem.\n. Confirmed as a server side problem\n. @leandromoreira\n. Need to check if flash_vod playback is able to play RTMP transmissions. If so, we need to rename the plugin.\n. This issue is somehow related to #83 \n. I've faced a lot of overhead passing an object trough ExternalInterface\n. We aren't handling three states anymore. isHighDefinitionInUse() at container will return true when the current level is 720p+ and false otherwise.\n. @hltbra suggested us to use http://www.fiverr.com/categories/graphics-design/creative-logo-design/#layout=auto&page=1 or http://www.logoworks.com/\n. readme.io\n. https://github.com/jsdelivr/jsdelivr\n. https://rawgit.com/\n. It's possible to access playback plugins by requiring player_info, this way:\njavascript\nPlayerInfo = require('player_info');\nthis.playerInfo = PlayerInfo.getInstance()\nthis.playerInfo.playbackPlugins // voila\n. great @davidsonfellipe, thanks for this.\n@towerz and @thiagopnts, @davidsonfellipe reached me today showing how globo's old player behaves on some pages regarding their sizes and aspect ratio, specially on globoesporte portal. \nGlobo's old player favors the use of 4:3 videos. I'm pretty sure we can deliver much more sizes and be more flexible. I wonder if this issue should be migrated to our private components or not. I think this feature should covers all embed scenarios on the web.\n. Clappr now supports all sizes.\n. @thiagopnts I removed then, feel free to close this issue if it was the right thing to do or revert the commit otherwise.\n. Couldn't reproduce on http://flashls.org/latest/examples/chromeless, indicating that we need to update our swf.\n. Could reproduce with another stream on flashls website. Reporting to @mangui\n. It seems that this issue has been solved on flashls v0.3.3. Opening an issue in order to update it.\n. updated\n. if the first level is 720p it doesn't show the button. It seems to be a race condition. Investigating.\n. Hi @thiagopnts , a few weeks ago we removed the visibility check on hls playback and Visibility package also. Do you think we still need to remove events.js?\n. According to this link, invisible flash players will change its execution behavior:\n- SWF frame rate is clocked down to 2 frames/sec. No rendering occurs unless the SWF becomes visible again.\n- timers (AS2 Interval and AS3 Timers) are clocked down to 2 a second.\n- local connections are clocked down to 2 a second.\n- video is decoded (not rendered or displayed) using idle CPU time only.\n- For backwards compatibility reasons we override the 2 frames/sec frame rate to 8 frames/sec when audio is playing.\n. refs #246\n. \n. http://stackoverflow.com/questions/19146461/how-do-i-prevent-html5-video-from-looking-pixelated-when-being-viewed-at-a-small\nClosing this for now.\n. hi @deedos, I remember you have asked for this feature. Check out https://github.com/lucasmundim/clappr-level-selector-plugin\n. I'm totally +1 on this. We need to ensure that the old model still works also.\n. closed with #277 \n. refs JacksonGariety/gariety.xxx#17\n. Before b67f2d9:\nbash\n-rwxr-xr-x   1 flavio.ribeiro  staff   584K Oct  6 17:03 clappr.js\n-rwxr-xr-x   1 flavio.ribeiro  staff   238K Oct  6 17:03 clappr.min.js\nAfter \nbash\n-rwxr-xr-x   1 flavio.ribeiro  staff   493K Oct  6 17:02 clappr.js\n-rwxr-xr-x   1 flavio.ribeiro  staff   206K Oct  6 17:02 clappr.min.js\n:feelsgood:\n. ScrollMonitor is 4.8k minified, and Mousetrap is 3.5k. I think it's worth to maintain as it is. Closing this issue.\n. Going back with this. I'll try to obfuscate the minified version\n. this issue is somehow related to #152. We need to find a good way to put the back to live button also.\n. seekbar_decorator, seekbar_top\n. @thiagopnts what do you think about this issue?\n. After a long talk with @towerz we decided to add seek time as a built-in component (b7efca02d7918e931f254336e938a3e027201c2f) and let the external plugins (thumb preview, etc) change its behavior.\n@towerz argued that all media controls have this kind of feature. Leave this feature as a separate plugin would result in some side effects (external plugins would need to manually disable the built-in plugin or have the same name to be chosen by Loader).\nI'm closing this for now.\n. when the playback is flash-based, setting the volume on media_control initialization can cause a race condition when the playback isn't ready yet.\n. For long videos we need to correctly calculate $(event.target).offset().left. Opening this issue again.\n. +1 for the current one, we can safely close this. :+1: \n. This issue is somehow related with #152\n. \nfrom http://www.opentelly.com/benchmark/index.html on firefox\n. Tv Noise examples:\nhttp://codepen.io/Prashantsani/pen/FhgzA\nhttps://github.com/criography/StaticGen\nhttp://jsfiddle.net/78e0xys6/\nhttp://jsfiddle.net/EnQKm/\n. http://stackoverflow.com/questions/22003491/animating-canvas-to-look-like-tv-noise\n. http://stackoverflow.com/questions/22003491/animating-canvas-to-look-like-tv-noise\n. http://imgarcade.com/1/white-noise-animated-gif/\n. http://mashable.com/2012/08/02/youtube-easter-egg-error-message/#_\n. hey @thiagopnts @barbosa @towerz @karinasirqueira and whoever wants to opine. I made an error screen here and wanna know if I should push to master. Check it out here. +1 or -1?\n. Hello @popand, looking for your sources I could figure out what's going on. Clappr has some playback plugins and match sources with their playbacks through canPlay function. \nWe have a plugin called flash that is used to play some videos not supported by default in some browsers (like mp4 on firefox or rtmp). This way, your second source has mov  on Bullet_movie, causing loader to think that this source should be played with the wrong playback plugin.\nOn dd7080e I changed canPlay priority call and it should fix your issue, tell me if it works for you. Anyway, I'm opening another issue in order to improve our canPlay regular expressions.\nRegarding logging, you can trigger ctrl+shift+d shortcut to see some events being dispatched on your console, but it wouldn't help that much in this case.\n. :+1:\n. According to HLS spec, manifest URL shall end with m3u or m3u8 extension.\nhttps://tools.ietf.org/html/draft-pantos-http-live-streaming-14#section-4\n. :+1:\n. http://www.stevesouders.com/blog/2013/04/12/html5-video-preload/\n. Since we're downloading metadata by default and there's a preload option available on embed parameters, I'm closing this.\n. https://github.com/katspaugh/wavesurfer.js\n. http://www.bbc.co.uk/rd/blog/2013/10/audio-waveforms\n. this: https://developer.mozilla.org/en-US/demos/detail/html5-audio-spectrum-visualizer/launch\n. http://w-labs.at/experiments/audioviz/\n. http://waveformjs.org/\n. http://airtightinteractive.com/demos/js/reactive/\n. hello @jjonjon can you elaborate more? What kind of problem are you facing? You're building clappr on your side?\nTesting on http://cdn.clappr.io with http://live.hls.globo.com/bemtv/playlist.m3u8?h=0401724347797012345678914133077979876543210JWCEy83r4oxAprJkY4fSRA&u=&a=A, it plays fine.\n. hey @jjonjon can you tell me the source url of your stream so I can try to reproduce the error on my side?\n. great @jjonjon, no problem. Feel free to open issues when problems arise. Closing this.\n. hi @jjonjon, unfortunately your video source isn't reachable. Tell us when you have it online again.\n. fixed on clappr 0.0.35\n. @whadar done\n. @thiagopnts which features would you like to have on log module?\n. hey @dusterio we can do it by requesting these informations from flashls swf. Can you tell me the big picture of your application so we can try to implement this?\n. @dusterio yes, clappr use flashls in case the browser doesn't have HLS native support. Our bootstrap is simple - when creating the container, the factory asks for every playback plugin if it can play the given source and if so it returns the chosen playback.  On Safari@mac, WiiU and Playstation 4, the html5_video playback returns true for m3u8 sources, meaning that clappr will play it on <video> tag. \nSaid this, we need to take a look on internal browser implementations to check if it dispatches events when finishes downloading TS segments. On the other hand, flashls dispatches this event and there's an external plugin that already listen this event. You can check it here.\n. @dusterio we removed underscore from last clappr bundle causing the plugins to be deprecated. @lucasmundim - levelselector maintainer - is already working on an update and I'm sure it will be released this week. Try using our generator to build your plugin boilerplate and bind a callback to fragmentloaded event. Tell me if it works for your use case. \n. @dusterio you can find our flashls fork here.  Instead of the raw flashls' ChromelessPlayer we use this one. Comparing our branch with mangui's master branch, we're not too much outdated but with dev we are. I'll check with @mangui if makes sense to merge with dev and if so we can make fragmentplaying event available. For now, I would go with fragmentloaded until we solve this.\n. it seems that this thing is not working anymore, reopening\n. ping @renanvaz \n. @renanvaz could reproduce here\n. issue moved to the right repository, thank you @renanvaz :+1: \n. Luckly, flashls already supports it.\n``` javascript\n /**\n * Limit levels usable in auto-quality by the stage dimensions (width and height).\n *      true - level width and height (defined in m3u8 playlist) will be compared with the player width and height (stage.stageWidth and stage.stageHeight).\n *             Max level will be set depending on the maxLevelCappingMode option.\n *      false - levels will not be limited. All available levels could be used in auto-quality mode taking only bandwidth into consideration.\n\nNote: this setting is ignored in manual mode so all the levels could be selected manually.\n *\nDefault is false\n*/\n public static var capLevelToStage : Boolean = false;\n\n/**\n  * Defines the max level capping mode to the one available in HLSMaxLevelCappingMode\n  *      HLSMaxLevelCappingMode.DOWNSCALE - max capped level should be the one with the dimensions equal or greater than the stage dimensions (so the video will be downscaled)\n  *      HLSMaxLevelCappingMode.UPSCALE - max capped level should be the one with the dimensions equal or lower than the stage dimensions (so the video will be upscaled)\n\nDefault is HLSMaxLevelCappingMode.DOWNSCALE\n */\n  public static var maxLevelCappingMode : String = HLSMaxLevelCappingMode.DOWNSCALE;\n``\n. hi @deedos, I've exposedcapLevelToStage` to be defined on embed params and set it false by default. This feature will be available on next release.\n. ty @svanscho \n. hi @victor-dsc, can you tell me which source are you trying to play?\n. Hi, I could reproduce here. The real problem is:\n\nSecurityError: Error #2060: Security sandbox violation: ExternalInterface caller http://cdn.clappr.io/latest/assets/Player.swf cannot access null.\n    at flash.external::ExternalInterface$/_initJS()\n    at flash.external::ExternalInterface$/addCallback()\n    at Player/setupCallbacks()\n    at Player()\nIt happens when you're serving the html through file:// instead of http://. When serving by http, allowScriptAccess tag takes care of authorize js/as3 interactions, but If you are testing with file:// protocol you need to allow your drive in the flash player security options.\nSince we will always serve the player on the web I'll close this issue as wontfix. Thank you @victor-dsc.\n. oh @svanscho! Now I see. Thank you for this. I think that a better approach is to use ternary operator instead of if/else, like:\njs\nthis.flushLiveURLCache = (options.flushLiveURLCache === undefined)? true: options.flushLiveURLCache\nthis.capLevelToStage = (options.capLevelToStage === undefined)? false: options.capLevelToStage\nCan you change it on your branch?\n. hi @jvortmann, I've discovered that a CSS property (.container, in this case) from Sauron web application is leaking into the player. This way, this issue is totally related to #237 and when it has been solved, this one will be also.\nThank you, closing this for now.\n. hi @jimaek, on #116 we thought about use jsDelivr, the problem is on fork/change/PR automation. If we could write a task similar to upload.js, jsDelivr seems to me a much more interesting alternative than the current one. (hook?)\n. @jimaek awesome! going to work on this in a few minutes. thank you :+1: \n. hi @lucasmundim, thanks to @jimaek we are now on jsdelivr:  http://cdn.jsdelivr.net/clappr/latest/clappr.min.js\nHowever, some plugins are pointing to components that are still on our cdn. Can you try pointing your website to jsdelivr and check if it solves your issue? If it hangs on plugin related requests (like SWF's or fonts) please let me know, we can point them to jsdelivr also.\n. hi @lucasmundim, I'll be closing this for now. Feel free to reopen in case you experience stucks again. thank you!\n. hi @svanscho, this problem was introduced by me on 0.0.52 but it should be fixed on 67dec925dc70575f325a448fdcbb509219d0fc90. Can you please retry with http://cdn.clappr.io/latest/clappr.min.js?\n. refs #150 also\n. All the development is now under https://github.com/flavioribeiro/clappr-rtmp-plugin\nWe are still figuring out if this plugin will be external or not. Closing this.\n. Could only reproduce on Chrome. It's a Security sandbox violation. I've added about:blank on my local trusted locations in order to fix other bugs, I'll come back to this one later.\n. \n. \n. I'll progress on http://github.com/flavioribeiro/clappr-iframe\n. related to #253 ?\n. yes, we discussed with the designers of globoplay project about the possibility to popout the player the same way twitch.tv does: \n\n. It seems that https://github.com/globocom/clappr/commit/1c83c10f8ba3f8e6641635e1ff001fc33177c33b fixed. I have bumped to 0.0.63 and uploaded to /latest a few minutes ago.\n. @towerz @thiagopnts \n. wow! :beers: \n. hi @azr, it seems that common browsers support webm by default, so I've added the extension on html5's canPlay() and should work on next release.\nWhen it comes to GIF, we can create another playback that embeds an img tag, but in this case, I'm not sure if someone will use clappr instead of the tag itself. Do you think it's worth?\n. @azr webm is supported on 0.0.63 version. You can try at http://cdn.clappr.io/. Regarding GIF support, can you tell me why exactly you think you'll use clappr instead of the <img> tag itself?\n. I'll create another issue to track the preload feature. Thank you for your contribution @azr!\n. Hello @Metrakit, if you're building a container plugin it's possible to listen to container:timeupdate event in order to receive the current position and duration:\njavascript\nthis.listenTo(this.container, 'container:timeupdate', this.yourCallbackHere)\nand:\njavascript\nyourCallBackHere(position, duration) {\n    doSomethingHere()\n}\n. Yes, if you're creating a core plugin you will receive the core on constructor as you can see here. With core in hands, you can access core.containers[0] and bind the container:timeupdate on it.\n. In 99% of cases the current container can be accessed by core.containers[0] or core.mediaControl.container, both should point to the same object.\n. closed by #279 \n. hi @rheber, thank you for the pull request. I failed not describing the real reason for #252. When someone embeds the player he does not need to know what playback plugin will play the source. Currently the user needs to pass the full path, including the SWF, indicating that he already knows what playback plugin will be instantiated.\nThis way, what I need to be done on this particular issue is that the user who's embedding the player should only pass the path where all SWF's are, not including HLSPlayer.swf or Player.swf, for example. In practice, the playback plugins should mount swfPath this way:\njavascript\nthis.swfPath = (options.swfBasepath || \"http://cdn.clappr.io/latest/assets\") + \"/Player.swf\"\n. It seems that Wii U can play HLS natively also: http://www.nintendo.com/wiiu/built-in-software/browser-specs/\nI'll give a try here\n. refs #278 \n. thanks @rheber \n. hello @JahlomP, could you elaborate more on this feature request? Why do you think it's worth to clappr play youtube videos instead of embedding Youtube player directly?\n. refs #374 \n. reopening this issue so we can follow up with @dayvson comments\n. awesome! great work, @towerz \n. hey @deedos can you tell me which source are you trying to play? \n. hey @deedos thanks for reporting. I have fixed this bug and bumped to 0.0.65 on CDN. \n. When trying to play a HLS video, the behavior of poster is broken\n. hi @alvynmcq, thank you for this pull request and for your persistence. I hope to see more contributions from you!\n. hey @tulios, good catch. It should be fixed now. Thank you!\n. Thanks @seanhussey! :+1: \n. I was looking at http://www.leanbackplayer.com/test/h5mt.html and http://diveintohtml5.info/everything.html and came with this solution:\ndiff\n HTML5Video.canPlay = function(resource) {\n-  if (isSupportedBrowser()) {\n-    return true\n-  } else if (Browser.isChrome || Browser.isFirefox || Browser.isIE) {\n-    return (!!resource.match(/(.*).(mp4|webm)/))\n-  }\n-}\n-\n-var isSupportedBrowser = () => {\n-  return Browser.isSafari || Browser.isMobile || Browser.isWin8App || Browser.isLegacyIE || Browser.isWiiU || Browser.isPS4;\n+  var mimetypes = {\n+    'mp4': _.map([\"avc1.42E01E\", \"avc1.58A01E\", \"avc1.4D401E\", \"avc1.64001E\", \"mp4v.20.8\", \"mp4v.20.240\"],\n+      function (codec) { return 'video/mp4; codecs=' + codec + ', mp4a.40.2'}),\n+    'ogg': ['video/ogg; codecs=\"theora, vorbis\"', 'video/ogg; codecs=\"dirac\"', 'video/ogg; codecs=\"theora, speex\"'],\n+    '3gpp': ['video/3gpp; codecs=\"mp4v.20.8, samr\"'],\n+    'webm': ['video/webm; codecs=\"vp8, vorbis\"'],\n+    'mkv': ['video/x-matroska; codecs=\"theora, vorbis\"'],\n+    'm3u8': ['application/x-mpegURL']\n+  }\n+  mimetypes['ogv'] = mimetypes['ogg']\n+  mimetypes['3gp'] = mimetypes['3gpp']\n+  var extension = resource.split('?')[0].match(/.*\\.(.*)$/)[1];\n+\n+  if (_.has(mimetypes, extension)) {\n+    var v = document.createElement('video')\n+    return !!_.find(mimetypes[extension], function (ext) { return !!v.canPlayType(ext).replace(/no/, '') })\n+  }\n+  return false\n }\nif no one has anything against it I will merge.\n. hello @aggietallboy, I think that the problem was with our bufferTime handling, we wrongly assume that you're playing a on demand video and try to preload more data (30 seconds, to be precise). Regarding source name, our RTMP plugin assumes that your URL is rtmp://your.host/live/stream_name, so I think rtmp://10.1.1.20/live/xyzxyz should be ok.\nI've fixed the bufferTime thing and bumped a new version (0.0.67). Can you try again on http://cdn.clappr.io and tell me if it works for you? (remember to clean your cache).\nAnyway, we have some issues (#246 and #150) in order to avoid this kind of problems. Now, we have a single plugin to play both RTMP and mp4 VoD files on Firefox and the ideal is to have two, one for each kind of source.\n. thank you for the details @aggietallboy. It seems we have a intermittence over here. Can you give me the URL of your RTMP stream? You can drop me an e-mail in case you don't want to put it here in the issue. \nI don't know how Open Broadcaster works but I have a Windows machine here at home and I'll try to install it and reproduce your error. Can you tell me the configurations you made on Open Broadcaster?\n. @aggietallboy I'll try to reproduce this bug here\n. hey @aggietallboy and @kyleparisi, I'm working on this right now. First I'll fork Flash playback plugin and create a new one in order to properly support RTMP. I'll take a look at JWPlayer support and if it's worth to add OSMF inside of it. Stay tuned! :)\n. It would be good to know your RTMP resources so I can test here while developing\n. Hey guys, I just released a first version of clappr-rtmp-plugin which has initial support for both VoD and live videos.\nIt's possible to test with your source by adding the external plugin on player embed:\njavascript\n<script type=\"text/javascript\" src=\"http://cdn.jsdelivr.net/clappr.rtmp/0.0.2/rtmp.min.js\">\n</script>\nand \njavascript\nvar player = new Clappr.Player({\n    source: \"rtmp://source_here\", \n    parentId: \"#player-wrapper\", \n    plugins: {'playback': [RTMP]});\nTell me if works for you. It's possible to see it in action on clappr-mosaic.\nI'm differentiating live/vod streams by searching for the word live inside RTMP source URL. Do you guys have a better idea?\n. great! I'll wait for @aggietallboy before close this. Thank you :+1: \n. You need to add Clappr player also. Here is the full html:\nhttps://gist.github.com/e6bb189cf903aabe5d52\n. awesome! I just got a small bug on IE10 where the video is not using the full player box, but I'll close this issue for now. Please open any bug/feature/issue related to RTMP on https://github.com/flavioribeiro/clappr-rtmp-plugin ok? thank you guys!\n. closed by #296\n. Thinking that chromeless players should react to API method calls only, I'm +1 on this\n.  https://download.blender.org/durian/trailer/sintel_trailer-480p.ogv\n. hi @rheber, thank you for the pull request. Actually, I don't want to expose Events on window scope but as a module to be required, like Playback and the playback plugins, for example. \nI think that all you need to do is add a line exposing events here and change the way the module is imported inside clappr (instead of require the path, require('events') only).\n. good @rheber, it's exactly what I imagined, but it seems you broke the build. Can you fix it so I can merge? $ npm test to run the tests\n. hi @rheber, you need to require('events' ) and change the string events to constants on the tests. I would also like you to don't commit the results of the build (as on 22316f2).\nThe ideal is to have one commit with the changes on c02848a and tests passing. Here is a gist with tips on how to fix them: https://gist.github.com/70612e5bcf7fb6b143a8\n. hi @rheber, I needed to expose events on karma configuration (d9626a9b0b8cbdd5b665c85ac46e90147b87675a) in order to fix the tests. Anyway, thank you for the pull request!\n. @rheber can you tell me your name and e-mail so I can add you on our CONTRIBUTORS list?\n. couldn't reproduce anymore\n. +1 @thiagopnts, I'm also facing some strange behaviors on poster attribute inside <video> tag in different browsers. I think we should rethink this logic.\n. on next release (0.0.89), p.getContainerPlugin('poster').load('http://img_here.jpg\") will be a valid call. thanks @ronag \n. hey @leandromoreira, thank you! :)\n. hello @Metrakit, I can surely help you. Are you trying to create an external plugin? Where's the code?\n. hello @ronag, for now we don't have a playback plugin that knows how to render an image. This would be a good feature, would you mind to submit a pull request?\n. wow, that was fast! Regarding the poster behavior, we're planning to review it so I think we should create another issue just to remember to revisit this after our changes on the plugin.\n. closed by #304 \n. thank you @ronag :beers:\n. Thanks for the pull request @leandromoreira. Regarding the commits, the only thing that I would change is the Config class inside utils, I think it should have their functions inside of it instead of declaring empty class and adding functions to its scope.\nMoving to the domain thing, I think it's a good feature assuming that each domain has its specifically way of (en|trans)coding their videos and they will be served the same way. I'm with @thiagopnts, I think you can add another commit setting this feature by default.\nFinally, I would like to thanks for the care in writing tests and everything. We look forward to more contributions from you! thank you! :)\n. hey @leandromoreira, I think I've fixed this problem after updating karma bundle on 4fa8720b490bc2ee5271b500d0ec9d2a9f646308. I've found some small issues on your test file (like the missing new when instantiating the player) but the main problem was on our side. Karma bundle wasn't taking into account the new exposed components.\nI've made a small test case here and it worked, I hope it can serve as template for your tests.\n. Since I've made some small refactories on Player constructor, I would suggest you to update your branch with master.\n. great @leandromoreira, it's merged! thanks for your effort. I'm wondering if it's possible for you to send another pull request documenting the feature on README, can you do it?\n. thanks @leandromoreira \n. hi @ronag I was thinking about this issue. Every source is handled differently by its playback plugin so I think it is a plugin-related issue. \n- On HLS sources, for example, our built-in plugin is a wrapper of flashls and it has some retry mechanisms. \n- On mp4 sources, we try to play on the <video> tag and I think we must listen to some error event in order to retry.\n- On the external rtmp we'll need to get NetStream connection error events/traits in order to retry\nDo you think it's worth making this? \n. Closing this due to inactivity. Feel free to open again if you want, @ronag.\n. hi @ronag, we're uploading all releases to npm. Do you think this issue is somehow associated with #133?\n. @ronag thanks for reporting this!\n. fixed\n. hi @lucasmundim, it should be fixed now. Can you test with our master branch before I bump another version?\n. @ronag try chromeless: true option\n. @ronag you can control the player by using its javascript api. Try on your browser console: p.stop()\n(assuming that we are dirtying the namespace here and the right way to do it is calling at your player instance) \n. oh, I got it wrong. This is something someone reported at #290, there's no way for disabling this for now. PR is welcome\n. tell us if you want help @ronag :beers: \n. hey @konashark can you provide your source url?\n. Also, if you're compiling from scratch, I would suggest you to try playing your stream on  http://cdn.clappr.io. If it works, your workspace is dirty of old dependencies (we changed a lot of them during this time range).\n. sure @konashark you can send me directly on email@flavioribeiro.com\n. hey @konashark I think we introduced a bug when setting width/height as percentage. Version 0.0.83 fix this, I could play the video using the parameters you provided me in private. Here is the full code of my jeff.html :)\nhtml\n<html>\n  <head>\n    <script type=\"text/javascript\" src=\"http://cdn.clappr.io/latest/clappr.min.js\"></script>\n  </head>\n  <body>\n  <div id=\"player\"></div>\n  <script>\n    window.onload = function() {\n      var player = new Clappr.Player({\n        source: \"http://cdn.bem.tv/stream/soccer5/playlist.m3u8\", \n        parentId: \"#player\",\n        flushLiveURLCache: false,\n        autoPlay: true,\n        width: \"100%\",\n        height: \"100%\"\n      });\n    }\n  </script>\n  </body>\n</html>\nMake sure that you're loading version 0.0.83 of the player (by typing Clappr.version on your console). Tell me if it works for you and if so, please consider close this issue, ok?\n. Hey @konashark can you please try to play this url and tell me if works? http://flv.io/jeff.html\n. @konashark latest version of clappr doesn't support width/height as percentage anymore. I suggest you to use window.innerWidth and window.innerHeight instead of 100%\n. hi @konashark any update on this? I couldn't reproduce it by adding jquery-2.1.1 in the same page that the player is embedded on.\n. Hey,\nYes, if you don't use a web server, no flash components will work. So, let's check if I understood. The scenario is: auto play doesn't work for latest clappr trying to play m3u8 source on chrome 39 with jquery embedded on the same page. Am I right?\n. great @konashark, I could reproduce here. I'll try to fix right now.\n. it should be fixed now. Please note that we do not support percentage on width/height anymore, so I suggest you to use window.innerWidth and window.innerHeight instead of 100%. We're going to bump a new version in a few hours. Thank you for all the support and patience!\n. @ronag I've introduced this bug on 0.0.83 release, specially on resize() function at core component. It should be fixed now. Not absenting myself of guilt but we're not on 1.0.0 version yet and moving quickly, unexpected behaviors are kind of acceptable for now. If you're using it in production, I recommend you to pin on a version by changing latest for the one you want.\n. afaik the :flashready event was not being triggered on IE10 or being triggered in wrong time causing setFlashSettings() to not be called so I forced the call again on firstPlay. Unfortunately I don't have an IE10 here to make tests. Mind printing this.flushLiveURLCache inside setFlashSettings() so we can ensure it's being called and that the param is set to false?\n. refs #271 \n. hey @whadar I could fix the playback behavior on Chrome (for both m3u8 and VoD files). \nMoving to Firefox support, the <video> tag cannot handle HLS streams but playing VoD is fine. The player was stuck trying to play m3u8 because we didn't check for flash installation leading to canPlay() = true on HLS plugin (which needs flash). That's why the player is locked trying to play the SWF file. I fixed flash detection on #337 and now Clappr dispatches the error screen on this specific scenario.\n. closed by 4affe4fd1893b31852dee0ddd3405b855090dfb7 cc @lucasmundim\n. closed by 4affe4fd1893b31852dee0ddd3405b855090dfb7 cc @lucasmundim\n. thanks @henriklundgren \n. hi @henriklundgren I think this bug is related to some dependency on our package dependency tree, trying to figure out right now\n. hi @henriklundgren it should be fixed now (c40508058433ba9a91a786fa7ac3c8779fcbbd1d)\n. http://stackoverflow.com/questions/998245/how-can-i-detect-if-flash-is-installed-and-if-not-display-a-hidden-div-that-inf\n. Hey @whader, we use the protocol part of url source to help us on playback matching. On RTMP case, for example, we match the source by looking for the protocol only. On HLS we allow both http and https on regex match. Can you elaborate more about your case?\n. @whadar can you try with master branch and tell me if works for you?\n. hey @lewiscowper, thank you for your first pull request. I think you're on the right path and I have only two considerations before merge it:\n- It would be better to have a more descriptive commit message (take a look at our commits)\n- The diff on watermark plugin breaks it. We need a position attribute on the object. I recommend you to leave that || intact for now.\nCan you solve this issues and send the pull request again? Remember to send only one commit (squash and amend are your friends).\n. @lewiscowper it's strange that github is still showing the dist file and conflicting. I recommend you to rebase with our last commit (I saw that you're 4 commits behind our current master) so I'll be able to merge it directly. Sorry for adding so much impediments before merging this.\n. That's great, congrats @bikegriffith.\n. I'm glad it's working fine. I'll close this.\n. I've added this plugin on external plugins list (ba1434c952fd7d3eaabef6b1b816fc0987b9b15c).\n. thank you for this @lewiscowper, we hope to receive more contributions from you. :beers: \n. http://jnordberg.github.io/gif.js/tests/video.html\n. https://github.com/yahoo/gifshot\n. more resources;\nhttp://www.sitepoint.com/html5-video-fragments-captions-dynamic-thumbnails/\nhttp://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/12/html5-video-article-demos/thumbnails-demo.html\n. hi @holygekko, I've reproduced here. Clappr is mixing the behavior of VoD and live on media control. I'll try to find the reason. Thanks for reporting.\n. @holygekko it should be fixed now. I bumped a new version, you can check the fix on http://cdn.clappr.io. Be sure that you're getting the new version (0.0.101).\n. hey @osk can you send me your stream source? you can do it privately sending to flavio ]at] bem.tv\n. this issue is probably related to #297\n. @osk @chriswiggins are you able to reproduce it on both firefox and chrome?\n. @chriswiggins @osk can you guys try with this new version (0.0.107) at http://cdn.clappr.io and tell me if it's fixed?\n. hi @osk, you can make a simple customization by changing the colors of the current media control or create a new media control from scratch, inheriting from the built-in and adding it externally (you can use the plugins generator).\nWe actually did a media control plugin to use at Globo.com, here's a screenshot of the player:\n\nUnfortunately it's closed but I'm sure we can help if you want to create your own.\nThe thumb preview guy on top of the seekbar is another plugin that inherits from seek_time and use nginx-video-thumbextractor-module on server side.\n. I'm closing this for now. Feel free to reach us if you have plans to create your own media control plugin.\n. hey @stjernstrom it should be fixed now. Can you try and tell me if it works for you?\n. awesome @stjernstrom, thanks for testing. We'll look at some minor issues and bump a new tag. :beers: \n. @guilhermebruzzi thank you for this, I would suggest you to avoid adding files of dist folder on the pull request so I can merge it. Add yourself on CONTRIBUTORS also. Thank you again!\n. thank you @guilhermebruzzi!\n. reproduced here\n. thanks for reporting @whadar, the fix will be present on next release.\n. good @stjernstrom, we'll take a look on it today.\n. thanks @celiofonseca \n. hello @irongomme, the ?time= parameter is a workaround to fix internal flash cache issues with some combination of Flash Player / IE. If you want to disable it just add flushLiveURLCache: false on your embed parameters. Tell me if it works for you.\n. @irongomme you don't need to change the source. When creating the player instance, just add the parameter I just said. Example:\nhtml\n<script>\n  var player = new Clappr.Player({\n    source: \"http://your.video/here.m3u8\", parentId: \"#player\", flushLiveURLCache: false \n  });\n</script>\n. :beers: \n. could not reproduce\n. thanks @irongomme!\n. Just my two cents. We're in a battle to decrease bundle size and chromecast support isn't a base feature like supporting mp4 or HLS playback. If we add chromecast as a core functionality, we'll need to add all the other OTT devices on it.\n. thanks @irongomme !\n. cc @lucasmundim \n. no_op plugin wasn't dispatching playback:ready event, causing the core to never finish the promise. fixed on b55ddb5bb782102e19fae7af0c26fb692b427199\n. thank you!\n. hello @btecu, clappr has a chromeless option that hides both seekbar and media controls. Try embedding the player with the given parameters:\njavascript\nvar player = new Clappr.Player({\n  source: 'http://cdn.bem.tv/stream/soccer5/playlist.m3u8',\n  chromeless: true,\n  autoPlay: true,\n  mute: true,\n  height: 360,\n  width: 640\n});\nYou can try on http://cdn.clappr.io. It fits your use case?\n. hmm, I see. So, we don't have this feature yet, would you mind sending a pull request?\n. @irongomme if you create a core plugin you'll receive core instance on constructor which has load(source) method. This fits your needs?\n. yes, the generator is the way to go. Can you point me to your code?\n. :+1: \n. hey @leandromoreira and @danielfm, before bumping a new version I would like to have your OK regarding bitrate selection/change. Can you guys build our master branch? If not so, I can deploy it somewhere. \n. dup\n. http://garann.github.io/template-chooser/\n. sorry for taking SO LONG @vitorbaptista. I was thinking of dispatching a new event that expose the name of the plugin (if it's using flashls, hls.js, html5_video or flash, for example)\n. hey @btecu and @irongomme, we didn't had much time to look at the behavior of clappr on mobiles yet. All contributions on this matter are welcome!\n. Hey @aguxtremo, it seems that these are shoutcast streams. If I'm correct, clappr doesn't have support for it yet. Pull requests are welcome.\n. @towerz how are you planning to implement this? I wonder if we can solve it by adding a playback plugin that stays at the tail of Loader array, dispatching HEAD requests inside its canPlay method and routing to the right plugin after that.\n. +1 for your solution :clap: \n. We wanted to keep VoD HLS with the same behavior of progressive download. Since this is a flashls option, we can expose this as embed parameter. I saw that endless prefetching can cause memory handling exceptions on IE11 so I'm +1 for adding this feature. What about u guys? @towerz @thiagopnts @wicherdt\n. @shacharz can you reproduce with vanilla clappr without your external plugin?\n. +1, I could reproduce here on chrome and firefox at linux using http://bem.tv/shakira.mp3\n. fixed, thanks @towerz \n. @leandromoreira am I the guilty here?\n. hi @turanjanin, I'm pretty sure that your question is related to #406. Assuming that your player instance is p, you can listen to the events by binding functions to it this way:\njavascript\np.listenTo(p, Clappr.Events.PLAYER_PLAY, function() { console.log(\"playing!\") })\nHere is the list of available events.\n. hey @guzz, it seems that the guys needs to bump a new version in order to make this stuff work. I'm not in charge of this anymore, we need to wait for a new version.\n. great job @towerz, congratz! :metal:\n. yep, its related to pepper flash implementation. @shaharmor, are u experiencing black screens when facing this error?\n. :beers:!! @towerz do u know when this fix is gonna be launched?\n. jfyi, there's also some issues on flashls project itself related to hardware acceleration\n. hey @tarkanlar I think you should open this issue on the plugin's repo!\n. +1\n. there's also a effort to make a plugin here but seems to be abandoned. I think that make sense to ping the owner before bootstrap another one \n. @towerz I saw it working some time ago, maybe @opendrops didn't push everything to github\n. so @leandromoreira built a plugin for DASH support on clappr, check it out on https://github.com/clappr/dash-shaka-playback\n. I'm not sure if it's possible to get the first frame of the TS using hlsjs and canvas, but maybe this demo from http://www.sitepoint.com/html5-video-fragments-captions-dynamic-thumbnails/ can point to the right direction. \n. +1 for the gitter channel\n. hey @luhaiyong first of all you need to point clappr to the correct manifest file (m3u8) instead of the ts itself. Can you send us your HLS source url?\n. could you upload a crossdomain.xml file on http://live.3gv.ifeng.com/crossdomain.xml with the content below?\n<cross-domain-policy>\n<site-control permitted-cross-domain-policies=\"all\"/>\n<allow-access-from domain=\"*\" secure=\"false\"/>\n<allow-http-request-headers-from domain=\"*\" headers=\"*\" secure=\"false\"/>\n</cross-domain-policy>\n. I still can't see the crossdomain on http://live.3gv.ifeng.com/crossdomain.xml \n. any updates on this @luhaiyong ?\n. hey @josephharding just for curiosity, what do u mean by metadata? Since clappr uses flashls for HLS playback, I'm pretty sure it should already support (or support soon when the guys update the swf) all events described here.\n. @tokenian can you still reproduce this error with hlsjs?\n. awesome error screen, btw :+1: \n. @kingjedidiah hey, with the last updates on the plugin your stream should play fine. Feel free to open this issue again if u face issues.\n. hey @tarkanlar can you open this issue directly on plugin's repo? https://github.com/clappr/clappr-rtmp-plugin\n. @deedos\n. @mangui, what's your thoughts on this one? do u think it's feasible to implement on hlsjs? I wonder if it's possible to play with canvas size in order to accomplish this behavior\n. +1\n. This is part of the HTMLMediaElement interface on webkit: https://developer.apple.com/library/safari/documentation/AudioVideo/Reference/HTMLMediaElementClassReference/index.html#//apple_ref/javascript/instp/HTMLMediaElement/duration\nClappr wraps these calls to maintain the compatibility between browsers but since we use flashls on chrome and ffox, the result of the calls are not the same across all browsers. Flashls calculates the length in seconds of the playlist while webkit just returns Infinity and 1 for duration and currentTime. I'm afraid there's nothing we can do in this case. Also, I don't think it's possible to seek a live stream when using the video tag directly.\n. @tjenkinson good point, we need to test clappr with ms edge.. gotta create an issue for that\n. @dayvson is working on that, you can follow the progress/discussion on #654\n. hey @jfairley, HLSPlayer.swf is a build of flashls. I'm not sure if it's a plain build from flashls' master branch or the guys are maintaining a fork. Let's wait for @towerz or @leandromoreira  to answer this one :)\n. we did this in order to support mp4 playback on old firefox and other browsers that don't have native support for it. It also enables the player to play 3gp and mov, even though we're not displaying as supported formats on README.\nFor RTMP we have an external plugin which is being maintained here: https://github.com/clappr/clappr-rtmp-plugin BTW, I'm pretty sure I'll need to do some updates in order to make it work with latest version of clappr.\n. just curious, can u tell me why u need this info?\n. The latest version of clappr is using hlsjs playback on chrome. Force the use of FlasHLS on Chrome by adding plugins: {playback: [Clappr.FlasHLS]} on the embed params and you'll have the same methods for both chrome and firefox\n. look at this, a wild medina appears! cheers buddy :beers: @andrewsmedina \n. btw, thanks @mangui for this awesome work. cheers! :beers: \n. I would suggest to add the plugin on the playbackPlugins array and keep the flash one as fallback while hlsjs turns more stable.\n. did u check if there's a css conflict that only express in firefox?\n. thx @dayvson!! :beers: \n. hey @LGprodigy, I made some tests with hlsjs running on opera and it seems to be working fine. I hope the guys will look at the #583 and merge it asap so this issue will be automatically fixed. I'll let it open to remember you to try after the merge and close or comment this issue if you still find that it is a problem.\n. I've tested clappr from cdn.clappr.io with some hls sources that I have and it's working fine here on my mac. I'm gonna close this since I don't think it's an issue anymore but feel free to reopen if you think that makes sense.\n. @LGprodigy do u have a valid URL where we can reproduce this behavior?\n. @dviramontes hls.js changes the TS video packets to be playable on a buffer by the video tag using MSE. This way, some of the method calls to the tag directly didn't reflect the current state of the playback. Actually, that's why this PR was not merged yet, I need to find the best way to implement the DVR behavior.\n. hey @jfairley sorry, just moved to NY and had no time to finish this. I will try to finish it by this week.\n. I know that it's not the best solution but you can use an old version of clappr:\nhtml\n<head>\n    <script type=\"text/javascript\" charset=\"utf-8\" src=\"http://cdn.clappr.io/0.1.0/clappr.min.js\"></script>\n    <script type=\"text/javascript\" src=\"http://cdn.jsdelivr.net/clappr.rtmp/0.0.6/rtmp.min.js\"></script>\n    <title>RTMP Test Page</title>\n</head>\n<body>\n<div id=\"player\"></div>\n  <script>\n    window.onload = function() {\n      var player = new Clappr.Player({\n        source: 'rtmp://tviza.com:1935/live', \n        parentId: \"#player\",\n        autoPlay: true,\n        plugins: {'playback': [RTMP]},\n        gaTrackerName: 'MyPlayerInstance',\n    mediacontrol: {seekbar: \"#E113D3\", buttons: \"#66B2FF\"}\n      });\n    }\n  </script>\n</body>\nbtw, this problem was already reported on https://github.com/clappr/clappr-rtmp-plugin/issues/26, https://github.com/clappr/clappr-rtmp-plugin/issues/25 and https://github.com/clappr/clappr-rtmp-plugin/issues/24\n. I'm gonna try to work on that this week. @floriano12 please report RTMP issues directly on the plugin repo: https://github.com/clappr/clappr-rtmp-plugin\n. you're able to play your stream on vlc?\n. I think that you're missing the stream name in your source url. Check your FMLE config.\n. hey @towerz do u have access to devices with edge?\n. @tjenkinson can you confirm if it's using hls or html5_video playback? I guess our canPlay strategy is matching Edge. Have you tried with both hls and mp4?\n. good, mind updating the supported browsers box on readme?\n. put a ?\n. I've tested here with MacOS Yosemite, it's working fine. @Kreeig can you still reproduce this?\n. sounds like 44ff6cd74eb34bf7756288d270e6fa4ad3aebf1b fixed this\n. I'm not sure if I can label this one as a bug, can you explain us more about what are you trying to do, @shaharmor? We dispatch some buffering/bufferfull events in case you want to listen to them\n. Can you send us an URL where we can reproduce this problem?\n. :metal: \n. hey @tjenkinson AFAIK globo.com thumb preview extend seek time component. Tell me if there's something I can do on my side to help u developing this feature.\n. :clap: will be following the project, closing this for now\n. congrats @tjenkinson :beers: \n. can anyone review this PR before we merge it? I made some smoke tests using this html and it seems to be working fine.\n. great @jfairley feel free to do it!\n. wow @jfairley thanks for all the tests! I guess that the way to go is avoid hlsjs in ffox and safari for now. \n. I was playing around this one and maybe is not that easy, we need to dig into the transpiler and see what actually happens when objects are being inherited (my first shot is that the methods are just extended leaving no clue who are the parents)\n``` js\n\nwindow.player.core.playerInfo.playbackPlugins[0] instanceof Clappr.Playback\nfalse\n```\n\nWe could check for canPlay to ensure it's a Playback plugin or getExternalInterface for core, but I dunno how to check for container ones. I've decided to add a type getter on plugin base classes as you can see on https://github.com/flavioribeiro/clappr/commit/37b13d62087e78a6ef9079377588536972e8e32e. I'll submit the pull request but will not merge in case someone have a better approach.\n. Hey, clappr is supposed to work well with HLS on listed browsers. Regarding the logo over the video, clappr has a watermark plugin which should work well for you. Try modifying the html below:\nhtml\n<!DOCTYPE HTML>\n<html>\n<head>\n  <script type=\"text/javascript\" charset=\"utf-8\" src=\"http://cdn.clappr.io/latest/clappr.min.js\"></script>\n  <script type=\"text/javascript\" charset=\"utf-8\">\nwindow.onload = function() {\n  var player = new Clappr.Player({\n    source: \"your_source_here\",\n    parentId: '#player',\n    watermark: \"http://url/img.png\", position: 'top-right'\n  });\n  </script>\n</head>\n<body><div id=\"player\"></div></body>\n</html>\n. hey @tjenkinson not sure if it's gonna answer your question but we have a undocumented call to getExternalInterface where we bind the functions inside of it on the player scope.\nI should mention that this call is valid for core/ui_core plugins only, so you're good for adding on your thumbnails plugin. In short, just return the methods you want to expose on the getExternalInterface and it should work.\n. yep @tjenkinson I think that exposing scrubThumbnails on player scope is the way to go. \n. +1\n. yep, @leandromoreira just did it, wait a bit until we have it on cdn\n. @tjenkinson this pr still makes sense? if not, can you close it?\n. the way that hlsjs handle the sliding window is different from flashls, @towerz is working to make it compatible\n. I think @towerz worked on that (89e5c3a95ed062e493547657af219c323f8360a1) but not sure if fixed the behavior you reported. A workaround to use flashls instead of hlsjs is to pass the built-in FlasHLS plugin as an external one like plugins: { playback: [Clappr.FlasHLS] } (it will be in higher priority on the playbackPlugins array on loader object). \n. not sure but maybe refs to https://github.com/webpack/webpack/issues/332\n. sure, it should be an external plugin imho\n. hey @lightest I think the guys didn't release a version with hlsjs integration yet so that means you can build by yourself and it's gonna work. We are avoiding hlsjs playback on firefox until we have MSE enabled by default as you can see here:\nhttps://github.com/dailymotion/hls.js/blob/master/README.md#compatibility\nhttps://github.com/clappr/clappr/blob/master/src/playbacks/hls/hls.js#L105\n. refs #587 \n. @lightest can u test again and reopen if its still an issue? we're now live with hlsjs in prod\n. yep! Adding the playback you want to play on the plugins array will add it in the first priority for playing your source.\n. yep, could reproduce on http://cdn.clappr.io/ so I think we have a critical issue here..\nping @towerz @leandromoreira @thiagopnts \n. since the plugins are extending the base ones, they will automatically have the type attr, don't need to rebuild them\n. btw, if u guys think it makes sense I'll use the function and enhance the error message\n. and fix travis :hankey: \n. it seems there's more getPlugin() functions on container and core not to mention hasPlugin(), addPlugin() functions with same code.. should we improve that also?\n. yep!\n. @dayvson thanks! :beers: \n. yep, @tjenkinson is right, we're working to get rid of flash and hls.js seems to be the way to go. However, you can add plugins: {playback: [Clappr.FlasHLS]} when creating the player in case you need some time to add this header on your server or wanna still use flash.\n. hey @deedos since this one is related to server side, I'll close it. Feel free to open again if you still needs help.\n. @AlexRevin can u give me this source url?\n. same here, not working\n. ok, it's not playing on hls.js demo page also (http://dailymotion.github.io/hls.js/demo/?src=http://rtmp.lj.ee:3800/hls/bc-09468478f78d292fc79e.m3u8, you'll need to run chrome with --disable-web-security to get rid of access control errors) so we should report this issue to @mangui. If you want to go back to flashls while we figure out what's going on, follow what is described on #607\n. @AlexRevin just wondering what's the segmenter you're using, nginx-rtmp?\n. if u run chrome with --disable-web-security you'll not face cors related problems\n. @AlexRevin Try testing directly on http://dailymotion.github.io/hls.js/demo/, if you still see problems, we should put @mangui on this loop\n. @baragamer firefox is disabling flash and since we're still waiting for it to enable MSE by default (hopefully next month) we're not using hls.js on it. Said that, try enabling flash and the playback should work. Regarding windows phone, I don't have access to a device with it so let's wait for someone to ask for details and try to reproduce.\n. FYI Firefox 42 is scheduled for tomorrow! \n. @baragamer are you trying to play on firefox for windows phone?\n. Yep, this should be located in our internal assets. go for it! \n. For some reason the media control couldn't find the cursor on travis build. Can you take a look on it before we merge this pr?\n. here's the steps that travis do https://github.com/clappr/clappr/blob/master/.travis.yml\n. thanks man\n. refs to #304, we should wait for @ronag considerations \n. Progress events accounts for media loading/buffering. Time update is dispatched when currentTime is updated, so it's related to the playback position\n. lgtm\n. lgtm\n. #621 is now merged, please update this before we merge this one!\n. thanks @dayvson!\n. @operutka can you send us the stream url and browser/pc confs?\n. Ok, I'll try to reproduce at my side. Just curious if you're using the latest version of clappr, but even so, we still need to update our version of flashls. I'll work on that soon.\n. I'll confirm with the rest of the team if we're using this fork of flashls or if there's another one and update with latest @mangui:dev's branch, I'll let you know asap\n. @operutka, b798074734995339cddd99a4f0fe28b6c91f0c23 updates our swf to the latest version of flashls, can you verifiy if performance is still an issue for you? \n. closed by b798074734995339cddd99a4f0fe28b6c91f0c23\n. here's the full release notes: https://www.mozilla.org/en-US/firefox/42.0/releasenotes/\n. @cpeterso is it true that MSE is not available for FF 42 on linux? (https://github.com/dailymotion/hls.js/issues/37#issuecomment-156167815)\n. There's a plugin to support youtube id's (https://github.com/towerz/clappr-youtube-playback) but I'm not sure if we have something for Vimeo. \n. @rafaell-lycan clappr has a bunch of external plugins which we're not willing to have inside of the player bundle. Our idea is to keep clappr core as simple/tiny as possible.\n. @rafaell-lycan thanks for the heads up on adding youtube plugin on readme. tell me if you want some help to implement the vimeo plugin!\n. Thanks @philcrump. @madmarten feel free to reopen this if you think that makes sense\n. :metal: congratz @towerz \n. #641 fixes that. thanks @dayvson \n. LGTM\n. refs #595 \n. hey @FDiskas do you mind breaking this issue in smaller ones? One for each missing event and method? This way we could close it with commits and receive contribs\n. thanks @FDiskas !!\n. Closing this since the feature requests are already placed in other issues\n. I guess that's better to break #653 in smaller issues, there's some which we can label as easy and receive more contribs\n. So, regarding this issue, I guess that @FDiskas is correct. seek() should accept the time and not the percentage, that's how all players implement it (even the native ones). I'm in favor of breaking the API and make seek() behave the right way. If we still want a seek that uses percentage, we should have a seekPercentage, tho.\n. @FDiskas can you test with different sources (like a hls, for example)\n. yep, @leandromoreira is working on the docs but I couldn't find them on the repo. @leandromoreira are u planning to track the docs? Btw, pull requests on docs are welcome! that's why this one is an open source project\n. LGTM, also thanks for the styling refactory\n. The control bar isn't a plugin but a component of the player. If you want to add stuff on the controls you can write a core plugin like this https://github.com/clappr/clappr-level-selector-plugin/blob/master/src/main.js.\n. @FDiskas you can submit improvements/bugfixes/feature requests by following this workflow: https://github.com/clappr/clappr#contributing\n. @FDiskas you can submit improvements/bugfixes/feature requests by following this workflow: https://github.com/clappr/clappr#contributing\n. @FDiskas it seems we have two different issues here. The first one is regarding volume level persistence when toggling mute/unmute, while the seconds one is related to the volume button state when using player API. There's a guideline to open issues and I kindly ask you to follow them in order to help the improvement of the project overall.\n. I'm +1 for @dayvson suggestion\n. https://github.com/clappr/flashls\n. nice, good job @dayvson :beers: \n. yep, reproduced here. It seems to be an issue with hlsjs, I could reproduce the same problem on http://dailymotion.github.io/hls.js/demo/?src=http://177.153.19.45/eventialsVOD/definst/amlst:MTQ/MTQ3MTYxOzM0MDYz/playlist.m3u8. Adding @mangui to the loop.\nCan you tell me what encoder and HLS splitter are you using? \n. @framerate are you using wowza? can you tell us the stream url?\n. reopening this based on @framerate comment\n. @framerate can you reproduce on HLS.js demo page? https://github.com/clappr/clappr/blob/master/doc/TROUBLESHOOTING.md#common-steps-to-verify-issues\n. @flavioschuindt I'd say it's better to open new issues. Search if there's already one related to the problem and if not so, go ahead and create another one.\n. just curious about the use case of this method, why not listen to PLAYBACK_ENDED?\n. yep, I'm +1 for this. Mind sending a PR, @hounvs ?\n. Thanks @hounvs! I hope you can contribute even more to the project! :beers: \n. hey @shaharmor I couldn't replicate this issue, what browser are u using?\n. yep, pass hlsjsConfig object on embed parameters: https://github.com/clappr/clappr/blob/master/src/playbacks/hls/hls.js#L43\n. @Tkamiya can you provide us your manifest url?\n. hey @GeorgySerga I think it makes sense to have a EXIT_FULLSCREEN event, do you mind submitting a PR with it?\n. Thanks, @michaelcunningham19!\n. Is there a not common way to binding to hls events. I was able to catch segments by doing:\njs\nvar onHlsFragChanged = function(e, data) { console.log(data.frag.url) };\nplayer.core.getCurrentPlayback().hls.on('hlsFragChanged', onHlsFragChanged);\nI agree it's weird to do that, we should expose Hls.events consts to make the binding easier. \n. reproduced here, it seems to be related to this line https://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L169 where clappr tries to set currentTime to zero but possibly the element is not accessible anymore. \n. Hey @matthias-k if you want to listen to timeupdate events, just bind to it:\n```\n\nplayer.on(Clappr.Events.PLAYER_TIMEUPDATE, function(e) { console.log(\"time update\", e); });\nPlayer {uniqueId: \"o1\", options: Object, coreFactory: CoreFactory, playerInfo: PlayerInfo, _loader: Loader\u2026}\nVM790:2 time update Object {current: 4.289638, total: 36.44}\nVM790:2 time update Object {current: 4.788395, total: 36.44}\nVM790:2 time update Object {current: 5.038311, total: 36.44}\nVM790:2 time update Object {current: 5.288214, total: 36.44}\nVM790:2 time update Object {current: 5.788668, total: 36.44}\nVM790:2 time update Object {current: 6.043675, total: 36.44}\nVM790:2 time update Object {current: 6.481978, total: 36.44}\n```\n\nYou can find the full list of events here.\n. hey @avreg I don't think we have a correct way to do that. Maybe creating your own media control with the same style but without the buttons..\n. @guialbuk also have the same question. I know we had a \"closed source\" plugin that did this thing, not sure if it's still being used and if the guys have plans to open source it. cc @thiagopnts \n. This makes sense to me!\n. LGTM\n. LGTM\n. Can you remove the generated files (clappr.js, clappr.min and clappr.map)? \n. @tjenkinson congrats for adding this integration here :)\n. Thanks @PNixx!\n. lgtm\n. <3\n. that's really nice, congrats @vix-simplex. Sorry about the gitter thing, please join us on the video-dev slack: http://video-dev.org we're all there :) cc @towerz @leandromoreira @thiagopnts @tjenkinson \n. merging this specially bc of dailymotion/hlsjs#0d43486\n. Thanks @Aramblog and @mangui. I thought we had smoothing true on clappr-rtmp-plugin. I'll close this one, let's address the progress on https://github.com/flavioribeiro/clappr-rtmp-plugin/issues/72.. I couldn't reproduce this problem here:\n\n. what if you just seek to the beginning after the play?. https://github.com/clappr/clappr/commit/44cad64ddb8790b2039fd6d445db54c3fb673883. yep you just need to pass the right mimetype to help clappr use the right playback. The HLS playback is expecting application/x-mpegURL or application/vnd.apple.mpegurl.\nrefs https://github.com/clappr/clappr/issues/399#issuecomment-98272930. wtf is this? . some sneaky users are using this thread to spam illegal ways of sharing content. It's sad to see people doing this shit here, I reported all usernames to github and I hope they will stop using clappr as a channel to spread their dirt. keep an eye out and help report these users! :) . done!. @JohnMorra can you please redirect your questions on RTMP playback to the rtmp plugin?. I'll send a PR to hlsjs, @mangui . this can be helpful too https://medium.com/freshdevelopers/implementing-lhls-on-hls-js-4fc4558edff2. +1 for dropping the internal plugin and keep https://github.com/clappr/clappr-stats the official. ages ago I made this not sure if it's helpful and if its still working. closed by #1593. lgtm!. I can reproduce the green artifacts on hls.js but not on safari. \n@hijuuijj I suggest you open an issue on github.com/video-dev/hls.js, this issue should be addressed there. \n. are you sure your ternary is right? Both conditions are calling play(). Try\njavascript\nfunction togglePlay() { return player.isPlaying() ? player.pause() : player.play(); }\n. @wanstonq the flvjs plugin you're trying is this one? if so, do you mind opening this issue over there?. I'd just get a snippet like this, fork this or this repository and make the changes accordingly. . what source video url you're trying @ewwink? If you're using a Firefox that's older than 42 (which was released in Nov, 2015) you probably don't have MSE support on it and the canPlay method on hls.js will return False, falling back to the flash player. Let us know if that's the case or if this issue was already solved on your side.. @ctaity can this one be closed?. @cviewsupport do you mind hosting your code somewhere? first bet is that you're losing the context to player when passing the call to setTimeout or something. yes. ??? this is not jwplayer repository, maybe https://github.com/jwplayer/jwplayer?. you can achieve this by listening to SUBTITLE_TRACK_* events on hlsjs (https://github.com/video-dev/hls.js/blob/master/docs/API.md#runtime-events), hide the current cue and paint the way you want. I think you can also override config.cueHandler on hls.js as well but not sure.\nRelated issues that can help you with that:\nhttps://github.com/video-dev/hls.js/issues/1324\nhttps://github.com/video-dev/hls.js/issues/654\n@caiogondim maybe you can help on providing the snippet that was done on @nytimes video player for that ^\n. https://github.com/Viewly/clappr-playback-speed \nhttps://github.com/bikegriffith/clappr-playback-rate-plugin. hooray! will try and take a look at it, glad to see more activity here! happy to see @afonsocdaniel contributing as part of the team as well. Way to go, folks! \ud83e\udd47 . do you have a snippet or JSFiddle you can share?. hey @dayvson can you fix the indentation?\n. I'm sure that we're making a mistake here, we should be checking for AOD. However, it seems that @dayvson is working on #466 so we should remove the entire html5_audio soon\n. mind adding a (this.currentVolume === 0)?\n. missing space if (inseconds) {\n. missing space } else {\n. maybe change this var from seekTo to seekSeconds?\n. extra space if (percentage > 0) {\n. I'm in favor of not having this flag, we can create another method to be called by seekPercentage() \n. here, instead of calling setCurrentTime() we can create a new method on the container to avoid the flag and the if\n. why we need this? ready() is being called more than once?\n. ",
    "thiagopnts": "added basic fullscreen support: https://github.com/globocom/player/commit/76841e4034b0eb556fa20333a761d018fce441b2\n. We need to know where the poster comes from:\nhttps://github.com/globoi/player/blob/07fd5cc6e0ea9bf267086494e497c36b68378916/src/components/playback_handler.js#L34\nThis is not right, this should be removed after finishing the container's base css. This kind of decision must be done based on z-index:\nhttps://github.com/globoi/player/blob/07fd5cc6e0ea9bf267086494e497c36b68378916/src/plugins/html5_video_playback.js#L21-L28\n. We already support auditude ads\n. This is related to #16, also we are going to use the same structure to src/components, since they have static files too. How to build the swf and where to put is still a problem though.\n. This is our current approach:\nGiven the following plugin structure,\nsrc/plugins/spinner_three_bounce\n\u251c\u2500\u2500 index.js\n\u2514\u2500\u2500 public\n    \u251c\u2500\u2500 spinner.css\n    \u2514\u2500\u2500 spinner.html\nThe index.js is the plugin's code. In the public/ directory is the plugins assets. We currently only support .css and .html files. The .html file supports underscore templating. These files are loaded during build, it's contents are extracted and parsed to a src/base/jst.js file, which exports a hash with all templating and styles, where the plugin's name is the key. So, for loading a plugins template, you must call it through JST['plugin_name']. To load a style, call JST.CSS['plugin_name']. This file must be used in development when referring to templates or styles. For example:\njavascript\nvar JST = require('../../base/jst');\nvar FooPlugin = BaseObject.extend({\n  template: JST['foo'],\n  render: function() {\n      this.style = JST.CSS['foo']; // here the style variable has all the css file content.\n      return this;\n  }\n});\n. We also have to reset the style of all data attributes used by the player to avoid style collisions\n. As we discussed yesterday, plugins are so tiny that custom bundles saves us 0(zero) kb after minification, so closing it for now.\n. This was fixed with the CSS3 animations\n. :shit:\n. Added this to HTML5 video playback\n. I will start to post random names here:\nmediablock\n. bundle, pack\n. refri, soda\n. segretto + 1\n. pipoca[.js]\n. we decided to call it clappr, thanks for all suggestions :heart: \n. I'm closing this since the sequence plugin is deprecated\n. I'm closing this since the sequence plugin is deprecated\n. I'm closing this since the sequence plugin is deprecated\n. This was fixed in https://github.com/globocom/player/commit/429817d2f71a96142a1ffb64ae6da07f15e4f986 and https://github.com/globocom/player/commit/69d2f6d6382b7d714076f9aa1d4216a528968984\n. Ended up as ContainerFactory and CoreFactory\n. I don't think this still happens since we don't show the media control with the poster anymore.\n. +1\n. support was added in: https://github.com/globocom/player/commit/3f1207c08eef9639bae54d999fb0117483412270\n. for inspiration: http://beautifulopen.com/\n. @giubpl started to work on it\n. done, check http://clappr.io\n. We can take a look on tools like YUIDoc to generate docs for the APIs. I think this can be integrated with gulp easily.\n. This would be a great start @chriswiggins \n. @davidaurelio You're definitely right about this. I'll start to focus on this in the next days.\n. Following @chriswiggins idea, I started to draft an API.md file. Feedbacks are welcome.\n. They were used for multicamera. lazy_playlist was used to render galleries on Firefox, the loading plugin is used to show up a spinner with a message. I'll be closing this issue since this plugins are not being used on clappr and are specific for our private player.\n. I started to work on this here: https://github.com/thiagopnts/clappr-player\n. refs 63230bccae0b3636d24b710b0d277350ae5bff27\n. No I don't, you can close it\nOn Oct 2, 2014 7:16 PM, \"Fl\u00e1vio Ribeiro\" notifications@github.com wrote:\n\nHi @thiagopnts https://github.com/thiagopnts , a few weeks ago we\nremoved the visibility check on hls playback and Visibility package also.\nDo you think we still need to remove events.js?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/139#issuecomment-57718621.\n. updated at c3f4ec0022b810c215dad6b6fb73dc80ec0597f7\n. This is somewhat related to #139 \n. I've been looking at docco too, it generates docs like the ones from jasmine and backbone\n. https://readme.io/ seems cool\n. I'm closing this, we will use #115 for documentation updates\n. thanks @bernardocamilo!\n. Moved to: https://github.com/globocom/clappr-website\nThis saves us some megabytes in the main repository size.\n. great, thanks @joffilyfe!\n. I think we will stick with the current one. Any thoughts @flavioribeiro @towerz?\n. we decided to remove this feature from clappr's core\n. @flavioribeiro I dont have anything specific in mind, but I think there is space for improvements\n. I think it never worked that way\n. \n. Its working for me, which browser are you using?\n. Since we couldn't reproduce, we'll be closing this for now. Feel free to ping us with more details later.\n. Weird, it's working for me. Do you have flash installed? Also, can you try running it serving your page from a web server? (e.g. using gulp serve)\n. I started to update it but started to get some errors, I'm following this at Nikku/karma-browserify/issues/50\n. Weird, I tried to reproduce now on master now and it doesn't happen.\nIt happens on http://cdn.clappr.io/\n. great!\n. It would be tricky to remove jquery, but I think we can try. Another possibility is to make a custom jquery bundle(without the animation part). I believe this would cut jquery's size in half. I will take a look on this.\n. I did some improvements about this in 5e385425ac1dfb80f7c6bca213b69b2337d33ddd and d1ceee8800e27c6132a1f38902f19f46ccf72542.\nI replaced jquery with a custom zepto build, it ended up with 32kb(against the 84kb from jquery), and don't requires any  major changes in the code. I also did some tweaks on browserify settings to bundle all dependencies together, it reduced from 241kb with 1 external dependency to 192kb with all dependencies in the bundle. I believe we can still do better but its not related to jquery anymore more.\n. Not sure if gif is the format you're looking for(since you can't have such control of gif files). What I see people doing is to just show thumbnails and load the gif on mouse over. A more tricky solution is to do something like twitter and imgur are doing for handling gifs.\n\npreload=\"none\" used to be our default behavior for html5 but I checked it now and looks like it was removed somewhere in time, I will add it back.\n. Yeah, it would be something like the loop option\n. Thanks @Crash--!\n. Reopening, it might be useful to directly get the current time of the container without the need to listen to something.\nOur current use case for this is to get to know the current time of a container in a given time before destroying it.\n. Hi @rheber, I'm referring to player's event, like this one: https://github.com/globocom/clappr/blob/master/src/components/container/container.js#L29-L44\nInstead of:\njavascript\nthis.listenTo(this.playback, 'playback:progress', this.progress);\nIt would be better to have something like this:\njavascript\nthis.listenTo(this.playback, Events.PLAYBACK_PROGRESS, this.progress);\nThis avoids typos and can be useful for future reference for what are the available events.\n. Hi @alvynmcq, I made some comments on your changes. Also, can you split this into two pull requests one for each issue? It will be easier to review and merge it separately. Before sending the pull requests make sure everything is working by running the tests with:\n$ npm test\nPing me if you run into troubles!\n. :+1: \n. It looks ok to me, just update this container event I mentioned and I'll merge it.\n. Great! thanks @alvynmcq :+1: \n. +1, this is a better approach\n. +1 on it as well\n. You can call .destroy() on the player instance\n. Yes, currently the poster is set just on initialization. If this is too expensive for your use case I think you can set the poster directly on the plugin and re-render it. For example, suppose your player instance is p:\njavascript\nvar posterPlugin = p.core.mediaControl.container.getPlugin('poster');\nposterPlugin.options.poster = 'your new poster';\nposterPlugin.render();\nThis makes me think that we can add an easier way to access container/core plugins from the player instance, something like:\njavascript\nposter = p.getContainerPlugin('poster')\ncc @flavioribeiro, @towerz, @barbosa \n. @Metrakit yes, you can. The this.core has a reference for the media control, so, if you want to render something there, you just have to: this.core.mediaControl.$el.append(something). You can also get the current container from media control with: this.core.mediaControl.container. Since we don't have any useful documentation yet, feel free to ping us here!\n. Hi @Metrakit, I would suggest you to keep everything inside a single html file in your public dir. This would be the template of your entire plugin, with the html for all your DOM elements. By doing this all events declared in your events attribute gets bind on render.\n. It looks good to me, it can be nice if this was considered always true by default, what do you think @flavioribeiro?\nAbout this feature by domain, I think it would be useful as a plugin for our private player.\n. You have access to the options in the options hash passed in the constructor of container/playback plugins and in this.core.options in core plugins\n. Hey, no problem!\nIt returns NaN? Firefox plays H.264 videos using the flash playback, and it has this limitation, it can't get the video duration before the first play. So this information will be available for you just after the video starts to play.\n. Yes, that would be nice. We end up putting it on window for some old browserify misbehavior. I think its now fixed and we can go this way.\n. @irongomme We solve this problem in some of our internal plugins, I think we can apply the same solution to clappr. I'll take a look on this now.\n. https://github.com/clappr/clappr/commit/19740cd8a3a7a5ecab3b9a7bed96d2ad20c08920 adds a new baseUrl param to use a custom host, if no baseUrl is passed it will try to get it from the current host.\n. You need to create an external plugin if you want to have more control over this, like changing template structure, etc. Overriding the CSS would be a more practical way.\n. Sorry for the delay, and thanks for investigating on this. By \"player height 100%\" you mean the height attribute on player initialization? \n. I see, this change was introduced by @towerz at https://github.com/clappr/clappr/commit/e364cd3db277122aefb53fe499dcc72cb65c61ef to keep the icon size proportional when changing player's size. Currently we don't support percent height/width, we need the data-player div to have a fixed size for reference to the inner elements. For adaptive size, you would need to use .resize({width/height}).\n. I think this should be a external plugin. What do you guys think?\nLooks like this increases ~7kb in the final bundle.\n. Actually this is related to using percentage as height/width, which we don't support\n. @irongomme Not right now. The internal parts of the player currently depends on a fixed height/width from its \"root\" element. I would suggest you to manually set the player's height/width using the .resize({width: width, height: height}) method from the player instance as you need.\n. Also you can just $('[data-seekbar]').hide()\n. removed at https://github.com/clappr/clappr/commit/3a62542eb63272859fff4e9de8c4b4bb7783b149\n. Good catch, currently all mobile interactions are still lacking attention from us\n. Awesome!! \ud83c\udf7b\nOn Sat, May 2, 2015 at 3:43 PM Bruno Torres notifications@github.com\nwrote:\n\n@thiagopnts https://github.com/thiagopnts @tulios\nhttps://github.com/tulios I just pushed some changes to allow for the\nproposed construct:\nvar MyPlugin = UICorePlugin.extend({foo: ...});\nNow you can create plugins like this:\nvar MyPlugin = Clappr.UIContainerPlugin.extend({\n  constructor: function() { this.render() },\n  render: function() {\n    this.$el.html('This is a test')\n    this.container.$el.append(this.$el);\n    return this\n  }\n});var player = new Clappr.Player({ ...\n  plugins: { container: [MyPlugin] }\n});\nThe constructor method is used for the object initialization. There's no\nneed for calling the parent constructor, as it is automatically called.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/clappr/clappr/issues/393#issuecomment-98391385.\n. I'm not familiar with this, is not specifying an extension to the source a common thing in streaming services?\n. @expandingfocus hey, do you have a link to share were the issue is happening?\nThis works for me on http://thiago.me/clappr-360/:\njs\np.on(Clappr.Events.PLAYER_ENDED, () => window.location.href = 'URL');\nwhere p is the player instance\n\n. sorry didn't have the take look at this, nice that pannellum worked out! I just pushed a new version of clappr-video360 that fixes the sensitivity issue. Thanks!\n. Awesome, thanks!\n. I tested on iOS and it works fine but looks like this broke the fullscreen in Safari(desktop), can you check it?\n. @irongomme thanks!\n. I have a lot of ideas about this, I started to experiment some things, will probably have a PoC on a branch soon\n. @tjenkinson yeah, that is the plan :)\nwhere still cleaning things up, but we're going to have this working soon\n. A common pattern is to pass an options hash instead of multiple arguments, like this:\njavascript\nMediator.on('eventName', function(options) {\n    console.log(options.arg1, options.arg2); // foo bar\n});\nMediator.trigger('eventName', {arg1: 'foo', arg2: 'bar' });\n. I've been using gitter with nickel.rs, really good so far, what do you guys think? cc @towerz @leandromoreira \n. Done :)\nhttps://gitter.im/clappr/clappr\n. AFAIK these messages are from flashls, maybe we can disable it in our fork clappr/flashls\n. We could also not require it when building for production\n. not having the plugin in the bundle\n. wrong repo? :P\n. Can you share your source? Also I'm not sure if you can play a stream from a file://\n. @lkkadiri yes, we changed the way we build the player, I'll update update the README with the right instructions, now you should just npm run build or npm run release\n. thanks @jfairley!\n. @tjenkinson nice!\n. I remember we didn't implement that because we wanted to keep the ideia of, given a source, find a playback this browser can play. Originally, you would always pass a single source, and an array when using pip or the playlist plugin. I think we can have a workaround for this with a core plugin until we have flash-free solution for all major browsers as @towerz suggested.\n. :tada: :tada: :tada: \n. @houndci shut up\n. I guess to track if the video is buffering and implement a isBuffering or isPlaying(which considers if the player is buffering) would just bring another state to the player to be tracked. It would be easier to just listen to the buffering events and don't do what you wanna do while in the buffering range.\n. it looks awesome!\n. Thanks!\n. +1 to that, I didn't realize that it was a common API between the other players to have it in seconds until now\n. Thanks!\n. IIRC, to enter in fullscreen we first need a user interaction, I think we should keep that in mind when designing this API. It would also be worth to take a look at the browser's fullscreen API again, I remember it was a pain so things might be evolved somehow now\n. are we planning to support it on the player itself? I would keep it as a separate plugin\n. it was being used in the normalizeSources method, I guess to handle string and ids sources\nhttps://github.com/clappr/clappr/commit/0d557e1acf9534d25cc0717838aa9c90f7db367d\n. Yeah, I don't think we're using it anywhere anymore\n. wouldn't be easier to pass the instance as a parameter for the new playback? seems weird to have the core source support other things than strings\n. your canplay method can use information from the source string to decide rather it should play or not, e.g. in the 360 plugin I just pass video.mp4#360 as a source and my canPlay just match for /#360$/\n. @tjenkinson would it work with something like this?\njavascript\nconstructor(options) {\n    super(options)\n    this._context = options.context\n  //etc\n }\nVideoContextPlayback.canPlay = (resource) => {\n  return resource === 'video-context-playback'\n}\n. aren't params from the player constructor passed to the other components anymore?\n. agree, I would just avoid adding code for edge cases that can be worked around using the plugin system\n. 1000th issue \ud83c\udf89 \n. this kind of parameter could be standardized in the player constructor instead of having hlsjsConfig, flashHLS, html5Config etc, so you just pass something like playbackConfig and then the playback grabs and uses as it needs\n. nice \ud83d\udcaf \n. @tjenkinson I remember this being some IEsomething quirkness\n. looks like this increases 16kb in the minified player size, which is already around ~410kb, which is almost twice the size of the player a couple months ago. I think we need to pay more attention to this\n. I can reproduce here http://cdn.clappr.io/\n. maybe its just a webpack version mismatch\n. I would only add that if it's really necessary(real use case were the\ncurrent hide/show doesn't work), to keep simplicity\nOn Saturday, 10 September 2016, Leandro Moreira notifications@github.com\nwrote:\n\n@mikeevstropov https://github.com/mikeevstropov I think you can use\nthis event for now but I think mediacontrol_render might be something\nuseful (hide/show is different of render/remove) :)\n\u2014\nYou are receiving this because you are on a team that was mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/clappr/clappr/issues/1146#issuecomment-246126201, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AATqv5aCUkuck1B-hd-YWi36z-YePicHks5qovCxgaJpZM4J5UU1\n.\n\n\nhttp://thiagopnts.me\n. makes sense, it might be worth adding a jsnext:main field too later\n. we can merge this one, I'll be removing one by one whenever I get some free time\n. @kslimani I added instructions to the readme https://github.com/clappr/clappr-zepto/blob/master/README.md\nIdeally the project would be a fork so it would be easier to update. no css da pagina vc pode fazer isso:\ncss\nvideo {\n   object-fit: fill;\n}\n. nice, this makes a lot of sense!\nI added this to #1395, with this + not requiring all plugins in the Loader we should have a pretty smaller bundle. @michaelcunningham19 I'm working on this here https://github.com/clappr/clappr/tree/skinny-clappr\nit has a ~175kb light version. clappr doesn't have any methods for that, but you can achieve that by drawing the video element to a canvas and use canvas.toDataURL()[1] to get an image\n[1] https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL. you can override the built-in poster plugin with yours without this functionality, as mentioned in this just merged new docs: https://github.com/clappr/clappr/blob/master/doc/TROUBLESHOOTING.md#how-can-i-disable-or-override-a-plugin. ah, you can try to player.getPlugin('click_to_pause').disable(); then. hmm weird, if I disable poster and click_to_pause it stops to play on click, can you share your code?. hi @maza2k2, you need to add allow=\"gyroscope; accelerometer\" to your iframe tag(I dont know much about browser support tho). Another solution is to listen the events in the child page and postMessage that to the parent.. ",
    "lokiheero": "+1 for open source the auditude plugin\n. ",
    "towerz": "Closed by commit 5f11b580c0d41d19e78bbb94d68e4a0192437e2b\n. Fixed after changing bars to styled divs\n. @flavioribeiro Are you testing the html5 playback with a mp4 or m3u8? Can you share the URL you are using for the tests?\nIt's possible that the stalled/waiting events are being discarded due to the readyState informing that the player has future data available. It could either be a bug on the html5 playback or a weird browser behavior.\n. @flavioribeiro Seems to be a bug on Chrome and other Chrome based browsers. Other browsers such as Safari and Firefox trigger the stalled and waiting events normally. Analyzing further, Chrome apparently doesn't set the element readyState correctly as well. It really looks like we can't work around it.\n. I think it could work well. I'd rather use the progress event to track this, only to be sure it will be called whenever there's change on network activity.\nUsing timeupdate might break more easily if it stops being called whenever data is not ready on the buffer.\n. Maybe instead of checking this.el.buffered.length -1, you should use bufferedPos. If the user seeks back to a unbuffered position and the player stalls, checkPlaybackState() would not set the buffering state correctly.\n. Closed by dc0c139749fc8773205b585976a7165f58fe6411\n. Closed by e0c5f85af48f0dbb8df0f8ea4c4227c6d2541d96\n. Closed by f3be1ce2b58b0bfe509c726407bfa4bb6e00495c\n. Closed by d2cf789d45ad159a32f11b4650ca2422af499dd6\n. Closed by c7e3d59648d231c28f865ded7b87cb92accae3f3\n. mm (M&M's)\n. screenplay, silver screen, flick\n. flixtream (following boxtream from @flavioribeiro)\n. I received a suggestion to name it Nazgul (an inside joke due to our internal system named Sauron).\n. @flavioribeiro sure, I forgot to close this issue. Commit 671e4f2abf4ed129691eae12c445d57be642b959 solves it.\n. Great job, @leandromoreira! :beers:\nI'm ok with closing this one, now we can start moving towards tutorials and other kinds of documentation, as well as improving our test coverage.\n. In fact, this is a bug in the HLS playback plugin. Although it keeps track of the dvr status and sets it accordingly, it does not use this to update the media control settings.\nI'm already testing a fix for that.\n. @thiagopnts +1 on sticking with the current spinner. I think implementing the proposed spinner will be overly complicated and could have limited benefit.\n@irongomme The proposed spinner was an animated Clappr logo, with two animation phases: one for opening/closing the logo, and other for making a spin animation.\n. I created a separate issue because #152 still has some visual elements to be defined. I want to solve at least the consistency between DVR and VoD controls.\n. Most of the seekbar changes have already been implemented. The only annoying issue that is still not fixed is showing the media control before the container settings have been computed.\n. Since dd7080ea8b203cd68988d4227efcddd6a25b3fc4 was breaking playback order for Safari, forcing it use flash instead of its native HLS support, I moved it back in the priority list and fixed the regexp matching for the resource url with 1094845bd5edcda8da2b945f0843f3e5f3ed0109.\nTested with http://fenkamlibertas1.origin.mediaservices.windows.net/44ba3547-2e2d-43bf-b073-e06bfc5a6a1b/Bullet_movie-m3u8-aapl.ism/manifest(format=m3u8-aapl) and it worked correcly.\nPlease reopen if there's some unexpected behavior.\n. There was a minor issue with the canPlay() regex on Flash playback, but I fixed it with 1094845bd5edcda8da2b945f0843f3e5f3ed0109.\nWe could provide a way of informing the mime type for the source url to support some weird urls that do not provide a file extension or type inside it.\n. Another idea could be use a HEAD request to check the mime type prior to selecting the playback. \nIt could have a little impact on startup due to the extra round trip, but would keep the player instantiation simple. But I don't think this is really a downside, because we could make the request only if no playback regex matches the source url.\n. Should only be a matter of updating the container reference on mediacontrol:containerchanged.\n. This problem is related to a resize call on core constructor to calculate the initial player size. This call is no longer necessary because it's calculated just after rendering the element.\n. Closed by 60ad2c11e882b4744787728af53cf3e1a191fbd1\n. I think we can close this issue, since 0a83e0a7d34313531caa4e1373528af74f5821f9 added support for showing objects on player log.\nWe still could add better tuning of log levels, but it's not really necessary for now.\n. Since the media control rendering is currently not enabled on mobile, changing the default value of useBackgroundButton to false will solve this for now.\n. Commit 44a167160334c61d7703122e9be6e53e3ed7daca closes this issue as well.\n. Commit 22c35f3b45ebbf03622de59d47a1f4c1c3692fbc implements the volume bar collapsing behavior. The flag for turning the behavior on for all sizes will have a separate issue.\n. @tjenkinson and @thiagopnts are right. I think the seekbar never worked that way.\nStill it might be a good idea to allow dragging anywhere on the seekbar. It would make easier to seek around by dragging, as well as keeping the same interaction we are implementing on the native versions for iOS and Android.\n. Closing issue, pull request #419 implemented this.\n. @flavioribeiro I don't think that would be a problem. In fact it could improve testing external plugins as well.\n. @flavioribeiro Do you remember what kind of pop-out functionality we were aiming for?\n. Thanks @flavioribeiro.\n. @JahlomP @sfia-andreidaniel It's being implemented as an external playback plugin, on towerz/clappr-youtube-playback. If you think there's anything that should be implemented on the playback, you are welcome to contribute.\nI'm closing this issue now, since the plugin development is on a separate project.\n. @zetatv the plugin actually is just a proof of concept, it's not really under active development. I try to keep it compatible with the latest version of clappr, but seemingly it broke due to either a clappr or youtube api update.\nI'll open an issue to check what's wrong with it. Thanks for bringing this up.\n. Added basic Chromecast support on 0.1.7. Additional functionality and improvements will be added over time.\nPerhaps extracting the plugin to a separate project will be better to keep improving without depending on new Clappr releases.\n. Thanks @deedos!\nThe Chromecast integration works only in the following conditions, in addition to setting enableChromecast: true:\n- You are using the Chrome browser with the Chromecast extension\n- The computer is in the same network as the Chromecast device.\n- The receiver app you are trying to access is published.\nThe sample Clappr Chromecast receiver is used when you don't set chromecastAppId, so you probably were using it by default. It was published by the time this issue was closed. Are you sure the other conditions were met when you tested this feature? Did you test using http://cdn.clappr.io?\n. @flavioribeiro @dayvson we already considered extracting some non vital plugins into external codebases. I agree the chromecast plugin should be the first of them.\nI'm already doing some cleanup in the clappr project, so you don't need to worry about this.\n. Removed this on 90840eebe1b837f27771b6598793017fb916388d. I think we can close this again. The plugin source will be added to clappr/clappr-chromecast-plugin.\n. Next release will work properly with require. Setting Clappr to window will still be needed though, to support different kinds of applications.\n. Closing issue, since click-to-pause plugin provides this functionality.\n. There's still room for improvement, but I think it will do for now.\n. @chriswiggins @osk Have you tried again testing on the latest version at http://cdn.clappr.io? Does this behavior still occur?\n. Since the problem doesn't happen anymore, I'll close this issue for now.\n. I believe 40a21f2b96fb1fae98cbc7ba1ad57e2b726745c6 closes this issue. If we need to do more work for the RTMP playback we can revisit this issue or create a new one.\n. @irongomme Please check whether the problem persists using the latest version (0.0.114). I believe this behavior has been fixed for percentage values.\n. @irongomme Anytime! I'm closing this issue then. If you find any other problem please reopen.\n. Seems to me this issue should be closed then. Please reopen if there's anything else to do.\n. @stjernstrom The jsfiddle will work in any browser that uses the html5_video playback for HLS content.\n@whadar The problem seems to be with the way jsfiddle renders the html snippet. It uses a sandboxed iframe, which blocks execution of plugins. This makes HLS playback to fail because the SWF is not loaded. In fact, no request to the SWF file is made at all.\nWe'll check if there's a way to detect if the player is loaded in a sandboxed environment to prevent these errors from occurring, but I think we won't be able to load the HLS playback correctly anyway.\n. Since the iframe sandbox environment does not allow embedding flash, the flash based HLS playback won't work. There's no solution available to prevent this from happening, aside from loading the HTML5 playback (supported only on Safari and mobile browsers).\nClosing issue for now, can't fix this for the flash playback.\n. @irongomme Thanks for implementing this. We're still lacking support for touch gestures, but it's something we will start focusing soon. Probably after releasing version 0.1.0 (I'll set a milestone after releasing 0.0.115 with current bugfixes).\nI think we can close this issue now. If there's something else you need to implement with touch interfaces please open a new issue.\n. @brocaar Could you please check whether this bug persist on your tests? I cannot reproduce this error on http://cdn.clappr.io using an up to date Safari (8.0.5, OS X 10.10.3).\n. @brocaar @Facecast I believe the problem is that Safari is not sending pointer events to the mediaControl instance, thus making it not visible. After forcing it to re-render or trying to access the element via the console, the mediaControl starts showing on mouseover, but it's still missing pointer events.\nI'll post updates as I find out more about this issue.\n. I really seems to be a bug on Safari. After I updated to a later version (8.0.6) it doesn't happen anymore.\nPlease reopen if you run into this problem again.\n. @thiagopnts Talking with @tulios, we agreed on two proposed changes to allow for dependency free plugins.\nThe first one is exposing the plugin classes under the Clappr namespace to avoid using CommonJS \"require\", to avoid conflict with other \"require\" implementations. The other is creating the \"extend\" method or using a factory method if \"extend\" conflicts with our current ES6 class implementation.\nI intend to implement the solution this week so we can move on to Clappr 0.1.0.\n. @thiagopnts @tulios I just pushed some changes to allow for the proposed construct:\njavascript\nvar MyPlugin = UICorePlugin.extend({foo: ...});\nNow you can create plugins like this:\njavascript\nvar MyPlugin = Clappr.UIContainerPlugin.extend({\n  constructor: function() { this.render() },\n  render: function() {\n    this.$el.html('This is a test')\n    this.container.$el.append(this.$el);\n    return this\n  }\n});\nvar player = new Clappr.Player({ ...\n  plugins: { container: [MyPlugin] }\n});\nThe constructor method is used for the object initialization. There's no need for calling the parent constructor, as it is automatically called.\n. @aguxtremo The problem here seems to be that the player is not able to determine the media format based on its URL. Currently, the playbacks use the URL file extension for determining the media type. Since both http://5133.live.streamtheworld.com/LOS40_ARGENTINA_SC and http://5133.live.streamtheworld.com/LOS40_ARGENTINAAAC do not present a file extension, the player cannot determine whether it can play the media or not. We have some ideas to work this out but they're still not implemented.\nAs for the PLS playlist (http://provisioning.streamtheworld.com/pls/LOS40_ARGENTINA.pls), it seems that the HTML5 audio tag do not support it on both Firefox and Chrome. Safari reports \"maybe\" for its playback capabilities.\nOn Chrome and Firefox:\n```\n\nel = document.createElement('audio')\n< \nel.canPlayType('audio/x-scpls')\n< \"\"\n```\n\nOn Safari:\n```\n\nel = document.createElement('audio')\n< \u200b\u200b\nel.canPlayType('audio/x-scpls')\n< \"maybe\"\n```\n\n@thiagopnts @flavioribeiro What do you think of adding a way to determine the mime type based on the Content-Type header for these URLs with no file extension?\n. @aguxtremo This is because the query string is ignored when determining the file extension:\nvar resourceParts = resource.split('?')[0].match(/.*\\.(.*)$/) || []\n. @flavioribeiro I was thinking of something like that, but after some time I changed my mind about adding a fallback check at the end of the Loader array. \nInstead, I would suggest adding a check for missing extension on the URL before searching for the right playback on the Loader array. Only if the URL does not have an extension, we would check for the mime type using a HEAD request prior to going through the Loader array lookup. This way we won't have to worry about routing to the right plugin from the tail of the Loader array.\n. Any thoughts, @thiagopnts?\n. @thiagopnts Yes, specifying a file extension is a common thing in streaming services, but this solution is only for non-standard URLs.\n. @snsxn What kind of streams are you referring to? AFAIK, most streaming solutions generate URLs including the playlist file extension, like pls or m3u8. Some other streaming formats use an URL that do not include a file extension, like smooth streaming, but those are still unsupported.\nAbout this feature of telling Clappr the content-type for the URL, it's still not supported. We're considering adding this feature of processing the content-type either from a HEAD request or a embed parameter to a standalone plugin. This way we can keep the Clappr core simple, but still able to support this kind of situation.\n. @snsxn I agree there are some streaming solutions that don't use file extensions, such as smooth streaming, and others. Since even the HLS spec allows identifying the stream type through content-type, we'll add an embed parameter to allow setting this externally.\n. @aguxtremo @snsxn I added a mimeType parameter to player embed to allow setting this information externally.\nUnfortunately I'm still facing some security issues when trying to check the mime type for a given URL. It's probably a dead end, but I'll keep trying for a while before giving up and be satisfied just with the external parameter.\nYou can now create the player like this:\nvar player = new Clappr.Player({\n    source: 'http://provisioning.streamtheworld.com/pls/LOS40_ARGENTINA.pls',\n    mimeType: 'audio/x-scpls; charset=UTF-8'\n})\nHope this will help solving many of those issues.\n. @flavioribeiro +1 for that. I was looking at the HLS playback code and I think it's easy enough to add it as  an embed parameter. The playback should only check for the parameter presence and setting the max buffer length based on that parameter, on the setFlashSettings method.\n. @wicherdt @flavioribeiro I just pushed ff8b05c09e96e4d44476acbf8c77323eaaa00734 which adds a new parameter maxBufferLength, defining the buffer length in seconds. The default behavior is still to download all fragments.\nI believe this closes the issue. Please let me know if there's anything else to add.\n@flavioribeiro @thiagopnts @leandromoreira What do you think of changing the default behavior to use a limited buffer length instead of downloading the entire video? I think mimicking the progressive download behavior should be optional.\n. @irongomme This parameter is for the HLS playback, which is the playback abstraction for HLSPlayer.swf.\n. Closing, everything is working OK.\n. @wicherdt Please check the commit ea33aa1c52fc3b82eaba97e31ef3ac81da5ac668. This will enable the player to properly scale with the container element if any of its dimensions are set to a percentage value.\n. @wicherdt Check this fiddle showing how to make a fluid resize of the player: http://jsfiddle.net/oujfL91o/.\nWhen using percentage values, the parent element must have its height defined. In your example,  #player will have an automatic height, which by default is the computed size of its children tree. If you add the parameter height: '100%', you are telling the player to use the height of its parent, which in turn would be computed to zero, since no child element has an actual size. They are all computed using percentages.\nWith a responsive grid, the width parameter is not an issue, because the grid defines the width of the elements according to resolution. You used an external div with the class embed-responsive-16by9, which already sets the height of the element to keep the 16:9 ratio. Since the player does not change any properties of its parent, I recommend changing the following code:\n<div class=\"embed-responsive embed-responsive-16by9\">\n    <div id=\"player\"></div>\n</div>\nto\n<div id=\"player\" class=\"embed-responsive embed-responsive-16by9\"></div>.\nI believe this will solve your problem.\nPlease note that percentage values are only supported on Clappr 0.0.114 or later.\n. @wicherdt Anytime. The resizable function was only to demonstrate the fluid resizing of the player, adding a resize handle so it will adjust to any size you want.\nSince the player is working on your responsive grid, I'm closing this issue. Please reopen if there are any other problems related to it.\n. @shacharz Could you please check if your Flash Player and Firefox versions are up to date? If you have any Flash blocker or an outdated version of the Flash plugin, the HLS playback may not load correcly.\n. @irongomme As far as I can tell, most mobile browsers on iOS and Android rely on user interaction to trigger playback. In Safari on iOS, it's even worse, because it even ignores the preload attribute on the video tag.\nA solution from an UX standpoint is to present a list of videos for the user to select, and have a hidden player instance. When the user taps an element on this list, you could call load() on the player and make it visible. This way the video will start automatically, but only after an user interaction.\n. @irongomme if you instantiate with no source parameter or with an empty string as source, Clappr will instantiate the player using a NoOp playback. You can use the load method normally after that, like this:\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\nThen, on user tap:\nplayer.load('http://cdn.clappr.io/highline.mp4');\nplayer.play();\n. @irongomme I don't think we can do much for this in Clappr itself.\nMarking as wontfix, but if anyone finds a solution for this we can reopen it.\n. @egftechman @flavioribeiro Just pushed a fix for this issue, could you please check against 760db90c8c0f5b43a2e1cf93923e9e0269a2abbd?\n. @snsxn Could you please elaborate more on this? I tried to reproduce this behavior on http://cdn.clappr.io but I couldn't. Can you tell me how to reproduce this?\n. @snsxn Discarding the source of the HTML 5 tag when stopping playback solved the problem. I also added a way for passing the mime-type of the content so you don't need to change the code anymore.\n. @flavioribeiro Updated, thanks for the heads up.\n. @irongomme HLSPlayer.swf already has a feature to switch between audio tracks, but we still didn't add it to the HLS playback. As for the subtitles, we still don't have support for displaying subtitles.\n. We are currently testing using flashls chromeless player directly since we don't actually customize it for Clappr. Work is being done in the flashls_dev branch.\n. @guzz we're still fixing some errors and improving external plugin interfaces prior to releasing a new version. You could use the version on master to work with external events when waiting for a new release.\n. @RadyAeg we still don't expose errors as events. I created an issue for us to implement that (#415).\n. @guzz @RadyAeg @turanjanin We just released version 0.0.115 with external events implemented. Now you can listen to the events as @flavioribeiro described. It also includes the event Clappr.Events.PLAYER_ERROR to listen for playback errors. We are still improving error handling, but there are some basic errors implemented already.\nFor external events, I would recommend using the on method instead of listenTo:\njavascript\np.on(Clappr.Events.PLAYER_PLAY, function() { console.log(\"playing!\") })\nPlease let me know if you have any more questions. I'll close this issue for now.\n. @costa you can find a list of all events on the Events class. The player external events (the ones you can subscribe with #on) are the ones with PLAYER_ prefix, like:\njavascript\nvar player = new Clappr.Player(...)\nplayer.on(Clappr.Events.PLAYER_PLAY, function() { ... })\nYou can also listen to these events with the events parameter:\njavascript\nvar player = new Clappr.Player({\n  events: {\n    onPlay:  function() { ... }\n  }\n})\nWe have some issues with doc generation, which doesn't filter the events properly, so on the Player (class documentation)[http://clappr.github.io/classes/Player.html], for example, all internal events are exposed, instead of only the ones prefixed with PLAYER_.\n. @LeonardoCardoso Most of the time the spinner is shown due to the start of the video being removed from the buffer, due to browser buffering policies. The video is not actually loaded from source, only the loop property is set on the element.\nWe cannot control whether to keep the first portion of the video on buffer, but we can delay displaying the buffering indicator for a small interval (100-300 ms). This will prevent the loading indicator to blink when the video is looped around.\nPlease let me know if this change solves your problem.\n. @JoosyBill Could you please check whether the problem have been solved after commit 48c94affdd787659cc1655469885eae8b0cfaa46?\n. @JoosyBill I'll close this issue then. Thanks for your help.\n. @LeonardoCardoso thanks for your help. I'm not sure when this feature broke, but I'll add some tests to avoid regression issues.\n. Seems the playback was missing a state (PAUSED_BUFFERING) as well as enforcing there were less than 1 second on buffer when switching to PLAYING_BUFFERING. \nThe latter condition could lead to the player being hung on PLAYING_BUFFERING state without actually considering itself as buffering (triggering the event Events.PLAYBACK_BUFFERING).\nI'm already testing a solution for this, and I'll push as soon as possible.\n. @shacharz please test using master to check if there's any other problem displaying buffering indicator.\n. @shacharz We were planning to jump directly to 0.1.0 but since there were lots of issues, I believe by the end of this week we'll release 0.0.115 before going for 0.1.0.\n. @irongomme It really seems to be a flash issue. We're still investigating why there were some problems with our flashls fork and whether this is a bug we introduced.\n. @irongomme I've opened an issue on flashls to get some help discovering the reason this problem occurs. Probably @mangui will have a better insight of why the player presents this behavior.\n. @neilkinnish Thanks for the info, I'll check if I can reproduce this behavior.\n. @irongomme @neilkinnish It seems the latest version of flashls fixed this weird behavior. I just pushed an updated HLSPlayer.swf with this version.\nAlready tested it with your stream (https://sslhls.m6tv.cdn.sfr.net/hls-live/livepkgr/definst/m6_hls_aes/m6_hls_aes_856.m3u8) and it worked. There was only one behavior that I noticed, which is the either the audio or the video starts playing first, and apparently on the next segment the playback stabilizes completely, playing both audio and video. This doesn't happen 100% of the time, but it's still noticeable at times.\n. Makes sense, perhaps that's why I couldn't reproduce the error in my test setup. Thanks @mangui!\n. Closing this issue, seems to be a problem related to a specific stream.\n. @ishahak I'm not sure why you're having this issue. The CDN is already configured to return CORS headers correctly. I tried accessing it using curl and the result was this: \ncurl -I -H 'Origin: http://localhost:8881' 'http://cdn.clappr.io/latest/assets/Player-Regular.ttf'\nHTTP/1.1 200 OK\nx-amz-id-2: lRFx2lMP1pxoUbtNj3Vej+V+V3AuB17Y/e3M2RykOa6b79gFJMIPgtZ0X3g8bVGtVkVoBeOm2Vk=\nx-amz-request-id: BD092FEA2F9EEC04\nDate: Thu, 30 Apr 2015 21:16:18 GMT\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: PUT, GET, POST, DELETE, HEAD\nAccess-Control-Max-Age: 3000\nVary: Origin, Access-Control-Request-Headers, Access-Control-Request-Method\nLast-Modified: Thu, 23 Oct 2014 20:22:09 GMT\nETag: \"3e43a5d764f841e7e78896de82cd6c50\"\nContent-Type: application/x-font-ttf\nContent-Length: 5081\nServer: AmazonS3\nCould you please check whether this command returns the same from your location?\n. @ishahak I noticed you didn't add the Origin header to your curl request. Could you please try it again, using the parameter -H 'Origin: http://localhost:8881'?\nI suspect this Cisco ACNS may not set the response headers correcly, even when the Origin header is set. Your browser request/response made me think this way. Maybe testing through a VPN may show whether this is true. \n. @ishahak Unfortunately this is not easy to solve, but you can work around this issue by hosting the fonts and other assets on the same domain as the page that will load the player. This way, the cross origin policy does not apply and fonts will load correctly.\n. @lkkadiri You don't need to explicitly enable DVR controls on a live stream. The player detects whether the live stream playlist has a duration considered to have DVR (more than 240 seconds - currently this value is hardcoded) and displays the controls accordingly.\nYou can enable/disable the DVR controls plugin using the embed parameter useDvrControls (true/false). It's enabled by default.\n. @lkkadiri Is your playlist generation set to \"appending\" mode? Clappr relies on the m3u8 playlist to keep track of previous .ts chunks so it can seek back on live streams. If your playlist is in \"rolling\" mode it will discard older chunks, and make them inaccessible to the player.\nPlease try to check whether this is true. Just keep track of your playlist at the beginning of playback and then compare it against the playlist 5 minutes later or so. If the .ts chunks from the former are not present at the latter, then you are set to a rolling playlist and thus DVR is not available.\n. @mortchm Yesterday I pushed a fix for this behavior. Could you please try testing with the version on master? It will probably work as it should.\n. @mortchm Your test page is pointing to the latest version of Clappr (updated today to version 0.0.115). I ran some tests and now the input is working correctly. I'm closing the issue now, please reopen if you find anything wrong.\n. @princ007 I'm not sure what's the problem you are having, could you please paste here the code you are having trouble with?\nI checked the latest version of the plugin and it exposes the plugin class(RTMP) in the window object, so no require is needed. The code should probably look like this:\nhtml\n<script type=\"text/javascript\" src=\"http://cdn.jsdelivr.net/clappr.rtmp/0.0.6/rtmp.min.js\"></script>\n(...)\n<div id=\"player-wrapper\"></div>\njavascript\nvar player = new Clappr.Player({\n  source: \"rtmp://your.source\", \n  parentId: \"#player-wrapper\", \n  plugins: { playback: [RTMP] }\n});\n. Hi @princ007, I checked your code and it seems ok. It worked just fine in http://cdn.clappr.io.\nThe only thing the got my attention is that the scripts in http://www.hits2hits.com/plugins/html5/dist/clappr.min.js and http://www.hits2hits.com/plugins/html5/rtmp/dist/rtmp.min.js are not loading correctly. Probably you need to adjust your HTTP server settings.\n. Hi @princ007, I'm not sure why you refer to the m3u8 playlist as false HLS. Apart from the playlist missing the EXT-X-ENDLIST (doesn't seem to be a live stream, so the end tag is required) and the wrong Content-type header (text-plain), it appears to be valid. I couldn't test it because of a status 403 requesting the crossdomain.xml, but it should work ok with no plugins needed. Please try to add cdn.clappr.io to the list of allowed domains in crossdomain.xml. This way you can use the test page to check if your stream will work.\nThe second URL could require a plugin to play, but I cannot identify what it the stream format.\n. @davidplappertvb I see you are using clappr version 0.0.114. This problem has been solved in commit 1d5be4b4d175f14385b7944a8a210198436ebcc3.\nYou can just update your clappr version to 0.0.115, which has this problem fixed already.\nI'll close this issue, since it's a duplicate of #426.\nPlease let me know if you have any problems regarding keyboard input.\n. Hi @buzzdev, have you tested on http://cdn.clappr.io? We've run some tests using HLS both with and without DVR and it's working correctly.\nIf you are using your own bundled version of clappr, please check if the request for flashlsChromeless.swf is returning ok and if your crossdomain.xml is configured correctly.\n. @buzzdev I just pushed a new version (0.1.1) to the CDN that solves this problem. The flash object was enforcing that the domain of the page embedding the player is the same as the one serving the swf file.\n. @dasumin Could you please check whether flashlsChromeless.swf is returning correctly? Have you tested your HLS stream on http://cdn.clappr.io? We've run some tests on this page with both DVR on and off and it's working ok.\nIf it's really not working on the test page, please send the URL of your video stream or the page where your stream is not working.\n. @dasumin I just pushed 0.1.1 that fixes this problem. Please let me know if something else appears.\n. @konashark @gotsulyak I couldn't reproduce this issue anywhere I tested. Could you please check whether this still happens? If so, please check if there's something wrong when requesting the SWF. It could mean that the browser is canceling the request or the request is not returning the file in its entirety.\n. @gotsulyak What kind of source are you using? Is it a MP4 file or HLS stream?\n. @gotsulyak @konashark It seems to be related to hardware acceleration, which is enabled by default. If you disable it with useHardwareVideoDecoder: false, the video is displayed correctly. \nIt's probably a bug on Chrome's own flash player implementation.\n. @kyleparisi This seems to be a problem with google chrome pepper flash player. As far as I know it's a problem with hardware acceleration. The RTMP plugin doesn't seem to include an option for disabling hardware acceleration, but I think it needs it to support google chrome correctly.\n. Yes, I think it would be better to have an issue in the plugin project.\n. @timbiker What kind of video are you playing when you have these issues?\nAbout different fullscreen modes, Clappr still doesn't support this. It always fits the content inside the player frame.\n. Since this issue is related to the RTMP plugin, I'll close this one.\nRegarding supporting other fullscreen modes, we don't have any plans to implement this, since it's directly related to how the playback plugins work. If the playback plugins add support for this feature, it will be automatically enabled in Clappr.\n. This annoying message will stop occurring after we change hardware acceleration defaults and close #450.\nI'll close this issue for now.\n. @shaharmor What kind of source are you using? Is it a mp4 or HLS stream?\n. @shaharmor Indeed, the HLS playback triggers a bufferfull event after changing to PLAYING state, whether it's buffering or not. I believe this was done to workaround an issue on a older version of our flashls implementation, but it seems to be unnecessary right now. \nIt won't cause any unexpected behavior as well, because changing to a PLAYING state implies that the player is not in a buffering state.\n. It will be removed in the next version, we just need to run some tests to make sure it won't introduce any weird behavior.\n. @flavioribeiro I think we'll have a version ready as soon as we get some of these recent playback/plugin issues fixed, to avoid breaking existing code that uses Clappr. I believe today this will be ready.\n. @AndCycle We're in the process of migrating http://cdn.clappr.io to the project sponsor CDN. We plan to enable HTTPS during this migration.\nYou could also host your own version of Clappr in your HTTPS enabled domain, you just need to set the baseUrl parameter accordingly.\n. Hi @tjenkinson, it's possible that requirejs is making the commonjs require function inaccessible to Clappr. I'll run some tests to discover whether this is true and why it's happening.\n. Hi @tjenkinson, it seems your workaround is the only solution for now.\nWe use browserify to build the Clappr bundle, and it defines a global require function that conflicts with requirejs own implementation. We can't force using a closure around the resulting bundle and risk breaking external plugins that depend on the require function.\nWe're considering changing the bundle to use webpack, which will probably give us a little more control over how the package is built. I'll add a reference to this issue so we can keep this limitation in mind.\n. The first thing that came to my mind was creating a single bundle with Clappr and all the custom plugins. This way you can use your previously used solution. I believe this will be easier for you to do than wrapping all module definitions with closures and creating aliases for the defined require functions.\n. Hi @tjenkinson, Clappr for browsers other than Safari uses a flash based implementation that is built on top of flashls. As far as I know there's no special EVENT type playlist handling on flashls, but I think it will work ok on both VoD and live modes.\nI think you are probably having issues with DVR on live mode due to Clappr enforcing a minimum playlist length of 4 minutes length. I just pushed a change that adds a way to configure this minimum length (with the hlsMinimumDvrSize parameter), and changes the default value to 1 minute. Try running your tests with the code on master, letting the playlist get longer than 1 minute and checking whether DVR mode is enabled.\nPlease let me know if this works for you.\n. It's been a while since I ran a build on Windows. I'll check whether it's a dependency issue or something with the node version you are using.\n. @tjenkinson I checked on my windows machine and it built the project as it should. I used the same node version as you are using (0.12.2). Looking further at the error message, it seems your .NET build tools are outdated.\nCould you try installing a version of Visual Studio Express or if you just need the build tools, the Microsoft Build Tools 2013? I believe this will fix your problem.\n. Thanks @flavioribeiro! :beers: \n. Closing this issue since clappr/clappr-level-selector-plugin#2 was created.\n. Tested on Safari for iOS and it's fixed. Thanks @tjenkinson!\n. @tjenkinson Sure, you could take a look at this. I suggest creating a plugin for this, since the No-Op playback is only displayed when no other option is found, and not every browser needs flash for playing content.\nThis \"error\" screen is not entirely wrong, you could for example try to load a format that's still unsupported in the browser, like audio/x-scpls, that only Safari supports.\nImplementing a plugin would be better, checking whether installing flash would allow the player to find a playback for the video and informing the user to install it, without changing the default behavior when an unsupported format is found.\n. Hi @tjenkinson, any progress with this?\n. @tjenkinson I thinks there's only one problem with your idea. It creates a playback dependency on other playbacks.\nThe 'no_flash' playback checking other playbacks breaks the idea of having atomic playbacks. Playbacks shouldn't be aware of the others, unless it's a composition or inheritance relationship.\nI think you could improve your idea using a core plugin instead of a 'no_flash' playback. The core plugin could listen to a CONTAINER_READY event, and check whether the playback is a 'no_op' playback. If it's a 'no_op', it could check whether the Playbacks respond true to flashRequired and canPlayWithFlash the source. This way you don't break the architecture, as well as avoid creating a meta-playback to check whether the others are flash-dependent.\nWhat do you think?\n. @tjenkinson we designed clappr using 3 types of plugins:\n- core-scoped plugins, which have access to the whole player structure/state\n- container-scoped plugins, which have access to the structure/state of a single container, which in turn represents the area where a video or other content is rendered\n- playback type plugins, which sole responsibility is to render/decode a video or other content\nThe no_op playback is a placeholder playback which does not play any content, but instead displays a message that it's not capable of playing the content passed as parameter. Adding some logic to handle content playback capability is out of it's scope as a playback.\nGiven the aforementioned plugin scope descriptions, I believe the best implementation would be to use a UIContainerPlugin or UICorePlugin. Since our objective is to display an error screen telling the user that flash is needed for loading the content, we need access to the Loader object, which is scoped to the player core. It's used to determine the available plugins in the current player instance. Because of this, I would implement this functionality using a UICorePlugin, which has access to the player core object and can render content to the player element.\nAbout the playback logic to tell whether the playback canPlayWithFlash and has flashRequired, I'm not opposed to that, it's in fact useful. I would suggest adding a default implementation for flashRequired in the base Playback class returning false and then follow your idea for the canPlayWithFlash.\n. @tjenkinson yes, the plugin could remove the no_op playback from the DOM then render it's own message on the player element.\nThe text message on the no_op playback is only a generic message. It could be replaced by a plugin specifically designed for that, like the one you suggested. I think it's an even better idea.\n. @tjenkinson I think that would indeed make more sense. We tried to isolate the code for a flash-based playback in a single class, so it would be better to implement canPlayWithFlash and flashRequired in BaseFlashPlayback.\n. @leandromoreira not really, #559 does not solve the problem. As I mentioned in the PR, the problem with it is that a fake playback was implemented to replace the 'no_op' playback, instead of implementing a plugin responsible for handling whether or not flash is necessary to play the video on the current browser. The actual solution that we discussed in this issue is not yet implemented.\n. Hi @tjenkinson, now the favicon plugin is disabled by default. It can be enabled using changeFavicon: true when embedding the player, or on an existing player instance:\njavascript\nplayer.getPlugin('favicon').enable()\nThe enable and disable methods were added to the CorePlugin base class, following the same standard as the other plugin classes.\n. @tjenkinson This happens due to the HTML5 audio playback coming before the video on the playback list. Since the <audio> tag reports that it can play the given mime type on Safari, it gets chosen first.\n. @nums I just pushed some fixes for this based on @tjenkinson solution and what is already used in the HTML5 playback. Please check whether the code in master will solve your problem.\n@tjenkinson Thanks again for the help!\n. @nums No, I only pushed the changes to the source code, there was no build to use directly.\nTo make it easier for you to test, I uploaded a version to http://cdn.clappr.io/issue-464/clappr.min.js. Please try with this one.\n. Hi @tjenkinson, unfortunately this solution breaks using query strings in the player source. I ended using an implementation similar to what is already used in the HTML5 video playback.\nThanks for the help! \n. Hi @deedos, we are analyzing how to add Dash support to Clappr, either through a plugin or built-in playback.\n. @flavioribeiro it seems that the project you mentioned didn't even start. There's only the initial commit and the code seems to be only a bootstrap, perhaps generated by the plugin generator.\n. @jfairley, this plugin is based on clappr version 0.1.x. It won't work with 0.2.x as is, but I think it wouldn't be so hard to make some changes.\n@leandromoreira and I are working on plugins based on (shaka-player)[https://github.com/google/shaka-player] and (dash.js)[https://github.com/Dash-Industry-Forum/dash.js], but both are still in progress.\n. Closing this issue due to inactivity. Please reopen if there's any problem.\n. @irongomme Are you loading another source using load or instantiating a new player?\nDoes this happen on any specific browser/OS? \n. @irongomme I've tested on chrome v43 on all OSes (Windows, Linux, OS X) and it worked ok. What flash version and Linux distribution are you using? \n. @irongomme I've tested this in your environment, and it seems to be a problem related to using both autoPlay: true and calling play() when the playback:ready event is triggered. Seems to be a race condition.\nTry removing the call to currentContainer.play() on the playback:ready event, letting the autoPlay handle it instead. Please let me know if this works for you, since I can't test your stream (I'm receiving an error 403 when trying to load it).\n. Hi @wicherdt, please try to open plugin-related issue in the plugin repository. This one has been fixed on https://github.com/clappr/clappr-level-selector-plugin/commit/2208be71d169ae9836dd2487e263fe7c8397afb7. We'll release a new version of the plugin soon.\nPlease let me know if it's working for you. I'll close this issue, but if you have any trouble with the plugin, just open a new one in the plugin repo.\n. fixed on 0.1.5\n. @chovy I'm not sure of what you mean by prefetching the poster of the stream. The poster image used by Clappr is actually provided by the poster plugin. Could you elaborate on this?\n. Sure, why not? :+1: \n. :beers: \n. @chovy In order to load cross domain content using the flash plugin, it must be authorized through a crossdomain.xml spec file, otherwise the plugin fails to load the content. Using Safari there's no need for it, since the HLS stream is loaded directly by the browser. This behavior is correct, it's not an error.\n. @chriswiggins It's possible, but since you need to switch between two different types of playback and tricking the media control that it's possible to seek back on the live stream, you should create a playback proxy.\nJust create a playback that informs the 1-hour window for seeking back, but keeps showing the RTMP playback for the live stream. When the user seeks back, you just need to swap from the RTMP playback to your HLS and set the current position properly.\nI believe @flavioribeiro have already started helping you with this, but if you have any doubts, please let me know.\n. I'm not usually online on Gitter, but I'll try to sign in and try to help you with any questions.\n. Hi @VladimirVSgh, I just pushed a change that adds a parameter hlsLogEnabled to control whether these messages are shown. The default value is true.\nWe still haven't released a version with this change, but you can test using the one in master.\n. @chovy Just add hlsLogEnabled: false to embed parameters:\njavascript\nvar player = new Clappr.Player({\n    // ...\n    hlsLogEnabled: false,\n    // ...\n});\n. @tjenkinson Have you tried disabling hardware acceleration for HLS video decoding? Perhaps IE is not handling this correctly. Please try using the parameter useHardwareVideoDecoder: false when embedding the player.\n. Hi guys, this one was really tricky, but I think I found out the actual cause of the problem. I kept investigating whether it was related to our flashls implementation, but in fact it was the dvr controls plugin render call that caused the crash.\nI had to do a little refactoring but I think it works ok right now. Could you please test whether this solution works out for you?\n. Thanks @tjenkinson, I'll close this issue then.\n. Closing issue for inactivity.\n. Hi @konashark, our HLS playback uses a flash implementation based on flashls. Unfortunately, the flash code is not aware of redirects, and there's no way to detect whether a redirect occurs or obtain the final URL inside the flash player environment.\nI would recommend not using redirects due to this limitation. Adobe Air and other ActionScript based environments offer this feature, but it's missing on the flash player environment.\n. No, the flash portion of the player is code we can change. Unfortunately the URLLoader api is restricted in the flash plugin environment.\nBefore replying I tried to enhance our HLS implementation listening to a response status event when requesting the main playlist. In the browser flash plugin, the event never occurs. Checking the documentation I discovered the event is only available in desktop apps, but not in the browser.\n. I believe this would be impossible due to the nature of the flash plugin. Perhaps your hacker colleagues could take a look at it, but I wouldn't reccomend implementing a hack to support redirects. In this case I keep my recommendation to avoid redirects whenever possible.\n. Closing this issue, since we can't fix this behavior.\n. Hi @vrehak could you please test again using http://flashls.org/flashls-0.4.1.0/examples/chromeless/ instead? Clappr HLS implementation is based on flashls chromeless player.\n. The main difference between both tests (Clappr Flashls vs Chromeless Flashls) is that Clappr enables hardware acceleration by default for the HLS playback. You could try and disable it for older IE versions.\nJust set the parameter useHardwareVideoDecoder to false to disable hardware acceleration. Please let me know if this solves your problem.\n. I think we can close the issue right now. I just pushed a change to make useHardwareVideoDecoder default value to be false.\n. :+1: totally agree\n. I would suggest introducing some changes to the log plugin, like setting the player log level, instead of using a global variable DEBUG to set whether or not log messages are enabled.\n. @leandromoreira cool, that's exactly what I suggested.\n@thiagopnts what do you mean by not requiring it when building for production? Not having any log messages shown or not having the log plugin available? We opted for making the default log level only have WARN or ERROR messages.\n. @yisding The error code 1009 is from flash, and means that a null object has been referenced. Looking further into the issue it seems like you set width/height to 100% but the parent element have an undefined size, like zero width or height.\nIf you set the size of the player parent element, setting 100% to either width or height (or both) will work correctly.\n. I made a small change to the Clappr test page to allow testing with percent values. You can test there if you want.\n. Closing issue. Please reopen if there are further questions.\n. @jfairley I just pushed some small changes to the core object to allow getting the current container and checking the playback type:\n``` javascript\n\nplayer.core.getPlaybackType()\n< \"vod\"\nplayer.core.getCurrentContainer()\n< Container {uniqueId: \"o6\", cid: \"c3\", $el: X[1], el: div.container.pointer-enabled, currentTime: 0\u2026}\n```\n\nI think this will help you to avoid going too deep to find out whether you are playing live/vod content.\nPlease let me know if you have any progress in this or if you have any doubts.\n. I think we'll release a new version by tomorrow, just need to make a few more adjustments\n. Just released a new version (0.1.6) with these changes. Please let me know if you have any questions.\n. Thanks @stanogurnik!\n. @leandromoreira I think using the same protocol to load ga with this PR is better than using https only.\n. @dinhkhaihtc Are you loading Clappr from your own domain? If so, you should configure the baseUrl parameter as @chsergey mentioned. If not, please let me know how your setup works and what errors messages are displayed.\n. @VladimirVSgh @stanogurnik could you please test whether the change in 83740f32d057b88bb3eeefa8e1d9fe78b05ae6ea fixed this behavior? I could not reproduce this behavior with MP4 files, but I believe the crash with HLS streams doesn't occur anymore after this fix.\n. Thanks @iongion! We are still lacking most of the documentation, due to our reduced team, but there's some work in progress in that direction. I believe we will have the documentation/tutorials/blog pretty soon.\nI'll try to answer your questions and maybe shed some light with how you could create plugins that can solve your problem.\nWe use Clappr as the base of our player at globo.com, and face an issue similar to the ones you have. Essentially, our player uses ids that reference the videos in our platform, and we created a playback plugin that handles all this logic and then instantiates the actual playback to be played. This results in a playback that acts as a proxy for the underlying playback, but handling all the api calls and controlling the playback states so the interface keeps waiting until the video starts.\nEvery playback that is loaded in Clappr declares a canPlay method that returns whether it knows how to play a given source (usually a string):\njavascript\nvar MyPlayback = Clappr.Playback.extend({\n  // ...\n});\nMyPlayback.canPlay = function(source) { return true };\nThis way you can add support for new formats (\"source\" providers) just adding them to the plugin list when instantiating Clappr:\njavascript\nvar player = new Clappr.Player({\n  plugins: { playback: [MyPlayback] },\n  // ...\n});\nClappr gives priority to external plugins to override behaviors more easily.\nFor the second question, you could either create a core plugin or another playback. Plugins in Clappr are scoped: core plugins have access to the whole player state, container plugins are constrained to a single container (where the playback is rendered) and playback plugins are \"source\" providers.\nIf you decide to go through the core plugin route, you just need to parse your playlist, instantiate a container for a given source, and set it as the current. Then you just listen for the CONTAINER_ENDED event and then play the next:\njavascript\nvar MyPlaylistPlugin = Clappr.CorePlugin.extend({\n  // ...\n  bindEvents: function() {\n    this.listenTo(this.core.getCurrentContainer(), Clappr.Events.CONTAINER_ENDED, this.loadNextVideo);\n    // ...\n  },\n  loadNextVideo: function() {\n    var container = // ...\n    this.core.mediaControl.setContainer(container);\n  }\n});\nThe second route is like the first one, but instead of replacing containers, you just create your playback proxy and switch the underlying playbacks after receiving a PLAYBACK_ENDED event. This option has the advantage of adding the playlist as a \"source\", but you cannot change the media control behavior.\nPerhaps a mix of both the solutions could be ideal for you, but the simplest is just to create a core plugin to control the sequence. Since Clappr creates multiple containers (each with its own playback) if you use the sources parameter (as an array) instead of source, you could use this to create all containers for your playlist and just swap them as needed. Your plugin could parse the playlist, set the sources on core.options.sources and use core.createContainers to instantiate all containers for you. Then it's just a matter of controlling the playback state for the containers as mentioned before.\n. Just to add a bit more code, here's a sample for a custom playback proxy supporting a hash like the one you mentioned:\njavascript\nvar MyPlayback = Clappr.Playback.extend({\n  constructor: function(options) {\n    this.options = options\n    // ...\n  },\n  // ...\n  // create underlying playback given the actual url\n  findPlaybackPlugin: function(source) {\n    return _.find(PlayerInfo.playbackPlugins, function(p) { return p.canPlay(source.toString()) }.bind(this), this);\n  },\n  play: function() {\n    if (!this._playback) {\n      // Your hash -> url logic\n      var url = this.hashToUrl(this.options.src);\n      var playback = this.findPlaybackPlugin(url);\n      var options = _.extend({}, this.options, { src: url, autoPlay: false });\n      this._playback = new playback(options);\n        this.bindPlaybackEvents();\n    } else {\n      this._playback.play();\n    }\n  },\n  // forward playback events\n  bindPlaybackEvents: function() {\n    this.listenTo(this.playback, Clappr.Events.PLAYBACK_PROGRESS, this.progress)\n    this.listenTo(this.playback, Clappr.Events.PLAYBACK_TIMEUPDATE, this.timeupdate)\n    this.listenTo(this.playback, Clappr.Events.PLAYBACK_BUFFERING, this.buffering)\n    this.listenTo(this.playback, Clappr.Events.PLAYBACK_BUFFERFULL, this.bufferfull)\n    this.listenTo(this.playback, Clappr.Events.PLAYBACK_SETTINGSUPDATE, this.settingsupdate)\n    this.listenTo(this.playback, Clappr.Events.PLAYBACK_LOADEDMETADATA, this.loadedmetadata)\n    this.listenTo(this.playback, Clappr.Events.PLAYBACK_ENDED, this.ended)\n    this.listenTo(this.playback, Clappr.Events.PLAYBACK_PLAY, this.playing)\n    this.listenTo(this.playback, Clappr.Events.PLAYBACK_PAUSE, this.paused)\n    this.listenToOnce(this.playback, Clappr.Events.PLAYBACK_READY, function() {\n      this.play();\n      this.bufferfull();\n      this.settingsupdate();\n      this.ready();\n      // ...\n    }.bind(this));\n  },\n  // Other methods ...\n});\n// This is how you declare whether your playback can play a given source\nMyPlayback.canPlay = function(source) {\n  return /^#[a-z0-9-]+$/.test(source)\n};\n. And here's a sample for a mixed playback/core plugin solution for implementing a playlist:\n``` javascript\nvar MyPlaylistPlayback = Clappr.Playback.extend({\n  getPlaybackType: function() { return \"playlist\" }\n});\nMyPlaylistPlayback.canPlay = function(source) {\n  /PLAYLIST_PATTERN/.match(source);\n}\nvar MyPlaylistPlugin = Clappr.CorePlugin.extend({\n  constructor: function(core) {\n    this.core = core;\n    if (this.core.getPlaybackType() === \"playlist\") {\n      this.loadPlaylist()\n    }\n  },\n  loadPlaylist: function() {\n    // load your playlist\n    // ...\n    this.core.options.sources = [list, of, sources];\n    this.core.getCurrentContainer.destroy();\n    this.core.createContainers(this.core.options);\n    this.core.mediaControl.setContainer(this.core.containers[0]); // select first item on playlist\n    this.bindEvents();\n  },\n  bindEvents: function() {\n    this.listenTo(this.core.getCurrentContainer(), Clappr.Events.CONTAINER_ENDED, this.loadNextVideo);\n  }\n});\n```\nAs I mentioned before, you just need to add those to the plugin list when instantiating the player:\njavascript\nvar player = new Clappr.Player({\n  source: \"PLAYLIST_PATTERN\",\n  plugins: {core:[MyPlaylistPlugin], playback: [MyPlaylistPlayback]},\n  // ...\n});\n. Perhaps your implementation will be a bit more complicated than this, but I think it's a good start.\nPlease let me know if you have further questions.\n. @iongion it seems you are only missing a call to render() when instantiating this._playback.\nTry changing the play() method to something like this:\njavascript\nplay() {\n    if (!this._playback) {\n      const decodedSourceURL = this.hashToUrl(this.options.src);\n      const PlaybackPluginClass = this.findPlaybackPlugin(decodedSourceURL);\n      if (PlaybackPluginClass) {\n        this.options.src = decodedSourceURL;\n        console.debug('constructing playback plugin instance', this.options);\n        this._playback = new PlaybackPluginClass(this.options);\n        this.$el.append(this._playback.render().el);\n        this._playback.play();\n      }\n    } else {\n      this._playback.play();\n    }\n  }\nThe playback element has to be rendered into the container/playback DOM element in order to display the video correctly.\n. @iongion actually, this code is working properly, but there are some small issues with this approach. In order to make your playback proxy work, you have to actually proxy the inner playback methods (play, pause, seek, etc) and some of its properties, as well as bubbling up the playback events.\nA working example would look like this:\n``` javascript\nimport { Events, Playback } from 'Clappr';\nconst expected = 'http://cdn.clappr.io/highline.mp4';\nconst PLAYER_DOMAINS = [\n  '//player.keecast.tv',\n  '//player.keemotion.com',\n];\nexport default class KeemotionVideoHashSource extends Playback {\nget name() { return 'keemotion_video_hash_source'; }\nconstructor(options) {\n    super(options);\n    this.options = options;\n  }\nbindPlaybackEvents() {\n    [\n      Events.PLAYBACK_PROGRESS, Events.PLAYBACK_TIMEUPDATE, Events.PLAYBACK_READY,\n      Events.PLAYBACK_BUFFERING, Events.PLAYBACK_BUFFERFULL,  Events.PLAYBACK_SETTINGSUPDATE,\n      Events.PLAYBACK_LOADEDMETADATA, Events.PLAYBACK_HIGHDEFINITIONUPDATE,  Events.PLAYBACK_BITRATE,\n      Events.PLAYBACK_LEVELS_AVAILABLE, Events.PLAYBACK_LEVEL_SWITCH_START, Events.PLAYBACK_LEVEL_SWITCH_END,\n      Events.PLAYBACK_PLAYBACKSTATE, Events.PLAYBACK_DVR, Events.PLAYBACK_MEDIACONTROL_DISABLE,\n      Events.PLAYBACK_MEDIACONTROL_ENABLE, Events.PLAYBACK_ENDED, Events.PLAYBACK_PLAY, Events.PLAYBACK_PAUSE,\n      Events.PLAYBACK_STOP, Events.PLAYBACK_ERROR, Events.PLAYBACK_STATS_ADD, Events.PLAYBACK_FRAGMENT_LOADED,\n      Events.PLAYBACK_LEVEL_SWITCH\n    ]\n      .forEach((evt) => this.listenTo(this._playback, evt, (...args) => this.trigger(evt, ...args)))\n  }\nfindPlaybackPlugin(source) {\n    const playbackPlugins = this.options.loader.playbackPlugins;\n    for (let i = 0; i < playbackPlugins.length; i++) {\n      const PlaybackPluginClass = playbackPlugins[i];\n      if (PlaybackPluginClass.canPlay(source)) {\n        return PlaybackPluginClass;\n      }\n    }\n    return null;\n  }\nhashToUrl(hash) {\n    // TODO: write decoder\n    return expected;\n  }\nplay() {\n    if (!this._playback) {\n      const decodedSourceURL = this.hashToUrl(this.options.src);\n      const PlaybackPluginClass = this.findPlaybackPlugin(decodedSourceURL);\n      if (PlaybackPluginClass) {\n        this.options.src = decodedSourceURL;\n        console.debug('constructing playback plugin instance', this.options);\n        this._playback = new PlaybackPluginClass(this.options);\n        this.$el.append(this._playback.render().el)\n        this.bindPlaybackEvents()\n        this.settings = this._playback.settings\n        this.trigger(Events.PLAYBACK_SETTINGSUPDATE)\n        this._playback.play();\n      }\n    } else {\n      this._playback.play();\n    }\n  }\n// TODO: proxy playback methods\n  isPlaying() {\n    return this._playback && this._playback.isPlaying() || false\n  }\npause() {\n    this._playback && this._playback.pause()\n  }\n  // ...\n}\nKeemotionVideoHashSource.canPlay = (source) => {\n  // should return true for the supported media source\n  const schemaFreeSource = source.replace(/^(https?):/, '');\n  let canPlay = false;\n  for (let i = 0; i < PLAYER_DOMAINS.length; i++) {\n    const domain = ${PLAYER_DOMAINS[i]}?;\n    const domainWithSlash = ${PLAYER_DOMAINS[i]}/?;\n    if (\n      (schemaFreeSource.indexOf(domain) !== -1) ||\n      (schemaFreeSource.indexOf(domainWithSlash) !== -1)\n    ) {\n      canPlay = true;\n      break;\n    }\n  }\n  return canPlay;\n};\n```\nI would suggest instead of doing this, to create an empty playback (that renders nothing) that implements the canPlay. Then create a UICorePlugin that listens for the CORE_CONTAINERS_CREATED  event which replaces instances of the KeemotionVideoHashSource playback with the actual playback implementation with the computed source. This plugin would be responsible for implementing hashToUrl.\n. @iongion about what I said, there's only one detail that's wrong. Since you only need to switch sources, there's no need to create a UICorePlugin. Instead, you should create a CorePlugin.\nA CorePlugin (and UICorePlugin) is a plugin type that has access to the player core element. This means it has read/write access to the player state, containers and the whole player UI.\nThe simplest example of a CorePlugin that can do what you need would be something like this:\n``` javascript\nimport {CorePlugin, Events, Playback} from 'Clappr'\nconst expected = 'http://cdn.clappr.io/highline.mp4'\nconst PLAYER_DOMAINS = [\n  '//player.keecast.tv',\n  '//player.keemotion.com',\n]\nexport class KeemotionVideoHashResolver extends CorePlugin {\n  get name() { return 'keemotion_video_hash_resolver'}\nbindEvents() {\n    this.listenTo(this.core, Events.CORE_CONTAINERS_CREATED, this.onContainersCreated)\n  }\nonContainersCreated() {\n    this.core.containers.forEach((container) => {\n      if (container.playback.name == KeemotionVideoHashSource.prototype.name) {\n        container.destroy()\n        this.core.createContainer(hashToUrl(container.src), container.options)\n      }\n    })\n  }\nhashToUrl(hash) {\n    // TODO: write decoder\n    return expected\n  }\n}\nexport class KeemotionVideoHashSource extends Playback {\n  get name() { return 'keemotion_video_hash_source' }\n}\nKeemotionVideoHashSource.canPlay = (source) => {\n  // should return true for the supported media source\n  const schemaFreeSource = source.replace(/^(https?):/, '')\n  let canPlay = false\n  for (let i = 0; i < PLAYER_DOMAINS.length; i++) {\n    const domain = ${PLAYER_DOMAINS[i]}?;\n    const domainWithSlash = ${PLAYER_DOMAINS[i]}/?;\n    if (\n      (schemaFreeSource.indexOf(domain) !== -1) ||\n      (schemaFreeSource.indexOf(domainWithSlash) !== -1)\n    ) {\n      canPlay = true\n      break\n    }\n  }\n  return canPlay\n}\nexport default {\n  KeemotionVideoHashResolver,\n  KeemotionVideoHashSource\n}\n```\nNotice that I just broke your code into two plugins:  a core plugin (that only changes the source marked by a given playback type) and a dummy playback (used for detecting the type of source and marking it as a source to be processed).\nIf you need further help with this, please reopen this issue so we can track it.\n. @chriswiggins We use our own fork of flashls (https://github.com/clappr/flashls). We keep the dev branch synced with the original flashls and use our custom player classes in the clappr branch.\nThere's a separate build script, called build_clappr.sh used for creating the HLSPlayer.swf used on the hls playback.\nIf you have any further questions please let me know.\n. @tjenkinson I think there was a misunderstanding. I thought the missing Roboto.ttf was related to the npm package and the CDN version. I didn't notice it was missing in the git repo as well.\n. Just released 0.1.7 with the missing font file.\n. No problem, you were right. The dist folder on repo should have this file.\n. @josephharding We've just released a new version (0.1.7) with this event implemented in the HLS playback. It's not exposed directly by the player, but you can use the container event:\njavascript\nplayer.core.getCurrentContainer().on(Clappr.Events.CONTAINER_LOADEDMETADATA, function(duration) { console.log('loaded video with duration', duration, 'seconds') }\nPlease let me know if this will work for you.\n. @tokenian Could you please elaborate on that? \nWhat kind of source are you trying to load? Do you have any sample streams we can use to reproduce this error?\n. @devin87 Currently, Clappr only report HLS errors that are critical, when the playback fails. These retries are automatic, the player keeps trying to load a given TS file until a limit is reached, then it stops and triggers an error event.\nIf it's not doing that correctly, please let me know. Perhaps there's a bug in that.\n. Hi @devin87, I have been testing some options and adding some extra parameters to control HLS behavior.\nIf you use the latest version of clappr, you can now listen to the error event in case the fragment loading fails and the player stops retrying. The default behavior now is to not skip to the next fragment after reaching the maximum number of retries. Instead, it triggers an error event, which you can listen to and handle accordingly.\nYou can now control HLS retry behavior using the following parameters:\n- keyLoadMaxRetry - the maximum number of retries for loading decryption keys after a load error occurs\n- keyLoadMaxRetryTimeout - the maximum retry timeout (in ms) for loading decryption keys after a load error occurs\n- fragmentLoadMaxRetry - the maximum number of retries for loading fragments after a load error occurs\n- fragmentLoadMaxRetryTimeout - the maximum retry timeout (in ms) for loading fragments after a load error occurs\n- fragmentLoadSkipAfterMaxRetry - whether or not the player should skip to the next fragment after reaching the maximum number of retries. If set to false, an error event is triggered instead.\n. @devin87 Could you share the source you are using? When you say the player gets stuck, you are referring to this retry loop you mentioned before? If so, on 0.2.5 the default behavior is to give up after retrying the current fragment, so you would get an error instead of the retry message.\nAbout the spinner not hiding after playback starts, I could not reproduce. Could you please share the steps to reproduce this?\n. @tjenkinson It's not a Clappr feature, it seems to be an issue with Microsoft Edge implementation.\nIf you try using that on other browsers, these parameters will just be ignored and everything will work correctly.\n. Usually, the autoplay starts from 0. It should start from another position only if you embed the video tag and set the current time to another value before playing the content.\nThis seems to be just a weird idea they implemented on their new browser.\n. @jayrmotta The quality selector on globo.com applies only to the progressive download delivery. It's not related to the level selector plugin, which reads the multiple qualities available on a HLS stream and lets you set a fixed quality to be streamed.\nSince the globo.com implementation is used for changing the source URL for the video, it's tightly coupled with the delivery method used. You could easily implement this with a plugin that has the list of the URLs for each quality and when selecting a given quality, change the video source of the player.\n. I don't think there's a HTML5 player implementation that is ready for this (without developing the integration), but I don't think you'll have any issues implementing a plugin for that using Clappr.\nWe're in the process of releasing the documentation/tutorials on how to use and extend Clappr, so keep watching for news.\n. @jayrmotta About playback from multiple sources, you are correct. You need to synchronize the sources manually, waiting for the metadata from the new source to be ready and then seeking to the last position the previous source was playing. You'll need to implement a few tricks to keep both sources sync'ed correctly, but basically you just need to do that.\nAbout automatically increasing/decreasing definition based on bandwidth, there are some options available. You don't need to implement this manually, you could use a HTTP streaming technology, such as HLS, DASH, and others.\n. :+1: \n. I think this was not intentional, but this way the animation seems better. Thanks @tjenkinson!\n. @lkkadiri clappr 0.1.x had a limitation that prevented us to lock the default base url for the assets to the version being used. From 0.2.0 onward we'll not have this problem, unless the baseUrl parameter is explicitly set to point to latest.\nSince we were in the process of changing the way the player is built, this ended breaking instances of 0.1.x without setting baseUrl. It's now fixed on 0.2.2, and using latest will not break loading assets anymore.\nRegardless, I would not recommend setting baseUrl to /latest, using either 0.1.x or 0.2.x. It's better to set it to the path to the version being used, for example http://cdn.clappr.io/0.1.13 when using 0.1.13. If you are using 0.2.x directly from cdn, it's better to omit this parameter, as it will automatically be set to the right version.\n. @jfairley Since the beginning we planned for Clappr being hosted either on a CDN or imported directly in your code and having the assets hosted on your own server.\nThere are some assets that we use, such as the SWF files, that aren't packed in the bundle. Thus, in order to import them we use a base URL to load these assets. Currently, the default value for the base URL is //cdn.clappr.io/<version>. This way you can stop using the CDN by pointing the baseUrl parameter to your own server. This is the way we did that with the player used at globo.com.\nAre you creating your own Player class or using the default Clappr.Player? If you are extending this class, you could just override the baseUrl by adding it directly to the player options.\n. @jfairley Just opened #526 with your request.\n. Indeed there was an error on the player event binding. Thanks @jfairley!\n. I'm just adding some other improvements to hls, but I think I'll have it done today.\n. Hey @jfairley, I just released clappr 0.2.2 with this fix. Please let me know if you find anything else.\n. @rprokes We plan to build both Dash and HLS plugins without using Flash, but it's going to take some time to do this. In the mean time, I think we will need Flash for some time, because MSE/EME full support on browsers is still far away. Unless you aren't planning to support older browsers.\nAbout disabling HW acceleration, the HLS playback by default has it disabled. There's no need to do anything about it, unless you need to re-enable HW acceleration for other browsers.\n. @nextlivetv currently Clappr doesn't support stretching the media source, instead using black bars and centering the media, so there's no options for that.\nCould you explain more how are you using this? Are you simulating anamorphic pixel aspect ratio using this? Are you using this for progressive download or for streaming?\n. Thanks @tjenkinson! I ran into some of these issues, but didn't spend some time to investigate this problem and create an issue.\nAbout the event triggered when settings are updated, there's the event Clappr.Events.CONTAINER_SETTINGSUPDATE you could listen to. We'd appreciate your help with this improvement as well.\n. @JOOKER69 We don't have an event for when the user clicks on the poster, but you could listen for clicks on it to go fullscreen when the user requests to play. This way you will piggyback on an user interaction and work though user interaction restriction on the fullscreen api.\nI believe this will work, using the sample from @leandromoreira: \njavascript\nvar player = new Clappr.Player({source: \"http://techslides.com/demos/sample-videos/small.mp4\", parentId: \"#player\"})\nplayer.getPlugin('poster').$el.on('click', function() {\n  player.core.mediaControl.toggleFullscreen();\n});\nJust keep in mind this won't work when autoPlay is set to true.\n. @leandromoreira @tjenkinson Actually, the DvrControls plugin was added later on the player development and we didn't revisit these plugins after that.\nThe reason behind DvrControls handling the duration value is that SeekTime is not actually a plugin, it's a part of MediaControl that we separated from the main file to keep it better organized. We wanted to make available for plugins to alter the appearance/structure of the media controls, and this manipulation is one of the examples we wanted to show. \nIn fact, we didn't want to make MediaControl know what DVR is. The plugin for handling DVR should be the only one to know what DVR is and change the controls accordingly.\n@tjenkinson's comment pointed out a failure in that. We should either remove DVR state handling (CONTAINER_PLAYBACKDVRSTATECHANGED event) from MediaControl or we follow his suggestion to handle duration directly in SeekTime. I'm opposed to the latter because we would need to add VoD/live/DVR checks to SeekTime, instead of giving it a single responsibility of displaying the current time of the hovered position on the seek bar.\n. @tjenkinson due to a limitation in our build process, SeekTime could not be included in the same folder as MediaControl. There were conflicts when loading html/css templates. Now that we use webpack for managing these assets, we don't have this limitation anymore.\nAbout the events, you are right. Both events cause MediaControl to re-render, so there's no need to listen for a settings change event.\n. @leandromoreira @tjenkinson The destroy() api was created to remove event handlers, release resources and remove the element from its parent. \nThis was made before creating the remove() method for the UIObject, which should replace destroy as the method responsible for freeing resources and event handlers from the object, thus removing the responsibility from the plugin creators to take care of this. \nApparently, the plugin base classes have been changed to call remove from their destroy methods, but some UIObjects have not been changed to do it, so it's actually a bug.\nAbout the other two questions:\n- The responsible for the lifecycle of MediaControl is indeed the Core object, @leandromoreira is correct in that.\n- The user should not call remove at all, since it's not exposed in the Player API.\nTo remove doubts about this, I think we should remove the destroy methods, using only remove instead.\n. Thanks again, @tjenkinson.\n. @cherihung currently we have a way to set the baseUrl for looking for assets, using the aforementioned parameter. It's set by default to webpack publicPath.\nBefore migrating to webpack there was a parameter called swfPath which has been removed since then, but we could easily re-enable this functionality. \nJust let me know whether this is really necessary, since you can host clappr files yourself without changing anything. If you just copy the dist/ folder contents to host and clappr will automatically load the asset files from there, instead of the clappr cdn.\n. @cherihung I take you are bundling Clappr inside your own webpack bundle, instead of an external dependency.\nIf you are doing that, I suggest you change the entry point for Clappr from dist/clappr.min.js to src/main.js. Doing this will make webpack bundle the Clappr source inside your own application and generate asset chunks using your on naming rules. \nThe only thing you need to remind is that Clappr uses ES6, so you need to use babel loader to build correctly. Just add this setting to your webpack configuration:\njavascript\n{\n   //...\n  resolve: {\n    alias: { Clappr: 'clappr/src/main.js' }\n  }\nPlease let me know if this works for you.\n. Fixed by ec822851bc99e542be274bb1ed085464bae296a1\n. @lkkadiri @jfairley it seem like the problem is the entry point for clappr is affecting your build configuration. I'm investigating whether there's a solution for this or if I'll need to revert this change.\nWhat kind of build configuration are you using? I mean, how's clappr included in your build?\n. Just reverted b309deb795fa0f02cd024f46751385972b1dd3fd to avoid breaking browserify usages. I found a way to expose source/assets to webpack without breaking other build systems.\nWill release 0.2.8 asap.\n. Done, closing the issue now. If you have further problems, please let me know.\n. @lkkadiri prior to this change, where were clappr getting the swf from? It seems like you were previously loading assets from cdn.clappr.io.\nSince 0.2.4 we changed the default baseUrl from //cdn.clappr.io/${VERSION} to the base url from where the clappr.min.js script is loaded. In your case, since you are loading the js file from http://localhost:3000/js, this will be set as the player base url, unless you set a baseUrl value yourself. If you are hosting your own clappr assets, I suggest you set the baseUrl parameter to point to the corresponding URL from where you are hosting these assets.\nFor example, if you are saving you js files under js/ and your assets under assets/, just use baseUrl: \"/assets\".\n. @lkkadiri another thing, if you are using 0.2.8 you won't need to use @dviramontes solution. Just use clappr as you were using before.\n. @cherihung what OS and node version are you using? \nCan you run the command webpack --verbose --progress -d -p --optimize-minimize --optimize-dedupe --output-filename clappr.min.js and paste here the output?\n. Everything is working fine then. That's great! :+1: \n. Merged, thanks @tjenkinson!\n. @joaopaulovieira indeed, it is a breaking change. I agree with you that this should go into a major version, or at least in our 0.3.x API revision.. @dviramontes I believe @flavioribeiro is right. Since the beginning, DVR support is not available when using html5 video playback. There's no way to seek back on a live stream using the video tag directly, AFAIK.\nIn order to support DVR properly, you should use the hls playback provided by Clappr, which uses flashls.\n. There's no official way to force using a playback directly, but you could just pass the HLS playback through the plugins parameter. The plugins passed through this parameter have a higher priority than the built-in plugins.\njavascript\nvar hlsPlayback = Clappr.HLS;\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://mydomain.com/path/to/stream.m3u8',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640,\n  plugins: { playback: [hlsPlayback] }\n});\nplayer.attachTo(playerElement);\nPlease let me know if this works for you.\n. Changed the subject to make it easier to search for the solution.\n. Could you test again at http://flashls.org/latest/examples/chromeless/, this time calling playerStop on the swf object? The difference in both behaviors seem to be due to calling the playerStop function not making the player request the playlist on after calling play.\nThe log messages you pasted here show that the player is indeed seeking to -1, but since it doesn't now where the playhead is at, the seek operation fails.\nAnother test you could make is to call player.core.getCurrentPlayback().el.playerPause() to check whether or not clappr behaves like flashls chromeless player.\n. Thanks @tjenkinson. I ran some tests here and the problem seems to be that flashls has a small limitation on how playerStop works. Seemingly calling playerPlay after being stopped for a while makes it try to continue from the current position (which is an invalid state for live streams without DVR/event streams).\nWhen calling playerPause instead, the player starts to record the stream from the current position, so it can continue playing after being paused for a while.\nI don't know whether this is by design and we have to reload the stream manually or if it's a bug in flashls implementation. I'll assume the bug is on our implementation and try to solve in the HLS playback.\n. @cherihung this message is just to inform the current log state. It's a side effect of setting the log to disabled on initialization.\nThe Flashls message cannot be muted right now, but it will respond to hlsLogEnabled in the next version.\n. @cherihung I removed the Clappr.Log message on initialization on a6a7a12490240561f5fd062fba5391574ca0bf5c, and updated the clappr flashls implementation to 0.4.3 which responds to hlsLogEnabled on 3f5fdf903564c0367cfd26cd826206d4033902cd.\nBoth commits are included in version 0.2.10.\n. Closing the issue then. :+1: \n. @chovy What version of clappr are you using? Since 0.2.0 these assets are not included, instead using a hashed url for each asset.\nIf you are using 0.1.x, you should set baseUrl to http://cdn.clappr.io/<version> instead.\n. @chovy seems like you're bundling clappr inside your own project using jspm. There are two ways you can solve this problem. You should either set a baseUrl pointing to http://cdn.clappr.io/<version> or load these assets into your project.\nTo load the assets into your project you could just copy all assets from clappr dist/ directory to your server public path and set baseUrl accordingly. There should be another way, but I'm not sure how your project is handling static assets so I can't think of any alternative.\n. @neowinston I understand you are getting errors when serving locally the HLS swf component used for other browsers to load the stream.\nIf you are loading using sudo python -m SimpleHTTPServer you can instead of setting baseUrl to load assets from the CDN, just create a symbolic link to the dist/ folder called latest under the public/ folder:\nshell\n$ cd public\n$ ln -sf ../dist latest\n$ sudo python -m SimpleHTTPServer\nThis way clappr will automatically detect it's baseUrl from where it was loaded from.\n. @neowinston we don't think we can get rid of Flash 100% due to the lack of browser support for either streaming format (HLS/Dash). We used the table here as reference.\nWe are planning to have support for both HLS and Dash using MSE, but both implementations are still under test. In the mean time, the only browser that supports HLS natively is Safari (Chrome support was unreliable, last time we checked), so I wouldn't discard Flash right away.\nSince you are working with audio, why are you using HLS to stream? There should be other format you could use with native support from all browsers. This way you could get rid of Flash completely.\n. @neowinston about your concern of getting rid of Flash entirely, is it about your need to support iOS? If that's the case, you don't need to worry, we just need Flash to play HLS on desktop browsers that doesn't support playing it natively. Almost all mobile browsers support HLS natively.\nIf that's not the case, you would need to use a player supporting HLS through MSE, which Clappr does not support (for now). Alternatively you could change your streaming format to one that is supported by most desktop browsers. I believe Icecast supports streaming AAC content directly and has good browser support.\nYou can test a sample stream I found at http://dir.xiph.org/by_format/AAC. Just paste this code on http://cdn.clappr.io:\njavascript\nvar player = new Clappr.Player({\n  source: 'http://streaming14.tdiradio.com:8000/radiojat',\n  poster: 'http://clappr.io/poster.png',\n  mimeType: 'audio/aac',\n  parentId: '#player-wrapper',\n  height: 360,\n  width: 640\n});\nAbout using Clappr in native apps, we're still developing native libraries for iOS and Android. The iOS version is almost ready, but the Android library is still frozen. If you are using webviews to render content, I think Clappr will work ok, but I'm not a great fan of using webviews for playing audio/video content. If your apps are mostly web-based, I think this would be ok.\n. Anytime! I'll close the issue for now, but feel free to ask again if you're still having problems.\n. @chovy we need more information about this issue, as well as a URL for reproducing this issue.\n- Are you on clappr 0.1.x or did you already updated to 0.2.x? There was an issue in our flashls implementation which forced level capping when the frame drop ratio (skipped frames / presented frames) was bigger than 0.2. This was disabled by default in 0.2.5.\n- What kind of browser are you using? We have experienced this issue mostly running on Firefox.\n. @chovy I tested your stream on http://cdn.clappr.io and it kept running steadily between bitrates 2328000 and 4728000. What version of clappr are you using? Is it older than 0.2.5?\n. @chovy I tested locally using 0.2.10, and it's playing ok for me. Still running steadily and switching between bitrates 2328000 and 4728000. Could you please share your embed code here?\nUsing 0.2.12 I noticed a strange behavior. Since 0.2.11, hardware acceleration for video decoding is enabled, but with hardware video decoder enabled it kept complaining about your ts fragments not starting with an I-Frame. Also I got some I/O errors loading fragments, usually in the lower bitrates.\n. Agree to that. We don't usually seek directly using seconds, so I think this is the reason why this function is missing. \nThe seek method using percentage values is more useful to implement a custom MediaControl, but for an external API it's useful to have both implementations.\n. :+1:\n. This feature was not implemented for the HLS playback, but I think it's simple enough to implement.\n. @dviramontes Using chromeless: true should disable displaying these icons. It seems to be a bug in the Poster plugin.\n. @dviramontes the Poster plugin is one of Clappr built-in plugins. There's no need to file another issue, I was just stating that this issue is indeed a bug in the player.\n. This could be a default core plugin that could be overridden by the user.\n. @tjenkinson I've already started working on this, mostly for playing fallbacks/sequences. Still need to polish the plugins a little bit, but I'll add it as soon as possible.\n. Just updating, I implemented a basic version of a fallback plugin, but I think the container/playback creation and rendering could use some refactoring.\nIn order to make it possible to control whether containers should be rendered or playbacks loaded, there should be a way to allow rendering these components in a later time, not at player instantiation. This way we could instantiate the containers, create their playbacks (to evaluate whether or not the source is supported) and discard invalid sources before rendering video/object tags.\n. @tjenkinson actually, implementing the behavior was quite easy, it's already done in a branch. I didn't merge it yet because of the no_op playback flashing before falling back to a valid source,\nI have some refactoring proposals to implement to solve this issue and some others, but it will take a while to finish them. If you need it, we can merge this plugin implementation. It's fully functional, and can be replaced by external plugins if needed.\n. @tjenkinson I agree with you that we could have a better way of implementing handling multiple sources with fallbacks without creating containers/playbacks, but I think it shouldn't be part of the core. Actually, implementing handling a sequence (playlist) or pip is part of the plan. I also agree that the containers and playbacks should be created as necessary, and one of the enhancements I think we should implement is lazy rendering. \nCreating one playback for each source is not an issue per se, but rendering those components is an expensive operation. I believe we should avoid rendering what won't be displayed. \nThe only thing I disagree is that we shouldn't add complexity to the player core, as well as its instantiation and loading sources. Instead of changing core features, I'd rather implement this behavior only using plugins, thus enabling whoever uses the player to define how it should behave with multiple sources. In fact, one of our goals is to make the player core as small as possible, and to do so, whatever feature that can be implemented as a plugin should be. This way we can avoid the need for releasing the player whenever we need to update a playback dependency, for example.\nAbout your suggestion for a syntax for fallbacks and playlists, I think it could be implemented by a plugin as well. In fact, it's one of the features we are planning is adding a plugin for handling playlists, and adding a syntax for that (I liked your suggestion). I'm still in the process of refactoring the player core to allow this to be implemented through plugins. The main issue for now is to allow core plugins to be loaded before creating containers, so they can affect the container instantiation and rendering, instead of only changing them after they're already added to the core.\n. @AlexRevin when I mentioned \"player core\" I meant everything that's not a plugin. As for source selection, it's determined by the playback priority. The player will attempt to load the source first using the playbacks provided externally by the caller (considering the array order as priority), and then falls back to it's internal list of playbacks, using their order as priority as well. This feature would not affect this selection, but only determine how the player should handle the sources.\n@tjenkinson that's exactly what I suggested. A plugin would be responsible for handling the container creation, and by default it would be the single-source fallback plugin I was working on. It could be overridden by an user provided plugin, which in turn would define what format the load() method should support.\n. About the pipeline system, I think it's a good idea, but it could add a lot of complexity to source handling. Perhaps we should try only with a single plugin with overrides, then check whether this is necessary.\n. @tjenkinson I think you already helped bringing your ideas here, thanks.\nI'll try the solution you suggested, of hiding the containers <div>s, and see if it removes the 'no_op' flashing before the containers are finished.\n. Just a quick update. I implemented a basic version of the lazy rendering of containers I mentioned, so that now when loading multiple sources as a fallback chain will stop flashing the no_op playback. \n. 155bbcc458d4f8cbaa4f57d755d05e6b3e636e27 finishes the first implementation of the sources plugin, adding the fallback behavior for multiple sources as the default. It can be overriden by any external plugin named 'sources'.\n. @jfairley Like @flavioribeiro mentioned, we're maintaining a fork of flashls. It's only used to expose extra settings over the ChromelessPlayer, which is the base implementation for the HLS playback. You can check the differences checking the clappr branch in our fork. It's implemented in the io.clappr.Player class.\n. Are these changes specific to Clappr? If so, it would be better to submit a PR into the clappr fork, otherwise I'd submit a PR to mangui/flashls.\nWe always keep our fork updated, so when a new version of flashls is released, we update Clappr with the changes.\n. That's nice. :+1: \nIf you need any assistance with building your own version of HLSPlayer.swf while your changes are not added to flashls, just let me know. \n. @dviramontes you figured it out just before I answered. If you need help with anything else, please let me know.\n. Hi @dviramontes, I'm not sure why the stage is empty, but I would attempt to call .draw() on _hls.stage. If this doesn't work, I'd try to create an issue on mangui/flashls and ask directly to @mangui.\n. Thanks @mangui.\n. @AlekzFateJumper have you tried checking the list of fragments on the current level? There should be a program_date attribute in it. Something like: player.core.getCurrentPlayback().getCurrentLevel().fragments[0].program_date\n. Just pushed a fix for the parameter handling. Let's keep in mind that this option doesn't remove the volume control from the interface, only hides/collapses the volume bar keeping only the volume/mute icon.\n. :+1: \n. Hi @LGprodigy, thanks for your PR, but there's some problems with your implementation that @tjenkinson and I have discussed previously on #460.\nKnowing whether Flash is required for playback is indeed one of the responsibilities of a Flash-based playback, but not deciding whether or not to tell the user to install Flash. The sole responsibility of a playback is determine if the source received is supported, and accept or reject playing the video accoridngly. This is done by the Loader for all playback objects through the canPlay method.\nThe only exception to this is the no_op playback, which is a marker playback to indicate that the source is not supported in this browser. That's why there's a generic message informing the user to try on another browser.\nThe right way to implement a check for Flash is checking for all Flash based playbacks if they would be able to play the video if Flash was installed. Since this require knowledge of all playback plugins registered with the Loader, a core plugin would be a better option.\nThis plugin could be either a UICorePlugin, if it needs to display a custom message screen, or a CorePlugin if the only need for customization is the message shown in the no_op screen. In the latter case, the no_op plugin would need the addition of a setter to customize the message displayed.\n. Hi @irongomme, I don't have access to an iPhone with iOS 7.x, but I tested on both iOS 8 and 9.\nWe still lack support for touch events on the MediaControl, but it can be called with a tap on the player. We can't prevent the quicktime overlay to be shown (it's a feature built into the OS itself), but to avoid having the user tap to activate the controls, you could just show the controls whenever the video is paused. Since videos always play in fullscreen on the iPhone, and the video is paused when the user dismisses it, the controls would always be visible when the player exits fullscreen.\nTo avoid hiding the controls after a set interval, you could just set hideMediaControl to false in the player options, or directly in player.core.mediaControl.options.\n. @irongomme it just occurred to me that you could use the player poster to cover this quicktime overlay. Whenever the user exits the video, the player goes into the pause state I mentioned before. In this state, you could just display the MediaControl and the player poster. This way the player wouldn't seem to be broken.\n. Hi @jazzmanro, I take you are trying to display content over the video, but tied to the MediaControl itself, showing/hiding with the controls layer. Is that right?\nThe MediaControl, although related to a single container, is not scoped to the container it controls. It is included in the player core, so in order to access it (or render into it) you have to write a UICorePlugin. Your approach is correct, according to how Clappr works.\nContainer plugins only have access to the container, and are related to the content being rendered, like watermarks, overlays, ads, etc. The container has no access to the MediaControl, because the Clappr architecture is based in a bottom up approach. Inner elements are not aware of their external environment, they can only access their own scope. The only action they should do to reach outside is triggering events. \n. @floriano12 the RTMP plugin hasn't been updated to work with clappr 0.2.x properly. Perhaps that's why you are getting a black screen. The playback fails to load, thus breaking the player.\n. @cacciato both jsbin and jsfiddle load your HTML inside an iframe with sandboxing. Since Clappr by default uses flashls to load HLS (except when supported natively by the browser, like Safari), the iframe sandbox environment doesn't allow loading the flash component that is responsible for handling the HLS stream. More information about iframe sandboxing can be found here.\nIf you try your jsbin code in Safari it will probably work normally. We are working towards changing the default HLS handling to hls.js (see #555), due to all these issues with sandboxing and browser security with flash.\n. @wholegrn are you using Safari for your tests?\nI tested your snippet on http://cdn.clappr.io and received the events correctly using this code on both Chrome and Firefox:\njavascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/test_001/stream.m3u8',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\nplayer.listenTo(player.core.getCurrentContainer(), Clappr.Events.CONTAINER_BITRATE, function(bitrate) { console.log(' container bitrate changed... ', bitrate); });\nIf you are using Safari, Clappr uses its native HLS implementation, which doesn't expose bitrate change events.\n. Hi @alparslanahmed, this is related to some browsers implementing flash blocking natively. I think it's related to the player dimensions.\nSince the native flash blocking is targeted at ads that use flash, I think it uses the swf object dimensions (width, height) to determine whether it's being used for playing content or displaying ads. If you call player.resize() to an allowed size when the play button is displayed, the video starts to play automatically.\nAFAIK this is the only \"workaround\" for this problem.\n. @tjenkinson we originally considered the data tags to add some scope to the markup elements and passing some information around. Since every element had data attributes, we used those in the CSS to make the selectors more specific. Some elements haven't been revisited to add classes to the data attribute selectors, but we dropped the idea of having data attributes in a later moment.\nSince the adoption of webpack and css-loader, we are still reworking the scope of the css classes, but we didn't have the time yet to do it so. One of our Clappr-based players already use scoping instead of data attributes, but we still need to change this on Clappr itself.\n. Thanks @flavioribeiro, excelent work!!! :beers:\n. :+1: :beers: \n. This error is due to a type enforcement implemented on the plugin Loader. I'm not sure why this happened to you with the latest Level Selector implementation. There could be something missing in the plugin implementation.\nThere's another detail about the plugin: it currently does not support the default HLS implementation on Clappr, based on hls.js. It only supports the previous implementation, based on FlasHLS. We're still working on an update for that.\n. The level selector has been fixed to work with the latest version of Clappr. As I mentioned before, it will only work if you are using the FlasHLS playback, but I'm working on a new version supporting hls.js as well.\n. I'm inclined to agree with @tjenkinson. I don't think setting globals is a good way to go.\nPerhaps we could use something like what we have in the utils module, where we have helper functions that use the browser built-in globals or fall back gracefully to a polyfill-like implementation.\n. I'd go with either helpers or namespaced polyfills. My only objection about the polyfills was messing around with variables in global scope, because it introduces a lot of risks, like causing conflicts with other libraries. Your suggestion for a middle ground solution is fine by me.\n. @FDiskas while the player doesn't include an external interface to control fullscreen, you can call toggleFullscreen on the player core object:\njavascript\nplayer.core.toggleFullscreen()\n. Closing this issue since a new one was created with this feature/enhancement spec.\n. @569934390 you can call the methods show and hide on the media control object. Assuming you have a player object, you could do something like this:\njavascript\n// shows media control\nplayer.core.mediaControl.show()\n// hides media control\nplayer.core.mediaControl.show()\n. It seems like calling the playback destroy method doesn't detach the media source when stopping playback. Just a hint to whoever takes this issue.\nEdit: In the latest version of Clappr (0.2.18) the problem doesn't seem to occur. Destroying the playback calls stop which in turn detaches the media source properly. Perhaps the problem occurred with a previous version of the player.\n. @FDiskas what version of Clappr are you using? Can you share a live HLS source for us to reproduce this problem?\n. @FDiskas you are welcome to submit a PR and add proper tests if you wish.\n. @tjenkinson one of the main objectives of Clappr is being lightweight and dependency-free (as much as possible). Adding React as dependency is a great overkill for the player, even though React's component structure is quite useful.\nI was preparing an enhancement suggestion that would enable using Clappr with React, but I would rather not make Clappr itself depend on React. \nIn fact, one of the enhancements I thought of was using a pluggable render component (either manipulating DOM directly or using React components, etc) instead of using zepto and rendering the components directly in the DOM. This way we would make the player able to work with other DOM representations (like React's virtual DOM) or other visual component frameworks. I'm still in the process of writing a specification draft for that, but I think you'll understand the general idea.\nAnother enhancement I would propose was to remove the media control settings logic from containers, playbacks, etc. Instead, the playbacks would have capabilities (if it's seekable, can control play/pause, has time tracking, etc). This way, the media control (and its components), as well as player plugins, could query the playback/container capabilities and update itself accordingly.\nI believe the playbacks have no responsibility for the UI layout/rendering, but the container has no responsibility for that as well. The container responsibility is to manage the area where the video will be rendered, and it should not be aware of the UI being laid out on top of it.\nI agree with you there are some architecture details that need a lot of improvement, but the player should not rely on a dependency that I believe fits better when making an entire web application, not a library that could be used on sites that use other technologies (like Angular, or Ember). Doing this would force using React on everywhere the player is used.\n. Just adding, some of these enhancements you proposed, like adding methods to be queried from the playback could be forwarded to the container. Instead of the container controlling what should be added to the media control through events, it would only inform a capability change event (instead of settings update). This way the media control, or whatever is interested in those capabilities would respond to changes in the container/playback.\n. @tjenkinson not really. I'm not suggesting this only for user interface elements, but instead changing the render method based implementations to a pluggable render engine.\nMy suggestion is to have a Renderer component, which would be used by the elements/plugins render method. Clappr would include a DOMRenderer based on what we have today, writing the elements directly to the DOM.\nThe user would be able to provide it through the player parameters, just like we already do with external plugins and MediaControl. This would make possible to have a ReactRenderer that uses React's virtual DOM instead of creating the elements directly.\nThis will be a big change, but I think we shouldn't break Clappr, and I don't believe that providing a chromeless Clappr by default as a option. It should work as it is today, but with more possibilities.\nAbout your question: \n\nif a developer wanted to implement their own ui what should they override?\n\nClappr already has this possibility. If you provide Clappr with a custom MediaControl, through the mediacontrol parameter, Clappr will use this custom UI instead. If you take a look at http://globoplay.globo.com you'll see how it uses a custom UI for Clappr.\nThe mediacontrol parameter can be used in two ways:\n- to customize colors:\njavascript\nvar player = new Clappr.Player({\n  source: \"http://your.video/here.mp4\",\n  mediacontrol: {seekbar: \"#E113D3\", buttons: \"#66B2FF\"}\n});\n- to provide an external implementation for the UI:\njavascript\nvar player = new Clappr.Player({\n  source: \"http://your.video/here.mp4\",\n  mediacontrol: {external: MyCustomMediaControl}\n});\nI'm working on some tutorials and documentation describing these functionalities better, but it's still a work in progress.\n. Thanks for mentioning the virtual-dom project, @wmertens. It gave me some ideas to look for our base Renderer component.\nAs I mentioned before, I'm not looking for adding more dependencies to Clappr, but instead allow using other type of rendering technologies to build the player. This will make integration with products a lot easier, including those using React itself.\n. We can't reproduce the issue on any other android device we have. \nProbably the device is reporting the video duration incorrectly, and the player interpreted the wrong duration as in a live video:\njavascript\nreturn [0, undefined, Infinity].indexOf(this.el.duration) >= 0 ? Playback.LIVE : Playback.VOD\nSince we can't reproduce the problem reported and seemingly it only happens in a specific device, we'll close this issue. If someone else is able to reproduce the issue and can work on a fix for it just reopen and submit a PR.\n. @tjenkinson I think this is a good idea. @aathitiyan can we change this issue title to describe better this suggestion?\n. @tjenkinson actually you are correct in your understanding. Clappr declares the main module as clappr.min.js in package.json (which makes unnecessary to declare its dependencies), but its source code is included in the npm package as well. This allows a user to include Clappr in a project codebase, generating a single bundle.\nSo in order to use Clappr by importing its source, it would be necessary to redeclare its own dependencies in the target project. Using devDependencies doesn't fit this well, because the user won't be able to differentiate what is required for building Clappr from what's only a development tool used in the Clappr project. In this case, using dependencies instead of devDependencies serves this purpose well, like @leandromoreira mentioned.\nIn fact, we only declare clappr.min.js as entry point in order to allow projects which do not use ES6 to include Clappr as dependency without needing to compile it.\n. @tjenkinson we had already done that before, pointing main to src/main.js, but there were some complaints after we migrated to webpack. There were people who used Clappr with browserify that weren't able to build their projects without including babel and other dev dependencies, because they couldn't set their projects to use clappr.min.js easily, at least not without breaking asset references (like swf paths, etc). This was described in #533.\nSince changing this back to clappr.min.js didn't affect us, we gave in and changed the main back to the build output dist/clappr.min.js. We can check whether these problems do still occur and change main back to src/main.js.\n. Yes, it seems to be the case. And to make things worse, with browserify the user has to manually manage the player assets when compiling the bundle, making it very difficult to avoid errors.\n. I agree it's not complicated to switch from browserify to webpack, but I don't want to force this change on anyone. About your first point, if browser is added, it doesn't mean that will work for browserify users (it will still present the assets issue), but we can add instructions for browserify users to do that.\nIf you want to proceed with that, I'd like to ask you to revert the devDependency changes and switch the main reference to src/main.js, and add instructions to make browserify work correctly with assets in the readme file.\n. I'm not sure, theoretically it shouldn't make a difference, but since people have had problems with this change before, perhaps we need to provide clearer instructions for using Clappr with browserify. I just asked you to do so because you are already changing the package spec, and I think we need to better document these changes during the process.\n. I wouldn't recommend to use the built version when using webpack, unless it's declared as external. It would introduce some unnecessary overhead to the built product.\nIn webpack, to override the package main when building, we use the following alias in webpack.config.js in our custom player:\njavascript\nresolve: {\n    alias: { Clappr: 'clappr/src/main.js' },\n    root: [path.resolve(__dirname, 'node_modules/clappr/src')],\n    extensions: ['', '.js'],\n}\nThis makes webpack use src/main.js as Clappr package entry point (when requiring/importing 'Clappr') and use clappr/src as a resolve path (in order to resolve 'plugins/poster' for example). \n. @framerate you can enable hls.js log instead:\njavascript\nnew Clappr.Player({\n  // ...\n  playback: {\n    debug: true\n  }\n  // ...\n}\n. @chovy There's no way to circumvent CORS in the browser. You have to fix that directly in your server.\nUsing flash doesn't mean it won't work on mobile, the player always try to use native HTML5 playback, even though you are forcing Flash. Since Flash isn't present on mobile platforms, the HTML5 playback will get called instead.\n. @me-vlad I don't think there's a particular reason for using target-player=14.0. As far as I can remember, we don't need any specific feature from this version. Are you having any problems with this?\n. No problem, I was just checking if this was a real issue, since I don't know the reason why we used that. I believe the build script was created from a template and perhaps whoever wrote it forgot a hardcoded value for the target player.\nI'll change that and make a new version, then. Thanks a lot.\n. @me-vlad thanks for your PRs, they're already added to the flashls playback on master.\n. @liuyukk26 @me-vlad About the fullscreen transition on play, I already mentioned this on #527. There are restrictions on the browser Fullscreen API that prevent entering fullscreen programatically, except during an user interaction. To make this work correctly, we should only transition to fullscreen programatically during a click/touch handler.\nWe still don't have a public method for the player to enter fullscreen, but with the current API, you could use something like that to enter fullscreen when playing:\njavascript\nvar player = new Clappr.Player({\n  source: 'http://clappr.io/highline.mp4',\n  poster: 'http://clappr.io/poster.png',\n  parent: '#player-wrapper',\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.getPlugin('poster').$el.on('click', function() {\n  player.core.mediaControl.toggleFullscreen();\n});\nSince this is one of the most common questions/requests, I'll create an issue to propose adding an embed option to enter fullscreen on play, and a toggleFullscreen() method to the public interface of the Player object.\n. @me-vlad I think this is a good idea. We were in the process of exposing these settings, but we only added the ones we were already using. I think exposing everything is the right thing to do. If you have some time available, we'd appreciate if you submit your PRs.\n. I changed the title to make this issue an enhancement request. I hope you don't mind.\n. I believe #712 finishes this implementation. I'll close this issue for now, but fell free to reopen or create a new one if something else comes up.\n. @thiagopnts yes, I'm aware of that, but I think we should offer a cleaner way of handling fullscreen than handling the click event on poster and calling the fullscreen API, for example. Another thing we should consider is receiving the event as a parameter and checking whether or not the event is user-initiated. This way we can warn the caller when the fullscreen call is invalid. I'm not sure this solution could be cross-browser, but it's worth a try.\n. Thanks @me-vlad!\n. Thanks @me-vlad!\n. Merged, thanks @tjenkinson!\n. @leandromoreira I agree with @tjenkinson that listening on CONTAINER_READY is a little bit fragile, and there are some risks involving async operations that could delay the ready status.\nSince we added events on the player core, I would propose to add the CORE_READY and PLAYER_READY events, that would be triggered after the core is resolved.\nWhat do you think?\n. I spoke with @leandromoreira about this feature and we agreed there's no need for creating a separate issue for that. I think e809963 closes this issue. Please let me know if there's anything else to add.\n. I agree with @leandromoreira, this would be better implemented in the options. The listeners could be registered internally when creating the core/containers, so they would be registered before events are fired. What do you think, @tjenkinson?\n. Closing the issue, #733 is already merged.\n. Great addition, @tjenkinson!\n. I think this is a great feature, thanks @tjenkinson!\n. @tjenkinson the ready event should be fired whenever the player is initalized for playback, either from a initializer/constructor call or a load. When loading a new source, the player behaves like it's being reinitialized, and in fact it is.\n. The test failed due to a change I introduced. I'm still checking whether there's an error in this test assertions or if there's something else to be changed.\n. @avreg please refrain from opening issues for broken tests. It's not really a bug or feature request, it's a consequence of the product development.\nWe already have notification systems in place to inform us whether tests are breaking or fixed. If you are using the code on master in production environments, I'd recommend you not to. We use the master branch for development, and constantly release stable, tagged versions. I recommend you to use these versions, or the latest version either on npm or http://cdn.clappr.io.\n. @avreg you are welcome to report bugs, either in a release version or master by creating an issue here, it's not a problem. I just asked to avoid creating issues for broken tests.\nAbout taking part in the development, reporting bugs, feature/enhancement requests and submitting PRs are also welcome.\nAbout it being or not in a \"production\" state, I think your concept is a little bit off, but if you think it's not ready for your kind of usage, you really shouldn't use it. I wouldn't like you to take risks for using an unstable component in your environment.\nWe use Clappr in production for a while at globo.com, but not in its raw form. Clappr is designed to be a easy to use style of player, but it's only ready for some basic uses (no authentication, subtitles, etc). Implementing plugins is the way we thought that Clappr could be expanded and customized to more specific uses. We implement directly in our Clappr-based player features that are specific for our environment, like ads, DRM, quality switching, PiP, etc. We are not saying this is a 1.0 release, so API changes are still relatively frequent, but we try to avoid those.\nThere are no plans for creating a stable branch without API changes until we reach an API that we are satisfied with to name it a 1.0 release.\n. @avreg thanks for suggesting this, but it's not really necessary to add overrides for internal plugins. In order to change plugin priority, like playbacks, you could just add them in the order you want in the plugins parameter.\nWhen merging the plugin lists, the ones in the plugins parameters are added first, and internal plugins with the same name are discarded. This way, if you want to create a new spinner or poster plugin, you could just add plugins with the same name as their internal counterparts to the list.\nI think this may be undocumented, so it's a good thing you pointed out that we are missing this explanation in our documentation.\nThere's one thing not covered by plugin overrides, removing/disabling plugins at instantiation. We could implement this as a plugin or in the core loader, but it's different from specifying the plugin bundle.\nIn the coming versions we will remove most internal plugins and release them in their standalone form, so you can create your own bundle. We'll add a way to bundle plugins more easily as well.\n. Just to make things clearer, we don't want to expose internal elements of the player in the API. Things that should be public are either part of the API or plugins themselves.\nAs you mentioned in #737, you need the ability to remove some plugins from the list. Since we don't have this implemented yet, why don't you try to disable the undesired plugins for now? Another way to do this is extending the player class and making your own loader exposing your list of internal plugins.\nIf you need help doing this I can provide you some examples.\n. We have some changes planned in Clappr that aren't totally compatible with your changes. Please bear with me while I try to explain.\n1 - About global plugin lists:\njavascript\nClappr.defaultPlugins.playback  = [...]\nvar player = new Clappr.Player({...})\nThis looks like what we'll use for plugin bundles, so I'm not totally against this. As I said before, what's part of the player core implementation should not be exposed, but if we need to expose something it will be part of the API or a plugin. So we would probably expose functions to allow this to work instead of setting properties directly.\n2 - It doesn't seem comfortable, but as I told you, if you need to implement something more specific, you could have your own loader implementation and use it instead:\n``` javascript\nvar MyLoader = Clappr.Utils.extend(Clappr.Loader, {\n  initialize: function(externalPlugins, playerId) {\n    this.playbackPlugins = [Clappr.HTML5Video, Clappr.HTML5Audio, Clappr.FlasHLS, Clappr.HTMLImg, Clappr.NoOp]\n    if (externalPlugins) {\n      this.validateExternalPluginsType(externalPlugins)\n      this.addExternalPlugins(externalPlugins)\n    }\n  }\n});\nvar MyPlayer = Clappr.Utils.extend(Clappr.Player, {\n  initialize: function() {\n    this.loader = new MyLoader(this.options.plugins || {}, this.options.playerId);\n  }\n});\nvar player = new MyPlayer({\n  source: 'http://clappr.io/highline.mp4',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  parentId: '#player-wrapper',\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.on(Clappr.Events.PLAYER_READY, function() {\n  console.log(player.loader.playbackPlugins);\n});\n```\nIt could be even this implementation you wrote in this PR. The fact is that when you add a way to override internal plugins, there's no real distinction between internal or external plugins. Actually, one of our plans is to make all plugins external, and have them bundled in the default clappr package, something like clappr-all.min.js. The Clappr implementation would only include the HTML5 and Flash fallback playbacks, and no hardcoded plugins. This way you would be able to create your own bundle, so this PR would not be needed.\n3 - We use plugin classes in the plugins parameter to allow loading external components. If you create a plugin named \"my_plugin\", you wouldn't be able to load it by name, only using its class:\n``` javascript\nvar MyPlugin = Clappr.Utils.extend(Clappr.UICorePlugin, { get name() { return \"my_plugin\"} });\nvar player = new Clappr.Player({\n  //...\n  plugins: { core: [\"my_plugin\"] } // ???? How would that work?\n});\n```\nAbout your other questions:\nUnlike container/core plugins, playbacks can't be disabled, but you don't need to patch loader.js to control the playback lists. Instead, you could extend Loader and change its lists in the initialize method. It's not a hack. Something like the example on 2.\nTo disable plugins, you could just call disable() on them. Something like:\njavascript\nplayer.getPlugin('stats').disable();\nI noticed the NoOp plugin and Loader were not being exposed in the Clappr namespace, but it's already fixed, so all examples here would work.\n. @avreg thanks for your insights. We'll take them into account when developing the plugin bundling feature.\nFor now, we have a lot of changes to do before adding this feature, so we won't integrate these internal plugin overrides. Thanks again for your suggestions.\n. Nice catch, @tjenkinson!\n. Awesome, thanks @tjenkinson!\n. @gofdias suggested the same the last time we spoke. I think exiting fullscreen on video end would be the simplest way of solving this.\nPerhaps this behavior could be changed by plugins, which could in turn play the next item n a sequence/playlist or present recommendations, like the end screen on youtube.\nI believe the best solution for us is implement a basic behavior on Clappr (since it's not responsible for providing content), but still customizable through plugins.\n. Nice catch, thanks @avreg!\n. @konashark in Clappr 0.2.14 the default HLS implementation was changed from flashls to hls.js.\nThe new implementation doesn't depend on Flash to play HLS content, instead using a MSE implementation in javascript. Since requests made in javascript are restricted by the browser to follow restrictions specified by CORS headers, the playlist and fragment responses by the server should allow access through the 'Access-Control-Allow-Origin' header.\nIt's not really a security failure, it's only configuration missing in the server hosting your HLS stream. If you aren't able to change the servers to return this header, hls.js won't work at all. Flashls playback is still provided in the Clappr bundle, so if you want to keep Clappr behaving like on prior versions, you can load Clappr forcing its use.\nJust add Clappr.FlasHLS to the list of plugins when embedding Clappr, like:\njavascript\nvar player = new Clappr.Player({\n  source: 'http://your.source/here.m3u8',\n  // ...\n  plugins: { playback: [Clappr.FlasHLS] }\n});\nPlease let me know if this works for you.\n. @tjenkinson I don't think this is the best solution, since hls.js starts preloading the video as if playback has been started. We avoided initializing the hls object immediately to avoid unnecessary requests. Unless preloading the video is an embed option and the user chooses this behavior, I wouldn't do it this way by default.\nAbout the poster disappearing in the first bufferfull event, it's because the bufferfull event should only be triggered when loading the video, not when preloading. I would let this change on the poster plugin to a later time, since we want to avoid the poster to manage it's own state, but instead being controlled by the container.\nPerhaps the right approach is to consider the playback ready after rendering, or if preload is enabled, after preloading. The buffering event shouldn't be triggered on preload, unless autoPlay is enabled.\n. Sounds ok for me. Perhaps we could tranlslate the preload option that we use on the html5_video playback to autoStartLoad, or add it as a new exposed HLS option. By default, there should be no preload, so this proposed solution should work ok.\n. @tjenkinson why don't we trigger the ready state only after render instead of in the constructor? As far as I know, the listeners are always added before rendering, so there's no risk of the event being triggered without listeners. Actually this would be more accurate, because a video element should only be ready after it's added to the DOM.\n. Thanks @tjenkinson, great job.\n. Hey @tjenkinson, this refactor seems a good idea, but there are two main points that I would like to suggest that you change.\nFirst, there's the data-clickable attribute. Instead of doing this, I'd rather add a clickable class. I'm not a big fan of using attributes, specially with data prefix, to control applying styles. Using data attributes is usually done for setting actual data to be used by whatever component is accessing the element. In Clappr, the data attributes are actually legacy, we used in early prototypes to apply individual styles to elements depending on which player instance they're rendered into (the player id was a value applied to these attributes). The data attributes have been since replaced by classes, and are being used only to increase css priority, but I think they will be removed soon.\nThe other one is the use of setTimeout(fn, 0). We are using process.nextTick instead of this, to keep Clappr compatible with the node.js default api. There's already a browser shim to be used in Clappr, so we'd rather use this. When we changed the other setTimeout calls, we must have missed this one.\nAs I told you before, I didn't want the poster to have that much logic in it. It shouldn't be responsible for keeping state in it, but I don't think it's the right time to change this, so we can go on with this refactor. Could you please change these two issues I pointed?\n. @leandromoreira it seems like @zczcyc0201 is having this problem on iOS, more specifically on an iPhone. Is that correct?\nIf this is the case, there's nothing we can do, the Safari browser on iOS plays videos in fullscreen automatically, with no API to prevent this behavior. Some custom browsers which use UIWebView or WKWebView could allow inline playback, but in Safari there's no way to do it. The iPad version of Safari allows inline playback normally, this behavior is specific to the iPhone.\n. @me-vlad @sjlu about AirPlay, I'm developing this as a standalone plugin. I'm still lacking an icon for enabling this, but it's nearly done.\n. @msinghms001 Flash is not supported on mobile, so FlasHLS shouldn't work. \nIf you want to use some implementation other than the default HTML5Video, you could use the HLS playback (which uses hls.js). Please note that it will only work on MSE capable browsers.. @leandromoreira apparently the demo page hasn't been updated in a long time. I just deployed it, so it's now fixed. Thanks!. @tjenkinson I think we can safely remove shrinkwrap if we can guarantee that the package dependencies work properly. If we use the tool you suggested, perhaps this will work. I'll check if this works and if @clappr/core agrees, we can go this way.\n. @tjenkinson since the media control won't use these icon fonts, this behavior will be fixed as well.\n. @DavidVentura it was already developed, we only needed some tests before merging this to Clappr itself. We had implemented this in our closed source player, and only needed to backport the changes.\nThere was no open issue in the Clappr project, but you can check these commits I just pushed and see whether this will work for you.\n. I would hold this change for a while. I already had a discussion with someone about this, I can't remember exactly who/when. The problem with publishing only the dist folder is that when someone uses webpack or babel in his project, we'll be forcing them to use the compiled version of clappr. Installing only the dist files is only recommended if you are publishing a library which should not be bundled into someone's code or have its inner workings exposed.\nI've seen packages distributed just the way we do as well as packages that only include the compiled files in their distribution. Since the beginning we wanted the user to either build clappr into their own product as well as use clappr by itself with no changes. The way we distribute clappr files on npm supports both ways. One of the biggest problems this change will introduce is that the players that include clappr into their own compiled bundle may have some compilation issues introduced (for example, many objects that aren't exported but could be customized), as well as duplicating babel's ES6 runtime, and resuting in an unoptimized bundle, since the entire clappr bundle, with it's own UMD module exports will be bundled into another UMD module.\n. @leandromoreira is right. The FlasHLS playback that we use for playing HLS does not include DRM support at all. It is based on the chromeless player, which is simply a barebones video object fed with data from FlasHLS HLS implementation.\nIf you want DRM support for HLS, you should use a OSMF based playback. Perhaps you could use the FlasHLS OSMF plugin with some OSMF based playback to make this work. AFAIK there's no Clappr playback implemented using this, so you would need to implement it yourself.\n. @mikeevstropov I believe there's something wrong with your mediacontrol parameter.\nActually, the mediacontrol parameter should be an object containing either parameters to customize the media control colors, or a reference to an external implementation, like this:\njavascript\nvar player  = new Clappr.Player({\n    // ...\n    mediacontrol: { external: MyMediaControl }\n});\nLet me know if this will work.\n. @leandromoreira about the missing extend in MediaControl class, I think we overlooked this. Only the plugin classes have the extend method. But even without the method being defined in MediaControl, Clappr exposes it in the Utils namespace, so the same could be done with:\njavascript\nvar MyMediaControl = Clappr.Utils.extend(Clappr.MediaControl, {\n  //...\n});\n. @jasonbodily I'm not sure why this issue was closed, but you're right, there are some issues with the examples using extend. I'll check the examples and fix what's broken with them.\n. @mikeevstropov @jasonbodily the extend function has been recently fixed on 638965bc4523ae583710f7b94ee6b616e995832a. It was also added as a helper to the MediaControl class, so you can now do something like:\njavascript\nvar HelloWorld = Clappr.MediaControl.extend({\n  get template() { return Clappr.template('<div>Tada!</div>') }\n});\nvar player = new Clappr.Player({\n  source: \"http://your.video/here.mp4\",\n  mediacontrol: { external: HelloWorld }\n});\n. @leandromoreira AFAIK there's no parameter for setting a startup time, but there's a parameter called autoSeekFromUrl which enables parsing the query string for the parameter t you mentioned.\n. @ikkebr we are updating this \"closed source\" plugin that @flavioribeiro mentioned, and will publish this as soon as possible. It cannot be used as it is because there are some business logic from our product mixed within it.\n. @thiagopnts it will be a separate plugin. In fact, most built-in plugins will be extracted into standalone versions.\nThis will help us avoid releasing the player just to update plugin versions.\n. @leandromoreira that's fine by me\n. Hi, @Tkamiya.\nClappr supports setting \"100%\" to its dimensions. You just need to embed the player using:\njavascript\nvar player = new Clappr.Player({\n  // ...\n  width: \"100%\",\n  height: \"100%\"\n})\nThe only restriction is that you have to set the parent element dimensions. Otherwise the player will always compute its size to 0x0.\nI checked the webpage you mentioned, and the parent element (<div id=\"player\">) has no explicit size. It currently computes to 660x360 because it contains the player, which in turn has an intrinsic size. If you change the player to occupy 100% of the parent space, you'll have to add explicit dimensions to the parent element, like:\n``` css\nplayer {\nwidth: 660px;\n  height: 360px;\n}\n```\nPlease let me know if this works for you.\n. @Tkamiya it seems you have changed the player container correctly, but your responsive style is not resizing it to the right size.\nI ran the chrome inspector simulating a Nexus 5X, and the player container is sized to 660x360, instead of being resized to fit the viewport width (411px in my test).\n\nTry adding responsive rules to the style of the #player element.\n. @tjenkinson actually this is related to mobile. Since there's no autoplay support on most mobile devices, there should be a way to allow the player to work chromeless, but still being able to play through user interaction.\n. @tjenkinson I think you're right. Perhaps we should add this option disableUserInteraction you suggested. \nMy idea for that option, in order to keep backwards compatibility, is to have a default value set to !Browser.isMobile when the option is not set. This option should only work when chromeless is set to true.\nWhat do you think?\n. Closing the issue, there are no more needed changes to fix this behavior.\n. @ronag from your code snippet I could assume you are using React. Is that right?\nIf so, how did you wrap the player to work inside React virtual DOM rendering? Could you share more info about this?\nI'm asking this because I believe the white square you are referring to is the poster play button when it renders and perhaps the icon font is still not ready or its font-face has been removed from DOM somehow.\n. @kolpax @bikegriffith we are working in an updated version of the media control/poster that do not rely on font rendering, instead using inline svgs for the icons. I believe this will be added in the next clappr release.\n. @bikegriffith it probably won't reduce the total minified bundle size, because it will add the svg source directly to the media control template, but it will reduce the total download size  (and perhaps the the inline css size), because no font will be added to either the controls or the poster. The svg files we use are really small, and they will be minified as well.\nEven if it doesn't reduce the total size, there's another improvement we're working on that will shrink the bundle size. Most of the built-in plugins will be extracted from the core player, as well as the default media control, and they will become standalone plugins. This will help reduce bundle sizes for whatever project that include clappr in their bundle, and make it more flexible to customize what plugins should be used for a given player instance.\n. This has been fixed in 0.2.41, but feel free to reopen if this issue is still happening.\n. @me-vlad actually, this is not a bug. You set the player size to occupy 100% of its parent dimensions.\nSince the player container style in the test page only has a minimum width, the player container will fill the entire parent height, and use the minimum width (320 px, I think).\nIf you set the player width/height to fixed values, it will resize correctly.\n. @me-vlad I see, sorry about that, I just got the error here. It seems to be either a problem with the player destroy method or with the fullscreenchange event listeners. I'm still trying to isolate the problem.\nIf you load the test page using the source in the query string (http://cdn.clappr.io/?src=http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8), the problem does not seem to happen.\n. I just found what happens exactly. The problem occurs only when loading through the run button in the test page. It's actually related to how the player behaves when two instances are embedded in a page, after one of the instances is destroyed. The event listeners responsible for handling the fullscreenchange event are destroyed and no other listener is registered.\nTo reproduce the problem:\n- create two player instances\n- destroy one of them\n- enter fullscreen and then exit\n. @me-vlad actually, the MEDIACONTROL_FULLSCREEN event is triggered by the media control when the user activates fullscreen. It's not triggered on the player object, so the right way to do this is\njavascript\nplayer.core.mediaControl.on(Clappr.Events.MEDIACONTROL_FULLSCREEN, function() { console.log(\"FULLSCREEN!\") });\nBut even doing this, the exit fullscreen event won't be triggered when pressing ESC.\n. @me-vlad I just pushed a change including the PLAYER_FULLSCREEN event. Now you can just do this:\njavascript\nplayer.on(Clappr.Events.PLAYER_FULLSCREEN, function(fullscreen) {console.log('fullscreen is', fullscreen ? 'on' : 'off')});\nb3a2468 solves the problem you reported. Please let me know if it works for you\n. Closing this issue, since 0.2.41 includes this fix.\n. @me-vlad I managed to reproduce the error, but I believe the problem only occurs when stopping the video, not pausing. Your test stream does not have DVR enabled (at least for Clappr minimum DVR duration).\nThe problem was caused by the manifest loaded event being caught only on the first play. After stopping the video and then starting it again, the event is triggered but no longer listened by the playback, so the play event is not fired, and causing a lot of other problems.\nI just pushed 6fde7d0, which fixes the error I just described. Please let me know if this works for you.\n. Anytime! :+1: \n. @me-vlad thanks for reporting. I just pushed    a15861a which should fix this regression. Please let me know if this works for you.\n. @me-vlad agreed. The poster controls should follow the media control styling.\nAbout the svg fill color, the actual color is being set through css. You can ignore this attribute, since browsers always override these attributes with the values defined through css. You can check this in the path element style in the browser inspector.\nI just pushed a small fix for the fullscreen style (12aa33a), it should be working correcly.\n. Nice catch, @me-vlad, I forgot to check the play/stop toggle. Just pushed the fix.\n. If everything is ok, I'll add some tests for this regression before closing the issue.\n. @tjenkinson why don't we replace the redirect to /dev/null with the --silent flag? This way, messages that npm considers that should appear would be printed anyway.\n. @tjenkinson perhaps it would be better to keep all npm calls with silent, yes.\n. @tjenkinson it does exist and actually works on update/run. When using on npm run, it only removes the header of npm log:\nnpm run build --silent\nclean-webpack-plugin: /Users/bruno/workspace/player/clappr/dist has been removed.\nHash: c6987ef2650db63ae438\nVersion: webpack 1.12.14\nTime: 12790ms\n                               Asset       Size  Chunks             Chunk Names\na8c874b93b3d848f39a71260c57e3863.cur  326 bytes          [emitted]\n4b76590b32dab62bc95c1b7951efae78.swf     3.2 kB          [emitted]\nd218edf766218c19b416107bfb05ef0f.swf      63 kB          [emitted]\n38861cba61c66739c1452c3a71e39852.ttf    32.7 kB          [emitted]\n                           clappr.js     888 kB       0  [emitted]  main\n    + 155 hidden modules\nWithout --silent:\n```\nnpm run build\n\nclappr@0.2.40 build /Users/bruno/workspace/player/clappr\nwebpack --progress\n\nclean-webpack-plugin: /Users/bruno/workspace/player/clappr/dist has been removed.\nHash: c6987ef2650db63ae438\nVersion: webpack 1.12.14\nTime: 13549ms\n                               Asset       Size  Chunks             Chunk Names\na8c874b93b3d848f39a71260c57e3863.cur  326 bytes          [emitted]\n4b76590b32dab62bc95c1b7951efae78.swf     3.2 kB          [emitted]\nd218edf766218c19b416107bfb05ef0f.swf      63 kB          [emitted]\n38861cba61c66739c1452c3a71e39852.ttf    32.7 kB          [emitted]\n                           clappr.js     888 kB       0  [emitted]  main\n    + 155 hidden modules\n```\n. This extra output from build/release seems to come from webpack itself, so we could configure it to be less verbose when building. There seems to be some configs to make webpack less verbose.\nAbout the npm install printing some extra info to the console, it seems to be by design. The progress seems to be printed to stderr, so if you are piping the output to a file you could redirect stderr as well.\n. @tjenkinson this message is from the clean-webpack-plugin. I just found that there's an option verbose: false which will prevent this message from being printed. Try changing this line on webpack.config.js:\njavascript\nwebpackConfig.plugins.push(new Clean(['dist'], {verbose: false}));\n. @tjenkinson I wouldn't make the redirect 1>/dev/null. The other changes would be ok for me.\nThere's no special reason to keep the output small, it's only to improve readability. Printing the chunk list at the end is no problem at all.\n. @tjenkinson it would be better, but it's not actually mandatory not to print anything. As I mentioned, this was made to keep things easier to read. I would rather let it print the chunks and avoid redirecting any output to /dev/null.\n. It is, thanks!\n. :+1:\n. Thanks @tjenkinson!\n. Great, merged.\n. @Marcin666 actually, you should use the PLAYER_FULLSCREEN event. The fullscreen event on the container will be deprecated soon, and it isn't included in the docs anymore.\nTry this:\njavascript\nplayer.on(Clappr.Events.PLAYER_FULLSCREEN, function(isFullscreen) { \n  console.log('isFullscreen', isFullscreen);\n});\n. @leandromoreira it was fixed in a local branch only. I'll push the fix to master.\n. @mikeevstropov actually this is a bug on the query string parser, which reads a timestamp like ?t=5m10s from the query string and automatically seeks to the corresponding position.\nThere was a problem with some of its checks, that wouldn't limit to check only the query string portion of the url. So if your iframe url contains a string in this format, it would try to parse it as well. Another problem is that it wasn't limiting to a named parameter \"t\", so any parameter ending with \"t\" would parse as a seek string as well. I'd safely bet the player is using your \"host\" parameter as a seek string.\nI just pushed these fixes to master. Could you please test it to see if it will fix your problem?\n. @mikeevstropov glad to know =]\nAbout the icons, we moved from a icon font based solution to rendering the icons directly using SVG. There were some issues related to using icon fonts that we wanted to get rid of, such as blurry icons when using a number of browsers in Windows, with either font smoothing enabled or not. Sometimes the icons would disappear completely, requiring to perform a forced layout on the player.\nI'm not sure what's wrong with the size of your icons, but perhaps you should just change the font-size style to an explicit height.\n. @mikeevstropov yes, you can do it that way.\n. @bikegriffith we didn't consider bumping a minor version with this change because there were no significant or breaking API changes. All poster/media control changes were in their internal implementation and did not change their function, just the way buttons are rendered within those components.\nWe don't actually recommend simply overriding templates/styles in the built-in plugins. Instead of doing this, subclassing and overriding the rendering functions as well as the templates/styles is the safest way to do this.\nThere are some API breaking changes planned for the near future. Those changes are related to the way the media control, containers and playbacks are defined and initialized, and in my opinion would justify bumping a minor version.\nThe next minor version will also help reduce bundle sizes, both for clappr itself and for projects that use it.\nAbout the typeface changes, could you please share with us what kind of changes you are doing, so we can better support this kind of customization?\n. @tjenkinson it's not really a big deal, the npm package includes the updated dist folder. Nice catch, by the way.\nMerged. :+1: \n. Thanks, @tjenkinson. You have spared me of this task.\nAbout the font smoothing, it has no impact when used on svgs directly.\n. @alouane you can force clappr to try using hls.js instead of a simple html5 video tag. It's not guaranteed it will work or be activated at all, it depends on browser/webview support for MSE.\nTo try using hls.js for android you can try this:\njavascript\nvar player = new Clappr.Player({\n  source: 'some/video.m3u8',\n  // ...\n  plugins: [Clappr.HLS]\n});\n. @leandromoreira I agree, we can change the default playback priority to include hls.js before the default html5 video playback.\n. @ronag are you referring to the seek bar? It was designed this way, but it's not a big problem since the user can drag the scrubber to both start/end positions, even if the mouse cursor leaves the player bounds. This drag behavior will work even on fullscreen.\n. @ronag I don't think of this as a problem. The seekbar click is not really precise, specially for longer videos, since it has to map the click offset to a duration percentage. Dragging the scrubber is the option that's more precise, so it would be used more often when the user wants to seek to a given time.\nAdditionally, the media control as well as its style can be overridden, so if you need to add some padding or change the bar height for whatever reason, you would be able to do so.\n. @3dd13, your call to this.container.playback.myPlaybackMethod() is correct. \nIn Clappr, data flow is defined this way: components that broadcast data or inform conditions to unknown receivers should trigger events, and components that must interact with other elements within their own scope should call methods. Calling methods for known references to other components is the recommended way.\nAbout the media control, you don't really need to implement a player instance, unless you have to change the player bootstrap logic in some way. If you only need to change the media control and playbacks, you can do it like @leandromoreira mentioned.\n. Great job @bernardocamilo! :beers: \n. Just tested here, great job @tjenkinson. Thanks!\n. I agree with @tjenkinson. It's probably a bug on hls.js and should be fixed there instead. Since #917 is closed, I believe @jussike agrees with us.\nWe'll close this PR, but if someone find an issue in Clappr that's related to this we can revisit this solution.\n. @alouane are you using any external plugins? Can you provide any test URL so we can try to reproduce the problem on a web browser?\n. Perhaps we should try submitting a PR with at least the latest version.\n. @tjenkinson there's only one problem with changing the package manager from github to npm. Currently our npm package includes the player source as well as dist files. In jsdelivr docs, they recommend only adding files that are used in production environments.\n. I'm not sure if jsdelivr takes the \"files\" filter into account when using npm. Let's wait for a response on that issue, to see how it behaves with it.\n. I'm not sure if jsdelivr takes the \"files\" filter into account when using npm. Let's wait for a response on that issue, to see how it behaves with it.\n. @mikeevstropov you can check whether the FlasHLS supports your source by using the static canPlay method. It's used when loading the most suited playback for a given source.\njavascript\nClappr.FlasHLS.canPlay('http://your/source.m3u8')\nThis will check whether flash is installed, etc. One detail is that in Clappr, the default HLS priority is using hls.js (with MSE), the native video tag, and when all else failed, FlasHLS.\nAbout this error, it's an error within the PPAPI flash implementation. There seems to be a bug in Chromium related to rendering surfaces on some Linux implementations. I don't remember the details, but there's an open bug for Chromium for that error.\n. @mikeevstropov I didn't understand what you really wanted at first, you want to check whether or not the player loaded the media source using FlasHLS, not if it would load using it prior to initializing the player. Yes, this check you discovered is actually right, and will work if you need to check for other types of playback as well.\nAbout the static check I mentioned (canPlay), it doesn't make a round trip to the server, it only tries to check the URL pattern or mime type passed as parameters, as well as MSE/Flash support on the browser.\n. @mikeevstropov I see, but there's one detail about pausing HLS streams. Is it a live stream or VoD?\nWith live streams, Clappr will only support pausing when the stream has DVR support. This means that your stream needs to have a duration longer than a given threshold set. The default threshold for minimum duration needed to be considered supporting DVR is 1 minute. You can configure this setting the option hlsMinimumDvrSize (in seconds) when instantiating the player.\n. No, it can't. It seems to be a bug on the FlasHLS playback, or FlasHLS itself. I'll open another issue related to this problem so we can sort this out. Thanks, @mikeevstropov \nEdit: opened #936\n. Great job, @tjenkinson, thanks!\n. @leandromoreira @primoitt83 it seems to be related to an issue on lodash that's already been fixed. Apparently, the offenders are lodash.result and lodash.uniqby. Both have been updated to version 4.3.0, but it probably wasn't included on Clappr 0.2.47.\nI tested with Firefox on http://cdn.clappr.io (Clappr 0.2.47) and the same problem occurred, while testing on the same browser with current master (1419c45) the problem doesn't occur. I'll try to release another version as soon as I finish testing so we can fix this issue.\n. Thanks @jussike, good one.\n. I agree with @leandromoreira, triggering an error event should only occur when there's no more recovery attempts left.\n. Thanks @tjenkinson, we missed non-fatal errors on our solution.\n. You're right, @tjenkinson. Our solution didn't take non-fatal errors into account. Thanks!\n. @alouane actually Clappr does work with the audio tag. There's a playback used for audio, but the Clappr element is not the playback tag. Instead, it wraps around the playback tag.\nYou could try something like this:\njavascript\nplayer = new Clappr.Player(...)  \naudio = player.core.getCurrentPlayback().el; // assuming that your source is an audio file\n// ... audio will be the <audio> tag you expect\n. This will break our build, the compass-mixins version we use is incompatible with node-sass > 3.4.x.\nI suggest holding this update until we can get mixins that will work properly with an up-to-date node-sass.\n. @leandromoreira actually, there's a small bug on the volume control style. When the volume control is hidden, there's still a single bar from the segmented control which is still visible, but stretched vertically.\n\nWhen hovering on the icon and displaying the controls, the appearance seems fine:\n\n@irongomme when the player width is smaller than 320px the volume control is collapsed into the volume icon, only becoming visible when hovering on it. The \"ugly bar\" is indeed a bug, but collapsing the volume control isn't.\n. @leandromoreira I agree with you. Perhaps the start method should be analyzed more carefully.\nWe should consider moving these changes into the configure and load methods, instead of creating a new one that decides to either reconfigure or load a new source based on the type of its parameters.\n. @gamtiq I was actually more inclined to add these changes you made on start to the load/configure methods. I understand you intended to automatically start the video on load when calling the start method.\nInstead of doing that, I suggest to use the autoPlay semantics when calling load/configure. On load, we could add an autoPlay parameter to automatically start the video, and when configure is called with the autoPlay flag set to true, the video would start, just like if you have called play afterwards.\n. It's up to you. Do you prefer implementing the additional changes yourself and adding to the PR or would you like us to merge the other commits except c594318?\n. Great job, thanks @gamtiq! \ud83c\udf7b \n. As we all discussed, we decided to use the solution proposed in #989, instead of keeping a fork of compass-mixins. Closing this PR. \nThanks, @tjenkinson!\n. LGTM\n. Thanks @tjenkinson, good job!\n. LGTM\n. LGTM\n. LGTM\n. LGTM\n. LGTM\n. Thanks @tjenkinson!\n. I'd suggest some small changes to the proposed options:\n`` javascript\n// It's recommended to always use the plugin name for plugin-specific options, but there's no need for scoping it undercoreorcontainer`\n   ga: {\n       // https://developers.google.com/analytics/devguides/collection/analyticsjs/#the_javascript_tracking_snippet\n       // Perhaps it's better to use a funcion instead of evaluating a JS string\n       bootstrapJS: function() { var j=1;... }, // default: latest\n       trackingId: 'UA-XXXXX-Y', // *mandatory  - the tracking ID / web property ID.mandatory\n       cookieDomain: 'auto', // default : 'auto' - document.location.hostname (normalized)\n       name: 'myTracker',   // default: undefined -Naming a tracker is necessary in cases where you need to create more than one tracker for the same page,  if presents it'll send ga('myTracker.send', 'x', 'y');\n       userId: '12345', // default: Randomly Generated & persisted in cookie\n       progressPercentage: [50,74], // default: [] - sends hitType: 'event',  eventCategory: 'Videos',  eventAction: 'progress_30p'\n       progressSeconds: [30], // default: [] - sends hitType: 'event',  eventCategory: 'Videos',  eventAction: 'progress_30s',\n       eventsToTrack: [\n                'seek', 'end', 'play', 'pause', 'buffering', \n                'bufferfull', 'fullscreen', 'volume', 'error', 'stop', '...'\n       ] // default: [] - sends   hitType: 'event',  eventCategory: 'Videos',  eventAction: 'x',\n    }\n// custom dimension and metric!\nga('send', 'pageview', {\n  'dimension15':  'My Custom Dimension'\n});\nga('send', 'event', 'category', 'action', {\n  'metric18': 8000\n});\n``\n. Perhaps we could add another parameter for these event mappings instead of changing theeventsToTrack` parameter. Something like:\njavascript\neventsToTrack: [ 'seek', 'end', 'play', ... ], // this will only control what kind of events should be tracked\neventMapping: { // these mappings will change the values to be used instead of the event keys themselves\n  seek: 'videoSeek',\n  end: 'videoEnd',\n  play: 'videoStart',\n  ...\n}\n. Great, thanks @bernardocamilo :beers:\n. Confirmed the bug, will push a fix soon.\n. dc569a1d63afa09a132718e46e62454ba0219550 fixes this issue, could you please test against it?\n. LGTM\n. @tjenkinson I agree with you, the main entry should point to dist/clappr.js. This way whoever uses the clappr npm package would be able to do so without needing to resort to a transpiler.\nHowever, I disagree that we should drop the baseUrl parameter. In my opinion, it is a cleaner way to dynamically determine the assets path without depending on webpack or using global variables. Since it does not interfere with how webpack works with urls, I think it's still a better solution than using a global asset base url variable, like the one implemented on #1008.\n. \ud83c\udf7b @tjenkinson \n. Merged, thanks @tjenkinson \n. Nice fix\n. Looks good to me. I agree with @tjenkinson, the flags should be passed as boolean values, and the case should match our properties.\nAbout the autoplay flag, I think it should be removed, since we already have an autoPlay parameter for the player instance, and the playbacks already receive those in the options object. Having a playback specific autoplay flag is redundant in my opinion.\n. Great job, @leandromoreira! \ud83c\udf7b \n. There's no problem with the autoplay flag, because it uses the value from options, so it's not redundant anymore. \nAbout the crossOrigin, you're right, I missed that. Since it's just a typo, I'll fix it right away, since I just merged the PR. There's another redundant parameter, poster, that needs to be removed.\n. @tjenkinson about the .poster property, I believe it does exist and is documented for HTMLVideoElement, at least here: https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement\nEdit: we posted almost together, sorry about that. \ud83d\ude06 \n. I just pushed a fix to the crossOrigin typo and the redundant poster/loop options. Those options should still be global, they're not specific for HTML5 video playback.\n. I don't think this change would add much value, since it replaces a runtime parameter used when embedding the player with a global variable that needs to be set before evaluating the Clappr script.\nThe baseUrl parameter exists so that products embedding Clappr could have whatever URL layout they want, allowing separating the javascript files from assets, or whatever the user would want, without the need to build Clappr itself. The assumption that having a baseUrl parameter is wrong due to the way webpack works with runtime assets is not correct, since Clappr was designed to not rely on whatever technology is used to build it (even ES6 - we have ES5 helpers for extending classes). It should be simple to extend and transparent to use, and it should not depend on products that include Clappr relying on using webpack as well, or even adding global variables for setting this, which seems really clumsy.\nThere's also a plan of splitting Clappr into smaller packages, a core and independent plugin bundles, as well as a full player package that includes most plugins that are used today. I'm not sure this change will fit into this future release, so I wouldn't recommend merging it.\n. @tjenkinson about asynchronous modules, I think we can provide guidance on how to support this the webpack way. \nAs I mentioned before, we are not commited to webpack itself, so I don't think Clappr should be altered only to support a webpack feature. If an user wants to use Clappr this way, I think it would be reasonable to just override the default Clappr webpack configuration and provide a valid publicPath.\nIn our custom globo.com player, we override the Clappr build settings to provide a fixed and valid publicPath, so I don't think it would be an obstacle for using asynchronous modules.\n. @leandromoreira that would be cool. \ud83d\udc4d \n. @leandromoreira the problem is not actually the playback priority. If you change the playback to Clappr.FlasHLS instead, it will override the playback properly.\nThe problem is related to an explicit check in the HLS playback canPlay method:\njavascript\nreturn !!(HLSJS.isSupported() && isHls && !Browser.isSafari)\nRemoving the !Browser.isSafari would fix this behavior, but I don't recommend doing this since the HLS playback does not behave well on Safari.\n. @thalleshmm could you please share the URL you have used on your test? I tried doing the same (changing playback to FlasHLS) with @leandromoreira's sample and it worked correctly for me.\n``` javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n  baseUrl: '/latest',\n  plugins: [Clappr.FlasHLS],\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\nplayer.on(Clappr.Events.PLAYER_PAUSE, function(){\n  alert(player.core.getCurrentPlayback().name)\n})\n```\n. @thalleshmm the FlasHLS playback checks whether or not the Flash plugin is installed. Could you try running this on your Safari javascript console?\njavascript\nnavigator.mimeTypes && navigator.mimeTypes['application/x-shockwave-flash'] !== undefined && navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin\n. @569934390 we don't do anything other than npm run release, bumping version and deploying on CDN.\nHow are you building Clappr? What's your node version? Could you provide more info so we can investigate this issue?\n. Both 0.2.52 and 0.2.53 include hls.js updates, so it could be related to updating the playback underlying library. I can't reproduce with the cdn version, but I'll try to build a project from scratch to isolate this problem.\nWhat version of nodejs are you using, @framerate? We noticed that using earlier versions of nodejs could cause some build issues.\n. :+1:\n. @paunadeu when you say Note that audio controls don't work what did you mean? The default media control implementation doesn't show audio controls, because the video tag does not allow changing the volume through javascript (see here).\nAre you providing a custom media control implementation that displays volume controls for iOS? If so, perhaps attempting to change the volume could cause this problem. I don't have an iPad Air 2 at hand for testing, but I tried to reproduce with an iPad Pro 12\" running iOS 9.3.2 as well, but it worked ok for me with http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8. Do you have any test URL we can use to reproduce this behavior?\nAbout the iOS play button, it's not possible to avoid showing it on the video tag, but usually when you use a poster image, like the one we use in the example on http://cdn.clappr.io, the poster and spinner plugins render over the button and the user doesn't see the iOS default play button.\n. @569934390 the player volume bar controls the output volume of the video tag itself. It doesn't tie into any system-wide volume control.\nThe volume of the video tag on iOS cannot be controlled using JavaScript, thus setting the volume through JavaScript calls or interacting with the volume bar doesn't have any effect. In fact, that's why the default media control implementation doesn't even show the volume bar/button.\nSee here for more information about this matter. The important bit of info is this:\nOn iOS devices, the audio level is always under the user\u2019s physical control. The volume property is not settable in JavaScript. Reading the volume property always returns 1.\n. I don't think there's any problem with this approach, the playback is always added to the container plugin list. Since it's handled together with all other container plugins, there should be no problem destroying it with the other plugins.\n. There was once a suggestion of unifying both HTML5 playbacks into a single one (#466), but the issue was closed.\nI think something like what @tjenkinson suggested would solve the problem. I'd suggest using an audioOnly flag under playback options and the get tagName() property on would return <audio> or <video> depending on that flag.\n. @tjenkinson indeed\n. :beers:\n. @cowai the current version of the MediaControl component does not support adding custom buttons, but you can do it through an UICorePlugin. \nYou could do something like this. Since the panels and button references are public, it's safe to do this way.\nWe're already working in a new MediaControl that is able to render other UICorePlugins as controls inside it's own element. It will be added in version 0.3.x.\n. @tobiasandersen currently this is not possible, the progress event filters the buffer containing the current position.\nI'll mark this as a enhancement request, so we can think of a better way to provide these buffer positions.\n. @tobiasandersen 2f7fc506ea683b5d79ee23201561a5658597285d and 8648f25bffad2983fa62a4702b827d4943f7b9ac added a second parameter to HTML5 based-playbacks to include an array of these buffered segments.\nYou can now use do something like this:\njavascript\nplayer.getCurrentPlayback().on(Clappr.Events.PLAYBACK_PROGRESS, function(progress, buffered) {\n  // progress is the same object to keep compatibility: { start, current, total }\n  // buffered is an array in the format: [{start, end}, {start, end}, ...]\n}\n. Indeed, thanks @shaharmor. Already working on a fix and tests to prevent this behavior.\n. I only changed the container options to be copied over a new object, so it will work properly. Still need to change a little bit of the code to make it easier to test, but it's working ok after the change.\n. @tjenkinson the problem with this approach is that it will break compatibility with previous versions. The playback options were already mixed with hls.js options previously.\n. @tjenkinson you're right, I think this didn't happen in hls.js. Perhaps it only occurred with other components.\n. If everyone is ok with doing that, we can change hls.js options to a hlsjsConfig object inside playback options, with fallback to hlsjsConfig in the player options to keep backwards compatibility. \nThis way we will support both the new way:\njavascript\nnew Clappr.Player({\n   playback: {\n      hlsMinimumDvrSize: 10,\n      hlsjsConfig: {\n         someHlsjsOption: true\n      }\n   }\n});\nand the old way:\njavascript\nnew Clappr.Player({\n  hlsjsConfig: {\n     someHlsjsOption: true\n  }\n});\n. @tjenkinson I think so. This should work correctly.\nWill you implement this fix? If so, please try to add some tests to prevent changes from breaking this again.\n. @tjenkinson only on HLS playback or with all other playbacks?\n. @tjenkinson there was a playbackConfig option that we renamed to playback only. I just noticed that, when I was writing tests for this fix.\nI think it would be safe to remove, because it wasn't released. I just kept it for backwards compatibility because I thought there was a release containing this option.\n. You don't have to worry about this, I'm already fixing it.\n. @tjenkinson thanks, I'll add those tests to the ones I've already implemented.\nAbout the playback object, the idea is that all playback implementation specific options should be there. \nOptions that are common to all playbacks (like loop, autoPlay, etc.) are player options, but options that are specific to one or more playback implementations, for example minimumDvrSize,  should be grouped inside playback.\nThis way we can create options that are directed to some playback implementations, but that could be shared among different implementations. \nDVR is an example. It's not supported by all playback implementations, but it could be shared between hls.js, FlasHLS and other playbacks.\n. @tjenkinson will you try to remove the lodash dependencies? Or are we ok to merge it as is?\n@thiagopnts I'm aware that the bundle size has increased, but I'm still working on restructuring plugins and the media control to release a new version of Clappr without bundling all plugins with it. This way we can have more control of the player size, as well as allowing loading plugins separately.\n. Took some time to test whether this would affect anything else. Seems ok to merge this.\nPerhaps we should try to increase playback state test coverage so we don't have these issues again.\n. Thanks, @tjenkinson!\n. Hi, @DerivcoHK. We could not reproduce this behavior you reported. I even added a test to check whether the isAudioOnly is returning a false positive (84318ce2b641b96116129be7d1a6e2273ca9e858).\nIf it's a bug, it's better if we solve the problem with the isAudioOnly check, instead of adding a flag to disable it. Could you please open an issue reporting the problem and how we can reproduce this behavior? \nI'll close this PR, since it's not considered an ideal solution to the possible bug you found.\n. @giaule currently the player does not support subtitles.\nIt's in our roadmap to add a basic implementation, but for now there's no way to add subtitle support. Actually, even hls.js currently doesn't support WebVTT text tracks, so we wouldn't be able to add full support until then.\n. > Would be interested to see how jwplayer gets around this.\n\n@tjenkinson the only way to do this is through Flash, because it's not bound by these constraints. If the page/iframe allows the user to embed Flash content, it can go fullscreen without being controlled by the browser.\n. @enbplas11 looking at your sample pages, the one using jwplayer 6 is playing content with Flash. That's why fullscreen works.\n\nClappr is an HTML5 based player, so it's bound by HTML5 rules. It's not possible to use Flash-style fullscreen mode with it.\nEdit: Even the jwplayer 6 sample uses allowfullscreen on its iframe (not sure if this will have any effect):\n\n. @leandromoreira it won't work. Even Flash-based playbacks do not control fullscreen mode. The player only uses flash to provide decoding capabilities to the browser.\n. That solution is fine, @enbplas11. I thought you were looking for a solution for where you don't have access to the iframe element, like when you only have control of the inner HTML code. If that was the case, you wouldn't be able to change the iframe attributes so you can allow it to run content in fullscreen.\n. No, @enbplas11, there's no solution for iframe fullscreen support that doesn't require setting the allowfullscreen attribute.\nIf you have access to the iframe, you have to add this attribute. If you don't have access, you're out of luck.\n. Merged, thanks @tjenkinson!\n. @iongion currently there's no way to inform the poster to not show on video end.\nI'm considering this an enhancement request so we can support this behavior.\n. @iongion I made a small change to the poster plugin to allow disabling this behavior, but only for video end.\nYou just have to add the following when embedding the player:\njavascript\nnew Clappr.Player({\n  poster: {\n    url: 'http://some.url/for/poster',\n    showOnVideoEnd: false\n  }\n})\nThe default behavior when the flag is not set is to show the poster screen after the video end. Notice that the poster option can either be the poster url or an object with the url and other options.\n. Thanks @sjlu! :beers:\n. @tjenkinson actually, @sjlu solution is right. Using only \njavascript\n!HTML5Video._canPlay('video', VIDEO_MIMETYPES, resourceUrl, mimeType)\ncould cause false positives for other playbacks that extend HTML5Video\n. @tjenkinson perhaps it should override isAudioOnly, yes. Actually, I'm writing some tests to ensure we are doing this right.\n. Actually, there was a problem with the solution. Using audio/mp3 as mime type, for example, isAudioOnly returned false, since the video tag can actually play the audio source.\nSince the audio tag is a headless version of the video tag, this solution was not efficient. Instead, I changed the check to only considered known audio only mime-types or the audioOnly parameter.\nThere are some tests to guarantee it works so we can refactor properly if needed. If you think more tests are necessary, please let me know.\n. Thanks @sjlu! :beers:\n. Thanks @sjlu! :beers:\n. @tjenkinson the problem seems to be related to multiple calls to _setupHls() due to the autoPlay flag set, in both HLS and HTML5Video constructors\n. Perhaps we should change the play() method to work only after the constructor finishes. What do you think?\n. Since _setupHls() is called on the constructor if autoPlay is set, we could do this:\njavascript\nplay() {\n  if (this.options.autoPlay && !this._hls) {\n    return\n  } else if (!this._hls) {\n    this._setupHls()\n  }\n  super.play()\n}\nEdit: we could improve this check but this is the general idea.\n. I think it could be handled just after the playback instantiation. Perhaps this would be safer than letting every playback handle the autoPlay flag on its own.\nBut instead of doing this on the container factory, it could be handled when the playback is attached to the container itself.\n. Thanks for reporting, @waster. There are some concerns about removing the playback source on stop, since it's not reloaded on each play, but only on setup. This way the playback would need to reload the source if play is called again.\nI'll check if there's a way to do that in a way that works correctly with the playback. I'll keep you posted on this.\n. @waster it's a bug indeed. I've already confirmed the problem. Thanks for reporting.\n. @waster there seems to be an error on your source playlist. The 128kbps playlist is always empty:\n```\ncurl 'http://hls.02.ep.emgsound.ru/11/playlist.m3u8'\nEXTM3U\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=128000,CODECS=\"mp4a.40.2\"\nhttp://hls.02.ep.emgsound.ru/11/128/playlist.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=64000,CODECS=\"mp4a.40.2\"\nhttp://hls.02.ep.emgsound.ru/11/64/playlist.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=32000,CODECS=\"mp4a.40.2\"\nhttp://hls.02.ep.emgsound.ru/11/32/playlist.m3u8\n```\n```\ncurl 'http://hls.02.ep.emgsound.ru/11/128/playlist.m3u8'\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-TARGETDURATION:3\n```\nThe lower bitrate playlists are ok:\n```\ncurl 'http://hls.02.ep.emgsound.ru/11/64/playlist.m3u8'\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-TARGETDURATION:3\nEXT-X-MEDIA-SEQUENCE:6928\nEXTINF:1.996911,\nout6928.ts\nEXTINF:1.996922,\nout6929.ts\nEXTINF:1.996911,\nout6930.ts\nEXTINF:1.996922,\nout6931.ts\n```\nClappr preconfigures both hls.js and FlasHLS to autoselect the starting level. I believe the default is to use the first level listed on the master playlist. Since the first level playlist is empty, an error occurs and it's returned to Clappr as unrecoverable. That's why the player bails out. Perhaps there should be a default error screen to avoid staying in this broken state.\nYou can change this behavior by setting it to start from lowest level, using startFromLevel: 0 for FlasHLS. Our hls.js implementation is missing this setting, but I'll add an enhancement issue to implement this for our next release.\nAnyway, I think you should check why your highe\n. @waster perhaps you should only call play when the player is ready (listening to the PLAYER_READY event) or enabling autoPlay:\n``` javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  height: 360,\n  width: 640,\n  audioOnly: true,\n  autoPlay: true, // this will enable autoplay for all playbacks\n  flushLiveURLCache: true,\n  hlsjsConfig: {\n    xhrSetup: function(xhr, url) {\n      xhr.withCredentials = true;\n    }\n    },\n  playbackConfig: {\n    crossorigin: 'use-credentials'\n  }\n});\nplayer.attachTo(playerElement);\nplayer.stop();\nplayer.load({source: 'http://hls.01.radio7.emgsound.ru/13/128/playlist.m3u8', mimeType: 'application/x-mpegURL'});\n```\nI tested this on a Windows 10 machine using either Edge and IE 11. This solution should work for both hls.js and FlasHLS playbacks.\n. @waster there's no problem with calling load() and play() on click events. The problem is that load() is an asynchronous operation, and if autoPlay is not set, calling play will only work when the player is ready. This event actually means that the playback was already configured and is ready to receive commands, like play.\nIf you are reusing the player, you have to be aware of this behavior. The snippet you posted is ok, but you should be aware that if you call load, the play click handler will only work when the player is ready.\nUsually on Clappr the load times are very quick, lower than 100 ms, so you shouldn't worry about that, because it's unlikely that the user clicks the play button within this interval. Obviously this interval depends on how long the player will take to load its components and download other files like swf modules, etc. Just be aware of that when enabling/disabling the click handler and you should be ok.\nA safer approach to your setup would be something like that:\njavascript\nvar player = new Clappr.Player({\n  // ...\n  events: {\n    onReady: setupClickEvents\n  }\n});\nvar setupClickEvents = function() {\n  $('td.controls button.play').click(function(event) {\n    var playback = player.core.getCurrentPlayback()\n    if (playback.isReady) {\n      player.play()\n    } else {\n      playback.once(Clappr.Events.PLAYBACK_READY, function() {player.play() })\n    }\n  });\n// ...\n}\nThis way whenever an interaction occurs, it will either call play() immediately (if the player is ready) or wait for the playback to become ready.\nWe are reviewing the player states to be clearer regarding to how the player works when its methods are called.\n. @waster the way you implemented on the test page is right, but if you are always calling load() when the user clicks on the play button, why don't you embed the player with autoPlay set to true? There's no need to handle state this way, and the player would work as you expect.\nAbout the onReady event, it seems you found a bug there. I'll check this out, thanks!\n. @waster technically it should work, since the call to load/play is being done inside an user interaction handler.\nWe are working on a way to minimize this issue, requiring only the first play to be called from within an interaction event handler. \n. @waster @nesale this error #1009 is triggered from Flash itself. This error code is related to neither Clappr nor FlasHLS. This only means that there's a null reference error occurring within FlasHLS, but I can't reproduce it on any of my test systems.\nWhat Windows version are you using? Have you checked if Flash is up to date on your test setup?\n. @waster I had no progress with this error yet. I could reproduce the error using a virtual machine from Microsoft with this version of IE on Win7. I still couldn't determine why sometimes the playback report as ready, while the javascript bridge to FlasHLS is absent.\nI'm still trying to come with a workaround for IE11, but with no success yet.\n. @tjenkinson not really, we already use bourbon. We should use bourbon mixins, as we are already using on other plugins. This was only an oversight.\n@michaelcunningham19 could you please update the PR using proper bourbon mixins instead of expanding the prefixes? \n. Thanks, @michaelcunningham19! \ud83c\udf7b \n. Thanks @tjenkinson! :beers:\n. @leandromoreira you are right. The LOADED_METADATA event should have the same meaning as the loadedmetadata HTML5 video event. There are other events that hls.js triggers that could be translated to HLS playback events. Currently, we only trigger events that have immediate UI/metrics representation, but I have no problems with adding more events that could be useful for plugins or player implementations.. Closing this issue, webworkify is no longer a direct dependency.\n. Hi @thalleshmm, I would recommend you to do something like we do on some control plugins like clappr-chromecast-plugin. Just create a UICorePlugin with a click listener bound directly on its properties:\njavascript\nclass MyPlugin extends UICorePlugin {\n  //...\n  get events() {\n    return {\n      click: 'click'\n    }\n  }\n  function click() {\n    // ... handle it here\n  }\n}\nThe listeners registered in the events property are automatically bound to the plugin instance, so you don't have to worry about binding references.\nPlease let me know if this works for you.\n. @thalleshmm you can do the same without ES2015. The attribute notation is from ES5 standard. The code would look like this:\njavascript\nClappr.CorePlugin.extend({\n  get events() {\n    return { click: 'click' }\n  },\n  click: function() {\n    alert('yay, you clicked!')\n  }\n})\n. Great job, thanks @tjenkinson!\n. @tjenkinson could you update this PR to solve conflicts?\n. Thanks @tjenkinson! \ud83d\udc4d \n. @sabarasaba you can just disable the 'click_to_pause' plugin:\njavascript\nplayer.getPlugin('click_to_pause').disable()\nWe are working on a new version of Clappr in which you can customize the list of plugins that will be loaded by default, including the built-in plugins.\n. @leandromoreira seems ok to me. It actually seems to be reminiscent of our previous browserify configuration, before we changed to webpack.\n. @moret the default iOS play button only appears if the video tag is set to display controls. You'll see the behavior you expect if you run your test using the playback parameters:\njavascript\nnew Clappr.Player({\n  //...\n  playback: { controls: true }\n});\nI'm not sure it should appear when the HTML5 controls option is not set. The way it's working right now is consistent with the embed parameters.\nThis will probably get better when we implement a touch interface for Clappr, like the one that's implemented on the native iOS version.\n. @moret I don't know of any other player UI with a dedicated touch interface. The only one that comes to mind is YouTube's. Usually the player UIs are only upscaled a little bit to allow for touch interaction.\nWe actually have some work in progress with our dedicated touch interface, but there are some architecture limitations that should be worked on before finishing it, mostly to reduce the media control complexity and overall script size.\nAbout the behavior, you're right, the behavior/interaction should be consistent with touch, and the current controls aren't. Perhaps we should change the HTML5 video playback to disable the media control for now (only on iPhone) and only display the controls for other devices. What do you think?\n. Thanks @bikegriffith! \ud83c\udf7b \n. @tjenkinson I was able to reproduce this behavior, but it seems to be a bug in iOS native player.  I'm not sure why the native controls don't disappear, since the video tag itself doesn't have any controls enabled. I'll look into this to prevent both native controls and clappr mediacontrol to show simultaneously.\n@kslimani indeed, the autohide behavior is not working when playback resumes, as it should. Thanks for the idea.\n. Thanks @tjenkinson! :beers:\n. @leandromoreira @rgroothuis The problem here is actually the event handler calling play. You are calling play directly on the event handler call chain stack, and it could lead to it being in an inconsistent state when the play method is called.\nIt would be safer to call it immediatelly after the event handler call chain finishes, calling play in an asynchronous fashion. The simplest way would be calling process.nextTick (if you are using a shim), setTimeout(..., 0) (calling the handler with a zero timeout would actually postpone it to after the current call stack resolves and the current thread is free for doing asynchronous work).\nThe change would be small, something like this:\njavascript\nvar player = new Clappr.Player({\n  source: 'http://x.x.x.x/hdmistream01.m3u8',\n  width: 320,\n  height: 180,\n  autoPlay: true,\n  actualLiveTime: true,   \n  parentId: '#player4',\n  events: {\n    onStop: () => { console.warn('onStop called'); setTimeout(() => player.play(), 0) }\n  }\n});\n. @GuilhermeMedeiros actually no. If you check HLS.JS playback, there's a check to disable it for Safari. \nI can't remember the details, but the playback misbehaved when playing live streams with DVR. Safari HTML5 tag implementation misbehaves as well, so I wouldn't recommend to use DVR with it.\nYou can test this by yourself, by removing the Safari check in HLS.canPlay() implementation.\n. @intelezsol you can't force using hls.js for Safari on iOS, since it doesn't support Media Source Extensions. Thus it's not able to load hls.js.\nClappr already attempts to use hls.js over the native HTML5 video playback. You can check this here.. Indeed, @leandromoreira. It's already implemented in the load code as well.\nInstead of calling\njavascript\nplayer.load([source1, source2, source3], 'some-mime-type', true);\nThe parameters should be passed like this:\njavascript\nplayer.load([\n    {source: source1, mimeType: 'mime-type-1'},\n    {source: source1, mimeType: 'mime-type-1'},\n    {source: source1, mimeType: 'mime-type-1'}\n  ],\n  null,\n  true);\nEdit: we don't want to introduce breaking changes right now, because we're working in a new 0.3.x update with a cleaner code base before moving forward to 1.0 where some breaking changes will be added.. @NicholasAsimov that's a good idea. In fact there could be some other options, such as a pattern or gradient instead of a solid color. What do you think?. @NicholasAsimov fine by me. Just give it a shot and send a PR, we can discuss and refine the implementation from there.. There are different reasons depending on what is being used to play a video. For example, if the video tag is being used for playback (playing an HLS stream on Safari, or an MP4 video with progressive download), the player has only the HTMLVideoElement interface to provide controls, so there are no default way to tweak buffering. In this case, the buffer size is entirely controlled by the Browser.\nFor all other browsers, playing an HLS stream requires using either FlasHLS or hls.js. Both allow tweaking buffer sizes, using the playback embed option. All settings passed through this option are forwarded to the underlying playback engine, so you can tweak these at will.. About the documentation, there seems to be an error. The default behavior changed when the default HLS playback was changed from FlasHLS to hls.js. The 10-minute default seems to be the default buffer length for hls.js, and the default FlasHLS length is 2 minutes, with a back buffer of 30 seconds.. Just noticed this has been implemented on #1334 with a simpler solution. There's no need for merging this PR.\nClosing for now, but if something else comes up we can revisit this solution.. @thiagopnts @pqray talvez seja melhor usar\ncss\nvideo {\n    object-fit: cover;\n}\nDessa forma n\u00e3o h\u00e1 distor\u00e7\u00e3o da imagem devido \u00e0 mudan\u00e7a de aspecto.. @pqray gostaria apenas de te pedir para abrir issues em ingl\u00eas, se poss\u00edvel. Temos usu\u00e1rios de v\u00e1rios lugares do mundo, ent\u00e3o o ideal seria que todos pudessem entender os problemas e como solucion\u00e1-los.\nPosso editar essa issue para traduzi-la para o ingl\u00eas?\n\nTranslating: I'd like to ask you to open issues in english whenever possible. We have users from all over the world, so it would be better if everyone can understand the issues and how to fix them.\nMay I edit this issue to translate it to english? . Webpack version updated manually. Closing this PR.. webpack-dev-server version updated manually. Closing this PR.. webpack-dev-server version updated manually. Closing this PR.. webpack-dev-server version updated manually. Closing this PR.. webpack-dev-server version updated manually. Closing this PR.. Indeed, there's no compiled version for these plugins. I'll create an issue on these projects to release them allowing to use directly on the browser.. @oyjcmyn Clappr does not support having multiple playback instances in a single container like @kslimani replied.\nYou could use the Clappr sequence plugin. It's a simple plugin that converts multiple sources to a sequence of video elements that are played in order.\nThis way you could just write:\nnew Clappr.Player({\n  sources: [\"1.mp4\", \"2.mp4\", \"3.mp4\"]\n  // ...\n})\nEdit: I'll release the final version with documentation next week, for both sequence and playlist plugins.. @kslimani this attribute x-webkit-playsinline is the precursor for the playsinline attribute. It was documented in the official Safari/webkit docs, but the docs have been updated since then. That's why you can't find documentation on this anymore.. @kslimani sorry, I've been away for a while. Merging now.. I think that's a good idea, thanks @kslimani!. webpack-dev-server version updated manually. Closing this PR.. Thanks @kslimani! :beers:. Webpack version updated manually. Closing this PR.. Webpack version updated manually. Closing this PR.. Webpack version updated manually. Closing this PR.. @mortegai you can set some custom headers if you're using HLS. If you are using MP4 files directly, since we use the native HTML5 video tag, you won't be able to do this.\nCould you please give some more details?. Webpack version updated manually. Closing this PR.. Thanks @ogunkarakus! \ud83c\udf7b . Thanks @kslimani! \ud83c\udf7b . Nice catch, @vagnervjs!. @kslimani is this actually an issue? Technically, the Chrome browser on iOS is just a wrapper around the WKWebView component, which actually behaves as a Safari, since it uses the Safari stack.\nWhy do you need to recognize Chrome for iOS specifically? Is there some player code which actually depends on this?. @kslimani indeed, you're correct. This should enable some plugins to be enabled specifically for Chrome on iOS. Actually, I wasn't aware that the Chromecast plugin works on Chrome for iOS. Thanks for pointing this out.. Thanks @kslimani!. The hls.js version used on Clappr was outdated, updating to 0.7.5 solved this issue.. The HTML5 video playback currently does not support DVR, and since we didn't find any other issue with using hls.js on Safari, it's now enabled by default.. @kslimani sure, we'll update the bump script to work with yarn.lock when we release the next version. I think we'll do it by tomorrow.. Webpack version updated manually. Closing this PR.. Webpack version updated manually. Closing this PR.. Thanks @itsjamie ! :beers:\n. Thanks @kslimani. Thanks @kslimani!. Thanks @kslimani !. That's really weird, it shouldn't be marked as stale since you bumped the issue. I'll try to check why this happened.. Thanks, @kslimani! \ud83c\udf7b . Thanks, @kslimani! \ud83c\udf7b . Thanks, @kslimani! \ud83c\udf7b . Thanks @kslimani! \ud83c\udf7b . :beers:. Thanks @lucasrodcosta! \ud83c\udf7b . @leandromoreira @kslimani I believe we can create a polyfills module that could be imported by utils.js. In this module, we could just add the polyfills as needed, and it would be executed right when Clappr script is processed.. Great job, @kslimani! \ud83c\udf7b . We're working on a change in the internal player structure to prevent destroying the playback in most cases. \nActually, we already have done this partially in our chromecast implementation, and we\u2019ll probably port this back into Clappr this week. We just need to ensure the new behavior won\u2019t break anything.. Thanks, @argoilves !. @kslimani actually, the commit didn't change the asset path, just added a new parameter.\nI just found out the cause, the swf path is being defined before setting this._baseUrl.\n. It seems like there are some more users trying to use this issue to share access to content they don't own. Since there's no point in keeping this conversation open, I locked the issue.. Strangely, I can't reproduce the problem in the Clappr demo page:\nhttp://clappr.io/demo/?src=http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8&t=120.\nI couldn't access your demo, @perohu, the video is failing to load.\n@kslimani what kind of bug you've found?. Hi @chrisprog20, this seems to be a nice feature for the poster plugin. Thanks for the idea.\nMy only concern is that in order to show the frame corresponding to the second of the video, the player should make some requests to access the video metadata and then render it to a image. This could be costly for processing, and perhaps shouldn't be used for production environments. But I think it could be useful for a publishing environment.\nAre you planning to implement that on the Poster plugin? Have you had any ideas on how to enable this for the end user?. @chrisprog20 I agree with @kslimani about having a server side solution. This seems to be an ideal solution.\nBut I still like the idea of having a plugin for extracting some video thumbs on the client side, but only for publishing environments, where an editor wouldn't need to upload the video to choose a poster image. As I said, this shouldn't be used for production/delivery environments, but it would still be useful as a tool for publishing.. This seems to be working for me as well.. Great job, thanks, @kslimani!. Now the bump script purges automatically after npm publish: a1134bc8e97154fc427aded27c8555b1575da898. We should have no further cache issues after a new release.. \ud83c\udf7b . Indeed, you're right @stanogurnik. Thanks!. @tchakabam indeed, there's a typo in the documentation. The mute option has always been the right one. This should get fixed as well.. @tchakabam you're right. Actually, the playback should be responsible for these kind of operation and semantic.\nAbout the mute/unmute operations, this should be called from the public Player interface. There are mute/unmute operations there, but as you pointed out, they're not calling their respective playback methods, but instead, they're changing volume to/from 0 using the MediaControl.\nAbout the MediaControl being disabled/overridden, you're also correct. It shouldn't be responsible for those operations, only for translating the user interface interactions to playback operations. This will be changed soon, since the MediaControl will no longer be a special component, but instead it will be a UICorePlugin.. Thanks, guys! \ud83c\udf7b . Thanks @bent0b0x, nice catch!\n@leandromoreira you're right. I think we'll have this soon, since I'm back to working on this project, at least part-time.. @tchakabam it makes sense to add source maps to releases. I thought we were generating it, but we're not. . @tchakabam that's a good idea, can you add this?. Sorry for taking so long. Thanks @tchakabam!. Thanks, @tchakabam. This was a great addition to our project and I think it will help us to have much nicer code in the future.. Thanks @me-vlad!. @hijuuijj what kind of issue are you having with the FlasHLS playback? Can we have more details on this?\nActually, you shouldn't need to use FlasHLS on Microsoft Edge, since the HLS playback works on Edge.. Great idea, @flavioribeiro! . @drlukacs @kslimani there seems to be an error in the webpack config. The url for the .ttf is not considering the baseUrl correctly. I'll check this out.. @drlukacs I'm just testing the fix. I'm hoping to release it later today.. cc7b56b053b3d43e24729820c9ce484239934e51 fixes this issue. I'll release a new version soon.. @drlukacs yes, I'm preparing a release right now.. @leandromoreira @kafeltz we changed the player CSS to not be nested in the player elements, but instead condensed into a single <style> tag.\nPerhaps there's something missing in the spinner style. I'll check it.. It's not implemented yet, but we're already working on a solution for this.\nInitially, we'll prevent autoplay from working when it's blocked by a browser policy, to prevent having inconsistencies on the UI state. Afterwards, we'll add some feedback (probably through an event) to allow the caller to take action.. @eeggenberger the autoplay handling has been delayed, but I believe it will be released this week.. @rmueller actually, I asked @joaopaulovieira to work on this one. The previous prototype we had was unreliable, so we're reworking the solution. I'll check with him and give you a status update.. @tchakabam I agree with you. There should be a common interface for that. The real problem is to add some breaking changes without planning in advance for a smooth transition.\nInstead of doing that, I prefer adding some warning about the deprecation of the \"older\" API (although it's not documented), just to allow users to refrain from updating to a newer version, but with the possibility of breaking their player instance.. Another thing I'd like to keep is that the playback-specific options which are not specified in the PlaybackConfig interface should be passed directly to the underlying playback implementation, for example hls.js and Shaka.. @tchakabam I think we can move on with the AdaptivePlayback interface. Let's just keep the deprecated parameters/properties/methods in the documentation, and proceed with the changes in the existing playbacks without breaking anything.\nI agree with you, we can evolve these interfaces later, with the benefit of having a documented common interface.. @tchakabam I agree, I think we should move forward on this. I'll merge this now.. That's great, @tchakabam. Thanks!. This seems to be a good idea, some environments could benefit having the source maps inline. I agree it doesn't need to be added to the dist folder.\nThanks, @tchakabam!. I'll merge this and fix the lint errors right away since I need to release another version. The last one was broken, due to missing files in the dist folder. Thanks, @tchakabam!. @RvLDSDM can you provide a sample URL so we can test this issue?\nEdit: Found out the issue, will release a fix ASAP.\n  . 5eea6f6 should fix this issue. There was a problem in the playback priority on both 0.2.81 and 0.2.82. I'll deprecate those versions on NPM and release a new one with the fix.\nThanks for reporting @zijian85, @RvLDSDM and @ConnorLinfoot.. @zijian85 if you use 0.2.83 you won't have this issue anymore.. @hijuuijj I need to check why the current jsdelivr is still referencing an invalid version. The second link is using an older URL format. Both are maintained by jsdelivr itself, but I believe the second one uses our latest github tag, where the newer one uses NPM.. @MartinKolarik actually, the first one is version 0.2.82, which has a bug and was deprecated on NPM. The latest version is still not updated to 0.2.83 on jsdelivr.. @MartinKolarik yes, it was fixed yesterday.. Great! Thank you very much, @MartinKolarik!. Now the bump script purges automatically after npm publish: a1134bc8e97154fc427aded27c8555b1575da898. We should have no further cache issues after a new release.. @sainrew there seems to be a missing selector over there. Those rules usually are applied to player children, so it shouldn't have such conflicts.\nWe need to check those rules and add selectors accordingly.. @chriswiggins I believe you'll need a playback proxy, or at least a plugin that manages the playback change handling.\nSince the states you need to manage are only related to the playback, I think using a playback proxy will work better for you. Basically, you need to implement the Playback interface, implementing the correct canPlay checks you want. This implementation will have instances both hls.js and fmp4 playbacks as properties, and would set either one as active depending on the sliding window state. You just need to forward the events and methods from/to the active playback instance and I think that should do it.\nLet me know if this works for you or if you have any questions.. @chriswiggins glad to know it worked. Please let me know if you need further assistance.. @wahajdar Thanks, this is a great addition. The ready event should be reliable to allow code to run as soon as the playback can accept any calls. Otherwise, we could end with a number of issues or messy code handling different types of playbacks.\nAbout the code coverage, don't worry for now. @joaopaulovieira is working on a test framework change we want to do so just not breaking the current tests is ok.\nI'm working on an FSM implementation for the base playback, in order to allow all the playbacks to share the same state semantic. Basically, the playbacks will all implement the state machine described here. @mufin695 are you still using 0.2.25 or was it a typo? This version is a little over 2 years old.\nI tested the latest version using an iPad Pro 12.9 1st gen on http://clappr.io/demo/ and it worked normally. I used the stream from https://video-dev.github.io/streams/x36xhzz/x36xhzz.m3u8 for my test.. @Netherdrake when loading the player in an iframe, you need to remove the iframe borders, as well as the inner document body padding and/or margin. That's why you have some iframe padding, or sometimes it presents scrollbars.\nThe default stylesheet for body has usually a default padding/margin value, so you need to reset it if you want the player to show edge-to-edge.\nHave you tried @flavioribeiro's solution? I think it's still working.. @kslimani I agree with you. We intend to review the plugin loading to introduce dependency management and asynchronous loading. Another feature we want to add is version checking, to allow a plugin to depend on a given Clappr  version and/or other plugins versions.. Thanks @kslimani! \nThe playback was changed to use the correct event in b37b7cee, released on version 0.2.90.. @hijuuijj it's not supported right now. Actually, this is not an hls.js feature, but a side effect of dragging the native player seek bar causing a seek event. \nSince the playback doesn't resume while the scrubber is being dragged, the result is that the video actually stays paused and due to the seek events, it displays some \"preview\" frames during the drag.\nThis could be done by extending the MediaControl and change it to add this behavior, but it's not a feature we support right away.. We're still facing some performance issues with Webpack 4. This PR shouldn't be merged for now, until we figure out why builds are running so slow.. @Kolunchik currently, there's no option to disable adding the Roboto font, but it loads using an URL formed using the baseUrl parameter. \nIf you're not using any Flash-based playback, you could add the baseUrl parameter to change from where the assets will load. If you're using any Flack-based playback, you'll need to serve the .swf files from the URL where you've changed the baseUrl  to.. @PostMalone could you fix your code input as well? We can't actually read it since it's not escaped properly and GitHub is formatting it weirdly. For multi-line inputs, you need to escape it with ``` instead of a single one.\nYour exception description is also not well formatted. Could you do the same to it as well?\nFrom what I can see, the problem seems to be the Clappr  global not being defined when instantiating the plugins. The LevelSelector, Chromecast and VastAds plugins are all getting the same exception.\nEdit: There also seems to be an ad/tracking blocker interfering with the tag manager. I think you should disable it or at least add an exception when testing.. @PostMalone from what I've seen, the problem is the order of your script includes. The Clappr script should be loaded before the plugins (since all plugins depend on the Clappr global being loaded).\nYou're loading the scripts like this:\n<head>\n <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/clappr.level-selector/latest/level-selector.min.js\"></script>\n <script src=\"https://cdn.jsdelivr.net/clappr.chromecast-plugin/latest/clappr-chromecast-plugin.js\"></script>\n <script type=\"text/javascript\" src=\"http://f1livegp.stream/vast/vast-ads.js\"></script>\n <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/clappr/latest/clappr.min.js\"></script>\n </head>\nThe right order would be something like this:\n<head>\n <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/clappr/latest/clappr.min.js\"></script>\n <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/clappr.level-selector/latest/level-selector.min.js\"></script>\n <script src=\"https://cdn.jsdelivr.net/clappr.chromecast-plugin/latest/clappr-chromecast-plugin.js\"></script>\n <script type=\"text/javascript\" src=\"http://f1livegp.stream/vast/vast-ads.js\"></script>\n </head>. @PostMalone I've edited your comments to fix the code/log formatting.. @PostMalone this error still has nothing to do with the player itself. The error occurs before instantiating it. The VastAds global is undefined.\nYou should always wait for all globals to be loaded before trying to instantiate the player. Instead of calling new Clappr.Player(...) right away, you should wait for the document to be fully loaded before calling.. @PostMalone just change your player call to window.onload. Since you're loading everything synchronously, I believe it would work.\n<script>\nwindow.onload = function() {\n  var playerElement = document.getElementById(\"ppp\");\n  var player = new Clappr.Player({\n    source: 'http://103.252.220.40:8081/live/live/playlist.m3u8',\n    height: \"100%\",\n    width: \"100%\",\n    mediacontrol: {seekbar: \"#00A2DE\", buttons: \"#00A2DE\"},\n    parentId: \"#ppp\",\n    mimeType: \"application/x-mpegURL\",\n    autoPlay: false,\n    plugins: {\n      'core': [VastAds, LevelSelector, ChromecastPlugin]\n    },\n    VastAdsConfig: {\n      AdXMLUrl: 'https://www.vidcpm.com/watch.xml?key=5066a2f1eb6ed8e63acf7a0aaa95909a&custom=%7B%27width%27%3A%27'+$(window).width()+'%27%2C%27height%27%3A%27'+$(window).height()+'%27%7D&cb=3&vastref=f1livegp.stream'\n    }\n  });\n};\n</script>. @PostMalone ok then, feel free to try again whenever you feel like it. As I told you, it's not actually related to Clappr, it's  related to the order of loading the global symbols on the page.\nSince I cannot assure you that the VAST plugin works (I've never used it), I won't be able to assist you other than trying to help you with the plugin loading sequence.\nI'll close the issue for now. Feel free to re-open it or comment if you keep trying and find any further issues.. @MarlonEtiene sorry I didn't pick up your issue. Are you still having this issue playing your content?\nIf so, how can I reproduce? Are you trying to load a base-64 encoded video as a string on the source parameter? Is that correct? If not, how are you trying to load the base-64 encoded video then?. @khalilleo could you please share the URL you were using for testing? The error code 3 is a decode error, which means your browser can't decode the video (https://developer.mozilla.org/en-US/docs/Web/API/MediaError). \nHave you tested the player with the default video in the demo page?. @zijian85 @kslimani I was working with on a better way to detect and handle automatically the browser autoplay policy in a way similar to how the globo.com player handles it. Unfortunately the solution has some shortcomings, and I couldn\u2019t release it earlier.\nI discussed this with some people at Google and they had some suggestions that I\u2019ll try. I\u2019ll run some test this weekend and if everything goes well it\u2019ll be added to the next release of clappr until Monday.. The autoplay policy handling written by @kslimani has already been merged and released on 0.2.97. It should fix this behavior, or at least prevent state inconsistencies.\nI'll close this issue for now. If you need any further assistance, please reopen.. Hi @bent0b0x, what's the actual use you have for separating the event constants into a distributed module? Are you using the NPM Clappr package only for the constants and then using a hosted version of Clappr itself?\nI'm asking this because you don't need to have a  separate entry point just to expose the constants. You could, for example, add a resolve configuration to load the Events module from source, instead of a build on in the dist folder.. @bent0b0x indeed, delaying the definition of event handlers would work.\nWhat kind of events are you trying to listen? The Player object has already some defined events for binding via options:\nvar player = new Clappr.Player({\n  //...\n  events: {\n    onPause: ...,\n    onPlay: ...\n  },\n  //...\n})\nHave you tried using those already?\nAbout having the player events constants loading asynchronously, it seems like a good idea. I'm not so sure about having a separate bundle for those constants. Perhaps there's a better option to expose them without actually having to load Clappr.\nAbout reorganizing source code, we actually consider changing any public module path a breaking change. Importing from source would not be an issue in this case.. @kslimani I think we should merge this PR anyway, and perhaps add an option to disable this behavior. It won't interfere with what we'll implement on 0.3.x, and people will benefit from it.. @Ali-Talib-jabar you can switch the icons by listening to the play/pause/stop/ended events:\njs\nvar showPlayIcon = function() { ... }\nvar showStopIcon = function() { ... }\nvar player = new Clappr.Player({\n  //...\n  events: {\n    onPlay: showStopIcon,\n    onStop: showPlayIcon,\n    onEnded: showPlayIcon\n  }\n})\nYou can use the on method to listen to these events as well:\njs\nplayer.on(Clappr.Events.PLAYER_STOP, showPlayIcon)\nplayer.on(Clappr.Events.PLAYER_ENDED, showPlayIcon)\nplayer.on(Clappr.Events.PLAYER_PLAY, showStopIcon). @Lethea I agree with @kslimani. We did not change the classes to avoid some breaking changes, but since we'll have some big changes on the plugin and UI inner working, we'll also change the CSS classes to avoid conflicts. . @dinhkhaihtc you can embed multiple instances of the player with the playInline option (as @kslimani replied), but keep in mind that at least on iOS you cannot have multiple streams running simultaneously.. Fixed code formatting in the previous comment.. @freeyland could not reproduce the issue running your code on http://clappr.io/demo (using Clappr 0.2.96). Apparently, it has already been fixed, since you had the issue with a much older version (0.2.25).\nI'll close the issue for now, but if you have the same issue with the latest Clappr version, please reopen.. Hi @freeyland, I'll reopen it, but can you confirm what's happening and how to reproduce? I ran the following code on http://clappr.io/demo (there are some slight changes from your base code to change the width/height of the player and reduce the time to test):\n```javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar url = 'http://192.168.101.15:8080/hls/tria_cam4.m3u8';\nvar r = 3;\nvar player = new Clappr.Player({\n  // source: 'http://clappr.io/highline.mp4',\n  source: url,\n  disableErrorScreen: true, // Disable the internal error screen plugin\n  height: 360,\n  width: 640,\n  events: {\n    onError: function(e) {\n      r--;\n      var s = (r > 1) ? player.options.source : 'http://clappr.io/highline.mp4';\n      var t = 5;\n      var retry = function() {\n        if (t === 0) {\n          var o = player.options;\n          o.source = s;\n          player.configure(o);\n          return;\n        }\n        Clappr.$('#retryCounter').text(t);\n        t--;\n        setTimeout(retry, 1000);\n      };\n  player.configure({\n    autoPlay: true,\n    source: 'playback.error',\n    playbackNotSupportedMessage: ' Retrying in <span id=\"retryCounter\"></span> seconds ...'\n\n  });\n    retry();\n}\n\n}\n});\nplayer.attachTo(playerElement);\n``\nThis results in having the player attempt to reachtria_cam4.m3u8twice, and then fall back into the defaulthighline.mp4` we use for testing. Notice that there are only two requests to the failing stream, and after changing the source, no more requests are made to its URL.. @ewwink we're working on an architecture revision of the player, and we were reserving the next version numbers to follow these revisions.\nSince we are a little shorthanded, this revision is taking a little bit of time, but I think we'll have 2 to 3 minor revisions until we promote it to 1.0. After that, we'll follow the major/minor/patch version numbering as we should.. @leandromoreira You're right. External plugins are always prioritized in relation to built-in plugins.\nThe plugin Loaderalways uses the property name as the key to a plugin. So, in order to override an internal plugin, you just need to use your own custom plugin with the same name as the internal plugin, as @kslimani answered.\nIf you just want to disable a given plugin instead of overriding it, you just need to call disable on the plugin instance.. The behavior was always like this, since we didn't think creating a player instance with no sources was necessary. It wouldn't harm to have the player created with no containers (since there's no source configured), as @jhonatangomes mentioned. We already talked about this and will have it implemented.. @kslimani is right, there is a limitation on iOS Safari (and derived browsers). The fullscreen API is not supported, so what happens is that the video tag itself goes to fullscreen, without the Core instance receiving an event for that transition.\nI'll investigate better if we can add a way to detect this transition and trigger the fullscreen event properly, but it still wouldn't be under the player control.. @amiznikov the problem is not related to DOM events, but Clappr events. The way fullscreen is implemented is related to the fullscreen API, not the HTMLVideoElement fullscreen feature. Since the event occurs in a different component, we need to wire things out so that the video element fullscreen event triggers a Clappr fullscreen event.. @ranst91 you can disable the spinner plugin:\njavascript\nvar player = new Clappr.Player({ ... });\n// after attach\nplayer.getPlugin('spinner').disable();. @cviewsupport this is actually a JavaScript scope problem. You can't pass a method reference (player.pause - this is actually just a function) to be called by setTimeout without binding it to the player instance itself.\nYou need to bind it first, for example using .bind() or an arrow function:\nsetTimeout(player.pause.bind(player), 4000);\nor \nsetTimeout(() => player.pause(), 4000);. @cviewsupport you can do it anywhere. There's no limitation, as long as you have access to the player instance wherever you're handling the timeout. This way you can write your timeout script elsewhere.\n. @cviewsupport I'm not sure what you're asking.\nI thought you wanted to have a function somewhere else that could be called by the onPlay event callback, and that would be able to pause or stop the video, like this:\n```javascript\nvar player = new Clappr.Player({\n  events: {\n    onPlay: function() { setTimeout(stopVideoAndShowMessage, 6000); }\n  }\n});\n// ... some more code or HTML tags\nvar stopVideoAndShowMessage = function() {\n  player.stop();\n  // show message that the video timed out\n}\n```\nIf that's not what you asked, please clarify, perhaps with an example.. @cviewsupport I just looked at your previous example, and you could just use your timeOutVideo function:\njavascript\nvar player = new Clappr.Player({\n  events: {\n    onPlay: function() { setTimeout(timeOutVideo, 6000); }\n  }\n});\nIn this function you could just display the message you wanted to.. @cviewsupport no, in this case, the function doesn't need to be bound since we are using the player reference itself. It only needs to be bound when referencing or calling directly a function that belongs to the player instance.. @cviewsupport I just noticed that your player reference is scoped to your ajax success callback function. To be used externally, it should be declared in the same scope as the functions that access it.\nYou could just change the var player declaration to the script tag scope:\n```javascript\nvar server = getParameterByName('server');\nvar uuid = getParameterByName('uuid');\nuuid = uuid.replace(/-/g, \"\");\nvar player\nvar checkUrl = function() {\n  $.ajax({\n    type : \"GET\",\n    url:\"http://\" + server + \"/media/\" + uuid + \"/cview.m3u8\",\n    error: function() {\n      checkUrl();\n    },\n    success: function() {\n      player = new Clappr.Player({\n//...\n``. @sapolio if necessary, in addition to the method that @kslimani commented, you can useCORE_CONTAINERS_CREATED` if you need to listen to all container creation events as well.. @hijuuijj how are you hosting your page? I only managed to reproduce the issue (getting this error \"hls4\" on Chrome, loading a jsfiddle with your code. The error I got on console was that mixed content was blocked. I suspect this is not actually your problem, since you shared a HTTPS URL presenting the issue as well.\nThis error usually occurs when hls.js fails to load a manifest, for some reason. Perhaps the error handling code is aborting too soon? We need to make sure this is the issue, but first we need to reproduce the error correctly.\nCan you share a URL where your code is running? \n. This change was planned to prepare for the next iteration in the player architecture. \nActually, it has been discussed for a while between most of the core team members, and we decided to split it into some phases. This is the first phase of the changes required for our architecture review and the reduction of the player footprint, as well as the project being split into smaller ones.\nIf anyone else wants to review this, we'll leave the PR open until Oct 22. @clappr/core, if anyone there wants to review it, please do. Just don't merge it yet.. @leandromoreira I took the liberty of removing some duplicate commits coming from another PR. The test is still failing, I'm not sure why.\nI'll have a better look at this tomorrow, since I cannot reproduce the failure on either my Mac or Windows machines, so I'll have to run them on Linux and see whether I can find out what's going on.. @sapolio actually this was an inconsistency introduced after a refactor. Previously, there were no underscored variables, since we planned to have everything accessible for customization.\nWe began to change things providing a options getter and an internal _options which could be manipulated separately. The options variable would represent what the component should see as its own domain-related options, where the _options would be a reference to the full set of options as received by the player or component.\nWe plan to keep this separation, and extend it to all components, where it'll have the options getter returning only the set of options related to the component itself.. @sapolio actually, it's not related to Safari 9, but an issue with the media control regarding autoplay.\nIt's been fixed on 0.3.1. Please try again.. @rgaufman it's an interesting feature. Perhaps we could create a plugin to enable this kind of functionality.. @DanielRuf I know what you mean, but I'm opposed to the overhead of testing against ALL of the different LTS versions against the benefit of having those tests run. What I believe is that doing that you're just testing how bundling behaves using those versions, so I'm not actually validating whether the code works, but how the tools perform using a different setup.\nSince we just use node 8.x to integrate and build the player itself, the default CI environment should replicate this. If someone is integrating using another version of node.js, it is their responsibility to run tests using this setup.\nI'm not sure the overhead is worth it.. @DanielRuf I was already running some tests in order to switch to 10. We'll update soon.. @DanielRuf we were considering doing that, yes.. @hijuuijj @hamesjarden we already have a working version of the pip plugin for Chrome. We'll release this version this week. Just setting up the repository and packages.. @hijuuijj @hamesjarden we released the clappr-pip, which supports both OS-based picture-in-picture implementations. It's split into two different plugins, one for actually implementing the PiP and the other one for the media control button.. @hijuuijj we can't do that. Actually, the first url (https://cdn.jsdelivr.net/clappr/latest/clappr.min.js) uses an older format which can't be updated, so it was stuck on version 0.2.66.\nThe latter one is the one which is currently updating. We updated both LevelSelector and Chromecast plugins to work with it. You shouldn't have any issues with it. If you have a look at the links you'll see the plugins working with clappr@latest.. @hijuuijj about the m3u8 failures, do we have an issue for that? Are you referring to #1704?. @hijuuijj it's working with the latest Clappr, you can check it with the demo page. @hijuuijj if it's not working with some servers, there may be some error either with the manifests or with the server response. The older version of Clappr that you mentioned uses an older version of hls.js and perhaps it doesn't enforce strict validation of the response or manifest.\nIf you have a sample that we can analyze, we could attempt to detect the issue and help you fix it, but I'd suggest you to follow these instructions to detect any issues with those failing streams.. @hijuuijj if you want to continue the discussion about his.js and failing streams, let's move it to its own issue. \nIf you just want to use the picture in picture plugin with Clappr 0.2.x, you can use clappr-pip 0.1.0. It should work with 0.2.66, although I haven't tested it with such an old version. I tested with 0.2.100 and it worked correctly. I'd suggest you lock the versions of the other plugins (Chromecast, Level selector) as well, to avoid breaking them on any future changes.. @lorenzosjb there's just a small issue with the parameters you're calling Clappr with. You're using parent instead of parentId to inform the parent element. Actually, the name you used makes more sense, but we initially only supported an element id.. @ryan77627 there seems to be a conflict between Clappr and your query string parameter. Clappr uses the t parameter by default as a starting position (in seconds), or it parses it from the format (([0-9]+h)?([0-9]+m)?[0-9]+s).\nSo having t=9 would always make the player start at 9 seconds into the video.. @ryan77627 there's an option that you can pass to the player for it to ignore the query string parameter, called autoSeekFromUrl. You just need to set it to false, so the player won't use the query string to auto-seek.\nIn your example, it would be:\njavascript\n    var player = new Clappr.Player({\n      source: \"{URL}/index.m3u8\",\n      poster: \"{URL}/poster.jpg\",\n      parentId: \"#player_video\",\n      width: \"100%\",\n      height: \"auto\",\n      autoSeekFromUrl: false\n    });. @mical892524 you can pass options directly to hls.js through the playback options. For example, if you want to add a custom pLoader, just do:\njavascript\nvar player = new Clappr.Player({\n  //...\n  playback: {\n    hlsjsConfig: {\n      pLoader: ...\n    }\n  }\n});. @pdtan the problem with the code you used is that you're searching for an element that hasn't been actually finished rendering. The media control rendering is asynchronous, so you won't be able to immediately after calling render append the element. Using a simple setTimeout to call this.attachButton after 200ms will fix it.\nWe're updating the media control so you won't have to do these operations yourself on your plugin. We expect to have this ready in the coming weeks, but since it's a breaking change, we're doing this slowly. In fact, you'll just declare the list of plugin names you want to show in the media control and if they declare where they'll be rendered in the UI (upper left, lower right, etc.) the media control will position the plugins automatically.. Thanks, @bikegriffith! \ud83c\udf7b . Thanks, @bikegriffith! \ud83c\udf7b . I'm closing this issue as invalid, since it's not directly related to Clappr and asks information regarding bypassing session protection of a given service. . @sapolio the only way to have the current playback level is to use the PLAYBACK_BITRATE event.\nSince you're having issues with it not being accurate when the playback.currentLevel is set manually, I recommend using a mixed approach: use playback.currentLevel and if it's set to -1, use the one from the PLAYBACK_BITRATE event.\n. @hijuuijj thanks for reporting. This appears to be related to Chrome (and Safari) blocking autoPlay with sound.\nThis one won't play (when attempting autoPlay with sound): autoPlay with sound\nThis one will play correctly (starting autoPlay with mute: true): autoPlay without sound\nChrome has some documentation on how it whitelists domains based on its Media Engagement Index (MEI).. The same logic applies to mobile browses as well. The only difference is that most browsers (especially Safari) on mobile devices will always block autoplay with audio.\nWe'll release a \"click to unmute\" plugin to help prevent these kind of issues, while warning the user that the video started autoplaying without sound, and an interaction is necessary to enable audio. If you're not able to wait for it, you can develop it yourself, perhaps based on what youtube does on mobile pages.. Thanks, @lmancel! \ud83c\udf7b . I agree with @leandromoreira. Using mediaControlEnabled seems easier to read, and his suggestion gets rid of the weird !== true comparison for a boolean value, since we would never have an undefined value.\n. @leandromoreira perhaps we should move this to utils. It could be useful for other components.\n. @leandromoreira as we discussed before, we should stick to options.playback for playback-specific options, and options.pluginName for core/container plugin-specific options.\nI don't think we really need to have options separated by playback name, because this way we can use the same option name/value for any playback used for a given source. For example, we could use the same option name for hls.js and FlasHLS playbacks.\n. Why don't you instead of this do:\njavascript\nreturn !!(document.fullscreenEnabled ||\n  document.webkitFullscreenEnabled ||\n  document.mozFullScreenEnabled ||\n  document.msFullscreenEnabled\n)\nI think it reads better, and avoids comparing to false.\n. I prefer using a standards based name, like fullscreenEnabled or isFullscreenEnabled. Why don't we go this way?\n. If none of those properties are available, it means that the fullscreen API is unavailable. It would be incorrect to assume that the player can enter fullscreen in this case.\n. Actually, we had an idea some time ago to maximize the player in the window viewport if the fullscreen API is not available. This way we can support maximizing the player size on some mobile browsers that do not support fullscreen. Perhaps we could create an issue to discuss this idea. What do you think, @tjenkinson?\nIn the meantime, we can avoid having false positives assuming undefined values as unavailable. \n. It's not as simple as that, because it has to fill all available viewport space and display on top of everything in the page. If some other element has an increased z-index, we should render on top of it as well.\n. I was creating an issue so we can discuss that, and found #780. Since this PR solves the issue partially, I'll leave this referenced and create another one so we can approach the full viewport request.\n. I think there's no need to explicitly check if this.options.poster is an object. \nLGTM\n. Agree, instead of using a literal string \"Back to Live\", you should use the value of backToLive.\n. I'd suggest not doing this in ensureElement directly, as it's used by every component/plugin that renders an element. Instead, since it's a feature specific to the playback implementations, I'd move this logic to either the Playback base class or the HTML5 video playback. . Another suggestion I'd like to do is to create a stack of video elements instead of using playerId as a key since we can have more than one video element in a single player (for example, if you have more than one container).. Indeed, @kslimani is right. There's already an event for fullscreen status change.. About the PLAYER_RESIZE event, perhaps we should change the triggerResize event on the core to trigger this event as a core event as well. This way we won't need to rely on the Mediator for events that are internal to the player instance.. This should be called listAvailable. I don't think custom event values should be prefixed with register:. Instead, we could use a camelized version of the event name.\nFor example:\nWILL_CHANGE_SOURCE = 'willChangeSource'\nYou could do something like this:\n\"WILL_CHANGE_SOURCE\".toLowerCase().split('_').map(function(value, index) { return index == 0 ? value : value = (value[0].toUpperCase() + value.slice(1)) }).join('')\nAnother suggestion is to put custom events under a Custom namespace, perhaps something like Events.Custom.WILL_CHANGE_SOURCE. The test description should be the actual behavior the component should present but in present tense.\nSomething like triggers custom event when registered. The same works for the following tests.. does not override an existing event. list all available custom events. not a string. does not register an event when eventName is. an empty string. The custom events namespace should be Custom.. Perhaps this method could be called listAvailableCustomEvents.. @bikegriffith There's a problem with this implementation. Perhaps it should be implemented on the HTML5Video playback itself. There's an option for the playback that tells it to use the default video tag controls (playback.controls), and this code would not follow the configuration correctly.. I'd change this to this._isBuffering, or something like that. When talking about the State suffix, I understand it's something with specific values instead of a simple boolean flag.. $el is valid just after the UIObject constructor is called, so it would be undefined only if some rogue component destroys the element. The parent() call can return undefined if the core element is removed from DOM or destroyed.. I think it's safe to assume that $el is always valid.. @otmjka there seems to be a small problem here. I believe the timezoneOffset shouldn't be added to the actual time, since the local timezone is already considered when creating the date objects, and setting the time to midnight.\nWhen you add this, you actually offsets the time to be displayed as UTC. At least it's what is happening to me, since I'm at UTC-2 and I'm seeing times advanced by 2 hours.. I'd rather keep these methods for now, since there could be some plugin implementations that rely on this. \nPerhaps instead of removing these methods, we could fix them to better reflect the muted/defaultMuted properties of the element.. I agree, we could just have those methods set this.el.muted, and make those methods @deprecated and @private.\nWe're still deciding whether or not to change the Playback API to include the muted state, but with a more concise interface.. We use the \"1tbs\" brace style. \nI recommend changing this to  [\"error\", \"1tbs\", { \"allowSingleLine\": true }]. Let's change this to [\"error\", \"always\"]. We usually add padding to single line object literals.. One of the things we want to avoid is doing this. We should either have the braces in \"1tbs\" style or have a single-line if statement, preferably with no braces.. This is another undesired result. We should either have no braces at all or have braces with padding.. Why don't we use true/false here? This way the if statement would be much simpler:\nif (PLAIN_HTML5_ONLY). Same thing here, we could use true/false.. I think we can hold off a little bit the generic solution and reach a middle ground for now. \nCurrently, we're trying to have a PLAIN_HTML5_ONLY build and the default one, with all plugins. So, we just need to enable the PLAIN_HTML5_ONLY flag. In the Loader code, I believe it's better to have it as a boolean value since we don't need to have the possible string values of the environment variable there.\nAs for the process.env.CLAPPR_... variable, we could either use true/false for it, having the empty/non-existent/false values to disable it and using whatever else for true, or we can force it to have a yes/no value. I think the first option would be better, since the DefinePlugin allows boolean values, AFAIK.\nThis way, instead of having:\nnew webpack.DefinePlugin({\n  VERSION: JSON.stringify(require('./package.json').version)\n  PLAIN_HTML5_ONLY: JSON.stringify(process.env.CLAPPR_PLAIN_HTML5_ONLY)\n})\nwe could have:\nnew webpack.DefinePlugin({\n  VERSION: JSON.stringify(require('./package.json').version)\n  PLAIN_HTML5_ONLY: !!process.env.CLAPPR_PLAIN_HTML5_ONLY\n}). Just to make things easier, we could also add scripts that set this environment var automatically, like:\n\"scripts\": {\n    \"build\": \"webpack --config webpack.dev.js --progress\",\n    \"build:plainhtml5\": \"CLAPPR_PLAIN_HTML5_ONLY=true webpack --config webpack.dev.js --progress\",\n   ...\n}. @tchakabam I think it's better to use the consistent style, instead of multi-or-nest. This way we prevent using brace-less statements chained to brace blocks, such as if/else.. Is there any reason we can't trim whitespaces on .md files? If not, I'd rather keep trimming on.. Just to remove some annoying tools complaints, I think it's better to add a new line at the end of the file.. I think these could be called MediaOptions. That's something like we're doing in the iOS/Android native versions of Clappr.. About these parameters, I suggest we keep them inside the playback options. We're avoiding the addition of top level parameters to keep the documentation simpler and to add scope to the options themselves.. @tchakabam I think it's the right direction. I'm not sure if we can drop the support immediately, but we can add a deprecation notice, just to have a smoother transition.. @tchakabam actually I was talking about audio/subtitle/etc. But we've already discussed about those options having different interfaces could be beneficial, so nevermind.. I wouldn't recommend using a singleton approach for this component. Since there could be more than a single player in a given context, an error would always propagate to the last instance which called setCore.. Instead of doing that, we could create the error component when the core is instantiated, perhaps in the CoreFactory or in the Core itself.. I agree with removing should. Using the present tense would make the test declarations more descriptive.. Let's try to make it descriptions more like a single sentence. Something like it(\"triggers a FATAL error by default\").. @leandromoreira this \"public\" interface is only for compatibility purposes, in order to not break existing plugins. It will be removed in a later version, so it's already \"deprecated\". The activeContainer is a new interface, create to replace the getCurrentContainer function. This one should be documented.. I think this assignment doesn't make sense anymore since the MediaControl now uses the activeContainer related events. This destroy call doesn't make sense anymore since the MediaControl is a UICorePlugin and the plugins are destroyed in the previous forEach loop.. @leandromoreira this is a convention already in place. If you look at the previous getCurrentContainer implementation, we always assumed that the current container was the first container unless otherwise stated.\nSince the containers are only created when there's at least a single source, it's safe to assume that the first container should be initially the active one. If there is more than one source, it's still valid to assume that, since the media control should refer to a single container to control it. Also, when there's more than one source, we should assume that a plugin would take control over what container is currently active, for example, a picture-in-picture plugin or a grid plugin.. I think we could mark this function as \"deprecated\",  to discourage using it in favor of using activeContainer.. I think we could mark this function as \"deprecated\" as well and create an activePlayback getter.. I agree, there should be a warning message whenever a non-fatal error occurs.. I think we could name this attemptAutoPlay to make its purpose clearer.. I'd just move the super.consent() call to before the load call to prevent the consented state from being inconsistent during event handling.. @afonsocdaniel as we agreeed, let's do this as a separate change.. ",
    "taiarock": "Plug and Player\nJust plug and get a player\n. plimplim +1\n. slogan ideas:\na internal joke became a player\nhauhauahua\n. inspiration:\nhttps://cdn4.iconfinder.com/data/icons/audio-and-video/512/movie_clapboard_cinema_clapper_studio_equipment_flat_icon_symbol-512.png\n. ",
    "tulios": "Liquid, Framer, RainbowMachine\n. ",
    "hltbra": "Prayer\n. ",
    "allisson": "playr\n. ",
    "roberto": "phi, projector, segretto, videotape\n. pipoca +1\nplimplim +1\n. :beers: \n. ",
    "moret": "plimplim\n. throne\n. democratic -1\n. Confirmed, fixed on 0.2.12.\n. Currently the behaviour on vanilla Firefox - which comes without Flash - is already the one @towerz describes.\nNot only that, when using multiple sources on other browsers with Flash enabled the player seems to be playing both sources simultaneously.\nTest source;\nhtml\n<html>\n<head>\n  <script type='text/javascript' src='http://cdn.clappr.io/latest/clappr.min.js'></script>\n</head>\n<body>\n  <div id='player'></div>\n<script>\nvar player = new Clappr.Player({\n  autoPlay: true,\n  loop: true,\n  parentId: '#player',\n  sources: [\n    'http://cdn-fms.rbs.com.br/vod/hls_sample1_manifest.m3u8',\n    'http://clappr.io/highline.mp4'\n  ]\n});\n</script>\n</body>\n</html>\nFirefox:\n\nChrome:\n\n. @towerz thank you!\nI went back to reproduce it. The big play button is not exactly back, instead the desktop UI shows up:\n\n\n\n. @towerz got it!\nAbout what should appear when the HTML5 controls are not set, it seems to me that the HTML5 control behaviour on iOS is the one to be followed, i.e., showing only the big play button when the video is paused on touch or small screens, and the full controls on non-touch or larger screens.\nIn essence, I was looking for the iOS HTML5 controls behaviour but using the player visual. Greedy. 8)\nDo you know of other players UIs that have a dedicated touch interface as reference?\n. Hello @towerz . Sorry for the late reply, I was trying to find my way around the code to better understand the media controls before and during playback. It's clearer now to me why the fullscreen return on the iPhone is an exception, and with the possibility of having it inline even on small screens makes the decision of which control UI to show even more complicated.\nArgh, it's probably the safest way to let the HTML5 controls take place indeed, but it's heartbreaking to let go of the good looking Clappr interface. \u2764\ufe0f  Honestly, I don't like the idea, it seems to me that waiting for the touch media controls is cleaner, and let the developer make his own exceptions with allowUserInteraction and chromeless in the meantime. Does this looks reasonable, or too attached to the pretty buttons? 8)\n. @leandromoreira yes, it still behaves this way on iOS 10 with the player at ccdn.clappr.io.\nAfter hitting done during playback:\n\nAfter hitting done when playback ends:\n\n. ",
    "andrewsmedina": "plimplim +1\n. the clappr license is BSD 3 clause\n. ",
    "dannyeuu": "Plimplim +1\n. ",
    "svanscho": "In the current player I can see that e.g. the ?time= parameter is added to the URL when the flash fallback is used.\nIs there any way to disable this behavior (e.g. through js configuration)?\n. Hi @flavioribeiro, the problem isn't that undefined is creating a bug - the previous code does not produce the desired effect when setting the embed to false.\nThe example below was still sending time queries (url is obviously fake):\nvar player = new Clappr.Player({\nflushLiveURLCache: false, \nsource: \"http://example.com\"\n});\nThanks!\n. Sure. Done!\n. Ok idd. Seems you have fixed it already... Thanks!\n. ",
    "slash851": "@flavioribeiro it can be reproduced here:\nhttp://video.consilium.europa.eu/en/webcast/0174310a-ff8b-4a48-8619-45eb4a66095f\nChrome 48 / win7 64bit\nTo reproduce - play video, change the resolutions couple of time to the low one and higher, at some point you will get that communicate\n. ",
    "chriswiggins": "What about something like an API.md document? To list all the javascript methods that can be called? \n. I'm having the same problems here with an HLS stream that has 1 hour worth of entries in the playlist (but its a moving window)\n. Hi @flavioribeiro, Yes this happens in both Chrome and Firefox\n(If i seek backwards, I get the duration time, but when going back to \"live\" it doesn't go back to saying its live)\n. Your server application should not fail with any additional query strings, it should just ignore them anyway\nSent from my iPhone\nOn 27/02/2015, at 5:54 am, Fl?vio Ribeiro notifications@github.com<mailto:notifications@github.com> wrote:\nhello @irongommehttps://github.com/irongomme, the ?time= parameter is a workaround to fix internal flash cache issues with some combination of Flash Player / IE. If you want to disable it just add flushLiveURLCache: false on your embed parameters. Tell me if it works for you.\n\nReply to this email directly or view it on GitHubhttps://github.com/clappr/clappr/issues/368#issuecomment-76216187.\n. I think what he means is that Safari generally loads the latest .ts file and decodes it, providing a \"thumbnail\" of the video at its current state. Surely there's a way to do this but it might be about playing the HLS player and then pausing it as soon as the first frame is displayed. Otherwise maybe theres an option in Flashls?\n. Hey @towerz , I've already started heavy development on this and initial results are good. Take a look at https://github.com/securogroup/clappr-rtmp-hls and let me know what you think. I'm also making a fair few changes to the RTMP plugin to support changing scaling mode, amongst a few other things so expect a few pull requests against that :-)\nAre you normally available on Gitter? I'm signed in most days so would be keen to chat if you have the time\n. I'm going to close this, and hopefully see you guys over in securogroup/clappr-rtmp-hls :-)\n. Brilliant thanks. If I have any issues modifying it, I'll comment over there.\n. @towerz sorry for the late reply (and thanks stalebot for the reminder!)\nI did exactly as you specified and it seems to work really well. All I need to sort out is my buggy playback underneath the playback proxy \ud83d\udc4d . No, because it is set to 0 on initialisation if it doesn't exist. See line 41. ",
    "davidaurelio": "Hey there, I\u2019d really like to use clappr and maybe contribute to development. Unfortunately, the lack of documentation makes everything beyond instantiating a player really hard and a guessing game.\nPlease invest some time to provide great documentation, that could really provide a kickstart for the project.\n. ",
    "bryfry": "+1\n. ",
    "tarkanlar": "+1\n. I was planning to write a plugin for this. is there any progress on this?\n. Is there any updates on this issue? @chriswiggins \n. I really need to stretch media source. Does anyone have any idea how we can do this?\n. I just saw clappr is moving to hlsjs (https://github.com/clappr/clappr/issues/555) so may be it will be solved there\n. Nope not solved with the hlsjs as well\n. This would be really awesome\n. Hey @thalleshmm , if you do I hope you open source it )\n. ",
    "snsxn": "+1\n. @towerz just trying to add ?.mp3 fails as you said (no query string admitted), but I have the content-type.\nIt's possible to tell it to Clappr?\nI'm checking the streams and 90% doesn't have extension\n. @towerz lots of streamings has IP and port style URLs. Many shoutcast streamings must have (;) at the end to receive the correct content-type and play it. The solution is to add ?.mp3 (the extension received from the HEAD Content-Type)\n. I'll try it:\n1. Load and play http://icecast-streaming.nice264.com/melodiafm?.mp3 (after removing resource.split('?') from clappr)\n2. Then I change source of the player to http://icecast-streaming.nice264.com/europafm?.mp3\n3. Looking at firebug, I can see how the first streaming keeps loading\n- tried with the different methods mentioned before to pause, or stop or destroy and none of these clear the player and cancels any current HTTP request\n. I will implement this new version.Thanks!\n. ",
    "deedos": "+1\n. Really cool! look forward to testing it..\n2014-10-07 12:06 GMT-03:00 Fl\u00e1vio Ribeiro notifications@github.com:\n\n[image: player_dvr]\nhttps://cloud.githubusercontent.com/assets/244265/4544461/750ddf90-4e33-11e4-9847-1507c81b3a3b.jpg\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/152#issuecomment-58199342.\n\n\nDaniel Roviriego\n(21) 35920701\n(21) 99561654\n. That\u015b pretty cool as well http://www.wavesurfer.fm/\n2014-11-06 10:55 GMT-02:00 Fl\u00e1vio Ribeiro notifications@github.com:\n\nhttp://w-labs.at/experiments/audioviz/\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/197#issuecomment-61974622.\n\n\nDaniel Roviriego\n(21) 35920701\n(21) 99561654\n. I 'm  using a 640x360 p\u013aayer and it sticks to the worst quality (500kbps in my case), which is no ideal if user havetons of bandwidth available. It would be very nice if we could choose the behaviour with an embed parameter.\nabra\u00e7os\n. wonderful. owe you a home brew beer\n2014-10-31 15:02 GMT-02:00 Fl\u00e1vio Ribeiro notifications@github.com:\n\nhi @deedos https://github.com/deedos, I've exposed capLevelToStage to\nbe defined on embed params and set it false by default. This feature will\nbe available on next release.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/229#issuecomment-61292922.\n\n\nDaniel Roviriego\n(21) 35920701\n(21) 99561654\n. Hi. great feature! congrats!\nhow to call it ? I tried enableChromecast: true, but nothing happens\nabra\u00e7os\n. Hi..\nSorry, forgot to mention.\nA .m3u8 playlist.\ncheers\n2014-12-09 15:27 GMT-02:00 Fl\u00e1vio Ribeiro notifications@github.com:\n\nhey @deedos can you tell me which source are you trying to play?\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDaniel Roviriego\n(21) 35920701\n(21) 99561654\n. thanks.\nI have already tested here. it worked but the controls are buggy and the\nposter appears and disappears. when i manage to play, the big play button\nkeeps inf front of the video.\nmany thanks\n2014-12-09 15:50 GMT-02:00 Fl\u00e1vio Ribeiro notifications@github.com:\n\nhey @deedos https://github.com/deedos thanks for reporting. I have\nfixed this bug and bumped to 0.0.65 on CDN.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/271#issuecomment-66325527.\n\n\nDaniel Roviriego\n(21) 35920701\n(21) 99561654\n. Maybe is wise re-opening this for logically exposing when using different playback engines like https://github.com/shankardevy/clappr-dash-plugin . Is there anything already done for that ? Overall clappr keeps going so fine..thanks\n. Hi @towerz\nCould you show @Guzz and me an example on how to listen to a play event?\nEm 15/04/2015 14:03, \"guzz\" notifications@github.com escreveu:\n\nHello @towerz https://github.com/towerz, is there any way of listening\nto events with clappr yet?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/clappr/clappr/issues/406#issuecomment-93487536.\n. Hi @flavioribeiro and all. We have been using for some projects at http://aovivonaweb.tv/ mainly for live streaming using hls + dvr. At http://ebc.com.br we are experimenting it for a weekly live streaming (hls + dvr as well) of a radio show  http://radios.ebc.com.br/epoca-de-ouro and last but not least, I have simplistic integrated clappr with https://github.com/kevincennis/Mix.js at http://tvbrasil.ebc.com.br/partituras/remix . Thanks again for the great project\n. \n",
    "irongomme": "+1\n. @flavioribeiro  What do you expect as a \"definitive spinner\" ? \n. i would like too ... \n. After looking to it, it can be easy for swf assets, but how can we do for scss files, because they are compiled ... \nWe have to extract all the lines working with assets from the scss to dynamically generates them into the app from new parameters , is that true ?\n. After some investigations, i think the problem is here : \n- The first request to the m3u8 is good and stream is playing\n- The .ts are requested, so no problem\n- The second request to the m3u8 is called with an additionnal ?time=xxx parameter , probably to avoid caching from the browser, but the streaming server doesn't support this parameter and reject the request by a 400 error (bad request), so the playing stop !\nWhich part of the app is responsible of this parameter time ?\nis there a way to don't put this param at the end of the hls request ?\n. @chriswiggins i'm agree, but it's not mine and it just doesn't ignore query strings  .... \n@flavioribeiro thxs, i'll try it, but how do you modify embed parameters from the javascript params ? Have i to modify clappr source to do it ?\nOtherwise i made a dirty fix from my environment : I've put an nginx conf which proxy pass the final streaming server without query strings .... and it works ! But i'd rather like a clean solution from clappr.\n. @flavioribeiro Cool !\nYou said that this parameter is a fix for flash on IE, does that mean it could not work as expected on it if i put this param to false ?\n. It works with flushLiveURLCache to false\nThxs !\n. A new bug with full screen on iOs : \nIf i have swtiched to fullscreen mode and then if i go back to original size, it doesn't remove the fullscreen css class from the player html tag. This is pretty logic, because iOs uses it's own interface on fullscreen mode, and buttons from this interface doesn't trigger clappr events.\nIn some case, this situation comes with troubles, because fullscreen class set \u00e0 100% height, so if the player is under a parent tag without fixed height, it is just not visible anymore.\nI can fix it, and i will need this issue to be re-opened\n. I've got it : \nIn facts, this happens when we use percents dimensions for the player height\n- The poster plugin listen for resize and apply a font-size equal to the playerInfo height (height defined in the player instanciation)\n- When i set a 100% height, it set a 100% font-size and this is the problem !\nI see in src/plugins/poster/poster.js (l.103) :\nvar height = PlayerInfo.currentSize ? PlayerInfo.currentSize.height : this.$el.height()\nSo, why can't we simply just put : \nvar height = this.$el.height()\n???\nThis works for me with this fix ... \n. Yes, i need the player to be responsive\n. @towerz \n:ok_hand: \nGreat, it works as expected, and i don't have to maintain my own branch to have this behavior, thxs !\n. According to @thiagopnts , need a fix for resize play button on player resize\n. @thiagopnts Do you plan to support it ?\n. @flavioribeiro yes this is a core plugin\ni've tried it but unfortunately i've got a 'Uncaught TypeError: undefined is not a function'\nIt seems that the external plugin does't know about load function from core object\nI've used the clappr plugin generator to write this plugin, is that the good way ?\n. Of course : \nhttps://github.com/irongomme/clappr-channels/blob/master/src/main.js\n. Ok i've found it .... \nMy call of the plugin from player parameters was wrong, i've put \nplugins: { 'container': [Channels] }\nInstead of \nplugins: { 'core': [Channels] }\n:grimacing: \n. Is there a procedure to follow ? \nBecause changing the source cause the player to stop playing, and calling mediaControl.play() just after throw an error\n. I've got this working : \nthis.core.load(source)\nthis.container.on(Events.CONTAINER_READY, this.container.play)\n. I've got a problem with the new HLSPlayer.swf (after 0.2.5) : \nWhen I play, I stop, and then I play, i've got this javascript error : \nUncaught Error: \nError: An invalid exception was thrown clappr.min.js:3 \nn.firstPlay.value clappr.min.js:3 \nn.play.value clappr.min.js:2 \nn.play.value clappr.min.js:4 \nn.clicked.value clappr.min.js:6 \na.split.forEach.ready.a.proxy\nWhen i try with the unminified version : \nUncaught Error: Error: \nAn invalid exception was thrown.hls.js:200 \nfirstPlay hls.js:118 \nplay container.js:130 \nplay poster.js:95 \nclicked zepto.min.js:2 \ni.split.forEach.s.proxy\nHere is the hls.js l.200 : \nthis.el.globoPlayerPlay()\n. Sorry for this issue because in fact everything is OK !\nThis was due to my plugin which was implemented after the mediacontrol html, that's why i loosed focus .... \n. I agree, it could be nice ! \nMaybe, it could be done in the same time of this issue : #336 \n. What about adding libs to trigger mobile gesture events ?\nBecause click or dbleClick won't be enough to cover all devices ... \n. I'm working on it, and in my opinion, this will be better to let people choose the action on each events ! Because this is quite easy to listen on player container event and trigger fullscreen on double click or double tap for example. \nWhat do you think all about adding a light library like jquery.finger (it's about 0.5k) and covers main mobile gestures (tap, doubleTap, drag, press, flick) ?\n. Finaly module zepto-touch which is allready included do the job , and finaly fullscreen on doubletap should be a default behavior ! \n. Is that parameter works too for HLSPlayer.swf ?\n. Ok, i've got one answer for iOs : \nfrom https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html :\n\nIn Safari on iOS (for all devices, including iPad), where the user may be on a cellular network and be charged per data unit, preload and autoplay are disabled. No data is loaded until the user initiates it. This means the JavaScript play() and load() methods are also inactive until the user initiates playback, unless the play() or load() method is triggered by user action. In other words, a user-initiated Play button works, but an onLoad=\"play()\" event does not.\n\nNow i continue my investigations for android .... \n. It seems to be the same on Android, both for chrome and native browser.\nUnless someone's got a trick for that , i believe there are no solutions to resolve this problem ! :hankey: \n. @towerz this is a good idea, but if i'm not wrong, Clappr doesn't allow to be instanciate without source !?\n. I'm doing the same, i use new releases for js but old release for the swf\n. @towerz Great job !\n. @JoosyBill I think this problem is linked with this issue : #412\nCan you try to use clappr locally, and use this version of HLSPlayer : \nhttps://github.com/clappr/clappr/blob/a9281a41a1ffeb600d7c5fb3fcf543b81375b764/dist/assets/HLSPlayer.swf\nuse the baseUrl param to set the path of your assets\n. @thiagopnts you're right, it might be ok now !\n. Thx @towerz  for feedback, i test it right now !\n. This is better ! :+1: \nI've no sounds for the 1st segment, but then its ok\n. I've only tested on chrome (v43) linux\nThis happened on first load, and then i use load method to change the source (core.load)\n. @towerz I have a testing environment here : http://www-pp.iwiplay.net/play/2/7\nFor your questions : \ni'm using OpenSuSe 13.2 with Adobe Flash Player - Version : 17.0.0.188\n. I've found the break point : \nThis error is raised when i trigger play externaly : \nvar container = player.core.getCurrentContainer();\ncontainer.play()\nStacktrace  : \nUncaught TypeError: Error #1009(anonymous function) \n@ VM4251:1play \n@ clappr.js:5897play \n@ clappr.js:3629(anonymous function) \n@ TvCtrl.js:73triggerEvents \n@ clappr.js:8441trigger \n@ clappr.js:8379ready \n@ clappr.js:3578triggerEvents \n@ clappr.js:8441trigger \n@ clappr.js:8379bootstrap \n@ clappr.js:5845(anonymous function) \n@ clappr.js:5809triggerEvents \n@ clappr.js:8439trigger \n@ clappr.js:8379Mediator.trigger \n@ clappr.js:8843ready \n@ clappr.js:5640_createClass.createCallbacks.value.window.Clappr.flashlsCallbacks.(anonymous function) \n@ clappr.js:6141(anonymous function) \n@ VM4246:1\nAfter testing with old releases, i've found this error came between release 0.1.0 and 0.1.1\n. I've compared those two releases, and it seems to be a HLSPlayer issue, because the only difference which make it happened is the replacement of flashlsChromeless by HLSPlayer !\n. Hi , we're also using it in our company to offer a live TV system over WiFi coverage. I cannot send a demo because it works behind a captive portal, but it does the job, and so one more time, thanks for this project !\n. You must be right because it doesn't happens on cdn.clappr.io and neither on my other websites.\n. Ok i've found it : i made a wrong use of player.resize, so it didn't work fine on firefox\n. Thks @towerz i'll try it. This is \u00e0 Blocking thing for me because i've added a channel choice over the player but I will try to find another trick for that .\n. Finally, i'my going to this conclusion : a mobile app will be the best cross platform compromise !\n. I can split it like this : \nreturn (\n      document.webkitFullscreenElement || \n      document.webkitIsFullScreen || \n      document.mozFullScreen || \n      !!document.msFullscreenElement\n);\nis this really usefull ?\n. ",
    "leandromoreira": "We may use something similar to this http://leandromoreira.github.io/clappr-docs/classes/Player.html#method_constructor\nit's almost one year old :birthday: \n. At Aug 9, 2014 @thiagopnts suggested yuidoc and we did it :facepunch: \nYou already can check the initial documentation, mostly covering the github's home page and thiago's API documentation.\nWe still need to better integrate this to our build but I think the first step was done. can we close this @flavioribeiro @thiagopnts @towerz @bernardocamilo @barbosa ?\n. @chriswiggins @davidaurelio @bryfry @tarkanlar @snsxn @deedos @irongomme you can check the initial documentation at http://clappr.github.io/\n. I think @flavioribeiro might be doing this:\n- Go to http://cdn.clappr.io/\n- Try to click on a distant point on seek bar and try to grab from there\n- It does not work!\nps: If you click exactly on the current position (aka the circle) you still can grab.\n. :trollface: @flavioribeiro do you still see this error? otherwise we can close it.\n.   :+1:  @dayvson \n. @thiagopnts and @flavioribeiro I'm working on what you pointed out but I'm struggling to code a test about making persistConfig default.\nI added this line (player):\njavascript\nthis.options.persistConfig || (this.options.persistConfig = true)\nAnd I also added this test:\n``` javascript\nvar Player = require('../src/components/player');\ndescribe('Player', () => {\n  describe('constructor', () => {\n    it('persists config by default', () => {\n      var player = Player()\n      expect(player.options.persistConfig).to.be.equal(true);\n    });\n  });\n});\n```\nBut when I try to run tests  npm test  I receive these errors:\nshell\n[12:52:48] Finished 'pre-build' after 673 ms\n[12:52:48] Starting 'release'...\n[12:52:53] Finished 'release' after 5.21 s\nINFO [karma]: Karma v0.12.28 server started at http://localhost:9876/\nINFO [launcher]: Starting browser Firefox\nERROR [framework.browserify]: bundle error\nERROR [framework.browserify]: Error: Cannot find module 'core' from '/Users/leandro/pp/clappr/src/components/core_factory'\nERROR [framework.browserify]: bundle error\nERROR [framework.browserify]: Error: Cannot find module 'html5_video' from '/Users/leandro/pp/clappr/src/components/loader'\nERROR [framework.browserify]: bundle error\nERROR [framework.browserify]: Error: Cannot find module 'flash' from '/Users/leandro/pp/clappr/src/components/loader'\nERROR [framework.browserify]: bundle error\nERROR [framework.browserify]: Error: Cannot find module 'html5_audio' from '/Users/leandro/pp/clappr/src/components/loader'\nERROR [framework.browserify]: bundle error\nERROR [framework.browserify]: Error: Cannot find module 'hls' from '/Users/leandro/pp/clappr/src/components/loader'\nERROR [framework.browserify]: bundle error\nERROR [framework.browserify]: Error: Cannot find module 'html_img' from '/Users/leandro/pp/clappr/src/components/loader'\nERROR [framework.browserify]: bundle error\nERROR [framework.browserify]: Error: Cannot find module 'poster' from '/Users/leandro/pp/clappr/src/components/loader'\nI tried several ways to stub requirejs (config, define ...) but none of them have worked. Do you have any ideas about how to stub a dependency into requirejs? (or how to test this easily)\n. Done @thiagopnts and @flavioribeiro, thanks!!! I suppose these two little changes down bellow won't affect the player at all, am I right?\nPlayer constructor: \nhttps://github.com/globocom/clappr/pull/307/files#diff-200a325d8607daea7e681ef9d1ab1426L16\nMediaControll render:\nhttps://github.com/globocom/clappr/pull/307/files#diff-77857a480ef013cab1d709b21f7d2ba7L457\n. Sure @flavioribeiro !\n. @ferval I can't see any info or image.\n@seamug can you provide the ios/android (in which browser) version and what issue are you facing?\n. Ideally this should work across all the playbacks, maybe we could:\n- add a property to all playbacks speed\n. @flavioribeiro is ActionScript/Flash/Playback master :) he knows this stuffs! \nOtherwise the Playback parent class can offer the default behavior (-1) but that raises another issue: we should only show this control if the playback is compatible. How ? (checking if .speed !== -1 ???)\n. :+1: for Jenkin's suggestion! \nWe also should create a plugin previous to this one. A Settings core plugin that would provide:\n- a Menu with a list of possible Options\n- each option would offer you a way to trigger an action. (with optional input)\nTherefore we'll be able to put LevelSelector and others options inside this Settings plugin. \n. @chakree30584 this is still open ;)\n. @chovy there is a resize method.\n. > Thanks. It would be nice if we could just have an option like `player({\n\nresponsive: true })`\n\nI think it is already responsive, check this, you need to put it on a responsive container though.\n. Yeap, @masudo I think you're right, you can do that by observing the Events.CONTAINER_TIMEUPDATE.\nWe're working on a SRT parser :)\n. not yet @eseffair but you can easily write a plugin for it1\n. @flavioribeiro no, I don't think so :smile:  ! We've observed that the latest flash_hls build was behaving pretty weird (going backward and forward during the switch of bitrates) and we need to track it down to understand what is happening.\n. @siddhesharolkar please don't double comment if you already opened an issue. https://github.com/clappr/clappr/issues/1052\n. @thiagopnts might help you out!. Thanks @revolter \n. I think this is an issue related to flash and chrome https://code.google.com/p/chromium/issues/detail?id=454251 \nWhat do you think @towerz @thiagopnts @flavioribeiro is it related to either clappr or flashls?\n. if it's still a problem we'll reopen it.\n. @AndCycle Thank you very much !!!! \n. @tjenkinson can we close this one since https://github.com/clappr/clappr/pull/559 ?\n. Since we jumped into hls.js we can reopen that if it's necessary.\n. I also started to play with https://github.com/google/shaka-player\n. we also did a playback using dashjs (https://github.com/leandromoreira/clappr-dash-dashjs) although it's not the best option IMO\n. @irongomme is this still valid?\n. @Aathi are you still facing this problem?\n. @towerz can you see if it's okay with your idea?\n. @stanogurnik thanks D:D !\nIt would be good if you'd rebase your code first. Also, I don't know if the original intent of this plugin was to have a fixed (70px) or a floating size (12%).\nWhat do you think @flavioribeiro @towerz @bernardocamilo @thiagopnts @all ?\n. I agree with @stanogurnik can you rebase your code?\n. Thanks a lot @stanogurnik  :) I would vote for us to use https given https://github.com/cdnjs/cdnjs/issues/4112 what do you think? do you see any problem by going https only @towerz @flavioribeiro @thiagopnts @bernardocamilo  ?\n. :clap: :clap: :clap: \n. > In the current clappr - PlayerInfo.playbackPlugins is empty, where did the plugin registry go ?\nI tested at http://cdn.clappr.io/ and player.core.playerInfo.playbackPlugins is working, the loader component is responsible to manage all plugins player.loader.playbackPlugins || player.loader.containerPlugins\n\nThis means playbackPlugins are global and shared between multiple instances of the plugin(if a page contains multiple videos) ?\n\nNo, they're by instance.\n\nThere are no errors, the flow seems correct, it creates the correct m3u8 playback plungin but there is nothing played, what am I missing ?\n\nDid you add it to Clappr.Player constructor? If yes, after you try to play (the first play will be discarded, since you didn't bind PLAYBACK_PLAY to retry to play), try to call player.play() on console after you clicked on Play the first tiem.\nAlso you could extend directly from HLS instead of being a proxy if want to.\n. I think u can remove this constructor.\nconstructor(core) {\n    super(core);\n    this.core = core;\n  }\n. @slhck how are you generating this hls? So we can try to replicate this behavior.\nCan you try to serve this files from a nginx? (with proper mime-type)\n``` nginx\nhttp {\n    server {\n        listen 80;\n    location /example_html {\n        types {\n            application/vnd.apple.mpegurl m3u8;\n            video/mp2t ts;\n        }\n        root /path/example_html/;\n        add_header Cache-Control no-cache;\n        add_header Access-Control-Allow-Origin *;\n    }\n\n    location /crossdomain.xml {\n        default_type text/xml;\n        return 200 '<?xml version=\"1.0\"?>\n            <!DOCTYPE cross-domain-policy SYSTEM \"http://www.adobe.com/xml/dtds/cross-domain-policy.dtd\">\n            <cross-domain-policy>\n                <site-control permitted-cross-domain-policies=\"all\"/>\n                <allow-access-from domain=\"*\" secure=\"false\"/>\n                <allow-http-request-headers-from domain=\"*\" headers=\"*\" secure=\"false\"/>\n            </cross-domain-policy>';\n        expires 24h;\n    }\n}\n\n}\n```\n. Thanks @slhck ! \nI also don't know, it was just a guess, I think maybe windows and macos works different with flash requiring proper header (mime-type). In the end it might be a problem with flash hls implementation.\n. nice @derrod , (pull rebase from origin too) can you try if you can squash the commits so it appears cleaner in git history: http://stackoverflow.com/questions/5667884/how-to-squash-commits-in-git-after-they-have-been-pushed\n. :) @derrod tell me if you need any help\n. @derrod you just missed your tests cases.\n. :beers: @derrod thanks man :)\n. @derrod LGTM, thanks! @flavioribeiro do you think this is valid ? ( I mean, seeking for days )\n. @rprokes what IE? We fixed some issues with IE, did you try with latest version?\n. eventials.com is using https://github.com/clappr/clappr-level-selector-plugin/pull/9\n. Hi @JOOKER69 I don't know if I understood your question but I'm afraid that the answer is no.\nIn order to use fullscreen API you usually need to require the fullscreen within an user action (user click...), even if you listen to when the container is playing you won't get the fullscreen on play. The example down bellow won't work.\nhtml\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <title>Clappr Fullscreen test</title>\n    <script type=\"text/javascript\" src=\"http://cdn.clappr.io/latest/clappr.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"player\"></div>\n    <script>\n      var player = new Clappr.Player({source: \"http://techslides.com/demos/sample-videos/small.mp4\", parentId: \"#player\"})\n      player.listenTo(player.core.mediaControl.container, Clappr.Events.CONTAINER_PLAY, function() {\n        player.core.mediaControl.container.fullscreen()\n      })\n    </script>\n  </body>\n</html>\nA new spec about fullscreen is being made, maybe in a future it'll be possible.\nWhat you could do is: when the container is playing you resize the player to fill the page.\njavascript\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <title>Clappr Fullscreen test</title>\n    <script type=\"text/javascript\" src=\"http://cdn.clappr.io/latest/clappr.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"player\"></div>\n    <script>\n      var player = new Clappr.Player({source: \"http://techslides.com/demos/sample-videos/small.mp4\", parentId: \"#player\"})\n      player.listenTo(player.core.mediaControl.container, Clappr.Events.CONTAINER_PLAY, function() {\n        player.resize({height: 720, width: 1080})\n      })\n    </script>\n  </body>\n</html>\n. @tjenkinson thanks so much, you always help a lot. :smile:\nSome notes though: \n-  instead of doing var self = this use arrow function:\njavascript\n    this.listenTo(this.mediaControl, Events.MEDIACONTROL_MOUSEMOVE_SEEKBAR, (event)  =>  {\n      this.hoveringOverSeekBar = true\n      this.calculateHoverPosition(event)\n      this.update()\n    })\n-  avoid ;\n\n\"1. How do I get access to the container to listen for the settings changed event? Does it need to be a UICorePlugin to get access to this?\"\n\nIt doesn't need to be a UICorePlugin and I think you can achieve this by listening for settings update.\njavascript\nthis.listenTo(this.mediaControl.container, Events.CONTAINER_SETTINGSUPDATE, () => {})\n\n\"2. Where in the code does the duration value get added and updated? It feels like this should be something that is controlled here as well?\"\n\nYou usually can listen to container time update or progress.\njavascript\nEvents.CONTAINER_TIMEUPDATE\nEvents.CONTAINER_PROGRESS\nThanks\n. @tjenkinson I beg your pardon I didn't answer you. (I read fast and :hankey:)\n\n\nWhere in the code does the duration value get added and updated? It feels like this should be something that is controlled here as well? \n\n\nIt depends on the playback: \n- For html5_video it listens to durationchange event from video tag and then it know that it can query $videotag.duration.\n- For flashls it does listen to some events on flash and then it updates the duration (while you're playing a vod you have a fixed duration but with live different.\n. @tjenkinson sorry once more :(\nNow I could understand and I agree with you but maybe there is a reason for this component, what you think @towerz @thiagopnts @flavioribeiro \n. ;) no problem @tjenkinson you always help a lot :smile: \n\nIn MediaControl there is a destroy() method. Where is this called from? I'm a bit confused as to where this fits in with the system. Also shouldn't the stuff it does also happen if the user was to call remove()?\n\nI think the Core is responsible for the life cycle of MediaControl (alongside with Container and all the plugins which also should have destroy method), therefore when you destroy the core it'll destroy also all the plugins and the media control.\nYou can see that here.\njavascript\n  destroy() {\n    this.disableResizeObserver()\n    this.containers.forEach((container) => container.destroy())\n    this.plugins.forEach((plugin) => plugin.destroy())\n    this.$el.remove()\n    this.mediaControl.destroy()\n    $(document).unbind('fullscreenchange')\n    $(document).unbind('MSFullscreenChange')\n    $(document).unbind('mozfullscreenchange')\n}\nand you will destroy the Core when you destroy your player.\n\nAlso shouldn't the stuff it does also happen if the user was to call remove()?\n\nI think the API for plugins is the destroy method, although I see that UIObject employs the remove API instead... maybe we should call remove inside destroy\nAnyway I think @towerz @thiagopnts @flavioribeiro can help us out here, in these two questions.\n- In MediaControl there is a destroy() method. Where is this called from? I'm a bit confused as to where this fits in with the system. Also shouldn't the stuff it does also happen if the user was to call remove()?\n- Also shouldn't the stuff it does also happen if the user was to call remove()?\n. @tjenkinson yeah, you're right but since I'm kinda new I want the others to check if we are correct on this too, then we can fix this possible bug.\nWhile the super method remove does that (I mean it calls stopListening and undelegatingEvents, which stops listening all the events) that's why I suppose we might need to call within mediaControl#destroy\njavascript\n  remove() {\n    this.$el.remove()\n    this.stopListening()\n    this.undelegateEvents()\n    return this\n  }\n. I'm cool with that, once again thanks so much @tjenkinson :clap: :clap: :clap: \n. I tried the simplest change but it didn't work, it requires further investigation.\n``` yaml\n sudo: false\n  language: node_js\n  node_js:\n    - \"0.12\"\n addons:\n   apt:\n     sources:\n     - ubuntu-toolchain-r-test\n     packages:\n     - gcc-4.8\n     - g++-4.8\n  before_install:\n    - \"export DISPLAY=:99.0\"\n    - \"sh -e /etc/init.d/xvfb start\"\ninstall:\n    - \"npm install\"\nenv:\n```\nWith above modification travis won't start Chrome.\n```\n24 08 2015 17:30:54.316:INFO [karma]: Karma v0.13.9 server started at http://localhost:9876/\n24 08 2015 17:30:54.328:INFO [launcher]: Starting browser Chrome\n24 08 2015 17:30:55.077:ERROR [launcher]: Cannot start Chrome\n24 08 2015 17:30:55.087:INFO [launcher]: Trying to start Chrome again (1/2).\n24 08 2015 17:30:55.498:ERROR [launcher]: Cannot start Chrome\n24 08 2015 17:30:55.501:INFO [launcher]: Trying to start Chrome again (2/2).\n24 08 2015 17:30:55.835:ERROR [launcher]: Cannot start Chrome\n24 08 2015 17:30:55.836:ERROR [launcher]: Chrome failed 2 times (cannot start). Giving up.\nnpm ERR! Test failed.  See above for more details.\nThe command \"npm test\" exited with 1.\nDone. Your build exited with 1.\n```\n. https://travis-ci.org/clappr/clappr/builds/77020010\n. Hi @dviramontes \nI'm using a Safari 8.0.8 and then I tried a mp4 file at http://cdn.clappr.io and it worked:\n\np.core.getPlaybackType()\n< \"vod\"\np.core.getCurrentPlayback().getPlaybackType()\n< \"vod\"\np.core.getCurrentPlayback().getCurrentTime()\n< 4.237111111111111\np.core.getCurrentPlayback().getDuration()\n< 36.44\n\nSo I changed the source to \"http://www.streambox.fr/playlists/test_001/stream.m3u8\" and it still works:\n\np.core.getCurrentPlayback().getPlaybackType()\n< \"vod\"\np.core.getCurrentPlayback().getCurrentTime()\n< 3.2469333333333332\np.core.getCurrentPlayback().getDuration()\n< 510\np.core.getCurrentPlayback().getCurrentTime()\n< 7.611636596\np.core.getCurrentPlayback().getCurrentTime()\n< 9.134704286\n\nI also tested with player.getCurrentTime() and I still couldn't get Infinity, although I used the instance p you should have the same behavior while using the right instance of the Clappr.\ncan you provide more detail so we can reproduce it ?\n. @thalleshmm is right\n``` javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n  baseUrl: '/latest',\n  plugins: [Clappr.HLS],\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\nplayer.on(Clappr.Events.PLAYER_PAUSE, function(){\n  alert(player.core.getCurrentPlayback().name)\n})\n```\n. #1013 \n. did you try to reproduce this behavior at http://flashls.org/latest/examples/chromeless/ ?\n. Thanks @cherihung can you describe (or give us a little bit more detail) the steps to reproduce this behavior? \nEven if you use this url http://www.streambox.fr/playlists/test_001/stream.m3u8 you still will face (sometimes) this stuck? is it on VOD or live? \n. The stream http://www.streambox.fr/playlists/test_001/stream.m3u8 is also a vod. If you tested this url http://www.streambox.fr/playlists/test_001/stream.m3u8 at http://cdn.clappr.io/ and you can't reproduce this behavior it might be a indicative that your stream is suffering something.\nAnd the usage of Angular (dynamically loading sources) with Clappr should be fine. \n- When the video got stuck, did you still hear the sound?\n. Hi @neowinston it's working fine for me at http://cdn.clappr.io/ \nAre you receiving any error?\nIf you want to test, you can copy/paste this snippet and click Run and then click to play.\njavascript\nvar player = new Clappr.Player({\n  source: 'http://bbnmedia-lh.akamaihd.net/i/BibleBroadcasting_Englishios@87472/master.m3u8',\n  poster: 'http://clappr.io/poster.png',\n  height: 360,\n  width: 640,\n  parentId: \"#player-wrapper\"\n});\n. @neowinston are you seeing any error at your browser's console? By the way, you need to serve this index.html file from a server. (ex:)\nshell\nsudo python -m SimpleHTTPServer\nBut looking at https://github.com/clappr/clappr/issues/542 @towerz also mentioned that you need to pass baseUrl: \"http://cdn.clappr.io/latest\"\njavascript\nvar player = new Clappr.Player({\n  source: 'http://bbnmedia-lh.akamaihd.net/i/BibleBroadcasting_Englishios@87472/master.m3u8',\n  poster: 'http://clappr.io/poster.png',\n  height: 360,\n  width: 640,\n  baseUrl: \"http://cdn.clappr.io/latest\",\n  parentId: \"#player-wrapper\",\n});\n. @neowinston make sure to pass baseUrl pointing to \"http://cdn.clappr.io/latest\" (this is where the player will download the assets, fonts, swf...)\nGiven the behavior (working on safari... which works on tag video) you've described, I think if you pass baseUrl it'll work.\n. :sunglasses: Professionals are already using loop :sunglasses:\nyep, I agree @towerz \n. :clap: :clap: :clap: :clap: :clap: :clap: \n. lol congrats :) so much great things from this\n. @AlekzFateJumper we use mangui/flashls to provide hls, we just pass a given source ('http://example.com/myvideo/playlist.m3u8') but we don't manage hls internal state, a.k.a. you will not have access to the playlist within clappr.\nThe major interaction we do is to setup flashls by passing arguments to build it.\n. thanks @irongomme I rewrite the title, if you don't mind. Because it seems that this not a problem only for hls.\n- hideVolumeBar true has no effect on live hls\n- hideVolumeBar is broken\n. @thiagopnts we should fire him :+1: I'm in favor or maybe we instruct him to ignore Line is too long.\n. still a problem?\n. Cool, thanks @tjenkinson  :beers: \n. @wholegrn when you listen to PLAYBACKx events you need to pass the playback (player.core.getCurrentContainer().playback) you want to listen. I'd use container events, instead of _playback events :\njavascript\nplayer.listenTo(player.core.getCurrentContainer(), \n                Clappr.Events.CONTAINER_STATE_BUFFERING,  \n                function() { alert(\"buffering!\") })\nWe need to add more documentation to events and how to use them.\n. hey @diegosacc73 , given your task display a message from the time the video url is being loaded/buffered until it starts to play I think you can just do the simplest, it seems you're watching when user is not playing video vs waiting to play.\n``` javascript\n// setup clappr\nvar isNotPlaying = true\nplayer.on(Clappr.Events.PLAYER_PLAY, function() { isNotPlaying = false })\n```\nYou just need to remember that there is no autoPlay: true on mobile but it'll stop the message when the use click on Play.\n. thanks @dayvson\n. https://github.com/clappr/clappr/issues/563\n. isn't the default behavior to go full screen? also arent the events still being sent?\n. still a bug?\n. @Kreeig did you notice any console error? what kind vide were you playing? do you have any url to test? \n. hey @Kreeig I rewrite the title (for SEO) and I'll let this issue open so anyone can pick an try to fix it. Thanks.\n. @shaharmor thanks! \nDid you observe this behavior when playing mp4, hls ... and using what browser? So we can reproduce to try to fix (and become a bug ;) )\nThis behavior is delegated to each playback. Let's say you're trying to play a mp4 (therefore using html5_video playback) and call player.isPlaying() it'll delegate to html5_video playback.\njavascript\n  isPlaying() {\n    return !this.el.paused && !this.el.ended\n  }\nShould we can consider when it's buffering too? I don't know the semantics, maybe the player is playing and buffering.\n. :+1: \n.  can we close this one?\n. @tjenkinson as far as I know, nope! :)\nThis will be awesome! You always help a lot, thanks once again. :beers: \n. @tjenkinson I totally agree with you, I was in the same situation as you last Friday. We should create an issue for it.\n. @tjenkinson yes, it is! https://github.com/clappr/clappr/blob/master/src/base/ui_core_plugin.js#L7 \nLevel selector is not using it right, beyond that LS even call super after code. (which is something wrong too, I think)\n. did you enable Logger to debug?\nhttps://github.com/clappr/clappr/blob/master/src/plugins/log/log.js#L23\nWe log when almost all events are triggered (either its success or exception).\nAlthough, throw \"s\" should be seen as an exception not an debug info.\n. pretty cool @tjenkinson : ), we should put it on README (external plugins)\nhttps://github.com/tjenkinson/clappr-thumbnails-plugin\n. thanks @flavioribeiro :clap:  it's a great milestone for Clappr\n. - Firefox 42 will enable MSE by default\n- There is no whitelist anymore ; we won't be adding new sites to the whitelist\nhttp://www.ghacks.net/2015/08/06/mozilla-to-enable-media-source-extensions-mse-for-all-websites-in-firefox-42/\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=778617\n. @flavioribeiro I think is best to rely on type since almost all the others \"check type solutions\" are not guaranteed to work now/future in JS.\n. @floriano12 clappr is extensible, you can easily put a \"text logo\" on it, see the example below. \nAbout your question, the link to download a HLS player? So, clappr already plays hls streams, you can use it without no extra javascript, you just need to inform a valid m3u8 to the source in the initialization.\n``` html\n<!DOCTYPE html>\n\n\n\n\nClappr plugin dev tutorial 1 - Hello World\n\n\n\nClappr plugin dev tutorial 1 - Hello World\n\n\n      var HelloWorld = Clappr.UIContainerPlugin.extend({\n        bindEvents() {\n          this.listenTo(this.container, Clappr.Events.CONTAINER_PLAY, this.render)\n        },\n        render: function() {\n          this.$el.html('Hello World!')\n          this.$el.css('font-size', '100px')\n          this.$el.css('color', 'white')\n          this.$el.css('background-color', 'red')\n          this.$el.css('position', 'relative')</p>\n<pre><code>      this.container.$el.append(this.$el)\n      return this\n    }\n  });\n\n  var player = new Clappr.Player({\n    source: \"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\",\n    poster: \"https://upload.wikimedia.org/wikipedia/commons/thumb/2/28/HelloWorld.svg/512px-HelloWorld.svg.png\",\n    parentId: \"#player\",\n    plugins: {container: [HelloWorld]}\n  });\n&lt;/script&gt;\n</code></pre>\n<p></body>\n</html>\n```\n. @tjenkinson </p>\n<blockquote>\n<p>Would be nice if the instance of the plugin could be accessed some way after clappr has instantiate it.</p>\n</blockquote>\n<p>All the plugins are stored, I think we have a function <code>findPlaybackPlugins</code> or <code>findPlugins</code> to do a lookup in all of them by <em>name</em>, but I don't remember the method. @flavioribeiro @towerz @thiagopnts sure know if there is such method.</p>\n<p><code>javascript\n// it's something like this.\nthis.core.getCurrentContainer().pluginByName('my_plugin')</code></p>\n<p>Nevertheless, we usually use two ways to interact with other components:</p>\n<h2>Events (less coupled)</h2>\n<p>``` javascript\n//let's say you have a core plugin and want to \"say\" something to a container plugin</p>\n<p>class MyPlugin {\n   changeThumbSource() {\n     this.core.getCurrentContainer().trigger(MY_EVENT, newThumbSource)\n   }\n}\nMyPlugin.MY_EVENT = 'my:event'</p>\n<p>//and then on your new container plugin\nclass Thumb {\n  bindEvents() {\n    this.listenTo(this.container, MyPlugin.MY_EVENT, this.changeThumbSource)\n  }\n}\n```</p>\n<h2>Calling functions</h2>\n<p><code>javascript\n//again, I'm not 100% sure about of something like this.\nvar myPlugin = this.core.getCurrentContainer().pluginByName('my_plugin')\nmyPlugin.changeThumbSource(\"http://example.com/45.png\")</code></p>\n<p>After reading your https://github.com/tjenkinson/clappr-thumbnails-plugin/issues/1 I think maybe the best solution might be really the <code>options</code>. (it depends, for sure, on how and when you get the thumbnail source)</p>\n<p><strong>Ideally</strong>, the plugin should be self contained, a.k.a. don't leak in or out behaviors, whatever you want to do should be done within the plugin or with another plugin, external interaction with the player should be using the <a href=\"http://clappr.github.io/classes/Player.html\">player API</a>. </p>\n<p><code>javascript\nnew Clappr({... , thumbnailUrl: 'xxx'}</code>\n. @jfairley @dviramontes we had a little problem while releasing the newer version of clappr. :cry:  . We'll fix it soon, I'm sorry :(\n. @jfairley @dviramontes @flavioribeiro we're live! (once again, I'm sorry)\n. @nxtreaming is still happening?\n. You're fast!\n. Thanks @tjenkinson \n. duplicated \n. thanks again @tjenkinson can you also write the doc about this? <code>disableVideoTagContextMenu</code>\n- one in here https://github.com/clappr/clappr/blob/master/src/components/player.js#L84\n- and another at README like this one https://github.com/clappr/clappr/blob/master/README.md#loop (even though we might hold this PR for release date)</p>\n<p>ps: let it clear that it only works for html5 playback.\n. :+1: @tjenkinson \n. Here it's http://clappr.github.io/classes/Player.html#yui_3_9_1_2_1445296707565_548\n. @dethos are you still facing this issue? I tried http://cdn.clappr.io/ and everything seems fine.\n. thanks @dethos \n. my bad @flavioribeiro both, container and player handles only container <strong>instances</strong> while the Loader return the classes.\n. @cowai did you try to replicate this at http://dailymotion.github.io/hls.js/demo/ ? if yes, we should open this issue on <a href=\"https://github.com/dailymotion/hls.js\">hls.js</a></p>\n<p>One thing you can do is force flahshls for a while:</p>\n<p><code>javascript\nplugins: {playback: Clappr.FlasHLS},</code>\n. thanks, good to know ;)\n. @AlexRevin did you know clappr already supports <a href=\"https://github.com/clappr/dash-shaka-playback\">dash</a>? also, soon MSE will be supported in more browsers.\n. are you still facing this issue @polaris-zx ? also, did you test with different stream sources? is it only with hls ?\n. Just a heads up:\n- Firefox 42 will enable MSE by default\n- There is no whitelist anymore ; \"we won't be adding new sites to the whitelist\"</p>\n<p>http://www.ghacks.net/2015/08/06/mozilla-to-enable-media-source-extensions-mse-for-all-websites-in-firefox-42/</p>\n<p>https://bugzilla.mozilla.org/show_bug.cgi?id=778617\n. is it right to do <code>git rebase master</code> from my branch? \nnow it seems that I commited 21 files... what is going to happen if we merge this pr?\n. I tend to follow <code>rebase</code> flow almost always. :hammer: \n. Also, what's the difference between <em>_PROGRESS and </em>_TIMEUPDATE and main usage?\n. I'll see this after.\n. I'm gonna rework this one (rebase, git fetch, git robot, git anything)\n. @kevin2o it was not ;/ but I still think it's a solid feature\n. @PreDeToR the way you switch audio tracks depends on the playback =/ for instance, if you are using HLS you should be using the <a href=\"https://github.com/dailymotion/hls.js/blob/master/API.md#audio-tracks-control-api\">playback directly</a>. </p>\n<p><code>javascript\nvar hls = clappr.core.getCurrentContainer().getCurrentPlayback()._hls\nvar all = hls.audioTracks;\nhls.audioTrack = all[0];</code></p>\n<p>This issue aims to solve that by providing an API for these common operations, therefore we can build upon this, like we did with <a href=\"https://github.com/clappr/clappr-level-selector-plugin\">bitrate levels</a>.\n. @PreDeToR I just checked at cdn and I could reproduce with this code <code>player.core.getCurrentPlayback()._hls</code> the <strong>player</strong> being the instance name you gave, also please notice that <code>_hls</code> will be only available after you click <code>PLAY</code>:</p>\n<p><code>javascript\nplayer = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640,\n  onPlay: function() { console.log(player.core.getCurrentPlayback()._hls.audioTracks) }\n});</code>\n. @PreDeToR my bad, I wrote that code out of my head, this one worked (although this stream doesn't offer multiple audios).</p>\n<p>``` javascript\nvar playerElement = document.getElementById(\"player-wrapper\");</p>\n<p>player = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640,\n  events: {\n    onPlay: function() {\n      console.log(player.core.getCurrentPlayback()._hls.audioTracks);\n    }\n  }\n});</p>\n<p>player.attachTo(playerElement);</p>\n<p>```\n. &gt; Should it not at least return 1 audioTrack on the above video?</p>\n<p>It seems that the hls.js team chose don't add a single track.\n. @PreDeToR try to test these files at http://dailymotion.github.io/hls.js/demo/ it seems likely to be an issue at hls.js\n. <a href=\"https://github.com/dailymotion/hls.js/blob/master/demo/index.html\">I saw</a>, maybe this is something only available at new version 6.x :(\n. yes, https://github.com/clappr/clappr/issues/1143 as well we need to define an API to handle multiple audio/video tracks across different playbacks (dash, hls, ...).\n. lgtm  :+1: \n. @operutka another thing you can test is to force the usage of <code>software decoder</code>.</p>\n<p>At first it sounds counterintuitive but we noticed that often the performance issues were related to many switches between hardware and software decoder and if you force software it stops these swaps.</p>\n<p><code>javascript\nnew Clappr.Player({... , useHardwareVideoDecoder: false});</code>\n. I'm gonna close this one since it seems that it was mostly related to flash+linux\n. https://github.com/clappr/clappr/pull/686/files\n. *any browser that uses HLSJS with AES-128</p>\n<p>We actually rely on dailymotion/hls.js therefore all the <a href=\"https://github.com/dailymotion/hls.js#features\">features</a> and <a href=\"https://github.com/dailymotion/hls.js#not-supported-yet\">not-supported-features</a> are the same. Thanks for the heads up.</p>\n<p>You can force flashls playback though.\n. @itsjamie I'm gonna close since it's now <a href=\"https://github.com/dailymotion/hls.js#features\">supported</a>\n. @philcrump did you notice any error on console?\n. thanks :beers: \n. :beers: \n. I also don't like to change globals but the problems with helpers/util are:\n- it'll become another dependency <code>import util</code>\n- it'll solve <a href=\"https://github.com/clappr/clappr/pull/643#issuecomment-154595425\">this possible problem</a> for <strong>old browsers.</strong>\n- if anoter script does <code>polyfill</code> first than Clappr then our <code>util/helper</code> will be facing <strong>almost the same problem</strong></p>\n<p>But either implementation is fine :) , better than having <em>behavior checking</em> spread all over the code, I just like polyfill better because it lets the code cleaner.</p>\n<p>Maybe a middle ground solution, like \"namespacing\" it under <code>util</code>.</p>\n<p><code>javascript\nutil.navigator.language //here we do the magic</code>\n. It makes sense :)\n. :+1: \n. Just for reference  https://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L141\n. Hey @FDiskas I just try to run it on cdn.clappr.io and it was working okay, can we close this?</p>\n<p>``` javascript\nvar playerElement = document.getElementById(\"player-wrapper\");</p>\n<p>var player = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.on(Clappr.PLAYER_ERROR, (e) =&gt; console.log(e))\nplayer.attachTo(playerElement);</p>\n<p>```\n. @FDiskas cool, I think I know what it's this.\nhttps://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L48</p>\n<p><code>javacript\nthis.el.src = options.src</code>\n. Hey @FDiskas ,</p>\n<p>When we designed clappr we choose to go with <code>seek(percentage)</code>. I think what we could do instead is to create another seek <em>method</em>:\n- seekTime\n- seekSeconds</p>\n<p>What do you think?\n. @tjenkinson there is, but it's limited to video tag only! I think he would like to have that for all playbacks:</p>\n<p>https://github.com/clappr/clappr/search?utf8=%E2%9C%93&amp;q=seekSeconds</p>\n<p>Thanks @FDiskas, in case you'll only use the hlsjs or video_html5 playback you can use <code>seekSeconds</code>.</p>\n<p>I'm gonna change your title for SEO reasons, is that okay?</p>\n<p><strong>player.seek() should accept seconds not percent</strong></p>\n<p>for</p>\n<p><strong>add method seekSeconds to playback</strong>\n. Cool, @FDiskas so I'm gonna close this one and add this method to https://github.com/clappr/clappr/issues/653 is that okay?\n. Thanks @gfronza I think part of this problem will be solved by this refactoring, <code>seek</code> will report seconds instead of percentage.</p>\n<p>https://github.com/clappr/clappr/blob/fd5aa9c8eb821c654d1c3ed85699bb572499bac2/src/components/player.js#L251\n. @FDiskas can you check it again? we release a tons of fixes, several related to size and css.\n. Thanks @FDiskas \n. I'm with tons of documentations on hold :)\n. @FDiskas </p>\n<p>Events are attached for its specific component, for instance: <code>Clappr.Events.CONTAINER_FULLSCREEN</code> works on <strong>container</strong> not <a href=\"https://github.com/clappr/clappr/blob/master/src/base/events.js#L202-L262\">player events</a></p>\n<p>I would suggest for you to read a little bit of the <a href=\"https://github.com/clappr/clappr/tree/master/src\">code</a> itself as well some <a href=\"http://blog.flavioribeiro.com/clappr-an-extensible-media-player-for-the-web/\">blog posts</a> to get more familiar with clappr.\n. Almost all the components responds to <a href=\"https://github.com/clappr/clappr/search?utf8=%E2%9C%93&amp;q=disable\"><code>disable</code></a> and <code>enable</code> ;) I think something similar to this might work</p>\n<p><code>javascript\nvar container = player.core.getCurrentContainer()\ncontainer.on(Clappr.Events.CONTAINER_FULLSCREEN, \n() =&gt; player.core.mediaControl.disable() )</code>\n. I think it should @tjenkinson (handle it as a different thing)\n. Hey @569934390,</p>\n<p>Do you want that neither <code>mousemove</code> or <code>mouseleave</code> shows the media control? when would it show? you do have <a href=\"https://github.com/clappr/clappr#chromeless\">chromeless</a> options too</p>\n<p>Just out of curiosity, why do you need that?\n. @569934390 you can disable/enable it !!!</p>\n<p><code>core.mediaControl.disable()</code>\nand\n<code>core.mediaControl.enable()</code>\n. @569934390 you need to do that on play or in an event, maybe enable it again on pause/end.</p>\n<p>Go to http://cdn.clappr.io, before you hit <code>play</code> type on the console, the following:</p>\n<p><code>p.on(Clappr.Events.PLAYER_PLAY, function(){p.core.mediaControl.disable()})</code></p>\n<p>Please notice that <code>p</code> will be not available and you should use your clappr instance.\n. Hey @569934390 you can always use events and <code>p</code> is not a bug.</p>\n<p>The only thing is that we're not exposing it through <code>document.window</code> anymore but you can always use your instance :)</p>\n<p>This should always work:</p>\n<p>``` javascript</p>\n<p>var player = new Clappr.Player({\n  source: \"http://your.video/here.mp4\",\n  parameter1: \"value1\",\n  parameter2: \"value2\",\n});</p>\n<p>player.on(Clappr.Events.PLAYER_PLAY, function(){player.core.mediaControl.disable()})\n//and\nplayer.on(Clappr.Events.PLAYER_PAUSE, function(){player.core.mediaControl.enable()})\n```</p>\n<p>We're planing to create some tutorials in order to provide an easier way for the developers to develop and use clappr.\n. @569934390 and @FDiskas you can always use <a href=\"http://clappr.github.io/classes/Player.html#method_load\"><code>load</code></a> method:</p>\n<p><code>javascript\nvar player = new Clappr.Player({\n  source: \"http://your.video/ad.mp4\",\n  parameter1: \"value1\",\n  parameter2: \"value2\",\n});\n//on mobile, it requires touch\n//then on touch you can load another source :P\nplayer.load(\"http://your.video/normal.m3u8\")</code>\n. I think if you chain the calls (<code>load</code> another <em>source</em> and then <code>play</code> it when it is ready) within the user action, you're good to go.\n. Hey @FDiskas if you would navigate through the code, you would see that seeking (no matter if it was triggered by UI our the API) triggers SETTINGSUPDATE which renders <strong>media control</strong>:\n- <a href=\"https://github.com/clappr/clappr/blob/master/src/components/player.js#L256\"><code>player.seek</code></a>\n- <a href=\"https://github.com/clappr/clappr/blob/master/src/components/container/container.js#L254\"><code>container.setCurrentTime</code></a>\n- in case mp4/hls for mobile:\n  - <a href=\"https://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L181\"><code>playback.seek</code></a>\n- in case hls.js:\n  - <a href=\"https://github.com/clappr/clappr/blob/master/src/playbacks/hls/hls.js#L57\"><code>playback.seek</code></a>\n  - <a href=\"https://github.com/clappr/clappr/blob/32e5525a8ed31279176f452ade19cf33cc4408d6/src/components/media_control/media_control.js#L450\"><code>mediaControl.render</code></a></p>\n<p>You can always disable the <strong>media control</strong> and enable it after the seek.\n. Not yet, @FDiskas you can see the releases here https://github.com/clappr/clappr/releases \n. @FDiskas I don't know if I could understand you, but I would suggest:\n- create a custom media control\n- listen to specific <a href=\"http://clappr.github.io/classes/Events.html\">events</a></p>\n<p>We at globo.com do tons of customization over clappr (you can see it here, http://globoplay.globo.com/v/4065877/). It may be easy if you say what kind of event you want to listen.\n. Thanks @FDiskas </p>\n<p>Usually Chrome at android <a href=\"https://github.com/clappr/clappr/blob/master/src/components/browser.js#L56\">reports itself as mobile</a>. And since most of the androids support HLS natively <a href=\"https://github.com/clappr/clappr/blob/master/src/components/loader/loader.js#L47\">Clappr will chose</a> <a href=\"https://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L263\">html5_video</a> instead of flash.</p>\n<p>Can you provide more information about this issue? <a href=\"https://developers.google.com/web/tools/chrome-devtools/debug/remote-debugging/remote-debugging?hl=en\">like the console logs</a>\n. Are you using webview in this case?\n. Thanks, @FDiskas knowing what OS/Browser is needed because we can reproduce it and try to fix it. \n. I assume this is fixed with hls.js\n. Hey @FDiskas ,</p>\n<p>Try to change <code>src</code>:</p>\n<p>``` javascript\n//you load your ad and then in a given event you ...\nonClick(){\nplayer.play()</p>\n<p>player.on(XXX, function(){\nplayer.core.getCurrentPlayback().el.src =  \"http://realthing\"\nplayer.play();\n})</p>\n<p><code>``\n. @FDiskas is it still the same?\n. @FDiskas cool, I'm gonna close this one since this behavior will be handled by https://github.com/clappr/clappr/issues/550\n. yes, here is an example: http://cdn.clappr.io/?t=30s although the video is not with</code>autoPlay<code>when you click on play it'll start at 30s.\n. try to override the</code>getNoOpMessage` method\n. @FDiskas can you check this again? I think this is fixed\n. lgtm\n. @FDiskas is still happening?\n. Thanks a lot :+1: \n. I'm close this one since we already discussed and got ideas from this but not necessarily will use reactjs \n. Hey,</p>\n<p>What android are you using and what browser? I'd like to insist for you to try to follow <a href=\"https://github.com/clappr/clappr#guideline-to-open-an-issue-bug\">our guideline to open issues</a>.\n. Thanks @FDiskas for pointing that out, we don't know how this browser works we'll need to check that after.\n. sorry \n. is this still an issue?\n. @derrod, I think, although the server responds with the proper content type <a href=\"https://github.com/clappr/clappr/blob/master/src/components/container_factory/container_factory.js#L32\">we don't use the http header</a> instead we use the <code>options</code>. (for security and performance reasons)</p>\n<p>Please, try this on cdn.clappr.io :) </p>\n<p>``` javascript\nvar playerElement = document.getElementById(\"player-wrapper\");</p>\n<p>var player = new Clappr.Player({\n  source: 'http://b028.wpc.azureedge.net/80B028/Samples/a38e6323-95e9-4f1f-9b38-75eba91704e4/5f2ce531-d508-49fb-8152-647eba422aec.ism/Manifest(format=m3u8-aapl)',\n  mimeType: \"application/vnd.apple.mpegurl\",\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});</p>\n<p>player.attachTo(playerElement);</p>\n<p>```\n. @derrod thanks done deal https://github.com/clappr/clappr#add-mimetype-for-extension-less-url</p>\n<p>We're working to provide a better documentation ;(\n. We'll do that in a different task\n. Actually we can even remove this check since <a href=\"https://github.com/dailymotion/hls.js/blob/7584655ebd1de4297c6004ade6b5927f790511ff/src/hls.js#L21\"><code>HLSJS.isSupported()</code></a> already doest that.\n. @569934390 can we close this?\n. Cool @cowai thanks, looks great, I'd also add documentation to <a href=\"https://github.com/clappr/clappr#add-mimetype-for-extension-less-url\">README</a> and <a href=\"https://github.com/clappr/clappr/blob/master/src/components/player.js#L70\">the code</a>.</p>\n<p>Also there <a href=\"https://github.com/cowai/clappr/blob/master/src/base/utils.js#L26\">is code repetition =(</a> can we use the existent version? if not, we should try to re-use and specialize that code.\n. I agree with @dayvson , it's better to keep a single \"api\" for the common and provide a way to specific extension (not common for every playback).</p>\n<p><code>javascript\nhlsConfig:{\n  buffer: \"..\",\n  extension: { hlsjsSpecific: \"xx\" }\n}</code>\n. Great work @tjenkinson =) congrats, I'll try to test this build later (with hls, mp4 ... ) but I think most of the <code>dependencies</code> are really clappr-dependency :P like <a href=\"https://github.com/clappr/clappr/blob/master/src/components/loader/loader.js#L7\">uniq</a>, they're not only dev.\n. &gt; My understanding is that dev dependencies are the dependencies needed for a developer to work on the project and built it etc. <code>dependencies</code> are the dependencies that are required in order for the project to be run/used by a user. </p>\n<p>I think the same.</p>\n<blockquote>\n<p>Because the entire project is bundled into the clappr.min.js file this is all the user needs in order to use the project. The entry point that the end user should use to run the project is what's specified by the main property, which is dist/clappr.min.js.</p>\n</blockquote>\n<p>Yes too.</p>\n<blockquote>\n<p>For example if someone else in a separate project does <code>npm install clappr</code> they will get clappr.min.js and that's it.</p>\n</blockquote>\n<p>Yes too but I think if you move those dependencies to <code>devDependencies</code>, the final bundle <strong>clappr.min.js</strong> will throw an error because <code>uniq</code> and the others are not contained within it. I think when you do <code>npm install</code> it'll install all packages but it'll not \"bundle\" them inside clappr.</p>\n<p>If you think about <code>Mocha</code>, it's necessary only on dev machines, that's okay, we don't need to carry it to all clients (this is <code>devDependency</code> to me) but if we need to include that on our clappr we need to explicitly declare it under <code>dependency</code>. </p>\n<p>That's my understanding (I grasp that from using: bundler, pip, maven, gradle ...) but I really don't have 100% confidence with <code>npm</code>. What you can do to test is:</p>\n<p><code>shell\nvim package.json #(move everything to devDependency)\nrm -rf node_modules &amp;&amp; rm npm-shrinkwrap.json\nnpm install\nnpm start</code></p>\n<p>And try to see on browser if there is any error. You might even notice final clappr size may be shorter.\n. You're right, as I said of all those package managers (bundler, maven, pip ...) all of them includes libs declared as <code>dependency</code> and exclude <code>dev|test Dependency</code>. </p>\n<p>If we'd use only npm to build the bundle, we probably would need to declare them as real <code>dependency</code> but in the end webpack will do the job of building clappr.min.js with all dependencies.</p>\n<p>But anyway, I still think we need to <strong>document</strong> the intention under <code>dependency</code> because declaring it as <a href=\"http://stackoverflow.com/a/19341028\"><code>devDependency</code></a> we're assuming that they are not required for production. (and although <code>lodash.uniq</code> is not required for our clients it's required for clappr)</p>\n<blockquote>\n<p><strong>devDependencies</strong> are for the development-related scripts, e.g. unit testing, packaging scripts, documentation generation, etc.</p>\n<p><strong>dependencies</strong> are required for production use, and assumed required for dev as well.</p>\n</blockquote>\n<p>If we think in terms of Clappr, <code>lodash.uniq</code> is a real dependency.\n. maybe it's better to open this \"issue\" on https://github.com/dailymotion/hls.js with @mangui \n. I think yes @cowai , https://github.com/clappr/clappr/blob/master/src/playbacks/hls/hls.js#L36</p>\n<p><code>javascript\nnew Clappr.Player({\n  hlsjsConfig: {\n    debug : false,\n    autoStartLoad : true,\n    maxBufferLength : 30,\n    maxBufferSize : 60*1000*1000,\n    liveSyncDurationCount : 3\n  }, source: \"http://my.live.video/hls.m3u8\"\n})</code></p>\n<p>also can we close this one?\n. can I close this @cowai ?\n. @cowai try this (I'm not sure about what error would be, it's not an event though):</p>\n<p>``` javascript\nvar tries = 3\n//.. after clappr's creation</p>\n<p>clappr.on(Clappr.Events.PLAYER_ERROR, function(error) {\n  var playback = clappr.core.getCurrentPlayback()\n  if (playback.name !== 'hls') return</p>\n<p>if (error.code === error.MEDIA_ERR_DECODE &amp;&amp; tries &gt; 0) {\n    tries -= 1\n    playback.hls.recoverMediaError()\n  }\n})\n<code>``\n. the</code>servertime<code>feature is pretty neat, congrats! \n. I'd rename</code>serverTime<code>to</code>actualLiveServerTime<code>.\n. I was wondering how about you make this an external plugin? it'd be a great plugin ;)\n. @cowai :) thanks, you're right! it'd probably require to override it... I'll talk with some members soon (which are working on redoing media control/seek time)\n. @cowai thank you so much and sorry for making you wait so long.\n. man your idea was cool! :) \n. yep @cowai we're having insights about its usage.\n. We do have lots of live streams, some of them will be much much easier to use (dvr) if we provide the current time and then we can build a UX over it.\n. @tjenkinson :beers: \n. Maybe we'll need to trigger</code>PLAYBACK_BUFFERFULL<code>on</code>Hls.Events.FRAG_BUFFERED<code>. Yeah, weird, it's better to dig a little more (isolating this):\n- it can be something on clappr or\n- an issue on hls.js or ff.... \n. @cpeterso ^\n. @tjenkinson I think in order to trigger the first BUFFERFULL it does:\n- listen [media download progress](https://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L211) (this happens before any other event I guess)\n- [checks](https://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L228) if [buffered.end](http://www.w3schools.com/tags/av_prop_buffered.asp)</code>+ 0.05` is already done... and on the second passing and then it triggers a BUFFERFULL</p>\n<p>About the poster, I don't know, I'll check it\n. Hey @tjenkinson you're probably right, I went to <a href=\"http://cdn.clappr.io/\">http://cdn.clappr.io/</a> and enabled debug log <code>Clappr.Log.setLevel(0)</code> and then I loaded <code>http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8</code> and just observed the event output:</p>\n<p>clappr.min.js:9 [debug][Container] container:mouseenter\nclappr.min.js:9 [debug][Container] container:mouseleave\nclappr.min.js:9 [debug][Container] container:mouseenter\n<strong>clappr.min.js:9 [debug][hls] playback:buffering hls</strong>\nclappr.min.js:9 [debug][Container] container:state:buffering Container\nclappr.min.js:9 [debug][Container] container:mouseleave\nclappr.min.js:9 [debug][hls] playback:level:switch Object {level: 3}\nclappr.min.js:9 [debug][hls] playback:highdefinitionupdate true\nclappr.min.js:9 [debug][Container] container:highdefinitionupdate true\nclappr.min.js:9 [debug][hls] playback:bitrate Object {height: 720, width: 1280, bandwidth: undefined, bitrate: 2149280, level: 3}\nclappr.min.js:9 [debug][Container] container:bitrate Object {height: 720, width: 1280, bandwidth: undefined, bitrate: 2149280, level: 3}\nclappr.min.js:9 [debug][hls] playback:settingsupdate\nclappr.min.js:9 [debug][Container] container:settingsupdate\nclappr.min.js:9 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nclappr.min.js:9 [debug][hls] playback:settingsupdate\nclappr.min.js:9 [debug][Container] container:settingsupdate\nclappr.min.js:9 [debug][hls] playback:settingsupdate\nclappr.min.js:9 [debug][Container] container:settingsupdate\nclappr.min.js:9 [debug][hls] playback:loadedmetadata Object {duration: 634.583955, data: Event}\nclappr.min.js:9 [debug][Container] container:loadedmetadata Object {duration: 634.583955, data: Event}\nclappr.min.js:9 [debug][hls] playback:level:switch Object {level: 4}\nclappr.min.js:9 [debug][hls] playback:highdefinitionupdate true\nclappr.min.js:9 [debug][Container] container:highdefinitionupdate true\nclappr.min.js:9 [debug][hls] playback:bitrate Object {height: 1080, width: 1920, bandwidth: undefined, bitrate: 6221600, level: 4}\nclappr.min.js:9 [debug][Container] container:bitrate Object {height: 1080, width: 1920, bandwidth: undefined, bitrate: 6221600, level: 4}\n<strong>clappr.min.js:9 [debug][hls] playback:ready hls</strong>\nclappr.min.js:9 [debug][Container] container:ready Container\n<strong>clappr.min.js:9 [debug][hls] playback:play</strong>\nclappr.min.js:9 [debug][Container] container:play Container\nclappr.min.js:9 [debug][MediaControl] mediacontrol:playing\nclappr.min.js:9 [debug][t] play\n<strong>clappr.min.js:9 [debug][hls] playback:bufferfull hls</strong>\nclappr.min.js:9 [debug][Container] container:state:bufferfull Container\nclappr.min.js:9 [debug][Container] container:mediacontrol:enable</p>\n<p>Bufferfull could happen before\n. @jstabenow sorry, I'll try to take a look on that =/, you can force clappr to use FlashHLS instead of hlsjs..</p>\n<p>``` javascript</p>\n<p>({\nplugins: { playback: [Clappr.FlasHLS ]}\n})</p>\n<p>```\n. Actually the solution proposed by @tjenkinson works :) but we need to check if there is any problem with that, we may fix that tomorrow lol\n. In case you missed, tjenkinson's solution:</p>\n<p>``` javascript\n//HTML5Video uses canplay -&gt; The canplay event occurs \n//when the browser can start playing the specified audio/video \n//(when it has buffered enough to begin).\n  ready() {\n    this.trigger(Events.PLAYBACK_READY, this.name)\n    if (this.firstBuffer) {\n      this.trigger(Events.PLAYBACK_BUFFERFULL, this.name)\n      this.firstBuffer = this.buffering = false\n    }\n  }</p>\n<p>```\n. @jstabenow can you test it with this <a href=\"https://gist.github.com/leandromoreira/61436e5e31d48818df7c/archive/fff2444cb675c75ec2baea46938c19a22ad61986.zip\">build</a> ?\n. @jfairley can you give me any project where I can see that UX? (I tried to find on google but none show up :( )\n. Thanks :) I'm gonna see them\n. are you using ec6?\n. awesome :) looks GREAT to me\n. @alexandrevicenzi can we close this one?\n. thanks :D\n. @me-vlad is this still happening?\n. I thought it was only an annoying warning https://bugzilla.mozilla.org/show_bug.cgi?id=984146 maybe we'll need to update babel (since I think it's the culprit of it)\n. http://stackoverflow.com/questions/33858349/fixing-mutating-the-prototype-of-an-object-in-babeljs-6\n. Hi @tanchun , <a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">cors</a> is a mechanism that allows restricted resources (e.g. playlists, media, json, fonts...) on a web page to be requested from another domain outside the domain from which the resource originated. It basically use http headers and browsers to enforce it.</p>\n<p>You need to <a href=\"http://enable-cors.org/server.html\">enable it on your server.</a></p>\n<p>Here's a nginx example:</p>\n<p><code>nginx\nlocation / {\n  add_header 'Access-Control-Allow-Origin' '*';\n  add_header 'Access-Control-Allow-Credentials' 'true';\n  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n}</code></p>\n<p>Very often we run servers locally (http://localhost:8000) and try to consume media from a different domain (http://example.com), what we can do is: either edit <code>vim /etc/hosts (127.0.0.1 example.com)</code> or to enable cors on server side.\n. @chovy you can't circumvent cors at the player/browser, what you can do is to use FlasHLS instead of hlsjs:</p>\n<p><code>javascript\n({\nplugins: {playback: [Clappr.Clappr.Flashls]}\n})</code>\n. @chovy try to ask to the server people to add the <a href=\"http://enable-cors.org/\">needed headers</a> but if you can't then there is no way, this is a security thing imposed by the browsers.\n. Hey @philcrump can you test with this url http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 it may be related to your hls streaming. Try to use <a href=\"http://sinclairmediatech.com/looping-over-an-input-with-ffmpeg/\">ffmpeg</a> or nginx-rtmp:\n. @philcrump we were using <a href=\"https://github.com/brocaar/nginx-rtmp-dockerfile/blob/master/nginx.conf#L12\">this config</a> which @brocaar did a long time ago, it may work for you.\n. I don't know how to help you, try this one.\n- it may be related to ffmpeg version. \n- it may be related to your rtmp input. (are you setup everything okay?) </p>\n<p>Try to ingest from another rtmp, preferable something public or outside of your network.</p>\n<p>``` nginx\ndaemon  off;</p>\n<p>events {\n    worker_connections 1024;\n}</p>\n<p>rtmp {\n    server {\n        listen 1935;\n        chunk_size 4000;</p>\n<pre><code>    application encoder {\n        live on;\n        exec /usr/local/nginx/ff/ffmpeg -i rtmp://localhost:1935/encoder/$name \n          -c:a libfdk_aac -b:a 64k -c:v libx264 -b:v 200k -f flv -g 15 -r 15 -s 426x240 -preset superfast -profile:v baseline rtmp://localhost:1935/hls/$name_240p264kbs;\n    }\n\n    application hls {\n        live on;\n        hls on;\n        hls_fragment_naming system;\n        hls_fragment 5s;\n        hls_path /usr/local/nginx/html;\n        hls_nested on;\n    }\n}\n</code></pre>\n<p>}</p>\n<p>```\n. <hr></p>\n<p>\u6211\u5df2\u7ecf\u4f7f\u7528\u8c37\u6b4c\u7ffb\u8bd1  translate.google.com\uff0c\u6211\u8ba4\u4e3a\uff0c\u4f60\u7684\u6bcd\u8bed\u662f\u4e2d\u56fd\u4eba\uff0c\u6211\u5f88\u62b1\u6b49\uff0c\u6211\u4e0d\u77e5\u9053\u4f60\u7684\u8bed\u8a00\uff0c\u4f46\u6211\u60f3\u4f60\u95ee\u8fc7\uff1a</p>\n<p><em>\u60a8\u5982\u4f55\u9690\u85cf\u63a7\u5236\u680f\uff1f\u5bf9\u4e8e\u8fd9\u4e00\u4e2a\uff0c\u4f60\u53ef\u4ee5\u5f00\u59cb <code>chromeless</code> (github.com/clappr/clappr#chromeless\uff09\u6216'disable`\u5728\u521b\u5efa\u540e\u7684\u5a92\u4f53\u63a7\u5236\u3002\n</em>\u5982\u4f55\u8ba9\u89c6\u9891\u5168\u5c4f\u62c9\u4f38\uff1f\u6211\u4e0d\u660e\u767d\u8fd9\u4e2a\u95ee\u9898\u3002</p>\n<hr>\n\n<p>I have used google translator (https://translate.google.com/) and I supposed that your native language is Chinese and I am sorry that I don't know  your language, but I think you've asked:\n- How you can hide the control bar? For this one you can either start <a href=\"https://github.com/clappr/clappr#chromeless\"><code>chromeless</code></a> or <code>disable</code> the media control after its creation.\n- How to make the video full screen stretch? I don't understood this question.</p>\n<p><hr>\n. still a problem?\n. @sxh615 what device are you using? what browser are you using? what clappr version? did you try http://cdn.clappr.io/ with http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 ?\n. @sxh615 can I close this one? people are using clappr mostly with firefox or chrome on android &gt; 4 and they seem fine. If you still are facing errors please gives us more details about it.\n. \ud83d\ude4f . Hey @flavioschuindt  which device are you using? what android version?\n. I could reproduce this on <strong>Nexus 4 (OS 5.1.1) - Chrome 46.0.2490</strong> with <code>http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8</code>.</p>\n<blockquote>\n<p>It starts in live mode and after a long time it starts to play (in my case) but not smooth though\n. The <code>master</code> build is playing VOD hls just fine, we still need to check live though.\n. @flavioschuindt I just used this stream (http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8) on my android and I didn't see that Live to Vod transition although I have used 10M wifi, I'll check it later with less bandwitdht\n. In theory it shouldn't affect how the player works, what you can do to test is use the bare tag video (testing the few streams (with different sizes) to see):</p>\n</blockquote>\n<p><code>html\n    &lt;video\n        src=\"http://devimages.apple.com/iphone/samples/bipbop/bipbopall.m3u8\"\n        height=\"300\" width=\"400\"&gt;\n    &lt;/video&gt;</code></p>\n<p>And repeat the same tests, we use video tag as base to hls player on iphone / mobile.\n. You can read the <a href=\"https://developer.apple.com/library/ios/technotes/tn2224/_index.html\">apple's recommendation about hls encode/segmentation</a>.</p>\n<p>Well, most of the android (&gt; 4.x.x) should play <strong>hls</strong> and since we rely on video tag, if you can't play your hls stream on bare video tag then clappr won't too :(</p>\n<p><code>html\n&lt;video id=\"live\"  autoplay controls&gt;\n    &lt;source src=\"...playlist.m3u8\" /&gt;\n&lt;/video&gt;</code>\n. We can't know if it's live or VOD right away, and we decide to use this rule down here to decide, maybe we can always start as VOD and then postpone this decision but I still think you might see VOD and then LIVE, I'll check that later :) thanks</p>\n<p><code>javascript\n[0, undefined, Infinity].indexOf(this.el.duration) &gt;= 0 ? Playback.LIVE : Playback.VOD</code>\n. We try to avoid this kind of coupling, ;/ we'll think of something else (besides to get the playlist data is not that simple as it might look)\n. Sure @tjenkinson</p>\n<p>That's what we should do when is possible override the <a href=\"https://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L113\"><code>getPlaybackType</code></a></p>\n<p>We do that for dash https://github.com/clappr/dash-shaka-playback/blob/master/index.js#L43 and we could do for hls.js :+1: </p>\n<p>``` javascript\n//we can start it as vod\nthis.isLive = false\n// overridade\ngetPlaybackType() { return this.isLive ? Playback.LIVE : Playback.VOD }</p>\n<p>// turn it on on that event\nhls.on(Hls.Events.LEVEL_LOADED, (event, data) =&gt; data.details.live)\n```</p>\n<p>What do you think?</p>\n<p>Would be nice if we find another way to do that, <a href=\"https://github.com/dailymotion/hls.js/issues/144\">easier and faster</a>.\n. About the <code>m3u8</code> blacklist I have no idea why :octopus: </p>\n<p>I think this is very similar to what html5video does. We can test it to see and if it's possible I'd suggest to reuse <a href=\"https://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L293\"><code>html5video.canplay</code></a> in order to avoid duplication:</p>\n<blockquote>\n<p>if you look closely both <code>returns</code> (<a href=\"https://github.com/clappr/clappr/blob/master/src/playbacks/html5_audio/html5_audio.js#L45\">1</a> and <a href=\"https://github.com/clappr/clappr/blob/master/src/playbacks/html5_audio/html5_audio.js#L48\">2</a>) relies on <code>canPlayType</code> :P</p>\n</blockquote>\n<p>``` javascript\n//introduce the common pattern\nHTML5Video._canPlay(type, mimetypes, resource, mimeType) {\n var extension = (srcUrl.split('?')[0].match(/.<em>.(.</em>)$/) || [])[1]\n var mimeTypes = mimetypes[extension] || mimeType\n  mimeTypes = (mimeTypes.constructor === Array) ? mimeTypes : [mimeTypes]</p>\n<p>var media = document.createElement(type)\n  return !!find(mimeTypes, (mediaType) =&gt; !!media.canPlayType(mediaType).replace(/no/, ''))\n}\n//use it on video\nHTML5Video.canPlay(resource, mimeType) {\n  return HTML5Video._canPlay('video', MIMETYPES, resource, mimeType)\n}\n//use it on audio\nHTML5Audio.canPlay(resource, mimeType) {\n var mimetypes = {\n   'wav': ['audio/wav'],\n   'mp3': ['audio/mp3', 'audio/mpeg;codecs=\"mp3\"'],\n   'aac': ['audio/mp4;codecs=\"mp4a.40.5\"'],\n   'oga': ['audio/ogg']\n }\n  return HTML5Video._canPlay('audio', mimetypes, resource, mimeType)\n}</p>\n<p>```</p>\n<p>What do you think? (if it's right, it's smaller, easier to reason about and sharing the behavior a.k.a. no dup code)</p>\n<p>Btw, we can't take any decision based only on extension given that some browsers can't play a specific \"extension\" so it's safer to ask the browsers <code>media.canPlayType</code>\n. cool @tjenkinson I'd suggest to update the documentation on <a href=\"https://github.com/clappr/clappr/blob/master/src/base/playback.js#L122\">playback.canPlay</a> to reflect this direction <strong>if it is provided the mime type it should be used instead of the url scheme</strong></p>\n<p>I'm sorry :( for being so cranky! <img alt=\"cranky\" src=\"http://vignette2.wikia.nocookie.net/donkeykong/images/9/96/Cranky_Complaining.gif/revision/latest?cb=20100815235935\" />\n. LGTM I'll merge, as always thanks @tjenkinson \n. @tjenkinson since this <code>setupSrc</code> is new the only playback that would need to override would be dash, I think this PR it's pretty cool :+1: </p>\n<p>The \"bad\" parts is: \n- it enforces playbacks to always override (we can at least document this <code>@method</code> )\n. =) I think it's good to remove that on this PR\n. Thanks @flavioschuindt :), we need to take a look at these problems.</p>\n<p>If you can, it'd help to remote debug a chrome but before you start the media, turn on the logger, go to console and type: <code>Clappr.Log.setLevel(0)</code> and then start the video and copy and paste the log here and also any error you found on console.\n. can you test it against this <a href=\"https://gist.github.com/leandromoreira/61436e5e31d48818df7c/archive/fff2444cb675c75ec2baea46938c19a22ad61986.zip\">build</a> ?\n. You've done right! I've tested this build using my ADSL but using Android =/ It was working. I'll try to find an iphone to test it.\n. &gt; But I think there is something weird related to the case where I serve only one bitrate: Shouldn't clappr try to play this only bitrate no matter what happens? </p>\n<p>Clappr delegates this responsibility to the vide tag, I'm almost 100% sure that you need to offer audio-only track (plus alternatives video tracks) always on iOS. Clappr doesn't chose what level you should be, this is done by the tag video (in ios and android's case).</p>\n<p>For iOS we usually offers at the minimum 3 bitrates + audio-only tracks. Can we close this issue or do you still think it's relevant to further investigations?\n. I think you can rely on <code>CONTAINER_READY</code>!\n. it'll be great! can we close this and create a new issue about this @tjenkinson ?\n. @floriano12 there is no error happening, the messages you're seeing are warnings. Clappr is working fine, please test on </p>\n<p>http://cdn.clappr.io/\n. Please try to read the readme, if you're using RTMP you also need to add rtmp plugin:</p>\n<p>``` javascript\n<script type=\"text/javascript\" src=\"http://cdn.clappr.io/latest/clappr.min.js\"> \n \n \nvar player = new Clappr.Player({ \nsource: \"rtmp://phpstreaming.com:1935/live?user=QXY9snfYNU\", \nplugins: {'playback': [RTMP]}, \nrtmpConfig: { swfPath: 'dist/assets/RTMP.swf', scaling:'stretch', playbackType: 'live', bufferTime: 1, startLevel: 0, autoSwitch: true, }, parentId: \"#player\" }); \n\n```\n. @floriano12 this is the code :package: that works with RTMP.\n``` javascript\n \n \n \nvar player = new Clappr.Player({ \nsource: \"rtmp://phpstreaming.com:1935/live?user=QXY9snfYNU\", \nplugins: {'playback': [RTMP]}, \nrtmpConfig: { swfPath: 'dist/assets/RTMP.swf', scaling:'stretch', playbackType: 'live', bufferTime: 1, startLevel: 0, autoSwitch: true, }, parentId: \"#player\" }); \n\n```\n. @me-vlad we need to rework the way we override the settings I\n. still a problem?\n. what playback are you using? (mp4, hls, rtmp ...) and browser too? also, it'd better if you open this on level-selector project :P\n. @avreg is the code coverage, this slight decrease/increase is not to worry!\n. @tjenkinson I think this is the initial list:\n- onReady\n- onResize\n- onPlay\n- onPause\n- onStop\n- onEnded\n- onSeek\n- onError\n- onTimeUpdate\n. Hey @nhurf \nI tried at http://cdn.clappr.io/ and it's working just fine, can you test using http://cdn.clappr.io/? Also, try to provide more info: Browser and OS\n. I agree with you and @flavioribeiro already introduced the type so if you develop a YXPlugin we can infer its type.\n. Man Towers is unstoppable and he's still playing\n\n\n. Thanks @tjenkinson it's a great feature :beers: \n. I did a quick research with the most used players:\n- vimeo: does exactly what you proposed;\n- youtube: doesn't exit fullscreen, instead, it offers more content [it could be a plugin, end of the video] and shows permanently the media control;\n- netflix: offers content and jump to the \"sequence\" or\n- we can came up with something new (or mixed solution).\nI personally think we should take advantage when user is on fullscreen to build engagement. Maybe initially just keeping the media control visible but it might have implications over UX.\n@gofdias what are you thoughts on this?\n. @dinhkhaihtc I just tested using CDN and it's okay, it's probably something related to your stream (your input or output).\n``` javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\n``\n. Thanks @tjenkinson \n. yep I don't seeFRAGMENT_LOADED` for any other playback type... and how is it useful to the plugins system?\n. It looks great to me :) thoughts @clappr/core ?\n. I'm sorry man =) and once again thank you very much.\n. @NicholasAsimov @thiagopnts is working hard to remove external dependencies but we're always happy to merge PRs \ud83d\ude04 \n. it seems we should already do that https://github.com/clappr/clappr/blob/master/src/base/events.js#L90\n. @canhlinh we're using it with no further problem, can you test with another hls stream? also is there any problems popping up on console?\n. I'm in favor of another property (like we did for ready) or we should change everything to methods :P what do you think @clappr/core ?\njavascript\nget ended() {  return this._ended }\n//or\nisEnded() { return this._ended }\nI vote in favor of property because the states (ready, ended, paused ...) sound more like a property than a method/function.\n. @clappr/core are we going to use attribute or method to cover this ? hasEnded (or ended) Also, I don't know why Travis failed.\n. Cool @tjenkinson are you going to rebase or do another PR for ended instead of hasEnded()\n. I'll close, thanks once more :)\n. @shaharmor we already did that! you can call configure after clappr is created.\n``` javascript\nplayer = new Clappr.Player({})\n//..\nplayer.configure({new: \"stuffs\"})\n```\n. I see, just out of curiosity, what is the problem of doing this.\n``` javascript\n//globaly\nmyapp.player.defaults = {}\n//all may clapprs\nvar player = new Clappr.Player(myapp.player.defaults);\nvar player1 = new Clappr.Player(myapp.player.defaults);\nvar player2 = new Clappr.Player(myapp.player.defaults);\n```\nBtw, when we usually have more than one player per page, we just load a bunch of posters and a single player. :) just reload them when user click on poster.\nplayer.load({source: [\"newsource\"]})\n. Hi @croepha I think this might be related to your hls stream, just try with this stream instead.\n\"http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8\"\nApple has a tool to validate hls stream, try to validate yours.\nhttps://developer.apple.com/library/ios/technotes/tn2235/_index.html\n. cool thanks @croepha , one thing you can do is to force clappr to use Flashls instead.\n. thanks @zczcyc0201 :) did you try play at demo page? For me it's not going to fullscreen. Also what OS are you using?\n. Thanks :)\n. Thank you so much @cacciato \n. @cacciato and @tjenkinson I tried to fix this here but, Flashls is reporting only bitrate:\njavascript\n{\naudio: false\naudio_stream_id: null\naverageduration: NaN\nbitrate: 2564000\ncodec_aac: false\ncodec_h264: false\ncodec_mp3: false\nduration: NaN\nend_seqnum: 0\nfragments: Object\nfixed: false\nlength: 0\n__proto__: Object\nheight: 0\nindex: 5\nmanifest_index: 5\nname: null\nredundantStreamId: 0\nredundantStreamsNb: 0\nstart_seqnum: 0\ntargetduration: NaN\nurl: \"http://localhost/dvr/gnews24/2564/playlist.m3u8\"\nurls: Object\nwidth: 0\n}\nSo, even if we fix that, Flashls should send height/width/bandwidth (considering that el.getLevels() is the correct way)\n. @croepha \nYour second snippet should work, although I recommend you to use the later form:\n``` javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n  plugins: [Clappr.FlasHLS],\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\n```\nAlso, we introduce divs in from of the player so the right way to check if you're using Flash is not by right clicking. :) You can either look for an tag <object on dom or:\njavascript\nconsole.log(player.core.getCurrentPlayback().name);  // it should print the playback being used\n. Thank you very much. I'd say just change the documentation @name for @property and we're good to go.\njavascript\n/**\n * Template for this view's container...\n *\n * @property containerTemplate\n * @type String\n * @default \"<div/>\"\n */\nWe're following yuidoc and I didn't see any @name there .\n. Thank you very much @tjenkinson :)\n. Thanks \n. THANK YOU SO MUCH :) \nI always want that :) :beers: \n. Also, please try to test it with:\n- Chrome\n- Firefox\n- IE\n- Edge\n- Safari\n- IOs \n- Android FF\n- Android Chrome\nTo see if this doesn't break anything. There are several services for this like https://www.browserling.com/ \n. @hounvs please take a look at @tjenkinson suggestion also can you squash your commits into one. :) don't be afraid to ask for help.\n. Thanks @hounvs :+1: \n. Thanks @hounvs yeah git sometimes can give you a hard time. I just asked you to squash because we usually make each commit atomic, like each commit do a single thing and your PR had many commits to do the same. :)\nOnce again thank you very much, \nWhen I was learning git this helped me a lot https://codewords.recurse.com/issues/two/git-from-the-inside-out also about squash this one can help too https://www.youtube.com/watch?v=qh9KtjfjzCU\n. can we close this one?\n. I have similar errors not only for clappr but with others projects and I solved that migrating to the latest node.\n. > Any idea what the issue is with older node (or presumably, npm@2)?\nNo, I struggled with this same error #include \"nan.h\" for multiple libraries :( then I read that one possible solution would be upgrade node. I wish I knew more about Node to help you, @tjenkinson is a techie savior with node lol\n. Thanks for sharing\n. Thanks :+1: \n. nice catch @bikegriffith thank u very much, we hope to see more pr's from u :beers: \n. @tjenkinson I just didn't review it yet :P \n. @569934390 how can we reproduce this error? what OS/Browser/Stream/Steps?\n. thanks\n. @joaopaulovieira I tried but I couldn't ;/ the source has changed but the poster remains the same.\nhttp://clappr.io/demo/?src=https://video-dev.github.io/streams/x36xhzz/x36xhzz.m3u8&poster=https://icdn9.digitaltrends.com/image/donkey-kong-country-tropical-freeze-screenshot-7-800x450-c.jpg?ver=1. @djevo1 since we're using hls.js (a js hls implementation) you might be facing CORS problems, anyway is there any error on your console as @hounvs asked you?\n. Looks great to me too! thank you @bikegriffith \n. ping @djevo1 ?\n. :') you welcome\n. Hi @cacciato can you set log level to debug (go to console -> Clappr.Log.setLevel(0) before you start to play) and copy here the final part where CONTAINER_PLAY is called alongside with a couple of log line.\n. Thank you very much @bikegriffith :)\nI think since it's almost impossible (in an easy and clean way) for Clappr to figure out whether it is playing and audio or video media.\nYou could inform that on player's setup. Maybe by adding a plugin to handle that, @flavioribeiro already created an issue for something similar that https://github.com/clappr/clappr/issues/197 there are great ideias there.\nWhat do you think @bikegriffith and @tjenkinson ?\njavascript\nnew  Clappr.Player({plugins: [ClapprAudioUI]}\n. Maybe a hint this.options.audioOnly instead of a poster config this.options.posterConfig.hideOnPlay can be useful in other places too.\n. @bikegriffith thanks ;) can you squash the commits into a few? also for the documentation part I think you might add audioOnly as whole new option, after that we can merge it.\n. Thanks a lot @bikegriffith :)\n. agreed @tjenkinson we may need to change back to canplaythrough\n. good Lord, aren't you a trooper ?! :) great work, I'll find a time to review it but anyway thanks for this load of work.\n. Great work :) thank you much @tjenkinson an awesome contribution! :clap: :clap: :clap: :clap: \n. @michaelcunningham19 try this:\njavascript\nvar player = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640,\n  plugins: [Clappr.FlasHLS]\n});\nWe've changed the way we handle plugins but it should be retro compatible\n. @michaelcunningham19 try to enable log level debug \n``` javascript\n// before instantiate the player\nClappr.Log.setLevel(0);\n//..\n```\nAnd try paste the log in here.\n. Thanks @michaelcunningham19 I think we have a clue\nerror on eventcore:containers:createdtrigger-TypeError: Object doesn't support property or method 'find'\n. Great, thanks @michaelcunningham19 :)\nI think MEDIA_ERR_SRC_NOT_SUPPORTED occurs on IE10 because we try to setup video src to m3u8.\nI'll try to find a spare time to take a look into this but feel free to send a PR. \n. https://github.com/clappr/clappr/commit/c35574e76fe5e22acf5ba4dae36ab4599fc1fc00\n. can we close this one @ghaith-bash-imam ?\n. @LagaV you could start by learning the basics behind clappr's architecture and then jump in to build your first plugin and finally get yourself inspired by existent plugins.\n. @LagaV can I close this one since this is the same as https://github.com/clappr/clappr/issues/791 ?\nThis picture shows a PiP that we (globo.com) did internally.\n. I see, well, you could add an option for your plugin:\njavascript\nnew Clappr.Player({ channels: [ {thumb: \"x\", source: \"y\"}, ...]  }\nAnd then based on click you could switch the container :). Now about the default behavior for multiple sources it works like fallback options. \n. :+1: I never liked this shoryuken\n. :+1:  but instead of watermarkLocation we could let this more explicit like watermarkLink\n. I'd also would add README docs :)\n. Just a small thing to fix but this is great. :) thanks @me-vlad \n. @shaharmor we just released one last 8 days but we're preparing a new one too.\n. Cool, It'd be nice also if we update the flahls plugin @me-vlad do you have any planned pr for this?\n. Thanks @me-vlad  :)\n. Closed since https://github.com/clappr/clappr/releases/tag/0.2.31\n. thank you so much @me-vlad :beers: \n. https://github.com/clappr/clappr/issues/796#issuecomment-174968631 we're going to release a new version today\n. Closed since https://github.com/clappr/clappr/releases/tag/0.2.31\n. https://github.com/clappr/clappr/pull/803\n. @GeorgySerga maybe this is something related to your stream (the generation or other issue) , try this:\n- With this stream http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 ?\n- At hls.js demo page ?\n- Did you try chrome on other platform? (like OS or Windows)\n- Using FlasHLS ? (a.k.a plugins: [Clappr.FlasHLS])\n. @GeorgySerga if you still think this is not something related to your input stream and it's working under FlasHLS you might open an issue at hls.js passing all the details there( @mangui ).\n\nThough I must admit that the right click action doesn't show me the flash menu, console shows\n\nThis happens because we cover the flash \"stage\" with an html div (a wrapper container).\n. @GeorgySerga please link the new issue at hls.js here too :), yeah the same guy that did flashls did hls.js so this might be easy.\n. my mistake, I didn't see the link. :) @mangui is an awesome person and amazing developer.\n. if the issue is still happening I'll be happy to reopen.\n. can we close this @Tkamiya ?\n. @tjenkinson THANK YOU VERY MUCH! :clap: :clap: :clap: :clap: Well Done :clap: :clap: :clap: \n. @cowai aren't we able to instrument that by only using its config like fragLoadingMaxRetry?\n. :) I get it! @cowai it makes sense\n. http://dailymotion.github.io/hls.js/demo/\n. https://github.com/clappr/clappr/issues/890 @paunadeu \n. pretty neat congrats again :)\n. I'd assume stop being a safe place, lgtm\n. Thanks :) @michaelcunningham19\nCan you remove dist/ from your commits?\nWe @clappr/core also need to check the final weight added by this polyfill, maybe it's easier to use https://lodash.com/docs#find (that we already have) or even to provide a pollyfill using this or yet use the mozilla polyfill\n. I prefer to fix this instead of adding another dependency at src/plugins/sources.js\n``` diff\n+import find from 'lodash.find'\n-var firstValidSource = this.core.containers.find((container) => container.playback.name !== 'no_op') || this.core.containers[0]\n+var firstValidSource = find(this.core.containers((container) => container.playback.name !== 'no_op') || this.core.containers[0]\n```\nWhat do you think?\n. @michaelcunningham19 do another PR fixing the find with load.find :)\n. Thank you so much @michaelcunningham19 ;) :clap: :clap: :clap: :clap: :clap: :clap: :clap: \n. did you test with latest build version @marijarahman ? I'm pretty sure @tjenkinson fixed that.\n. Thanks @jfairley  :) , What do you think about this @towerz and @tjenkinson ?\n. hey @jfairley since we removed the shoryuken can we close this ? \n. thank you so much @bikegriffith \n. :+1: Thanks, should we implement this on FlasHLS too?\n. @sc0rp10 autoPlay should work with chromless unless you're in a mobile, I tested at http://cdn.clappr.io and it's working.\n``` javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  autoPlay: true,\n  chromeless: true,\n  source: 'http://clappr.io/highline.mp4',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\n```\n. @Det20 \nyou can't do anything for this particular \"issue\" on mobile, you can't use autoStart neither player.play() arbitrary, it must be an user gesture.  \nWhat you can do is to put a button or something then on the click event you trigger player.play()\n. Thanks again @me-vlad :)\n. as always thank you :smile: @tjenkinson \n. https://github.com/dailymotion/hls.js/issues/240\n. We need to fix this to release the new version.\n. thanks @jlmcdonald :)\n. It is not so straightforward and easy as I thought it'd be:\nAt first I tried to update babel:\n``` diff\n-    \"babel-core\": \"^5.8.23\",\n-    \"babel-loader\": \"^5.3.2\",\n+    \"babel-core\": \"^6.5.1\",\n+    \"babel-loader\": \"^6.2.2\",\n+    \"babel-preset-es2015\": \"^6.5.0\",\n loaders: [\n   {\n     test: /\\.js$/,\n\n\nloader: 'babel',\nloader: 'babel-loader',\nquery: { presets: ['es2015'] }\n       },\n```\n\nBut then I started to receive some strange errors while npm tests\nUncaught TypeError: Super expression must either be null or a function, not object\n  at /Users/leandro/src/clappr/test/components/loader_spec.js:4797\nAnd I'm trying some stuffs but none of them have worked until now. \n. thanks @jlmcdonald lol\n. https://github.com/clappr/clappr/commit/393c61afa258f34eb36153a9c4cbebc7495d21cc\n. Hi @ryanwilliams83 if I understood correctly I think since the player is embed at your domain it'll try to download the relative paths from your domain, am I right @mangui ?\nOne thing you could do is to provide a playlist with full path.\n```\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-PLAYLIST-TYPE:VOD\nEXT-X-TARGETDURATION:11\nEXTINF:10.000,\nhttps://xxx.amazonaws.com/url_462/193039199_mp4_h264_aac_hd_7.ts\nEXTINF:10.000,\nhttps://xxx.amazonaws.com/url_463/193039199_mp4_h264_aac_hd_7.ts\n```\n. @ryanwilliams83 \n\nYour suggestion of using absolute url\u2019s inside the .m3u8 playlist is a good solution however I am planing to submit a pull request to mangui to fix the root of the problem in the comming days.\n\nBetter yet :smile: \n. can I close this one @ryanwilliams83 ?\n. @PreDeToR can you test your stream over here? I think FlasHLS (the playback we use) doesn't support DRM.\n. > I have disabled the DRM on the live stream, tested the the LIVE Stream using ffplay and vlc and they both work, yet the player is still causing issues, with the live stream.\nWhat issues? can you share the log?\n\nAny idea, live streaming hls without DRM does not seem to work on FireFox or IE, yet opera seems to work fine.\n\nUsually it is related to how are you generating the hls (or your input)\n. @PreDeToR can you try to run the same stream here? if the issue still persists I think we'll need to create an issue at mangui/flashls.\n. thanks @PreDeToR :)\n. once again tks\n. > are events on playbacks and other internal components considered as private, and only meant to be used by internal code? \nI do't think they're private, see if you're building plugins (container, core and playback) you need to know them.\n\nI think it might be good to create an issue to go through marking methods and properties as private and public.\n\nI think if a given event/property/function is private we should mark it private @private :)\n. Hi @mikeevstropov I think you can use this example to guide you.\n. @mikeevstropov you can also (or at least should be able to):\njavascript\nvar HelloWorld = Clappr.MediaControl.extend({})\n// https://github.com/clappr/clappr/#control-bar-colors\n  var player = new Clappr.Player({\n    source: \"http://your.video/here.mp4\",\n    mediacontrol: HelloWorld\n  });\n@clappr/core do you have any example of custom media control?\n. @mikeevstropov did that last example show any error on console log?\n. @mikeevstropov I think you need to enable log level to debug and see at console log.\n``` javascript\nClappr.Log.setLevel(0);\nvar player  = new Clappr.Player({\n    'source'        : src,\n    'width'         : 400,\n    'height'        : 250,\n    'mediacontrol'  : MyMediaControl\n});\nplayer.attachTo(element);\n``\n. @mikeevstropov what do you wan to do?\n1. Create an entire new Media Control\n2. Tweak the UI a little bit\n3. Add buttons (fetures) to it\n4. Hide features\n. if @clappr/core think it's right we can [fire a new event](https://github.com/clappr/clappr/blob/38182735428fd156ba1eb73eff82953895ea70bc/src/playbacks/no_op/no_op.js#L33) PLAYER_PLAYBACK_NOT_SUPPORTED and even addevents:{'onPlaybackNotSupported': myFn}to it.\n. @its27 it's using one version behind the latest!\n. @mikeevstropovMEDIACONTROL_HIDE` is an event that is triggered at mediacontrol object. can I close this one?\n. @sc0rp10 try this at http://dailymotion.github.io/hls.js/demo/\n. therefore I think might be something related to either your stream or the hls.js\n. Thanks @cmagnuson \n. @lordcris it's working fine, I tested with:\n``` javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://clappr.io/highline.mp4',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640,\n  autoPlay:true\n});\nplayer.attachTo(playerElement);\nsetTimeout(function(){player.seek(25)},4000)\n```\nAre you still facing this issue?\n. @lordcris I just tested at http://cdn.clappr.io/ with hls and it worked too:\n``` javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640,\n  autoPlay:true\n});\nplayer.attachTo(playerElement);\nsetTimeout(function(){player.seek(25)},6000)\n``\n. sorry @lordcris I tested on desktop. Do you want your video to start atx`? \nI think we did a thing for that, you pass a query on the url ?t=10s and the player will play starting at 10 seconds.\n@clappr/core do you remember the parameter name of it? ^\n. @lordcris IMO the player.seek(x) should work.\n. Thank you so much @avreg \n. Maybe it's easier to replace the Poster plugin with this implementation \n. For the SVGS (our icons) https://www.sitepoint.com/tips-accessible-svg/\n. An real example https://www.paypal-engineering.com/2014/09/05/introducing-an-accessible-html5-video-player/ and its github https://github.com/paypal/accessible-html5-video-player\n\nThe goals of this project were to:\n-  Take advantage of the latest web technology; use HTML5 for the video, controls, and captions.\n-  Reduce code weight (the CSS is 5k and JS is about 18k, not minimized!).\n-  Make fully accessible especially to keyboard and screen reader users.\n-  Support captions (uses WebVTT, the HTML5 standard).\n. @dovematrix unfortunately, I don't think so \ud83d\ude1e \n. Thanks @bikegriffith can you remove the dist from your commit before I accept it? \n. Thanks @bikegriffith \n. shouldn't we use another thing in place of shrinkwrap? I mean replacing update_dependencies to check_dependencies with https://www.npmjs.com/package/npm-check-updates\n. I'm with @tjenkinson can we merge this PR @clappr/core ?\n. once again thanks mister @tjenkinson  :smile: \n. Thanks again man :beers: \n. @ieworks hi can you try to run this here http://dailymotion.github.io/hls.js/demo/ ? it might be a restriction of hls.js \n. ping @ieworks \n. @kolpax can you test it here ?\n. yes, bery soon!\n. @kolpax in fact you are only able to seek back when you reach more a threshold (which I believe it's 60s)\n. @ronag we thought it'd be better to only offer the seek back feature when a threshold was reached.\n\nBut you can configure it either on hls (hls.js) or flashls \n. It's working fine here :disappointed: \n. Thanks :) \n. you're on fire :beers: \n. Hi @ronag do you want us to throw an exception when you pass a undefined or null source/sources?\n. Thanks @kolpax and @tjenkinson \n. thanks @tjenkinson \n. :smiley: \n. @clappr/core can we merge this? it is looking good.\n. @ronag how are you changing sources? (through load or ...)\n. @ronag I did that on cdn.clappr.io (using Chrome) with both mp4 and hls and it seems nice, here's the example\n. can we @clappr/core do anything?\n. https://github.com/clappr/clappr/issues/813\n. @clappr/core we decided that at least a two persons should review a PR to then accept it. For me this is good \n. agreed @tjenkinson \n. Thanks @ronag \n. @clappr/core we decided that at least a two persons should review a PR to then accept it. For me this is good \n. @clappr/core can we merge this?\n. You can provide a spinner with no code at all, this will replace the current spinner.\njavascript\nexport default class NoSpinner extends UIContainerPlugin {\n  get name() { return 'spinner' }\n}\nnew Clappr.Player({ plugins: [NoSpinner]})\n. @DavidVentura I don't know if I quite understood you but you can fine tune the size of the live/vod buffer for HLS:\nThe default playback loads configurations, it relies on hls.js:\njavascript\n{\n    hlsjsConfig:  {\n      maxBufferLength : 30,\n      maxMaxBufferLength : 600,\n      maxBufferSize : 60*1000*1000,\n      maxBufferHole : 0.3\n   }\n}\nThe flash playback (you can force its usage) you can learn about this configs here:\njavascript\n{\n    minBufferLength: 0,\n    minBufferLengthCapping: 0,\n    maxBufferLength: 0,\n    maxBackBufferLength: 0\n}\nWe need to work to make the common options under the same key configuration.\n. I don't think there is a way to access that =/ for live events what we did was:\n1. get the images from RTMP (therefore faster than hls)\n2. getting an image for each 10s segment (this makes easy the \"right\" position)\n3. adjusting the \"live\" timestamp between (query string ts=x) server and client\n. We need to look at the playbacks hls.js and flashls looking for events, I guess they offer this.\n. @DavidVentura can you enable logs and then paste the logs in here:\njavascript\nClappr.Log.setLevel(0);\n            var player = new Clappr.Player(\n                {\n                    source: \"https://site/hls/movie.m3u8\",\n                    parentId: \"#player\",\n                    autoPlay: true,\n                    chromeless: false,\n                    playbackNotSupportedMessage: 'bkfsdjlkgjfdslkgos',\n                    poster:\"https://site/loading.jpg\",\n                    disableVideoTagContextMenu: true,\n                });\nYou should see debug logs at FF console.\n. Thanks @DavidVentura I tried to reproduced here (MacOS, FF 44.0.2) but I couldn't ;( \nCan you try to debug to stop at the point where this undefined error occurs? once we know the piece of the code and the context me might fix it. \n. @clappr/core can we map \"clappr.min.js:8:21076\" back with .map ?\n. is still happening @DavidVentura ?\n. This is a pre release, the latest is v0.5.17\n. Thank you so much @jussike \n. [joke]let's make npm silent once for all[/joke]\n. LGTM\n. @tjenkinson is the new bash master ! it's good\n. cool @Marcin666 can we close this one?\n. @mikeevstropov did you tried to use the master/head version? @towerz did solve this problem, I think.\n. please @mikeevstropov if you see it's fixed tell us or close it here :)\n. great success\n. thanks :)\n. Thanks @jussike can you try to reproduce this steps at http://dailymotion.github.io/hls.js/demo/ ?\n. @alouane we use pure video tag for android therefore if can or can not offer support for DVR.\n@clappr/core \nI think hls.js (video tag + MediaSource) supports that, I'm in favor of rolling hls.js before than HtmlVideo5, what do you think?\n. https://github.com/clappr/clappr/commit/295acc7ad28571fe24cf7268baf40c56c593c16c\n. @tjenkinson it's not passing because of old FF\n. good but remove the files @flavioribeiro listed\n. LGTM @towerz \n. did you mean like the FPS?\n. @iongion I'm doing a stats plugin for clappr which will inform the FPS by X seconds, is that helpful? \n. @iongion you're right, thanks! \n. >  I saw you try to perform some framerate detection, please also allow it to be passed from outside for a better more imperative control, especially in the m3u8 playback\nI couldn't understand it =/ can you provide an example?\n. Yes, how about something more \"dynamic\"?\njavascript\n{\n overrideMetrics: function(metrics) {\n     metrics.counters.fps = 10;\n }\n}\nI think this could let users to update certain values instead of passing it statically at initialization, what do you think?\n. done https://github.com/leandromoreira/clappr-stats/blob/master/index.js#L119 feedbacks are welcome\n. @iongion I'm thinking now that both functions can offer you the same final result, ins't? I mean, you also use onReport callback to change/add metrics. Maybe, we should have only one.\n``` javascript\n        onReport: (metrics) => {console.log(metrics)}, //not mandatory: callback function\n        overrideMetrics: (metrics) => {metrics.counter.fps = 30} \nfunction onReport(metrics) {\n     changeMine(metrics)\n     sendToGA(metrics)\n}\n```\n. @3dd13 you could provide your own media control.\njavascript\nMyMC extends { get overrideSomething(){return 1} }\nnew Clappr.Player({external: {mediaControl: MyMC}})\nOr you could create a plugin like level selector which includes itself within the existent media control.\n@clappr/core We need to provide examples about how to write your own media control.. anyway, do you agree with my advices above?\n. LGTM\n. @DavidVentura jsdelivr is hosting an old version of Clappr, can you provide the stream for testing?\n. @lordcris can you try to reproduce this error at http://dailymotion.github.io/hls.js/demo/ ?\n. Thanks @lordcris while using the https://cdn.jsdelivr.net/clappr/latest/clappr.min.js does any errors happens?\n. @lordcris I think the player is canceling the request and issuing a new request, it looks legit.\n1. trying to play a video the player chose an initial quality (1920x1080) \n2. then it can't play it (it took too long to download the chunk), it tries to play a lower quality (640)\n3. the problem persists (it's trying to play the same chuck for two different qualities but over the same single quality bitrate stream)\n4. loop\nThe thing I've noticed was that your master playlist seems to be malformed, all bitrates qualities are pointing to the same quality (1080p), making the adaptation stream not work properly. For instance you have a 426x240 pointing to a 1080p and so on and so forth.\n```\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-STREAM-INF:BANDWIDTH=3978000,CODECS=\"avc1.100.41,mp4a.40.2\",RESOLUTION=1920x1080\nhttp://cdn1.atanassov.net/myliveorigin/mystream_1080p/chunklist_DVR.m3u8\nEXT-X-STREAM-INF:BANDWIDTH=2328000,CODECS=\"avc1.100.40,mp4a.40.2\",RESOLUTION=1280x720\nhttp://cdn1.atanassov.net/myliveorigin/mystream_1080p/chunklist_DVR.m3u8\nEXT-X-STREAM-INF:BANDWIDTH=1228000,CODECS=\"avc1.100.31,mp4a.40.2\",RESOLUTION=854x480\nhttp://cdn1.atanassov.net/myliveorigin/mystream_1080p/chunklist_DVR.m3u8\nEXT-X-STREAM-INF:BANDWIDTH=678000,CODECS=\"avc1.100.30,mp4a.40.2\",RESOLUTION=640x360\nhttp://cdn1.atanassov.net/myliveorigin/mystream_1080p/chunklist_DVR.m3u8\nEXT-X-STREAM-INF:BANDWIDTH=403000,CODECS=\"avc1.100.21,mp4a.40.2\",RESOLUTION=426x240\nhttp://cdn1.atanassov.net/myliveorigin/mystream_1080p/chunklist_DVR.m3u8\n```\nI think, it is trying to download multiple times the same chunk mostly because all qualities are the same single bitrate (therefore player will try to download 1.ts from multiple qualities, trying to adapt, ) you can either solve this issue, giving each bitrate its real chunk list or just point to the 1080p.\n. I could reproduce it here, pasting the log for future reference. I'm gonna try to see what's happening.\n[debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nlog.js:75 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nlog.js:75 [debug][Container] container:stats:report Object {startupTime: 6145, rebuffers: 4, rebufferingTime: 15784, watchingTime: 866, height: 360\u2026}\nlog.js:75 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nlog.js:75 [warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]\nlog.js:75 [debug][hls] playback:levels:switch:end\nlog.js:75 [debug][hls] playback:level:switch Object {level: 0}\nlog.js:75 [debug][hls] playback:highdefinitionupdate false\nlog.js:75 [debug][Container] container:highdefinitionupdate false\nlog.js:75 [debug][hls] playback:bitrate Object {height: 240, width: 426, bandwidth: undefined, bitrate: 403000, level: 0}\nlog.js:75 [debug][Container] container:bitrate Object {height: 240, width: 426, bandwidth: undefined, bitrate: 403000, level: 0}\nlog.js:75 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nlog.js:75 [debug][hls] playback:levels:switch:end\nlog.js:75 [debug][hls] playback:level:switch Object {level: 1}\nlog.js:75 [debug][hls] playback:highdefinitionupdate false\nlog.js:75 [debug][Container] container:highdefinitionupdate false\nlog.js:75 [debug][hls] playback:bitrate Object {height: 360, width: 640, bandwidth: undefined, bitrate: 678000, level: 1}\nlog.js:75 [debug][Container] container:bitrate Object {height: 360, width: 640, bandwidth: undefined, bitrate: 678000, level: 1}\nlog.js:75 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nlog.js:75 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nlog.js:75 [warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]\nlog.js:75 [debug][hls] playback:levels:switch:end\nlog.js:75 [debug][hls] playback:level:switch Object {level: 0}\nlog.js:75 [debug][hls] playback:highdefinitionupdate false\nlog.js:75 [debug][Container] container:highdefinitionupdate false\nlog.js:75 [debug][hls] playback:bitrate Object {height: 240, width: 426, bandwidth: undefined, bitrate: 403000, level: 0}\nlog.js:75 [debug][Container] container:bitrate Object {height: 240, width: 426, bandwidth: undefined, bitrate: 403000, level: 0}\nlog.js:75 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nlog.js:75 [debug][hls] playback:levels:switch:end\nlog.js:75 [debug][hls] playback:level:switch Object {level: 1}\nlog.js:75 [debug][hls] playback:highdefinitionupdate false\nlog.js:75 [debug][Container] container:highdefinitionupdate false\nlog.js:75 [debug][hls] playback:bitrate Object {height: 360, width: 640, bandwidth: undefined, bitrate: 678000, level: 1}\nlog.js:75 [debug][Container] container:bitrate Object {height: 360, width: 640, bandwidth: undefined, bitrate: 678000, level: 1}\nlog.js:75 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nlog.js:75 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nlog.js:75 [warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]\nlog.js:75 [debug][hls] playback:levels:switch:end\nlog.js:75 [debug][hls] playback:level:switch Object {level: 0}\nlog.js:75 [debug][hls] playback:highdefinitionupdate false\nlog.js:75 [debug][Container] container:highdefinitionupdate false\nlog.js:75 [debug][hls] playback:bitrate Object {height: 240, width: 426, bandwidth: undefined, bitrate: 403000, level: 0}\nlog.js:75 [debug][Container] container:bitrate Object {height: 240, width: 426, bandwidth: undefined, bitrate: 403000, level: 0}\nlog.js:75 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nlog.js:75 [debug][hls] playback:levels:switch:end\nlog.js:75 [debug][hls] playback:level:switch Object {level: 1}\nlog.js:75 [debug][hls] playback:highdefinitionupdate false\nlog.js:75 [debug][Container] container:highdefinitionupdate false\nlog.js:75 [debug][hls] playback:bitrate Object {height: 360, width: 640, bandwidth: undefined, bitrate: 678000, level: 1}\nlog.js:75 [debug][Container] container:bitrate Object {height: 360, width: 640, bandwidth: undefined, bitrate: 678000, level: 1}\nlog.js:75 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nlog.js:75 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nlog.js:75 [warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]\nlog.js:75 [debug][MediaControl] mediacontrol:mousemove:seekbar Object {originalEvent: MouseEvent, isTrusted: true, screenX: 406, screenY: 261, clientX: 406\u2026}\nlog.js:75 [debug][hls] playback:levels:switch:end\nlog.js:75 [debug][hls] playback:level:switch Object {level: 0}\nlog.js:75 [debug][hls] playback:highdefinitionupdate false\nlog.js:75 [debug][Container] container:highdefinitionupdate false\nlog.js:75 [debug][hls] playback:bitrate Object {height: 240, width: 426, bandwidth: undefined, bitrate: 403000, level: 0}\nlog.js:75 [debug][Container] container:bitrate Object {height: 240, width: 426, bandwidth: undefined, bitrate: 403000, level: 0}\nlog.js:75 [debug][MediaControl] mediacontrol:mouseleave:seekbar Object {originalEvent: MouseEvent, isTrusted: true, screenX: 404, screenY: 266, clientX: 404\u2026}\nlog.js:75 [debug][MediaControl] mediacontrol:mousemove:seekbar Object {originalEvent: MouseEvent, isTrusted: true, screenX: 404, screenY: 266, clientX: 404\u2026}\nlog.js:75 [debug][MediaControl] mediacontrol:show MediaControl\nlog.js:75 [debug][Container] container:mediacontrol:show\nlog.js:75 [debug][MediaControl] mediacontrol:mouseleave:seekbar Object {originalEvent: MouseEvent, isTrusted: true, screenX: 396, screenY: 274, clientX: 396\u2026}\nlog.js:75 [debug][MediaControl] mediacontrol:show MediaControl\nlog.js:75 [debug][Container] container:mediacontrol:show\nlog.js:75 [debug][MediaControl] mediacontrol:show MediaControl\nlog.js:75 [debug][Container] container:mediacontrol:show\nlog.js:75 [debug][MediaControl] mediacontrol:show MediaControl\nlog.js:75 [debug][Container] container:mediacontrol:show\nlog.js:75 [debug][MediaControl] mediacontrol:hide MediaControl\nlog.js:75 [debug][Container] container:mediacontrol:hide\nlog.js:75 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nlog.js:75 [debug][hls] playback:levels:switch:end\nlog.js:75 [debug][hls] playback:level:switch Object {level: 1}\nlog.js:75 [debug][hls] playback:highdefinitionupdate false\nlog.js:75 [debug][Container] container:highdefinitionupdate false\nlog.js:75 [debug][hls] playback:bitrate Object {height: 360, width: 640, bandwidth: undefined, bitrate: 678000, level: 1}\nlog.js:75 [debug][Container] container:bitrate Object {height: 360, width: 640, bandwidth: undefined, bitrate: 678000, level: 1}\nlog.js:75 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nlog.js:75 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nlog.js:75 [warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]\n. It seems that the player is falling on a non-fatal error on hls.js and it's retrying forever (or at least many and many times) to recover. \n. The hls.js error is a non-fatal \"fragLoopLoadingError\"\n. @lordcris\nI could reproduce it on hls.js demo page http://dailymotion.github.io/hls.js/demo/ I think this is not a clappr's problem and maybe not even a hls.js problem, it seems like a problem on your stream creation.\n@mangui what are you thoughts on this problem: \nhls.js keeps retrying to download the same .ts files over and over again.\nSteps:\n1. go to http://dailymotion.github.io/hls.js/demo/ and try to play http://testing.atanassov.net/playlist.m3u8\n2. wait for 4 seconds and then seek to the middle of the video\n3. wait for 4 seconds and then seek to near of the initial of the video\n4. the error \"fragLoopLoadingError\" will happen and player tries to re-download the same .ts files over and over again.\n@clappr/core \nOr maybe we should stop retrying after X times of a non-fatal error too. (and zeroed this X time on time_update event)\n@lordcris\nYou can try to force the flash usage:\njavascript\nplugins: [Clappr.FlasHLS]\n. I think it is... mostly because I never faced such thing and if you use a stable stream of hls (ex: http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 ) you probably will not be able to reproduce the same error. (I could not)\nWhat's the source are you using to generate this hls? (rtmp, mp4... is it in your hand? can you run a mediainfo or any other tool to help understand the problems with this input??) \nI don't know much of wowza to help you though.\n. @DavidVentura it's hard to compare one player with another, for instance VLC plays almost anything it can, it \"ignores\" errors and even intelligently guesses things to make the video \nIf we're able to reproduce this issue and we think this is a playback problem, we should open an issue on hls.js project. What do you think?\n. Try to add a gop for each 30 frames -g 30 -r 30 instead of 48.\n. @DavidVentura nice catch :) I don't know since it's a pre-release build I don't feel comfortable, what do you think @clappr/core ?\n. I suppose we'll migrate when makes sense :)\n. @cdgraff yeah we're planning to do a major upgrade that should include this (we'll try to organize and follow a flow of tasks here https://github.com/clappr/clappr/projects/1 ) \n. Thank you @gamtiq  :smile: . You can directly (while logged in in github) edit and create PR to solve this issue.\n. Thank you so much @gamtiq :)\n. Try to test using http://cdn.clappr.io/latest/clappr.js instead of jsdelivr\n. Thanks @alouane can you provide more info? (like the line where this error occurs) Because I couldn't find any place on clappr which has srcEvent\n. @iongion this issue is a chrome related and known issue https://bugs.chromium.org/p/chromium/issues/detail?id=593273\n. @primoitt83 we've changed some JS libraries and one of them break the compatibility with Firefox older than 39.\n@clappr/core do you think we should investigate this?\n. @primoitt83 can you test it against current master ? (then we can close it)\n. @primoitt83 can you test using this dist? This is the latest build http://www.filedropper.com/dist\nUsually you could:\n1. git clone https://github.com/clappr/clappr.git\n2. npm install\n3. npm run release\n4. use dist/ folder\n. Thank you @primoitt83 soon we'll post a new version.\n. We're doing it right now @bikegriffith :)\n. Thanks @PNixx and @flavioribeiro I think that the best way to fix this issue is triggering PLAYBACK_ERROR only after reaching the max numbers of attempt. With the solution merged we are possible dropping the recovery system.\nI propose this solution above,  do you agree?\njavascript\n  onError(evt, data) {\n    if (data && data.fatal && this.recoverAttemptsRemaining > 0) {\n      this.recoverAttemptsRemaining -= 1\n      switch (data.type) {\n        case HLSJS.ErrorTypes.NETWORK_ERROR:\n          Log.warn(`hlsjs: trying to recover from network error, evt ${evt}, data ${data} `)\n          this.hls.startLoad()\n          break\n        case HLSJS.ErrorTypes.MEDIA_ERROR:\n          Log.warn(`hlsjs: trying to recover from media error, evt ${evt}, data ${data} `)\n          this.recover()\n          break\n        default:\n          Log.error(`hlsjs: trying to recover from media error, evt ${evt}, data ${data} `)\n          this.trigger(Events.PLAYBACK_ERROR, `hlsjs: could not recover from error, evt ${evt}, data ${data} `, this.name)\n          break\n      }\n    } else {\n        Log.error(`hlsjs: could not recover from error after maximum number of attempts, evt ${evt}, data ${data} `)\n        this.trigger(Events.PLAYBACK_ERROR, `hlsjs: could not recover from error after maximum number of attempts, evt ${evt}, data ${data} `, this.name)\n    }\n  }\n. We're going to release a version of Clappr therefore we'll need to rollback this commit, I'm sorry. :( But on  the other hand we're going to fix the issue :)\n. it shouldn't recovery after x times\n. I think @flavioribeiro has already opened one issue for this.\n. this is breaking our build :P\n. Thanks @me-vlad \n. It seems that is an issue with LevelSelector \n. For some odd reason the levelchanged is being called before fragmentloaded\n. I'll fix but I think we should investigate this further maybe it's something new with FlashHLS.\n. Yeah , maybe we were doing wrong.\n\nHLSEvent.MANIFEST_LOADED - when this event is received, main manifest and start level has been retrieved (playlist duration is available)\n. @GraphicSound hls.js (the one with events you want) is already used as best effort, as @tjenkinson just said: it will see if it's supported or not based on the Browser/Device (it'll fallback for video tag). \n\nYou can see all the available events for video tag:\nabort   Fires when the loading of an audio/video is aborted\ncanplay Fires when the browser can start playing the audio/video\ncanplaythrough  Fires when the browser can play through the audio/video without stopping for buffering\ndurationchange  Fires when the duration of the audio/video is changed\nemptied Fires when the current playlist is empty\nended   Fires when the current playlist is ended\nerror   Fires when an error occurred during the loading of an audio/video\nloadeddata  Fires when the browser has loaded the current frame of the audio/video\nloadedmetadata  Fires when the browser has loaded meta data for the audio/video\nloadstart   Fires when the browser starts looking for the audio/video\npause   Fires when the audio/video has been paused\nplay    Fires when the audio/video has been started or is no longer paused\nplaying Fires when the audio/video is playing after having been paused or stopped for buffering\nprogress    Fires when the browser is downloading the audio/video\nratechange  Fires when the playing speed of the audio/video is changed\nseeked  Fires when the user is finished moving/skipping to a new position in the audio/video\nseeking Fires when the user starts moving/skipping to a new position in the audio/video\nstalled Fires when the browser is trying to get media data, but data is not available\nsuspend Fires when the browser is intentionally not getting media data\ntimeupdate  Fires when the current playback position has changed\nvolumechange    Fires when the volume has been changed\nwaiting Fires when the video stops because it needs to buffer the next frame\n. @alouane do you want to use the video tag element? why is not working no mobile? are you not getting the video tag?\n. cool @alouane that depends on the playback, if you want to dig that info you can try to https://github.com/dailymotion/hls.js you will probably need to listen to specifics events there. \n. I see for that level of information I also guess it's impossible. :) thank you !!!!\n. We didn't develop the UX and UI for mobile :( but it's in the plans.\n. Thank you so much @gamtiq \n@clappr/core any thoughts? \n- some fixes (great)\n- returning player itself (I'm okay with this, we already adopted this for render)\n- adding a new start method (this is where I need to think better, it is not feasible to mobile, at least in the first play) \n. @tjenkinson I think @bernardocamilo is also working on a solution for this. \n. Thanks once agin\n. Thanks @coveralls lol\n. LGTM\n. @thiagopnts I blame you for that :P do you remember why is this? I think we can safely remove this.\n. I think we can remove it safety\n. Looks Great To Me!\n. I think the GA plugin provided on Clappr is not working good, we should create an external plugin for it.\nBut you can try to use it following the readme to configure it.\nIn theory we're sending some events: [\"{macro dimension ex:Video}\", \"{Event ex: Play}\", \"{video source ex: http://example.com/myvideosrouce.hls}\"]\njavascript\n      this.listenTo(this.container, Events.CONTAINER_READY, this.onReady)\n      this.listenTo(this.container, Events.CONTAINER_PLAY, this.onPlay)\n      this.listenTo(this.container, Events.CONTAINER_STOP, this.onStop)\n      this.listenTo(this.container, Events.CONTAINER_PAUSE, this.onPause)\n      this.listenTo(this.container, Events.CONTAINER_ENDED, this.onEnded)\n      this.listenTo(this.container, Events.CONTAINER_STATE_BUFFERING, this.onBuffering)\n      this.listenTo(this.container, Events.CONTAINER_STATE_BUFFERFULL, this.onBufferFull)\n      this.listenTo(this.container, Events.CONTAINER_ENDED, this.onEnded)\n      this.listenTo(this.container, Events.CONTAINER_ERROR, this.onError)\n      this.listenTo(this.container, Events.CONTAINER_PLAYBACKSTATE, this.onPlaybackChanged)\n      this.listenTo(this.container, Events.CONTAINER_VOLUME, (event) => this.onVolumeChanged(event))\n      this.listenTo(this.container, Events.CONTAINER_SEEK, (event) => this.onSeek(event))\n      this.listenTo(this.container, Events.CONTAINER_FULL_SCREEN, this.onFullscreen)\n      this.listenTo(this.container, Events.CONTAINER_HIGHDEFINITIONUPDATE, this.onHD)\n      this.listenTo(this.container, Events.CONTAINER_PLAYBACKDVRSTATECHANGED, this.onDVR)\ndoes this help?\n. @mattLummus I'm planing to do that (GA plugin) and my first step was to do a stats plugin so we can have data to send out.\n\nit would be nice to be able to at the least fork an external plugin and swap out the consumer (i.e. send data to mixpanel instead of GA).\n\nAre GA and Mixpanel using the same API? if yes, it's okay otherwise I'd say to create two different plugins.\n\nI would be happy to help contribute this but wanted to see if any progress had been started yet that I am not aware of\n\nI didn't start it yet mostly because I'm struggling with the usage of GA for sending video metrics, I'm trying to see a better, flexible and feasible way to send data.\nFor instance we could consider two events: hit and view, being hit for when you click on play and view for when you watched at least 30s of the video (or in the end of the video). We also need to be open for multi dimension. By the way how do you use GA in your case? and what do you need from it? Do you use it to measure UX? views?\n. > not necessarily just 30s but also 25,50,75, and 100%\nIt'd be nicer to have them as an array of percentages [25,50,75,100] and then convert them to GA events ['view_25p', 'view_50p'].\n\nLater on we would want to use some more of the events such as seeking, pausing, etc. and possibly buffer events as well to measure performance, but the basic stats get us going.\n\nWe could send buffer time, how many seeks, pauses (and pause times) using the stats plugin but this also could lead you to overuse your GA account. How would you expect to use this data? (an event, hit... or use it as a multi dimension) Because you can send a single metric at time for GA (with multi-dimensions, for instance 'view_75p', {bufferTime: 9023, pauses: 1})\nI'm looking a reasonable way to use GA to send metrics (mostly timers and counters), I read the documentation to see what we can do and basically I saw:\n``` javascript\n// page tracking\nga('send', 'pageview', [page], [fieldsObject]); // does it makes sense to use this?\n// event tracking - this we could use this to track view_10p, view_25p ...\nga('send', { \n  hitType: 'event',\n  eventCategory: 'Videos',\n  eventAction: 'play',\n  eventLabel: 'Fall Campaign'\n});\n// timing tracking - the problem here is WHEN because the buffering increases.. :(\nga('send', {\n  hitType: 'timing',\n  timingCategory: 'buffering',\n  timingVar: 'buffering',\n  timingValue: 3549\n});\n//exception handler\nga('send', 'exception', {\n  'exDescription': err.message,\n  'exFatal': false\n});\n```\nI mean, I want to offer a way use it in a proper way, without generating lots of costs ($$$) but adding value (aka sending valuable metrics). It's hard. \nIf we send lots of events it'll increase the costs and how about the other metrics (counters and timers)? I really appreciate you help and thoughts on this \ud83d\ude04   What is most important? What are the expected tracking?\n. Now I'm thinking about the API. The way people are going to use this plugin. I think the plugin implementation will be easier than the stats.\nWIP \\/ (I'm working on it)\n``` javascript\ncontainer: {\n   ga: {\n       // https://developers.google.com/analytics/devguides/collection/analyticsjs/#the_javascript_tracking_snippet\n       bootstrapJS: 'var j=1;...', // default: latest\n       trackingId: 'UA-XXXXX-Y', // *mandatory  - the tracking ID / web property ID.mandatory\n       cookieDomain: 'auto', // default : 'auto' - document.location.hostname (normalized)\n       name: 'myTracker',   // default: undefined -Naming a tracker is necessary in cases where you need to create more than one tracker for the same page,  if presents it'll send ga('myTracker.send', 'x', 'y');\n       userId: '12345', // default: Randomly Generated & persisted in cookie\n       customDimensions: {metric1: 8}, // default: undefined - either an object or a callback function,\n       progressPercentage: [50,74], // default: [] - sends hitType: 'event',  eventCategory: 'Videos',  eventAction: 'progress_30p'\n       progressSeconds: [30], // default: [] - sends hitType: 'event',  eventCategory: 'Videos',  eventAction: 'progress_30s',\n       eventsToTrack: [\n                'seek', 'end', 'play', 'pause', 'buffering', \n                'bufferfull', 'fullscreen', 'volume', 'error', 'stop', '...'\n       ] // default: [] - sends   hitType: 'event',  eventCategory: 'Videos',  eventAction: 'x',\n    }\n}\n// custom dimension and metric!\nga('send', 'pageview', {\n  'dimension15':  'My Custom Dimension'\n});\nga('send', 'event', 'category', 'action', {\n  'metric18': 8000\n});\n```\n\nthe source is changed, or when the player is removed by the user changing pages,\n\nDo you mean to track the load? (changing source) and destroy ? (the player being removed)\n. @kslimani thanks, so your idea is to customize eventCategory:\nhitType: 'event',  eventCategory: 'Videos or defined by user',  eventAction: '[one from the list]',\nWhat would be an interactionEvent?\n. @kslimani my idea is to use eventAction = some of the bellow list.\neventsToTrack: [\n                'seek', 'end', 'play', 'pause', 'buffering', \n                'bufferfull', 'fullscreen', 'volume', 'error', 'stop', '...'\n       ]\n. Cool @kslimani about the progress for live events I think you can start a timer and then from time to time you sent \"Xs\" ... I mean this process must be done outside the events (but considering them too). This project might give you some hints https://github.com/leandromoreira/clappr-stats\n. In live events you can count DVRusage (being a counter and a timer, a counter for the times a given user have used DVR feature and timer to measure how many time he/she spent while on DVR).... this is one thought.\n. Hi @Luc3as it seems that this problem could be:\n1. A problem in your HLS generation (or even the source of it, your camera, your rtmp stream...), I downloaded a single .ts file and ran a analysis tool ($ mediainfo single.ts) and it printed lots of errors E: File read error\n2. A problem with hls.js (which is the playback we use to play hls) but I hardly believe this.\nI'm afraid that chrome can handle your \"corrupted ts\" while firefox can't handle it, I'd say double check the number 1. I didn't check deeper your ts file (the header formation, codecs...) mostly because at the simple mediainfo tool it already printed errors.\n. @Luc3as it really depends on delivr cdn also we need to wait an official hls.js release to include it on clappr.\n. https://github.com/dailymotion/hls.js/issues/439\n. @anoopksreyas did you check the value of time? (if it's integer/string or null ). thanks @djevo1 can you reproduce this same behavior on http://dailymotion.github.io/hls.js/demo/ ?\n. Thanks @djevo1 we'll check this.\n. thanks @tjenkinson \n. That's a solid feature :) thanks @Mindvelopers \nProvide i18n\n. We already did that for NoOp playback (when the browser can't play the video) we might need to join the solutions.\n. @clappr/core I'd say for us to use a simpler solution (since we don't have that much of messages) https://github.com/clappr/clappr/commit/fe9d2af3ffb9b07ab024b3c92a0fa8576225f858 what do you think?\n``` javascript\nstrings.t('live')\n// or providing its own translations\n  var options = {\n      'strings': {\n        'en': {\n           'live': 'Company Live'\n        }\n     }\n  }\n```\n. @tjenkinson I updated with some tests if @clappr/core is okay with that I'll try to replace the texts with the plugin. :)\nhttps://github.com/clappr/clappr/tree/introducing_i18n\n. thanks @tjenkinson https://github.com/clappr/clappr/commit/9d59fe75ae41db6c77ba8c28450eacfa89df0904\n. I like that too @tjenkinson I'm just looking to see how we merge things on clappr (I think it's extend)\n. @tjenkinson how about we start this way https://github.com/clappr/clappr/commit/345ef23078b636484d2013b08a7d9528cbaff4d6 and then we change after if we need.\n. @tjenkinson https://github.com/clappr/clappr/commit/ed497ed6dd62ad4679ab2aca66cf64481542c16d how about now?\n. YOU HELPED A LOT!!! Thanks for suggestions, they were all so great! Please continue to be \"picky\" :P\n. @iongion this error ...The play() request was interrupted by a call to pause(). is related to chrome >= 50 but this exception usually doesn't stop the playback.\n. > I want to have the metadata received, but without autoplay.\nWe rely on video tag loadedmetadata event for mp4 video and for hls we use hls.js. So, for mp4 videos you'll have access to metadata before you hit play but for hls you wont.  I don't know if I clearly understood you but you could:\n``` javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\n// this will happen after you hit play\nplayer.core.getCurrentPlayback().on(Clappr.Events.PLAYBACK_LOADEDMETADATA, function(e) {\n  console.log('here', e)\n})\nplayer.on(Clappr.Events.PLAYER_PLAY, function() {player.pause()})\n```\nAnd for mp4 video you can get the metadata earlier:\n``` javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://clappr.io/highline.mp4',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\n// this will happen before you hit play\nplayer.core.getCurrentPlayback().on(Clappr.Events.PLAYBACK_LOADEDMETADATA, function(e) {\n  console.log('here', e)\n})\nplayer.on(Clappr.Events.PLAYER_PLAY, function() {player.pause()})\n```\n. > Is this correct ?\nit looks right. Maybe you could avoid to re-render multiple times but that's for later. :)\n\nWill I have weird behavior such as multiple renderings when containers change ?\n\nNope, it'll re-render itself. It should be work.\n\nHow can I control playback from here, like seek to next 5 seconds, to previous 5 ?\n\nYou can use seek (this.mediaControl.seek) for this, using currentTime + 5 and currentTime - 5\n. Thanks @waster , it's a solid feature, maybe we should also create a separated GA plugin.\n. @kslimani we're kind defining  a draft at https://github.com/clappr/clappr/issues/988 we are proposing the following API.\n`` javascript\n// It's recommended to always use the plugin name for plugin-specific options, but there's no need for scoping it undercoreorcontainer`\n   ga: {\n       // https://developers.google.com/analytics/devguides/collection/analyticsjs/#the_javascript_tracking_snippet\n       // Perhaps it's better to use a funcion instead of evaluating a JS string\n       bootstrapJS: function() { var j=1;... }, // default: latest\n       trackingId: 'UA-XXXXX-Y', // *mandatory  - the tracking ID / web property ID.mandatory\n       cookieDomain: 'auto', // default : 'auto' - document.location.hostname (normalized)\n       name: 'myTracker',   // default: undefined -Naming a tracker is necessary in cases where you need to create more than one tracker for the same page,  if presents it'll send ga('myTracker.send', 'x', 'y');\n       userId: '12345', // default: Randomly Generated & persisted in cookie\n       progressPercentage: [50,74], // default: [] - sends hitType: 'event',  eventCategory: 'Videos',  eventAction: 'progress_30p'\n       progressSeconds: [30], // default: [] - sends hitType: 'event',  eventCategory: 'Videos',  eventAction: 'progress_30s',\n       eventsToTrack: [\n                'seek', 'end', 'play', 'pause', 'buffering', \n                'bufferfull', 'fullscreen', 'volume', 'error', 'stop', '...'\n       ] // default: [] - sends   hitType: 'event',  eventCategory: 'Videos',  eventAction: 'x',\n    }\n// custom dimension and metric!\nga('send', 'pageview', {\n  'dimension15':  'My Custom Dimension'\n});\nga('send', 'event', 'category', 'action', {\n  'metric18': 8000\n});\n```\n. Hey @waster I tried this code bellow at cdn and it works just fine, what is the problem are you facing?\n``` javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://clappr.io/highline.mp4',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  height: 360,\n  width: 640,\n  audioOnly:true\n});\nplayer.attachTo(playerElement);\nvar variant_streams = {\n  'test': [\n    {\n      source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n      mimeType: 'application/x-mpegURL'\n    }\n  ]\n};\nplayer.load(variant_streams['test']);\n//player.play(); this will raise an error cause https://bugs.chromium.org/p/chromium/issues/detail?id=593273\n``\n. And if you want to pass multiple sources you should usesources: ['hls', 'mp4']but keep in mind that when you pass multiplesourcesthey will be used as [fallback (like video tag)](https://github.com/clappr/clappr/blob/1419c451428d2b0f2fa23b37ab6a4d2c37b6f2ec/src/plugins/sources.js) not as different bitrate options.\n. @waster what version are you using of npm? also try to runnpm run release`\n. @waster I think it's not a problem related to clappr itself but some libraries that we use and their dependencies requires a higher version. I'm using:\n``` bash\nleandro at Mac-8 in ~/\n$ node -v\nv6.2.0\nleandro at Mac-8 in ~/\n$ npm -v\n3.8.9\n``\n. And you still can usenpm start` and you'll have access to a local release \ud83d\ude04 \n. @thiagopnts do you mean?\njavascript\nvar _player = new Clappr.Player({sourceSolver: MyInstance})\n. Can you? \n1. Re-test it using this source http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 ?\n2. Re-test with your url using this http://dailymotion.github.io/hls.js/demo/ ?\n3. can you turn on the logs\njavascript\nClappr.Log.setLevel(Clappr.Log.LEVEL_DEBUG)\n. - 1000 issues (47 opened)\n- 2831 commits\n- 183 releases\n- 37 contributors\n. @Mindvelopers maybe this could be related to the hls stream generated by your end point.\n. Can you try to follow the troubleshooting? (mostly the checking of your stream healthy, it's problably this kind of problem). Thanks @tjenkinson \n. You can pass all the options like you do for hls.js\njavascript\nvar options = {source: 'hls', bla: 'bla'}\n    options.hlsjsConfig = {\n      xhrSetup: (xhr, url) => { xhr.withCredentials = true }\n    }\nnew Player.Clappr(options)\n. This code I passed to you only works when clappr choses hls.js playback, since it's the first playback of the list it should be the chosen but the device/browser also need to support the expected capabilities and your stream must be an hls stream\n. If you want to send cookies through different domains maybe we'll need to set http://www.quackit.com/html_5/tags/html_video_tag.cfm\n. > ,< sorry @tjenkinson yess I saw that\n. that's a solid feature !!!\n. I'd name this param (and refactors other related to html5) to either:\njavascript\nhtml5Config: {crossorigin: 'xxxxxxx'}\n// or\nhtml5Playback : {crossorigin: 'xxxxxxx'}\n// but not\nhtml5Crossorigin: 'xxxxxxx'\n. @waster would this solve your problem?\n. @waster I think in case of flash it uses the crossdomain.xml file\n. @waster I'll leave this open since it's a feature request!\n. @waster I think you can pass almost all the parameters to flashls as well although it's not the best use. (we should rely on either a common hlsConfig or flasHLS: options)\n. I like thiago's idea:\njavascript\nplaybackConfig: {\n   crossorigin: 'xxxxxx'\n}\nI'm working on html5video and I'm gonna start to use this style (without breaking the compatibility) \n. https://github.com/clappr/clappr/pull/1007\n. @tjenkinson and @towerz are pretty skillful in these subject.\n. LGTM\n. LGTM\n. My only concern about boolean, while setting attributes on video tag is that setting controls: false does not imply the lack of controls ;/ (this example bellow will render the controls even that we explicitly set it to false)\nhtml\n<video controls=false \nsrc=\"http://www.sample-videos.com/video/mp4/360/big_buck_bunny_360p_2mb.mp4\"></video>\n. I also think that the benefits acquired from it is not so great ;/ (given that we'll introduce some bootstrap and rely on global window object ...)\n. I think this is fair and solid! thoughts @clappr/core ?\n. @waster I think we already do that https://github.com/clappr/clappr/blob/master/src/playbacks/hls/hls.js#L142 and you can fine tune for more tries https://github.com/clappr/clappr/blob/master/src/playbacks/hls/hls.js#L51\n. @waster ohh that's something we need to check, also hls.js just released a new version with some fixes regarding the error recover.\n. @waster can you build from master and test it again?\n. Thanks @waster I'm gonna take a look at this later.\n. I confirmed @waster I opened an issue on hls.js to see if this is intentional or not.\n. @waster we wont fix that, this is an issue on hls.js.\n\nIs it posible to display different messages for different errors via clappr API?\n\nYou can create a plugin to show your own errors, you then listen to PLAYER_ERROR and show them at the screen, we already do that when we can't play a given playback https://github.com/clappr/clappr/blob/master/src/playbacks/no_op/no_op.js\n. @waster yes :D I also referenced some nice peeps that would able to work around that.\nIs it okay to close this one?\n. I just tested on cdn (0.2.53) using and it work just fine (Chrome 50.0.2661.102, MacOSX), what browser OS's are you testing?\n``` javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\n``\n. I could reproduce using FF 46.0.0.1\n. [debug][Container] container:destroyed Object { uniqueId: \"o89\", cid: \"c42\", $el: Object, el: <div.container.pointer-enabled>, currentTime: 0, volume: 0, options: Object, playback: Object, settings: Object, isReady: true, 12 more\u2026 } Container clappr.js:3129:8\n[debug][Container] container:stats:report Object { startupTime: 0, rebuffers: 1, rebufferingTime: 0, watchingTime: NaN, height: 720, width: 1280, bitrate: 2149280, level: 3 } clappr.js:3129:8\n[debug][MediaControl] mediacontrol:notplaying clappr.js:3129:8\n[debug][MediaControl] mediacontrol:rendered clappr.js:3129:8\n[debug][Container] container:mediacontrol:disable clappr.js:3129:8\n[debug][Core] core:containers:created clappr.js:3129:8\n[debug][hls] playback:ready hls clappr.js:3129:8\n[debug][Container] container:ready Container clappr.js:3129:8\n[debug][Container] container:volume 0 Container clappr.js:3129:8\n[debug][MediaControl] mediacontrol:notplaying clappr.js:3129:8\n[debug][MediaControl] mediacontrol:rendered clappr.js:3129:8\n[debug][Container] container:dvr false clappr.js:3129:8\n[debug][MediaControl] mediacontrol:hide MediaControl clappr.js:3129:8\n[debug][Container] container:mediacontrol:hide clappr.js:3129:8\n[debug][MediaControl] mediacontrol:containerchanged clappr.js:3129:8\n[debug][Container] container:volume 0 Container clappr.js:3129:8\n[debug][MediaControl] mediacontrol:notplaying clappr.js:3129:8\n[debug][MediaControl] mediacontrol:rendered clappr.js:3129:8\n[debug][Events] 7:resize Object { width: 640, height: 360 } clappr.js:3129:8\n[debug][Core] core:ready clappr.js:3129:8\n[debug][Player] ready clappr.js:3129:8\n[debug][Container] container:destroyed Object { uniqueId: \"o108\", cid: \"c51\", $el: Object, el: <div.container>, currentTime: 0, volume: 0, options: Object, playback: Object, settings: Object, isReady: true, 12 more\u2026 } Container clappr.js:3129:8\n**[debug][Container] container:stats:report Object { startupTime: 0, rebuffers: 0, rebufferingTime: 0, **watchingTime: NaN } clappr.js:3129:8**\n**Invalid URI. Load of media resource  failed. cdn.clappr.io**\n**[debug][hls] playback:error MediaError { code: 4 } hls clappr.js:3129:8**\n**Invalid URI. Load of media resource  failed. cdn.clappr.io**\n**[debug][hls] playback:error MediaError { code: 4 } hls clappr.js:3129:8**\n**[debug][Container] container:mouseenter clappr.js:3129:8**\n[debug][hls] playback:bufferfull hls clappr.js:3129:8\n[debug][Container] container:state:bufferfull Container clappr.js:3129:8\n[debug][hls] playback:buffering hls clappr.js:3129:8\n[debug][Container] container:state:buffering Container clappr.js:3129:8\n[debug][hls] playback:levels:available Array [ Object, Object, Object, Object, Object ] clappr.js:3129:8\n[debug][hls] playback:levels:switch:end clappr.js:3129:8\n[debug][hls] playback:level:switch Object { level: 3 } clappr.js:3129:8\n[debug][hls] playback:highdefinitionupdate true clappr.js:3129:8\n[debug][Container] container:highdefinitionupdate true clappr.js:3129:8\n[debug][hls] playback:bitrate Object { height: 720, width: 1280, bandwidth: undefined, bitrate: 2149280, level: 3 } clappr.js:3129:8\n[debug][Container] container:bitrate Object { height: 720, width: 1280, bandwidth: undefined, bitrate: 2149280, level: 3 } clappr.js:3129:8\n[debug][hls] playback:settingsupdate clappr.js:3129:8\n[debug][Container] container:settingsupdate clappr.js:3129:8\n[debug][MediaControl] mediacontrol:playing clappr.js:3129:8\n[debug][MediaControl] mediacontrol:rendered clappr.js:3129:8\n[debug][hls] playback:levels:available Array [ Object, Object, Object, Object, Object ] clappr.js:3129:8\n[debug][hls] playback:fragment:loaded Object { payload: ArrayBuffer, frag: Object, stats: Object } clappr.js:3129:8\n**TypeError: modules[moduleId] is undefined fe50f83e-a9f9-7743-838a-b2bb5d000b23:13:0**\n[debug][Container] container:mouseleave clappr.js:3129:8\n. @mangui just released a new version https://github.com/dailymotion/hls.js/releases/tag/v0.5.34 we can try to see if it fixes this bug.\n. @me-vlad I think [now it's working](https://github.com/clappr/dash-shaka-playback/commit/d783be3139a0d660056c6a7c3517bf9dbff54616), can you test?\n. @me-vlad I could not reproduce this bug while using the latest shaka =/\nI tested with this source//storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpdcan you do the same? Also if it's possible give me the mpd uri so I'll be able to reproduce.\n. @me-vlad I'm still unable to reproduce it locally, I might published the wrong version, can you check with master build?npm run release`\nhttp://s33.postimg.org/f2icr4lin/Screen_Shot_2016_06_06_at_9_12_53_PM.png\n. @me-vlad I'll try to see if I can reproduce it here later ... but it's strange though.\n. @me-vlad can you retry using this snippet (I still can't do it on my side)\n``` html\n<!DOCTYPE HTML>\n\n\n\nclappr dash shaka\n\n\n\n\n      window.onload = function() {\n        var player = new Clappr.Player({\n          parentId: '#player',autoPlay:true,\n          plugins: [DashShakaPlayback, LevelSelector],\n          //source: 'http://live.unified-streaming.com/loop/loop.isml/loop.mpd?format=mp4&amp;session_id=25020', //LIVE\n          source: 'http://b028.wpc.azureedge.net/80B028/Samples/a38e6323-95e9-4f1f-9b38-75eba91704e4/5f2ce531-d508-49fb-8152-647eba422aec.ism/Manifest(format=mpd-time-csf).mpd',\n          //source: 'http://dash.edgesuite.net/dash264/TestCases/2c/qualcomm/2/MultiRes.mpd', //VOD multiple qualities\n          //source: 'http://rdmedia.bbc.co.uk/dash/ondemand/elephants_dream/1/client_manifest-all.mpd', //SUB\n          //source: 'http://dash.edgesuite.net/dash264/TestCases/3b/fraunhofer/heaac_stereo_with_video/ElephantsDream/elephants_dream_480p_heaac_stereo_sidx.mpd', //VOD multiple audios\n          //source: 'http://dash.edgesuite.net/dash264/TestCases/4b/qualcomm/2/TearsOfSteel_onDem5secSegSubTitles.mpd', //VOD subtitle\n          //source: 'http://dash.edgesuite.net/akamai/streamroot/050714/Spring_4Ktest.mpd', //4K\n          // for more examples go to: http://dashif.org/reference/players/javascript/v1.5.1/samples/dash-if-reference-player/index.html and https://shaka-player-demo.appspot.com/\n          height: 360,\n          width: 640\n        })\n      }\n    \n\n \n\n\n\n```\n. @me-vlad I'm looking into it.\n. Thanks @me-vlad \ud83d\udc4d  I'll publish a new version tonight.\n. Hi @Mordinoid (you are not stupid) try to use the previous version, it seems we have a bug happening with the latest.\nhtml\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/clappr/0.2.52/clappr.min.js\"></script>\n. LGREAATOMe\n. @dakora1310 I think you can use autoSeekFromUrl: true and then /?t=100\n. I really would like to use it \ud83d\udc83  , but I'm with you it's better to have a case for its usage.\n. We don't support it officially but the play does the best effort to play on most browsers.\n. Thanks @Mindvelopers, can you:\n- try to run at cdn\n- check your cors headers at your servers\n- try to run it on hls.js demo page\n- try to run it on flashls. demo page\nVery often these kinds of error are related to your input (rtmp, upd ...) or the generated output (hls)\n. @Mindvelopers it could be:\n- try to use $ mediainfo file.ts over one .ts file of this stream (the links I provided show you how)\n- check if you enabled CORS headers at your server $ curl -v http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 >> /dev/null check if the output has something like:\nAccess-Control-Allow-Origin: *\n. @clappr/core are we going to make this jitter less noticeable? \n. @deonio we fixed this problem some time ago, can you please try to use the \"fixed\" uri until jsdelivry updates to latest.\nhttps://cdn.jsdelivr.net/clappr/0.2.54/clappr.min.js\n. It's already know :) thanks a lot! \n\nI can audibly hear the segments overlapping/glitching. What can be causing this? What sort of buffer rules should be present in the options?\n\nI'd for you to go to our troubleshooting guide, very often these glitching/overlapping are related either to your input or segmentation (mostly PTS) and some cases, mostly for mobile, some devices might behave very different from other similar device :( \n. The troubleshooting is in another branch https://github.com/clappr/clappr/blob/split_readme/TROUBLESHOOTING.md (yet to be merged)\n. @samcarmex \n\nHowever, when the live .m3u8 is not available, the player tries to buffer infinitely and never falls back to the audio source. Have I configured the sources wrong or is this a bug?\n\nHow are you setting this up?\n. @samcarmex ohh I think you're doing right but the way Clappr works is different than what you expect, the fallback plugin works as in video tag, you inform some and Clappr will chose the first that works.\nIn your case you'll probably need to listen to PLAYER_ERROR and then load another source.\n. @widestreamio usually these errors are related to your configs on segmentation (the server that will generate hls/dash) or the input (rtmp/udp) I'd say go to troubleshooting very often this is related to missaligned PTS or even lack of keyframes (or misconfigured keyframes)\nWe use clappr here for live/vod stream and everything is just fine =/\n. @widestreamio\n1) Yes, we use lots of encoder one of them being http://www.adobe.com/br/products/flash-media-encoder.html you might double check your configs http://help.adobe.com/en_US/FlashMediaLiveEncoder/3.1/Using/WS5b3ccc516d4fbf351e63e3d11c104babd5-7fe0.html  I'd also would suggest https://obsproject.com/\n2) I don't know if I understood you but you can test clappr at http://cdn.clappr.io/\n. @widestreamio I don't know if I really understood again but https://streamroot.readme.io/docs/clappr is working with clappr.\nDo you want a page to show the player? do you want a service to stream live? (like wowza or amazon?) Clappr being a player of hls, dash, rtmp and mp4 it really doesn't care where you host either the clappr (clappr.min.js) or the streams.\n. @widestreamio as I said to you we use clappr as our live player (for hls) and that's okay, https://streamroot.readme.io/docs/clappr offers what you want, I think Azure and Amazon too both you'll spent a little amount of money. But you'll be able to test. Or if you are skilled with docker you can use this solution https://github.com/brocaar/nginx-rtmp-dockerfile \n. @widestreamio yes, it could be, but there are tons of details behind this \"issue\" that's why I point you to https://github.com/clappr/clappr/blob/master/doc/TROUBLESHOOTING.md guide you can try to read the guide from streamroot I think they can help you.\n. @widestreamio yes several companies are using hls.js :) I searched this http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/live-streaming-wowza.html \n. @widestreamio are you still facing the problem above? if yes follow the steps to open an issue, thanks :)\n. @keyndark are you using HLS, mp4 or other?\n. @keyndark since we use hls.js to provide hls playback and the hls.js project still does not support language/subtitle we'll also don't support this feature, you could use dash (.mpd).\n. @ibreakstuff93 we're reworking the GA plugin :D but I think you can already do that if you use the player.configure({source: 'newurl', gaAccount: 'blablalba'}) method\n. @SYugel when you try to do the same using only the video tag does it works as expected?\n. Thanks I'll check this later!\n. Yes, we even build a plugin for stats where you can use it or learn how to use these events.\n1. PLAYBACK_PLAY_INTENT happens when the user hits play.\n2. PLAYBACK_PLAY happens when the playback is starting to play (or after the pause...)\n3. PLAYBACK_BUFFERING happens when a buffering starts and PLAYBACK_BUFFERFULL when the buffer is full.\nPlease notice that all these events are not related to the player itself, they are related to playback!\n. \ud83d\udc4d \n. done ! https://github.com/clappr/clappr/releases/tag/0.2.56 \n. Yes, specifically DFP (google one) but we still don't have time for it. Feel free to create a plugin \ud83d\ude04 \n. @tarkanlar we did but we didn't have time to open source it yet. =/\n. @vix-simplex cool, feel free to drop questions about Clappr's architecture here.\n. @salmanmanekia it's not, you can however server this \"variable\" as a static file. /playlist.m3u8\n. @salmanmanekia yes, serving the file (static) at the same domain would be ideal.\n. We're using hls.js as base to play hls therefore you can subscribe to Hls.Events.FRAG_LOADED:\n``` javascript\n// frag ={\n//   duration: 10,\n//   level: 3,\n//   sn: 35,\n//   start: 30,\n//   url: 'http://fragURL.com'\n// }\nplayer.core.getCurrentPlayback().on(Clappr.Events.PLAYBACK_FRAGMENT_LOADED, function(frag) {\n  console.log(frag.sn)\n});\n``\n. @mkozlov1 you're right, looking at the hls.js API:\n-Hls.Events.FRAG_LOADED- fired when a fragment loading is completed\n  -  data: { frag : fragment object, payload : fragment payload, stats : { trequest, tfirst, tload, length}}\n-Hls.Events.FRAG_PARSING_INIT_SEGMENT- fired when Init Segment has been extracted from fragment\n  -  data: { id: demuxer id, moov : moov MP4 box, codecs : codecs found while parsing fragment}\n-Hls.Events.FRAG_PARSING_METADATA- fired when parsing id3 is completed\n  -  data: { id: demuxer id, samples : [ id3 pes - pts and dts timestamp are relative, values are in seconds]}\n-Hls.Events.FRAG_PARSING_DATA- fired when moof/mdat have been extracted from fragment\n  -  data: { id: demuxer id, moof : moof MP4 box, mdat : mdat MP4 box, startPTS : PTS of first sample, endPTS : PTS of last sample, startDTS : DTS of first sample, endDTS : DTS of last sample, type : stream type (audio or video), nb : number of samples}\n-Hls.Events.FRAG_PARSED- fired when fragment parsing is completed\n  -  data: { id: demuxer id}\n-Hls.Events.FRAG_BUFFERED- fired when fragment remuxed MP4 boxes have all been appended into SourceBuffer\n  -  data: { id: demuxer id, frag : fragment object, stats : { trequest, tfirst, tload, tparsed, tbuffered, length} }\n-Hls.Events.FRAG_CHANGED- fired when fragment matching with current video position is changing\n  -  data: { frag : fragment object }\n-Hls.Events.FPS_DROP` - triggered when FPS drop in last monitoring period is higher than given threshold\n  -  data: { curentDropped : nb of dropped frames in last monitoring period, currentDecoded : nb of decoded frames in last monitoring period, totalDropped : total dropped frames on this video element }\nI think you can use either FRAG_BUFFERED or FRAG_CHANGED:\njavascript\nplayer.core.getCurrentPlayback()._hls.on('hlsFragChanged', function(frag) {\n  console.log(frag.sn)\n});\n. lol @mkozlov1 I'll close this one, okay?\n. @paunadeu did you try to follow the common steps to solve issues?\n. What iOS are you testing against? So I can test it here with http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 .\nTrack #0 - Duration: 9.6 s, First PTS: 5989.586422 s, Last PTS: 5999.186422 s\nTrack #1 - Duration: 9.599999 s, First PTS: 5989.565422 s, Last PTS: 5999.165421 s\nVery often these differences in between bitrates causes this kind of errors you're describing, although in this case it seems a very small but anyway if you are able to see the same problem while running http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 it might be a bug. Tell me the iOS version of your iPad so we can reproduce it here.\n. can we close this @paunadeu ?\n. It's not normal, if it's not working it's probably a bug. I'm gonna try to check this later! Thanks @569934390 \n. @569934390 I just tested with iphone 6s (ios 9.3.1) with http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 (at cdn.clappr.io) and it works just as expected, I mean you control the volume up or down by using the usual buttons.\nCan you test in the same situation as above? \nGo to cdn.clappr.io, change the source to http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 and test it.\n. @paunadeu we use hls.js as a playback for HLS and it supports AES-128 decryption (AES-128 mode) not DRM though. Maybe @mangui might be interested, anyway I think you should open this ticket at https://github.com/dailymotion/hls.js maybe someone can take this!\n. > BTW, have you example of integration of AES-128 with Clappr?\nI think you can just enable on your server and that's it! No need to extra config.\n. @matheusrufca are you asking in regard of hls streaming or DASH?. @matheusrufca for HLS I think you're going to wait, there is an open ticket for this though.. @siddhesharolkar can you explain what kind of errors are you expecting to catch from PLAYER_ERROR ? What steps you followed to raise a error?\nFor instance, we catch errors while we're broadcasting live hls (with no END-TAG)!\n. @siddhesharolkar for some of the errors we'll try to recover (for instance 404) there is an open issue about this problem.\nAbou the events you can:\n``` javascript\n// listen to player events within the player component\n//via constructor (more reliable for once time event) \nvar player = new Clappr.Player({\n  source: 'http://clappr.io/highline.mp4',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640,\nevents: {\n      onReady: () => console.log('ready'),\n//      onResize: Events.PLAYER_RESIZE,\n //     onPlay: Events.PLAYER_PLAY,\n  //    onPause: Events.PLAYER_PAUSE,\n  //    onStop: Events.PLAYER_STOP,\n  //    onEnded: Events.PLAYER_ENDED,\n   //   onSeek: Events.PLAYER_SEEK,\n   //   onError: Events.PLAYER_ERROR,\n //     onTimeUpdate: Events.PLAYER_TIMEUPDATE,\n   //   onVolumeUpdate: Events.PLAYER_VOLUMEUPDATE\n    }\n});\n//pos constructor\nplayer.on(Clappr.Events.PLAYER_ENDED, () => console.log(''))\n// listen to player events within the container component\nvar container = player.core.getCurrentContainer()\ncontainer.on(Clappr.Events.CONTAINER_ENDED, () => console.log(''))\n// listen to player events within the playback component\nvar playback = container.playback\nplayback.on(Clappr.Events.PLAYBACK_ENDED, () => console.log(''))\n```\nis this good?\n. @ewwink you can do that by your own listening the PLAYER_ERROR event.\n. @ewwink some of the network failures are not being handled correctly I already opened an issue on https://github.com/dailymotion/hls.js/issues/491\n. https://github.com/clappr/clappr/issues/1012\n. Thank you very much! feel free to do a PR :)\n. > I am looking to have a mp4 video play when a logo is clicked in a jquery dialog box\nI think you could just use a poster instead.\nhtml\n<html>\n  <head>\n    <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/clappr/latest/clappr.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"player\"></div>\n    <script>\n      var player = new Clappr.Player({\n            source: \"<?php echo $moviesrc ?>\", \n            parentId: \"#player\",\n            poster: \"/logo-video.png\"\n      });\n    </script>\n   </body>\n</html>\nThe second error screen (\"Your browser does not support the playback of this video\") usually happens when you pass a invalid source.\n. @marcoczen you can mount the way you want, I think the problem relies on your php rendering, what's the browser final code? can you open the page and copy and paste the final page (the one accessed through the page on browser).\n. if your browser outputs this source:\"<?php echo $moviesrc ?>\", it'll never work, since it's not valid html or js!\n. Clappr need hints to know what playback it'll use, you either can pass a source with an extension (http://example.com/example.mp4...) or you can hint by providing an extra parameter mimeType.\njavascript\n    var player = new Clappr.Player({\n     source:\"http://testserver.testdomain.net:8008/show_video.php?file_id=20160625-001529-55692404\", \n     mimeType: \"video/mp4\",\n     parentId: \"#clapprplayer\",\n     width: '470px',\n     height: '280px',\n     loop: true,\n     poster: \"images/logo-video3.png\",\n     hideMediaControl: false\n    });\n. Great, can I close this one @marcoczen ?\n. @marcoczen you can customize and instrument the default player with some config options, you can also check if any external plugin servers to you also checks if you read the troubleshooting.\n\nThe autoloop plays fine. Only when i fullscreen, the player disappears\n\nThis is (maybe) a new issue, then you can create a new issue with all the details but I refrain please read the troubleshooting first to see if it's really a bug.\n. @marcoczen I'm sorry but I could not reproduce this at our CDN http://cdn.clappr.io/?src=http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 I tested with Chrome Version 51.0.2704.106 and Firefox 47 both using MacOSX, can you access this url with your browser? are you trying mobile or desktop version?\n. > 1:resize Object { width=874, height=0} )\nThat's the problem when you resized for fullscreen you just set height to 0. \n\nAccess URL -> U mean if i can click on the link above ? Yes.\n\nI can't reproduce that here.\n. I really can't say to you, I mean when I go to http://cdn.clappr.io/?src=http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8  using firefox it works just fine! so I think it must be something on your code, maybe iframe issue (if you're using iframes) or even a css that doing that (by js)...\n. @marcoczen you might need to check the iframe fullscreen options and restrictions http://www.allowfullscreen.com/iframe there are tons of other options.\n. @marcoczen I really don't know, this should work.\nhtml\n<iframe allowfullscreen src=\"http://cdn.clappr.io\">\n</iframe>\n. @clappr/core I think it does make sense to use <audio> when we have audioOnly marked but options is out of reach at canPlay method. Could we add a pseudo-mimetype? \njavascript\n'm3u8': ['application/x-mpegurl', 'application/x-mpegurl; audio-only']\nBut then people should be obliged to use this specific mime-type.\n. I tried to use <audio src=\"hls\"></audio> it worked just fine on Safari.\n. > Thanks for the implementation, but what about TS segments with audio only? Can we return audio tag too in this case?\nI may not understood your question but once you put playbackConfig: {audioOnly: true} it'll always use audio tag.\n. I think we already did that here (aka on the issues) but it'd better if we add this to the samples @towerz is working on that \ud83d\udc83 \n. Finally thanks to @tjenkinson and @towerz for all the help and suggestion!\n. \ud83d\udc4d \n. Hi @shaharmor thanks, we point everybody to use https://github.com/clappr/clappr#cdn (aka https://cdn.jsdelivr.net/clappr/latest/clappr.min.js or a specific version https://cdn.jsdelivr.net/clappr/0.2.56/clappr.min.js)\ncdn.clappr.io should never be used for production.\nnpmcdn.com I didn't know about this cdn but anyway you can still use the official.\n. ie9=11\n. I think we should fix this first https://github.com/clappr/clappr/issues/1072 then release.\n. can we close it?\n. @tjenkinson there are some conflicts to be solved\n. @Sarabveer you can just add this new one to the list, we dropped the key array config to a simple array. aka.\njavascript\n [ChromecastPlugin, ClapprPIPPlugin, LevelSelector],\n. @Sarabveer it should be working, please let us know if there are errors/bugs though.\n. @Sarabveer so LevelSelector is not working?\n. @Sarabveer doesn't the LevelSelector works with latest clappr?\n. it should!\n. if that's the case open an issue on that plugin\n. Hi @giaule the source needs to be a valid video (being hls, mp4 among others) I tried to see the content of this video:\n``` bash\n$ curl -vs https://r6---sn-a5mlrn76.c.docs.google.com/videoplayback\\?requiressl\\=yes\\&id\\=a1f82da9e8bedfbb\\&itag\\=22\\&source\\=webdrive\\&ttl\\=transient\\&app\\=texmex\\&ip\\=118.69.189.130\\&ipbits\\=8\\&expire\\=1468313947\\&sparams\\=expire,id,ip,ipbits,itag,mm,mn,ms,mv,nh,pl,requiressl,source,ttl\\&signature\\=764F967CA234BB42668637EA90A3D7DB4AC8F210.1FD6D08A489F840C013F199B308AB960130243BE\\&key\\=cms1\\&pl\\=21\\&redirect_counter\\=1\\&req_id\\=a40714e97662a3ee\\&cms_redirect\\=yes\\&mm\\=34\\&mn\\=sn-a5mlrn76\\&ms\\=ltu\\&mt\\=1468298343\\&mv\\=u\\&nh\\=IgpwcjAzLmhrZzAxKgkxMjcuMC4wLjE > /dev/null\n   Trying 74.125.170.60...\n Connected to r6---sn-a5mlrn76.c.docs.google.com (74.125.170.60) port 443 (#0)\n TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n Server certificate: .c.docs.google.com\n Server certificate: Google Internet Authority G2\n* Server certificate: GeoTrust Global CA\n\nGET /videoplayback?requiressl=yes&id=a1f82da9e8bedfbb&itag=22&source=webdrive&ttl=transient&app=texmex&ip=118.69.189.130&ipbits=8&expire=1468313947&sparams=expire,id,ip,ipbits,itag,mm,mn,ms,mv,nh,pl,requiressl,source,ttl&signature=764F967CA234BB42668637EA90A3D7DB4AC8F210.1FD6D08A489F840C013F199B308AB960130243BE&key=cms1&pl=21&redirect_counter=1&req_id=a40714e97662a3ee&cms_redirect=yes&mm=34&mn=sn-a5mlrn76&ms=ltu&mt=1468298343&mv=u&nh=IgpwcjAzLmhrZzAxKgkxMjcuMC4wLjE HTTP/1.1\nHost: r6---sn-a5mlrn76.c.docs.google.com\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 403 Forbidden\n< Last-Modified: Wed, 02 May 2007 10:26:10 GMT\n< Content-Type: text/plain\n< Content-Length: 0\n< Connection: close\n< X-Content-Type-Options: nosniff\n< Date: Tue, 12 Jul 2016 13:19:15 GMT\n< Server: gvs 1.0\n<\n* Closing connection 0\n```\n\nAnd I couldn't because it seems to be protected, anyway if the video is valid but it doesn't have a extension (at url) you need to inform clappr what is this video by using mimeType: 'videomimetype', please be aware that 'videomimetype' needs to be a valid known mime type (like: 'video/mp4')\nIf you are trying to play youtube videos on clappr you should use the youtube plugin.\n. Hi @Kornflexx I think you can try to set the cookie (a special header) :\njavascript\ndocument.cookie = \"JSESSIONID=\" + jsessionid;\nsource: mozilla cookie\nAnd if you are not on the same domain then you need to instrument the servers to allow you to modify the Cookie header.\n. @Kornflexx maybe you need to figure out a way to set cookie within this electron engine. (how to send cookies, persist..)\n. @Kornflexx  this might help you https://github.com/electron/electron/blob/master/docs/api/session.md\n. > One side effect of calling play() is that the PLAY_INTENT event is fired. I don't know if we want this to happen in the cause of autoplay @clappr/core ?\nI think yes... it's the only way to measure the start up time and that's important!\n----[PLAY_INTENT]--------[PLAYING]\nps: I just read your call to clappr/core\n. > To get better buffering events though I think it would make sense to not set the autoplay attribute, and instead add this.options.autoPlay && this.play() at the end of the Html5Video constructor. \n\ud83d\udc4d \n. @tjenkinson can we close this one?\n. @tjenkinson I'm struggling with this : ( https://github.com/leandromoreira/clappr-stats/commit/48468a1e5f69d83d792c1a98e5d9780ba5a0aa40 \nI just can't measure the startup when autoPlay is on @towerz and I thought we need to solve this on clappr's side though.\n. Hi @enbplas11 , what issue are you facing? Do you want clappr to disable fullscreen button?\n. > FAIK content cannot go full screen from inside an iframe unless the user has given explicit permission by adding the tag to the iframe.\nSame\n. @alexvasiliev were you able to reproduce this same issue at http://dailymotion.github.io/hls.js/demo/ ?\n. LGTM once again thanks mister @tjenkinson \ud83c\udf7b \n. Thanks @stanogurnik \n. @Kornflexx does the log points to where this happened? \n. @Kornflexx it could be an hls.js issue since I saw this piece of code you're showing just here.\nBut I must say it might be because of your hls stream, I'd recommend you to read the common issues specially the part use a tool to check the health of your stream\nAnd I'd test the following:\n-  Use the source http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 and try to see the same error\n- Use your source at http://dailymotion.github.io/hls.js/demo/ and try to see the same error.\n. @anacrolix we're going to release a new version with this fix soon even though the version at CDN will reflect later.\n. \ud83d\udc4d \n. Thanks once again mister @tjenkinson \n. The error you're seeing is very often related to the lack of flash installed, @sarat1669 can you see the flash animation in this page http://www.adobe.com/software/flash/about/ while using FF47? \nAlso, did you notice any error on console? last but least if this bug is confirmed it should be open at its original repo https://github.com/flavioribeiro/clappr-rtmp-plugin\n. Yes @sarat1669 although this is more of a work around,\njavascript\nplayer.core.getCurrentContainer().getCurrentPlayback()._hls.on(HLSJS.Events.LEVEL_LOADED, (evt, data) => this._updatePlaybackType(evt, data))\n. Maybe if we use a library / playback that provides that !\nhttp://blog.videojs.com/Video-js-4-2-0-released-RTMP-CSS-designer-and-stability/\nhttps://github.com/yurydelendik/rtmp.js\n. @waster did you try to follow the common steps to verify issues? If yes, post the details about the suggested tests.\n. @waster I ran a very simple test against your stream and it failed.\n```\n$ python hls-analyzer.py http://hls.01.radio7.emgsound.ru/13/playlist.m3u8\nMaster playlist. List of variants:\n    Playlist: http://hls.01.radio7.emgsound.ru/13/128/playlist.m3u8, bw: 128\n    Playlist: http://hls.01.radio7.emgsound.ru/13/64/playlist.m3u8, bw: 64\n    Playlist: http://hls.01.radio7.emgsound.ru/13/32/playlist.m3u8, bw: 32\n* Analyzing variant (128) ***\n** Generic information **\nVersion: 3\nStart Media sequence: 355\nIs Live: True\nEncrypted: False\nNumber of segments: 6\nDownloading http://hls.01.radio7.emgsound.ru/13/128/out358.ts, Range: None\n\nTraceback (most recent call last):\n  File \"hls-analyzer.py\", line 155, in \n    analyze_variant(m3u8.load(playlist.absolute_uri), playlist.stream_info.bandwidth)\n  File \"hls-analyzer.py\", line 56, in analyze_variant\n    analyze_segment(variant.segments[i], i == start)\n  File \"hls-analyzer.py\", line 116, in analyze_segment\n    ts_parser.prepare()\n  File \"/Users/leandro.moreira/pp/hls-analyzer/ts_segment.py\", line 33, in prepare\n    self.readHeader()\n  File \"/Users/leandro.moreira/pp/hls-analyzer/ts_segment.py\", line 97, in _readHeader\n    self._processTSPacket(packet)\n  File \"/Users/leandro.moreira/pp/hls-analyzer/ts_segment.py\", line 130, in processTSPacket\n    track = self.tracks[pid]\nKeyError: 17\n```\n. @waster it seems that your BANDWIDTH is being wrongly informed,  the value is a decimal-integer of bits per second. (source: https://tools.ietf.org/html/draft-pantos-http-live-streaming-19)\n```\n   Its format is:\n#EXT-X-STREAM-INF:\n\nThe following attributes are defined:\n  BANDWIDTH\n\n  The value is a decimal-integer of bits per second.  It represents\n  the peak segment bit rate of the Variant Stream.\n\n``\n. @waster yes, it works if you try to play this source:http://hls.01.radio7.emgsound.ru/13/128/playlist.m3u8` at cdn.clappr.io it'll work! I just tested. But I tested with Chrome, I don't have an IE here to test though.\nAlso if flashls or hlsjs doesn't play this at ie11 clappr won't too.\n. @waster is this related solely to flashls? @towerz is much knowledgeable than me with flash, I think his insights or when he'd have time he can better debug this situation.. LGTM\n. AWESOME : )\nLGTM @clappr/core thoughts?\n. Thanks mister @tjenkinson lol\n. @waster there is http://clappr.github.io/classes/Events.html#event_PLAYBACK_LOADEDMETADATA what information are you expecting?\n. You are trying to capture an event triggered at playback level on the playercomponenet, try this one.\njavascript\nthis.player.core.getCurrentPlayback().on(Clappr.Events.PLAYBACK_LOADEDMETADATA, function(data) {\n  console.log('PLAYBACK_LOADEDMETADATA: ', data)\n});. @eagsalazar if hls.jsdoes that we also can do it. Today, we're doing this event by solely using html 5 tag, we should expand our understanding of this METADATAI'm in favor of creating a new event to deal with it, since the loadedmetada is already something common to html5 playback.. @clappr/core thoughts?. @eagsalazar in meantime you can listen to hls.js events (a hack): I think it's on this.player.core.getCurrentPlayback()._hls. I think it is a solid feature (Leandro's bot)\n. LGTM @clappr/core thoughts?\n. Thanks mister @tjenkinson lol\n. thanks\n. @PreDeToR since we use hls.js I tell you to check if there is any integration about it. https://github.com/dailymotion/hls.js/blob/master/API.md\n. @PreDeToR are you still facing this issue?\n. @waster can you test it again against the master?\n. @aolko where's that? README, any code???\n. Thank you\n. I don't know but I think this is a chrome thing.\n. @aolko I'm sorry, can you elaborate? what's the security threat?\n. @aolko I think you still didn't understand the issue here: go to https://jsfiddle.net/9f7sb409/169/ and click on [get data], this makes a request to a site... now to simulate your \"logging problem\"  modify the url [https://api.github.com/users/vintharas/repos] to something like [https://api.github.com/users/noanhaoehaeea/repos] and then click on [Run] and again on [get data], you'll see (if you keep the console open) the same logging information, the URL for the 404.\nAlso I don't think it is a security threat, since anyone with a browser can check all the url that were requested through chrome inspector/firefox.... if that's the security issue.\nBesides if you want to hide this logging clappr isn't the place to go you should open an issue (and I suggest a PR) at https://github.com/dailymotion/hls.js or maybe https://bugs.chromium.org/\n@clappr/core what are your thoughts?\n. @IlianYotov I think you can do that https://github.com/dailymotion/hls.js/blob/master/API.md#fragloadingmaxretry--manifestloadingmaxretry--levelloadingmaxretry\njavascript\n{\n      playback: {\n        hlsjsConfig: {\n         manifestLoadingTimeOut: 10000,\n         manifestLoadingMaxRetry: 3,\n         manifestLoadingRetryDelay: 500,\n         manifestLoadingMaxRetryTimeout : 64000\n      }\n    }\n}\n. @IlianYotov can we close this or this isn't enough yet? (I mean setup max retries)\n. It fires PLAYBACK_PLAY_INTENT directly from constructor before any listener can handle this event.\n. @tjenkinson did you see any issue if we go with this? (besides two broken tests)\ndiff\n-    this.options.autoPlay && this.play()\n+    this.options.autoPlay && process.nextTick(() => this.play())\n. @tjenkinson we're working on a solution for this right now, it shouldn't break anything.\n. lgtm\n. LGTM @clappr/core thoughts?\n. Thanks mister @tjenkinson lol\n. @jindongyi011039 are you able to repeat the same problem at http://dailymotion.github.io/hls.js/demo/ ?\n. diff\n+maxMaxBufferLength\n-maxBufferLength\n. Thanks @Al3x4nd3r partially this can be done at Clappr but the last part should be done at https://github.com/dailymotion/hls.js\n. https://github.com/dailymotion/hls.js/issues/668\n. Thanks @tjenkinson I like the idea I'd just change getX to get settings also @towerz is working on the redesign of media control... I'd like his thoughts on this!\n. @tjenkinson good catch.\n. @paunadeu I made a black box test and Clappr didn't play any video at all.\n. @paunadeu you can do it too:\n1. git clone https://github.com/clappr/clappr.git\n2. cd clappr\n3. vim package.json -> \"hls.js\": \"^0.6.2-6\"\n4. npm install\n5. npm start\n. I tried again and it shows some errors for hls:\nUncaught ReferenceError: _typeof2 is not defined\nclappr.js:2801 [error][hlsjs: trying to recover from error, evt hlsError, data [object Object] ]\n. @paunadeu http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8\n. @paunadeu the point is the same URL works when we use hls.js alone http://dailymotion.github.io/hls.js/demo/ . It seems that all the headers are working fine too:\nThe DailyMotion is pointing to 0.6.2-6.\n``` diff\n\nGET /playlists/x36xhzz/x36xhzz.m3u8 HTTP/1.1\nHost: www.streambox.fr\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 200 OK\n< Date: Wed, 14 Sep 2016 12:18:07 GMT\n< Server: Apache/2.4.10 (Debian)\n< Last-Modified: Thu, 17 Sep 2015 10:52:47 GMT\n< ETag: \"5d7-51fef372e9dc0\"\n< Accept-Ranges: bytes\n< Content-Length: 1495\n< Access-Control-Allow-Origin: *\n< Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Range\n< Content-Type: application/x-mpegURL\nGET /playlists/x36xhzz/url_0/193039199_mp4_h264_aac_hd_7.m3u8 HTTP/1.1\nHost: www.streambox.fr\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 200 OK\n< Date: Wed, 14 Sep 2016 12:19:42 GMT\n< Server: Apache/2.4.10 (Debian)\n< Last-Modified: Thu, 17 Sep 2015 08:13:17 GMT\n< ETag: \"e16-51fecfcc40140\"\n< Accept-Ranges: bytes\n< Content-Length: 3606\n< Access-Control-Allow-Origin: *\n< Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Range\n< Content-Type: application/x-mpegURL\n<\nGET /playlists/x36xhzz/url_0/url_525/193039199_mp4_h264_aac_hd_7.ts HTTP/1.1\nHost: www.streambox.fr\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 200 OK\n< Date: Wed, 14 Sep 2016 12:20:28 GMT\n< Server: Apache/2.4.10 (Debian)\n< Last-Modified: Thu, 17 Sep 2015 08:13:28 GMT\n< ETag: \"9a43c-51fecfd6bda00\"\n< Accept-Ranges: bytes\n< Content-Length: 631868\n< Access-Control-Allow-Origin: *\n< Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Range\n< Content-Type: video/MP2T\n<\n```\n. @tjenkinson thanks hero :) I saw it now https://github.com/dailymotion/hls.js/issues/187\n. Though I'm gonna leave this open until we move to newer version of hls.js.\n. And we're also not firing bufferfull for mp4.\n\n``` javascript\nClappr.Log.setLevel(0);\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://clappr.io/highline.mp4',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\n``\n. @mrbar42 we're planning a major bump soon, thanks for the heads up.\n. @mikeevstropov how about listen once to [MEDIACONTROL_SHOW](http://clappr.github.io/classes/Events.html#event_MEDIACONTROL_SHOW) ? But I think it's a solid feature request @clappr/core \n. @mikeevstropov I think you can use this event for now but I think mediacontrol_render might be something useful (hide/show is different of render/remove) :), let's see what @clappr/core think about this.\n. @DKarakis did you try to use http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 assourcejust to test?\n. I'd suggest you to use a server to host you hls files. (I think google does that)\n. @PreDeToR you can host itlocalhost:9818on the mobile and get the data from this \"server\".\n. @NicholasAsimov we don't have any official way of panning out the audio ( I saw that you can do that in [html5](http://stackoverflow.com/questions/20287890/audiocontext-panning-audio-of-playing-media) )\n. Feel free to do a PR \ud83d\ude04 \n. @nhurf what was the error? (but please notice that this'ltrgHeUptt()'is not a valid source, if you want that to execute the function you need to unquote the function)\n. @ilimaan I think that is the'ltrgHeUptt()'function.\n. Anyway the string'ltrgHeUptt()'is not a valid source.. @ilimaan do you have the error on console?. On Chrome.. @rootscript try to instantiate it using:baseUrl: 'http://cdn.clappr.io/latest'` \n. You can use https://github.com/clappr/clappr/blob/master/doc/TROUBLESHOOTING.md#common-steps-to-verify-issues to check some common issues with hls streaming.\n. @ibreakstuff93 you can try to use the event at constructor:\njavascript\nvar player = new Clappr.Player({\n  // ... all the other configurations\n  events: {\n    onPlay: function() { console.log('it was played') } // Fired when player starts to play\n  }\n})\n. @ibreakstuff93 usually the events happens on the component they belong, for instance, PLAYBACK_PLAY_INTENT is fired on playback and when you're accessing the player instance you're not accessing the playback.\njavascript\nplayer.core.getCurrentPlayback().on(Clappr.Events.PLAYBACK_PLAY_INTENT, function() { console.log('gangstar paradise') }\n. @tjenkinson \n/home/travis/build/clappr/clappr/test/plugins/poster_spec.js\n  75:42  error  Strings must use singlequote  quotes\n. @clappr/core the law \ud83d\udc6e  says at least two reviewers ... \n. As always, let's wait for some else from @clappr/core to confirm this too. Thanks again :)\n. Lint is crying :(\n104:6  error  Expected indentation of 4 spaces but found 5  indent\n  105:7  error  Expected indentation of 7 spaces but found 6  indent\n  106:5  error  Expected indentation of 5 spaces but found 4  indent\n. @tjenkinson can you try to fix these lint errors?\n. You're awesome :)\n. > That could make it backwards-compatible.\nAnd it's aligned with what we're planning to future.\n. Lint is crying :(\n/home/travis/build/clappr/clappr/src/playbacks/no_op/no_op.js\n  28:83  error  Extra semicolon  semi\n. @kslimani thanks and @tjenkinson is a JS/Build/Anything specialist too \ud83d\udc4d  but I also would like to hear @towerz and @thiagopnts thoughts on this.\n. @PietroI it can be in the stream (either the source of it or the hls itself), I'd recommend you to https://github.com/clappr/clappr/blob/master/doc/TROUBLESHOOTING.md#common-steps-to-verify-issues\n. @Pmant we're using clappr at production and we haven't noticed this. Can you test with this source http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 ?. @Pmant maybe it's something related this difference (AES-128 and byte-range), can you try to do the same thing on this demo page http://dailymotion.github.io/hls.js/demo/ ?. @Pmant if you were able to reproduce this same issue at the hls.js demo we might need to open an issue there, @mangui might help us. . This plugin might help you https://github.com/leandromoreira/clappr-pause-tab-visibility/blob/master/index.js it pauses when user change tabs.\n. I'm afraid I didn't understand your question :( but you do need an instance of the player to check whether is playing or not.\n. Thank you very much @kslimani \n. I'd tell you to try https://github.com/clappr/clappr/blob/master/doc/TROUBLESHOOTING.md#common-steps-to-verify-issues\n. I'm sorry, I'm having a hard time to follow, this was a very long time ago! \ud83d\ude06 \nDo you still agree with the statement timeupdate event shouldn't be fired before play event? (regardless how this is going to be fixed) Or semantically we should and can fire a timeupdate before play event?. I'm with you! \u270c\ufe0f . @dovematrix since you're using Chrome and FlasHLS you can't have such small player. You need to use the default HLS playback, otherwise, Chrome will impose this \"issue\".\nhttps://www.extremetech.com/internet/233383-google-chrome-will-start-blocking-all-flash-content-next-month\n. Let's wait for someone else to review it.\n. @towerz are you okay with this? You can follow the discussion here\n. \ud83d\udc4d  tell us when you're done so we can merge this.\n. @mikeevstropov What happens? Is this screen not showing up or rendering a wrong text? Does it output any error on console?\n. @mikeevstropov so when you try to watch a video (mp4) using clappr does it shows NoOp screen?\n. Although the build says it's broken bc of lint I can't reproduce it locally.\n```\n$ npm run lint\n\nclappr@0.2.63 lint /Users/leandro.moreira/src/clappr\neslint src/ test/\n```\n. @kslimani if you try to run it locally it doesn't show the lint error ;(\n. @kslimani can you test this on your side? I already ran some tests (mp4, hls).\n. thank you very much @kslimani \n. > I think some people might be setting hlsjs options and accessing the hlsjs instance directly and this might cause problems for them?\n\nI think these people are relying on unstable abstraction :P I'm in favor of keeping the current minor version.\n. > What abstraction are you referring to?\n@shacharz I was referring to the people that use the private instance of hls (clapprInstance.core.getCurrentPlayback()._hls) as something stable\n. @shaharmor that's something we need to fix :) btw feel free to do a PR!\n. oh so the new HLS doesn't offer XHR loader config?\n. So it might be better to offer this new API or if possible to adapt both new and old clients.\n. in favor of https://github.com/clappr/clappr/pull/1200\n. Thanks @bikegriffith I'd also like to point that one test stop working  https://travis-ci.org/clappr/clappr/builds/173304206\nChromium 37.0.2062 (Ubuntu 0.0.0) UIObject selects elements within the component FAILED\n    Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\nChromium 37.0.2062 (Ubuntu 0.0.0): Executed 50 of 179 (1 FAILED) (0 secs / 18.463 secs)\n. can someone test it again, against a newer version of iOS?. did you try to:\n\ntest with http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 \ntest with a simpler mp4\ntest it with another browser (using Ubuntu)\ntest it with another OS\n\nMaybe it's a codec problem.. were you able to reproduce this on Chrome?. That's hard to answer because it depends on the type of video (playback) you're using. In case you're using HLS maybe https://github.com/leandromoreira/clappr-stats can help you.. @kolpax can you test it?\n. @gfronza soon !\n. @sexysat I tried to reproduce this error locally using http://streams.sexysat.live:1935/xyz777wkz/_definst_/xy777_360p/manifest_w2111374024.mpd and it working. How are you building the player?\n. Sorry for the delay, can you test it with this source: '//storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd', ?. @sexysat I'm gonna need to debug this because if I run it locally it works just fine.. @sexysat are you still facing the same issue?. @kslimani I think he was referring to the playback plugin dash-shaka the CDNJS is working while JSDELIVR is not.. @rgroothuis does onStop is being called? Does the browser show any error? (after you tried to play it again). Maybe it's triggering onError instead of onStop. I also would regardless of the retrying method you're using try to do it with backoff strategy.\n. 1. onEnded or onError (but maybe we should have a reliable event that was triggered at the end regardless of the state, I think onEnded is this guy)\n2. If you're not changing the source you should just play it again and maybe you can postpone the retry in setTimeout style by X seconds.\n. When you call this.clapprInstance.play() does it shows any error? turn the log level to debug\n. try\n``` javascript\nwindow.myClappr = window.myClappr || {};\nmyClappr['player4'] = new Clappr.Player({\n    events: {\n            onStop:  function() { alert(\"I am an alert box!\"); window.myClappr['player4'].play(); }\n    },    \n    source: \"http://x.x.x.x./hdmistream01.m3u8\", \n    width: 320,\n    height: 180,\n    autoPlay: true,\n    actualLiveTime: true, \n    parentId: \"#player4\"});\n```\n. @rgroothuis please notice that your problem is related to the fact that you're trying to access a non-existent member, it's not related to clappr itself. Try this:\n``` javascript\nwindow.myClappr = window.myClappr || {};\nvar player4 = new Clappr.Player({\n    events: {\n            onStop:  function() { alert(\"I am an alert box!\"); window.myClappr.player4.play(); }\n    },    \n    source: \"http://x.x.x.x./hdmistream01.m3u8\", \n    width: 320,\n    height: 180,\n    autoPlay: true,\n    actualLiveTime: true, \n    parentId: \"#player4\"});\nwindow.myClappr.player4 = player4;\n```\n. yes, it does help but now we need to have an hls stream with this behavior so we are able to reproduce and fix this issue. @towerz do you know a simpler way to provide a reliable way to always restart the live streaming? (different from what we tried)\n. @rgroothuis one thing is the visual indication, if it's not showing \"live\" it may be an UI problem but since it plays old content it could be: 1) the playlist returns old segments (or it have stopped making it a VOD playlist) 2) we have a weird bug that even with the live playlists it \"starts\" as VOD using old playlist.\nCan you analyze the two points above? anyway, we could create a new issue (when we figure out what really have happened) and close this one since it was solved.. @NicolaBernini unfortunately Clappr doesn't have any event about that :( and if you go to the playback themselves you'll see some level of control but usually not DECODED_FRAME. For instance hls.js has some Hls.Events.FRAG_* events that might help you.\n. One way you could do it is player.core.getCurrentPlayback()._hls.on('hlsFragParsingMetadata', function(event, ...\n. I'll merge it since it's just an update on readme. Thank you very much @vix-simplex \n. I tried to reproduce this using one internal live stream and the results were consistent:\nWith a DVR of 590s the logger shows consistently 590 ... 590 forever and when we start to watch a previous moment (DVR mode) the position was consistent with duration too. What values were you expecting to see and what values did you get?. Let's say a playlist is 30 seconds long then the event will always trigger with the value 30 or 30.1 or 29.999 forever.  \nThis means that the duration is equal to the current time, is that what you mean? if yes, then this is not a bug, we chose to use this layout for live streaming but we're open to suggestions, what time would you want to see from live events?. \ud83d\udca9  I was testing under hls.js sorry @GuilhermeMedeiros . > The current time is equal to the duration. Which is pretty bad in my case since I need to save the exact time of the interaction with the player.\nWhen you mean time, do you mean it's a clock UTC time or time as time elapsed since the user start to watch the video?. @GuilhermeMedeiros sorry for the long delay, let's try to get back and see what we can do.\nFirst getCurrentTime() should return the elapsed time (in seconds) from the start of the streaming.  Let's say we have a live hls streaming with chunks of 2s with a DVR window of 4 minutes (240s).\n\nThen when I play the video, what was the value you were expecting from getCurrentTime()? \nAfter 40s, what is the value you are expecting from getCurrentTime()? \nAfter 360s, what is the value you are expecting from getCurrentTime()? . Thanks \ud83d\udc4d  I got you @GuilhermeMedeiros @towerz and I will discuss this later.. @GuilhermeMedeiros we'll take a look later, thanks! \ud83d\udc4f . We'll still look on that later @GuilhermeMedeiros (it kinda requires more attention of us). @aaronatmycujoo what browser are you using? what kind of stream?. Thanks, @kafeltz :)\n\nI saw that there is a small  code style making the build to refuse to pass, https://travis-ci.org/clappr/clappr/builds/185463271 .. Besides the small code style thing, everything is looking great! I'll leave the merge for @towerz , I don't know if we need to change anything else to build a new flash version.. @todd-g sure we need to fix that ;) thanks. @Niko78 I think you can do that if you listen to the error event.. please @uniquegodwin can you try the @kslimani suggestion?. @uniquegodwin the second example at @kslimani link shows, I think, what you want \ud83d\ude03 . @tomas2387 does it solve this issue?. @kafeltz thanks for the help with clappr, I think if you pass individually each mimeType it should work as I saw it in the code.. Thoughts @clappr/core ?. Since you added behavior can you add tests for it?\nhttps://github.com/clappr/clappr/blob/master/test/plugins/poster_spec.js \nOtherwise we can do that too.. @NicholasAsimov my bad I didn't see you added tests! Thank you so much! :D \nI'm pretty happy with this addition, what about you @clappr/core ?. @anoopksreyas please check https://github.com/clappr/clappr/blob/master/doc/TROUBLESHOOTING.md#common-steps-to-verify-issues specially the cors part.. @FDiskas are you using Linux? What distro? I thought all browsers were able to play a mp4. Does your console (dev tools) shows anything?. Hi @waster, since we use hls.js to provide hls playback I think you can change the playlist loader and therefore have access to the http headers.. https://github.com/dailymotion/hls.js/issues/577. https://github.com/dailymotion/hls.js/issues/342. @waster maybe it worthy a PR for hls.js introducing \"wrapper\" around playlist load and fragment load. > what about other playbacks, flashls for IE and html5 fo Safari for example?\nFor html5 I don't think it's possible today (given the known standards) but I think you can do the same with flashls.. @waster why can't you use clappr-stats and also creates another plugin to ping the information you need from client to your server?. >  it ain't definitely working for me. Is it something inside Clappr? Can i tweak it? Is this actually happening on the client side? Or is it more likely to be a setting on my streaming engine (I use Wowza)?\nI'm not 100% sure ( @towerz might know better ) but I think it's a client (Browser) security measure.. @AnanthKongu clappr will use video tag (therefore html5 playback) while you're on mobile and it shouldn't have any restrictions to HD or anything like that.\n\ncheck if the (master) playlist for mobile has HD level\ncheck whether your device is under a network restriction\ncheck if there is any message on console log. @AnanthKongu we use clappr in our HD video for all kind of devices: desktop, mobile, ipad and TVs. Maybe it's something with your streaming, please try these steps. . @kslimani you're right about the reason, good catch.. One thing you can try is to create two playbacks then you can play with the main [0] and listen to its timeupdate and when it reaches X time you pause it and switch the playbacks order in the container.. @kslimani yes, you're right, I suspect @towerz or @bernardocamilo already done something similar to this... \n\nIf I remember correctly, it holds the video tag and use it between the two different playbacks \ud83d\udc4d  maybe a workaround would be to keep it on a global namespace (Clappr.Mobile.Playback.Tag). Exactly, this is already an issue today, given to the scenario where we have to deliver Ads on pre-roll that uses the same videotag. can someone test the same bug using the build https://github.com/clappr/clappr/tree/update_zepto_005 ?. @kslimani thank you, :) we'll need to check this deeper.. We @clappr/core are going to remove the touch events from clappr-zepto until we see another way to fix it.\nAre you okay with that?. Can you guys test it against the new version?. Thanks for the tests, we'll need to address these touch events problems, properly, in another issue. can we close it?. @vikashsah13 shouldn't we generate this offline? I mean, is it reasonable, for today's computation, to generate in real time this?. > Time update event wont progess after 74\nIf you're using live DVR that means: you're at the edge (live) ! I think this is the expected.. @tomas2387 @clappr/core maybe we can make this decision optional because in fact there are few situations (some devices) where hls.js will be a better playback than the native.\nBut I'm in favor of making the user to take this decision.. Try this:\njavascript\nvar player = new Player.Clappr({plugins: [ClapprAds, ClapprSubtitle]});. @tomas2387 isn't the current clappr, autoplay and mute not working?. @kslimani COOL, this is indeed pretty cool! :) I didn't know about it, thank you so much @kslimani . Thank you @tomas2387 I'll try to make a review later with a peer.. \n\nOr ... we can ... just ignore the error ... ?\n\nThis is a warning \ud83d\udc4d  I think it's okay !. @vxman can you provide a little bit more of context? you can follow the guide to help you.. https://github.com/clappr/clappr/blob/master/doc/BUILTIN_PLUGINS.md#control-bar-colors. @pqray do you see any errors on console? have you tried this?. Did you see this https://github.com/thiagopnts/clappr-video360/ ? . Did you follow the common steps mostly did you try with a different video source like http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 ?. @fuzegit okay, there was an issue where people were discussing some problems with Linux + some browsers, the problem though was mostly related to codec problems at the browser. ;/. I changed your title to say more specifically what the issue is about, do you agree?. @Niko78 no, it shouldn't, we use it in production with dozens different plugins, does it shows any error message on console?. Maybe this is a duplicated issue https://github.com/clappr/clappr/issues/1225. are you saying that when you added ajax it stopped working the way you were expecting?. can you do this request in a async way?. I'm not sure if I understood you correctly but the player does buffering even with only 200 response from server.. You can check if you stream is okay.. Thanks @Niko78 we need to see what recovery option hlsjs uses to repeat it here.. @churu88 I just went to cdn and add this code and it works:\n```javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640,\n  events: {\n    \"onPlay\": function(){alert('play');}\n  }\n});\nplayer.attachTo(playerElement);\n```\nMaybe it's something with your functions or clappr already triggered the events you were expecting thus use events in the constructor.. @Niko78 this log doesn't show any error =( did you observe any error level log?. Hi @mikhoul is there any error on console log? or network?. javascript\nplayer.core.getCurrentPlayback()._hls.on('hlsFragParsingMetadata', function(event, object) {...});. I tried the last video and it responded me 403.\n\n. it still raises 403, maybe it's a geolocated restriction.. Cool, thank you @kslimani we were also looking/working with something to solve this problem : ). ```html\n\nvar player = new Clappr.Player({ \n  source: \"http://www.stream.com/stream.m3u8\", \n  parentId: \"#player\", \n  height: \"100%\", \n  width: \"100%\", \n  autoPlay: true\n});</p>\n<p>player.on(Clappr.Events.PLAYBACK_ERROR, function(error){console.log(error);});\n \n```. @kslimani I don't know = / but we should keep the newest version on both case shouldn't we?. Please follow the guideline to open issue so it'll be easier for us to try to help you.. can we close it then?. @waster thank you ;D. maybe you could write a simple sample on how to deal with network error on a separated readme, what do you think @kslimani ?. You can always use the clappr-stats to provide many of the metrics you're trying to calcalute.. Thank you very much  @contra\n@thiagopnts is working to shrink the final size and also he, @towerz and @tjenkinson know a lot about this!! \ud83e\udd47 . Also, @contra feel free to send a PR quoting https://github.com/clappr/clappr/issues/1395 @thiagopnts is also doing an amazing job toward this direction.. Keep it open.. Are you using a different container for each player instance? Can you paste the markup here?. @danicho you must have the two divs with differents parentId.  \n```html\n\n \nvar player1 = new Clappr.Player({source: \"http://xxxx.xxxxxxx/xxxxxx/x/xxxxx.m3u8\", parentId: \"#player1\", poster: 'http://xxxxx.xx/play2.png'}); \nvar player2 = new Clappr.Player({source: \"http://xxxx.xxxxxxx/xxxxxx/x/xxxxx.m3u8\", parentId: \"#player2\", poster: 'http://xxxxx.xx/play2.png'}); </p>\n\n\n\n\n```. https://github.com/clappr/clappr/commits/master. @nishantkumarsah can you paste the playlist your ffmpeg command is generating? . Please paste the final playlist, I suspect clappr is treating this playlist as a live type, which seems okay given the playlist you gave me.\n\nA VOD playlist usually contains some meta tags like [`EXT-X-PLAYLIST-TYPE:VOD`](https://developer.apple.com/library/content/technotes/tn2288/_index.html#//apple_ref/doc/uid/DTS40012238-CH1-TNTAG2) otherwise it'll be treated as live, anyway you also might need to wait this playlist to be finished.\n\nThe player can assume it's a VOD playlist therefore it'll only download the playlist once and since you're generating more items to this playlist the player will ignore this items.. @nishantkumarsah maybe you should look at https://github.com/kaltura/nginx-vod-module it seems that this module generates the complete playlist and the segments are being generated on the fly, this might serve you and also solve your problem.. @kslimani is being a hero here once in a while!! thanks =]. @ewwink they are two distinct plugins why would you like to join them in one?. Maybe you need to create a `core`plugin` which provides these two extra plugins but I'd prefer one single project (github) with two plugins, you can make a helper:\n\n```javascript\n// all returns all the needed plugins\nplugins: [YoutubePlugings.all()]\n```. Great, thank you very much @kslimani  you're doing such a great work!!. can we merge this?. @kslimani it's even live on docs http://clappr.github.io/classes/Events.html#event_CORE_CONTAINERS_CREATED. Did you see any error while error while this happens on firefox?. @towerz and I are planning to release a better solution to this pattern of the problem but I'll ask if @towerz has a small plugin with this behavior !! :D. @UnitedPeace I think we're using native video tag on ios, which doesn't provide such thing. You can force the IOSto use hls.js though.\n```javascript\n{plugins: [Clappr.HLS]}\n```. yeah, @clappr/core were discussing this a long time ago I don't remember why we decided to don't let this options ;/\n\nAnyway, @UnitedPeace can you build your version of clappr forcing it to use hls as the main playback and see if this solves your problem?\n\nAnd we can decide how can we enable people to force the usage of hls instead of native html5, beyond ios there are some android devices which would benefit from this.. how do you change source?. @Kzanadeus when you load a new video it'll restart the playback, you can inform that you don't want it to autoStart or even where to start to play.\n\nWhat behavior do you expect when you change the source?\n\n. Are these the steps to reproduce this behavior?\n\n1. start any video, play it\n1. and then change the source\n1. start to watch it\n1. pause the video and unpause\n\nThe expected outcome would be continue to play from where it was when it was paused but does it starts again from the begininig?\n. @Kzanadeus were you able to reproduce this behavior at http://clappr.io/demo/ changing the default source to http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 ? . @Kzanadeus I tried the following code at the  http://clappr.io/demo/  and it seems to work as expected:\n\n```javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\n\nvar player = new Clappr.Player({\n  source: 'http://clappr.io/highline.mp4',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\n\nplayer.attachTo(playerElement);\n\nsetTimeout(\n  function() { \n    player.load('http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',null,true) \n  }, 8000);\n```. due to #1451 we'll close this one. @ibreakstuff93 did you check if you do have flash installed for ie? Maybe it's missing flash.. This might be an issue with your stream, try to replicate the same problem with this source http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8. Thank you @kslimani  \ud83c\udf70 . @kslimani you rock! \ud83d\ude80 . @Abdel-ilah I think we don't support mkv container =( if you can, you can convert it to `mp4` using ffmpeg.. @Niko78 I think if you want to have the latency between the source and the final user you could take the PTS/DTS from the source and compare with final user, or if you want just a rough idea you can [overlay the clock over the video](https://stackoverflow.com/a/12244369/1188680) and compare.. @Niko78 one easy way is to really have a clock overlay on the video and check source vs final user (player)!. @kslimani I would like to listen to @clappr/core thoughts!? I'm gonna find someone to review this too! \ud83d\udc40 . How did you set `maxBufferLength` @andrefilipegsilva  ?. It's likely to be something on hls.js based on your tests, so I'll label this as wontfix. Thanks. @alexvasiliev does it raises any error on console log? can you try to do the same using this url http://video-dev.github.io/hls.js/demo/ ?. About the  `No 'Access-Control-Allow-Origin' ` you can [setup it correctly](https://github.com/clappr/clappr/issues/703).. Hi @JeanSauzem I think clappr does play mp3. I went to http://clappr.io/demo/ and try the following code.\n\n```javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\n\nvar player = new Clappr.Player({\n  source: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 60,\n  width: 640\n});\n\nplayer.attachTo(playerElement);\n\n```. [Mp3 doesn't seem to work on W10](https://github.com/video-dev/hls.js#not-supported-yet) though.. thank you @kslimani you're always helping a lot \ud83c\udf7b \ud83c\udf7b \ud83c\udf7b \ud83c\udf7b \ud83c\udf7b . OwW thank you so much @speres93 your help is much appreciated !!! \ud83d\ude04 . @ciclanohost yes, you should be able to play stream over https with clappr (and with almost any other player).\n\nCan you post the streaming you're trying? Maybe you're facing [an issue with your https headers](https://github.com/clappr/clappr/blob/master/doc/TROUBLESHOOTING.md#common-steps-to-verify-issues), mostly [the cors](https://github.com/clappr/clappr/issues/703).. @ciclanohost it seems that you're using https (supposed to be at `port 443`) with another port, try to stick with 443 and try it again.\n\n> There are some networks (especially some free WiFi access points) that don't allow traffic over other ports than 443 or 80.\n\nWhen I tried to get the content from the url you provided (/playlist.m3u8) it didn't work.\n\n```bash\n$ curl -I https://videos.ciclano.io:1443/demovod/demovod/mp4:sample.mp4/playlist.m3u8\ncurl: (60) SSL certificate problem: unable to get local issuer certificate\nMore details here: https://curl.haxx.se/docs/sslcerts.html\n```. Probably @kslimani is right!. @hijuuijj you're not passing an hls streaming.\n\n```bash\n$ curl -I http://listen.radionomy.com/ABC-Lounge\nHTTP/1.1 302 Found\nCache-Control: private\nContent-Length: 0\nContent-Type: application/octet-stream\nLocation: http://streaming.radionomy.com/ABC-Lounge\nServer: Microsoft-IIS/8.5\nX-AspNetMvc-Version: 5.2\nX-AspNet-Version: 4.0.30319\nX-Powered-By: ASP.NET\nDate: Thu, 13 Jul 2017 13:42:44 GMT\n```\n\nWhat kind of content is returned by this url: `mp4`, `mpeg-ts` ??. Cool @kslimani, @JohnMorra I tried at http://clappr.io/demo/ and it seems to work. \n\n```javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\n\nvar player = new Clappr.Player({\n  source: \"http://listen.radionomy.com/ABC-Lounge\", \n  mimeType: \"audio/mpeg\",\n  height: 360,\n  width: 640\n});\n\nplayer.attachTo(playerElement);\n\n```. what is the error?. @Abdel-ilah  can we close this issue?. @hijuuijj because the URL is returning `403 Forbidden`.\n\n![screen shot 2017-07-17 at 8 30 54 am](https://user-images.githubusercontent.com/55913/28266274-4f6cf0b2-6aca-11e7-92ec-de91f1b55284.png)\n. @hijuuijj what is the error?\n. @hijuuijj this shows that you're not serving the [`/crossdomain.xml`](http://www.adobe.com/devnet/adobe-media-server/articles/cross-domain-xml-for-streaming.html) on your site and I also could not play the stream `http://rbetis-hls.flumotion.com/rbetis/live/.m3u8` on https://www.hlsplayer.net. This url seems to be an html `Content-Type: text/html; charset=utf-8`. @Abdel-ilah this URL seems to generate a dynamic URI to the mp4 file, for instance, your URL resolves dynamically to the example down below, although **this example works** you'll need to figure out how to extract the `mp4` from **your** sharing google drive file.\n\n```javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\n\nvar player = new Clappr.Player({\n  source: 'https://r3---sn-q4flrne7.c.drive.google.com/videoplayback?id=1a16700f2e6ae431&itag=18&source=webdrive&requiressl=yes&pl=21&sc=yes&ttl=transient&ei=-71uWe6uHZb5-AXkhKqADQ&susci=o-ABAwT--HibBdZ4pArImL5cceC6WIjTxodI911sOGy8_flWk&driveid=0B9triytxOLMnU1RwY0pRbVhqaVk&mime=video/mp4&lmt=1500394115659217&ip=186.243.88.26&ipbits=0&expire=1500444219&cp=QVNFUkVfU1JPSlhOOjZHbFItSGFNSVA2&sparams=cp,driveid,ei,expire,id,ip,ipbits,itag,lmt,mime,mm,mn,ms,mv,pl,requiressl,sc,source,susci,ttl&signature=601794F7EB3839442066460662ACA7E21152EB78.4289A2EDC9A50B0F32189F463D6AC7FF30F35CF5&key=cms1&app=texmex&cpn=ehoiLjaaVNFzRKEs&c=WEB&cver=1.20170712&redirect_counter=1&cm2rm=sn-gpve67s&req_id=571f8e95aecf36e2&cms_redirect=yes&mm=34&mn=sn-q4flrne7&ms=ltu&mt=1500429755&mv=m',\n  mimeType:\"video/mp4\",\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\n\nplayer.attachTo(playerElement);\n```. Clappr (HLS.js) requires you to send CORS on HTTP response header @UnitedPeace.. @kslimani I rerun it and it passes now \ud83d\udc4d  if that happens more often we should try to see what causes it.. Hi @JeanSauzem I couldn't test your stream =( what are the characteristics of this issues?. @asalas1994 I'll need to answer you in English mostly because most of the clappr's users can read and write in English.\n\nYou need to make both HTTP or both HTTPS (actually your site can be http and streaming can be https)\n\n----------\n@asalas1994 usted necesita hacer ambos HTTP o ambos HTTPS.. @hijuuijj please try to follow the guideline https://github.com/clappr/clappr/blob/master/doc/BEFORE_OPEN_AN_ISSUE.md so we can try to help you \ud83d\ude03 . ```html\n\n//\n \n```. @firofame it's a security feature on the browsers, you must [setup the CORS headers](https://github.com/clappr/clappr/issues/703) in your CDN / server (the nodes which serve your stream [.m3u8]), that's why it works in the last example you provided:\n\n![screen shot 2017-08-04 at 8 04 58 pm](https://user-images.githubusercontent.com/55913/28990112-96b9fff2-7950-11e7-9cd0-9fa3424af2e1.png)\n\nAnd when we try to play your content, the master playlist works fine but then the sub-playlists are without CORS.\n\n![screen shot 2017-08-04 at 8 08 55 pm](https://user-images.githubusercontent.com/55913/28990159-115b3c80-7951-11e7-8f36-01c4e7c2558d.png)\n![screen shot 2017-08-04 at 8 09 29 pm](https://user-images.githubusercontent.com/55913/28990162-14df6e44-7951-11e7-86f1-6edb3e9dbae2.png)\n\n\n. @firofame you can use the `flashls` playback (as shown in the code below) but then you might have another issue which is related to `crossdomain.xml` file. Anyway, I think the service / CDN you use to stream must have the option to change HTTP response headers.\n\n```javascript\n    var player = new Clappr.Player({\n      source: 'http://dev.example.me/hls/stream.m3u8',\n      baseUrl: 'dist',\n      poster: 'http://clappr.io/poster.png',\n      mute: true,\n      height: 360,\n      width: 640,\n      plugins: [Clappr.FlasHLS]\n    });\n```\n\n> is there any workaround CORS, since i dont have access to the server.\n\nThe very basic premise of this mechanism is to provide security to browser and users so I think you still can: \n\n* use a plugin (like flash)\n* use an extension (chrome extension)\n* host the files (m3u8, ts) and change http headers\n* move to another service / CDN which gives you this option. It's explained here https://developer.apple.com/library/content/technotes/tn2288/_index.html. Hi @mostafa6765 can you post your entire example? including the headers?. Good catch! \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f . \ud83c\udf7e \ud83c\udf7e \ud83c\udf7e \ud83c\udf7e \ud83c\udf7e \ud83c\udf7e \ud83c\udf7e \ud83c\udf7e . @SAMYEL06 can you try to https://github.com/clappr/clappr/blob/master/doc/TROUBLESHOOTING.md#common-steps-to-verify-issues ?. @ciclanohost what kind of stream are you using? hls, dash, mp4... can you provide a link to one of these streams?\n\nIf you go the [demo page](http://clappr.io/demo/), you'll see that from the moment you click on the play to the start of the video is almost instantaneously.. \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f  bravo @kslimani . @kslimani yeah, I was thinking about the demo page which could benefit from it too. . Hi @JeanSauzem did you notice any issue or console log? I suspect it might be related to `CORS` or some `iframe` security.. @hijuuijj when I tried to play this on the demo page it returned a `403` page and it doesn't have the `CORS` headers too.\n\n![screen shot 2017-09-11 at 5 48 58 pm](https://user-images.githubusercontent.com/55913/30296189-ab7ee0ba-9719-11e7-934f-00549ae6d32b.png)\n\nHowever when you `curl` on the terminal:\n\n```bash\n$ curl -I https://stream-01.ix7.dailymotion.com/29/dm/3/x2lefik/live-4.m3u8\nHTTP/1.1 200 OK\nServer: nginx\nDate: Mon, 11 Sep 2017 20:50:48 GMT\nContent-Type: application/vnd.apple.mpegurl\nConnection: keep-alive\nLast-Modified: Mon, 11 Sep 2017 20:50:43 GMT\nExpires: Mon, 11 Sep 2017 20:50:47 GMT\nCache-Control: max-age=1, public\nX-Cache-Feed: HIT\nX-FEED-ID: 02\nX-Backend: stream02_ix7\nAge: 1\nX-Cache: HIT\nAccess-Control-Allow-Origin: *\nAccess-Control-Expose-Headers: Content-Length\nAccept-Ranges: bytes\nStrict-Transport-Security: max-age=0; includeSubDomains; preload\n```\n\nThe server probably is looking at the `User-Agent` to define this.. I tried again the URL you informed at [clappr demo page](http://clappr.io/demo) and it still raises the errors.\n\n![screen shot 2017-09-12 at 6 25 29 pm](https://user-images.githubusercontent.com/55913/30349069-f184efae-97e7-11e7-8921-5a943703bdbf.png)\n. what its request and see what are the headers... and its behaviors, is it a flash-based player?. We're working to achieve this :D @vagnervjs @towerz have more information this idea too.. Clappr as is it's a JS library that can be incorporated into react, angular or others but we don't provide an Xjs version of it here.. Hi @zy87302728 someone did a directive for it https://github.com/Defina-se/angular-clappr. Thanks, @TinkoLiu I think one or we can make a playback plugin (like [dash](https://github.com/clappr/dash-shaka-playback)) that plays `.flv` :D. does it show any logging error message?. can you try to debug the android looking at the console tab? https://developers.google.com/web/tools/chrome-devtools/remote-debugging/. We can't really help you if we don't have any logging info \ud83d\ude22 . @hijuuijj clappr can't generate the file (and actually host it) `crossdomain.xml` this needs to in your server.\n\nClappr can't play this playlist `http://grupomac-lh.akamaihd.net/i/004rss0k8_1@301782/master.m3u8` because it is returning `403`. This file is required if you're using `flash` based player otherwise you shouldn't need it. http://www.adobe.com/devnet/adobe-media-server/articles/cross-domain-xml-for-streaming.html. This file is required if you're using `flash` based player otherwise you shouldn't need it. http://www.adobe.com/devnet/adobe-media-server/articles/cross-domain-xml-for-streaming.html. Hi, @hashtvm07 these things usually are tied to either your input stream (codec, camera) our your encoder/packager generating the HLS.\n\nYou can find some tools to check your stream health https://github.com/clappr/clappr/blob/master/doc/TROUBLESHOOTING.md#common-steps-to-verify-issues .. Thanks, @contra I think @thiagopnts is working on this too!. @contra Clappr does respect the order of the playbacks, external first and then internal, therefore I think if you added `FlasHLS` it'll be used as a hls.. sorry @contra I misread.. Keep it open. Cool, thank you @Lethea but where are the dependencies? `package.json` ( I think you relied on jQuery isn't?) where is the build/minified version?. Thank you very much !!!. @hijuuijj did you test on https://video-dev.github.io/hls.js/demo/ ?. @hijuuijj double check your master input.. Take a look at https://github.com/video-dev/clappr-rtmp-plugin. did you try to inform the `mimeType` since Clappr can't infer from the URL you provided?\n\n```javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\n\nvar player = new Clappr.Player({\n  source: 'http://telekomtv.ro.edgesuite.net/shls/LIVE$MoozDanceHD/6.m3u8/Level(545259)?start=LIVE&end=END',\n  mimeType: \"application/vnd.apple.mpegurl\",\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\n\nplayer.attachTo(playerElement);\n```. Thanks, @joaopaulovieira can you also fix the tests?\n\n```\nFirefox 56.0.0 (Linux 0.0.0) HLS playback hls.js configuration should use hlsjsConfig from player options as fallback FAILED\n    playback._setupHls is not a function\n    @test/playbacks/hls_spec.js:21030:7\n```\n\nIt seems that you only need to call `_setup` instead of `_setupHls` on the test. I think maybe worth to do a quick `git grep _setupHls` to see if this is used in anywhere else.. Did you check your source? sometimes it's the video stream source that is the main problem. https://github.com/clappr/clappr/blob/master/doc/TROUBLESHOOTING.md#common-steps-to-verify-issues in the last step there are some tools you can use to check that.. are you able to reproduce the same behavior here?\nhttps://video-dev.github.io/hls.js/demo/. @doroszukb just because you played on `vlc` doesn't mean necessarily that your stream is correct or that hls.js is doing something wrong \ud83d\ude1b  . I'm trying to run on my vlc and now I'm getting lots of 404.\n\ncc @mangui . I played the `http` version and the vlc output was:\n\n```\n$ vlc \"http://79.175.208.18/~0d9251a4b115385cc63815b4b36fbf08/1086/pl.m3u8?archive=0\"\nVLC media player 2.2.6 Umbrella (revision 2.2.6-0-gdbe888f)\n[000000010023bce8] core libvlc: Running vlc with the default interface. Use 'cvlc' to use vlc without interface.\n[0000000100253768] [cli] lua interface: Listening on host \"*console\".\nVLC media player 2.2.6 Umbrella\nCommand Line Interface initialized. Type `help' for help.\n> [0000000100440e98] httplive stream: HTTP Live Streaming (79.175.208.18/~0d9251a4b115385cc63815b4b36fbf08/1086/pl.m3u8?archive=0)\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 13, expected 14) for PID 0\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS discontinuity (received 15, expected 0) for PID 186\n[000000010036fe78] ts demux: MPEG-4 descriptor not found for pid 0x745 type 0xf\n[00000001029504b8] packetizer_mpeg4audio packetizer: AAC channels: 2 samplerate: 48000\nshader program 1: WARNING: Output of vertex shader 'TexCoord1' not read by fragment shader\nWARNING: Output of vertex shader 'TexCoord2' not read by fragment shader\n\n[0000000100aed4b8] freetype spu text error: Breaking unbreakable line\n[0000000100aed4b8] freetype spu text error: Breaking unbreakable line\n[0000000100aed4b8] freetype spu text error: Breaking unbreakable line\n[0000000100aed4b8] freetype spu text error: Breaking unbreakable line\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 9, expected 10) for PID 0\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 7, expected 8) for PID 186\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 5, expected 6) for PID 0\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 15, expected 0) for PID 186\n[0000000100aed4b8] freetype spu text error: Breaking unbreakable line\nshader program 1: WARNING: Output of vertex shader 'TexCoord1' not read by fragment shader\nWARNING: Output of vertex shader 'TexCoord2' not read by fragment shader\n\n[0000000100aed4b8] freetype spu text error: Breaking unbreakable line\n[0000000100aed4b8] freetype spu text error: Breaking unbreakable line\n[0000000100aed4b8] freetype spu text error: Breaking unbreakable line\n[0000000100aed4b8] freetype spu text error: Breaking unbreakable line\n[0000000100aed4b8] freetype spu text error: Breaking unbreakable line\n[0000000100aed4b8] freetype spu text error: Breaking unbreakable line\n[0000000100aed4b8] freetype spu text error: Breaking unbreakable line\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 0, expected 1) for PID 0\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 5, expected 6) for PID 186\n[0000000100431ca8] core input error: ES_OUT_SET_(GROUP_)PCR  is called too late (pts_delay increased to 1000 ms)\n[0000000100431ca8] core input error: ES_OUT_RESET_PCR called\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 11, expected 12) for PID 0\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 11, expected 12) for PID 186\n[0000000100431ca8] core input error: ES_OUT_SET_(GROUP_)PCR  is called too late (pts_delay increased to 2165 ms)\n[0000000100431ca8] core input error: ES_OUT_RESET_PCR called\n[0000000100431ca8] core input error: ES_OUT_SET_(GROUP_)PCR  is called too late (pts_delay increased to 3251 ms)\n[0000000100431ca8] core input error: ES_OUT_RESET_PCR called\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 8, expected 9) for PID 0\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 5, expected 6) for PID 186\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 4, expected 5) for PID 0\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 13, expected 14) for PID 186\n[0000000100431ca8] core input error: ES_OUT_SET_(GROUP_)PCR  is called too late (pts_delay increased to 3321 ms)\n[0000000100431ca8] core input error: ES_OUT_RESET_PCR called\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 0, expected 1) for PID 0\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 5, expected 6) for PID 186\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 12, expected 13) for PID 0\n[000000010036fe78] ts demux error: libdvbpsi error (PSI decoder): TS duplicate (received 13, expected 14) for PID 186\n```. I could play it but at the same time, it showed some errors on the console that probably VLC was able to recover.. @doroszukb can you send me two decrypted TS (in sequence)?. Hey @doroszukb you can check if your stream is okay by using `ffprobe`:\n\n```bash\n# to get timing precision (PTS, DTS)\n$ ffprobe -hide_banner -show_error 90861/T86-1500_12513811.ts\n[h264 @ 0x7f8f10034c00] Increasing reorder buffer to 2\n[mpegts @ 0x7f8f10003c00] PES packet size mismatch\n\n$ ffprobe -hide_banner -show_error 90861/T86-1500_12513812.ts\n[h264 @ 0x7f904002e400] Increasing reorder buffer to 2\n\n# to get timing precision (PTS, DTS)\n$ ffprobe -show_entries 'stream=codec_name,codec_time_base,time_base,start_pts : frame=pict_type,key_frame,pkt_pts,pkt_pts_time,coded_picture_number'  -print_format json 90861/T86-1500_12513811.ts >> T86-1500_12513811.json\n\n$ ffprobe -show_entries 'stream=codec_name,codec_time_base,time_base,start_pts : frame=pict_type,key_frame,pkt_pts,pkt_pts_time,coded_picture_number'  -print_format json 90861/T86-1500_12513812.ts >> T86-1500_12513812.json\n```\n\nIt printed out some errors are you can see.\n\nWhen I check the video, it seemed okay:\n\n```bash\n$ ffprobe -show_entries 'stream=codec_name,codec_time_base,time_base,start_pts : frame=pict_type,key_frame,pkt_pts,pkt_pts_time,coded_picture_number' -select_streams v  -print_format json 90861/T86-1500_12513811.ts >> 12513811.json\n```\nI strongly recommend you to look at your encoder and disable `scene-cut` and keep the `gop` (keyframe) at a constant rate.. GOP mode shouldn't be fixed?. * double check the audio frequency for every bitrate\n* try to use a single bitrate master playlist\n\nPS: all this with fixed gop 1s (or 30fps), no scene-detect, . you might need to open an issue on hls.js repo this is probably an issue there.\n. Have already checked if it's not your source stream? anyway you should open this issue on hlsjs github repo.\n\nhttps://video-dev.github.io/hls.js/demo/?src=http%3A%2F%2Flive2-free-mediaset.secure.footprint.net%2FContent%2FHLS%2FLive%2FChannel(CH08HA)%2Findex.m3u8&enableStreaming=true&autoRecoverError=true&enableWorker=true&dumpfMP4=false&levelCapping=-1&defaultAudioCodec=undefined\n\n. @hijuuijj I didn't mean it in a bad way ;P it's seriously to open an issue on hls.js github since it happens with the playback too, clappr behind the scenes uses hls.js. Thanks.. Please follow the [basic instruction](https://github.com/clappr/clappr/blob/master/doc/TROUBLESHOOTING.md#common-steps-to-verify-issues) and if the error persists, please paste the error logging (through chrome inspector window). This is probably not related to clappr, can you repeat the same error with the stream http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 ?. @alwayzgame I tried here and it's working perfect regard which platform I'm playing.\n\nGo to http://clappr.io/demo/ and try to play with the code:\n\n```\nvar playerElement = document.getElementById(\"player-wrapper\");\n\nvar player = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\n\nplayer.attachTo(playerElement);\n\n```\n![screen shot 2017-11-26 at 9 07 59 am](https://user-images.githubusercontent.com/55913/33239461-90f9c308-d289-11e7-8048-a49be71e56c0.png)\n\n\nIt's hard to see why it would response `403`, are you using a proxy on your computer? also, please paste a screenshot or the browser error logging.. @alwayzgame I think that Akamai might be filtering the access through user-agent when you try to access on a simulated mobile it sends the HTTP header (UA) as if it were a mobile device.\n\n```\nUser-Agent:Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Mobile Safari/537.36\n```\n\nBut when you try to access through your desktop it sends another UA.\n\n```\nUser-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\n```\n\nThe response you're getting from Desktop ([HTTP response 403](https://en.wikipedia.org/wiki/HTTP_403)) shows that this is a server problem, not a client problem (Clappr is not part of the problem). You need to properly setup your server so they can respond as expected.. It is returning 403 for the keys, the m3u8 is fine but the keys are returning 403. It's not possible to play without keys. Again, this is a server-side problem, not a clappr.\n\n![screen shot 2017-12-02 at 12 02 39 am](https://user-images.githubusercontent.com/55913/33510553-6283ae98-d6f4-11e7-972b-650b65e8dded.png)\n. @mohsinworld your problem is also a server side problem, you need to enable CORS.\n\n![screen shot 2017-12-02 at 8 32 35 am](https://user-images.githubusercontent.com/55913/33514460-79363e20-d73b-11e7-8bed-567a531d86bd.png)\n. It's still a cors problem as you can see. Try to use, just for testing, the http-server:\n\n```bash\nnpm install -g http-server\ncd /folder/root_to_my_files/\nhttp-server -a :: -p 8081 --cors -c-1\n\ncurl -v localhost:8081/mymedia.m3u8\n// watch the headers output here\n```. We use [`mute`](https://github.com/clappr/clappr/blob/master/doc/BUILTIN_PLUGINS.md#mute) as part of our API, maybe it's better just to fix this on the rendering or offer both `muted` and `mute` for a while.\n\nThis change will break an API.. @clappr/core ^. @zijian85 try:\n```\nplugins: [PlaybackRatePlugin, ClapprMarkersPlugin]\n```. Actually, it should be simpler yet like `plugins: [AnyPlugin]`, isn't @towerz ?. Cool @tchakabam we discussed that a long time ago and now we're doing it again, @towerz was looking into how to make it modular (breaking the playbacks into their own github plugin and changing how we build, with two versions full and light) and @thiagopnts was working individually to shrink clappr size too.. No, we should use the latest, thanks @me-vlad !. I think we've changed some aspects of how we deal with CSS cc @towerz isn't?. @marbleman I just tested on my Firefox 57.0.4 (MacOS) and everything works as expected and I tried with an mp4 and an hls.\n\n![screen shot 2018-01-23 at 10 56 45 pm](https://user-images.githubusercontent.com/55913/35308860-ce2423ec-0090-11e8-9368-7a302559641e.png)\n. Hi @marbleman yes, I could replicate what you've described my bad, I didn't pay attention to hls streaming. I can confirm this bug.. Thank you very much @marbleman . @MasterEvilAce you can try to make your segments like 2s to 3s and determine the number of segments before the edge to get.\n\n```javascript\nClappr.new({src:...., hlsjsConfig: {liveSyncDurationCount:2}})\n```. Thanks, @wahajdar did you see the errors on [CI](https://travis-ci.org/clappr/clappr/builds/344230077?utm_source=github_status&utm_medium=notification)?. Can you try to add a test case for this event? Here's [a similar spec](https://github.com/clappr/clappr/blob/master/test/playbacks/html5_video_spec.js#L51).. I don't think so, that's why we try to [discount this time](https://github.com/clappr/clappr-stats/blob/master/src/clappr-stats.js#L91-L114).. I think @towerz and others are planning to either drop the internal plugin or make it be the clappr-stats, is that right?. @mufin695 did you test as @towerz have suggested? \n\nGoing to http://clappr.io/demo/ and test with the HLS https://video-dev.github.io/streams/x36xhzz/x36xhzz.m3u8 ?. Please make sure your [hls stream is correct](https://github.com/clappr/clappr/blob/master/doc/TROUBLESHOOTING.md#hls-analyzer-usage-example), sometimes your stream is the culprit.. Hi @hijuuijj can you follow the [basic instructions](https://github.com/clappr/clappr/blob/master/doc/BEFORE_OPEN_AN_ISSUE.md) and also post the logging from the browser? \n\nAlso, take a look at your streams, see if [they're valid](https://github.com/clappr/clappr/blob/master/doc/TROUBLESHOOTING.md#hls-analyzer-usage-example)!. is there an error message on console?. Hey @Impulso902 it's **very hard** to support all SmartTV brands (plus older vs newer), I saw some cases where people had to create 7 different `hls manifests` due to the requirements of each TV (ie: a TV X requires you to explicitly inform the `VERSION : 3` where others will fail if you do that), so you need to analyze case by case. And there is some TV that is not able to play HLS at all.\n\nPeople at GPAC did an amazing job describing [each HLS version.](https://www.gpac-licensing.com/2014/12/08/apple-hls-technical-depth/) But I still think you'll need to go case by case and looking,  testing and debugging each Brand / Model / Year.. Thank you very much @andrefilimono . Thank you very much :). Thank you so much @davidjb . https://github.com/clappr/clappr/issues/626. Hey @Liniik  add this configuration to your clappr.\n```javascript\nhlsjsConfig: {\n    xhrSetup: function(xhr, url) {\n      xhr.withCredentials = true; // do send cookies\n    }\n}\n```. Hi @Joannou1 it seems that is something related to your ingest (which will make your output stream that bad), anyway you can [see some steps that might help you](https://github.com/clappr/clappr/blob/master/doc/TROUBLESHOOTING.md#common-steps-to-verify-issues) to figure out what's happening.\n\nMaybe it's a `GOP` problem or lack of CPU power of your machine to encode in real time, you can use this project here https://github.com/brocaar/nginx-rtmp-dockerfile which puts nginx-rtmp on docker and produce hls as the output. It has the configurations and everything else, another thing I'd try is to reduce your live stream to one small bitrate with closed gop and see what happens.\n\nHere's an ffmpeg command line example which takes the camera input from MacOS and produce a valid hls with closed gop of 2s.\n\n```bash\nffmpeg -re -pix_fmt uyvy422 -f avfoundation -i \"0\" -c:v libx264 \\\n-x264opts keyint=30:min-keyint=30:scenecut=-1 -pix_fmt yuv420p \\\n-preset superfast -profile:v baseline -level 3.0 -tune zerolatency -r 15 \\\n-s 360x220 -b:v 400k -bufsize 2 -hls_start_number_source epoch \\\n-f hls stream.m3u8\n```. Yes, I think @towerz is using it, is that right?. @PostMalone what plugin are you using that provide VAST for clappr?. https://github.com/mycujoo/clappr-vast-plugin\n\nor \n\nhttps://github.com/vix-simplex/clappr-vast-ad-plugin ?. Did you notice any error message on server side or client side? It's only way for people to help you.. It's hard to help you if you don't post the error logging message here, you can see them at your browser's console.. @PostMalone since this is not related to clappr itself you can open an issue on the plugin's github page.. @hijuuijj nice, please [try to see if there no problem with your stream at all](https://github.com/clappr/clappr/blob/master/doc/TROUBLESHOOTING.md#common-steps-to-verify-issues).. @hijuuijj maybe it's with hls.js, have you tried to use hls.js alone to see if the problem happens again?. about the npm difference that's weird =/. Did you test it on [hls.js demo page](https://video-dev.github.io/hls.js/demo/)?. `plugins: [Dash, SomethingElse, Anything]`. No @bent0b0x . Hey @kslimani how about we add it to https://github.com/clappr/clappr/blob/master/doc/EXTERNAL_PLUGINS.md. =) feel free to post it here maybe we can help you. @Pengi123 can you post how you're using clappr? also if it's working on demo page why don't you try to replicate the same page at your side?. @ctaity this code `offers` the possibility to manually set the levels but by default it uses the hlsjs algorithm to adapt to the \"right\" bit rate.. thank you @ctaity I'll let @kslimani @towerz and @vagnervjs to take a look at it.. is this something wrong on clappr?. Thank you @ctaity ! :). @ctaity if that's the case we might need to update our version here too.. I also think that if you just declare a plugin it'll be put first at the plugin list which makes it preferable over the other.. If you're doing an `UICorePlugin`, you can access the options through the `this.core.options.MyPlugin`. Post the code of your plugin here.. @Arman-Amirahmadi I won't download your file but here's the gist: if you're doing an `UICorePlugin`, you can access the options through the `this.core.options.CommentPlugin` inside your functions.. @Arman-Amirahmadi were you able to access your options through `this.core.options.CommentPlugin.rate_enabled` ? . @Arman-Amirahmadi you can read the wiki https://github.com/clappr/clappr/wiki/Our-first-plugin it shows how to create the simplest plugin ever with UI and then you can jump on some of the existent plugins to see how they work.. @Arman-Amirahmadi this project is very simple https://github.com/lucasrodcosta/clappr-nerd-stats/blob/master/src/clappr-nerd-stats.js it offers an UI and it has click function.. It looks like a timing issue `Firefox 61.0.0 (Linux 0.0.0) HTML5Video playback isPlaying() is true after constructor when autoPlay is true FAILED\n    Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise,`. I'll rerun it now :). I think you need to code your CSS not based on a fixed size but using the media element as reference.. Although I'm very excited with this new FOSS p2p great component, I don't think we can put it under the plugins belt, it's IMO more of a configuration for the most used playbacks (HLSjs and Shaka). @clappr/core what do you think about this? \n\nI was wondering about putting under the configuration doc or even on the FAQ (as a question)?. You can look at some plugins to have a source of knowledge. https://github.com/clappr/clappr/blob/master/doc/EXTERNAL_PLUGINS.md For instance https://github.com/lucasrodcosta/clappr-nerd-stats is easy to learn and replicate.. maybe the easy solution would be to use [the event api](https://github.com/clappr/clappr/blob/master/doc/API_EVENTS.md):\n\n```javascript\nvar player = new Clappr.Player({\n  events: {\n    onPlay: function() { setTimeout(5000, () => player.stop()); },//Fired when player starts to play\n  }\n})\n```. > Someone said IE does not like those arrow functions.\n\nthen try the normal function.\n\n```js\n// since player is available that's fine\nonPlay: function() { setTimeout(function() { player.stop()}, 5000); },\n```. @BillakosGR I googled `clappr wordpress` and I found this plugin https://wordpress.org/plugins/embed-clappr/ I never used it but you can, make sure to research more about this plugin (if it's safe... if it's good)\n\nYou can also see old issues about wordpress https://github.com/clappr/clappr/issues?utf8=%E2%9C%93&q=WordPress. Hi @aroraayush this is repository is only about the video player clappr if you want to know how to stream from your dashcam to a server you might look at [OBS](https://obsproject.com/) or other encoder and you can find tons of [good tutorials about that](https://medium.com/go-live/easy-steps-to-use-obs-for-youtube-live-490535eae598).. @aroraayush maybe you can take a look at [webrtc](https://webrtc.github.io/samples/src/content/getusermedia/gum/).. @hijuuijj it is playing, I tried to run your stream on the http://clappr.io/demo/ page and it works.\n\nhttp://clappr.io/demo/#dmFyIHBsYXllckVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicGxheWVyLXdyYXBwZXIiKTsKCnZhciBwbGF5ZXIgPSBuZXcgQ2xhcHByLlBsYXllcih7CiAgc291cmNlOiAnaHR0cDovL3J0dmV2NC1saXZlLmhzcy5hZGFwdGl2ZS5sZXZlbDMubmV0L2VncmVzcy9haGFuZGxlci9ydHZlZ2w4LzI0aF9vbmx5ZGFzaF9sdjNfYW9zdjRfZ2w4LzI0aF9vbmx5ZGFzaF9sdjNfYW9zdjRfZ2w4LmlzbWwvMjRoX29ubHlkYXNoX2x2M19hb3N2NF9nbDgubTN1OCcsCiAgcG9zdGVyOiAnaHR0cDovL2NsYXBwci5pby9wb3N0ZXIucG5nJywKICBtdXRlOiB0cnVlLAogIGhlaWdodDogMzYwLAogIHdpZHRoOiA2NDAKfSk7CgpwbGF5ZXIuYXR0YWNoVG8ocGxheWVyRWxlbWVudCk7Cg==. @hijuuijj try to compare your code to the demo code also try to read the documentation.. @hijuuijj it works on demo page http://clappr.io/demo/#dmFyIHBsYXllckVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicGxheWVyLXdyYXBwZXIiKTsKCnZhciBwbGF5ZXIgPSBuZXcgQ2xhcHByLlBsYXllcih7CiAgc291cmNlOiAnaHR0cHM6Ly90ZWxlY2FyaWJlLWRlcG9ydGVzLmdjZG4uYW52YXRvLm5ldC9obHMvbWFuaWZlc3RzL3RlbGVjYXJpYmVkZXBvcnRlc2hkMi9tYXN0ZXIubTN1OCcsCiAgcG9zdGVyOiAnaHR0cDovL2NsYXBwci5pby9wb3N0ZXIucG5nJywKICBtdXRlOiB0cnVlLAogIGhlaWdodDogMzYwLAogIHdpZHRoOiA2NDAKfSk7CgpwbGF5ZXIuYXR0YWNoVG8ocGxheWVyRWxlbWVudCk7Cg== . cc @clappr/core  ^ since we're at the same latest version as hls.js this worth to be looked, I think. . Hi @Tanya159 is this error code related to a hls session or dash? do you have more logging about it?. Can you attach more logging text from this error? (via console in the browser). @Tanya159 it seems that your master playlist sometimes is empty`\"no level found in manifest\"`!. Did you try [to test your stream on clappr demo page?](https://github.com/clappr/clappr/blob/master/doc/BEFORE_OPEN_AN_ISSUE.md#guideline-to-open-an-issue-bug). If it does work on the demo page while using Android I suppose this might be something at your page, try to replicate the demo on your page. . @Lakhwinder123 I'm sorry I was trying to say for you to try to see how the demo's code was done and then see if there is any changes between your code and the demo's code.. You can look at the [external plugins](https://github.com/clappr/clappr/blob/master/doc/EXTERNAL_PLUGINS.md). There are at least two:\n* https://github.com/kslimani/clappr-google-ima-html5-preroll\n* https://github.com/vix-simplex/clappr-vast-ad-plugin. the build is passing locally =/ \n![screen shot 2018-10-18 at 11 14 11 am](https://user-images.githubusercontent.com/55913/47160770-00e2f980-d2c7-11e8-82a6-4daff602663a.png)\n\n```\nChromium 62.0.3202 (Ubuntu 0.0.0) ERROR\n  {\n    \"message\": \"Uncaught AssertionError: expected false to be true\\nat node_modules/chai/chai.js:239:7\\n\\nAssertionError: expected false to be true\\n    at test/playbacks/html5_video_spec.js:5030:27\\n    at setResult (test/playbacks/html5_video_spec.js:823:71717)\\n    at test/playbacks/html5_video_spec.js:823:71257\",\n    \"str\": \"Uncaught AssertionError: expected false to be true\\nat node_modules/chai/chai.js:239:7\\n\\nAssertionError: expected false to be true\\n    at test/playbacks/html5_video_spec.js:5030:27\\n    at setResult (test/playbacks/html5_video_spec.js:823:71717)\\n    at test/playbacks/html5_video_spec.js:823:71257\"\n  }\n\nFirefox 62.0.0 (Linux 0.0.0) HLS playback can play regardless of any mime type letter case FAILED\n    expected false to be true\n    AssertionError@base/node_modules/chai/chai.js?40e7aa72e9665366bfd82579520de4fb0754dfae:9320:13\n    [3] But should player not support version 4 which has separate video and audio stream to run in sync.?\n\nYeah, you can search for each plataform/player/device, what issues do they have. For instance, there are some devices (like tvs) that only works with `hls v3` and there are lots of issues related to some or other plataform, to support all the devices is really a hard task.. Maybe this issue is related to your streaming, how long are the chunks? what's the avg latency for a given chunk?. @muzammilversiani have you tried to use the stream provided to test? I mean use this source http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 and see if the same delay happens.. @muzammilversiani by looking only at these logging I assume that part of your start up problem is related to the size of your chunks, you can see that it took many seconds to download a single video segment file (.ts).\n\nTry to shrink your segment size (like from 10s to 4s or 5s), this option is probably available at your stream service.. I'm glad, sure you can see an [example about retrying errors at the documentation](https://github.com/clappr/clappr/blob/master/doc/PLAYER_ERRORS.md). @pawanvivekananda did you try to run this resource http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 ?. Does it produce the same issue?. @towerz did the latest release fixed this?. Thanks @lorenzosjb can you provide the following information:\n\n```\nBrowser: YOUR BROWSER (ex: Chrome Version 46.0.2490.80, Firefox, IE)\n\nOS: YOUR OS (ex: Mac OS 10.11.1, iOS9, android4.5)\n\nSteps to reproduce:\n\n    first step\n    then second step\n    I was expecting X but instead it shows Y\n```. https://github.com/clappr/clappr/issues/1693. @deaabie what is the error? do you see anything on the console log?. This might be related to the way you using ffmpeg, you can [check here](https://github.com/clappr/clappr/blob/dev/doc/TROUBLESHOOTING.md#common-steps-to-verify-issues) some tools to do the verification over your stream.. @REELcoder this might point to a problem at your ffmpeg command line to generate hls. I recommend you to take a look at [this example](https://gist.github.com/mrbar42/ae111731906f958b396f30906004b3fa).. HTTP streaming requires you to have a closed GOP, I think that might be your problem, I'd suggest you to try these two commands (fine tune them to your neeeds, resolution and buffer size, adapts the keyint to your frame rate):\n\n```bash\n# here I'm assuming your input is 30 fps\nffmpeg -i http://localhost:8008/1 -map 0:v -map 0:a:0 \\\n          -c:v libx264 \\ \n          -x264opts keyint=30:min-keyint=30:scenecut=-1 \\ # we're forcing it to have 1 second gop without scene cut\n          -tune zerolatency -s 1280x720 \\ \n          -b:v 1400k -bufsize 1400k \\ \n          -c:a aac \\\n          -f hls -hls_time 1 -hls_start_number_source datetime \\ # maybe it'd be a good ideia to increment the hls time for 2\n          -hls_allow_cache 0 -hls_flags delete_segments \\\n          -master_pl_name master_1.m3u8 ffmpeg_1_data.m3u8\n\n# and changing the audio codec\n\nffmpeg -i http://localhost:8008/1 -map 0:v -map 0:a:0 \\\n          -c:v libx264 \\ \n          -x264opts keyint=30:min-keyint=30:scenecut=-1 \\ # we're forcing it to have 1 second gop without scene cut\n          -tune zerolatency -s 1280x720 \\ \n          -b:v 1400k -bufsize 1400k \\ \n          -c:a libfdk_aac -b:a 128k \\\n          -f hls -hls_time 1 -hls_start_number_source datetime \\ # maybe it'd be a good ideia to increment the hls time for 2\n          -hls_allow_cache 0 -hls_flags delete_segments \\\n          -master_pl_name master_1.m3u8 ffmpeg_1_data.m3u8\n```. @REELcoder it's hard to wonder about that, those tools I pointed to you could help but even them can't guarantee that you what's the problem. One thing I know for sure is that open gops cause random \"error\", if it has scene detection it can change the gop point and when the player tries to swtich bitrates it might suffer cause of lack of timing sync (PTS or program-date-time) or even worst if they rely on the media-sequence.. Some of these are just [(wild) guesses I usually do](https://haasn.xyz/posts/2016-12-25-falsehoods-programmers-believe-about-%5Bvideo-stuff%5D.html) when I'm facing such a problem:\n\n* did you double check to see if you are reliable for [hls apple's requirements](https://developer.apple.com/documentation/http_live_streaming/hls_authoring_specification_for_apple_devices#2969492)?\n* did you run [apple's  mediastreamvalidator](https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/StreamingMediaGuide/UsingHTTPLiveStreaming/UsingHTTPLiveStreaming.html) or even another [hls-analyzer](https://github.com/epiclabs-io/hls-analyzer)?\n* can you increase your hls_time? (like 2s for segment)\n* does your gop is a multiplier of the chunk size? (hls_time, like for a 2s chunk you need to have either 1s or 2s gop)\n* does your framerate is equal across all the renditions?\n* does your audio framerate (frequency) is equal  across all the renditions?\n* did you run a load test to see if any request takes longer than segment size? (causing it to be stale)\n* are your PTS sync between chunks?\n. It won't help but you should increase your GOP for 1s, since you fixed the bitrate issue, I'd say for you the next step would be test it [with another segmenter](https://github.com/lucasmundim/nginx-rtmp-dockerfile#how-to-use). We use hls.js/clappr for more  than 5 years with many 24 hours / 7 days streaming, this is seemgly something on the hls generation.. I can tell you that I use ffmpeg for my tests and it works just fine! ;/\n\n# open two terminal tabs\n\nat the first run:\n\n```\n# if you're on macos\nffmpeg -re -pix_fmt uyvy422 -f avfoundation -i \"0\" -pix_fmt yuv420p -x264opts keyint=30:min-keyint=30:scenecut=-1 -tune zerolatency -s 1280x720 -b:v 1400k -bufsize 1400k -hls_start_number_source epoch -f hls stream.m3u8\n```\nat the second run (on the same folder):\n\n```\n# npm -g install http-server\nhttp-server -a :: -p 8081 --cors -c-1\n```\n\nNow go to [clappr's demo page](http://clappr.io/demo/#dmFyIHBsYXllckVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicGxheWVyLXdyYXBwZXIiKTsKCnZhciBwbGF5ZXIgPSBuZXcgQ2xhcHByLlBsYXllcih7CiAgc291cmNlOiAnaHR0cDovL2xvY2FsaG9zdDo4MDgxL3N0cmVhbS5tM3U4JywKICBwb3N0ZXI6ICdodHRwOi8vY2xhcHByLmlvL3Bvc3Rlci5wbmcnLAogIG11dGU6IHRydWUsCiAgaGVpZ2h0OiAzNjAsCiAgd2lkdGg6IDY0MAp9KTsKCnBsYXllci5hdHRhY2hUbyhwbGF5ZXJFbGVtZW50KTsK) and play it. It worked here =) joking aside, this command I gave you do not transcode audio to `aac` maybe that might be your problem, the audio transcoding not the video.. this might help you https://github.com/clappr/clappr/issues/1510. and https://github.com/JMVTechnology/Clappr-Subtitle/issues/8. https://github.com/clappr/clappr/blob/master/doc/BUILTIN_PLUGINS.md#playback-configuration. I think this works cross all playbacks that relies on html5 https://github.com/clappr/clappr/blob/9a2646772fae9b1b17bfdedb50179bb38a83658e/src/playbacks/html5_video/html5_video.js#L605. This seems to be not related to Clappr @ikniazi23 . You might find some help at the [closed issues related to ads (specifically vast)](https://github.com/clappr/clappr/issues?q=is%3Aissue+vast+is%3Aclosed). Thanks @dayvson  :) this is a great idea, we should more often do i18n, \n\nThe only thing I would change would be to code a safer access for `window.navigator.language` since it seems that it's [not 100% supported by all browser](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/language)\n\nWe could start to [make use of polyfill!](http://gu.illau.me/posts/follow-up-on-navigator-languages/#polyfill) and instead of spreading this code all over, we could start an object and called at Core or other place.\n\n``` javascript\nclass ClapprPolyfill {\n   installAll() {\n       this._installNavigator()\n   }\n\n  _installNavigator() {\n    if (!window.navigator) { window.navigator = {} }\n    if (!window.navigator.language) { window.navigator.language = 'en-US' }\n   }\n}\n```\n\nThe idea is to avoid at maximum this checks (either by features or `user-agent`) and in the future we can compose it with more polyfills.\n\nWhat do you think @flavioribeiro @towerz @thiagopnts @bernardocamilo @tjenkinson ?\n. I'd suggest es6 string concat: `${value}%`\n. how about?\n\n``` javascript\nvar timeToFormat = this.actualLiveTime? secondsSinceMidnight:this.duration\nvar currentDuration = formatActualTime(timeToFormat) //isn't formatCurrentTime ???\n```\n. maybe we could extract this to a method\n. I think it's still good to send coveralls, but we can do that after the merge :+1: \n\n``` yaml\nenv:\n  - COVERALLS_SERVICE_NAME=\"travis-ci\"\n  - COVERALLS_REPO_TOKEN=\"sj8SOxUBGaVeFGSY9ryrC2eTFpVjCPHJl\"\n```\n. maybe we can assume `false` as default (so we won't broken anything) but I also think that the default should be **seconds** =/\n\n``` javascript\nsetCurrentTime(time, inseconds=false)\n```\n. :+1: \n. Since we're going to dispatch two kinds of values on `CONTAINER_SEEK` event, maybe we need to redesign it:\n\n``` javascript\nthis.trigger(Events.CONTAINER_SEEK, {percentage: true, value: percentage}, this.name)\nthis.trigger(Events.CONTAINER_SEEK, {percentage: false, value: time}, this.name)\n//or\nthis.trigger(Events.CONTAINER_SEEK_PERCENTAGE, percentage, this.name)\nthis.trigger(Events.CONTAINER_SEEK, time, this.name)\n```\n\nI'm in favor of the second (adding another event)\n. `seek` to `seekPercentage` (even in the examples ^)\n. `seek` to `seekPercentage`\n. `seekSeconds` to `seek`\n. maybe we can:\n- start it with zero, outside of  ifs `var time = 0` in order to avoid `seek(undefined)`\n- or put a check `!!time && this.seek(time)`\n\nI'm in favor of the last\n. :+1: cool\n. You're right! maybe this one could work:\n`(time !== undefined) && this.seek(time)`\n. :x: console.log\n. Why wouldn't you just do this:\n\n``` javascript\n//new player\nplayer.on(Clappr.Events.PLAYER_READY, function(){})\n```\n. We can discuss that with @clappr/core :) with that said, if we think this a great _syntax sugar_, I think it'd be nicer if we provide it as an option, then we can extend to a set of most used events (onPause, onPlay, onStop, onError(this one might be pretty useful) ...):\n\n``` javascript\nnew Clappr.Player({\nevents: {\n  onReady: \"..\",\n  onPlay: \"...\"\n}\n})\n\nthis.listenTo(container, Events.CONTAINER_PLAY, this.onPlay)\nthis.listenTo(container, Events.CONTAINER_PLAY, this.options.events.onPlay)\n```\n. I'd rather explicitly to use a mapping of events than this, it might let the code clearer (more functional style).\n\n``` javascript\nvar eventsMapping = {\n  \"onPlay\": Events.PLAYER_PLAY,\n  \"onStop\": Events.PLAYER_STOP,\n}\nvar userEvents = this.options.events || {}\n\n//Object.keys http://kangax.github.io/compat-table/es5/#Object.keys vs https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\nObject.keys(userEvents).forEach((userEvent) => {\n  //I'm not sure if we need to check this or not\n  var eventFunction = userEvents[userEvent]\n  eventFunction = typeof eventFunction === \"function\" && eventFunction\n  eventFunction && this.listenTo(eventsMapping[userEvent], eventFunction)\n})\n```\n. cool, nice catch :)\n. but how about when it's `Playback.VOD`?\n. my bad!!!\n. What's `a` ? is it the `element` (video tag and its source) ? If yes, I think we should name this to `videoElement` or `element` or something that shows intention.\n. :) I think you're right! maybe we can get rid of that `a`, my observation was about naming that `a` could mislead or make us to go to `HTML5Video` to understand what's `a`. I think, `return this` is best.\n\n``` javascript\nrender() {\n  super.render()\n  this.ready()\n  return this\n}\n```\n. Cool :clap: \n. I think we can get rid off bind:\n\n``` javascript\nsetInterval(() => this.determineIfPlayheadMoving(), 500)\n```\n. Why did you change this?\n. Maybe we should `clearInterval` at stop too otherwise it'll keep checking bufferstate... this would require to start it again on play (if it's not already started).\n\nI'm thinking that after a media is done, it'll keep triggering `BUFFERFULL`\n. Android/iOS devices uses hls natively on vide tag. (and the Safari browser)\n. If you move that for `onPlay` and `onStop` you still need to ensure that buffering state (handleBuffering) is changing even before it plays any media.\n. :+1: \n. \"To define an URL ... clicked, use `watermarkLink` parameter. If the watermarkLink is not defined, the watermark ....\"\n. Did you test with FlasHLS? ( I think this `process.nextTick` is to handle flash)\n. Cool :+1:  thanks once again mister\n. I think we can be positive about this statement:\n\n``` javascript\n// initialize this value at constructor (or check the best place)\nthis.mediaControlEnabled = false\n\n//disableMediaControl() \n// ... easier to read\nif (this.mediaControlEnabled) {\n  this.mediaControlEnabled = false\n  //...\n}\n\n//enableMediaControl() \n// ... easier to read\nif (!this.mediaControlEnabled) {\n  this.mediaControlEnabled = true\n  //...\n}\n```\n\nWhat do you think?\n. Does it work for the first time when clappr will try to enable the mediaControl? (`undefined`)\n. I think it's better to log this.\n\n``` javascript\nLog.error(`hlsjs: this error could not be recovered, evt ${evt}, data ${data} `)\n```\n. I think you need to call `this.recover()`\n. `this.hls` instead of `hls`\n. You're probably right, we need to trigger PLAYBACK_ERROR for default and the failed recover, good catch.\n. We should log this failed try and also trigger a playback_error \n. We should also trigger a playback_error \n. @ronag no problem, usually when we face an error that we can't do nothing about, we trigger a playback error, therefore the player can show something for the final user instead of freezing.\n\nThe [tag video](https://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L291), for instance, it handles the error this way:\n\n``` javascript\n  onError(event) {\n    this.trigger(Events.PLAYBACK_ERROR, this.el.error, this.name)\n  }\n```\n\nIn our case we can trigger an even like this but changing the reason :)\n. you should trigger in each point of no turning back (failed recovery, `default`)\n\n``` javascript\nthis.trigger(Events.PLAYBACK_ERROR, \"error description\", this.name)\n```\n. Thanks @jussike :) can you make it \n\n``` javascript\noptions.mimeType || this.options.mimeType\n```\n. @towerz are we going to use `options.playback` or `options.hls` ?\n. @clappr/core should we move this to core? I think it might be useful for other stuffs.. although it could also be a premature optimization\n. I think only `get now`!\n. \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \n. The names are i18n, you shouldn't replace them.\n. How about we specify the name for `Vast Ad plugin` because it works only on vast?\n. How about:\n\n```javascript\nconst isRegularPoster = this.options.poster && this.options.poster.custom == undefined\n\nif (isRegularPoster) {\n  const posterUrl = this.options.poster.url || this.options.poster\n  this.$el.css({'background-image': 'url(' + posterUrl + ')'})\n} else {\n  this.$el.css({'background': this.options.poster.custom})\n}\n```\n\n@clappr/core thoughts?. Thank you @NicholasAsimov  \ud83d\udc4d  great addition!. Good catch\n`else if (this.options.poster)`. Cool! Now, we (clappr) also need to add a test case for `background-image` \ud83d\udc4d \n\nNice work @NicholasAsimov . I'm in favor of using an `Object` here even if it has a single element now `{orientation: 'x'}` and then change it also in doc (Event) because it leaves room for new attributes, what do you think?. What do you think too @clappr/core ?. You're right, my bad!. I'm in favor of `get selectedClosedCaptionTrack` cc @towerz . and `set`. Here I'd do it in a functional way, thoughts @towerz @thiagopnts @flavioribeiro :\n```javascript\nlet newId = () => {\n    let id = 0\n    return (){return id++}\n}()\nlet onlySubtitles = (track) => { track.kind === 'subtitles' }\nlet makeTrack = (track) => { return {id: newId(), name: track.label, track: track} }\n\nreturn textTracks.filter(onlySubtitles)\n                  .map(makeTrack)\n```\n\nPS: I don't remember if we already have `map` and other core functions (id) so we should use them.. Here I'd to try to apply functional. ;) I'll try to write a example later.. Maybe we should strive for es6 style always! :D. Here I would try to make it only a matter of transformations, filtering and select also.\n\n```javascript\n// since trackId is a parameter and it seems to be never changed, we can check it before all\nif (!isNumber(trackId) || trackId < 0) {return}\n\nshowingTrack = tracks.select((track) => {\n  if (track.id ==trackId) \n     return track\n})\n\ntracks.filter((track) => {track.track.mode !== 'hidden'})\n           .forEach((track) => {track.track.mode = 'hidden'})\n\n!!showingTrack && showingTrack.track.mode = 'showing'\nthis._ccTrackId = trackId\nthis.trigger(...)\n```. Do we have `find` prototyped on Array ourselves? I think this function doesn't exist in most mobile browser =/ according to https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/find?v=example. Also, I think you can only return `true` or `false` to this function =)\n\n`find((track) => { track.track.mode === 'showing' })` it still will returns the selected track. Cool!  :D `map` and `filter` seems to be guaranteed (see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/map?v=example https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/filter?v=example)\n\nSorry if I was nitpicking to change the code style =/, I believe that this style is easier to maintain in long term.. the same logic for boolean predicated . Since `trackId` never get changed during this function life cycle I'm in favor of moving this statement up above like if it was a [precondition](https://github.com/google/guava/wiki/PreconditionsExplained) to run this functions? what do you think? It's like, if the track is different from `-1` then we should be doing nothing, I'm positively saying this because we didn't change its value.\n\nShould be mark all the tracks as hidden even if the trackId is different from -1?\n\nDoes `-1` means selected?. \ud83e\udd47 . About this decision, what name, where or if we should put it on utils or as a polyfill I think @clappr/core can say something \ud83d\udc40 \n\nI think `select` or `find` should be better and as polyfill to make it flow with the existent `filter`, `map` and others.. You're doing an awesome job \ud83c\udf7b  I'll let @clappr/core decide this one, we judge much better than only my view \ud83d\ude04 . But I'm in favor of using Mozilla polyfill (referencing them on the source too). I think, maybe we should go first as a container event or core =/ but I dunno, thoughts @clappr/core ?. I like this but we should handle this in a different manner, @towerz knows better.. ```diff\n+when the playback\n-when playback\n```. Instead of using the created `playback` I'd create a new one here just to be sure that when it's initialized (aka instantiated, I guess) we're not facing this issue anymore.\n\n```javascript\nconst playback = new HTML5Video(this.options)\n```. `The seeking event is fired when a seek operation **began**.`\n\nhttps://developer.mozilla.org/en-US/docs/Web/Events/seeking\n\nAren't we looking for the event after this?\n\nWe should tied this event to `seeked` https://developer.mozilla.org/en-US/docs/Web/Events/seeked. I think we can remove this conditional:\n\n```javascript\nshouldEnablePointer?this.container.$el.addClass('pointer-enabled'):this.container.$el.removeClass('pointer-enabled')\nthis.pointerEnabled = shouldEnablePointer\n```. Is there any possibility of `$el` or `parent()` return `undefined`?. Shouldn't all the (configurable) components answer to this method? (even if it's to be an empty implementation). Once we define that a refresh on any configuration will trigger a calling to all configurable components with the newConfig, this might be helpful.. Can you describe/document the proposed error object here? Like we do at [Player's constructor](https://github.com/jhonatangomes/clappr/blob/c5e5fcf174c9d60135750608d4e3af5c4f4aa45e/src/components/player.js#L152-L160)?. Maybe we could provide a more user friendly message like `We tried %n times to play the content but it couldn't`. Since this message could be used at some UI at some point, that's my guess. But I'll let it to @clappr/core to comment on.. It bothers me to see `levels` being set all around. \n\nIs it possible to listen only to `PLAYBACK_ERROR` with level > `WARN`? I know it's possible but the user should filter the other errors. Is this something we want? Or should we create n ways to create errors? like `Error.Fatal()` or `Error.Warn()`... again I'll let for @clappr/core . `it triggers the` or we could:\n\n```javascript\ndescribe(\"when error method is called\", function(){\n    it(\"triggers the event ERROR\", ...\n})\n``` \n\nThe fact of ERRO being fired with error data is already expected.. Here I also think we can use context:\n\n```\ndescribe(\"when core is not ready\", ....). Here we could use the usual phrase but I'd vote to remove `should` :P. I know I'm being picky in here but let's use the present form `it triggers`.. Here is correct1 \ud83d\udc4d . I think we could document all the public interface of this component since it'll be very useful for players developers.. Is it safe to assume that `0` will always the active container? where does this policy is enforced?. shouldn't we also check here `if (this.actualLiveServerTimeDiff)` @clappr/core ?. I agree with @jhonatangomes and here we're setting a direct dependency through `core` and `core.mediaControl`.",
    "davidsonfellipe": "\\o/\nAtt,\nDavidson Fellipe\nFrontend Engineer\nConferences Organizer: Front in BH, Front in Recife and RioJS\nwebsite fellipe.com http://www.fellipe.com\ntwitter twitter.com/davidsonfellipe\nOn Fri, Oct 31, 2014 at 2:48 PM, Fl\u00e1vio Ribeiro notifications@github.com\nwrote:\n\nClappr now supports all sizes.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/122#issuecomment-61290886.\n. \n",
    "barbosa": "Late, but +1 \n:)\n. Yay! :beers: \n. @princ007 This PR should not be integrated yet once the feature is still under development.\n@thiagopnts I think there are pros and cons. Actually, this decision was not made yet. It was added here just for testing purposes. Perhaps, before all, we need to discuss what makes sense to be delivered as an external plugin or inside clappr's bundle. But yeah, let's talk about it in a near future :)\n. ",
    "popand": "that seems to have done the job.  thanks for your help.\n. ",
    "jjonjon": "hi !\nI created a player for testing\nduring the week it worked fine but now it is broken\n. I'm sorry to trouble \nNow everything works fine\n. Thank you!\nSorry again!\n. ",
    "whadar": "Is there any ETA on this?\nThanks!\n. related to #207 \n. The browser is always Chrome. \nThe JW test page work well on Chrome (Nexus5), but no luck with clappr.\n. I was testing a page with non-standard clappr version.\nWith a vanilla and latest version of clappr, things work as expected\n. zeroclipboad had similar issues:\nhttps://github.com/zeroclipboard/zeroclipboard/issues/511\nThey suggest interesting workarounds!\n. +1 \nThat would be cool and very useful for live. Did anyone see something like that in Javascript?\n. ",
    "dusterio": "It would be nice to log current TS segment name, maybe current bandwidth (adaptive HLS) when it's being switched\n. I'm making an application that streams (live) random worldwide videos, and I'm planning to add a dynamic (Google) map pointing to the origin of the video. Whenever a TS segment changes \u2013 map marker moves to the new point, so JS needs to be able to handle new segment events. \nIf you request information from flashls \u2013 in case of HTML5 video capable browsers, you won't get anything? I would have to behave differently depending on video player format.\n. By the way, since you mentioned flashls \u2013 are you still using flashls for SWF mode? I don't see any references anywhere \n. @flavioribeiro by the way, when including this said plugin (Level Selector), I get this:\nUncaught Error: Cannot find module 'underscore'\nUncaught ReferenceError: LevelSelector is not defined\nIt doesn't work out of the box. But yes \u2013 I will try to bind to important events the same way and see how it goes\n. @flavioribeiro by the way, did you modify flashls? does it still have \"fragmentplaying\" event? \n. ",
    "tjenkinson": "it seems to be for me now\n. I thought this meant clicking on the circle and then dragging, not clicking anywhere on the bar\n. I think you want hlsjs's capLevelToPlayerSize option.\nhttps://github.com/dailymotion/hls.js/blob/master/API.md\nSo\n{\n   playback: { hlsjsConfig: {capLevelToPlayerSize: true}}\n}\nTo Clappr constructor\n\nOn 2 Aug 2016, at 23:58, Todd notifications@github.com wrote:\nIs this relevant only to the Flash fallback and not to the HLSjs implementation?\nI am seeing clappr requesting our top bitrate m3u8 even when I have the player sized down very small. Ideally, it would take the player size into account and not try to serve, for instance, a 4628 bitrate 1920x1080 video in a 250px wide player - right?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. If you go to the page with the player, then go to \"about:debug\" in the address bar with any luck it might bring up a console.\n\nIf it does refresh the page and see if any errors get logged.\n\nOn 31 Jul 2015, at 23:40, ferval notifications@github.com wrote:\nHi I'm trying to use clappr with ionic but on my Nexus 4 is not working. When I run the app in the desktop browser I don't have any problem. Any idea about what I should try?\n\u2014\nReply to this email directly or view it on GitHub.\n. Couldn't speed be null if not compatible? I'd suggest not -1 because I can't find anything in the html5 video spec that says playbackRate can't be negative, and here it says it can be for reverse which makes sense.\n\nIf clappr allows the speed to be negative there might actually be 2 cases to check.\n- is positive speed supported.\n- is negative speed supported.\nbecause some playbacks might not be able to do both.\n. @marciocamello nice! You should add it here :)\nhttps://github.com/clappr/clappr/blob/master/doc/EXTERNAL_PLUGINS.md\n. Browserify requirejs conflict issue: https://github.com/clappr/clappr/issues/453\n. What's the link to the report?\n\nOn 22 Jul 2015, at 16:12, Tom Richardson notifications@github.com wrote:\nI have added a bug report to Chromium bug tracker to at least attempt to get Chrome to address this issue.\nIf you have a moment please go by and star the issue.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for this. If you want some more information about my setup it's at https://github.com/LA1TV/Website/tree/stable/app/assets/scripts\n. If I include clappr in a standard script tag in the <head> section before requirejs it loads, but then requirejs is broken so it looks like there might be a conflict there.\n\nBut I've tried finding and replacing all instances of require with clapprRequire and I still get the same error.\n\n\n\n. I've got it working by wrapping the entire file in a closure and setting require and define to undefined at the start of the closure. Then I needed to add the requirejs shim config to tell it the Clappr global variable it sets belongs to it.\n\n\nIt looks like the cause of the issue may be here:\n\nMaybe here it is exporting template using my requirejs using define (which is never set in the file), and therefore can't access it when it uses it's own require?\n. Ok thanks for the update, I'll keep doing that for now then.\n. I am now trying to build a custom plugin but am having issues again. I have put my plugin in a separate requirejs module, and have had to wrap this in a closure like I have with the main clappr module.\nBut now the module with the plugin wants to talk to the clappr module with the browserify require but can't because it can't get to it.\nSo now I'm going to now change the fix to also place the contents of the browserify require in another browserify_require global variable, and then load this into the local require at the top of each closure.\nCan you think of a nicer way than this?\n. Just looking and see you're moving over to webpack https://github.com/clappr/clappr/pull/504 :)\nAny plans to use the output.library and output.libraryTarget options? http://webpack.github.io/docs/library-and-externals.html\nI'm using webpack for another project and if the library target was set to \"umd\" then in theory clappr would work nicely with requirejs, as well as other module systems out there, and it would default to placing the entry files export object on a window variable named the value of output.library (ie \"Clappr\") if there wasn't a module system in use.\nI think this would also solve the issue I had above with creating plugins, if the plugins were also build with webpack and exported as libraries.\n. Awesome! :+1: \nI ran a build with web pack last night with your current config and it looked like it worked :)\n. I have never tested it with a playlist longer than that so that makes sense. Thanks for the response and new config option. I'll try that now and let you know.\n. This was the issue. After 4 minutes running with the latest release the dvr starts working, and when the event ends it stops properly. I've spent all day trying different players and yours is the first one that has actually handled everything properly so thanks! All the others have either not supported dvr, or supported dvr but then broke when the event ended, and they don't have a nice distinction between live and a \"jump to live\" button that yours does.\nHaving an issue trying to build master though on windows. Getting this:\n\n. Yep that sorted it thanks. Got it working with the config now as well.\n. Proposed fix: https://github.com/clappr/clappr/pull/458\n. I now get this error which I'm looking in to\n\n. You might want to log to console if can't go fullscreen. I'm not sure.\n. No sorry I'm pretty busy with other stuff at the moment. I'll comment here if I get time.\n\nOn 27 May 2015, at 19:33, Bruno Torres notifications@github.com wrote:\nHi @tjenkinson, any progress with this?\n\u2014\nReply to this email directly or view it on GitHub.\n. So I'm thinking a method could be added to Playbacks 'flashRequired()' which would return a boolean.\n\nFor everything where this may return true there should also be a 'canPlayWithFlash()' method which is the same as 'canPlay' but assumes flash is present.\nThen there could be another playback called 'no_flash', which would check the other playbacks to see if they 'canPlayWithFlash()' and if it gets a true report true from its 'canPlay()'.\nSound ok?\n. Also chrome is now defaulting to some form of 'click to play' for plugins so this might become more important. Think it might automatically allow plugins from the same domain but haven't looked into it in depth yet.\n. @towerz yes I agree keeping the playbacks unaware of each other makes sense.\nWould the plugin replace the html for the no_op playback when it's shown to show the flash message? Replacing what no_op creates doesn't seem very efficient though.\nWhat's the advantage of it being a plugin over logic in the no_op playback when determining what text to show? If it's in the no_op playback to determine what's rendered it means that no_op will be aware of the other playbacks, but this has to happen at some point.\nI might not be understanding what plugins can do.\n. @towerz ok thanks I think I understand but the one thing that's still confusing is that the no_op playback at the moment renders the message in the screenshot I posted at the start of this issue.\nSo I guess the plugin would reach into the playback to remove that text from the dom, then render it's own on the player?\nOr could the plugin be called \"UnrecognisedPlaybackScreen\" (or something like that), and this would either render the message in the screenshot above to the player, or the \"install flash\" message? In this case the no_op playback would only render the noise canvas and not the text.\n. @towerz great I'll start work on this then :)\n. @towerz  just looking at some recent commits. I guess it would make more sense just to assume flash is required if the plugin extends playbacks/base_flash_playback now? And then BaseFlashPlayback would contain the canPlayWithFlash method which would be overridden.\nSome other work has come up so this on hold again at the moment for me I'll reply here when I get some time again.\n. Brilliant thanks for this\n. We have hls working fine in firefox with clappr. Have you tried adding the <!DOCTYPE html> at the top of the file like the console suggests?\n. I've just run some tests and it appears like clappr is looking for the file extension to determine what type of file it is, so splitting on ., but it is treating everything after the first . as the extension, and therefore getting mp4/playlist.m3u8, not m3u8, and therefore not realising it's hls.\nGoing to check this a bit further then open a bug ticket and have a look at fixing it.\n. I've found one issue at https://github.com/clappr/clappr/blob/c9704b081f965997e5751de390b70af49c1bd2ea/src/playbacks/hls/hls.js#L357\nWhich I think should become: !!resource.match(/^http(.*).m3u8?$/) and also the mime type could also be application/vnd.apple.mpegURL.\n. And another issue is at: https://github.com/clappr/clappr/blob/c9704b081f965997e5751de390b70af49c1bd2ea/src/playbacks/flash/flash.js#L201 and line 203 where there should also be a \"$\" at the end of the regex expression.\nI think this is what's causing your issue as it's finding the .mp4 and thinking it's a flash video.\nI'll make a pull request shortly.\n. @nums https://github.com/tjenkinson/clappr/blob/9b365f161703b60765e6aa7f8bf8ad64b7b80678/dist/clappr.js contains the fixes and should work. Can you try with that and let us know if it doesn't?\n. Ah yes forgot about query parameters.\n. I missed this before.\nI agree I think just having the one playback would make sense as well given they are so similar.\n. Please can you paste the code again? For some reason it's not there for me.\n. Do those devices play the stream fine if you open the url to the playlist file directly in the browser?\n. Yes I tried that and it still crashes.\n. I can confirm that this fixes the issue for our stream. Weird bug.\nThanks!\n. This sounds like it could be the same as what's happening for me.\nhttps://github.com/clappr/clappr/issues/480\n. Sorry I thought I checked but obviously I didn't.\n. So just messing around and if there are 2 times in the url edge appears to add them together\nhttps://www.la1tv.co.uk/player/111/334?xyz=5m10s&abc=1m15s\nThat starts at 6 minutes 25 seconds. This seems ridiculous to me!\n. Ok I have no idea why they decided that would be a good idea. Not sure if it's just when the autoplay attribute is set or if they will always jump.\n. Had a quick google for documentation of their implementation but couldn't find anything that explains this.\nThe html5 video spec doesn't explicitly say autoplay should mean start from 0 but I'd have thought that would be assumed.\n. We're not a company but we use it :)\nWe're Lancaster university's student TV station and we use it for hls live streams on https://www.la1tv.co.uk/\nOne of the main reasons was because it handles dvr really well.\nhttps://github.com/LA1TV/Website\n\nOn 14 Aug 2015, at 20:15, Thiago Pontes notifications@github.com wrote:\nIs there anyone else(besides http://globo.com) using Clappr? I'm compiling a list of products/companies using it so if you want to be included let me know.\n\u2014\nReply to this email directly or view it on GitHub.\n. @svenerbeck I get a 404?\n. Nice!\n. No problem. I've opened another pull request with some questions\nhttps://github.com/clappr/clappr/pull/528\n. Thanks this is the first time I've used es6 do that's useful to know I'll update it :)\n\nI think I tried accessing 'container' on 'mediaControl' (in the comment) but it was undefined. I'll check again later.\nStill not sure what the answer is to my question 2. The duration is already getting added, but I don't know where from, and was thinking that that logic, wherever it is, should maybe be here aswell?\nThanks\n. Thanks that's still not quite what I was looking for :P\nI was wondering where the duration value was appended to the seek time component, because it doesn't happen inside it. I've found it now in the DVR Controls plugin: https://github.com/clappr/clappr/blob/b544caac327966a628b4c0e29c9a518e84437d23/src/plugins/dvr_controls/dvr_controls.js#L81\nWouldn't it make more sense that the SeekTime plugin is responsible for adding the duration (and keeping it updated) rather than the DvrControls plugin?\nSo the SeekTime plugin would contain the logic to determine if dvr is enabled (or changed) and then show or hide the duration accordingly. Then the <span data-duration></span> could also go in the https://github.com/tjenkinson/clappr/blob/seek-time-handle-settings-event/src/components/seek_time/public/seek_time.html template file.\n. Oh yeh I didn't realise SeekTime wasn't in the plugins folder, just assumed it was for some reason. If SeekTime is basically part of MediaControl maybe it could live in the MediaControl folder?\nIt looks to me like the CONTAINER_PLAYBACKDVRSTATECHANGED and CONTAINER_SETTINGSUPDATE are triggering the entire MediaControl component to be completely rerendered. Is this right? If it is then surely there's no reason to listen for a settings change event in SeekTime because it would get rerendered whenever this happens anyway?\nNow I understand the structure a bit better I agree that the CONTAINER_PLAYBACKDVRSTATECHANGED should just be removed.\n. I have removed the comment with that event in now. Also because it is a separate class it looked to me that the events would not get unregistered if the MediaControl component was removed. My latest commit should pass a remove() call from MediaControl through to SeekTime.\nAlso now the update() method will always be called on a render() meaning if a container setting does change, ie DVR enabling, it should react.\nIn MediaControl there is a destroy() method. Where is this called from? I'm a bit confused as to where this fits in with the system. Also shouldn't the stuff it does also happen if the user was to call remove()?\nSorry about all the questions :P\n. Ok in which I case to me it looks like this means none of the event handlers are unregistered as remove() appears to do that with the stopListening() call.\n. Great in which case I think this pull request is finished unless you have any issues :)\n. Microsoft edge now supports hls natively as well. With our stream it appears to be broken through, random green pixelated areas, so maybe using flash for that would be good as well?\n\nOn 1 Sep 2015, at 17:58, Bruno Torres notifications@github.com wrote:\nChanged the subject to make it easier to search for the solution.\n\u2014\nReply to this email directly or view it on GitHub.\n. I just did now and there is no stop button on there. But clicking play after pause always appears to seek to \"-1\" which appears to be the live point.\n. Calling playerStop and then clicking play after a while results in the same console log messages as above with the failed .ts requests and no .m3u8 requests. Guess this means it's a flashls bug then?\n\nNot sure exactly what you mean by the second test. A stream we should be running 24/7 is https://stream1.la1tv.co.uk:1936/live/studio_out_720p/playlist.m3u8 if you'd like a url to test with.\n. :+1: brilliant thanks!\n. Any work started on this yet?\nWe will need this functionality in some form for https://github.com/LA1TV/Website/issues/628 because we have multiple encodes for some of our content.\n. :+1: \n. :+1:\n. @towerz how's this going? This is the last thing I need now before I can switch to clappr for VOD at LA1:TV.\n. @towerz I've just been thinking about this myself and have thought of a slightly different solution.\nI like the plugin architecture but maybe something like this may be more suited integrated into the core player and not as a plugin.\nAt the moment if you load several sources my understanding is that a container gets created for each source, and this may be useful to do cool things like picture in picture.\nI think it would be nice if the player could support several encodes of the same media, and pick the first one that is supported, but still also support creating multiple containers. For example you might want to do picture in picture, but you have 3 encodes for the main feed, and 3 encodes for the picture in picture feed.\nI am thinking that the load() method could work like this\njavascript\nplayer.load([\n   [\"main.m3u8\", \"main.mp4\", \"main.webm\"],\n   [\"pip.m3u8\", \"pip.mp4\", \"pip.webm\"]\n]);\nSo if an item is an array the player will then check if it has a playback that canPlay each item in order, and stop at the first one that can, and each item in the array will map to one container.\njavascript\nplayer.load([\n  \"layer1.mp4\",\n  \"layer2.mp4\"\n]);\nwould automatically be converted to\njavascript\nplayer.load([\n  [\"layer1.mp4\"],\n  [\"layer2.mp4\"]\n]);\nfor backwards compatibility.\nWith this method the playbacks should only be created to check if they canPlay.\nThe advantages to this would be:\n- Playbacks are only created when necessary. Containers aren't created for all sources and unnecessary ones destroyed.\n- The user can load multiple items into different containers, and have multiple sources for each container with the player automatically picking the best one.\n- It might not need the rendering in playbacks separating out because the rendering would only happen if the playback could play the media anyway, and if it can then the render is fine.\nI think if it was a plugin it might not be possible to make it this flexible, like the new load argument structure?\nLet me know what you think :)\n. @towerz sounds good to me. How will the load() method work then though?\nAre you suggesting a plugin will be responsible for constructing the containers (and the default included one will essentially do what the core does now, creating them all and making the first one active)?\nIn which case the format of the arguments passed to load() would be whatever format the loader plugin is expecting?\n. Or maybe it could be a pipeline system?\nSo by default the data passed to load() is left as is and what happens now remains the same.\nBut I could insert a custom loader plugin into the pipeline which would manipulate the data in some way, and then pass it on. E.g. it would get the multidemensional array I proposed above, pick the item from each inner array that is supported, and then pass that on to the built in load()\n. @towerz great I think I understand and that makes sense to me.\nAnything I could do to help with this?\nIf not given you've already planned it all out that's fine, I just need to figure out a temporary work around to get it working for LA1:TV because I'd rather not have the unsupported message flash up. Maybe the current plugin could hide the <div> the containers are placed in until onContainersCreated() has finished?\n. Awesome!!\n\nOn 12 Dec 2015, at 20:38, Leandro Moreira notifications@github.com wrote:\n\u2014\nReply to this email directly or view it on GitHub.\n. :+1: \n. :+1: \n. Is the flash plugin installed and enabled? It is currently required for HLS in browsers that don't support HLS natively.\n\nThis should be changing in the future though :)\n. No problem. I had the same idea a while ago and there is an issue here with more information https://github.com/clappr/clappr/issues/460.\nI just haven't had time yet to implement it.\n. I'm sure @towerz would be happy if you wanted to take a look at that issue. :)\n. It seems to be using the native video tag fine for our stream in edge.\n(We have a separate unrelated issue though where edge isn't decoding the stream properly and leaving loads of random artefacts which wowza are looking into).\n. Will double check later but pretty certain it was html5_video. Think the src on  was the stream url.\nNot tried an MP4 yet but will do.\n\nOn 30 Oct 2015, at 19:02, Fl\u00e1vio Ribeiro notifications@github.com wrote:\n@tjenkinson can you confirm if it's using hls or html5_video playback? I guess our canPlay strategy is matching Edge. Have you tried with both hls and mp4?\n\u2014\nReply to this email directly or view it on GitHub.\n. Yep it's using html5_video playback for hls and an mp4.\n. Can do but only tested hls and mp4 not the other columns in the table so not sure on those.\n. Done https://github.com/clappr/clappr/commit/d543e80905154d9256b6d0a75a44c19c07ff3195\n. When running it locally are you running it with a local web server or the file directly (I.e file://blah)?\n\nAlso any errors in the console?\nWhat browser?\n\nOn 30 Sep 2015, at 09:38, cacciato notifications@github.com wrote:\nHi,\nI'm trying to read some HLS streams...here is my code :\n\n\n\n\n\n\n\n\nwindow.addEventListener('load', function() {\n```\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n```\nsource: \"http://5.135.222.76/vod/DarkKnight.m3u8\",\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\n});\nWhen executing this script, nothing happen : The player view stays black.\nHowever I tested this script on http://cdn.clappr.io/ ... and it actually works.\nDoes someone has any ideas about this issue ?\nThanks.\n\u2014\nReply to this email directly or view it on GitHub.\n. Cool that might be the problem then because when scripts run directly from the file system they have some different permissions due to how the sandboxing works.\n\nYou could try pasting your code into jsbin and see if it runs there (minus the metric_manager script)? If it does you'll probably just need to set up a local web server. Python has a basic one built in.\n\nOn 30 Sep 2015, at 10:08, cacciato notifications@github.com wrote:\nMy script is in the file directory.\nNo errors displayed in the console\nI executed my script on Chrome, Firefox, IE, Safari.\n\u2014\nReply to this email directly or view it on GitHub.\n. I think the reason your first example might not be working is because the container is changing from one containing the noop playback to another one asynchronously (because it's noop before you call attachTo()).\n\nYou should register your event listeners in the CONTAINER_CHANGED event to make sure the container is ready.\n\nOn 20 Jan 2016, at 01:06, Leandro Moreira notifications@github.com wrote:\nhey @diegosacc73 , given your task display a message from the time the video url is being loaded/buffered until it starts to play I think you can just do the simplest, it seems you're watching when user is not playing video vs waiting to play.\n// setup clappr\nvar isNotPlaying = true\nplayer.on(Clappr.Events.PLAYER_PLAY, function() { isNotPlaying = false })\nYou just need to remember that there is no autoPlay: true on mobile but it'll stop the message when the use click on Play.\n\u2014\nReply to this email directly or view it on GitHub.\n. I think this is just not possible on iOS on mobile (unless they save your site to their home screen).\n\nhttp://stackoverflow.com/a/21306314/1048589\n. I think isPlaying() should work like it currently does. If play() has been called I would expect the state to then be playing until pause() is called. If people are already relying on this and its behaviour changes then it could break things.\nGuess there could be another isBuffering() method?\n\nOn 21 Oct 2015, at 21:19, Shahar Mor notifications@github.com wrote:\nI have only tested this when playing hls, on both chrome & firefox.\nIf you want to reproduce it, simply set the browser network to limited (using chrome dev-tools for example), and then click play and check the response of .isPlaying()\n\u2014\nReply to this email directly or view it on GitHub.\n. :+1:\n. Starting work on this here :)\nhttps://github.com/tjenkinson/clappr-thumbnails-plugin\n. Any idea why mediaControl doesn't exist on this._core on line 23?\n\nI'm off out now but will carry on debugging later\n``` javascript\nimport {UICorePlugin, Events} from 'clappr'\nimport './style.css'\nexport default class ScrubThumbnailsPlugin extends UICorePlugin {\n  get name() { return 'scrub-thumbnails' }\nget attributes() {\n    return {\n      'class': this.name\n    }\n  }\nconstructor(core) {\n    super(core)\n    console.log(\"core\", core)\n    this._core = core\n    this._init()\n  }\n_init() {\n// this._core.mediaControl does not exist here\n\n\nconsole.log(\"init\", this._core);\nthis.listenTo(this._core.mediaControl, Events.MEDIACONTROL_CONTAINERCHANGED, this._onContainerChanged)\nthis.listenTo(this._core.mediaControl, Events.MEDIACONTROL_RENDERED, this._renderInMediaControl)\n\n}\n_renderInMediaControl() {\n    console.log(\"renderInMediaControl\")\n  }\n_onContainerChanged() {\n    console.log(\"container changed\")\n  }\ndestroy() {\n    console.log(\"destroying\")\n  }\nrender() {\n    console.log(\"render\", this.$el)\n    this.$el.html(\"test\");\n   // this._core.mediaControl.$el.find('.media-control-right-panel').append(this.el)\n    return this\n  }\n}\n```\n. Nevermind found the issue.\nI had\nplugins: {\n   container: [ClapprThumbnailsPlugin]\n }\ninstead of\nplugins: {\n   core: [ClapprThumbnailsPlugin]\n}\nMaybe a check could be performed when the plugins are loaded in to make sure what they are extending makes sense for the type they're being loaded in as?\n. Done :)\nhttps://github.com/clappr/clappr/issues/584\n. Next question :P\nIs the core property on UICorePlugin part of the api which can be used by plugins or not? I'm presuming it is but the level selector plugin seems to store it in again after getting it from the constructor (although it's actually storing it back over itself).\nhttps://github.com/clappr/clappr-level-selector-plugin/blob/master/src/main.js#L29\n. Cool thanks. Yes it is webpack gave me errors about that when I initially had it that way\n. It looks like if an exception is thrown it is caught somewhere and not printed to the console.\nI am currently doing\njavascript\nconsole.log(\"in render\")\nthrow \"test\"\nin the render() function. The first message is logged to the console but then there's nothing.\n. Think version 1 is finished!\nhttp://tjenkinson.me/clappr-thumbnails-plugin/\nLook allright?\nNo I never touched the logger. Will look at that next.\n. @PooriaFarhad it doesn't at the moment but it might be possible to add this support. Please can you open an issue here and provide an example VTT file?\n. Ok thanks :)\n. I guess it could register methods on the options object when it's loaded but it just seems a bit messy. Would be nice if the instance of the plugin could be accessed some way after clappr has instantiate it.\n. Thanks.\nIt looks to me like both of those solutions still only allow finding the plugin from within clappr or another plugin?\nSo one of the reasons I would like people to be able to add and remove thumbnails dynamically is live streams with dvr and a sliding window. This means as the stream happens new thumbnails will be being generated somewhere on the fly and old ones removed.\nOne solution may be something like adding a remoteThumbnailSource (or something) property, which must return a JSON document with would contain an updating version of the what the static data I already use is. Then the plugin would periodically update itself by checking this url. But I don't think this kind of stuff should be within the responsibility of the plugin. E.g if someone else wanted to have new thumbnails come in via web socket it wouldn't be possible.\nGiving users methods on the plugin that they can use to dynamically manage the thumbnails seems better as it means all the logic of retrieving and updating thumbnails can be left to the developer.\nSo @flavioribeiro would you suggest that having the plugin bind methods to the player would be the preferred way then? I guess I could bind them all to a scrubThumbnails property so a developer could do something like player.scrubThumbnails.addThumb(\"someurl\", 110);\n. Awesome thanks!\n. Ok after stepping through in the debugger the noop playback is created initially, and then the hls playback is created when load is called, and the src property is the correct url inside the playback so it goes wrong somewhere after this point.\n. Got it! :)\nhttps://github.com/clappr/clappr/blob/89e5c3a95ed062e493547657af219c323f8360a1/src/playbacks/hls/hls.js#L23\nwill submit a PR in a minute\n. https://github.com/clappr/clappr/pull/590\n. fixes #589 \n. So the issue is hlsjs defining itself which would not be expected when this is essentially an internal library used by clappr.\n. It looks like it might be possible for the hlsjs source file to be used and then webpack would build hlsjs into webpack. Hlsjs currently uses browserify to build.\n. So building with the hlsjs source doesn't work because clappr would need to also include the dependencies that hlsjs needs. I tried this here: https://github.com/tjenkinson/clappr/tree/hlsjs-requirejs-issue and the 'webworkify' dependency is missing for example.\nThe only solution I can think of for this at the moment is for clappr to not include hlsjs and instead require it as an external dependency :/\n. Fix :)\nhttps://github.com/clappr/clappr/pull/592\n. This has been fixed by these commits in the hls.js project.\nhttps://github.com/dailymotion/hls.js/commit/3685bdb4dc796a6ad55ef4dbe2aa7cd09d5b0aac\nhttps://github.com/dailymotion/hls.js/commit/e930ba64b3bc3b6c649c3a72ff2abcad52171512\nhttps://github.com/dailymotion/hls.js/commit/59d5f0d68fd7095a11282c3d97eba402aace3671\nSo webpack is now building the hlsjs source files as well.\n. This just happened and will change things a bit.\nhttps://github.com/dailymotion/hls.js/pull/36\nIf I understand the difference between dependencies and devDependencies now then I think this is no longer needed.\n. No it's been sorted now in the hlsjs project.\nhttps://github.com/dailymotion/hls.js/commit/3685bdb4dc796a6ad55ef4dbe2aa7cd09d5b0aac\nhttps://github.com/dailymotion/hls.js/commit/e930ba64b3bc3b6c649c3a72ff2abcad52171512\nhttps://github.com/dailymotion/hls.js/commit/59d5f0d68fd7095a11282c3d97eba402aace3671\nSo webpack is now building the hlsjs source files as well.\n. If you think this should be an option I've made a quick PR :)\n. Is this fixed in the latest version? Otherwise I'm going to have to stick with the previous version until it is.\nOr is there a way I could temporarily disable the hlsjs playback?\nThanks\n. Great thanks. I'll test it again but think this might be a different issue.\n\nOn 20 Oct 2015, at 17:35, Fl\u00e1vio Ribeiro notifications@github.com wrote:\nI think @towerz worked on that (89e5c3a) but not sure if fixed the behavior you reported. A workaround to use flashls instead of hlsjs is to pass the built-in FlasHLS plugin as an external one like plugins: { playback: [Clappr.FlasHLS] } (it will be in higher priority on the playbackPlugins array on loader object).\n\u2014\nReply to this email directly or view it on GitHub.\n. So with our stream with a moving window the duration clappr is showing on the seek time element keeps increasing, and when you click on a position on the seek bar it is seeking to that time directly on the video element.\n\nSo for for a 15 minute window after 5 minutes clappr is showing the duration as 20 minutes, and clicking on the 15 minute point of the seek bar will jump to 15 minutes on the video element. Clicking at 3 minutes on the seek bar will seek to 3 minutes on the video element which fails because that data has been removed.\n. the sliding property is always resolving to 0 in the seek method which is looking like it might be the issue\n. this.hls.levels[this.hls.currentLevel].details.sliding\nthe sliding property doesn't seem to exist\n. giving up for now. I think with these changes it is actually seeking to where it should be, but the scrub bar position is being calculated wrong\nhttps://gist.github.com/tjenkinson/39acae00012d8b2846c3\n. Yes this would be nice. I guess maybe this could be a plugin?\n. This ok?\nhttps://github.com/clappr/clappr/pull/598\n. Nice\n\nOn 20 Oct 2015, at 00:19, Leandro Moreira notifications@github.com wrote:\nHere it's http://clappr.github.io/classes/Player.html#yui_3_9_1_2_1445296707565_548\n\u2014\nReply to this email directly or view it on GitHub.\n. Just a point I guess this means all external plugins will need to be rebuilt with the latest version in order to continue working with this change?\n. I guess it could also allow a plugin if the type is undefined meaning it was built with an older version, but then obviously older plugins wouldn't get the check.\n. Ah right I was thinking the extended class was built in to the plugin when the plugin was built.\nOn 21 Oct 2015, at 13:47, Fl\u00e1vio Ribeiro notifications@github.com wrote:\nsince the plugins are extending the base ones, they will automatically have the type attr, don't need to rebuilt them\n\u2014\nReply to this email directly or view it on GitHub.\n. Presume you're referring to this page: https://github.com/clappr/clappr/blob/master/public/index.html\n. It'll be because it's now using hlsjs instead of flashls which means it will require that http header. Previously the flash version would have required the crossdomain.xml file.\nOn 22 Oct 2015, at 21:25, Daniel Roviriego notifications@github.com wrote:\ngetting a \"XMLHttpRequest cannot load http://xxxx/my.m3u8. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://mydomain' is therefore not allowed access.\"\nGot it with hosted version from http://cdn.clappr.io/latest/clappr.min.js and hosing the js in my server, with version 0.2.14 .\nWith 0.2.13, everything is fine with chrome serving locally.\nWhat could that be related with ?\nthanks in advance\n\u2014\nReply to this email directly or view it on GitHub.\n. Have you got a link to the page with the issue? Will be easier to debug.\n\nOut of those browsers the only one where hlsjs will actually be chosen is chrome.\n. Yeh I have the same issue in chrome on windows. The links has stopped working for me now though.\n. Shouldn't this css class be being used instead?\nhttps://github.com/clappr/clappr/blob/77e016b3f416c06857db6b8789c7efd1eb85340c/src/components/media_control/public/media-control.scss#L23\nAlso I guess if that's the case then this cursor should also be inserted there as well.\n. @leandromoreira yeh the reason I added txt was to try and make clear that it was the text representation of the time not a numeric value, but displayedDuration and displatedTime in the later commit is better.\n. Looks like it's not using the updated webpack config.\nModule parse failed: /home/travis/build/clappr/clappr/src/components/media_control/public/closed-hand.cur Line 1: Unexpected token ILLEGAL\nYou may need an appropriate loader to handle this file type.\nDoes the travis build do npm run build or something else?\n. Didn't realise that karma also has a separate webpack config. Should be ok now.\n. Actually hang on is the karma config generated automatically from somewhere?\nThe\n// Karma configuration\n// Generated on Wed Jul 02 2014 11:05:24 GMT-0300 (BRT)\nat the top makes me suspicious.\n. What was the reason for having an img playback in the first place? Seems a strange thing for a video/audio player to have to me.\n. It might be easier to git reset --hard 3718ffb98ef72d6dd59bc15945ac99a8f66705be and then just do the merge into master manually using the instructions that github show in the command line instructions above? That's what I did before.\n. Although I guess that looks like it might be right\n. https://github.com/clappr/clappr/pull/621 should probably be merged first and then this config will need updating so that 'ico' files are loaded again.\n. The instructions github gave for removing the conflicts actually merged it so hopefully that's what you wanted!\n. Forgot to put the actual change in :/\n. Hey @madmarten does this still happen with the latest version?\nI don't have a screen that size to test on but I do not have any issue when emulating the resolution as 2560x1440 in edge's dev tools.\n. Also noticed you are experiencing the hls decoding issue in edge with the live stream. We also use wowza and have the same issue. I've reported it and they've confirmed it's a bug and are in contact with microsoft, in case you're trying to figure out where the problem is :)\n\n. Hi @madmarten thanks for this.\nPlease can you see if you have the same issue if you use flashls. You can do this by adding plugins: {playback: [Clappr.FlasHLS]} when creating the player.\nAlso can you try at http://dailymotion.github.io/hls.js/demo/ and see if full screen works fine there?\n. @madmarten it looks like it's probably a hlsjs issue then. Please can you create an issue at https://github.com/dailymotion/hls.js/issues and include a link in it back to this one there?\n. Actually sorry ignore what I just said. Please can you see if there's the same issue at https://jsbin.com/daxaci/edit?html,output ?\nIt might actually be a bug in microsoft's native hls implementation.\n. Yeh so unfortunately it looks like an issue in edge's native hls implementation then :/\nDoes it do it with this stream as well (provided by wowza): http://173.255.119.75:1935/vod/mp4:sample.mp4/playlist.m3u8\n. Actually have you tried with just a standard video?\nhttps://jsbin.com/fidefe/edit?html,output\n. This is reproducible on http://cdn.clappr.io/ with stream url \"http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8\".\nWas v0.2.14 the last version of clappr you used or were you on an older version? It might be an issue with the new 'hls' playback which uses javascript instead of flash.\n. Ok sorry about that. If you revert back to the flash hls playback for now that might work.\nhttps://github.com/clappr/clappr/issues/607#issuecomment-150349429\n. @lkkadiri can you try with the current master build and see if this works for you?\nHere's a build (https://github.com/clappr/clappr/commit/3c47a103fee5ff8e15e08986d12c5c7119d9ba6b) if you don't want to build it yourself: https://gist.githubusercontent.com/tjenkinson/6f25208ffb6e498869ca/raw/86eedf1f58cdebc2f27d1863620295a5fdb02d94/clappr.js\n. Ok so the source of the bug is here: https://github.com/clappr/clappr/blob/cdad219b081a51554470960ee4617800fc7c60ba/src/playbacks/hls/hls.js#L50\nWhen the drag completes this function is called twice and on the second call getDuration() seems to be returning 0.\nIf you use the flashls playback for now by altering the options with the link to the other comment I put above that will probably fix it for now.\n. Yes I'm looking into it at the moment I was just suggesting that as a temporary solution.\n. @lkkadiri Please can you try again with this version: https://gist.githubusercontent.com/tjenkinson/34715684d241039a2881/raw/063b64003bb330cbc3e3398c7a19fbee074cb2d6/clappr.js\nIt includes the proposed fix in https://github.com/clappr/clappr/issues/644\n. I understand how polyfills can make code neater in other places I just don't like the idea in general that it's kind of modifying global variables.\nE.g. if someone had another library on their page which does something like\njs\nfunction getLanguage() {\n   if (window.navigator && window.navigator.language) {\n      return window.navigator.language;\n   }\n   return \"en-gb\"; // or maybe null and then they do some language agnostic stuff or something :P\n}\nTheir function in their library would not work how the developer intended if clappr has run first and replaced it. Or the other library could break if their code runs first, then clappr modifies it, and then later on they call their same function again assuming they'd get the same result.\nSomething I'd prefer is to instead create a helper class with will retrieve the properties if they exist, otherwise a default value, so that the global variables aren't modified. So maybe have a helper class with a function like the one above in.\nThis is just my opinion though :P\n. I made a comment here then saw this: https://github.com/clappr/clappr/pull/643#issuecomment-154595425\n. Also clear cached values in MediaControl because this could have the same issue.\nSwitched .html() calls to .text() calls for the reason https://github.com/clappr/clappr/commit/9a7e84a6f49a86364d3aff3b09063b92e307921a#commitcomment-14252029 but can change them back if html() was intended.\n. Hey @derrod there is an option you can set hlsMinimumDvrSize which determines how long a dvr recording has to be before the seek bar becomes enabled.\nOr does this happen even when you have a long dvr recording available at the time you start watching?\n. That's interesting I'm also using DVR with the latest version and it seems to be fine. Please could you provide a stream url?\nAlso it would be interesting to see if you have the same issue if you paste it into http://cdn.clappr.io/\n. Isn't there already a seekSeconds()?\n\nOn 11 Nov 2015, at 17:17, Vytenis notifications@github.com wrote:\nseekTime I think is more self explainable. Because everywhere is in seconds\n\u2014\nReply to this email directly or view it on GitHub.\n. Isn't there a difference between the volume level being 0 and whether it's muted or not? I.e the level could be 50 but mute could be on.\nOn 12 Nov 2015, at 05:03, Maxwell Dayvson da Silva notifications@github.com wrote:\nI also added the PLAYER_VOLUMEUPDATE event\n\u2014\nReply to this email directly or view it on GitHub.\n. Never mind just looked and looks like clappr doesn't handle mute as a separate thing.\nOn 12 Nov 2015, at 05:03, Maxwell Dayvson da Silva notifications@github.com wrote:\nI also added the PLAYER_VOLUMEUPDATE event\n\u2014\nReply to this email directly or view it on GitHub.\n. @jfairley thanks for reporting this.\n\ngetPlayableStartTime() is meant to return the time into the video element where content actually starts. If you look at a live stream on http://dailymotion.github.io/hls.js/demo/ you'll see the way it works is that the total duration of the video element continues to increase throughout the stream, but the video data is removed from the element as the stream goes on. At least this is what I understood happens. Maybe I'm wrong?\nTherefore the duration reported directly from the video element will always be increasing and is not the duration of the actual video content in the video element. playableRegionDuration should be the duration of the available video content.\nFrom your log though it looks like the video element duration is not constantly increasing which is what I'd have expected.\n. this.getDuration() just returns the duration reported from the video element, which I would have expected to be constantly increasing, and if it was then I don't think there'd be this issue.\nMaybe the duration the plain video element shows on it's standard control bar on the hlsjs demo page is different to a value it reports on .duration . I just assumed it would be the same.\n. Yep just checked in chrome and the duration that is reported on the control bar is not the same as the duration it will report from it's api. Looks like the video api actually reports the amount of video content it's actually holding. This will be the root of the issue.\n. @jfairley is this in chrome 46.0.2490.86 ?\n. Looks like maybe the seekable property should be used instead of duration, but the value that is being returned doesn't seem to make sense at the moment, not sure if it's a bug with hlsjs or not at the moment.\n. Interesting.\nWell it's very likely this is wrong\njs\n timeUpdated() {\n    if (this.dvrEnabled) {\n      this.trigger(Events.PLAYBACK_TIMEUPDATE, this.dvrInUse ? this.getCurrentTime() : this.playableRegionDuration, this.playableRegionDuration, this.name)\n    } else {\n      super.timeUpdated()\n    }\n  }\nas the duration doesn't always map to the current time if it's a sliding window.\n. Just to confirm if you are playing a stream with a sliding window you would expect the current time to increase normally, and then jump back every time a new chunk loads right?\nSo for example:\n0:21\n0:22\n0:23\n0:24\n0:25\n0:21\n0:22\n...\nIf each chunk duration was 5 seconds.\nYou wouldn't be expecting the current time to keep increasing even when content from the beginning is removed?\n. Yes it means that content from the start is removed as more content is appended to the end as the stream is essentially infinitely long.\nOk yes I am testing with a stream like yours now and get the issue. If you change\njs\nthis.trigger(Events.PLAYBACK_TIMEUPDATE, this.dvrInUse ? this.getCurrentTime() : this.playableRegionDuration, this.playableRegionDuration, this.name)\nto\njs\nthis.trigger(Events.PLAYBACK_TIMEUPDATE, this.getCurrentTime(), this.playableRegionDuration, this.name)\nThat should fix it. Here's a build with that change: https://gist.github.com/tjenkinson/afd696c05b3758c2ead1\n@jfairley please can you try it?\nLooking more into why that was added now.\nThe other changes you made will work for your case, because the duration is always the duration of all the content as nothing is ever deleted, but probably won't for cases with a sliding window as that is not the case, but I'm looking into that as well.\n. Ok so looking into it further .duration on the video element should never be used because the value of this appears to be the time from the beginning to the time that the last segment in the video element finishes, and HLSJS decides when it wants to download segments and which ones.\nE.g. your stream has been going for an hour and you rewind back to 10 minutes, HLSJS will start filling the gap from the 10 minute point onwards, and will stop appending video to the end given you're not watching it, meaning .duration will stop increasing.\ndata.details.totalduration reported from HLSJS should be used in its place instead, which is currently what playableRegionDuration is.\n@mangui are my assumptions correct about the following?\nif video.duration is 70, but HLSJS's totalDuration is reported as 100, would setting currentTime on the video element to 90 be valid, and cause the chunks from 90 onwards then to start buffering?\n. I have started a branch which I'm putting the fixes in: https://github.com/clappr/clappr/tree/feat-hls-dvr-fixes\n@FDiskas I don't have that issue any more with my latest changes. Please can you try again with the latest build from that branch (https://gist.github.com/tjenkinson/4b8ebf73b2d04d7c6be9)?\n. @FDiskas I can't merge it to the master branch because it's not ready for that yet. You should be able to use the files in dist folder of the master branch but then use this file (https://gist.githubusercontent.com/tjenkinson/4b8ebf73b2d04d7c6be9/raw/11a8a4a59d975cb3da31dc9155f8a9cc931ee610/clappr.js) instead of the clappr.js in that folder.\n. My branch is only 1 commit ahead of master at the moment with the extra commit being the changes I made.\n. Yes clicking on the seek bar won't work until it switches to dvr mode. The seek bar is lagging behind a bit when a new chunk comes in for some reason which it shouldn't be.\nSo far all I've been working on is trying to get the times that are reported from the player correct, which I should be able to sort once I get an update on https://github.com/dailymotion/hls.js/issues/65\nOne of the changes I have made results in it jumping around before DVR becomes enabled so that needs sorting next.\n. I do not have that lagging issue locally either @FDiskas please can you provide the stream url you're using?\n. Right the seek bar jumping issue is down to the current hack in getPlayableStartTime(), so this is essentially blocked now waiting on https://github.com/dailymotion/hls.js/issues/65\n. @FDiskas @jfairley the latest build of my branch should work for you https://github.com/clappr/clappr/commit/41b2897d2169e8c799871977d9d045abc05379cd (https://gist.githubusercontent.com/tjenkinson/19c0fbb1f8fa0c2c7eff/raw/3daa243b5e6182719067b3feeb9f1e98960220f6/clappr.js)\nIt currently will not support sliding window streams. Let me know if there are issues.\n. @FDiskas an issue I see there looks like it might be related to the dvr controls plugin. I think this issue is finished now please can you create new ones for any new issues, unless they are related to this one. Thanks\n@jfairley Here's the build of the latest version that's in the pull request waiting to be merge in: https://gist.githubusercontent.com/tjenkinson/ccbafc1d08403cd6a424/raw/159557280cd78a40acf79f277c243a594e59e8ee/clappr.js\nIf you still have some seek issues please can you create another issue for those?\n. Are you wanting to add another translation of the message that's there, or customise it for your own needs?\n\nOn 16 Nov 2015, at 17:03, David A. Viramontes notifications@github.com wrote:\nlooks like its here: https://github.com/clappr/clappr/blob/ee93bbb79b142bc2105815f91a0de1375b5b7850/src/playbacks/no_op/no_op.js\n\u2014\nReply to this email directly or view it on GitHub.\n. this should be fixed in https://github.com/clappr/clappr/commit/e663199c6f21802bd2e11557d583fa4bae6fe2b2\n. So I guess the idea as well is that the Playbacks don't have any responsibility for anything except playing the content. In this case maybe it should be the Container that creates the Components, and the playback informs the Container of the types of components it needs with strings in a similar way that it does now.\n\nOr the playback doesn't ask for specific components at all. It shouldn't need to. The Container should be able to decide what components are needed and where to put them from the events that the playback emits and the Playback api. So for example here this would be removed, and infered from the Container using events and methods on Html5Video. This will probably involve some new methods being added to playbacks like supportsFullScreen(), hasAudio() etc\nThis would mean the playbacks would have no responsibility for the ui.\n. Ok sounds good to me. Didn't realise that react had those issues, I just presumed it would be compatible, so that's useful to know :)\nSo at the moment if a developer wanted to implement their own ui what should they override? @towerz are you suggesting that the main clappr repo would not contain any UI, but all this logic would come from another repo and provided in the Clappr config hash for example? So developers would implement the code to build the ui and render it, to an interface provided by Clappr?\n. Ah ok thanks I think I understand your idea better now. Still not sure what kind of interface Renderer would have but guess you've figured that out :)\n. Hey @569934390 \nPlease can you run npm run release, and then if it doesn't work paste what gets logged to the console here?\nI just did this and it works fine for me.\n. Thanks @cowai for implementing this we'll be using it when it's finished :)\n. Hi @aathitiyan \nThe maxBufferLength option only applies to the Flashls playback, not the new hlsjs one.\nTo achieve the same with the hlsjs playback you need to provide options for that aswell (https://github.com/dailymotion/hls.js/blob/master/API.md#fine-tuning).\nThe following should work\njs\n{\n  maxBufferLength: 30,\n  hlsjsConfig: {\n    maxBufferLength: 30\n  }\n}\n@clappr/core do you think we should copy applicable options across to the hlsjs config?\n. Please can you test your stream on the hlsjs demo page as well and see if you get loads of requests there too? You might have to clone the hlsjs repo, npm build, npm run serve, and then modify the demo page to add the buffer length config.\n. @cowai I think you might be wanting the maxMaxBufferLength option not maxBufferLength\n. Same but I think it might be a bit complicated because 'maxBufferLength' for flashls seems to be 'maxMaxBufferLength' for hlsjs, for example \n. Closes #529 \n. I might be misunderstanding the difference between dev and not dev then.\nMy understanding is that dev dependencies are the dependencies needed for a developer to work on the project and built it etc.\ndependencies are the dependencies that are required in order for the project to be run/used by a user. Because the entire project is bundled into the clappr.min.js file this is all the user needs in order to use the project. The entry point that the end user should use to run the project is what's specified by the main property, which is dist/clappr.min.js.\nFor example if someone else in a separate project does npm install clappr they will get clappr.min.js and that's it. If they require(\"clappr\") somewhere then it is that file which will be loaded (thanks to the main property). They don't need anything else to use the project.\nHowever, if the main property was src/main.js instead, then all of the devDependencies would be come dependencies as then they would be needed when clappr is built as part of the users build process when they build their project.\n. I just tried and don't get any errors. If uniqis require()'d in a file my understanding was that webpack would then bundle it into the built javascript file.\nAn exception being that if the webpack config declared uniq as being an external, meaning it should expect it to be provided some other way. E.g as a global variable or exported from some other javascript on the page. The place it would expect it to be found depends on some other webpack options.\n. @towerz so do you think main should point to src/main.js then?\nHLSJS now works like this so webpack is actually building that as well as clappr when it's built.\nIf someone doesn't want to build clappr themselves they could then set their project configs to use the version in the dist folder?\nI think main, dependencies and devDependencies are all related and having main point to a built version but still include the dependencies to build doesn't really make sense. For example if someone wants to include clappr in a project with webpack and built it themselves, with main pointing to the built version I think they will have to mess with their configs to get it to work and override npm's behaviour of looking at main.\nThis doesn't currently effect me because I'm just including the built version manually but if I was using npm I think this is how I'd expect it to work. Maybe I'm wrong.\n. Looking at that I think if browser was set to dist/clappr.min.js I don't see why it wouldn't work for browserify users. Not tested it though.\nThey will probably have to set the baseUrl option to the location they've copied their assets to as browserify wouldn't know about the assets.\n. It would mean though that even if a user is using browserify, and therefore going to use the built version as a result of browser, then they are still going to get the build dependencies on npm install even though they're never going to use them. Guess that's just a side effect of the browser 'hack' though.\n. Yeh I started using browserify for something and was doing that, and then found webpack and switched because it was so much better at managing everything.\nI think the priority should be making sure the combination of main, devDependencies, and dependencies is valid for npm, over making it work for browserify because\n- if browser is added it should still work for browserify users, even if not ideal\n- I don't think it's too complicated to switch a project from using browserify to webpack. I did it and don't remember it being that difficult, although it was a small project. (https://webpack.github.io/docs/webpack-for-browserify-users.html)\n- it means people using npm will get the expected behaviour, instead of having to make tweaks in their configs to make it behave how they would have expected.\nJust my opinion though.\n(For point 2 this is kind of already happening with hlsjs because that uses browserify but is being built with webpack fine here).\n. Yes that's fine I'll do that.\nWon't the assets issue still be the same as it is now though? I don't think the combination of these changes will make a difference.\n\nOn 24 Nov 2015, at 18:23, Bruno Torres notifications@github.com wrote:\nI agree it's not complicated to switch from browserify to webpack, but I don't want to force this change on anyone. About your first point, if browser is added, it doesn't mean that will work for browserify users (it will still present the assets issue), but we can add instructions for browserify users to do that.\nIf you want to proceed with that, I'd like to ask you to revert the devDependency changes and switch the main reference to src/main.js, and add instructions to make browserify work correctly with assets in the readme file.\n\u2014\nReply to this email directly or view it on GitHub.\n. Just looking into this further and there it looks like webpack supports browser as well along with a few others, and by default webpack will also default to browser and use the built version, which might be what people want.\nhttps://webpack.github.io/docs/configuration.html#resolve-packagemains\n\nI've opened an issue in webpack (https://github.com/webpack/webpack/issues/1671) to see if it's possible at the moment to override which property to use in package.json for specific modules, to see if it's easy for developers to opt to build it themselves if they wanted (or allow them to use the project as is if they're using it in something with es6 support).\nhttps://github.com/webpack/webpack/issues/1671\n. Great ok so I guess if main became ./src/main.js and browser ./dist/clappr.min.js that would be what people would have to do and could go in the readme, if they want to build themselves.\nWould be a nice feature in weback though if you could do something like:\nresolve: {\n  moduleOverrides: {\n    Clappr: {\n      packageMains: ['main']\n    }\n  }\n}\nTo achieve the same thing because then you don't have to rely on the source entry point always being at that location, and if it changes it wouldn't matter. That's what I'm wondering in the ticket I just opened.\n. I've moved the dependencies back and updated the readme. @towerz is there any other config you had to add or was this enough? https://github.com/clappr/clappr/blob/travis-container-infrastructure2/README.md#installing-for-webpack\n. We're also going to use it for our student radio station live webcam because it makes it much easier to find the start of a show etc :)\n. @cowai could you make the actualLiveServerTime option also accept a standard Date object as well as the string? I already have a Date object which is synchronised with the server so would be ideal if I could just pass that instead of having to convert it to a string first.\n. Haven't tried yet but yes actually it looks fine. Thought you might be parsing that string didn't realise you just pass that to Date.\n. tested and still works fine with our stream\n. This might be fixed in the next version of hlsjs\nhttps://github.com/dailymotion/hls.js/issues/96\n. Just confirmed the latest version of hlsjs does not fix this.\n. onBuffering() is never called in SpinnerThreeBounce\n. yeh it's looking like that. It's strange though because the bufferfull event is getting fired from Html5Video on Chrome, just not firefox\n. Yeh I think the canplaythough event should be being fired like it is on chrome. So at the moment thinking it's a firefox bug, or hlsjs. Maybe it's not buffering ahead enough to satisfy firefox to fire that event??\nhttps://developer.mozilla.org/en-US/docs/Web/Events/canplaythrough\n. Right if you go to the hlsjs demo page (http://dailymotion.github.io/hls.js/demo/) and then paste this into the dev tools console\njs\nvideo.addEventListener(\"canplaythrough\", function(){console.log(\"GOT EVENT!\");});\nIn chrome it's easy to get this event to fire by just seeking somewhere new.\nIn firefox I can't get this event to fire.\n@mangui does this look like a firefox bug to you?\n. I've been thinking about this and @leandromoreira do you think we're actually listening for the wrong event anyway. Wouldn't it make sense to remove the poster as soon as the content starts playing, not after its had enough to continue playing? At the moment this means the user may never see the first few frames of the media.\n. @leandromoreira I think what I'm suggesting is that the canplay event would make more sense than the canplaythrough one.\ncanplay is fired as soon as the content can start playing, which I think is the time you'd want the poster to disappear and loading indicator to go away.\nThe content may already have been playing for a bit before canplaythrough is fired, and during this time I wouldn't expect the poster or loading indicator to be on screen.\nSo use the PLAYBACK_READY event in the loading indicator and poster plugin instead, which is fired from the canplay event\n. Also the canplay event appears to be working in firefox.\n. @framerate you should be able to bypass the cors restriction by installing and enabling\nhttps://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en\nDon't forget to disable it again after though!\n. related to https://github.com/clappr/clappr/issues/596\n. I think what @flavioschuindt is suggesting is actually provided in the hlsjs api with the live property: https://github.com/dailymotion/hls.js/blob/master/API.md#level-details\nUsing that would be ok wouldn't it?\n. Actually don't merge this I'm just having issues and they might be this.\n. Nope it's fine it's a different issue.\n. What is the reason for blacklisting the m3u8 extension?\nhttps://github.com/clappr/clappr/pull/716/files#diff-e0c4fcbb6fb1d30b5e63821de29e845fL46\n. @leandromoreira yep that looks good to me I'll update this :)\n. Just found the m3u8 blacklist was to fix https://github.com/clappr/clappr/issues/462 (which was actually my issue, my memory is terrible).\nI think this should be fixed by https://github.com/clappr/clappr/pull/715 now though so safe to remove\n. @leandromoreira this is updated now. I have switched mimeTypesByExtension[extension] || mimeType to mimeType || mimeTypesByExtension[extension] because I think if the user is providing the mime type that they know the content is, then that should always be used.\nE.g if the extension of an audio file was .mp4 incorrectly for some reason, even if the user provided the correct mime type it would be ignored without this.\n. Haha it's fine. How's this?\n. \"HTML5Video playback does not set an invalid src to video element\" fails now\nIt tries to use the html5video playback with a dash playlist though. This isn't something that would ever work if it was in actual source code though would it, so could this test be removed?\nIf there was a dash playback it would be a separate class which extends HTML5Playback wouldn't it, and then it could override setupSrc() just like the hls playback does in this pr?\n. Just realised this change would require external playbacks to be updated as well to be compatible :/\nThought it would be more efficient having it not checking performing the canPlay check twice. The other solution would be to pass the mime type through in setupSrc() but then canPlay is called twice\n. Cool ok I'll add some doc to that method then. Can the failing test be removed? I think what it's testing for would be something that would be suited better as a test belonging to particular playbacks anyway. i.e for a dash playback \"Test that the video url does not get set to the dash playlist url\" for example\n. Think this is ready now.\n. @leandromoreira you're right if I listen for that event on player.core.getCurrentContainer() it seems to work.\nI think the reason it works though seems a bit fragile.\nIn the code the core plugins only get loaded in after all of the containers have finished loading. The ContainerFactory listens for the CONTAINER_READY event on each container, and after it's heard all those it resolves and then eventually the core resolves, and after this the plugins get loaded.\nSo I was looking at this for a while and trying to figure out why the plugins had already loaded when my CONTAINER_READY callback was called, and the only reason is because the listener in ContainerFactory registers itself before mine, and everything in the handler for that listener, including loading the plugins, currently appears to be synchronous, meaning my handler runs after that completes and the plugins have loaded.\nIf in the future anything that happens in that handler becomes asynchronous with another defer, then my callback will be called, and the plugins might not be there.\nAlso I think if there were multiple containers, and some took a few ticks longer to load than the one I am listening for the ready event on, the plugins wouldn't have loaded because they would only load on the tick of the last container that fires the ready event.\n. Yep that looks good to me! :)\n. Yes that sounds good to me. You thinking of having all the events supported here?\n\nOn 12 Dec 2015, at 20:44, Bruno Torres notifications@github.com wrote:\nI agree with @leandromoreira, this would be better implemented in the options. The listeners could be registered internally when creating the core/containers, so they would be registered before events are fired. What do you think, @tjenkinson?\n\u2014\nReply to this email directly or view it on GitHub.\n. Cool will take a look at this tomorrow\nOn 12 Dec 2015, at 21:16, Leandro Moreira notifications@github.com wrote:\n@tjenkinson I think this is the initial list:\nonReady\nonResize\nonPlay\nonPause\nonStop\nonEnded\nonSeek\nonError\nonTimeUpdate\nonVolumeUpdate\n\u2014\nReply to this email directly or view it on GitHub.\n. Done the other method here: https://github.com/clappr/clappr/pull/736\n. This would also apply to the sources parameter of the load(sources, mimeType) method.\n. Done :)\n\nI did it the other way so if we add new events we wouldn't have to update this as well, but it's updated so more explicit now like you suggested\n. Just been looking at this and I think the route of the issue is that the playback currently fires a PLAYBACK_READY event or a PLAYBACK_ERROR event but never both.\nCode in the core expects the playback always to be ready at some point in order to continue, and then the player can be classed as ready. Therefore if there is an error the player never completes initialisation, and the event listener has never been registered to throw the PLAYER_ERROR event.\nSo the decision needs making as to whether the ready events should always be fired if there's an error or not, and if they shouldn't be then I guess the core should listen for the error events as well and continue on those. @clappr/core ?\n. @towerz ok I understood it differently then I'll close that PR.\nI think it's because the container event listeners are now registered when the player is ready, but the player never becomes ready, because only a PLAYBACK_READY will allow this to happen.\n. The build is failing because of #737 \n. Yes I think a default plugin which could be overridden which just exits full screen seems good.\n. :+1:\n. Wowza Streaming Engine?\nThe latest version is 4.3.0, which we're using without problems. Quite a lot may have been fixed since the version you are running. A stream url would be helpful.\n. @simoeddami can you provide a stream url?\n. \nYou need to add the appropriate headers to the responses. I think the easiest option would be updating wowza to 4.4.0 and following this\nIt is also possible in 4.3.0 but not as straightforward. Just google and the instructions will come up.\n. https://github.com/clappr/clappr/pull/747\n. This seems messy: https://github.com/clappr/clappr/pull/747/files#diff-c2aedd093e03237d4e53308106db71a2R68\nWhy should the poster automatically disappear for a playback anyway without the user playing?\n. @towerz ok I see I was wondering why it might have been like that.\nJust looked at the hlsjs options and there's a autoStartLoad, which when false seems to prevent the requests starting. It also doesn't work when clicking play either but guess there's some other that needs calling in a play() override, I haven't figured it out yet.\nSo then instead this method could be used (depending on whether the user has chosen to preload or not).\nSound ok?\n. @towerz I've updated this now to just call ready() as soon as the class has loaded. It means the BUFFERFULL event is also fired though and I'm not sure if this makes sense.\nI tried the other way, having hlsjs load but with autoStartLoad as false but it causes issues because the video element fires the stalled event which causes the loading indicator to appear. It's for the same reason that it's not possible to load hlsjs immediately if options.preload === \"auto\"\n. Ignore this at the moment I had to merge master and it isn't working now\n. It's because the playback events can fire before the listeners are added :/\nWe could have another check in here like other places to check if the isReady is true, but that only handles this one case. What about any other playback events that end up firing before the listeners are registered, for example? In the code it looks like there is already the possibility for ready() to be called in the render() method which I think at the moment wouldn't work.\nMaybe there should be a separate init() method in playback() or something which would be called after bindEvents(), and playbacks would then put most of their constructor logic in this method?\n. @towerz yes never thought of that it makes a lot more sense!\n. @towerz this works but the poster disappears incorrectly, which I think #749 will fix.\n. Actually no the event is still firing before the listeners are added :/\n. Stupid mistake should be fine now.\n. Yes that's fine will do.\n. Think those are done now\n. @leandromoreira because https://github.com/clappr/clappr/pull/747 was merged in this PR now needs merging. The poster is currently removed incorrectly with that change. (It's removed as soon as the player is loaded)\n. no problem :)\n. Yes but that will fail and stop after one event won't it? I'm suggesting catch an error inside the loop of executing handlers so future handlers still run if an early one fails.\nSo I think line 137 and 146\n. A dependency has updated recently and broken karma. All the tests passed on my machine, I npm update'd, and now I get the same error as on travis. Also a build that previously passed on travis now fails.\n. I tend to prefer methods because if I see a property I tend to think it's something that can be set by something else/I can set it to something, but I guess that's just what I'm used to from other languages.\nIf it's in the api documentation I guess it should be clear to the developer. Also the video element itself uses properties.\n. Listening to the event would be fine but it's not enough alone because ended can go from true to false if the user seeks somewhere else/plays again.\nI think this might be why the html5 video element has the ended property as well as the event.\n. @leandromoreira I think a dependency must have been updated recently because I just reran the build on another PR that failed for me before and now that's working too, and this one's working now as well.\nI didn't realise before that the get variable properties can't be replaced by the developer, the new values just get ignored.\nTherefore I think just ended makes sense, as that matches the video tag api.\n. I think I'll create a new one as it doesn't really fit this title anymore.\n\nOn 9 Jan 2016, at 21:09, Leandro Moreira notifications@github.com wrote:\nCool @tjenkinson are you going to rebase or do another PR for ended instead of hasEnded()\n\u2014\nReply to this email directly or view it on GitHub.\n. I personally think globals are a bad idea and it's nicer to keep the library self contained.\n\nCan't you put the config in a variable in your app and just reuse this when creating the player? Or have a function in your app which handles creating the player?\nE.g.\njavascript\nfunction createPlayer(url, settings) {\n   settings = settings || {}\n   // add your plugin\n   settings.plugins.push(MyCustomPlugin);\n   return new Clappr.Player(url, settings);\n}\nNow everywhere in your app where you want a player\njs\nvar clappr = createPlayer(\"video.mp4\");\n. @shaharmor I think you change the settings programmatically using the configure() method\nI think this is better than introducing global variables as it keeps everything self-contained contained within the library.\n. If it is possible this might be useful :)\nhttps://letsencrypt.org/\n\nOn 11 Jan 2016, at 09:27, Florinette notifications@github.com wrote:\nCDN can't be used currently on https pages, it won't work on most browsers\nWould it be possible to have it https?\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi @cacciato \n\nThe fix was to the javascript HLS playback. It looks like you're using the flash hls playback and I guess this also needs fixing there too.\n. Cool ok will change tomorrow. I just googled jsdoc and found that somewhere \n\nOn 13 Jan 2016, at 23:04, Leandro Moreira notifications@github.com wrote:\nThank you very much. I'd say just the documentation @name for @property and we're good to go.\n/\n- Template for this view's container...\n  \n- @property containerTemplate\n- @type String\n- @default \"\"\n  /\n  We're following yuidoc and I didn't see any @name there .\n\u2014\nReply to this email directly or view it on GitHub.\n. Looks good to me :)\n. That works but I think something that matches the case a bit more would be:\n\nposition: absolute;\n    text-align: center;\n    font-size: 25px;\n    top: 40%;\n    left: 0;\n    right: 0;\n    color: white;\nIf we wanted to align it perfectly in the centre vertically instead of guessing with top, then option 1 from http://daker.me/2014/04/4-css-tricks-for-vertical-alignment.html looks good :)\n. No I'd forgotten about this but it still happens.\nIf you start a stream then throttle the network in chrome's dev tools, let it stall for a while, then unthrottle it so it resumes it still shows as being at the live point.\n. Could you try with the latest version of node, if it's not already?\nAlso try deleting the node_modules folder before installing to make sure it's starting fresh.\nIf the shrink wrap file exists the install uses the exact versions in there instead of determining all the latest allowed versions from the package.json file. I'd try deleting the shrinkwrap file for now as well.\n\nOn 15 Jan 2016, at 18:37, Jeff Fairley notifications@github.com wrote:\nI'm having trouble upgrading to version 0.2.29, because when I do, the npm install fails. The same is true at least as far back as 0.2.23. I stopped there, because the feature I want (seeking with seconds) is in v0.2.23.\nI cloned clappr from the 0.2.29 tag and get the failure there, too. npm install on master does work however.\nI see you're using shrinkwrap, which I'm not familiar with...\nWhen I install from master, does it somehow know to ignore shrinkwrap? If so, maybe shrinkwrap is the problem.\nOtherwise, maybe whatever was broken has been fixed on master.\nHere is the error I see. I've tried node 0.10, 0.12, 4.2, and 5.4.\n[clappr] rm -rf node_modules                                                                                                                                       2.29\n[clappr] npm i                                                                                                                                                     2.29\nnpm WARN engine csso@1.4.4: wanted: {\"node\":\">=0.12.0\"} (current: {\"node\":\"0.10.40\",\"npm\":\"2.14.3\"})\nnpm WARN engine escodegen@1.7.1: wanted: {\"node\":\">=0.12.0\"} (current: {\"node\":\"0.10.40\",\"npm\":\"2.14.3\"})\nnpm WARN engine postcss@5.0.13: wanted: {\"node\":\">=0.12\"} (current: {\"node\":\"0.10.40\",\"npm\":\"2.14.3\"})\n\nutf-8-validate@1.2.1 install /Users/jfairley/Development/git-repos/clappr/node_modules/utf-8-validate\nnode-gyp rebuild\n\nCXX(target) Release/obj.target/validation/src/validation.o\n../src/validation.cc:15:10: fatal error: 'nan.h' file not found\ninclude \"nan.h\"\n     ^\n\n1 error generated.\nmake: *** [Release/obj.target/validation/src/validation.o] Error 1\ngyp ERR! build error\ngyp ERR! stack Error: make failed with exit code: 2\ngyp ERR! stack     at ChildProcess.onExit (/Users/jfairley/.nvm/v0.10.40/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:269:23)\ngyp ERR! stack     at ChildProcess.emit (events.js:98:17)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:820:12)\ngyp ERR! System Darwin 15.2.0\ngyp ERR! command \"node\" \"/Users/jfairley/.nvm/v0.10.40/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd /Users/jfairley/Development/git-repos/clappr/node_modules/utf-8-validate\ngyp ERR! node -v v0.10.40\ngyp ERR! node-gyp -v v2.0.2\ngyp ERR! not ok\n\nbufferutil@1.2.1 install /Users/jfairley/Development/git-repos/clappr/node_modules/bufferutil\nnode-gyp rebuild\n\nCXX(target) Release/obj.target/bufferutil/src/bufferutil.o\n../src/bufferutil.cc:16:10: fatal error: 'nan.h' file not found\ninclude \"nan.h\"\n     ^\n\n1 error generated.\nmake: *** [Release/obj.target/bufferutil/src/bufferutil.o] Error 1\ngyp ERR! build error\ngyp ERR! stack Error: make failed with exit code: 2\ngyp ERR! stack     at ChildProcess.onExit (/Users/jfairley/.nvm/v0.10.40/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:269:23)\ngyp ERR! stack     at ChildProcess.emit (events.js:98:17)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:820:12)\ngyp ERR! System Darwin 15.2.0\ngyp ERR! command \"node\" \"/Users/jfairley/.nvm/v0.10.40/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd /Users/jfairley/Development/git-repos/clappr/node_modules/bufferutil\ngyp ERR! node -v v0.10.40\ngyp ERR! node-gyp -v v2.0.2\ngyp ERR! not ok\n\nspawn-sync@1.0.13 postinstall /Users/jfairley/Development/git-repos/clappr/node_modules/spawn-sync\nnode postinstall\n\nInstalling native dependencies (this may take up to a minute)\n\nnode-sass@3.4.2 install /Users/jfairley/Development/git-repos/clappr/node_modules/node-sass\nnode scripts/install.js\n\nBinary downloaded and installed at /Users/jfairley/Development/git-repos/clappr/node_modules/node-sass/vendor/darwin-x64-11/binding.node\nnpm WARN prefer global node-gyp@3.2.1 should be installed with -g\n\nfsevents@1.0.6 install /Users/jfairley/Development/git-repos/clappr/node_modules/fsevents\nnode-pre-gyp install --fallback-to-build\n\n[fsevents] Success: \"/Users/jfairley/Development/git-repos/clappr/node_modules/fsevents/lib/binding/Release/node-v11-darwin-x64/fse.node\" is installed via remote\n\nnode-sass@3.4.2 postinstall /Users/jfairley/Development/git-repos/clappr/node_modules/node-sass\nnode scripts/build.js\n\n/Users/jfairley/Development/git-repos/clappr/node_modules/node-sass/vendor/darwin-x64-11/binding.node exists.\n testing binary.\nBinary is fine; exiting.\nnpm ERR! Darwin 15.2.0\nnpm ERR! argv \"node\" \"/Users/jfairley/.nvm/v0.10.40/bin/npm\" \"i\"\nnpm ERR! node v0.10.40\nnpm ERR! npm  v2.14.3\nnpm ERR! code ELIFECYCLE\nnpm ERR! utf-8-validate@1.2.1 install: node-gyp rebuild\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the utf-8-validate@1.2.1 install script 'node-gyp rebuild'.\nnpm ERR! This is most likely a problem with the utf-8-validate package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node-gyp rebuild\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls utf-8-validate\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/jfairley/Development/git-repos/clappr/npm-debug.log\n\u2014\nReply to this email directly or view it on GitHub.\n. @leandromoreira any reason this can't be merged? It looks like a lot has changed in the diff but really it's just indentation and using module.exports instead of the define stuff.\n. cool no problem\n. This looks good to me thanks for the test and readme update as well :)\n. @djevo1 are you able to provide the stream url?\n. We use webpack to build the project, which manages the code but also the assets. This means we can require() files just like javascript files into modules and webpack will make sure they are available.\n\nThis is the part of the config which handles requiring ttf files, and the default is for it to use a hash of the file as the name. This makes sense because it means if the file changes in anyway in a new version, the file name will change, meaning if anything has cached the old version of the file it won't matter.\nIf you look at the url loader you can see that you can pass the same paramaters to is that go to the file loader, one of them being the ability to customise the names.\nNote that with the url loader if the file is less than the configured size no file will be created at all, as the contents of the file will become part of the url itself.\n. Thanks for this keeping the poster is a great idea for audio stuff.\nJust thinking though there's no need for the extra config option.\nInstead it could check if it's a playback which just has audio, eg html5_audio, and leave the poster on then.\nIf for some reason you have a stream which would load a video playback but you want to use an audio playback instead you can specify the audio playbacks first in the config.\n. Will see what the others say :)\n. @bikegriffith yes I agree. It could be a lot of work to detect an audio only stream so that seems like a nice solution.\nMaybe it could be this.container.playback.name == 'html5_audio' || !!(this.options.posterConfig && this.options.posterConfig.hideOnPlay), so that the poster always remains if it's html5_audio as I think this would always be preferred over a black box?\nHard coding in specific playbacks to check isn't great but I think @towerz  has ideas for changing how the  poster works quite a lot anyway, so this might only be temporary.\n. Yes that makes more sense :) a separate task now could be make the hls playback use an audio tag instead of video if the flag is set, because currently on mobiles like iOS with native players it will still go full screen with black.\n. I think it's because we're relying on the canplaythrough event instead of canplay. I think canplay actually makes more sense anyway and might fix this.\nJust looking into how all the events work in the html5_video playback because I think it might be possible to refactor them a bit.\n. Actually don't merge this because it might not be needed if the html5_video refactor I'm working on works :P\n. I think this could be done slightly better by listening for buffering events instead (when #787 is merged). Then new hlsjs stalled event could be used to inform the html5_video playback that playback is stalled immediately instead of waiting for it to realise.\n. Volume is now always retrieved from container, instead of storing a version in a variable locally, and mute is calculated on the fly.\nWill fix that test \n. The \"sets the volume\" is still broken because it needs to wait for the container to be ready first. Not sure how to make the test wait at the moment before checking\n. Hi @ghaith-bash-imam please can you see if you get the same issue at http://dailymotion.github.io/hls.js/demo/ ?\n. Ok in which case please can you open a new issue at https://github.com/dailymotion/hls.js/issues and provide the link there to this one? Or if there's already one there matching your issue just comment on that.\nSomething that might work for you now is this: https://github.com/clappr/clappr/issues/762#issuecomment-171368119\n\nOn 24 Jan 2016, at 14:06, Ghaith Bash Imam notifications@github.com wrote:\nHi @tjenkinson , unfortunately it is the same .\nBTW : orginal source it working fine !!!\ncant get what is deferences in my source\n\u2014\nReply to this email directly or view it on GitHub.\n. :+1: \n. Yep I have the same issue on windows now, and removing the shrinkwrap file fixes it. Thanks for taking the time to research the issue. Interestingly npm install still runs fine on travis though.\n\nI guess one solution would be to remove the shrinkwrap file from your copy during your build process?\nThe other looks like it would be scrap it all together until a nice solution is implemented. Optional dependencies becoming required in the shrinkwrap does sound like a flaw.\nAre you able to ignore the shrinkwrap file during your build process?\n. The shrinkwrap is causing issues. Can we just remove it (until hopefully at some point in the future npm might fix it so it handles multiple platforms) @clappr/core?\nIt means at build time, user might get different versions of the dependencies, but the range of versions specified in the package.json file should work with any combination.\nMy suggestion would be that we run this tool before we do a release, and make sure clappr can work with the latest versions of everything.\nThen we should also raise the minor version numbers of dependencies when the changes in the minor updates are crucial like here.\n. Please can you try with master?\nThis should be fixed now.\n\nOn 26 Jan 2016, at 12:06, arikkrol1 notifications@github.com wrote:\nevents CONTAINER_STATE_BUFFERING, PLAYBACK_BUFFERING are not firing when the player is buffering (also no loader icon is presented), the player is just \"stuck\".\nI simulated this on Chrome - just throttled the network during play. The player got stuck but didn't fire the buffering events.\n\u2014\nReply to this email directly or view it on GitHub.\n. Strange. Just to check you did build the project yourself not just use the one in the dist folder? The one in there is old.\n\nI can send you a link to a built version later if you want?\n\nOn 26 Jan 2016, at 12:39, arikkrol1 notifications@github.com wrote:\nSame thing happens with master.\nThe only time the buffering event is being fired is on play start..\nAlso in firefox there is a different issue - the loader stays visible after play start.\n\u2014\nReply to this email directly or view it on GitHub.\n. This is a build of master: https://cdn.rawgit.com/tjenkinson/c7ccd3c94355124a7fc9/raw/60aa51610323f679efbcfa57159375eadd5b47fb/clappr.min.js\n. I agree this is correct. But I'm just a bit confused because I'm sure I tested autoplay not that long ago an it worked :/\n. Confirmed this is happening in firefox 45.0\n. It's whenever the dvr_controls plugin renders. When the render happens the element is wiped and then the text is re-added. I think when the text element is removed, firefox is removing the font from memory because it thinks it doesn't need it anymore.\n. @towerz will this be fixed in the next version of the media control you're working on, or shall I look into it?\n. :+1:\n. Think this is fixed now please reopen if you still have issues\n. Yeh I think it's related to this: http://arstechnica.co.uk/information-technology/2015/08/google-chrome-will-block-auto-playing-flash-ads-from-september-1/\n\nSo looks like they're using the size of the flash object to decide if it's an ad or not.\nHave you tried hosting the swf (and other assets) yourself and serving it from the same domain as your site? I think that might work as well.\n. This still keeps happening. Sometimes the player starts at the beginning of the dvr recording instead of the live point for some reason, and other times it doesn't.\nSeems to be if the live point has been played recently so buffered, it works, otherwise it fails and ends up at the beginning.\n. If it ends up in the wrong place getting the current time returns the correct wrong time, but there doesn't seem to be an error coming from hlsjs to say it failed to seek to the time requested, it just goes to 0.\n. This might have fixed it\nhttps://github.com/dailymotion/hls.js/commit/c6b89459f40f13f0394c593805b7138ff4a35ecc\n. This seems to be working again when clappr is built with the dependency updates (https://github.com/clappr/clappr/pull/849), and npm-shrinkwrap.json has been removed so hls.js 0.5.7 is installed. (0.5.0 is currently in the shrinkwrap).\n. Just tested this on iOS and the play button doesn't appear when the loading indicator disappears (with the autoPlay option enabled). Really confused because this and the loading indicator are listening to the same events :/\n. Above comment no longer an issue with #814 \n. So the main reason for all this is to prevent the player being stuck in a buffering state, with the only way out being the user having to do something.\n. Does this polyfill the method in the users browser, or replace es6 methods with versions that work on old browsers during the build?\nI think It would be nice if it could be handled in the build process so that modifications don't get made to the methods in the browser itself.\n\nOn 1 Feb 2016, at 13:25, Michael Cunningham notifications@github.com wrote:\nThis PR fixes the error:\n%c[error]color: #ff0000;font-weight: bold; font-size: 13px;error on eventcore:containers:createdtrigger-TypeError: Object doesn't support property or method 'find' \nWhich occurs on any browser which does not support the native ES6 method 'find' on the Array prototype object. (IE10 and IE11 for example)\nAdding the official babel-polyfill package solves this from occurring.\nSee more info: #788\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/clappr/clappr/pull/816\nCommit Summary\nAdded babel-polyfill to add compatibility for old browsers\nIncluded babel-polyfill in main entry point\nFile Changes\nM dist/clappr.js (6937)\nD dist/clappr.min.js (13)\nD dist/clappr.min.js.map (1)\nM package.json (1)\nM src/main.js (1)\nPatch Links:\nhttps://github.com/clappr/clappr/pull/816.patch\nhttps://github.com/clappr/clappr/pull/816.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. @michaelcunningham19 yes just read this and it says\nBabel can\u2019t support all of ES6 with compilation alone \u2014 it also requires some runtime support. In particular, the new ES6 built-ins like Set, Map and Promise must be polyfilled, and Babel\u2019s generator implementation also uses a number of runtime helpers. Given your app doesn\u2019t have to share a JavaScript environment with other apps, you\u2019ll be ok to use babel-polyfill to handle this\n\nStill don't really understand why during compilation it couldn't just replace calls to these objects with ones to proxies instead though.\nI think I agree with @leandromoreira though given that dependency is already being used, unless there ends up being loads of other es6 features that don't work in ie10. Thanks for the pr though even if it isn't merged!\n. Hi @cowai,\nThat page isn't loading for me. Have you tried with a build of the latest master? It includes a fix with the back to live feature.\n. great :) also your url is working for me now.\nI'll close this so we can use https://github.com/clappr/clappr/issues/689#issuecomment-178001327 instead for the other issue.\n. I looked at this and really sure yet. When I have time I'm going to start looking through the npm documentation to see if they have any guidelines.\n\nOn 9 Feb 2016, at 11:29, Leandro Moreira notifications@github.com wrote:\nWhat do you think about this @towerz and @tjenkinson ?\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes that would be nice. Haven't done anything with flashls though yet so would need to figure out where to get the info from.\nOn 5 Feb 2016, at 19:00, Leandro Moreira notifications@github.com wrote:\nThanks, should we implement this on FlasHLS too?\n\u2014\nReply to this email directly or view it on GitHub.\n. Hey Ryan,\n\nCould you test with hlsjs as well and see if there's he same issue there? I wrote some of the relative url stuff for the js version and not sure if that will have the same issue.\n\nOn 11 Feb 2016, at 05:49, Ryan Williams notifications@github.com wrote:\nHi Leandro,\nI have investigated this problem further and have tracked it down to the flashls code of mangui. The problem occurs when mangui takes the relativeUrl found in a .m3u8 file and converts it into an absoluteUrl in order to download it using a URLLoader.\nAt present the code does string manipulation on the URL of the initial .m3u8 playlist to determine the baseURL and subsequently the absoluteUrl of the any dependent resources.\nIn the event that the initial .m3u8 playlist URL performes a redirect to an alternate domain and/or document path the \u2018redirectedURL\u2019 is not captured or used by the calculations performed by mangui\u2019s code. Hence the relativeUrl\u2019s provided in the .m3u8 playlist served by the CDN are not honoured.\nYour suggestion of using absolute url\u2019s inside the .m3u8 playlist is a good solution however I am planing to submit a pull request to mangui to fix the root of the problem in the comming days.\nBy subscribing to the HTTPStatusResponse event in flash I should be able to capture the 301 or 302 redirect if it occurs. Then it\u2019s just a matter of capturing the redirectedUrl and optionally using it in the calculations instead.\nWarm Regards \nRyan Williams\nFrom: Leandro Moreira [mailto:notifications@github.com] \nSent: Thursday, 11 February 2016 00:38\nTo: clappr/clappr\nCc: Ryan Williams\nSubject: Re: [clappr] Flash version not honouring 302 redirect. (#833)\nHi @ryanwilliams83 https://github.com/ryanwilliams83 if I understood correctly I think since the player is embed at your domain it'll try to download the relative paths from your domain, am I right @mangui https://github.com/mangui ?\nOne thing you could do is to provide a playlist with full path.\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-PLAYLIST-TYPE:VOD\nEXT-X-TARGETDURATION:11\nEXTINF:10.000,\nhttps://xxx.amazonaws.com/url_462/193039199_mp4_h264_aac_hd_7.ts\nEXTINF:10.000,\nhttps://xxx.amazonaws.com/url_463/193039199_mp4_h264_aac_hd_7.ts\n\u2014\nReply to this email directly or view it on GitHub https://github.com/clappr/clappr/issues/833#issuecomment-182379938 . https://github.com/notifications/beacon/ADsSGLlPD9YD9cqKOB9F4NSLHEJTIPg-ks5pizSjgaJpZM4HXEu9.gif \n\u2014\nReply to this email directly or view it on GitHub.\n. This warning has gone now. Maybe it was in a dependency update\n. Does it actually seek back to the live point or not do anything?\nOn 12 Feb 2016, at 13:50, its27 notifications@github.com wrote:\nI found an issue with clappr 0.2.34.\nI am generating a live HLS stream with NGINX, if I use HLS.JS the DVR works as expected:\n1)Pause video\n2)Click back to live\n3)The \"back to live\" text dissapears and \"live\" is displayed again\nHowever with the flash plugin the \"back to live\" text stays on screen and \"live\" does not come back.\nThanks,\nAdam\n\u2014\nReply to this email directly or view it on GitHub.\n. Hey @its27 when the above is merged and there's a new release it should be fixed.\n. Hey @bikegriffith this is expected. Some playbacks may be ready immediately before you get chance to add the listeners.\n\nTherefore there is the isReady property on the player so you can check this prior to registering a ready event.\nAlternatively you can provide functions in the player options to be called when events happen.\nE.g\n``` javascript\nvar player = new Clappr.Player(options);\nif (!player.isReady) {\n  player.on('ready', onReady);\n}\nelse {\n  // already ready\n  onReady();\n}\nfunction onReady() {\n  // do something\n}\n```\nor\n``` javascript\nvar player = new Clappr.Player({\n  events: {\n    onReady: onReady\n  }\n});\nfunction onReady() {\n  // do something\n}\n```\nThe second method only supports player events, so you will need to use the first method if you need to know when the playback is ready. All playbacks have a isReady property as well.\n. I think the events that already exist should be pretty final, but occasionally new ones are added. I'd say listening to the top level events on the player itself should be pretty safe, and I think 99% of the time you shouldn't need to listen to any of the other events. The events property is just another way of being notified of the top level events. Any provided callbacks for those are subscribed to internally before anything happens, so you are guaranteed not to miss any initial ones, which may not be the case when subscribing after the player has been created.\nThe issue with having to check isReady in places is a bit messy, and has come up in several places throughout the code now. I have an idea which might be able to tidy that up a bit by replacing it with a promise instead, but haven't had time to think it through properly or create an issue regarding that yet.\n@clappr/core are events on playbacks and other internal components considered as private, and only meant to be used by internal code? I think it might be good to create an issue to go through marking methods and properties as private and public.\n. You'll probably need to enable logging.\nClappr.Log.level(Clappr.Log.LEVEL_DEBUG);\n\nOn 16 Feb 2016, at 17:09, mikeevstropov notifications@github.com wrote:\n@leandromoreira No. http_://cp.moonplayer.ru/serial/e40589935fd708c44147d1339c0c53c5/iframe\n\u2014\nReply to this email directly or view it on GitHub.\n. Sorry should be setLevel\n\nOn phone \n\nOn 16 Feb 2016, at 17:09, mikeevstropov notifications@github.com wrote:\n@leandromoreira No. http_://cp.moonplayer.ru/serial/e40589935fd708c44147d1339c0c53c5/iframe\n\u2014\nReply to this email directly or view it on GitHub.\n. I was thinking they could just listen for when the playback changes and then just check if it is no_op\nOn 25 Feb 2016, at 19:03, Leandro Moreira notifications@github.com wrote:\nif @clappr/core think it's right we can fire a new event PLAYER_PLAYBACK_NOT_SUPPORTED and even add events:{'onPlaybackNotSupported': myFn} to it.\n\u2014\nReply to this email directly or view it on GitHub.\n. You're correct at the moment it only works for live streams with dvr.\nOn 17 Feb 2016, at 23:50, Tony Dobbs notifications@github.com wrote:\nSo, I'm not sure if this is a bug or an enhancement. I am testing out Clappr for the purpose of playing back HLS m3u8 files from an outdoor webcam stream, and I was hoping to read the #EXT-X-PROGRAM-DATE-TIME information to display the actual video time. I turned on 'actualLiveTime' in the configuration, but this didn't seem to change anything. Does that only apply for DVR streams?\n\u2014\nReply to this email directly or view it on GitHub.\n. It uses the system time or provided initial time. It doesn't look into the playlist at all.\nOn 17 Feb 2016, at 23:50, Tony Dobbs notifications@github.com wrote:\nSo, I'm not sure if this is a bug or an enhancement. I am testing out Clappr for the purpose of playing back HLS m3u8 files from an outdoor webcam stream, and I was hoping to read the #EXT-X-PROGRAM-DATE-TIME information to display the actual video time. I turned on 'actualLiveTime' in the configuration, but this didn't seem to change anything. Does that only apply for DVR streams?\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi @marinbgd if https://github.com/clappr/clappr/pull/979 is merged you should then be able to do\n\njavascript\nvar atLivePoint = player.isDvrInUse();\n. @its27 please can you see if you have the same issue just with hlsjs itself so we can determine if it's a clappr bug or not?\nYou could use this as a starter: https://jsbin.com/kimure/edit?html,output\n. Hi @mikeevstropov I suggest taking a look through https://github.com/clappr/clappr/issues/550\nYou probably want to override \"sources\" plugin.\n. @alexandrevicenzi PLAYER_READY should be the event to listen to to know when the player is ready to be used.\nThis should happen without any user interaction required. Are you using the latest version of clappr?\n. I think it should be Clappr.Events.MEDIACONTROL_HIDE\n\nOn 23 Feb 2016, at 19:28, mikeevstropov notifications@github.com wrote:\nClappr.Events.MEDIACONTROL_hide\n. Hey that error is a hlsjs error at https://github.com/dailymotion/hls.js/blob/master/src/utils/url.js\n\nPlease could you provide your playlist  which is causing this error so I can take a look?\n\nOn 27 Feb 2016, at 14:18, Renato A. Ferreira notifications@github.com wrote:\nYes, mike. It fixed the error with the font-face. Thanks! I use NGINX instead, so I simply added add_header Access-Control-Allow-Origin *; for the player location.\nBut the javascript problem is still happening and now I suppose know why. Lets go:\nI'm using the relative URL: /live/test/index.m3u8\nAnd you use the following javascript code to parse the URL:\nvar baseURLDomainSplit = /^((([a-z]+):)?\\/\\/[a-z0-9.-]+(:[0-9]+)?\\/)(.*)$/i.exec(baseURL);\nWhen the hostname is not present in the URL this code does not work as expected, and then, the following line refers to a null pointer:\nvar baseURLProtocol = baseURLDomainSplit[3];\nOtherwise, the player worked perfectly using the full URL: http://192.168.0.215/live/test/index.m3u8\nWhat I cannot explain is why it's happening only with IE11. My suggestion is not a real solution, but only an workaround. The case is finished for me anyway.\nThank-you!\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks. Can you provide the url to that playlist file as well?\nOn 27 Feb 2016, at 14:54, Renato A. Ferreira notifications@github.com wrote:\nI was testing the player with a live stream, so I have a very simple playlist:\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-MEDIA-SEQUENCE:3110\nEXT-X-TARGETDURATION:2\nEXTINF:2.000,\n3110.ts\nEXTINF:2.000,\n3111.ts\nEXTINF:2.000,\n3112.ts\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks @renatoferreirarenatoferreira \n\nI think the issue might be related to you passing in a relative url as the source to clappr. If you pass \" http://192.168.0.215/live/test/index.m3u8\" as the source, but still have the files in the playlist as relative (like below) does it work then?\n```\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-MEDIA-SEQUENCE:3110\nEXT-X-TARGETDURATION:2\nEXTINF:2.000,\n3110.ts\nEXTINF:2.000,\n3111.ts\nEXTINF:2.000,\n3112.ts\n``\n. You can use the [preload](https://github.com/clappr/clappr#preload) and set it toauto`.\nLike @thalleshmm said though it is still then up to the browser if it wants to honour it or not.\nThis currently only applies to the html5 video playback though, not hls. Do you need this to apply to hls as well?\n. Hi @569934390 when the above gets merged and we have another release adding exitFullscreenOnEnd: false to your config options should do the trick!\n. @ronag I'm not sure the player is the correct point in the chain to be performing this. I think it would be possible to get the clappr ui to show an overridden duration but the the actual <video> element would still be working with the incorrect duration. Therefore on mobile devices that display their own controls (like iOS on mobile which enforces full screen), the duration would still be wrong.\nWhat are you using to generate your webm files?\n. Ok. I think it would be possible but doesn't really make sense at this point in the chain, as there would still be issues when native players are used like on iOS, and the only solution for those as far as I can tell would be fixing the source stream. What do @clappr/core think?\nDo you have more information about how you are creating the stream? If you are transcoding the video on the fly does this mean you aren't doing byte range requests, so the user can only start watching from the beginning and seeking to various points won't work until that region has been downloaded? Thanks.\n. @ronag have you tried using -t before -i?\n\nWhen used as an input option (before -i), limit the duration of data read from the input file.\n\n(http://www.ffmpeg.org/ffmpeg.html)\n. Also out of interest what is the duration actually set to in the piped output before it goes back and fixes it?\n. :+1: \n. I don't really know what else there is though. In theory I think minor dependency version updates should always be backwards compatible so it should still be ok. We can still keep bumping up the minor version numbers as well though in \"package.json\" when there is a minor update that brings in functionality that we are then using, or fixes something.\nIn the future npm might improve how shrinkwrap works but at the moment it causes issues because the dependencies it \"locks\" vary depending on the OS you are running npm lock on.\nIf we wanted to replicate the shrinkwrap completely I guess we could just enforce exact versions of all the dependencies in the \"package.json\", and then before doing a release update all of these?\nhttps://github.com/clappr/clappr/issues/793#issuecomment-187752016\n. :clap: \n. There currently isn't an option for this.\nI think there should be a new disableKeyboardShortcuts option, which will be forced to true when allowUserInteraction is false (https://github.com/clappr/clappr/issues/880#issuecomment-195545710)\n. When you say the end of the stream do you mean the stream becoming unavailable? I.e. the playlist file returning a 404? At the moment I don't think there is any special handling of this.\nCan you provide console logs as well (from dev tools)?\nThanks.\n. Thanks. Yes maybe can you try Clappr.Log.setLevel(Clappr.Log.LEVEL_DEBUG); as the first line in the code window?\nWe use EVENT playlists which have the #EXT-X-ENDLIST appended at the end and they work fine so I'm not sure what's going on.\nIs your playlist an EVENT playlist? \n. Whilst the stream is live the duration is not the duration of all the chunks. It has some missing off the end so that you can still seek to the live point, which is the reported duration, and not hit the end of the stream before the next chunk is loaded.\nWhen the playback type changes from being live to vod the duration is then the complete duration of all the chunks in the playlist.\nThe bug is that this change doesn\u2019t happen dynamically when a stream switches from being live to vod.\nThis is where the logic is.\nEssentially onLevelUpdated() also needs to run when the playback type changes.\n. @kolpax has this solved the end of the video issue as well where the loading bar would flicker? I didn't think that would be related.\n. Ok thanks. When the stream reaches the end the poster and big play button should come back. If they don't then that's another bug.\nNo idea probably soon. @leandromoreira ?\n. @ronag I think the reason as well for the threshold is because of the nature of HLS. Live streams without dvr and live streams with dvr are essentially the same thing.\nA stream that doesn't have dvr may have a playlist containing a few chunks, maybe 10 seconds. If there was no threshold and we always showed the seek bar it might look a bit strange for a 10 second window of content.\nhlsMinimumDvrSize set to 0 should definately work.\nCan you right click on the video and inspect it, and see what the src of the video tag is?\nIt should be something like blob:http%3A//cdn.clappr.io/a4952826-c0be-4ab5-a08d-4eb02f221288 if hlsjs is being used.\n. Thanks for the files.\nWhen I said dvr I basically just mean recording. So some live streams might not have a recording, whereas some might let people rewind the past half hour, or some might let people always rewind back to the start of the stream (which fits the EVENT type). In live streams which don't have a recording, they still have a few fragments in their playlist, and therefore a small recording, but it doesn't make sense to let the user seek in this small recording.\nSo I have found the bug and will submit a fix shortly. ~~At the moment the type of the media has to be \"live\" and the duration longer than the one provided for seek to be enabled. Seek should always be enabled if the type is vod and at the moment this isn't the case. When it's fixed you don't need to provide hlsMinimumDvrSize as that only applies to live streams.~~\n(Also I tweaked the urls in the playlist file to 'test.ts')\n. I was getting myself confused. There is a minor bug which I'll fix which means if hlsMinimumDvrSize is 0 it gets ignored. If you set it to 1 it should work.\n. I think this is fixed now.\n. Looks good to me :)\n. I thought that was a feature so that you could programmatically control the playback without the user being able to change it.\nNot sure about the play button though.\n\nOn 10 Mar 2016, at 14:47, Leandro Moreira notifications@github.com wrote:\nBrowser: All\nClappr Version: 0.2.38\nSteps to reproduce:\ngo to cdn.clappr.io\nthen set chromeless: true try to click/touch to play\nI was expecting Clappr start to play but instead it didn't\nNotice also that a mini play icon is shown\n\u2014\nReply to this email directly or view it on GitHub.\n. @towerz I agree mobiles not supporting play without user interaction causes issues. But I don't think we should allow user interactions in chromeless because developers might have code that depends on the user not being able to interact with the player.\n\nOr chromeless could be changed so user interaction is allowed, but then there could be a separate option 'disableUserInteraction'? It's just that that would break backwards compatibility.\n. @towerz that sounds good to me\n. Looks good to me as well. Maybe it could also log when it's trying to recover as well using the warning level?\n. Looks good to me\n. javascript\nplayer.configure({poster: \"<< some url >>\"});\nshould work.\n(configure() lets you change options after instantiating the player.)\n. https://github.com/tjenkinson/clappr-markers-plugin/issues/3 might be useful. \n\nOn 13 Mar 2016, at 18:46, DavidVentura notifications@github.com wrote:\nhls.js shows it as \"last buffer\" here http://dailymotion.github.io/hls.js/demo/ .. I'm not sure how I would go about exposing this through clappr directly\n\u2014\nReply to this email directly or view it on GitHub.\n. And this https://github.com/clappr/clappr/pull/825\nOn 13 Mar 2016, at 18:46, DavidVentura notifications@github.com wrote:\nhls.js shows it as \"last buffer\" here http://dailymotion.github.io/hls.js/demo/ .. I'm not sure how I would go about exposing this through clappr directly\n\u2014\nReply to this email directly or view it on GitHub.\n. This might have been fixed with this: https://github.com/dailymotion/hls.js/releases/tag/v0.5.15\n\nDo you still have the issue if you run with a build of master now? Make sure you npm update first to get the latest version of hlsjs.\n. I think maybe @mangui accidentally published it because I can't find jt on npm anymore.\n. Was just wondering if the output should be directed to /dev/null or not though?\n. @towerz yep sounds good to me. updated\n. @towerz do you want the others updating as well?\n. done\n. Although I just tested it and --silent doesn't seem to work on the build or release commands so I'll remove that again\n. Actually @towerz does the --silent flag actually exist, it's not working for npm update either?\n. @towerz oh ok. I was expecting nothing to be outputted but in the windows command line it still shows the updated progress and info.\nIf I pipe the output to a file the progress is still printed to the console, whilst that other small bit of info actually goes to the file. I guess live console update are handled in some special way.\n. I've tried npm run build --silent -- --debug false --progress false --display-chunks false --display-reasons false --display-modules false > out.log which doesn't make much of a difference.\nIgnoring stdout all together and just keeping stderr would be a bit better so there's only something printed if there's an error, but clean-webpack-plugin: C:\\Users\\Thoma\\Documents\\GitHub\\clappr\\dist has been removed. seems to go out on stderr for some reason instead of stdout.\n. So npm run build -- --progress false with that other verbose option true in the config results in nothing outputted on stderr so I can update it to this if you want (with a 1>/dev/null)?\nIs there a reason why the output from the bump script has to be kept small? I personally think a few lines with the chunk outputs is ok anyway.\n. That's the only way I could stop the final stats being outputted though. I thought you only wanted something printed if it was an error?\n. Ok in which case I think this is done now?\n. No problem :)\n\nOn 29 Mar 2016, at 19:05, Bruno Torres notifications@github.com wrote:\nThanks @tjenkinson!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\n. @leandromoreira not quite :P\nhttps://github.com/clappr/clappr/pull/914\n. Also removed the player font files because I don't think they're needed anymore?\n. I just tested this with https://github.com/clappr/clappr/commit/4fcbf2d502c0f4697c96ddefdd41676ee58ccc87 and it seemed to work fine.\n. Thanks for the demo. It sounds like this is a hlsjs issue with something about your stream.\n\nWhat is the duration and size of each of your chunk files?\nI'd suggest creating the same video on the hlsjs demo page, and open an issue with hlsjs, including the entire log that it prints to the console. Then paste a link to this issue in it as well so they will be linked.\n\nOn 6 Apr 2016, at 08:16, jussike notifications@github.com wrote:\nI just tested with release 0.2.47 and the bug still appears.\nDemo video: https://db.tt/Khq69XVr\nSeems that problem is HTMLMediaElement.seekable has wrong range and HTMLMediaElement.duration didn't updated correctly.\nOn live-mode (and after-live -mode), durationChange-event fired often but the value is near of current time, instead of single duration change -event to final full duration.\nCould you say which components causes this behaviour? Browser itself, Dailymotion's hls.js or Clappr?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\n. :+1:\nOn 6 Apr 2016, at 11:40, jussike notifications@github.com wrote:\nThanks for the suggestion. I just got it working and i'm testing more and preparing the fix.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\n. All the tests pass for me on windows :/\n. @leandromoreira yep it uses the latest firefox now and they all seem to be working again\n. :+1: \n. Forgot to say without this when a live stream starts after minDvrSize time dvr enables, but then shortly after when duration becomes shorter again dvr then disables, and then enables again in the future.\n. I agree @leandromoreira I don't think we should use the pre release because it's not been as well tested as the major version. It sounds like a bug though so @mangui might be able to backport the fix into v0.5.x if you create an issue with hlsjs.\n\nthe other option is that you build clappr manually with 0.6.x by updating the package.json before you npm update.\n. @jussike glad you found the issue. This looks to me like a hlsjs bug and should be fixed there. The media source is managed by hlsjs not us.\n. I think the logic for this is here\nI can't see anywhere in there where the duration is explicitly set. Maybe this an issue?\n. https://github.com/jsdelivr/jsdelivr/pull/10939\n. @towerz doesn't it only pick the files from the dist folder though?\n. It's updated now http://cdn.jsdelivr.net/clappr/latest/clappr.js\nJust waiting to hear back about our asset names changing https://github.com/jsdelivr/jsdelivr/pull/10944\n. If the file names don't change (ie assets) then it will automatically update, otherwise one of their guys will manually check and merge the automatic pr's at their end.\nIt's still using GitHub not npm. There was a bug which they've now fixed.\n. Thanks I'm a bit confused though because on the github repo he's classed it as a \"prerelease\", but on npm this is the latest release.\n. I think maybe @mangui should be using prerelease version numbers\nhttps://docs.npmjs.com/misc/semver#prerelease-tags\nI'm still not sure if greenkeeper would behave any differently then though or not\n. This is probably this:\nhttps://github.com/dailymotion/hls.js/issues/351\n\nOn 14 Apr 2016, at 17:30, Robert Nagy notifications@github.com wrote:\nBrowser: Chrome Version 49.0.2623.87 (64-bit)\nOS: OS X El Capitan\nClappr Version: http://cdn.clappr.io/\nSteps to reproduce:\nPlay using http://cdn.clappr.io/\nThere is a jank/glitch in playback around 5 seconds in\nPlay using http://dailymotion.github.io/hls.js/demo/\nThere is not jank/glitch\nfiles.zip\nQ: Is there somewhere I can upload files directly to make available for testing? I've noticed that playing directly from S3 doesn't work due to OPTIONS requests being forbidden.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. I'm submitting a PR in a minute. The path changed slightly in the commit @towerz made.\n. Closes #946 \n. It still builds fine there was an issue on travis when it was first triggered.\n. The html5 video element doesn't provide a way to get the media frame rate, or frame number, which would make this difficult.\nIf you know the frame rate you should be able to calculate the time that corresponds to the frame you want and be able to seek to it though.\n\nHlsjs might be able to provide the frame rate because it operates at a lower level but I don't think it does this currently.\n\nOn 16 Apr 2016, at 20:36, Robert Nagy notifications@github.com wrote:\nAny suggestions on how to implement reliable frame stepping?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. Confirmed. Great username by the way you've lived up to it :P\n. @ibreakstuff93 load() is still supported and should work.\n. @ibreakstuff93 have you built master containing the fix?\n\nTry this: https://cdn.rawgit.com/tjenkinson/215c450e27f2dc99efaf3d9e53fe1406/raw/756fdbf6f06744714a03456a08926db502a20fb7/clappr.js\n. @leandromoreira did a release earlier so it should be there now. It's not updated on the cdn yet but that should happen at some point soon.\n. Yes it uses the duration that hlsjs reports because the duration reported by the video tag is incorrect when chunks are removed from the start of the playlist for a sliding window dvr stream. The duration reported by the video tag always increases.\nCan you provide a bit more information on the specific issues you are having?\n. So the duration in your playlist is shorter than the video files?\nIs the rest of the video actually frame accurate when you seek around?\nOne solution would be to make sure that the current time can never go above the duration in the ui, but this won't fix the underlying issue.\n. Ok. So I think the root problem is probably that your stream is invalid with the durations not matching. I think maybe hlsjs could not add the video that isn't covered in the playlist to the video tag, but really you need to fix the issue with your encode with ffmpeg.\nWe could add a check to cap current time at the reported duration though as it looks weird to display it.\nThe demo stream on the hlsjs demo page doesn't seem to have the issue: http://cdn.clappr.io/?src=http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8\n. The seek happens here.\nthis.playableRegionStartTime will always be 0 for a vod playlist as chunks aren't removed from the beginning.\n. Yes it might be worth creating an issue with hlsjs. At the moment the only way it looks like we can get the duration is from the level details, and this comes from the playlist.\nYou can also get durations of fragments, which might be directly from the ts files.\nHowever the ts files are loaded on demand when needed. The only source of information initially is from the playlist file. Therefore the only answer might be to fix the encode so the playlist matches.\n. @towerz https://github.com/clappr/clappr/pull/975 should fix this\n. Clappr (webpack) builds hlsjs as part of the build process. In hlsjs's \"package.json\" it says the main entry point is ./lib/index.js. The lib folder does not exist in the version checked out from GitHub, but it does in the versions on npm.\nA simple fix would be to remove \"lib\" from your .gitignore file, and then commit it.\n. @GraphicSound this is because native hls is used on those devices, not hlsjs, and these events are not available from the native player.\n. @GraphicSound hlsjs requires MediaElement support in the browser to work, and I don't think this is supported by many mobile devices yet. Also for desktop safari hlsjs is still in beta so won't be enabled for that browser at the moment.\n. @GraphicSound the hls streams should still work with the native players in mobiles, you just won't be able to get the detailed events that hlsjs provides. If you need those kind of events I think you might need to provide a native application and handle hls yourself inside that, or have a look to see if the html5 video element will provide these events for hls streams, but I don't think it's in the spec (yet).\n. No problem. If you manage to get the events from the video tag somehow please let us know!\n. Refs: https://github.com/Igosuki/compass-mixins/pull/86\n. also fixes https://github.com/clappr/clappr/issues/826\n. :+1:  This looks good I like the nested-reset mixin.\n. @clappr/core https://github.com/i18next/i18next looks like it might be a good library to use\n. @leandromoreira that looks good to me :)\nIn the future it could be rewired without changing its api if we needed something more advanced as well.\n. :beer: \n. I think allowing the user to enhance the defaults instead of having to override them all might be useful as well, but it's always something that could be added at a later date if needed :)\nhttps://github.com/clappr/clappr/commit/fe9d2af3ffb9b07ab024b3c92a0fa8576225f858#commitcomment-18115415\n. @leandromoreira I think merge might be better in this case as it seems the difference between this and extend is that merge is recursive.\nI think if we extend then if a user want's to override a specific phrase in a language they'd still have to include the rest of that language as well.\nhttp://stackoverflow.com/a/19966511/1048589\n. :beers: sorry for being really picky! :P\n. @waster @leandromoreira it's a bug in the change I added I'm looking into it at the moment.\n. Wow today is going so smoothly...\nI blame @towerz for that one :P\nShould be fixed with https://github.com/clappr/clappr/commit/0087b8cf2de96a3326018f06a8d048a49a9a817f\n. @waster can you provide an example where it doesn't work I just tried and it seemed fine for me.\n. @waster I never had the issue with the loading indicator going away but there were a few other problems which are fixed in some pending pull requests. Once they're merged fingers crossed it's sorted!\n. I had the play issue but not the loading indicator issue. Everything was working fine for me running the same code on the clappr demo page with my fixes merged.\nPlease can you try with this build so we can check we're using the same versions?\nhttps://rawgit.com/tjenkinson/24105d6b6f3d10ad2a4eb67c04868edb/raw/beda69f3a93ff5ee2412e59d1de0b1121b7f9904/clappr.js\n. Great! I'll close this then :)\n. How do you mean? Clappr instantiates the playback internally so I'm not sure how that would work \n\nOn 23 May 2016, at 17:33, Thiago Pontes notifications@github.com wrote:\nwouldn't be easier to pass the instance as a parameter for the new playback? seems weird to have the core source support other things than strings\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n. @thiagopnts a string isn't suitable though in the case of https://github.com/tjenkinson/clappr-videocontext-playback because it's another object which is responsible in rendering into a canvas, and methods called on that may change the contents of the timeline.\n. @thiagopnts how would I get it to options.context though?\n. @thiagopnts it looks like they are I didn't realise that. I think it does actually make sense being the source though as is the linked case the VideoContext object is the source of the content.\n. Refs #998 \n. http://thecodinglove.com/post/47700508117/when-my-commit-broke-the-build-but-i-managed-to\n. @leandromoreira in terms of a standard html5 video though I think adding a new clappr option which would allow the user to set the crossorigin attribute on the video tag might work.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\n. I think it should be a clappr option but the default should remain as not adding the tag at all as it does reduce security a bit\n. @iongion I haven't looked at this in detail but I presume you're trying to run our tests during your build process?\nI'm not sure why you need to do this. I think the general assumption is that dependencies that you pull from npm should already have been tested and work, and therefore if there are tests they should already all pass.\nI.e I think you should test your own app code, but not worry about running any tests on any dependencies that may exist in the node_modules folder. You should assume the dependencies you have will work.\nWhat do you think?\n. @iongion I understand it's because the source we push to npm is es6. I think really our source should be es5 (http://mammal.io/articles/using-es6-today/) because I don't think developers that install an npm package today should be expected to do something to it before it can be required into their own application.\n@towerz can we not point main property in package.json to ./dist/clappr.js? Then developers won't have to worry about transforming clappr before they can use it.\nI think one of the reasons for setting it to the source directory was so that developers could require individual source files into their projects. However I think specific components should be required from what is exported in \"main.js\". I.e require(\"clappr\").mediaControl. Anything that's not exported from the entry point should be considered private.\nThis makes sense for where webpack is going with http://www.2ality.com/2015/12/webpack-tree-shaking.html\n. @iongion I think we should point to the built es5 Clappr.js file, instead of creating a lib folder with all the files converted individually.\nThis is because with the files converted it still isn't valid es5 as webpack does some magic to make it valid es5 when it builds, like tracing import paths from our fake root, and converting imports of asset files to imports of generated modules which export urls.\n. @iongion I think they will still need to be valid or you'll have issues.\nI would presume that\njavascript\nvar playIcon = require('icons/01-play.svg');\nfor example would throw an error because it will probably look for \"icons\" in the wrong place, and I think it will fail trying to require an svg.\n. @iongion yes they would need to but we use webpack which handles all this for us.\nAfter webpack\njavascript\nimport playIcon from 'icons/01-play.svg'\nwould essentially become this:\njavascript\nvar playIcon = \"assets/some-file.svg\";\nwhich is now valid es5.\nIf we just transformed the src directory es5 then we would get\njavascript\nvar playIcon = require('icons/01-play.svg');\nwhich is still invalid.\n. @iongion playIcon gets set to the url of the actual svg file during the webpack build process, as webpack converts the code to es5, but also handles assets, css, and other things like the paths from root.\nYou can see this in the webpack config files here and here.\nFrom what I understand our source code isn't technically ES6 because we make use of the webpack loaders to tweak things during the build, so our code only ever becomes valid javascript after webpack has finished.\nI think devs should only be able to load modules that are exported from the entry point, which is what they get when they require(\"clappr\").\nI think mocking the browser specific features seems like the right way to go as the library is intended to run in a browser, not as a nodejs app, and I guess this also applies for your project too?\n. @iongion I agree I think mocking out like you did there would work, but Clappr being able to run in node would be better so you don't need to mock the browser.\nI've just had a look in the code and there aren't too many places where window is actually used, so it might be possible to make it still run if window is undefined.\nSidenote if https://github.com/clappr/clappr/pull/1008 gets merged I don't think <script src=\"script.js\"></script> would be needed anymore in your mock html.\n. @iongion yes after I wrote it I was thinking and some of the project also relies on dom events so it might be a bit less feasible and mocking the browser might be the best way.\nWe could maybe provide a nice method though to set a new window instance?\nE.g.\njavascript\nvar Clappr = require(\"clappr\");\nClappr.window = myFakeWindow;\nwhere Clappr.window defaults to window if it exists. Then anywhere where window is accessed directly would be changed to retrieve the value that has been set there. Things like navigator would need to be changed to windowImpl.navigator etc.\n. Untested\n``` javascript\n// mocks.js\nvar windowImpl = window || null;\nvar hasBeenAccessed = false;\nvar toExport = {};\nObject.defineProperty(toExport, 'window', {\n  get: function()  {\n    hasBeenAccessed = true;\n    if (!windowImpl) {\n       throw new Error(\"Need an implementation of 'window' to run.\");\n    }\n    return windowImpl;\n  },\n  set: function(newWindowImpl) {\n    if (hasBeenAccessed) {\n       throw new Error(\"Cannot set window implementation after it has been accessed in the project.\");\n    }\n    windowImpl = newWindowImpl;\n  },\n  enumerable: true,\n  configurable: false\n});\nmodule.exports = toExport;\n```\n``` javascript\n// main.js\nimport mocks from 'mocks'\n// everything else\nexport default {\n   mocks,\n   // everything else\n}\n```\n``` javascript\n// something in the app that needs the window\nimport mocks from 'mocks';\nvar window = mocks.window;\n```\nWhen you import Clappr to use you would do.\njavascript\nvar Clappr = require(\"clappr\");\nClappr.mocks.window = myFakeWindow;\n. @iongion I have been thinking of this again and actually think maybe creating a stub of Clappr in your tests would be the best way.\nLike I said at the beginning you should be able to assume that Clappr will work as documented and that there won't be any incompatible changes to the api between minor versions, so stubbing it should be fine. If I had a project which used twitter for example I would make a stub of the twitter api so it wasn't relying on making network requests etc.\nAs for making the stub be loaded for the tests instead of the real implementation you can look at https://github.com/thlorenz/proxyquire . It has a few warnings for cases when it won't work, but it's worked fine for me several times. It means you don't have to change your source as that module replaces the require function to perform some trickery.\nFor integration tests I'd suggest then either running the tests in a real browser, like Clappr does, or mocking the browser environment in node like you did before.\nThis sound ok?\n. Great. That change has already happened in the version that was released yesterday :)\n\nOn 3 Jun 2016, at 06:40, ionut stoica notifications@github.com wrote:\nYes, it sounds good, but you still must declare as main script a compiled version if clappr, not the es6\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I think autoplay should be autoPlay and crossorigin should be crossOrigin in the options to match the case in the properties\n. That isn't what you're doing though. You're setting the controls property on the video object not the dom element which is different.\n\nIn the case of the poster that will have to be a dom attribute because a poster property doesn't exist.\n. :beers: but there's still a few things :P\nposter needs to be set as an attribute not a property and autoplay and crossorigin should be autoPlay and crossOrigin when the merge happens\n. actually autoplay shouldn't be there\n. Ah yes and it is actually autoplay. Don't understand why they decided to do crossOrigin but not autoPlay :/\nYes but also with the poster there is no documented .poster property, so it should be set to the poster attribute.\n. Although actually it is listed here.\nI was looking here and it's not listed for some reason \n. aha yeh I wasn't looking specifically at the video element, just the media element\n. So looking into this further the baseUrl did have an effect for the flash and flashls swfs. In the playback files webpack would provide the built url, which would still contain <%=baseUrl%>, and then this would be replaced there.\nAccording to the webpack docs though this is the proper way to override the publicPath, because webpack also uses it internally for loading in asynchronous chunks (which we currently don't have) and possibly other things.\nSo I've updated this to still work when passing the baseUrl option but log a deprecation warning and maybe we could then remove the baseUrl option in the next major version?\n. @towerz @leandromoreira yes I hate globals as well, but it seems to be the only way to do it the supported webpack way. It's hacky but it's also kind of a temporary global. I.e\njavascript\nvar tmp = window.clapprAssetsBaseUrl;\nvar Clappr = require(\"clappr\");\nwindow.clapprAssetsBaseUrl = tmp;\nwould work fine as it's only used to get the value in.\nI like the current way with the placeholder and I think being able to provide the url as a config option after requiring the project is the nicest way to use as well, but I created this because from webpacks documentation they are expecting a valid url, so that things like this can work:\n``` javascript\nimport a from \"a\"\nfunction doSomething() {\n   if (needToPolyfill) {\n      // load async\n      require(['b'], function(bigPollyfillLibrary) {\n         // do pollyfilling\n      })\n   }\n}\n```\nIf this was built module b would become a seperate js file just like assets, and webpack would make an ajax request and load it if it needed it. Currently this wouldn't work because the url it would load it from would be invalid.\nWe currently don't use this feature though so I guess it isn't really an issue at the moment.\n. :+1:  makes sense to me\n. @mpaolino I just tried your example and the contents of the playlist was\n```\nEXTM3U\nEXT-X-TARGETDURATION:10\nEXT-X-ALLOW-CACHE:YES\nEXT-X-VERSION:3\nEXT-X-MEDIA-SEQUENCE:8835641\nEXTINF:10.000,\nhttp://abclive.abcnews.com/i/abc_live4@136330/segment8835641_1200_av-b.ts?sd=10\nEXTINF:10.000,\nhttp://abclive.abcnews.com/i/abc_live4@136330/segment8835642_1200_av-b.ts?sd=10\nEXTINF:10.000,\nhttp://abclive.abcnews.com/i/abc_live4@136330/segment8835643_1200_av-b.ts?sd=10\n```\nwhich is only 30 seconds long. How much DVR are you expecting?\n. @mpaolino can you paste the contents of your 30m playlist, or a URL to it? I just tested with one of ours which is a few hours long and it seemed to work fine.\n. @mpaolino thanks! There is a hlsMinimumDvrSize option that should work for you, it appears it got missed out of the documentation.\nIt is the duration in seconds before seek becomes enabled.\nSo\n``` javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://abclive.abcnews.com/i/abc_live4@136330/index_1200_av-b.m3u8',\n  hlsMinimumDvrSize: 0,\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\n```\nshould enable seeking immediately after hlsjs has decided that it's happy with the duration in the playlist.\n. @mpaolino you should be able to tweak that as well using the hlsjs config by setting the liveSyncDurationCount to a lower number. It represents how many chunks from the end of the stream the live point is. I'd recommend 2 or more otherwise people might hit buffering if they reach the end of the last chunk before the next one has arrived.\nhttps://github.com/clappr/clappr/blob/master/src/playbacks/hls/hls.js#L249\nhttps://github.com/clappr/clappr/blob/master/src/playbacks/hls/hls.js#L301\njavascript\nvar player = new Clappr.Player({\n  source: 'http://abclive.abcnews.com/i/abc_live4@136330/index_1200_av-b.m3u8',\n  hlsMinimumDvrSize: 0,\n  hlsjsConfig: {\n    liveSyncDurationCount: 2\n  },\n  mute: true,\n  height: 360,\n  width: 640\n});\n. Think it makes more sense just to mock the browser completely than add this. \n. @remijulien I've submitted a PR https://github.com/streamroot/clappr-streamroot-playback/pull/2\nWe marked some variables and methods as private in that release.\n. Can someone provide steps to reproduce this error? I haven't managed to get it yet.\n. Nevermind I got the error now.\nIt seems to happen when it leaves this line\n\nand comes back to \n\n. @remijulien I don't think this is a bug.\nEach chunk in the playlist is 2 seconds, so every 2 seconds 2 seconds is suddenly added at the end and 2 seconds removed from the beginning. This means the playhead will move forwards during the 2 seconds and then jump back again.\n. I'm not really sure of a nice way to do it.\n. I'm going to look into adding an option which will interpolate the duration of the last chunk from 0 to it's duration as time progresses, and reduce the duration of the 1st chunk as time progresses if the playlist is not of type EVENT. Will see how it goes!\n. :+1: \n. Related: https://github.com/dailymotion/hls.js/issues/485\n. :+1: \nMaybe all the new md files could go in a 'docs' subfolder so that the root isn't so full?\n. :+1: \n. old\n. @salmanmanekia you might be able to do a data url where your playlist content is encoded in the url itself, but if that works I think it's a bit of a hack and there will probably be a limit to the length of the URL that the browser will support.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n. We should be able to remove webworkify all together when https://github.com/dailymotion/hls.js/pull/507 is merged\n. old\n. Reran travis and seemed fine second time.\n. old\n. Or we could make 'get tagName()' return 'audio' and getPlaybackType() return PLAYBACK.AOD in the video playback if the audioOnly option is set?\nThis makes sense to me because the actual file (and therefore mime type) is still technically a video.\n\nOn 1 Jul 2016, at 17:52, Leandro Moreira notifications@github.com wrote:\n@clappr/core I think it does make sense to use  when we have audioOnly marked but options is out of reach at canPlay method. Could we add a pseudo-mimetype?\n'm3u8': ['application/x-mpegurl', 'application/x-mpegurl; audio-only']\nBut then people should be obliged to use this specific mime-type.\n\u2014\nYou are receiving this because you are on a team that was mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. That's interesting I just assumed the audio tag could play video but would be good to find that written in a spec somewhere.\nOn 1 Jul 2016, at 20:06, waster notifications@github.com wrote:\nhmm, though in HLS draft:\nEach Media Segment MUST be formatted as an MPEG-2 Transport Stream\n   [ISO_13818], a WebVTT [WebVTT] file, or a Packed Audio file, which is\n   a file containing packed encoded audio samples and ID3 tags, such as\n   AAC with ADTS framing [ISO_13818_7], MP3 [ISO_13818_3], AC-3 [AC_3],\n   or Enhanced AC-3 [AC_3].  Transport of other media file formats is\n   not defined.\n\u2014\nYou are receiving this because you are on a team that was mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @towerz I think the payback type should be Playback.AOD as well?\n. old\n. Hlsjs. We pass it on.\n\nPlease check if it happens with the latest hlsjs version on http://dailymotion.github.io/hls.js/demo/ first and then open an issue there. If you open dev tools on that page the video tag is assigned to the global video variable.\n. :+1: \n. no longer relevant\n. I'm not sure why the ?inline=1 is necessary.\nhttps://github.com/clappr/clappr/blob/master/src/playbacks/base_flash_playback/public/flash.html#L1\nLooks like @towerz committed this so might know?\n. I think this is broken again? :/\n. this.options.playback is {disableContextMenu: undefined} for some reason, and therefore not replaced with this.options.hlsjsConfig\n. Just looking into this change and I think things have got a bit mixed up.\nI don't think we want to pass the object at this.options.playback to HLSJS's constructor? Surely the config for hlsjs should be a separate property like it was previously?\ne.g it should look like\njavascript\nnew Clappr.Player({\n   playback: {\n      hlsMinimumDvrSize: 10,\n      hlsjsConfig: {\n         someHlsjsOption: true\n      }\n   }\n});\nnot\njavascript\nnew Clappr.Player({\n   playback: {\n      hlsMinimumDvrSize: 10,\n      someHlsjsOption: true\n   }\n});\nbecause hlsjs shouldn't get the hlsMinimumDvrSize option as that's ours, not hlsjs's\n. @towerz are you sure?\nhttps://github.com/clappr/clappr/blob/0.2.48/src/playbacks/hls/hls.js#L55\nhttps://github.com/clappr/clappr/blob/0.2.48/src/playbacks/hls/hls.js#L33\nit looks like hlsMinimumDvrSize is directly on options but there's also hlsjsConfig on options\n. So I think all that has to happen is\njavascript\nthis.options.playback || (this.options.playback = this.options)\nand then\njavascript\nthis._hls = new HLSJS(this.options.playback.hlsjsConfig || {})\n?\n(but then there's still the bug that I reopened this for)\n. I can have a look later but there's still a bug somewhere causing this.options.playback to be {disableContextMenu: undefined}\n. Not sure I haven't checked yet\n. @towerz I have the same question now for Html5Video :P\nhttps://github.com/clappr/clappr/blob/0.2.48/src/playbacks/html5_video/html5_video.js\nWhere did playbackConfig come from? Weren't the options previously just on options?\nhttps://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L104\n. ok looking in the history it is right. The Html5Video playback has some options on the root object and then some specific ones\n. :+1:\nWhat was the reason for introducing the playback property? Is the idea that all playback options go in there? In which case maybe loop should be in there as well?\n. I just wrote these they might be useful unless you've done it already\njavascript\n// backwards compatibility (TODO: remove on 0.3.0)\n  it('should set options.playback as a reference to options if options.playback not set', function() {\n    let options = { src: 'http://example.com/video.m3u8' },\n      playback = new HLS(options)\n    expect(playback.options.playback).to.be.equal(playback.options)\n    options = { src: 'http://example.com/video.m3u8', playback: {test: true} }\n    playback = new HLS(options)\n    expect(playback.options.playback.test).to.be.equal(true)\n  })\n``` javascript\n // backwards compatibility (TODO: remove on 0.3.0)\n    it('should set options.playback as a reference to options.playbackConfig if options.playback not set', function() {\n      let options = { src: 'http://example.com/something.mp4' playbackConfig: {test: true}},\n        playback = new HTML5Video(options)\n      expect(playback.options.playback.test).to.be.equal(true)\n  options = { src: 'http://example.com/something.mp4' playback: {test: true}},\n  playback = new HTML5Video(options)\n  expect(playback.options.playback.test).to.be.equal(true)\n})\n\n``\n. Yes it's working now :)\n. Also fixes bug where cursor would jump to the end if the current time went negative, which can happen if the user pauses near the beginning, or the user seeks to the start, because it can take a while to process before playback starts.\n. This can be merged now if people are happy :)\nThe missing part from hlsjs is now in the latest release.\n. @leandromoreira I've merged in master and think it's ok now\n. I think it might be the lodash dependencies, and some of the things we are doing with lodash might be achievable with zepto\n. I think it would be good to merge as is and then there can be a separate task to see what lodash dependencies can be removed because there are some in other places of Clappr aswell not just here.\n. @shaharmor I think this might be a sightly different issue because\n-play()is never called whenautoPlayistrue. Is the same issue present for a standard mp4 with autoPlay?\n-_setupHls()also doesn't trigger playback to start. It just configures hlsjs. The reason playback starts after_setupHls()has completed is because theautoplayattribute is on the video tag. We could always callsetupHls()immediately but we chose not to to prevent buffering occurring if the user hasn't requested play yet.\n- As soon as the 'playing' event is emitted_handleBufferingEvents()should be called.\n  https://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L279\n. @shaharmor yes I remember now the reason is to handle devices like ios which require user interaction before they will actually start loading. If_loadStartedis set totrueimmediately ifautoPlayistrue` then on ios the user will be stuck with the loading indicator forever until they tap the player.\nI tried to explain it in the comments here\nhttps://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L247-270\n. @shaharmor I'm not sure if calling this._handleBufferingEvents() will make a difference at that point though. My guess will be that it will stay in the non-buffering state like it is now because _loadStarted will still be false. Worth a try though.\n. That's interesting. Will take a look at this later.\nOne side effect of calling play() is that the PLAY_INTENT event is fired. I don't know if we want this to happen in the cause of autoplay @clappr/core ?\n. Yep. I think if we are setting autoplay on the video element then we shouldn't be calling play() as well, as autoplay on the element itself is telling the browser to manage it. I think it should be one or the other.\n. So the root cause is because\njavascript\n// with autoplay attribute added\nvideo.src=X;\nconsole.log(video.paused); // true\nvideo.play();\nconsole.log(video.paused); // false\nThe paused property always flips immediately after calling play(), but it stays as true until a bit later on if the autoplay attribute is set.\nI expected the paused property to be false from the start if the autoplay attribute was added, and if it was we wouldn't have this issue.\n. There isn't a guarentee that playback will start even if the autoplay attribute is set:\nhttps://dev.w3.org/html5/spec-author-view/video.html#attr-media-autoplay\n\nNote: Authors are urged to use the autoplay attribute rather than using script to trigger automatic playback, as this allows the user to override the automatic playback when it is not desired, e.g. when using a screen reader. Authors are also encouraged to consider not using the automatic playback behavior at all, and instead to let the user agent wait for the user to start playback explicitly.\n\nSo I think the behaviour we have at the moment might be the best according to the spec.\nTo get better buffering events though I think it would make sense to not set the autoplay attribute, and instead add this.options.autoPlay && this.play() at the end of the Html5Video constructor. This would also mean the PLAY_INTENT event would always happen, but doing this is exactly what w3c said not to do in that document :P\n. I've submitted a PR.\nIt's not possible to listen to the PLAYBACK_INTENT event though because the event is fired before the constructor returns, but I think this is a separate issue, and we've had the same problem in several other places.\n. I think so there's the issue above with not being able to listen to the event but it's a separate thing really and hasn't caused a problem for anyone yet!\n\nOn 9 Sep 2016, at 14:31, Leandro Moreira notifications@github.com wrote:\n@tjenkinson can we close this one?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. actually I forgot I think this was fixed here\n. I added a test as well and just realised its not here I'll push that tomorrow \n. That's a good idea and we could actually add detection for this.\n\nhttps://github.com/LA1TV/Website/blob/master/app/assets/src/app/pages/embed/player-page.js#L21-L29\n. @enbplas11 please can you provide a link to a demo page with your problem? AFAIK content cannot go full screen from inside an iframe unless the user has given explicit permission by adding the tag to the iframe. It's a browser restriction. Would be interested to see how jwplayer gets around this.\n. :+1: makes sense \n\nOn 14 Jul 2016, at 18:46, Bruno Torres notifications@github.com wrote:\nWould be interested to see how jwplayer gets around this.\n@tjenkinson the only way to do this is through Flash, because it's not bound by these constraints. If the page/iframe allows the user to embed Flash content, it can go fullscreen without being controlled by the browser.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I think there might be an exception though if the hosting page is in the same origin you can access it from within the iframe and add the properties with JavaScript. Not tried this myself though.\nOn 23 Jul 2016, at 03:13, Enrique Plasencia notifications@github.com wrote:\nGood, @towerz, thank you!!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @alexvasiliev Clappr already supports this. Is something not working for you?\n. Hi @alexvasiliev sorry can you try again with http://streambox.fr/mse/hls.js-0.5.41/demo/ instead?\n\nThat's the specific version we use in clappr at the moment, the latest version on that demo page has changed a bit.\n. @alexvasiliev did you figure out why it wasn't working with Clappr?\n. By default playback will start near the live point whilst the playlist is still live and the beginning if the stream has finished.\nAm I right in thinking you always want playback to start at 0 instead of the live point?\n\nOn 20 Jul 2016, at 11:44, alexvasiliev notifications@github.com wrote:\nThe problem wasn't in event playlist support. It was in my misunderstanding of Clappr logic.\nClappr loading not the first 3 chunks in playlist, but last 3 chunks.\nAnd player.getDuration() or player.seek() answers that there is only 3 chunks available.\nBut if i turn controls on i can load video before that 3 last chunks.\nThe only question now is how can i force Clappr load all chunks in playlist, using Clapprs API?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Great thanks! Will wait for someone else to check this.\n\nA similar change could also be made here, here and here if you're feeling adventurous :P\n. I think maybe instead of \njavascript\nHTML5Video._canPlay('audio', AUDIO_MIMETYPES, resourceUrl, mimeType)\nit should be\njavascript\n!HTML5Video._canPlay('video', VIDEO_MIMETYPES, resourceUrl, mimeType)\nin https://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L42\n. @towerz I think we still might have an issue here.\nIt feels strange that for the HLS playback, for example, isAudioOnly() is calling _canPlay() on Html5Video. I think maybe isAudioOnly() should also be overridden?\n. :+1:\n. @leandromoreira https://github.com/clappr/clappr/pull/1069 is ready now with the new hlsjs release so it would be good if this can be merged as well :)\n. @shaharmor the change in hlsjs is to make it possible to use hlsjs without requiring webworkerify-webpack at all.\nWe're still using v0.5 of hlsjs so still need to handle the web workers ourselves.\nIt looks like the latest release of webworkerify-webpack fixed the bug which caused it previously not to work\n. @shaharmor that's interesting did you npm update? I did a build yesterday and thought it worked.\n. @shaharmor that's interesting I just\ngit reset --hard head\ngit pull master\nnpm update\nnpm run start\nand it seems to be working fine. What did you do to trigger the error?\n. @shaharmor worth noting we are currently using 1.1.4 of webworkify-webpack not 1.1.5\n. @waster I think the format for the package.json might be\ngithub:dailymotion/hls.js#v0.5.x\n\nOn 22 Aug 2016, at 13:11, waster notifications@github.com wrote:\nhm, 0.5.44 does not include actual last commits to fix bug, so is there a way to build a clappr with v0.5.x branch of hls.js? I tried to change package.json with \"hls.js\": \"https://github.com/dailymotion/hls.js.git#v0.5.x\" but got Module not found: Error: Cannot resolve module 'hls.js' error on npm run build after npm install\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Ah.\n\nI guess\njavascript\nif (this._hls) {\n   return\n}\ncould go at the start of setupHls() instead\n. although it might not be good having setupHls() happen before the rest of the constructor has finished\n. I'm not sure :/\nThink that might get a bit messy because how would you determine when the constructor has finished?\n. In the html5 video constructor it could\njavascript\nthis.options.autoPlay && process.nextTick(() => {\n  this.play()\n})\nbut not sure about this either. It should also handle if destroy() is called before the second tick\n. Yes that would work. I'm wondering if maybe autoplay could be handled in the container factory or whatever actually instantiates the playback object?\nso somewhere\njavascript\nvar playback = new Html5Video(...)\nif (options.autoPlay) {\n  playback.play()\n}\nthat way we don't need to handle the special case in the playback and it would apply to all the playbacks?\n. or we call play() in _ready(), ie the playback ready event.\n. @towerz sounds good to me.\nI'm not sure though if we should be triggering playback before the playback has emitted its ready event. I think it would be good at some point to have a diagram or something which lists what events would be fired when and in what order. I think I would expect all events to be fired after the first READY one, but maybe that's just me.\n. @shaharmor yes I did. The problem is though this happens\n- hls.constructor()\n- html5video.constructor()\n- hls.play()\n- hls.setupHls()\n- hls.constructor() resumes after super() call\n- hls.setupHls() called again\n. wait @towerz we could just remove this.options.autoPlay && this._setupHls() all together from Hls\n. @shaharmor sorry I never looked at the link I thought it was to something else. Yes I did and then it looks like something caused us to bring it back\n. whoops I missed that when I merged master back in :/\n. @leandromoreira @towerz  ?\n. thanks @michaelcunningham19 :)\n@clappr/core maybe we should use autoprefixer with webpack and have this be automatic?\n. Can confirm as well but I swear I tested this :/\n. I just built it again locally and it's doing\njavascript\nroot[\"clappr\"] = root[\"clappr\"] || {}, root[\"clappr\"][\"Clappr\"] = factory();\nwhich is not what we want we should revert this. \n. new issue https://github.com/clappr/clappr/issues/1145\n. Refs https://github.com/dailymotion/hls.js/issues/49\n. I'm not sure I haven't looked in detail just thought that might be related. It looks like this linked issue is fixed so  that might have fixed it. https://github.com/dailymotion/hls.js/issues/615#issuecomment-241011466\n\nOn 22 Aug 2016, at 10:59, waster notifications@github.com wrote:\n@tjenkinson , hm, I've checked already on hls js demo page and manifest is not loaded loaded twice anymore, so it seems to be fixed there. But with the current clappr from master git I see such behaviour however it was updated with hls.js v0.5.44 three days ago. Is it related to clappr then?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I agree @leandromoreira I don't think there is a security issue because anyone can view that information in the developer tools anyway. Also I think errors like that come from the browser internals so you might not be able to prevent those showing.\n\n@aolko if you want to protect your streams you should try and authenticate the request somehow to make it more difficult for misuse, or look at DRM. This means it doesn't matter if the url is public knowledge.\n. @kslimani is right this would be a hlsjs issue. However I don't think what you're requesting is really feasible as it goes against the hls spec, and just because no chunks are added for 20 seconds might not mean they aren't delayed and would appear after 30.\nYou using the wowza dvr feature?\n. Might be relevant\nhttps://www.wowza.com/forums/showthread.php?47755-EXT-X-ENDLIST-this-tag-is-not-appended-to-m3u8-playlist\n. @bikegriffith I just submitted a PR with a fix please can you try with this build on your iPad and check it's fixed?\nhttps://cdn.rawgit.com/tjenkinson/03929ed43398900619152237bd3037a0/raw/4a2b0b1fe8ee7bcc37ee3b3590c9b5987e3373f7/clappr-ios-fullscreen-fix.js\n. @leandromoreira what's the bug? \n. Ah this problem again :/\n. Have you tried what you posted that should actually work (except on mobiles where certain conditions need to be met)?\n. E.g\nvar player = new Clappr.Player(...);\nplayer.play()\n. Here is the api documentation and here is the actual class :)\n. @aolko you should be able to do this with a container plugin.\nLook at https://github.com/clappr/clappr/wiki/Our-first-plugin\n. I think that is relevant you will just need to tweak that to add a canvas element and then your logic to update the canvas\n\nOn 29 Aug 2016, at 16:26, aolko notifications@github.com wrote:\n@tjenkinson can you please provide more relevant example?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. If you want to overlay html from a different page you could use an iframe with transparency instead, and then maybe message pass the time into it if you want to create dynamic overlays that change with the player time.\n\nBear in mind on some mobiles it won't work properly as they make the actual video tag full screen and add their own device controls \n. https://github.com/clappr/clappr/pull/1101 should be merged first\n. reran the build and all is good\n. I think there will be an issue though because there is already the settings property\n\nOn 9 Sep 2016, at 14:28, Leandro Moreira notifications@github.com wrote:\nThanks @tjenkinson I like the idea I'd just change getX to get settings also @towerz is working on the redesign of media control... I'd like his thoughts on this!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @towerz done\n. For hls 0.6 you need to comment out the webworkify and other special hlsjs stuff in the webpack config file and it should work.\nOn 14 Sep 2016, at 13:21, Leandro Moreira notifications@github.com wrote:\n@paunadeu the point is the same url works when we use hls.js alone http://dailymotion.github.io/hls.js/demo/ . It seems that all the headers are working fine too:\n\nGET /playlists/x36xhzz/x36xhzz.m3u8 HTTP/1.1\nHost: www.streambox.fr\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 200 OK\n< Date: Wed, 14 Sep 2016 12:18:07 GMT\n< Server: Apache/2.4.10 (Debian)\n< Last-Modified: Thu, 17 Sep 2015 10:52:47 GMT\n< ETag: \"5d7-51fef372e9dc0\"\n< Accept-Ranges: bytes\n< Content-Length: 1495\n< Access-Control-Allow-Origin: *\n< Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Range\n< Content-Type: application/x-mpegURL\nGET /playlists/x36xhzz/url_0/193039199_mp4_h264_aac_hd_7.m3u8 HTTP/1.1\nHost: www.streambox.fr\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 200 OK\n< Date: Wed, 14 Sep 2016 12:19:42 GMT\n< Server: Apache/2.4.10 (Debian)\n< Last-Modified: Thu, 17 Sep 2015 08:13:17 GMT\n< ETag: \"e16-51fecfcc40140\"\n< Accept-Ranges: bytes\n< Content-Length: 3606\n< Access-Control-Allow-Origin: *\n< Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Range\n< Content-Type: application/x-mpegURL\n<\nGET /playlists/x36xhzz/url_0/url_525/193039199_mp4_h264_aac_hd_7.ts HTTP/1.1\nHost: www.streambox.fr\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 200 OK\n< Date: Wed, 14 Sep 2016 12:20:28 GMT\n< Server: Apache/2.4.10 (Debian)\n< Last-Modified: Thu, 17 Sep 2015 08:13:28 GMT\n< ETag: \"9a43c-51fecfd6bda00\"\n< Accept-Ranges: bytes\n< Content-Length: 631868\n< Access-Control-Allow-Origin: *\n< Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Range\n< Content-Type: video/MP2T\n<\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Oh and in the webpack config we should be excluding Babel for /node_modules/ as everything in node_modules should be es5. I think this is what's causing the console error you posted before \n\nOn 14 Sep 2016, at 13:21, Leandro Moreira notifications@github.com wrote:\n@paunadeu the point is the same url works when we use hls.js alone http://dailymotion.github.io/hls.js/demo/ . It seems that all the headers are working fine too:\n\nGET /playlists/x36xhzz/x36xhzz.m3u8 HTTP/1.1\nHost: www.streambox.fr\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 200 OK\n< Date: Wed, 14 Sep 2016 12:18:07 GMT\n< Server: Apache/2.4.10 (Debian)\n< Last-Modified: Thu, 17 Sep 2015 10:52:47 GMT\n< ETag: \"5d7-51fef372e9dc0\"\n< Accept-Ranges: bytes\n< Content-Length: 1495\n< Access-Control-Allow-Origin: *\n< Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Range\n< Content-Type: application/x-mpegURL\nGET /playlists/x36xhzz/url_0/193039199_mp4_h264_aac_hd_7.m3u8 HTTP/1.1\nHost: www.streambox.fr\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 200 OK\n< Date: Wed, 14 Sep 2016 12:19:42 GMT\n< Server: Apache/2.4.10 (Debian)\n< Last-Modified: Thu, 17 Sep 2015 08:13:17 GMT\n< ETag: \"e16-51fecfcc40140\"\n< Accept-Ranges: bytes\n< Content-Length: 3606\n< Access-Control-Allow-Origin: *\n< Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Range\n< Content-Type: application/x-mpegURL\n<\nGET /playlists/x36xhzz/url_0/url_525/193039199_mp4_h264_aac_hd_7.ts HTTP/1.1\nHost: www.streambox.fr\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 200 OK\n< Date: Wed, 14 Sep 2016 12:20:28 GMT\n< Server: Apache/2.4.10 (Debian)\n< Last-Modified: Thu, 17 Sep 2015 08:13:28 GMT\n< ETag: \"9a43c-51fecfd6bda00\"\n< Accept-Ranges: bytes\n< Content-Length: 631868\n< Access-Control-Allow-Origin: *\n< Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Range\n< Content-Type: video/MP2T\n<\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. hey @kslimani thanks for looking into this. It looks like it might be possible for plugins to use the callback option on externals to return clappr || Clappr but it might be a bit messy.\n\n\nI can't find\njavascript\nlibrary: {\n  amd: 'Clappr',\n  commonjs: 'clappr',\n  commonjs2: 'clappr',\n  root: 'clappr'\n}\ndocumented but if it is supported that could work.\n. @sokra so a plugin developer which wants Clappr as an external should\n{externals: {'clappr': ['clappr', 'Clappr']}} ?\n. Thanks I can't see that configuration in the doc.\nI'll leave this issue open for now until a decison is made on https://github.com/webpack/webpack/issues/2981. I still think it would be a nice feature as it means the externals value for plugins would be a bit simpler, but it's great there already is a solution :)\n. Also I'm not sure if browserify (and maybe other bundlers) are as flexible on the externals side so exporting both in the bundle might be more reliable.\n. @sokra will do. Do you have any suggestions for the config structure?\nHaving the 'library' option as an array is already taken.\n. Sounds good to me\n\nOn 10 Sep 2016, at 10:57, Tobias Koppers notifications@github.com wrote:\nArray of array?\n[[\"clappr\"], [\"Clappr\"]]\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hey @kslimani there isn't a problem importing Clappr the issue is importing a plugin which has been built with Clappr set as an external incorrectly.\n\nIf a plugin has been built with clappr set as an external as \"Clappr\", then this means if their script is loaded in the web browser it will locate clappr on the variable Clappr. If the plugin is built into another project though then it will try and require(\"Clappr\"), which will throw an error as it should be require(\"clappr\").\nIf plugin developers set their external config like this then there wouldn't be an issue.\nThis PR I'm working on would allow us to export clappr as both Clappr and clappr meaning plugin developers could simply set the clappr external to clappr.\n. Yes it's the responsibility of the plugin developer to make their build look for the Clappr global variable, or use clappr if requireing. The PR means they can just look for clappr everywhere instead of the special case for the browser global variable.\n. This is an error happening in hlsjs so I think you should open an issue there. \nUsually web browsers have restrictions when opening local files, but in electron I guess these restrictions might not exist.\nIf you use a standard MP4 does Clappr work?\n\nOn 16 Sep 2016, at 12:48, PreDeToR notifications@github.com wrote:\nHi Guys\nI'm working with Electron to generate a desktop application that will allow you download and play videos that have been downloaded from our site.\nI use clappr to play the videos currently on the site, and would like to use the same functionality on the Desktop application, but when I try start the video player with a file:// url it throws out an error.\nfile:///home/daniev/Documents/Development/Electron/smartvideosample/tmp/4661B52B617F07BFD035A3E0CE46AC04/Main.m3u8\nclappr.js:17216 Uncaught Error: Error trying to parse base \nURL.buildAbsoluteURL @ clappr.js:17216\nresolve @ clappr.js:16635\nparseLevelPlaylist @ clappr.js:16795\nloadsuccess @ clappr.js:16892\nloadend @ clappr.js:25437\nDoes clappr support loading local media and if not, would it be possible to add it in?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I think in electron those permission issues might not exist @leandromoreira\n\nThat error is in the URL parser in hlsjs so I think an issue should be created there to fix this @PreDeToR\n. The parser over there will need to be updated to understand the file:// protocol \n. What would you expect to see?\nI think for most users if their browser can't play a video they would expect to see an explanation why.\nYou should be able create your own playback and add it to the player in the options which will take precedence over the 'no_op' playback.\n. I understand. I've just been trying to figure out why the poster isn't actually there and it turns out it is but it is below the no_op div in the dom.\nWill look into this.\n. @kslimani are you talking about clicking the clappr stop button on the media control or clicking pause on iOS's control bar?\n. I understand. Maybe we could remove and re-add the src property to the video tag to reinitialise it instesd of setting the time to 0 at the place you linked above.\n. Hey @kslimani I'm actually putting a PR together at the moment also. My approach is to remove the src on stop and readd it on play as discussed in https://github.com/clappr/clappr/issues/1103\nI'm not sure which method is best so will see what others say :)\nI'm not sure if there should be specific logic for safari only though\n. Note I haven't actually checked that this solves the problem in #1158. I've just checked in dev tools (and tests) that the src is removed and re-added.\n. Cheers @kslimani! The content type thing was just a comment not an issue. It's my reasoning as to why I think removing the <source> element shouldn't be a problem.\n. Hi this looks like a hlsjs issue.\nWhat is the X-TARGETDURATION value set to in your playlist? Can you provide a stream URL?\nOn 30 Sep 2016, at 15:27, Roman Shmelev notifications@github.com<mailto:notifications@github.com> wrote:\nBrowser: Version 53.0.2785.116 (64-bit) -- actually no difference\nOS: Mac OS 10.10.5 (14F1912) -- actually should make no difference\nClappr Version: 0.2.63\nSteps to reproduce:\n-   create live stream: keyframe-interval = 1 sec, hls-packet-duration = 2 sec, and hls-playlist-chunks-count = 3\n-   start playback\n-   I was expecting smooth playback but chunklist is reloaded not that frequently so video stops playing before new chunks are downloaded\nIssue was reproduced on http://cdn.clappr.io/\nI suppose there should be some option to increase rate of chunklist refreshes however neither documentation nor looking through source code helped...\n\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://github.com/clappr/clappr/issues/1163, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADG-WfIW1yymz_QaXIRsO-bWAkWRpFB4ks5qvRxTgaJpZM4KLJTG.\n. Thanks. The target duration looks quite high. Are you expecting any segments to be 10 seconds long?\nRegardless I'd say this is a hlsjs issue as it should be able to use the EXT-INF values to calculate when to refresh, so it would be worth creating an issue there with a link to this one. Maybe at the moment it only uses the TARGETDURATION.\nOn 30 Sep 2016, at 15:48, Roman Shmelev notifications@github.com<mailto:notifications@github.com> wrote:\nunfortunately I cannot provide you with URL to the stream (will probably be able to do it later) however this is how chunklist looks like:\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-TARGETDURATION:10\nEXT-X-MEDIA-SEQUENCE:117\nEXTINF:2.0,\nmedia_w1081758558_117.ts\nEXTINF:2.0,\nmedia_w1081758558_118.ts\nEXTINF:2.0,\nmedia_w1081758558_119.ts\nHope that helps\n\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/clappr/clappr/issues/1163#issuecomment-250763868, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADG-WYJaYTRmtoZgxyPrwMVry2aZRXz_ks5qvSEbgaJpZM4KLJTG.\n. done :)\n. This makes sense to me \ud83d\udc4d \n. Also are we going to bump the major version of clappr for this? I think some people might be setting hlsjs options and accessing the hlsjs instance directly and this might cause problems for them?\nMight be worth checking how much the hlsjs api and config options have changed between the versions I'm not sure if it's backwards compatible.\nrefs: https://github.com/clappr/clappr/issues/1143#issuecomment-247985028\n. @kolpax could you build this branch (fix-html5video-autoplay-after-destroy) and see if your issue is fixed?\n. Does it behave the same as the js hls playback?\nOn 23 Nov 2016, at 17:31, Guilherme Medeiros notifications@github.com<mailto:notifications@github.com> wrote:\nIt is actually the opposite. The current time is equal to the duration. Which is pretty bad in my case since I need to save the exact time of the interaction with the player.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://github.com/clappr/clappr/issues/1221#issuecomment-262564535, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADG-WeRl9vYjYe6WgmjDfd6xbp2Vpntnks5rBGpNgaJpZM4K6i_z.\n. @anoopanooponly the time in the event is the time into the watchable part of the stream, so this is expected. In the js hls playback there is the getStartTimeOffset() method which will return the time that the watchable part starts at. So, if you want an always increasing time you can do var position = player.getStartTimeOffset() + player.getCurrentTime()\ngetStartTimeOffset() currently doesn't exist in the flashls player. Maybe it should be imlemented there too.\n. @NicholasAsimov I think maybe the fix should be in the html5 video playback here. The reason it is not working at the moment is probably because there's a check there that ignores it if the type is LIVE.. Oh I see this isn't for live. In which case it would be good to determine if the seek is being called from the html5 video playback. If it is then maybe it's a hlsjs bug?. Yes so if the playback type is vod then that means seek() should be called in the html5 video playback. This used to work before with hlsjs and I think it should still work now so. If hlsjs is ignoring the seek request I think that's a hlsjs bug.\nThe startPosition in the hlsjs constructor is an optimisation it should still work without it.\nAnyways given hlsjs now has this option which is probably more optimised (eg might start downloading from the correct segment instead of the start), maybe we could use that like you are now, but also override _checkInitialSeek() to be a noop, so that the html5 playback doesn't also then attempt to seek?. Actually in the html5 video playback it looks like seekStringToSeconds is being given an argument that is incorrect? It shouldn't have one? Maybe this is the issue? . This may be when it broke https://github.com/clappr/clappr/commits/ca38748a9baee66afd8e8072ef756b5152e4f0f2/src/base/utils.js. I agree with the rename. I think if you fix the html5video playback the hls one will start working without any changes needed as it extends the html5video one. I presume the URL time is currently ignored there too it's just that no one has repirted it?. Hlsjs isn't supported on iOS as the browsers there don't provide media source extensions. I think clappr should already choose native hls (html5 video) player on iOS?\nOn 12 Jan 2017, at 12:48, kslimani notifications@github.com<mailto:notifications@github.com> wrote:\nI think that HLS playback support on iOS device is implemented in Safari browser. (Clappr use native html5 video element with Safari on iOS/Mac OS).\nAFAIK, Firefox or Chrome does not support HLS playback natively on iOS device.\n(But i am maybe wrong, in fact, i never tested \ud83d\ude03)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://github.com/clappr/clappr/issues/1257#issuecomment-272143944, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADG-WZK69sR6Me0YxuNtReeSVfxqxtBdks5rRhL6gaJpZM4LhqC_.\n. Yes I think an option to enable hlsjs over native hls when supported makes sense\nOn 14 Jan 2017, at 00:22, Leandro Moreira notifications@github.com<mailto:notifications@github.com> wrote:\n@tomas2387https://github.com/tomas2387 @clappr/corehttps://github.com/orgs/clappr/teams/core maybe we can make this decision optional because in fact there are few situations (some devices) where hls.js will be a better playback than the native.\nBut I'm in favor of making the user to take this decision.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/clappr/clappr/issues/1257#issuecomment-272574916, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADG-Weffi2AJx-Psh3ofzo5LO6uD-LVtks5rSAdMgaJpZM4LhqC_.\n. Yep I think this is it :)\nhttps://github.com/clappr/clappr/pull/1254#issuecomment-272616368. Thanks @MTRNord !. Will forever be a mystery\nOn 18 Aug 2017, at 19:20, Leandro Moreira notifications@github.com<mailto:notifications@github.com> wrote:\nClosed #1437https://github.com/clappr/clappr/issues/1437.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://github.com/clappr/clappr/issues/1437#event-1212261610, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADG-WY9CMHD_I4efpvVo_bY02APhu6YDks5sZcf3gaJpZM4Nzmmp.\n. You should also json_encode($url) the URL before echoing it so that it if it contains '\"' for example it is escaped properly and doesn't break the JavaScript\nOn 1 Oct 2017, at 12:20, kslimani notifications@github.com<mailto:notifications@github.com> wrote:\nHere a \"fast and dirty\" example :\n(please note this is out of scope of Clappr)\ncl.php :\nPHOTOCALL.TV - Streaming\n\n\n\n\n\n\n\nvar player = new Clappr.Player({\nsource: \"&lt;?php echo $_GET['vid'] ?&gt;\",\nplugins: [LevelSelector, ChromecastPlugin],\nparentId: \"#player\",\nheight: \"100%\",\nwidth: \"100%\",\nautoPlay: true,\n});\n\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://github.com/clappr/clappr/issues/1513#issuecomment-333366951, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADG-WVLSsaxUafVMv8H0zx-BjsQcMNp6ks5sn2dtgaJpZM4PpriC.\n. I think maybe it would be better to handle it completely in html5_video.js and in mute() call setVolume(0) and in unmute() call setVolume(1).\nThen in setVolume it would update both the video element 'muted' and 'volume' properties. Ie 'el.muted = volume === 0'\nThis way muted is always automatic just from the volume level.\nWhat do you think?. :+1: I agree too I think it makes sense that the actual playback only has to deal with a volume not mute status.. I guess hound might actually have a point here :P\n. Think this can be removed now?\n. Not sure why this.getPlaybackType() === 'vod' used to be there? Wouldn't it always have returned 'live' or 'aod'?? (line 64)\n. That's pretty neat. Done!\n. Think this can be simplified to just\njs\nif (hours && hours > 0 || paddedHours)\n. This can just be:\njs\nthis.actualLiveTime = !!this.mediaControl.options.actualLiveTime\n. I like the idea of the server providing the stream start time but don't think that will work with streams with a sliding window where the start of the stream is removed as time progresses.\n. In javascript null, undefined and false are all falsey so if it's undefined it's still ok.\n. Yep :)\nhttp://james.padolsey.com/javascript/truthy-falsey/\n. It's back now :) wasn't sure if it was doing anything before\n. With the second one won't that mean this.seek(time) will never be called when time is 0?\n. I could, just thought it would be nicer to have it available as an argument so the user doesn't have to register for the event as well as creating the player.\nIf you'd rather people just listen for the event though that's fine just close this.\n. Just discovered an issue with events which is that they can be fired before the new Clappr.Player() completes, meaning the user doesn't get chance to listen to them!\n@leandromoreira's solution would allow people to listen to events before the creation of the player completes, if the listeners for them were registered internally before anything would fire them.\n. When it's vod the duration and current time is shown in the media control\n\n. It's 'this' from Html5Video, which I think becomes the same 'this' from Hls?\n\nOn 23 Dec 2015, at 11:34, Leandro Moreira notifications@github.com wrote:\nIn src/playbacks/hls/hls.js:\n\n@@ -124,6 +123,12 @@ export default class HLS extends HTML5VideoPlayback {\n     }\n   }\n-  render() {\n-    var a = super.render()\n  what's a ? is it super.element (video tag element) ? If yes, I think we should name this to videoElement or something that show intention\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Yep will tweak it \nOn 23 Dec 2015, at 11:51, Leandro Moreira notifications@github.com wrote:\nIn src/playbacks/hls/hls.js:\n\n@@ -124,6 +123,12 @@ export default class HLS extends HTML5VideoPlayback {\n     }\n   }\n-  render() {\n-    var a = super.render()\n  :) I think you're right! maybe we can get rid of that a, my observation was about naming that a could mislead or make us to go to HTML5Video to understand what's a. I think, return this is best.\n\nrender() {\n  super.render()\n  this.ready()\n  return this\n}\n\u2014\nReply to this email directly or view it on GitHub.\n. Because it looks like it could be called here as well as here\n. And here\n. This can be simplified to:\n\nlet hideOnPlay = !!(this.options.posterConfig && this.options.posterConfig.hideOnPlay);\n. Ah yes I'd forgotten there's only the video hls playback.\nHls audio only playlists do exist though so maybe there should also be a HlsAudio playback? It gets complicated though because I think the extension would always be 'm3u8' so it would need more than an extension match :/\n\nOn 20 Jan 2016, at 18:47, Mike Griffith notifications@github.com wrote:\nIn src/plugins/poster/poster.js:\n\n@@ -15,7 +15,8 @@ import $ from 'clappr-zepto'\n export default class PosterPlugin extends UIContainerPlugin {\n   get name() { return 'poster' }\n   get template() { return template(posterHTML) }\n-  get shouldRender() { return this.container.playback.name !== 'html_img'}\n-  get shouldRender() { return this.container.playback.name !== 'html_img' }\n-  get shouldHideOnPlay() { return this.container.playback.name !== 'html_audio' }\n  This isn't reliably working for me because I can't force HTML5Audio playback for a HLS audio-only stream. My last commit (manually specifying poster auto-hide behavior in options) worked fine for my use case, although this would be more elegant.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. because typeFor was only called in html5_video, not hls, meaning it would always be video/mp4. With hls no type gets added as this was for the <source> tags which aren't used for the hls playback.\n. Cool will do this :)\n. Sounds good. Yes I'll move it to start on play and stop on stop.\n\nIt shouldn't do because in handleBufferingEvents() it ensures that the events must alternate.\n. Oh yeh. I was thinking the hls playback was still the one that would be used. Will put that back\n. It was actually needed here because the scope of the setInterval callback isn't the object.\n. I didn't, but this was something I put in a couple of commits ago, and the same should be being achieved now with update() being called at the end of render, and the .buffering check in update() anyway \n. Technically buffering doesn't need to be checked. But it means the play button disappears if the loading indicator is on, since they both check buffering, instead of play still being visible over the top if the user hasn't clicked it yet. Mimics the old behaviour as well\n. Is this needed? Isn't the Babel.rc file enough?\n. Should there maybe be some kind of delay before trying to load again? Don't want to start a dos attack on the server if it is returning an error :P\nAnd maybe a limit on the number of attempts?\n. @ronag I'm not sure I haven't looked, but that is something that hlsjs has control over so if it changed in the future then it would be our fault. If we have a limit though then I think a few repeated attempts wouldn't really matter.\n. @ronag yes asynchronous things in javascript can get complicated quickly. I reckon just a limit would be good enough.\n. I think you could use\njavascript\n$.extend(object, att);\ninstead of this\n. This property doesn't exist:\nhttps://developer.mozilla.org/en/docs/Web/API/HTMLMediaElement\n. The property is crossOrigin not crossorigin\n. This works different to be before in that it is setting the properties on the video tag instead of adding attributes to the dom element which I guess is fine, except for poster which looks like it can only be set as an attribute.\n. should be a boolean\n. boolean :P\n. boolean :P\n. Need to figure out how to do this before this. It needs to be called in the same tick as the script being loaded, but can't be called before the developer has a chance to set their window :/\n. This should now be\nBy default webpack will look at the main field in package.json\n. and main here as well.\n. Yes get _now() could move but sure about _duration() and _startTime() because they both use properties that are specific to this playback.\n. :+1: \n. It is to make sure if they are all undefined it defaults to assuming full screen is available. Can change it though if we think one those properties will always exist?\n\nOn 16 Jul 2016, at 00:37, Bruno Torres notifications@github.com wrote:\nIn src/base/utils.js:\n\n@@ -85,6 +85,14 @@ export var Fullscreen = {\n     } else if(document.msExitFullscreen) {\n       document.msExitFullscreen()\n     }\n-  },\n-  canGoFullscreen: function() {\n-    return !(\n-      document.fullscreenEnabled === false ||\n-      document.webkitFullscreenEnabled === false ||\n-      document.mozFullScreenEnabled === false ||\n-      document.msFullscreenEnabled === false\n-    )\n  Why don't you instead of this do:\n\nreturn !!(document.fullscreenEnabled ||\n  document.webkitFullscreenEnabled ||\n  document.mozFullScreenEnabled ||\n  document.msFullscreenEnabled\n)\nI think it reads better, and avoids comparing to false.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Yes that makes more sense I'll update it\nOn 16 Jul 2016, at 00:38, Bruno Torres notifications@github.com wrote:\nIn src/base/utils.js:\n\n@@ -85,6 +85,14 @@ export var Fullscreen = {\n     } else if(document.msExitFullscreen) {\n       document.msExitFullscreen()\n     }\n-  },\n-  canGoFullscreen: function() {\n  I prefer using a standards based name, like fullscreenEnabled or isFullscreenEnabled. Why don't we go this way?\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Sounds like a good feature to me. I guess\n\nposition: fixed;\ntop: 0;\nleft: 0;\nbottom: 0;\nright: 0;\n?\n. Hi @sjlu\nWell spotted thanks for the PR.\nI think changing this line to\njavascript\nvar mimeTypes = mimeType || (extension && mimeTypesByExtension[extension.toLowerCase()]) || []\nwould be better, because we shouldn't be trying to access mimeTypesByExtension[undefined]\n. I think !!this._dvrEnabled would be better to ensure it's always a boolean, as this starts as undefined.\n. this._started would be better as it's private to this class.\n. If #1169 is merged then these 3 lines won't be needed as a special case, as even if the media control is enabled it won't appear.\nI think it's better if the poster plugin isn't responsible for hiding the media control because some users might not use the poster plugin and the media control should still not be present in that case for the playback type NO_OP.\n. I think it would be better to have the animation always running than have the playback have to look at poster options as the playback and the poster plugin should be completely independent. Also someone might not be using the poster plugin in which case they would also expect it to be animating.\nI.e call this._animate() in the render() method. (I think the render() method in a playback is only called once)\n. I'm not sure if maybe it should be\njavascript\ntypeof(this.options.poster) === \"object\" && this.options.poster.showForNoOp\nto be a bit more explicit that it's the object version of the setting?\n. I didn't realise it used up that much. Maybe we could make the noise generation more efficient?\n. I'd also call this method from the _onTimeUpdate() method, because with the hls playback the resolution could change at any point during a stream, if it's an adaptive stream, and if other playbacks extend this they may do the same.. Should we check if the state has actually changed, and only fire the event if it has, to prevent duplicate events?. Also I'd change this to this._highDefinition as it's private, and initialise it to false in the constructor.. Ah I didn't realise the HD event was already implemented in the hls playback. This makes it a bit more complex as this needs to not conflict with that one. I.e the hls playback condition also checks the bitrate whereas here it doesn't.\nMaybe the new method _checkHighDefinition() could also be implemented (overridden) in the hls playback and that would be where the event is fired there too?. And it might need to stay as a property 'highDefinition' as I'm not sure if code in other places expects it to be public.. Currently this could get set to false\n(Ie if type LIVE)  when I think it should be undefined. Wether => whether :). I'm not sure if 'AdaptivePlayback' is the best name given this contains audio options and closed captions?. ",
    "LeonardoCardoso": "This feature was added on the pull request https://github.com/clappr/clappr/pull/419\n. I just noticed that the video is loaded again from its source. That's why the loading shows up. Maybe caching the video might solve this.\n. Tested. Nice!\n. I've noticed that if you play or pause the video by clicking on container it doesn't change the icons.\nBut if you pause the video by clicking on play/pause button and resume the video by clicking on container it works.\nI also noticed that changeTogglePlay() is only called to play (or resume) the video by clicking the container.\n. resolve https://github.com/clappr/clappr/issues/220\n. Nice! \n. ",
    "renanvaz": "Sorry for the delay, the error occurs in Chrome Canary (my version is 40.0.2212.0).\n. ",
    "todd-g": "Is this relevant only to the Flash fallback and not to the HLSjs implementation?\nI am seeing clappr requesting our top bitrate m3u8 even when I have the player sized down very small.  Ideally, it would take the player size into account and not try to serve, for instance, a 4628 bitrate 1920x1080 video in a 250px wide player - right?\n. Thanks for the super fast reply!  That makes sense.  I should have been looking at hlsjs configs rather than Clappr in this case.\n. I know that's an automated post-- but these issues don't address the core problem or the discrepancy between versions.\n. @vix-simplex thanks  - this looks like it could work, but the bigger issue here is that Clappr/HLSjs used to reconnect on its own, which is the intended behavior, but some change after 0.2.52 has caused this to stop working.\n. Quick update in case anyone else is experiencing this.\nWe tracked this down to a missing audio codec being specified in our main m3u8 manifest.  Other browsers must be inspecting or assuming the audio codec, and Samsung Browser could not.\nDetails:\nOur master manifest previously had only CODECS=\"avc1.42001e\" which would cause Samsung Browser to not know how to play audio.  The fix is to include audio in this parameter, like:\nCODECS=\"avc1.42001e,mp4a.40.2\"\nThis fixed the issue.\n. ",
    "victor-dsc": "@flavioribeiro \ni used the official claprr video:\n\n. @thiagopnts \nYea i have the flash player installed.\nwell, the player at http://cdn.clappr.io/ is working fine!\ni tried it just now.\nmaybe it's something wrong on the script's that i've imported ;)\n. ",
    "jimaek": "How about using jsDelivr?\n. @flavioribeiro We can do auto-updates based on Github tags or npm https://github.com/jsdelivr/jsdelivr#auto-updating\nWe also support custom configs but thats only for unique situations because some features like version aliasing might not work.\n. You can use this if you want http://www.jsdelivr.com/projects/clappr\n. ",
    "sachdevs": "I just attempted to toggle it multiple times but there seemed to be no problem whatsoever. Maybe just your browser?\n. ",
    "azr": "Cool for the webms ! About gif, hem, good point. At least I can say I'd be using them :).\n. Because it's going to be a huge infinite scroll page and I don't want everything to start buffering/playing for it'd kill the navigator.\nThe animations will play when displayed, the user will be able to do pauses there, and will pause if the user scrolls.\nThat's why I'm searching for a lightweight js player that roxx !\nI'll also need to  preload=\"none\" would that be possible ?\n. Very interesting posts thanks ! If I was and octopus I'd try to do the same as imgur or flickr in go, I think I'll just do the img hover trick for now :).\nThanks about the preload=none ! May be you should make it an instantiation option ? ( or document it :) )\n. Thank you guys for the lib ! :)\n. ",
    "Metrakit": "hey ok thanks a lot !\n. And I can get the current time if I make a UI core plugin ?\n. Ok thanks, i have updated my repo, If I want an other sidebar in the container and a button in the media-controls I can do it in the same plugin ? \ni dont find the way about how to do that...\n. Hi.\nThanks for you help.\nIn the following code, I have successfully to create a second element to the DOM but when I click on the element \"comments-bar\" nothing happens. You know why? While on my first element \"add-how\" it works :\n``` javascript\n  get events() {\n    return {\n      'click .add-comment': 'click',\n      'click .comments-bar': 'clickBar',\n    }\n  }\nget attributes() {\n    return {\n      'class': 'comments-controls',\n      'data-comments-controls': '',\n    }\n  }\nconstructor(core) {\n    super(core)\n    this.core = core\n    this.percentTime = 0\n    this.actualTime = 0\n    this.percentHoverTime = 0\n  }\nbindEvents() {\n    this.listenTo(this.core.mediaControl, 'mediacontrol:rendered', this.make)\n    this.listenTo(this.core.mediaControl, 'mediacontrol:mousemove:seekbar', this.hoverBar)\n    this.listenTo(this.core.mediaControl.container, 'container:timeupdate', this.timeUpdate)\n  }\nmake() {\n//console.log(JST)\\\n\n// Create new DOM element add a button\nvar styleAddBtn = Styler.getStyleFor('add');\n\nthis.$playButton = this.core.mediaControl.$el.find('.media-control-button');\n\nthis.$el.html(JST.add)\n      .append(styleAddBtn)\n\nthis.core.mediaControl.$('.media-control-right-panel[data-media-control]').append(this.$el);\n\n// Create new DOM element for the second bar\nvar styleBar = Styler.getStyleFor('bar');\n\nthis.$el.bar = document.createElement(\"div\")\n$(this.$el.bar).html(JST.bar)\n      .append(styleBar)\n      .addClass('comments-bar')\nthis.core.mediaControl.$('.media-control-right-panel[data-media-control]').append(this.$el.bar)\n\n\nreturn this\n\n}\nclick() { \n    this.core.mediaControl.container.pause()\n    this.$playButton.addClass('paused')\n    //this.timeUpdate\n    console.log('click on button, temps actuel: ' + this.percentTime + '%')\n    console.log('Poster un commentaire a ' + Math.round(this.actualTime) + ' secondes')\n  }\nclickBar() {\n    console.log('Coucou')\n  }\n```\nThanks a lot !!! \nHave nice end of year celebrations !!\n. I have updated my repo \"https://github.com/Metrakit/clappr-test-plugin\". I have add a form so a new element. But I want can do event on this element like the on the button element. You can have a try if you want with the plugin in my repo, it works. You can help me for that? You know the way for add events on others elements? Because know I can only my first element $el.\nThanks for you help.\n. hum ok. thanks for your help\n. ok, thanks \n. hey ok thanks !!\n. Perfect !! I have resolved the problem. Thanks.\n. Haha nice idea\n. ",
    "rheber": "What is an example of an \"event name\" in the code?\nFor instance, in container.js:\nget events() { return {'click': 'clicked'} }\nIs 'click' or 'clicked' the event name or are you referring to something else?\n. I get this error:\n'.' is not recognized as an internal or external command,\noperable program or batch file.\nnpm ERR! Test failed.  See above for more details.\nnpm ERR! not ok code 0\n. I'm already on it.\n. ",
    "jahlomp": "Having one player play different format of videos and also play from different sources reduces work. I don't have to worry about managing or dealing with different players. I get the same skin for all video players on the site. \nI will like to add another feature request which is responsiveness.\n. ",
    "sfia-andreidaniel": "Vote up\n. ",
    "zetatv": "Hola, he estado testeando el pluggin y el problema qu tiene es que al usar resoluciones mayores a 640x360, el video no se adapta, inclusive cuando uno pone el video en pantalla completa, me gustaria saber en que estoy fallando.\n@towerz \nHello, I've been testing the plugin and the problem you have is that using resolutions higher than 640x360, the video does not fit, even when you put the video in full screen, I would like to know I'm failing.\n. ",
    "dayvson": "I understand the reason of why you guys want to test and experiment with Chromecast and decide to make it a core plugin, but I believe this decision should be re-evaluated.\nMainly for two reasons, \n1 - To make this code work, it will require that a user have a Chromecast device, which is an enormous external dependency. I believe this reason should be strong enough to make the case of make Chromecast as an external plugin.\n2 - Also, there are no tests today about for this plugin; I believe Clappr core plugins and code base should have a high test coverage and be as lightweight as possible.\nTo put it into another perspective, this plugin as it is today does not add that much value for most of the users and it makes the codebase bigger. In a scenario where a user needs to Cast audio/videos in his application is perfectly reasonable to add an external plugin to enable the feature.\nI can move it to an external plugin and send a pull request if you guys agree.\n. :+1: \n. Hey @flavioribeiro \nI sent a pull request to add that \nhttps://github.com/clappr/clappr/pull/570\n. hey @flavioribeiro, I am working on that ;)\n. Try to download the latest version of the clappr-level-selector-plugin 0.0.10. It should fix the problem.\n. :beers: @towerz \n. I just sent a pull request that will fix it.\n. that makes sense, I will send another pull request fixing it.\n. let me know what do you guys think about that https://github.com/clappr/clappr/pull/647\n. LGTM\n. I am going to work on this feature, we will break the API but the seek method will seek in time and we will have a seekPercentage function just like @flavioribeiro explained. I will send the PR soon.\n. hey @FDiskas, when this pull request get merged you will be able to listen this event like:\nplayer.on(Clappr.Events.PLAYER_VOLUMEUPDATE, function(volume){ \n                         console.log(\"volume\", volume);\n});\nplayer.setVolume(50);\n. Can you merge it?\n. I also added the PLAYER_VOLUMEUPDATE event\n. This PR https://github.com/clappr/clappr/pull/700 should fix this issue.\n. Hey @FDiskas I sent a pull request to fix this issue https://github.com/clappr/clappr/pull/701\nAfter it gets merged could you please test it?\n. What do you guys think about changing the options configuration hlsjsConfig to hlsConfig and pass all values to both flashls and hlsjs. It  will break the API, but I believe the hlsConfig name is agnostic to the implementation used and will bring more consistency. I can do that if you guys agree.\n. yes @flavioribeiro, I am working on that and I will send the pull request shortly\n. I think it was a wrong copy and past from HTML5Video file. As far as I know the live support for audio on HTML5 will always play the audio using the tag video when the stream is an M3U8 with audio only. I did some tests and it is working fine.\n. nice catch @leandromoreira I created the installNavigator function inside the NoOP I think this should be fine.\n. I already created another method called seekPercentage. \nIn my PR, there are two public methods available seek(seconds) seekPercentage(percentage) and that setCurrentTime is a private method.\nThe API usage is:\nplayer.seek(120) // seek to 2 minutes\nplayer.seekPercentage(50) // seek to half of the video duration\n. I agree with you, but I don't think this is that critical, we would have two methods that are almost the same both needs to dispatch the CONTAINER_EVENT so instead of this: \nsetCurrentTime(time, inseconds) {\n    this.trigger(Events.CONTAINER_SEEK, time, this.name);\n    if (inseconds) {\n      this.playback.seek(time);\n    } else {\n      this.playback.seekPercentage(time);\n    }\n  }\nSo we would have something like this:\n```\nsetCurrentTime(time) {\n    this.trigger(Events.CONTAINER_SEEK, time, this.name);\n    this.playback.seek(time);\n  }\nsetCurrentPercentage(percentage) {\n    this.trigger(Events.CONTAINER_SEEK, percentage, this.name);\n    this.playback.seekPercentage(percentage);\n}\n```\n. This will break the API and people using the latest need to update their code. \nBut it only will break for people using the API if they are using just the player with the regular controls it will work just fine.\n. I broke down the setCurrentTime into two methods seek and seekPercentage, and it looks much better. Also, the CONTAINER_SEEK event will be always triggered with seconds.\n. ",
    "alvynmcq": "I will close this request and get some more work done to it. \n. I have updated the timeupdate container, hopefully everything is ok now.\n. ",
    "aggietallboy": "Playing with JWPlayer a little bit, I was able to just append the key/stream name to the rtmp URL:\nTrying it here, with source: \"rtmp://10.1.1.20/live/xyzxyz\" just returns a blank browser window.\n. Here's my updated page:\n```\n\n\nClappr Player\n\n\n\n\n\n    var player = new Clappr.Player({\n        source: \"rtmp://10.1.1.20/live/xyzxyz\"\n        });\n  \n\n\n```\nUnfortunately I'm not even seeing the player as a window.\nPulling the page data, I can see it connecting to the cdn.clapper.io, but it does not seem to be proceeding.\n\n. Well, we've finally got it working:\n```\n\n\nClappr Player\n\n\n\n\n    var player = new Clappr.Player({\n    source: \"rtmp://10.1.1.20/live/xyzxyz\", \n      height: 768,\n      width: 1024,\n      parentId: \"#player\"\n      });\n  \n\n\n```\n. Well we got so close... actually had it running for a few minutes, but after I restarted the stream, we didn't have anything\nI've got a black screen that says it's live, but no go (it displays in the JWPlayer on the same system OK).\n\n. I am generating the stream with Open Broadcaster.  Originally I was broadcasting with x264 (the default).\nChanging to Quick Sync made the Clappr Player start running again.\n. The player is working fine in Chrome, but not IE 11.\nWill check Safari and Android native browser.\n. IE11 and Safari both give the player window with the \"Play\" arrow, but they don't start/connect to the stream.\nI have another user testing with Chrome and he cannot connect (but he could connect with the JWPlayer page).\n. Well now for more inconsistency :)\nI switched back to x264 encoding, and the player works on my machine, but not on a variety of others.\nSo far all of those machines are playing the stream with the jwplayer, but not here.\nI've tried it with the player javascript from the web, as well as a local copy pulled with wget.\n. Let me know if there's anything i can do to help/replicate!\nOn Fri, Dec 19, 2014 at 11:56 AM, Fl\u00e1vio Ribeiro notifications@github.com\nwrote:\n\n@aggietallboy https://github.com/aggietallboy I'll try to reproduce\nthis bug here\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/286#issuecomment-67672725.\n. Latest update is that it was not working with x264, but not Clappr.\n\nAs of this moment though Quick Sync encoding, with all other defaults is working on my one machine... will start testing other machines again.\n. I'm afraid I've just got a blank page:\nClappr Player\n   var player = new Clappr.Player({\nsource: \"rtmp://myfeedurl\", height: 768, width: 1024, autoPlay: true, mute:\ntrue, parentId: \"#player\", plugins: {'playback': [RTMP]} }); \n\n\nOn Wed, Jan 7, 2015 at 7:18 PM, Fl\u00e1vio Ribeiro notifications@github.com\nwrote:\n\ngreat! I'll wait for @aggietallboy https://github.com/aggietallboy\nbefore close this. Thank you [image: :+1:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/286#issuecomment-69121850.\n. well that makes sense :)\n\nOn Thu, Jan 8, 2015 at 11:50 AM, Fl\u00e1vio Ribeiro notifications@github.com\nwrote:\n\nYou need to add Clappr player also. Here is the full html:\nhttps://gist.github.com/e6bb189cf903aabe5d52\nFl\u00e1vio Ribeiro \n(flv.io http://flv.io | blog http://flavioribeiro.com)\nOn Thu, Jan 8, 2015 at 3:33 PM, aggietallboy notifications@github.com\nwrote:\n\nI'm afraid I've just got a blank page:\nClappr Player\n   var player = new Clappr.Player({\nsource: \"rtmp://myfeedurl\", height: 768, width: 1024, autoPlay: true,\nmute:\ntrue, parentId: \"#player\", plugins: {'playback': [RTMP]} }); \n\n\nOn Wed, Jan 7, 2015 at 7:18 PM, Fl\u00e1vio Ribeiro notifications@github.com\nwrote:\n\ngreat! I'll wait for @aggietallboy https://github.com/aggietallboy\nbefore close this. Thank you [image: :+1:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/286#issuecomment-69121850.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/286#issuecomment-69216081.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/286#issuecomment-69218761.\n. so far so good... working in Chrome and IE for me and a few other users here\n\nOn Thu, Jan 8, 2015 at 2:08 PM, Roger Heiniluoma aggietallboy@hotmail.com\nwrote:\n\nwell that makes sense :)\nOn Thu, Jan 8, 2015 at 11:50 AM, Fl\u00e1vio Ribeiro notifications@github.com\nwrote:\n\nYou need to add Clappr player also. Here is the full html:\nhttps://gist.github.com/e6bb189cf903aabe5d52\nFl\u00e1vio Ribeiro \n(flv.io http://flv.io | blog http://flavioribeiro.com)\nOn Thu, Jan 8, 2015 at 3:33 PM, aggietallboy notifications@github.com\nwrote:\n\nI'm afraid I've just got a blank page:\nClappr Player\n   var player = new\nClappr.Player({\nsource: \"rtmp://myfeedurl\", height: 768, width: 1024, autoPlay: true,\nmute:\ntrue, parentId: \"#player\", plugins: {'playback': [RTMP]} }); \n\n\nOn Wed, Jan 7, 2015 at 7:18 PM, Fl\u00e1vio Ribeiro \nnotifications@github.com\nwrote:\n\ngreat! I'll wait for @aggietallboy https://github.com/aggietallboy\nbefore close this. Thank you [image: :+1:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/286#issuecomment-69121850.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/286#issuecomment-69216081.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/286#issuecomment-69218761.\n. multiple internal users can now see it (awesome!)\n\n\nWhether specifying height/width or not, it seems that IE renders a  limited\nview onto the stream, where chrome gets the whole thing\nI'll PM you some screen shots.\nAnother challenge -- opening the page from the outside world doesn't\ndisplay the stream (which is actually perfect in my scenario) -- the stream\ngoes to a private IP... so when i pull up the page from outside, at the\nlink I gave you in PM, it won't load anything.\nOn Thu, Jan 8, 2015 at 2:15 PM, Roger Heiniluoma aggietallboy@hotmail.com\nwrote:\n\nso far so good... working in Chrome and IE for me and a few other users\nhere\nOn Thu, Jan 8, 2015 at 2:08 PM, Roger Heiniluoma <aggietallboy@hotmail.com\n\nwrote:\nwell that makes sense :)\nOn Thu, Jan 8, 2015 at 11:50 AM, Fl\u00e1vio Ribeiro <notifications@github.com\n\nwrote:\nYou need to add Clappr player also. Here is the full html:\nhttps://gist.github.com/e6bb189cf903aabe5d52\nFl\u00e1vio Ribeiro \n(flv.io http://flv.io | blog http://flavioribeiro.com)\nOn Thu, Jan 8, 2015 at 3:33 PM, aggietallboy notifications@github.com\nwrote:\n\nI'm afraid I've just got a blank page:\nClappr Player\n   var player = new\nClappr.Player({\nsource: \"rtmp://myfeedurl\", height: 768, width: 1024, autoPlay: true,\nmute:\ntrue, parentId: \"#player\", plugins: {'playback': [RTMP]} }); \n\n\nOn Wed, Jan 7, 2015 at 7:18 PM, Fl\u00e1vio Ribeiro \nnotifications@github.com\nwrote:\n\ngreat! I'll wait for @aggietallboy https://github.com/aggietallboy\nbefore close this. Thank you [image: :+1:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/286#issuecomment-69121850.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/286#issuecomment-69216081.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/286#issuecomment-69218761.\n. \n\n\n",
    "kyleparisi": "I'm on the same page with @aggietallboy for the most part.  jwplayer works.  I don't know actionscript that well but I was able to make a prototype which does stream my rtmp source.  I tried to debug the Player.as file but it is confusing since it uses the air sdk which I have no idea if air works on web pages?  (The first point of failure is the LoaderInfo object fyi)\nThis was done streaming via windows obs x264.\n. @flavioribeiro Just let me know a day you'll be working on it and I can turn my server on if you want so you can stream, otherwise I can stream my static desktop....\nI'm still suspicious of that LoaderInfo.  I played with it a little longer after posting and none of the functions seemed to be bound to the html object.  Once I commented out the LoaderInfo, they were there.  I didn't get any further because the player API seemed a little difficult to build up the player.  I think it would be wise to fork it out [If that's what you meant].\n. I confirmed it is working.\nOne other idea might be looking for the file extensions that you support which might get dicey.  It looks like some other players have a file option or they use a prefix in the source.\n. Ah I see.  Shall I post on the clappr rtmp plugin page?\n. ",
    "ronag": "Done. Took a little while to figure out the framework. https://github.com/globocom/clappr/pull/304\nAlso I had to do a small hack to avoid the poster play button showing up.\njavascript\nsetTimeout(function() \n  this.trigger(Events.PLAYBACK_BUFFERFULL, this.name)\n}.bind(this), 1);\n. The problem I have is clappr.js when doing require to set itself on window but not on module.exports\n. Great! Now how do I stop click = play?\n. Calling p.stop() won't help me with disabling play on click. Would be nice to have an option for it. But yea, I can work around it.\n. Cheers. I'll get back to you on that. I need make the project work with webpack first.\n. We need to check the options sent to resize for \"width and \"height\".\n. Well, I learned today to not use the latest CDN in production.\n. @ronag Thanks! Note, not blaming anyone but myself.\n. @shaharmor: Where did you find the code you posted? Somewhere the _recoveredDecodingError and _recoveredAudioCodecError needs to be reset when it should try again or if it successfully recovered...\nI'm not sure whether those variables should be used so that it can just keep on retrying.\n. @tjenkinson: FFMPEG. However, I am piping the transcoding directly to the HTTP response which means that the duration does not get written in the header, and there is no way to provide ffmpeg with a pre-determined duration to write in the header.\n. > Do you have more information about how you are creating the stream?\ne.g.\njavascript\nspawn('ffmpeg', [\n'-i', file,\n'-f', 'webm',\n'-'\n]).stdout.pipe(res)\n\nIf you are transcoding the video on the fly does this mean you aren't doing byte range requests, so the user can only start watching from the beginning and seeking to various points won't work until that region has been downloaded.\n\nYes, that is correct. However, when the file is finished then any further requests will be able to use range-requests, but the problem remain since the duration is not in the header. Content-Duration would have solved the issue but it's no longer supported by any browser.\nWhat I would need to do is something like:\njavascript\nspawn('ffmpeg', [\n'-i', file,\n'-t', duration,\n'-f', 'webm',\n'-'\n]).stdout.pipe(res)\nBut ffmpeg doesn't use -t for writing the duration to the output but will wait until the whole thing is transcoded and then go back to the header and update the information, which is not possible while piping.\n. Neither Clappr nor HLS.js looks for EXT-X-PLAYLIST-TYPE so I assume a manifest file without an EXT-X-ENDLIST is treated as a event playlist.\n. @leandromoreira: Why is there such a limit?\n. I've tried with a 2 minute clip and seeking live HLS is not allowed.\nWorks just fine here, http://dailymotion.github.io/hls.js/demo/ with a \"nice\" seek bar.\n. Tried: \n``` javascript\nthis.player = new clappr.Player({\n  parent: div,\n  width: '100%',\n  height: '100%',\n  hlsMinimumDvrSize: 0,\n})\n\n```\nNo success. Can't seek.\n. @leandromoreira  @tjenkinson: Could you try with this?\nhttps://www.dropbox.com/sh/tmugpsriq21s4zh/AAASc9JyKjHAbrYhbZEOz0jRa?dl=0\nIt's definitively using hls.js. I tried debugging onLevelUpdated and see whether it gets a duration and it does...\nNot sure what \"dvr\" is so I can't comment on that part.\n. @leandromoreira: I would expect that giving null would be the same as '' or passing other forms of non-existent/invalid sources, i.e. the player becomes empty...\n. javascript\n    this.player.load(this.state.source || '')\n    this.player.play()\n. @towerz: I'm using virtual-dom widgets:\n`````` javascript\nclass Player {\nconstructor(state) {\n    this.type = 'Widget'\n    this.state = state\n  }\ninit() {\n    const div = document.createElement('div')\n    div.classList.add('video')\nthis.player = new clappr.Player({\n  parent: div,\n  width: '100%',\n  height: '100%',\n  hlsMinimumDvrSize: 10,\n})\nthis.player.core.$el[0].style.position = 'absolute'\nthis._updatePoster()\nthis._updateSource()\n\nreturn div\n\n}\nupdate(prev, el) {\n    this.player = prev.player\nif (this.state.poster !== prev.state.poster) {\n  this._updatePoster()\n}\n\nif (this.state.source !== prev.state.source) {\n  this._updateSource()\n}\n\nreturn null\n\n}\ndestroy(el) {\n    this._cleanUp()\n  }\n_cleanUp() {\n    if (!this.player) {\n      return\n    }\n    if (this.unbindEventListenersTimeout) {\n      clearTimeout(this.unbindEventListenersTimeout)\n      this.unbindEventListenersTimeout = null\n    }\n    this.player.load('')\n    this.player.destroy()\n  }\n_updatePoster() {\n  }\n_updateSource() {\n    this.player.load(this.state.source || '')\n    this.player.play()\n    this.unbindEventListenersTimeout = setTimeout(() => {\n      this.player.core.mediaControl.kibo.off(['left', 'right'])\n    }, 500)\n  }\n}\n``javascript\n``````\n. Also the buffering/loading animation is shown...\n. Not a problem with master version.\n. Closing in favour of PR.\n. Closing in favour of PR.\n. Somewhere we also have to reset_recoveredDecodingErrorand_recoveredAudioCodecError` to false if it successfully recovered...\n. No, this is not really possible since browsers don't support mp2t. The reason m3u8 is because that is handled by hls.js which rewraps the mp2t files into mp4. However, it will only do that together with m3u8. You would need to somehow modify hls.js to get this to work. Or just generate a single entry m3u8 file...\nThe question is, why not simply use a m3u8?\n. Can be configured using hlsjsConfig\n. @towerz: Well, I would say there are problem with the design since you cannot click to the start/end, only drag...\n. @leandromoreira: I mean fractional seconds converted into frame numbers, e.g. 1.04 @ 25fps = 00:01:01\n. I do know the framerate in advance. However, using hisjs it doesn't step reliably, sometimes it gets stuck on a frame and need an extra 3-4ms to show the correct frame.\nI was thinking about something like trying to seek a little ahead, using some event see if the frame has changed (currentTime?) and then continue until it has stepped.\n. @towerz: Could we get a release on this? We need the hlsjs debug logs and as it is now we're unable to enable it...\n. @tjenkinson: Isn't there a timeout delay on the request itself already? Yes, a retry limit might be a good idea.\n. @tjenkinson: I'm unsure how to add a delay because things can happen between starting the delay and recovering which might cause the recover call to be invalid/bad, e.g. pause & play called in-between.\nMaybe if setupHLS should clear such a timeout as well? Is that enough?\n. @tjenkinson: done\n. @tjenkinson: Though we should probably also reset the attempt counter when it successfully recovered...\n. @leandromoreira: Not sure what/how that is.\n. Please show how that should look...\n. ",
    "konashark": "I haven't been compiling anything - I was just taking the clappr.js and clappr.map files from the 'dist' folder of the releases. Am I missing some critical step that I should know?\nI can't give you my url directly as it is inside a corporate network, but happily, I see that if I plug the url into the cdn.clappr.io page under the same browser, it plays there! I will need to continue experimenting, but so far it has been 100% reproducible, drop in the files from .64 and it plays, drop in the files from .65 or beyond and it doesn't. (And by the way - a big Thanks to you guys for taking on such an incredibly useful project!)\n. Thanks!\nYes, your example works, but when I would do the same thing in my app it would quietly fail - not even attempt to load the stream.\nAfter a few more hours of experimentation I think I finally found the cause. There's some odd conflict between ClapprPlayer and jQuery (at least there is with 2.1.1). The moment I removed jQuery from my app, the video started working again! I'll try to get you more details tomorrow.\nThanks!\n. Hi!\nI temporarily had to move on, but in response to your question I set up an\nApache server on my wife's MacMini and tried the same test code (Mac\nYosemite + Chrome 39) there to see if it behaved any differently.\nExactly the same results as on my work laptop: m3u8 plays automatically if\nno jQuery. With jQuery, it won't auto start, but clicking the play icon\nstarts it playing. Works fine under Safari. MP4 auto plays with or without\njQuery.\nIf I don't use a web server, then it won't play m3u8 at all... presumably\nsome cross domain issue or something.\n-Jeff\nOn Thu, Jan 15, 2015 at 9:43 AM, Fl\u00e1vio Ribeiro notifications@github.com\nwrote:\n\nhi @konashark https://github.com/konashark any update on this? I\ncouldn't reproduce it by adding jquery-2.1.1 in the same page that the\nplayer is embedded on.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/323#issuecomment-70127852.\n. Yes. All tests on a Mac.\n\nOn Sat, Jan 17, 2015 at 11:29 AM, Fl\u00e1vio Ribeiro notifications@github.com\nwrote:\n\nHey,\nYes, if you don't use a web server, no flash components will work. So,\nlet's check if I understood. The scenario is: auto play doesn't work for\nlatest clappr trying to play m3u8 source on chrome 39 with jquery embedded\non the same page. Am I right?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/clappr/issues/323#issuecomment-70380656.\n. Horray!\nI grabbed the latest version and now I see the .m3u8 autoplay in Chrome \n- jQuery on the Mac.\n  I'm glad you found it... thanks for your help, and I'm glad I'm not crazy.\n\n-Jeff\n\nFl\u00e1vio Ribeiro mailto:notifications@github.com\nJanuary 21, 2015 at 8:21 AM\nit should be fixed now. Please note that we do not support percentage \non width/height anymore, so I suggest you to use |window.innerWidth| \nand |window.innerHeight| instead of 100%. We're going to bump a new \nversion in a few hours. Thank you for all the support and patience!\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/globocom/clappr/issues/323#issuecomment-70867741.\n. Interesting. I'm not seeing this issue in Chrome, but I was seeing something related... a 4:3 stream (at least the content was 4:3, not sure if the actual stream was 4:3 or 16:9) was chopping off 10% (or so) of the top and bottom of the frame. I haven't had enough chance to research to post as an issue, but when I saw your message it made me think there's probably something to what I was seeing.\n. I also tried this stream and it started out in 4:3 exactly as you say... but then after a minute or so it corrected to 16:9. Odd.\n. ... and now it's gone back to 4:3 squished. Something in stream seems to have triggered it... the content is 4:3 squished, but when it was showing the channel's own splash screens, it was fine.\n. Thanks for the quick reply (that somehow I missed yesterday).\nI'm assuming from your answer, that the Flash portion of the player is not code that we have access to... ie: if we were to try to figure out how to enhance the code ourselves?\n. Thanks for looking into this. Is the bottom line that this would be tricky, or that it would be pretty much impossible? Wondering if I should sic one of my hacker colleagues on it, or not to bother.\n. I'm closing this because I just upgraded to 0.2.1 and the dependency issue is no longer present. The upgrade was painless and appears to require no changes. Hopefully, this report might help others if they have the same problem.\n. I entered a similar issue earlier today, but I found moving to 0.2.1 fixed the issue and worked without changes (my previous version was 0.1.1) and got rid of the dependency, so I closed the issue. Did you clear your browser cache after changing versions?\n. Oh? I never build anything, I just copy the .js files out of 'dist' and drop them into my project. (BTW: I do not represent Clappr in any way, just trying to help since I had the same problem this morning and I was lucky that the update worked out of the box for us.) Good luck! \n. \n",
    "shacharz": "How come this commit closed the issue? I still see it\n. yea\n. Maybe it's codec related? a codec that isn't installed on my machine and Chrome has it?\n. Yup, I've reproduced it on cdn.clappr.io\n. Indeed it was outdated flash player :grimacing: \nthanks guys\n. works like a charm, thanks.\n. When can we expect 0.0.115?\n. > unstable abstraction\nWhat abstraction are you referring to?\n. @leandromoreira I don't mind doing a PR, but we need to agree about it first :)\nThe 2 solutions I see:\n1. revert to previous hls.js\n2. release a major version and remove 0.2.64\n. @leandromoreira It does, but the API between the XHR loader and the rest of the library has changed\n. ",
    "ferval": "Hi I'm trying to use clappr with ionic but on my Nexus 4 is not working. When I run the app in the desktop browser I don't have any problem. Any idea about what I should try? \n. The problem is that i'm using an apk version. So I'm not able to do that.\nAny other hint/advice?\nFernando Valentini\ndiretor\n(34) 8852-5821 <03488525821>\nfernando@enesolucoes.com.br\nEsta mensagem, incluindo seus anexos, pode conter informa\u00e7\u00f5es confidenciais\ne/ou privilegiadas. Se voc\u00ea n\u00e3o for a pessoa autorizada a receber esta\nmensagem, n\u00e3o pode usar, copiar ou divulgar as informa\u00e7\u00f5es nela contidas ou\ntomar qualquer a\u00e7\u00e3o baseada nessas informa\u00e7\u00f5es. Caso esta mensagem tenha\nsido recebida por engano, por favor avise imediatamente o remetente,\nrespondendo o e-mail e em seguida elimine-a do seu sistema. Agradecemos sua\ncoopera\u00e7\u00e3o. This message, including any attachments, may contain\nconfidential and/or privileged information. If you are not the addressee or\nauthorized to receive this for the addressee, you must not use, copy,\ndisclose or take any action based on this message or any information\nherein. If you have received this message in error, please advise the\nsender immediately by reply e-mail and delete this message. Thank you for\nyour cooperation\n2015-07-31 20:17 GMT-03:00 Tom Jenkinson notifications@github.com:\n\nIf you go to the page with the player, then go to \"about:debug\" in the\naddress bar with any luck it might bring up a console.\nIf it does refresh the page and see if any errors get logged.\n\nOn 31 Jul 2015, at 23:40, ferval notifications@github.com wrote:\nHi I'm trying to use clappr with ionic but on my Nexus 4 is not working.\nWhen I run the app in the desktop browser I don't have any problem. Any\nidea about what I should try?\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/clappr/clappr/issues/328#issuecomment-126833385.\n. The link is showing a Laravel error\n[image: Imagem inline 1]\n\nFernando Valentini\ndiretor\n(34) 8852-5821 <03488525821>\nfernando@enesolucoes.com.br\nEsta mensagem, incluindo seus anexos, pode conter informa\u00e7\u00f5es confidenciais\ne/ou privilegiadas. Se voc\u00ea n\u00e3o for a pessoa autorizada a receber esta\nmensagem, n\u00e3o pode usar, copiar ou divulgar as informa\u00e7\u00f5es nela contidas ou\ntomar qualquer a\u00e7\u00e3o baseada nessas informa\u00e7\u00f5es. Caso esta mensagem tenha\nsido recebida por engano, por favor avise imediatamente o remetente,\nrespondendo o e-mail e em seguida elimine-a do seu sistema. Agradecemos sua\ncoopera\u00e7\u00e3o. This message, including any attachments, may contain\nconfidential and/or privileged information. If you are not the addressee or\nauthorized to receive this for the addressee, you must not use, copy,\ndisclose or take any action based on this message or any information\nherein. If you have received this message in error, please advise the\nsender immediately by reply e-mail and delete this message. Thank you for\nyour cooperation\n2015-11-06 6:43 GMT-02:00 seamug notifications@github.com:\n\nHi\nWe still having issue playing video on any mobile on Safari and Chrome.\nIts fine on the desktop. Check this out\nhttp://joompe.netpay.io/watch/Travel/bb7657dd-4587-4e76-9c71-c6a09c648baa.\nAny leads?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/clappr/clappr/issues/328#issuecomment-154345513.\n. Leandro here is the image:\nhttps://drive.google.com/file/d/0B5wdyuN5l4qPajNJQkZCeXpqeS1uSHF1MkVzSFh1aUhRR1Bn/view?usp=sharing\n\nThe problem that I'm facing is to add clappr in an ionic app.\nFernando Valentini\ndiretor\n(34) 8852-5821 <03488525821>\nfernando@enesolucoes.com.br\nEsta mensagem, incluindo seus anexos, pode conter informa\u00e7\u00f5es confidenciais\ne/ou privilegiadas. Se voc\u00ea n\u00e3o for a pessoa autorizada a receber esta\nmensagem, n\u00e3o pode usar, copiar ou divulgar as informa\u00e7\u00f5es nela contidas ou\ntomar qualquer a\u00e7\u00e3o baseada nessas informa\u00e7\u00f5es. Caso esta mensagem tenha\nsido recebida por engano, por favor avise imediatamente o remetente,\nrespondendo o e-mail e em seguida elimine-a do seu sistema. Agradecemos sua\ncoopera\u00e7\u00e3o. This message, including any attachments, may contain\nconfidential and/or privileged information. If you are not the addressee or\nauthorized to receive this for the addressee, you must not use, copy,\ndisclose or take any action based on this message or any information\nherein. If you have received this message in error, please advise the\nsender immediately by reply e-mail and delete this message. Thank you for\nyour cooperation\n2015-11-07 19:25 GMT-02:00 Leandro Moreira notifications@github.com:\n\n@ferval https://github.com/ferval I can't see any info or image.\n@seamug https://github.com/seamug can you provide the ios/android (in\nwhich browser) version and what issue are you facing?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/clappr/clappr/issues/328#issuecomment-154753003.\n. \n",
    "seamug": "Hi\nWe still having issue playing video on both iOS and android and  on Safari and Chrome. Its fine on the desktop. Check this out http://joompe.netpay.io/watch/Travel/bb7657dd-4587-4e76-9c71-c6a09c648baa. Any leads?\n. ",
    "henriklundgren": "Sorry, found core.mediaControl.unbindKeyEvents();\n. ",
    "vitorbaptista": "Hey @flavioribeiro! Looks like you've finished this already, right?\n. This seems to be done as well?\n. ",
    "lewiscowper": "So I had merge conflicts with the minified version in the dist directory, but I've removed my merge to master from the PR, so you can see that there are no merge conflicts now.\n. ",
    "bikegriffith": "+1\n. Presumably you could use the <video playbackRate=\"2.0\" ... property for the html5_video playback (and by extension the hls.js as well), but do you have any idea how it would be accomplished for the flash playback?\n. Here's a first pass; I welcome any feedback.\nhttps://github.com/bikegriffith/clappr-playback-rate-plugin\n. Same problems here. Tried Edge on XBox One and wasn't able to kick a live video back into DVR mode, even using manual seek calls\n. Has anyone had any luck confirming/reproducing this? We've seen a recent upswing in reports of playback issues on LG devices using our legacy video.js player.  Curious how widespread this is and if it's possible that LG did something to break HLS playback.\n. FWIW, I have a pattern emerging right now where the host app is React. I tuck the Clappr player inside a React component and use the shouldComponentUpdate: () => false trick.  Then, I have some custom Clappr plugins that end up using React/ReactDOM to do the rendering.\nIt's a little confusing and roundabout, but I'm starting to like where it's going.  If anyone is interested, let me know and I'll throw up a gist or sample repo.\n. @oyeanuj @framerate @ggarnier I wrote up a few notes on using Clappr with React if you'd like to give it a read ... let me know if this is useful. https://medium.com/@bikegriffith/using-clappr-with-reactjs-14a338e3451f\n. @tjenkinson Do you know how to manually specify the playback?  Adding playback: Clappr.HTML5Audio doesn't appear to be working.   I also couldn't hack the player.core.playerInfo.playbackPlugins to just have HTML5Audio.  It just keeps wanting to use the video hls player regardless of what I do.\n. @leandromoreira Yeah, this is tricky.  I wonder if just using an option like I had in https://github.com/bikegriffith/clappr/commit/0258ed50a02731287127c7d216daff74d3f4ff71 is good enough ... it puts the separation of concerns in roughly the same spot (user needs to inform player instance what to expect). \n. @leandromoreira I like that idea! This is feeling pretty good to me...\n. @leandromoreira rebased/squashed everything and updated README.md.  let me know if this looks OK or if you want anything else changed.  Thanks!\n. @mattwa1sh It's player.core.getCurrentPlayback()._hls rather than player.core.getCurrentPlayback().hls. @mattwa1sh Yes, you can do that, but it's a little tricky.  You have to monitor hlsLevelLoaded and wait for the 1st firing of that event (2nd mutates start to be startPTS) and then keep track of the level fragments.  Then, if you know video.currentTime, you can loop through each fragment to find the one containing currentTime (based on start+duration) and compute the currentTime - start to get the offset.. And of course remember that it only works for hls.js playback (e.g. not native video in safari). @leandromoreira Certainly! However, you might want to revert that commit because I committed with a broken test.  I can undo the test entirely or hack away at it more to get it working.\n. I updated my original source branch with a new commit to fix that test.\n. It looks like if you wait for the playback to stop, it won't raise the exception, but unfortunately, I don't have that luxury because I need to destroy the player immediately.\nconsole.log('Attempting to destroy player...');\nplayer.stop();\nplayer.core.getCurrentPlayback().once('playback:stop', function() {\n  player.destroy();\n});\n. Thank you! I hadn't gone that far down the rabbit hole yet.\nBefore I build a bunch on top of this, any ideas how likely the events system is to stay as-is for some time?  There seem to be a few quirks (top-level events on player vs subscribing on the playback directly, using options events.onReady vs ready ...  If it's on someone's radar to change, I'd like to know.  Otherwise, I might submit a pull request with some documentation after I more fully grok it.\n. Shutting this down.  Thanks for all the help!\n. The problem occurs when the MediaControl tries to render and calls this.$el.html(this.template({ settings: this.settings })); but this.$el is undefined.  \nTrying to step through this in the IE10 debugger, it looks like the chained super calls in the constructor of MediaControl, UIObject, BaseObject, ... aren't being properly called.\nSee https://phabricator.babeljs.io/T3041: Parent constructor calls not working for IE <= 10\n. This looked promising: https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-proto-to-assign\nBut unfortunately, it doesn't seem to be helping locally for me.  Even with that, I still get the same error.  The MediaControl constructor isn't delegating to its parent classes to create the element.\n. Just submitted a PR to at least appease WAVE with some simple aria-labels\n. @leandromoreira Removed.\n. Nevermind; I see you already did this.\n. Don't merge this yet.  It's still not completely working.\n. Thanks for the feedback (that was me just being paranoid about truthiness).  Fixed to be more readable.\n. I've struggled with this with my React app as well.  2 things come to mind:\n1. Check your console to make sure there are no cross-origin errors for the font face\n2. You may want to hack around and make sure the Player icon font is added to your  manually ... when you tear down the DOM nodes for the player, it seemed to confuse it\n```\n// By default, Clappr injects the font into a style tag inside the MediaControl\n// and Poster plugins, but these elements getting created/destroyed can cause the\n// typeface to disappear.  We'll just load it into the  and be done.\nimport { MediaControl } from 'clappr';\nexport function ensurePlayerFontLoaded(baseUrl) {\n  try {\n    var media = new MediaControl({\n      baseUrl: baseUrl\n    });\n    var style = media.stylesheet;\n    appendStyleTagIfNotAlreadyInHead(style[0]);\n    media.destroy();\n  } catch(e) {\n    console.error('Unable to load Player font:', e);\n    console.error(e.stack);\n  }\n}\nfunction appendStyleTagIfNotAlreadyInHead(style) {\n  var c = style.className; //should be \"clappr-style\"\n  if (document.querySelectorAll(head .${c}).length) {\n    return;\n  } else {\n    document.getElementsByTagName('head')[0].appendChild(style);\n  }\n}\n```\n. @towerz would love to know if that helps with the total minified bundle download size ... that's one of our current concerns\n. @towerz it wasn't really that big of a deal ... I mentioned it actually here https://github.com/clappr/clappr/issues/898 as just a workaround I was doing.  I guess I just need to disable my workaround :)\nI look forward to the future changes!\nClosing this down...\n. @leandromoreira @towerz Any idea when you'll release a new version with this fix?  Thanks for all you do!\n. As I spoke, my Firefox updated itself to 45.0.2 and the issue is now fixed.\n. We're noticing other issues with hls.js relying on the m3u8 for segment times. Perhaps it's worth taking it up there to consider using the .ts timestamps rather than m3u8.  It's worth noting however that the HLS spec does suggest the m3u8 timestamps on the EXTINF should be accurate.\n. @kolpax you might check the timing of the audio and video streams separately - that's the source of discrepancy for us (the PTS/DTS value are independently timed within a segment and the EXTINF can only report 1).\n. This was introduced in version 0.2.60 via https://github.com/clappr/clappr/pull/1085\n. @tjenkinson You da man! Works great.  Thank you!\n. Per my comment in the issue, this solves the original problem. Tested on an iPad Air and iPad 2 with iOS 9.3\n. hls.js cannot work on iOS because it does not support MSE.  Your only option for hls playback on the web in iOS right now is native <video>.. If you do require altering m3u8s on the fly, you might have to not play the video at all on iOS web browser ... instead build a custom native app and direct user to open that app when on iOS.  You're going to be very limited in what's possible because iOS Safari does not (and has no immediate plan) to support either MSE or ServiceWorkers.. I'm assuming this should be a \"wontfix\" because it's due to the non-standard user agent in WKWebView (which technically could be overridden to work around the issue).  The only real option would be to find some better way of detecting the volume change capability without resorting to user agent sniffing.  But was curious if anyone else had thoughts.. Default WKWebView user-agent is something like {AppName}/73 CFNetwork/808 Darwin/16.0.0.  It can be overridden, however, by the app. I don't think this is worth going down a regex change for Safari detection.  Closing.. @andrefilipegsilva I'd encourage you to review the hls.js config options very carefully.  maxBufferLength/maxBufferSize are more of suggestions than real limits.  You can use maxMaxBufferLength if necessary to cap.\nYou might also try to limit the resolution/bitrate of each by specifying the currentLevel of the hls.js playback if each rendered stream in your grid is smaller (capLevelToPlayerSize is a more algorithmic approach to this same thing).\nIn reality though, 1.5GB is (sadly) pretty reasonable to play back 9 streams at the same time in Chrome.  Did you think about (a) using Edge to play back hls natively or (b) increasing the memory on the computer?. @andrefilipegsilva You need to nest hlsjsConfig inside a playback dictionary, e.g.:\nself.player = new Clappr.Player({\n            source: self.hlsAddress(),\n            poster: 'http://clappr.io/poster.png',\n            mute: true,\n            width: '100%',\n            height: '100%',\n            disableKeyboardShortcuts: true,\n            hideVolumeBar: true,\n            playback: {\n                hlsjsConfig: {\n                    maxBufferLength: 5\n                }\n            }\n. Shutting this down.  The implementation in this PR didn't really work on Android.  Not sure how to easily bend what we have in our fork to work here.. Noticed this as well. Would be curious if anyone has a workaround or thoughts on the root cause.. While you're in here, might be good to clean up the english here:\nhttps://github.com/clappr/clappr/pull/1629/files#diff-60ed5c9c4e5f3456d3cff75bbad73352R40\nIt would be better to say \"Could not play video.\", as reproducing a video doesn't make much sense in US English.. No obvious errors or warnings.\nIf I go to console and add, $('video').attr('controls', 'controls'), you can see the native browser CC button behind the Clappr media controls ... and clicking on that native CC control button will actually show captions on video\n\n. Closing this to instead report as hls.js bug: https://github.com/video-dev/hls.js/issues/1673. With the built-in plugin, you can only change a few things with CSS (namely colors), but even for that you'll have to reach into the ::cues shadow DOM because it simply uses the browser's native <track> element rendering.  If you're trying to change position/layout of the captions, you need to go down the route of building your own plugin that renders the cues explicitly based on hls.js track events.\nSpecifically, try playing with styles like this and you'll quickly find the browser limitations:\n::cue {\n  color: red;\n  background: green;\n  border: 1px solid blue;\n}\n::-webkit-media-text-track-display {\n  border: 1px solid aqua;\n}\n::-webkit-media-text-track-container {\n  border: 1px solid yellow;\n}. You need to register it as a core plugin now:\nDon't do this anymore in v0.3,\nlet player = new Clappr.Player({\n    source: \"http://your.video/here.mp4\",\n    mediacontrol: { external: MyMediaControl }\n  });\nInstead, do this:\nlet player = new Clappr.Player({\n    source: \"http://your.video/here.mp4\",\n    plugins: { core: [MyMediaControl] }\n  });. This isn't reliably working for me because I can't force HTML5Audio playback for a HLS audio-only stream. My last commit (manually specifying poster auto-hide behavior in options) worked fine for my use case, although this would be more elegant.\n. @leandromoreira It's never undefined ... it's explicitly initialized to false.\n. How does this affect the current triggering of Events.PLAYBACK_ERROR?  (I don't see when we're explicitly triggering it presently, but I know I've seen it before).\n. CORE_FULLSCREEN doesn't fire on iOS when you're using the native player controls to dismiss out of fullscreen.  This is the only way I could find to let it work.. FWIW, I didn't actually change any of this.  I just made the if block return above to remove a level of indentation. . ",
    "chakree30584": "how can I change the playback speed, or any plugin available\nThanks\n. I've use @bikegriffith's plugin and everything is working great.\nCheers.\n.  0.2.31 seem to make  autoplay not working for me too.\n. ",
    "holygekko": "Fantastic! Thanks!\n. ",
    "stjernstrom": "Also this would make it possible to server assets from a secure https server\n. Great work @flavioribeiro \nThis updates fixes the problem. I have tested two different android phones and a tablet and both LIVE and VOD and both works as expected now! \n. Awesome work!\nCheers!\n. This fix almost fixed issue #360 the progressbar/seek is now working on android, but a VOD is still labeled as LIVE.\n. Which browser are you using? I think it's only Chrome on android who's handling HLS, I would not rely on the stock Browser for Android and even Chrome have problems on older phones. To summarize, HLS on android is a mess. \nYou can try your phones on this page to see if they work (without clappr) http://www.jwplayer.com/html5/hls/\n. You have a sample page I can test? I've a Sony Z3 and it's working with clappr \n. This jsfiddle work in Safari (OS X) and Chrome on my Xperia Android. First time In Chrome (osx) i got a \"Cross-Origin Resource Sharing policy\" error and after that i get the same error as you\nCan it be that flash fallback need some cross origin policies to work?\n. ",
    "osk": "OK, I've sent you an example\n. I noticed the possibility of changing colors, but I want to rearrange the elements your screenshot isn't far off what I'm aiming for :-)\nBy messing with the CSS and overriding the default styles I'm able to get very close to what I want, but isn't that preferred? Is creating a special plugin the way to go? Seems a bit much for skinning\n. ",
    "guilhermebruzzi": "@flavioribeiro Hi Flavio, i removed the commit with the files of dist and added another commit with my name on CONTRIBUTORS.\n. ",
    "stale[bot]": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. ",
    "btecu": "I'm aware of chromeless, however, the volume and full screen options are very important.\n. @thiagopnts thanks, that works for me.\n@flavioribeiro I feature could be nicer so if there're no plans for it, you can close the issue.\n. ",
    "danielfm": "@flavioribeiro I did a few rounds of tests using Chrome and the network throttling simulator and this new SWF doesn't seem to switch to lower bitrates when the network quality gets worse. This doesn't happen with the previous SWF.\n. ",
    "hatsch": "i just ran into the same issue as @irongomme \nafter stopping, playing is not working anymore.\n. i also stumbled around that issue with SSL enabled.\nwouldn't it be the best way to just add it to the dist/assets directory and serve the font from the local webserver. this way the webfont is also not acting as a tracker for google.\nthere is already another font in the assets directory:  Player-Regular.ttf\nLicense wise it should be fine, as google says \"The fonts in the directory are all released under open source licenses; you can use them on any non-commercial or commercial project.\"\n. ",
    "brocaar": "Yes, I'm still able to reproduce it, but only when playing a HLS live stream.\n. ",
    "facecast": "Same problem i have.\n. ",
    "joaopaulovieira": "We need to check the actual test coverage and set the desired percentage.. I don't know if this is still a change that should be made because of the time that has passed, but doing today would be a breaking change and the destroy method would have to be keeped for plugins that overwrite it.\nIt causes a little more confusion  :sweat_smile:\nBut that change could go into a major version, what you think?. I did some tests and could not reproduce the behavior.\nI Tested on:\nAndroid: 7.1.1\nMedia: http://clappr.io/highline.mp4 and http://184.72.239.149/vod/smil:BigBuckBunny.smil/playlist.m3u8\nEnvironment: local and http://clappr.io/demo/\nCould you say the Android version and the medias that you used to reproduce this problem, @irongomme ?. Hi! I created clappr-context-menu-plugin with: \n Default itens:\n    * Copy URL;\n    * Copy URL with exact time;\n    * Loop;\n    * Clappr version;\n The possibility of add other itens and override the elements default style;\nFeel free to suggest and contribute! (:. Can we close this one?. Any news, @framerate ?. I see :confused:\nI Think we can close this issue ? @towerz, @leandromoreira ?. I tested on Firefox 59 and could not reproduce.\n@me-vlad is this still happening?. If you refer to this page https://github.com/clappr/clappr/blob/master/public/index.html, it's already possible to pass the URL via querystring.\n\nGo to http://clappr.io/demo/ with the poster param on the URL: http://clappr.io/demo/?src=http://clappr.io/highline.mp4&poster=http://clappr.io/poster.png\nRun the code below on editor:\n```javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\n\nvar player = new Clappr.Player({\n  source: urlParams.src,\n  poster: urlParams.poster,\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\n``. Hi @SYugel , i tested with the file you sent (thanks for that! /\u00f5/) and could not reproduce the behavior. The problem still persist?. I agree with you, @kslimani !\nI will submit a pull request for that.. @leandromoreira, I think the problem is when_onTimeUpdate()` try to check if those times (current and recieved) are the same.\nthis._lastTimeUpdate is set to null on constructor and consequently, isSame will be null too.\nhttps://github.com/clappr/clappr/blob/553e4a2793b44486d3b1d13856ab5cb994cb9835/src/playbacks/hls/hls.js#L109-L113\nhttps://github.com/clappr/clappr/blob/553e4a2793b44486d3b1d13856ab5cb994cb9835/src/playbacks/hls/hls.js#L294-L301\nthis.getCurrentTime() and  this.getDuration() return 0 at the the first moment.\nIf _lastTimeUpdate is a object with the initial parameters of the same value, the desired behavior would be obtained.\nLike: this._lastTimeUpdate = { current: 0, total: 0 }\nWhat you think?. Yes, I lose the focus of the issue investigating what happened :see_no_evil:\nI tested the approach of only firing the timeupdate after a play and the same problem occurs at the moment of comparing the times.\nYou agree with the solution above or have another approach to suggest?. @towerz , what you think?. Can we close this issue @leandromoreira, @towerz ?. It's relate to this issue, @leandromoreira ? https://github.com/video-dev/hls.js/issues/1068\nIf so, seems that has already been resolved in version 0.7.5. https://github.com/madrobby/zepto/issues/1238. In 0.3.x:\nFor the autoplay option on mobile, it will only be allowed if the video tag is reused or the consent flag is set. Otherwise, the autoplay option will be disabled and the console will show a warning about why the functionality has not been enabled.. I created a pull request that apparently solves this problem.\nPlease, test on Iphone! I don't have one available at the moment :sweat_smile:\nI tested on:\nChrome Version 64.0.3282.167 with user agent Nexus 7;\nPhone with Android 7.1.1;\nSafari Version 11.0.2 with user agent IOS 11.0 - IPhone;. Resolved in #1587 . Resolved in #1587 . Yes! What a failure!\nI will correct it now :see_no_evil:. The resolution of issue #1607 will solve most of inconsistent states.. Yeah! I was looking for some similar test, but in the events_spec.js :sweat_smile:. Also have the https://github.com/ai/size-limit too.\nI've never used it, but it looks ok.. You need the correct references for each event you listening on bindEvents, like:\njavascript\nbindEvents: function() {\n    this.listenTo(this.container, Clappr.Events.CONTAINER_TIMEUPDATE, this.containerTimeUpdate);\n    this.listenTo(this.container.playback, Clappr.Events.PLAYBACK_TIMEUPDATE, this.playbackTimeUpdate);\n...\n},\nFor listen MEDIACONTROL_MOUSEMOVE_SEEKBAR, you need the media control reference for listenTo and this is not accessible on container area, only in core.\nyou can see an example in the seek_time plugin.\nDoing this, i think it will work the way you expect it.. You can read more about the project architecture on the wiki or if you have any specific questions, send to Clappr channel at video-dev Slack.. For reasons of backward compatibility, it would be better to leave both methods at this time and warn they will be removed in a next version (0.3.0). My fault, I forgot that. \ud83d\ude05\nTalking with @vagnervjs  and @jhonatangomes , we decided to remove these methods(setVolume/getVolume) from player.js and expose on media_control.js the volume get/set operations via external interface, keeping the method assignature for reasons of backward compatibility.. Of course! I made the change in this commit de2d52d517f3cf9501564aa5f3a18225172dd447. ",
    "aguxtremo": "no, it's not shoucast.\nShoucast is http://www.radiolatina.info:9776/;/stream.mp3 , and work very good!\n. You can use http://5133.live.streamtheworld.com/LOS40_ARGENTINA_SC?.aac or http://5133.live.streamtheworld.com/LOS40_ARGENTINA_SC?.mp3 but neither works\n. ",
    "wicherdt": "Seems OK\n. \"maxBufferLength\" working OK. Thank you.\n. I tested only HLS VOD (multiple stream with aes128 encrypt)\n. You must use latest version from github with commits.\n. I checked this example:\nhttp://pastebin.com/WLNXsPzu\nAnd horizontal working semms OK.\nBut vertical!\nif I add parameter:\nheight: \"100%\",\nPlayer dont show on page.\nIn Firefox firebug I see  #player  height is 0.\nHow to use percentage width and height with bootstrap responsive grid?\nI am sure I used clappr with commit ea33aa1\n. Thank you for your help.\nExample below work for me OK.\nBut I used function resize not resizable.\nBootstrap 3.3.4 Clappr 0.0.114 jQuery 1.11.2 responsive example:\n```\n\n\n\n\n\n\n\n$(function () {\n    $(\"#player\").resize({\n        aspectRatio: 16 / 9,\n        maxHeight: 720,\n        maxWidth: 1280,\n        minHeight: 180,\n        minWidth: 320\n    });\n    var player = new Clappr.Player({\n        source: 'http://clappr.io/highline.mp4',\n        baseUrl: 'http://cdn.clappr.io/latest',\n        poster: 'http://clappr.io/poster.png',\n        parentId: \"#player\",\n        height: \"100%\",\n        width: \"100%\"\n    });\n});\n\n\n\n\n```\n. Adobe flash player installed?\n. On my PC with windows 7 and firefox with flash seem all OK\n. Sorry. Android 4.4.2 OK\n. YES it work.\nPlease close issue.. ",
    "manuelchiarlo": "I'm using the CDN Clappr build, but the issue is still present.\nThis is my parameter:\nvar player = new Clappr.Player({source: \"http://media.dlz.ovh/hls/salute/salute-puntata.m3u8\", parentId: \"#player\", autoPlay: true, maxBufferLength:5});\ntested on firefox and chrome for mac.\nthanks\n. ",
    "chovy": "I'm not using bootstrap and jquery doesn't have a resizable method.\nIs there anyway to get a responsive player?\n. @leandromoreira I assume i would need to call player.resize() from window resize event....is there anyway to keep the aspect ratio though? I want to take up all of the viewport but keep the aspect ratio 16x9\n. Uncaught TypeError: player.resize is not a function\ngetting an error that player.resize doesn't exist.\n. nm, i had called player before it was defined.\n. Thanks. It would be nice if we could just have an option like player({\nresponsive: true })\nOn Fri, Sep 16, 2016 at 4:22 AM, paluh notifications@github.com wrote:\n\n@chovy https://github.com/chovy I want to add a really small \"patch\" to\n@me-vlad https://github.com/me-vlad solution (anyway thanks for this\nsnippet @me-vlad https://github.com/me-vlad!). It's better to not use\nwindow.onresize directly (in case you want to have multpile players on\none page):\nSo instead of:\nwindow.onresize = resizePlayer;\nit's better to do this (as suggested here\nhttp://stackoverflow.com/questions/13651274/how-can-i-attach-a-window-resize-event-listener-in-javascript%5D\n):\nvar addEventListener = (function() {\n     if(document.addEventListener) {\n       return function(element, event, handler) {\n         element.addEventListener(event, handler, false);\n       };\n     } else {\n       return function(element, event, handler) {\n           element.attachEvent('on' + event, handler);\n       };\n     }\n   }());\naddEventListener(window, 'resize', resizePlayer);\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/clappr/clappr/issues/402#issuecomment-247577313, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AABq9RaU3AF6trAxJ6fAJTSZNuTzITCjks5qqnwGgaJpZM4DzrwL\n.\n\n\nAnthony\n. @paluh how does using addEventListener vs. window.onresize change anything to do with not firing on window resize?\n. Does this work with .ts embedded captions?\n. Not sure, must be an Aurelia thing. I got it to load properly by doing this:\njspm i -S npm:clappr and in my viewmodel I do import 'clappr' and then I can use the Clappr object.\n. yes, that's exactly what I mean. Its a nice UX to have the poster of a frame of the live stream instead of a made up banner or nothing.\n. How do I use this flag?\n. I think your stream is invalid: http://live.qingshu.me/live/a/fengmu.m3u8\nDoesn't play for me in Safari either.\n. \"clappr\": \"npm:clappr@^0.1.4\",\nI'm happy to upgrade. just not sure how with jspm.\n. Ok, i figured out how to upgrade. but now I get this: Uncaught ReferenceError: Clappr is not defined\n. Now I'm getting this. I have clappr \"properly\" loaded...\nI'm using Aurelia which uses System.js/jspm to load. I am just typing import Clappr from 'clappr'; -- but I have no idea how to tell the library where to find the swf file.\nGET http://localhost:3000/3e43a5d764f841e7e78896de82cd6c50.ttf (anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819attached @ aurelia-templating.js:1190attached @ aurelia-templating.js:824add @ aurelia-templating.js:1065swap @ aurelia-templating.js:1174swap @ router-view.js:61(anonymous function) @ aurelia-router.js:914(anonymous function) @ aurelia-router.js:913run @ es6.promise.js:91(anonymous function) @ es6.promise.js:105module.exports @ $.invoke.js:6queue.(anonymous function) @ $.task.js:40run @ $.task.js:27listner @ $.task.js:31\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)(anonymous function) @ clappr.min.js:1176E @ clappr.min.js:567E @ clappr.min.js:570E @ clappr.min.js:570(anonymous function) @ clappr.min.js:1175(anonymous function) @ clappr.min.js:1170(anonymous function) @ clappr.min.js:801w.fn.each @ clappr.min.js:800Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1167Y.forEach.w.fn.(anonymous function) @ clappr.min.js:1181o.value @ clappr.min.js:4050(anonymous function) @ clappr.min.js:3917(anonymous function) @ clappr.min.js:1645f @ clappr.min.js:1567t.Callbacks.d.add @ clappr.min.js:1582(anonymous function) @ clappr.min.js:1644w.each @ clappr.min.js:744(anonymous function) @ clappr.min.js:1642e @ clappr.min.js:1670a.then @ clappr.min.js:1641o.value @ clappr.min.js:3916e @ clappr.min.js:3887o.value @ clappr.min.js:4184o.value @ clappr.min.js:4881o.value @ clappr.min.js:4876e @ clappr.min.js:4870getPlayer @ video-player.js:22attached @ video-player.js:16attached @ aurelia-templating.js:2282attached @ aurelia-templating.js:819add @ aurelia-templating.js:1065processArrayItems @ repeat.js:159processItems @ repeat.js:133itemsChanged @ repeat.js:117BindableProperty.createObserver.selfSubscriber @ aurelia-templating.js:2415call @ aurelia-templating.js:2565flushMicroTaskQueue @ aurelia-task-queue.js:107(anonymous function) @ aurelia-task-queue.js:48\nclappr.min.js:1176 GET http://localhost:3000/26c91a360cb2551841d5eb2aff058449.swf?inline=1 404 (Not Found)```\n. it seems to work if i move .ttf and .swf into the root folder, but I don't know about these hashed urls if they will change or not. It would be nice to just provide a relative path to load the files from in my case it would be /jspm_packages/github/clappr@x.x.x/\n. setting baseUrl pointing to http://cdn.clappr.io/<version> works. \n. I'm on 0.2.x now.\nI'm in chrome and here's a sample stream. All my streams have this problem.\nhttp://pac12hd2-lh.akamaihd.net/i/p12netw_delivery@132840/master.m3u8\n. i'm using version 0.2.10\n. I don't control the stream I'm trying play with clappr and I'm getting this error about Access-Control-Allow-Origin header missing. Is there any work around?\n. Is there a library js file I need to load for this to work?\nAlso, if its using flash does that mean it won't work on iPhone/iPad?\n. > @chovy There's no way to circumvent CORS in the browser. You have to fix that directly in your server.\nI'm not sure what you mean \"fix on my server\" -- I don't have access to the server hosting the stream and the key file.\n. Turns out this does actually work \ud83d\udc4d \nis there a list of methods available off the player object? I couldn't find any.\n. can you give me an example?. Thank you!. ",
    "me-vlad": "@chovy you can do something like\n``` javascript\n  function resizePlayer(){\n    var aspectRatio = 9/16,\n    newWidth = document.getElementById('yourplayer').parentElement.offsetWidth,\n    newHeight = 2 * Math.round(newWidth * aspectRatio/2);\n    player.resize({width: newWidth, height: newHeight});\n  }\nresizePlayer();\n  window.onresize = resizePlayer; \n. html\n<!DOCTYPE html>\n\n\n\n\n\n\nClappr Player\n\n\n\n\n\n\nwindow.onload = function() {</p>\n<p>var player = new Clappr.Player({\n    parentId: '#player-wrapper',\n    source: 'http://clappr.io/highline.mp4'\n  });</p>\n<p>function resizePlayer(){\n    var aspectRatio = 9/16,\n    newWidth = document.getElementById('player-wrapper').parentElement.offsetWidth,\n    newHeight = 2 * Math.round(newWidth * aspectRatio/2);\n    player.resize({width: newWidth, height: newHeight});\n  }</p>\n<p>resizePlayer();\n  window.onresize = resizePlayer; \n}\n\n\n\n```\n. @leandromoreira yes, checked again with firefox 43 on linux and windows 10 - same warnings on  http://cdn.clappr.io/\n. Firefox 59.0.1 - no warnings . @towerz I see 2 reasons to change target player\n1 latest supported NPAPI flash plugin version for linux systems is 11.2.202.548\nhttp://www.adobe.com/software/flash/about/\n2 With default settings in flex_sdk_4.6 clappr build fails with error\n```\nFLEXPATH=/home/vlad/Work/flex_sdk_4.6 ./build_clappr.sh \nCompiling bin/release/HLSPlayer.swf\nLoading configuration file /home/vlad/Work/flex_sdk_4.6/frameworks/flex-config.xml\nAdobe Flex Compiler (mxmlc)\nVersion 4.6.0 build 23201\nCopyright (c) 2004-2011 Adobe Systems, Inc. All rights reserved.\n/home/vlad/Work/flex_sdk_4.6/frameworks/flex-config.xml(56): Error: unable to open 'libs/player/14.0/playerglobal.swc'\n  </external-library-path>\n\nCompiling bin/debug/HLSPlayer.swf\nLoading configuration file /home/vlad/Work/flex_sdk_4.6/frameworks/flex-config.xml\nAdobe Flex Compiler (mxmlc)\nVersion 4.6.0 build 23201\nCopyright (c) 2004-2011 Adobe Systems, Inc. All rights reserved.\n/home/vlad/Work/flex_sdk_4.6/frameworks/flex-config.xml(56): Error: unable to open 'libs/player/14.0/playerglobal.swc'\n  </external-library-path>\n\n```\nflex_sdk_4.6/frameworks/libs/player directory listing:\n```\nll -R ~/Work/flex_sdk_4.6/frameworks/libs/player\n/home/vlad/Work/flex_sdk_4.6/frameworks/libs/player:\ntotal 4\ndrwxrwx---. 2 vlad vlad 4096 Nov 10  2011 11.1\n/home/vlad/Work/flex_sdk_4.6/frameworks/libs/player/11.1:\ntotal 332\n-rwxrwx---. 1 vlad vlad 337288 Nov 10  2011 playerglobal.swc\n```\n. about \"full screen stretch\" - I think that @liuyukk26 asked how to go fullscreen programmaticaly for chromeless player or resize player to fit container size (adaptive player size).\n@leandromoreira , correct me if Im wrong\nfullscreen:\njavascript\nvar player = new Clappr.Player({source: \"http://your.video/here.mp4\", parentId: \"#player\"});\nplayer.setFullscreen();\nadaptive resize:\njavascript\nfunction resizePlayer(){\n    var aspectRatio = 9/16,\n        newWidth = document.getElementById('player').parentElement.offsetWidth,\n        newHeight = newWidth * aspectRatio;\n    player.resize({width: newWidth, height: newHeight});\n}\nresizePlayer();\nwindow.onresize = resizePlayer;\n. @towerz just submitted RP https://github.com/clappr/flashls/pull/5\n. HD indicator works with latest clappr on  cdn.clappr.io\n. @cowai can you provide a test stream url?\nLive indicator works with Clappr 0.2.24 + level-selector 0.1.3 in Google Chrome 47.0.2526.80 (64-bit), fedora 23 \n. Option for webkit-playsinline  looks useful\nAlso (not related to this issue) may ne we can add parameter to the video tag that allows AirPlay for older iOS devices\nx-webkit-airplay=\"allow\"\nhttps://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AirPlayGuide/OptingInorOutofAirPlay/OptingInorOutofAirPlay.html\n. @leandromoreira  if no other  fixes required, I'll create PR\n. @leandromoreira sure\nhttps://github.com/clappr/clappr/pull/797\n. ref:https://github.com/clappr/flashls/pull/9\n. I can confirm this issue for hlsjs playback\n. Same issue with dash_shaka_playback \nhttps://github.com/clappr/dash-shaka-playback/issues/2\n. @ibreakstuff93 your clappr version looks very outdated.\nCan you reproduce this issue on recent clappr (f.e. on http://cdn.clappr.io/)?\n. @cowai , @leandromoreira  good idea, I think it will be nice to get recovery option idependent from playback type (hlsjs, flashls, dash, etc)\n. @sc0rp10 chromeless: true\n. @leandromoreira You're welcome :)\n. - @param {String} [options.preload]\n- video will be preloaded according to preload attribute options default: 'metadata'\n. @towerz on cdn.clappr.io player has fixed width and height values\nThis issue related only for Firefox, I cant reproduce it on Chrome, IE, Edge etc.\n. @towerz  may be I missed something but I cant log fullscreen events on cdn.clappr.io adding \njavascript\nplayer.on(Clappr.Events.MEDIACONTROL_FULLSCREEN, function() { console.log(\"FULLSCREEN!\") });\n. @towerz  thanks, it works on firefox, i'll test master build with other browsers\n. ref: https://github.com/clappr/clappr/issues/911\n. @towerz indeed this issue related only for live streams w/o DVR, for DVR enabled streams it worked f.e. with\nhttp://b028.wpc.azureedge.net/80B028/Samples/a38e6323-95e9-4f1f-9b38-75eba91704e4/5f2ce531-d508-49fb-8152-647eba422aec.ism/Manifest(format=m3u8-aapl-v3,audio-only=false).m3u8\nhttps://github.com/clappr/clappr/commit/6fde7d05f79cf6c4f370a391af2af848dc7dc84c fixes this issue, thanks, Bruno   :+1: \n. @towerz  just tested with  a15861a - svg fill color still #010101 \nAlso I think poster plugin needs to be changed for big play button color styling.\n. @towerz tested on https://github.com/clappr/clappr/commit/f45bfe2d196a0c0b2ab42f361470fd26e4b12aa4\nbig play button (poster plugin), fullscreen control and volume control, HD indicator, play/pause - styling fixed\nstop button - #010101 \n. @towerz stop button fixed for me, thanks\n. @juiyout  I think something wrong with your stream\nTry to turn on debug in clappr adding to your player config\nClappr.Log.setLevel(0);\nI see in console lots of messages like \nGET http://104.199.166.147:15922/cameras/56e1aff06b570587043404ef/streams/0/playlist.m3u8 net::ERR_INSUFFICIENT_RESOURCES\nGET http://104.199.166.147:15922/cameras/56e1aff06b570587043404ef/streams/0/playlist.m3u8 net::ERR_INSUFFICIENT_RESOURCES\nGET http://104.199.166.147:15922/cameras/56e1aff06b570587043404ef/streams/0/playlist.m3u8 net::ERR_INSUFFICIENT_RESOURCES\nWhile playing you stream with ffplay I see repeating messages like\nskipping 3 segments ahead, expired from playlists\n. @alouane m.b. you need something like Clappr Level Selector Plugin?\nhttps://github.com/clappr/clappr-level-selector-plugin\n. FlasHLS was updated to 0.4.4.21 before Clappr 0.2.48 was released \nhttps://github.com/clappr/clappr/commit/2ae87904020f885c0fffa5c26fc23e731e9f8979\n. @leandromoreira \nproperty 'call' of undefined error fixed, but the stream not starting with dash-shaka-playback 2.0.6-beta\nSame stream plays with dashjs reference player\nhttp://dashif.org/reference/players/javascript/v2.1.1/samples/dash-if-reference-player/index.html\nBrowser info\nGoogle Chrome 51.0.2704.79 (64-bit) on Fedora 23\n. @leandromoreira  sure , my test stream was in config posted above\nhttp://b028.wpc.azureedge.net/80B028/Samples/a38e6323-95e9-4f1f-9b38-75eba91704e4/5f2ce531-d508-49fb-8152-647eba422aec.ism/Manifest(format=mpd-time-csf).mpd\nsame issue with //storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd\nDebug:\n[debug][dash_shaka_playback] playback:levels:available [Object, Object, Object, Object, Object]\nclappr.js:3129 [debug][an adaptation has happened:] Object {id: 10, active: true, type: \"video\", bandwidth: 343255, language: \"und\"\u2026}\nclappr.js:3129 [debug][dash_shaka_playback] playback:highdefinitionupdate false\nclappr.js:3129 [debug][Container] container:highdefinitionupdate false\nclappr.js:3129 [debug][dash_shaka_playback] playback:bitrate Object {bandwidth: 343255, width: 480, height: 360, level: 10}\nclappr.js:3129 [debug][Container] container:bitrate Object {bandwidth: 343255, width: 480, height: 360, level: 10}\nclappr.js:3129 [debug][dash_shaka_playback] playback:buffering\nclappr.js:3129 [debug][Container] container:state:buffering Container\nclappr.js:3129 [debug][dash_shaka_playback] playback:settingsupdate\nclappr.js:3129 [debug][Container] container:settingsupdate\nclappr.js:3129 [debug][MediaControl] mediacontrol:notplaying\nclappr.js:3129 [debug][MediaControl] mediacontrol:rendered\nclappr.js:3129 [debug][dash_shaka_playback] playback:loadedmetadata Object {duration: 60.022003173828125, data: Event}\nclappr.js:3129 [debug][Container] container:loadedmetadata Object {duration: 60.022003173828125, data: Event}\nclappr.js:3129 [debug][dash_shaka_playback] playback:settingsupdate\nclappr.js:3129 [debug][Container] container:settingsupdate\nclappr.js:3129 [debug][dash_shaka_playback] playback:bufferfull\nclappr.js:3129 [debug][Container] container:state:bufferfull Container\n. @leandromoreira  strange, but stream not starts for me with latest version of the plugin downloaded from \nhttps://raw.githubusercontent.com/clappr/dash-shaka-playback/master/dash-shaka-playback.js\nsame issue with my own build\nhttp://stream.studio360.tv/player/clappr-dev/dash-shaka-playback.js\nAlso tested on Chromium 51.0.2704.63  Fedora 23 (64-bit) \n\n\n. @leandromoreira  your sample works with autoPlay: true \nafter changing it to false - playback not starts after clicking on the play button.\nAlso if I use autoPlay: true after stopping the stream player starts buffering (screenshot in attachment)\n\nDebug log:\n[debug][dash_shaka_playback] playback:stop dash_shaka_playback\nclappr.js:3129 [debug][Container] container:stop\nclappr.js:3129 [debug][Container] container:mediacontrol:disable\nclappr.js:3129 [debug][Container] container:stats:report Object {startupTime: 2, rebuffers: 13, rebufferingTime: 5883, watchingTime: 18257, bandwidth: 5000000\u2026}\nclappr.js:3129 [debug][Player] stop 1\nclappr.js:3129 [debug][dash_shaka_playback] playback:stats:add Object {width: 1920, height: 1080, streamBandwidth: 5064000, decodedFrames: 581, droppedFrames: 5\u2026}\nclappr.js:3129 [debug][dash_shaka_playback] playback:buffering dash_shaka_playback\nclappr.js:3129 [debug][Container] container:state:buffering Container \n. @widestreamio  please try to disable low-latency stream option in your wowza app config.\n. ",
    "agopshi": "For what it's worth, here's a CSS-only solution to making the player responsive:\n```\n/ Fix the player container to take up 100% width and to calculate its height based on its children. /\n[data-player] {\n    position: relative;\n    width: 100%;\n    height: auto;\n    margin: 0;  \n}\n/ Fix the video container to take up 100% width and to calculate its height based on its children. /\n[data-player] .container[data-container] {\n    width: 100%;\n    height: auto;\n    position: relative;\n}\n/ Fix the media-control element to take up the entire size of the player. /\n[data-player] .media-control[data-media-control] {\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n}\n/ Fix the video element to take up 100% width and to calculate its height based on its natural aspect ratio. /\n[data-player] video {\n    position: relative;\n    display: block;\n    width: 100%;\n    height: auto;\n}\n```\nIt'll take up 100% width and use its natural aspect ratio (instead of forcing the aspect ratio through styles). When you create the player, just use:\nwidth: '100%',\nheight: 'auto'\n. ",
    "paluh": "@chovy I want to add a really small \"patch\" to @me-vlad solution (anyway thanks for this snippet @me-vlad!). It's better to not use window.onresize directly (in case you want to have multpile players on one page):\nSo instead of:\njavascript\n   window.onresize = resizePlayer;\nit's better to do this (as suggested here):\n``` javascript\n   var addEventListener = (function() {\n     if(document.addEventListener) {\n       return function(element, event, handler) {\n         element.addEventListener(event, handler, false);\n       };\n     } else {\n       return function(element, event, handler) {\n           element.attachEvent('on' + event, handler);\n       };\n     }\n   }());\naddEventListener(window, 'resize', resizePlayer);\n``\n. @chovy Withwindow.onresize(I've tested this on chromium) you are assigning single event handler and overwriting others, so if you have multiple players initializations done with multiplewindow.onresize` assignments only the last one callback is going to be called (here is appropriate answer from an other related question on stackoverflow).\n. Hi,\nBased on @vix-simplex gist I've added this plugin to purescript-clappr which can be easily reusable without any Purescript at all:\nhttps://github.com/paluh/purescript-clappr/blob/master/src/Clappr/Plugins/ReplayOnBuffering.js\nIt has not been yet tested in production but seems to work.\nFeedback appreciated!\nP.S.\nAs a side question I want to ask what is the proper way to output debug messages from Clappr plugins? I mean I want to perform something \"like\" this: clappr.Log.debug(\"My plugin debug message...\"); instead of putting console.log when developing my plugin.... ",
    "FDiskas": "This is done for security reasons. Video won't play on mobile devices. Only after user interaction it's possible to trigger the player play event.\nBut there is still another issue. Then the source of the player is changed the video stops playing. Needs to hit the play button again.\nFor example \"videojs\" - you can change the stream source and video still be auto played. Looks like it's possible to fix.. I have that browser and it works on Fedora 23 + Yandex Browser. The video is flash version\n. bower lodash.result#^3.1.2   ENOTFOUND Package lodash.result not found\nbower lodash.once#^3.0.1     ENOTFOUND Package lodash.once not found\nbower lodash.find#^3.2.1     ENOTFOUND Package lodash.find not found\nbower lodash.uniq#^3.2.2     ENOTFOUND Package lodash.uniq not found\n. If video is ended the folowing events are triggered:\nPLAYER_PAUSE\nPLAYER_ENDED\nPLAYER_TIMEUPDATE\nStrange order. The video ends and how its could be paused? Ok - video ended but how it can still update time?\nHere is some example: Please open the console by pressing F12 https://jsfiddle.net/gt5tkdhb/\n. Please take a look at first link to.\n. No we can't close this. \njs\n$(function () {\n    var player = new Clappr.Player({\n        source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n        parentId: \"#player-wrapper\",\n        //autoPlay: true\n    });\n    player.on(Clappr.Events.PLAYER_ERROR, function(a) { alert('PLAYER_ERROR!', a.error.code) });\n});\nTry this code. Same error. And there is nothing special with this code, but error event is frown.\n. Shure.\n. seekTime I think is more self explainable. Because everywhere is in seconds\n. Its ok to change title. And yes I need this method for all playbacks and flash and html5. The same goes to volume, fullscreen get and set methods.\n. shure\n. What about second parameter true/false for seconds or percentage? This will not brake the users code :/\n. Not easy to do this with tablet - need working and hosted url with example.\n. http://jsbin.com/qolupimaxa/edit?html,js,output\nVideo is very laggy, and shows it as live on tablet. Then trying to exit the full-screen - browser freezes.\nBut no error popup in tablet.\n\n. In playlist header\n```\nEXT-X-PLAYLIST-TYPE:VOD\n```\nAnd at the end of playlist\n```\nEXT-X-ENDLIST\n```\nWitch means that this is not a LIVE stream.\n. :arrows_counterclockwise: so this problem is solved?\n. :eggplant: The video is displaying that there is a Live video not a record. Then I try to unhide the status bar - it pauses the video. Then I press the fullscreen it displays the native video player not a clappr. Then I go back from the fullscreen there is no clappr video at all. Only the white screen of jsbin website.\n. Samsung galaxy s5 - imposible cant enter the fullscreen. By double tap - got blank page\n\n. Thanks. So we need a better documentation.\n. So how to use it? this not works on http://cdn.clappr.io/\njs\nplayer.on(Clappr.Events.CONTAINER_FULLSCREEN, function(a, b) { console.log('CONTAINER_FULLSCREEN!', a, b) });\n. @leandromoreira :+1: \n. Ok - I will ask then for an example. I'm not so advanced as you are.\nI need to disable the controls and enable them on fullscreen. How I should do that?\n. :+1:  thank you\n. http://cdn.clappr.io/ in console try enter player.core.toggleFullscreen() :)\n. Looks like this is reproducible bug #655\n. In my case, I need to turn off controls by default, but turn them back ON in fullscreen mode.\nOther case, is when I change the seek position with API - the controls are displayed (that is wrong)\n. @leandromoreira Thanks for the example. One issue here - if player has option autoPlay:true is set then \njs\nplayer.on(Clappr.Events.PLAYER_PLAY, function(){player.core.mediaControl.disable()})\nthis not works.\n. @569934390 Yes I have the same problem. No way to change the stream url without reloading player - so in mobile the video will be stopped.\n. @leandromoreira yes sure, but there is a issue on this with mobile devises #666\n. Yes I tried that already - this not helps.\nIs there an method to change only stream url without destroying player?\n. Why method player.seek(50) shows the controls bar?\n. This bus exists and on http://cdn.clappr.io/\nI have no public HLS sources so try this one\n//wms.shared.streamshow.it/canale8/canale8/playlist.m3u8\nand\n//stream.flowplayer.org/bauhaus.m3u8\np.s. before you try install https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?utm_source=chrome-app-launcher-info-dialog\nand enable - this will allow cross-domain request.\nHere is a bug screenshot: http://i.imgur.com/lx85yAy.png\nAs you can see the segments still loading from other source \n. If i call player.destroy() ajax requests still requesting.\n. //nasatv-lh.akamaihd.net/i/NASA_101@319270/master.m3u8\n. Is this fix already released?\n. :statue_of_liberty: Oh yeah - now its fixed. Am I right?\n. It could help http://developer.lgappstv.com/TV_HELP/index.jsp?topic=%2Flge.tvsdk.developing.book%2Fhtml%2FDeveloping+Web+App%2FDeveloping+Web+App%2FStreaming+Method.htm\n. The same device http://whatsmybrowser.org/b/HTYERUD\n. videojs are playjing video correctly on this device with the same live stream\n. I know that for security reasons on mobile devices there is no ability to autoplay videos. But the next video could be played without stop. Probably the problem is that on player.load() you destroying the player, but not just updating the source.\n. Any news about that? How to play multiple videos with non stop on mobile devices?\n. This looks like not working. Player is still requesting wrong segments\n. It works on mp4 video files, but not works on HLS or DVR\nExample: http://jsbin.com/zubepotovi/1/edit?html,output\nhttp://jsbin.com/zosopezuno/edit?html,output\n. @leandromoreira  Any example?. :+1: \n. Are we talking about this bug? https://youtu.be/4Kg54ztFTcY\n. OK,\nso I build this from source of your branch with npm install and npm run build\nto many errors. Please merge the master branch first.\nBut if I ignore errors - the problem still exists.\n. But you can merge master branch in to yours branch\n. worse https://youtu.be/640uxazmkDo\n. And for some time I cant click on seek-bar - unresponsive.\n. Private url can't share\n. @tjenkinson looks like almost perfect. https://www.youtube.com/watch?v=m30ln9yAk9Y\n. It could be related https://github.com/thiagopnts/clappr-zepto/issues/3\n. bower lodash.result#^3.1.2   ENOTFOUND Package lodash.result not found\nbower lodash.once#^3.0.1     ENOTFOUND Package lodash.once not found\nbower lodash.find#^3.2.1     ENOTFOUND Package lodash.find not found\nbower lodash.uniq#^3.2.2     ENOTFOUND Package lodash.uniq not found\n. Sorry it duplicate - remove this issue.\n. Cool - but how to change this :/\n. @tjenkinson Yes I need to customize this message but the text will be created on the fly - like entering the username \"Sorry John - your browser can't play this video\" :)\n. Probably related https://github.com/clappr/clappr/issues/668\n. Something wrong with a latest version and LIVE seekbar https://youtu.be/JbOemVHrJh0\n. Now its good.\n. And on http://cdn.clappr.io/ website if I post in console player.mute() in control-bar the volume indicator is not updated, but volume is muted.\n. I do not care. Just ignore all my opened issues :)\n. Just on cdn.clappr.io set the volume to 50 and in console enter player.mute() and then player.unmute() and you will see the difference :P\n. This happens then I seek to unavailable seek position.\n. Because of this bug after loading new player the volume are changed to wrong value.\n. Version 0.2.22 still has this bug. As I can see there is no release yet.\np.s. I'm testing on http://cdn.clappr.io/\n. I see that there is no tests written. :D \nhttps://github.com/clappr/clappr/commit/736138a5f8b01bde61d9bacfc5bc70b0555aaa50\nSo why we returning to the same bug twice?\n. It's not my bussines\n. Browser: http://whatsmybrowser.org/b/HTYERUD\nUser-Agent: Mozilla/5.0 (Linux; U; Android 5.0; en-gb; LG-D855 Build/LRX21R.A1445306351) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/34.0.1847.118 Mobile Safari/537.36\nAndroid: 5.0\n. So its working now?\n. \nWhy you closed the issue? It is still not fixed\n. I will check\n. Yes the problem is still here.\n. :boar: Probably its not possible to make it work. Is this not implemented in my browser?\nThere is some great packages like: https://github.com/gpac/mp4box.js/ and https://github.com/mbebenita/Broadway\nThe demo is working. :green_apple: Console shows nothing.\nKernel Version: 4.8.12-300.fc25.x86_64\nOperating System: Fedora 25 (Workstation Edition)\nOSType: linux\nArchitecture: x86_64. I'm low level user on Fedora. I don't think that its possible for me to upgrade something. :heart:. :blue_car: Yes its possible but one issue. Blob url hase no extention, so player can't detect the mimetype. And clappr player shows a message that video can't be played. To fix that you need manually add a mimetype.\nnew Clappr.Player({\n      parent: this.refs.player,\n      source: {\n         source: 'blob://...',\n         mimeType: 'video/mpg'\n    }\n...\nI think that player should detect the mimetype. Lets test this - thanks :mouse:. console.dir(Clappr.Events)\nYou will get all events so grab one e.x. PLAYBACK_ERROR\nplayer.on(Clappr.Events.PLAYBACK_ERROR, function(error) {\n      console.log(error);\n    });. Why on player options change the video element is re-rendered? \nSo this is why user should hit the play button again.\nhttps://github.com/clappr/clappr/blob/5b51269ac9b39981e036f1167c2a2f9e34e2b35c/src/plugins/poster/poster.js#L52. dead project. ",
    "kslimani": "@FDiskas this issue has been fixed in #1318 (i mean load another source and autoplay on mobile devices). @rictorres https://mycujoo.tv/ trigger a javascript error with Firefox 50.1.0 (Debian Linux) and then display a blank page. But it work with Chrome 55.0.2883.87.. @rictorres i use this Linux version from official website.\nEDIT: it seems to be a \"rare\" case issue where flash plugin is installed but not enabled.\nIt work on another Linux desktop without flash plugin installed. Sorry for misleading \ud83d\ude03 \n. Take a look at the playback playInline parameter.. Check the this example. I double-checked, it adds the playinline attribute on video element, and therefore \"should\" play inside browser.. For Events.CONTAINER_SEEK event, this is because it is trigger only by container seek() method (ie: if used seek video using Clappr media controls, not by observing video element events/state).\nPlease note, i am describing behaviour for Safari browser on iOS device for 'html5_video' playback using native mode.\nBTW, on my tests, Events.CONTAINER_STATE_BUFFERING and Events.CONTAINER_STATE_BUFFERFULL are properly trigger.\nIMO, it would usefull if container could be aware that player has seeked to new position (maybe with a new container event ?).\nPlease also note that it seems there is a bug (not confirmed if it is a bug or an expected behaviour) with Safari on iOS : using 'html5_video' playback, (VOD playback type) when you seek video :\n- if source is .mp4, the playing event is not fired\n- if source is .m3u8, the playing event is fired\nWith other Browser, the playing event seems to be trigger (tested Chrome on iOS)\nI am currently doing tests, i will post again if have updates.\n. My tests results on Safari HTMLMediaElement after a seek (ie: set a value to currentTime property) :\n-  does not trigger playing event if video source is .mp4\n-  does trigger playing event if video source is .m3u8\nOn Chrome and Firefox, event playing is properly trigger if source is .mp4\n(Also with .m3u8 but it is using HLS.JS, not native HTML5 video)\nTested on\n- Safari 10 with Mac OS X El Capitan 10.11.6\n- Safari 9 with iPad and iOS 9.2\nOn current master  branch, Clappr container seek event is trigger only by container seek() method. \nThis make it \"hard\" to track seek operation done by user with native iOS media controls. (if listening only to container events).\nMaybe the 'html5_video' playback should use HTMLMediaElement seeked event to handle seek on Safari with iOS ?\n. @alwayzgame : read this.. I can confirm i also had this behaviour on chrome android 6.0.1 (tested with Samsung Galaxy S5).\nBut the bug does not always happen. (i was not able to determine the exact cause to reproduce the bug yet).\nAlso sometime on double tap, the player does not go fullscreen but get bigger in height (very strange, again i am still digging on fiding the way to reproduce).\nIt is maybe only on mobile device, because on galaxy Tablet it work as expected.\n. i'd suggest additional parameters to be able to customise event category names and label :\n``\n// It's recommended to always use the plugin name for plugin-specific options, but there's no need for scoping it undercoreorcontainer`\n   ga: {\n       // https://developers.google.com/analytics/devguides/collection/analyticsjs/#the_javascript_tracking_snippet\n       // Perhaps it's better to use a funcion instead of evaluating a JS string\n       bootstrapJS: function() { var j=1;... }, // default: latest\n       trackingId: 'UA-XXXXX-Y', // *mandatory  - the tracking ID / web property ID.mandatory\n       cookieDomain: 'auto', // default : 'auto' - document.location.hostname (normalized)\n       name: 'myTracker',   // default: undefined -Naming a tracker is necessary in cases where you need to create more than one tracker for the same page,  if presents it'll send ga('myTracker.send', 'x', 'y');\n       userId: '12345', // default: Randomly Generated & persisted in cookie\n       progressPercentage: [50,74], // default: [] - sends hitType: 'event',  eventCategory: 'Videos',  eventAction: 'progress_30p'\n       progressSeconds: [30], // default: [] - sends hitType: 'event',  eventCategory: 'Videos',  eventAction: 'progress_30s',\n       eventsToTrack: [\n                'seek', 'end', 'play', 'pause', 'buffering', \n                'bufferfull', 'fullscreen', 'volume', 'error', 'stop', '...'\n       ] // default: [] - sends   hitType: 'event',  eventCategory: 'Videos',  eventAction: 'x',\n       eventCategories: {\n         'videoEvent': 'Video',\n         'interactionEvent': 'Interaction',\n         // more can be added in future if required/missed\n       },\n       eventLabel: 'My video title', // optional, default to this.container.playback.src\n    }\n// custom dimension and metric!\nga('send', 'pageview', {\n  'dimension15':  'My Custom Dimension'\n});\nga('send', 'event', 'category', 'action', {\n  'metric18': 8000\n});\n```\n. @leandromoreira the \"interaction\" comes from the current core ga plugin. But it is obsolete if new ga plugin use the same category for all events. (and therefore an  eventCategory string property is enough)\n. @leandromoreira for event names imo a list of event to track seems enough.\nif you want to go deeper in customization you could also provide an object with the event name as key and the event action value to use.\neventsToTrack: {\n    'seek': 'videoSeek', // default is 'seek'\n    'end': 'videoEnd',    // default is 'end'\n    'play': 'videoStart',  // default is 'play'\n    // etc...\n}\nThis could be usefull for someone who wants to migrate to Clappr player but need to reproduce the GA event action used by previous player tracking library.\nBut the cons is it complicate the option format.\n. In the meantime, i started one here : https://github.com/playmedia/clappr-ga-events-plugin\nI am stuck on how to implement \"progress\" events, especially for progression in seconds, i am not sure how to handle live streams and also what to do if user seek video for VOD.\n. @leandromoreira i agree for live events, i was also thinking for pooling system.\nDo you have any thoughts about what to do if user \"seek\" video ?\n. @leandromoreira thank you. I will take a closer look at this feature.\n. Also, maybe always use HTTPS to load ga.js script instead of scheme detect ?\n(may also increase load performance for browser HTTP2 ready)\n. I suggest also to add configuration parameters to allow to configure event categories and default event label.\nExample:\nga: {\n  trackingId: 'UA-44332211-1', // required\n  name: 'MyPlayerInstance', // optional\n  videoEventCategory: 'Video', // optional, default to 'Video'\n  interactionEventCategory: 'Interaction', // optional, default to 'Interaction'\n  eventLabel: 'My video title', // optional, default to this.container.playback.src\n}\nPS: parameters names is just proposition, can be changed.\n. Here some work i did to be able to play a preroll video ad with Clappr : https://github.com/kslimani/clappr-html5-preroll-skeleton-plugin\nThis should satisfy Google IMA HTML5 SDK requirements.\nAlso note this only support preroll (i have no experience with midroll or postroll).\nGoal is to push missing/required Clappr features in order to be able to create Ad plugins.\n. As a \"proof of concept\", (but it should properly work on desktop and mobile devices), i created a Google HTML5 IMA sdk preroll only plugin for Clappr based on plugin skeleton.\nHope it can move forward Clappr ad requirements, or inspire someone :smile: \n. @funkytaco : Clappr does not require Flash by default. It is only required if you intend to use RTMP external plugin in order to play a RTMP source.\n. Maybe add also a check on the mime/file type and apply only this behaviour for .m3u8 playlist and leave default behaviour for .mp4 \"vod' files, etc.. ?\n. @waster have you tried with autoplay to true as third argument in load() method ?\nexample :\njavascript\nplayer.load('video.m3u8', null, true)\n// or player.load('video.m3u8', null, !Clappr.Browser.isMobile)\n. @waster this issue is quite old and therefore it is hard to track the current context.\nCould you please close this issue and open a new one describing your current situation and problems ?\nAlso providing a test page or code sample to reproduce the issue may ease to help to fix your issue.\n. So if we include Clapp in a browser with a script tag like \njavascript\n  <script type=\"text/javascript\" src=\"http://cdn.clappr.io/latest/clappr.js\"></script>\nThen the Clapp player should be available in window object as window.Clappr or window.clappr ?\nCurrently, on my tests it is only available as window.clappr (not window.Clappr) at release 0.2.62\nEDIT: @leandromoreira  weird, it seems that window.clappr is a plain object with Clappr propertie.\nCurrent little trick i temporary use is :\njavascript\n      window.Clappr = window.Clappr || window.clappr.Clappr\n. hi @enbplas11 you may want to look for an .swf file obfuscator/encryption software. It is really easy to decompile .swf files and extract AS3 source code from it. In my opinion, change the encryption algorithm will change nothing for the hacker. (and even with obfuscator/encryption, a determined hacker will broke it anyway).\n. hi @IlianYotov \nClappr is using internally the library HLS.JS to play .m3u8 playlist. I may be wrong, but you may want to signal this behaviour to the author. I have not looked deeper the library yet, i dunno if this can be implemented in Clappr playback wrapper.\n. I am still digging in Webpack documentation, but i think this may be related to libraryTarget value. (currently 'amd', maybe it needs to be changed to something like 'commonjs' - simple theory, i have not tested yet)\n. According documentation if using 'amd'  it should be possible to specify an object as external value with property commonjs, commonjs2, amd and root to set different values for each import kind.\n. EDIT: nevermind, this option is for including external libraries without importing them in dev deps.\nmaybe something like \njavascript\nlibrary: {\n  amd: 'Clappr',\n  commonjs: 'clappr',\n  commonjs2: 'clappr',\n  root: 'clappr'\n}\nAgain, i am not sure about properties value.\n. @tjenkinson the example i see was from webpack repository : https://github.com/webpack/webpack/tree/master/examples/externals\n. hey @tjenkinson my question may be \"dumb\", but what is exactly the problem ? (I mean \"Clappr side\")\ni tried to import Clappr player in bundle build with Browserify and it is working (at least for version 0.2.63). I am not sure to understand the issue.\nCan you give an example to reproduce the problem ?\n. @tjenkinson  ok i think i got it. So, currently, it is plugin responsability to ensure that Clappr external is exported Clappr and clappr ?\nAnd your PR goal is to make Clappr available as 'clappr' and 'Clappr' so plugin developer doesn't have to care anymore about his webpack external configuration ?\n. @rootscript if you are using node, the files you are looking for are in Clappr dist folder. You may have to copy theses \"assets\" files, for example, with your build script in your application bundle, and use the baseUrl Clappr property to point to correct folder. (this property can be either an absolute or relative path/url).\n. @NicholasAsimov : you mean if autoplay is false then show the poster over the \"not supported\" message, which only display if user click poster ?\n. Maybe there is a way to detect seeking capability if safari and add a condition here ?\n. I am talking about click stop button on Clappr media control. (not the iOS control bar while in fullscreen mode which is also another behaviour not digged yet).\nAlso, to detect live HLS DVR on Safari with iOS maybe use the seekable attribute to get TimeRanges object.\nif length equals zero, then it is a live stream and if it is greater than zero it is with DVR ? (i need some confirmation here, i am not sure about this).\n. Maybe, something similar was also discuted with @towerz  here\n. Closing the issue, fixed by #1160.\n. I close this PR as it it supersede by #1160.\n. I will test & confirm if it fix #1158 tomorrow at office. (But unless i missed something, it should !)\n. @tjenkinson @leandromoreira : i tested with\n- Safari 10 with Mac OS X El Capitan 10.11.6\n- Safari 9 with iPad and iOS 9.2\nIt fixes #1158 (live HLS source with DVR). However i did not check the content-type issue described by @tjenkinson.\n. @NicholasAsimov : yes, please add an option to keep backward compatibility.\n. maybe keep poster option, and if it is a string, act as poster image path, and if it is an object then check for some expected props  ? (just a thought)\n. I added a PR #1188 about this. Also currently without this field removed, i can't compile my project because of uglifyjs which seems to be frozen or indefinitely processing assets.\n. @joaopaulovieira i think you first assumption may be correct.\nAs long as (isEqual(update, this._lastTimeUpdate)) condition is true, the PLAYBACK_TIMEUPDATE event is not triggered. (ie: ensure this condition is true when playback is created)\n. @mikeevstropov : i think it is maybe a codec problem with the browser.\nCould you try use http://vjs.zencdn.net/v/oceans.webm as source url on http://cdn.clappr.io. ?\n(video credit: videojs.com)\n. I did some additional tests and sadly, it is a codec support issue with Yandex Browser. (H.264 to name one).\nA fast and easy way to see if your browser HTML5 support is to visit Youtube HTML5 page.\nThere is maybe a hack to do with Yandex browser by replacing the libffmpeg.so library file from another Chromium web browser.\nClappr player only supports video which are supported by web browser.. It is hls.js line 358 : https://github.com/clappr/clappr/blob/master/src/playbacks/hls/hls.js#L358\n. it should be \njavascript\n  _fillLevels() {\n    this._levels = this._hls.levels.map((level, index) => {\n      return {id: index, level: level, label: `${level.bitrate/1000}Kbps`}\n    })\n    this.trigger(Events.PLAYBACK_LEVELS_AVAILABLE, this._levels)\n  }\n. Locally, i have the following message\n```\n/home/kslimani/projects/clappr/src/playbacks/hls/hls.js\n  358:5  error  Expected indentation of 6 spaces but found 4  indent\n\u2716 1 problem (1 error, 0 warnings)\n```\n. Additionally, if i try to build Clappr with current master, hls.js playback doesn't work anymore. (but maybe you are already aware of issue ?). I am still digging where is the problem, if i findout something i will update.\n. @leandromoreira yes i am gonna test and feedback.\n. @leandromoreira so far it is working again (testing with \"npm run start\" build demo page). :+1: \n. @kulab45 i think on E11 with windows 7 you need Flash plugin to be able to play HLS content. (it use Flash HLS, because javascript version is not supported).\n. Note also, that since @towerz modification on mediacontrol, on mobile device, if you tap once to make the mediacontrol apear, then tap stop/pause, the mediacontrol is still displayed (as expected ! which is cool new feature !) but if you click play, then it does not autohide. (unless you perform another action, like go fullscreen and come back)\nI think this is because the hide() method seems only to be called in show() method using a settimeout.\nMaybe the hide() should be called also in the onPlay() event callback method ?\n. Hi,\ni think problem is because of the name/url path to file which does not ends with '.mp3' extension.\nYou should try to provide the audio/mp3 mime type in the source option using an object.\nSyntax should be something like :\njavascript\nsource : {source: 'http://servidor1.crossdigital.com.br:8058/;stream.nsv&type=mp3', mimeType: 'audio/mp3'}\n. @sexysat can you write the urls of the two Clappr version 0.2.64 you used please ? (the one not working and the one working)\nI would like to investigate why it is not working with a CDN and is working with another one.\n. @leandromoreira oh i see, nevermind then \ud83d\ude04 . @aaronatmycujoo are you able to reproduce this bug on Clappr demo page ?\n(if not, can you provide some code sample or demo page to be able to debug your issue ?)\n. @aaronatmycujoo my first constatation is that player auto-play seems to be set to true because Javascript console is displaying user consent warning. \nI recommend using autoPlay: !Clappr.Browser.isMobile in player configuration to avoid player to be in an unstable state on page load.\n. This issue should be fixed. You should be able to handle playback error using event api.\n. @uniquegodwin the player play() method  is used to start the source configured in player.\nUsing the same player instance you can (re)load the same (or another source) using the configure() or directly the load() method.\nIf you specify the source parameter in object argument of configure() method, it will internally call the load() method.\n. @leandromoreira i think that current clappr-zepto 0.0.5 is broken (something wrong may occured during build ?)\nMake a try rebuild using this\n. I think it is an issue with MAC OS (maybe also iOS) with Safari because it use native HTML5 playback (not HLS.JS playback). (It should work with Chrome and Firefox on MAC OS/iOS).\nSomething must be wrong in DVR detection with Safari (or maybe can't be properly handled ?). Note also it may behave differently on fullscreen with some iOS device because of native controls. (not tested yet).\n. @GuilhermeMedeiros : Live with DVR is very bugged on Safari. I did some tests using Safari on iPhone and iPad in fullscreen (so it bypass Clappr mediacontrol for using native controls) :\nif you start video and pause a few seconds, then click play again you will never be able to go back to live. (even if you click on the \"forward\" icon).\nAlso, in current html5_video playback, there is no DVR detection feature implemented yet. Only LIVE playback type detection.\nFor LIVE HLS DVR detection with Safari on OSX it is maybe possible to use the seekable attribute to get TimeRanges object.\nIf length equals zero, then it is a live stream and if it is greater than zero it is live with DVR (not tested, need confirmation)\n. @anoopksreyas : you should check if the request if performed with credentials because i don't see any access-control-allow-credentials header in the server response. Maybe it is related ?. That is weird. Can you try to upgrade your browser ?\nI tested with Linux Debian Jessie and Chromium 55.0.2883.75 and it work.\nMaybe there is a problem with your codec. I have seen recently that some Linux distribution may need to upgrade the libav librairie in order to HTML5 video to work on some browser like Firefox (maybe it is related).\nIf i have time i will also try to install a Fedora distrib to test.\n. Chromium 55 will be soon released according Fedora Updates System. This maybe solve the problem.. I tested Fedora 25 on a virtual machine and it seems it is a codec problem not a Clappr issue.\nBrowser console message indicate that no codecs installed which handle video/mp4 mime type.\nI installed GStreamer codecs but no change. (maybe need the proprietary version of codecs ?)\n. I have not tested, but i think it is already possible. If you provide the proper mime type and (maybe) force html5_video playback, it should properly handle blob:// url as it is natively handled by video element in most browsers.\n. This could be a nice feature addition : check for blob:// in source while resolving playback and use window.FileReader or window.Blob (if available) to attempt to detect mime type. (maybe there is also a lightweight js lib which could be used). @surflive this may be a browser capability problem. You should try to check which browser engine is used by your Phonegap application with this Android version. For example, build a view which go to Youtube html5 page or caniuse website.. Currently, Clappr player rely on prefixed fullscreenElement document api attributes to detect if browser is in fullscreen : (webkitFullscreenElement, mozFullScreenElement, msFullscreenElement, webkitFullscreenElement, webkitFullscreenElement) - Which explains the current \"global\" behaviour.\nIf attribute is null, then browser is not in fullscreen mode, otherwise the attribute contains the element which has requested fullscreen. \n@core : To fix/implement this behaviour, maybe add a unique id (a data-XXX attribute ?) to playback element and check for it if attribute is not null ? (not sure it is the best/elegant way to do)\n. Technically, it should be almost the same as preroll, except for VOD source : you need to store content video current position and restore it when playing back.. I don't have example code for midroll and postroll, but you may find something usefull here :\n\nhttps://github.com/vix-simplex/clappr-vast-ad-plugin\nhttps://github.com/mycujoo/clappr-vast-plugin\nhttps://github.com/kslimani/clappr-google-ima-html5-preroll\nhttps://github.com/kslimani/clappr-html5-preroll-skeleton-plugin\n\n. Of course you can create your own plugin. Take a look at Clappr Architecture and at previously provided links for plugin base examples.. @leandromoreira i am not sure this trick will work onmobile device because of user interaction requirement to start video. (in HTML5 video element scenario that is). But yes, it worth a try.. @leandromoreira i think @towerz is aware of this issue because i remember reading something where he mention about recycle the video element when instancing another playback on loading another source in core.. Yes, and the \"recyle\" mention is in the projet dashboard (the fourth ticket in TODO list). So i think the plan is to fix it in next major release.. It is working for me with Android 6.0.1 and Chrome 54.0.2840.85. (Samsumg Galaxy S5).\nI will upgrade Chrome to latest and test again.\n. @leandromoreira  I upgraded to Chrome 55.0.2883.91 and i confirm strange behaviours :\n\nif i click on poster image to start video, the player resize using the document height (it seems)\ni have the same bug as @vix-simplex when clicking on video in fullscreen\n\nEDIT:\n\nthe resize stuff seems to be related to cdn demo page only\nbut i confirm the fullscreen exit on click\n\nSo i guess it is some sort of Chrome regression (because it worked on 54.0.x)\n. @vix-simplex i am not sure. It require some debug with Clappr touch events.\nEDIT:\nIt seems (to confirm) Chrome 55 introduce a new feature to download video (a new button in video controls) and it seems it add a new behaviour in fullscreen mode : keep touching screen display a download button on video element. I am not sure if it is related to this bug.. I can confirm also it is related to Google Chrome version 55.0.2883.91 (tested on Galaxy Tab 4 with Android 5.0.2)\n. @vix-simplex i think you need to change git branch before install npm package (in order to use the updated package.json)\nEDIT:\nnpm run start will only start the webpack dev http server.\nYou need also to compile Clappr using, for example, npm run build or npm run watch for watch mode.\nEDIT 2: \nmy bad, npm run start will also auto build Clappr \ud83d\ude04 \n. @leandromoreira i tried the update_zepto_005 branch, but it seems something is wrong with this Zepto version because i get a TypeError: f is undefined with locahost:8080 demo page.\nThis error disallow Clappr module to load and of course it is followed by a ReferenceError: Clappr is not defined.\nDoes someone else has, at least, successfully loaded the player with this branch regardless of fullscreen issue ?\n. @vix-simplex i think this error comes from zepto-clappr module, not Clappr itself.\n@thiagopnts it would be nice if you could describe how you generate minified version of zepto-clappr (to ensure it is the same way you do) so i could also experiment/debug this path.\n. @leandromoreira i tested with latest Zepto using this method and i still have the fullscreen touch issue. (it seems upgrading Zepto is not enough or i maybe missed something). @leandromoreira with Samsung Galaxy S5 and Google Chrome 55.2883.91 using cdn.clappr.io demo page :\n\nVOD (mp4 & hls.js) :  in fullscreen video pause without exiting fullscreen mode (as expected)\nLIVE (hls.js) :  in fullscreen video stop and exiting fullscreen mode (as expected)\nLIVE with DVR (hls.js) :  in fullscreen video pause and \"back to live\" without exiting fullscreen mode (as expected)\n\nAlso, note that it require to \"tap\" twice the screen in order to display mediacontrols or pause video because of the Google CAST feature. Basically, the first \"tap\" display the top left CAST icon, and the second \"tap\" is handled by Clappr.\nThis feature can be misleading because the CAST icon is not always displayed (i think it is a bug in Chrome not related to Clappr, but worth to mention).\n. The player is not \"aware\" of current viewer count value, only the server is.\nBut if you have a \"server-side\" way to get this value, you can display it on player with a custom plugin.\n. Making a plugin doing this is very simple to accomplish.\nFor example, take a look at source code of clappr-heading-plugin : it is a very simple plugin which display video title over video.\nJust use it as base skeleton, then : \n- adjust css to choose where you want to display user count\n- add code to perform ajax request each N seconds to get data\n- add a plugin option to configure ajax request interval in seconds\n- add a plugin option to configure url where to perform ajax request\n- add an optional plugin option to set a callback function which parse ajax request result and return text to display (or only user count)\nThere is probably more usefull options to add to plugin, but i think this sould be a good start \ud83d\ude04 . I am not sure to understand what you want to achieve.\nDo you have any sample code to share or some demo page ?\nTo get the player \"timeupdate\" event you can use the events configuration property :\nTo test, go to http://cdn.clappr.io/ and replace the javascript code by :\n```javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n  baseUrl: '/latest',\n  height: 360,\n  width: 640,\n  plugins: [Clappr.FlasHLS], // force Flash HLS playback\n  events: {\n    onTimeUpdate: function(obj) {\n      // this event is fired several time per seconds\n      // obj properties are : {current: FLOAT_VALUE, total: FLOAT_VALUE}\n      console.log(obj)\n    }\n  },\n});\nplayer.attachTo(playerElement);\n```\nNote also that version 0.2.25 is quite old. You should consider upgrade to latest version.\n. According your logs, it is a live HLS stream (with DVR ?).\nI did some tests and it seems that you cannot rely on the values contained in the player timeupdate event object. (for live stream using flashHLS playback)\nThe values differs betweens each loaded chunks, and yes, it may be lower values than previous chunk.\nThe values are a calculation. (based on buffertime it seems ?). Take a look at this and also to this.\nI don't know how calculation are done in Flash HLS.\nAlso be cautious with url seek feature, as it is only implemented in html5_video and flashls playback (not in hls.js playback). see #1246.\nMy knowledge is limited with HLS, someone else may known a solution to your issue \ud83d\ude15 \n. The problematic with HLS playlist is that blob support depend of the resolved playback : which can be hls.js, flashHLS or native html5 video element depending of browser capabilities.\nThough, you should try something like : data:application/vnd.apple.mpegURL;base64,HERE_BASE64_ENCODED_PLAYLIST_CONTENT as source. (not tested, just theory)\n. I had done some successfull tests in the past with mp4 files directly on video element. \nBut i am not sure if HLS playlist can be loaded as blob.\nMaybe it work with Safari on mac or iOS because of native support...\nI don't know for hls.js, maybe using a custom playlist loader (ie: the ploader configuration option). @zoell it seems it is your mimeType which is wrong. replace it by application/vnd.apple.mpegurl. (notice lowercase)\nI was able to play as blob on Clappr demo page\nIn javascript bloc replace the code by this one : \n```javascript\nvar data = \"#EXTM3U\\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=2149280,CODECS=\\\"mp4a.40.2,avc1.64001f\\\",RESOLUTION=1280x720,NAME=\\\"720\\\"\\nhttp://www.streambox.fr/playlists/x36xhzz/url_0/193039199_mp4_h264_aac_hd_7.m3u8\\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=2149280,CODECS=\\\"mp4a.40.2,avc1.64001f\\\",RESOLUTION=1280x720,NAME=\\\"720\\\"\\nhttp://www.streambox.fr/playlists/x36xhzz/url_1/193039199_mp4_h264_aac_hd_7.m3u8\\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=246440,CODECS=\\\"mp4a.40.5,avc1.42000d\\\",RESOLUTION=320x184,NAME=\\\"240\\\"\\nhttp://www.streambox.fr/playlists/x36xhzz/url_2/193039199_mp4_h264_aac_ld_7.m3u8\\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=246440,CODECS=\\\"mp4a.40.5,avc1.42000d\\\",RESOLUTION=320x184,NAME=\\\"240\\\"\\nhttp://www.streambox.fr/playlists/x36xhzz/url_3/193039199_mp4_h264_aac_ld_7.m3u8\\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=460560,CODECS=\\\"mp4a.40.5,avc1.420016\\\",RESOLUTION=512x288,NAME=\\\"380\\\"\\nhttp://www.streambox.fr/playlists/x36xhzz/url_4/193039199_mp4_h264_aac_7.m3u8\\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=460560,CODECS=\\\"mp4a.40.5,avc1.420016\\\",RESOLUTION=512x288,NAME=\\\"380\\\"\\nhttp://www.streambox.fr/playlists/x36xhzz/url_5/193039199_mp4_h264_aac_7.m3u8\\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=836280,CODECS=\\\"mp4a.40.2,avc1.64001f\\\",RESOLUTION=848x480,NAME=\\\"480\\\"\\nhttp://www.streambox.fr/playlists/x36xhzz/url_6/193039199_mp4_h264_aac_hq_7.m3u8\\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=836280,CODECS=\\\"mp4a.40.2,avc1.64001f\\\",RESOLUTION=848x480,NAME=\\\"480\\\"\\nhttp://www.streambox.fr/playlists/x36xhzz/url_7/193039199_mp4_h264_aac_hq_7.m3u8\\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=6221600,CODECS=\\\"mp4a.40.2,avc1.640028\\\",RESOLUTION=1920x1080,NAME=\\\"1080\\\"\\nhttp://www.streambox.fr/playlists/x36xhzz/url_8/193039199_mp4_h264_aac_fhd_7.m3u8\\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=6221600,CODECS=\\\"mp4a.40.2,avc1.640028\\\",RESOLUTION=1920x1080,NAME=\\\"1080\\\"\\nhttp://www.streambox.fr/playlists/x36xhzz/url_9/193039199_mp4_h264_aac_fhd_7.m3u8\\n\"\nvar blob = new Blob([data], {type: \"application/vnd.apple.mpegurl\"})\nvar blob_url = URL.createObjectURL(blob)\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: {\n    source: blob_url,\n    mimeType: blob.type\n  },\n  baseUrl: '/latest',\n  // mute: true,\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\n```\nEDIT: tested with hls.js with Firefox (windows)\n. @NicholasAsimov maybe modify this.options.playback.hlsjsConfig value in constructor instead of _setupHls() ?  (just a thought, did not test). For missing .env file, try to create an empty one locally : touch .env (it seems it is required by karma config file) It seems it check for TRAVIS key, ~~if not set, it run tests using Firefox only (which may explains why it works for you locally, but fail on travis ci which use a profile with 3 browsers)~~\nEDIT: TRAVIS key seems to be for run chrome with custom options.\n. > Seems like Object.assign requires a polyfill, that's why it fails in Chromium 37 and IE11, what to do?\ndon't use it \ud83d\ude04 \n. @NicholasAsimov does it work for you with html5_video playback ? (just to be sure)\nEDIT: i ask this because hlsjs playback extend html5_video playback and then also extend event binding. From my understanding the _checkInitialSeek() (autoseek feature) is triggered by <video> loadedmetadata event.. I think that HLS playback support on iOS device is implemented in Safari browser. (Clappr use native html5 video element with Safari on iOS/Mac OS).\nAFAIK, Firefox or Chrome does not support HLS playback natively on iOS device.\n(But i am maybe wrong, in fact, i never tested \ud83d\ude03)\n. @tchakabam : on MAC OS X using built-in Safari HLS is default behaviour for Clappr player.\nhls.js is only used for other browser (like Chrome or Firefox).\nYou should be able to use FairPlay DRM.\n. @leandromoreira : the playback playInline feature is now part of Clappr. (ref: #1317)\nAlso, according this article, it seems it is an iOS >= 10 feature only (Webkit only ?).\nI think this PR is currently incomplete, because it require also to modify Clappr mute internal mechanisms to add or remove the muted property if current playback element is an HTML5 video element and Browser is using webkit with iOS >= 10.\n~~Please note i have not yet checked if other mobile devices browser/engine policies have also introduced these changes.~~\nUPDATE: according this article, it is also working with chrome android >= 53.\nIt may be interesting to add a (mobile device) muted autoplay feature to Clappr player.\n. @tomas2387 if i understand theses changes, it automatically add the muted property to html5 video element if autoplay player option is set to true with mobile devices ?\nI am not sure it is the proper way to introduce this feature. Also the core mediacontrol must be \"aware\" that playback is muted.\nIMO, the current autoplay mechanism does not need to be changed.\nInstead i would change the code parts which handle the mute (or muted ?) player option to properly add the muted element property (on html5 video playback scenario only). Theses changes may also apply to desktop (i think it is acceptable also on desktop to add the muted video element property if user mute the playback).\nWhat do you think ?\n. @tomas2387 for example, i would remove the current modifications and try something like :\nEDIT: see next comment !\n~~in the html5 video playback mute method append this line :~~\njavascript\nthis.$el.attr({muted: 'true'})\n~~Then in the unmute method append this line :~~\njavascript\nthis.$el.attr({muted: null})\n~~Then try the results on mobile. (i did not try myself, just some thoughts).~~\n~~OK, i tested myself, this is part of the solution, but the Mediacontrol constructor needs also a small modification~~\nlol, ok it seems playback mute and unmute are never called. \ud83d\ude38 the logic must be moved in playback volume handling function.\n. @tomas2387 ok here a solution, just modify the volume method to this :\njavascript\n  volume(value) {\n    if (value === 0) {\n      this.$el.attr({muted: 'true'})\n    } else if (this.el.volume === 0) {\n      this.$el.attr({muted: null})\n    }\n    this.el.volume = value / 100\n  }\nIt should resolve the issue with mobile. (ie: with autoPlay to true and mute to true in player configuration)\nUPDATE: it work with Chrome on Android and with Safari and Chrome on iOS >= 10 (iOS require playback playInline option to true).\n. @kafeltz can you test #1254 and check if it fixe your issue ?. I tested this code with Safari 10.0.2 on MAC OSX at http://cdn.clappr.io/ and it does not seems to work.\n```javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8?t=20',\n  baseUrl: '/latest',\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\n```\nI never used this feature, can someone confirm that correct syntax is to add ?t=n in URL (where n is integer the number of seconds) ?\n. Thank you @NicholasAsimov !\nThen according this part of code, if i go to page http://cdn.clappr.io/?t=20 and open javascript console and type :\njavascript\nClappr.Utils.seekStringToSeconds(window.location.href)\nDoes it should print 20 as result ? or do i miss something ? (currently it display 0 for me)\nEDIT:\nI think i found why it is not working, take a look at base/utils : function accept only an optionnal paramName argument which default to t. Typing Clappr.Utils.seekStringToSeconds() in console properly return 20.\nThis may be why it does not work here.\n@tjenkinson or @leandromoreira can you confirm ?\nEDIT 2 :\nnevermind , just saw you guys are already aware of the issue \ud83d\ude04 \n. @pqray On iOS and Android, playback of video must be initialized with a user action, meaning a tap or click. Therefore, autostart is not possible for mobile, but it should work on desktop if autoPlay parameter is set to true.\n. @tomas2387 I think your PR has a good point about playinline video element.\nI think you are referring to Safari 10.0 release note :\n\nWhen the playsinline property is specified, Safari on iPhone allows videos to play inline. Videos without the property will commence playback in fullscreen, but users can pinch close on the video to continue playing the video inline.\nOn iOS, videos without audio tracks or with disabled audio tracks can play automatically when the webpage loads.\n\nMaybe if \"html5\" playback option has playInline property set to true, we should also add the playsinline video element attribute (in addition of x-webkit-playsinline attribute).\nI have not tested yet, so i don't know if this would introduce bugs. Maybe open a new issue for this.\n\nAbout autoplay, i think (but i may be wrong !) that your current PR breaks the default player behaviour. Maybe you should propose something like this :\nIf player autoPlay property is set to true and meet the following conditions :\n\nresolved playback is \"html5_video\" (or extends HTML5Video ?)\ncurrent browser is Safari and version is greater than or equal to 10\nplayer mute property is set to true\n\nThen starts video when playback constructor is done.\nMaybe also open another issue for this.\n. @fuzegit have you tried this solution ?. That's right, Clappr default behaviour with width and height set to '100%' is to adjust size to parent container element. (AFAIK there is no auto-ratio feature yet)\nAs workaround, you should effectively set width and height to '100%' in player configuration and change size on parent container (for example using css media queries)\n. In HLS live stream scenario, Clappr does not \"pause\" the video but \"stop\" it. I think the rectangle you see may be the \"stop\" icon (instead of \"pause\" icon in VOD scenario).\nTo ensure it is the case, i suggest you to take a screenshot.\n. You can, for exemple, use custom media controls. More infos here.. You may be interrested by Clappr playlist plugin.\nCheck test page for example usage.. it seems it is because it is written is es6. And i see no es5 compiled dist.\nYou may need to compile it first or include babel in your bundle compilation.. Clappr has an internal click_to_pause plugin which pause/start player if you click on video.\nThis may be related to your issue.\n. AFAIK, Clappr player does not handle this.. It's a bit tricky, it depend on web browser capabilities and on the codecs used to encode video.\nIt may be possible to achieve mkv playback on Chrome browser if providing the proper mime type. (i have not tested).. In your player configuration, you can specify a mime type using an object :\n```javascript\nvar player = new Clappr.Player({\n  source:  {\n    source: 'path/to/file.mkv',\n    mimeType: 'video/x-matroska'\n  },\n  // [...]\n});\n```\nPlease note i am not sure about mime type value. You may need to experiments other values.\n. > I have noticed that clappr does not use  tag for HLS on iOS 10 Safari. If we were to make clappr autoplayable on iOS 10 Safari, does it entail some major code change?\n\ud83d\ude15  AFAIK, Clappr use an HTML5 video element for HLS playback on iOS.\nHave you tried to set mute option to true with autoPlay to true ? (i have no iOS device available to test until monday)\nIf this not work, it should be easy to autoplay an HTML5 video on iOS if mute option is set to true. (you are not the first person to ask such feature).. AFAIK, there is currently no way to pause HLS LIVE stream (without dvr) if player use hls.js playback. (you should be able to pause if player use native html5 video playback, for exemple, with Safari browser on Mac OS X).\nThis is the default player behaviour for HLS live streams. I suspect the reason behind this choice was to save user bandwidth. (if you pause video, the playback continue to load http chunks in background, which consume bandwidth).\nThought, it may be possible to add such feature to player (with a new configuration parameter) to force playback to use pause (if available) for live stream.\nEDIT: by \"no way\", i mean there is not yet any option to change this behaviour. (it is technically possible to pause video by calling pause() on html5 video element). It seems you are describing existing LIVE with DVR mechanisms. Except that is it implemented server side, which allow user to view past content even if they have not yet downloaded it.\nClappr can handle LIVE HLS with DVR. For example, go to demo page and replace source parameter by https://wowza.jwplayer.com/live/jelly.stream/playlist.m3u8?DVR.\n. AFAIK, Clappr does not have such feature. But it is maybe possible to achieve this using blob url and browser storage. (just theory), but sound like complicated !\n. The link provided is for tests purpose (courtesy of JW Player) : it is either a LIVE HLS stream or LIVE+DVR HLS stream depending on if you add or not the ?DVR query parameter.\nYou are right about hls.js. For HLS stream playback resolving, Clappr player proceed the following :\n\nIf hls.js library is supported by web browser, it use it for playback. (Firefox, Chrome, ...)\nIf web browser is Safari, it uses native HTML5 video element. (you should see in this scenario the pause button instead of stop).\nOtherwise, if web browser has Flash plugin, it use Flash HLS playback. (Old Internet explorer browsers)\n\nIn hls.js playback scenario, for LIVE stream without DVR, Clappr developpers decided that behaviour is to stop video (not pause). (personally, i support this choice \ud83d\ude04 ) For LIVE stream with DVR enabled, then player allow to : pause video, seek video, and display a \"back to live\" button. (It should also be available if playback is FLASH HLS).\nEDIT : i forgot to mention, that behaviour is only for LIVE stream. In VOD HLS scenario, the player allow you to pause video.\nI think it should be technically possible to add a feature, for example, using a new playback parameter named stopOnPause (which default to false), that if set to true, then pause video instead of stop if using hls.js playback (and maybe also flash hls playback).\n. You can, for exemple, use custom media controls. More infos here.. Thank you @towerz for plugin i missed this one.\nI am gonna remove the AirPlay part then and only keep the prefix-less playsinline attribute.. I removed AirPlay flag and merged to single commit.. ping @towerz \ud83d\udc4d . I added an new optional recycleVideo playback option to enable this feature.\nIt is disabled by default, so there is no behaviour change in player. It become dev responsability to enable or not this feature for mobile device.\nSee #1319 for usage example.. ~~My mistake, forgot to run tests... (working on it...)~~\nEDIT: Fixed.. The \"common bridge\" between changed class was utils.js, so my choice was to create a VideoStore static class inside in charge to store video elements indexed by player id.\n@leandromoreira @tjenkinson @towerz @thiagopnts what do you think about this ?\n. I moved all the video recycle logic into DomRecycler class in utils which now uses a stack.\nIt should work even if multiple videos are created in player.\nChanges goal is to allow Clappr player to behave like this page with mobile devices. (ie: click to start video, then single click on thumbnail to start video without requiring additional click)\nThis behaviour is not possible with current version of player.\nping @towerz @leandromoreira @tjenkinson \n. @leandromoreira what do you think about to current proposition ?\nAlso i would like to ensure it is properly working with scenario where several video elements are created, but i dontt know how to produce this behaviour. Do you have some hints/infos ? (an external plugin i missed ?)\n. I merged changes into a single commit.. \ud83d\udc4d yep, it is the more \"elegant\" way i found with current implementation.. It is maybe an issue with hls.js library, because these streams does not work also on hls.js demo page.\nI recommend you to submit an issue here.\n. The third url is working for me in hls.js demo page and Clappr demo page. (but not the first and second url)\n. Closing issue as it is fixed by #1541.. I think it may be a CORS problem : i see no Access-Control-Allow-Origin header in the HLS playlist response.. @TomBZombie just a thought, have you tried to customize hls_list_size  value ?. @rohityadv876,  @hijuuijj you can also use the events player configuration property to bind events.\nExample : \n(you can try this code on demo page)\njavascript\nvar player = new Clappr.Player({ \n  parentId: \"#player-wrapper\", \n  height: 360,\n  width: 640,\n  autoPlay: true,\n  source: 'http://clappr.io/bad_highline_url.m3u8',\n  events: {\n    onError: function (e) {\n      console.log('Player Error:', e);\n    }\n  }\n});\nAlso, more error handling examples are available in documentation.\n. @mortegai  I don't think you can send Referer header with XHR. Have you tried this trick ?. Hello @Sotatek-HungPham ,\nThis issue only happen on mobile devices if you set autoplay to true.\nIt is because playback of video must be initialized with a user action, meaning a tap or click.\nBut you are right, this exception may be avoided by adding some mobile detection to playback autoplay.\nHere a possible workaround to your problem :\njavascript\nvar MyControl = Clappr.MediaControl.extend({});\n  player = new Clappr.Player({\n    source: current.fileUrl,\n    parentId: \"#video-player\",\n    autoPlay: !Clappr.Browser.isMobile,\n    mediacontrol: MyControl\n });\n. I am pretty sure it is a CORS problem. Streaming server must allow origin in the Access-Control-Allow-Origin HTTP header.\nPlease note it is working in Flash because HTTP request mechanisms are not affected by CORS policy. It is affected by crossdomain.xml file content requested by Flash plugin.\n. @towerz  : yes it is an issue. You need to detect Chrome on iOS, for example, in Chromecast plugin. (see comment).\n. Hi @busla \nThe provided source http://ruvruv-live.hls.adaptive.level3.net/ruv/ruv/index.m3u8 returns a 401 Unauthorized HTTP response.\nOn MAC OS X with Safari browser, if you load an HLS video source, Clappr default behaviour is to use native HTML5 video. (on other browsers like Chrome or Firefox, it use hls.js javascript library).\nOn provided example, you configured Clappr to use internal Flash HLS plugin for HLS source playback.\nThis plugin should properly handle DVR (if the HLS source has DVR capabilities).\nCan you try the following code on Clappr demo page ? :\n```javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'https://wowza.jwplayer.com/live/jelly.stream/playlist.m3u8?DVR',\n  plugins: [Clappr.FlasHLS],\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\n```\n. I tried demo page with http://ruvruverl-live.hls.adaptive.level3.net/ruv/ruverl/index.m3u8 HLS source and DVR work (with and without Flash HLS), but i am on Windows 7. (i will be able to test on MAC OS X on monday). But it should work.\nThis question may be \"dumb\" : but do you have Flash plugin installed ? can you try again, and inspect the DOM to ensure there is a Flash embed loaded ?\nIf Flash HLS plugin is properly loaded, you should also see lines in javascript console like :\nINFO:FlasHLS Clappr (version: 0.4.15 - flashls: 0.4.4.22, id: o53)\n[...]\n. Without Flash HLS plugin, on MAC OSX with Safari, it is native HTML5 video which is used for playback. (i don't remember how DVR playback is handled by Safari).\n. @leandromoreira i just realized that hls.js version in package.json is \"^0.7.2\" and the value in yarn.lock is \"^0.6.17\" (locked to \"0.6.18\").\nDo you known if Greenkeeper bot can handle yarn.lock modification in pull requests ? (if not it may be also a nice feature request).\n. maybe update the bump script to keep yarn.lock up to date at each release ?. AFAIK, there is (currently) no player option to disable mediacontrol seek bar. Where have you seen seekEnabled option ? (or are you asking a feature ?). I see. I think that container.settings.seekEnabled is an internal only parameter which is automatically updated. (and therefore you can't override it).\nThe only way i found to disable seek bar was to create my own custom mediacontrols.\n. There is no tutorial yet. But there is an example here. Additional infos also here. And here some experimental tests i have done.. @FDiskas this issue should be fixed in next Clappr release for mobile devices, using the consent() player method with recycleVideo html5 playback feature.\nTake a look at #1319 for example usage. (you can also perform tests with custom build using current master branch).\n. \ud83d\udc4d  @itsjamie can you also remove line 10 of hls.js playback class to attempt to fix Travis lint check. (ie: import Browser from 'components/browser' ? which is not used anymore and is why travis seems to fail). ~~Changed to \"WIP\", don't merge it yet , i need to validate some mechanics first with level load fatal events.~~. Added LEVEL_LOAD_ERROR and LEVEL_LOAD_TIMEOUT fatal error events which obviously cannot be automatically recovered. (Reference issue)\n. sure, i think also i will additionally create an example plugin which satisfy #1381. @Niko78 i tested your code with Clappr version 0.2.66 and with current master and it is working for me.\nBy working, i mean the player is stopped after bufTime reached 10. (i just commented the getElementById stuff which does not exists on my test page).\n. @Niko78 from my understanding, if the player is stopped, then the (!player.buffering && !player.isPlaying()) condition is true and the bufTime value is always set to 0.. You are correct, many things has changed with latest release. (some bugs have been fixed and some library upgraded)\nCan you describe what you are trying to achieve ?\n. BTW, if you are trying to handle HLS playlist load error, you may be interested by #1374 .. @Niko78 pull request is not yet reviewed/merged in 0.2.66. You will need custom build to add this feature in the meantime.. There is a little trick i often use to display an error message in player :\njavascript\n// [...]\nplayer.configure({\n  source: 'player.error',\n  playbackNotSupportedMessage: 'My error message'\n});\n. You can do the same with Clappr using error event.\njavascript\nvar player = new Clappr.Player({\n  source: 'http://example.com/playlist.m3u8',\n  events: {\n    onError: function(e) {\n      // Here handle player error\n    }\n  }\n});\n. @Niko78 you can already test it with mp4 format on current demo page by just copy/paste this example.. For hlsjs playback it should work in next release. (fixed by #1374), or test with custom build.. For hlsjs playback, you have to test with current master branch. More precisely :\n\nclone the project\ninstall dependencies\nrun the demo page locally with npm run start\n(optionally) create custom build with npm run build && npm run release\n\nThen test example code snippet (http://localhost:8080).\n. @Niko78 : of course it is \ud83d\ude04 !\nTake a look at player source option : it is set to http://clappr.io/bad_highline.mp4 which is a bad url which return a 404 error on purpose.\n(to immediately display error message to demonstrate error handling).\nJust change it by a \"good\" source url.\n. I am curious about this. However, I lack knowledge about this module field in package.json and i failed to find any detailed documentation about this. (only this page seems relevant).\n@contra are you sure adding the module field is enough ? does it not require also to build/compile an es6 \"dist\" version of Clappr ?\n. I see. Then they also build an es6 dist version of their modules.\nit may be required to do the same to be compliant as Clappr build use babel plugins and webpack loader which transform, for example, css to be loaded as module. (i lack the knowledge about this. Clappr core should have a better answer for this issue)\n. So, if i understand well, if you import Clappr as an external dependency in your project, webpack will use es6 code instead of importing Clappr as an es2015 module ?\n. @JeanSauzem i recommend to set '100%' on width and height player option and change the size of player \"container\" parent element.. For example :\nhtml\n<html>\n  <head>\n    <title>My App</title>\n    <style>\n      .player {\n        width: 640px;\n        height: 360px;\n        overflow: hidden;\n      }\n    </style>\n    <script src=\"http://url/to/clappr.min.js\"></script>\n  </head>\n  <body>\n    <div class=\"app\">\n        <div class=\"player\"></div>\n    </div>\n    <script>\n      var player = new Clappr.Player({\n        parent: '.player',\n        width: '100%',\n        height: '100%',\n      });\n    </script>\n  </body>\n</html>\nAdjust css styles to size your player to your needs.\n. @frank717 Browser which block \"mixed\" content is an expected behaviour. (which is not related to Clappr).\nIf your pages are served in HTTPS, then you must also serve your video content over HTTPS protocol or it will be blocked by browsers.\nHere more info about mixed content policies :\n\nhttps://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content\nhttps://blogs.msdn.microsoft.com/ie/2011/06/23/internet-explorer-9-security-part-4-protecting-consumers-from-malicious-mixed-content/\nhttps://security.googleblog.com/2011/06/trying-to-end-mixed-scripting.html\n. why not simply convert the file to HLS, then serve it statically, instead doing that on-the-fly ? (unless i missed something ?).. @nishantkumarsah AFAIK, there is no option in Clappr to play video from start (with live mode with DVR capabilities). The only possible \"trick\" is to seek back from start on first video play event.\n\nFor example (try this on demo page) :\n```javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'https://wowza.jwplayer.com/live/jelly.stream/playlist.m3u8?DVR',\n  height: 360,\n  width: 640,\n  events: {\n    onPlay: function() {\n      if (player._hasSeek) {\n        return\n      }\n      player.seek(0);\n      player._hasSeek = true;\n    },\n  },\n});\nplayer.attachTo(playerElement);\n```\n. @ewwink go to demo page and try this workaround code :\n```javascript\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://clappr.io/highline.mp4',\n  height: 360,\n  width: 640,\n  events: {\n    onPlay: function() {\n      player.core.mediaControl.resetKeepVisible();\n    },\n    onPause: function() {\n      player.core.mediaControl.setKeepVisible();\n    }\n  }\n});\nplayer.attachTo(playerElement);\n```. ~~The \"main\" property in package.json of clappr-zepto module is pointing to zepto.min.js. Maybe it worth a try to change the value to zepto.js and try to rebuild Clappr to see if it reduce size of bundle minified by uglifyjs.~~\nEDIT: nevermind, just saw the alias in webpack configuration.. Added another example which should satisfy #1381 @Niko78 issue.. @leandromoreira unless someone think it miss something or there are typos, yep \ud83d\udc4d . @wicherdt it should work with current master. Please read this comment.. Also added a small fix for Browser : currently on iOS device, Browser.isSafari return true with Chrome browser. This fix ensure that Browser.isSafari properly return false with Chrome Browser.\nIt is usefull for use case where you specifically needs to detect Safari. (Please note i am also aware that technically on iOS Chrome browser is Safari with extended capabilities.)\nPS: if required, i can move Browser modifications on a separate PR.. UPDATE: it is using Zepto extend here instead of lodash merge which is the cause of the issue because i tested on current master to re-add lodash.merge and use merge() and it work.\n(i am looking deeper to understand what differs, it is weird, it should work also with $.extend according documentation)\nUPDATE2: it seems that lodash.merge is recursive (deep merge) while Zepto extend or object.assign is not. (this may be the reason). That's it \ud83d\ude03  Adding optional true as first parameter triggers the recursion with Zepto extend.\nWill send a PR.\n. @RodolpheFouquet  It seems that kibo from mediacontrol may not be available on player ready event.\nYou may, for example, use the play event to bind keys :\n```javascript\nvar playerElement = document.getElementById(\"player\");\nvar player = new Clappr.Player({\n  source: \"https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8\",\n  mute: false\n});\nplayer.on(Clappr.Events.PLAYER_PLAY, function() {\n  if (!this._binded && this.core.mediaControl.kibo) {\n    const k = this.core.mediaControl.kibo;\n// Unbind previous left and right keys\nk.off(['left', 'right']);\n\n// Bind new left and right keys\nk.down('left', function() {\n  console.log('left key pressed !');\n});\nk.down('right', function() {\n  console.log('right key pressed !');\n});\n\n// Ensure binding is done only once\nthis._binded = true;\n\n}\n});\n// Player must be attached after binding event\nplayer.attachTo(playerElement);\n```\n. Additionally, you may want to known that the internal Kibo library is exposed by Clappr module :\njavascript\nvar myKibo = new Clappr.Vendor.Kibo();\n. Allright, i perfectly understand what is going on here. It is a known IE11 issue. But there is a workaround.\nI will send a PR this week to propose a fix for this issue.\nBTW, i have a question : on your test page, do you want the radio to autoplay on page load, or only after click play button ?\n. Quickly, it's a bug related to ie11 cache with Flash ActiveX (happen when you receive 304 http response when loading swf file).\nA simple workaround is to use a \"cachebuster\" mechanisms; For exemple by appending a random query parameter to swf file URL. (the cons is that the swf file is always downloaded when player load another \"flash\" source, but i guess it is better than player error).\nMy guess is : you configure a .m3u8 source which is \"resolved\" to be played with FlashHLS playback. Then on \"play\" event, the VAST plugin store source url, use player load method to play the video advert, then use player load again to play original source url : this is when the bug happen in ie11.\nWithout entering too much in details : the Clappr player mechanisms when it load another source, it to destroy the current container, and build another one according to the source (this container \"contains\" the resolved \"playback\" used to display \"source\"). In your case, the FlashHLS playback is created, then destroyed to create another playback for video ad (nature of playback depends on ad video source), then playback is destroyed and FlashHLS playback re-created to attempt to display original source : this is when the error happen (only for ie11).\nNote that i did not deeply test yet and my assumptions may be wrong, but i think this is the reason; In the past i already had to deal with this issue on another project.. @waster i think you can avoid Clappr to download twice the swf file if vast plugin does not use Clappr to display video advert. If you want Clappr to also display the video ad, it will be difficult to avoid the double download unless, for example, you extends the current FlashHLS playback to create your own playback plugin to change internal mechanims. (just a thought)\nI am not sure if it worth the efforts. All advertising publisher/SDK are moving away from Flash, which will be soon deprecated. (for example, see DFP).\nI suspect also that Flash will be soon blocked by browsers. (but i may be wrong !).\nAll most recent desktop & mobile browsers can handle HLS source using hls.js playback (except IE11 on windows 7 which still use Flash HLS).\nI did not deeply test FlashHLS playback so i can't give you a proper answer until i have performed some tests which should happen next week.. @waster so far my tests are pointing out that it may be a IE11 \"sandbox\" security issue.\nContext :\n\nTest are run on Windows 7 with Internet explorer 11.0.9600.18665\nWith an HLS source (will resolve to FlashHLS playback)\nBy Clappr files, i mean all files in \"dist\" folder\n\nFirst results :\nWhen i load Clappr files from an external domain, (ie: cdn.jsdelivr.net) then when 304 happen on swf file the player crash. (technically the javascript execution seems to fail on Flash object).\nBut if i load Clappr files from the same domain/server than the page, if 304 happen, then player is working as expected. (this is why i suspect a security error)\nSo you may want to try to serve Clappr files on your application domain to attempt to resolve HTTP 304 issue.\nHere the code i used to test on IE11 (based on your test page) :\n```html\n\n\nMy App\n\n      .player {\n        width: 320px;\n        height: 240px;\n        overflow: hidden;\n        background-color: lightyellow;\n      }\n      .buttons {\n        width:  640px;\n      }\n    \n\n\n\n\n\nplay\nstop\n\n\n <script type=\"text/javascript\" src=\"http://cdn.jsdelivr.net/clappr/latest/clappr.min.js\"></script> \n\n",
    "egftechman": "I should add the URL of the pagevwhere I am using it, for testing....http://eastgrandforks.tv/?file=22\n. Just rebuilt locally and seekbar now works with mp3 files. Thanks for help.\n. The City of East Grand Forks is making use of it at http://eastgrandforks.TV ...  MP3 and icecast right. Doing internal testing of video, clappr player works great witg avconv's hls output (served out of Apache), we just need decent cameras, etc.\n. ",
    "guzz": "Hello @towerz, is there any way of listening to clappr events? \n. Hello, @flavioribeiro I\u00b4m trying to listen to the PLAYER_PLAY event, but it is not working. Do I have to install a plugin or build the player? \n. ",
    "masudo": "Could it be implemented outside HLSPlayer.swf , using a javascript vtt parser and self implemented timer to show subtitles?\n. ",
    "eseffair": "Hi, now clappr support srt subs?\n. Hi @towerz, There is a forecast for a release of the plug-in?\n. ",
    "marciocamello": "https://github.com/thalleshmm/Clappr-Subtitle\n. ",
    "tmaiadev": "@tjenkinson I will add there =) As soon as I write a few more ~~basic~~ features. It's working though. Feel free to use it =)\n. I had to change the URL. I implemented a few new stuff, though. Styling and controls. If anyone is interested.\nhttps://github.com/JMVTechnology/Clappr-Subtitle\n. We use Clappr @ JMVTechnology.com and NoChalks.com, and so does hundreds of our clients =). Apparently Safari and Edge don't support DVR streaming with Clappr. \n@towerz proposed an unofficial solution, which is forcing the plugin hlsPlayback to load. But it didn't do for me. \nThis issue was closed last year. Is there any workaround by now?\nAny official way of forcing Flash or HLS playback?\nSafari 9.0.3 (11601.4.4)\nMac OS X El Capitain 10.11.3\nClappr 0.2.25\nTested on cdn.clappr.io\n. Thanks mike, I haven't thought about it. Not exactly a clean solution, but it should do it for now =)\n. I think you can add a \"preload\" attribute to your video tag. It gives a hint to the browser whether it should load the video or not, although it's up to the browser to decide. You can find more about the preload attribute here (https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video).\nI didn't find anything on the Clappr API about the preload though.\n. @towerz Am I doing something wrong? I tested on both Chrome and Firefox, and they were able to use the Flash playback. In Safari though, playback is still HTML.\n\nOSX 10.11.3 (15D21)\nSafari 9.0.3 (11601.4.4)\n. @towerz I'm using 'http://streaming50.sitehosting.com.br:1935/thalles/thalles/playlist.m3u8?DVR'.\nThat doesn't seem to be the problem, anyway. I've also tried with the default sample on the CDN, and I just tried copying the code you just posted.\n\nBut anyways...\nI just tried in another Mac, and it works perfectly. =D \nProbably something to do with my Flash Plugin, I imagine. Srry bout that.\n. @towerz it wasn't installed. I'm sorry, my bad, I failed to notice it. Once I installed Adobe's Flash Player, FlasHLS was able to detect it and ran.\n. Will do xD Thanks anyways\n. Thank you @towerz. =)\nIt didn't work for me though. I'm not writing in ES2015. I must have done something wrong. It should be something like the code below, shouldn't it?\njavascript\nClappr.CorePlugin.extend({\n        events :  {\n            click : 'click',\n        },\n        click : function() {\n            alert('yay, you clicked');\n        },\n})\n. Didn't know the \"get\" thingy would work. Throught it was part of the ES2015 specs. I'll take a look at that and write u back. Thank you!\n. Okay- I'll talke a closer look @ HLS playback then. Thank you =). I just published a plugin for pre-roll and post-roll. It still needs some work, but it does the job. I hope it helps.\nhttps://github.com/JMVTechnology/Clappr-Ads. ",
    "RadyAeg": "Is there way to listen to some error event? I have problem to capture error condition (404 error for example).\n. ",
    "siddhesharolkar": "HI, I am trying to implement network error handling.\nI tried with :\nplayer.listenTo(player, Clappr.Events.PLAYER_ERROR, function() { console.log(\"ERROR!\") });\nplayer.listenTo(player, Clappr.Events.PLAYBACK_ERROR, function() { console.log(\"playeback ERROR!\") });\ncontainer.on(Clappr.Events.CONTAINER_ERROR, function() { alert('$$==>CONTAINER_ERROR'); });\nbut none of this working for me.\nI am playing m3u8 file which is dynamically increasing.\nIn my case end tag is missing in m3u8 file.\nSo is it possible to get all these event without closing tag in m3u8 file?\nCan you please help me out in this.....\n. Hi leandromoreira,\nThanks for quick response.\nI have downloaded clappr.js version - 0.2.56.\nI have created sample HTML file : \nplay.txt\nWhen i run this file i am able to get only \"Inside PLAYER_PLAY event!\" in console.\nI have tried by putting invalid file source, still no error handled like 404.\nI tried with editing .m3u8 file with invalid path for .ts files\n. Hi Leandro,\nThanks for your help. I am able to add temporary solution for this issue. \nSolution : \nvar timeOutID = '';\nplayer.listenTo(player.core.getCurrentContainer(), Clappr.Events.CONTAINER_STATE_BUFFERING, function() {\n                if(timeOutID!==''){\n                    clearTimeout(timeOutID);\n                }\n                timeOutID = setTimeout(function() {\n                    if($(\".spinner-three-bounce\").css('display')=='block'){\n                        player.destroy(); // or show error message\n                        clearTimeout(timeOutID);\n                    }\n                }, 7000);\n            });\nIf loading continuous for 7 sec it will destroy player. \nI really appreciate for your valuable help. Thanks once again.\n. ",
    "costa": "1) Where can I find the list of external events (subscribeable with #on)?\n2) What is the simplest option to listen to playback events? Must I go through the trouble of creating a plugin just for this?\n. @towerz thanks a lot! this would make a fine addition to the docs\n\nOn 3 Aug 2016, at 06:41, Bruno Torres notifications@github.com wrote:\n@costa you can find a list of all events on the Events class. The player external events (the ones you can subscribe with #on) are the ones with PLAYER_ prefix, like:\nvar player = new Clappr.Player(...)\nplayer.on(Clappr.Events.PLAYER_PLAY, function() { ... })\nYou can also listen to these events with the events parameter:\nvar player = new Clappr.Player({\n  events: {\n    onPlay:  function() { ... }\n  }\n})\nWe have some issues with doc generation, which doesn't filter the events properly, so on the Player (class documentation)[http://clappr.github.io/classes/Player.html], for example, all internal events are exposed, instead of only the ones prefixed with PLAYER_.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "expandingfocus": "Hi there.\nI have trouble using the events with clappr and clappr-360. Maybe you can help me with it.\nI want to add a redirect event after playback has ended, but unfortunately it won't work. Unfortunately I am not into js-coding, which is why I can't figure it out so easily.\nThis is my code:\n```\n</p>\n<p>// The URL to the 360 video player \nvar Video360Url = 'VIDEO_URL;</p>\n<p>// Configure your Clappr player.\nvar PlayerInstance;\ncanAutoplay.video().then(function(o) {\nvar cap = o.result === true;\n PlayerInstance = new Clappr.Player({\nsource: Video360Url,\nposter: 'POSTER_URL',\nloop: 'false',\nautoPlay: cap,\nheight: '100%',\nwidth: '100%',\nhideMediaControl: 'true',\nchromeless: 'true',\nallowUserInteraction: 'false',\npreload: 'auto',\nplugins: \n{\ncontainer: [Video360],\n},\nparent: '.player',\nevents: {\n<strong>ended</strong>: function() { window.location.href = 'URL'; }\n}\n});\nPlayerInstance.getPlugin('click_to_pause').disable();\n});\n\n```\nNeither \"ended\" nor \"playback_ended\" works. \nI also tried this:\nPlayerInstance.on(Clappr.Events.PLAYER_ENDED, function() {window.location.href = 'URL';})\nCan anyone see what the problem might be?\nThanks a lot!. Thanks @thiagopnts for your reply!\nI've tried your code-snippet, but unfortunately it prevents the whole video from playing.\nWithout the playerinstance.on the video playback starts.\nWhile I have you \"on the phone\", on mobile devices the video could not be decoded: \"Error code: html5_video:3\" - but it works with the clappr-example-video. What do I have to keep track of when rendering the video to work with clappr on mobile devices?\nAnd is there a way to set the \"sensitivity\" or configure the gyro for mobile, because if I move the mobile device slighty the 360\u00b0 view totally freaks out.\nThanks a lot for your help and for the great work! I love the player :). > \n\nThanks @thiagopnts for your reply!\nI've tried your code-snippet, but unfortunately it prevents the whole video from playing.\nWithout the playerinstance.on the video playback starts.\nWhile I have you \"on the phone\", on mobile devices the video could not be decoded: \"Error code: html5_video:3\" - but it works with the clappr-example-video. What do I have to keep track of when rendering the video to work with clappr on mobile devices?\nAnd is there a way to set the \"sensitivity\" or configure the gyro for mobile, because if I move the mobile device slighty the 360\u00b0 view totally freaks out.\nThanks a lot for your help and for the great work! I love the player :)\n\nWell, I wasn't able to figure it out but I switched to videojs/pannellum, which suits all the parameters. anyway, thanks for your help!. ",
    "coveralls": "\nCoverage remained the same at 47.1% when pulling 5e7b6259705ab7baface6f63b0bd0ca457ccb8f3 on LeonardoCardoso:dragging-mouse-volume-bar into 3c5659718a1c767f3bfe8ec2cf380f37ad8f4ba2 on clappr:master.\n. \nCoverage decreased (-0.05%) to 47.04% when pulling 0a52cabc54163bcd5576a9202b5308ea0a3f7fa4 on LeonardoCardoso:dragging-mouse-volume-bar into 74c87f629d6d343fffed0863a200f78fc5a63cd6 on clappr:master.\n. \nCoverage decreased (-0.19%) to 46.9% when pulling 9b10b2f5c368c5fb4a33d5c829df4b27bea054f5 on LeonardoCardoso:dragging-mouse-volume-bar into 74c87f629d6d343fffed0863a200f78fc5a63cd6 on clappr:master.\n. \nCoverage decreased (-0.31%) to 46.79% when pulling 7c2a2a95bcb62df04cffadb5f6fa41114153c01e on LeonardoCardoso:dragging-mouse-volume-bar into 74c87f629d6d343fffed0863a200f78fc5a63cd6 on clappr:master.\n. \nCoverage decreased (-0.29%) to 46.81% when pulling 288432ff8d34c5c2d588be8792d7a4fd901906e8 on LeonardoCardoso:dragging-volume into 74c87f629d6d343fffed0863a200f78fc5a63cd6 on clappr:master.\n. \nCoverage decreased (-0.29%) to 46.81% when pulling 288432ff8d34c5c2d588be8792d7a4fd901906e8 on LeonardoCardoso:dragging-volume into 74c87f629d6d343fffed0863a200f78fc5a63cd6 on clappr:master.\n. \nCoverage decreased (-0.31%) to 46.79% when pulling b5cefff1201022e75056810dc400f5a9be66d346 on LeonardoCardoso:dragging-volume into 74c87f629d6d343fffed0863a200f78fc5a63cd6 on clappr:master.\n. \nCoverage decreased (-0.28%) to 46.81% when pulling b5cefff1201022e75056810dc400f5a9be66d346 on LeonardoCardoso:dragging-volume into 74c87f629d6d343fffed0863a200f78fc5a63cd6 on clappr:master.\n. \nCoverage decreased (-0.32%) to 46.77% when pulling fc5cdbaf1cb1ca5f949d3ecbe571d477f5da1117 on LeonardoCardoso:dragging-volume into 74c87f629d6d343fffed0863a200f78fc5a63cd6 on clappr:master.\n. \nCoverage decreased (-0.04%) to 47.06% when pulling 496aa996676bd6448503570b7733668b1b154324 on irongomme:hotfix/ios-fullscreen into 74c87f629d6d343fffed0863a200f78fc5a63cd6 on clappr:master.\n. \nCoverage increased (+0.02%) to 48.82% when pulling 037b7af16961121772e92bab7157386fb75d5462 on irongomme:feature/dbl-events into 48c94affdd787659cc1655469885eae8b0cfaa46 on clappr:master.\n. \nCoverage remained the same at 48.78% when pulling c26e438947d2bb0c0a96f7c77458b557274724c1 on revolter:patch-1 into 1d5be4b4d175f14385b7944a8a210198436ebcc3 on clappr:master.\n. \nCoverage decreased (-0.19%) to 48.07% when pulling 560d0093e2c27aed52a6d35be9973781858e69cd on flavioribeiro:master into 62a99174e874985a5e326b77dd584b5b96f43ede on clappr:master.\n. \nCoverage increased (+0.04%) to 47.83% when pulling b85dca4e8d0a417e3c3e23331138298dddd2144d on tjenkinson:master into 4f40ddb44db197276f37f22fe11b7db6a9c7e1d4 on clappr:master.\n. \nCoverage remained the same at 47.79% when pulling ddb55d57f44d80f9195ebc0e6de46a1ef68068de on tjenkinson:fullscreen-fix into 4f40ddb44db197276f37f22fe11b7db6a9c7e1d4 on clappr:master.\n. \nChanges Unknown when pulling 9b365f161703b60765e6aa7f8bf8ad64b7b80678 on tjenkinson:master into * on clappr:master*.\n. \nCoverage increased (+0.2%) to 70.579% when pulling 343b598ea69aa6066cb013692a1dfbd699e54d06 on greenkeeper-hls.js-0.6.0 into 22bbdeedb0b2a541c6187ec107c5a020af44d344 on master.\n. \nCoverage decreased (-0.05%) to 70.6% when pulling 6cfc64dfdfc00353c809988607d46538e73c81dc on jussike:mimetype-fix into c8d2d9de0cecce253f2f1de1c3d50ec7fd5c3f71 on clappr:master.\n. \nCoverage decreased (-0.05%) to 70.6% when pulling 90a47f06a8c35660c84c3cf3639f82e76c24a7d3 on jussike:mimetype-fix into c8d2d9de0cecce253f2f1de1c3d50ec7fd5c3f71 on clappr:master.\n. \nCoverage decreased (-0.3%) to 70.396% when pulling 215162a1bde53cc7ea85885c23e802bdb3763609 on npm-update-bump into 6da26b84c48bca70f10efde679b47cc948e4f2e9 on master.\n. \nCoverage decreased (-0.05%) to 70.6% when pulling a0fd8abbe6d44c8debdfd06cf015b280dad3ffca on npm-update-bump into 6da26b84c48bca70f10efde679b47cc948e4f2e9 on master.\n. \nCoverage decreased (-0.2%) to 70.418% when pulling b34d7d3455c7c9aa1bf3cca870810be7f45723bb on npm-update-bump into 6da26b84c48bca70f10efde679b47cc948e4f2e9 on master.\n. \nCoverage decreased (-0.07%) to 70.578% when pulling 2ba85374c28132da84e6f7679bb1bb4f487db14d on npm-update-bump into 6da26b84c48bca70f10efde679b47cc948e4f2e9 on master.\n. \nCoverage increased (+0.2%) to 70.611% when pulling e983e5ee34ee2c3a00b8b7911d894b116c3850a1 on feat-disable-keyboard-shortcuts into 2331a7614dd340a1147b342f7264292b2dc3adae on master.\n. \nCoverage increased (+0.2%) to 70.6% when pulling b4ada07406d0aaf0eb7a79b67b98e8bcd073ea38 on atomic-bump into 2331a7614dd340a1147b342f7264292b2dc3adae on master.\n. \nCoverage increased (+0.07%) to 70.464% when pulling b4ada07406d0aaf0eb7a79b67b98e8bcd073ea38 on atomic-bump into 2331a7614dd340a1147b342f7264292b2dc3adae on master.\n. \nCoverage remained the same at 70.748% when pulling 235fca75480ee4efac7f5aaa503aeed225c6313e on add-dist-in-bump into 92e26c972aa0e395098266eef6720d687207763e on master.\n. \nCoverage remained the same at 70.567% when pulling 35e3f9c8b7df9a1e3545723b26a83a05b432381f on update-dist into 6bcc9af9c4ba7cac6818b86f44a4d984e2806948 on master.\n. \nCoverage decreased (-0.2%) to 70.567% when pulling 5e7ad6309ce3c1b865231b17c35b63319b6f0a9b on fix-button-alignment into 894df0d91e7f9a14f2c32e74bf5b14572630302e on master.\n. \nCoverage decreased (-0.2%) to 70.567% when pulling 2f4b4c6ec96dae5cc56012562cd37e143c23af46 on fix-button-alignment into 894df0d91e7f9a14f2c32e74bf5b14572630302e on master.\n. \nCoverage decreased (-0.2%) to 70.649% when pulling c692f36dd457e2f4fba1c9d14dc5625cfaebc34d on greenkeeper-lodash.find-4.3.0 into 1d83e54efdd5c819b6d2a220a3c3c6dfbb74f4ed on master.\n. \nCoverage remained the same at 70.83% when pulling bfbdf14aa9234c9c922aa0a6bbbd810b6384be0e on greenkeeper-lodash.find-4.3.0 into 1d83e54efdd5c819b6d2a220a3c3c6dfbb74f4ed on master.\n. \nCoverage decreased (-0.2%) to 70.649% when pulling c8d17acd1c757e1578132ad3bb20204fc669cffa on greenkeeper-lodash.result-4.3.0 into 1d83e54efdd5c819b6d2a220a3c3c6dfbb74f4ed on master.\n. \nCoverage decreased (-0.2%) to 70.649% when pulling 88ade49efe1b69285e451025acb75ab9b303b65e on greenkeeper-lodash.result-4.3.0 into 1d83e54efdd5c819b6d2a220a3c3c6dfbb74f4ed on master.\n. \nCoverage decreased (-0.2%) to 70.627% when pulling ebeea250526339affb117923c284e5f3ba23049d on greenkeeper-lodash.uniqby-4.3.0 into 1d83e54efdd5c819b6d2a220a3c3c6dfbb74f4ed on master.\n. \nCoverage remained the same at 70.83% when pulling a8ec08533e25a2dba01843f64ecc55e0749a6773 on greenkeeper-lodash.uniqby-4.3.0 into 1d83e54efdd5c819b6d2a220a3c3c6dfbb74f4ed on master.\n. \nCoverage decreased (-0.2%) to 70.649% when pulling f8032f2f6183f678fa1c82816c8efb332de5bdbc on latest-firefox-travis into 1d83e54efdd5c819b6d2a220a3c3c6dfbb74f4ed on master.\n. \nCoverage remained the same at 70.807% when pulling d4367be1bb6405290354ccc03ad5fcb082703c21 on fix-option-event-listeners into 8c01a7b7f5305d731038e4124b85645a4d7e5b9a on master.\n. \nCoverage decreased (-0.2%) to 70.666% when pulling f006c4b1291f0c8ed5fd5bcae96ac2a1c8dc3f0f on jussike:livedurationfix into a048becb72bc095960dd7ec3a89043dc246dde06 on clappr:master.\n. \nCoverage increased (+0.05%) to 70.891% when pulling e2da8ca994b3d2c11a80fcb4b1ff47aaeff53ceb on greenkeeper-hls.js-0.6.1 into b698c8dc32989329bca601fb37ad79d9955a658c on master.\n. \nCoverage increased (+0.2%) to 70.515% when pulling c80d653963c4249e96dfefba05d54d35cc7bbc51 on greenkeeper-hls.js-0.6.1 into 4af9c3e1e474473c331f1ae6f1b1670ff2217132 on master.\n. \nCoverage decreased (-0.2%) to 70.675% when pulling ac52289f12d47310824cab5f899af3faf7a0bcde on fix-PLAYBACK_PROGRESS-times-hls-dvr into b698c8dc32989329bca601fb37ad79d9955a658c on master.\n. \nCoverage increased (+0.0009%) to 70.847% when pulling 1103fc4f7f484041f4e4b5204735596b24fc6851 on jussike:flashls-playbacktype-fix into b698c8dc32989329bca601fb37ad79d9955a658c on clappr:master.\n. \nCoverage increased (+0.05%) to 70.562% when pulling 82c400bd1bd1c51f846794b31c20fa3fc08eb71a on PNixx:master into 1419c451428d2b0f2fa23b37ab6a4d2c37b6f2ec on clappr:master.\n. \nCoverage remained the same at 70.546% when pulling e2393c771a4ed639551a523ede362b8d17d31f29 on greenkeeper-jscs-3.0.0 into 7e678fe780ec1f5af6ec138b6a96638ae8f2ae6a on master.\n. \nCoverage decreased (-0.2%) to 70.322% when pulling 342f0138fc0d5e847094534d5bda248589aece42 on greenkeeper-jscs-3.0.1 into 7e678fe780ec1f5af6ec138b6a96638ae8f2ae6a on master.\n. \nCoverage decreased (-0.03%) to 70.515% when pulling 7cc5ac42ec24691eca6a235b391cb709a7a7ff95 on non-fatal-hlsjs-errors into 7e678fe780ec1f5af6ec138b6a96638ae8f2ae6a on master.\n. \nCoverage decreased (-0.02%) to 70.47% when pulling f0dd4189f78ba35bc06a3a9ae56294bdc10016ec on greenkeeper-jscs-3.0.2 into 0de23c1eaab4ff83f7a6c2436f186508449e52e7 on master.\n. \nCoverage decreased (-0.2%) to 70.291% when pulling dbd0008d99cb8cc66c950834cb5649c6e66bdbae on greenkeeper-webpack-1.13.0 into 0de23c1eaab4ff83f7a6c2436f186508449e52e7 on master.\n. \nCoverage increased (+0.2%) to 70.492% when pulling 46e674aa52f2052ba6eacf97b06ab3b1f513f134 on greenkeeper-jscs-3.0.3 into cdd5f91d26904f8979c629eb6382957633efa7e8 on master.\n. \nCoverage decreased (-0.04%) to 70.207% when pulling c594318f94780644f0174c5d88cd06dce3aec1f8 on gamtiq:enhance-player into 0ba5799c022a32f4aa70ff93528718832ca270b6 on clappr:master.\n. \nCoverage increased (+0.003%) to 70.247% when pulling 36c2c2a3c4df9394d4334529e877a301ed8ccfee on gamtiq:enhance-player into 0ba5799c022a32f4aa70ff93528718832ca270b6 on clappr:master.\n. \nCoverage decreased (-0.2%) to 70.247% when pulling 95d0d3d53bfde8ea5c4a8289e2df76a35ef6418b on gamtiq:enhance-player into a5739a2c76f4c501791e18229b2ca3abb0768a6a on clappr:master.\n. \nCoverage increased (+0.2%) to 70.49% when pulling d087a108f2f60b0f3909380d3e502ed5ef7b4f0c on greenkeeper-karma-mocha-1.0.1 into 0ba5799c022a32f4aa70ff93528718832ca270b6 on master.\n. \nCoverage increased (+0.2%) to 70.423% when pulling ac3435c6aba39a202caca1fc5b4f6f9ec732af4a on greenkeeper-karma-chrome-launcher-1.0.1 into 0ba5799c022a32f4aa70ff93528718832ca270b6 on master.\n. \nCoverage increased (+0.2%) to 70.49% when pulling cb1505ac2ec50fe6ba624ec9931c1511127d7205 on greenkeeper-karma-coverage-1.0.0 into 0ba5799c022a32f4aa70ff93528718832ca270b6 on master.\n. \nCoverage increased (+0.2%) to 70.445% when pulling 7317a887aa44bcecf1e65a7449e33fbb5faa3208 on greenkeeper-karma-cli-1.0.0 into 0ba5799c022a32f4aa70ff93528718832ca270b6 on master.\n. \nCoverage remained the same at 70.244% when pulling 1dfda7a80da756a61f3958f6f082f2114b66a628 on greenkeeper-karma-firefox-launcher-1.0.0 into 0ba5799c022a32f4aa70ff93528718832ca270b6 on master.\n. \nCoverage remained the same at 70.247% when pulling 1fd160429cc46bad73221ccb6631067ea87f0c92 on greenkeeper-babel-plugin-add-module-exports-0.2.0 into c4c8f7615c8715dca0fb1c35c3277a9cc13f62e2 on master.\n. \nChanges Unknown when pulling e11797db0ec7900cb28ef37e67b65e76eebf1e19 on greenkeeper-babel-plugin-add-module-exports-0.2.0 into * on master*.\n. \nCoverage remained the same at 70.024% when pulling f4af2d87d8514453930d036b685475c03730b02c on fixed-compass-mixins into bc0340b6942b98b69e6b8a86d63bb8a4d2e45122 on master.\n. \nCoverage decreased (-0.03%) to 69.993% when pulling 42718945031e4c57fef146bc4c47991b66e62f52 on fix-invalidstateerror-ie11-hls-playback into bc0340b6942b98b69e6b8a86d63bb8a4d2e45122 on master.\n. \nCoverage increased (+0.2%) to 70.184% when pulling a4cf42d9cd351ebf0745c0d792a8f3a7d7dea170 on lower-noop-noise-cpu into bc0340b6942b98b69e6b8a86d63bb8a4d2e45122 on master.\n. \nCoverage increased (+0.2%) to 70.247% when pulling ffdd795f5684e2a3b488f94706a5102a26d947f6 on noop-minor-style-tweak into bc0340b6942b98b69e6b8a86d63bb8a4d2e45122 on master.\n. \nCoverage decreased (-0.04%) to 69.984% when pulling 88f70d56baba4c1cb22bd88c70686fb17c2309af on add-dvr-methods-to-player into bc0340b6942b98b69e6b8a86d63bb8a4d2e45122 on master.\n. \nCoverage decreased (-0.09%) to 69.909% when pulling 2b10fded178b09f0c199138418440509acf9613f on feature/private-vars-player into 8e9875fdd33578e8fccd70cad28d1ee301d45f77 on master.\n. \nCoverage decreased (-0.07%) to 69.924% when pulling 22dc43dc2781a3d20ac8bd681cd2f954ef5f4ccb on feature/private-vars-html5-video into 8e9875fdd33578e8fccd70cad28d1ee301d45f77 on master.\n. \nCoverage increased (+0.2%) to 70.153% when pulling ebff6326bfaad6a4f7f1ac9907cbd30fcb40036b on feature/private-vars-img-playback into 8e9875fdd33578e8fccd70cad28d1ee301d45f77 on master.\n. \nCoverage increased (+0.2%) to 70.153% when pulling 678c15e314e20607c334925d21db4b5b33284cab on feature/private-vars-on-flash into 8e9875fdd33578e8fccd70cad28d1ee301d45f77 on master.\n. \nCoverage increased (+0.1%) to 70.138% when pulling 4f7b39e7b994bb3fcd1f11022af38e97b21b6e7f on feature/private-vars-noop into 8e9875fdd33578e8fccd70cad28d1ee301d45f77 on master.\n. \nCoverage increased (+0.2%) to 70.113% when pulling d62a3f99fe5de621d35a36dc9901b79628c39437 on tjenkinson-patch-1 into e6ef7c86757c5651be01f02cb8538e9bd3b3962a on master.\n. \nCoverage decreased (-0.2%) to 69.869% when pulling f537a53d23564f86fd6eb07b1c18b267b89fa48c on remove-compass-mixins into f2731a8fdfec232ed2cfff221a486c7d2cc381c8 on master.\n. \nCoverage remained the same at 70.129% when pulling a79b9a7230e84c3aba6f6b1e47b412142f489eeb on tjenkinson-patch-2 into c218c9a5e362a475da27dd3c3ed3ef310bf079ca on master.\n. \nCoverage remained the same at 70.129% when pulling 1f038bad876eef38144123c88f6c10c02a9fcb14 on greenkeeper-sync-pkg-0.7.0 into c218c9a5e362a475da27dd3c3ed3ef310bf079ca on master.\n. \nCoverage remained the same at 71.213% when pulling 6377a7992470f4f5b161a91929a3b62ce7a6ba42 on greenkeeper-sync-pkg-0.7.0 into 027553b6e73ab8847917019db34c3039a29b8677 on master.\n. \nCoverage decreased (-0.02%) to 69.973% when pulling 3c33821c8bfffd7f2a2052ad882cc530b3c23821 on feature/object-source into a3802ba0a060d2502b7af76395879a9ed0a4fae7 on master.\n. \nCoverage remained the same at 70.166% when pulling 1542b6dc27fdf76ecfb14fcc948581d8ca8c40d5 on fix-poster-play-hiding into efbacded402b6cc1872ea48f5c182ae0867f062f on master.\n. \nCoverage decreased (-0.2%) to 69.922% when pulling 711e0ff8403de2cf9339ee356bf8ff5cf8d3a4d9 on fix-load-single-source into efbacded402b6cc1872ea48f5c182ae0867f062f on master.\n. \nCoverage remained the same at 70.166% when pulling 39c3ac48f784a3f61e2afda3e775d869e63f22b7 on fix-sources-plugin-future-sources into efbacded402b6cc1872ea48f5c182ae0867f062f on master.\n. \nCoverage decreased (-0.2%) to 69.996% when pulling 4483a3ca137c62279f2d94ae030cc84345c9f056 on add_html5_tag_video_crossorigin into efbacded402b6cc1872ea48f5c182ae0867f062f on master.\n. \nCoverage increased (+0.07%) to 70.239% when pulling 4483a3ca137c62279f2d94ae030cc84345c9f056 on add_html5_tag_video_crossorigin into efbacded402b6cc1872ea48f5c182ae0867f062f on master.\n. \nCoverage increased (+0.04%) to 70.206% when pulling e8aa22921a10bf91777dc112a82a925e5ecac77e on add_html5_tag_video_crossorigin into efbacded402b6cc1872ea48f5c182ae0867f062f on master.\n. \nCoverage decreased (-0.2%) to 69.984% when pulling 5160b7d597c2c9fd5f2de1fb3bc415dcbe25f4bc on add_html5_tag_video_crossorigin into efbacded402b6cc1872ea48f5c182ae0867f062f on master.\n. \nCoverage decreased (-0.1%) to 70.029% when pulling b1910770ff581cd5a37ca3ea1a8c2a93b535bec3 on add_html5_tag_video_crossorigin into efbacded402b6cc1872ea48f5c182ae0867f062f on master.\n. \nCoverage decreased (-0.06%) to 70.147% when pulling df7a16408c9ebc1d367a40eee025bdc6c64f4cff on fix-assets-base-url into 41a8965ebef962aa7776e1c96a49a5680083f834 on master.\n. \nCoverage decreased (-0.06%) to 70.147% when pulling df7a16408c9ebc1d367a40eee025bdc6c64f4cff on fix-assets-base-url into 41a8965ebef962aa7776e1c96a49a5680083f834 on master.\n. \nCoverage decreased (-0.3%) to 69.924% when pulling 8b0588dda0ee45f404ecbba8cce0700dd754fdd9 on fix-assets-base-url into 41a8965ebef962aa7776e1c96a49a5680083f834 on master.\n. \nCoverage decreased (-0.06%) to 70.147% when pulling 7cf02f104412c4ccef981b998ab6f6f27793aa3e on fix-assets-base-url into 41a8965ebef962aa7776e1c96a49a5680083f834 on master.\n. \nCoverage decreased (-0.2%) to 70.047% when pulling be347eb7bc0e888ac2849b97cd30097c78844745 on fix-assets-base-url into 41a8965ebef962aa7776e1c96a49a5680083f834 on master.\n. \nCoverage decreased (-0.2%) to 70.002% when pulling c9704e57f9be34ec94579a303f8b9cbf9ffdedf9 on fix-assets-base-url into 41a8965ebef962aa7776e1c96a49a5680083f834 on master.\n. \nCoverage decreased (-0.5%) to 69.72% when pulling 6966729e686f9a549eda440663e48db7f8c4018c on feat-mock-window into 8be7b95660992f80576cace89dc0d2e8dc9fd4cf on master.\n. \nCoverage remained the same at 70.239% when pulling bfc09b35ee58ec029fd448c8e5a714342ef4cb10 on downgrade-webworkify into 1c8028416944c68c2e9d9bff70d1808186ee089b on master.\n. \nCoverage remained the same at 70.239% when pulling f2f207e04ec5c916b335eeda218ba1cb52ccd02c on thiagopnts-patch-1 into d5ad13435099dc348e550c8b7d10897aaeab3553 on master.\n. \nCoverage decreased (-0.3%) to 69.956% when pulling ffadec2f03579ed9e7f382f93e510fe6fda65776 on add_new_event_play_intent into 18da1a1d230879b3c3ee6c2163ec9aa36ca352eb on master.\n. \nCoverage increased (+0.4%) to 70.642% when pulling 12b24884858b4446997d6b3bc2e7d6a39b66b4ff on add_new_event_play_intent into 18da1a1d230879b3c3ee6c2163ec9aa36ca352eb on master.\n. \nCoverage decreased (-0.07%) to 70.317% when pulling 0dc4717d767aa47e802e8aafc556cdf9ac419c0c on split_readme into c5cbcfa03152bd60b899982f87879d74f8d60a56 on master.\nI'm not good at Math.\n. \nCoverage increased (+0.2%) to 70.539% when pulling 52939a8bb433abb1434ef53b901e86e1517b4531 on split_readme into c5cbcfa03152bd60b899982f87879d74f8d60a56 on master.\n. \nCoverage remained the same at 70.561% when pulling 93f5476b00bac0b80619bcdfdef4c2da483e0d65 on leftees:master into 044f2fddac14cc1643c7d0b69ac20c85cd0ab966 on clappr:master.\n. \nCoverage increased (+0.2%) to 70.561% when pulling 45ca685bc0f59b02967c6d9cbda542ae5114d92d on greenkeeper-file-loader-0.9.0 into 4d4f6b14227b4b41e7b152b3972b01a83f9e10dc on master.\n. \nCoverage remained the same at 71.213% when pulling cd3bd5a7ecac5d917c6ec1739e812c9679adc96b on greenkeeper-file-loader-0.9.0 into 027553b6e73ab8847917019db34c3039a29b8677 on master.\n. \nCoverage remained the same at 70.561% when pulling b1a70cfe3ec4162221734e8ee302f1ba408a2634 on plugins-showcase into 1ac1779361a69663cf95a85576cf4484653f2c2e on master.\n. \nCoverage increased (+0.02%) to 70.561% when pulling a13ed2d0974456a3f01083644022c7f0e581a163 on greenkeeper-svg-inline-loader-0.5.0 into f0f5c58a7da0ea6509b3c8ff34eb8fe71c5de41d on master.\n. \nCoverage decreased (-0.2%) to 70.384% when pulling 93cdb6d13dd9cf7c80237c0836fcec7c0f1b994d on greenkeeper-svg-inline-loader-0.6.0 into f0f5c58a7da0ea6509b3c8ff34eb8fe71c5de41d on master.\n. \nCoverage increased (+0.02%) to 70.561% when pulling 1893a4fe152e8ded77fc2cfae6047118f291469c on greenkeeper-webworkify-webpack-1.1.1 into f0f5c58a7da0ea6509b3c8ff34eb8fe71c5de41d on master.\n. \nCoverage decreased (-0.02%) to 71.191% when pulling 8cefbe878435f9fa5705bee0e5f4c337d9c51239 on greenkeeper-webworkify-webpack-1.1.1 into 027553b6e73ab8847917019db34c3039a29b8677 on master.\n. \nChanges Unknown when pulling ba0476724bad509f2816cef6a3a5012fc3dbd71b on greenkeeper-webworkify-webpack-1.1.1 into * on master*.\n. \nChanges Unknown when pulling ba0476724bad509f2816cef6a3a5012fc3dbd71b on greenkeeper-webworkify-webpack-1.1.1 into * on master*.\n. \nCoverage remained the same at 71.213% when pulling ba0476724bad509f2816cef6a3a5012fc3dbd71b on greenkeeper-webworkify-webpack-1.1.1 into f0ee012d72e5b0de141e7b86ca6d599d534a8c9c on master.\n. \nCoverage increased (+0.3%) to 70.7% when pulling 67e2cab0356eb9c6a1dc1bc4ea4d8d8dd04ff1d9 on fixes_destroy_twice_on_playback into be9c10c0e5b329378290bffbd617aeab727ea5bf on master.\n. \nCoverage increased (+0.1%) to 70.457% when pulling a8267d8544bcd28ef8b8f9d475daecc5b7b927db on fixes_destroy_twice_on_playback into be9c10c0e5b329378290bffbd617aeab727ea5bf on master.\n. \nCoverage increased (+0.3%) to 70.7% when pulling 16010348ed02ce7bcb88c5b43abea94fc2fa7c45 on greenkeeper-karma-mocha-1.1.0 into dce920b7368cd1568fce69b1c9ccea1209ed4a72 on master.\n. \nCoverage remained the same at 71.213% when pulling e5c1bbde8568e937a4df651ddf1201d121be46ee on greenkeeper-karma-mocha-1.1.0 into 027553b6e73ab8847917019db34c3039a29b8677 on master.\n. \nChanges Unknown when pulling 0a8c3cd8d2861c07acc22786d80d27bdd2a4c671 on greenkeeper-karma-mocha-1.1.0 into * on master*.\n. \nChanges Unknown when pulling 0a8c3cd8d2861c07acc22786d80d27bdd2a4c671 on greenkeeper-karma-mocha-1.1.0 into * on master*.\n. \nCoverage decreased (-0.2%) to 71.06% when pulling 0a8c3cd8d2861c07acc22786d80d27bdd2a4c671 on greenkeeper-karma-mocha-1.1.0 into f0ee012d72e5b0de141e7b86ca6d599d534a8c9c on master.\n. \nChanges Unknown when pulling 1d14f742a9c04b080d5f5b44a726d2f3080d8726 on greenkeeper-karma-mocha-1.1.0 into * on master*.\n. \nChanges Unknown when pulling 1d14f742a9c04b080d5f5b44a726d2f3080d8726 on greenkeeper-karma-mocha-1.1.0 into * on master*.\n. \nCoverage remained the same at 71.191% when pulling 1d14f742a9c04b080d5f5b44a726d2f3080d8726 on greenkeeper-karma-mocha-1.1.0 into 1228c89eec44d551a87bb38941338891958f412f on master.\n. \nCoverage increased (+0.2%) to 70.574% when pulling c108ef1799fe3b91f33ca81a03d24b04d471514e on greenkeeper-karma-1.1.0 into dce920b7368cd1568fce69b1c9ccea1209ed4a72 on master.\n. \nCoverage increased (+0.2%) to 70.574% when pulling f56b3a2c5c3d03c1f93eff2074700e27fb964a9e on greenkeeper-sass-loader-4.0.0 into dce920b7368cd1568fce69b1c9ccea1209ed4a72 on master.\n. \nCoverage decreased (-0.02%) to 71.191% when pulling 6f1c1d074790e1e806b7414e713098e310017c7e on greenkeeper-sass-loader-4.0.0 into 027553b6e73ab8847917019db34c3039a29b8677 on master.\n. \nCoverage decreased (-0.2%) to 70.457% when pulling b1fc3e1c7b434796e4820629edb26df058292b5e on greenkeeper-eslint-3.0.0 into ca4e3a465a8a0707032c2c54f10a599cd056f816 on master.\n. \nCoverage decreased (-0.01%) to 70.687% when pulling f4268693729194090d6aaffbe14c1d8c08bd8dfa on tjenkinson-patch-1 into be60c54e4da689d30b0b67636b252b66dacc91dd on master.\n. \nCoverage increased (+0.4%) to 71.117% when pulling 321b865f4a245659cdd38b7736f1786231dffb4a on introducing_i18n into 507e579f7e5f5da816367853cfcca8df16afb95a on master.\n. \nCoverage increased (+0.4%) to 71.089% when pulling e39982dc4dd42af9485eab8ffcf3e36ec856606e on introducing_i18n into a32ee389eabea1eaee6238ccd56698efec2d36e8 on master.\n. \nCoverage increased (+0.2%) to 70.853% when pulling 4d4cb735f7ad76f5b6f78a98078a6d4e523a1c13 on introducing_i18n into a32ee389eabea1eaee6238ccd56698efec2d36e8 on master.\n. \nCoverage increased (+0.4%) to 71.049% when pulling 99f2fe5bfb35b18c3ca0d2d6182c084a2ec979e6 on introducing_i18n into a32ee389eabea1eaee6238ccd56698efec2d36e8 on master.\n. \nCoverage increased (+0.4%) to 71.058% when pulling 2c10e9a25f7d8df19d4bdebe4539e9652ba1f893 on introducing_i18n into a32ee389eabea1eaee6238ccd56698efec2d36e8 on master.\n. \nCoverage increased (+0.4%) to 71.08% when pulling 96255038f046975b60761b45ed1de1b2d6a7cf12 on introducing_i18n into 88c87836da24a4af7f378cd9dd736ef20f358bb5 on master.\n. \nCoverage increased (+0.4%) to 71.08% when pulling 5fdb7ae1935686bc5958fca139a48d39b42e4e7e on introducing_i18n into 0943492f3d86c1bf49a5e1958f6048d6c38962bb on master.\n. \nCoverage remained the same at 71.08% when pulling e8bf4466f7548ba2780e1123f181452755f0a16e on bikegriffith:fix_button_firing_form into 61e87b1c467ea3791b371536beb09d57ff2b6965 on clappr:master.\n. \nCoverage remained the same at 71.08% when pulling 4a467d32f9e65c98c4b945f4a57d1a4740a654eb on greenkeeper-eslint-3.0.1 into 861674828891af72ef43097d5fb375bad4340f14 on master.\n. \nCoverage decreased (-0.5%) to 70.417% when pulling 6f8566e6dd2ab484c88c4738871a72a5b0a8a8b5 on hls-playback-extrapolate-time into 590d4daec518f01d785762913820841b6bf3fa1c on master.\n. \nCoverage decreased (-0.5%) to 70.417% when pulling a0f92bfc68692d4e7311f9167d7136856ba169a2 on hls-playback-extrapolate-time into 590d4daec518f01d785762913820841b6bf3fa1c on master.\n. \nCoverage decreased (-0.5%) to 70.421% when pulling 969fcf347f145cdc30d0f825dc03acf54a00f3ee on hls-playback-extrapolate-time into 590d4daec518f01d785762913820841b6bf3fa1c on master.\n. \nCoverage decreased (-0.2%) to 71.444% when pulling b16d36c52149e2f384c8d5abab37b4ab354ec078 on hls-playback-extrapolate-time into 0f37ec649d958a7c220857db14fec4948a68f305 on master.\n. \nCoverage increased (+0.2%) to 71.08% when pulling 63039da1ba3e75c9fc8cd91cb839fb572d2e719f on greenkeeper-karma-1.1.1 into 590d4daec518f01d785762913820841b6bf3fa1c on master.\n. \nChanges Unknown when pulling 4b44c53e0daa4a8e71a6b35ffa8d922b100e44ee on greenkeeper-karma-1.1.1 into * on master*.\n. \nChanges Unknown when pulling a61987104f5f588d06e140d7f1156bc7aa582db2 on greenkeeper-karma-1.1.1 into * on master*.\n. \nChanges Unknown when pulling a61987104f5f588d06e140d7f1156bc7aa582db2 on greenkeeper-karma-1.1.1 into * on master*.\n. \nCoverage remained the same at 71.213% when pulling a61987104f5f588d06e140d7f1156bc7aa582db2 on greenkeeper-karma-1.1.1 into f0ee012d72e5b0de141e7b86ca6d599d534a8c9c on master.\n. \nCoverage remained the same at 71.106% when pulling 8b8e7518d6cff8b1982f932ed92a9c9835f54a00 on greenkeeper-svg-inline-loader-0.6.1 into b2c58fa2ccf2618d8f13e6364f9b8f368b3a48fa on master.\n. \nCoverage increased (+0.2%) to 71.121% when pulling ded3e88e33cd29dc48b4fd1b6e47a054a580b763 on html5-autoplay-call-play into 8ec0eaaf4f44501b385c22207ecc5fd404a33afa on master.\n. \nCoverage increased (+0.3%) to 71.187% when pulling edc0c41b9b8203e6fec5b151cd972de079f49cc1 on html5-autoplay-call-play into 8ec0eaaf4f44501b385c22207ecc5fd404a33afa on master.\n. \nCoverage increased (+0.2%) to 71.106% when pulling e358d03e8593165b8e3f400bafb295696548b3ce on DerivcoHK:dev into 8ec0eaaf4f44501b385c22207ecc5fd404a33afa on clappr:master.\n. \nCoverage increased (+0.2%) to 71.121% when pulling 3095fd9b22d3dd7112bffbfc972669801d22ecae on greenkeeper-webworkify-webpack-1.1.2 into 8ec0eaaf4f44501b385c22207ecc5fd404a33afa on master.\n. \nCoverage remained the same at 71.213% when pulling 82224efd41b4d302a15cb8857e3ad5c268a740a5 on greenkeeper-webworkify-webpack-1.1.2 into 027553b6e73ab8847917019db34c3039a29b8677 on master.\n. \nChanges Unknown when pulling 5c188a6e4830ad742d34888a009b726922455020 on greenkeeper-webworkify-webpack-1.1.2 into * on master*.\n. \nCoverage decreased (-0.2%) to 71.06% when pulling 5c188a6e4830ad742d34888a009b726922455020 on greenkeeper-webworkify-webpack-1.1.2 into f0ee012d72e5b0de141e7b86ca6d599d534a8c9c on master.\n. \nCoverage remained the same at 71.213% when pulling 5c188a6e4830ad742d34888a009b726922455020 on greenkeeper-webworkify-webpack-1.1.2 into f0ee012d72e5b0de141e7b86ca6d599d534a8c9c on master.\n. \nChanges Unknown when pulling 201185e593f7e7763a75ac3008325ab5ceda2d6d on greenkeeper-webworkify-webpack-1.1.2 into * on master*.\n. \nCoverage remained the same at 71.121% when pulling 26a36d183600c2efb3bd2e903f454cf26f2b6bdd on greenkeeper-webworkify-webpack-1.1.3 into 84318ce2b641b96116129be7d1a6e2273ca9e858 on master.\n. \nCoverage remained the same at 71.213% when pulling a623b56bd7b64c62406189238ec9b713a7124cb3 on greenkeeper-webworkify-webpack-1.1.3 into 027553b6e73ab8847917019db34c3039a29b8677 on master.\n. \nChanges Unknown when pulling 8252d9abccb23d98adf6eb0a9531a594f140483e on greenkeeper-webworkify-webpack-1.1.3 into * on master*.\n. \nChanges Unknown when pulling 8252d9abccb23d98adf6eb0a9531a594f140483e on greenkeeper-webworkify-webpack-1.1.3 into * on master*.\n. \nCoverage remained the same at 71.213% when pulling 8252d9abccb23d98adf6eb0a9531a594f140483e on greenkeeper-webworkify-webpack-1.1.3 into f0ee012d72e5b0de141e7b86ca6d599d534a8c9c on master.\n. \nChanges Unknown when pulling 474b1d05d96fce1829f0acbe9b0b37efad44bfee on greenkeeper-webworkify-webpack-1.1.3 into * on master*.\n. \nCoverage remained the same at 71.121% when pulling d7f7e412ed119ef16607b7bda8ef8cfaecbc6bf3 on greenkeeper-eslint-3.1.0 into 84318ce2b641b96116129be7d1a6e2273ca9e858 on master.\n. \nCoverage remained the same at 71.213% when pulling 9e98440701cd5e3a1c0bb329df39863c170c2311 on greenkeeper-eslint-3.1.0 into 027553b6e73ab8847917019db34c3039a29b8677 on master.\n. \nChanges Unknown when pulling 66238da708dcff247d0b3b05d50ec1fd43575cc9 on greenkeeper-eslint-3.1.0 into * on master*.\n. \nChanges Unknown when pulling 66238da708dcff247d0b3b05d50ec1fd43575cc9 on greenkeeper-eslint-3.1.0 into * on master*.\n. \nCoverage remained the same at 71.213% when pulling 66238da708dcff247d0b3b05d50ec1fd43575cc9 on greenkeeper-eslint-3.1.0 into f0ee012d72e5b0de141e7b86ca6d599d534a8c9c on master.\n. \nCoverage increased (+0.07%) to 71.191% when pulling 2e748d512c2e9076d8ce034001c9eef9921a7aa1 on feat-fullscreen-availability-detection into 84318ce2b641b96116129be7d1a6e2273ca9e858 on master.\n. \nCoverage increased (+0.07%) to 71.191% when pulling c4955d8d0908887e5a93c10b160d10d976d62722 on feat-fullscreen-availability-detection into 84318ce2b641b96116129be7d1a6e2273ca9e858 on master.\n. \nCoverage increased (+0.07%) to 71.191% when pulling 2e802aef98664ab309e91e27f7e217ba86e758a9 on feat-fullscreen-availability-detection into 84318ce2b641b96116129be7d1a6e2273ca9e858 on master.\n. \nCoverage decreased (-0.006%) to 71.206% when pulling fd109c5c2364fb7b94304bc91c9cc6ad8be7eeed on stanogurnik:remove-dulicate-event-listener-in-ga-plugin into 93ba06710570245b6e20e73a9d62faa5cafbfd81 on clappr:master.\n. \nCoverage remained the same at 71.338% when pulling 233da5725fa97dab8af4b33298e2968157d1ee5f on greenkeeper-webworkify-webpack-1.1.4 into a4ca8538178641a9db55c663868784c2a1197b70 on master.\n. \nCoverage decreased (-0.02%) to 71.316% when pulling a5ad54858b2f530956b53b1256dbc812e864cdd3 on sjlu:master into a4ca8538178641a9db55c663868784c2a1197b70 on clappr:master.\n. \nCoverage remained the same at 71.338% when pulling 818436fc8bb3bc10190421086c2648991361ec8e on sjlu:isAudioOnly-patch into a4ca8538178641a9db55c663868784c2a1197b70 on clappr:master.\n. \nCoverage remained the same at 71.338% when pulling 45098ed88d63e4633e40acb7af5a4ca3fd52f859 on sjlu:extmatch-patch into a4ca8538178641a9db55c663868784c2a1197b70 on clappr:master.\n. \nCoverage remained the same at 71.691% when pulling ed8a1f6688b3a7d0cbe4f889b5f3bf7e5d66068c on greenkeeper-karma-coverage-1.1.1 into 42583d68221ac0f45eeae3c4163e014dabd0595f on master.\n. \nCoverage remained the same at 71.691% when pulling bf231ed244dc7c9a89e3660d81cfb1d50af16e6c on greenkeeper-webworkify-webpack-1.1.5 into 59de479351e3e3be850a784e50ba439f043d531d on master.\n. \nChanges Unknown when pulling e67f0c21aeca13531d47c975840b65df782caf21 on greenkeeper-webworkify-webpack-1.1.5 into * on master*.\n. \nCoverage decreased (-0.006%) to 71.632% when pulling 535a6ab15ce9f3ac9ed39e335038c12f6734a177 on tjenkinson-patch-1 into 429020503fe039e0d957d8c813a92d2e651281cd on master.\n. \nCoverage decreased (-0.06%) to 71.597% when pulling 293535355c7a24e798573eedcaff766abe200b8a on feat-hls-extrapolate-duration into eeabd25f606c1d70c9417e11a9acf9752f7adee2 on master.\n. \nCoverage remained the same at 71.654% when pulling d33512897590b62d26113553c25aed41ebf92073 on greenkeeper-mocha-3.0.0 into eeabd25f606c1d70c9417e11a9acf9752f7adee2 on master.\n. \nCoverage remained the same at 71.654% when pulling 333297d943001d9f1e1fc13b4e7c39f51e2b53a5 on greenkeeper-mocha-3.0.1 into eeabd25f606c1d70c9417e11a9acf9752f7adee2 on master.\n. \nCoverage remained the same at 71.644% when pulling 9c6910c8a6f77680b01ce74b2004e79e2e5339f0 on greenkeeper-mocha-3.0.2 into 1efbddf04a1aad4fc3d0aa7ebbfa94e90708b322 on master.\n. \nCoverage decreased (-0.02%) to 71.623% when pulling db694620f017a5327c9e300c85e05bd7fc218909 on michaelcunningham19:bugfix/poster-flexbox-prefixing into 1efbddf04a1aad4fc3d0aa7ebbfa94e90708b322 on clappr:master.\n. \nCoverage remained the same at 71.644% when pulling 62c1754a1fd9a7bbbce2ac665aa0ac181ded43e8 on michaelcunningham19:bugfix/poster-flexbox-prefixing into 1efbddf04a1aad4fc3d0aa7ebbfa94e90708b322 on clappr:master.\n. \nCoverage decreased (-0.02%) to 71.623% when pulling 1385b7ca588809f941d8b25d78ae16a5a5d1c664 on improve-no-op-style into 1efbddf04a1aad4fc3d0aa7ebbfa94e90708b322 on master.\n. \nCoverage increased (+0.2%) to 71.857% when pulling 012423f789227a842bc2c06a14d59e30bda94e07 on handle-exceptions-in-event-handler into 1efbddf04a1aad4fc3d0aa7ebbfa94e90708b322 on master.\n. \nCoverage remained the same at 71.644% when pulling c0d55fa5132c3e32b97781b7d6d1b335c74d2714 on greenkeeper-webworkify-webpack-1.1.6 into 84be5c31a750de29f37e741769da04d0e7e67e6b on master.\n. \nCoverage remained the same at 71.644% when pulling 6c4748d6434e212514852c1bb050f68ef98c3572 on export-as-clappr-and-Clappr into 5795a09755eaa5a6fedd9c6a5aa0f34661f307f3 on master.\n. \nCoverage remained the same at 71.644% when pulling 9c248efb4c902c915f108b3be51d4be38eb29e05 on greenkeeper-webworkify-webpack-1.1.7 into 5795a09755eaa5a6fedd9c6a5aa0f34661f307f3 on master.\n. \nCoverage remained the same at 71.644% when pulling 4f9db766fb28b83ca52755d31265f3951cd2e043 on greenkeeper-yargs-5.0.0 into 5795a09755eaa5a6fedd9c6a5aa0f34661f307f3 on master.\n. \nCoverage remained the same at 71.644% when pulling 8ecacb98a0dc85b1087331ec7f697a769f5f8ae0 on NicholasAsimov:enchancement-russian-translation into 5795a09755eaa5a6fedd9c6a5aa0f34661f307f3 on clappr:master.\n. \nCoverage decreased (-0.02%) to 71.623% when pulling dcfbb87a07dcc50ce7c7e95d4d18d12de84f0ee4 on greenkeeper-css-loader-0.24.0 into 4570109c04329b05d678ab134e6230f7479fdbee on master.\n. \nCoverage decreased (-0.02%) to 71.623% when pulling 7fd3b1be203f7c61d23e7ee82880c87d4dc8ac4c on greenkeeper-check-dependencies-1.0.0 into 4570109c04329b05d678ab134e6230f7479fdbee on master.\n. \nCoverage remained the same at 71.644% when pulling c04ba8ec0fa63ffb67dc102834d5c34f7af2b321 on greenkeeper-check-dependencies-1.0.1 into 4570109c04329b05d678ab134e6230f7479fdbee on master.\n. \nCoverage remained the same at 72.31% when pulling b8b792484e0cbdc171f72bcda21600f031f943e4 on greenkeeper-check-dependencies-1.0.1 into d6f3938f73772a81ae4a45028010cd73d39df5ed on master.\n. \nCoverage decreased (-0.1%) to 71.61% when pulling 7a0971c8382f00b66e89356fe81ff9f3c93f4f43 on fix-fullscreen-hide-on-ios into 3140ce09b5279f180d688c25447ef9220f74d9aa on master.\n. \nCoverage decreased (-0.06%) to 71.65% when pulling c8b3988ec890186282617e8e55ed7a3ced530b19 on greenkeeper-css-loader-0.25.0 into 3140ce09b5279f180d688c25447ef9220f74d9aa on master.\n. \nCoverage remained the same at 72.31% when pulling e52ec79bafbfcdca819ef4185cb856e50c32d93c on greenkeeper-css-loader-0.25.0 into d6f3938f73772a81ae4a45028010cd73d39df5ed on master.\n. \nCoverage decreased (-0.09%) to 71.629% when pulling 476f845e78928f4f59be7a1d3fa10f758251d247 on greenkeeper-node-sass-3.9.1 into 3140ce09b5279f180d688c25447ef9220f74d9aa on master.\n. \nCoverage decreased (-0.07%) to 71.641% when pulling a5faf11327a2590d198af2cd9866dcae08435a4f on tjenkinson-patch-2 into 3140ce09b5279f180d688c25447ef9220f74d9aa on master.\n. \nCoverage increased (+0.01%) to 71.632% when pulling 4ab78f5c574fc9e8296a66a6c353a21446b35a3f on tjenkinson-patch-2 into 0ba51360fa137e467408fadf6a756c67b0e6c5b7 on master.\n. \nCoverage increased (+0.01%) to 72.31% when pulling 706fbd0bb2cc2e76288072f940ec061d84a9a332 on tjenkinson-patch-2 into 2ca0b63f4f5eb2575808e031687f266ea058f7ba on master.\n. \nCoverage decreased (-0.5%) to 71.343% when pulling 232e0d660dfed6bffbae724b2ede1539bd87fff5 on greenkeeper-istanbul-instrumenter-loader-1.0.0 into 923318fecc037f65012f866ae22dca6bc0f67a88 on master.\n. \nCoverage decreased (-0.4%) to 71.88% when pulling 27b7485285ee7b6c335b8a361b8c0f6bbcdf531d on greenkeeper-istanbul-instrumenter-loader-1.0.0 into d6f3938f73772a81ae4a45028010cd73d39df5ed on master.\n. \nCoverage decreased (-0.4%) to 71.784% when pulling e0d86d8d458eda9283007711392f378dd0ea29d9 on greenkeeper-istanbul-instrumenter-loader-1.0.0 into d943950c56dbdc3b57744ef4759d40468aeb2630 on master.\n. \nCoverage remained the same at 71.798% when pulling b9288f4cd7edd35236340e0498ff2e3188f3fa17 on greenkeeper-svg-inline-loader-0.7.0 into 923318fecc037f65012f866ae22dca6bc0f67a88 on master.\n. \nCoverage decreased (-0.02%) to 71.776% when pulling d6c6fce38ace3e2f6f2005d6425eb00580db0ce1 on greenkeeper-mocha-3.1.0 into dea19c0a5d332768909f19d16b0ecf11a83a55ed on master.\n. \nCoverage remained the same at 71.798% when pulling 316d7ccbf4efb43a75fbea5d383176ad862c334d on greenkeeper-svg-inline-loader-0.7.1 into dea19c0a5d332768909f19d16b0ecf11a83a55ed on master.\n. \nCoverage remained the same at 72.31% when pulling 8e31d8b5cfa1864793a3cee0ec444b7af0330f3b on greenkeeper-svg-inline-loader-0.7.1 into d6f3938f73772a81ae4a45028010cd73d39df5ed on master.\n. \nChanges Unknown when pulling cc132cdf21243a6ddac20c0a052f42975f9a659e on greenkeeper-svg-inline-loader-0.7.1 into * on master*.\n. \nChanges Unknown when pulling 6e77957011017466ab560263be695067fc0ad0c7 on greenkeeper-svg-inline-loader-0.7.1 into * on master*.\n. \nCoverage remained the same at 71.784% when pulling 6e77957011017466ab560263be695067fc0ad0c7 on greenkeeper-svg-inline-loader-0.7.1 into 6dec2f14036b732e0efc1403acfbed6920c42fb0 on master.\n. \nCoverage decreased (-0.02%) to 71.782% when pulling 8814650098477692c2f43e378bfddc5ec75eaf84 on kslimani:fix-dvrEnabled-flashls into dea19c0a5d332768909f19d16b0ecf11a83a55ed on clappr:master.\n. \nCoverage decreased (-0.04%) to 71.761% when pulling 77966bb959eac2a99f2aa62a9f45a70e8fd204d8 on kslimani:fix-dvrEnabled-flashls into dea19c0a5d332768909f19d16b0ecf11a83a55ed on clappr:master.\n. \nCoverage decreased (-0.06%) to 71.742% when pulling f0ee70f71c6b1e9df2282df0d37682ce31b0eee9 on kslimani:fix-stop-live-dvr-html5-video into dea19c0a5d332768909f19d16b0ecf11a83a55ed on clappr:master.\n. \nCoverage increased (+0.09%) to 71.886% when pulling 5f10ca19a399252cfc3944147fd81205ea0d1fd1 on html5video-remove-src-on-stop into dea19c0a5d332768909f19d16b0ecf11a83a55ed on master.\n. \nCoverage decreased (-0.02%) to 71.85% when pulling a7468a404c51f675ca64b9d106189ba2d41f47e6 on greenkeeper-hls.js-0.6.2 into cff09781d5ed5c4e4b4d64361878571aa16ed1d3 on master.\n. \nCoverage remained the same at 71.871% when pulling 42b732621b6f1d7e247e68bcf86d1d13a42e1d74 on greenkeeper-yargs-6.0.0 into cff09781d5ed5c4e4b4d64361878571aa16ed1d3 on master.\n. \nCoverage remained the same at 71.871% when pulling 2b654d0eb50e76ed7f8611551be838ed534e287d on greenkeeper-hls.js-0.6.3 into cff09781d5ed5c4e4b4d64361878571aa16ed1d3 on master.\n. \nCoverage increased (+0.01%) to 71.862% when pulling c3f1a2df865d854cd56a1601d12df36d66f0ae0e on add-isAudioOnly-to-playback into 21f180a12777ff11ff1ffbe1936bdcd7d13decd6 on master.\n. \nCoverage increased (+0.3%) to 72.135% when pulling 78c1e3d882d88d16601d9df4c48a27234f9bc3c1 on disable-media-control-and-poster-no_op into 21f180a12777ff11ff1ffbe1936bdcd7d13decd6 on master.\n. \nCoverage decreased (-0.06%) to 71.785% when pulling 9bb2b35414aa97ac3edadc3bac808d1d482e83f4 on NicholasAsimov:fix-autoPlay-NoOp into 21f180a12777ff11ff1ffbe1936bdcd7d13decd6 on clappr:master.\n. \nCoverage decreased (-0.5%) to 71.301% when pulling c0995bfe5f8013ab453cd90198805745327e739a on NicholasAsimov:fix-autoPlay-NoOp into 21f180a12777ff11ff1ffbe1936bdcd7d13decd6 on clappr:master.\n. \nCoverage decreased (-0.2%) to 71.697% when pulling c01626eb87910ccb05389ed43ba7d0289dccf8da on kslimani:fix-hls-playback-destroy into 21f180a12777ff11ff1ffbe1936bdcd7d13decd6 on clappr:master.\n. \nCoverage remained the same at 71.825% when pulling 65a78f72df80d9519ad418121ddabb70db40e22a on greenkeeper-hls.js-0.6.4 into 142e58f7d407635386d2ecc53df98b3249ef8866 on master.\n. \nCoverage decreased (-0.02%) to 71.804% when pulling 8583c9808fd7f4af54fab173e66c3901a5f57d26 on greenkeeper-hls.js-0.6.5 into 142e58f7d407635386d2ecc53df98b3249ef8866 on master.\n. \nCoverage remained the same at 71.816% when pulling 28b028fc9a38fd9fdfc8a32d3a1d90d766303398 on greenkeeper-mocha-3.1.1 into 08ba76e8064d6c664b1260f5a9f0e04f8f68ed0d on master.\n. \nCoverage remained the same at 71.816% when pulling 497dc1e80cdef440f62b09ccdf0853db4b00059c on gamtiq:fix-currentScriptUrl into 08ba76e8064d6c664b1260f5a9f0e04f8f68ed0d on clappr:master.\n. \nCoverage remained the same at 71.816% when pulling 3812fd224d3ec1e0ef6b2df333a4b63f8df82ce5 on greenkeeper-mocha-3.1.2 into 08ba76e8064d6c664b1260f5a9f0e04f8f68ed0d on master.\n. \nCoverage remained the same at 72.31% when pulling c2a0ff0e50a10a0ee3408698cacd128df1e43d0d on greenkeeper-mocha-3.1.2 into d6f3938f73772a81ae4a45028010cd73d39df5ed on master.\n. \nCoverage remained the same at 72.214% when pulling 116c70d8cd2d41a88fbbfee1e891ca569082ea92 on greenkeeper-mocha-3.1.2 into d943950c56dbdc3b57744ef4759d40468aeb2630 on master.\n. \nChanges Unknown when pulling 495ad93237f854d21af3064af610a70ef577cbca on greenkeeper-mocha-3.1.2 into * on master*.\n. \nChanges Unknown when pulling 02625f54a30dba27988126769a0f30988e810ece on greenkeeper-mocha-3.1.2 into * on master*.\n. \nCoverage increased (+0.02%) to 71.784% when pulling 02625f54a30dba27988126769a0f30988e810ece on greenkeeper-mocha-3.1.2 into 4d38f0919d1b3296c48add4bd347be36377462f0 on master.\n. \nCoverage increased (+0.02%) to 71.816% when pulling d4134f76e9f54f92486d88fd12aa244555042d2d on greenkeeper-hls.js-0.6.6 into ed30127cad4c16d46c4e68704b6e39b83955be9e on master.\n. \nCoverage decreased (-0.02%) to 72.135% when pulling c25677fb0a95384b5a712fafe1e1531f9047e610 on greenkeeper-yargs-6.1.1 into a719b675f39712e662f65123c6cb8d055dcfbb49 on master.\n. \nCoverage decreased (-0.02%) to 72.135% when pulling 52821796accfb7c31214941e7f73143557c5f413 on greenkeeper-yargs-6.2.0 into a719b675f39712e662f65123c6cb8d055dcfbb49 on master.\n. \nCoverage remained the same at 72.156% when pulling b3171adbb55c84ce31ad0c83a9aa1f155af54e4b on greenkeeper-yargs-6.3.0 into a719b675f39712e662f65123c6cb8d055dcfbb49 on master.\n. \nCoverage decreased (-0.02%) to 72.135% when pulling 61bc3aa1877a8b35606b47061cecd86fdea1be99 on kslimani:fix-package-json into a719b675f39712e662f65123c6cb8d055dcfbb49 on clappr:master.\n. \nCoverage increased (+0.2%) to 72.298% when pulling 711b6b1f5529ffff14e5e54f119459e1460ff872 on thiagopnts:remove-lodash-find-dep into 3d36bde07458e6871220edd80f7e0019ea26b957 on clappr:master.\n. \nCoverage increased (+0.04%) to 72.32% when pulling 00c2dc30b4cedba6a33e0780b987ac0f5e6ffbfe on greenkeeper-hls.js-0.6.7 into 1b4fa908e3eeaf6f31ca3f489a0b6d981643821f on master.\n. \nCoverage remained the same at 72.31% when pulling 2fcc4f3476f0e2e9ef3d906a13c4372f01a6310e on greenkeeper-babel-core-6.18.2 into d6f3938f73772a81ae4a45028010cd73d39df5ed on master.\n. \nChanges Unknown when pulling d7cc62fd150957f1cf4a40e33d2bd6b0dc34ff35 on greenkeeper-babel-core-6.18.2 into * on master*.\n. \nChanges Unknown when pulling 84924639d1bef063800f193c7d8cc2b8aca6af6e on greenkeeper-babel-core-6.18.2 into * on master*.\n. \nChanges Unknown when pulling 9d5aebe22cdfb7033cb9086fc2debb4a7afee15c on greenkeeper-babel-core-6.18.2 into * on master*.\n. \nCoverage increased (+0.02%) to 71.784% when pulling 9d5aebe22cdfb7033cb9086fc2debb4a7afee15c on greenkeeper-babel-core-6.18.2 into 4d38f0919d1b3296c48add4bd347be36377462f0 on master.\n. \nChanges Unknown when pulling 6a7d55d188d6f1531c84d2028619f09d504af397 on supports_hls_6x into * on master*.\n. \nChanges Unknown when pulling 6cc2682f1777f5bb0cb70618614cdbf634f37793 on supports_hls_6x into * on master*.\n. \nChanges Unknown when pulling 4e1ca79e2540658f07c6e21169c0279e8f94686b on supports_hls_6x into * on master*.\n. \nChanges Unknown when pulling 4e1ca79e2540658f07c6e21169c0279e8f94686b on supports_hls_6x into * on master*.\n. \nChanges Unknown when pulling 531f513daaca0e5d5d75c898fe883b184ec23143 on greenkeeper-clean-webpack-plugin-0.1.14 into * on master*.\n. \nCoverage remained the same at 72.31% when pulling 9782bc0d8581d4a896aaf3614f85208404c91bec on greenkeeper-clean-webpack-plugin-0.1.14 into d6f3938f73772a81ae4a45028010cd73d39df5ed on master.\n. \nChanges Unknown when pulling 1ef3f5bcf1ca96e7fdb48ad64a7496ecf74e219b on greenkeeper-clean-webpack-plugin-0.1.14 into * on master*.\n. \nChanges Unknown when pulling 58f7de4a95a329f35aa3e15710c0f54803e20001 on greenkeeper-clean-webpack-plugin-0.1.14 into * on master*.\n. \nChanges Unknown when pulling cd4421e2221ab17ed764aa15899742df7b04dfbc on greenkeeper-clean-webpack-plugin-0.1.14 into * on master*.\n. \nCoverage remained the same at 71.763% when pulling cd4421e2221ab17ed764aa15899742df7b04dfbc on greenkeeper-clean-webpack-plugin-0.1.14 into 4d38f0919d1b3296c48add4bd347be36377462f0 on master.\n. \nCoverage increased (+0.02%) to 71.784% when pulling 5e353a339581b7693694bf2a47468ceac04a999f on greenkeeper-clean-webpack-plugin-0.1.14 into f7438ca37e54dd0ca968f3c180dcfb14d5ac02e0 on master.\n. \nCoverage remained the same at 71.775% when pulling ac8997c8ac57dbd2ca030a9b46285f94607800af on bikegriffith:aria_labels into f60de4193e694a44a81ec42dbf6ca604719df41d on clappr:master.\n. \nCoverage increased (+0.02%) to 71.797% when pulling 37a0140c43f73e54fdfd79bc48cc939b281904f5 on bikegriffith:aria_labels into f60de4193e694a44a81ec42dbf6ca604719df41d on clappr:master.\n. \nCoverage decreased (-0.02%) to 71.754% when pulling 58d62eb6bfba302cc90e5274161b3b0b1a1e6ced on bikegriffith:aria_labels into f60de4193e694a44a81ec42dbf6ca604719df41d on clappr:master.\n. \nCoverage remained the same at 71.775% when pulling c3295d7f05ef52e18387b6071e039ae89deaedf0 on greenkeeper-lolex-1.5.2 into 2c62f8c76aa969bf7cb663e27c9289bfc5d5f8ee on master.\n. \nCoverage decreased (-0.2%) to 71.551% when pulling a169365e20efc5445b7c63d435e83fd5560726a7 on fix-html5video-autoplay-after-destroy into 090bc3819ac0ed29fe075ede2086c046c7e16ab4 on master.\n. \nCoverage decreased (-0.02%) to 71.754% when pulling 4c723d004bfeaa56ec3183d20c46666831a37afd on greenkeeper-yargs-6.4.0 into 090bc3819ac0ed29fe075ede2086c046c7e16ab4 on master.\n. \nCoverage decreased (-0.02%) to 71.56% when pulling bf26e81a68ae8007684ae429509ecaf11c1ea4a9 on vix-simplex:ad_external_plugin_to_doc into f8606f8b7c97cf5405977b1702d14447f4172b26 on clappr:master.\n. \nCoverage increased (+0.2%) to 71.775% when pulling 02da36f88b0b3ccac09c20f2db8f7c79b96edddc on vix-simplex:ad_external_plugin_to_doc into f8606f8b7c97cf5405977b1702d14447f4172b26 on clappr:master.\n. \nCoverage remained the same at 71.754% when pulling 8db295ee69b57103afff6a5f7ffc3d8b6156a814 on greenkeeper-css-loader-0.26.0 into 9fd50ecb4a6c2539141dcf3d104200b34f9287cb on master.\n. \n\nCoverage increased (+0.02%) to 71.766% when pulling 50a6612db8434dbb7d92ed2e251ef9f02cb0077e on GuilhermeMedeiros:master into ca38748a9baee66afd8e8072ef756b5152e4f0f2 on clappr:master.\n. \n\nCoverage increased (+0.07%) to 71.812% when pulling d07c3eeca5b1eace096739085e2b3750fe96eca5 on kafeltz:master into ca38748a9baee66afd8e8072ef756b5152e4f0f2 on clappr:master.\n. \n\nCoverage increased (+0.04%) to 71.781% when pulling abca67e7dd89e8a38cbf57818e12b19d37990ebd on kafeltz:master into e49fd375c2a2c45fc64572d9c1946f21a5966d00 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 71.744% when pulling 96de8cdd6380ada25d727b28499172caea47d42e on greenkeeper-node-sass-4.0.0 into 756b7913533f99b5d02a23be6b860fceb49ed36e on master.\n. \n\nCoverage decreased (-0.03%) to 71.735% when pulling f01a96a7ec4658ef2a76e958aafd029bc8e52da4 on NicholasAsimov:feature-poster-background into 756b7913533f99b5d02a23be6b860fceb49ed36e on clappr:master.\n. \n\nCoverage decreased (-0.003%) to 71.762% when pulling acea830d996a4dd08de5056d1529611d379781eb on NicholasAsimov:feature-poster-background into 756b7913533f99b5d02a23be6b860fceb49ed36e on clappr:master.\n. \n\nCoverage decreased (-0.003%) to 71.762% when pulling e3ab08804714e9b6e1b8a2f3448ef59d6639aef7 on NicholasAsimov:feature-poster-background into 756b7913533f99b5d02a23be6b860fceb49ed36e on clappr:master.\n. \n\nCoverage increased (+0.02%) to 71.784% when pulling e8f730d8e37b19cb8c78108459ec043ce5c5cb17 on NicholasAsimov:feature-poster-background into 756b7913533f99b5d02a23be6b860fceb49ed36e on clappr:master.\n. \n\nCoverage increased (+0.006%) to 71.75% when pulling f1f465dc40137f34e9596627a1a6d6a300f47e39 on media_control_stop_when_poster_disabled into e49fd375c2a2c45fc64572d9c1946f21a5966d00 on master.\n. \n\nCoverage remained the same at 71.744% when pulling 2b4c1e012532a2c1552ab1a39d070e1725ac42e6 on greenkeeper-node-sass-4.1.1 into e49fd375c2a2c45fc64572d9c1946f21a5966d00 on master.\n. \n\nCoverage decreased (-0.02%) to 71.744% when pulling f1a5b43290b30a34c44df8fe85dcad624ae24842 on greenkeeper-dotenv-3.0.0 into 23b878ea627270aa57f93700e7d9990812d8324f on master.\n. \n\nCoverage decreased (-0.02%) to 71.744% when pulling 719bdc2f78a6fc4585cfc2cb4cd07938d1c4400a on greenkeeper-dotenv-4.0.0 into 23b878ea627270aa57f93700e7d9990812d8324f on master.\n. \n\nCoverage decreased (-0.3%) to 71.419% when pulling 1dba200ee8f7e948fe0f760814eb82d2b19f9000 on NicholasAsimov:feat-hls-autoseekfromurl into 8605cc2d77645883c5bb7e7e9e9ad9f7806c80a6 on clappr:master.\n. \n\nCoverage decreased (-0.9%) to 70.84% when pulling a0a49179c6773bc144d55c9d1b138729b3b68de3 on NicholasAsimov:feat-hls-autoseekfromurl into 8605cc2d77645883c5bb7e7e9e9ad9f7806c80a6 on clappr:master.\n. \n\nCoverage increased (+0.05%) to 71.796% when pulling 7d5dd2226f80c4e3bb292bfb9dd40603bc6052b3 on NicholasAsimov:feat-hls-autoseekfromurl into 8605cc2d77645883c5bb7e7e9e9ad9f7806c80a6 on clappr:master.\n. \n\nCoverage decreased (-0.06%) to 71.68% when pulling f20f193bb57d72a369d855518eb791ef0ac35199 on NicholasAsimov:feat-hls-autoseekfromurl into 8605cc2d77645883c5bb7e7e9e9ad9f7806c80a6 on clappr:master.\n. \n\nCoverage remained the same at 71.744% when pulling 994dc612fa2923a5b95a265a569b59fd784615ab on greenkeeper-karma-webpack-2.0.1 into 8605cc2d77645883c5bb7e7e9e9ad9f7806c80a6 on master.\n. \n\nCoverage decreased (-0.06%) to 71.689% when pulling 0a0068f9b2aa75df22569ae7abfb24f59042b537 on NicholasAsimov:feature-html5video-isHD into a2943d5fe63eecedcb1da5504c64db953848d0e3 on clappr:master.\n. \n\nCoverage decreased (-0.05%) to 71.695% when pulling 81fd4b997c4bff515a948c3f3b1e28da2c4b2607 on tomas2387:autoplay_ios into a2943d5fe63eecedcb1da5504c64db953848d0e3 on clappr:master.\n. \n\nCoverage decreased (-0.05%) to 71.695% when pulling 31312b8d6ec532f56fbd0ab95d9e4892403aab46 on tomas2387:autoplay_ios into a2943d5fe63eecedcb1da5504c64db953848d0e3 on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 73.288% when pulling 386f60de581ac4a8a9da3186bd694074501626f4 on tomas2387:autoplay_ios into 59c905c0ddc7da227b50575a32ceadca0095a5ea on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 73.496% when pulling 676d2e97ae0bdaaf1add1d5bc3e364001081f766 on tomas2387:autoplay_ios into 59c905c0ddc7da227b50575a32ceadca0095a5ea on clappr:master.\n. \n\nCoverage remained the same at 71.744% when pulling 8ec38bfcea7d7e7c37a6bba9c9f9d0704b2a6e07 on greenkeeper-node-sass-4.3.0 into a2943d5fe63eecedcb1da5504c64db953848d0e3 on master.\n. \n\nChanges Unknown when pulling f983e6538a85192bc77db350f7d38a52906ff71f on greenkeeper-file-loader-0.10.0 into  on master.\n. \n\nCoverage increased (+0.02%) to 71.79% when pulling 53f276eb42cf9dcc33cd1fde9bab871318dd3ed5 on greenkeeper-webpack-dev-server-2.2.1 into 2e20e57584bbc21e7e149a2df02fb6468e4eb1c6 on master.\n. \n\nCoverage remained the same at 71.768% when pulling 3e967b685f42d53e864fb7e098d6272bb5d23a22 on greenkeeper-webpack-dev-server-2.2.1 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nChanges Unknown when pulling 24effe412773f02cbc49f3db5e080890c5a35576 on greenkeeper-webpack-dev-server-2.2.1 into  on master.\n. \n\nCoverage remained the same at 71.841% when pulling 24effe412773f02cbc49f3db5e080890c5a35576 on greenkeeper-webpack-dev-server-2.2.1 into a3b3677f028f348c16b3ad235f18d9dd937fe999 on master.\n. \n\nChanges Unknown when pulling 2eb1831cd5d637d643e6279c1cd44e2cfc10f6e0 on greenkeeper-webpack-dev-server-2.2.1 into  on master.\n. \n\nCoverage decreased (-0.02%) to 71.841% when pulling 2eb1831cd5d637d643e6279c1cd44e2cfc10f6e0 on greenkeeper-webpack-dev-server-2.2.1 into e4d4413dd100f43ae7127fabce5129e6820e1550 on master.\n. \n\nCoverage increased (+0.02%) to 71.79% when pulling aa8ac61d6bb8d03709a1b69dac7d3e5d61df3884 on greenkeeper-webpack-dev-server-2.3.0 into 2e20e57584bbc21e7e149a2df02fb6468e4eb1c6 on master.\n. \n\nCoverage increased (+0.02%) to 71.79% when pulling 61a4e46c928a53ce3b757edbb641d70a8a434074 on greenkeeper-webpack-dev-server-2.3.0 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nChanges Unknown when pulling fc0558edb89ced2d280ad763cd53ca9012a5c1ae on greenkeeper-webpack-dev-server-2.3.0 into  on master.\n. \n\nCoverage remained the same at 71.841% when pulling fc0558edb89ced2d280ad763cd53ca9012a5c1ae on greenkeeper-webpack-dev-server-2.3.0 into a3b3677f028f348c16b3ad235f18d9dd937fe999 on master.\n. \n\nChanges Unknown when pulling 13f286ba143969c4a8e96d1c5735bde8bf8acbd7 on greenkeeper-webpack-dev-server-2.3.0 into  on master.\n. \n\nCoverage decreased (-0.05%) to 71.813% when pulling 13f286ba143969c4a8e96d1c5735bde8bf8acbd7 on greenkeeper-webpack-dev-server-2.3.0 into a6b783c2d46a44bfd98c1d9e61b3e3a89aba4da5 on master.\n. \n\nChanges Unknown when pulling 355fe9c4e673fd2cbf9a1a75ea005d5e6450b35d on greenkeeper-webpack-dev-server-2.3.0 into  on master.\n. \n\nCoverage increased (+0.02%) to 71.813% when pulling 355fe9c4e673fd2cbf9a1a75ea005d5e6450b35d on greenkeeper-webpack-dev-server-2.3.0 into 3093abb1411013df0600a186c83a05d479c83ecd on master.\n. \n\nCoverage increased (+0.02%) to 71.784% when pulling 3c0c47a8face29a6f3c470e6eb6325cd3bddf461 on skrater:master into 2e20e57584bbc21e7e149a2df02fb6468e4eb1c6 on clappr:master.\n. \n\nCoverage remained the same at 71.79% when pulling acfa0389a20eaea9133e24d22678d48943a373d0 on greenkeeper-sass-loader-5.0.0 into 00a60e2a5f293012af9790e1ec737e3b7a5c2361 on master.\n. \n\nCoverage remained the same at 71.768% when pulling f8368881afd9e9e93b37a85d73bd917b6e8e4259 on greenkeeper-sass-loader-5.0.0 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nChanges Unknown when pulling 9f0a6eafe50ba2a23ddc1a3654aa7fb67c00f13d on greenkeeper-sass-loader-5.0.0 into  on master.\n. \n\nCoverage increased (+0.02%) to 71.862% when pulling 9f0a6eafe50ba2a23ddc1a3654aa7fb67c00f13d on greenkeeper-sass-loader-5.0.0 into a3b3677f028f348c16b3ad235f18d9dd937fe999 on master.\n. \n\nCoverage decreased (-0.02%) to 71.768% when pulling 05fd3cbe9bc38e4e21dc30e54fc56034b479f52f on greenkeeper-sass-loader-5.0.1 into 00a60e2a5f293012af9790e1ec737e3b7a5c2361 on master.\n. \n\nCoverage increased (+0.02%) to 71.79% when pulling 23538325d3efb3808ba3f37cdd42e971c5ec2cbf on greenkeeper-sass-loader-5.0.1 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nCoverage increased (+0.02%) to 71.862% when pulling a29c42acc5898c137a249f90f9c0bf3ad3a91ad5 on greenkeeper-sass-loader-5.0.1 into a3b3677f028f348c16b3ad235f18d9dd937fe999 on master.\n. \n\nCoverage remained the same at 71.841% when pulling a29c42acc5898c137a249f90f9c0bf3ad3a91ad5 on greenkeeper-sass-loader-5.0.1 into a3b3677f028f348c16b3ad235f18d9dd937fe999 on master.\n. \n\nCoverage decreased (-0.02%) to 71.768% when pulling 35874f41ddcbc191eda5778cb3fcc2943c4254eb on greenkeeper-istanbul-instrumenter-loader-2.0.0 into 00a60e2a5f293012af9790e1ec737e3b7a5c2361 on master.\n. \n\nCoverage remained the same at 71.862% when pulling 36c4c1c8d59af47977e4afdee6c92c7f771b224c on greenkeeper-istanbul-instrumenter-loader-2.0.0 into 50120849e74ce06e636a8902b225c4ef5dcc539d on master.\n. \n\nCoverage decreased (-0.05%) to 71.813% when pulling 32bc90b19cf1683ea1bad087b2b009f7b3aac9fb on greenkeeper-istanbul-instrumenter-loader-2.0.0 into a6b783c2d46a44bfd98c1d9e61b3e3a89aba4da5 on master.\n. \n\nCoverage decreased (-0.02%) to 71.768% when pulling 2923e7ee5f291105878e9687e97ba70b05b90054 on raphamorim:master into 00a60e2a5f293012af9790e1ec737e3b7a5c2361 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 71.768% when pulling 376658a496e941115a2ebec5040478a352bdb227 on raphamorim:master into 00a60e2a5f293012af9790e1ec737e3b7a5c2361 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 71.768% when pulling 71520451ac6898afc2cb375a7a661a912e4b0a76 on raphamorim:master into 00a60e2a5f293012af9790e1ec737e3b7a5c2361 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 71.768% when pulling 2dca6219d5ddff4db1c68acca35de15965018f33 on raphamorim:master into 00a60e2a5f293012af9790e1ec737e3b7a5c2361 on clappr:master.\n. \n\nCoverage remained the same at 71.79% when pulling ecfcf1b6991f3cdc1623baae8f7d78dafb00dd50 on greenkeeper-sass-loader-6.0.0 into 00a60e2a5f293012af9790e1ec737e3b7a5c2361 on master.\n. \n\nCoverage remained the same at 71.768% when pulling 11a15ca30e873f4084b1e5c0ac9bf9a05c920c2b on greenkeeper-sass-loader-6.0.0 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nCoverage remained the same at 71.862% when pulling d40f6bdcbcedfa04b479d5f7681a65b68c83e18d on greenkeeper-sass-loader-6.0.0 into 50120849e74ce06e636a8902b225c4ef5dcc539d on master.\n. \n\nCoverage decreased (-0.02%) to 71.768% when pulling e08e6b88572dfc7f125982ed7099ad14246fd8dc on greenkeeper-hls.js-0.7.0 into 00a60e2a5f293012af9790e1ec737e3b7a5c2361 on master.\n. \n\nCoverage decreased (-0.02%) to 71.768% when pulling 8c1ec24667047cf8e3e0a7bf5a24bf8733c8b32f on greenkeeper-sass-loader-6.0.1 into 00a60e2a5f293012af9790e1ec737e3b7a5c2361 on master.\n. \n\nCoverage remained the same at 71.768% when pulling bd0dc1fac098c2c7b6bc7f779c497899a211a190 on greenkeeper-sass-loader-6.0.1 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nCoverage remained the same at 71.862% when pulling f9ab5a1ad76a34075af553c394a76121ddcd338f on greenkeeper-sass-loader-6.0.1 into 50120849e74ce06e636a8902b225c4ef5dcc539d on master.\n. \n\nCoverage decreased (-0.02%) to 71.768% when pulling f3d59cf3961b2dc3802fdf8402218f23954fe5db on greenkeeper-webpack-dev-server-2.4.0 into 00a60e2a5f293012af9790e1ec737e3b7a5c2361 on master.\n. \n\nCoverage remained the same at 71.768% when pulling afad60abc464efd805075abf105a2ea1ac3488cf on greenkeeper-webpack-dev-server-2.4.0 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nChanges Unknown when pulling f178b8de38758aa384fe44909113b020763ebf64 on greenkeeper-webpack-dev-server-2.4.0 into  on master.\n. \n\nCoverage remained the same at 71.841% when pulling f178b8de38758aa384fe44909113b020763ebf64 on greenkeeper-webpack-dev-server-2.4.0 into a3b3677f028f348c16b3ad235f18d9dd937fe999 on master.\n. \n\nCoverage decreased (-0.02%) to 71.841% when pulling d5d2482f12f0cb07139f7141ffa5ccd8024841da on greenkeeper-webpack-dev-server-2.4.0 into e4d4413dd100f43ae7127fabce5129e6820e1550 on master.\n. \n\nCoverage decreased (-0.02%) to 71.768% when pulling b0d4dad88d75e9643832016ba52f3d6e6b310750 on greenkeeper-webpack-dev-server-2.4.1 into 00a60e2a5f293012af9790e1ec737e3b7a5c2361 on master.\n. \n\nCoverage remained the same at 71.768% when pulling 09b14cc8981447369093df8d545d059f60fd2721 on greenkeeper-webpack-dev-server-2.4.1 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nCoverage remained the same at 71.841% when pulling 2716a52dd487b6681daa7b7e9c58c3698cb59cc2 on greenkeeper-webpack-dev-server-2.4.1 into a3b3677f028f348c16b3ad235f18d9dd937fe999 on master.\n. \n\nCoverage decreased (-0.02%) to 71.841% when pulling b53a3c0597c2d01c035672fff4952f97789f50f9 on greenkeeper-webpack-dev-server-2.4.1 into e4d4413dd100f43ae7127fabce5129e6820e1550 on master.\n. \n\nCoverage remained the same at 71.79% when pulling 6ad1fd22b75b88d9709f1d8227147a3cc0ccae99 on greenkeeper-sass-loader-6.0.2 into 00a60e2a5f293012af9790e1ec737e3b7a5c2361 on master.\n. \n\nCoverage remained the same at 71.768% when pulling e37b1cb5a5da8361d12e3c06a96996cdaed5f068 on greenkeeper-hls.js-0.7.1 into 2f03a9b698865af465941dd6f659f157ebd5d6a3 on master.\n. \n\nCoverage remained the same at 71.768% when pulling fb01c813c56a907b2362a37096a231becc77d2c2 on greenkeeper-hls.js-0.7.2 into 2f03a9b698865af465941dd6f659f157ebd5d6a3 on master.\n. \n\nCoverage remained the same at 71.768% when pulling b851f1a885152f5a62f2d1fdf61a1dc970d9cb27 on greenkeeper-yargs-7.0.1 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nCoverage increased (+0.06%) to 71.832% when pulling 699b29fb446cb068e84e372732c43c647d22154c on kslimani:playinline-airplay into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage increased (+0.04%) to 71.811% when pulling 4083bbad15d981ed38dcce45eea29406ef9d962e on kslimani:playinline-airplay into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage increased (+0.006%) to 71.775% when pulling 7e1d8bef5772a6e07ec0a9e7573460c9476be712 on kslimani:playinline-airplay into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage increased (+0.1%) to 71.881% when pulling 651f337cef2fba7b5786bea473b19ea02a802e26 on kslimani:html5-video-recycle into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage decreased (-3.2%) to 68.564% when pulling e18ea210fdaf7376e1d9692c6e420daffa30a4f8 on kslimani:html5-video-recycle into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 71.753% when pulling 02ac7ce49afc618916a214e03b53127cdc33a0d3 on kslimani:html5-video-recycle into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage increased (+0.07%) to 71.838% when pulling 37513e7220b9024825146fcca0c6fd2543cdf2cc on kslimani:html5-video-recycle into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage increased (+0.08%) to 71.852% when pulling bad2c8d672fb543f61d3407cdf4856f6845d5e19 on kslimani:html5-video-recycle into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage increased (+0.07%) to 71.843% when pulling e82d2d352d0f0330c37d389a1eef6534c716991c on kslimani:html5-video-recycle into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage increased (+0.07%) to 71.843% when pulling a38729f30bf9a8cd30fb7a2a44c58b0bc82700cf on kslimani:html5-video-recycle into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage decreased (-0.03%) to 71.741% when pulling 900c63b81b83761f27ba44c9027d6b4c703893f7 on kslimani:playback-user-consent into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage decreased (-0.03%) to 71.741% when pulling fb7a71ccb321cf4c645d6c9ea8e24f3eec4095cb on kslimani:playback-user-consent into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage decreased (-0.007%) to 71.823% when pulling f6bdfcf4b7cea72de0008b0a54e7b8d327c4fbe2 on kslimani:playback-user-consent into ffc52a1d568dd4c4593a2e2fadfd0728bf6455b0 on clappr:master.\n. \n\nCoverage increased (+0.02%) to 71.79% when pulling 7eb514ab0e222b62c1a27fd72bd1c2bbdd6b119d on greenkeeper-yargs-7.0.2 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nCoverage remained the same at 71.768% when pulling 93e1d0288fd4d9ce474686b74037f7e9a260e934 on greenkeeper-css-loader-0.27.0 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nCoverage remained the same at 71.768% when pulling 2afe57619253c03f81ed170a6c311dda08add745 on greenkeeper-css-loader-0.27.1 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nCoverage increased (+0.02%) to 71.79% when pulling 14de0b752e3e59b967fc40edde8dcc82f7b0a18e on greenkeeper-css-loader-0.27.2 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nCoverage remained the same at 71.768% when pulling b67fcb776d8d5d2f5f9c90c6e046c9d9f5586f35 on greenkeeper-css-loader-0.27.3 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nCoverage remained the same at 71.768% when pulling 99598694d6e388508ef3f8c52c8a7270424b240b on greenkeeper-webpack-dev-server-2.4.2 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nCoverage increased (+0.02%) to 71.862% when pulling 0972349b9286a27fb5475b7655a5d8d585d7d2ec on greenkeeper-webpack-dev-server-2.4.2 into a3b3677f028f348c16b3ad235f18d9dd937fe999 on master.\n. \n\nChanges Unknown when pulling a204ed38c316b760b55f37df2021a41e30f6c86f on greenkeeper-webpack-dev-server-2.4.2 into  on master.\n. \n\nChanges Unknown when pulling a204ed38c316b760b55f37df2021a41e30f6c86f on greenkeeper-webpack-dev-server-2.4.2 into  on master.\n. \n\nCoverage decreased (-0.05%) to 71.813% when pulling a204ed38c316b760b55f37df2021a41e30f6c86f on greenkeeper-webpack-dev-server-2.4.2 into a6b783c2d46a44bfd98c1d9e61b3e3a89aba4da5 on master.\n. \n\nCoverage remained the same at 71.792% when pulling 4e481a370b16c754644540ec3b2ff223263935a2 on greenkeeper-webpack-dev-server-2.4.2 into 3093abb1411013df0600a186c83a05d479c83ecd on master.\n. \n\nCoverage increased (+0.02%) to 71.79% when pulling 94c6b9aaf02b62aa5a71becc901f0d1ba2e6d1a4 on greenkeeper-sinon-2.0.0 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nChanges Unknown when pulling 0b17493f92796f11277f6fbe07aa47a407005193 on greenkeeper-sinon-2.0.0 into  on master.\n. \n\nCoverage increased (+0.02%) to 71.79% when pulling d62e6deaefa7eb6703fd77f1868d7caef7e4e9d4 on greenkeeper-babel-loader-6.4.1 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nCoverage decreased (-0.07%) to 71.792% when pulling 46ec274df3787055c704e3005302667218e2af29 on greenkeeper-babel-loader-6.4.1 into a6b783c2d46a44bfd98c1d9e61b3e3a89aba4da5 on master.\n. \n\nChanges Unknown when pulling 1ca9c51411a55de067147f21f408b32cfb75cd7f on greenkeeper-sync-pkg-0.7.1 into  on master.\n. \n\nCoverage decreased (-0.07%) to 71.792% when pulling 1ca9c51411a55de067147f21f408b32cfb75cd7f on greenkeeper-sync-pkg-0.7.1 into a6b783c2d46a44bfd98c1d9e61b3e3a89aba4da5 on master.\n. \n\nCoverage increased (+0.02%) to 71.79% when pulling 195eb62b9210dce6cdc98594b47e41e5955a8ea0 on kslimani:fix-html5-url-seek into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage decreased (-7.04%) to 64.732% when pulling ccf5e98cd800412c16db827980a49afc0459eb1c on kslimani:fix-html5-video-poster into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage decreased (-0.03%) to 71.741% when pulling 440adbe2d3ac8d1b556e59a5c25ccce31f127258 on kslimani:fix-html5-video-poster into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage decreased (-0.05%) to 71.78% when pulling a271e65753039586920c5f94c40bb416b5eb3f16 on kslimani:fix-html5-video-poster into ffc52a1d568dd4c4593a2e2fadfd0728bf6455b0 on clappr:master.\n. \n\nCoverage increased (+0.02%) to 71.79% when pulling 1f9f2c9c10424a3b17ad4d0745219023ecff2c7c on greenkeeper-sinon-2.1.0 into bff717832691dcee9313cc0dd6560697d7366232 on master.\n. \n\nCoverage remained the same at 71.862% when pulling dbc262ac8a8bc2350f77185ef1cb36a887032b34 on greenkeeper-sinon-2.1.0 into e4d4413dd100f43ae7127fabce5129e6820e1550 on master.\n. \n\nCoverage remained the same at 71.768% when pulling 33c2116b53416854412d32f17921622189082e57 on Niko78:patch-1 into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage decreased (-0.03%) to 71.743% when pulling 89246693e5ad122c3923842f738fa36ddd589677 on jhonatangomes:master into bff717832691dcee9313cc0dd6560697d7366232 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 71.775% when pulling 7928a664cff8e89c2fcd7fc130e3eec312785394 on greenkeeper-css-loader-0.28.0 into 004b88b7e412d970a9e8912937fab3a9623a13a1 on master.\n. \n\nCoverage decreased (-0.02%) to 71.841% when pulling e20d9d7102796737526c1af6b08171a5d72c7136 on greenkeeper-css-loader-0.28.0 into 50120849e74ce06e636a8902b225c4ef5dcc539d on master.\n. \n\nCoverage decreased (-0.02%) to 71.775% when pulling 90b3bad1859bb0e0c7734755cfc21a5a9b244d2c on greenkeeper-file-loader-0.11.0 into 004b88b7e412d970a9e8912937fab3a9623a13a1 on master.\n. \n\nCoverage remained the same at 71.823% when pulling 80be05754ce83d7404911dd097df1b8a7535ba42 on greenkeeper-file-loader-0.11.1 into 008216548a9a80543d2f2229e14f10a85affe81e on master.\n. \n\nCoverage increased (+0.03%) to 71.856% when pulling 0c91b42a0fe73180e5fc0be35c93d2789d82355a on ogunkarakus:master into ffc52a1d568dd4c4593a2e2fadfd0728bf6455b0 on clappr:master.\n. \n\nCoverage increased (+0.006%) to 71.835% when pulling 224419fc635f02e8a5e9549848057bd44492dd24 on kslimani:fix-core-style into ffc52a1d568dd4c4593a2e2fadfd0728bf6455b0 on clappr:master.\n. \n\nCoverage increased (+0.02%) to 71.85% when pulling 89e338b6ffc3b12439a70d25dc32dfe819e4b549 on vagnervjs:fix/container-contextmenu into ffc52a1d568dd4c4593a2e2fadfd0728bf6455b0 on clappr:master.\n. \n\nCoverage increased (+0.02%) to 71.85% when pulling 127d6c7b7ce860b265c8478b441024bfabca0493 on kslimani:fix-detect-chrome-ios into ffc52a1d568dd4c4593a2e2fadfd0728bf6455b0 on clappr:master.\n. \n\nCoverage increased (+0.02%) to 71.85% when pulling b63c9686bbe9830c195c866f8a4d9176f84f0ddf on MTRNord:patch-1 into ffc52a1d568dd4c4593a2e2fadfd0728bf6455b0 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 71.841% when pulling 73c1a16229b3f8006dd50958e860f9cc1e357eb5 on greenkeeper-yargs-7.1.0 into 18d7dc7fabedf5134aa82391b43e996f6c5b29d9 on master.\n. \n\nChanges Unknown when pulling 7ffdbd9dd4df3fa6bc57aa5d9f2b04d1aecf5deb on ingest:add-closed-caption-button into  on clappr:master.\n. \n\nChanges Unknown when pulling 9f7fd339ceb7f4969562a6bb61c8b87447567643 on greenkeeper-webpack-dev-server-2.4.4 into  on master.\n. \n\nChanges Unknown when pulling 5cefefdd211a7558ff9106135c685f9dd06cd67b on greenkeeper-mocha-3.3.0 into  on master.\n. \n\nChanges Unknown when pulling 566265878c9540a7ad544c1f8e07e3bea58515a0 on greenkeeper-webpack-dev-server-2.4.5 into  on master.\n. \n\nCoverage decreased (-0.02%) to 71.966% when pulling 74f3d9bea9a405cf30ccd360cbab36afec469529 on greenkeeper-webpack-dev-server-2.4.5 into 41d2892c20cc86d4763b78d3ac88c5cec2e2c1bf on master.\n. \n\nChanges Unknown when pulling 0050cdace35dcbe931d08d249d516b6e185134c7 on kslimani:hls-error-handler into  on clappr:master.\n. \n\nChanges Unknown when pulling 80085ae0f9c9dd9c7cb4cd5a31cc5847caa3bc74 on kslimani:hls-error-handler into  on clappr:master.\n. \n\nChanges Unknown when pulling 51cc3a091a0ea5a1b9c3949db820589a1944f42a on kslimani:hls-error-handler into  on clappr:master.\n. \n\nChanges Unknown when pulling da37c7ca7d1be9adb7752e7013bb3fd27a60c5ac on kslimani:hls-error-handler into  on clappr:master.\n. \n\nChanges Unknown when pulling 5183804c7e2595247868d0224acf02f9d80fa7a5 on kslimani:hls-error-handler into  on clappr:master.\n. \n\nChanges Unknown when pulling b91a55d67c83136550dee2ca1504940266046a3e on greenkeeper-coveralls-2.13.1 into  on master.\n. \n\nCoverage increased (+0.02%) to 71.987% when pulling 8faf917d93f93219e4cc331e7b56079176413ae6 on greenkeeper-coveralls-2.13.1 into 19a5f98624e945887105e4d6b750157fbe5c1c31 on master.\n. \n\nChanges Unknown when pulling 1c19f6bddb16528dcb2c262cd58c99182240e6c7 on kslimani:fix-travis-lint-error into  on clappr:master.\n. \n\nChanges Unknown when pulling 2d2f351be9817771a28087bae9743b3725c508d6 on kslimani:handle-play-promise-exception into  on clappr:master.\n. \n\nChanges Unknown when pulling a1cb46ac51f13129a6ed64f56a236ef33c83a828 on kslimani:export-hlsjs into  on clappr:master.\n. \n\nChanges Unknown when pulling de4aedabf9240756b503f28059ead11fcb78f012 on greenkeeper-sinon-chai-2.10.0 into  on master.\n. \n\nCoverage increased (+0.02%) to 71.987% when pulling 432c8cdefb8440cb322ade05287b8f398c3e2776 on greenkeeper-sinon-chai-2.10.0 into 19a5f98624e945887105e4d6b750157fbe5c1c31 on master.\n. \n\nChanges Unknown when pulling bb4c1cad94517a964cbb59fdd8fd3b79e9e93674 on greenkeeper-css-loader-0.28.1 into  on master.\n. \n\nChanges Unknown when pulling 3cc8b0cf2f0cd3ead7092a44485f91af8677e026 on greenkeeper-sinon-2.2.0 into  on master.\n. \n\nChanges Unknown when pulling 50455460aad60d8a65d9f8bc266d0865cec7e39d on greenkeeper-karma-chrome-launcher-2.1.0 into  on master.\n. \n\nChanges Unknown when pulling d6590019a5e456aa280a135850ea8f58633550d3 on greenkeeper-webpack-2.5.0 into  on master.\n. \n\nCoverage remained the same at 71.711% when pulling 5fbc4b74d427d66545dbd79a4264e9dd6e876b76 on greenkeeper/initial into 711ad458378ab8bc7cb9a826011d063727bdb331 on master.\n. \n\nCoverage remained the same at 71.711% when pulling 4ce584bd8736d4ad089900af6685862ec7b854fa on hxl-dy:patch-1 into 711ad458378ab8bc7cb9a826011d063727bdb331 on clappr:master.\n. \n\nCoverage increased (+0.006%) to 71.696% when pulling 30b0ab5722837d09a35623f81e3ab235143ff951 on keto into 55e12a734049f93160f34fae480339a5361c35fe on master.\n. \n\nCoverage increased (+0.05%) to 71.741% when pulling cc919ee5fba30133a3dd3dae96ed33173eeb9bc3 on keto into 55e12a734049f93160f34fae480339a5361c35fe on master.\n. \n\nCoverage decreased (-0.006%) to 71.735% when pulling c277425a8e828d04196efaa0337fc8cc2c365050 on remove-lodash-isequal into 4e2dce830a7be604367128024ba3111e2e6d6007 on master.\n. \n\nCoverage decreased (-0.009%) to 71.726% when pulling 2f0274b9bb4afe23127fca1e1ef1b877500699fb on remove-lodash-merge into f90870e5fce00e34bbf00eaf4686150c1d939f1e on master.\n. \n\nCoverage decreased (-0.02%) to 71.726% when pulling 4356940ccef6daad6b3faedb72ed058a634d83d3 on update-hlsjs into 4ede2bf01aa2255c8f19f720bf85247cc8280a6b on master.\n. \n\nCoverage remained the same at 71.747% when pulling 58b84e4501c3db390c9a1a36f371e5b75a97c45b on remove-node-polyfill into 7c87e8864a3095eb859abe2708ff13c94ef212b9 on master.\n. \n\nCoverage decreased (-0.04%) to 71.945% when pulling da4a9174234de84549983c37d42b20f5e9ebae0e on greenkeeper/uglify-js-3.0.5 into cc377982b209de34aad0c417d55afc56066dd439 on master.\n. \n\nCoverage decreased (-0.03%) to 71.96% when pulling 77725df1b3c4d2b27f808e586abee4d6ac0c37d8 on remove-lodash-once into cc377982b209de34aad0c417d55afc56066dd439 on master.\n. \n\nCoverage decreased (-0.04%) to 71.945% when pulling d7d22b60d7eb2d775c77c94b0a19cbbc598a5caf on kslimani:fix-webpack-dev-server into cc377982b209de34aad0c417d55afc56066dd439 on clappr:master.\n. \n\nCoverage decreased (-0.04%) to 71.945% when pulling d8ebe729ae8226c2e4c901099f77b7749104c2d0 on kslimani:update-docs into cc377982b209de34aad0c417d55afc56066dd439 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 71.966% when pulling 5fe84afc6d53e5c183f81b8122a47ecc451de4b8 on kslimani:update-docs into cc377982b209de34aad0c417d55afc56066dd439 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 71.966% when pulling 5fe90ed41c9109c7181f79f12a16da4ac8b93dbb on prioritize-external-plugins into cc377982b209de34aad0c417d55afc56066dd439 on master.\n. \n\nCoverage decreased (-0.04%) to 71.929% when pulling 7a26f9183f5054dabb6ec796f49741c739841344 on kslimani:core-screen-orientation into e4c82cb44b4289e851ba15a73a836c7ae6ba70ee on clappr:master.\n. \n\nCoverage decreased (-0.04%) to 71.923% when pulling f30719cf71306156fd9963f297971391d715a9e6 on kslimani:core-screen-orientation into e4c82cb44b4289e851ba15a73a836c7ae6ba70ee on clappr:master.\n. \n\nCoverage remained the same at 71.966% when pulling f3e189617ead196f116fda1818b72a85d3af0102 on kslimani:fix-ios-fullscreen-btn into e4c82cb44b4289e851ba15a73a836c7ae6ba70ee on clappr:master.\n. \n\nCoverage decreased (-0.07%) to 71.92% when pulling beb26a62ace87c5ade213f0d7032a7cd45f92408 on kslimani:fix-util-fullscreen into a0222840344ff9c81687ddb94dd21bdbcda7ecbf on clappr:master.\n. \n\nCoverage remained the same at 71.96% when pulling 210e97aef9be5bf62a988561470d44a276753b74 on kslimani:fix-playback-docs into ce38eddc6c178edae37d71de75480f54f00de1ec on clappr:master.\n. \n\nCoverage remained the same at 71.981% when pulling be93e163be03350b528553a8fda378617f160ae9 on kslimani:fix-webpack-dev into b57d9eb03bb4a259baef87ce6708dfc19b05212d on clappr:master.\n. \n\nCoverage increased (+0.02%) to 71.981% when pulling a1f7b573871732bdae6d92ca83f2d10fb6694c68 on kslimani:fix-plugin-prioritization into 118682d7e5e50e608e7095a21d1ffa8a8f6dd1b1 on clappr:master.\n. \n\nCoverage increased (+0.006%) to 71.966% when pulling b0bdd61714c5ed2d6b0132c54d199bc0c4712bdd on kslimani:fix-plugin-prioritization into 118682d7e5e50e608e7095a21d1ffa8a8f6dd1b1 on clappr:master.\n. \n\nCoverage increased (+0.006%) to 71.966% when pulling 73796f4dc8d5ef5a023ccc46d2446add341ef03c on kslimani:fix-plugin-prioritization into 118682d7e5e50e608e7095a21d1ffa8a8f6dd1b1 on clappr:master.\n. \n\nCoverage increased (+0.02%) to 71.981% when pulling b46b63bb1255ad2e54cabbeeab0b06b6a635162d on kslimani:fix-swf-ie11 into 118682d7e5e50e608e7095a21d1ffa8a8f6dd1b1 on clappr:master.\n. \n\nCoverage increased (+0.004%) to 72.534% when pulling 3656079bfd2f7ffb9facef1f400bfada52e941b3 on remove-result into 184a7f2886ccb193bef0fe93306e98b6bf8b33b9 on master.\n. \n\nCoverage increased (+1.02%) to 73.554% when pulling cf5475f3a23a385983b103205a92558fc0d11e16 on babel-tweak into e9c32d7a8ec564dd483996b8cc18a69787cdca97 on master.\n. \n\nCoverage decreased (-0.02%) to 73.514% when pulling a6ef59070570dec56b5070a7721ca28334064742 on kslimani:build-bourbon into 81099c91dcb3fdad6649bfca3805bda02e7869df on clappr:master.\n. \n\nCoverage increased (+0.001%) to 73.515% when pulling f9dbcdd1427a9bed7130ef35cefd9976f30fa194 on lucasrodcosta:edge-detection into 59c905c0ddc7da227b50575a32ceadca0095a5ea on clappr:master.\n. \n\nCoverage increased (+0.02%) to 73.535% when pulling 776e2b635bccdb7e99fedd8a06aed13590574c9c on kslimani:feat-muted-autoplay into 59c905c0ddc7da227b50575a32ceadca0095a5ea on clappr:master.\n. \n\nCoverage increased (+0.05%) to 73.561% when pulling 34c992449da9c5f4bb9203314935547b2c5f2ac0 on kslimani:feat-muted-autoplay into 59c905c0ddc7da227b50575a32ceadca0095a5ea on clappr:master.\n. \n\nCoverage decreased (-0.1%) to 73.383% when pulling 4f63afa35a3f44ad294d955a2588d08a003d1750 on kslimani:feat-muted-autoplay into f4449dd231692265dec1559a581a1e548a4fee92 on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 73.383% when pulling 9a565b43d874c3d34c697e62063820a58a0c0ec8 on kslimani:safari-mobile-mute into 8cdc75922006c09b6e78d959ca2aabe7b09c1aca on clappr:master.\n. \n\nCoverage increased (+0.01%) to 73.552% when pulling fdedf8152e056cb719b519a99afeae1df6f7ab47 on kslimani:safari-mobile-mute into 8cdc75922006c09b6e78d959ca2aabe7b09c1aca on clappr:master.\n. \n\nCoverage decreased (-0.03%) to 73.513% when pulling fdedf8152e056cb719b519a99afeae1df6f7ab47 on kslimani:safari-mobile-mute into 8cdc75922006c09b6e78d959ca2aabe7b09c1aca on clappr:master.\n. \n\nCoverage increased (+0.1%) to 73.677% when pulling bf7dbad4aafd3ebd6423d896434d531889509b61 on greenkeeper/chai-4.0.2 into 506c7feb29530fe34be3a9558a223b67fe835e3a on master.\n. \n\nCoverage decreased (-0.3%) to 73.264% when pulling a70c6234d8c1ac83c62361227cd2cf4697dbb65c on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage decreased (-0.5%) to 73.087% when pulling 3b6f6b18c207017f949418fd6dcbb3fb734f99b4 on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage decreased (-0.06%) to 73.491% when pulling c15d5910c15aedbc5b889e6c55063e1680e30221 on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage decreased (-0.1%) to 73.443% when pulling 1e0937bd8dbfe57218df68ab7f7813489763fe84 on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage decreased (-0.5%) to 73.081% when pulling 77c5ac700e48120d4029ed882ef2cf6737c45800 on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage decreased (-0.5%) to 73.086% when pulling a8c78588ab67d619529d2375f56c038d4853f341 on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage decreased (-0.5%) to 73.024% when pulling f667893477c2c2efd28879a6e4ab5d6a39dbf0b1 on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage decreased (-0.5%) to 73.056% when pulling 4d8076fcfffc9ce496b34c0e32daf383f4959a0d on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage decreased (-0.5%) to 73.064% when pulling 717c615971c20952b07cb6c3fbca458e7b922da3 on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage decreased (-0.4%) to 73.16% when pulling 33931d815a05d7b67352e70f9e28fa59d0f29dd9 on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage decreased (-0.5%) to 73.05% when pulling 2cb25b4cef1f5a5d46c5e69c80a2ccbe6ad9e7cc on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 73.367% when pulling 45535b3c41bf7b1e9696ddbdd4b84e8529deee73 on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage decreased (-0.4%) to 73.169% when pulling d3a955dee94a2bb7d92dc8023e9ba8d6528e364f on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage decreased (-0.5%) to 73.092% when pulling 865b58f26445dec96b0031aa73fc2f509760231e on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage decreased (-0.6%) to 72.954% when pulling 4452f04b5cd884273b67f59b5e6bbe64aa7035d9 on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage decreased (-0.6%) to 72.954% when pulling a87aeb201c63313cb6aebc138a09410b4bffa56f on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage increased (+0.1%) to 73.66% when pulling dc12b90d2cc716aa32861372e5c742ee274db953 on kslimani:fix-cc into 506c7feb29530fe34be3a9558a223b67fe835e3a on clappr:master.\n. \n\nCoverage increased (+0.1%) to 73.66% when pulling aa975d4c6b33865c485864bcc42f9f1dfcb4b4a8 on kslimani:fix-cc into 42481f202463fbdfbad8fe30720d1584eff9971d on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 73.394% when pulling f1ae491d31712b138bccebbc93e93e79ff0f178e on kslimani:doc-error into c1a0c6066476b5c4a0811f634a8c9c5f7df4b068 on clappr:master.\n. \n\nCoverage increased (+0.08%) to 73.631% when pulling 2e5872dd5d0a44c79cf4cd3d4a52ac96316c425e on greenkeeper/webpack-3.0.0 into b18bfc4f9f6ac5618be356e4284a41686a39a77c on master.\n. \n\nCoverage increased (+0.05%) to 73.677% when pulling 1f2216cdf052007489a5ee32b570b146a30685a6 on greenkeeper/eslint-4.1.0 into dabd585fc3cd48288752eca5f220e7f577f7ae6c on master.\n. \n\nCoverage decreased (-0.1%) to 73.532% when pulling 52665596854e2a4afe68c46a4bebde2e377f45c9 on kslimani:fix-pause into dabd585fc3cd48288752eca5f220e7f577f7ae6c on clappr:master.\n. \n\nCoverage remained the same at 73.552% when pulling bc4f746fdb4ba3f88a9016f20569d3fcf491c58f on speres93:improving-playback-tests into 42481f202463fbdfbad8fe30720d1584eff9971d on clappr:master.\n. \n\nCoverage increased (+0.02%) to 73.681% when pulling 086f1e3335e164e8074dd664a9a9d97f8eb893c4 on diegosperes:events into fd3ecda9ab74ec829ac466abf415b762b51ee6fd on clappr:master.\n. \n\nCoverage increased (+0.04%) to 73.7% when pulling 7d13246d159cc762b9605719cd1004c698772728 on diegosperes:events into fd3ecda9ab74ec829ac466abf415b762b51ee6fd on clappr:master.\n. \n\nCoverage increased (+0.1%) to 73.791% when pulling d6249331f203a1eea3ee49a619aaca68ec75805b on diegosperes:events into fd3ecda9ab74ec829ac466abf415b762b51ee6fd on clappr:master.\n. \n\nCoverage increased (+0.02%) to 73.677% when pulling 55017eda7e483faaa837ca388f4cbb845fcd37c5 on diegosperes:events into fd3ecda9ab74ec829ac466abf415b762b51ee6fd on clappr:master.\n. \n\nCoverage remained the same at 73.66% when pulling 8888a2fdcef53b1d0d06ff5f899d2821eea80f9d on greenkeeper/lolex-2.0.0 into fd3ecda9ab74ec829ac466abf415b762b51ee6fd on master.\n. \n\nCoverage increased (+0.04%) to 73.715% when pulling 32cac158e9cc23c38f80f69b3ebb17101e8e525d on greenkeeper/svg-inline-loader-0.8.0 into 2b0db4cda96b2a2657a28b027554b74ce79252d0 on master.\n. \n\nCoverage decreased (-0.04%) to 73.641% when pulling ad24a2f6c0677d319e2900ec316ccf06cdf0a10b on kslimani:fix-hls-cc into 2b0db4cda96b2a2657a28b027554b74ce79252d0 on clappr:master.\n. \n\nCoverage remained the same at 73.758% when pulling f912ffcc77b41c21eef56bb2e04d0a02c588a4e0 on argoilves:patch-1 into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 73.592% when pulling 3941ff5bce0f59480f63e7fce4a508718b19c215 on argoilves:patch-1 into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage increased (+0.02%) to 73.782% when pulling cd1e28a1841576a3d23f514d196a3c8c28ee3ad2 on argoilves:patch-1 into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage decreased (-0.005%) to 73.753% when pulling a4eb0352519c753d56bbe1480ba747749a464de1 on joaopaulovieira:playback-html5-buffer into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage increased (+0.02%) to 73.782% when pulling 9b77b35c4525ed61f1db5efa3ab4458175e684d9 on diegosperes:fix-buffer-event into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage increased (+0.3%) to 74.049% when pulling 5f6c9dd8f4bdcdc32d85ca31aa8fddcd96cf0f3c on diegosperes:fix-buffer-event into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage increased (+0.3%) to 74.011% when pulling 7540c8fb28f4c74f2da6b77253ded578fe738d86 on diegosperes:fix-buffer-event into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 73.588% when pulling add75f1903281f6cad672dadaddb21d4279de0c2 on diegosperes:seeked-event into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage increased (+0.06%) to 73.816% when pulling bea04e50953cc48117d1762af36ae38cc9141159 on diegosperes:seeked-event into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage increased (+0.3%) to 74.083% when pulling 11107d2da64568cabf51c50bae7b1a1e7b552e93 on diegosperes:seeked-event into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage increased (+0.3%) to 74.102% when pulling 63bf1fd6c91a185b81e3aa12abeb8cd83da6a514 on diegosperes:seeked-event into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage increased (+0.3%) to 74.102% when pulling 518046c4e8ef3577067bb397d0382d27e87b2cd0 on diegosperes:seeked-event into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage increased (+0.3%) to 74.102% when pulling 1049db3df9e1d9d63e071d81d87242d5451253d1 on diegosperes:seeked-event into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage increased (+0.3%) to 74.083% when pulling 34e760935243288b45ee47e66aee61e446731906 on diegosperes:seeked-event into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage increased (+0.4%) to 74.14% when pulling 11dea94831ca33627010bc54869a4abf3c1cb922 on diegosperes:seeked-event into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage increased (+0.7%) to 74.501% when pulling 6678a24468fd3fda259a4de0ff2dc9cff9dddf28 on diegosperes:seeked-event into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage increased (+0.5%) to 74.235% when pulling 061e48f615884ee7dd24818aeee0bc11a4b1e33f on diegosperes:seeked-event into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage increased (+0.4%) to 74.121% when pulling 4c6ddcd729aec5b28468a8487bf4b7023d21cfdd on diegosperes:seeked-event into 2bf02ed17546c485d48eb4622969e2d53fcf7d5d on clappr:master.\n. \n\nCoverage remained the same at 73.955% when pulling d91ed28ab6cb3fa11698a3c75f1ed84369ec7284 on kslimani:fix-swf-url into 54fc5d009a3f23d13bfc23c507cf6ba36b49dd92 on clappr:master.\n. \n\nCoverage decreased (-0.01%) to 73.941% when pulling cfbd6a53e8a524920d78ce6025449bfa3ff195be on kslimani:fix-swf-url into 54fc5d009a3f23d13bfc23c507cf6ba36b49dd92 on clappr:master.\n. \n\nCoverage increased (+0.4%) to 74.34% when pulling db054160855b504dfd2d4e92cd1299bb0e701b15 on kslimani:fix-swf-url into 54fc5d009a3f23d13bfc23c507cf6ba36b49dd92 on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 73.941% when pulling eead2e98dc10f4d78c194523791a394da662c7d9 on MartinKolarik:patch-2 into 281380a5d4763436fa3de670aafbca8f2c5b5dd7 on clappr:master.\n. \n\nCoverage increased (+0.2%) to 74.246% when pulling 38a1e0779386f4b3864dd950ff7ad08cc1f937b2 on jhonatangomes:improve-click_to_pause into 281380a5d4763436fa3de670aafbca8f2c5b5dd7 on clappr:master.\n. \n\nCoverage increased (+0.03%) to 74.122% when pulling 1fcab5988813eaeff836a6236de774e074a48f37 on jhonatangomes:improve-click_to_pause into 281380a5d4763436fa3de670aafbca8f2c5b5dd7 on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 73.988% when pulling f0bcfb59cb7f4129e04a3cfb3a650bd6e926de85 on otmjka:hls/program_date_time into 0148f6041684936d247d73ce33fbe0192df6edeb on clappr:master.\n. \n\nCoverage decreased (-0.1%) to 74.056% when pulling daa7445f18c20301884680ee4516af4b8061d972 on lucasrodcosta:master into 0148f6041684936d247d73ce33fbe0192df6edeb on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 74.203% when pulling 458fc115be2ac0dbd827ae29011949e4b5d266b8 on contra:patch-1 into 414f13f705cdcc95db850b8001d17ded19dd1aa4 on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 74.146% when pulling ee655f5a13b34d1df89106b9c8fc9429779b47f7 on contra:patch-1 into 414f13f705cdcc95db850b8001d17ded19dd1aa4 on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 74.165% when pulling fe3a4ccae1c719e06a2c413947d08a9abbfa59a5 on Lethea:patch-1 into 414f13f705cdcc95db850b8001d17ded19dd1aa4 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 74.165% when pulling 3d19d4ebaf909e18cef5cb17cc9e0981b0ffc211 on vagnervjs:fix/hls-config into 553e4a2793b44486d3b1d13856ab5cb994cb9835 on clappr:dev.\n. \n\nCoverage increased (+0.1%) to 74.203% when pulling f76adf1a515bfeeee84595e5c84b227e927f3256 on update-hlsjs-0-8-5 into 6ca9ef1dd7da052a18c29e2063a11d8e798bc4fa on master.\n. \n\nCoverage increased (+0.02%) to 74.412% when pulling 31dd091770eb71d3ae6d5cc9e4bddaf26544803b on Lethea:patch-2 into b51d9938a4dca1018c14193cac418d9c9fa4d04d on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 74.198% when pulling b0cebd56e716e5b830ee1f52c75a05773823e242 on vagnervjs:fix/append-core into b51d9938a4dca1018c14193cac418d9c9fa4d04d on clappr:master.\n. \n\nCoverage increased (+0.2%) to 74.407% when pulling 2aafe0032ba7dfc6db69c5eeb2f7164eda30570a on joaopaulovieira:master into bdcbb4b3716ee5a698f34831763a3329b31ae562 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 74.195% when pulling 985122f9b15ba35ff826f3983e21a0cacf9fb9b7 on joaopaulovieira:master into bdcbb4b3716ee5a698f34831763a3329b31ae562 on clappr:master.\n. \n\nCoverage decreased (-0.004%) to 74.214% when pulling 496f6b6904803ab66e2a9542695b7fc6ecff5cbf on joaopaulovieira:master into bdcbb4b3716ee5a698f34831763a3329b31ae562 on clappr:master.\n. \n\nCoverage decreased (-0.08%) to 74.1% when pulling db3af0f399e5216a63710c79384f8f6f28ca0436 on joaopaulovieira:style-project-refactor into 26f8d47bac1288c347502ff419ec578f955da9c6 on clappr:master.\n. \n\nCoverage remained the same at 73.845% when pulling f34d14d9979e21acdccb6a8d78717a183fb0449b on stanogurnik:zepto-instance-check into f8e340014c842698b647e04c163a3729782e6e36 on clappr:master.\n. \n\nCoverage increased (+0.1%) to 73.979% when pulling e384999398fe0b9b91a269bc66c32c08395ce40a on tchakabam:patch-1 into f8e340014c842698b647e04c163a3729782e6e36 on clappr:master.\n. \n\nCoverage increased (+0.2%) to 74.017% when pulling c36edc016eee8db3600a0261b216f17c128c2a26 on tchakabam:patch-1 into f8e340014c842698b647e04c163a3729782e6e36 on clappr:master.\n. \n\nCoverage increased (+0.06%) to 73.902% when pulling 0c618ad779b60a12dec043db5e1b1c0191e13236 on tchakabam:patch-1 into f8e340014c842698b647e04c163a3729782e6e36 on clappr:master.\n. \n\nCoverage increased (+0.03%) to 73.872% when pulling f575c03c0f95241aa50fae6b4c5e2c5c45c2ef1b on tchakabam:patch-1 into f8e340014c842698b647e04c163a3729782e6e36 on clappr:master.\n. \n\nCoverage remained the same at 73.845% when pulling b1a1489dd091ececb0cf1fb417edc21a72f026ba on tchakabam:patch-1 into f8e340014c842698b647e04c163a3729782e6e36 on clappr:master.\n. \n\nCoverage increased (+0.2%) to 74.017% when pulling 6c0faa6730619f174682eeb05afc098f3a7de805 on bent0b0x:patch-2 into f8e340014c842698b647e04c163a3729782e6e36 on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 73.644% when pulling dad4aee8753daf7e6385b2202700d04fe95eed05 on tchakabam:feature/build-only-with-plain-html5-plugins into a7a1d923891ec84151ae30c4349f20f72e404f3a on clappr:master.\n. \n\nCoverage increased (+0.2%) to 74.027% when pulling 5675ce8720fbf27b8a03b1e153c85887671f90b2 on tchakabam:feature/build-only-with-plain-html5-plugins into a7a1d923891ec84151ae30c4349f20f72e404f3a on clappr:master.\n. \n\nCoverage decreased (-0.03%) to 73.816% when pulling c85a4d8942bc77de1248489322ecbe6ca682757b on tchakabam:feature/build-only-with-plain-html5-plugins into a7a1d923891ec84151ae30c4349f20f72e404f3a on clappr:master.\n. \n\nCoverage decreased (-0.09%) to 73.759% when pulling 0701ff0a88064e175e3c550b7fe9cfdc25f8dae2 on tchakabam:feature/build-only-with-plain-html5-plugins into a7a1d923891ec84151ae30c4349f20f72e404f3a on clappr:master.\n. \n\nCoverage decreased (-0.03%) to 73.816% when pulling f5d2338496d348065c2b5b1e2016fb5c15c523dc on tchakabam:feature/build-only-with-plain-html5-plugins into a7a1d923891ec84151ae30c4349f20f72e404f3a on clappr:master.\n. \n\nCoverage increased (+0.3%) to 74.123% when pulling cc12aff714f3f786620821065320691d8321ba18 on tchakabam:feature/build-only-with-plain-html5-plugins into a7a1d923891ec84151ae30c4349f20f72e404f3a on clappr:master.\n. \n\nCoverage increased (+0.01%) to 73.855% when pulling f537067043315dca8f26f1448ff3826da71a0712 on tchakabam:feature/build-only-with-plain-html5-plugins into a7a1d923891ec84151ae30c4349f20f72e404f3a on clappr:master.\n. \n\nCoverage increased (+0.1%) to 75.725% when pulling 87511a5de884af144bf81b94bb07adc9e1546464 on tchakabam:feature/build-only-with-plain-html5-plugins into c38b66f195de85d92b6910c9e88c826605f0aafd on clappr:master.\n. \n\nCoverage increased (+0.1%) to 74.017% when pulling a611fef82301b60bf2746197a13f668bb70d1331 on tchakabam:feature/eslint-fix-option into 1971508e3790cec268c41a7e47d1825e10267937 on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 73.701% when pulling c51b165169b9bea06d8755f5800e37d02b0e2364 on tchakabam:feature/eslint-fix-option into 1971508e3790cec268c41a7e47d1825e10267937 on clappr:master.\n. \n\nCoverage increased (+1.9%) to 75.805% when pulling 30570b1ba956ac1249fba9c19e7fe4f70ef5bde8 on tchakabam:feature/eslint-fix-option into 1971508e3790cec268c41a7e47d1825e10267937 on clappr:master.\n. \n\nCoverage increased (+2.0%) to 75.882% when pulling 2b5d4f966e42fcbd0256a678a198c77e0f9ab418 on tchakabam:feature/eslint-fix-option into 1971508e3790cec268c41a7e47d1825e10267937 on clappr:master.\n. \n\nCoverage increased (+1.9%) to 75.805% when pulling 22e8645cbfaa54084aef1a10c39c55d1b52ee27e on tchakabam:feature/eslint-fix-option into 1971508e3790cec268c41a7e47d1825e10267937 on clappr:master.\n. \n\nCoverage increased (+1.7%) to 75.601% when pulling c09f3a07f9e768ccef4a437c23f1f795e9e0b1d9 on tchakabam:feature/eslint-fix-option into 1971508e3790cec268c41a7e47d1825e10267937 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 73.883% when pulling a2078f0ff44fb44682549dd76a0048a2381129e8 on flavioribeiro:master into 1971508e3790cec268c41a7e47d1825e10267937 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 73.883% when pulling a2078f0ff44fb44682549dd76a0048a2381129e8 on flavioribeiro:master into 1971508e3790cec268c41a7e47d1825e10267937 on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 75.641% when pulling 6a11435357d13cc32a1abfd7402b0339e571eca0 on tchakabam:feature/adaptive-playback into 363ba7a9f9003e517f8f3a63e5458692e82431c2 on clappr:master.\n. \n\nCoverage decreased (-0.3%) to 75.58% when pulling 6a11435357d13cc32a1abfd7402b0339e571eca0 on tchakabam:feature/adaptive-playback into 363ba7a9f9003e517f8f3a63e5458692e82431c2 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 75.821% when pulling f6323e5b1b329ad0ff684bb5b17ff3a8d1931f85 on tchakabam:feature/adaptive-playback into 363ba7a9f9003e517f8f3a63e5458692e82431c2 on clappr:master.\n. \n\nCoverage increased (+0.4%) to 76.249% when pulling ba3bcd3f1b29de6d684b497195623f744b661c0b on tchakabam:feature/adaptive-playback into 363ba7a9f9003e517f8f3a63e5458692e82431c2 on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 75.676% when pulling f6bbfe707627080a83fce566060a271672933c44 on tchakabam:feature/editorconf into 363ba7a9f9003e517f8f3a63e5458692e82431c2 on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 75.656% when pulling 7db1db868887ce30fd58fa536854d16c197b4bef on tchakabam:feature/editorconf into 363ba7a9f9003e517f8f3a63e5458692e82431c2 on clappr:master.\n. \n\nChanges Unknown when pulling 9ad620ddbff9a2c0fa84bbaacd4fb3e37c729233 on tchakabam:build-debug-inline-source-maps into  on clappr:master.\n. \n\nCoverage increased (+0.6%) to 76.294% when pulling e9ab4ecf162053c4b39f7e3db178682c676a5464 on vagnervjs:fix/configure-events into f3ea8890e304df77006abad5c99cedacf3da76cc on clappr:master.\n. \n\nCoverage decreased (-0.06%) to 76.408% when pulling 66770fc83c32b94910b823fbc3c454244f9a404a on rolandstarke:patch-1 into 8096efe933a2b727cecddaed2899626095fe7415 on clappr:master.\n. \n\nCoverage increased (+0.04%) to 76.224% when pulling d705c055ef3fc2de9f0c301f7868d49c67f3c6aa on vagnervjs:fix/configure into 8efa5dc653ad335c3b8d38bfe214da4bd3b9cdc8 on clappr:master.\n. \n\nCoverage increased (+0.3%) to 76.512% when pulling c3806f1a083dd7e6c417c86a968870eff10a2a9c on vagnervjs:fix/reset-volume-on-configure into 8efa5dc653ad335c3b8d38bfe214da4bd3b9cdc8 on clappr:master.\n. \n\nCoverage increased (+0.07%) to 76.598% when pulling 6c84b4508c48bdbc9a94b06a2b33666a8daffacb on paluh:master into 64afb501cb365b2fefe5651d950e31ba06b5ba87 on clappr:master.\n. \n\nCoverage increased (+0.005%) to 76.532% when pulling ec91f9866aa852cd0bfb784bdeb39bdb5eea183e on andrefilimono:fix/hd_indicator into 64afb501cb365b2fefe5651d950e31ba06b5ba87 on clappr:master.\n. \n\nCoverage decreased (-0.2%) to 76.312% when pulling f138cf45219d5998e4c0ff9133446d3fab7aec83 on andrefilimono:fix/hls_config into 64afb501cb365b2fefe5651d950e31ba06b5ba87 on clappr:master.\n. \n\nCoverage decreased (-0.08%) to 76.448% when pulling 2ff0ed04e72b68b680da94332479a881669e6dfa on andrefilimono:fix/translation into 64afb501cb365b2fefe5651d950e31ba06b5ba87 on clappr:master.\n. \n\nCoverage decreased (-0.1%) to 76.397% when pulling 63838438f958980ca0e848c60aab2160ec3a8df1 on wahajdar:fix/onReady-event-m3u8 into 796d76092da9e40f99c5a7fb1aec8223d9a775d3 on clappr:master.\n. \n\nCoverage increased (+0.1%) to 76.491% when pulling b33c335c93be9260703eecdc64dd8e92947a62a1 on joaopaulovieira:master into 89082c20e03fafb190ae75b071716aad596cc58a on clappr:master.\n. \n\nCoverage increased (+0.06%) to 76.412% when pulling 38fe35d4c6d7650ea5798559b11105508218d4b9 on joaopaulovieira:chromeless-mobile-bug into 89082c20e03fafb190ae75b071716aad596cc58a on clappr:master.\n. \n\nCoverage increased (+0.2%) to 76.512% when pulling f003f3c2543e35fce696d9688b7ae80faf114ac4 on joaopaulovieira:timeupdate-hls-refactor into 89082c20e03fafb190ae75b071716aad596cc58a on clappr:master.\n. \n\nCoverage increased (+0.04%) to 76.439% when pulling b7423d5b751cdfa191b9c67dc9cfd4c67ae47955 on joaopaulovieira:update-dependencies into 98cc037e5fd89a275538b39ba9b5ae422e7110a8 on clappr:master.\n. \n\nCoverage remained the same at 76.404% when pulling e1cfcaf713fdacc01f61bcf574c618411527ec61 on joaopaulovieira:yarn-autoclean into 98cc037e5fd89a275538b39ba9b5ae422e7110a8 on clappr:master.\n. \n\nCoverage increased (+0.2%) to 76.31% when pulling c0de5e3d88ff52eb8be4cb6dad6765c6a0146168 on markmatney:enable-mediacontrol-configuration into 349140041e14f8d2e8f7fb8be6cfee74b48b5f6d on clappr:master.\n. \n\nCoverage increased (+0.2%) to 76.31% when pulling 93d314e2cc5104c366b0278ded2eee80122456f1 on andrefilimono:flvjs_doc into 1e5df5d89570eadd7a99fe886a98f38f1924927c on clappr:master.\n. \n\nCoverage decreased (-0.1%) to 76.091% when pulling 6ee93908321b709f85cdec617085990623968592 on davidjb:patch-1 into 10266c584aad3bca2fff4efa5e85eaf92cc25973 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 76.21% when pulling f2586af057794e230c4c2191f08f2c879c735dc4 on davidjb:patch-2 into 10266c584aad3bca2fff4efa5e85eaf92cc25973 on clappr:master.\n. \n\nCoverage decreased (-0.1%) to 76.091% when pulling 02edbb2d4096373d55b09395696f82fb9f41c698 on davidjb:patch-3 into 10266c584aad3bca2fff4efa5e85eaf92cc25973 on clappr:master.\n. \n\nCoverage increased (+0.3%) to 76.23% when pulling 915dd66ff0d1333d218c0e622b55481a9c25eaa3 on davidjb:patch-4 into b2bfea9e799ff494462e111cc32bca4b810bd50e on clappr:master.\n. \n\nCoverage increased (+0.08%) to 76.31% when pulling 114020651e36a18a5cfedc00a1a98688550ee8fe on tchakabam:feature/demo-serializable-config into 30cc448e9ea1f3bd0c927c76a88e4caad03bff33 on clappr:master.\n. \n\nCoverage increased (+0.08%) to 76.31% when pulling 6cdf1897e190a30ee1116f7af1e70b2206936d0d on tchakabam:gitignore-yarn-npm-things into 30cc448e9ea1f3bd0c927c76a88e4caad03bff33 on clappr:master.\n. \n\nCoverage decreased (-0.9%) to 75.371% when pulling 9eb18671815d831a49bce343138a1cda72f2a08f on tchakabam:hlsjs-adaptive-playback into ed352acd8f0ceed4fd0b54a4ae77fbec1406610f on clappr:master.\n. \n\nCoverage decreased (-0.3%) to 75.893% when pulling a3225b87d2b19fd7859bed4f76616a8c3cce098d on tchakabam:improve-default-demo-setup into ed352acd8f0ceed4fd0b54a4ae77fbec1406610f on clappr:master.\n. \n\nCoverage increased (+0.3%) to 76.31% when pulling 6e7209a7bfd44bf2a648eb44897e4f8bd1a18774 on vagnervjs:fix/playback-destroy into 147867b33c9bcd1268aff6505bbbdb33d2a01e62 on clappr:master.\n. \n\nCoverage increased (+0.3%) to 76.357% when pulling f7443ba1abce98431f9af7a1672c1a1ed0301fcb on jhonatangomes:feature/error-plugin into 85ad15b9b09c28454e0acf7a466916ef786db713 on clappr:master.\n. \n\nCoverage increased (+0.2%) to 76.381% when pulling 855e93837e4d6d537148fe571079b661013fa75d on jhonatangomes:feature/error-component into a61bd3a840f9bf26d657d52fe9b286194bafb525 on clappr:master.\n. \n\nCoverage increased (+0.2%) to 76.31% when pulling eee48825d9d235ff831284596a50167f543179a4 on vagnervjs:fix/remove-src-attr into 85ad15b9b09c28454e0acf7a466916ef786db713 on clappr:master.\n. \n\nCoverage increased (+0.4%) to 76.459% when pulling 5c0f8376ee28ed9703505eeb3813e10718e62772 on joaopaulovieira:media-control-plugin into 26de4436d2c31fc9fbdd3135410e8a1fe5a01a51 on clappr:release/0.3.x.\n. \n\nCoverage increased (+0.9%) to 77.342% when pulling 3c171c8028604c787b70db699279d2e39250033e on jhonatangomes:feature/error-plugin into c96e0f76c3b457b0266e77e46e805a6272ef58f3 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 77.544% when pulling eb3451f7833c8723f402f865dea87495387b7c1c on joaopaulovieira:merge-destroy-method into 3488497e0c42b4d033694e060a45d298b4d3f0eb on clappr:release/0.3.x.\n. \n\nCoverage decreased (-0.06%) to 77.342% when pulling 65ddbcdaf52cb85a358f0400831c759ba4b742b2 on jhonatangomes:feature/improve-error into 77eb7210e83c171f8db92e6deb45f33723b52e81 on clappr:master.\n. \n\nCoverage increased (+0.06%) to 77.463% when pulling 4269dee797164d5219200d827d978687bf941e1d on jhonatangomes:feature/error-mixin-expansion into ffc420dda8149c2dcadce329a5947f163cdf8356 on clappr:master.\n. \n\nCoverage decreased (-0.06%) to 77.407% when pulling 7586cde1ae3f0a4fe1db8c2135af2e2c0ac6b9e6 on Niko78:patch-2 into 86796d4380e7152632ccfcc74c0622d8a56d9c32 on clappr:master.\n. \n\nCoverage increased (+0.3%) to 77.673% when pulling 60b2117bae1791965312d81974412c633387b387 on joaopaulovieira:upgrade-browser-info into 5a2ec2b99c4b4f04c7808637d52d9cfa6454924d on clappr:master.\n. \n\nCoverage decreased (-0.5%) to 76.972% when pulling db7054c96b26252c5667fbb2a419ed8b7a627767 on jhonatangomes:change-playback-destroy into 86796d4380e7152632ccfcc74c0622d8a56d9c32 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 77.384% when pulling 73eda10b9edcc61ae0e43492621c4cabef3c7257 on bent0b0x:events-build into 5a2ec2b99c4b4f04c7808637d52d9cfa6454924d on clappr:master.\n. \n\nCoverage decreased (-0.5%) to 76.929% when pulling 935cfe061bc95a5b26b8c79357157e5f94234bfc on jhonatangomes:feature/disable-error-screen-option into 5a2ec2b99c4b4f04c7808637d52d9cfa6454924d on clappr:master.\n. \n\nCoverage increased (+0.004%) to 77.411% when pulling 2f7105d77a748fedc58a25398fa86430bd96621d on jhonatangomes:fix/i18n-language-fallback into 5a2ec2b99c4b4f04c7808637d52d9cfa6454924d on clappr:master.\n. \n\nCoverage increased (+0.08%) to 77.947% when pulling 237e1648ba5e5cbfdfffd72cc5dd3d99b13f75cc on kslimani:can-autoplay into bc63601651b8d9a110e19b17ea9e3e49abc6ad58 on clappr:master.\n. \n\nCoverage increased (+0.02%) to 77.883% when pulling f8ae4da280f920e70bcb3f606d54e8d0194d70d2 on vagnervjs:feature/playback-configure into bc63601651b8d9a110e19b17ea9e3e49abc6ad58 on clappr:master.\n. \n\nCoverage increased (+0.07%) to 77.901% when pulling 8e491aba7f382e0f4b37aa8e460884fa366972df on kslimani:doc-player-errors into d22dad5c3da3f3a4ff6a88271a1a2770cf3be5e8 on clappr:master.\n. \n\nCoverage remained the same at 77.957% when pulling 0e5312ece44abce53950d2319aac27b0d70bbb49 on vagnervjs:fix/html5-video-volume-lock into 2287ba05337566407be4ed320a2a6eb16ce014e8 on clappr:master.\n. \n\nCoverage increased (+0.06%) to 77.957% when pulling a7e6ee0a05620e92ad1b682ec1135239afad634a on breim:master into 8bd2395b352bbc35e509d619f9e8dfed71c24c31 on clappr:master.\n. \n\nCoverage increased (+0.06%) to 77.957% when pulling 34c85ec0058ae3a901d6125389c509f02cdfcb70 on kslimani:feat-hlsjs-smoothswitch into 8bd2395b352bbc35e509d619f9e8dfed71c24c31 on clappr:master.\n. \n\nCoverage decreased (-0.01%) to 77.924% when pulling 48ef60115f2ad998e2384385de094c3b63f44147 on kslimani:fix-mobile-autoplay into 1f2eb96fb106bbe2376e0004db037d7fb8ff61a9 on clappr:master.\n. \n\nCoverage remained the same at 77.957% when pulling 46a6b361b6a53077fae8bf00b5271039ca0ba305 on add-disable-plugin-documentation into 8fe02f85d6648c62506947b9071f822e574a85b5 on master.\n. \n\nCoverage increased (+0.5%) to 77.957% when pulling 087b23fb58f9097a7c29c57891a8b7e5921f5cf9 on mrlika:patch-1 into 1740c5085dfa60cb0bf3813141b6c7e36dc376e5 on clappr:master.\n. \n\nCoverage increased (+0.5%) to 77.957% when pulling b043336b5b9064ba536f51b2920d79066a9dcc23 on mrlika:patch-2 into 1740c5085dfa60cb0bf3813141b6c7e36dc376e5 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 77.425% when pulling 50a7bc34687d9124a3aa6da4141cf43d5570af47 on kslimani:fix-mediacontrol-autohide into cfeb8412bdd3b7e3d70b030b8d9f3a0828f2433e on clappr:master.\n. \n\nCoverage increased (+0.6%) to 77.924% when pulling 426828c05bcd90f103057b9cc71c6c2d352cc6bc on Lethea:patch-3 into a62658940bcadc7dfd8b99b2d7064b0c210c8ec6 on clappr:master.\n. \n\nCoverage decreased (-0.6%) to 77.389% when pulling 247fe29b154ec172eacbeb5cbb77b05fb2898390 on chriswiggins:seek-time-fix into d1312ff18536a7134aa52372992c0236e2b19d0d on clappr:master.\n. \n\nCoverage decreased (-0.4%) to 77.544% when pulling 3ed52536a64f29182547a02d25af1a93782113c4 on fix/fullscreen-in-ios into d1312ff18536a7134aa52372992c0236e2b19d0d on master.\n. \n\nCoverage increased (+0.7%) to 78.252% when pulling fbd755edc62f39e2085b0667f368df23c8b949f3 on fix/player-on-resize into da050bae1a3a33ad1bec57bae46d801dbe04d00f on master.\n. \n\nCoverage decreased (-0.5%) to 77.945% when pulling 592262b0414e5a9c9fefae7cebeac664a5fe2620 on mimetypes-case-sensitive-1522 into e55c8fe1ce535aa2bef03102d4f977a7ed366e59 on master.\n. \n\nCoverage decreased (-0.5%) to 77.725% when pulling 84b6fccfdab6bf523c180def70752aa245bf8fab on add-jsdelivery-badge into f4482963f6f9cef6933ec385bdf4235bfae94e04 on master.\n. \n\nCoverage remained the same at 78.48% when pulling 9a2ba8898b18160a657f12a3a0a08b2fa41aeed7 on DanielRuf:ci/test-nodejs-6-8-10-11 into f3c14e8a3eb89520ac54acce8cac74134c0fc96d on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 78.429% when pulling 6e6f42fe7fd36d9d2423a9b7041cfa729bdc963f on Setsusan:master into b1ecd4782c28bafca79b0dd4b1a4ed2c063f4e00 on clappr:master.\n. \n\nCoverage decreased (-0.02%) to 78.429% when pulling 27cc7317ef44d76ece00c1100899b0fad6b68e6e on bikegriffith:update_hls_js_0.12 into 004e69133c0b2cf5d6e061050c82ec943b6f8f85 on clappr:dev.\n. \n\nCoverage remained the same at 78.447% when pulling e823553bb8757b84a6ef83c0440df71858d09bfa on bikegriffith:patch-1 into 004e69133c0b2cf5d6e061050c82ec943b6f8f85 on clappr:dev.\n. \n\nCoverage decreased (-0.02%) to 78.429% when pulling 73db804c6e2dde6ec87b5520029934f4c7a88a84 on bikegriffith:patch-2 into 004e69133c0b2cf5d6e061050c82ec943b6f8f85 on clappr:dev.\n. \n\nCoverage decreased (-0.02%) to 78.429% when pulling 59ae691aa09d4f3301343297fcd304d5eafc177c on andrepolischuk:container-jsdoc-extends into 9214a252d6c9568544103af99a8e850d597d50d3 on clappr:dev.\n. \n\nCoverage decreased (-0.04%) to 78.385% when pulling 9f695b98b7dde106a4b16e27fcc5eb227ada0d6d on lmancel:bugfix/getBrowserData into 01f1658be725f6de76941ebcaaba8e2b8dc569ad on clappr:dev.\n. \n\nCoverage increased (+0.3%) to 78.703% when pulling b93cd48dba1a16e4cb56952e1c1515faa54ce9bd on RussCoder:dev into b5d9e24d2d3551b801f123cdea70c98cf790bd2c on clappr:dev.\n. \n\nCoverage remained the same at 78.385% when pulling b54725b8039dd2ae048567d732204aad4844b946 on kad3nce:patch-1 into b5d9e24d2d3551b801f123cdea70c98cf790bd2c on clappr:dev.\n. ",
    "aergistal": "@irongomme \nI confirm this works with the the provided HLSPlayer.swf. Tested with a live, adaptive bitrate stream.\n. ",
    "JoosyBill": "Hi Bruno,\nYes, this commit solves the problem. I apologize for not testing the new commit sooner. Thank you for addressing the issue so quickly.\n-Bill\n\nOn Apr 22, 2015, at 11:53 PM, Bruno Torres notifications@github.com wrote:\n@JoosyBill https://github.com/JoosyBill Could you please check whether the problem have been solved after commit 48c94af https://github.com/clappr/clappr/commit/48c94affdd787659cc1655469885eae8b0cfaa46?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/clappr/clappr/issues/416#issuecomment-95350423.\n. \n",
    "neilkinnish": "I have a similar issue.\nPlaylist and ts files served over SSL will not play at all, through non SSL everything works fine.\n. ",
    "mangui": "i would guess it is an AES Initialization Vector issue.\nwhen IV is wrong, first 16 bytes are wrong (usually first 16 bytes of TS fragment is the PAT. the PAT contains the PMT PID ... if the PMT PID is incorrect because of bad IV it will not be found ...) but the following bytes are correct;\nsee http://crypto.stackexchange.com/questions/2865/why-does-cbc-decryption-with-a-wrong-iv-still-give-readable-results\n. in flash you can easily stretch, jwplayer uses the following code to stretch:\nhttps://github.com/jwplayer/jwplayer/blob/master/src/flash/com/longtailvideo/jwplayer/utils/Stretcher.as.\nin html5, it has nothing to do with hls.js, you just need to find a way to stretch the video element itself.\nCSS3 transform seems to be the way\nhttp://stackoverflow.com/questions/3779771/html-5-video-stretch/3780896#3780896\n. you can refer to https://github.com/mangui/flashls/issues/273\n. :+1: \n. :beers: !!!\n. @cowai in order to assess your statement, could you install Adobe Scout (available for free) and post your profiling results highlighting the performance issue between different release of flashls ?\n. Mmm unfortunately not ... but remote profiling might be doable. Or maybe the perf issue is not linux specific ?\n. well, we need to understand what is going on. a bunch of optimizations have been done in the 0.4.x as well... there might be something wrong, either on Linux specifically, or with any flash 11.2\n. @cowai \nthe issue happens when no CODECS are specified in the main manifest.\nif your manifest correctly declare the audio codec, then it should be fine ? or please share your stream\n. @cowai \ncan you report the log of your playback session from chrome://media-internals ?\n. weird, could you share your stream ? \neven privately, here is my email address\ncurl -i https://api.github.com/users/mangui/events/public | grep email | grep gmail\n. could you confirm that the error only happens when using adaptive streaming ?\nI don't seem to get the issue while checking on a mono level stream, for example http://146.185.141.228/hls/miracle1_high/index.m3u8\n. can you retry on http://dailymotion.github.io/hls.js/demo/?src=http%3A%2F%2F146.185.141.228%2Fhls%2Fmiracle1.m3u8\nwith Auto-Recover Media Error enabled ?\n. well, i can see sample overlapping with your stream when doing quality switch \ni.e. your fragments are not well aligned when switching between quality level. I saw a gap of 150ms.\nalso if could avoid using different audio codecs (HE-AAC and AAC) it would help, as browsers are not supporting audio codec switch really well with MSE.\n. autorecover is not an hls.js option.\nit is handled directly in the demo page.\nhttps://github.com/dailymotion/hls.js/blob/master/demo/index.html#L564-L567\n. you need to enable video.smoothing = true on flash.media.Video object\nwith OSMF, it needs to be enabled on org.osmf.media.videoClasses.VideoSurface. nice ! would be interesting to use that on hls.js itself as well. you rock @flavioribeiro . ",
    "ishahak": "Hi Bruno,\nmany thanks for your response.\nChrome is reporting this:\n1. Remote Address:\n     54.231.33.36:80\n   1. Request URL:\n      http://cdn.clappr.io/latest/assets/Player-Regular.ttf\n   2. Request Method:\n      GET\n   3. Status Code:\n      200 OK (from cache)\n   4. Response Headers\n   5. Content-Length:\n      5081\n   6. Content-Type:\n      application/x-font-ttf\n   7. Date:\n      Tue, 28 Apr 2015 06:25:56 GMT\n   8. ETag:\n      \"3e43a5d764f841e7e78896de82cd6c50\"\n   9. Last-Modified:\n      Thu, 23 Oct 2014 20:22:09 GMT\n   10. Server:\n       AmazonS3\n   11. Via:\n       1.1 Application and Content Networking System Software 5.5.37\n   12. x-amz-id-2:\n       SE50NB7HL9afMpebgf1vRTFH9Y1Q59Ln1+xB7LGWmD0r5XL0+dN1WLiAWSsV+ZuT\n   13. x-amz-request-id:\n       059232200AFFF7E6\n   14. Request Headers\n   15. Provisional headers are shown\n   16. Origin:\n       http://localhost:8881\n   17. Referer:\n       http://localhost:8881/\n   18. User-Agent:\n       Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36\n       (KHTML, like Gecko) Chrome/42.0.2311.90 Safari/537.36\n--> so I do not see the headers which you see.\nbesides,here is my curl response:\n>curl -vv http://cdn.clappr.io/latest/assets/Player-Regular.ttf\nhttp://cdn.clappr.io/latest/assets/Player-Regular.ttf\n- Adding handle: conn: 0x7f9b58804000\n- Adding handle: send: 0\n- Adding handle: recv: 0\n- Curl_addHandleToPipeline: length: 1\n- - Conn 0 (0x7f9b58804000) send_pipe: 1, recv_pipe: 0\n- About to connect() to cdn.clappr.io port 80 (#0)\n-   Trying 54.231.13.244...\n- Connected to cdn.clappr.io (54.231.13.244) port 80 (#0)\n\nGET /latest/assets/Player-Regular.ttf HTTP/1.1\nUser-Agent: curl/7.30.0\nHost: cdn.clappr.io\nAccept: /\n\n< HTTP/1.1 200 OK\n< x-amz-id-2:\nZKh05nsEjGBJxc1Evspgy8zd+GjLbhc8KOlF2Y4xIFtf57/6Et+po16RyYPDL2qgjrA1OYB3+F0=\n< x-amz-request-id: 5A853D952A5FE993\n< Date: Fri, 01 May 2015 07:04:32 GMT\n< ETag: \"3e43a5d764f841e7e78896de82cd6c50\"\n- Server AmazonS3 is not blacklisted\n< Server: AmazonS3\n< Content-Length: 5081\n< Content-Type: application/x-font-ttf\n< Last-Modified: Thu, 23 Oct 2014 20:22:09 GMT\n< Via: 1.1 ntn01-dmz-wsa-1-mgmt.cisco.com:80 (Cisco-WSA/8.5.0-497), 1.1\nApplication and Content Networking System Software 5.5.37\n< Connection: Close\n<\n--> so it is possible that the Flash plug-in on Mac is not using the -I\noption which I'm getting just like you:\n>curl -I -H 'Origin: http://localhost:8881 http://localhost:8881'\n'http://cdn.clappr.io/latest/assets/Player-Regular.ttf\nhttp://cdn.clappr.io/latest/assets/Player-Regular.ttf'\nHTTP/1.1 200 OK\nx-amz-id-2: DXQUkIw5W9+RyVwkY6d6pAedqPYGajvd6gC2Zrj9cAZgoEatxB19Qn78xNqMdmu5\nx-amz-request-id: C2BA2A8DAD60ABAE\nDate: Fri, 01 May 2015 07:11:47 GMT\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: PUT, GET, POST, DELETE, HEAD\nAccess-Control-Max-Age: 3000\nVary: Origin, Access-Control-Request-Headers, Access-Control-Request-Method\nETag: \"3e43a5d764f841e7e78896de82cd6c50\"\nServer: AmazonS3\nContent-Length: 5081\nContent-Type: application/x-font-ttf\nLast-Modified: Thu, 23 Oct 2014 20:22:09 GMT\nVia: 1.1 ntn01-dmz-wsa-1-mgmt.cisco.com:80 (Cisco-WSA/8.5.0-497), 1.1\nApplication and Content Networking System Software 5.5.37\nConnection: Close\n2015-05-01 0:21 GMT+03:00 Bruno Torres notifications@github.com:\n\n@ishahak https://github.com/ishahak I'm not sure why you're having this\nissue. The CDN is already configured to return CORS headers correctly. I\ntried accessing it using curl and the result was this:\ncurl -I -H 'Origin: http://localhost:8881' 'http://cdn.clappr.io/latest/assets/Player-Regular.ttf'\nHTTP/1.1 200 OK\nx-amz-id-2: lRFx2lMP1pxoUbtNj3Vej+V+V3AuB17Y/e3M2RykOa6b79gFJMIPgtZ0X3g8bVGtVkVoBeOm2Vk=\nx-amz-request-id: BD092FEA2F9EEC04\nDate: Thu, 30 Apr 2015 21:16:18 GMT\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: PUT, GET, POST, DELETE, HEAD\nAccess-Control-Max-Age: 3000\nVary: Origin, Access-Control-Request-Headers, Access-Control-Request-Method\nLast-Modified: Thu, 23 Oct 2014 20:22:09 GMT\nETag: \"3e43a5d764f841e7e78896de82cd6c50\"\nContent-Type: application/x-font-ttf\nContent-Length: 5081\nServer: AmazonS3\nCould you please check whether this command returns the same from your\nlocation?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/clappr/clappr/issues/429#issuecomment-97972328.\n. Hi Bruno,\nI can confirm that with VPN I do not see this error.\nso it means that without \"Origin\" header, loading of fonts will fail. this\nleads to a problem for some corporate networks.\nI think you can close this bug.\nmany thanks!\n-Itay\n\n2015-05-02 1:28 GMT+03:00 Bruno Torres notifications@github.com:\n\n@ishahak https://github.com/ishahak I noticed you didn't add the Origin\nheader to your curl request. Could you please try it again, using the\nparameter -H 'Origin: http://localhost:8881'?\nI suspect this Cisco ACNS may not set the response headers correcly, even\nwhen the Origin header is set. Your browser request/response made me think\nthis way. Maybe testing through a VPN may show whether this is true.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/clappr/clappr/issues/429#issuecomment-98255039.\n. \n",
    "lkkadiri": "@towerz Thanks for your response, but i feel like i am noticing a bug. I started the stream(click play) and waited over 5 mins, it still would not let me seek, seems to be stuck to the very end on the right. is there anything i need to watch out for?\nThis is what i have for the player,\n<head>\n<script type=\"text/javascript\" src=\"http://cdn.clappr.io/latest/clappr.min.js\"></script>\n</head>\n<script type=\"text/javascript\">\n  var player = new Clappr.Player({source: \"http://10.0.1.69/media/hls.m3u8\",maxBufferLength: 100, useDvrControls: true, mediacontrol: {seekbar: \"#E113D3\", buttons: \"#66B2FF\"}, parentId: \"#player\"});\n</script>\n\nAny help would be great!\n. Were using Elemental server to spit out m3u8, it makes chunks of ts files. I am confused about what the append mode and rolling modes are as i see no documentation on elemental to set it. However i do see a bunch of ts files that the playlist uses.\n. @konashark I have tried clearing my cache and it does not seem to work and i tried building the latest master locally to only find out the bin/hook.js is no more included in the project and the build seems to fail.\n. @konashark Thanks for the suggestions, still no luck for us here. I was trying to build as a last resort but i can only build the stable version which still uses that cdn dependency for the hls swf file.\n. Yeah we figured that out thanks @thiagopnts. Also opening a PR to address the playbackhls that still uses window.Clappr\n. :+1: \n. @jfairley @dviramontes\n. Making the change suggested by @dviramontes fixes the build but now the min version of clappr does not seem to find the swf file. I now see this error,\nFailed to load resource: the server responded with a status of 404 (Not Found)\nhttp://localhost:3000/js/96f944f0104ee30b8fce6cffd89e13aa.swf?inline=1\n. @towerz I still get this error, \nGET http://localhost:3000/js/96f944f0104ee30b8fce6cffd89e13aa.swf?inline=1  404 (Not Found)\nSeems like its unable to find the swf file still.\n. @towerz thanks for the prompt responses! You Rock buddy!\n. It worked fine on 0.2.14, we needed to upgrade to 0.2.15 as we were noticing some issues in 0.2.14. The latest version fixes some bugs but now seems like the dragging is broken now. However, clicking anywhere on the seekBar works just fine its just the dragging is where we are seeing the issues.\n. @tjenkinson I see the same behaviour with the latest build as well.\n. Our application requires the native player as we have functionality like frame stepping which only works on the native player. Maybe we can leave this ticket open until this gets fixed?\n. ",
    "jfairley": "Actually it's \"Elemental Live\" that we're using. Elemental Server is merely a transcoder.\nI'm not sure how to toggle \"appending\" vs \"rolling\" mode, but we've tried \"VOD mode\" (which sounds right) off and on and have no DVR support either way.\nIs there anything special in the m3u8 file? Would it be helpful to share a sample playlist file?\n. It's worth noting that we have also tried JWPlayer. DVR works with that player, but we'd like to use (and eventually contribute to) clappr if we can get the basics working.\n. Oh. VOD mode works if we give it 240 seconds of buffer time.  Sweet.\n. I would love to see DASH integration.\nI tried to use shankardevy/clappr-dash-plugin, because it is linked from the README. Unfortunately, it's not in NPM, so I cloned it. I'm struggling to get it integrated.\nIs anyone else using this plugin successfully? Maybe it only worked with an older version of clappr?\n. @towerz How is the progress going? I suspect I'm better off waiting rather than fixing the other plugin.\n. That is a much nicer call. Thanks.\nI bundle the clappr player from npm. Any idea when this will go into a release?\n. :+1: \n. @towerz We're actually using CommonJS + Browserify to import clappr. For this reason we were surprised that a CDN is getting used at all (the swf is coming from CDN). Are there future plans to completely remove the depedency on the CDN when using CommonJS?\nLet me know if you'd like me to open this as a separate issue.\n. Nice. Thanks @towerz. I'll start looking into how this change affects our app.\n. btw, I'll start working on a unit test for this change....\n. FYI: @lkkadiri, @dviramontes\n. Good find: https://github.com/clappr/clappr/commit/8d57f8417acd6693e2d98782df2fedffa461cc68\nI tested locally, and it works great. Thanks!\nWhen can we expect a 0.2.2?\n. :+1: looking great. thanks.\n. We're using clappr in an upcoming product. We have other products using video.js. Most things \"just work\", but I have noticed that seek time feels snappier with clappr. If all goes well once deployed, I would consider converting the existing products as well.\nwww.reachengine.com\n. https://github.com/clappr/clappr/commit/b309deb795fa0f02cd024f46751385972b1dd3fd\n. because of this https://github.com/clappr/clappr/commit/b309deb795fa0f02cd024f46751385972b1dd3fd\n. We don't use multiple sources, but knowing that it was an options, I always assumed that it would work like a fallback chain. :smile:  I would be in favor of that being the default functionality.\nWe have a flash app that plays multiple sources in sequence, but in general, our video needs don't call for that functionality, so I would agree with it being an option enabled via a plugin.\n. Oh, interesting. Thanks @flavioribeiro. I'm interested to learn the proper workflow for getting in new features.\nAlso, how is Player.swf used? Is that for RTMP?\n. :+1: thanks\n. @towerz I was just having a look at mangui/flashls to make the necessary changes. Would you prefer that I submit a PR into clappr/flashls instead?\n. No. I want to expose the step function on the NetStream object. Highly generic.\n. FYI, I am testing the waters to make sure there is no one vehemently opposed before I do the work.\nhttps://github.com/mangui/flashls/issues/382\n. :dancers::dancers::dancers:\n. @flavioribeiro, I'm curious. How's this going? We're anxiously waiting. :smiley: \n. I second listening for buffering events.\nJust taking a simple use case of a play-pause button which would just listen for changes to isPlaying, even when buffering, I would expect the button to show  rather than . Assuming a player always buffers immediately after the user clicks play, having isPlaying() return false when buffering gives the user the feeling that something is broken (because the button icon doesn't immediately change in response to the click).\n. @flavioribeiro, unless someone else gives the thumbs up sooner, @dviramontes or I will pull it down and give it a test drive tomorrow at the office.\n. Here's the config I'm running, modified from the default test page. You can't see our .m3u8, but there's nothing special about it.\njavascript\nvar player = new Clappr.Player({\n  source: 'http://10.0.1.69/media/hlsLiveTest01/stream/hls.m3u8',\n  plugins: { playback: [Clappr.HLS] },\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\nChrome (47.0.2526.8 dev)\nEverything looks great in Chrome, so it's definitely the test bed.\nIn live mode, the play head location is a little funky, but knowing how HLS works, I completely understand why it looks they way it does. I'm happy to see that we're getting accurate values for duration and currentTime. :+1: We both need to do some tweaking in our seek bars to make things look prettier.\nOpera (32.0)\nI see the link to #558 about this not working in Opera. For me in Opera, the player looks every bit as good as it does in Chrome.\nI did see one glitch in frame stepping, but it seems like the buffer wasn't loaded. When I quickly played/paused, I could step. ( I did the frame stepping in our app, not the demo page. :wink: )\nFirefox (42.0b5)\nIt's funky in Firefox, but I would expect so, since FF doesn't support HLS. I was surprised that it plays and the audio is fine. It's only the video frame that FF fails to render correctly. NBD. Use Flash in FF.\nAbout that... I tried declaring both playbacks, but it still tried to use HLS. I suppose we'll need to determine the browser at runtime and apply the correct plugins as necessary. Is that what you would expect?\n``` javascript\n// does not work :(\nplugins: { playback: [ Clappr.HLS, Clappr.FlasHLS ] }\n// what I'll do instead\nlet playback = isFirefox ? Clappr.FlasHLS : Clappr.HLS\nplugins: { playback: [ playback ] }\n```\nSafari (9.0)\nIn Safari, when I declare the HLS plugin, my CPU pegs at 100%, and I get the spinning beach ball (OSX). Without the plugin (defaulting to native), everything runs fine. Of course with no plugin, the live mode currentTime / duration are still 1 / \u221e (or vice versa, I don't remember).\nIn fact, something nice that I found is that when no plugin is applied, Clappr correctly decides to use native in Safari, while it correctly decides to use HLS when in Chrome and Opera. :clap: Unfortunately, FF also tries to use HLS, so I'll need to keep my switch to force FF to use FlasHLS.\nprobably...\njavascript\nvar config = {\n  source: 'my-source.m3u8',\n  plugins: {},\n  // other settings\n}\nif (isFirefox) {\n  config.plugins.playback = Clappr.FlasHLS\n}\nvar player = new Clappr.Player(config);\n. woo hoo :beers: \n. :confetti_ball:\n. \n. So another interesting thing... If I'm close enough to the live end of the stream (but still not live), I see something similar but different.\nEvery 10 seconds, duration jumps instantaneously (because it came from an event), then this.el.duration races to catch up. You see an upward slide in the 1st number.\nThe effect on my seek bar is very strange. Every 10 seconds, the play head jumps forward 10 seconds, then slides backwards to where it is supposed to be.\n\n. I see it in\n- Chrome 48.0.2560.0 dev (64-bit)\n- Chrome 48.0.2563.0 canary (64-bit)\n- Opera 32.0.1948.69\nI actually don't have vanilla Chrome installed.\n. BTW, in the meantime, I've found that bypassing the getters in clappr seems to work for me. Hopefully this is just a temporary work-around, but it's definitely interesting that it works as well as it does...\njavascript\n    onPlayerTimeUpdate(progress, duration) {\n        var videoElement = document.querySelector('video');\n        progress = videoElement.currentTime;\n        duration = videoElement.duration;\n        TimeActions.timeUpdate(progress, duration);\n    }\nI also had to bypass the built-in seek function, since it uses the suspect value for duration. In it, I found that seekSeconds works really really well. I know there's another discussion ongoing about that.\njavascript\n    onSeek(seekTo) {\n        window.player.core.mediaControl.container.playback.seekSeconds(seekTo);\n        //window.player.seek(100 * seekTo / TimeStore.getDuration());\n    }\n. First, I'm not sure what it means to have a stream that is a sliding window. Does that mean that media from the beginning of the stream is eventually unavailable? If that is so, I have no opinion on what current time looks like in that use case as I can't say I'm familiar such a UX.\nWhile my streams are live streams, the user can always seek back to the beginning. It's more like DVR functionality from your cable provider. You can record a TV show and either watch it as it happens or catch it later. But either way, you can always view the entirety of what has already happened. As duration grows, I expect current time to continue growing also. I expect current time to never be less than a previous value.\n. @tjenkinson I didn't get to try out your changes, but @lkkadiri was telling me that it was looking pretty good.\nYou're right about not wanting to rely only on duration from the video tag. Although, our scenario improved greatly, we did start seeing funkiness when we started seeking back and pausing during long streams. Let us know if we can test out any further changes.\n. :+1: Thanks a bunch!\n. Good discussion. As a user of React, I just want to add a comment on that aspect. As much as I love using React, I agree with @towerz on keeping Clappr free of extra dependencies.\nWe've built a library which wraps Clappr, which we import as a dependency into a few of our apps. We found that React does not like to have itself instantiated twice, since React tracks DOM changes via its \"virtual DOM\". Anyway, we found that our video player component's React dependency was conflicting with the outer UI's React dependency. To \"fix\" it, React is listed as a peer dependency, and not bundled. It's fine for us, because our React UI consumes our React video player, but it's a bit awkward for another group whose Angular UI needs to add our React-built video player plus add React as a script tag in their app.\nSo if your scenario ended up like ours, you would have to choose between requiring users to add React to their apps, or potentially introducing conflicts with React apps that want to consume Clappr.\nBTW, this is all true for 0.13.3. I know they added a dev-mode warning in 0.14 (#2402 and #3332), but even then if I understand the comments and changes correctly, it seems like stars have to be aligned for things to work as expected (as in the user must use npm@3, and all React plugins must correctly declare React as a \"peerDependency\").\nReact is awesome, but I don't think it's mature enough to be used as a \"behind the scenes, unbeknownst to the user\" type of framework.\n. Here's how we interact with Clappr (slimmed down for clarity).\n``` javascript\nimport React, {PropTypes} from 'react';\nimport Clappr from 'clappr';\nexport default class Player extends React.Component {\nstatic propTypes = {\n    sourcePath: PropTypes.string.isRequired\n};\n\ncomponentDidMount() {\n    // build player config\n    const playerConfig = {\n        source: this.props.sourcePath,\n        parentId: '#player'\n    };\n    // build a player\n    this.player = new Clappr.Player(playerConfig);\n    // bind events\n    const Events = Clappr.Events;\n    this.player.on(Events.PLAYER_ERROR, console.error);\n}\n\ncomponentWillReceiveProps(nextProps) {\n    if (nextProps.sourcePath !== this.props.sourcePath) {\n        this.player.load([nextProps.sourcePath]);\n    }\n}\n\ncomponentWillUnmount() {\n    this.player.destroy();\n    this.player = null;\n}\n\nshouldComponentUpdate() {\n    return false;\n}\n\nrender() {\n    return <div id='player'/>;\n}\n\n}\n```\nWe also have much more in our config, bind to many other Clappr.Events, and programmatically play/pause/seek/etc, but taking that step isn't difficult once you have this set up.\n. Just a 2-cents here... I tried out coveralls, but hated the UX, so I switched our projects to https://codecov.io/. I'm much happier looking at that site. :grin: Try it out if you get a chance.\n. Yeah googling was difficult for me too... I had only found this one before I got tired of hitting \"next\"\nhttps://codecov.io/github/audreyr/cookiecutter\nI messaged them and got these links.\nhttps://codecov.io/github/pyca\nhttps://codecov.io/github/spotify\nhttps://codecov.io/github/shopify\nhttps://codecov.io/github/docker\n. Cool. I use the service for both Java and JavaScript (Node, Angular, and React). My projects are all private, but I can still help set up if you need.\n. ES6? yes\n. I can get it to install with the latest node, but I'm currently fighting through a laundry list of other issues in my own app due to the peerDependency change in npm@3. Any idea what the issue is with older node (or presumably, npm@2)?\n. Yes. When I install npm@2 (2.14.15) with stable node (5.4.1), I get the errors. So something downstream of clappr is no longer compatible with npm@3 which is tough, because of the way dependency resolution changed. As I stated above, my app has all kinds of new errors with npm@3. :frowning: \n. Well, the good news for me is I'm getting close to getting running again. Only thing still busted is my webpack-dev-server configs, but other than that my app is working as long as I upgrade node. I suppose I'll close this. Thanks for helping.\n. renamed so others can find it in the future\n. FYI, while 0.2.29 still fails with npm@2, I want to report that 0.2.30 installs and builds fine. Some dependency of a dependency that had a bad version locked down in shrinkwrap, I'm sure.\n. Here is my temporary workaround:\n1. .gitignore\n!node_modules/.hooks/*\n2. node_modules/.hooks/preinstall\nbash\n   #!/bin/sh\n   if [[ `pwd` = */clappr ]]; then\n       rm npm-shrinkwrap.json\n   fi\n:grin: \n. I had another idea based on how I release one of my projects.\nI bet that dist/clappr.js is already self-contained, and all those dependencies that are pulled down are not even needed. What I do is put a slimmed-down package.json (same, but without \"dependencies\" or \"devDependencies\") inside dist, and I publish with npm publish dist. That pushes only the dist folder to npm, and when I consume my release, \"npm install\" does no extra installs.\nThis is actually perfect for UI libraries, because the JS is usually already minified, browserified, etc anyway, and all a user needs to do is include it. It would get around this shrinkwrap issue AND as a bonus, it would speed up user's installs.\nI can explain further or put something in PR if you're confused at what I'm suggesting.\n. Please see https://github.com/clappr/clappr/pull/822\n. Coverage dropped with config changes. That's one reason I stopped using coveralls. :wink: \n. BTW, I don't know what you bower release process looks like, and I'm not familiar with \"yuidoc\", so let me know if I can update this to better support those libraries.\n. @towerz I can't say I'm familiar with the types of potential issues you sound familiar with. If you choose to not merge, I understand. \nI do hope you give some thought to #793, however. Your use of shrinkwrap forces me to have a preinstall script to remove it so I can build in linux. Alternatively, I know I can use node 5, but my dependency graph is all sorts of busted in npm 3, so that's not something I can easily jump into unfortunately.\n. https://github.com/clappr/clappr/pull/866 solves my immediate issue. Fine to close.\n. :+1: thanks @tjenkinson \n. fyi, npm start is a shortcut for npm run start\nhttps://docs.npmjs.com/cli/start\n. ",
    "princ007": "Hi @towerz Thank you for the answer.\nI actually tried to use the combination of code for m3u8 and rtmp, but it seems can't be functionally to me.\nHere is my code, probably I made some mistakes.\nhttps://gist.github.com/princ007/e2f372223e8a2de39bc0#file-gistfile1-as\n. ",
    "buzzdev": "Hi @towerz, i used the cdn version and today i've stripped it to bare minimum of an example in your md, to make sure, that i am not messing it in my app:\n<head>\n  <script type=\"text/javascript\" src=\"http://cdn.clappr.io/latest/clappr.min.js\"></script>\n</head>\n<body>\n  <div id=\"player\"></div>\n  <script>\n    var player = new Clappr.Player({source: \"http://myStreamURL/stream.m3u8\", parentId: \"#player\"});\n  </script>\n</body>\nEven this stopped working after the last commit 3 days ago.\nThen i checked out one commit earlier, saved locally, and everything works again.\nCrossdomain is set to * and works as expected.\nMy stream is a live HLS/h264 stream.\nthanx\nm.\n. @towerz, thanx Bruno, i'll test the new version today and let you know.\nMy stream is not working at http://cdn.clappr.io so far with following error:\nUncaught TypeError: this.el.playerSetflushLiveURLCache is not a function\n. Hi @towerz, i've updated my local files to 0.1.1 and it does NOT work, same as it does not work at http://cdn.clappr.io with following error:\nUncaught TypeError: this.el.playerSetflushLiveURLCache is not a function\nthanx\nm\n. Oh! sorry, my fault.\nI had it cached and after completely wiping the cache, it is WORKING now.\nMany thanxs\n. ",
    "gotzmann": "I've seen the same thing today. Clappr just didn't work - nor local, nor production. Then I've updated it and all things going fine now.\n. I've attached screenshot from Firefox with right 16:9 and Chrome screenshot with shrinked video. As I see now chopped image even more brighter (that's not good and seems like another problem).\n\n\n. It's a live HLS. You could try by yourself with similar stream: http://hlsstr04.svc.iptv.rt.ru/hls/CH_MIR/variant.m3u8?version=2\n. And here another example with http://hlsstr04.svc.iptv.rt.ru/hls/CH_MIR24/variant.m3u8?version=2\nPlease see thin grey line above player - the exact size of Clappr is 640x360 in both cases.\n1 Firefox - no problems\n\n2 Chrome - video is shrinked (see black parts) and much-much brighter\n\n. @towerz you are right, the bug disappear without hardware acceleration, thanks! OK, I have to check it with different platforms and browsers later, but for now it's easier simply detect Chrome or disable acceleration by default.\n. ",
    "timbiker": "Dears,\nI just want to comment that I have a issue which seems to be similar.\nI play a 4:3 video in a 4:3 size clappr player, and I get a black part at the top and a missing part at the bottom.\nI am also unable to select different full screen mode (fit/fill...)\n. Indeed I forgot to mention,\nI am also using the the rtmp plugin, reading an flv(h264+aac) stream encoded with ffmpeg.\nPlaying the stream with JWplayer or vlc is just fine\nregarding various Full screen mode, is there any plan on supporting them ?\n. ",
    "shaharmor": "No, the issue does not affect the streaming at all, its just the console\nlogs...\nOn Thursday, May 14, 2015, Fl\u00e1vio Ribeiro notifications@github.com wrote:\n\nyep, its related to pepper flash implementation. @shaharmor\nhttps://github.com/shaharmor, are u experiencing black screens when\nfacing this error?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/clappr/clappr/issues/447#issuecomment-102058955.\n. Hls\n\nOn Friday, May 15, 2015, Bruno Torres notifications@github.com wrote:\n\n@shaharmor https://github.com/shaharmor What kind of source are you\nusing? Is it a mp4 or HLS stream?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/clappr/clappr/issues/448#issuecomment-102191624.\n. Can it be disabled? We are using the bufferfull event to measure buffers\nand this is (obviously) not a buffer so that event is a bug.\n\nOn Saturday, May 16, 2015, Bruno Torres notifications@github.com wrote:\n\n@shaharmor https://github.com/shaharmor Indeed, the HLS playback\ntriggers a bufferfull event after changing to PLAYING state, whether it's\nbuffering or not. I believe this was done to workaround an issue on a older\nversion of our flashls implementation, but it seems to be unnecessary right\nnow.\nIt won't cause any unexpected behavior as well, because changing to a\nPLAYING state implies that the player is not in a buffering state.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/clappr/clappr/issues/448#issuecomment-102530195.\n. I know, but even in Clappr itself there are places that trigger with multiple paramters...\n\nhttps://github.com/clappr/clappr/blob/master/src/playbacks/hls/flashls_events.js#L11\nhttps://github.com/clappr/clappr/blob/master/src/playbacks/hls/flashls_events.js#L17\nhttps://github.com/clappr/clappr/blob/master/src/playbacks/hls/flashls_events.js#L20\nand probably others...\n. All i wanna do is just as the method name says, check if the play is playing (Not buffering).\nBy playing i mean actually showing moving frames on the screen...\n. I have only tested this when playing hls, on both chrome & firefox.\nIf you want to reproduce it, simply set the browser network to limited (using chrome dev-tools for example), and then click play and check the response of .isPlaying()\n. If someone relies on isPlaying to really have the player play the stream, but there is a real bug the causes it to not get out of buffering mode, .isPlaying won't catch that.\n. Thats not what i mean.\nI mean something like this:\n``` javascript\nClappr.Player.defaults = {new: 'stuff'};\nvar player = new Clappr.Player({});\n// player.options.new === 'stuff'\n```\n. Hey @leandromoreira, thats a very good question.\nMy main reason being I'm developing a plugin for Clappr, and i want to modify some of the player settings when users include my plugin (The script tag), their default settings will automatically change to use my recommended ones instead of them having to manually change the player code\n. yeah i know about the one 8 days ago, but yesterday you fixed a bug by updating hls.js, which i need :)\n. I used Chrome 47, but upgrading to 48 seems to have fixed it. Thanks!\n. The way its done in hls.js is:\n1. listen to the error even on the video tag:\n``` javascript\nvideotag.addEventListener('error', function(e) {\n    var mediaError = e.currentTarget.error;\nif (mediaError.code === mediaError.MEDIA_ERR_DECODE) {\n    recover();\n}\n\n});\n```\nAnd also to hlsjs errors:\njavascript\nhls.on(Hls.Events.ERROR, function(event, data) {\n    if (data.fatal) {\n        switch (data.type) {\n            case Hls.ErrorTypes.NETWORK_ERROR:\n                hls.startLoad();\n                break;\n            case Hls.ErrorTypes.MEDIA_ERROR:\n                recover();\n                break;\n            default:\n                // cannot recover\n                break;\n        }\n    }\n});\nwhere the recover() function is:\njavascript\nfunction recover() {\n    if (!_recoveredDecodingError) {\n        _recoveredDecodingError = true;\n        hls.recoverMediaError();\n    } else if (!_recoveredAudioCodecError) {\n        _recoveredAudioCodecError = true;\n        hls.swapAudioCodec();\n        hls.recoverMediaError();\n    } else {\n        // failed recovery\n    }\n}\nand _recoveredDecodingError & _recoveredAudioCodecError are instance members.\nAny chance to get this implemented?\n. You can look at an example here: https://github.com/dailymotion/hls.js/blob/master/demo/index.html#L623-L642\n. @leandromoreira will it be today?\n. @tjenkinson I didn't check mp4.\nRegarding this line you sent: https://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L279\nit will be called the playing is emitted, but the issue i'm talking about it the initial buffer-start event.\nIn normal conditions i expect CONTAINER_STATE_BUFFERING to be called as soon as the initial loading starts (when the first request to the manifest is sent basically), but if autoPlay is true, it will only be called when playback starts, which is basically incorrect.\n. Btw, this also means that if autoPlay is true, no spinning/loading gif will be shown when loading starts, which is also a problem no?\n. I still think that calling .play is the right way, (Maybe only for hls playback).\nBtw, in flash, you do call this.play().\nWhy not call .play directly instead of using the autoPlay property of the video tag?\n. Yeah i understand that different devices have different behavior, but as it is right now, the autoPlay mode is missing a call to this._handleBufferingEvents();, so we should either add it manually or find a better way of triggering it\n. I tested it but changing this line:\nthis.options.autoPlay && this._setupHls() \nwith this:\nthis.options.autoPlay && this.play()\nAnd it fixes all my issues \ud83d\ude04 \nDidn't check IOS though\n. It depends if you call autoPlay a user intent or not \ud83d\ude04 \n. @tjenkinson i now see that webworkerify-webpack was upgraded, even though the fix that should have made it possible in hls.js was only merged to master which is not the version you are using.\nDoes this mean that WebWorker won't work now?\n. Thnx, just wanted to make sure \ud83d\udc4d \n. @tjenkinson are you sure about this? i just checked the latest version and i'm seeing the webworker error\n. I didn't check it with Clappr, just with hls.js bundled using webpack.\nWhen i use v1.0.6 with your webpack fix, it works.\nWhen i use v1.1.5 with your webpack fix, it fails.\n. Where did you do it?\nI'm bundling hls.js (v0.5.42) in webpack, with this in my webpack config:\njs\nplugins: [\n      new webpack.NormalModuleReplacementPlugin(/^webworkify$/, 'webworkify-webpack')\n    ]\nand then when i start a page with my bundled player i get:\n[error] > error while initializing DemuxerWorker, fallback on DemuxerInline\n. The git commands you used are in Clappr? Let me try that too\n. @tjenkinson You are right.\nApparently the issue is related to WebPack sourcemaps \ud83d\ude22 \nWhen sourcemaps are enabled (I'm using #eval-source-map) i'm getting that error, when i disable them its all good.\n. btw, #inline-source-map works\n. @tjenkinson didn't you remove the constructor call to _setupHls() in this commit? https://github.com/clappr/clappr/commit/ded3e88e33cd29dc48b4fd1b6e47a054a580b763\nHow is it back in master?\nEdit: Oh i see you added it back here: https://github.com/clappr/clappr/pull/1069/files#diff-7ee430bf68b0817be7d8e6d9c0444846R119\nAny specific reason?\n. This is what brought it back: https://github.com/clappr/clappr/pull/1069/files#diff-7ee430bf68b0817be7d8e6d9c0444846R119\n. @leandromoreira what about people that used a custom XHR loader for hls.js that was passed using Clappr's config? This update broke it for them because hls.js 0.6.x has a different API for its xhr loader.\n. ",
    "kwarismian": "I have added a bug report to Chromium bug tracker to at least attempt to get Chrome to address this issue.\nIf you have a moment please go by and star the issue.\nhttps://code.google.com/p/chromium/issues/detail?id=512828&colspec=ID%20Pri%20M%20Stars%20ReleaseBlock%20Cr%20Status%20Owner%20Summary%20OS%20Modified\n. https://code.google.com/p/chromium/issues/detail?id=512828&colspec=ID%20Pri%20M%20Stars%20ReleaseBlock%20Cr%20Status%20Owner%20Summary%20OS%20Modified\n. Those issues are primarily reporting the same problem as my bug report, so that's nice.\nExample:\nhttps://github.com/mangui/flashls/issues/126\n. ",
    "AndCycle": "the problem is based on you can't mix http and https content, \ncause by clapper is currently still hosted on http://cdn.clappr.io/latest/clappr.js ,\njust be sure not to do assumption on protocol.\n. @towerz thanks for the hint :)\n. ",
    "nums": "I just add, but it's still not working.\nWhen you watch the network console do you see that Player.swf is loaded ?\n. Thanks :)\n. Works great !!\nThanks\n. @towers Fixes are in the last version of clappr CDN : http://cdn.clappr.io/latest/clappr.min.js ?\nbecause I update my html test page and the bug is still there on firefox : http://91.121.17.70/clappr.html\n. @towers Thanks. It's working great now on Firefox !\n. ",
    "shankardevy": "guys, I am not actively working on dash integration these days. \n. ",
    "Aathi": "@tjenkinson \nI have tried directly in the chrome browser (Android KitKat 4.4.2) , It is working fine in the browser  but not inside my app\n. ",
    "surflive": "i have this probleme in my application android with same users, and this my code:\nthank you for help\n======\n\n\nfunction getPlayer(url) {\n        player = new Clappr.Player({\n            controls: false,\n            source: url, \n            plugins: {\n            'core': [LevelSelector]\n            },\n            parentId: \"#player\",\n            position: 'top-right' ,\n            mediacontrol: {seekbar: \"#20cfcc\", buttons: \"#20cfcc\"}, \n            width: '100%', \n            height: '100%',\n            hideMediaControl: false,\n            autoPlay: true\n        });\n    }. i dont use rtmp protocol ! instead i use m3u8 streaming. it works on the browser phone but not on the APP. ",
    "janus007": "I experience the same as chovy :)\n. ",
    "anthonyettinger": "one of the core team members needs to sign in and initiate the PR to add the badge. Pretty easy to do.\n. ",
    "yisding": "I'm getting the same problem in IE11. This is on Windows 7.\n. Thanks Bruno! I'll give that a try.\nOn Sun, Jul 5, 2015 at 5:15 PM, Bruno Torres notifications@github.com\nwrote:\n\n@yisding https://github.com/yisding The error code 1009 is from flash,\nand means that a null object has been referenced. Looking further into the\nissue it seems like you set width/height to 100% but the parent element\nhave an undefined size, like zero width or height.\nIf you set the size of the player parent element, setting 100% to either\nwidth or height (or both) will work correctly.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/clappr/clappr/issues/485#issuecomment-118682082.\n. Yep! The same thing. sorry I didn't see it in the search.\n. \n",
    "VladimirVSgh": "I have often the same problem (IE 11, Win 8.1, stream: http://btv-i.akamaihd.net/hls/live/202760/btvusa_ios/P1/M24K.m3u8). Crash after playing event. useHardwareVideoDecoder: false don't help.\nBut http://www.flashls.org/latest/examples/chromeless/ works with this stream without any problems.\n. ",
    "chsergey": "Same problem. Error at line\nthis.el.playerSetflushLiveURLCache(this.flushLiveURLCache);\nel not supported method\nany cases?\n. try to set param\n baseUrl: 'your_base_url' + path_to_clapper_assets\n. ",
    "ghost": "Yes, the chromeless example works in my test IE10 on Windows 8.\n(Btw the example does not work in Firefox due to https://github.com/mangui/flashls/issues/290)\n. This issue is caused by the audio sample rate . The audio sample rate is 22050 Hz, It seems like that the video element can not support this rate. When I resample the audio as 44100 Hz or 38000 Hz , The clappr play the stream fluently.\n. Hi\nI'm experiencing same issue right now, but have more info on it.\nAccording to my tests it's happening when stream has 'mp2' audio codec and 'mpeg2video' video codec. But with vlc these streams plaing just fine.\nClappr Version: 0.2.85\nBrowser: Firefox 59.0.1 / SRWare Iron 63.0.3300.0 (Developer Build) (Debian 9)\nlink to reproduce: http://66.70.182.154:25461/live/test_user/test_user/11001.m3u8\nclappr debug log: \n[debug][MediaControl] mediacontrol:notplaying\n[debug][MediaControl] mediacontrol:rendered\n[debug][Container] container:mediacontrol:disable\n[debug][Core] core:containers:created\n[debug][MediaControl] mediacontrol:notplaying\n[debug][MediaControl] mediacontrol:rendered\n[debug][Container] container:dvr false\n[debug][MediaControl] mediacontrol:hide MediaControl\n[debug][Container] container:mediacontrol:hide\n[debug][MediaControl] mediacontrol:containerchanged\n[debug][MediaControl] mediacontrol:notplaying\n[debug][MediaControl] mediacontrol:rendered\n[debug][Events] 1:resize \nObject { width: \"300px\", height: \"300px\" }\n[debug][hls] playback:settingsupdate\n[debug][Container] container:settingsupdate\n[debug][MediaControl] mediacontrol:notplaying\n[debug][MediaControl] mediacontrol:rendered\n[debug][Events] 1:resize \nObject { width: 300, height: 300 }\n[debug][Container] container:mouseenter\n[debug][hls] playback:ready hls\n[debug][Container] container:ready Container\n[debug][Core] core:ready\n[debug][Player] ready\n[debug][Container] container:volume 100 Container\n[debug][Player] volumeupdate 100\n[debug][Container] container:volume 100 Container\n[debug][Player] volumeupdate 100\n[debug][hls] playback:play:intent\n[debug][hls] playback:buffering hls\n[debug][Container] container:state:buffering Container\n[debug][hls] playback:levels:available \nArray [ {\u2026} ]\n[debug][hls] playback:levels:switch:end\n[debug][hls] playback:level:switch \nObject { url: [\u2026], details: undefined, loadError: 0, fragmentError: false, urlId: 0, level: 0 }\n[debug][hls] playback:highdefinitionupdate false\n[debug][Container] container:highdefinitionupdate false\n[debug][hls] playback:bitrate \nObject { height: undefined, width: undefined, bandwidth: undefined, bitrate: undefined, level: 0 }\n[debug][Container] container:bitrate \nObject { height: undefined, width: undefined, bandwidth: undefined, bitrate: undefined, level: 0 }\n[debug][hls] playback:settingsupdate\n[debug][Container] container:settingsupdate\n[debug][hls] playback:settingsupdate\n[debug][Container] container:settingsupdate\n[debug][MediaControl] mediacontrol:playing\n[debug][MediaControl] mediacontrol:rendered\n[debug][Container] container:mouseleave\n[debug][hls] playback:fragment:loaded \nObject { payload: ArrayBuffer, frag: {\u2026}, stats: {\u2026}, networkDetails: XMLHttpRequest }\n[debug][hls] playback:loadedmetadata \nObject { duration: 60.639979, data: loadedmetadata }\n[debug][Container] container:loadedmetadata \nObject { duration: 60.639979, data: loadedmetadata }\n[debug][hls] playback:settingsupdate\n[debug][Container] container:settingsupdate\n[debug][hls] playback:seeked\n[debug][Container] container:seeked Container\n[debug][hls] playback:bufferfull hls\n[debug][Container] container:state:bufferfull Container\n[debug][hls] playback:play\n[debug][Container] container:play Container\n[debug][Container] container:mediacontrol:enable\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:playing\n[debug][Player] play\n[debug][MediaControl] mediacontrol:hide MediaControl\n[debug][Container] container:mediacontrol:hide\n[debug][hls] playback:settingsupdate\n[debug][Container] container:settingsupdate\n[debug][hls] playback:settingsupdate\n[debug][Container] container:settingsupdate\n[debug][hls] playback:settingsupdate\n[debug][Container] container:settingsupdate\n[debug][Container] container:mouseenter\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][Container] container:mouseleave\n[debug][MediaControl] mediacontrol:mousemove:seekbar \nObject { originalEvent: mousemove, isTrusted: true, preventDefault: name(), isDefaultPrevented: returnFalse(), stopImmediatePropagation: name(), isImmediatePropagationStopped: returnFalse(), stopPropagation: name(), isPropagationStopped: returnFalse(), initMouseEvent: initMouseEvent(), getModifierState: getModifierState(), \u2026 }\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:mousemove:seekbar \nObject { originalEvent: mousemove, isTrusted: true, preventDefault: name(), isDefaultPrevented: returnFalse(), stopImmediatePropagation: name(), isImmediatePropagationStopped: returnFalse(), stopPropagation: name(), isPropagationStopped: returnFalse(), initMouseEvent: initMouseEvent(), getModifierState: getModifierState(), \u2026 }\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:mouseleave:seekbar \nObject { originalEvent: mouseout, isTrusted: true, preventDefault: name(), isDefaultPrevented: returnFalse(), stopImmediatePropagation: name(), isImmediatePropagationStopped: returnFalse(), stopPropagation: name(), isPropagationStopped: returnFalse(), initMouseEvent: initMouseEvent(), getModifierState: getModifierState(), \u2026 }\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][Container] container:stats:report \nObject { startupTime: 7082, rebuffers: 1, rebufferingTime: 0, watchingTime: 5002, level: 0 }\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][MediaControl] mediacontrol:show MediaControl\n[debug][Container] container:mediacontrol:show\n[debug][hls] playback:stop\n[debug][Container] container:stop\n[debug][Container] container:mediacontrol:disable\n[debug][MediaControl] mediacontrol:hide MediaControl\n[debug][Container] container:mediacontrol:hide\n[debug][Container] container:stats:report \nObject { startupTime: 7082, rebuffers: 1, rebufferingTime: 0, watchingTime: 5364, level: 0 }\n[debug][MediaControl] mediacontrol:notplaying\n[debug][Player] stop 6.0045200000000065\n[debug][Container] container:mouseenter\n[debug][hls] playback:pause\n[debug][Container] container:pause Container\n[debug][MediaControl] mediacontrol:notplaying\n[debug][Player] pause\n[debug][hls] playback:settingsupdate\n[debug][Container] container:settingsupdate. What css can apply to <!DOCTYPE html>?\nHere you can see that this works: http://jsbin.com/vebayogisa/edit?html,output\nBut this not: http://jsbin.com/levazoxoja/edit?html,output\n(Is the same code, only with DOCTYPE added)\nThe same happens in local (not using a pastebin-like page). I will look this, seems the same problem with other elements (not clappr):\nhttps://stackoverflow.com/questions/10380346/css-styles-not-applied-properly-if-use-doctype. Ok, I see. you should define \"html\" and \"body\" css to 100% (previously I didn't have any css to HTML and Body) if I add DOCTYPE.\nhtml {\n        width: 100%;\n        height: 100%;\n      }\n      html body {\n        width: 100%;\n        height: 100%;\n      }\nOr use in body:\n<body style=\"position:absolute;top:0px;left:0px;right:0px;bottom:0px;background-color:green;\">\nFirst time that I see people talking about css in HTML tag.. ",
    "stanogurnik": "We were able to start HLS stream on IE10 when  useHardwareVideoDecoder is set to false. Thank you\n. Maybe best solution is to set also min-width 70px (for too-small sized players) & max-width 200px (for fullscreen) ? \n. I must confirm this behaviour, we were playing with clappr recently trying to fix this issue with IE (all versions).  Funny thing about this is that it crashes IE only for first time, after refresh it works almost beautifully. Because of crash of ie is almost impossible to find spot where it crashes , but we were able to identifiy, when Events.PLAYBACK_READY is not fired from playback IE wont crash.  \n. ",
    "ebuildy": "Here my crossdomain.xml:\nxml\n<?xml version=\"1.0\"?>\n<!DOCTYPE cross-domain-policy SYSTEM\n\"http://www.adobe.com/xml/dtds/cross-domain-policy.dtd\">\n<cross-domain-policy>\n    <site-control permitted-cross-domain-policies=\"all\"/>\n    <allow-access-from domain=\"*\" secure=\"false\"/>\n    <allow-http-request-headers-from domain=\"*\" headers=\"*\" secure=\"false\"/>\n</cross-domain-policy>\nServed by Nginx:\nlocation = /crossdomain.xml\n{\nadd_header Content-Type text/x-cross-domain-policy;\n}\nGive a try!\n. Is it a multi-bitrate stream?\nPlease post your m3u8 file URL, so it can be tested.\n. Woa, so many bitrates supported, maybe this is too much and Clappr is always \"switching\" them \n. Also your video segments seem very \"little\" \n\n. ",
    "iongion": "In the current clappr - PlayerInfo.playbackPlugins is empty, where did the plugin registry go ?\nI have found this code on the interwebs:\nthis.playerInfo = PlayerInfo.getInstance()\nthis.playerInfo.playbackPlugins // voila <- But this is empty\nThis means playbackPlugins are global and shared between multiple instances of the plugin(if a page contains multiple videos) ?\n. For the most recent clappr latest I have managed to arrive here:\n```\n/ eslint-disable no-console /\nimport { Playback } from 'clappr';\nconst expected = 'http://media-euw1.keemotion.com/shared-playlists/378/ee14.m3u8';\nconst PLAYER_DOMAINS = [\n  '//player.keecast.tv',\n  '//player.keemotion.com',\n];\nexport default class KeemotionVideoHashSource extends Playback {\nget name() { return 'keemotion_video_hash_source'; }\nconstructor(options) {\n    super(options);\n    this.options = options;\n  }\nfindPlaybackPlugin(source) {\n    const playbackPlugins = this.options.loader.playbackPlugins;\n    for (let i = 0; i < playbackPlugins.length; i++) {\n      const PlaybackPluginClass = playbackPlugins[i];\n      if (PlaybackPluginClass.canPlay(source)) {\n        return PlaybackPluginClass;\n      }\n    }\n    return null;\n  }\nhashToUrl(hash) {\n    // TODO: write decoder\n    return expected;\n  }\nplay() {\n    if (!this._playback) {\n      const decodedSourceURL = this.hashToUrl(this.options.src);\n      const PlaybackPluginClass = this.findPlaybackPlugin(decodedSourceURL);\n      if (PlaybackPluginClass) {\n        this.options.src = decodedSourceURL;\n        console.debug('constructing playback plugin instance', this.options);\n        this._playback = new PlaybackPluginClass(this.options);\n        this._playback.play();\n      }\n    } else {\n      this._playback.play();\n    }\n  }\n}\nKeemotionVideoHashSource.canPlay = (source) => {\n  // should return true for the supported media source\n  const schemaFreeSource = source.replace(/^(https?):/, '');\n  let canPlay = false;\n  for (let i = 0; i < PLAYER_DOMAINS.length; i++) {\n    const domain = ${PLAYER_DOMAINS[i]}?;\n    const domainWithSlash = ${PLAYER_DOMAINS[i]}/?;\n    if (\n      (schemaFreeSource.indexOf(domain) !== -1) ||\n      (schemaFreeSource.indexOf(domainWithSlash) !== -1)\n    ) {\n      canPlay = true;\n      break;\n    }\n  }\n  return canPlay;\n};\n```\nThere are no errors, the flow seems correct, it creates the correct m3u8 playback plungin but there is nothing played, what am I missing ?\n(I try to avoid use of lodash that is why you have those ugly for loops)\n. @towerz Thank you so much for answer - I have added the element as you instructed but still I am unable to see any video being displayed:\nI am testing against a local mp4 or m3u8 and the screen is always black, as below\n\nWhen I use m3u8 the src gets trasformed into the blob url you see in the screenshot.\nWhen I use an mp4, the url to the mp4 is present\nBut nothing is played in both cases or at least, nothing is showed playing, I probably am missing something else. If I manually drag the video element in the  then I see video getting loaded.\nThe code that I pasted above is the entire class.\nDo I still need to implement the bindEvents even if I do not want to change playback behavior ?\n. Ok @towerz, I will follow the new guideline but first I need to:\n1) Understand what UICorePlugin is and how it works\n2) Keep KeemotionVideoHashSource plugin with only canPlay class method and hashToURL - but then who calls hashToURL ?\nIs this an up to date UICorePlugin that I can use as example ?\nhttps://github.com/clappr/clappr-level-selector-plugin/blob/master/src/main.js\n. Modified a bit your suggestion and mine, it works perfectly:\n```\nimport { Events, Playback, CorePlugin } from 'clappr';\nimport Decoder from '~/keemotion/player/parsers/Decoder';\nconst decoder = new Decoder();\nclass KeemotionVideoHashSource extends Playback {\n  get name() { return 'keemotion_video_hash_source'; }\n}\nKeemotionVideoHashSource.canPlay = (source) => {\n  return decoder.canDecodeURL(source);\n};\nclass KeemotionVideoHashResolver extends CorePlugin {\n  get name() { return 'keemotion_video_hash_resolver'; }\n  constructor(core) {\n    super(core);\n    this.core = core;\n  }\n  bindEvents() {\n    this.listenToOnce(this.core, Events.CORE_CONTAINERS_CREATED, this.onContainersCreated);\n  }\n  onContainersCreated() {\n    this.core.containers.forEach((container) => {\n      if (container.playback.name === KeemotionVideoHashSource.prototype.name) {\n        container.destroy(); // remove existing container as a new container will be created\n        const url = decoder.decodeURL(container.options.src);\n        container.options.src = url; // override the src with the decoded value\n        this.core.createContainer(url, container.options); // create an actual container for the decoded url\n      }\n    });\n  }\n}\nexport default {\n  KeemotionVideoHashSource,\n  KeemotionVideoHashResolver,\n};\n```\nI will return with more info when I tackle the custom json playlist feature, once again, thank you for your big support!\n. Indeed :) :+1: \n. @leandromoreira - This should be implemented using a timer and using the normal Clappr events for playback to know when to suspend/resume the timer. You start the timer and then you read the current timestamp from the video - with this and knowing the framerate(you need it, it cannot be guessed from the video easily, for example in HLS streams you cannot, so to have a generic solution, find a way to pass this from outside) you can roughly estimate the current frame number. But it is not absolutely precise(no SLA, but can be precise enough for your use case) due to format limitations of current browsers supported media types.\nI do not think this should be part of Clappr Core, unknown framerate is really a show stopper. Start  a plugin and I will gladly contribute @ronag \n. @leandromoreira allow milliseconds update rate - seconds is too much in many cases\n. @leandromoreira I saw you try to perform some framerate detection, please also allow it to be passed from outside for a better more imperative control, especially in the m3u8 playback\n. @leandromoreira - _fetchExtras at line 120, while it works, if browsers support it, it would be nice to allow users to pass the frame rate as configuration option to the plugin and use that instead of the detection's - in this case you would also cover the cases when frame rate cannot be detected. Because there are a lot of of stats that can be computed based on the frame-rate, a better control would be awesome, and is a good design choice too, no ? :+1: \n. @leandromoreira absolutely much better :dancer: \n. If I do what @mikeevstropov uses, I get this:\nThe play() request was interrupted by a call to pause()\nI try to load an m3u8, wait for metadata and then immediately pause and seek to 0\n. Yes @leandromoreira, you are right, it was an m3u8, hence no metadata due to how hls.js works\n. Managed to have a working second version:\n```\n// node\n// vendors\nimport Clappr from 'clappr';\n// project\nimport PlaybackControlHTML from './PlaybackControl.html';\n// locals\nclass PlaybackControl extends Clappr.UICorePlugin {\n  get name() { return 'playback_control'; }\n  get template() {\n    return Clappr.template(PlaybackControlHTML);\n  }\n  get attributes() {\n    return {\n      class: 'playback-control-custom-controls-container',\n    };\n  }\n  onContainerChanged() {\n    this.invalidate();\n  }\n  bindEvents() {\n    this.listenTo(this.core.mediaControl, Clappr.Events.MEDIACONTROL_RENDERED, this.render);\n    this.listenTo(this.core.mediaControl, Clappr.Events.MEDIACONTROL_CONTAINERCHANGED, this.onContainerChanged);\n  }\n  render() {\n    this.$el.html(this.template());\n    this.core.mediaControl.$('.media-control-left-panel[data-media-control]').append(this.el);\n    return this;\n  }\n  invalidate() {\n    this.stopListening();\n    this.bindEvents();\n  }\n}\nexport default PlaybackControl;\n```\n- Is this correct ?\n- Will I have weird behavior such as multiple renderings when containers change ?\n- How can I control playback from here, like seek to next 5 seconds, to previous 5 ?\n. In fact, just running the tests with babel-node \n```\nnode_modules/.bin/babel-node test/unit/modules/app/EntryPoint.spec.js\nimport Player from 'components/player'\n^^^^^^\nSyntaxError: Unexpected token import\n    at exports.runInThisContext (vm.js:53:16)\n    at Module._compile (module.js:387:25)\n```\nWhere EntryPoint.spec.js is:\n```\n// node\n// vendors\nimport chai from 'chai';\nimport Clappr from 'clappr';\n// project\n// locals\nchai.should();\nconst expect = chai.expect;\ndescribe('EntryPoint', () => {\n  describe('#boot', () => {\n    it('can boot', () => {\n      const received = true;\n      const expected = true;\n      expect(expected).to.be.equal(received);\n    });\n  });\n});\n```\nShowing that the loader is unable to import clappr as ES6 module, what can be done ?\n. Apparently, it happens due to the fact the the babel transpiler does not transpile anything in node_modules so clappr's main.js is not transpiled, that is why the import error.\nIn the end, the mocha command is altered a bit:\n... --bail --sort --require test/bootstrap.js --reporter spec --recursive test/unit/**/**/**.spec.js\nSo that it bootstraps using a file where babel compiler is registered and its settings configured.\nrequire('babel-core/register')({\n  ignore: /node_modules\\/(?!clappr)/,\n});\nrequire('babel-polyfill');\nNow, the pain is still not over as the first problem I found was with babel-plugin-add-module-exports that cannot be found by babel.\nI have added that to the list of my dependencies but then:\nError: Cannot find module 'components/player'\nBecause Clappr doesn't use file relative imports the babel compiler cannot find where components/player exist\nDo you guys have any recommendations to get out of this mess ?\n. @tjenkinson - I see it is deeper than meets the eyes. Well, this is my workflow, I have a react/redux application and I am following best practices described here http://redux.js.org/docs/recipes/WritingTests.html#components\nNow, I have a simple react component in which I wrap the Clappr player:\n``` javascript\n// node\n// vendors\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Clappr from 'clappr';\n// project\nclass MediaPlayer extends React.Component {\n  componentDidMount() {\n    this.playerNode = ReactDOM.findDOMNode(this);\n    this.player = this.createPlayer(this.playerNode);\n    this.refreshMediaSource();\n  }\n  shouldComponentUpdate(nextProps) {\n    return (this.props.media === null) || (this.props.media.source !== nextProps.media.source);\n  }\n  componentDidUpdate() {\n    this.refreshMediaSource();\n  }\n  componentWillUnmount() {\n    if (this.player) {\n      this.player.destroy();\n    }\n    if (this.playerNode) {\n      const range = document.createRange();\n      range.selectNodeContents(this.playerNode);\n      range.deleteContents();\n    }\n  }\n  refreshMediaSource() {\n    if (this.props.media) {\n      if (this.props.media.source) {\n        this.loadVideo();\n      } else {\n        this.unloadVideo();\n      }\n    }\n  }\n  loadVideo() {\n    if (this.props.media && this.props.media.source) {\n      this.player.options.fps = this.props.media.fps;\n      this.player.load(this.props.media.source);\n      this.player.play();\n    } else {\n      // TODO: Unexpected request to play an empty media or no source\n    }\n  }\n  unloadVideo() {\n    this.player.stop();\n  }\n  createPlayer(parentNode) {\n    const player = new Clappr.Player({\n      parent: parentNode,\n      plugins: {},\n      autoPlay: false,\n      hideMediaControl: false,\n      preload: 'auto',\n      disableKeyboardShortcuts: true,\n    });\n    return player;\n  }\n  render() {\n    return (\n      \n    );\n  }\n}\nMediaPlayer.propTypes = {\n  media: React.PropTypes.shape({\n    source: React.PropTypes.string,\n    width: React.PropTypes.integer,\n    height: React.PropTypes.integer,\n    fps: React.PropTypes.float,\n  }),\n};\nexport default MediaPlayer;\n```\nAccording to the Redux guide on how to test React components, I need to have something like this:\n``` javascript\n// node\n// vendors\nimport chai from 'chai';\nimport React from 'react'\nimport TestUtils from 'react-addons-test-utils'\n// project\nimport MediaPlayer from 'app/MediaPlayer';\n// locals\nchai.should();\nconst expect = chai.expect;\nfunction setup() {\n  let props = {\n    media: expect.createSpy()\n  }\n  let renderer = TestUtils.createRenderer()\n  renderer.render()\n  let output = renderer.getRenderOutput()\nreturn {\n    props,\n    output,\n    renderer\n  }\n}\ndescribe('components', () => {\n  describe('MediaPlayer', () => {\n    it('should render correctly', () => {\n      const { output } = setup()\n      expect(output.type).toBe('div');\n      expect(output.props.className).toBe('mediaPlayer');\n    });\n  });\n});\n```\nNow, when I import MediaPlayer in my test, then of course it will also import Clappr and here the storm of problems start to happen.\nOn the webpack build path, I have no issue as Clappr is mentioned as external dependency and I load it from CDN with local fallback. For testing I have no clue how to specify a \"reference\" to the player, I use know patterns from previous expected environments such as java, .net, ruby, python .. I expect a import should suffice, but in our world, we see this is such a pain. What do you guys think ? What is your opinion on how this should be approached ?\n. I could mock Clappr and pass it as a dependency to the MediaPlayer as a static member, something like MediaPlayer.concreteImplementation = Clappr; - but that would be absolutely horrible :D as I would need to invent DI for my app and a bootstrapping sequence and all the java apartus, I do not need that stuff - I still hope it is an ES6 import/loader problem\n. @tjenkinson That would be awesome! I have put a question on Babel's Slack channel and the guys there also mentioned this, that the published npm should be ES5.\nWhat do you think about the discussion here ?\nhttp://stackoverflow.com/questions/29738381/how-to-publish-a-module-written-in-es6-to-npm\nThey are discussing of keeping your code as is but in pre-publish you actually build and that is what other will import with their import Clappr from clappr, solving the issue.\n. @tjenkinson As long as they are not the ES6 files, it is good :+1: - Perfect!\n. In case where ttf files or svg icons must loaded, couldn't they use a relative path ?\njavascript\nvar playIcon = require('./icons/01-play.svg');\n. But what is playIcon - isn't it an internal asset of Clappr ? Should devs be able to import it ? It is only if you want other devs to import it.\nThe problems that I faced while swithcing main script to ./dist/main.js are window and navigator that are used as globals in the dist/clappr.js\nI try to use this to see if I can get over the issues with something like this https://www.npmjs.com/package/mock-browser\n. @tjenkinson I understood you from the first place, it happens the same in my projects, the final version of valid JS is the one webpack outputs. And yes, you are right about the entry point.\nA little reporting of what I have done:\n1) Modified package.json of clappr to specify main script as ./dist/clappr.js\n2) Changed the bootstrap.js file of the test runner to this:\njavascript\nrequire('babel-core/register')();\nrequire('babel-polyfill');\n// required by Clappr - it asumes the existence of window, window.navigator and navigator\nconst jsdom = require('jsdom');\nconst DEFAULT_HTML = '<html><script src=\"script.js\"></script><body></body></html>';\nglobal.document = jsdom.jsdom(DEFAULT_HTML);\nglobal.window = document.defaultView;\nglobal.navigator = window.navigator;\nglobal.getComputedStyle = () => {};\nAnd it is true, this is ugly - but the alternative is to mock Clappr completely or to have Clappr behave more friendly in a non-browser environment such as NodeJS\n. Awesome @tjenkinson - whenever you guys are ready, be careful, it is not only window as global, in clappr you also use navigator on its own and getComputedStyle .. at least these I've identified\n. Looks legit - global variables are Always bad :D\n. Yes, it sounds good, but you still must declare as main script a compiled version if clappr, not the es6\n. Awesome, closing this, you guys are amazing and Github really needs a discussion facillity so much and not issues. Great work!\n. To respond my questions, no, this is an HLS.js related feature that first has to be supported, there, I have HLS.js a bit, to have a rough prototype of what needs to be done, before any Clappr abstractions you find for this:\n```\n    var videoGroups = levels.map(function (level) {\n      return {\n        id: level.attrs.VIDEO,\n        codec: level.audioCodec\n      };\n    });\n    var videoTracks = m3u8_parser.parseMasterPlaylistMedia(string, url, 'VIDEO', videoGroups);\n    if (videoTracks.length) {\n      var embeddedVideoFound = false;\n      videoTracks.forEach(function (audioTrack) {\n        if (!audioTrack.url) {\n          embeddedVideoFound = true;\n        }\n      });\n      if (embeddedVideoFound === false && levels[0].videoCodec && !levels[0].attrs.VIDEO) {\n        logger[\"b\" / logger /].log('video codec signaled in quality level, but no embedded video track signaled, create one');\n        videoTracks.unshift({\n          type: 'main',\n          name: 'main'\n        });\n      }\n    }\nhls.trigger(events[\"a\" /* default */].MANIFEST_LOADED, {\n  levels: levels,\n  audioTracks: audioTracks,\n  videoTracks: videoTracks,\n  subtitles: subtitles,\n  url: url,\n  stats: stats,\n  networkDetails: networkDetails\n});\n\n};\n```\nThen the videoTracks will be present in events harnessing MANIFEST_LOADED. ",
    "luhaiyong": "hey ,flavoribeiro.\nmay test code \nvar player = new Clappr.Player({source: \"http://live.3gv.ifeng.com/live/hongkong.m3u8\", parentId: \"#player\"});\nhttp://live.3gv.ifeng.com/live/hongkong.m3u8 .i use VLC player,that can play.\ni use IE 11 ,can not play show noting,then i use firefox ,it shows\"your browser does not support rhe playback of this vedio,try to use a different browser\"\nplz help test ,if u work well ,plz send me your test code .\nthanks very much!\n. hey ,flavioribeiro.\ni build a local nginx server .\ni push my m3u8 file and ts file in the folder: /usr/local/nginx/html/app\nand do as u said add a crossdomain,xml in the floder /usr/local/nginx/html/ \nthe code in crossdomain,xml is the same as above.\nthen i test again ,failed again ,show noting ! vlc player  also can play!\nplz help me !\nthanks very much!\n. ",
    "mak999": "hi ! Can you help me playing m3u8 file with clappr ?\nhttp://urtmpkal-f.akamaihd.net/i/077zoqxzy_1@130091/index_3_av-p.m3u8\nthanks\n. ",
    "josephharding": "@flavioribeiro - thanks for responding so quickly!\nSpecifically I'm looking for the loading event at which the duration of the video would be available.\nIn the HTML5 video player you can listen for that event like this:\nvideoElement.addEventListener(\"loadedmetadata\", this.onLoadedMetaData.bind(this, videoElement));\nat which point videoElement.duration is populated.\nLooking through the Clappr source I saw this guy:\nEvents.PLAYBACK_LOADEDMETADATA\nAnd just assumed that clappr would wrap the flash api and fire this event - I hadn't tried listening directly to the flash player.\n. @towerz - just tried it out, works perfectly, thanks!\n. We're experimenting with it here at IBM for a public site - so far so good! Great support for HLS and Flash and the response to issues I've reported has been very nice as well. Great work guys.\n. ",
    "slhck": "Apologies, I just noticed that there is already a plugin for that:\nhttps://github.com/clappr/clappr-level-selector-plugin\n. I'm using these scripts to generate the .TS files. (I just changed the resolution/bitrate, I think).\nLet me try with nginx later, but I'm wondering how that could have an effect, since it works on OS X with the plain SimpleHTTPServer from Python.\n. ",
    "derrod": "God damn it. I have never done this in git before, I must have fucked something up, I'll close this pull-request and create a new one after I fix my fork.\n. @leandromoreira I created a new pull request #507.\nI guess I should learn some git :P\n. God damn it. I'll add that tommorrow.\nUpdate: as it turned out, I needed to go back to my PC anyway so I commited the test cases.\n. @leandromoreira I added the test back again (it's a seperate commit though).\n. The length of the DVR was at least 1 hour for all of my tests.\n. Unfortunately I can't provide a stream url at the moment (I'll look into getting something public set up tomorrow).\nI can also confirm that this issue happens when using the cdn.clappr.io site.\n. Sorry that it took so long.\nI just downloaded the latest release from github and it works, it seems some of the fixes/changes made since I opened this issue fixed it! Thanks!\n. Ah Thanks. It might be a good idea to add that to the documentation/wiki :)\n. I'm using the release from github and I get the same error. 0.2.52 works.\nI'm also getting the error with the cdn version.\n. Firefox 46.0.1 and Chrome 52.0.2743.19 dev-m (64-bit) on Windows 8.1.\n. ",
    "devin87": "@towerz Thanks. Here is the console log.\n```\nERROR:I/O Error while loading fragment:HTTP status:404,msg:Error #2032\nhls.html\nWARN:retry fragment load in 4000 ms, count=2\nERROR:I/O Error while loading fragment:HTTP status:404,msg:Error #2032\nhls.html\nWARN:max load retry reached on last fragment of live playlist, retrying loading this one...\nERROR:I/O Error while loading fragment:HTTP status:404,msg:Error #2032\nhls.html\nWARN:max load retry reached on last fragment of live playlist, retrying loading this one...\n...(not stops)\n```\n1. I do not know how to catch the exception in player (some events seems not trigger)?\n2. HLS has timeout configuration for load the m3u8 or TS file?\n. @towerz Thanks very much. I used some of the ways to let the player continue,some code like this.\nsetInterval(function(){\n    if(is_playing) {\n        //issue: playback occasionally get stuck, the state still PLAYING\n        if(player.core.mediaControl.container.playback.currentState == \"PLAYING\") do something;\n        else {\n            ...\n            player.core.mediaControl.container.playback.firstPlay();\n        }\n    }\n}, 2000);\nI found another issue in the new version(clappr:0.1.13-0.2.5),the element(div.spinner-three-bounce)  not hidden after the player started playing.\n. @towerz I can't test because the api server have some problems. I said the player gets stuck,not IO error, it happened on linux sometimes, I think is the decoding or graphics driver question. I mean can the player change the state when playback error?\nThe spinner hidden question, when the playback init, refresh the page, sometimes will ok,sometimes not. The version 0.1.8 no the problem.\nClappr is a great project (If can support to IE8 would be better, ha ha...). Thanks all of you. Here is the my code about playback.\n``` javascript\nvar player, timer;\nfunction create_player(src) {\n    if (player) player.destroy();\n    //if (timer) {\n    //    clearInterval(timer);\n    //    timer = null;\n    //}\nplayer = new Clappr.Player({\n    parentId: \"#player\",\n    baseUrl: \"clappr\",\n    source: src,\n    useHardwareVideoDecoder: true,\n\n    autoPlay: true\n});\n\nvar is_playing, last_error_time;\n\nplayer.on(Clappr.Events.PLAYER_PLAY, function () {\n    is_playing = true;\n\n    if (timer) return;\n\n    timer = setInterval(function () {\n        if (!is_playing) return;\n\n        if (player.core.mediaControl.container.playback.currentState == \"PLAYING\") {\n            last_error_time = 0;\n        } else {\n            if (!last_error_time) last_error_time = Date.now();\n            else {\n                var time = Date.now();\n                if (time - last_error_time > 5000) {\n                    last_error_time = time;\n                    player.core.mediaControl.container.playback.firstPlay();\n                }\n            }\n        }\n    }, 2000);\n});\n\nplayer.on(Clappr.Events.PLAYER_STOP, function () {\n    is_playing = false;\n});\n\n}\n```\n. @towerz I test right now, if I change the channel,  the spinner not hidden.\ncreate_player(src1);\ncreate_player(src2);\n. ",
    "gofdias": "\n\n\n. \n. @towerz\n\n. Sorry, boys. Thanks, @flavioribeiro!\n. @towerz \n\n\n. ",
    "jayrmotta": "@towerz Thanks for the quick answer!\nI'm not a video specialist but I imagine that I'd have to work in a lower level while streaming multiple sources and keeping the video playing from the place the last source has stopped. Also, it would be nice to have a mechanism to increase or decrease definition automatically in order to avoid buffers.\nDo you have any thoughts on that?\n. ",
    "rprokes": "We've just started using Clappr here at http://angelcam.com - having issues with IE crashing, HW acceleration have to be disabled for both IE and Chrome and some others but we're solving them gradually.\n. @leandromoreira We're using latest version and it seems to be fixed. But HW acceleration have to be disabled for both IE and Chrome.\nAny plans for Flash-less HLS support ?\n. ",
    "marufbd": "Live streams\nwww.bd-cast.com\n. ",
    "paunadeu": "Fibracat.cat in our IPTV OTT platform, we using Clappr + Level Selector Plugin + Chromecast Plugin and we are supporting developing of AirPlay and MiraCast plugins. \nThank you for your time! \n. Why this ticket is clossed? Not interesting? Implemented? \n. 2016-06-23 18:22:31.053 AppName[1885:1361443] Apache Cordova native platform version 4.1.1 is starting.\n2016-06-23 18:22:31.055 AppName[1885:1361443] Multi-tasking -> Device: YES, App: YES\n2016-06-23 18:22:31.110 AppName[1885:1361443] Using UIWebView\n2016-06-23 18:22:31.112 AppName[1885:1361443] [CDVTimer][handleopenurl] 0.100970ms\n2016-06-23 18:22:31.115 AppName[1885:1361443] Unlimited access to network resources\n2016-06-23 18:22:31.115 AppName[1885:1361443] [CDVTimer][intentandnavigationfilter] 2.662957ms\n2016-06-23 18:22:31.115 AppName[1885:1361443] [CDVTimer][gesturehandler] 0.104964ms\n2016-06-23 18:22:31.130 AppName[1885:1361443] [CDVTimer][splashscreen] 15.002966ms\n2016-06-23 18:22:31.143 AppName[1885:1361443] [CDVTimer][statusbar] 12.482047ms\n2016-06-23 18:22:31.145 AppName[1885:1361443] [CDVTimer][keyboard] 1.447022ms\n2016-06-23 18:22:31.164 AppName[1885:1361443] [CDVTimer][socialsharing] 18.661976ms\n2016-06-23 18:22:31.169 AppName[1885:1361443] [CDVTimer][backgroundaudio] 4.971027ms\n2016-06-23 18:22:31.169 AppName[1885:1361443] [CDVTimer][backgroundaudio] 0.011981ms\n2016-06-23 18:22:31.169 AppName[1885:1361443] [CDVTimer][TotalPluginStartup] 57.167947ms\n2016-06-23 18:22:31.375 AppName[1885:1361443] Resetting plugins due to page load.\n2016-06-23 18:22:32.623 AppName[1885:1361443] Finished load of: file:///var/containers/Bundle/Application/5EA5BDD7-B941-4970-9CCC-590A624A3C89/AppName.app/www/index.html\n2016-06-23 18:22:32.743 AppName[1885:1361443] ERROR: Plugin 'Chromecast' not found, or is not a CDVPlugin. Check your plugin mapping in config.xml.\n2016-06-23 18:22:32.743 AppName[1885:1361443] -[CDVCommandQueue executePending] [Line 142] FAILED pluginJSON = [\"Chromecast1375780488\",\"Chromecast\",\"setup\",[]]\n2016-06-23 18:22:32.799 AppName[1885:1361443] DEVICE READY FIRED AFTER 908 ms\n2016-06-23 18:22:40.464 AppName[1885:1361443] Constructor determined is true a cordova App\n2016-06-23 18:22:40.465 AppName[1885:1361443] [debug][MediaControl] mediacontrol:notplaying\n2016-06-23 18:22:40.465 AppName[1885:1361443] [debug][MediaControl] mediacontrol:rendered\n2016-06-23 18:22:40.465 AppName[1885:1361443] [debug][Container] container:mediacontrol:disable\n2016-06-23 18:22:40.465 AppName[1885:1361443] [debug][e] core:containers:created\n2016-06-23 18:22:40.465 AppName[1885:1361443] [debug][html5_video] playback:ready html5_video\n2016-06-23 18:22:40.465 AppName[1885:1361443] [debug][Container] container:ready Container\n2016-06-23 18:22:40.465 AppName[1885:1361443] [debug][Container] container:volume 80 Container\n2016-06-23 18:22:40.465 AppName[1885:1361443] [debug][MediaControl] mediacontrol:notplaying\n2016-06-23 18:22:40.465 AppName[1885:1361443] [debug][MediaControl] mediacontrol:notplaying\n2016-06-23 18:22:40.465 AppName[1885:1361443] [debug][MediaControl] mediacontrol:rendered\n2016-06-23 18:22:40.465 AppName[1885:1361443] [debug][Container] container:dvr false\n2016-06-23 18:22:40.465 AppName[1885:1361443] [debug][MediaControl] mediacontrol:hide MediaControl\n2016-06-23 18:22:40.466 AppName[1885:1361443] [debug][Container] container:mediacontrol:hide\n2016-06-23 18:22:40.466 AppName[1885:1361443] [debug][MediaControl] mediacontrol:containerchanged\n2016-06-23 18:22:40.466 AppName[1885:1361443] [debug][Container] container:volume 80 Container\n2016-06-23 18:22:40.466 AppName[1885:1361443] [debug][MediaControl] mediacontrol:notplaying\n2016-06-23 18:22:40.466 AppName[1885:1361443] [debug][MediaControl] mediacontrol:rendered\n2016-06-23 18:22:40.466 AppName[1885:1361443] [debug][t] 1:resize [object Object]\n2016-06-23 18:22:40.466 AppName[1885:1361443] [debug][e] core:ready\n2016-06-23 18:22:40.466 AppName[1885:1361443] [debug][e] ready\n2016-06-23 18:22:40.893 AppName[1885:1361443] [debug][t] 1:resize [object Object]\n2016-06-23 18:22:41.279 AppName[1885:1361443] [debug][html5_video] playback:settingsupdate\n2016-06-23 18:22:41.279 AppName[1885:1361443] [debug][Container] container:settingsupdate\n2016-06-23 18:22:41.279 AppName[1885:1361443] [debug][MediaControl] mediacontrol:notplaying\n2016-06-23 18:22:41.279 AppName[1885:1361443] [debug][MediaControl] mediacontrol:rendered\n2016-06-23 18:22:41.279 AppName[1885:1361443] [debug][html5_video] playback:bufferfull html5_video\n2016-06-23 18:22:41.279 AppName[1885:1361443] [debug][Container] container:state:bufferfull Container\n2016-06-23 18:22:41.279 AppName[1885:1361443] [debug][html5_video] playback:loadedmetadata [object Object]\n2016-06-23 18:22:41.279 AppName[1885:1361443] [debug][Container] container:loadedmetadata [object Object]\n2016-06-23 18:22:41.279 AppName[1885:1361443] [debug][html5_video] playback:settingsupdate\n2016-06-23 18:22:41.280 AppName[1885:1361443] [debug][Container] container:settingsupdate\n2016-06-23 18:22:41.648 AppName[1885:1361443] [debug][html5_video] playback:buffering html5_video\n2016-06-23 18:22:41.648 AppName[1885:1361443] [debug][Container] container:state:buffering Container\n2016-06-23 18:22:42.103 AppName[1885:1361443] [debug][html5_video] playback:bufferfull html5_video\n2016-06-23 18:22:42.103 AppName[1885:1361443] [debug][Container] container:state:bufferfull Container\n2016-06-23 18:22:42.103 AppName[1885:1361443] [debug][html5_video] playback:play\n2016-06-23 18:22:42.103 AppName[1885:1361443] [debug][Container] container:play Container\n2016-06-23 18:22:42.103 AppName[1885:1361443] [debug][Container] container:mediacontrol:enable\n2016-06-23 18:22:42.103 AppName[1885:1361443] [debug][MediaControl] mediacontrol:show MediaControl\n2016-06-23 18:22:42.104 AppName[1885:1361443] [debug][Container] container:mediacontrol:show\n2016-06-23 18:22:42.104 AppName[1885:1361443] [debug][MediaControl] mediacontrol:playing\n2016-06-23 18:22:42.104 AppName[1885:1361443] [debug][e] play\n2016-06-23 18:22:44.104 AppName[1885:1361443] [debug][MediaControl] mediacontrol:hide MediaControl\n2016-06-23 18:22:44.105 AppName[1885:1361443] [debug][Container] container:mediacontrol:hide\n2016-06-23 18:22:47.082 AppName[1885:1361443] [debug][Container] container:stats:report [object Object]\n2016-06-23 18:22:52.081 AppName[1885:1361443] [debug][Container] container:stats:report [object Object]\n2016-06-23 18:22:57.078 AppName[1885:1361443] [debug][Container] container:stats:report [object Object]\n2016-06-23 18:23:02.082 AppName[1885:1361443] [debug][Container] container:stats:report [object Object]\n2016-06-23 18:23:07.088 AppName[1885:1361443] [debug][Container] container:stats:report [object Object]\n2016-06-23 19:00:39.586 AppName[1885:1361443] [debug][Container] container:stats:report [object Object]\n2016-06-23 19:00:40.860 AppName[1885:1361443] [debug][Container] container:mouseenter\n2016-06-23 19:00:40.860 AppName[1885:1361443] [debug][MediaControl] mediacontrol:show MediaControl\n2016-06-23 19:00:40.860 AppName[1885:1361443] [debug][Container] container:mediacontrol:show\n2016-06-23 19:00:42.605 AppName[1885:1361443] [debug][Container] container:mouseleave\n2016-06-23 19:00:42.605 AppName[1885:1361443] [debug][MediaControl] mediacontrol:show MediaControl\n2016-06-23 19:00:42.605 AppName[1885:1361443] [debug][Container] container:mediacontrol:show\n2016-06-23 19:00:43.702 AppName[1885:1361443] [debug][MediaControl] mediacontrol:fullscreen MediaControl\n2016-06-23 19:00:43.702 AppName[1885:1361443] [debug][MediaControl] mediacontrol:show MediaControl\n2016-06-23 19:00:43.702 AppName[1885:1361443] [debug][Container] container:mediacontrol:show\n2016-06-23 19:00:43.702 AppName[1885:1361443] [debug][Container] container:fullscreen Container\n2016-06-23 19:00:44.580 AppName[1885:1361443] [debug][Container] container:stats:report [object Object]\n2016-06-23 19:00:45.495 AppName[1885:1361443] [debug][MediaControl] mediacontrol:hide MediaControl\n2016-06-23 19:00:45.495 AppName[1885:1361443] [debug][Container] container:mediacontrol:hide\n2016-06-23 19:00:49.579 AppName[1885:1361443] [debug][Container] container:stats:report [object Object]\n2016-06-23 19:00:54.581 AppName[1885:1361443] [debug][Container] container:stats:report [object Object]\n. check the cors headers at your servers\nchecked\ntry to run it on hls.js demo page\nchecked \ntry to run it on flashls. demo page\niPad can't run Flash\ntry to run on your page the following source: http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8\nsame problem\ntry different browsers/OS's to see if the problems remain\nonly on iPad iOS (might be inline play)\ntry to use a tool to check the health of your stream (both input, ie: RTMP, and segmentation, ie: DASH or HLS): like mediainfo, mediastreamvalidator, hls-analyzer and etc.\nMaster playlist. List of variants:\n    Playlist: URL.m3u8, bw: 750000\n    Playlist: URL.m3u8, bw: 2097152\n** Analyzing variant (750000) **\n```\n Generic information \nVersion: 3\nStart Media sequence: 99413\nIs Live: True\nEncrypted: False\nNumber of segments: 3\nDownloading URL, Range: None\n Tracks and Media formats \nTrack #0 - Type: video/avc, Format: Video (H.264) - Profile: Main, Level: 64, Resolution: 640x360, Encoded aspect ratio: 1/1, Display aspect ratio: 16/9\nTrack #1 - Type: audio/mp4a-latm, Format: Audio (AAC) - Sample Rate: 48000, Channels: 2\nTrack #2 - Type: application/id3, Format: ID3\n Timing information \nSegment declared duration: 9.44\nTrack #0 - Duration: 9.36 s, First PTS: 5990.066422 s, Last PTS: 5999.426422 s\nTrack #1 - Duration: 9.343999 s, First PTS: 5990.077422 s, Last PTS: 5999.421421 s\nTrack #2 - Duration: 0.0 s, First PTS: 0.0 s, Last PTS: 0.0 s\nDuration difference (declared vs real): 0.096001s (1.03%)\n Frames \nTrack #0 - KF: 0.400, Frames:  I  P  P  P  P  P  P  P  P  I  P  P  P  P  P  P  P  P  P  P  P  P  P  P  P  P  P  I  P  P\nTrack #1 - KF: 0.021, Frames:  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I\nTrack #2 - KF: 0.000, Frames:\n```\n** Analyzing variant (2097152) **\n```\n Generic information \nVersion: 3\nStart Media sequence: 99413\nIs Live: True\nEncrypted: False\nNumber of segments: 3\nDownloading URL, Range: None\n Tracks and Media formats \nTrack #0 - Type: video/avc, Format: Video (H.264) - Profile: Main, Level: 64, Resolution: 1024x576, Encoded aspect ratio: 1/1, Display aspect ratio: 16/9\nTrack #1 - Type: audio/mp4a-latm, Format: Audio (AAC) - Sample Rate: 48000, Channels: 2\nTrack #2 - Type: application/id3, Format: ID3\n Timing information \nSegment declared duration: 9.68\nTrack #0 - Duration: 9.6 s, First PTS: 5989.586422 s, Last PTS: 5999.186422 s\nTrack #1 - Duration: 9.599999 s, First PTS: 5989.565422 s, Last PTS: 5999.165421 s\nTrack #2 - Duration: 0.0 s, First PTS: 0.0 s, Last PTS: 0.0 s\nDuration difference (declared vs real): 0.080001s (0.83%)\n Frames \nTrack #0 - KF: 0.400, Frames:  I  P  P  P  P  P  P  P  P  P  P  P  I  P  P  P  P  P  P  P  P  I  P  P  P  P  P  P  P  P\nTrack #1 - KF: 0.021, Frames:  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I  I\nTrack #2 - KF: 0.000, Frames:\n```\n. Track #0 - Duration: 9.6 s, First PTS: 5989.586422 s, Last PTS: 5999.186422 s\nTrack #1 - Duration: 9.599999 s, First PTS: 5989.565422 s, Last PTS: 5999.165421 s\nCan be this the problem? The difference between video and audio track.\nRegards, \n. Hello,\nI can't play nothing with http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8\n404 Error from here.\nI'm using iOS 9.3.2, on iPad Air 2 WiFi, Cellular.\nThank you for your help Leandro!\nBig hug.\n. Quote from towerz:\nAre you providing a custom media control implementation that displays volume controls for iOS? \nNo.\nI haven't iPad Pro :-( but i think that's different than Air. I haven't URL because use Wowza with Secure Token. \n. Ticket opened at HLS.js project. Thank you Leandro for your quick answer. \nBTW, have you example of integration of AES-128 with Clappr?\nWe are using Clappr in a IPTV Application that's used by a hundreds persons.\nBest regards,\nPau.\n. To another m3u8 or another source. It's good to implement. Can I try to implement like a param in constructor and do a pull request? Or only Leandro can to this?\n. Any estimated time to merge and bump to new version?\n. https://github.com/dailymotion/hls.js/releases/tag/v0.6.2-6\nfix interfragment audio glitches and potential audio/video out of sync issue\nWe have this issue, have any ETA to solve this errors? Can you give more info about those errors?\nRegards\n. Can you upload for analyze it?\nRegards,\nPau\n. Works fine on my side.\nBut when I use in other page don't work. I see that use .min version on this page, change to non-minified version and works properly. \nCan you check if works without minified version?\nRegards,\nPau\n. Works with minified version and 0.6.2-6 now. I did nothing.\nRegards \n. What video are you playing? What is URI?\nRegards,\nPau\n2016-09-13 19:57 GMT+02:00 Leandro Moreira notifications@github.com:\n\nI tried again and it shows some errors for hls:\nUncaught ReferenceError: _typeof2 is not defined\nclappr.js:2801 [error][hlsjs: trying to recover from error, evt hlsError, data [object Object] ]\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/clappr/clappr/issues/1143#issuecomment-246767353, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AGzxNxX2eAs7p8FlUXREx0zFOQlI3IuQks5qpuP3gaJpZM4J5DQg\n.\n. The same URL has problems for me too. \nCan u try with http://vevoplaylist-live.hls.adaptive.level3.net/vevo/ch1/appleman.m3u8\n\nRegards,\nPau\n. hallelujah!\n. ",
    "svenerbeck": "http://datarhei.github.com is using Clappr for #Restreamer #livestreaming #hls #rtmp #raspberrypi #raspicam #ipcamera  #docker #opensource \n. ",
    "jstabenow": "try this: https://datarhei.github.io/restreamer/ ;-)\n. tested today with clappr v0.2.25\nhttp://dailymotion.github.io/hls.js/demo/ works for me on FF 43\nrelease date for FF 45 is 2016-03-07 :-(\nwhat about a temporary solution / workaround?\n. awesome @leandromoreira\nit works perfectly! Thanks for the fix! :+1: \n. ",
    "vmm2013": "We use clapper for mosaic demo http://demo.teleosmedia.com/mosaic\n. ",
    "ikkebr": "We use Clappr @ farol.ufsm.br \n. ",
    "tmoehle": "We use clappr @ bitkomplex.de\n. ",
    "rictorres": "we're using clappr @ https://mycujoo.tv :). hummm it works with firefox 50.0.2 and 50.1.0 @ macos 10.11.5. i'll setup a vm w/ linux asap. thanks a lot, man!. ",
    "sstonemen": "video-stream-hosting.com use clappr (in the main customer player for HTML5 HLS, but flashplayer separately).\n1.600.000.000 streams per year for 1000 business customers.\nhttps://www.video-stream-hosting.com/referenzen/\n. lol... you are right!\nSorry.\nbtw: how can I customize controls? . (Y) Thank you.. ",
    "stefancaunter": "Our video CDN is now using clappr, with full support in our embed generator for DVR and Multi-bitrate Live\nhttps://www.scaleengine.com\nIf you would like a logo it is here: https://www.scaleengine.com/images/scaleengine_logo_5b_24.png. ",
    "tchakabam": "https://www.pantaflix.com VOD platform is using Clappr. :+1: . The idea to make much more generic methods on Playback API I think is very good :) Therefore, I would totally support this kind of implementation proposed here.\nBut now for the use-case in specific exemplified, I think it becomes obvious that the information whether we are playing HD or 4K, is already contained in some way, or should be accessible via extension of AdaptivePlayback. There should just be already an API that tells us: Is a quality level within or above a certain resolution active (that's something the current API can do) and also, what is the currently played quality level in buffer (may be a detail we need to work out more clearly as it is important actually to have that I think). Now if we have such an API as the foundation of a playback implementation, then these kind of feature-activated-query methods become implementable in a generic non-playback-tech specific way on top of that adaptive API. Because then we can just go over all video qualities and check if a specific resolutions are active or not. Add these as helper methods to our playback base-class and thus they will be part of all implementations without touching them in specific. What do you think?. yeah that's because you don't control the decoding process framewise when using MSE or plain HTML5 media playback. \nI have an experimental player that does the video decoding \"in software\" i.e in JavaScript itself, and thus one can play or step through a video frame-by-frame. \nLet me know if you are interested.\n. hey guys, what i d be interested right now is actually choosing native HLS over Hls.js even when MSE API is available.\nThat is because i want to use FairPlay DRM, which is only gonna work with built-in Safari HLS, not Hls.js :)\nHow can I do that?. @kslimani great, thanks! :). Hey, can you provide a test stream where you observe the issue? :). What browser and OS are you using? :) . sorry, which API?\nI can only see muted in other parts of Clappr code :) \nFor sure we can add mute in the Clappr options as equivalent property and rewrite it to muted internally? :) \nAll for making this as easy as possible for anyone, but it should be agreed I guess.\n. @leandromoreira Documentation was my ground truth: https://github.com/clappr/clappr/blob/master/src/components/player.js#L135. @towerz OK. Wether the mistake is in the documentation or in the code was the question I guess :)\nWe assumed the documentation to be correct! Therefore I had to assume the code is wrong.\nSorry for the misunderstanding.\nWe are usually assuming that the documentation is actually correct. So I will probably update the docs :)\nHowever, what we still will need is setting muted and defaultMuted on the video element right from the start.. @kslimani Cool, thanks! :) \nHowever, this is at least fixing the wrong documentation which was stating that the Clappr.Player option is muted, while media-control was assuming it is mute. Since everyone seems to agree on mute and it was the only thing working, the documentation has now been updated (whoever tried to use muted before didn't get a result anyway, so this isn't like it's a breaking spec change or so :) )\nAlso, I think it would be nicer to also for HTML5 video make sure that the video element muted and defaultMuted properties are set on creation of Playback. Because otherwise we are relying on side effect from MediaControl to take care of setting volume to zero in case of muted. It is better if this interaction is not necessary and the Playback already can set up the respective native properties itself, this is how I would expect it to interpret the Player options like. What do you think @towerz @leandromoreira @kslimani @tjenkinson ? :). @tjenkinson I agree with that, there only needs to be one place where we set muted based on volume, and everything else can drive that. Will change that.\nBut what are the mute and unmute methods really used for, i can not see them being called anywhere. Or is it just through core.getCurrentPlayback()... ? It is not part of the Playback interface, so what do they do here really? Some things aren't quite clear here I'd say :)\nFinally I would really prefer that the HTML5 plugin here would be more self-contained concerning how it applies the native video element options, meaning that it should not have to rely on MediaControl to interpret the player options and set the volume to zero \"sometimes\". If the play for some reason happens before the volume call, we are screwed, this holds better ;) Or if someone disable MediaControl plugin or implements it's own. Playback's should be self-contained what this concerns I would argue.. @towerz ok, nice!\n\nWe're still deciding whether or not to change the Playback API to include the muted state, but with a more concise interface.\n\nMy thought here is that it is actually a good thing to have one single method, volume, that one needs to implement to have a valid Playback implementation, and that 0 also drives eventual native muting functionnality. I couldn't really think about a case where I would need to differentiate there, and also it motivates to keep muted volume caching and recovery outside of the plugin and at a higher level, for example in like it is now MediaControl.\nAt least for this PR, I'd definitely prefer to just leave it with the docs fix and the initial native muted and defaultMuted handling to have the spec aligned and functionnality safe.\nI am happy to help with improving the interface if we find an agreement but as I said I think it's actually very good like it is, given that it is implemented like here.. After various experiences in many directions, NPM, git submodules, (and do you remember bower, ha!) etc, my opinion really is: I think it's good to have one repository, instead of having to deal with different repos. If you can avoid to split git repos, avoid it as long as you can! :+1: \nso i would strongly favor for keeping the one big repo, but allowing the build system for one core, and many plugin binaries. in that way, you can distribute one version of everything that will actually work together, instead of always having to match the versions here and there, that's hell for anyone who wants to use it. with the mono-repo, if core breaks a plugin API, we see in CI tests on the one repo :)\nIt's just that you need to set up the build system to spit out several binaries :)\nThat's pretty easy with webpack in fact, with the chunks mode.\nAnd it is also not a problem to publish various NPM packages from one repo by the way :) So on the distro side you can still go and get all that stuff seperately.\nIdeally we would also have all plugins distroed in the Clappr namespace, and also have a common name pattern for packages.\nalso, what we did in the playback middleware in my current project is that we load dependencies on-demand, using loadjs and dynamic import.\nbecause sometimes we use Shaka and sometimes a proprietary SDK on top of Clappr, and depending on the platform we load either of the two dependent libs (and eventually the ShakaPlayback plugin).\none could make the Loader here an actual loader by allowing to get the plugins on-demand, and resolving promises to their constructors once they are loaded.\nBtw there are a few other projects out there who do it so, for example GStreamer: https://cgit.freedesktop.org/gstreamer/\nAnd Google also has a mono-repo, even if we re not there yet :speak_no_evil: :hear_no_evil: :see_no_evil: . But anyway, I guess the broader discussion is one thing, this is just a small step in order to allow people having a lighter build, and we could distribute it as a seperate webpack output bundle (different than code-splitting/chunks), just by running these two configs and having a file clappr.html5only[.min].js. @towerz OK, this should be what we want? :)\nAlso, should we commit the source-map for release builds? I guess it makes sense to distribute it along with the package (since we are distro'ing src along with the package), so that one can actually debug even when using minified build.\nAnd for the future roadmap, it would be good to:\n\nHave a more generic solution for build-option flags via env vars as discussed above\nHave only one single call to webpack, and differentiate release/debug/other cases via the build options flags. @towerz Source-maps were generated but only when doing uglification, and by uglify-js. The devtool option on the main webpack config makes sure that generally you get a mapping from webpack bundle to original module sources, no matter if it has been uglified or not.\n\nso there is a .min.map that maps from the uglified code, and one that maps from the unminified code, both towards the original source modules now.. @towerz After adding the source-maps for non-min build, I need to increase test coverage, so I fixed/added some tests in HLS and media-control specs.. @towerz Sure, that makes sense! I removed all of it now. But what about the source-map for non-minified builds? :) . @towerz I just thought: Wouldn't it be good to also distro the smaller build right away in the repo? for example with a naming patterns like clappr.plainhtml5only{.min}.js ? . @towerz it's done :beers: merry xmas!. i guess we should maybe just make sure that we are covering the jscs rule with the eslint ones already. @leandromoreira I guess although I didn't write any functionnality, I am gonna have to write some test now :D . Great, thanks for the feedback guys\nInitially I justed wanted to add eslint --fix option, but then I gave myself more work it seems. \nDefinitely not the most important problem we have, but let's finish what we started ;) . @towerz Let me know if this is what you want to go with. \nAdditional rule to what you requested: https://eslint.org/docs/rules/curly#multi-or-nest (fits best current code-style and enforces removal of currently existing unnecessary braces around single-line if statements).\nWe could also add linting to all the config js file in the project root.\n. Note: We could also have a sub-config only for the tests.. @towerz had to add block-spacing rule in order to avoid if () {foo()}. \nlgtm now. \nagain, my aim wasn't to fix any inconsistencies in the first place but just unify the toolchain to latest eslint and its ruleset. hope that this will help us to have even nicer code in the future.\nthis is a nice style, i like it. we should probably have it enforced in Hls.js as well :) . that's awesome :+1: \ni also had some very good experience with a different webpack plugin that does something similar (in case you are looking for an alternative): https://chrisbateman.github.io/webpack-visualizer/. @towerz Let's say that I didn't want to force anyone to implement these methods in any Playback which is why I wanted to rather make it a mix-in for composition of playbacks that are \"adaptive\". Like many Playback plugins will not need this stuff in fact. \nWell we could keep the mix-in code here still in a seperate file/module, even if we eventually decide to always have Playback extend from it, right?. @towerz This isn't about adding \"common functions\" to the Playback, but to specify some generic interface  to deal with adaptive media - meaning selection of audio/video tracks, qualities, codecs, and subtitles languages etc. It needs to be very generic. Shaka API is a good example of how to achieve that, but it has it's disadvantages as well. We are having a discussion about that on the DashShakaPlayback repo as well in fact.. about the MediaOptions you suggested, would you say that we should have one such type instead of the AudioOption and ClosedCaptionOptions here? \nIt would be possible to collapse all of it together, and add a type, to what it actually is (audio/video/..), but can you convince me of the advantage?. @towerz or anyone, do you want to weigh in on this?\nOne reason why i want to get this advancing is that currently Levels-Plugin is using undocumented and unspecific API. i would like it to work well as much with Hls.js and with Shaka, and for that I first would like to have a proper API in Clappr to actually do adaptive switching.. @towerz Yeah totally agree with you, it shouldn't be a breaking API change, and I don't think it wil be necessary to break anything at all :) Playback implementations can transitions smoothly to use the new interface and settings, they will be an addition for now only.\nSo of course let's keep these in the documentation (add back the removed stuff), and add a deprecated flag  :+1: \nI guess these are just things we need to polish to make sure it's all well set out and documented. \nAnd generally on the proposition of the extended interface (AdaptivePlayback), shall we move on with this?\nWhat we want to make sure is that these are foundations that we can extend on later and that will allow realizing all future needs, and that is straight-forward to implement and to use.\nHappy to get your opinion :) . @towerz Great to hear that! We'll move on with this asap :) :+1: . @towerz So far so good in terms of interfaces / docs. We could merge this and try next step to move the Hls.js or Shaka plugins to be driven through this new API.\nI am imagining a more powerful demo for adaptive streaming where we would combine usage of LevelPlugin (and others) (which should also use the API spec'd out here) with the various adaptive-enabled Playback plugins (Shaka and Hls.js) to drive all the various things through one API (a/v renditions and text tracks etc).\nBut for moving on on that, let's first merge this one here?\n. Hey @towerz, just getting back to you on this, it's been a bit slowish here, but we have a real need \nnow to make different playback plugins work behind one specified adpative media API :) So soon there will be also real results, not just a scaffold.\nSo just to let you know, I haven't forgot about this. And planning to do some real progress on this soon!\nFirst of all we'll move the Shaka plugin towards this new API, and then hopefully Hls.js as well.\nIt will be nice to be able to integrate them easily with tracks/level switching plugins and so on :) . @towerz The config is incremental, it applies matches in order of occurence to files. So I was able to transform your suggestions by boiling it down a bit. Seems what we need is really simple. Let me know if that's it.. Awesome, thank you! :+1: . @leandromoreira I think we can implement the methods from your proposal above easily now as common methods of the AdaptivePlayback base-class, with the implementations supporting the generic abstract methods that are a little bit more versatile, or can serve more wide-range cases.. One thing that is bad: The duplicate code between the actual script and the editor for startup.\nThe editor should pull in the initial setup code from a seperate JS file, as text XHR, and fill it with that, and then just call the editor run routine internally - don't \"special-case\" the initial run.. yes, that's what I thought. @tjenkinson proposed that they could call just the plugins volume method, which i agree on the idea, but then we d have to store a state of muted volume to recover it on unmute. I'd rather avoid that at this point.\nmaybe just have them set this.el.muted accordingly, that would make sense and not need to have additional state in there. functionnality wise that would be just what one would expect also.\nand also we could set them @deprecated and @private as docs decorator to show that this is not part of Playback API and that they may be removed in a minor version bump.. yes, but it's tricky i think... :) we are getting this from the environment, so per se it is a always going to be a string. Shell rules are that we have to give it some value: env var can't be empty i think, that's same as not existing, so it will simply not exist in process.env. And when we do Boolean(someString) it will be true except if the string is zero length. What we could do in the webpack file would be: Boolean(process.env.CLAPPR_...) (or !!process.env.CLAPPR_...) which will result to true for any value of the env var. Or we do (process.env.CLAPPR_... === 'yes') or (process.env.CLAPPR_... === 'true'), which will force users to certain values. I think that's better. What do you prefer? \nI guess the deeper question really is how to deal with env vars in your build conf. Explicit values for stuff is always kind of better.\nA better approach might me to have one variable called CLAPPR_BUILD_OPTS or something, and there you can have a bunch of flags like --with-hls or --with-flash or --without-flash. That's how FFmpeg does it for example, or many other C libraries. That would be the more generic extendable solution :) \nEnv vars aren't really thought as flags, but they can contain a bag of flags.. :+1: \nit wasn't my intention to change the rules at all in fact, i just want to replicate the same with eslint.\n. sure, ideally there should be nothing to fix in the code.\nbut i think that braces are a good thing. but with padding, i more than agree :+1: . :+1: . thanks for the help!. OK, totally agreeing! :+1: . Ok, added that, but it only is for object litterals.\nfor if and other flow control statements you need \"curly\" rule and in our case the \"multi-or-nest\" option: https://eslint.org/docs/rules/curly#multi-or-nest\nThat is what comes most close to the current code style (but it will enforce not using braces when there is only a single statement in an if or else, but enforces to nest it). afaiu consistent is in addition to any of the multi.. options (\"When using any of the multi* options, you can add an option to enforce all bodies of a if, else if and else chain to be with or without braces.\")\nlet's try that! :).  @tjenkinson Adaptive is not only about (video) quality, but generally having media that adapts to the viewers needs/choices.. makes sense :+1: . yes totally agree in fact. it's a good idea to hiearchise the config API in this way.\nbut where are the \"playback options\" documented?. @towerz I have created a definition of PlaybackConfig the way it is already used in HTML5VideoElement - seems we are already inherently using this but it's not actually documented anywhere.\nAs this could be an \"official\" API increment, we will be able to drop the support for the deprecated properties in Player options?\nIs this the direction we could go?. @towerz To what did you refer exactly when stating the MediaOptions in iOS/Android Clappr? :) . this is my wip, we can have the mp4 as well in there :)\nBut it would be cool to show a bit more in the demo the HLS and DASH integrations of Clappr, also to keep making sure all of this stuff integrates well with all the plugins (like level-switching, captions etc) . tbd. ",
    "mokoshalb": "Using it here also: Moko Live Stream. ",
    "nextlivetv": "there's no option.\nI tried all options.\nYou have to use 16:9 and probleme its done.\n. maxMaxBufferLength: 120\nin \nclappr.js --var Hls = function ()\n. ",
    "cherihung": "My webpack projects defaults to include path and name for swf and font files (file-loader?[path][name].[ext]). So I was having problem since Clappr defaults to looking for assets in publicPath of a project. baseUrl would only kind of work if I can ensure 'publicPath` of the project using my implementation of Clappr is the same. \nRight now, I'm using require.context(...) to dynamically change clappr's require statements. I was going to ask for swfPath but then I see the same problem with font files too (hence using require.context..()). If there's a better Clappr way to do this, please let me know :)  thanks!\n. I tried this out. But it'd add more loaders and overhead to the project with bable and sass loader. it's not a huge deal but it'd require me to make any consumer project deal with all the various assets included or may be included in Clappr. \nSo I decided to just tweak the configuration to specifically load clappr font files + swf to publicPath. it's the simplest solution. \nthanks for you all your help!\n. It was with dependencies not installing correctly I think. I cleared my npm cache and reinstalled all modules, then manually npm installed webpack. It is now running that script. Thanks! \np.s. i'm on Win7 node 1.4.X\n. terrific. thanks!\n. When I use this http://www.streambox.fr/playlists/test_001/stream.m3u8 I have not encountered the \"stuck\" issue. The streams I'm trying are all VODs. \nMy project is in Angular (1.2). The stream url is passed in dynamically. I initiate the Clappr player in a angular.element(document).ready(...). And I'm creating the player instance like so:\n```\nvar player = new Clappr.Player({ ...  });\n...\nthanks!\n```\n. thanks for the response. it is likely to the that stream's problem.\nto answer your question, yes, audio works. thanks!\n. :+1: :+1: :+1: \n. ",
    "dviramontes": "duplcate of #533\nclosing.\n. @towerz, \nwe are using browserify.\n. As a temporary fix you can add a browser property to your package.json\n(if you are using browserify):\n\"browser\": {\n    \"clappr\": \"./node_modules/clappr/dist/clappr.min.js\"\n  }\n. Thanks for the response, \nI tried using the above mentioned functions\np.core.getCurrentPlayback() but it seems that \ngetCurrentPlayback() is not longer defined (Using clappr 0.2.8).\nbut clappr does have something called getCurrentContainer()\nso i tried that and I got: \n\nby the way,  we are using a .m3u8 file as well and in our case\nwhile are playing a playlist \np.core.getCurrentContainer().getPlaybackType()  returns live\nwhich is correct \nbut when pause and play again, the .getPlaybackType() \nstill returns live\nit's as if the playBackType property never gets updated, until it becomes\na vod file again (no longer streaming) then all the normal functionality\nworks. \nTo summarize,\nwhile the playBackType is live  .getDuration, .getCurrentTime do not work as expected in Safari\nwhile the playBackType is vod  .getDuration, .getCurrentTime work properly in all browsers we've tested (Firefox, Chrome, Safari)\n. Again thanks for the responses, \nis there a way to force Safari to use flashls instead of the native player?\nI was not able to find anything about that in the documentation.\nThanks\n. thanks @towerz, that worked!\nthanks @flavioribeiro for the info\nclosing issue\n. I see, should i file an issue on that repo?\nI don't see a Poster in your package.json dependencies. \n. @towerz thanks so much!\n. Hi @towerz \n(update on my original question)\nSo I figured that I could change the -target-player version in ./build/build.sh to whatever I got from the Flex SDK and that seems to have worked.  It compiled.  \nSo my question now is which one of the .swf do you guys use in Clappr. \nI figure you guys rename on of these:\n../bin/release\n\u251c\u2500\u2500 flashls.swc\n\u251c\u2500\u2500 flashlsChromeless.swf\n\u251c\u2500\u2500 flashlsFlowPlayer.swf\n\u251c\u2500\u2500 flashlsOSMF.swc\n\u2514\u2500\u2500 flashlsOSMF.swf\nto  HLSPlayer.swf correct ?\n. Nevermind @towerz \n@jfairley and I figured it out. There is a _clappr_ branch has the right build script\nfor building HLSPlayer.swf\n. Hey @towerz \nso what started this crusade of building the HLSPlayer.swf player was an need to add a custom function to grab a screenshot of the video player (since we use Clappr.HLS playback, we can't use the conventional  element to canvas way). \nWhat i'm having trouble with is capturing that image from within org/mangui/chromeless/ChromelessPlayer.as. I need to be able to call \nvar screenshotData:BitmapData = new BitmapData(stage.stageWidth, stage.stageHeight);\nscreenshotData.draw(stage); <----\nbut this image is always empty. Would you happen to know which of the following would be\nthe Object to call .draw() on ?\n- this\n- _hls.stage\n- _stageVideo\n- something else I havent seen ? :/\nlet me know if the question makes sense. \nThanks in advance.. \n. thanks @towerz!, \n@mangui very helpful.\n. :+1: :+1: :+1: \n. Apologies from jumping the gun here...\nIn testing this PR (functional testing in latest stable Chrome and Safari), \nI saw that the playback does in fact default to a native <video/> player which is great! \nBut I also saw that:\np.core.mediaControl.container.getCurrentTime() always returns 1 while in live mode.\nI'm wondering if the hls.js implementation used here also suffers from the same defects that were discussed in #538 \nMaybe more of a problem with the spec?\n. I was able to get around this by asking the DOM  based on this isFullScreen function.\nChrome 35's document.webkitIsFullScreen doesn't seem to work but all other ever-green browsers I tested worked fine. Closing issue.\n. Nice testing indeed! :+1: \n. :metal: \n. any updates on the release ?\n. im guessing the npm publish is to follow as well ?\n. @leandromoreira \nO.K. thanks for the update!\n. yay! thanks so much!\n. :+1: \n. That was way fast!\nThanks so much @dayvson !\n. +1 on this issue\n. looks like its here\n. ",
    "neowinston": "Hi Leandro, \nThanks for your prompt reply!\nUsing http://cdn.clappr.io/ it works for me also, but if I try to put my .m3u8 url on the index.htm file, inside clappr-master/public directory it doesn't work. Any idea why?\n. I'm trying to make it work using sudo python -m SimpleHTTPServer. I'll let you know the results. Thanks!\n. Hi towerz,\nThanks for your reply. I'll be trying your suggestions.\nFor us the ideal situation is to get hid of Flash 100%. Is that even possible, to serve our streaming audio to all browsers without any Flash involved?\nThanks!\n. Hi towerz,\nThanks for your reply! Reading the Mozilla article I have a better understanding of the streaming formats and their relation to different browsers.\nWe're using ACC streaming because it's provided by Akamai and the time we thought it would the best option instead of MP3, considering royalties costs. \nIn the beginning we're using WMA over MMS protocol, but we had to use FFMPeg in our iOS App to decode it, which was a real pain to maintain. But with an .m3u8 streaming all we needed to make it work on the iPhone was 3 lines of code.\nWhat would be a good option then? Considering our native Apps for iPhone, Android, Windows Phone and the regular web browsers? Do you think that the clappr code would still be a good option? Thanks for your time!\n. Thanks for the info, thanks for the code. We'll be looking into Icecast to know more about it. When we reach a conclusion we'll let you know. Once more, we thank you for shared knowledge!\n. ",
    "AlexRevin": "This is awesome, cause it's the major reason that forced me to switch to videojs. Waiting to get back to Clappr\n. One issue that comes in mind immediately is playing HLS with hlsjs. It is absolutely possible to play HLS streams on unsupported systems with hlsjs, but it won't be optimal comparing to native mp4 mpeg-dash support.\nI don't know what @towerz means by \"player core\" but I see it perfectly fits tech selection mechanism which is pretty straightforward at the moment and could be more intelligent.\n. You should check your streaming server for that. If you are using nginx-rtmp-module the setup is basically the same as for crossdomain xhr request, you just need to pass additional headers from the server side.\n. Yeah, checkout http://lj.ee/broadcasts/bc-09468478f78d292fc79e for eample\n. When I disable mediasources api in Chrome it gracefully falls back to FlashHLS and works well then.\nChrome version is 46.0.2490.80 on MacOS\n. I have updated the link, because the broadcasting stopped, those streams are not permanent, you know. You can try www.lj.ee/broadcasts/bc-a92ebc2592521490303f for eample, should be live for now.\nOr from the frontpage enter any SopCast url and it should start broadcasting.\n. @flavioribeiro it won't be playing on their demo page as CORS headers are not set-up wide open I guess. I can wildcard them for testing though.\n. Yeah, right. I've tried running the stream from their demo page with disable-web-security flags applied and it did not work too.\nI am using http://arut.github.io/nginx-rtmp-module/ for providing HLS live streams so I shouldn't be the one with such problems I guess.\nUnfortunately I cannot provide a permanent link for testing, as they are not permanent but it's obviously related to HLS.js\n. @flavioribeiro have just tested it, still not working. It is definitely a problem with hlsjs, I've tried getting into details and it seems like I'd better move the issue to their tracker.\nThanks for your help!\n. Thanks! Will give it a try.\nHowever I came to conclusion, that using hls.js is a dead-end solution, encoding streams to HLS and MPEG-DASH for browsers demanding mp4.\n. Guys, there's a #550 ticket which I am waiting to be closed. It is more efficient to transcode into two streams on the server rather than re-transcode on the client side.\n. ",
    "enbplas11": "@jfairley @dviramontes @flavioribeiro \nGood, how building custom HLSPlayer for clappr from mangui/flashls.?\n. I can do fullscreen on a iframe without using the tag allowfullscreen inside the iframe.\nWhat I need is this:\n<Iframe src = \"http://cdn.clappr.io\">\n</ Iframe>\nI'm using the version clappr-0.2.58\nI need your help\n. Hi @leandromoreira , What happens is that I have a page with clappr where users perform an iframe my page and it does not work the fullscreem.\nby the number of users who use my site can not add  tag and so do not lose traffic, I currently use another player that if I do fullscreem without adding the tag (jwplayer 6) allowfullscreem within the iframe.\nI was reviewing a issue: https://github.com/clappr/clappr/commit/0476dc6984b9700247cb1d03a9624526df1de81e but not for the latest version\nWhat solution could be added to this version of clappr without using the allowfullscreem inside the iframe?\n. Hi @tjenkinson , This page http://xaxaxaxaxaxax/canales/envivo/antena3.html makes the call to this page http://www.goneasaslatv.com/channel.php?file=103950&width=650&height=400&autostart=true currently uses the jwplayer 6.\nThis is the link that implements: http://www.goneasaslatv.com/channel_nuevo.php?file=105749&width=680&height=390&autostart=true\nbut if another user makes an iframe to that url the fullscreem not work, as shown in the following link: http://www.goneasaslatv.com/iframe_release2.php\n. Hi, @towerz, You're right, but I have to have a solution for fullscreem; and I succeeded in level javascript and shared for those who have these cases.\nif(parent != null){\n        if(parent.document != null){\n            var iframe = parent.document.querySelectorAll(\"iframe\")[0]; \n            var frames = parent.document.querySelectorAll(\"iframe\");\n            iframe.allowFullScreen = true;\n            iframe.setAttribute(\"allowFullScreen\",\"true\");\n        }\n    }\nHere I give an example Online: : http://wwwsaaaaa.com/redirect/clappr_three/page_iframe_top.php\n. Good, @tjenkinson, @towerz  , One question?, no solution to use the fullscreem inside iframe, without tag allowfullscreen?  In the case that I have access to iframe\n. Good, @towerz, thank you!!\n. ",
    "AlekzFateJumper": "I'm developing a custom timeline for security camera. I've already made a\nhack to contour this problem, filtering the m3u8 via PHP and returning the\nkey points via AJAX.\n2015-09-17 15:18 GMT+00:00 Fl\u00e1vio Ribeiro notifications@github.com:\n\njust curious, can u tell me why u need this info?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/clappr/clappr/issues/552#issuecomment-141119562.\n. This worked fine on Firefox, but crashed in Chrome, the getCurrentLevel() does not exist in Chrome.\n. \n",
    "NicholasTuck": "+1 !  We recently switched from evaluating jwplayer to clappr and the flash playback was one of the few downsides to us, so this would be awesome. \n. ",
    "LGprodigy": "I literally just answered my own question when you answered it. Thank you. Maybe a feature enhancement to think about... when using a flash wrapper alert the user the same way it displayed the error mentioned above. Something along the lines \"Your browser requires flash player to play this media!\". Just tossing that idea out there. I really am glad to hear hlsjs is open. Maybe scratch this idea! :D \nThank you very much for your input!\n. Well, if you guys are open to pull requests. Our team has no problem contributing!\n. We have created and tested an instance of missing flash when required. It works, we will be creating a pull request shortly for it. \n. #559\nhttps://gyazo.com/567c809e47c1d6bfb147fa6a872e0aa6\n. This will display when flash is missing:\nhttps://gyazo.com/567c809e47c1d6bfb147fa6a872e0aa6\n. ",
    "michaelcunningham19": "@flavioribeiro \n@LGprodigy \nSame issue as here? https://github.com/clappr/clappr/issues/788\n. @leandromoreira \nTested your suggestion in IE10,\nNo errors were thrown however upon clicking the play icon, nothing happened.\n. @leandromoreira \nOn the environment:\nIE10 on Windows 8 (and also 7) on http://cdn.clappr.io\nWith the following config:\n```\nvar playerElement = document.getElementById(\"player-wrapper\");\nClappr.Log.setLevel(0);\nvar player = new Clappr.Player({\n  source: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640,\n  plugins: [Clappr.FlasHLS]\n});\nplayer.attachTo(playerElement);\n```\nResulted in the following debug output in the console:\n%c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:notplaying \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:rendered \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:mediacontrol:disable \n %c[debug]color: #0000ff;font-weight: bold; font-size: 13px;core:containers:created \n %c[error]color: #ff0000;font-weight: bold; font-size: 13px;error on eventcore:containers:createdtrigger-TypeError: Object doesn't support property or method 'find' \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:notplaying \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:notplaying \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:rendered \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:dvrfalse \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:hideMediaControl \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:mediacontrol:hide \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:containerchanged \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:notplaying \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:rendered \n %c[debug]color: #0000ff;font-weight: bold; font-size: 13px;2:resize[object Object] \n %c[debug]color: #0000ff;font-weight: bold; font-size: 13px;2:resize[object Object] \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:destroyed[object Object]Container \n %c[debug][html5_video]color: #0000ff;font-weight: bold; font-size: 13px;playback:stop \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:notplaying \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:rendered \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:mediacontrol:disable \n %c[debug]color: #0000ff;font-weight: bold; font-size: 13px;core:containers:created \n %c[error]color: #ff0000;font-weight: bold; font-size: 13px;error on eventcore:containers:createdtrigger-TypeError: Object doesn't support property or method 'find' \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:notplaying \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:notplaying \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:rendered \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:dvrfalse \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:hideMediaControl \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:mediacontrol:hide \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:containerchanged \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:notplaying \n %c[debug][MediaControl]color: #0000ff;font-weight: bold; font-size: 13px;mediacontrol:rendered \n %c[debug]color: #0000ff;font-weight: bold; font-size: 13px;3:resize[object Object] \n %c[debug]color: #0000ff;font-weight: bold; font-size: 13px;3:resize[object Object] \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:destroyed[object Object]Container \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:mediacontrol:disable \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:mediacontrol:disable \n %c[debug][html5_video]color: #0000ff;font-weight: bold; font-size: 13px;playback:error[object MediaError]html5_video \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:mouseenter \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:mediacontrol:disable \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:mouseleave \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:mouseenter \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:mouseleave \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:mouseenter \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:mouseleave \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:mouseenter \n %c[debug][Container]color: #0000ff;font-weight: bold; font-size: 13px;container:mouseleave\n. @leandromoreira \nAfter some debugging here are my findings:\nThe error \nerror on eventcore:containers:createdtrigger-TypeError: Object doesn't support property or method 'find'\nIs caused by the ES6 'find' method on the Array object not being supported by browsers such as IE10 and even IE11. It can be fixed by adding in the babel-polyfill package: http://babeljs.io/docs/usage/polyfill/\nHowever, the second error, which only occurs on IE10 and not IE11:\nplayback:error[object MediaError]html5_video\nStill occurs even with the babel polyfill included, and the error that is thrown is code 4: MEDIA_ERR_SRC_NOT_SUPPORTED\nWhich results in playback not starting on IE10, and I have confirmed that I have Flash installed and enabled.\n. @leandromoreira \nA PR has been made to add the polyfill\n. @tjenkinson \nIt polyfills the methods in the user's browsers.\nI agree it would be nice to have it handled in the build process, but following the official usage instructions it says to simply 'require/import' at the top of the main entry point.\n. @leandromoreira \nThat's a good catch, I didn't think of using lodash.find here!\nI switched it up to use that instead rather than the polyfill.\n@tjenkinson \nIE10 doesn't support any ES6 features as far as I know, so there could be more things like this pop up in the future, but for now I agree with not bringing in another dependency.\n. @towerz \nI have updated the PR to use bourbon mixins \ud83d\udc4d \n. @thiagopnts \nAnother idea is to add a release job to make a \"light\" version of Clappr which excludes FlashLS, as probably the majority of developers using Clappr don't even need Flash support at this point in 2017. (At least I hope so)\nI have a fork of Clappr on my GitHub profile where I stripped out FlashLS entirely. See commit: https://github.com/michaelcunningham19/clappr/commit/a00b12ea0c27dbd5011f1b134a6bc2d2ea196f2e\nThe change resulted in a decent decrease in file size, which I will add here when I can! :)\nIf this sounds like a good idea I will gladly look into opening a PR to support a \"light\" build\nWorth noting that hls.js also has a \"light\" build that they recently added: https://github.com/video-dev/hls.js#dependencies. ",
    "philcrump": "This also looks like the same bug I mentioned as part of #637\n. And therefore reproducible on http://cdn.clappr.io/ in IE10 using only the change:\nsource: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\n. As of the 0.2.34 the bug I referred to is fixed. Thanks @michaelcunningham19 for his fixes in #788!\n. I can confirm the flash player does not load on http://cdn.clappr.io/ in IE10 using \nsource: 'http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8',\nworks however in IE11, Chrome, Firefox.\n. No errors in the console.\nThe player appears as a blank white box, although the flash applet has loaded as right-clicking on it brings up the Adobe Flash context menu, with the text: Movie not loaded... No content plays however.\nScreenshot: http://i.imgur.com/KMQao01.png\n. The bug I referred to is fixed as of 0.2.34. Fixes were developed in #788\n. Browser:  IE 11\nOS: Windows 7\nClappr Version: 0.2.23\nWorks.\nBrowser:  Chrome 47\nOS: Windows 7\nClappr Version: 0.2.23\nFails to play. Same behaviour+console as on ubuntu/chromium.\n. Hmm yes that works on my page in Ubuntu+Chromium.\nDo you have any idea what the issue with my TS fragments could be such that they don't play in only Chrome?\nI'm currently using the ffmpeg line below to live transcode the incoming feed, before nginx-rtmp serves it as HLS, and Clappr plays it.\n\nffmpeg -i rtmp://[rtmp nginx-rtmp stream]/ -c:a libfdk_aac -b:a 64k -c:v libx264 -b:v 1024k -maxrate 1024k -bufsize 2048k -profile:v main -level 3.1 -tune zerolatency -preset ultrafast -f flv rtmp://[hls nginx-rtmp stream];\n. After stripping the multi-bitrate out of your example due to cpu restrictions, I'm now using the config below, still no luck.\n\nMy test page is at http://hls.batc.tv/ and still works in firefox, doesn't work in chrome. (But worked in both using your hls stream)\n```\nrtmp {\n    server {\n        listen 1935;\n        chunk_size 4000;\n    application hls {\n        live on;\n\n        hls on;\n        hls_fragment_naming system;\n        hls_fragment 5s;\n        hls_path /usr/local/nginx/html;\n        hls_nested on;\n    }\n    application in-hls {\n        live on;\n        exec /usr/local/nginx/ff/ffmpeg -i rtmp://127.0.0.1/in-hls/$name -c:a libfdk_aac -b:a 64k -c:v libx264 -b:v 1000k -f flv -g 30 -r 30 -s 720x540 -preset superfast -profile:v baseline rtmp://127.0.0.1/hls/$name;\n    }\n}\n\n}\n```\n. Haha, tried poking another RTMP source into it, and it works! It appears my trusty copy of Sintel was the issue all along. How, as it gets fully transcoded before reaching the browser, I have no idea...\nThank you very much for your help!\n. As a further note, the cause of this issue was that the source sample rate of the audio stream was not being changed during transcoding, and Chrome did not like 22050Hz or 48000Hz AAC. Either using a 44100Hz source, or transcoding to 44100Hz, fixed the problem.\n. No change (issue still present) with 0.2.36\n. ",
    "jazzmanro": "Thanks @towerz, so then I have no other choice. No problem to create UICorePlugins, just thought they are 'too much' for simply needing to insert some information in the MediaControl.\nAs I've said, maybe for the future it would be interesting to have a UIMediaControlPlugin that would be automatically recreated/rendered with the MediaControl as it is so tied to it.\nThanks again for your clarifications.\n. ",
    "floriano12": "Thanks @towerz\nwhat to do, how I can solve ?\n. thanks @flavioribeiro \nnot open player, why ? dont work!\n. I use FMLE. \nI don't think.\n. is good FMLE config, with the old player works FMLE\nyou can try on vlc ?\n. @flavioribeiro this player work on mobile devices ? I try now but I receive a message: your browser does not support the playback of this video. Try to use a different browser.\n. I stoped the stream live, but player run.\n. Thanks so much for your reply!\nmy question is: can work player with \"text logo\", not image ?\nplease give me a link for download player HLS.\n. Thanks flavioribeiro and leandromoreira,\nthis is great, and works fine !\n. @leandromoreira thanks for your reply!\nwhich is my mistake on clappr player, in code script ?\nI make live stream, why not work player ? why receive color player ?\nI tested my script with another player and work fine.\nPlease, tell me how can include current time in my code script!\nRegards,\nFlorin\n. @leandromoreira , thanks so much for your help!\nI have two servers, one with RTMP and in second use HLS. \nsorry, but this RTMP don't work for me ! I try with another player and work my script.\nWhich is my mistake in HLS clappr player ?\nyou can put a code script which work live stream in Safari and IE \nplease include in this code current time.\nThanks in advance!\n. ",
    "vbHeiko": "This RTMP Player worked for me (tested on 30.August 2016 with Firefox):\n<html><head>\n<script type=\"text/javascript\" charset=\"utf-8\" src=\"http://cdn.clappr.io/0.1.0/clappr.min.js\">\n</script>\n<script type=\"text/javascript\" src=\"http://cdn.jsdelivr.net/clappr.rtmp/0.0.6/rtmp.min.js\">\n</script>\n</head>\n<body>\n<div id=\"player\"></div>\n<script>var player = new Clappr.Player({source: 'rtmp://xyz.com/live/Stream-123523670', parentId: \"#player\",autoPlay: true,plugins: {'playback': [RTMP]},gaTrackerName: 'MyPlayerInstance',mediacontrol: {seekbar: \"#E113D3\", buttons: \"#66B2FF\"} });\n</script>\n</body>\n</html>\n. ",
    "tcacciatore": "My script is in the file directory.\nNo errors displayed in the console\nI executed my script on Chrome, Firefox, IE, Safari.\n. Ok I pasted my code on jsbin and it still does not work : The video never starts.\nI'm wondering if it's due to HLS because it's working well with a mp4 URL (http://techslides.com/demos/sample-videos/small.mp4).\n. Ok I tried on a Mac, with Safari and it works !\n2015-09-30 20:33 GMT+02:00 Bruno Torres notifications@github.com:\n\n@cacciato https://github.com/cacciato both jsbin and jsfiddle load your\nHTML inside an iframe with sandboxing. Since Clappr by default uses flashls\nto load HLS (except when supported natively by the browser, like Safari),\nthe iframe sandbox environment doesn't allow loading the flash component\nthat is responsible for handling the HLS stream.\nIf you try your jsbin code in Safari it will probably work normally. We\nare working towards changing the default HLS handling to hls.js (see #555\nhttps://github.com/clappr/clappr/issues/555), due to all these issues\nwith sandboxing and browser security with flash.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/clappr/clappr/issues/567#issuecomment-144501193.\n. I don't understand : I'm using the last version and I'm still reproducing this BUG...\n\nHere is my player implementation : \n``` javascript\nplayer = new Clappr.Player({\n            source: url,\n            autoPlay: true,\n            height: browser_height-control_view.clientHeight,\n            width: browser_width-control_view.clientWidth,\n            plugins: { playback: [Clappr.FlasHLS]}\n        });\nplayer.listenTo(player.core.getCurrentContainer(), Clappr.Events.CONTAINER_BITRATE, onLayerChanged);\n```\n. Thank you \\o/\n. ",
    "wholegrn": "Did the trick thank you !\n. @towerz Indeed, i used Safari for my tests.\nI tested my code on Chrome and it worked !\nThank you.\n. ",
    "diegosacc73": "The events are not being fired in my application.\n```\nthis.player = null;\nvar options = {\n    source : '',\n    poster : '',\n    mute : true,\n    height : 720,\n    width : 1280,\n    flushLiveURLCache: false,\n    autoPlay: true,\n    chromeless: 'true',\n    persistConfig: false\n};\nthis.init = function() {\n    $('').insertAfter('#ms-viewport');\nvar playerElement = document.getElementById('player-wrapper');    \nthis.player = new Clappr.Player(options);\nthis.player.attachTo(playerElement);\n\nthis.setupEventListeners();\n\n// Hide player\nthis.player.stop();\n$('#player-wrapper').hide();\n\n};\nthis.play = function(url) {\n    $('#ms-viewport').hide();\n    $('#video_loading').hide();\noptions.source = url;\nthis.player.configure(options);\n$('#player-wrapper').show();\nthis.player.play();\n\n};\n// Setup Listeners for video player events\nthis.setupEventListeners = function () {\n    console.log('CLAPPR CONTAINER', this.player.core.getCurrentContainer());\nthis.player.listenTo(this.player.core.getCurrentContainer(), Clappr.Events.CONTAINER_STATE_BUFFERING, function Buffering() { \n    alert('Video Buffering!!!'); \n});\n\n};\n```\nAny idea ?\nThanks!\n. Not sure if this is the proper way to do it, but it does what I need, which is display a message from the time the video url is being loaded/buffered until it starts to play:\n```\n// Setup Listeners for video player events\nthis.setupEventListeners = function () {\n    console.log('CLAPPR CONTAINER', this.player.core.getCurrentContainer(), Clappr.Events.CONTAINER_STATE_BUFFERING);\n/*this.player.listenTo(this.player.core.getCurrentContainer(), Clappr.Events.CONTAINER_STATE_BUFFERING, function Buffering() { \n    alert('Video Buffering!!!'); \n});\n\nthis.player.listenTo(this.player.core.getCurrentContainer(), Clappr.Events.CONTAINER_TIMEUPDATE , function Error() { \n    alert('Container Ready!!!'); \n});*/\n\nthis.player.on(Clappr.Events.PLAYER_PLAY, function() { alert(\"Done Buffering!\"); });\nthis.player.on(Clappr.Events.PLAYER_READY, function() { alert(\"Buffering!\"); });\n};\n```\nMaybe this is a workaround, but it does the job and seems reliable. \nLet me know if there is a better way.\nThanks!\n. ",
    "alparslanahmed": "Its works, thanks for help!\n. ",
    "razvanmitre": "What about on iOS 10 with webkit-playsinline ?\nhttps://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html\n. ",
    "rgaufman": "What's the best way to get clappr to play inline?. I tried that but it's still switching to the native player :( - maybe I'm doing something wrong.\nAlso, when I open http://cdn.clappr.io/ and press play on my iPhone XS running iOS12.1.2 it is switching to the native full screen player :( - any ideas?. When I open http://cdn.clappr.io/ and press play on my iPhone XS running iOS12.1.2 it is switching to the native full screen player :( - any ideas?. Any solution to this?. Please accept as this fixes a major memory leak that is making clappr unusable with multiple players at the moment :(. ",
    "joseym": "I think I'm having the same issue, but with PLAYER_SEEK.\nThe event fires as expected in chrome, but when testing on an iPhone the PLAYER_SEEK event never fires.\n. ",
    "Kreeig": "yes , for example - http://sportlive.ws/s/euro2 , you see there no error , just not play \n. ",
    "madmarten": "Sorry for late respons. We will be moving away from webforms soon hopefully so I won't bother with this anymore. I'm not sure it's Clapprs fault anyway, but I have tried several other players and they don't behave like this. The page in question is hard to make public and availalable 24/7 since it's a live stream. I will close this for now.\n. Load the page in IE10 and you will see that the first and second player is not loading properly compared to IE11. \nThe bottom player on the same page was used to illustrate a problem with loading the level selector plugin. This was reported in another issue and has been resoled with the latest version as you describe.\nBut this issue with IE10 is still not resolved.\n. I have now tested and can confirm it is working again. Tank you!\n. @tjenkinson yes I have noticed that too, but had not started to investigate it yet. Thanks for letting me know, probably saved me a lot of time :)\nI should add to this problem that if I use flashls the fullscreen works as expected.\nExample how fullscreen problem looks.\n\n. In case this info helps narrowing down the problem.\nIf I on the same computer reduce the screen resolution to 1920x1080 the fullscreen mode works as expected, but as soon as I revert to native resolution 2560x1440 it fails. The video stream is ABR HLS with maximum resolution of 1280x720. It seems like the video window do not scale beyond the maximum resolution of the video file.\n. FlasHLS works as exptected. \nLooks the same at that link (but IE11 goes totally black when in fullscreen):\n\n. @tjenkinson  Same problem with Edge, on IE11 I get invalid source.\nIf I go down to 1920x1080 resolution, fullscreen works normally\n\n. Ok, been away for a while. Have now tested on standard video. And it has the same problem. So it seems like it's not an issue specific to Clappr. Guess I have to wait for MS to fix this then. Thanks for the help.\n. ",
    "PooriaFarhad": "and how to use VTT file for them?\nis it possible to use VTT file across https://github.com/tjenkinson/clappr-thumbnails-plugin ?\n. ",
    "lightest": "@flavioribeiro It works I confirm. Sorry for lack of feedback got a bit bussy. One more question. To switch between flash and hlsjs I need to use Clappr.FlashHLS/Clappr.HLS correct? The thing is that some particular playlists doesn't work with hlsjs but used to work with flash.\n. ",
    "dethos": "@leandromoreira No, today I tried again, the error no longer shows up and the player is working just fine.\n. ",
    "cowai": "I have the same problem with a nginx-rtmp generated stream.\n. @leandromoreira \nThe figured out my problem. My manifest file didn't have the \"CODECS=\" directive. And I was using LC AAC codec for audio, and hls.js was automatically declaring he-aac since I did not have an CODECS directive. So after I recompiled ffmpeg with he-aac, it worked fine and at the same gave me much better sound on lower bitrate :)\n. @AlexRevin You still need to support hls for iOS for the coming feature, don't you?\n. I also have choppy fullscreen video on linux with latest clappr. With videojs + flashls 0.3.5 it is smooth. But newer versions of flashls is choppy.\n. Is Adobe Scout  available for linux? I tried to find it but seems to be for osx and windows.\n. @mangui \nThis is only with Flash 11.2.202.548 (Firefox). In Chrome (bundled with its own flash), it looks smooth.\n. Is it easy to set flashls 0.3.5 only for flash 11.2? Is there a working 0.3.5 swf player that works with latest clappr?\n. I installed 11.2 in OS X and both videojs4 with flashls 0.35 and latest clappr where choppy. (Though not in chrome) So I think maybe this is a linux only issue. I will test with Windows 7 later.\n. Update:\nI tried with 11.2 in Windows 7 on the same machine as the one with linux, and it was smooth there. So this is a linux only problem I think. Also, I don't have ubuntu to test with either. This is Arch Linux with LXQT as the desktop. As people are upgrading to Firefox 42 and MSE I guess this will not be a big problem ;)\n. This issue can be closed as the feature has been implemented.\n. https://github.com/clappr/clappr/pull/693\nSecond attempt at this.\nI am looking forward to hearing your thoughts. Especially about servertime and using a string to parse.\n. @tjenkinson \nYour suggestion here does not seem to work.\n{\n  maxBufferLength: 30,\n  hlsjsConfig: {\n    maxBufferLength: 30\n  }\n}\nI am still seeing many requests (over the 30second limit) when I skip to a random position in the DVR.\n. @tjenkinson Good idea,\nI will do that.\n. @tjenkinson You were right. I simply have misunderstood the options of hlsjs. Now there is a reasonable amount of requests :)\n. #EXTM3U\nEXT-X-VERSION:3\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=120000,CODECS=\"avc1.77.30,mp4a.40.5\",RESOLUTION=256x192\nmiracle1_low/index.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=350000,CODECS=\"avc1.77.30,mp4a.40.2\",RESOLUTION=480x360\nmiracle1_med/index.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1028000,CODECS=\"avc1.77.30,mp4a.40.2\",RESOLUTION=768x576\nmiracle1_high/index.m3u8\n@mangui \nhttp://dailymotion.github.io/hls.js/demo/?src=http%3A%2F%2F146.185.141.228%2Fhls%2Fmiracle1.m3u8\nI get \"Frag Appending Error\" every once in a while and I need to restart the stream.\n. As you can see I have the codecs setup.\nThe encoder is libav/avconv with libfdk-aac and -profile:a aac_he on the first level.\nThe strange thing is that the error can come long after it has upgraded to the last level (LC AAC)\n. it seems to be too ahead of the playlist. I see that after 1448461299000.ts is requested it goes directly to 1448461279000.ts (two segments ago), and the last m3u8 request before that did not have a newer ts than 1448461299000.ts. So this seems to a timings issue.\n. Example: \n\n. @mangui Should I submit this issue to https://github.com/dailymotion/hls.js instead? Or do you quickly see something wrong with my stream and it doesn't need another issue created?\n. 00:00:00 00 pipeline_state  kCreated\n00:00:00 00 event   WEBMEDIAPLAYER_CREATED\n00:00:00 00 url blob:http%3A//dailymotion.github.io/ee5bb695-87dc-4d47-916a-bdb6b5fd1d38\n00:00:00 20 pipeline_state  kInitDemuxer\n00:00:00 322    info    Audio codec: mp4a.40.2\n00:00:00 322    found_audio_stream  true\n00:00:00 322    audio_codec_name    aac\n00:00:00 322    duration    10800\n00:00:00 322    info    Video codec: avc1.640c\n00:00:00 322    found_video_stream  true\n00:00:00 322    video_codec_name    h264\n00:00:00 322    pipeline_state  kInitRenderer\n00:00:00 324    audio_dds   false\n00:00:00 324    audio_decoder   FFmpegAudioDecoder\n00:00:00 324    video_dds   false\n00:00:00 324    video_decoder   FFmpegVideoDecoder\n00:00:00 324    pipeline_state  kPlaying\n00:00:00 327    seek_target 10770.1162109375\n00:00:00 327    pipeline_state  kSeeking\n00:00:00 328    pipeline_state  kPlaying\n00:00:00 334    event   PLAY\n00:00:02 592    info    Audio codec: mp4a.40.2\n00:00:02 592    info    Video codec: avc1.6401f\n00:00:10 02 debug   Audio splicer skipping frames for small overlap of 229us at time 10780030984us.\n00:00:10 584    height  576\n00:00:10 584    width   768\n00:00:18 586    info    Audio codec: mp4a.40.2\n00:00:18 586    info    Video codec: avc1.64015\n00:00:18 588    duration    10800.046977\n00:00:18 589    debug   Generated splice of overlap duration 26978us into new buffer at 10789886977us.\n00:00:19 857    error   Audio splicing failed: coded frame timestamp differs from expected timestamp 10789945678us by -58701us, more than threshold of +/-50ms. Expected timestamp is based on decoded frames and frame rate.\n00:00:19 857    error   audio decode error during playing\n00:00:19 857    pipeline_error  pipeline: decode error\n00:00:19 857    pipeline_state  kStopping\n00:00:19 859    pipeline_state  kStopped\n. @mangui\nI see that the audio codec reported by chrome is mp4a.40.2, but the first level is in fact mp4a.40.5.\n. I posted it further up but here you go: http://146.185.141.228/hls/miracle1.m3u8\n. Yes in my experience it only happens with the main manifest. Also if I throttle the bandwidth a little (a limit that is more that the stream bitrate) it can trigger the bug also. It seems to be too slow fetching the manifest file. If you see my screenshot further up you will see that.\n. Yes it fixes it self with the Auto-Recover option.\nBtw, does it make sense that it seem to be a bit more stable and robust when I have 4s segment length instead of 10s?\n. Hi,\nI have tried with HE-AAC only but that is not any better, and LC-AAC is terrible at 32kbit/s.\nWhen you say sample overlapping, are you talking about segments overlapping each other across level/quality?\nI will see if I can somehow get the levels to match. How small gap is needed? 0?\nIs this what I want to fix?\nshell\n$ filename=$(curl -s http://146.185.141.228/hls/miracle1_low/index.m3u8|grep \\.ts|tail -n1);ffprobe http://146.185.141.228/hls/miracle1_high/$filename 2>&1 | grep \"start\" && ffprobe http://146.185.141.228/hls/miracle1_med/$filename 2>&1 | grep \"start\" && ffprobe http://146.185.141.228/hls/miracle1_low/$filename 2>&1 | grep \"start\"\n  Duration: 00:00:10.16, start: 34650.618189, bitrate: 1066 kb/s\n  Duration: 00:00:10.14, start: 34650.636000, bitrate: 450 kb/s\n  Duration: 00:00:10.21, start: 34650.723000, bitrate: 151 kb/s\nAlso, is the auto-recover option something I can pass with clappr?\nThank you for your help! Much appreciated.\n. The problem is not totally fixed yet. But it doesn't really have anything to do with Clappr so I guess it can be closed for now.\n. @leandromoreira To do that would I need to essentially override the seek_time component? \nI would guess everybody that is using Clappr for live feeds would be wanting this though as it not very user friendly to display a random seek time which increases over time.\n. Thanks :)\n. Awesome. Thanks!\n. Ehm, was this directed at me?\n. Ah thanks :) Care to elaborate on your insights? :)\n. @leandromoreira @tjenkinson Nice to hear this is of value to you :)\nFor my use case, it makes sense as the viewers would want to follow certain programs, and being able to skip to a certain point based on current time is much more user friendly.\n. Providing server time is also important as in my experience people have crazy setupts with both wrong time zones setup for their location and wrong time to compensate for that. Along with time drift, it means we cannot trust the users local time in any way. It also makes it possible to have a UX for setting the timezone for which the time should be initalized.\n. Have you tried passing it? It should work. It will create a new date object though.\nOn 15 December 2015 19:16:22 CET, Tom Jenkinson notifications@github.com wrote:\n\n@cowai could you make the actualLiveServerTime option also accept a\nstandard Date object as well as the string? I already have a Date\nobject which is synchronised with the server so would be ideal if I\ncould just pass that instead of having to convert it to a string first.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/clappr/clappr/pull/693#issuecomment-164845317\n. Live HLS, google chrome browser in linux.\nSame in Firefox in linux.\n. @gfronza Could you provide with a working example?\n0.2.28 and 0.1.6 doesn't work at all for me. I mean clappr doesn't load because of errors.\nIn the console in chrome:\nUncaught TypeError: Cannot read property '_listenId' of undefined\nUncaught TypeError: Cannot read property 'settings' of null\n\nTest link: https://rawgit.com/cowai/48bf5cd022e05ccb0d99/raw/9f6b36ce30cf8784d091e358c6defe7704d1707d/clappr-levelselector-error.html\n. @leandromoreira @me-vlad \nHere is an actual test where the original problem is present (no live icon with dvr)\nhttp://rawgit.com/cowai/8c9833bd92fdbcdf5a19/raw/38568e44abf75c55945afe5874784255d9d0400d/clappr-live-icon-with-dvr-and-levelselector-error.html\n. http://rawgit.com/cowai/b14e3825604c6e612120/raw/2ce3d9d64f0b03116531b618865c65e701cbce23/clappr-live-icon-with-dvr-and-levelselector-test.html\nNow it works a little better. There seem to be a race condition problem. I now get the live icon when I go back in the dvr buffer, but not at initial load.\nThere is also loading bar on top of the playing stream in Firefox although the video has loaded fine. This does not happen in chrome. Both using hlsjs.\n. @gfronza Sorry for late response. My firefox has not yet auto-updated to 43 yet (on OS X), but in in 42 the stream works perfectly. \nThis issue can be closed yes. Thank you and merry christmas.\n. @leandromoreira \nOn the demo page of hls.js there is a Auto Media Recover option which triggers hls.RecoverMediaError().\nI dont think fragLoadingMaxRetry covers every corner case. RecoverMediaError() is kind of a last resort for all types of errors.\n. Ah that is strange. It works fine here. Which browser are you using?\nAh, I will try the latest master. Half of the issues I have created is already in master when I post an issue :P\n. I just tested the master. The main issue here is fixed yes. Thanks :)\nBut the crazy amount of requests is still happening. Maybe this needs to be a second issue?\n. I get the same thing sometimes in firefox. It's the animation \"bubbles\" which sometimes are square. (A simple page refresh can fix it sometimes.)\n. Seems it's not entirely stable yet: https://github.com/dailymotion/hls.js/issues/9\n. I also need to translate \"Back to live\" somehow.\n. Wow, this was fast :) Works great :)\n. @kslimani I found out I could actually make a random string that ended in \".m3u8\" as source and it was okay. I also hide the play button to not make it playable as well.\nI tested your snippet and that worked even better. Thanks :). I totally agree on all your points. If you guys are okay with inline if statements I agree it will actually be a little cleaner. For the redundant formatActualTime(), I agree we could check for the actualLiveTime option inside formatTime() as there were only a little line change to get zero-filled hours. I will push some code later :)\n. I came to think of a possible more flexible option. How about allowing a date object as an option where we add seek position/duration to that date. This way we can set server side time and let users go around the problem with wrong timezones and other client side problems.\nSomething like this: prependTime: new Date(),\n. I wasn't sure if formatTime was used elsewhere, if so paddedHours wouldn't be a boolean. \n. Good to know :)  Does this work in all common browsers too?\n. What I meant was providing server time to what the stream is now at its freshest point, and then calculate what the beginning of the stream is by calculating how long since initiation and seek time. That would work I think.\n. Fixed!\n. ",
    "polaris-zx": "only the audio.\n. ",
    "bernardocamilo": "Manually merged (4b172f8cf9615c1e49820574f05a2128e272bb94).\n. ",
    "kevin2o": "Was this implemented? I love the player, but I have playlists with multiple audio tracks and I can't find an option to change the track.\n. @leandromoreira Thanks for the update. Yeah, too bad. Clappr is by far the smoothest player I've used, but my problem is that the playlists I use have multiple audio tracks and English is not default.\n. ",
    "PreDeToR": "Hi @leandromoreira \nHas switching audio tracks been implemented yet, or is there a way to do it?\n. Hi @leandromoreira \nI setup a m3u8 that through VLC I can switch to the different audio tracks, yet I am not seeing anything in \"hls.audioTracks\" any suggestions where else to look?\nI even checked on http://cdn.clappr.io/ and it does not exist.\nI also tried this path : \n    var hls = player.core.getCurrentContainer().playback._hls\n. @leandromoreira I just tried the above code on cdn and I do not get the play event triggered.\n\n\nI also tried the normal play event and got the following:\n\n. @leandromoreira  Thanks for the update, that now shows an \"undefined\" for me in the log,\nShould it not alteast return 1 audioTrack on the above video?\n. hmm, I tried two different m3u8 files, and neither of them return it :(\nhttp://danievtest3.dedicated.co.za/converted/Main.m3u8          -Embedded Audio Into the video file\nhttp://danievtest3.dedicated.co.za/converted/ExtraMain.m3u8  -Explicitly defined audio files.\n. @leandromoreira http://danievtest3.dedicated.co.za/converted/ExtraMain.m3u8 works fine on the demo page.\nStill cant see it on clappr  :(\n. @leandromoreira any plans on updating to version 6.x ? \n. @leandromoreira thanks for all your help, I really appreciate it.\n. @leandromoreira \nThis has taken a long time, i know :(\nHere is a link to a audio track selector, its very basic,and I used the level selector as a base for the plugin.\nYou guys are more than welcome to look at it, and add it to the external plugins list:\nhttps://github.com/PreDeToR/clappr-audio-track-selector-plugin\n. Hi Leondromoreira\nI tried is on the above player and in the console I got the following errors.\nDon't know if this helps, I had the DRM playback working on a single machine, but moving it to my live architecture is where the problem seems to happen, since the servers are split.\nalso, I can play VOD & Live Stream with DRM on my test system\nCould it have something to do with the fact that I redirect the calls for the data files?\nUPDATE IT SEEMS ITS TO DO WITH LIVESTREAMING AND DRM any ideas?\n\n. Hi Guys\nI have disabled the DRM on the live stream, tested the the LIVE Stream using ffplay and vlc and they both work, yet the player is still causing issues, with the live stream.\nPlease have a look at this url:\nhttp://danievtest3.dedicated.co.za/test.html\n. Hi Guys\nI think I have narrowed down the problem. On the same machine (Ubuntu 15.10 (x86_64; KDE) ) my Opera(30.0.1835.125 ) plays fine yet Firefox(43.0.4 Mozilla Firefox for Ubuntu Cononical - 1.0)  does not.\n. Hi Guys\nAny idea, live streaming hls without DRM does not seem to work on FireFox or IE, yet opera seems to work fine.\n. @leandromoreira \nIt just seems to loop calling files but not displaying anything\nI am using ffmpeg to generate the hls files, I even checked them using Apples mediastreamvalidator and the file formats are correct.\n\n\n. @leandromoreira I made a couple of changes to my livestream formats and durations and its working fine now\n. @leandromoreira this is sorted now thanks\n. Hi @tjenkinson \nSo normal mp4 works but not the m3u8 file :(\nAny suggestions?\nPaths I tested:\nfile:///home/daniev/Documents/Development/Electron/smartvideosample/tmp/4661B52B617F07BFD035A3E0CE46AC04/Main.m3u8\nfile:///home/daniev/Downloads/Stinger.mp4\n. Hi @leandromoreira \nHosting its not the problem, I have that sorted, I already download the files from my server.\nI want to be able to play the files when the machine is \"offline\", lets say if the user is traveling to a area with no/bad internet.\n. Thanks will investigate how to do that, was hoping not to need it tho\n. @kslimani sorry, it seems the problem is more targeted to hls live streams, where its not triggering the TimeUpdate events.\nAny ideas what I can try?. UPDATE: I did get the onTimeUpdate event to trigger.\nThanks for the help.. ",
    "operutka": "@flavioribeiro some of the streams can be found here: \nhttp://www.eagles.org/Cams/FloridaNest.html\nYou can get the stream URL from your browser's console. It has always the following format:\nhttp://{...}.angelcam.com/{...}/playlist.m3u8?token={...}\nnote: the token in the URL is valid only for a limited period of time, you have to get a new one from your browser after the token's expiration\nThe problem has been reported across all platforms and browsers. We don't have any statistics about HW configurations.\n. Thanks. We're using the latest version of clappr but this is more a question of the Flash VM and its standard library. Exposing those options in your API would be great anyway so we could play with it on our own.\nBTW we have tried to hack the blob a little and added instructions for setting those two options in the org.mangui.chromeless.ChromelessPlayer class in the _onStageVideoState method (the else part of the first branch) and we can confirm ~50% CPU usage drop (at least in Firefox on Linux).\n. I'm sorry for my late response. I was a bit busy last week.\n@leandromoreira Thank you for the tip, we have already tried that but this is not the case. We have disabled the HW acceleration for some browsers as it caused frequent crashes. The issue we're talking about here is related to the SW decoder. Unfortunately, some of our clients have quite weak HW for SW decoding and it causes the decoder starts dropping frames. Sometimes, when the number of dropped frames gets above some threshold, the decoder loses essential information for decoding following frames and artifacts appear in the displayed video.\n@flavioribeiro There is no performance problem in clappr or flashls. As I already mentioned, the problem is caused by weak HW of some of our clients. What we're trying to do is to minimize CPU load by switching off some non-essential decoder features such as smoothed scaling and loop filter (i.e. deblocking). In order to do this, we need an access to the smoothing and deblocking fields of the Video object.\n. ",
    "cpeterso": "I'm a program manager on Mozilla's media team. If you have questions about Firefox's MSE implementation, feel free to CC me or drop by the #media channel on Mozilla's IRC server. :)\n. @flavioribeiro: that's correct. MSE won't be enabled by default on Linux until FF 43 (December 15).\n. @jyavenard: why does Chrome fire canplaythrough events when seeking but Firefox does not? Are Chrome and Firefox estimating HAVE_ENOUGH_DATA differently?\n. ",
    "alexandrevicenzi": ":+1: \n. I have no idea, but we use Wowza Stream Engine 4.2.\nffprobe shows:\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from 'MTQ3MTYxOzM0MDYz.mp4':\n  Metadata:\n    major_brand     : f4v\n    minor_version   : 0\n    compatible_brands: isommp42m4v\n    creation_time   : 2015-11-25 23:08:37\n  Duration: 01:24:01.86, start: 0.000000, bitrate: 217 kb/s\n    Stream #0:0(eng): Video: h264 (Baseline) (avc1 / 0x31637661), yuv420p, 640x480 [SAR 1:1 DAR 4:3], 176 kb/s, 12.49 fps, 24 tbr, 90k tbn, 48 tbc\n    Metadata:\n      creation_time   : 2015-11-25 23:08:37\n      handler_name    : WowzaStreamingEngine\n    Stream #0:1(eng): Audio: aac (mp4a / 0x6134706D), 16000 Hz, mono, fltp, 39 kb/s\n    Metadata:\n      creation_time   : 2015-11-25 23:08:37\n      handler_name    : WowzaStreamingEngine\nHope this can help a little :)\n. @leandromoreira sure :)\n@gfronza Thank you \n. Also, if you are playing any video, press mute and reload page, the video isn't muted anymore.\n. @tjenkinson I've made a test with the latest version and it works. Thanks.\n. @kslimani I think hls.js doesn't have this option. Testing in https://video-dev.github.io/hls.js/demo/ there's only options to toggle audio and quality, the CC is part of video component I think.. ",
    "kafeltz": ":+1:\n. Hi, I opened an issue related to this fix causing a bug: https://github.com/clappr/clappr/issues/1211\n. hey @eeggenberger @waster I have run your examples from http://clappr.devel.techcast.com/index.html \nAnd I could reproduce the problem.\nBut to fix it is very simple.\nI have removed the line:\nplayer.load({source: playlist, mimeType: 'application/x-mpegURL'});\nBecause you have already set it in the config:\nvar settings = {\n    source: playlist,  <------- HERE\n    parentId: \"#clappr_container\",\n    width: '100%',\n    height: '100%',\n    autoPlay: false,\n    plugins: [Clappr.FlasHLS],\n    //loop: true,\n    disableVideoTagContextMenu: false,\n};\nI think there is an issue by init the source by constructor and the next line re-init it by load method.\nYour are sending an object to a method expecting 3 params.. I could not simulate the part \"open developer tools and it works\" for me, it continues not working even with opening dev tool.\nI still think you cannot pass sources after you have already passed one.. I tested the pull-request and it did work for me.\nThx.\n. This line has an issue: https://github.com/clappr/clappr/blob/master/src/playbacks/flash/flash.js#L115\nThere is a idle state checking with a immediately empty return statement with no handling.\nIt should set some state and send a trigger as all other statements. \nThe same issue happen here: https://github.com/clappr/clappr/blob/master/src/playbacks/flash/Player.as\nThere are a lot of: playbackState without  _triggerEvent('statechanged');\nBriefing:\nThe correct behavior should be the lower level component report its state/behavior to upper level component. As result, some statements are handled where it shouldn't be as the src/playbacks/flash/flash.js. I took a look at the https://github.com/clappr/clappr/issues/731 and https://github.com/clappr/clappr/pull/733\nIt appears the problem was identified but not solved.. @kslimani tested and it does work!. @kslimani well, well safari macos does not work, i forgot to test it.\nSince it uses native hls i have no ideia where to report.. CSS?. In the old version, the style is included as follow:\n\nAnd in the new version is not, as follow: \n\nSomething related with the lasts commits.. ",
    "rafaell-lycan": "Why this isn't on the official documentation? =/\n. Anyway thanks @flavioribeiro \n. ",
    "comjakma": "\nNot loaded \"4b76590b32dab62bc95c1b7951efae78.swf\".\nUse the \"Clapper.FlasHLS\" plug-in, an error occurs on follow line. \n   --> throw new ReferenceError(errorMessage);\n   \"SCRIPT5022: Exception thrown and not caught\"\n. \n",
    "gfronza": "That's great! And what about the PLAYER_SEEK event? would be great to use the same unit as the seek(). IMHO it sounds a little weird to receive the event in percentage, I always have to get the duration to convert to it back to seconds.\n. Guys, I was able to isolate the problem we're having here at Eventials with this HLS streaming in Chrome. Short answer: it has nothing to do with Clappr and (maybe) even with HLS.JS.\nTurns out it was one of the levels inside the m3u8 manifest declared with a codec that was not the one being used. We first missed that because our transcoding pipeline includes the original broadcast (Video PassThru and Audio from speex to aac), so it varies according to clients. Our m3u8 generator is declaring (hardcoded) the codecs used, because I still have to figure out how to identify the actual codec (specially on live streaming).\nI tried to remove CODECS info from #EXT-X-STREAM-INF. HLS.JS in Safari and Firefox was able to handle the playback normally, but in Chrome...\nOther browsers didn't seem to care about this misinformation in the m3u8 manifest, maybe hls.js or chrome will address this in the future.\nJust sharing my sad story... :)\n. It works for me (with both rtmp and hls) using the latest versions of clappr (0.2.28) and level-selector (0.1.6).\n. @cowai the dist files were not updated in the last release of level-selector. It was working for me because  I had compiled a version for debugging.\n@leandromoreira I'll open an issue on https://github.com/clappr/clappr-level-selector-plugin\n. @cowai there's a new version of level-selector plugin with the updated dist files. Can you try again please?\n. @cowai I see, we should definitely track this issue in  clappr-level-selector-plugin. Can you open a new issue there? I'll start looking into it now though. If that's ok with you, this issue here at clappr/clappr can be closed.\nIn Firefox 43.0.1 (for OS X) I wasn't able to play your video. Actually the video starts playing, but after a few seconds it goes all black. This problem with the loading bar on top of the video was already addressed in the release 0.2.27 of Clappr. Are you sure you have the latest version? Anyway, you can report this in a separate issue.\n. I noticed this a couple days back and was thinking about creating a plugin to exit fullscreen. I agree with @towerz, Clappr providing a basic behavior (through a plugin that users could override) would do the trick for most of use cases.\n. I agree with @tjenkinson. Exceptions in external plugins should not affect the functioning of the internal components. That wouldn't be necessary if the events were exclusively listened by users, but that's not the case.\n. @leandromoreira @tjenkinson is there a timetable for merging and releasing this one? :)\n. ",
    "markx": "There is already a fullscreen event, Events.CONTAINER_FULLSCREEN, which is triggered on toggleFullscreen. If that doesn't help, could you be more specific about what your need? \n. ",
    "569934390": "maybe I didn't describe clearly, i mean how to control it hide or show, then when mouseover or mouseleave it don't hide or show again.if i use your method ,it will still show and hide when mousemove or mouseleave.\n. Hey @leandromoreira \nyes, i want it hide anytime ,the requirement is that, except the real video, i also need to play advertisement (before adv and after adv),so when the before or after adv is playing  i don't want\n the mediacontrol show ,but when the real video is playing i want the mediacontrol show.\nwithe the chromeless, i can't make it show again,maybe you can tell me how to solve it!\n.  @leandromoreira\ni already tried ,but it seems don't work, when the mouse move or leave, the mediacontrol is still show or hide, the disable properties is still true,it seems like there is something changed it\n. @leandromoreira\nthanks a lot ,it worked ! \ni try my code on http://cdn.clappr.io too ,it seems work fine,so maybe i used a old version which has this bug. the new version already fix it\n. @leandromoreira \ni use it the same way \uff0cbut not the player_play event\uff0cmaybe i use the wrong event!\nand the document(http://clappr.github.io/) is too simple,maybe some demo is good \n. @leandromoreira \nnow as i said before,i need to play advertisement,but in mobile it need a tap to play, the load method(player.load(xxxxxx)) will create new video tag ,so i need to tap three times to play before adv,after adv and video,if change  the src ,it only need one tap,so i want to made load method to change src if it's exists. i'm going to change the load method source code,but i think it's a bad way.\ndo you have any good idea to do it?\n. @FDiskas \ni means if i play many videos ,but i only want tap one time, if change the exist video src not create new video ,by that  you only need one tap\n. @tjenkinson \nit works,thanks, but what's different between command 'npm run release' and 'webpack --progress -d --optimize-mangle --optimize-dedupe --optimize-occurence-order --output-filename clappr.min.js'? \n. @leandromoreira  thank you !\nI solve it by myself .\nit's because i use the old version of hls.js npm modules,after upgrade to the newest version,it's ok now!\n. @tjenkinson\nthank you ! i 've solve my problem by change the  params 'limit' of url-loader from 1 of url-loader to 10000  as  'url-loader?limit=10000',so the ttf file be part of js file.\ni have another thought about file path, now in the scss file the resources path is relative,but some times i want absolute path,so maybe a path variable should be given like \u2018src: url(\"$path/Player-Regular.ttf\")\u2019 \nthe variable $path default is '.' and it can be a http path like \u2018http://www.xxx/css\u2019 in production environment! What do you think about it ?\n. ",
    "gamtiq": "Version 0.2.47 still has this bug. It seems that the bug was brought back by c805ffa\n. Fixed.\n. I have added start method for convenience so that to make just one call instead of two (load/configure and play) when starting playing of new video.\nMaybe it is worth not to add new method but change implementation of play method so that it would be possible to pass optional parameters specifying source that should be played.\nIf that is accepted I can delete start method and move the appropriate logic into play method.\n. I agree with you. Indeed adding auto play ability for load method would be enough.\nShould I make any additional changes in my pull request? Or do you plan to merge only necessary commits (excepting c594318)?\n. I can make additional changes in PR. If I correctly understand you, it is necessary only to add the third parameter for load method and to modify the method slightly. I will do it.\n. ",
    "wmertens": "React has the extra problem that it is not very happy when there are two differrent versions loaded on a page.\nHowever, much of what React does is available in very light weight frameworks, mostly based on the virtualdom project https://github.com/Matt-Esch/virtual-dom/blob/master/README.md .\nIf you don't need unified cross-browser event handling and lifecycle events (do something on mount/unmount/update), these are very viable options. See https://github.com/Matt-Esch/virtual-dom/wiki - you can still use jsx if you like.\n. ",
    "oyeanuj": "@bikegriffith I am very curious to see how Clappr works within React, so any gist or sample repo would be super helpful. Any thoughts or experience with React and Clappr together would be helpful as well (I am trying to decide what player to use for my audio and video needs and Clappr seems great if it works well in React).\n. @bikegriffith I am very curious to see how Clappr works within React, so any gist or sample repo would be super helpful. Any thoughts or experience with React and Clappr together would be helpful as well (I am trying to decide what player to use for my audio and video needs and Clappr seems great if it works well in React).\n. ",
    "framerate": "@bikegriffith  \ud83d\udc4d \n. Very similar to what I've been doing! But I like how you're handling prop changes, mine is still barebones. Thanks!\n. Hey guys - I'm seeing this issue as well, rock solid on Firefox but Chrome just goes to a white screen all the time.\nI'm not sure I understand what the fix was? @flavioribeiro fill me in?\n. We don't use wowza, it's a custom HLS streaming engine so it may be hard to test. I'm doing a few more tests to make sure I don't have anything corrupt in my Chrome as well that could cause this.\n. Unfortunately I can't since our streams are CORS-restricted by someone at a higher pay grade than myself @flavioribeiro  :(\nI'll try and get them to lift it (again) though.\n. @tjenkinson thanks for that.\nRunning there it seems go fine, but running in my clappr applications when I hit a certain part of the stream my Clappr instead just went white. \nIs there an easy way to debug this? I set Clappr.Log.setLevel(0); but that's a lot of log spam.\nEDIT: It may actually happen in both places with certain parts of the stream, but its rare.\n. @joaopaulovieira Sorry, delays on the project led to it being canceled and they went back to another JS library I think! \nWish I had more news!. So crazy, I just rebuilt a new project using clappr and am seeing this same glitch! It worked fine in my other app yesterday, (and is still working!)\nI'll report back if I figure out why. (I'm not building my own, just including from npm)\n. Got it.\nYesterday I got 0.2.52. Today I got 0.2.53 which is throwing this error for me. Rolling back a minor point fixed it and HLS videos are playing for me.\nDoes that help @towerz ?\n. 6.2 but I am not directly building it. I just install it and include it but\nthe whole thing is built with webpack afterwards\nOn Jun 2, 2016 2:13 PM, \"Bruno Torres\" notifications@github.com wrote:\n\nBoth 0.2.52 and 0.2.53 include hls.js updates, so it could be related to\nupdating the playback underlying library. I can't reproduce with the cdn\nversion, but I'll try to build a project from scratch to isolate this\nproblem.\nWhat version of nodejs are you using, @framerate\nhttps://github.com/framerate? We noticed that using earlier versions of\nnodejs could cause some build issues.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/clappr/clappr/issues/1015#issuecomment-223424103, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AAEiM7BN2rpRdGudKvcrk8UXWKgUvMzXks5qH0dbgaJpZM4IsbDu\n.\n. Chrome Version 51.0.2704.63 (64-bit)\n\nthis.player = new Clappr.Player({source: this.props.stream, parentId: '#videoplayer'});\nthis.player.play();\n. ",
    "ggarnier": "@oyeanuj We've been using Clappr with React for a while, and we intend to release it as open source. I don't have a snippet to show right now, because our code is very specific for our project. I'll post something here as soon as I have some time.\n. ",
    "jyavenard": "\"@jyavenard: why does Chrome fire canplaythrough events when seeking but Firefox does not? Are Chrome and Firefox estimating HAVE_ENOUGH_DATA differently?\"\n@cpeterso : for the same reason we have https://bugzilla.mozilla.org/show_bug.cgi?id=1194624\nThe buffer monitoring part of the MSE spec isn't properly implemented in FF. I expect it fix for 45.\n. ",
    "pdutourgeerling": "Got a problem like this.\nMy stream works on Firefox, Chrome for Windows and Safari but not on Chrome for OS X.\nOn Chrome for OS X it just shows a black screen.\nOS X 10.11.1\nClappr 0.2.25\nChrome 47.0.2526.80 (64-bit)\nThe message I get when trying my stream on Dailymotion's hls.js demo is:\n\"The video playback was aborted due to a corruption problem or because the video used features your browser did not support.\"\nI tried my stream on Chrome Canary for OS X (49.0.2588.0 canary (64-bit)) and it worked. I think the Chrome team is aware of this issue so it'll be fixed soon.\n. Moving from nginx-rtmp to Nimble Streamer also fixed my problems.\nI still use the same streams so my issue also had nothing to do with HLS.js or Clappr :)\n. ",
    "tanchun": "I got it, thanks\n. ",
    "alwayzgame": "@leandromoreira where shud we place this cors or which folder on nginx server?\nlocation / {\n  add_header 'Access-Control-Allow-Origin' '*';\n  add_header 'Access-Control-Allow-Credentials' 'true';\n  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n}. @leandromoreira i tried playing it on http://www.streambox.fr/ it gave me 403 forbidden error but the same stream when i switch the user agent works flawlessly what is the work around?. This is the screen shot when i try to run m3u8 it in pc or desktop mode (not working)\nhttp://prntscr.com/hhnrw9\nThe same m3u8 when i tr y to run it in mobile mode [ ctrl + shift + i ] and then press [ ctrl + shift +\n m ] (working)\nhttp://prntscr.com/hhnsx8\ni hope you understand what my problem is \n. so what setting shud i tweak to make it work? \nis there a way to load the mobile user agent automatically. stream(m3u8) works on Flashhls demo page but does not work on hls demo page, and on which folder should we have the cors setup on nginx i mean this example\nlocation / {\n  add_header 'Access-Control-Allow-Origin' '*';\n  add_header 'Access-Control-Allow-Credentials' 'true';\n  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n}. ",
    "flavioschuindt": "Same to me here:\nInstalling Bower dependences \nbower clappr#0.2.25         not-cached git://github.com/clappr/clappr.git#0.2.25\nbower clappr#0.2.25            resolve git://github.com/clappr/clappr.git#0.2.25\nbower clappr#0.2.25           download https://github.com/clappr/clappr/archive/0.2.25.tar.gz\nbower clappr#0.2.25            extract archive.tar.gz\nbower clappr#0.2.25       invalid-meta clappr is missing \"ignore\" entry in bower.json\nbower clappr#0.2.25           resolved git://github.com/clappr/clappr.git#0.2.25\nbower clappr-zepto#0.0.4    not-cached git://github.com/thiagopnts/clappr-zepto.git#0.0.4\nbower clappr-zepto#0.0.4       resolve git://github.com/thiagopnts/clappr-zepto.git#0.0.4\nbower compass-mixins#^0.12.7       not-cached git://github.com/Igosuki/compass-mixins.git#^0.12.7\nbower compass-mixins#^0.12.7          resolve git://github.com/Igosuki/compass-mixins.git#^0.12.7\nbower clappr-zepto#0.0.4             download https://github.com/thiagopnts/clappr-zepto/archive/0.0.4.tar.gz\nbower compass-mixins#^0.12.7         download https://github.com/Igosuki/compass-mixins/archive/v0.12.7.tar.gz\nbower clappr-zepto#0.0.4              extract archive.tar.gz\nbower compass-mixins#^0.12.7          extract archive.tar.gz\nbower clappr-zepto#0.0.4             resolved git://github.com/thiagopnts/clappr-zepto.git#0.0.4\nbower compass-mixins#^0.12.7         mismatch Version declared in the json (0.12.6) is different than the resolved one (0.12.7)\nbower compass-mixins#^0.12.7         resolved git://github.com/Igosuki/compass-mixins.git#0.12.7\nbower hls.js#v0.3.9                 ENOTFOUND Package github:dailymotion/hls.js not found\n. Sorry @leandromoreira to not provide it before. I'm using a Motorola Moto G in Android Lolipop 5.1.\n. @leandromoreira just to add more info: I have just updated my chrome in android to 47.0.2526.76 and the problem persists.\nI have other issues with safari on iPhone and firefox in Android with this same playlist in my website and in cdn.clappr.io. Should I comment them also here or it would be better open other issues to better tracking?\n. @leandromoreira sorry, but I didn't understand what you explained. Did you try the VOD playlist that I mentioned and it worked? I have just downloaded the master build (zip package from github), added the clappr.min.js from this build to my static folder and the result was the same: Clappr enter in live mode and doesn't play the video.\nIf I try to test with the Playlist that you mentioned, the player starts in live mode, but after a few seconds (maybe the time necessary to load the first ts) changes to VoD mode and plays the video fine. \n. Ok, @leandromoreira. \nI think that we are having some weird behaviours with the ts size on chrome in android. One interesting point to note here is about the ts size. I checked in network panel in Chrome and the ts size from your playlist is about 1MB, while mine is about 4MB. I think that when the ts size is a little more bigger, this behaviour happens. I'll try to reencode this same video using  small ts segments and see if this same behaviour happens. \n. @leandromoreira,\nJust reeconded my input video using ts segments with 5 and 3 seconds length and got the same result. I also tried your suggestion using the bare video tag, but in my android I just see a white box in the <video> placeholder. Even the play button doesn't show.\nYou can see all of these tests here. They are separated by segment length and by method (clappr and bare video tag). It would be great if you could test in this page, because my playlists works fine on other browsers (even on chrome in linux and windows, for example), but get this weird behaviour on chrome in android. Thanks!\n. @leandromoreira thanks for the tip about apple technote!\nSo, I read the document and tried to strictly follow it, i.e, recommendation about encoding. Now, I'm generating 8 different bitrates and clappr plays the video pretty well, although I'm still receiving it  in live mode in the beginning (It's exactly the same behaviour using the other playlist!\nOne thing that I noted is that the time period to the live mode vanishes is directly proportional to the ts size: streambox.fr for example has larger ts (larger video bitrates) in the beggining of master playlist than mine. So, as I have lighter video bitrates in the beginning of the master playlist, the player loads it faster and the live mode vanishes more quickly. This was what I observed.\n. @leandromoreira , I don't know if it makes sense, but couldn't we just look at the master playlist (call it playlist 1), get the first playlist indexed on it (call it playlist 2), and after it look for the presence of tag #EXT-X-PLAYLIST-TYPE:VOD in playlist 2. If yes, this should be played as VOD. Otherwise, Live. Makes sense?\n. Adding more info: Just downloaded firefox and chrome for iOS and observed the same problem.\n. @leandromoreira just tested and the proble persists :( On my ADSL 5Mbps link, it freezes on the first buffering. When I test it on 4G, it doesn't need to buffering and the video works well.\nWhat I've done to install this build that you mentioned: Downloaded the .zip, extracted the .js from it and added it on my static folder served by nginx. After, I downloaded the dist folder from clappr repo to get the fonts, etc., added it to my static folder and finally changed baseUrl when creating the player in my code to point to the dist folder.\n. Ok, @leandromoreira. I changed my master playlist to serve 8 different bitrates, instead of just one as before. Now, it's working fine on iPhone!\nBut I think there is something weird related to the case where I serve only one bitrate: Shouldn't clappr try to play this only bitrate no matter what happens? Or clappr implements some timeout? In my mind, clappr should think: \"Ok, this guy doesn't have a good internet connection, this is a high quality video, but I will try my best to play this video. No matter what happens.\". The behaviour in this case is always the same: Video freezes in the first buffering. If I immediately change to the 8 bitrates playlists, everything works fine!\n. ",
    "sxh615": "I try \"http://cdn.clappr.io/ with http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8\". It works fine.\nI'm so sorry that I have made mistake. I tested p2p hls using bemtv(\"clappr\": \"0.0.62\") on Android system, I comments followwing code ,  error still exist so that I think clapper don't support android.\n//plugins: {playback: [P2PHLS], container: [P2PHLSStats]},\n. @leandromoreira Certainly you can. Thanks a lot for your help.\n. ",
    "lucasrodcosta": "Hi everyone!\nI just started to work on this feature in a new plugin called clappr-nerd-stats.\nIt's in a an alpha version, but I hope to improve it in the next weeks.. ",
    "avreg": "\ncoverage/coveralls \u2014 Coverage decreased (-0.03%) to 64.264% \nWhat is this? I have used the most recent upstream/master.\n. \u0412 Tue, 15 Dec 2015 05:55:47 -0800\nBruno Torres notifications@github.com \u043f\u0438\u0448\u0435\u0442:\n@avreg please refrain from opening issues for broken tests. It's not really a bug or feature request, it's a consequence of the product development.\n\nOk, understood, thanks.\n\nWe already have notification systems in place to inform us whether tests are breaking or fixed.\n\nWhere can I report bugs into master?\n\nIf you are using the code on master in production environments, I'd recommend you not to. We use the master branch for development, and constantly release stable, tagged versions. \n\nI would like to participate in the development of the project.\n\nI recommend you to use these versions, or the latest version either on npm or http://cdn.clappr.io.\n\nStable versions from npm/CDN is still far from a \"production\" state :)\nDo you plan to use the stable branch without API changes,\nlike \"stable_0.2.x\", \"stable_0.3.x\"?\n. \u0412 Tue, 15 Dec 2015 07:52:12 -0800\nBruno Torres notifications@github.com \u043f\u0438\u0448\u0435\u0442:\n\nImplementing plugins is the way we thought that Clappr could be expanded and customized to more specific uses. We implement directly in our Clappr-based player features that are specific for our environment, like ads, DRM, quality switching, PiP, etc.\n\nOk, plugins arch. is good.\nLook my PR here https://github.com/clappr/clappr/pull/739 , please.\nI am interested to this feature as soon as possible got into master,\nit does not matter in my implementation or yours.\n\nThere are no plans for creating a stable branch without API changes until we reach an API that we are satisfied with to name it a 1.0 release.\nYes, I agree that it is reasonable.\n. \u0412 Tue, 15 Dec 2015 08:05:33 -0800\nBruno Torres notifications@github.com \u043f\u0438\u0448\u0435\u0442:\n@avreg thanks for suggesting this, but it's not really necessary to add overrides for internal plugins. In order to change plugin priority, like playbacks, you could just add them in the order you want in the plugins parameter.\nWhen merging the plugin lists, the ones in the plugins parameters are added first, and internal plugins with the same name are discarded. This way, if you want to create a new spinner or poster plugin, you could just add plugins with the same name as their internal counterparts to the list.\n\n1) How should look like a global reordering if the page a lot of players?\nvar override_playbacks = [class1, class2, ...]\nplayer1 = new Clappr.Player({\n    plugins: {\n        playback: override_playbacks\n    },\n}\nplayer2 = new Clappr.Player({\n    plugins: {\n        playback: override_playbacks\n    },\n}\nIt seems to me that the visibility like this:\nClappr.defaultPlugins.playback  = [...]\nplayer2 = new Clappr.Player({...})\n2) For example, I would like to remove the \"hls\" plugin for some browsers.\nThe only way to do it is now:\nif (browser is ... and browser_version ... ) {\n    override_playbacks = [\n                    HTML5VideoPlayback,\n            HTML5AudioPlayback,\n                    FlashVideoPlayback,\n                    FlasHLSVideoPlayback,\n                    HTMLImgPlayback,\n                    NoOp\n        ]\n                // !!! trailing NoOp is necessarily\n} else {\n    override_playbacks = []\n}\nplayer1 = new Clappr.Player({\n    plugins: {\n        playback: override_playbacks\n    },\n}\nYes, this will work, but is it comfortable?\n3) Use plugin class names in the \"plugins\" parameter may not be a good idea.\nFor example:\n- SpinnerThreeBouncePlugin vs \"spinner\",\n- WaterMarkPlugin vs \"watermark\".\n\nI think this may be undocumented, so it's a good thing you pointed out that we are missing this explanation in our documentation.\nThere's one thing not covered by plugin overrides, removing/disabling plugins at instantiation. We could implement this as a plugin or in the core loader, but it's different from specifying the plugin bundle.\nIn the coming versions we will remove most internal plugins and release them in their standalone form, so you can create your own bundle. We'll add a way to bundle plugins more easily as well.\n\nYes, some internal (core,container) plugins are now completely \"external\".\nTheir moving from internal solve the problem.\nBut \"playback\" plugins are likely to remain as internal,\nand again we get only what I wrote above.\n. \u0412 Tue, 15 Dec 2015 08:13:18 -0800\nBruno Torres notifications@github.com \u043f\u0438\u0448\u0435\u0442:\n\nAs you mentioned in #737, you need the ability to remove some plugins from the list. Since we don't have this implemented yet, why don't you try to disable the undesired plugins for now?\n\nReally? Without patching loader.js?\nHow can I just turn off the following plugins:\n- container: [WaterMarkPlugins, StatsPlugin, GoogleAnalyticsPlugin]\n- playback: [hls, flash]\n  ?\n\nAnother way to do this is extending the player class and making your own loader exposing your list of internal plugins.\nYes, it is possible, but more like a hack.\n. \u0412 Tue, 15 Dec 2015 08:13:18 -0800\nBruno Torres notifications@github.com \u043f\u0438\u0448\u0435\u0442:\nAnother way to do this is extending the player class and making your own loader exposing your list of internal plugins.\nIf you need help doing this I can provide you some examples.\n\nI would be very grateful.\n. \u0412 Tue, 15 Dec 2015 13:26:53 -0800\nBruno Torres notifications@github.com \u043f\u0438\u0448\u0435\u0442:\n\nThis looks like what we'll use for plugin bundles, so I'm not totally against this. As I said before, what's part of the player core implementation should not be exposed, but if we need to expose something it will be part of the API or a plugin. So we would probably expose functions to allow this to work instead of setting properties directly.\n\nYes, but I am sure that the player core will still consist of a number of internal the most used plugins,\nlike as playback's (html5, flash), container (spinner, click-to-pause), maybe core(seektime).\nIf you remove this most used plugins from the player core,\nClappr will be similar to the constructor for advanced users.\nIf you do not remove this most used plugins from player core,\nit is desirable to provide a simple and intuitive way to change a set of plugins.\n\n2 - It doesn't seem comfortable, but as I told you, if you need to implement something more specific,\nyou could have your own loader implementation and use it instead:\njavascript\nvar MyLoader = Clappr.Utils.extend(Clappr.Loader, {\nvar MyPlayer = Clappr.Utils.extend(Clappr.Player, {\nTo disable plugins, you could just call disable() on them. Something like:\njavascript\nplayer.getPlugin('stats').disable();\n\nMany thanks for these tips.\nand other users can use them as a temporary solution (imho).\n\nplugins: { core: [\"my_plugin\"] } // ???? How would that work?\n\nCurrent plugins hangle disadvantages:\n1) external plugin classes litter frontend app namespace;\n2) internal plugin classes litter Clappr global variable;\n3) uncomfortable and not work reliably with the (long) class names of plugins\ninstead short string names (and documented).\nPlease look at this idea below.\n```\n[CLAPPR]/base/plugin.js\nclass Plugin extends BaseObject {\n    static get pluginName() { throw \"You must override this method in your plugin's class\" }\n    static get pluginType() { throw \"You must override this method in your plugin's class\" }\n    get name() { return this.constructor.pluginName }\n    get type() { return this.constructor.pluginType }\n  }\n[CLAPPR]/base/plugin_registar.js\nclass PluginRegistar {\n     constructor() {\n       super()\n       this._plugins = {\n         playback: [],\n         container: [],\n         core: []\n       }\n    }\nfunction register(pluginClass) {\n  // check type\n  // append to this._plugins[type]\n  // if global Clappr.plugingsOrder[type] != undefined\n  //    - perhaps disable pluginClass\n  //    - (re)sort this._plugins[type]\n}\n\nfunction getOrderedClassesList(type, override) {\n  if (override) {\n    // override and resort this._plugins[type] and return\n  } else {\n     return this._plugins[type]\n  }\n}\n\n}\nvar pluginRegistar = new PluginRegistar()\n  let registerPlugin = function(pluginClass) {\n    pluginRegistar.register(pluginClass)\n  }\nexport {registerPlugin, pluginRegistar}\n[CLAPPR]/internal_plugins.js\nimport {registerPlugin} from \"base/plugin_registar.js\"\nclass SomeClapprInternalPlugin extends Plugin {\n    static get pluginName() { return \"html5\" } // for example\n    static get pluginType() { return Clappr.PLUGIN_TYPE_PLAYBACK }\n  }\nregisterPlugin(SomeClapprInternalPlugin)\n[EXT.PLUGIN]/external_plugins.js\nclass SomeClapprExternalPlugin extends Plugin {\n    static get pluginName() { return \"rtmp\" } // or \"rtmp-vendor\" if there may be a few \"rtmp\" plugins\n    static get pluginType() { return Clappr.PLUGIN_TYPE_PLAYBACK }\n  }\nregisterPlugin(SomeClapprExternalPlugin)\n[CLAPPR]/components/loader/loader.js\n  import {pluginRegistar} from \"base/plugin_registar.js\"\nclass Loader {\n    /**\n    * customPluginsNames = options.plugins\n    * new Clappr.Player({\n    *    plugins: {\n    *      playback: [],\n    *      container: []\n    *      core: []\n    *    }\n    * })\n    /\n    constructor(playerId, customPlugins) {\n      ...\n      this.playbackPlugins = pluginRegistar.getOrderedClassesList('playback', customPluginsNames['playback'] || {})\n      this.containerPlugins = pluginRegistar.getOrderedClassesList('container', customPluginsNames['container'] || {})\n      this.corePlugins = pluginRegistar.getOrderedClassesList('core', customPluginsNames['core'] || {})\n      ...\n  }\n[CLAPPR]/main.js\n  * Remove all internal plugin classes from export.\n  * (optionally) Import pluginRegistar and add to export (Clappr.pluginRegistar).\n```\n. \u0412 Wed, 16 Dec 2015 05:27:06 -0800\nBruno Torres notifications@github.com \u043f\u0438\u0448\u0435\u0442:\n\n@avreg thanks for your insights. We'll take them into account when developing the plugin bundling feature.\n\nI hope so, and I wish you success.\n. ",
    "simoeddami": "Same problem for me on 4.3.0\n. i solved the problem on 4.3.0\nJust add to your Application.xml HTTPStreamer > Properties\n<Property>\n<Name>cupertinoUserHTTPHeaders</Name>\n<Value>Access-Control-Allow-Origin: *</Value>\n</Property>\n. ",
    "NicholasAsimov": "Would you like a PR for this? I fixed it, but used an outside dependency (lodash.isequal) to compare levels.\n. Thanks, I will look into that.\n. @kslimani Yeah, exactly.\nOne reason why I'm concerned about it is that if, for example, you have a lot of players on one page (like an admin page or a summary page with a lot of videos) it will drain quite a few resources if no_op is going to trigger (one example could be using rtmp plugin [which uses flash] and browser doesn't have flash).\nHope I made that clear. Of course I can make this change in my version but maybe this is something that would be more appropriate for everyone? \n. How should we organize poster options? Right now we have a 'poster' option which changes the image. Maybe we could have a posterOptions object with image and showForNoOp options. I'm not too happy with those names though.\n. That could make it backwards-compatible.\n. I will wait until #1169 is merged before thinking about this more. Currently I feel like it (this PR) over complicates the issue.\n. @leandromoreira Definitely will do, together with tests, after we finalize this.\n. @towerz we could allow to pass a custom value to the background property so people can do basically anything they want (gradients, patterns, plain colors etc.) that's possible with CSS3.\nAnd to keep everything backwards-compatible we would leave everything as is, but additionally check for poster.custom (probably needs a better name) parameter and if it exists instead of setting background-image we would set background to that.\nCurrently I can't see any security problems that could occur, we would just need to make sure to sanitize it.. Should I create tests which render poster and check if background was applied correctly?. @leandromoreira No problem, what kind of tests should I add as well? I did the rendering test already.. Oh, nevermind, the code to do initial seek is only present in html5_video and flashls playback. I will do a pull request with same functionality for hls.js playback.. If somebody is curious, you can use startPosition property in hlsjsConfig to set the starting time.. Weird, I run tests locally and they pass, am I missing something?. My tests pass locally for some reason but they complain about missing .env, what variables should be there?. Seems like Object.assign requires a polyfill, that's why it fails in Chromium 37 and IE11, what to do?. @leandromoreira unapprove this please. This currently has problems with Live with DVR playlist. I will work on a fix later.. Alright, so the problem is that, obviously, in constructor playbackType will be 'vod' because it's the default value, and we don't know true playback type until the first LEVEL_LOADED event. But we need to specify startPosition in the hls.js contructor if I'm not mistaken. Any ideas?. Yeah, it's a breaking change. Now it expects not a string from which to parse (used to be that so you pass url for example) and now it uses url by default and asks which query parameter to use (default is t). I changed the code so instead of passing initial option to hlsjs I just do what you did in html5_video playback - when we get the initial metadata (so we know what type of a playlist this is) we parse the time and manually seek the player.. Also to fix autoSeek in html5_video playback the argument for seekStringToSeconds should be removed because it expects query parameter not a string. And it probably would make sense to rename it to something like getSeekTimeFromUrl.\nhttps://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L340. Correct. @towerz #1334 only fixes html5_video playback, hls.js playback still doesn't have autoseek.. @kslimani My apologies, it actually does work. For some reason I thought that cdn.clappr.io holds the latest master instead of a latest release so I tested there before I wrote my comment. Now I tested it with latest master and it appears that seeking is working on hls.js playback as well. Thanks for a great pull request!. @tjenkinson thanks for great feedback!. That's odd because safari uses html5_video and it has that implemented there. @kslimani no, you add t=n in the browser url, not the source url. You can either specify an integer, and in that case it will be interpreted as seconds or in the format of e.g. 2h35m10s.. Yep, completely agree. Will do.\n. One of the reasons for this PR is that to stop NoOp animations when it's not shown (e.g. autoPlay is false). Currently it eats up 7-10% CPU on i5 Haswell processor and it's only 1 instance of the player. If user would go on a page with multiple intances of Clappr and will get NoOp playback it will eat up like 30% CPU which is definitely not good. What can we do about it?\n. @leandromoreira Wouldn't this throw an error in else clause if poster is not defined because we would try and access undefined.custom?. Sure, I was looking at the hls.js playback, if we change it here should we later do the same in other playbacks? Same for the checking for duplicate events. I would argue that other playbacks would need to do their own different logic because we already have different approaches in hls and html5_video. In hls js HD check happens on level switch, in html5_video it can only happen when new source loads. So by moving it to timeUpdate we're increasing number of checks that can never really change in the context of this playback.. That would be a good idea to have a base _checkHighDefinition method that other playbacks would override.. ",
    "canhlinh": "@leandromoreira  Thank for reply. I will be test it again, report test result as soon as possible.\n. I tested it againt. It's work well. Thanks.\n. ",
    "pyrex9944": "\n@shaharmor I think you change the settings programmatically using the configure() method\nI think this is better than introducing global variables as it keeps everything self-contained contained within the library.\n\nwhen you planning compile Clappr for Angular 4+ ?????. ",
    "croepha": "I ran the apple validation tool on both streams:\nMy video: \nError: Measured peak bitrate compared to master playlist declared value exceeds error tolerance\n--> Detail:  Measured: 3054.41 kb/s, Master playlist: 3469.00 kb/s, Error: 13.57%\n--> Source:  https://s3.amazonaws.com/tng-local-prod-6/tests/269/PL-HLSv3.m3u8\n--> Compare: tng-v4-HLS-auto-540-.m3u8\nError: Interlaced video detected\n--> Detail:  Track ID 551\n--> Source:  tng-v4-HLS-auto-720-.m3u8 - tng-v4-HLS-auto-720-00000.ts\n--> Detail:  Track ID 551\n--> Source:  tng-v4-HLS-auto-720-.m3u8 - tng-v4-HLS-auto-720-00001.ts\n ...\nWarning: #EXT-X-ALLOW-CACHE has been deprecated\n--> Detail:  Line: #EXT-X-ALLOW-CACHE:YES\n--> Source:  tng-v4-HLS-auto-720-.m3u8\n...\nAnd the big buck bunny video:\nError: Measured peak bitrate compared to master playlist declared value exceeds error tolerance\n--> Detail:  Measured: 490.30 kb/s, Master playlist: 246.44 kb/s, Error: 49.74%\n--> Source:  http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8\n--> Compare: url_2/193039199_mp4_h264_aac_ld_7.m3u8\n...\nError: Format change without discontinuity tag detected\n--> Detail:  (null)\n--> Source:  url_2/193039199_mp4_h264_aac_ld_7.m3u8 - url_566/193039199_mp4_h264_aac_ld_7.ts\n...\nError: Different target durations detected\n--> Detail:  Target duration: 11 vs Target duration: 10\n--> Source:  url_4/193039199_mp4_h264_aac_7.m3u8\n--> Compare: url_2/193039199_mp4_h264_aac_ld_7.m3u8\n...\nMy video actually had less validation issues ...\nThe reference stream url plays perfectly in Chrome. its got to be something with my specific video.  (although my video plays fine in Safari and Firefox)\nI am going to try to see if I can re-transcode to see if there was some sort of fluke problem, also, i might try to force de-interlacing to see if that fixes it...\nWe can close it if you don't think its a bug, I don't know enough about how the player works to troubleshoot it.  Do you know where in the code I would start looking to try to see where it might be hanging up?\n. Actually im having the same issue at the hls.js demo page, im closing here and going to try on hls.js, Thanks for the help troubleshooting\n. Ok, Thanks!\n. As a workaround, you can add <div id=\"chrome_fix\"></div>\nbefore <div id=\"player-wrapper\"></div>\nand then add this to the script:\nplayer.on(Clappr.Events.PLAYER_PLAY, function() {\n    console.log(\"play\");\n    var d = document.getElementById('chrome_fix');\n    d.style.height = \"300px\";\n    setTimeout(function(){\n        d.style.height = \"0px\";\n    },1000);\n});\n. Ok, Thanks for letting me know about that Chrome \"Feature\" it was bugging the hell out of me not knowing what was going on.  I haven't tried hosting the flash files myself, I think I have some workarounds for now.\nSince this is a known issue, i'm closing\n. ",
    "sjlu": "572\nOn the other hand, for apps that are inline and/or part of a UIWebView, can we have an option to append webkit-playsinline=\"true\" to the video?\n. ping @towerz \nWith support from iOS Safari 10, can we add this in?\nhttps://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html\n. @tjenkinson change made\n. @tjenkinson #1094 \ud83d\udc4d \n. Glad to be of help @towerz \n. Possibly related to #1000 \n. As I was walking away, I was thinking exactly the same thing. Could also be a combination of the two - will make that change too.\n. Related to #1092 \n. Agreed, will change.\n. ",
    "Florinette": "Yay, great thanks!\nI think an https source should be referenced in the documentation though, I guess I'm not the only one having this kind of issue :)\n. ",
    "msinghms001": "flasHLS plugin (with aes-128 encrypted hls ) working great on PC but not working on mobile (i tested on android) . Please help on this!. ",
    "hounvs": "Issue is with the following class:\n[data-no-op] p[data-no-op-msg]\n. For Issue clappr#768\n. Sorry for the late response. I'll look into it tonight. I knew there had to be a better way\n. @leandromoreira I think I did it correctly. I've never squashed before and it took a few hours of manually fixing conflicts from every commit that was in any of the merge updates from clappr/master. Was there something I was doing wrong? I'm new to git but it seems odd that I had to resolve old conflicts\n. Is there any error showing in the console?\n. @djevo1, when you view the page in Chrome and Firefox, you should be able to pull up the Javascript console (Windows: Ctrl+Shift+i, Mac: CMD+Shift+i)\nIf you are seeing any error that says \"Access-Control-Allow-Origin\", it's a CORS issue and can be fixed by adjusting the headers on your streaming server. Firefox and Chrome have CORS enabled by default as a security measure whereas other browsers don't.\nI see that you're using Wowza like I am. This is what I used to fix the problem for me: https://streamroot.readme.io/docs/wowza-configuration\nLet me know if that was the issue\n. ",
    "djevo1": "Not sure how to view the console, hosting it on a wordpress site. Should i just ssh into it?\n---Sent from Boxer | http://getboxer.com\nOn January 19, 2016 at 9:00:20 AM EST, Leandro Moreira notifications@github.com wrote:@djevo1 since we're using hls.js (a js hls implementation) you might be facing CORS problems, anyway is there any error on your console as @hounvs asked you?  \u2014Reply to this email directly or view it on GitHub.             \n. Appears to work fine on there.\n. ",
    "ghaith-bash-imam": "Hi @tjenkinson  , unfortunately it is the same .\nBTW : orginal source it working fine !!!\ncant get what is deferences in my source \n\n\n. thanks , \ni did  https://github.com/dailymotion/hls.js/issues/197\n. @tjenkinson  dailymotion/hls.js#197 has been fixed :+1: \n. sure , thanks\n. ",
    "arikkrol1": "Same thing happens with master.\nThe only time the buffering event is being fired is on play start..\nAlso in firefox there is a different issue - the loader stays visible after play start.\n. Oh, I did use the one in the dist folder :)\nA link to the built version would be great. Thanks.\n. Works!! Thanks.\n. Thanks. \nThis works.\n. ",
    "GeorgySerga": "Found info about extra logging with Clappr.Log.setLevel(0). Here are the logs. I must admit that it seems like the playback stops on different fragments, this time chrome played the stream till 0:17.\nchrome_firefox_logs.zip\n. Well, \n- The http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 is working.\n- I can't play my media right at the demo page (CORs thing), but I have cloned their repo and - my video freezes. Right at the same fragments. Chrome demo shows Frag Loop Loading Error,cannot recover, last media error recovery failed ... Firefox console has two errors at the end: \n[error] > cannot recover fragLoopLoadingError error hls.js:6846:7\nReferenceError: event is not defined hls.js:692:15\n- I've tried this stream on my Android phone. It has some lags, but plays the stream from the start till the end.\n- It works with plugins: [Clappr.FlasHLS]. Though I must admit that the right click action doesn't show me the flash menu, console shows INFO:FlasHLS Clappr (version: 0.4.11 - flashls: 0.4.4.18, id: o12). I'm confused a little. \nThank you.\n. >  if you still think this is not something related to your input stream\nWell, at some point of course it's stream related, but I can play it with flashls, on my phone, in the vlc, etc, so it seems rather working )\nOk, thanks a lot for your help, one way or another, the issue is fixed with flashls. I'll open an issue at hls.js. Good luck!\n. @leandromoreira don't understand, the link to hls.js is right above your comment, in the reference. In case it isn't displayed: daylymotion/hls.js#205 . Or maybe you did want something else...\n\nthe same guy that did flashls did hls.js so this might be easy.\n\nThat was extremely easy :) You two answer super quickly!\n. As a hotfix I started to watch fullscreen class with setInterval(). Checked the clappr.js file and it looks like there is method enableResizeObserver with setInterval() too, so no sign of the proper listener here too.\n. Sure @flavioribeiro , I wanna try. I'll think of the way to do it and write my thoughts/questions here, or submit a PR itself to judge. Thank you.\n. I see. The in-browser play/pause that was mentioned by me above isn't real solution too: the playback is no longer than the last saved chunk - the moment it ends player jumps to the newly downloaded one. Technically, would browser allow saving chunk data into temp folder or this storage isn't big enough (must have some restrictions due to security reasons)? To me it looks like the difference between play and play/pause is piping stream on HDD when on pause and into browser, when play is enabled. If the pause had been pressed, then all the chunks end up at HDD at first, then processed by browser.. Yes, that's what I need, but no server-side DVR for me, I need to save all the data locally.. Interesting thing is as far as I understand Clappr is based on hls.js to play hls content and considering their demo page : http://dailymotion.github.io/hls.js/demo/ , hls.js can do this thing. Take the https://wowza.jwplayer.com/live/jelly.stream/playlist.m3u8 (provided above) link and insert it, start video, then press pause, chunks would load and their are available for watching later.. Yes, I was able to modify the js file to get caching behavior working. Also there is issue on browser buffering capacity for future reference: https://github.com/dailymotion/hls.js/issues/1030 .. ",
    "ibreakstuff93": "You're right, it's better with the CDN version. I'll update my local copy :+1: Thanks!\n. Thanks - i do try :) Any ideas how long it might take to resolve?\n. Can i just check i've understood correctly, we can only use the stop() and pause() events when using html5 playback, load() isn't supported?\n. @tjenkinson thank you for clarifying! I've just tried it again, but i'm still getting an error message in IE11. It's moved a few lines however this time...\n\n. \nThanks working now :+1: \n. Sorry for my stupid question, but will this fix get rolled up into the next release? (sorry, i'm still a newbie to github)\nOtherwise, I have AES128 encrypted HLS playing back reliably accross all modern browsers, apple, and android! :+1: You guys are the greatest.\n. That's great. Thank you!\n. I think a separate GA plugin would be great. Analytics are the key to content providers making money, and with GA being free - it would be great to exploit it for what it's worth! :)\n. Thanks @leandromoreira :+1: \n. Awesome @leandromoreira , and just to double check then, once video playback has begun, this sort of thing should be okay?\nplayer.listenTo(player, Clappr.Events.PLAYER_PLAY, function() { console.log(\"playing!\") });\n. I think reading a little closer, to detect when a user presses the play button, or when player.play() is called, I need to use:\nPLAYBACK_PLAY_INTENT\nplayer.on(Clappr.Events.PLAYBACK_PLAY_INTENT , function() { console.log(\"play initiated\")});\nHowever, this isn't working for me in the 0.2.63 tag version?\nThen, when video starts  playing, I can use:\nPLAYER_PLAY\nplayer.listenTo(player, Clappr.Events.PLAYER_PLAY, function() { console.log(\"playing!\") });\nwhich is currently working :) Could you tell me where i've gone wrong on the playback_play_intent?\n. @leandromoreira thank you! that's exactly what I was looking for and helps a lot!\n:+1: and + :100: points for log message :-)\n. @ipejasinovic sadly, that doesn't work either...\nIE:\n\nChrome:\n\n. @leandromoreira \ud83d\udc4d I had an older version of flash, but now running the latest I get the player load up properly! Should have checked this first, sorry! ( \ud83d\udc4e  for me!)\nThe issue I have now is, there is audio playback, but just a black playback (no pictures).\nThis is what seems to get me to the point of having a play button:\n```\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\nsource: \"http://somewhere.com/live.m3u8\",\nmimeType: \"application/vnd.apple.mpegurl\",\nheight: 360,\nwidth: 640,\nplugins: [Clappr.FlasHLS]\n});\nplayer.attachTo(playerElement);\n```\nThis gives me the following output:\n\nLooking in the network log, a \"MEDIA:12899\" error is being thrown first, but then the FlasHLS logs out the stats on the video,  and switches levels etc, so it's a bit weird.. I just tried it with that playlist, and I'm getting the same result as with my stream...\nAudio = \ud83d\udc4d \nVideo = \ud83d\udc4e \n. thanks @kslimani - i've given it a try with / without declaring the plugin explicitly, and you're right, it will detect if it needs the plugin or not which is super! \ud83d\udc83 \nThe console log might perhaps help? there's a close, followed by setting up the audio track. Could the close be on the video?\n\n. @kslimani still the same audio yes, but black playback, with the bar appearing if I hover over the area. \nI've checked my flash version, i'm using the latest: 25.0.0.171. And i've also done a few windows updates, so IE is now 11.0.9600.18665. It's absolutely fine on Win  8 & Win 10, just Win 7 for some unknown reason :(\n. ",
    "DavidVentura": "I'm experiencing this.. and it seems to download the (cached) file every time the live hls segment finishes (so, every 5 seconds). The problem is that all text on-screen flashes when new fonts are loaded (at least on firefox 44.0.2)\n\n. What's needed to finish the media control? Issues/etc? Can you link them here?\n. I meant to get the 'current' buffer size. When playing live HLS video you download chunks of the video, depending on network speed/etc your buffer is of a different size. So you are 'behind' the live stream by a certain time, I need to know the length of the buffer.\n. I was using 'bitdash' player before, it had access to this. How does this player know when it runs out of buffer? \n. hls.js shows it as \"last buffer\" here http://dailymotion.github.io/hls.js/demo/ .. I'm not sure how I would go about exposing this through clappr directly\n. First few errors. Note that the video PLAYS and works well\n```\n14:19:00.841 [debug][MediaControl] mediacontrol:notplaying clappr.min.js:10:29210\n14:19:00.842 [debug][MediaControl] mediacontrol:rendered clappr.min.js:10:29210\n14:19:00.917 [debug][Container] container:mediacontrol:disable clappr.min.js:10:29210\n14:19:00.919 [debug][t] core:containers:created clappr.min.js:10:29210\n14:19:00.936 [debug][hls] playback:ready hls clappr.min.js:10:29210\n14:19:00.937 [debug][Container] container:ready Container clappr.min.js:10:29210\n14:19:00.938 [debug][Container] container:volume 57 Container clappr.min.js:10:29210\n14:19:00.938 [debug][MediaControl] mediacontrol:notplaying clappr.min.js:10:29210\n14:19:00.961 [debug][MediaControl] mediacontrol:rendered clappr.min.js:10:29210\n14:19:00.979 [debug][Container] container:dvr false clappr.min.js:10:29210\n14:19:00.980 [debug][MediaControl] mediacontrol:hide MediaControl clappr.min.js:10:29210\n14:19:00.981 [debug][Container] container:mediacontrol:hide clappr.min.js:10:29210\n14:19:00.981 [debug][MediaControl] mediacontrol:containerchanged clappr.min.js:10:29210\n14:19:00.982 [debug][Container] container:volume 57 Container clappr.min.js:10:29210\n14:19:01.009 [debug][MediaControl] mediacontrol:notplaying clappr.min.js:10:29210\n14:19:01.010 [debug][MediaControl] mediacontrol:rendered clappr.min.js:10:29210\n14:19:01.029 [debug][e] 1:resize Object { width: 640, height: 360 } clappr.min.js:10:29210\n14:19:01.031 [debug][e] 1:resize Object { width: 640, height: 360 } clappr.min.js:10:29210\n14:19:01.035 [debug][t] core:ready clappr.min.js:10:29210\n14:19:01.035 [debug][t] ready clappr.min.js:10:29210\n14:19:01.227 [debug][Container] container:mediacontrol:disable clappr.min.js:10:29210\n14:19:01.606 [debug][hls] playback:levels:switch:end clappr.min.js:10:29210\n14:19:01.607 [debug][hls] playback:level:switch Object { level: 0 } clappr.min.js:10:29210\n14:19:01.608 [debug][hls] playback:highdefinitionupdate false clappr.min.js:10:29210\n14:19:01.609 [debug][Container] container:highdefinitionupdate false clappr.min.js:10:29210\n14:19:01.609 [debug][hls] playback:bitrate Object { height: undefined, width: undefined, bandwidth: undefined, bitrate: undefined, level: 0 } clappr.min.js:10:29210\n14:19:01.610 [debug][Container] container:bitrate Object { height: undefined, width: undefined, bandwidth: undefined, bitrate: undefined, level: 0 } clappr.min.js:10:29210\n14:19:01.839 [debug][hls] playback:settingsupdate clappr.min.js:10:29210\n14:19:01.839 [debug][Container] container:settingsupdate clappr.min.js:10:29210\n14:19:01.864 [debug][MediaControl] mediacontrol:notplaying clappr.min.js:10:29210\n14:19:01.865 [debug][MediaControl] mediacontrol:rendered clappr.min.js:10:29210\n14:19:01.897 [debug][hls] playback:levels:available Array [ Object ] clappr.min.js:10:29210\n14:19:04.163 [debug][hls] playback:bufferfull hls clappr.min.js:10:29210\n14:19:04.164 [debug][Container] container:state:bufferfull Container clappr.min.js:10:29210\n14:19:04.165 [debug][Container] container:mediacontrol:disable clappr.min.js:10:29210\n14:19:04.449 [debug][hls] playback:fragment:loaded Object { payload: ArrayBuffer, frag: Object, stats: Object } clappr.min.js:10:29210\n14:19:04.488 [debug][hls] playback:settingsupdate clappr.min.js:10:29210\n14:19:04.488 [debug][Container] container:settingsupdate clappr.min.js:10:29210\n14:19:04.517 [debug][hls] playback:loadedmetadata Object { duration: 24, data: loadedmetadata } clappr.min.js:10:29210\n14:19:04.519 [debug][Container] container:loadedmetadata Object { duration: 24, data: loadedmetadata } clappr.min.js:10:29210\n14:19:04.520 [debug][hls] playback:settingsupdate clappr.min.js:10:29210\n14:19:04.520 [debug][Container] container:settingsupdate clappr.min.js:10:29210\n14:19:04.526 [debug][MediaControl] mediacontrol:playing clappr.min.js:10:29210\n14:19:04.528 [debug][MediaControl] mediacontrol:rendered clappr.min.js:10:29210\n14:19:04.852 [debug][hls] playback:buffering hls clappr.min.js:10:29210\n14:19:04.853 [debug][Container] container:state:buffering Container clappr.min.js:10:29210\n14:19:04.854 [debug][Container] container:mediacontrol:disable clappr.min.js:10:29210\n14:19:04.920 [debug][hls] playback:bufferfull hls clappr.min.js:10:29210\n14:19:04.921 [debug][Container] container:state:bufferfull Container clappr.min.js:10:29210\n14:19:04.921 [debug][Container] container:mediacontrol:disable clappr.min.js:10:29210\n14:19:04.923 [debug][hls] playback:play clappr.min.js:10:29210\n14:19:04.923 [debug][Container] container:play Container clappr.min.js:10:29210\n14:19:04.924 [debug][Container] container:mediacontrol:enable clappr.min.js:10:29210\n14:19:04.925 [debug][MediaControl] mediacontrol:show MediaControl clappr.min.js:10:29210\n14:19:04.926 [debug][Container] container:mediacontrol:show clappr.min.js:10:29210\n14:19:04.926 [debug][MediaControl] mediacontrol:playing clappr.min.js:10:29210\n14:19:04.927 [debug][t] play clappr.min.js:10:29210\n14:19:06.099 TypeError: this.core is undefined\n clappr.min.js:8:21076\n14:19:06.555 [debug][hls] playback:fragment:loaded Object { payload: ArrayBuffer, frag: Object, stats: Object } clappr.min.js:10:29210\n14:19:06.928 [debug][MediaControl] mediacontrol:hide MediaControl clappr.min.js:10:29210\n14:19:06.929 [debug][Container] container:mediacontrol:hide clappr.min.js:10:29210\n14:19:07.747 [debug][hls] playback:fragment:loaded Object { payload: ArrayBuffer, frag: Object, stats: Object } clappr.min.js:10:29210\n14:19:07.806 [debug][hls] playback:settingsupdate clappr.min.js:10:29210\n14:19:07.807 [debug][Container] container:settingsupdate clappr.min.js:10:29210\n14:19:08.112 [debug][hls] playback:settingsupdate clappr.min.js:10:29210\n14:19:08.114 [debug][Container] container:settingsupdate clappr.min.js:10:29210\n14:19:08.120 [debug][hls] playback:levels:available Array [ Object ] clappr.min.js:10:29210\n14:19:09.182 [debug][hls] playback:fragment:loaded Object { payload: ArrayBuffer, frag: Object, stats: Object } clappr.min.js:10:29210\n14:19:09.357 [debug][hls] playback:settingsupdate clappr.min.js:10:29210\n14:19:09.358 [debug][Container] container:settingsupdate clappr.min.js:10:29210\n14:19:09.930 [debug][Container] container:stats:report Object { startupTime: 64, rebuffers: 1, rebufferingTime: 0, watchingTime: 5003, level: 0 } clappr.min.js:10:29210\n14:19:11.099 TypeError: this.core is undefined\n```\n. I get this error on a livestream, playlist generated by nginx-rtmp. Other\nplayers (such as mpv) can play the .m3u8 playlist just fine and they don't\ncomplain about it being malformed\nOn 24 April 2016 at 12:09, Leandro Moreira notifications@github.com wrote:\n\nI think it's because if I never faced such thing and if you use a stable\nstream of hls (http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8)\nyou probably will not be able to reproduce the same error. (I could not)\nWhat's the source are you using to generate this hls? (rtmp, mp4... is it\nin your hand? can you run a mediainfo or any other tool to help understand\nthe problems with this input??)\nI don't know much of wowza to help you though.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/clappr/clappr/issues/930#issuecomment-213981201\n\n\nStack is the new term for \"I have no idea what I'm actually using\".\n. Can you test with this live stream? I'm seeing the 'bug' with clappr.\nhttps://plataforma.especificosba.com.ar/hls/test.m3u8\nIt'll be up for about one hour and a half, after that I can reset it if you ask.\nThe playlist seems fine.\n```\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-MEDIA-SEQUENCE:38\nEXT-X-TARGETDURATION:15\nEXT-X-DISCONTINUITY\nEXTINF:9.985,\ntest-38.ts\nEXT-X-DISCONTINUITY\nEXTINF:9.985,\ntest-39.ts\n```\nTesting on hls.js I see 'gaps' between segments. On every gap the bug occurs, I can manually skip ahead of the gap and the video works\n\n. Looks like it has something to do with the hls.js version being used.\nhttps://github.com/dailymotion/hls.js/issues/407#issuecomment-214815377\nCan you upgrade hls.js to 0.6.1 on clappr?\n. ",
    "Tkamiya": "Sorry for my late reply...\nAnd thank you, I confirmed it works properly.\nPlz close this case.\n. Hi @towerz,\nThank you for your information.\nI added your information to parent element.\nI can see it works properly on my laptop.\nBut if I access via my smartphone, then player is still protruded like attached picture file.\nYou can see the red selected area in this picture file.\n\nI expect that the player resolution is changed automatically by each devices.\n. ",
    "mattwa1sh": "Hi-- \nI'm not seeing this work for me. Very simple setup:\nhttp://admin.blivenyc.com/public/examples/clappr_test.html\nfor which the relevant code is \n```\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://admin.blivenyc.com/clip-conversion/v3-blive-public-us-east-1/video/001600-005788-pr_9ki4/desktop-playlist.m3u8',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\nvar onHlsFragChanged = function(e, data) { console.log(data.frag.url) };\nplayer.core.getCurrentPlayback().hls.on('hlsFragChanged', onHlsFragChanged);\n```\nError is : \nTypeError: Cannot read property 'on' of undefined\nAny thoughts?\nThanks,\nMatt. Yes! Thanks I just noticed that error. While we're on the topic, does anyone know how to get the current position of that play head within the segment? Like, we're 4.2 second into segment-0432.ts? . Right. Okay, I think I have a similar approach, but it takes into account a certain timing-related wonkiness I've noticed. On frag change I am recording the playheadTime along with data associated with the fragment, like so:\nSEGMENT : https://video.blivenyc.com/001600-005788-pr_9ki4/file-4628k-00001.ts\n5788:209 SEG START : 8.017733333333334\n5788:210 PLAYHEAD : 7.674212\n5788:211 OFFSET: -0.34352133333333423\n5788:208 SEGMENT : https://video.blivenyc.com/001600-005788-pr_9ki4/file-4628k-00002.ts\n5788:209 SEG START : 16.0054\n5788:210 PLAYHEAD : 15.674677\n5788:211 OFFSET: -0.33072300000000077\n5788:208 SEGMENT : https://video.blivenyc.com/001600-005788-pr_9ki4/file-4628k-00003.ts\n5788:209 SEG START : 24.016277777777777\n5788:210 PLAYHEAD : 23.675884\n5788:211 OFFSET: -0.340393777777777\nNow, the first crazy thing is that the playhead time is ahead of the segment start recorded in the fragment data. If I fire the event on frag changed, and map the playhead to segment start differential, I can query the playhead time later in the fragment and know my \"offset\". I think this will give me what I want just by using the fragment data and playhead time.\nM. So in this case, if the playhead is 27,  position in fragment would be:\n27 - 24.016 - (offset = -.34) = 3.324\nI think thats right.... Possibly.. ",
    "sc0rp10": "ohh, sorry for stupid question. i tried chromeless: true, but in my test setup auotoplay has been disabled  and without autoplay chromeless Clappr won't play =/\n. logs:\n[debug][hls] playback:bitrate Object {height: 1080, width: 1920, bandwidth: undefined, bitrate: 1301000, level: 0}\n[debug][hls] playback:settingsupdate\n[debug][hls] playback:levels:available [Object]\n[debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\n[debug][hls] playback:settingsupdate\n[debug][hls] playback:loadedmetadata Object {duration: 4676.889968, data: Event}\n[debug][hls] playback:settingsupdate\n[debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\n[debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\n[debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\n[debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\n[debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\n. @leandromoreira not playing too.\n. @leandromoreira not playing too.\n. ",
    "Det20": "What can i do in mobile mode (mobile devices)? AutoStart doesn't work. If i set Chromeless to true the Player never start. Set useHardwareVideoDecoder to true or false doesn't change this. What can i do remove Controlbar?\n. ",
    "jlmcdonald": "@leandromoreira I just did this myself last night on a local copy of this repo ... the \"presets\" option is only available in Babel 6.x, so it will require updating Babel (and possibly updating places where Babel is required in the Clappr code)\n. Yeah ... Babel 6 loaders require a bit different way to handle extending of imported classes; to avoid needing to rewrite a lot of it, though, there's the plugin \"babel-plugin-add-module-exports\" -- installing it and initializing it via .babelrc in main folder will allow Babel 6 to handle the same syntax that Babel 5 did. I just submitted a pull request that provides all the necessary changes (it successfully passes all tests and builds a new deployment)\n. If you pull the raw src branch, you have to navigate into the hls.js folder (inside node_modules) and run 'npm run build' in there first ... this creates the ./lib folder and included libraries that Clappr looks for when building.\n. ",
    "ryanwilliams83": "Hi Leandro,\nI have investigated this problem further and have tracked it down to the flashls code of mangui. The problem occurs when mangui takes the relativeUrl found in a .m3u8 file and converts it into an absoluteUrl in order to download it using a URLLoader.\nAt present the code does string manipulation on the URL of the initial .m3u8 playlist to determine the baseURL and subsequently the absoluteUrl of the any dependent resources.\nIn the event that the initial .m3u8 playlist URL performes a redirect to an alternate domain and/or document path the \u2018redirectedURL\u2019 is not captured or used by the calculations performed by mangui\u2019s code. Hence the relativeUrl\u2019s provided in the .m3u8 playlist served by the CDN are not honoured.\nYour suggestion of using absolute url\u2019s inside the .m3u8 playlist is a good solution however I am planing to submit a pull request to mangui to fix the root of the problem in the comming days.\nBy subscribing to the HTTPStatusResponse event in flash I should be able to capture the 301 or 302 redirect if it occurs. Then it\u2019s just a matter of capturing the redirectedUrl and optionally using it in the calculations instead.\nWarm Regards \nRyan Williams\nFrom: Leandro Moreira [mailto:notifications@github.com] \nSent: Thursday, 11 February 2016 00:38\nTo: clappr/clappr\nCc: Ryan Williams\nSubject: Re: [clappr] Flash version not honouring 302 redirect. (#833)\nHi @ryanwilliams83 https://github.com/ryanwilliams83  if I understood correctly I think since the player is embed at your domain it'll try to download the relative paths from your domain, am I right @mangui https://github.com/mangui  ?\nOne thing you could do is to provide a playlist with full path.\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-PLAYLIST-TYPE:VOD\nEXT-X-TARGETDURATION:11\nEXTINF:10.000,\nhttps://xxx.amazonaws.com/url_462/193039199_mp4_h264_aac_hd_7.ts\nEXTINF:10.000,\nhttps://xxx.amazonaws.com/url_463/193039199_mp4_h264_aac_hd_7.ts\n\u2014\nReply to this email directly or view it on GitHub https://github.com/clappr/clappr/issues/833#issuecomment-182379938 .  https://github.com/notifications/beacon/ADsSGLlPD9YD9cqKOB9F4NSLHEJTIPg-ks5pizSjgaJpZM4HXEu9.gif \n. I was not able to create a fix for the flash version because the useRedirectedURL method of an URLRequest object does not appear to be implemented  in IE11 (Flash Player 20) even though it's documented.\nhttp://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/net/URLRequest.html#useRedirectedURL()\nhls-js looks neat, I'm going to try it out now.\n. This bug still exists, \nif the .m3u8 playlist contains relative URL's\n&& the .m3u8 playlist is loaded from a script that does a HTTP redirect \n&& the redirect points to a different domain or document path \n&& the browser != chrome\nThe client (hls-js or flashls) will attempt to load the secondary .m3u8 playlist and/or the segments from the original .m3u8 (script) base url instead of the redirected base url.\nI have been unable to resolve this problem so I'm going with the workaround of using absolute url's in my .m3u8 playlists (going forward) and will write a proxy script to rewrite relative url's to absoltue url's for my back catalog. \n. ",
    "its27": "It does appear to go back to the live point, however the live marker then jumps back on the timeline every time a new chunk is loaded. If you load the player and dont pause the video the live marker stays right at the end of the timeline. I also note that HLS.JS correctly shows a 30 second timeline (I have a 30 second playlist, and 10 second chunks) however flash shows a 20 second timeline (allways seems one chunk behind).\nThanks,\n. Hi,\nHLS.js itself works fine when inside the iframe, it must be clappr related.\nhttp://46.101.5.207/embed.html\nPlease let me know if you need anything else from me?\nThanks,\n. Is this using a newer version of HLS.js than clappr 0.2.35?\n. I had to remove the HLS.js test link above, I can setup another test if required though.\n. ",
    "mikeevstropov": "@leandromoreira Thank you for answer. But i need replace player ui by my template. It's tutorial real right way?\n. @leandromoreira Sorry for my bad eng. Last example look like what i want. But extend is not defined in MediaControl. I use video.js and videojs-contrib-hls plugin. But m3u8 stream with videojs is very bad solution for production (amazing huge bugs). I trying set my vjs payer template into Clappr.\n. Wow, it is not working too...\n`` javascript\n\"use strict\";\nvar element = document.getElementById( 'player' );\nclass MyMediaControl extends Clappr.MediaControl {\n    get template() {\n        return Clappr.template(\n\n\n                    Where is this string??? Wtf?\n                \n\n            `\n        )\n    }\n    get stylesheet () {\n        return Clappr.Styler.getStyleFor(\n            '.media-control-background { background: red }'\n        )\n    }\n    constructor(options) {\n        super(options);\n    }\n}\nvar player  = new Clappr.Player({\n    'source'        : src,\n    'width'         : 400,\n    'height'        : 250,\n    'mediacontrol'  : MyMediaControl\n});\nplayer.attachTo(element);\n```\nNo errors or warnings on console. I see default template without any modification.\n. @leandromoreira No. http_://cp.moonplayer.ru/serial/e40589935fd708c44147d1339c0c53c5/iframe\n. @tjenkinson Ok. No ideas?\n. @lucasmundim Yes, I did it yesterday. And i can't see any errors. I show it in last link.\n. @lucasmundim \"Create an entire new Media Control\"\nIn my last example I was expecting in control panel will be a \u00abWhere is this string ??? Wtf?\u00bb without default buttons. Yes, I want to completely replace the control panel to my custom html.\nSubject:\n1. I have vjs player http://warnerfilm.ru/online/sotnya (sorry for ad)\n2. I want replace vjs player to clappr, but i need save my player template.\n3. In this page http://cp.moonplayer.ru/serial/e40589935fd708c44147d1339c0c53c5/iframe only for test i try to replace all Media Control to this words: \u00abWhere is this string ??? Wtf?\u00bb (by example on main page on Github).\n. > should be an object containing\n``` javascript\nclass MyMediaControl extends Clappr.MediaControl {\n    get template()       { return 'DAMN!!!' }\n    get stylesheet()     { return 'body { background: red !important }' }\n    constructor(options) { super(options); }\n}\nvar player  = new Clappr.Player({\n    'source'        : src,\n    'width'         : 500,\n    'height'        : 250,\n    'mediacontrol'  : new MyMediaControl\n});\nplayer.attachTo(element);\n// !!! Cannot read property 'persistConfig' of undefined in media-control.js 71\n```\nand\n``` javascript\nvar MyMediaControl = Clappr.Utils.extend(Clappr.MediaControl, {\n    get template (){ return 'DAMN!!!!'; }\n});\n// !!! Cannot set property template of # which has only a getter\n```\nOkay. I need rewrite clappr/src/components/media_control/public/media-control.html in source, and try to setup npm on windows...\n. Sorry. I closed issue because I think we have only one way to edit the Media control. I mean we should work with source code.\n. @jasonbodily \njavascript\nvar clapprTemplate = Object.getOwnPropertyDescriptor(Clappr.MediaControl.prototype, 'template');\nclapprTemplate.get = function () {\n    return Clappr.template(`<div>Tada!</div>`);\n};\nObject.defineProperty(Clappr.MediaControl.prototype, 'template', clapprTemplate);\ndefault string: https://github.com/clappr/clappr/blob/master/src/components/media_control/public/media-control.html\n\nPut it before create Clappr object. Maybe it will be helpfull.\n. @towerz Wow! Thank you! We can close this issue.\n. Hi. I cant find event too.\nBut i put my code into string property. Like this:\njavascript\nplaybackNotSupportedMessage :\n    \"Your browser does not support the playback.<script>myEvent()<\\/script>\"\nIf someone know right way please show example.\n. I did not notice that we have different properties.\njavascript\nsource: 'string'\nsources: ['array']\n. @tjenkinson Hi. It's not working too...\nplayer.on(Clappr.Events.MEDIACONTROL_HIDE, function() { console.log(\"Hide\") })\nThis event will fire when mouseover on player container?\n. Property \"player.on\" can't bind MEDIACONTROL_HIDE event. It's work:\njavascript\nplayer.listenTo(\n    player.core.mediaControl,\n    Clappr.Events.MEDIACONTROL_HIDE,\n    function(){console.log('abc')}\n);\n. @leandromoreira Yes. Thank you.\n. Hi. You should put inside the folder with Clappr assets ttf, svg, swf, etc this .htaccess file:\nhtaccess\n<FilesMatch \"\\.(ttf|swf|svg|cur|eot|js|map)$\">\n  <IfModule mod_headers.c>\n    Header set Access-Control-Allow-Origin \"*\"\n  </IfModule>\n</FilesMatch>\n. Thank you all!\n. Okay... Now i'm using \"\u0441apturing\" propagation.\njavascript\nvar player_onplay = function (e) {\n    // prevent poster event\n    e.stopPropagation();\n    // force buffering (if you want)\n    player.play();\n    player.pause();\n    // remove this event\n    player.removeEventListener('click', player_onplay, true);\n    /* do some instead play */\n}\nelement.addEventListener('click', player_onplay, true);\nIf someone have right way, please welcome.\n. @towerz Sorry, what i can do now? Maybe this problem with cache or some else?\n. @leandromoreira @towerz Thank you all!!! I will try it now.\nAnd yes, i have \u00abhost\u00bb parameter for query...\n. @leandromoreira Ok.\n. @leandromoreira @towerz Issue was solved =) You saved my life!!!\np.s. For build i just write \"npm install\" and \"webpack\". What happend with icons?\n\n\n\n. @towerz Ok.\nBut i do it right? Download master-zip -> 'npm install' -> 'webpack'.\n``` console\nmike@intel ~/WEB/nodejs/github/clappr $ webpack\nHash: 831330a6526e447f3e9c\nVersion: webpack 1.12.14\nTime: 23211ms\n                               Asset       Size  Chunks             Chunk Names\na8c874b93b3d848f39a71260c57e3863.cur  326 bytes          [emitted]\n4b76590b32dab62bc95c1b7951efae78.swf     3.2 kB          [emitted]\nd218edf766218c19b416107bfb05ef0f.swf      63 kB          [emitted]\n38861cba61c66739c1452c3a71e39852.ttf    32.7 kB          [emitted]\n                           clappr.js     904 kB       0  [emitted]  main\n    + 157 hidden modules\n```\n. @towerz Thank you for answer!\nMaybe we have other(dirty) way without query on server?\nOh, sorry for my bad eng.\nI'm always use hls by default, and i want to check if browser cant playing without FlasHLS.\n. I found! It's so simple...\njavascript\nplayer.getPlugin('flashls') && console.log(\"Browser can't playing without FlasHLS\");\n. @towerz Okay. I understood about canPlay.\nThe main reason for the search is the problem with buffering.\nI placed a banner to the player. It's look like a preroll. When user clicks to \"play\" the player has start buffering and show ad. Second click on the \"close ad\" the player will hide banner and starts playing.\njavascript\nfunction startBufferingAndShowAd (e) {\n     e.stopPropagation();\n     player.play(); player.pause(); // start buffering\n     playerContainer.removeEventListener('click', startBufferingAndShowAd, true);\n     showBanner();\n}\nplayerContainer.addEventListener('click', startBufferingAndShowAd, true)\nBut player.pause(); is not working when the Clappr uses FlasHLS plugin.\nI want to start buffering, if this is possible without any trouble:\njavascript\n!player.getPlugin('flashls') && (player.play(), player.pause())\n. @towerz  I use VoD stream, and trouble with pause() only on FlasHLS plugin.\nhlsMinimumDvrSize property can help for VoD on my issue?\n. @towerz Ok. Thank you too! Now I can catch the error.\n. And. When player.play is calling after CONTAINER_LOADEDMETADATA event, it works correctly.\njavascript\nplayer.play();\nplayer.listenToOnce(\n    player.core.getCurrentContainer(),\n    Clappr.Events.CONTAINER_LOADEDMETADATA,\n    function () { player.pause() }\n);\n. Not pure way but MEDIACONTROL_PLAYING event will fire after mediacontrol is ready.\n. @leandromoreira Okay. Thank you.\nIf it's right way we can close issue.\n. @leandromoreira Sorry, ofcource\nhttp://cdn.clappr.io\n``` javascript\nClappr.Log.setLevel(0);\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://clappr.io/highline.mp4',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\n```\nAll what i see. No warns or errors\nconsole\nclappr.js:2262 [debug][MediaControl] mediacontrol:notplaying\nclappr.js:2262 [debug][MediaControl] mediacontrol:rendered\nclappr.js:2262 [debug][Container] container:mediacontrol:disable\nclappr.js:2262 [debug][Core] core:containers:created\nclappr.js:2262 [debug][no_op] playback:ready no_op\nclappr.js:2262 [debug][Container] container:ready Container\nclappr.js:2262 [debug][Container] container:volume 0 Container\nclappr.js:2262 [debug][MediaControl] mediacontrol:notplaying\nclappr.js:2262 [debug][Container] container:dvr false\nclappr.js:2262 [debug][MediaControl] mediacontrol:hide MediaControl\nclappr.js:2262 [debug][Container] container:mediacontrol:hide\nclappr.js:2262 [debug][MediaControl] mediacontrol:containerchanged\nclappr.js:2262 [debug][Container] container:volume 0 Container\nclappr.js:2262 [debug][MediaControl] mediacontrol:notplaying\nclappr.js:2262 [debug][MediaControl] mediacontrol:rendered\nclappr.js:2262 [debug][Events] 2:resize Object {width: 640, height: 360}\nclappr.js:2262 [debug][Core] core:ready\nclappr.js:2262 [debug][Player] ready\nclappr.js:2262 [debug][Container] container:destroyed Container {_options: Object, uniqueId: \"o14\", cid: \"c6\", $el: X[1], el: div.container\u2026} Container\nclappr.js:2262 [debug][Container] container:stats:report Object {startupTime: 0, rebuffers: 0, rebufferingTime: 0, watchingTime: NaN}\nclappr.js:2262 [debug][MediaControl] mediacontrol:notplaying\nclappr.js:2262 [debug][MediaControl] mediacontrol:rendered\nclappr.js:2262 [debug][Container] container:mediacontrol:disable\nclappr.js:2262 [debug][Core] core:containers:created\nclappr.js:2262 [debug][no_op] playback:ready no_op\nclappr.js:2262 [debug][Container] container:ready Container\nclappr.js:2262 [debug][Container] container:volume 0 Container\nclappr.js:2262 [debug][MediaControl] mediacontrol:notplaying\nclappr.js:2262 [debug][Container] container:dvr false\nclappr.js:2262 [debug][MediaControl] mediacontrol:hide MediaControl\nclappr.js:2262 [debug][Container] container:mediacontrol:hide\nclappr.js:2262 [debug][MediaControl] mediacontrol:containerchanged\nclappr.js:2262 [debug][Container] container:volume 0 Container\nclappr.js:2262 [debug][MediaControl] mediacontrol:notplaying\nclappr.js:2262 [debug][MediaControl] mediacontrol:rendered\nclappr.js:2262 [debug][Events] 3:resize Object {width: 640, height: 360}\nclappr.js:2262 [debug][Core] core:ready\nclappr.js:2262 [debug][Player] ready\nclappr.js:2262 [debug][Container] container:destroyed Container {_options: Object, uniqueId: \"o34\", cid: \"c15\", $el: X[1], el: div.container\u2026} Container\nclappr.js:2262 [debug][Container] container:stats:report Object {startupTime: 0, rebuffers: 0, rebufferingTime: 0, watchingTime: NaN}\n. @leandromoreira right, and HLS too\n. ",
    "jasonbodily": "I have the same concerns as mikeevstropov, namely I would like to implement a custom mediacontrol but have the same errors as were reported. Is there a reason this issue was closed? Was there a resolution?The example on the home page doesn't work and if at all possible should be updated to a working example. Thanks ~\n. ",
    "TonyDobbs": "@tjenkinson Ah, that's unfortunately what I suspected. I'm under the impression that hls.js supports this functionality, so it might be worth adding this feature. Thanks for the info!\n. ",
    "renatoferreirarenatoferreira": "Yes, mike. It fixed the error with the font-face. Thanks! I use NGINX instead, so I simply added add_header Access-Control-Allow-Origin *; for the player location.\nBut the javascript problem is still happening and now I suppose I know why. Lets go:\nI'm using the relative URL: /live/test/index.m3u8\nAnd you use the following javascript code to parse the URL:\nvar baseURLDomainSplit = /^((([a-z]+):)?\\/\\/[a-z0-9\\.-]+(:[0-9]+)?\\/)(.*)$/i.exec(baseURL);\nWhen the hostname is not present in the URL this code does not work as expected, and then the following line refers to a null pointer (array out of bound.. whatever):\nvar baseURLProtocol = baseURLDomainSplit[3];\nOtherwise, the player worked perfectly using the full URL: http://192.168.0.215/live/test/index.m3u8\nWhat I cannot explain is why it's happening only with IE11. My suggestion is not a real solution, but only a workaround. But this case is finished for me anyway.\nThank-you! :+1:\n. I was testing the player with a live stream, so I have a very simple playlist:\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-MEDIA-SEQUENCE:3110\nEXT-X-TARGETDURATION:2\nEXTINF:2.000,\n3110.ts\nEXTINF:2.000,\n3111.ts\nEXTINF:2.000,\n3112.ts\n. I'm using this: http://192.168.0.215/live/test/index.m3u8. But its pointing to a test virtual machine that I'm using for development. I don't have a public server yet.\n. ",
    "cmagnuson": "Sorry, after more testing this may be an issue with the Safari video player.  I see that setting currentTime = x on it only works some of the time, and it looks like Clappr is using the same method to update the time.\nI'm not sure why Safari isn't respecting the seek, but might not be a Clappr/HLS issue after all.\n. ",
    "lordcris": "Here is my test url:\nhttp://alleanza2016.mediamaking.com/vod/alleanza-vod-clappr-testing.php\n. Yes I do.\nIt works with mp4 files, but it doesn't with m3u8 (hls stream)\nOn Thu, 12 May 2016 at 02:06, Leandro Moreira notifications@github.com\nwrote:\n\n@lordcris https://github.com/lordcris it's working fine, I tested with:\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://clappr.io/highline.mp4',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640,\n  autoPlay:true\n});\nplayer.attachTo(playerElement);\nsetTimeout(function(){player.seek(25)},4000)\nAre you still facing this issue?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/clappr/clappr/issues/860#issuecomment-218616113\n. Are you testing on an Iphone?\n\ngo here:\nhttp://testing.atanassov.net/\nclick one of the buttons on the bottom ex \"page 1\"\nit starts playing frome sec 0 instead from 15.\nif you exit the video and press it again it goes to 15.\nbut the first time it always start from 0.\n. can I use \"autoSeekFromUrl\" for different times, without reloading the page?\nI'm using player.seek(X) to create time markers to different points in the video.\nIt works well on Desktop and Android, but on iOS it goes to sec 0 the first time.\n. This happens for me as well ( Chrome on Arch linux)\nI'm using wowza with DVR enabled.\n\n. I can't.\nIt works fine on http://dailymotion.github.io/hls.js/demo/ \nUsing clappr this issue presents itself once I try and and click on random point on the timeline.\nIf you give me an exact time I will be happy to provide you with a testing stream.\n. yes, they do.\nI've made a test page http://testing.atanassov.net/\nOnce the video is playing you have to click on the timeline back and forth multiple times and the \"HD\" indicator will start flashing and the player will start downloading the same segments over and over again.\n. Great catch!\nI fixed the malformed playlist but unfortunately the error keep appearing.\n\n. I see. It's a stream generated using wowza media server. Do you think it's related?\n. this is the mediainfo of the file\nmediainfo Youre.the.Worst.S01E10.Fists.and.Feet.and.Stuff.1080p.WEB-DL.DD5.1.H.264-NTb.mkv \nGeneral\nUnique ID                                : 184771822280485480539114549867318716125 (0x8B01C22FBC7F258E96D767597725A6DD)\nComplete name                            : Youre.the.Worst.S01E10.Fists.and.Feet.and.Stuff.1080p.WEB-DL.DD5.1.H.264-NTb.mkv\nFormat                                   : Matroska\nFormat version                           : Version 4 / Version 2\nFile size                                : 1 004 MiB\nDuration                                 : 26mn 23s\nOverall bit rate                         : 5 318 Kbps\nEncoded date                             : UTC 2014-09-19 08:26:52\nWriting application                      : mkvmerge v6.9.1 ('Blue Panther') 64bit built on Apr 18 2014 18:23:38\nWriting library                          : libebml v1.3.0 + libmatroska v1.4.1\nCover                                    : Yes\nAttachments                              : small_cover.jpg / cover.jpg / cover_land.jpg / small_cover_land.jpg\nReleased by                              : BLiN@BTN/HDB\nVideo\nID                                       : 1\nFormat                                   : AVC\nFormat/Info                              : Advanced Video Codec\nFormat profile                           : High@L4\nFormat settings, CABAC                   : Yes\nFormat settings, ReFrames                : 4 frames\nCodec ID                                 : V_MPEG4/ISO/AVC\nDuration                                 : 26mn 23s\nBit rate                                 : 4 828 Kbps\nWidth                                    : 1 920 pixels\nHeight                                   : 1 080 pixels\nDisplay aspect ratio                     : 16:9\nFrame rate mode                          : Constant\nFrame rate                               : 23.976 (24000/1001) fps\nColor space                              : YUV\nChroma subsampling                       : 4:2:0\nBit depth                                : 8 bits\nScan type                                : Progressive\nBits/(Pixel*Frame)                       : 0.097\nStream size                              : 911 MiB (91%)\nDefault                                  : Yes\nForced                                   : No\nColor range                              : Limited\nColor primaries                          : BT.709\nTransfer characteristics                 : BT.709\nMatrix coefficients                      : BT.709\nAudio\nID                                       : 2\nFormat                                   : AC-3\nFormat/Info                              : Audio Coding 3\nMode extension                           : CM (complete main)\nFormat settings, Endianness              : Big\nCodec ID                                 : A_AC3\nDuration                                 : 26mn 23s\nBit rate mode                            : Constant\nBit rate                                 : 384 Kbps\nChannel(s)                               : 6 channels\nChannel positions                        : Front: L C R, Side: L R, LFE\nSampling rate                            : 48.0 KHz\nFrame rate                               : 31.250 fps (1536 spf)\nCompression mode                         : Lossy\nDelay relative to video                  : -25ms\nStream size                              : 72.5 MiB (7%)\nLanguage                                 : English\nDefault                                  : Yes\nForced                                   : No\nText\nID                                       : 3\nFormat                                   : UTF-8\nCodec ID                                 : S_TEXT/UTF8\nCodec ID/Info                            : UTF-8 Plain Text\nLanguage                                 : English\nDefault                                  : Yes\nForced                                   : No\nI send it to wowza using this command:\nffmpeg -re -i Youre.the.Worst.S01E10.Fists.and.Feet.and.Stuff.1080p.WEB-DL.DD5.1.H.264-NTb.mkv  -vcodec libx264 -preset veryfast -maxrate  5000k -bufsize 10000k  -acodec aac -b:a 128k  -strict -2 -flags +global_header  -g 48 -f flv   \"rtmp://_:_@wowza2.atanassov.net:1935/myliveorigin/mystream\"\nthen the mediaserver transrates it in the stream you are seeing ( with the DVR option enabled)\n. I had a similar problem when using the DVR option.\nI increased the durations of the chunks of the dvr stream from 1500ms to 10000ms and now it's working fine.\n. ",
    "dovematrix": "Has there been any progress on this issue?  The WAVE extension, http://wave.webaim.org/extension/, for the Google Chrome browser reports three accessibility errors.  The play/pause, full screen, and another button does not have descriptive text.\n. clappr chrome issue - code.txt\n. That would be great. Thanks.\nOn Wed, Oct 26, 2016 at 11:35 AM, Ian Schweer notifications@github.com\nwrote:\n\nHey @dovematrix https://github.com/dovematrix,\nis this something I might be able to work on?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/clappr/clappr/issues/1186#issuecomment-256405686, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABA5kAQr5ygRRFgPGcThD9t-nt98-10oks5q34FtgaJpZM4KbGsz\n.\n. \n",
    "canny-wasp": "@ikkebr I did it - https://gist.github.com/vix-simplex/94ed1e3462b67561a33e384a878c4d3e\n(update 2016.09.05) Added check on empty playlist.\n. https://github.com/vix-simplex/clappr-vast-ad-plugin\nVery raw, but works. Few week and this will finished. I'm not fronted-dev, so excuse me for awful code.  Very soon I make all good (hope).\n. @leandromoreira oh, huge thanks, on Gitter nobody tells me with me :(  I will ask soon several questions.\n. @leandromoreira \non Ubuntu (flash disabled in all cases): \n Chrome 55.0 - OK\n Opera 42.0 - don't work\n* Firefox 50.1.0 - work with \"Invalid URI. Load of media resource  failed.\" error in console.\non Windows:\n Firefox -  work with \"Invalid URI. Load of media resource  failed.\" error in console.\n no ability testing in another browsers right now\nError in Firefox appears even if just click on \"run\" button without changing source.\nWith http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 error appears.\n. @leandromoreira no, in Chrome this work without errors.. @todd-g If I right understand you problem - here is my solution. After declaration player i have some code. It checks, play stream correctly on not, and if not, try start stream every 12 seconds (var z value).\nDon't forget change source for test in player variable! \nhttps://gist.github.com/vix-simplex/5ed92786745e89ee86d4921885997a4b\n. @kslimani How we can influence on this things? . @leandromoreira \nI did. Steps (to make sure I do everything right):\n git clone https://github.com/clappr/clappr.git\n cd clappr\n npm install\n git checkout update_zepto_005\n npm run start\n open http://192.168.0.74:8080/webpack-dev-server/ in my Chrome in Android by wifi (192.168.0.74 - IP my desktop in local network, phone and desktop in same local network)\n* problem is reproduced - when fullscreen playing I clicked on player and fullscreen closes.. @kslimani I run \"npm intsall\" arter changing branch and received TypeError: f is undefined too.. @leandromoreira I confirm \"twice clicks for pause\", I reproduce this behavior too.. @leandromoreira Yes, you are right. I'm renamed repo and name (Ad plugin -> VAST Ad plugin) in doc/EXTERNAL_PLUGINS.md\n. ",
    "kolpax": "When I say the end of the stream I mean until the playlist file contains the line #EXT-X-ENDLIST\nThere are no logs in the dev tools console (except for the 'webkitMovementX' is deprecated warning), do I need to enable verbose logging somehow?\n. The are not setting the #EXT-X-PLAYLIST-TYPE:EVENT but as far as I can see you don't check for that tag anywhere anyway so it should be the same: \nThis is what the playlist file looks like:\n```\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-ALLOW-CACHE:YES\nEXT-X-TARGETDURATION:4\nEXT-X-MEDIA-SEQUENCE:0\nEXTINF:2.000000,\nfile_000000.profile.ts\nEXTINF:3.560000,\nfile_000001.profile.ts\nEXTINF:0.880000,\nfile_000002.profile.ts\nEXTINF:2.000000,\nfile_000003.profile.ts\nEXTINF:3.400000,\nfile_000004.profile.ts\nEXTINF:0.980000,\nfile_000005.profile.ts\nEXT-X-ENDLIST\n```\nI will send a log shortly.\n. Here is the log with the glitch occurring almost immediately after playback started of a 1 minute file:\nclappr.js:2964 [debug][MediaControl] mediacontrol:notplaying\nclappr.js:2964 [debug][MediaControl] mediacontrol:rendered\nclappr.js:2964 [debug][Container] container:mediacontrol:disable\nclappr.js:2964 [debug][Core] core:containers:created\nclappr.js:2964 [debug][hls] playback:ready hls\nclappr.js:2964 [debug][Container] container:ready Container\nclappr.js:2964 [debug][Container] container:volume 0 Container\nclappr.js:2964 [debug][MediaControl] mediacontrol:notplaying\nclappr.js:2964 [debug][MediaControl] mediacontrol:notplaying\nclappr.js:2964 [debug][MediaControl] mediacontrol:rendered\nclappr.js:2964 [debug][Container] container:dvr false\nclappr.js:2964 [debug][MediaControl] mediacontrol:hide MediaControl\nclappr.js:2964 [debug][Container] container:mediacontrol:hide\nclappr.js:2964 [debug][MediaControl] mediacontrol:containerchanged\nclappr.js:2964 [debug][Container] container:volume 0 Container\nclappr.js:2964 [debug][MediaControl] mediacontrol:notplaying\nclappr.js:2964 [debug][MediaControl] mediacontrol:rendered\nclappr.js:2964 [debug][Events] 2:resize Object {width: 640, height: 360}\nclappr.js:2964 [debug][Events] 2:resize Object {width: 640, height: 360}\nclappr.js:2964 [debug][Core] core:ready\nclappr.js:2964 [debug][Player] ready\nclappr.js:2964 [debug][Container] container:destroyed Container {uniqueId: \"o13\", cid: \"c6\", $el: X[1], el: div.container.pointer-enabled, currentTime: 0\u2026} Container\nclappr.js:2964 [debug][html5_video] playback:stop\nclappr.js:2964 [debug][html5_video] playback:stop\nclappr.js:2964 [debug][MediaControl] mediacontrol:notplaying\nclappr.js:2964 [debug][MediaControl] mediacontrol:rendered\nclappr.js:2964 [debug][Container] container:mediacontrol:disable\nclappr.js:2964 [debug][Core] core:containers:created\nclappr.js:2964 [debug][hls] playback:ready hls\nclappr.js:2964 [debug][Container] container:ready Container\nclappr.js:2964 [debug][Container] container:volume 0 Container\nclappr.js:2964 [debug][MediaControl] mediacontrol:notplaying\nclappr.js:2964 [debug][MediaControl] mediacontrol:notplaying\nclappr.js:2964 [debug][MediaControl] mediacontrol:rendered\nclappr.js:2964 [debug][Container] container:dvr false\nclappr.js:2964 [debug][MediaControl] mediacontrol:hide MediaControl\nclappr.js:2964 [debug][Container] container:mediacontrol:hide\nclappr.js:2964 [debug][MediaControl] mediacontrol:containerchanged\nclappr.js:2964 [debug][Container] container:volume 0 Container\nclappr.js:2964 [debug][MediaControl] mediacontrol:notplaying\nclappr.js:2964 [debug][MediaControl] mediacontrol:rendered\nclappr.js:2964 [debug][Events] 3:resize Object {width: 640, height: 360}\nclappr.js:2964 [debug][Events] 3:resize Object {width: 640, height: 360}\nclappr.js:2964 [debug][Core] core:ready\nclappr.js:2964 [debug][Player] ready\nclappr.js:2964 [debug][Container] container:destroyed Container {uniqueId: \"o32\", cid: \"c15\", $el: X[1], el: div.container, currentTime: 0\u2026} Container\nclappr.js:2964 [debug][hls] playback:bufferfull hls\nclappr.js:2964 [debug][hls] playback:stop\nclappr.js:2964 [debug][hls] playback:stop\n2clappr.js:2964 [debug][Container] container:mediacontrol:disable\nclappr.js:2964 [debug][html5_video] playback:error MediaError {} html5_video\nclappr.js:2964 [debug][hls] playback:error MediaError {} hls\nclappr.js:2964 [debug][Container] container:mouseenter\nclappr.js:2964 [debug][Container] container:mediacontrol:disable\nclappr.js:2964 [debug][hls] playback:bufferfull hls\nclappr.js:2964 [debug][Container] container:state:bufferfull Container\nclappr.js:2964 [debug][Container] container:mediacontrol:disable\nclappr.js:2964 [debug][hls] playback:buffering hls\nclappr.js:2964 [debug][Container] container:state:buffering Container\nclappr.js:2964 [debug][Container] container:mediacontrol:disable\nclappr.js:2964 [debug][hls] playback:levels:switch:end\nclappr.js:2964 [debug][hls] playback:level:switch Object {level: 0}\nclappr.js:2964 [debug][hls] playback:highdefinitionupdate false\nclappr.js:2964 [debug][Container] container:highdefinitionupdate false\nclappr.js:2964 [debug][hls] playback:bitrate Object {height: undefined, width: undefined, bandwidth: undefined, bitrate: undefined, level: 0}\nclappr.js:2964 [debug][Container] container:bitrate Object {height: undefined, width: undefined, bandwidth: undefined, bitrate: undefined, level: 0}\nclappr.js:2964 [debug][Container] container:mouseleave\nclappr.js:2964 [debug][hls] playback:settingsupdate\nclappr.js:2964 [debug][Container] container:settingsupdate\nclappr.js:2964 [debug][MediaControl] mediacontrol:playing\nclappr.js:2964 [debug][MediaControl] mediacontrol:rendered\nclappr.js:2964 [debug][hls] playback:levels:available [Object]\nclappr.js:2964 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nclappr.js:2964 [debug][hls] playback:settingsupdate\nclappr.js:2964 [debug][Container] container:settingsupdate\nclappr.js:2964 [debug][MediaControl] mediacontrol:playing\nclappr.js:2964 [debug][MediaControl] mediacontrol:rendered\nclappr.js:2964 [debug][hls] playback:loadedmetadata Object {duration: 11.6, data: Event}\nclappr.js:2964 [debug][Container] container:loadedmetadata Object {duration: 11.6, data: Event}\nclappr.js:2964 [debug][hls] playback:settingsupdate\nclappr.js:2964 [debug][Container] container:settingsupdate\nclappr.js:2964 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nclappr.js:2964 [debug][hls] playback:bufferfull hls\nclappr.js:2964 [debug][Container] container:state:bufferfull Container\nclappr.js:2964 [debug][Container] container:mediacontrol:disable\nclappr.js:2964 [debug][hls] playback:play\nclappr.js:2964 [debug][Container] container:play Container\nclappr.js:2964 [debug][Container] container:mediacontrol:enable\nclappr.js:2964 [debug][MediaControl] mediacontrol:show MediaControl\nclappr.js:2964 [debug][Container] container:mediacontrol:show\nclappr.js:2964 [debug][MediaControl] mediacontrol:playing\nclappr.js:2964 [debug][Player] play\nclappr.js:2964 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nclappr.js:2964 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nclappr.js:2964 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nclappr.js:2964 [debug][hls] playback:settingsupdate\nclappr.js:2964 [debug][Container] container:settingsupdate\nclappr.js:2964 [debug][hls] playback:error MediaError {} hls\nclappr.js:2964 [debug][Container] container:error Object {error: MediaError, container: Container} Container\nclappr.js:2964 [debug][Player] error Object {error: MediaError, container: Container}\nclappr.js:2964 [debug][hls] playback:buffering hls\nclappr.js:2964 [debug][Container] container:state:buffering Container\nclappr.js:2964 [debug][Container] container:mediacontrol:enable\nclappr.js:2964 [debug][MediaControl] mediacontrol:show MediaControl\nclappr.js:2964 [debug][Container] container:mediacontrol:show\nclappr.js:2964 [debug][MediaControl] mediacontrol:hide MediaControl\nclappr.js:2964 [debug][Container] container:mediacontrol:hide\nclappr.js:2964 [debug][hls] playback:settingsupdate\nclappr.js:2964 [debug][Container] container:settingsupdate\nclappr.js:2964 [debug][hls] playback:levels:available [Object]\nclappr.js:2964 [debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}\nclappr.js:2964 [debug][Container] container:stats:report Object {startupTime: 689, rebuffers: 2, rebufferingTime: 3237, watchingTime: 1764, level: 0}\nclappr.js:2964 [debug][hls] playback:settingsupdate\nclappr.js:2964 [debug][Container] container:settingsupdate\nclappr.js:2964 [debug][hls] playback:levels:available [Object]\nclappr.js:2964 [debug][Container] container:stats:report Object {startupTime: 689, rebuffers: 2, rebufferingTime: 8236, watchingTime: 1764, level: 0}\nclappr.js:2964 [debug][hls] playback:settingsupdate\nclappr.js:2964 [debug][Container] container:settingsupdate\nclappr.js:2964 [debug][hls] playback:levels:available [Object]\nclappr.js:2964 [debug][Container] container:stats:report Object {startupTime: 689, rebuffers: 2, rebufferingTime: 13236, watchingTime: 1764, level: 0}\nclappr.js:2964 [debug][hls] playback:settingsupdate\nclappr.js:2964 [debug][Container] container:settingsupdate\nclappr.js:2964 [debug][hls] playback:levels:available [Object]\nclappr.js:2964 [debug][Container] container:stats:report Object {startupTime: 689, rebuffers: 2, rebufferingTime: 18235, watchingTime: 1764, level: 0}\nclappr.js:2964 [debug][hls] playback:settingsupdate\nclappr.js:2964 [debug][Container] container:settingsupdate\nclappr.js:2964 [debug][hls] playback:levels:available [Object]\nclappr.js:2964 [debug][hls] playback:settingsupdate\nclappr.js:2964 [debug][Container] container:settingsupdate\nclappr.js:2964 [debug][hls] playback:levels:available [Object]\nclappr.js:2964 [debug][Container] container:stats:report Object {startupTime: 689, rebuffers: 2, rebufferingTime: 23236, watchingTime: 1764, level: 0}\nclappr.js:2964 [debug][hls] playback:settingsupdate\nclappr.js:2964 [debug][Container] container:settingsupdate\nclappr.js:2964 [debug][hls] playback:levels:available [Object]\nclappr.js:2964 [debug][Container] container:stats:report Object {startupTime: 689, rebuffers: 2, rebufferingTime: 28235, watchingTime: 1764, level: 0}\nclappr.js:2964 [debug][hls] playback:settingsupdate\nclappr.js:2964 [debug][Container] container:settingsupdate\nclappr.js:2964 [debug][hls] playback:levels:available [Object]\nclappr.js:2964 [debug][Container] container:stats:report Object {startupTime: 689, rebuffers: 2, rebufferingTime: 33236, watchingTime: 1764, level: 0}\nclappr.js:2964 [debug][hls] playback:settingsupdate\nclappr.js:2964 [debug][Container] container:settingsupdate\nclappr.js:2964 [debug][hls] playback:levels:available [Object]\nclappr.js:2964 [debug][hls] playback:settingsupdate\nclappr.js:2964 [debug][Container] container:settingsupdate\nclappr.js:2964 [debug][hls] playback:levels:available [Object]\nclappr.js:2964 [debug][Container] container:stats:report Object {startupTime: 689, rebuffers: 2, rebufferingTime: 38237, watchingTime: 1764, level: 0}\nclappr.js:2964 [debug][Container] container:stats:report Object {startupTime: 689, rebuffers: 2, rebufferingTime: 43237, watchingTime: 1764, level: 0}\nclappr.js:2964 [debug][Container] container:stats:report Object {startupTime: 689, rebuffers: 2, rebufferingTime: 48235, watchingTime: 1764, level: 0}\nclappr.js:2964 [debug][Container] container:stats:report Object {startupTime: 689, rebuffers: 2, rebufferingTime: 53235, watchingTime: 1764, level: 0}\nclappr.js:2964 [debug][Container] container:stats:report Object {startupTime: 689, rebuffers: 2, rebufferingTime: 58270, watchingTime: 1764, level: 0}\nclappr.js:2964 [debug][Container] container:stats:report Object {startupTime: 689, rebuffers: 2, rebufferingTime: 63268, watchingTime: 1764, level: 0}\nclappr.js:2964 [debug][Container] container:stats:report Object {startupTime: 689, rebuffers: 2, rebufferingTime: 68235, watchingTime: 1764, level: 0}\nclappr.js:2964 [debug][Container] container:stats:report Object {startupTime: 689, rebuffers: 2, rebufferingTime: 73234, watchingTime: 1764, level: 0}\nclappr.js:2964 [debug][Container] container:stats:report Object {startupTime: 689, rebuffers: 2, rebufferingTime: 78234, watchingTime: 1764, level: 0}\n. This is the full (final) playlist that caused the error:\n```\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-ALLOW-CACHE:YES\nEXT-X-TARGETDURATION:4\nEXT-X-MEDIA-SEQUENCE:0\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000000.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000001.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000002.profile.ts\nEXTINF:3.600000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000003.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000004.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000005.profile.ts\nEXTINF:2.240000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000006.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000007.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000008.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000009.profile.ts\nEXTINF:0.400000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000010.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000011.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000012.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000013.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000014.profile.ts\nEXTINF:2.240000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000015.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000016.profile.ts\nEXTINF:3.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000017.profile.ts\nEXTINF:1.960000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000018.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000019.profile.ts\nEXTINF:1.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000020.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000021.profile.ts\nEXTINF:3.360000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000022.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000023.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000024.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000025.profile.ts\nEXTINF:0.240000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000026.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000027.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000028.profile.ts\nEXTINF:2.000000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000029.profile.ts\nEXTINF:0.900000,\nfile.scene.cili71rw50000ar8o3m1k7byh_000030.profile.ts\nEXT-X-ENDLIST\n``\n. @leandromoreira I'm having problems reproducing it at the moment, the only thing I consistently experience is that the total duration being set to a couple of seconds before the clips end, resulting in the player playing past the end of the clip. This goes away when reloading the clip once it isn't \"LIVE\" anymore. The problem does not occur on the link you sent.\n. It looks suspiciously like the total duration is set to the last total duration of the chunks before the playlist contains anend` tag. I just experienced the file being fully ready almost immediately after starting to stream, resulting in the total duration being 00:00 while the player plays until 02:00.\n. That's it @tjenkinson! I've tested it on my own fork at it works like a charm. Created a pull-request for this minor change. I hope I'm messing something up 0.o\n. @tjenkinson The loading graphics was flickering, I haven't been able to reproduce since then although I will keep trying. If I ever experience it again and can make a step-by-step reproduction I will create a new issue.\n. @tjenkinson Do you know when the next release will occur?\n. Our playlist (generated by ffmpeg) for some reason has a slightly different duration than the video files (also generated by ffmpeg).\nWe have added frames to the base/utils/formatTime() function as it is needed for our product.\nWe noticed that when playing a (non-live) HLS stream until the end, the current time was displayed as 00:12:24 (MM:SS:FF) while the duration was displayed as 00:12:21.\n. Yes it seems the playlist is shorter, or the PTS inside of the video files is somehow wrong, but other than creating an issue on FFMPEGs issue tracker there's not much I can do about that.\nSeeking does seem to be frame accurate which means it gets the correct duration from somewhere. I will try to look at how seeking works.\n. seekTime = this.hoverPosition * this.duration\nThat was not useful :)\n. I will try to investigate why the playlist timestamps are incorrect. I'm not a fan of capping the current time.\nI think it would be great to use the .ts timestamps in general though.\n. @bikegriffith Ah thanks, I'll take a look.\n@tjenkinson You are absolutely right. The TPS from TS won't be available until the last fragment is loaded.\n. ",
    "jussike": "I changed it as you suggested.\n. Yep, I tried.\nThe dailymotion demo player has this or related bug.\nTotal duration hasn't been refreshed, so forward seeking was hard.\nHowever, I can keep the seek pointer on 100% when total duration raised quite fast. Seeking is possible after that.\nI just noticed that this behaviour can be reproduced on live mode too.\nIf I seek backwards on live mode and after a while, trying to seek forward to segmented but unbuffered area.\nSo this bug can be on demo player but it's not so obvious because it doesn't refresh total duration as good as Clappr.\n. I just tested with release 0.2.47 and the bug still appears.\nDemo video: https://db.tt/Khq69XVr\nSeems that problem is HTMLMediaElement.seekable has wrong range and HTMLMediaElement.duration didn't updated correctly.\nOn live-mode (and after-live -mode), durationChange-event fired often but the value is near of current time, instead of single duration change -event to final full duration.\nCould you say which component causes this behaviour? Browser itself, Dailymotion's hls.js or Clappr?\n. Thanks for the suggestion. I just got it working and i'm testing more and preparing the fix.\n. ",
    "davidjytang": "@me-vlad \nYou are right! Interestingly, hls.js ignores the occasional missing files and plays the streams through even though some gaps here and there. Wonders why clappr wouldn't replicate this behavior.\nThank you so much for giving me this pointer. Closing now.\n. Ok I'm going to try that and report back soon.. Confirmed that <video> tag is indeed there for iOS. My bad.\nAnd yes, the option is called muted. However, in demo, it is called mute.\nNonetheless, setting clappr muted or mute to true doesn't apply muted attribute to <video> tag. It seems that original question stands. As iOS relaxed autoplay policy, shall clappr also lift the previous wontfix ruling and make autoPlay possible on iOS 10 Safari?. ",
    "Marcin666": "Still nothing. This event is not fired at all even on going fullscreen.\nEDIT. In 0.2.41 event works well. It does not in 0.2.40 and earlier.\n. ",
    "alouane": "Ok, can you specify the link of your hls.js, so i can test it.\nIs there a way to force use of capprl hls plugin on Android instead of native HLS of Android devices?\n. @towerz PERFECT! it's working, very smooth! Thanks \n. Didn't work, I have got the same problem. As you know, ionic is using angularjs, so I'm wondering if there is some incompatibility between clappr and angular\nI had a similar problem with videojs + angular, but fortunately I found a working directive to run videojs.\nNow I'm trying to get a solution for crappl. \nOur clients prefer Clappr than any other video player \n. Hi, after some debugging I found the source of the problem (It's not an angular incompatibility problem, but it's related to an ionic tag, somethings happens when I add this tag <ion-side-menu-content>).\nSee bellow my test: \n1- I install a fresh ionic app by taping: ionic start ClapprTest tabs\n2- I add this script : <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/clappr/latest/clappr.min.js\"></script> at the bottom of www/index.html, before </body> tag\n3- I add this lines in www/templates/tabs.html : \n <ion-side-menus enable-menu-with-back-views=\"false\">\n <ion-side-menu-content> \n........\n</ion-side-menu-content> \n</ion-side-menus>\nI think, probably this issue Uncaught TypeError: Cannot read property 'srcEvent' of undefined is related to the <ion-side-menu-content> tag\nI thinks it's better to create a new issue at ionic project, I'm gonna close this issue right now \n. Well, as I said, the error comes out when you add this tag <ion-side-menu-content>.\nJuste delete it, and everything should work properly\nBut in may case, I didn't delete this tag, since that error is not blocking the app, and I needed this tag\nCheers\n. I'm afraid no, are you getting some consequences with that error?\n. nice work! glad that you made it. Here's a useful directive for clappr integration with angular: https://github.com/Defina-se/angular-clappr \n. Hi, I'm trying to create a simple canvas with animation, but I have this problem, can you help me? How I can get a HTMLMediaElement from clappr object?\nI have this code:\n audio = document.getElementById('Clappr_ID');\ncanvas = document.getElementById('EquializerAnimation');\nctx = canvas.getContext('2d');\nsource = context.createMediaElementSource(audio);\nAnd I'm getting this error: Failed to execute 'createMediaElementSource' on 'AudioContext': parameter 1 is not of type 'HTMLMediaElement'.\nthis problem should be fixed if I do something like <audio id='Clappr_ID'></audio> but the problem is Clappr doesn't work with audio tag\n. Hi thanks for you answer, but I got this error:\nCannot read property 'getCurrentPlayback' of undefined\nprobably getCurrentPlayback() is called when the player object is steal undefined\nIs there a way to call getCurrentPlayback after Clappr/player is initiated \n. Ok, I fixed the problem, I was calling var player = new Clappr.Player(..) right after <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/clappr/latest/clappr.min.js\"></script>, So I moved the player initialization to the bottom right after <body> tag and it worked! Thanks again +1\n. Hi @leandromoreira, thanks for asking, this bug actually comes from chromimum browser: link Besides, after I read many articles, I understood that it's impossible to convert a MediaElementAudioSourceNode (not working on chromimum ) to an AudioBufferSourceNode to fix this bug link\n(I posted this issue on StackOverflow)\nBut what I want to know @leandromoreira, is it possible to view the equalizer when playing audio files inside clappr like this example?\n. Yeah, I want to get/see the equalizer when playing an hls streaming (like a radio streaming), but in your example, it juste read streaming inputs, Clappr does it, and works fine in mobile devices (android chrome and chromium) but the problem is even if I use this hls.js, it want get the byte frequency in order to draw the equalizer by canvas for android, I guess it is impossible!, I think I will juste wait until chromium fix this issue (A lot of people are complaining about it!)\nAnyway Thanks @leandromoreira for your time ;) cheers\n. I think that's the 100% height, it's not properly translated by the browser, it's like a 0px rendering\n. Try to install crosswalk, I'v juste install it, it's working for the first fullscreen action but once you go out, the problem persist, fullscreen button makes the player vanish again \n. ",
    "3dd13": "@flavioribeiro @leandromoreira \npushed another commit with previous versions of the dist files\n. thanks guys ~\n. ",
    "cdgraff": "Hi, I reach here with similar Issue on liveStreaming... after test on Dailymotion demo page, all works well with current stable relase of hls.js\nSome plans to upgrade?\n. ",
    "edemir206": "Hi,\nI'm facing the exact same issue, i'm using NGINX + RTMP module and clappr.\nMy stream has EXT-XDISCONTINUITY and after this the player just starts trying to get the same 27.ts and 28.ts over and over again.\nEXT-X-DISCONTINUITY\nEXTINF:1.001,\n/conteudo/hls/9t8huwb_recordall/27.ts\nEXTINF:9.992,\n/conteudo/hls/9t8huwb_recordall/28.ts\nEXT-X-DISCONTINUITY\nDoes anyone know a solution for this ?\nin vlc it plays fine.. ",
    "Hezhenli": "Thanks @alouane can you provide more info? I also encountered this problem.\n. Thanks @alouane\uff0c I needed this tag too. But I found when add the tag <ion-side-menu-content>. The onContentTap function in ionic.bundle.min.js will execute more than one time. And at the first time,it is right. Can we do something to stop it?\n. HI @alouane\uff0cI think I found another way to solve this problem. I used another component instead <ion-side-menu-content>. angular-snap working well. And the error never comes out. The example is follow Left and right side drawers\n. HI @alouane, My page code is as follows\n<snap-drawers>\n    <snap-drawer>\n        <ion-header-bar class=\"bar-stable\" no-tap-scroll=\"true\" align-title=\"center\">\n            <h1 class=\"title\">Left Menu</h1>\n        </ion-header-bar>\n        <ion-content>\n            <ion-list>\n                <ion-item>\n                    News\n                </ion-item>\n                <ion-item>\n                    Visit\n                </ion-item>\n            </ion-list>\n        </ion-content>\n    </snap-drawer>\n</snap-drawers>\n<snap-content>\n    <ion-view ng-controller=\"homeCtrl\">\n        <ion-header-bar class=\"bar-dark\" no-tap-scroll=\"true\" align-title=\"center\">\n            <div class=\"buttons\">\n                <a class=\"button button-icon icon ion-navicon\" snap-toggle></a>\n            </div>\n            <h1 class=\"title\">APP</h1>\n            <div class=\"buttons\">\n                <a class=\"button button-icon icon ion-ios-search\" href=\"#/search\"></a>\n            </div>\n        </ion-header-bar>\n        <ion-content lazy-scroll class=\"has-header\" delegate-handle=\"homeScroll\">\n            <ion-refresher on-refresh=\"doRefresh()\" spinner=\"android\"></ion-refresher>\n                   MyContent\n            <ion-infinite-scroll ng-if=\"hasMore\" on-infinite=\"loadMore()\" spinner=\"spiral\"\n                                 distance=\"1%\"></ion-infinite-scroll>\n        </ion-content>\n    </ion-view>\n</snap-content>\n. ",
    "PNixx": "Browser: Firefiox 45.0.1\nOS: Mac OS 10.11.4\nClappr Version: 0.2.47\nVideo: Any non-work address\nHello.\nEvent Clappr.Events.PLAYER_ERROR doesn't work, I try PLAYBACK_ERROR but it has not given the results.\n\n. ",
    "primoitt83": "@leandromoreira I will do it as soon as possible!\n@towerz thanks man!!!\n. Hello again!\nNo luck!\nTypeError: Function.prototype.toString called on incompatible object clappr.min.js:3:17405\nReferenceError: Clappr is not defined qualidade.html:65:10\nO m\u00e9todo getPreventDefault() n\u00e3o deve mais ser usado. No lugar, use defaultPrevented.\nThis is what i did it.\nDownload version 1419c45 \nhttps://github.com/clappr/clappr/archive/1419c451428d2b0f2fa23b37ab6a4d2c37b6f2ec.zip\nUnzip in my site's folder.\nCopy the file clappr.min.js from folder /dist to site's root.\nCreate a html file.\nTry to test a video but no luck :(\nDid i miss something for make it work?\nThanks again\n. @leandromoreira even using the dist,zip you uploaded i got the same error\nTypeError: Function.prototype.toString called on incompatible object clappr.min.js:3:17423\nReferenceError: Clappr is not defined qualidade.html:65:10\nO m\u00e9todo getPreventDefault() n\u00e3o deve mais ser usado. No lugar, use defaultPrevented.\nI'll try git method that you mentioned.\nThanks\n. I've tried git method and good news!!\nEverything is working properly now on Firefox 38!!\nHere's my results:\nOGV - works!\nWEBM - works!\nMP4 - works!\nFlasHLS - works!\nHLS - doesnt work. Probably old Firefox is not compatible. Firefox 45 and Chrome 34 works fine\nYou Clappr's guys rock!!!\nThank you so much for help me out!!\nCheers!  :+1: :D\n. Amazing plugin @leandromoreira !!\nWorking perfectly on Firefox!!\nChanging and closing tabs, even when closes all browser.\nOn Chrome is almost there. It doesn't detects when closes tab or browser.\n. hey @leandromoreira \nI found a limited solution for Chrome\nNeed a function for detect browser's name\nif (browserName=='Chrome'){\n     window.onbeforeunload = function () {   \n        /GET teste.php\n     }\n  }\nBut if the player is paused then tab closes, you will have two GET for same event. :(\nYou think is there a better solution?\n. Found a solution!!!\nif (browserName=='Chrome'){\n```\n     window.onbeforeunload = function () {\nif (player1.isPlaying()){\n\n//GET teste.php\n\n});\n}\n}\n\n}\n```\nWorking properly on Chrome now!!\n. hey @leandromoreira \nI have one last question about .isPlaying.\nThis code works like a charm\ndocument.addEventListener('click', function () {\n      if (player1.isPlaying()){\n        alert*(ok!!!);\n        }\n      });\nCode below doesn't work\nif(window.performance.navigation.type  == 1){      \n  if (player1.isPlaying()){     \n    alert(\"ok!!!\");\n    console.log(\"ok!!!\");   \n    }\n }\nDo i really need a function for is.Playing recogniser playing ??\nThanks again\n. Leandro,\nYeah. That's it but only in Firefox 45 ou greater.. I'll attempt. It's working now! \nOne last question\nIf the player is playing then there's a connection issues and it starts buffering.\nThis event shows me 2 x playing logs on console.\nThe first for pushing play and other for buffering.\nIs it a normal behavior?\nThanks in advance\n. Ok Thx again \ud83d\udc4d . ",
    "GraphicSound": "@tjenkinson OMG, so how can we force it to use hlsjs? Especially for safari, it is too arrogant on playing hls, lol.\n. @tjenkinson Oops, so the final answer is clappr does not suit our needs? There are many live video streaming sites in China at this moment, and they support most browsers, how can they even do this?!!!\n. @tjenkinson Yeah, u r right. Maybe we just need to seek for another solution for our goal instead of sticking to hls detailed events. I'm gonna close this issue. Thanks, man, u just helped a lot!\n. ",
    "REELcoder": "An now? Anyone with an idea how to how to achieve such basic functionality?. CDN: hls:4 error as well. . hls.js: Buffer appending error. @leandromoreira Thanks for the hint. I use a recent ffmpeg which is able to create the master playlist itself. The following command is used. The video stream is h264 720p and is only copied by ffmpeg. The audiostream is transcoded to aac with ffmpeg defaults. \nffmpeg -i http://localhost:8008/1 -map 0:v -map 0:a:0 -c:v copy -c:a aac -f hls -hls_time 1 -hls_start_number_source datetime -hls_allow_cache 0 -hls_flags delete_segments -master_pl_name master_1.m3u8 ffmpeg_1_data.m3u8\nThe manifests created by ffmpeg with above command are as follows:\nmaster_1.m3u8:\n```\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-STREAM-INF:BANDWIDTH=433400,RESOLUTION=1280x720\nffmpeg_1_data.m3u8\n```\nffmpeg_1_data.m3u8:\n```\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-ALLOW-CACHE:NO\nEXT-X-TARGETDURATION:1\nEXT-X-MEDIA-SEQUENCE:20181216122741\nEXTINF:0.960000,\nffmpeg_1_data20181216122741.ts\nEXTINF:0.960000,\nffmpeg_1_data20181216122742.ts\nEXTINF:0.960000,\nffmpeg_1_data20181216122743.ts\nEXTINF:0.960000,\nffmpeg_1_data20181216122744.ts\nEXTINF:0.840000,\nffmpeg_1_data20181216122745.ts\nEXT-X-ENDLIST\n```\nTo me this looks fine. In one out of 10 attempts clappr plays the ffmpeg generated content without problems. Occassionally clappr is stuck with the hls:4 errror and is not starting to play even if I wait a minute until ffmpeg has created new TS files and updated the ffmpeg_1_data.m3u8.\nAs you can see this is live content and ffmpeg deletes old TS files. Only 5 TS files are listed in the m3u8. There is only 1 quality level as the videostream is not transcoded. Your example is for VOD content which is statically held on the server. . OK, I see the point. The input stream is as it is sent by the TV stations. Your command examples include transcoding the video stream. For my application transcoding is not an option. I will check if the generated TS segments include an closed GOP. \nThe question is still why for the same TV station it works in 9 of 10 cases without trouble and a few minutes later the player does not start.... I checked GOP using https://gist.github.com/use-sparingly/7041ee993adb5c911f90#file-iframe-probe-py\nAll TS segments from my example at https://hackersgarden.dyn.ch/media/master_1.m3u8 have closed GOP's and each one starts with an I-frame. Seems GOPs are fine here and ffmpeg is doing a good job...\nWhat else can I check?. - some of the hls requirements are of course not met since I have just one rendition. Clappr seems to accept this most of the time...\n- mediastreamvalidator output seems to be fine with some minor deviations:\n```\nmediastreamvalidator: Version 1.2 (373.7-180828)\n[/media/master_1.m3u8] Started root playlist download\n[ffmpeg_1_data.m3u8] Started media playlist download\n[ffmpeg_1_data.m3u8] Received media playlist response\n[ffmpeg_1_data.m3u8] SequenceNum: 20181216122741  Size: 1320136 bytes Duration: 0.9600 sec Bitrate: 1375141.6667\n[ffmpeg_1_data.m3u8] SequenceNum: 20181216122742  Size: 1369016 bytes Duration: 0.9600 sec Bitrate: 1426058.3333\n[ffmpeg_1_data.m3u8] SequenceNum: 20181216122743  Size: 1248508 bytes Duration: 0.9600 sec Bitrate: 1300529.1667\n[ffmpeg_1_data.m3u8] SequenceNum: 20181216122744  Size: 1328220 bytes Duration: 0.9600 sec Bitrate: 1383562.5000\n[ffmpeg_1_data.m3u8] SequenceNum: 20181216122745  Size: 1165788 bytes Duration: 0.8400 sec Bitrate: 1387842.8571\n[ffmpeg_1_data.m3u8] All media files delivered and have end tag, stopping\n\nffmpeg_1_data.m3u8\nProcessed 5 out of 5 segments\nAverage segment duration: 0.936000\nTotal segment bitrates (all discontinuities): average: 10994.30 kb/s, max: 11408.47 kb/s\nPlaylist max bitrate: 433.400000 kb/s\nAudio Group ID: AUDIO\nDiscontinuity: sequence: 0, parsed segment count: 5 of 5, duration: 4.680 sec, average: 10994.30 kb/s, max: 11408.47 kb/s\nTrack ID: 1\nVideo Codec: avc1\nVideo profile: High\nVideo level: 4\nVideo resolution: 1280x720\nVideo frame rate: 50.000\nTrack ID: 2\nAudio Codec: AAC-LC\nAudio sample rate: 48000 Hz\nAudio channels: 2\nAudio channel layout: Stereo (L R)\n\nMUST fix issues\nError: Measured peak bitrate compared to master playlist declared value exceeds error tolerance\n--> Detail:  Measured: 11408.47 kb/s, Master playlist: 433.40 kb/s, Error: 2532.32%\n--> Source:  http://core/media/master_1.m3u8\n--> Compare: ffmpeg_1_data.m3u8\n\nSHOULD fix issues\nWarning: #EXT-X-ALLOW-CACHE has been deprecated\n--> Detail:  Line: #EXT-X-ALLOW-CACHE:NO\n--> Source:  ffmpeg_1_data.m3u8\n```\nI manually fixed both issues. Still the same error on Safari and Firefox.\n\nhls_time 2 seconds does not help. There are 2 I-frames per second in the affected content, 1 s should be fine as well\nframerate is 50 fps and I have just one rendition as I do not transcode on the fly.\nno stale segments are found\nPTS are perfect.\n\nI don't know.... Have you tried yourself to run my content in CDN?\nIn firefox I have the following in the console:\nwindow.controllers/Controllers is deprecated. Do not use it for UA detection. ace.js:1:279195\nMedia resource blob:http://clappr.io/a88de112-eff0-3f4a-be32-9530d1341b5f could not be decoded. demo\nError: This error message will be blank when privacy.resistFingerprinting = true.  If it is really necessary, please add it to the whitelist in MediaError::GetMessage: NS_ERROR_DOM_MEDIA_METADATA_ERR (0x806e0006) - virtual RefPtr<MP4Demuxer::InitPromise> mozilla::MP4Demuxer::Init(): Parse MP4 metadata failed html5_video.js:423:18\nIn Safari:\nInvalidStateError: The object is in an invalid state. \n  onSBUpdateEnd - hls.js:11930\n. Sure. Maybe some other segmenter will work, as it is working with ffmpeg most of the time.\nBut the main question will not be answered: Why does it randomly not work. If we know what \"something\" is, I'm sure this would be fixed fast in ffmpeg. But if clappr fails without any useful error, for me this looks like an issue with clappr. . The last sentence was obviously the clue...\nThe TV stations send multiple audio streams. Usually the stereo stream is the the first in the list. In rare cases the 5.1 stream is the first and selected by the ffmpeg option -map 0:a:0. This seems not to work.  Have still to find out why.\nAs per Apple HLS requirement 2.3 one stereo AAC stream must be provided. This is violated in the affected example. Or ffmpeg does not properly transcode the 5.1 stream. . ",
    "mattLummus": "@leandromoreira regarding this statement: \"we should create an external plugin for it.\" Do you have an status on this idea? I would also point out that we are using Mixpanel to track play data and it would be nice to be able to at the least fork an external plugin and swap out the consumer (i.e. send data to mixpanel instead of GA). \nI would be happy to help contribute this but wanted to see if any progress had been started yet that I am not aware of\n. @leandromoreira Their API's are fairly similar. For example, via Mixpanel's documentation:\nmixpanel.track(\"Video played\", {\n        \"Video length\": 213,\n        \"id\": \"hY7gQr0\"\n    });\nFor our case we want to capture basic play stats: play started, 50% playthrough, etc. as well as errors. So I like the idea of separating 'hit' and 'view', but I'd also like to have a little more control on how much of the video they've watched, so not necessarily just 30s but also 25,50,75, and 100% of the video being watched. I see in your stats-plugin that you can fetch these stats periodically, so thats something we could make work even if it wasn't completely baked in...\nrunEach: 5000,\n    onReport: (metrics) => {console.log(metrics)},\nLater on we would want to use some more of the events such as seeking, pausing, etc. and possibly buffer events as well to measure performance, but the basic stats get us going. \n. @leandromoreira So getting back to work on our analytics integration today I feel like I have a little more clarity. To me events triggering the report probably seems more helpful than setting an interval.\nI.e., instead of reporting every 5 seconds or so,  I want to generate the report at appropriate times. Notably, when a video ends on a full playthrough, the source is changed, or when the player is removed by the user changing pages, closing their browser, erroring, etc. And I definitely like the playthrough percentages being triggered as events themselves, but it would be simpler to get one 100% playthrough stat, vs 4 (one for each 25% of the playthrough)\nThat way I can send off the completed stats for that play \"session\" without flooding our analytics channels. \nThanks for helping out with this, I really like the plugin approach of Clappr and it makes solving problems like this actually enjoyable :D \n+1 for modularity... \n. ",
    "Luc3as": "there were some bug in the hls.js \nhttps://github.com/dailymotion/hls.js/issues/439#issuecomment-218720232\nhow soon is possible to implement new hls.js version in latest clapper from cdn ? \n. ",
    "anoopksreyas": "Guy's need a help.\nI'm trying to seek clappr player like below.\nplayer.seek(time);\nHere time is a variable that holds value in seconds. Strangely its not working with the 'time' variable. It is working if i hardcode the value like player.seek(50.8888); .\nAny quick replies??. Thanks leanleandromoreira. \ntypeof(time) returns number. . Sorry guys. Mistake was from side. I was triggering play.seek(time) on OnSeek event where time = player.getCurrentTime (). Its only giving me the time where seek start.  So as a work around now im calling seek inside OnPlay event.  \nThanks. \n. It's playing on my Django development server. But when I deployed on\nstaging it's not working.\nOn 11-Dec-2016 4:22 pm, \"kslimani\" notifications@github.com wrote:\n\n@anoopksreyas https://github.com/anoopksreyas : you should check if the\nrequest if performed with credentials because i don't see any\naccess-control-allow-credentials header in the server response. Maybe it\nis related ?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/clappr/clappr/issues/1233#issuecomment-266275281, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADB3JT-Y9vmHNcR8S19bJX8XtfFDVclrks5rG9X5gaJpZM4LJ2V3\n.\n. \n",
    "waster": "Totally agreed with separate GA plugin, thanks!\n. I also tested with the following multiple streams (with and without 'audioOnly:true'):\n```\nvar variant_streams = {\n  'test': [\n    {\n      source: 'http:///playlist.m3u8',\n      mimeType: 'application/x-mpegURL'\n    },\n    {\n      source: 'http:///playlist.m3u8',\n      mimeType: 'application/x-mpegURL'\n    },\n    {\n      source: 'http:///stream.mp3',\n      mimeType: 'audio/mp3'\n    }\n  ]\n};\n```\nIn this case bubbles spinner is showing infinitely while stream is playing.\n. Sure, I understand and use multiple sources exactly as fallback, please check this code:\n```\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: 'http://clappr.io/highline.mp4',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  height: 360,\n  width: 640,\n  audioOnly:true\n});\nplayer.attachTo(playerElement);\nvar variant_streams = {\n  'test': [\n    {\n      source: 'http://hlsserverdev.hostingradio.ru:8080/hls/11/320/out.m3u8',\n      mimeType: 'application/x-mpegURL'\n    }\n  ]\n};\nplayer.load(variant_streams['test']);\n// Play is important as I want to play by clicking link or there is another way?\nplayer.play();\n```\nSee screenshot:\n\nAlso please check this sources:\nvar variant_streams = {\n  'test': [\n    {\n      source: 'http://hlsserverdev.hostingradio.ru:8080/hls/11/320/out.m3u8',\n      mimeType: 'application/x-mpegURL'\n    },\n    {\n      source: 'http://ep128.hostingradio.ru:8030/ep128',\n      mimeType: 'audio/mp3'\n    }\n  ]\n};\nSee attached screenshot:\n\nIn both cases streams are playing seamlessly and fine.\n. Great! Thanks for the quick response.\n. hm, I did the following to generate dist directory:\nnpm install\nnpm run build\nAll dist files were generated sucessfully, but now I have errors in the console while opening my test page that worked before:\nTypeError: resource.split is not a function\n clappr.js:18705:24\nTypeError: _this7.container is null\n clappr.js:11229:12\nDid I forgot to do something?\n. Here are versions were used to build. npm run release did not help too.\n```\nnode -v\nv4.2.4\nnpm -v\n2.14.12\n```\nWhat version of npm is compatible to build clappr?\n. Sure, will try with higher version.\n. @tjenkinson no problem, will wait for fix...8)\n@leandromoreira thanks for the hint!\n. I've built from sources again using npm  with npm run release and with clappr.js it does not work if player.load() and then player.play() are calling:\nReferenceError: startPlay is not defined\n. It plays now, thanks. @towerz but unfortunately I'm still seeing the problems with indicator:\n1. WIth audioOnly: true there is no play indicator after loading the player with first init source. However play()and load() methods works fine with multiple or standalone m3u8(s). However loading bubbles are not still hiding with additional source with mimeType: 'audio/mp3'.\n2. Without audioOnly: true with multiple sources play or bubbles indicators are still showing.\n. Sure, will try to prepare and example ASAP.\n. Ok, I prepared the example page with the latest generated clappr.min.js where you can see the problems:\n1. Play indicator is not showing although player was initialized with source.\n2. Click on the \"Click to play\" link and you'll see that bubbles are showing all the time although stream is playing fine.\nAs you can see I pass two sources one with application/x-mpegURL mimeType and other with audio/mp3 as fallback and enabled 'audioOnly: true'.\n. @tjenkinson I hope it will be fixed with sources plugin, so did you check example page I provided? \n1. There is no play indicator even source was loaded initially.\n\n1. Bubble indicator is not hidden after clicking on \"Click to play\".\n\nDid you see the same behavior on the test page?\n. I tried your version and also build the latest min.js and it seems that everything is fine with indicator now. Great! I used clappr version generated before your messages about sources plugin fixes.\n. @leandromoreira thanks. I know that, but should it work for the HTML5 playback devices (Android, etc)? I checked the test page with xhr.withCredentials = true on Android and it does not work.\n. @leandromoreira I totally agree that it can be very handful feature to have html5\u0421onfig option as in the same way as hlsjsConfig. BTW, is there any way to pass flashls options too?\n. @leandromoreira yes I agree, I mean the way to pass other flashls options like hls_startfromlevel, hls_live_flushurlcache, etc\n. oops sorry for closing...8)\n. @leandromoreira sure, I closed it accidentally\n. @leandromoreira I tried to pass logDebug: true to the Clappr options directly and it works, thanks! I think the more convenient way for is to use flasHLS: options for the specific flashls options.\n. Yes, as I see it retries two times with 404 by default for now, but then stopped with cannot start loading as manifest not parsed yet in startLoad method and did not throw any error to handle.\n. Hellp, any news about that issue?\n. Hellp, any news about that issue?\n. Tested with the current master. Unfortunately problem still remains. I added the following code to the player config :\nevents: {\n       onError: function() { console.log(\"Error\"); }\n}\nAnd tried to load non-existent 404 manifest. Still no error event after two retries and console messages are:\n[log] > startLoad\n[warn] > cannot start loading as manifest not parsed yet\n. Hello @leandromoreira , I tested it with current clappr and it seems that onError event is not triggering still with the same hlsjs warn. BTW, Is it posible to display different messages for different errors via clappr API?\n. @leandromoreira did you close this bug because it will be automatically fixed when corresponding hls.js 491 issue corrected?\n. @leandromoreira ah, sure, we can close this for now. I hope hls.js will fix that issue soon.\n. I have the same question. What is the proper way to include audio tag as it can be played inline on iPhone (4 < iOS < 10)?\n. I'm not sure that HLS specification allows to use <audio> with the m3u8 containing TS segments , but it's ok to use raw ADTS AAC segments, please correct me if I'm wrong. As I see, hls.js supports it. \n. hmm, though in HLS draft:\nEach Media Segment MUST be formatted as an MPEG-2 Transport Stream\n   [ISO_13818], a WebVTT [WebVTT] file, or a Packed Audio file, which is\n   a file containing packed encoded audio samples and ID3 tags, such as\n   AAC with ADTS framing [ISO_13818_7], MP3 [ISO_13818_3], AC-3 [AC_3],\n   or Enhanced AC-3 [AC_3].  Transport of other media file formats is\n   not defined.\n. Oh, excellent. So if it does not contradict the HLS specification, I definitely agree with enhancement to use <audio> tag if audioOnly options was set and may be some additional option like explicitAudio.\n. Yes , I tried to find in HLS/HTML5 specs too, but found for HTML5 here now:\nThe only difference between the <audio> and <video> tag attributes is the option to specify a height, width, and poster image for video.\n. Thanks for the implementation, but what about TS segments with audio only? Can we return audio tag too in this case?\n. Next release for hls.js v0.5.44 is out with fixes for very annoying bug for Chrome.\n. hm, 0.5.44 does not include actual last commits to fix bug, so is there a way to build a clappr with v0.5.x branch of hls.js? I tried to change package.json with \"hls.js\": \"https://github.com/dailymotion/hls.js.git#v0.5.x\" but got Module not found: Error: Cannot resolve module 'hls.js' error on npm run build after npm install\n. @jlmcdonald , @tjenkinson many thanks for the explanations, will try.\n. @towerz, great, it will be very useful. In our case we simply run stop->load->play sequence on each play action so I guess it's safe to remove playback src.\n. @towerz  Hello, sorry for incorrect playlist. It's broken for now. Please try http://hls.01.radio7.emgsound.ru/13/playlist.m3u8\n. @leandromoreira sure I tried. Thanks for the bandwidth information we fill fix that. But for the http://hls.01.radio7.emgsound.ru/13/128/playlist.m3u8 link it's failed too(may be because it's audio only) but I'm pretty sure this playlist is fine. Please correct me if I'm wrong:\n```\n$ curl http://hls.01.radio7.emgsound.ru/13/128/playlist.m3u8\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-TARGETDURATION:6\nEXT-X-MEDIA-SEQUENCE:501\nEXTINF:4.992289,\nout501.ts\nEXTINF:5.015511,\nout502.ts\nEXTINF:4.992289,\nout503.ts\nEXTINF:4.992289,\nout504.ts\nEXTINF:5.015511,\nout505.ts\nEXTINF:4.992289,\nout506.ts\n```\nHere are results of the tests in IE11 for that link.\n- cdn.clappr.io\nPlease try this code to test:\n```\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  height: 360,\n  width: 640,\n  audioOnly: true,\n  flushLiveURLCache: true,\n  hlsjsConfig: {\n    xhrSetup: function(xhr, url) {\n      xhr.withCredentials = true;\n    }\n    },\n  playbackConfig: {\n    crossorigin: 'use-credentials'\n  }\n});\nplayer.attachTo(playerElement);\nplayer.stop();\nplayer.load({source: 'http://hls.01.radio7.emgsound.ru/13/128/playlist.m3u8', mimeType: 'application/x-mpegURL'});\nplayer.play();\n```\nPlay failed by clicking \"Run\" one or more times (depends on if flashls swf is in browser cache).\n- cors headers are fine:\nCache-Control   no-cache\nConnection  keep-alive\nContent-Encoding    gzip\nContent-Type    application/vnd.apple.mpegurl\nDate    Sun, 07 Aug 2016 17:11:30 GMT\nEtag    W/\"57a76bbe-f3\"\nExpires Sun, 07 Aug 2016 17:11:29 GMT\nLast-Modified   Sun, 07 Aug 2016 17:11:26 GMT\nServer  nginx/1.10.0\nTransfer-Encoding   chunked\naccess-control-allow-cred...    true\naccess-control-allow-orig...    http://cdn.clappr.io\naccess-control-expose-hea...    X-Current-Location\n- hls.js demo page plays this link fine in non IE11 browsers.\n- flashls demo page plays this link fine after clicking 'Load'\n. @leandromoreira correct, it works with clappr with hls.js playback, and on flashls test page. But it doesn't play on cdn.clappr.io with IE11 if flashls swf is in browser cache already. Waiting for your test results on IE11 if it's possible.\n. @towerz ah, I see, but what about calling load() and play() methods on click events? Should I bind  to click events then only after player was ready? For example: \nplayer = new Clappr.Player({\n...\n     events: {\n          onReady: setupClickEvents;\n     }\n});\nvar setupClickEvents = function() {\n    $('td.controls button.play').click(function(event) {\n           this.player.play();\n    });\n...\n}\n. @towerz thanks for the suggested snippet, then where in setupClickEvents or other place should I place load() method to be sure that play will start only after load with flashls?\n. So the main question how to correctly run load and play hls source on click event to avoid \"race conditions\" that can be reached as I understand on slow bandwidth and with flashls playback also?\n. I also created this page to test. Is it a right way to run load() before if (playback.isReady) in your snippet? But as I see player.onReady event is fired twice on first click play and even more after further clicks.\n. @towerz thanks, It's very good hint to use autoplay, I'll check that. So I need to call load() method only on click event in this way. \nI'm curious, will it work for html5 playback on iPhone and other Apple-devices and if we clear src attributes as mentioned here .\n. hm, I edited the test page as you suggested with autoPlay: true and load() by click and it seems that it does not work in FF. It downloads playlists and fragments but does not play. But this page also works in Chrome, Opera, and IE.\n. Also I checked test page above in quite old IE11 (11.0.9600.17105) and it does not work also. I see in the console: \"flashready trigger - TypeError: Error #1009\"\n. It seems that even in that way something like race condition occurs because player starts to play in some moments, and failed sometimes on IE with \"flashready trigger - TypeError: Error #1009\". Please help to solve this issue.\n. Here are screenshots with two errors and versions of IE and Adobe Flash:\n\n\n\nDemo page of chromeless flashls works very well and stable.\n#1009 error is seldom but sometimes even persist in FF on my Ubuntu workstation if flashls playback is forced. \n. @towerz Any news on this? Unfortunately, this issue stopped us to use clappr in the production mode and we have to embed flashls directly for IE11.\n. @towerz agree, and it's interesting that this problem can be reproduced also on different versions of IE11 and win7/win10.\n. Yes, still the same problem and it prevents us to use clappr flashls playback in production and we have to inject flashls directly via  and it's really weird. My opinion is that this is a major bug that makes impossible to use clappr with flashls playback.. @towerz, @leandromoreira can you please check that issue again? I guess it seems to work by destroying and recreating player after each start/stop, but in our case it can not be used because we have VAST plugin and need to load original src and play again after VAST preroll. We're also tried to investigate this issue but it's hard to debug because flashls playback works well with IE developer tools opened. Also I noticed that playback is not working if swf request (for flash playback) returns 304 cached response, can it be related?. @leandromoreira yes, the problem is related to flashls playback in IE only.. @kslimani unfortunately it seems does not not work, for example we use this code in VAST plugin on ad ended:\nthis.listenToOnce(this.core.getCurrentPlayback(), Events.PLAYBACK_ENDED, () => {\n...\n   this.core.configure({autoPlay: true});\n   this.core.load(this.originalSource);\n}\nAnd got this error on win10 in IE11:\nINFO:_setupExternalCallers()...\nINFO:_setupExternalCallers()\nINFO:CromelessPlayer()\nHLSEvents ready\n_bootstrap\n%c[error] color: #ff0000;font-weight: bold; font-size: 13px; error on event c16:flashready trigger - TypeError: Error #1009. Closed, new https://github.com/clappr/clappr/issues/1414 opened.. It seems that sometimes flashls is also bailing out with max number of attemtps (e.g. in IE1) even if m3u8 is correct. I've noticed  that If \"Always Refresh from Server\" is turned off setting in Network tab of IE11 developer tools load() method works but in default mode with browser cache enabled this.el.playerLoad is always undefined.\n. @tjenkinson , hm, I've checked already on hls js demo page and manifest is not loaded loaded twice anymore, so it seems to be fixed there. But with the current clappr from master git I see such behaviour however it was updated with hls.js v0.5.44 three days ago. Is it related to clappr then?\n. @leandromoreira , seems that it fixed now, thanks!. @leandromoreira , thank for the quick reponse, I'll try to check, but what about other playbacks, flashls for IE and html5 fo Safari for example?. The main reason is that we use cookies in playlist responses and usecredentials to analyze some stats and the problem is that of course we can not get access to the cookie value of the playlist domain on the client side with clappr placed on another domain but still need to know this value as we use it as some kind of id. So I was thinking to use headers or may be some playlist tags also to send cookie value. . Browser: Chrome 58.0.3029.83\nOS: Android 4.4.2\nClappr Version: 0.2.66\nSteps to reproduce: \n1. Clappr configured as \n{\n parentId:\"#player\",\n width: 1,\n height: 1,\n chromeless: true,\n audioOnly: true,\n...\n}\n\nIn custom VAST plugin the following code was used:\n```\n...\nthis.core.configure({autoPlay: true});\nthis.core.load(mediaFile.fileURL);\n...\n\n```\n\nThe following error occured in Chrome browser console (developer mode):\n\nUncaught TypeError: Cannot read property 'isPlaying' of null\n    at MediaControl.hide (clappr.js:9950)\n    at MediaControl.disable (clappr.js:9576)\n    at new MediaControl (clappr.js:9538)\n    at Core.createMediaControl (clappr.js:8891)\n    at Core.setupMediaControl (clappr.js:8880)\n    at new Core (clappr.js:8669)\n    at CoreFactory.create (clappr.js:9065)\n    at Player.attachTo (clappr.js:7497)\n    at Player.setParentId (clappr.js:7482)\n    at new Player (clappr.js:7464)\nIn Clappr 0.2.64 it works fine.. @leandromoreira, it does not work in current 0.2.66, but works in previous 0.2.64.. @kslimani great, thanks, will wait for the fix. Actually I want to have the way to run radio on after click play button, but it is important also to start play automatically after some preroll, for example.. @kslimani can you please describe quickly in general words (or may be give a link) what is it a known IE11 issue and workaround fix logic?. Yes, I see, but in our case first playback is created on preroll and then it is destroyed and recreated with flashls to switch to live HLS stream. In the case of \"cachebuster\" mechanism swf will be downloade twice as I noticed and it will cause hole (sometimes up to 4 seconds) between end of ad and start of live stream. Can it be avoided in IE11/Edge? For example can we load flash playback initially at the beginning of preroll playing and do not recreate it on HLS switching? Or Ideally some sort of flash playback preload.. @kslimani sure, I understand about Flash, but unfortunately it is the only way to play HLS in IE11 now. Not sure I understand about double swf download, I mean that swf file is downloaded twice each time flashls playback is used on load() method. I guess it is related to DOM changes in render() method in src/playbacks/base_flash_playback/base_flash_playback.js file?. @kslimani so the only one possible solution now is to serve Clappr assets on the same domain?. @leandromoreira great, very much waiting for this fix, because right now we're using not very elegant way with additional player to play preroll, then unmute other player with source on ad ended.. @kslimani , thanks, will definetely check this plugin for code examples.. @kslimani yep, I tried, but it seems that it is more than 1 minute in FF at least...8) Hm, so I'm just curious how such errors can be handled (or can't) in case of ads usage. If preroll can not be downloaded and connection hangs, how to switch to live stream after some timeout?. ",
    "Mindvelopers": "I think this is the \"mediasource\" error.\nBut this just happens for some people and just some times.\nNow everything works fine, but this happens a lot of times with live stream.\n. Tried everything you sent.\nIt works on every flash player, but not on hls.js player's.\nCould this problem be on my server? need to activate something to work on html5? I'm using wowza...\n. Hi, the CORS were enabled, but the problem was on the Access-Control-Allow-Origin: * xD\nThanks a Lot! How can I buy you a beer?\n. ",
    "mpaolino": "Yes ABC stream has only 30 seconds but I also tested it with 30m on my own stream (nginx hls configured to store 30m of stream), result is the same it doesn't allow me to rewind at all, I cannot click and drag the slider.\n. @tjenkinson, I found the cause, it was a combination of edge case and a problem between the chair and the keyboard.\nThe issue was that clappr does not work with < 1min DVRs.\nI don't have the 30m playlist, but I just streamed again and generated around 6m playlist, only then started consuming the stream and it worked. Here is the playlist:\nhttps://gist.github.com/mpaolino/143021d914850329ac55da7580fccb35\nProblem is, if I start consuming the stream without letting the server generate long enough playlist (1+ min) then rewind wont work, nor the pause feature, you can only stop it. It will eventually allow rewind once the stream passes ~1 minute mark. This also explains why ABC stream rewind did not work.\nSo I don't know if consider this a bug, but I certainly would like to have this feature as my use case requires it, streams start and stop pretty regularly and its pretty confusing to users as the newly streams won't be able to pause or go back in time for over a minute.\nNevertheless, congrats on all the work, this player is awesome.\n. @tjenkinson thanks for the info on that parameter, works a little better now. The fastest I could get rewind working was ~30secs (with hlsMinimumDvrSize <= 30). This can be closed if you like as its a hlsjs limitation.\n. \n. ",
    "ZAZmaster": "Has this issue too. Browser Chrome 51.0.2704.63 m and FF 46.0.1 on Windows 7\n. ",
    "tuannvm": "Also had this. Switching back to 0.2.52 fix the problem.\n\nhttps://cdnjs.com/libraries/clappr/0.2.52\n. \n",
    "askkaz": "just had the same issue - using 0.2.52 until the new version is live\n. ",
    "Mordinoid": "Thank you so much, it worked! I`ll be closing this now. \n. ",
    "remijulien": "This makes sense, it is really just a design choice for the progress bar, so I'll let you guys decide what to do with that.\nI have checked the implementation on  hls.js demo page and although the playhead also jitters as expected, it is a lot less noticeable, probably because the playhead has some overall progression, whereas on clappr the average position stays the same so jitter is more noticeable.\n. ",
    "deonio": "I used the last three versions:\n0.2.52\n0.2.53\n0.2.54\nnow 0.2.54\nI see the following errors\n[debug][hls] playback:levels:available Array[1]\nlog.js:67[debug][hls] playback:fragment:loaded Object\nblob:http%3A//xxx.ru/5ac0682f-16b1-482c-86ed-3dd512e00960:6 Uncaught TypeError: Cannot read property 'contiguous' of undefined\n. i do not know what to do\nedit src/demux/tsdemuxer.js -> lines 362-    };      +    }.bind(this);\nclappr.js there are no such lines\n. ",
    "samcarmex": "To add to above - I have since linked to previous Clappr build 0.2.52 and it works perfectly on desktop. \nI've seen a couple of mentions of possibly this same bug so feel free to close if the issue is already well known.  \nLastly, accessing this test player on an Android device (Nexus 5, Chrome), I can audibly hear the segments overlapping/glitching. What can be causing this? What sort of buffer rules should be present in the options?\n. The main source (m3u8) is a live stream between 8.00 - 14.00 GMT. Outside of those hours we would like the player to fall back to audio stream (has been added to that test player as another source). However, when the live .m3u8 is not available, the player tries to buffer infinitely and never falls back to the audio source. Have I configured the sources wrong or is this a bug?\n. @leandromoreira \nSee test player source - is that correct or do I need to use some sort of plugin to have it fall back?\nhttp://trnsmt.tv/admincpanel/testoclappr.html\n. ",
    "kungfu315": "and, icon play and icon loading center not working, no show when stop. test in chrome 64 bit win 10. firefox is ok.\nSee test player here:\nhttp://trnsmt.tv/admincpanel/testoclappr.html\n. i try live .m3u8 http://125.235.29.16/livetv/keeng.m3u8 but icon play center no show when stop\n. ",
    "widestreamio": "Do you stream with adobe flash live encoder?\nDo you know some website that I can test live streaming with clappr?\n. 1) nothing on the configs.\n2) i was talking about a website that I can live stream, but one with clappr.\nI am persisting on clappr, because I made 6 different designs with clappr, it was a lot of work. :/\nIs there another place that I can talk with you and after, post the resolution here?\n. @me-vlad Tested! But nothing happens :(\n@leandromoreira What I want is something like twitch, that I can stream with adobe encoder and see if the problem is on my server, or the player can't read some codecs, well, can this be something about codecs?\n. I dont know how to use that streamroot :O\nA friend of mine told me this is a codec problem, can it be?\n. The problem is, i'm out of time xD, is it really possible to make this work on hls.js/clappr, should I continue trying?\nI tested everything on troubleshooting, works on flashhls, but not on hls.js :(\n. How can I get in contact with you? It's difficult to explain by comments.\nI can find an answer and post it here later.\n. @leandromoreira This is fixed, but I found another problem, sometimes, the player doesn't start... it just dont load the video... and the log says nothing, what can this be?\n. ",
    "keyndark": "HLS stream\nHere my test page:\n``` html\n\n\n\n\n\n\n    var player = new Clappr.Player({controls: true,\n    source: \"http://192.168.99.180:3233/stream.m3u8\", parentId: \"#player\"});\n  \n\n```\nVLC player plays needed track (and have ability to change audio language), clappr plays english.\nhttp://192.168.99.180:3233/stream.m3u8 content:\n```\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-STREAM-INF:CODECS=\"avc1.4d401f,mp4a.40.2\",RESOLUTION=640x380,CLOSED-CAPTIONS=NONE\nstream1.m3u8\n```\nAnd http://192.168.99.180:3233/stream1.m3u8 content:\n```\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-TARGETDURATION:4\nEXT-X-MEDIA-SEQUENCE:15701\nEXTINF:4.000,\n15701.ts\nEXTINF:4.000,\n15702.ts\n```\nMediainfo:\n```\nGeneral\nID                                       : 1 (0x1)\nComplete name                            : 15921.ts\nFormat                                   : MPEG-TS\nFile size                                : 1.71 MiB\nDuration                                 : 3 s 820 ms\nOverall bit rate mode                    : Variable\nOverall bit rate                         : 3 507 kb/s\nVideo\nID                                       : 481 (0x1E1)\nMenu ID                                  : 1 (0x1)\nFormat                                   : AVC\nFormat/Info                              : Advanced Video Codec\nFormat profile                           : Main@L3.1\nFormat settings, CABAC                   : Yes\nFormat settings, ReFrames                : 2 frames\nCodec ID                                 : 27\nDuration                                 : 4 s 0 ms\nBit rate mode                            : Constant\nBit rate                                 : 3 200 kb/s\nMaximum bit rate                         : 3 398 kb/s\nWidth                                    : 1 024 pixels\nHeight                                   : 576 pixels\nDisplay aspect ratio                     : 16:9\nFrame rate                               : 25.000 FPS\nColor space                              : YUV\nChroma subsampling                       : 4:2:0\nBit depth                                : 8 bits\nScan type                                : Progressive\nBits/(Pixel*Frame)                       : 0.217\nStream size                              : 1.53 MiB (89%)\nAudio #1\nID                                       : 482 (0x1E2)\nMenu ID                                  : 1 (0x1)\nFormat                                   : AAC\nFormat/Info                              : Advanced Audio Codec\nFormat version                           : Version 2\nFormat profile                           : LC\nMuxing mode                              : ADTS\nCodec ID                                 : 15\nDuration                                 : 3 s 754 ms\nBit rate mode                            : Variable\nMaximum bit rate                         : 177 kb/s\nChannel(s)                               : 2 channels\nChannel positions                        : Front: L R\nSampling rate                            : 48.0 kHz\nFrame rate                               : 46.875 FPS (1024 spf)\nCompression mode                         : Lossy\nLanguage                                 : Russian\nAudio #2\nID                                       : 483 (0x1E3)\nMenu ID                                  : 1 (0x1)\nFormat                                   : AAC\nFormat/Info                              : Advanced Audio Codec\nFormat version                           : Version 2\nFormat profile                           : LC\nMuxing mode                              : ADTS\nCodec ID                                 : 15\nDuration                                 : 3 s 754 ms\nBit rate mode                            : Variable\nMaximum bit rate                         : 177 kb/s\nChannel(s)                               : 2 channels\nChannel positions                        : Front: L R\nSampling rate                            : 48.0 kHz\nFrame rate                               : 46.875 FPS (1024 spf)\nCompression mode                         : Lossy\nLanguage                                 : English\nMenu\nID                                       : 480 (0x1E0)\nMenu ID                                  : 1 (0x1)\nDuration                                 : 3 s 820 ms\nList                                     : 481 (0x1E1) (AVC) / 482 (0x1E2) (AAC, Russian) / 483 (0x1E3) (AAC, English)\nLanguage                                 :  / Russian / English\nMaximum bit rate                         : 3752000\n```\n. ",
    "SYugel": "@leandromoreira \nIt does work as expected when you play the video in the video tag. I have included a link to a codepen that shows the behavior.  However you will have to serve the video contained in the bugContent.zip above using an apache server to see it.\nIf you then attempt to seek to a time in the video it correctly seeks to that time.  You can use the frames.csv file also contained in the bugContent.zip to see frames and times in seconds for each frame in the mov.\nhttp://codepen.io/anon/pen/vKgByE?editors=1011\n. Hey @joaopaulovieira I confirmed this seems to no longer be an issue. . ",
    "rfilipo": "We're working on some GPL (free software) stuff. \nBut it's still alpha. If somebody wants to help it will come more quick.\nSee at\nhttps://github.com/Telll\n. ",
    "salmanmanekia": "@leandromoreira do you mean writing this variable to a file and then pointing to the file ?\n. ",
    "mkozlov1": "Clappr.Events.PLAYBACK_FRAGMENT_LOADED fired on fragment loading, not on fragment play.\n\n. Greate, frag_changed is that what i need.\nBut proper code is \njavascript\nplayer.core.getCurrentPlayback()._hls.on('hlsFragChanged', function(event, object) {\n  console.log(object.frag.sn);\n});\n. @leandromoreira yep!\n. ",
    "matheusrufca": "@paunadeu Hello Pau, did you succeed on playing DRM protected streaming on Clappr?. @leandromoreira Better if HLS. I'm testing Clappr on SmartTVs (Tizen, WebOS) and Clappr had better results playing HLS over DASH.. Thanks @kslimani!. Hi @kslimani , thanks for your message.\nI changed Clappr version to 0.2.73 and nested externalTracks config inside playback options but didnt solve nor show subtitles button.\nAm I missing something?\n\n. Hmm, thanks. what is weird is subtitles are working and when I set to hide via console works too.\nBut would be nice a native player handler for changing subtitles on streaming.\nI'm running out of time now, but I can contribute in near future on this feature.. Hello, @Impulso902 .\nOn Tizen SmartTV devices Clappr stop playing HLS streamings after update #0.2.78.\nYou can try using versions above 0.2.78 and see if works. \nI'm using on Tizen and WebOS devices and is working good with HLS streams.. ",
    "ewwink": "@leandromoreira how to do that? PLAYER_ERROR is not fired.\n```\n\n\nvar player = new Clappr.Player(\n{\n  source: \"http://example.com/bad.m3u8\",\n  parentId: \"#player\",\n  autoPlay: false\n});</p>\n<p>// need to play this\nplayer.on(Clappr.Events.PLAYER_ERROR, function() {\n  player.load(\"http://example.com/good.m3u8\");\n});\n\n``\n. I can see the error  in_events2.default.ERROR`\ndetails: manifestLoadError\ntype: networkError,\nis _events2.default.ERROR linked to Clappr.Events.PLAYER_ERROR ?\n. found temporary solution\n```\nvar retry = 1;\nvar player = new Clappr.Player({\n  source: \"http://example.com/bad.m3u8\",\n  parentId: \"#player\",\n  autoPlay: false,\nhlsjsConfig: {\n    xhrSetup: function(xhr, url) {\n      xhr.onerror = function() {\n        if(retry === 1) {\n          retry++;\n          console.log(\"error: do second try\");\n        }\n        else {\n          console.log(\"Playing failover\");\n          player.destroy();\n          player = new Clappr.Player({\n            source: \"http://example.com/good.m3u8\",\n            parentId: \"#player\",\n            autoPlay: true\n          });\n        }\n      }\n    }\n  }\n});\n. OK thank you very much.\n. I use https://cdnjs.com/libraries/clappr it hosted by cloudflare\n. you can't send cookie header with xhr also electron run on `file:///` or `localhost` and you can only set cookie on the same domain, \n. just note, sending 503 for `.ts` file will not remove `.m3u8` cache from browser.. yes it work, thanks @kslimani . To make it easier to remember the plugin name. i try to call `YoutubePluginControl` from `YoutubePlugin` like below but not work\nthis.YTControl = new YoutubePluginControl();\nthis.YTControl.render();\n```\ndo you think it is possible?. you are right I should convert it to core plugin, maybe I'll do it in the future. and thanks. for chrome you only need to add option mimeType: \"video/mp4\", but it not work in firefox maybe you should try add plugin Flashls.. you mean like this?\nvar player = new Clappr.Player({source: \"http://your.video/here.mp4\", parentId: \"#player\"});\nplayer.destroy()\nbut I want do it with plugin.. it seem the easiest way is rewrite the element using zepto\nonerror: function(e) {\n      $('#'+this.options.parentElement.id).html('<video src=...')\n}\none more question, is there way to fallback from clappr to native <video> tag on android? I have .m3u8 file which CORS is not allowed but it work with <video> tag and clappr not, I tried adding recycleVideo and playInline but still not work.. nevermind I will use Clappr.Browser.isMobile instead and @kslimani thanks for your support.. but when using Firefox desktop with Flash player set to \"Ask to Activate\" and domain has no permission to run flash the source will not played and Firefox not ask me to activate flash just see the black screen, that the reason I want to switch.. I think the changes is about core.mediaControl.container to core.activeContainer and not core.mediaControl but I quest the your problem is missing event CORE_ACTIVE_CONTAINER_CHANGED, you can try this simple plugin, DEMO\njavascript\nvar testPlugin = Clappr.UICorePlugin.extend({\n  name: 'test_plugin',\n  bindEvents: function() {\n    this.listenTo(this.core, Clappr.Events.CORE_ACTIVE_CONTAINER_CHANGED, this.reload);\n    this.listenTo(this.core.mediaControl, Clappr.Events.MEDIACONTROL_MOUSEMOVE_SEEKBAR, this.onMouseMove);\n  },\n  unBindEvents: function() {\n    this.stopListening(this.core, Clappr.Events.CORE_ACTIVE_CONTAINER_CHANGED);\n    this.stopListening(this.core.mediaControl, Clappr.Events.MEDIACONTROL_MOUSEMOVE_SEEKBAR);\n  },\n  reload: function() {\n    this.unBindEvents();\n    this.bindEvents();\n  },\n  onMouseMove: function() {\n    console.log('gg');\n  },\n});\n. related to issue https://github.com/clappr/clappr/issues/1754 the plugin need to listen on CORE_ACTIVE_CONTAINER_CHANGED event. yes its not compatible and you should ask the developer to fix it.. -1 is equal to auto. both are work you need to append the host of the m3u8 in URL. it used Referer protection but unfortunately it only check if in URL contain dwgoed11hdvfh.cloudfront.net/ not what hostname referer is.  :) . http://www.rsbdylgy.lucusvirtual.es/video.htm?dwgoed11hdvfh.cloudfront.net/. ",
    "marcoczen": "Thank you leandromoreira .\nI try now with the poster option.\nAlso,\nCan the source parameter below accept a php code,i.e. a dynamic source  ?\nIs the syntax below correct or must source always be hardcoded ?\nsource: \"<?php echo $moviesrc ?>\", \n. Update;\n<div id=\"clapprplayer\"></div>\n<script>\nvar player = new Clappr.Player({\nsource:\"<?php echo $moviesrc ?>\",\nparentId: \"#clapprplayer\",\nwidth: '470px',\nheight: '280px',\nloop: true,\nposter: \"/logo-video.png\",\nhideMediaControl: false\n});\n</script>\nThe logo does not appear.  It goes staright through to the error message \"Your browser does not support the playback of this video\"\n\nExpected Behaviour: The Logo appears first. I click the logo and then clappr appears to play the video.\n. Leandro,\nThis is the html code from Firefox -> View Page Source;\n```\ndiv id=\"webplayers\">\n\n \n\n    var player = new Clappr.Player({\n     source:\"http://testserver.testdomain.net:8008/show_video.php?file_id=20160625-001529-55692404\", \n     parentId: \"#clapprplayer\",\n     width: '470px',\n     height: '280px',\n     loop: true,\n     poster: \"images/logo-video3.png\",\n     hideMediaControl: false\n    });\n \n  end div webplayers \n```\n. Holy crap that worked !!! There is no more that error message \" \"Your browser does not support the playback of this video\" ..\n. Now, i can see the \"images/logo-video3.png\" with 3 dots in the centre.\nAnd when i click that image, the clappr  player appears and the video can play.\n\nBut when i click the fillscreen button ( bottom right ) , the whole player disappears ... the video is gone but the audio is still playing ....\n. The autoloop plays fine. Only when i fullscreen, the player disappears\n. Ok thanx a lot\n. Update: if you use the http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 as source the problem still persists - i.e., click the full screen button, the video disappears but audio is till playing.\n. Hi Leandro...\n1. Browser     -> Desktop. The web app is for desktops primarily.\n2. Access URL -> U mean if i can click on the link above ? Yes.\n3. Any idea about  Firebug ( [debug][t] 1:resize Object { width=874, height=0} );\n. So is there any css trick to override the height ? The video must still be playing bcos you can hear the audio...\nNote that the initial height and width is as per below;\nwidth: '470px',\nheight: '290px',\nSo when it goes fullscreen, its trying to read the monitor resolution and adjust accordingly ...so something goes wrong there ? the code sets the height to 0?\nMy monitor resolution is 1920x1080 by the way.\n. Leandro,\n1. IFrames - Yes, iframes is being used.\n2. CSS / JS - Is there anything i can do to ensure clappr css or js has the priority ?\n. Leandro,\nI clicked into the iframe (  on the jquery DialogBox ) and was able to get the player to go full screen ( not full fullscreen to the edge of the monitor )  but about an inch away from the edge of the monitor ... So this confirms its an iframe problem ?\n. Leandro ...\nIT WORKED ....  Adding allowfullscreen to the iframe tag allowed the fullscreen to work properly ...\nTHANKS !!!! PLS ADD THE TAG \"wontfix-ButIWillStillGetItToWorkForYou\"\n. Is there a paypal account we can make a contribution too ?\n:-)\n. ",
    "nesale": "We use hls for audio only. This problem annoys us too. I hope you can find a decision.\n. Also in IE11, I get the same \"error on event c10:flashready trigger - TypeError: Error #1009\"  Maybe there is a description of the error?\n. @towerz Windows 7 Pro SP1, Flash 22.0.0.210,  IE 11.0.9600.18376\nProvide access to the computer via teamviewer where the error persists.\n. ",
    "cinnabot": "Hi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n1. \u5982\u4f55\u81ea\u5b9a\u4e49 (How to Customize media control bar)\n2. Add basic control bar customization\n3. Question: custom MediaControl and custom Playback communication\n4. How to listen to events?\n5. Player does not set custom color on volume bar\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. Hi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n1. [FlasHLS] missing play event after starting paused LIVE stream\n2. Playback plugins are not respecting the order of preference\n3. clappr doesn't set type attribute for source tag with mimeType specified in safari\n4. Indicator is still showing if audioOnly is true\n5. Append multiple sources\nAlso, tjenkinson made a PR that close a similar issue, so it might be good to ask them for help.\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. Hi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n1. HTML5 playback state inconsistency on iOS\n2. iOS 10 Problem\n3. first player.seek() call does not work on ios 9\n4. stop/pause button is bugged with live dvr hls stream on iOS with Safari\n5. Playing and Pausing the video doesn't change the icon\nAlso, below are some developers who made PRs that close similar issues:\n- kslimani\n- tjenkinson\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nClappr does not work with Yandex browser on Windows 7\n\n\nNoOp Playback: Show error message on browser's current language\n\n\nHow to detect FlasHLS?\n\n\nno_op playback doesn't respect autoplay option\n\n\niOS 10 Problem\n\n\nAlso, NicholasAsimov made a PR that close a similar issue, so it might be good to ask them for help.\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. Hi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n1. Disable fullScreen and option to change it to fullWindow\n2. iOs full screen\n3. Full screen on double click (touch)\n4. If fullscreen and the media ends there is no button to leave full screen\n5. autoPlayVisible should receive parameter\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. Hi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n1. FlasHLS playback plugin not working on IE10\n2. Playback plugins are not respecting the order of preference\n3. [FlasHLS] error on event playback:bitrate trigger  w/ level selector plugin enabled\n4. How to use MEDIACONTROL_HIDE or MEDIACONTROL_SHOW event?\n5. Append multiple sources\nAlso, michaelcunningham19 made a PR that close a similar issue, so it might be good to ask them for help.\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\niOs full screen\n\n\nDisable fullScreen and option to change it to fullWindow\n\n\ndisabling full screen \n\n\niOS 10 Problem\n\n\niPhone iOS Safari play button doesn't return\n\n\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nWrong behavior for player.load() in Firefox.\n\n\nHLS not working in Chrome/Chromium\n\n\n[FlasHLS] error on event playback:bitrate trigger  w/ level selector plugin enabled\n\n\nQuestion about Firefox\n\n\niOS 10 Problem\n\n\nAlso, greenkeeperio-bot made a PR that close a similar issue, so it might be good to ask them for help.\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. Hi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n1. Error message for player.load() if Firefox\n2. [HLS] incorrect container dimensions after exit fullscreen mode\n3. Fullscreen event not fired on ExitFullscreen?\n4. Missing \"fullscreen\" event\n5. how to stop exit fullscreen\nAlso, below are some developers who made PRs that close similar issues:\n- tjenkinson\n- greenkeeperio-bot\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nRFC: Add support to manage audio/video/text tracks at Playback interface\n\n\nGet Bandwidth value during hls streaming\n\n\nHLS how to change audio track (language)\n\n\nList of events for GA\n\n\n\"Stretching\" HLS video\n\n\nAlso, greenkeeperio-bot made a PR that close a similar issue, so it might be good to ask them for help.\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. Hi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n1. Any way to use audio tag for HLS audio-only live stream\n2. html5_audio: use <audio>.canPlayType on canPlay() method\n3. Visualizing Sound\n4. Create default siding for audio only streams\n5. Merge HTML 5 video and audio playbacks\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. Hi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n1. HLS live not working on Chrome 46 for Android\n2. Incorrect buffer events with autoplay\n3. artificial time drift in live mode for native HLS (0.2.18)\n4. Playing and Pausing the video doesn't change the icon\n5. Restart HLS stream after it stopped playing\nAlso, tjenkinson made a PR that close a similar issue, so it might be good to ask them for help.\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. Hi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n1. load() new stream can't stop previous loaded stream\n2. autoPlay option broken in hls playback\n3. 0.2.14 HLS Chrome problem\n4. Problems loading HLS streamed by Adobe FMS 5 in Chrome\n5. iOS 10 Problem\nAlso, tjenkinson made a PR that close a similar issue, so it might be good to ask them for help.\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. Hi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n1. RTMP Stream documentation\n2. Live switching between RTMP and HLS\n3. Problems loading HLS streamed by Adobe FMS 5 in Chrome\n4. HLS: autoPlay doesn't work when there's jQuery instance on the page\n5. External RTMP - how to add\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. Hi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n1. If 'actualLiveTime' feature enabled, but stream type changes to \"VOD\", default back to normal timing\n2. Wowza Live stream and Clappr\n3. Bad request from live hls streams\n4. play button not working after stopped.\n5. HLS stream sometimes appear to be stuck\nAlso, tjenkinson made a PR that close a similar issue, so it might be good to ask them for help.\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. Hi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n1. Live switching between RTMP and HLS\n2. Failure to seek to any frame but a keyframe in MOV files.\n3. Live HLS \"EVENT\" playlist\n4. Plugin architecture help\n5. How to listen to the event when playback is triggered?\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. Hi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n1. pass config to hls.js\n2. lots of errors\n3. How to set cookies\n4. Cannot Build With Custom hls.js?\n5. Hide xhr-loader.js errors\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\n[FlasHLS] missing play event after starting paused LIVE stream\n\n\nWhat is the proper way to force FlasHLS?\n\n\nDVR on Safari\n\n\n[Clappr.Log] set log level to disabled\n\n\nHow to detect FlasHLS?\n\n\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nClappr enters in live mode and doesn't play the video on Chrome Android\n\n\nHLS live not working on Chrome 46 for Android\n\n\nClappr integration with ionic issue\n\n\nCannot read property 'start' of undefined when playing HLS stream\n\n\nAppend multiple sources\n\n\nAlso, greenkeeperio-bot made a PR that close a similar issue, so it might be good to ask them for help.\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nRestart HLS stream after it stopped playing\n\n\nHLS stream sometimes appear to be stuck\n\n\nIf 'actualLiveTime' feature enabled, but stream type changes to \"VOD\", default back to normal timing\n\n\nSomething wrong with seeking back in hls stream (hlsjs + dvr) with moving window\n\n\nHls playback error being triggered, but hlsjs still recovers\n\n\nAlso, tjenkinson made a PR that close a similar issue, so it might be good to ask them for help.\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nstop/pause button is bugged with live dvr hls stream on iOS with Safari\n\n\nMedia Control: Allow pausing on HLS DVR stream\n\n\nFlasHLS playback: player.getCurrentTime() is not consistent with events\n\n\nControl bar only shows stop button in HLS stream\n\n\niPhone iOS Safari play button doesn't return\n\n\nAlso, below are some developers who made PRs that close similar issues:\n\n\nkslimani\n\n\ntjenkinson\n\n\nGuilhermeMedeiros\n\n\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nFullscreen option is not available on iPad\n\n\nDoes clappr parse url params for [something]=XmYs and jump to it?\n\n\niOS 10 Problem\n\n\nDouble Tap fullscreen on chrome android\n\n\nChrome stops downloading when HLS file fails downloading\n\n\nAlso, tjenkinson made a PR that close a similar issue, so it might be good to ask them for help.\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nSupport multiple sources with different user-provided mime types\n\n\nnull reference if source is null\n\n\nclappr doesn't set type attribute for source tag with mimeType specified in safari\n\n\nAttempt to load new video leads to TypeError: setting a property that has only a getter\n\n\nWhen specifying a mime type with load() and hls stream <audio> tag is added instead of <video>\n\n\nAlso, tjenkinson made a PR that close a similar issue, so it might be good to ask them for help.\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nMediacontrol color for buttons does not change poster-icon color\n\n\nPlayer does not set custom color on volume bar\n\n\nCould source be an image?\n\n\nChrome doesn't play HLS with height/width set to 100%\n\n\nAdd basic control bar customization\n\n\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nability to disable console messages\n\n\nHLS stream sometimes appear to be stuck\n\n\n[FlasHLS] Inconsistent state when pausing immediately after calling play\n\n\ngetting cross domain error on hls stream\n\n\nFlashHLS not working in IE10\n\n\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nHLS not working in Chrome/Chromium\n\n\niOS 10 Problem\n\n\nError message for player.load() if Firefox\n\n\nCant play live from adobe encoder just on clappr\n\n\n[FlasHLS] error on event playback:bitrate trigger  w/ level selector plugin enabled\n\n\nAlso, greenkeeperio-bot made a PR that close a similar issue, so it might be good to ask them for help.\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nJank/Glitch in HLS playback\n\n\nIs there a way to play .ts file without .m3u8?\n\n\nAudio only playback, no video\n\n\nIs a varaible with similar values to m3u8 file supported ?\n\n\nAdd preload embed parameter to handle html5 plugin prefetch\n\n\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nLast release (0.2.14) cors problem (only with Chrome)\n\n\nCross domain failures new to versions 0.2.14 - 0.2.28\n\n\nplayer.load() do not clears previews requests\n\n\nList of events for GA\n\n\nStream keeps loading. \n\n\nAlso, greenkeeperio-bot made a PR that close a similar issue, so it might be good to ask them for help.\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nVideo freezes in the first buffering on iPhone using Safari\n\n\nWont go live after used the DVR buffer\n\n\nHow to get the buffer length on live HLS video?\n\n\nBuffer events are not being fired on 0.2.30\n\n\nHow to listen buffering events ?\n\n\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nRTMP is not supported by firefox\n\n\nyour browser does not support playing this video, Try to use different browser\n\n\n\"Live\" icon is gone in 0.2.24 when using clappr-level-selector\n\n\nError on Mozilla Firefox 33.0.2\n\n\nBlack screen, I need a help.\n\n\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nLG G3 mobile video error\n\n\nMobile browser support\n\n\nMobile browsers can't receive events while playing HLS\n\n\nyour browser does not support playing this video, Try to use different browser\n\n\nFirefox for android is not detected as mobile browser properly\n\n\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. \nHi, I have some suggestions to help solving this issue!\nHere is a list of similar issues:\n\n\nCannot Build With Custom hls.js?\n\n\nhls play error Uncaught TypeError: Cannot read property 'call' of undefined\n\n\nClappr 0.2.35 VOD HLS issue when used inside iframe\n\n\nStream keeps loading. \n\n\nAdd starting level parameter to HLS playback\n\n\nAlso, tjenkinson made a PR that close a similar issue, so it might be good to ask them for help.\nHope this is useful!\nCheers,\nCinnabot.\nPS: Liked my suggestions? Install me in your repository! Visit: getcinnamon.io.\n. ",
    "tobiasandersen": "Ok thanks!\n. Great, thank you!\n. ",
    "Sarabveer": "hmm, doesnt seem to be working, let me do some testing\n. For some reason, it stops the chromecast icon from showing, and the level selector never shows up. How can I enable debug mode on Clappr.\nEDIT: Chromecast, Level Selector is still not showing, nothing in Debug logs.\nEDIT2: this happens when i try to stream to chromecast Uncaught TypeError: Cannot set property options of #<e> which has only a getter and [warn][chromecast] media error Object {code: \"session_error\", description: \"LOAD_CANCELLED\", details: Object}\nEDIT3: Looks like the plugin didnt work, even when Level Selector was the only one\n. Nope, latest clappr and everything \n. did not for me, even when i used cdn.clappr.io. Does it work on live HLS streams?\n. ",
    "giaule": "Thanks support,\nBecause link form google allow by IP address, then you can't access file.\nI had fixed, add  mimeType: \"video/mp4\" this is work.\nThanks support.\n. ",
    "Kornflexx": "It doesn't seems to work :(.\nI use clappr in a desktop web app (with electron: chrome engine embed)\n. Ok I used that: https://www.npmjs.com/package/electron-cookies\nWhen I print document.cookie jsessionid is in it. But I still have the same issue (401 unauthorized from distant api).\n. The code is minified :/, it's point here : \n{\n            key: \"readBits\",\n            value: function(t) {\n                var e = Math.min(this.bitsAvailable, t)\n                  , n = this.word >>> 32 - e;\n                return t > 32 && o.logger.error(\"Cannot read more than 32 bits at a time\"),\n                this.bitsAvailable -= e,\n                this.bitsAvailable > 0 ? this.word <<= e : this.bytesAvailable > 0 && this.loadWord(),\n                e = t - e,\n                e > 0 ? n << e | this.readBits(e) : n\n            }\n        },\n(t) of function(t) is underline\n. ",
    "alexvasiliev": "Windows 7 SP1\nChrome 51.0.2704.103 m\nclappr from https://cdn.jsdelivr.net/clappr/latest/clappr.min.js\nso, this is playlist that clappr get\nEXTM3U\nEXT-X-PLAYLIST-TYPE:EVENT\nEXT-X-TARGETDURATION:10.653000\nEXT-X-ALLOW-CACHE:NO\nEXT-X-MEDIA-SEQUENCE:0\nEXTINF:11.907,\nchunk.ts?hash=test_ok&chunk=1468415381914_1190700\nEXTINF:12.087,\nchunk.ts?hash=test_ok&chunk=1468415393941_1208700\nEXTINF:11.706,\nchunk.ts?hash=test_ok&chunk=1468415406129_1170600\nEXTINF:11.859,\nchunk.ts?hash=test_ok&chunk=1468415417950_1185900\nEXTINF:11.904,\nchunk.ts?hash=test_ok&chunk=1468415429913_1190400\nEXTINF:9.9375,\nchunk.ts?hash=test_ok&chunk=1468415441865_993750\nEXTINF:9.94,\nchunk.ts?hash=test_ok&chunk=1468415451878_994000\nEXTINF:9.9325,\nchunk.ts?hash=test_ok&chunk=1468415461898_993250\nEXTINF:11.889,\nchunk.ts?hash=test_ok&chunk=1468415471929_1188900\nEXTINF:9.92,\nchunk.ts?hash=test_ok&chunk=1468415483909_992000\nEXTINF:9.925,\nchunk.ts?hash=test_ok&chunk=1468415493918_992500\nEXTINF:11.442,\nchunk.ts?hash=test_ok&chunk=1468415504366_1144200\nEXTINF:11.889,\nchunk.ts?hash=test_ok&chunk=1468415515892_1188900\nEXTINF:9.735,\nchunk.ts?hash=test_ok&chunk=1468415528057_973500\nEXTINF:10.653,\nchunk.ts?hash=test_ok&chunk=1468415539335_1065300\nclappr requesting first 3 chunks and than keep requesting playlists while #EXT-X-MEDIA-SEQUENCE is not increased\nand clappr doesn't play more than first 3 chunks in that playlist\n. http://dailymotion.github.io/hls.js/demo/ working fine\n. same as http://dailymotion.github.io/hls.js/demo/\nall is fine\n. The problem wasn't in event playlist support. It was in my misunderstanding of Clappr logic.\nClappr loading not the first 3 chunks in playlist, but last 3 chunks.\nAnd player.getDuration() or player.seek() answers that there is only 3 chunks available.\nBut if i turn controls on i can load video before that 3 last chunks.\nThe only question now is how can i force Clappr load all chunks in playlist, using Clapprs API?\n. I am creating player with\nvar player = new Clappr.Player({source: \"http://blah.m3u8\", parentId: \"#player\", autoPlay: true, chromeless: true});\nand i want all chunks avalible from \"http://blah.m3u8\" by using\nplayer.seek();\n. Yes, it raises 2 errors:\n1) GET http://blah/playlist.m3u8 401 (Unauthorized)\n2) XMLHttpRequest cannot load http://blah/playlist.m3u8. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://blah' is therefore not allowed access. The response had HTTP status code 401.\nfull stream from wireshark:\nGET /blah/playlist.m3u8 HTTP/1.1\nHost: blah\nConnection: keep-alive\nOrigin: http://blah\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.104 Safari/537.36\nAccept: /\nDNT: 1\nReferer: http://blah/index.html\nAccept-Encoding: gzip, deflate\nAccept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4\nHTTP/1.1 401 Unauthorized\nConnection: Close\nWWW-Authenticate: Basic realm=\"AxxonNext\"\nsame problems on http://video-dev.github.io/hls.js/demo/\n. how can i add http auth header to clappr hls request?. done by custom loader.\nquick solution with config for base http auth:\nhttps://pastebin.com/iN8Gi9Fj. ty for quick answer. ty for quick answer. ",
    "cheluskin": "No solution to play from start playlist?. ",
    "anacrolix": "I'm getting this behaviour too. I'm using whatever version is on the CDN. Does it have the fix?\n. ",
    "sarat1669": "Installing flash solved the issue. Thank you. I need some info. I am porting an application from hls.js to Clappr as I need to use rtmp streams along with hls. I used the following in my application\nhls.abrController.lastfetchduration\nhls.abrController.lastbw\nHls.Events.FRAG_CHANGED\nHls.Events.FRAG_LOADED\nHls.Events.ERROR\nHow can i access these through Clappr?\n. ",
    "funkytaco": "So will Clappr always require Flash? Flash support is going away in most browsers...\n. Ah ok, thanks. I've noticed VXG player works without flash, but they use a Chrome plugin. \nhttps://github.com/videoexpertsgroup\nhttps://www.videoexpertsgroup.com/chrome-media-player-plug-in/\nIs there any way to do this with Clappr, without using Flash?\n. Okay, thank you. I guess I will wait and see if RTMP will work without flash someday!\n. ",
    "eeggenberger": "I think we're experiencing the same problem with the FlasHLS fallback on IE11 under Win7. Autoplay works, but as soon as we call load() from our code, the playback won't start in IE11, neither with autoplay enabled, nor by calling play(). The strange thing is, that as soon as I open the Developer Tools, everything works as expected.\nI've setup this page as an example:\nhttp://clappr.devel.techcast.com/index.html\nIf I open this page in the IE11 Win7 VM from modern.ie, the PLAYBACK_READY event is never fired (except for some very rare cases). With the Developer Tools active, the event is fired every time, and the playback starts as expected.\nPure autoplay works (http://clappr.devel.techcast.com/autoplay.html), but it stops working as soon as a call to load() is involved (http://clappr.devel.techcast.com/load.html).\nWe need to use load() as we're using Clappr for live streaming, and we have to play an intro video as long as the live stream isn't available. As soon as the live stream is available, we want to switch to it using load(). The only workaround I can currently think of, is to destroy the player and create a new instance with autoplay enabled. Not pretty, but might solve the problem for me.. @kafeltz, the call to load() causes the player to break, so of course removing it seems to resolve the problem, but it's still not possible to change the player's source once it has been initialized.. I've passed load() an object because it was done this way in the examples above. I've changed that now, but the result is still the same. load() doesn't work in IE11 on Win7, unless you open the developer tools window. Then it suddenly works, which makes it hard to debug the problem.. We're now working around this problem by destroying the player with destroy() and creating a new one in IE on Win7, and thus avoid using load().. Hi, has there been any progress with this or an ETA?. Is there any progress on this issue?. ",
    "eagsalazar": "@leandromoreira \nThis is not working for me (callback never called) although audio plays back correctly and other events like Clappr.Events.PLAYER_PLAY work fine.   \nI know this stream has HLS timed metadata because I can see it correctly being produced if I try HLS.js and their Hls.Events.FRAG_PARSING_METADATA event with the same m3u8 url.\nthis.player.on(Clappr.Events.PLAYBACK_LOADEDMETADATA, data => {\n    console.log('PLAYBACK_LOADEDMETADATA: ', data)\n})\nFor your testing, the m3u8 url is '//gimmetest1.s3.amazonaws.com/gimme1/gimme1live.m3u8'.. Thanks @leandromoreira!  That did work and I am seeing the events.   However the payload does not include the timed metadata I expected.  In particular I was hoping for id3 tag data.   Also I was expecting an event at the start of each aac segment and on track changes but I am only seeing this event when the stream first loads.   This does work in HLS.js and JWPlayer so I feel confident the timed metadata is in the stream.\nAm I misunderstanding the significance of this event?. ",
    "jstnkrr": "We were able to listen for ID3 metadata using (similar to):\n```\nif (\"hls\" == clappr.core.getCurrentPlayback().name) {\n        clappr.core.getCurrentPlayback()._hls.on('hlsFragParsingMetadata', function(event, object) {\n\n            if (!object.samples) return;\n\n            var id3 = object.samples;\n\n            ...\n         }\n\n}\n```\nBear in mind the metadata is delivered all at once as the fragments are loaded, and not in a synchronized fashio as per JW.  For us this suited our needs.. #1285 FYI I managed to attach an ID3 metadata handler on Flash playback. . I'm sorry: PLAYBACK_LOADEDMETADATA does fire, but does not contain any ID3 metadata. And it only fires when loading the first fragment.. Actually I may have solved this on my own.\nClappr's HLSPlayer.swf seems to have a similar events API to the Chromless player.  \nI added a new emitter in playbacks/flashls/flashls_events.js:\nid3Updated(id3Data) {\n    Mediator.trigger(`${this.instanceId}:id3updated`, id3Data)\n }\nI also added listeners in flashls.js to emit a corresponding playback:id3updated event.  I can now listen to the event in my app.\nI'm not sure if it's better to use the PLAYBACK_LOADEDMETADATA event, so for now I created a separate one.  Would a new event like PLAYBACK_UPDATEDMETADATA work better?\nFor now I'll close this issue. I'm happy to discuss further if anyone is interested.. ",
    "aolko": "Obviously in the README and in the plugin list page\n. not fixed\n. still not solved, it's a security threat, yknow\n. see screenshot above (come on, it's obvious), can be used for stream hijacking\n. @tjenkinson can you please provide more relevant example?\n. ",
    "IlianYotov": "Yes we can close it. I try with hls config and max retries.\n. ",
    "marbleman": "Had the same issue but the latest 0.2.64 solved it for me with an updated calculation for maxBufLen. In older versions maxBufLen seemed to screw up with size in bytes or seconds and came up with the minimum of 600 seconds and 60MByte, which was defacto ALL for short clips...\nHowever, to adust the buffer length, it is necessary to set the option inside hlsjsConfig instead of the global maxBufferLength-Option (which gets not transferred)\nsource: 'yourHLSSource' ,\n    hlsjsConfig: {\n            maxBufferLength: 20\n     }\nSee https://github.com/clappr/clappr/issues/689 for details\n. Addition: It's getting more confusing...\nOn Chrome 63.0.3239.132 onReady will fire for an m3u8 but only if 'poster' is NOT an empty string, null or missing in the config object. Firefox and Safari still do not fire onReady in any case.... And onReady fires immediately when you hit the \"Run\" button that evaluates the code? For me it does not! Not even on Firefox on macOS... It just fires when I click the video to play (at the same time as onPlay)... \nResults as:\nN: onReady fires not on player ready but only together with onPlay \nY: onReady fires correctly when player is ready (and still idle... so independent of onPlay)\nTested so far on:\nWindows 7:\n   - Firefox 57.0.4: progressive: Y, m3u8: N\n   - Chrome 63.0.3239.132: progresssive: Y , m3u8: Y (but only if poster paremeter is not empty)\n   - InternetExplorer 11.0.9600: progressive: Y, m3u8: Y (even if poster is empty! Amazing: haven't seen something working on IE that fails elsewhere for years! ;)\n   - Opera 50.0.2762.67 : progresssive: Y , m3u8: Y (but only if poster paremeter is not empty - same as Chrome) \nmacOS 10.12.6 (Sierra):\n    - Safari 11.0.3: progressive: Y, m3u8: N \n    - Firefox 58.0 : progressive: Y , m3u8: N\n    - Chrome 63.0.3239.132: progressive: Y, m3u8: N \nWill test on Win10 later but expect a similar behaviour. It is somehow odd that Chrome behaves different on macOS and Windows. This issue appears to me as if some sort of exception keeps clappr instantiation from reaching onReady state - but I cannot see any. I have also checked isReady and it says 'false'.. ",
    "fuzegit": "Please try\njavascript\nsource: 'yourHLSSource' ,\nhlsjsConfig: {\n    maxMaxBufferLength: 20 // set 20 sec\n}\nDefault maxMaxBufferLength is 600 seconds.\nit works on 0.2.64\n. Yes, i tried different sources. Currently checked to mp4 files - is not working. And the browser console empty. This happens when a player start in the flash mode. In html5 mode, all works fine. And so it began after upgrading to Opera version 43.\nSorry for bad english :)\nupd.\nProbably the problem is still in the browser, I'm sorry.\nhttp://forums.opera.com/discussion/comment/15257833. > I changed your title to say more specifically what the issue is about, do you agree?\nYes of course\n\nthere was an issue where people were discussing some problems with Linux + some browsers, the problem though was mostly related to codec problems at the browser.\n\nYes, it codec problems at the browser. But player in flash mode not work. hls and mp4 too. \n\nhave you tried this solution ?\n\nNot yet, but I'll try\n@leandromoreira, @kslimani, thanks for answers.. ",
    "Al3x4nd3r": "Thanks you, i open a issue at dailymotion for this: https://github.com/dailymotion/hls.js/issues/668\n[]`s\n. ",
    "mrbar42": "some of the changes in the hls.js 0.6.x  are not backward compatible.\nIs it planned to bump the major semver when integrating with the new hls.js?\n. ",
    "sokra": "it's documented here: http://webpack.github.io/docs/configuration.html#externals last note\n. js\nexternals: {\n clappr: {\n  amd: 'clappr',\n  commonjs: 'clappr',\n  commonjs2: 'clappr',\n  root: 'Clappr'\n }\n}\nif it's an UMD plugin\n. Sure. Send a PR.\n. Array of array?\n[[\"clappr\"], [\"Clappr\"]]\n. ",
    "DKarakis": "@leandromoreira thank you for replying back. I solved the problem. It turned out to be I was failing while my security check. Nothing related with the product itself. Have a good day!\n. ",
    "nhurf": "Thank you, now it's ok\n. ",
    "ilimaan": "Hello @\nI've the same issue. How did you fixed it for your case?\n@leandromoreira : Can you tell me which function should I unquote?\nThanks,. Look at the code at top. 'ltrgHeUptt()' is not a function. It's only the result of the obfuscation.. Yes, but player should get right source at load. That code is only obfuscated code.\nThe same source : <?php echo($gethttptitle . \"()\"); ?> works fine on jwplayer.. Which console? \nHow to debug the player to get more information about the error?\nThank you,. There is no error in console. You can see it here..\nAnd if I replace : \nvar player = new Clappr.Player({\n                    source: '<?php echo($gethttptitle . \"()\"); ?>',\n                    parentId: '#player',\n                    preload: 'auto',\n                    autoPlay: true,\n                    width: '640px',\n                    height: '360px'\n                            });\nWith Jwplayer setup (same source) it plays fine : \njwplayer(\"player\").setup({\n file: <?php echo($gethttptitle . \"()\"); ?>\n        },\n        allowfullscreen: 'true',\n        allowscriptaccess: 'always',\n         stretching: \"fill\",\n        hlshtml: true,\n        type: \"hls\",\n        fallback: true,\n        androidhls:true,\n        autostart: true \n    });. ",
    "rootscript": "@leandromoreira Thank you, that is correct & makes sense. (and my errors go away)\nWhen using Clappr as a node_module, a user might expect that resource files like .ttf files would be local, and to be able to use Clappr in an offline mode (without errors).\nAre there more resource files that are pulled from the net? or is this the only one?\nWould be nice to have the option to npm i clappr with all resources local - Does that make sense to you?\n. @kslimani Thank you - That makes sense  - Using baseUrl: with the files from  node_modules Clappr dist.  All seems quite obvious now, looking back :o)\n. ",
    "mohsinworld": "How to crack this website? bioscopelive.com. How can I play this? http://cdn-livetv1.metube.id/hls/rcti_240/index.m3u8 When I browse normally it starts downloading but can't play using a player. Please help me. Thanks. ",
    "Power2All": "Here a few screenshots from FireFox.\nYou see it also downloads the 240p parts, and when watching the video, those parts are played when it was unable to grab the 1080p variant.\nThe video's are being given in a m3u8 with 240p, 480p, 720p and 1080p option with the level selector plugin.\n\n\n. Same problem happened with FlowPlayer demo page.\nI did a little modification, fixed the \"buffering\" of the HLS stream, and that seemed to do the trick.\nI'm not sure why it happens in NGINX, that eventually it stops downloading the segments...\nIf anybody could advice me, that would be appreciated :)\n. ",
    "rshmelev": "unfortunately I cannot provide you with URL to the stream (will probably be able to do it later) however this is how chunklist looks like:\n```\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-TARGETDURATION:10\nEXT-X-MEDIA-SEQUENCE:117\nEXTINF:2.0,\nmedia_w1081758558_117.ts\nEXTINF:2.0,\nmedia_w1081758558_118.ts\nEXTINF:2.0,\nmedia_w1081758558_119.ts\n```\nHope that helps\n. hello everyone, one of latest clappr versions (incl. latest hls.js) fixed the issue.\nnow playback is smooth and pleasant, thank you!. ",
    "PietroI": "On the Safari it seems to be OK and probably it is some stream fault. Where can be a issue?\n. ",
    "Pmant": "Can confirm this. Jumping in the Timeline fixes it, so it's not a content error. However it's only ~0.5sec per 10 minutes video. Using Chrome 56 64bit Windows.. I couldn't notice any sync issues with your source, even so it's not easy to tell if there is 0.5s lag in this video. The source where I noticed it is a bit different since it is AES-128 encoded and and it is a single file using BYTERANGE requests.\n```#EXTM3U\nEXT-X-VERSION:4\nEXT-X-PLAYLIST-TYPE:VOD\nEXT-X-INDEPENDENT-SEGMENTS\nEXT-X-TARGETDURATION:14\nEXT-X-MEDIA-SEQUENCE:0\nEXT-X-KEY:METHOD=AES-128,URI=\"key.php\"\nEXTINF:8.333333,\nEXT-X-BYTERANGE:609684@0\nmedia.ts\nEXTINF:8.333333,\nEXT-X-BYTERANGE:406644@609696\nmedia.ts\n```. Yes it's definitly there with my AES-128 byte-range source.. ",
    "sabarasaba": "Ah brilliant, thats a bit nicer. Cheers man.\n. ",
    "cjazinski": "@leandromoreira what do you mean default HLS playback? Clappr.HLS instead of Clappr.FlasHLS ?. ",
    "nburt": "+1. We've written our own custom media controls that don't have the fullscreen link but users can still access fullscreen mode by double clicking on the player. It would be great if there was an option in the player's constructor to not allow fullscreen mode.\nFor example in the YouTube Iframe API there is an \"fs\" option that will enable/disable it: https://developers.google.com/youtube/player_parameters. ",
    "alex4buba": "Trying to disable the full screen option, tried passing &fs=0 on the end of the URL but no luck.\nTried also with the code below, it is ignored, Any other suggestion?\nvar player;\n    function onYouTubePlayerAPIReady() \n    {\n        player = new YT.Player('ytplayer', \n        {\n            height: '80',\n            width: '320',\n            frameborder: '0',\n            fs: '0',\n            videoId: YTclip\n        });   \n    }. ",
    "kulab45": "@kslimani It's working! I just upgrade flash player on my PC then the player is working.\nThank you very much.\n. ",
    "DiegoZurita": "Thanks, works fine!\n. +1. ",
    "sexysat": "@leandromoreira  I am using prebuild cdn version\nThis URL http://www.sexytv.live/clappr-issue.htm does not work for me on both Android and Chrome Linux\nUsing Clappr 0.2.63 works but not 0.2.64\n. Interestingly that fails also with the same error :\nhttp://www.sexytv.live/clappr-issue.htm?t=1. I switched to the cdnjs version instead of jsdelivr and it works ok with that. ",
    "rgroothuis": "I've not seen yet that the onStop event is called as the streaming stops randomly, so it is difficult to test. So I was using the stop button to simulate the situation. When I press the stop button the message box is displayed but the stream doesn't start playing again. After your feedback the problem can be split into two parts:\n1) which event is called when the stream stops playing? \n2) how can I restart the stream streaming again? Which method needs to be executed and how? \nHow can I debug this situation, is there a mechanism to log the Clappr events/errors to the event window or so? \nThanks again for your support \n. Thanks will look into this. Do you have a piece of example code that shows how to use your suggestions? Because the \"this.player4.play();\" call doesn't start the stream again. \n. Debug has been enabled, I pressed the stop button. I see the messagebox popping up, this is good, but then the play() command is not working. Debug info:\n[debug][e] stop 0\nlog.js:67 [error][e] error on event stop trigger - TypeError: Cannot read property 'play' of undefined\n    at e.onStop (http://x.x.x.x/internal2.html:52:70)\n    at i (https://cdn.jsdelivr.net/clappr/latest/clappr.min.js:1:2590)\n    at p (https://cdn.jsdelivr.net/clappr/latest/clappr.min.js:1:2930)\n    at e.t.trigger (https://cdn.jsdelivr.net/clappr/latest/clappr.min.js:1:4151)\n    at e._onStop (https://cdn.jsdelivr.net/clappr/latest/clappr.min.js:4:26327)\n    at i (https://cdn.jsdelivr.net/clappr/latest/clappr.min.js:1:2534)\n    at p (https://cdn.jsdelivr.net/clappr/latest/clappr.min.js:1:2930)\n    at e.t.trigger (https://cdn.jsdelivr.net/clappr/latest/clappr.min.js:1:4151)\n    at e.stopped (https://cdn.jsdelivr.net/clappr/latest/clappr.min.js:3:16394)\n    at i (https://cdn.jsdelivr.net/clappr/latest/clappr.min.js:1:2534)\nThis is the code I'm using: \nvar player4 = new Clappr.Player({\n    events: {\n            onStop:  function() { alert(\"I am an alert box!\"); this.player4.play(); }\n    },      \n    source: \"http://x.x.x.x./hdmistream01.m3u8\", \n    width: 320,\n    height: 180,\n    autoPlay: true,\n    actualLiveTime: true,   \n    parentId: \"#player4\"});\nWhen using: \n                onStop:  function() { alert(\"I am an alert box!\"); player4.play(); }\n(removed the this before player4.play())\nI get the following debug info: \n[debug][Container] container:stats:report Object {startupTime: 437, rebuffers: 4, rebufferingTime: 359, watchingTime: 405, level: 0}\nlog.js:67 [debug][e] stop 0\nlog.js:67 [debug][hls] playback:play:intent\nlog.js:67 [debug][Container] container:mouseenter\nLooks lik the play command is working according to the debug screen but I do not get any streaming! This is the picture I get: \n\nAny suggestions what I'm doing wrong? \n. No, sorry, that is not the solution, I get an error now. Again I see the alert box so the event is occurring when I've pressed the stop button but the streaming doesn't start automatically. \nThe code:\nvar player4 = new Clappr.Player({\n    events: {\n            onStop:  function() { alert(\"I am an alert box!\"); window.myClappr['player4'].play(); }\n    },      \n    source: \"http://x.x.x.x/hdmistream01.m3u8\", \n    width: 320,\n    height: 180,\n    autoPlay: true,\n    actualLiveTime: true,   \n    parentId: \"#player4\"});\nThe debug info: \n[debug][e] stop 0                                    log.js:67 \n[error][e] error on event stop trigger - TypeError: Cannot read property 'player4' of undefined(\u2026)\nAnd when I use:\nvar player3 = new Clappr.Player({\n    events: {\n            onEnded:  function() { window.myClappr['player3'].play(); }\n    },      \n    source: \"http://x.x.x.x/hdmistream02.m3u8\", \n    width: 320,\n    height: 180,\n    autoPlay: true,\n    actualLiveTime: true,   \n    parentId: \"#player3\"});\nI get the following debug info:\n[debug][e] stop 2.342674                           log.js:67 \n[debug][Container] container:mouseenter\n. Thanks again for your suggestion. I expect it is indeed a knowledge issue on my side. Still learning :-)\nUnfortunately this doesn't do the trick as well. In the debug window I can see the call to the play method but the stream doesn't start streaming again :-(\nDebug info: \n[debug][e] stop 0                             log.js:67 \n[debug][hls] playback:play:intent\nThe stop 0 is the debug line that shows I've pushed the stop button. And i assume that the playback:play:intent is the method to tell Clappr to start streaming again. \nIf I press the play button then I get the following debug info:\n[debug][e] play     log.js:67\n[debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}       log.js:67\n[debug][hls] playback:fragment:loaded Object {payload: ArrayBuffer, frag: Object, stats: Object}     log.js:67\n[debug][MediaControl] mediacontrol:show MediaControl     log.js:67\n[debug][Container] container:mediacontrol:show\nDoes this maybe helps debugging this? Can I not simulate a press on the play button? Maybe this is the solution to the problem. \nPiece of code that I tested:\n```\nwindow.myClappr = window.myClappr || {};\nvar player4 = new Clappr.Player({\n    events: {\n            onStop:  function() { alert(\"I am an alert box!\"); window.myClappr['player4'].play(); }\n    },    \n    source: \"http://x.x.x.x/hdmistream01.m3u8\", \n    width: 320,\n    height: 180,\n    autoPlay: true,\n    actualLiveTime: true, \n    parentId: \"#player4\"});\nwindow.myClappr.player4 = player4;\n```\n. Also what I noticed when I press the play button again it that the \"Live\" text is not shown on the player when I move the mouse over the player. See screenshot attached. Does this info maybe help in analysing what is going on? \n\n. Is there any update on this subject and/or other suggestion that I can try? \nCan a restart/reconnect feature not be build into the Clappr application itself? \nWhat I'm curious about is why the stream stops streaming? How can I debug that. Challenge is that it does happen at random intervals, so looking at the screen to see it happening is not possible. \nAlso when an onError event occur and I execute the play() methode it looks like it starts playing older files and not the live stream. This is also a bit strange. \nHope we can make some progress on this one as I really need a 24/7 monitoring functionality. \n. It looks like your suggestion is indeed an improvement, the stream keeps playing. But the issue is (as reported before) when the stream is restarted it doesn't show the work \"live\" on the screen anymore. And it doesn't stream the live stream anymore, it streams something that was stored on the hard disk or so. \nThis is the code I'm using:\nvar player3 = new Clappr.Player({\n    events: {\n            onStop:  function() { setTimeout(() => player3.play(), 0) },\n            onError:  function() { setTimeout(() => player3.play(), 0) },\n            onEnded:  function() { setTimeout(() => player3.play(), 0) }\n    },      \n    source: \"http://x.x.x.x/hdmistream02.m3u8\", \n    width: 320,\n    height: 180,\n    autoPlay: true,\n    actualLiveTime: true,   \n    parentId: \"#player3\"});\n\nAny other suggestion on how to continue the live stream when the stream stopped for whatever reason? \n. More than willing to try to help and find out what is going on. Question is how exactly, I'm not an expert on Javascript and stream. I'm still investigating and learning a lot on this subject. \nI've started my test page again which is streaming 2 HLS streams into 4 Clappr players (I'm planning to build a big matrix/mosaic web-page for 24/7 monitoring). \nI've disabled the Clappr debug info as it is giving to much info for now. I've added my own console.log statements to debug what is going on. \nNavigated to http://x.x.x.x.x/internal2.html\nStreaming page started, monitoring results!                                                          internal2.html:23 \n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]             log.js:67\nAfter some time I got the above error message in my console. Hope this gives an indication why the stream stopped working. \nWhen I start the web-page on different page or on a different computer the 2 streams in the 4 players are streaming the live content. Meaning that the HLS backend (generating the HLS files with ffmpeg) is still working. \nThis is my current java script code, see below. Depending on the event a different message is written to the console for debugging purposes. \nvar player3 = new Clappr.Player({\n    events: {\n            onStop:  function() { console.log('stream onStop occurded!'); setTimeout(() => player3.play(), 0) },\n            onError:  function() { console.log('stream onError occured!'); setTimeout(() => player3.play(), 0) },\n            onEnded:  function() { console.log('stream onEndedi occured!'); setTimeout(() => player3.play(), 0) }\n    },      \n    source: \"http://172.16.200.40/reneg/hdmistream02/hdmistream02.m3u8\", \n    width: 320,\n    height: 180,\n    autoPlay: true,\n    actualLiveTime: true,   \n    parentId: \"#player3\"});\n\nAt this moment apart from the error message listed above the stream with player3 (see above code) is still playing and nothing has been written at the console. \nHow can I help you in debugging the 2 items you mentioned?\n. I'm now using this piece of javascript code:\nvar player3 = new Clappr.Player({\n        events: {\n                onStop:  function() { console.log('stream 3 onStop occurded!'); setTimeout(() => player3.play(), 0) },\n                onPause:  function() { console.log('stream 3 onPause occured!'); setTimeout(() => player3.play(), 0) },\n                onError:  function() { console.log('stream 3 onError occured!'); setTimeout(() => player3.play(), 0) },\n                onEnded:  function() { console.log('stream 3 onEndedi occured!'); setTimeout(() => player3.play(), 0) }\n        },    \n        source: \"http://x.x.x.x/hdmistream02.m3u8\", \n        width: 320,\n        height: 180,\n        autoPlay: true,\n        actualLiveTime: true, \n        parentId: \"#player3\"});\nAnd I'm still getting some errors while playing the stream, see screenshot included but the stream itself keeps om playing so this is good news. I need to do some more and longer testing to be 100% sure. But we are making improvements. \n\nDon't understand why the non-fatal errors are there. Any idea? \nAnd as you can see in the included screenshot the two events occurred and the stream kept streaming. . ",
    "NicolaBernini": "I see, so in order to have this in Clappr, considering it uses HLS.JS internally, I should patch the code at some point (btw any suggestion where it would fit best?) in order to get events like HLSJS.Events.FRAG_LOADED right ? \n. ",
    "medeeiros": "```js\nvar playerElement = document.getElementById(\"player-wrapper\");\nClappr.Log.setLevel(0)\nwindow.player = new Clappr.Player({\n  source: '[A LIVE HLS URL]',\n  baseUrl: '/latest',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  autoPlay: true,\n  plugins: [Clappr.FlasHLS],\n  height: 360,\n  width: 640,\n  events: {\n    onTimeUpdate: console.log\n  }\n});\nplayer.attachTo(playerElement);\n```. If you are watching the DVR, then yes. But if you are watching the LIVE it will return the duration. Check the PR.. It is actually the opposite. The current time is equal to the duration. Which is pretty bad in my case since I need to save the exact time of the interaction with the player.\n. No. That's exactly how I found this issue. We have a http streaming url and our website is https. So as you can imagine, due to mixed content we had to force FlasHLS as a playback, and that's when things started to get out of sync. . The elapsed time. player.getCurrentTime(). Maybe you can't really notice if you have very short chunks. In our case we have 10 sec so things can really get out of sync since we need precision.. Well, as you said, I expect the elapsed time, and not the total time, which is what the Flash playback returns at the moment. . The only thing that really matters to me is to have consistency across playbacks, which is not the case at the moment and my PR fixes that. \nWhat you expect from getCurrentTime() is up to you, if you want the elapsed or the total time when it's a live stream.. Can I force Safari to use HLS.js? I tried using plugins: [Clappr.HLS] but it didn't work.\n. The problem with forcing HLS.js on Safari is that for some reason the DVR controls and the seekbar also don't behave correctly. :/ \nSafari\n\nNo Live\nSeekbar without real time\nWeird duration / elapsed\n\n\nChrome\n\n. I'm coming back to this issue with solutions and new problems. hehe\nOverriding the HLS.canPlay and allowing HLS.js playback to be used in Safari fixed some issues. I wonder why this check actually.\nOther than that, I could never get a Live HLS with DVR to work properly on iOS devices.\nSo many workarounds lately, I had to almost completely override the playback detection of Clappr, override methods on the playbacks itself and now I'll probably have to dig into the html5_video playback to add DVR detection. :s \nThis issue is already labeled as question and wontfix, but I really don't want to create yet another issue about HLS + Safari here.\n@leandromoreira I'm starting to think that we (mycujoo.tv) should move away from Clappr. This is not a complaint, I just think that maybe the current use case for Clappr at Globo is not really HLS + DVR and therefore the solution is not complete. \n. ",
    "tomas2387": "The problem is with clappr-zepto, resolved at version 0.0.5\nhttps://github.com/clappr/clappr-zepto/issues/5\nClappr currently uses clappr-zepto:0.0.4. \nI don't recomment updating because i think it is broken (at least in my machine)\nhttps://github.com/clappr/clappr-zepto/issues/6. It does affect the tap show/hide transition of media controls in mobile (sometimes it fails and when it does not fail it shows the media controls, it is weird)\n\n(I think I have a bad clappr.js.map file because stream-controller.js:187 is not where the errror is at)\n. https://github.com/clappr/clappr-zepto/issues/6. Currently Chrome, Firefox and IE Desktop can't play HLS without hls.js.\nBut Android+Chrome can play HLS natively\n\n (it returns \"maybe\" but thats what all HLS supported devices return)\n. I can confirm that Clappr on iOS iPhone uses native HLS implementation and not hls.js \ud83e\udd47  \nBut Android+Chrome uses hls.js :(. Sorry for the test coverage, but I can't force Clappr.Browser.isMobile to true :(\nI tried to add something like this:\n```\nit('enables autoplay playback for mobile devices setting muted attribute when flag is set', function() {\n    const oldIsMobile = Clappr.Browser.isMobile\n    //force isMobile to true\n    Clappr.Browser.isMobile = true;\nconst options = $.extend({autoPlay: true}, this.options)\nconst playback = new HTML5Video(options)\n\nClappr.Browser.isMobile = oldIsMobile;\nexpect(playback.el['muted']).to.be.true\n\n})\nit('enables autoplay playback for mobile devices setting autoplay attribute when flag is set', function() {\n    const oldIsMobile = Clappr.Browser.isMobile\n    //force isMobile to true\n    Clappr.Browser.isMobile = true;\nconst options = $.extend({autoPlay: true}, this.options)\nconst playback = new HTML5Video(options)\n\nClappr.Browser.isMobile = oldIsMobile;\nexpect(playback.el['autoplay']).to.be.true\n\n})\nit('enables inline playback for iOS v10 mobile devices setting playsinline attribute when flag is set', function() {\n    const oldIsMobile = Clappr.Browser.isMobile\n    //force isMobile to true\n    Clappr.Browser.isMobile = true;\nconst options = $.extend({playInline: true}, this.options)\nconst playback = new HTML5Video(options)\n\nClappr.Browser.isMobile = oldIsMobile;\nexpect(playback.el['playsinline']).to.be.true\n\n})\n```. Thank you so much @kslimani for explaining it so well. \nI don't know what else to add to this pull request, also, I don't know how to add more coverage.\nI couldn't force Clappr.Browser.isMobile to be true in the tests.. @kslimani your knowledge of clappr internals is better than mine without a doubt. And I agree with your solution. \nBut:\n\nIMO, the current autoplay mechanism does not need to be changed.\n\nThe problem with the current autoplay mechanism is that it is doing this.play() without an user gesture in mobile devices (at least, that was what I saw when I created this pull request) \nhttps://github.com/clappr/clappr/blob/master/src/playbacks/html5_video/html5_video.js#L133\nAnd any solution must avoid doing a this.play() without an user gesture in a mobile device because if we don't do that we get an ugly error:\nUncaught (in promise) DOMException: play() can only be initiated by a user gesture.\nOr ... we can ... just ignore the error ... ?. I close this to continue with @kslimani better idea\nhttps://github.com/clappr/clappr/pull/1432. @kslimani I made a pull request solving the autoplay issue on iOS (and some Android devices).\nhttps://github.com/clappr/clappr/pull/1260. ",
    "aaronatmycujoo": "I'm getting this same error on 0.2.66. What can I do?. Perhaps it is something on my side. We have few custom plugins, and this\nerror is only happening when interacting with touch events on our custom\nplugin which is doing a few different things like controlling playback and\nso on.\nOn Tue, Jun 6, 2017 at 3:32 PM, Leandro Moreira notifications@github.com\nwrote:\n\n@aaronatmycujoo https://github.com/aaronatmycujoo what browser are you\nusing? what kind of stream?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/clappr/clappr/issues/1223#issuecomment-306487053, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AaEnTKCiaO-FRMSRFPeKMCTw6fUMeoh7ks5sBVTsgaJpZM4K75vV\n.\n. I have rolled back and removed the plugins and I am still getting this error. On Chrome 58 on Android. The error is triggered when tapping on the video, seekbar, or ui.\n\nUncaught TypeError: Cannot read property 'trigger' of undefined at clappr.js?6ef2:3532\nClappr version \"clappr\": \"^0.2.66\"\nIs there anything else I can do to debug this? It is exactly the issue mentioned in https://github.com/clappr/clappr-zepto/issues/5. no I'm not able to reproduce on the demo page actually. you can see an example here: https://staging.mycujoo.tv/ch/297. view it on a touch enabled device or chrome devtools' device mode.. ",
    "derbismarck": "This is still a very annoying issue.. ",
    "Niko78": "any news about that ? \nI agree with all of you, player should retry to get stream... I would add : display poster instead of freezing video with a message \"we are trying to reconnect you...\". on my side I use wowza as streaming server and there is an url to get connections informations\nI use the output to display value under the player with a refresh each 30 seconds\nif a plugin existed to display it inside player (in the bar, on the left) that would be cool (with a personal refresh). more this one : https://github.com/Metrakit/clappr-comment-plugin (to get info in seek bar)\nbut doesn't work for me. my bad, it was not well implemented. it works... \nit was a network issue\nsorry for the noise. how do you do that ? 503 is only when streaming server is down, in my case it's a rare case... I use a wowza server so meant I have to configure wowza to send 503 instead of 404 ?\nthat's why for me it is on client side to do something\nis there possibility to catch \"error\" then tell play again ?\nah I found an issue opened on hls : https://github.com/dailymotion/hls.js/issues/491\nhope to see fix ASAP\nI can see that flowplayer manages it well : http://demos.flowplayer.org/api/live-check.html\nI would prefer get it inside clappr ;-). thanks for your tips\nI found a solution (workaround) in looping in the process which ends in stopping try (in clappr js)\nline 5525\nif (this._recoverAttemptsRemaining > 0) switch (this._recoverAttemptsRemaining -= 1, e.type) {\n=> if (this._recoverAttemptsRemaining > 0) switch (this._recoverAttemptsRemaining -= 0, e.type) {\nnow it works well (from what I need). @leandromoreira, it's not from 503, for me it is 404 : see below my debug if no stream, player stops after few tests\n[debug][MediaControl] mediacontrol:notplaying  clappr.min.js:7:7247\n[debug][MediaControl] mediacontrol:rendered  clappr.min.js:7:7247\n[debug][Container] container:mediacontrol:disable  clappr.min.js:7:7247\n[debug][e] core:containers:created  clappr.min.js:7:7247\n[debug][hls] playback:ready hls  clappr.min.js:7:7247\n[debug][Container] container:ready Container  clappr.min.js:7:7247\n[debug][Container] container:volume 100 Container  clappr.min.js:7:7247\n[debug][MediaControl] mediacontrol:notplaying  clappr.min.js:7:7247\n[debug][MediaControl] mediacontrol:rendered  clappr.min.js:7:7247\n[debug][Container] container:dvr false  clappr.min.js:7:7247\n[debug][MediaControl] mediacontrol:hide MediaControl  clappr.min.js:7:7247\n[debug][Container] container:mediacontrol:hide  clappr.min.js:7:7247\n[debug][MediaControl] mediacontrol:containerchanged  clappr.min.js:7:7247\n[debug][Container] container:volume 100 Container  clappr.min.js:7:7247\n[debug][MediaControl] mediacontrol:notplaying  clappr.min.js:7:7247\n[debug][MediaControl] mediacontrol:rendered  clappr.min.js:7:7247\n[debug][t] 1:resize Object { width: \"1280\", height: \"720\" }  clappr.min.js:7:7247\n[debug][e] core:ready  clappr.min.js:7:7247\n[debug][e] ready  clappr.min.js:7:7247\n[debug][hls] playback:play:intent  clappr.min.js:7:7247\n[debug][hls] playback:bufferfull hls  clappr.min.js:7:7247\n[debug][Container] container:state:bufferfull Container  clappr.min.js:7:7247\n[debug][hls] playback:settingsupdate  clappr.min.js:7:7247\n[debug][Container] container:settingsupdate  clappr.min.js:7:7247\n[debug][MediaControl] mediacontrol:playing  clappr.min.js:7:7247\n[debug][MediaControl] mediacontrol:rendered  clappr.min.js:7:7247\n[debug][hls] playback:buffering hls  clappr.min.js:7:7247\n[debug][Container] container:state:buffering Container  clappr.min.js:7:7247\n[debug][hls] playback:levels:available Array [ Object, Object, Object ]  clappr.min.js:7:7247\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 2 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 5 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b1046000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 1 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 4 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b546000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 0 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\n[warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 2 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b446000_DVR_slfra.m3u8:1:1\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 10 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b1046000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 1 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 4 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b546000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 0 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 4 ms]\n[warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 2 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b446000_DVR_slfra.m3u8:1:1\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 3 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b1046000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 1 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 17 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b546000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 0 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 7 ms]\n[warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 2 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b446000_DVR_slfra.m3u8:1:1\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 4 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b1046000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 1 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 4 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b546000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 0 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 5 ms]\n[warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 2 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b446000_DVR_slfra.m3u8:1:1\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 3 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b1046000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 1 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b546000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 0 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 13 ms]\n[warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 2 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b446000_DVR_slfra.m3u8:1:1\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 9 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b1046000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 1 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 5 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b546000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 0 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 11 ms]\n[warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 2 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b446000_DVR_slfra.m3u8:1:1\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 7 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b1046000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 1 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 8 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b546000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 0 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 4 ms]\n[warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 2 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b446000_DVR_slfra.m3u8:1:1\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 4 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b1046000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 1 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 10 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b546000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 0 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 6 ms]\n[warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 2 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate true  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 2 }  clappr.min.js:7:7247\n[warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b446000_DVR_slfra.m3u8:1:1\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 3 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b1046000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b1046000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 1 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 1 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 12 ms]\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b546000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b546000_DVR_slfra.m3u8:1:1\n[debug][hls] playback:levels:switch:end  clappr.min.js:7:7247\n[debug][hls] playback:level:switch Object { level: 0 }  clappr.min.js:7:7247\n[debug][hls] playback:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][Container] container:highdefinitionupdate false  clappr.min.js:7:7247\n[debug][hls] playback:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\n[debug][Container] container:bitrate Object { height: 240, width: 360, bandwidth: 446000, bitrate: 446000, level: 0 }  clappr.min.js:7:7247\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8 [HTTP/1.1 404 Not Found 5 ms]\n[error][hlsjs: could not recover from error after maximum number of attempts, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\n[debug][hls] playback:error Object { evt: \"hlsError\", data: Object } hls  clappr.min.js:7:7247\n[debug][Container] container:error Object { error: Object, container: Object } Container  clappr.min.js:7:7247\n[debug][e] error Object { error: Object, container: Object }  clappr.min.js:7:7247\n[error][hlsjs: could not recover from error after maximum number of attempts, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\n[debug][hls] playback:error Object { evt: \"hlsError\", data: Object } hls  clappr.min.js:7:7247\n[debug][Container] container:error Object { error: Object, container: Object } Container  clappr.min.js:7:7247\n[debug][e] error Object { error: Object, container: Object }  clappr.min.js:7:7247\nErreur d\u2019analyse XML : aucun \u00e9l\u00e9ment trouv\u00e9\nEmplacement : http://xxxxxxxxxxxxxxxxxxxx/chunklist_w806602589_b446000_DVR_slfra.m3u8\nNum\u00e9ro de ligne 1, Colonne 1 :  chunklist_w806602589_b446000_DVR_slfra.m3u8:1:1\nin brief \nseveral [warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nthen [warn][hlsjs: trying to recover from network error, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nin the end [error][hlsjs: could not recover from error after maximum number of attempts, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\nonly solution here is to refresh the page to retry. @leandromoreira just tried with same conditions (lag + 10% drop)\non hls demo page, it freezes but back ok then freezes again, back ok...etc (even when lag+drop shut)\nsee below log\n[log] > destroy  hls.js:13794:7\n[log] > detachMedia  hls.js:13794:7\n[log] > media source detaching  hls.js:13794:7\n  hls.js:13794:7\n[log] > loadSource:http://xxxxxxxxxxxxxxxxxxxx/playlist.m3u8?DVR  hls.js:13794:7\n[log] > trigger BUFFER_RESET  hls.js:13794:7\n[log] > set autoLevelCapping:-1  hls.js:13794:7\n[log] > attachMedia  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/playlist.m3u8 [HTTP/1.1 200 OK 228 ms]\n[log] > media source opened  hls.js:13794:7\n[log] > manifest loaded,2 level(s) found, first bitrate:1046000  hls.js:13794:7\n[log] > startLoad(-1)  hls.js:13794:7\n[log] > switching to level 1  hls.js:13794:7\n[log] > loading playlist for level 1  hls.js:13794:7\n[log] > main stream:STOPPED->IDLE  hls.js:13794:7\n[log] > main stream:IDLE->WAITING_LEVEL  hls.js:13794:7\n[log] > audio tracks updated  hls.js:13794:7\n[log] > subtitle tracks updated  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w568670468_b1046000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 186 ms]\n[log] > live playlist, reload in 5798 ms  hls.js:13794:7\n[log] > level 1 loaded [14937,16135],duration:7194  hls.js:13794:7\n[log] > live playlist - first load, unknown sliding  hls.js:13794:7\n[log] > configure startPosition to 7173  hls.js:13794:7\n[log] > main stream:WAITING_LEVEL->IDLE  hls.js:13794:7\n[log] > Loading 16132 of [14937 ,16135],level 1, currentTime:7173.000,bufferEnd:7173.000  hls.js:13794:7\n[log] > demuxing in webworker  hls.js:13794:7\n[log] > main stream:IDLE->FRAG_LOADING  hls.js:13794:7\nparsing level duration :7140us,count:1  demo:371:11\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/media_w568670468_b1046000_DVR_slfra_16132.ts [HTTP/1.1 200 OK 960 ms]\n  2663668c-8910-4468-9727-f27d7e0d7d1d:4697:7\n[log] > Loaded  16132 of [14937 ,16135],level 1  hls.js:13794:7\n[log] > main stream:FRAG_LOADING->PARSING  hls.js:13794:7\n[log] > Parsing 16132 of [14937 ,16135],level 1, cc 0  hls.js:13794:7\n[log] > level switch detected  2663668c-8910-4468-9727-f27d7e0d7d1d:4697:7\n\"[log] > manifest codec:undefined,ADTS data:type:2,sampleingIndex:3[48000Hz],channelConfig:2\"  2663668c-8910-4468-9727-f27d7e0d7d1d:4697:7\n[log] > parsed codec:mp4a.40.2,rate:48000,nb channel:2  2663668c-8910-4468-9727-f27d7e0d7d1d:4697:7\n[log] > audio mp4 timescale :48000  2663668c-8910-4468-9727-f27d7e0d7d1d:4697:7\n[log] > InitPTS for cc:0 found from video track:-523442582  hls.js:13794:7\n[log] > creating sourceBuffer(audio/mp4;codecs=mp4a.40.2)  hls.js:13794:7\n[log] > creating sourceBuffer(video/mp4;codecs=avc1.64001f)  hls.js:13794:7\n[log] > main track:audio,container:audio/mp4,codecs[level/parsed]=[undefined/mp4a.40.2]  hls.js:13794:7\n[log] > main track:video,container:video/mp4,codecs[level/parsed]=[undefined/avc1.64001f]  hls.js:13794:7\n[log] > Parsed audio,PTS:[7170.001,7176.017],DTS:[7170.001/7176.017],nb:282,dropped:0  hls.js:13794:7\n[log] > Parsed video,PTS:[7170.000,7176.000],DTS:[7170.000/7176.000],nb:150,dropped:0  hls.js:13794:7\n[log] > main stream:PARSING->PARSED  hls.js:13794:7\n[log] > main buffered : [7170.001,7176.000]  hls.js:13794:7\n[log] > latency/loading/parsing/append/kbps:118/854/136/21/5345  hls.js:13794:7\n[log] > main stream:PARSED->IDLE  hls.js:13794:7\n[log] > Loading 16133 of [14937 ,16135],level 1, currentTime:7176.000,bufferEnd:7176.000  hls.js:13794:7\n[log] > main stream:IDLE->FRAG_LOADING  hls.js:13794:7\n[log] > target start position:7173  hls.js:13794:7\n[log] > adjust currentTime from 0 to 7173  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/media_w568670468_b1046000_DVR_slfra_16133.ts [HTTP/1.1 200 OK 952 ms]\n[log] > media seeking to 7173.000  hls.js:13794:7\n[log] > media seeked to 7173.000  hls.js:13794:7\n[log] > Loaded  16133 of [14937 ,16135],level 1  hls.js:13794:7\n[log] > main stream:FRAG_LOADING->PARSING  hls.js:13794:7\n[log] > Parsing 16133 of [14937 ,16135],level 1, cc 0  hls.js:13794:7\n[log] > Parsed audio,PTS:[7176.017,7181.969],DTS:[7176.017/7181.969],nb:279,dropped:0  hls.js:13794:7\n[log] > Parsed video,PTS:[7176.000,7182.000],DTS:[7176.000/7182.000],nb:150,dropped:0  hls.js:13794:7\n[log] > main stream:PARSING->PARSED  hls.js:13794:7\n[log] > main buffered : [7170.001,7181.969]  hls.js:13794:7\n[log] > latency/loading/parsing/append/kbps:97/861/79/6/5799  hls.js:13794:7\n[log] > main stream:PARSED->IDLE  hls.js:13794:7\n[log] > Loading 16134 of [14937 ,16135],level 1, currentTime:7173.711,bufferEnd:7181.969  hls.js:13794:7\n[log] > main stream:IDLE->FRAG_LOADING  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/media_w568670468_b1046000_DVR_slfra_16134.ts [HTTP/1.1 200 OK 1053 ms]\n[log] > Loaded  16134 of [14937 ,16135],level 1  hls.js:13794:7\n[log] > main stream:FRAG_LOADING->PARSING  hls.js:13794:7\n[log] > Parsing 16134 of [14937 ,16135],level 1, cc 0  hls.js:13794:7\n[log] > Parsed audio,PTS:[7181.969,7187.985],DTS:[7181.969/7187.985],nb:282,dropped:0  hls.js:13794:7\n[log] > Parsed video,PTS:[7182.000,7188.000],DTS:[7182.000/7188.000],nb:150,dropped:0  hls.js:13794:7\n[log] > main stream:PARSING->PARSED  hls.js:13794:7\n[log] > main buffered : [7170.001,7187.985]  hls.js:13794:7\n[log] > latency/loading/parsing/append/kbps:78/984/55/8/5785  hls.js:13794:7\n[log] > main stream:PARSED->IDLE  hls.js:13794:7\n[log] > Loading 16135 of [14937 ,16135],level 1, currentTime:7174.846,bufferEnd:7187.985  hls.js:13794:7\n[log] > main stream:IDLE->FRAG_LOADING  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/media_w568670468_b1046000_DVR_slfra_16135.ts [HTTP/1.1 200 OK 1104 ms]\n[log] > Loaded  16135 of [14937 ,16135],level 1  hls.js:13794:7\n[log] > main stream:FRAG_LOADING->PARSING  hls.js:13794:7\n[log] > Parsing 16135 of [14937 ,16135],level 1, cc 0  hls.js:13794:7\n[log] > Parsed audio,PTS:[7187.985,7194.001],DTS:[7187.985/7194.001],nb:282,dropped:0  hls.js:13794:7\n[log] > Parsed video,PTS:[7188.000,7194.000],DTS:[7188.000/7194.000],nb:150,dropped:0  hls.js:13794:7\n[log] > main stream:PARSING->PARSED  hls.js:13794:7\n[log] > main buffered : [7170.001,7194.000]  hls.js:13794:7\n[log] > latency/loading/parsing/append/kbps:80/1300/61/52/3912  hls.js:13794:7\n[log] > main stream:PARSED->IDLE  hls.js:13794:7\n[log] > loading playlist for level 1  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w568670468_b1046000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 5891 ms]\n[log] > live playlist, reload in 1000 ms  hls.js:13794:7\n[log] > level 1 loaded [14939,16137],duration:7194  hls.js:13794:7\n[log] > live playlist sliding:12.000  hls.js:13794:7\n[log] > Updating mediasource duration to 7206.000  hls.js:13794:7\n[log] > Loading 16136 of [14939 ,16137],level 1, currentTime:7183.262,bufferEnd:7194.000  hls.js:13794:7\n[log] > main stream:IDLE->FRAG_LOADING  hls.js:13794:7\nparsing level duration :7000us,count:2  demo:371:11\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/media_w568670468_b1046000_DVR_slfra_16136.ts [HTTP/1.1 200 OK 15692 ms]\n[log] > loading playlist for level 1  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w568670468_b1046000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 1086 ms]\n[log] > same live playlist, reload twice faster  hls.js:13794:7\n[log] > live playlist, reload in 1905 ms  hls.js:13794:7\n[log] > level 1 loaded [14939,16137],duration:7194  hls.js:13794:7\n[log] > live playlist sliding:12.000  hls.js:13794:7\nparsing level duration :6193us,count:3  demo:371:11\n[log] > loading playlist for level 1  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w568670468_b1046000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 749 ms]\n[log] > live playlist, reload in 5244 ms  hls.js:13794:7\n[log] > level 1 loaded [14940,16138],duration:7194  hls.js:13794:7\n[log] > live playlist sliding:18.000  hls.js:13794:7\n[log] > Updating mediasource duration to 7212.000  hls.js:13794:7\nparsing level duration :5386us,count:4  demo:371:11\n[log] > loading playlist for level 1  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w568670468_b1046000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 519 ms]\n[log] > live playlist, reload in 5473 ms  hls.js:13794:7\n[log] > level 1 loaded [14941,16139],duration:7194  hls.js:13794:7\n[log] > live playlist sliding:24.000  hls.js:13794:7\n[log] > Updating mediasource duration to 7218.000  hls.js:13794:7\nparsing level duration :4647us,count:5  demo:371:11\n[warn] > playback stalling in low buffer @7193.983541  hls.js:13794:7\n[log] > Loaded  16136 of [14941 ,16139],level 1  hls.js:13794:7\n[log] > main stream:FRAG_LOADING->PARSING  hls.js:13794:7\n[log] > Parsing 16136 of [14941 ,16139],level 1, cc 0  hls.js:13794:7\n[log] > Parsed audio,PTS:[7194.001,7200.017],DTS:[7194.001/7200.017],nb:282,dropped:0  hls.js:13794:7\n[log] > Parsed video,PTS:[7194.000,7200.000],DTS:[7194.000/7200.000],nb:150,dropped:0  hls.js:13794:7\n[log] > main stream:PARSING->PARSED  hls.js:13794:7\n[log] > main buffered : [7170.001,7200.000]  hls.js:13794:7\n[log] > latency/loading/parsing/append/kbps:1757/13947/80/14/378  hls.js:13794:7\n[log] > main stream:PARSED->IDLE  hls.js:13794:7\n[log] > switching to level 0  hls.js:13794:7\n[log] > loading playlist for level 0  hls.js:13794:7\n[log] > main stream:IDLE->WAITING_LEVEL  hls.js:13794:7\n[log] > adjust currentTime from 7193.983541 to 7194.083541  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w568670468_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 3820 ms]\n[log] > media seeking to 7194.084  hls.js:13794:7\n[log] > media seeked to 7194.084  hls.js:13794:7\n[log] > live playlist, reload in 2165 ms  hls.js:13794:7\n[log] > level 0 loaded [14942,16141],duration:7200  hls.js:13794:7\n[log] > live playlist - first load, unknown sliding  hls.js:13794:7\n[log] > main stream:WAITING_LEVEL->IDLE  hls.js:13794:7\n[log] > live playlist, switching playlist, load frag with next SN: 16137  hls.js:13794:7\n[log] > Loading 16137 of [14942 ,16141],level 0, currentTime:7197.810,bufferEnd:7200.000  hls.js:13794:7\n[log] > main stream:IDLE->FRAG_LOADING  hls.js:13794:7\nparsing level duration :4732us,count:6  demo:371:11\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/media_w568670468_b546000_DVR_slfra_16137.ts [HTTP/1.1 200 OK 10204 ms]\n[log] > loading playlist for level 0  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w568670468_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 7268 ms]\n[warn] > playback stalling in low buffer @7199.965832  hls.js:13794:7\n[log] > live playlist, reload in 1000 ms  hls.js:13794:7\n[log] > level 0 loaded [14944,16143],duration:7200  hls.js:13794:7\n[log] > live playlist - outdated PTS, unknown sliding  hls.js:13794:7\nparsing level duration :4460us,count:7  demo:371:11\n[log] > Loaded  16137 of [14944 ,16143],level 0  hls.js:13794:7\n[log] > main stream:FRAG_LOADING->PARSING  hls.js:13794:7\n[log] > Parsing 16137 of [14944 ,16143],level 0, cc 2  hls.js:13794:7\n[log] > discontinuity detected  2663668c-8910-4468-9727-f27d7e0d7d1d:4697:7\n[log] > level switch detected  2663668c-8910-4468-9727-f27d7e0d7d1d:4697:7\n\"[log] > manifest codec:undefined,ADTS data:type:2,sampleingIndex:3[48000Hz],channelConfig:2\"  2663668c-8910-4468-9727-f27d7e0d7d1d:4697:7\n[log] > parsed codec:mp4a.40.2,rate:48000,nb channel:2  2663668c-8910-4468-9727-f27d7e0d7d1d:4697:7\n[log] > audio mp4 timescale :48000  2663668c-8910-4468-9727-f27d7e0d7d1d:4697:7\n[log] > InitPTS for cc:2 found from video track:-520742582  hls.js:13794:7\n[log] > main track:audio,container:audio/mp4,codecs[level/parsed]=[undefined/mp4a.40.2]  hls.js:13794:7\n[log] > main track:video,container:video/mp4,codecs[level/parsed]=[undefined/avc1.64001e]  hls.js:13794:7\n[log] > Parsed audio,PTS:[7170.001,7176.017],DTS:[7170.001/7176.017],nb:282,dropped:0  hls.js:13794:7\n[log] > Parsed video,PTS:[7170.000,7176.000],DTS:[7170.000/7176.000],nb:150,dropped:0  hls.js:13794:7\n[log] > main stream:PARSING->PARSED  hls.js:13794:7\n[log] > main buffered : [7170.001,7200.000]  hls.js:13794:7\n[log] > latency/loading/parsing/append/kbps:9252/959/84/39/237  hls.js:13794:7\n[log] > main stream:PARSED->IDLE  hls.js:13794:7\n[log] > Loading 16142 of [14944 ,16143],level 0, currentTime:7199.966,bufferEnd:7200.000  hls.js:13794:7\n[log] > main stream:IDLE->FRAG_LOADING  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/media_w568670468_b546000_DVR_slfra_16142.ts [HTTP/1.1 200 OK 9053 ms]\n[log] > loading playlist for level 0  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w568670468_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 8412 ms]\n[log] > live playlist, reload in 1000 ms  hls.js:13794:7\n[log] > level 0 loaded [14945,16144],duration:7200  hls.js:13794:7\n[log] > live playlist sliding:18.000  hls.js:13794:7\nparsing level duration :5745us,count:8  demo:371:11\n[log] > Loaded  16142 of [14945 ,16144],level 0  hls.js:13794:7\n[log] > main stream:FRAG_LOADING->PARSING  hls.js:13794:7\n[log] > Parsing 16142 of [14945 ,16144],level 0, cc 2  hls.js:13794:7\n[log] > Parsed audio,PTS:[7200.017,7205.969],DTS:[7200.017/7205.969],nb:279,dropped:0  hls.js:13794:7\n[log] > Parsed video,PTS:[7200.000,7206.000],DTS:[7200.000/7206.000],nb:150,dropped:0  hls.js:13794:7\n[log] > main stream:PARSING->PARSED  hls.js:13794:7\n[log] > main buffered : [7170.001,7205.969]  hls.js:13794:7\n[log] > latency/loading/parsing/append/kbps:8293/767/55/20/327  hls.js:13794:7\n[log] > main stream:PARSED->IDLE  hls.js:13794:7\n[log] > Loading 16143 of [14945 ,16144],level 0, currentTime:7199.966,bufferEnd:7205.969  hls.js:13794:7\n[log] > main stream:IDLE->FRAG_LOADING  hls.js:13794:7\n[log] > adjust currentTime from 7199.965832 to 7200.065832  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/media_w568670468_b546000_DVR_slfra_16143.ts [HTTP/1.1 200 OK 9228 ms]\n[log] > media seeking to 7200.066  hls.js:13794:7\n[log] > media seeked to 7200.066  hls.js:13794:7\n[log] > loading playlist for level 0  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w568670468_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 8417 ms]\n[warn] > playback stalling in low buffer @7205.969019  hls.js:13794:7\n[log] > live playlist, reload in 1000 ms  hls.js:13794:7\n[log] > level 0 loaded [14947,16146],duration:7200  hls.js:13794:7\n[log] > live playlist sliding:30.000  hls.js:13794:7\n[log] > Updating mediasource duration to 7230.000  hls.js:13794:7\nparsing level duration :5283us,count:9  demo:371:11\n[log] > Loaded  16143 of [14947 ,16146],level 0  hls.js:13794:7\n[log] > main stream:FRAG_LOADING->PARSING  hls.js:13794:7\n[log] > Parsing 16143 of [14947 ,16146],level 0, cc 2  hls.js:13794:7\n[log] > Parsed audio,PTS:[7205.969,7211.985],DTS:[7205.969/7211.985],nb:282,dropped:0  hls.js:13794:7\n[log] > Parsed video,PTS:[7206.000,7212.000],DTS:[7206.000/7212.000],nb:150,dropped:0  hls.js:13794:7\n[log] > main stream:PARSING->PARSED  hls.js:13794:7\n[log] > main buffered : [7170.001,7211.985]  hls.js:13794:7\n[log] > latency/loading/parsing/append/kbps:8577/659/53/13/332  hls.js:13794:7\n[log] > main stream:PARSED->IDLE  hls.js:13794:7\n[log] > Loading 16144 of [14947 ,16146],level 0, currentTime:7205.969,bufferEnd:7211.985  hls.js:13794:7\n[log] > main stream:IDLE->FRAG_LOADING  hls.js:13794:7\n[log] > adjust currentTime from 7205.969019 to 7206.0690190000005  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/media_w568670468_b546000_DVR_slfra_16144.ts [HTTP/1.1 200 OK 8961 ms]\n[warn] > playback not stuck anymore @7206.069019, after NaNms  hls.js:13794:7\n[log] > media seeking to 7206.069  hls.js:13794:7\n[log] > media seeked to 7206.069  hls.js:13794:7\n[log] > loading playlist for level 0  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w568670468_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 8193 ms]\n[warn] > playback stalling in low buffer @7211.982248  hls.js:13794:7\n[log] > live playlist, reload in 1000 ms  hls.js:13794:7\n[log] > level 0 loaded [14948,16147],duration:7200  hls.js:13794:7\n[log] > live playlist sliding:36.000  hls.js:13794:7\n[log] > Updating mediasource duration to 7236.000  hls.js:13794:7\nparsing level duration :5533us,count:10  demo:371:11\n[log] > Loaded  16144 of [14948 ,16147],level 0  hls.js:13794:7\n[log] > main stream:FRAG_LOADING->PARSING  hls.js:13794:7\n[log] > Parsing 16144 of [14948 ,16147],level 0, cc 2  hls.js:13794:7\n[log] > Parsed audio,PTS:[7211.985,7218.001],DTS:[7211.985/7218.001],nb:282,dropped:0  hls.js:13794:7\n[log] > Parsed video,PTS:[7212.000,7218.000],DTS:[7212.000/7218.000],nb:150,dropped:0  hls.js:13794:7\n[log] > main stream:PARSING->PARSED  hls.js:13794:7\n[log] > main buffered : [7170.001,7218.000]  hls.js:13794:7\n[log] > latency/loading/parsing/append/kbps:8483/485/66/6/252  hls.js:13794:7\n[log] > main stream:PARSED->IDLE  hls.js:13794:7\n[log] > Loading 16145 of [14948 ,16147],level 0, currentTime:7211.982,bufferEnd:7218.000  hls.js:13794:7\n[log] > main stream:IDLE->FRAG_LOADING  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/media_w568670468_b546000_DVR_slfra_16145.ts [HTTP/1.1 200 OK 9073 ms]\n[warn] > playback not stuck anymore @7211.994352, after 3010ms  hls.js:13794:7\n[log] > loading playlist for level 0  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w568670468_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 8247 ms]\n[warn] > playback stalling in low buffer @7217.965831  hls.js:13794:7\n[log] > live playlist, reload in 1000 ms  hls.js:13794:7\n[log] > level 0 loaded [14950,16149],duration:7200  hls.js:13794:7\n[log] > live playlist sliding:48.000  hls.js:13794:7\n[log] > Updating mediasource duration to 7248.000  hls.js:13794:7\nparsing level duration :5772us,count:11  demo:371:11\n[log] > Loaded  16145 of [14950 ,16149],level 0  hls.js:13794:7\n[log] > main stream:FRAG_LOADING->PARSING  hls.js:13794:7\n[log] > Parsing 16145 of [14950 ,16149],level 0, cc 2  hls.js:13794:7\n[log] > Parsed audio,PTS:[7218.001,7224.017],DTS:[7218.001/7224.017],nb:282,dropped:0  hls.js:13794:7\n[log] > Parsed video,PTS:[7218.000,7224.000],DTS:[7218.000/7224.000],nb:150,dropped:0  hls.js:13794:7\n[log] > main stream:PARSING->PARSED  hls.js:13794:7\n[log] > main buffered : [7170.001,7224.000]  hls.js:13794:7\n[log] > latency/loading/parsing/append/kbps:8657/434/57/6/252  hls.js:13794:7\n[log] > main stream:PARSED->IDLE  hls.js:13794:7\n[log] > Loading 16146 of [14950 ,16149],level 0, currentTime:7217.966,bufferEnd:7224.000  hls.js:13794:7\n[log] > main stream:IDLE->FRAG_LOADING  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/media_w568670468_b546000_DVR_slfra_16146.ts \n[log] > adjust currentTime from 7217.965831 to 7218.065831000001  hls.js:13794:7\n[log] > media seeking to 7218.066  hls.js:13794:7\n[log] > media seeked to 7218.066  hls.js:13794:7\n[log] > loading playlist for level 0  hls.js:13794:7\nGET \nXHR \nhttp://xxxxxxxxxxxxxxxxxxxx/chunklist_w568670468_b546000_DVR_slfra.m3u8 \nI also tried on flashls page, same result as hlsjs (ok, buffering, ok, buffering.....)\nINFO:HLSNetStream:close  chromeless\n\"[Wed Feb 15 2017 13:52:12 GMT+0100] load URL http://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/playlist.m3u8?DVR\"  chromeless:350:3\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/crossdomain.xml [HTTP/1.1 200 OK 216 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/playlist.m3u8 [HTTP/1.1 200 OK 231 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 178 ms]\n[Wed Feb 15 2017 13:52:13 GMT+0100] new track list  chromeless:350:3\n[Wed Feb 15 2017 13:52:13 GMT+0100] manifest loaded, playlist duration:7200.00  chromeless:350:3\nINFO:HLSNetStream:play(-1)  chromeless\nINFO:HLSNetStream:seek(-1)  chromeless\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b546000_DVR_slfra_16173.ts [HTTP/1.1 200 OK 1317 ms]\n[Wed Feb 15 2017 13:52:13 GMT+0100] new track list  chromeless:350:3\n[Wed Feb 15 2017 13:52:13 GMT+0100]     TS/AAC 0 [257]  chromeless:350:3\nINFO:Setting audio track to 0  chromeless\nINFO:enough download bandwidth, adjust start level from 0 to 1  chromeless\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b1046000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 184 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b1046000_DVR_slfra_16173.ts [HTTP/1.1 200 OK 1110 ms]\nINFO:Video decoding:software  chromeless\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b1046000_DVR_slfra_16174.ts [HTTP/1.1 200 OK 990 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b1046000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 185 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b1046000_DVR_slfra_16175.ts [HTTP/1.1 200 OK 1169 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b1046000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 4902 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 6668 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b546000_DVR_slfra_15455.ts [HTTP/1.1 200 OK 9219 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 8202 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b546000_DVR_slfra_15456.ts [HTTP/1.1 200 OK 9900 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 8415 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b546000_DVR_slfra_15457.ts [HTTP/1.1 200 OK 9156 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 8162 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b546000_DVR_slfra_15458.ts [HTTP/1.1 200 OK 9071 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 8217 ms]\nINFO:Video decoding:accelerated  chromeless\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b546000_DVR_slfra_15459.ts [HTTP/1.1 200 OK 9445 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 8383 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b546000_DVR_slfra_15460.ts [HTTP/1.1 200 OK 20561 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 8985 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 420 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 508 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b546000_DVR_slfra_15461.ts [HTTP/1.1 200 OK 5588 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 3585 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b546000_DVR_slfra_15462.ts [HTTP/1.1 200 OK 8698 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 6792 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b546000_DVR_slfra_15463.ts [HTTP/1.1 200 OK 8993 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 8195 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b546000_DVR_slfra_15464.ts [HTTP/1.1 200 OK 9092 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 8251 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b546000_DVR_slfra_15465.ts [HTTP/1.1 200 OK 9422 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 8345 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b546000_DVR_slfra_15466.ts [HTTP/1.1 200 OK 9151 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 8145 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b546000_DVR_slfra_15467.ts [HTTP/1.1 200 OK 9186 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 [HTTP/1.1 200 OK 8187 ms]\nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/media_w1120939607_b546000_DVR_slfra_15468.ts \nGET \nhttp://xxxxxxxxxxxxxxxxxxxx/livetest/smil:mystream.smil/chunklist_w1120939607_b546000_DVR_slfra.m3u8 \nso I repeat with clappr, when I start lag+drop and I stop it... video is never back ok\nnico. @leandromoreira sure I just did not display hls error message that are before that\nmy problem is to know why sometimes I get poster, and sometimes nope (more often player tries again and again and never back on stream)\nwill add errors tomorrow. we can test together if you want... in private I can share with you the link\nI sent you an email. so when my streaming server stops and starts, this time I got player trying to recover without any success (no poster here)\nso need to press F5 to get the stream back ok\n...\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:fragment:loaded Object { payload: ArrayBuffer, frag: Object, stats: Object }  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\nGET \nXHR \nhttp://xxxxx/media_w554071250_b1046000_DVR_slfra_19192.ts [HTTP/1.1 200 OK 2097 ms]\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:fragment:loaded Object { payload: ArrayBuffer, frag: Object, stats: Object }  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 1, rebufferingTime: 0, watchingTime: 45005, height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 1 }  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][hls] playback:settingsupdate  clappr.js:6785:91\n[debug][Container] container:settingsupdate  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 1, rebufferingTime: 0, watchingTime: 50003, height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 1 }  clappr.js:6785:91\n[debug][Container] container:mouseenter  clappr.js:6785:91\n[debug][Container] container:mouseleave  clappr.js:6785:91\n[debug][MediaControl] mediacontrol:hide MediaControl  clappr.js:6785:91\n[debug][Container] container:mediacontrol:hide  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 1, rebufferingTime: 0, watchingTime: 55003, height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 1 }  clappr.js:6785:91\n[debug][Container] container:mouseenter  clappr.js:6785:91\n[debug][Container] container:mouseleave  clappr.js:6785:91\n[debug][MediaControl] mediacontrol:hide MediaControl  clappr.js:6785:91\n[debug][Container] container:mediacontrol:hide  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 1, rebufferingTime: 0, watchingTime: 60002, height: 720, width: 1280, bandwidth: 1046000, bitrate: 1046000, level: 1 }  clappr.js:6785:91\n[debug][hls] playback:levels:switch:end  clappr.js:6785:91\n[debug][hls] playback:level:switch Object { level: 0 }  clappr.js:6785:91\n[debug][hls] playback:highdefinitionupdate false  clappr.js:6785:91\n[debug][Container] container:highdefinitionupdate false  clappr.js:6785:91\n[debug][hls] playback:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:bitrate Object { height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\nGET \nXHR \nhttp://xxxxx/media_w554071250_b546000_DVR_slfra_19192.ts [HTTP/1.1 200 OK 994 ms]\n[debug][hls] playback:fragment:loaded Object { payload: ArrayBuffer, frag: Object, stats: Object }  clappr.js:6785:91\n[debug][hls] playback:buffering hls  clappr.js:6785:91\n[debug][Container] container:state:buffering Container  clappr.js:6785:91\n[warn][hlsjs: non-fatal error occurred, evt hlsError, data [object Object] ]  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 1963, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 6963, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 11962, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:mouseenter  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 16963, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][MediaControl] mediacontrol:hide MediaControl  clappr.js:6785:91\n[debug][Container] container:mediacontrol:hide  clappr.js:6785:91\n[debug][Container] container:mouseleave  clappr.js:6785:91\n[debug][MediaControl] mediacontrol:hide MediaControl  clappr.js:6785:91\n[debug][Container] container:mediacontrol:hide  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 21962, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 26963, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 31963, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 36964, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 41962, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 46962, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 51962, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 56962, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 61964, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 66962, watchingTime: 63039, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 71962, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:mouseenter  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 76965, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:mouseleave  clappr.js:6785:91\n[debug][MediaControl] mediacontrol:hide MediaControl  clappr.js:6785:91\n[debug][Container] container:mediacontrol:hide  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 81962, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 86963, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 91963, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 96962, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 101963, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 106962, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:mouseenter  clappr.js:6785:91\n[debug][Container] container:mouseleave  clappr.js:6785:91\n[debug][MediaControl] mediacontrol:hide MediaControl  clappr.js:6785:91\n[debug][Container] container:mediacontrol:hide  clappr.js:6785:91\n[debug][Container] container:mouseenter  clappr.js:6785:91\n[debug][Container] container:mouseleave  clappr.js:6785:91\n[debug][MediaControl] mediacontrol:hide MediaControl  clappr.js:6785:91\n[debug][Container] container:mediacontrol:hide  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 111965, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 116969, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n[debug][Container] container:stats:report Object { startupTime: 3290, rebuffers: 2, rebufferingTime: 121962, watchingTime: 63040, height: 360, width: 640, bandwidth: 546000, bitrate: 546000, level: 0 }  clappr.js:6785:91\n.... @kslimani yep but when it reaches 10 it should restart from 0 then reaches again 10, etc...\nin my case now when it reaches 10, it stays after at 0. it worked before... so something has changed\nhow would you fix that ?. I try to find a solution when stream fails (network, encoder, stream server...)\nI have autostart at true, so when I display page, clappr tries to get the streams, when it fails, it retries few times then finish in \"max recovery...\".. but clappr player shows only background and not \"play\" button in that state, so if I want to recheck, I need to refresh the whole page\nThat's why in my script I detect failure/error and in this case, I force to stop player to get \"play\" button again\nThen as I said before, I have an other script that displays information in \"show\" element each 30 s, the same where I put an error message ; so when failure I display message but 30s after I have an other info\nthat's why my script should restart counter to display 10 seconds after a message\nBetter would be for me to display a message inside player but I don't know how to.\nAnd better again : display a message inside player with a counter (10 seconds) which retries by itself to get the stream, etc...\n. @kslimani BTW, if you are trying to handle HLS playlist load error, you may be interested by #1374 .\n=> it is already integrated in 0.2.66 ?. what I would like to see in clappr as an option : http://demos.flowplayer.org/api/live-check.html. great @kslimani \nI'm waiting new clappr build to test it. yep I already tested it ;-)\nNow I'm trying to manage case when dvr is enable and live is broken\nthanks. hmmm your code doesn't work well sorry\nI tried to read an hls stream then shut my network... I just got bubble animation and not your code\ntry it\ncheck with that by example : https://wowza.jwplayer.com/live/jelly.stream/playlist.m3u8. ok sorry for misunderstanding. sorry to ask again but in your code, it starts by error message instead of trying to catch stream\nI know it is as example but can you tell me how to do to try first to get the stream and if it fails ok display error message with the counter\nthanks\n. arf sorry my bad :-(\n. merci je vais tester ;-). thanks @leandromoreira but I'm not a developer that's why I ask how to. @jhonatangomes : I can confirm now it is fixed with 0.2.93 in adding\ndisableErrorScreen: true,\nin player configuration\nthanks. ",
    "tsacks": "Hey there. I've been trying to get this working for a couple of months, and this seems to be related to so many different bug reports I can't even name them all. There's a serious issue here with being able to detect streams going offline. We just need some way to detect that the stream has gone offline, but there doesn't appear to be any way to do that at the moment.. ",
    "computersrmyfriends": "+1 Facing the same issue. Please fix this. its a serious bug if the player crashes and freezes when there is no stream. Atleast keep the autoreconnect=true as an option.. Sure, I will but how do you force it to replay the same source? By player.play(); or this.play()?. or player.load(source);? . ah ok, didn't notice that. Will try it ...Thanks... ",
    "intelezsol": "Hi\nI am having problem with HLS streaming on IOS safari.\nI tried using native hls player and html5 player and even just tried playing m3u8 link directly in IOS but it doesnt work, while its working on safari (desktop - mac) , chrome, firefox, just not in IOS (iphone).\nIs it a way to force safari IOS to use hls.js instead of native.js?\n. ",
    "AnanthKongu": "Hi, thanks for your reply, I checked, It'll not work in small screens, I mean in chrome mobile device emulator also, it throws following error, please help me...\n\n\n. ",
    "yeuser": "The problem is solved!\nI just build the clappr once again without modifying it myself. (Using the npm and not meddling myself)\nI built the clapper using the bump script (commenting git publish parts)\neverything works, (hls 0.6.15 is used) and all is ok!\nI think no problem is with hls.js (no issues that I see)\nThe cinnabot got me confused, please remove it as it gives wrong answer. (At least it gave me!)\n. ",
    "kaushik-hemant": "Can you please share some code for example for pre post and mid?\nSent from my iPhone\nOn 27-Dec-2016, at 7:09 PM, kslimani notifications@github.com<mailto:notifications@github.com> wrote:\nTechnically, it should be almost the same as preroll, except for VOD source : you need to store content video current position and restore it when playing back.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/clappr/clappr/issues/1244#issuecomment-269327465, or mute the threadhttps://github.com/notifications/unsubscribe-auth/APLJgPuYw4w6T9XXrecJY3SRzddyEXG_ks5rMRUcgaJpZM4LWRf_.\n. I surf around for midroll but didnt found anything useful, can i create my own plugin on top of clapper with time slot like at 00:10 schedule a ad or so.\nSent from my iPhone\nOn 27-Dec-2016, at 7:28 PM, kslimani notifications@github.com<mailto:notifications@github.com> wrote:\nI don't have example code for midroll and postroll, but you may find something usefull here :\n\nhttps://github.com/vix-simplex/clappr-vast-ad-plugin\nhttps://github.com/mycujoo/clappr-vast-plugin\nhttps://github.com/kslimani/clappr-google-ima-html5-preroll\nhttps://github.com/kslimani/clappr-html5-preroll-skeleton-plugin\n\n-\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/clappr/clappr/issues/1244#issuecomment-269329548, or mute the threadhttps://github.com/notifications/unsubscribe-auth/APLJgGv1UBBWhsqQplzbiGldRVKC71c7ks5rMRlngaJpZM4LWRf_.\n. ",
    "msyagli": "any updates? :). if it works, will be fine :). ",
    "anoopanooponly": "Thank you @kslimani  for the quick response.\nYes I have configured the player the same way. Am attaching some images for easy understanding.\n\nHere I have a custom seekbar with start and end time as 08:26:43 PM and 08:56:43 PM respectively. When I place the seekbar at any point I will load a new source based on the seeked time. Based the image above when I click play, I will load a new source like \"https://test.com/playlist/index.m3u8?start_time=2017-01-11T04:29:40Z\" . As the playback progress I need to update the seekbar, for which I am using the timeupdate event. But the time is not progressing after a while and sometime it is going backward also(from 74 to 73).\nPlease see the console log for timeupdate event:\n\nLog after a while:\n\nTime update event wont progess after 74\nAlso am using the latest version of clappr.\nThanks in advance.. I think your are right @tjenkinson.  I spend some time implementing the  getStartTimeOffset() in flashls ,but it differs a lot from respective implementation in hls. Flashls doesn't listen for event levelUpdated where as the same function in hls do a lot for calculating the offset time. Can someone please help me implement the same in flashls ? My project is getting delayed because of this.\nThanks in advance.\n. ",
    "zoell": "I am trying it, still no luck.. Should I change the playback? It is hls.js I guess.. wow it works! many thanks. ",
    "tushar09": "Thank you so much.. ",
    "pqray": "site: http://sejamaiorlab.web2335.uni5.net/diferencial_criativa/. Pode sim! . Muito obrigada gente, resolveu!!!. \nI still have a problem. In mobile, the video does not start automatically, the user has to click play to start even with autoplay on the desktop. What do I do?. ",
    "Night-Crawle": "@leandromoreira ,\nyes..I used..but not success yet... it stream source ,that used ,multiple camera...\nI want make it as that player...\ndo you have suggestion,how i need to code?/ that.\nalso,post support question there:\nlink: https://github.com/thiagopnts/clappr-video360/issues/11. ",
    "antonzhelyazkov": "Hi again,\nHere is an attachment with debug log.\ndebug.txt\n. ",
    "eutychus": "If you send a HTTP 503 instead of a 404 on the m3u8 when the stream is unavailable, it will trigger the retry options in hls.js.. hls.js used by clappr stops trying after a 404 (it assumes that the url is simply bad)... We solved this by having our servers send a 503 when the url is properly formatted for our live streams but no playlist is available.  We run our playlists through a script anyway for tracking, caching and quality assurance purposes.  You could probably override the http loader in hls.js to do the same thing... or listen for events where the video isn't playing and force it to try again.. There are a few ways to accomplish this... what we do is launch a clappr player with an event for pause, get the timecode, then fetch the fragment back from the server from the source file... using a command line like this:\nffmpeg -ss FLOAT_OFFSET_IN_SEC -i SOURCEFILE -frames 1 -f image2 -q:v 2 OUTFILE.JPG\nOur client can then approve the snapshot or continue on.\nWe capture from the source as we want a high quality capture and the player is typically playing back a multirate rendition at a lower bit rate than the source.\nAnother option is to play back the video and render it onto a canvas, then capture the canvas output from the client side.. ",
    "hxl-dy": "fixed:\njavascript\nvar clapprPlayer = new Clappr.Player({});\nclapprPlayer.attachTo(\"#player\");\nclapprPlayer.configure({\n  source: \"http://example.com/live/livestream.m3u8\",\n  autoPlay: true,\n});. ",
    "mikhoul": "Thanks @flavioribeiro @flavioribeiro for the help.\nI've setup a Jsbin to be sure we use the same code and resources:  http://jsbin.com/wuhiwa/edit?html,output\nI tried both in Firefox and Chrome.\nHere's a screenshot of the Chrome console:  http://i.imgur.com/ByS9BhV.png  The \"problem seem to be in hls.js . \nDoes I have the choice to use hls.js or Flashls ?\nThe Firefox console don't return the same message exactly that Chrome:\nScreenshot with headers: http://i.imgur.com/cmjd8Gi.png\nConsole Dump below\n00:22:28,930 GET \nhttp://output.jsbin.com/wuhiwa [HTTP/1.1 200 OK 87 ms]\n00:22:28,934 La connexion avec http://output.jsbin.com/wuhiwa?0.6189157693207458 a \u00e9t\u00e9 interrompue pendant le chargement de la page.  spike.js:232:9\n00:22:29,803 GET \nhttps://cdn.jsdelivr.net/clappr/latest/clappr.min.js [HTTP/2.0 200 OK 29 ms]\n00:22:29,810 GET \nhttp://static.jsbin.com/js/render/edit.js [HTTP/1.1 200 OK 19 ms]\n00:22:29,813 GET \nhttp://static.jsbin.com/js/vendor/eventsource.js [HTTP/1.1 200 OK 17 ms]\n00:22:29,814 GET \nhttp://static.jsbin.com/js/spike.js [HTTP/1.1 200 OK 19 ms]\n00:22:30,343 GET \nhttp://static.jsbin.com/images/favicon.png [HTTP/1.1 200 OK 61 ms]\n00:22:30,345 GET \nhttp://static.jsbin.com/css/edit.css [HTTP/1.1 200 OK 59 ms]\n00:22:30,592 GET \nhttps://cdn.jsdelivr.net/clappr/latest/38861cba61c66739c1452c3a71e39852.ttf [HTTP/2.0 200 OK 165 ms]\n00:22:30,845 GET \nXHR \nhttp://output.jsbin.com/wuhiwa [HTTP/1.1 200 OK 263179 ms]\n00:22:35,346 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/master.m3u8 [HTTP/1.1 200 OK 14 ms]\n00:22:35,377 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-p.m3u8 [HTTP/1.1 403 Forbidden 12 ms]\n00:22:35,560 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-b.m3u8 [HTTP/1.1 403 Forbidden 13 ms]\n00:22:35,594 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-b.m3u8 [HTTP/1.1 403 Forbidden 14 ms]\n00:22:35,716 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-p.m3u8 [HTTP/1.1 403 Forbidden 14 ms]\n00:22:35,788 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-p.m3u8 [HTTP/1.1 403 Forbidden 14 ms]\n00:22:35,899 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-b.m3u8 [HTTP/1.1 403 Forbidden 15 ms]\n00:22:35,956 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-b.m3u8 [HTTP/1.1 403 Forbidden 14 ms]\n00:22:36,068 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-p.m3u8 [HTTP/1.1 403 Forbidden 13 ms]\n00:22:36,136 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-p.m3u8 [HTTP/1.1 403 Forbidden 13 ms]\n00:22:36,195 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-b.m3u8 [HTTP/1.1 403 Forbidden 15 ms]\n00:22:36,221 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-b.m3u8 [HTTP/1.1 403 Forbidden 12 ms]\n00:22:36,298 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-p.m3u8 [HTTP/1.1 403 Forbidden 13 ms]\n00:22:36,341 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-p.m3u8 [HTTP/1.1 403 Forbidden 12 ms]\n00:22:36,413 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-b.m3u8 [HTTP/1.1 403 Forbidden 20 ms]\n00:22:36,467 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-b.m3u8 [HTTP/1.1 403 Forbidden 13 ms]\n00:22:36,606 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-p.m3u8 [HTTP/1.1 403 Forbidden 14 ms]\n00:22:36,664 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-p.m3u8 [HTTP/1.1 403 Forbidden 13 ms]\n00:22:36,807 GET \nXHR \nhttp://chaine_tva_uls-lh.akamaihd.net/i/tvago_1@410563/index_250_av-b.m3u8 [HTTP/1.1 403 Forbidden 13 ms]\n00:22:36,802 [error][hlsjs: could not recover from error after maximum number of attempts, evt hlsError, data [object Object] ]  clappr.min.js:7:7247\n00:32:10,309 GET \nXHR \nhttp://output.jsbin.com/wuhiwa [HTTP/1.1 200 OK]\nHere's a screenshot of the Network tab: http://i.imgur.com/FUtdn1I.png\nif you need more information just ask me ! \nI'd really appreciate your help ! \nRegards :octocat: . I've tried with the old IExplorer 11 and here's a screenshot of the console messages: http://i.imgur.com/jkafPhj.png\nI downloaded Opera portable and tried to see what will happen and strangely it work fine with Opera.\nI need some help to find why it happen with Firefox, Chrome and IE at least, I don't have enough knowledge myself to resolve this problem alone.\nEven tried with Firefox a brand new clean profile and same results. :disappointed:  \nRegards ! :octocat: . > Hi @mikhoul is there any error on console log? or network?\n@leandromoreira Could you help me to decipher the content of console logs ?\nRegards ! :octocat: . @leandromoreira  @flavioribeiro  Nobody to help here ?\nFor me it work only in Opera, it don't work in Firefox or Chrome.. I tested with the FLASHLS plugin with the video.js demo to exclude a problem with the flashls plugin itself and it work fine in all browsers.\nIf you want to try it here: http://www.flashls.org/videojs/flash_demo.html\nRegards :octocat: . @h4rpreet  It work also for me but I have a problem with another Stream/URL that for a strange reason that I don't understand work only in Opera,\nAsk to a user to try with Opera Portable to see if it work ?    \nLet me know if it work maybe it could be the \"same\" issue I have since other people are able to stream my problematic stream.\nRegards :octocat: . ",
    "h4rpreet": "I asked user to send his console screenshot and he gives me this: http://i.imgur.com/HN6YK1m.jpg\nwhat should i do ? is it my server side issue or something in player ?. Can you please try again and see if it works for you now ? we server guy did some changes. Also i really love clappr :D i wish i could contribute.. Hello, \nIt seems we found the issue, Something like HLS ip check was showing 403. We disabled it and it runs fine now. \nThanks.. ",
    "oyjcmyn": "Hi,\nClappr-playlist-plugin is no longer working properly.\nclappr-sequence-plugin is also the same error.\nThe following program error occurred\nUncaught SyntaxError: Unexpected token import\nPayer.php: 40 Uncaught ReferenceError: SequencePlugin is not defined\nIs there any way to modify it?. @towerz  Thank you, hope to be able to use it earlier.. ",
    "hijuuijj": "All I want is to disable the \"click to pause\" feature. I don't understand why it's enabled by default for rewindable videos. It should pause with pause button or space bar.\nI like to change the video to full screen with double click, without interrupting the reproduction.. I added some links. I have the code:\n<script src=\"https://cdn.jsdelivr.net/clappr/latest/clappr.min.js\"></script>\n<div id=\"player\"></div>\n<script>var player = new Clappr.Player({\nsource: \"http://www.stream.com/stream.m3u8\",\nparentId: \"#player\",\nheight: \"100%\",\nwidth: \"100%\",\nautoPlay: true,\n});\n</script>\nWhere to add this code?\nplayer.on(Clappr.Events.PLAYBACK_ERROR, function(error) {\n      console.log(error);\n    });. <script>var player = new Clappr.Player({\nsource: \"http://listen.radionomy.com/ABC-Lounge\", mimeType:=\"application/x-mpegURL\",\n});\n</script>\nI added this code but it doesn't work. What am I doing wrong?\nThanks in advance.. Thank you. Works adding mimeType: \"audio/mpeg\",\nBy the way, how can I know the mime type? like this one: http://flaixfmmob.streaming-pro.com:8002/;. 403 error is due geo-blocking, right? I tried with TunnelBear VPN before opening this post and I can download the m3u8 file. Have you tried with https://www.hlsplayer.net ?\nHowever I can't open it with Clappr for some reason.. @kslimani I forgot to say that I already tried [Clappr.FlasHLS] and CORS Toggle (for Chrome)\nNone of them work ... neither from the Clappr demo page.. @leandromoreira No error message... just loading... how to see the error from Clappr?\nGrind Player shows this error:\nError:\nMessage: Security error when loading media\nDetail: Cannot load M3U8: crossdomain acces denied:Error #2048\n(however I can open the video from https://www.hlsplayer.net. It uses Grind Player too).. @kslimani Yes, it works with Firefox... not with Chrome. Este canal funciona perfectamente en http://photocall.mooo.com\nAbre el canal y mira el c\u00f3digo con CTRL + U. Nice. Cors plugin solved the problem.\nI have found the original source too: http://livecdn1.news.cn/www/cncen.html\nSome of your links of \"common steps to verify issues\" doesn't work, like \"hls.js demo page\"\nhttp://streambox.fr/mse/demo/\nhttp://streambox.fr/mse/hls.js-0.7.9/demo/. Another Dailymotion live stream (without error 403) and not playable with Clappr but playable with Grind Player https://www.hlsplayer.net\nhttp://stream-15.dc3.dailymotion.com/48/dm/3/x3m6nld/live-4.m3u8\nBTW the 1st link works with http instead https (using https://www.hlsplayer.net). I wonder why GrindPlayer can open the stream.. Have you tried the stream from https://www.hlsplayer.net? it works for me (I think there's no geoblock because I'm in other country/continent)\nWould be interesting to know how crossdomain.xml loads. I know. I'm trying to figure out how hlsplayer.net can play it via flash.. I know. I'm trying to figure out how hlsplayer.net can play it via flash.. Any stream, like this: http://hlsackdn_gl8-lh.akamaihd.net/i/hlsdvrlive_1@81183/master.m3u8. Chrome 62.0.3202.75 (Build oficial) (64 bits)\nWindows 10\ni7 6700K/16GB/nvidia 1060\nSame problem with this stream: http://a3live-lh.akamaihd.net/i/l6hds/lasexta_1@35272/master.m3u8\nit starts correctly but later goes out of sync. Same problem with Youtube. It seems to be a bug, possibly Chrome and/or nvidia drivers. \"Access Denied\" using user agent and usa proxy. Anyway I see a token after the m3u8.... Loading animation freezes with the latest\nhttps://cdn.jsdelivr.net/npm/clappr@latest/dist/clappr.min.js. https://cdn.jsdelivr.net/npm/clappr@latest/dist/clappr.min.js is not compatible with Firefox:\n\"Your browser does not support the playback of this video. Please try using a different browser\"\n  . Can be opened from these links?\nhttp://gatekeeper.mediaset.es/\nhttp://gatekeeper.mediaset.es/key/fdf/akamai\nhttp://www.mitele.es/live/index.html?alias=fdf. This stream can be played with Clappr + FlasHLS plugin + Chrome... but not with Edge.\nHowever GrindPlayer and StrobeMediaPlayback can play it using Edge.\nhttp://telecinco-mediaset-esp-live.secure.footprint.net/mediaset/cuatro/index.m3u8\nIt's a FlasHLS plugin problem with Edge?. Try to play this stream from Edge: http://photocall.tv/clf.php?vid=telecinco-mediaset-esp-live.secure.footprint.net/mediaset/telecinco/index.m3u8\nI know Edge can play native HLS but I'd like to use Clappr player anyway.. Who maintains that file? what is the difference between both? (in addition to CC)\n  . https://cdn.jsdelivr.net/npm/clappr@latest/dist/clappr.min.js updated and working in Firefox.. I have tried 3 times the first link from http://clappr.io/demo/... 2 first times OK... the third time has failed for some reason. (loading... and stopped). First try. OK\nSecond try, video doesn't open (no error)\nPlease try several times with the first link,. This \"bug\" seems to be fixed, right? I didn't have the same problem again.. It seems that it's a HLS.js problem. With Chrome PC using Clappr:\nPixelated: https://cdn.jsdelivr.net/npm/clappr@latest/dist/clappr.min.js\nNot pixelated: https://cdn.jsdelivr.net/clappr/latest/clappr.min.js\nThere is something wrong with the first one (npm). Commented here too:\nhttps://github.com/video-dev/hls.js/issues/1695\n(pixelated on v0.9.1, not pixelated on v0.7.5). Is there any news? Atresmedia group has disabled the option to play the stream with clappr/hls.js (crossdomain)... so now it's only playable with HLS Native Playback extension... but it's still pixelated.\nhttp://livepull1.secure.footprint.net/antena3mpp/bitrate_4.m3u8. It works from the demo, but not from my code. Try it.\nA few days ago it worked.. No. Have you tried my code?. My code is exactly the same as: https://github.com/clappr/clappr\n\"Add the following script on your HTML:\"... \"Now, create the player:\". The error sometimes changes to \"hls:networkError_manifestParsingError\". Another stream with the same problem: https://telecaribe-deportes.gcdn.anvato.net/hls/manifests/telecaribedeporteshd2/master.m3u8. I just tried the same code on a different hosting and it works without problems. http://czwjaeao.lucusvirtual.es/stream.htm\nIt seems that the problem it's on my hosting (1&1)... maybe those two streams have blocked the clappr player on page? I have no idea. The solution has been to replace Clappr with hls.js for those streams that cannot be played.. https://live-vrt.akamaized.net/groupc/live/8edf3bdf-7db3-41c3-a318-72cb7f82de66/live_aes.isml/playlist.m3u8\nWorking: https://cdn.jsdelivr.net/clappr/latest/clappr.min.js\nNot working (Error code: hls:4) https://cdn.jsdelivr.net/npm/clappr@latest/dist/clappr.min.js. OK. I see the \"picture in picture\" option with right click.\nIs there any way to show an icon with this feature from Clappr?. > @hijuuijj @hamesjarden we already have a working version of the pip plugin for Chrome. We'll release this version this week. Just setting up the repository and packages.\nThank you, I was thinking about changing Clappr to HLS.js\nOne of the reasons why Clappr does not convince me is this: https://github.com/clappr/clappr/issues/1617. I have noticed this:\nhttps://cdn.jsdelivr.net/clappr/latest/clappr.min.js\nWorks with LevelSelector\nWorks with Chromecast\nDoes not work with PiP\nhttps://cdn.jsdelivr.net/npm/clappr@latest/dist/clappr.min.js\nWorks with PiP\nDoes not work with LevelSelector\nDoes not work with Chromecast\nSome m3u8 fail\nIs there any way to integrate everything to the first one?. Yes. For example with this stream: https://content.uplynk.com/channel/4ee18bd581dc4d3b90303e0cb9beeb0f.m3u8\nThe old https://cdn.jsdelivr.net/clappr/latest/clappr.min.js works in my server (1&1)... the new one does not.\nError code: hls:networkError_manifestParsingError. I know. The problem is that the new version does not seem to work on some servers.. Are you sure? try to move the progress bar to the end (even if it shows \"Live\"). What do you mean with 'both are work'?\nWhat do I  have to change in the URL 2 code?. ",
    "max80713": "I also encountered the same problem recently. I'll try @kslimani 's advice and report back if it works or not.. I've tried out @kslimani 's advice and I found that, first of all, mute option should be muted option.\nAnd if I set both muted and autoPlay options to true or only muted option to true, clappr still doesn't autoplay. I guess that's because clappr mutes and autoplays the video by setting volume to 0 and calling play() on video element instead of just puts muted and autoplay attributes in the video tag(i.e <video muted autoplay></video>).\nDoes anyone have any idea?. ",
    "Craytor": "Do we have a timeline to when this may be implemented? Waiting for a feature like this.. @kslimani Perfect, thank you - exactly what I was looking for. This should be better documented IMO.. ",
    "MTRNord": "Same Problem using own stream (generated by nginx rtmp plugin). Error in Log is \"media type unsupported\". ",
    "PapiCZ": "Solved with ngx_http_secure_link_module. Can be closed :). ",
    "mortegai": "Yes, it's for HLS. And in (#1075) I found how to do it: hlsjsConfig with xhrSetup and xhr.setRequestHeader. But is not valid for some header as Referer. ",
    "busla": "Thanks for the quick reply \ud83d\ude04 \nWeird that you get a 401 on that URL. It might be blocked outside of Iceland.\nHere is the global stream. Could you try that one?\nhttp://ruvruverl-live.hls.adaptive.level3.net/ruv/ruverl/index.m3u8\nTried your code but still no DVR in Safari.\n\nAlso tried the demo page, but no DVR support:\n\n. Hey,\nThe DVR works fine on Chrome and Firefox, but not on Safari, as described in the original post.\nThe FlasHLS loads properly, I actually used that in the original post to get the version numbers \ud83d\ude04 \nThanks for looking into this.\n. ",
    "gaalgergely": "I am reading the docs. Found something similar here:\nhttps://github.com/clappr/clappr/commit/85f54f84a9b14853b49f1b327b1a724df55aff2a. Thanks for the response! How can i do that? Do you have a tutorial somewhere?. Thank you!. ",
    "hey68you": "I'm getting the same sort of issue by doing the following:\nwhen i open this URL on mobile iOS Safari browser or in device simulation mode (MacOSX Chrome or Safari): non-cdn http://clappr.io/\nBut if I open the CDN url everything is working fine (video playback working): http://clappr.io/demo/\nThe problem is also happening for me on my personal project even using version  0.2.64, but only on Safari ios mobile (works fine on laptop Chrome and Safari)\n. Confirmed: setting chromeless to false works (no error). ",
    "Feodorov": "I have the same issue only when I set chromeless: true. If I set false - it works fine. Chrome 60 on Safari, clappr@0.2.73. \nMy current options are:\nthis.player = new Clappr.Player({\n                source: file,\n                parentId: \"#video-player\",\n                autoPlay: true,\n                disableKeyboardShortcuts: true,\n                actualLiveTime: false,\n                chromeless: true,\n                playbackNotSupportedMessage: 'REDACTED'\n});. https://github.com/clappr/clappr/blob/master/src/components/core_factory/core_factory.js#L37 - here we create MediaControl and fail during setup (call to MediaControl.hide because of chromeless: true): https://github.com/clappr/clappr/blob/master/src/components/core/core.js#L69 - because we try to access an instance of container.\nBut container is set later, in https://github.com/clappr/clappr/blob/master/src/components/core_factory/core_factory.js#L39 \n. ",
    "itsjamie": "@kslimani Done.. ",
    "contra": "You should be able to point it at the source unless you have any custom babel plugins that need running.\ndeck.gl, for example has one plugin that they run first: https://github.com/uber/deck.gl/blob/master/package.json#L26. @kslimani Webpack will handle all of that stuff based on the top-level user config. The way webpack deals with this is to treat a dependency with a module attribute as if it was a member of your own source code - compiling it with babel, loading linked css files, etc.. Keep it open.. Keep it open please.. Keep it open.\nAlso FWIW - I made a quick attempt at doing this, there was some complexity with the clappr babel build setup that wasn't working right for me so I wasn't able to get it into a PR-able state.. Should ignore non-js files from coverage reports ^. After more testing - this will require a rethinking of the way the build works currently. The aliases, svgs, and CSS loading is going to make this a breaking change that would require all webpack users to write those rules themselves. It doesn't look like there is any way to tell webpack that it should use the config of a dependency to manage that dependencies assets.\nOnly way I can see this working is to remove webpack from clappr, or do a separate output (multi file) that does everything except babel/uglify/minify.. @leandromoreira Ticket doesn't have anything to do with play orders - really as simple as mimeType: 'application/x-mpegurl' not working when it should. Keep it open.. Keep it open.. ",
    "JeanSauzem": "thank you . Hi @leandromoreira \"http://104.41.45.119:1935/leadlovers/mp3:Central.mp3/playlist.m3u8\" Using the following link, the player is only loading. But using m3u8 file with a video works, playlist is just the name of the file, the player does not read m3u8 file containing only audio. Thank you @kslimani . ",
    "danicho": "I am a newbie and I speak Spanish, I hope you understand me.\nApply google translate. I am using the following code.\nI want one player to be in one section and the other to the next section\n\n\n\n\n\n\n    var player = new Clappr.Player({source: \"http://xxxx.xxxxxxx/xxxxxx/x/xxxxx.m3u8\", parentId: \"#player\", poster: 'http://xxxxx.xx/play2.png'}); \n  \nThanks. ",
    "frank717": "OK, thank you for this information.. ",
    "nishantkumarsah": "EXTM3U\nEXT-X-VERSION:3\nEXT-X-TARGETDURATION:17\nEXT-X-MEDIA-SEQUENCE:0\nEXTINF:16.706556,\npartial_file0000.ts\nEXTINF:8.341667,\npartial_file0001.ts\nEXTINF:8.341667,\npartial_file0002.ts\nEXTINF:8.341667,\npartial_file0003.ts\nEXTINF:8.341667,\npartial_file0004.ts\nEXTINF:16.683333,\npartial_file0005.ts\nEXTINF:8.341667,\npartial_file0006.ts\nEXTINF:8.341667,\npartial_file0007.ts\nThis playlist is still being generated. Currently avi container is getting converted into HLS playlist. \nAs soon as the playlist is available(even with one segment), the playlist is fed to clappr. \nThe clappr starts in live mode since playlist is still  in generation. While in live mode clappr plays the most recent segment and NOT the first segment. \nI can not wait for playlist to be completely generated. I need to play as soon as something is available.  However it needs to play from the start.. playlist after some time.  Still in generation.\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-TARGETDURATION:17\nEXT-X-MEDIA-SEQUENCE:0\nEXTINF:16.706556,\npartial_file0000.ts\nEXTINF:8.341667,\npartial_file0001.ts\nEXTINF:8.341667,\npartial_file0002.ts\nEXTINF:8.341667,\npartial_file0003.ts\nEXTINF:8.341667,\npartial_file0004.ts\nEXTINF:16.683333,\npartial_file0005.ts\nEXTINF:8.341667,\npartial_file0006.ts\nEXTINF:8.341667,\npartial_file0007.ts\nEXTINF:8.341667,\npartial_file0008.ts\nEXTINF:8.341667,\npartial_file0009.ts\nEXTINF:16.683333,\npartial_file0010.ts\nEXTINF:8.341667,\npartial_file0011.ts\nEXTINF:8.341667,\npartial_file0012.ts\nEXTINF:8.341667,\npartial_file0013.ts\nEXTINF:8.341667,\npartial_file0014.ts\nEXTINF:16.683333,\npartial_file0015.ts\nEXTINF:8.341667,\npartial_file0016.ts. I understand that this is expected behavior. \nHow do i tell clappr to play from the start when it begins playing in live mode? \nIs there any options/settings ?. yes, this is the current situation. However, from the user experience point of view it is not an acceptable one. The user is expecting a fully downloaded file and not live mode. He wants to see video from start and not from say 5 min delayed even though he can seek back.. Use case\nUser downloads the file on cloud and expects to view/play them immediately. \nThe file container is not constant. It can be .mkv or .avi or .mpeg etc with different codecs. For this reason, all the files are converted into common denominator \"HLS\". \nThis conversion to HLS format is quick in case if only demuxing is required. However, when decoding is also required for formats like .avi, it takes a lot of time(sometime hrs). Hence, user cannot wait that long for conversion of file and thereafter to play it. \nNow for the latter case one option is to poll the availability of playlist after few seconds and play as soon as playlist is available. The polling cannot happen every other second due to performance constraints. So, by the time playlist is available and supplied to clappr the live mode is 10-20 sec ahead of the start time depending upon the speed of the encoding done by ffmpeg. This i wanted to avoid by some setting/option to play the video from the start even in live mode?. Let me rephrase - \nIs there any setting/option to play the video from the start when in live mode????\n. thankyou. ",
    "greenkeeper[bot]": "Version 3.0.6 just got published.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.0.6\n\u00a0\n\n\nCommits\nThe new version differs by 6 commits0.\n\n050474a v3.0.6\nf6c805a print package name alongside version in CLI (#1946)\n9464d3c fix parsing of property access after new line (#1944)\nf18abd1 minor fixes to README.md\n3be06ad reorg README for 3.x (#1942)\n265008c improve keyword-related parser errors (#1941)\n\nfalse\nSee the full diff\n\n. ## Version 3.0.7 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.0.7\n\u00a0\n\n\nCommits\nThe new version differs by 2 commits.\n\nc881394 v3.0.7\ncb45886 export TreeTransformer (#1950)\n\nSee the full diff\n\n. ## Version 3.0.8 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.0.8\n\u00a0\n\n\nCommits\nThe new version differs by 7 commits.\n\n43add94 v3.0.8\nefcf167 make expect_stdout node version specific (#1963)\n6ed9091 fix docs for side_effects flag to reflect current behavior (#1966)\n569c21e improve RegExp handling (#1959)\n87c3a2c remove space_colon (#1960)\nbaef8bf update output options in readme (#1958)\n0813c53 remove Travis CI badge\n\nSee the full diff\n\n. ## Version 3.0.9 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.0.9\n\u00a0\n\n\nCommits\nThe new version differs by 2 commits.\n\n3408fc9 v3.0.9\neae2675 introduce unsafe_regexp (#1970)\n\nSee the full diff\n\n. ## Version 3.0.10 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.0.10\n\u00a0\n\n\nCommits\nThe new version differs by 6 commits.\n\nd3c4a8e v3.0.10\n7e164ab add \"es5\" to package.json keywords (#1980)\n22aedef document minify() option toplevel (#1979)\n58fae7d enhance if_return to handle return void... (#1977)\n5bf8d7e document 3.x minify() does not throw errors (#1975)\n1df9d06 document minify warnings and add an error example (#1973)\n\nSee the full diff\n\n. ## Version 4.1.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\n4.1.0 / 2017-07-11\nThis release includes one new feature and a few bug fixes.\nNew Features\n\nAdd ES6 collection support to include() (#970, #994; @shvaikalesh)\n\nBug Fixes\n\nAllow dates for isBelow and isAbove assertions (#980, #990; @v1adko)\nfix: check target's type in .property assertion (#992; @meeber)\n\nChores\n\nAdd a missing var keyword found by lgtm.com (#988; @samlanning)\nrefactor: expectTypes to access ssfi flag (#993; @meeber)\nCreate CODEOWNERS (#1004; @keithamus)\n\n\n\nCommits\nThe new version differs by 16 commits.\n\ndf9073c Merge pull request #998 from v1adko/make-release\ncad9933 Merge pull request #1004 from chaijs/code-owners\ncf70b11 Create CODEOWNERS\n3397dda Merge pull request #1005 from meeber/skip-failing-tests\n11a6f85 test: skip failing .include tests in IE11\n45cb327 chai@4.1.0\n2eddd79 Add ES6 collection support to include() (#994)\n3c932e2 feat: allow dates for isBelow and isAbove assertions (#990)\n3bcb21c Merge pull request #979 from chaijs/greenkeeper/browserify-14.4.0\n5daceab Merge pull request #988 from samlanning/missing-var\n9116bc8 Merge pull request #993 from meeber/refactor-expect-types\n351e968 Merge pull request #992 from meeber/property-target-type\ne7b2384 refactor: expectTypes to access ssfi flag\ne6ddf64 fix: check target's type in .property assertion\n7e466af Add a missing var keyword found by lgtm.com\n\nThere are 16 commits in total.\nSee the full diff\n\n. After pinning to 3.0.15 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 3.0.17 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nv3.0.17\n\u00a0\n\n\nCommits\nThe new version differs by 5 commits.\n\n57dc4fb v3.0.17\nb85a358 suppress inline of this (#2103)\n4369795 avoid intermittent test time-out failures (#2100)\n3f961bb compute uses_arguments correctly in figure_out_scope() (#2099)\n0a1e523 fix parsing of expect_stdout (#2096)\n\nSee the full diff\n\n. ## Version 4.1.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.1.1\n\nf307aa0 Fix: ensure configs from a plugin are cached separately (fixes #8792) (#8798) (Teddy Katz)\n8b48ae8 Docs: Add doc on parser services (fixes #8390) (#8795) (Victor Hom)\n0d041e7 Fix: avoid crashing when using baseConfig with extends (fixes #8791) (#8797) (Teddy Katz)\n03213bb Chore: improve comment explanation of indent internal functions (#8800) (Teddy Katz)\nd2e88ed Chore: Fix misleading comment in ConfigCache.js (#8799) (Teddy Katz)\n\n\n\nCommits\nThe new version differs by 7 commits.\n\n1df6a01 4.1.1\n79a4482 Build: changelog update for 4.1.1\nf307aa0 Fix: ensure configs from a plugin are cached separately (fixes #8792) (#8798)\n8b48ae8 Docs: Add doc on parser services (fixes #8390) (#8795)\n0d041e7 Fix: avoid crashing when using baseConfig with extends (fixes #8791) (#8797)\n03213bb Chore: improve comment explanation of indent internal functions (#8800)\nd2e88ed Chore: Fix misleading comment in ConfigCache.js (#8799)\n\nSee the full diff\n\n. ## Version 4.2.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.2.0\n\ne0f0101 Update: fix indentation of nested function parameters (fixes #8892) (#8900) (Teddy Katz)\n9f95a3e Chore: remove unused helper method from indent (#8901) (Teddy Katz)\n11ffe6b Fix: no-regex-spaces rule incorrectly fixes quantified spaces (#8773) (Keri Warr)\n975dacf Update: fix indentation of EmptyStatements (fixes #8882) (#8885) (Teddy Katz)\n88ed041 Build: Turnoff CI branch build (fixes #8804) (#8873) (Gyandeep Singh)\n72f22eb Chore: replace is-my-json-valid with Ajv (#8852) (Gajus Kuizinas)\n7c8de92 Docs: Clarified PR guidelines in maintainer guide (#8876) (Kevin Partington)\nd1fc408 Docs: Update CLA link in Contributing docs (#8883) (Calvin Freitas)\n931a9f1 Fix: indent false positive with multi-line await expression (#8837) (\u859b\u5b9a\u8c14\u7684\u732b)\n3767cda Update: add no-sync option to allow at root level (fixes #7985) (#8859) (Victor Hom)\n1ce553d Docs: Fix wording of minProperties in object-curly-newline (fixes #8874) (#8878) (solmsted)\nf00854e Fix: --quiet no longer fixes warnings (fixes #8675) (#8858) (Kevin Partington)\nb678535 Chore: Add collapsible block for config in ISSUE_TEMPLATE (#8872) (Gyandeep Singh)\n1f5bfc2 Update: Add always-multiline option to multiline-ternary (fixes #8770) (#8841) (Nathan Woltman)\n22116f2 Fix: correct comma-dangle JSON schema (#8864) (Evgeny Poberezkin)\n676af9e Update: fix indentation of JSXExpressionContainer contents (fixes #8832) (#8850) (Teddy Katz)\n330dd58 Chore: fix title of linter test suite (#8861) (Teddy Katz)\n60099ed Chore: enable for-direction rule on ESLint codebase (#8853) (\u859b\u5b9a\u8c14\u7684\u732b)\ne0d1a84 Chore: upgrade eslint-plugin-eslint-plugin & eslint-plugin-node (#8856) (\u859b\u5b9a\u8c14\u7684\u732b)\n0780d86 Chore: remove identical tests (#8851) (Teddy Katz)\n5c3ac8e Fix: arrow-parens fixer gets tripped up with trailing comma in args (#8838) (\u859b\u5b9a\u8c14\u7684\u732b)\nc4f2e29 Build: fix race condition in demo (#8827) (Teddy Katz)\nc693be5 New: Allow passing a function as fix option (fixes #8039) (#8730) (Ian VanSchooten)\n8796d55 Docs: add missing item to 4.0 migration guide table of contents (#8835) (\u859b\u5b9a\u8c14\u7684\u732b)\n742998c doc md update: false -> false (#8825) (Erik Vold)\nce969f9 Docs: add guidelines for patch release communication (fixes #7277) (#8823) (Teddy Katz)\n5c83c99 Docs: Clarify arrow function parens in no-extra-parens (fixes #8741) (#8822) (Kevin Partington)\n84d921d Docs: Added note about Node/CJS scoping to no-redeclare (fixes #8814) (#8820) (Kevin Partington)\n85c9327 Update: fix parenthesized CallExpression indentation (fixes #8790) (#8802) (Teddy Katz)\nbe8d354 Update: simplify variable declarator indent handling (fixes #8785) (#8801) (Teddy Katz)\n9417818 Fix: no-debugger autofixer produced invalid syntax (#8806) (Teddy Katz)\n8698a92 New: getter-return rule (fixes #8449) (#8460) (\u859b\u5b9a\u8c14\u7684\u732b)\neac06f2 Fix: no-extra-parens false positives for variables called \"let\" (#8808) (Teddy Katz)\n616587f Fix: dot-notation autofix produces syntax errors for object called \"let\" (#8807) (Teddy Katz)\na53ef7e Fix: don't require a third argument in linter.verifyAndFix (fixes #8805) (#8809) (Teddy Katz)\n5ad8b70 Docs: add minor formatting improvement to paragraph about parsers (#8816) (Teddy Katz)\n\n\n\nCommits\nThe new version differs by 38 commits.\n\n5ea79dc 4.2.0\nb19ee3f Build: changelog update for 4.2.0\ne0f0101 Update: fix indentation of nested function parameters (fixes #8892) (#8900)\n9f95a3e Chore: remove unused helper method from indent (#8901)\n11ffe6b Fix: no-regex-spaces rule incorrectly fixes quantified spaces (#8773)\n975dacf Update: fix indentation of EmptyStatements (fixes #8882) (#8885)\n88ed041 Build: Turnoff CI branch build (fixes #8804) (#8873)\n72f22eb Chore: replace is-my-json-valid with Ajv (#8852)\n7c8de92 Docs: Clarified PR guidelines in maintainer guide (#8876)\nd1fc408 Docs: Update CLA link in Contributing docs (#8883)\n931a9f1 Fix: indent false positive with multi-line await expression (#8837)\n3767cda Update: add no-sync option to allow at root level (fixes #7985) (#8859)\n1ce553d Docs: Fix wording of minProperties in object-curly-newline (fixes #8874) (#8878)\nf00854e Fix: --quiet no longer fixes warnings (fixes #8675) (#8858)\nb678535 Chore: Add collapsible block for config in ISSUE_TEMPLATE (#8872)\n\nThere are 38 commits in total.\nSee the full diff\n\n. \nHey there \ud83d\udc4b,\nwe noticed that this PR isn\u2019t merged yet. Just to let you know: if you don't merge this PR, Greenkeeper will not be enabled on this repo, and you won't receive updates for your dependencies.\nIf you don't want to enable Greenkeeper here, just close or ignore this PR, we won't nag you again. \u270c\ufe0f\nHave a great day! \ud83c\udf34\n. ",
    "RodolpheFouquet": "Awesome, that works, thank you!. ",
    "UnitedPeace": "@leandromoreira Playback override does not work on ios, it still uses native html5 video tag.. @leandromoreira I'm having trouble getting it to use HLS, when I attempt to force it on IOS it gives \"Your browser does not support the playback of this video. Please try using a different browser\".. Are there any other methods that can be used to intercept url data from the m3u8 files and dynamically change it on ios browser?. @kslimani I'm attempting to dynamically change m3u8 data client side without querying the server so much. I can do this intercepting XMLHttpRequest requests on desktop browsers but native ios html5 video does not use XMLHttpRequest requests.. Here is a quick capture. VLC is able to understand the captions as well.\nhttps://www.tental.com/m3u8test/main.m3u8. @kslimani @leandromoreira Sorry about that, here is an updated url with cors *\nPlease make sure you use the www infront of the url.\nhttps://www.tental.com/m3u8test/main.m3u8\nquick link to the hls.js demo. It is likely you have embed the clappr player in an iframe and did not add the allowfullscreen=\"true\" tag to the iframe.. Because your source has security to block requests from other websites, otherwise known as cross origin policy.. That one uses the same security.. ",
    "Kzanadeus": "With the js function load\nEx : player.load('mavideo.mp4');. In fact, the problem is not that the video start to the begining when i change the source. After i changed the source once, if you pause the player and then replay it, it will start from the begining not at the position it has been paused. It only append after i changed the source. The first video, everything is perfect.. Exactly.. @leandromoreira I tried your code on your demo page and yes it's working fine.\nI'm searching a way to create a page that you can try yourself because the behavior is different inside my project.\nAnyway, thanks for your reactivity.. ",
    "skylord220": "Suffering from similar issue. In my case source video URL was relative to site root (not absolute). Browser converts it to absolute. Then after playback resume HTML5Video.prototype._setupSrc compares elements' and config source URLs and as they differ (relative from config and absolute from element) - replaces elements' one resulting in video restart.. ",
    "ipejasinovic": "Try like this:\n```javascript\nvar player = new Clappr.Player({\n  parentId: \"#player-wrapper\",\n  height: 360,\n  width: 640,\n  plugins: [Clappr.FlasHLS]\n});\nplayer.load(\"http://somedomain.com/live.m3u8\");\nplayer.play();\n```. ",
    "Eetin": "@kslimani we used Flash HLS on Safari because of DVR issue on html5 playback.\nI checked the latest version without Flash HLS plugin and everything works now.\nThank you.. ",
    "Abdel-ilah": "thanks leandromoreira, kslimani. Thank you kaslimani\nyes, it's work fine\ncan you try with this please?\nhttps://7dkwdw.mycloud.to/1/ZEWphKzr2joqPWgt132ihg/0/d/m/o/dqo4mw/hls/360/360.m3u8?e=1500116400. Thank you. for play it on multi devices you should ask the IPTV provider for activate re-streaming option, you need more $$. Yes boss. it's possible to play this url?. ",
    "andrefilipegsilva": "@kslimani It's possible but I've adapted my code to work with Clappr...\nI'm hoping for a solution within Clappr but if there isn't any, I will follow your suggestion.... @bikegriffith The thing is that it only reaches such amount of memory usage over time, i.e. 5-10-15 minutes. It is mandatory that my project runs across different browsers, so Edge alone is not an option. Increasing memory is a possibility but I'm trying to solve this issue in a programmatic way rather than in a physical one.\nI'm gonna try to use the flags you specified and then I'll share the results.\n@leandromoreira I've set the flag like this:\njavascript\nself.player = new Clappr.Player({\n            source: self.hlsAddress(),\n            poster: 'http://clappr.io/poster.png',\n            mute: true,\n            width: '100%',\n            height: '100%',\n            disableKeyboardShortcuts: true,\n            hideVolumeBar: true,\n            maxBufferLength: 5,\n            hlsjsConfig: {\n                maxBufferLength: 5\n            }\n. @bikegriffith I've set the hlsjsConfig debug property to true without nesting the hlsjsConfig inside the playback and it worked... Is it different for the maxBufferLength property?\n. Even while setting correctly the hlsjsConfig dictionary within the playback with the options maxBufferLength: 5 and maxMaxBufferLength: 5 it escalates to over 1.5 GB. Any other ideas? I'm kinda stuck...\nI shall reinforce that the increase in memory usage is time-based. It usually starts around 450MB and then goes up.. I'm gonna switch to 'pure' hls.js and I'll come back with results.\nThanks!. I've implemented pure hls.js and the results were better (as expected because there's no additional overhead), but the memory still rises overtime (around 15-20 minutes of spectating) to ~ 1GB and up, and it doesn't stop nor decrease significantly.\nI've configured HLS with these parameters:\njavascript\nvar config = {\n            capLevelToPlayerSize: true,\n            maxBufferSize: 30,\n            maxBufferLength: 5\n        };\n        self.hls = new Hls(config);\nIf you think this is somewhat unrelated to this project I can also ask this question on hls.js forum...\nThanks,. ",
    "ibarisic05": "+1. ",
    "Sheby": "I have the same problem, any word on this?. ",
    "hlozancic": "Tried without clappr using only HLSJS\nhttp://jsfiddle.net/jL66pops/1/\nSame issues... How to configure HLSJS to continue playing loaded level?. I'm already using startLevel config... Will try to listen on level_switch and set level manually to higher when switched or something... Will send fiddle later today. ",
    "caspermouse": "I use ng-click because complete project is in Angular. If i use onclick event i still don't know how to change params. Do you have any advice?. Yes, it is possible. I create instance of clarpp player and thats work well. But when i try to forward another params in that player, on second click, he still shows me player with first source information plus player with  second information in one container.\nI tried to achieve something like this: https://globoplay.globo.com/v/5912317/programa. @kslimani Thanks for advice \n. ",
    "andrefilimono": "@kslimani I mean player resize. I want to get new player size (width, height) when player enters into full screen (out of full screen) or on orientation change.. @kslimani Thanks, it works good!. Initial implementation:\nhttps://github.com/andrefilimono/clappr-flvjs-playback\nFeel free to contribute :). Fixed in #1576 . I encountered the same problem.\nComment for devs:\nI think that you need to pass a copy of the config to HLS.js as it overrides config with default values:\nhttps://github.com/clappr/clappr/blob/master/src/playbacks/hls/hls.js#L152\nSomething like this:\nthis._hls = new HLSJS(Object.assign({}, this.options.playback.hlsjsConfig) || {}). Fixed in #1575 . Oh, I overlooked this plugin, thanks!\nBut the internal plugin doesn't handle pauses.. @kslimani Thanks for your answer!\nI was talking about a method that indicates if playback can handle closed captions.. There is the plugin for prerolls: https://github.com/kslimani/clappr-google-ima-html5-preroll\nIt can be simply extended to support midrolls.. ",
    "Support-Vezca": "@kslimani everything A+ on the demo page. I recently wrapped the iframe with a jquery fadein script in order to show a spinner until the actual iframe page loads (a html page with its own isolated clappr)... now although one would think this should not impact the iframe page as the fade logic is outside of the iframe html page, but it appears it does have an impact on clappr. I just removed the logic and everything is fine.\nThis is the code I added for the iframe:\nvar theIframe = document.getElementById('v_' + assetid);\n        if (navigator.userAgent.indexOf(\"MSIE\") > -1 && !window.opera) {\n            theIframe.onreadystatechange = function () {\n                if (theIframe.readyState == \"complete\") {\n                    //$(\"#vcHolder\").remove();\n                    $(\"#vcHolder\").fadeOut(1000, function () { $(\".vGlow_\" + assetid).fadeIn(1000, function () { $(\"#vcHolder\").remove() }); });\n                }\n            };\n        } else {\n            theIframe.onload = function () {\n                $(\"#vcHolder\").fadeOut(1000, function () { $(\".vGlow_\" + assetid).fadeIn(1000, function () { $(\"#vcHolder\").remove() }); });\n            };\n        }\nThe iframe is inside a div called 'vGlow', the div's inline style is set to 'display:none'... and of course the above code fades in that div once the iframe state changes to 'complete'.\nThus, it appears that on FireFox, if clappr is in an iframe which is inside a div which is set to 'display:none', the clappr javascript in the iframe page is unable to reference the div container on the page... ooo errrr??!\nBut none of this is an issue on other browsers, just FireFox it appears.\nI'm going to quickly try something else, rather than the iframe parent div being set to display:none, I'll set it to visibility:hidden, and see if that makes a difference on FireFox.\nIf you have any opinions on any of the above, I'm all ears bud.. ",
    "ciclanoio": "@leandromoreira  more details:\nStreaming URL:  https://videos.ciclano.io:1443/demovod/demovod/mp4:sample.mp4/playlist.m3u8\nURL PLAYER: https://videos.ciclano.io/embed/demovod?m=3246cddb2fd84ca\nor here to print all logs: https://developer.ciclano.io/player_ciclano_hash\nMSG LOG:\n[error][hlsjs: unrecoverable network fatal error, evt hlsError, data [object Object] ]\nThanks for your help.\n. @kslimani  Thanks for your help. Yes CORS is enable to *\nWhen I play the URL in an external player like VLC it works. Only when the web player does not run.\nI have tested with the certificate issued by wowza and I have the same result.\nI also tested on transparent port at 443.\nMy scenario is:\nA web server with geotrust certificate at 80 and https at 443\nWowza server in 1935 and https in 1443\nBoth on the same IP.\nI created the JKS for wowza With our certified GeoTrust as directed by Wowza below:\nopenssl pkcs12 -export -in ciclano_io.crt -inkey ciclano_io.key -out ciclano.p12\nkeytool -importkeystore -srckeystore ciclano.p12 -srcstoretype PKCS#12 -destkeystore ciclano.jks -deststoretype JKS\n@leandromoreira Thanks !\nI will do more tests any information that can help me to correct the problem thank you. @kslimani @leandromoreira  I rebuilt the test here using just wowza and no longer the web server, using the wowza provided certificate itself.\nI've noticed that if Chrome or Firefox does not work, but Safari runs Clappr.\n. @kslimani \n1) I just informed that I tested with both certificates, both wowza and ours. In any of them I get the error.\n2) Thank you I'll keep doing tests.. ",
    "JohnMorra": "hmmm my url doesn't work with this methods..... only works in vlc\nvar playerElement = document.getElementById(\"player-wrapper\");\nvar player = new Clappr.Player({\n  source: \"http://193.32.36.27:8005\", \n  mimeType: \"application/x-mpegURL\",\n  height: 360,\n  width: 640\n});\nplayer.attachTo(playerElement);\n : (\n\n. How i can chceck errors?. okkk i sorted the problem, silly issue. link is quite long and as u can see its broke to 2 parts when i join it into one line it is working ehh. cool but its not working for me :( Should i just copy my link to \" source:\" and thats it ? i copied to my server and player not even showing. just blank white page hmmmm. aha, also i checked with your wordpress plugin and its not working either player doesnt start. I have checked with few sample links. ",
    "momipnd": "http://oasisiptv.com:6969/live/skype/QvfhlC9dxz/4699.m3u8\nI run it with clapper player.  The issue is I can play the m3u8 URL, but when i will play it multiple it stops. Only this URL play form one device. I want to play multiple.. ",
    "ikniazi23": "I have same issue when i play this link on ip at which i capture it from an app it open successfully but when i try to access it from another ip it says Forbbiden.\nPlease tell me the solution.Thanks in advance.\nhttps://cdn.jazztv.pk:8087/app/SaudiSunnah-141/live/141M/chunks.m3u8?nimblesessionid=38413230&wmsAuthSign=c2VydmVyX3RpbWU9Mi81LzIwMTkgOToxOTowMCBBTSZoYXNoX3ZhbHVlPUVmZWROdy9JQ2hSdkxoSkpMVFJnd0E9PSZ2YWxpZG1pbnV0ZXM9MQ== \n. ",
    "RussellSk": "@kslimani Thank you for your reply, but how can I load in HTML5 next video or change video \"on the fly\" without reloading core of the player and therefore stay in Fullscreen mode? Tell me where to start digging...\nOr is it impossible?. @kslimani Thank you for your help, your example solve the issue. :)\n@towerz How can I contribute to the project, what can I do? If you have some exercises. \nThanks.. @kslimani I'm sorry for asking you again but when I'm using .m3u8 format, the player plays everytime the same source URL... Without changing, Is there some additional function in Clappr that extract valid url for core?\n. ",
    "areeb111": "I have the same issue\nIt's stopped showing the next subtitle after the empty object.. ",
    "alimohammed": "@kslimani I'm using Clappr-subtitle as plugin, and I tried another media player and it's skipped the blank line and show the next subtitle.\nI'll try to put the same issue to Clappr-subtitle repo.. @kslimani OK I'm going to try the latest version with webvtt.\nThank you for your reply.. ",
    "zy87302728": "@kslimani hello.\nI wanna to ask if we can choose one track as the default track showing when play video?. @kslimani  the code video.textTracks[0].mode = 'showing'; does not worked. I wanna to know how to set the additional configuration.\nby the way If there is some parameter to adjust the height of the subtitle?. @nivaldocavalcanti \nThanks, It can be well worked. @leandromoreira Can you give us a demo for how to integrated into angular2 project\uff1f. ",
    "nivaldocavalcanti": "@zy87302728 to the code video.textTracks[0].mode = 'showing'; work the video must be played, so I did this way:\nvar playerElement = document.getElementById(\"my_player\");\nvar player = new Clappr.Player({\n    source: 'my_url/my_source.mp4',\n    ..., //my other options\n    externalTracks: [{\n            lang: 'pt-BR', //come to Brazil!\n            label: 'Subtitles', \n            src: \"my_url/my_subtitle.vtt\", \n            kind: 'subtitles'\n    }],\n    events: {\n            onPlay: function() { $('video')['0'].textTracks[0].mode = 'showing'; }, \n    },\n});\nIt worked for me! I hope it helps others.\nThanks Clappr!. @zy87302728 sure it can. If you have two or more subtitles track it's better use this code:\nonPlay: function() { \n  var isShowing = false;\n  $.each($('video')['0'].textTracks, function(idx,val){\n    if($('video')['0'].textTracks[idx].mode == 'showing'){\n      isShowing = true;\n    }\n  });\n  if(!isShowing){\n    $('video')['0'].textTracks[0].mode = 'showing'; \n  }\n},\nThe code I did before was forcing track 0 to be always showing, then when you choose another track you got two tracks displaying, it's really a mess on the screen. \nThe code above will prevent this to happen, and only displays the track 0 if there is no other track selected. The only trouble is if you pause, disable the tracks and then press play again it will enable the track 0. But if you don't pause you can disable tracks and change tracks for good.. ",
    "nontonto": "0.2.69 is request to http://localhost/809981e5b09d5336c45d72d0869ada2a.swf\nnot to http://localhost/dist/809981e5b09d5336c45d72d0869ada2a.swf. ",
    "maxlapshin": "Hi. We also have this problem.. ",
    "GuangJianLee": "\n\nWhen the HLS streaming is broadcast live, there is no fullscreen button. Clappr is http://cdn.jsdelivr.net/gh/clappr/clappr@latest/dist/clappr.min.js\nOS  windows 7   Browser is chrome 59.0.3071.115\nI'm sorry I forgot.My player is in the iframe, I've checked the relevant issues, it's like the iframe can't be full screen and this is a question of js?. Sorry, I also joined allowfullscreen= \"true\", but the problem is still the same. It turned out that my player was nested below two iframe. Then the parent iframe and the child iframe are set with allowfullscreen= \"true\" to display the full screen button. @UnitedPeace \uff0c@kslimani @leandromoreira Thank you!. ",
    "firofame": "what about this source:\nhttp://smumcdnems03.cdnsrv.jio.com/jiotv.live.cdn.jio.com/Star_Vijay/Star_Vijay.m3u8. any idea how this is done:\nhttp://tv-live.in/wp-content/uploads/tv-online/Channel/India/Channel/Star%20Vijay-l1.php\nwhen i view the page source,  it shows Clappr.. is it normal that the link is still working using vlc, ffmpeg, and browser plugins?\neg: https://chrome.google.com/webstore/detail/native-hls-playback/emnphkkblegpebimobpbekeedfgemhof\nis there any workaround CORS, since i dont have access to the server.. @Johnpraveenkumar i couldn't solve it. I think using flashls is the solution. please post a sample code if you manage to solve it.\nthere is no CORS issue when implementing in native. i successfully implemented the code in android and published the app without any issues.. ",
    "Johnpraveenkumar": "Hai @firofame did you solved your issue?....i am having same problem.. ",
    "lovablegce": "@leandromoreira Do you have any idea how to get the encryption keys which are provided in the live streaming?\nSample: http://sklktcdnems05.cdnsrv.jio.com/jiotv.live.cdn.jio.com/AXN_HD/AXN_HD_1200.m3u8?jct=NNXpstYnCQSaMw46OvZodQ&pxe=1508777679&st=AQIC5wM2LY4SfczJUsPeNpQK-WxTgD1o9I3YMroM17eybG0.AAJTSQACMDIAAlNLABQtNTA0NjQzOTU5NTkwODkzMzk3MQACUzEAAjI4\nwhatever present after m3u8 is keep on changing. Is there any way to get this?. ",
    "phonerave": "bro anyone got solution. ",
    "Lethea": "For this kind of stream that protected by header referer\nyou cant play this directly from your website\nyou need to restream that via ffmpeg headers. Hi @leandromoreira , there is no need to build anything, I developed this by following first plugin guide. Therefore there is no build etc script generated . If needed, I will download the plugin generator and develop this with this generator by the way the skeloton will be appear as you ask ( dependicies build script src etc )  :) However fordeveloper  this sample help them. if you accept this , the next time I'll develop it with plugin-generator.see you. ",
    "ProjectAdrian": "does it work on mx player?. ",
    "Jenosan97": "Please help\nHow to another Streming player video to my own Streming player. How to php api parssing script instal and download \n(multi url Streming and get url in one). How to please help . Please send full script php . I have jiotv Account username and pass word how to get jiotv playlist and token Streming in our site. @leandromoreira how to play this url on jw player please help\nhttp://livetvstream.in/api/jio/play.m3u8?ch=Sun_TV_HD. @engkazim2000 http://livetvstream.in/api/jio/play.m3u8?ch=Star_Vijay. No\nHow to get Jio Account to Jio tv playlist get\nOn Tuesday, July 24, 2018, engkazim2000 notifications@github.com wrote:\n\n@Jenosan97 https://github.com/Jenosan97 can you please provide me\nworking play.m3u8 file to my gmail eng.kazim2000@gmail.com\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/clappr/clappr/issues/1483#issuecomment-407227231, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AhZTKz2B_OVljYoXToXOH4YJcQ8OPHiGks5uJlVugaJpZM4OuFHp\n.\n. \n",
    "vmcreations": "Wowza streaming\nOn 30-Apr-2018 10:05 PM, \"Jenosan97\" notifications@github.com wrote:\n\nPlease help\nHow to another Streming player video to my own Streming player\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/clappr/clappr/issues/1483#issuecomment-385454420, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AgRALRD_Dwn1LOwikiPozQn8sCXpVmFNks5ttz1kgaJpZM4OuFHp\n.\n. \n",
    "ErickNoz": "Me to to get multiple streams to one URL . Php \nWith 2 urls in different places string to one and\nOpen it as page source !! How and code please?\nMeans URL+token(generated from 3sec)= URL?. ",
    "engkazim2000": "@Jenosan97 do you have any working url.. Its not working\nOn Mon, 16 Jul 2018, 8:50 am Jenosan97, notifications@github.com wrote:\n\n@engkazim2000 https://github.com/engkazim2000\nhttp://livetvstream.in/api/jio/play.m3u8?ch=Star_Vijay\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/clappr/clappr/issues/1483#issuecomment-405143744, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AN9kAK723aOSGTQBGVCS2IJ9j8ZotS2uks5uHA13gaJpZM4OuFHp\n.\n. @Jenosan97 can you please provide me working play.m3u8 file to my gmail eng.kazim2000@gmail.com. \n",
    "mostafa6765": "solved. thanks for quick response.. ",
    "nk576": "\n. Yes, Firefox Browser was outdated.... was not auto updating ! (Showing Upto Date)\nThanks Alot for Up Helping\nNew One is 55.0.1\n\n. yes.. done\nthanks. ",
    "deepch": "I tried it but I could not use it.\n.  var player2 = new Clappr.Player({source: \"http://171.25.233.50:8080/api/v1/stream/test/nvr/hls/1502715600/7200/index.m3u8?t=120\",\nI add ?t=120 and autoStartLoad: true,\nnot working on hls?. So I tried the same and the same does not work.\nhttp://ipeye.ru/test2.html?t=200. Thank you, this solution works.\nBut I would like to get rewind before playback.\nMy task is to speed up the video of the swing source with the memorization of the position.\nI try button in head\nI'm use onPlay: function() { \nhttp://ipeye.ru/test.html\nif I use you sample 500 msec video play start and next seek\nIs it possible to rewind the video before playing?\nI just do not know how to rewind smoothly when changing the source.\n. ",
    "perohu": "I think this bug is still present, I've just run into this.\nHere is my demo: https://player-infocam.infornax.hu/test-autoseek.html?t=120\nIt is not starting at 2 minutes, as it should\nWill this bug be fixed in the future?\nI can not make this work with the workaround above either\nWorkaround demo: https://player-infocam.infornax.hu/test-autoseek2.html?t=120\nThx!. Since my report it has been already fixed. Thank you.. Am I the only one with this? Maybe I do something wrong?. Thank you for this info!\nplayer.getPlugin('click_to_pause').disable() did the trick :)\nBTW it would be great if clappr could distinguish between tap on the screen and a mouse click.\n. As a workaround I did this:\nvar isTouch = (('ontouchstart' in window) || (navigator.msMaxTouchPoints > 0));\nif ( isTouch ) player.getPlugin('click_to_pause').disable();\nIt works with most (but not all) devices.\n. I have problems on iOS too. My live streams are working great. But I create byte-range hls archives, which are working with provider \"hls\", but not working on iOS (HTML5)\nDemo: https://archives-infocam.infornax.hu/test.html\nI'm not sure if it is an issue with clappr, maybe I misconfigured the webserver? \nUnfortunately I'm not familiar with debugging iOS devices, so I'm a bit lost now. @kslimani I try with Safari.\nI think that on iOS devices (I mean iPhone/iPad) Safari does not support MSE, which is used by hls.js. \nI collect statistics from viewers and I always saw \"html5_video\" as provider in use on iOS.\nI don't think it is a problem, as iOS support HLS natively, so it should work. \nIt is only not working if I generate byte-range playlist. With separate segments it is working fine with \"html5_video\" provider. But it so hard to maintain that many small files on our storage, so I really like to make this work with byte-ranges. \nI've just found out that it is not working with Flashls too. (Tried it with WinXP+FF)\nIt has warning in javascript console: \n\nWARN:I/O Error while loading fragment:invalid content received\n\n. Is it possible that Apple does not support its own stream format? :). I switched back from fmp4 to mpegts. It is now working on iOS too with byterange playlist.\n. Thx.\nSo it means that the plugins are not compatible? I have to ask the maintainer of the plugins to make it compatible with Clappr 0.3.x?\nSorry i'm not a JS developer.. ",
    "bercutes": "seekPercentage ( time ) maybe some example please, how implement in demo, in events?. ",
    "diegosperes": "Hi @kslimani, thank for your consideration, so in new Clappr architecture, @towerz was talked that the container not would be a proxy anymore, you can see this in android implementation, It's the reason of first implementation. But It's better change this only when Clappr will be updated to the new architecture, so I implemented the CONTAINER_SEEKED too.\nI think is better do this way  \"it may be only partially supported\". Goood Job! \ud83d\udc4d . I agree with you, I only maintained the old variable name, I changed this in latest commits :). @leandromoreira @vagnervjs Thanks guys, it's a mistake, I will fix it.. Done! :). ",
    "SAMYEL06": "And now, the player doesn't show anymore, even with a valid adress.. . ",
    "Thor77": "You have to upload that file (including the ones it refers to) to a remote location somehow.. ",
    "elhampour": "yes i have found it.\nvar player = new Clappr.Player({\n            source: \"494f6d4f-7900-4356-8b79-73b6fa02ccc5-master.m3u8\",\n            parentId: \"#player\",\n            playback: {\n                hlsjsConfig: {\n                    maxBufferSize: 5,\n                    xhrSetup: function (xhr, url) {\n                        console.log(url);\n                        url = url.replace('http://v1', 'http://v1');\n                        xhr.open('GET', url, true);\n                    }\n                }\n            },\n            plugins: {\n                'core': [LevelSelector]\n            }\n        });\n. ",
    "shanka12": "Im using the auto play for click function. I tried mute audio. its not working. first  im loading the image of the video. when click on image player will load. its works on desktop.\nhere is my code.\n$('.dev-vid-thumb').on('click', function() {\n        var vid = $(this).data('vid-id');\n        var pid = $(this).data('p-id');\n        $.ajax({\n            url : 'https://api.vimeo.com/videos/'+vid+'?fields=files.link',\n            headers : {\n                'Authorization' : 'Bearer ' + 'xxxxxxxxxxxxx'\n            },\n            cache: true,\n            json : true,\n            contentType:'application/vnd.vimeo.endpoint+json',\n            success: function (body) {\n                $('.dev-vid-thumb').addClass('hidden');\n                $('.dev-s-vid-player').removeClass('hidden');\n                var player = new Clappr.Player({\n                    source: body['files'][1]['link'], parentId: \"#player\",\n                    watermark: \"logo.png\", position: 'top-right',\n                    disableVideoTagContextMenu: true,\n                    width: \"100%\",\n                    preload: 'auto',\n                    mute: true,\n                });\n                player.play();\n            }\n        });\n    });. Great! this is works. thank you @kslimani . ",
    "chrisprog20": "@towerz:\nThank you for your answer. It was more a suggestion from my site. Unfortunately I did not had any idea to realize this - but it is good to learn some approaches on that. Unfortunately I am not able to provide this feature at the moment - maybe in future, but currently I am sorry that I have no time left to do that.. @kslimani:\nThank you also for your suggestion: I like the idea of the microservice to reduce processing costs.\nUnfortunately I have currently no time left to do that - maybe in future. . @towerz: What do you think about @eutychus approach?\nI like it: You just provide the snapshot yielded by \nffmpeg -ss FLOAT_OFFSET_IN_SEC -i SOURCEFILE -frames 1 -f image2 -q:v 2 OUTFILE.JPG\nwhere the editor only provides FLOAT_OFFSET_IN_SEC and SOURCEFILE :). Hi kslimani,\nthank you for your quick reply. I tried now my m3u8 playlist on your Clappr demo page and there I got also the black screen. I have to say that the URL to the playlist uses \"https\". Maybe it has to do with that?. Thank you for your answer kslimani. \nI tried my url on the hls.js 0.9.1 demo page (which is served via https like my manifest url).\nThere I got the following message:\n\nyour Browser does not support MediaSourceExtension / MP 4 mediasource\n\nSo now we got the proof that my browser cannot play hls video. But in that case clappr should fall back to the flash player plugin, right? \nAnd that does not work at the moment (even when the manifest url protocol matches with the page's url protocol and the files from the dist folder of the current clappr master branch (version 0.2.96) and I have the lates Flash plugin enabled in the browser).\nMaybe this console output helps which occurs after I clicked the play button in the middle of the black screen:\n\nINFO:FlasHLS Clappr (version: 0.4.16 - flashls: 0.4.4.24, id: o39)\nINFO:HLSNetStream:close\nINFO:HLSNetStream:play(-1)\nINFO:HLSNetStream:seek(-1)\nINFO:Setting audio track to 0\n\nThank you for your time! :)\n. Hi kslimani, \nwhen I try the default video url in the demo page it works in IE 11.\nWhen I try it with the stream url for my video it does not work.\nSo it is an issue with my video format...\nDo you have an idea what could be the reason for this wrong video format?\nThank you again for your time.\nCheers\nChristian. Hi kslimani!\nThank you again for your hints. :) I will try to work through your link common steps to verify issues without asking @leandromoreira for help ;). Thank you @leandromoreira  :)\nWe tested some videos on http://www.flashls.org/latest/examples/chromeless/ and there we found that some are working on IE 11 in combination with Windows 7 and others not.\nOur video streaming provider was then informed about that and told us that he tries to do an \"easier\" \nencodation of the videos.\nI will keep you informed about the outcome! :). @leandromoreira: Thank you for your hint. I have not discovered that yet. \nI will check this page with the more detailed verbose level again if I have a free time slot for it. :). So, I was able to play the videos on IE 11 and Win 7 with the following settings on \nhttp://www.flashls.org/latest/examples/chromeless/ under button \"quality control\":\n\ncurrent level: 1 (480p / 4885kb)\nnext level: 1 (480p / 4885kb)\nload level:  1 (480p / 4885kb)\ncap level: none\n\nI will try the clappr level selctor plugin. Maybe it helps.\n. Ok, the level selector plugin seemed not to work. Hence we decided to show a flash player in IE <= 11 and the clappr plugin in Edge and all other browsers. Now world is beautiful again :). ",
    "asskovalev": "this fix did not help\nobject element still renders with data=\"/809981e5b09d5336c45d72d0869ada2a.swf\" attribute\nlooks like FlasHLS plugin renders before baseUrl is initialized. looks great. thanks!. ",
    "MartinKolarik": "Hey @leandromoreira, can we get this merged?. jsDelivr team member here - I can't say why the latest version doesn't work in FF, but the first (correct) link is version 0.2.83, the second is 0.2.66 (and doesn't get updated anymore).. >the first (correct) link is version 0.2.83\nMore precisely, it could be any version released in the past ~~week~~ 48 hours, since that's how long it could take for changes to propagate. Is this something that was recently fixed?\n  . I see, I've just manually purged the cache for that link so you should get the latest version now. If you are interested, you can do this automatically in your build script every time you release a new version by sending a GET request to http://purge.jsdelivr.net/npm/clappr@latest/dist/clappr.min.js That way there's no delay.. Note that jsDelivr does have every new version immediately after releasing it, so you can always use a link with the version specified in the URL, such as https://cdn.jsdelivr.net/npm/clappr@0.2.83/dist/clappr.min.js This delay only applies to URLs which don't use exact version numbers.. ",
    "ilyaluk": "I guess it's because of Referer header. Dailymotion forbids m3u8 requests when referer present.\nTry to remove it with <meta name=\"referrer\" content=\"no-referrer\" /> or any other method.. ",
    "gualterb": "@kslimani and how can I do to generate it. is there any place to download it? I do not know the code\nThank you\n. No, blank page. Hello! I am not an android user, but a friend testing in chrome if it works. it does not work in the default browser.. ",
    "nexobm93": "Same with mimeType :(.\nI used other webplayers with HLS support and everything is ok. This type of m3u8 doesn't work, all the rest are ok. \nThe error (CONSOLE)\n\n\"[error][hlsjs: unrecoverable network fatal error, evt hlsError, data [object Object] ]\"\nFailed to load {STREAM}: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'file://' is therefore not allowed access.. \n",
    "hubjac1": "I have the same issue.\nAs workaround it's possible to add events listener in player options but it's not ideal.\njavaScript\nvar player = new Clappr.Player({\n  source: 'http://clappr.io/highline.mp4',\n  poster: 'http://clappr.io/poster.png',\n  mute: true,\n  height: 360,\n  width: 640,\n  events: {\n    onPlay: ( )=> console.log('Play'),\n    onPause: ( )=> console.log('Pause'),\n    onError: (e) => console.log('ERROR', e),\n  },\n});. ",
    "doroszukb": "http://ott.smsnet.pl/~0d9251a4b115385cc63815b4b36fbf08/1064/pl.m3u8?archive=0\nThe link in vlc uncoded plays correctly.\nin clappr plays bad and log is ....\n[log] > attachMedia\nwebvtt-parser.js:161 [log] > media source opened\nwebvtt-parser.js:161 [log] > loadSource:http://ott.smsnet.pl/~0d9251a4b115385cc63815b4b36fbf08/1064/pl.m3u8?archive=0\nwebvtt-parser.js:161 [log] > trigger BUFFER_RESET\nwebvtt-parser.js:161 [log] > manifest loaded,3 level(s) found, first bitrate:1500000\nwebvtt-parser.js:161 [log] > startLoad(-1)\nwebvtt-parser.js:161 [log] > switching to level 2\nwebvtt-parser.js:161 [log] > loading playlist for level 2\nwebvtt-parser.js:161 [log] > main stream:STOPPED->IDLE\nwebvtt-parser.js:161 [log] > audio tracks updated\nwebvtt-parser.js:161 [log] > subtitle tracks updated\nwebvtt-parser.js:161 [log] > live playlist, reload in 4891 ms\nwebvtt-parser.js:161 [log] > level 2 loaded [14437231,14437236],duration:30\nwebvtt-parser.js:161 [log] > live playlist - first load, unknown sliding\nwebvtt-parser.js:161 [log] > configure startPosition to 15\nwebvtt-parser.js:161 [log] > Loading 14437234 of [14437231 ,14437236],level 2, currentTime:15.000,bufferEnd:15.000\nwebvtt-parser.js:161 [log] > demuxing in webworker\nwebvtt-parser.js:161 [log] > main stream:IDLE->FRAG_LOADING\nwebvtt-parser.js:161 [log] > Loaded  14437234 of [14437231 ,14437236],level 2\nwebvtt-parser.js:161 [log] > main stream:FRAG_LOADING->PARSING\nwebvtt-parser.js:161 [log] > Parsing 14437234 of [14437231 ,14437236],level 2, cc 0\nwebvtt-parser.js:161 [log] > main:discontinuity detected\nwebvtt-parser.js:161 [log] > main:switch detected\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [warn] > parsing error:AAC PES did not start with ADTS header,offset:58\n(anonymous) @ 1208fe2a-e572-40bc-9f7c-8a3193c678fc:516\n_parseAACPES @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:2823\nappend @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:2040\npushDecrypted @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:4496\npush @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:4450\n(anonymous) @ 1208fe2a-e572-40bc-9f7c-8a3193c678fc:127\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > manifest codec:undefined,ADTS data:type:2,sampleingIndex:3[48000Hz],channelConfig:2\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > parsed codec:mp4a.40.5,rate:48000,nb channel:2\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > last AAC PES packet truncated,might overlap between fragments\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > audio sampling rate : 48000\nwebvtt-parser.js:161 [log] > InitPTS for cc:0 found from video track:-1292998857\nwebvtt-parser.js:161 [log] > creating sourceBuffer(audio/mp4;codecs=mp4a.40.5)\nwebvtt-parser.js:161 [log] > creating sourceBuffer(video/mp4;codecs=avc1.4d402a)\nwebvtt-parser.js:161 [log] > main track:audio,container:audio/mp4,codecs[level/parsed]=[undefined/mp4a.40.5]\nwebvtt-parser.js:161 [log] > main track:video,container:video/mp4,codecs[level/parsed]=[undefined/avc1.4d402a]\nwebvtt-parser.js:161 [log] > Parsed audio,PTS:[15.000,15.043],DTS:[15.000/15.043],nb:2,dropped:0\nwebvtt-parser.js:161 [log] > Parsed video,PTS:[16.074,20.834],DTS:[15.994/20.594],nb:4,dropped:0\nwebvtt-parser.js:161 [log] > main stream:PARSING->PARSED\nwebvtt-parser.js:161 [log] > main buffered : \nwebvtt-parser.js:161 [log] > latency/loading/parsing/append/kbps:42/59/34/4/73337\nwebvtt-parser.js:161 [log] > main stream:PARSED->IDLE\nwebvtt-parser.js:161 [log] > SN just loaded, load next one: 14437235\nwebvtt-parser.js:161 [log] > Loading 14437235 of [14437231 ,14437236],level 2, currentTime:20.000,bufferEnd:20.000\nwebvtt-parser.js:161 [log] > main stream:IDLE->FRAG_LOADING\nwebvtt-parser.js:161 [log] > Loaded  14437235 of [14437231 ,14437236],level 2\nwebvtt-parser.js:161 [log] > main stream:FRAG_LOADING->PARSING\nwebvtt-parser.js:161 [log] > Parsing 14437235 of [14437231 ,14437236],level 2, cc 0\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > last AAC PES packet truncated,might overlap between fragments\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > AVC:1160 ms hole between fragments detected,filling it\nwebvtt-parser.js:161 [log] > Parsed audio,PTS:[15.043,15.043],DTS:[15.043/15.043],nb:1,dropped:0\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > Video/PTS/DTS adjusted: 21821/20594,delta:1160 ms\nwebvtt-parser.js:161 [log] > Parsed video,PTS:[21.821,25.914],DTS:[20.594/25.634],nb:6,dropped:0\nwebvtt-parser.js:161 [log] > main stream:PARSING->PARSED\nwebvtt-parser.js:161 [log] > main buffered : \nwebvtt-parser.js:161 [log] > latency/loading/parsing/append/kbps:5/46/12/1/168133\nwebvtt-parser.js:161 [log] > main stream:PARSED->IDLE\nwebvtt-parser.js:161 [log] > Loading 14437236 of [14437231 ,14437236],level 2, currentTime:25.834,bufferEnd:25.834\nwebvtt-parser.js:161 [log] > main stream:IDLE->FRAG_LOADING\nwebvtt-parser.js:161 [log] > Loaded  14437236 of [14437231 ,14437236],level 2\nwebvtt-parser.js:161 [log] > main stream:FRAG_LOADING->PARSING\nwebvtt-parser.js:161 [log] > Parsing 14437236 of [14437231 ,14437236],level 2, cc 0\n191208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > AAC: align PTS for overlapping frames by -11904\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > AAC: align PTS for overlapping frames by -11904\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [warn] > Injecting 1 audio frame @ 15.043s due to 21 ms gap.\n(anonymous) @ 1208fe2a-e572-40bc-9f7c-8a3193c678fc:516\nremuxAudio @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:4061\nremux @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:3610\nappend @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:2145\npushDecrypted @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:4496\npush @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:4450\n(anonymous) @ 1208fe2a-e572-40bc-9f7c-8a3193c678fc:127\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > AVC:1880 ms hole between fragments detected,filling it\nwebvtt-parser.js:161 [log] > Parsed audio,PTS:[15.043,15.491],DTS:[15.043/15.491],nb:21,dropped:0\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > Video/PTS/DTS adjusted: 27573/25634,delta:1880 ms\nwebvtt-parser.js:161 [log] > Parsed video,PTS:[27.573,33.234],DTS:[25.634/33.114],nb:11,dropped:0\nwebvtt-parser.js:161 [log] > main stream:PARSING->PARSED\nwebvtt-parser.js:161 [log] > main buffered : \nwebvtt-parser.js:161 [log] > latency/loading/parsing/append/kbps:4/37/21/1/150057\nwebvtt-parser.js:161 [log] > main stream:PARSED->IDLE\nwebvtt-parser.js:161 [log] > loading playlist for level 2\nwebvtt-parser.js:161 [log] > live playlist, reload in 4930 ms\nwebvtt-parser.js:161 [log] > level 2 loaded [14437232,14437237],duration:30\nwebvtt-parser.js:161 [log] > live playlist sliding:5.000\nwebvtt-parser.js:161 [log] > Updating mediasource duration to 35.000\nwebvtt-parser.js:161 [log] > SN just loaded, load next one: 14437237\nwebvtt-parser.js:161 [log] > Loading 14437237 of [14437232 ,14437237],level 2, currentTime:30.914,bufferEnd:30.914\nwebvtt-parser.js:161 [log] > main stream:IDLE->FRAG_LOADING\nwebvtt-parser.js:161 [log] > Loaded  14437237 of [14437232 ,14437237],level 2\nwebvtt-parser.js:161 [log] > main stream:FRAG_LOADING->PARSING\nwebvtt-parser.js:161 [log] > Parsing 14437237 of [14437232 ,14437237],level 2, cc 0\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > AAC: align PTS for overlapping frames by -16747\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [warn] > parsing error:AAC PES did not start with ADTS header,offset:158\n(anonymous) @ 1208fe2a-e572-40bc-9f7c-8a3193c678fc:516\n_parseAACPES @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:2823\nappend @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:2040\npushDecrypted @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:4496\npush @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:4450\n(anonymous) @ 1208fe2a-e572-40bc-9f7c-8a3193c678fc:127\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > AVC:160 ms hole between fragments detected,filling it\nwebvtt-parser.js:161 [log] > Parsed audio,PTS:[15.491,15.853],DTS:[15.491/15.853],nb:17,dropped:0\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > Video/PTS/DTS adjusted: 33353/33114,delta:160 ms\nwebvtt-parser.js:161 [log] > Parsed video,PTS:[33.353,36.634],DTS:[33.114/36.634],nb:2,dropped:0\nwebvtt-parser.js:161 [log] > main stream:PARSING->PARSED\nwebvtt-parser.js:161 [log] > main buffered : \nwebvtt-parser.js:161 [log] > latency/loading/parsing/append/kbps:11/36/35/1/123969\nwebvtt-parser.js:161 [log] > main stream:PARSED->IDLE\nwebvtt-parser.js:161 [log] > loading playlist for level 2\nwebvtt-parser.js:161 [log] > live playlist, reload in 4933 ms\nwebvtt-parser.js:161 [log] > level 2 loaded [14437233,14437238],duration:30\nwebvtt-parser.js:161 [log] > live playlist sliding:10.000\nwebvtt-parser.js:161 [log] > Updating mediasource duration to 40.000\nwebvtt-parser.js:161 [log] > Loading 14437238 of [14437233 ,14437238],level 2, currentTime:38.234,bufferEnd:38.234\nwebvtt-parser.js:161 [log] > main stream:IDLE->FRAG_LOADING\nwebvtt-parser.js:161 [log] > Loaded  14437238 of [14437233 ,14437238],level 2\nwebvtt-parser.js:161 [log] > main stream:FRAG_LOADING->PARSING\nwebvtt-parser.js:161 [log] > Parsing 14437238 of [14437233 ,14437238],level 2, cc 0\n51208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > AAC: align PTS for overlapping frames by -5397\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > -1289251767/-1289262567:unknown NAL 10 unknown NAL 11 \n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > last AAC PES packet truncated,might overlap between fragments\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > AVC:2400 ms hole between fragments detected,filling it\nwebvtt-parser.js:161 [log] > Parsed audio,PTS:[15.853,16.152],DTS:[15.853/16.152],nb:14,dropped:0\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > Video/PTS/DTS adjusted: 39088/36634,delta:2400 ms\nwebvtt-parser.js:161 [log] > Parsed video,PTS:[39.088,46.234],DTS:[36.634/46.154],nb:3,dropped:0\nwebvtt-parser.js:161 [log] > main stream:PARSING->PARSED\nwebvtt-parser.js:161 [log] > main buffered : [15.994,16.152]\nwebvtt-parser.js:161 [log] > latency/loading/parsing/append/kbps:11/34/10/2/178511\nwebvtt-parser.js:161 [log] > main stream:PARSED->IDLE\nwebvtt-parser.js:161 [log] > target start position:15\nwebvtt-parser.js:161 [log] > target start position not buffered, seek to buffered.start(0) 15.994333\nwebvtt-parser.js:161 [log] > adjust currentTime from 0 to 15.994333\nwebvtt-parser.js:161 [log] > media seeking to 15.994\nwebvtt-parser.js:161 [warn] > playback stalling in low buffer @15.994333\n(anonymous) @ webvtt-parser.js:161\n_checkBuffer @ clappr1.js:22635\ndoTick @ clappr1.js:21354\ntick @ clappr1.js:21307\nsetInterval (async)\nstartLoad @ clappr1.js:21256\n(anonymous) @ clappr1.js:29198\nstartLoad @ clappr1.js:29197\nonManifestParsed @ clappr1.js:22052\nonEventGeneric @ clappr1.js:19564\nonEvent @ clappr1.js:19552\nEventEmitter.emit @ hls.js:121\ntrigger @ clappr1.js:29099\nonManifestLoaded @ clappr1.js:22918\nonEventGeneric @ clappr1.js:19564\nonEvent @ clappr1.js:19552\nEventEmitter.emit @ hls.js:121\ntrigger @ clappr1.js:29099\nloadsuccess @ clappr1.js:20314\nreadystatechange @ clappr1.js:24699\nXMLHttpRequest.send (async)\nloadInternal @ clappr1.js:24661\nload @ clappr1.js:24619\nload @ clappr1.js:19986\nonManifestLoading @ clappr1.js:19934\nonEventGeneric @ clappr1.js:19564\nonEvent @ clappr1.js:19552\nEventEmitter.emit @ hls.js:121\ntrigger @ clappr1.js:29099\nloadSource @ clappr1.js:29190\n(anonymous) @ cea-608-parser.js:792\nEventEmitter.emit @ hls.js:121\ntrigger @ clappr1.js:29099\nonMediaSourceOpen @ clappr1.js:23889\nwebvtt-parser.js:161 [log] > loading playlist for level 2\nwebvtt-parser.js:161 [log] > live playlist, reload in 4931 ms\nwebvtt-parser.js:161 [log] > level 2 loaded [14437234,14437239],duration:30\nwebvtt-parser.js:161 [log] > live playlist sliding:15.000\nwebvtt-parser.js:161 [log] > SN just loaded, load next one: 14437239\nwebvtt-parser.js:161 [log] > Loading 14437239 of [14437234 ,14437239],level 2, currentTime:15.994,bufferEnd:16.152\nwebvtt-parser.js:161 [log] > main stream:IDLE->FRAG_LOADING\nwebvtt-parser.js:161 [log] > Loaded  14437239 of [14437234 ,14437239],level 2\nwebvtt-parser.js:161 [log] > main stream:FRAG_LOADING->PARSING\nwebvtt-parser.js:161 [log] > Parsing 14437239 of [14437234 ,14437239],level 2, cc 0\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > AAC: align PTS for overlapping frames by -5440\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [warn] > parsing error:AAC PES did not start with ADTS header,offset:102\n(anonymous) @ 1208fe2a-e572-40bc-9f7c-8a3193c678fc:516\n_parseAACPES @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:2823\nappend @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:2040\npushDecrypted @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:4496\npush @ 1208fe2a-e572-40bc-9\u2026c-8a3193c678fc:4450\n(anonymous) @ 1208fe2a-e572-40bc-9f7c-8a3193c678fc:127\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > -1288960167/-1288967367:unknown NAL 10 unknown NAL 11 \n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > last AAC PES packet truncated,might overlap between fragments\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > AVC:1360 ms overlapping between fragments detected\nwebvtt-parser.js:161 [log] > Parsed audio,PTS:[16.152,44.035],DTS:[16.152/44.035],nb:12,dropped:0\n1208fe2a-e572-40bc-9f7c-8a3193c678fc:516 [log] > Video/PTS/DTS adjusted: 46154/46154,delta:-1360 ms\nwebvtt-parser.js:161 [log] > Parsed video,PTS:[46.154,48.834],DTS:[46.154/48.714],nb:3,dropped:0\nwebvtt-parser.js:161 [log] > main stream:PARSING->PARSED\nwebvtt-parser.js:161 [log] > main buffered : [15.994,44.035]\nwebvtt-parser.js:161 [log] > latency/loading/parsing/append/kbps:7/32/10/2/176850\nwebvtt-parser.js:161 [log] > main stream:PARSED->IDLE\nwebvtt-parser.js:161 [log] > adjust currentTime from 15.994333 to 16.094333\nwebvtt-parser.js:161 [log] > media seeking to 16.094\nwebvtt-parser.js:161 [log] > media seeked to 16.096\nwebvtt-parser.js:161 [log] > destroy\nwebvtt-parser.js:161 [log] > detachMedia\nwebvtt-parser.js:161 [log] > media source detaching\nwebvtt-parser.js:161 [log] > main stream:IDLE->STOPPED. As I remove the audio from this stream, the playback is correct. Coded and uncoded is correct.. Same result. Wrong play with errors:\nParsing Error: AAC did not start with ADTS header, offset: 36\nParsing Error: AAC did not start with ADTS header, offset: 6\nParsing Error: AAC did not start with ADTS header, offset: 158\n.....\nBut in vlc all is ok.. All links are unfortunately encrypted and secured. I have prepared one link:\nhttp://79.175.208.18/~0d9251a4b115385cc63815b4b36fbf08/1086/pl.m3u8?archive=0\nor\nhttps://79.175.208.18/~0d9251a4b115385cc63815b4b36fbf08/1086/pl.m3u8?archive=0\nPlease try. This is a tv stream prepared online.\nI add in addition to the beginning of each chunk PAT and PMT.\nMaybe not put it?. May . The same effect. I will try to look at this.. \nTS.zip\n. TS-ALL-bitrate.zip\n. I corrected stream.\nhttps://79.175.208.18/~0d9251a4b115385cc63815b4b36fbf08/1086/pl.m3u8?archive=0\nNow in vlc only \ngnutls error: Certificate does not match \"79.175.208.18\". TS-ALL-bitrate.zip\nlast decrypted TS. In trascoder GOP seting is: \nMode - Dynamic\nSize - 24\nB-Pictures - 5\nHierarchical - on\nThese settings give you a very good picture.\nHowever, clappr has a problem with AAC decoding.\ni will look ffprobe.\n. Ffprobe does not bring anything new.\nWhat is shown is always at the cutting TS start play.\nThe problem is with AAC.. Can be fixed. I checked, it does not solve the problem.. 1 . The audio frames are exactly the same in all bitrate. \n2 . I checked for one bitrate, same bad.\nPS. My soft cope with all GOP settings as the video stream contained Closed GOP.. Thank you for your help. I will move to hls.js repo.\nBest Regads\nJanusz Doroszuk. ",
    "zijian85": "@leandromoreira  It work, Thanks.  By the way, how to force flash to play hls ?  I get code as follows:\nplugins: {playback: [Clappr.Clappr.Flashls]}\nBut it does not work. Need some js be add in ? Could you give me a flashhls link ?Thanks so much.. @towerz It means if I get the new version clappr.min.js, it should fix this issue ? . @towerz where to get the 0.2.83 version ?  I use this one  https://cdn.jsdelivr.net/npm/clappr@latest/dist/clappr.min.js.  Is it 0.2.83 ?. Thanks so much . I have get the 0.2.83 version\nby  'https://cdn.jsdelivr.net/npm/clappr@0.2.83/dist/clappr.min.js'.\nAnd this new version solved my problem. Good job.\nThanks all.. ",
    "drlukacs": "Thank you @kslimani for the reply; however, I am not sure if it answers the question: this problem happens only if one tries to use Google fonts. \nWhy is that?. @kslimani When is clappr supposed to load the font? (What I find is that the 404 error occurs only when I am trying to use Google fonts.) \nAre you saying that the problem is with the jwAllVideo code? \nHere is the website where it is being used and the error appears:\nhttp://airpassengerrights.ca/en/advocacy/air-passenger-bill-of-rights/airline-passenger-rights-will-you-be-protected. Thank you @towerz. Any luck with a fix?. Thank you, @towerz. Will the file at the following link be also updated?\nhttps://cdn.jsdelivr.net/gh/clappr/clappr@latest/dist/clappr.min.js. Thank you, @towerz, for your fast response. The issue seems to be resolved now.. ",
    "Fiorello": "Hi, i can confirm the same issue with clappr(0.2.90) and rtmp-plugin (0.0.20).\nDoes anyone have a solution?. ",
    "ocorso": "I'd clarify that \"videos won't play automatically with sound anymore.. ",
    "rmueller": "hey @towerz there's any place where we can track the development of this issue?. ",
    "RvLDSDM": "Experiencing the same! Big Issue. \nClapper no longer works with Nginx RTMP HLS streams getting this message under Windows 10 Chrome AND Firefox. Streaming still working in VLC it's Clapper which went down. Adding mimeType didn't change it\n  . we all use that one I guess, so it is not yet online unless you maually \ngo to 0.2.83, which you normally won't because Google gives you extra \npoints for using the CDN (Eco, Environment) and you always want to use \nthe latest version automatically\nOp 7-1-2018 om 03:22 schreef zijian85:\n\n@towerz https://github.com/towerz where to get the 0.2.83 version ? \nI use this one \nhttps://cdn.jsdelivr.net/npm/clappr@latest/dist/clappr.min.js \nhttps://cdn.jsdelivr.net/npm/clappr@latest/dist/clappr.min.js. Is it \n0.2.83 ?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub \nhttps://github.com/clappr/clappr/issues/1559#issuecomment-355793944, \nor mute the thread \nhttps://github.com/notifications/unsubscribe-auth/AhivRmrmhZMox4PxNKpsHtJ3o5YOc_q4ks5tICp5gaJpZM4RVQuy.\n\n\n. ",
    "ConnorLinfoot": "Also having this issue, reverting back to 0.2.80 (https://cdn.jsdelivr.net/gh/clappr/clappr@0.2.80/dist/clappr.min.js) seems to resolve for now.. ",
    "wahajdar": "Hi @leandromoreira, here are some observings regarding Events propagation;\n. PLAYER_READY depends on CORE_READY event\n. CORE_READY gets fired once all Containers crafted from container_factory.js are resolved\n. Each Container is resolving upon CONTAINER_READY event\n. CONTAINER_READY getting fired on PLAYBACK_READY event from Playback components e.g. hls.js, html5_video.js etc.\n. A Playback Component is supposed to fire PLAYBACK_READY in _ready() method, bubbling up the chain from BOTTOM(PLAYBACK_READY) to TOP(PLAYER_READY)\nIn /playbacks/hls/hls.js, _ready() method gets invoked by _setup()  but _setup() gets called under play() method i.e. the time stream play is initiated.\nWe can not move the _setup() invocation to constructor(), resulting in HLS Source load on Player boot.\nOne way could be to override parent implementation of render() method in hls.js (being inherited from html5_video.js) in a way, preserving parent functionality and call _ready() within that function and removing any other references to toggle _ReadyState and trigger PLAYBACK_READY only once.\n\nPlease have a look at Pull Req #1578 \nPlatform Sepcs;\nWindows 10 Build 16299\nChrome 64.0.3282.167,\nEdge 41.16299.248.0,\nFirefox 58.0.2 (64-bit)\nSpare me if found wrong, I am a newbie here :p. Apologies, let me consider. \nThanks @leandromoreira . @leandromoreira , can you please guide me how could I pass coverage check.\nWill be grateful, thanks. @towerz thank you for letting me contribute. Thanks for clarifying certain things here, will follow clappr architecture docs for better understanding.. ",
    "Setsusan": "@towerz checked earlier versions of the player in more detail, it seems that the conflict with watermark was also earlier (v0.2.78 and below), but the styles were added only when using watermark and after initializing the player, for this reason I did not notice it before. #1735 . ",
    "Hirbod": "Such an important and legit question... unanswered :/. ",
    "MasterEvilAce": "Sorry for not responding earlier.\nTake all this with a grain of salt, as I haven't looked at any code, and am pretty new to all of this. This all just happens to be what I've experienced, to the best of my knowledge. It's the best I've come up with so far, as there's very little documentation of people trying to sync streams on anything... everyone is more obsessed with minimizing latency.\nMy current implementation is as follows, and has given me the closest success:\nClappr with hlsjsconfig of liveSyncDuration: 10, liveMaxLatencyDuration: 20, on a stream with HLS segment size of 1second and a keyframe every 1 second. The syncDuration can be lower, but I try to error on smooth playback for everybody, even for people on slower connections. The real tricks seem to be 1 second keyframe/segment sizes, in addition to liveSyncDuration.\nI use liveSyncDuration (not the count variation, as it is WILDLY inconsistent if you have varying segment sizes in a playlist... we always want to play X seconds FROM LIVE, anyways) for the hope that it does black magic and tries to actually play 10 seconds from the end of the playlist, regardless of segment size. In my experience it doesn't really work this way, as it seems it's not going to start playing a segment halfway through (it's always going to start from the start of a full segment.) So if you have segment sizes of 5 seconds... one player starts to play, and 3 seconds later another player starts... you have a 3 second delay between those two players. Going with a 1 second segment limits this, and you're either sync'd up or you're off by a second (optimally.) That's just my experience, I have no idea the actual implementation of it.\nObviously with a segment size of 1 second, the stream is GUARANTEED to always be off at least 1 second from live. Additionally, it seems like there's around an extra second caused by having to download a new playlist, process it, download any chunks, etc. I simply am not able to achieve < 2 second delay from live even over the LAN. Also, like I said in the paragraph above, there's the additional gotcha where lets say a player downloads the playlist, and just 100 milliseconds later the playlist is actually updated with a new segment. If another player downloads that new playlist, then you've already introduced ~900ms of latency between the two players, because one started playing an older segment while the other started one segment ahead (because 10 seconds from the end of the playlist is now a different segment.)\nSo, with a liveSyncDuration of 10, the stream is actually ~12 seconds off of live for me, and  ~12-13, sometimes 14 seconds off for people outside my network. This means other players can be in-sync with me, or they are typically off by 1 second. If there's network issues (slow download or lots of latency) then the player seems to drag on and not start playing immediately.. this will introduce an additional delay. I simply have no idea how to allow those people to re-sync the player, unless the player itself falls 10 seconds behind (max sync duration limit.) I can lower this amount, but it can cause issues with network hiccups, and it just seems better to gracefully allow them to fall behind. Even just a 5 second difference between syncDuration and maxSyncDuration is cutting it close, IMO.\nLately, it also seems that the newer Clappr versions sometimes don't start playback immediately. On chrome it's usually fine, but on Edge and Firefox sometimes it'll be 3-5 seconds before the player starts to actually play the content.. and by then you've already added more delay. It FEELS like the syncDuration logic takes place once the playlist is first loaded, and so if there's a delay between that and actually playing the content, then anything can happen and there's no guarantees on how out of sync you are unless it hits the maxSyncDuration limit and \"resets.\"\nSo, for now I guess it seems \"good enough\" unless developers are actively looking into improving the situation. Most viewers outside my network are 1 second or less off from me. Sometimes people are an additional second or few off, and there's just nothing that can be done in those situations. Refreshing the page doesn't even do anything really, as the content will keep playing from exactly before you refreshed. It seems to work better if you stop the stream long enough for maxSyncDuration to pass, then play/refresh. If there was a way that a viewer could force this re-sync to happen, while the stream is already playing, that would be great.. as you'd already have the buffer built up and cached.\nFor what it's worth, I'm also not sure if varying fragment sizes messes with the playback/syncDuration logic. I'm running nginx+rtmp and streaming with OBS w/ VBV and a 1 second keyframe. Occasionally it will generate a segment that is > 1 second, but typically < 2 seconds long. If this happens, then nginx sets the playlist target segment duration to 2 seconds instead of 1, even if all the other segments are 1 second long. Whenever this happens I've noticed some very weird/inconsistent behavior with trying to sync players, but I haven't actually tested it, nor do I have a reliable way to generate this sort of test. Basically, I think HLS.js assumes that all of the segments are of target duration, and doesn't actually look at each segment length to determine how many seconds from the end of the playlist that we are. So if the target duration varies... more hiccups are added.. ",
    "poshe": "class HLS extends HTML5VideoPlayback and they both have the same _ready() function and they both call it in their render() functions. Is that OK?. ",
    "kad3nce": "Excellent. I spent a bit of time looking at the code. It looks like what the plugin accomplishes is similar enough to what I'd like to do that I should be all set.\nI'll likely just end up hiding the default seek time indicator, then follow clappr-thumbnails-plugin's lead by embedding a new element containing the custom time.\nThanks so much! \ud83d\ude4f. Ahhh. It's all clear now. Thank you!. ",
    "mufin695": "@towerz Yes, sorry that was a typo.. ",
    "Netherdrake": "@flavioribeiro Thank you.\nI've copied your styles, specifically:\n<div id=\"player-full\"\n      style=\"border: 0px;border-radius: 0px;width: 100%;height: 100%\"></div>\nand:\n<style>body {margin:0}</style>\nIts much better now, I only still need this one hack, otherwise the player doesn't show (white frame scenario).\nlet player = new Clappr.Player({\n            height: window.innerHeight - 1,\n            width: '100%',\n            .... ",
    "piratamovil": "Try this:\n```html\n\n\n\n\nPlayer\n\n\n\n\n",
    "breim": "Buddy, try this:\nOn html:\n\n\n\nOn css:\n.player {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%; \n}\nWork perfectly.. Buddy,\nDid you try this example bellow ?\nhttps://github.com/cdnbye/hlsjs-p2p-engine/blob/master/demo/clappr-demo.html. ",
    "Liniik": "That was it, thank you. I couldn't find where to place it.... ",
    "Bubblesphere": "@joaopaulovieira  Thanks, that did it. Everything mentioned worked. Do you know by any chance the difference between the concept of container, playback and player? It would help me understand which to pick in the future.. ",
    "jhonatangomes": "Some changes were requested by @leandromoreira on this pull request https://github.com/clappr/clappr/pull/1613 that was closed because of the branch was properly renamed.. Hello, can you share the video source you're using?\nCan you test using the previous Clappr version (0.2.90) and share the clappr log?\nOn 0.2.90 there is no error screen and you will have to enable the log. To enable it use Clappr.Log.setLevel(0).. Hello, I could not reproduce this, but we I have a similar problem and got a solution that is being tested on #1638. UPDATE: I've checked your logs and looks like it'll not fix your problem.\nI don't know why html5 video tag is triggering an error after you stop the video, but I'll investigate it later.\nOn #1642 I'm adding an option to disable the error screen and keep the poster when an error happens, I think it'll solve your problem for now.. #1643 fixes this bug.\nAbout the rollback: I prefer to wait for PRs with these messages translated like on #1634 to guarantee it'll be right. \nI don't remember if it was translated from portuguese :smile:, maybe it was, but I really don't remember. I did the rollback just to prevent possible wrong messages.. @kslimani there are some problematics tests on this branch, but they were fixed on master. If you update your branch it'll be ok.. I think we can test this way:\n``` javascript\nit('isPlaying() is true after constructor when autoPlay is true', function(done) {\n  const playback = new HTML5Video({ src: 'http://example.com/dash.ogg', autoPlay: true, mute: true })\nsetTimeout(function() {\n    expect(playback.isPlaying()).to.be.true\n    done()\n  }, 1000)\n})\n```\nI think this ensures that nextTick from html5_video constructor and play promise will be resolved after 1 second and the test will pass.. I think it was always like this, but I don't think it's the best way.\nMaybe just a black box as a placeholder with the core created but without a container should be better. \nWhat do you think?. I agree that it should be 2000 too, can you update the PR with this change?. @hijuuijj, which browser and OS are you using?. Hi, @kad3nce. \nIt happens because of the scope of the events. \nYou are adding the bind only to the player. This way, only the events triggered by the player will be shown.\nThe events that the player propagates from the other layers are mapped on the player.js:\nhttps://github.com/clappr/clappr/blob/b5d9e24d2d3551b801f123cdea70c98cf790bd2c/src/components/player.js#L343-L391\nIf you want to listen for specific events you need to add the bind for the specific scope. \nFor example, the BUFFERING event is triggered by the container, so if you want to listen for events from the container layer on your code, you need to add the binds for that like player.core.activeContainer.on(label, () => console.log('container: ', evt)). yes, done.. Yes, I do agree. But the tests are with lot of should on it messages. I fixed the test but didn't change its message. I think a refactor to change all these messages is better.. improved on e6917a0eeb6bacfe6985cefc5a147bbcc12681cb and 8404cf9a80e2273e3879e426597d5f70a1960294. improved on e6917a0eeb6bacfe6985cefc5a147bbcc12681cb and 8404cf9a80e2273e3879e426597d5f70a1960294. fixed on cb5fe1fbce139bca7d01f5c48c8d6ba63e2cae31. Thanks for your attention. This PR is updated and going on at https://github.com/clappr/clappr/pull/1614. Is it right? Don't we have to set volume on container instead of mediaControl?. I know it's temporary, but I think we can store the reference instead of create a new one for each mediaControl call. ",
    "Kolunchik": "Thank you.. ",
    "PostMalone": "Dear @towerz i'd really appreciate if you can help me somehow. I just can't get it to work. Maybe i'm using the wrong Plugin. Thanks!. @leandromoreira i'm using https://github.com/mycujoo/clappr-vast-plugin\nHere is my demo: http://f1livegp.stream/vast/player.php\nI think something is wrong in my source code.. well, clappr player wont show up, this is my code:\n```\n\n\n\n\n\n\n\n\n\n\n var playerElement = document.getElementById(\"ppp\");\n var player = new Clappr.Player({\n source: 'http://103.252.220.40:8081/live/live/playlist.m3u8',\n height: \"100%\",\n width: \"100%\",\n mediacontrol: {seekbar: \"#00A2DE\", buttons: \"#00A2DE\"},\n parentId: \"#ppp\",\n mimeType: \"application/x-mpegURL\",\n autoPlay: false,\n plugins: {\n 'core': [VastAds, LevelSelector, ChromecastPlugin]\n },\n VastAdsConfig: {\n AdXMLUrl: 'https://www.vidcpm.com/watch.xml?key=5066a2f1eb6ed8e63acf7a0aaa95909a&amp;custom=%7B%27width%27%3A%27'+$(window).width()+'%27%2C%27height%27%3A%27'+$(window).height()+'%27%7D&amp;cb=3&amp;vastref=f1livegp.stream'\n }\n });\n \n \u00a0\n \n\n window.dataLayer = window.dataLayer \\|\\| [];\n function gtag(){dataLayer.push(arguments);}\n gtag('js', new Date());\n \u00a0\n gtag('config', 'UA-112765408-1');\n \n\n\n```. Sorry, here is the log:\nlevel-selector.min.js:7 Uncaught TypeError: Cannot read property 'UICorePlugin' of undefined\n    at Object.<anonymous> (level-selector.min.js:7)\n    at t (level-selector.min.js:1)\n    at Object.<anonymous> (level-selector.min.js:4)\n    at t (level-selector.min.js:1)\n    at level-selector.min.js:1\n    at level-selector.min.js:1\n    at level-selector.min.js:1\n    at level-selector.min.js:1\n(anonymous) @ level-selector.min.js:7\nt @ level-selector.min.js:1\n(anonymous) @ level-selector.min.js:4\nt @ level-selector.min.js:1\n(anonymous) @ level-selector.min.js:1\n(anonymous) @ level-selector.min.js:1\n(anonymous) @ level-selector.min.js:1\n(anonymous) @ level-selector.min.js:1\nclappr-chromecast-plugin.js:765 Uncaught TypeError: Cannot read property 'Playback' of undefined\n    at Object.<anonymous> (clappr-chromecast-plugin.js:765)\n    at __webpack_require__ (clappr-chromecast-plugin.js:30)\n    at Object.<anonymous> (clappr-chromecast-plugin.js:75)\n    at __webpack_require__ (clappr-chromecast-plugin.js:30)\n    at clappr-chromecast-plugin.js:50\n    at clappr-chromecast-plugin.js:53\n    at webpackUniversalModuleDefinition (clappr-chromecast-plugin.js:9)\n    at clappr-chromecast-plugin.js:10\n(anonymous) @ clappr-chromecast-plugin.js:765\n__webpack_require__ @ clappr-chromecast-plugin.js:30\n(anonymous) @ clappr-chromecast-plugin.js:75\n__webpack_require__ @ clappr-chromecast-plugin.js:30\n(anonymous) @ clappr-chromecast-plugin.js:50\n(anonymous) @ clappr-chromecast-plugin.js:53\nwebpackUniversalModuleDefinition @ clappr-chromecast-plugin.js:9\n(anonymous) @ clappr-chromecast-plugin.js:10\nvast-ads.js:81 Uncaught TypeError: Cannot read property 'UICorePlugin' of undefined\n    at Object.<anonymous> (vast-ads.js:81)\n    at __webpack_require__ (vast-ads.js:30)\n    at Object.<anonymous> (vast-ads.js:57)\n    at __webpack_require__ (vast-ads.js:30)\n    at vast-ads.js:50\n    at vast-ads.js:53\n    at webpackUniversalModuleDefinition (vast-ads.js:9)\n    at vast-ads.js:10\n(anonymous) @ vast-ads.js:81\n__webpack_require__ @ vast-ads.js:30\n(anonymous) @ vast-ads.js:57\n__webpack_require__ @ vast-ads.js:30\n(anonymous) @ vast-ads.js:50\n(anonymous) @ vast-ads.js:53\nwebpackUniversalModuleDefinition @ vast-ads.js:9\n(anonymous) @ vast-ads.js:10\nplayer.php:21 Uncaught ReferenceError: VastAds is not defined\n    at player.php:21\n(anonymous) @ player.php:21\nplayer.php:29 GET https://www.googletagmanager.com/gtag/js?id=UA-112765408-1 net::ERR_BLOCKED_BY_CLIENT. hi, thanks for reply, i've changed the  codes but i still do not see the player. Just a blank page.\nLog:\nvast-ads.js:81 Uncaught TypeError: Cannot read property 'UICorePlugin' of undefined\n    at Object.<anonymous> (vast-ads.js:81)\n    at __webpack_require__ (vast-ads.js:30)\n    at Object.<anonymous> (vast-ads.js:57)\n    at __webpack_require__ (vast-ads.js:30)\n    at vast-ads.js:50\n    at vast-ads.js:53\n    at webpackUniversalModuleDefinition (vast-ads.js:9)\n    at vast-ads.js:10\n(anonymous) @ vast-ads.js:81\n__webpack_require__ @ vast-ads.js:30\n(anonymous) @ vast-ads.js:57\n__webpack_require__ @ vast-ads.js:30\n(anonymous) @ vast-ads.js:50\n(anonymous) @ vast-ads.js:53\nwebpackUniversalModuleDefinition @ vast-ads.js:9\n(anonymous) @ vast-ads.js:10\nplayer.php:21 Uncaught ReferenceError: VastAds is not defined\n    at player.php:21\n(anonymous) @ player.php:21. hmm, how can i do that?. ok. thanks for your help guys.. @towerz no luck buddy. Player wont load at all (blank page). Whatever, just wont use Clappr then :). \n\nBuddy,\nDid you try this example bellow ?\nhttps://github.com/cdnbye/hlsjs-p2p-engine/blob/master/demo/clappr-demo.html\n\nYes, i did, it works, but i'm having issues adding Level selector plugin and Chromecast plugin into that code :( \n. ",
    "MarlonEtiene": "Sorry for taking the time to give you feedback, I had some problems.\nThe solution was to load the videos encoded in base64.\nThank you. ",
    "danielloader": "Answering my own question as it may help others who google stumble on this issue!\nNeeded addition m3u8 headers:\n```\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-TARGETDURATION:8\nEXT-X-MEDIA-SEQUENCE:0\nEXT-X-PLAYLIST-TYPE:VOD\nEXT-X-INDEPENDENT-SEGMENTS\nEXT-X-MAP:URI=\"1523491200175_1523491208175_2147483647_104358865.mp4\"\nEXTINF:8.000000,\n1523491200175_1523491208175_2147483647_104358865.mp4\n...\n```. Possibly, was looking for something that could just display a variable of the HLS fragment currently being played in the player. I'll have to have a read. . ",
    "vagnervjs": "Hi @daniel-loader, if you are using the HLS playback (w/ hls.js) you can implement a floader, using the hlsjsConfig playback option, and get the path of each fragment loaded:\noptions.playback.hlsjsConfig = {\n    fLoader: yourFloaderImplementation\n}\nTo know about the hls.js loader details, check: https://github.com/video-dev/hls.js/blob/master/docs/API.md#loader\nThis help you?. @daniel-loader if you need any help please update here, closing the issue.. @khalilleo can you check, please, if the problem still occurs on the latest Clappr version (0.2.93)?. Closing this issue since it's a hls.js related problem. @Niko78 thanks!. Would be nice to check if  configure is a method, because some Clappr use cases can add an external Media Control without this new configure method, and will get an \nUncaught TypeError: mediaControl.configure is not a function. Can we clone only Media Control options, to avoid duplication of unnecessary options inside Media Control? \nSomething like:  this._options = $.extend(this._options, options.mediacontrol). It would be better to keep the index.js file just as an entry point to the module.\nI suggest creating a browser.js file with this code, and index.js just load and export the browser.js content\n. Also, we can take advantage to remove these old comment header :). Now, this properties will be redundant with Browser.data.name and Browser.data.fullVersion. Maybe we should remove them?. \ud83d\udc4d . ",
    "LaQuay": "Same problem here.. @leandromoreira Yes, same problem. It is a hls.js related problem... (Stream works fine with Video.js). ",
    "fooger": "My fragments duration has 10 sec. Experimented with 5 sec, but in fullhd - downloading (starting time) is too long..\nIs it possible to start playing without full segment downloading?. ",
    "imabee101": "Thankyou. Thank-you for the response. I did that and the player will no longer load.\nhttps://i.gyazo.com/032a7fb5de867eb40b13a92d269e7ab1.png.  I tried the code you specified and the player just stays at 640 by 360. The player wont change sizes. Any other suggestions?. Thank-you. If the stream goes offline, say an hour later it goes back online. How can I get the playback to resume without the user having to refresh?. When I put any of the examples into a wordpress page the player wont load. . ",
    "Wiicast": "When I remove the plugins from my player, it works in Chrome, it seems the plugins is the problem.\nAlso add mute:true, below autoPlay that could help autoPlay but obviously video will be muted.. Thank you @kslimani for your reply, I tried this code you provided, and in Chrome for Windows 10 it didn't load auto, whereas in Chrome for mac it does?. ",
    "bent0b0x": "I will fix merge conflicts soon . Is the coveralls decrease a problem in this case?. Hi @towerz!\nThanks for the comment. \nI would like access to the event constants because I would like to define event handlers immediately in a component that loads the entire clappr asynchronously (via a dynamic import)\nI did consider loading from the src dir. However that did not see very stable to me; source can easily be reorganized without it being a breaking change. Additionally, source can be included in .npmignore (although for clappr right now it is not).\nI did think of other ways to solve this, such as not defining the event handlers until clappr has loaded async. Perhaps that would be the most frictionless solution to this specific problem. Due to how my application is structured this wasn\u2019t the most optimal approach right out of the gate but it would be acceptable. \nIn general, though, I think it would be nice for clappr to be distributed in smaller modules (all within same package) so that they can be imported imported individually as needed. . Thanks @towerz; I'm going to close as I'm just going to bind the events async.\nI'm binding to some PLAYBACK_XXX events, so I'm not sure if the config options will work. Either way, I have a workaround!. ",
    "stefanullinger": "Hey guys, good work! One question, though: When attemptAutoPlay() and indirectly canAutoPlay() are called within the constructor, how do I make sure that this.consented is true for mobile devices?\nCurrently, I am trying to call player.consent() after initializing the basic player (without specifying any source) and afterwards calling player.load('someSourceFile', '', true);.. @kslimani I have already set the recycleVideo playback option to true, thanks.\nAnd I am already calling player.consent() in a click handler. But this has no effect for mobile devices as the Playback has not been initialized yet. When I then call player.load() the playback get's initialized but does not know about my previous call to player.consent().\n. @kslimani Okay, I will create a new issue later. Here is some basic example of what I am trying to do. When you set a breakpoint in canAutoPlay() and inspect this.consented, you can see it is false.. ",
    "tecfu": "Here's how you would make Clappr responsive using Bootsrap. \nI was forced to use a slightly different technique than what @kslimani suggests above to get this to work. \n```\n\n\n\n\n   new Clappr.Player({\n            source: manifestUri,\n            mute: false,\n            autoPlay: false,\n            parent: '#player-container',\n            width: '100%',\n            height: '100%'\n  })\n\n```\nSee example here: https://codepen.io/tecfu/pen/LJRmPQ. ",
    "Ali-Talib-jabar": "@flavioribeiro  Yes it works but how can i change the icon from stop to run. Watch the pictures. ",
    "yijunjun1": "{autoPlay: true} attribute It will not work when initialization. Can you tell me?. ",
    "freeyland": "The examples are working file but there is an issue when you try to load an new url:\n// Assuming player is Clappr Player instance\nplayer.configure({source: 'http://clappr.io/highline.mp4', autoPlay: true})\nThe player keeps retrying to connect to the previous url. \nThanx for the help. Hi @towerz \nhttps://cdn.jsdelivr.net/npm/clappr@latest/dist/clappr.min.js\nHi, ther version used is from jsdelivr: 0.2.96, so it is still an issue\nHow can I reopen?. Hi,\nI'am sorry but I've tested the code and it is working now. Really strange\nI really appreciate your help.. ",
    "MrSamoylov": "@kslimani This restriction will apply only to Safari or to all browsers running on iOS?\n. @kslimani thanks for information. I will try to find another way... . ",
    "ranst91": "\"setLevel\" works as expected. Is there any reference to it in the documentation?\nI ran into the setLevel command already before, but the level number was never mentioned, or I failed to find it. Editing this issue post to reflect the new issue arises from the discussion. It seems to resolve the issue. That probably means this issue should go towards the documentation problem. Such a simple fix is expected to already be mentioned in documentation.. ",
    "mr1985": "Adding the following option solved the problem:\nhideMediaControl: false\nIf anyone encounters the same problem, here the complete code:\n```html\n\nClappr Player\n\n Player \n\n Responsive plugin \n\n\n\n\n\n    var player = new Clappr.Player({\n      source: \"//bitdash-a.akamaihd.net/content/MI201109210084_1/m3u8s/f08e80da-bf1d-4e3d-8899-f0f6155f6efa.m3u8\",\n      parentId: \"#player\",\n      plugins: {\n        container: [ResponsiveContainer]\n      },\n      hideMediaControl: false,\n      playback: {\n        playInline: true,\n        recycleVideo: Clappr.Browser.isMobile,\n      }\n    });\n  \n\niframe example\n\n\n\n\n\n\n\n```. ",
    "ctaity": "but the is hardcoded in the playback code:\nIn the file: https://github.com/clappr/clappr/blob/master/src/playbacks/hls/hls.js\nset currentLevel(id) {\n    this._currentLevel = id\n    this.trigger(Events.PLAYBACK_LEVEL_SWITCH_START)\n    this._hls.currentLevel = this._currentLevel\n  }\nThe line:  this._hls.currentLevel = this._currentLevel should be something like:\nif (options.smoothSwitch)\n     this._hls.nextLevel  = this._currentLevel\nelse\n    this._hls.currentLevel = this._currentLevel\n. This code offers the posibility to use smooth switch to adapt levels.\nhttps://github.com/video-dev/hls.js/blob/master/docs/API.md\nhls.currentLevel: Trigger an immediate quality level switch to new quality level. This will pause the video if it was playing, flush the whole buffer, and fetch fragment matching with current position and requested quality level. Then resume the video if needed once fetched fragment will have been buffered.\nhls.nextLevel: Trigger a quality level switch for next fragment. This could eventually flush already buffered next fragment.\nXP is better using nextLevel, the posibility to buffer the playback is minimal. With current level, the playback stop, buffers the new level, and start again.\n. Exactly \ud83d\udc4d . yes ! Thanks. Yes, when the m3u8 has a #EXT-DISCONTINUTY and the tag #EXT-PROGRAMDATETIME is in the middle for example of the manifest, the following code, dont works.\nif (fragments[0].rawProgramDateTime)\n      this._programDateTime = fragments[0].rawProgramDateTime\nBut this code:\nif (data.details.programDateTime)\n      this._programDateTime = data.details.programDateTime;\nAlways works to get de program date time.\nThis lines of code are in: https://github.com/clappr/clappr/blob/master/src/playbacks/hls/hls.js\nStart on line : 447 \n. Try build clappr with last version of hlsjs. I have this build in production without problems.. we are using version: 0.10.1. I do this:\n1- Clone de clappr repo.\n2- Update package.json, line hlsjs to 0.10.1\n3- run: npm run release\n4- finish, in directory dist you have the build. ",
    "vaydich": "thnx. @ctaity i just import clappr as mentioned in docs and i don't now how to build it with new version hls.js.\nCan you explain?\n. Hi.\nI've install the last version of clappr and i think it use the last version of hls.js.\nBut the problem is still there.\nI have something like video-wall with presets and rotation. For example we have 5 presets with 11, 4, 8, 8, 2 players) Each rotation i destroy all previous players like this: \nplayer.stop();\nplayer.destroy()\nbut the momory usage incrementing permanently and eventually chrome is fall.\nIs there any workarounds maybe?. Hi.\nI have fixed version of hls.js that cleaning buffer. How can i build clappr with this fixed version?. @kslimani, i've install deps. But can you explain more about correct import my hls.js version using yarn?. @kslimani, thnx!. ",
    "Arman-Amirahmadi": ".R_boxer {\n    float: right;\n    width: 40px;\n}\n.rightbx {\n    position: relative;\n    float: right;\n    margin-top: 10px !important;\n    margin-right: 10px !important;\n    padding-top: 8px !important;\n    width: 40px;\n    height: 40px;\n    background-color: rgba(255,255,255, 0.5);\n    z-index: 999999999;\n    border-radius: 200px;\n    transition: opacity .55s ease-in-out;\n    -moz-transition: opacity .55s ease-in-out;\n    -webkit-transition: opacity .55s ease-in-out;\n}\n.paft5 {\n    padding-top: 5px !important;\n}\n.rightbx span {\n    opacity: .1;\n    font-size: 27px;\n    padding: 0;\n    font-family: FontAwesome !important;\n    z-index: 9999999;\n}\n.rightbx:hover > span {\n    color: red;\n    opacity: 1;\n}\n.rightbx:hover {\n    opacity: 1;\n    -webkit-box-shadow: 0px 0px 15px 0px rgba(0,0,0,0.43);\n    box-shadow: 0px 0px 15px 0px rgba(0,0,0,0.43);\n    transition: opacity .55s ease-in-out;\n    -moz-transition: opacity .55s ease-in-out;\n    -webkit-transition: opacity .55s ease-in-out;\n}\nI used 999999999 !!! :-( but it does NOT working well\n. @kslimani would you please give me example . @kslimani did u test the code ?\ni did it ...   by clicking on blue box ( at left top ) video will go to full screen ... and ITS THE PROBLEM :(\n. @kslimani Thank you man\nHow can hide  the blue box and show it with button box ( controller ) . Thank you @kslimani\nand finally , how can i add CSS to my plugin's js file???. @kslimani \n\nNOW ... i want to config \nvar player = new Clappr.Player({\n            source: 'http://clappr.io/highline.mp4',\n            plugins: [MyPlugin],\n            height: 360,\n            width: 640,\n            MyPlugin: {\n                rate_enabled:true,\n                rate_url: '',\n                rate_name: '',\n                comment_enabled:true,\n                comment_url:'',\n                comment_name: '',\n            },\n        });\ni want...\nif comment_enabled:true , the comment icon will show , and if its false , so i disable comment icon\n? \nDocuments are not perceptible for me :( !!. @leandromoreira \nThank you BUT would you please explain more :dango: \ni am really beginner in JavaScript :cry: \ni added this to my code , ( :arrow_down:  :arrow_down:  :arrow_down:  )\n \nand NOW ?! :question: . @leandromoreira \ndownload file from : https://ufile.io/azcnk\ni added these line as comment to the code \n\n//////  my Request and Quesstion\n      //////  1- i want to enable / disable  plugin with  rate_enabled AND comment_enabled\n      //////  if rate_enabled was FALSE in config, 'stars' must NOT show in player\n     //////  if comment_enabled was FALSE in config, 'stars' must NOT show in player\n     //////  2-I need Ajax to send rate_name/comment_name to an Url ( rate_url OR comment_url )\n. @leandromoreira \nyes ...\n\nLeandro , How can i add function form start btn ? where should i add my Function ??? \nin var CommentPlugin = Clappr.UICorePlugin.extend({ })\ni should write something before function \nlike render in this code  : render: function () { }\nSo what should i write for a for my function ?. @leandromoreira  yes ... but i did not find the answer ....\nits about 'Hello World' project with no Function , so i did it before.\nat this moment i need to onclick='CallFunc' and , i do not know how >?!. @leandromoreira , Leandro do you have solution ?. so i do it with css. ",
    "sapolio": "@kslimani \nThank you very much.\nI will certainly make a PR to hls.js as soon as I become a real coder ). @shishiraHaleneer\nThis works for me, in Safari too:\nclass myExtension extends HLS {\n    someMethod() {\n        this.el.addEventListener('webkitneedkey', this.onneedkey, false)\n    }\n}\nthis.el contains a reference to a video element created by the playback in this particular case.. @shishiraHaleneer \nsorry for the long silence.\nFairplay streaming playlist causes such an error if you are not on Safari + OS X.\nBTW: I've just implemented the very first version of Fairplay ready HTML5-playback extension, so I could answer some questions. ). Thanks!\nI've already successfully overrided built-in poster. But playback on click is implemented somewere else AFAIK.. It only affects on Pause during playback )). There isn't any special code. Just like that player.getPlugin('click_to_pause').disable();\ntest player\nWhen the player is already playing this prevents of pause/play, but it does not block the very first click.. I was inattentive, sorry.\nI only needed to override the clicked() method of poster.\n. I'm pretty shure these two problems occur for single reason, they occur at the same moment playing back a single stream.. Only one bad stream is known at the moment. And It surely is the reason.\nI've just caught the error. Three players, two versions, single stream and error.\n\nPIPELINE_ERROR_DECODE: Failed to send audio packet for decoding: timestamp=26645333 duration=21333 size=498 side_data_size=0 is_key_frame=1 encrypted=0 discard_padding (ms)=(0, 0)\n. Well, hlsjs is 0.8.9 and 0.9.1 respectively. But the difference in clappr behaviour is because of errorScreen plugin that was added in clappr@0.2.91.\nSo the problem is in the stream.\nI listen to player errors and reload.\nplayer.on(Clappr.Events.PLAYER_ERROR, err =>  {\n   if (err.code === 'hls:3') {\n       player.load(player.options.sourse)\n       player.play()\n    }\n});\nI don't know if there is a better way.\n. How could I emit an authentic fatal error to test my code?\nStream problems are not regular, and sometimes I have to wait a long time ). This issue could be closed I think.\nThe last question is how to reliably determine a fatal error and whether I need to do it at all. Probably not all of them are worth it to restart the player.\nI'm a bit confused by the presence of many different designs of error objects.. Thank you!. The poster is still there in your example though. )\nActually I've tried to hide the button.\nWell It's understood, that I have lots of possibilities of hiding unnecessary elements, but Isn't it even interesant? Because \"disable\" method seemed to be very reliable way to disable plugins. (at least for me))). I meant that the big play button was still there, as was the poster element itself. Of course, the poster image was not a problem.\nAt the moment, I'm solving the problem by replacing the built-in poster plugin with a dummy.\n\nAs I demonstrated in my example, the disable() method works fine a second after the player is ready, but it does not happen if I call it immediately.\nThis line does not work on player ready\nThe following line works fine.. Do not pay attention\nI've said nonsense, sorry.\n . But closed_captions for example is still using such a line in bindEvents method:\nthis.listenTo(this.core.mediaControl, Events.MEDIACONTROL_RENDERED, this.render)\nThis event is easily handled with player.listenTo\nWhen my plugin's bindEvents fires, this.core.mediaControl is defined.\nbindEvents works before MEDIACONTROL_RENDERED is handled with method above.. As an experiment, I extended a core plugin, adding an insignificant change, and found that the handlers no longer work. All of them.\nexport default class dvr extends DVRControls {\n  get something () { return 'something' }\n}\nAs far as I understand, this should not be so. Correct me, please, if I am not right.. @ewwink \nunfortunately it is not a matter of changing the container\ncorrect handlers stop working when I extend the built-in core plugin. so adding a container change handler really helps\nThanks to all!. ",
    "shishiraHaleneer": "@sapolio Any luck extending hls playback plugin of clappr ? I also tried listening to events of video tag in safari browser. but it didnt work . I came across this though https://github.com/video-dev/hls.js/issues/1628\n. @sapolio thanks for reponse, It was problem with CORS. I resolved it. But I got different error this time \nXMLHttpRequest cannot load skd://. Cross origin requests are only supported for HTTP.. ",
    "amiznikov": "But you can use two events webkitbeginfullscreen webkitendfullscreen and this events works great on all ios devices) exactly i don't now about something flag, which show me enable or disable fullscreen. And don't forget about https://developer.apple.com/documentation/webkitjs/htmlvideoelement/1630493-webkitdisplayingfullscreen). > Any solution to this?\ni use this code: \nthis.player.core.getCurrentPlayback().$el.on('webkitendfullscreen', () => {\n        try {\n          this.player.core.handleFullscreenChange()\n        } catch(e) {\n        }        \n      })\nbut, i saw on new version it's fixed(i didn't test it). sorry, it's my fault, i tried to open in simulate xcode, but in ios simulate doesn;t work mousemove events, so weird . ",
    "mrlika": "I think doc/EXTERNAL_PLUGINS.md is a good place for it. But the library is not a plugin. We can start a new section there and name it \"External Integrations\" or something similar.\nAnd if people really frequently ask about P2P in Clappr we can add it to FAQ page too.. Created new pull request #1691. Fixed. ",
    "fanzihui": "Well, yes, I created a method directly in a method, but each time I execute new Clappr, it means that each time I create a player window, the previous one is not destroyed, so it appears multiple times. I hope that later, although new Clappr can display one, instead of adding a player each time it is created.. thank you. ",
    "sheriffmarley": "It works on the Clappr demo page, but i have problems to get it to work on my instance.\nHow can I append it if I use other plugins as well, like:\n,plugins: {\"core\": [LevelSelector,PlaybackRatePlugin]}\nit won't work if I add it to core plugins.\nI receive this error:\n[error][MediaControl] error on event mediacontrol:hide trigger - \nTypeError: this.getCurrentContainer(...) is undefined. Works, had an issue with jQuery. \nOne last Question, is it possible to append it always after a specific element like media-control-button media-control-icon ? \nIt currently appends it anywhere, what destroys the design.. ~~We use jQuery on our site as well. Is there another way to use it and not using jquerys \u00b4.noconflict\u00b4 method?~~\n~~If we don't use noConflict, it thorws this errror~~\n\n~~TypeError: Argument 1 of Node.insertBefore does not implement interface Node.~~\n~~[error][MediaControl] error on event mediacontrol:hide trigger - \nTypeError: this.getCurrentContainer(...) is undefined~~\n\nEdit: Replaced $ with Zepto and no error anymore.\nAlso it's always right of the fullscreen icon or left of the CC Icon. Can't get it to work between those two. So it's not possible to just change the value with css? \nWould be thankful if he could provide a snippet, don't have any clue of it.. Where did you find them? I took a look at every div i could find but no plyr_caption anywhere. ",
    "cviewsupport": "Could I just paste the code from the page here?\nWhat you said makes sense.... because I know player.stop() is a function of clappr.\nit is like my javascript on the page is not connected to the clappr.js file to see the functions.. I was thinking of pasting the code here... but it is a big page full of code... \nYou probably don't want to read through all of that...\nWould it be easier for me to just post the part where the player is initialized?\n. Just to be clear... the player is working fine.  It is just being able to use the player.stop(), player.pause() etc functions that I am having a problem with.\nHere is the code.\nWe include clappr at the top of our page like this:\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/clappr/latest/clappr.min.js\"></script>\nThen down the page we have these divs:\n```\n\n\n\n````\nThe div #includedContent gets populated from a file called calppr.html\nHere is the clappr.html source:\n``\n\n\n        var server = getParameterByName('server');\n        var uuid = getParameterByName('uuid');\n        uuid = uuid.replace(/-/g, \"\");</p>\n<pre><code>    var checkUrl = function() {\n            $.ajax({\n                    type : \"GET\",\n                    url:\"http://\" + server + \"/media/\" + uuid + \"/cview.m3u8\",\n                    error: function() {\n                            checkUrl();\n                    },\n                    success: function() {\n                            var player = new Clappr.Player({\n                                    events: {\n                                            onStop: function() {this.player.play(); },\n                                            onEnded: function() {this.player.play(); },\n                                            onError: function() {this.player.play(); }\n                                    },\n                                    language: 'en-EN',\n                                    source: \"http://\" + server + \"/media/\" + uuid + \"/cview.m3u8\",\n                                    autoPlay: true,\n                                    disableVideoTagContextMenu: true,\n                                    parentId: \"#player\",\n                                    width: \"100%\",\n                playInline: true,\n                            });\n                    }\n            });\n    }\n\n    checkUrl();\n\n&lt;/script&gt;\n</code></pre>\n<!--kj stop testing-->\n\n<p><button onclick=\"player.stop()\">Test Stop or Pause</button>\n<!--end kj stop function testing--></p>\n</div>\n\n<p>````</p>\n<p>At the bottom of that page you see the button where I try to call the player.stop() function.</p>\n<p>Once I can get that to work... I will work on the ultimate goal... which is to get the video to stop after 5 minutes.</p>\n<p>Thank you so much for your time!\nI really do appreciate any tips you can give!\n. Here is the new clappr.html file.  I added the onPlay function.... but it did not fire.... and does not give any error.</p>\n<p>```\n<div>\n    <div id=\"player\"></div>\n    <script>\n        var server = getParameterByName('server');\n        var uuid = getParameterByName('uuid');\n        uuid = uuid.replace(/-/g, \"\");</p>\n<pre><code>    var checkUrl = function() {\n            $.ajax({\n                    type : \"GET\",\n                    url:\"http://\" + server + \"/media/\" + uuid + \"/cview.m3u8\",\n                    error: function() {\n                            checkUrl();\n                    },\n                    success: function() {\n                            var player = new Clappr.Player({\n                                    events: {\n                                            onPlay: function() {setTimeout(5000, () =&gt; this.player.stop()); },\n                                            onStop: function() {this.player.play(); },\n                                            onEnded: function() {this.player.play(); },\n                                            onError: function() {this.player.play(); }\n                                    },\n                                    language: 'en-EN',\n                                    source: \"http://\" + server + \"/media/\" + uuid + \"/cview.m3u8\",\n                                    autoPlay: true,\n                                    disableVideoTagContextMenu: true,\n                                    parentId: \"#player\",\n                                    width: \"100%\",\n                playInline: true,\n                            });\n                    }\n            });\n    }\n\n    checkUrl();\n\n&lt;/script&gt;\n</code></pre>\n<!--kj stop testing-->\n\n<script type=\"text/javascript\">\n\nvar timeOutVideo = function() {\nplayer.stop();\n}\n\n\nTest Stop or Pause\nend kj stop function testing\n\n```. OK, I changed up the code and now I can get it to fire the player.pause funcation after 5 seconds.... BUT the function does not work.   The video does not stop and I get an error.\nMy code:\nevents: {\n                                                onPlay: function() {setTimeout(player.pause, 4000); },\n                                                onStop: function() {this.player.play(); },\n                                                onEnded: function() {this.player.play(); },\n                                                onError: function() {this.player.play(); }\n                                        },\nError:\nUncaught TypeError: Cannot read property 'mediaControl' of undefined. Thank you!  I am now able to stop the video after a certain amount of time.\nDo I have to do the scripting for this in the same code block where the new player object is created?\nOr can I do it elsewhere on the page?\nI need to add some type of message that tells people the video has timed out on purpose... and I would like to write the javascript for that elsewhere in the page to keep the \"player code\" clean...\nThanks again!!!!!. Can I still use the \"event\" in another place?\nI ask because right now the event: is in the player code....\nIf I just skip down the page I still have access to the player but I can't use the \"events\" method again right?\nvar player = new Clappr.Player({\n                                        events: {\n                                                onPlay: function() { setTimeout(() => player.stop(), 60000); },\nI can't do that again down the page... right?. Yes!  Thats pretty much what I am trying to do.\nQuestion... in this line don't we have to bind the variable to the object?\nonPlay: function() { setTimeout(stopVideoAndShowMessage, 6000); }\nFor example...\nonPlay: function() { setTimeout(() => player.stop(), 60000); }, //binding the function to the object\nHopefully that makes sense?. Hummm... I will have to study that a little to understand it... \nThis is what I was doing before... and it did not work.\nvar timeOutVideo = function() {\nplayer.stop();\n}\n. That does not work... it is back to giving the same error it was in the beginning.\nUncaught TypeError: player.stop is not a function\n```\nvar player = new Clappr.Player({\n                                        events: {\n                                                //onPlay: function() { setTimeout(() => player.stop(), 60000); },\n                                                onPlay: function() { setTimeout(timeOutVideo, 5000); },\n                                                onStop: function() {this.player.play(); },\n                                                onEnded: function() {this.player.play(); },\n                                                onError: function() {this.player.play(); }\n                                        },\n                                        language: 'en-EN',\n                                        source: \"http://\" + server + \"/media/\" + uuid + \"/cview.m3u8\",\n                                        autoPlay: true,\n                                        disableVideoTagContextMenu: true,\n                                        parentId: \"#player\",\n                                        width: \"100%\",\n                    playInline: true,\n                                });\n                        }\n                });\n        }\n    checkUrl();\n\nvar timeOutVideo = function() {\nplayer.stop();\n}\n</script>\n\n```\n. Just wanted to see if anyone here had any thoughts on this.\nThis code works great in Chrome and FireFox and Safari...\nBUT in IE11 and Edge it breaks it.\nonPlay: function() { setTimeout(() => player.stop(), 5000); },\nIf I comment out this code... it works again..\nSomeone said IE does not like those arrow functions.\nAny ideas?. Yes!  Thank you so much!  I should have thought of that!!! I had my mind stuck on having to bind the variable... I forgot you don;t have to do that if you are up in the function....  Thanks again!. ",
    "aroraayush": "@leandromoreira Thanks for helping out. But, I want to add clappr to a webapge of mine and want to record and download the recorded bit on the client computer. OBS is a standalone app that I cannot use on my website. ",
    "oliwarner": "Looking at ours, they're just rendered as div.plyr__captions>span+.plyr__caption so pretty simple to bolt some styling onto. You don't need to dig any further unless you want to do special things (like per-actor colours).. ",
    "MediaJunkie1": "I cannot provide an example at the moment but can confirm I have experienced this.  In fact this past week, a stream I have had set up for months, stopped working for all users on my website.  (HLS 4 Error)\nHowever, a different website I own, with the same exact player coding, continued to work just fine with the stream.\nSome hours later.... HLS 4 error stopped and stream worked again on both websites with no coding changes.\nI have never experienced so many HLS 4 errors for no reason until the last major clappr update.\n. > I just tried the same code on a different hosting and it works without problems. http://czwjaeao.lucusvirtual.es/stream.htm\n\nIt seems that the problem it's on my hosting (1&1)... maybe those two streams have blocked the clappr player on page? I have no idea\n\nI do agree this seems to be some issue on the hosting side that's triggering the error in clappr.  (As evident by my antidote above.)  However I do not believe it is an issue of clappr being blocked as I have experienced this intermittently with nginx servers on various Linode droplets.\nIn my experience though, this error only seems to happen only on shared hosting, never on dedicated or running local off my computer.  Is it possible that a slow web server could cause the HLS 4 error even when the stream is confirmed working?  . Clappr does support seeking (rewind) IF the stream supports it.\nIf you want to rewind a stream that does not support dvr/seeking/rewind.... you would need to download the stream.. ",
    "Tanya159": "Sorry, incorrectly put it. Can the user change the playback speed?. It's related to hls session. \nMy code\nvar playerElementR8 = document.getElementById(\"player-r8\");\n    playerR8 = new Clappr.Player({\n        source: 'http://.../video.m3u8',\n        mute: true,\n        autoPlay: true,\n        height: 190,\n        width: 330\n    });\n    playerR8.attachTo(playerElementR8);. Object\ndata:\ndetails: \"manifestParsingError\"\nfatal: true\nnetworkDetails: XMLHttpRequest {onreadystatechange: \u0192, readyState: 4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, \u2026}\nreason: \"no level found in manifest\"\ntype: \"networkError\"\nurl: \"http://77.108.82.59:8080/R1/mono-1526483400-605.m3u8\"\n__proto__: Object\nevt: \"hlsError\". ",
    "Lakhwinder123": "Yes I try the same on demo page I work fine, but on my web same is not working on Android os. It is running on infinity loading.. How to replicate demo on my page. same like demo but error came hls4. ok i fix it. ",
    "yuanrunmao": "Yes.  For example:\n```javascript\nnew Clappr.Player({\n    height: \"100%\",\n\u00a0   width: \"100%\",\n\u00a0   strings: {\n        'zh-CN': {\n           'default_error_title': '\u65e0\u6cd5\u64ad\u653e\u89c6\u9891\u3002',\n           'default_error_message': '\u5c1d\u8bd5\u52a0\u8f7d\u89c6\u9891\u65f6\u51fa\u4e86\u95ee\u9898\u3002',\n           ......\n       }\n    }\n```\nThe strings could be found at src/plugins/strings.js#L35 .\nI hope this helps you.\n. ",
    "patrickd2206": "This helps:\nnew Clappr.Player({\n    height: \"100%\",\n    width: \"100%\",\n    strings: {\n        'zh-CN': {\n           'default_error_title': '\u65e0\u6cd5\u64ad\u653e\u89c6\u9891\u3002',\n           'default_error_message': '\u5c1d\u8bd5\u52a0\u8f7d\u89c6\u9891\u65f6\u51fa\u4e86\u95ee\u9898\u3002',\n           ......\n       }\n    }\nThe strings could be found at src/plugins/strings.js#L35 .\nThanks to Kevin Mao.. ",
    "shakthihcue": "\n\nI am a noob in this streaming, muxing logics. Considering that my requirement is to play HLS v4 stream across browsers. I tried all resources that were available to try this issue\n\n\nYes i did follow the steps mentioned except this step (tool to check the health of your stream) as I dint knew how to perform this step and consume the logs.. > http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8\n\n\nIt seems to work as expected but I would like confirm if the above url is by HLS v3 or HLS v4 as I got to know that HLS v4 has separate audio and video file because of which sync might miss.\nBelow are the manifest comparisons of urls.\n\nhttp://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8 (not sure about HLS version)\n\nEXTM3U\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=2149280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=1280x720,NAME=\"720\"\nurl_0/193039199_mp4_h264_aac_hd_7.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=2149280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=1280x720,NAME=\"720\"\nurl_1/193039199_mp4_h264_aac_hd_7.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=246440,CODECS=\"mp4a.40.5,avc1.42000d\",RESOLUTION=320x184,NAME=\"240\"\nurl_2/193039199_mp4_h264_aac_ld_7.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=246440,CODECS=\"mp4a.40.5,avc1.42000d\",RESOLUTION=320x184,NAME=\"240\"\nurl_3/193039199_mp4_h264_aac_ld_7.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=460560,CODECS=\"mp4a.40.5,avc1.420016\",RESOLUTION=512x288,NAME=\"380\"\nurl_4/193039199_mp4_h264_aac_7.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=460560,CODECS=\"mp4a.40.5,avc1.420016\",RESOLUTION=512x288,NAME=\"380\"\nurl_5/193039199_mp4_h264_aac_7.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=836280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=848x480,NAME=\"480\"\nurl_6/193039199_mp4_h264_aac_hq_7.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=836280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=848x480,NAME=\"480\"\nurl_7/193039199_mp4_h264_aac_hq_7.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=6221600,CODECS=\"mp4a.40.2,avc1.640028\",RESOLUTION=1920x1080,NAME=\"1080\"\nurl_8/193039199_mp4_h264_aac_fhd_7.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=6221600,CODECS=\"mp4a.40.2,avc1.640028\",RESOLUTION=1920x1080,NAME=\"1080\"\nurl_9/193039199_mp4_h264_aac_fhd_7.m3u8\n\nHLS v4 manifest\n\nEXTM3U\nEXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"audio-0\",NAME=\"Default\",AUTOSELECT=YES,DEFAULT=YES,URI=\"segments/ZZZZZ360sample1_audio_v4.m3u8\"\nEXT-X-I-FRAME-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=88120000,CODECS=\"avc1.640028\",URI=\"segments/ZZZZZ360sample1_1080p_iframe.m3u8\"\nEXT-X-I-FRAME-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=78735000,CODECS=\"avc1.4d001f\",URI=\"segments/ZZZZZ360sample1_720p_iframe.m3u8\"\nEXT-X-I-FRAME-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=47421000,CODECS=\"avc1.42001f\",URI=\"segments/ZZZZZ360sample1_480p_iframe.m3u8\"\nEXT-X-I-FRAME-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=27884000,CODECS=\"avc1.42001e\",URI=\"segments/ZZZZZ360sample1_360p_iframe.m3u8\"\nEXT-X-I-FRAME-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=16333000,CODECS=\"avc1.420015\",URI=\"segments/ZZZZZ360sample1_270p_iframe.m3u8\"\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=4586000,RESOLUTION=1280x720,CODECS=\"avc1.640028,mp4a.40.2\",AUDIO=\"audio-0\"\nsegments/ZZZZZ360sample1_1080p_v4.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=3570000,RESOLUTION=1280x720,CODECS=\"avc1.4d001f,mp4a.40.2\",AUDIO=\"audio-0\"\nsegments/ZZZZZ360sample1_720p_v4.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1962000,RESOLUTION=854x480,CODECS=\"avc1.42001f,mp4a.40.2\",AUDIO=\"audio-0\"\nsegments/ZZZZZ360sample1_480p_v4.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1095000,RESOLUTION=640x360,CODECS=\"avc1.42001e,mp4a.40.2\",AUDIO=\"audio-0\"\nsegments/ZZZZZ360sample1_360p_v4.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=840000,RESOLUTION=480x270,CODECS=\"avc1.420015,mp4a.40.2\",AUDIO=\"audio-0\"\nsegments/ZZZZZ360sample1_270p_v4.m3u8\nCan you please direct me with right understanding of the difference.\n. So which means the stream(http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8) you shared of version 7 and the one i have shared is of version 4.\nCould you please help me fix for this version 4 stream.. Amazon Elastic Transcoder.\nAttaching below the sample preset for one of the quality:\nSegment length = 6 sec\n\n. Thanks.\nWhich option do you recommend would generate a stream that would play with web application running on clappr, android on exoplayer and ios on native plugin.\nPS: Exoplayer seems to pause video until both audio and video buffers are equal I suppose.. But should player not support version 4 which has separate video and audio stream to run in sync.?\nJust curious in a way to fix this issue at the player level. More detailed justification would really help me in taking back the points and demand for a change in streaming version.. My requirement is for windows/chrome/clappr thats why I thought raising an issue here would help. I am ready to fix the code by comparing audio and video buffers.. ",
    "muzammilversiani": "Hi @leandromoreira sorry I don't have knowledge about chunks, can you tell me how can I find. One thing I want to share is that when I play the same media in the native Android VLC player, it works fine and there is no delay.. Hi @leandromoreira \nI just tried your streaming link it took 4-5 seconds and after that it ran smoothly without buffering. I have attached screenshots of both the streaming requests. There is a difference, the bunny one is requesting only .ts files whereas mine is calling both m3u8 and ts.\nBunny Stream:\n\nMy Stream:\n\n. Hi @leandromoreira ok I will try and let you know.\nThank you so much. Hi @leandromoreira thank you so much mate, that fixed the issue, the segment size was set to 40s, the channels are loading faster than before. There is still something I need to ask. Sometimes I get the error \"Could not load the playback\" or something like this. It happens when the first segment (.ts) file failed to load for some reasons. Is there any way to retry. I mean if the segment failed to load, player should retry this until it gets the segment?. @leandromoreira thank you so much man! Its working just perfect!. ",
    "ziddey": "This sounds like an implementation issue by whatever bootlegger is providing the streams. Many of these streams require some form of credentials or drm, which are not supported by the default chromecast receiver.. Tried a handful of browsers using the clappr demo and they all stream from the live point.. If you're referring to the edge of live delay, that's an innate feature of hls and defaults to 3 framents behind.  You can reduce this if you want (at the risk of playback stalls) by adjusting the liveSyncDurationCount parameter (via hlsjsConfig in clappr). ",
    "DanielRuf": "\nerror upath@1.0.4: The engine \"node\" is incompatible with this module. Expected version \">=4 <=9\".\n\nWell, seems we have to update the dependencies.. @towerz these are the current LTS and stable branches of Node.js. Also see https://github.com/clappr/clappr/pull/1729#issuecomment-438226423\nIt's ,eant to catch issues that exist there as we (contributors and devs and also CI) often require / import the source files for threeshaking and bundling, Node.js projects and different CI platforms.\nAs you can see users Node.js 10 and newer will have problems.\nCI is for testing (also) the different (CI) platforms.. For the deploy / publish task, you can limit this to only one of them.. > Since we just use node 8.x\nShouldn't we switch to 10? It's probably better to use the latest LTS.. Ok, then let's close this PR here. Do you plan to constrain the version also using the engines field of package.json?. ",
    "emmmmmmp": "Thank you! It's perfect now.. It still doesn't work with hls. I finally solve it by burning the subtitle into my video using ffmpeg. However, it's really time-consuming.. ",
    "hamesjarden": "Working fine here by just right-clicking the video and selecting \"picture in picture.\" No plugin required.\nI did enable these in chrome://flags before though:\nenable-experimental-web-platform-features\nenable-surfaces-for-videos\nenable-picture-in-picture. Should be very simple to create a plugin if you want to give it a go:\nhttps://developers.google.com/web/updates/2018/10/watch-video-using-picture-in-picture\nIf anything, you could just modify clappr-pip-plugin. ",
    "rafaellupo": "Thank you @kslimani, I'll do it today. . ",
    "lorenzosjb": "\nMy browser is Chrome Version 70.0.3538.102 (Official Build) (64-bit)\nOS is Windows 7.0 Professional 64-bit Service Pack 1\n\nSteps to reproduce:\n Using \n \"webpack\": \"3.5.1\",\n \"webpack-bundle-analyzer\": \"^2.9.1\",\n \"webpack-dev-server\": \"2.7.1\",\n \"babel-cli\": \"^6.26.0\",\n \"babel-cli\": \"^6.26.0\",\n \"babel-core\": \"6.25.0\",\n \"babel-eslint\": \"7.2.3\",\n \"babel-jest\": \"20.0.3\",\n \"babel-loader\": \"7.1.1\",\n \"babel-preset-es2015\": \"^6.24.1\",\n \"babel-preset-react\": \"^6.24.1\",\n \"babel-preset-react-app\": \"^3.0.2\",\n \"babel-preset-stage-0\": \"^6.24.1\",\n \"babel-runtime\": \"6.23.0\",\n \"react-responsive-modal\": \"^3.5.1\",\nI was expecting the player showing but instead it shows a blank screen and after several minutes this error.\nimport React from 'react';\nimport Modal from 'react-responsive-modal';\nimport Clappr from 'clappr';\nclass Player extends React.Component {\nconstructor(props) {\n    super(props);\n    this.state = { open: false };\n  }\nonOpenModal() { \n    this.setState({ open: true }); \n  }\nonCloseModal() { \n    this.setState({ open: false }); \n  }\nrender() {\n      return (\n        \n{this.props.title || 'Open Video Player'}\n\n\n\n\n\n\n      );\n  }\n}\nclass ClapprComponent extends React.Component {\ncomponentDidMount() {\n    const { id, source, width, height, poster } = this.props;\n    this.clappr_player = new Clappr.Player({\n      parent: #${id},\n      source,\n      width,\n      height,\n      poster,\n      autoPlay:true\n    });\n  }\ncomponentWillUnmount() {\n    this.clappr_player.destroy();\n    this.clappr_player = null;\n  }\nrender() {\n    const { id } = this.props;\n    return (); \n  }\n}\nexport default Player;\n`\n. ",
    "ryan77627": "Update: Just tried the sintel demo hls stream, still does the same thing on that page. So it isn't my manifest file, it's definitely the player.. I see what you mean.. That may be a bit of an issue since I barely know PHP or javascript xD. Since recoding phpBB is out of my league by a long shot, I'm gonna look around clappr's code, see if I can find anything relating to this. Unless you happen to know of a way to ignore the url already, of course ;)\nThanks!. I just found the config option as you posted the answer, thanks. I'll do this since auto seeking isn't applicable yet for me. If it ever is I may try to figure out the code so I can change the letter it looks for in the URL, but that's for another day. Thanks for the help!. ",
    "deaabie": "\n1693\n\nworking fine for mp4 but not working for m3u8 . anyone can help me please ?. ",
    "mical892524": "@towerz  Can you give me a pLoader demo? . ",
    "pdtan": "I'll wait for new updates. Btw where do I put the setTimeout function? Tried in render and attachButton but it didn't work.. ",
    "thekendog": "@pdtan did you ever figure this out?  I'm trying to do the same thing.. Excellent. Worked like a charm.  Thanks!. If it's a live stream then it wouldn't have a duration, so how would the seekbar work?. ",
    "afonsocdaniel": "Hi, @daviduarte, you can listen to HLS Events.PLAYBACK_FRAGMENT_LOADED but this would be imprecise, a better suggestion is to mark the video _timestamps(pts or possiton) for your boxes and list to _ CONTAINER_TIMEUPDATE event so you can show the boxes at the right time.. Hi, @esmondgh during the error statement the player cannot play, as @kslimani said, you need to either load a new source or destroy the current instance and create a new one.. Hi, @edoudou nowadays we don't have support for that. A simple suggestion for now, you can extends the MediaControl component and overrides the method toggleFullscreen.. What do you think about moving this.stopListening() to the BaseObject  and calls here the method super.destroy()? With this change, we can also remove the method destroy from the others components that extends from BaseObject.. ",
    "esmondgh": "@kslimani - It worked, but not the way I want it to behave.\nLets take the POSTER for example. When I click the big Play Button, the POSTER stays and the player start to load the stream. As soon as it start playing the POSTER disappears.\nI want the same for the Error Screen. As soon as it start playing the Error Screen should disappear.. ",
    "cristianfd": "Finally I solve the problem by watching to hlsjs events:\nthis.player.on(Clappr.Events.PLAYER_READY, () => {\n    this.player.core.on(Clappr.Events.ERROR, (err) => {\n        if(err.raw.type === 'networkError' && err.raw.details === 'keyLoadError' && err.raw.response.code === 401){\n            this.player.destroy();\n            $('#error-wrapper #message').html(\"You are not authorized to view this content\");\n            $('#error-wrapper').show();\n        }\n    });\n});. ",
    "edoudou": "Do you have a code sample of how to do it ?\nI have tried different way, but I can't figure it out.\n1st attempt :\njs\nconst MyCustomControls = Clappr.MediaControl.extend({\n  toggleFullscreen : () => {\n    console.log(\"Test\");\n  }\n});\n2nd attempt :\njs\nconst MyCustomControls extends Clappr.MediaControl {\n  toggleFullscreen = () => {\n    console.log(\"Test\");\n  }\n}\nI tried initializing the player like this : \njs\nthis.player = new Clappr.Player({\n      ...\n      mediacontrol : {external : MyCustomControls},\n      ...\n    });\nand like this : \njs\nthis.player = new Clappr.Player({\n      ...\n      mediacontrol : MyCustomControls,\n      ...\n    });\nNo errors, but it does not override anything.\nThx in advance.. ",
    "ash0080": "same. ",
    "blop": "\ud83e\udd14. ",
    "katsar0v": "(A workaround, may be to open each ressources on new tab and accept security exception, then reload page). This fixed it, thanks!. Is this compatible with hls streams? . When an HLS Stream is used, mostly the subtitles come from the stream itself. In my case it was not documentet how to use multiple subtitles, but I got this --> https://github.com/kaltura/nginx-vod-module/issues/950. ",
    "maza2k2": "Sorry, its issue for https://github.com/thiagopnts/clappr-video360\nallow=\"gyroscope; accelerometer\" does not helped.\nI'll find solve.. ",
    "lmancel": "Linked to issue https://github.com/clappr/clappr/issues/1767. ",
    "platinum55": "noticed another thing right now: when the m3u8 playlist contains an \"#EXT-X-START:TIME-OFFSET=0\", the player jumps to the position which is fine, but the position is not visible here, and the bar-scrubber in live mode is always on the very right side on the seekbar.\nits just confusing and makes user initial seeking difficult, because you dont know your current position in the stream. there is a duration calculated from the parts in the m3u8 file. When you seek back in time, while in Live mode, the player shows the correct duration(which updates every second and increases) and shows \"Back to live\" - so I think the position/duration is already there, I just need to know how to show/implement it :). ",
    "arpanmaurya": "\non localhost\n\non ip address \nconsole doesn't show anything.\n. \nlocalhost\n\nip address \nin chrome cors has been an issue even tho i am doing it from live streaming server.. > you need to ensure that cors headers are sent by the server which deliver the hls stream. This is something you can configure in most streaming servers.\nafter checking i can't find the setting in my server is their alternate way if i can't do it from my live streaming server?. it is coming directly from a live streaming server \nhttps://www.datavideo.com/us/product/NVS-40\nthis one.\nand to fetch the live streaming i am using apache (Xampp). don't close the issue i am facing another challenges so i can't test this right now plus i m finding why this error is happening \n\n. i solved the problem from by passing the cors header but it only works for IExplorer which is my case and i consider this issue is solved for me.\nthank you.. ",
    "DvorinM3": "update: My friends successfully tested on iPhone Xr and Samsung Galaxy S8. ",
    "TueTinhTV": "\nYou might find some help at the closed issues related to ads (specifically vast)\n\nHappiness when see reply for me.\n:D \"Hello World. 01001000 01100101 01101100 01101100 01101111 00100000 01110111 01101111 01110010 01101100 01100100  \"\nI try and  research your suggestions. Thank for your presents.. Pleaz!\nHelp for clappr vast in project Nextjs.\nI'm junior .Net.\n. ",
    "houndci-bot": "Line is too long.Expected 'this' to have an indentation at 13 instead at 7.\n. Expected 'describe' to have an indentation at 5 instead at 3.\n. Expected 'it' to have an indentation at 9 instead at 5.\n. Expected 'gaControl' to have an indentation at 13 instead at 7.\n. Expected 'expect' to have an indentation at 13 instead at 7.\n. Expected '}' to have an indentation at 9 instead at 5.\n. Expected '}' to have an indentation at 5 instead at 3.\n. Expected 'describe' to have an indentation at 5 instead at 3.\n. Expected 'beforeEach' to have an indentation at 9 instead at 5.\n. Expected 'window' to have an indentation at 13 instead at 7.\n. Expected 'this' to have an indentation at 13 instead at 7.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. ['__onGCastApiAvailable'] is better written in dot notation.\n. Line is too long.\n. Line is too long.'chrome' is not defined.\n. Line is too long.\n. Line is too long.\n. Line is too long.'chrome' is not defined.\n. Line is too long.\n. 'chrome' is not defined.\n. 'chrome' is not defined.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Duplicate class method 'mousemoveOnVolumeBar'.'event' is defined but never used.\n. Duplicate class method 'mousemoveOnVolumeBar'.\n. Line is too long.\n. Line is too long.\n. 'event' is defined but never used.\n. Line is too long.\n. Line is too long.Bad line breaking before '||'.\n. 'event' is defined but never used.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Redefinition of 'requestAnimationFrame'.\n. Redefinition of 'cancelAnimationFrame'.'cancelAnimationFrame' is defined but never used.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. 'buffer32' is defined but never used.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.'url' is already defined.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. 'webpack' is defined but never used.\n. Bad line breaking before '+'.\n. Bad line breaking before '+'.\n. Bad line breaking before '+'.\n. Colon after property should be followed by one space\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Colon after property should be followed by one space\n. Colon after property should be followed by one space\n. Selector should have depth of applicability no greater than 2, but was 5Colon after property should be followed by one space\n. Selector should have depth of applicability no greater than 2, but was 5Colon after property should be followed by one space\n. Selector should have depth of applicability no greater than 2, but was 3Colon after property should be followed by one space\n. Selector should have depth of applicability no greater than 2, but was 3Colon after property should be followed by one space\n. Selector should have depth of applicability no greater than 2, but was 3Colon after property should be followed by one space\n. Selector should have depth of applicability no greater than 2, but was 3Colon after property should be followed by one space\n. Expected '{' and instead saw 'out'.\n. Nesting should be no greater than 4, but was 5Selector should have depth of applicability no greater than 2, but was 3Colon after property should be followed by one space\n. Nesting should be no greater than 4, but was 5Selector should have depth of applicability no greater than 2, but was 3Colon after property should be followed by one space\n. Expected '{' and instead saw 'out'.\n. Unexpected use of '>>>'.Expected an identifier and instead saw '>>>'.Unexpected '1'.\n. Expected '{' and instead saw 'out'.\n. Expected an identifier and instead saw '==='.Expected an operator and instead saw '==='.Expected an operator and instead saw '='.\n. Expected '{' and instead saw 'out'.\n. Unexpected use of '<<'.Expected an identifier and instead saw '<<'.Expected an identifier and instead saw '<'.\n. Expected '{' and instead saw 'out'.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.'event' is defined but never used.\n. Line is too long.\n. 'callbackName' is defined but never used.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.Expected '===' and instead saw '=='.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Redefinition of '$'.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Color white should be written in hexadecimal form as #ffffffColor literals like white should only be used in variable declarations; they should be referred to via variable everywhere else.\n. Color white should be written in hexadecimal form as #ffffffColor literals like white should only be used in variable declarations; they should be referred to via variable everywhere else.\n. Color literals like #777 should only be used in variable declarations; they should be referred to via variable everywhere else.\n. Merge rule [data-no-flash] p[data-no-flash-msg] with rule on line 1Avoid qualifying attribute selectors with an element.\n. Merge rule [data-no-flash] p[data-no-flash-msg] a with rule on line 1Avoid qualifying attribute selectors with an element.Selector should have depth of applicability no greater than 2, but was 3\n. Merge rule [data-no-flash] canvas[data-no-flash-canvas] with rule on line 1Avoid qualifying attribute selectors with an element.\n. Properties should be ordered height, position, text-align, width, z-index\n. Properties should be ordered color, font-size, position, top\n. Properties should be ordered background-color, height, text-align, width\n. Line is too long.\n. Line is too long.\n. 'buffer32' used out of scope.\n. Unexpected use of '<<'.\n. 'buffer32' used out of scope.\n. Line is too long.\n. Expected '===' and instead saw '=='.\n. Line is too long.\n. Line is too long.\n. 'HLS' is not defined.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. 'startFromBitrate' is defined but never used.\n. 'FlasHLS' is not defined.\n. 'setStartFromBitrate' is not defined.\n. Expected '===' and instead saw '=='.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Line is too long.\n. Expected '{' and instead saw 'return'.\n. Expected '{' and instead saw 'this'.\n. 'HLS' is not defined.\n. 'startFromBitrate' is defined but never used.\n. 'FlasHLS' is not defined.\n. 'setStartFromBitrate' is not defined.\n. Expected '===' and instead saw '=='.\n. 'Styler' is defined but never used.\n. Expected '{' and instead saw 'throw'.\n. Expected '{' and instead saw 'throw'.\n. Expected '{' and instead saw 'throw'.\n. Missing semicolon.Too many errors. (66% scanned).\n. Missing semicolon.\n. Missing semicolon.\n. Missing semicolon.\n. Missing semicolon.\n. Mixed double and single quotes.\n. Missing semicolon.\n. Missing semicolon.\n. Missing semicolon.\n. Missing semicolon.\n. Line is too long.Missing semicolon.\n. Missing semicolon.\n. Line is too long.Missing semicolon.\n. Missing semicolon.\n. Missing semicolon.\n. Missing semicolon.\n. ",
    "markmatney": "@vagnervjs looks like I should follow this style. Should I open a new PR with these changes?. I agree, however I think I would need help since I am not that familiar with this codebase and it appears that not all MediaControl-specific options are namespaced under options.mediacontrol (for example, options.hideMediaControl, and presumably also options.hideVolumeBar).\nLikewise, it seems like Container.configure should also only be called if container-specific options are changed. Perhaps Core.configure should look like this:\njavascript\n...\nthis.containers.forEach((container) => {\n    if (containerSpecificOptionsChanged) {\n        container.configure(this.options)\n    }\n})\nif (mediaControlSpecificOptionsChanged) {\n    this.mediaControl.configure(this.options)\n}\n.... ",
    "otmjka": "there will be an error if this.el.error is null. "
}