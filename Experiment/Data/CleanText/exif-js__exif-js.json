{
    "jseidelin": "Not sure which tag this is? User comment maybe?\n. Merged, thanks!\n. Binaryajax.js is no longer used by exif.js.\n. Finally got around to look at this. Merged your additions manually. Thanks!\n. Done. MIT licensed.\n. No, i'm not aware of any examples of modifying or stripping the meta data.\n. @joeweiss Yes, please do. I'll have it merged asap then.\n. Merged in #25. Thanks!\n. Exif.js no longer uses binaryajax.js. Is this still a problem?\n. @markevans Looks like you're right. Thanks.\n. Merged. Thanks!\n. Yes, it does look like there's an issue there. The file seems to load fine in Photoshop so I assume it's a problem in exif.js - but I haven't found the cause yet. The way I'm reading ExifIFDPointer seems to put it a few bytes off from where it should be (in this file).\n. Looks like this has been covered by https://github.com/jseidelin/exif-js/pull/6\n. This should be fixed now.\n. Looks good, merging. Thanks!\n. Thanks!\n. Are you running the example locally, i.e. from a file:// url? Try running it from a web server.\n. Yeah, the format of the makernote data is vendor-specific (http://en.wikipedia.org/wiki/Exchangeable_image_file_format#MakerNote_data) so you need to know which camera took the picture in order to properly parse the data.\n. Thanks man. Merging.\n. Yep, I just published it to bower and also asked the current owner of the npm entry to transfer it or at least update it.\n. Looks good. Thanks.\n. I'm the original author. I tried to hand it over to someone else a while ago but I guess that failed.\nI have no interest in this project any more and don't want to maintain it. If any of you want to take over, let me know and I'll give you access.\n. I've added @bartvanderwal as a collaborator on npm as well. . Not sure which tag this is? User comment maybe?\n. Merged, thanks!\n. Binaryajax.js is no longer used by exif.js.\n. Finally got around to look at this. Merged your additions manually. Thanks!\n. Done. MIT licensed.\n. No, i'm not aware of any examples of modifying or stripping the meta data.\n. @joeweiss Yes, please do. I'll have it merged asap then.\n. Merged in #25. Thanks!\n. Exif.js no longer uses binaryajax.js. Is this still a problem?\n. @markevans Looks like you're right. Thanks.\n. Merged. Thanks!\n. Yes, it does look like there's an issue there. The file seems to load fine in Photoshop so I assume it's a problem in exif.js - but I haven't found the cause yet. The way I'm reading ExifIFDPointer seems to put it a few bytes off from where it should be (in this file).\n. Looks like this has been covered by https://github.com/jseidelin/exif-js/pull/6\n. This should be fixed now.\n. Looks good, merging. Thanks!\n. Thanks!\n. Are you running the example locally, i.e. from a file:// url? Try running it from a web server.\n. Yeah, the format of the makernote data is vendor-specific (http://en.wikipedia.org/wiki/Exchangeable_image_file_format#MakerNote_data) so you need to know which camera took the picture in order to properly parse the data.\n. Thanks man. Merging.\n. Yep, I just published it to bower and also asked the current owner of the npm entry to transfer it or at least update it.\n. Looks good. Thanks.\n. I'm the original author. I tried to hand it over to someone else a while ago but I guess that failed.\nI have no interest in this project any more and don't want to maintain it. If any of you want to take over, let me know and I'll give you access.\n. I've added @bartvanderwal as a collaborator on npm as well. . ",
    "jdeblese": "Small issue with this: instanceof window.File works when the file was uploaded directly, but not necessarily in other contexts. I'm trying to use this library in an offline Chome app, in which case the File object (actually a FileEntry object) comes from a different window or iframe and will never match window.File.\nPossible solutions I've found are checking img.constructor.name or (new Object).toString.call(img). Any better ideas?\n. Small issue with this: instanceof window.File works when the file was uploaded directly, but not necessarily in other contexts. I'm trying to use this library in an offline Chome app, in which case the File object (actually a FileEntry object) comes from a different window or iframe and will never match window.File.\nPossible solutions I've found are checking img.constructor.name or (new Object).toString.call(img). Any better ideas?\n. ",
    "ItalyPaleAle": "This patch is hardly needed.\n+1\n. Thank you @magro for your idea! I slightly modified the code so it accepts both File and Blob. I referenced the issue on my pull request (#14)\n. This patch is hardly needed.\n+1\n. Thank you @magro for your idea! I slightly modified the code so it accepts both File and Blob. I referenced the issue on my pull request (#14)\n. ",
    "nickdesaulniers": "Draw the image to a canvas and present that for download: https://github.com/codepo8/image-data-cleaner/blob/c732dc05ff4cc8946301e0b9cd30c8c5a33815c6/scripts/cleaner.js#L56-L59\n. Draw the image to a canvas and present that for download: https://github.com/codepo8/image-data-cleaner/blob/c732dc05ff4cc8946301e0b9cd30c8c5a33815c6/scripts/cleaner.js#L56-L59\n. ",
    "danielbarela": "bug reflected in new pull request\n. bug reflected in new pull request\n. ",
    "farmergreg": "this code makes exif-js work for me in chrome. can we get it pulled into exif-js?\n. this code makes exif-js work for me in chrome. can we get it pulled into exif-js?\n. ",
    "easy2x": "big thx for this fix, now it works for me in chrome/opera(webkit)\n. big thx for this fix, now it works for me in chrome/opera(webkit)\n. ",
    "sroze": ":+1: \n. @jseidelin Could you provide a feedback on that PR ?\n. :+1: \n. @jseidelin Could you provide a feedback on that PR ?\n. ",
    "redaktor": ":+1: \nand btw :\n@jseidelin @matrei\nIf anyone would be interested in makernotes or xmp - we do that currently in a fork of another project, see https://github.com/redaktor/exiftool.js\nThe code is there - and has yet >50% total coverage of the reference project perl exiftool (see reports).\nXMP will be added soon.\nBut currently everything is in different files and we did not \"re-browserify\" it...\n. :+1: \nand btw :\n@jseidelin @matrei\nIf anyone would be interested in makernotes or xmp - we do that currently in a fork of another project, see https://github.com/redaktor/exiftool.js\nThe code is there - and has yet >50% total coverage of the reference project perl exiftool (see reports).\nXMP will be added soon.\nBut currently everything is in different files and we did not \"re-browserify\" it...\n. ",
    "joeweiss": "This PR is behind @jseidelin's master branch now. I went ahead and added the IPTC functionality from this PR to the latest.  I also added two more IPTC fields (dateCreated, bylineTitle) to the IPTC list.\nI can open a new PR if anyone is interested.\nhttps://github.com/joeweiss/exif-js\n. Original PR here: https://github.com/jseidelin/exif-js/pull/12\nMany thanks to @matrei and @jseidelin.\n. This looks good. All examples work for me. Looking forward to getting this into bower.\n. Thanks @martinkunkel, though wouldn't the value be \"1/1000\" rather than \"1/1000s\".\nThe exif spec says that exposure time should be a rational, rather than a string.\n. > doesn't that apply to the way the exif data is stored in the jpg rather than the output format?\nYou're correct. Still a string, but now a \"cleaner\" rational. Thanks for the update.\n@jseidelin, this PR looks good and passes all test cases I've got. I think it should be merged if you have time and no objections.\n. This PR is behind @jseidelin's master branch now. I went ahead and added the IPTC functionality from this PR to the latest.  I also added two more IPTC fields (dateCreated, bylineTitle) to the IPTC list.\nI can open a new PR if anyone is interested.\nhttps://github.com/joeweiss/exif-js\n. Original PR here: https://github.com/jseidelin/exif-js/pull/12\nMany thanks to @matrei and @jseidelin.\n. This looks good. All examples work for me. Looking forward to getting this into bower.\n. Thanks @martinkunkel, though wouldn't the value be \"1/1000\" rather than \"1/1000s\".\nThe exif spec says that exposure time should be a rational, rather than a string.\n. > doesn't that apply to the way the exif data is stored in the jpg rather than the output format?\nYou're correct. Still a string, but now a \"cleaner\" rational. Thanks for the update.\n@jseidelin, this PR looks good and passes all test cases I've got. I think it should be merged if you have time and no objections.\n. ",
    "rothanachoun": "I got this problem too. Anyone know how to fix?\n. I got this problem too. Anyone know how to fix?\n. ",
    "markevans": "I also get this problem on an iPhone 4S. Thanks\n. actually I don't think this is a bug with this library - IOS itself seems to strip EXIF tags for security reasons http://stackoverflow.com/questions/16297730/image-upload-from-iphone-strips-exif-data\n. I also get this problem on an iPhone 4S. Thanks\n. actually I don't think this is a bug with this library - IOS itself seems to strip EXIF tags for security reasons http://stackoverflow.com/questions/16297730/image-upload-from-iphone-strips-exif-data\n. ",
    "expntly": "@markevans @jseidelin This doesn't seem to be entirely true.\nhttp://stackoverflow.com/questions/39311406/ios-exif-geolocation-data-missing\nAny idea what's going on?\n. @markevans @jseidelin This doesn't seem to be entirely true.\nhttp://stackoverflow.com/questions/39311406/ios-exif-geolocation-data-missing\nAny idea what's going on?\n. ",
    "spatialillusions": "I'm having the same problem with some images, maybe you could merge the pull request as a temp workaround. \n. You get the values as degrees, minutes, seconds. This is how they are stored in the file, and what you want is decimal degrees, so you will have to make some calculations to convert them. \nPseudocode:\ndecDegrees = GPSLattitude[0] + (GPSLattitude[1]/60) + (GPSLattitude[2]/(6060))\n. I'm having the same problem with some images, maybe you could merge the pull request as a temp workaround. \n. You get the values as degrees, minutes, seconds. This is how they are stored in the file, and what you want is decimal degrees, so you will have to make some calculations to convert them. \nPseudocode:\ndecDegrees = GPSLattitude[0] + (GPSLattitude[1]/60) + (GPSLattitude[2]/(6060))\n. ",
    "webthusiast": "Not intended to be merged into master, so closing.\n. Not intended to be merged into master, so closing.\n. ",
    "dmarkow": "Reading the 2.3 spec regarding the value immediately following the 0x002A magic number:\n\nUsually the first IFD starts immediately next to TIFF header, so this offset has value '0x00000008'.\n\nI would interpret \"usually\" as meaning \"but not always\" (leaning in favor of reading and using that offset value instead of requiring it to be 8).\n\nAlso, perl's Image-MetaData-JPEG library handles it like this:\nperl\n    # decode the offset of the 0th IFD: this is usually 8, but we are\n    # not going to assume it. Do not store the record (it is uninteresting)\n    my $ifd0_link = $this->read_record($LONG, $offset);\n. Oh, and the command-line exiftool library does it too (it just makes sure it's at least 8)\n``` perl\nget offset to IFD0\nmy $offset = Get32u($dataPt, 4);\n$offset >= 8 or return 0;\n```\n. Reading the 2.3 spec regarding the value immediately following the 0x002A magic number:\n\nUsually the first IFD starts immediately next to TIFF header, so this offset has value '0x00000008'.\n\nI would interpret \"usually\" as meaning \"but not always\" (leaning in favor of reading and using that offset value instead of requiring it to be 8).\n\nAlso, perl's Image-MetaData-JPEG library handles it like this:\nperl\n    # decode the offset of the 0th IFD: this is usually 8, but we are\n    # not going to assume it. Do not store the record (it is uninteresting)\n    my $ifd0_link = $this->read_record($LONG, $offset);\n. Oh, and the command-line exiftool library does it too (it just makes sure it's at least 8)\n``` perl\nget offset to IFD0\nmy $offset = Get32u($dataPt, 4);\n$offset >= 8 or return 0;\n```\n. ",
    "artyil": "i decided to close this pull request and leave the reference to my fork of the repository for anyone who might be interested \n. +1\n. Try adding the necessary tags into GPSTags section and test\n. i decided to close this pull request and leave the reference to my fork of the repository for anyone who might be interested \n. +1\n. Try adding the necessary tags into GPSTags section and test\n. ",
    "vcuhar": "Sorry, bad pull-request.\n. Sorry, bad pull-request.\n. ",
    "Taranys": ":+1: \n. :+1: \n. ",
    "garrows": ":+1: \nCurrently works with bower install https://github.com/webthusiast/exif-js.git --save\n. :+1: \nCurrently works with bower install https://github.com/webthusiast/exif-js.git --save\n. ",
    "bartvanderwal": "Currently for me also worked simply:\n\nbower install exif-js\n\n:+1: I think thanks to the update/pull request from @kirisu.\n. Yeah :+1:  +1!\nIt would be great if you could also set exif data on an image in Javascript. In blob form for instance.\nI'm currently experiencing loss of exif data in a .jpg after resizing it using HTML5/Javascript canvas element. The only way i see it is to post the exif info to the server and reconstruct things there (error-prone stuff).\n. Ah wait, I already started to do something but I had missed the included example/index.html completely.\n. I actually already wrote some. I'll do a pull request when I have changed my code examples in that with those that were already in the index.html. Because I discovered those existed only after. But I won't need to test/improve those like I'd still need to do with mine. But now weekend first...\n. I did a pull request a while ago...\n. Great work @jseidelin.\nIf you give me access at least I'll accept my own pull request. ;)\nThis is a dependency in a project I'm working on. (Though it's currently on hold).\n. Thanks!\nI merged. \nHad some small doubts, like shouldn't you put this in the definitelytyped repo instead? But it's been a while since I used Typescript. And it seems now 'typings' is the thing to use. Does this conform to their way of working? Shouldn't there be a typings folder or typings.json or something?\n. Thanks! But I moved the example HTML file into the root folder, so you see it immediately if you run http-server . in the root.. Hi, well code looks good, analogous to the the Exif function!\nI'll believe you on your blue eyes. Ah that's a translation of a Dutch saying, but actually I'll accept any colour eyes! But I'll trust this adds something, and nice for other users who want the IPTC data. Thanks!\n--> merged. Great! Thanks for the parenthesisal guidance ;). @getup8 I've been added as an op for the GitHub repo.\nBut I assume with official release you mean the NPM version? And/or Bower.\nDoing an update of the NPM package would require\n1. Updating the source in NPM (npm update)\n2. And upping the major or minor version with 1 in package.json\nI don't have the NPM rights to do the first thing. @jseidelin @kirisu do u have those rights? Roald de Vries originally wrote both the package.json and bower.json. But I don't know his GitHub name.. Well thanks @jseidelin. So you found me on npm.\nI've now tried an npm publish now for a new v2.2.0 release (change version numbers in package.json and bower.json), and adding a git tag etc. And even generating changelog (as this is a podcast I like) with gren but to no avail.\nThe publish finally worked, but now npm is still showing the old/current v2.1.1 version.. I'll assume this is fixed per release 2.3.0\nCan you confirm @CezaryDanielNowak?\nPlease close if so.. Hi @jseidelin,\nI was tryying to contribute, but it seems my update wrecked the NPM and Bower version. See this issue and several other recent ones. On my part I basically just got the latest from master, updated bower.json and package.json to 2,2,1 and did\n\nnpm publish\n\nWithout any further sanity check. It is clear this is not the way to go. Best add some unit tests to prevent regession errors. Though I don't quite understand the comment about way behind or undeclared variables.\nBut sadly I don't have time now to figure this out. Do you?. Thanks @benjaminbillet.\nI don't know who added the call to xml2json. There is also a xml2json package in npm. But for simplicity's sake I have now included your xml2json function!. Hello @pbwei,\nCould you use English please? :)\n\"Parse exception at first non-ASCII character\". this code? those information?\nPlease be more specific.. Ok thanks. I've pushed an update in response to your e-mail.. This is really a breaking change, so semver says major version number should be updated. By since XMP doesn't seem to be used that much, and I'm just a minor contributor, I chose minor instead.. This might be better asked on stackoverflow.\nBut please give at least a stack trace and description where/when this issue occurs. And version nr (or latest=2.30).\nIdeally provide a reproduction path (minimal steps you can reproduce this error with).. Currently for me also worked simply:\n\nbower install exif-js\n\n:+1: I think thanks to the update/pull request from @kirisu.\n. Yeah :+1:  +1!\nIt would be great if you could also set exif data on an image in Javascript. In blob form for instance.\nI'm currently experiencing loss of exif data in a .jpg after resizing it using HTML5/Javascript canvas element. The only way i see it is to post the exif info to the server and reconstruct things there (error-prone stuff).\n. Ah wait, I already started to do something but I had missed the included example/index.html completely.\n. I actually already wrote some. I'll do a pull request when I have changed my code examples in that with those that were already in the index.html. Because I discovered those existed only after. But I won't need to test/improve those like I'd still need to do with mine. But now weekend first...\n. I did a pull request a while ago...\n. Great work @jseidelin.\nIf you give me access at least I'll accept my own pull request. ;)\nThis is a dependency in a project I'm working on. (Though it's currently on hold).\n. Thanks!\nI merged. \nHad some small doubts, like shouldn't you put this in the definitelytyped repo instead? But it's been a while since I used Typescript. And it seems now 'typings' is the thing to use. Does this conform to their way of working? Shouldn't there be a typings folder or typings.json or something?\n. Thanks! But I moved the example HTML file into the root folder, so you see it immediately if you run http-server . in the root.. Hi, well code looks good, analogous to the the Exif function!\nI'll believe you on your blue eyes. Ah that's a translation of a Dutch saying, but actually I'll accept any colour eyes! But I'll trust this adds something, and nice for other users who want the IPTC data. Thanks!\n--> merged. Great! Thanks for the parenthesisal guidance ;). @getup8 I've been added as an op for the GitHub repo.\nBut I assume with official release you mean the NPM version? And/or Bower.\nDoing an update of the NPM package would require\n1. Updating the source in NPM (npm update)\n2. And upping the major or minor version with 1 in package.json\nI don't have the NPM rights to do the first thing. @jseidelin @kirisu do u have those rights? Roald de Vries originally wrote both the package.json and bower.json. But I don't know his GitHub name.. Well thanks @jseidelin. So you found me on npm.\nI've now tried an npm publish now for a new v2.2.0 release (change version numbers in package.json and bower.json), and adding a git tag etc. And even generating changelog (as this is a podcast I like) with gren but to no avail.\nThe publish finally worked, but now npm is still showing the old/current v2.1.1 version.. I'll assume this is fixed per release 2.3.0\nCan you confirm @CezaryDanielNowak?\nPlease close if so.. Hi @jseidelin,\nI was tryying to contribute, but it seems my update wrecked the NPM and Bower version. See this issue and several other recent ones. On my part I basically just got the latest from master, updated bower.json and package.json to 2,2,1 and did\n\nnpm publish\n\nWithout any further sanity check. It is clear this is not the way to go. Best add some unit tests to prevent regession errors. Though I don't quite understand the comment about way behind or undeclared variables.\nBut sadly I don't have time now to figure this out. Do you?. Thanks @benjaminbillet.\nI don't know who added the call to xml2json. There is also a xml2json package in npm. But for simplicity's sake I have now included your xml2json function!. Hello @pbwei,\nCould you use English please? :)\n\"Parse exception at first non-ASCII character\". this code? those information?\nPlease be more specific.. Ok thanks. I've pushed an update in response to your e-mail.. This is really a breaking change, so semver says major version number should be updated. By since XMP doesn't seem to be used that much, and I'm just a minor contributor, I chose minor instead.. This might be better asked on stackoverflow.\nBut please give at least a stack trace and description where/when this issue occurs. And version nr (or latest=2.30).\nIdeally provide a reproduction path (minimal steps you can reproduce this error with).. ",
    "pmithrandir": "Hello,\nWouldn't you say that it could be usefull to check the name for all these camera, and then to create a \"dummy\" variable or a shortcut to access it ?\nCurrently I'm checking by regex, but it's seems really unefficient.\nYour feeling ?\nPierre\n. Hello,\nWouldn't you say that it could be usefull to check the name for all these camera, and then to create a \"dummy\" variable or a shortcut to access it ?\nCurrently I'm checking by regex, but it's seems really unefficient.\nYour feeling ?\nPierre\n. ",
    "JrSchild": "Thanks, it's showing up in the npm registry, could you do the publish to bower too?\n. Appreciate it, thanks for the great work.\n. Thanks, it's showing up in the npm registry, could you do the publish to bower too?\n. Appreciate it, thanks for the great work.\n. ",
    "nikuph": "@jseidelin any updates on this? The owner of the npm entry told me that he asked you for a transfer.\n. @jseidelin any updates on this? The owner of the npm entry told me that he asked you for a transfer.\n. ",
    "rodfersou": "I need this too.. can't import the library using webpack.\nAny chance to do a merge and release?. @bartvanderwal could you please look at this?. I need this too.. can't import the library using webpack.\nAny chance to do a merge and release?. @bartvanderwal could you please look at this?. ",
    "frontenddeveloping": "This problem is about CORS policy in images. \nYou can read more about this here:\nhttp://blog.codepen.io/2013/10/08/cross-domain-images-tainted-canvas/\nAnd read more about crossorigin img attribute:\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\n. This problem is about CORS policy in images. \nYou can read more about this here:\nhttp://blog.codepen.io/2013/10/08/cross-domain-images-tainted-canvas/\nAnd read more about crossorigin img attribute:\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\n. ",
    "systembugtj": "you can use promise to synchronize it.\n. you can use promise to synchronize it.\n. ",
    "diegocr": "\nIs is somehow possible to read exif data synchronously?\n\nYes, deal with the <img/>s data yourself and then call EXIF.readFromBinaryFile()\n. fwiw, i get correct Orientation values for these images (3 and 8, respectively)\nI.e:\n19:55:43.625 exif: timer started index.js:109\n19:55:43.625 Got file of length 3943134 exif.js:386:20\n19:55:43.625 225 exif.js:415:24\n19:55:43.625 Found 0xFFE1 marker exif.js:421:28\n19:55:43.626 Unknown tag: 0xc4a5 exif.js:558:1\n19:55:43.627 exif: 2.48ms index.js:118\n19:55:43.627 EXIF Object { ImageDescription: \"Exif_JPEG_PICTURE                  \u2026\", Make: \"RICOH      \", Model: \"G700 SE        \", Orientation: 8, XResolution: 72, YResolution: 72, ResolutionUnit: 2, Software: \"G700SE Firmware\", DateTime: \"2013:06:13 14:33:48\", YCbCrPositioning: 2, 56 more\u2026 } 8\nPerhaps you're using an older exif.js, dunno.\n. Actually you can just load the blob:uri using responseType = 'arraybuffer' and it'll be even faster since no FileReader needs to be used afterwards.\nI made that in my fork: https://github.com/diegocr/exif-js/commit/248cd8139a7a2f722d053890083e156e031d2f56\n@jseidelin Feel free to cherry-pick that commit if you want, or ping me if you want me to send a PR with this and all other of my changes.\n. Hi, I was wondering what's the point behind your request, to enhance performance?\nIf so, i think it should be pretty fast already, for example i use exif.js to deal with RAW photos, and to process ~40MB of data it takes a few milliseconds.\nI.e:\n19:36:39.896 exif: timer started index.js:109\n19:36:39.897 Got file of length 37835264 exif.js:386:20\n19:36:39.900 exif: 3.92ms index.js:118\n19:36:39.900 EXIF Object { Compression: 6, ImageDescription: \"SONY DSC\", Make: \"SONY \", Model: \"DSLR-A900\", Orientation: 1, XResolution: 350, YResolution: 350, ResolutionUnit: 2, Software: \"DSLR-A900 v1.00\", DateTime: \"2008:12:22 16:37:58\", 30 more\u2026 } 1 index.js:121:4\n(Firefox 41 on a core i7 laptop)\nHence, i'm against such change unless it's provided through an opt-in option :-)\n. #79, #97, or #101 seems a better approach to fix the same issue :). > Is is somehow possible to read exif data synchronously?\nYes, deal with the <img/>s data yourself and then call EXIF.readFromBinaryFile()\n. fwiw, i get correct Orientation values for these images (3 and 8, respectively)\nI.e:\n19:55:43.625 exif: timer started index.js:109\n19:55:43.625 Got file of length 3943134 exif.js:386:20\n19:55:43.625 225 exif.js:415:24\n19:55:43.625 Found 0xFFE1 marker exif.js:421:28\n19:55:43.626 Unknown tag: 0xc4a5 exif.js:558:1\n19:55:43.627 exif: 2.48ms index.js:118\n19:55:43.627 EXIF Object { ImageDescription: \"Exif_JPEG_PICTURE                  \u2026\", Make: \"RICOH      \", Model: \"G700 SE        \", Orientation: 8, XResolution: 72, YResolution: 72, ResolutionUnit: 2, Software: \"G700SE Firmware\", DateTime: \"2013:06:13 14:33:48\", YCbCrPositioning: 2, 56 more\u2026 } 8\nPerhaps you're using an older exif.js, dunno.\n. Actually you can just load the blob:uri using responseType = 'arraybuffer' and it'll be even faster since no FileReader needs to be used afterwards.\nI made that in my fork: https://github.com/diegocr/exif-js/commit/248cd8139a7a2f722d053890083e156e031d2f56\n@jseidelin Feel free to cherry-pick that commit if you want, or ping me if you want me to send a PR with this and all other of my changes.\n. Hi, I was wondering what's the point behind your request, to enhance performance?\nIf so, i think it should be pretty fast already, for example i use exif.js to deal with RAW photos, and to process ~40MB of data it takes a few milliseconds.\nI.e:\n19:36:39.896 exif: timer started index.js:109\n19:36:39.897 Got file of length 37835264 exif.js:386:20\n19:36:39.900 exif: 3.92ms index.js:118\n19:36:39.900 EXIF Object { Compression: 6, ImageDescription: \"SONY DSC\", Make: \"SONY \", Model: \"DSLR-A900\", Orientation: 1, XResolution: 350, YResolution: 350, ResolutionUnit: 2, Software: \"DSLR-A900 v1.00\", DateTime: \"2008:12:22 16:37:58\", 30 more\u2026 } 1 index.js:121:4\n(Firefox 41 on a core i7 laptop)\nHence, i'm against such change unless it's provided through an opt-in option :-)\n. #79, #97, or #101 seems a better approach to fix the same issue :). ",
    "Stephenradams": "I found using EXIF.getAllTags() returned everything I needed so I could add it to an object. \n. I found using EXIF.getAllTags() returned everything I needed so I could add it to an object. \n. ",
    "Masterdanielsan": "can anyone explain to me how they accomplished this?  I'm having a hell of a time reading in EXIF for hundreds of files when it starts asynchronously handling everything.\n. can anyone explain to me how they accomplished this?  I'm having a hell of a time reading in EXIF for hundreds of files when it starts asynchronously handling everything.\n. ",
    "jabranr": "A simple git tag 1.0.0 -m 'v1.0.0' should resolve this.\n. A simple git tag 1.0.0 -m 'v1.0.0' should resolve this.\n. ",
    "mikesherov": ":+1:\n. :+1:\n. ",
    "martinkunkel": "doesn't that apply to the way the exif data is stored in the jpg rather than the output format? i agree, \"1/1000\" is probably better. it's still a string though.\n\nAm 29.03.2015 um 14:37 schrieb Joe Weiss notifications@github.com:\nThanks @martinkunkel, though wouldn't the value be \"1/1000\" rather than \"1/1000s\".\nThe exif spec says that exposure time should be a rational, rather than a string.\n\u2014\nReply to this email directly or view it on GitHub.\n. doesn't that apply to the way the exif data is stored in the jpg rather than the output format? i agree, \"1/1000\" is probably better. it's still a string though.\nAm 29.03.2015 um 14:37 schrieb Joe Weiss notifications@github.com:\nThanks @martinkunkel, though wouldn't the value be \"1/1000\" rather than \"1/1000s\".\nThe exif spec says that exposure time should be a rational, rather than a string.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "lucoel": "thank you, works great!. thank you, works great!. ",
    "chadjaros": "This is a real thing. We're seeing 9 and 7 instead of 8 and 6 respectively, off of images taken from an iPad. http://exif-viewer.com/ shows the true Orientation values\n. This is a real thing. We're seeing 9 and 7 instead of 8 and 6 respectively, off of images taken from an iPad. http://exif-viewer.com/ shows the true Orientation values\n. ",
    "NJseo": "Any idea on how to grab Grab Image Comments From ImageMagick\nphp\n$image = new Imagick();\n$image-newImage(300, 200, \"black\");\n\n$image->setImageProperty('Exif:Make', 'Imagick');\necho $image->getImageProperty('Exif:Make');\n?>\n. Use a cache buster. Append a time variable to the end of the source.\nimage.jpg?tm=time();\n. 5 different php image data writing scripts, and EXITJS, reads nothing. Take a photo with a camera and it works like a charm.\nThe kicker is that I see functions in the JS that read IPTC data, but there is no documentation on how to use it. I see functions that say read from binary, but no example on its usage. I've set comments with php and read them with other online image data viewers and it comes through. I find instructions two days after starting, and the read from binary section suggests I go over to Mozilla. I don't doubt that your script can do all I need it too. You've already put in the hard work to get it where it is, an updated demo example with all the various uses would go a long way to increase the user benefit of your software.\n. Any idea on how to grab Grab Image Comments From ImageMagick\nphp\n$image = new Imagick();\n$image-newImage(300, 200, \"black\");\n\n$image->setImageProperty('Exif:Make', 'Imagick');\necho $image->getImageProperty('Exif:Make');\n?>\n. Use a cache buster. Append a time variable to the end of the source.\nimage.jpg?tm=time();\n. 5 different php image data writing scripts, and EXITJS, reads nothing. Take a photo with a camera and it works like a charm.\nThe kicker is that I see functions in the JS that read IPTC data, but there is no documentation on how to use it. I see functions that say read from binary, but no example on its usage. I've set comments with php and read them with other online image data viewers and it comes through. I find instructions two days after starting, and the read from binary section suggests I go over to Mozilla. I don't doubt that your script can do all I need it too. You've already put in the hard work to get it where it is, an updated demo example with all the various uses would go a long way to increase the user benefit of your software.\n. ",
    "wiese": "Duplicate of #50 . Duplicate of #50 . Related to #50 . Duplicate of #89 . Duplicate of #50 . Duplicate of #50 . Related to #50 . Duplicate of #89 . ",
    "mmichelli": "You are totally correct, I thought the size of the files was slowing down my project, and this was the only solution. After more investigation, exif-js is not slow at all. Thanks for the good response. \n. You are totally correct, I thought the size of the files was slowing down my project, and this was the only solution. After more investigation, exif-js is not slow at all. Thanks for the good response. \n. ",
    "cfjedimaster": "Try using NATIVE_URI for your destination value.\n. Yeah, that would help. Still seems like the code itself should have a way to handle this though.\n. Try using NATIVE_URI for your destination value.\n. Yeah, that would help. Still seems like the code itself should have a way to handle this though.\n. ",
    "ravi-nextbit": "There should still be a way from the library to force a reload, because using a cache buster will disable all caching. So +1 for this feature. \nI solved this issue by removing the img tag and adding a new one, this allows you to use browser caching while still forcing this library to reload.\n. There should still be a way from the library to force a reload, because using a cache buster will disable all caching. So +1 for this feature. \nI solved this issue by removing the img tag and adding a new one, this allows you to use browser caching while still forcing this library to reload.\n. ",
    "liangmicha": "I solved the issue by setting exifdata to null on the img tag before the EXIF.getData\n```\n      var imgTag = $('.thumbnail > img')[0];\n      imgTag.exifdata = null;\n  EXIF.getData(imgTag, function() {\n    var allMetaData = EXIF.getAllTags(this);\n    console.log(allMetaData);\n  });\n\n```\nNo need to remove and re-add the img tag, or cache busting.. I solved the issue by setting exifdata to null on the img tag before the EXIF.getData\n```\n      var imgTag = $('.thumbnail > img')[0];\n      imgTag.exifdata = null;\n  EXIF.getData(imgTag, function() {\n    var allMetaData = EXIF.getAllTags(this);\n    console.log(allMetaData);\n  });\n\n```\nNo need to remove and re-add the img tag, or cache busting.. ",
    "ZaneCEO": "Some formal documentation would be very useful indeed\n. I found a very good visual explanation here: https://beradrian.wordpress.com/2008/11/14/rotate-exif-images/\nStill: if would be nice to have constants :-)\n. Some formal documentation would be very useful indeed\n. I found a very good visual explanation here: https://beradrian.wordpress.com/2008/11/14/rotate-exif-images/\nStill: if would be nice to have constants :-)\n. ",
    "axelson": "For linkage the PR is #57 \nI really wish more open source projects focused on documentation\n. +1\n. For linkage the PR is #57 \nI really wish more open source projects focused on documentation\n. +1\n. ",
    "mkyral": ":+1: \n. :+1: \n. ",
    "onzag": "+1\n. +1\n. ",
    "grekko": "Is there any author left working on this project?\n. Is there any author left working on this project?\n. ",
    "anthu": "As far as I can see the author deleted his account on GitHub.\n. As far as I can see the author deleted his account on GitHub.\n. ",
    "xuechaow": "+1 Here. Cannot find a good react native exif parser.. +1 Here. Cannot find a good react native exif parser.. ",
    "ivanmayes": "+1\n. +1\n. ",
    "codeandcats": "_bump\n. Hey @bartvanderwal, yes sorry I should have looked closer at this commit. Indeed the file should either be called index.d.ts _or there should be a \"types\" or \"typings\" property in the package.json that points to the .d.ts file.\nA consumer should not have to use /// <reference> to access a module's types when using the above method, simply requiring the module should be enough.\nMore on publishing typings.\n. _bump\n. Hey @bartvanderwal, yes sorry I should have looked closer at this commit. Indeed the file should either be called index.d.ts _or there should be a \"types\" or \"typings\" property in the package.json that points to the .d.ts file.\nA consumer should not have to use /// <reference> to access a module's types when using the above method, simply requiring the module should be enough.\nMore on publishing typings.\n. ",
    "sj00": "I have similar issue for images with 'Resolution unit: 2'\nExample image: http://68.media.tumblr.com/eb2eb9bf530f14bee20625d983073289/tumblr_ogydlmOGnA1qlcz08o1_75sq.jpg\nStack Trace: \nUncaught RangeError: Offset is outside the bounds of the DataView\n    at DataView.getUint8 (<anonymous>)\n    at getStringFromDB (exif.js:740)\n    at findXMPinJPEG (exif.js:862)\n    at handleBinaryFile (exif.js:372)\n    at FileReader.fileReader.onload (exif.js:412). I have similar issue for images with 'Resolution unit: 2'\nExample image: http://68.media.tumblr.com/eb2eb9bf530f14bee20625d983073289/tumblr_ogydlmOGnA1qlcz08o1_75sq.jpg\nStack Trace: \nUncaught RangeError: Offset is outside the bounds of the DataView\n    at DataView.getUint8 (<anonymous>)\n    at getStringFromDB (exif.js:740)\n    at findXMPinJPEG (exif.js:862)\n    at handleBinaryFile (exif.js:372)\n    at FileReader.fileReader.onload (exif.js:412). ",
    "thynson": "@sj00 I successfully parsed your image with latest EXIF in node 7.8.0. However it still crash for this image\nStackTrace:\nRangeError: Offset is outside the bounds of the DataView\n    at DataView.getUint8 (<anonymous>)\n    at readTagValue (/Users/lanxingcan/Workspace/vote/node_modules/exif-js/exif.js:593:40)\n    at readTags (/Users/lanxingcan/Workspace/vote/node_modules/exif-js/exif.js:570:25)\n    at readEXIFData (/Users/lanxingcan/Workspace/vote/node_modules/exif-js/exif.js:820:23)\n    at findEXIFinJPEG (/Users/lanxingcan/Workspace/vote/node_modules/exif-js/exif.js:447:24)\n    at Function.EXIF.readFromBinaryFile (/Users/lanxingcan/Workspace/vote/node_modules/exif-js/exif.js:1004:16)\n    at repl:1:6\n    at ContextifyScript.Script.runInThisContext (vm.js:23:33)\n    at REPLServer.defaultEval (repl.js:339:29)\n    at bound (domain.js:280:14). @sj00 I successfully parsed your image with latest EXIF in node 7.8.0. However it still crash for this image\nStackTrace:\nRangeError: Offset is outside the bounds of the DataView\n    at DataView.getUint8 (<anonymous>)\n    at readTagValue (/Users/lanxingcan/Workspace/vote/node_modules/exif-js/exif.js:593:40)\n    at readTags (/Users/lanxingcan/Workspace/vote/node_modules/exif-js/exif.js:570:25)\n    at readEXIFData (/Users/lanxingcan/Workspace/vote/node_modules/exif-js/exif.js:820:23)\n    at findEXIFinJPEG (/Users/lanxingcan/Workspace/vote/node_modules/exif-js/exif.js:447:24)\n    at Function.EXIF.readFromBinaryFile (/Users/lanxingcan/Workspace/vote/node_modules/exif-js/exif.js:1004:16)\n    at repl:1:6\n    at ContextifyScript.Script.runInThisContext (vm.js:23:33)\n    at REPLServer.defaultEval (repl.js:339:29)\n    at bound (domain.js:280:14). ",
    "maikusch": "Same problem here. Does anybody knows how to get fixed that for the moment?\nI get this error on image-upload. The error occurs, but the image regardless is uploaded.\n . Same problem here. Does anybody knows how to get fixed that for the moment?\nI get this error on image-upload. The error occurs, but the image regardless is uploaded.\n . ",
    "bspitzack-imvu": "This is a minimal but needed update if running in strict mode as I am\n. This is a minimal but needed update if running in strict mode as I am\n. ",
    "ghost": "I think you could use simply by EXIF.getAllIptcTags(img);\nMy example in Javascript:\nfunction getExif() {\nvar img1 = document.getElementById(\"test1\");\n\nEXIF.getData(img1, function() {\n    var allMetaData = EXIF.getAllTags(this);\n    var allIptcData = EXIF.getAllIptcTags(img1);\n\n    console.log(allMetaData);\n    console.log(allIptcData);\n\n\n});\n\n}. It actually makes such an impact in my project that I can't even use exif.js. (Well, I can now after reading the fix here).. I think you could use simply by EXIF.getAllIptcTags(img);\nMy example in Javascript:\nfunction getExif() {\nvar img1 = document.getElementById(\"test1\");\n\nEXIF.getData(img1, function() {\n    var allMetaData = EXIF.getAllTags(this);\n    var allIptcData = EXIF.getAllIptcTags(img1);\n\n    console.log(allMetaData);\n    console.log(allIptcData);\n\n\n});\n\n}. It actually makes such an impact in my project that I can't even use exif.js. (Well, I can now after reading the fix here).. ",
    "frontHu": "i met the same issue.In Production Server, the exif-js can't work, but in Development can work successful. i met the same issue.In Production Server, the exif-js can't work, but in Development can work successful. ",
    "haggholm": "I suspect this may also be what\u2019s currently breaking exif-normalizer, which in our application never resolves the promise to transform an image.. I suspect this may also be what\u2019s currently breaking exif-normalizer, which in our application never resolves the promise to transform an image.. ",
    "CezaryDanielNowak": "Just one undefined variable left - n in;\nfor (n = start; n < start+length; n++) {. Just one undefined variable left - n in;\nfor (n = start; n < start+length; n++) {. ",
    "jmesserli": "Also closes #83 . Also closes #83 . ",
    "dan-lee": "This is an absolute show stopper, how can this bug still be in the latest version?\nIt should be merged immediately! It took me forever to find this problem. This is an absolute show stopper, how can this bug still be in the latest version?\nIt should be merged immediately! It took me forever to find this problem. ",
    "jywarren": "Hi, any updates on merging this fix? Would be much appreciated!. What version does this happen on? I got the latest npm, v2.2.1 from https://www.npmjs.com/package/exif-js -- and saw that issue. I used an older version and it didn't occur. . Hi, any updates on merging this fix? Would be much appreciated!. What version does this happen on? I got the latest npm, v2.2.1 from https://www.npmjs.com/package/exif-js -- and saw that issue. I used an older version and it didn't occur. . ",
    "pbwei": "http://code.ciaoca.com/javascript/exif-js/demo/js/exif.min.js\nthis is ok . \u5bf9 \u6211\u4e5f\u9047\u5230 \u8fd9\u4e2a\u95ee\u9898\u3002\u3002 \u4e0d\u77e5\u9053 demo\u600e\u4e48\u8dd1\u8d77\u6765\u7684. @bartvanderwal  exif.js minify use  use strict\nfunction getStringFromDB(buffer, start, length) {\nvar outstr = \"\";\nfor (n = start; n < start+length; n++) {\noutstr += String.fromCharCode(buffer.getUint8(n));\n}\nreturn outstr;\n}\nn is undefind. http://code.ciaoca.com/javascript/exif-js/demo/js/exif.min.js\nthis is ok . \u5bf9 \u6211\u4e5f\u9047\u5230 \u8fd9\u4e2a\u95ee\u9898\u3002\u3002 \u4e0d\u77e5\u9053 demo\u600e\u4e48\u8dd1\u8d77\u6765\u7684. @bartvanderwal  exif.js minify use  use strict\nfunction getStringFromDB(buffer, start, length) {\nvar outstr = \"\";\nfor (n = start; n < start+length; n++) {\noutstr += String.fromCharCode(buffer.getUint8(n));\n}\nreturn outstr;\n}\nn is undefind. ",
    "charlex": "I'm seeing this as well in the xml2Object function. It seems that something like @benjaminbillet's fix should be in the distro.\n```\n    function xml2Object(xml) {\n        try {\n            var obj = {};\n            if (xml.children.length > 0) {\n              for (var i = 0; i < xml.children.length; i++) {\n                var item = xml.children.item(i);\n                var attributes = item.attributes;\n                for(var idx in attributes) {\n                    var itemAtt = attributes[idx];\n                    var dataKey = itemAtt.nodeName;\n                    var dataValue = itemAtt.nodeValue;\n                if(dataKey !== undefined) {\n                    obj[dataKey] = dataValue;\n                }\n            }\n            var nodeName = item.nodeName;\n\n            if (typeof (obj[nodeName]) == \"undefined\") {\n              obj[nodeName] = xml2json(item);\n            } else {\n              if (typeof (obj[nodeName].push) == \"undefined\") {\n                var old = obj[nodeName];\n\n                obj[nodeName] = [];\n                obj[nodeName].push(old);\n              }\n              obj[nodeName].push(xml2json(item));\n            }\n          }\n        } else {\n          obj = xml.textContent;\n        }\n        return obj;\n      } catch (e) {\n          console.log(e.message);\n      }\n}\n\n```. I'm seeing this as well in the xml2Object function. It seems that something like @benjaminbillet's fix should be in the distro.\n```\n    function xml2Object(xml) {\n        try {\n            var obj = {};\n            if (xml.children.length > 0) {\n              for (var i = 0; i < xml.children.length; i++) {\n                var item = xml.children.item(i);\n                var attributes = item.attributes;\n                for(var idx in attributes) {\n                    var itemAtt = attributes[idx];\n                    var dataKey = itemAtt.nodeName;\n                    var dataValue = itemAtt.nodeValue;\n                if(dataKey !== undefined) {\n                    obj[dataKey] = dataValue;\n                }\n            }\n            var nodeName = item.nodeName;\n\n            if (typeof (obj[nodeName]) == \"undefined\") {\n              obj[nodeName] = xml2json(item);\n            } else {\n              if (typeof (obj[nodeName].push) == \"undefined\") {\n                var old = obj[nodeName];\n\n                obj[nodeName] = [];\n                obj[nodeName].push(old);\n              }\n              obj[nodeName].push(xml2json(item));\n            }\n          }\n        } else {\n          obj = xml.textContent;\n        }\n        return obj;\n      } catch (e) {\n          console.log(e.message);\n      }\n}\n\n```. ",
    "LukePettway": "Thanks for this! I was banging my head into my keyboard until I found your solution here. I hope this gets resolved soon. . Thanks for this! I was banging my head into my keyboard until I found your solution here. I hope this gets resolved soon. . ",
    "khkrustev": "Hello,\nWe have a similar issue. When using this image https://drive.google.com/file/d/0BzWzsJnWxQkAQ25pd0RIcHFwMWM/view we get the error that was mentioned above:\n\nGetting a syntax error in line 883\nfindXMPinJPEG(file)\nvar domDocument = dom.parseFromString( xmpString, 'text/xml' );\n\nThis error occurs in IE11, while the functionality works fine in Chrome.\nWhen I debug in IE11 and skip the following code by setting manually the offset to a value higher than length\n```\n858 while (offset < (length - 4)) {\n```\neverything works just fine.\nCould you at least explain what the code in the while loop does, so if it is not useful for our scenario we can just comment it out. Thanks.. Hello,\nWe have a similar issue. When using this image https://drive.google.com/file/d/0BzWzsJnWxQkAQ25pd0RIcHFwMWM/view we get the error that was mentioned above:\n\nGetting a syntax error in line 883\nfindXMPinJPEG(file)\nvar domDocument = dom.parseFromString( xmpString, 'text/xml' );\n\nThis error occurs in IE11, while the functionality works fine in Chrome.\nWhen I debug in IE11 and skip the following code by setting manually the offset to a value higher than length\n```\n858 while (offset < (length - 4)) {\n```\neverything works just fine.\nCould you at least explain what the code in the while loop does, so if it is not useful for our scenario we can just comment it out. Thanks.. ",
    "crastyle": "@bartvanderwal he said, he love you all guys. @bartvanderwal he said, he love you all guys. ",
    "arcanis": "Ping @bartvanderwal ?. Ping @bartvanderwal ?. ",
    "trumbitta": "I'm trying to use it with Safari / Ionic and I can confirm the headache is a real.. I'm trying to use it with Safari / Ionic and I can confirm the headache is a real.. ",
    "isherwood": "Duplicate: https://github.com/exif-js/exif-js/issues/84\nI added this function to the beginning of the file, just inside the closure:\n```\n    function xml2json(xml) {\n      var json = {};\n  if (xml.nodeType == 1) { // element node\n    if (xml.attributes.length > 0) {\n      json['@attributes'] = {};\n      for (var j = 0; j < xml.attributes.length; j++) {\n        var attribute = xml.attributes.item(j);\n        json['@attributes'][attribute.nodeName] = attribute.nodeValue;\n      }\n    }\n  } else if (xml.nodeType == 3) { // text node\n    return xml.nodeValue;\n  }\n\n  // deal with children\n  if (xml.hasChildNodes()) {\n    for(var i = 0; i < xml.childNodes.length; i++) {\n      var child = xml.childNodes.item(i);\n      var nodeName = child.nodeName;\n      if (json[nodeName] == null) {\n        json[nodeName] = xml2json(child);\n      } else {\n        if (json[nodeName].push == null) {\n          var old = json[nodeName];\n          json[nodeName] = [];\n          json[nodeName].push(old);\n        }\n        json[nodeName].push(xml2json(child));\n      }\n    }\n  }\n\n  return json;\n}\n\n```\nI imagine you could also include it as a separate file.. My app quit working silently. This apparently fixed it. I'm not sure what changed as I haven't updated the plugin since I created the app. \nAnyway, thanks. . You need to learn to parse an object and output the data as you like. That's outside the scope of this plugin. Here's an example of something I'm doing to put the data into a table-like structure. You could also use table markup.\n```\n// EXPOSURE\n// Get the aperture  and shutter values from the data object\nvar apertureRaw = EXIF.getTag(this, 'FNumber');\nvar shutterRaw = EXIF.getTag(this, 'ExposureTime');\n// Format aperture value as an f/ number and add it to my data object\ncbExif.aperture = 'f/' + apertureRaw.numerator / apertureRaw.denominator; \n// Format shutter value as a fraction and add it to my data object\ncbExif.shutter = shutterRaw.numerator + '/' + shutterRaw.denominator;\n// Append it to the display container with a label\n$('#cb-popup-box .cb-popup-exif').append('Exposure: ' + cbExif.shutter \n    + ' sec @ ' + cbExif.aperture + '');\n// ISO\n// Get the ISO value from the data object\nvar isoRaw = EXIF.getTag(this, 'ISOSpeedRatings');\n// Add it to my data object\ncbExif.iso = isoRaw;\n// Append it to the display container with a label\n$('#cb-popup-box .cb-popup-exif').append('ISO: ' + cbExif.iso + '');\n```. I don't recall what prompted me to do it, but I added these functions to the start of the exif.js script file to do that. \n```\n    function xml2json(xml) {\n      var json = {};\n  if (xml.nodeType == 1) { // element node\n    if (xml.attributes.length > 0) {\n      json['@attributes'] = {};\n      for (var j = 0; j < xml.attributes.length; j++) {\n        var attribute = xml.attributes.item(j);\n        json['@attributes'][attribute.nodeName] = attribute.nodeValue;\n      }\n    }\n  } else if (xml.nodeType == 3) { // text node\n    return xml.nodeValue;\n  }\n\n  // deal with children\n  if (xml.hasChildNodes()) {\n    for(var i = 0; i < xml.childNodes.length; i++) {\n      var child = xml.childNodes.item(i);\n      var nodeName = child.nodeName;\n      if (json[nodeName] == null) {\n        json[nodeName] = xml2json(child);\n      } else {\n        if (json[nodeName].push == null) {\n          var old = json[nodeName];\n          json[nodeName] = [];\n          json[nodeName].push(old);\n        }\n        json[nodeName].push(xml2json(child));\n      }\n    }\n  }\n\n  return json;\n}\n\n```. Duplicate: https://github.com/exif-js/exif-js/issues/84\nI added this function to the beginning of the file, just inside the closure:\n```\n    function xml2json(xml) {\n      var json = {};\n  if (xml.nodeType == 1) { // element node\n    if (xml.attributes.length > 0) {\n      json['@attributes'] = {};\n      for (var j = 0; j < xml.attributes.length; j++) {\n        var attribute = xml.attributes.item(j);\n        json['@attributes'][attribute.nodeName] = attribute.nodeValue;\n      }\n    }\n  } else if (xml.nodeType == 3) { // text node\n    return xml.nodeValue;\n  }\n\n  // deal with children\n  if (xml.hasChildNodes()) {\n    for(var i = 0; i < xml.childNodes.length; i++) {\n      var child = xml.childNodes.item(i);\n      var nodeName = child.nodeName;\n      if (json[nodeName] == null) {\n        json[nodeName] = xml2json(child);\n      } else {\n        if (json[nodeName].push == null) {\n          var old = json[nodeName];\n          json[nodeName] = [];\n          json[nodeName].push(old);\n        }\n        json[nodeName].push(xml2json(child));\n      }\n    }\n  }\n\n  return json;\n}\n\n```\nI imagine you could also include it as a separate file.. My app quit working silently. This apparently fixed it. I'm not sure what changed as I haven't updated the plugin since I created the app. \nAnyway, thanks. . You need to learn to parse an object and output the data as you like. That's outside the scope of this plugin. Here's an example of something I'm doing to put the data into a table-like structure. You could also use table markup.\n```\n// EXPOSURE\n// Get the aperture  and shutter values from the data object\nvar apertureRaw = EXIF.getTag(this, 'FNumber');\nvar shutterRaw = EXIF.getTag(this, 'ExposureTime');\n// Format aperture value as an f/ number and add it to my data object\ncbExif.aperture = 'f/' + apertureRaw.numerator / apertureRaw.denominator; \n// Format shutter value as a fraction and add it to my data object\ncbExif.shutter = shutterRaw.numerator + '/' + shutterRaw.denominator;\n// Append it to the display container with a label\n$('#cb-popup-box .cb-popup-exif').append('Exposure: ' + cbExif.shutter \n    + ' sec @ ' + cbExif.aperture + '');\n// ISO\n// Get the ISO value from the data object\nvar isoRaw = EXIF.getTag(this, 'ISOSpeedRatings');\n// Add it to my data object\ncbExif.iso = isoRaw;\n// Append it to the display container with a label\n$('#cb-popup-box .cb-popup-exif').append('ISO: ' + cbExif.iso + '');\n```. I don't recall what prompted me to do it, but I added these functions to the start of the exif.js script file to do that. \n```\n    function xml2json(xml) {\n      var json = {};\n  if (xml.nodeType == 1) { // element node\n    if (xml.attributes.length > 0) {\n      json['@attributes'] = {};\n      for (var j = 0; j < xml.attributes.length; j++) {\n        var attribute = xml.attributes.item(j);\n        json['@attributes'][attribute.nodeName] = attribute.nodeValue;\n      }\n    }\n  } else if (xml.nodeType == 3) { // text node\n    return xml.nodeValue;\n  }\n\n  // deal with children\n  if (xml.hasChildNodes()) {\n    for(var i = 0; i < xml.childNodes.length; i++) {\n      var child = xml.childNodes.item(i);\n      var nodeName = child.nodeName;\n      if (json[nodeName] == null) {\n        json[nodeName] = xml2json(child);\n      } else {\n        if (json[nodeName].push == null) {\n          var old = json[nodeName];\n          json[nodeName] = [];\n          json[nodeName].push(old);\n        }\n        json[nodeName].push(xml2json(child));\n      }\n    }\n  }\n\n  return json;\n}\n\n```. ",
    "burgalon": "Can confirm that there's an issue with Safari on 2.2.1 but working good 2.1.1. Can confirm that there's an issue with Safari on 2.2.1 but working good 2.1.1. ",
    "hashplus": "101  @thatandyrose @burgalon . #101  @thatandyrose @burgalon .",
    "rohitrameshrao": "I have the same problem. Anything I can do to make it work for .tif/.tiff?. I have the same problem. Anything I can do to make it work for .tif/.tiff?. ",
    "terryoy": "Seriously this bug impacts a lot. Seriously this bug impacts a lot. ",
    "fozzle": "This has been a known issue for over 2 months now, with multiple PRs to fix. Not sure where the maintainer is?. This has been a known issue for over 2 months now, with multiple PRs to fix. Not sure where the maintainer is?. ",
    "designstuhl": "Nice suggestion. I've been looking for ways to beat Chrome's aggressive caching when using exif.js as well. \nTwo problems though:\n1. If you're going to add parameters to the end of the src string from S3 it already has a ton of params added so your code would need to add \"&cb=\"+new Date().getTime(). This also leads to the question, what if you're not loading images from S3? You need to be able to detect if this is the first param or the last param in the image src. Not impossible, just thought I should point that out.\n\nThis won't work for S3 Images. If you add a parameter to the end of the src string it returns 403 Forbidden. . I was just able to fix my issue with caching images and not being able to retrieve the EXIF data. Rather than salting the image URL with a timestamp I am able to disable the cache on the request to the img.src in the getImageData function. \n\nTry this:\n...\nhttp.open(\"GET\", img.src, true);\nhttp.responseType = \"arraybuffer\";\nhttp.setRequestHeader(\"Cache-Control\", \"no-cache\") // Add this line\nhttp.send(null);\n...\nThis will prevent Chrome from using the cached version of the image asset when performing the request and force the request to send the CORS headers again.. Nice suggestion. I've been looking for ways to beat Chrome's aggressive caching when using exif.js as well. \nTwo problems though:\n1. If you're going to add parameters to the end of the src string from S3 it already has a ton of params added so your code would need to add \"&cb=\"+new Date().getTime(). This also leads to the question, what if you're not loading images from S3? You need to be able to detect if this is the first param or the last param in the image src. Not impossible, just thought I should point that out.\n\nThis won't work for S3 Images. If you add a parameter to the end of the src string it returns 403 Forbidden. . I was just able to fix my issue with caching images and not being able to retrieve the EXIF data. Rather than salting the image URL with a timestamp I am able to disable the cache on the request to the img.src in the getImageData function. \n\nTry this:\n...\nhttp.open(\"GET\", img.src, true);\nhttp.responseType = \"arraybuffer\";\nhttp.setRequestHeader(\"Cache-Control\", \"no-cache\") // Add this line\nhttp.send(null);\n...\nThis will prevent Chrome from using the cached version of the image asset when performing the request and force the request to send the CORS headers again.. ",
    "Ellf": "@peterlitvak's code worked for me - thank you. I tried using the cache-control as an alternative but this seemed to cause a problem with it working on Firefox. The timestamp worked with Chrome, Safari and Firefox. . @peterlitvak's code worked for me - thank you. I tried using the cache-control as an alternative but this seemed to cause a problem with it working on Firefox. The timestamp worked with Chrome, Safari and Firefox. . ",
    "xavierbriand": "To add a bit more detail here, operator precedence is the problem:\n&& evaluate before || so, if the left side of || is true, the result will always be true (the right side is still evaluated first).\nRight test is:\njavascript\n(self.Image && img instanceof self.Image || self.HTMLImageElement && img instanceof self.HTMLImageElement) && !img.complete\nYou can make it more straightforward to read by adding a couple of parenthesis (as does this pull request):\njavascript\n((self.Image && img instanceof self.Image) || (self.HTMLImageElement && img instanceof self.HTMLImageElement)) && !img.complete. To add a bit more detail here, operator precedence is the problem:\n&& evaluate before || so, if the left side of || is true, the result will always be true (the right side is still evaluated first).\nRight test is:\njavascript\n(self.Image && img instanceof self.Image || self.HTMLImageElement && img instanceof self.HTMLImageElement) && !img.complete\nYou can make it more straightforward to read by adding a couple of parenthesis (as does this pull request):\njavascript\n((self.Image && img instanceof self.Image) || (self.HTMLImageElement && img instanceof self.HTMLImageElement)) && !img.complete. ",
    "YevheniiKravchenko": "Closing this PR. Anyway it was fix for forked repo, which I spontaneously posted as a PR to your repo. \nBut in general I suggest to break so long conditions to smaller ones to make code more readable. Closing this PR. Anyway it was fix for forked repo, which I spontaneously posted as a PR to your repo. \nBut in general I suggest to break so long conditions to smaller ones to make code more readable. ",
    "tonioloewald": "I was just about to report this, so good job!\nIt could probably be replaced by simpler code:\nif (img.complete === false) { return false; }\nsince I believe complete will be undefined for a file.. Actually the performance hit is less significant than I thought because the big hit is the http request that pulls the file a second time (sigh).. I was just about to report this, so good job!\nIt could probably be replaced by simpler code:\nif (img.complete === false) { return false; }\nsince I believe complete will be undefined for a file.. Actually the performance hit is less significant than I thought because the big hit is the http request that pulls the file a second time (sigh).. ",
    "mezykr": "\ud83d\udc4d \nIs it going to be merged ?. \ud83d\udc4d \nIs it going to be merged ?. ",
    "jejacks0n": "Yeah, also seeing this -- using 2.1.1 as a solution.. Yeah, also seeing this -- using 2.1.1 as a solution.. ",
    "artfree": "Exif-js was working perfectly in my app until just recently.  Exif.getData returns a 'false' value and never enters the function.  Is this issue still open?  I'm not following the solution spoken of above.  Any guidance here most appreciated.. Ignore previous post.  Added the extra ( ) as suggested above.  Works fine.  One other thing I found is that there's a test for the presence of Extensible Metadata Platform (XMP).  This takes a VERY long time to execute.  Can it be commented out safely?  I did so, and execution time went back to the way it was in a prior version.  I'm only testing for orientation, though.. Exif-js was working perfectly in my app until just recently.  Exif.getData returns a 'false' value and never enters the function.  Is this issue still open?  I'm not following the solution spoken of above.  Any guidance here most appreciated.. Ignore previous post.  Added the extra ( ) as suggested above.  Works fine.  One other thing I found is that there's a test for the presence of Extensible Metadata Platform (XMP).  This takes a VERY long time to execute.  Can it be commented out safely?  I did so, and execution time went back to the way it was in a prior version.  I'm only testing for orientation, though.. ",
    "johnwest80": "I'm seeing references to 2.2.1, but the latest release shows 2.2.0.  What am I missing?. I'm seeing references to 2.2.1, but the latest release shows 2.2.0.  What am I missing?. ",
    "OMaiZaregoto": "@tonioloewald \nThank you very much!\nUr advice does really help on my project about an APP.\nIn my point of view, the performance hit is much more enlarged in a small APP than a laotop.\nI use it to solve the orientation issue in Hybrid APP which using HTML input(type=\"file\") to select photo from users' mobilephone.\nThanks Indeed.. @tonioloewald \nThank you very much!\nUr advice does really help on my project about an APP.\nIn my point of view, the performance hit is much more enlarged in a small APP than a laotop.\nI use it to solve the orientation issue in Hybrid APP which using HTML input(type=\"file\") to select photo from users' mobilephone.\nThanks Indeed.. ",
    "MrGoodBye": "use the 2.1.0 can resolve this problem.. use the 2.1.0 can resolve this problem.. ",
    "DzTheRage": "Here is the solution that worked for me:\nYou can simply use ifstatements in the .getData function around your variables to not allow the undefined to run in the EXIF.JS library. Note this code is usually written in the script on your page if you are following the examples on EXIF.JS Github.\nEXIF.getData(img, function() {\n                var model = EXIF.getTag(this, \"Model\");\n                if (model) {\n                  var modelDataSpan = document.getElementById('model-'+id);\n                  modelDataSpan.innerHTML = ${model};\n                }. Here is the solution that worked for me:\nYou can simply use ifstatements in the .getData function around your variables to not allow the undefined to run in the EXIF.JS library. Note this code is usually written in the script on your page if you are following the examples on EXIF.JS Github.\nEXIF.getData(img, function() {\n                var model = EXIF.getTag(this, \"Model\");\n                if (model) {\n                  var modelDataSpan = document.getElementById('model-'+id);\n                  modelDataSpan.innerHTML = ${model};\n                }. ",
    "PetrykowskiM": "@bartvanderwal could you have a look at it?. @bartvanderwal could you have a look at it?. "
}