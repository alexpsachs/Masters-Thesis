{
    "bartaz": "Thanks man, what a shame! ;)\n. Thanks! Good to have native speakers taking care of the language :)\n. I have such feature on my TODO list for impress.js but with a little bit different approach.\nThe solution proposed in this commit is not acceptable for me at this point, so I close the pull request.\nI've commented on your code to help you find a better way.\nAnyway, thanks for your interest in making impress.js even more impressive.\nLet me know if you have some other features (or feature requests).\n. I really have 'mobile support' on my TODO list for impress.js, but it's much more than just adding touch event handlers.\nFirst of the way presentation is displayed on mobile screen needs to be fixed - correct screen/viewport size, preventing zooming and scrolling, etc.\nOther thing is the performance of animations. There is a lot of CSS transforms running there, even Chrome on desktop sometimes barely handles it. So I really expect that it will not run smoothly on mobile devices (even iOS).\nI'd like to try it, but it's not a top priority for me right now. I think I'll start with forcing mobile to get 'fallback' mode do presentation steps are shown in linear, scrollable way.\n. True. I don't have one, but iPad 2 may be a great device to play such presentation.\nI already had some questions about mobile and I really understand them. Link to impress.js flies around twitter, lots of people use twitter on mobile, so I have hundreds of page views from iPhones, iPads and Android stuff.\nAnd all they see is a broken page, as they browser says it supports CSS 3D, so no fallback is triggered.\nIt seems that I'll have to think about mobile sooner than I expected. It's really very early release with minimum functionality. Wanted to put this out and gather some feedback like that.\n. It's really getting somewhere.\nThe window scroll hack I used for preventing focus on desktop really messes things up on iPod iPhone - hiding address bar and not allowing to show it again (sometimes).\nAnd there are some issues with positioning on my iPod Touch (5.0.1).\nThe presentation just killed the whole browser and restarted iPod. Really. Maybe some scroll/prevent loop.\n. I've made a quick check with borrowed iPad 1 and it fails with JavaScript error. It's on iOS 4.3.5 and it seems to fail on dataList API access. So it seems that it was added in iOS 5.\nSo basically (not to reimplement dataList - and possibly other missing things) I'd focus on supporting iOS 5 browser.\n. Basic touch and mobile support (iPad and Blackberry Playbook) added in 0.3.\n. impress.js just started as an experiment and my personal tool for creating presentations and I really wasn't expecting all the buzz around it. So at this point it's kind of authors responsibility to build the presentation content and styles in HTML+CSS.\nAnyway, it's very true that it's a little bit painful and requires quite a lot of time to create such a presentation now. Regular web development tools such as Web Inspector in Chrome (or Firebug in Firefox) are helpful but it's hard to call it 'editor'.\nAnd it is true that more and more people are asking for edit tool.\nMy answer at this point would be that I understand the need - even myself, as I'm probably the one that is using it the most right now ;) but I don't really have plans (not enough free time) to build such a tool.\n. Hey guys. That's great that you have such enthusiasm to build authoring tool.\nJust few things to keep in mind.\nFirst of all, impress.js is just a library that takes handles positioning and transitions between the slides. The markup is just HTML (with some predefined structure) and the styles are pure CSS, they are not connected to impress.js in any way. As I see it now, everyone who uses impress.js just copies style.css from demo. It shouldn't happen, CSS should be prepared for a presentation to suit the content. So it will be a great challenge to create authoring tool that will handle creation of HTML content and custom CSS styling.\nSecond thing. It's a very early release. It doesn't have any number, but it's like 0.1 alpha codename \"not finished yet\", you know ;) I don't know if it will happen, but there may be some significant changes (for example to HTML structure), and probably some public JavaScript API will be available at some point (to allow triggering transitions to chosen slides).\nKeep that in mind, please, and watch for the changes in repo.\nI will probably start giving some version numbers soon, so you will know with which version you are working, etc.\nKeep me posted if there is anything you need in terms of understanding how impress.js works or in terms of stuff you'd need in API.\n. So it seems quite close to my \"vision\" of edit tool for impress.js, nice :)\nYou will probably need some API method to move the \"camera\", right now it only automatically positions itself to show specific presentation step in the center of the screen with correct scale.\n. I'm closing this issue, as it doesn't affect my codebase at this moment.\nBut feel free to use it as a forum for authoring discussion ;)\n. Guys,\nI created new issue about impress.js API for authoring #88. If you have any suggestions about what may be useful to have there, please join the discussion there.\n. Let's keep it open to encourage discussion.\n. You may like this:\nhttp://hsivaram.com/tech/2012/03/15/preview-impressionist-a-visual-editor-for-impress-js/\n. I'm too lazy to pull and check ;)\n@naugtur Can you host it somewhere? Creating a gh-pages branch should be enough for a static demo.\n. @naugtur That's an interesting UI concept. Not very intuitive at the beginning (clickinig on letters and dragging), but quite simple. But it will get a little bit compicated if you add positioning on Z and 3D rotations\n. Another possibility mentioned by @lunemec in #148\n\nI got bored one afternoon so I created a little app that should allow users without HTML/CSS knowledge to use impress.js just by simply creating slides and assigning coordinates to them, check it out\n:)\nany new ideas are welcome\nhttp://nacek.tk/impress/\n. @tantaman nice! and surprisingly similar to http://hsivaramx.github.com/Impressionist/ by @hsivaramx ;)\n\nMaybe you guys should join your attempts?\n. @volca looks nice, too bad it's paid ;)\n. @tantaman I'm quite surprised you haven't seen it before as both strut and impressionist have very similar UI :) \n. True.\nIt's probably something that can be easily fixed in demo content (on the first slide).\nBut it's quite common nowadays that presentations are published online after talk, so having a 'hint' option in the tool may be helful.\nI'll see what I can do :)\n. Hmmm.. off topic a bit.\nI'm not familiar with the idea of 'infinite canvas' comics and I've just skimmed through the article you mentioned.\nFor me it seems that it can already be possible with impress.js (to some extend).\nSo to answer you question, there is a potential there and it would be nice if I see it as an application of impress.js, but I don't have that direction in mind right now.\n. I just released a fix for that.\nHint message appear at the first slide if user doesn't start presentation after 5s.\n. If I understand you well, the functionality described here is far from what impress.js is meant to be.\nIt's basically a tool that allows you to position HTML elements (rotate, scale, etc) and animate between them. And it's purely authors responsibility to create styles and define positions, rotations, scales for all the elements.\nBuilding an algorithm that guesses how presentation should look based on structure of the document is something really different. \n. OK. It makes much more sense to me if we simplify problem to something like: give the presentation some 'default' layout (positions, scales, rotations), so all data- attributes on the step elements are optional.\nI was thinking about something like that already (right now default is x=0, y=0, z=0, rotate=0, scale=1), but I don't think I will go with anything more complex than making all the slides horizontally one next to another by default.\n. impress.js is just about placement and transitions during presentation. Style is only in CSS and I kind of expect should be rewritten to anyone's needs - we don't want to end up with all impress.js presentatioins looking the same, don't we?\nSo basically nothing limit presentation author from providing print styles for their talk with media=print so they will be applied by a browser just as any other print styles for websites.\n. It's getting more and more complicated :)\n\"Defaults configurable through a JSON structure, in addition to the data- attributes\"? :)\n\"Defaults\" shoudn't be configurable. If you configure it, it's not default anymore ;)\nJSON in addition to data attributes? I've used data attributes to keep configuration in HTML mark-up and avoid adding separate configuration. Of course it is possible to support both - configuration in HTML and/or in JSON.\nStill in my opinion you are thinking about another level of abstraction on top of impress.js.\n. Idea is interesting, but totally outside of the scope for impress.js\nFirst of all, it wont be easy to create an algorithm that will turn any HTML structure into interesting layout. There are so many variables - position in 3d, rotation, scale...\nSecondly, nested sections (or nested steps) are not supported and wont be in nearest future. Right now every step is positioned relatively to the center of the \"canvas\", that's why it's easy for impress to know how to 'undo' the positioning and scale and show the element in the center. If you start to nest the step element they will be positioned relatively to their parent step element, making the whole thing much more complicated.\nAnd last but not least. I don't want every impress.js presentation to look the same. And positioning algorithm will make all impress.js users lazy - I'll just stick to the default. That's why I don't want to provide default stylesheet. I want impress.js users to be creative. Layout and style of the presentation should depend only on how it was designed. It should reflect the content, the story of the presentation. Not the artificial structure of the document.\nThat said, I don't want to discourage you. Go, create a tool that will do it and export the impress-friendly file. I will be very interested in seeing the result.\n. I understand. I used to teach at university and I'm pretty sure I wouldn't use tool like impress.js to create my presentations there.\nIs it really worth leaving good ol' slide-based presentation tools that are actually usable for impress.js effects? ;)\n. Guys, you may find the code mentioned in #75 interesting.\nThis guy created nested steps and generates some default positions for them (at least that's how I understand his code and comment).\n. @shama impressive features you have in jmpress out there :)\nAnyway, as I've mentioned a couple of times already, templating/layout mechanism is not likely to get implemented into impress.js. \nSo if anyone is still interested, feel free to migrate to jmpress. It already is pretty flexible and extensible. It seems like these guys have much more free time than I do :)\nGood work @shama and @sokra!\n. I also see a need for such a feature.\nIt's not implemented yet as I am wavering between having it as a additional class or (as in your solution) as yet another data attribute.\nIt is also connected to another the feature I need - having a possibility of displaying steps in a different order that in markup (and being get to a single step more that one time - without going back and forward).\nSo basically yes, the excluding will be included at some point, I'm just not sure yet how it should be done.\n. You haven't missed it. It's very early release. I have anchors support on my TODO list, just haven't implemented them, yet.\n. From my personal experience I would suggest to start sketching parts of content on pieces of paper and arranging them to build overview. Then just move it into HTML, style with CSS and tweak positions, sizes, etc ;)\n. I haven't played much with history.pushState but as I understand it it requires server side to understand the urls pushed to history or bookmarked.\nLet's say you have a link to a slide (in history or bookmark) with a # ancor: presentation.example.com/#slide2 - browser asks for a correct page (.com) and JavaScript handles #.\nIf pushState is used to push presentation.example.com/slide2 into history, next time browser will ask server for /slide2 page that doesn't exist.\nAt least this is my understanding of pushState, but correct me if I'm wrong.\nNew history APIs are great, but they seem to require server side support and it may be a little overhead in case of one page presentation like this.\n. Like in this demo http://html5demos.com/history also hosted on github. If you keep http://html5demos.com/history/first in a history, bookmark it, or share you will get error, because it's not supported server-side.\n. @simukis \nyes, but is it really worth it? serving same file many times (copying and maintaining it if hosted as statics) just to use history API?\nHistory API is great, and should be used for dynamic websites and applications - for example twitter should forget about hashbangs. But for static one-pagers there is no use for that IMHO.\n. No worries. It's good to have such discussions. That's how you learn.\nJust to justify anchors more - this seem to be a 'standard' for presentation tools out there:\nhttp://html5slides.googlecode.com/svn/trunk/template/index.html\nhttp://lab.hakim.se/reveal-js\nhttp://leaverou.github.com/CSSS\n:)\n. Here you are. Anchors support just landed in repo.\nTo add a link to any of presentation steps just create a regular old-school hash based link with step id in it, like: <a href='#title'>Title</a> and JavaScript will do all the magic for you.\n. Closing as this is a duplicate of issue #9. \nWhen anchors support will be added it will make back/forward buttons to work.\n. CSS is not meant to be part of impress.js. The one included is a CSS for demo. I expect that anyone would write their own CSS, so you can use LESS, SCSS, Stylus or whatever you like :)\nSorry, but it's not an issue for me.\n. If I understand it well it's probably not that '3D support' does not work in Chrome for you but hardware acceleration that makes it run smoothly.\nI only check if browses says that it supports CSS 3D transforms. I don't know if there is any way of detecting if hardware acceleration works. It may be impossible from JavaScript.\nIt also affects Firefox on linux - 3D is not hardware accelerated there and animations are so slow that there is actually no animation at all...\nUnfortunately performance of such demos highly depends on hardware you have.\n. Well spotted! But it's not a bug, it's a feature ;)\nIf you check it in the source you will notice that it's moved back in 3d, so it's not only small but also far away. So during the presentation it 'moves' because of the perspective.\n. Thanks.\nBut I did it a little bit different - so it's shown only on the beginning of the presentation (and only when visitor doesn't start it for 5 seconds).\n. Awesome patch! I didn't know that pointers use pg up and pg down, thanks!\n. Thanks for suggestions but:\n1) I don't really understand what is a 'Dropped suffixes' commit all about. It doesn't seem to change anything.\n2) In 'improved keydown event' your change causes all the key event to be prevented, not only those listed in if statement. That may disable some default keyboard shortcuts.\n3) I don't see the point in renaming dummy container, any element name is allowed and this one is just a 'dummy' :) - I've taken this part from modernizr (they have a modernizr element there).\nAnd the typo - yes, I've spotted it too, and was wandering why it ever worked :)\nAnyway, I'm not able to merge your changes (it seems I already have some conflicting changes in repo).\nAnd I'm not interested in all your suggestions.\nBut thanks for the heads-up. Make sure you are up to date with changes in repo here and if you have any other suggestions or fixes don't hesitate to add them. Just one feature/fix per pull request please.\n. Now I see your point. From the minification and gzip these fixes really make sense.\nWow, I really rarely think about my code this way :) Last time was for 10k apart contest when every byte mattered :)\nAbout 2) you are right, I haven't noticed the return in default. I always try to return in the end of function only.\nAnyway, I'm not going to merge it, as it's already not up to date with my repo. But I'm amazed about your knowledge and care about minifying and gzipping code!\n. I don't have much problem with trailing spaces - they got minified anyway. And I always code with whitespace visible in editor so they help me visualize the blocks of code. Matter of taste I guess.\nWhen it comes to multiple var - I know Douglas would not approve that, but I like to keep them as it makes removing/reordering much easier. And smart minifier (Closure Compiler) handles it.\nSo, thanks for suggestion, but I don't see a need for that.\n. Yes, I've just noticed it when trying Closure Compiler on the code.\nFix will be in repo any moment.\n. Yep, I was just a little bit lazy :)\nIt really starts in the middle of the title slide (impress.js one) cause it has 0,0 coordinates and it moves to the first slide.\nTitle one was first I created and I positioned other relative to it :)\nMaking first slide 0,0 should fix the problem. Will look into it.\n. Closing, as a pull request is listed separately.\n. Hi,\nwhen it comes to sharing patches on github when you have a forked repo there is a 'Pull Request' feature (little button next on top, next to 'Fork' button and watchers counter).\nIt lets you define which commit (or commits) can be given as a patch to other repo and then it's much easier to merge the changes.\nAnyway. Your request is a feature that some others already asked for (issue #9) and I'll hopefully finish it some time soon.\nSo thanks for your interest, watch the repo for the changes.\nAnd if you have any other suggestions or updates don't hesitate to drop them here!\nCheers.\n. Yeap, that's how it works :)\nAnyway, as I mentioned in previous request this feature is already in development with a little bit different approach (with # based urls to enable history and back + forward buttons), so I don't really need this patch at this point.\nThanks, again :)\n. :)\nYes, I'm really aware of that. I'll do my best to put something into README file as soon as possible.\nIt's all caused by the fact that the project is really young (less than a week) and the interest is far more than I could ever expect ;)\nAnyway, just give me some time and it'll be there.\nThanks :)\n. It shouldn't be closed until it's done ;)\nAnyway, somebody already have done a tutorial, so you may find it useful ;)\nhttp://www.cubewebsites.com/blog/guides/how-to-use-impress-js/\n. Following \"use the source\" idea, I've added some informative comments to index.html source file [http://github.com/bartaz/impress.js/blob/master/index.html].\nI think it is sweet. Hopefully simple. But not short at all.\nAt this point I think it's enough. I'll of course keep it up to date and extend it when new features will show up.\nIf you have any comments on what is (or what is not) there, keep me posted.\n. I have no idea what it's about but you used the potential of impress.js quite nicely :)\nThanks! I'm glad you found it useful.\n. This is a very much requested feature. It was already reported in issue #9.\nAnd it's already fixed in repo!\nThanks!\n. You are right with uppercase, but all the browsers currently supported work fine without it, so it's not necessary at this point.\nThen it comes to the while loop and event bubbling it's not that simple.\nIn your proposal, when you only check event.target.tagName event handler will fail (not recognize that link was clicked) if a child node of link was clicked. Let's have a very basic (and not so uncommon) example of link with span (for example to create a button or something) <a href=\"...\"><span>text</span></a>. If you click on a link text you actually click the span element, not a, so event.target.tagName will equal to SPAN and you will never know that this span is a child of a link.\nSo with event delegation (adding only one handler on document element) it is necessary to check not only direct event target, but also its parent elements. And it has nothing to do with classic event bubbling.\n. That's a really cool idea!\nI guess that it would be useful to in impress.js to provide some public JavaScript API so developing such stuff wont require playing with hashes, just something as simple as impress.nextStep() \nThanks for that!\n. Closing this issue.\nThanks for comments, API work will be handled separately.\n. When it comes to Opera it should be possible to 'fallback' to 2D transforms, so the layout (in 2d) will be kept. Opera even supports CSS transitions, so animations may work, but without hardware acceleration they may not be smooth.\nFor IE8 and less. There is now way. Some hackery around CSS filters in IE may be used, but it's not worth in my opinion and I'm not going to do this.\nIE9 supports 2D transforms - so again layout in 2D may be kept, but without transitions (that come in IE10) there would be no animations.\n. On the other hand, besides of transforms and transitions I also use various JavaScript APIs (such as classList and dataset) that may not be supported by these browsers.\nOf course it can be patched or coded in different way, but I'd like to avoid unnecessary code.\n. Impress.js already has a basic fallback feature included - adds a impress-not-supported class on #impress element.\nThis should be enough to allow fallback messages, fallback styles and whatever somebody needs.\n. @blackjable \nThe whole idea of impress.js is based on CSS 3D transforms and transitions. For me it doesn't make sense to emulating them in non-supported browsers, as it will probably wont work at all, or work only in some very limited scope (only 2D or something).\nWell prepared presentation should provide non-animated version for non supporting browsers.\nWhen it comes to IE, latest IE10 seems to support all needed technologies (apart from some modern JavaScript APIs probably that can be easily polyfilled), so for IE support I would only try IE10.\nI don't think it is worth the effort trying to make impress.js work on other browsers. It's based on fresh browser features, and trying to simulate them in older browsers will only end up in troubles and not really well performant animations.\n. The idea is very interesting, but I not sure if it is flexible enough to be included in impress.js at this point.\nThe #overview step is not required to have it and, even if it is available, it may not be a real overview of the slides - it depends on where it was positioned by author. So this solution will require to make it authors responsibility to create #overview step and place it correctly. Trying to generate it automatically may be quite hard to implement.\nThe click events. It's really simple feature to add and to be honest I did have it in a \"prototype\" version of something that became impress.js. So it wouldn't be a problem to add it. One thing to note is that click event does not work on elements far in 3d (with negative position on z axis), so it will make some steps not accessible by clicking.\nSo my only concern is \"hardcoding\" the #overview into framework and requiring authors to place it properly.\n. As people are starting to do more and more with impress.js it seems that public API will be a good idea.\nTo keep the core codebase clean and minimal and allow to build \"plugins\" that will have access to methods like impress.next() impress.select( step ) etc.\nThis overview case is just another good example where it may be useful.\n. I've just added click event support for selecting steps.\n. API work will be handled as separate issue. I think this one can be closed.\n. Well spotted! There is similar bug with my \"have you noticed it's in 3D\" slide...\nIt seems to happen because to show the overview of all slides everything is scaled down and it somehow collides with the perspective.\nAs a workaround you would have to make the overview not by scaling, but by really zooming out - placing the overview slide very far on z axis by setting data-z=\"10000\" for example and keeping the scale small (not 10).\nAnd I'll have to think if there is any other way to prevent this weird effect.\n. I just found the way!\nFor scaled elements the perspective needs also to be scaled, so in this case for overview with scale of 10 the perspective is scaled to 10*1000px, and it looks exactly like it should.\nFix is already in the repo and available on my demo, so pull the changes and you are good to go!\n. I will not add clicking to advance, as I use impress for interactive presentations (where I click on buttons, etc).\nAPI work will be handled in another issue.\n. Pull request was not merged (it was not up to date), but the fix was applied.\nThanks!\n. ScrollDeck is based on totally different idea.\nIn impress.js presentation steps are positioned in 3d space, you can't just scroll between them.\nAnd it is meant as a tool for giving presentation, so clicking or using keyboard is just what you need.\n. Theoretically yes, it would be great (although impress.js was not meant for websites, and is not ready to be used on websites).\nBut expanding impress.js to support scrolling in some way (hard to imagine how one dimentional scroll should translate to moves in 3 dimentions) would probably require technically totally different approach. Basically impress.js presentation is based on number of steps (discreet) - scrolling requires continuity.\n. It's probably possible technically, if you define some scroll threshold (or something) - because still, scroll is continuous and steps are discreet.\nAnyway, I'm not going to implement it right now into impress.js. When the API will be ready it will be easier to add such features separately, so maybe someone that is getting this idea more than me will be able to create it :) \n. It's not a bug. It's because of it's positioning in 3D space and the perspective.\nAlready reported in #13\n. I agree that it may look weird. Especially until you realize why it floats around like that. And even then the element is so tiny and so far away, that the 3d effect of it's move is not really visible.\nYes, it would be an option to show it only when this step is selected. I'll consider this solution.\nThanks for your comment.\n. It seems that you are not up to date with my repo, so I cant merge automatically.\nBut thanks for addition, I'll try to merge it manually.\nBTW, can you point me to any resource that will help me understand what are typographically correct quotes (and other marks) in English?\nFor example ' is not fine for words like don't but are ok for 'slide-based'?\n. Wow. You didn't have to copy all this stuff.\nCouple of links would be fine ;)\nBut thanks, lots of stuff to read so I'll run through it when I have some time.\n. Nice idea, I was thinking about similar feature (having step 'duration' defined for each step, and a key that triggers auto-play).\nFew comments about this pull request (and why I'm not merging it).\n1) Please include only relevant changes. This one contains not only not necessary changes in files (messing up with whitespace) and debuging code (console.log),  but also irrelevant commits (code documentation).\n2) It's not really useful to use milliseconds for step durations. You never speak that fast ;) Seconds will be small enough and easier to understand by 'normal' users.\nSo thanks for your input, but I'm not merging your code at this moment. But I'll keep the issue open to remind me that it should be implemented :)\n. Wow, thanks for quick reaction :)\nI'm not saying that comments are bad :) They were just not relevant to this pull request. For sure I should add come comments to make it clear. It was just my own code that became surprisingly popular in very short time and I didn't have time to make it all documented :)\nNot sure if it's possible to merge it nicely at this point. As far as I understand how git (and github) works, I would have to merge all the commits anyway. Unless you do some dirty trick in your repo to squash all of them into one.\n. Issue was closed because I didn't want to merge this pull request into my code.\nAs the comments above say - I was thinking about adding such functionality in the future, but it didn't happen, yet.\nSo it's not in master, because it was never there, sorry :)\nAnd it's not likely to appear in any near future.\nIf you need it you can probably use the fork this pull request was sent from.\nIt can be also quite easily implemented now separately from impress.js using the API.\n. I'm not sure, but it may be caused by the fact, that both first and third slides have the same id its. Two elements in document can't have the same id.\n. You don't have to specify id at all, it will be gerenated as step-1, step-2 (look at second and third slide in demo presentation), etc.\nBut specifying your own is useful if you want to style each slide specifically in CSS.\n. I don't know what is your specific case, but you can use class instead of id to apply styles to many elements in HTML.\nOr in CSS you can specify styles for all ids that need it #id1, #id2 { /* common styles */ }.\nIf you have any live example of your presentation I can have a look at it and give you more feedback. Right now I don't really understand what you are trying to achieve.\n. Is everything OK with this presentation?\nEverything seems very small, and the fallback message is always visible (as a small text in the middle of presentation)\n. A life example would be helpful.\nI'm not sure if it's the same issue, but I also noticed that some of elements in 3d space that are 'far' from viewer (negative z) are not clickable in Chrome. May be a browser bug or something.\n. Closing, I don't think I can fix it on my side.\n. It depends not only on the positioning but also on the styles applied to step elements, so it's hard to say without seeing live example.\nBut from what I see in your example, both steps are quite close (2000 difference on x) and second one is much much bigger (scale 10), so it is quite likely that step 2 covers step one making it unclickable.\nYou would need to use some debugging tools like web inspector in chrome to see where the elements are - or give them some background/border in css just to see their exact positions and sizes.\n. Hi, it's a really nice idea, but a little too specific to be included in the framework, I think.\nWhile it might be useful for some people, most will probably find it totally useless.\nI was thinking about something more generic, that will also allow implementing the Pecha Kucha. I'd like to add some data-duration option to slides, so users will be able to specify for how many seconds each slide should be shown in \"auto-play\" mode. And then some key (for example your [P]) will start the auto-play mode.\nAnd basically by specifying data-duration as 20 seconds (and keeping number of steps as 20) you'll get a Pecha Kucha presentatioin.\nSo thanks very much for suggestion, I'll count it as a vote for auto-play and slide duration features, but I'm not going to pull your changes.\n. No, but as impress.js api is much more flexible at the moment it can be quite easily implemented separately from core code.\nThe most easy and dummy code would be to:\nsetInterval(function(){\n        impress().next()\n    }, 20000);\nTo go to next slide every 20 seconds.\n. By { css } you mean the data that describes position of the slide / canvas?\n. @richardhodgson I was thinking about using AMD when starting this project, but it seemed so simple that I thought it wont be needed. But as there seems to be a need for API I'll consider it again.\nI still don't want to require require to use API, so will probably expose it as global namespace instead (if define is not available), the way jQuery does it.\n. I don't really see the point of having more than one instance of impress object, it's really supposed to sit in the middle of viewport and simply run a presentation on keypresses.\nWhat would be the sense of having more impress in one document?\nI'd also like to avoid the necessity of having the 'initialization' code. That's why I tend to keep config in data- attributes, so the script can just be included, self execute, and that's it.\n. @richardhodgson Exactly. I'd like to keep this simplicity. Although I understand that when the number of possible options grows, it would be more 'natural' to set their values with JSON object passed to some initialization function than to define dozen of data- attributes on some DOM element.\nI'm thinking if it would be possible in any way to keep impress.js self-running by default, but being able to tell it not to run and wait for initialization from script...\n. @medikoo Global namespace/object for sure. Names \"impress\", but I'm still not sure about the case (yes, I know it seems to be a small problem to worry about). It won't be Impress cause it's not a constructor function (or maybe it should be?), IMPRESS namespace looks kind of weird, so maybe simple global object impress will be best choice.\nWhatever it would be, all the API functions will be exposed there.\n. Hi,\nI would like to move impress.js forward with small steps, so in here let's focus on providing simple public API to control presentation and events feature will be handled separately in #86. So please move any events discussion and suggestions there.\n. Talking about API.\nI've started to build something and made it available in api branch. Please have a look and let me know what you think.\nIt basically introduces global impress() \"factory\" function that initializes impress presentation and returns the API to control it. It may seem weird to make it a function instead of an object or namespace, but I'm planning to extend it and allow calling it with custom configuration object to override default settings.\nSo it doesn't initialize automatically anymore, you have to call:\nimpress();\nTo externally control the presentation use this function to get API object. Presentation wont get initialized more than once, don't worry:\njs\nimpress().selectNext();\nOr you can store api for later use\njs\nvar api = impress();\napi.select( document.getElementById(\"overview\") );\nCurrently available API functions:\n- select( element ) - selects given presentation step (only if given element is a presentation step)\n- selectNext() - selects next step\n- selectPrev() - selects previous step\n- isStep( element ) - checks if given element is a presentation step\nTry it out and let me know what you think about such approach. I'd like to push it into master as soon as possible.\n. I agree about the names (right now they are just copies of internal functions' names - that could be renamed too for clarity btw). And the additional input options for goto (number or id) are also part of my plan ;)\nWhen it comes to isStep it's used for example in click handler to find the closest step element of the target. It probably wont be needed widely, but I'd like to extract navigation handlers such as keyboard/mouse/touch out of the core, so finding step element may be useful. And having such function is safer than just checking the class name .step cause this way you are sure it's an element initialized as step by impress.\n. @medikoo and it would return the closest parent that is a step?\n. I updated the api branch. Following the suggestions now we have:\n- next()\n- prev()\n- goto( el ) - not accepting numbers or ids, yet\n- getStep( el ) - returning the parent step for any DOM element, not sure if the name is clear enough, but I'd like to avoid making it too long\nLet me know what you think. I kinda like how it ended up.\n. Basic API released in 0.3\nFor suggestions about event to be triggered by impress join issue #86\nFor suggestions about additional API methods for authoring tools join issue #88\n. I don't know where you test it (demo site doesn't have jQuery).\nAnyway, you need to pass argument to get function $(\"#bored\").get(0) or $(\"#bored\")[0] and it should work fine:\nimpress().goto( $(\"bored\")[0] );\nimpress().goto( document.getElementById('bored') );\n. The code actually works, but impress.js itself binds click event to step elements, so if you click the step impress goes to this step.\nSo basically your code first goes to 'title' step, but then immediately goes to 'bored' one.\nYou can just find the click event in impress.js and remove it. It starts around line 394.\n// delegated handler for clicking on step elements\ndocument.addEventListener(\"click\", function ( event ) {\n. yes, that's even simpler, just add stopPropagation in your handler\n$('#bored').bind('click', function(event) { \n    console.log('clicked');\n    impress().goto( document.getElementById('title') )\n    event.stopPropagation();\n})\n. If you have a list of steps you link to, you can simply use links with id:\n<a href=\"#title\">Title step</a>\nIt will change the url and impress will detect it and show given step. No additional JavaScript needed.\n. Can you try to reupload the image? Without it it's hard to say what is broken :)\n. It seems like it didn't rotate to correct position.\nI haven't seen such an issue before. On linux I use Chromium daily build (version 18) and Chrome (version 17).\nI will keep that in mind, but I'm not sure if I'll be able to reproduce it.\n. The only thing I can think of right now is: try to right-click on the \"have you noticed it's in 3D\" text and choose \"Inspect element\" (or anything similar in your language - should be the last one in menu) and send me a screen-shot of what will be shown (please make the inspector window big if possible, to make most of the document visible there).\n. Yes, everything seems fine with HTML code you pasted, to I'd also say it's a browser issue.\nThanks for heads up.\n. No problem with removed pull request. It was a bit messy already anyway ;)\nYou've made it much clearer now. But still there are some things that I'd do differently.\nYou may think that I'm damn picky ... and probably you're right. I am perfectionist, so (unfortunately) I expect some level of perfection from the code I accept ;) It's my own repo anyway :P\nFirst of all I wouldn't like to 'force' automatic slide changing whenever slide duration is defined. User should be able to 'pause' and to 'start' some kind of 'auto-play' mode (with a key).\nSecond thing - I don't really think that this running progress bar is needed. It seems to be saying \"read faster, time will be up very soon!\" ;)\nAnd there are still some tiny issues around implementation, that are not wrong, but could be made better (I can add some comments on the commit itself if you'd like to have my review).\nI'm really glad that you are working hard to make this feature into impress.js, thanks for that. But right now I'd like to focus more on writing documentation and defining API, so adding more features in the future will be easier.\nI'd like to include this feature into impress.js at some point. It is just not on my 'release plan' right now.\n. That's a responsibility of a speaker to keep his time.\nPersonally, I use a timer on my phone that simply shows me how time is left.\nAnyway, I don't have anything against timer and progress as some kind of extension to impress.js, but I don't see the place for it in the core functionality.\n. OK, it's not really scrolling but more a 'mouse wheel' support.\nIt seems nice, but I don't think it necessary and may be confusing. To be honest I'd probably expect mouse wheel to zoom in/out that to move next/prev.\nThere are also some not very nice coding practices used there (I've commented on the commit itself).\nSo I won't merge it at this point. But I'll keep that in mind.\nWhen the impress API will be ready, so that next, prev, etc methods will be available it would be possible to add such feature as optional 'plugin'.\nThanks!\n. Why should I merge it? ;)\nBTW, I'd be glad if you would be just a little bit more creative about using impress.js, not just editing text ;)\n. Hi,\nThanks for your message. I'm glad you found impress useful. It's a really good case to use it during screen cast, I haven't thought about that!\nWhen it comes to messages on GitHub you can send a message even if a user did't provide a public email.\nIt's available via messages in your GitHub inbox: https://github.com/inbox/new\nI don't blame you for not knowing it, I had a problem finding it even when I knew that such feature exists ;) But maybe you will find it useful next time.\nThanks again for you message. Hope you will find impress useful in future too.\n. Thanks! Looks really interesting.\nAnimations are not very smooth for me (probably because there a lots of images) but overall effect is really nice.\nFew things I've noticed:\n- the id attributes you use (that show up in url address) contain spaces - this is not valid for HTML, you should remove them or replace with - or _\n. Yep, something happens there.\nI will have a look if it's my my fault. Hopefully disabling double select will help.\n. But it doesn't happen (or is much harder to notice) in Safari or Firefox Aurora ...\n. Ok. That it wont be that easy to investigate.\nThere is one more suspect - there are actually two elements being transitioned at once (one for scaling and one for positioning and rotate) not only one. Maybe that's an issue for Chrome... But it also happens between slides with the same scale, so it may not be a good track to follow.\n. OK, that's damn weird.\nI've checked everything I could, numer of animated elements, timing functions of transitions... I timelined and profiled this damn thing only to see that - yes, there is a visible delay in the middle of transitions, without any possible cause.\nSo I started to remove things out to find that it was a hash change... Not a hash change event handler, but hash change itself... This tiny little unsuspicious line: \nwindow.location.hash = \"#/\" + el.id;\nIt seems that location change causes Chrome to hang out for a little while, and we were so unlucky to get this in the middle of transition.\nI've delayed the hash change with simple timeout, hope it helps 65c456c\nPlease re-check the demo, or update your code, and let me know if it works for you.\n. @laubsauger yes, that was a nasty bug I found few minutes after the push ;)\nHere is a commit with fix: 8cd464a but it's probably better to simply update to master.\n. Browser support is described in README file, with many details.\nIt's to long to read it shortly says \"iPad is currently not supported\".\nI know that it is Safari, and that it theoretically supports most of the stuff needed by impress.js (in iOS 5) but it is not well tested on iPad, there are no touch controls yet, etc.\nBut I can tell you in secret, that iPad will be supported in future. Hopefully quite soon. ;)\n. I already have it working on iPad locally. Code is not ready to be published yet, but I hope to get this thing out some time next week.\n. There is a very good reason.\nIf you change the hash in url (by hand, or by clicking back button) it will handle changing the slides. To it can't be removed.\nBut you may be right about select being called twice. I was thinking it will not be a problem, as the same styles will be just applied again and nothing should change, but it may affect animation in some way.\nThe fix for it would be quite simple. On the beginning of select function in should also be checked if selected element is already active, and if it is just return doing nothing.\nI'll try to fix this ASAP, but if you are quicker I'll be happy to merge pull request :)\n. Yes, I'd like to have a little bit more in the API, implemented in a little bit different way ;)\nFor API related discussion please join #39\n. Yes, that is also a possible solution, but I would not like to depend the navigation on hash changes.\nRight now it's quite easy to 'disable' (remove) hash changes without affecting other functionality. I'd like to keep it this way, so in future, with API, such additions (any type of navigation, history, etc) could be totally separate from impress.js core code. Like a plugins or something.\n. Deja vu.. I rejected such a feature once, already...\nIs it really that useful?\n. OK, makes sense.\nI'll merge it and maybe refactor later when API will be ready.\nThanks!\n. @fmate14 I don't think you'll 'manually' zoom during a presentation, so that's not really a big deal. Anyway in other software zooming is bound to some key+mousewheel combination not to mouse only\nBut @oskarkrawczyk has a very good point. I've learned it the hard way - while using touchpad during my presentation.\nSo, there are different use cases. When you are using a mouse it's probably OK as it is relatively hard to move a wheel by mistake. On a touchpad it's insane. On my machine almost 1/4 of touchpad is 'scroll-sensitive', so when I was playing with  my interactive slides it was damn easy it make a mistake.\nSo, sorry Lech @OpenGrid, nothing personal, but this will go out.\nI'll think about making it optional feature, or bring out some flexible api, so it would be easier to add such additional controls without touching impress core.\nThanks for feedback guys!\n. There is much more that could be added there... PgUp, PgDown, tab key...\nI don't want to make this little hint too long. Let them figure it out ;)\nAnd it will be all documented.\nBut thanks!\n. Thanks, that's exactly what I would do ;)\n. Interesting idea. I need to think about it.\nWhat worries me a bit is that the final effect may not be 'as designed' cause it will also depend on screen size and additional scaling will affect only the steps that are too big.\nBut I will think about it, thanks!\n. Yes, I'm just thinking if it wouldn't be better to scale whole presentation, so that the 'biggest' slide fits the screen.\nSo there will be no additional scaling between steps and the 'proportions' of the effects will be the same.\n. Interesing use case! Thanks! I'll add a link to a blog post, too.\n. Yes, right now it's all fixes size - in pixels.\nBut you can use browser zoom feature (Ctrl +, Ctrl -) to make presentation bigger/smaller.\nThere were already requests like this (see: #55, #59), so I'll try to find that would be the best solution.\n. Thanks!\n. Interesing idea, I'll think about it. It adds a little bit of non-linear complexity but as it's totally optional it will probably be just fine...\n. I wasn't able to merge your pull request at this point, so I have added it myself based on your code.\nIt should already be available on demo page.\nThanks!\n. This feature will be removed soon.\nBut if it comes back I'll keep it consistent.\n. Thanks! Just wanted to ask for it :)\n. And nice 'sub-step' feature, BTW ;)\n. Wow, well spotted! Thanks :)\n. Yes, that kind of functionality was already requested and I'm planning to add that in the future.\nI'm not sure at this point if elements to skip should be marked with additional class, or with another data- attribute.\nI also think that functionality of 'skipping' doesn't belong to select function, but more to selectNext and selectPrev functions.\nSo I'm not merging your pull request, but I'll keep it here open to remind me about this functionality.\nThanks!\n. Yes, you're right about data- for booleans. They seem to be overkill, when what you really need is a presence/absence of it.\nBut on the other hand using data- will make it more obvious that it's the part of impress.js \"API\".\nBeing really picky about semantics it kind of doesn't make sense to keep \"step\" class on such skipped elements - as they are not really steps anymore, right? :)\nYou are also right about duplication in selectNext/Prev functions. I'm thinking about joining them into one, as they share most of the functionality.\nBut still I think the skipping belongs there. It would work even without setting skipped element active. Basically while searching for next/prev element to show, those with skip class can be filtered out.\nEven better. They can be filtered out at the very beginning. We can remove them from steps array right after they are positioned. In this way you wont need to change anything in select functions.\nWow. Thanks for the discussion. We are getting closer to nice solution :)\n. True. I was thinking about such solution, too.\nIt would be a little bit 'hacky', but possible.\nFor example:\n``` html\n\n\n<!-- more steps here -->\n\n<div class=\"step\" id=\"last\" data-next=\"first\"></div>\n\n<!-- skip these decoration steps -->\n\n<div class=\"step\" id=\"decoration-1\"></div>\n<div class=\"step\" id=\"decoration-2\"></div>\n\n\n```\nSo there are different options. And that's why I'm not going to merge everything that seems useful, because I'd like to keep the core consistent and simple, as long as it's flexible enough to fit the needs.\n. Closing as duplicate of #7.\nWe have similar discussion there.\nThanks!\n. It is a cleaner solution, but still, not really necessary.\nUsing data-skip without any value seems to be a little bit hacky.\nAnyway, your branch seems not to be up to date with my code (I can't merge it automatically) and this commit is not clean at all. Just look at the diff. Every second line is red - it seems that you (or your editor) don't like trailing white-space ;)\n. If I had better solution, it would probably be already implemented ;)\nI am considering different options. I thinking about solution to more general problem - allowing to change the flow of the steps in flexible way: both changing the order of steps, and skipping them.\nFor example, in one of my presentations I had a flow of steps like that:\nstep-1 -> step-2 -> step-3 -> step-2 -> step-4 ...\nI know that it's a different problem, but it relates to this one. What is needed is probably separate layer of abstraction that will define the flow of presentation. And it seems that to make it fully flexible it would have to be separate from mark-up.\nAnyway, thanks for your suggestions. I hope that they will help me come up with some nice solution.\nAnd if yours works for you, just keep it. That's why it's open-source.\n. Wow.\nToo many features at once :)\nInteresting work with nested steps (there were some other guys asking about it in issue #9).\nAnd for the others, I'm not really sure how useful they are:\n- The phi/r coordinates - who will possibly use it? :) I think the whole x,y,z plus rotations around all axis are complicated enough for normal human being :)\n- These 'templates' ... the effects are indeed quite interesting but the whole thing is way to complicated. Effects like these (but quite simpler) can be easily achieved with CSS transforms based on active class on current step.\nBasically, the whole code got so complicated I can't understand most of it anymore :)\nThanks for your input. I want to keep impress.js as simple as possible. Your work is quite inspiring, so I may get back to it at some point and see if it fits to my vision of impress. But right now I'd like to focus on core functionality.\nThanks!\n. That's a feature I was thinking about too.\nBut there are things I still need to consider.\nAs you've noticed, the transition happens between the steps, but the duration is defined on single step element. So when there are different values for different steps, impress needs to know which one to apply. You solved it with forward/backward flag. But it's possible to navigate directly to any step of the presentation (they can be linked), so what should happen when the transition is happening between (for example) step-1 and step-4? Should value from step-1 be used (because it's \"forward\"), from step-4 (because it's the target) or maybe from step-3 (because that's the \"default\" step before 4th).\nI was considering the solution where data-transition-duration on the step element will define the duration of the transition to this step. So then transition duration on the step-4 is 1s it means that whenever we are selecting step-4 (and it doesn't matter which step is currently active) the transition will take 1s.\nThe other thing is, that I'd rather use seconds (not milliseconds) to define the duration - it's much more natural ;)\nAnd the last detail. As you probably noticed while messing with the code, there are actually two transitions happening - one on scale, and one on translate and rotation. And depending on the zoom one or another is delayed. When you change the duration of the transition, delay should be affected too. Right now the delay is hard coded. (Honestly, the delay should also depend on the zoom change between steps, but that's another story).\nSo basically, feature is interesting and will probably appear in impress at some point, but implemented a little bit different.\nThanks!\n. This is an interesting idea. Quite in line with what's being discussed in issue #39 about public API and events.\n@mmalecki is right that it would be much better to use standard event pattern. I also think that some of the events you used are not really useful (onReadStep, onPostProcessStep, onPostprocessTarget, ... do you have any use case for them)?\nAnyway, I'm not going to merge this pull request. If you have any suggestions about API methods or events that can be useful, please join the discussion in #39.\n. In the very beginning impress.js allowed do define scale separately for each axis. So you could have different scale on X with data-scale-x and different on Y with data-scale-y (same on z). Technically it was possible and easy to implement.\nBut the effect itself was so weird and unnatural that I removed it. It didn't make any sense from design point of view and could only make viewers sick (literally).\nTo be honest I think that using skew to change the elements and then 'un-skew' them when displaying will give even more weird results.\nIf it works for you, that's great. I simply don't see the point in including it in impress.js.\nThanks!\n. Thanks. That's an interesting addition.\nThere are different needs for various keyboard shortcuts, so when I'll be done with public API such additions will be possible without the need to change the core impress code.\nI'll leave this request open and get back to it when API will be ready.\n. Now this can be easily achieved by using impress().goto( ... ) function from API in keyboard event handler.\n. I don't know what CSS text-shadow has to do with impress. And, BTW, it's impress not jmpress. Jmpress is somewhere else on github\n. Thanks. I was thinking about adding it, too.\n. Quite interesting idea, but it's not the direction I'd like impress.js to go at this point.\nBut thanks for suggestion. I may look into it later when some more important core features are ready.\nAnyway, I think that guys discussing in thread #7 may be interested.\n. Nice!\nI'm quite surprised, cause it's going more or less into direction I'd like it to go :)\nAnd I totally agree with your second comment. I don't see the point in exposing the configuration object. Options passed to init function is enough I think.\nAnyway, there are quite a lot of changes inside. Validation (all these Number() and isNaN calls look scary ;), changed structure of internal objects. I haven't looked through all the code, yet.\nThe changes are quite big, so I wouldn't like to merge them into master directly.\nCould you please switch the pull request and make in against integration branch, so we will have separate place to work on it and maybe clean it up before pushing into core code.\nThanks!\n. Yes it seems interesting and probably useful, but is more complicated than just showing and editing the notes.\nYou probably would like to see these notes during the presentation, but you don't want the audience to see them. So the presentation will have to be displayed (and synchronized) in two browser screens... It is possible, there are JS presentation frameworks that do this. But I don't want to extend impress.js with such a feature at this point.\n. I don't think I'm going to implement such a functionality into impress.js, but it can be achieved already.\nThe easiest way is to use address bar in your browser. There is a #/step-identifier in the URL. You can edit it entering id of any other slide and it will go there.\nYou can also build some king of navigation menu with links to all the slides. Links should be standard hash based links to element ids, for example\nhtml\n<a href=\"#title\">Title slide</a>\nClicking on such link will make a presentation move to this slide. So if you create a list with links to all the slides you will have the ability to navigate presentation.\nThere is also public JS API comming soon to impress.js code, so you will have a JS function to select any slide (but it is not implemented, yet).\n. I don't know what you really mean by including navigation menu in the impress.js core.\nIt's already possible (even without the API) to build such menu.\nAs in the example I have given above - if you create a link, with step's id in href, clicking on it will move the presentation to this element. So all you have to do is to create some navigation element with list of links to all the slides.\nAnd you can put it anywhere on the screen, you can toggle it with some keyboard short-cut. Or whatever you can do with CSS and JS.\nYou can see the example of http://www.alingham.com/ site that uses such navigation.\nI don't want to force any navigation type or behaviour for users. So this simple functionality is everything I think is needed in impress in this terms.\n. I haven't done any users research about it and I really don't think that you've done one, so it's probably just my point of view against yours ;)\nFor me impress.js is a presentation 'engine'. Presentation has it's flow - the order of steps. There is no need to navigate to random slides during a presentation.\nIf in the end of the presentation you'd like to have a simple way to go back to any slide (for example to show it again during Q&A) you have two options - make the last step an overview (like in impress.js demo) so you can click on any step to select it, or create a navigation (as discussed above).\nAutomatic navigation generation is not a necessary feature for impress.js. I don't want users to hide or disable it just because sometimes it is needed, when all you need to build it is a piece of additional HTML or (if you don't want to do it in HTML) a couple of JS lines:\n``` javascript\nvar links = \"\";\n[].forEach.call(document.querySelectorAll(\".step\"), function( el, idx ){\n    links += \"Step \" + idx + \"\";\n})\nlinks += \"\";\nvar nav = document.createElement(\"nav\");\nnav.innerHTML = links;\ndocument.body.appendChild(nav);\n```\nWith jQuery it would be even less code ;)\nAnd even with this simple piece of code it's already clear that it's not always obvious what should be in the links text - how should script know what is the title of the step?\nAnyway. I understand that you may have a different opinion on that, but I don't see this as a core feature of impress.js.\nAnd I made it open source simply to allow anyone add anything they want and find useful. But it doesn't mean I'll put every single feature into my code.\nFor me, less is more.\n. It is not ready yet, but yes, it is planned.\nAPI discussion takes place in issue #39.\n. I kind of try to avoid that. It's so 'powerpointish' ;)\nBut I understand that it's sometimes useful to reveal some additional information without the need to change to next step or slide.\nSo I'll think about that :)\n. Heh, I was actually thinking about such scripts, too. :)\nBecause I tend to build quite interactive presentations, so basic 'substep' revealed is not enough for me.\nThe <command> thing looks scary, and way to similar to inline callbacks such as onclick that are not a very good practice (and putting many code in them is ugly).\nThe <script> approach would be much better, but the script itself has to be treated as JavaScript not to be called by browser at once. But it's possible. I have an idea in my head how it can be done (a little bit of hackery with script type attribute), so keep an eye on that issue.\nBut I really can't promise if it will be solved any time soon.\n. It doesn't have much to do with substeps described here, but yes, such events may be useful.\nIt's partly discussed in issue about public API #9, but I think I'll probably develop it separately, to release simple API earlier.\n. I see your points guys I just want to make sure the solution is simple and possibly implemented outside of the core code. Cause let's be honest. Sub-steps have nothing to do with impress transitions. We simply want \"some other action\" to be triggered instead of impress().next() when arrow or space is pressed.\nSo this can be a modification of next() function or some other abstraction that checks for a presence of a substep and decides to show it or move to the next step. And personally I would prefer the second solution.\nBut of course I understand that from a users perspective it doesn't really matter - you just want any way to use substeps, possibly as simple as adding some sub-step class on elements.\n. @joefiorini I think that your idea can be implemented by adding arbitrary \"sub-overview\" steps in your presentation. As you can see in the demo source, the overview step is nothing more than empty div with specific position and scale to show all the steps on the screen. You can manually create such 'sub-overviews' as steps in your presentation. So you will at first show such 'sub-overview' than move to specific steps. If you want to move back to the 'sub-overview' just make a copy of it in HTML (with different id).\nHope it answers your question. \n. oh man, I know how much you want it :)\nIt's probably the most requested feature for impress.js.\nAnd I even have an idea how I'd like to have it implemented... if only I had time for that :)\n. Ok thanks.\nBut first one on the list? You wish! ;)\n. Thanks!\nI liked the .bind approach... maybe we could use a Function.bind polyfill for non-supporting browsers?\nI am thinking about some cleaning, too...\nI don't really like the impressEl variable. Will have to think for some other name for it. Maybe the canvas one should be renamed too, to make them both similar.\nI'd also like to simplify the validation. It looks like repeated code. Maybe it could be extracted as some validation function?\n. Impress.js is supported in browsers that support CSS 3D transforms. That includes Firefox 10 that is going to be released like tomorrow (or so).\nAs far as I understand your change (that for some reason affects every single line of JavaScript code - different indent settings?) you wanted to support browsers that have 2D transforms and animations.\nCorrect me if I'm wrong.\nI was also thinking about such 'fallback' to 2D for browsers such as Opera and Firefox < 10, but I'm not sure if it is worth it, as without hardware acceleration in 3D transforms the animations wont be really smooth, so overall experience will be quite poor.\nBut even if I'd do that, it's much simpler change than rewriting the whole code.\n. Yep.\nI can't merge it in this form. But I will have a look at your code if I'll try to create such fallback myself.\nThanks!\n. It shouldn't be a problem with HTML5 video.\nI haven't tried any \"HTML5 player\", but it was working fine for me with video added with HTML5 video tag:\nhtml\n<video src=\"http://video-js.zencoder.com/oceans-clip.mp4\"></video>\n. When it comes to flash video (like embedded youtube) I'm pretty sure there will be problems with transforming it in 3d.\n. I'm closing this issue.\nThen it comes to video - impress.js should work fine with HTML5 video.\nI'm not sure about some strange video players or flash based players (youtube). If it doesn't work with impress.js (flash is quite likely not to work as browser will not be able to transform it in 3d) it wont work and I can't do anything about it.\n. Yes, unfortunately the `active' class is assigned when the transition starts. So at this moment you would need to count the transition time to make animations on step in sync.\nThat's what I do in impress.js demo on the slide about \"positioning, rotating and scaling\" - all the transitions of text elements are based on the active class but delayed by 1.5 seconds.\nSo an event would be useful (or another class will need to be added after the transition).\n. Guys, you may want to have a look at dev branch where version 0.5 get's its shape.\nI introduced couple of events there - impress-init, impress-step-enter and impress-step-leave,\nThey are a regular DOM events, so you can handle them simply with addEventListener.\nIf anyone is able to play with it, let me know what you think. If there are some problems with it I'll be still be able to fix them before the release.\n. Yes, I was thinking about using more conventional names without separators, but impress-step-enter seems much easier to read than impressstepenter ;)\nBut your \"namespace\" proposal makes it look a little bit better. I'll think about that. Of course it's just artificial namespace, as DOM events don't use namespaces.\nAnd yes, I've chosen to use DOM events to keep simplicity - why should I reinvent the wheel? They work well, they keep the target, bubble up, etc.\n. The power of event delegation :)\n. Hmmm... I don't know why it is not closed yet.\n. Thanks for a suggestion.\nAdding it will be quite easy when public API will be released (quite soon), do it's not necessary to put it into the core code.\n. Actually it's already there ;)\n. Nice one, thanks!\n. Makes sense :)\nThanks for reading that carefully :)\n. Heh, you were just lucky to send your pull request just before I cheched my mail ;)\n. I haven't tried it but I really don't know why it should not work correctly.\nImpress.js has nothing to do with code highlighting - it just positions elements.\n. Thanks!\n. The easiest way to share some features would be to fork, create a branch with this feature and send pull request (it may sound hard if you are new to GitHub but try to find some help about pull requests and you'll be good to go).\nBasically you can just treat this impress.js issues as a impress.js-related message board to me. People send me messages, questions, etc here all the time.\nAnd don't worry, impress.js is not 'keeping me busy'. I'm just trying to maintain it and extend only as much as I want. So don't expect any bug surprises here ;)\nAnyway, if you are trying to do a lot with impress.js and you extend it in some ways, you should have a look at jmpress.js (jQuery port of impress.js) http://shama.github.com/jmpress.js/ as these guys probably implemented every feature imaginable ;) It seems really rich, flexible and extendible. \n. If you haven't noticed iPad (and Blackberry Playbook) are already supported. It's a little bit 'hardcoded' for iPad (meta viewport definition is set by impress.js script), but it works.\nWhen it comes to \"mobile devices\" it depends on what you mean.\niPhone - it should handle it, but the screen is small so the scale would need to be different - and there is no 'auto-scale' in impress.js (yet). I had enough problems to get it working on iPad.\nAndroid - it's rubbish. It says it supports CSS 3D transforms (in Honeycomb) but when I tried to run impress.js demo it was total mess. It got a little bit better on Android 4, but still not there (some positioning problems, maybe it could be worked out). But it worked pretty nice on Chrome for Android ;)\nIf you have more experience it mobile development and can work out issues impress.js has there I'll be glad to hear about it.\nAnd when it comes to future ... I don't want impress.js to be the only thing I do in my free time for the rest of my life ;)\nI'm hoping to build an API and callbacks/events into impress.js basically to help others building stuff on top of it without me ;)\nIt's really a personal experiment, it was never meant to be world wide project with lots of users and stuff. I don't have a release plan or anything. So, unfortunately, don't expect too much. I'm not even looking at impress.js related emails more than once a week ;)\nRight now you are just lucky, as I'm cleaning the issues list as we speak ;)\n. Thanks!\nI'm just about to release new code with API and touch support for Playbook and iPad. So it's a little bit in conflict with my changes.\nBTW, is there an easy way to plug an external display (like a projector) to Playbook?\n. I've seen a video of Playbook running impress.js made by Marius Gundersen (who was speaking at DevCon, if I'm not mistaken).\nI don't have the device, but I use virtual machine with their emulator for some tests. It was working out of the box, even without viewport fixed needed on iPad.\n. Thanks for the suggestion.\nTo be honest I don't think that impress.js demo bundled into a Playbook application would be \"an application\" - it really doesn't do anything, so there would be not much point into downloading it from the applications store.\nSo it probably wont get accepted anyway.\nBut thanks for the suggestion.\nAnyway, touch event's support for iPad and Playbook was added in release 0.3.\n. Thanks for the link.\nAs the list of example sites and presentations is quite long I don't want to keep it in README anymore. It was moved to wiki page (that should be editable for any github user), so feel free to add your site there.\n. Hard to say anything without live example to test with.\nSometimes I've seen similar problems (with disappearing elements) on nightly builds of Chromium, so I think it's probably a browser bug. CSS 3D transforms are still quite fresh functionality, so they may behave (and break) in unexpected ways.\n. I've had it on Linux, too.\nSo it seems to be Chromium Linux issue. May even be hardware related.\n. Ok, thanks for confirmation that it's a browser bug.\nCSS 3D are still an experimental feature, so such things will happen.\nI did my best to make it work as good as possible, and can't do anything to 'fix' this issue.\n. That's cool.\nBut it still would have to be wrapped in setTimeout (Chrome has jumpy animation when URL changes during it).\nI'm also a little bit concerned about browser support for pushState - it's said to be buggy in Safari (on desktop and iOS 4), so first I'd like to test it a little bit more.\n. OK, great.\nBut when it comes to delaying pushState I'm pretty sure it has similar impact on animation performance.\nWhen in Chrome without the delay you can notice a small 'jump' in the middle of slide transition (probably depends on hardware how noticable it is) both with location and history, when you wrap the url change in setTimeout, the jumpiness is gone.\nI know that this setTimeout workaround is kinda dirty, probably wrapping it in transitionEnd callback would be much more clear and understandable I just haven't done it yet (cause of course this event has different names in different browsers). \n. Damn, I can't automatically merge this pull request anymore.\nCan you update it (or create another one) on updated version of impress.js?\nI know I can simply change this one line myself, but I'd like to keep you as a contributor ;)\n. Sorry, too late ;) 45fcf19\nThanks anyway :)\n. That's interesting...\nI was concerned about browser support, but I've tested it in Chrome and Firefox (on Linux) and it seemed fine.\nHave you by any chance tested it in Safari? caniuse.com says that Safari support is buggy, so that may be it.\nI'll try to test it a little bit more today. But if it really doesn't work well in Safari, and would require the #/id workaround again, than I don't really see the point of using pushState. \nIf it doesn't on the Chrome animation issue, and it doesn't prevent default scrolling in Safari than changing location is just good enough.\n. OK. I'll check it later.\nThat's interesting, as already when step is selected window is scrolled back to 0,0 ... But I'll look into it. If there is an issue, I'll probably go back to location.hash version, as there wont be any added value of using pushState.\n. Unfortunately @sokra was right.\npushState seems buggy in webkit (Chrome, Safari). There are workarounds, but I don't see the point of using it with workarounds. On iPad it gets even worse.\nIf I have to use pushState exactly in the same way as location.href without any benefits, there is no sense in it.\nSo, it was a nice try, but probably it is simply too much for a simple hash changing.\nThanks guys for suggestions and helping out with this one.\n. Nothing to be sorry about - it was great to test pushState on real code and verify that impress may be not the best use for it ;)\n. Seems interesting, but I'm not sure if calculations of sx and sy make sense.\nYou are using body width/height and window width/height - and the dimensions of body element somehow depend on the dimensions of the window.\nI'll need to test if it works correctly.\n. Closing as it's already reported in #61\n. I don't know any \"HTML5-engines\" that do export to PDF to be honest. And I don't see the point.\nWhy placing it on slideshare when you can simply put it online as it is - as HTML?\nImpress.js has a fallback mode for browsers not supporting required features - that is a linear list of 'slides' one under another that can be scrolled as regular web page and I think it's enough.\n. Unfortunately in impress.js case it is not as simple as adding an extra stylesheet. It uses specific positioning for each step element and it can't be overridden by pdf stylesheet.\nStill, there is a 'linear' fallback mode for devices not supporting 3D transforms (or JavaScript) and this can be used for printing too. If you want some special print styles, just create them.\nImpress.js is just a script to position elements in 3D and transition between them - it's not going to do everything.\n. OK. So it seem that moving video element in the DOM 'breaks' autoplay.\nYour fix will not cause any problems, you basically have the canvas element in HTML already and script doesn't need to change anything.\nIt's a good workaround.\nBut I don't want to change it in impress.js code, as it probably wont cause problems other than this autoplay and I don't think it's worth complicating HTML for everybody just to get autoplay work for some rare occasions.\n. With new versions of impress.js you can start video when step is entered.\nVideo autoplay attribute still will not work, but you can use JavaScript to play video. Use impress:stepenter event on step with video, and call video.play() to start the video not only on first slide but on any in presentation. In similar way impress:stepleave can be used to pause video when step is left.\n. It will work with HTML5 video (the video.play()) I mentioned is HTML5 video element API.\nI don't know if YouTube has JavaScript API that allows to automatically play and pause the video.\n. It would be something like that:\nLet's assume HTML of the step looks something like that:\n<div id=\"video-step\" class=\"step\">\n    <video id=\"video\" src=\"...\" controls />\n</div>\nAnd the script:\nvar videoStep = document.getElementById(\"video-step\");\nvar video = document.getElementById(\"video\");\nvideoStep.addEventListener(\"impress:stepenter\", function() {\n    video.play();\n}, false);\nvideoStep.addEventListener(\"impress:stepleave\", function() {\n    video.pause();\n}, false);\nWe just get step and video elements by id and attach events to play/pause video when step is entered and left.\nI didn't check this example, but it should be something like that.\nI hope you get the idea.\n. Interesting use case, but I really don't think it needs to be a part of impress.js.\nIt's not a problem of impress.js that this device sends F5 key. Impress.js doesn't use this key at all, it's the browser that gets refreshed when it's clicked.\nAdditionally I'm thinking about moving all the key support out of impress.js core code to some kind of \"keyboard navigation plugin\", so it will be easier to change it without messing with impress.js itself.\nI think that if a code to ignore some keys is needed it can be simply added outside of impress.js code.\nI can expect that there are lots of different devices out there and lots of specific keycodes to support/ignore.\nI don't want impress.js to solve all the world's problems with presentations in the browser - I want it to serve it's simple purpose well :)\nSo thank's for the suggestion, but I'm not merging it into impress.js core.\n. Closing as duplicate of #86\n. Callbacks/events is what I'm willing to add in #86.\nI'm not willing to extend impress.js with too many features (like speaker notes), so this pull request it not merged.\nThanks for the suggestions\n. So if it's done I don't see like there is anything else for me to do.\nI'm not including notes feature in impress.js myself, but it's great that it could be done.\n. As @Jellyfrog mentioned it may be hard to build a list of the cases where we would like to disable keydown handler.\nKey bindings are already kind of removed out of core impress.js code and I'm willing to move them even to separate file to encourage people to use it as an optional plug-in (of sort) and to change it whey they need other keys or don't want some of them, or want to handle form elements.\nSo I'm not going to merge your code.\nI really hope that in future it will be 'easier' (or just more natural) to handle key bindings out of impress.js in any way user will want.\nRight now if anyone has issues with keybindings they can change them in the code. Or in the case described by you they can add a little piece of JavaScript even outside of impress.js code to prevent propagation of key events on form inputs, so impress.js will never know about them.\n. Thanks for the translation but I don't really see the point in having it in the main repository.\nIt is not likely that other translations will appear and it would be hard to keep them all up to date.\nSo thanks, but it's not going to be merged here.\n. Thanks for the link.\nAs the list of example sites and presentations is quite long I don't want to keep it in README anymore. It was moved to wiki page (that should be editable for any github user), so feel free to add your site there.\n. Thanks!\n. Impress.js is based on CSS (3D) transforms, so the functionality of rotations is based on how rotate transformation from CSS works.\nBasically when you specify data-rotate-x=\"90\" data-rotate-y=\"180\" data-rotate-z=\"270\" in impress.js HTML data it's translated into rotateX(90deg) rotateY(180deg) rotateZ(270deg) in CSS transform value. So the element is first rotated around X by 90deg, then around around Y by 180 and in the end around Z by 270. The order of rotations matters, because not only element is rotated by also its coordinate system (axes). That's how transforms work and it may be confusing when doing lots of rotations in 3D.\nFor you cube example only rotating around X by -90 deg should be enough to get be bottom of the cube.\n<div id=\"bottom\"\n    class=\"step slide\"\n    data-x=\"0\" data-y=\"500\" data-z=\"0\"\n    data-rotate-x=\"-90\" data-rotate-y=\"0\" data-rotate-z=\"0\">\n    <q>This one should <strong>not</strong> be the same as the <b>bottom</b></q>\n</div>\nBut I haven't tested it so I may be wrong.\nThe same applies to values of degrees. They are just translated form data HTML into CSS transforms. So when you have 360 degress and another element on 30deg is will do a big spin back.\nIf you want to still rotate only by 30 degrees forward you just add it to 360, so next one would be 390.\nHope it helps.\n. The order of data attributes in HTML does not matter (it can't because that how HTML works).\nSo data-rotate-x=\"90\" data-rotate-y=\"60\" data-rotate-z=\"0\" is exactly the same as data-rotate-y=\"60\" data-rotate-x=\"90\" data-rotate-z=\"0\" - in CSS it will always be rotateX(90deg) rotateY(60deg) rotateZ(0deg).\nThat's an assumption that impress.js does, sorry.\nIf you can provide some online example I'd be able to review and maybe help.\n. Yes, you understand it well.\nUnfortunately, because of this fixed x-y-z order used by impress.js the effect you are trying to get (nice animation between left and bottom) is not easy to get.\nIt would be quite easy if you could just do rotateY(270deg) rotateX(-90deg) in this order. But you can't in impress.js.\n(Maybe it would be worth to extend impress.js with such an option for advanced users).\nBut fortunately I was able to create the effect you wanted by changing the way cube faces are rotated.\nTo get nice animation between left and bottom, left face needs to be in the place where currently your front face is. So the rotation to bottom will only be around X. Of course the other faces need to be moved to other places (front to right, right to back, etc). But it doesn't matter from user's perspective, as the front one is correctly shown at the beginning.\nYou can see the demo of what I mean here: http://jsbin.com/ifayod/\n. @sokra heh, I'll probably just point people to use jmpress instead ;)\nI know that simplicity of impress.js has lot's of limitations but I kind of like it this way - less code means less bugs and maintenance. I don't have enough time to implement everything in impress.js, and it seems that you guys do, and it's cool.\nSo keep up the good work :)\n. The style file in the demo contain CSS reset, that removes style from lists.\nSo if you want bullet style on lists, you need to add it in your CSS.\nAnd you should use your own CSS. The one used in the demo contains styles tailored for demo presentation only. It's not a \"default stylesheet\" for impress.js presentations. So get rid of it and write your own ;)\n. If you add such style text will overflow out of the element but the slide dimensions are not changed (text gets out of the white box of slide). Impress.js positions the step in the middle of the element (the middle of the slide).\nIf you want to change the width of the element to contain whole text in one line you need to change it's width in CSS.\n. OK, on twitter I didn't understand that you are talking about a container.\nI haven't tested such use case yet, but in theory it should be possible.\nYou shouldn't touch any styles for #impress or .canvas elements - they are styled by impress.js itself (and their size is actually 0px/0px).\nBut you can put #impress div into some other container element and style it.\nFor example:\n```\n// HTML\n\n\n         ... steps here ...\n    \n\n// CSS\nimpress-wrapper {\nwidth: 900px;\nheight: 200px;\nborder: 2px solid black;\noverflow: hidden;\nposition: relative;\n\n}\n```\nImpress element will sit inside the wrapper and all the transitions will happen there. Make sure to use position: relative (to make impress.js positioning work correctly) and overflow: hidden (so everything outside the wrapper is not visible).\nThis seems to work.\nBut it's important to remember that impress.js as mainly a presentation tool was meant to be run in whole browser window, so currently in script it sets height: 100% and overflow: hidden on body element when it is initialized (by calling impress() function). So the scrollbar in the browser will disappear. If you are willing to use it as a banner on a website you will need to use additional script to revert these changes (take of height and overflow from body) or edit the impress.js script to remove this piece of code.\n. And you have probably all of this fixed in jmpress, aren't you @sokra ? :)\n. @sokra wow, it seems you know impress.js better than I do ;)\nIt's so demotivating ... it's like you've already done everything ;)\nBut back to the issue. Yes, using iframe will be the easiest solution. Or to use jmpress :)\n. It's a little bit off topic discussion (sorry @stunjiturner) :)\nIt's not only a issue of time. It's also different way of thinking. Cause even if I had time I wouldn't build such flexible, extendible and feature-rich solution like jmpress. Cause I like simple things ;)\nSo I'm kinda jealous a bit, but also very proud that my quite simple idea could grow up in other mind into jmpress.\nAnd keep stealing this issues ;) As you can see I drop most of the feature requests :)\n. You can wrap it in a tag, but (as mentioned in the comment and below) there are some issues that may show up (depending on your case).\nImpress.js will still take input from the keyboard, it will scroll the page up on every change of the step, etc.\nThe easiest way to do it would be to use an iframe sized to 900/300 and load it with a separate html file with impress.js presentation.\n. Sorry for not answering that long.\nI don't know if you still have that issue but at the moment I don't have time to support using impress.js in iframes - especially on iPads. It was not that easy to get it running on iPad without the iframe, so I'm not surprised that it has problems in iframe.\nThat's why I treat impress.js as a fullscreen presentation framework - not an animation tool for websites.\n. Impressive refactoring indeed.\nBut it's way to much for me to use it as it is. And I don't agree with all decisions you made there. I don't see allowing to use new impress() syntax as an improvement - there is no need for it at all (especially if you assume there can be only one impress object). Also removing memoization from prefixing function - it maybe saved you 2-3 lines of code, but it really is useful to save this results as most of the time the same properties are checked - transition transition-delay transform, etc. It doesn't make sense to check for them every time (I know it's just a short for loop).\nSo, thanks for your input. For sure I will be looking at your code in more details to search for inspiration and improvements.\n. Well spotted!\nClicking on <body> is disabled in CSS with pointer-events: none so when you click on the body element click actually hits root element (skipping the body).\nI'll fix that.\nI'm not sure what you mean with the other part about clicking on a links in rotated steps.\nClicking on a link doesn't work?\n. It should be fixed now. Thanks!\n. You are probably right... but there is more than just metaKey. On other systems (or browsers) there may be different shortcuts using shiftKey ctrlKey or altKey. They should all be detected I guess.\nI will look into it, thanks for suggestion!\n. On the other hand... during the presentation arrow keys actually do more or less whan back/forward would do.\nAnd you should be able to use [Backspace] key to move back (it seems to work both on Windows and Mac).\n. Thanks for the link.\nAs the list of example sites and presentations is quite long I don't want to keep it in README anymore. It was moved to wiki page (that should be editable for any github user), so feel free to add your site there.\n. It wont work. These attributes are used by impress.js when presentation is initialized (first call of impress() function).\nChanging it later doesn't affect the presentation.\nWhat is the use case for such feature? I may consider adding it in the future.\n. The code you pasted above should work. If you set 'data-rotate' before impress(); is called.\nWhat do you mean by 're-setup'? To change the data after impress was initialized?\n. In this case, as I mentioned above, it's not possible. These attributes are used only when impress is first initialized.\nCurrently there is no way to force impress to re-setup any of the steps (or whole presentation).\nCan you give me an example why would you like to do it?\nIs it a feature that may be useful for others?\nIf so, I may consider adding it in future.\n. OK.\nAt this point I would have to point you to jmpress.js - a jQuery port of impress.js that has already many more features and plugins.\nWhen you want 'impress' effects with more control and flexibility you should check it out:\nhttp://shama.github.com/jmpress.js/\nI'm not sure if they already have such possibility, but I wouldn't be surprised.\n. OK. stepTo is good enough, but let's make it camel case for clarity and to keep JS convention.\n. Now it's getting interesting :)\ngoto was a future reserved word in ECMAScript 3rd, but \"in the future\" - ECMAScript 5 - it was removed from the list and is not a reserved word anymore.\nAwesome.\nAnyway, it may mean that some browsers may fail to parse the script if goto is used. \nOn the other hand, these browsers probably don't support CSS 3D transforms ;)\nTime to change API - again ;)\nMaybe I'll just keep both names... but that would be against my 'less is more' rule ;)\nThanks for heads up @medikoo, it's great how much you can learn on such simple project.\n. Thanks!\n. Yes, please join discussion in #5\n. You mean when you keep the button pressed?\n. Are you working with latest version?\nPlease try to reproduce the issue on current http://bartaz.github.com/impress.js - in version 0.4 events on keydown were changed to keyup, so action is triggered only when button us released.\n. Thanks.\nCurrently a dev branch is where impress.js is developed so pull requests should be sent agains that branch.\nBut I'd like to have clarified, cleaned and finished API  and basic features before I add authoring features.\nSo I won't accept this pull request at the moment.\n. The workaround you used in your HTML code (using empty steps) works fine and is totally valid.\nThe change in impress.js code so it doesn't switch 'active' class seems to be only needed because you used 'active' class to show only 'active' elements - and non 'active' were opaque (or something similar).\nYou can simply change your CSS to make #Screen1 always visible, even if it doesn't have active class.\nOr you can keep it visible when body element has impress-on-Screen1b and impress-on-Screen1c classes.\nIt's clearly visual and possible in CSS, so I don't think it is required to change anything in impress.js itself.\n. Your solutions correctly prevents keyboard events from being triggered but it seems browser has some trouble displaying the cursor.\nBecause when you use arrows to move the cursor it sometimes visually appears in new position, sometimes doesn't - but it it 'physically' is in the correct position (only visible in the other), because if you start typing text it appears where you would expect it. So it's just a position of cursor being displayed incorrectly.\nIt may be caused by some styles applied by impress.js but I would say that it's a browser bug. Because there is nothing in impress.js that would prevent cursor from rendering.\nUnfortunately I can't find any workaround for that at the moment.\n. I would blame hardware acceleration in Chrome, because the way it works is actually rendering part of the page using GPU - so it seems it doesn't 're-render' every cursor position correctly.\nIt can work totally different (maybe correctly) in Firefox, but I can't check in right now.\n. I don't think it's the matter of keyboard input directly.\nElements positioned in 3D are rendered different way by browser (they are placed on hardware accelerated layers).\nIt seems that contenteditable doesn't work correctly on such elements.\nIt's more a browser issue than impress.js. All elements in impress.js are positioned in 3D, so contenteditable may not work there until browsers fix this.\n. I think I need to stop doing releases in the middle of the night :)\nWell spotted. I'm on it right now.\n. Fixed in 0.5.1 - hopefully I didn't break anything else ;)\nTime to write some tests or something, I guess ;)\nThanks again for heads up!\n. What operating system are you using? Is it in Chrome or Chromium?\nI can't reproduce this issue on Windows 7 nor on a Mac OS X.\n. On my Ubuntu 10.10 with Chromium 18.0.996.0 it doesn't happen. I also can't reproduce it on Chrome 19.0.1081.2.\nIt seems to affect only some very specific Chrome version on very specific systems.\nRemoving TAB key from the list that triggers next step is a good workaround, so do it if it helps you.\nI added TAB to the next step keys because if it didn't have any action assigned sometimes you were able to focus some element on a page with TAB key and it was breaking the positioning of the steps (browser was scrolling to make focused element visible). So this issue may affect you when you disable TAB key action.\n. Chrome sometimes has problems with mouse events on elements transformed in 3D.\nIn most cases I've noticed the clicks are going to body element. It looks like the body covers element (or its part).\nThe only workaround I found was to set body { pointer-events: none } in CSS (to disable mouse events on body element.\nBut you need to re-enable them for elements you want to click, for example #impress { pointer-events: auto }.\nThis workaround is a little bit problematic, because the need to re-enable mouse event for the elements you want to make clickable again, but I couldn't find any other.\n. I closed it as I don't think I need to 'fix' it in impress.js as it seems to be browser issue.\nBut of course you can comment if you have solution or workaround. Maybe it will help someone.\n. Hm... but perspective is already set on the root element of impress.js. I'm not sure if setting it again on another element just to make clicks work won't break 3D effects.\nBut thanks for the workaround.\n. But all the elements in impress.js (core, canvas and steps) have preserve-3d set, so clicking shouldn't be an issue.\n. Thanks for the link.\nAs the list of example sites and presentations is quite long I don't want to keep it in README anymore. It was moved to wiki page (that should be editable for any github user), so feel free to add your site there.\n. I cannot reproduce this issue on the demo: http://bartaz.github.com/impress.js/\nEvents are correctly triggered then last (overview) step is entered and then when moved to first (bored) step.\nIt can be checked quite easy - the 'present' class is added to the step with 'impress:stepenter' event. So if the step has the class it means that the event was triggered.\nCan you provide an example where you've noticed this problem?\n. That's strange. I have steps with same y (first three 'slides') in the demo and I'm pretty sure events are triggered correctly.\nCan you provide a on-line demo where the issue happens?\n. That's an interesting case.\nSo you are not changing anything between the steps? Or only scale or something?\nIf any of X, Y, Z changes the event is triggered. But it seems that you are right - when none of them is changed, stepenter is not triggered correctly.\nI'll try to check why does that happen.\n. Yes, that's true.\nThanks for spotting this.\nI was able to reproduce it and kind of know where it fails, but I don't have a solution yet.\nIt gets to the top of my TODO list for impress.js, so I hope to find a solution and fix it some time next week.\n. This issue should be fixed now in version 0.5.3\nPlease verify if it works for you now.\n. That's a very interesting addition.\nI'm not going to merge it right now, but will think about including it in future releases.\n. @niuage your suggestion is totally valid, it doesn't work this way right now. What you want to get is possible with @nchauvat  feature by using \"+=0\" on the values you don't want to change from previous step.\n. Impress.js is built on top of experimental browser features (CSS 3D transforms and transitions). Adding nightly builds of browsers to this makes it even more unstable.\nI'm sorry, but I don't think I can help with this one.\n. Thanks for the link.\nAs the list of example sites and presentations is quite long I don't want to keep it in README anymore. It was moved to wiki page (that should be editable for any github user), so feel free to add your site there.\n. Thanks for the link.\nAs the list of example sites and presentations is quite long I don't want to keep it in README anymore. It was moved to wiki page (that should be editable for any github user), so feel free to add your site there.\n. What you describe is a desired behavior - impress:stepleave is only triggered for steps that were entered.\nI'm not sure if stepskip event would be possible to implement (probably yes, but I'm on mobile during weekend so I can't check), but I don't really see the need for it.\nI don't know what does the presenter console do exactly, but I think that using impress:stepenter should be enough to keep in sync, as it gives you exact information about step being shown. The stepleave event only tells you that this particular step was left - you don't know which will be shown next and you can't assume it will be the next one or the previous, because if somebody uses custom navigation (or clicks on steps) it can be anyone.\nSo I would say that tools such as presenter console should only rely on impress:stepenter to be in sync. \nIf there is any reason you want or need to know when the step was left let me know, we will try to figure something out.\nAnd thanks again for detailed input and feedback!\n. I think I can close this.\n. It can be easily changed in CSS with opacity - check how it is done in impress-demo.css https://github.com/bartaz/impress.js/blob/master/css/impress-demo.css#L190\n. Quite a lot of changes for one commit.\nSome of your suggestions seem nice - like abstracting the list of keys.\nFor others I don't really see the sense to put them into impress.js. Hint is totally optional and not connected to impress.js, I also don't see the point in having a special key to show and hide it - if you've seen it, so don't need it again. Overview is also just a step like any other, no-one is forced to add it to their presentation, or to naming it 'overview', so I don't want to hard-code a special key for it.\nBut thanks for the suggestions! \n. Code examples (or even better online example) would be very helpful. \nI haven't heard about such an issue before, but CSS 3D is quite en early and experimental feature so I wouldn't be surprised if it doesn't work correctly in some extreme cases.\n. Sorry for not answering that long.\nIt really seems weird. But I'm not sure if it is related to any particular impress.js feature. It seems to be more something like browser rendering bug. CSS 3D transforms (and transitions) are still in draft phases, they rely heavily on hardware acceleration, and they are buggy.\nIt would probably be good to gather such issues and post them as browser bugs. If only I had time for all of this :)\nSo, sorry, I don't think I can help you with this. For me it's not a impress.js bug directly, and I couldn't find any workaround to make it work.\n. So your code doesn't work as expected?\nFor me it seems that you've only changed the id of the element in HTML and CSS and the contents of the step.\nSo from what I see here, it should be fine.\nIt would be best if you could provide an on-line example of the case that is not working for you so it will be easier to see what is going on.\n. From what I see you have version 0.3 of impress.js included on this website.\nThe additional classes, like present were introduced later.\nPlease use current version of impress.js that has more features and bug fixes.\n. Sorry for not answering that long.\nIt is an issue that is reported from time to time, I guess I'll have to handle it better finally at some point.\n. I think it may be even simpler when you look on it other way around - we are interested in key events only when no element has focus. And such key events are triggered on body (or document) as far as I remember. But I didn't have time to check if it will work correctly in different browsers.\n. Now I'm even more confused.\nI don't think that mouse position has anything to do with key events. They should be triggered on element that has focus. And if no element has focus than they are triggered on body (or document - I'm not sure).\nSo I really hope that simple:\njs\ndocument.body.addEventListener(\"keyup\", function( event ) {\n    if (event.target === document.body) {\n        // ...\n    }\n}, false )\nwill be enough. But I have to check that.\n. @meetmtushar If I understand you well you just need to remove the line case 32: // space - that's the one detecting space key and assigning it to api.next() action.\n. How are you exporting it? By printing from the browser?\n3D positioning is added in the browser, so it wouldn't be easy to detect print mode and disable these styles.\nProbably some switch between impress.js and fallback mode would be needed.\n. OK. I get that, so it's about print styles.\nI'll think what I can do.\nThanks for your feedback!\n. With properly developed CSS styles impress.js presentation should nicely fallback to linear way when it detects unsupported browser or when it is not initialized.\nThis can be very easily used to support printing. Unfortunately because of inline 3D transforms on the elements you cant just print initialized presentation, but you can write the code that will enable 'print mode' when specific parameter will be given in the url.\nFor example if your presentation is at http://example.com/my-awesome-impressjs-prez/ you can make a print link for example as http://example.com/myawesome-impressjs-prez/?print.\nNow a little bit of code in HTML to detect {{print}} in url and only initialize the presentation if it is not available - simply wrap the init script into:\nif ( !window.location.search.match(/print/) ) {\n    impress().init();\n}\nYou can even add a print link somewhere <a href=\"?print\">Print me</a>.\nAnd of course add some print styles to make your steps nicely print.\nI will this code into my demo when I have a moment to add some print styles. But basically I treat this issue as solved as this can be done without any changes in impress.js itself.\n. For me it looks like overengineering.\nIf you create your presentation content in accessible way - so it works fine for browsers not supporting impress.js, displaying slide contents in linear fashion, there is no problem with printing it to PDF with a little bit of styling added to separate pages, etc. (Assuming that in 'print mode' impress.js will be disabled - it's a simple if statement)\n. @regebro yes, it looks like quite a special case - question is, do you really need to have these steps (differents parts of code selected) printed as separate slides, or maybe whole block of code printed would be fine.\nIt really depends what do you want to print and how. Making content of the presentation accessible in printable way - it's a matter of styling and disabling impress.js. When you want to generate PDF with actual slides (to upload it to slideshare or something) you may need more complicated tool (like phantom for screenshots).\nFor me, solving such problems is quite out of the scope for impress.js (or any other presentation framework - it could easily be done as universal script for deck, reveal, impress or anything else), but it's nice to hear discussions around such topics.\n. At the moment you can only configure transition duration for all steps (on impress.js root element).\nBut I understand that it would be useful to be able to configure this (and possibly other options) on step level.\n. I used HTML5 classList to avoid having to implement it myself.\nI understand that it may not be the best for browser support (and SVG).\nI would have to think if I want to complicate impress.js source for it. Maybe it would be possible to add classList support for SVG elements separately from impress.js?\n. To be honest I'm not really sure how thinglink works and how does this interact with what impress.js does.\nImpress.js uses quite 'hardcore' CSS 3D positioning that should work fine for static content like text, images maybe even HTML5 video. But because it's using quite experimental (and very edge) CSS 3D features it probably wont work correctly with every external library out there - especially if the library does quite amazing and interesting things like thinglink image maps.\nThat's one of the reasons I treat impress.js as a presentation framework - not a tool to create fancy websites.\nI'm sorry, but I don't think I can help you with this at the moment.\nIf you have any example on-line with impress.js and thinglink stuff, I may have a look at it. And if I spot some easy solution (maybe simple CSS trick) I can let you know. But I don't have time to play with thinklink myself to debug it.\n. I'm not sure if I understand your question.\nYou would like to create an element and define data-x, data-rotate, etc. on it (so it gets positioned by impress.js) but not treat it as a step that is accessible during presentation?\nThat is not possible at the moment (at least not in very straightforward way) - it can be probably hacked a bit by using impress.js JavaScript API, but I'm not sure if it would be worth it :)\nIf that's not what you mean, please explain (or give some example).\n. Duplicate of #8 \n. This is very interesting piece of work you have there. I'd love to see it hosted somewhere.\nBut I'm not going to merge it into impress.js source. It's because I don't think I'll have time to keep it up to date with changes in impress.js -- I don't even have enough time to make them happen.\nBut feel free to build it. Maybe host it on github pages, so others can see it. I'll be happy to link it from impress.js docs (or even contribute if I have time).\n. On the other hand.\nI just opened impress.js wiki on GitHub. I know it's something else - you don't control CSS or layout in any way. But it's quite nice any easy way to have community driven documentation.\nMaybe you would be willing to move your impress.js documentation there?\n. There are events triggered when the step is entered and left. They are impress:stepenter and impress:stepleave. They are triggered as DON events on the step elements, so you can attach listener by using standard addEventListener method or jQuery on (if you added jQuery to your presentation).\nThese events are used in impress.js, so you can browse the source for examples.\nIf you need any more help (or code example) just let me know.\n. Thanks, I will add it to authoring tool discussion in #5\n. That's cool - unfortunately your pull request contains many more unnecessary commits and I can't merge it easily. I'd like to add your change, but I have to ask for a clean pull request on recent version of impress.js.\n. The overview step is quite artificial - as you can see in the source it's empty only having some particular positioning. And the only reason the values are as they are is to make it look like the overview of all the steps - so it is positioned more or less in the middle and scaled in a way to make all the steps visible on the screen.\nI hope it helps.\nIf not - just ask. Sometimes I'm not very quick in answering, but I try my best :)\n. Exactly, you don't need to write any JavaScript if you just want a link to go to specific step. \nIf your step is for example <div id=\"overview\" class=\"step\"> then simply <a href=\"#overview\"> will link to it.\nQuite a lot of people are asking about it, I probably should make it more clear or add an example in demo.\n. In what browser are you checking it?\nIt seems to work fine for me (in Chrome and Firefox).\n. Very nice idea, but I'm not planning to extend impress.js with such specific feature at the moment.\nI'm aiming to make it more flexible and extendable, so such 'plugins' for different kinds of navigation will be possible.\nThanks!\n. Hi,\nthat's an interesting addition, but I don't think it needs to be added to impress.js itself.\nWith impress.js API being available it can be easily added as kind of an add-on, or simply additional script that runs with impress.js, lists presentation steps and calls impress().goto( ... ) when menu is clicked.\nI'm aiming to keep impress.js core as simple as possible, but with API that would allow extending it or using the functionality.\nYour menu can be implemented quite easily outside of impress.js - without the need to change its code.\nSo, thank you very much - it's a really interesting addition. I'm glad you found impress.js useful and I hope you won't think that you wasted your time developing this menu for it :)\n. Hi,\nthank you for your additions.\nI don't really understand the need for additional canvas element. The #impress root element is meant to contain elements positioned by impress.js. Anything else can (and should) be placed outside of it in HTML. All the custom classes impress.js uses are set on the body element, so they can be used by all elements on the page.\nWhen it comes to the second addition - the freely positioned elements. It was requested couple of times (for example in #8) but I'm still not sure what would be the best way to implement it... I was thinking more about using some data-skip attribute than adding new class (like your positioned).\nSo this feature will probably appear in impress.js at some point, but I'm not sure in what form. I want to keep impress.js as simple as possible.\nSo, I'm not going to merge this pull request. \nWhat I've noticed in one of your commits was some grammar fixes in the comments. They sound much more English and I'll be glad to use them.\nWould it be possible for you to create some branch that would include these changes, so you can make a pull request with it? It would be easier then coping them manually (and I'd like to keep you as a contributor of them).\n. Thanks a lot, but it seems you used HTML not from my master branch - as it contains github and twitter buttons, google analytics, etc.\nIt is only used on hosted demo.\n. Closing this pull request.\nPlease resend with only needed changes on clean branch if you are still willing to ;)\n. Thanks for this interesting addition. For sure PHP developers may find it useful.\nBut I don't see it as a part of impress.js code at the moment. It's focused basically on JavaScript functionality.\nCheers!\n. Only before the impress is initialized with impress().init(). Currently there is no possibility to add steps to already initialized presentation.\n. Duplicate of #8\n. Firefox 6 doesn't support CSS 3D transforms and transitions required by impress.js.\nCurrent version of Firefox is 12. Please update you Firefox to newest version.\n. Sorry for keeping you without answer for so long.\nIt's not directly possible in impress.js unless you implement it by yourself.\nImpress.js expects the attribute values to be in data-x, etc HTML attributes when init() method is called.\nSo if you read the XML and add the data attributes to HTML before init() is called it should work fine.\n. By default when you click on a step element (or anything inside of it) impress.js presentation moves to this step.\nSo in your case presentation first moves to your chosen step but then moves back (because you clicked on something in the step).\nThere are two ways you can handle this.\nOne is very simple. Don't use your own JS to go to the step if you don't need to. You can simply create a link with step id.\nFor example <a href=\"#some-step\">Go to some step</a> will go to step with id some-step when you click on it.\nIf you really need to create your own JS functionality to handle click remember about stopping event propagation, so the default click handler on step won't run.\nWith jQuery it will look something like that:\n$(\"div\").click(function(event) {\n    event.stopPropagation();\n    impress.goto(\"some-step\");\n});\n. Such functionality can be quite easily done with attaching events to step elements - as I see you've used that in your routes implementation. So I don't see the need to include it in impress.\nBut thanks for your contribution. I hope it will make someones live easier ;)\n. It doesn't really seem to be impress.js issue. \nOf course I would expect problems with embedding video (especially if it's not HTML5 video but flash). So I won't be supporting it. If it works - than great - if it doesn't - sorry. CSS 3D stuff is still fresh in browsers and buggy.\n. It doesn't seem very good solution to add preserve-3d on everything. It may lead to unexpected behaviors.\nAnd on the other hand it also seems to be more easily done in CSS rather than in JS. So you can control exactly which elements should get it when you have flickering problems in your presentation.\n. I'm really not sure how FancyBox works and what causes the conflicts with impress.js.\nImpress.js uses lots of 3D positioning of it's elements, so it may lead to strange behaviors, especially when combined with such interactive elements as FancyBox.\nUnfortunately keeping compatibility with external plugins is currently not in my scope.\n. Were in CSS?\nI can see only .impress-on-overview .step in css:\nhttps://github.com/bartaz/impress.js/blob/master/css/impress-demo.css#L525\n. Thanks, but it's a little bit too much for me.\nI'm not aiming to use modernizr as I don't want (and need) to depend on third party lib for such a simple check. Changing couple of lines of check into whole library that needs to be downloaded doesn't seem to be worth it for me.\nI also tried pushState before but it was buggy in some browsers. Also as impress.js presentations are one page only and only require hash to be changed there is basically no need to use anything more complicated than good old hash changing in window.location.\nAnyway, thanks for using impress and making it better for you :)\n. I don't see any differences in current versions of Chrome and Firefox (on Mac).\nThe size of presentation (that may be interpreted as position of the camera) depends on window size, so make sure you compare both browsers with the same size (preferably fullscreen).\n. Yes, it is brutal, but on most of Android devices impress.js doesn't work. Especially in default browser. Even that is says to support all required features.\nAs for now it is impossible to detect if the device + browser works, and I'm not going to maintain any 'whitelist' of allowed user agents that are proved to be working, Android is forced to fallback mode.\nI may think of adding ability to force running impress.js for those brave who will want to try their devices.\n. goto was a future reserved name, but is not anymore. It seems that eclipse JavaScript parser is outdated in this manner.\nSee more in related issue #119 and comments: https://github.com/bartaz/impress.js/issues/119#issuecomment-4441338\n. Yes, it the same issue as in #116 - impress.js should only advance slides on single key presses and ignore keys when ctrl, alt, cmd or other modifier are pressed as these are likely some browser shortcuts.\nAs this is already mentioned in #116 and I'm willing to fix it I'll close this issue.\nThanks for reporting!\n. Thanks @medikoo ;)\n. Hi.\nImpress.js positioning and transitions don't work well on mobile devices, to are disabled there. And content is displayed just with CSS you prepare - no impress.js magic.\nI think the problems you describe are only appearing if you test your site on the desktop browser (supporting impress.js) but by making browser window smaller.\nYou should probably try to test on a real mobile device.\nYou can also disable javascript in your browser to 'emulate' disabling impress.js.\nOr remove impress().init() and see how it is working when impress.js is not initialized, and then add it again.\nI'm closing this issue, but feel free to ask more questions in comments below if you have any.\n. Impress.js doesn't give you access to slide number directly but you can use events to simulate that.\n```\ndocument.getElementById(\"impress\").addEventListener( \"impress:stepenter\", function (event) {\nvar step = event.target;\n\n// here you have access to a step element\n// unfortunately you will have to count yourself to find a number of this step\n// and display it somewhere\n\n}, false);\n```\n. @naveen3444 adding things inside the impress.js code is not necessary\n. Someone doesn't like Yoda? ;)\n. Quick fix: in your text editor: Edit / Find & Replace > \"goto\" : \"goTo\" > Replace All ;)\nI understand that this issue probably stops anyone from minifying impress.js and this 'bug' is not likely to be fixed by YUI Compressor or Google Closure Compiler, so I may think about changing that name, but don't expect it too soon as impress.js is not currently under heavy development (as you've probably noticed).\n. BTW.\nIt compresses just fine with https://github.com/mishoo/UglifyJS ;)\n. You can link to any slide you want using its id: <a href=\"#slide-2\">Go to slide 2</a> or use the API impress.goto( ... ).\nI'm not going to implement any specific navigation or table of contents into impress.js to give the choice and flexibility to devs - everyone has their own idea what they want ;)\n. Sorry for keeping you waiting for so long @tomlane and thanks :)\n. Thanks.\nThis is an interesting feature, but I don't think it has to be a part of impress.js. First of all it can be quite easily added if anyone needs it, secondly I don't want to make displaying of HTML dependent on any script. This allows to create presentations that are accessible to anyone.\n. I can't assure compatibility with every JS library or plugin out there. Especially if it's website doesn't work: http://stickmanlabs.com/lightwindow/\nImpress.js uses very specific and cutting egde features, that's why I see it as a presentation tool, not a library to be used on websites and stuff like that.\n. First of all I'd check if this particular video works for you on iPad without impress.js.\nI don't know how impress.js can relate to video playing, but as video is treated quite special on iOS it can colide with CSS3D transforms (I guess).\nI can't really tell cause I don't even have an iPad to test.\n. There are couple of options to be set on <div id=\"impress\"> element to control the size and scaling:\n- data-width (in px, defaults to 1024), \n- data-height (in px, defaults to 768),\n- data-max-scale (defaults to 1),\n- data-min-scale (defaults to 0)\nDefault max-scale 1 means that presentation will not get bigger than original on bigger screens (to avoid visible pixels for example), but you may try to increase that to make it scale up for bigger screens: <div id=\"impress\" data-max-scale=\"2\">. \n. It doesn't scale because of how browser handles elements transformed in 3D - they are no longer treated as vectors to speed rendering.\nPixels may be visible when using data-scale smaller than 1.\nIs this a case for you?\nIn the example you have scale 5 and 1, so (in theory) it should be fine.\n. As far as I know when using 3D transforms browser is creating rendering layers for these elements - meaning that they are no longer treated as vectors, but as raster images (handled by GPU). That's why SVG gets pixelated when zoomed in.\nThe example with the tree linked above uses 2D transforms only which don't have this issue.\nI don't know if there is any way to prevent it in impress.js - unless we add an option to disable 3D and use 2D transforms only for such cases. But I close this for now.\n. @speendo it probably depends on the layout of other steps in presentation as the visual transition may look different between zooming (on scale) and moving closer (on z axis). But it is an idea that may help.\n. There is only one version of MIT license: http://opensource.org/licenses/mit-license.php\nWhen it comes to GPL, it's current version - http://www.gnu.org/copyleft/gpl.html\n. I'm not sure what you are asking about.\nimpress.js itself doesn't have any licences for content or doesn't protect your content in any ways.\nProabably what you are looking for is for example a licence provided by Creative Commons: https://creativecommons.org/choose/. They have licences that allow you to tell what you allow to do with your content and under what conditions (if content can be changed, translated, modified, under your name or not, etc).\nHave a look at that.\n. I don't know how this relates to impress.js.\nAnyway, the web is so wide an open, that you never have a guarantee that someone would not use content that you posted on-line until you find it. Licences like CC only give you the tool to say what you allow do to with your content, but there is no way you can prevent others to use it in any (evil) way they want.\n. Any. All versions are MIT licensed.\nIt's best to use latest of course :)\n. It seems to be a bug in Chrome. Every slide is positioned in 3d and chrome creates a special rendering layer for it. These layers take up memory and it seems that when there is too many of them some may not be always rendered.\nIt differs between different machines (and presentations) how many slides are displayed. Sometimes changing the position of the slide helps.\nUnfortunately it is very non-deterministic, so there is no workaround that will always help.\n. I'm not sure. I haven't try impress.js with HTML5 drag and drop, but that may be the case that something is not working properly because of heavy CSS 3D transforms that impress.js us based on.\nBut it's hard to guess without seing a real case.\n. Hi Tim,\nI think this is very interesting addition and for sure may be useful.\nI'm not merging this at the moment as unfortunately I don't have time to put my head into impress.js related stuff.\nBut it won't be forgotten, don't worry :)\n. @blackheaven @yosun \nI don't know exactly what is the effect you want to achieve. But having impress js 'walking' on top of big image is possible in some way:\n1. create a step containing full big image. put it for example at x=0, y=0\n2. create an empty step for every point on the big image that should be shown, steps will have no content (or may have some content if you want) and will be positioned relatively to the center of big image\nSo basically the workaround is not to use background image, but put the big image into a step, and position other steps correctly to show parts of the big one.\n. https://github.com/bartaz/impress.js/blob/master/index.html#L180-183\nJust use domain.com/#name-of-step - this will work as true anchor and impress.js will know how to handle it.\n. @FagnerMartinsBrack As described in my answer to #345, at the very beginning of impress.js I was actually using real step ids in urls and history.pushState, but I encountered problems.\nEven without pushState, when #step-1 was used in URL in the browser that DOES support impress.js then some bad things happened - browser tried to scroll to it, but it shouldn't because impress.js itself repositioned the steps, etc. So it caused bad looking jumping and blinking for browsers supporting impress.js.\nThat's why I decided to move to #/step-1, so that when impress.js is supported I can fully handle such URL myself, but users without impress.js will not be able to get to correct step.\nIt's been over 3 years since then, so maybe these issues were fixed in recent browsers. That's something we would need to try to verify. \n. Valid HTML would be data-min-scale (with dashes, not camel case) and in JS dataset it will be available properly as minScale.\nUsing data-minScale may be interpreted differently by browsers.\n. Hi, it seems like your editor messed up indentation. I use 4 spaces.\nIf you can fix that it would be great as this way you pull request is totally unreadable.\n. Yes, that's true. If you wan't to disable keyboard navigation you need to remove it from the code.\nI'm thinking about making some changes, so impress.js will be more flexible and configurable.\nGetting keyboard navigation out of impress.js itself it part of it. (Actually it's already separate from impress.js core functionality, but still sits in the same file).\nBut don't be afraid to mess with the code and add/remove things if needed. That's why it's open source, so do anything you need to make it work for you ;)\n. See discussion in issue: #5\nAnd list of example editors in wiki: https://github.com/bartaz/impress.js/wiki/Examples-and-demos\n. MIT: http://bartaz.mit-license.org/\nGPL 2 or any later version.\nIf you'd like to have impress.js released under some other license too please let me know and I'll consider it.\n. It is possible using events, you can use impress:stepenter event to detect when step is presented, and find and play HTML5 audio or video on that event.\n. Hi, thanks for these interesting additions.\nI like to see how different uses you find for impress.js but I'm really not sure if I see a need for all those features in impress.js itself.\nI see impress.js as a library to position steps in 3D and animate between them. Additional features (full screen, blackout, etc) can be implemented as separate scripts. I'm thinking about refactoring impress.js in a way to allow easier implementation of such 'plugins' or 'extensions'.\nSo I'm not merging it into impress.js at the moment. But I'll love to see it as separate script that can be added to presentation to add these features.\n. I guess nobody have read that this carefully :D\nThanks :)\n. Someone is reading carefully ;)\nThanks!\n. You can easily have the \"after-current\" functionality in pure CSS using .current + .step selector.\nUnfortunately \"before current\" in not possible in CSS only.\nBut you can add it yourself by listening on \"impress:stepenter\" event and adding this classes via JavaScript (just as future and past classes are added in impress.js.\nI'm not sure if I will be adding them in impress.js as in more flexible and non-linear navigation schemas it is not so obvious which step would be next.\nAnyway, thanks for suggestion. I'll think about it. But with \"impress:stepenter\" you don't have to wait for me to implement it ;)\n. That's interesting addition. I understand the need to make this optional.\nBut is your implementation working? I can see that you added enabledHistory do the defaults object with value of 0 (false would be more clear in my opinion), but there is now way to change it without changing the code, isn't it?\nYou would also have to allow setting it in HTML as data-enable-history and use this value in config object here: https://github.com/JamesMeldrum/impress.js/blob/899c6e4a61ae5cf6e2fb95dbfd6b754bf4bc64ec/js/impress.js#L347-L354\n. That is a very interesting idea. I don't know why I haven't thought about that myself. :)\nThat would, indeed, make the access to step elements easy for plugins - for example allowing to create navigation (prev/next) as a plugin. And that's what I'm aiming for.\nThanks! Sometimes simple ideas are brilliant ;)\n. That is easily accessible. Event.target for stepenter and stepleave is the step element.\n. https://youtu.be/M2WTRqCu_DY ;)\nOn Thu, Aug 6, 2015, 16:42 Matthias Bilger notifications@github.com wrote:\n\nWhat's the matter with this pull request, I'm about to close it to no\nlonger have it bothering arround in my list ....\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/impress/impress.js/pull/235#issuecomment-128398438.\n. It was already reported somewhere... Probably long time ago...\n\nIt should be checked if modifier keys (alt, ctrl, meta) are pressed with tabs (and arrows) and not trigger the next action.\n. But, if you don't have an event on Tab key it will have its default behavior in browser - going through focusable elements (like links, form elements, etc). And this may sometimes break what impress.js shows, as browser will catch focus on some element, try to scroll to this element, so presentation will visually move until next slide is shown.\nWeird, doesn't happen all the time, but that's the main reason why I added Tab key support for moving slides.\n. @regebro Yes, you are probably right. That may be the easiest solution.\n. Fixing one typo, introducing another? ;)\nAnd why so many commits in this pull request?\n. Jak rozumiem chodzi o poruszanie si\u0119 po liniach prostych i zakr\u0119ty pod k\u0105tem prostym?\nPoniewa\u017c animacja przej\u015bcia mi\u0119dzy punktami jest w pe\u0142ni obs\u0142ugiwana przez przegl\u0105dark\u0119 (nie ma kontroli nad jej 'trajektori\u0105'), to konieczne b\u0119dzie wstawienie pustych 'step'\u00f3w w miejscach 'zakr\u0119t\u00f3w'. Z tego co rozumiem w\u0142a\u015bnie to robisz tylko nie wiesz jak taki step zmusi\u0107 do automatycznego przej\u015bcia dalej.\nNajpro\u015bciej b\u0119dzie to chyba osi\u0105gn\u0105\u0107 u\u017cywaj\u0105c event\u00f3w stepenter i api next.\nPrzyk\u0142adowo, \u017ceby wej\u015bcie na step 'aktualnoscii' przechodzi\u0142o automatycznie dalej, konieczny by\u0142by skrypt:\njs\ndocument.getElementById('aktualnoscii').addEventListener('impress:stepenter', function(){\n    impress().next();\n}, false);\nLub analogiczny z u\u017cyciem jQuery\njs\n$('#aktualnoscii').on('impress:stepenter', function(){\n    impress().next();\n});\nMo\u017ce to jednak rodzi\u0107 problemy przy 'wracaniu', bo wej\u015bcie na 'aktualnoscii' zawsze b\u0119dzie przechodzi\u0142o dalej.\nAle mam nadziej\u0119, \u017ce cho\u0107 troch\u0119 pomog\u0142em.\n. Nice idea, but it can be easily done with impress:stepenter and impress:stepleave events.\nAdding functions in HTML and using eval to call them is a little bit too 'dangerous' to be included in core of impress.js.\nBut if it works for you (and you know what you are doing) it's fine ;)\n. That may be an idea. I haven't tried that and I'm not sure which element I should 'scroll into view'... But, this also is about scrolling and probably has similar result.\nI don't know if using {{scrollIntoView}} will have any benefits over {{window.scroll}}.\nThe best solution (of course) would be to avoid the problem so scrolling is not needed at all, but I'm not sure if it is possible.\nBut thanks for the suggestion :)\n. Thanks!\n. It didn't work in times of iOS 5. I haven't check on iOS 6.\nBut even if it works in iOS 6 I think it should still be disabled for older devices, as it was totally crashing Safari there.\n. If by crashing you mean that browser is killed when loading page with impress.js it may not be related to the version of impress.js but more likely to amount of content you have in the presentation.\nEvery step in the presentation positioned in 3D requires browser to allocate a GPU memory for it, if you have a lot of slides, with a lot of content or big images you will run out of memory very quickly and iOS kills Safari in such case (to let make other system processes safely work).\nThis also depends on device - devices with more memory will be able to display 'bigger' presentations.\n. Impress.js currently adds automatic class to body element on each step based on the step id (for example impress-on-step-5. This can be used to style body element differently and should be sufficient for most cases.\nBut of course option to override this automatic class with some custom one can be added too if we find it useful.\n. Camel case in data set values is transformed to dashed attributes in HTML.\nSo maxScale in API is max-scale in HTML. No need to fix anything.\n. Impress.js was not designed to handle such a case, but you can probably remove all classes from body before loading new presentation.\n. I'm not sure if that's what you need but there are 'impress:stepenter' and 'impress:stepleave' events.\nStep enter is the one triggered when given step is entered (shown) - I'm not sure if that's what you meant by 'focused'.\nThese events are triggered as standard DOM events so you can use addEventListener or any DOM library.\n. It seems to work fine for me (Firefox 19.0.2 on Mac).\nIt's hard to say what may be happening there. Impress.js uses lot's of 3D transforms that trigger hardware acceleration and not every browser handles it properly. It may even depend on specific computer (having enough memory for accelerated layers).\nIt may be a bug in the browser, so probably the easiest way to work around it would be to change something in the presentation - positioning of the slides, number of slides. Trial and error unfortunately.\n. I guess it just a matter of interpretation.\nWhen you look at the whole presentation canvas (for example in overview step) this element is rotated 90 degress clockwise (relative to non rotated elements).\nBut when you look at the animation - the transition has other direction - rotating view counter clockwise to show this rotated element in correct position.\n. Nice to hear that.\nI guess that would be a good time to review the blacklist, but (unfortunately) it may be quite hard to distinguish between androids that are already good enough and those that are not.\nIt may not be just a matter of using Chrome (in quite recent version probably) but also device capabilities (in terms of animation smoothness, etc).\nProbably the best solution would be to allow user to enable/disable impress.js on demand.\n. To be honest it looks a little bit over-engineered.\nYour whole changes can be simply done in few lines of code without even touching impress.js code:\ndocument.addEventListener(\"keyup\", function ( event ) {\n    var keyStep = document.querySelector(\".keystep\");\n    if (keyStep && event.keyCode === 75) {\n         impress().goto( keyStep );\n    }\n}, false);\nI'm not 100% sure if the code is right but more or less it should be something like that. So, really, adding new API method and hardcoding another step class and key seem to much to get such simple functionality.\n. Right, I haven't noticed that.\nAnyway - storing current step is not that hard, too. It's not exposed by the API itself unfortunately, but it can be easily found as it has .active CSS class.\nSo basically, I don't really see the need for such functionality in impress.js core, and it seems it is achievable with current API, so I'd suggest writing it as impress.js \"add-on\".\nBut, thanks a lot for that suggestion. I'm glad you found impress.js so interesting to add something to it. \n. I don't know CDF, but from what I see on the page you linked it requires additional plugin to run.\nI don't have time to debug it now, but it's pretty likely that CDF item rendered by this plugin is not handled by the browser in the same way as regular HTML elements, so it may not be positioned in 3D as impress.js slides. So unfortunately it may be impossible to use CDF in impress.js presentation.\n. Sorry, but I have no idea what you mean.\nPlease, provide at least a link to example where the problem happens.\n. I'm not really sure if that is impress.js related.\nHTML seems fine, but it is safer just to use /favicon.ico file from root folder, not a custom one. But I'm not sure if that will help.\nAre you sure it's impress.js that makes the icon disappear? If you remove impress.js script (and other scripts from the page does it still happen)?\n. OK. I just found that it is a bug in Firefox. Sadly - it's quite old and it seems that no-one is working on it:\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=519028\nSo unfortunately nothing I can fix in impress.js - but there is a workaround for that described here:\nhttp://kilianvalkhof.com/2010/javascript/the-case-of-the-disappearing-favicon/\nYou can have a look and try this if you really want your icon in firefox.\n. r is sooo close to t on the keyboard ;)\nThanks!\n. Sorry, I don't have much time these days for impress.js related stuff.\nAs mentioned in issue #225:\n\nMIT: http://bartaz.mit-license.org/\nGPL 2 or any later version.\n. Unfortunately I'm not currently maintaining impress.js code regularly because of other priorities.\nEspecially I'm not able to review and possibly merge such big changes as this one.\n\nSo for those interested in using impress.js with additional features such as sub-steps, I suggest to use an unofficial fork that implements this feature - such as the one in this pull request.\n. I wouldn't really call it a bug.\nThe past class means, that the step was displayed (so it is assigned on stepleave event).\nThat's true - using goto method to display steps out of order will leave some \"earlier\" steps with future classes, but - as they were not shown, and maybe will be shown in non linear order - the future class seems fine on them for me.\n. It seems that we basically have different approach to these classes.\nIf you look at the presentation in linear case - that the order of the steps is significant and they depend on one another in terms of progress, then your approach is valid - jumping to some step should make all steps that are before it as past steps.\nBut if you look at the presentation in non-linear way - they are pieces of information you can freely jump between, than it makes more sense only to apply past class to visited steps.\nI wouldn't say that any of these approaches is 'better'. But, with the first approach, and linear presentation, why would you jump between the steps and expect other to became past?\nFor the moment I'll stay with what is implemented (second approach) as I find it more flexible - jumping to a step doesn't affect other steps.\nBut maybe that is something that could be configurable if someone expects your behavior of steps.\n. I guess I'm getting more and more convinced that jumping to particular step with goto should make all previous steps as past. \nUnfortunately impress.js development is kind of paused right now, but I have some plans to make it more flexible and configurable in future. I guess this issue could be addressed then also.\nSo, I hear you, but I can't really promise when it will be done.\n. Android, iPod, iPhone, iPad, etc 'supported' CSS 3D transforms even when I was testing it while creating impress.js, but the devices and browsers weren't able to handle impress.js animations.\nI know that support is better now, but it still doesn't mean that impress.js will work fine.\nI don't have time right now to test it myself, but even if it works now, it may not work on all devices or versions of browsers. It's especially true on android. It's very hard to detect if a particular device is fine to display impress.js or not. It may even be different for different presentations - those with many steps and many crazy 3D transitions are likely to fail.\nSo for sure I can't just remove the check. \nThe only thing I am considering is allowing user to run impress.js even on 'blacklisted' device if they want, but they need to know that it may fail.\n. Impress.js has very basic touch support (as mentioned before touch on sides of screen) that currently works on iPad only, as all others are disabled.\nI've written many times about the reasons why mobile was not supported at the time impress was created, but truth is that it was years ago and things improved both in iOS and Android. Still, there may be some older devices that would simply not handle some impress presentations and using too much memory may simply crash whole Safari on iOS. So it's still safer not to enable it by default. That said, I agree that in 2016 it could (should?) be revisited and be somehow turned into option, so devs willing to take the risk of killing user browsers on mobile could turn it on.\n. 3d positioning. Each element positioned in 3d creates new rendering layer for GPU. This is every slide in impress. Safari on iOS is simply killed when memory is exceeded which may happen quite quickly on older devices (demo of impress was too much for iPhones at a time).\nOf course today devices have more memory and power then couple of years ago, but you can still easily exceed it by having dozens of image heavy slides. And from impress.js user perspective you never know if your presentation will not be to heavy for some device. There is no way to detect or prevent it.\nStill, this could easily be an option to enable impress on mobile 'on your own risk'. Or even programmatically set your own check for who you want to enable it instead of hard coded default one.\n. Reveal.js only shows current plus next and previous slides. Rest is display none.\nIt's possible with impress if you write your CSS right, but you loose some possibilities (having all slides visible in 3d during transitions, transitioning betweetwen slides out of order etc).\n. @ridom Keeping init code \"at the bottom\" may not mean that it is really executed after the dynamic elements are created.\nIf the dynamic elements are correctly created inside the impress element, with step class and attributes and all of that before the init call, it should work properly.\nThere is no difference between dynamic and static elements for impress.js. What matters - it will only work for steps that are in document when init function is called.\nIf that is possible, please provide some example code on-line. It would be much easier to see and debug what is happening.\n. @dinodsaurus short answer: no\nAll the positioning in 3D using transforms (based on data attributes in HTML) is done in init function.\nThere is no way around it at this point. It would require quite large changes internally in impress.js.\n. A little bit hacky, but should work.\nYou can add such function somewhere around impress API as addStep so you would possibly be able to do:\nimpress().addStep( selector )\nExposing it as a global on window object is a bad programming practice.\n. Why would you want to load http://bartaz.github.io/js/impress.js ? There is no such file, so there is 404.\nhttp://bartaz.github.io/impress.js works fine as far as I can see.\nIf you want a script file it is http://bartaz.github.io/impress.js/js/impress.js\n. I'm not sure if I understand the question.\nThe overview is simply an empty step element (slide with no content) positioned (with x, y) in the middle of all the other steps and with scale chosen to make all other steps visible when it is reached.\nThere is really no magic or automation in it. Simply a hand made trick.\n. It would be hard to guess without any example to look at.\n. Ok, I found it.\nImpress.js uses active class to mark current slide (and resize it when screen resizes).\nYou are using active class in your navigation, too. So impress.js is taking element from your navigation instead of the active slide.\nThat's a bug in impress.js obviously (I shouldn't assume that you won't use active class anywhere else).\nBut at this point, to workaround that you would need to change the name of the class you use in navigation to something alse then active.\nYou can also find a line api.goto(document.querySelector(\".active\"), 500); in impress.js code (should be line 792) and change it to api.goto(document.querySelector(\".step.active\"), 500);. So only steps with active class will be taken into consideration.\n. What kind of spam is that?!\n. It's hard do say without comparing it with eariler versions of Chrome.\nBut even in previous versions there were such problems. For me it seems that Chrome has some memory limits or something... Such problems mostly happens on sites with lots of steps in impress.js, sometimes it is related to lots of images placed in this steps.\nIt seems that both is true in your case - you have quite a lot of steps with images in there.\nUnfortunately there is not much that can be done from impress.js point of view - positioning elements in 3D with CSS is quite memory heavy and browsers may have issues with that in edge cases.\n. I have no idea why backface-visibility would change anything, but maybe it helps - we are probably dealing with things we don't fully understand so sometimes it's trial and error ;)\nAnd when it comes to iPad crashing - that's for sure memory issue. When you have many 3D elements and many images they all take memory and Mobile Safari on iOS has some 'safe switch' that basically kills the browser when memory runs out (probably not to kill the device).\n. thanks, that's an interesting navigation\nbut I'd rather see such features as 'plugins' that you add to your presentation. They don't need to be part of impress.js core library, as they can simply work using the API.\n. Hi,\nI was thinking about adding something like that myself. That would be a good start.\nIf I may ask for some changes then I'll be glad to merge it.\nFirst of all please make a pull request to a dev branch (not to master), as I don't want it to be released yet.\nAlso I'd prefer to use full rotateX, instead of rz, as this will be compatible with 'data-' parameters and values in 'dataset'.\nAdditionally I'd like to put more options to init function later, so I'd like to put slides data into some property, for example:\njavascript\nimpress.init({\n    steps: {\n        step1: { x: -100, y: -200, rotateZ: 90, scale: 2 }\n    }\n});\nIf you don't have time to do everything, just make a pull request do dev branch as it is now and I'll do them later myself. Thanks!\n. Thanks for reading carefully ;)\n. Can you explain what it does and why it is needed? I dont see the point why video or audio wouldn't work without it.\n. At this moment only way would be to go to impress.js code and comment or remove this line: https://github.com/bartaz/impress.js/blob/master/js/impress.js#L712 and event.keyCode === 9 || from this line; https://github.com/bartaz/impress.js/blob/master/js/impress.js#L684\nBut I'm pretty sure you will get into other problems like arrows and space changing slides instead of working as expected in text fields. To fix this you will need a little bit more coding.\nI think one way to walk around impress.js handlers for keys would be to catch keyup and keydown events somewhere in your form and call stopPropagation() on them. This way they should never get to impress.js handler, but browser should call default actions for them.\n. As far as I understand your first question is about having possibility of getting to a 'index' step many times during the presentation? It is not directly possible with impress.js but you can fake it by putting empty step in your presentation exactly in the same position (x, y, z, rotations, scale) as index step.\nFor example:\n- step index - x = 100, y = 100, rotate = 90\n- some other steps\n- step fake 1 - x = 100, y = 100, rotate = 90\n- some other steps\n- step fake 2 - x = 100, y = 100, rotate = 90\n- etc\nThis way you will get to the same position as index step couple of times, index step will be shown even that you will actually be on a fake step.\n. When it comes to the second one... I'm not sure if you mean you want something like subseps? - than it is not available in impress.js at this point (but there are some forks that do). But probably all you need is having two steps exactly on same position (x, y, z) so that presentation doesn't move between them and text in them positioned in a way not to overlap (with padding for example).\n. For the last question I don't really know how to help. Some effects will look nice, other will not. This 'going inside' looks nice because it's going through the hole in a letter g. When you have a slide that covers the whole view with background it will not look the same.\n. Yes, it's a known issue caused by the fact that tab key is also used to move between slides (and Chrome sends Alt+TAB to browser with it is alt+tabbed - which is quite weird I'd say, it should be 'swallowed' by OS in my opinion).\nAnyway, there is a known workaround for that and there are other issues describing it, so I'll close it as a duplicate.\n. Can you give a little bit more details about the changes you made?\nFirst commit is called impress.js substeps and it contains completely new file with lot's of code copied from impress.js - what it the purpose of this code? what kind of 'animation framework' you have in mind, what it has to do with substeps?\nSecond commit contains again quite a lot of changes to impress.js itself. Changes are so big that it is really hard to know what they really do.\n. If you are still affected by this issue please repoen and provide information about operating system and browser versions. I wasn't able to reproduce it.\n. I don't know much about processing itself and how performant would be to have many demos running on one page at once even without impress.js, but for sure fact that sketches are positioned in 3D and all rendered at once will affect performance and memory usage.\nIs there any possibility to 'pause' processing.js sketch? So they will be rendered on the steps and paused until given step is shown?\nImpress.js has events (impress:stepenter, impress:stepleave) that are called for every step when it is shown and when user navigates off them - these could be right moments to play/pause processing.js sketches.\nYou can of course also hide/show them on these events, but it may not look so nice as impress:stepenter is called when step is already visible, so user will see empty step with sketch appearing.\nOther way may be to use classes from steps. Not visible steps have classes past (those were visited already) and future (those were not shown yet). When the step is about to be shown the active class is added to it (right when the move animation starts).\nSo the idea may be to hide sketches for steps with past and future classes and only show them on steps with active class.\nTry out these ideas. Hope it will help you improve the performance.\n. sorry for such late answer, looks like no one else was willing to help\nMobile styles\nWhen it comes to mobile in most cases these devices will not run impress.js at all (there is a check built into impress.js). So impress.js is disabled on android, iphone, it may run on iPad.\nIn such case you can easily provide mobile stylesheet via CSS. See how it is done in my example presentation.\nBut if there really is a mobile device that passes my check in impress.js you will have to run .init() in the condition.\nUnfortunately impress.js currently doesn't support switching it on/off, so if you detect that screen is big and run impress.js you can't switch it off when screen is smaller.\nOnce it runs, it runs.\nAnd yes, unfortunately it will be very hard (if not impossible) to use CSS to remove 3D styling from impress.js slides. Styles are applied by impress.js to specific steps, so reverting it may require adding !important to your CSS. I'm not sure if even that would work.\npresentation loop\nCurrently it's not possible to end presentation at some step. The 'next function simply starts over when there is no more steps. And there is no configuration option that can change that behaviour. Sorry. \n. Yes, you are looking into right place. computeWindowScale is where we compute how much presentation needs to be scaled to fit the screen:\n`` javascript\n//computeWindowScale` counts the scale factor between window size and size\n// defined for the presentation in the config.\nvar computeWindowScale = function ( config ) {\n    var hScale = window.innerHeight / config.height,\n        wScale = window.innerWidth / config.width,\n        scale = hScale > wScale ? wScale : hScale;\nif (config.maxScale && scale > config.maxScale) {\n    scale = config.maxScale;\n}\n\nif (config.minScale && scale < config.minScale) {\n    scale = config.minScale;\n}\n\nreturn scale;\n\n};\n```\nLets brake it into pieces and comment each:\njs\nvar computeWindowScale = function ( config ) {\n    // more code\n};\nconfig object that is passed into computeWindowScale contains impress.js configuration. What is needed for computing window scale are 4 properties with default values defined as follows:\njs\nvar config = {\n    width: 1024,  // assumed width of each step (step contents should fit into 1024 pixels width)\n    height: 768,  // assumed height of each step (step contents should fit into 768 pixels height)\n    maxScale: 1,  // maximum scale of presentation (1 means it won't get bigger than it's standard size even if window gets bigger)\n    minScale: 0   // minimum scale of presentation (0 means it will get as small as needed)\n}\nFirst two options (width and height) define assumed size of each step, by default they are set to 1024/768 to keep common aspect ratio and not very high resolution (for projection). These are reference values window scale is computed against - so if window gets narrower that 1024 it means that presentation needs to get smaller to fit (similar with height).\nThe other two properties (maxScale, minScale) define maximum and minimum scale that presentation should get when screen gets bigger and smaller. This allows to control how much scaling is applied (or disable scaling at all). By default maxScale is set to 1, which means that presentation won't get bigger than its standard size, even when window will be bigger. This was chosen as default because scaling up may cause artifacts, blurred text, etc.\nSo now let's dig into what computeWindowScale does.\njs\nvar hScale = window.innerHeight / config.height,\n    wScale = window.innerWidth / config.width,\n    // ...\nAt first we compute horizontal and vertical scale. We basically divide current window size (height and width) by configured step dimensions (discussed above) to get scales both for height and width. If scale is bigger than 1 it means that presentation needs to be scaled up (to fill whole screen), scales less then 1 mean that screen is too small and presentation needs to be scaled down.\nNow when we have separate scales for height and width (they can be different for different aspect ratios or situations when someone makes their window tall but narrow for example) we need to choose one to use.\njs\nvar // ...\n    scale = hScale > wScale ? wScale : hScale;\nSo we compare them (horizontal and vertical scale) and choose smaller. Why smaller - because we want to make sure presentation fits on the screen.\nThe rest is just comparing against configured maxScale and minScale:\n``` js\nif (config.maxScale && scale > config.maxScale) {\n    scale = config.maxScale;\n}\nif (config.minScale && scale < config.minScale) {\n    scale = config.minScale;\n}\n```\nSo if maxScale is confifured and our computedscaleis bigger than that, we usemaxScale` instead (to make sure our scale is never bigger than configured maximum).\nSimilar with minScale - if our scale is smaller with what is configured, use configured one.\nThese two conditions assure that computed scale is always somewhere between minScale and maxScale.\nIn the end we just return what we computed:\njs\nreturn scale;\nNow, where is this scale actually used to scale impress.js presentation?\nIt happens somewhere around line 355:\nvar // ...\n    windowScale = computeWindowScale( config );\nand line 379:\njs\ncss(root, {\n    // ...\n    transform: perspective( config.perspective/windowScale ) + scale( windowScale )\n});\nwindowScale contains what computeWindowScale returned and we use this to set a scale transformation on root element of the presentation. We also need to scale the perspective of the 3D transformations to make sure the 3D effects don't change their perspective when window is resized.\nThere is also a resize event handler that is triggered when window is resized (line 794):\njs\n// rescale presentation when window is resized\nwindow.addEventListener(\"resize\", throttle(function () {\n    // force going to active step again, to trigger rescaling\n    api.goto( document.querySelector(\".step.active\"), 500 );\n}, 250), false);\nAll it does is calling goto function on impress API to go to currently active step. So basically we show the same step again (to make sure it gets correctly repositioned for new screen size).\nAnd this line 479 in goto assures that window scale is recalculated if necessary:\njs\n// if the same step is re-selected, force computing window scaling,\n// because it is likely to be caused by window resize\nif (el === activeStep) {\n    windowScale = computeWindowScale(config);\n}\nSo... I guess that's more or less how the 'magic' of scaling happens.\nI hope you somehow found your way of understanging between all those little steps and code pieces.\n. @baxterma\nIt's called conditional operator or ternary operator:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\nThe line:\njs\nvar scale = hScale > wScale ? wScale : hScale;\ncan be explained as:\njs\nvar scale = /* if */ hScale > wScale ? /* then */ wScale /* else */ : hScale;\nis more or less the same as:\njs\nvar scale;\nif (hScale > wScale) {\n    scale = wScale;\nelse {\n    scale = hScale;\n}\nAnd yes, trying to find it in google without knowing the name may be tricky ;)\n. @baxterma No problem. I didn't expect that the answer will be that long, but it was fun to be interrupted this way ;)\n. Why pulling from gh-pages to gh-pages branch?\nWhy version 0.5.4 (there is no such version released yet).\n. See discussion in #119.\ngoto was a reserved keyword, but is not anymore, so it should be save to use.\nWhen it comes to tools, for minification I can suggest uglify.js - it handles it correctly and doesn't complain.\nIf it is a real pain for you that your tools are complaining about the goto, just go ahead and rename it in impress.js code to anything you like ;)\n. Thanks, but I think it will be more universally understood if it stays in English :)\n. Thanks for reading carefully :)\n. Thanks!\n. thanks, things like that happen even when you are careful about it :)\n. Sorry for late answer (maybe you found it out yourself already).\nImpress.js supports scaling down to fit window size. I wouldn't really call it 'responsive', because impress.js doesn't work well on mobile devices (because of lot of 3D styling), so mobile devices will not run impress.js in most cases and fallback styles should be provided to make slides accessible (and readable) on mobile.\n. sorry for such a late anwser. I see that you examples are not on line anymore.\nIn theory setting <div id=\"impress\" data-min-scale=\"1\" data-max-scale=\"1\"> should disable scaling impress.js when window size is changed. Setting data-width and data-height will not be needed in such case as these are only used as reference values to count the scaling.\nSo it is also up to you to make your slides in proper size.\nIt's hard to help without the example, so if you are still having this issue, please put example on line and I'll have a look.\n. Thanks for giving impress.js a try and good luck in the future.\nThe best way to learn is to learn from your own mistakes, so no worries :)\n. Hi, I can't say much more than that such issues happen with CSS 3D (especially in Firefox) when there is large number of steps (and their positions in 3D are overlapping - one behind another).\nThere are several bugs opened for such cases in Firefox:\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=810685\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=904304\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=689498\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=725299\nYou can also comment on them, give more examples (like your cases) and hopefully we will get them fixed at some point.\nI don't know any workaround for that (for some cases turning off opacity on slides helps, but not always).\n. @tgfisher\nTo disable keyboard navigation you would need to edit impress.js code and remove or comment it out. Unfortunately there is no other way to do that.\n. @Tantacula \nSorry, I don't know what is fancybox gallery and how it is related to navigation in impress.js.\n. hi @sk58 \nCan you give any example where the problem with overflow happens? I'm not sure if I understand what do you mean by this issue.\nAnd when it comes to polyfils for IE10.\nAs far as I can see IE10 already supports classList, so the only missing API is dataset.\nI found two implementations:\nhttps://github.com/adalgiso/html5-dataset\nhttps://gist.github.com/brettz9/4093766#file_html5_dataset.js\nI haven't tried any of these, so I cannot say if they work and if that's the only thing you need to do to run impress.js in IE10.\nIf you will have some time and possibility to verify it, I'll be glad to hear about the results.\n. I can't find it now, but I think I've seen bug reported for Firefox about it.\nOr maybe it was other one 3D related, they have quite a few.\nYes, it seems that overflow: hidden in Firefox doesn't work if you have 3D positioned elements inside.\nI don't know if there can be any workaround for that.\nThe only one that comes to my mind would be to put impress.js presentation into an iframe, and have this iframe on the main page.\nSo the iframe will be working as a div with overflow hidden. It's not a nice solution but maybe will work in your case.\n. Transitions between steps are done fully be the browser using CSS transitions. Any problems with performance of animations will depend on the browser, operating system, even on hardware in your computer (especially graphic card), especially if you have many steps in your presentation.\nSo unfortunately, I don't think it's a bug related to impress.js and I can't help much about it.\n. @Ank13 \nAvoiding scales bigger than 1 is quite good approach not only from the performance point of view.\nWhen you are making things bigger then they actually are (scales bigger than one) you will loose the quality - images will look \"pixelated\", fonts may get blurry, etc.\nUsing scales always smaller than one makes sure that things are always made smaller than they really are. \n. It would be hard to help without seeing an example on-line.\nRefreshing a page when slide changes is not a very good idea. It may help in a case you have - when you dragged a presentation and wan't to 'reset' it to initial position, but this refreshing will work any time someone clicks or moves to next slide. And it will totally break the whole presentation - on every slide change presentation will be refreshed.\nI guess you would need to find another workaround for that. Maybe reseting this 'draggable' position when step is entered. But to help with coding that I would need to see how you use it.\n. That's true - there is no such functionality built into impress.js itself, but the script you found is a very good solution for it.\nThat's exactly how I'd like to see extensions for impress.js done. So use it - it should work as you need.\n. impress.js have never worked on iPhone, and it was not really a problem of support for 3D CSS but the browser and memory issues. It may have changed with new iPhones having more memory and different browser, but I didn't tested impress.js on it yet.\nFor now, impress.js works in fallback mode (showing static content) on mobile devices.\nBut it should work on iPad.\n. Thanks @Beiyi, I'm pretty sure impress.js would work good on newest devices, but it may be hard to detect if presentation will not crash the browser. Because it's just a memory issue, meaning if you create many slides in presentation (for example with big images) it may also crash on you iPhone5C.\n. Thanks for suggestion and for gist code.\nI'm right now quite skeptical about adding many new features to impress to handle such corner cases.\nTo be honest, I still think there is no much benefit in viewing fancy impress.js animations on mobile browser. As it is quite nice on iPad size of screen, on a phone there is not much use for it. That's why I prefer static, non-animated fallback for mobile that is currently built into impress.js - so impress.js doesn't start at all on mobile devices and allows to show static content of the presentation, that is fast to render and easily accessible.\nAnd, as you've shown, if someone would like to implement memory-optimized presentation (by hiding all steps except visible one and its siblings) it can be quite easlity achieved outside of impress.js.\n. @bilus What should I reconsider? CSS 3D transforms that are a base of impress.js take up huge amounts of memory and some presentations on some devices will not work. There is nothing to reconsider here unless I totally change the way impress.js works.\nI'm sorry to hear that it have given you a headache on launch day, but impress.js README has quite a large and detailed section about browser support.\n. It has nothing to do with Bootstrap, but thanks :)\n. Can you provide some example of what you mean?\nSetting data-rotate should only affect rotation of element.\n. Now I see what you mean.\nBy default steps in impress.js presentation don't have any width set. That's why their width may render small (as the width of longest word in slide text). That's how browser renders elements that are absolutely positioned and don't have any width set.\nSetting viewport width to 1024 doesn't change that. It's only a clue to impress.js how big are your slides so it can scale them properly, but you need to use CSS to set the width you want.\nAs you can see in CSS file, the styles for .slide class (steps with white 'slide' background) have width and padding set in CSS, that's why they have width properly set.\nIf you want to have your steps to be 1024px wide, you need to set in styles, for example as .step { width: 1024px; }\nImpress.js only sets styles needed to position steps in 3D and to animate between them. It doesn't set any styles to tell how given step should look like (for example what width it should have).\nI hope it helps.\nI'm closing this issue now, but don't hesitate to comment if you have any other questions of issues with that.\n. As I understand you'd like to have elements in HTML that would be positioned in 3D (like impress.js steps using data-x, etc attributes) but not being steps of presentation?\nCurrently it's not possible unfortunately. Impress.js only positions steps in 3D. \nSo at this point there are two options.\nOne would be to create these elements as steps but define them in the end of the presentation. This way they will be positioned by impress.js and they will not be shown as steps when moving between real slides of the presentation. But you will have to stop presenting at your last slide. Cause moving to next one will show your additional element. So it will be able to navigate to those elements.\nOther option, to avoid navigating to those elements, would be to add these elements inside of your steps (for example step that is most close to it) and use CSS styles to position it relatively outside the step.\n. Thanks for suggestion, but I don't think impress.js README is a good place to promote this, or any other editor.\nI think users will know how to use their editor of choice to open impress.js source.\n. I'm not really sure what you want to achieve with the code on first part. Can you explain it in more details?\nYou want to automatically move from step to step?\nWhen it comes to the second part, the CSS code you tried can't work - it looks for not active steps inside the #slide element (which is wrong).\nImpress.js provides a special class on body element based on current step id. For example if given step has the id of 'work', body element will have class of impress-on-work.\nSo your CSS code could be written like this:\n.impress-on-slide .step:not(.active) {\n    opacity: 1;\n}\nAnd this should work as expected.\n. It seems that there is more than one element with class active on a page, so your code:\njavascript\nvar page_step = jQuery(\".active\").attr(\"id\");\naccesses not active step, but something different (like: li.arconix-portfolio-feature active)\nIf you change that line to:\njavascript\nvar page_step = jQuery(\".step.active\").attr(\"id\");\nit should work, as it will only take steps into account.\n. This is not directly possible at this point. But, as @valkirilov suggested, you can put your 'non-steps' in the end of presentation and never move to them.\nOf course, they will be accessible via keyboard, but during your presentation you will just not move to them.\nSuch feature was proposed and discussed couple of times already (you can probably find other issues about it here and some workaround discussed there).\n. Can you provide a link where issue can be reproduced?\n. The fact that MS would probably like to kill XP and make us all buy new PCs with Windows 8 doesn't change the fact that a lot of computers use and will use XP for years to come.\nIn fact - impress.js was developed on XP ;)\nWhen it comes to this issue. It seems that it's a Chrome bug that perspective is not working correctly.\nI've checked it myself on some CSS 3D examples and they are all not working in Chrome on XP, some even are saying that browser doesn't support CSS 3D.\nThere is even a bug reported for that:\nhttps://code.google.com/p/chromium/issues/detail?id=96200\n. Currently the easiest way to get current step is to find a step element with active class on it.\nAt this point I don't want to add new API methods, because I'm planning to do some refactoring to make impress.js more flexible and configurable. But I'll think about exposing current step (and it's index) from new API.\n. Hi Jacek,\nIn very first versions of impress.js I was also using history.pushState() for changing the URL, but there were some problems with that in some browsers.\nUnfortunately I can't remember now what it was - I would probably have to check commits history for some clues. But there were some browser issues that were preventing history (back/forward) buttons from working as expected in Safari - or something like that. That's why I switched it to hash change.\nMaybe the issue was fixed in newer browsers and pushState can be used safely. I'm not sure. That is something that would have to be verified.\n. @FagnerMartinsBrack so if I understand to code right, your approach is to remove the id from an element that is about to be shown (so when URL changes it's not matched by the browser) and than setting the id back?\n. In the time impress.js was developed Android browsers were crap. Including Chrome. And even though they said to support CSS 3D etc, it didn't work at all.\nThat's why Android is currently 'blacklisted' in impress.js code.\nThere are two ways you can try to make it work:\na) tell Chrome in settings to pretend to be a desktop browser - this will workaround impress.js check for android\nor\nb) remove |(android) from this check: https://github.com/bartaz/impress.js/blob/master/js/impress.js#L182 in impress.js code\n. It's most likely the memory issue. Every element positioned in 3D creates a layer for rendering that takes up memory. Mobile browsers may prevent taking too much memory of device by simply crashing - happens on Mobile Safari, too.\nThere is not much we can do except avoiding too many elements.\n. Yes, this forces document (and body element) to have height of whole screen.\nWithout that for example gradient in body background is not positioned correctly in the middle of the screen.\nThe Chrome has an issue that some elements positioned in 3D appear 'behind' body element and are not clickable.\nI don't know if there is any fix or workaround for that.\nYou can try setting pointer-evens: none on body (or html) in CSS - this will prevent catching any clicks, and pointer-events: auto back on #impress or steps or any other elements that should be clickable.\nThat's a little dirty hack, cause it makes all elements unclickable unless you set pointer-events back in CSS. \n. Don't use demo styles blindly without understanding everything what is there ;)\nRemove these lines from CSS file:\nhttps://github.com/bartaz/impress.js/blob/master/css/impress-demo.css#L664-L686\nBut be aware that this may cause some issues with clicking on step elements in Chrome.\nYou can also without removing these lines 'enable' mouse events on elements by giving them pointer-events: auto in CSS.\n. Don't be sorry, it's me who included this dirty hack into CSS - it's confusing to lots of people ;)\n. Getting rid of arrow navigation is the easiest workaround for that.\nIt may be possible to create some 'right arrow' event handler that will prevent any action when the first slide is shown, but I'm not sure without checking if that would work. \nSo, to keep your punchline safe just go with space only navigation.\nHave fun and good luck (with the punchline) ;)\n. Thanks\n. Thanks. \nWiki pages can be edited by anyone, so feel free to add it here:\nhttps://github.com/bartaz/impress.js/wiki/Examples-and-demos#wiki-authoring-tools\nBut if you can stick to normal font size it would be great ;)\n. Yes. It's how impress.js works.\nI don't know if that's that important when the URL changes. Of course, the action of changing happens when user hits the key, but the content of the slide is visible when animation finishes.\nI don't see any benefits of changing the URL immediately.\nAnd the reason it was done this way was a Chrome bug. When the URL was changing before the animation Chrome would store the history change during the animation and there was a (very visible) lag in the animation. Maybe the bug is fixed already and it could be changed, but I don't see the reason.\nIf you have any reasons why it would be better to change the URL immediately let's talk about it.\nAnd when I have some time I can check if the Chrome issue still happens.\n. I'm just wondering, why do you want to set perspective to 0?\nPerspective defines the virtual distance between the viewer and the 3D scene. If you set it to 0 it would basically break any 3D effect.\n. Playing with margins would not affect how content of the slide is displayed because it is always positioned in the middle of the screen.\nIn default impress CSS all steps have width defined to 900px with 40px padding:\nhttps://github.com/bartaz/impress.js/blob/master/css/impress-demo.css#L168-L169\nSo can change these values to get more space - for example by changing the width of your slide to make it wider, so all of the content fits.\n. Unfortunately not.\nSlides information is read when presentation is initialised (with impress().init()) and it can't be changed later.\nSo in theory it is possible to alter data- params or add slides with JS, but only before presentation is initialised and started. After that they cannot be changed.\n. Can you give some more details?\nIt happens for you on impress.js demo page or in your presentation? If it's your code can you provide link to some example where it happens?\n. At the moment events don't have any additional impress-specific data, so you only know the step that is a target of the event (so the step you are leaving).\nBut I think you may be able to achieve your per-slide background using CSS only.\nEvery step has an ID and there is a class being set on <body> element when presentation moves to given step.\nLet's assume you have a step with ID first and second. When you are on the first slide <body> will have class impress-on-first, when you leave this step immediately body gets the class impress-on-second. So I think you can add your per-slide backgrounds (with transitions) based on these classes on <body> element.\n. Turning latex into HTML is totally different area from what impress.js does.\nIf there are (or where) JS libraries that would turn latex code into HTML they could possibly be used together with impress.js but for sure built in support is not something I consider.\n. I haven't tested impress.js with mathjax.js but I don't see why it wouldn't work - assuming mathjax just renders into some kind of HTML (canvas, svg) and doesn't mess with impress.js 3D transforms.\n. In theory it shouldn't matter. Of course assuming that all the devices you mean are using the same fonts.\nTo fit into screen impress.js basically scales whole slide down, so it should be a difference if inside the slide you use em or px.\n. thanks :)\n. It can be related to different things - absolute positioning, 3D transforms, etc.\nCan you make a version with your CKEditor toolbar on-line somewhere so I can have a look and debug?\n. Issue is caused by pointer-events: none being set on body element in CSS.\nThis was done because of some Chrome bug and it prevents clicking on ALL elements.\nLater on there is pointer-events: auto set on impress.js elements - to allow clicking inside steps.\nYou have two options: \n- remove pointer-events: none from body element. This will make clicking working as normal in browser. But it may mean that Chrome bug will show up (some slides were not clickable on overview) - but that's quite minor issue.\n- add CKEditor toolbars to the list of CSS selectors with pointer-events: auto. This will make them clickable, but keeping clicks disabled on anything else. This should make CKE work, but some time later you may again have similar problem (anything outside of impress.js slides will not be clickable).\n. Are there any errors in browser console or anything?\n. What do you mean by running js doc by itself?\nimpress.js runs in a browser, it needs HTML and document to run.\n. If you tried to send it as an attachment it probably didn't work - you can't send attachments to github.\nYou would need to put it online somewhere and send a link.\n. I don't know how much flexibility in positioning your editor allows, because when the steps are in 3D, rotated, etc it may be very hard (or impossible) to generate overview of all steps (as they may be invisible in some positions).\nSo overview mostly makes sense in 2D case.\nAnd in such 2D case it shouldn't be very hard to calculate. You have all the positions of the steps, so you can calculate the center of the presentation (based on min and max X/Y positions). Also min max X/Y give you the size of all the presentation, so you can calculate the scale. \nFor example default dimensions of the slide are width: 1024 / 768, so if your presentation is 7600 px high your scale needs to be 7600 / 768 = more or less 10. \nI can't give you exact math equation to calculate it out of my head without checking, but it should work more or less like that.\n. Yes. The styles for a 'slide' are 900/700, but a screen size is assumed to be 1024*768.\nThis means that if your screen is bigger impress.js will make everything bigger automatically.\nAs I said before - with 3D rotation and a lot of 3D positioning it is very hard to generate automatic overview, as it's quite possible that you will never show all of the slides (for example if they form a cube).\nFor a 2D case it's exactly like you said - calculate the difference between lowest and highest data-x and you get a width. Divide it by 1024 (this is the screen width) and you have a scale (for width).\nYou can do the same for height, and divide by 768 to get a scale for height. \nDepending on the layout these scales can be different, to make sure everything fits on screen you need to choose the one that is bigger.\n. I'm not sure if what is your case and if that will help but try:\n.step img {\n    max-width: 100%;\n}\nThis should make the image width fit into steps width.\n. data-x etc attributes are used only on steps.\nTo achieve what you want you would need to put your images in a step element and use CSS transforms to position them.\nFor example:\n.image-one {\n    transform: translateX(200px) translateY(100px) rotate(45deg);\n}\nTo support older browsers you would need to add prefixed versions like -webkit-transform, etc.\n. Thank you!\n. Make sure you run this code before impress().init() is called.\nImpress.js reads elements positions when it is initialized, so when position attributes are changed later it will not work.\n. It depends if you want to achieve this with CSS only, or by using JS to add some class to an element (like in animate/magic examples).\nFor CSS it's already used on impress.js demo (http://bartaz.github.io/impress.js/#/ing). Impress.js adds class present to the step when it's showed (after the transition to it finishes), so it can be used to start transitions on elements on this slide.\nIn impless demo CSS it's here - https://github.com/bartaz/impress.js/blob/master/css/impress-demo.css#L316-L378\nAnd (as seen in the code you can even control the delay of transitions with CSS).\nIf you want to use JS and add some classes from animate or magic, you can use impress:stepenter event that is triggered on any step when it's entered.\nYou can use clean DOM API for that:\njs\ndocument.getElementById('mystep').addEventListener('impress:stepenter', function(event){\n     var step = event.target;\n     step.querySelector('.button').classList.add('animate');\n}, false);\nor jQuery if you use it on the page\njs\n$('#mystep').on('impress:stepenter', function(){\n     var step = $(this);\n     step.find('.button').addClass('animate');\n});\n. For jQuery it should probably be without 'false' in the end (sorry, it was my mistake during copy/paste).\nI was typing it from my head, so possibly I could make a mistake.\nIt depends on what you are trying to do.\nTo what element do you want to add class 'animated'? To step element? Something inside the step?\n. If adding to the step it would be step.addClass('animated').\nIt's hard to guess what is wrong without seeing any code. Can you by any chance put it on-line somehow? Or paste simple example to something like jsfiddle so it will be easier to see your code and debug it in the browser?\n. Try $(\"#visitas\").on(\"impress:stepenter\", function(){ $(this).addClass('animated') });. This should add 'animated' class on step element. But I have no idea if it will properly trigger animate.css animation or not. For this you would need to have full example with your HTML, styles, scripts, etc.\n. It's not possible in impress.js. You only have the control over the steps, transition is done automatically by the browser.\nYou could workaround that by adding an empty step between those two.\nSo in your example you would have:\n1. step with x=0, y=0, scale=1\n2. empty step with x=50, y=0, scale=2\n3. step with x=100, y=0, scale=1\nOf course this will mean you would have to hit 'space' or arrow twice, because animation would stop on empty step 2.\nOr you could add a script that would automatically move to step 3 from step 2.\nI don't know if it helps :)\nThere was a jmpress project - a jQuery port of impress.js that had much more configuration options, maybe they would be able to give you what you need.\n. Thanks for careful reading :)\n. Hi @superandrew, \nYou are right, there is no way to 'reload' the presentation when attributes change.\nI haven't looked into it in detail, but it seems it's mostly caused by this line:\nhttps://github.com/impress/impress.js/blob/f9c41968eb0f06b1c20e3f631e1d7e5a464baf55/js/impress.js#L333\nBasically, if impress was already initialized for given root element, it's not initialized again. I guess that removing this check (or adding some parameter to force reload) may allow to use init() again to reload presentation with new data. But I haven't checked if that will lead to some issues in other parts. Hopefully it shouldn't.\nI think there was similar discussion in issue #373 about updating data of single step.\n. Hi @torbjornlager,\nThanks for really detailed and kind of 'mathematical' description of your issue :)\nUnfortunately I don't think that what you need is possible. And it's not really a problem with impress.js - I think it would be hard to achieve with any web-based presentation.\nWhen you are on your slide S browser remembers its URL in history, you load a page from link L and now you want to get back to the presentation. Browser remembers last URL to slide S, so it load it. There is no way for impress.js to know, that you actually want to show S' instead of S.\nThere are couple of 'workarounds' I have in mind to approach this issue:\n1. instead of having a link L on slide S, but another slide between S and S' that would contain an iframe with page L loaded in it - it's not the same as loading it in whole window, but maybe it will be enough\n2. if you control the page under link L maybe you can place a link there that would link to slide S', so instead of using back button you would use this link\n3. if you can't or don't want to put a link on this page maybe you can have a bookmark in the browser to slide S', so during the presentation you can use that instead of back button\nIn theory, there could be the way (using impress:stepenter event) to detect that when slide S is loaded and it's the first slide to be shown (we can guess that that's the case of using back button) then automatically move to slide S'. But that sounds complicated and may lead to unexpected results (all external links to slide S would actually show S').\n. @henrikingo You are right, it works like that. But what was requested is different case.\nOriginal issue is about having a linked page kind of as a part of the presentation, so when you go back to impress.js it shows next slide, not the same.\nIn case of impress.js demo it would be:\n- I navigate to slide 5 with link to prezi.com\n- I click on the link to prezi (to show how it looks like)\n- I navigate back to impress.js and I expect it to show slide 6 to move forward with presentation.\nAs I mentioned above - it could be possible with some workarounds, but is quite tricky case to be covered in impress.js itself I believe.\n. This may not be very easy.\nImpress.js was aimed as presentation tool, so it currently doesn't have any 'destroy' functionality built-in.\nWhen it runs it positions slides in 3D, adds some styles to body element and sets up event handlers (for keys and URL change).\nIf you don't care about presentation content you can simply remove the whole presentation from the DOM when it finishes and reset body styles (body.style.height = body.style.overflow = '' should be enough). The biggest problem will be with event handlers, because they are not easily unbindable - unless you edit impress.js code and make yourself some function to do it.\n. See #435\n. Playing with pull requests?\n. Lovely ;)\n. all you need is love ;)\n. Thanks for reading carefully :)\n. Thanks\n. Hi @Emyleen, sorry he had to wait so long.\nI don't know if you got your answer somehow or figured it out.\nIf I understand your question, the code you need would look something like this:\ndocument.getElementById('my-step').addEventListener('impress:stepenter', function(event){\n    // this event it triggered when step is entered\n});\nImpress.js sends impress:stepenter event on any step element that is entered, and impress:stepleave when step is left.\n. Hi @aelfric, thanks for starting this discussion.\nIt's true that browsers may behave differently and have some rounding issues when applying 'real number' transforms, but I'm not sure if changing impress.js to use toFixed(1) is the right cure for that.\nIt's good that it helped in your case and for sure this loss of precision will not be noticeable, but you still have fractions, so in some other cases - different styles, different arrangement of slides, different scales, maybe even different browser having an update - it may still show some visual glitches.\nSo, thanks for posting this, maybe others with similar problem will be able to use your trick, but I'm not sure that it's needed in impress.js code. \n. Thanks!\n. Cool, thanks.\n. Thanks, \"too\" is already fixed by different pull request and I think 'learn' instead of 'learning' is much more 'Yoda' style ;)\n. Hi guys.\nThanks for starting this discussion.\nAs much as I'd love to move this project forward on my own - especially that I had a vision how it can move forward - I'm pretty sure it's not likely to happen in any predictable future.\nI was never very quick about accepting feature pull requests, because I've seen how quickly impress.js would be bloated with dozens of options just to make it work for various edge cases.\nThat's why my approach was rather - if you have an idea how to make impress.js work better for you, then fork it and make it better for you.\nAnyway, for my surprise even that project is couple of years old and honestly speaking wasn't actively developed for almost whole this time it's still very popular, people are interested in it and discover it as something new and fancy. And three years in web industry is ages!\nProbably one of the things that makes me proud most about impress.js is that has a tendency to attract people and make them interested in web technologies even if they didn't program before. So for sure I wouldn't like this project to just slowly and quietly die. Which would likely happen if it is left in my hands ;)\nSome time ago I already had an idea to open impress.js for community, add more collaborators and let them build impress.js how they would like to see it.\nFor that reason I got created impress organisation to move project there from my personal github account and make it a new home for impress.js and related repositories - because 'my vision' was to make impress.js core as small as possible (focused on positioning steps in 3D and moving between them) and implement rest of the features as optional extensions.\nSo maybe it's time to start making it happen.\nThe biggest problem I see for myself now - is how to find people who will not only just want to add new stuff to impress.js but will take a good care of the project.\nAny suggestions welcome.\n. > To make your vision clear it would be nice maybe to start closing a few issues or pull requests with the reasoning (also for triage) and provide some written stuff that clarifies your vision in detail.\nThe thing is that I don't think that my \"vision\" should be that important anymore, because that what was basically stopping impress.js from getting new features.\nSo right now my 'vision' is to make impress.js more open and extensible. So people could more easily build new stuff for it and on top of it. But I'm sure that what it means is deep refactoring, new API, some 'plugin' mechanism maybe... That's quite a lot of work.\n. @Terrycloth there is already an organisation impress that I created for the very same reason.\nI'm planning to move impress.js repo there and open it up for maintainers.\n. @seyisulu @FagnerMartinsBrack \nHi guys, thanks for the interest.\nYes, the impress org is still empty - I want to test the move with some dummy repo before I move whole impress there, but I have other priorities now.\nVery good suggestion about documenting API - I guess both in a current state and the 'dream' API with possible use cases.  If any of you have any ideas for that feel free to start writing things down somewhere on the wiki https://github.com/bartaz/impress.js/wiki\nDon't worry about the structure too much at the beginning, we can treat it as kind of a brainstorm now and clean it up when we see where it is going.\nThanks!\n. @Pierstoval thanks for confirmation.\nActually I was thinking about forking it back to my account from organisation, to keep 'my copy', but I'm aware that that will break link redirection.\n. Hi, things are hopefully going to happen quite soon.\nImpress.js will be part of Rails Girls Summer of Code this year, so (assuming that at least one team will be accepted) some work is going to happen during summer time. For sure I hope to get some bugfixes and maybe some new features implemented.\nAnyway, for me it will be at least good motivation to move the project to organisation and do some work around it.\nSo sorry for all the delays and thanks for the patience ;)\n. @DuncanMacWeb Just to clarify some things.\nProject plan created by RGSoC teams for the applications was based on current state of the project. So (unfortunately) I don't want to many changes to happen before the summer starts. I'm not sure if I'll be able to mentor RGSoC teams when at the same time other changes will be happening in the project.\nFor me RGSoC is a potential way to move project forward and find future contributors.\nAs far as I remember in the beginning of May RGSoC teams will be announced, so I'll not if and how many people will be working during the summer and I'll be able to make further plans. \n. Hi folks,\nimpress.js has now a new home at https://github.com/impress/impress.js \nAlso Rails Girls Summer of Code is starting soon, so I hope to make some moves and updates during next couple of months and hopefully this will allow me to make impress more open to contributions and invite some collaborators to the organisation.\n. @FagnerMartinsBrack thank you for your persistence despite my total lack of response or action.\nI'm sorry it turned out this way. Having best intensions was not enough and I'm pretty aware that I failed as a maintainer of this project. It's not true that I don't care about it, but it hasn't been actively developed in almost 4 years and I do have other priorities now.\nBut it's clear that right now it's me who is blocking any progress here. And the only thing I can do right now to change is to ask others for help.\n@FagnerMartinsBrack, @Pierstoval, @bcipolli, @henrikingo - I've noticed you as the most active participants of the discussions around changes in impress.js. I'd like to invite you as contributors to this repository with full rights allowing you to take actions without waiting for me. Before sending the invites I ask only for your confirmation that you will accept it and make a better use of it than me ;)\nI hope this step will make it easier for future discussions and actions to take place.\n. @Pierstoval @FagnerMartinsBrack thanks for quick response guys, I'm right now a little lost in GitHub organisation teams/members management so I may have messed something with access rights, but you should get your invitations and have write access to repository.\n. Great suggestions. I once set up vary basic drone.io build for impress.js just to play with it and get code validated by jshint: https://drone.io/github.com/bartaz/impress.js/admin\n. Couple suggestions from me regarding next steps.\nBefore introducing any bigger or smaller changes our focus should be on cleaning up current state.\nThis means (including some of your suggestions):\n- Cleaning up Issues and PRs - there over a hundred of them. Sad but true - most of them will probably not go in. Solving bugs and (especially) adding new features should wait until refactoring.\n- Adding CONTRIBUTING.md (but I don't have any suggestions what should it say - maybe we can find some example from other repo) and LICENSE.md (with MIT only)\n- Cleaning up README.md - at this point it's probably unnecessarily long, maybe it should be split into smaller files (if we want to keep CHANGELOG for example)\n- Testing - I always find it harders to 'unit test' such purely visual code like impress.js (verifying that things 'looks' as it should) to it may be tricky, but thanks a lot for the effort already put into it @henrikingo \nAnd some ideas for the project future:\n- independent from other libs - from very beginning impress.js was create without any dependencies on other JS libraries (for DOM or anything else) and it would be great if we could keep that, especially with better and better support for new DOM APIs in newest browsers, which leads us to next point:\n- keep browser compatibility to bare minimum - I would put simple and clean code above wide browser compatibility, so my assumption was always to support the newest versions of the browsers assuming they handle 3D transforms (that should be all major these days)\n- mobile devices also got much better these days and should handle impress.js, but it's still very hard to predict what can happen - big and image heavy presentations may simply kill mobile browser and I don't know if there is any way it can be 'detected' in advance - that's why iPhone and Android are 'blacklisted' and get fallback only, but maybe it can be changed to be optional\n- I know it can be tempting to put a load of tools into the project (build, transpilers, and what not), but I would love to keep impress.js as simple as possible, the 'old school' way: \"here is a JS file, add it to HTML, init impress.js and it works\"; I know that at least testing may require some dev tooling, but let's keep it to bare minimum\n- clean, commented, unminified code - I know that impress.js is not the most basic piece of code, but it still attracts newcomers to web tech, so it would be great to keep it as much learnable as possible\nThese aren't strict rules by any means, but some points to have in mind when going forward.\n. Thanks for a detailed report.\nIs it happening for you also in the example presentation (home page of impress.js)?\n. @SergiuFunieru Thanks for the suggestion.\nWhen we are talking about this change, I had a look into these licences and from my understanding it seems that MIT license is compatible with GPL. This would mean that impress.js can only have MIT license and it could be used in GPL software? Or is it not correct?\n. I know that it can be released with two licenses. The question is does it have to.\nAs far as I understand MIT license (http://en.m.wikipedia.org/wiki/MIT_License) is compatible with GPL meaning having only MIT license would be enough for people to use it in GPL software.\nThat's what I want to clarify, because it will simplify licensing. \nBut of course I don't have anything against changing the wording to 'MIT or GPL' if both are there to stay.\n. @henrikingo Thanks for clarification. Impress.js started as MIT only and long time ago I was asked to add GPL too. At that point also jQuery was double licensed, so I took that as an example. But my understanding today is the same - MIT should be sufficient. If in any case it's not we can figure it out later.\n. @henrikingo it's already there: #511\n. By default touch events are bound to left and right side of the screen (without any buttons).\nSo if the touchscreen TV properly triggers touch events it should already work.\nIn case it doesn't - you don't need to create buttons on every slide.\nYou should create your buttons somewhere outside the impress root element and position them absolutely. Then you have to bind a function on click on these buttons to call next() or prev() API on impress.\n. Hi @patricebeutler, thanks for the commit. I'll have a closer look later.\nBut can you shortly explain to me how different it is from current step:enter and step:leave events?\nThey are also a functions that you can bind to steps. I'm pretty sure currently it is not possible to implement substeps using these events, but maybe with some small changes in how these events work it would be possible?\nI'm thinking that maybe if there is a possibility to 'cancel' leaving the step inside of the step:leave handler and show a substep instead it would work?\nWhat do you think? Would it be possible to turn your solution into using built in events?\n. You could attach the event to a given step directly to avoid checking the id inside:\ndocument.getElementById('someStepId').addEventListener(\"impress:stepenter\", function(){\n    // ...\n});\nThis may mean that addEnterActionToStep and addLeftActionToStep are quite obsolete as they do the same thing as events.\nBut of course it doesn't solve the substeps part.\n. Sure. I think if you the fix in same branch it will automatically appear in this pull request, so new one shouldn't be needed.\n. Thanks for reporting.\nBut I think that with your fix toNumber(0) will not work, because it will treat 0 as undefined.\n. If accessed directly from data attribute it would be a string, but at least before your change it was also working fine for numbers.\nBut maybe using isNaN(parseFloat(numeric)) as suggested by article you mentioned would help.\n. I think the easiest way would be to make a line part of one of connected steps (as a child element or pseudo element in CSS). And the line itself could be a long div with no height and a border as a line.\nA quick example to start with may look like this: http://dabblet.com/gist/8d09721284ca89e98129\nYou can also use CSS transform rotate to give the line some angle like on a diaporama you linked.\nHope it helps. Have fun!\n. In case of reveal.js it's simpler, because it assumes 2D layout of slides, so it's more natural to have horizontal or vertical navigation.\nImpress.js doesn't assume any layout of the slides. Currently it only assumes their order (based on order of them in HTML code).\nBut this is not the first time where someone asks for more flexibility in navigation. This would require some deeper changes in impress code - to stop assuming linear flow of steps (only use it as a default) and allow users to define other paths.\n. Thanks\n. LICENSE\nCopyright 2011-2015 Bartek Szopka\nReleased under the MIT or GPL (version 2 or later) Licenses.\nIt's mentioned in the end of readme file. But I should probably add LICENCE file to make it clear.\nhttps://github.com/bartaz/impress.js#license\n. I wasn't the one adding bower support and bower.json file.\nIt may be connected to the fact that version 0.5.3 (as released on GitHub with repo tag https://github.com/bartaz/impress.js/tree/0.5.3) doesn't have bower file at all, it was added later on.\n. Thanks for reporting.\nSo you mean that perspective is not supported as a transform function in IE but works fine as separate value?\n. Thanks, you could add it to wiki: https://github.com/impress/impress.js/wiki/Examples-and-demos#presentations\n. This is currently not possible.\n'Slides' in impress.js are 'floating' positioned in 3D space so there is no easy way to create a background that will move and scale together with slides.\nI haven't tried that but some workaround may be to create a one big slide with the background (for example the first one or last one) and place all the other slides as small on top of this background slide.\nIn such case this 'background' slide will be also positioned in 3D with other slides and should zoom and move when slides are changed.\nBut I can't promise if this would really work and look good - you may get some graphic glitches or pixelated background when it's scaled to be big.\n. Yes, there are couple of issues/PRs about relative positioning.\nMy preference was different - I didn't want to introduce any new attributes and use existing data-x etc with a different notation (similar to what jQuery has for animations). So for relative positioning you would write data-x=\"+=100 or data-rotation=\"-=45\". Having += or -= in the beginning of the value would mean that position should be calculated based on previous step.\nBut I guess discussion which solution is better and which could go into impress.js is something we can have later. For sure this is one of the most requested features.\n. I guess it's just a spam.\n. hi @henrikingo @FagnerMartinsBrack, thanks for this discussion.\nYou are both right. As @FagnerMartinsBrack said - I personally don't see such paging/progress functionality in the core of impress.js. Especially that it can be already achieved with a little bit of JS trickery and counting slides.\nAnd for sure I'd like to see impress.js more flexible and open for pull requests. Just at this point (without more flexible architecture) any additional feature will turn code into bigger spaghetti.\nUnfortunately I don't think I'll be able to make it on my own as I don't have time for that and even idea how impress.js should be refactored to make it all possible. I have maybe a very blurry view of how I wish this code could be organised, but it's not enough to make it real.\nMaybe we could just create an issue here for refactoring, have some discussion there and if anyone would be able to implement it just make it real? What do you think? \n. Currently easing of the animation between the slides is hardcoded as 'ease-in-out' here: https://github.com/impress/impress.js/blob/master/js/impress.js#L374\nIf you want to use any other CSS easing you can just change it there. It will change the easing of animation between all the steps. If you'd like to have different easings between different steps in one presentation it's not easily done with impress.js and would require much code changes.\nOnly easings supported by CSS will work with impress.js.\n. @alebaffa if you are taking about the links on wiki: https://github.com/impress/impress.js/wiki/Examples-and-demos - there is no need for pull request, it should be editable by anyone, so go ahead and remove links that are dead.\nThanks for checking it out!\n. Thanks for the fix!\n. There is couple of settings that manages scaling of whole impress.js presentation:\nhttps://github.com/impress/impress.js/blob/master/js/impress.js#L201-L204\nIn short - width and height are treated as default size of screen/presentation. This means impress.js assumes screen has this size and it tries to scale presentation so fit this size.\nAlso max scale manages how impress.js scales this presentation. Default value of 1 means that slides will not get bigger than their original size, even if the screen is bigger.\nSo to answer your question.\nFirst of all, try to configure width/height and adjust them to your screen size.\nOr make maxScale bigger to allow slides being scaled up above original size to fit bigger screens. But it may cause slides to look blurry.\n. It should work as long as you don't change the screen size.\nBecause overriding scale to fixed value means that impress.js will not adjust presentation size to screen size.\n. Thanks, but I actually meant 'notation' \u2013 'notation' of rotation value is data-rotation=\"90\". :)\n. @anjalyes \nCommit should only contain:\nif ( event.shiftKey || event.altKey || event.ctrlKey || event.metaKey ){\n    return;\n}\n. Thanks. Closing as this pull request was made again in #499.\n. Already merged in: 25213753747b0234373f291e1d964fa96fb9bc6d\n. It doesn't seem like it belong to impress.js.\n. I'm not 100% sure if that will solve the issue fully, but is worth trying - don't use scales smaller than 1 (like 0.1 in your case).\nWhen you do that your original size of SVG is made 10x smaller by the browser (and 'rendered' in this small size) - later impress.js makes is 10x bigger to properly display it. So you get this pixelated blurry image (just like you would if you try to scale up very small image).\nIf you use scales always bigger than 1 it means that browser scales up everything (rendering bigger than it is originally) and impress.js will scale it down to display it (to blurry pixels should be visible).\nSo - if in your case the smallest scale you use is 0.1 simply multiply all the scales in your presentation by 10. So scale 0.1 will become 1, 1 will become 10, etc.\nI hope it helps.\n. Try:\n```\n\n\u0418\u0441\u0445\u043e\u0434\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430\n\n\n\n\n\n```\n(add scale 10 to the step without a scale defined - it's 1 by default, and change 0.1 to 1)\n. I'm not sure which versions you mean - nothing major changed in years in impress.js.\nIt's possible that browsers updated/changed some of their implementations making impress.js supported in more browsers.\nIE10 was never supported out of the box as is didn't implement classList or dataset attributes from HTML5. I don't know if it changed, but probably didn't.\n. jmpress is completely separated project, rewritten from scratch as far as I know, so it has simply other requirements and browser support. \nSo for help with browser support for that I suggest consulting their repository: https://github.com/jmpressjs/jmpress.js\n. This pull request has too many unrelated commits in it.\n. Hi guys, thanks for all the work you've put in here: @henrikingo for starting and writing tests and @FagnerMartinsBrack for very detailed reviews.\nI just want to join the discussion here, because it seems that this review here is taking quite long and doesn't seem to move forward to finally merging it. So let me point some things to hopefully clean up the test code and have it included as a base in impress.\nFirst of all I treat this PR as just a beginning - setting up of QUnit and some basic tests for impress.js, so it can be extended in the future and anyone willing to contribute will know where and how to put new tests.\nFrom this point of view I would like to see the tests in separate JS file and not included in HTML as it is now.\nMy second biggest issue is with \"Impress Code API\" test, which is very big (with lots of internal functions), it's not clear for me what it tests, and it's quite hard to read. It seems to me that the sequence of the actions tested is coded in an array, and it's then performed and asserted, but the amount of nested functions makes it quite hard to understand (even for someone who knows impress.js). The fact that for example assertStepEnter and assertStepLeave use the value of i that is defined and changed outside of their scope is really confusing for me.\nOf course I understand that this complexity is partly caused by impress.js itself and the fact that it's features are quite hard to test (in terms of unit testing) right now.\n@henrikingo Would it be possible to change the \"Core API\" test from this 'loop-based' sequence into more coded sequence of actions and checks? This I think would make it more readable. Something like:\njavascript\nQUnit.test( \"Impress Core API\", function( assert ) {\n    // ... writing kinda pseudo-code here\n    root.addEventListener(\"impress:stepenter\", stepEnterMocked);\n    root.addEventListener(\"impress:stepleave\", stepLeaveMocked);\n    impress().goto(2);\n    assert.equals(currentStep, step2);\n    assert.ok(currentStep.classList.classList.contains(\"active\");\n    // .. more asserts here\n    impress().next();\n   assert.equals(currentStep, step3);\n   assert.equals(prevStep, step2);\n   // .. etc\nWhere stepEnterMocked stepLeaveMocked will be some simple handlers that would just store target of event in currentStep/prevStep. I know it may be more complicated because of async nature of events but maybe it would be possible?\nI'm also not sure about the need of setTimeout - maybe I'm missing something. It's true that impress.js internally uses events to set classes on elements, but these events are registered internally by impress.js when its initialized, so if in test we register an event (even on the same element) it should be called after internal handlers from impress.js. So when any external handler is called elements should already have the classes assigned to it. Is it not the case?\nThese are the things I would focus on in this PR to finish and include it.\nAny discussion about code style or comments I would leave for now. We don't have any official code style (and I myself don't use the same style I used when writing impress.js anymore) so this can be updated later. And in terms of comments it may be topic for another discussion, but I prefer to have them, especially when they tell why (or how) something is done - not what is done (which should be self explanatory from the code). \nSorry for this long comment, I'll try to keep an eye on this PR because it seems valuable for future changes to impress.js.\nThanks everyone for all the work you done here so far and let me know what you think about my suggestions here.\n. That's true - repetition (especially many times) is never a good sign. I don't want to be a devils advocate, but I would argue that 14 repetitions don't always mean 14 times more time, because short but complicated code may take similar amount of time to understand and do this single required change.\nAnd also if there is so much repetition in tests, maybe we are testing the same thing couple of times unnecessarily?\nWe need to find a balance between not repeating too much while keeping it simple enough to understand and change. The hardest part of programming I guess ;)\nBut the truth is (and I'm guilty too looking at my previous and this comment) that we are in my opinion writing too much text in this discussion not making much progress.\nClearly the \"Core API\" test part is a biggest point in this discussion right now and source of confusion.\n@henrikingo, I understand why you used loop approach to avoid duplication but in the current state it's quite hard to understand what this tests does (what it tests) and how to change or add anything to it.\nTo make test suite to be useful and used by other people (for example to require PRs having their tests) we need to make it simple - as far as it is possible with qunit and impress constraints. It's hard as far as we see in this discussion.\nI would like to have tests in impress.js, it's great @henrikingo that you managed to set them up and got them running in quite unfriendly asynchronous and animation based impress.js environment. First step - the base - is already here. I would suggest to - at least for now - leave the confusing \"Core API\" part and merge the tests without it. Or reduce it to single test without loop (just check if calling goto changes step and classes on it). This will give us the base to add another tests later and work on any repetitions if necessary step by step.\n. @Pierstoval sure, I wasn't aware that these comments are not shared across commit and files changed pages. They still appear there in PR thread.\n. Hi,\nYou are right, impress.js right now 'assumes' it's a presentation, so space key is detected as an action to move to next slide. You may also have same problems with arrow keys if user want's to move cursor in input field.\nI see two options how you can fix that.\n1. If it's a website it's possible that you don't need keyboard to change the 'slides' at all, on any section. If that's correct you can remove this part from impress.js code for yourself. You can safely remove this part: https://github.com/impress/impress.js/blob/master/js/impress.js#L689-L728\n2. If on other hand you would like to keep keyboard navigation (space bar, arrows) on the other sections of the page and only disable it for you contact form, you would need to add a piece of script to your page.\nAssuming that your contact form has an id of contact like that:\n<div id=\"contact\" class=\"step\">\n    your contact form here\n</div>\nUse such script somewhere on the page (for example after initializing impress.js):\n``` javascript\n\nimpress().init();</p>\n<p>document.getElementById('contact').addEventListener('keyup', function(event) {\n    event.preventDefault();\n});\n\n```\nThis event.preventDefault causes keyboard keyup event to stop in contact section, so impress.js doesn't receive it and will not move to next slide.\nI hope it helps. If anything doesn't work as expected let us know, we will try to figure it out.\n. RGSoC was meant for some Rails Girls Summer of Code work, but I guess it wasn't used at all, so it's safe to remove.\ndev was my main development branch, so all new commits were going to dev first, landing in master for releases. I guess at this point master is already newer than dev as some PRs were merged, so if we don't want to maintain separate development branch it may be free to delete too.\n. I guess it's hard to say if such rule will work. In some cases people may simply work on something and propose PR without an issue.\nBut I agree that because of current PR cleaning we may loose some feature requests from our sight, so it might be useful to create issues for such closed PRs so we or someone else may implement them in the future.\n. I guess it may be more useful to prepare issue and PR templates to help people list all important information we may need: https://github.com/blog/2111-issue-and-pull-request-templates\n. For sure the biggest value of code style is in consistency. Rest is details and preference.\nCode style I used in original impress.js code is quite dated, somehow based on jQuery (at least how it looked then) and it already evolved for me and I would do it differently now.\nThe biggest change to do (already mentioned in #453) is use of whitespace. At time of writing impress.js I thought it would be cool to use whitespace to keep indentation even in empty lines. It looked nice when having visible whitespace in editor. But it's quite painful to maintain, especially that even git itself complains about it and most of editors have an option to automatically remove trailing white space. And I do it now.\nSo for sure I would vote for no trailing white space and change that in current code base.\nApart from that I don't have much preference. Especially that it's quite likely I won't be the one writing code. Still it should be full proof (end lines with semicolons, etc) and readable. It would be helpful to have some automatic check and just use a code style that is default or easy to configure in some tool. I was just using jshint (which doesn't do much code style checks).\nSo I guess I would be more towards 2nd option - to choose something existing and adopt it, rather than having discussions on our own style and need to document it.\n. Oh, sorry for not noticing it earlier. It was quite a quick icon added when I created the organisation.\n@bkeepers thanks for heads up - I updated the logo to have higher res!\n. Thanks, this should obviously be done at the time of moving the repository.\n. @GuillaumeLeclerc @FagnerMartinsBrack this could be platform specific issue, may be even related to hardware differences. I checked in my Ubuntu 14.04 LTS, Firefox 45.0 and it seems fine.\nSo it's hard to say if the bug is in firefox, specific distribution of firefox, or more some hardware/platform configuration causes this.\n. Is this .github folder a common pattern supported by GitHub? I haven't seen it before.\n. Not yet unfortunately. This has been reported couple of times and for sure is on our radar as a feature in the future, but it's not possible with current impress.js.\nThe workaround to achieve that (other than doing it all in CSS) is to create a steps in impress.js presentation and put those 'background' elements in the end of the presentation slides list. So when you present you just don't navigate further than the last slide. This obviously has a drawback that is anyone else will navigate the presentation (for example on-line) they could access these.\nA workaround for that could be adding a custom handler for 'impress:stepleave' event on last real slide to navigate to first slide (and skip the ones that are meant for background).\n. @FagnerMartinsBrack \nSorry for keeping you that long without any answer. I added couple of inline comments. But these are not big things.\nI think these docs are already in a very good state and could be merged. We can work on the details later on. For sure it doesn't seem that there is anything wrong with the docs that would make something confusing or not working as expected.\n. @FagnerMartinsBrack it's nothing compared to my response time, so no worries ;)\n. Yes, this sounds reasonable. This information in README is long outdated.\nOne thing that it would be worth adding/keeping is some information about mobile support, which is hard even though mobile browsers do support all needed APIs and are evergreen.\nOf course, mobile support (for example should it be whitelisted) is a bigger topic for a separate discussion.\n. Thanks for the fixes @wub.\nI'm just not sure about removing ;) in two places. I think they work well in making things less serious.\nBut I get the point that maybe I shouldn't use them as punctuation, so I would suggest ending sentences properly as you did, but keep smiley after that. Like: Use the source, Luke! ;)\n. Pushed to master directly instead of PR, sorry for that.\n. Browsers may have 'full support' and still have bugs. 3D rendering is hard, relies much on browser rendering engine and in many cases on hardware (GPU) and it will be a long time until CSS 3D transforms will work consistently across the browsers.\nI tried to make it clear in README, this was and still is new stuff. And some big impress.js presentations simply push CSS 3D to the limits. It may not work. CSS 3D was first introduced in Webkit, then in Firefox, IE just added it recently. And that's simply the best order of 'support', but every browser has smaller or bigger issues.\nFor sure we should investigate such issues, try to find workaround if possible. Maybe the best that could be done would be to report a bug in browser (assuming that there is a public place to do that).\n. As far as I can see even Can I Use says that IE11 has partial support: http://caniuse.com/#feat=transforms3d\nI'm not sure, but the issue with preserve-3d may actually be causing the bug we are talking about here.\nSo for now this seems to be good reference point.\nIn my humble opinion impress.js won't be good for websites soon. Unless developers using it will accept that for some people it will not work, especially for big and heavy sites (many steps, big images, videos, lots of 3D).\nNot that I don't want impress.js to be something more generic, but because of technical restriction the recommended usage is presentation that you show from your own machine and browser you tested it in.\n. I'm fine with that. As you said, 1) doesn't matter that much at this point. \n. It's an interesting idea, bit kind of out of scope for impress.js.\nAFrame uses totally different rendering than impress.js. Impress.js is based on CSS animations and transitions, AFrame internally uses Three.js and renders in WebGL. Trying to support AFrame would mean complete rewrite of impress.js to support different renderers.\nWhile it may be interesting from technical point of view, probably it wouldn't be very practical.. Good catch, thanks!\n(and sorry it took us so long) ;). @FagnerMartinsBrack \nThanks for joining the discussion.\nThe project was obviously stuck and having a great plan of actions is not worth much when no one is doing them. So you are right, that waiting for a perfect test suite is just not moving project anywhere.\n@henrikingo in his fork has improved impress.js API and developed couple of plugins (including substeps, etc - that were often requested). So this PR (and others that will follow) are simply attempt to move his work back to upstream impress.js and let him develop it more here, where his code can actually reach most of impress.js users.\nFor now, not to break anything in master, it's all merged to a new dev branch that I suppose we will merge to master once all the code will be there and we will clean up any conflicts or broken things.\nAnd no need to be sorry - we all do it in free time so each contribution is appreciated.\nFor now I guess let's not 'overplan' or 'overmanage' on things we cannot deliver, and let's focus on moving the code that is already done back to impress.js.. @henrikingo I was just looking at this PR to ask the same question :)\nIf you are fine with the branch as it is right now, go ahead and merge it (I assume as a member of the organisation you can do it yourself).\nThe only unaddressed comment from my side is about possibly unnecessary global: window. Which you can address now or later, as you wish. It's not that important.\nIn future branches not to make you feel blocked on not getting answers/comments - when PR got approval already, just merge it once you feel you addressed all the comments that you feel needed addressing. Are you ok with such process?. Strut is not our project. It's an externally developed editor that uses impress.js (and other presentation libraries) inside of it.\nFor requests about it please contact owner of Strut project.. I guess in theory we could expose them inside the impress global namespace, something like impress.defaultConfig = { height, width, ... }.\nOn the other hand if we do it it may feel tempting to change them from outside of impress.js which may have some unexpected consequences.. I was thinking about something like this. Thanks for creating it!. @henrikingo Thanks. I'm fine with what we have, feel free to merge.. @steveknoblock Not sure what you mean exactly by 'overview feature', as there are no such 'feature' in impress.js.\nIf you are referring to an overview step in demo presentation it's just a manually added empty step of presentation positioned in a way to show all the other slides. Nothing more. No magic there, just tweaking data-* attributes until it looks good.. @henrikingo I'm ok with getting mobile check out of impress core. Mobile devices and browsers are way better then they were when impress.js was first created.\nStill, on many it won't fully work, but lets give users an option to support mobile as they want.. @henrikingo @FagnerMartinsBrack Sorry that I missed this thread earlier, last week was quite busy for me.\nLet's try not to mix too much emotions in this, as it's not very helpful.\nThere may be some misunderstandings between us, disagreements, but let's try not take it too personally because it's unnecessary for anyone. Every single one of us contributes their free time to this in their own way, and let's respect that.\nFor the sake of this thread about merging dev branch to master.\nI was hoping (I believe similar to @FagnerMartinsBrack) that we discuss and address at least some of things mentioned in #626 before the merge. But as I understand @henrikingo intention is to address them now, so I assume that it will happen before moving out of 'beta'.\nAnd because of master being in 'beta' I think it would be nice to have a note in readme that would point to last 'stable' release.\nAbout the comments about rigidness and outside contributions from @FagnerMartinsBrack.\nYou are probably right that this may happen. But it will be hard to avoid when codebase gets bigger and gets more features. Naturally it will be more 'scary' to newcomers.\nNow with plugin architecture maybe it will change once they settle in and are documented enough. But to see that we probably need to wait couple of weeks or months for some contributions to appear. Personally I don't expect much, because even that impress.js seemed to be quite popular as a project there was not really a 'community' around that. First I was the 'bus factor' and project stopped when I stopped. Having @henrikingo as a contributor is at least some way forward, because of his willingness to contribute code and maintain it.\nIt's better to have one developer active then endlessly discussing how to make code more approachable to contributors and have no contributors at all (in my opinion).\nAnd, getting back to the emotions from the beginning - if we want to attract more people to the project and have more contributions we need to try to be friendly and respectful for them. So let's start with trying this between ourselves :)\nSo to summarise, @henrikingo - what are the next steps?\nI'd like to see before we remove beta flag:\n\nissues/PRs addressing items from #626.\nIn the meantime possibly going through the backlog and looking what is fixed already by plugins and what can now be addressed.\nlooking into README and other docs to see if they are up to date with recent changes\n\nAnything else?. Thanks for all the fixes. Still, make clear that license is MIT in readme, so people don't need to look into license file just to know that. So make it Released under the MIT [License](LICENSE). - note the typo in file name.\n. Please note that before any key was handled we check for shirt, alt, meta etc modifiers and don't do anything if they are used.\nThis is a fix for an issue for example with windows Alt+Tab or mac Cmd+Tab for switching windows that was causing slides to move.\nWith your change bug will be back - Alt+Tab and Cmd+Tab will again cause slides to move when switching windows. Before you check for tab or shift tab you should make sure no other modifier keys are pressed.\n. It was reported couple of times: https://github.com/impress/impress.js/issues?utf8=%E2%9C%93&q=is%3Aissue+alt+tab\nIt seems it doesn't happen to everyone, so may be system and/or browser dependent.\n. The id of root element doesn't have to be \"impress\" (but is \"impress\" by default). It is configurable in impress \"constructor\".\nFor example:\nhtml\n<div id=\"presentation\"> ... </div>\n<script>\nimpress(\"presentation\").init();\n</script>\nIn theory there can be multiple root elements on a page with multiple instances of impress being initialized on them.\nBut at the moment keyboard events will work on all of them at the same time.\n. While usage based on default impress() is most common, I'd add a section explaining this \"constructor\" (or maybe more like a factory function) of impress.js.\nimpress( rootId ) is a function that builds API for presentation with given id of root element ('impress' by default).\nTo avoid calling it all the time it's worth storing it in a variable:\nvar api = impress(\"my-root\");\nIt's possible to have multiple instances of impress.js (with separate roots) on the same page:\n```\nvar firstAPI = impress(\"first-root\");\nvar secondAPI = impress(\"second-root\");\nfirstAPI.init();\nsecondAPI.init();\n``\n. I would add spacesgoto( stepIndex | stepElementId | stepElement, [duration] )to make it more readable.\n. I guess right now we depend on step classes. Maybe it would be worth adding more data to events (for example both steps for example asfromStep,toSteporcurrentStep,previousStep).\n. I'm right now not 100% sure what would.activebe duringstepleave` - in theory it should be always 'current' step.\nBut, step events are triggered on step elements. So it should be accessible always as event.target.\n. @FagnerMartinsBrack I'm not sure how substeps connect to multiple impress instances.\nImpress.js 'core' (the impress() factory function) supports multiple roots - meaning, you can create separate API objects for multiple root elements on the page, having multiple root elements initialised as impress presentations etc.\nBut of course global classes on body element may collide, styling and positioning may not work, etc. So even that it's technically possible I would probably not advertise having multiple roots on one page, because the result may be very unpredictable.\nBut for sure impress(\"something\") can be used to initialise impress.js on element with different id than \"impress\" and it should be mentioned in docs.\n. Relying on event.target is tricky for click events (because browser triggers them for the top element touched by mouse). But impress.js events are programmatically called on step elements by impress.js, so as far as I remember event.target should always be step on which given event was triggered. So it's not a 'workaround', but a feature.\nOnly additional info (such as nextStep, etc) may be needed as additional data on event object.\n. currentTarget is where handler is attached. So:\njs\nrootElement.addEventListener( \"impress:stepleave\", function(event) {\n    // event.target === step\n    // event.currentTarget === rootElement\n});\n. I've seen this comment and had similar feedback once or twice before.\nWhile I understand that the way I worded it may sound harsh a bit, but I don't fully agree with the comment.\n\"Use the source\" is not a way to say: hey, reverse engineer my code. Usage of impress.js in its basic form is writing HTML, and demo HTML shows all needed classes to use with comments explaining it.\nAnd the comparison to the car is not very accurate. As a user of a car you don't need to know how it works. You obviously don't need schematics. But impress.js is not just something you 'use' - you develop your code with it. It's a tool you use to build your own 'car' - so why not having schematics for it? ... but that's just a side note ;)\nAnd during this years I received much more positive feedback about comments in impress.js then negative so I'd keep the \"use the source\" link, Yoda in the demo and in source code.\nBut because of your hard work @FagnerMartinsBrack we have some docs now, so we should link to them here as well.\n. I think these two paragraphs about being 'developer' and looking into examples or editing tools are the ones that make the whole documentation message sound bad for those that may not found themselves experienced.\nSo I would suggest removing them and exchanging with a link to a API documentation.\n. @FagnerMartinsBrack @henrikingo Thanks for you input guys. I just commited an update to this section. Wanted to make a PR of it, but pushed to master directly thanks to GitHub UI ;)\nSorry for that. I hope it will makes things more clear about the docs and less offensive.\nFeel free to update the text.\n. Is this still needed?\nAs far as I understand JSCS was merged with eslint, so we should need only one config file.\nIf that's a quick fix maybe we could do it in this PR, if not consider if for some cleanup later.. Is this dependency needed? Do we use firefox from node, or does karma requires it?. I just realised we use jshint, not eslint - so never mind. Let's keep it as it is and consider eslint later.. I'm a bit suspicious for using '*' as a version number (and simply allowing any even breaking update to be install).\nI see that it's used on modules with major version 0 (which means that quite likely even minor changes may be breaking, so there is probably no need to lock on '0'), but for keeping updates safe maybe it would be better to lock the version to the exact version that it is now (and we know is working fine)?. Generally I would prefer the tests to be smaller (focused on one particular functionality or method) rather than one big test for whole 'core API', but I understand the complexity of the tests setup etc - and I suppose nature of impress.js doesn't make it very unit-test-friendly.\nSo I'm OK to leave it as it is for now not to block further merges, just wanted to leave it as a note for future consideration.. There is now uglify-es module for ES6 support, so we would need to switch to that to support it.\nNot that it needs to be done in this PR, but just a note for future.. I'm not exactly sure if keeping generated file in repo is a good thing.\nIt needs to be kept up to date with rest of the code (you need to remember to build it before commit) and having all the changes doubled makes PRs bit confusing.\nThat said, I understand the idea behind it (to have it ready to use), so I don't have any other solution now.\nMaybe in future we would be able to not have it in repo, but have it built and published to some CDN, so built version would be available on-line, while not being in the repo itself.. I don't remember now exactly, but I suppose browser: true setting is enabling all browser globals, so global: window should not be needed here.. OK. We are merging to dev branch anyway, so there is no risk of confusing external people at this point.\nIt looks like a nice and detailed documentation, thanks.\nI don't have time to read it all now, but will try to have a closer look later. (but we don't need to address it in this PR).. As far as I understand this API is part of impress.js (as a whole).\nThese are common utility functions used both by impress.js core (some of them are directly extracted from impress.js code) and others are shared by many plugins.\nI believe it's worth keeping them as part of impress.js to make plugin development easier - not to expect plugins will re-implement same things or rely on other libraries to provide this.. I think that 'Garbage collection' may be a bit misleading name for that utility - and that's why it may be confusing.\nIt's not reimplementing browser JavaScript GC. It's a library that allows impress.js to track all the events/elements that are changed when impress.js is initialized and revert them to their previous state.\n\ncan't we just keep track of the browser events and create a method to reinitialize impress.js\n\nThis is exactly what this utility does. It collects elements and events modified and created by impress.js (or plugins) and allows to revert them to previous state. Shortly speaking it enables us to have a frequently requested feature of 'uninitializing' impress.js and if needed running init() from fresh state.\nI agree that technically it's probably not a 'garbage collection' (becuase it doesn't automatically remove unnecessary or unused object/references). It's rather a registry of elements and events impress.js uses.\nIt would be good if we could rename it - at least to avoid confusing it with JavaScript GC and giving a false impression that it reimplements something that browser can do automatically - because it doesn't.. 'js/impress.js' is a generated file (built from src/impress.js and other source files), so please comment on source files rather then generated file.. And I don't mind it being a regular for loop instead of .forEach.\nEspecially that in cases like calling callbacks it's used to call them in specific order.. This, and next PRs from @henrikingo are going to introduce changes and new plugins.\nYes, in the end they should be properly documented. But we made a specific dev branch for merging these without releasing. So I'm fine with merging all the work first, trying it out as a whole and then finding the best way to document it - examples for plugins, API docs, etc.. lib (together with other API methods) are exposed to plugins, therefore ARE our public API.\nLibs are not only meant for internal use, but to anyone who wants to build a plugin. So in such case they become a part of impress.js API.\nYes, this means we need to support these and maintain them. Theoretically it will make impress.js 'harder' to change later (to keep backwards compatibility), but it's a part of the process of making impress.js more modular and extensible. We cannot change impress.js if we don't change something ;). I know what you mean.\nCurrently this file has enough documentation in comments to understand what it does and how to use it. So it's enough to give it a review.\nOnce we have a larger scope (of all the libs and plugins) it may be easier to decide what and how to document.\nIt's quite likely that because of 'de-centralized' nature of plugins also documentation will not be just one file anymore and will live closer to the code of individual parts.. reverse is reversing array in place which may not always expected result as it changes the array for later uses, which by itself is a 'moving part' to remember about.\nI agree that .forEach makes code more concise, but it also introduces additional function, which adds a bit of complexity by itself:\nelemenList.forEach(function(element) {\n   element.parentElement.removeChild(element);\n});\nSo it really has pros and cons and I'm fine with leaving it to @henrikingo preference and would certainly not block merging this PR on it.\n. Leaving the point about usefulness of util functions like $, $$, byId, etc aside.\nI think we can agree that if there there is a need to share some functionality and utils between plugins. At least if it is the 'garbage collector' that allows plugins to be correctly destroyed and clean after themselves.\nTo make it possible for such libraries to register themselves in impress.js some new method is needed to add them. Otherwise impress.js itself will need to be aware what libs to add, which is obviously not really scalable.\nI understand the need for addLibraryFactory. If we worry about this being exposed as public API we may 'hide' it and keep private until we think it can be used publicly.\nTo make impress.js more extensible it needs means (API functions) that add new functionality to it. In such regard addLibraryFactory is a part of impress.js core and valid addition to the API.. > If you're referring to the libraries that are already internal to impress.js such as arrayify, byId, $$ and $: what's the point on exposing them for consumers of impress.js? Is it just to make them not to type [...arguments], document.getElementById, document.querySelectorAll and document.querySelector?\nYes, in today browsers we probably don't need utils that and we probably don't need to expose them as public library utils. I understand that they are simply utility functions of current impress.js core moved to the library.\nI believe removing them now may affect rest of the plugins @henrikingo has ready to be merged, so again - I'm fine with merging it as it is and reviewing the bigger picture later to see what libs or utils can be removed in favour of native functions.\n. It's a bit hard from the name of it to understand what callback is it, why to add it, when it will be called.\nIt took me a while (and reading the code) to realise it's simply a callback called on teardown. So I would suggest renaming it to addTeardownCallback which will be more descriptive.. It makes sense in theory. And I would agree with such approach if we would be talking about new things being implemented.\nBut we are talking about a code that is already implemented, plugins that already rely on libraries, teardown, etc in their current form.\nSo it would require quite a lot of additional unnecessary work from @henrikingo to carve PRs down to only parts needed for a single PR and plugin.\nI suppose this PR feels quite big, because it lays down libraries for all plugins that come later. It will be simpler later to see PRs of single plugins and their usage of libraries.\nThat's also why I mentioned couple of times that in this case it may make sense to wait with some changes until we have more stuff merged. Because it's not new stuff being implemented and easily changed - it's code already implemented that we want to merge and possibly improve once we have complete picture.. @henrikingo I think my biggest complain or worry in this PR will be this GC API.\nFirst of all (already mentioned elsewhere) the name 'garbage collector' is a bit confusing and it would be good to rename it at some point (before we expose it publicly).\nFor the methods it has in API - it's really hard to tell the difference between pushEventListener and addEventListener without looking at the code of them.\nI'm not sure how flexible we need this API.\nIn theory, the only 'required' thing is addCallback - so that plugins can add a callback and clean up after themselves on teardown. Any other method (registering elements, events, etc) are for convenience.\nI don't know how 'convenient' we need this API to be as it already seems confusing.\nBut maybe what's confusing is names of the functions that are very similar to each other and it's hard to say what they do differently.\nI don't know if it's good that we mix low level 'registry' functions like pushElement, pushEventListener addCallback with wrappers over DOM methods appendChild addEventListener.\nIf we assume that plugins should use convenience methods for DOM operations, maybe we should expose only those.\nIf we want plugins to do their own DOM operations and only register elements/events, maybe low level functions would be enough?\nI'm trying to put myself in a position of potential plugin developer - and looking at this API I don't know what I'm meant to be using.\nI kind of feel it's about the balance of being more friendly to less experienced developer (having simpler API) or to more experienced one (having both convenience and low level functions).\nI don't have a good answer or suggestion, I just feel that in current form it may be confusing.\n@henrikingo What are your thoughts on that?. This is actually a bit more complicated case, as querySelectorAll doesn't return an array but NodeList that just recently got support for forEach, but only in Firefox and Chrome. So for IE it still needs to be transformed into array to use forEach.. Of course [].slice.call(document.querySelectorAll).forEach can be used, the point is - is it really simpler that a regular for loop?\nBut, let's leave these for loops aside as it's not getting us anywhere :)\n. Small typo in calll.. Right now it doesn't seem like reason or origEvent are needed - especially reason seems very arbitrary with 3 possible values.\nBut I assume they are necessary for some plugins to tell the difference of what triggered the transition?. I'm also not a big fun of this weight parameter, as it may be quite confusing for end users.\nLuckily - this is quite 'internal' API used by plugin developers only now.\nYes, it would be great to have plugins being independent, but it's a theoretical ideal state that in practice would be very hard to avoid. Impress is a library working in browser DOM and modifying it, and plugins will rely and modify DOM, so there will be side-effects by definition and therefore plugins may conflict in some areas.\nMoving freedom (and responsibility) of defining plugins order to impress.js user could be a 'solution' to this, but on the other hand it makes it harder for them to use plugins, because they would need to understand what plugins do internally. And really it's a plugin developer who knows best how it works and in what order it should be called. Yes, it has a downside of not scaling very well if external people would start to work on plugins, but honestly - we are really far from that and hopefully not many plugins would really need a control over when they need to be called (apart from internally developed plugins), so external developed plugins would be able to ignore weight altogether. . I don't like the fact that we are adding a lot of (kind of) internal api to global impress namespace, as it seems polluting it a bit...\nI know that these methods need to be globally accessible, but maybe wrapping them in some plugin namespace would work? Like impress.plugin.addPreStepLeavePlugin etc?\nAs previously - not something I want to be changed now (knowing the dependency on existing plugins), but something to consider when we make new plugin API released and public.. It's not clear that goto-key-list is a list of KeyboardEvent.key values. It would be good to mention what values can be used here for different keys - probably pointing to MDN documentation of KeyboardEvent.key would be enough.. I know that they are not part of api returned by impress() and it's good.\nAnd also, now looking at this I agree that it may be interpreted as kind of a plugin, so I'm fine with leaving it as it is. Maybe later we can have a look on what all methods are on impress object and see if it makes sense to move or rename them somehow.. I think the name swipe may be a bit misleading. It took me a while to realise what this method is doing and why it needs to be in impress.js core (not in some external mobile plugin).\nThe name this function adds some 'swipe' (or touch) navigation. But it seems (as far as I understand) moves the transition between two steps (for example while user is swiping).\nI feel a bit unsure about having it in main impress API, as it doesn't seem like it would be used by users, but rather then by plugins, but I don't really know how to approach it other way.\nIt it used by multiple plugins? If it's only for swipe maybe it would make sense to move it into mobile/swipe plugin that adds support for that?\nI guess what would be needed for that in public API would be some  additional move method , that would allow impress.js to move into any given position (like impress().move({x: 100, y: 200, z: 300, rotateX, scale...}). But... that seems like other work I guess.\n@henrikingo You probably have a bigger picture. Does it make sense to keep it in public API?. As it seems that the matter is more complicated, I don't mind leaving it as it is.\nBut I would try to think of some way to keep such methods more 'private' - at least not being so exposed to users.\nI guess the easiest way would be to not document them in official public API, only as part of API docs (if that makes sense)? Or - if there will be more methods like that keep them separate from rest of public API?. ",
    "jasondavies": "It's a pleasure. :) Don't forget to update gh-pages too!\n. ",
    "shama": "Thanks for the impressive code! :)\n. We have a little project over here and have solved this using a template mechanism. Here is an example. A possible solution to take into consideration if this feature is looking to get implemented into impress.js. :)\n. Thanks for the kind words @bartaz! I understand you not wanting to implement these features. Just letting you know our contribution offers still stand.\nFeel free to send more people our way as we are looking for more contributors. Hopefully we can alleviate some of the pressure on you.\nI'm sure you're tired of hearing this but thanks again for impress.js! ;)\n. @sokra deserves all the credit for that :)\n. Advancing on click was added in 0edcf9021ece57d68f86e67188f2cb20c5bee473 (although you have to click the actual slide to advance). You could create your own buttons and detect a click event then trigger the spacebar or left/right keydown events. :)\n. Ha! Well don't do anything on my account. I'm just another programmer that enjoys this project like yourself. I was just suggesting a workaround to accomplish your task. ;)\n. I believe @bartaz said he was working on the documentation in this issue: #22\n. - beforeChange() callback\n- afterChange() callback\n- canvas({ css }) to directly manipulate the canvas\n- slide( id, { css } ) to manipulate a slide\n. @bartaz Yes. Although now understanding impress is only for presentations my suggestions are likely not so useful. As a presenter wouldn't need to adjust the canvas or a slide during the presentation. I just like how you handled prefixing and thought it would be useful to provide access.\nI'll throw a vote for more callbacks though:\n- onStart() presentation starts (called once)\n- onEnd() presentation ends (called once)\n- onFirst() hit the first slide\n- onLast() hit the last slide\n. I ran into the same issue naturally ;) I ended up doing this: https://github.com/shama/jmpress.js/commit/365e9e813b77520cd1b809eb0ef1687a43cd48d0 I still notice a little bit of a lag but it's much less.\n. ",
    "lukeholder": "I actually just wanted to put this in front of you for consideration, a more robust navigational system would be good. When I have more time I can create such. Don't feel you have to pull this just yet.\n. ",
    "goshakkk": "+1. Also besides just touches on both sides, it should support left-to-right and right-to-left swipe gesture, for some people/sometimes that's more convenient.\n. ",
    "johan": "Excellent points. Don't be surprised if me or someone else drops a pull request for the low-hanging fruit mentioned above, though \u2013 I have found at least the iPhone 4S a remarkable power-house while playing around with stuff I first assumed that it would be under-powered for. :-)\n. @cykod's touchend demo indeed is splendidly smooth on an iPhone 4S; it just gets a very weirdly configured viewport to the content. Weirder than what you would get in, say, Chrome, if you set its viewport to the iPhone 4 native 960x480 using https://chrome.google.com/webstore/detail/kkelicaakdanhinjdeammmilcgefonfh for instance.\n. ",
    "grigio": "CSS3 Animations work smoothly on iPad2 ios5/4 and preventing zooming can be set.\n. ",
    "cykod": "Put in a ontouchend event to skip to the next slide and added in the viewport declaration to prevent scrolling and zooming just to see how it performed - other than the initial view size it seems to work excellent from a performance standpoint on my iPad2 & iPhone4, pushed to here: http://cykod.github.com/impress.js/ \nWill take a look at a real fix attempt tonight later unless someone beats me to it.\n. ",
    "greenido": "+1 to iangilman.\nI'll try to find some time to do something in this area :) It sounds like a good idea that will let many more people enjoy this cool js lib.\n. Very cool guys!\nI'm now traveling for the next 2-3 weeks but after that - I hope to kickstart this project :)\n. Very cool - will check it out over the weekend...\nOn Fri, Mar 23, 2012 at 5:20 AM, Harish Sivaramakrishnan <\nreply@reply.github.com\n\nwrote:\n@bartaz  Thanks for posting the link to impressionist.\nGuys, Impressionist is now on github and I am also looking for some help\ntesting this out. Please do take a look and log issues.\nhttp://hsivaramx.github.com/Impressionist/\nThanks\nHarish\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/issues/5#issuecomment-4652944\n. \n",
    "iangilman": "@greenido awesome! I'd love to see what you come up with, and I may be interested in helping out (if I can find the time).\n. @edumerco I think ideally the creation tool would itself be a web app, rather than a native app like Inkscape.\nThanks for the link to Sozi, though\u2026 great to see so many people exploring zooming presentations!\n. Yes, from a use standpoint while giving a presentation, that makes sense. For the online demo, however, just a little prompt that the space bar and arrow keys work (at the bottom of the 1st slide, for instance) would help alleviate confusion.\n. Excellent.\nSpeaking of publishing presentations, this sort of tool would also be great for comic artists creating \u201cinfinite canvas\u201d comics:\nhttp://scottmccloud.com/4-inventions/canvas/index.html\nAny interest in that direction?\n. Yes, quite off-topic\u2026 your comment about publishing presentations online made me think of it, and I didn't have a better place to mention it.\nAnd yes, I don't know that anything needs to be done in that direction (that would be different than publishing presentations)\u2026 just thought I'd bring it up as a potential audience. I'm mentioning it to a few comic artists\u2026 we'll see what happens.\nAnyway, back to the previously scheduled issue. :-)\n. Nice elegant solution. :-)\n. ",
    "creatorrr": "@greenido You can count me in too!\nLet me know if you are serious and need a hand (with coding, testing, documentation, whatever.)\nCheers!\nThis is me @creatorrr !\n. @EddieHinkle It'd be great! Could you ask others as well?\nLet's put together a framework and start working.\n@bartaz Any ideas? Plans for any API?\nI'm in, by the way. :-)\n. @laubsauger Impressive work!\nThough, you are right about the API bit. As @bartaz said earlier - this is sort of an alpha release as of now and we should rather wait for an API to come through.\n+1 for the great job anyway! :)\n. @bartaz That'd be incredible. +1 for the idea!\n:-)\n. ",
    "EdwardHinkle": "Hi guys, if you could keep me in the loop with what you are all doing, I will most likely be starting down the path of creating an authoring tool as well. People in my agency have been wanting to start using Prezi this year, but with flash and such we have a lot of restrictions. Impress.js is exactly what they needed, but none of them are coders, so I'll be working on an authoring tool for them.\nI'd be happy to collaborate with any of you that are interested.\n. +1 as well.\n. ",
    "edumerco": "Does Inkscape.org could work? \nIt is aldeady being used in Sozi (http://sozi.baierouge.fr/wiki/en:welcome). \nCongratulations for Impress, great work. :)\n\ne\n. Hi.\n\n@edumerco I think ideally the creation tool would itself be a web app,\nrather than a native app like Inkscape.\n\nThat is a great idea for sure, but don't underestimate the weight of\noffline options...\n\nThanks for the link to Sozi, though\u2026 great to see so many people\nexploring zooming presentations!\n\nPersonally, I do those since years in a very manual way: vector based pdf\nwith manual zooming. :-)\nBest regards...\n\ne\n. ",
    "laubsauger": "Hi there,\nI just found this neat little experiment yesterday and started to think about something like impress.js.studio on instant.\nSince this would make this lib useful to people who have little to no javascript/html/css knowledge but still want to build 3D Zoom Presentations.\nAnd since this is already aimed at browsers that implement modern html5 techs, you can provide those offline options with ease while working with a webapp ( http://slides.html5rocks.com/#app-cache )\nJust forked and started to work out a concept in my head\n. Hi Bartaz, \nthat is exactly what i expected. I will focus on positioning for now since those attributes can't change to much i guess.\nFor positioning:\nI'm thinking of some type of grid where you can snap those slides in the 3D space plus a rotation/skewing system similar to most 3d modelling applications - working with arrows that can be dragged on the respective axis.\nAnd yup, version numbers would help :)\n. A camera method would be needed thats true. \nBut it will also be just awesome. \nI imagine roaming through the space (and time) continium that embraces your presentation: picking stuff, dropping it somewhere else, one click will get you in edit mode for a respective slide letting you edit contents and stylings inline  - prezi will be so 2011 :)\n. I've made the first steps towards this. It is more or less a clumsy interface sketch - no real functionality besides crappy html source export. I will mainly wait for one or another api goodie to emerge but feel free to get motivated or inspired :D \nhttp://laubsauger.github.com/studio.html\n. Yup thats nice. \nWith a little doodad to drag on for rotation, moving etc. this will do it :) \nI got the GUI sketch ready for that and will implement it asap if i have time on my hands \n. Oh boy! That is freakin' awesone. The interface looks really promising despite a few hicks here and there.\nThe adobe guy did a bunch of nice work there :D\nI'm so glad that i could not free up time to work further on the Editor idea since this would've blasted it \n. Regarding elements not clickable in Chrome: I noticed the same using this snippet:  \nStep 1\ndiv.step data-x=\"3500\" data-y=\"7500\" data-z=\"2500\" data-scale=\"3\"\nStep 2\ndiv.step data-x=\"1500\" data-y=\"7500\" data-z=\"2500\" data-scale=\"10\"\nwhile Step 1 is positioned right of Step 2 and set to be quite small (z is equal). Step 2 is constantly overlapping Step 1 completely, even though it sits well away from Step 1 and its width was under 50px. Maybe I did not understand the positioning yet or there is something awkward going on.\n. Hi bartaz,\ni found out what it was. The click landed not on step 2 but on the overview step i had positioned \"above\" all of this with a scale of 15. I just had to set the overview step to be invisible.\n. The \"hardcore\" fullstop is indeed a chrome only issue as of my tests.\nAs stated in Pull#48 removal of the whole hashchange-event - thus preventing double select - does not do the trick.\n. Hi Bartaz,\nyou got it. It is totally smooth now - perfect one would say.... BUT with this solution you'll get the presentation to freakout - half of the times unrecoverable - if you perform another stepchange (keypress or click) while the transition is still running. it will start looping between steps and dance around :) \n. Unfortunately this does not have an impact on the lagging transition mentioned #46. \nBut it almost removes the possibility to give out links to a certain slide. (you have to load the page twice to reach the slide with this snippet removed)\n. ",
    "naugtur": "Hi. I just found this thread and it looks like I have a different idea about editing impress.js presentations. \nIMHO the most important problem is setting x, y, rotate and scale in html and refreshing it all the time. It would be better to do it in a WYSIWYG manner..\nI hacked a quick a proof of concept in a fork of mine. See https://github.com/naugtur/impress.js\nYou can take a look over here: http://naugtur.github.com/ (but it's not staying there forever)\n. Ok, this encouraged me to finally fix up and push the first prototype of my idea of WYSIWYG interaction. You can take a look, it's there: https://github.com/naugtur/builder4impress\nI recommend trying it on the overview slide (start with pressing the left arrow) ;)\nIt just works, drag the letters M[move] R[rotate] S[scale]\nIt should still be uncomfortable to use, but that's life :)\n. Ok, it deployed.\nUsage tip: Hover a slide, a control shows, M just drags, dragging R horizontally rotates, dragging S vertically scales.\nI dropped it here: http://naugtur.github.com/#/overview\nThe overview is linked on purpose - moving elements works properly in overview and doesn't scale back on slides, but I already know how to fix that\n. @bartaz Letters will be substituted with controls and correctly\nhinted. I didn't want to spend time on drawing icons etc. My main\nconcern about the controls (at the moment) is positioning them at the\ncenter of the element despite of all transformations, because it's\neasy to rotate the element in a way that puts them far enough for user\nto hover other slides while trying to reach the controls.\nI've got 3 different ideas how to handle 3D, but complete WYSIWYG\nauthoring in 3D would require control over the \"camera\". As far as I\nremember, you didn't feel like implementing that when we first talked\nabout impress ;)\nOn Fri, Mar 16, 2012 at 12:17 PM, Bartek Szopka\nreply@reply.github.com\nwrote:\n\n@naugtur That's an interesting UI concept. Not very intuitive at the beginning (clickinig on letters and dragging), but quite simple. But it will get a little bit compicated if you add positioning on Z and 3D rotations\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/issues/5#issuecomment-4537787\n. I had time to get back to builder4impress at last. \nWorking prototype: http://naugtur.github.com/builder4impress/ [works best in chrome]\n\n@bartaz I have added some functions to the API. \n. @giokokos, feel free to submit a pull request or contact me directly if you want to cooperate in any way. I slowed down my work on the editor mostly because there was no demand anymore and Strut got so popular. I still want to work on a fully-wysiwyg editor and I have some plans regarding going 3D. It's just not a high-priority project for me.\n. After working on an WYSIWYG editor I have a few thoughts on useful API functions. Any editor would benefit from (ok, require :) ) revealing the function that builds slides (the one inside slides.forEach) and a function to turn off and on handling events (mostly mouse). It doesn't have to remove bindings, it would just make impress return in the first line of the event callback\nimpress.draw(DOMNode/DOMNodeArray)\nimpress.handleMouse(true/false)\n. @fmate14 If there is an API you can always wrap the API in any publish and subscribe functions you want in less than 2*n+2 lines of code ( n being number of API methods ). Why would anyone add a dependency on a pub/sub implementation to a project or pollute the global space with lib-specific events?\n. @fmate14 I don't want to create an offtopic here, so it's my last comment regarding this. I just wish to explain. An API is a nice and contained solution and (as you pointed out) not much code is needed to implement it with events. Any built-in implementation of pub/sub forces users to use this particular one. If I already have a different implementation in my project using two is absurd. The pattern is obviously a great thing but you can't force it on people.\n@thingsinjars What is your target method? It's a bit hard to guess judging only from the name.\n. @thingsinjars That's a JS feature. if you have the event you jus type event.target and it's there\n. @thingsinjars It's a matter of binding an event to a slide, not anywhere inside\n. My proof of concept actually used a single method that I revealed from the impress.js internals. You can see details in my fork of impress.js or on naugtur.github.com\nIf you are not planning to include all authoring logic in impress, then I guess it's the most important method that needs to be in the API. The editor I started just changes the HTML attributes (like the user would) and triggers redrawing of the slide with your code. So the method would be .drawSlide(a) where a is a dom node or a collection of dom nodes. \nSecond method I would use in my editor would be .overviewMode(toggle) where toggle is true or false. Turning on the overview mode would make the camera show all the slides and turn off switching between slides.\nThat's all I would need to implement my authorng tool. I have already started it, but it was just to explore ideas and I need to find a long evening to get down to it.\n. Oh, I just saw I'm mentioned here. I wouldn't call my current version an implementation of a fix ;) I just hacked it to work for me. When there's an API imlementation, the doSlide function should be made avaliable via the same mechanizm.\nThat's all I had to add. Let's wait for the API.\n. Something got merged incorrectly on my machine, my bad.\n. ",
    "paulirish": "just FYI..\nThis is from a japanese developer but is also an authoring tool for impress:\nhttp://php5.xoop.jp/impress/index.html\nsource: https://github.com/yamazakidaisuke/impress.js-design\nRight now it's not very polished, but the author is happy to iterate on it if anyone has ideas.\n. :+1: to @blairio 's fix\n. I could see this being called a blink bug. @gaurav21r can you file it at crbug.com ? \n. Let's do it.\n. ",
    "yamazakidaisuke": "Hi. Yesterday, I uploaded a version of English.\nhttp://php5.xoop.jp/impress/index_en.html\nWill be further upgraded.\n. ",
    "harish-io": "@bartaz  Thanks for posting the link to impressionist. \nGuys, Impressionist is now on github and I am also looking for some help testing this out. Please do take a look and log issues. http://hsivaramx.github.com/Impressionist/\nThanks\nHarish\n. ",
    "tddewey": "Not really a full on\n. Crud... Not really a full on editor, but I had some initial thoughts about a WordPress plugin with a GUI for positioning and sorting slides. Able to pull in content from posts, pages, or custom slides. Etc. I'll post to github when I have anything. All of the above ideas are way more impressive tho :)\n. ",
    "jancborchardt": "Wow, Impressionist is really good!\nI was going to suggest adapting this editor, which is based on SVG-Edit and currently uses Sozi as backend (impress.js and dizzy.js are on the plan). But Impressionist is already far ahead.\n. ",
    "tantaman": "Hey, I recently started working on Strut (an ImpressJS GUI)\nhttps://github.com/tantaman/Strut\nlive demo: http://strut.io\nIts currently in alpha so there are some kinks.  Contributions are welcome.\n\n. @bartaz yeah, I actually found impressionist a few days ago as well.  I asked them about working together last night (no response yet) but their code looks pretty difficult to maintain and extend.\n. @bartaz Went ahead an added a note about Impressionist to Strut's readme.\n. After you preview your presentation in Strut use your browser's \"save page as\" feature to save the presentation as a stand alone website.   https://github.com/tantaman/Strut/issues/53\nHope that helps!  Let me know if you have any trouble or need anything else.\nEdit: there is also now a \"zip presentation\" option which will export the presentation to its HTML, CSS and JS source and give you a zip to download.  Currently, zip presentation only works if you are accessing a hosted version of Strut or have \"--allow-file-access-from-files\" enabled in Chrome.\n. @arthurzaczek dude that is pretty cool...  Do you mind if I add that as a way to import Powerpoint presentations to Strut?\n. ",
    "volca": "I working on Mimpress recently,an impress.js editor for iPad.\nhttp://itunes.apple.com/app/id516198823\n. @bartaz You can try it with promo code \"JPPYE7HX7F49\" :)\n. ",
    "computersrmyfriends": "Hello,\nI would like to use one of your tools to create and export presentations. But, unfortunately, I'm having trouble saving and exporting presentations on any of the tools listed above. I'm able to create and preview in strut but unable to export the files to use on my website. Also, I don't see any option to change the vanvas size in any of the tools. I liked the strut tool but its bad that I cant use what I create out of it. Impressionist is unable to even display preview on chrome (Windows). Builder4impress was very good to export the animations but I am unable to change the canvas size.\nPlease provide a tool that is usable by non-programmers.\nThanks\n. Thank you lunemec but it's more complicated to use compared to writing the tags based on impress.js documentation. I was looking for a tool to make very large number of presentations using impress.js quickly instead of creating div's one by one manually.\n. ",
    "lunemec": "Hi, I've tried it with mine tool .. lnemec.tk/impress .. click on show presentation when you finish it and then save the page in FF or chrome or wherever save page as ... some name and save it as complete web page to some folder\nit will create myname.html and folder myname .. and you need both copied somewhere (flash, cd ..) and then you can run the presentation off-line by opening myname.html in FF or chrome, IE will not work I think\nEnjoy\n. ",
    "nicowilliams": "The S9 impress.js template is perfect.  You get to use markdown, so any $EDITOR will do.  I tried using wkhtmltopdf to export to PDF but the result is lame (e.g., directives for canvas positioning are displayed).\nOn iOS there's Mimpress, which looks like basically S9 with the impress.js template, a webkit browser, a simple text editor, and a simple tool for selecting translations, rotations, ... per-slide.  The nice thing about Mimpress is that, well, tablets.  The idea is nice enough that equivalents for Android should be possible (if not already there) and that would be nice because, well, tablets.  Being able to author on a tablet is key.  Strut and Impressionist didn't work very well for me on my ipad, so for now for me it's S9 + impress.js, and on the ipad: Mimpress (on the theory that the two approaches are mostly compatible).\n@volca: some issues with Mimpress: there's no way to manage svg files, and image file mgmt is a bit wonky, as is the CSS style mgmt (I can't share it easily, which I need to do if I'm going to use S9 on my desktop and mimpress on my ipad).  There's no nice share with e-mail or whatever, just copy to clipboard (which, ok, is not terrible, but still).  Also, Mimpress isn't rendering lists properly...  It crashes when displaying the whole canvas if the presentation uses your svg file.\nAlso, there's no export function in Mimpress.  An export to HTML option would be nice, and obviously shouldn't be too hard (given that you are probably already using S9), but as long as I can send the markdown to my desktop I can pass it to slideshow there (I've not tried it though, and I worry that there might be incompatibilities).  An export to PDF would be lovely, but since you'd likely need an HTML->PDF renderer, and I bet there's none good enough for this (but I've not searched far and wide enough).\nThanks to @bartaz for this incredible tool (impress.js)!  I love it!\n. ",
    "arthurzaczek": "Hi!\nGreat tool! Thank you.\nI've a lot of Powerpoint slides and so i've created a small powershell script to migrate them to impress.js. It's a starting point, it will not be a full featured converter. But it saves your text :-)\nhttps://github.com/arthurzaczek/Impress-Extract-Powerpoint\nRegards, Arthur\n. Hi! Thanks for feedback. It's GPL licensed. I don't know if it's GNU Affero General Public License compatible, but feel free to use it - I don't believe that there is so much \"innovation\" to worry about a license ;-)\n. ",
    "aliva": "a dokuwiki plugin:\nhttps://www.dokuwiki.org/plugin:impressjs\n. can't you just remove tab navigation complelty?\nI mean this:\njavascript\nevent.keyCode === 9\n. @FagnerMartinsBrack dude, It's been 4 years from my comment, I can't even remember what is impress.js :laughing: \n. I can't set the whole pages direction to 'rtl' but setting each slide direction to 'rtl' works fine\nsomething like this:\nhtml\n<div class='step' data-x='1000' data-y='0' data-z='0' dir='rtl' >\n   Content\n</div>\n(this solves my problem for now, so I close the issue)\n. meh,\n. ",
    "giokokos": "Hi there,\nfirstly, thank you Bartaz for this impressive framework! I started creating my own visual editor for impress.js and ended up customizing and extending the builder4impress by @naugtur who has done a really great work.\nI liked how this tool handles the slides so I decided to add more features in it. It's still in under heavy development (this means quite a few bugs and messy code) and regarding the fact that I am not an expert in Javascript maybe some of you are interested in that and you would like to contribute. \nThe main goal of this tool is to be a tool for the ASQ project. (more details on About page)\nTake a look at the editor and please be indulgent. :)\n. ",
    "valkirilov": "Last year I saw impress.js library and I was amazed. A few months later I decided to make an authoring tool and now I am ready to show it, because I have to know what is the opinion of the users and should I continue to develop it.\nIt's completely free and is available on www.jspres.com. The module for creating presentations is JavaScript based, but the project contains server side which stores the users presentations and they can access them from every computer.\nThere are two presentations made with JSpres. The first one is just promo of the project, and the second is the presentation which imagined the project on the National IT olimpics in my country (this is the reason that is not in english, but you have to see the transitions :P)\nhttp://jspres.com/presentation/present/p:3\nhttp://jspres.com/presentation/present/p:31\nSo if anyone want to see and try it but have some troubles I wrote a simple guide that will help you to understand the basics and can be found here: http://blog.jspres.com/2013/03/getting-started/\nSo I will put some screens to provoke a little curiosity in you to see the project. I would be grateful to hear your feedback, advice, criticism and I hope to help someone with what I've done.\n\n\n\n. Hello,\nIf I understand your first question you can use impress.js API function prev() or goto() to go to the previous slide or to the specific one.\nAbout the opacity question. One of the impress.js powers is hiding in the correct using of CSS. If you know how to stylize your elements on every slide with use of the .present or .active and .future (.past) CSS classes you can do everything that you want (example: #yourSlide.present, .slide.past, etc).\nThe last question about going into slide. I suggest you to see how works scale and data-z attributes. You can read the source (it has a lot of comments and explanations about the good stuff that impress.js gives you). \nI hope that I helped you a little. \nNow make your presentation and good luck :)\n. If you make it a slide impress.js camera will move on it, but if this slide is invisible I don't see the point to be a slide. You can place it after overview and don't go to it. This way it will be visible, but the camera will not go on it. Also you can put in a slide and position it with CSS, \nThis is on my mind now but if you want something else, sorry.\n. I am not sure that this is a bug in impress.js. Maybe the problem is in you graphics card or the way that Chrome works with it because on some computers I have seen the presentation to visualize perfectly.\n. One of the ways is to remove it from the source or to handle keyup events before imppress.js and prevent its behavior. In the documentation is mentioned why the tab key is a valid \"slide changer\". \nYou can read it here starting from line 691:\nhttps://github.com/bartaz/impress.js/blob/master/js/impress.js\n. ",
    "ahaeberle": "Hi,\nafter a colleague told me about impress.js I catched fire for this tool - so thank you in the first place.\nI was and am still looking for an authoring tool or a helper to put the data in. I read of many interesting aproaches and I do understand, that it is not very easy do design such a gui.\nto @valkirilov and the others who consindering to test the software JSpres:\nFirst impression looks good.\nBUT reconsinder, that HTML and CSS is there for a reason to seperate style from content. \nAnd that is one of the basic principles of impres.js!\nI know it seams easier to put it all together and hey the computer parses it anyway. BUT that's why the other presentation tool did mess up in the first place.\nMe for myself and I think many of the impress.js-users do not look for just another powerpoint like tool with astonishing 3D anmiation and better concepts - that would be keynote in my opinion.\nWe are looking for a presentation-tool that is able to deliver content in a new way and with the right basic asumptions - so keept the content clearly seperated from code and do not repeat every style for every lable - if you still wondering what I am talking about a short glimpse in the JSON export from JSpres:\n<div style=\\\"text-align: center;\\\"><b style=\\\"font-size: 64pt; font-family: Tahoma; line-height: 72pt;\\\">agile manifesto</b></div>\",\"fontFamily\":\"\n. ",
    "perrybutler": "I would like to refer my recent comment from https://github.com/bartaz/impress.js/issues/88 to this thread for discussion. Thanks!\n. http://www.choiceschances.com is using impress.js with a fully custom WYSIWYG authoring tool. I've attributed the library to Bartaz on the About page. We really like impress.js!\nMattNewbill: Yes it is. You'll need a modern web browser with Javascript to run it nicely.\n. @dcsan I really wanted to implement hyperlinks and images sooner, but we couldn't make it happen within our grant budget, so I'll be working on it in my spare time. In fact, C&C supports any arbitrary HTML for the scenarios (we have a sample story that actually loads a Prezi INTO a C&C slide/scenario), it's just that we haven't provided the tools yet to do it from the front end. It can only be done thru CSV right now, which is a transitional format we've decided to use for loading in sample stories before implementing a relational database which might not even be necessary.\nI'm definitely going to be adding those features though, as this is an app I want to use myself. I truly believe that if we are aiming to get more users on-board, we will need to add the features which are typical to most slideshow building apps in order to make it all around more useful for more types of people. As of right now, you can link slides (scenarios) together without writing any code by adding buttons to scenarios and editing those buttons to point them to other scenarios. You can also edit the title and body text, but again this is just plain text and I'm looking forward to including more components, templates and formatting options in the future.\nIf you load the sample story \"Example 7.1\" it offers a good representation of our initial direction - laying out the story in a flow tree with ability to link new scenarios or edit existing ones on the fly, or switch to reading mode on the fly. There is no compile time, the edit and reading modes are unified, what you edit/read is what everyone gets. :)\nAnother bonus is that Choices & Chances works offline, saving drafts/changes regularly when a connection is available, similar to Google Docs. I engineered most of these things before I had a chance to learn Meteor/Angular/React/etc, and before Prezi announced their HTML5 version (I saw them hiring for an HTML5 guy so I knew it was coming). The freedom of not using a library was rewarding. The challenge comes with having to do nearly everything in Javascript, since we try to maintain roughly 90% functionality while offline and can't rely on the server for most things.\nI've taken inspiration from software of which I enjoyed the UI/UX, such as the File, View, Edit menus similar to Windows/Mac, the ability to re-arrange these menus (they used to be panels that you can keep open like in Photoshop, but we've simplified it for the time being), a Properties panel for the selected object with ability to edit many of its properties similar to Photoshop or 3D Max, multiple display options for accessibility or preference similar to Windows, flat-UI similar to modern trends, OAuth2 for login, a general full-screen \"video game\" or \"couch\" or \"conference room\" approach, etc...\nThanks for your interest, it's not often that I get to share this kind of detailed information since the stuff I do is fairly obscure.\n. @dcsan I've actually never seen Twinery. Makes me wonder if it was around during the time I had been researching Prezi-like web apps. It looks pretty much like what we're doing with C&C. The best I could find at the time was MindMeister, Prezi, Sozi, and the various impress.js authoring tools in the discussions here on Github. JSpres is gone, I liked that one. While Strut delivers a UX reminiscent of PowerPoint, it just doesn't innovate.\nAnyway, the C&C repo is privately hosted at BitBucket, but we may move it over to Github for open contribution. Discussion is valuable to the project, so I went ahead and created the Github repo here as a starting point. Discuss all you want!\nIn your first screenshot showing how Twinery maps text, that's essentially what our CSV achieves. The CSV format is what allowed our non-technical team member(s) to produce stories in a text editor before the app was ever functional. They would have had a difficult time writing stories in raw JSON, so a rudimentary story format was one of the first things we designed. Our CSV could use some refinement to bring it more in line with a Wiki-like syntax. We haven't revisited the syntax yet, but it's on the list. It was planned to dump the CSV files altogether once we built the authoring tools into the front end.\nReal-time story collaboration was another thing that was in the plan, but didn't make the cut. Meteor is cool, I like what they're going for. I've recently taken on a massive overview of Meteor-like frameworks which has yielded a lot of insights and new ideas. I'd like to finish and implement Rapid.js into C&C, and while it does work for the other \"top secret\" project I'm developing around it, it's still a work in progress so Meteor isn't totally out of the question. Rapid.js lets you declare and use components as well as JSON data straight in your HTML template e.g.:\n[each {Games}]<div>{Title}</div>[/each]\n...would output a list of Game titles. I'm still experimenting with it too.\nYou might find it interesting (or scary) to know how much under the hood is first-class, custom functionality. The flowtree algorithm was developed from scratch, it's not a Rhinegold-Tilford or something you would find in D3.js. Still a few kinks to iron out with it though. No jquery-ui for the drag-drop since I wanted the edit/view modes unified with 3D editing capability and realistic positioning of the scenarios. We're using this OAuth2 component for social login, also developed by yours truly, so we have Login with Google/Facebook/etc.\nHope to hear from you at the Github repo.\n. We have built an authoring tool around impress.js with a virtual camera/infinite canvas which can be used to create an entire presentation through a simple drag-drop UI, but the 30-slide/overview limit in Chrome still hasn't been resolved for over a year and that doesn't shed much hope on our attempts at designing a user-friendly authoring tool. The issue was reported somewhere in Chrome 18 but we are now at Chrome 30...hopefully the Chromium team will address it soon. I've just sent additional details to vangelis in an attempt to make some headway.\nMy concern is that we won't see very many truly capable authoring tools given the current state of Chrome's hardware rendering path.\nSee here:\nhttps://code.google.com/p/chromium/issues/detail?id=318311\nhttps://code.google.com/p/chromium/issues/detail?id=110457\nhttps://github.com/bartaz/impress.js/issues/96\nhttps://github.com/bartaz/impress.js/issues/244\nScreenshots of the bug happening (we can reproduce it):\nStarting with 30 visible elements (29 step divs and one background image div):\n\nAdding one more step div causes the gray background color to disappear:\n\nAdding another step div causes the background image div to disappear:\n\nAdding another step div causes a random visible step div to disappear:\n\nAdding another step div causes another random visible step div to disappear:\n\nDeleting the 4 recently added step divs restores everything that just disappeared:\n\nBut as you can see, Chrome's software rendering is capable of TONS more divs:\n\n. Look for the CSS rule \"pointer-events:none\". This is what might be preventing the HTML5 drag/drop functionality from working when impress is enabled. You'll need to remove that CSS, or dynamically toggle it on/off depending on what the user is doing. FYI I'm using HTML5 drag/drop with impress.js just fine!\n. No problem, I think we worked around this anyway.\n. I downloaded your zip file and fixed the link to impress.css in the index.html file, then it ran just fine in Chrome.\n. When your device/browser doesn't support GPU-accelerated 3D compositing / rendering, the graphics get flattened into 2D. I've seen this happen on computers with cheaper integrated graphics. You can check Chrome's current rendering capabilities for your device under chrome://gpu/.\n. ",
    "andreamoro1": "Hi, I found it hard to prepare slides and then edit them one by one to position them on the canvas. Typical scenario: I changed the size of a title tag in the first slide, which made it necessary to move up or down all following slides, or slides related.\nThis process is somewhat simplified using existing impress.js \"editors\", but I found they mess up the html with un-needed tags.\nTherefore, I created a simple php script that modifies the impress.js attributes with a simple command. I was wondering if this can be shared, and if so where would be a nice place to put it. Ideally, it could be translated into a browser extension, but I don't know js enough. I would be happy to contribute if anyone started up a project. In the meanwhile I am happy to share my script, if there is any interest. Any suggestion on where/how appreciated\nHere are typical usages, to give you an idea of what the script accomplishes.\nExamples\nphp impressmod.php --f input.html\n  list available slides and their id, if present\nphp impressmod.php --f input.html --steps 3-5 --x -20 --y =200\n  decrease data-x by 20 and set data-y to 200 on slides 3,4,5 of input.html \n  and overwrite the file\nphp impressmod.php --f input.html --output output.html --steps 2,3,8-9 --x d20 --fm\n  increase the data-x gap between slides 2 and 3, 3 and 8, and\n  8 and 9 by 20. Slides 2 remains unchanged. Data-x will be set \n  wherever missing\nphp impressmod.php --f input.html --steps 5-2,overview,8\n  process slides in the following order: 5,4,3,2,[id=overview],5,4\n. ",
    "Hufnagels": "Hi,\nout there are plenty of editors :)\nbut, I had a small project concept, and I tried to create a small code snippet for a basic editing feature.\nWhen someone is interested in it: https://github.com/Hufnagels/impressEditor\nit's working on desktop as well on touch device. \n(only one issue, that can't solve is use it or only impress.js in iframe on touch device like ipad with ios7. Browser crash every time) \n. Hello Everybody!\nI had the same issue, and finaly i put html5 video directly in iframe, and also via php\nSo, i fixed this problem. \nAnd there is also a chanche, to use video.js too inside iframe\n(the idea was: youtube video playing perfectly on ipad in iframe)\n. ",
    "szaghi": "Yet another editor supporting impress.js, but designed for scientific contents:\nhttps://github.com/szaghi/MaTiSSe\n. Hi all, I see the wiki page listing some authoring tools. I would like to add MaTiSSe to the list, it being a mature authoring tool tailored for scientific contents (replacing LaTeX beamer introducing all the fancy of impress.js within the simplicity of markdown). Is it posdible to add it to the list?\n. ",
    "MattNewbill": "Is it possible to embed a presentation inside a static html page?\n. I am having problems with the overflow eating up the rest of the page. Is there an example somewhere or do you have any advice on how to embed it?\n. Is it possible to embed a presentation inside a static html page?\n. ",
    "dcsan": "@perrybutler I like the potential of your authoring tool - more for stories than slideshows, seems like it could become cool.. is it possible to add links etc through the UI yet?\n. hi @perrybutler thanks for the detailed reply. \ni'm sure you've seen http://twinery.org/ and the visual editor\ni really like how the non-linear editor figures out the links from wiki-like (GFM) content, and visualizes the story flow\nfrom just this:\n\nthey map this\n\nif you implemented server in meteor you'd get JSON datastore pretty trivially which is probably a better format than your CSV. as well as instant synced updates for anyone else watching, FB login etc.\nwe had a discussion about creating impress type animations with Famous on the meteor-talk list which is another approach.\nis there a repo for your app anywhere? i'm interested to discuss more but its maybe a bit OT here? my email is in my profile. I'm actually working on something similar.\n. ",
    "ilagokarn": "We tried to take a different spin on Impress and created the Impressify editor as a component to an e-learning platform. We used Impressionist (beta) by @harish-io as a starting point. We threw in features like timer constraints for each slide, pop quizzes and MS Powerpoint upload as images after some back-end processing. Our clients love it! Thanks for the amazing library @bartaz :)\nHere's a screenshot  \nWould love to hear comments and suggestions :)\n. ",
    "Toub": "Here is a suggestion about how to accept new contributers.\nFirst ask volunteers to review existing pull requests and comment them. Then, review some of the reviews...\nFinally, you can integrate a few first contributers (who submitted good quality PR or good review).\nThanks for opening the governance of this project!\n. ",
    "dalareo": "Have you noticed about this??\nhttps://github.com/regebro/hovercraft\nIt seems quite interesting!!\n. ",
    "FagnerMartinsBrack": "Dude I would love so much an editor like medium, using the presentation itself as the editor tool with contenteditable or something like that. I am up to try something MIT licensed in the future if there's enough folks to backup (and if impress.js get on its tracks as a robust OSS API xD).\n. X-Ref #362.\nThere the OP says it is hard having to manually edit the step attributes, so it was proposed a tool that does that automatically. This is totally something that an authoring tool should provide.\n. Hi @presidento, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Thanks for the feedback!\n. Hi, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\nIf you want to keep it going I suggest creating one Pull Request for each atomic change, like one for variable renaming, etc.\n@bartaz Is that integration branch still relevant? Should all these kind of things be opened in the master branch?\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\nAs stated in the comments above this feature is really useful, therefore I created #516 to keep track of it.\nThank you for the PR!\n. > Isn't this bug fixed by this commit: d8995aa\nI guess I didn't closed this in the first triage because we might need to check it to make sure. Since that code doesn't have test coverage, I am not sure if we can consider this as \"really\" fixed anyway...\n. Hi @nchauvat, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. > I do not have time for impress.js nowadays.\nClosing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\nIn the meantime we will try to follow other requests such as #485 and #425. Thanks for the PR!\n. In case anyone is interested, I have implemented this in a fork: https://github.com/web-stories/impress.js/commit/4976b8e07cc6395fb5c85676c01e4f1352b21488\n. X-Ref: #339, #243.\n. Hi @csicar, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Thanks for the feedback!\n. Hi @Platika, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again\nIn the meantime refer to the issue #446 for the progress of this request.\n. Hi @kschroeder, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. > I haven't used it since this PR, so I don't know if it is still valid. Feel free to kill it.\n@kschroeder thanks for the feedback! We will be closing this for now then, if you feel this should be opened again just ping :+1: \n. Hi @florianharmel, @Earthwings, @scbritton, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\nCan anybody confirm if this is was indeed a browser bug and if the issue still exists? A simplified example would help a lot.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. Hi @iluxav , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. Hi @dbankier, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. @dbankier Thanks for the response!\nSince you are not tracking this PR anymore and you lost context, I have created an issue to track this request instead: #513\nThis PR will be closed but we might cherry-pick the commit later if we see the need.\nThank you!\n. @dfernandeza, @whitedesign This will probably be handled on https://github.com/impress/impress.js/issues/409. Closing as a duplicate then.\n. Hi @blatan @briceparent , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Hi @TimHeckel, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again\nIn the meantime, refer to the issue #375.\n. Hi @bendoh, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\nIn the meantime we will be tracking the substeps functionality on #81 \n. Duplicated of #544.\n. @bartaz, what if someone copy the url in a browser with impress enabled (using default key navigations) and then send the link to someone else that doesn't have impress enabled?\nThe second person will receive #/step-1 and the scroll will not jump to the desired step.\nIs this a real problem or I am missing something?\n. X-ref: https://github.com/bartaz/impress.js/issues/345\n. Yeah I read the issue explanation after posting this, but since you probably already had received the mention e-mail I saw no point in deleting the comment :S\nThe comment was specifically to address this:\n\nJust use domain.com/#name-of-step - this will work as true anchor and impress.js will know how to handle it.\n\nWhich unfortunately is not a solution for the given use case.\nI will be concentrating any new discussion on #345 though, since that issue stands open.\nThanks for the answer!\n. Hi @coltpini, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\nBy the way, this seems duplicate of the substep functionality proposed on #207\n. @coltpini I am not aware of how keynotes magic move works. Maybe it is worth creating separate issues for each feature?\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\nIn the meantime we will be tracking the substeps functionality on #81 \n. Hi @briceparent, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Hi @piranna, this is indeed a basic functionality and we will try to provide it as soon as possible. The initial plans for impress.js is that it becomes a core mechanism for 3D presentation-like use cases, so this feature might be implemented in a slightly different way in the future.\nThe reason why I ask if the OP is still tracking this issue is to keep open only one issue related to this feature and close the duplicates :+1: \n. Hi @briceparent thanks for the feedback! In this case we will close this issue in order to track this feature using other similar PRs/Issues. Thank you very much for your effort and for the response.\nWe can reopen it later if you think it is necessary.\n. Hi @fghaas, @bizmate, @jeroenvisser101, @zevero, @pyriand3r, @thomasjungblut , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\nCan anybody confirm if the issue still exists? A simplified example would help a lot.\n. Thanks guys, looking forward to it!\n. Thanks you very much for your effort guys! Closing then...\n. Hi @crapthings, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\nBy the way, is there any action to take here or we can mark this as solved?\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. Hi @aspiers , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\nDo you have any links or examples that show if this standard still exists?\n. @aspiers\n\nOh sorry, I just noticed I already gave a list in the original issue description :-)\n\nYes I saw the list in the description, what I was asking was a demonstration of the feature. I want to verify how it exactly works to implement correctly if this is accepted and if the feature still exists in the services you mentioned. A link or a video using LICECap demonstrating the feature would be enough. Thank you!\n. > I think maybe you are fundamentally misunderstanding the feature request? \nYeah, I definitely misunderstood. Somehow I interpreted as a ? in the querystring or something like that. Personally I never knew such feature existed consistently between services like these. Thanks :)\n. That's indeed very useful, it's on the list :)\n. > The problem is that the keyCode for ? differs between countries, so I think we would need many workarounds for this\nVery good point. If this differs between countries we cannot try to implement a generic solution because we might break the expectation from other users. It would be much more scalable to expose hooks that allow the developer to define the shortcuts and map the specific keys to them. I18n should be a responsibility of the application that is consuming impress.js, not impress.js itself.\nThis probably is also a problem for other shortcuts that use ASCII letters instead of control keys (such as page up, page down, left, right, etc.).\n. > We have to investigate more on this, I suggest to let the issue open until we found whether it's \"easily feasible\" or \"too hard to do\".\n:+1: \n. Similarly related to #220. Need to investigate the feasibility of this.\n. Hi, it's been a long time since this issue was opened and reading the description I couldn't find anything that we could do as an action on this. Unfortunately impress.js assumes HTML5/JS/CSS knowledge to be used efficiently.\nAs much as I would like to help, there is not enough resources in this project that make it possible to provide a satisfactory response for this issue. I will close this for triage, but anyone is free to comment in the issue at anytime if they find something interesting that is worth sharing. Thank you!\n. @m42e Can you please link directly to your implementation of \"screen blackout\" instead of the root of the fork?\n@hornos Your link doesn't seem to be working anymore, do you have another resource we can take a look into that shows what \"screen blackout\" is all about?\nThanks guys and sorry for taking so long to answer!\n. @opatut Not sure if you are still tracking, but did you solved the problem using events? If yes, then there is no immediate reason for implementing a custom feature that can be already solved using the library provided mechanics.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. > What's the matter with this pull request, I'm about to close it to no longer have it bothering arround in my list ....\nSee https://github.com/impress/impress.js/issues/435\n. Hi @m42e, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\nBy the way, this seems duplicate of the stepgoto functionality proposed on #176\n. It seems that the fundamental difference between this PR and #176 is that, for #176, the event is triggered the same way as impress:stepleave, but with difference that it passes the element, while this PR is supposed to execute the impress:starttransition event before each transition starts.\n@m42e Can you confirm?\n. For future reference, here is the relevant part of the plugin mentioned above that uses the impress:starttransition event.\n. :point_up: Awesome!\n. @m42e Your issue does not make it clear why you need this data. Can you share some code on how your plugin is structured in order to assess exactly why this is needed and why you can't pick the data from outside?\nRight now I believe you need to access the DOM to be able to get this information \"outside\" because the markup is the main source of data, that has several performance implications. In the future though, it might be possible to create steps dynamically using an array, in that case you would already have the data without having to expose impress.js internals inside an event handler.\nConsider the hypothetical case that you have an external dataset, is it still necessary to expose the steps in the event? Why?\n. Hi @m42e, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. @m42e Thank you for the feedback!\nCould you please take a look in the comment above?\n. @m42e \n\nWhy should a plugin do all the selections and so on once again?\n\nCan you elaborate on that? What do you mean by \"do all the selections and so on once again\"?\n. For future reference, here is the part of the plugin mentioned above that demonstrates the intended usage.\n. Hi @fake-or-dead, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\nIf you are still tracking this, could you please make it clear what is the problem that this PR fixes with a reproducible example? Thank you.\n. @fake-or-dead I don't understand very well. Do you mean that impress.js does not have this issue anymore? Could you please rebase this into master and see if this is still a problem?\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\nBy the way, this seems a duplicate of #105.\n. @m42e @aliva @regebro @diogovincenzi @leroy0211 @Ivanca @eddiemonge @olegccc @ltregan \nCan anybody check if this is still an issue on master?\nAlso, check this comment. This seems to be a bug with Chrome, can anybody confirm if that is fixed or if there is any open issue for Chrome team?\n. @aliva Yeah I understand. See this comment though, we are trying to get this project on it's track again and looking for anyone that is still willing to help.\n. Related to https://github.com/impress/impress.js/pull/550#discussion_r59981695\n. According to https://github.com/impress/impress.js/pull/550#discussion_r59981695 it seems this was already fixed. I couldn't reproduce it in the master branch.\nWe will close this for now and watch to see if this will come up again.\n. > I solved it with an animated gif. This was probably the best solution. So I don't need it anymore. And you can close this issue.\n:+1: \n. Closing as a duplicate of #142.\n. I have tried the original link of the OP and it is working fine in latest Chrome on Mac - 49.0.2623.87 (64-bit):\n\nI guess this was a temporary bug with the browser. Similar issues in the past also with other browsers: #382, #324, #443, #270.\n. Hi @rushiagr , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. @rushiagr Thanks for the response!\nIn this specific case is there any reason for using shift + space other than \"nice to have\"?\n\"Nice to haves\" usually lead into bloat due to the low usage in the wild. Also, be aware that we should respect the Principle of the Least Astonishment so that the shortcuts do not have to be checked by the user in the documentation. To see if we are respecting good design principles we should copy the keyboard pattern from most similar tools from other technologies.\nSo, for example, do you have any evidence that this shortcut exists in other presentation tools or websites to justify it's inclusion? More than one popular example, if possible, will help a lot. we already have plans to support shift + tab for consistency with the tab shortcut, is there any reason that justify creating a new one?\n. > I am used to using 'space' to go one page down on a web page in a browser, and 'shift+space' to go one page up ...\n\n... if 'space' is provided for 'next slide', similarly 'shift+space' should be provided for 'previous slide' on all presentation softwares for user experience ...\n\nThat's definitely a very good argument in favor of this feature.\nWhat I see is that impress.js is using web navigation standards instead of focusing only in presentation standards. I can't give an example right now, but we might in the future have a situation where two key combinations does one thing for web navigation and another thing for presentation, this can prevent us from supporting both. Maybe I am overthinking this, but it is good to keep this potential problem in mind.\nAlso, in the future, we might split the keyboard navigation in a separate module in order to separate the concerns, that might allow the developer to attach web or presentation navigation at will. For now it seems reasonable to be consistent for web navigation too, or at least be consistent with the keys that are already mapped.\n. Hi @callmephilip, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\nIn the meantime we will be tracking the pluggability of impress.js in the issue #494.\n. Hi @callmephilip , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\nBy the way, very interesting feature!\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\nBy the way, as I mentioned before, this is a very interesting feature. It doesn't seems that this feature should be built-in in impress.js though, since impress should not be strictly coupled for slide projector presentations, but we definitely should support a way to to this via plugins.\nIn the meantime we will be tracking this in #494.\n. Closing as a duplicate of #140\n. > But since the old issue never got a real answer i thought i could ask again for it;\nSorry that the old issue didn't get a proper response. The project has been inactive for some time and the development is just starting to move again. So we are closing this as a duplicate of #81 and will be tracking this request in the old issue.\nThanks for opening the issue anyway!\n. I am not sure if there is anything we can do from impress.js side, I have never heard of rst2.\nIf there is something concrete we can do, please comment back in this issue that we might reopen it.\n. Hi @Ark-kun, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\nSince this is still a problem in the docs and the OP didn't responded to rebase from master, then I created an issue to track this: #526.\n. Hi @snekkalapudi , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again\nIn the meantime we will keep tracking the tests for iPhone, iPod, iPad and Android in the issue #282.\n. Hi @lesion, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Thank you for the feedback :+1: \n. Closing as duplicate of #438.\n. Hi @matej116, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again\nBasically this PR does not have an explanation or a way to reproduce the issue, therefore we can't take any actions on it.\n. Hi @carljm, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\nBy the way, this seems duplicate of the substep functionality proposed on #207\n. Do you want to take a look and check if the functionality is the same or similar? Eventually we need to close one of them because it doesn't make sense having 2 duplicated Pull Requests =/\n. @carljm Thanks for the feedback! We will definitely revisit this PR later. If you want to keep track of what we are doing, see https://github.com/impress/impress.js/issues/512\n. Hi @truist, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. @truist Thanks for the response! Since you are not tracking this PR anymore and it has conflicts, we are closing it for triage. We will definitely look back to this if the need arises, thanks!\nIf you think this should be opened later though, just ping us here.\n. Hi @Marvin182, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. @Marvin182 Thanks for the response!\nWe can close the PR, but we can keep the idea for later ;D.\nThat said, do you remember what this feature was about? I don't understand very well the use case for this.\n. Couldn't you do that with the stepenter event? Is this change really necessary?\n. > why should I waste my time to discuss with you if it would have been necessary or not?\nBecause this discussion can be useful for future developers, just like you thought the code could be useful when you opened the Pull Request 2 years ago.\nAnyway, as per the comment above it seems that now the feature can be accomplished using other existing means.\nThanks for the Pull Request.\n. @jwbriney It is not clear what the use case is exactly. Why would you want to remove the impress classes from the body element?\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. Hi @AliMD , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. This seems to be an issue in Firefox that is already fixed. See also #382, #324, #443, #244.\n. Closing as duplicate of #282.\n. @ywdr1987 Sorry for taking so long to respond, but can you please upload an example of a CDF file so that we can test in impress.js and check the feasibility of supporting it?\nMaybe the problem is not in impress.js itself but in the way the CDF file is created. Neverthless we need an example to look into, thanks.\n. Hi @matix, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. @matix Thanks for the feedback!\nSince you are not tracking this request anymore, then we will close it. We might revisit in the future though, and if you feel that this need to be reopened just ping us out :+1: \nThanks for the contribution anyway :+1: \n. Hi @misterbrownlee , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\nBy the way, this one seems duplicate of #214 and #264.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\nAlso, this PR was opened in the dev branch, as from the CONTRIBUTING.md file, it should be opened against the master branch instead.\n. Hi @frantzmiccoli, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\nFrom what I see according to the comments in this PR, the change is desired, but then we need first to weight the consequences of breaking existing places that are already using impress.js. Maybe we could instead add an issue to track this problem properly and cross-reference this PR to get detailed information later?\n. frantzmiccoli Thanks for the feedback. We will revisit this PR later then :+1: \n. I was wondering why this was closed, then realized that this was closed because the dev branch was removed and this PR was created against the dev branch.\nIf the OP still wants to propose this as stated on this comment, feel free to create the PR against master and open up the discussion again.\n. Right now we can't just remove the checks unless we can be 100% sure that, for several versions of those devices, 3D transforms have been working and if it breaks, we will know it before someones reports it.\nWe need automated tests to be able to check if the presentations are glitchy or not. Until we have that, we should keep the browser sniffing as is. The plan is to support only the latest browsers, but even the latest browsers can break, therefore an automated test is a strong requirement to fix this problem.\n. See #273.\n. @deepu105 For now the responsibility of telling which browser is supported and which one is not is from impress.js. In the future, if we choose to move this responsibility to the developer, then we could create something like that.\nWe need to review the mobile browser support for impress.js.\n. @Pierstoval, @and3rson have made a good progress on https://github.com/impress/impress.js/pull/496. Maybe you can use that as a guide?\n. I don't think there's much impress can do by itself.\nThe developer is the only one that can know if their requirements allow hiding steps, what we could do is understand the limitation and document it so that it doesn't leak to the user unexpectedly.\nAllowing steps to be loaded through AJAX, for example, can fix the problem with memory overhead but if they can't load asynchronously then there's not much we can do.\nThe user can also choose to keep the frame of the step instead of the full content when it's not focused, but again it's a per use case decision.\n. A little late, but thanks everyone!\n\nYes it works!\n\nAs from what I can tell from the comments this issue was solved at the time. Also, the links are not available anymore. Closing then :+1: \n. Unfortunately this use case is not supported until impress.js make it possible to change it's properties dynamically. Closing in favor of #537.\n. Hi @switer , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing as stated in the comment:\n\nthanks, that's an interesting navigation\nbut I'd rather see such features as 'plugins' that you add to your presentation. They don't need to be part of impress.js core library, as they can simply work using the API.\n. Hi @felixrabe, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\n\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\nIf possible, please provide a gif with a visual example and some usage code with a use case so that we can understand better why this is for exactly. Thanks!\n. Hi @jasvrcek, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. @jasvrcek Thank you for the feedback!\n. Sorry for the late response.\nThe idea of impress.js is to be a lightweight and manageable as possible. We don't want to add additional controls or many features that should be implemented in a per use-case basis. See this comment for a similar example.\nAlso, if requesting a feature we suggest creating a dedicated issue for discussion if it was not already reported earlier.\nThanks!\n. Hi @drabiter, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. @drabiter Thank you for the feedback!\n\nLet me know if you need anything.\n\nWhen we revisit this PR we will let you know, you can track the overall progress in this PR.\n. Hi @wojtossfm, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. @wojtossfm Thanks for the feedback, we will revisit this PR later thanks. In the meantime if you want to keep track of what is going on, check https://github.com/impress/impress.js/issues/512\n. As stated in the contributing guidelines it is required that a PR is creating using a \"topic branch\". Basically it means that a PR should do one thing and one thing only.\nIn the current state of this PR there are a lot of code changes that will make it harder to review, so I can't say if this is useful or not.\n@wojtossfm is it possible that you create a PR splitting each specific change so that we can look each small feature separately? This is not a confirmation that it will be landed, it is just that we need to have a better view of what is being proposed in order to consider this. If you believe it is not possible, then there is no problem, we can close this and you can open a PR later when we have a better plugin structure to be build on top of.\n. > Quoting guidelines that were instated long after my PR is a bit... surprising.\nWhy is that suprising? It is just justifying the need for topic branches, which was not documented clearly earlier.\n\nAt the moment then you'll probably want to reject the PR and possibly when I'll be able I can try to submit it in separate chunks.\n\n@wojtossfm Thanks for the response! We will be closing this for now then but feel free to submit in the future when we hope to have a better structure to build on top of :+1:\n. Hi @tshedor, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\n. As from the comment above and due to the lack of feedback from the OP, I will assume the issue was fixed, if not please comment in this issue to reopen.\n. This use case will only be able to be fixed once impress.js can dynamically change it's properties: #537 .\nAs from the second point, the presentation loop, I have created a new issue to track too: #538.\nClosing in favor of #537 and #538 then.\n. Sorry for the late response, but thanks! :)\n. > Is there a way to prevent all other navigation methods for my question steps (i.e. arrows, spacebar, etc.)?\nAs stated above it is impossible to disable the navigation now. We have plans to decouple impress.js from talk presentation only to general purpose and create a plugin structure. Until then unfortunately you need to comment out the code.\nI have created an issue to track this issue in specific. Closing in favor of #539.\n. This was probably related to a Firefox bug that broke CSS 3D based presentations. It already happened more than once. See https://github.com/impress/impress.js/issues/324#issuecomment-22861313 and https://github.com/impress/impress.js/issues/443#issuecomment-67322992.\n. Hi @perrybutler, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again\n. > For sure you have learnt how to add a file and how to make pull request ;)\nIt seems that this PR is just for testing purposes, closing then.\n. @bilus @KZeni \n\nI'm sorry to hear that it have given you a headache on launch day, but impress.js README has quite a large and detailed section about browser support\n\n.\n\nI honestly don't think it's sufficiently explained in the Readme\n\nI am not sure if the README is still in the same state as at the time this issue was created. But I guess the best action here would be to review the README so that it is clearer on what the project supports and what it does not.\nCurrently we have:\n\nbut some tablets are good enough to run it, so it should work quite well on iPad (iOS 5, or iOS 4 with HTML5 polyfills) and Blackberry Playbook. Inform us of any bug and we will try to fix this.\n\nand in another point of the README:\n\nMobile browsers are currently not supported.\n\nIt is not clear what \"mobile\" means here, if it is just smartphones or it also includes tablets (it doesn't seems so).\nWe need to remove this subjective interpretation from the README.\nActions from this issue:\n- Create an issue or PR to update the README so that browser support is clear.\n- Create an issue to discuss if the memory footprint should be handled in impress.js or in the userland.\nIf you are wondering why you are receiving a response on this after so many time, take a look here for a little bit of context.\n. @KZeni \nThis issue might take some time to be addressed, in the meantime, since you seems to be still tracking this, could you keep testing this issue in browsers and posting the results here so that we know how the state of things are changing over time?\nIt would also be amazing if you could attach any Chromium/Firefox/Safari issue tracker that can somehow be related to this so that we can have some context of the browsers that might be willing to fix this in their side, if any?\n. It seems that this PR was made by mistake, closing then.\n. > Other option, to avoid navigating to those elements, would be to add these elements inside of your steps (for example step that is most close to it) and use CSS styles to position it relatively outside the step.\nAs from what I can tell this seems to be the best way to do what the OP wants to and therefore there is no action we can take from impress.js this time that justifies keeping this issue open.\nIf somebody wants to continue the discussion, just comment here that we can reopen if necessary.\n. Closing as a duplicate of #142.\n. @eduardrock says that using the HTML5 player it works:\n\nThe problem is the Flash Player. I use the HTML5 Youtube player and it looks well on Impress.js\n\nWe refrain from supporting old technologies (Flash) and I guess Youtube doesn't even use Flash anymore these days, so the problem fixed itself :tada: \nAlso, @bartaz commented:\n\nCan you provide a link where issue can be reproduced?\n\nand received no response. Therefore closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again if necessary.\n. @jacekkopecky, @bartaz  I managed to fix this without using history API and keeping compat, take a look:\n- https://github.com/web-stories/impress.js/commit/98f06b1a1a80e9f3ad3548edeb28469da2832dde\n- https://github.com/web-stories/impress.js/pull/13/commits\n- http://web-stories.github.io/impress.js/demo\n. @bartaz yes.\n- It is impossible to change the hash behavior on page load because it executes before javascript is available.\n- The process is synced, so there is no way one is going to manipulate the id in the mean time.\n. Not sure if this was a temporary problem with some browser or if this was fixed. But today, testing this link in Opera/Safari/Chrome on Mac, I can confirm that the steps can be clicked from the \"overview\" step.\nClosing as not a problem.\n. Hi @KATT, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. This seems reasonable. :+1: \nPing @impress/mergers.\n. I would argue that for the sake of consistency it should be changed for all apostrophes, but then it will be hard to maintain and will make no difference since this PR refers to the ones that are shown in the demo.\n. Hi @xxx2201135 , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. Hi @xxx2201135 , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. > I don't want to put any script tag at the end of body, It doesn't look good and is a bad practice.\nPut the script at the end of the body is not a bad practice, it is even encouraged. See the links below:\n- https://developer.yahoo.com/performance/rules.html#js_bottom\n- https://github.com/h5bp/html5-boilerplate/issues/1151#issuecomment-7355962\nAlso, see my comment here\n. Closing as per the comment above and also due to the lack of feedback from the OP in the related PR: https://github.com/impress/impress.js/pull/360#issuecomment-192566339.\n. Hi @xxx2201135, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. @ericnelsonaz The semicolon in the end is not superfulus, if it is included via script tag and another script tag right below uses an Immediately Invoked Function Expression ((function () {}());), then it will interpreted as an argument for the previous Function Declaration if the semicolon is omited:\njavascript\nwindow.onload = function() {\n  // This is immediately executed and pass the IIFE result as an argument.\n}(function () {}());\n. @eduardrock The only thing impress.js does is to provide the API, how it will be loaded is the responsibility of the developer. It doesn't make sense coupling impress.js into a single way to load the script by default because a user might want to load it in a different way.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again\n. Unfortunately this is not responsibility for the impress.js project itself. It is more responsibility for an authoring tool that should make it easy to do such kind of work with an efficient interface with high affordance.\nI have commented in https://github.com/impress/impress.js/issues/5#issuecomment-204863263, so that future plans of an authoring tool remember to take care of such use case. Let's focus authoring tool discussions in that issue, thanks!\n. Hi @ghost, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. I see that in the OP account it is written \"Deleted User\", therefore I will assume this user is not tracking any of his requests anymore.\nAlso, opening the overview in Chrome today does not appear to be pixelated.\n. Action for this issue:\n- Check if the Chrome issue stated above still exists when changing the URL.\n- If not, then change the behavior. Otherwise keep it, create a test for it, and close this issue.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. Hi @jejb, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\nAlso, this is being close because there is not enough information and the link provided doesn't work anymore.\n. Hi @Strikeskids, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. But are you willing to change in the PR, like rebasing into master and solve conflicts, if the need arises? \n. Thanks, we will revisit this PR later and will let you know :+1: \n. @Strikeskids Can you please provide a visual example of how this feature works and why it should be included in impress.js with 1 or 2 steps for simplicity?\nFor a visual example, I recommend using LICECap to record the screen in a gif format and upload as a comment here (external links can break after some time).\nFor the \"why\" part I recommend stating a real use case in which this feature is useful in a way that it cannot be done outside impress.js.\n. > Rebased onto master to merge cleanly.\nThank you, but we will probably only land this once a proper test structure is setup, because this feature will require a regression testing :). We will let you know.\n. Closing in favor of #537.\n. Hi @tjwudi , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\nI just checked the overview in Chrome 49.0.2623.112 (64-bit) on Mac and everything seems to be fine.\n. Refer to #206 for an implementation example.\n. Hi @eduardrock, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. Hi @fabiooshiro, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again\n. Hi @eduardrock, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\nAlso, this question seems to have been answered.\n. @kwikness Unfortunately we had to remove the dev branch after your fixes (see https://github.com/impress/impress.js/issues/521#issuecomment-198642846), can you please open a Pull Request to the master branch instead? Thanks.\n. I will assume from the last comment that this issue is fixed. If not, please comment here to open up the discussion again.\n. Closing as from this comment.\nBasically impress.js does not support mobile devices as it currently stands. We need to review this, see also #282.\n. Hi @vitorcarvalhoml , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Hi @zerosoul thanks for the Pull Request!\nThat is intended, see https://github.com/impress/impress.js/pull/497#issuecomment-143954473\n. Hi @sclausen, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again\nAs this feature seems to be pretty useful I have created a new issue to track it: #527\n. @sclausen \nAre you willing to rebase/fix code review/etc if asked to do so? If yes, then I will reopen as stated in the last comment.\n. @sclausen I'm sorry, I have no idea why this was closed o.O.\n. Oh, looking again it seems that this was closed automatically by Github because the dev branch was removed (this PR was opened against the dev branch). See #521 for context.\nCan this be opened against master? Thanks.\n. Hi @chokri , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. Hi @shaase , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. @shaase Glad to know you liked it! Things are going slow, but at least they are going :)\n. Hi @karanganesan , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. Dupe of https://github.com/impress/impress.js/issues/392\n. Hi @chenweiyj , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. Hi @cdepillabout, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\n. Hi @chenweiyj , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. :-1: This can be easily achieved with custom code using the public API along with an empty step that acts as a placeholder to simulate an \"overview\" step.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\n. Hi @stacigh , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. I guess the problem was fixed given the comments above. If not please let us know so that we can continue the discussion.\n. Hi @akhoury , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\nBy the way, this change introduce breaking changes for those who are already using impress.js. We need to weight the cost-benefits of that.\n. I have created an issue to track the use case: #517. We might revisit this later if someone bring this up again. Thanks for the feedback!\n. Hi @WonderboyPark  and @inlandyears , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. Closing as a duplicate of #438.\n. Closing if favor of #537.\n. TL;DR of this use case is:\nMake it possible for the presenter to click in an external link during a presentation, and when it returns back to the page (pressing the back button) it should go to the next step.\n. It is actually feasible to create a destroy functionality, although it is not easy. We should keep track of all the previous data in the elements in order to rollback the changes to the previous state before impress.js was initialized in the page.\n. Hi @ksmith25 , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. Hi @andygoblins , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. @andygoblins Thanks for the feedback! We will put this in the queue for review.\n. @andygoblins Can you please provide a real world example where this feature might be useful?\n. > The most important reason is that impress.js at this point is much too mature to change such semantics. There are probably at least hundreds of users that rely on the semantics being exactly as they currently are, and changing it would cause more harm to them than it would benefit you.\nDefinitely! This is definitely the main point why it is so hard to change anything in impress.js without very good coverage. Although we can't measure, I would risk to say even thousands rely on this and changing any part of the CSS API in a major version will cause a lot of breakage, and since people can't easily test their presentation, we would need a very good changelog listing all breaking possibilities. It is so much work that the effort in increasing the coverage and API docs would be more worth it than listing all breaking possibilities.\nIf we can fix this use case using the API as is, we could mark this as closed so that we can focus in the cases that can't be fixed the way we have the API right now.\n@andygoblins Can you please take a look in @henrikingo's point and see if we can mark this as solved with the current API that we have? Thanks.\n. Unfortunately that is not possible. The overview is not part of impress.js API, it is just an empty step that is positioned in a way that shows all the content of the other steps. You can implement this feature locally though.\nRelated to https://github.com/impress/impress.js/pull/399.\n. > Just for the sake of curiosity, are this kind of contributions somewhat usual in Github?\nOnly if ppl start bikeshedding on it ;)\n. Hi @mofosyne , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Hi @mofosyne thanks for the response! Can you please provide a real use case where this feature makes sense in the context of a presentation? Site or talk presentation.\nI believe this will be best implemented as a plugin once we have a documented way of creating plugins, but we need to know the use case anyway for knowledge purposes.\n. Can't you just automate the whole process as it is now using the .next() API? I imagine one could read the content of the steps with the Speech API and call .next() once it is done. This is definitely not something that impress.js should take care in the core.\n\n(Hmmm... which would also end up doubling as a very accessible way for the deaf to view a web presentation as well).\n\nThis can already be done using WAI-ARIA, which is a specification to use special attributes that enables html to be viewed through a text reader for def people. Again, something that can be done in a per use basis.\n. > That's a good point, is there already a project that would read out a close captioning text file and sync the synth speech to press the .next() and highlight/cursor as needed?\nNot that I know of, you could be the first one to show that :)\n. @mofosyne Now re-reading my comments I realised that you were talking about def, not blind. WAI-ARIA, as far as I know, only solves the problem of blind people (it allows efficient use of a screen reader).\nThis is definitely not a feature for the core itself, but rather to be developed a plugin. In the current state of impress.js, is there anything blocking this from being achieved in your side?\n. > I can send you a link to my proof of concept so you can get an idea of what I was thinking, and why I think its still has some ways to go before we should try to implement this in impress.js .\nCan you please? It would be very useful.\n\nWhat's your email?\n\nCan't you post it here? Github accepts zip files. I would like to keep the discussion online, because anyone have access to it and could help in finding an optimal solution for the problem.\n. @mofosyne \n\nI imagine it is more convenient to write the speech script inline with the actual slides ...\n\nYou say \"speech script\", I understood initially that this request was related on reading out loud the content of the steps, but it seems to be related to a transcript to read while the steps are executing. I guess I got it now.\nSo, if you want to create a transcript to be read with the actual slides you don't need anything implemented in impress.js, you can just use the impress:stepenter and impress:stepleave events to check when the step was changed so that the transcript can read something while it is being shown.\n\n... but there needs to be a consistent way to insert the speech text in the slide source in a way that doesn't mess up the slide if the plugin is missing.\n\nYou can do that right now without worrying of messing up with any step if the \"plugin\" is missing. Just listen to the events mentioned above and include everything in a separate script in the page, this way you can remove the feature just by removing the script tag. It doesn't need to be only through a script tag, but any other method of module injection you can do in the web (ES6 modules, AMD, etc.).\nBasically the request for this feature is totally fine, it would definitely be a nice to have feature when using impress.js.\nBut there is a problem.\nAs you are probably aware, impress.js have a lot of requests for features and the development resource is low. I find very good the excitement for new features on impress.js and your help in contributing to it, thanks for that. However, in order to continue I need at least the following questions answered:\n1. Given the suggestions I gave above and considering the current state of impress.js, is there anything blocking this from being achieved in the developer side?\n2. Are you suggesting this feature based in a real use case you have or this is just based in a \"nice to have\"?\nBe aware that the purpose of impress.js is not just to be a presentation tool for talks, but a way to use an infinite canvas to provide a step-based mechanism for the web, so that it can also be used for presentation talks as one of the main use cases. We wouldn't want to add features in the core that try to tackle only one of the many use cases, although we are willing to support other devs doing innovative things on top of impress.js.\nLooking forward on your response. Thanks.\n. Hi @blacksburg98 , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\nPS: The links doesn't seems to be working anymore.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. Hi @Emyleen , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. Hi @Emyleen , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. Hi @SethGunnells , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. As from this comment we will be closing the PRs related to this feature due to the low amount of interest and maybe take a look in the code later when we jump into it. For now we will be keeping track of it on #478.\nThank you very much for the PR @SethGunnells!\n. Closing as a duplicate of https://github.com/impress/impress.js/issues/512. When that issue is closed we will have NPM support :).\n. @mhils\n\nPlacing objects in the 3d space which are not directly part of an individual slide.\n\nSorry, but I don't understand this use case, why would someone want to place an object in the 3D space that is not a part of the individual slide? Is disabling removing the step? Can you please elaborate on why that would be useful? Maybe with a visual real world example or something like that?\nAlso, if this is related to #290, wouldn't \"skip\" or \"static\" be a better naming?\nThanks!\n. > My primary use case is having backup slides in the overview at the end.\nI will try to elaborate the questions and also clarify why I am asking all this:\n- Why do you want backup slides exactly, what do you want to achieve in your presentation that can't be done without this feature?\n- For your use case, can't you position a menu with links that goes to specific steps? If not, why?\nMy point is that I am trying to get to the \"why\" of this in a user perspective. The user requirements.\n\nA small code example is given in #429 \n\nWhen I mean by example I mean a visual real world example where this feature is being used. Preferentially not links, but a demonstrable gif (that can stay documented in this issue forever, because links can become obsolete).\nThank you!\n. > it's very convenient to just disable a few slides when shortening a presentation\nYou can also comment them, there is no benefit in creating a new API that should be documented and supported for everyone from now on for this specific reason.\n\nbut I'd like to have my HTML logically grouped\n\nCan you please show an example of the benefits of logically grouped markup?\n. Hi @mhils , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. Hi @nathanael-fijalkow, the intent here is to see if the OP is interested in updating the PR, if not then we will track this issue elsewhere. Backing up the PR would not make much difference because you would not be able to update it in @mhils fork due to the default security configurations of Github.\nFeel free to create a new PR and keep track of it if we don't receive a response on this one for a few more days.\n. @mhils Thanks for the response.\nI was just asking if you are still following this issue because the next step will be reviewing all PRs one by one, for the moment we are just triaging and closing the ones that are inactive. See https://github.com/impress/impress.js/issues/512.\nSo, are you still keeping tracking of this PR and willing to make review changes or create tests if necessary later? If yes, then we will keep this open.\n. > ... how to find people who will not only just want to add new stuff to impress.js but will take a good care of the project.\nMy suggestion is to keep this thread open with a specific label to get more attention in the issues tab, look in the pull requests and forks for people whose implementations share the same vision or wait until someone pops up in this thread.\nTo make your vision clear it would be nice maybe to start closing a few issues or pull requests with the reasoning (also for triage) and provide some written stuff that clarifies your vision in detail. As it stands, the only doc I have found if in the readme:\n\nBut remember that I only accept code that fits my vision of impress.js and my coding standards ...\n\nIt doesn't specify in details your vision (useful even for impress users) and for coding standards it is possible to use grunt/jscs/jshint and enforce this at build level with travis-ci, like mentioned in the last comment.\n. @MattNewbill, the question is not related to this discussion, please open a new issue.\n. Hi @bartaz,\nA few hours ago I created a fork of impress JS for personal purposes and it may be of your interest to take a look and see if that is the direction that you expect impress.js should go.\nhttps://github.com/web-stories/impress.js\nThis is not actually a fork, in github terms, but a new repository built from the master code. I did this in order to enable issues and control the implementations I need to make to adapt to the project I am developing.\nAnyway, I have this project where impress is going to act as the core, but it is not possible to implement impress as it stands due to several factors, including the lack of a proper automatic build, test/ci, style pattern, module split, etc.\nFor that reason I started this fork, below is the changes I made and the reasoning behind each of them.\nNote: Those changes are not trivial regarding code diff, so I took advantage of that to enhance a lot of points I believe should be enhanced to make it easy for maintenance.\nCode Style\nIn the actual code base, although most parts of the code use a consistent style, there is still some parts that exhibit some inconsistencies (like the () and [] notations). Also, since this is a unique code style, it would be necessary for new contributors to adapt, which may not be ideal.\nTo solve this with minimum work, we need a build system that uses JSCS and a fixed code style model to be developed into, so we don't waste time discussing useless stuff. We need to think with the reason and adapt to the reality.\nThe I choose jquery code style model from jscs preset. Why? because jquery code style is widely used and represents the code style used by the most known and successful JS project out there.\nIn my fork I made a change for personal purposes, but that can be easly modified:\n\"requireMultipleVarDecl\": null \nNot sure if this project uses multi var declaration, because in some parts (usualy when there is comments) it uses multiple var, in others it uses single var. According to http://benalman.com/news/2012/05/multiple-var-statements-javascript/ there is at least one reasoning for using multi var, so let's stick with that.\nDefault rule:\nRule not enforced? Be consistent.\nRule not consistent? Follow jQuery style.\nRule not consistent and not following jQuery style? do what you must and discuss a consistent pattern to be enforced using jscs.\nJSHint\nThe pattern here is the following:\nLeverage jshint defaults.\nIf defaults break code, use the impress JSHint source comments.\nEDIT: I was using this link as a reference: https://github.com/jshint/jshint/blob/master/examples/.jshintrc, but it seems to be incorrect with grunt jshint defaults, I fixed it.\nBower\nI don't work with bower, so I have no idea how to better integrate with the build process. See here\nShift + Tab\nI implemented shift + tab for consistency with the current tab behavior in the default navigation: https://github.com/web-stories/impress.js/commit/1453e353448d812118baee1a72fc182491a9d867\nIn the comment it says: \"And yes, I know that for the sake of consistency I should add [shift+tab] as opposite action...\", but it is not clear why you didn't do it at the time.\nAMD Support\nI have added AMD support. In case you don't know how AMD works, I have used this implementation to create a test environment using qunit and testing AMD support with requireJS. Other loaders support are going to be added on demand.\nThe AMD support hides the \"impress\" from global scope if detect AMD present, and allows the use of \"impress\" in a local scope:\njavascript\nrequire( [ \"impress\" ], function( impress ) {\n  impress( \"id\" ).init();\n});\nMore details here: https://github.com/web-stories/impress.js/pull/4, or more specifically here: https://github.com/web-stories/impress.js/commit/c9d1078ffd5ab79f1c85c16b0eabe8d98b4b3ff4\nAdditional coolness\n\nUsing the command $ grunt pages the build system automatically create a new gh-pages branch or overwrites an existing one with the current build state.\ndist folder is removed from SCM, but you can easly add it using $ git add build -f\n\nTell me what you think about this.\nCore: https://github.com/web-stories/impress.js/blob/master/src/js/core.js\nNavigation (optional): https://github.com/web-stories/impress.js/blob/master/src/js/navigation.js\nTo run the build:\n- clone the repository\n- install nodeJS\n- type $ npm install, wait for downloads\n- type grunt and check inside dist folder and dist/demo/index.html\n. By the way, thumbs up for the initial impress presentation using Simon Sinek's golden circle principle and Steve Jobs ;D\n. My current project is not just about a regular slide presentation, it should be scalable and impress.js does not seems to be the best fit for it.\nI switched to jmpress, a jquery plugin that handles advanced features that impress currently doesnt, with the potential to develop plugins for it. Since I am using angular, I also created an angular-jmpress prototype. It is just a prototype of  a basic usage, since I didn't find any repository containing an angular port of jmpress.js or impress.js.\nAny help is appreciated. jmpress need contributions and angular-jmpress is just something that, if evolved, could be eventually ported to the jmpress organization.\n. @regebro Yeah, I fixed the link.\nBy the way, Firefox is pretty broken for impress itself, at least on Windows. A few days ago Firefox 34.0 wasn't working, several artifacts in the screen when changing a step. It is related to a known issue: https://bugzilla.mozilla.org/show_bug.cgi?id=1098266.\nIf you are having any troubles at linux you could send a pull request. Like I said, jmpress is a very good initiative with a pretty robust codebase, but need contributions.\n. @bobintornado How that type of governance would help this project in its current state? I agree there should be a way to keep the efforts more centralized, if that's what you are suggesting, but I realized the problem here is about maintainers availability and not governance type (this is already MIT licensed so anybody here could take over).\nThere is also the option for the interested parts to finance this open source project if there's enough ppl willing to pay for it.\n. @seyisulu Unfortunately this thread has been drifting for a while, it's all up to @bartaz to document some API ideas and start triggering the action.\nAs a sidenote: It would be easier first to document the API with the community participation before changing any code, just a suggestion.\nI am also totally up to help contributing here, it is of my interest to have a robust and stable API that could be used to build port for frameworks such as angular and extend for each particular use case. Impress is not just about presentations, it is a framework to create 3D artifacts in an infinite canvas leveraging all HTML5 and CSS3 features.\n. :dancer: \n. I just want to point out that @bartaz should make it clear what \"presentation\" means in impress context. I can interpret \"presentation\" as a bunch of slides that form a website with form controls, etc. Not just public presentation in slides format.\nOne thing I realized looking through several issues is that the value of impress is not just for static presentations, but to be used as a core framework that uses CSS 3D transform to provide a simple API with the concept of \"steps\" instead of \"slides\". A step may contain a slide, or may contain nothing.\nThe contract of the  public API must be really low-level, in a way that it could also be conveniently integrated with frameworks like AngularJS, while making it clear that the project cannot handle all use cases in a single repository.\n. Here are some suggestions:\n1. Create a principle that express in one or two sentences the purpose of this project, that might close a lot of issues that seems unrelated for what this project specifically is meant to. \"It's a presentation framework based on the power of CSS3 transforms and transitions in modern browsers and inspired by the idea behind prezi.com\" is too broad, that should be the definition of the organization, not the core.\n2. Make it clear beforehand that it should be low-level enough for anyone to integrate with angular and other MV* Frameworks or libs (I am familiar with Angular only, sorry) or use it standalone.\n3. Create an abstract UML-based architecture to expose the design and let other people suggest enhancements based on specific purposes inside the principle (1) and with practical obvious usage.\n4. Create the API docs first to have an idea of how the thing is going to work.\n5. In the end, start developing.\nJust remember the cost of change, it also applies to OSS projects:\n\nHere is an example of what I am talking about, it was continued from another project, and it's API was practically rewritten leaving the core intact. The same could be done for impress.js, but with a stronger participation from the community.\n. @bartaz \nComments were made, no advancements done. :cry: \n. :+1: I am definitely willing to contribute and help this project to go forward, since I use it in one of my projects.\n. Also, we may close this issue once the team is properly setup and once we have made the first relevant change.\nMy suggestion for the beginning is setting up the codebase for things like:\n- Setup a CONTRIBUTING.md file for contribution\n- Triaging issues/PRs that are not going to land\n- Creating milestones for issues/PRs (keep 0.x.x semver style until we are safe for a 1.0)\n- Implement a build system (Grunt? Gulp?)\n- Implement linting\n- Define a codestyle and enforce it through JSCS\n- Create tests\n- Setup Travis and maybe Sauce Labs/Karma to run the tests in several browsers\nThat would put the project in a state of quality and stability that will allow faster and better contribution from other folks.\n. Impress definitely needs an API improvement. The problem is that there are lots of projects/sites that rely on the current code which has no specific API documentation, and therefore testing first will ensure that the behavior will not be drastically changed in an eventual rewrite, a rewrite that could be done with good planning and conservative atomic and revisable changes.\nDocumentation is another point worth mentioning in the bullet points above, we should be cautious on what to document because documented features will have to be supported until the next major bump.\nI just created a gitter room, that is also public, so we can talk more freely about this stuff.\n. Thanks @henrikingo, I just reviewed your PR and added some interesting suggestions to be discussed. I hope we can move this forward using some help from everyone. Long live open-source!\n. > I know it can be tempting to put a load of tools into the project (build, transpilers, and what not)\n@bartaz It is all about quality. If we want to ensure quality I don't mean like transpilers or anything like that. What I mean is to automate and enforce linting, code style and testing. If we want to ensure quality for new contributions we need at least these three. It's all about moving things forward easily and in a robust way, of course never doing more than strictly necessary.\nI agree about everything you pointed out, we can follow your ideas for the future of the project and always ping you once something is going to change that.\n. @GordonSmith thanks for the link! :D\n@Pierstoval \nI am planning to create a script that crawls all forks from a given Github repository with a considerable amount of forks in order to find branches whose revision is ahead of the original. Doing this we can find duplicated features that provide evidence of a popular necessity that might makes sense to be implemented in the main project after some discussion.\nFor impress.js specifically, I guess it is better to do that after we have a low amount of issues/PR waiting. As it currently stands there is a lot of requested features that are not trivial to implement but are critical to the evolution of impress.js (mostly the ones tagged as \"future\" a long time ago), so adding more stuff just for the sake of stacking requests will not be much of a help right now.\n. > I think this issue should be closed too after 2 years.\nI will probably close it eventually once I reach this point of the issues triage :)\n. X-Ref: #262, #263, #404.\n. Hi @TristanV , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. This is a duplicate of #51.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\n. Hi @matthiasn it seems that the word is correct, it means that despite HTML and CSS you need to have design skills too.\nLooking forward on your feedback!\n. Want to update the PR? :)\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again\n. This is a known and reported bug at Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1098266\n. For now you could do this:\njavascript\nif ( navigator.userAgent.indexOf( \"Firefox/34.0\" ) !== -1 ) {\n    $( \"body\" )\n        .removeClass( \"impress-supported\" )\n        .addClass( \"impress-not-supported\" );\n}\n. Hi @MaxGfeller , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\nIn the meantime we will track this request on #426, publish on npm is something that only the maintainers can do.\n. I managed to implement this in a fork: https://github.com/bartaz/impress.js/issues/435#issuecomment-62306959 (See \"shift + tab\" section)\n. Closing in favor of PR #550. Any review is appreciated.\n. Hi @bartvanderwal, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. @bartvanderwal thanks for the response. Until now the master does not have this fix.\nFor now we are not accepting any Pull Request, just cleaning up old issues. We will leave only the issues in which the OP is still interested in making the required changes if necessary (like rebasing on top of master if the codebase changes), mostly when there is duplicates like this one. That helps us to reduce the noise.\nIf you are not interested in keep tracking this we can close the PR and check if there is anybody else who opened a duplicate and wants to keep tracking it (or we track ourselves using issues).\nWhat do you think?\n. > I don't understand your focus on if OP keeps track of a bug\nIts not about keeping track of a bug, but more about keeping track of one opened PR. If the OP doesn't keep track, then it will be harder to get a response from code review or if the PR should be rebased because the master branch changed at some point.\nI agree that this change should be landed soon, but before we go into that we are going to close duplicates and try to reduce the amount of opened issues/PR in order to understand better the more important requests we have for the moment. This is definitely one of them.\n. Thanks for the response.\n\nIt seems to me that you should just change this (original) repo to yours, since you added the shift-tab since you added a lot of other goodness like unittests and JSHint and AMD!\n\nUnfortunately I can't just change because it's been some time since I made that fork, but we definitely will import some ideas to the main impress.js repo.\n\nYou can then indeed close this issue. And I know think I understand your context better.\n\nOk. Again, thanks for the feedback. If you think we need to reopen this PR/issue later, just ping back :+1: \n. Shouldn't we cross-reference and track the issue using the actual #446 instead? We could cherry-pick this commit later if the codebase doesn't change too much.\n. > it really helps searching for what we'll implement after refactoring the codebase.\n:+1: \n. @SergiuFunieru impress.js doesnt seems to be actively maintained. If you want advanced usage of impress you may need to use jmpress, which is a jquery plugin which does a lot of things impress doesn't.\nThere is also this angular-jmpress prototype in case you are using angular. It is just a prototype of  a basic usage since I didn't find any repository containing an angular port of jmpress.js or impress.js.\nEven though you didn't mentioned it, I think its worth saying that I don't think impress.js is scalable if you want more advanced features.\n. My suggestion is just change to MIT once and for all so we can focus in building awesome stuff. Better focus in solving problems for humans using machines instead of having more humans problems brought into machines.\n. Closing as from the comment above.\n. Hi @Anish-Agnihotri , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. Just use the appropriate selector for each individual step with a greater specificity:\n``` css\n.impress-enabled .step {\n   / original styles /\n}\n.impress-enabled .step.my-custom-step {\n   transition: opacity .5s;\n}\n.impress-enabled .step.active { opacity: 1; }\n```\nOr tie with the order of the rules in the file, then you don't need to change specificity:\n``` css\n.impress-enabled .step {\n   / original styles /\n}\n/ This should stay always below the generic rule for all steps /\n.impress-enabled .my-custom-step {\n   transition: opacity .5s;\n}\n.impress-enabled .step.active { opacity: 1; }\n```\n.impress-enabled .step.active doesn't need to be changed.\nI didn't tested anything, but this may be useful to get started.\n. The project's author probably used Eclipse to create those files, Eclipse adds by default white space on new lines while other editors don't.\n. Hi @PunkChameleon , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\nBy the way, this seems duplicate of #396.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\n. @PunkChameleon Thanks for the response. Can you please update the commit so that you current account appears as the author?\n. We will decide if this should be landed this once #529 is dealt with.\n. @PunkChameleon Given the results of #529 it seems we are ready to land this. As asked earlier, can you please update the commit so that your current Github account appears as the author of the commit?\n. @PunkChameleon Commit author not updated since then =(\n. Hi @HexRdesign , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. Thank you for the response! \nCan you please rebase on master and check if the issue still exists? \n. I mean the master branch. The demo is outdated.\nAlso we can't merge this because there are conflits. The best way to check if the issue still persists is to rebase the master branch into this one. \n. > It works!\nOk so... as far I understand it means that this is working on master already? Closing then. Thanks for the PR!\n. Related: https://github.com/bartaz/impress.js/issues/435\n. Hi @patricebeutler , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. @patricebeutler Thanks for the feedback!\nThis PR seems to have been opened against the dev branch and it contains a lot of unrelated commits. We will probably revisit this if we need ideas on how to implement substeps.\nThanks!\n. Hi @fbairn , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again\n. Hi @dongseok0 , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\n. Hi @tobegit3hub, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. I edited the title for better SEO, this request seems to be related to bower support.\nI guess we don't need to wait for feedback to close this issue, since the project already supports bower, see https://github.com/impress/impress.js/blob/8e4888385355059d60b608a19245bd300752bb86/bower.json\n. The step element is absolute positioned, so if u want an image to be used in the background you have to adjust the width/height of the step element to fit the whole screen, then use the background inside the step element.\n. Hi @Johnoob , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. If you want to build any 3D presentation I would say impress.js is the way to start.\n. Put some demos online. Sometimes its better to have a way to visualize the result even if you have questions about how it was done internally.\n. Its pretty hard to grasp the final idea from a minimal example :S.\nWhen I mentioned the suggestion to put some demos online, I meant that I am curious of how the design would be to express a multi layered presentation with additional details. I am pretty sure its not just me, its interesting to see different ways of using impress. It's an awesome tool with many design possibilities.\n. Ok, I would be interested for a functional example though if you manage to finish it.\nAbout FF 36. If jmpress doesnt work, then probably impress.js doesn't work either. Have you come in a situation where jmpress did not worked but impress.js did? In my tests both have the same behavior regarding compatibility (and jmpress seems to have a better compatibility since it falls back to 2D, like being able to work in Opera).\n. The problem is not directly related to impress or jmpress, Firefox broke the 3D transition in some versions. Just because jmpress doesnt work and impress works in a \"bugged\" way it doesnt mean one is doing something more \"right\" than the other. Both handle the transitions pretty well.\nThere is a Firefox report about that and it was fixed in the latest versions: https://bugzilla.mozilla.org/show_bug.cgi?id=1098266\nThere is an issue saying the same was happening for Firefox 34, so it doesnt seems to be restricted for FF 36: https://github.com/bartaz/impress.js/issues/443\n. @Hypoon Thanks for the comment and sharing your use case, that was very useful.\n\nAny news on this front?\n\nSee this and this.\n. You can find some content in the Wiki page. I guess that is the best place I can recommend :)\nClosing as solved then...\n. This is fixed as from https://github.com/impress/impress.js/pull/511\n. Hi @matb , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. @matb Could you please give an example of which tools this may cause problem in jsfiddle or jsbin?\n. Actually it is not, see https://github.com/impress/impress.js/blob/master/bower.json, there are 2 bower main entries.\n. I have created an issue to track this, see #522\n. This issue will be fixed once the version 0.6.0 is released.\n. Closing as a duplicate of #512 (see bullet points).\n. Hi @Sneezry , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again\n. Hi @tvanollefen thanks for opening the issue, but this issue was already fixed on #511.\n. Hi @minedev , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. @minedev Thanks for the feedback! If you want to make sure the problem does not happen then I suggest not relying in the demo, but checking out master and test locally. Although, I still think this feature was not implemented.\nAnyway, since you are still tracking we will come back to review this later then, Thanks!\n. This is a possible duplicate of https://github.com/impress/impress.js/pull/51. @michaelneu can you please check if the problems discussed in that issue also applies for this PR? Thanks!\n. By the way, this PR was opened against dev. The new contributing guidelines states that it should be opened against master, can you fix that too?\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\n. This Pull Request seems to have been created by mistake. Please ping us to reopen if it doesn't.\n. Does this have any relationship with https://github.com/impress/impress.js/pull/473, https://github.com/impress/impress.js/pull/425 or https://github.com/impress/impress.js/pull/131?\n. > But I suggest these are not closed, rather we should respond to all that this kind of functionality will be added via API, and people are welcome to propose such an api, and to do so there must be test coverage first.\nI would argue that the related PRs could be closed for triage if there are too many duplicates or with lots of unrelated changes, there is no value in keep open PRs that cannot be landed as is. One important thing though, is not to forget about important features like this one by maintaining an open issue specific to the purpose of solving this kind of problem with cross-reference to the proposed PRs to consult later.\nFor an example take a look in the issue https://github.com/impress/impress.js/issues/516 and the linked PRs.\n. I have closed all other PRs due to the lack of feedback from the OP, except for #425. That one seems to be more easy to review and the OP has demonstrated interest in keep it going. Should we close this in favor of #425 instead? Or, if the amount of changes are going to be reduced for this PR, should we keep this one and close the other?\nDespite which one we keep, it will only be landed once we have a proper structure for testing anyway. We just want to focus in only one PR instead of keeping duplicates open.\n. @henrikingo So what do you suggest, close this and the other one in favor of #478?\nIt might be worth reducing the amount of open stuff so that we can focus in what can be potentially done in the current state of the project. I guess that landing stuff in the core now is not a problem, since we will probably have to change the whole structure in upcoming releases anyway.\n. > So what do you suggest, close this and the other one in favor of #478?\n@henrikingo I will assume we should close both and follow the issue #478 instead, as you mentioned above:\n\n@FagnerMartinsBrack: You're right. Closing current PRs and opening single issue for discussion makes more sense.\n. It's not the responsibility of impress.js to format the data. I would say that impress could keep track of the steps position, but I am not sure if this is useful enough to be exposed as an API.\n\nYou can easily keep track of your steps using an external model. For example, if you are writing your html by hand, you know the position beforehand, so you can print without impress.\n. > If you have 99 slides, and numbered them manually, and then add a slide to the beginning, you would have to renumber all of them\nIn your case it makes sense to conveniently expose the position as a Number or as a position Object Literal. But not to format the data, that's the client job.\n. I have made a comment in that issue with some suggestions for the next steps to make: https://github.com/impress/impress.js/issues/435#issuecomment-132184917\n. @yalishizhude Thanks for the PR!\nClosing due to the comments above and also due to the lack of feedback from the OP. It seems that this feature is not useful for the current state of the project and it can be easily done using external data.\n. We can allow custom easing support for impress.js eventually.\n. I am not the best authority to provide the answers, but I am familiar enough with JS ecosystem to answer these questions.\n\nHow are plugins and APIs created (coding style, how are plugins loaded, dependency injection...)\n\nCode style is subjetive, use a preset from jscs to prevent bikeshedding.\nDependency injection I only saw in Angular, JS have no native dependency injection mechanism\nPlugins can be loaded in several ways, usually people trigger events with the pub/sub pattern. Jmpress.js has a very good subscribe mechanism, but I am not sure how to adapt to impress.js from the top of my head.\n\nRepositories: Is every plugin a separate github repository?\n\nNot if it is essential. Take jquery for example, they changed sizzle (the selectors library) to another repository but initally it was built in. In impress.js case I would recommend creating a robust plugin mechanism and create plugins, like keyboard navigation, in a separate repository. There is also the possibility to create repositories for specific use-cases like \"impress.js as a common presentation\", \"impress.js as a site navigator\", although that doesn't seems appealing.\n\nIf yes, how are they brought together and version dependencies resolved?\n\nUsually we use npm or bower and integrate in a build mechanism using gulp or grunt. If we want a new core version it's just a matter of updating the dependency version in the package.json file.\n\nPackaging: bower, npm, rpm?\n\nThe 2 most used are bower and npm. bower is fading away slowly, but npm is here to stay.\n\nNote that different user stories may lead to different package repositories (e.g. bower for a HTML5 app, RPM for a PowerPoint replacement)\n\nI don't see how that should be responsibility of the org, other than provide the code. One package manager should be enough, and then others could be added if there's A LOT of requests and people available.\n\nLower level details like namespace conventions (how to avoid 2 plugins using same names in JS, CSS, HTML attributes)\n\nThere is no way to prevent 2 libs using the same namespace, what we do when we know that there is a conflicting namespace is to use a noConflict pattern, jQuery does the same (in their way).\nFor plugins it's just assuming that people will \"own\" their namespace inside impress.js at the moment they create one, although the namespace priority will be from impress.js dev itself. Take for example Grunt, they call \"grunt-contrib-*\" all plugins that are maintained by the Grunt team, something similar could be done with impress.js.\nI hope it was useful :).\n. > ... there must be a way to specify that \"this module won't work unless module B is loaded first\"\nJust docs, JS is untyped, In jQuery case they just document that \"this is a jQuery plugin\" and the dev is responsible to load jQuery first.\n. Mocha, QUnit. There is a lot of possibilities. I personally use QUnit integrated with Travis CI Open-Source plan (Continuous Integration) integrated with Sauce Labs Open-Source plan (Cross-browser testing).\nI have worked (although didn't set up from scratch) with a project using Karma (it starts a local browser to run tests and allow you to debug it). I would say Karma is the best for crossbrowser testing and debugging, but didn't have any chances to work fully on it (yet). You can use QUnit, Mocha or Kasmine to run tests on top of it (Karma is not a test framework, it just start the browsers).\n. For assertions I am most familiar with QUnit, that was created and is in use by jQuery Team. Karma is used and was built by the AngularJS Team.\n. It would be amazing if there was an algorithm to simulate exactly the changes a native do when swiping (like moving the step while you drag until a given threshold).\n. Really awesome!\nI believe though, for the sake of usability, that it should swipe using the pointer as the reference instead of the actual slide edges. If you use the slide edges it will not transition when you start the swipe after the middle of the screen.\n. >  can you describe the desired behavior?\nIn the current implementation, the step change only occurs if the border of both slides pass through the middle of the screen. If you start swiping from the end, the pointer is after the middle of the screen, so the swipe doesn't happens.\nExample below:\n\n. :+1: \n. I am not sure if this is going to be merged soon, see #435.\nThe reason I suggested some improvements was because I see a lot of value in something like this, even if it is not merged. I will probably cherry-pick some of the changes if you don't mind ;D\n. @and3rson I find this feature very useful. Just pinging to say that we haven't forgotten it. The problem is that without proper automated testing this can't be landed. We will keep this in the queue and come back later.\nTo give a little bit of context, recently a decision was made in the project to make the development more active. If you want to keep track of what we are doing right now, please check #512.\n. @Pierstoval This depends on https://github.com/impress/impress.js/issues/575. We can't start implementing new features until we have a considerable amount of integration test coverage in the project. We don't want to break the presentations of who is using it :)\n. We should document how to fix this problem, and if necessary help to push browsers forward in making SVG play nicely with CSS 3D animations.\n. Hi @ltregan , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older PRs like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again.\nAlso, it doesn't seems that removing the tab binding altogether fixes the issue stated in #238.\n. Closing because it was probably reported in the wrong repo.\n. Closing as a duplicate of #81.\n. Hi @peternerlich , in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. @peternerlich Thanks for the response!\n\nI am generally still interested in a solution\n\nNice to hear that. The problem is that I don't understand yet what is the issue xD\nCan you please elaborate what is the issue in details, maybe with some LICECap gifs for visualization and small code snippets?\nIf the issue is clear, we might keep it open for implementation. No need to \"work\" with impress (code wise), although we encourage you to do it :D.\n. You need to add your Github e-mail address to the user.email git config in order for Github to find the correct author of the commit.\n. Maybe we could split the tests into logical modules and leverage QUnit before/after APIs to setup requirements for each test (AKA testDone and testStart).\nI am also wondering if it doesn't make more sense using more fluent testing APIs such as Mocha/chai instead of Qunit. Up to discussion.\n. > I picked Qunit out of the discussion in #494\nThat was just my personal experience at the time, not that it really matters. We should probably focus on what is the best for the project anyway.\n\nQUnit is awkward in 2 ways\n\nI agree QUnit is not that robust or fluent, I realized that after working with different testing frameworks over time such as Mocha/Jasmine integrated with Karma. But as I said earlier we need to judge which one is better to achieve the goal of taking this project forward.\n\nI forgot to say: Thanks for reviewing!\n\nYou're welcome. I hope the same for any PRs I send from now on :)\n. Have you considered a fluent API for writing the assertions? This way we don't need to think about how to write the test messages, it will be implicitly structured according to how the assertions are written.\n. QUnit is assertive, while a fluent API is behavioral. The benefits of a behavioral API is that you don't need to care how you are going to structure your assertions, you just declare your expectations and the API take care of presenting the failures automatically.\nIt's not like it is strictly necessary, just would be an interesting enhancement in case you want to look into that. We can do it later anyway.\n. Basically I see a few points of general improvement that I might have mentioned earlier or not:\n- If there are comments in the code, then it means that the code cannot document itself. Is it possible to write the code in a way that it only documents what can't be seen by reading the code? If you want that I point out some examples in the code I will be glad to do it, it's just that I think it's pretty obvious that some comments are just redundant, maybe that's intended with plans to be removed later?\n- Is it possible to split the JavaScript code in a separate *.js file? I say that because usually it helps for code editors to highlight the correct tokens in a file that only has JavaScript. Besides that, the separation might make it easier to focus in the behavior of the tests instead of how the document is structured (the html itself will be pretty small).\n- Just out of curiosity, is it possible to run the second test Impress Core API separately? Ideally tests should be atomic in a way that they can be run separately without having dependencies on each other.\n- About code style, as we probably already discussed, it is better to define and document some guidelines before this is landed (it is going to be done in the \"CONTRIBUTING\" part of https://github.com/impress/impress.js/issues/512). After we define it, we can adjust if necessary as a last step. Does it makes sense holding this until the guidelines are defined by the team?\n. > In my experience, most coders vastly overestimate the readability of their own code, when read by someone else\nThat usually happens when there is no code review (which is not the case for open-source projects maintained by more than one person) and when the developer is not aware of common principles of idiomatic code and design patterns. It is definitely possible to create readable code as long as there is enough test coverage to provide safety for refactoring.\n\nYou can then read the code to check whether the code does what the comment said\n\nThis is an unnecessary additional step to the whole understanding of the code. Also, if the code changes, developers tend to forget to update the comments. My previous statement is actually a fact, not opinion. You can see this happening in many popular open-source and closed-source projects. In jQuery, it is just watching the development for a few months that you will see this happening over and over again, mostly with browser support comments. Needless to say that we are talking about a lib that have more trust than any other library of its kind.\nBesides that, I can quote a principle that is proven in the wild and used by the most successful companies in the world, one of which comes from the agile manifesto:\n\nWorking software over comprehensive documentation\n\nThat principle was created due to the huge amount of evidence that existed and still exists among teams and individuals where internal documentation ends up not being maintained after a while, which always become outdated and obsolete.\nJust to clarify that this do not happen with public API docs, because those docs represents the public contract to the consumer of the API, therefore acting as a single source of truth on how the API should behave. Basically if the public docs says something and the application doesn\u2019t behave like that, then the application is the one that should be fixed, not the docs. If the public docs doesn't say something, then that is an undefined behavior. Needless to say that the documentation contract is pretty well understood by specifications such as semver.org, which has specific guidelines of versioning taking into account the public API.\n\nWithout comments, you can read what the code does, but there's no reference point that will tell you whether that is what the code is supposed to do.\n\nYes, there is a reference point that will tell you what the code is supposed to do as stated in the previous comment, and that is the documentation of the public API.\n\nAs we cannot benefit from the automatic reset of the div#qunit-fixture element\n\nThe idea that I commented earlier might solve this in a very unobtrusive way:\nhttps://github.com/impress/impress.js/pull/510/files#r53293514\n\nit is actually very important to emphasize that each test cleans up after itself and tests don't depend on things done by previous test\n\nI don\u2019t understand this part. The tests are not cleaning themselves and the second one seems to depend in the previous one. Are you saying just to agree that the principle stands but that in this case it is impossible to do it because we can\u2019t use quint-fixture?\n\n(For example, it might become necessary to do things like impress().goto(1) between tests. QUnit seems to have an api to do such things between tests.)\n\nAFAIK QUnit only have APIs for running before/after all tests. Running before/after each module and Running before/after each test. AFAIK there is no API that runs in the middle of tests (only after or before each one).\n\nThere are still lots of tests that need to be written, and adding QUnit will enable others to help writing tests. Also accepting any other code contributions is now blocked by not having tests.\n\nThese are very good arguments. I understand now why it makes sense doing this ASAP and I tend to agree with it after what you said.\n. Just to make it clear that my arguments about comments in the code is not against comments that create value to the code, such as comments explaining something that the code doesn't (for any reason). It is specifically about redundancy, commenting what the code is explicitly doing.\nHere is an example:\n\n// Helper function to determine whether this browser is supported by \n// impress.js or not. Copied from impress.js itself.\nvar _impressSupported = function() {\n\nIt is perfectly clear what the code means:\n\nHelper function\n\nIt is declared inside a helpers.js file and is a function, therefore a helper function.\n\nto determine whether this browser is supported by impress.js or not\n\nThe name is actually _impressSupported(), which means that it checks if \"impressSupported()\"\n\nCopied from impress.js itself.\n\nThat is something unnecessary. A reader wouldn't need to know that. If one wants to find the discussion about why this code was added one can use git blame and eventually reach this PR via cross links that will contain the whole context of why that line was added in the first place. This is one of the reasons I love git and github so much :heart: \n. > Yes. I don't see what problem you're discussing here?\nYou said \"it might become necessary to do things like impress().goto(1) between tests. QUnit seems to have an api to do such things between tests.\", then I just pointed out that it seems QUnit doesn't have an API to do things between tests, just before/after each one, which might not the same for your use case.\n\nSurely you agree, in principle, that each function at least should be preceded by a short description of what it does?\n\nLet's talk about this specific case. If you are talking about internal test functions whose comments does not generate a public API, then definitely not, not me nor anyone, there is no default rule or principle on that matter, it all depends upon the context. For example, there is not a single popular open-source project that is trusted by many companies and maintained by more than one person that always documents internal test functions by default. In this case, a function preceded by a description of what it does is an evident code smell, and is only used when the code cannot be changed by other reasons (which is clearly not the case for this PR or the examples I mentioned in the other comment) or does not make explicit what it does.\n\nAgile manifesto also says that we cannot collaborate on this project unless we sit in the same room so we can talk to each other.\n\nI never said anything about using any agile methodology here and there is no point in discussing about that. I never use agile in open-source projects for obvious reasons. This is probably an unintentional straw man that was created in this discussion due to an incorrect interpretation of what I meant. What I said is that one of the most evident principles in software development that is also used in one of the most widely used software development methodologies already predicts that documentation should not be abused: \"Working software over comprehensive documentation\". Creating redundant documentation is totally abusive when you already can use the tests to document how the application is supposed to behave.\n\nAnyway, I think also this discussion falls within the style guidelines discussion.\n\nI definitely disagree with that. Writing useful code has nothing to do about code style, it can't even be verified by a tool like JSCS. It is about writing useful code instead of writing tons of comments to workaround the effort of creating good internal abstractions or comments that add value to the tests. There are very good comments in this PR, I just pointed out some obvious redundant exceptions.\nAgain, I am not against comments, I am against redundant comments in tests. Impress main source code have a very good set of comments that annotate very well what it is supposed to do, sometimes even redudant for more experienced devs, but that is intended because the main file is supposed to be used as a learning resource for beginners.\n\nSince it doesn't seems we will get into an agreement on that, I will summon someone else from @impress/mergers or @bartaz to put and end into this discussion so we can get this landed once and for all.\nTo get a little bit of context and TL;DR for the ones that are coming here without having to read the discussion since the beginning, the discussion here is basically about useless comments in test files.\nTake for example this, this and this. Should those kind of redundant comments be kept in test files, or we just document what cannot be infered from the code?\n- [ ] Keep the redundant comments in test files\n- [ ] Remove comments from test files when the code is explicit on what it does\nWhen the majority of the team decides what it should be, I will agree with the decision and after that this PR is good to go :+1: \n. @bcipolli Thanks for the comment!\nCould you please point out the lines whose comments you think should be removed from the PR, if any? Even though we can remove or improve anything later when we add more tests, it is still better to document the decision so that we can revisit later and not leave it one sided.\nThanks!\n. :point_up: @bartaz I agree with everything you said, including about being declarative and the observation on the comments (which is to document only what the code can't tell for itself).\n. Even if the suite takes more time, we can reduce the time later, for example, by testing  without waiting for transitions or creating better preparations before/after each test.\nThere seems to be a lot of complexity in the process that maybe could be simplified a lot if we talk about each problem in isolation:\n\nMuch bigger problem is code maintainability, when same code is copy pasted 7 times.\n\nWhich code will be pasted 7 times? Can you give us an example? What does that code tests? And why there will be a problem with code maintainability?\n\nI can say for sure that it would not have been feasible to develop the tests in the style we're now discussing, since every simple change will then have to be done 14 different times (or 24, for the key/mouse navigation).\n\nCan you please give an example of a simple change that would make it necessary to be done 14 different times? I mean, we should't try to aim for 100% coverage right in the beginning, if that's what you are talking about.\n. I guess the problem is much clearer now, so here are my insights.\n\nSay that for some reason, the active step would no longer have a present css class, but we instead want to call it current. This would be a simple change in impress.js. But for these tests you would have to repeat that change for every time you copy pasted those assertions.\n\nSure, and in this specific example There is no problem with that. All tests that rely on the present class will need to be changed because they will fail anyway. Increase the abstraction just to change in a single place for a test has no value to prevent this sort of things, I will explain why.\nLet's take a look in the benefits of abstracting code and using DRY in the source code:\n1. You reduce the amount of bytes from the codebase, which is definitely a must in order to reduce the library size for the end-user.\n2. If we change a .present somewhere in the source, we might forget to do that in another part and the tests might not get this bug. This is one of the the main reason why DRY exists. The 100% coverage is pretty hard, usually we start testing a single common path, assuming that the code is properly DRY and reused in many parts of the system, then one common test has a higher probability to cover more than a single path of the program execution due to this assumed reusability inside (which can easily be spotted by code review, a static testing pattern).\nNow, those benefits apply to testing code?\n1. In testing code we don't care about bytes, because that will not be downloaded by the end-user.\n2. If we change .present to .current in the source code, then we need to take extra care in code review to know that it will be changed everywhere it is being used. In the tests though, it will just break all tests that are checking for .present, no need for extra effort because the tests are declarative. If a test does not break if the behavior changes, then the test is non deterministic and therefore is useless and should be removed.\nAnother benefit in changing the test in the places it is being directly asserted is that the reviewer will know exactly, by the diff, which tests are being affected by the change, instead of having to understand the whole abstraction and complex logic first. This might expose other things, such as useless tests.\nI remember a quote I read once, don't remember the author which was something like this:\n\nYou can make good tests become faster, but you can't make faster tests become good\n\nBasically it means that we can fix problems in the future if we start in a simple way, incrementing the value of the code over time. This way, we can visualize the need for complexity and discuss as a team later.\nMy suggestion would be something like this (pseudo code):\n``` javascript\nQUnit.module( \"Core API\", {\n  before: function() {\n    // Reset the whole impress.js state\n  }\n});\nQUnit.test( \"Initial state\", function() {\n  // Given 2 steps\n  test.assert( / step 1 has active/present classes / );\n  test.assert( / step 1 triggered the stepenter event / );\n  test.assert( / step 2 has future class / );\n  test.assert( / hash is correct / );\n});\nQUnit.test( \"Left/Right move\", function( test ) {\n  // Because the initial state is already tested, we don't test it again\n  // Given 3 steps\n  impress.next();\n  test.assert( / step 2 has active/present classes / );\n  test.assert( / step 2 triggered the stepenter event / );\n  test.assert( / step 1 has past class / );\n  test.assert( / step 3 has future class / );\n  test.assert( / hash is correct / );\n  impress.prev();\n  test.assert( / step 1 has present/active classes / );\n  test.assert( / step 1 triggered the stepenter event / );\n  test.assert( / step 2 has future class / );\n  test.assert( / hash is correct / );\n});\n```\nOf course we need to account for async stuff and other requirements for the code to work, but always keep in mind to create declarative tests so that it serves also as a documentation of what is supported for future and existing maintainers. If it breaks, then we need to change it exactly in the specific assertion, so we know why it broke without having to understand the underlying logic behind it.\n. > It's an undisputable fact that to change something in 14 different places (let alone 24, etc...) takes 14 times more time than changing it in one place. I don't know why you insist on ignoring this fact, but since I am the person actually writing this code, I happen to care about it quite a lot.\nPlease, do not start to act defensively assuming that I am ignoring principles or facts, I acknowledge it perfectly. You are doing an awesome job with the tests and I am here to help, just like you :+1: \nThe fact is that if there is a need to change the test in 14 different places then something is wrong, in the example I gave above there are only 3 assertions in which the .present class will have to be changed in order to get a very good initial coverage, which is reasonably not a lot of repetition. After testing the correct inclusion of the .present class once (or for each API, maybe), then there is no need to test it again all the time and we can focus in testing other stuff. Also, by arguing that the .present class will be changed we are creating complexity to defend ourselves against a speculative future: we don't know if the class will be changed, and if it does we can act accordingly in the future do handle any problems that come with that.\nI guess the problem is that this PR does more than one thing, and that makes it harder to understand because there are a lots of assumptions in the current code. Ideally, a Pull Request should be atomic and do one thing, and one thing only. We should start simple, with little code as possible, and then increase complexity over time, if necessary.\nSo, here is my suggestion, please tell me what you guys think about it:\nStart with the QUnit structure and the JavaScript code separate in a different file (which is not a speculative future, we will need that eventually), and a single atomic test (not module), that can be run alone or with the whole suite.\nFor example: Test only the .next() API or the initial state. Assert that it adds the past/present/future and active classes in a single PR. After it is merged, we can create a new PR that adds a test for something else, so we can focus in only one thing at a time.\njavascript\nQUnit.test( \"Initial state\", function( test ) {\n  test.strictEqual( ..., ..., \"Have the present class\" );\n  test.strictEqual( ..., ..., \"Have the active class\" );\n  test.strictEqual( ..., ..., \"Next step have the future class\" );\n});\n@henrikingo @bartaz Does that makes sense? I guess this will make the communication much better and help to land things faster. It is one small step for the code, a huge step for impress.js :)\n. @henrikingo Thanks for the update!\nI have taken some time to actually run the code and check it deeply. The previous reviews were only static, based on the assumption that everything works as expected. I never actually run the code.\nSo, given this deep review my insights are below:\n. The second test doesn't run alone. Is it intended? Can we do it in a way that each test is atomic and can be run separately?\n\n. I haven't finished taking a deep look into the implementation. I will continue tomorrow :+1: \n. I have created a Pull Request on top of this PR with some suggestions: https://github.com/henrikingo/impress.js/pull/1\n. @henrikingo Just pinging to know if you are still tracking this.\nLet me know if there is anything I can do to help or make any of my suggestions above clearer.\nI ask this because #535 seems to be sort of dependent on this PR, since there is more than just white-space changes and a test is always welcome.\n. @henrikingo @bartaz Pinging one more time. If there is no comment I will push https://github.com/henrikingo/impress.js/pull/1 through.\n. The good thing in comment on the \"Files Changed\" tab is that Github shows a part of the snippet and all comments below it in the timeline\n. That makes sense while we are at the cleaning process, although it doesn't seems worth ignoring feature proposals. \n. Good idea.\n. @henrikingo \n\nFor the contributing file, I would add:\n- While we may not have 100% test coverage in the near future, it is a pre-requisite for considering any pull request that the code being touched is covered by tests. If this is not the case, you're invited to start by adding such tests (testing the current code) after which you can propose your fix or new feature.\n- Pull requests should of course add their own tests testing the new or changed functionality, or in case of a bug fix, protecting against regressions.\n\nI have created the initial version of the contributing file. For the moment it reflects the master branch, it can be improved later, feel free to review :+1: \n. @Pierstoval Are you suggesting to keep this issue open even after the tasks in the description are completed?\n. > Oh no, actually I was just talking about the contributing file, nevermind I think I got lost in the huge amount of issues :smile:\nOh ok :)\n. Just finished triaging all PRs.\n- The relevant ones are open and marked with the label backlog.\n- I was able to reduce from ~100 PRs to just 13 of same value.\n- Can only start reviewing te big ones once we have a proper suite of tests or plugin API.\n. Added a new task in the \"Documentation\" section:\n- Clean up the CHANGELOG.md file to be consistent with the releases page\n. I have finished adding all releases in the Releases page along with their equivalent tags and link to PRs/commits.\nI have used the CHANGELOG.md file as a reference to the content to the changelog. Some stuff might have been added that are not in the changelog but make bigger changes to the implicit public contract.\nThe following show all changes between versions in case anyone wants to verify (If possible, I encourage to do so):\n- 0.2...0.3\n- 0.3...0.4\n- 0.4...0.4.1\n- 0.4.1...0.5\n- 0.5...0.5.1\n- 0.5.1...0.5.2\n- 0.5.2...0.5.3\nI will be creating a draft of the next 0.6.0 version that will be available only to collaborators to view it (Github rule, drafts are not public).\n. impress.js 0.6.0 have been released in Github and npm:\n- https://www.npmjs.com/package/impress.js\n- https://github.com/impress/impress.js/releases/tag/0.6.0\n. Hi @marlenetiare thanks for opening the issue! As the comment above, we don't have this feature on impress yet but we have open issues such as #140 to track that.\nClosing, since this is a duplicate of #140.\n. When you remove this code you remove the key handlers that make the presentation work using only the keys (left, right, etc.). If you don't use the keys that way and use only the  programmatic API, then this is indeed a good approach to solve the problem :+1: \n. Hi @Defossez I don't know what PineGrow is and given that nobody have made any comments here I will assume nobody knows it either (or at least not how to use with it).\nI will close this one for triage but feel free to continue the discussion if necessary.\n. Can you please post a working example with the steps to reproduce the problem? That will make it easy for us to look into.\n. Sorry that I didn't made myself clear, but what I meant by \"Working example\" was providing some URL in which, using the code in the master branch, could show the problem using a minimum amount of code in order for someone to debug it. My suggestion would be something like http://jsfiddle.net or http://jsbin.com\nIf it is not possible, that's ok, your explanation should be enough. It is just that it would make it easy to get an early response if there was a live example that could be inspected later.\n. Unfortunately there is not much anyone can do objectively without a small live example to debug (one or two steps). It can be something in your code, or not. Maybe the screenshots will help, but without a reduced test case it might be much harder to find the problem, unless it is pretty obvious.\nWe are in the process of retaking impress.js development so that might take some time for us to look into.\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. By the way, maybe this is related to https://github.com/impress/impress.js/issues/408?\n. wtf?\n. Closing, since this issue seems to have been created for fun.\n. @Pierstoval Thanks for the review.\nIf possible, could you please check again for sanity sake? Thanks!\n. @Pierstoval done. If everything is still ok, just thumbs up.\n. > Dev branch is 2 commits ahead, 37 commits behind master\nWe should remove RGSoC then and pull the 2 commits from dev to master.\n. Removed both branches, the only difference in dev was #379 that was landed there.\n. I don't see a reason for showing sites that don't work anymore with strikethrough. What if we removed them and linked this issue to the change?\nAlso, we need to cleanup that Wiki and keep only stuff that matters, I have a task to do that on #512\n. hehe, thx with that.\n. If possible just mark the task done once all is cleared up ;)\n. Just saw the changes in the Wiki, Amazing! :D :+1: :tada: \nWhat if we open a specific issue to discuss about Wiki content revamp so that we don't clutter this one (which btw seems to be fixed)? Such as how to prevent spam, what to put in the front-page, etc?\n. @Pierstoval Want to create that issue and link it here perhaps?\n. =(\n. @Pierstoval Are you still looking at the Wiki or have you finished the cleanup? I am checking whether this issue can be closed or not.\n. Ping @Pierstoval :)\n. The cleanup of the Wiki seems to be ok and choiceschances.com doesn't exist anymore there. Closing..\n. Ironically, I should have created an issue to discuss this hahaha. But then I assume it is only valid when it doesn't involves different code approaches, like this case in which there is only one place where it could be documented.\nIdeally, each request should have one person working on it, so while this prevents creating a PR before an issue, it doesn't ensure that only one PR will be created for each issue.\nLooking for feedback.\n. > I guess it's hard to say if such rule will work. In some cases people may simply work on something and propose PR without an issue.\nI am aware of that. We shouldn't expect that everybody will read the contributing guidelines, even though it is highlighted when creating an Issue/Pull Request. This is more about an agreement between the contributors of the project to try to focus on issues instead of PRs than something that is supposed to prevent all wrong reports in the future.\n. Let's move the template discussion to a separate thread, I have create one for the template of Pull Requests and one for the templates of Issues.\nTemplates aside, what about the Issue requirement before a Pull Requests in order to focus in the discussion first and later in the code? There will be people creating in the wrong place even with templates, but should we document that in the contributing guidelines to be able to objectively point why that is necessary before closing/asking someone to create an issue?\n. From what I can tell from the comments above, it seems that the templates are much more useful than a verbose CONTRIBUTING.md file for those reporting issues/creating PRs.\nIn that case we should keep both:\n- The Contributing Guidelines will refer to the up to date guideline\n- The templates will refer to the guidelines at the moment the PR/Issue was created (which can be different depending of when the Issue/PR was created)\nIt seems we can now move the discussion to the Template issues, see #532 and #531.\n. I will wait until 14/03/2016 (AEST), if no comment is made by then I will make decision so this doesn't keep hanging forever.\n. Maybe the best way would be to use a standard that has the potential to change the least amount of code in the project. Since @bartaz stated that he kind of already started with jquery styleguide, what about enforcing it? Anyone else have better suggestions?\nhttps://contribute.jquery.org/style-guide/js/\nWe can even copy the jscs preset and .jshintrc from them. This style even removes the white-space identation in which @bartaz already expressed the intent to change.\n. jQuery it is then.\n. PR #535.\n. @ktabors I will assume this was working before? Did chrome changed anything that broke this? Can you share a link explaining the issue?\nLooking forward on your feedback.\n. > I didn't check my solution with other browsers\nPlease, can you do it? We have built a contributing guidelines for guidance.\n\nAnyway, the spec states that:\n\nThe algorithm for getting the list of name-value pairs:\nFor each content attribute on the element whose first five characters are the string \"data-\" and whose remaining characters (if any) do not include any uppercase ASCII letters, in the order that those attributes are listed in the element's attribute list, add a name-value pair to list whose name is the attribute's name with the first five characters removed and whose value is the attribute's value.\n\nHere is a test case: https://jsfiddle.net/k1L8sua1/\nConclusion:\nYou should not use data-maxScale in the data attributes, but instead data-max-scale. Data attributes ignore uppercase characters.\nSee this fiddle for an example: https://jsfiddle.net/k1L8sua1/1/\n. Closing as from the comment above.\n. In the comment below is a suggestion for a template for issues.\n. Make sure these boxes are checked before submitting your issue, thank you!\n- [ ] Read and comply with the Contributing Guidelines.\n- [ ] If reporting a bug, make sure there is a simplified example on Pastebin or JsFiddle.\n- [ ] Use the Search Tool to make sure someone haven't already reported your issue or feature request.\n@impress/mergers \n. I have made some small changes.\nMake sure these boxes are checked before submitting your issue, thank you!\n- [ ] I have read and complied with the Issues Contributing Guidelines.\n- [ ] If am reporting a bug, I have a simplified example on Pastebin or JsFiddle that reproduces the issue.\n- [ ] I have used the Search Tool to make sure someone haven't already reported my issue or feature request.\n. Closing in favor of PR #551.\n. In the comment below is a suggestion for a template for issues.\n. Make sure these boxes are checked before submitting your Pull Request, thank you!\n- [ ] Read and comply with the Contributing Guidelines.\n- [ ] Make sure there is an issue for your Pull Request.\n- [ ] Make sure you created a topic branch.\n- [ ] Make sure you are opening this Pull Request against the master branch.\n- [ ] Use the Search Tool to make sure there are no duplicates.\n@impress/mergers \n. I have made some small changes.\nMake sure these boxes are checked before submitting your Pull Request, thank you!\n- [ ] I have read and complied with the Pull Request Contributing Guidelines.\n- [ ] I confirm there is an issue for my Pull Request.\n- [ ] I have created a topic branch.\n- [ ] I have used the Search Tool to make sure there are no open Pull Requests fixing the same thing.\n. Closing in favor of PR #551.\n. Probably a duplicate of https://github.com/impress/impress.js/issues/501 and https://github.com/impress/impress.js/pull/143. Can you check if this request is duplicate, and if not can you explain what is the problem instead of jumping into the solution?\nA library should not create custom code for specific libraries, but solve problems that are blocking for those integrations to be done properly.\n. > The problem is that I do not know how I can turn this into a library\nSorry I didn't suggested you should turn this into a library. I was talking about creating custom code in impress.js tied to specific libraries. Maybe we could create something that helps fixing your use case in a more broad sense so that it can be useful for similar use cases?\nIn order to do that we need to understand details of what is the problem that you are not being able to achieve with impress.js, the more concrete and focused details the better.\n\n... but it is quite similar to #143\n\nHow similar? Thanks!\n. Closing due to the lack of feedback from the OP. Feel free to comment here to open up the discussion again\n. We will continue to track this on #143.\n. Mouse wheel events were reject in the past, see this comment. We plan to provide a better API so that one can implement this in a per application basis, instead of forcing everyone to have this feature that can have unexpected edge cases.\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again\n. I have edited to add the actual link for review without whitespace changes: https://github.com/impress/impress.js/compare/master...FagnerMartinsBrack:code-style?w=1\n. @sclausen We are still tracking this in the main impress repo. We expect to at least provide a proper API to make it work without having to force the developer to rely on the plugin hacks that impress.js exposes right now, but first we need a more efficient test coverage.\nSorry that this is taking some time and we encourage to use the mentioned fork in the meantime if it fixes your use case \ud83d\udc4d \n. @mattlockyer \nCan you please elaborate why the readme was elitist and offensive? Specifically in which points?\nI ask this because the readme is on for years and AFAIK this is the first time someone reports something like this, if the readme make someone feel offended, we will gladly change it.\n. I agree and I am pretty sure @impress/mergers will be ok with that, want to create a Pull Request?\n. Just a X-ref: #542\n. I made some comments there cause it seems more stuff was changed than just the first paragraph. Let me know if you are aware of how to change the Pull Request after it is sent, if not I can change it for you when I commit it into master.\n. I find the plugin-api approach very useful, the problem of course is that is adds a lot of complex guidelines that should be followed because it doesn't use a strict pattern for pluggability (without documented conventions). But in other hand it allows full backwards compatibility, which is amazing!\nAn important problem to take care of is that plugins should not care about the DOM, but rather consume impress.js APIs only through JavaScript. If we allow plugins to manipulate the external DOM it will be impossible to predict what will happen when several plugins are loaded together and make sure that one code does not infer in the behavior of the other. Also, it will make impress.js impossible to extend in the future, because plugins will rely heavily on impress.js internal behavior. It will become a real mess in userland.\nIdeally, a plugin should be a unit-testable with an input that returns an output that can be eventually interpreted by impress.js. The responsibility of dealing with the DOM should be from impress.js only, abstracted from plugins.\nWhat do you think?\n. Why closing this? Shouldn't we discuss this or maybe create a roadmap so that everyone is able to agree on something based on the feedback so far? Shouldn't we focus the efforts to provide robust documented contracts for the consumer of the project in the main repository than just fork it and do the work elsewhere?\n. As developers, we have the responsibility of delivering quality software, mostly when we are putting our faces in public working for Open Source, and there are principles and patterns that helps us to achieve that. One might choose to follow or ignore those principles, but when there are too many disagreements a mechanism should be put in place, maybe in the form of a code of conduct, so that a common ground can be followed and goals can be made clear without hurting the success of the project, which is the end goal agreed by everyone.\nIt is easy to say a review is not useful without pointing out the argument and the reason why. Most of my reviews were objective and pointed out real problems, if one is uncomfortable with that I can't do much other than explain the problems that it can cause and push to the correct version. I would rather work for stability and conservative changes, than start building software without proper care.\nFrom my point of view, what might hurt the progress of this project is the sacrifice of quality and simplicity over bloat and the urge of landing untested and unreviewed changes.\nIn software engineering, the best value lies on those with a growth mindset, those who learn with other people inputs instead of ignoring them, even if they disagree with. I consider myself someone with that mindset, and therefore I am totally up to receive feedback in public, without fear or concern. I understand I might be wrong in many things, as everyone else, but if one is not capable of presenting a reasonable evidence that something is wrong, then it will be impossible to fix it or even justify it is a real problem.\n@henrikingo, I found most of your contributions so far very useful, it drove interesting conversation and the beginning of documenting standard practices for the success of impress.js. It is very unfortunate that you don't want to contribute to the project because you don't feel comfortable with my reviews. The only thing I can suggest, as a contributor and someone who cares deeply about impress.js since many years ago, is to understand which principles we disagree with, and build a code of conduct that discusses those issues and documents what was agreed in consensus, so that the project can move forward.\nFor the good health of the project and in respect to the ones who are watching this, I will definitely not recommend talk with somebody else in private about discussions that should be open. If the opinion that I am not helping the project or providing useful reviews is also shared by @bartaz, and nobody want to take any action on solving this through dialog, then I will gladly step out and let somebody else takeover.\nOtherwise, if you really care about impress.js, feel free to accept my suggestion to discuss a code of conduct and get this solved instead of focusing the efforts in building a fork of the project for one specific use case.\nI hope you consider, and I'm sorry if any of my reviews were not useful to you.\n. @mattlockyer, still tracking this?\n. Closing due to the lack of feedback from the OP.\nI have create a new PR for this, see #562. @mattlockyer can you review that PR if possible?\n. Ping @bartaz \n. > Ok, I solved that for now by just creating a non-step div with absolute positioning\nGlad you find the solution, closing then.\n. I will assume this issue was created by mistake. If not, please comment that we can reopen.\n. Duplicate of #544.\n. This is probably a bug in the browser because it always worked and we didn't changed anything recently, can you post the bugzilla ticket here so we can track it? If there is no issue reported in Firefox, can you please report one?\nSimilar issues already happened in the past on different intervals, see https://github.com/impress/impress.js/issues/324#issuecomment-22861313 and https://github.com/impress/impress.js/issues/443#issuecomment-67322992\n. @GuillaumeLeclerc I just tested the demo http://impress.github.io/impress.js in Firefox 45.0.1 on Mac and everything is working. Can you please show a gif using LICECap that shows the issue?\n. @GuillaumeLeclerc I can't see your mouse pointer, are you dragging everything with it in those platforms? Have you tried Firefox in another platform than the ones that are showing the problem?\n. > My mouse is only moving when I click on the \"finish screen capture\" icon. So no I'm not dragging anything.\nThere is no \"finish screen capture\" icon in the demo, are you referring to the tool you are using to record the screen? What does that have to do with the problem?\nAs @bartaz said above, this could be a specific issue on a specific platform. Without being able to reproduce, it is impossible to provide a fix for the problem.\n@GuillaumeLeclerc The only thing you can do here is to create a simple and valid CSS 3D example that proves it is failing in Firefox on your machine and post that in Mozilla Bug tracker so that they can fix there. You can also post here so we can take a look and try to guess what could be the problem, but we make no promises because all evidences so far suggests this is a problem either with something in your environment, or a browser specific issue that should be handled by Mozilla.\n. @GuillaumeLeclerc\n\nI don't know any internals of Impress.js do you have any hints what I should be testing ?\n\nYou don't need actual deep knowledge of the internals. Did you see the link I posted? http://sscce.org/ is a technique that you can use to reduce the problem by removing code that is not relevant. In the end you will end-up with a small piece of code that will show exactly where the root cause of the problem is.\n\nIt does not seem to be related to the 3d though. It seems to me that it's just not following the \"trail\" of the presentation (as if the camera was in spectator mode).\n\nIt's ok, I just used CSS 3D as an example in case the problem is, in fact, with CSS 3D. Ideally if you use SSCCE you will know exactly where the problem lies with some effort.\nIn this case unfortunately we need a simplified example that we can look into, otherwise all we can do is speculate, and it is too hard to find an objective answer through speculation.\n. Ping @GuillaumeLeclerc \n. Ping @GuillaumeLeclerc again :)\n. Well, if there is no simple example that fails and we can reproduce, then there is nothing we can do.\nI really recommend opening an issue in Firefox bugzilla and posting it here so we can track.\nI will close this for now but can reopen once there is some action to make. Thanks!\n. Sorry, posted the comment seconds after yours so it didn't updated for me :O.\n. @GuillaumeLeclerc I am not used to docker and have no time to debug right now, can you please do this test in another computer and reduce the problem in a simple snippet? Thanks!\n. > The simple snippet that is not working is the demo of imperss.js on it's website\nThat is not a simple snippet. Saying the demo doesn't work doesn't help. What we need is a simple code using css 3D that reproduces the issue so that we can confirm this is not some extension or whatever that is causing the issue.\n\nIt might be a good thing if he could try the docker image. If he don't see it then it might be (brand, grpahic card related)\n\nOk. Can you post a step by step of how to run your image in Mac? I will run it here.\nHere are my other tests using the demo page:\n- I have just tested this in a Windows 7 Desktop using Firefox 43. In that version there are some artifacts on the screen between each transition.\n- I have also upgraded the browser and tested in the same machine using Firefox 44.0.2. In that version the artifacts are gone and the demo works as expected.\nAll evidence so far points out for a Firefox bug in the brand you are using. I will run the docker image just to be sure it is a Firefox bug, but I need a step by step of how to run it because I have no idea how Docker works. Thanks!\n. Docker doesn't work only in Linux. I can make it work on mac and have it installed. It is just that I need a step by step on how to run everything so that I don't get stuck on it. Can you do a step by step on linux so that I can try it out on mac? Thanks!\n. The docker build -t firefox . command did't work with ~/Downloads/Dockerfile having the following content:\n```\nFROM ubuntu:14.04\nRUN apt-get update && apt-get install -y firefox\nReplace 1000 with your user / group id\nRUN export uid=1000 gid=1000 && \\\n    mkdir -p /home/developer && \\\n    echo \"developer:x:${uid}:${gid}:Developer,,,:/home/developer:/bin/bash\" >> /etc/passwd && \\\n    echo \"developer:x:${uid}:\" >> /etc/group && \\\n    echo \"developer ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/developer && \\\n    chmod 0440 /etc/sudoers.d/developer && \\\n    chown ${uid}:${gid} -R /home/developer\nUSER developer\nENV HOME /home/developer\nCMD /usr/bin/firefox\n```\nThe error:\n\n\u279c  Downloads docker build -t firefox .\nunable to prepare context: unable to evaluate symlinks in Dockerfile path: lstat /Users/fagnerbrack/Downloads/Dockerfile: no such file or directory\n\nCan you please provide a single zip file that contains everything that is necessary to work in linux with a single command instead of having to rely in copy/paste? This way we can make sure the invariants stay the same when running the example.\n. > I will try to use other distributions, and see if I can reproduce it.\n\ud83d\udc4d \nThis could be some software that is conflicting in your installation.\n. > I think it's not related to impressjs itself. Maybe we can close this ?\nOk then. If you manage to find a problem with impress.js, let us know. Thanks.\n. I removed this from milestone 0.6.0. Seems too risky.\n. For inspiration, jQuery have added templates for their PRs/issues: \n- https://github.com/jquery/jquery/pull/3070\n- https://github.com/jquery/jquery/issues/2929\n. @bartaz \n\nIs this .github folder a common pattern supported by GitHub? I haven't seen it before.\n\nThey have added support for a /.github folder in the root to prevent cluttering with a lot of files. See here:\n\nDecide whether to store your issue template in the repository's root or in a hidden directory called .github ...\n\nGithub have been adding great stuff for open source recently, mostly due to community feedback.\n. Let's land this and see if there will be the need for additional information.\n. I guess we could gather the most asked questions and create a FAQ with those. Also, maybe we could suggest questions on StackOverflow under the tag impress.js, it has a much better SEO there than Github.\n@bartaz thoughts? We don't have a standard strategy on this.\n. Closing this since it appears to be solved.\n. @mtancoigne Have you seen the following discussion: https://github.com/impress/impress.js/pull/51#issuecomment-3494748?\nWhen I run your demo using Mac touchpad it has an awful UX, it jumps from the first slide to the third when it should jump from the first to the second.\nIn the gif below you see what happens when I am using the touchpad using the left/right functionality:\n\nThe gif might take a while to load, (almost 6MB)\n. @mtancoigne Feel free to do it. But keep in mind that, since it is not trivial, we might only be able to land this once we have proper regression tests, at least for the algorithm.\nAlso, we are not even sure if this should be implemented in impress.js core itself or as a pluggable component. If it turns out to be really too hard to implement, we might as well wait until we have a proper API to make it possible attaching this easily in the consumer side.\n(In the last case, solutions that show how this could be achieved without changing the core are welcome. We can document that somewhere.)\n. @mtancoigne \n\nImplementing this as a plugin should be good, as long as we can access the current slide from the API, and the numbers of slides.\n\nSure. Do you want to create an issue or link and existing one about that? It might be worth revisiting.\n. This was requested to be able to implement the mousewheel as a plugin, see https://github.com/impress/impress.js/pull/553#issuecomment-213791944 for context.\nNeed to revisit this in the future and see what needs to be done to fix this use case, either by implementing mousewheel in the core, or exposing those attributes for a per use case implementation.\n. Thank you for the help!\nThere is already a Pull Request for including tests that will be landed probably this weekend. That Pull Request should be given priority because, besides testing the actual functionality instead of just unit tests, it already received a lot of review.\nThis PR was created from your master branch, we recommend creating a topic branch for each feature though instead of creating a big Pull Request for everything. That helps separating the concerns and creating atomic PRs.\nAlso, we need to create issues first to discuss any new code instead of start implementing it. The use of ES6 or not is something that needs to be discussed first for example (we still haven't talked about ES6 in this project, so we need to assess the tradeoffs of using a transpiler right now or just using some plain ES6 for evergreen browsers).\n. Hi, it is necessary to create an issue first to discuss features. Each Pull Request should have a single concern and this seems to have more than one concern.\nIf you want to help, please take a look in these links:\n- Contributing Guidelines\n- Current plan for impress.js\n. Thanks.\nI will update the issue/PR templates because things like this don't need an issue. Then the OP can mark it as checked :)\nBtw I just checked the \"topic branch\" part because you created one called patch-1, github creates it automatically.\nI also removed the \"create an issue\" checkbox, so that the issue does not stay with pending tasks.\n. Created #559.\n. Here is my spike on making Travis working for this repo:\nIn order to make Travis CI working we need to make the tests run on Linux, currently it seems the chrome package we are using to run chrome locally in the command line only works in Mac.\nI have tried running the QUnit tests using Karma locally, but the complexity and amount of code seems too high. Therefore, I am looking into a simpler solution that doesn't require the project to figure out how to make the tests work locally in Windows, Mac and Linux Ubuntu (for Travis CI).\nI have tried drone.io as @bartaz mentioned in his comment, but after I created the account I noticed they use outdated node versions 0.8 and 0.10 only. We can't rely in a service that doesn't update the node version because there are lots of packages we might depend upon that doesn't work in those versions anymore and we can stop receiving important updates and features that will stop the progress.\nI have tried using gulp, so that we can find some plugin that can run the tests out of the box inside a service (like Sauce Labs*). I have found gulp-qunit, but unfortunately it doesn't work because it runs in PhantomJS and Phantom JS don't support CSS 3D transforms, not even PhantomJS 2. When running gulp-qunit, the QUnit integration tests fail locally:\n``` shell\n\u279c  impress.js git:(ci) \u2717 ./node_modules/.bin/gulp test-integration\n[16:47:16] Using gulpfile ~/Git/impress.js/gulpfile.js\n[16:47:16] Starting 'test-integration'...\n[16:47:19] Testing core_tests.html\n[16:47:19] Test failed: Initialization: Attributes\n[16:47:19] Failed assertion: canvas.style.transform initialized correctly, expected: rotateZ(0deg) rotateY(0deg) rotateX(0deg) translate3d(1000px, 0px, 0px), but was: undefined\n[16:47:19] at file:////Users/fagnerbrack/Git/impress.js/test/core_tests.js:50:25\n[16:47:19] Failed assertion: canvas.style.transformOrigin initialized correctly, expected: left top 0px, but was: undefined\n[16:47:19] at file:////Users/fagnerbrack/Git/impress.js/test/core_tests.js:54:25\n[16:47:19] Failed assertion: canvas.style.transformStyle initialized correctly, expected: preserve-3d, but was: undefined\n[16:47:19] at file:////Users/fagnerbrack/Git/impress.js/test/core_tests.js:58:25\n[16:47:19] \n[16:47:19] Took 3071ms to run 22 tests. 19 passed, 3 failed.\n[16:47:19] gulp-qunit: \u2716 QUnit assertions failed in core_tests.html\n[16:47:19] 'test-integration' errored after 3.47 s\n[16:47:19] Error in plugin 'gulp-qunit'\nMessage:\n    Command failed: /Users/fagnerbrack/Git/impress.js/node_modules/phantomjs2/lib/phantom/bin/phantomjs /Users/fagnerbrack/Git/impress.js/node_modules/qunit-phantomjs-runner/runner.js file:////Users/fagnerbrack/Git/impress.js/test/core_tests.html\nDetails:\n    killed: false\n    code: 1\n    signal: null\n    cmd: /Users/fagnerbrack/Git/impress.js/node_modules/phantomjs2/lib/phantom/bin/phantomjs /Users/fagnerbrack/Git/impress.js/node_modules/qunit-phantomjs-runner/runner.js file:////Users/fagnerbrack/Git/impress.js/test/core_tests.html\n```\nI am considering creating a new gulp plugin or make a PR in existing ones for running chrome instead of PhantomJS (https://github.com/jonkemp/gulp-qunit/issues/31), I am just not sure the amount of work to get that thing done. Any useful ideas on how to make tests working in Linux Ubuntu (for Travis CI) with the least amount of effort will be much appreciated.\n* The Sauce approach is how it is already being done with js-cookie, although it uses grunt instead of gulp and Sauce Labs is known to become unstable sometimes (even bootstrap is looking for changing it, see https://github.com/twbs/bootstrap/issues/18754).\n. After #566 this might become easier. I have received some tips to use CircleCI instead of Travis, seems to be better at running Chrome. Need to take a look into that.\n. Fixed by https://github.com/impress/impress.js/pull/568.\n. I will assume this issue was created by mistake. Closing then...\n. @impress/mergers Please review.\n. > I don't know if this comment has its place here or in another issue but...\n\nWhat's the difference between .present and .active exactly?\n\nThat's actually a very good question!\nLooking at the code, the .present class is added and removed when the events impress:stepenter and impress:stepleave are executed.\nThe impress:stepenter is executed whenever the step is selected via goto, either manually or programatically. The impress:stepleave is the same, except that it is executed when leaving the step.\nThe .active class seems to be added and removed before any of those events are executed. Not sure if there is a practical reason for doing so, and I haven't actually tested it in jsbin or something like that.\nSo, from all I can tell, the .active class and any animation based on it will start executing before the .present class is added.\nIn the blame, I can see that the original commit that added the .present feature was this one: https://github.com/impress/impress.js/commit/b23506e885d33b53191dc0675c0a05585895a24a. The version 0.5 changelog doesn't say much.\nThe API was added in the version 0.3.0 in this commit, which represents the first version of impress.js.\nConclusion\nIt doesn't seems to be any documented reason of why this both classes exist, all evidence points out to be a coincidence.\nNote: That is the reason why it is important to have clear, consistent and legible commits\n. @Pierstoval Totally agree.\n- [x] Add documentation for the impress:stepenter and impress:stepleave events.\n. - [x] Add documentation for the impress:init event.\n. @impress/mergers @Pierstoval Ready for the next round of review.\nI think we should be conservative on what to document. If we document something, then we need to take care not to break it in a new release, and since the tests are too weak there is no ensurance that it will not break.\nThe best thing to do here is document only what is being used in the wild. The best thing to do is to look for some forks and see how they are using impress.js. If there is a considerable amount of usage and the code comments mention that, then we should document it in the public API.\nDoes it makes sense?\nPing @bartaz \n. @bartaz \nSorry to take this longer to respond, I have been in a crazy marathon of events, meetups and trips this past few weeks.\nI will handle those issues probably this weekend and merge it. In the meantime, a follow-up with some suggestion I have made there (to see if they make sense) would be much appreciated.\n. > I think these docs are already in a very good state and could be merged. We can work on the details later on. For sure it doesn't seem that there is anything wrong with the docs that would make something confusing or not working as expected.\nLanding on master then...\n. So just to make it clear: You want to change the whole background of the body once the presentation enters a step, and since CSS doesn't support backwards matching you want to add a class in the body element, is that it?\nDid you know that impress.js already have that functionality in the form of .impress-on-step-x?\nSee the image below, more specifically in the console at the bottom:\n\nDoes that work for your use case?\n. Neverthless I have added a bullet point here to document the functionality in the reference API that we are building (although this is sort of mentioned in the annotated index.html file).\n. Ok, I guess I got it now from this part:\n\n... fetches the custom class names of the active step (excluding: step, active, past, present, future), and appends an impress-in-\"className\" class to the body for each of them.\n\nSo, you get all class names of each step and append to the body? Why would that be different from using .impress-on-ID for each style declaration?\nI don't see the value in adding a different behavior for something that can be achieved right now using the current functionality. It seems this use case of not wanting to repeat style declaration is more suited for a CSS preprocessor such as SASS, LESS or similar, where you have things like loops and variables that you don't have in plain CSS, not something that should be handled in the low-level presentation tool itself.\n. > I don't get all class names. The built-in names are excluded. There won't be (for example) an .impress-on-active class.\nI get that, when I meant \"all\" classes I meant \"all classes that were not added by impress.js\".\n\nAnd I can't just apply the styles when I enter a desired step, then apply other styles a few steps later, because it also has to work when I am walking backwards in the presentation.\n\nCan you please elaborate on this part? Why can't you just apply the styles when entering a desired step? What do you mean by having to work when it is walking backards the presentation? Can you provide some code sample that shows the problem and workarounds, preferentially on jsfiddle or jsbin?\nThanks.\n. I managed to make the failing example work in jsbin: http://jsbin.com/tisikasuge/1/edit?html,css,js,output. It seems jsfiddle does not allow the presentation to start, don't know why.\nHere is the example working using impress.js API: http://jsbin.com/meducilaze/1/edit?html,css,js,output\nHere is the example using scss: http://jsbin.com/mifinilasa/1/edit?html,css,js,output.\n\nBut then I start to go backwards in the presentation. From step 9 to step 8, then step 7. Still with a green background. And I enter step 6 (which has a .red class) where I change the background from green to red.\n\nIsn't that expected? If you go backwards the color stay the same, but if you change to a different step, the color also changes.\n\nNow I have to give ID-s to step 9, step 6 and step 3 too.\n\nWhy do you need to give IDs to step 9, step 6 and step 3?\n\nAnd imagine if I want to mix different ranges! I want to go through a few blues, then a few greens, then reds, and greens again...\n\nCan you share a use case for that?\n\nJust to explain why I am asking so many questions:\nThe goal of impress.js is not to handle specific use cases, but serve as a framework that allows presentation to be built on top of its API. By prioritizing features that make the development easier for a specific paradigm or style (pure CSS, for example), we are increasing the complexity of impress.js and also increasing the amount of features that we need to support. As you can see, impress.js have very weak tests, and we are working to make this better so that we can land more important features that are being requested over and over again. If something can be solved outside impress.js, that is the recommended approach, unless it is something whose tradeoff is unnacceptable.\nThat said, I need to understand perfectly the use case, so that we can find something that might be blocking you from using the framework on its current state.\nThanks.\n. > I don't think I have to prove with any more usecases.\nThere is nothing to prove. In order to consider any new feature, we need to understand what the use case is, so that we can weight the tradeoffs in supporting it or not.\n\nA framework has to cover as much usecases as possible with built-in solutions.\n\nI don't know which framework are you refering to, the purpose of impress.js is not to act as a silver bullet for all use cases, but to focus in the most common ones. Understanding the use case will make it possible to be identified as a recurrent request or not.\n\nIf you want to build a professional software, you can not rely on third-party technologies like CSS preprocessors.\n\nCSS preprocessors are totally acceptable for building professional software, because they fix deficiencies that CSS have and help in use cases that would otherwise not be possible with plain CSS (like loops, variables, mixins, functions, etc.). If one don't want to use them, that is a personal choice, in the current state of impress.js we don't have enough resources to handle things that can be successfully achieved using other means such as a CSS preprocessor (I don't know if this is the case, that's why we need to understand the applicability).\n. > ... and if you still don't understand what I am talking about, just close this issue!\nOk, thanks for opening the issue. If you want to continue the discussion, please comment here mentioning one of the members.\n. @nkbt Want to rebase on master? It seems CircleCI is working, yay!\n. @nkbt Is that really free for OSS? Is there any quotas or limitations that we need to be worried about?\n. @wub can you please update the PR with the feedback so far? Thanks for the PR man, we really appreciate it!\n. Need rebase on master now, @wub can you do it?\n. Closing due to the lack of feedback from the OP. If you want to work in the PR again, feel free to comment here to open up the discussion again\n. That's ok xD\n. Can you please show a live example that doesn't go offline? Maybe jsbin, jsfiddle or something like that? If not, can you please attach a minimum failing code so that we can take a look?\nOur resources are low. We are currently prioritizing the internal tests, so it might take some time for us to look after it. I recommend helping us in debugging impress.js and find the root cause of the problem along with why it fails in IE, maybe this can be a duplicate?\nThanks!\n. @ladenise\nIf that is the problem, then it seems that we can't do anything about it, as stated in the README:\n\nThis project supports only the major evergreen desktop browsers that have implemented DataSet API, ClassList API, CSS 3D Transforms, CSS Transitions\n\nSorry =(\nMaybe we can improve the docs saying something like:\n\nThis project supports only the major evergreen desktop browsers that have full support for the following features: DataSet API, ClassList API, CSS 3D Transforms, CSS Transitions\n\nThoughts?\n. We could have a plan to help browsers on this matter. Bootstrap have the Wall of Browser Bugs, we can do something similar.\nI think we have bigger fish to fry right now, fixing the tests and improving impress.js API. Unless somebody step up to do this right now, I recommend punting until we start supporting impress.js to be used in actual websites. Right now it is too \"talk presentation\" focused (and in that case, the engine/browser version that runs the 3D presentation is in the user control).\nWe should just start documenting the most reported browsers, though, this way the user will not be astonished by unexpected abstraction leaks.\nWe can add notes to the reference documentation saying which browsers have partial support (or not really full support) as the need arises. In this case, I am ok in adding a note to the docs stating the IE 11 support.\nMake sense?\n. Hi @Unconfined  thanks for the Pull Request!\nThat is intended, see duplicates https://github.com/impress/impress.js/pull/497#issuecomment-143954473 and https://github.com/impress/impress.js/pull/386\n. @Unconfined No problem, feel free to open other PRs if you think it might be useful \ud83d\udc4d \n. It seems that the functionality is too restricted to a single use case, so we encourage building extensions to impress.js. Thanks for sharing it!\n. Thanks for the PR \ud83d\udc4f , I have created a Sauce Labs account, just waiting for the Open Source free plan approval.\nIn the meantime, is this PR WIP or it just depends on the maintainers action to make it work as desired?\n. Sauce Free OSS account is up:\n\nAfter taking a look at your repository and not seeing any red flags, I\u2019ve changed your account to an OSS type effective immediately. You should see this change when you log into your account again.\n\nI have encrypted the env vars and created the key on Sauce Labs to decrypt it. See https://github.com/impress/impress.js/pull/580.\n. @jdalton Sorry for the lack of response, been unusually busy this past few weeks. I will merge it this sunday (AEST).\n. @jdalton Do you want to be a member of impress.js org? This way we can enable Github review system and we can easily merge things like these without friction. It will also open doors to any other contribution you might be willing to make.\n. @jdalton I have sent an invitation to add you to the impress.js project. Once review is good, feel free to merge it.\n. X-ref: https://github.com/impress/impress.js/pull/584, https://github.com/impress/impress.js/pull/583, https://github.com/impress/impress.js/pull/582 and https://github.com/impress/impress.js/pull/580\n. @jdalton Can you start a Github review on this? Thx.\n. Not sure what is the issue, I have decrypted successfully in my local environment. To test it again I have changed the SAUCE_DECRYPT_KEY to a new one and created a PR for a new encrypted sauce-encrypted-env-vars file. See #584.\n. You can probably check @henrikingo's main page at http://henrikingo.github.io/, there's a lot of information there.\nClosing as there isn't anything actionable here.\n. Are you sure this is the right command? CircleCI says:\n\nopenssl:Error: '-aes-256-cbc' is an invalid command.\n. I reverted it in #584 and it looks like it worked (or at least the command was executed without any visible errors).\n. Somehow the use of the -out ~/.circlerc -k $SAUCE_DECRYPT_KEY command over -k $SAUCE_DECRYPT_KEY >> ~/.circlerc causes CircleCI to fail with the message:\n\nbash\n$ npm install\nbash: line 1: npm: command not found\nnpm install returned exit code 127\nAction failed: npm install\nSee https://circleci.com/gh/impress/impress.js/45.\n@jdalton Any idea why this might be happening? Perhaps let's use the branch on this PR to test it until it works so that we don't clutter master with test commits. I have emailed all the data to the e-mail address in your commits.\n. @nkbt Since you helped setting up CircleCI you can have more experience with it. Any idea why that npm error happens?\n. I guess we need to use this PR to also fix the tests to merge green to master and don't let any junk in the trunk. Make sense?\n- [x] Fix failing tests on IE11, Safari 9.1.2, and Safari 8.0.8.\n. \ud83d\udc4f Dude, you're awesome :D\nI'm good with the changes. I can't approve the PR because I am the author, but squash/merge and LGTM \ud83d\udc4d \n. Have you tried running on node 6? Our dev environment doesn't have big node support, maybe it's worth documenting it.\n. > Do you mean node 4.6? That failed with the same error.\nNo, node 6.\n. I have created an issue to document the node version, so that this kind of issue doesn't happen anymore, see https://github.com/impress/impress.js/issues/589.\nThanks!\n. Fell free to open a PR with the suggested improvements. See https://github.com/impress/impress.js/tree/da4c08aa2311f8d2e057d98d7f8fd515e48218c4/.github.\n. Bump\n. I agree with @bartaz, at this point makes no sense requiring strong review, although it's always desirable to make sure we are not breaking anything :D.\nSee https://github.com/impress/impress.js/pull/592.\n. @and3rson It's slowly going, we are focusing on the tests now. Any help is appreciated.\n. Good catch. it should be 0.6.0, wanna submit a PR? Then I can release a new version with the correct header.\n. We need to add the step to the manual release step on the CONTRIBUTING file so that when we release we don't forget to change it manually.\n. @jdalton any idea why the build is failing for this PR? I tried to rerun and didn't work. I created a new branch on top of this PR and fast forwarded one commit and the build passed!\nMaybe there are some security restrictions?\n@ChalkPE can you please cherry-pick these changes to your PR? Thanks.\n. Fixed on https://github.com/impress/impress.js/pull/593. @ChalkPE Can you please rebase frommaster? Thanks!\n. @ChalkPE can you please cherry-pick these changes to your PR? Thanks.\n. > @FagnerMartinsBrack I'm not sure it's what you wanted\nAs I mentioned earlier:\n\nWe need to add the step to the manual release step on the CONTRIBUTING file so that when we release we don't forget to change it manually.\n\nThe commit I linked before does just that :)\n. Do we know exactly the reason why the build is failing or we are just removing it to save us the trouble of having to look for it?\n. If this fixes the problem, is there any way to build a failing test for IE to prevent regression?\n. Eventually, we need to get visual testing, but while we're not there if we can fail the test for IE by trying to retrieve the perspective data and then fix with this change then it would be a considerably decent regression test given the circumstances...\n. Thanks for that \ud83d\udc4d \n. @carywreams Thanks for the suggestions.\nThis project don't have enough resources to promise periodic releases. Releases happen as they go when we believe there are enough changes to justify a bump (either patch, minor or major) according to the rules of Semantic Versioning 2.0.0\nAbout typescript, there's no plan in adding transpiler to impress.js. In a few years, TypeScript as we know it today will eventually become obsolete too as everything else and we don't want to tie ourselves to any dependency that we can't unplug.\n@bartaz has made it clear in the past:\n\nI know it can be tempting to put a load of tools into the project (build, transpilers, and what not), but I would love to keep impress.js as simple as possible, the 'old school' way: \"here is a JS file, add it to HTML, init impress.js and it works\"; I know that at least testing may require some dev tooling, but let's keep it to bare minimum\n. @henrikingo There was some discussion when the API docs was built. We didn't document it, but if somebody finds evidence that there's usage in the wild for multiple roots then we probably need to add it somewhere if we want to support it.. @henrikingo Do we consider this really important for now? It seems that once we resolve https://github.com/impress/impress.js/issues/81 this requirement is also going to be fixed as a bonus. When that happens, we can choose to document properly how to add impress in multiple roots.\n\nMake sense?. @henrikingo That's reasonable. I would also be interested to know how it's being used in the wild, it's just that I find very hard to get efficient feedback just from the Github issues. My impression is that most developers that use impress.js are not very active in the development, except for a few of them who create issues or PRs and care to follow through, we can see them in the open issues and open PRs after the triage of a few months back.\nI guess the best way to get a good information  about this would be from @bartaz, and even he cannot predict how it's being used in the wild. My second suggestion would be to look at the forks or the sites in the Wiki using impress, then we can have an idea of how that feature is being used and document it for posterity. Although, it will be a pretty big work to do that \ud83d\ude06 . @gazpachu I'm not, feel free to go for it and create a PR. Just try to be as clean and focused as possible and add tests to prevent regression.\nWithout this first it's very hard to make changes in the framework, and that's what is holding us for now, but nothing prevents you from trying to tackle down all the events and creating a destroy functionality with tests. After all, it's a feature proposal that was already been accepted.\nI can move it to the next minor version if everything goes fine with that \ud83d\udc4d .. @gazpachu Which kind of suggestion specifically?\nIt might be possible to use the existing test structure to initialize impress.js and create a test that destroys it. After destroying we can assert against every element or event that should have been removed according to our knowledge of what the framework changes in the page.\nIn this case, we can make the tests drive the implementation so that we make sure the functionality is 100% covered.. > I would also argue it is too much new code to add within the current single file that is impress.js.\nI had a fork a couple of years ago where I started splitting the files with Grunt. Probably there's a better and cleaner way to do it because in my experience Grunt can become messy after some time.\nAnyway, I guess we're going too off topic here and a dedicated issue for this would be better \ud83d\ude06 . Hi @ArtNous, currently we don't have a structure for multiple languages in impress.js. Feel free to create an issue so that we can discuss how to support multiple languages in impress.js or even if it's worth doing so.. > I am currently finishing up a presentation and i'm encountering a specific problem (maybe due to my misuse of impress.js). Inside a step I am putting several images, which I transform so that they appear to be in a stack (on on top of the other, rotateY(-20deg)). This works well within the step itself, and I'm adding some animation so they appear to be flipping from one to the other.\nimpress.js was not created for flipping or stacking images, so its core adjusts the step (camera) to position itself in front of a slide.\n\nHowever, the rotation (and translation) I'm applying manually through css is only visible when the step is active. Seen from the previous step, the rotation is not applied yet. As far as my current knowledge goes, I see only one possible solution, but I'm not sure how I would implement this:\n\nProbably you want to create a step that shows the flipping and implement the flipping using CSS inside the step, not using impress.js steps to achieve that.\nThe problem is not very easy to understand.\n\nPut the flipping images in a separate step, which is rotated by impress.js. Then add a step on top, not rotated, with some text in it, so the images appear to be rotated from the perspective of the text step. However, then I would have to be able to auto-skip the image-step, which I don't know how to do. I hope this made some kind of sense to anyone reading this, if not, let me know :).\n\nI didn't get it :D. @CountZukula A runnable example showing the problem would be better than a detailed explanation, I guess. You can attach a file on the thread.. I see, it looks like something is influencing on the position of the step. Can you provide a SSCCE pointing out exactly which circumstances the problem occur?\nIt's actually one of the requirements to post an issue because that can clarify where the problem lies (impress.js or the browser).\nBy the way, great presentation ;). > I guess it's a conflict with the pres.css, if I disable that the problem goes away.\nThat file is just an example file, none of the styles are mandatory for impress.js to work (it will just have no style if you don't use it :D).\nHave you tried to SSCCE pres.css to identify the source of the problem there?. Hi, we don't officially support plugins that we don't work on. However, feel free to add it to the Wiki page: https://github.com/impress/impress.js/wiki/impress.js-tutorials-and-other-learning-resources. impress.js is supposed to work inside the browser, not outside of it.. Feel free to create a PR with tests. You can use https://github.com/js-cookie/js-cookie as an example of how to test it, I have implemented CommonJS there in the past.. @henrikingo I'm not sure why, but after this commit on master, SauceLabs started failing on CI.\nDo you have access to it?\nSee the screenshot below:\n\n. As you can see in the top, I tried to run the last passing build to see if there was some racing condition, but it looks like it's failing consistently.\nhttps://circleci.com/gh/impress/impress.js/80. @henrikingo Can you make sure you can see the stacktrace, have a Circle CI account and has write access to the impress.js org?. That doesn't seem to be working now. Can we trace down the root cause of the issue? The build should always be passing, otherwise, it misses the point.. @henrikingo Not sure if it depends on the project settings, you can setup the notifications in the \"User Settings\": https://circleci.com/account/notifications. > So far all PRs have been green.\nThey didn't because Sauce Labs wasn't run in your PRs. See https://circleci.com/gh/henrikingo/impress.js/86?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link and:\n```\nnpm run test:sauce\n\nimpress.js@0.6.0 test:sauce /home/ubuntu/impress.js\nkarma start karma.conf-sauce.js\n\nSauce environments not set --- Skipping\n```\nI'm not sure why they weren't. When I created a PR as the author, it did run and was failing: https://github.com/impress/impress.js/pull/627\nSee also the previous screenshot:\n. My guess is that Sauce Labs is skipped if you don't have access to it. @jdalton any help will be much appreciated, should I do something to give access to SauceLabs so that it doesn't get skipped for PRs created by impress.js members?. @jdalton, we're using CircleCI, not Travis. Remember you helped us to implement it?\nJust for the context, the problem is that Sauce Labs is not being run for @henrikingo PRs. See here for an example.\nWhen I run it, then it works. See here for an example.\nMaybe there's something missing because the branch is in his fork, not a branch inside impress.js repo?. I wouldn't encourage people to read generated attributes from the DOM unless they are documented. If consumers start inferring things from the markup, the markup becomes rigid and we wouldn't be able to make changes if we want to because there will be no way to find out who's relying on them.. > [...] it may feel tempting to change them from outside of impress.js which may have some unexpected consequences.\nWe might be able to freeze them or document as read-only properties (or both).. > These aren't generated DOM attributes, rather data-* attributes used for input.\nThe OP is requesting access for height, width, max-scale, min-scale, perspective, and transitionDuration, not the root or step element attributes. AFAIK those are internals and therefore they haven't been documented here yet. I probably didn't realize that in my previous comment.\nWe probably need to understand how @vorpalvorpal need to integrate with hovercraft, perhaps a PR with an example would make things clearer?\nAt this point, we have no context so it's hard to know the requirements for this use case.. I was, just realized the OP intent now \ud83d\ude05 . @vorpalvorpal So this issue is not an issue anymore?. @vorpalvorpal The point is that we don't want to add more APIs without having a strong reason for doing so. New APIs incur a maintainability cost we try to avoid as much as possible. Besides a \"nice to have\", do we still have a strong case for this request?. After talking with @bartaz, as you can see on the messages, my only concerns are:\n\n[x] Can we extract and unit test some parts of the functionality? See this comment. (clarified by this comment)\n[ ] What about the \"GC\" concept, can we make it clearer? See this comment from @bartaz  and this one from me.. Given what @bartaz said in regards to just move this over into the dev branch and review it later, I guess that most of my comments do not apply anyway.\n\nIt looks good to merge then.. > Possibly. When I know what it does (that the callback is called on teardown) then I know what it does and I don't need 'teardown' in the name. So again - maybe it's not a problem with API/name but with documentation and/or examples?\nI guess it all boils down to us not having the context of how it's being used. I guess we'll be able to provide more meaningful contributions once we see how everything \"fits\". Maybe with some future Pull Requests on top of all the landed plugins.\nIMHO this should land on dev ASAP so that we can keep looking at the next bunch of code and have a better grasp of how it works.. I have edited the comment to convert to checkboxes and add some inline code markup, hope you don't mind.\n\nCreate a ticket for introducing jsdoc for API / code documentation\n\nTo that point, we should probably take some care to not tell what the code does internally in the form of comments. I see the value of using JSDocs for plugin documentation.\nYou might also be interested in checking out doclets.io for that matter.. Even though CI is failing, I'm gonna merge because this just touches markdown. See this for more context.. @steveknoblock Does @bartaz comment answers your question?. > I also feel like at the end of all this, a new version number is appropriate, and proposing to change to 1.0.0-beta1\nWe probably need to stay in a beta for some time in order to be able to receive enough feedback.\nAny chances we can have the CircleCI failures sorted out before doing that?\nhttps://circleci.com/gh/impress\nIt could also be because the code is in a different branch. My CircleCI knowledge doesn't go that level.. @henrikingo I'll forward to you an e-mail with the Sauce Keys and the account. I'm not sure if I will have the opportunity to look into it anytime soon. I also forwarded to @bartaz, it looks like I forgot to do it the last time.\nYou might be able to run them locally with the keys and access to the account.. > Good timing too, thanks for being responsive. MongoDB twice per year allows us to spend 3 days hacking on personal projects, which for me was always impress.js. This final merge is happening during those 3 days. (Today being the last one.) Just felt I should credit my employer for letting me do this.\nLuckily you have this opportunity, it's not every company that has such Open Source culture built in. Most companies consume Open Source but don't contribute enough. I guess everybody knows it at this point in time.. Somebody also got in touch in regards to Open Collective a long time ago for impress.js. I have also forwarded that e-mail. Since you're investing more time on this I guess you might find a way to use that to help the project.. > Github also now allows to label tickets as good first ticket.\nYeah, I've started doing that too.. > Also, not all of these have an npm module. (At least impressConsole.js didn't, although it is now in src/plugins.)\nYou can also use a git repository as an npm dependency: https://docs.npmjs.com/files/package.json#github-urls\nGit submodules can become tricky in certain circumstances, it's better to make sure we really need them.. Right, it would probably be too much to require users to always use npm of\nthere's an equivalent option to avoid it.\nI guess we need to try and see if there will be any problems.\nOn Wed, 1 Nov 2017 at 06:48 Henrik Ingo notifications@github.com wrote:\n\nYou can also use a git repository as an npm dependency:\nhttps://docs.npmjs.com/files/package.json#github-urls\nSure, but not all git repositories contain a compiled, ready-to-use js\nfile. So \"npm install\" still wouldn't get the user something they can just\nuse.\nBut like I said, node/npm is not required to use impress.js, so this is in\nany case not an option.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/impress/impress.js/issues/639#issuecomment-340885900,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAzBES_haS9Yac0_u8S9BXYshuqMjxEyks5sx3mBgaJpZM4QLpCU\n.\n-- \nhttps://about.me/fagnerbrack?promo=email_sig&utm_source=email_sig&utm_medium=email_sig&utm_campaign=external_links\n\nFagner Brack\n[image: https://]about.me/fagnerbrack\nhttps://about.me/fagnerbrack?promo=email_sig&utm_source=email_sig&utm_medium=email_sig&utm_campaign=external_links\n. Can you create a PR for that merge and leave it open so that the diff can be clearly exposed? One week may be too soon given the number of changes and the lack of test coverage, can we make it at least one month?. > If you want to review, go back to the PRs I've sent in the past weeks. All merge-* branches are still open.\nAs mentioned before, the idea was to review the whole dev branch once it finished being copied over.\nThose PRs were not created with an atomic concern, that makes it extremely hard to review because it trades off quality of review for speed of delivery and keeping the context of the code in the author's head. Creating structured PRs allow for somebody else in the future (maybe another contributor) to understand the reasoning behind each feature. For example, if adding a plugin, it's possible to add only the API in impress.js that is necessary for that plugin to work. That will ensure the API doesn't expose anything other than what's necessary to satisfy that use case, reviewing that we efficiently avoid clutter and remove code.\nI've mentioned this before, but it seems that @bartaz and yourself are ok with the tradeoff of quality of review (and the efforts to do so) for speed of delivery. I would argue that's not something that's worth it because it will make the codebase rigid (more on this later), but I won't insist on it if we're all conscious of this tradeoff and that's the only way forward.\n\n... it's been in my fork for 2 years and has lots of users already\n\nDoes that mean you believe the code is very good? If that's so, why create a Pull Request? What needs to be reviewed exactly? Shouldn't you just commit to master?\nThat statement can be a fallacy.\n\nAnd conversely, if we wait longer, what do we gain? Do you intend to actively test the dev branch? Does someone else? I can wait, but what am I waiting for?\n\nI intended to look at the dev branch against master and review it again, as mentioned a month ago. It also opens the possibility for a wider audience to peek in. I'm not sure how active are the watchers of this repo, but if there's a slight chance to have more eyeballs into this, shouldn't we do it?\nYes, I could just look at the master...dev diff. However, a Pull Request creates noise and maybe (just maybe) somebody else can jump in and add something useful to the discussion. Would that possibility be worth it?\n\nNote that the new stuff in the dev branch is not new or untested code any more than master: it's been in my fork for 2 years and has lots of users already.\n\nFrom what I've seen so far, even though the merge promises to close a lot of feature requests from this repo, it adds a lot of code that will now be exposed to a much bigger audience. The code might be stable and working today, however, it seems that it provides stability and more features at the cost of:\n\nRigidness. Due to the increase of software entropy and the lack of tests and self-documentation, the code becomes more rigid. That means that new contributors will be afraid to change the code more than before. Because it didn't have tests before it actually makes this problem worse, not better.\nLess developer contribution. Future contributors won't be able to easily create Pull Requests for new features or fixes to be added to the project and it might stale or only be contributed by @henrikingo who has the context of how it works. Right now, the merge increases @henrikingo's Bus Factor in the project. Tests can also serve as a documentation of how the impress API works in code (the so-called \"first client\" of the API), if there are no tests for contributors to look at, new contributors will have to spend so much time to understand everything that they will most likely give up.\n\nMy understanding at this moment (and I partly blame on how the format of the review was done) is that this merge optimizes feature delivery by sacrificing contribution and the flexibility of impress.js core.\nOf course, I can be wrong...\nI don't have the whole context of the features added. That's why I intended to look at the dev branch as a whole in a Pull Request and see if that would make things clearer.\nI was only able to look at small isolated and non-cohesive snapshots of changes.\nBut if I'm right...\nIf I'm right and @bartaz and @henrikingo are ok with the tradeoffs I listed there, then I won't insist on it and it should be good to go to master.\nI just want to make sure we make the conscious decision because I also want impress.js to succeed, not to become worse from a maintainability perspective.\nI believe this is a reasonable observation, what do you think?. > In fact, this request for prolonged review is particularly outrageous coming from you, as you have been well aware of my fork, and as maintainer it would have been your job to work on getting those features merged upstream, but you did not do that.\nThere's no need for ad hominem, it removes the focus of the discussion. You have never responded to my comment, you just attacked me for no reason.\nI've been aware that you created a fork because you didn't like my reviews, but I never had time to look at it. When you were contributing to this repo, you've never implemented a single suggestion I've offered, you just ignored it, forked off and started adding comments to the issues of this repo referring to your fork.\nIt's nobody's job to merge somebody else's fork. I'm not paid to do Open Source and I'm not paid to listen to this. I already contributed a hell lot of time to Open Source and I have no company to back me up, I do it in my own time. Even though I couldn't do much, I still managed to create the Reference API for impress.js because it didn't have any and triage almost 300 issues and 200 Pull Requests down into what you can see today.\nIt reminds me of the post The Open Source Community Has No Place for Disrespect. The Open Source community also has no right to demand anything from somebody who does the job for free. This behavior is poisoning and your tone is also.\nMy comment still stands and is just a suggestion, not a requirement, I'm not trying to block any progress or demanding anything.\nLet's have a reasonable, mature conversation and stop the ad-hominem.. > But it will be hard to avoid when codebase gets bigger and gets more features.\nIt's easier to avoid rigidness if we apply common software development practices, I can help with some input on that for future PRs. My point is just that we need to be conscious of the tradeoffs if we don't do it right now so that we can make better decisions and improve the codebase in the future.\n\nAs from this point, I don't want to read emotional ad-hominem anymore, I've read enough. Leave emotions at home and start arguing against the content, not the person, just how @bartaz did with his comment.. Can you provide an example showing the problem this fixes?. This assumes a fixed markup with id=\"overview\". Impress should not dictate how attributes should be named, it should only define behavior for the view (in this case, the HTML).\n. In lieu of a formal styleguide, it would be better to be consistent with how the current codebase is written. In this case there is no need for a line break between arguments.\n. The same goes for the other assertions\n. Shouldn't these kind of comments be written as PR comment instead of being inside the code?\n. Could this be done with the before/after APIs?\n. Why this tests seems to be testing nothing?\n. Why does this file contains only a  filename?\n. Why does this file contains only a  filename?\n. I definitely agree with 80 characters limit, but since impress codebase does not seems to care about that, it would be better to keep consistency until we have setup a proper standard that everyone agrees upon.\n. I believe it's worth tracking down the root cause of everything and keep new technical debt at a minimum. Since you are the one currently inspecting the codebase, it is much easier for you to do this.\nThe reason why I suggest tracking and exposing the root cause of all problems via PR comments is that it allows us to understand better the current state of the code in order to think about better strategies to tackle those problems now or in the future.\n. > It's a placeholder for future tests.\nOh ok xD. Maybe we could prefix the PR with a WIP: in the title just like how GitLab does? This way we can mark a PR as a Work in Progress to help building some context before somebody start reviewing :)\n@impress/mergers \n. Yeah, I use Windows for personal purposes, and Mac/Linux for Work.\n. I don't see the value of having the text aligned, after all it is a matter of personal opinion for code style. In my experience, code style discussions tend to take too many resources and start discussions that take forever, that's why it is a common practice in the community to go for consistency instead of discussing about styles. That said, if this PR is landed and we choose to go for message alignment, then all tests from now on that uses QUnit should come with the same alignment for consistency. We could even document that style for consultation later.\n...\nAfter I wrote the paragraph above I started thinking: If we are having trouble with QUnit since the beginning, doesn't that count as an argument in favor of another more fluent test framework? An assertion like impress.should.not.be( undefined ) make us not to worry about how to structure the test message and let the framework do it for us. I am definitely playing devil's advocate here, because I like QUnit simplicity.\nWhat do you think, does it makes sense?\n. I wonder if we can use a fluent assertion library on top of QUnit. If that's possible, then all problems are solved!\n. > Still, it's not obvious at this point that using that will be useful.\nThose callbacks should be implemented for cleanup instead of an additional test. Tests should be atomic and not dependent of other tests. testDone will execute the desired routine and keep the tests atomic, since executing a single test will still keep running the cleanup, while, in the same situation, if implemented in a custom arbitrary test the cleanup will not run.\n. Why the prefixed underscore?\n. I believe we can assume that the browser we are testing on support all the features. If we start testing automatically later in browsers that do not have those features, then it makes sense creating a check like this.\n. Couldnt it be just supportedClass?\n. There seems to be inconsistencies for spaces inside parens\n. Is there a need to instantiate the async twice? When you call it the first time it will already indicate to the test suite that it should continue to run the remaining tests.\n. I really believe that each event should be tested in its own test block, then we can find a way to detach this kind of logic and magic number from the test assertions.\n. > If you want to suggest a more proper way of encapsulating this function into some helper namespace\nThe current code is not doing any encapsulation, it is exposed as a global variable with or without underscore. There is no difference between prefixing with underscore or not, in either case we need to take care to acknowledge the globals that are being used in testing and take care for not overriding it.\nIf one is worried about too many global variables, it is always possible to put the code into a closure and expose a single \"helper\" namespace that will contain all necessary utility classes as properties of the returned object.\nAlso, I would argue that this code is so similar to the one in the core that there is no problem in exposing it only for testing purposes to prevent code duplication, what matters is what is documented, not what is exposed (of course, it is necessary a proper public API documentation first).\n. Sure, that makes sense.\n. > My proposal is to leave this discussion for now, and later do an overhaul of both impress.js and this code where style is settled once and for all. (Preferably in the same pull request with adding a style checker.) This is not to say I'm opposed to comments about style in general.\nSure, we should hold style discussions when we have something that automatically checks it and when the codebase is consistent. I believe that could be one of the first tasks after the cleanup.\n. > The test is only done/passed when both doneWithNext() and doneWithPrev() have been called\nInteresting, I have never used like that.\n. What is easier to read is also easier to maintain. Having something that is easier to maintain but hard to read seems to be a contradiction.\nI understand your point about test execution time, the problem is that if you have too many premisses in a single test then it will be more dificult to create a deterministic assertion in the future when you still have to maintain the previous ones. Having a single atomic block of code that test a specific path turns out to be much more maintainable and scalable when developing regression tests.\nWhat I suggest is that, instead of creating a test called \"Impress core API\", it should instead be created a \"module\" called \"Impress core API\" with tests that cover several situations separately. This way if one wants to run the tests that tests for only a specific event or animation flow, it is just clicking in the desired test in QUnit UI that it will go straight to it, without having to worry about the others. That is very useful for debugging purposes.\nBelow there are some examples:\nFound the failing test among others\n\nClicked on it to see why it is failing\n\n. > Btw, if you wanted to focus on testing each event listener separately, it still leaves an open question: where would you check for the \"active\" css class? It is set inside the goto(), so not set inside either event listener. So should there be yet another test where that is checked separately?\nYes. An atomic test that checks a specific behavior is never a bad thing. It helps debugging and increase maintainability for not having too much logic inside a single block. Of course that can't be taken as a silver bullet, there are situations where, in order to test a specific behavior, you need several premises, but then that starts to smell like an architectural problem in the code that is being tested.\n. >  In the future, I agree this code could be removed and instead we expose this functionality from impress.js itself.\nGood point about not touching it for now. It makes perfect sense.\n. Shouldn't the tests be in a separate *.js file?\n. Why is deepEqual being used here? If the intent is to assert strict equality strictEqual should be used for that purpose. It's not that it is a big of a difference, is just that deepEqual tests if expected contains the same JSON-like structure of actual, while strictEqual do a simple strict equality check (===).\n. Could this be declared inside of one of QUnit callbacks?\n. That was definitely my mistake. I didn't realized that the code was still exposing the impress global here =(\n. This should definitely be a test module. In the future, a regression test related to the \"Impress Core API\" should be added to the \"Impress Core API\" module instead of being a standalone test. In QUnit AFAIK you can't create tests inside tests, only inside modules.\n. > Are you referring to the TODO line?\nI was referring more to the fact that \"Impress Core API\" is declared as a QUnit.test instead of a QUnit.module. The name \"Impress Core API\" represents a set of tests instead of a single one. My suggestion would be something like this:\njavascript\nQUnit.module( \"Impress Core API\" );\n...\n\nThis is because tests operate on the div.step elements we've defined directly under body. So we can only have one impress.js presentation in one html file.\n\nAhh, now I see. Having one test seems to be more a required need due to how impress works than an actual decision. In this case, to organise the tests accordingly inside each test, wouldn't be better run each one in a dedicated iframe that loads an external HTML file for each time the presentation should start from scratch? That would remove the worries about impress creating global data in the body element (or at least until we do it in a way where you can start more than one impress instance in the same page).\n. It could also be possible to create an utility that automates the iframe construction and destruction for us, just having to point an HTML file to be loaded before/after each test. Do QUnit have any plugin for this? Seems like an interesting use-case of a problem that somebody else could already have solved.\n. By the way, I was convinced about the point of not touching impress code, but I still don't see a need for the underscore as I commented above:\n\nThe current code is not doing any encapsulation, it is exposed as a global variable with or without underscore. There is no difference between prefixing with underscore or not, in either case we need to take care to acknowledge the globals that are being used in testing and take care for not overriding it.\n. The good thing about doing this now (the iframe and the QUnit.module thing) is that we could prevent changing a lot of code in the future, but that is not the main reason. The main reason for using modules right now is that it forces us to create a better structure and understanding of separation os concerns on how the tests are structured and provide a good pattern to be followed from now on for the new tests.\n\nI understand and agree about the arguments of simplicity though, but it might be worth a second look in the tradeoffs above.\n\nProbably running in an iframe would be an equivalent test, but out of principle I want to test the \"real thing\" as closely as possible.\n\nIf impress doesn't work inside an iframe as it would using the whole screen, then it should be reported as a bug. Impress should work in an iframe the same way it works in a regular window, I see no reason for it not to do so.\n. > Currently there are exactly 2 QUnit.test blocks. If I put each of them in a separate module, how would that make any difference???\nIt would leverage the QUnit API to provide separation of concerns. But that's ok, we can do this later.\n\nUnless I'm mistaken, beyond this sub-thread there are no outstanding issues?\n\nThere is only this comment that points out an issue with comment redundancy. There are a few similar ones that just says what the code does explicitly. Examples: 1, 2, 3\n. Note \"for a new feature that will help all users of impress.js\". We don't want to create features that are too specific and only satisfies a small subset of impress.js users.\n. This is very useful to prevent Pull Requests or issues that don't make it clear what the problem is. In my experience with popular open-source projects, this is not read by everyone, but at least serves as an argument that can be linked to for additional information or even close a request in which we can't do anything about it.\n. We don't have a test routine in master yet, so the only thing one can verifies is if impress.js runs successfully in the browser manually. We hope that changes soon, see #510.\n. Good catch\n. \n. Now thinking again about this, does it makes sense testing that the .not-supported class is being added to the body element and vice-versa? I mean, we only run this test manually for now, and probably in evergreen browsers that support impress.js in a decent stability (Chrome for example).\nIdeally this sort of test should be assertive on what it expects (or do not expect) to happen without caring about the environment it is running. If necessary, we should simulate an environment to make impress.js trigger the secondary condition to test if the .not supported is being properly executed, otherwise it is not going to run in every run and therefore we are not going to catch it (only if we run in a different browser that specifically doesn't support impress.js).\nI suggest just asserting that it adds the class if it is supported and then later find a way (stubbing or mocking some data) to assert that the .not-supported class was added correctly.\n. What is the value on testing multiple calls of impress.js API if we are not objectively determining if the behavior was actually noop or not (like checking some global variable or something like that?). This seems to be just a smoke test to ensure that multiple impress.js calls don't trigger an error, is my assumption correct?\n. If my assumption above is correct, then we don't need to assert the API return, which is void and therefore shouldn't be relied upon. Testing a feature marks it as supported, which can cause confusion. We should have green light to change the impress.init() return in the future, if necessary.\n. It is a common pattern to declare expected/actual variables to preven this kind of problem in the future, that will screw with QUnit reports.\n. Also, it is a good practice to use strict equality when comparing two data types to prevents traps like this one:\njavascript\nassert.equal( null, undefined ); // Passes, data is equal?\nThe solution to prevent this trap in the future is to use strictEqual instead:\njavascript\nassert.strictEqual( null, undefined );// fails, data is different!\n. I managed to remove the need for this timeout with the following code:\njavascript\nvar root = document.querySelector( \"div#impress\" );\nvar step2 = document.querySelector( \"div#step-2\" );\nvar done = assert.async();\nroot.addEventListener( \"impress:stepenter\",  function( event ) {\n  assert.strictEqual( event.target, step2, \"Triggered event for the second step\" );\n  done();\n});\nimpress().next();\nIn this case it triggers the test correctly without having to use setTimeout, is there anything I am missing here?\n. We can't couple impress.js with the reference of an external URL. The \"overview\" from the impress.js example is application specific and not mandatory.\n. Unfortunately this also changed the intent of the sentence. It is not just one project that aims to provide an editing tools, there are more than one of them. Can we focus in the first paragraph only though? Or this paragraph also causes trouble?\n. Why opinions? The text is pretty objective in what one is supposed to expect from impress.js in its current state.\n. I could find the commit, but not the original issue that describes the bug those lines fix.\nDo you remember which browser and OS the problem happens? In Chrome on Mac, the event is not triggered when switching windows using command + Tab.\nThe only thing that is triggered is the following:\n``` shell\n\nevent.keyCode: 91\nevent.shiftKey: false\n```\n\nThe code 91 represents OSLeft, which in Mac is the command key.\n. Those are the ones who seems to be related to this:\n- https://github.com/impress/impress.js/issues/127\n- https://github.com/impress/impress.js/issues/238\n- https://github.com/impress/impress.js/issues/304\n- https://github.com/impress/impress.js/issues/384\nI will take a look in those and try to reproduce it.\nI wonder if it's worth keeping this issue in 0.6.0 milestone though, given we don't have a single test to back this up yet. It seems more complex than I thought and maybe it is not worth the risk of landing without tests for something that is even hard to reproduce.\n. Even when #510 is landed, we still won't be covering this.\n. Also, since we are just using return; and not calling event.preventDefault(), this might break the focusable elements inside the step.\n. I am using the concept \"positioned inside the infinite canvas\" when we talk about the actual element that is positioned despite the presentation having been started or not. When we talk about perception of positioning inside the presentation flow, I use \"positioned from the camera\".\n. So, you can add this listener either in the body or in the Root Element, it will work anyway. Nor sure where this should be, but it seems to make sense documenting that it should be in the Root Element, because we don't want to unnecessarily add things to the body, cause that makes extension of impress.js pretty hard (you can have only one body per page, and that means only one instance per page).\nI know there are classes added to the body element anyway, but if we have the chance to choose we might not go for the body then.\n. I didn't find a way to retrieve the current step from the impress:stepleave event, as it can be done with the event above.\n. I guess it might be a good idea for the future, but for now it might be better documenting only what actually exists without focusing in additional things. Is there any way, even with step classes, to be able to retrieve the current step from the impress:stepleave event?\n. > The id of root element doesn't have to be \"impress\" (but is \"impress\" by default). It is configurable in impress \"constructor\".\n\nFor example:\n\nI will edit that to consider those documented use cases.\n\nIn theory there can be multiple root elements on a page with multiple instances of impress being initialized on them.\nBut at the moment keyboard events will work on all of them at the same time.\n\nIs multiple root elements on a page actually supported? If it is not explicitly commented in index.html shouldn't we just refrain from supporting it unless someone asks to do so?\nPeople over time asked a lot for substeps, in this case if we implement substeps we might automatically fix the use cases for multiple instances of impress in the page and then we could manage to support it.\nDoes that make sense?\n. Relying on event.target can be tricky because as far as I remember it represents the actual element on top of the mouse, not the one that contains the event handler, so the user needs to traverse back to find the desired element.\nI will take a look one more time when I get into this PR again, maybe if .active doesn't work the event.target could be a temporary solution to be used in the example until we have a better way to handle it.\n. > I'm not sure how substeps connect to multiple impress instances.\nI mean that it might fix the same use case that multiple impress instances in a page is trying to solve. Why one would want multiple impress.js instances in the page if they share the same keys as you said earlier?\n\nBut of course global classes on body element may collide, styling and positioning may not work, etc. So even that it's technically possible I would probably not advertise having multiple roots on one page, because the result may be very unpredictable.\n\nCan I assume this to be an argument for not documenting it then? :)\n\nBut for sure impress(\"something\") can be used to initialise impress.js on element with different id than \"impress\" and it should be mentioned in docs.\n\nSure, I will do that \ud83d\udc4d \n. That makes sense.\nhttps://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget:\n\nIdentifies the current target for the event, as the event traverses the DOM. It always refers to the element the event handler has been attached to as opposed to event.target which identifies the element on which the event occurred.\n\nI guess what we want here is event.currentTarget though, but I will look further.\n. 1. If I get it right, the first pattern specify all root directories that starts with a dot ., and the second pattern specifies all root files that starts with a dot .?\n2. Shouldn't we also leave out karma.conf.js?\n. I manually tested your suggestion with event.target === step and it works! I will add that to the example \ud83d\udc4d .\n. > While usage based on default impress() is most common, I'd add a section explaining this \"constructor\" (or maybe more like a factory function) of impress.js.\n\ud83d\udc4d \n. I am thinking about removing this, given that we received some useful feedback in Hacker News recently:\n\nI thought this project was really cool when I first came across it, but there was one thing that really offended me about it and made me refuse to ever use it:\n\nHow to Use It\nUse the source, Luke ;)\nPlease note that impress.js was created for developers. Some basic knowledge of html, css and javascript is a prerequisite to install and use its features.\n\nSo, in other words, \"please, reverse engineer my work because I'm too lazy to document my code.\"\nSure, they've put in a lot of comments, but there's still no clearly defined interfaces or guides for use.\nIt's all comments like 'delegated handler for clicking on step elements' and big ascii art of yoda.\nDocumentation is not just for newbs. It's an important part of making a third party library. If you want other developers to use your code, then make it easy to use. To not do so is incredibly user-hostile, and it's not going to get you anywhere.\nCould you imagine if people had attitudes like this in other fields of engineering? \"Here's your new car.\" \"Thanks, how do I change a tire or put in gas? Does it have a manual?\" \"Manual? Just read the schematics. If you know anything about mechanical engineering or combustion, you should be able to figure it out!\"\n\n@bartaz does it make sense changing this?\n. I agree, making the docs more clear might help in reducing this kind of feel by more experienced devs. I will do that.\n. https://github.com/impress/impress.js/issues/573\n. The PR is about \"Minor grammatical\" tweaks, so changing the way the README is structured goes against the concern of this PR, right?\n. This reminds me that I need to update the changelog after releasing 0.6.0. I forgot about it :S\n. https://github.com/impress/impress.js/issues/574\n. If we are going to keep the comments it might be worth building a real annotated documentation out of it, just like what underscore does: http://underscorejs.org/docs/underscore.html.\nFor a consumer, reading the source should just be encouraged with an emphasis on learning how the code was made, not that one should be relying on internals instead of the public documented API (as it is implicit in the \"Use the source, Luke\").\n. If we create encrypted values for SAUCE_USERNAME and SAUCE_ACCESS_KEY where is it gonna be decrypted? Is the encrypted value just so that we don't store plain values in CircleCI or Travis will print it in the console?\n. What if we unit test this so that the behavior is documented for posterity?\n. We are using fixed versions in package.json.\n. I have talked earlier about a test for this function, but if that's too annoying to create one (since we don't have a lot of tests as examples) then I guess we can live with it for now. It's all up to you.\n. There are some unrelated changes here, was this intended?\n. There are some unrelated changes here, was this intended?\n. I agree it's a good thing remove the function here since it doesn't have good cohesion (perspective() says nothing really). Sometimes no abstraction is better than the wrong abstraction \ud83d\udc4d \n. Is there a reason for using div#impress instead of just #impress in the selector since the page can have only one element with id=\"\"? I suspect the change tried to keep consistency but the line below seems to have selected the html by mistake...\n. Maybe if we change the message for something like \"root.style.perspective should be set explicitly for IE 11\" then we wouldn't need the comment and it would show the \"why\" when the test fails in the console.\nThe other tests are like \"n initialized correctly\" because we don't really had a reason for testing that attribute, it was just to have some blind coverage somewhere (which actually worked since when we added SauceLabs the tests failed in Safari xD).\n. It looks like this test wouldn't fail only in IE but just serve as a verification that if we remove the perspective property it will fail in any browser, is that right?\n. Can JSCS or JSHINT handle this? It might be more useful if we could automate this kind of stuff to reduce the chances it's spotted in unrelated PRs.\n. Can JSCS or JSHINT handle this? It might be more useful if we could automate this kind of stuff to reduce the chances it's spotted in unrelated PRs.\n. (I wonder if it's not more useful to do this kind of change in a separate PR, though?)\n. I'm not sure if it's wise exposing all the internals of impress.js for consumers unless there's a reason to do so. The more we expose, the more we're required to support and the hardest it is to change impress.js.. Can we use .forEach instead of imperative loop?. Can we use .forEach?. typo libarary. Is a library API really necessary to be provided by impress.js? It looks like this is moving away of the purpose of impress.js which is serving as an engine for presentations and being more of a container for utilities.\nWhat's exactly the use case?. If we're still goin with the gc pattern, can we add this into the documentation?. JavaScript has its own Garbage Collector, can't we just keep track of the browser events and create a method to reinitialize impress.js? When the events are removed (.removeEventsListener) they will eventually be garbage collected by the browser.\nEach plugin can handle its own means of registering and removing events without having to build a dedicated GC. The only thing they'll do is to attach themselves to impress.js, and that's it.. The code you commented is related to the README implementing a way for users to create snippets inside impress.js namespace through the window.impress.addLibraryFactory function. That's not part of impress.js and is being added with this PR.\nIf you're referring to the libraries that are already internal to impress.js such as arrayify, byId, $$ and $: what's the point on exposing them for consumers of impress.js? Is it just to make them not to type [...arguments], document.getElementById, document.querySelectorAll and document.querySelector?\nWe're just obfuscating code. There's no issue requesting that to be exposed.\nThat's why I believe this PR should make it clear what are the use cases by submitting one plugin at a time and changing impress.js incrementally, just exposing what's necessary for that plugin. This way we'll be able to see how those exposed APIs are being used.. Now that does makes sense. I noticed it was sort of tracking the steps and the registered events. Looks like the term \"GC\" is a little weird and agree it could be named.\nOn top of that, are there any chances we can extract some parts of the functionality (at least what doesn't need to have side-effects like pure functions) and unit test it? There's a lot of logic so I assume there's a big chance of future changes by somebody else that is not the author to break impress.js unintentionally?. > 'js/impress.js' is a generated file (built from src/impress.js and other source files), so please comment on source files rather then generated file.\nOh right, didn't realize that lol.\n\nEspecially that in cases like calling callbacks it's used to call them in specific order.\n\nIf you are referring to the callback being executed in the inverse order, it's just a matter of calling:\njavascript\ncallbackList.reverse().forEach;\nThat can simplify the code and reduce the vectors of failure (less moving parts and variables like the index assignment and manual increment). That's cool, it's just that we might lose track later due to the huge amount of changes. It could be useful to review each PR in isolation so that it's more \"manageable\" if you get what I mean.... > Currently this file has enough documentation in comments to understand what it does and how to use it. So it's enough to give it a review.\nMy point for an incremental PR is not to understand what the GC API does and how to use it. It's to understand how it's being used within a plugin by providing the minimum amount of code and API exposure to satisfy that plugin's requirement, nothing else. That allows us to improve the architecture on top of examples and proper context of how it's being used.\nFor example, we can start to merge plugins that don't need a lot of exposed APIs to work and expose those APIs as more PRs and plugins are submitted.\nDoes it makes sense?. That's cool then.. > I believe removing them now may affect rest of the plugins @henrikingo has ready to be merged, so again - I'm fine with merging it as it is and reviewing the bigger picture later to see what libs or utils can be removed in favour of native functions.\nThat's cool, it's just that if we leave it exposed we might need to support it as more people start using it.\n\nIf we worry about this being exposed as public API we may 'hide' it and keep private until we think it can be used publicly.\n\nThat looks like a good approach.. > But we are talking about a code that is already implemented, plugins that already rely on libraries, teardown, etc in their current form.\nSo it would require quite a lot of additional unnecessary work from @henrikingo to carve PRs down to only parts needed for a single PR and plugin.\nCool, that makes sense for this case, I guess.... See this comment for the discussion about this.. Cool then. Perhaps in the future, we'll be able to see the patterns clearer and that will allow us to make better decisions on what to expose and what not.. Nothing prevents one from doing [].slice.call(document.querySelectorAll).forEach or using the built in arrayify(document.querySelectorAll).forEach, it's a pretty common JavaScript pattern to workaround that problem.\nHowever you've just stated that you're ok with this style, so I guess that's fine then.. Yeah sure, there are some arguments in regarding creating pure functions over imperative loops that allow an easier extension.\nProbably a conversation for another time. Perhaps a future PR since it's an easy change.. The second point is interesting, however, if we restrict the scope by default we'll avoid unintended breakage and issue reports that will surely come. We can experiment with that approach, though, and see if it works for impress.js. Unfortunately, Github itself doesn't help when we try to apply Linux principles such as Linux-like forking mechanisms.... So what's the final decision, leave the GC as it is and take a look later once you land the plugins?. Probably a copy/paste leftover here, I'll raise a PR to remove it. https://github.com/impress/impress.js/pull/627. Why is weight necessary? Are there plugins who rely on the order of execution?. What's gonna happen when two pre-init plugins have the same weight?. What about scalability? Right now the building of plugins is centralized, so it's easy to keep track of the weight numbers. If we start exposing to the public it's unlikely that plugin authors will be able to keep track of the ordering.\nIs there a way plugins can be created so that they don't rely on inter-dependencies (AKA side-effects)?. > For example, substep plugin will prevent transitioning to next step, and instead reveals a substep on the same step. So it makes sense for that one to execute early, because it will in any case cancel the stepleave event.\nIn the case of the substep plugin, instead of the plugin author to decide the priority of the execution, couldn't the user decide it? If you want to intercept the event you would put the plugin in a script tag further down the list and the plugin would do something like event.stopPropagation():\nhtml\n<script src=\"impress.js\"></script>\n<script src=\"goto-plugin.js\"></script>\n<script src=\"substep-plugin.js\"></script> <!-- This has priority on the event related to navigation, because it will prevent the default behavior from the \"goto\" plugin -->\nimpress.js\njavascript\n.addEventListener( \"impress:stepleave\", function( event ) {\n  // Impress handlers\n});\ngoto-plugin.js\njavascript\n.addEventListener( \"impress:stepleave\", function( event ) {\n  // goto-plugin handlers\n});\nsubstep-plugin.js\njavascript\n.addEventListener( \"impress:stepleave\", function( event ) {\n  event.stopPropagation();\n  // stepleave handlers\n});. I agree with @henrikingo. The methods are built to create plugins so there's no reason to be anywhere else other than the core.. ",
    "henrikingo": "Hi all\nJust a few notes on recent progress on this very old thread.\nIn a separate repo from impress.js, I have also created a new editor Impressionist. It's still a work in progress, but you can at least create slides, position them in 3D and save the presentation (barely). I intend to move this into the impress project once I finish cleaning up the state of impress.js itself.\nMany editors presented here seem to be web applications that run on a server and you need to use them over the internet. Impressionist otoh is based on Electron, so you install and run it as a desktop app, and it saves files on your desktop as well. There's a video demo in the README if you want to see more.\n(To clarify: There's no relation to the other Impressionist editor that is mentioned in this thread. It seems to no longer be actively developed, and URL stopped working?)\nBtw, as a reminder in case someone didn't realize it yet, the wiki has a list of impress.js editors\nI also wanted to mention some other new features in impress.js itself, that make authoring presentations easier:\n\nYou can now use relative positioning on steps. (Similar to e.g. Hovercraft, but now directly in HTML.)\nYou can use Markdown to write the slide contents (again, directly in the html file itself. Markdown.js is used to transform it to HTML).\nFor scientific use, you might be interested in the Mathjax.js integration that allows to use Latex, Asciimath and MathML in impress.js presentations.\n\n. Hi @danny \nAs you may have noticed, I've been working on adding a new plugin api to impress.js, and then on adding new features as plugins. It now has a skip plugin which can be used to add steps to a presentation, which will nevertheless be skipped when navigating through the presentation.\n. skip plugin is now merged to impress.js master. Hi @calebeby, @naraesk and others\nThanks for pinging on this thread again. Like bartaz, I kinda felt this is a silly powerpoint feature, so it wasn't top of my priority list last year. At the same time, it is true this must be the most requested feature at this point. So I have implemented it in my fork today. (Demo).\n\nit would be great if a solution could be found that this repository stays at least maintained.\nThere are several forks of it currently, can't use them simultaneously.\n\nJust to let everyone know, my fork:\n\nIs actively maintained (for over a year now)\nIntended to be general purpose, so I add feature requests like this, even if I don't personally use them\nI'm happy to take pull requests too (please familiarize yourself with the plugin framework)\nI originally added a plugin framework, based on helpful guidance from bartaz himself. Even today, he has at least not objected to what I ended up doing. In this sense, I've done my best to continue delivering upon the original vision of impress.js\nI periodically merge from upstream and have avoided doing some things in order to remain compatible with it. I realize upstream impress.js is stagnant, but should it ever spring to life again, it's been my hope that the work in my fork could be merged back upstream.. substep plugin is now merged to master.. I think my people on this thread should check out my work-in-progress Impressionist 3D editor for impress.js.\n\nA couple of things that are now in impress.js core were added to enable creating an editor: initAllSteps() is now called inside each goto(), so that dynamic changes to the presentation (add new slide) are taken into account when you call goto(). Also the new tear() method - to \"uninitialize\" impress back to original state - I added for Impressionist, although others had asked for that as well.\nOther than that, all the editing/authoring functionality is in Impressionist itself. For example it was a lot of fun to implement a camera functionality as is also discussed here. impress.js is used to render the presentation, and impressionist adds its own functionality on top. But for the most part these remain separate and independent, and there was no need for a particular \"Authoring API\" in impress.js itself.\nPS: I intend to move impressionist into the impress project too, once I finish cleaning up the state of impress.js first. (Which is still expected to take weeks.). To summarize current status:\n\nIs there something wrong with deck2pdf?\nimpress.js presentations, in the general sense, are not \"slides\", rather 3D animations. The idea of printing arbitrary impress.js presentations on paper or a PDF file doesn't make sense. But it is of course possible that your particular presentation can be converted to pages on paper.\nAs for @jbonlinea, I don't quite see your problem. I speak at conferences a lot, and when I used PowerPoint and OpenOffice, it was definitively necessary to have a PDF. In fact that wasn't a backup, I always used only PDF to avoid font and positioning problems. But this is 2017 and impress.js works in firefox and chrome (and probably IE and Safari?) since many years ago. Why don't you just send a zip file and tell them to unzip and open in a browser? You are much more likely to run into trouble if converting to PDF.\nAs Bartek says above, it's completely possible that you don't call impress().init() and print the presentation without the 3D positioning. You can add any CSS you want for this use case, use the body.impress-not-supported selector for this mode.\nWe now have plugins in impress.js. (In dev branch, but it's ready to merge.) Even if PDF export isn't meaningful to everyone, I don't mind if someone wants to create a plugin that does that. Users can then use the plugin or ignore it, it's just another file.. Node.js will never be required to use impress.js. (It is required for development and testing.) We now place large external libraries (Markdown.js, Highlight.js, Mathjax.js and Mermaid.js) under extras/ as a git module. In other words, they are optional modules. A PDF library would probably go there as well.. Isn't this bug fixed by this commit: https://github.com/impress/impress.js/commit/d8995aa3194f6fdbcc8867626d52f913d0c52882\n. This is now fixed in master branch.. FYI, I've now implemented a solution for this in my fork.\n\nThe solution is based on @bartaz comment above: key press will only cause navigation, if focus is on BODY or HTML element. The exception is the TAB key, which will always force prev() or next() to be called. A related commit was to add blur() to be called on each transition. This ensures that focus is not left on a form input field that is no longer on the active slide, so that user could type a lot of keys and cause garbage to be accidentally entered into the form field.\nYou can play with a demo here. (Press pause button on bottom right to disable autoplay.)\n. FYI, I implemented this simple request now in my repo, see this commit\n(I was actually going to merge the patch above from @FagnerMartinsBrack, but it doesn't work in current impress.js anymore, and ultimately when I was finished there was not a single line left from that patch, so didn't put you as author, but thanks for the proof of concept anyway.)\n. @greemo In my fork you can already set data-transition-duration individually for each step. In milliseconds, not as a scaling factor. The patch linked above implemented just that.. This is now supported in 1.0.0-beta1. Missed this when I closed tickets related to that release.. Hi @csicar \nCould you share a link or two to an example presentation you did in SVG? I'd like to work on integrating your suggestion, but without example content, it's hard to form an opinion on the code, where to put it, etc.\n. @csicar I'm trying to re-read this thread to understand...\nIs the problem here that you would want to add class=\"step\" directly to an svg object? Why can't you have a div first, then the svg object inside it?. Ah, that sounds interesting indeed. I think I should look into that myself one day!\nFWIW, the patch you've proposed here could now easily be implemented as a plugin. It could be simply called src/plugins/svg.. Hi @csicar \nCould you share an example of where you use impress.js over an svg presentation? (presumably together with the above code.) I think your proposal to support svg makes sense, but I'd want to see it working myself in order to commit this code (as a plugin). Hi @Sigmun \nI'm not sure what you're referring to with not working \"anymore\", but in any case I'm maintaining a fork of impress.js which integrates Markdown.js:\nhttp://henrikingo.github.io/impress.js/examples/markdown/#/markdown\nhttps://github.com/henrikingo/impress.js/tree/myfork/examples/markdown\nThere isn't LaTeX integration yet, however there's a feature request in the queue:\nhttps://github.com/henrikingo/impress.js/issues/11. Based on above comment and lack of response, I assume this can be closed.. Hi @wikier \nI copied your code above into the examples/classic-slides/ presentation, and apart from the fact that the first line is missing the > scrolling totally works.. Closing due to lack of response. If the issue is still happening, please provide more info.. Forgot to add yesterday, the help plugin already shows this kind of popup when you press 'H'. The scope of this ticket is to bind '?' to it as well.. #705 fixes this. I'm gonna rule that this was now excellently implemented by #712 and this can be closed as a duplicate.\nNote that #712 implemented the PowerPoint-standard F5 instead of f.. A blackout plugin, implemented by @Strikeskids in #372 is now merged to master.. FYI, I've added this in my repo when working on the plugin api and adding the progress bar plugin. It's part of this commit:\nhttps://github.com/henrikingo/impress.js/commit/dd85bbb4437f464d9196830d3b90cfc87b39b49b\nI didn't add a new event, rather I simply added event.detail.next to the already existing impress:stepleave event. That is sufficient for what the progress bar plugin needed.\n. event.detail.next for impress:stepleave events is now also available in master. Just to share my opinion on this. Up in my repo (or is downstream more correct?) I've added the progress bar plugin that is the impetus for this PR. After adding that plugin, as well as another that also needed the list of steps, it is my opinion that this addition is not needed (at the moment).\nSince the \"root div\" is already sent in the event.target, and the steps are descendants of the root, it is straightforward and unambiguous to get the list of steps as event.target.querySelectorAll(\".step\"). It does not contribute to making code shorter or clearer to put the steps also separately into the event detail.\n(The relevant commit in my repo that I've mentioned: https://github.com/henrikingo/impress.js/commit/dd85bbb4437f464d9196830d3b90cfc87b39b49b )\n. Closing based on previous comment.\nNote that the progress plugin was also merged to master now, thanks @m42e for contributing it!. #706 fixed this. See substep plugin, now merged to master.. Hi @ywdr1987 \nThe link in your original issue description no longer works. Would you like to update this issue with some example I can read?. Closing due to lack of response, but feel free to reopen if this is still an issue for you and you can provide an example file with the error happening.. @pierstoval: I have done exactly that in my fork. Feel free to use it / contribute to it while we wait for upstream to catch up.\n(Note that official impress.js also has touch support. Not swipe, but you can touch on the left or right edge to navigate. You just never see it because it refuses to load in any phone or tablet.)\n. > @henrikingo did you make a PR for this?\nIt's complicated, but in short, yes, I submitted a PR for my very first changes (the qunit test framework), but it didn't end well, so I gave up on doing PRs. (I was myself part of impress.js maintainers too at that time.) My fork remains compatible with upstream impress.js (meaning, if you want to merge all 80+ additional commits together, you can), and I'm fully supportive of upstream impress.js catching up one day.\nOther than that, I really don't want this thread to drift into a (potentially heated) off topic discussion, so if you have further questions about my repo, feel free to open a separate issue for that.\nOn the topic itself: There is also a patch which allows presentation authors to easily hide all slides except the current, previous and next, specifically to save RAM on small devices. I've added that functionality to my fork as well.\n. impress.js 1.0.0-beta1 now works (or at least tries to run) on any device.. Hi @b3nhartl3y \nI just wanted to let you know that over at my impress.js repo, where I've been working on a modular plugin api to support new impress.js features, I've added a stop plugin. If you add class=\"stop\" to the last slide, the user cannot navigate forward to the first slide anymore. He can however still go back to the previous slides (left arrow, page up).\nThanks for suggesting this optional feature.\n. Hi @travisfisher \nI wanted to share some relevant updates from my work on a plugin api:\n- The code that provides the navigation functionality is now separated into a separate file. If you remove/comment the \"navigation.js\" entry from build.js file, and re-run npm run build. This re-creates the js/impress.js file without any support for the arrow/space/tab/PgUp/PgDn navigation at all.\n- There's currently no way to dynamically enable and disable the keyboard navigation during a presentation (from your javascript code), but that would actually be easy to add and I'm happy to do it. Let me know if you're still interested.\n- There's also a new stop plugin. If you set class=\"stop\" on a step, the user cannot navigate forward to the next step from there. (He can however navigate backwards to previous steps.) While this wasn't the original use case for a stop plugin, you could of course set and unset this dynamically as well.\nI hope some of these recent additions can help you?\n. @ahainen This is an old issue that is closed. Can you please post a new one: https://github.com/impress/impress.js/issues/new. Hi @KZeni \nI think your idea of hiding steps that are not in the immediate vicinity of the current step is a good way to significantly reduce memory consumption on smaller mobile devices. In any case, since using this is completely optional, up to the author using css, I've added your code as a plugin into my impress.js fork. Please have a look.\n. mobile plugin is now merged to master. Thanks @KZeni !. Hi Jacek\nWhen you say \n\nimpress.js uses #/id to avoid the browser scrolling to the anchor, but the recommended way of linking into the presentation is #id \n\nWhat exactly do you mean by \"recommended\"? It seems to me having slashes in the anchor is quite common, and may indeed be used to describe \"state\" of more complex javascript apps, rather than just linking to an element id.\nOr to put it more simply, linking to something like: http://impress.github.io/impress.js/#/step-2 works just fine, so what is the problem this issue is trying to fix?\n. I'm closing this due to lack of response for a month. This is purely in an effort to keep the issue queue tidy. Feel free to reopen if you have more details to contribute.. Heh. +1 Since no code is changed.\n. Wanted to call out the motivation for this request:\n\nWell, my reason is that when jumping throught the slides fast I\u2019d like to know where I am. And the URL shows the page number. But only after the animation has finished.\n\nAnd also note that in 1.0.0 versions, there's also the progress bar and navigation menu that show the current slide (if enabled). However, they both share the same behavior: they update at the end of the animation.\nAt least for the navigation ui, there's no reason it couldn't change earlier too. For progress bar, I think there's an animation that's intentional, and that would be lost. But speed is a good argument too.\nEven if changing the url would have some issue, as mentioned by @bartaz above, these UI controls can still change their behavior independent of that.. Hi @Strikeskids \nIn my repo, I've now added your code as its own plugin. Please have a look.\nI made 1 small addition: if you press b again, it will unhide the content. Unfortunately this only works with Chrome. Firefox will for some reason not re-render the empty screen until there's a transition to next slide (which is how your original code works, and is also still there).\nThanks for a cool contribution!\n. This is now merged to master. See blackout plugin.. Hmm... I just tried this with the impress.js demo.\n- I navigate to slide 5, which has the url hash \"#/its\"\n- I click the link to prezi.com\n- I press back button\n- I'm back at slide 5.\nThis works on Firefox and Chrome on Linux desktop. Is it different on some other browser?\n. Ah, thanks for clarification. Ok, I see now that's what the original description says!\nIn that case this is much more a special case. But just as an idea, as we're talking:\n- when the link is clicked, this is captured by javascript before navigating to new page.\n- javascript stores a variable in a cookie\n- when returning to presentation, impress.js will check that we returned to slide S, and will notice the variable set in the cookie, and therefore immediately calls next()\n(Sounds like a good feature for a plugin, once we support plugins.)\n. Hi @torbjornlager \nAs I'm reviewing open issues, I came back to this. I'm thinking the following link does roughly what you expect (and in my opinion is a more standard way to do the same):\n<a href=\"link/to/other/page.html\" target=\"_blank\" onclick=\"impress().next()\">visit external page</a>\n\nThe above will open your link in a new tab, while the impress.js presentation stays open in the old tab. Also, when you click on the link, the presentation will already flip to the next slide. When you're finished looking at the external page, you close that tab, and return to impress.js, which is ready with the next slide for you.\nAs this solution will work with impress.js as it is, and doesn't require any code changes, I will close this issue. But you're welcome to comment more if this didn't fully answer your need.. 1.0.0-beta1 now suppports impress().tear(). Hi @andygoblins \nI think the idea behind this patch is a bit misguided, and therefore I think this patch is both unnecessary and the changing of semantics is a bad idea. Feel free to defend your case more strongly, but let me explain what I see when I read this:\nFirst of all, events are asynchronous. So even if you would trigger the event when the element being left is still .active, there's no guarantee it will remain .active until your event handler executes. (I suppose implementations of javascript are such that it actually will always be the case, but it is still bad programming style to assume that it will be.)\nThe impress:stepleave event already has the div being left in event.target. You don't need to find it with querySelector() or otherwise.\nimpress.js sets a class impress-on-<id> on the body element when it enters a new step. Hence, what you're doing above with a floating header, you can do purely in CSS without any JavaScript:\nCSS\nh1#stickyheader {\n    visibility: hidden;\n}\nbody.impress-on-slide1 h1#stickyheader,\nbody.impress-on-slide2 h1#stickyheader {\n    visibility: visible;\n}\nSome other teardown activities you might want to do in javascript, but for reasons explained above, you in any case shouldn't rely on it being executed before or after impress:stepleave, nor do you need the .active class to find the element you want.\nThe most important reason is that impress.js at this point is much too mature to change such semantics. There are probably at least hundreds of users that rely on the semantics being exactly as they currently are, and changing it would cause more harm to them than it would benefit you.\n. Hi @mofosyne \nimpress.js now includes impressConsole.js. With this there comes a convention to use <div class=\"notes\"> to write text within each slide that is picked up and shown in the speaker console. (Note that it's still the responsibility of the presentation author to use display: none CSS to actually hide these notes from the presentation.)\nA text to speech plugin could use this same convention - at least that could be the default behavior. It should listen on the impress:stepenter event, and then lookup if there's a div with notes, and then send that text to the text-to-speech engine.\nSee Plugin README for more information on creating plugins.. You can now use class=\"skip\" to skip a slide during next/prev navigation.. Hi @mhils \nAs you may or may not know, I've been working on a plugin API for impress.js. I've today added a skip plugin. If you add class=\"skip\" to a step, it will be skipped when steps are navigated with next() and prev(), but you can still go to the slide with goto(), including via clicking a link or typing the hash anchor into the url.\nIf you could have a look and confirm that this is the same that you had in mind, I would appreciate it!\n. skip plugin is now merged to master. Some time ago I wanted to up my game when doing talks, and have found impress.js and now I'm using it. Since I use it and I know JavaScript, I'm willing to help. In fact I'm sitting on some to-be-published code already.\nAbout me: I'm a good programmer, with knowledge of many languages, including JS. However I'm not so deeply involved in the modern JS toolchains of bower, grunt, cucumber, npm, jquery or jscs, and most importantly I'm totally ignorant of modern JS plugin and dependency injection models. So clearly I cannot help there. (In other words: Javascript frameworks evolve with a higher frequency than I use JavaScript...)\nAs all of us, I'm busy with family and real work, so my contributions are likely to be spotty, but experience from maintaining a Drupal module for 7 years tells me it still works when we all help each other.\nWhat I'd like to contribute:\n- the comments in the demo html source are great, but there really should be real documentation.\n- more examples and templates, specifically, simpler ones than the powerful official demo\n- integrating impress-server and impressConsole.js (specifically, you can enter the impress-server pin via impressConsole.js)\nMore ideas, to be implemented:\n- integrating the help screen from hovercraft.js (I don't like RST, but some js/css snippets in hovercraft have stayed in my presentations)\n- allow stating step positions as relative to previous step (again, an idea worth keeping from hovercraft)\n- given time, I'd love to integrate a diagram markup language, like mermaid or graphviz\nTL;DR: count me in either as maintainer or contributor\n. Thank you @bartaz, I'm happy to help. I'm almost as busy as you, but sharing responsibilities is the point of open source.\nI also promise to do my best to continue advocating for your vision of impress.js being a tight core library, with more features as plugins, testing, and so on.\nWhile I've been busier than anticipated as well, I've actually been able to take the first little step. Today seems a good day to share what I've been sitting on, so I have made a pull request for adding some first set of qunit testing! (#474) If the pull request is accepted, I will also advocate for a rule that any actual code changes can only be done once the feature in question has code coverage.\nLooking at the queue of issues/pull requests, I'd say the first thing to resolve is to add a license file. I will comment on an appropriate issue on that.\n. @bartaz: My current thinking for the QUnit tests is that we can test that for example a data-x attribute translates to the correct CSS position value. Whether a browser actually renders the thing as expected is out of scope for QUnit. Still, if we get reports that something doesn't render correctly in e.g. Chrome, then we can still add a unit test that checks \"don't do X because it's broken in Chrome (version)\".\n. Project is now actively developed.\nI will add documentation about how to add tests. Plugin framework is already extensively documented.. Hi @jorisvanzundert \nThe right place to ask would be to just file a new issue. I just tested with Microsoft Edge and this seems to no longer be happening. Can you confirm?. Hi @bartaz \nIf your intent is to:\n1. use MIT license AND \n2. be GPLv2 compatible,\n   ...then, yes the MIT is sufficient as MIT licensed code can be mixed into GPLv2 licensed code. Obviously, a simple MIT file is of course also much simpler.\nExplanation for this is simple: The FSF is the steward on GPLv2, and while we cannot take what they say as equivalent to law, it is fair to say that their view on GPLv2 compatibility is the strictest compared to mainstream. So when the FSF says that MIT license is compatible with GPL, then we can safely assume that is the case: http://www.gnu.org/licenses/license-list.html#X11License (yes, that is the correct link, explained if you follow it and read.)\n. Cool. We have first actionable decision made! Need new pull request now.\n. Obsolete after major refactoring. (Note that JavaScript coding style is now enforced with jscs. For other file types, fixing trailing whitespace is still welcome.). Hi @quimnuss @Hypoon \nI like the ideas in this thread. I've integrated some related feature requests into my fork of impress.js here. The official impress.js demo here has some of these enabled. In particular:\n- Notice there is a navigation menu bottom right, which allows you to jump to any slide.\n- The skip plugin allows you to have slides which are skipped from the usual left-right navigation, but you can jump to them with the menu.\n- The more general goto plugin allows you to redefine the sequence of the navigation, so that when you move to the \"next\" slide, you will move to whatever is defined with the data-goto attribute.\nThe ideas in this thread are not completely possible as of now, but could be easily implemented with the same approach, for example by extending the goto plugin a little. For example, instead of just data-goto-prev and data-goto-next alternatives, you could redefine all of the arrow keys with data-goto-left, data-goto-right, data-goto-up and data-goto-down. I think such non-linear navigation fits the idea of impress.js quite well and could be fun to experiment with it!\n. Hi all\nJust wanted to add a link here for those that will come here to read this... I spent some rainy Summer days creating a demo that uses non-linear navigation. In this case, you can freely navigate Up, Down, Right and Left. (A 3D presentation could offer even more interesting choices.)\nhttp://henrikingo.github.io/impress.js/examples/2D-navigation/\nIt's late now, so the text content is missing. If you want to participate in my playful crowdsourcing of pro's and con's for desserts, please do so on twitter: https://twitter.com/h_ingo/status/903359928567570433. goto plugin is now part of impress.js master as of 1.0.0-beta1. Hi @bendavis78 \nThere are a couple pull requests that implement this in various ways. I have one here: https://github.com/henrikingo/impress.js/\n. @jacekkopecky Wow that's an impressive number of commits!\nWe need to get all this stuff into one repo. I'll try to make progress with @bartaz tomorrow or next week, see if we can poke this forward a bit.\n. Oops, I've completely forgot to come back to this thread.\n@jacekkopecky Some months ago already, I've added a Relative Positioning Plugin to my for of impress.js, where I implemented a plugin API based on bartaz' guidance. Please have a look and let me know what you think.\nThis demo presentation uses the relative positioning data- attributes.\n. The relative positioning plugin is now part of impress.js master, as of 1.0.0-beta1. @blauertee \nPurely off the top of my head, without testing: Get the id of the current step from the location.hash, then read its scale attribute.\nvar id = window.location.hash\nvar step = document.getElementById(id)\nvar scale = step.dataset.scale. Yes. They're all alternative implementations of the same basic need.\nThere seem to be 2 general approaches:\n1. Add an attribute to the root element saying something like positioning=\"relative\" and then use the same data-x, data-y and data-z attributes, just that the numbers have different meaning. (This should be extended with a possibility to define relative/absolute separately for each step.)\n1. Add new attributes, like I have done above: data-rel-x and so on. #131 is also in this general category, though different.\nI suppose both of these have their own merits. I like second approach for being clearer, not overloading same attribute with meanings that could change. For example if you copy some HTML from a presentation with relative positioning, to another with absolute positioning, you'll have a mess with (1), but it would just work with (2).\nAll of these call for a \"Positioning API\", which would allow implementing these as well as more elaborate positioning (like automatically distribute steps along an SVG path...). If an API exist, both types of plugins can coexist, although I think this is quite a core feature (even if a plugin!) so we should also show some leadership and suggest one markup style as the \"official\" choice. (We can change our minds later if users seem to prefer some other plugin.)\n. Oh, I should note that the addition of examples/ and in particular impressConsole.js extends the scope of this pull request quite a lot and its quite improper of me to put unrelated changes into same branch. Basically they reflect the fact that I saw this project as unresponsive and therefore have added things to the branch that were useful for me. The pull request for relative steps must in any case be rewritten to use an api, so from that point of view this should be ignored. \n(But I suggest these are not closed, rather we should respond to all that this kind of functionality will be added via API, and people are welcome to propose such an api, and to do so there must be test coverage first.)\n. @FagnerMartinsBrack: You're right. Closing current PRs and opening single issue for discussion makes more sense.\n@bartaz: Yes, that approach definitively has some merits. It avoids any ambiguity (e.g. you could safely copy paste html into another context) but also avoids adding new attributes. Note that in general I would expect some new positioning schemes to definitively add new attributes, such as positioning along an SVG curve.\n. Also, either of these has to be rewritten as a plugin, not touching core code.\n. I have to say I disagree with the previous comment. If you have 99 slides, and numbered them manually, and then add a slide to the beginning, you would have to renumber all of them. Which would be silly, when you can do what this pull request proposes instead.\nCurrently the main problem is that no pull requests are being handled by anyone. There's been discussion of opening up this project, and moving into a more modular and then more inclusive type of project. If that actually happens soon, this pull request would definitively fit in well.\n. Ah, I agree with that much. I wasn't looking too closely at this specific implementation. Such a discussion makes more sense once we have an architecture and process to submit pull requests against. (I have my own pull requests waiting, and fully expect to have to rewrite it against some refactored impress.js before it gets accepted.)\n. Hi @bartaz \nYes, please create such an issue. Even if you don't have time to do it, I think the initiative for discussion needs to start from you. Or, if you don't even want to initiate discussion, you need to simply pick a person/persons who you delegate to. Based on #435 all the rest of us have been waiting for a cue from you and nobody will propose anything before there is a signal that you're open to proposals. (In fact, there was some GSoC project that we were waiting for?)\nAs for myself, I would currently have time to contribute into refactoring, but need someone else, who is more familiar with current state of the art in JavaScript, to dictate the coding style, style of plugin api, \"dependency injection\", unit testing frameworks and so on... Once I'm told which tools to use, I can contribute my ideas on how to refactor impress.js and also do refactoring, create new api's, etc.\nhenrik\n. impress.js now supports plugins. It would certainly be possible to refactor the step transition code into a plugin. This would allow different easing types to be added and allow user to choose them by configuration. It would also allow users to write their own plugins.\nThe required refactoring is non-trivial, but kind of straightforward.. Cool. Progress within a single day!\nI suppose I should rephrase the point about dependencies then: maybe dependency injection is not needed, but certainly there must be a way to specify that \"this module won't work unless module B is loaded first\". Of course, if npm is used, it takes care of a large part of that problem.\nI'll have to read up on your links, thanks a lot!\n. Hi @FagnerMartinsBrack \nIt seems I forgot to ask for input on test frameworks. Is Mocha the way to go also for client side JS? Do you have suggestions to look at anything else?\n. I thought I should have a lot of free time during the Autumn, turns out I was wrong. But during Winter I've been able to take a stab at adding a test framework (chose qunit) and wrote some basic tests to get started. As you can see above, there's now a pull request.\nIf we can get this merged, I invite others to write more tests, in particular:\n- the keypress api at the end of impress.js\n- testing that data-* attributes convert correctly to CSS, zooming, positioning, animations...\nPS. @LongLiveCHIEF that sounds awesome, and also like a lot of work!\n. I wanted to note that I've now made progress with a proposal for a plugin api. Please see #541 and comment there if you want to discuss.\n. Looks like we've made some good progress now on laying a foundation for a more feature rich impress.js.\n- qunit test framework is now merged, although test coverage in master is still shallow.\n- I have a repo (http://github.com/henrikingo/impress.js) with a plugin api, where I've already implemented several new plugins too.\n- There are bower and npm json files in the repo as well, but I'm unsure if they're correct/current. Anyway, I consider packaging to be a somewhat organic function: if someone needs some packaging format, it tends to emerge.\nAs a conclusion, it is time to close this ticket. Thanks for helping out.\n. Hi @and3rson \nYour code is really cool! I've merged this in the past 2 commits to my fork. You can try it with the official demo here. Note: To play with the swiping, you may want to stop the autoplay by clicking on the pause button to the bottom right.\nTesting with my 3 year old tablet, the official demo animates a swipe pretty smoothly on Chrome. Only the \"tiny ideas\" slide is tough, as it zooms (ie scales) so heavily. On Firefox for Android it was quite sluggish, but doing a quick swipe instead of trying to \"enjoy it\" will bring you to the next step no problem.\nDetails:\n- I made the w/h positioning as a separate commit. It's also a bit different: Since there was already a relative positioning plugin in my fork, I naturally added this to the same plugin. As a result, a presentation needs to use data-rel-x=\"2w\", etc...\n- I separated the swiping code into a new impress().swipe() api method, and a touch plugin. That worked out pretty well, the swipe() method just needs a single parameter to render the swipe: a ratio between -1.0 to +1.0.\n. This is now merged to master (with some refactoring to fit the new plugin based approach). Thanks @and3rson, I enjoyed your code! (Never did anything that swiped before.). Thanks for catching I had somehow added wrong email to .gitconfig. Fixed now.\nI picked Qunit out of the discussion in #494. If someone wants to provide pull request with different framework, I won't be insulted :-) I just wanted to move things forward.\nIn hindsight, QUnit is awkward in 2 ways:\n- the idea is to manipulate html elements under a div, which is reset between tests. However, impress.js sets classes in body and wants to own the entire page. It still works, but this is not how QUnit developers intended it to be used. (hence need for cleanup yourself)\n- QUnit prints results on the screen, while impress.js wants to do animations on the entire screen as well. It works, but a bit messy. I believe if we run Qunit in karma or other test runner, we will get results printed in console, so this might be ok after all.\nAs for different modules: that's exactly the idea. This would be the first module testing core functionality. Keypress tests can go into this one, or could already be separate file. In any case more advanced animations need their own html file.\nNo comment yet on before/after api.\n. I forgot to say: Thanks for reviewing!\n. @FagnerMartinsBrack : New commit should address all issues you raised (or intentionally not, as with the line breaks in assert() invokations).\n. Isn't that just another way of doing what I already do in QUnit? Wouldn't want to add more libraries for such a reason.\n. > If there are comments in the code, then it means that the code cannot document itself. Is it possible to write the code in a way that it only documents what can't be seen by reading the code? If you want that I point out some examples in the code I will be glad to do it, it's just that I think it's pretty obvious that some comments are just redundant, maybe that's intended with plans to be removed later?\nYou're free to point out examples, but I think you'll learn that we have fundamental difference in philosophy here. In my taste, too much comments is better than too little. In my experience, most coders vastly overestimate the readability of their own code, when read by someone else. In particular, in open source we must take into account that code we write might be read by someone who never worked on this project before, and in the case of JavaScript, might be a person for whom JavaScript is not their strongest language (because they're really a backend dev, etc...) Yet, such persons should be treated as potential contributors too.\nAlso, it is intentional that code comments add redundancy. They're a statement of intent. You can then read the code to check whether the code does what the comment said. Without comments, you can read what the code does, but there's no reference point that will tell you whether that is what the code is supposed to do.\n\nIs it possible to split the JavaScript code in a separate *.js file? I say that because usually it helps for code editors to highlight the correct tokens in a file that only has JavaScript. Besides that, the separation might make it easier to focus in the behavior of the tests instead of how the document is structured (the html itself will be pretty small).\n\nSure. My editor handled this fine, but if it helps other, we should do that.\nActually, future tests (in other files) should have more elaborate html and css code, so this separation should definitively help in readability.\n\nJust out of curiosity, is it possible to run the second test Impress Core API separately? Ideally tests should be atomic in a way that they can be run separately without having dependencies on each other.\n\nThe first QUnit.test() calls impress().init(), so no. However, that is an expection and in general I agree with this principle. For example, my intent is to add tests for the keypress api into the same file. It should and would be possible to run the keypress tests without the core api tests. But both of them would depend on the first test calling impress().init().\nAs we cannot benefit from the automatic reset of the div#qunit-fixture element, it is actually very important to emphasize that each test cleans up after itself and tests don't depend on things done by previous test. (For example, it might become necessary to do things like impress().goto(1) between tests. QUnit seems to have an api to do such things between tests.)\n\nAbout code style, as we probably already discussed, it is better to define and document some guidelines before this is landed (it is going to be done in the \"CONTRIBUTING\" part of #512). After we define it, we can adjust if necessary as a last step. Does it makes sense holding this until the guidelines are defined by the team?\n\nI agree on the first part: we shouldn't discuss style until there's a document that defines the guidelines.\nI disagree on the second part: I think this should go in now. There are still lots of tests that need to be written, and adding QUnit will enable others to help writing tests. Also accepting any other code contributions is now blocked by not having tests. I of course hope we do agree on style guidelines reasonably quickly, but it would be backwards to block adding new code for a style discussion. Editing the code for style is a trivial task once we have agreed on the style guidelines, I will certainly quickly edit my own code if nobody else does it.\n. I will respond to your latest comment, as it contains a specific example:\nSurely you agree, in principle, that each function at least should be preceded by a short description of what it does? I can promise you I will never submit a PR where that would not be the case.\nMore generally (to your previous comment):\nLike I said in the beginning, we probably have a different philosophy here. I'm familiar with your thinking, and I have many friends who believe comments are unnecessary, too often outdated, etc. I consider them bad programmers. (Not because their code doesn't have comments, but because it has bugs.) The reason their comments are outdated is because they don't do their job well. They should have kept the comment up to date when code was changed, and if they didn't, it should have been caught in review. The programmers I respect write clear, commented code. (Also detailed commit messages, documentation, etc...)\nAgile manifesto also says that we cannot collaborate on this project unless we sit in the same room so we can talk to each other. Within its context (enterprise software), it has done a lot of good, but personally I never felt I had much to learn from it. Open source movement has known how to write good code well before agile manifesto was written (and I'm old enough to talk about that).\nAnyway, I think also this discussion falls within the style guidelines discussion. I will plead for my philosophy there, but I think we should commit this code now.\n. Responding to this question separately:\n\nThe idea that I commented earlier might solve this in a very unobtrusive way: https://github.com/impress/impress.js/pull/510/files#r53293514\n\nYes. I think it is a good idea. It's also enough work that it can be done in its own task, at a later time.\n\nI don\u2019t understand this part. The tests are not cleaning themselves and the second one seems to depend in the previous one. Are you saying just to agree that the principle stands but that in this case it is impossible to do it because we can\u2019t use quint-fixture?\n\nAll tests depend on impress().init() being called. There's no point in doing that repeatedly. Apart from that, tests must clean up after themselves. For example second test must remove the event listeners that it added, which it does.\n\nAFAIK QUnit only have APIs for running before/after all tests. Running before/after each module and Running before/after each test. AFAIK there is no API that runs in the middle of tests (only after or before each one).\n\nYes. I don't see what problem you're discussing here?\n. Hi @bartaz \nThanks for joining, I think your point of view was really needed.\n\nFrom this point of view I would like to see the tests in separate JS file and not included in HTML as it is now.\n\nThis is ok. I already have done that in my own fork, but didn't want to push more into this branch yet.\n\nI'm also not sure about the need of setTimeout - maybe I'm missing something. It's true that impress.js internally uses events to set classes on elements, but these events are registered internally by impress.js when its initialized, so if in test we register an event (even on the same element) it should be called after internal handlers from impress.js. So when any external handler is called elements should already have the classes assigned to it. Is it not the case?\n\nMost of the things impress.js does after goto() is done in the event listener. So when in test code we add an event listener, as far as I understand, those are equals and execute in parallel. You can test this by registering the event handler without a setTimeout wrapper:\nroot.addEventListener( \"impress:stepenter\", assertStepEnter );\nroot.addEventListener( \"impress:stepleave\", assertStepLeave );\nWith the above you will either get test failures (because not all CSS classes are set yet) or the test will hang (I believe because test framework called the next impress().goto() too fast).\nSo the setTimeout is unfortunately needed to ensure that impress.js event listener has finished before the test code checks for its results. This could of course be changed, but we would have to change impress.js code to do so, and now the primary goal was to add tests before any impress.js code is touched.\nNote that apart from the above explanation, the setTimeout of course doesn't add any other value to the testing. It's true that it is an unfortunate additional layer of indirection.\n\nWould it be possible to change the \"Core API\" test from this 'loop-based' sequence into more coded sequence of actions and checks?\n...\nWhere stepEnterMocked stepLeaveMocked will be some simple handlers that would just store target of event in currentStep/prevStep. I know it may be more complicated because of async nature of events but maybe it would be possible?\n\nIt is of course possible, and if even you have a hard time reading the current code, then maybe we need to think about it. But it is certainly not going to be as elegant as your above pseudo code suggests.\nFirst of all, all the asserts of course need to be done inside the event handler. Otherwise they will execute immediately, before even the first \u00b4next()\u00b4 has completed and triggered the first event(s).\nFrom that observation, the second problem is that if I'm not allowed to use a loop structure to make the event handlers parametrized, I think the only way to do this would be for each event handler to end with removing itself, and adding the next event handler.\nSo, just to give a short example:\n```\nQUnit.test( \"Impress Core API\", function( assert ) {\n  var eventHandler1_enter = function(event) {\n     assert.ok(...)\n     assert.ok(...)\n     ...\n     impress().next()\n     assert.ok( / the things currently in assertImmediately() / )\n     ...\n     root.removeEventListener( eventHandler1_enter )\n     root.addEventListener( eventHandler2_enter )\n   }\nvar eventHandler2_enter = function(event) {\n   ...\n```\n(Note that above the wrapper calling setTimeout() is omitted for simplicity, but would of course have to be added back for the real code. And if we want to be consistent in this direction, there would now be a different setTimeout() wrapper for each step as well?)\nThere would be 7 such event handlers for stepenter, another 7 for stepleave. Each containing 6-8 assertions. So in total by \"unwinding\" the current loop approach, we would be adding about 110 lines of code. Note that this then repeats if we have to use the same style for testing the key and mouse navigation (which has 12 transitions instead of 7!), and probably more future tests as well. So just for this js file we're talking about 200+ additional lines of code.\nFinally, I think both you and @FagnerMartinsBrack have struggled with the fact that we're checking both stepenter and stepleave in parallel, and can call impress().next() only after both code paths are finished. This is why the readyCount and readyForNext() functions are used to start the next step. So to simplify this part we would have to (as already suggested by @FagnerMartinsBrack) separate the tests checking for stepenter and stepleave into their own QUnit.test() blocks. This will actually not add much more lines of code (maybe 10-12 or so) but will double the execution time of the tests. But that is acceptable IMO if we really want to go this way. \nMuch bigger problem is code maintainability, when same code is copy pasted 7 times. I can say for sure that it would not have been feasible to develop the tests in the style we're now discussing, since every simple change will then have to be done 14 different times (or 24, for the key/mouse navigation). But of course now that the tests are done and working, I can unwind them into a longer, more readable format, with the expense of making future maintenance of the tests more laborous.\nMy compromise suggestion here would be to do the last part: We can separate the stepenter and stepleave tests into their own QUnit.test() blocks, and get rid of the readyCount / readyForNext() logic, but keep the loop structure (to avoid serious code bloat). At least I can easily do this first with little effort, then you can judge if code is any more readable with such a change or if more unwinding is needed.\n. Hi @FagnerMartinsBrack, and thanks for asking\n\nWhich code will be pasted 7 times? Can you give us an example? What does that code tests? And why there will be a problem with code maintainability?\n\nSo, as is probably clear by now, we want to test different transitions: goto(), prev(), \u01f9ext() etc... After each transition, we verify several css and other properties, the same assertions each time. So if I cannot use a loop, naturally the contents of the current loop have to be copypasted into a sequence instead. Specifically, we are talking about these lines from assertStepEnter():\nassert.equal( event.target, sequence[i].entered,\n              event.target.id + \" triggered impress:stepenter event.\" );\nassert.ok( event.target.classList.contains(\"present\"),\n           event.target.id + \" set present css class.\" );\nassert.ok( !event.target.classList.contains(\"future\"),\n           event.target.id + \" unset future css class.\" );\nassert.ok( !event.target.classList.contains(\"past\"),\n           event.target.id + \" unset past css class.\" );\nassert.equal( \"#/\"+event.target.id, window.location.hash,\n              \"Hash is \" + \"#/\"+event.target.id );\nand also these, from assertImmediately():\nassert.ok( sequence[i].entered.classList.contains(\"active\"),\n           sequence[i].entered.id + \" set active css class.\" );\nassert.ok( !sequence[i].left.classList.contains(\"active\"),\n           sequence[i].left.id + \" unset active css class.\" );\nThen the same has to be done for all assertions in assertStepLeave() as well.\n\nCan you please give an example of a simple change that would make it necessary to be done 14 different times?\n\nSay that for some reason, the active step would no longer have a present css class, but we instead want to call it current. This would be a simple change in impress.js. But for these tests you would have to repeat that change for every time you copy pasted those assertions.\n(Obviously, while developing tests, it would be impossible to have to do all the try and error with such an un-looped code, since the whole process of writing tests becomes 14 times slower for every edit.)\n. I'm sorry, I don't quite understand what you're arguing for or against.\nIt's an undisputable fact that to change something in 14 different places (let alone 24, etc...) takes 14 times more time than changing it in one place. I don't know why you insist on ignoring this fact, but since I am the person actually writing this code, I happen to care about it quite a lot.\n. New push.\nForgot to say in commit message that I renamed from index.html to core_tests.html, because when I put the tests into a separate .js file I didn't want to call it index.js. (as this could lead people it has special meaning for example within an npm context.) Ie. the new javascript file is then called core_tests.js.\n. For the contributing file, I would add:\n- While we may not have 100% test coverage in the near future, it is a pre-requisite for considering any pull request that the code being touched is covered by tests. If this is not the case, you're invited to start by adding such tests (testing the current code) after which you can propose your fix or new feature.\n- Pull requests should of course add their own tests testing the new or changed functionality, or in case of a bug fix, protecting against regressions.\n. See impress:stepenter event.. You can now reload a presentation by calling impress().tear() and impress().init().\nAlso, in many cases, if you've done changes to the DOM, you can just call impress().goto() to refresh the presentation.. You can now reload a presentation by calling impress().tear() and impress().init().\nAlso, in many cases, if you've done changes to the DOM, you can just call impress().goto() to refresh the presentation.. Just an update on this ticket. I was hoping forms would be fully supported in 1.0.0-beta1, but it turns out they're not.\nThere is a form plugin, which does one thing: call blur() to deselect a form element when we're leaving a slide. However, it turns out it's still the case that if you for example type 'p' into a text field, you'll end up opening impressConsole :-/. See mouse-timeout plugin in master.. FYI, based on this idea, I've implemented a more generic mouse-timeout plugin in my repo. It supports hiding mouse cursor, but also hiding other things.\nThe README has the details, let me know what you think.\nCompared to this PR:\n- The feature is still optional. It now depends on user writing CSS for the body.impress-mouse-timeout selector. It does not, however, add any data-* attribute.\n- I omitted the check for whether presentation is in full-screen mode, since IMO hiding the mouse cursor is ok to do also in a normal window. However, following the same style, it would be easy to add a separate is-fullscreen plugin, that would set a body.impress-is-fullscreen class when the window is in fullscreen mode.\n. mouse-timeout plugin was merged to master. I had a need for this for my impressionist project (an impress.js editor). It was surprisingly easy, almost like a single line change (plus some refactoring) to impress.js core. Committed to my fork here:\nhttps://github.com/henrikingo/impress.js/commit/d8f21f303e604374177d9c53edb1c381a66a5d2a\nI'm glad I could \"accidentally\" stumble into implementing this much requested feature!. Above is now merged to master. If you made changes to the DOM, calling goto() will now redraw the presentation.. FYI, in the plugins I've created, this is now possible with the stop plugin.\n. stop plugin is now merged to master.. Hi\nI have now implemented a pre-stepleave api that includes the ability to change the next step to move to (including not to move anywhere), or to change the transitionDuration. See goto, skip and stop plugins for examples using this api.\n. Above mentioned plugins are now merged to master.. I've merged the plugin API and continue to work at my fork, http://github.com/henrikingo/impress.js. Hopefully we will see it land in main impress.js repo in the future.\n. I don't intend to elaborate on it much in public, but the short version is that I don't find your input or reviews very useful, rather they were holding back progress for weeks and months. Since nobody else commented, it was time to close this. I've had a private discussion with Bartek to verify the API matches his original intention, which of course it should too, since it is just generalizing the navigation plugin that is already in impress.js since many years.\nI will continue to develop impress.js in my fork, and I hope you can pull from it as you have time. (There's already a lot there.) But I won't do PRs or reviews any longer.\n. Hi @vorpalvorpal \nI'm happy to tell you, that we're currently working on merging my work into the dev branch of impress.js repo. (This is mostly just to allow Bartek and Fagner to read up on it, the repos themselves are not diverged, so there's not a lot of actual merging work.) Once done, the dev branch will be merged into master. I estimate a couple a months until that actually happens. Please continue to use my repo until then.. Shift+Tab now works in master.. Hi ahainen\nFor most practical purposes, bartaz has already provided you with the workaround most of us used with much success.\nSince you asked for a feature, I just wanted to mention that what you ask for would be quite easy to implement. In my fork of impress.js I've implemented a plugin framework to enable adding such features in a modular way. I could imagine a simple plugin which would allow you to specify the next slide to move to. So if you had 15 slides, and slide 16 is your background, you could do something like:\n<div id=\"step-15\" class=\"step\" data-x=\"...\" data-y=\"...\" data-next-step=\"step1\">\n...\n</div\nJust wanted to say this to advertise how easy it is. But, you'll probably get much of the same effect just putting your background elements last and stopping before you get there.\n. I would argue getting the current step element is well supported in the current API. If you need to know the current element, you can do one of two things:\n- getElementById(location.hash) (where, location.hash is the id)\n- listen to the impress:stepenter event, which has the new step element in event.target. (Then save it in your own variable for later reference.)\n. As I'm maintainer now, I'm closing with reference to my previous comment on how to get the current slide nr. Also see progress plugin that does show current slide and total nr of slides in a progress bar.. Points 2 and 4 should be taken care of in master now (one way or another). Not quite sure what you meant with point 3.\nI'll close this, I'm about to open a series of new testing related tickets anyway, based on the new state of the codebase.. Hi @ladenise \nThe jsfiddle still gives errors. But as it happens there is now a cube demo in impress.js/examples too. Can you check whether same problem happens on this one or not: https://impress.js.org/examples/cube/#/step-1. If I follow correctly, similar feature is now implemented by the autoplay plugin.. Hi @yarnball!\nAll of those are in a github repo, here: https://github.com/henrikingo/presentations\n(If you have further questions or comments, feel free to use the issue tracker for that repo.)\n. I guess situation is much simpler now compared to when this ticket was opened, so I will just state the guideline here and close this ticket: Going forward, I will review all PRs. \nI will use both rebase-and-ff and squashing when convenient, time will tell if it's always meaningful and practical.\nProject will follow meritocracy, so when we hopefully get more contributors now, those that show a sustained interest in contributing, can then get responsibility to be reviewers in the areas they have contributed to and are intimately familiar with. (If we get that far, writing down some common guidelines, including about coding style / structure and so on, may be needed.). Not needed for now, see #588.. This patch no longer merges cleanly, closing. \nI also updated the wiki page to say that the roadmap was largely achieved!. Hi @bartaz / anyone\nI've recently been thinking more about the fact that impress.js actually supports multiple presentations on a single HTML page. While this isn't really covered in any documentation, the code clearly supports calling impress(\"other-root-div\").init().\nI was just wondering if you have ever used, or are aware of anyone ever actually using this capability, and if yes, what would it look like? Is there a link to such a presentation?\nIt seems to me a presentation with multiple root divs would cause each of the presentations to show the active step towards the viewport? The Navigation Events plugin at the end of impress.js would register event listeners once for each root element, so that when I press space, each of the initialized root elements will move a step forward \"together\"?. Thanks Fagner!\nThat roughly what I was asking for. (I'll leave this issue open for a while just in case someone has something to add, which would be interesting to know.). I don't think this is the same as #81. After all, that just adds granularity to navigate a single presentation.\nWhether this is important, I don't know. That's what I was trying to understand and get input.\nI don't see that there's a specific action for now, this is just a request for comment type of issue. If it's ok with you, I'd like to keep it open for a couple more weeks, but you could ignore it from a backlog point of view. I'd close it eventually.. Hi all\nSince this is a popular feature request, I have implemented substeps in my fork of impress.js today.\n\nDemo\nREADME\n\nI also want to note that I was aware of the many other implementations of this feature request, but since my fork of impress.js uses a plugin framework to add new features, none of them could have been used as such.\nPerhaps the major functional difference in what I ended up doing is that the plugin only sets/unsets a CSS class substep-visible, and the act of showing or hiding a substep is left to the author of the presentation by way of using CSS. (Same philosophy is already used in some other plugins, such as mouse-timeout.). substep plugin is now merged into master.. Hi @CarlosAyala \nI'm afraid nobody here is familiar with Ionic2, so we won't be able to help you.\nDid you see the documentation file? I hope it's of some help.. Hi\nI hadn't announced this anywhere yet, but in the spirit of sharing, I just want to mention that I have actually implemented this kind of teardown functionality in November. (It was one of two outstanding feature requests I hadn't done earlier.) The work is done in my fork in a series of commits starting with this one. (Mechanism for cleaning up changed attributes is still kind of ugly, but I was able to finish a first working version.) Code structure in my repo is different from upstream impress.js, but the general idea would work and can be copied.\nAs you can see, the functionality is definitively non-trivial, and I would agree with @FagnerMartinsBrack it should not be attempted without having sufficient test coverage first. (Not just testing this new feature, but good coverage in general.) In my private fork I've taken the liberty of making a leap with new features while leaving creation of more tests for the future. (I have more tests than there's in upstream, but most new features don't yet have any.)\nI would also argue it is too much new code to add within the current single file that is impress.js.. impress().tear() is now supported in 1.0.0-beta1.. It's not scalable to translate code comments to every language like this. I propose you'd simply translate impress.js to Spanish in your fork, and we could link to such translations from the README and/or wiki.. Hi @ArtNous \nCurrently there is no framework for translation support. I don't know if we want to introduce one either, but if we did, for sure it would be something very minimalistic. There's a design goal that impress.js remains self contained, so we don't use any external libraries like jquery, underscore... anything.\nThat said, impress.js itself doesn't really show that much text anyway. (There are a few UI buttons now, but that's about it.) Perhaps more interesting would be to translate DOCUMENTATION.md, README.md and so on. And of course the content - and maybe even code comments - of the demo presentations too.\nIf that's what you wanted to do, I recommend you simply fork the impress.js, and translate those texts in your own repo. We could then link to this Spanish translation from the wiki.. Closing for lack of response. If you have further questions, please reopen this issue.. Hi iamvidge\nTo be clear, if you have existing PowerPoint slides, and would like to somehow convert them into impress.js, that will never work.\nIf you want to easily create some simple rectangular slides, maybe you want to look at this demo presentation in my impress.js fork:\nhttp://henrikingo.github.io/impress.js/examples/classic-slides/\nhttps://github.com/henrikingo/impress.js/tree/myfork/examples/classic-slides\nIn particular, it includes things like Markdown support. And yes, that was inspired by Hovercraft, which I liked, but now you don't need an external tool, rather it is supported in impress.js itself.\nI'm now actively working on merging the above into the official impress.js.\n. Hi @CountZukula \nYou seem to be fully capable of doing your own css, but regarding the alternative of putting (background) graphics in a separate step, which has to be skipped during navigation, this is in fact an existing feature request, and I have implemented it in a fork:\nhttps://github.com/henrikingo/impress.js/tree/myfork/src/plugins/skip\nAs you say, the benefit here is that the impress.js framework will do the positioning for free. Otoh, I don't see that it would necessarily rotate (flip) the images as you're now doing.. Hi @CountZukula \nIs this issue still relevant, or did you solve your problems?. Hi @fin-ger \nThis is an interesting study you've made. And indeed it seems vw and vh would be very useful units for creating slide shows, since the idea with impress.js is to scale contents of a slide to match screen size.\nI think one question I have from reading your above entry: It's possible in impress.js, that you will see content from other slides in the background of the current slide. Example: http://impress.github.io/impress.js/#/its-in-3d They may have a different scale (so different size). How would content on such a slide scale, if it was using vw and vh?. Thanks for looking into this more. The limitations of scaling are annoying users regularly. (As you can see from above referenced issue about scaling SVG.) It would be great if there was a solution. I think your results are encouraging, although it is not clear to me if a solution along these lines will be feasible to implement in impress.js in a backward compatible way? (I'm really a backend developer - what you're doing is definitively stretching the limits of my knowledge.)\n\nWe have to be careful on which DOM element we apply the transformation. What we don't want is one big framebuffer texture that scales all slides as this will consume huge amounts of VRAM which may not be applicable on all PCs. Instead we want multiple smaller framebuffer textures that get updated independently (e.g. per slide).\n\nIsn't this what impress.js currently does? And if we want all slides to be potentially visible during a presentation, isn't it logically necessary to re-scale all of them all the time?\nThis is the reason bartaz has been hesitant to officially support it on phones, because it could easily run out of RAM. One patch proposed a solution (for mobile devices) to only show the previous, current and next slides to limit RAM consumption. For more advanced presentations, that want other slides to be visible - such as in the background of the current slide - this is quite limiting of course.\n. HI @fin-ger \nCool, thanks for sharing. I will try your solution at a later point, as I'm very interested in solving this issue (one way or another).\nRelated to solution requiring lots of RAM, kind of related is the mobile plugin, which allows you to display: none all but the current, previous and next slides. Of course, that's not what you want here, because you'd probably want some background slide to always be visible. But you could then use additional CSS (div.background) to make that so, and hide the ones you don't need.\nNote, it could also be useful to know that impress.js sets a class on body element, which has the name of the active slide. For example, when active slide is \"step-1\": body.impress-on-step-1.\nWe're working on merging my stuff into impress.js repo, so expect the mobile plugin to show up some weeks from now.. Hi @fin-ger \nThanks for your work on investigating this issue. Partly thanks to following you, I've found out a way to get non-blurry background images also with current impress.js. Here's a demo I did to explain how to make a non-blurred background and the pro's and con's of both ways: http://openlife.cc/blogs/2017/october/impressjs-howto-slides-over-background-image\nAs you've discovered, having a large background image that's also sharp, will use up HUGE amounts of RAM. In fact, images often failed to load for me. So I'm not sure that we could switch to such a solution in impress.js in general, rather it is better that the user use their own CSS to achieve this if they want to. This way they can also manage when they want to consume that much RAM and when not.. Hi @naraesk \nSomething like this is now supported in master branch. Thanks for a great suggestion!\nDemo presentation: http://impress.github.io/impress.js/examples/2D-navigation/. Hi @mvanroon \nDoes your bug spefically happen on a touch screen? As of 1.0.0-beta1 we now use swiping instead of tapping on touch screens, so this issue should be resolved. Can you please confirm, and close this issue if yes.. Closing for lack of response and based on hoping my guess above is correct. If this still happens, please reopen.. Hi @mvanroon \nThanks for this fix. Unfortunately - or fortunately? - the code that you change here is all gone in the dev branch, which will be merged to master in the coming days. It uses swiping to navigate slides instead. (See https://github.com/impress/impress.js/tree/dev/src/plugins/touch)\nI willl close this PR.. @ashnur Can you clarify once more what you mean with this issue. Can you give a code example of how you intend to use impress server side?. Ah right. Must be old age or something, because I read it as \"bower\" and it was hard for me to understand where we're going this. Now this makes much more sense! I edited the title to a hopefully more descriptive one.\nAnd no, while I've seen the use of require() client side, I did not know it was called \"browserify\".\nSo, back to your proposal. Is there a way to add a browserify-style export when used via a require, while of course keeping current behavior for current user base? . Hi @gabriellluz \nWhen impress moves to a step, it will trigger an \"impress:stepenter\" event. Correspondingly, for the step that was just finished a \"impress:stepleave\" event is triggered. You can catch these events in JavaScript and use them to play and stop media in your presentation.\nimpress.js also sets CSS classes to the div elements that are steps. The active element gets two classes: \"active\" and \"present\". I don't know if you can use CSS to manage video playback though.. A substep module is now merged to master.. As the key navigation code is now a plugin, I feel the issue from the stackoverflow question is now sufficiently addressed. I've also responded on stackoverflow.\nThere could be other, more specific further steps in this area, such as allowing the user to specify non-standard key-bindings. If such is desired, please open new, more specific tickets.. A few comments for discussion, beyond what the commit message says:\nPerhaps the debatable thing where I have deviated from upstream here is the embedding of qunit.js and syn.js into the repo itself. (6881 lines) At the time, I wanted to avoid introducing a dependency on node/npm. As impress.js is purely client side, and also we had this desire to keep the repo small and standalone without dependencies on other libraries. (Primarily runtime, but I considered that also when doing testing.) Also, at that time it still wasn't settled whether one should use npm, bower or god knows what for client side javascript projects, so it felt meaningful to just keep it simple and avoid the question. \nOnce karma and linting is used, we of course need npm and node anyways, but I decided to keep this approach so that it is still possible to develop and run tests simply by opening qunit_test_runner.html in a browser.\nI don't have a strong opinion either way, but the above was my subjective preference. It's reasonable to say that qunit.js and syn.js should instead be consumed via node_modules.\nAs mentioned in commit message, the testing setup is different too. Upstream uses just a simple inline HTML in test/bootstrap.js, but this isn't scalable for adding more tests. qunit_test_runner.html instead will load any html file into an iframe, and tests are written such that they run outside the iframe.. > Is moving qunit to npm achievable in this PR or does it add significant complexity?\nWould have been trivial, if only I would learn to remember the use of \"proxies:\" section in karma.conf.js. But now I added a commit where both qunit.js and syn.js are removed from the repo, and only used as node modules. I will squash the commits when discussion is finished.. No rest for the wicked...\nBasically, back in 2015 you were saying you wanted core to remain small and additional features be plugins. I was waiting for you to elaborate, but then realized the end of impress.js already is a plugin. So I've just moved that code out to separate files under src/plugins. Now I'm excited to finally hear whether this is roughly what your vision was?. > I'm not approving this PR yet (to keep discussion open in comments for a bit), but I don't see anything blocking at the moment.\nIs this ok to merge soon, or are you still going to comment on something?\n(Beyond the unnecessary declarations of window and document, which I can remove.). > In future branches not to make you feel blocked on not getting answers/comments - when PR got approval already, just merge it once you feel you addressed all the comments that you feel needed addressing. Are you ok with such process?\nYes and no :-) As we discussed at the start, you are the creator of this project, and I'm really glad you've stepped up to make these two reviews. But once you feel you've done your part, and want to step aside again, there's nobody else that has written as much impress.js code as you, and me second. So I'm happy to receive comments from anyone in the community, but I don't intend to wait for approvals from anybody else than yourself.\nAs for next steps, I think these two PRs were the foundational ones, and it's great that you were able to confirm you approve of the direction they set. The next two may be somewhat interesting as well, and I will give you some time to react to them, just in case you want to. The next two upcoming PRs will be:\n\nshared functions in src/lib. (Not plugins, rather just utility code shared across everything and called synchronously, not via events.)\npre-init and pre-stepleave plugins. These types are under src/plugins, but executed synchronously before their respective events happen.\n\nAfter those two it's just lots of plugins and some new demo presentations to showcase / document / test new functionality. Reviewing all of them might be boring to you, but I'll shuffle them through as PRs nevertheless. It will help everyone else too to follow what goes on.\nWe're still merging to the dev branch anyway. So once everything is merged, I intend to post an issue with a proposal for how and when to merge that into master, that people can comment on.. I have never run the karma.conf-sauce.js in my fork. I was surprised to see it pass when I submitted the first PR, so didn't remove from circle.yml. We of course need to look into it later, but the short answer is I have no idea.\nI can't see the output of the failing stage above. It just spins forever.. Ah, I just wasn't logged in.\n02 10 2017 20:56:12.011:WARN [Chrome 53.0.2785 (Windows 10 0.0.0)]: Disconnected (1 times), because no message in 10000 ms.\nChrome 53.0.2785 (Windows 10 0.0.0): Executed 0 of 2 DISCONNECTED (10.156 secs / 0 secs)\n02 10 2017 20:56:12.013:ERROR [reporter.sauce]: \u2716 Test Disconnected\n\nI vaguely remember that this happened to me in karma.conf.js as well, and I increased a timeout to get it to work: https://github.com/impress/impress.js/blob/dev/karma.conf.js#L67. I will of course make sure tests pass. So far all PRs have been green. It seems CircleCI doesn't send me any notification of failing builds even if I'm now an impress.js maintainer. Could you fix that?. I think a design goal is not to pollute the global variable space with anything else than impress() function itself. So from that point of view, the answer would be no.\nBut why do you need to read them? I don't think the defaults have ever changed? Also, impress.js is versioned, so if you know which version you're working with, you know what the defaults are.\nYou probably know this, but for completeness I'll point out that those values of course can be set in <div id=\"impress\" data-height=\"\" data-width=\"\" ... where you obviously can read them via normal DOM methods.. > I wouldn't encourage people to read generated attributes from the DOM unless they are documented.\nI didn't realize you had not documented the attributes to the root element. I'll make a note to do that in the future (unless of course you beat me to it). Note that some of these have been, for example, documented in the index.html demo presentation.\n(To clarify: These aren't generated DOM attributes, rather data-* attributes used for input.). > The OP is requesting\nAh, sorry. I read the thread as if you were responding to my comment.. To second @FagnerMartinsBrack here: did those defaults ever change in the history of impress.js? Do we have any reason to think they would do so in the future? Since they're just constants, you know their values already.. @FagnerMartinsBrack comments:\n\nI see that there are a lot of changes and no testing. Can we at least build test coverage for the new code if we don't think it's worth to spend time building coverage and refactoring the existing ones?\n\nThat is a correct observation. As you may remember, in 2015-2016 I wrote some tests for core impress.js, but they were never merged upstream, so I gave up on writing new tests in favor of speeding up feature development. As I was working alone in my own fork, the risk of doing so was a lesser priority. Now the object of this work is to merge 2 years worth of code back upstream, none of which has test coverage beyond what was already merged in my first PR to dev branch. (On the bright side, and kind of because of this, there are several new demo presentations, which indirectly act as testing the new features. None of them test impress().tear() though.)\nThe history that led us down this path is unfortunate, but the situation is what it is. Test coverage will of course have to be added eventually, and now that I'm back as maintainer in impress.js upstream, I do intend to work on that in the future, since I know I can commit that work. But will not do it as part of these merges.\n\nCan we extract and unit test some parts of the functionality?\n\nYes, obviously, but this series of merges is focused on just merging, no new code.\n@bartaz comments:\n\nI don't have bigger issues with this PR, but I'd like to hear your comments on 'garbage collector' - it's naming and API.\nWould it be possible to rename it now to something less confusing?\n\nThe concept and naming of garbage collector comes from Symbian :-) It had a similar mechanism where C++ classes would manually register themselves to a service that would then ensure objects are deleted when application closes. (I think all apps were running in the same process, or something else weird, that caused this kind of unusual need.)\nI think the name can definitively be changed, just couldn't think of a better one myself. Otoh, a benefit of the current name is that \"gc\" is a nice and short name for a library that gets used everywhere. In any case, if you can propose a better name (that more clearly describes the library) then I would make such a change at the end of this process, once all plugins are merged to dev branch.\n\nCould we limit the list of function it has in API to make it more straightforward?\n\nNo.\nAs for naming of the library methods, the appendChild and addEventListener are intentionally similar to the same DOM method names, and IMO should stay like that. The push* equivalents are needed for cases where DOM elements are already created by someone else, and you just need to register them for deletion later, so yes, they are needed.\nThe addCallback() method can be renamed to addTeardownCallback() if you prefer, but I would argue that once someone is familiar with what the gc library does, then gc.addCallback() should be quite clear?\nIn fact, as mentioned in the commit message, I feel that there's rather a need for more methods to the API: a pair that would remove/reset an attribute, not the whole element.. > While I understand the reasoning behind having different methods in this API: low lever push*, convenience DOM equivalents, and 'fallback' addCallback and I understand practical need for all of them to cover different use cases from API 'cleanness' point of view it feels wrong to me to mix them in one 'gc' API.\nI'm glad to have found someone who's taste is even more minimalist than mine!\n\nSo maybe the answer is not in reducing this API, but documenting it and maybe changing the names of the methods to make them more clear?\n\nI admit that documentation for this is maybe a bit sparse. The gc stuff was a lot of work, and it took several commits to move all plugins to using it, and once I got everything working, didn't really spend time documenting it as much as some other parts. Adding better documentation is actually something I CAN do within this PR (just like I've already promised to add impress().tear() documentation).\n\nOne little suggestion - I like how push* methods use the similar naming and distinguish the 'low-level' gc methods. Maybe addCallback should be pushCallback as well?\n\nYup, this is a great suggestion and easy to agree with. In addition to minimalism, I'm a big fan of consistency in naming. \nBtw, in case it wasn't obvious already, the push* naming is because gc builds a stack, and when you call teardown, it correspondingly pops items in last-in-first-out order.\nBut I'm afraid this is another thing that is better done later, once all the code is \"on the same side\" of the big merge.\n\nIMHO this should land on dev ASAP so that we can keep looking at the next bunch of code and have a better grasp of how it works.\n\nThanks both of you. Once I write some better docs, will merge later in the week.. Created: #657 #658 #659  #660 #661 #662 #663 #664 #665 #666 \nClosing this issue.. Adds a pre-init and two pre-stepleave plugins. The concept is already described in the README committed earlier.\nping @bartaz . I did the minor fixes in the new commit. Let me know what you want to do about addPreInitPlugin and addPreStepLeavePlugin.. Sorry, thiis is against master. I'lll close and create a new one.. > lets give users an option to support mobile as they want\nMy thought exactly.. Cool. I added a code comment to make the point that swipe() is intentionally not documented in DOCUMENTATION.md for now.. Based on earlier encouragement, merging this and moving forward to next PR (coming soon). Hi @vorpalvorpal \nIn my fork, which is in the process of getting merged, I've added exactly that: https://github.com/henrikingo/impress.js/blob/myfork/src/impress.js#L272\nThe next step (the actual div element) is available in event.detail.next.\nThere is also a new api for \"prestepleave\" events, where a plugin gets executed before the stepleave happens. Such plugins can also set the event.detail.next to another value, in which case the transition will happen to that step instead.. Hi Murielle\nElements outside of steps are not clickable, because you have probably copied the CSS from the impress.js demo: https://github.com/impress/impress.js/blob/525e4fc5f2c2da28323672ea7a41ac574475819f/css/impress-demo.css#L685\nYou can remove that line, or add a new one for the element you want to click on and set pointer-events:auto.. For now, using the impress-demo.css is the most common starting point. I'm in the process of adding a few more examples in the next few weeks.\nBeyond what you find in the github repository, there's also a wiki page: https://github.com/impress/impress.js/wiki/Examples-and-demos\n\nI hope my english is understandable... :-D\n\nI think none of us are native English speakers (?), so you're fine!. Hi @tkimnguyen \nThanks for these fixes. Some of these typos still remain, but the patch no longer merges cleanly. Would you like to submit an updated patch and I'll make sure to merge it.. I think you may have merged the current master into the patch instead.\nI'll close this PR and feel free to create a new one from scratch. I think 2 out of the 4 typos are still in the README, so it would definitively be great to fix them.. Hi @Iguzzon\nThank you for your patience while I've been busy merging my own work upstream, and thank you also for already rebasing onto the new state of master. I like the idea of running karma with the browser in headless mode, especially since the qunit messages aren't visible in the browser window anyway.\nNow that I added Firefox into the mix, it's kind of a shame to have Chrome in headless mode while Firefox would still popup. It looks like there's not an NPM plugin to run firefox headless in karma, but it would be simple to add a few lines to get there anyway: https://github.com/karma-runner/karma-firefox-launcher/issues/76\nAre you interested in trying if that works?\nThanks also for upgrading the other modules to current versions.. Thanks for the update. To clarify, do you also want to try and make Firefox headless by following the example here: https://github.com/karma-runner/karma-firefox-launcher/issues/76\nIf not, I can merge what you have here and file a followup ticket for the firefox part. Just let me know.. FYI @maxwell-k: looks like the conflict resolution breaks this PR and it didn't merge after all. The only thing that changed in the merge are some versions in package.json. It had previously passed a CircleCI build.. > We probably need to stay in a beta for some time in order to be able to receive enough feedback.\nThat's precisely my plan.\nI think the other question is whether we would ask people to test the dev branch, or just merge dev to master and label it beta for a period. My proposal is the latter, since it was always the case that development happens in master. If users want a stable checkout, they should checkout the tagged stable release.\n\nAny chances we can have the CircleCI failures sorted out before doing that? https://circleci.com/gh/impress\nIt could also be because the code is in a different branch. My CircleCI knowledge doesn't go that level.\n\nI'd love to but I can't do anything about it when the saucelabs tests don't run when I post a PR. I've been waiting for you to fix that, afaiu you have the keys and rights? For now, all my PRs were always green.\nIf you're not able to do that, my plan is to comment out the saucelabs test from CircleCI until this is solved. If it worked, I'd love to fix it, but as long as it doesn't, I would rather spend my own time - for example - writing more tests, rather than figuring out how to run the small amount of existing tests with the more browser versions.\nI'm sure the current failure is something simple, simply happening because karma.conf-sauce.js wasn't updated the same way that karma.conf.js. Probably if you looked at a diff of karma.conf.js in master vs dev, that would already reveal what the needed fix is. But as long as I can't test it, I can't of course do anything.. Thanks for sharing the keys. As I suspected, it was just a matter of applying the same changes as I did to karma.conf.js.\nGood timing too, thanks for being responsive. MongoDB twice per year allows us to spend 3 days hacking on personal projects, which for me was always impress.js. This final merge is happening during those 3 days. (Today being the last one.) Just felt I should credit my employer for letting me do this.. Ah yes. We should absolutely work with them once this merging is over. Github also now allows to label tickets as good first ticket. Several items in #626 will be good for that.. > You can also use a git repository as an npm dependency: https://docs.npmjs.com/files/package.json#github-urls\nSure, but not all git repositories contain a compiled, ready-to-use js file. So \"npm install\" still wouldn't get the user something they can just use. \nBut like I said, node/npm is not required to use impress.js, so this is in any case not an option.\n. Given that at least one of you commented, and neither objected, I've went ahead and created the repo. This concludes the last remaining step in merging my fork back upstream.. > Can you create a PR for that merge and leave it open so that the diff can be clearly exposed?\nNo! Surely you're joking? The diff is the aggregate of everything you reviewed in the past PRs, 2 years worth of code. If you want to review, go back to the PRs I've sent in the past weeks. All merge-* branches are still open.\n\nOne week may be too soon given the number of changes and the lack of test coverage, can we make it at least one month?\n\nThere's no rush. Of course, that would imply nobody else should merge anything to master either, but given that this isn't happening anyway, not a huge problem.\nThat said, what are we worried about exactly? Stable releases are tagged, so if users want stable, they should use that. If they use master, they probably want the latest and greatest, so why not finally give them that? Note that the new stuff in the dev branch is not new or untested code any more than master: it's been in my fork for 2 years and has lots of users already.\nAnd conversely, if we wait longer, what do we gain? Do you intend to actively test the dev branch? Does someone else? I can wait, but what am I waiting for?. > As mentioned before, the idea was to review the whole dev branch once it finished being copied over.\nYou must have misunderstood. Those pull requests were pull requests created specifically for the purpose of review. You participated in reviewing them. Now review is over.\n\nThose PRs were not created with an atomic concern,\n\n\"atomic concern\"? Those PRs were created in the format requested by Bartek, and I spent considerable amount of work to do that so that he could review them. If you want to review smaller units of work, you're free to review the almost 200 commits in my fork that are the true history of this work. In fact, this request for prolonged review is particularly outrageous coming from you, as you have been well aware of my fork, and as maintainer it would have been your job to work on getting those features merged upstream, but you did not do that.\nLuckily, now I'm active maintainer of impress.js, and progress will not be blocked anymore. I have now merged the dev branch, which means 1.0.0-beta1 is released, and also this unblocks master branch so I can now focus on another PR already in the queue, rather than having it blocked by this discussion for a month too. This will be modus operandi going forward.. > When you were contributing to this repo, you've never implemented a single suggestion I've offered\nThat is not true. Eventually however I stopped implementing them, because it wasn't leading to code being pushed to the repo. Of course, it is also true I disagree with most of your suggestions both now and then. \nSo what has happened instead is that Bartek has come back to review and approve my PRs, and thanks to this now my work is finally merged to the upstream repo. Also thanks to this, I'm now active maintainer, so going forward I will be processing pull requests more expediently and hopefully repo will be much more active!\nThe code that was discussed in this issue is merged, so please don't reopen it anymore. You can continue to comment without reopening. But I will be focusing on working on code, and I recommend the same to you.. Just a short note to anyone who might read this and wonder what happened. Above thread caused me to write Bartek in private. There was another email between Bartek and Fagner, that I was not a party to.\nBetween all the distraction, Bartek's comment also included some valid proposals and questions. However, we agree it is not worth continuing this thread. So rather than answering to those here, future steps will become evident in their respective issue threads and commits.. You're correct. Also, in general you wouldn't want to use any DOM operation to find the current step, as it is available in event.target!\nThanks for pointing this out, I will post a fix shortly.. Hi @amdrewnguyen \nI now pushed a commit to dev branch that fixes the DOCUMENTATION.md. (Will be merged to master shortly...)\nHopefully this helps you do what you're doing the way that actually works: https://github.com/impress/impress.js/blob/dev/DOCUMENTATION.md#impressapi. Hi @amdrewnguyen \nWhat you discuss in #641  is a documentation problem. The code in itself works correctly, and in any case we would be very conservative about changing the timing or semantics of events at this point. I will reject and close this pull request and fix the documentation later today or tomorrow. Hopefully with correct documentation you will be able to get your presentation done.. I should add that:\n User can navigate to another slide via a link, so the back button of the browser is not the same as left arrow\n As of yesterday, the goto plugin allows to define non-linear navigation, so that for a given slide, it is no longer obvious what is the previous or next slide.\nEven then, I do agree polluting the browser history is annoying. In particular, again as of yesterday, you can now create presentations that autoplay and restart from beginning after the last slide. Leave such a presentation on for a few days and...\nSo it's not obvious what is the right solution here. But thanks for filing the issue. Hopefully someone can think of a good proposal.. Thanks!. Hi @souravsaraf \nThat would indeed be a feature useful to many.\nPowerpoints nowadays are XML files and the file format is openly documented. So in theory it would be straightforward to write a converter that takes a pptx file and outputs an impress.js HTML presentation. In reality it's bound to be a lot of work. But that's all, it's just work.\nSuch a tool would definitively live in its own git repository, but until that happens, I'll leave this issue open so people can see it here.. Well, not really, because the whole point of how impress.js works now is to follow a pre-determined sequence / animation. There are several options in the spirit of what you're asking though:\n\nIt's common to create \"empty\" steps for the sole purpose of zooming in or out in an area that shows content from other steps. In fact, the #overview step in the main demo is an example of this. In the 3D rotations demo I used 2 separate overviews to show the content in 2 different perspectives.\nCombined with the previous, note that the goto plugin now supports non-linear navigation paths, and of course using the UI toolbar you can also jump to any step at any time. This allows you to jump to pre-determined positions at any time, but of course not zooming and panning arbitrarily.\nTo help me create new presentations, I have in fact also built an editor that allows to move a \"camera\" in 3D space: https://github.com/henrikingo/impressionist There's a demo video in the README there. The impressionist camera plugin could in fact be copied into a normal impress.js presentation if you wanted to use it just in a browser, without all the Electron and TinyMCE stuff.. Closing for lack of response. Please re-open if you have follow up questions.. @jorisvanzundert That's quite a nice concept already, and could certainly be useful when presenting!\n\n@zepadovani Haven't done this for a while, but from the impressionist repo you should be able to just grab js/impressionist.js and css/impressionist.css and use them in your index.html impress.js presentation. Of course, you'd probably want to remove plugins not related to the camera functionality, like tinymce.js, stepedit.js, loadcss.js... This can be done in build.js and then follow the README to rebuild.. Hi  @najamelan \nThanks for reporting this.\nAs for 1), this is a limitation or security feature of the browser. As you have noticed, after you allow popups and reload, it works fine. I don't know that there is much that impressConsole can do about this.\n2) This is indeed a bug. impressConsole should turn off autoplay, as the point is for those preview windows is to follow the main window. The other example presentations do not use autoplay and you should be able to verify from them that impressConsole works fine.\n3) This seems odd and shouldn't happen. Is there any other error message printed together with this?. As far as I can tell, the message \"Click here to open the presentation view\" does not come from impressConsole.js or impress.js. (Which is actually a bit confusing, as I can't explain how the browser would know you're looking at a presentation view.). I have seen it myself too, every time I need to allow popups. I just can't find the text anywhere in the code.. Ah thanks! There are several bugs now surfacing with impressConsole.js getting more exposure. If nobody beats me to it, I'll work on them after we survive holiday season.. Required some additional work to actually make the button clickable. Thanks for filing this. It always bothered me why the button did nothing useful, then I forgot about the issue as I got used to it. But now it's finally fixed!. Adrien, could you report the second comment as a separate issue. Probably somewhere I have hard coded 'impress', which is wrong.\nI was planning to push a new npm later, after I fix the issues that have already been reported against 1.0.0-beta1.. Hi @shinenelson \nI think that's an excellent proposal! Please send PR.. Note: If you're actually using this feature for something useful, please speak on this ticket and explain how.. @vorpalvorpal If your intent is to have multiple presentations on a page, but only use one of them at a time, I can see how that could work and that could still be supported.\napi = impress(\"sub-preso-1\")\napi.init()\napi.next(), next()...\napi.tear()\napi = impress(\"sub-preso-2\")\napi.init()\n// etc...\n\n. Btw, did you notice the new mobile plugin. Hi @fumblehool \nGood news: This is already supported! You can define your mouse pointer in CSS, to make it look like anything you want.\nIn the demo presentations you find within impress.js, we use the cursor: CSS command to simply hide the mouse cursor during inactictivity: https://github.com/impress/impress.js/blob/master/css/impress-demo.css#L557\nIf you'd like an option where you'd turn this \"laser pointer\" on or off, or set its size, dynamically during the presentation, then you'll need some javascript. You could have a look at the toolbar plugin and some plugins using it (autoplay, navigation).. Closed with the assumption that using CSS is sufficient solution. If you have further questions or suggestions, feel free to reopen.. Well, the speaker command of course has its own navigation buttons. But for everything else, you have a point. It could be a good idea to render the toolbar also inside the speaker console. Would be interesting to try.\nFor media, I think there's definitively a need for a plugin to support media objects: start automatically when entering a step, stop when leaving, integrate with substep, and so on. (And even then, the issue of manually starting and stopping from the console is still valid.). Thanks for sharing the code.\nUsing canvas would be a totally different presentation software. For the speaker console, the main architecture to understand is that the pre-view windows are essentially slaves to the main presentation window. So clicking on the navigation toolbar in the preview window doesn't really do us any good - assuming we stay with current architecture. However, simply rendering a new toolbar into the speaker console, that would be wired to control the main presentation, just like the current navigation buttons are, is indeed an interesting idea.. Thanks. This looks cool.\nThere's no rush. I'd like to take some time to release a 1.0.0 version in the near future. This would in any case be merged only after that.\nThis thread now includes 2 different discussions. To take one step at a time, could you proceed as follows:\n\nImplement a plugin media and maybe a separate one for mediacontrols.\nHave the media controls integrate with the toolbar plugin, just like navigation-ui does. (Yes, this means they show up on the presentation side.)\nSeparately address the issue of making these controls available in the speaker console. My suggestion is that impressConsole will trigger an event impress:console:opened, with a reference to the opened window (consoleWindow) in event.detail. Then toolbar should catch this and render a copy of the toolbar in the consoleWindow.\nCreate separate issues, or in any case separate PRs, of each of the above.. > I did not completely understand what you meant with the media controls integrate with the toolbar plugin. My solution was a more general approach. Just control the media with the help of normal html5 controls, catch the video/audio events in one window and propagate them to the corresponding nodes of the other window (console -> presentation and presentation -> console).\n\nOk, that makes sense I guess. I guess that's what you said already, but in this case I'd still want to approach this with a more general solution. If you want media objects in the impressConsole window to be clickable, then why not the toolbar, links, etc... too? So basically anything that happens in the impressConsole iframe should be propagated to the main presentation window.\nAt the same time, the main window remains the main window and opening impressConsole is optional. Therefore it should in any case remain possible to control everything from main window, and events in main window must propagate to the impressConsole preview windows.\nI'm not sure having such bi-directional propagation of control and events is easy. (How do you prevent infinite loops?) But that's in any case my current vision for what the requirements are.. > Being able to play sound during transitions sounds like a good idea. Personally I would not use that feature (not my taste), but if someone likes to catch the audience\u2019s attention that way, why not. I find too much sound distracting from the real content.\nI think a plugin to play sound effects tied to transitions is something I'm sure will happen sooner or later. Sure, it will probably be annoying, but nobody is forced to use that.\nI would expect that to be a different plugin compared to the media plugin discussed here. (One plays media on a slide, the other related to transitions.). I've thought the same :-) Would make for a cool (new) plugin.. @lwhshugyosha Please just submit a pull request. (I assume you're familiar with github? If not, I'm happy to help...) You could reference this issue from the pull request.. This is a good and simple suggestion, and could easily be added to the rel plugin.\nI can see the use case where slides are positioned relative to their previous title slide. Making each \"section\" of a presentation positioned together.. Implemented by  #686. Yeah. This is a pull request, but not your changes.\nOn a quick googling, this document should explain the whole workflow that gets you to a proper pull request: https://gist.github.com/Chaser324/ce0505fbed06b947d962. I pushed this fix (in correct source file) and attributed it to you. Thanks for reporting this.. A media plugin was merged in #676 with some ideas from here.. Note btw that the repo has testing and linting enabled. You don't really affect existing tests, but you need to pass linting: npm run lint. The above check executes the commands from /circle.yml. I was not part of the decision, but if I remember correctly, the jquery style was selected and then we just follow that. (At least for one of the linters.). > Only polar.js file changed, other changes not to be pulled\nSorry but this is too messy to look at. When you're done with your presentation / whatever you're doing now, please submit a new PR with just the code actually intended for merging, so we can focus on that. I suggest you close this PR until then, but I don't mind if it's kept open, if you have some ongoing discussion.. Thanks for reminding. I had also forgotten to remove beta label from a few version strings in the repo itself, so did that now.. Ok, Google and StackOverflow are divided on this, so let's discuss here: Please let me know what you want in an npm package:\n1) Just js/impress.js\n2) also src/ and test/ (The argument for these is that someone might want to execute npm test module.)\n3) Also the demo presentations. Arguably they are documentation. (Note that extras/ will be empty, so in any case some slides under examples/ will be broken if included.). For historical reasons, js/impress.js is the \"dist\". Currently it is not possible to create a minified version, as I've used EcmaScript 6 in some places and buildify didn't support that. (#663). Ok. (2) is 4x as large as (1) and (3) was 1000 times! So I went with (2). It's now published!. Hi\nNot necessarily. This \"goto\" is just a refresh of the current slide. So it is not a transition between slides. It could even be 1ms to make it faster, but it seems half a second is classy.\nDo you have some particular example where you felt 500 ms is bad?. Hi Holger\nJust wanted to drop a short note that I got a bad influenza 3 weeks ago, so I've been on and off sick leave as I'm still not fully recovered. I look forward to working on your PRs soon, but will be away for several days still.\nhenrik. Hi Holger\nNext time when you work on this, could you take a look at new testing howto at #696. Would be good to get feedback from someone actually developing a plugin.. There's no specific functionality for it, but using regular HTML and JavaScript, sure. And, if you have a lot of content, loading it in parts is certainly a good idea!\nThe simple option is to just add a normal  hyperlink to the last slide, saying something like \"next section\" and pointing to your next html file.\nOn each slide transition, impress will emit an \"impress:stepleave\" event. You could add an event listener in JavaScript that detects when you're done with the last slide and loads the next html file automatically.\nPS: The mobile plugin actually offers related functionality. Not exactly what you asked, but worth mentioning.. The plugin has extensive documentation at the top of the js file. Several plugins do this and omit the README. That said, I'm not against moving that documentation to the README. I realize for example in github there's an advantage to doing that.\nAdding a demo under examples is a good suggestion. For example, adding a slide into classic-slides would probably be sufficient.. Also I have seen on some of my devices that the steps zoom to something really big during a swipe. Once the transition completes, the end result is correctly sized though. Is this the symptom you're reporting too?\nBtw, to force the fallback mode, you can nowadays \"unload\" impress with such  a link:\n<a href=\"#\" onclick=\"impress().tear();\">Fallback mode / Disable 3D</a>. For your point 1:\n\nFirst, I should note that the substep plugin just adds the class substep-visible to substeps. It's up to you as presentation author to decide what CSS you want to use to show and hide substeps.\nTaking as an example the Classic Slides demo, what you describe is actually how it behaves. More precisely, when you first enter a slide, the substeps are hidden, and shown one by one as you move to next. After this, they are visible. If you later return to the same slide, for example if the presentation loops around or you go back, then the substeps are still visible, but at the impress:stepenter event they are reset to not visible. This means you can see them during the transition to the slide, but at the end of the transition they become hidden.\nIt would be possible to hide them earlier, such as at the start of the transition. (You could write a short impress:stepleave event handler to do that yourself.) But this is how it works now. Note that hiding substeps earlier might create unwanted behavior for someone else, so I'm not sure there's some objectively right way to decide when to hide already shown substeps.\nThis behaviour should be as I describe on all browsers. I just tried with Firefox 59 and it happens there for me as well. (Note however that on some presentations #650 could cause Firefox 59 to render transitions differently, so that you wouldn't see this behavior.)\n2:\nSubsteps in the impressConsole slideView window work for me on Chrome 64.0.3282.140 as well as Firefox. The integration code is here: https://github.com/impress/impress.js/blob/c09ce88749f4b6467a701a629b97663b29f628f1/src/plugins/impressConsole/impressConsole.js#L223. Closing due to lack of activity / possibly your questions were fully answered? Feel free to reopen the issue if you have more questions about substep behavior.. Yes. I'm open to a PR.\nIn general impress and its modules only trigger events that were needed by some other module, but we can add more as requested.. If you set data-autoplay=\"0\" on a step, it should stop at that step. You can also just set data-autoplay=\"10\" on a single step, but not the impress div, and then it should stop on all steps where autoplay is not set (or zero)..     \nI don't understand what is unclear? Can you share an example of what you're trying to do but is not working.. Ah, sorry. I missed that your first question does indeed ask about substeps.\nRight, this is not possible. You cannot set autoplay time for substeps, they get it from the step they are part of. Support for substeps could be added, but starts to feel convoluted, I don't know if I like it.\nIn your case a simple workaround would be to just add an invisible step right after the one you want to stop at. Same coordinates. Then add data-autoplay=\"0\" to that.\nAlso, you can choose to not use autoplay at all, or set it to 0 for that slide, and just do it yourself in JavaScript:\ndocument.addEventListener( \"impress:stepenter\", function( event ) {\n    if ( event.target.id == \"your_special_step\" ) {\n        setTimeout( function() { impress().next(); }, 3000 );\n        setTimeout( function() { impress().next(); }, 6000 );\n        setTimeout( function() { impress().next(); }, 9000 );\n        // Nothing for 4th substep\n    }\n});. Yes! This was recently added: https://github.com/impress/impress.js/blob/master/src/plugins/media/media.js. Hi @xprilion !\n\nThanks for your contribution! I think the idea and code are roughly ok, but you need to make the code a plugin: https://github.com/impress/impress.js/blob/master/src/plugins/README.md\nFor name of the plugin I suggest: navigation-wheel\nAlso, instead of waiting for a fixed 1 second, it might fit better if you wait for the time set in data-transition-duration. (This is often 1 second, but user configurable.)\nLet me know if you need more help. I will close this PR now, but you can still use this thread for discussion. Please open a fresh PR if you want to submit the same code as a plugin.. Thanks!. You need to call impress().tear() to \"uninitialize\" impress. If some events trigger even after this, please file a more specific bug report.. Confirming and just to be clear, shift+space of course doesn't work on firefox either, as this is purely a logic issue.\nI merged #637. Please let me know if you have more issues with tests, I'm very interested in getting that aspect working smoothly now. Note that I recently merged an up to date https://github.com/impress/impress.js/blob/master/test/HOWTO.md. Also, as a first step, you should be able to run all tests by simply opening qunit_test_runner.html in firefox. (Chrome refuses to run it due to \u00edframe security policy.). Alright! First contribution for 2019 merged :-). Hi @Elisenda84 \nDoes the error happen only with your presentation? Can you view, for example, the impress.js demo just fine? If that's the case, then maybe it could help if you can share your presentation somewhere. Otherwise there isn't much anyone else can do for you.\nAlso, can you describe the error a bit more? Is it just the case that your browser exits? If yes, it's quite possible you have simply ran out of memory on the ipad. Maybe the other devices you have tested had more memory. If that is the case, then you could try to add this CSS to make your presentation a bit lighter: https://github.com/impress/impress.js/tree/master/src/plugins/mobile#example-css . Hi @abertranb \nIs your error the same as Elisenda84 is reporting?. Ok, so this one I would like to approach completely differently. Instead of thinking of the overview slide as a special case, let's do something that achieves the same but in a more general purpose solution.\nCreate a completely new plugin, which we may call accesskey based on the similarly named HTML attribute. Then, modify the overview step like this:\n<div id=\"overview\" class=\"step\" data-accesskey=\"o\" data-x=\"...\" data-y=\"...\">\n\nThen implement accesskey.js so that I can bind any letter to any slide I want.\nYou can, and should, modify the index.html demo and the presentations under examples so that their overview slide uses this feature.. Hi. Thanks for bug report.\nI have FF 65 (on Linux) and the link above shows diagrams just fine. Same with Chrome.\nWe can still leave this bug open, even if it is Safari only. But note that impress.js is not intended to work well on public websites. There's no attempt to support older browsers.. It's a good suggestion. For a proper implementation I believe it would be perfectly possible to do the same without introducing new CSS classes, just edit existing code to set substep-visible based on the link.\nNote also #720 which is a similar request for autoplay.\nBoth share the challenge that impress.js already uses the entire location.hash for pointing to the step id, and it's not clear to me that we can ever add to it in a backward compatible way, but maybe we could. A new hash format could be step=step-N&substep=ssid&autoplay=off. We could autodetect this new format by presence of = in the hash. (And & of course, but note that it may not be present if there's just one parameter.) Even this isn't entirely fool proof, because apparently HTML 5 now allows any character as element id. Otoh using = and & in the id isn't that wise, so we could assume most impress.js authors didn't do that.. > I find handy the use of a separate CSS class so I can add a different timer/effect to the images. Just a second after the subsptep is shown, but any alternative will be useful.\nThat's great if you like it that way. For a general solution I think simpler is better though.\n\nofftopic: Yesterday I was able to successfully use my first presentation made with impress.js!\n\nGreat! Congratulations!\nIf it's available online, would you like to link to it here? I would love to see what your code looks like in practice.. Shame. I did like this PR. Thanks for the effort at least, I do appreciate this kind of boring cleanup work.. Hi @mohe2015 \nOriginal message still contained TODOs, but is this now in a shape where you'd like me to test this and have a look?. Good suggestion. (And one I've heard before, but couldn't find a duplicate issue, so maybe it was email or elsewhere.)\nThis could be supported by reading an attribute and passing it to the markdown library. Proposed syntax:\n<div class=\"step markdown\" data-extras-markdown-dialect=\"Maruku\">\n\nThis is the place to add it:\nhttps://github.com/impress/impress.js/blob/97546a5536f762ff7948c771896723a48309c89b/src/plugins/extras/extras.js#L18-L52. I think I've tried to stay (mostly) within 80 character line length. In this case it wasn't necessary to have a line break, but for the longer explanations it is. I'm ok with not following such a rule though. You're correct impress.js certainly has lines longer than that.\n. I don't feel that one is significant at this point. The file is a work in progress, so wanted to leave a note for others to think about it, but it's not a blocker for going forward. To be clear: The tests work now. Ideally I would want to call impress().init(); inside a test, but it doesn't do that for now.\n. It's a placeholder for future tests. Given the discussion yesterday, I wanted to share what I have now. Oh, you're right, I should at least add a done(), so that the test finishes with 0 assertions.\n. It's a symlink to the filename with version numbers. I completely forgot there are Windows users in this world. Will remove the symlinks.\n. Working on your comments today.\nI started removing the newlines, but for the QUnit assert.*() functions I'm gonna keep the style as it was. The reason is that the last argument is the text that explains each assertion, kind of like a comment. It is of value to have those left aligned, rather than starting at an arbitrary position after all other arguments.\n. Still can't say I fully understand it, but at least I can call it inside a Qunit.test() now. (You'll see when I push later.) My theory for now is simply that some of the css classes aren't immediately readable in classList.contains()\n. Ah, now I got it. The \"active\" css class is set immediately in goto(), whereas \"present\" is set in impress:stepenter event handler. Moving the check for \"present\" to the test that checks event handlers.\n. Do you mean the beforeEach()/afterEach() functionality that is part of QUnit.module(). I don't think that applies here. Or it could, but depends on what the other tests do and what they need to clean up. For now, I'm assuming each test() block will do its own cleanup.\n. Ah, you mean testStart()/testDone(). Still, it's not obvious at this point that using that will be useful.\n. This didn't really remove the event listener. Fixing in next commit.\n. I suppose it was just because this is internal helper. If you want to suggest a more proper way of encapsulating this function into some helper namespace, I will be listening :-)\n. That's not really why this is here. This is related to testing that some CSS classes were set by impress.js code:\nif ( !_impressSupported() ) {\n    assert.ok( notSupportedClass,\n               \"body.impress-not-supported class still there.\" );\n    assert.ok( !yesSupportedClass,\n               \"body.impress-supported class was NOT added.\" );\n  } else {\n    assert.ok( !notSupportedClass,\n               \"body.impress-not-supported class was removed.\" );\n    assert.ok( yesSupportedClass,\n               \"body.impress-supported class was added.\" );\nIf we just hard-coded assume that the test is run in a browser where impressSupported is true, then it defeats the purpose of the whole test. If the test ever fails, you wouldn't know whether it is because the browser check is failing, or because the code is setting css class incorrectly.\n. I guess I just wanted to emphasize the yes/no dichotomy.\n. True. Checking impress.js for guidance, it seems itself to be very inconsistent.\nThe logic in my code above is that short words go without spaces, like \u00b4contains(\"impress-enabled\")\u00b4 and longer (which is most) arguments are surrounded by space inside parenthesis.\nMy proposal is to leave this discussion for now, and later do an overhaul of both impress.js and this code where style is settled once and for all. (Preferably in the same pull request with adding a style checker.) This is not to say I'm opposed to comments about style in general.\n. The test is only done/passed when both doneWithNext() and doneWithPrev() have been called. They're called in different event listeners.\n. Even if it means copy pasting lines 130-150?\nI agree with you so much that copy pasting might be easier to read, but I argue that this approach is easier to maintain. (And, as I've said before, your way test will run twice as long.)\n. Btw, if you wanted to focus on testing each event listener separately, it still leaves an open question: where would you check for the \"active\" css class? It is set inside the goto(), so not set inside either event listener. So should there be yet another test where that is checked separately?\nThis is just to underline my point: This test is not checking event triggers per se, rather it is testing everything related to moving from one step to next.\n. Actually, I agree with your last suggestion. However, in this first commit, I didn't yet want to touch js/impress.js, since the religious belief is we must add tests before touching it. And I think it's cood to be overly conservative in these first steps. So I have copy pasted the lines I needed into this helpers file. In the future, I agree this code could be removed and instead we expose this functionality from impress.js itself.\n. Are you referring to the TODO line? I realize now it's unclear (or incomplete, more correctly). My current thinking is that such tests are needed for proper coverage, but they would have to be their own html file. This is because tests operate on the div.step elements we've defined directly under body. So we can only have one impress.js presentation in one html file. The 4 steps in this html file are of course very simple, and allow for basic tests, like testing transitions. To test more advanced animations and positioning, another html file will be needed. But that will still be testing the Core API.\n. You mentioned QUnit.module() before, and I looked into it, but at this point I don't see that it would add any value. Maybe if there are more tests for the Core API in the future, then yes. But like you now understand, that might not actually happen (in this file).\nI did briefly consider an iframe, but stayed with this approach now for simplicity. Also, I've been trying to keep as close as possible to how impress.js is typically used in real world, which is to own the complete window. Probably running in an iframe would be an equivalent test, but out of principle I want to test the \"real thing\" as closely as possible. I do think we should keep the iframe option in mind though, especially when more tests are added. \n. > The good thing about doing this now (the iframe and the QUnit.module thing) is that we could prevent changing a lot of code in the future, but that is not the main reason.\nAlso known as premature optimization :-) It's quite ok to change code once there's enough code to make it worthwhile.\nI simply don't understand your pushing QUnit.module at this point. Currently there are exactly 2 QUnit.test blocks. If I put each of them in a separate module, how would that make any difference???\nAs for iframe, yes I know it works, I've seen it and developed code for impress-console. But \"it should work\" is not a thing you can say when we develop tests. We must start with testing how impress.js is primarily used. Then after that someone can do the extra work of proving that it also works 100% the same in an iframe.\nUnless I'm mistaken, beyond this sub-thread there are no outstanding issues? Maybe it's time for me to squash the commits together into a single commit, and then merge this so we can proceed with adding more tests?\n. Unfortunately I have to agree with these comments. \"Use the source Luke\" in the 90s was what people said of software that had neither documentation nor very good code comments. When I first saw it, it made me look at other options, including impress.js accessories like hovercraft. Only later did I actually look at the HTML source and realized it reads as a tutorial.\nIdeally of course, there should be both documentation, and the source code comments. But already in current state, this wording could be made in a better way.\n. Hi sclausen\nGood idea and easy to implement.\nIMO this feature needn't be optional. (Not adding an option benefits the goal of simplicity.) I don't think anyone will miss the pointer if we just hide it always after 3 seconds of inactivity. (I can see that someone would want to leave the mouse pointer pointing at something on a slide. But that should be rare. You'd usually move the pointer to point at something, but that would still work. Also, it is more common to use laser pointers, etc.)\n. We are moving to a plugin architecture. So instead of a patch against impress.js, you should write this as a plugin. See https://github.com/henrikingo/impress.js/blob/myfork/src/plugins/README.md for a detailed explanation. If you want to write a PR against that repo, you're welcome to do so.\nAlternatively, if you want to do a PR against the impress/impress.js repo in its current state, you could still write this as a \"plugin\" By adding a separate (function(window, document){...})(window, document); at the end of the file. You can take a queue from the keypress navigation at the end of the file, which is in fact such a plugin (even if it's not in a separate file).\n. I think you should use document.addEventListener() instead. Other than that I agree with this approach.\n. I'm unsure about this line. If someone were to call hideCursor() some other way than via setTimeout() timeout triggering, then mouseMoveTimer will be null but the timeout will still expire? Wouldn't it be better to call window.clearTimeout(mouseMoveTimer) here?\nAlternatively, I'm not sure you need to do anything about mouseMoveTimer here. Wouldn't this work just as well if you just leave this line out?\n. This if() is actually a bit obscure. It would be more readable if you implement a helper function isFullscreen(), which returns true when this if is true. (I can get it since there is the comment, but would prefer the helper function, especially as this code moves to a separate plugin, so an extra line of code or two isn't an issue.)\n. If the user wanted to theme the cursor with css, you will now unset that. You need to save the original cursor value when hiding it, then set it back to original value here.\n. Upstream only use Chrome for testing with karma. Well, at least in karma.conf.js. I'm actually unfamiliar with the Saucelabs setup.\nI wanted to test with Firefox too, so I've added it. This module is needed, and there's a line in karma.conf.js that also adds Firefox to the list of browsers.\nNote that Chrome doesn't allow JavaScript to access the inside of an iframe when the protocol is file:///. So for opening qunit_test_runner.html in a browser (without karma), it only works with Firefox. So for this reason it's actually important to at least keep Firefox in the CI loop. Chrome is then kinda optional, but I like testing with both and I guess I also wanted to keep Chrome as upstream has been using that. \nAnd to make it crystal clear: both of them work fine over karma, because then files are served over http.. I can do that. For the record, they will be firefox:0.0.1 and syn:0.10.0. Current breakdown is:\n init() tests\n next(), prev(), goto() = \"movement\" tests\n navigation module (testing key events and clicking a link with syn)\n navigation module no-op tests (e.g. clicking on current slide should not cause movement)\nThey are grouped into 2 files. They could be grouped into 4, but I don't know that that's what you mean.\nThe setup overhead is indeed quite high. So I don't see it meaningful to think that each \"QUnit.test()\" section would only test a single thing, I've rather used that as a kind of module, which will then do 30-100 different \"actual tests\" and related assertions.. Note: This is now generated. Makes more sense to comment on the individual files under src/. I realize now linting actually passes without declaring 'window'. Or 'document' for that matter.. This is the current plugins/README.md from my fork. It refers to things not yet possible in this PR, but I thought I'd rather not start editing it into smaller pieces. This also gives you the full picture, even if some plugin types will be introduced in a later commit.. Cool. I'll keep that in mind as a future improvement. I really like to provide the minified experience, but felt that not adopting language improvements was eventually holding back progress too much.. (Moving here as the reply works now)\n\nI'm not exactly sure if keeping generated file in repo is a good thing.\n   It needs to be kept up to date with rest of the code (you need to remember to build it before commit) and having all the changes doubled makes PRs bit confusing.\n\nTrue. It does of course happen that one forgets to do the final build before commit. We could add an automatic check to prevent that though.\nFor PRs / git diff I don't personally mind, I get used to skipping that quite fast.\n\nThat said, I understand the idea behind it (to have it ready to use), so I don't have any other solution now.\n   Maybe in future we would be able to not have it in repo, but have it built and published to some CDN, so built version would be available on-line, while not being in the repo itself.\n\nFor now, the absolutely biggest issue of course was simply backward compatibility with upstream, and IMO that is important consideration going forward as well. There should be compelling reasons to break with this custom, more than just something being maybe being a bit better. That is to say, I'm not strictly disagreeing with publishing to a CDN or users having to build js/impress.js, but IMO there's also nothing horribly bad with the way it is now and there's value in just continuing with what is already established.\nPersonally I do like the end user workflow where you can just git clone and point to the js/impress.js file, without, for example, needing to use npm at all. When integrating some of the extras plugins, it always annoyed me how nonstandard that is across projects. For one, you need to download a zip file. For another, you need to npm install. For a third, you need to npm run build dist whatever, and then a lot of new files appear, and you need to figure out which one you actually want. Ease of use of impress.js is really good right now, so lets try to keep it.. tear() is a \"public\" API method, partner to init(). I will add it to DOCUMENTATION.md in this PR, thanks for pointing that out.\nlib is \"internal\" in the sense that it is intended for plugins. But as you say, anybody could write plugins. My own idea here was that:\n As for documentation, README files and source code comments are sufficient. (Of course, we could adopt something like jsdoc if we want.)\n  As for public/private, I was thinking since we are an open source project, that the library API have similar guarantee as the Linux kernel: If we need to change them we will. If you don't want your plugin to break, you can contribute it to the upstream repo - with tests ;-) - and it won't break. If you have your own 3rd party plugin, make sure to check version of impress.js and hopefully the API only breaks between versions, not within.. Code base has avoided forEach due to the version of buildify that was used wouldn't support it. Recently I actually disabled the minify part of buildify, so this is no longer an issue, but it is the reason existing code doesn't use forEach.\n(And as explained elsewhere, these kind of code style comments are out of scope as a general category. The goal of these PRs is to merge code that already exists in my repo.). > I'm trying to put myself in a position of potential plugin developer - and looking at this API I don't know what I'm meant to be using.\nFrom my experience writing 20 plugins for impress.js, and also using same mechanism in impressionist:\n\nI want methods that wrap around the DOM methods I used until gc was introduced.\nSometimes I use some other JavaScript libraries that create DOM elements, and I just need to add them to gc so they are removed on teardown. This is what the push* functions do.\naddCallback() is the catch all where a plugin can do anything. But, expecting each plugin to do the addEventListener and appendChild work separately, would be just as annoying and bad style as copy pasting lib.util.triggerEvent to each plugin.\nThere's also a need for add and push method that would just set and reset an attribute value. This doesn't exist yet.. As a simple example, plugin-b might depend on the output (e.g. some DOM modifications) of plugin-a.\n\nIf you look at all the plugins in my repo, there's also other \"logical\" reasons to use some ordering. For example, substep plugin will prevent transitioning to next step, and instead reveals a substep on the same step. So it makes sense for that one to execute early, because it will in any case cancel the stepleave event.\nWith some other plugins it could be ambiguous/conflicting what should happen if user tries to use both, such as using both skip (skip next slide) and goto (jump to arbitrary slide). So the weight makes their priority explicit.. The official answer is undefined. You should use different weights when 2 plugins have some inter-dependency, to ensure correct ordering.\nThey are pushed into an array and executed on a FIFO basis. So in practice the order of plugins in build.js determines the order when weight is equal.. For example the goto plugin needs origEvent, because you can tie the pressed key to go to an arbitrary slide (e.g. press 5 to go to step-5). So it needs to have access to the event that generated the transition to know whether it was a keypress. stop plugin uses reason. It only stops next events, but doesn't prevent you going backwards to prev.. Actually, I could make such change. The nr of plugins that use this api is small, in fact I think they are contained in this PR, so it is feasible to change.\nI should note, in defense of this choice, that hey aren't added to the api returned by impress(). (Which would actually be incorrect anyway, since these are called before impress().init()). So they are kind of hidden aside already, and there are only two.\nSo you're suggesting:\nimpress.plugin.addPreInitPlugin()\nimpress.plugin.addPreStepLeavePlugin()\nI actually think that's a bit confusing. These methods are offered by core impress.js. When I look at the above, it looks more like they are plugins, which is not the case.\nBut let me know if you insist, this is a change that can be done in this PR.. Good point.. The main point about weight is indeed that this is internal api to be used by plugins. Plugin developers will know how their plugin interacts with other plugins, if at all. There is no reason for presentation authors to be aware of it.\nBecause it is \"internal\", it can also be changed later if it's not sufficient. FWIW, Drupal plugins have a similar weight mechanism. So while it's simple, I believe it is scalable.. It's only used by the swipe plugin, so renaming or changing arguments is feasible here.\nYou're right that at this point your idea of a impress().move() function would really be handy, but it seems to me like a big change! In any case, as you can see from the first half of the swipe() function, it's not just about animating a swipe, but it's also related to the step concept. What really happens is a prestepleave -> swipe -> stepleave (or not, if cancelled). So what is now the swipe plugin, will still need to interact with a higher level part of the code that is in charge of the (pre)stepleave events, and only that part can then animate the actual swipe. From that point of view swipe() truly is an equal sibling to prev() and next().. The original impressConsole has external CSS files. But we don't want, or even can't, have that for impress.js plugins. So I've simply inlined the default CSS here and it is added as a ",
    "lyonsinbeta": "The arrow keys also work. I think the assumption is that you use the same navigation keys you would use in PowerPoint or Keynote. Also if you're giving a presentation you don't really have users, you have an audience.\n. ",
    "ear1grey": "Yes, it is different, but closely related.\nThe impress.js README appropriately suggests that \"impress.js may not help you if you have nothing interesting to say\", but if the opposite is true, and you have a lot of knowledge to share (e.g. a whole teaching syllabus), then encoding positions into every document would be intractable.  And yet, the benefit of adding spatial structure to presentations is very compelling for learning purposes.  \nWhat I'm suggesting is a level of abstraction that allows for presentation of a document in a particular layout that doesn't require they layout to be encoded within the document. It may be that should be in a separate repo, but impress.js looks like it could be the right engine to deliver the actual presentation.\n. These multiple reading formats are of special importance for me.   The example I used initially is from a web foundations unit (24 lectures per year and 6 lecturers).  My aim (as the unit coordinator) is to get all he lecturers using HTML for presentations, and for all presentations to have a similar structure.   The current presentation system (similar to S5) is adequate, but, a system that would allow a generic spatial presentation style to be used across all documents (in much the same way as css works) would be very useful. Each lecture would then require only one document for reading online, printing, presenting, revising (using a mind-map presentation style), etc.\nThe 'default's idea mooted above could work really nicely if it were configurable through a JSON structure, in addition to the data- attributes.  If it could be based on CSS selectors that might be particularly powerful, i.e. for each selector, define default (or offset) values of positions, scales, rotations, etc.\nI'm (of course) aware that this may well be outside the scope for the core project - but want to make sure the wider usefulness of impress.js is apparent!\n. I quite agree it's another level, and appreciate the point about \"defaults\" nomenclature.  As I see it there could be three layers of configurability, two of which are defaults.  The first layer is the defaults for the library.  The second layer is user configurable 'defaults' that override the library defaults and might be set by a person (or group) wanting a consistent (configured) default look and behaviour for all their presentations, so this is still a default.  Then the third layer is the existing (original) data attributes where the document author can place each element precisely wherever they wish.\n. Greetings Yoshimura San.  As bdarcus suggests you should only use tags that are valid HTML and the aim here should be to make this work with any structurally marked up HTML5 document (and not just those which are slide decks).   What you've attempted to do with the step tag could be equally well achieved with a section.  Take a look at the structural design of the link in my opening comment.  Pressing escape goes in and out of a basic paged slideshow.  What I was originally imagining was (as bartaz suggested) something very similar to what you've achieved in your example   but which uses valid structural tags to delineate slides.\n. @shama that looks particularly appropriate & thanks for the 'personalised' demo.\n. ",
    "mcollina": "[OT]\nI think this tecnology is quite impractical to use for a syllabus, as it can't be printed.\nMaybe adding a print layout it's not that impractical.\n. Nice :).\n. ",
    "jimmyrosen": "+1 for this idea! \n. How about creating a standard fallback page telling ppl to get a modern browser or die trying? :)\n. +1\n. ",
    "bdarcus": "I mistakenly created a new issue (linked above) that gets at this same point. My thought, in summary, was just:\n- allow the nested structure the OP suggests\n- use that structure, perhaps plus some standard class attributes, to allow for automatic positioning (e.g. not requiring the data- attributes), which could be overridden by the data- attributes\n- design this layout code to allow for pluggable algorithms, such that at some point (no rush), a user could specify the algorithm to use in the document head\nPerhaps this is better as a separate little JS library apart from impress.js though; not sure.\n. Fair enough. It probably comes down to particular use cases. I think\nthe OP and I are both academics, who often have to deal with dozens of\npresentations at any given time, in the context of a whole lot of\nother work. So authoring time and effort is a pretty critical issue\nfor us. I don't have time to waste on low-level details; I need to\nfocus on content. But I get this is definitely a YMMV situation.\nIf I find time, maybe I'll look into creating a little script to do\nwhat I'm thinking about here.\n. > Is it really worth leaving good ol' slide-based presentation tools that are actually usable for impress.js effects? ;)\nProbably not; but I get tired of the same old thing ;-)\n. Two things:\n1) your demo doesn't work for me (using chrome on Ubuntu).\n2) correct me if I'm wrong, but you're using a non-standard element (step)?\nIf yes, please change that.\n. You shouldn't use step because it's not valid. Use a \"step\" class attribute on standard elements (div, etc) instead.\n. ",
    "y-yu": "I think my implementation help to solve this issue.\nI implement content structure by section tag,\nand step tag is a slide instead of div tag which has step class.\nlike this:\n``` HTML\n\n\n\n slide 1 \n\n\n\n slide 2 \n\n   <section>\n       <step>\n           <p> slide 3 </p>\n       </step>\n   </section>\n\n\n\n\n```\nI distrubute this at yoshimuraYuu/impress.js\n. > 1) your demo doesn't work for me (using chrome on Ubuntu).\nSorry, I use Chrome  beta(17.0.963.46 beta) on MacOS X 10.6.\nI tested  the demo on Chrome(16.0.912.77), then don't work.\nI will solve this problem.\n\n2) correct me if I'm wrong, but you're using a non-standard element (step)? If yes, please change that.\n\nYes, step tag is a non-standard element.\nThe reason I selectedstep tag is to reduce source code of slide.\nWhy should I change step tag?\nPlease tell me the reason.\n. oh......, I misunderstood your idea.\nI looked the source of WebF1.\nThe source is like this structure:\n``` HTML\n\nFuture Perfect\n    ......\n    \nHypertext\n        ......\n    \n<section> \n    <h1>Why a World Wide Web?</h1>  \n    ......\n</section>\n......\n\n\n```\nAnd at this page, pressing 'escape' key, we can start the presentation.\nI will try to implement the function.\n. I implemented structured slide based on section tag.\nPlease look at the demo,\nbut it maybe work on Chrome 16 or Chrome 17 only.\n. ",
    "frantzmiccoli": "Partially related. I did an implementation of some layout system for impress.js: [https://github.com/frantzmiccoli/Chillin.js\n. From my understanding those classes (\"past\", \"present\" and \"future\") are added to let people style their slide according to the current. For example, I'm showing some content just if they are present or past, showing the answer to some questions or some details I'm trying to make the audience guess. When I navigate back to some steps from the overview, such style is broken.\nUnder such considerations if it's not a bug, it's an unintuitive feature.\n. I think that a presentation is linear, when you do a talk it's usually linear. When your talk is transforming into a conversation, you might need to break that linearity but I don't really get how usable or meaningful it can be to style the previous visible slide rather than the slide that come previously in the linear order.\nNevertheless the configuration thing seems a good option to satisfy everybody. Is there any point in impress.js where some configuration already exists?\n. I've added some configuration tool. Right now it's stored in the root element, it's the most convenient way to due without adding some new global variables (which seemed to be one of your goal):\nimpress().configure(\"mykey\", \"my value\");\nTo enable the \"past\" and \"future\" based on steps order, you've to add:\nimpress().configure(\"pastfuturepolicy\", \"steps-order\");\n. ping @bartaz : I do really think that this kind of \"past\" and \"future\" affectation do really enhance the way we can style presentations. You can look at the styles of http://frantzmiccoli.github.io/Chillin.js ( http://frantzmiccoli.github.io/Chillin.js/styles.less ) to see a usage demo. Thanks for your time\n. Great, thanks for your time and feedback.\n. @FagnerMartinsBrack To my opinion this is still worth pulling, though I haven't been in touch with the most recent code base.\n. @FagnerMartinsBrack Thanks for this point! Though I need to take time to see if I can make all this ready to merge... \n. ",
    "hhill": "I see this is still open... is it still in the works?\n. ",
    "SiegeWizard": "Didn't see this before my comment in the API issue. There you have what I think is the easiest way to implement the \"having a possibility of displaying steps in a different order that in markup (and being get to a single step more that one time - without going back and forward)\"\nAbout the feature requested here, I would say that the right way to do this was not to use the step class as it is not an step, but using a \"background\" class for example, that would be loaded into the presentation before the steps so that they are always in the background (I'm not sure if this background would be a problem when having a step deep in the z-axis, maybe a style should be applied so that they are always behind the steps.\nThe last reason why I would do this with another class is because this will make the selector easier.\n. I would say that the showOverview() method should be a specific case of the setCamera() method, as next() and prev() are specific cases of the goto() method.\nThe setCamera method should have an argument:\nposition = {\nrotate : {x,y,z},\ntranslate : {x,y,z},\nscale\n}\nIf this method was applied, I think that the goto() method should use it internally not to have duplicated code.\nThe showOverview() would just compute the overview values and call this method.\nAbout the addStep(), removeStep(), updateStep(): I don't think they should be included in an API. An API should help the plugin integration and I have to say that an slide-editor is not a plugin. Don`t get me wrong, I'm making an editor myself, but I don't consider it a plugin.\nOther methods and functionality that may be useful are:\n- Video integration: Autoplay when entering its slide, pause when leaving, and pre-charge while in other steps after the rest of the steps have been charged.\n- Pointer events: Getting the position of the cursos may be interesting for some plugins, as well as dragging and all that kind of events.\n- Slide jumps: Let me try to explain this point. Sometimes when you are presenting something, you want the user to see the slides in this order:\n  Slide 1 -> Slide 2 -> Slide 3 -> Slide 1 -> Slide 4 -> Slide 5 -> Slide 1 -> Slide 6\n  The Slide 1 may be for example an index that you want to show to the viewers before any of the points. I suggest adding the funcionality to add empty divs with the data-step variable so that if it gets it instead of getting its dataset, it gets the dataset of the step whose id is the one in data-step. In my example it would be: (not using the < simbol so that it doesn`t remove the div tag)\ndiv id=\"index\" data-scale=\"2\" ...>...\ndiv id=\"point_1_1\" data-scale=\"1\" ...>...\ndiv id=\"point_1_2\" data-scale=\"1\" ...>...\ndiv id=\"index2\" data-step=\"index\">\ndiv id=\"point_2_1\" data-scale=\"1\" ...>...\ndiv id=\"point_2_2\" data-scale=\"1\" ...>...\ndiv id=\"index3\" data-step=\"index\">\ndiv id=\"point_3\" data-scale=\"1\" ...>...\n. I found some time and I made this change into impress.js goto method. There is nothing new, some of the tasks that were performed by goto are now performed by setCamera, that returns duration + delay as goto needs this value for the setTimeout. I think you will be able to understand everything as it is mainly your code so I removed the comments and spaces so that it didnt take that much space. If I knew how to use Github i would made a pull request but I have never tried to understand github. My main objetive while doing this was changing the less posible. And here you have the new functions.\nvar setCamera = function ( target, duration ) {\n  window.scrollTo(0, 0);\n  var target = {\n    rotate: {\n      x: toNumber(target.rotate.x),\n      y: toNumber(target.rotate.y),\n      z: toNumber(target.rotate.z)\n    },\n    translate: {\n      x: toNumber(target.translate.x),\n      y: toNumber(target.translate.y),\n      z: toNumber(target.translate.z)\n    },\n    scale: toNumber(target.scale, 1)\n  };\n  var zoomin = target.scale >= currentState.scale;\n  duration = toNumber(duration, config.transitionDuration);\n  var delay = (duration / 2);\n  if (el === activeStep) {\n    windowScale = computeWindowScale(config);\n  }\n  var targetScale = target.scale * windowScale;\n  if (activeStep) {\n    onStepLeave(activeStep);\n  }\n  css(root, {\n    transform: perspective( config.perspective / targetScale ) + scale( targetScale ),\n    transitionDuration: duration + \"ms\",\n    transitionDelay: (zoomin ? delay : 0) + \"ms\"\n  });\n  css(canvas, {\n    transform: rotate(target.rotate, true) + translate(target.translate),\n    transitionDuration: duration + \"ms\",\n    transitionDelay: (zoomin ? 0 : delay) + \"ms\"\n  });\n  if ( currentState.scale === target.scale ||\n     (currentState.rotate.x === target.rotate.x && currentState.rotate.y === target.rotate.y &&\n      currentState.rotate.z === target.rotate.z && currentState.translate.x === target.translate.x &&\n      currentState.translate.y === target.translate.y && currentState.translate.z === target.translate.z) ) {\n    delay = 0;\n  }\n  currentState = target;\n  return (duration + delay);\n};\nvar goto = function ( el, duration ) {\n  if ( !initialized || !(el = getStep(el)) ) {\n    return false;\n  }\n  var step = stepsData[\"impress-\" + el.id];\n  if ( activeStep ) {\n    activeStep.classList.remove(\"active\");\n    body.classList.remove(\"impress-on-\" + activeStep.id);\n  }\n  el.classList.add(\"active\");\n  body.classList.add(\"impress-on-\" + el.id);\n  var target = {\n    rotate: {\n      x: -step.rotate.x,\n      y: -step.rotate.y,\n      z: -step.rotate.z\n    },\n    translate: {\n      x: -step.translate.x,\n      y: -step.translate.y,\n      z: -step.translate.z\n    },\n    scale: 1 / step.scale\n  };\n  var time = setCamera(target, duration);\n  activeStep = el;\n  window.clearTimeout(stepEnterTimeout);\n  stepEnterTimeout = window.setTimeout(function() {\n    onStepEnter(activeStep);\n  }, time);\n  return el;\n};\n. ",
    "alingham": "Very cool. I look forward to the update. I have begun to build impress.js into my personal website. Looking a lot like your demo at the moment, but I hope to adapt it enough to take on its own feel. \nThanks heaps for the hard work and making this open source. Suitably impressed.\n. I very much LOVE the 3D effects. In the past I've tried to do a similar type of thing on a flat surface with divs placed around an autoscrolling anchor link based system, but didn't have the beauty of rotating through axis. I guess the introduction of CSS3 has allowed for this technology to move forward.\n. AWESOME! Thanks heaps. Works a treat!\n. Yeah. I would, but I prefer it to look like a URL rather than a hash tag? But maybe I can work something for if impress doesn't work to remove the trailing slash after the hash mark\nCheers, \nAl Ingham\nwww.alingham.com\nOn 29/10/2012, at 8:46 AM, Bartek Szopka notifications@github.com wrote:\n\nhttps://github.com/bartaz/impress.js/blob/master/index.html#L180-183\nJust use domain.com/#name-of-step - this will work as true anchor and impress.js will know how to handle it.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "lsmith77": "why anchor support if we have push state to update the URL properly?\n. yes that is correct. yeah i guess. slippy.js which i am currently using is using anchors too:\nhttp://phpcr.github.com/slides.html#2\ni find push state cleaner, but it would require rewrite magic. the upside it that it could also enable stitching multiple separate presentations together. so ideally use some solution that could allow both for flexibility. but yeah i guess getting anchor support in is indeed the more important thing for now.\n. thinking about it more .. indeed push state is the wrong way to go and anchors is the right approach .. its a single page and you want to jump to specific places in that page, so anchor's were meant for exactly that. so never mind my comment :)\n. ",
    "nagisa": "@bartaz,\nYou can always serve index page with all pages/directories that contains some fragment, like slide*...\n. ",
    "Mattieuga": "Ah interesting, that makes sense! \n. ",
    "cormacrelf": "Shazam. Progress. I like it.\n. ",
    "brianewing": "+1\n. ",
    "infusion": "Well, most of the changes reduce the size of the compressed file:\n1) Dropped suffixes brings the \".scale\" into the scale method so that you can work with the objects. This reduces the redundance of the attributes outside the function calls\n2) Did you see the default case which returns? \n3) You've used another createElement('div') in the file and I renamed the \"dummy\" in order to have a better gzip compression because another similar thing is already there.\nOkay, no problem...They were only the two cents I wanted to contribute after I read over the source for the first time.\nRobert\n. ",
    "honza": "No problem! Thanks for the hard work\n. ",
    "chachra": "+1\n. ",
    "rajivpant": "+1\nWould love to see a tutorial, how-to document or samples.\n. ",
    "Cubox-": "Yeah, I need a documentation too, I want to use this awsome tool for a school project. I have an exposed in a month :) I will take a look on the tutorial, but, let me thanks you for this amazing tool :D\n. ",
    "bittudaimary": "@bartaz thanks for the link\n. @ericduran cool\n. +1 for this\n. ",
    "riston": "+1 Also keep the documentation simple.\n. ",
    "sevestrarythorn": "+1, but keep it simple, short and sweet.\n. +1 for this.\n. On 09/01/12 08:58, Bartek Szopka wrote:\n\nIs everything OK with this presentation?\nEverything seems very small, and the fallback message is always visible (as a small text in the middle of presentation)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/pull/36#issuecomment-3405017\nHmmm, going back on it now. It does seem a bit broken. I don't know very \nmuch html though, so that may be a problem.\n. \n",
    "samphippen": "you can find the talk on my website: http://samphippen.com (before I found your impress.js) You said in your readme to get in contact  if we've got a presentation done in impress.js so I did.\n. ",
    "endophage": "An interesting addition might be to have custom href values for the previous and next slides incase users want to put manual buttons for that navigation.\n. Looking at the click handler you've added.  Don't bother with the while loop.  Event bubbling will handle that for you, just check the target.tagName = \"A\" (I would also suggest you use toUpperCase() just to be safe)\n. ",
    "soulemobile": "I suppose we can add a video of the presentation as a failover\n. Challenge Accepted, next step pull request\n. It might be nice to add generic forward/back buttons with a div or\nsomething easy. Who's working on the documentation?\nOn Thu, Jan 5, 2012 at 10:11 AM, Kyle Robinson Young <\nreply@reply.github.com\n\nwrote:\nHa! Well don't do anything on my account. I'm just another programmer that\nenjoys this project like yourself. I was just suggesting a workaround to\naccomplish your task. ;)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/issues/29#issuecomment-3371791\n. \n",
    "ghost": "I have tried to mod impress.js to work with IE9 but I am failing completely. I am using other frameworks to provide the fallback animations that are not native to the browser but for some reason I cannot get impress to apply the required inline styles to the dom elements. Have you played around with ie support? Can you offer any advice?\n. Again, sorry. wont happen again.\n. Hey apologies, I was testing github API and accidentally used your repo instead of my test one. My bad..\n. Here is the workaround that works for me:\nMake a copy of the transitionDuration variable in the config element definition. Add this line in the definition (approx line 346):\ntransitionDurationReset: toNumber( rootData.transitionDuration, defaults.transitionDuration )\nWhat that line does is it makes a copy of the transitionDuration variable, which would be required to reset the transition duration to the value specified in the root <div id=\"impress\">...</div> element.\nThen add this line at the beginning of the getStep method (approx line 400):\nconfig.transitionDuration = step.getAttribute(\"data-transition-duration\") == null ? config.transitionDurationReset : parseInt(step.getAttribute(\"data-transition-duration\"));\nNow you can specify the transition duration of any step by giving a value to the data-transition-duration attribute in the <div class = \"step\">...</div> tag.\nThis workaround tends to mess up the presentation workflow while navigating backwards, but since the presentation I am working on only navigates forward, I have to make do with this modification.\n. Okay, thanks!\n. \u611f\u8c22\uff01\n. And I must add that when I go in an other tab in Firefox, and after that, I re-come to the impress.js tab, everything is clean, and there is no trace of the bug...\n. Oh, sorry ! I didn't think to search an answer in the Mozilla tracker...\nSo, it's a bug of Firefox itself...\nThank you very much !\n. ",
    "jzaefferer": "Adding the escape-keyhandler in an additional script would require access to the select-method. Currently there is no API at all, what's the plan there?\n. Yeah, that sounds good. For this usecase, the select method is all I need. And exposing a global impress object makes sense.\n. ",
    "delaaxe": "Works indeed! So I guess data-z should be preferred over scale for now. I'll try to look into this.\n. +1 for this\n. ",
    "srri": "+1 for this\n. ",
    "Pezmc": "Could this be an option? +1\n. +1\n. @bartaz I think the comments saying what all the functions do are a good idea as, well comments are always useful. Say you decide to stop supporting the project or come back to it in a year etc.\nPerhaps you could have a noncomented/minified version to go alongside the \"dev\" (commented) one\nAnyway fantastic work, really like this project, am currently working on a simple GUI in HTML5 that writes the HTML for you, with simple drag and drop and slide order.\n. Why change indenting everywhere?\nAnyway nice new feature!\n. ",
    "presidento": "+1 for this!\n. Do not use callbacks! Use the observer pattern, like MicroEvents.js's bind or EventEmitter's addListener and on, or what is in DOM: addEventListener. With this pattern more than one callback can be added. (My favorite method name is the addListener.)\nEdit: JS API will be great! A lot of feature request can be implemented outside impress.js. (For example: using mouse wheel to change the page, or go to overview with the Home key, or mark some slides as favorite slide and access it with numeric keys, etc.) Thank you for your great work!\n. @naugtur: do not add dependency, use an approved pattern.\nI have shown only some examples of this pattern. If you look into the MicroEvents.js at line 14-30, you can see that implement this pattern requires only a few code. (Although I don't like the trigger/bind method name, I think, addListener or on and fireEvent or emit is better, but this is not an important decision. And the unbind method is perhaps unnecessary.)\n. It think, mouse wheel support is a big mistake. Every zoomable service use mouse wheel to zoom in or zoom out. Okay, Impress.js doesn't support it yet, but I hope it will be supported at the future. If this patch remains in impress.js, it will be very difficult to remove it when you (or we) implement the necessary zooming behaviour.\n. Sorry, my I accidentaly deleted my branch, so this pull request became closed, I created a new pull request #61\nSorry again.\n. Please, do not merge this pull request now, I have a better way to determine the windowScale value, I will publish it within two days.\n. I hope, mouse wheel navigation will be removed, see https://github.com/bartaz/impress.js/pull/51#issuecomment-3494748 and the answers. But yes, it can be implemented creating two new functions with the name goNext and goPrevious and calling it from both place.\n. Hello @FagnerMartinsBrack, I am happy to see that the development will be active again.\nThis was an old PR, I can live without it.\n. ",
    "realfilip": "Of course, but wouldn't it be great to expand the possibilities of Impress to include not only presentations. It could for example be great for \"tours\" that websites have. \n. Wouldn't both horizontal and vertical scrolling be a possibility? Otherwise, simply letting the vertical scroll represent the left and right buttons on a keyboard would be a possible solution?\n. ",
    "xprilion": "Hey! I have been able to implement it! I will shortly create a fork with that implemented :smiley: . ",
    "mjibson": "So having some random floating text getting in the way on the rest of the slides is not a bug? Perhaps it isn't a bug in the software, but a bug in the presentation. I have noticed this for a while and it is incredibly annoying having it floating around, and looks exactly like a bug. I would argue for a fix that hides it always, except during the slide when it is displayed.\n. ",
    "bronfman": "Hi Bartek,\nI thought I was up to date with the repoI did some kind of merging thing\nvia github where I selected your commits and clicked apply. I new to things\nlike this (and have yet to set up my git app).\nLooking at my online files... It appears that I applied that\n_update_action to another branch, \"no.2\" (\nhttps://github.com/bronfman/impress.js/tree/no2) but I don't see the\nalterations I made in \"my\" master in branch no.2. I may have time this\nweekend to copy it over.\nRegarding the grammar and typography: the smart quotes, or curly quotes,\nsuch as what would be seen in doesn't vs doesn\u2019  is not so much a\ncase of incorrect vs correct, but rather good vs better. (The fact that the\nmedia is slide-based is irrelevant).\nAs a general rule of thumb, the curled inward apostrophes and quotes are *\nbetter* and are used like this:\n    & \nWikipedia has more on them at these links:\n1. http://en.wikipedia.org/wiki/Quotation_mark_glyphs\n2. http://en.wikipedia.org/wiki/Quotation_mark\nThe standard keyboard's apostrophe is, as mentioned, fine. However,\nimpress.js is a visual standout  I really like it. I have an affinity for\nvisual play and the roll of words This is a minor cosmetic nip, tuck, and\npolish, but it does look better and is \"more\" proper.\nI know I had seem (and must have bookmarked) a good reference on a\ntypography style guide for the web but have been unable to find it. When I\nfind it, I will forward it to you.\nIn the meanwhile, here are some references you may find interesting and/or\nhelpful:\nFROM http://webtypography.net/\nTable of Contents\n1. Front cover http://webtypography.net/\n2. Introduction http://webtypography.net/intro/\n3. 2Rhythm & Proportion\n   1. 2.1Horizontal Motion\n      1. 2.1.1Define the word space to suit the size and natural\n         letterfit of the\n         fonthttp://webtypography.net/Rhythm_and_Proportion/Horizontal_Motion/2.1.1/\n      2. 2.1.2Choose a comfortable\n         measurehttp://webtypography.net/Rhythm_and_Proportion/Horizontal_Motion/2.1.2/\n      3. 2.1.3Set ragged if ragged setting suits the text and\n         pagehttp://webtypography.net/Rhythm_and_Proportion/Horizontal_Motion/2.1.3/\n      4. 2.1.4Use a single word space between\n         sentenceshttp://webtypography.net/Rhythm_and_Proportion/Horizontal_Motion/2.1.4/\n      5. 2.1.5Add little or no space within strings of\n         initialshttp://webtypography.net/Rhythm_and_Proportion/Horizontal_Motion/2.1.5/\n      6. 2.1.6Letterspace all strings of capitals and small caps, and\n         all long strings of\n         digitshttp://webtypography.net/Rhythm_and_Proportion/Horizontal_Motion/2.1.6/\n      7. 2.1.7Don't letterspace the lower case without a\n         reasonhttp://webtypography.net/Rhythm_and_Proportion/Horizontal_Motion/2.1.7/\n      8. 2.1.8Kern consistently and modestly or not at\n         allhttp://webtypography.net/Rhythm_and_Proportion/Horizontal_Motion/2.1.8/\n      9. 2.1.9Don't alter the widths or shapes of letters without\n         causehttp://webtypography.net/Rhythm_and_Proportion/Horizontal_Motion/2.1.9/\n      10. 2.1.10Don't stretch the space until it\n          breakshttp://webtypography.net/Rhythm_and_Proportion/Horizontal_Motion/2.1.10/\n   2. 2.2Vertical Motion\n      1. 2.2.1Choose a basic leading that suits the typeface, text and\n         measurehttp://webtypography.net/Rhythm_and_Proportion/Vertical_Motion/2.2.1/\n      2. 2.2.2Add and delete vertical space in measured\n         intervalshttp://webtypography.net/Rhythm_and_Proportion/Vertical_Motion/2.2.2/\n   3. 2.3Blocks & Paragraphs\n      1. 2.3.1Set opening paragraphs flush\n         lefthttp://webtypography.net/Rhythm_and_Proportion/Blocks_and_Paragraphs/2.3.1/\n      2. 2.3.2In continuous text mark all paragraphs after the first\n         with an indent of at least one\n         enhttp://webtypography.net/Rhythm_and_Proportion/Blocks_and_Paragraphs/2.3.2/\n      3. 2.3.3Add extra lead before and after block\n         quotationshttp://webtypography.net/Rhythm_and_Proportion/Blocks_and_Paragraphs/2.3.3/\n      4. 2.3.4Indent or center verse\n         quotationshttp://webtypography.net/Rhythm_and_Proportion/Blocks_and_Paragraphs/2.3.4/\n   4. 2.4Etiquette of Hyphenation & Pagination\n      1. 2.4.1At hyphenated line-ends, leave at least two characters\n         behind and take at least three\n         forwardhttp://webtypography.net/Rhythm_and_Proportion/Etiquette_of_Hyphenation_and_Pagination/2.4.1/\n      2. 2.4.3Avoid more than three consecutive hyphenated\n         lineshttp://webtypography.net/Rhythm_and_Proportion/Etiquette_of_Hyphenation_and_Pagination/2.4.3/\n      3. 2.4.5Hyphenate according to the conventions of the\n         languagehttp://webtypography.net/Rhythm_and_Proportion/Etiquette_of_Hyphenation_and_Pagination/2.4.5/\n      4. 2.4.6Link short numerical and mathematical expressions with\n         hard spaceshttp://webtypography.net/Rhythm_and_Proportion/Etiquette_of_Hyphenation_and_Pagination/2.4.6/\n      5. 2.4.8Never begin a page with the last line of a multi-line\n         paragraphhttp://webtypography.net/Rhythm_and_Proportion/Etiquette_of_Hyphenation_and_Pagination/2.4.8/\n   5. 3Harmony & Counterpoint\n   6. 3.1Size\n      1. 3.1.1Don't compose without a\n         scalehttp://webtypography.net/Harmony_and_Counterpoint/Size/3.1.1/\n   7. 3.2Numerals, Capitals & Small Caps\n      1. 3.2.1Use titling figures with full caps, and text figures in\n         all other\n         circumstanceshttp://webtypography.net/Harmony_and_Counterpoint/Numerals__Capitals_and_Small_Caps/3.2.1/\n   8. Reference\n   9. Bibliography http://webtypography.net/bibliography/\nBooks[image: Book cover]The Elements of Typographic\nStylehttp://www.amazon.com/exec/obidos/ASIN/0881792063/clagnut-20/\nby\nRobert BringhurstThe book which sparked this website.[image: Book cover]Grid\nSystems in Graphic\nDesignhttp://www.amazon.com/exec/obidos/ASIN/3721201450/clagnut-20/\nby\nJosef Muller-BrockmannThe definitive word on using grid systems in graphic\ndesign. With examples on how to work correctly at a conceptual level and\nexact instructions for using all of the systems, this is as valid for the\nWeb as it is for print.References & TutorialsAlan Woods Unicode\nTestshttp://www.alanwood.net/unicode/index.html#linksMassively\ncomprehensive resource for locating and testing Unicode characters.How to\nsize text using ems http://www.clagnut.com/blog/348/Tutorial on Clagnut\nwhich explains in detail how to size text on websites using ems. Covers the\nissues of inheritance and transitioning from pixel-based text sizing.Em\nCalculator http://riddle.pl/emcalc/Handy online tool for converting\npixels to ems.How to Size Text in\ncsshttp://www.alistapart.com/articles/howtosizetextincss/A\nbest practice that satisfies designers and users and works across browsers\nand platforms.The amazing em unit and other best\npracticeshttp://www.w3.org/WAI/GL/css2em.htmFont\nsizing tutorial from the w3c.Figuring It Out: osf, LF, and tf\nExplainedhttp://www.fontshop.com/fontfeed/archives/figuring-it-out-osf-lf-and-tf-explained/Great\nexplanation of lining, old-style (text) and tabular figures from FontShop.\nWeblogsTypographica http://www.typographi.com/A journal of typography\nfeaturing news, observations, and open commentary on fonts and typographic\ndesign.Typographer.org http://www.typographer.org/A regular digest and\ncommentary on the typography and design industry, written by designers from\naround the world.Typophile http://typophile.com/Collaborative blog with\ntypographic news and views from around the world. Also present is a forum\nand a gradually evolving wiki.I Love\nTypographyhttp://ilovetypography.com/Bold,\ngraphical blog devoted to typography, type, fonts and typefaces.Joe Clark\non typography http://blog.fawny.org/category/typography/Typography found\nand discussed.Clagnut on\ntypographyhttp://www.clagnut.com/archive/typography/An\never growing list of typographic links at Clagnut.Ministry of\nTypehttp://www.ministryoftype.co.uk/Fabulous\nblog on published type from Aegir Hallmundur.Type For\nYouhttp://www.typeforyou.org/More\ngreat typographic blogging.Typesites http://typesites.com/Critiques of\ntypographically eminent websites.Specificationshtml\n4.01http://www.w3.org/TR/html4\nxhtml 1.0 http://www.w3.org/TR/xhtml1css2.1 http://www.w3.org/TR/CSS21\ncss3 Backgrounds and Borders Module http://www.w3.org/TR/css3-background\ncss3 Box Model Module http://www.w3.org/TR/css3-boxcss3 Fonts\nModulehttp://www.w3.org/TR/css3-fonts\ncss3 Generated and Replaced Content Modulehttp://www.w3.org/TR/css3-content\ncss3 Line Module http://www.w3.org/TR/css3-lineboxcss3 Lists\nModulehttp://www.w3.org/TR/css3-lists\ncss3 Multi-column Layout Module http://www.w3.org/TR/css3-multicolcss3 Paged\nMedia Module http://www.w3.org/TR/css3-pagecss3 Text Effects\nModulehttp://www.w3.org/TR/css3-text\ncss3 Web Fonts Module http://www.w3.org/TR/css3-webfonts\nFROM: http://retinart.net/miscellaneous/grammar/\nWhen you know the correct way to structure a sentence, the world becomes a\nscary place  you start to notice how many people get it painfully wrong.\nThe ease of content creation that the web now affords us is making the\nproblem worse, so why not get a basic understanding to help make your text\na little more professional?\nBefore we get into this, lets establish two things.\n1. A lot of these rules are different country to country, decade to\n   decade.\n   The way a proof reader or typesetter might lay out a page in Britain is\n   different to how it might be done in America. How its done in 1985 is\n   different than how it might be done in 2005. The styles of typesetting can\n   change over time and throughout different regions.\n2. Always be consistent, even if it might not be correct.\n   Some companies will have certain ways they layout text, even if it might\n   be considered wrong for their geographic location. But they are consistent\n   with how they lay their text out and that is the most important thing. You\n   dont want your audience to get half way through a piece of text and get\n   confused because you changed the way you laid something out.\nDouble Spaces\nNever use them. Ever. Your high-school teacher was wrong, dont ever use\nthem.\nApostrophes\nAn apostrophe is inserted when letters are removed.\nLets go to the race. (Let us go to the race.)\nIts going to be a great day. (It is going to be a great day.)\nThe other use of the apostrophe is to show ownership.\nThe runners shoes.\nMayor Swanks opening speech.\nTip: If the last letter of the owners name ends in s, place the\napostrophe on the end without adding the extra s.\nCommas\nAh the lovely comma. A comma can help you set the pace of your text, but\ndont go crazy.\nHe ran faster and faster, faster still, his muscles burnt, his face\ndripped.\nIs more interesting than:\nHe ran faster and faster. His muscles burnt and his face dripped.\nThere are also a few rules when using a comma:\n1. Use it to divide items in a list (of three or four items), when in a\n   run-on sentence.\n2. Use with and, but, for, or, nor, so, yet. \n   She ran as fast as her body would let her, yet it wasnt enough.\n3. Use to separate contrasting parts of a sentence.\n   She felt she couldnt summon the energy to run the fastest, she was\n   wrong.\n4. Use in a similar way to parenthesis, but when you dont want to break\n   the flow. \n   She smashed her feet on the pavement, not realising the damage she was\n   doing, in an effort to win.\nParagraphs\nThis can be a problem on the web, as apparently the enter key is a little\nhard to find. Weve all seen those sites, where someone posts an article\nthat isnt broken into paragraphs correctly. The problem with this is that\nyour text needs to breathe, flow well and look smooth  a lot of this is\nachieved by well spaced paragraphs. A couple of simple guidelines:\n1. Stick to around 5 sentences\n   The reality is that you can have as many sentences in a paragraph that\n   you feel is needed to get your point across, but for arguments sake, lets\n   save five or six is somewhat of a limit.\n2. Keep each paragraph topical and relative.\n   Dont make two distinct points in one long paragraph when two short ones\n   will work better.\nQuotation Marks\nThe British will use single quotes, then double quotes, when there is a\nquote within a quote.\nI cant forget I can run as fast as lightning for as long as I need\nSamantha told herself.\nWhile the Americans will do this the other way around.\nI cant forget I can run as fast as lightning for as long as I need\nSamantha told herself.\nThe British idea is that single quote marks are less obtrusive, the\nAmerican idea is that double quotation marks are more noticeable. So\nreally, they have their preference for the exact same reason. However, as I\nam an Australian, I go by the British standard of singles first.\nPunctuation in Quotes\nIf the question mark, full stop or any other punctuation is part of the\nquote, then include it within the quotation marks.\nHe raised an eyebrow and scoffed, Did you hear that Samantha is going to\nrun me into the ground at todays race?\nIf the quote is part of a sentence, and the punctuation isnt part of the\nquote, then keep the punctuation on the outside.\nTo think, he thought he could win, he even went as far as to say you\narent even a blip on my radar, in that cocky Im-a-prick tone of his.\nIf the whole sentence is a quote, then keep the punctuation inside of the\nmarks.\nI won, I won, I won, even with this athletes foot, I won! Whooo!\nHyphens & Dashes\nThere is a difference here and this is probably the thing most people get\nwrong on the web.\nThe hyphen is essentially used to join two words together, without space on\neither side.\nDashes are different. There is either the en dash or the em dash. An en\ndash will be the width of the capital N in any given font, while the em\ndash is the width of a capital M in said font, and they both have different\nusages.\nEm Dash (in HTML: \u2014)\nYou would use an em dash instead of a comma or brackets as it helps give\nemphasis and is the typographical equivalent of the dun-dun-da music. Just\nmake sure you never have space on either side of an em dash.\nThe race was almost overbut it was only really beginning for Sam.\nThe race was almost overit has been a hard hour for alland it was only\ndown to a few contenders.\nEn Dash (in HTML: \u2013)\nThe en dash is used between a range of numbers, while kept closed, and is\nbest used when the span is part of a list.\n15 runners are expected to fail.\n1025 runners will be hurt.\nHowever, if the span is part of running prose, then its generally nicer\n(phonetically and typographically) to use from and to, but use your own\njudgement on this.\nOne to five runners are expected to fail.\nThe mini-Olympics will run from the 29th until the 30th.\nThe temperature is expected to have a top of 2025 degrees on the day of\nthe race.\nAnother use of the en dash is when you want to offset a phrase, but without\nthe sudden hit of an em dash. Use it with a space either side.\nWinning a race can be very hard work  I knew I could do it.\nTip: An easy way to easily insert the correct dashes into your writing, if\nusing a CMS or something similar is to type out  for en dashes, or  for\nem dashes. Then perform a find and replace and presto, youre done.\nNumbers\nThis is nice and easy  numbers up to ten are typed in full, 11 and beyond\nare numerical. However, sometimes its nicer to spell them out.\nRunners eight and 17 broke their legs.\nThe first place winner won two million dollars, second place received $158.\nConclusion\nThere you have it! A quick list on how to use some basic grammar that will\nset you apart from most schlumps who dont know their ems from their ens.\nThis list is quite basic and isnt enough for perfect writing, but its\nenough to make you look like you actually care about your content, and you\ndo care, dont you? Yeah, thats what I thought. The two books I used for\nguides, both of which you should already own or pick up eight copies of\neach of were;\nType it Write. A Voice project.\nThe Elements of Typographic Style  Robert\nBringhurst.http://www.amazon.com/Elements-Typographic-Style-Robert-Bringhurst/dp/0881792063/ref=pd_bbs_sr_1/105-0355319-3904410?ie=UTF8&s=books&qid=1206869453&sr=8-1\n\nIm willing to bet you own the second book, or currently waiting for it to\narrive (seriously, this thing is the typographic bible), but the first may\nbe a little obscure to some of you. Its a small book that was put together\nby the Voice group from Adelaide, Australia. Its an awfully handy little\nthing and well worth grabbing a copy, whenever you see it.\n29/08/2008  A very special thank-you to those in the comments for letting\nme, and anyone else who is reading this article, know of the mistakes\noriginally made. It is greatly appreciated!\nREFERENCES & LINKS\nhttp://www.askoxford.com/asktheexperts/faq/\nhttp://www.alistapart.com/stories/emen/http://www.alistapart.com/articles/emen/\nhttp://en.wikipedia.org/wiki/Punctuation\nAnd if I didn't mention it in my Github message, fantastic work! impress.js\nis, well, impressive, very impressive.\nHappy new year.\nRegards,\nJames\nOn Fri, Jan 6, 2012 at 10:35 AM, Bartek Szopka <\nreply@reply.github.com\n\nwrote:\nIt seems that you are not up to date with my repo, so I cant merge\nautomatically.\nBut thanks for addition, I'll try to merge it manually.\nBTW, can you point me to any resource that will help me understand what\nare typographically correct quotes (and other marks) in English?\nFor example ' is not fine for words like don't but are ok for\n'slide-based'?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/pull/33#issuecomment-3385984\n\n\n\nJAMES BRONFMAN\n\n\nRENAISSANCE SUPERHERO\nt: +1.647.709.3382\ne: bronfman@gmail.com\n. \n\n",
    "hoopyfrood": "+1\n. ",
    "nathanbrock": "@Pezmc @bartaz Apologies regarding the whitespace, sloppy work, force of habit in the IDE to click 'Format', will ensure it doesn't happen again!\nWhitespace has been dealt with and matches the master. Debugging code has been removed, irrelevant documentation removed, 'data-time' becomes 'data-duration' and 'data-duration' now accepts seconds instead of milliseconds. \nIf this is still of any use (sorry for the fudge ups) would it be better that I closed this pull request and open a new one with a single commit?\n. Apologies for removing the old pull request, was an unforeseen result of rebasing.\n. Hey Bartaz,\nThe commit comments would be much appreciated and your feedback most welcome. I can either work with yourself to get this to how you would like it or leave it to you to implement when you see fit at a later date. The project is your baby so I under completely if its the latter.\nCheers.\n. Agreed on what has been already discussed regarding duration and it's place outside core functionality but as a possible extension in the future. As such I'll close this pull request and look at possible avenues for future extensions.\n. ",
    "Evanion": "I know this Issue is closed, but I can't seem to find this functionality in the current Master :(\nhave it been removed or changed?\n. ",
    "e2del": "Yes, so I must create different Id for each slide ?!\nOn Fri, Jan 6, 2012 at 4:03 PM, Bartek Szopka <\nreply@reply.github.com\n\nwrote:\nI'm not sure, but it may be caused by the fact, that both first and third\nslides have the same id its. Two elements in document can't have the same\nid.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/issues/35#issuecomment-3385550\n. Yes, but to create e.g. section style, i must creat two id different with\nthe same style.\n\nOn Fri, Jan 6, 2012 at 4:09 PM, Bartek Szopka <\nreply@reply.github.com\n\nwrote:\nYou don't have to specify id at all, it will be gerenated as step-1,\nstep-2 (look at second and third slide in demo presentation), etc.\nBut specifying your own is useful if you want to style each slide\nspecifically in CSS.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/issues/35#issuecomment-3385619\n. Ok, thanks :)\n\nOn Fri, Jan 6, 2012 at 4:15 PM, Bartek Szopka <\nreply@reply.github.com\n\nwrote:\nI don't know what is your specific case, but you can use class instead\nof id to apply styles to many elements in HTML.\nOr in CSS you can specify styles for all ids that need it #id1, #id2 { /*\ncommon styles */ }.\nIf you have any live example of your presentation I can have a look at it\nand give you more feedback. Right now I don't really understand what you\nare trying to achieve.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/issues/35#issuecomment-3385680\n. Yes, it's the same issue. I have chrome too (version 17).\n\nLe 8 janv. 2012 \u00e0 22:26, Bartek Szopka\nreply@reply.github.com\na \u00e9crit :\n\nA life example would be helpful.\nI'm not sure if it's the same issue, but I also noticed that some of elements in 3d space that are 'far' from viewer (negative z) are not clickable in Chrome. May be a browser bug or something.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/issues/37#issuecomment-3404773\n. \n",
    "poshaughnessy": "I got around this by just adding on some amount to every data-z to ensure that none were less than 0.\n. ",
    "Nevon": "Was data-duration ever implemented?\n. ",
    "richardhodgson": "I use impress.js for a project of mine, however there wasn't a way to control the transition duration or easing function. My project also loads JS using RequireJS.\nI forked impress, added support for AMD module format and the ability to pass in config. Original demo should work fine, there's also a different example showing using the API.\nHappy to contribute this back if its of any use.\nhttps://github.com/richardhodgson/impress.js/blob/api/examples/config.html#L88\nhttps://github.com/richardhodgson/impress.js/compare/master...api\n(another vote for before/afterChange events too)\n. @bartaz jQuery way makes sense - pleases both groups :)\nHow do you feel about impress being less static, more instance based?\n```\nvar pres1 = new Impress('elementId');\nvar pres2 = new Impress('someOtherElementId');\npres1.goTo(1);\npres2.onStart(myCallback); //etc\n```\n. @bartaz Libs that automatically invoke themselves as soon as they are loaded can be harder to incorporate into other projects. However, I get that the focus of impress is something simple that is driven by the content of your presentation.\nHow would more global options be specified in the DOM? A data- attribute on the container div?\nhtml\n<div id=\"impress\" data-transition-duration=\"0.5\">\n    ...\n</div>\n. ",
    "thingsinjars": "I've been working with a modified version with a public API in my fork and found I needed next, update and target. update is simply the bit that updates the CSS of the given element (the same bit @naugtur refers to above, in fact). \nOf course, most might not need update or target, it's specifically for edit mode in my case.\nAlso, yeah, don't use callbacks if you can help it.\n. @naugtur Oh yeah, I should've said. It's basically the functionality used to identify the target within the mousedown listener. It takes in the event and returns the relevant node.\n. @naugtur Not in this case. It uses event.target but works upwards to find the relevant parent slide. This functionality is aware of the structure of the slides. If this were to change, the method required to identify target slide from event target would change, hence abstracting as an external API call \n. @naugtur Yes, but target handles (in a black-box way) detecting the document.click and returning the relevant slide. This is not about me being able to attach events to slides or not, it's about integrating with the functionality to ensure that a mouse click on the document is reliably associated with the same object whether the detection is done inside or outside impress.js. \nWe can move this discussion to a different thread to stay on-topic here. I was just passing on info about a piece of internal functionality I found useful externally which could, therefore, be considered for API access.\n. I agree with the name (and functionality) of getStep. In my fork, that's exactly the bit exposed as target but getStep is a much better name. \n. ",
    "medikoo": "@bartaz can you share a bit more about your idea of that API ?\nDo you plan to expose impress to global namespace (under what name ? IMPRESS ?)\nI have some simple proposals already implemented and they rely on already exposed impress. I'm holding pull request now as I don't want to conflict that with your vision.\n. Good point, all caps is rather used for global object that holds many different namespaces, e.g. LIB, in that case impress is better choice.\n. In general it's great, I would just do method names less verbose:\n- next()\n- previous()\n- goto(number | id | element) - seems semantically more correct to me.\nWhat's the use case for isStep?\n. @bartaz :) it makes sense, but then maybe something like getStep(element) would be better ?\n. @bartaz yes, I see it as DOM function and I think it would be more convenient than isStep. If we would name it verbose DOM way it would be getStepByElement, so getStep is probably best name :)\n. Looks great to me :)\n. I think it can be neatly achieved with optional next option on slide and with proposed JS API (#39).\nWith next option (configured via data-next attribute) we can customize slides flow to differ from div elements order e.g:\n``` html\n\nExplain in more detail ?\n\n\n.. further explanation ..\n\n\nNext topic\n\n```\nImplementation of that I believe would be quite simple\n. yup, I'll clean it up and post it as a pull request.. at least I'll definitely need it in a future presentations :)\n. This could be easily achieved with more generic data-next option (being proposed), see this comment: https://github.com/bartaz/impress.js/pull/61#issuecomment-3545409\n. @bartaz exactly.. as someone said: we should look at use cases not proposed solutions \nIn my opinion above use case is very valid, but proposed solution is a bit cumbersome.\nIf we add a way to configure slides flow so it doesn't necessary resemble order of .step elements in dom, it would probably be solution to many use cases.\n. I just had second thought about it:\nWhat I proposed is ok, only if we feel there's some use case for changing steps configuration during presentation (after initialization). I can't point now any, but I'm not that familiar with engine and possibilites, maybe it makes sense (?)\nIf there's no such case  then this pull request does too much. I can clean it so let's say impress.init takes optional options object on which we can provide steps configuration via options.steps.\nThen initial setup will work same as it's in master it will just favor configuration found in options.steps over what's in html.\n. @bartaz yeah, diff shows a lot of changes, but mainly due to extra indent nesting caused by moving most of the code into impress.init.\nAnyway I updated it so it's probably nicer and definitely more clean right now, and as you suggested I reverted from exposing configuration object, it doesn't make sense, now steps can only be passed via options.steps to impress.init.\nAccording to validation, it's based on how native ES5 functions behave. If they expect number, then they always filter input argument throughNumber. Incorrect value will then become NaN, and here to not be too strict I fallback to default setting in such case. I'm checking mostly via isNaN(value) and not !value to not dismiss valid 0 value.\nI cannot change target branch, so I'm closing this pull request and I'm gonna open new one for integration :)\n. Substeps indeed are mandatory (in my opinion) - as an option, so you can easily switch whether to use them or not, it's good to use them in presentation but later when you give a link to it, it may make no sense to show substeps.\nI've once written some quick implementation for impress.js, which worked quite well. I'll see if it can be easily ported now and eventually propose a pull request.\n. @bartaz valid points.\nI refrained from using .bind at first, to not to introduce shim just for this case, and other thing it's not that easy to come up with really good bind shim, introducing such should be done with care as users may want to use other tools with impress. However as lib will expand we can clearly benefit from bind so I've added best shim I know for that\nVariable names are indeed not consequent, but I just wanted to change as least as possible from your code, I would rather call this pull as first step of transition into more organized code base which I think it's best if done step by step.\nLet me know how you would like to have impressEl variable named.\nValidation, I thought about that as well, but I guess I just wanted to present it in more direct way for you, but anyway I took out abstraction into two separate functions. Of course we may use simpler algorithm, but the way I've done it's probably the only bulletproof and up to ES conventions way to do that.\n. @bartaz according to cleaning up, have you thought about separating project into different files ? I mean just for development, similarly as e.g. jQuery is maintained.\n. @jhiner1978 it's plain HTML/CSS/JavaScript and impress doesn't block any functionalities.. just configure it the way you would configure it for regular website\n. @bartaz I'm not sure about convention, usually event names are written without any separators e.g. mouseenter instead of mouse-enter. Other thing is, I would distinguish impress somehow as a namespace with colon separator, so my proposal would be impress:init, impress:stepenter, impress:stepleave.\nAnyway, why you decided to use events on DOM elements and not on impress object? You prefer to keep code smaller without any event-emitter implementation?\n. Yes, indeed bubbling is useful, I see in your implementation that I can observe enter on specific slide or on any of the slides when attached to container, nice :)\n. @bartaz I removed setTimeout as with window.history you don't have same issues as when updating window.location. When using history browser doesn't react in any way to url change, so this hack have no purpose and just clutters the code.\nI use History API in big complex application that is targeted also for Safari and iOS, and it works flawless there. I'm pretty sure 3D CSS transitions have worse browser support and History API won't reduce number of browsers on which impressjs would work.\n.. but sure test it :)\n. Indeed without timeout transition is jumpy in chrome, I brought it back.\n. Twitter is also gonna use History API instead ;-)\nhttp://www.2ality.com/2012/02/twitter-pushstate.html\n. back from vacations\nI was surprised to see your comments as I remember I've tested loading url's with anchors. However I tested it just by reloading page and not by loading new url from address bar, and that's when that issue appears.\nIt looks that webkit scrolls to element after all dom content is loaded, and that's after  impress is initialized. Easy fix for that would be:\njavascript\nsetTimeout(function () {\n  window.scrollTo(0, 0);\n}, 0)\nHowever yes, we still have buggy behavior on iPad (which (shame on me) I didn't test then). Whenever we load presentation through url with hash, presentation is very jumpy, I'm not sure if this can be fixed, so it's good that after all you didn't take it.\nSorry for troubling you with that.\n. @bartaz where did you get that notion? goto is not on any reserved words list -> http://es5.github.com/#x7.6.1.2\n. Other thing that needs to be added (I've doubled checked that now) is that in ES5 reserved words can be used as property names, so even if goto would be on that list, it still would be safe to use it. :)\n. It might be easily fixed by checking event.target I guess, if it's input, textarea.. etc.. no action\n. Indeed, probably best would be to track focus and blur on document. Key events are usually triggered on element over which you hover with mouse pointer (if I remember correctly), so having input[type=text] as event.target may be false positive.\n. In some browser it had, some time ago I was checking some stuff on Opera, and it worked that way, I wasn't sure whether it's standard or Opera quirk. Now I checked Chrome and it always refers to body. Anyway if you decide to rely on focus/blur events, it's not important whether browser behaves like that or not\n. See comments in https://github.com/bartaz/impress.js/issues/119\nIf JSLint or Google Closure Compiler still complains about it, you should rather file an issue there :)\n. ",
    "commadelimited": "I'd just like to see something as simple as an onchange event. Fire that event when the slide loads so that I can trigger custom js on a slide by slide basis. \n. ",
    "mariusa": "Pardon my ignorance. I've tried to use goto() without success, by passing to it either $('#bored').get() or other variations. \nHow can it be used to jump to a div with id=bored ?\n. Hi\nIt does work when used at the toplevel of the doc, but not when inside a function handling onclick. e.g.\nimpress();\n$('#bored').bind('click', function(event) {\n    console.log('clicked')\n    impress().goto( document.getElementById('title') )\n})\n\n\nI've created here the testcase above. When clicking on the 1st slide, it shows 'clicked' in console but it doesn't jump to title.\nhttps://gist.github.com/1977671\n. Ah, got it. Makes sense now. Thanks.\nI have the following presentation type: a 'step' with a list of items, and clicking on each should go to a specific detail 'step'. However, next step after a detail step should be the list again.\nTherefore, it would be nice for impress to support \"data-next\", \"data-prev\" attributes for steps, similar to \"data-x\", so one doesn't have to use the api for these simple flows.\n. No, I navigate with keyboard arrows\n. ",
    "sokra": "bartz is correct.\nyou can also use methods which prevents the other click handlers from being executed:\nhttp://api.jquery.com/event.stopPropagation/\nhttp://api.jquery.com/event.stopImmediatePropagation/\nhttp://api.jquery.com/event.preventDefault/\n. there was a pull request for that https://github.com/bartaz/impress.js/pull/61 but i don't think it will merge anymore.\nConsider https://github.com/shama/jmpress.js for such a advanced use case (sorry for advertising @bartaz )\nhttp://shama.github.com/jmpress.js/docs/#route\n. an example for adding css3 skrew\n``` javascript\nfunction onReadStep( element, stepData ) {\n    var data = element.dataset;\n    stepData.skrew = {\n        x: data.skrewX || 0,\n        y: data.skrewY || 0,\n        z: data.skrewZ || 0\n    };\n}\nfunction onPostprocessStep( element, stepData ) {\n    add stepData.skrew to element.style\n}\n``\n. @bartaz i think you may want to change the default integration branch. \nyou can change it in \"Network\" -> \"Fork Queue\"-> \"change it\"\nbut i may be wrong and this is not the correct option for that\n. we use the attributedata-jmpressto realise substeps, i.e.data-jmpress=\"fade after 1s\"`\nhttp://shama.github.com/jmpress.js/docs/#docs-animation\nhttp://shama.github.com/jmpress.js/examples/animation/#/basic\n. I think this introduce some bugs in webkit browsers.\nconsider this url: http://bartaz.github.com/impress.js/#one-more-thing\nthe bug is not new, but now you create such urls...\nThe problem is that the page is scrolled to the div, the prefixed slash was a good workaround...\n. I've tested it on Chrome :(, Safari :( and Firefox :). Seem to be a webkit issue.\nNavigation inside is ok, the only problem is open a link with hash...\n. We have a rotation reset in jmpress.js, which automatically adjusts your transitions between angles 360deg -> 0deg.\nHere is a cube: http://sokra.github.com/jmpress.js/examples/cube/\nUse left, right, up and down arrow keys.\nYou can rotate the cube infinite, because rotation is automatically adjusted ;)\n@bartaz You can use our code (https://github.com/shama/jmpress.js/blob/master/src/components/transform.js#L200) if you want to integrate it.\n. i think you have copied the demo stylesheet which contains \ncss\nol, ul {\n    list-style: none;\n}\njust build your own stylesheet...\n. The simplest way to achieve the effect of impress.js in a container is to put it in a iframe.\nThere are several other things you have to do if you really want it in a native container...\n- keybindings\n- scroll fix\n- css\n- hidden overflow\n- maybe multinstanceable\n. yes but it is not worth fixing it. A iframe works as well...\nhttp://shama.github.com/jmpress.js/examples/container.html\nhttp://shama.github.com/jmpress.js/index.html#/showcase-jmpress-nested\n. I was spending weeks stealing your issues, because i had nothing to do beside preparing a presentation...\nIt was a good javascript practice ;) ... do some node.js project now, so it was worth it...\nWe have to give you big credit. impress.js is such a great idea from you. Thank you very much. :)\nIt is only a issue of time...\n. @stunjiturner great... using an iframe shouldn't be too complicated :-)\n@bartaz it's great to have two versions. One lightweight for 90% of the usecases and one for the other 10% with additional features.\n. hey,\nyes indeed we something for that ;)\njavascript\n$(\"#my-step\").data(\"stepData\").rotate = 0;\n$(\"#jmpress\").jmpress(\"reapply\", $(\"#my-step\"));\nmore a advance function... mostly used for plugins (see https://github.com/shama/jmpress.js/blob/master/src/plugins/secondary.js)\n. #119\n. ",
    "MapeWave": "Hi..i need some help .. In my impress.js presentation i'd like to create a connection between two specified steps, the point is i want that ONLY when i'm in the 3rd slice(step-3) just pressing 'Return'(keycode=13) on my keyboard i go straight to the 6th one(step-6). What i've done till now allows me to do it..yeah..but during the whole presentation! while i want it working just on the third step..i know that something is missing in this part of code i wrote so i'll really appreciate if someone could have a look :\ndocument.addEventListener(\"keyup\", function ( event ) {\n            if ( event.keyCode === 13 ) {\n                switch( event.keyCode ) {\n                   case 13: // invio-enter(13)\n                             api.goto(\"step-6\");\n. ",
    "yurijmikhalevich": "goto should have a callback\n. ",
    "clvv": "Updated. Hard time finding any image hosting service, putting it on my website for now.\n. I just tried it on the latest Google Chrome Beta and Dev. And it's broken even on the first visit.\nAnything I can do to help? I'm trying to figure out what is going on with my limited Web dev knowledge.\n. http://pastebin.com/p0U0x8Z8\nHope this will do the same thing. By the way, no error output from js console.\n. And here is a video play through, maybe it will be helpful. http://wei23.net/impress.mpg\n. It seems like a Linux Chromium bug: http://stackoverflow.com/questions/8627707/css-3d-transforms-works-at-random-in-chrome-16.\n. Turns out Chromium blacklisted my GPU and refuse to do any 3d CSS transformations (no z axis stuff). And the solution is also pretty easy: turn on \"override software rendering list\" option in \"chrome://flags\". Now I can go on to create my first 3D presentation. Thanks for the great tool!\n. ",
    "ysangkok": "GPU blacklist available here: http://src.chromium.org/viewvc/chrome/trunk/src/chrome/browser/resources/gpu_blacklist.json?revision=75130&view=markup&pathrev=75130\n. ",
    "liamks": "I ran into this issue today. Yesterday, and this morning there were no problems with 3d CSS transforms, but on seemingly random page refresh the 3d transforms stop working (even with repeated reloads). I used @clvv's solution and it fixed the problem.\n. ",
    "german": "Hello, adding automatic slide changing to impress.js would be great indeed, but imho definitely without progress bar (maybe some timer with clock-face implementation will do).\nThanks.\n. ",
    "XayOn": "I don't agree that the bar is bad, for some slides you might need to say \"Ey, your time is running up\", for example when (as myself did) you organise an event with multiple speakers!\n. 2012/3/14 Bartek Szopka\nreply@reply.github.com:\n\nThat's a responsibility of a speaker to keep his time.\nPersonally, I use a timer on my phone that simply shows me how time is left.\nIndeed, I do that also, but if you've got a big screen, public usually\nwants that kind of stuff ;-)\nAnyway, I don't have anything against timer and progress as some kind of extension to impress.js, but I don't see the place for it in the core functionality.\nI completly agree with that, impress.js core should not have this kind\nof specific stuffs.\n. \n",
    "fearphage": "Shouldn't the iOS touch support commit be on a separate ticket?\n+1 for scrolling support though\n. ",
    "danzimm": "Oop my bad didn't mean to push that! I'll roll it back later today (note that the scrolling isn't smooth - as of yet)\n. ",
    "lioshi": "Yes, thanks.\nI've slugified the id, and pics more light too. Runs great.\n. ",
    "lucjan": "Hi,\nYes, I've just noticed it as well. There's a small lag on each slide when I view the demo (2.2 Quad i7, 8GB RAM, Chrome 16.0.912.75)\n. ",
    "DWboutin": "Ok! Tanx for the reply, if it have worked on safari i have make a finger event myself! Ill follow your developpement\n. Thank you ^^ Your plugin is awesome :D\n. ",
    "Haacked": "Yeah, I'll send a new pull request. :)\n. Understood, I've been using this for a presentation and it's really limited. What approach do you plan to take?\n. ",
    "OpenGrid": "I added it because I will use it in my own presentation - it's useful. I don't have Logitech presenter. Wireless mouse is good enough to change slides.\n. @oskarkrawczyk Worked for me just fine in my presentation. Why you would use touchpad during a presentation?\n. ",
    "oskarkrawczyk": "@fmate14 has a fair point.\nPlus, this type of navigation is insanely buggy while trying to navigate with a touchpad - pretty much just picks a random slide. Imagine this happening durning a presentation, in front of an audience. \n. ",
    "hersonHerson": "Well, I think about the fact that if the step is bigger than the screen height, is better to scale it than only see a part of it.\n. That's a good idea too, you just need to calculate what's the maximum height of all the steps and resize them all with that interval. Is like make a zoom of all the presentation.\nWell, that's all that I wanted to say.\nBye, may the source be with you.\n. ",
    "ramsesoriginal": "I think this would be an awesome improvement. There's just one small part missing: if you scroll through the slides (using the scroll wheel) it does not jump from #overview to #page1, but it continues to #feature1. \nAs far as I understand it, the part to change would be https://github.com/fmate14/impress.js/blob/master/js/impress.js#L331-336 ..\n. ",
    "x3ro": "+1 This would be pretty useful, especially if, for example, you are creating a presentation and you don't know what resolution the beamer will have, etc.\n. ",
    "dolanor": "My first pull request. Which has actually been merged. I'm so emotionated right now !\n(And without kidding, thanks for your job, seems awesome. I need to do presentations now :D)\n. ",
    "austinbv": "I decided to make it class because I feel like data attributes for a booleans are a little over kill.  It also allows for styling if you fall back to a non-compatible browser.  \nAs for location I played with both spots an am a fan of minimizing variants.  Inside the selectNext/prev you would need a bunch of duplicate code. The other disadvantage is in the selectNext because the function does not take a parameter the next previous elements rely on the active slide it would require either changing the core functionality of these functions or making a slide active even when it's a skip.  I didn't like doing either of those.\nAnyway good luck great lib\nOn Jan 20, 2012, at 2:44 AM, Bartek Szopkareply@reply.github.com wrote:\n\nYes, that kind of functionality was already requested and I'm planning to add that in the future.\nI'm not sure at this point if elements to skip should be marked with additional class, or with another data- attribute.\nI also think that functionality of 'skipping' doesn't belong to select function, but more to selectNext and selectPrev functions.\nSo I'm not merging your pull request, but I'll keep it here open to remind me about this functionality.\nThanks!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/pull/66#issuecomment-3580189\n. I have been thinking a lot about this I do not like the class step in a slide that will be skipped if you visit\n\nhttp://austinbv.github.com/impress.js#full-circle\nYou can see the words on the outside are never visited, instead they are just a tool for the zoomed out step.\nIt seems counter intuitive to name something step when well... it's not.  Instead either I think impress should take on a different class name for the slides or have a class name that is not step for skipped presentations.  I have submitted another pull request with a data-next to skip but I am not that happy with how it looks in the code.  \nI didn't mean to but I deleted the branch or I would have stayed in this pull\n. Sorry about the whitespace, I thought I had turned off the auto trimming :).  What do you think would be better if not a data- attribute, and not a class.  When a boolean is used I figure typing a value is really overkill and just dirty for markup.\nIf you have a better solution I would not mind implementing it.  Otherwise I think having a class skipped-step is the cleanest way.  That way the div doesn't have to be labeled a step and you don't need a valueless data-*.\n. ",
    "felixrabe": "Hey, I've forward-ported the .skip patch because I liked it and suits me well. See #290.\n. ",
    "acasademont": "Hi bartaz! Thanks for taking this into account. I just needed a quick fix for a presentation i am working on so i did it this way :)\nThe millisecond thing was only for convention with the jQuery way of defining animation durations, i find it easier to \"think\" in millisecons as i am very used to that library. Feel free to change it!\n. ",
    "mmalecki": "I think that using event emitter pattern would be better here (I like EventEmitter2). Or, you could use broadway (a \"framework\" for plugins).\n. ",
    "dwiash": "Cool!! thanks for the notice :)\n. ",
    "dexkz": "Sorry :) Fixed in the last commit\n. But it seems strange, the render is different\n. ",
    "kwhinnery": "I think the public JS API is a good solution, but don't you think that a navigation menu is common enough to include in the core?  If I have 30 slides, I will without question need some kind of visual way to swap between them, as I won't be able to remember the IDs of all my slides.\n. No, I grasp how you can create custom navigation, and it is pretty easy - but don't you feel that a majority of users will want to build in such navigation?  If so, it might make sense to provide some mechanism for generating navigation dynamically.\nKevin Whinnery\nDirector of Developer Relations\nAppcelerator Inc.\nhttp://www.appcelerator.com\nhttp://kevinwhinnery.com\nhttp://twitter.com/kevinwhinnery\nOn Jan 28, 2012, at 7:52 AM, Bartek Szopkareply@reply.github.com wrote:\n\nI don't know what you really mean by including navigation menu in the impress.js core.\nIt's already possible (even without the API) to build such menu.\nAs in the example I have given above - if you create a link, with step's id in href, clicking on it will move the presentation to this element. So all you have to do is to create some navigation element with list of links to all the slides.\nAnd you can put it anywhere on the screen, you can toggle it with some keyboard short-cut. Or whatever you can do with CSS and JS.\nYou can see the example of http://www.alingham.com/ site that uses such navigation.\nI don't want to force any navigation type or behaviour for users. So this simple functionality is everything I think is needed in impress in this terms.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/issues/79#issuecomment-3700333\n. You're correct, I haven't done any research - navigating the presentation is a self-evident need from my point of view, but I think we've established that we differ on that point.  \n\nYour repo, your rules.  Thanks for making this code available!\nKevin Whinnery\nDirector of Developer Relations\nAppcelerator Inc.\nhttp://www.appcelerator.com\nhttp://kevinwhinnery.com\nhttp://twitter.com/kevinwhinnery\nOn Jan 28, 2012, at 2:18 PM, Bartek Szopkareply@reply.github.com wrote:\n\nI haven't done any users research about it and I really don't think that you've done one, so it's probably just my point of view against yours ;)\nFor me impress.js is a presentation 'engine'. Presentation has it's flow - the order of steps. There is no need to navigate to random slides during a presentation.\nIf in the end of the presentation you'd like to have a simple way to go back to any slide (for example to show it again during Q&A) you have two options - make the last step an overview (like in impress.js demo) so you can click on any step to select it, or create a navigation (as discussed above).\nAutomatic navigation generation is not a necessary feature for impress.js. I don't want users to hide or disable it just because sometimes it is needed, when all you need to build it is a piece of additional HTML or (if you don't want to do it in HTML) a couple of JS lines:\n``` javascript\nvar links = \"\";\n[].forEach.call(document.querySelectorAll(\".step\"), function( el, idx ){\n   links += \"Step \" + idx + \"\";\n})\nlinks += \"\";\nvar nav = document.createElement(\"nav\");\nnav.innerHTML = links;\ndocument.body.appendChild(nav);\n```\nWith jQuery it would be even less code ;)\nAnd even with this simple piece of code it's already clear that it's not always obvious what should be in the links text - how should script know what is the title of the step?\nAnyway. I understand that you may have a different opinion on that, but I don't see this as a core feature of impress.js.\nAnd I made it open source simply to allow anyone add anything they want and find useful. But it doesn't mean I'll put every single feature into my code.\nFor me, less is more.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/issues/79#issuecomment-3703172\n. \n",
    "gossi": "Hehe, yes I do understand you :) Nevertheless as \"traditional\" slides are possible, this makes sense. My last presentation (the first one with impress.js) was kind of a hybrid and I could have used them, went well anyway though ;)\n'action' may also a good candidate for this.\nAnd another extension which goes in combination for this, it's like adding a javascript call into the \"keyboard navigation\", which is kinda impossible in any of the html/javascript slides I've seen. Because something like this is not good:\n<script class=\"action\">\n// do something here ... because it will be run after pageload.\n</script>\nMaybe something like this makes sense:\n<command class=\"action\" on...=\"doSomething()\" data-action=\"doSomething()\"> maybe something like this with an on* attribute or the data-action attribute with a javascript function to call.\nWhat do you thing?\n. Another use-case for actions would be to run animations. At the moment animations are timed by a delay in the css. If you are running a presentation, open up a new step talk a bit and you will then run an animation I would like to trigger it by hitting the next button or click with the mouse.\n. I was looking into different other html5 presentation toolkits right now. Some things I really like in reveal.js that may be applicable to that use-case:\n1. It calls substeps fragments, which is a good candidate I think, I like that word. If you have an element with class=\"fragment\" that appears after the next arrow.\n2. With html you can use the attribute data-state=\"blabla\" and then register a javascript listener, like this: Reveal.addEventListener('blabla', function() {...}); to react with javascript on the users next action.\nReveal.JS: http://lab.hakim.se/reveal-js\n. ",
    "gregmac": "You could potentially add a \"step\" javascript event, so that you could do, for example:\nhtml\n<div id=\"part5\" class=\"step\">\n</div>\njavascript\n$('#part5').step(function() {\n   alert('step 5 was shown');\n});\nA user could potentially then write handlers to attach to every step, or whatever jquery selectors they want. Going further, there could be a few events: beforeStepStart, afterStepStart, beforeStepEnd, afterStepEnd.\nGives a javascript developer a lot of power, without actually baking much extra into impress.js itself.\n. ",
    "enyo": "I just wanted to say that I would love to see substeps as well... I have a few slideshows that I would like to transform to impress.js, but they all have sort of substeps that appear only step by step (arrows, descriptions, instructions, etc...)\nI agree with you that it's a bit \u00abpowerpointish\u00bb, but at the same time it's a great way to not overwhelm the user with too much information at once. And changing the slide every time is harder to keep focus.\n. ",
    "qingyuan1109": "The first problem I encountered was how to add substeps when I try to learn and make my first small presentation by impress.js today. It's better to show step by step sometimes.\n. ",
    "adrocknaphobia": "+1 on sub steps. Need them ASAP.\n. ",
    "emarc": "This was actually the first thing I realized I needed too - and I ended up implementing it before I found this issue. \nMy implementation is a quick-and-simple one, but I thought I'd mention it here for, uhm, possible inspiration?\nBasically, when a step is activated I add a \"hidden\" classname to all sub-elements with the classname \"point\" (yeah, needs renaming), then when next() is called it removes that classname until there are no \"hidden\" elements left, then advances to the next step.\nThis way you can do CSS animations etc, just like you would when the step is activated. Also, since \"hidden\" is added by impress.js, the elements will show up if it's not up-and-running.\nI set it up so that the sub-elements are only hidden when going forward, so when you go back a step (\"oops\") everything is showing.\nThis has worked pretty nicely for my case, while being a quite minimal implementation.\nI'm guessing you'd want to modify my code, since I wanted to make really minimal changes and ended up adding a few lines to goto(), prev() and next(). It could be made more beautiful by adding the functionality 'deeper'. But having said that, I could provide the changes, if you want to take a look...?\nAwesome project, by the way - keep up the good work!\n. ",
    "joefiorini": "I'm not sure if this concept is the same as what you call sub steps, but I'd love to be able to show a high level overview of a grouping of steps and then zoom in on them and start iterating through them one-by-one, with the ability to jump up a level as needed to remind the audience of where we are in the talk. That would be great for helping the audience follow my talk as I'm speaking. This seems like what sub steps would solve, but this idea doesn't seem \"Powerpointish\" at all. Quite the opposite in fact, transitioning from step to step in a liner fashion seems more Powerpointish than that. Am I misunderstanding something here? Can impress.js do this?\n. ",
    "timonf": "+1 for substep usage like in the first comment here!\n. Same here. I want to use some form fields for creating a more interactive presentation.\n. ",
    "aurelien-naldi": "I like the \"fragment\" class from reveal.js and I'm experimenting with it in impress.js as follow:\n- when entering a step, add a \"future\" class to all of its fragments\n- modify next() to start by looking for the first \".fragment.future\" in the current step and remove its future class instead of moving to the next step.\n- remove the future class when leaving a step\nAs the prev function is unaffected, calling prev will jump to the first state of a step, which makes more sense for me.\nIt adds 5 lines in 3 different places of impress.js and should be enough for simple cases.\nI see 3 obvious improvements:\n- add a class like data-fragment-order=\"n\" to set an order explicitly (plus group some fragment activations together)\n- add \"present\" and \"past\" classes to fragments to make it easier to make them appear then vanish. all fragments of the current step would have one of these classes. Fragments of other steps would have none.\n- trigger a \"impress:fragment\" event for complex cases\nDoes it make sense and more importantly, is there any chance for this or something similar to be integrated?\nIf yes, I can improve it a bit and propose a patch :)\n. ",
    "mayconbordin": "I needed to trigger some functions when my presentation reached certain step, like start playing a video or something like that, but I didn't wanted to modify the library code, so I tried to use backbone.js's Router, and it works.\nI'm sure there may be better ways to do that, and with this solution you still can't have substeps.\n. ",
    "Thomas131": "+1 Substeps\n. ",
    "briceparent": "You might want to give a try to https://github.com/bartaz/impress.js/pull/215 .\nIt allows the use of substeps the same way impress already works (no javascript skills required), and now offers events handler for those who want to execute some js when substeps are entered or left.\n. I've just noticed that my previous commit (the one proposed here) was not well done. My IDE had added and removed some spaces at the beginning of many lines, make the commit way bigger than needed.\nI'm closing this pull request for opening a new one with a cleaner commit.\n. Hello!\nYou may already create your own table of contents that appears using either css or js, containing links to the steps (only the hash part of the url changes).\n. You could apply the patch you can find in https://github.com/bartaz/impress.js/pull/190 .\nIt should do the trick.\nIt doesn't show other steps in the background, but lets you have sub-steps (steps that contain some kind of inner-steps). So it\nshould answer you 2nd question, and maybe your first.\n(look at the demo to be sure it's what you need)\nBrice\n. Hello!\nI've proposed something which I think looks more or less like this in https://github.com/bartaz/impress.js/pull/190 .\nMy version of it is not really meant to be used by javascript devs, but mainly by designers, as it doesn't require any javascript skills, just html+css, so i think those ideas might complete each other (by the way, we both used a special argument, but not the same (i used data-multistep).\nI'll take a deeper look into it as i might have to use it too!\n. There is a way to try this event handler :\nJust add the following code right after the .fallback-message div : \nhtml\n<script>\ndocument.addEventListener(\"impress:substepenter\", function (event) {\n    var substep=event.target.getAttribute(\"data-active-substep\");\n    document.getElementById('events_debugger').innerHTML = 'Entering substep '+substep+'<br />'+document.getElementById('events_debugger').innerHTML;\n});\ndocument.addEventListener(\"impress:substepleave\", function (event) {\n    var substep=event.target.getAttribute(\"data-active-substep\");\n    document.getElementById('events_debugger').innerHTML = 'Leaving substep '+substep+'<br />'+document.getElementById('events_debugger').innerHTML;\n});\ndocument.addEventListener(\"impress:stepenter\", function (event) {\n    var step = event.target.id;\n    document.getElementById('events_debugger').innerHTML = 'Entering step '+step+'<br />'+document.getElementById('events_debugger').innerHTML;\n});\ndocument.addEventListener(\"impress:stepleave\", function (event) {\n    var step = event.target.id;\n    document.getElementById('events_debugger').innerHTML = 'Leaving step '+step+'<br />'+document.getElementById('events_debugger').innerHTML;\n});\n</script>\n<div id=\"events_debugger\"></div>\nand add some substeps (adding data-multistep=\"class_for_substep1 class_for_substep2 class_for_substep3\" to any step, and go browse it. All events will be shown on the top left of the screen.\n. piranna: I'm not sure I really understood what you meant... Anyway, the way i've created it allows to use substeps with only CSS, only JS, or with both of them together. \nThe example I've inserted in the example is the CSS-only example, but you might just add the data-multistep argument and use the event handlers to execute any JS on the loading or unloading of any substeps. In other words, this multistep implementation works just the same way as the rest of the impress.js script, but inside the div of a step.\nIf there are use cases in which this implementation fails, please let me know, I'll see what I can do. \n. But the action that is made is to add a class to the step, not to the substeps. We even may have no elements inside the step. Use cases are : \n- Like in the example, we have divs with some css properties which evolve everytime the user presses [space], like making them appear/disappear or the step's background color changes. This is a html+CSS only functionnality and we're not required to only make a div appear, we may do whatever we want inside the step!\n- The step only contains a raphael.js image (like say a bargraph), which when we press [space] is morphed to another image (like the same graph but with other values). This is a html+javascript functionality. There is no need for any element with the class \"substep\" that would appear in the middle and not be of any use.\nTo do the same, we might think of setting a number for the value of data-multistep, and adding a class of substep_[num_of_the_substep] to the main step, but i don't see a real improvement here...\nI hope i've explained myself well, as english is not my mother language (as you might have noticed...).\n. Hello ! \nI'm not using Impress anymore (not that I've replaced it with any other lib or technology, I just happen not to have the use for it). \nWhen I opened this, it was just to propose my way of having substeps working like I needed it. I'm not sure if the problem and the solution are still relevant, or if my implementation is the one you need.\nFeel free to keep this open and merge it if you feel like so, but don't do it for me as I probably won't find time to help you with it.\nBrice\n. ",
    "ciembor": "+1. I have some huge UML diagram in img element and I need to move between it's classes. Substeps would solve this problem.\n. ",
    "aruizca": "+1\n. ",
    "wecacuee": "Here's my two cents to handling this problem:\nInside impress.js\n1. Have a optional custom attribute 'slide-states'=n for each slide.\n2. Throw a custom event 'nextSlideState' n times before moving to next slide.\njavascript\n  var slidestates = slide.getAttribute('slide-states') ;\n  if (slidestates > 0) {\n    var evt = new CustomEvent(\"nextSlideState\",\n    { detail : { curSlide : slide, curState : slidestates },\n      bubbles: true, cancelable: true});\n    document.dispatchEvent(evt);\n    slidestates -= 1;\n    slide.setAttribute('slide-states', slidestates);\n  } else {\n    nextSlide();\n  }\nUser code:\nAdd listener to nextSlideState. Has the additional flexibility to handle states as it likes. We can have a library of custom handlers which reduces the overhead of simpler cases like building simple lists in order.\nhtml\n<ul>\n<li class=\"state1 hidden\"> shows in state1 </li>\n<li class=\"state2 hidden\">shows in state2</li>\n<li class=\"state1 hidden\">shows in state1</li>\n</ul>\njavascript\n  var nextState = function(e) {\n      var slide = e.detail.curSlide;\n      var remaining_states = e.detail.curState;\n      var thisState = \".state\" + remaining_states;\n      var toBuild = slide.querySelectorAll(\".hidden\" + thisState);\n      for (var i = 0; i < toBuild.length; ++i) {\n        var toB = toBuild[i];\n        toB.classList.remove('hidden');\n        toB.classList.remove(thisState);\n        toB.classList.add('current');\n      }\n  };\n  document.addEventListener(\"nextSlideState\", nextState);\n. ",
    "jejb": "It would be great if there were a mailing list for this, since github's bugzilla doesn't even allow attachments, but this is how I did it: I used a different type of slide class called a build, which allows you to add stuff to an existing step, as many things as you want, including per build animations (like thinks flying in or rotating).  The code is fairly easy for steps, but gets messy for disjoint navigation:\nhttp://git.kernel.org/cgit/linux/kernel/git/jejb/impress.js.git/commit/?id=de9f8e20717b76ace9a546488f27f932bfb690b1\n. Turns out I needed this feature as well.  This is my implementation:\nhttp://git.kernel.org/cgit/linux/kernel/git/jejb/impress.js.git/commit/?id=46f041b7340cba58356e7782bf3d7377ae278530\nIt uses a data-relative tag which is either relative to the last slide or to a named previous slide\n. ",
    "misterbrownlee": "I implemented substeps in a fork.  I am trying to keep it current with impress.js as it make sense, with only my substep code added.\nYou can see more, grab the code, or fork it here: \nhttp://github.com/tehfoo/impress.js\nYou can see the diff of how I implemented substeps here:\nhttps://github.com/bartaz/impress.js/pull/280\nI don't expect the pull request to be merged, but it's a good reference for one approach to substeps.\nHTH :)\n. Thought I'd add an easy link to see this working in my pages branch:\nhttp://tehfoo.github.io/impress.js\nThanks @bartaz for the great tool!\n. Hey @rubik!  Glad it's useful to someone!  I'll try and keep my fork up on changes so at least if the pull request never merges my version of impress.js won't be too far behind.\n. I merged a pull request that fixed a bug in my code.  I also tried to keep everything else updated with upstream master, which is why the diff on this pull request is getting noisy.  If there's an interest in merging this, I'm happy to start a new pull request that's cleaner.  The diffs that matter most are js/impress.js, substep.html (the example), and css/substep.css (for the example)\n. ",
    "edouardmenayde": "I agree this would be a good feature :-)\n. ",
    "bioinfornatics": "@tehfoo  why you don not do a pull request ?\n. ",
    "patricebeutler": "I am working on a solution for this problem. Basically with this solution there is the possibility to add javascript functions as \"tweensteps\". In this functions you can do whatever you want. Also, there are functions for reverse the changes done by these step-functions. When the work and the testing is done, i will file a pull-request or create a fork. \n. @Announcement Thanks for the hint. My fault. I corrected it. \n. Hey people. If you need this now take a look at my fork: https://github.com/patricebeutler/impress.js. Its exactly the same beside the supsteps-feature. Let me know what you think. The demo is updated, so you can download it and take a look at it. Should be pretty straight-forward.\n. Thanks for your quick response.\nAt first we implemented the two functions for directly handling substeps (addActionToStep and addResetActionToStep). This functions are not events at all and only are used for the handling of the substeps.\nAt this point everything worked fine. As you noticed, there are also the two functions \"addEnterActionToStep\" and \"addLeftActionToStep\". These functions were implemented for usability-concerns and integrity. It is correct that these are like a wrapper for the impress:stepenter and the impress:step:leave events (with the difference they take the id of the step for binding them directly to a step).\nWith these function you can, as a user, write (pseudocode)\naddEnterActionToStep(\"someStepId\", function(){\n    // Some code here\n});\ninstead of\naddEventListener(\"impress:stepenter\", function(){\n    if (step.id == \"someStepId\"){\n        // Some code here\n    }\n});\nOr in different words: We thought it would be cool for the user to have this possibility. But still, if the user wants to execute code when each and every step is entered, the \"impress:stepenter\"-event still would be needed.\nIf you think the \"addEnterActionToStep\" and the \"addLeftActionToStep\" are not required for the user, it is easy for us to remove them from the api. The substeps-feature would still work, but the user would have to use the \"old\" way to bind \"stepenter\" and \"stepleave\". This is not awful, but it will result in more lines of coding for the user, since these events are used more as soon as you have substeps. Also, we dont know if every user of impress is able to subscribe to an event and then use an if-statement to determine if the event was fired on a specific slide or not (you know your userbase better than us).\nLet me know what you think, thanks again. We are happy to do changes as you like and then file a pull-request again.\n. Oh I see now how this works. Our fault. Perfect, the removal of these functions will make the code even smaller. We will remove it in a few hours and then file a new pull-request if that works for you. Then you can do the review and decide if its matching your visions of impress.\n. Very good. This is my first time doing this in github, so I didn't know. Thanks for the information. Let me know what you think about the code. It is even smaller now. Slightly above 30 lines js. Thank you very much.\n. First of all, we are very excited to hear that there is new fire in this project!\nI can't answer with a simply yes or no: Yes, we are still tracking this. We strongly think that substeps are one of the most useful features and we still heavily use the pull-requested version today. Still, we aren't sure this is the best way of doing it: At the time of implementing it, our time was very limited, which resulted, from our view, in the smallest possible result: Substeps can be programmed in javascript (this gave maximum flexibility while keeping things simple). There is just one drawback: Everything besides the substeps can be used declaratively.\nWe submitted the pull-request because the project was very inactive at that time and we thought that this may help some folks. But since there is activity in this project again, I think you should first discuss the best way of achieving it (if you decide to implement substeps). If you conclude that substeps should be created programmatically (and not declaratively), this pull-request does just that (and it's already in use by a few people). So maybe you will be able to use the (or parts of the) code, If you want declarative substeps or something more fancy, I suggest you close the request.\nThank you for your work!\n. I forked and modified impress to include substeps. I also changed the documentation and the demo. See: https://github.com/patricebeutler/impress.js\nBack when I have implemented this, we needed a solution fast. So you need to do a bit of javascript (nothing complicated!).\nNote: We did this back when this repository was sleeping. The fork on my github page doesn't include any of the newly added fixes/features.\nHope this helps!. ",
    "Announcement": "Tween not steps pls\nOn Feb 20, 2015 8:27 PM, \"Patrice Beutler\" notifications@github.com wrote:\n\nI am working on a solution for this problem. Basically with this solution\nthere is the possibility to add javascript functions as \"steps\". In this\nfunctions you can do whatever you want. Also, there are functions for\nreverse the changes done by these step-functions. When the work and the\ntesting is done, i will file a pull-request or create a fork.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/bartaz/impress.js/issues/81#issuecomment-75351309.\n. The best way to do what you want to do would probably be throwing everything in an  or whatever the current standard is and handling the node, it's more of an XML based thing hacked around to work in HTML IMO according to the demonstration.\n. I think it can be done, help us push the change?\n\nOn Fri, Aug 1, 2014 at 9:03 AM, joey-di-nardo notifications@github.com\nwrote:\n\nThought this would be great; regardless\nOf where the starting slide is, pressing escape brings the view to\noverview\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/bartaz/impress.js/issues/413.\n. \n",
    "calebeby": "Any chance this will be merged?. @henrikingo Thanks for the update. That's good to hear that you are maintaining a fork. Thanks!. ",
    "naraesk": "Seems like @bartaz  doesn't have much time for this project recently. However, it would be great if a solution could be found that this repository stays at least maintained. There are several forks of it currently, can't use them simultaneously. . ",
    "ecolui": "@henrikingo - Thank you for the update.  I also did some work on the sub-steps feature that was commonly requested.  I did this by introducing two new functions (e.g. registerEnter and registerExit) that will allow the user to register any function as a sub-step inside a slide.  The ability to introduce user defined functions as sub-steps gives the user the flexibility to do whatever they want as a sub-step (e.g. growing/shrinking text, transition opacity from 0 to 1, spinning text, etc).  I committed the code to a fork of this project just for the sake of sharing this idea and the corresponding committed code (url provided below).  I am not going to actively maintain the forked version - i just forked the project in order to provide the following url.  \nhttps://github.com/ecolui/impress.js/commit/004e8b6b1ba53dac4af31e7fb3cbcbf96cbd47ea\n\nNote: In the preceding url, pay attention to the new commented code at the bottom of index.html. That commented code shows you how to use the new registerEnter and registerExit functions.. \n",
    "hbi99": "bartaz,\nI looked just now...and you're right. Since I have different indentaion-settings, it looks like I have I have re-written the whole code. This is unfortunate - because I have not. The code impact is actually minimal.\nI tried to correct the the indentation changes but didn't manage to do so.\nAnywho...if you want o use it...fine, if not - thats fine to :)\nTake care!\n. Bartaz,\nI have \"cleaned up\" with a new fork so its easier to see what's what... :)\nMy intention is to use impress on a work-project and needed better fallback for previous versions of Firefox 10. This is the reason for my addition.\nCheers\n. ",
    "joshsadler": "There's a chrome bug that sends the video (html5 or youtube embedded flash) behind any other objects inside that .step class. Works like a charm in the latest Safari and is almost there in Chrome Canary.\n. ",
    "jraicr": "Can you test it and get a functional demo?\n. ",
    "blairio": "I have had issues with videos or the default video controls showing up in certain cases. I wish I had precise examples, but I find it hard to pin down. I don't think these are ImpressJS specific issues, more likely browser and CSS Transform issues.\nTo fix this I use this CSS workaround to push it above:\nvideo {\n    -webkit-transform: translateZ(1px);\n}\nThe iPad seems to have issues playing videos as well. I've solved this in the past by dynamically injecting the video on click of an element.\n. Thanks for the fix.  Love impress.js BTW - great work!\nYes, I am referring to links in Google Chrome and maybe even Safari as well..\nCheck out this example http://jsfiddle.net/ZcgFA/1/embedded/result/\nI cannot click on the Yahoo link. Can you?\n. ",
    "ricostone": "thanks a lot blairio for this tricky fix !\n. ",
    "gaurav21r": "+1 @blairio !! :smile: \n@paulirish I know this will force chrome / blink to render video content as 3d and use the GPU. Do you even classify this as a bug in chrome / blink? If so any way it could be resolved?\n. Sure thing!! Thanks @paulirish\n. ",
    "tclancy": "Would definitely use this. I'm building a presentation and the one thing I really want (and maybe this is easy already, so let me know if I'm missing something obvious) is the ability to fade a part of the slide in after I get there. Right now I'm attaching a transition effect on the opacity once the slide gets an .active class, but it's not the smooth fade-in I want.\n. ",
    "DavidSouther": "Didn't read this until after I posted [[102]]. I implemented a speaker notes plugin, and found the only event really needed was when a slide was changing- that is, at the end of impress::goto(). The event happens before the transition finishes, as bartaz pointed out why the other is really hard.\nhttps://github.com/bartaz/impress.js/issues/102\nhttps://github.com/DavidSouther/impress.js/commit/6e80e7f51bf573c2e909ee8cA0c075e9cdb9543a2\n. Sorry for not reading #86 first, as per my comment there :)\n. This would apply to https://github.com/bartaz/impress.js/issues/102, https://github.com/bartaz/impress.js/issues/104, and possibly https://github.com/bartaz/impress.js/issues/86\n. @bartaz I totally understand. Perhaps a subproject for Impress extensions? Once [86] is complete, having a variety of extensions (speaker notes, alternative transitions, slide counts, etc) that users could pull piecemeal could be a nice thing.\n. I have an extension that stores speaker notes in a class=\"notes\" element and displays them in a new window. Google Docs Presentation does it the same way. https://github.com/DavidSouther/impress.js\n. ",
    "robinwyss": "I did something similar to naugtur.\nI added a method to show an overview of the presentation (like the overview step in your demo presentation, but it is computed, this way it doesn't have to be adjusted if the presentation changes) and one which updates a step.\nI used the mouse to select an element and the arrow keys to move it or, if the 'r' key is hold down, to  rotate/scale it. I also used the html5 drag and drop to move the elements, but i had some problems with it (only small drags worked).\nThe methods i would add to the api are:\nupdateStep(step)\naddStep(step)\nremoveStep(step)\n- the step argument could either be an id or an element.\nshowOverview()\n- zooms out to show all slides\nMaybe a method to disable the eventlisteners, this way the arrow keys could be used to edit the elements and the mouse to select them.\nIt would also be nice to be able to change the order of the steps.\n. ",
    "fikrirasyid": "Whoah. Can't wait for the public API then :D\n. Ha. I haven't checked it lately LOL Thanks for your information, I'm gonna check it ASAP! :D\nOn Feb 16, 2012, at 6:16 PM, Bartek Szopka wrote:\n\nActually it's already there ;)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/pull/89#issuecomment-3998710\n\nBest Regards,\nFikri Rasyid\n. ",
    "exequiel09": "welcome sir!  :))\n. ",
    "nhodges": "Dude, you are fast. :) Great work on the framework btw, I am perusing the whole doc right now.\n. ",
    "lightsofapollo": "I used http://alexgorbatchev.com/SyntaxHighlighter/ with impress recently for a presentation. \nI have never used google-code-prettify but there should be no limitation from the impress.js side.\nGive sytax SyntaxHighlighter a shot it works well once you hide the gutter and toolbar.\n. ",
    "japboy": "Well the problem was just because of my mistake. Sorry for bothering. google-code-prettify now works perfectly for me.\nAnyway thanks for reply @bartaz @lightsofapollo \n. ",
    "richardneville": "By the way, did you know that Bitcasa use impress.js for their introduction welcoming new users? I can't actually find the link now. You have to sign up to Bitcasa at bitcasa.com and then you get the link once you've finished installing.\n. Great - thanks back!\nWe're doing something fun with impress.js at the moment... Our coding is embarrassingly bad (at the moment!), but we're having good fun making something that looks great.\nI'm new to Github... if we make something you might be interested in, shall I message you on here, or do you have an email address I can use? Or Twitter...? I won't bug you too much, I promise - I'm sure impress.js is keeping you busy!\nimpress.js is absolutely great. Efficient, lightweight, and very very usable. I'm sure you're proud of your great work, and it looks like lots of people are getting interested.\nCheers,\nRichard\n. Thanks - I had a quick look at jmpress... but I rather like the way impress.js doesn't require jQuery.\nI'm probably being fussy, but what we're doing with impress.js will use a lot of graphic processing... so I figure it can only be an advantage that impress.js is so small and efficient.\nBy the way, we're very interested in iPad and mobile device support. I'll keep up with the various Pull Requests and Issues via Github - but if you have any clues about future intentions for impress.js I'd love to hear (e.g. when you're planning on new releases, and any new features).\nOnce we've got a bit more up to speed with Github, and tidied up our stuff, we'll see if there's anything we can do to help you. We'd love to help if we can :-)\nRichard\n. Yeah, thanks for the emails... On a Saturday night and everything ;-)\nWell, we're not mobile developers, but it's important to us, and we've got all the devices you'd want it to work on: iPad, iPhones, Android devices. And, yes, you're right, Android is still pants.\nWe'll see if we can come up with an elegant solution for mobile. Looks like it'll be all about auto-scaling - which I think impress.js needs, really. I know @fmate14 had a go at that - and that was useful, I thought.\nWill let you know how we get on. Great that you're being very strict about what you do and don't incorporate into impress.js, by the way. Keep it pure and perfect!\n. ",
    "astanley": "Ah very cool. Happy to help anyways, I look forward to your official changes. We should have had you at BlackBerry DevCon last week in Amsterdam!  There were very many developers from Poland there.\nYes the PlayBook has HDMI support. You can plug a micro-HDMI into a supported device (projector, TV, whatever) and it will project from the Tablet OS homescreen.  Here's an example: http://www.youtube.com/watch?v=0C3DV4dfTJQ\nPlayBook also has hardware-accelerated CSS3, so the transformations in impressJS are niiiice and fluid.\n. Yes, Marius was a speaker at DevCon!\n\n\nI don't have the device\nI may be able to help remedy that:\n\n\nHave you heard of the free PlayBook offer? http://devblog.blackberry.com/2012/02/playbook-offer-extension/\nBuild a Web app, get a PlayBook. Do you have any awesome impressJS presentations that would be great as a standalone PlayBook application?  If so, I'd suggest using the BlackBerry WebWorks SDK to package it into an app and publish in App World.  Then the @BlackBerryDev team will send you a free PlayBook.\nThanks for your support, by the way, with the upcoming release of touch API support.  Looking forward to it!\nCheers,\nAdam\n. ",
    "dramalho": "Ah , here I though I was alone :) \nYes, seeing the same thing, I have a somewhat large presentation and I started losing stuff. I do a particular \"overview\" of a few slides (slide as in the ones you have on impress-demo.css) as if it were a matrix and with each new sub-element, pieces of the \"matrix\" started to go away.\nBrowser breakdown:\n- Chromium 17.0.963.56 on Linux -  I have missing tiles, normal gradient background\n- Chrome 19.0.1041.0 on Linux - Missing tiles (but not the same back-to-front pattern) and the background is white, almost as if an element was covering the background (but there isn't one :) )\n- Firefox 10.0.2 on Linux - Everything is apparently fine, but it's so slow it's embarrassing :)\n- Safari (5 I think) on Mac/windows - perfectly ok \nThe mind boggles, but either way, I know it's bleeding edge stuff , yada yada :) . Would you want the code to debug, or is this mostly a sit-down-and-wait thing? \neither way, impress.js is impressive :) , thank you for that\n. Just switched over to Windows :\n- Chrome 19.0.1041.0 dev-m is slightly better than on Linux, at least it shows all the elements, but sometimes it will go all white on transitions \n- Safari 5.1.2 is, however, running flawlessly \ngod damn it :)\n. ",
    "esteluk": "It's definitely not a Linux only issue. I've seen it on Windows and Mac builds of Chrome.\n. ",
    "mschaaf": "See this bug report http://code.google.com/p/chromium/issues/detail?id=110457 Maybe it is the same problem you have.\n. ",
    "kattrawlins": "I think @bartaz and @mschaaf are right. It's a documented Chromium bug with 3D transforms. I'm seeing it with:\n\n18.0.997.0 (Developer Build 116462 Linux) Built on Ubuntu 11.10, running on LinuxMint 12\n. \n",
    "ibenzal": "It works great! \nThanks!\n. Ey, I've already fixed it.\nMaybe It's not the best solution, but I've changed the way impress creates canvas:\nimpress.js file:\n```\n    //document.createElement(\"div\");\n    var canvas = document.querySelector('#canvas');\n    canvas.className = \"canvas\";\n/*arrayify( root.childNodes ).forEach(function ( el ) {\n    canvas.appendChild( el );\n});\nroot.appendChild(canvas);*/\n\n```\nAnd you have to add a div id=\"canvas\" inside the div id=\"impress\" in the index.html file.\nDo you think this fix could cause problems?\nBest,\nIban\n. ",
    "GabrielKast": "I have this use-case : I am doing some synchronisation for a conference. I have a .mp4 and I need to synchronize the video with the document for the presentation. In fact I use a document. In that case the html format is not recognized by the application that helps me doing the synchro. Thus I can not use the presentation given by the speaker, who cr it with created iy with mpress.js\nSometimes a presentation is just a presentation. Sometimes it's also a document that people would like to use later.\nMaybe it's a real complex problem. That's true...\n. ",
    "harry1989": "Adding export to pdf is as simple as adding an extra stylesheet.. Already https://github.com/hakimel/reveal.js/ supports this, so it must be easy to add this functionality..\n. ",
    "axhixh": "I am using https://github.com/melix/deck2pdf with the command deck2pdf --profile=impressjs input.html output.pdf to convert my presentations into PDF.\n. ",
    "nootanghimire": "Use case: I always use impress.js for presenting project progress/report in my university. Most of the times, we just need to present them, so all we need is browser. But sometimes, faculty instructs us to print 'em. The situation is: I've the presentation ready in impress.js, I want to print it. Being able to convert to pdf seems to be correct solution.\nI'm currently looking forward to use deck2pdf for now; i don't yet know how it works, but I think it's kinda cool for impress to have it's own \"Print/Save as pdf\" feature.\n. ",
    "jbonlinea": "HI there, \nI discovered impress.js looking for an alternative to powerpoint and prezi. \nI haven't used it yet but I totally defend the cause advanced here ; \nIt's actually critical in some use case: \nNext week I'll give a talk, I don't know if I'll be able to plug my computer, if will have to use to one of the conference room, and even if the conference has a computer or a techy-techy costy-costy conference system with pointer and the forth.\nI can't afford to have my whole presentation down ; having a PDF backup is mandatory.\nCheers. HI @henrikingo \nThank's for your detailed reply\nI understand your point, indeed impress.js is not \"only\" about slides, and most broswer support JavaScript today.\nYet, you never know what you may bump into.\nFor instance you built your impress.js document in a way that it shouldn't be navigated step by step, but using links you create inside, and to do so you need a mouse (to click on the links). If your conference room only provide you a remote with left-right, you're screwed, but if you created a pdf and re-ordered you slide.\nFor deck2pdf, I treid and it works great.\nI assume having a plug in in impress.js which do not require to install node.js would make the process easier for many ;-) \n. Deck2pdf install guideline suggest to use NPM, and in order to install npm on my mac, I have followed a tutorial suggesting tu use brewery to handle dependencies, and the later installed node.js as a dependency of NPM... then I was able to install and use deck2pdf !\nimpress.js is awesome, and having an new library to export steps in a pdf would be great !!\nthank's anyhow for this great work !. ",
    "juanleonardo": "Not so rare, prezi presentations do just that and people use it sometimes. It looks cool and helps the user to flow through content :D Now I need that too. Thanks for the work around, and thanks for impress.js! \n. I see... will that work with embedded youtube videos and the html5 tag, I wonder...\n. ",
    "jurezove": "bartaz, could you please give me an example on how to use the impress:stepenter event on the step with video? Thanks!\n. Thanks for your time, that really helped! :) Got it working now.\n. ",
    "avaidyam": "Wrong place to ask, but if we use something like raphael.js, is it possible to draw shapes within presentations using impress.js? (Like prezi?)\n. ",
    "tannhuber": "In addition you should put\njavascript\nvideo.currentTime=0;\nat the end of the init function and probably within the stepleave event listener. Otherwise the video might start anywhere but not with the first frame.\n. My idea was to use it during a presentation. I wanted to show some patterns with little differences only. The differences are only obvious if I switch between the the patterns directly. I solved it with an animated gif. This was probably the best solution. So I don't need it anymore. And you can close this issue.\nMy amazing :-) presentation was yesterday. The audience liked it very much. And I must thank you for this awesome tool.\n. ",
    "matejmosko": "Hi, I have stumbled upon the same problem when creating my own impress.js player app (electron). In my case I don't have an access to change presentation files, so I cannot manually assign ids to video slides. Therefore I have modified @bartaz solution into a more general-purpose one. This solution does not need you to change anything in your presentation, just call this peace of code somewhere after impress().init()\njavascript\nvar videos = document.getElementsByTagName(\"video\");\n    Array.prototype.forEach.call(videos, function(video) {\n      var videoStep = video.closest(\".step\");\n      videoStep.addEventListener(\"impress:stepenter\", function() {\n          video.play();\n      }, false);\n      videoStep.addEventListener(\"impress:stepleave\", function() {\n          video.pause();\n      }, false);\n    });\nAs you can see. It searches for video tags in your presentation and for every video tag it adds an EventListener for parent .step. It can be done for audio tags as well.. ",
    "bripkens": "Added information to the readme.\n. Also happens under Ubuntu 10.10 with Chrome 18.0.1025.142.\n. ",
    "goto-bus-stop": "Where?\n. <a href=\"#slide-id\">link text</a>\nImpress adds event listeners et al for you\n. ",
    "regebro": "Thanks to the event handles and inspired by David's speaker notes, I've now made a speaker console. It requires no modifications to impress.js at all. https://github.com/regebro/impress-console\n. Also on Ubuntu 11.10 with Chrome 17.0.963.79. \nRemoving the support for a tab going to the next slide fixes the problem.\n. Nope, wrong. It's a transition between two particular steps that trigger this behavior. I'm closing and investigating.\n. In fact, it seems it doesn't always trigger if step-x and step-y is the same...\n. Yes, but same x and same y? It seems quite consistent to me, I can see if I can make it happen in a smaller presentation.\n. Only scale, yes. (Although I could see the case for not changing that either, to make just some text pop up, for example).\n. Yes, that solved it, thanks!\n. The console has to rely on both, because if it only cares about stepenter, you'll have to wait for the transition to finish before you get notified that something happens. Indeed, going to an arbitrary step will confuse it, so stepleave isn't enough either.\nBecause of what happens when you go \"out of sequence\" the \"stepskip\" or \"stepabort\" or whatever indeed only is useful when you go through the steps in order. I don't know if some better solution is possible. In any case, it's not a big deal. The console has a status indicator so you'll quickly learn not to press next until it is ready. :-)\n. For some types of slides this isn't going to work, as the zooming is used to zoom into different bits, so one slide might be completely empty and just zoom into something that is actually in another slide.\nI realize this is kinda unusual, but I would appreciate ideas on how to solve that. Essentially, I think we need to get a browser to actually render the viewport to something printable and do this once per slide. I have no clue if that is even doable.\n. If impress.js is disabled, then there is nothing to print. I guess that means that slide content is not displayed in a \"linear fashion\". Look for example at this impress.js presentation, especially at around the 5-6 minute mark.\nhttp://pyvideo.org/video/1690/things-to-make-writing-tests-easier\nphantom.js seems to me to be the first suggestion for a usable solution.\n. It is indeed a good question, but printing from a browser will not do either case. Printing from a browser will give you a big code block on one page, and then a couple of pages with red squares. So something else needs to be done. The only idea I have that is generic to impress.js is to print each viewport.\nI could in Hovercraft! probably add some special features to do something else, but it would still require rendering viewports, but perhaps with something clever done to print different viewports or skip slides.\nIt doens't need to be a part of impress.js, it could easily be a separate script. I don't know if it could be generic, I do know that the one for deck doesn't work with impress, but that might be fixable. \n. Interesting. I'm wondering if Chromium Embedded Framework could be useful here. http://code.google.com/p/chromiumembedded/\nI'm planning to look into using http://code.google.com/p/cefpython/ for use with Hovercraft, but I doubt I will get time for that this year, I have other features that I actually need that I'll do first.\n. Btw, Hovercraft has svg support, and handles that by translating the SVG path to positions and rotations and uses that to generate the impress.js presentation. That might be interesting as an alternative/temporary solution.\n. Checking modifier keys doesn't help. I tried to fix this today, but the fact is that when you switch to w browser window with Alt-Tab, the event sent is a normal Tab event. This is on Ubuntu both with Firefox and Chrome. I don't know where the bug is, but the only solution I can find for the time being is to not support the Tab button for the event...\n. In that case I think that the TAB key should be caught, and set so that the default is ignored, but that it doesn't advance to a slide. Just removing the \"case 9:\" row would do that, I think.\n. You probably meant to link to https://github.com/jmpressjs/jmpress.js\nIt's demo page is completely broken on Firefox and Linux, unfortunately, I might look at it when they fix that. :-)\n. I should report an issue, you are right.\n. Open source governance could help by having more maintainers.\n. ",
    "Jellyfrog": "Any reason not adding select? button?\n. This is really great!\nThere was a discussion about an editor and I think this is a really good start. Keep up the good work!\n. ",
    "gleber": "Hi\nI have noticed problems with 3D rotation in Google Chrome 17 and Chromium 17 on Ubuntu 64bit. Just take a look at 3d \"slide\" of the default demo index.html. Aside from rotation of the \"world\" to make text nicely visible on screen, the text itself is also rotated. I can attach screenshots if they will be helpful\nBest,\nGleb\n. ",
    "suxpert": "Wow, fast response. :)\nI have tried with your method, but because the bottom comes after the left slip, use the rotate-x-only version will cause a dizzying spin, hence I'd like to keep it consistent with the left slip. So the bottom one should take a rotation base on the left slip. If the axes of the canvas do not change during any movement, the rotation should take place around the axis-z. If the axes change with the object(that is, the rotation is always base on the axes of the object itself, but not a global one), the rotation should be around the axis-x of the left slip... But none of those rotation works.\nNow I'm really confused... :(\nDuring my reply, I'm thinking about the rotate, doing some tests on it. The result makes me very disappoint about my geometry, the following two slide are EXACTLY the same, which means that the axes are NEITHER fixed global axes NOR changing with the rotating objects...\n```\n\nRotate X first!\n\n\nRotate Y first!\n\n```\nBut, because the coordinate of the point, e.g. data-x=\"0\" data-y=\"0\" data-z=\"0\" MUST be based on a global coordinate system, thus it is naturally to believe that the rotate would have a global coordinate system too. Unfortunately  it seems not. :( Perhaps impress.js itself have a rotate order? The order of the attributions have no effect.\n. I may finally understand it. So the rotation is taken place on the coordinate system of the object itself, with a specified order x-y-z. Let us suppose that there is a global system, we'll use uppercase X, Y and Z to indicate the axes, while lowercase x, y, z will stand for the system of the object itself.\nThe canvas has a left handed system where X is to the right of the screen, Y to the bottom, and Z towards the user. Every object has it own system just the same as the global one in the beginning. When rotating, because the order is x-first, here x is actually X, thus after this rotate step, y and z were no longer Y and Z. A next rotation would be around y, hence x and z would change their direction, because x is no longer used, it doesn't matter. But a last step on the z axis DOES matter, --- the z axis can be in any direction because of the first two rotations. Hence this rotation around z MAY be the same as the first rotation, if this z becomes X(That is why my bottom is not a bottom). For a special case, take any rotation around X, then rotateY(+/-90deg), the z axis will become X(or -X), then any rotation around z can be merged into the first rotation, hence z become useless here.\nAs we know, different rotations can lead to a same position. For instance, my bottom CAN be obtained by rotating directly around X then z, but although the appearance is right, the animation of the rotation is still dizzy.\nI've modified the index.html for my test, here are the two cubes: [http://1.webtex.sinaapp.com/cubea.html] [http://1.webtex.sinaapp.com/cubeb.html]\n. @bartaz A wonderful workaround. :)\nBTW I've just found some difficulties in inserting lists(e.g. ol and ul) in impress, the item symbol was missing. Issue #81 has mentioned about a substep, I don't need the substep but I want some list-style thing, like:\n1. foo\n2. bar\n3. baz\nbut I don't think it's a good way to type the number or some circle-like symbols manually. So how to use the ol/ul normally?\n. ",
    "stunjiturner": "just wrap the impress div  in a iframe an /iframe tag? \n. got it!\n. i am having difficulties using impress.js within the iframe, on the iPad. Whereas jimpress the source code does not even seem to use an iframe but the animations stay in the containers?\n. ie. firstsightmedia.sightuary.com the animation works well on computers. but goes haywire in dimensions on the ipad\n. Thx. I use it like that also now, the I frames worked well though.\nsightuary / firstsightmedia \nOn May 6, 2012, at 5:54, Bartek Szopka reply@reply.github.com wrote:\n\nSorry for not answering that long.\nI don't know if you still have that issue but at the moment I don't have time to support using impress.js in iframes - especially on iPads. It was not that easy to get it running on iPad without the iframe, so I'm not surprised that it has problems in iframe.\nThat's why I treat impress.js as a fullscreen presentation framework - not an animation tool for websites.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/issues/111#issuecomment-5534444\n. \n",
    "kaigth": "I honestly would stray from using an iFrame in any case deemed unnecessary, and this is one of them which is simple.  I have a simple solution that will keep this working for you outside of an iFrame and allow you to dev for mobile and more\nSimply create a div block that the impress div will live in.\ndiv id=\"object\"\n  div id=\"impress\"\n      // Your presentation objects here\n  /div\n/div\nLets say you want to your \"impress\" window at the top left and have two divs at the bottom and right that have other content in them\nSimply create two divs, one at the bottom and one at the right using absolute position and right: 0 and bottom: 0\nuse width and height percentages to create a box effect.\nNow go in to your impress javascript file and hit up line 380:\ntop: \"50%\",\nleft: \"50%\",\nadjust these numbers to place where impress centers the step slides\nI chose 35% and 40% to meet what I need and that placed it more towards the top left\nIf you need the ability to scroll on the page simply wrap all of this in a div thats locked to the top and adjust it so that  the background size uses webkit: cover;\nIn hopes that I haven't wasted your time, I hope this helps.\nP.S. what i just did was simple, and can still be accomplished if your trying to provide an element view the size of lets say a youtube video, and you are sticking that in a wordpress template, then an iframe may be needed but is not required. Though a bit more time intensive you can still make this method work with what your intent is.\nImpress can be edited enough not to lock to the cover edges giving you this freedom, but that is not something I am going in to here.\n\n. ",
    "ryh": "Thanks for reply,  following is work before impress init.\njavascript\n    var $ = function( selector) {\n        return document.getElementById(selector);\n    };\n    var randomdg=Math.ceil(Math.random()*(360-1)+1);\n    $('its').setAttribute('data-rotate',randomdg);\n    impress();\nso it is possibile to re-setup the step or steps?\n. 're-setup'  setup the step with new 'rotate' or 'translate' or 'scale' ,and the impress.js refresh the single step\njust like jquery css manipulation\n. for eg. one step's content will be loaded by  ajax,the impress.js cannot get the whole step before its init.\nso after ajax load the content and request to redraw or add the step.\nmaybe it's not good for presentation,but will be good for web with the dynamic content (such as tweets stream )\nyes,it is a feature request: redraw or replace the step in real time\n. Thanks,close this if you wish.\n. how about jumpto\nor\nstepto\n. ",
    "yuchi": "goat? :trollface:\n. ",
    "JonathanWolfe": "stepto +1\n. ",
    "larroy": "Maybe the browser entered into a wrong state, now it's not doing it.\nI disabled the automatic stepping by commenting these lines:\n//window.clearTimeout( hashTimeout );\n          //hashTimeout = window.setTimeout(function () {\n          //    window.location.hash = \"#/\" + el.id;\n          //}, config.transitionDuration);\n. Let's close it, seems it was a browser bug.\n. ",
    "blahbap": "Ok, I see that you are correct, the cursor is in fact moving \"invisibly\" - I'll investigate a bit into this bug, I'm using Chrome. \nthanks!\nFrank . \n. I just checked in Firefox - it works better, but after a short while the cursor won't move correctly, same as in Chrome. \nThe thing is, for instance this demo works fine in both browsers: http://html5demos.com/contenteditable\nCould it be that the event handlers in impress are still interfering somehow with the keyboard input? \n. This is on Windows 7 (Enterprise), running vanilla Chrome (17.0.963.83 m) \n. Ok, thanks to all for input on this error - hopefully the problem will go away in future releases of Chrome. With this workaround,  I'll close the issue.\n. ",
    "cousine": "hehe, been there, still doing that :D (currently in the middle of an\nall nighter release)\nThx for the prompt response :D\nOn 21 Mar 2012, at 09:32, Bartek Szopka\nreply@reply.github.com\nwrote:\n\nI think I need to stop doing releases in the middle of the night :)\nWell spotted. I'm on it right now.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/issues/126#issuecomment-4612147\n. Great :D anytime\n. \n",
    "airborn": "I can't reproduce this on Ubuntu 11.10 with Chrome 19.0.1084.1\n. ",
    "Birowsky": "Is it closed? Can I comment?\nI have da sollution :D\n. So get this.. the parent of the transformed element should have \"perspective\" attribute set, in order for the mouse events to take effect.\n-webkit-perspective: 900px;\nI found out about this while working on this project:\nhttp://showcase.birowsky.com/fly9/nyc/\nNot because i have a clue how chrome manages rendering layers, but because i tried 10000000000000000000000+ different approaches.\n. That's true. It will alter the perspective. Even if you set the \"perspective\" to \"inherit\". Which led me to some more digging to find that adding:\n-webkit-transform-style: preserve-3d;\nto the same parent element also does the trick.\nChallenge this approach and I might come up with something else :}\n. yah, well, i was trying on a clean code and that made the difference. However, my initial contribution intent was not because i had problem with impress.js, but because i had a problem :}\n. ",
    "noahdecoco": "THIS SAVED MY ASS!!!\n-webkit-transform-style: preserve-3d;\nThank you a ton @Birowsky\n. ",
    "johandegrieck": "Yup, thank you @Birowsky ! You just made my design work at the end of the day. Thanks a million, great tip.\n. ",
    "Bartunek": "@Birowsky Thanks a lot!!! You saved me a lot of time!\n. ",
    "niuage": "I can see that being really helpful.\nI'm wondering if it wouldn't be even easier if you could set some data attribute to say it's inheriting every attributes from the previous slide, and then only increment/decrement the values you want to change? Just a thought.\n. Ok cool, I'm the one who misunderstood then ;)\n. ",
    "nchauvat": "@niuage what you ask for is the way it works already (unless I misunderstood your suggestion).\nWith this patch:\nstep data-x=\"1000\" data-y=\"1000\" -> (x=1000, y=1000)\nstep data-x=\"+=1000\" -> (x=2000, y=1000)\n. @bartaz there is no need for \"+=0\" see line 288: prev_step = step.\n. The lack of response from the original maintainer made me look at other projects. I do not have time for impress.js nowadays. Please feel free to take over this PR or reject it. I think the feature is needed and the implementation was simple, someone else will surely take care of it.\n. ",
    "juristr": "Just wanted to submit exactly the same request. I just started to use impressjs today and being able to position the next step relative to the previous one is a must-have. Especially when you have to move some steps, then you have to adjust all of them whereas with this feature they would move all \"automatically\".\nAre there already some news on when this will be merged into the main impressjs lib?\n. ",
    "githof": "A big +1 for this one.\nThink of a stand-alone part in your presentation.  If your want to move it from one position to another, or to another presentation, you're bound to manually translate all the coordinates.\nAnyway, even if you have drawn you whole presentation map on a large sheet of paper with computer off, once before the screen you'll have some minor changes in the way you position the elements, that always yield annoying manual translating in data-xyz, making you unwilling to make any fine tuning.\n@bartaz, I can't believe you don't use some trick to make it, don't you?\n. ",
    "m42e": "The current implementation doesn't respect the scale factor for the placement. Both, the last and the current scale factor should be used calculating the next position, or everything gets weird.\n. I've tried it, but currently it seems not to work on Firefox, I haven't tested it on safari. You may have a look here: https://github.com/m4n2b/impress.js \n. Ok, I'll try that later. Thank you very much aspiers.\nHope this is ok for you in the meanwhile: https://github.com/m4n2b/impress.js/compare/bartaz:master...a4cd60d04ff9a4553bd050521a4722d7845605fc\n. I've implemented it. I've no expierience with the commit to others projects. I'll make it available as soon as possible.\n. Now I pushed it right here https://github.com/m4n2b/impress.js\n. https://github.com/m42e/impress.js/commit/f080c7cd118e9118c91e53ce06bd29f333afbdb5\n. Open PowerPoint in Presentation mode and press b I think :)\n. Great :)\nMaybe you should also offer the id of the step with stepenter or stepleave, or the step itself?\n. Yes you're totally right. I'm sorry. But another idea just popped into my mind.\nStepleave should provide the next target step. Or an indicator for forward backward.\nNice, isn't it?\n. damn, branched not from original.... I'll try again. sorry\n. What's the matter with this pull request, I'm about to close it to no longer have it bothering arround in my list ....\n. This is also for my plugin https://github.com/m42e/impress.js-progress\nI use it to animate the progress bar (iirc)\n. What's the matter with this pull request, I'm about to close it to no longer have it bothering arround in my list ....\n. Yes, I'm still tracking this\n. My intention was to make the steps easily accessible to plugins. E.g. I have written a plugin that shows the current progress (https://github.com/m42e/impress.js-progress).\nWhy should a plugin do all the selections and so on once again? \n. maybe a better solution is to memorize if the tab key has also triggered a keydown event. If not, ignore the keyup, else move forward to the next slide.\n. Thanks for the analysis @ltregan .\n. Would you like to use it during a presentation or for editing? If you use it for editing only and it wouldn't bother you that all transitions are in 0 ms than you can simply overwrite the setting of impress.js:\ntransitionDuration: 0\nYou can do this by editing impress.js or much easier:\n<div id=\"impress\" data-transition-duration=\"0\">\nIs that what you're looking for?\n. What means \"not displaying well\" I took a look and can't guess what the problem is.\n. I've had one of the issues (overlapping slides) once using firefox, but only on a specific system. Maybe it depends on the screen resolution somehow? I cannot see it on my system, as I said before. You may have a look at http://bilger.info/bse1/, that's where I hand an issue with overlapping steps.\n. No, I've never seen disappearing slides before. \nYou can try to set the data-perspective value of the body element to an other value than 1000, maybe you should try 500. As long as I can't reproduce the error I'm only guessing.\n. Maybe self advertisement, but I find it useful for a lot of plugins: #235\n. python-pptx may be a solution that works outside windows powershell.. ",
    "peterlundberg": "Another big +1 for this. Real pain with larger presentations.\n. ",
    "had3nx": "Thanks :)\nThat was easy ...\nThanks and Regards ,\nHaden Pereira\nOn Apr 7, 2012, at 17:14, Bartek Szopka\nreply@reply.github.com\nwrote:\n\nIt can be easily changed in CSS with opacity - check how it is done in impress-demo.css https://github.com/bartaz/impress.js/blob/master/css/impress-demo.css#L190\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/issues/136#issuecomment-5008091\n. \n",
    "Quantumplation": "Here's the problem reproduced.  It seems to be caused not by something being rendered at -1000 or larger, but by there being two z-positioned slides composited underneath the canvas.  If there's just one z-positioned slide, it works fine.\nhttp://dl.dropbox.com/u/7325494/problem.html\nAnd the CSS file I'm using (It's probably very ugly, as this is my first project that really uses CSS):\nhttp://dl.dropbox.com/u/7325494/css/style.css\n. ",
    "atracksler": "Www.brycecreative.com/wordpress\nP.S. have a nice day!\nOn Apr 18, 2012, at 5:37 PM, Bartek Szopka reply@reply.github.com wrote:\n\nSo your code doesn't work as expected?\nFor me it seems that you've only changed the id of the element in HTML and CSS and the contents of the step.\nSo from what I see here, it should be fine.\nIt would be best if you could provide an on-line example of the case that is not working for you so it will be easier to see what is going on.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/issues/139#issuecomment-5209416\n. \n",
    "pandeiro": "Not sure if this has been addressed for inputs and textareas, but the behavior continues for elements with contenteditable=true. I am going to try to find a fix, but would it be useful to be able to disable the spacebar moving to the next step entirely as some sort of configuration parameter to impress().init() maybe?\n. ",
    "jmcmariano": "Text inputs require TAB, SPACE, and other keys[FIXED]\njust go to impress.js and goto or find\n// Prevent default keydown action when one of supported key is pressed.\n        document.addEventListener(\"keydown\", function ( event ) {\n            if ( event.keyCode === 9 || ( event.keyCode >= 32 && event.keyCode <= 34 ) || (event.keyCode >= 37 && event.keyCode <= 40) ) {\n                event.preventDefault();\n            }\n        }, false);\nand edit  the event.keyCode >= 32 to event.keyCode >= 33\nand edit the \ndocument.addEventListener(\"keyup\", function ( event ) {\n            if ( event.keyCode === 9 || ( event.keyCode >= 32 && event.keyCode <= 34 ) || (event.keyCode >= 37 && event.keyCode <= 40) ) {\n                switch( event.keyCode ) {\n                    case 33: // pg up\n                    case 37: // left\n                    case 38: // up\n                             api.prev();\n                             break;\n                    case 9:  // tab\n                    case 32: // space\n                    case 34: // pg down\n                    case 39: // right\n                    case 40: // down\n                             api.next();\n                             break;\n                }\nevent.preventDefault();\n        }\n    }, false);\nevent.keyCode >= 32 to event.keyCode >= 33 and the comment out the  case 32 like this //case 32:  space\n. ",
    "AliMD": "This is not a good solution.\nI have a suggest\nAdd method to impress for disable and enable some key function\nthen we thing disable on first init or only a page or disable in form focus\nand we can enable it at any time\nit can possible as simple as define a variable.\nif you agree with me i can make it and pull request.\n. Why this pull not merged ?\n. No i don't think\nIts worked because i removed opacity.\nTempDemo2\nIt have bug like screenshot for me (Firefox 19.0.2 OSX10.8.3)\n. It fixed when everything rotated (page portfolio 2)\nMaybe because i used negative data-z !\nHow can i fix it ?\n. false, not worked with positive value :(\n. @bartaz plz check it\n. @bartaz can you check it plz\nTank you\n@natehess No i dont think, why after removing opacity its work fine without change z-index\n. Any solution to fix ?\nOn Fri, Apr 26, 2013 at 1:25 PM, natehess notifications@github.com wrote:\n\nCorrect, the bug only exists when opacity is less than 1.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/bartaz/impress.js/issues/270#issuecomment-17062145\n.\n. thank you, excuse me for that mail post issue\n. Wow, Goods news\nThank you @FagnerMartinsBrack very much for reactive the community\nI'm always love contributing and helping. how can i any help?\n. I think this issue should be closed too after 2 years.\n. \n",
    "meetmtushar": "I have following code in my impress.js which handle my website.\nI want to disable space NAVIGATION for moving my website .\nHow can I able to disable the space key here?\n// KEYBOARD NAVIGATION HANDLERS\n```\n    // Prevent default keydown action when one of supported key is pressed.\n    document.addEventListener(\"keydown\", function ( event ) {\n        if ( event.keyCode === 9 || ( event.keyCode >= 32 && event.keyCode <= 34 ) || (event.keyCode >= 37 && event.keyCode <= 40) ) {\n            event.preventDefault();\n        }\n    }, false);\n// Trigger impress action (next or prev) on keyup.\n\n// Supported keys are:\n// [space] - quite common in presentation software to move forward\n// [up] [right] / [down] [left] - again common and natural addition,\n// [pgdown] / [pgup] - often triggered by remote controllers,\n// [tab] - this one is quite controversial, but the reason it ended up on\n//   this list is quite an interesting story... Remember that strange part\n//   in the impress.js code where window is scrolled to 0,0 on every presentation\n//   step, because sometimes browser scrolls viewport because of the focused element?\n//   Well, the [tab] key by default navigates around focusable elements, so clicking\n//   it very often caused scrolling to focused element and breaking impress.js\n//   positioning. I didn't want to just prevent this default action, so I used [tab]\n//   as another way to moving to next step... And yes, I know that for the sake of\n//   consistency I should add [shift+tab] as opposite action...\ndocument.addEventListener(\"keyup\", function ( event ) {\n    if ( event.keyCode === 9 || ( event.keyCode >= 32 && event.keyCode <= 34 ) || (event.keyCode >= 37 && event.keyCode <= 40) ) {\n        switch( event.keyCode ) {\n            case 33: // pg up\n            case 37: // left\n            case 38: // up\n                     api.prev();\n                     break;\n            case 9:  // tab\n            case 32: // space\n            case 34: // pg down\n            case 39: // right\n            case 40: // down\n                     api.next();\n                      break;\n        }\n\n        event.preventDefault();\n    }\n}, false);\n\n```\n. ",
    "eroullit": "By exporting it, I meant using File -> Print -> Print to file\n. ",
    "derkoe": "Could you add a deinit() method similar to jmpress so that the page can be printed?\nThen one could add print stylesheet and a print button deiniting impress.js and then calling window.print\n. ",
    "damienalexandre": "I'm achieving a quite good PDF export with those steps:\nAdding this CSS:\n``` css\n/ ==|== print styles =======================================================\n   Print styles.\n   Inlined to avoid required HTTP connection: h5bp.com/r\n   ========================================================================== /\n@media print {\n  * { background: transparent !important; color: black !important; box-shadow:none !important; text-shadow: none !important; } / Black prints faster: h5bp.com/s /\n  a, a:visited { text-decoration: underline; }\n  a[href]:after { content: \" (\" attr(href) \")\"; }\n  abbr[title]:after { content: \" (\" attr(title) \")\"; }\n  .ir a:after, a[href^=\"javascript:\"]:after, a[href^=\"#\"]:after { content: \"\"; } / Don't show links for images, or javascript/internal links /\n  thead { display: table-header-group; } / h5bp.com/t /\n  tr, img { page-break-inside: avoid; }\n  img { max-width: 100% !important; }\n  @page { margin: 0.5cm; }\n  p, h2, h3 { orphans: 3; widows: 3; }\n  h2, h3 { page-break-after: avoid; }\n/ Impress.js specific /\n  .fallback-message { display: none; }\n  @page land {size: landscape;}\n  .step { page-break-inside: avoid; page-break-after: always; border: none; margin-top: 100px; }\n  .step img { max-height: 100%; }\n/ plus some more step specific styles of your own\n  #htop2 { display: none }\n   /\n}\n```\nThen I switch off Javascript, reload the page and print into a PDF from Firefox.\nIn the print options I'm checking \"borderless\" and some others stuffs. \nThere is one downside I can't fix atm, it's the display of the page title/url at the top and the page number at the bottom: I don't know how I can remove them.\nThere is a lot of CSS3 options here for the @page tag: http://www.w3.org/TR/css3-page/\nThe point of this is obviously to be able to print a decent copy of the presentation, but also ease the sharing and the offline consultation.\n. ",
    "mweimerskirch": "This works pretty well, removing transforms and positioning (using \"!important\") and adding page breaks:\n```\n.fallback-message { display: none; }\n@page land {size: landscape;}\n.step { border: 0; opacity: 1 !important; page-break-inside: avoid; page-break-after: always; position: relative !important; -webkit-transform: none !important;  }\n.step img { max-height: 100%; }\nbody { height: auto !important; overflow: visible !important; }\nimpress { position: relative !important; -webkit-transform-origin: none !important; top: 0 !important; left: 0 !important; -webkit-transform: none !important; }\n```\nAnd yes it works even with initialized slideshows.\n. ",
    "ogrisel": "Deck.js has a script to generate png rendering assembled into a PDF using the phantom.js programmatic browser.\n. ",
    "aigamedev": "The phantom.js solution didn't work out for us, since CSS3D is not supported as it requires a hardware-based rendering backend rather than the software solution that phantom.js ships with.  We've ended up with a Chrome Extension that uses chrome.tabs.captureVisibleTab().  Unfortunately, Chrome's security model makes it a pain to save the resulting PNG files out, but it's possible indirectly.\n. ",
    "luzfcb": "https://github.com/melix/deck2pdf\n. @mishelle95 ?? Please, read: http://www.catb.org/esr/faqs/smart-questions.html\n. ",
    "alexanderklein": "deck2pdf works very well for me as long as i don't go crazy with animations and when i avoid having steps overlapp. It might also help to increase the time out (defaults to 1s) in deck2pdf to ensure all animations are done when steps are being printed/exported.\n. ",
    "bbub": "First of all, thanks a lot for impress.js - it's impressiv and lots of fun ;-)\nI had the same question as kjmatthewes. I solved this by adding a few new if-queries right at the beginning of the getStep function in impress.js (around line 400) looking something like this:\nif (step.id == \"ID-of-Step-1\" || step.id == \"ID-of-Step-5\") {\n    config.transitionDuration = 3000;\n}\nif (step.id == \"ID-of-Step-2\" || step.id == \"ID-of-Step-6\") {\n    config.transitionDuration = 1000;\n}\nSince mostly presentation play back is from beginning to end the transitionDuration only has to be changed for very few steps to a longer or back to a shorter period.\nYou can probably find a better way to search for more step-ids (Array?) and maybe you can insert the if-queries someplace else, but it worked for me (but I'm only using a new chrome browser for myself).\n. ",
    "greemo": "I feel the appropriate transition speed could be better adjusted per transition. Basically take the global setting (Which can be assumed as an on-plane 1 slide shift of camera position), and have scaling factors that change the transition time based on distance to travel along a vision path from old to new position.\nI'll see what I can do about building a patch for my proposal. Here, and/or in Henriko's fork.. ",
    "csicar": "Well I am still interested in the project and think that the mesioned SVG\nsupport would make use impress.js easier\nFagner Brack notifications@github.com schrieb am Mi., 3. Feb. 2016 13:39:\n\nHi @csicar https://github.com/csicar, in an effort to clear up older\nissues/PRs we are pinging back to know if you are still tracking this\nrequest.\nTo give a little bit of context, recently a decision was made in the\nproject\nhttps://github.com/impress/impress.js/issues/435#issuecomment-177602861\nto make the development more active and the first task is to clear up older\nissues like this one to see if the OP\nhttp://netforbeginners.about.com/od/internetlanguage/f/What-Is-OP.htm\nis still interested in keep it going.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/impress/impress.js/pull/143#issuecomment-179201771.\n. The reason for having class=step inside svg is, that it would allow you to create the svg file in an external tool, like inkscape. Inkscape allows you to modify the svg-xml with a build-in editor. \n",
    "faultyserver": "I think I understand what you want.\nAre you talking about something like a mini-map up in the corner? Something that still slides, spins and rotates, but inside of a box that stays in the corner.\nSo, it would still show all the transformations, but wouldn't move around on the screen, right?\n. ",
    "oravecz": "Yes. A static object that is not part of the slide flow, but is part of the 3D world.\n. ",
    "Platika": "http://platika.github.com/impress.js/\n. Hey I made a new pull request with the updated version so I'll close this request\n. also created git hub refrence page: http://platika.github.com/impress.js/ \n. ",
    "bothravinit": "thanks... its really easy to use...\n. ",
    "swami920": "Hello Mr. Bartaz ! I got you and it was a very easy solution and i appreciate your fast response too. But My problem doesn't seems to be ending. Here my webpage. Its the basic structure and i applied you impress.js and stylesheet. But the Links at the bottom are not responding. It seems like a full screen div has covered the whole webpage. Please can you figure it out. You are master and I am a learner so plz. Here is the link http://swamitrasingh.co.cc\n. Ya its working fine. After i posted the question, I was working on it and I started sorting out which elements are making it non clickable. And i deleted some css from impress.css and its working now. Thank you for you response too. \n. ",
    "ralt": "No problem, I completely understand your point of view. Looking forward to this API!\nAnd I still need it for a real-life use, so I didn't waste my time on it, don't worry about it!\nCheers\n. @ArtGoddess You could handle this functionality by adding an \"active\" class on the correct menu.\nIn there: https://github.com/Ralt/impress.js/commit/f88feb8cae704ce27bd2168bdb77768f516ac2da#L2R605\nYou can remove the active class on the current, and add it to the clicked element. Something like this:\n```\n// Remove the active class from the current active\ndocument.querySelector( '.active' )[ 0 ].classList.remove( 'active' );\n// And add it to the clicked index\nbyId('impress').firstElementChild.children[ index ].classList.add( 'active' );\n```\nThis way, you can style the active element accordingly to what you want.\n. @rudshk I seriously advise you to ask your question on stackoverflow.com, explaining what you did and why you think it should work.\n. ",
    "dianams": "Hello Ralt,\nI'm interested in achieving something similar, I want to add a navigation bar to the page, but I want to change any CSS property of the link, for example, color.\nWhen I'm in slide2, change color of link2.\nCan please somebody let me know any script or similar that can handle this?\nThank you!!!\n. ",
    "rudshk": "Hey Ralt/Bartaz, you guys actually did an awesome job on this it's so cool.\ni wanted to ask you if you could help me out with the menu part Ralt... I was playing around with it and there's 2 things i couldn't manage to do (i'm still a js novice) \nI wanted to change the menu title to an image and couldn't seem to get it to work\nalso I tried changing the font to a custom font but no luck there as well (i'm using firefox/chrome, so not the IE problem)\nthanks a lot if you can help!\n. ",
    "shezi": "Hi bartaz,\nthank you for your long reply and your explanations.\nI will create a branch that contains documentation changes and do another pull-request for those.\n. Sorry, I didn't notice I was on the wrong branch.\n. Could you email me, please, for a private discussion? Thanks!\n. ",
    "kyleshay": "How does this differ from calling impress().goto(0)?\nFor individual slides, you can reset each animation using #divname``.past``.present and .future\n. ",
    "kschroeder": "It allowed me to dynamically change the presentation whereas these don't seem to do that.\n. I haven't used it since this PR, so I don't know if it is still valid.  Feel free to kill it.\n. ",
    "ariefbayu": "hi, is there any update to this problem?\n. ",
    "zhaoyangyang316": "Actually impress.js. is not working with FF12 neither \n. ",
    "Earthwings": "Seems to be a bug in Google Chrome which refuses input for items that have a negative z value.\nAs a workaround you can add some positive number to the data-z property of all slides (divs with step class) such that there is no negative z value anymore. Works fine for me.\nUsing Firefox instead works as well, but Chrome has less glitches with impress.js.\n. I'd say this is the same issue as https://github.com/bartaz/impress.js/issues/164, quoting myself:\n\"Seems to be a bug in Google Chrome which refuses input for items that have a negative z value.\nAs a workaround you can add some positive number to the data-z property of all slides (divs with step class) such that there is no negative z value anymore. Works fine for me.\nUsing Firefox instead works as well, but Chrome has less glitches with impress.js.\"\n. ",
    "scbritton": "I have a number of elements in my design with negative Z values.  I have a :hover set in the CSS for these elements.  Weirdly, it works for some (in webkit browsers) elements, and not for others.  There doesn't seem to be any rhyme or reason for this at all.  Not only does the :hover not work for all, but none of the elements are click-able in webkit-based browsers, which is a very annoying issue, as things work perfectly in Firefox.\n. As a follow up, I was playing with the CSS a bit and also discovered that when I changed the position of the steps (divided by 10, changed the scale, etc) the code began to work.  There's something going on with the numerical values that are being used here.\nIs anyone aware of some limitations in the Safari/webkit CSS3 code?\n. ",
    "leonartdesign": "Nevermind, should've checked the examples first. They seem to work fine. Was too quick to report an issue, i guess it's a local problem..\n. ",
    "randallflagg34": "I have!\nI want to add some videos to the presentation (meaning, more than one). I tried the  tag, but nothing happend. Actually, it brakes.\nI added the \"-webkit-transform: translateZ(1px);\" to the CSS, and nothing.\nI tried the JWPlayer (html5 and flash one). The flash version works for one video, the second one just wont work. I tried everything I can come up with, but nothing.\nMy console shows not a hint of a problem... so, I'm totally clueless here.\n. I find this thing.\nI had to re-render my videos for them work, kinda. I configure my videos in Adobe Premiere as for iPhone (640x480, 25fps and no more than a 1mbps of bitrate) and worked find.\nBut, If I stretch the vide, it went all sour. My videos broke.\nmaybe is a memory usage problem in Chrome?\n. Yes! Go back and fords with this!\nhttp://olm.puntopy.com/presentacion/html5.html#/mapping_cocacola\nWhen yo go back and then come at the video again, it brakes =/\n. ",
    "shirishp": "Sorry, my bad. Wrong window while opening issue. :(\n. ",
    "Berklie": "Hello,\nI too am running into trouble using the FancyBox jQuery tool from the http://fancybox.net website. Adding the code doesn't conflict with impress.js at all... it's that once an image is opened (and brought to the foreground of the screen) it cannot be closed by clicking it, it's close button, or anywhere else on the screen (which are all default close behaviors of FancyBox). The only way to close the FancyBox is to click the \"Esc\" key.\nIt's almost as if when using impress.js, that the browser has no idea that a FancyBox has even been invoked... as evidenced by the fact that one can continue to proceed along the impress.js presentation using the arrow keys while the FancyBox is in the foreground.\nAny idea what might make an impress.js presentation be unaware that a FancyBox has been launched? (Which then leads to the problem of being able to close it.) Thanks in advance!\nBerklie\n. ",
    "royduin": "See this solution for Jmpress: https://github.com/shama/jmpress.js/issues/85\n. ",
    "Benn": "Hi, \nOld post, but I was encountering the same issue just today.\nI've managed to get everything working fine by removing the pointer-events properties in the CSS and just playing with the position of the slides so that I don't have any trouble on slides that need clickable links.\nSee here : http://www.benoitmagicien.com\n. ",
    "MaximusDecimus": "my mistake\n. ",
    "d48": "You can add JavaScript to create and detect when things are clicked on and dynamically add the class to show your navigation selected. It is easier with jquery library. \nIt is possible since you can essentially build up the navigation based on the DOM structure of the presentation and how the slides are within a contained HTML element. \nIf I ever get a chance to build a demo I would like to contribute this, but for now, that's one way how you can achieve what you're looking for.\n. ",
    "naveen3444": "Hey dbankir.\nwe can show the slide number using Impress.js\nThere is a code for STEP EVENTS in Impress. go and search in the Impress.js\nOnce you find the place\nthere you can see the code like as follow\nvar onStepEnter = function (step) {\nif (lastEntered !== step) {\ntriggerEvent(step, \"impress:stepenter\");\nlastEntered = step;\n}\n};\nnow what u need to do is just writhe alert(step.id) as follows.\nvar onStepEnter = function (step) {\nif (lastEntered !== step) {\ntriggerEvent(step, \"impress:stepenter\");\nlastEntered = step;\nalert(step.id);\nif(step.id==\"step-2\") // if u want a event on step 2 then \n{\n//write ur jQuery event to fire\njQuery(\".s66\").show();\n}\nelse\n{\n// write ur jQuery event to fire ex \njQuery(\".s66\").hide();\n}\n}\n};\nThats it you will be alerted when u click on next slide.. so now u can use this step id to show in ur DOM.\nTry...\nHave a great day..\n. Hey Invidio.\nwe can show the slide number using Impress.js\nThere is a code for STEP EVENTS in Impress. go and search in the Impress.js\nOnce you find the place \nthere you can see the code like as follow\nvar onStepEnter = function (step) {\n            if (lastEntered !== step) {\n                triggerEvent(step, \"impress:stepenter\");\n                lastEntered = step;\n            }\n        }; \nnow what u need to do is just writhe alert(step.id) as follows.\nvar onStepEnter = function (step) {\n            if (lastEntered !== step) {\n                triggerEvent(step, \"impress:stepenter\");\n                lastEntered = step;\n                alert(step.id);\n            }\n        };\nThats it you will be alerted when u click on next slide.. so now u can use this step id to show in ur DOM.\nTry...\nHave a great day..\n. ",
    "dbankier": "stepenter is fired when the transition has completed. The event in the pull request is for triggering the target location when leaving a step (which is not necessarily the step that follows the current one as you might jump). It is handy for realtime uses. Have a look at this project: impressiv.js.\n. This PR is long forgotten to me (3.5 years old). I have forgotten the context and need of this PR and have not used impress for a long time. Feel free to merge it if you see any value. As project maintainer it is ultimately your decision.\n. ",
    "rricard": "Wrong branch, no push state here ...\n. ",
    "igbanam": "A code example would be nice\n. I really don't see the helix positioning. Try overlapping in 3D\n. what I see from debugging this is that your absolute positioning puts elements into regions where clicks are handled by impress. specifically, the future steps overlay the current step. If a click occurs in this region, the impress handler handles is (which moves the presentation to the future or the past word). matter of fact, impress uses inline absolute positioning too to layout the steps from your html markup. With such overlay, you're always going to be changing steps; the way this is laid out.\nthat been said, playing with the z-index will not solve the issue because the different steps overlay and live on different planes. correct me if I am wrong on this; I am no CSS guru.\nMy solution was some minor DOM manipulation. I used jQuery to detach the .active step (this is class used by impress to note the current step) and prepend it to the body every time a navigation is performed with impress. \nbasically...\nvar cur = $(\".active\");\n$(document).ready(function() {\n    $(document).click(function() {\n        if (cur !== $(\".active\")) {\n            cur = $(\".active\");\n            cur.detach();\n            cur.prependTo(\"#impress\");\n        }\n    }\n}\nThis works; the links work. But the positioning of the step gets messed up. You can build on this.\n. another thing to keep in mind is: if your href attribute starts with #, impress would think you are referring to a step and try to handle the click as a navigation between steps\n. ",
    "y2s82": "I apologize for not providing this sooner, and apologize again if I fail to format this in a proper manner.  Here's the code :)\nhtml:\nhtml\n    <div class = \"step wordlist\" data-x=\"0\" data-y=\"0\" data-rotate-x=\"0\"  data-scale=\"1\">\n        <div class=\"word\">\n            Word 1\n        </div>\n        <div class=\"defpic\">\n            <img src=\"img/test2.jpg\" alt=\"Word 1\" width=\"650\">\n        </div>\n        <a class=\"definition2\" href=#>DEF1<span>Let's put the definition here</span></a>\n    </div>\n    <div class = \"step wordlist\" data-x=\"100\" data-y=\"0\" data-rotate-x=\"30\" data-scale=\"2\">\n        <div class=\"word\">\n            Word 2\n        </div>\n        <div class=\"defpic\">\n            <img src=\"img/test2.jpg\" alt=\"Word 2\" width=\"650\">\n        <a class=\"definition\" href=#>DEF2<span>Let's put the definition here</span></a>\n        </div>\n    </div>\nCSS:\ncss\n.defpic{\n    display:none;\n    position:absolute;\n    width:650px;\n    top:0px;\n    left:400px;\n    color:black;\n    opacity:100;\n    padding: 40px 60px;\n    border-radius: 10px;\n    background-color:white;\n    box-shadow: 0 2px 6px rgba(0,0,0,1);\n    border: 1px solid rgba(0,0,0,.3);\n}\n.present .defpic{\n    display:block;\n}\na.definition{\n    display:none;\n    position:absolute;\n    top:500px;\n    left:-400px;\n    background-color:green;\n}\n.present a.definition{\n    display:block;\n}\na.definition span {\n    position:absolute;\n    display:block;\n    width:940px;\n    left:250px;\n    background-color:white;\n    border-radius: 10px;\n    box-shadow: 0 2px 6px rgba(0,0,0,1);\n    border: 1px solid rgba(0,0,0,.3);\n    font-size:30px;\n    -moz-transform: translateX(-1300px);\n    -moz-transition: all 1s ease-in 0s ;\n}\na.definition:hover span {\n    -moz-transform: translateX(0px) translateY(50px);\n}\n. Ah, that was just the first two of the entire string. data-x, data-rotate-x, and data-scale will continue to increase in their own consistency. And this was the second variation that I tried in hopes to get that button to be accessible.  I was hoping that, by setting all z to 0, it might just let z-index to work.  Well it didn't :s.  The first variation didn't use data-scale but used data-z to achieve the 3D look quite similar to this one.  That didn't work either.\nI'll post the rest of the html and css below.  I apologize this uses scale to imitate the effects of 3D.  Either way, however, the problem seems to be the same; the .present slide gets blocked by other slides, which prevents the :hover characteristics to work.\n``` html\n\n\ntest presentation\n\n\n\n\n\nimpress.js not supported\n\n\n\n        Overview\n    \n\n\n            Word 1\n        \n\n\n\nDEF1Let's put the definition here\n\n\n\n            Word 2\n        \n\n\nDEF2Let's put the definition here\n\n\n\n\n            Word 3\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n\n            Word 4\n        \n\n\nDEF3Let's put the definition here\n\n\n\n impress().init();\n\n\n```\n``` css\nbody {\n    font-family: 'PT Sans', sans-serif;\n    min-height:740px;\n    background: rgb(215,215,215);\n/\n    pointer-events: none;\n /\n}\n.step {\n    display:block;\n    width:900px;\n    height:500px;\n    padding:40px;\n    margin:10px;\nfont-family: 'PT Serif', georgia, serif;\nfont-size:48px;\nline-height:1.5;\n\nbox-sizing: border-box;\n-moz-box-sizing:border-box;\n-moz-transition:    opacity 1s;\n\noverflow:hidden;\n\n}\n.wordlist{\n    height: 700px;\n    width: 1200px;\n    z-index:10;\n}\n.word{\n    display: block;\n    font-size:40px;\n    padding: 5px 10px;\n    border-radius: 10px;\n}\n.defpic{\n    display:none;\n    position:absolute;\n    width:650px;\n    top:0px;\n    left:400px;\n    color:black;\n    opacity:100;\n    padding: 40px 60px;\n    border-radius: 10px;\n    background-color:white;\n    box-shadow: 0 2px 6px rgba(0,0,0,1);\n    border: 1px solid rgba(0,0,0,.3);\n}\n.present .defpic{\n    display:block;\n}\na.definition{\n    display:none;\n    position:absolute;\n    top:500px;\n    left:-400px;\n    background-color:green;\n}\n.present a.definition{\n    display:block;\n}\na.definition span {\n    position:absolute;\n    display:block;\n    width:940px;\n    left:250px;\n    background-color:white;\n    border-radius: 10px;\n    box-shadow: 0 2px 6px rgba(0,0,0,1);\n    border: 1px solid rgba(0,0,0,.3);\n    font-size:30px;\n    -moz-transform: translateX(-1300px);\n    -moz-transition: all 1s ease-in 0s ;\n}\na.definition:hover span {\n    -moz-transform: translateX(0px) translateY(50px);\n}\n.defpic2{\n    display:block;\n    position:absolute;\n    width:650px;\n    top:0px;\n    left:400px;\n    color:black;\n    opacity:100;\n    padding: 40px 60px;\n    border-radius: 10px;\n    background-color:white;\n    box-shadow: 0 2px 6px rgba(0,0,0,1);\n    border: 1px solid rgba(0,0,0,.3);\n}\n.definition2 {\n    display: none;\n    position:absolute;\n    top:500px;\n    z-index:100;\n}\n.present .definition2 {\n    display: block;\n}\na.definition2 span {\n    position:absolute;\n    display:block;\n    width:940px;\n    left:100px;\n    background-color:white;\n    border-radius: 10px;\n    box-shadow: 0 2px 6px rgba(0,0,0,1);\n    border: 1px solid rgba(0,0,0,.3);\n    font-size:30px;\n    -moz-transform: translateX(-1300px);\n    -moz-transition: all 1s ease-in 0s ;\n}\na.definition2:hover span {\n    -moz-transform: translateX(0px) translateY(50px);\n}\noverview {\nz-index: -1;\npadding: 0;\n\n}\noverview:not(.active){\nopacity:0;\n\n}\n/ impress not supported styles /\n.impress-supported .fallback-message{\n    display:none;\n}\n.step:not(.active){\n    opacity:0.3;\n}\nimg {\n    vertical-align: middle;\n    width:100%;\n}\n```\n. Thanks for the input.  I'm not familiar enough with the javascript,\nthough, to really get it to work.  I think I might just have to\nstarting planning from the scratch.  Afterall, the visual is only a\ntool to get the content across; I shouldn't dwell in it too much.\nStill, I thank you for the assistance.  Perhaps when I learn bit more\nabout javascript, I'll come back to this topic again and see if I can\nmake sense of it all.  I apologize if this is a let down.  Again,\nthanx.\n. ",
    "Invidio": "Oh I don't see any differences neither now. But my firefox was actualized.\nMaybe it solved problem. Now it's OK.\nThank you!\n2012/8/9 Bartek Szopka notifications@github.com\n\nI don't see any differences in current versions of Chrome and Firefox (on\nMac).\nThe size of presentation (that may be interpreted as position of the\ncamera) depends on window size, so make sure you compare both browsers with\nthe same size (preferably fullscreen).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/bartaz/impress.js/issues/179#issuecomment-7607811.\n. Great! \nThanks!\n. \n",
    "ramaciotti": "Check issue #5. (Sorry for not posting a link, I'm answering from my cellphone).\n. Nice, it's put a link automagically :P\n. ",
    "zachrattner": "Cool, thanks!\n. ",
    "mariopce": "thanks for explanation :-)\nOn Aug 13, 2012 8:33 AM, \"Bartek Szopka\" notifications@github.com wrote:\n\ngoto was a future reserved name, but is not anymore. It seems that\neclipse JavaScript parser is outdated in this manner.\nSee more in related issue #119https://github.com/bartaz/impress.js/issues/119and comments:\nhttps://github.com/bartaz/impress.js/issues/119#issuecomment-4441338\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/bartaz/impress.js/pull/182#issuecomment-7684288.\n. \n",
    "patrickkettner": "Could you provide an example so someone could check it out?\n. ",
    "Valeka": "Huge thanks!\nYou are so right, I tested on the desktop browser where impress was fine but scaling was bad. But when I try in emulator impress didnt work but my replace script works well and looks fine.\nThanks again!\n. Huge thanks man! Brilliant and thank you for a such a fast answer!\n. ",
    "vladimirlisovets": "I did it by setting the min and max scale as same, and then just using media queries like I'd done in any other situation.\n. Sure - here is the part I was referring to\n```\n  $(window).load(getFromHash);\n$(window).bind('hashchange',  getFromHash);\nfunction getFromHash() {\nswitch(window.location.hash) {\n\n  case '#/about/me': \n    $('.pane#aboutme').css('display','block');\n  break;\n\n  case '#/about/skills/languages':\n    $('.pane#languages').css('display','block');\n  break;\n\n  default:\n    $('.pane').css('display','none'); \n  break;\n\n}\n\n}\n```\nThere are no steps like #/about/me, or #/about/skills/languages - So when I try to initially use them with the function load() (http://localhost/#/about/me) it is redirected to the first step by the impress.js script, once there is no step with that anchor.\nHowever, changing the the anchor during runtime works perfectly binding the hashchange.\nThanks for your response and time - Vlad.\n. Sadly it won't work in jsfiddle or jsbin - I can send you screenshots. It may give you the idea of what's happening.\n. It does not seem to be a problem - it may be a configuration to start from the first step when the anchor  does not coincide with any existing step.\nI was hoping that some developer or supporter of impress.js would know the function that may be doing it.\nI've a video that I'll upload and send to you - so you can see the behaviour.\nIt's something pretty simple. it's all about knowledge of the source code.\nThanks FagernMartinsBrack for your support till this moment - I really appreicate that.\nWhen I finish this project I'll create a repo with the web adaptation of impress js.\n. ",
    "dfernandeza": "Hi,\nI would be really cool to have some kind of destroy() function but in the meantime I'm using: \njavascript\n// Avoid default impress.js keyboard bindings for <pre> elements\nvar codeEditors = document.getElementsByTagName('pre');\nvar i;\nfor (i = 0; i < codeEditors.length; i++) {\n    codeEditors[i].addEventListener(\"keyup\", function (event) {\n        event.stopPropagation();\n    }, false);\n    codeEditors[i].addEventListener(\"keydown\", function (event) {\n        event.stopPropagation();\n    }, false);\n}\nPlease take into account that this is not the best way of doing this, The best way to do this is to add a function to destroy the impress instance\nRegards\n. ",
    "dimitrii": "hah, no it was an accident! Disregard the pull request. Great JS lib by the way. I really enjoy it.\n. ",
    "sindresorhus": "Let's do it.\n. ",
    "ferlores": "Yes, those are good points. I didn't expect this pull to get merged but I just wanted to share this possibility.\nCheers!\nF\n. ",
    "Sigmun": "This is not working anymore... Do you know why? I wish I could that kind of feature (and math also) by adding js script this way. ",
    "djempty": "Here's my code. Any help would be appreciated:\n<div class=\"step\" data-x=\"1000\" data-y=\"-1500\" style=\"text-align: center;\">\n    <q>This is an example of <b>\"VIDEO\"</b></q>\n        <video width=\"640\" height=\"480\" controls=\"controls\" src=\"video.mp4\" >\n          Your browser does not support the video tag.\n        </video>\n    </div>\n. Hi,\nI got it to work. The issue was with the controls. I ended up using the video.js controls.\nWondering now how I can have the \"hint\" disappear when the video Play button is pressed.\nAny ideas on how I can make the Hint disappear on an event such as this?\nThanks.\n. ",
    "mtrinder": "Hi,\nagree with djempty. I have a video that does work on the iPad without impress.js\nBut with impress.js it doesn't play. I had limited success getting the \"controls\" to\nshow using this technique,\nvideo {\n.\n.\n.\n    -webkit-transform: translateZ(50px);\n}\nbut the video still wouldn't play when tapping the play button.\nI am using the video.js controls now too.\nOh and BTW, impress.js rocks!!\n. ",
    "markdarb": "For anyone else who might benefit from the knowledge, that means if you want the presentation to scale up to 1080p without pixellation you should use <div id=\"impress\"  data-height=\"1080\">. It will then scale down fine to smaller resolutions, but the tradeoff is that this could make the presentation perform worse (especially on slower computers).\n. ",
    "ax3l": "I am trying to reproduce the data-max-scale behaviour but I can not get my images sharper.\nMy slide deck:\n- slide 1: data-scale=8 with a full-screen image\n- slide 2: data-scale=1 with a slide \"above\" the previous image (basically zoomed to a certain position of it)\nas soon as I go to slide 2 the slide 1 resolution is not increased and the \"background\" provided by it pixels up...\nDo you have an idea what I am missing?\nhtml\n<div id=\"impress\" data-width=\"1920\" data-height=\"1080\" data-max-scale=\"8\">\n    <div id=\"overview\" class=\"step\" data-x=\"0\" data-y=\"0\" data-z=\"-10\" data-scale=\"8\">\n        <img alt=\"world map\" src=\"img/my_large_background.svg\" width=\"100%\" />\n    </div>\n    <div id=\"title\" class=\"step\" data-x=\"0\" data-y=\"-3000\" data-z=\"200\" data-rotate-x=\"-20\">\n        something\n    </div>\n</div>\nUpdate: see #544 (not solving the problem exactly but enough for my use-case)\n. @chenweiyj did you find a solution to that?\n. Ok, I solved that for now by just creating a non-step div with absolute positioning\n``` html\n\n\n        something\n    \n\n        something2\n    \n\n        \u00a0\n    \n<div id=\"backgroundStatic\" style=\"width:15360px; height:8640px; transform: translateX(-50%) translateY(-50%);\">\n    <img alt=\"world map\" src=\"img/my_large_background.svg\" width=\"100%\" />\n</div>\n\n\n```\n. ",
    "toxin20": "using the code i posted above i get the this result when zooming in:\n\nif i use data-scale 0.3 and 1 instead of 1 and 5 i get the same result, so i don't think it is related to data-scale smaller/bigger than 1. \nnext thing i tried was changing data-perspective=\"0\" for the impress div to turn off 3d effects ... the effects i'm using should all be 2d anyway, i don't need the 3d transformations for this specific project. \nbut that didn't change anything as well, still see it pixelated like in the screenshot above.\nis there any way to make this work? i found this zoomooz library example: http://janne.aukia.com/zoomooz/examples/svgtree/index.html\nso technically it should work but i don't know if the same thing is possible with impressjs. \n. any ideas? \nif something like that wouldn't work with impress, maybe you know of any other js libraries which make zoom in animations like that possible?\n. ",
    "FlorianWendelborn": "Is there a chance that this gets fixed? I used a custom SVG in one of my presentations too and was kinda sad that it got blurry.\n. It can be solved with\n   .step.active {\n        z-index: 2;\n    }\n. ",
    "speendo": "I don't know much about the technical details of this problem, but wouldn't it be possible to add the image far away on the z-axis instead of scaling it? Zooming in would really be zooming then...\nI have the same problem :+1: :)\n. ",
    "prasad8mhatre": "Is there any licenses on the content,i.e if i make any presentation with it, and send it to my boss,and if he replaces my name with his name.Then is there any provision to license to my content somewhere on some site.\n. I am not sure about that is this right or wrong,but i would like to share we you, My idea:-\n1.making one website where you can upload your presentation over there.\n2.when you are uploading it, it will search in its database about our content ,this searching is based on plagiarism principles.\n3.if the system founds something related to your content.\n4.if the similar content ratio is greater some value.\n5.then it will check the your presentation and found authors presentation,then it will check licenses of found authors.\n6.if there is no violation of licenses.\n7.then, it will be uploaded on server and we have to set some licenses such as CC(among those 6),\n8.thus your content is save on server,this way my content is somewhat safer.\n9)if someone stole your work, and present somewhere which may be violating the some licenses.Then we can show him that i have done something like this, and our work will be protected maybe.\n\nI am thinking in this way,please let me know other side of it also,because while we are doing something we feel that we are right,but there may be some other side of this also.\nplease let me know.\nthanks in advance. \n. yes,that's right..that's why nothing is secured 100% in\nworld...because when you try to build out something to protect\n...there would be many people who try to some way to break\nit...alright\nthanks sir\nOn 2/20/14, Bartek Szopka notifications@github.com wrote:\n\nI don't know how this relates to impress.js.\nAnyway, the web is so wide an open, that you never have a guarantee that\nsomeone would not use content that you posted on-line until you find it.\nLicences like CC only give you the tool to say what you allow do to with\nyour content, but there is no way you can prevent others to use it in any\n(evil) way they want.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/bartaz/impress.js/issues/199#issuecomment-35632750\n\n\nRegards,\nPrasad Mhatre.\n. ",
    "blatan": "Hi brice-websailors and thanks for the tip.\nI've just checked the substeps.\nHonestly speaking it isn't what I'm looking for.\nI've got another idea, but I don't know if I can make it as I want.\nMaybe when I publish the presentation you will see what I'm talking about.\n. Hi brice-websailors and all,\nI did substeps in my presentation.\nYou can see them here:\nhttp://latech.pl/latech-steel-presentation/#/wp-db-diagram-all\nand here:\nhttp://latech.pl/latech-steel-presentation/#/what-we-want-category-all\nChrome is too slow it's better to open it in Safari.\nI put one big div and several smaller divs.\nI added background-image and and I moved it with background-position, data-x and data-y parameters. data-z is always 0 (zero)\nThis way I have slides which are perfectly suited and I can make them 'active' one by one \nWhat do you think about my idea? Is there a better or simpler way to do it?\n. ",
    "gitnik": "Can't confirm that on the latest Chrome. Maybe you should attach the code you're using?\n. ",
    "TimHeckel": "bump. Any thoughts on this sir?\n. Hi Bartaz, just bumping this again :)\n. ",
    "yosun": "was a solution found? is it possible to use impress with the slides being small parts of a large background image \n. ",
    "blackheaven": "No it does not, I do not know, maybe.\n. ",
    "bmeisele": "That would be cool until you start moving in the third dimension by transforming in z or rotating too far.\nI haven't tried this, but perhaps \"doubling up\" each div and including the large image in one and then using the same coordinates (or slightly off for a cool drifting effect) in the other would let you move all around the canvas.\n. ",
    "dragoinc": "But in this case the first slide (with the background) will be shown separately.\nHow can I prevent it from showing?\n. ",
    "emoriver": "The only problem in this approach in my personal experience (at least in Safari) is a big white margin, it seems that the image is positioned starting from a left margin of the slide so in a relative position, would it be possibile to center it in the screen (CSS...?) and not the slide?\n. ",
    "macropin": "(edited)\nFor the benefit of everyone who finds this, the solution is as follows:\n1. Add an empty div tag just after the opening body tag.\n2. Apply your background image and styles to that tag.\nThis will create a global background that is visible on all slides. Tested in Chrome.\n. ",
    "hokascha": "@bartaz your workaround works almost as expected for me. As my big image is really big the perfect solution for me would be to somehow \"skip\" the step containing the big image. Is there a way to skip a step in the presentation but still having the step on the screen positioned using data-x, data-y and data-z?\n. ",
    "benjaminellison": "I've just done something similar, although I made the div tag containing my large picture the very last div. All of the other divs/steps have no content... they're basically just viewport/stops along the big image. I had to tweak the style slightly so the \"inactive\" steps weren't alpha transparent, so my big image didn't fade out. With a bit of skew (rotation on X, Y), some changes in Z height, and once in a while a change to the scale, it makes for a very intriguing \"fly over\" tour of a very large schematic/diagram.\n. ",
    "wikier": "BTW, if cause it'd help, I notice than moving the scroll, and then switch to/from full screen mode makes the scroll go to where it should be.\n. ",
    "carljm": "Inspired by this pull request, I've created a much simpler version of this functionality, where all impress.js does is add .stepped classes to .innerStep elements one at a time on next() if there are any remaining un-stepped innerSteps on the current slide. It doesn't do anything CSS-related, not even opacity, certainly not looking for JSON in data or anything. You can just write your own CSS for that, hooking into the .innerStep and .stepped classes. I'll submit my version as a pull request soon.\n. Yes, I think this is roughly the same functionality as #207. This version of the functionality worked well for me in practice and was easy to use; I'd need to take a closer look at #207 to see how it compares in practice.\n. After further review, I think this is rather different from #207 (though they are similar enough that I don't think both should be merged; rather one of them should be improved if needed to make sure it can handle the same use cases as the other).\nAFAICT #207 is usable only by a JS developer. The substeps are not elements in the markup that one steps through, they are callback functions attached to a slide via somewhat circuitous means (you have a global window.impressSubsteps object, which is a string-indexed collection of callback functions, and then you reference one of those callback functions with a string in the slide's data-substep attribute). The callback can do anything it wants on an attempt to advance to the next slide, and it can prevent the slide from advancing by returning false. This is a very flexible system, but on the downside it has a much steeper barrier to entry, especially for non-developers.\nWith this PR, you can declare any element in your slide an \"innerStep\" by just giving it the CSS class .innerstep. As you advance, each innerstep within the slide, from first to last, is given the CSS class .stepped. Thus it's trivial with only CSS knowledge to do a typical set of \"revealed\" substeps, by just styling .innerstep as invisible and .innerstep.stepped as visible. For more advanced use cases requiring custom JS, this PR also offers the \"innerstep\" event, which allows running arbitrary JS at the time of an innerstep advance.\nSo I believe that this PR ultimately offers the same flexibility as #207 for when its needed, but makes the simple cases much simpler (and usable by non-developers). Also, I think it's more consistent with the existing impress.js API, in that the hook for custom code is an impress event, not the introduction of an entirely new global object full of callback functions.\n. (I wouldn't have any problem with updating this PR to rename them from \"innerSteps\" to \"substeps\", if that naming is preferred. Or any other changes that are desired.)\n. This looks like pretty much the same thing as #264, just with slightly different naming choices. I think it's a good approach in general, and I don't care which one is merged.\n. ",
    "coltpini": "To be honest, I haven't used impress for a long time.\nIn this pull request was a way, not only to have a sub step, but to also move things around as part of the sub step, kinda like keynotes magic move.\nColt Pini\n\nOn Feb 5, 2016, at 5:08 AM, Fagner Brack notifications@github.com wrote:\nHi @coltpini, in an effort to clear up older issues/PRs we are pinging back to know if you are still tracking this request.\nTo give a little bit of context, recently a decision was made in the project to make the development more active and the first task is to clear up older issues like this one to see if the OP is still interested in keep it going.\nBy the way, this seems duplicate of the substep functionality proposed on #207\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "piranna": "Mainly homogeneity of the API: having a \"step\" class, it make sense to have a \"substep\" class inside them, and look for the substeps searching for the substep classes inside a step class instead of define them explicitly as you did with the data-multistep. This will make API cleaner and easier to understand.\n. I understand you, but didn't finished to see it. Maybe I should do some experiments before...\n. I think this is a basic functionality...\nEl 5/2/2016 13:16, \"Fagner Brack\" notifications@github.com escribi\u00f3:\n\nHi @briceparent https://github.com/briceparent, in an effort to clear\nup older issues/PRs we are pinging back to know if you are still tracking\nthis request.\nTo give a little bit of context, recently a decision was made in the\nproject to make the development more active and the first task is to clear\nup older issues like this one to see if the OP is still interested in keep\nit going.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/impress/impress.js/pull/215#issuecomment-180325459.\n. Any estimated date whe this will be merged?\n. 'another line' is written twice\n. It's not fully pretty, I think it should be better to have just one \"substep\" class in the same way there's a \"step\" class, used both for identification of the substeps and to manage them. Later you could be able to add several classes for the effects.\n\nFor example, I would do \"substep show text_to_red\" and \"substep show text_to_green\", being \"substep\" an identifier for the substep, \"show\" an effect to show the item, and \"text_to_red\" and \"text_to_green\" color effects. This would allow to being more simple and versatile and also some basic effects like \"show\" could be collected on a library and also could be used both for steps and substeps.\n. ",
    "JWorthington": "What's the status of this commit? \nI agree that with @piranna that it would be more parsimonious to use class=\"substep\" on the children, and run through a \njavascript\nsteps = $$(\".substep\", activeStep);\nsteps.forEach( initStep );\nloop during stepenter to build the substeps.\nI wish the main impress.js had a hook so we could do this as a plugin, but I don't see any way to put this in that doesn't alter the main code.\n. Here's how I solved it. Rather than load up a whole array of substeps on\nload, it looks for children of the activeStep with a class of .substep on\nnext().\nSince there's no hook in the next() function, I replaced the whole\nfunction. I don't know how to formulate this as a pull request, so here it\nis.\n// `next` API function goes to next substep within activeStep or to\nnext step (in document order)\n        var next = function () {\n// if this step has substeps, and we're not already on the last one, then\n\"go to\" the first/next substep and short-circuit going to the next step\nvar substeps = $$(\".substep\", activeStep);\nif (substeps.length != 0) {\n// if there is an active substep, deactivate it and activate the next\nsubstep\nvar activeSubstep = $(\".substep.active\", activeStep);\nif (activeSubstep != null) {\n// make this one \"past\"\nactiveSubstep.classList.remove(\"active\");\nactiveSubstep.classList.add(\"past\");\n// if this is not the last substep, make the next substep \"active\"\nvar activeSubstepIndex = substeps.indexOf(activeSubstep);\nif (activeSubstepIndex < substeps.length - 1) {\nactiveSubstep = substeps[activeSubstepIndex + 1];\nactiveSubstep.classList.remove(\"past\"); // shouldn't be \"past\", but just to\nbe thorough\nactiveSubstep.classList.add(\"active\");\nreturn true; // exit before calling goto(next)\n}\n// else it was the last substep, so flow through to the normal next-step\nbehavior\n  }\nelse { // no active substep (yet)\n// if not all \"past\" (i.e., if not any are past), activate the first substep\nif ($(\".substep.past\", activeStep) == null) {\n// if none is \"active\" and none are \"past\", they must be all future (the\ndefault state), so set the first one active\nvar activeSubstep = substeps[0];\nactiveSubstep.classList.add(\"active\");\nreturn true; // exit before calling goto(next)\n}\n// else all substeps were previously visited, so flow through to the normal\nnext-step behavior\n}\n}\n            var next = steps.indexOf( activeStep ) + 1;\n            next = next < steps.length ? steps[ next ] : steps[ 0 ];\nreturn goto(next);\n    };\nOn Fri, Feb 5, 2016 at 7:47 AM Brice PARENT notifications@github.com\nwrote:\n\nHello !\nI'm not using Impress anymore (not that I've replaced it with any other\nlib or technology, I just happen not to have the use for it).\nWhen I opened this, it was just to propose my way of having substeps\nworking like I needed it. I'm not sure if the problem and the solution are\nstill relevant, or if my implementation is the one you need.\nFeel free to keep this open and merge it if you feel like so, but don't do\nit for me as I probably won't find time to help you with it.\nBrice\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/impress/impress.js/pull/215#issuecomment-180338629.\n. \n",
    "bizmate": "I have seen similar problem in my mac chrome before but i guess with the last version it is all gone.\n. I will need to look at my repo on my codebase tonight or tomorrow night and I will let you know or push an example somewhere so you can review it\n. I think this can be closed now. I have checked and it all works as expected for me\n. I cannot see some slides, some other slides height is stretched down (as if they are pressed toward the centre) and on some overlapping slides despite being really far on the y axis you can still see both, for instance the thank you slide  is visible on top of the main #bored one\nI have created a video where you can see this ... it is about 8mg\nhttp://bizmate.dreamhosters.com/impresstest/impressOnWindowsChrome.ogv\nYou can save the video on your pc and open it with VLC\n. Indeed i see the overlapping problem on that presentation too ... the big text you show at the end of it #overview can be seen on all the slides starting from the #che one\nI can still see the issue even with higher resolution. BTW do you know anything about the disappearing slides?\n. I just tried to change the data-perspective element on the body. I tried with 500, 5000 and some other strange value but it does not fix the problem. \nFor the moment i had to remove all the data-rotate-x i had in my presentation and set it to 0 because on some windows machines (lots of people have confirmed) they can see the issue where by the browser does not rotate the perspective so a data-rotate-x=\"45\" looks like it is stretched to half of his size\nand \ndata-rotate-x=\"90\" make the slide totally invisible\nIs there any other suggestion on how the disappearing slides problem can be solved?\n. pyriand3r I had to remove the effect and stick  to the basics due to this.\n. Where is your source code? PASTE it in full somewhere if you have no url\n. If you presentation is fairly flat and you can organise the slides in a way they are visible in a zoomed out state, like this thank you message in this presentation http://www.bizmate.biz/presents/#/thankyou , or near each other then in the zoomed out slide they should all be visible\nThis of course is not an overview like a table of contents that you can jump to one of the sub slides but visually it a possible workaround. \nI dont think there is a built in overview feature fully comprehensive of great features like jump to slide unless you build it manually\n. Just a comment, \nEven if you tested on Windows, it does not prove the graphic card is working well on your linux install. You might get graphics/rendering problems on linux If your vga drivers are not set correctly or there are no linux compatible drivers for your graphics card thus some default is picked up\n. About \"how to find people who will not only just want to add new stuff to impress.js but will take a good care of the project\". Very difficult in distributed projects unless you implement high standards and processes both to design and code new features. In brief my suggestion is to choose an architecture, expect a certain code standard to be enforced and use TDD or even better BDD for each new feature/request/bugfix. To guarantee the BDD/TDD process you can also use a CI environment like https://travis-ci.org/. Javascript is not my strongest so I could only help around BDD/TDD and CI.\n. ",
    "jeroenvisser101": "I came across this problem today, and I think it's because the zIndex is given at the same time as the x and y coordinates, which makes the zIndex less important. That makes the zIndex is given first, and then the x and y coordinates are given. What I should be allowed to do is assign the transforms in the order that I put them in the HTML.\n. Same as @fghaas, haven't used it in a while, but if I have time I could check back on this.\n. Not going to be tonight, maybe tomorrow morning/night\n. Same here, cannot seem to reproduce!\n. ",
    "zevero": "In Chrome 28 on Ubuntu 13.04 it's still not working (i.e. \"tiny ideas\" of the demo is inside the g and not behind)\n. ",
    "pyriand3r": "Same problem on Kubuntu 13.04 raring + chromium 28 / chrome 28. both the same, data-z is ignored, firefox works but lags. Strange thing is, on my Ubuntu 13.04 raring + chromium it worked few days ago... don't know but maybe there are other packages i had installed that kind of \"fixed\" this issue?? But i really can't imagine what that could have been, had installed pretty much stuff :)\n. Hey guys,\nsorry for my late reply. I haven't used impress for a while, too, but i will check my presentations made with it. Hopefully i will find time today, but i can't promise it. \n. I have tested it and data-z is working for me in chrome 48 under arch linux. Just added data-z to first slides of the demo presentation... works fine though.\n. i have the same problem on chromium under ubuntu 12.10 64bit. till today everything worked fine, now the slides with data-rotate-x=90 disappear... ??? firefox is showing them as they should be... any ideas on that?\n. I had to update my graphics drivers... my amd drivers were broken due to an kernel update. Now everythings working again... don't know, maybe this could help you too.\n. ",
    "thomasjungblut": "I'm on Ubuntu 12.10 with Chromium v28. I'm on a laptop and my intel gpu is blacklisted, so in order to make it render the fancy 3d effects I had to go to chrome://flags/ and turn on \"override software rendering list\".\nThe only problem I have is, that it randomly hangs up on some substeps from #280. However, I remember that it worked a few months ago without any problems (arround may, probably an older chromium version).\nFirefox works, but lags.\n. ",
    "fghaas": "Unfortunately I can't really comment as I now use reveal.js as my primary means of writing presentations, and haven't written a new deck in Impress for a while. But thanks for checking back!\n. ",
    "DjebbZ": "I tried as well today, with no luck. As I wanted to completely deactivate keyboard navigation, I ended up commenting out code directly in impress.js :/\nI think it's not possible at all because in javascript one cannot call document.removeEventListener without specifying which function callback to deactivate. But impress use anonymous callback, so we're out of luck. And even if the callback was named inside impress.js, it's in a closure, so we can't access it from our own code.\nConfirmation anyone ?\n. ",
    "kg4lod": "Just guessing here, but meteor might be adjusting your class names or messing with the elements impress uses to select DOM elements. Check that your class names and id's are still intact after packaging. If that holds, I'd need to know better what you mean by \"there's no object return\"\n. ok, well glad you got it working. You might wish to let the Meteor team know about your use case. Geoff's (one of the founders) a friend of mine. I can assure you that they'll take it to heart. They love hearing from users with new scenarios. Cheers.\n. ",
    "crapthings": "let's say, if i put impress.js to root\\lib\\client it will load inside  tag and i can't init() it with impress().init(), because it can't find #impress. i can't init() even use Meteor.startup or domready\n. for now, i wrap impress.js with Meteor.startup it's working, but i think it's kinda weird.\n. ",
    "jonmholt": "Don't forget to add a root element with ID of \"impress\"\n. ",
    "aspiers": "Yes sure - I'm very much interested in seeing this implemented.  Some obvious examples:\n- GitHub\n- Gmail\n- Google Calendar\n- Google Drive\n- Trello\n- gerrit\nbut I am sure there are many others following the example of these very popular sites.\n. Oh sorry, I just noticed I already gave a list in the original issue description :-)\n. @FagnerMartinsBrack I think maybe you are fundamentally misunderstanding the feature request? Because you seem to think it's way more complicated than it actually is:\n1. visit one of the sites I mentioned\n2. press the '?' key\n3. observe a popup window listing all the keyboard shortcuts available\nYou definitely don't need any videos for this!  It takes about 10 seconds per site to verify that they do it.\n. Oh haha, OK :-)  Well hopefully now you can see how useful this feature is and agree with me that it would be awesome if impress.js had it ;-)\n. Just checked and it seems that reveal.js also adopted this convention.\n. Just find out how google do it and copy their solution :)\n. Thanks a lot for your work on this!  It would be more helpful to either generate a pull request, or if you feel the work is not ready for a pull request yet, link to a comparison between your master and upstream's:\nhttps://github.com/m4n2b/impress.js/compare/bartaz:master...master\nAnother useful trick is to reference this github issue from the commit messages, e.g. mention \"github issue #221\" in the commit message, or even better the full URL.\nso that later when people review the git history offline, they can see that these comments stemmed from this issue.\n. Probably nothing, but browsers have not standardised on F11, and due to the popularity of sites like YouTube, plenty of people (even if not the majority) would expect F to work.. FWIW, F5 is used as the reload key in some popular browsers.. ",
    "Pierstoval": "The problem is that the keyCode for ? differs between countries, so I think we would need many workarounds for this :confused: \n. Have you seen Google source code ? :laughing: \n. We have to investigate more on this, I suggest to let the issue open until we found whether it's \"easily feasible\" or \"too hard to do\".\n. Actually, after testing on many browsers, shift + space have the same beahviors, so we could implement this feature as \"mixin\" between web and presentation standards :smile: \n. I'm digging up this repository because I've updated OrbitaleEasyImpress with latest impress.js version, and it seems that mobile support is still not activated because of this line:\n``` js\nvar impressSupported =\n// Browser should support CSS 3D transtorms\n   ( pfx( \"perspective\" ) !== null ) &&\n// Browser should support classList and dataset APIs\n   ( body.classList ) &&\n   ( body.dataset ) &&\n// But some mobile devices need to be blacklisted,\n  // because their CSS 3D support or hardware is not\n  // good enough to run impress.js properly, sorry...\n   ( ua.search( /(iphone)|(ipod)|(android)/ ) === -1 ); // <======== This line\n```\nI've put online the new demo of EasyImpress here, and indeed the only solution to make touch work is to manually add buttons for next/previous actions.\nBut still, I think we could add a specific case: if \"touch\" is activated (whether it can be mobile or tablet or even tablet pc like HP Surface or something), we could add new events to detect left or right swiping in order to trigger next and previous events in Impress.js.\nBut I don't know how the \"touch\" API works in JS, so if you have ideas \ud83d\ude09\n. @henrikingo did you make a PR for this?\n. What were the memory issues you had? Was it about the 3d positionning, or the animations themselves?\n. Maybe could check how Reveal.js handles this? It also uses 3d positionning \ud83d\ude15 \n. Maybe there's a way to do like in video games : get all steps in memory, and on each slide, redraw the whole thing but keep only elements that are located in \"extended\" viewport size (meaning width+height+depth, each multiplied by 2 for example), this would allow the user and/or the developer to manually specify the \"visible depth\" as in video games when you want to specify the depth of rendering distant objects.\nDo you think this is possible to do this at runtime? This would save a LOT of memory, actually, even for small projects. \nThere would be only some drawbacks depending on the presentation itself, for example the overview in the demo app may not show some of the elements.\nOr maybe use canvas ? \ud83d\ude06 \n. No problem for me as it's in the demo, so it's ok\n. This feature should be enabled/disabled by the developer to avoid behavior misunderstanding. Even if I like the feature I'd set it to off by default\n. :-1: too, an overview should be set by the user, not by impress itself\n. Totally agree too, I'd really like to see more stuff like full-size-background sliders, new events listeners and more incredible parameters ! :) :+1: \n. As the project is still loved by many, it could be good to conclude about the state of the project :) \nIs it stored on an \"impress\" organization, does @FagnerMartinsBrack become the new \"project leader\" of impress.js ? \nI'm trying to develop some frameworks based on impress.js, and I'm certainly not the only one, so it could be good to have an \"official reference\" to impress.js :) \n. When I'll have more sliders to make, I'll try jmpress thanks for the notice @FagnerMartinsBrack  :)\n. :+1: I'd like to :) \n. @bartaz Nice for the @impress organization!\nCan't wait! :smile: \n. If you just \"transfer ownership\" to the impress organization, the old repo will redirect to the organization automatically, no worry about the old one as long as you don't recreate a similar repo in your own account\n. Yep it'll break the link, but a simple message in the README.md file might be useful enough to redirect users to the correct repository :) \nOr you can still use a simple branch in the new org to avoid putting this warning message in the repo.\n. We'll wait, it's great that it's part of this event!! :+1: :+1: \n. @Klerith => Is it already open-sourced? We might all take a look, and you can propose to add this future app in the Impress wiki\n. Good luck then ;)\n2015-05-20 15:47 GMT+02:00 Fernando notifications@github.com:\n\nAs I said before. Is under development. I want to create a website to give\nevery body access to make impress presentations easily and free.\nThe code I'm not sure if will be open source, but we will see how it goes.\nWish me luck.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/bartaz/impress.js/issues/435#issuecomment-103893698.\n. Yeah, can't wait! :+1: \n. @bartaz this is such a honor :+1: \nI confirm I agree with the decision and I think that decisions may be taken with full agreement of the deciders and your policy and goals :)\n\nSome other guidelines about the project itself might be good if you have some advices to give, it could help in resolving the tons of awaiting PRs\n. @FagnerMartinsBrack If you can, you may create different issues for these milestones, but actually, setting up a proper API should be the first thing to do IMO because Impress.js may need a bit of refactoring for it to be more API-compliant. Then, create docs about the API, and after that do everything else :)\n. @GordonSmith Do you have a pending PR from your fork? If you rebase it, we could discuss about the features/fixes you added and make some improvements :wink: \n. :+1: I like it !\n. I tagged this issue with future because this is definitely a feature we'll need in the future :)\n. Yeah you're right, but IMO we still should label one of the two with the tag, it really helps searching for what we'll implement after refactoring the codebase.\n. :+1: for MIT, it's fairly enough.\n. Please show your html code for we can see better where the problem is\n. Is there any news from here? \ud83d\ude09 \n. @bartaz I made fb0f882 to fix your comments. Could you reply only in the PR (\"Files changed\" tab, and not the commit itself) to keep the diff/notes up to date to your needs? :) \n. > The good thing in comment on the \"Files Changed\" tab is that Github shows a part of the snippet and all comments below it in the timeline\nAnd when a line of code is changed, the note appears as outdated diff instead of a global note :wink: \n. Totally agree with this :+1: \nWhat I'd recommend is to create a very basic CONTRIBUTING.md file that would simply ask to read this issue so new contributors only refer bugs in their new tickets and no new features. Maybe then some contributors might help in the proces of cleaning the repo. What do you think?\n. I think we should leave this issue open until the project gets some cleanup for we can remember that contributing guidelines should be changed when the API changes and gets better :)\n. Oh no, actually I was just talking about the contributing file, nevermind I think I got lost in the huge amount of issues :smile: \n. Apart my comments, I'm :+1: on this :smile: \n. Apart the https things, everything's ok to me :)\n. :+1: \n. If you mean in the Demos wiki I solved this :+1: \nThumbs up if you think it's ok\n. I will take care of the wiki then, I saw you have plenty of work with PRs and issues :wink: \n. @FagnerMartinsBrack Very good idea for the wiki issue!\nThe wiki still has to be cleaned but the basics are good now.\n. Nope, you can do it, I'll just clean what I need to clean (the links I haven't checked yet, I'll look at this soon) and let the rest of the team manage :) As I said on Twitter I have to leave OpenSource projects for a while for personal reasons (mostly because of the time needed for these projects) :wink: \n. I agree, just need some changes in the events IMO\n. Symfony's template is good IMO:\nmarkdown\n| Q             | A\n| ------------- | ---\n| Branch        | master for features and deprecations / lowest applicable and maintained version otherwise\n| Bug fix?      | yes/no\n| New feature?  | yes/no\n| BC breaks?    | yes/no\n| Deprecations? | yes/no\n| Tests pass?   | yes/no\n| Fixed tickets | comma-separated list of tickets fixed by the PR, if any\n| License       | MIT\n| Doc PR        | reference to the documentation PR, if any\nIs rendered like this:\n| Q | A |\n| --- | --- |\n| Branch | master for features and deprecations / lowest applicable and maintained version otherwise |\n| Bug fix? | yes/no |\n| New feature? | yes/no |\n| BC breaks? | yes/no |\n| Deprecations? | yes/no |\n| Tests pass? | yes/no |\n| Fixed tickets | comma-separated list of tickets fixed by the PR, if any |\n| License | MIT |\n| Doc PR | reference to the documentation PR, if any |\nIndeed could be cleaned a little because we might not have a branch strategy nor a specific repo for the documentation, but for the rest it seems legit to me to have such a pragmatic template\n. I don't know if this comment has its place here or in another issue but...\nWhat's the difference between .present and .active exactly?\n. In the docs, I think there should be a small explanation of the list of all events/things that happen when slides change (when clicking on a step element, or using .goto() or .next(), etc.), to be more clear about what happens\n. Fixed in a33f2ec !\n. You could make this text bold, actually :)\n. I recommend to point websites like Pastebin or JsFiddle to be sure users know about them.\n. I'd say \"issue tracker\" to be more convenient with Github itself.\n. Instead of \"the browser\", maybe \"as much browsers as you can test\" would be more restrictive but help more understand the consequences of a lack of compatibility\n. One link is http while the other is https, the first one should use https\n. The link should use https too\n. ",
    "terrycloth": "Most browsers have a built-in full-screen mode, which get activated when you hit F11. What's the difference between that and OP's feature request?. At the very least, it would probably help if the impress.js README was updated with a note about how @bartaz can't work on it anymore, and then maybe link here, so users can find forks and plugins if they want to see some of the more recent developments. bartaz could probably avoid a lot of repeat questions that way.\n. If we want to do it, then let's just do it. I've started a GitHub Organization -- impress-js -- so anyone who wants to can participate. For now, anyone who wants to join will be put into a team with write access. If we have enough members, we could hold a small election to see who will get admin access, and maybe figure out a more formal organization structure.\n. @bartaz \nOh, I did see the impress username was taken, but it was empty, and there's a user called impressJS who doesn't seem affiliated with impress.js the presentation framework. However you want to do it is fine.\nI'll probably remove the impress-js organization once yours goes public.\n. Ah, thanks.\n. Maybe each nonlinear jump adds a new history entry, but normal linear navigation of a presentation replaces browser history by default?. ",
    "under-score": "million thanks - didn't see that open door...\n. ",
    "Ed-0x1b": "Since I already wrote this out - extended description of objective. Picture one long file of code, no pagination, highlighting is OK (I like Solarized). ok - starting impress slideshow => slide one shows the headers at the top of the file, slide two moves down and shows the includes in the file, slide three drops down to where the arguments are handled, slide four moves back up to the main class.. and so on. Right now my experience has been that any image that extends beyond a slides border is a problem - and fails.\n. my bad - first time around github issues - blackout would be a nice feature too - sorry about the noise hornos.\n. ",
    "boutil": "Thank you very much for the clarification.\nCheers,\nC\u00e9dric\n. ",
    "Walther": "Bumping this issue - would appreciate support for blanking the screen. This is possible in other popular presentation tools such as PowerPoint and Reveal.js (if I recall correctly, the . button is used)\n. ",
    "jroper": "For anyone that wants to add the blackout feature to their own presentation, I added the following Javascript code to mine:\njavascript\n    document.addEventListener(\"keypress\", function(event) {\n        if (event.keyCode == 120 /* x */) {\n            var blackOut = document.getElementsByClassName(\"blackOut\")[0];\n            if (blackOut.style.display == \"block\") {\n                blackOut.style.display = \"none\";\n            } else {\n                blackOut.style.display = \"block\";\n            }\n        }\n        return true;\n    });\nWith the following stylesheet:\ncss\n.blackOut {\n  position: fixed;\n  display: none;\n  background-color: black;\n  z-index: 1000;\n  height: 100%;\n  width: 100%;\n}\nAnd then I added the following markup to my page:\nhtml\n<div class=\"blackOut\"></div>\nThis binds x to blackout, which is the key that my presenter sends when I hit the blackout button.  If you want whiteout, then simply change the background-color in the CSS to white. Or to any other colour you'd prefer.\n. ",
    "opatut": "Well thanks for the event hints. Also, I think it would be pretty obvious which step is \"next\", since you code them in order, and impress.js does need to have some kind of order of steps, since they are supposed to be shown in order. Since humans cannot warp around in time, each presentation will always be linear, so the order of steps is determinate. Even when people use empty steps to go back to an already-visited camera view, this step will be after those that happened in between. It is not the same step as before.\nThe only case when the presentations gets non-linear would be when people use conditionals (however they are implemented) to go to a specified step again or not (branches and loops). But again, then they don't have to use \"before\" and \"after\", rather \"past\" and \"future\".\n. ",
    "lisp-ceo": "Agreed. Give me a few ours and I'll send back another pull request.\nRegards,\nJames Meldrum\nOn 01/12/2012, at 4:29 PM, Bartek Szopka notifications@github.com wrote:\n\nThat's interesting addition. I understand the need to make this optional.\nBut is your implementation working? I can see that you added enabledHistory do the defaults object with value of 0 (false would be more clear in my opinion), but there is now way to change it without changing the code, isn't it?\nYou would also have to allow setting it in HTML as data-enable-history and use this value in config object here: https://github.com/JamesMeldrum/impress.js/blob/899c6e4a61ae5cf6e2fb95dbfd6b754bf4bc64ec/js/impress.js#L347-L354\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "WedgeSama": "+1\n. ",
    "bcipolli": "my goodness can someone just press the \"merge\" button please?\n. :+1: for merge. I found this extremely useful, and the code change is tiny.\n. @ycktw Please use the community feedback to update this pull request. Thanks!\n. I just looked over the first page of pull requests, and it seems so easy: a bunch of them are very simple and useful (e.g. ESC=overview); others are either nonsense (nonsense changes to index.html), complex changes, or not clearly helpful (refactoring the CSS to make it less reusable? Just code churn). Things have to be clearly helpful to take the risk of merging, since there are no regression tests here.\nI suggest a few of us simply give a thumbs-up/down + a short 1-2 sentence comment for each PR in the first page. Then @baratz can chime in to either agree or not.\nFrom there, @baratz can either do our bidding (merge or close the PRs), or simply hand the project over to someone who will get community feedback and execute the wishes of the trusted community.\nIt seems so friggin' easy. Anybody else up for this?\n. Consensus. Yes, @bartaz can follow the consensus, grant access to one person he trusts to follow consensus (goodness, I can do that), or grant access to a few. There aren't all that many people who have shown willingness to participate, and goodness knows it's a thankless job.\nFrom what I see, most of the PRs are noise. Without tests and better coding, most of that stuff has to stay in private repos. But there are simple changes that can definitely be accepted. At least to start and build some trust.\n. Again, I think our best way to go is for us to coordinate with comments on specific PRs--thumbs up/down, and a brief sentence why. \nIf five of us comment on a single PR, we may be able to convince @baratz to act.\nAnd if we can do it once, perhaps we can build trust to do it twice. Or three times.\nI suggest starting with https://github.com/impress/impress.js/pull/399 , which seems simple, uncontroversial, and works great.\n. Great to see many people chiming in. I clearly got it wrong, but that worked exactly how it should--group decision and discussion makes things clear. :+1:.\nAnybody want to suggest another PR for the group to take a look at?\n. @FagnerMartinsBrack sure, I would be happy to contribute! Thanks for opening up to move things along. And for sure, setting up tests and making sure that changes are back-compatible is crucial to moving things forward.\n. > I know it can be tempting to put a load of tools into the project (build, transpilers, and what not)\n@FagnerMartinsBrack @bartaz I understood this to mean the tools needed for the end-user, rather than framework tools for contributors. I agree that we need tools for linting/code style/running tests, and we can certainly do that while keeping a single unminified impress.js that itself has no dependencies (e.g.. isn't rewritten in coffeescript, isn't using less/scss for styles, etc)\nHopefully I understood correctly!\n. > Take for example this, this and this. Should those kind of redundant comments be kept in test files, or we just document what cannot be infered from the code?\nFascinating discussion. Thanks @henrikingo for your coding and documentation efforts, very impressive to try and document to this level. And thanks @FagnerMartinsBrack for your review efforts.\nI didn't expect to, but I actually agree with @FagnerMartinsBrack. For sure, there are many helpful comments in the code. At the same time, a few of the comments do seem unnecessary, and I think the code would be slightly more maintainable without them. Either way the decision goes, I don't think it's a big deal for this instance, however--it's very few lines of comments for functions/blocks of code that seems unlikely to change.\nI do think the comment specifying code was copied from the main file is useful, perhaps should be marked with a TODO--to abstract the code out from both places at some point. No guarantee any of us will be around then to remember to do that, or to make sure the two versions are still in sync.\nAnyway, just chiming in to let you know I'm here and interested to help! :)\n. > I guess it may be more useful to prepare issue and PR templates to help people list all important information we may need: https://github.com/blog/2111-issue-and-pull-request-templates\n:+1: this sounds like the perfect solution.\n. > jquery styleguide, what about enforcing it? ... We can even copy the jscs preset and .jshintrc from them. \nThat sounds right. If I understand properly, that means we can set up continuous integration (CI) with Travis (or others), so that styles can be enforced with minimal effort from us (maintainers).\n. ",
    "fake-or-dead": "@FagnerMartinsBrack I'm ok with it since I can fix my problems and seem right impress.js already done fixing this issues ;)\n. ",
    "diogovincenzi": "I recently tried this library for a presentation and ran into the same issue using Windows. Every time I alt + tabbed to chrome where the presentation was running, it would go to the next slide. It's a little bit distracting when developing the slides I think. Maybe add a quick option to disable it if needed? This way we can disable it while building the slides, and then switch it on again for normal presentation behaviour.\n. ",
    "leroy0211": "You can add a configuration which keys are attached to next and back. Also the option to autoscroll every X-seconds would be very easy. Or an option to set data-timeout to the dom element, and scroll it after that specifoc time has past.\nYou might get something like (just as an example):\n$('#impress').impress({\n      nextkeys: [9, 12],\n      previouskeys: [13],\n      scrollinterval: false (or 10),\n      helptimeout: 20\n});\nThis would be user defined which method(s) you want to use\n. ",
    "Ivanca": "+1 @leroybaeyens\nHaving full control of the key bindings would be really useful.\nBTW thanks for your awesome work in this library @bartaz.\n. ",
    "eddiemonge": "can people try this solution and let me know what you find? https://github.com/bartaz/impress.js/pull/312\n. you could replace:\nevent.preventDefault();\nreturn;\nwith:\nbreak;\n. shouldnt a presentation not have form fields? is it a presentation or a site?\n. actually nevermind on further testing. using the meta key plus whatever key exits out of the handler and lets the browser use its native event, so ctrl+left will go back in history, which is handled with the hash change event handler.\n. ",
    "olegccc": "Very annoying 'feature'. I don't know why clicking 'tab' should work for slide change, it is not obvious.\nIf I, for example, want to show some additional info during the presentation, each time I return to the slides it moves to next slide.\nAnyway this workaround can help: \ndocument.addEventListener(\"keyup\", function(event) {\n        if (event.keyCode === 9) {\n            event.stopImmediatePropagation();\n        }\n    });\n(include it before impress.js)\n. ",
    "ltregan": "So, here is what is happening.... (at least Windows)\nIf you are on application A, you press Alt+TAB to switch to the Impress browser. If you are like me, you will release Alt before TAB - at which point the focus goes to the browser with TAB pressed and Alt up.\nYou then release TAB: the browser receives a keyUp event, and a move to the next slide is triggered. Since Alt is not pressed at that time (remember - it was released before the browser got the focus) checking for event.getModifierState( KeyboardEvent.altKey ) does not help.\nThe correct solution is thus I believe not to move to next slide upon pressing TAB.\n. \"maybe a better solution is to memorize if the tab key has also triggered a keydown event. If not, ignore the keyup, else move forward to the next slide.\" => oh yes, that would work too if we want to keep the TAB key active !\n. ",
    "signalnerve": "Apologies. I think there was a bit of flow confusion here - cloning the repo, checking out a new branch starting at master, then trying to merge it back into dev. Thanks for closing it: I wouldn't have caught it until this morning. Sorry!\n. ",
    "adrianratajczak": "Cze\u015b\u0107 :)\nChodzi mi w\u0142a\u015bnie dok\u0142adnie o to, jednak po dodaniu skryptu nic si\u0119 nie dzieje. \nPrzechodzi do pustego diva i na nim zostaje. \nPr\u00f3bowa\u0142em obu wersji.\n. ",
    "maycon-zz": "@m42e, I did that change but got fade-in/fade-off effect yet. I'm have the same problem: two (or more) pictures with little difference. How can I disable fade effect in a specified slide?\n. ",
    "natehess": "There is a well-known issue with Chrome once you get over 30 or so slides, the first 3 or so slides start disappearing in overview. Very frustrating, since the issue has been around for over a year, but I'm doing my best to figure out a workaround.\n. I'm having the same issue. Quite simply, the z index is inverted. Everything displays in correct position, but in terms of 2-dimensional stacking, the z index is inverted. The thing that should be farthest in the distance is actually the closest. It's pretty cool looking actually. Will certainly share if I find a solution.\n. Correct, the bug only exists when opacity is less than 1.\n. ",
    "sarelvdwalt": "Nice idea... but I always figured having he left & right buttons is easier, as you only need one finger - and standing up in front of ppl scare me, so having to remember less shortcuts calms me hehe :)\n. ",
    "rushiagr": "I suggested it just to make it compatible with normal scrolling of a\nwebpage. It doesnt mean that you should publicize this shortcut, but it\nwill be easier for people who have the habit of using it. (Including me :) )\nOn Sat, Dec 29, 2012 at 5:07 PM, sarelvdwalt notifications@github.comwrote:\n\nNice idea... but I always figured having he left & right buttons is\neasier, as you only need one finger - and standing up in front of ppl scare\nme, so having to remember less shortcuts calms me hehe :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/bartaz/impress.js/issues/248#issuecomment-11751736.\n\n\nRegards,\nRushi Agrawal\nPh: +91 99 4518 4519\n. I was just a normal passers-by for ImpressJS project. I am not an expert in JS and won't be able to contribute to this project in any other form in the near future. Please feel free to take a decision on this issue according to your will :)\n. I tried google slides and LibreOffice Impress (a Powerpoint alternative), and both of them don't have this 'shift+space' shortcut.\nI am used to using 'space' to go one page down on a web page in a browser, and 'shift+space' to go one page up. I think that is where the idea to submit this issue come from. I still think that if 'space' is provided for 'next slide', similarly 'shift+space' should be provided for 'previous slide' on all presentation softwares for user experience (and to honour the principle of least astonishment, as per my opinion ), though I understand I might be in minority :) \n. ",
    "callmephilip": "As with the example plugin, this one is disabled by default\n. @guneysus : it works on most decent mobile browsers. you can use it from a different desktop browser window but it somewhat defeats the purpose of the remote control (at least for me). there's also an iphone app that works across any websites that have remotes integration iTunes link.\n. ",
    "guneysus": "Cool feature :) I was thinking that I need an Iphone. But i tested with 2 chrome windows.\nI read QR code and go this web site, opened 2 Chrome windows, working smootly :+1:\nThanks\nIs there any short instruction how to use this plugin?\nJust reading QR code?\n. ",
    "techpines": "@callmephilip I had some ideas about your remote control idea, shoot me an email if you have a second to chat\n. ",
    "daniel-sousa-me": "Do you think it is possible to integrate with https://github.com/regebro/impress-console?\nIt would be great if we could use a tablet to control the presentation on a computer and see the notes and the next slide.\n. ",
    "renzomontejo": "I found the solution to this problem:\nin the impress-demo.css, I just removed:\nbody     { pointer-events: none; }\nimpress { pointer-events: auto; }\nThanks to myself for the solution.\n. ",
    "TheBenji": "You can't use the '#'.\nThat means you goto the slice with the id behind the #.\nYou can use a other target or remove the lines 739-741 from the impress.js :)\n. ",
    "pcav": "See also:\nhttps://github.com/marianoguerra/rst2html5/issues/17\n. ",
    "ste101": "For me IE10 works with this dataset polyfill:\nhttps://gist.github.com/brettz9/4093766#file_html5_dataset.js\n. ",
    "mateodelnorte": "This would be great to see. Confirming it still crashes safari on 7.1.1, though (commented out lines required to show on mobile). \n. Hmmm. I'm using 0.5.3 in this presentation: knowjs.github.io/nodejs-for-devs\nand it just crashed on 7.1.1. Does it work for you?\nOn Tue, Jun 10, 2014 at 9:18 PM, snekkalapudi notifications@github.com\nwrote:\n\n@mateodelnorte https://github.com/mateodelnorte It works in my mobile\nsafari 7.1.1 on iPhone. Not exactly sure what the issue was. I had this\nworking since 2 years on iPhone and iPad.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/bartaz/impress.js/pull/258#issuecomment-45691773.\n. \n",
    "snekkalapudi": "It works on Safari Version 7.0.3 (9537.75.14). Here is the url with this change, if you want to try it out: http://followmejs.appspot.com/\nI am upgrading my Safari now to 7.1.1 and will keep you posted on how it goes.\n. @mateodelnorte It works in my mobile safari 7.1.1 on iPhone. Not exactly sure what the issue was. I had this working since 2 years on iPhone and iPad.\n. It works for me. I am on the same version. Here is the url that uses it: http://followmejs.appspot.com/\n\nTry this url and let me know, if it work for you.\n. ",
    "Kageetai": "Okay, I have just noticed I overlooked the very last part of the demo css... X-)\n. ",
    "truist": "I have moved on to using reveal.js (https://github.com/hakimel/reveal.js)\nbut back when I made this pull request, I felt like it would have been a\nvaluable contribution, and I tried to do it well and carefully - so it\nmight still be valuable to you. Feel free to use it!\nOn Sat, Feb 6, 2016 at 3:29 AM Fagner Brack notifications@github.com\nwrote:\n\nHi @truist https://github.com/truist, in an effort to clear up older\nissues/PRs we are pinging back to know if you are still tracking this\nrequest.\nTo give a little bit of context, recently a decision was made in the\nproject\nhttps://github.com/impress/impress.js/issues/435#issuecomment-177602861\nto make the development more active and the first task is to clear up older\nissues like this one to see if the OP\nhttp://netforbeginners.about.com/od/internetlanguage/f/What-Is-OP.htm\nis still interested in keep it going.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/impress/impress.js/pull/265#issuecomment-180719307.\n. \n",
    "Marvin182": "Hi,\nI still this this was a missing option, but as I do not longer use impress.js I would not be upset if you decide to discard this idea ;)\n. I wanted to have a way to change the style of the body element in the steps.\n. I believe not or at least not in a nice, convenient way. But seriously, I told you I do not use impress.js any longer and you already to rejected this 2 year old pull request, why should I waste my time to discuss with you if it would have been necessary or not?\n. @bartaz The automatic class is sufficient for most use cases, but for some presentations I found it handy to combine and reuse classes and that is what this code can do. I think it is more a design decision, code complexity versus features. Up to you ;)\n. ",
    "dforsten": "data-max-scale=\"3\" indeed works perfectly with the original code.\nThank, You!\n(got to read the HTML5 spec more carefully)\n. ",
    "jwbriney": "Workaround for it was iframing in each \"presentation\" so they're all in their own separate file.  Works great!\n. ",
    "edgar-humberto": "actually that is exactly what I was looking for. Im going to see if I can load the youtube video when I hear the stepenter. I will post back. Thank you for response.\n. yup that did the trick thank you again @bartaz \n. ",
    "deepu105": "yes may be an option to enable for mobile would be good so that it can be programatically done\n. But it would be good to have some way to disable the check  problematically, coz say if I have a presentation intended for some devices only which I know works I should be able to disable the check as I do not care of failing browsers for that presentation\n. ",
    "flinn": "I see what you're saying. It would also need to store the previous step that you were viewing though to allow you to toggle back and forth between the key step and the one that you were previously viewing before visiting the key step.\n. Will clean all of this inline styling up if you'd like to accept this feature. \n. ",
    "ywdr1987": "Thx for considering it. But it seems that lots of elements using java script work the same way as CDF element dose, such as the elements exproted form geogebra(http://wiki.geogebra.org/en/Reference:Applet_Parameters). \nI think it would be a big advancement if the impress.js can be improved to be compatible with all these excellent tool using java, not only for users being able to integrate these tools in their presentations, but also for impress.js itself being a more widespread application, especially in the field of scientific research. Because more and more highly developed tools in different science branches tend to support exporting their output into html file, and most of the elements exported are just like CDF and Geogebra elements, it means that the compatibility with these elements in impress.js will maybe cause another revolution in the way people present their idea, in the the field of scientific research this time. And I strongly hope I can use impress.js to present my work someday instead of using LaTeX package Beamer, which is an elegant (in first sight) but boring (after two weeks) way for presentation. \nAnyway thanks for this excellent tool. I was and am impressed.\n. ",
    "numbbbbb": "Sorry....\nHere is the link:\n    www.langman1dian.com\n    www.langman1dian.com/truelogin/\nyou can see the difference between the two titles when you visit them with Firefox.\nfirst one is empty while second one has a colorful heart.\nI add the code <link rel=\"Shortcut Icon\" href=\"/static/baricon/mini_logo.ico\" /> on the HTML but it doesn't work.\nThe path is right.\n. I try again, if I delete the impress().init(); or delete the <script src=\"/static/js/impress.js\"></script> , the short icon appears.....\nBecause I use django(a python web framework), it routes the static files by /static/, so if I change the path to / it won't treat it as a static file....\nI'll look for other way to set the short icon, If I get it I will share it~\nand....Impress.js is really a wonderful thing!!\n. \ud83d\ude04\n\n\u5728 2014\u5e746\u67081\u65e5\uff0c18:47\uff0cJJimmydp notifications@github.com \u5199\u9053\uff1a\n\u611f\u8c22\uff01\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "matix": "@FagnerMartinsBrack not really tracking this request, it was something I added to one of my projects and contributed to impress.js.\nIn retrospective this issue might be solved in a more elegant way than what this PR proposes.\n. ",
    "ralphbean": "Just FYI, a package review for Fedora is blocking on this question - https://bugzilla.redhat.com/show_bug.cgi?id=951711\n. Hi again, @bartaz.  Just pinging to see if you could provide some clarification on the license question.\n. Thanks @bartaz.  Sorry I couldn't find it myself earlier.\n. ",
    "rubik": "This is exactly what I needed! :+1: Thanks a lot @tehfoo!\nBefore I had implemented this through the impress:stepenter and impress:stepleave events: substeps were actually real, empty steps which, when entered, triggered a JS function, responsible for showing the substep and hiding it again. Pretty convoluted!\n. Thanks! In fact now I'm using the file from your fork.\n. ",
    "ws3389": "thanks  @tehfoo , substep is nice.\n. ",
    "matheod": "It took me some time to understand why my presentation bugged. It was because past and future means viewed/neverviewed.\nI read again the demo tutorial, and in fact it was write, but maybe make it even more explicit ?\nAlso, hopping for something like after/before class :)\n. ",
    "cereal": "Are you sure, that you first generate your code and then init impress ? And\nare you sure, that your dynamic divs carry a class attribute with the step\nclass in it?\nRegards, cereal\nAm 28.04.2013 23:05 schrieb \"ridom\" notifications@github.com:\n\nHi everyone!\nI discovered impress.js a few months ago. Thank you bartaz for this\nawesome tool that makes me crazy just thinking about everything is possible\nto do with!!\nNevertheless, I am in front of a problem: I have created dynamicaly many\ndiv reading an image folder and a json file where each div contains one\nimage and data related. With random variables I have generated values to\nthe attributes.\nIt works, all the images are displayed in the space and the generated code\nlooks exactly the same than the \"normal\" one.\nThe issue is that only the div manually implemented in pure HTML are\n\"stepable\". I mean I can move just in the 3 steps formally created but not\nin the dynamic ones.\nWould you have an idea about the way I should follow to make it works as\nwell as a \"normal\" step?\nHope my explaination is well understandable.\nThanks!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/bartaz/impress.js/issues/283\n.\n. @ridom I'd suggest, that you add an event handler, which gets triggered when your dynamic codegeneration is finished.The handler should trigger the initialization of impress. \n(Maybe you know the document.ready() function of jQuery. This function is executed when the DOM-Tree is finished, I think this could fix your issue. http://api.jquery.com/ready/)\n\nWhy should you do this? You are manipulating the documents DOM-Tree. Imagine the following:\n- Your presentation page is called\n  -> Impress get's called to initialize itself\n  -> Your code for the dynamically created divs runs\nThat means, that Impress doesn't know your steps, because your steps are inserted after impress is initialized...\nBut without the code I just can guess .. \nI hope this was kind of helpful.\nRegards,\ncereal\n. @ridom \nI wasn't able to try it for myself (because I am not allowed to download the images and I am atm busy with my final exams, so no time for further investigations), but I think waiting for the DOM-Tree should be enough :)\nRegards,\ncereal\n. Well, nice try I'd say.\n. ",
    "ridom": "Hi cereal thanks for your answer.\nYes I keep the init at the bottom.\nI have even tried to place the generated code between two div/step (just to be sure) but it doesn't work: same result.\nI also tried to add future at the class step (<div class=\"step future\" ... ) without success...\n. Hi bartaz\nI advise you when it's on-line.\nThank you for your help!\n. @cereal \nNice, I try it, you can see the code here:\nhttp://www.brazilian-way.com/impress/\n. @cereal \nI just tried it but it doesn't work.\nSomeone has an idea?\nGood luck for your exam!\n. @cereal I tried with Chrome and I saw it doesn't display nothing while it's displayed with FF. Maybe that's the reason you weren't allowed.\n@SimonWaldherr & @cereal \nI probably did wrong but I have tried different combinations since this morning and nothing works.\nHere, index.html, you can see the init() with the handler but it doesn't work at all.\nhttp://www.brazilian-way.com/impress/index.html#/overview\n(document).ready(function(){\n                           impress().init();\n                    });\n\nHere, index2.html, I have included the init(); after the closing parenthesis of AJAX call. It display images but the problem is the same, no step on dynamic div.\nhttp://www.brazilian-way.com/impress/index2.html#/overview\n<script src=\"js/impress.js\"></script>\n                    <script>\n                               $.getJSON('doc.txt', function(data) { \n                               ... ... ... ...\n                               });  \n                               impress().init();\n                    </script>\nI have also tried to place it right after the $(#div).append but it doesn't work too...\nI don't know what to do. Could it come from the URL?\n. @mbrand\nHi mbrand,\nI tried it too this morning...\nThe result is somewhere between the 2 first index: images not display but movement working:\nhttp://www.brazilian-way.com/impress/index3.html#/overview\n. Yes it works!\nIn fact yes I removed the container and I replaced it by impress. (I added the id #container because initially the divs were generated directly inside #impress and not inside #impress div. Because there wasn't id. I don't know why now it's work...).\nBut it wasn't enough and following the @SimonWaldherr's advice I was looking how to call the impress().init(); at the last moment. So as AJAX is call after everything I placed impress().init() in a js file that is called in an AJAX function at the bottom:\n<script>\n    $.ajax({\n       type: \"GET\",\n       url: \"initImpress.js\",\n       dataType: \"script\"\n     })\n   </script>\nSo glad! It's not finish but I now can see what I had in mind. Thanks everyone!\nHave a look here:\nhttp://www.brazilian-way.com/impress/index4.html#/tiny8\n. ",
    "SimonWaldherr": "$.getJSON makes a AJAX call, the callback function gets started after the db-hue-med.txt file is loaded. impress().init(); is called after the index.html file is loaded.\nmove the impress().init(); to the end of the getJSON callback function to init impress after the content is added.\n. ",
    "mbrand": "Try to put it right after the $.each loop. It needs to be in the callback of your $.getJson call.\n. Oh yea, totally missed that he was appending it to the wrong element.\nAnyways, the .init() still needs to be called after appending the slides. Which is at the end of the $.getJSON() callback.\n. ",
    "campersau": "The problem is that the #container element is not there when you call $('#container').append() to insert the elements.\nThe #container element is created after calling .init() on the impress object.\nReplacing $('#container').append(compter[i]); with $('#impress').append(compter[i]); will show the images.\n. ",
    "dinodsaurus": "is there a way  to append items after impres().init() ?\n. thank you for the quick answer !\n. I solved it with this little function             \nwindow.impressCustomStep = function ( selector ) {\nvar customStep = $$( selector, root );\n                customStep.forEach( initStep );\n                steps = steps.concat(customStep);\n            };\n. it was just for testing purpose :)\n. ",
    "togakangaroo": "I was visiting the main page http://bartaz.github.io/impress.js/. \nEarlier http://bartaz.github.io/js/impress.js was giving a 404. Seems fine now\n. ",
    "switer": "github's error\n. Yes, @bartaz thanks for your answer. Maybe i should ask you how to get the middle position of all steps ,  Is  (containerWidth-overviewStepWidth)/2 and (containerHeight-overviewStepHeight)/2 ?\n. In my implementation of imitate overview of impress,I have counted all the steps size with scaling to get the max height and width.Then scale the container's size with a overview scaling , and to hack to get the (x,y) ( containerSize - maxSize/scaling ) /2 - offset. The hacking place if the offset.The offset of y about 60px and x about 100px.\nMaybe is my wrong to imitate the overview step in such a way.Thanks for your answer @bartaz.\n. @edwardoyarzun sorry, i am answer so late. I has not calculating the center point, i don't know how to calc it.and I use a static point from debugging...\n. @FagnerMartinsBrack Thanks. I close it now.\n. ",
    "jayvan": "I think you may be confused about  how $.first() works.\n$('#impress').children() will return the set of all slides on your presentation.\n$('#impress').children().first() will be the set of all of the first elements of all slides in your presentation.\nYou probably want to do something like $('#impress').children()[i].after($div) to insert the conditional slide after the ith slide. You could also of course do something like  $('#idOfSlideToInsertAfter').after($div)\n. ",
    "eduardrock": "Hi @switer , I'm having the same problem. I'm also doing an Impress.js visual editor (www.dyapos.net), and I need to the get middle point of the steps elements and also I need to calculate the scale value for the overview step. The problem is when you're working with dynamic steps and positions.\nDid you solve your problem? How did you do it?\n. Yes,\nUsing those CSS properties:\ntransform: rotate(45deg);\n-moz-transform: rotate(45deg);\n-webkit-transform: rotate(45deg);\n-o-transform: rotate(45deg);\n-ms-transform: rotate(45deg);\n. The problem is the Flash Player. I use the HTML5 Youtube player and it looks well on Impress.js\n. Forget this issue, i've sent a pull request with the solution:\nhttps://github.com/bartaz/impress.js/pull/360\nnow you can load Impress.js from the head tag without problems. I hope Bartaz to accept the pull request.\n. Simply use the CSS properties Left and Top.\nI do it that way and works.\n. By default you can't do that with Impress.js, so I've added a new entry to the Impress.js API where you can do that.\nTake a look at Dyapos, my new Prezi-like tool for Impress.js: https://github.com/edwardoyarzun/dyapos\nAnd look at this file at line 638: https://github.com/edwardoyarzun/dyapos/blob/master/django_app/project/static/js/editor/impress_custom.js\nI exported the function \"initStep()\".\nThen If you call impress().initStep(document.getElementById(\"my-step-id\")); you can recompute that slide with Javascript. That's the solution to your problem.\nI made a pull request a time ago with that feature but @bartaz didn't merged it :(\n. Yes, you only have to add that line. Later, when you modify the data properties of a .step like data-rotate data-x data-y, you only have to call impress().initStep(document.getElementById(\"my-step-id\")); or  impress().initStep($(\"#my-step-id\")) in case you're using Javascript.\n. Thank you! @bartaz , I didn't know that.\n. I think I will publish an Impress.js plugin to set a body background-color for each step slide with CSS Transition based ot its data-attributes.\n. Thanks for answering.\nWell, it's harder when you're using 3D rotation, but I think there's no problem with 2D.\nAre you sure the default slide values are 1024_768?  I was watching the .step CSS rule, and its dimensions are 900_700.\nWell, in order to calculate the presentation width, I was thinking on get the lower value of data-x registered on a step and greatest data-x value. So if I calculate the difference, I'll get the presentation width. Then, in order to calculate the presentation scale, I just have to divide (presentation width)/768\n. Thanks, it worked!\nNow the overview step is adapted automatically according to the other dynamic steps.\n. ",
    "jenil": "Hey, \nThere you go! http://www.jgog.in/lab/jg \nGo to the second step, and resize the width of the browser, the step doesnt automatically scale down.\n. Its worked! Thanks! \n. Similar issues here https://github.com/bartaz/impress.js/issues/127 & https://github.com/bartaz/impress.js/issues/238\nHave a look.\n. LOL, I solved it. You need to just do require('impress.js');. ",
    "deanshub": "ok, i dont have time today, i'll do it tomorrow :)\n. closes #289 \n. ",
    "Kibo007": "What is Surferlite?\n. ",
    "nukeourlimo": "Cheers for you're prompt reply, was hoping it was something obvious i had missed!  Ill post a solution if i can find one!\n. OK, seems to work better using -webkit-backface-visibility: hidden; applied to all div elements(my steps are articles however), not managed to narrow down the exact element yet... and it crashes ipad (but that was always hanging on by a thread and occasionally crashing). Once again thanks for your prompt reply!\n. hey @KZeni, I tried a similar solution for my ipad problem, my assets were image based and rather large (~1024x768 min) and changing the display of them, or just loading them in when required didnt really solve my issue, i presume it was more to do with mobile safari's memory management of css3 3d assets.  Anyway, I made a custom solution (albeit not quite as pretty as the impress version would have been) \nObviously we have now moved onto iOS 7 and a newer mobile safari, but i am keen to know if your workaround is working, if possible please send a link!\n. ",
    "KZeni": "I see this thread is months old, but I wasn't having any luck finding any fixes to the mobile browser crashing due to exceeding their memory limit. I've actually come up with a bit of a fix to this. Including this script in the <head> of the presentation will make it so none of the slides are shown on mobile devices unless it's the current, next, or previous slide (reducing the amount of memory needed). Here's a link to the script: https://gist.github.com/KZeni/6735287\nThis degrades the quality of the presentation as it limits the visible slides to 3 so it's only recommended if you're finding that your presentation is crashing on mobile devices (desktop experience should remain unchanged).\n. @nukeourlimo The workaround appears to still be working. One thing I had to make sure to do is have the not-active slides hidden by CSS to begin with (hiding them with JavaScript would allow the CSS3 3d assets to load up before being hidden & still cause the browser to crash). Not sure what your solution is, or what results you saw with my workaround in place... Strut.io (the Impress.JS editor) has actually implemented this fix as an option within the editor: https://github.com/tantaman/Strut/issues/223\n. I imagine some people out there use iPads as presentation devices that are set to display via an Apple TV, but I totally see where you're coming from. I've suggested this to the Strut.io editor as that might be the place to implement something like this.\n. @baratz I'm guessing @bilus is thinking you might want to reconsider the decision to not include the code for a reduced memory footprint mode that would make presentations not crash on devices with limited memory availability.\nThe code above addresses this by keeping CSS 3D transforms, but simply limits the number of them that are shown at any given time for devices that need that (making it so you don't necessarily need to change the way impress.js work).\nI wonder if the code above could be packaged and included as a standalone file that then augments impress.js with this performance-adaptive functionality... is that something that would be a happy medium (not altering the core code, but making it quick & easy to implement for those that need it).\n. What made it weird for me was the fact that it worked fine on my iPad at the time when I had started making the presentation, but then only started crashing after a certain number of graphical elements & image resources were being shown (which I then don't want to compromise the presentation to accommodate the technical limitation). So it seemed to work until a not necessarily predictable slide/resource limit.\nMy code in my first commend above had made it so the presentation slides would only show the recent & upcoming slides so it could be scalable and work regardless of the size of the images and overall presentation (though the code itself wasn't necessarily the best implementation of adding performance scaling).\nI'm not sure what the best way to re-write the browser support section of the README would be or know the very best way to implement the performance scaling, but I'm glad to hear it's being worked on/taken into consideration.\n. ",
    "jasvrcek": "I am not still tracking this request - feel free to close it.\nOn Sat, Feb 6, 2016 at 10:53 PM Fagner Brack notifications@github.com\nwrote:\n\nHi @jasvrcek https://github.com/jasvrcek, in an effort to clear up\nolder issues/PRs we are pinging back to know if you are still tracking this\nrequest.\nTo give a little bit of context, recently a decision was made in the\nproject\nhttps://github.com/impress/impress.js/issues/435#issuecomment-177602861\nto make the development more active and the first task is to clear up older\nPRs like this one to see if the OP\nhttp://netforbeginners.about.com/od/internetlanguage/f/What-Is-OP.htm\nis still interested in keep it going.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/impress/impress.js/pull/293#issuecomment-180941477.\n. \n",
    "berteh": "Hello. \nCould this bar allow to \"jump\" to a particular step as well ( say directly to 13/21)? That would be great.\nA key/gesture to hide/show the whole bar would be nice too. (escape or M for \"menu\", for instance).\nThanks.\nB.\n. ",
    "drabiter": "Hi! Sorry for the mistake.\nYou can check on the closed request I did compare my master to your dev branch. However it looks like I'm the only who do that, and it has 22 commits behind. I was afraid it will be conflict hell on merge. So I changed it ;D\nI'll try to apply the changes. For now I'll close this :)\n. Hi @FagnerMartinsBrack, honestly I haven't tracked impress.js progress for long time but still willing to maintain this PR.\nLet me know if you need anything.\n. ",
    "DronRathore": "Closing as made it for dev branch pull#131\n. Umm.. My bad, i was testing it in wrong way, le'me clear the commit for something more better.\nClosing it for now. :smile: \n. ",
    "jameswlane": "I will try the walk around and let you know, I love impress.js it's a great js. Just for this application the habit of tabbing through forms is driving me crazy :) Cheers\n. It's a presentation on a site a website.\nJames\nOn Jul 12, 2013, at 6:38 PM, \"Eddie Monge Jr.\" notifications@github.com wrote:\n\nshouldnt a presentation not have form fields? is it a presentation or a site?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "adankevich": "Use the source, Luke!\n. I just comment out correspondent line in key up event handler in impress.js.\n(In my case it's line #712).\njavascript\n        document.addEventListener(\"keyup\", function ( event ) {\n                  .....\n                    //case 9:  // tab\n                  .....\n        }, false);\n. ",
    "alanblu": "Hi everyone, thank you very much for the help, it is working the index, rigth now i have some problem with the class .past, .present and .future. I'm triying to make apear and disapear, diferents image in the same slide, so \nI thougth it should work like this:\nmifirstslide .past img {opacity:1;}\nmifirstslide.present img{ opacity:1;} that is for the first slide\nmifirstslide.futureimg img {opacity:0;}\nmisecondslide .past img {opacity:0;}\nmisecondslide .present img{ opacity:1;} that is for the middle slide\nmisecondslide .futureimg img {opacity:0;}\nmilastdslide .past img {opacity:0;}\nmilastdslide .present img{ opacity:1;} that is for the last slide\nmilastdslide .futureimg img {opacity:1;}\nunfortunedly it's not working like I wish, could you give me a tip for make it work properly?\nthank you!\n. ",
    "wojtossfm": "I'm sorry for the lack of proper comments in the code, however I was dead tired when making the commit and also knew that a discussion would be required. The 2nd commit was meant to be part of the 1st one (hence the lack of a broader commit message). I'll try to explain in sequence starting from the suggested changes to impress.js.\n1) I found the lack of information about the direction of navigation slightly irritating as I wanted to be able to react differently to people going forward/backward through steps/substeps. In order to solve this I added a variable to the goto methods which has it's value supplied by the next/prev api methods. This value is then attached to the event.detail as event.detail.forward.\n2) As for substeps - I mimicked most of what you had written for steps in impress.js, only I removed the canvas motion (substeps are meant to animate onto the screen). I had to modify the api methods in order to allow traversal of all substeps (if they exist in the step). Upon entering a step/exiting a step the appropriate classes are applied to all given substeps (depending on the direction of traversal - either past or future).\n3) Because I wanted to be able to inform the event handlers about whether or not I wanted the events to be animated (have a duration) or to just quickly move things into place I needed to add the play variable to the substep event triggers. This is currently only used in the init handler.\n4) I added a rewrite option (coupled with data-reset for steps) because I found that a lot of my steps would have sequential placement. If I were to need to add a slide in between or move a slide I would have to rewrite the positions of all the other slides. \"rewrite\" means that all the data attributes (with some exceptions as seen in the code) will be rewritten to the following slides. This is done as part of the impress.js init and is a toggle-able option.\nNow to impress-animations.js:\n   The basic idea was to use the same styling technique that you applied in impress.js, but to move substeps (and also steps - don't use this in my current presentation, but would gladly upload an example in the evening). Just like the possible states there are also 3 animation keyframes per defined animation (past, present, future). Their initial placement will be the center of the canvas. One applies an animation to a step/substep that has content by setting the data-animation attribute to an appropriate value. The impress:init event is handled and the animation settings are calculated per step/substep. Also it is possible to set a global musical background and define global/local sound effects (details in the event handlers). \nThe animation extension also provides two new features:\n1) skip steps - they are used as keyframes for animating the canvas. It allows us to specify a more precise path that we wish to follow (zoom-outs in my presentation when moving from planet to planet).\n2) the data-timed attribute on steps/substeps. This indicates the time after which the api.next() is meant to be called. This has to be used with caution as it has it's drawbacks when used unwisely.\nIf I understood correctly I can modify pull requests that are pending review. I hope to add more descriptive comments to the changes themselves in the code, but I won't be able to do this probably till later this week. If anything requires further clarification be sure to write. I tried to be as thorough in the description changes as possible.\n. Hi. I'm not really tacking it actively seeing as how there wasn't much of a response originally. I would need to check how compatible the changes are with the current code base (not sure how much has changed in the meantime). If the proposed changes sound like something you would be interesting in adding to the project then let me know how I can help make integrating the changes into the codebase go smoother.\n. Quoting guidelines that were instated long after my PR is a bit... \nsurprising.\nAt the moment I probably won't find time to split it into smaller \nchunks. I can try splitting it in the future although I'm not sure if \nI'll be able to split it into more than 2 chunks - one adding the idea \nof substeps to the original code and a second one being the \ntransition/animation extension that utilizes both steps and substeps. At \nthe moment then you'll probably want to reject the PR and possibly when \nI'll be able I can try to submit it in separate chunks.\nKinds regards,\nWojciech Michalak\nW dniu 2016-03-05 o 05:14, Fagner Brack pisze:\n\nAs stated in the contributing guidelines \nhttps://github.com/impress/impress.js/blob/8159876c980d409a85f538ea27d524a5f899328a/CONTRIBUTING.md \nit is required that a PR is creating using a \"topic branch\". Basically \nit means that a PR should do one thing and one thing only.\nIn the current state of this PR there are a lot of code changes that \nwill make it harder to review, so I can't say if this s useful or not.\n@wojtossfm https://github.com/wojtossfm is it possible that you \ncreate a PR splitting each specific change so that we can look each \nsmall feature separately? This is not a confirmation that it will be \nlanded, it is just that we need to have a better view of what is being \nproposed in order to consider this. If you believe it is not possible, \nthen there is no problem, we can close this and you can open a PR \nlater when we have a better plugin structure to be build on top of.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/impress/impress.js/pull/305#issuecomment-192566204.\n. \n",
    "baxterma": "I cannot thank you enough. I was not expecting such a thorough answer, and I am very grateful, it has made things a lot clearer. I am, however, still a little confused over this line: \nscale = hScale > wScale ? wScale : hScale;\nThis syntax is completely new to me, I have been turning to Google, but I've had no luck. I am familiar with seeing > in if statements (and similar places), but not in variable assignments, and as for ? and : I have never seen them before in JS. If you could explain exactly what this line is doing, that would be fantastic. :)\n. @bartaz \nBrilliant! Again, thank you very much for your help, I really appreciate it. Have a great day, and apologies for interrupting whatever you're up to. :)\n. ",
    "jacaetevha": "@bartaz -- great explanation about scaling!\n. ",
    "dYb": "yes, you're right,it's easy to understand..btw,this is the first time I commit a 'pull request', a little exciting~ ^_^\n. ",
    "bdronneau": "Hey,\nNo problem, everybody can have a rush period.\nI have change my workspace dev, i'll re-up the files tonight.\n. Hey,\nI found the main problem. My timeline div was inside a step (impress) div so data-min-scale=\"1\" and data-max-scale=\"1\" were ineffective.\nSo now it's working good : http://dev.dronneau.fr/cvimpress/cv.html#/cv\nBut if you try to init the windows with a size smaller than 800px by 600px my div is scale.\nhttp://dronneau.fr/images/init_big.png\nhttp://dronneau.fr/images/init_small.png\nHave you any ideas ?\nBastien\n. ",
    "ahainen": "So, I figured it out, and this is mostly because I'm a n00b: for the iframe, I had the iframe including a php file instead of an html file. So, when I left all the impress js and html in the html doc (not a php doc) it all worked fine. All apologies if this is common knowledge and I'm catching up.\n. Ahoy - I'm trying this on an iPhone 6, iOS v11.2.6 15D100. I noticed as well that https://impress.js.org doesn't work in iOS Safari. i.e. It's not popping fallback mode and swiping makes the images scale/slide bizarrely. I'm fine getting impress.js to Fallback mode on mobile, but I can't seem to do that at all :/ https://ahainen.com/akroma/roadmap-2018-q2. My bad, opened: https://github.com/impress/impress.js/issues/690. Awesome, thanks for the reply, much appreciated!\n. ",
    "Tantacula": "@bartaz \nI can't turn off navigation keys while fancybox gallery is running?\n. ",
    "sarla999": "I am sorry . I don't know.\n. ",
    "sk58": "Hi, thanks for getting back to me...\nThis is the example:\nhttp://www.sd51.co.uk/cms/index.php?page=impress3#/home\nThis works in safari and chrome but the overflow:hidden doesn't work in firefox.\nI note the same problem here: http://tympanus.net/Tutorials/SlideshowJmpress/\nBy the way you're a genius.\n. ",
    "Ank13": "I reproduced the freeze on several different older machines with different operating systems and browsers by making a big change in the scale (changing from data-scale=\"1\" to data-scale=\"10\" in a couple steps), so it probably has to do with the computer hardware. \nThe solution for me was to remove the large scaling changes, and it works fine, even with many rotations. If you do need to make a 10x change to the scale, try changing from \"0.1\" to \"1\", instead of from \"1\" to \"10\". (That seems to work for me). \n. ",
    "xxx2201135": "Hello please dear Barzaz, Can you help me with my issue?\nI want create website with your script, but it will be big banner and you click on button and get zoom.\nHow can I do that? I have been trying it solve with changing CSS but I can not make the result.\nPlease help me. I have created topic here : \nhttps://github.com/bartaz/impress.js/issues/356\nThank you for your answer. I really appreciate it. And merry Christmas to you and your family.\n. Hello dear nicolasciam, \nI think nobody today is using windows xp. \uf04a\nThis is future web-site. Windows XP is shit and ended his life about 2 years ago. It is no more developing, it is no more compatible with new hardware is no better. \nWhat are you talking about is not issue. Nobody is using Windows XP today. Your answer is ok but no reply please.\n. Can you find another examples, please? This is quite confusing one. You are right, I have been asking the developer , but would be great to have the answer. \n. ",
    "AnimatIan": "Sure, refreshing the page was only an easy way to make the selected node/slide return to the center of the window.  As an example, add the following to the demo.html\n<script src=\"http://code.jquery.com/jquery-1.9.1.js\">\n<script src=\"http://code.jquery.com/ui/1.10.3/jquery-ui.js\">\n<script>\n$(function() {\n$( \"#impress\" ).draggable();\n});\n</script>\n    </head>\n    <body class=\"impress-not-supported\">\nThis makes the #impress Div draggable, so that you can move around and see the nodes, and then can click any node to access it.  However, when you click a node, it repositions off the window, where the home node is rather than the center of the visible window.\nI'd like to be able to drag the #impress Div, but on clicking a node, have it reposition to the center of the visible window.\nA draggable #impress Div is particularly useful for large node sets, where the overview (scaled to show most/all the nodes) cannot provide enough legible information to choose nodes, and does not indicate the active node.\nRegards,\nIan\n. ",
    "xBlazeTECH": "Thank you for your response, I am using impress.js for school projects, as\nit makes the presentation match the vast capabilities of my imagination.\nThank you for developing it! :D\n. @heuzef I would love to help you out a bit. If you could just explain to me a little more of what you were looking for, I may be able to provide some insight!\n. @heuzef This may be of some help. This is a VERY CRUDE way of auto-advancing slides. This is something I just worked out. Please feel free to modify it to your liking. :+1: \nThis example has a different wait time for the first slide, then a different one for each of the following.\nhtml\n<script>\n    var firstAdvTime = 10000; //Time to wait before advancing first slide. (Milliseconds)\n    var autoAdvTime = 10000; //Time to wait before advancing all other slides. (Milliseconds)\n    impress().init();\n    window.setTimeout(autoAdv, firstAdvTime); \n    function autoAdv() {\n        impress().next();\n        window.setTimeout(autoAdv,autoAdvTime);\n    }\n</script>\nThis example has the same wait time for all the slides.\nhtml\n<script>\n    var autoAdvTime = 10000; //Time to wait before advancing all other slides. (Milliseconds)\n    impress().init();\n    window.setTimeout(autoAdv, autoAdvTime); \n    function autoAdv() {\n        impress().next();\n        window.setTimeout(autoAdv,autoAdvTime);\n    }\n</script>\nThese should work, if they do not, please let me know, because I will change them accordingly. I hope this helps someone out! :)\n. @heuzef By the way, this can be added to the end of your HTML document, inside the  tags, instead of the default impress().init(); script.\n. ",
    "heuzef": "Hello,\nI'm a french guy.\nAt the moment I work with impress.js tool.\nI'm not very comfortable with JS yet I need in my work to implement a solution to activate the autoplay on my slideshow.\nHowever, I can not really walk to your script correctly, I am very annoyed.\nI use Strut.io, I tried to integrate your code directly into the HTML page, but it is not working.\nCan you help me? I'll be very grateful !\n. @xBlazeTECH  thank you so much! With your guidance, I finally managed to get the script right and it works perfectly!\nFor those looking for the script (with strut.io only), replace all the script tag in the HTML by : \n``` html\n\nready(function() {\n    if (document.getElementById('launched-placeholder'))\n        loadPresentation();</p>\n<pre><code>if (!window.presStarted) {\n      startPres(document, window);\n      var autoAdvTime = 5000; //AUTOPLAY (Milliseconds)\n      impress().init();\n      function autoAdv() {\n         impress().next();\n         window.setTimeout(autoAdv,autoAdvTime);\n      }\n      window.setTimeout(autoAdv, autoAdvTime); \n}\n\nif (\"ontouchstart\" in document.documentElement) { \n    document.querySelector(\".hint\").innerHTML = \n        \"&lt;p&gt;Tap on the left or right to navigate&lt;/p&gt;\";\n}\n</code></pre>\n<p>});\n\n```\nUpdate for this script at 12/11/2013 : bug with Firefox, autoAdv not defined, it's ok now.\n. ",
    "Beiyi": "I test impress.js on  my iPhone5C (iOS 8.3). I remove the device black list code. And I found that it can work well on my iPhone.\n. ",
    "bilus": "@bartaz I think you might want to reconsider it. It was quite surprising to learn on the launch day that the presentation we linked to from our website was crashing on iPad. Having to frantically make it work is not something I had anticipated.\nI understand that this is something quite tricky to implement but without support for this you should slam a huge \"not compatible with mobile Safari\" sign in your Readme (unless you mention that, in case I'm a fool to have used the library in the first place).\n. @bartaz @KZeni Yes, this is precisely what I had in mind. I realise there's not much you can do to fix browser memory issues; I thought that it might be possible to tell which slides are visible (within the cone of visibility) and hide those that aren't. Of course I may be completely wrong.\n@bartaz I honestly don't think it's sufficiently explained in the Readme but maybe it's just me. But I understand that you don't support IPad etc. and you're completely free to do so.\n. ",
    "vxst": "Well, I found it happen in https://blog.vxst.org/widthProblem/, however, I have not tested it in other os yet...\n. ",
    "zjttoefs": "You described it much better, that's exactly what I want. I'd even thought of your two options.\n\"Hijacking\" close by slides for placement outside works, but makes placement harder or more inconvenient.\nFor the second option I think I could easily hardcode the \"overview\" slide to be the last. So I could use and distribute the presentation without accidentally going to extra \"decoration\" slides. \nBut in case others would find this useful too, there might be a neater option. Like a \"decoration\" class or so.\nThanks for the nice package anyway! \n. ",
    "slinkp": "I'm not sure I follow what the OP was trying to do either. But I love the idea of the title :)\nCould we get a way to change the transition time between slides? If I understand correctly, it's currently only configurable globally.  Thanks!\n. Ah, and now I see there are already possibly relevant issues #142 and #243.  Carry on! \n. ",
    "vinaykumar641": "Hello Bartaz\n iam also facing the same problem what to do now??\n. ",
    "nicolascian": "http://www.microsoft.com/en-us/windows/endofsupport.aspx\nhttp://en.wikipedia.org/wiki/Usage_share_of_operating_systems\nhttp://www.w3schools.com/browsers/browsers_os.asp\n. ",
    "Asone": "Here's the code to add so you can get the current index position with the API : \n- to add after the \"next\" object in the code ( around line 560 ) : \nvar index = function(){\n      return steps.indexOf(activeStep);\n  }\n- now add this to the API functions ( around line 630 ) : \nindex: index \nso you should have there the following code : \nreturn (roots[ \"impress-root-\" + rootId ] = {\n            init: init,\n            goto: goto,\n            next: next,\n            prev: prev,\n        index: index\n        });\nYou can now retrieve the index through the variable that contains the instance. for exemple if you make a impressAPI = impress(); \nyou'll retrieve the index position with : impressAPI.index();\nDon't know if it makes sense ? In any case that's what i've done and it works. Would be great to commit this. \nEDIT : Woopsies, just saw that it's already been commited. Wasn't implemented yet in the version i use. Nevermind, sorry for the mess :)\n. ",
    "JoshBrodieNZ": "Has this been resolved? I can click on slides from the overview step on latest Chrome.\n. ",
    "carmdq": "b) worked perfectly. Thank you very much!\n. Adding -webkit- before transform seems to have solved the issue but browser crashes a lot on transitions. I guess is too much to handle. On a desktop pc works perfect though. \n. You are right. A lighter version (less 3D) prevented the crashing.\n. ",
    "abanctelchevrel": "+1\n. ",
    "KATT": "Kill it. I'm not using impress.js currently.\n. ",
    "rambabusaravanan": "Ya thanks with sorry ..\n. ",
    "timgluz": "it's done.\n. ",
    "Profpatsch": "Well, my reason is that when jumping throught the slides fast I\u2019d like to know where I am. And the URL shows the page number. But only after the animation has finished. So it\u2019s either being fast or knowing where I am.\nIf the Chrome didn\u2019t exist any more there should be no reason to wait anymore, right?\n. ",
    "317070": "Well, I don't need any 3D-effects, and the documentations in index.html says:\nYou can also control the perspective with `data-perspective=\"500\"` giving it a number of pixels.\n    It defaults to 1000. You can set it to 0 if you don't want any 3D effects.\nThis last sentence caused me quite some trouble, in hindsight. :-)\nBut I have figured that even if I don't need any 3D, impress.js is kind of slow with a lot of objects. In Chrome, it creates a layer for each seperate object on the \"plane\". I thought the option meant that the library would be optimized for 2D as well (since slides are usually 2D). After reading the library I know this is not true.\nAnyways, this is what I have created thus far: http://programma.piratenpartij.be/\n. ",
    "Strikeskids": "I'm not emotionally attached to this change, but it would be nice to have this functionality in impress.\n. Sure. I can do that. Let me know if you need me to.\n. This is useful for when you are giving a talk and would like to directly engage with your audience. By clearing the screen, you remove the visuals as a distraction and get the audience to focus directly on you.\n\n. Rebased onto master to merge cleanly.\n. ",
    "joefarebrother": ":(\nMaybe a cool feature would be to have a new API method\nimpress().recompute()\nwhich recomputes the position for every\nstep/adds new steps.\n. So it's literally a one-line change?\nThanks!\nOn Sat, Mar 15, 2014 at 8:22 PM, Eduardo Oyarz\u00fan\nnotifications@github.comwrote:\n\nBy default you can't do that with Impress.js, so I've added a new entry to\nthe Impress.js API where you can do that.\nTake a look at Dyapos, my new Prezi-like tool for Impress.js:\nhttps://github.com/edwardoyarzun/dyapos\nAnd look at this file at line 638:\nhttps://github.com/edwardoyarzun/dyapos/blob/master/django_app/project/static/js/editor/impress_custom.js\nI exported the function \"initStep()\".\nThen If you call\nimpress().initStep(document.getElementById(\"my-step-id\")); you can\nrecompute that slide with Javascript. That's the solution to your problem.\nI made a pull request a time ago with that feature but @bartazhttps://github.com/bartazdidn't merged it :(\n\nReply to this email directly or view it on GitHubhttps://github.com/bartaz/impress.js/issues/373#issuecomment-37736865\n.\n\n\n\n\nhttp://www.chess.com/?ref_id=1897530http://www.chess.com/?ref_id=1897530\n  I play chess http://www.chess.com/ at Chess.com!\n  http://www.chess.com/members/view/accio_joe?ref_id=1897530_accio_joe_http://www.chess.com/members/view/accio_joe?ref_id=1897530\n  Rating: 1073\n\nChallenge me!http://www.chess.com/echess/create_game?uid=1897530&ref_id=1897530\n## View my gameshttp://www.chess.com/home/game_archive?member=accio_joe&ref_id=1897530\n. ",
    "onelinelernen": "What about mathjax.js? With mathjax.js you can type formulas as you do in latex and they get rendered in html... Can one use mathjax.js within impress.js? \n. ",
    "idleft": "I think about this problem when I watch the incredible demo. Actually someone has already tested this and it works perfectly with Mathjax. Check this out: http://www.lsv.ens-cachan.fr/~schmitz/pub/impress.js/#/step-2\n. ",
    "kwikness": "Any time! I'll be going through the rest of the source sometime next week\nat work and i'd be glad to submit a couple more similar pull requests as I\nread through.\nExcellent framework.. and props on the Yoda ascii!!\n-Kyle\nOn Apr 5, 2014 4:35 AM, \"Bartek Szopka\" notifications@github.com wrote:\n\nthanks :)\n\nReply to this email directly or view it on GitHubhttps://github.com/bartaz/impress.js/pull/379#issuecomment-39632422\n.\n. \n",
    "flocondetoile": "Hi,\nThanks for your quick reply.\nYou can have a look on a presentation with ckeditor inline at this url (click inside a slide)\nhttp://diapo.io/support/ma-presentation#/test6\n. It was several days I was looking for the property causing this issue.\nThank you very much :-)\nReally\n. ",
    "catbot2000": "No. It's completely fine. Although when I try to run the .js doc by itself,\nit returns with an error saying that document is undefined (which is on the\nfirst line of actual code).\nOn Mon, Apr 7, 2014 at 1:54 PM, Bartek Szopka notifications@github.comwrote:\n\nAre there any errors in browser console or anything?\n\nReply to this email directly or view it on GitHubhttps://github.com/bartaz/impress.js/issues/381#issuecomment-39775414\n.\n\n\nThank You For Your Time,\nPeter Iversen\n. here's the folder i use. Do anything with it. just tell me what's wrong.\n. Right, sorry. here's the link:\nhttps://drive.google.com/file/d/0B1AQdRi8s3S6V0hQS0diQXU5a3M/edit?usp=sharing.\nOn Tue, Apr 8, 2014 at 1:39 PM, Bartek Szopka notifications@github.comwrote:\n\nIf you tried to send it as an attachment it probably didn't work - you\ncan't send attachments to github.\nYou would need to put it online somewhere and send a link.\n\nReply to this email directly or view it on GitHubhttps://github.com/bartaz/impress.js/issues/381#issuecomment-39892210\n.\n\n\nThank You For Your Time,\nPeter Iversen\n. I changed it, but nothing's different. Also, it shows the\nimpress-not-supported fallback message, where when it was in the actual\ndemo, it worked fine. Could it have something to do with JQuery?\nOn Tue, Apr 8, 2014 at 4:21 PM, sidinwillis notifications@github.comwrote:\n\nMaybe\n\ninstead of\n\n?\nOn Wed, Apr 9, 2014 at 12:10 AM, catbot2000 notifications@github.comwrote:\n\nRight, sorry. here's the link:\nhttps://drive.google.com/file/d/0B1AQdRi8s3S6V0hQS0diQXU5a3M/edit?usp=sharing\n.\nOn Tue, Apr 8, 2014 at 1:39 PM, Bartek Szopka <notifications@github.com\n\nwrote:\nIf you tried to send it as an attachment it probably didn't work - you\ncan't send attachments to github.\nYou would need to put it online somewhere and send a link.\n\nReply to this email directly or view it on GitHub<\nhttps://github.com/bartaz/impress.js/issues/381#issuecomment-39892210>\n.\n\n\nThank You For Your Time,\nPeter Iversen\n\nReply to this email directly or view it on GitHub<\nhttps://github.com/bartaz/impress.js/issues/381#issuecomment-39908035>\n.\n\n\nReply to this email directly or view it on GitHubhttps://github.com/bartaz/impress.js/issues/381#issuecomment-39909028\n.\n\n\nThank You For Your Time,\nPeter Iversen\n. ",
    "melMass": "What is your actual process? Impress works without dependencies.You must do something wrong while creating your html..\n. ",
    "sidinwillis": "Maybe\n<link href=\"impress1.css\" rel=\"stylesheet\" />\ninstead of\n<link href=\"css/impress.css\" rel=\"stylesheet\" />\n?\nOn Wed, Apr 9, 2014 at 12:10 AM, catbot2000 notifications@github.comwrote:\n\nRight, sorry. here's the link:\nhttps://drive.google.com/file/d/0B1AQdRi8s3S6V0hQS0diQXU5a3M/edit?usp=sharing\n.\nOn Tue, Apr 8, 2014 at 1:39 PM, Bartek Szopka <notifications@github.com\n\nwrote:\nIf you tried to send it as an attachment it probably didn't work - you\ncan't send attachments to github.\nYou would need to put it online somewhere and send a link.\n\nReply to this email directly or view it on GitHub<\nhttps://github.com/bartaz/impress.js/issues/381#issuecomment-39892210>\n.\n\n\nThank You For Your Time,\nPeter Iversen\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/bartaz/impress.js/issues/381#issuecomment-39908035\n.\n. \n",
    "tyxchen": "Sorry for not replying sooner.\nI've tested this with Chrome on Windows on the same machine (it's dual-boot), and 3D works without a hitch, so I don't think it's graphics-related. I haven't been able to find another Linux machine, so I can't tell if the problem is local to my computer or not.\nI'll try to get back with more info as soon as I can.\n. @perrybutler thanks for the tip, I've checked and it does seem that Chrome doesn't support the 3D part of 3D transforms on the computer I'm using (it's a very old box, in case you're wondering). I guess I'll close this.\n. ",
    "JOGA-DESIGN": "first i must say im very impressed to this idea work and code. i love it thats work without prezi!\ni want tie up to this question. when i start the demo page of this code... than is dont work on iOS an android phones. why is this so? ist that only on the demo page or always so whit this code?\nsorry for my english, i hope you undertand what i to ask would like?\n. ",
    "adamralph": "Thank you so much! I've hacked it out of the source for my presentation.\n. ",
    "vcml10": "Hi @FagnerMartinsBrack great to hear! Good news to the project. But I'm no longer looking into this. So we can close it! \n. ",
    "sclausen": "@FagnerMartinsBrack sorry for the long delay, but I didn't know how to properly respond. Sure I didn't track this issue, because it has been so very very long ignored. So, what should or could be done now? \n. Sure I'll do. \n. @FagnerMartinsBrack weren't my changes good to merge? \n. @henrikingo your mouse-timeout-hide-stuff plugin seems to be superior and we should dump my PR in favour of yours.\n. ",
    "shaase": "Hey @FagnerMartinsBrack , the recent developments for this project are very exciting! I haven't used the library in well over a year, so I'm going to close the issue. If I start to actively use it again and come across the issue, I'll open another issue.\n. ",
    "chenweiyj": "Thank you. It works.\n\u5728 2014\u5e745\u670822\u65e5\uff0c\u4e0b\u53483:45\uff0cBartek Szopka notifications@github.com \u5199\u9053\uff1a\n\nI'm not sure if what is your case and if that will help but try:\n.step img {\n    max-width: 100%;\n}\nThis should make the image width fit into steps width.\n\u2014\nReply to this email directly or view it on GitHub.\n. And the javascript console show the error as follows.\n\nUncaught RangeError: Maximum call stack size exceeded. impress.js:112\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\n(anonymous function) index.html:73\ntriggerEvent impress.js:112\nonStepLeave impress.js:291\ngoto impress.js:486\nnext impress.js:564\n(anonymous function) impress.js:717\n. ",
    "sylvaintrias": "Hi !\nI have the same problem here, but when I add max-width, my image disappears.\n<body>\n    <div id=\"impress\">\n        <div class=\"step\" data-x=\"-1833\" data-y=\"-1567\" data-scale=\"1\">\n            <img width=\"1869\" height=\"1189\" src=\"images/1-PO.png\"/>\n        </div>\n        <div class=\"step\" data-x=\"0\" data-y=\"-3244\" data-scale=\"1\">\n            <img width=\"2151\" height=\"1412\" src=\"images/2-SH.png\"/>\n        </div>\n    </div>\n</body>\nActually the view by default scales so that my image fills the screen. Instead I want it to FIT the screen so I can see it entirely.\nThanks\n. ",
    "Leonard-Li777": "\u8f9b\u82e6\u4e86\uff01\u8c22\u8c22. ",
    "alexdantas": "This is a great addition! Hope it gets merged soon\n. ",
    "u982744": "Down vote. Agree that it's poor design to assume a certain id. \n. I think #399 is a bad pull request that should not be merged. Don't get off to a bad start!\n. ",
    "eudennis": "I tried with that:\n$('#visitas').on('impress:stepenter', function(){\n     var step = $(this);\n     step.find('.present').addClass('animated');\n}, false);\nBut didn't worked. Is anything wrong? Btw, I'm using Animate.css\n. I was trying to add to step, but tried with both (step and an inside element). Neither worked.\n. <div id=\"visitas\" class='step bounceInDown' data-x='2000' data-y='-1500'>\n    <h2>N\u00famero de Sess\u00f5es</h2>\n\n$('#visitas').on('impress:stepenter', function(){\n     var step = $(this);\n     step.find('.present').addClass('animated');\n},);\n. It add the classes, but it doesn't trigger the animation. Sad >:/ - Something with those animation libraries would really make impress even more impressive, haha.\n. I tried with some simple animations and it worked, like that: @keyframes animacao {\n     0% {opacity: 1;}\n     50% {opacity: 0}\n     100% {opacity: 1;}\n}\nBut I can't understand why the animate.css animations won't work.\n. ",
    "hamidrezabstn": "hi @eudennis\nyou can easly solve this problem in fact @bartaz snippet was ok but should know that you most add animated class plus your desire animation class! with this trick u can use all animate.css stunning animations in impress.js ;)\nexample for shake animation:\n```\n$('#mystep').on('impress:stepenter', function(){\n     var step = $(this);\n    step.find('.button').addClass('animated shake');\n});\n//this remove section is for when you want to repeat animation each time user visits that step\n$('#mystep').on('impress:stepleave', function(){\n     var step = $(this);\n     step.find('.button').removeClass('animated shake');\n});\n```\nBTW: i write some snnipet that may help you even better ;)\n$( document ).ready(function() {\n            function animation(stepId,animateClass){\n                $('#'+stepId).on('impress:stepenter', function(){\n                     var step = $(this);\n                     step.find('i.fa').addClass('animated '+animateClass);\n                });                \n                $('#'+stepId').on('impress:stepleave', function(){\n                     var step = $(this);\n                     step.find('i.fa').removeClass('animated '+animateClass);\n                });\n            };\n                animation('contact','shake');  \n        });\nhave Fun\n. ",
    "akhoury": "I don't have a strong opinion on this - feel free to proceed as you see fit. Although it would be nice to have a way to refresh the deck without the need to refresh the page.\nThanks for asking.\n. that works. Thanks\n. +1\n. @FagnerMartinsBrack btw, what does this PR break, as far backward compatible? I did set a global impress function\n. no worries\n. ",
    "inlandyears": "@bartaz what type of script were you thinking could be used to move to step 3 from step 2? \nI'm also trying to do this exact thing, but my javascript is not so good. \nSomething like this? I'm pretty lost in here :(\n```\nvar api = impress(); \napi.init(); \nif (window.location.hash !== 'transition-page') {\napi.goto('next-page, 3000) ; \n```\n. Hi there! \nHave you tried this? \nhttps://wordpress.org/support/plugin/wp-js-impress \n. ",
    "mr-White": "I'm interested in this.\nI've noticed that in Chrome on Windows 7, there is vertical scrolling in my presentation via mouse wheel. Overflow:hidden seems required for the main container of the impress presentation, but that breaks everything (hides it all away since that node in the DOM is 0x0).\n. Something that is working for me, as a temporary solution..\nhttp://stackoverflow.com/a/4770179\n. ",
    "radicaldrew": "I forked this code and made a change to impress.js\nto enable slide change on scrolling.\nhttps://github.com/radicaldrew/impress.js/blob/master/js/impress.js#L681\n. I forked this impress and updated code to add scroll event handler to go to next slide.\nJust made more sense to scroll down to go to next slide.\nhttps://github.com/radicaldrew/impress.js/blob/master/js/impress.js#L681\ndocument.addEventListener(\"scroll\", function ( event ) {\n            event.preventDefault();\n            api.prev();\n        }, false);\n. ",
    "jurekK": "Bother, the editor destroys the html tags!!\nI wanted to say that \"applet\" is obsolete, but works, and \"embed\" SHOULD work. Sorry.\n. ",
    "andygoblins": "I'm still tracking, and I'm still interested\n. One example would be \"exit\" animations. A script acting as a onStepLeave hook can access the current slide as .active to animate/modify the slide's elements before the slide transition.\nI have also used it to have \"sticky\" headers that float above the rest of the content:\n<h1 id=\"stickyheader\" style:\"position:fixed; top:10px;visibility:hidden\">This header floats above the content on slides 1 and 2</h1>\n...\ndocument.addEventListener(\"impress:stepenter\", function(event) {\n    if document.querySelector(\"#slide1.active\") != null {\n        document.getElementById(\"stickyheader\").style.visibility=\"visible\";\n    }\n});\n/* This part only works if my patch is in place: */\ndocument.addEventListener(\"impress:stepleave\", function(event) {\n    if (document.querySelector(\"#slide2.active\") != null) {\n        document.getElementById('stickyheader').style.visibility=\"hidden\";\n    }\n});\n. I agree.\n. ",
    "dcarral": "hahahahahahahahahahaha, and this?\n. Of course! haha. I've just checked out @Yvonne9996's profile expecting at least a \"Love\" repository. Not lucky enough though ;)\nJust for the sake of curiosity, are this kind of contributions somewhat usual in Github?\n. Got it.\n. ",
    "deshraj": ":)\n. ",
    "mofosyne": "Well this was more of a wishlist kind of thing. So I am tracking it in the sense I still would like to see it happen. But I'm not sure if HTML5 TTS technology is going to mature anytime soon for this to be viable :/\n. Stand alone presentations I imagine? Would that make sense? But the issue would be that you would also need to implement stuff like (virtual cursors), to make full use of how a presenter during an actual lecturer would function in a online lecture.\n(So you'll probbly need to also invent a semi-markdown syntax, to markup the inflection and stressor in a person's voice as well. As well as parts of the speech where they would physically point or highlight a passage.).\n. Basically instead of recording an audio to go with the presentation, you type the speech onto it. (Hmmm... which would also end up doubling as a very accessible way for the deaf to view a web presentation as well).\n. That's a good point, is there already a project that would read out a close captioning text file and sync the synth speech to press the .next() and highlight/cursor as needed? \n. I imagine it is more convenient to write the speech script inline with the actual slides. This is since if people distribute the slides, you want the speech script to go along for the ride as well (Having the html slide, and the transcription as separate files means that the transcription has a higher likelihood of accidentally getting omitted)\nIt could be done as a plugin possibly for the logic, but there needs to be a consistent way to insert the speech text in the slide source in a way that doesn't mess up the slide if the plugin is missing.\n\nAbout trying to bake in speech synthesis of the transcription in slide animation. While not aimed at blind, such feature is useful in having a easy way to edit and distribute lecture side without having to re-record the audio again. I'm thinking of this in the context of something like a wiki platform but for lecture style content. Not sure how practical it is in reality, but is interesting to consider.\nBut anyhow the html5 web speech synth is too new to be useful at the moment to be effective. I coded up a proof of concept which had multiple issues.\nI can send you a link to my proof of concept so you can get an idea of what I was thinking, and why I think its still has some ways to go before we should try to implement this in impress.js . What's your email?\n. Oh don't worry, found your email from your profile. I sent you an email with the proof of concept I written a while ago.\n. I'll certainly consider, maybe after I get some comments from you (might\nneed to clean it up). Btw did you get my email?\nOn Mon, Apr 25, 2016 at 1:52 AM, Fagner Brack notifications@github.com\nwrote:\n\nI can send you a link to my proof of concept so you can get an idea of\nwhat I was thinking, and why I think its still has some ways to go before\nwe should try to implement this in impress.js .\nCan you please? It would be very useful.\nWhat's your email?\nCan't you post it here? Github accepts zip files\nhttps://help.github.com/articles/file-attachments-on-issues-and-pull-requests/.\nI would like to keep the discussion online, because anyone have access to\nit and could help in finding an optimal solution for the problem.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/impress/impress.js/issues/420#issuecomment-213987704\n. Just to note, on implementing speech synth of such lecture speech transcription. I found a pretty nifty javascript Text To Speech lib totally in js, located in this link http://www.masswerk.at/mespeak/ . Since its totally client side, it deals with the unreliability of the current experimental web speech api (which is unsupported in firefox totally). Quality is not as good as google speech, but it is reliable on both chrome and firefox. (e.g. this js rap http://www.masswerk.at/mespeak/rap/ )\n. \n",
    "LucyintheSkyWithDiamonds": "Can you provide a link to the site in question?\n. ",
    "SethGunnells": "I haven't been tracking this, no. As I stated in the first comment, I became aware that this feature had, essentially, been already implemented and was pending a merge after I submitted my version. I haven't been keeping up with the project since. You can drop this if you like. Or pull it in. If you want to keep it, I'll gladly help in whatever way is needed.\n. ",
    "mhils": "\nSorry, but I don't understand this use case, why would someone want to place an object in the 3D space that is not a part of the individual slide?\n\nMy primary use case is having backup slides in the overview at the end. They won't be in the presentation when I navigate with arrow keys/presenter, but I can click on them in the overview at the end (or during the presentation). A small code example is given in #429.\nI'm open to renaming this to skip if you feel that works better.\n. > For your use case, can't you position a menu with links that goes to specific steps? If not, why?\nThat works of course, but I'd like to have my HTML logically grouped. \nAlso, it's very convenient to just disable a few slides when shortening a presentation.\n. I still think this is a very useful addition, but I'm super busy with other stuff at the moment. @FagnerMartinsBrack, what would you like me to update?\n. @FagnerMartinsBrack, yes, please.\n. ",
    "nathanael-fijalkow": "Hi,\nI'm backing @mhils PR. I think this would be a useful feature, most probably easy to implement.\nCheers,\nNath\n. ",
    "zippeurfou": "Is it  me or 'More importantly, you need too be a designer' should be changed to 'More importantly, you need to be a designer' ?\n. ",
    "KamesCG": "What do you mean by new WYSIWYG editor? I took a look at the demo, but was a little unsure of its purpose. Do you want to elaborate?\n. ",
    "azexo": "It is library for make content for small sites on WordPress for example. \nI am just wanted to say it to authors.\nAs I see they waiting GUI for impress.\n. ",
    "maliktunga": "This pull request is a duplicate of https://github.com/bartaz/impress.js/pull/432 and can be closed.\n. This pull request is a duplicate of https://github.com/bartaz/impress.js/pull/432\n. ",
    "HacKanCuBa": "I totally agree to this\n+1\nHacKan & CuBa co.\nOn 22 Oct 2014 17:24, \"Fagner Brack\" notifications@github.com wrote:\n\nHi @bartaz https://github.com/bartaz, is this project going to be\nactively developed?\nIn several threads you stated no time for working into this project and\nthe latest commits were just regarding grammars.\nImpress is impressive (!!), and there are many useful pull requests\nwaiting to be landed. Any news if this project is going somewhere or if you\nare willing to handle it to someone else to continue active development?\nWhy do I ask this? Well, maybe I am not the only one, but its sad to see\nfragmented projects with useful features that could be centralized. If\nthere is any chance that this project is going to get on track, it would be\nnice to disclose the information, so one may not jump into creating another\nrepository and potentially reinvent the wheel.\nAlso, I noticed there is a lack of general documentation, so it is hard to\nknow exactly what is supported and what is considered an implementation\ndetail (although the code is pretty well documented and one can have a very\ngood basis).\nAnyway, with > 1k watchers and > 22k stars it is unlikely not to exist at\nleast one willing to take over or be an active collaborator. Is there any\nnews regarding the project state? Just to get into the context.\nThanks.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/bartaz/impress.js/issues/435.\n. \n",
    "afterdesign": "I think that moving impress.js to impress organisation is the right move.\nBut I have no idea how to choose people to manage it.\n. ",
    "MarcoDVisser": "I completely agree with Bartaz, keep impress.js core as small and efficient as possible. That should be the main objective. \nNevertheless I believe implementing a simple package/library model would accomodate both advanced features as well as keep the core clean and functional. Many succesful opensource community projects use this approach, users may contribute packages and extend functionality without major changes the core project, I don't see why this wont work here. Maybe even with minimal adjustments to the core?\nJust my two cents \n. ",
    "joescii": "I'm a huge fan of impress and use it regularly.  Personally, I really dig it's current basic state.  I feel it's a launching pad for ideas, and for my purposes that is more than sufficient.  However, I see where it would be great to have other people's ideas for extensions gain some exposure in the impress community.  I believe your vision to make it an extensible base is spot on.  If I didn't already have significant roles in other OSS projects, I would quickly dive headlong into this opportunity to help with a great project.  \nI vote for plugin mechanism, from a technical and community standpoint.  Who to do it?  Unfortunately I won't have the bandwidth to be much more helpful than this comment at this time.\n. ",
    "bobintornado": "@bartaz maybe the project should adopt Open-source governance, following the path of io.js\n. ",
    "seyisulu": "I'd love to join in helping but I the impress and impress-js organizations are empty. How can I assist?\n. ",
    "DuncanMacWeb": "Hey @bartaz, how about transferring ownership of the repo to the impress org today and adding @Terrycloth @seyisulu @FagnerMartinsBrack and\n@Pierstoval as owners/admins, as they seem motivated to work on it? I think that would be great for the future of impress. Carpe diem! :wink:\n. Hey, I think it\u2019s great that impress will be part of RGSoC. Wouldn\u2019t it be a good idea though to move impress into the impress org and invite contributors to be owners of the org now, which would help move the project forward before April turns into May? It would be fantastic to get some significant improvements merged in before RGSoC starts.\n@bartaz, about your problem with link redirection if you transfer the repo to the impress org and then fork it back into your account, how about this solution?\n1. Transfer the repo to the impress org and add your prospective key contributors as owners\n2. Use a different account to fork the repo, or ask someone else to do it (I\u2019d be happy to help with that)\n3. Rename the fork while it\u2019s sitting in the other account (new-impress, for example)\n4. Transfer the fork back into your own account\nThat way, when the fork is transferred back into your account it would have a different name, so shouldn\u2019t break GitHub\u2019s redirections. I agree that the redirections are very important to maintain existing links etc.\nIt would be very encouraging to see some progress on impress before RGSoC..... :pray: :smile:\n. ",
    "Klerith": "Im working in a impress maker, so far so good right now. When is finish I will post it in here, of course is going to be free. \nRight now I can add slides dynamically and move objects. So I thing two or 3 months of hard work and it will be ready to use. \n. As I said before. Is under development. I want to create a website to give every body access to make impress presentations easily and free. \nThe code I'm not sure if will be open source, but we will see how it goes. Wish me luck. \n. ",
    "and3rson": "@bartaz This is really a very interesting discussion - the moment when the project has to somehow continue its existence and decide a path for future.\nPersonally I agree @FagnerMartinsBrack that we can make some minor changes to impress.js that won't affect its functionality, but rather make it expose its API functions and internal state variables to make writing plugins easier.\nI suggest just to make everything kept in a global prototype so that it can be easily changed or decorated. E.g.:\njs\nImpress.prototype.impress = function() { /* constructor */ };\nImpress.prototype.api = {next: {}, prev: {}, goto: {}, init: {}, ...};\nImpress.prototype.values = {currentState: ..., ...};\nPersonally I already have a contribution for cool swiping support (which I can implement if @bartaz decides to proceed with this kind of solution.)\nI would really love this. Having a project with plug-ins is always cool and flexible.\nP. S. I think I'm a bit late (by few years or something) :)\nP. P. S. 25k starts - that's so damn cool.\n. @bcipolli I think multiple PRs may conflict, so the second approach (to hand it to the community) seems more logical. But who will be responsible for it? :)\nEdited: @bartaz can also just choose few people out of the active contributors and grant them write access. That would also be great.\n. Any updates guys?\nIt's been a while. A lot of people willing to contribute.\n. It seems like @bartaz does not really care about his project. It's really weird to behave like that having the repo with 26k and thousands of users.\n. @FagnerMartinsBrack I think that's possible to do having transition interpolations for mid-frames. The only question is performance. I will try to experiment with that :)\n. @FagnerMartinsBrack I've added interpolation for frames to provide native-like dragging. The performance seems usable on mobile devices :) Check this demo out:\n\nTested on Samsung Galaxy A5, Chrome browser.\nP. S. I also implemented a toAdvancedNumber function to allow using values like:\nhtml\n<div class=\"slide step\" data-x=\"0.5w\" data-y=\"2h\"> ... </div>\nThis means to use 0.5 * screen width for X and 2 * screen height for Y to build responsive presentations (to use current screen dimensions Instead of using explicit pixel-values)\nYou can check out the demo presentation here: http://crowdsourcemyname.com\n. @FagnerMartinsBrack Thanks :) However I'm not sure if I understand you correctly, can you describe the desired behavior?\n. @FagnerMartinsBrack ah, I see now. Sure, I can just change threshold to some lower value (currently 1/2 screen width, probably need 1/4 or 1/5 or smth)\nThanks for the demo! I'm gonna push update in few minutes.\n. @FagnerMartinsBrack Done! Check out the demo site :)\n. Anyone with write access to the repo around? :)\n. @FagnerMartinsBrack use as you wish, it's open for everyone :)\n. @FagnerMartinsBrack Awesome! Thanks for info.\nYou guys are doing an awesome job.\nIn case you get back to this feature later, I'll be glad to fix or reimplement it to suit the new architecture (and create tests as well.)\n. @henrikingo Glad it helps!. Nice to see the project is still alive and doing well :)\n. ",
    "GordonSmith": "Delighted this lib is going to get some fresh work - FWIW I have a tweaked fork which was an experimentation in using impress as a UI - I have a demo here:  http://rawgit.com/GordonSmith/Visualization/WECARE/apps/WeCare/index.html (none of the data will load unless you are inside my intranet)...\n. @Pierstoval  I don't and wasn't really sure if it the changes were appropriate for a \"slide presentation library\" (since its basically changing the default actions for space, tab and click) - I am just mentioning it here so folks can think about it during the initial re-factor planning.\nIf it helps your planning I can issue a \"PR\" as a placeholder for the idea?\n. ",
    "gitbreaker222": "just jumping in to tell you \"its great to see this community effort on this project. Thats the spirit of open source software!\" \ud83d\udc4d. ",
    "stefan-jonasson": "After I created this request I saw that the same thing had been requested several times before and some of the solutions was better than this one. \n. ",
    "nishit727": "Yes. The same thing happens on the example.\nBefore Scrolling(Chrome 38 on Windows):\n\nAfter scrolling(Chrome 38 on Windows):\n\nAfter further scrolling(till end)(Chrome 38 on Windows):\n\n. ",
    "jorisvanzundert": "Apologies if this is the wrong place to ask. I was wondering if there is an ability (planned maybe) to support zoom in/zoom out behaviour for mousewheel/touchpad so that panning and zooming is possible independently from the steps order. Couldn't find a plugin that does this, but maybe I'm not looking in the right places. Thanks for any help!. Thnx @henrikingo I've done so. Would be happy to help with implementation, but I'm not up to speed with the code base yet at all.. Hi all, \nI made a rough implementation of what I meant in #649 here: https://jorisvanzundert.net/prezs/presentations/ESTS_2016/ESTS_2016.html \nThe use case for this is that you sometimes during or after a presentation want to roam around a little talking about different aspects that relate not to just one fixed slide/step but to more than one. Therefore you want to be able to zoom and pan so that a few slides/steps are in view. After roaming around a bit, you pick up your prepared story by clicking next. (Though it is also possible to click another slide and proceed from there.)\nThis rough implementation works in Chrome at least and on my MacBook touchpad. It doesn't use the camera plugin, because I didn't understand that plugins code and functioning yet, so I rolled my own for now. There are several issues that need to be fixed and thought over before I can turn this into a proper plugin (it's just an addition at the bottom of the presentation's html file). Issues are\u2026\n\nMousedown capturing somehow blocks the toolbar slide list.\nZoom works fine as far as I can see, pan works fine as far as I can, but if you pan first and zoom then you'll find that the transform origin has not panned along. This should be solvable by manipulating impress_element.style.transformOrigin, but whatever I try that will not allow itself to be set form the script. I have no idea why.\nObviously this is not plugin level yet, but if I can figure these problems out, I will turn it into a proper plugin.\nI haven't looked at progressiveness and compatibility yet, for now I'm trying to get this working in current (65) Chrome.\n\nIf you have any clues on how I could improve this feature, let me know!\nCheers\n--Joris van Zundert\n. ",
    "matthiasn": "Sure, but then it would be \"you need to be a designer, too\". \n\nOn 14.02.2016, at 02:14, Fagner Brack notifications@github.com wrote:\nHi @matthiasn it seems that the word is correct, it means that despite HTML and CSS you need to have design skills too.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "dman777": "My bad...this was something silly. Sorry.\n. ",
    "bartvanderwal": "Hi @FagnerMartinsBrack .\nGood busy! (that's Dutch, for 'doing good work :P).\nTo be honest I haven't been tracking this project, and didn't do much with it anymore. This little contribution of mine is but a vague memory. But now I do remember that there were more people who asked for this, and suggested this. And as far as I remember it worked. And now I look back at #446 you also did this in your fork or tested it or something.\nWas this change already done? Otherwise I would say just accept the pull request :smile:.\n. I don't understand your focus on if OP keeps track of a bug. Shouldn't you rather decide to accept or not based on relevance of a change, whether it's in line with idea of the package and code quality.\nThe latter I'll leave to you, but the former is pretty evident given that the author mentioned the shift-tab specifically as something he should have done, but hadn't got around to yet.\n. Ah and after reading this comment of yours;\nhttps://github.com/impress/impress.js/issues/435#issuecomment-62306959\nIt seems to me that you should just change this (original) repo to yours, since you added the shift-tab since you added a lot of other goodness like unittests and JSHint and AMD!\nAbout the bower stuff, since you mention you don't know about it there, that just requires adding a bower.json (if it 's not there), adding the git repo url in there, and a version (dame version as in package.json) and doing a bower register once. Then after that you need to bump that version number and commit that each time you want a change to be available to Bower users (the Bower system will detect that). For us not-so-hipsters still on Bower, which I think are still\nconsiderable.\nAnd with whom you should be able to identify as you called jQuery the most succesfull JS package, which is true, but no real hipster would say :P.\nYou can then indeed close this issue. And I know think I understand your context better.\n. ",
    "SergiuFunieru": "You're welcome.\nFrom what I understand, you can release your software with 2 different licenses, and the user chooses the one he wants. Which is actually what you did. My only wish is to change the wording, like in my original post, as now it's not clear if the user can choose the license he wants or he has to use the combination of MIT + GPL.\nThank you,\nSergiu Funieru\n. Yes, I understand the same (but I'm not a lawer, so I'm not 100% sure). MIT license would be enough, and one license would be also much clearer.\nUsually, authors use GPL as the less restrictive license, for a commercial program. If you plan to offer your program under MIT, MIT license alone would do it. Of course, this is just a suggestion - you're the one who makes the final decision.\nSergiu Funieru\n. ",
    "mattberther": "@bartaz: I am in the same boat -- we have a legal team that LOVES MIT licenses but is far less fond of the GPL licenses. Stating the license as MIT or GPL and allowing us to choose which one we use would make getting it through our legal team much easier.\nAll that said, I agree with @SergiuFunieru -- the choice is yours to make. Thank you for considering.\n. ",
    "FranzSkuffka": "On line 766 of impress.js it says that there are touch event handlers bound to the right and left third of the screen, doing exactly what you want.\nHave you checked that out yet?\n. ",
    "holli77": "Thank you  very much guys.\nSince this time I found a solution similar to the second possibility from Bartaz.\nBut Yes I haven't seen the line 766, I was always trying to slide for the next step.\nGood Work!\n. ",
    "PunkChameleon": "@FagnerMartinsBrack -- This PR is just for clean-up. There seems to be a lot of extra whitespace through the project, however this is super minimal in priority, but thought it'd still seem valid. \n. Absolutely, will update tomorrow. Sorry for delay!\n. ",
    "HexRdesign": "Hello!\nThis pull has minimal impact on code; it's a few extra if statements. The\nissue was when you use the alt / control / windows / option keys with tab,\nthe presentation continues to move. The fix was checking if the keys were\npressed.\nThank you for your business.\nSincerely,\nHexR Support Department\nhttp://hexr.org\nsupport@hexr.org\nOn Sat, Feb 13, 2016 at 8:19 PM, Fagner Brack notifications@github.com\nwrote:\n\nHi @HexRdesign https://github.com/HexRdesign , in an effort to clear up\nolder issues/PRs we are pinging back to know if you are still tracking this\nrequest.\nTo give a little bit of context, recently a decision was made in the\nproject\nhttps://github.com/impress/impress.js/issues/435#issuecomment-177602861\nto make the development more active and the first task is to clear up older\nPRs like this one to see if the OP\nhttp://netforbeginners.about.com/od/internetlanguage/f/What-Is-OP.htm\nis still interested in keep it going.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/impress/impress.js/pull/455#issuecomment-183799501.\n. \n",
    "vikaspotluri123": "Current version on https://impress.github.io/impress.js/ still progress with use of control + tab\n. It works!\n. ",
    "dongseok0": "I thought toNumber()'s argument should be string type? toNumber('0') works fine.\nIf it's not, maybe need to test with this.\n. Yeah, but isNaN(parseFloat('4f')) will not work. I think it needs to use more precise isNumeric() function. I'm gonna make another PR!\n. ",
    "Grazouillis": "Thanks a lot for that answer !\n. Sorry, I made a mistake ;)\nResolved.\n. ",
    "tobegit3hub": "Great. Thanks @FagnerMartinsBrack :smiley: \n. ",
    "rtuider": "Edit:\nI found out that when clicking on the link goto inside impress.js is called more than once.\nThe first call is via the goto-statement and the slide changes as well. But if continuing debugging the click-handler of impress.js takes effect and calls goto again with the old slide as target.\nIs there any way to interrupt the second click event?\n. I had to implemend an own eventhandler and provide the event-object. Then I do \"preventDefault\" and \"stopPropagation\"\n. ",
    "quimnuss": "@FagnerMartinsBrack yes indeed! impress.js rocks.\n@bartaz Thank you for taking the time to look this up.\nActually I've implemented it. It's 0 flexible because it's the first time I touch a javascript/css and I don't know proper practices... so bear with me. \nI've created an array of arrays with the numbers of the connected slides and added the method subnext that is triggered with up/down, althought I'll probably switch it to +/-. Indeed in 3d it's tricky to decide which key should be assigned. Right now the graph is hard-coded but I'll change it so you can pass it as a parameter of each step. I'm sure there are cleaner ways to do this, but again, I'm not familiar with the language yet.\nAnyway, I can do what I wanted to do, even if it's dirty.\n. once I have a parametrized version I'll fork the the repo and upload it just in case anybody else is interested.\n. Here, a minimal example. For now the transitions are hard-coded and only\nup+right is implemented, but that way you get the idea.\nUse right arrow to see the main slides and up to go by the subslides. I've\nnumbered them so you see it.\nhttp://quimnuss.github.io/impress.js/#/bored\n2015-03-10 10:32 GMT+01:00 Fagner Brack notifications@github.com:\n\nPut some demos online. Sometimes its better to have a way to visualize the\nresult even if you have questions about how it was done internally.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/bartaz/impress.js/issues/465#issuecomment-78020621.\n. I believe there's a bit of a confusion here.\nIts pretty hard to grasp the idea from an incomplete example :S.\n\nI've uploaded my modification to impress.js to allow two paths of navigation; that is, a minimal working example to illustrate the idea. It's minimal, but still complete. The rellevant part was how to use two different keys to navigate, not how the slides should be placed so the navigation comes naturally.\nFor a full functional and meaningful demo you'll have to wait ;) the one I'm envisaging is quite complex and will take me some time to design and implement. ... and may turn out to be a disaster as well.\nThere aren't impress.js demos that do this AFAIK, jmpress came close but it doesn't work properly in FF36. See this cube\nAnyway, I'll upload a parametrization of the modification when it's ready in case is of any help to anybody.\n. I haven't researched it yet, but none of the jmpress presentations transition properly on FF36, they all jump instantaneously from one slide to the next (no sliding effect). Impress.js, however, transitions normally (a bit jerky on some, thought).\nSo for example impress inside jmpress doesn't transition:\nhttp://jmpressjs.github.io/jmpress.js/examples/impress/#/bored\nwhile the original impress does:\nhttp://bartaz.github.io/impress.js/#/bored\nUnfortunatelly I can't debug it now, will do if I have the time. Maybe we should move this issue to jmpress, we drifted away from the original question.\n. Very nice Henrik!\nMaybe that's the push I needed to finish my slideshow project I left on the\nshelf for nearly two years...\nNot a fan of desserts in general so... yeah, outlier info shall be\nneglected.\nOn Thu, Aug 31, 2017 at 11:11 PM, Henrik Ingo notifications@github.com\nwrote:\n\nHi all\nJust wanted to add a link here for those that will come here to read\nthis... I spent some rainy Summer days creating a demo that uses non-linear\nnavigation. In this case, you can freely navigate Up, Down, Right and Left.\n(A 3D presentation could offer even more interesting choices.)\nhttp://henrikingo.github.io/impress.js/examples/2D-navigation/\nIt's late now, so the text content is missing. If you want to participate\nin my playful crowdsourcing of pro's and con's for desserts, please do so\non twitter: https://twitter.com/h_ingo/status/903359928567570433\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/impress/impress.js/issues/465#issuecomment-326421637,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AD_HCTGOtXIdHwrHp8wZc8gSROUvcTGGks5sdyGAgaJpZM4Dr00L\n.\n. \n",
    "Hypoon": "Any news on this front? I'm looking to use a similar feature. I'm considering using impress.js for a presentation. If I get stopped during my presentation with a question (very likely), I may want to briefly discuss a \"more detail slide\" which would normally be excluded from the narrative.\nI think the ideal end result in my case would be to be able to push a hotkey to turn over a slide to view the back of it. Regardless of whether I pushed the hotkey or not, the right arrow key should proceed to the next slide as usual.\n. @FagnerMartinsBrack I see, thank you for getting back to me.\n. ",
    "mrusselldesign": "For anyone who comes across this, I put together a script that can set presentation \"paths\" using jmpress.js, which includes the \"data-exclude\" attribute to skip steps.\nI tagged links to the custom paths with onclick=\"filterSelection('pathname')\nI used the script below to look for slides with class \"pathname\" and set data-exclude to \"false\", then finally deinitialize and reinitialize jmpress.js to recognize the new path selection.\n```\nfilterSelection(\"all\")\nfunction filterSelection(c) {\n  var x, i;\n  x = document.getElementsByClassName(\"step\");\n  if (c == \"all\") c = \"\";\n  // Add the \"show\" class (display:block) to the filtered elements, and remove the \"show\" class from the elements that are not selected\n  for (i = 0; i < x.length; i++) {\n    w3RemoveClass(x[i], \"show\");\n    if (x[i].className.indexOf(c) > -1) w3AddClass(x[i], \"show\"); \n  }\n    $('#impress').jmpress(\"deinit\");\n    $('#impress').jmpress({ start: '#main', viewPort : {height: 900, width: 1450, maxScale: 1 } , });\n    // deinitialize and reinitialize jmpress with the current data-exclude properties\n  }\n// Show filtered elements\nfunction w3AddClass(element, name) {\n  var i, arr1, arr2;\n  arr1 = element.className.split(\" \");\n  arr2 = name.split(\" \");\n  for (i = 0; i < arr2.length; i++) {\n    if (arr1.indexOf(arr2[i]) == -1) {\n      element.className += \" \" + arr2[i];\n      element.setAttribute(\"data-exclude\", \"false\");\n      // set data-exclude to false on shown elements\n}\n\n}\n}\n// Hide elements that are not selected\nfunction w3RemoveClass(element, name) {\n  var i, arr1, arr2;\n  arr1 = element.className.split(\" \");\n  arr2 = name.split(\" \");\n  for (i = 0; i < arr2.length; i++) {\n    while (arr1.indexOf(arr2[i]) > -1) {\n      arr1.splice(arr1.indexOf(arr2[i]), 1);    \n    }\n  }\n  element.className = arr1.join(\" \");\n  element.setAttribute(\"data-exclude\", \"true\");\n  // set data-exclude to true on un-shown elements\n}\n```\nHope someone finds this useful. Thanks to @bartaz, @henrikingo, @sokra, and @shama for the great work!. ",
    "darkwiz666": "Yeah, I read through it but I didn't see it. It's usually at the beginning so.\n. ",
    "tvanollefen": "I added a license file in a pull request if you'd like to add it to the main repo!\n. ",
    "matb": "Hi @FagnerMartinsBrack, personally I don't have a preference. But this should definitively be fixed because it causes issues in combination with other tools. \n. Sorry for the late reply. I just checked the current version of bower.json and the issue has been already resolved there. This one can be closed. \n. ",
    "dizzyone": "That makes sense, thanks for responding.\nIn any case, if anyone else has this issue, the easiest way is to simply install the master branch like so:\nbower install impress.js#master\n. ",
    "michaelneu": "Hi, to be honest I haven't tracked this request in a while as there was basically no progress on the other PRs as well. \nI just checked the current demo of impress.js and noticed that this feature is not implemented yet, but could actually come in handy, so I'll track it again. Maybe I'll rewrite it soon, as I now think some parts are quite hacky. \n. ",
    "bartuer": "exactly.\n. ",
    "jdalton": "Hey @bartuer!\n~~Can you check out the PR over at #594 to see if this resolves the problem.~~\nLooks like it does \ud83c\udf89 \nMoved to #594.\n. @FagnerMartinsBrack\nAwesome!\nWith this and #580 I think all that's left is to add an entry in the circle.yml \nto execute karma start karma.conf-sauce.js.\n. @FagnerMartinsBrack Any updates?\n. > Do you want to be a member of impress.js org?\nThat would be awesome. Thank you!\n. Will do. Thank you!\n. Let's merge and see if it works :D\n. @FagnerMartinsBrack\nIt looks like the sauce-encrypted-env-vars file was being treated as text instead of binary.\nI added a .gitattributes file https://github.com/impress/impress.js/commit/da4c08aa2311f8d2e057d98d7f8fd515e48218c4 to try to enforce binary. Could you please recommit the sauce-encrypted-env-vars file again once you've pull down a fresh master.\nYou can test it by trying to decrypt it locally:\nshell\nopenssl aes-256-cbc -d -in sauce-encrypted-env-vars -out foo.txt -k $SAUCE_DECRYPT_KEY\nbad decrypt\n74692:error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:/BuildRoot/Library/Caches/com.apple.xbs/Sources/OpenSSL098/OpenSSL098-64/src/crypto/evp/evp_enc.c:330:\nBefore running the command be sure to\nshell\nexport SAUCE_DECRYPT_KEY=<value_in_https://circleci.com/gh/impress/impress.js/edit#env-vars>\n. Fixed \u26a1 \n. @FagnerMartinsBrack \n\nAny idea why this might be happening\n\nThat's a neat error. I'm not sure what's up with it. It doesn't error the other way so that's nice!\nOn the fixed commit it looks like the env variables aren't being detected though. More digging!\n\n. Got it working @FagnerMartinsBrack!\nThe fix was to use export:\nbash\nexport SAUCE_USERNAME=....\nNow sauce is reporting test fails in IE11, Safari 9.1.2, and Safari 8.0.8.\nI can confirm the test fails are legit. (Tested on the real browsers) \n. Fixed the test fails!\n. Moved to #587.\n. LGTM.\n. I'm laid back, whatever process you all dig is fine by me.\n. @FagnerMartinsBrack Ya it could be.\nMaybe we should add a check to the script to see if there is a PR environment variable set.\n. This should save us the trouble and avoids PR sniff logic.\n. \n\nbeforeafter\n\n\n\n\n\n\n\n\n\n\nBased on the before and after it looks like it fixes the issue without regressing others (I checked Chrome at least) and without relying the -ms- prefix.\nI'll look into adding a test.\n. Yep, no worries.\n~~I'll cook up a test and a code comment prolly won't hurt either.~~\nTest added.\n. Updated.\n. Ya, there are options for handling branches or PRs with sauce, I'll dig them up this weekend.\nUpdate:\nOkay!\nTo enable SauceLabs in PRs and not expose API tokens you can read this bit on JWT: https://docs.travis-ci.com/user/jwt. It's sauce labs so not a super risk but folks could use your sauce api token. Travis and Circle have different ways to deal with it. In Circle is a bit less-robust but the linked repo above should cover an example of how to get it going. It looks like it requires a bit of maintainer info to generate the key.\n. ``` js\nfunction test(platform) {\n var label = platform[0].split( \" \" );\n return (label.length > 1\n  ? label.map(function( word ) { return word[0]; })\n  : label\n ).join(\"\") +\n \"_v\" + platform[1];\n}\ntest([ \"firefox\", \"47\", \"Windows 10\" ])\n//=> \"firefox_v47\"\ntest([ \"internet explorer\", \"11\", \"Windows 10\" ])\n// => \"ie_v11\"\n```\n. Fixed.\n. Ya the period didn't match the existing comment style.\n. Correct. \n. Noticed a format inconsistency.\n. Ya I did it for consistency with other references.\n. ",
    "jacekkopecky": "I too have various extensions including relative positioning at https://github.com/jacekkopecky/impress.js\n. And it's not all - I still have some things I've used but haven't pushed yet.\nI actually just thought about starting over, refactoring impress to better suit my needs; but I'll still push everything I've done and used to my fork and I'll be very happy if any of it is useful in the main repository. Let me know and I can prepare PRs.\n. the above could just be api.goto(\"overview\") which will do nothing if such an element is not found.\n. ",
    "jyyan": "its my bad , push into wrong repo , please forget this.\nand btw, thanks Dawid Kurek help me code review about this , thank you.\n. ",
    "dawikur": "Sure :) I started reviewing push and then realized you have already closed it. If you want more comments about it just ask :smiley: \n. Closing, as this is not an issue, simply I want to let you guys all know about it/\n. ",
    "anwargm": "I'll try the workaround. \nAnd THANK YOU for the impressive impress.js\n. ",
    "blauertee": "In my case I don't want to zoom in on specific details in the Background I just want the Background to kind of align with the zoom level of the viewport / camera. Is there a way to get the current zoom level and position of the camera?\nThen I could just set the background size to some factor times the zoom level and the background position to some factor times camera position.. ",
    "franklinyandi": "sfsf\n. ",
    "yalishizhude": "These two APIs maybe can make the presentation more easily understandable and professional ^_^\n. ",
    "zwhitchcox": "Got it: \n.impress-enabled,.past,.future          { pointer-events: none }\n.impress-enabled #impress { pointer-events: auto }\n. ",
    "alebaffa": "Just tell me if you prefer a pull request to remove them.\n. ok cool! :+1: \n. ",
    "electricthread": "I went ahead and fixed the Speeding up Drupal link http://www.electricthread.com/speed-drupal. Thanks for the heads-up @alebaffa \n. ",
    "dsignr": "Hey @bartaz !\nThanks for the quick response! I managed to get it working by overriding the value for scale in this line: `\nhttps://github.com/impress/impress.js/blob/master/js/impress.js#L154\nI set scale = 1 and the presentation is scaled to max. I hope this doesn't mess up something else later, though. \nThanks!\n. @bartaz I tried setting the screen size values myself in the config, but they had no effect. So I had to resort to manually over-riding the scale to 1. Perhaps, I should just call the function that resizes the slides using modernizr or something. Thanks a lot for your quick response :)\n. ",
    "CJohnDesign": "Thanks @bartaz \ud83d\udc4a\ud83c\udffc\nUpdated link to the width/height defaults:  https://github.com/impress/impress.js/blob/80ffff0e8f603a82d9abb6eb51647732c2c8563e/js/impress.js#L170-L172. ",
    "LongLiveCHIEF": "I was thinking of doing this:\n- creating an impress.js IDE/GUI using electron\n- using raphael.js for animations\n- using fabric.js for SVG generation/import, freehand drawing, etc...\nOverall, the experience within the IDE should be familiar to users of PowerPoint/Keynote/etc..., but produce amazing impress.js presentations.\n. ",
    "mzf": "wtf?\n. ",
    "sasha310813": "Thank you for the prompt reply, I'll try it.\n. This is a snippet of my code:\n```\n\n\u0418\u0441\u0445\u043e\u0434\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430\n\n\n<div id=\"stop2\" class=\"step\" data-x=\"740\" data-y=\"-1450.5\" data-scale=\"0.1\">\n    <img src=\"g1.gif\" style=\"width:85%;position:absolute; left:15%; top:-500%;\">\n</div>\n\n```\nWhen I go to \"stop2\", the previous slide gets zoomed in and the \"parent03.svg\" gets blurry and pixelated. How can I apply your advise in this situation?\n. ",
    "JohnWong": "@sasha310813 I have met this problem two years ago. I have a demo http://impress.sinaapp.com/, which use SVG file. If I open it in Firefox, SVG works fine. If I use Chrome, SVG will be blurry. At that time, I found that if I turn off Use hardware acceleration when available in settings, SVG will not be blurry, but transition animation will not be smooth. I tried this method a moment ago. It doesn't take effect now.\n. ",
    "lukeapage": "duplicate of https://github.com/impress/impress.js/issues/198 which has more info\nThanks for the firefox tip, it's much better than chrome, though slower.\n. It seems later versions of firefox now work like chrome too - I tried disabling accelerated graphics and got the same result. However I've worked out a fix that works well enough for me\nbody {\n    zoom: 2;\n    transform: scale(0.7);\n    transform-origin: center 20%;\n}\nThe downside with this approach is that you lose anti-aliasing in some cases, because things are being drawn big and then zoomed out without anti-aliasing, but it does mean that when you scale in on svg's they are a bit better.\n. ",
    "forsakendaemon": "I've tried this as well - I'm trying to display SVG in a first slide (created using Snap if that makes any difference), then zoom in to another slide, and the initial SVG appears pixellated. Again, only happens in Chrome, scale transforms don't make any difference though.. ",
    "mchendriks": "It's actually the jmpress.js, the jquery plugin, a working example in IE10 you can find on:\non http://new.digirent.nl/examples/impress/\nBut not working om FF and Chrome.\nYour current version is working in Chrome and FF but not in IE.\n. ",
    "PeterNerlich": "Do you mean the white background with duplication? That's defined for the slide class. Simply remove it. If I get you right, you can simply do something like the step with id=\"overview\", an empty or hidden step. The only problem would be setting only the parent step to opacity: 1;, to do that generally is impossible with CSS3.\n. I just discovered that something similar is already being discussed in #81.\n. Sorry, read the notice, but forgot about it again.\nI am generally still interested in a solution, but am currently not actively working with impress.js. So I don't know if reopening is the right thing here.\n. ",
    "marlenetiare": "thanks alot for the quickly!\nfinally, the javascript doesn't work for me, but in the file impress.js I erased a couple lines and it worked perfectly.\n```\n        document.addEventListener(\"keydown\", function ( event ) {\n            if ( (event.keyCode >= 37 && event.keyCode <= 40) ) {\n                event.preventDefault();\n            }\n        }, false);\n    document.addEventListener(\"keyup\", function ( event ) {\n        if ( (event.keyCode >= 37 && event.keyCode <= 40) ) {\n            switch( event.keyCode ) {\n                case 33: // pg up\n                case 37: // left\n                case 38: // up\n                         api.prev();\n                         break;\n                //case 9:  // tab\n                //case 32: // space \n                case 34: // pg down\n                case 39: // right\n                case 40: // down\n                         api.next();\n                         break;\n            }\n\n            event.preventDefault();\n        }\n    }, false);\n\n```\nthank u so much again!\n. ",
    "3ruce": "Likewise, the javascript option doesn't work for me so I'm going with editing lines 730 - 739 to comment out the tab key... That said, it would be great if it was possible to return full control of the keyboard once the form fields are active/being edited...\n. ",
    "aemonge": "yeah, wtf ?\n. ",
    "carywreams": "looks good, thanks\nnot so skilled with the icons\nso, \"two thumbs up\"\n. #### periodic ( annual ? ) pros/cons review for typescript re-write\n(not meant to be an incendiary request)\n. ",
    "FilipMestric": "I've seen a lot of WYSIWYG editors that have textarea within the slide. I'd say you only need to put .stopPropagation() on mousedown event for textarea.\n. ",
    "ktabors": "This was my first time using the project. I didn't look into why this was a problem in Chrome, maybe I'm using it wrong. In Chrome dev tools I saw was the variable names in the object didn't have any capitals. From the html 'data-maxScale=\"1\"'. I didn't check my solution with other browsers. Maybe there should be a check to see if the variable exists with or without capitals?\n\n. ",
    "geek1011": "The problem is that I do not know how I can turn this into a library. This is not a duplicate of #501 , but it is quite similar to #143\n. ",
    "EasonWang01": "1.Add mouse wheel event to change page.\n2.Add H button to able redirect to overview page.\n. ",
    "mattlockyer": "This paragraph:\n\"If you have no idea what I mean by that, or you just clicked that link above and got very confused by all these strange characters that got displayed on your screen, it's a sign, that impress.js is not for you.\"\nCould be rephrased as I mentioned in my comment.\nBy referring to your repository as \"may not be for you\" you are discouraging use, for example a novice developer who may think you are referring to them, but may be able to use impress.\nI simply don't see the point of this language as it appears to draw some special line in the sand between devs and \"others\".\nThis does not help others in an industry that already suffers from such a stigma.\n. Done, thanks for letting me help out.\nOn Sun, Mar 27, 2016 at 9:30 PM Fagner Brack notifications@github.com\nwrote:\n\nI agree and I am pretty sure @impress/mergers\nhttps://github.com/orgs/impress/teams/mergers will be ok with that,\nwant to create a Pull Request?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/impress/impress.js/issues/540#issuecomment-202225854\n. Not particularly sorry. I have offered my suggestions and now believe that\nthe Impress mods are capable of a proper rewrite.\n\nGood luck!\nOn Mon, Apr 11, 2016 at 3:04 AM Fagner Brack notifications@github.com\nwrote:\n\n@mattlockyer https://github.com/mattlockyer, still tracking this?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/impress/impress.js/pull/542#issuecomment-208265540\n. \n",
    "vorpalvorpal": "I'm a bit lost wading through the issues and pull requests for impress.js. Is a plugin architecture for impress going ahead, and if it is, is it based on the work in henrikingo's repo?. Thanks. Good to hear.\nOn 17 Oct. 2017 10:28 pm, \"Henrik Ingo\" notifications@github.com wrote:\n\nHi @vorpalvorpal https://github.com/vorpalvorpal\nI'm happy to tell you, that we're currently working on merging my work\ninto the dev branch of impress.js repo. (This is mostly just to allow\nBartek and Fagner to read up on it, the repos themselves are not diverged,\nso there's not a lot of actual merging work.) Once done, the dev branch\nwill be merged into master. I estimate a couple a months until that\nactually happens. Please continue to use my repo until then.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/impress/impress.js/issues/541#issuecomment-337201657,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Ae1O3t8_FUJwNWCnOF3pgHNGKy5c0Dibks5stI9xgaJpZM4H5f5F\n.\n. Hovercraft provides a (fairly) user-friendly way to use impress.js. It uses reStructuredText files which are a human-readable format. You might be able to save your powerpoint presentation as a docx and then use pandoc to convert it to reStructuredText, but I think you would need to do so much manual cleaning up at the end of that process it might not be worth it.. Wow, the last time I checked on impress.js the project seemed dead. It's fantastic to see so much activity! So, I wrote an extension to hovercraft to allow elements to take up the entire screen (part of a larger extension allowing videos and audio). To do this I work out an appropriate scaling factor based on the size of the the slide.\n\nI didn't take the time to read impress.js closely, however, and thought that users were expected to edit the defaults to change the slide size (hence why I wanted access to whatever the user had chosen). However, now I see I was mistaken. It might still be nice to have the defaults exposed so that if they do change some time in the future, extensions such as mine don't break, however I entirely understand why you would be cautious to do so.\nThanks for all the replies and sorry for not taking the time to read the source properly. Egg on my face. Lesson learned.. Well I was going to say, yes, this should probably be closed, but actually, maybe not. If as @bartaz suggested, they were exposed as impress.defaultConfig (or similar) they wouldn't pollute the global namespace and if, rather than being defined in impress.defaultConfig, they were merely copied there after being defined internally, there would be no problems with people trying to change them from outside impress (since they don't actually do anything other than report the internal values). It would, however, allow you guys and gals to change the defaults at some stage without breaking any third-party applications that relied on those defaults.. Fair enough. Well I'll close this request.. Thanks @henrikingo. I'll put a little comment in my code to update it once all your great work is merged over.. I'm not currently using it, but was considering using it in the future. I\nrun full day workshops and find that really large and complex impress\npresentations tend to crash the browser. I was thinking of trying to break\npresentations into smaller sub presentations embedded  within a single\nparent presentation. I haven't tested it yet, or thought thru how\nnavigation would work.\nOn 16 Jan. 2018 7:30 am, \"Henrik Ingo\" notifications@github.com wrote:\nNote: If you're actually using this feature for something useful, please\nspeak on this ticket and explain how.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/impress/impress.js/issues/664#issuecomment-357782658,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Ae1O3iiqoyZSBSa50kptwijFlD36GjTdks5tK7V9gaJpZM4Re6Vz\n.\n. Yeah that was the general idea. It is meant as a sort of workaround for\nbrowsers not liking to render the canvas if it is too zoomed in or there is\ntoo much on it. As I said, only an idea I'm planning to try at the moment.\nOn 20 January 2018 at 00:47, Henrik Ingo notifications@github.com wrote:\n\n@vorpalvorpal https://github.com/vorpalvorpal If your intent is to have\nmultiple presentations on a page, but only use one of them at a time, I can\nsee how that could work and that could still be supported.\napi = impress(\"sub-preso-1\")\napi.init()\napi.next(), next()...\napi.tear()\napi = impress(\"sub-preso-2\")\napi.init()\n// etc...\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/impress/impress.js/issues/664#issuecomment-358970131,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Ae1O3tzNDWYEYwMWB3wPUsqTZLJGOXHEks5tMJzWgaJpZM4Re6Vz\n.\n\n\n-- \nhttp://robinshannon.net\n. ",
    "GuillaumeLeclerc": "What should I put in the mozilla bug report ? I think it's actually better to find what's buggy before no ? \nI will try to find is the problem is specific to Linux. Testing on windows right now\n. Of course. Doing it right now\n. http://i.giphy.com/3o85fZaABkPYRDzsOY.gif\nTested under : \n- ArchLinux\n- Ubuntu 14.04 LTS\n. @FagnerMartinsBrack My mouse is only moving when I click on the \"finish screen capture\" icon. So no I'm not dragging anything. \nI tested on two laptop Asus they were running on Intel HD \"GPU's\" \nI also tested on a Mac book air and it was working\n. @FagnerMartinsBrack Sorry I misunderstood your sentence I thought you were saying you saw my mouse moving therefore I might be dragging something.\nI don't know any internals of Impress.js do you have any hints what I should be testing ? It does not seem to be related to the 3d though. It seems to me that it's just not following the \"trail\" of the presentation (as if the camera was in spectator mode). \nWhat do you think ?, Do you have any information on how it's implemented in Impress.js ? \n. Thank you! . I will try this as soon as I have a little time (Wednesday I think).\n. Sorry I've been working a lot lately. I'll try tomorrow. Thank you for pinging \n. All new information I have is that it's still broken on firefox 46 :/\n. I tried and it is reproducible with a docker image. I think you could find the problem easily if you can run it yourself.\nDockerfile\n```\nFROM ubuntu:14.04\nRUN apt-get update && apt-get install -y firefox\nReplace 1000 with your user / group id\nRUN export uid=1000 gid=1000 && \\\n    mkdir -p /home/developer && \\\n    echo \"developer:x:${uid}:${gid}:Developer,,,:/home/developer:/bin/bash\" >> /etc/passwd && \\\n    echo \"developer:x:${uid}:\" >> /etc/group && \\\n    echo \"developer ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/developer && \\\n    chmod 0440 /etc/sudoers.d/developer && \\\n    chown ${uid}:${gid} -R /home/developer\nUSER developer\nENV HOME /home/developer\nCMD /usr/bin/firefox\n```\nbuild the image\ndocker build -t firefox .\nstart the image (assuming you have linux, I don't know how to do it on other platforms)\nbash\ndocker run -ti --rm \\\n       -e DISPLAY=$DISPLAY \\\n       -v /tmp/.X11-unix:/tmp/.X11-unix \\\n       firefox\nThe advantage with docker is if you can't reproduce it then we are sure it's hardware related.\n. I already tried on three computer but they are all laptops from the same brand. The simple snippet that is not working is the demo of imperss.js on it's website (http://impress.github.io/impress.js/#/bored)\nSince @bartaz is running linux and could not reproduce it. It might be a good thing if he could try the docker image. If he don't see it then it might be (brand, grpahic card related)\n. I'm really sorry but I don't know how to do it on mac. Since docker only works on Linux (you need to emulate a linux distribution to make it work on mac).\nFor the code snippet. I really don't think it's 3D transform that is the problem. The problem seems to be related to input handling. The problem is by pressing arrows I'm able to move in the direction I want as if it was using a \"free camera\" I could control with my arrow. You can take a look at the GIF I posted\n. As far as I know when you install it on Mac it uses virtual box under the hood to run the Linux distribution boot2docker. But here is the procedure.\n- Create a file named Dockerscript. And paste the content I gave in my previous post.\n- run docker build -t firefox .\n- run the command I gave before to start the image.\nI think the last step will not work out of the box because it assume you have a server X and give the X socket to the container. It seems it is possible to make it work using this https://github.com/docker/docker/issues/8710\n. Sure. Doing it right now.\nTo be easier I'm even building the image and put it on docker hub. This way you will only have to run it.\n. Ok I built the image and I remarked it's working on it. I thought it was not because I already had Firefox running and it was using my own Firefox. If I close my local Firefox and only use the one in docker it is working perfectly. \nSo the bug is not present on a fresh Ubuntu 14.04. The bug is even weirder than I thought. \nI will try to use other distributions, and see if I can reproduce it.\nIf I can't reproduce it maybe we can close this and wait for more people to report the bug. (We are only 2 who can reproduce it)\n. I tried Ubuntu 12.04, FF 46, and it is still working fine. I agree with you, it must be a library me and my coworker we hae installed that mess up with Firefox.\nI think it's not related to impressjs itself. Maybe we can close this ? \n. @MichaelHuelsen I also have vimperator. So we are sure this is the problem :). ",
    "MichaelHuelsen": "Hey guys,\nI had the same behaviour in FF 45.5.1 and FF 50+ that @GuillaumeLeclerc  described.\n\"Moving the camera\" around to view the canvas with the arrow keys was possible, but the smooth presentation mode didn't kick in since the arrow-clicking/spacebar-clicking was not captured correctly.\nIn my case, I figured out that there was another plugin competing with impress.js to capture the keyboard inputs.  I am using \"vimperator\" to operate Firefox mouse-free. \nDisabling that plugin and restarting Firefox makes impress.js \"work\" again, it never stopped working I guess. So make sure that there are no other plugins installed that may interfere with impress.js.\nRegards\n. ",
    "mtancoigne": "@FagnerMartinsBrack Crap... I only tested with my mouse. I'll take a look with a touchpad and try to do something better...\nThanks for your feedback...\n. Oh, and that don't work with firefox :/\nI'll come back later with this one :)\n. Ok, my mistake was to use a deprecated event, so now it works for firefox too. The only thing that bothers me is the number of mouse steps to use before changing of slide. \n3 was really too short, I tried with 20 wich was good on a touchpad, but on another computer this was too much, forcing me to make avbout two complete wheel scrolls...\nImplementing this as a plugin should be good, as long as we can access the current slide from the API, and the numbers of slides.\n. ",
    "mr-rampage": "Awesome! Thanks for the insight. Will definitely keep an eye on this project and hopefully contribute in the future.\n. ",
    "nkbt": "Added some PR's related to this, @FagnerMartinsBrack \n. \ud83d\udc4c\nOn Mon, 6 Jun 2016 at 22:04, Fagner Brack notifications@github.com wrote:\n\nThis improves the npm test command that was manually running the locally\ninstalled Chrome browser with the package chrome\nhttp://npmjs.com/package/chrome. That package also doesn't seems to be\ncross-platform, it looks like it only works when using Mac\nhttps://github.com/afc163/chrome/blob/e3720fc584c95eb79dea2e5b4c5cd9c6726176a1/index.js#L9\n.\nThanks @nkbt https://github.com/nkbt for helping me out to setup Karma\nin CampJS VII http://vii.campjs.com/!\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/impress/impress.js/pull/566\nCommit Summary\n- Add Karma test runner\n- Run linting on added JS files\nFile Changes\n- M .jshintrc\n  https://github.com/impress/impress.js/pull/566/files#diff-0 (3)\n- A karma.conf.js\n  https://github.com/impress/impress.js/pull/566/files#diff-1 (55)\n- M package.json\n  https://github.com/impress/impress.js/pull/566/files#diff-2 (9)\n- A test/bootstrap.js\n  https://github.com/impress/impress.js/pull/566/files#diff-3 (12)\n- D test/core_tests.html\n  https://github.com/impress/impress.js/pull/566/files#diff-4 (23)\nPatch Links:\n- https://github.com/impress/impress.js/pull/566.patch\n- https://github.com/impress/impress.js/pull/566.diff\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/impress/impress.js/pull/566, or mute the thread\nhttps://github.com/notifications/unsubscribe/AAKsoKaGXDWbFphDWIrJixiOr5_KsZOCks5qJAzDgaJpZM4Iu01z\n.\n. Added karma.conf.js\n. PS: build is failing since it has no circleci config yet.\n. Rebased, added circle.yml\n. \\o/\nI have some more to come. Stay tuned\n. See https://circleci.com/gh/nkbt/impress.js/2 (success build) and first initial failed build https://circleci.com/gh/nkbt/impress.js/1\n. Nope, free forever. And really fast. Used for all of my OSS projects with no issues for many months. We also use it for our company private projects and it's been great even for our pretty heavy load.\n. 1. Right. Exactly that\n2. Karma too. I'll update.\n. \n",
    "Nekomajin42": "The answer to your first question is yes.\nAs I've written, the impress-on-\"ID\" class works fine when I want to catch one step. But I want to apply some style (background, font color, anything) when I am in a range of steps. Then I want to apply other styles when I am in an other range of steps.\nWith the impress-on-\"ID\" class, I have to write long and complex selectors in the CSS, so the code will be hard to maintain. And I can't just apply the styles when I enter a desired step, then apply other styles a few steps later, because it also has to work when I am walking backwards in the presentation.\nThe code I've written in my first comment works. It is tested. But maybe it is not the most effective way to do this, so I'd like to discuss it.\n. Come on, really?\n\nAnd I can't just apply the styles when I enter a desired step, then apply other styles a few steps later, because it also has to work when I am walking backwards in the presentation.\n\nI don't get all class names. The built-in names are excluded. There won't be (for example) an .impress-on-active class.\n. https://jsfiddle.net/Nekomajin42/jf8wLaw1/\nIt does not work in the preview, but it works in my local machine.\nSo, how it works. There are 9 steps in this presentation. I want to change the background color or the whole presentation (body element) when I enter the first step in a range. For example, I start with a blue background, and I use it, until I enter step 4, where I change the background to red. It will be red until I enter step 7, where I change it to green.\nUntil now, the .impress-on-id class works. I give ID-s to step 1, step 4 and step 7, and it's fine.\nBut then I start to go backwards in the presentation. From step 9 to step 8, then step 7. Still with a green background. And I enter step 6 (which has a .red class) where I change the background from green to red.\nNow I have to give ID-s to step 9, step 6 and step 3 too. But if I use classes (as I did in the fiddle), the whole stuff is easier.\nAnd imagine if I want to mix different ranges! I want to go through a few blues, then a few greens, then reds, and greens again...\nThis feature is usefull. The only questions is the implementation. I get it, there can be many .impress-in- classes appended to the body, so maybe a data- attribute would be better, I don't know. It is up to discuss. \n. Would you create a presentation with dozens of steps with either of the methods you've linked? Because I would not. I like to keep my code clean. With my solution, I only have to insert/rearrange/edit/delete the steps in the HTML. With your solutions, you have to modify the CSS too.\nI don't think I have to prove with any more usecases. A framework has to cover as much usecases as possible with built-in solutions. This framework can handle only one step (with the .impress-on- class), and can not handle ranges of steps, which is a big deficiency. If you want to build a professional software, you can not rely on third-party technologies like CSS preprocessors.\nI provided clear usecases. I shared my code. Use it if you want.\n. Man, I clearly stated in my first comment, that using the .impress-on- class to handle several ranges of steps results a messy code. Both HTML and CSS. Then you showed me two examples with messy code.\nI tried a few visual editors to build a presentation with impress, but all of them is incomplete and messy, because the framework itself does not provide the necessary tools. I shared a very simple solution to an existing problem, but you are trying to convince me that my problem does not valid.\nYou know what? Just create a presentation with hundreds of steps! Use your solution, then use my solution, and if you still don't understand what I am talking about, just close this issue!\n. ",
    "dubov94": "Also the version should be updated in js/impress.js.\n. ",
    "ladenise": "First of all, thank you for the quick answer.\nI made a jsfiddle, but the result goes to the impress-not-supported fallback.\nBut it is really simple to reproduce. https://jsfiddle.net/zes6q5dm/2/\nJust replace the div id=\"impress\" with the jsfiddle content and you're good to test.\n. @FagnerMartinsBrack It seems that it is the same problem as this issue from jmpress.js\n. ",
    "Unconfined": "Got it! My apologies.\n. ",
    "yarnball": "I have checked  @henrikingo 's main page- but there is no information on how to get the presenter mode or how to just download one of his already made products.\n. @henrikingo Thank you ! Very nice work\n. ",
    "elopio": "Do you mean node 4.6? That failed with the same error.\n. ah, right, sorry for being dense :)\nThat works indeed. Thank you!\n. ",
    "ChalkPE": "@FagnerMartinsBrack :white_check_mark: rebased from master!\n. @FagnerMartinsBrack I'm not sure it's what you wanted, well, cherry-picked 24d1a4c to my branch \ud83d\ude03 \n. :+1: \n. ",
    "chadwhitacre": "Thanks for the merge! :-)\n. ",
    "emilioferrucci": "I need this too! Is there a better way than just copying the divs and adding html for each bullet point (e.g. like this)?. ",
    "rethna2": "I have developed a small module for this purpose. Please refer https://github.com/rethna2/microsteps. Let me know if it helps.. ",
    "frederikmoellers": "If you only want to show bullets from a list one-by-one, you can also use a JavaScript snippet like this and then use the oneatatime CSS class on the step divs. It will take care of the rest.\nThe snippet was originally developed for hovercraft, but it should be usable in \"regular\" impress.js as well. Maybe you need to add support for pressing the space bar, but that should be it.. ",
    "gazpachu": "To fix this, we need to provide a method to destroy the library and all its events. @FagnerMartinsBrack, are you currently working on the destroy functionality? Otherwise I'll have a look at #409 and see if I can come up with something.. @FagnerMartinsBrack Ok. Any suggestions regarding the testing part? . ",
    "ArtNous": "all right!  I'll try make an issue in Spanish and see how it works.  thanks. . ",
    "CountZukula": "I will try to clarify :) - first of all, i am putting everything inside a step, then applying CSS, to be sure -\nIn the first screenshot, you see three images, superimposed. They are the content of 1 slide, together with the text \"if we get a list of ...\". I rotate those images using css (transform: rotateY(-20deg), for example), and animate them using -webkit-keyframes. This looks good when the slide is .active. But when you look at the content from the previous slide (see screenshot 2), then the images are not rotated (they're facing the camera straight, you see them at the bottom). The -webkit-keyframes are still working though: their animation is continuing.\nWhen you then go to the next slide again, containing the images, there's a moment of hesitation, then the rotation is applied and everything looks like it's supposed to.\np.s.: loving impress.js, by the way, amazing tool!. Okay, i'll add this as an additional comment. The described behaviour goes away when I apply opacity:1 to the afflicted slide. Then all rotations are seen, from within the slide and from outside the slide. Weird?. Indeed, the attachment should be included now. The attached file contains all my dirty work in progress, the file to open is pres.html. pres2.css contains the main body of css, including the fix where I set opacity 1:\n```\nproblem3intro4 {\n/*opacity:1;*/\n\n}\n``` \nUncomment that line, and the problem seems to be alleviated.\npres.tar.gz\n. Sorry, should have given a MWE straight away... I guess it's a conflict with the pres.css, if I disable that the problem goes away. But then it seems I lose a lot of the functionality that the impress.js demo offers.\nSSCE.zip\n. Well, I'm in the process of finishing that presentation, and I'm on a deadline :). I'll try to give it a shot when I get some spare time.... Hi Henrikingo, I'll consider it closed. I don't remember actually solving the problem but I circumvented it by disabling the .css file. Maybe I'll revisit the project in the future for archiving purposes, but that's not something for the nearby future in any case. . ",
    "GeorgioWan": "Hi,\nThanks for reply, I'll add it to the Wiki page of impress.js.. ",
    "fin-ger": "@henrikingo \nI thought about your input and came up with another proof-of-concept implementation that shows how to implement a vh/vw-based presentation framework.\nProof-of-concept with 3D\nI noticed 2 things while implementing this:\n\nThe em-based sizing of text leads to jittering while a transition is performed.\nAs I am using a container which enables % sizing in the slides, a reflow gets triggered on all slides when the size of the container changes. This typically happens when a zoom or slide transition is performed. The result is a bad rendering performance (frame time) when running this approach on a weaker PC.\n\nI know that there are tricks to optimize reflows but I don't know how to apply them (if even possible).\nAlso the new design forbids the use of px (or the result is highly dependent on the size of the browser window :smile:).\nFeel free to play around with the constants - it's quite funny to see how everything automagically adopts (or explodes) :rofl: . I added some transparency to the slides and the rendering performance is really bad...\n3D vw/vh presentation concept\nI think a combination of the transform: scale(...) and the vw/vh solution will give the best results.\nDuring the transition of slides, the old transform: scale(...) should be used for the following reasons:\n\nWhen using transform: scale(...) to size a slide, only the framebuffer texture of the transformed div gets resized -> no reflow\nAs the texture of the slide is scaled, the jitter produced by the interpolated font-size when doing a transition with vw/vh,  is avoided.\n\nWe have to be careful on which DOM element we apply the transformation. What we don't want is one big framebuffer texture that scales all slides as this will consume huge amounts of VRAM which may not be applicable on all PCs. Instead we want multiple smaller framebuffer textures that get updated independently (e.g. per slide).\nAfter the transition of slides the above shown vw/vh approach should be favored instead of transform: scale(...) for the following reasons:\n\nThe text rendering result is better as hinting and antialiasing information get preserved.\nThe slides adapt to the window size.\n\nThe challenge is to integrate transform: scale(...) into the vw/vh approach with equal sizing to prevent jumps when the transition ends.\nAn alternative solution would be to implement the container in a way that no reflow gets triggered e.g. not using top/bottom/left/right/font-size css properties to create a zoom effect which effectively implements the data-scale attribute. I can't think of any solution but maybe someone else has an idea...\nEDIT: I forgot to mention that the performance drain (the reflow) only occurs when the data-scale attribute of a slide differs to the previous slide.. > Isn't this what impress.js currently does?\nYes I think this is what impress.js currently does. The thing that I wanted to point out is that we have to be careful to not remove this feature.\n\nAnd if we want all slides to be potentially visible during a presentation, isn't it logically necessary to re-scale all of them all the time?\n\nI thought of something like this for a transition from slide A to slide B:\n\nUser triggers transition from slide A to slide B\nContent reflow to fit dimension of slide B (no transition for top/bottom/left/right/font-size)\nUse transform: scale(...) to fit dimension of slide A\nEnable transform transitions\nTransition to transform: scale(1)\n\nThis avoids a reflow for every transition frame but only reflows at the beginning of each transition. During the transition itself the hinting/antialising artifacts will still appear but I think this will barely be noticed by any user.. I implemented the above approach\nSingle reflow per slide transition\nProblems that occured while implementing this were:\n\nWhen changing the global scale on the container element the static perspective leads to a \"jump\" at the start of the transition. I am now also transitioning the perspective property of the impress element additionally to the scale property on the container. As the perspective does not translate 1:1 to a scale, the transition seems a bit bouncy when using the same transition function on both properties. Currently I cannot think of a solution for eliminating the bouncy perspective transition.\nWhen a small slide (e.g. 10% the size of the largest slide) is shown, other slides that are of \"normal\" size allocate a huge framebuffer (e.g. 9180x5164 pixels for the first slide when viewing the smallest in my example - ~180MiB VRAM). This is expected behavior as we want the magnified slides to be rendered in native resolution to avoid artifacts. However most slides will eventually be outside the camera frustum and therefore waste tremendous amounts of VRAM. Additionally one could conclude that rendering artifacts on non-active slides are not relevant for most user.\n\nTo solve the above problems:\n\nSet display: none to all slides that are completely outside of the camera frustum. This will additionally improve performance when reflowing the content at the beginning of a transition as less slides need a reflow (hidden elements are not reflown). Ideas are welcome for how to detect slides outside of the camera frustum. The simplest (and dumbest) approach would be to do a plane-to-frustum collision on the CPU (js) which will drain the performance on weaker devices even more.\nSet a scale property on non-active slides to reduce the framebuffer size. This could be e.g. set to match half of the window resolution.\n. Reduced VRAM\n\nI tried to fix the 2nd problem and ran in the following issues:\nWhen implementing solution 2 I noticed that the mix of height, width, font-size and scale leads to \"broken\" slides as seen when viewing slide 2 and inspecting the rendering layers in chrome. It seems like the vertices of the plane get distorted... Possibly I'm stretching the capabilities of the rendering engine.\nWhen implementing solution 1 I used the top,left,bottom,right boundaries of the slides (in screen coordinates) to \"collide\" with the visible area. This only handles the x and y coordinates and is not capable of hiding slides behind the \"camera\" as z is not taken into account. I could not find a way to get the z boundaries of a DOM element :grin: \nAdditionally I can only evaluate which slide is visible and which not when the transition is finished. This leads to timing issues (transition is done in css, collision in js) and slides will appear in the background when the transition is finished. To prevent the next slide to be hidden when doing a transition (it might not be visible from the previous one) I always show the next slide on transition start.\nI think my current implementation will work well for presentations that use small amounts of 3D (e.g. not my example :rofl: ) where slides are not covered by other slides.\nIssues that remain:\n\nTiming issues for show/hide of out-of-frustum slides\nBrowser rendering issues when using complex 3D\nHandle z boundaries of slides\n. fyi: I added an SVG to prove that it's fully scalable on any resolution:\n\nSVG example added on slide 3\nEdit:\nI removed the automatic show/hide of slides as this solves 1 and 3. I solved 2 by adjusting the arrangement of the 2nd slide a bit (removed complexity).\nSVG without slide show/hide\n. ",
    "mvanroon": "Sorry. I opened the issue 8 months ago. I don\u2019t have the project on my machine anymore. Cheers. ",
    "ashnur": "I understand that from your perspective this deployment route is irrelevant, but given that there are some people like me who decided that using browserify and npm should be just enough for us to manage our dependencies, and given that you do have an npm package, I was thinking maybe it would be a not too bad idea for it to export the impress function instead of attaching it to the window. After all, it's a small change and it does not interfere for the 99% of use cases out there.. @henrikingo do you know what browserify is? . Well, browserify is just one of many tools that provides require on the browser side, but it's the only one that gives full shim of the nodejs api so more or less you can use any nodejs module with it. There are cases when this doesn't make too much sense, but in most cases it does. :)\nI will try to add the easiest solution and see if it works locally and then maybe make a PR.\n. ",
    "zhengxiaoyao0716": "Sorry, there is a bug.... ",
    "mpiron": "Hi Henri, \nI'll look at this tomorrow. Thank's a lot for your so quick response. \nI'm discovering gitup and impress.js. I have effectively  use impress.js demo because I don't know where I have to search to found other exemples.\nI hope my english is understandable... :-D\nMurielle. ",
    "tkimnguyen": "Sorry, I guess my tweaks mostly disappeared after resolving the conflicts. Oh well! :) . ",
    "amdrewnguyen": "I can only reproduce the error when I call impress().init() inside of a javascript file. So, working off the repo's example, if I changed line 362-364 of index.html to\nhtml\n<script src=\"js/impress.js\"></script>\n<script src=\"js/app.js\"></script>\n<!-- <script>impress().init();</script> -->\nand in app.js, I had:\n```JavaScript\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  var rootElement = document.getElementById( \"impress\" );\nrootElement.addEventListener( \"impress:stepenter\", function() {\n    var currentStep = document.querySelector( \".present\" );\n    console.log( \"Entered the Step Element '\" + currentStep.id + \"'\" );\n  });\nimpress().init();\n});\n```\nThis comment in the index.html says that this should work just fine:\n\nYou also need to call a impress().init() function to initialize impress.js presentation.\n    And you should do it in the end of your document. Not only because it's a good practice, but also\n    because it should be done when the whole document is ready.\n    Of course you can wrap it in any kind of \"DOM ready\" event, but I was too lazy to do so ;)\n\nHowever, I get the following error:\n. Thanks @henrikingo!. ",
    "zepadovani": "Hello henrikingo, could you give some hint on how to use the impressionist camera plugin to enable zooming/panning with a mouse in a 2d situation? This is the only feature I miss in my presentations. (I already use #overview and empty steps... what I really miss is the ability to freely wander through steps/slides in the middle of a presentation). BTW, thank you very much for the development!. wonderfull! That's what I need! Thank you very much! I'll dig your code to learn how it works!\nThanks!. ",
    "ManzDev": "+1. ",
    "complanar": "+1. Just realized, that this applies to the toolbar, too. The speaker console reacts to navigation commands in the presentation view but not vice versa. That seems a little weird. It should be just the other way round.. Yes, I know the navigation buttons of the speaker console, of course. But if the toolbar would work the other way round, we would not need them, do we?\nStarting and pausing media when entering or leaving a step should be easy with hooking into the stepenter and stepleave events. It would be also useful to add a class to the body tag when playing a video, for maybe darkening the background in the meanwhile with css. This class should be removed, when the media ended or the step is left. This is my current quick and dirty script:\n    (function (document, window) {\n      \"use strict\";\n      //var lib;\n\n      var mediatools = window.mediatools = function () {\n\n        var steps = document.getElementsByClassName('step');\n        for (var i = 0; i < steps.length; i++) {\n          if (steps[i].classList.contains('videoslide')) {\n            steps[i].addEventListener('impress:stepenter', function() {\n              document.body.classList.add('onvideoslide');\n            });\n            steps[i].addEventListener('impress:stepleave', function() {\n              document.body.classList.remove('onvideoslide');\n            });\n          }\n          /* Pause audio and video automatically when leaving their step. */\n          steps[i].addEventListener('impress:stepleave', function() {\n            var videos = this.getElementsByTagName('video');\n            for (var k = 0; k < videos.length; k++) {\n              videos[k].pause();\n              document.body.classList.remove('videoplaying');\n            }\n            var audios = this.getElementsByTagName('audio');\n            if (audios != undefined) {\n              for (var k = 0; k < audios.length; k++) {\n                audios[k].pause();\n              }\n            }\n          });\n        }\n\n        /* parse html5media divs: <div class=\"html5media\" data-source=\"PATH\" data-type=\"MIMETYPE\"></div> */\n        var parseMedia = function (parentElement) {\n          var mime = parentElement.getAttribute('data-type');\n          var mimeParts = mime.split('/');\n          var path = parentElement.getAttribute('data-source');\n          parentElement.innerHTML = '<' + mimeParts[0] + ' controls><source src=\"' + path + '\" type=\"' + mime +'\"> Your Browser does not support HTML5 ' + mimeParts[0] + '.</' + mimeParts[0] + '>';\n        }\n\n        var media = document.getElementsByClassName('html5media');\n        for (var i = 0; i < media.length; i++) {\n          parseMedia(media[i]);\n        }\n\n        var videos = document.getElementsByTagName('video');\n        for (var i = 0; i < videos.length; i++) {\n          videos[i].addEventListener(\"playing\", function() {\n          document.body.classList.add('videoplaying');\n          });\n          videos[i].addEventListener(\"play\", function() {\n          document.body.classList.add('videoplaying');\n          });\n\n          videos[i].addEventListener(\"ended\", function() {\n          document.body.classList.remove('videoplaying');\n          });\n        }\n      };\n\n    })( document, window );\n\n    if (\n        document.readyState === \"complete\" ||\n        (document.readyState !== \"loading\" && !document.documentElement.doScroll)\n    ) {\n      window.mediatools();\n    } else {\n      document.addEventListener(\"DOMContentLoaded\", window.mediatools);\n    }\n\nMaybe it is easier to sync the console preview and the presentation view when using a canvas element and to copy the content directly to the other window instead of propagating all possible events manually and triggering the corresponding actions? Is this possible? Which impact does this have on performance?. Okay, you\u2019re right with canvas. \nBut I\u2019ve always wondered, why the console is a slave to the presentation and not the other way round.\nNevertheless it should possible to create a \u201cbacklink\u201d to the presentation window so that you can implement a bi-directional control. That does\u2019t solve the toolbar problem, but enables media control by synchronizing playback.\nI\u2019ve added one line to the console\u2019s open() method:\njavascript\nconsoleWindow.impress = window.impress;\nconsoleWindow.presentationView = window; // <- new line\nAfter that the following code should work out of the box without need of changing anything in the presentation file itself, except of including it somehow.\n```javascript\n  (function (document, window) {\n    \"use strict\";\nvar consoleMediatools = window.consoleMediatools = function (rootId) {\n\n  rootId = rootId || 'impress';\n\n  // Root presentation elements\n  var root = document.getElementById( rootId );\n\n  var syncMedia = function (localObj, eventName) {\n    var remoteDocument;\n    var localId = localObj.getAttribute('id');\n    if (top.isconsoleWindow) {\n      remoteDocument = top.presentationView.document;\n    } else {\n      if (window.consoleWindow) {\n        // Uncomment the following line to allow bi-directional controlling.\n        // This unfortunately is buggy, because some kind of race conditions in the following \n        // lines that prevent infinite loops.\n\n        //remoteDocument = window.consoleWindow.document.getElementById('slideView').contentDocument;\n      }\n    }\n\n    // Try to control remote media object only if a remoteDocument (presentation or console) \n    // could be reached\n    if (remoteDocument !== null && remoteDocument != undefined) {\n      var remoteObj = remoteDocument.getElementById(localId);\n\n      // Prevent infinite loops of remote contols\n      if (!remoteObj.isMaster) {\n        // Local object seems to be master. \n        // Set master flag to true and allow control of the remote object.\n        // Mute presentation audio to prevent doubled output, which can sometimes sound crappy.\n        // In general this could be the other way round, but:\n        // Do not mute console audio, to allow easier volume changes.\n        localObj.isMaster = true;\n        switch (eventName) {\n          case \"play\":\n            remoteObj.currentTime = localObj.currentTime\n            if (top.isconsoleWindow) {\n              localObj.muted = false;\n              remoteObj.muted = true;\n            } else {\n              remoteObj.muted = false;\n              localObj.muted = true;\n            }\n            remoteObj.play();\n            break;\n          case \"pause\":\n            localObj.muted = false;\n            remoteObj.muted = false;\n            remoteObj.pause();\n            break;\n          case \"seeked\":\n            remoteObj.currentTime = localObj.currentTime;\n            //localObj.play();\n            //remoteObj.play();\n            break;\n          case \"volumechange\":\n            remoteObj.volume = localObj.volume;\n            if (top.isconsoleWindow) {\n              localObj.muted = false;\n              remoteObj.muted = true;\n            } else {\n              remoteObj.muted = false;\n              localObj.muted = true;\n            }\n            break;\n          case \"ended\":\n            localObj.muted = false;\n            remoteObj.muted = false;\n            remoteDocument.body.classList.remove('videoplaying');\n            remoteDocument.body.classList.remove('audioplaying');\n            break;\n          default:\n            break;\n        }\n      } else {\n        // Remote object seems to be master. \n        // Set master flag to false again and do not try to control anything.\n        remoteObj.isMaster = false;\n      }\n    }\n  }\n\n  var initMediaSync = function (type) {\n    var media = document.getElementsByTagName(type);\n    for (var i = 0; i < media.length; i++) {\n      var id = media[i].getAttribute('id');\n      if (id === undefined || id === null) {\n        media[i].setAttribute('id', type + i);\n      }\n      media[i].isMaster = false;\n      media[i].addEventListener(\"play\", function () {\n        document.body.classList.add(type + \"playing\");\n        syncMedia(this, \"play\");\n      }, false);\n      media[i].addEventListener(\"playing\", function () {\n        document.body.classList.add(type + \"playing\");\n        syncMedia(this, \"playing\");\n      }, false);\n      media[i].addEventListener(\"pause\", function () {\n        document.body.classList.add(type + \"paused\");\n        syncMedia(this, \"pause\");\n      }, false);\n      media[i].addEventListener(\"ended\", function () {\n        document.body.classList.remove(type + \"playing\");\n        syncMedia(this, \"ended\");\n      }, false);\n      media[i].addEventListener(\"seeked\", function () {\n        syncMedia(this, \"seeked\");\n      }, false);\n      media[i].addEventListener(\"volumechange\", function () {\n        syncMedia(this, \"volumechange\");\n      }, false);\n    }\n  }\n\n  var steps = root.getElementsByClassName('step');\n  for (var i = 0; i < steps.length; i++) {\n    /* Pause audio and video automatically when leaving their step. */\n    steps[i].addEventListener('impress:stepleave', function () {\n      var videos = this.getElementsByTagName('video');\n      for (var k = 0; k < videos.length; k++) {\n        videos[k].pause();\n        document.body.classList.remove('videoplaying');\n      }\n      var audios = this.getElementsByTagName('audio');\n      for (var k = 0; k < audios.length; k++) {\n        audios[k].pause();\n        document.body.classList.remove('audioplaying');\n      }\n    });\n  }\n\n  initMediaSync('video');\n  initMediaSync('audio');\n\n // New API for impress.js plugins is based on using events\n  document.addEventListener( 'impress:console:open', function() {\n    // Bind console window to the main window\n    // Somehow does not work always. 'impress:console:open' event seems not to be fired always.\n    window.consoleWindow = window.impressConsole = impressConsole().open();\n  });\n};\n\n// This initializes consoleMediatools automatically when initializing impress itself\ndocument.addEventListener( 'impress:init', function( event ) {\n  consoleMediatools();\n});\n\n})(document, window);\n```\nI struggled a bit with the difference of \"playing\" and \"play\" events of media, somehow the seem to be fired in different order, which makes catching and synchronizing them a bit tricky. This resulted in not restarting playback directly after a pause event. After clicking twice it worked again. Also seeking in between did restore the expected behaviour. Sadly, I was not able to dig deeper in. Didn\u2019t completely understand the underlying reasons for this strange behaviour.\nWith a one way sync (console -> presentation) everything works fine, so I commented out the line that enables bi-directional control.. I\u2019m currently working on making this a real plugin which meets the requirements defined in src/plugins/README.md.\nThis will take a little time as I\u2019m quite busy at the moment \u2026\nI\u2019ll create a pull request, when I\u2019m ready.. I created a PR for a simple media plugin. See #672.\nIt covers the following features:\n- Autoplay and autopause on impress:stepenter and impress:stepleave\n- Add a css class to the body tag when playing media (e.g. for darkening the background)\n- Add some useful shorthands for inserting media (useful when making extensively use of html5 video and audio because it saves much typing). \n  One could of course argue if this should even be a feature of impress.js or if this should be covered by some other (external) scripts (e.g. markdown integration).\nStill working on turning the playback sync script into a real plugin (above code did it\u2019s job, though).\nI did not completely understand what you meant with the media controls integrate with the toolbar plugin. My solution was a more general approach. Just control the media with the help of normal html5 controls, catch the video/audio events in one window and propagate them to the corresponding nodes of the other window (console -> presentation and presentation -> console).\nThis should work independently of any other plugin (except impressConsole, of course) with an arbitrary number of media on each step and even If you\u2019re using an external javascript library like e.g. video-js or plyr.\nI could not imagine a use case where separate buttons on the toolbar should have any advantage, except for having invisible audio. Hiding media in the presentation view but not in the console window could be achieved with css, though, couldn\u2019t it?. You\u2019re right. Muting one source is of course important. I did this in consoleMediatools.syncMedia(). I choose to mute the output of the presentation view, because that way it is easier to control the volume level within the speaker console with the regular controls. If you do it the other way round the volume slider behaves a little jerky, because most browsers and \"html5-javascript-players\" set it to zero automatically to indicate the the sound is completely muted.\nOne could of course show a place holder image, but I like to be able to see the video playback. This of course increases CPU load significantly. Theoretically the output could get out of sync after a while (e.g. due to network issues), but if you want to show a long HD video, you should maybe not use impress.js for that at all.\nBeing able to play sound during transitions sounds like a good idea. Personally I would not use that feature (not my taste), but if someone likes to catch the audience\u2019s attention that way, why not. I find too much sound distracting from the real content.\nOne could of course say the same about some transitions or 3D positioning, but It is not impress.js\u2019 aim to force people into creating what we think is a good presentation. (That is a job for LaTeX ;-))\nWhat do we need a separate mute button or volume slider for? If you want to play external sound during the presentation why not include it in the presentation? Or do you speak of showing a video and playing audio of a different source simultaneously. Why not combining the two with the help of ffmpeg or something like that?. I just realized, that we have not talked about relative angles, yet. The orientation of slides, maybe does matter as well.\nThere is a difference between arranging the slides at a circle, for example and make their bottoms point towards the circle as well. If you do not want to calculate the angles by hand this would require some data-rel-rotate attributes.. I already noted that failing checks, but all complaints were about code styling errors, so I did not remove them.\nBTW I  find that code style a quite strange, and my own linter complains about that style heavily ... Maybe it\u2019s just a matter of taste or habit.. Yes, I think so.. Sorry, ran into merge problems, closing for now and creating a new PR.. No problem. I already guessed that you got sick \u2026 Get well soon.. Alright, I will have a look at it. At the moment I\u2019m very busy with my \"real\" work, so it could take a while. Sorry for not responding in the meanwhile.. What exactly is the difference between a pre-stepleave plugin and binding it to impress:stepleave? I was already wondering, why there is no pre-stepenter plugin.. I very seldom use automatically starting media, so I am not the right person to decide which way is the most convenient for the user.\nMy most often use case is that:\n- Enter a step\n- Talk about something on the step\n- Start media manually\n- Sometimes talk a little bit more\n- Leave the step, pausing or stopping all media\nI think, it is very seldom that someone leaves a step but wants media to play along. Thus it should not be the default value to let it play, when it was started manually.\n\nIf user re-enters the step, it should start media from the beginning. In other words, the stepleave action is to stop the media, not pause.\n\nAre you sure? Maybe someone (including me) likes to proceed at the very same point with the playback. This is made impossible by stopping media instead of pausing it. Aside from that there is no official .stop() method for html5 media as far as I know, we would have to pause it anyhow and set the current position to 0.\nI would vote for:\n- data-media-autoplay: default false\n- data-media-autopause: default true\n- data-media-autostop: default true if autopause is true and autoplay is true otherwise false\nWe would have to define which of the two attributes autopause and autostop takes precedence over the other if opposing values were set. \ndata-media-autoplay=\"true\" data-media-autopause=\"true\" data-media-autostop=\"false\" would result in pausing media on stepleave and resuming on re-enter, according to my description above.\nBut what do we do on data-media-autoplay=\"false\"  data-media-autopause=\"true\" data-media-autostop=\"true\"? Do later values overwrite earlier defined ones?\nOf course one could also think of a different solution:\n- data-media-autoplay: default false\n- data-media-autostop: default copy from autoplay\n- data-media-autopause: default true if autoplay is false and autostop is false otherwise false\nRegardless of how it is done, it should be heavily documented, because it is complicated to understand if we make a difference between stopping and pausing, and which values must be set to get the desired behaviour.. What about the defined IDs? (see enhanceMediaNode()) Should they be removed as well? How do I record which IDs were added and distinguish them from already existent IDs? Of course one could use a naming convention, but what if some user sets an ID that matches that convention accidently? It would be removed as well.. Just realized that there would be no way to stop/pause a manually started media without returning to the containing step. I think this is highly inconvenient for users so should never be the default but require an explicit setting by the user.. Sure, but afaik it is common, to skip the true value of boolean values so that\n<video data-media-autoplay> would be equivalent to <video data-media-autoplay=\"true\"> just as it is common to type <video controls> instead of <video controls=\"true\">\nThus we would need \njavascript\nif (play === \"\" || play === \"true\")\nThis is compatible to impressConsole and html conventions.. I would only add classes for media on the current step.\nMultiple media of the same step being playing or paused at the same time is indeed an issue. Potentially causing head ache for users \u2026\nbody.impress-media-playing, body.impress-media-paused, body.impress-media-id-[ID]-playing and body.impress-media-id-[ID]-paused could be a solution to target specific media. But the body tag is already quite cluttered with class names, so is it really necessary, to add some more? . I use Brackets for JS-Development and impress.js with extras contains very many files (over 30,000). Indexing them all slows down Brackets very much, so I hide the extras directory from Bracktes with the help this file, where I set some exclude dirs. \nOf course we do not need it for impress.js, so I added it to .gitignore, to prevent git from pushing it to github.. Understood :-). Adding a new helper function into src/lib/gc.js is maybe an idea for a later enhancement of the lib. For the moment your suggestion is enough, to work, thank you.. I like a *paused class because I darken the background or fade out other elements when playing videos, but I don\u2019t want them to fade in, when I pause a video for a moment to give some extra explanation. This would not be possible, if there is no class for that. Of course it is up to the user to revert to original styling, when one does not make use of that possibility.\nVideo and audio are already separated, because maybe one does not want to darken the background when playing audio, but only when playing video (seems logical to me).. But if you have both *playing and *paused classes and multiple videos or audios at one step it can have the strange effect, that both classes are present at the same time.\nOf course one could remove that other class first (this is the current implementation), but this is maybe not very intuitive behaviour, because in fact you have both states at the same time.. Okay, you are right with non-surprising default values. But then I would like to have that attributes at the root element and individual steps as well, so that the user is able to overwrite this default behaviour without being forced to add these attributes to each single media.. Good suggestion, thank you.. Your comment confuses me. Are custom properties I add to a DOM object automatically transferred into HTML attributes?\nel.dataset.mediaAutoplay refers to the user defined HTML attributes\nel.mediaAutoplay refers to my defined properties.\nThis should be comparable to the way the rel plugin works, isn\u2019t it? Or am I missing anything important here?. Sorry, forgot to remove the comment. Seems to be an artifact of the development process.. See my above comment to lines 100 to 103. (BTW is there any way in github markdown to refer to some comment in a way that turns into a link?)\nImplementing a function to get this value at runtime is indeed a solution. My thought was that caching them as properties of an object would maybe speed up the move to the next step. Doing the same work over and over again (for maybe a lot of audio objects at one single step) should be slower than calculating it once.\nOf course this would make a dynamic change of those attributes at runtime easier, but I don\u2019t consider this a common scenario.. I never had the idea of referring to a later defined step with some kind of data-rel-to attribute. Such an implementation would create the possibility of defining circular and/or offending dependencies that are impossible to resolve such as \nhtml\n<div id=\"one\" class=\"step\" data-rel-x=\"1000\" data-rel-y=\"1000\" data-rel-to=\"three\"></div>\n<div id=\"two\" class=\"step\" data-rel-x=\"1000\" data-rel-y=\"1000\" data-rel-to=\"one\"></div>\n<div id=\"three\" class=\"step\" data-rel-x=\"1000\" data-rel-y=\"1000\" data-rel-to=\"two\"></div>\nor even simpler\nhtml\n<div id=\"one\" class=\"step\" data-rel-x=\"1000\" data-rel-y=\"1000\" data-rel-to=\"one\"></div>\nIf someone really needs to refer to a step that is shown later, that can easily be achieved with the help of the goto plugin. A hint/example in the documentation would be a help for users.\nI would strongly vote to forbid any way of referencing later defined steps. Even if one can detect such circles it makes the code much more complicated as well as much more slower.. Why do you use rho and phi for polar coordinates? As rho is a greek letter it is associated most likely with an angle not a length. I think most rho and phi are common for spherical coordinates, as you have one more dimension. \nI would suggest -distance and -phi for polar coordinates and -distance, -rho and -phi or -primary-angle and -secondary-angle for spherical coordinates.\nHave a look at https://en.wikipedia.org/wiki/Spherical_coordinate_system and https://en.wikipedia.org/wiki/Spherical_coordinate_system.\n. What if no data-rel-ref attribute is given, but data-rel-rho and data-rel-phi attributes are present?\nDoesn't that mean, that the coordinates are meant relative to the previous step? In such a way the would kind of \"add up\", if multiple steps are defined that way, at least I would expect that.\nOr do you mean, they are not added to maybe also existing cartesian values at the same step? \nI didn't find any reference to data-rel-ref in polar.js so I was not able to comprehend your thoughts.\nAlso note, that the names of your attributes conflict with the original rel plugin. If both plugins are built into js/impress.js that could (maybe will) cause conflicts. Did not test, yet.. @henrikingo If you are reworking the rel plugin, what about adding a data-rel-rotate attribute to make steps rotate stepwise? That way one could easily make steps e.g. point towards the center of a circle without calculating all those angles by hand.. I am not sure about this. That would mute media at the console view even when it is not played automatically. \nI don\u2019t think we should mute every media inside console view even when it maybe is not started. Chances are high, that somebody has an audio on a step and starts them inside the console. Then can not be heard at all, because it is (surprisingly) muted. Audio has not necessarily be played on both screens (or even the main) in contradiction to video that should always be played on both screens, at least inside the presentation view.\nI think this should only be done by an additional plugin that handles events between main and console view (we already talked about that). I already had a script working for bi-directional synchronization of media, even avoiding circular propagation from one window to the other, but thought it best to implement this as separate plugin as it assumes the existence of the impressConsole plugin and their corresponding windows. (I am not sure if the current design of the console, especially the relation between main and slave window is a good one, either. What about interchanging their roles as in most cases users would expect the presentation view to respond to their actions inside the console window but not the other way round, even if this could sometimes be handy. But maybe we should discuss this separately.)\nIt would be good to have some kind of general plugin for that kind of synchronization, not only for media but  also for forms, hover/highlight/pointer events and so on, but I did not have an idea how to accomplish that without catching every single event by hand, filtering unwanted ones and propagating the interesting ones to the other window.\nI would let it be the way it is at the moment.. Maybe one could implement this console detection more generally in lib because it could be handy for some other plugins.\nIn this case the function should not trigger any actions.. Then we would need a special \"keyword\" that indicates that a step should be located relative to the previous step or we would loose the functionality that a step can be positioned relative to its predecessor without explicitly defining a reference, wouldn't we?. Sorry, forgot to copy from old commit. Added in 227163e.. What about treating them as relative, when data-rel-to is present or if the *-rel-* versions are used. This rule could be applied to the rel plugin, too. Of course this would need a different approach of setting positioning data as it changes the meaning of data-x, data-y and data-z depending on the existence (and validity) of other attributes.\nI was already thinking of a completely new positioning system \u00e0 la tikz/pgf (a latex package for creating graphs and other vector based pictures). There is only one positioning attribute that follows a simple parsed micro syntax.\n\n(x,y) or (x,y,z) absolute cartesian values\n(angle:distance) or (angle:angle:distance) polar and spherical coordinates\n+(x,y) or +(x,y,z) or +(angle:distance) relative cartesian or polar values\n(ref) reference to another position (here: step)\nevaluated expressions, e.g. ...\n(x1,y1,z1)+(x2,y2,z2) addition of two coordinates\n(x,y,z)+(angle:angle:distance) combined cartesian and polar coordinates\n(ref)+(x,y,z) adding a value to a reference position, similar to data-rel-to\n(ref1)!0.5!(ref2) in the middle between two reference positions\n(ref1)!0.2!(ref2) as above but closer to ref1\n(ref1)!1.5!(ref2) along the vector from ref1 to ref2, 1.5 times away the distance from ref1 to ref2\n\n\nthis could be extended not only to use pixel lengths but arbitrary css units. Conversion between them and mixing them is of course a complicated story ...\n\nI think this is far beyond the scope of this PR but I use tikz/pgf quite often and I like its flexible coordinate system (many more possibilities than I showed here) very much.\n    . Oh, I forgot to say: I could live with your assumption of common use cases :-). ",
    "Danacus": "+1. ",
    "najamelan": "I have looked at the 2d example and it does indeed work as intended here. That's cool, thanks. \nOne thing that I hadn't noticed before was the next and previous buttons at the bottom of the presentation screen, which indeed correctly synchronize all views. I understand the usefulness of being able to have a quick peek at upcoming slides without changing the main screen by using the controls within the views, but I suppose with all the other stuff going wrong I was to confused to see the buttons on the bottom.\nThe javascript error appears just alone, but it is a sometimes bug, so I haven't yet figured out what triggers it. I suppose I had some bad luck when I just tried it out. \nAbout the allow popup, I know that is normal behaviour of the browser, what was just problematic is when that happens, on the main view there is the gray box that says \"Click here to open the presentation view\" which is impossible to remove, needing to reload the browser window. Since the presentation view should change the main view I just assumed it was better to start over, thinking that reloading the main view might break the connection between the two tabs, but I haven't even tested if that is actually the case.\nI will have a look at the other example's code in order to make my own presentation so that it works, thanks for responding.   . Have you seen this message or would you like me to take a screenshot to show it? I could surely also have a quick look to the code to see where it's coming from.. The string I see exactly is: \"Click to open speaker console\". It comes from here but is also in the file impressConsole.js. It is being used in this place. Basically the bug is here. The onclick  property is being added inside the style element, so needless to say it doesn't do anything when you click the button.. Cool! I love how fluid it is to contribute to open source projects thanks to github.. ",
    "Fandekasp": "Strangely enough, I'm now forced to call the root div id \"impress\", and move all components to my bare index.html [see diff in this commit].\nthis is annoying, because I like having all my code in js files, and have it build by webpack.. No idea why this doesn't work anymore on v1.0.0. ",
    "lwhshugyosha": "Hi, both,\njust stumbling upon this discussion. Some weeks ago I already created a plugin playing media for my own use and was now checking how to release it to the general public.\nI'll better dig through this first and then come back.. That's about what I was doing, because I need it for a presentation in the near future.\nAdditionally, the plugin has a volume setting to level out media from different sources, and the ability to play a sound during the transition from the previous step.\nIt can play the video inside the console as well, if so desired, but without sound to avoid echoes, or show a placeholder image instead.\nAdding a css class while playing looks like a good idea.\nUnfortunately, I wasn't successful with the PR so far.... Well, it works a bit different. Sound control is just another attribute for the media tag (e.g. data-volume=\"0.5\"), so that if You play several samples during Your presentation, You can pre-adjust them to a common sound level.\nNo control buttons or such.\nI'd prefer to play the sound from the main screen, because that is what the audience sees and should hear as well - in case the two playbacks get out of sync.\nFor my current tasks I dont't use the HTML5 playback controls at all.\nBut why haggle? In the final version we can add atrributes for every variant ;-). OK, when the time is ready for something... ;-)\nPlanar polar coordinates (absolute and relative) work already fine with my own plugin. It even supports relativity to any previous step (#670).\nWhere do You want it uploaded?\n. OK, no problem. I encountered some problems when limiting the plugin to the polar part, as the rel plugin already took away some prerequisites by adding absolute locations. Therefore I just wanted to make it clear that only one of them should be used. Currently, weight would probably not work.. OK, I'll look through them (which might affect the presentation I'm working on). For what I needed (and wrote the plugin for) changing z was not required, so I kept the existing settings. The referenced steps and their children are always in the x/y-plane.\nRotation is not affected, so it can be done as You suggest. I didn't think about that. Might be an idea for the presentation...\nAs mentioned in the issue, I was just offering what I had already done, which is not meant to be the complete solution.\nBut anyway, does that really make sense? How would spherically arranged slides be orientated? It might cause spacial disorientation in the beholder ;-). DRY.... At least not always. Sometimes You might want to comment on certain frames in the video, so instead of turning away from the audience You better watch it in the console.. I was happy to have at least this work ;-). Unfortunately, it can only be set from Javascript. The only HTML setting is muted, which does not work if the video is shown in the console as well (at least in FF58). Putting it into the plugin, You could introduce a e.g. common volume of 0.6, except where stated otherwise (I was thinking of that, as I have only one very silent video in my presentation). OK, in this case it might be useful to have an (optional) data-polar-normal flag or something like that, which will automatically rotate the slide to be normal to the direction of (dis)placement.\nAlternatively it should at least map the following data-rotate directions accordingly (so that z is in the direction of  the radius and x always parallel to the former x-z-plane). \nHave to poke old Euclid into action for that.... As these strings are used outside of the JS as well, I like to place them somewhere easy to find and not spread all over the code. I'll check about standards, though.. OK, works fine now. Still other things to fix.... Making polar coordinates always relative to something (either 0 or a certain frame) looks like a good idea. It might even eliminate the interference with the rel plugin.\nMy plugin still includes some organic growth, maybe it's time for the clippers.... I tried around some to separate the two, however, if polar coordinates reference other frames, their positions have to be calculated first. If these are relative to a frame defined polar, that has to be known already. So there is no simple sequence - the two plugins would have a circular dependency.. That might work, but adds a dependency not only for the existence, but also for the sequence of plugins. On the other hand, it avoids duplicate code.\nHowever, if someone changes the rel plugin, this could break the polar plugin as well.\nSo KISS beats DRY ;-)\nFor consistency (having absolute coordinates - either polar or cartesian - count from the origin and relative coordinates either from a given reference or incremental) I'm back to my original version with some changes and another angle for spherical coordinates. \nI'll test that and upload it soon for review.. Well, that would definitely be too late for my current presentation, so for now I have to stick to what I have...\nBut I'll be glad to help.. Just an idea: If the loop over all steps would be running in the main program, calling the positioning plugins for each step, that one would be finally positioned before the next step is called, thus avoiding the problem of transient positions used as references.\nBut that would probably mix up the whole plugin structure.. I agree. It would never work properly.\nI have reworked the plugin to support several separate positioning substeps (absolute, relative, polar etc.), which might be used for a new, stepwise plugin approach. Please have a look at pull request #678.\nNot really simple, but works fine for me.. Forces of habit. I learned to use rho, phi and theta forty years ago and still do ;-). Sorry, Must be data-pos-ref. This is only used for 'absolute' coordinates. \nRelative coordinates are always from the last step and are inherited and add up until some other positioning is defined. This is the same as I understand the original rel plugin is supposed to work.\nAnd yes, it does the same as the rel plugin, as all positioning must be done for every step at the same time - otherwise no reference would work if a later plugin relocates the referred step. Therefore it's either the rel plugin or this one.\n. BTW: x, y and z are also not 'quite' standard, here they are left-handed to comply with screen definitions.... ",
    "stritti": "My 50 Cents:\nI would prefer option 2, but would add an directory 'dist' (for distribution) containing the referable impress.js (and probably minified version impress.min.js).\nMost libs I am using are following somehow this option.. Could help: \n GitHub Releases: https://docs.travis-ci.com/user/deployment/releases/\n NPM Releases: https://docs.travis-ci.com/user/deployment/npm/\nBTW: I generate the github pages by travis: https://github.com/stritti/girlsday-einfuehrung-informatik/blob/master/.travis.yml. Today I saw, you are not Using Travis, but CircleCI and found this Gist: \nhttps://gist.github.com/benjamincharity/dfd8d58ee08eb0bb42a2551144c0a21e. Thanks @henrikingo. Currently I added a hyperlink to click as mentioned. But I will have a look in the events because I would prefer a \"mousless\" navigation :) Thanks for your hints. I've used following snipped (works for me):\n```\n/\n * Module to load next impress file if attribute \"data-next-impress\" is defined.\n e.g.: ...\n/\n/ global document, navigator /\n(function (document) {\n    \"use strict\";\ndocument.addEventListener(\"impress:stepenter\", function (event) {\n\n    var nextImpress = event.srcElement.dataset.nextImpress;\n    console.log(event);\n    if ( nextImpress !== undefined ) {\n        console.log(\"Load next impress file: \" + nextImpress);\n        document.addEventListener( \"impress:stepleave\", function() {\n            window.location = nextImpress;\n      }, false );\n    }\n});\n\n})(document);\n```\nBTW: if someone is interested in working version: https://github.com/stritti/girlsday-einfuehrung-informatik. ",
    "tonystar": "\nAlso I have seen on some of my devices that the steps zoom to something really big during a swipe. Once the transition completes, the end result is correctly sized though. Is this the symptom you're reporting too?\n\nYes, I think this is what was meant by @ahainen. Same to me.. ",
    "paflov": "Seems like substep enter does not throw any Event. Would be useful though.. ",
    "srhuels": "Yes, that work fine. But i want to stop the autoplay bevore(!!!) the presentation goes to the next slide, where i can set autoplay=0!. sorry henrikingo,\nwhat should i explain additional?\nI want to present f.e. 4 points in a slide, tell somthing about this point etc.\nthis means, i want to tell also something about the last \"autoplayed\" point(substep), before the presentation switches to the next slide.\nBut if i define autoplay=3 the slide with my substeps switches to the next slide after 3 seconds.\nBut it should not switch to the next slide, before i want!!\nThe autoplay - Parameter \"0\" in the nextc slide works, but just after the next slide ist aktive. The autoplay should stop at the end of the slide with the substeps!\nYou know what i mean?. Can you please links a webside with explanation for using such code for JS newbies?\nI don't understand how to.... OK, i got it work!\nin the step ID with the substeps:\nstyle=\"opacity: 100\"\nbecause it should be visible during the next step.\nTo stop the data-autopla i use an invisible empty step:\n<div class=\"step\" style=\"opacity: 0\" data-rel-x=\"0\" data-rel-y=\"0\" data-autoplay=\"0\"></div>\ndata-rel... is set to zero for staying the empty step at the same place as the step bevore with my substeps.... ",
    "mevsme": "Close it, I didn't have CSS and it is just a fall back text. ",
    "maxwell-k": "OK good we both see the same thing - a logic bug.\nI will try to get the tests suite running somehow, thanks for the HOWTO doc. I normally use a Chromebook so I haven't run Firefox recently. I'll either run Firefox somehow or try and get https://github.com/impress/impress.js/pull/637 ready to merge.. ",
    "giflw": "Add autoplay pause on blackout and resume when removeBlackout\nAdd events to pause/resume autoplay\n- impress:autoplay:pause\n- impress:autoplay:resume\nCall those events from blackout\n. On firefox, after blackout, slides where partially rendered.. No problem. I'll do that as soon as I can.. @henrikingo Added PR #712 for fullscreen. @henrikingo Added PR #713 for pause/resume events on autoplay. @henrikingo Changes on blackout needs autoplay to be merged, as it is used to pause/resume autoplay when enter/exit blackout. @henrikingo Added PR #714 for full help screen on help plugin. @henrikingo Added PR #716 for blackout support for . key. @henrikingo Added PR #717 for navigation (o toogle overview). @henrikingo Done renaming resume to play on autoplay plugin. I was testing with my remote control. It uses a toogle button: send F5 to start (so fullscreen) and ESC to end (exit fullscreen). The remote itself send 2 different keycodes for the same button. That's why I choose to implement it in this way.. Maybe we could think in a dynamic helper step?. Resolved on 6619fdc. I think this option is useful to show on help. It's easy to forget about that. I think should have an help option that shows all help. It would be easy to track the features and know what its available during the presentation.. A full help is useful when publishing the presentation, as the visitors can see the options available even when they don't know impress.js. A full help is useful when publishing the presentation, as the visitors can see the options available even when they don't know impress.js. I've added a conditional to taht navigation option, and used impress-overview as the ID. The shorcut key is interesting. I'll try to add it.. Is there a way to get the full area of the canvas, to make overview dynamic?. Done =). Blackout help removed. Fullscreen help removed. While we don't have a more generic implementation, I think this overview could work. done =D. Done changing to only one event listener. F5 indeed enter and exit full screen, as you requested earlier. It makes the behavior more intuitive when using keyboard, but allows the use of remote controller. I think it's more intuitive to use F5 in presentations to enter fullscreen. I catch myself trying that some times. Besides that, remote controllers works as keyboards and send F5 key to enter fullscreen. This way impress.js becomes more friendly to power point and other common users that have remote controls.\nRegarding browser reload, CTRL+R it's another common way to reload, an this is not changed by impress.js.. ",
    "abertranb": "Reviewing the error Safari and Chrome crashes processing \nhttps://github.com/impress/impress.js/blob/master/js/impress.js#L548\nThanks!. Yes @henrikingo is the same error, thanks for your reply. . ",
    "Elisenda84": "Hello @henrikingo , thanks so much for your reply, your proposal really improved the situation. Now I am able to see the presentation without being kicked out from it. I have some other problems though, as at some points it blinks and there's one slide where it gets stucked, but I am able to debug now. Thanks so much! . ",
    "eisenheim94": "P.S. I think, that it is thinking that steps are not in viewport and not drawing them. Also I can provide source code (html, css, js). ",
    "mdre": "Hi!.\nI find handy the use of a separate CSS class so I can add a different timer/effect to the images. Just a second after the subsptep is shown, but any alternative will be useful. \nofftopic: Yesterday I was able to successfully use my first presentation made with impress.js! \n. I'm not sure I can share it online because of the licenses of the images, but I uploaded to Dropbox. Download it from presentation.\nIncludes a modified version of the impress.js with the patch to substep's links. ",
    "mohe2015": "This has multiple issues - I tested with a \"too new\" nodejs version, .... Yes. @henrikingo . ping @henrikingo. I'm sorry if you didn't have time, just want to make clear you didn't forget it.. can you show us the relevant code part?. ",
    "fbairn": "Creates a new CSS class called entering.\n. ",
    "mn22nw": "Thanks! I've changed it now. :)\nOn Thursday, January 14, 2016, Jacek Kopeck\u00fd notifications@github.com\nwrote:\n\nIn js/impress.js\nhttps://github.com/impress/impress.js/pull/509#discussion_r49751950:\n\n@@ -716,12 +716,19 @@\n                     case 40: // down\n                              api.next();\n                              break;\n-                    case 36: // character o\n-                    case 79: // home\n-                            var overview = document.getElementById(\"overview\");\n-                            if (overview) {\n-                                api.goto(overview);\n-                            }\n-                            break;\n\nthe above could just be api.goto(\"overview\") which will do nothing if\nsuch an element is not found.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/impress/impress.js/pull/509/files#r49751950.\n. \n",
    "ak420": "Get \n. (Share\n. ",
    "lguzzon": "Ok:\n- Line 2 tells jslint that karma.conf.js is a \"node.js\" file so \"linting\" this file goes right \n- Line 4 set the right path to the chrome binary (puppeteer module bundle the chrome binary). ",
    "bcarter": "Added the new sentence. ",
    "14725": "In fact, I know nothing about it.\nWell, I changed some code in my copy to make it works on old browsers. (etg. for of -> for in) I test it on Via (an browser using Android's WebView, for old phones) on Android 4.4, but I can't swipe. \nIt is said that it will auto 'touchcancel' after 'touchstart' with scrolling.So I add this. \n( https://m.2cto.com/kf/201411/348858.html ).... Maybe new browsers needn't event.preventDefault(); I haven't tested yet.. "
}