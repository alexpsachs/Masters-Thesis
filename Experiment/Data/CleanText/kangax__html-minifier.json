{
    "kangax": "Thanks for suggestions! From what I can see, img element has EMPTY content model, so can not have end tag. Ditto for source element (although as of now, I've really only targeted HTML 4.01). Removing </li>, </dt> and </dd> is theoretically safe, but I see that some browsers engage in some weird error-correction. For example, invalid markup like this \u2014 <ul><li>foo</li>x<li>bar</li>x</ul> \u2014 renders in FF3.6 as a list of 2 elements with \"x\" char following each item on a new line (making a list of 4 rows). If we were to remove </li> tags, the list would consist of 2 rows only, with \"x\" character appended right after \"foo\" and right after \"bar\". On the other hand, tolerating such invalid markup is probably not a good idea in the first place.\n. I've added remaining optional tags from @mathiasbynens list, except </p> and </li> to play it safe for now (no time to test edge/complex cases with unclosed <p> / <li>, but I'm all ears if anyone finds something)\n. Ah, good call! :) I'll try to tackle it some time soon.\n. I would want an extra flag, yes. Thank you!\n. This is now implemented!\n. Only took us 4.5 years but this is now done :) thanks to @duncanbeevers \n. Do you mean computing gzip savings? Which order results in better compression?\n. > We can try simplistic approaches like alphabetizing attributes\nYeah, I imagine after gzip it's probably mostly insignificant, since afaik gzip already does some sort of optimal reordering?\n\nFor example, determining that div tag's most-common attribute is class while span tag's most-common attribute it id, resulting in better encoding of <div class= and <span id= sequences.\n\nYep. Sounds reasonable.\n. Sounds about right :)\n. Currently, you can set collapseWhitespace to false and so:\nhtml\n<strong>asdf</strong>   asdf\nwould stay as:\nhtml\n<strong>asdf</strong>   asdf\nwhile, with collapseWhitespace set to true, it'd become:\nhtml\n<strong>asdf</strong>asdf\nThe feature in this issue would give more granularity.\n. Of course. That's why <pre> foo bar </pre> stays as <pre> foo bar </pre> even with collapseWhitespace set to true :) Also see https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js#L244-L246 and https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js#L37-L62\n. Actually, we already do leave one space around, even with collapseWhitespace=true\nhtml\n<strong>asdf</strong>   asdf\nbecomes:\nhtml\n<strong>asdf</strong> asdf\n. @mattaningram can you give an example of what you'd like always-leave-one-whitespace behavior to be? What would these minify to?\nhtml\n<b>foo</b>\n<b>   foo</b>\n<b>foo</b>bar\n<b>foo</b>   bar\n<b> </b>\n. @Phoenixheart can you paste your markup for that example?\n. @stevenvachon the only difference is in <b> </b> then (right now minifier produces <b></b>; no space inside).\n. So... since <strong>asdf</strong>   asdf already collapses to <strong>asdf</strong> asdf (note the space) what other issues are left here?\n. @stevenvachon This one:\nhtml\n<b>foo</b>\n<b>bar</b>\nalready produces:\nhtml\n<b>foo</b> <b>bar</b>\nbut:\nhtml\n<b>foo\n</b>\nbecomes:\nhtml\n<b>foo</b>\nSo together with @Phoenixheart's example, there's 2 problems:\nhtml\n<b>foo\n</b>\nand\nhtml\n<input>\ntest\n. Fixed in https://github.com/kangax/html-minifier/commit/e9ab0794e7fd31f8f10f15f5346395c5e0affdf8\n. duplicate of #1\n. Haven't had a chance to look into this yet. Patch is, as always, welcome.\n. I don't remember exactly, but I think I wanted to clean up cases like this:\nhtml\n<p foo=\" \"></p>\n<p foo=\"\"></p>\n<p foo></p>\nAs of now, I'm inclined to just close this until we get some real, valid use cases.\nSounds reasonable?\n. @mhulse Ignore option is definitely a good idea. It would make sense to be able to define multiple chunks to ignore. For example, \"<%= ... %>\" and \"<% ... %>\", or \"<?php ... ?>\" or \"<?xml ... ?>\". But how to make it so that it ignores anything in between? Perhaps a regex.\n. Hey @mhulse sorry for late reply! (lots of work)\nI'm just not understanding one thing \u2014 why do we care about removed whitespace?\nIf this:\n<% if foo? %>\n  <div class=\"bar\">\n    ...\n  </div>\n<% end %>\nbecomes this:\n<% if foo? %><div class=\"bar\">...</div><% end %>\n..then we're good to go.\nAs far as I understand, it's exactly what we want. Or am I missing something?\n. @mhulse Yep, that last example looks good.\n. @mhulse As far as Question #1, from cursory examination it appears to look good. As far as Question #2, I think it's best we address the whitespace issue (as in your example) later, once directive parsing is implemented, and once we have any additional requests for it.\n. My thinking was to experiment with them on a client only (since we have a web interface). But I think this whole thing is largely moot at this point \u2014 I doubt anyone uses web interface and if Node doesn't support them, I wouldn't bother. We're better off spending time on integrating a modern HTML5 parser which would improve perf, reliability, maintenance everywhere.\n. Fixed in https://github.com/kangax/html-minifier/commit/d9b302d115b696d3bab39b336c7e3e5d31470bc2\n. We now have unit tests for it\n. This works as expected. Added test.\n. New URL: https://github.com/pornel/PHPTAL/blob/f99651e6e6122cef8405d99b38523461b8cb5f24/tests/CompressTest.php\n. Fixed in https://github.com/kangax/html-minifier/commit/f3fc9d188d31493cb828f521e617e415f673b68c\n. It actually removes HTML comments from scripts. See, for example, corresponding tests:\n```\ntest('remove comments from scripts', function(){\n  input = '<!--alert(1)-->&lt;\\/script&gt;';\n  output = '<script>&lt;\\/script&gt;';\n  equals(minify(input, { removeCommentsFromCDATA: true }), output);</p>\n<p>input = '<script>&lt;!--alert(1)&lt;\\/script&gt;';\n  output = '<script>&lt;\\/script&gt;';\n  equals(minify(input, { removeCommentsFromCDATA: true }), output);</p>\n<p>input = '<script type=\"text/javascript\"> <!--\\nalert(\"-->\"); --&gt;\\n\\n   &lt;\\/script&gt;';\n  output = '<script type=\"text/javascript\">alert(\"--&gt;\");&lt;\\/script&gt;';\n  equals(minify(input, { removeCommentsFromCDATA: true }), output);</p>\n<p>input = '<script> //   <!--   \\n  alert(1)   //  --> &lt;\\/script&gt;';\n  output = '<script>  alert(1)&lt;\\/script&gt;';\n  equals(minify(input, { removeCommentsFromCDATA: true }), output);\n});\n<code>``\n. The reason I didn't work on removing JS comments from inline script elements is because I wanted them to be removed by another app \u2014 as part of minification process (using yui compressor, google closure compiler, etc.)\n. Block elements inside</code><a><code>are valid in HTML5, afaik, but not in HTML4.01. And parser follows HTML4.01 behavior, which is why</code><a>div&gt;</div></a><code>is invalid and breaks.\n. This now works. Added corresponding test.\n. Remove line breaks where exactly? They are already removed in places where they are insignificant. For example,</code><p>\\nfoo</p><code>is minified to</code><p>foo</p><code>and</code><p class=\"\\n\\nfoo \\nbar\"><code>is minified to</code><p class=\"foo bar\">`\n. Excellent! Thank you. Merged.\n. Thanks Hugo! I've been meaning to do this for a while, but could never find time :)</p>\n<p>The only thing... shouldn't htmlparser.js be added as a dependency for htmlminifier.js?\n. Ah, yes, makes sense. Merged. Thanks again.\n. Would need a fresh pull request here. Can't merge automatically anymore.\n. Thanks. Looks useful indeed. Would be great to have some unit tests for this too. I'm merging for now.\n. This is expected behavior. You need to disable \"collapse whitespace\" option to avoid this.\n. Thanks! Added couple of comments.\n. Thanks!\n. It can't be parsed because it's not valid html5\n. This doesn't seem to be valid HTML5 (as per http://html5.validator.nu/)\n. Interesting. Looks like textarea trips it up.\n. This seems to work now\n. This is now fixed\n. Thanks. This reminds me that we need to hook up our testsuite with travis...\n. Ok, just did this. What better way to spend lunch break!</p>\n<p>So <code>npm test</code> now runs all tests on node (all pass as of now), and I pushed new 0.5.0 version to npm.\n. Also added travis hook, but don't see any builds yet https://travis-ci.org/#!/kangax/html-minifier\n. Can you please update with latest?\n. Added test for this. It works\n. This is now fixed\n. This could possibly be integrated with https://github.com/svg/svgo\n. Duplicate of #76\n. This is invalid HTML so <a href=\"https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlparser.js\">parser</a> doesn't know how to handle it. Need to add support for custom directives to make this work. Perhaps API of some sort to register tag name. Feel free to experiment.\n. This is now fixed\n. This is invalid html. Span can not have block element like div in it.\n. No problem. Just watch out because browsers will do the same thing \u2014 automatically close span when encountering div inside. I ran into these issues in the past in some of the client code. Always hard to track and causes subtle but nasty issues.\n. @stephenplusplus Looks OK! I see you cleaned up some trailing spaces in parser. That's good. I must have touched that file a while ago, before my editor was configured to strip them automatically :)</p>\n<p>Introduction of flow elements makes sense. The only thing I wanted to do is have a way to adhere to HTML5 and HTML4 rules separately. So that folks who want to keep their documents under HTML4 rules could still do that.</p>\n<p>I also see that you added \":\" and \"-\" in startTag regex. I suppose that's a reasonable and innocent change. But shouldn't it also be added to endTag?\n. Probably would keep it optional for now. We can make it into one of the options (such as <code>collapseWhitespace</code>, <code>removeCommentsFromCDATA</code>, etc.)\n. @stephenplusplus I merged other pull requests that change parser to behave like HTML5 by default. I would still want to have this option, as in your implementation. Closing this pull request as it's already outdated. Please submit a new one when you have a chance! Thanks.\n. Fixed manually. Thanks!\n. I took a first stab at this and added support via <code>minifyJS</code> option (uses UglifyJS underneath) \u2014 https://github.com/kangax/html-minifier/commit/b1edfe3af74f9d9a1a8d35cdc75d8a9297d8a4b6</p>\n<p>Check it out and let me know how it's working.\n. @fxck Wait, html templates inside inline javascripts? What does that look like? Note that currently <em>all</em> script elements' contents are minified:</p>\n<p><code>&lt;script type=\"text/ng-template\"&gt;var foo = 1; var bar = 2&lt;/script&gt;</code></p>\n<p>becomes:</p>\n<p><code>&lt;script type=text/ng-template&gt;var foo=1,bar=2;&lt;/script&gt;</code>\n. As for CSS minification, what's the best tool (with Node support) to use at the moment?</p>\n<p>/cc @XhmikosR @mhulse\n. @mhulse Hmm... I ended up using <a href=\"https://github.com/css/csso\">CSSO</a> before I saw your comment. I've heard about it before and it's from BEM folks (also creators of SVGO which is quite excellent) so I trust it to be good. We can always switch to another engine in the future.</p>\n<p>On this note, I'm closing this ticket now that we have both <code>minifyCSS</code> and <code>minifyJS</code> options.\n. @XhmikosR ahha, I was looking for something like that. Thanks! It's good to see that CSSO is pretty much the next best thing after clean-css. Although frankly I can't see much difference between two. They seem to go more or less head-to-head, and clean-css wins by 1 test (and most of the difference is by few bytes). Any other reason for switch? One thing I didn't like about CSSO is that it creates few globals (at least in a browser build).\n. @XhmikosR I see... Well, I don't have much time at all right now to help with GoalSmashers/clean-css#260 :) but I'm open to switching to clean-css whenever browser build is ready!\n. Alright, I'll try tomorrow.</p>\n<p>On Tue, Mar 18, 2014 at 1:56 AM, XhmikosR notifications@github.com wrote:</p>\n<blockquote>\n<p>@kangax https://github.com/kangax: I tried node-browserify and created\nsuccessfully a standalone file. Can you try this standalone clean-css build?</p>\n<p>https://gist.github.com/XhmikosR/fe6db493bc06eb582101</p>\n<h2></h2>\n<p>Reply to this email directly or view it on GitHubhttps://github.com/kangax/html-minifier/issues/56#issuecomment-37901842\n.\n. @fxck thanks, I didn't understand what you meant by inline javascripts. I'm familiar with the concept and yep, we'll need a new issue for this.</p>\n</blockquote>\n<p>Sent from my iPhone</p>\n<blockquote>\n<p>On Mar 18, 2014, at 6:45, Ale\u0161 notifications@github.com wrote:</p>\n<p>Cool, I think we should perhaps make a new issue, since this one is a) about something else and b) it's already closed..</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. I've just added support for minifying JS in on* attributes (onclick, onmouseover, etc.) and minifying CSS in style attributes.</p>\n</blockquote>\n<p>Would be great if someone could test it out more.\n. Yeah well, the reason I didn't want to disable mangling is to ensure \u2014 via tests \u2014 that mangling works. Perhaps it's not that big of a deal.</p>\n<p>As far as options \u2014 no, haven't added yet. Please do if you have time.\n. Should be fixed in 0.5.2\n. Looks good, thanks!\n. Thanks @mathiasbynens. I have no time to tinker with this right now; will do when I get a chance. Pull request would be awesome, of course! :)\n. This is now <a href=\"https://github.com/kangax/html-minifier/commit/7f4f709da1b4a7747e9d1fe2a55035401cc24f79\">fixed</a>. Thanks @mhulse\n. autofocus, multiple, required, hidden, contenteditable, spellcheck. Any other ones? <a href=\"http://dev.w3.org/html5/markup/global-attributes.html\">Don't see anything else</a></p>\n<p>/cc @mathiasbynens\n. Thanks @mathiasbynens. So we're 19 attributes short now.</p>\n<p><code>[ ] allowfullscreen\n[ ] async\n[ ] autofocus\n[x] checked\n[x] compact\n[ ] contenteditable\n[x] declare\n[ ] default\n[x] defer\n[x] disabled\n[ ] formnovalidate\n[ ] hidden\n[ ] inert\n[x] ismap\n[ ] itemscope\n[x] multiple\n[ ] muted\n[x] nohref\n[x] noresize\n[x] noshade\n[ ] novalidate\n[x] nowrap\n[ ] open\n[x] readonly\n[ ] required\n[ ] reversed\n[ ] seamless\n[x] selected\n[ ] sortable\n[ ] spellcheck\n[ ] truespeed\n[ ] typemustmatch</code>\n. It could be an empty string (or empty attribute), according to <a href=\"http://dev.w3.org/html5/markup/global-attributes.html#common.attrs.contenteditable\">this</a>\n. Yeah, I'd like to revisit those separately; look into optimizations of\ncontenteditable-like attributes.</p>\n<p>On Wed, Jun 19, 2013 at 11:34 PM, Mathias Bynens\nnotifications@github.comwrote:</p>\n<blockquote>\n<p>So no optimizations for boolean-like attributes? Should there be a\nseparate issue for that?</p>\n<p>\u2014\nReply to this email directly or view it on GitHubhttps://github.com/kangax/html-minifier/issues/63#issuecomment-19716705\n.\n. @mckamey thanks! now we just need to find out which ones are not already in minifier's list.\n. Thanks, updated.</p>\n</blockquote>\n<p>On Sun, Mar 16, 2014 at 6:09 PM, Stephen McKamey\nnotifications@github.comwrote:</p>\n<blockquote>\n<p>If you prefer the list:</p>\n<p>[ ] allowfullscreen\n[ ] async\n[ ] autofocus\n[x] autoplay\n[ ] checked\n[ ] compact\n[x] controls\n[ ] declare\n[ ] default\n[x] defaultchecked\n[x] defaultmuted\n[x] defaultselected\n[ ] defer\n[ ] disabled\n[x] draggable\n[x] enabled\n[ ] formnovalidate\n[ ] hidden\n[x] indeterminate\n[ ] inert\n[ ] ismap\n[ ] itemscope\n[x] loop\n[ ] multiple\n[ ] muted\n[ ] nohref\n[ ] noresize\n[ ] noshade\n[ ] novalidate\n[ ] nowrap\n[ ] open\n[x] pauseonexit\n[ ] readonly\n[ ] required\n[ ] reversed\n[x] scoped\n[ ] seamless\n[ ] selected\n[ ] sortable\n[x] spellcheck\n[x] translate\n[ ] truespeed\n[ ] typemustmatch\n[x] visible</p>\n<h2></h2>\n<p>Reply to this email directly or view it on GitHubhttps://github.com/kangax/html-minifier/issues/63#issuecomment-37772914\n.\n. We already have this. See https://github.com/kangax/html-minifier/pull/67 for example\n. Please provide more info or a test case\n. It should work in latest version\n. Thanks! Can you please add unit tests for those?\n. @sndrs Are you building dist/*.js? Take a look at https://github.com/kangax/html-minifier/blob/gh-pages/package.json#L32\n. @sndrs Are you talking about <code>jshint ...</code> passing or <code>node test.js</code>?\n. Thanks for the tests and investigation, @sndrs!</p>\n</blockquote>\n<p>FWIW, we already store a <a href=\"https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlparser.js#L42\">list of inline elements in parser</a>. Should just expose it from there. It's based on HTML4.01, so might need an update.</p>\n<p>As far as img tag \u2014 why exactly do we need a check for it? Is it because it's an empty element? In that case, we could also utilize <a href=\"https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlparser.js#L36\">list of empty elements</a> from parser.\n. @sndrs Makes sense. I'll merge this pull request for now, and we can consider more complete support in the future.\n. Do you mean the regex on <a href=\"https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js#L66\">line 66</a>?</p>\n<p>I tried your regex:</p>\n<p><code>function isConditionalComment(text) {\n  return ((/\\[if[^\\]]+\\]/).test(text) || (/(?:&lt;!)?\\[(?:if[^\\]]+|endif)\\]/).test(text));\n}</code></p>\n<p>but it still fails. Didn't have a change to look more into it yet.\n. That's a reasonable idea. Marking as possible feature.\n. @mhulse What do you mean by a banner?\n. Ok, that's what I thought you meant by \"banner\" :)</p>\n<p>So yeah, the main use case for this is license; and yes, following <code>/*!</code> convention makes sense. I like it.</p>\n<p>I don't have time for this (and really don't know when I will have it) so if anyone is willing contribute, I'd happily pull this in.\n. @mhulse thanks!</p>\n<blockquote>\n<p>Is there anything I need to edit in the master branch?\nNope.</p>\n<p>I wasn't sure how to run the v8 test. I don't have v8 installed (though, I do have node.js installed). Can I homebrew install v8? I wasn't able to get the v8 JS test script to run using node command line. Anyway, Let me know if you want me to get that setup and tested before you pull (I should say, if you decide to pull) this PR into your gh-pages branch.</p>\n</blockquote>\n<p>Wait, why do you need v8? All the tests are running through node (just <code>npm test</code> after you built distribution)</p>\n<blockquote>\n<p>Is there anything I'm missing in terms of files to updated? I just manually copied JS from htmlminifier.js into all.js. I assume that's the normal workflow? :smile:</p>\n</blockquote>\n<p>all.js is just a concat of 3 files (parser, minifier, lint). I added instructions to README, for future!\n. @mhulse Cool. So I'll close pull request once you add unit tests for this new behavior, as I <a href=\"https://github.com/kangax/html-minifier/pull/79\">mentioned here</a>\n. Yep, this is now fixed. Thanks @mhulse!\n. thanks! fixed\n. Definitely need more info \u2014 an exact chunk of html that can't be parsed.\n. index.html should do it\n. works for me when i paste it to http://kangax.github.io/html-minifier/</p>\n<p>On Thu, Jul 4, 2013 at 12:22 AM, ampgcat notifications@github.com wrote:</p>\n<blockquote>\n<p>OK. Just sent it to your gmail account.</p>\n<p>\u2014\nReply to this email directly or view it on GitHubhttps://github.com/kangax/html-minifier/issues/74#issuecomment-20448763\n.\n. @ampgcat Is this still happening? I'm closing this for now; will reopen if still an issue\n. Hm, is this safe to do? For all document encodings/lack of encoding?\n. Then we can have it as a non-default option to see how it behaves in other cases\n. This is by design, since the parser was made HTML4-compliant. I'm marking this \"possible feature\" though.\n. @kotnik if we make it optional, and seeing how it's a commonly-requested option, I don't see why not :) PR is welcome!\n. This is somewhat related to https://github.com/kangax/html-minifier/issues/76\n. Duplicate of #76\n. Looks good. We just need some tests for this.\n. @mhulse That's pretty good. You can add more combinations, if you wish, but not necessary. Between these and existing tests, I think it covers new functionality pretty well.\n. @nikgraf Sure, I would <em>love</em> some help with this!\n. @nikgraf I created html-lint repo and just imported html-minifier in there (to have some kind of foundation and already existing lint files/test) \u2014 https://github.com/kangax/html-lint</p>\n</blockquote>\n<p>Please feel free to delete all the unnecessary stuff.\n. Sounds good to me!</p>\n<p>Sent from my iPhone</p>\n<blockquote>\n<p>On 15 Apr 2016, at 02:54, Alex Lam S.L. notifications@github.com wrote:</p>\n<p>@kangax I'm guessing we need a resync or recreate that repo?</p>\n<p>Current plan of action:</p>\n<p>clone html-minifier as html-lint \nrefactor html-lint to depend on html-minifier\nstrip HTMLLint from html-minifier\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\n. Added</p>\n</blockquote>\n<p>On Fri, Apr 15, 2016 at 3:09 AM, Alex Lam S.L. notifications@github.com\nwrote:</p>\n<blockquote>\n<p>May I get write permission to html-lint?</p>\n<p>\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/80#issuecomment-210320028\n. Thanks @mhulse, looks good! I haven't worked on minifier in ages, so I honestly don't remember that exact logic without delving into it now :) but your explanation makes sense. And thank god for unit tests; we can ensure no current functionality breaks!\n. Thanks @mhulse Don't worry about the version, I bumped it myself.</p>\n</blockquote>\n<p>Now we just need to figure out how to support custom syntax in ignored tags.\n. &gt; In other words, should the developer be allowed to pass in a regex/pattern to the code for ignoring tags of their choice?</p>\n<p>Yes, I think that would make sense.</p>\n<blockquote>\n<p>If so, should this custom regex/pattern override the existing \"ignore tags\" regex or should it get appended-to</p>\n</blockquote>\n<p>I think most definitely replaced. If I'm working with ruby, I don't care to do anything about \"&lt;?\", \"?&gt;\" strings. I would just want to say something like:</p>\n<p><code>ignoreStartTag: /&lt;\\%+/,\nignoreEndTag: /\\%&gt;/</code></p>\n<p>and only get those stripped.</p>\n<p>The default ones we introduced are just a convenience for 2 most popular languages, and/or until we introduce custom syntax registering.</p>\n<p>Does this sound reasonable?\n. This is not urgent by any means, I think, so definitely take your time. Thanks for all the help so far!\n. @mhulse I'm thinking something like this as the minifier API:</p>\n<p><code>minify(input, { ignoreStartTag: '...', ignoreEndTag: '...', ... });</code></p>\n<p>and then we'd pass those \"tags\" to parser (for use instead of <code>startIgnore</code> &amp; <code>endIgnore</code>). Right?\n. @mhulse awesome, thanks Micky!\n. &gt; If we're thinking purely in terms of small, iterative, \"improvements\" to the code, then I could finish what I'm working on and do a PR. From there, we could open a new issue and continue our talk on how to best handle template tags, like what @Luis-TP posted. How does that sound?</p>\n<p>I suppose that sounds good. I'm thinking that perhaps string-based tags could be a nice option for now. For example:</p>\n<p><code>ignoreStartTag: '&lt;%=',\nignoreEndTag: '%&gt;'</code></p>\n<p>or even something like:</p>\n<p><code>ignoreTags: [[ '&lt;%=', '%&gt;' ], ['&lt;%', '%&gt;']]</code></p>\n<p>or: </p>\n<p><code>ignoreTags: ['&lt;%=', '%&gt;', '&lt;%', '%&gt;']</code>\n. @broox doesn't hang for me. I get output like this:</p>\n<p><code>html\n&lt;div class=name&gt;{{name}}&lt;/div&gt;{{#address}} {{&gt;addressTemplate}} {{/address}} {{^address}} {{&gt;addressFormTemplate}} {{/address}}</code></p>\n<p>Try in http://kangax.github.io/html-minifier/\n. But main in package.json is already set to \"./dist/all.js\" which is a distribution file.\n. @pilwon But ./src/htmlminifier.js is just one of 3 required files for a complete version of minifier (there's also parser and linter)\n. &gt; I will recap the issue I repeatedly explained above for the last time.</p>\n<p>Sorry, but where did you <em>repeatedly</em> explain it? I only asked to clarify once, and you repeated your suggestion without explanation. I didn't understand why it's needed.</p>\n<blockquote>\n<p>Please feel free to close this issue if you are not interested in fixing the error.</p>\n</blockquote>\n<p>It's not about being interested. I'm trying to understand the issue here.</p>\n<blockquote>\n<p>Node.js WILL correctly handle file dependencies via require(...) so all 3 required files will be used.</p>\n</blockquote>\n<p>Ok. I'm not familiar with package.json that well. Just don't want anything else to break.\n. /cc @XhmikosR\n. @XhmikosR thanks!\n. Closing now that there's no response\n. &gt; This issue still exists, if you browserify html-minifier.</p>\n<p>Can I ask why you would need to browserify it?\n. Works in latest version; I also added this specific markup to a test suite.\n. Duplicate of #89 \n. Duplicate of #56\n. You can sort of ignore things already by <a href=\"https://github.com/kangax/html-minifier/pull/82\">wrapping them with <code>&lt;%</code> or <code>&lt;?</code></a> but a proper, standalone directive would make sense of course.\n. @XhmikosR you can wrap them with &lt;% and %&gt; for now\n. Added support for <code>&lt;!-- htmlmin:ignore --&gt;</code>. Let me know how it works for you folks.\n. Closing as per @nborko's comments\n. Thanks! Can you please add some unit tests and make sure no existing ones break?\n. @stieler-it Definitely! Merging. Thanks again.\n. Thanks!\n. Thanks!\n. Duplicate of #76\n. The problem is that minifier doesn't know how to handle (=clean) \"ng-class\" attribute. It strips newlines from standard \"class\", but obviously doesn't know anything about \"ng-class\".</p>\n<p>We could add support for specifying which other attributes to \"clean\", but there's 2 types of cleaning: <code>trimWhitespace</code> and <code>collapseWhitespace</code>. Moreover, some attributes might require even more specific handling (e.g. removing quotes or stripping some kind of prefixes (e.g. \"javascript:\"), etc.).</p>\n<p>Thoughts?\n. /cc @XhmikosR @mhulse\n. @mhulse Yep, I was thinking about additional whitelist-like properties as well. Just realized there's 3rd option, and so we can have 3 additional properties:</p>\n<p><code>trimAttrs, collapseAttrs, booleanAttrs</code></p>\n<p>For example:</p>\n<p><code>minify('...', {\n  trimAttrs: 'ng-class',\n  collapseAttrs: 'ng-something-else',\n  booleanAttrs: 'ng-disabled'\n});</code></p>\n<p><code>trimAttrs</code> would trim attribute value, <code>collapseAttrs</code> would collapse it, and <code>booleanAttrs</code> would remove it altogether.</p>\n<p>On the other hand... I can see quite a bit of repetition with this kind of approach:</p>\n<p><code>minify('...', {\n  trimAttrs: 'ng-class, ng-disabled, ng-something-else',\n  collapseAttrs: 'ng-class, ng-disabled, ng-something-else',\n  booleanAttrs: 'ng-class, ng-disabled, ng-something-else'\n});</code></p>\n<p>.. which means that we could have alternative like this:</p>\n<p><code>minify('...', {\n  attrValueRules: {\n    'ng-class': 'trim,collapse',\n    'ng-disabled': 'remove',\n    'ng-something-else': 'trim'\n  }\n});</code></p>\n<p>I rather like this last option; feels concise and flexible. The only thing it wouldn't take care of is redundant attributes (where minifier deletes not only attribute value \u2014 as in boolean attribute \u2014 but also attribute name itself; e.g. default <code>method=\"get\"</code> on forms, or default <code>type=\"text/javascript\"</code> on scripts, etc.).</p>\n<p><strong>Update</strong>: thinking more about this, we would probably want regex support to allow for something like \"ng-*\" and avoid listing all of ng-... attributes. In that case, perhaps tag name as a key in a \"hash\" is not the best way to go.</p>\n<p>Perhaps:</p>\n<p><code>minify('...', {\n  attrValueRules: [\n    [ /ng-*/, 'trim,collapse' ],\n    [ 'data-disabled', 'remove' ]\n  ]\n});</code>\n. No worries.\n. @remcohaszing it might work for Angular but there might be other cases. I'd want to have more generic solution.\n. If @mhulse can finish this one, that would be super awesome! :)\n. @jessehattabaugh what about JS single-line comments?</p>\n<p>Striping newlines from your 1st example gives this:</p>\n<p><code>html\n&lt;div data-bind=\"css: {fadeIn: selected(),fadeOut: !selected()},visible: function () {// yes sometimes there are function literalsreturn pageWeAreOn() == 'home';}\"&gt;foo&lt;/div&gt;</code></p>\n<p>.. which is no good.\n. Another example is string literals:</p>\n<p><code>html\n&lt;div data-bind=\"visible: function () { return smth() == 'spaces   in between' }\"&gt;foo&lt;/div&gt;</code></p>\n<p>If we collapse whitespace in that attribute value, it will give us:</p>\n<p><code>html\n&lt;div data-bind=\"visible:function(){returnsmth()=='spacesinbetween'}\"&gt;foo&lt;/div&gt;</code></p>\n<p>.. which is completely incorrect. In this case, collapsing all spaces to 1 could make more sense:</p>\n<p><code>html\n&lt;div data-bind=\"visible: function () { return smth() == 'spaces in between' }\"&gt;foo&lt;/div&gt;</code></p>\n<p>..but it would still be a problem with string literals \u2014 notice 3 spaces in there, which would collapse into 1.\n. I've added support for <code>customAttrCollapse</code> for now, which simply removes newlines from attributes specified via regex. I think this will cover at least 90% of the cases and if more granularity is needed, we can revisit it in the future.\n. I don't follow. What happens right now when you output tags in logs? What exactly is the problem? Why do they have to be HTML decoded?\n. Fixed. Just call <code>populate</code> without an argument.\n. Sure, can you send PR? I'll <code>npm publish</code> it.\n. Pushed 0.5.5\n. Can't merge this clean. Can you please resubmit.\n. Yep, just checked and it works in master.\n. Yes, that's expected. [type=text] is redundant as far as behavior but as far as JS/CSS access, there are side effects.</p>\n<p>Sent from my iPhone</p>\n<blockquote>\n<p>On Dec 21, 2013, at 13:34, mater notifications@github.com wrote:</p>\n<p>if in my css file, I write one rule:\ninput[type=\"text\"] {\n/* do something */\n}\nthings go wrong here !</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. @XhmikosR I'm indifferent to it. The project is very small and doesn't need much orchestration, so I never felt the need for Grunt.</p>\n</blockquote>\n<p>In a long term it might makes sense.</p>\n<p>Right now the build is as simple as <code>cat src/htmlparser.js src/htmlminifier.js src/htmllint.js &gt; dist/all.js</code>, testing is done via standard <code>npm test</code> (which also lints and builds the source).</p>\n<p>I just broke <code>npm test</code> into multiple scripts for convenience:</p>\n<p><code>sh\nnpm run-script lint\nnpm run-script build\nnpm run-script test</code>\n. &gt; I still feel Grunt is worth. Because then we can easily add more stuff like uglify etc.</p>\n<p>It's easy to add another script to <code>package.json</code> (I just added <code>minify</code> command which uses uglify).</p>\n<p>What other advantages of Grunt are there besides windows compatibility?\n. @XhmikosR I still don't see <em>much</em> benefit... but sure, go ahead :)\n. Closing now that grunt port is being tracked in #114 \n. @XhmikosR Everything looks good, thanks! The only question \u2014 why the removal of some stuff from .jshintrc? Are these the declarations that are being dropped in 3.0?\n. @XhmikosR not sure what's up with Travis; I just enabled it in the profile (had .travis.yml in repo but forgot to enable it on travis side) but it's not appearing yet. Maybe needs more time or maybe something else is off.\n. @XhmikosR maybe... removed master branch; should have done it a while ago : )\n. Awesome, thanks!</p>\n<p>Sent from my iPhone</p>\n<blockquote>\n<p>On Jan 23, 2014, at 12:49, XhmikosR notifications@github.com wrote:</p>\n<p>https://travis-ci.org/kangax/html-minifier/builds/17493755</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Should be all good now\n. Good point. Forgot about this :)\n. You have single quotes inside single quotes. That's why it doesn't work.\n. This is because \"&lt;\" is unescaped (should be \"&lt;\")\n. Damn, everyone is dropping poor node 0.6 these days. Couple months ago, I did a poll and some folks still using it \u2014 https://twitter.com/kangax/status/396317222064648193</p>\n</blockquote>\n<p>Other than that, looks good. I'm not familiar with Grunt really. I like the \"dist/all.js \u2192 dist/htmlminifier.js\" change (should have done a while ago, duh).</p>\n<p>Thanks!\n. @XhmikosR I don't think we're in a hurry :) Thanks for doing this.\n. &gt; Another thing while I'm at it, what do you prefer, single or double quotes?</p>\n<p>Single.</p>\n<p>Thanks again! Merging.\n. @remcohaszing Why isn't ng-class valid? From what I can see, html-minifier is doing everything properly \u2014 it just normalizes quotes and escapes inner ones.</p>\n<p>As for \"ng-transclude\", html-minifier doesn't know anything about it; doesn't know that it's supposed to be treated as boolean attributes (meaning that it's safe to remove its value).\n. 1st one should be fixed now (turns out it was a bug in parser). 2nd one is tracked in #98\n. Can you please paste chunk of html that shows this issue?\n. Hm, I don't think there's much we can do about this, since minifier really needs to be context aware and can't understand what to do with arbitrary, <em>partial</em> chunk of html.\n. Yeah, I'm not sure we can do anything about this... What about escaping inside quotes (as \"&amp;quot;\")?\n. Good idea. It's not a completely safe modification, but we can add this as an option.</p>\n<p><code>html\n&lt;script&gt;console.log(typeof f)&lt;/script&gt;\n&lt;script&gt;function f(){}&lt;/script&gt;</code></p>\n<p>logs undefined</p>\n<p><code>html\n&lt;script&gt;console.log(typeof f); function f(){}&lt;/script&gt;</code></p>\n<p>logs function</p>\n<p>etc.\n. @Undeterminant it's definitely can-of-worm-ish:</p>\n<p>1) error handling\n2) hoisting\n3) var declaration conflicts\n. Make sure you're using latest version as we had a lot of Angular-related changes.\n. Good stuff @XhmikosR, thanks! We should update to JSCS sometime in the future, since JSHint will be dropping these rules. I started using it on Fabric.js just few days ago \u2014 https://github.com/kangax/fabric.js/blob/master/.jscs.json\n. So far it's been pretty flexible, and consider that Fabric's codebase is relatively large (~11,5K LOC).</p>\n<p>The only issues I found were https://github.com/mdevils/node-jscs/issues/244, https://github.com/mdevils/node-jscs/issues/247, and https://github.com/mdevils/node-jscs/issues/20#issuecomment-35211776\n. I'll be plugging JSCS validation in Fabric's travis build once those are resolved.\n. Why do you have <code>&lt;div /&gt;</code> in the first place?\n. But you can just as well use <code>&lt;span toggle-checkbox ng-model=\"model.enabled\"&gt;&lt;/span&gt;</code>, right?\n. It's hard to justify this, since it's an invalid HTML4 (or HTML5). There could be all sorts of \"invalid\" shortcuts like this and it'd probably be unwise to make exceptions for all of them.\n. We actually did add an option to preserve xml-esque trailing slash, even though underlying parser is strictly HTML4/5 \u2014 https://github.com/kangax/html-minifier/blob/gh-pages/tests/minifier.js#L623-L625</p>\n<p>Maybe you could utilize that.\n. Cool, thanks for sharing!\n. Can you give an example?\n. So spaces are preserved, but newlines are stripped?</p>\n<p>Because we already have \"collapseWhitespace\" option, which when disabled, does this:</p>\n<p>``` html\n<p>foo</p> <p>bar</p></p>\n<p>baz</p>\n\n<p>```</p>\n<p>stays \"untouched\":</p>\n<p>``` html\n<p>foo</p> <p>bar</p></p>\n<p>baz</p>\n\n<p>```\n. Ok, closing as duplicate of #246 and we'll proceed with merging that one in\n. Works for me in http://kangax.github.io/html-minifier/ using:</p>\n<p><code>xml\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" dir=\"ltr\" xml:lang=\"de\"&gt;&lt;head&gt;test&lt;/head&gt;&lt;body&gt;test&lt;/body&gt;&lt;/html&gt;</code>\n. Definitely a good idea, thanks! Does the list on the right on this page help? http://kangax.github.io/html-minifier/\n. That looks good. We can just plug this into README.\n. I agree with <code>newcap</code> but usually don't care for <code>forin</code> (more on that <a href=\"https://github.com/kangax/fabric.js/issues/1160#issuecomment-35442737\">here</a>). <code>curly</code> is a must, I'm surprised it wasn't enabled. Does <code>strict</code> require us to add \"use strict\" or just enforces strict-mode rules implicitly?\n. I wouldn't want to drop 0.8 just yet. Seems premature. I was hesitant to remove 0.6 from Fabric just few months ago, since some of the users were still on it. I imagine quite few are still on 0.8.\n. Thanks!\n. It's not a valid HTML4 or HTML5, hence the error.\n. : /\n. Sure. Pushed, published.</p>\n<p>On Wed, Mar 12, 2014 at 3:00 PM, XhmikosR notifications@github.com wrote:</p>\n<blockquote>\n<p>BTW, maybe you could make a new npm release? There aren't any important\nchanges so far, but it shouldn't hurt either :)</p>\n<h2></h2>\n<p>Reply to this email directly or view it on GitHubhttps://github.com/kangax/html-minifier/pull/135#issuecomment-37449978\n.\n. Btw, I just created 0.6.0 milestone and added some issues in there that I'd\nlike to do next --\nhttps://github.com/kangax/html-minifier/issues?milestone=1&amp;page=1&amp;state=open</p>\n</blockquote>\n<p>I'm pretty swamped with work at the moment, and there's also Fabric issues\npiling up. I'll try to get to some of these in a near future. Shooting for\n1-2 month to finish and push 0.6.0.</p>\n<p>On Wed, Mar 12, 2014 at 3:10 PM, XhmikosR notifications@github.com wrote:</p>\n<blockquote>\n<p>Thanks!</p>\n<h2></h2>\n<p>Reply to this email directly or view it on GitHubhttps://github.com/kangax/html-minifier/pull/135#issuecomment-37451010\n.\n. Yeah, we should probably drop it together with 0.6.0 release.</p>\n</blockquote>\n<p>On Wed, Mar 12, 2014 at 3:20 PM, XhmikosR notifications@github.com wrote:</p>\n<blockquote>\n<p>Sounds good! I guess you can update the deps in that branch and drop\nnode.js 0.8 support since it's becoming a problem more every day...</p>\n<h2></h2>\n<p>Reply to this email directly or view it on GitHubhttps://github.com/kangax/html-minifier/pull/135#issuecomment-37452082\n.\n. Ok, added.</p>\n</blockquote>\n<p>On Wed, Mar 12, 2014 at 3:22 PM, XhmikosR notifications@github.com wrote:</p>\n<blockquote>\n<p>BTW, personally apart from the ability to minify inline javascript, I miss\nthe opportunity to cleanly ignore specific code. I use <!--googleoff:\nall--> etc and I only need to keep that from the comments but it's so\nmuch trouble to work around this :/</p>\n<h2></h2>\n<p>Reply to this email directly or view it on GitHubhttps://github.com/kangax/html-minifier/pull/135#issuecomment-37452284\n.\n. Thanks!\n. &gt; 366 assertions of 370 passed, 4 failed.</p>\n</blockquote>\n<p>Ahha... I referenced minifier files on a test page and it's (almost) good now. We should really package js/css minifiers together with minifier. We'd probably need to make it modular so that you could specify whether you want them included in a build.\n. Yep, it's the difference in \"o\" vs. \"n\" for the mangled variable : )\n. We could, but I wanted to actually ensure that mangling is happening as that's one of the main things that reduces string size.</p>\n<p>Sent from my iPhone</p>\n<blockquote>\n<p>On Mar 18, 2014, at 10:57, XhmikosR notifications@github.com wrote:</p>\n<p>Maybe disable mangle in uglify for the tests?</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Agreed about assets dirs.</p>\n</blockquote>\n<p>As for v8... hm, I think I used it to benchmark minifier using v8 and it was god knows how long ago (modified date \u2014 Aug 11, 2011 \u2014 damn, almost 3 years ago...). Test page seems to be source of amazon.com. I would leave it for benchmarking purposes, probably switching to Node. We could also create a proper benchmark \u2014 similar to that of clean-css \u2014 using different test pages (the ones from minifier-tests, for example) to show compression, time, etc.\n. @XhmikosR moved js, css to assets. Renamed minifier-tests to benchmarks but didn't actually get to start working on proper benchmarks script/page yet.\n. @fxck Just moved this to the upcoming 0.6 milestone. Will try to look into it soon, but any help is very welcome as always!\n. Ok, so the problem was that you declared <code>CleanCSS</code> in a local scope, so it shadowed whatever <code>CleanCSS</code> was available outside of the function. I've done this mistake so many times... :) Javascript! https://github.com/kangax/html-minifier/commit/0eebc503f0b37becce329375cf1cdfcb0b99fcd3#diff-e7f7e7412b2bb4403d5579516fc6b46fL742\n. Hm, there's few ways we can juggle with it. Maybe something like this:</p>\n<p><code>js\nvar CleanCSS = global.CleanCSS || require('clean-css');\nif (!CleanCSS) return text;\nreturn new CleanCSS().minify(text);</code></p>\n<p>(and wrapped in try-catch coz <code>require</code> might error out)</p>\n<p>or something like:</p>\n<p><code>js\nvar CleanCSS = typeof require == 'function' ? require('clean-css') : global.CleanCSS;\nif (!CleanCSS) return text;\nreturn new CleanCSS().minify(text);</code>\n. It's good that mention style attributes coz I don't think we pass them through minifyCSS at all...\n. Similarly with minifyJS and on* attributes\n. Sure. I think that's a good idea.\n. From what I can see, this happens only when \"minifyJS\" is on, right?\n. All good points! What are you thinking to use as a data in yml though? File names? I was thinking benchmark would need to read all files in a directory (perhaps following some convention for file name/dirname) and output size &amp; time taken for each of them. I haven't thought much about all this though.\n. Feel free to create a branch as I'm not sure when I'll be able to get to it.</p>\n<p>On Wed, Mar 26, 2014 at 1:13 AM, XhmikosR notifications@github.com wrote:</p>\n<blockquote>\n<p>I think we should have /benchmarks/input and benchmarks/output. Then have\na simple script which would run the benchmark and output to 2 json files in\n_data/. Then we can use that data with Jekyll itself.</p>\n<p>I suggest you make a new branch for this and I can push any changes there\ntoo; when we are done we merge the branch into gh-pages.</p>\n<h2></h2>\n<p>Reply to this email directly or view it on GitHubhttps://github.com/kangax/html-minifier/issues/143#issuecomment-38650641\n.\n. Thanks, updated.\n. I'm thinking to add an option <code>ignoreKoComments: { true | false }</code> which would ignore any comments starting with <code>&lt;!-- ko ... --&gt;</code> and ending with <code>&lt;!-- /ko --&gt;</code>. Does that sound right?\n. Yes, that might make more sense. How do you imagine it working though? Via regex?\n. Yep, looks good /cc @salvador-dali @nikolajtesla\n. I'm thinking perhaps to support a signature like this:</p>\n</blockquote>\n<p><code>minifyJS: { true | false | Object }\nminifyCSS { true | false | Object }</code></p>\n<p>So to pass options, one could do:</p>\n<p><code>minifyJS: { option: value }</code></p>\n<p>What do you think?\n. Sure, feel free too. Also a specific test could be good to have but I have no time atm.</p>\n<p>Sent from my iPhone</p>\n<blockquote>\n<p>On Mar 26, 2014, at 12:08, XhmikosR notifications@github.com wrote:</p>\n<p>Awesome, thanks! I think now it should be possible to make browser tests pass too. Also maybe we could add a more extensive example in README.md ?</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Ah, I had a feeling this might happen. Need to pass options in browser\nbranch of minifyJS (not just output options). I wasn't sure which\nconstructor to pass it in; there's so many of them there.</p>\n</blockquote>\n<p>On Wed, Mar 26, 2014 at 12:19 PM, XhmikosR notifications@github.com wrote:</p>\n<blockquote>\n<p>For some reason, browser tests fail for me even after setting mangle:\nfalse while in node they pass.</p>\n<h2></h2>\n<p>Reply to this email directly or view it on GitHubhttps://github.com/kangax/html-minifier/issues/146#issuecomment-38704692\n.\n. Looks good. Thanks!</p>\n</blockquote>\n<p>On Wed, Mar 26, 2014 at 1:00 PM, XhmikosR notifications@github.com wrote:</p>\n<blockquote>\n<p>Anyway here is what I did\nhttps://github.com/XhmikosR/html-minifier/compare</p>\n<p>I left one test with mangling intact.</p>\n<h2></h2>\n<p>Reply to this email directly or view it on GitHubhttps://github.com/kangax/html-minifier/issues/146#issuecomment-38710008\n.\n. Thanks!\n. Thanks! Added more. Let's try to keep it up to date.\n. Duplicate of #150\n. There's a grunt plugin somewhere on GitHub. There's also a link to it in readme.\n. I marked it as \"possible feature\" because it seems that changing to relative urls would give very small decrease of markup (although i'm guessing it could make sense on pages with lots of urls). Also because I'm not yet sure if it's an absolutely safe thing to do and how easy it'd be to implement this on both client and server (since minifier needs to work on both).\n. @stevenvachon just got a link to this http://www.thespanner.co.uk/2014/03/21/rpo/ on twitter. you might be interested.\n. Well, feel free to send a PR then, whenever you get a chance.\n. It would make sense to tap into minifier.js that we use, since it already does traversal.\n. Yeah, that's what happens with invalid markup. Parser could choke on and get into an infinite loop.\n. Do you have a link for htmlparser2? Searched github without success.\n. Cool, I'll mark it as \"possible feature\" for now. Would be interesting to see if there's any deviations (or improvements) from our current parser and how faster it really is.</p>\n</blockquote>\n<p>Relatedly, we'd be able to see performance difference easier after we're done with #143 \n. I glanced at html-uglify and it seems to have a long way to go until it can reach our functionality, unless I'm missing something. Is there anything it does better?\n. How is parse5 better than htmlparser2? Both seem to be pretty well maintained, used, and compliant.\n. htmlparser2 is supposedly a \"forgiving\" parser as well. I'm all for switching to a better engine but I don't see a clear advantage of parse5 as of now.\n. The main question is \u2014 what are the actual cases where parse5 acts as a browser and html-minifier's now-heavily-tweaked-and-improved parser doesn't?\n. The solution is not very obvious here. Ideally, of course, we'd want markup to stay the same. But minification has consequences. Take, for example, removal of attributes \u2014 certain CSS will no longer function the same, certain querying by selectors will no longer function the same, and so on.</p>\n<p>If there's a way for us to adhere to the same markup without too much hassle, we should try do it. /cc @alexlamsl \n. Good point, even more reason to fix it.</p>\n<p>On Fri, Mar 4, 2016 at 7:06 PM, Steven Vachon notifications@github.com\nwrote:</p>\n<blockquote>\n<p>@kangax https://github.com/kangax removal of attributes is optional..\nchanging rendered html structure currently is not, but it is doing it.</p>\n<p>\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/155#issuecomment-192531622\n.\n. This is already fixed in latest version. You can see it in http://kangax.github.io/html-minifier/\n. I can't reproduce this on http://kangax.github.io/html-minifier/\n. Got it. Ok, will look into it.\n. Works for me in http://kangax.github.io/html-minifier/\n. Good idea. Will do.\n. FF folks still haven't gotten around to it :/ so we might as well just fix\nit in minifier</p>\n</blockquote>\n<p>On Tue, Jul 8, 2014 at 7:18 PM, XhmikosR notifications@github.com wrote:</p>\n<blockquote>\n<p>FYI, we are now up to 3 failing tests on FF 31. :/</p>\n<p>Chrome and IE11 work fine.</p>\n<p>\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/161#issuecomment-48370682\n.\n. @XhmikosR any change you could take care of these? Not sure when I'll be able to find time (but will try)\n. Fixed via https://github.com/kangax/html-minifier/commit/465e3a736614ff639e415e169cbeb3da807e3b9b\n. Yeah... and I don't see any option in Uglify to change that.\n. @mishoo good point\n. Duplicate of #8\n. Are you using the latest version? Also, please provide exact markup you're checking against.\n. Yeah, it works for me on http://kangax.github.io/html-minifier/</p>\n</blockquote>\n<p><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;script&gt;var test1=1,test2=2,test3=test1+test2;console.log(test3);&lt;/script&gt;&lt;body&gt;</code>\n. Actually we don't remove \"alt\" on purpose as it is a required attribute in HTML4/5 \u2014 http://perfectionkills.com/experimenting-with-html-minifier/#remove_empty_or_blank_attributes\n. Yeah, I suppose we could do that. I don't think people pay much attention to those warnings but still...\n. Yep, there's a lot of options to satisfy any needs \u2014 https://github.com/kangax/html-minifier#options-quick-reference\n. <code>collapseWhitespace</code>\n. Cool. Thanks.\n. Thanks!\n. @tssajo don't have time to test it out at the moment, but looked through code and it looks fantastic! thanks a ton for doing this. Merging and I'll try it out in the next couple of days as soon as I get a chance. It'll be useful when building benchmark suite :)\n. Added.</p>\n<p>On Fri, May 16, 2014 at 2:15 PM, Zoltan notifications@github.com wrote:</p>\n<blockquote>\n<p>@kangax https://github.com/kangax Thanks! I'm glad that you liked my\ncode.\nI'm going to use html-minifier (via CLI) in my Minifyhttps://github.com/tssajo/Minifypackage for Sublime Text editor.</p>\n<p>One more thing. Can you please add some instructions to your README.md\nfile? Something like:\nInstallation Instructions</p>\n<p>From NPM for use as a command line app:</p>\n<p>npm install html-minifier -g</p>\n<p>From NPM for programmatic use:</p>\n<p>npm install html-minifier</p>\n<p>From Git:</p>\n<p>git clone git://github.com/kangax/html-minifier.git\ncd html-minifier\nnpm link .</p>\n<p>Usage</p>\n<p>For command line usage please see html-minifier --help</p>\n<p>Thanks!!</p>\n<p>\u2014\nReply to this email directly or view it on GitHubhttps://github.com/kangax/html-minifier/pull/171#issuecomment-43324620\n.\n. Looking at this closer, I see that attribute value is being removed because translate is a boolean attribute and so empty value is the same as a \"yes\" string.</p>\n<p>The attribute's keywords are the empty string, yes, and no. The empty string and the yes keyword map to the yes state. The no keyword maps to the no state. In addition, there is a third state, the inherit state, which is the missing value default (and the invalid value default).</p>\n</blockquote>\n<p>http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#the-translate-attribute\n. So the question is: why is there \"lican.intro.start\" value, if browser only understands \"yes\", \"no\", and empty string.\n. Well, one way is not to use \"collapse boolean attributes\" \u2014 http://kangax.github.io/html-minifier/\n. This is fixed now\n. 99% (if not more) of documents on the web are served as HTML. I think it's a sensible default.\n. Use <code>keepClosingSlash</code> option\n. Thanks!\n. I just bumped version to 0.6.1 and published it on NPM. Can you please try\nagain?</p>\n<p>On Wed, May 21, 2014 at 10:15 PM, Zoltan notifications@github.com wrote:</p>\n<blockquote>\n<p>Thanks for merging.</p>\n<p>However, when trying to install html-minifier globally with the command:\nnpm install html-minifier -g\nthe files cli.js and sample-cli-config-file.conf still not get\ninstalled...</p>\n<p>I cleaned my npm cache with npm cache clear to no avail.</p>\n<p>Originally how did you publish html-minifier from github.com to npmjs.orgat the first place? Can you somehow \"tell\"\nnpmjs.org that new files were added to the git repo? Or is it all\nautomatic and then possibly a version bump is required? Sorry, but I don't\nknow how to publish packages to npmjs.org ... Maybe you do?</p>\n<p>\u2014\nReply to this email directly or view it on GitHubhttps://github.com/kangax/html-minifier/pull/174#issuecomment-43808070\n.\n. Good point, pushed. Thanks.</p>\n</blockquote>\n<p>On Fri, May 23, 2014 at 7:43 AM, Zoltan notifications@github.com wrote:</p>\n<blockquote>\n<p>You might want to add a release tag for v0.6.1\nto show up on the page https://github.com/kangax/html-minifier/releases</p>\n<p>\u2014\nReply to this email directly or view it on GitHubhttps://github.com/kangax/html-minifier/pull/174#issuecomment-43973043\n.\n. Good point. They probably should.\n. On a second thought, I don't think they should be removed. Isn't the whole point to remove regular comments but leave other chunks of some \"important\" content (by surrounding them with \"htmlmin:ignore\" ones)?\n. @duncanbeevers If you could look into this, that would be awesome! Should be fairly trivial.\n. I'll mark this as \"possible feature\" in a sense that we might consider optimizing parser to report these errors sooner. I have a feeling this could be caused by catastrophic backtracking and is common when giving certain input to certain parsers. If anyone has time to look into it, I'll gladly consider merging this in.\n. Hm, yeah. I suppose removing <code>\\t</code>, <code>\\n</code>, <code>\\r</code>, and <code>' '</code> (U+0020) would make sense there. Please send a PR if you have a chance! :)\n. Fixed\n. Thanks!\n. Wanted to publish but getting an error:</p>\n</blockquote>\n<p>npm http PUT https://registry.npmjs.org/html-minifier\nnpm http 500 https://registry.npmjs.org/html-minifier\nnpm ERR! registry error parsing json</p>\n<p>On Fri, May 30, 2014 at 7:41 PM, Denis Tuzhik notifications@github.com\nwrote:</p>\n<blockquote>\n<p>@kangax https://github.com/kangax - will you publish this to npm soon?</p>\n<p>\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/pull/183#issuecomment-44678462.\n. Thanks!\n. Can you please add a unit test as well?\n. Thanks!\n. Added\n. Yes, it's optional of course \u2014 http://perfectionkills.com/experimenting-with-html-minifier/#remove_redundant_attributes\n. Unfortunately we can't parse it, since it's not valid HTML4/5\n. I'll try to add support for this soon\n. @duncanbeevers @khmelevskii We can pass these similar to the way we pass, say, <code>ignoreCustomComments</code> \u2014 https://github.com/kangax/html-minifier/blob/gh-pages/cli.js#L73</p>\n</blockquote>\n<p>It's usually best to specify this via config file, similar to how we do it with benchmarks (using CLI underneath) \u2014 https://github.com/kangax/html-minifier/blob/gh-pages/benchmark.conf\n. Thanks @osamesama! Can you please add a unit test as well?\n. Make sure to use latest version\n. Can you give an example of input that errors out?\n. The error is coming from html parser that we're relying on. I'll see if I can try to make it more descriptive but can't promise anything.\n. Hm, strange. Please file a separate ticket for that though.\n. Fair enough. Thanks!\n. Can you give an example?\n. <code>{{</code> are currently not supported in attributes\n. Confirmed\n. Thanks! Can you please submit a PR (ideally, with a test case)?\n. Intended behavior. I'll update docs, thanks!\n. Great, thanks!\n. As part of <code>grunt</code> (or only concat task)\n. Yes, please resubmit with already bumped version. I'll publish.\n. Hey @duncanbeevers, thanks for this. Looks great!\n. Hm, strange that travis tests all passed for this PR...\n. @duncanbeevers Looks pretty good! I'm only concerned about performance implications. Could you run <code>node ./benchmark.js</code> locally, and compare average time (reported at the end)?\n. Ok, let's get it in. Can you send a PR? Thanks.\n. Thanks @duncanbeevers!\n. Nice, thanks!\n. Looks good @duncanbeevers, thanks! I can't merge it automatically because I think dist file conflicts with the one I built recently and pushed. Could you please resubmit?\n. Thanks! Yeah, it's best to omit dist completely. I usually build and publish occasionally.\n. Thanks, made it more explicit\n. Thanks. I love the quality of your PR's! :)</p>\n<p>(going to sleep now, will look more closely tomorrow)\n. Works for me on http://kangax.github.io/html-minifier/\nMake sure you're using the latest version.\n. Thanks!\n. Thanks, Pat! We'll look into it.</p>\n<p>/cc @duncanbeevers</p>\n<p>On Tue, Jul 29, 2014 at 7:13 PM, Pat Cavit notifications@github.com wrote:</p>\n<blockquote>\n<p>Here's the likely issue.</p>\n<p>http://regexr.com/3980m</p>\n<p>The regex being used to parse tags (\n/^&lt;([\\w:-]+)((?:\\s_[\\w:-]+(?:\\s_(?:(?:=))\\s_(?:(?:\"[^\"]<em>\")|(?:'[^']</em>')|[^&gt;\\s]+))?)_)\\s*(\\/?)/&gt;)\ntimes out trying to process <input data-bind=\"text\" placeholder=\"<%=\ni18n(\"filters.text.label\") %>\"/&gt;. I haven't taken the time to grok the\nregex to see where the likely error is, but this seems like a scary one to\nfix.</p>\n<p>In code terms it's freezing on the following line:</p>\n<p>https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlparser.js#L227</p>\n<p>\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/213#issuecomment-50507395\n.\n. Duplicate of #332\n. Hey @rsp, thanks for this! Looks great except that we shouldn't have 2 ways to run benchmark. We should report gzipped sizes/comparison via main benchmark. This would also allow to avoid all the repetition in gzip-benchmark.js (once I add another file to test, I'll need to update gzip-benchmark.js as well, etc.)\n. Absolutely. I like 2 line solution the most. And again, thanks for digging into this!\n. @rsp would still love to see this integrated into the main benchmark btw! :)\n. Hm, when I run it through http://kangax.github.io/html-minifier/ I get 1 space only, but probably shouldn't be any at all.\n. What's the exact string?\n. Hm, good point. Same for <code>&lt;link&gt;</code>'s.\n. thanks @duncanbeevers \n. Hm, I see now that it fails in raw form \u2014 <code>/*&gt;  &lt; */</code> \u2014 without surrounding <code>&lt;style&gt;</code> tags. This is probably due to minifier attempting to parse <code>&lt;*/</code> as a start tag.</p>\n</blockquote>\n<p>@sogen is there a reason you have such markup outside of style element?\n. Since it works with style's surrounded and is not valid HTML otherwise, I think it's safe to close this. \n. Take a look at <code>processScripts</code> option \u2014 https://github.com/kangax/html-minifier/blob/gh-pages/README.md\n. Awesome, thanks!\n. @sopilkar First of all, <code>ignoreCustomComments</code> is for ignoring comments; that means anything starting with <code>&lt;!--</code> and ending with <code>--&gt;</code> plus whatever regex you supply to match its contents. This is why it doesn't do anything for <code>{{{</code> and <code>}}}</code>. Second, parsing quotes within same quotes is a hassle and is not meant to work in the first place. I'm glad that htmlcompressor is able to \"handle\" them (and perhaps that's one of the reasons it's slow? :P), but I really don't think it's wise for us to \"bend backwards\" like that and try to support nonsensical (from HTML point of view) constructs. How would we know where the attribute value starts and where it ends, if matching quote no longer means the end of attribute value? The job of template engine you're using is easy \u2014 it's only looking for <code>{{{</code> and <code>}}}</code>; then it creates (sensible) HTML and passes it onto HTML parser/renderer. It's a multistep process. Trying to \"understand\" multi-step markup in our parser certainly sounds like a futile attempt. This is a path to ambiguous nightmare, a recipe for disaster, a can of worms waiting to be opened.</p>\n<p>Having said that, I'm open to seeing possible solutions to this \"issue\", so long as they don't hinder performance of common use cases. If you have some ideas on how we could implement this \u2014 I'm all ears.\n. This looks great, @stevenvachon! Looked through and no comments; everything looks right.\n. It should collapse them. Please show an example that fails.\n. These are the source files @Delagen sent:</p>\n<p>``` html\n<!--<div class=\"divider-container\">\n    <div class=\"divider-top-content\">-->\n<div class=\"view-container no-padding-horizontal\" ng-init=\"setTitle('')\">\n    <div class=\"panel panel-default\" ng-controller=\"ibCardController\">\n        <div class=\"panel-heading\">\n            \u041a\u0430\u0440\u0442\u044b                    <!--<button class=\"btn btn-link btn-right\">-->                        <!--<img src=\"./img/common/plus.png\"/>-->                    <!--</button>-->\n        </div>\n        <ul class=\"list-group two-row-list\">\n            <li class=\"list-group-item \" ng-repeat=\"item in cards\" ng-click=\"go('card/item',item.api)\">\n                <div class=\"two-row-list-item\">\n                    <div class=\"icon\">\n                        <img ng-src=\"./img/accounts/{{item.type}}.png\"/>\n                    </div>\n                    <div class=\"info\">\n                        <div class=\"top\"><span class=\"title\">{{item.name}}</span></div>\n                        <div class=\"bottom\">\n                            <small class=\"text-muted\">{{item.number}}</small>\n                        </div>\n                    </div>\n                    <div class=\"balance\">\n                        <div class=\"top\">\n                            <span class=\"currency\"><b class=\"value\">{{item.balance|ibCurrency:null:'value'}}</b> <span class=\"symbol fa fa-rub\"></span></span>\n                        </div>\n                        <div class=\"bottom\">\n                            <small class=\"text-muted\">{{item.desc}}</small>\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li class=\"list-group-item\" bs-modal-dialog bs-modal-dialog-title=\"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\">\n                <script type=\"text/ng-template\" class=\"modal-dialog-template\">\n                    <div class=\"form-group\">\n                        \u0414\u0430\u043d\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0432 \u0434\u0435\u043c\u043e-\u0440\u0435\u0436\u0438\u043c\u0435\n                    </div>\n                    <div class=\"form-group\">\n                        <button class=\"btn btn-primary\" ng-click=\"$modalDialog.close()\" class=\"btn btn-primary\">OK</button>\n                    </div>\n                \n\n\n\n\n\n\u0412\u044b\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u043a\u0430\u0440\u0442\u0443\n\n\n\n\n\n<div class=\"panel panel-default\" ng-controller=\"ibAccountController\">\n    <div class=\"panel-heading\">\n        \u0421\u0447\u0435\u0442\u0430 \u0438 \u0432\u043a\u043b\u0430\u0434\u044b                    <!--<button class=\"btn btn-link btn-right\" style=\"\">-->                        <!--<img src=\"./img/common/plus.png\"/>-->                    <!--</button>-->\n    </div>\n    <ul class=\"list-group two-row-list\">\n        <li class=\"list-group-item\" ng-repeat=\"item in accounts\" ng-click=\"go('account/item',item.api)\">\n            <div class=\"two-row-list-item\">\n                <div class=\"icon\">\n                    <img ng-src=\"./img/accounts/{{item.type}}.png\"/>\n                </div>\n                <div class=\"info\">\n                    <div class=\"top\"><span class=\"title\">{{item.name}}</span></div>\n                    <div class=\"bottom\">\n                        <small class=\"text-muted\">{{item.number}}</small>\n                    </div>\n                </div>\n                <div class=\"balance\">\n                    <div class=\"top\">\n                        <span class=\"currency\"><b class=\"value\">{{item.balance|ibCurrency:null:'value'}}</b> <span class=\"symbol fa fa-rub\"></span></span>\n                    </div>\n                    <div class=\"bottom\">\n                        <small class=\"text-muted\">{{item.desc}}</small>\n                    </div>\n                </div>\n            </div>\n        </li>\n        <li class=\"list-group-item\" bs-modal-dialog bs-modal-dialog-title=\"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\">\n            <script type=\"text/ng-template\" class=\"modal-dialog-template\" >\n                <div class=\"form-group\">\n                    \u0414\u0430\u043d\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0432 \u0434\u0435\u043c\u043e-\u0440\u0435\u0436\u0438\u043c\u0435\n                </div>\n                <div class=\"form-group\">\n                    <button class=\"btn btn-primary\" ng-click=\"$modalDialog.close()\" class=\"btn btn-primary\">OK</button>\n                </div>\n            </script>\n            <div class=\"two-row-list-item\">\n                <div class=\"icon\">\n                    <img src=\"./img/accounts/plus.png\"/>\n                </div>\n                <div class=\"info\">\n                    <div><span class=\"title title-primary\">\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0441\u0447\u0435\u0442 \u0438\u043b\u0438 \u0432\u043a\u043b\u0430\u0434</span></div>\n                </div>\n            </div>\n        </li>\n    </ul>\n</div>\n\n\n\n</div>\n    <div class=\"divider-bottom-content\">\n        <div class=\"divider btn btn-default btn-sm\" divider-toggle>\n            <span class=\"fa fa-bars\"></span>\n        </div>\n        <div class=\"divider-bottom\">\n            <div class=\"view-container\">\n                content 1 content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1 content 1 content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1 content 1 content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1 content 1 content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1 content 1 content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1content 1\n            </div>\n        </div>\n        <div class=\"divider-top\">\n            <div class=\"view-container\">\n                content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2 content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2 content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2 content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2 content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2content 2\n            </div>\n        </div>\n    </div>\n\n</div>\n<div ng-controller=\"ibAccountController\" class=\"divider-top-content\">\n<ul class=\"list-group\">\n<li ng-click=\"go('/account/history',item.api)\" class=\"list-group-item\" ng-repeat=\"item in accounts\"> {{item.name}}<br/><span class=\"text-muted\">{{item.number}}</span>\n    <span class=\"pull-right label\" ng-class=\"{'label-success':item.balance.value>0,'label-default':item.balance.value==0,'label-danger':item.balance.value<0}\">{{item.balance|ibCurrency}}</span>\n</li>\n</ul>\n</div>\n```\nand:\n``` html\n\u041a\u0430\u0440\u0442\u044b {{item.name}}{{item.number}}{{item.balance|ibCurrency:null:'value'}} {{item.desc}}<div class=\"form-group\">\n                        \u0414\u0430\u043d\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0432 \u0434\u0435\u043c\u043e-\u0440\u0435\u0436\u0438\u043c\u0435\n                    </div>\n                    <div class=\"form-group\">\n                        <button class=\"btn btn-primary\" ng-click=\"$modalDialog.close()\" class=\"btn btn-primary\">OK</button>\n                    </div>\u0412\u044b\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u043a\u0430\u0440\u0442\u0443\u0421\u0447\u0435\u0442\u0430 \u0438 \u0432\u043a\u043b\u0430\u0434\u044b {{item.name}}{{item.number}}{{item.balance|ibCurrency:null:'value'}} {{item.desc}}<div class=\"form-group\">\n                        \u0414\u0430\u043d\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0432 \u0434\u0435\u043c\u043e-\u0440\u0435\u0436\u0438\u043c\u0435\n                    </div>\n                    <div class=\"form-group\">\n                        <button class=\"btn btn-primary\" ng-click=\"$modalDialog.close()\" class=\"btn btn-primary\">OK</button>\n                    </div>\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0441\u0447\u0435\u0442 \u0438\u043b\u0438 \u0432\u043a\u043b\u0430\u0434\n```\n. Narrowed down the first case to a script template... which is solved by letting minifier minify text/ng-template scripts.\n. Same with the 2nd one. Closing.\n. So basically this:\nhtml\n<!--[if IE 6]><!-- test --><![endif]-->\nIt probably chokes on the fact that it's a comment within a comment. I'll take a closer look when I get a chance.\n. @duncanbeevers Good question. Looking at our tests \u2014 https://github.com/kangax/html-minifier/blob/gh-pages/tests/minifier.js#L168-L177 \u2014 we're treating IE conditional comments not like regular comments; they aren't affected by removeComments. And we also don't strip comments in attributes \u2014 https://github.com/kangax/html-minifier/blob/gh-pages/tests/minifier.js#L164-L165\nSo... we should do either 1 or 2. Stripping conditionals entirely would be wrong. I'm leaning towards stripping comments inside, leaving just conditionals (option 2).\nDoes this sound reasonable? /cc @stevenvachon\n. I agree. Any way you put it, the fact that we can parse style + comments:\nhtml\n<style type=\"text/css\"><!--\n  #navbar.nav-sprite-v1 .nav-sprite {\n    background-image: url(http://g-ecx.images-amazon.com/images/G/15/gno/sprites/global-sprite-v1._V339353380_.png);\n  }\n--></style>\n..and conditionals + style:\nhtml\n<!--[if IE 6]><style type=\"text/css\">\n  #navbar.nav-sprite-v1 .nav-sprite {\n    background-image: url(http://g-ecx.images-amazon.com/images/G/15/gno/sprites/global-sprite-v1._V339353380_.png);\n  }\n</style><![endif]-->\n..but not both:\nhtml\n<!--[if IE 6]><style type=\"text/css\"><!--\n  #navbar.nav-sprite-v1 .nav-sprite {\n    background-image: url(http://g-ecx.images-amazon.com/images/G/15/gno/sprites/global-sprite-v1._V339353380_.png);\n  }\n--></style><![endif]-->\nis just not right.\n. Curiously, even @github's highlighting seems to choke on it :)\n. Make sure to set \"keepClosingSlash\" to true. I get this:\nxml\n <svg version=1.1 id=cloud class=\"climacon climacon_cloud\" xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink x=0px y=0px viewBox=\"15 15 70 70\" enable-background=\"new 15 15 70 70\" xml:space=preserve><clipPath id=cloudFillClip><path d=\"M15,15v70h70V15H15z M59.943,61.639c-3.02,0-12.381,0-15.999,0c-6.626,0-11.998-5.371-11.998-11.998c0-6.627,5.372-11.999,11.998-11.999c5.691,0,10.434,3.974,11.665,9.29c1.252-0.81,2.733-1.291,4.334-1.291c4.418,0,8,3.582,8,8C67.943,58.057,64.361,61.639,59.943,61.639z\"/><g class=\"climacon_iconWrap climacon_iconWrap-cloud\"><g class=\"climacon_componentWrap climacon_componentWrap_cloud\" clip-path=url(#cloudFillClip)><path class=\"climacon_component climacon_component-stroke climacon_component-stroke_cloud\" d=M43.945,65.639c-8.835,0-15.998-7.162-15.998-15.998c0-8.836,7.163-15.998,15.998-15.998c6.004,0,11.229,3.312,13.965,8.203c0.664-0.113,1.338-0.205,2.033-0.205c6.627,0,11.998,5.373,11.998,12c0,6.625-5.371,11.998-11.998,11.998C57.168,65.639,47.143,65.639,43.945,65.639z/></g></g></clipPath></svg>\n. Although looks like the issue with clipPath is still there...\n. Gotta use case sensitive option, but tag nesting is incorrect indeed.\n. > Should case sensitivity option affect how a file is parsed?\nNo, but it would keep your CUSTOM-TAG as is. Like I said, the parsing issue is a bug.\n. Thanks!\n. Need some kind of reproducible example chunk/file\n. Thanks!\n. Thanks @duncanbeevers!\n. Hm, can't seem to merge automatically. Mind resubmitting on top of latest master?\n. Also... 7.15KB gzipped savings on Amazon? Impressive :)\n. Thanks for digging into this. It looks good to me and sounds reasonable. I would just want to make tests more granular (left few comments).\n. @duncanbeevers could you resubmit and address my last comment? thanks!\n. Partial chunks of markup are not supported because we parse markup into a tree, modify it, then spit out markup again. We can't know that original markup was only half of the tree, because we did our best to try to parse it as a full tree.\n. Thanks @duncanbeevers!\n. Can you please add a test case\n. So it's similar to https://github.com/kangax/html-minifier/issues/129 then?\n. @LaurentGoderre I'm happy to merge this in, but couple things first:\n1. Let's rename preserveLineBreak to preserveLineBreaks. I think it sounds more natural and is consistent with our other options (removeRedundantAttributes, removeAttributeQuotes, etc.)\n2. Let's add a bit more complex test (more markup, e.g. the one from #129), just to be sure everything works as expected.\n3. I'm wondering how this affects performance, but considering this is opt-in, I suppose we don't have to worry about it for now (except that .replace(lineBreakStamp, '\\n'); happens all the time now, right? not just when option is true?)\n. I think it's good now. Thanks again!\n. Published!\nOn Tue, Sep 2, 2014 at 5:50 PM, Laurent Goderre notifications@github.com\nwrote:\n\nCan you let me know when you publish to npm?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/pull/246#issuecomment-54153717.\n. Wait, did we fix it or not?\n. Thanks @shoja. Do you mind resubmitting? Can't automatically merge.\n. thanks!\n. @duncanbeevers Thanks! Can you please add a test as well.\n. That's crazy. I would never think regex match (even constrained by boundaries) is faster than indexOf.\n. Makes sense. Thanks!\n. Can't overwrite. Need to tag another version.\n\nOn Tue, Sep 2, 2014 at 7:41 PM, Laurent Goderre notifications@github.com\nwrote:\n\nSorry about that. Can it be published to npm?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/pull/255#issuecomment-54171400.\n. Slightly :) Could you please make a PR with the version change and I'll merge/publish once I get some free time.\n. Need to update in src/dist as well \u2014 https://github.com/kangax/html-minifier/commit/df246df54f4ece777719fb3e08ee64cad3b45c5a\n. Thanks. Can you please change to present tense.\n. Works for me on http://kangax.github.io/html-minifier/ Make sure to use latest version.\n. You can use  htmlmin:ignore  for it\n. What happens with escaping? Does it hurt somehow?\n. Yeah I can see that. I'm just not understanding how escaping could affect anything negatively, if it's normally OK to escape quotes anywhere in HTML source (including data attributes).\n. I see what you mean but I do feel a bit iffy about adding support for this.\n\n@duncanbeevers what do you think?\n. @LaurentGoderre btw, this is the commit that introduced that replacement \u2014 https://github.com/kangax/html-minifier/commit/d8a9f5f85ae39de912ddffe86a7f28b2bdecea57\n. The latest is 0.6.8 \u2014 https://github.com/kangax/html-minifier/releases\n. Are you using keepClosingSlash option?\n. Also, are you sure you're serving document with XHTML mimetype where closing slashes really matter and not with HTML mimetype in which case browsers strip them during parsing anyway?\n. I am not 100% sure that this is the best course of action but it's better than what we currently have and I don't have time to look into it more so... Yeah, I'm ok with merging :)\n. @duncanbeevers thanks!\n. Works for me on http://kangax.github.io/html-minifier/\n. And you're using the latest version (0.6.8)?\n. Pushed 0.6.9\nOn Tue, Sep 30, 2014 at 3:13 PM, Micha\u0142 Go\u0142\u0119biowski \nnotifications@github.com wrote:\n\nThis has just bitten me hard especially that currently\ngrunt-angular-templates swallows the stack trace which makes it hard to\npinpoint: ericclemmons/grunt-angular-templates#106\nhttps://github.com/ericclemmons/grunt-angular-templates/issues/106\nCould you release a new version?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/270#issuecomment-57311145\n.\n. Hm, an immediate fix (on your end) would be to just escape opening bracket:\n\nhtml\n<p><code>Map&lt;Object, Object></code></p>\nI'm not sure right away if we should tolerate brackets in certain tags or not. Will think about it.\n/cc @duncanbeevers \n. Related to https://github.com/kangax/html-minifier/issues/225\nOn Tue, Sep 23, 2014 at 10:30 AM, Jerome Louis notifications@github.com\nwrote:\n\nUsing http://kangax.github.io/html-minifier/\n<!DOCTYPE html>\n\n[if lte IE 8]>      <script type=\"text/javascript\">        alert('ie8!');      </script>    <![endif]\n\n\n\ngets minified to:\n<!DOCTYPE html>[if lte IE 8]><script type=\"text/javascript\">        alert('ie8!');      </script><![endif]\nDid I miss something in the options, or are IE conditional comments not\nhandled by the minifier?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/274.\n. I suppose if we already allow \":\", we might as well support \".\"\n\n@duncanbeevers @XhmikosR if there's no objection from you guys, I'll pull this in.\n. Pushed new version\n. Works for me with latest version and we have tests for it too (which all pass)\n. You'll need to escape < as &lt;. If we narrow it down, this is no different than <button><</button> which is invalid.\n. Duplicate of #273\n. 0.3.0? O_o https://github.com/kangax/html-minifier/releases\n. Understandable, and which is why it's under removeOptionalTags flag :) If you don't pass it, it shouldn't be removed. As for XML-ish compliance, it's always good to remember that all the /> and doctypes and other xml-isms are all largely disregarded by browsers when documents are served with html mime-type, rather than xhtml (as it happens in 99% of the cases).\n. Good point. I'll see what we can do.\n. I'm pretty sure closing tags are discarded by parser so we never even get our hands on them in minifier\n. Damn... what does this do, out of curiosity?\n. Originally we followed HTML4 semantics, which is defined via SGML and lists specific attributes for specific tags. While HTML5 (seems to) specify attribute names more loosely, I still see that validator (https://validator.w3.org/nu/#textarea) complains with foo?=bar. It even complains with data-foo?=bar. \nI'm guessing if we were to follow HTML5 behavior strictly, we could tolerate things like that (assuming that browsers tolerate them too).\n. You can now use  htmlmin:ignore  around it\n. Thank you! :)\nOn Sun, Nov 2, 2014 at 3:00 PM, Duncan Beevers notifications@github.com\nwrote:\n\nThanks Juriy!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/pull/291#issuecomment-61407638.\n. @duncanbeevers could you please take a look!\n. @mmobinvestor sorry, I'm swamped with work right now. Will try to get to it whenever I can but don't know when.\n. I just made it so that this works:\n\n``` html\n htmlmin:ignore \ndata-x=\"<%= x %>\"<% } %>\n\n htmlmin:ignore \n```\n. This works too (from the original description):\n\nhtml\n<!-- htmlmin:ignore --><div <%= 'aa' %>></div><!-- htmlmin:ignore -->\n. Thanks folks, PR is welcome!\nSent from my iPad\n\nOn Nov 10, 2014, at 2:17 AM, I\u00f1aki Baz Castillo notifications@github.com wrote:\nBad:\nUsage of \"Grunt concat\" task to generate a browser-suitable library.\nSetting \"main\": \"./dist/htmlminifier.js\" in package.json\nHow should it be?:\nCreate the whole code as if it was a pure Node project, so \"main\": \"index.js\" in package.json, and in \"index.js\" call to require('lib/htmlparser'), etc.\nUse browserify (via a Grunt task) to generate a bundle file suitable for the browser, and store it in dist/htmlminifier.js.\nThen in package.json: \"browser\": \"dist/htmlminifier.js\".\n\u2014\nReply to this email directly or view it on GitHub.\n. > Create the project as a pure Node project (without concat at all).\n\nWhat's wrong with concat?\n\nUsage of \"Grunt concat\" task to generate a browser-suitable library.\n\nWhy is it bad specifically for \"browser-suitable\" library? And what do you mean by \"browser-suitable\"?\n. I like it! Couple things:\n- I think we shouldn't rely on Object.create\n- If we're \"overwriting\" keepClosingSlash and caseSensitive behavior, let's mention it in the docs, to avoid any misunderstanding (I guess in README since we don't have docs docs).\n. Thanks @duncanbeevers!\n. No idea actually. /cc @duncanbeevers \n. Well, we're simply following the standards and having hard time keeping up with abomina modern HTML supersets like the one in Angular :)\nAccording to spec, readonly is a boolean attribute, and a boolean attribute is specified as:\n\nThe presence of a boolean attribute on an element represents the true value, and the absence of the attribute represents the false value.\nIf the attribute is present, its value must either be the empty string or a value that is an ASCII case-insensitive match for the attribute's canonical name, with no leading or trailing whitespace.\n\n(emphasis mine)\nSo, according to HTML5, there's no reason to check boolean attribute value. If it's empty, we can remove it, if it has value (any value, although the value is supposed to conform to certain rules too, as described above), we leave it.\nBut of course we can try to be smarter about all this. I'll mark this as possible feature and we'll see if anyone else needs this.\n. Can you give a small example for reproduction?\n. No, I understand. I just wanted to have an example handy for testing.\n. Marking as feature; we should definitely add this.\n. Only after we fix it (I'll try to do it within the next month or so if no one beats me to it)\n. Probably because it tries to parse it as a start tag. Better error notifications are on radar (we're relying on old-ish but heavily modified html parser by John Resig). Please feel free to contribute.\n. Well, technically <, >, etc. should simply be escaped. That's always the best way to go (it's just plain better for compatibility among any HTML environments, parsers, etc.)\n. Yeah, I know how hairy it could get. We'll definitely make those errors more descriptive; hopefully sooner than in 10 years :P\n. Duplicate of #332\n. You can wrap this chunk with  htmlmin:ignore  to at least completely ignore it\n. I'm not very familiar with Grunt, but you run HTMLMinifier as in instructions:\njs\nvar minify = require('html-minifier').minify;\nvar result = minify('<p title=\"blah\" id=\"moo\">foo</p>', {\n  removeAttributeQuotes: true\n});\nresult; // '<p title=blah id=moo>foo</p>'\n. @michaeldewayneharris let me know if it's good\n. But script element is not rendered so why should there be space?\n. Yeah, should be fixed now. Thanks @alexlamsl\n. I think you're looking for preserveLineBreaks=true \u2014 https://github.com/kangax/html-minifier#options-quick-reference\n. We didn't have a chance to add it to the site but the CLI and module have it of course.\n. collapseWhitespace should be true, afaik\nOn Tue, Dec 23, 2014 at 9:32 AM, rexdf notifications@github.com wrote:\n\ndist: { // Target\n        options: { // Target options\n            //removeComments: true,\n            minifyJS: true,\n            minifyCSS: true,\n            preserveLineBreaks: true,\n            //collapseWhitespace: true\n        },\n        files: { // Dictionary of files\n            'public2/index.html': 'public/index.html', // 'destination': 'source'\n        }\n    },\nThe above code cannot remove groups of empty lines.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/315#issuecomment-67930730\n.\n. Works for me:\n\n``` sh\n\nhtml-minifier -v\nhtml-minifier v0.6.9\necho \"x y\" | html-minifier --collapse-whitespace --preserve-line-breaks\n```\n\nMust be something with config of whatever you're wrapping htmlminifier with\n. Thanks, reproduced! Marking as bug.\n. ok, thanks\n. @rainboxx just pushed 0.7!\n. LGTM. Can we make a unit test for this as well?\n. What about gzip? Doesn't seem to work based on \"screenshot\"? :)\n. Other than that, LGTM, thanks @XhmikosR!\n. @XhmikosR Not really, sorry. I might have used it before but can't recall at the moment.\n. Yes, this is not the parser we use. In fact, our parser is not a standalone npm package as far as I know. It's supposed to reference it locally.\n. Oh thanks, I missed it :)\n. No, don't think it's possible at the moment. We can remove empty attributes and/or redundant ones, but not any user-specified ones.\nI'm curious to hear about your use case. Why do you need to remove (non-empty) style attribute completely?\n. Hm, that's an interesting use case. Marking as feature.\n. Does sed use regex? Parser would be best of course. I understand the concern of separation of concerns :) but I'm open to the idea of adding this in minifier \u2014 seems to fit the case and we're already parsing markup so why not perform other modifications of attributes.\n. Good idea. I'd love to have this so please feel free to send a PR.\n. Damn right, it is! :)\nSent from my iPhone\n\nOn 22 Jul 2015, at 20:06, Ant\u00f4nio Vin\u00edcius Menezes Medeiros notifications@github.com wrote:\n+1 for that feature! html-minifier seems to be the best HTML compressor out there!\n\u2014\nReply to this email directly or view it on GitHub.\n. > Is anything particular hindering a new release?\n\nOnly time needed to tag it, update changelog, push, publish, etc. If someone can do it, I'll gladly merge it in.\n. Sure, that would be great!\n. You can now use ignoreCustomFragments option\n. What @bfred-it said\n. This should now be fixed when using new ignoreCustomFragments option\n. Have you tried reducing it to a minimal chunk that freezes it?\n. Well, with invalid markup all bets are off :)\n. Marking as \"feature\" since it's all part of better error reporting that we'll get to at some point\n. Duplicate of #332\n. Oh, whoopsie, sorry :) Too many issues closed...\n. Duplicate of #306, etc.\n. Not sure why would html minifier be taking care of inclusions? Could you explain your use case?\n. Hm, was the failure caused by this change? it must have been, since our tests passed before. We also need a new test for added \"<%=\". Other than that, LGTM.\n. On a second thought, I'm surprised we need \"<%=\" at all. Shouldn't /<%/ catch it as well?\n. That would be great! And in any case, we need an additional test that\nincludes \"<%=\", at least to see that it's failing.\nOn Wed, Feb 25, 2015 at 3:32 PM, Tyler Schwartz notifications@github.com\nwrote:\n\nMy apologies for opening and closing the PR numerous times. I have this\nbad habit of clicking the that button instead of the 'comment' button. I'm\nnot sure why the original regex doesn't allow it but as it stands I get\nfailures on anything that is <%=, that said I can dig into that some more\nif you wish.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/pull/335#issuecomment-75969114.\n. @tschwartz Defintely desired! If you can get to the bottom of it, that would be great. Thanks. I have very little time now (with work occupying most of it).\n. What do you mean by \"creating project branch\"?\n\nOn Wed, Feb 25, 2015 at 9:20 PM, Tyler Schwartz notifications@github.com\nwrote:\n\n@kangax https://github.com/kangax Would you mind creating a project\nbranch? I'm somewhat in the same boat with work so I don't have any\ntimelines as to when this will be complete.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/pull/335#issuecomment-76047603.\n. Nope, we don't do anything like that. Just PR into gh-pages (anyone will\nstill be able to pull your fork and check it out; or even see on the web\nthrough your username.github.io/...)\n\nOn Thu, Feb 26, 2015 at 3:33 AM, Tyler Schwartz notifications@github.com\nwrote:\n\nI guess it would have been better to ask you if you had a branching\nstrategy that was more complex than just PRing into gh-pages. If you were\nto create a branch off of gh-pages then I could PR into that which would\nmake it easier for you to check it out or to collaborate with others on the\nsame feature.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/pull/335#issuecomment-76111702.\n. Current workaround would be to use  htmlmin:ignore  for this\n. Closing until we have a reproducible test case ;)\n. Ah, interesting. I've never heard of it. But I do see this in credits:\nMinimize is influenced by the HTML minifier of kangax. This module parses the DOM as string as opposes to an object. However, retaining flow is more diffucult if the DOM is parsed sequentially. Minimize is not client-side ready. Kangax minifier also provides some additional options like linting. Minimize will retain strictly to the business of minifying. Minimize is already used in production by Nodejitsu.\n\nIt should be fairly easy to plug it in our benchmark. I don't have time right now, but if someone can do it and send PR, that would be great!\n. It doesn't work because it's not part of an attribute. Marked as possible feature to see if we can do anything about this kind of markup.\n. Tagged, pushed. Cheers.\n. Ahhh, good point. Check now? Just did npm publish.\nOn Sat, Apr 4, 2015 at 4:55 PM, Val\u00e9rian Galliat notifications@github.com\nwrote:\n\nAwesome! Still not up-to-date on npm\nhttps://www.npmjs.com/package/html-minifier though (sorry for\ninsisting). Or maybe the npm publish is done in some kind of automatic\njob, and it's just a matter of time?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/pull/341#issuecomment-89590654.\n. Duplicate of #332\n. That would be great! Thanks.\n. Done\n\nOn Sat, Apr 4, 2015 at 8:59 PM, Zoltan notifications@github.com wrote:\n\nThanks for merging! Please don't forget to eventually bumb version to\n0.7.2 to make npm update -g html-minifier work. Thanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/347#issuecomment-89640316\n.\n. Nope, can't merge anymore it seems :/\n. Duplicate of #332\n. Duplicate of #332\n. You can surround it with  htmlmin:ignore  to completely ignore it\n. Hey @wankdanker. Unfortunately it's not possible. I've answered this before in the other tickets here, but since this topic comes up once in a while, I've just added a short section in README on this \u2014 https://github.com/kangax/html-minifier#working-with-invalid-markup \u2014 check it out\n. You can now use ignoreCustomFragments option\n. What @bfred-it said :) I don't see a reason why you'd want to have something like <div /> in your code.\n. Interesting anomaly. Marking as bug.\n. Hm, I just tried it on http://kangax.github.io/html-minifier/ and can't reproduce (with collapseWhitespace on but conservativeCollapse off)\n. Should work now\n. Thanks @hadfieldn! I'd love to see couple unit tests for this but I don't think we have anything that's testing our CLI yet. If you could add, that would be great, I'm merging anyway. \n. What about all the other MathML tag names? Technically we only support HTML now\n. @Recmo oh, got it, makes sense. I'm really short on time now so please send PR (+ a minimal unit test) and I'll gladly merge. We can investigate other MathML tags later!\n. How will this work without parser? https://github.com/kangax/html-minifier/blob/gh-pages/Gruntfile.js#L69\n. I'm saying if we specify main to be src/minifier, how will it work if src/minifier can't work on its own (without parser)\n. Ahha! Makes sense then, merging.\n. Can you give an example / failing test case?\n. I can reproduce and it seems to be a problem only when enabling \"Minify CSS\"\n. Thanks @silverwind\n. Duplicate of #332\n. How would minifier know that <% starts a script? If it's inside a script element, you can use processScripts option, giving it stuff like \"text/ng-template\"\n. Duplicate of #332\n. Interesting. I'll mark it as possible feature for now and we'll see if anyone else needs this!\n. @Meligy I would gladly add this if you can send a PR! :)\n. @bfred-it Definitely a good idea, I've been considering this as well. Marking as a feature.\n. Hm, it's a thought... I'll mark as possible feature for now, thanks!\n. @bfred-it did you have a chance to test it yet?\n. @bfred-it ping\n. Great, thanks!\n. You can use this:\n\n<!-- htmlmin:ignore -->{% if article.content contains \"<img\" %}<!-- htmlmin:ignore -->\n. Duplicate of #332\n. @hwoarangzk but quotes should be html-escaped (&quot;) not slash-escaped\n. > slash-escaped double-quotes can't be used in the html?\nNo, not that I know of.\n. That's a fair request. Marking as feature, thanks! (if you can send PR, that would be awesome of course :))\n. Hm, good question. Probably not then.\n. Oh nice, didn't know about these, thanks!\n. This should be possible within options object to minifyJS, which is then passed to UglifyJS, which supports comments directive \u2014 https://github.com/mishoo/UglifyJS2#usage\n. Good point, not sure how it got there. Marking as bug.\n. Not sure if possible, but it's an interesting idea!\n. You can surround it with  htmlmin:ignore  which will leave them entirely untouched.\n. You can surround them with  htmlmin:ignore  to leave them completely untouched\n. var str = '<div style=\"background:url(\\\"FyueIVXXXXanapXXSutbFXXX.jpg\\\") no-repeat\"></div>';\n                      ^                ^\n. Duplicate of https://github.com/kangax/html-minifier/issues/332\n. Duplicate of #382 \n. Pretty sure style contents should be minified. If not, it's a bug.\n. Something else must be off because it works for me on https://kangax.github.io/html-minifier/\nTried with this:\nhtml\n<!DOCTYPE html><html><head><meta name=\"viewport\" content=\"width=device-width\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><title>Basic Email Example</title><style type=\"text/css\">.ReadMsgBody {\nwidth: 100%;\n}\n.ExternalClass {\nwidth: 100%;\n}\n.ExternalClass {\nline-height: 100%;\n}\nbody {\n-webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%;\n}\n</style>\n</head>\n<body></body></html>\n. Duplicate of https://github.com/kangax/html-minifier/issues/382\n. What's the full html?\n. https://github.com/kangax/html-minifier#working-with-invalid-markup\n. Duplicate of https://github.com/kangax/html-minifier/issues/332\n. Hm, no idea. Please feel free to submit PR if nothing breaks! Thanks.\n. Sorry, I'm not sure I understand the problem. Could you please rephrase it?\n. Gotcha. Well, it's a reasonable request. Marking as possible feature.\n. Oh snap, thanks @XhmikosR! Will make sure to ping you next time.\nSent from my iPhone\n\nOn 14 Sep 2015, at 14:44, XhmikosR notifications@github.com wrote:\nI wouldn't hurry for this yet because the new versions still have bugs.\nYou also missed the browser version.\n@kangax: better ping me in the future for lib updates and I'll try to have a look asap.\n\u2014\nReply to this email directly or view it on GitHub.\n. This seems like something to ask in grunt plugin's issue tracker?\n. No idea, sorry.\n. That's a pretty good idea! Thanks.\n. Nope, it's not a valid HTML(4 or 5). But not to worry! Minifier got you covered, just take a look at \"customAttrAssign\" in options \u2014 https://github.com/kangax/html-minifier#options-quick-reference\n. Nice, thanks! \n\nI'm on a phone now, can't check, but I wonder if we handle regular attributes same way?\nAlso, what if we use trimWhitespace instead, unifying behavior across regular and custom attributes? trimWhitespace does \\s replacement so maybe we should account for newlines in there instead?\n. Thanks!\n. Hmm... good catch. Unfortunately, I think map would still be a brittle solution (although perhaps less brittle than /^on.*/) due to vast number of events across different implementations \u2014 both standard and non-standard/proprietary, older and newer, deprecated and experimental, platform-specific, and so on.\n. I think it wouldn't hurt to expose it.\nSent from my iPhone\n\nOn 26 Jan 2016, at 07:06, Alex Lam S.L. notifications@github.com wrote:\nIf we were to implement a flag say customEventAttributes and default it to /^on/, would that addresses this?\nI am asking because currently I have custom code minifying AngularJS attributes, and at least half of those can be combined with this custom flag if implemented.\n(The other half being attributes that are expected to return a value, so the current minifyjs logic doesn't apply cleanly to it...)\n\u2014\nReply to this email directly or view it on GitHub.\n. You should probably ask this in gulp's project\n. Cool, we'll see what we can do!\n. Yep, we should probably be smarter about this. Notice that this doesn't happen with:\n\n<a title=\"foo 'bar' banana\"></a>\n..because we always normalize to double quotes for attribute values.\n. Btw, this shouldn't happen if you set quoteCharacter: \"'\" option\n. This is now implemented!\n. No reason, it's just a very rarely used \"feature\" so that's probably why no one brought it up yet.\n. Duplicate of #288 \n. @5lava apparently the problem was in our 3rd party (but heavily modifed) parser \u2014 it was ignoring everything within noscript. Fairly easy fix and done \u2014 https://github.com/kangax/html-minifier/commit/854d87e4fb54684428ffc6cde80820b5665bb53b\n. Yep, for the 3 and 4, we might be able to be smarter and only leave quotes when it's the last attribute. Right now it's a dumb check for trailing slash of an attribute value \u2014 https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js#L111-L112\nI'll look into 1 and 2 tomorrow.\n. /cc @mathiasbynens \n. @mathiasbynens hm, i just looked through older issues and actually the problem was that we were losing traling slash in url's (which results in extra redirect as far as I understand) \u2014 https://github.com/kangax/html-minifier/issues/91\nSo we could only remove quotes from url-containing attributes, although that's probably more difficult to determine than just if we're on the last attribute.\n. @5lava may I ask which site you're using this on that you have 701391 requests? :)\n. Have you seen https://github.com/yaniswang/HTMLHint?\n. Can someone make a small reproducible test case? Could it be related to whichever build tool is wrapping minifier?\n. How are you running it? (exact configuration)\n. Well, you should find what's causing the hang. Nothing we can do otherwise. When you find it, feel free to open an issue if it doesn't exist already.\n. @aburi there's nested double quotes inside double quotes so how can we parse this? (not knowing that {% starts special context)\n. See here \u2014 https://github.com/kangax/html-minifier/commit/99823dfd1983502c84dfd2b0be0cde85a7cf17e6#diff-6041927ff3475da14e6a01e7dfdad8a9R874\n. For grunt you'll probably need to wait for grunt plugin to update\n. You can use customAttrSurround for this \u2014 https://github.com/kangax/html-minifier/blob/gh-pages/tests/minifier.js#L521-L537\n. Hm, this is what I get:\nhtml\n<picture><source media=\"(min-width: 900px)\" srcset=the-sun-and-the-moon@3x.webp type=image/webp><source srcset=the-sun-and-the-moon@2x.webp type=image/webp><source media=\"(min-width: 900px)\" srcset=the-sun-and-the-moon@3x.jpeg><source srcset=the-sun-and-the-moon@2x.jpeg><img id=c-photo alt=\"The sun and the moon.\"></picture>\n. I think we can close this as duplicate of #80 \n. Yep, it's part of AudioTrackList \u2014 http://www.w3.org/TR/html51/single-page.html#audiotracklist \u2014 although we're not checking tag name. This is how it got in in the first place \u2014 https://github.com/kangax/html-minifier/issues/63#issuecomment-37763316\n. Yes, we can be more strict, although we encourage valid markup so you'd need to write data-enabled. I'll keep this open as a potential feature and we'll see if anyone else runs into this or has any ideas.\nSent from my iPhone\n\nOn 02 Nov 2015, at 10:34, Denis Ciccale notifications@github.com wrote:\nok, then i will just use a custom is-enabled attr. however a more powerful solution would be knowing the scope of the attribute to actually apply the minifying rule or not. this could mean a major change of course.\nor i should stick to html conventions and check for the attribute presence instead of its value.\nwhat are your thoughts?\n\u2014\nReply to this email directly or view it on GitHub.\n. What's the purpose of that call in the first place?\n. Ok, let's remove it then.\n. Looks great, thanks @genintho \n. Something about space around svg tags \u2014 https://travis-ci.org/kangax/html-minifier/jobs/90624647#L283 \n\n(no time to look more into it now)\n. /cc @XhmikosR \n. I think the space difference is because \"svg\" is now part of \"special\" and we should just fix tests.\n. Hold on a sec. Are you sure this is correct?\nTo quote the spec:\n\nThe spellcheck attribute is an enumerated attribute whose keywords are the empty string, true and false. The empty string and the true keyword map to the true state. The false keyword maps to the false state. In addition, there is a third state, the default state, which is the missing value default (and the invalid value default).\nThe true state indicates that the element is to have its spelling and grammar checked. The default state indicates that the element is to act according to a default behaviour, possibly based on the parent element's own spellcheck state, as defined below. The false state indicates that the element is not to be checked.\n\nSo with this change, we'd be changing spellcheck's true to default which doesn't seem identical.\n. Since this is not HTML (and minifier only works with HTML), you need to ignore <?if, etc. with conveniently-provided ignoreCustomFragments \u2014 https://github.com/kangax/html-minifier#options-quick-reference\n. This is now implemented!\n. Thanks @sapics, I think this looks good :)\n. Good idea!\nSent from my iPhone\n\nOn 21 Nov 2015, at 08:03, Dan Kaplun notifications@github.com wrote:\n\u2014\nReply to this email directly or view it on GitHub.\n. Looks like a bug; in the meantime you can use ignoreCustomFragments\n. Well... minifier originally started as purely HTML-only, hence this (by default falsy) option. If this can be customized easily, is this really a problem? Or just a matter of principal? :)\n. This is invalid HTML so you'll need to escape it\n. Probably related to https://github.com/kangax/html-minifier/issues/426\n. > While div is not strictly supposed to be a self-closing tag\n\ndiv is never supposed to be a self-closing tag \u2014 https://html.spec.whatwg.org/#the-div-element\n. I don't think we have removeIgnored option. Use https://github.com/kangax/html-minifier/blob/gh-pages/tests/minifier.js#L859 instead\n. Oh, removeIgnored is deprecated. It's not in the tests and not in the code. I'll remove it from docs.\n. cc @XhmikosR \n. Thanks! Published.\n. Thanks!\n. Pushed 1.1.0\n. I'm investigating minifySVG failure. It doesn't work because svgo API is asynchronous and our parsing can not accomodate that. Tried to work around but not easy. Will have to revert for now coz I don't have much time at the moment.\n. Published 1.1.1\n. :+1: \n. Thanks :)\n. Ah, we need to replace it with something like /^1.0*$/\nSent from my iPhone\n\nOn Jan 10, 2016, at 11:55 AM, iver56 notifications@github.com wrote:\n\nbecomes\n\nwhich is incorrect. The output should have 1.0001, not 1001\n3c9389a might be the culprit\n\u2014\nReply to this email directly or view it on GitHub.\n. We probably forgot to add it. A PR is welcome, as always :)\n. Yeah, parser requires full tree \u2014 https://github.com/kangax/html-minifier#working-with-invalid-markup \u2014 so unfortunately line by line won't work.\n. So this actually looks great to me! Thanks for tackling it, @alexlamsl \n\n@XhmikosR @duncanbeevers any thoughts before I merge this?\n. Yep, it's coming straight from dist/...min.js\n. Ok, thanks. I'll wait for couple days for @XhmikosR @duncanbeevers\n. I'm wondering if this should be 1.2.0 (new feature) or 2.0 (breaking change)\n. Oh yes, thanks!\n. I love PostCSS too (had great success with it) so I'm all for it.\n. :+1: \n. Hm, I'm still not sure about the point of this. Why are script contents outside of script elements should be minified?\n. Oh wow, didn't know. Then it's a serious bug, of course, thanks!\n. @alexlamsl thanks for all these awesome fixes and improvements lately! much appreciated :)\n. Awesome work @alexlamsl! \nCouple things:\n1. It's probably best to combine gzip results right into 1 table (with ungzipped results)\n2. es6 and es6-draft are the same thing, IIRC so let's ditch the draft one\n3. I've been meaning to add Zopfli and Brotli so this might be a good time for it\n4. Re: pinging site \u2014 I'm all for unorthodox solutions so totally go for it :)\n. Oh good. Sorry, can't keep track of all my open source projects :D\n. > By \"Zopfli and Brotli\" do you mean using them as opposed to zlib's standard gzip routines to see if there's any difference in space savings?\nYes, to see how different compression algorithms work on our minified code. From what I understand, repeating chunks in text are \"good\" for compression algorithms like gzip. And I also recall seeing some Zopfli benchmarks where larger files had better compression results than smaller ones. Given all that, it would be interesting to see overall picture of which savings happen when, with which algorithms, and to which extent.\n. For example, imagine if Brotli (the future compression standard) works so good that our minification becomes unnecessary. Then our work here is done :)\n. Root seems fine. Otherwise gotta move both under benchmarks.\nSent from my iPhone\n\nOn 02 Feb 2016, at 00:05, Alex Lam S.L. notifications@github.com wrote:\nSo I'm testing brotli - it's taking quite a while to compress(), and I think it'd be better to child_process.fork() it rather than blocking the main thread.\nQuestion: given benchmark.js is in root directory, where should I put this benchmark-brotli.js?\n\u2014\nReply to this email directly or view it on GitHub.\n. Fair enough, let's leave these as is.\n\nSent from my iPhone\n\nOn 01 Feb 2016, at 22:59, Alex Lam S.L. notifications@github.com wrote:\nfunction call frequency\nfs.writeFile(Buffer)  1\nfs.writeFile(String)  2\nfs.readFile(Buffer)   1\nfs.readFile(String)   2\nSo I'm not sure if extracting any of those would help with readability. In addition, I can forsee adjusting these site tests independently from one another, i.e. one site changes their layout.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hm, is something wrong with our savings calculations?\n\nTake a look:\n\n. Looks like \"html-minify\" is just a bundled version of ours \u2014 https://github.com/yize/html-minify/blob/master/lib/minify.js#L350-L357\n. Duplicate of #332\n. > IMHO, we can merge benchmark.conf and sample-cli-config-file.conf to save ourselves a bit of maintenance overhead...\nSure, go for it.\n. \\o/\n. Couple nits for the future, Object.create not available in all environments but I guess it's been long enough and IE<9 is largely dead. I would also call matchingMap method createMatchingMap or createMap, but this is obviously a tiny nit.\n. @alexlamsl I added you as a repo collaborator so feel free to close issues that you definitely know are fixed!\n. Awesome work, as usual, @alexlamsl Thanks a bunch!\n. It would be nice for us to track our progress on benchmark files through the commit history. That way we can see exactly how much we've come and how much we progress/regress. @alexlamsl what do you think? Doable?\n. Yeah, I mean something automated that updates numbers in a table for each commit (or for each \"significant\" commit). We can then visualize that table and get a nice graph of our benchmark filesizes going down.\nSomething like this:\n\n. Perfect! Enjoy your travels ;)\n. \\o/\n. That would be amazing. And thanks for all the awesome work so far! :+1: \n. Interesting. Not exactly what I expected (gradual decrease) but great to have nevertheless. Do you know why the spikes and higher current all-time filesize on some of them?\n. Definitely a good idea!\n. Thanks! Just to confirm, this has no backwards-incompatible changes, right?\n. @alexlamsl done!\n. to be used :smile_cat: \n. I don't remember entire context of downlevel-revealed comments but I think what you're saying sounds reasonable.\n. @XhmikosR @alexlamsl I agree that large-ish PR's are usually harder to land, since I tend to postpone reviewing them (when I don't have much time to look through all of it and understand; I just keep moving it for later). Small ones are definitely easier to understand and merge so if at all possible, unrelated changes are best extracted. And, as always, thanks for all the continuous help, folks!\n. @kath4job for the future, it would be best to phrase an issue like this by simply stating that <!-- {{ test }} -->{{if ... }}<p>...</p>{{/if}} unexpectedly removes <!-- {{ test }} --> when \"ignoreCustomFragments\" is on. Took me a while to figure out what the problem is...\nIt's an interesting use case and I think the right outcome here is for minifier to strip a comment:\n{{if ... }}<p>...</p>{{/if}}\nEven though \"ignoreCustomFragments\" is on, we can't be aware of an outer context. If we try to parse input as HTML first \u2014 to be aware of the context \u2014 then we run into the issue of that markup not being valid HTML due to the presence of all that stuff that has to be ignored, and the entire parsing process goes to hell.\nIt's a catch 22.\nFor this reason, we can only ignore custom fragments as the very first step of minification, before trying to parse/minify anything. After that, removeComments logic kicks in. Two of these processes are independent and are unaware of each other, hence the removed fragment. In other words, removeComments takes precedence because it runs after ignoreCustomFragments.\nWe should definitely mention this in the docs but I think this is the correct behavior.\n@kath4job @alexlamsl what do you think? Does this make sense? Is there anything else we can do without shooting ourselves in the foot?\n. Yep, I figured that. Thanks for taking care of it!\nSent from my iPad\n\nOn Feb 28, 2016, at 11:45 PM, Alex Lam S.L. notifications@github.com wrote:\n@kangax in terms of expected behaviour we are on the same page.\nYou might already know, but just in case I'd like to clarify that the bug is not just comment being removed. It is this:\n{{comment}}{{if}}blah{{/if}}\ngetting turned into this:\n{{comment}}blah{{if}}\ndue to the assumption of sequential replacement.\nI have an idea to fix this (the suggested fix above doesn't give our expected outcome...) - will post as soon as I'm back to a real keyboard.\n\u2014\nReply to this email directly or view it on GitHub.\n. I see you're having a lot of fun with this :)\n. Do we know how this affects minifier performance?\n. Does it mean that \"eloquentjavascript\" was rendering incorrectly before? With some spaces removed?\n. Cool, feel free to merge (once it's rebased). As long as all tests are passing and code doesn't look too cryptic, I'm ok :D\n. Wait, why is <script>\nalert(1)\n</script> expected?\n. So the behavior among Chrome, WebKit, Mozilla, and Edge are different? Could you check all of them please?\n\nSent from my iPhone\n\nOn 10 Mar 2016, at 10:10, Alex Lam S.L. notifications@github.com wrote:\nFWIW, Chrome (on Android) doesn't work at all with  and  alone - it needs // or /* */, which I guess means it doesn't support the syntax, period. \n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah, I'm inclined towards that too.\n. @alexlamsl @XhmikosR mind popping into chat? wanted to discuss next release.\n. I think this LGTM so merging. Was minifyJS not working in a browser before?\n. Perhaps <object>?\n. HTML is hard :D\n\nOn Sun, Mar 6, 2016 at 5:28 PM, Alex Lam S.L. notifications@github.com\nwrote:\n\n... I've just discovered  as well [image: :sweat:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/pull/538#issuecomment-193008516.\n. Not sure it's worth adding support for spacer. It's deprecated, no?\n. > So what are your thoughts on sparing  and  when class attribute is defined?\n\nThat's expected. We should make it very clear in the docs. Ideally, they need to be ignored via config or something.\n. :+1: \n. Hm, do all browsers parse/tolerate it well?\n. @mathias do you know of any problems with this? Safe to add?\n. Whoops, I meant @mathiasbynens\n. @alexlamsl this is suuuuper helpful! You're amazing, thanks :heart: I'll tag and push the release with this list once we finalize all the existing PR's\n. Perfect, I'll tag and release as soon as I can! Thanks for all your help again.\n. So what's on the menu for 1.4.0? :)\n. Yeah, perhaps... How about reordering of attributes for better gzip compression? That's one of the more interesting optimizations I can think of.\n. :+1: \n. Thanks for updating! Website, however, is just an example; most of the people use command line (npm package) and make their own configuration.\n. Long time coming and is much needed by now! :)\n. Next step \u2014 ES6 via babel :)\n. > @kangax is that the same babel that broke and went onto the news a few days back?\nNope, nothing to do with Babel. Babel broke because the author of one of the (npm) dependencies pulled them out.\n. Published, thanks for all the fixes!\n. Good, I was just about to ask if you could do it. Thanks!\n. I'll be on a plane for the next few hours but I'll try to push a new release (with the fix) to npm.\nSent from my iPhone\n\nOn 21 Mar 2016, at 19:24, Yulia Tsareva notifications@github.com wrote:\nSince version 1.3.0 html-minifier silently changes order of elements if inline elements contain block elements.\nE.g., Hello after minification looks like Hello.\nI understand that such code is not valid in HTML5. But the browsers render it and there are projects with such peaces of code.\nSome popular dev utils depend on html-minifier and now them generate wrong minified code (e.g., gulp-htmlmin and webpack html-loader).\nI suppose such code manipulation is undesirable for minifier. Or at least it should be published as major update to not break existing projects.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. done!\n. I just want us to be cautious and try not to dig ourselves into a hole with all the extra and extra flexibility. Historically, html-minifier needed properly escaped input. If we can add support for browser-like behavior (and what kind of behavior is it anyway? don't browsers follow html5 one? or do they diverge?) without much hassle, let's try it.\n. Nice, I'm ok with this :)\n. Thanks!\n. This is exciting. What are the actual gzip savings you saw from doing sorting? We should also check brotli.\n. Nice! Other things to try \u2014 sorting inline styles? :) Although... I'm not sure we can reorder style values and have same behavior (in case one overwrites another and so on).\n. Also, one idea I had was to employ \"adaptive hybrid\" approach where we can test if sorted attributes result in smaller or larger output and chose the best branch. But that should probably be done a level higher than html-minifier...\n. @alexlamsl hey, were these results you pasted as a table done after sorting alphabetically or sorting by longest chain?\n. @alexlamsl ah, I was curious about deltas \u2014 if we get even better wins than the ones you pasted earlier.\n. So... sometimes you get better win when they're sorted by most frequent, sometimes when by longest occurring chain, and sometimes without any optimizations?\n. Looks great. I would just rename Chain to TokenChain for clarity.\n. :+1: \n. /cc @XhmikosR \n. LGTM (although no experience with either)\n. LGTM!\n. Sure, @alexlamsl what's your username there?\n. Added, try now\n\nOn Sat, Apr 9, 2016 at 7:41 PM, Alex Lam S.L. notifications@github.com\nwrote:\n\n@kangax https://github.com/kangax same handle for Github and npm - thx!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/609#issuecomment-207901650\n. Enjoy :)\n. :+1: \n. I would also like to include Facebook in the results (I'll see if I can get a test user)\n. Let's do major to play it safe.\n. I would drop 0.10 IIRC quite few popular projects are dropping it recently.\n. this is nuts. I haven't worked on html-minifier in a while. Don't recall exactly what we used phantom for. I'm all for removing it, but what would be a good replacement? Puppeteer?. Hm... yeah, it does make sense to localize these. Thanks.\n. Btw, this could just be for ( var i = handler.customAttrSurround.length - 1; i--; ) {\n. Hm, we should probably extract args into an object at some point, now that it's up to 6\n. If it's <img src=\"foo\" title=\"foo\"/> it will remove quotes from \"src\", right (since it's not the last attribute)? It could make sense to add test for that particular case.\n\nAlso, as far as attribute goes \u2014 we're keeping quotes around all of them, not just \"src\" (based on what I see in your changes), right? Do you think we should perhaps check attribute name or is that a path to more issues in the future?\n. Makes sense!\n. Can we separate these into a separate test, for better readability and maintenance?\n. Also this one\n. I would move this in a separate test as well\n. And this\n. The side effect here is that style selectors like div[id], [lang], etc. will stop working. But that's true for any redundant attribute removal and is a rare case anyway.\n. Btw, I usually do (var i = attrs.length - 1; i--; ) in cases like this\n. can you please move . to the next line, for consistency\n. Let's move this to cli.js as it's meant to be called separately\n. I like to just do != null in cases like this\n. I think jshint ignores sloppy equal comparison when it's against null for this exact reason\n. Why is there \\n here (and in other places)?\n. Oh, we already had this (max line length). Nevermind.\n. What was happening with this before the fix?\n. What is this for?\n. Yeah, that's cool. I'm ok with it.\n. Hm, I thought it'd be pretty unlikely that random number would collide with user input. But I guess this doesn't hurt and is not in any frequently-executed code.\n. Ok, that's one big &$% call expression :) Best to refactor.\n. This is all duplicated across tests, right? Definitely need to DRY it up.\n. :+1: thanks :)\n. Definitely looks much better, thanks! One final nit though is that we can probably still cut down on repetition a bit more here. There's all this similar boilerplate with reading file, throwing error, setting headers and so on, which we can extract into a generic method. It will help with accidentally changing something in one location (e.g. testWillPeavy) and forgetting to change another. And it will make it much easier to test other pages if the need arises. Or is there too much differences between them?\n. Shouldn't num already be a string? This is redundant double-conversion, it seems.\n. :+1: \n. Oh, I see what you did there...\n. Nice, yet another byte saved :)\n. I would add a comment just to make it clear what's going on \"0.9000\" -> \"0.9\", \"1.0\" -> \"1\", \"1.0001\" -> \"1.0001\"\n. Hm, we should probably update comments about \"HTML 4.01\" since we longer constrain ourselves to it.\n. Should we maybe put these in a map? Feels weird to have them listed like this.\n. Same here. What's so special about these particular tags?\n. Hmmm... not very readable is my only concern. Everything else looks great. Maybe add support for passing either string or an array to createMap?\n. I was just writing about reusing urls between benchmark and backtest :)\n. 6 args is kinda scary; can we make it prettier? :)\n. Just need a little better formatting here (for easier reading)\n. Is scoping with parens necessary here?\n. We should link to an issue or describe what an issue is coz it's difficult to understand what's being tested otherwise.\n. Hm, it's probably more theoretical than anything, but I wonder if we really care about leaving space in cases like this...\n. Are you sure we don't want \\s$ instead of $?\n. I think substr is non-standard (slice is better)\n. Hm, why is this space necessary here?\n. I think isBooleanValue (instead of draggableBoolean) would be clearer here.\n. Could you please add a comment as to what \"squash\" means here (since it's kind of ambiguous).\n. god, what an abomination...\n. LGTM but after shortening this line (let's try to keep length <80)\n. Or just attrValue.split(/\\s*;\\s*/g), right? :)\n. Shouldn't video, audio and iframe act the same way as script? Only be removed when they don't have \"src\" attr?\n. Usually better to move var's out of the blocks; alternatively (and ideally) we should just switch to ES6 and let/const\n. How would the output be different with ignoreSyntheticTags: false?\n. Nice, thanks!\n. I wonder what percentage of people use minifier in a browser. Seems like a very very rare usecase (<1%) unless I'm missing something?\n. Thanks. Yeah, it's not really intuitive to me what syntheticTags mean. Could we perhaps say autoGenerated or autoClosing? Or is \"synthetic\" the actual term from the spec?\n. One option is to use Babel. Another option is to use Node (which supports a subset of ES6) and compile (deprecated?) browser version of minifier via browserify, which would \u2014 I hope \u2014 take care of ES6.\n. how about includeAutoGeneratedTags that's true by default?\n. We should probably refactor all these at some point but LGTM for now.\n. Something like abbr: { content: 'phrasing', ... : ... } would remove duplication but will make parsing slower...\n. Early return would be better here (to reduce depth)\n. I think the name is a bit confusing for a function that creates another function. Maybe something like \"makeAttrSorter\"? Although that sounds awful too...\n. Maybe let's call it buildAttr instead? :)\n. I usually name boolean-returning functions as shouldSmth, canSmth, isSmth, etc.\n. So let's rename to shouldSkip... and LGTM after that! :)\n. Hm, I think the convention we follow with undefined checks is to do them via typeof (or just !value if it can never be falsy at that point)\n. Oh come on, we're not even letting our competitors to catch up!!! :laughing: \n. lol\n. Nice. How are you liking VS Code btw? I've been using Atom recently (after having used Sublime for few years) but hear good things about VSC too.\n. \ud83d\udc4d \n. ",
    "mathiasbynens": "All these are optional:\n</html>\n</head>\n</body>\n</p>\n</dt>\n</dd>\n</li>\n</option>\n</thead>\n</th>\n</tbody>\n</tr>\n</td>\n</tfoot>\n</colgroup>\nSome of them are already being removed by the minifier.\nI\u2019m not aware of any problems with omitting the closing table elements like </td>. Anyone?\nI agree tolerating invalid markup is not a good idea. The HTML minifier should expect valid, conforming markup.\n. > From what I can see, img element has EMPTY content model, so can not have end tag. \nWell, it can in (proper) XHTML.\n. See #61 :) Easier than I had thought.\n. For future reference, the current list of boolean attributes in this HTML minifier is the following:\njs\n\"checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected\"\n\nautofocus, multiple, required, hidden, contenteditable, spellcheck. Any other ones?\n\ncontenteditable and spellcheck aren\u2019t proper boolean attributes, although they do get a default value other than the empty string.\nHmm, async, itemscope, and seamless come to mind, but there are probably more\u2026\n. Update: \nbash\n$ curl -s \"http://www.whatwg.org/specs/web-apps/current-work/\" | grep -C 3 \"boolean\\s*attribute\"\nreversed, allowfullscreen, typemustmatch, muted, sortable, novalidate, formnovalidate, open, default, inert, truespeed (along with all the others mentioned in this thread). There may be even more.\nHere\u2019s the full list so far:\nallowfullscreen\nasync\nautofocus\nchecked\ncompact\ndeclare\ndefault\ndefer\ndisabled\nformnovalidate\nhidden\ninert\nismap\nitemscope\nmultiple\nmultiple\nmuted\nnohref\nnoresize\nnoshade\nnovalidate\nnowrap\nopen\nreadonly\nrequired\nreversed\nseamless\nselected\nsortable\ntruespeed\ntypemustmatch\nFor any of these attributes, attributename=\"any-value\" can be optimized into just attributename.\nThen, there are a few non-boolean attributes that take a default value instead of the non-empty string:\ncontenteditable\nspellcheck\nVariations of contenteditable=\"true\" and contenteditable=\"\" can be optimized into just contenteditable. Any other values for this attribute that are not equal to the literal string false map to the default state, meaning e.g. contenteditable=\"lolwat\" or contenteditable=\" true\" (with leading space) can be optimized by just removing the attribute completely.\nVariations of spellcheck=\"true\" and spellcheck=\"\" can be optimized into just spellcheck. Any other values for this attribute that are not equal to the literal string false map to the default state, meaning e.g. spellcheck=\"lolwat\" or spellcheck=\" true\" (with leading space) can be optimized by just removing the attribute completely.\n. contenteditable is not a boolean attribute. Updated the list.\n. True, that\u2019s what it says in the WHATWG HTML spec too (\u201cThe empty string and the true keyword map to the true state\u201d). spellcheck isn\u2019t a boolean attribute either, although it has similar behavior.\nJust saying, we\u2019re just not looking for boolean attributes here, but also for enumerated attributes that get a default value instead of the empty string. My grep trick definitely didn\u2019t catch all of these.\n. @alrra found another attribute that can be optimized: draggable. It\u2019s not a boolean attribute, but its missing default value is auto. So, the HTML minifier could optimize e.g. draggable=\"auto\" into just draggable.\n. @tobaco <a download=\"\"> being the same as <a download> is nothing special; this applies to all HTML attributes. The HTML minifier can optimize all instances of empty attribute values to just the attribute name without an explicit value.\n. So no optimizations for boolean-like attributes? Should there be a separate issue for that?\n. For pages with <meta charset=utf-8> or similar that are saved using UTF-8 encoding this would be safe.\n. Must remain escaped: <, & in some cases (see below), \" and ' in attribute values. And the backtick character too, if you care about old IE. > doesn\u2019t need to be escaped unless it\u2019s part of an unquoted attribute value.\nSee https://mathiasbynens.be/notes/ambiguous-ampersands for some hardcore optimizations you could enable.\n. Even when the last attribute value ends with /, e.g. /logo/, we don\u2019t need the quotes. No browser would parse <img src=/logo/> as if it was <img src=\"/logo\" />.\nNote that /> has no meaning in HTML. It is only relevant in XML documents.\n. This is an improvement but it\u2019s still not fully accurate. The relevant production is NCName: https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-NCName E.g. elem\u00e6nt is valid. There\u2019s an npm package for that\u2122: https://www.npmjs.com/package/ncname / https://github.com/sindresorhus/ncname\nCustom element names (validator) have some further requirements (like - being required) but we probably shouldn\u2019t bother with those at all.\n. Patch: https://github.com/kangax/html-minifier/pull/965. This could be done if the removeTagWhitespace setting is enabled. The docs already warn that this can result in invalid HTML.. I wasn\u2019t yet a maintainer when this was added, so I don\u2019t feel confident taking action on this PR. IMHO, if we want to drop this dependency, we should make sure we have an adequate replacement so as not to lose out on test coverage.. This happens because nytimes.com has the following in their HTML:\n```html\n<!\u2013\u2013\n         0000000                         000        0000000\n       111111111      11111111100          000      111111111\n       00000        111111111111111111      00000      000000\n       000        1111111111111111111111111100000         000\n       000        1111       1111111111111111100          000\n       000         11       0     1111111100              000\n       000          1      00             1               000\n       000               00      00       1               000\n       000             000    00000       1               000\n    00000            0000  00000000       1                00000\n  11111            000 00    000000      000                 11111\n    00000          0000      000000     00000              00000\n       000        10000      000000      000              0000\n       000        00000      000000       1               000\n       000        000000     10000        1     0         000\n       000        1000000 00              1    00         000\n       000         1111111                1 0000          000\n       000          1111111100           000000           000\n       0000          111111111111111110000000            0000\n       111111111        111111111111100000          111111111\n         0000000              00000000              0000000\n  NYTimes.com: All the code that's fit to printf()\n  We're hiring: https://nytimes.wd5.myworkdayjobs.com/Tech\n\n-->\n```\nNote that <!\u2013\u2013 contains two U+2013 characters as opposed to just simple hyphens (i.e. <!--).. https://twitter.com/mathias/status/1055130976370745344. The fix is not yet live on nytimes.com, so for https://github.com/kangax/html-minifier/commit/5494091bcc150b30db71749978cfb32b368111c7 I cheated by temporarily replacing the URL on this line: https://github.com/kangax/html-minifier/blob/5494091bcc150b30db71749978cfb32b368111c7/benchmarks/index.json#L11 with a copy of the HTML response where the two U+2013 characters are replaced with regular hyphens.. Without this patch, the output is:\njs\n'&ampxxx; &xxx &ampampthorn; &thorn &ampampcurren;t &current'\n\u2026which renders as:\n&xxx; &xxx &ampthorn; \u00fe &ampcurren;t \u00a4t\n\u2026whereas the input HTML renders as:\n&xxx; &xxx &thorn; &thorn &curren;t &current. ",
    "SunboX": "https://developers.google.com/speed/articles/optimizing-html?hl=de&csw=1\n. The problem? There's a lot html markup in logs, and tags are html-encoded. If I don't \"clean up\" it looks like this:\nrepeating <strong><code>&amp;nbsp;</code></strong> sequence. Try replacing it with styling.</li>\n<span class=\"presentational-element\">presentational</span> <strong><code>&lt;i&gt;</code></strong> element</li>\n<span class=\"deprecated-attribute\">deprecated</span> <strong>width</strong> attribute on <strong><code>&lt;td&gt;</code></strong> element</li>\n<strong><code>&amp;nbsp;</code></strong> sequence. Try replacing it with styling.</li>\n<span class=\"event-attribute\">event attribute</span> (<strong>onclick</strong>) on <strong><code>&lt;a&gt;</code></strong> element</li>\n. If you run html-minifier on the command line, these logs are useless.\n. That's really great! Thank you a lot! :+1: \n. ",
    "alexlamsl": "I see a possible implementation for this.\nQuestion: do we need an extra flag to enable/disable this feature?\n. So if I understand correctly, we scan through a given tag name collecting statistics, then re-order the attributes by descending frequency?\nMost of the time only shuffling the most frequently-used attribute to the front would suffice, but then if that attribute happens to have the same value across then we can form a longer chain if we perform reordering on the rest as well...\n. I use Web Workers quite extensively in my current project, so may be I could be of service.\nOTOH, Node.js have stalled on the decision to include Web Worker or any APIs similar to it. So what is your thinking on this feature exactly?\n. So I'll need some pointers here - what are the valid (enough) non-ASCII characters that does not need to be escaped in a HTML document?\nI am thinking of tackling this alongside all those weird and wonderful JS/CSS attributes which has escaped characters beyond quotation marks (which we already handle today).\nAs for encoding, I think given the constraints of JavaScript we are probably better off just treating all input as Unicode. I haven't had to use the \"encoding\" section of my web browser for years now.\n. @kangax I'm guessing we need a resync or recreate that repo?\nCurrent plan of action:\n- clone html-minifier as html-lint\n- refactor html-lint to depend on html-minifier\n- strip HTMLLint from html-minifier\n. May I get write permission to html-lint?\n. html-minifer-lint now done and online https://github.com/kangax/html-lint/pull/1\nNext up - removing HTMLLint from here...\n. Reading the specification, then look at one of our benchmarks suggests we can't easily combine <style> contents together either.\nJust encountering the mix of <style>, <link type='text/css'> & <noscript> alone already makes my head spins :sweat: \n. Given my recent experience hunting down bugs, the built-in htmlparser.js actually helps a lot, as not only is it forgiving to non-compliant inputs, minify() has various \"hacks\" that rely on the exact behaviour of the parser.\n. Downlevel-revealed comments have been parsed and optimised even before #524 - and we now gained minification of downlevel-hidden ones as well.\nWhat performance gain do we get if we use both HTML parsers?\n. What do those code snippets do in real life scenarios, and how do they go wrong after minify() which affects the rendering in a web browser?\nAs a quick test, I've thrown the 3 examples into http://kangax.github.io/html-minifier/ and they all seem to give fairly sensible results.\n. But will the output cause a web browser to render differently from the input?\nWe are hacking the HTML specs after all...\n. If the output of minify() is going to be parsed and rendered identically in a web browser as the original input, why does it matter? This is just one of the many ways to perform HTML minifications - others for instance just use a bunch of regex's to get the job done.\nAfter all we aim to reduce the size of an input without (in majority of cases) visual difference when displayed on the web.\n. Take #157 for instance - if we were to parse the HTML exactly, then the <html> within <head> would get merged with the root <html>, nullifying the use of this IE hack. Whereas leaving it as is whilst aiming for other areas to minify would give the desirable result.\n. I think the only example that would matter is if the input and output from minify() gives different results on a web browser.\nI have already mentioned a case whereby parse5 or some other \"standard compliant\" approach would break that rule. Can you provide an example where parse5 would produce a functional output whilst minify() wouldn't?\nBecause if not, then what we will end up doing is fixing up all the corner cases where parse5 breaks, when we have a perfectly functional solution right now. Right now by being tolerant we are actually allowing weird and wonderful hacks of HTML as others try to workaround various web browser implementation differences. If we approach this the other way round as you suggested, we will be forever patching the parser as new hacks are discovered.\n. So just to be on the same page, I assume you mean this example:\nasdf<p>asdfadsf<p><div>asdf</div>\nI just tried it here and it gives the exact same output. So where does that give different rendered results?\n. Well I'm sure Boostrap would be delighted to know this page is about to get obsolete?\n. Here's the example before minify():\n\nTurning all the options off and minify():\n\nI can't say I can see any difference in rendered content...\n. We don't browse the web daily by reading up and down DOM trees, do we? :sweat_smile: \n. I know that page is for CSS-related browser bugs, but the point is that software will always have bugs, and there are multiple web browsers that people use.\nHistorically, web developers employ clever tricks to work around platform-specific behaviours. I can't see why this situation is going to change any time soon.\n. @kangax sure, file an issue which describe this class of parser bugs and I'll have a look at them. :wink: \nI am not against fixing bugs in htmlparser, obviously. However I am not convinced of solutions which involves breaking existing use cases.\n. AFAICT the failing cases are all invalid HTML - whichever conditional comment gets evaluated to true the end result would be two <html>'s with only one </html>\nYour working case is how I'd expect to function.\n. Given that even W3C Validator isn't happy with your example (\"Stray start tag html\"), I don't think we can do much about that.\n. Fair point - though I've checked in real browsers (IE11 and Chrome), and both seems to be equally happy with your example which works with html-minifier\nIs there a reference to using <html> within <head> anywhere which I can read up on about?\n. Given this section in README.MD, I think our hands are a bit tied :sweat:\nAnd within the same article, the preemptive method seems to achieve the same goals and is valid HTML:\n```\n\nminify(<!--[if IE]><![endif]-->\n  <!DOCTYPE html>\n  <!--[if lt IE 7]><html class=\"no-js ie6\"><![endif]-->\n  <!--[if IE 7]><html class=\"no-js ie7\"><![endif]-->\n  <!--[if IE 8]><html class=\"no-js ie8\"><![endif]-->\n  <!--[if gt IE 8]><!--><html class=\"no-js\"><!--<![endif]-->\n    <head>\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n      <meta charset=\"utf-8\">\n      <title>Document</title>\n    </head>\n    <body>\n    </body>\n  </html>, {\n    collapseWhitespace: true,\n    removeOptionalTags: true\n  });\n\n'[if IE]><![endif]<!DOCTYPE html>[if lt IE 7]><html class=\"no-js ie6\"><![endif][if IE 7]><html class=\"no-js ie7\"><![endif][if IE 8]><html class=\"no-js ie8\"><![endif] [if gt IE 8]><!<![endif]Document'\n``\n. @kristerkari just to confirm my understanding of this hack - is the only case of this beinginside of` and nothing else in the wild?\nIf so, I may have an idea on fixing this... :smiling_imp: \n. Amazon and Ebay seem to be happily using the HTTP response header to handle X-UA-Compatible, but then I guess there will be instances, e.g. free web hosts, which people will resort to this hack.\nWould love to figure out some actual sites using this hack. Having said that, the \"fix\" I have in mind is an one-liner to htmlparser.js, assuming I got it right :sweat_smile: \n. From the article you referenced, this hack is solving additional problems on top of conditional stylesheets:\n\nThe Compatibility View icon is displayed in IE8 and IE9 if you are not setting the X-UA-Compatible header in a server config.\n\nAnd later:\n\nThe conditional classes are then assigned in a second html tag that appears after the <meta http-equiv=\"X-UA-Compatible\"> tag in the document.\n. I think this is fixed by #510 - please reopen if that's not the case.\n. HTMLParser already points to the location where the error is: https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlparser.js#L236\n\nI am not sure what more we can do beyond that, as even the parser is just hitting a brick wall here (of negative pattern matches).\n. Closing for now. Feel free to reopen if there are any concrete suggestions.\n. @papandreou please file a separate issue.\nI won't be surprised to see conservativeCollapse having a few hiccups as I haven't been using it myself...\n. With the current version you can do this already:\n```\n\nminify('', {ignoreCustomFragments:[/{{{[\\s\\S]*?}}}/]});\n''\n```\n\nSo I guess this is now considered fixed?\n. @skumaresan I don't think what you said is related to this issue. Please file a new one?\n. Just tried:\n<!--[if IE]><script><!--\nalert(1)\n--></script>abc<![endif]-->\nand I couldn't find a web browser that wouldn't show abc.\nSo why are we expecting minify() to work in this case again? :sweat_smile: \n. Is this still an issue? node benchmark can now handle a >3MB file without blowing up...\n. @conmarap while working on #494, I observed much performance improvements with larger files over the history of this repository.\nUnless you have particular examples where the current version of html-minifier still chokes over, I think this issue have largely been resolved.\n. So while XML would accept such a tag name, it is strictly forbidden in HTML5.\nBTW, the project you've mentioned above has now moved away from using begriffs.pagination.\n. I do wonder who write class names in random orders inside a HTML page to begin with.\nOTOH, implementing this is probably simple enough, and gated by a flag makes it pretty safe as well.\n. Is this still a problem on the current version? I'd think this commit would have fixed that...\n. We now read in all input as Buffer before converting to String, so this is no longer an issue.\n. I don't see how we can implement this in html-minifier further than what is done in uglify-js already.\n. Taking the examples from here\n```\n\nminify(... <template ngFor #hero [ngForOf]=\"heroes\">\n...   <hero-detail *ngIf=\"hero\" [hero]=\"hero\"></hero-detail>\n... </template>\n... <form (ngSubmit)=\"onSubmit(theForm)\" #theForm=\"ngForm\">\n...   <div class=\"form-group\">\n...     <label for=\"name\">Name</label>\n...     <input class=\"form-control\" required ngControl=\"firstName\"\n...       [(ngModel)]=\"currentHero.firstName\">\n...   </div>\n...   <button type=\"submit\" [disabled]=\"!theForm.form.valid\">Submit</button>\n... </form>\n..., { customAttrSurround: [ [/#/, /(?:)/], [/*/, /(?:)/], [/[?(?/, /(?:)/] ], customAttrAssign: [ /)?]?=/ ] })\n\n<template ngfor #hero [ngforof]=\"heroes\">\n<hero-detail *ngif=\"hero\" [hero]=\"hero\"></hero-detail>\n</template>\n<form (ngsubmit)=\"onSubmit(theForm)\" #theform=\"ngForm\">\n<div class=\"form-group\">\n<label for=\"name\">Name</label>\n<input class=\"form-control\" required ngcontrol=\"firstName\" [(ngmodel)]=\"currentHero.firstName\">\n</div>\n<button type=\"submit\" [disabled]=\"!theForm.form.valid\">Submit</button>\n</form>\n```\n. @duncanbeevers do we still need to implement anything beyond the example above to make Angular 2 work?\n. @uglow looks the same as the one I gave in https://github.com/kangax/html-minifier/issues/289#issuecomment-180971821 ?\nUnless they are planning on introducing new syntaxes, I think we have resolved this one.\n. @andreialecu wow, that's... crazy :see_no_evil: \n. @kangax if I am reading what @andreialecu refers to correctly, things like a?=\"b\" never needed customAttrAssign as a? is just a valid attribute name on its own...\n. Seems to work using ignoreCustomFragments:\nvar input = \"<?php $checked = $cust_row['gender']==1 ? 'checked' : ''; ?>\\n\" +\n            '<label class=\"radio-inline\">\\n' +\n            '    <input type=\"radio\" name=\"gender\" value=\"2\" <?php echo $checked;?> /> \\n' +\n            '    Male \\n' +\n            '</label>';\nminify(input, {ignoreCustomFragments:[/<\\?php\\s.*?\\?>/]});\n. Fixed by https://github.com/kangax/html-minifier/commit/c4a6d6fd47af75200ef2e1e17c12c622387df0c5\n. As mentioned in #426 and #493, ignoreCustomFragment can be utilised to avoid minification of specific boolean attributes in your project.\nSo is that good enough for the use case here, or do we want a more general flag that applies to all boolean attributes (since listing them all out in ignoreCustomFragment would be a bit of a chore :sweat_smile:)?\n. Done with https://github.com/kangax/html-minifier/commit/45fa306a68140bcc0cb46d35c801d478a61bfccc\n. Hmm, this smells like #435 \n. I think this is fixed by #510 - please reopen if that's not the case.\n. Testing with the current master:\n```\n\nminify(''\n```\n\nSo I think this issue has been fixed a while ago?\n. Or just use ignoreCustomFragments:[/{{.*?}}/]?\n. @ld0rman actually customAttrSurround does work with your example. Here's a slightly more complicated one:\n```\n\nminify(... <div>\n...     <input\n...         {{#if type = \"a\" }}\n...             type=\"hello\"\n...         {{elseif type }}\n...             type=\"{{ type }}\"\n...             placeholder=\"world\"\n...         {{else}}\n...             type=\"text\"\n...         {{/if}}\n...         value=\"{{value}}\"\n...     >\n... </div>\n..., {\n.....   customAttrSurround: [ [ /(?:(?:{{.?)?}})?/, /(?:{{(?:.?}})?)?/ ] ],\n.....   collapseWhitespace: true,\n.....   removeTagWhitespace: true,\n.....   removeAttributeQuotes: true\n..... });\n''\n``\n. https://github.com/kangax/html-minifier/issues/361 could be a likely cause for this issue\n. This should now be fixed in1.2.0on npm. If any of you still encounter the problem please reopen this issue.\n. Hmm, regardless ofremoveComments,collapseWhitespace` is misbehaving:\n\n```\n\nminify('hello  cruel  world', {collapseWhitespace:true});\n'hello cruel world'\n```\n\nNote the removed whitespaces. At the very least I would expect one of the two whitespaces to be kept.\n. @jordansexton looks fixed in current version on npm\n```\n\ngulp fail\n[13:48:32] Using gulpfile gulp-uglify-htmlmin-bug\\gulpfile.js\n[13:48:32] Starting 'fail'...\n[13:48:32] Starting 'clean'...\n[13:48:32] Finished 'clean' after 15 ms\n[13:48:32] Starting 'minify:html'...\n[13:48:32] Finished 'minify:html' after 46 ms\n[13:48:32] Starting 'minify:js'...\n[13:48:32] Finished 'minify:js' after 9.7 ms\n[13:48:32] Finished 'fail' after 76 ms\n```\n\nPlease reopen if this is still an issue for you.\n. That is due to the trailing / in the href attribute value. This is now improved in the latest commit to <link rel=canonical href=http://www.keenora.de/ > (note the space before > to avoid confusion with self-closing tags)\n. I guess this is related to https://github.com/nodejs/node/issues/2835\n. I guess we'll defer this to iconv...\n. svgo seems to be using async-style API which isn't compatible with html-minifier atm.\nI think in the general case require('html-minifier/src/htmlparser') is the way to go. The current custom processors are defined for minifyCSS, minifyJS and minifyURLs.\n. #378 not yet possible, everything else works.\nSorry for misreading this issue then - reopening...\n. Do we still want this, now that removeOptionalTags have incorporated HTML5 omission rules?\n. @jesseray @mattdipasquale removeOptionalTags has been improved in #488 and now conforms to HTML5 tag omission rules.\nIf any of you thinks this feature is still necessary, please let me know and I'll reopen the issue.\n. Wouldn't <!-- htmlmin:ignore --><!--googleon: all--><!-- htmlmin:ignore --> work in this case?\n. AFAICT <!-- htmlmin:ignore --> does disappear after minification:\n```\n\nminify(<!--testing Google comments-->\n    <p>This is a paragraph that will be indexed by Google.</p>\n    <!-- htmlmin:ignore --><!--googleoff: index--><!-- htmlmin:ignore -->\n    <p>This is a paragraph that will NOT be indexed by Google.</p>\n    <!-- htmlmin:ignore --><!--googleon: index--><!-- htmlmin:ignore -->, {\n    collapseWhitespace: true,\n    removeComments: true\n  });\n\n'This is a paragraph that will be indexed by Google.googleoff: indexThis is a paragraph that will NOT be indexed by Google.googleon: index'\n``\n. I can foresee this interacting badly withignoreCustomFragments` if implemented as suggested.\n@dlmiles I assume my suggestion above with <!-- htmlmin:ignore --> solves your problem. If not please hoiler and I'll reopen this issue.\n. If we were to implement a flag say customEventAttributes and default it to /^on/, would that addresses this?\nI am asking because currently I have custom code minifying AngularJS attributes, and at least half of those can be combined with this custom flag if implemented.\n(The other half being attributes that are expected to return a value, so the current minifyjs logic doesn't apply cleanly to it...)\n. @kangax this is also implemented now.\n. I guess this should migrate alongside #80 to the new repository.\n. Lint functionalities are now at https://github.com/kangax/html-lint\n. So as stated in https://github.com/kangax/html-minifier/issues/493#issuecomment-183624538, you can ~~ab~~use ignoreCustomFragment to ignore these attributes in your case.\n. So I think we already support this through ignoreCustomFragments:\n```\n\nminify('', {\n...   collapseBooleanAttributes:true\n... });\n''\nminify('', {\n...   collapseBooleanAttributes:true,\n...   ignoreCustomFragments: [/enabled=\".*?\"/]\n... });\n''\n``\n. @terry-webfox @mosbth since you two have reproducible environments, may I ask you to:\n- install the latest version (1.1.1)\n- confirms the issue still exists\n- comment out [this line](https://github.com/kangax/html-minifier/blob/gh-pages/cli.js#L242)\n- run again to see if the problem persists?\n. @mosbth can you runnode` on the machine?\n\nIf so, try fs.accessSync('/path/to/conf') and see what returns?\n. @mosbth I meant to say fs.accessSync('/path/to/file.conf', fs.R_OK)\n. @mosbth definitely not available on that version of Node.js\n@kangax I don't think we need the call to this, plus there are related issues that imply this is not entirely reliable. Would it be okay to remove a call to this altogether?\n. AFAICT, it is to check if the configuration file is accessible - which I think is duplicating the exception to be potentially thrown by readFileSync()\n. Interim workaround may be minifyjs:{quote_style:1}\n. As specified here, it tells minifyjs to use ' for strings thus avoiding this &quot; issue.\n. The other workaround would be to set preventAttributesEscaping to true\n. @fgirardey taking the example from your link:\n```\n\nminify(... <template>\n...\n...   <!-- Attribute binding -->\n...   <my-element selected$=\"{{value}}\"></my-element>\n...   <!-- results in <my-element>.setAttribute('selected', this.value); -->\n...\n...   <!-- Property binding -->\n...   <my-element selected=\"{{value}}\"></my-element>\n...   <!-- results in <my-element>.selected = this.value; -->\n...\n... </template>\n..., { customAttrAssign: [/\\$=/], collapseWhitespace: true, removeAttributeQuotes: true, removeComments: true })\n\n''\n```\nIs that how you'd expect it to work?\n. @cpboyd minifyCSS uses clean-css, so I can't see an easy way to work around this rather than minifyCSS:false\nThey don't have any data-style or other alternative attribute names in Polymer for avoid name collision?\n. Fixed by https://github.com/kangax/html-minifier/commit/345e68dea9c634f03a4c1174daf3f0fa2cea331f\n. Similar to https://github.com/kangax/html-lint, this can be done as a separate project which depends on this module.\n. This is same as #459, which is now fixed\n. You can use ignoreCustomFragments to handle that:\n```\n\nminify(<ul class=\"nav navbar-nav navbar-right\">\n    @if(Auth::user()->type <= 4)\n        <li><a href=\"/orders\"><i class=\"fa fa-shopping-cart\"></i> <span class=\"nav-name\">Orders</span></a></li>\n    @endif\n    @if(Auth::user()->type <= 3)\n        <li><a href=\"/users\"><i class=\"fa fa-users\"></i> <span class=\"nav-name\">Users</span></a></li>\n    @endif\n</ul>, {ignoreCustomFragments:[/@[a-z]+(?:([^()](?:([^()])[^()])))?/]});\n\n<ul class=\"nav navbar-nav navbar-right\">\n@if(Auth::user()->type <= 4)\n<li><a href=\"/orders\"><i class=\"fa fa-shopping-cart\"></i> <span class=\"nav-name\">Orders</span></a></li>\n@endif\n@if(Auth::user()->type <= 3)\n<li><a href=\"/users\"><i class=\"fa fa-users\"></i> <span class=\"nav-name\">Users</span></a></li>\n@endif\n</ul>\n``\n. @jAddict7 I think the problem has been addressed - if not please reopen this issue.\n. I guess this is pretty much a duplicate of #415 - closing\n. Actually, hold the horses - I need to think aboutattr.customClose...\n. Okay - it is working as expected even for that corner case; if the attribute is removed by a template engine, the preceding space would still prevent confusion over/>`\n. @kangax would you mind having a look at this? The code does the following:\n- fixes two corner cases as added to the test\n- implement removal of quotes around final attribute value if not clashing with closing slash\nJust want to get this out of the way before pondering on #2, #415 & #438 as they would involve modifying similar range of code...\n. I guess it's probably easier if I do them all in one PR...\n. I am currently using these modifications on the test server of my web site:\n- uses AngularJS & Bootstrap\n- minifies static HTML files as well as dynamic templates from REST end-points\nAnd they seem to work well AFAICT.\nShould fix #2, #415, #438, #470\n. Added minimize to devDependencies as per https://github.com/kangax/html-minifier/commit/c4c0bac9cc9a0bb5c7da9646b24b784949352a4f#commitcomment-15621289\nComparison of node benchmark between master and this PR:\n| File | Original | master | #468 |\n| --- | --- | --- | --- |\n| abc | 93187 (91.00 KB) | 77848 (76.02 KB) | 77760 (75.94 KB) |\n| amazon | 251828 (245.93 KB) | 216837 (211.75 KB) | 216364 (211.29 KB) |\n| eloquentjavascript | 890398 (869.53 KB) | 850539 (830.60 KB) | 850510 (830.58 KB) |\n| es6 | 3765813 (3677.55 KB) | 3132089 (3058.68 KB) | 3132080 (3058.67 KB) |\n| es6-table | 120768 (117.94 KB) | 82043 (80.12 KB) | 82040 (80.12 KB) |\n| google | 136320 (133.13 KB) | 131453 (128.37 KB) | 131132 (128.06 KB) |\n| html-minifier | 49978 (48.81 KB) | 38609 (37.70 KB) | 38387 (37.49 KB) |\n| msn | 160454 (156.69 KB) | 136465 (133.27 KB) | 136113 (132.92 KB) |\n| newyorktimes | 134565 (131.41 KB) | 113790 (111.12 KB) | 113291 (110.64 KB) |\n| stackoverflow | 205280 (200.47 KB) | 163534 (159.70 KB) | 161975 (158.18 KB) |\n| wikipedia | 411051 (401.42 KB) | 390080 (380.94 KB) | 389515 (380.39 KB) |\n. @kangax reading the repo some more - do I need to commit those files under /dist?\nThey are just auto-generated by grunt, but are they getting used directly by your website from master?\n. ok - dist files committed\n. @kawazoe can you open a separate issue for this?\n. I think the general solution to this and #373 would be to unescape these HTML entity characters before feeding them to minify{css,js}?\n. Forgot to mention - took the liberty to refine the default regex to /^on[a-z]{3,}$/, based on the observation here that none of the event names are below 3 characters.\n. improved test case for minifyJS so it's more clear what is being tested\n. @kangax FYI the two tests were run against original htmlminifier.js and both failed\n. Without this PR, minify('<style></style>this + is(not, code)', {minifyJS:true}) would alter those text, same with minifyCSS\nSo I am fixing it so that it does not do that anymore, hence the tests expecting the inputs to be untouched.\n. IOW, contents outside of script elements should not be minified, but they are currently being minified on master.\n. I think you should report this to clean-css, which actually performs the minification of CSS here.\n. In fact, they already seem to have this implemented/disabled:\nhttps://github.com/jakubpawlowicz/clean-css/issues/497\nhttps://github.com/jakubpawlowicz/clean-css/issues/555\nSo you should probably follow up there.\n. Oops - slipped in new Date() --> Date.now() as VS Code was bugging me about it.\nIt is a well supported feature, but if you feel strongly about it I can back it out from the commit...\n. remove-empty-elements was checked when \"safe\" options are selected on the web interface, and that made life rather difficult when doing quick tests\n. One thing that I'm interested in doing it is to run Will Peavy and htmlcompressor.com off benchmark.js as well and end up with a big table like the one on the front page.\nBut I'm not sure if it's orthodox to ping those sites in a script like that, so I would like a second opinion on the matter :sweat_smile: \n. | File | Original | HTMLMinifier | Minimize | WillPeavy | htmlcompressor | Savings |\n| --- | --: | --: | --: | --: | --: | --: |\n| abc | 91.00 | 77.98 | 87.05 | 85.83 | 84.83 | 14.31% |\n| amazon | 245.93 | 211.50 | 240.29 | 230.49 | 219.20 | 14.00% |\n| eloquentjavascript | 869.53 | 830.58 | 838.30 | 864.16 |  | 4.48% |\n| es6 | 3677.55 | 3060.28 | 3169.03 | 3204.39 |  | 16.78% |\n| es6-draft | 3619.61 | 3006.00 | 3115.87 | 3140.62 |  | 16.95% |\n| es6-table | 117.94 | 80.12 | 109.65 | 94.70 | 94.22 | 32.07% |\n| google | 133.13 | 128.17 | 132.50 | 135.37 | 131.38 | 3.72% |\n| html-minifier | 48.81 | 38.24 | 43.86 | 43.97 | 42.63 | 21.65% |\n| msn | 156.69 | 133.97 | 137.94 | 144.92 | 138.37 | 14.50% |\n| newyorktimes | 131.41 | 110.74 | 123.15 | 124.55 | 119.64 | 15.73% |\n| stackoverflow | 200.47 | 160.35 | 184.92 | 173.87 | 166.29 | 20.01% |\n| wikipedia | 401.42 | 381.44 | 390.04 | 400.40 |  | 4.98% |\n. gzipped:\n| File | Original | HTMLMinifier | Minimize | WillPeavy | htmlcompressor | Savings |\n| --- | --: | --: | --: | --: | --: | --: |\n| abc | 16.69 | 14.67 | 16.81 | 16.11 | 16.00 | 12.06% |\n| amazon | 56.17 | 49.75 | 55.33 | 53.27 | 50.91 | 11.42% |\n| eloquentjavascript | 196.96 | 188.25 | 191.18 | 192.92 |  | 4.42% |\n| es6 | 424.58 | 373.83 | 390.23 | 379.48 |  | 11.95% |\n| es6-draft | 425.84 | 374.39 | 391.70 | 380.88 |  | 12.08% |\n| es6-table | 5.89 | 5.21 | 6.75 | 5.54 | 5.49 | 11.68% |\n| google | 39.25 | 38.17 | 39.15 | 39.17 | 38.85 | 2.74% |\n| html-minifier | 9.95 | 8.77 | 9.66 | 9.32 | 9.25 | 11.93% |\n| msn | 41.22 | 37.18 | 37.73 | 37.95 | 38.03 | 9.80% |\n| newyorktimes | 29.25 | 25.59 | 28.14 | 27.48 | 27.08 | 12.51% |\n| stackoverflow | 31.86 | 30.05 | 31.86 | 30.76 | 30.59 | 5.68% |\n| wikipedia | 80.11 | 78.84 | 80.55 | 79.80 |  | 1.58% |\n. I haven't touched the output table format with regards to + gzipped - I merely separated them by hand when I post the results here :sweat_smile: \n. Added the two aforementioned tools for comparison, removed es6-draft.\nBy \"Zopfli and Brotli\" do you mean using them as opposed to zlib's standard gzip routines to see if there's any difference in space savings?\n. Rumour has it Skynet is the ultimate answer :laughing: \nJokes aside, I am looking for pure JavaScript implementations for both as it's most portable IMHO. And so far Emscripten versions seem to be the safest bet.\n- Brotli\n- Zopfli\n. @kangax addressed your comments, PTAL.\n. Random thought: shall we go fancy with progress?\nThose processing <page>... don't look too informative atm...\n. | function call | frequency |\n| --- | --- |\n| fs.writeFile(Buffer) | 1 |\n| fs.writeFile(String) | 2 |\n| fs.readFile(Buffer) | 1 |\n| fs.readFile(String) | 2 |\nSo I'm not sure if extracting any of those would help with readability. In addition, I can forsee adjusting these site tests independently from one another, i.e. one site changes their layout.\n. So I'm testing brotli - it's taking quite a while to compress(), and I think it'd be better to child_process.fork() it rather than blocking the main thread.\nQuestion: given benchmark.js is in root directory, where should I put this benchmark-brotli.js?\n. Right, added brotli compression to all minification tests. Done everything sequentially to avoid socket time-outs and make timing measurements more accurate.\n. zopfli.js isn't on npm, and the zopfli-related packages I can find on npm all requires installing the native binaries :cry: \n. \n. \nFun fact: these are all run on node-chakracore\n. Looking around for other tools to compare with, and found some peculiar ones.\n. Okay, found an interesting one\n. The savings look legit to me - the total size is smaller, so even with smaller absolute savings the percentage is not necessarily going to be smaller...\n. You can handle this with customAttrSurround:\n```\n\nminify('', {customAttrSurround:[[/@/,/(?:)/]])\n'input @keyup.enter=submit>'\n``\n. IMHO, we can mergebenchmark.confandsample-cli-config-file.conf` to save ourselves a bit of maintenance overhead...\n. variable renamed and comment added for meta-viewport optimisation\n. Seems to work on latest Node.js on Windows:\n\nhtml-minifier>echo foo | node cli\nfoo\nWhich OS & Node.js are you running?\n. This is the same with #459, which is now fixed\n. @kangax :ok_hand: \n. According to https://github.com/kangax/html-minifier/pull/246#issue-41099287, preserveLineBreaks was added to aid readability of minified source code.\nSo I can't see why <head> should be treated differently.\n. I see - your quoted test case was for preserveLineBreaks, so that confused me.\n. So thinking about it some more, I think conservativeCollapse should stay as it is, since there are people who do weird things.\nIt's not like the normal collapseWhitespace is keeping any spaces within <head> anyway.\n. conservativeCollapse serves as the safety switch when collapseWhitespace gets too aggressive.\nSo we should strive to improve collapseWhitespace instead, which a few recent PRs did, and leave conservativeCollapse for special use cases.\n. \n. \n. \n. Speaking from my own experience, I used to turn conservativeCollapse on to work around various cases where collapseWhitespace was too aggressive, so removeOptionalTags became a no-go as it adds weird whitespaces which messes up alignment etc.\nWith the previous fixes to collapseWhitespace and this combined, I have been testing with\ncollapseWhitespace: true\nconservativeCollapse: false\nremoveOptionalTags: true\non one of my projects (on IE11) and apart from smaller files, nothing seems to be different so far :blush: \n. So you want me to run the benchmarks after each commit in this PR?\nOr do you mean an automated system like Travis CI? :sweat_smile: \n. Interesting idea - let me think about it while I travel for the week :wink: \n. So if we let the grunt job updates the table on README.md or something like it does to the dist folder, may be we can then track the git history of that and draw us a nice graph?\n. Scrap that - I was thinking about how slow benchmark.js is, until I realised I'm not going to hit all the other competitors for every single commit (unless I wanna get banned :laughing:)\nYeah, I'll try and cook something up next week :smiling_imp: \n. The reason for those t == 'a' | t == 'b' not being turned into createMap() is:\n- only two matches\n- too many for imagination of variable names :sweat:\nBut I guess it's probably more readable that way, so I'll do that. I should probably add some comments at those locations to clearly which omission rules are they taking care of.\nSee you next week!\n. @kangax please take a look and see if this is more to your liking :smile: \n. And now I shall work on that history script... :wink: \n. minify() handles <% %> natively, so no need to use ignoreCustomFragments:\n```\n\nminify(' blah <%asm_group_unsubscribe_url%> ', { collapseWhitespace: true });\n'blah<%asm_group_unsubscribe_url%>'\n```\n\nWorks as expected for me - what particular HTML code are you trying which is failing for you?\n. With master rather than 1.1.1 on npm this gives:\n```\n\nminify(' blah <%asm_group_unsubscribe_url%> ', { collapseWhitespace: true });\n'blah <%asm_group_unsubscribe_url%>'\n```\n\n(Note the extra whitespace after blah.) Is this the desirable behaviour you are looking for?\n. @nosovk can you provide a more concrete example for the failure?\n. @nosovk I believe the issue is resolved, but do re-open this issue if that is not the case.\n. Looks pretty minified to me:\n```\n\nminify(... <template id=\"my-settings-template\">\n...   <div class=\"form-group\">\n...     <label for=\"name\">Name</label>\n...     <input class=\"form-control\" required/>\n...   </div>\n...   <button type=\"submit\">Submit</button>\n... </template>\n... <script>\n...   // Script to register the template with the browser as a custom element\n...   alert(1 + 3);\n... </script>\n..., { collapseWhitespace: true, removeAttributeQuotes: true, minifyJS: true });\n'NameSubmitalert(4)'\n```\n\nDid you have a specific example and output you are expected to see?\n. @ArktekniK can you provide a more concrete example for your issue?\n. No worries - glad it's settled :wink: \n. https://github.com/kangax/html-minifier relies fully on https://github.com/mishoo/UglifyJS2 for that part of minification. So it may be more fruitful requesting support for your format in question over there?\n. Yes, both style=... as well as <style>...</style> are minified.\nThis is similar to #302 and #426, where others are using standard HTML tags with non-standard attribute values. So one workaround is to avoid the attribute name collision by data-style if supported, for instance.\n. One way to achieve what you want is to utilise ignoreCustomFragments\n```\n\nminify(...   <div id=\"drawer\" style$=\"[[_computeDrawerStyle(drawerWidth)]]\">\n...     <span style=\"font: 12px bold\">content</span>\n...   </div>\n..., {\n.....   customAttrAssign: [/\\$=/],\n.....   ignoreCustomFragments: [/style\\$?=\"[[.*?]]\"/],\n.....   minifyCSS: true,\n.....   collapseWhitespace: true\n..... });\n\n'content'\n``\n. So the above is forstyle=\"...\"- for...you can simply use htmlmin:ignore to achieve what you described withgulp-minify-inline`\nIs there any other cases that I haven't covered yet?\n. Looking back at the commit history, it seems like using src/htmlminifier.js directly would be a better solution here...\n. Full git history run\nThe earlier commits are not completing within one minute over here (i7-4960X @4.5GHz), but otherwise we/I don't seem to introduce too much regression thus far :sweat_smile: \n. That's what I'm investigating atm - I think some of them have genuine reasons, but others are just due to the various I/O (race) bugs in Node.js (libuv?), which have been illusive and platform-dependent (read: Windows :cry:)\n. Just pasting a few bugs I've encountered so far:\ne2e4ff5, a8d5bc3, ..., 2ddfee6\n[amazon] TypeError: Object doesn't support property or method 'replace'\n   at collapseWhitespaceSmart (src/htmlminifier.js:55:7)\n   at chars (src/htmlminifier.js:554:13)\n   at global.HTMLParser (src/htmlparser.js:221:13)\n   at minify (src/htmlminifier.js:456:5)\n   at Anonymous function (backtest.js:43:11)\n   at tryToString (fs.js:414:3)\n   at readFileAfterClose (fs.js:401:5)\nd1d4635, 1127285, ..., 49b9e8d\n```\n[newyorktimes] Parse Error:\n\n\n```\na397362, 34a7230, ..., 4615d6b\n[*] TypeError: Unable to get property 'replace' of undefined or null reference\n   at collapseWhitespaceSmart (src/htmlminifier.js:55:7)\n   at chars (src/htmlminifier.js:553:13)\n   at global.HTMLParser (src/htmlparser.js:155:13)\n   at minify (src/htmlminifier.js:455:5)\n   at Anonymous function (backtest.js:43:11)\n   at tryToString (fs.js:414:3)\n   at readFileAfterClose (fs.js:401:5)\nd9b302d, f3fc9d1, ..., 110b540\n[*] ReferenceError: 'HTMLParser' is undefined\n   at minify (src/htmlminifier.js:262:5)\n   at Anonymous function (backtest.js:43:11)\n   at tryToString (fs.js:414:3)\n   at readFileAfterClose (fs.js:401:5)\n32b02f0, 10291f8, ..., 4705f91\n[*] TypeError: Object expected\n   at Anonymous function (backtest.js:43:11)\n   at tryToString (fs.js:414:3)\n   at readFileAfterClose (fs.js:401:5)\n. These are the ones which are currently suffering a minfied size regression:\n- es6-table\n- html-minifier\n- nbc\n- stackoverflow\nI suspect they are primarily due to the now safer behaviour of removeOptionalTags, where the more aggressive side of the latest changes is not enough to offset the growth.\n. Full history run with higher success ratio this time.\nMany of the graphs now have longer history (since they fail less often), and I think we are starting to see more significant improvements over time.\nObviously there is this caveat that we aren't measuring correctness by any means, which means if we rely of this metric alone function minify() {return ''} would be the clear winner :laughing: \n. backtest.zip\n. ```\n310 - [newyorktimes] Parse Error:\n158 - [nbc] TypeError: Object doesn't support property or method 'replace'\n13 - [html-minifier] TypeError: Unable to get property 'replace' of undefined or null reference\n14 - [html-minifier] Error: unexpected result: undefined\n27 - [nbc] Parse Error: \n```\n473 counts of task timed out, though most of them have some benchmarks that came through\n. backtest.zip\n@kangax I think this code is good to go now, PTAL :wink: \n. @kangax any luck with reviewing? :sweat_smile: \n. I think by integrating the default value into ignoreCustomFragments in the docs, we also reduce the number of instances where users didn't realise <?php ?> is already accounted for, like #489 and others before it...\n. Now that I've worked with ignoreCustomFragments for a while, it's starting to look like a golden hammer :laughing: \nOn a more serious note, contemplating on whether to use this for IE Conditional Comments...\n. Checked with node benchmark and no noticable regression in sizes or performance has been detected.\n. Travis CI tripped :confused: \n. @kangax PTAL\n. @kangax not intentionally, no :sweat_smile: \nFor instance, the old rules for <rtc> etc. are kept to ensure compatibility between W3C and WhatWG versions.\n. @kangax on a related note, do we have plans for publishing 1.2.0 to npm?\n. @kangax thanks :+1: \n. Yeah, I guess the acid test is whether any real world browsers will blow up, probably in the form of whitespace damages.\nJust to confirm, you tested with this repository rather than 1.1.1 from npm?\n. Actually, looks like you are using the version from npm - here's what the latest removeOptionalTags would do:\n```\n\nminify(... <!DOCTYPE html>\n... <html>\n...   <head>\n...     <title>Blah</title>\n...   </head>\n...   <body>\n...     <div><p>This is some text in a div</p></div>\n...     <div><p>This is some more text in a div</p></div>\n...   </body>\n... </html>\n..., {\n.....   collapseWhitespace: true,\n.....   removeOptionalTags: true\n..... });\n'<!DOCTYPE html>BlahThis is some text in a divThis is some more text in a div'\nminify(... <!DOCTYPE html>\n... <html>\n...   <head>\n...     <title>Blah</title>\n...   </head>\n...   <body>\n...     <noscript><p>This is some text in a noscript</p></noscript>\n...     <noscript><p>This is some more text in a noscript</p></noscript>\n...   </body>\n... </html>\n..., {\n.....   collapseWhitespace: true,\n.....   removeOptionalTags: true\n..... });\n'<!DOCTYPE html>BlahThis is some text in a noscriptThis is some more text in a noscript'\n```\n\nBut I guess W3C validator would probably choke on it all the same...\n. Nasty... W3C Validator also chokes with the fact that <body> got omitted when <noscript> is used:\n\nA body element's start tag may be omitted if the element is empty, or if the first thing inside the body element is not a space character or a comment, except if the first thing inside the body element is a meta, link, script, style, or template element.\n\nNo mention of <noscript> either in the specification, though in reality <noscript> is allowed to be inside <head> so logically I can't see how we can omit <body> safely here.\nIOW, the tag omission rules seem to have forgotten all about <noscript>'s existence... :cold_sweat: \n. Okay, so in the Living Standard at least </p> got clarified:\n\nA p element's end tag may be omitted if the p element is immediately followed by an address, article, aside, blockquote, details, div, dl, fieldset, figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, header, hgroup, hr, main, menu, nav, ol, p, pre, section, table, or ul element, or if there is no more content in the parent element and the parent element is an HTML element that is not an a, audio, del, ins, map, noscript, or video element.\n. @KenSharp ah okay, I keep forgetting about the online page\n\nThe pending fix is at https://alexlamsl.github.io/html-minifier/ if you want to test/break it :wink:\n. Thanks for the testing!\n. Not related to this change, but the message should probably read \"The option output-dir needs to be...\"\n. Thinking about it some more, Downlevel-revealed conditional comments are supposed to form part of the document without causing any parsing errors.\nSo my proposal is reduced to:\n- minify content just as we do with processScripts, fallback if error\n- fix htmlparser to allow for content to contain comments\n. Thanks for reporting this - I have submitted a fix in #501 \n. So the trouble is with these lines, when both removeStartTag() and removeEndTag() are triggered.\nWhile fixing #500 I have also noticed the empty content cases for optional start tags are missing, so added those as well.\n. @kangax I know it's been around forever, but should we be unconditionally trim whitespace of input to minify() before we even start to parse it, or do you think it should depend on collapseWhitespace?\n. @kangax btw, it's been bugging me that grunt test runs 9 more tests than the online version, until I realise the existence of lint-tests.html :sweat_smile: \n. Wasn't certain about the process - will do for future maintenance commits that are trivial...\nSpeaking of trivial commits, shall we land #498 before it gets really stale?\n. Thanks a lot for the reviews so far - I know how hard it can be even for me to read my own code sometimes!\n. Let's see what I can do with git here... :sweat_smile: \n. Closing for new PR(s)\n. Oops, missed out that case - fix submitted in #501 \n. AFAICT, <md-list-item> isn't part of HTML?\nAnyway, you can switch off removeOptionalTags to avoid this issue when minifying general XML documents.\n. From https://html.spec.whatwg.org/multipage/syntax.html#optional-tags\n\nA p element's end tag may be omitted if the p element is immediately followed by an address, article, aside, blockquote, details, div, dl, fieldset, figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, header, hgroup, hr, main, menu, nav, ol, p, pre, section, table, or ul element, or if there is no more content in the parent element and the parent element is an HTML element that is not an a, audio, del, ins, map, noscript, or video element.\n\nSo it certainly allows for removal of </p> if it's immediately followed by </md-list-item>. I have just tested by inspecting the DOM tree under IE11 and it adds </p> back as expected - what are those browsers you have mentioned behaved in this case?\n. (I assumed you've also applied at least collapseWhitespace:true since </p> won't be removed otherwise)\n. Without collapseWhitespace in your example above, </p> would be immediately followed by whitespace instead of </md-list-item>, which prevents it from being removed.\nInteresting that AngularJS parse the HTML directly instead of relying on the browser built-in functionalities. Thanks for looking into this!\n. I have submitted a fix to make removeOptionalTags more conservative around non-HTML tags.\nPlease try the online version to see if this is working as expected. :wink: \n. If you swap &nbsp; for say text, then you should see why the whitespace needs to be preserved. The old behaviour would have caused rendering differences.\nWhat I am not sure about is whether we should treat &nbsp; specially when dealing with text contents.\n. Btw, I couldn't find your quoted test case in https://github.com/kangax/html-minifier/blob/gh-pages/tests/minifier.js - is there another file by the same name in your project?\n. You can try the online version to see if your use case works as expected.\n. Same as #502 and #505 - fix submitted in #501 \n. Would you mind just pasting here an example HTML fragment which html-minifier chokes on?\nI couldn't copy anything from your jsbin link because the tab just hangs there. And by \"bug\" do you mean a crash, an unexpected output, or something else?\n. Can you paste the actual HTML content you'd pass to html-minifier?\n. It is invalid HTML/XML indeed. So I guess the problem here is you'd expect it to error out, but it is taking a long time before it'd do so?\n. We are on the same page now :+1: \nI'll take a look at it - thanks for reporting!\n. fix submitted in #510 - unfortunately it's on a branch other than gh-pages, so I can't give you an online version to test until it is merged :cry: \n. @XhmikosR @kangax fixes for #503 is going to conflict with this, so if you can review and merge this first before I open another PR that would be great.\n. @XhmikosR squashed :pray: \n. rebased (dist/htmlminifier.min.js is always in the way...)\n. After this and #508 and a new PR for #503, all that is left is just a bunch of tests which involves all of them, which I guess I can just merge to master directly...\n. rebased\n. @kangax rebased and added comments to issues\n. I'm confused - why should ignoreCustomComments be using a variable from ignoreCustomFragments?\n. Bear with my confused soul... :cold_sweat: \nWould you mind giving an example of html code (and options) that would produce an unexpected result?\n. Ah, I see what you mean now - when ignoreCustomFragments matches something in the comments, and removeComments is used, then we hit a replacement issue.\nJust to be clear, is the following output what you'd expect instead?\n{{if a==1}}<div>i'm a div</div>{{/if}}\n. ok - will have a look at it :+1: \n@kangax this bug / corner case exists since ignoreCustomFragments is introduced - what are your thoughts on this? Do you agree with the expected results as stated above?\n. @kangax in terms of expected behaviour we are on the same page.\nYou might already know, but just in case I'd like to clarify that the bug is not just comment being removed. It is this:\n<!--{{comment}}-->{{if}}blah{{/if}}\ngetting turned into this:\n{{comment}}blah{{if}}\ndue to the assumption of sequential replacement.\nI have an idea to fix this (the suggested fix above doesn't give our expected outcome...) - will post as soon as I'm back to a real keyboard.\n. Just tested locally - #507 beats you to it :stuck_out_tongue_winking_eye:\nBut thanks for the test case though - I'll add that to #510 as well :wink: \n. For the record, the process doesn't freeze indefinitely - it gives a parser error after a few hours.\nNot that this is acceptable performance or anything.\n. Fixed by #509\n<!DOCTYPE html><head lang=en><script>var xml=\"<?xml version=\"1.0\" encoding=\"utf-8\"?>\"</script>\n. rebased\n. rebased again :ghost: \n. @kangax if you would publish 1.2.1 after this, I'd be grateful (to get beaten up by a new round of bug reports... :sweat_smile:)\n. rebased\n. I just tried it online:\n<div> <time datetime=\"2014-06-03 20:57:35\"><time><div>\ngives:\n<div><time datetime=\"2014-06-03 20:57:35\"><time><div></div></time></time></div>\ni.e. no whitespace. What options did you use in your case?\n. Trying with closing tags instead of all opening tags as with your example:\n<div> <time datetime=\"2014-06-03 20:57:35\"></time></div>\ngives:\n<div><time datetime=\"2014-06-03 20:57:35\"></time></div>\nas expected.\n. @soulcreate please provide a test case which demonstrate the issue if this is still a problem for you.\n. Just a little :ghost: - it is always nice to learn about the dark corners of the technologies we use every day.\n. rebased\n. splitting this into smaller :cookie: \n. Did I say we have a sub-optimal case? :smirk: \n(As it turns out, we don't need to flush buffer to results at all, so that helps.)\n. I've run benchmark.js and no noticeable performance difference is observed.\nIn terms of minified sizes, they stayed almost the same - eloquentjavascript got <1KB bigger due to lots of:\n<a>P </a>\nes6 got <1KB smaller due to consecutive trailing spaces being optimised.\n. @kangax comments addressed :wink: \n. Yes - those spaces were significant, so removing them packed those links too close to normal text after them.\n. <a href=\"/acknowledgements/\"> should transform to <a href=/acknowledgements/ >, as <a href=/acknowledgements/> would cause the final slash to be confused as a closing slash for XML.\nAnd I don't think this PR is the one that changes this IIRC...\n. Found it: https://github.com/kangax/html-minifier/commit/f8db419595ac792a37445e9a43f9e69f6548453c\nThe old behaviour is to retain the quotes as it'd cause some browsers to consume that as />. The new behaviour saves one byte by removing the quotes but add a trailing whitespace to avoid parsing errors.\n. As in, <a href=/acknowledgements/> will get confused as <a href=\"/acknowledgements\"/> in some browsers, hence <a href=/acknowledgements/ > is the shortest representation that is also safe.\nI'll have a go at your project now - is there a specific link you'd want me to visit after grunt serve?\n. Thanks, I'll investigate now - I guess I can roll back and forth between the versions to see the difference as well...\n. Feels like an idiot, but... :sweat: \n```\n\ngrunt serve\n\nWarning: Task \"serve\" not found. Use --force to continue.\nAborted due to warnings.\nExecution Time (2016-03-21 12:01:01 UTC)\nloading tasks  3ms  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258875%\nTotal 4ms\n```\nEdit: I guess it's grunt server...\n. @XhmikosR I know I'm probably being annoying now, but is there a way I can test without installing ruby and jekyll and possibly more which I don't have on my PC? :cold_sweat: \n. Okay, so I visit https://mpc-hc.org/ on Chrome 49:\n- grab document.body.innerHTML\n- run it on http://kangax.github.io/html-minifier/ with most (safer) options and without conservativeCollapse\n- paste the results back into document.body.innerHTML\nAnd I compare it with another tab of the original site. The only thing I've noticed so far are the disappearing whitespace between fa icons and the following text.\nAre there other discrepancies I should be paying attention to as well?\n. The whitespace here is being removed </span> Downloads - I'll track it down and try it and report back :wink: \n. The diff on github makes it look really dramatic, but in summary what I did:\n- moved html.indexOf('<') from text handling forward, as all the other blocks depends on < being the foremost character to be processed, thus saving the transversal through all the case mismatches when text blocks are encountered\n- record and update last tag name instead of repeatedly calling stack.last(), also prevents modifying the array object prototype which may have performance penalties\n. @kangax variable renamed, commit amended and pushed.\n. rebased\n. I've tested it in a browser and unless I put in //--> or \\n-->, alert(2) won't be executed. I also get zero JavaScript error so the syntax isn't wrong or anything...\n. FWIW, Chrome (on Android) doesn't work at all with <!-- and --> alone - it needs // or /* */, which I guess means it doesn't support the syntax, period. :disappointed: \n. Looks like both <script><!-- and <![CDATA are a relic of the past. Safari behaves the same way as Chrome in that it doesn't support bare --></script> (so // or /* */ is necessary to prevent syntax errors).\nI'm still looking for a disposable OS instance to install and test Firefox on.\n. Right so we have two sets of behaviour for:\n<script><!--\nalert(1)\nalert(2) --></script>\n| alert(1) | syntax error |\n| --- | --- |\n| IE, Opera | Chrome, Safari, Firefox |\nSo my PR would match IE and Opera exactly, and for the others it will now run script which was ignored due to syntax errors.\n. I must confess, the more I'm testing with this, the more convinced I am to just remove these options altogether... :see_no_evil: \n. I think this is probably a tricky fix for very little gain.\nShall we settle for \"if it ain't broke, don't fix it\" for now? :sweat_smile: \n. Discarded.\n. @kangax added comment and rebased - I hope it's not too confusing for you, and I welcome any suggestion to make the text clearer...\n. < instead normal text content is not standard HTML - use &lt; instead.\nAlternatively, you can use ignoreCustomFragments on {{...}}.\n. @XhmikosR fixed copy-&-paste error\n. @kangax @XhmikosR so I decided to go nuclear and extract UglifyJS.minify() and build it into assets/uglify.js directly.\nThis way we'll be more future-proof, plus we get to simiplify minifyJS(). The only downside I can see so far is npm run assets/uglify-js looking unwieldy :sweat_smile: \n. @XhmikosR so when uglify-js is running within Node.js, it uses UglifyJS2/tools/node.js\nHowever, when it packages itself for the web, it does not include that file since it uses Node.js libraries.\nSince UglifyJS.minify is defined within UglifyJS2/tools/node.js and for the logic path we use does not involve/require Node.js, we use it directly instead of duplicating (wrongly) the same logic inside htmlminifier.js\n. The old code in minifyJS might be what UglifyJS.minify does in a prior version of uglify-js, but it certainly isn't so now and contains at least two bugs (does not reset character statistics; does not pass options.compress to Compressor) so it's actually more fragile if we go down the path of updating the duplicated code.\nAs for official version of uglify-js - we are still using it, just appending an extra definition of UglifyJS.minify at the end of the file, which is also extracted from the official source.\n. Rebased - but I think I still need to convince @XhmikosR about appending extra code to assets/uglify.js before merging\n. @XhmikosR currently, minifyJS has two different code paths calling uglify-js for Node.js and online versions. The online code path is broken, either since day one or has become out-of-sync with the upstream project's API. We have a few options to fix this:\n1. fix the online code path by copying from tools/node.js\n   - need to manually track upstream changes to maintain consistent behaviour\n2. merge Node.js and online versions into latter\n   - consistent behaviour\n   - need to manually track upstream bug fixes\n   - harder to discover and use for Node.js users\n3. (current PR) merge both versions into require('uglify-js').minify\n   - need to append a function in tools/node.js to official version of uglify.js\n   - consistent behaviour\n   - no DRY issues, all code are from UglifyJS2 repository\n. I have now modify uglify.js generation once again by using browserify in the same way as cleancss-browser.js and relateurl-browser.js - does that work better for you @XhmikosR?\nWould it make sense to call the output file uglify-browser.js?\n. @XhmikosR no worries - we all have day job(s) :wink: \nWhich custom step for Node.js are you referring to here? Do you mean fromString and inline_script?\n. Looking through all of this - is dist/* for web consumption only? I ask because Node.js users are using src/* directly as specified by package.json.\nIf that's the case, why don't we get rid of assets/* altogether, and just browserify src/htmlminifier.js and put that under dist/?\n. Nope, cli.js uses dist/htmlminifier.min.js for some very interesting reasons...\n. @kangax that's right - minifyJS work differently in the browser than on Node.js before, but the arrangement of test cases in the past conveniently hides the problem.\nNow that I'm expanding on tests/minifier.js... :bomb::boom:\n. Thanks - I'll get a PR ready...\n. That's because we only support basic characters as tag names and attributes - see #248 and #289\n. clean-css has its own mechanisms for URL rewrites, namely rebase, relativeTo and root.\n. In theory we can populate those fields I mentioned within minifyCSS when they are not specified by the user, and minifyURLs.site is defined.\n@kangax @XhmikosR how do you feel about this?\n. Thanks for testing. :+1: \n. On the bright side, I bet we've removed a lot of ads :smiling_imp: \n. No harm for that - and thanks for taking care of it :+1: \n. Rebased - needs #531 in order to pass the new web tests.\n. grunt-contrib-qunit has been updated, but since this PR is getting rid of it anyway so I guess we can leave it alone for now...\n. With #531 merged, this is now good to go :sunglasses: \n. @kangax commit amended\n. Assuming <object data=\"...\"> then?\n. Right, added <applet code=\"...\"> while we are at this.\n. ... I've just discovered <spacer> as well :sweat: \n. Okay, looks like only Netscape and very old Mozilla browers support <spacer>, so I guess it's not a big deal...?\n. I'm actually thinking about <i class=\"fa fa-camera-retro\"> and same with <span> - they are commonly used to put out these font-based icons and removeEmptyElements would kill them.\n. Probably not - it's one of those \"no harm, let's throw in the kitchen sink\" moment :ghost: \nI'll take it back out then...\n. So what are your thoughts on sparing <i> and <span> when class attribute is defined?\n. I guess that link to your blog post has enough warning signs on it.\n. <spacer> commit removed :wink: \n. @kangax flag (and commit message) renamed, tests added\n. Browsing around HTML 4.01 doesn't seem to have the same restrictions, so confining this logic to html5 mode.\n. Did a grep on https://html.spec.whatwg.org/ and populated the list of phrasing-content-only tags.\n. So the story goes, grunt test used to take ~2s here.\nAs the HTML parser is generalised to handle non-alphanumeric attribute names, this goes to ~17s.\nWith the latest optimisation, this is now reduced to ~1.5s, so we get the cake and can eat it too! :birthday: \n. Online test suite (apart from #531) and node benchmark give it a clean bill of health as well.\n. I've come across quite a few projects with these weird tag names - but yes, may be they all hit a brick wall at some point when they discover some browser breakage.\nI will test against different browsers and report back.\n. Both IE11 and Chrome (48 on Android) seems to be happy with this:\n<html>\n<body>\n<a.b c=\"d\"></a.b>\n<script>\nalert(document.getElementsByTagName('a.b')[0]);\n</script>\n</body>\n</html>\nin that they both give me a pop-up with [object HTMLUnknownElement].\n. Didn't know modules with a bunch of RegExp's exist. :open_mouth: \nI'll give this (or xml-char-classes) a go and see if I can implement this QName properly without performance regression.\n. @mathiasbynens @kangax done - added browserified module for online version as well, with fallback when module isn't available.\n. For the record, clean-css doesn't consider this as a feature they would like to carry on their side.\nhttps://github.com/jakubpawlowicz/clean-css/issues/740\n. Fixed in #509 - you can use the online version to confirm.\n. The fixed version is not published on npm yet - should be 1.3.0 by the time we do.\n. I'm not an expert with this sort of thing. Sorry. :sweat: \n. Fixed by #510 - you can verify it using the online version.\n. IMHO we are good for 1.3.0 without #544:\n- benchmark.js gives identical results before & after\n- clean-css doesn't seem too enthusiastic about it\n. Yay!\n. About that... :smiling_imp: \n. On a more serious note -  if you are planning on integrating svgo then at some point we'll need to change over to minify(html, callback)...\n. Sounds like fun... let me sleep on that...\n. We break on HTML boundaries, since we don't recognise what's inside <script> or <style> they are left untouched.\nPR to improve on this is welcome :wink: \n. 1. do the original HTML renders correctly in a web browser?\n2. can you provide a concrete example input which demonstrate this issue?\n3. would you mind explaining the difference between your proposal and <!-- htmlmin:ignore -->?\n. Hmm... if the original HTML isn't recognised by any web browsers in the first place, why would we expect html-minifier to handle it? The only exceptions I can think of are those JSP/PHP stuff, before they are processed server-side.\nBtw, I did a quick lookup on Google and found this.\n. So looking through the other issues you've mentioned, I wonder if what you meant is more like #591?\nIf so, would making our HTML parser more relaxed about non-escaped characters (which aims to match the web browser behaviour) work for you instead?\n. See Wikipedia, I believe you need <!--<![endif]--> to make this specific hack to work.\n. Confirmed - when collapseWhitespace is applied on attributes containing ignoreCustomFragments this would happen.\n. I believe this has already been fixed - please check online version\n. Fun fact - your new test case passes without any changes to htmlminifier.js...\n. The fix is merged but not published yet - follow #547 for when we do :wink: \nThanks for reporting and working on it nonetheless. I'll close this for now and add it to our changelog, but if you find anything that doesn't work in the online version, please don't hesitate to help out!\n. Ah okay. I run into trouble and take note from Node.js and went with yaml, and all of those are generated by eslint --init. I only editted the offending rules but didn't add any new ones.\nLet me start again with JSON with just extends and env and see if that'd fare better...\n. @XhmikosR right, 3rd try at this... forced push and with very minimal .eslintrc.json this time.\n. @XhmikosR according to here, they claim .eslintrc to be deprecated\nBut if you insist, your wish is my command :angel: \n. Turns out what I meant was shared-node-browser - the common subset of both...\n. Hmm, I'm confused - the test passed on my machine but not on Travis...\n. So I'll chalk that up as node-chakracore-specific behaviour...\n. Erm... That is a Feature:tm:\n. Because the feature was enhanced but the docs didn't get updated.\nFeel free to send in a PR for that :wink: \n. Actually, where did you get that text from? The link to the blog post doesn't seem to contain the text in your image...\n. It's actually more than just </p> - basically removeOptionalTags now follows the HTML Specs.\nAnd if you can update README.md as well I'd be grateful :+1: \n. No they are not.\nI think you may be confusing the tags that can contain phrasing content only.\n. Fixed by #558\n. @jshcrowthe LGTM :+1: \n. Nothing I know of - just waiting for @kangax to parse this :wink:\n. Assuming that <rf> isn't a standard HTML5 tag, you may be looking at #557 & #558?\n. In that case, please follow #557 and I shall close this duplicated issue.\n. Duplicate of #557 - please follow that issue.\n. For some reasons it's not calling cli.exit() like it did a few lines above, but otherwise LGTM.\n. Duplicate of #565.\n. LGTM.\n@XhmikosR I had to disable no-throw-literal when we migrate to eslint as well, so may be we can put that back on :sunglasses: \n. @XhmikosR guilty as charged :disappointed: \nIn my defense - when I was presented with 100+ errors in htmlparser.js alone after eslint --init, I thought I'll take the easy way out :sweat_drops: \nLet's sort out all the new bug reports from 1.3.0, then I'll enable the rules alongside the source fixes and put them up for review :wink: \n. ~~If you put your example code into IE11/Chrome and inspect the DOM, you'll see it inserts </label> exactly as we do here. It would help a lot if you can show me some examples where browsers don't do that so we narrow the conditions down.~~ Looks like <div> is special even if it's not listed as phrasing content, at least on IE11.\n@kangax so I've got this narrowed down to the following events:\n- html5:false has always been closing inline tags since https://github.com/kangax/html-minifier/commit/30510e0147f015f747513ec79d29713e655f580f\n- html5:true is now doing something similar due to phrasing content #541\n- as html5 defaults to true, we have almost never hit that first code path before :disappointed: \n. http://stackoverflow.com/questions/18609554/is-div-inside-label-block-correct\nhttps://datatables.net/forums/discussion/26944/invalid-html-div-inside-label-causes-css-rendering-problems\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=431074\n. @dciccale your example is actually #557, which the fix is merged and can be tested online\n@sumitkm thanks for suggesting the workaround :wink:\n. @dciccale the online version will always have the latest version from the repository. The npm version would not be updated until the next npm publish, so if you rely on that then stay tuned :wink: \n. @oliviertassinari thanks for looking into this :+1: \n@kangax I wonder if we should just make all src/*.js use plain require(), then have the dist build using browserify? That way we can avoid this webpack issue, plus we can drop/merge all those custom module builds in assets...\n. It's commit like this where I wish Github provides a diff mode that ignore whitespace changes... :sweat_smile: \n. So this will hopefully solve #568 and more - @oliviertassinari if you can verify this that would be helpful!\nAnd we can actually review the diff with whitespace changes ignored :clap: \n. @XhmikosR both comments addressed, PR rebased\n. @XhmikosR amended last commit to adjust eslint rules\n. Editted commit message to close relevant issue.\n. @genintho yeah, thanks for the tip :wink: \n@kangax is that the same babel that broke and went onto the news a few days back?\n@XhmikosR thanks for the review! To switch HTML parser we'll need to decouple the logical dependencies first, but it's something to think about nonetheless.\n. I've just tried the minified version under DOM Explorer (IE11) and it turns out okay. Is there a specific browser which is causing a problem?\n. Tried it on Chrome 49 and it works just as fine. (I've confined the other browsers on OSX, whilst I'm primarily a Windows user...)\nWhilst I'd agree it's not strictly valid HTML, but this is implementing #2 and I did test that it doesn't cause any DOM mutations back then...\n. @XhmikosR I've prepared #576 - so whenever @kangax is ready :wink: \n. What combination of options did you use to reproduce your results?\nI tried with standard options locally with 1.3.0 and online:\n```\n\nminify(' htmlmin:ignore %buildversion% htmlmin:ignore ', options);\n'%buildversion%'\n``\n. Trying withremoveComments` only:\n\n```\n\nminify(' htmlmin:ignore %buildversion% htmlmin:ignore ',{removeComments:true})\n'%buildversion%'\n```\n. Using the options you've just provided:\n\n```\n\nvar options={\n...   removeComments: true,\n...   collapseWhitespace: true,\n...   conservativeCollapse: true,\n...   collapseInlineTagWhitespace: true,\n...   collapseBooleanAttributes: true,\n...   removeAttributeQuotes: true,\n...   removeTagWhitespace: true,\n...   processScripts: ['text/ng-template'],\n...   minifyCSS: true,\n...   minifyJS: {\n.....     mangle: false\n.....   }\n... };\nundefined\nminify(' htmlmin:ignore %buildversion% htmlmin:ignore ', options)\n'%buildversion%'\n``\n. I've just double-checked that I'm indeed using thenpmversion ofhtml-minifier`, i.e. 1.3.0\n\nCould it be something else in your page which is causing this issue, or are you able to reproduce this problem using just <!-- htmlmin:ignore --><!--%buildversion%--><!-- htmlmin:ignore --> on your end?\n. Now I can reproduce the problem, thanks!\nAlthough I can trigger this using collapseWhitespace alone, i.e. regardless of removeComments.\n. Almost forgot - I've left strict out since I couldn't get the declaration style configured. Let's add that rule after #569\n. Ah, I should mention this - I look up http://eslint.org/docs/rules/ as I scan through your list. So it's a matter of skipping the ones with a big tick next to it.\n. @XhmikosR addressed your comments except those + lines inside tests/minifier.js - anything else?\n. Will do~ :tada: \n. Oh alright then - Google Analytics is already inside, so that's even better :sunglasses: \n. Great timing - my git push -f failed due to Github throwing Angry Unicorns at me...\n. #544 staying behind for the same reasons as last time round\n569 is too big a merge to risk a bug fix release IMHO\n580 can go either way, it's a simple fix but at the same time it doesn't look very urgent...\n. @kangax thanks!\nThe releases page looks a bit odd stating 1.3.0 as the latest release, but npm looks fine so I guess that's all that matters :ghost:\n. @kangax nvm, I've RTM and sorted that out :wink: \n. @kangax I never knew I had the power :sunglasses: \n. Duplicate of #557\n. Duplicate of #557\n@kangax changelog is ready at #576 - have a nice trip :wink:\n. @kangax related to #523 somewhat...\n. @kangax btw, given that Chrome, Firefox & Safari don't even support the non-commented-out syntax to begin with, I am all for removing removeCommentsFromCDATA & removeCDATASectionsFromCDATA altogether, which will also fix #579\nThe commented-out versions would be removed by minifyCSS / minifyJS anyway, so those would still be covered.\n. Right, testing with the following HTML file:\n``` html\n<!--\nalert(1);\n-->\n<!--alert(2);-->\n<!--alert(3);\n-->\n<!--\nalert(4);-->\n<!--alert(5);\nalert(6);\nalert(7);-->\n```\n| Browser | alert()s |\n| --- | --- |\n| IE 8 | 1, 6 |\n| IE 11 | 1, 6 |\n| Chrome 41 | 1 |\n| Chrome 49 | 1 |\n| Firefox 31 | 1 |\n| Opera 12 | 1, 6 |\n| Safari 9.1 | 1 |\n. With <style>:\n``` html\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\n<!--\np.a{background:red}\n-->\n<!--p.b{background:red}-->\n<!--p.c{background:red}\n-->\n<!--\np.d{background:red}-->\n<!--p.e{background:green}\np.f{background:green}\np.g{background:green}-->\np.h{background:blue}<!--\np.i{background:blue}\n-->p.j{background:blue}\n```\n| Browser | Failed |\n| --- | --- |\n| IE 8 | i |\n| IE 11 |  |\n| Chrome 41 |  |\n| Chrome 49 |  |\n| Firefox 31 |  |\n| Opera 12 |  |\n| Safari 9.1 |  |\n. @igoradamenko thanks for the confirmation :+1: \n. Read #576, or basically any number of issues that has been closed here.\n. When you think you find a bug, it helps to:\n- look if somebody else already reported it under Issues\n- test against latest version\n. @igoradamenko thanks for fixing this - can you squash the commits together? I will merge it right after :wink: \n. :+1: \n. @igoradamenko will do after merging a few more PRs :wink: \n. What options did you use? I just tried it online and it doesn't remove the attribute value...\n. Using html-minifier from npm (1.3.1):\n```\n\nvar minify = require(\"html-minifier\").minify;\nminify('', {\n  collapseWhitespace: true,\n  conservativeCollapse: true,\n  collapseBooleanAttributes: true,\n  removeCommentsFromCDATA: true,\n  removeOptionalTags: true\n});\n\n''\n```\nSo may be you need to check the version of html-minifier you have installed? I think npm ls would show that.\n. loading is certainly not classified as boolean attribute over here, so collapseBooleanAttributes will not do anything to it.\nI'll close this for now, but if you can demonstrate a test case using html-minifier where this is broken, feel free to reopen.\n. indeterminate is a standard HTML boolean attribute for use with <input type=\"checkbox\">\nSo the solution is to either rename your custom attribute (ng-indeterminate?) or don't use collapseBooleanAttributes.\n. Most likely due to simplicity of implementation.\nYou are more than welcome to improve :wink:\n. @kangax please review #580 :wink: \n. @XhmikosR would you like to test your projects with the latest changes?\n. Do you mean http://kangax.github.io/html-minifier/ ?\nI did test it after merging #569 & it seems to be working...\n. browserify includes a copy of require() - alongside other stuff like buffer\n. Yes - before only the dependencies are run through browserify, now we let it takes care of everything.\n. #580 & #586 are mutually exclusive\n. I guess if we pick #586, then may be we need to call this 1.4.0?\n. @kangax please publish :bow: \n. Thanks! :+1: \n. ``` html\n&lt;![CDATA[\nalert(1);\n]]&gt;\n<![CDATA[alert(2);]]>\n<![CDATA[alert(3);\n]]>\n<![CDATA[\nalert(4);]]>\n<![CDATA[alert(5);\nalert(6);\nalert(7);]]>\n```\nSyntax error for all cases on every web browser :sunglasses: \n. ``` html\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\n<![CDATA[\np.a{background:red}\n]]>\n<![CDATA[p.b{background:red}]]>\n<![CDATA[p.c{background:red}\n]]>\n<![CDATA[\np.d{background:red}]]>\n<![CDATA[p.e{background:green}\np.f{background:green}\np.g{background:green}]]>\np.h{background:blue}<![CDATA[\np.i{background:blue}\n]]>p.j{background:blue}\n```\n| Browser | Working |\n| --- | --- |\n| IE 8 | f, g, h |\n| IE 11 | h |\n| Chrome 41 | h |\n| Chrome 49 | h |\n| Firefox 31 | h |\n| Safari 9.1 | f, g, h |\n| Opera 12 | h |\n. @kangax rebased.\nIn terms of backward compatibility, all the remove*FromCDATA behaviour are now incorporated into minifyJS and minifyCSS. So if the latter are already enabled than this PR would not cause any changes. Otherwise we leave the input as is.\nbenchmark.js reports no differences.\n. @XhmikosR benchmark.js uses sample-cli-config-file.conf as options.\nTo begin with, they took out one of the two chunks of IE Conditional Comments.\nFurther inspecting the result I see snippets like </pre>0</figure>, </pre>1</figure>, ... 130 of them in total, which cannot be found in the original document. Chunks of markups may be getting uber-compressed into these magic numbers :wink: \n. Sometimes I wish you or @kangax would just let me output an empty string - would reduce a lot of code complexity and makes the whole project so much more maintainable :ghost: \nI even have this idea of achieving larger-than-100% compression by randomly removing local files every time cli.js is run, but I guess that's probably over-kill...\n. Jokes aside - anything else you want me to do on this task @XhmikosR ?\n. That and auto-update README.md after each run :sunglasses: \n. What you think are directives it's actually just plain-text to a HTML parser. Which means those whitespaces are significant.\nIf you want to have the most optimal minified output, try applying html-minifier after any server-side directive processing.\n. Question - does the document work client-side without passing through html-minifier?\nI fail to see how line breaks would not break CSS whilst a space character would.\n. So if the original input works but the minified output breaks, I'd consider this a bug in html-minifier.\nIn this case, I believe there's not much we can do. After all, features like ignoreCustomFragments are here to workaround otherwise invalid HTML inputs, rather than just throwing parser errors. Best to leave handlebars etc. to handle their own expectations.\n. ES6 I can understand, but I don't think CoffeeScript would be using <script type=\"text/javascript\">?\n. There are two places minifyJS is used:\n- event attributes\n- script tags\nThe latter case has checks for script type.\nIf you are extending options.minifyJS, you will also need to modify the logic here.\n. I tried your example here and html-minifier doesn't crash. It reports an error due to the unescaped <, which isn't valid HTML Suggested fix:\nhtml\n<div><b>&lt;&lt;[= {{app.name}} =]>></b></div>\n@kangax we are getting quite a few of these reports over time. What's your opinion on making the HTML parser more relaxed, matching web browsers (non-standard) behaviours?\n. @kangax so for instance the example above would render just fine on any browsers that I have come across so far, even the older ones. But I agree we need to be extra cautious with this exercise.\n. Anyway, this report itself isn't valid as the parser doesn't crash, so closing.\n. Thanks for the :+1:\n. Oh well, #15 also looks quite straightforward and can benefit from the clean-up in the previous commit, so lump these two together.\n. It does improve gzip ratios in node benchmark.js, which is nice to see.\n. ... oh and while we are sorting things, I've got bored looking for options, so I've sorted the list in README.md and sample-cli-config-file.conf.\n. Comments addressed - see if you like that new function name :sweat_smile: \nHere are the results with / without sortAttributes:\n| gzip | After | Before | Delta |\n| --- | --: | --: | --: |\n| HTMLMinifier page | 8880 | 8917 | -37 |\n| NBC | 14937 | 14960 | -23 |\n| ES6 table | 5265 | 5272 | -7 |\n| New York Times | 25562 | 25571 | -9 |\n| Google | 39077 | 39079 | -2 |\n| MSN | 37947 | 38006 | -59 |\n| Stackoverflow | 30494 | 30490 | 4 |\n| Amazon | 49643 | 49703 | -60 |\n| Bootstrap CSS | 38911 | 38930 | -19 |\n| Wikipedia | 80333 | 80332 | 1 |\n| Eloquent Javascript | 192829 | 192559 | 270 |\n| ES6 draft | 379722 | 379722 | 0 |\n| lzma | After | Before | Delta |\n| --- | --: | --: | --: |\n| HTMLMinifier page | 8287 | 8325 | -38 |\n| NBC | 13743 | 13772 | -29 |\n| ES6 table | 5013 | 5003 | 10 |\n| New York Times | 23121 | 23159 | -38 |\n| Google | 35479 | 35492 | -13 |\n| MSN | 34635 | 34688 | -53 |\n| Stackoverflow | 27231 | 27207 | 24 |\n| Amazon | 44753 | 44805 | -52 |\n| Bootstrap CSS | 34909 | 34966 | -57 |\n| Wikipedia | 68987 | 68858 | 129 |\n| Eloquent Javascript | 169513 | 169491 | 22 |\n| ES6 draft | 322638 | 322638 | 0 |\n| brotli | After | Before | Delta |\n| --- | --: | --: | --: |\n| HTMLMinifier page | 7673 | 7654 | 19 |\n| NBC | 12979 | 13012 | -33 |\n| ES6 table | 4350 | 4340 | 10 |\n| New York Times | 22000 | 22021 | -21 |\n| Google | 35628 | 35590 | 38 |\n| MSN | 33258 | 33295 | -37 |\n| Stackoverflow | 25821 | 25868 | -47 |\n| Amazon | 42292 | 42280 | 12 |\n| Bootstrap CSS | 31668 | 31678 | -10 |\n| Wikipedia | 66061 | 66028 | -33 |\n| Eloquent Javascript | 160336 | 159950 | 386 |\n| ES6 draft | 272776 | 272776 | 0 |\n. Inline styles are probably best left to clean-css to handle IMHO.\nAs for hybrid - we can cycle through all combinations of a given set of options and achieve that, and yes that should probably be done above minify().\nBack to this feature - I can account for removed tags & attributes if I run minify() once (with sortAttributes off) then run statistics on that result before running it again, but at a huge performance penalty.\nMerging processScripts though I have a hinge on how to do it...\n. On second thought, screw it - sortAttributes is off by default anyway, so taking a bit of a performance hit to make it work better when it is turned on isn't the end of the world.\n. btw, there's #267 which I might give it a go after this...\n. @kangax I was just running benchmark.js on HEAD to see if I've screwed anything up :wink: \nREADME.md numbers are all current and up-to-date.\n. @kangax gotcha - here you go (sortClassName is off in both cases, obviously):\n| gzip | Sort | Chain | Delta |\n| --- | --: | --: | --: |\n| HTMLMinifier page | 8880 | 8887 | 7 |\n| NBC | 14937 | 14937 | 0 |\n| ES6 table | 5265 | 5265 | 0 |\n| New York Times | 25562 | 25552 | -10 |\n| Google | 39077 | 39076 | -1 |\n| MSN | 37947 | 37945 | -2 |\n| Stackoverflow | 30494 | 30494 | 0 |\n| Amazon | 49643 | 49645 | 2 |\n| Bootstrap CSS | 38911 | 38918 | 7 |\n| Wikipedia | 80333 | 80332 | -1 |\n| Eloquent Javascript | 192829 | 192827 | -2 |\n| ES6 draft | 379722 | 379722 | 0 |\n| lzma | Sort | Chain | Delta |\n| --- | --: | --: | --: |\n| HTMLMinifier page | 8287 | 8296 | 9 |\n| NBC | 13743 | 13742 | -1 |\n| ES6 table | 5013 | 5013 | 0 |\n| New York Times | 23121 | 23104 | -17 |\n| Google | 35479 | 35475 | -4 |\n| MSN | 34635 | 34629 | -6 |\n| Stackoverflow | 27231 | 27239 | 8 |\n| Amazon | 44753 | 44742 | -11 |\n| Bootstrap CSS | 34909 | 34900 | -9 |\n| Wikipedia | 68987 | 68994 | 7 |\n| Eloquent Javascript | 169513 | 169643 | 130 |\n| ES6 draft | 322638 | 322638 | 0 |\n| brotli | Sort | Chain | Delta |\n| --- | --: | --: | --: |\n| HTMLMinifier page | 7673 | 7646 | -27 |\n| NBC | 12979 | 12966 | -13 |\n| ES6 table | 4350 | 4350 | 0 |\n| New York Times | 22000 | 21974 | -26 |\n| Google | 35628 | 35648 | 20 |\n| MSN | 33258 | 33236 | -22 |\n| Stackoverflow | 25821 | 25869 | 48 |\n| Amazon | 42292 | 42253 | -39 |\n| Bootstrap CSS | 31668 | 31677 | 9 |\n| Wikipedia | 66061 | 66043 | 18 |\n| Eloquent Javascript | 160336 | 160023 | -313 |\n| ES6 draft | 272776 | 272776 | 0 |\nI'd say we win a little bit more in general...\n. Yup - we are merely going with the most frequent winner, as with the usual case with compression schemes. :sweat_smile: \n. @kangax IIRC it's a pet-peeve of yours, so PTAL :stuck_out_tongue_winking_eye: \n. Overall I'm not sure whether the feature makes sense to be included in html-minifier. Unlike htmlmin:ignore which is required to workaround sections of the input which would otherwise be invalid HTML, this feature doesn't even relate to HTML at all, and the one-liner can be run before feeding the input into minify() without any loss of functionality.\n. @kangax the rebase was fun (since the file was introduced in the very first commit), but it's all done :sunglasses: \n. Check the version of html-minifier yourself!\n. This one seems to be more up-to-date: https://www.npmjs.com/package/express-minify-html\n. @XhmikosR my bad - haven't thought through this properly when I create the branch.\n. Continue at #606\n. Thanks for the report - a fix is pending at #605\n. List of grunt-related packages:\n- [x] grunt-browserify\n- [x] grunt-contrib-uglify\n- [x] grunt-eslint\n- [x] ~~grunt-exec~~\n- [x] grunt-lib-phantomjs\n- [x] ~~load-grunt-tasks~~\n- [x] time-grunt\n. Scary - Node 5.10.1 passed Travis CI...\n. @XhmikosR CI all :green_heart: now\n. @XhmikosR @kangax anything else amiss?\n. FYI - #610 won't block this release.\nOTOH, it would be fun watching it update the version string in index.html to 1.5.0 :smiling_imp: \n. @XhmikosR please take this for a ride\n@mathiasbynens entity character minification can be tested online - will be grateful if you can try and break it\n. @XhmikosR have we broken anything that merits a major version bump? I was reserving that for when we change to async callback for minify() in order to use svgo or something...\nAs for presets, I have made a start within index.html. My thinking is that we play around with it for a while, then integrate that into the API call in the next version bump.\n. I've found and fixed one issue with HTMLLint, but otherwise so far so good on my end as well.\n. @kangax I think we are all :green_heart: and good to go now.\n. @kangax tag and release created - please npm publish \ud83d\ude09 \n. @kangax same handle for Github and npm - thx!\nhttps://www.npmjs.com/~alexlamsl\n. Verified :+1:\nWill publish once I'm out of the movie theatre :sunglasses:\n. Run into a bug with npm login and npmjs.com, but otherwise it's published now.\n. Forgot to mention - I've also removed that disclaimer about beta software, just because. :ghost: \n. Also it would be nice to update README.md so as to reduce some manual work.\n. @kangax they do have public-facing pages like https://www.facebook.com/DonaldTrump/\nAnyway, my thinking is that I'll have benchmark.js scans through benchmarks/index.json to download the files, then proceed as it was from there.\n. @XhmikosR I see - is README.md the most up to date information, or would you mind listing them all out in this issue?\n. Ouchies - MSN gives me this:\nhtml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE HTML PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"zh-HK\" dir=\"ltr\">\n...\nI've almost forgotten all about XHTML's existence :cold_sweat: \n. ignoreCustomFragments by default should handle this, except I've overwritten it when running the benchmarks, so that's easily fixable.\nThis prompts me to think if useShortDoctype should get rid of that XML declaration...\n. @XhmikosR I'll take up your offer and switch from MSN to CNN/BBC:\nhtml\n<div class=\"headlinebar\">\n <p font-size:14px;\"=\"\" font-size:16px;\"=\"\" style=\"background:#009C15;color:white;padding-bottom:12px;margin-bottom:-12px;padding-top:10px;padding-left:16px;margin-top:-11px;margin-right:-16px;margin-left:-16px;\">...</p>\n</div>\n. @XhmikosR rebased, addressed operator-linebreak, also added no-undefined which achieve the thing you want with valid-typeof\n. I'd normally hope for the VM to optimise enough, but this won't hurt too.\n. This commit changes/fixes the behaviour:\nhttps://github.com/kangax/html-minifier/commit/b0dc2cb335ca4726f62b85ee53028d7b03e96252\n. Can you elaborate on what you mean?\n. In that case it's a duplicate of #322 then. Please follow that issue.\n. This is how you would do it via minify() directly (lint errors output to console):\nvar minify = require('html-minifier').minify;\nvar HTMLLint = require('html-minifier/src/htmllint').HTMLLint;\nvar lint = new HTMLLint();\nvar input = \"...\";\nvar output = minify(input, { lint: lint });\nlint.populate();\nPresumably you replace minify() with your call to the grunt plug-in.\nYou can also refer to https://github.com/kangax/html-minifier/blob/gh-pages/tests/lint.js#L32-L36\n. Also put eslint checks before dist inside test so it'd fail earlier.\n. https://github.com/jakubpawlowicz/clean-css is what we use in minifyCSS, and they don't support things like Handlebars to begin with IIRC.\nThe primary aim of ignoreCustomFragments is to workaround otherwise invalid input and not give up with an error; optimal output being secondary objective. If you want the perfect minfied output, you should feed minify() with the result after Handlebars' rendering.\n. Closing. Please reopen if there are any further issues.\n. This works:\n```\n\nminify('foo')\n'foo'\nminify('foo',{includeAutoGeneratedTags:false})\n'foo'\n```\n\nCan you give a more concrete example of this bug?\n. @pornel yeah after a bit of digging - thanks for the report \ud83d\ude09 \n. In the future please clearly specify the options you've used in minify() - in this case it's collapseWhitespace\n. @kangax @XhmikosR question - after this, do we bump major or just minor version?\n. @XhmikosR would you like to run some quick test before the release? :wink: \n. @XhmikosR I've done my usual tests and published for now - we can always follow up with a patch release for any new discoveries :wink: \n. Have you tried ignoreCustomFragments?\nJudging from the example on the front page, that should suffice.\n. Closing. If you have a usecase not covered by existing options please reopen.\n. @kangax would like to see if you think this is a good idea or not\n. That is because the ignored section is being treated as comment and optimised accordingly.\nWe don't guarantee any whitespace preservations around htmlmin:ignore anyway - if you need a space put one inside the ignored section.\n. Okay so you don't have control over the ignored section placement, things can indeed get complicated.\nJust to clarify, the whitespace displacement is an artifact of collapseWhitespace optimisation around HTML comments. In this case it is breaking things, so it'll need to be fixed.\nI have an idea on improving this situation (& fix your particular example), will get to it once I'm done with the meetings today.\nThanks for the report! :wink:\n. ignoreCustomComments or <!--! comment -->\n. Please use ignoreCustomFragments:\n```\n\nminify(\n  'My Value',\n  { ignoreCustomFragments:[/{%[\\s\\S]*?%}/] }\n);\n\n'My Value'\n``\n. Please use [htmlmin:ignore](https://github.com/kangax/html-minifier/blob/gh-pages/README.md#ignoring-chunks-of-markup)\n. Not sure what error is in your case, butignoreCustomFragments` also works:\nminify(`<div class=\"img\"> <script type=\"text/javascript\"> {document.write('<a href=\"https://link.com/?querystring='+value+'\">')}</script> <img src=\"pic01.jpg\" style=\"width: 100%;max-width:500px\" border=\"0\"> </a> </div>`,{ignoreCustomFragments:[/<\\s*\\/\\s*a\\s*.*?>/]});\n. <p class=test> works for me here\nWhich options did you use?\n. That's because it's invalid HTML. You cannot omit quotation marks when the value contains ', \", = or whitespaces.\n. @papandreou thanks for the report. I've filed #655 to fix these cases plus a few more.\n. Rather than the OS, which version of Node.js are you running?\n. Interesting require() behaviour then. According to the docs, it should read main field in package.json and resolve accordingly (which it obviously does in Node.js 4 and 6).\n. @papandreou thanks for the testing - much appreciated \ud83d\udc4d \n. @papandreou working on it \ud83d\ude09 \n. As stated in #618, this is the correct whitespace transformation - if you run a quick test and note the blue underline of <a> link as you move the whitespace around you'll see why.\n. Sorry if I wasn't clear - when you have cases like CSS modifications of layout styles, then conservativeCollapse is indeed the correct option to use.\nBefore the fix, html-minifier was causing input and output HTML layouts to differ.\n. Have you tried using ignoreCustomFragments?\n. Didn't try it, but have you forgotten to escape the \" for the command line? Your \\\" will just come out as \", whereas \\\\\" might work.\n. Glad you got it sorted - if you have any ideas on improving the docs, PRs are always welcome.\n. npm installs the script which is why you can run htmlminifier <options> on the command line.\nOtherwise use node cli.js <options>.\n. You have a whitespace in the attribute value, so by standard HTML you need quotes.\nIf you are injecting custom stuff consider ignoreCustomFragments.\n. IIRC, you can only use one : (as namespace) in XML, i.e. colons have special meanings and cannot be used as part of your tag name casually.\n. It is not a bug per se, just a missing feature.\nPR is welcome.\n. Actually, that commit broke the recursive functionality, i.e. if --file-ext is specified, then subdirectory would mostly be skipped.\nI am curious though - what is the expectation when skipping over non-HTML files. Do we just store minified files in the output directory, or are we expected to copy over image files etc.?\n. Use conservativeCollapse if you want to override default HTML layout rules.\n. Ah, I see what you mean after reading the meaning of that tag :sweat_smile: \nYou may want inlineTags instead of inlineTextTags if you want to maintain the whitespace around the tag. Although I wonder if we can optimise a <wbr> b as a<wbr> b...\nPR is welcome :wink: \n. fixed by #673 \n. As stated in documentation, we use relateurl for that functionality. So refer to their documentation on how to use it \ud83d\ude09 \n. Hmmm... would our test cases help you?\n. The web and the command-line interfaces can take the URL directly from the input text box and transform into a simple options object. You can also provide the full options on the command-line via stringified JSON or as part of --config-file.\nI don't know if we have any extra modes of operations other than shortening URLs that would still resolve to the same resources given the minified document's location.\n. > and < need to be escaped, i.e. as &gt; and &lt; respectively.\n. Interesting - PR is welcome :wink: \n. @Chariyski https://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\nhtml\n<!--[if gte IE 11]><!-->\n  <h3 hidden>Some text</h3>\n<!--[endif]-->\n. @dudeonthehorse not sure what you are trying to achieve here - can you give a more complete example than the code snippet to illustrate?\nThe current behaviour doesn't actually depend on whether you have conditional comments for the cases you've mentioned, btw.\n. @Chariyski in your original example, <![endif]--> is causing the HTML parser to report an error, whereas <!--[endif]--> works as expected.\n. Closing as the behaviour described is not specific to conditional comments.\nFeel free to provide more in-depth examples and reopen this issue.\n. Sounds interesting \ud83d\ude04  - PR is welcome.\n. I think you can attach files in an issue - just drag and drop into the text area.\n. Closing due to inactivity. If anyone is still interested in this, I will reopen.\n. Nope, haven't got anything myself :sweat_smile: \n. This is a feature following the rules of optional tags\nA caption element's end tag may be omitted if the caption element is not immediately followed by a space character or a comment.\n. I'd say we have different goals. html-minifier aims to find the minimum representation of a given input. HTML validators aim to promote best practices for authoring HTML pages.\nIf there is visual rendering differences between the input and minified output on a web browser, feel free to (re)open an issue. :wink: \n. Minification is synchronous and runs on the main (UI) thread at the moment.\nPRs to migrate to Web Workers (without losing browser compatibility) or general performance improvements are welcome.\n. @imvetri would this help?\nhttps://guides.github.com/activities/forking/\n. Of course you may :wink: \n. Thanks for the work - please fix the style errors.\n. Thanks \ud83d\ude09 \n. @XhmikosR lesson learnt \ud83d\ude13 \nOkay, I'll revert the grunt-eslint version change on master, and leave a PR open for dropping 0.10 when we move on to 3.0 then.\n. According to this your expected output would contain ambiguous ampersand, whereas the current minified output doesn't.\nThe feature is implemented according to https://mathiasbynens.be/notes/ambiguous-ampersands\n. Validity is a relative measure - removing optional tags can be seen as invalid markup by some HTML validators, for instance.\nWhat I am aiming for here is to have identical rendering of original input and minified output on all (commonly used) web browsers - so please report any observed corner cases and I will try and fix them \ud83d\ude09 \n. @revelt please give html-minifier 3.0.1 a go and see if it works for you.\n. Please provide actual examples of HTML input and minified output to demonstrate the issue.\n. The default value in ignoreCustomFragments won't handle that nested <?php ?> you've got in here, so you'll have to adjust the regex yourself.\n. Since the issue is resolved, closing. If you have any ideas to improve on this feature, PR is always welcome :wink: \n. The current behaviour is based on the HTML specification, i.e. <input> is an inline-text element and needs to have surrounding whitespaces preserved.\nIf you want to extend on this feature, PR is welcome :wink: \n. You can expand collapseInlineTagWhitespace and/or collapseWhitespace beyond the simple boolean - either as RegEx or even a function that takes in tag attributes so you can do more advanced transforms depending on class for instance.\nThere is also this thing about left/right inner/outer whitespaces to handle, but I guess you'll figure those cases out as you implement them...\n. #744 does something similar but for empty attributes.\n. <input> is an inline-text element, so surrounding whitespace (\\n in this case) is significant and needs to be preserved.\n. Wouldn't<and>help?\n. Assuming you meantprocessScripts- it is used for HTML templates, not JavaScript snippets.\n. We delete whatever default value is for<code>, so that includes [application/javascript](https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js#L156)\n. So given the above, I think this is a case of misunderstanding the meaning of</code>processScripts<code>and that we process JavaScript blocks as long as it is specified with one of the supported</code>type` attribute values.</p>\n<p>What use case does this actually break?\n. Closing as working as expected. Please reopen if this is not the case.\n. You are welcome to improve the docs by submitting PRs.\n. <code>&lt;textarea&gt;</code> needs a closing tag according to the <a href=\"https://developer.mozilla.org/en/docs/Web/HTML/Element/textarea\">specification</a>, so I don't think you can get away with a self-closing tag.\n. I don't see that as failing as much as it treats the rest being the content of <code>&lt;textarea&gt;</code> - but either way, if you have specific usecase(s) in mind which complies with the HTML specification, PR is always welcome :wink: \n. If you want <a href=\"https://github.com/kangax/html-lint\">html-minifier-lint</a> to report on this corner case, please submit a Pull Request to that project. As you've noticed those features have been migrated off to a separate module.\n. @XhmikosR I've just landed in Osaka.</p>\n<p>Let me look at this when I sat down in a hotel later this evening.\n. Narrowing down the options, I can reproduce the missing <code>&lt;?php&gt;</code> issue with</p>\n<p><code>{\n  ignoreCustomComments: [/^\\s*google(off|on):\\s/],\n  removeComments: true\n}</code></p>\n<p>Removing either the bug will not surface. Investigating.\n. Oh root cause is actually quite straightforward - default value for <code>ignoreCustomComments</code> has <code>/^!/</code>, which when overrode trips <code>&lt;!-- htmlmin:ignore --&gt;</code> replacements.</p>\n<p>I'll sleep on this and come up with a fix. Thanks for spotting this @XhmikosR \n. I haven't tested explicited but https://github.com/kangax/html-minifier/commit/b75a4207b56abd8d0f6fda7057e1ff45144d92e0 looks like the culprit, so <code>2.0.0</code> would be the last version that works, and <code>2.1.0</code> onwards are broken...\n. Try <code>ignoreCustomComments</code>.\n. Please reopen if issue persists.\n. You'll need to find another module to transform character encodings - <code>html-minifier</code> always treats input and output as UTF-8\n. @XhmikosR thanks for the testing - I'll make a release later this weekend unless you have more regressions to report...\n. Thanks for the reminder - I don't think this codebase has IE8 compatibility, but I'll try and double check with a WinXP VM later this evening.\n. My point was if the pre-minified code already using features not supported by IE8, than <code>screwIE8</code> or not is a bit moot...\n. I think <code>dnd-draggable=::\"currContainer\"</code> should be <code>dnd-draggable=\"::currContainer\"</code>, i.e. the quotes should include the colons?\n. It shows the first tag where it fails to parse, in this case due to an invalid attribute value.</p>\n<p>If you have any idea to improve on clarity of error reports, PRs are always welcome \ud83d\ude09 \n. Looks like you are trying to optimise some code rather than text where HTML comments are designed for.</p>\n<p>If you have a specific new feature in mind, PR is always welcome :wink: \n. If the code in question is JavaScript(-like), then you can use <code>customEventAttributes</code> to apply minification to the attribute values.</p>\n<p>As for the HTML comments with code, which framework does that? If it is a server-side directive you can feed the rendered result to <code>html-minifier</code> to obtain the better minification. Otherwise a new feature is needed :wink: \n. Indeed not - I always thought of the online page as a quick demo, but then I've been getting reports of people using it as if the real thing :sweat_smile: </p>\n<p>May be it's time to take a look at #675 etc. to improve the tool in that case...\n. JavaScript optimisation is performed by <a href=\"https://github.com/mishoo/UglifyJS2\"><code>uglify-js</code></a> and I think they take character frequency into account when mangling names already. In any case you can file an issue with them if you want to share your ideas with them.</p>\n<p>As for <code>html-minifier</code>, we aid compression via features like <code>sortAttributes</code> and <code>sortClassName</code>.\n. Could you please elaborate on your question? :sweat_smile: </p>\n<p>Anyway, I presume this isn't an issue per se with <code>html-minifier</code>, so closing for now.\n. The way this works is <code>collapseWhitespace</code> removes whitespace characters which would not affect the rendered results. Meanwhile <code>collapseInlineTagWhitespace</code> removes all whitespaces around tags regardless, which works for cases like custom CSS.</p>\n<p>So in terms of feature this is working as expected IMHO. Of course if you think of any improvements to the documentation, PR is welcome :wink: \n. Closing as the feature is working as expected.\n. I can think of loading style sheets via <code>&lt;link&gt;</code> which would be load-order dependent.</p>\n<p>And just out of curiosity, what do people normally use <code>&lt;head&gt;&lt;noscript&gt;...&lt;/noscript&gt;&lt;/head&gt;</code> for?\n. What I meant is you can't merge the following, for instance:</p>\n<p><code>&lt;noscript&gt;&lt;link rel=stylesheet href=1.css&gt;&lt;/noscript&gt;\n&lt;link rel=stylesheet href=2.css&gt;\n&lt;noscript&gt;&lt;link rel=stylesheet href=3.css&gt;&lt;/noscript&gt;</code></p>\n<p>Either case, feel free to send a PR and I'll be happy to review it :wink: \n. Please refer to https://github.com/kangax/html-minifier/blob/gh-pages/README.md on how to use this package?</p>\n<p>Closing for now. Please elaborate if there is a specific issue.\n. Changes don't pass the unit tests, please take a look.</p>\n<p>Would you mind elaborating on why you want to apply this change, and what issues are you aiming to fix? Adding tests to clarify your intention would also be helpful.\n. Invalid changes - closing.\n. <code>&lt;{...}&gt;</code> is not valid HTML - have you tried specifying <code>ignoreCustomFragments</code>?\n. That is not valid HTML - use <code>&amp;lt;</code> instead of <code>&lt;</code>.\n. I just tried it <a href=\"https://kangax.github.io/html-minifier/\">here</a> and I've got <code>&lt;wbr data-a=a data-b=b&gt;</code> - what is your combination of options?\n. Between <code>removeAttributeQuotes</code> and <code>removeTagWhitespace</code>, pick the right combination to get your desired output.\n. Indeed - adding anything around <code>&lt;wbr&gt;</code> seems to upset the minifier.</p>\n<p>I will take a look when I get some free cycles.\n. Can you add tests relevant to the use cases you are trying to fix?\n. @gzzhanghao <code>preserveLineBreaks</code> would cost more for cases when all whitespaces can be safely removed. In either case, I'm glad you have figured out a solution/workaround to this problem, as it involves <code>uglify-js</code> which does complicate matters.\n. Can this not be implement with <code>minifyJS</code> by the use of <a href=\"https://github.com/kangax/html-minifier/blob/v3.0.3/tests/minifier.js#L730-L746\"><code>function(text, inline){}</code></a>?\n. Right you are. :+1: </p>\n<p>I think rather than introducing this flag, if we can literally make this custom fragment case works by default that would be better. So if this option you've introduced work without any regressions, we might as well have this behaviour by default.</p>\n<p>Failing that, I still prefer offloading this to a custom <code>minifyJS</code> processor if possible, if not because we can employ the same tricks for <code>minifyCSS</code>. After all, <code>uglify-js</code> and <code>clean-css</code> do not have the same sort of <code>ignoreCustomFragments</code> functionality as <code>html-minifier</code> does.</p>\n<p>Would this work if I were to restore all the substitutions before passing the script string to <code>function(text, inline) {...}</code>?\n. So coming back to this. One way to think of it is that <code>uglify-js</code> and <code>clean-css</code> should be fully responsible for the content, so we should just restore any custom fragment substitutions and pass the origin string directly at them. This however would break a lot of existing cases where the current logic does work properly, and many of which produce good savings.</p>\n<p>So I think the flag you've introduced is probably quite a good solution to this issue. A few things:\n- the flag currently only takes care of JavaScript, but we do have similar issues with CSS as well\n- one option is to make two flags, one for JS and one for CSS\n- can we have the flag the other way round, i.e. set to <code>true</code> to pass custom fragments as-is?\n- please exclude <code>dist/htmlminifier.js</code> from the commit\n. Refer to <code>--help</code>, both <code>--minify-css [value]</code> and <code>--minify-js [value]</code> requires specifying a value.\n. That is true - those options are extended to allow for more fine-grained control at some point. Sorry about the confusion :sweat_smile: \n. https://validator.w3.org/ doesn't like your last example when I tried just now.\n. I've got this from the page</p>\n<p><img alt=\"error\" src=\"https://cloud.githubusercontent.com/assets/1898413/18683424/d3229146-7fa2-11e6-99f1-b22a724fec0f.png\" />\n. You can submit a PR to fix what you think the issue is, then we can discuss further from there.\n. That looks like HTML5 specification, which isn't the only one the parser is designed to handle. In fact I believe this parser was written before HTML5 came out. There have been a few other corner cases where web browsers would fall back gracefully while <code>html-minifier</code> would complain.</p>\n<p>Either case, if this is a major/urgent concern of yours I'd suggest submitting a fix.\n. Thanks for the talk.\n. Looking at that regex, cases like <code>&lt;script&gt;\\n\\t&lt;% ... %&gt;&lt;/script&gt;</code> might not be covered...?</p>\n<p>Edit: never mind, I see how this can work just fine.\n. As stated in #716, I think we should just aim to tackle the larger issue of having custom fragments in all sorts of locations within scripts and stylesheets, either by default or using custom processors.\n. @gzzhanghao thanks for the review - I'll go fix it up now... :wink: \n. Just tried your example in #716 and it seems to work:</p>\n<p>```</p>\n<blockquote>\n<p>minify(<code>&lt;script&gt;\n... function a() {\n.....   b()\n.....   &lt;?php if (false): ?&gt;\n.....     c()\n.....   &lt;?php endif; ?&gt;\n..... }\n... &lt;/script&gt;</code>, {minifyJS:true})\n'<script>function a(){b(),\\n&lt;?php if (false): ?&gt;\\n,c(),\\n&lt;?php endif; ?&gt;\\n}'\n```\n\nWhat other options have you specified which produce the incorrect results as you described?\n. @gzzhanghao now I see what you mean.\nYeah, this one is inherently tricky, and the same issue would arise with minifyCSS as well. I guess I'll merge this for now and think about #716 some more, as they are separate issues...\n. There is no shortcut option per se, but if you are using the command-line tool you can specify a JSON config file as input via -c <file>\n. Closing as answered. Will re-open if you think otherwise or have further questions.\n. Personally I don't use this for absolute conformance, as I tune options for my specific use cases.\nPR to augment documentation if you believe this is useful would be welcome \ud83d\udc4d \n. I think this is a choice between correctness & optimal minification. #436 was fixed by being always conservative with whitespaces around custom fragments.\nYou are welcome to refine this with a PR, of course.\n. @adamchal thanks a lot!\n. Just tested this and seems to work:\n<style>\n  a {\n    background-color: blue\n  }\n</style>\n<a href=\"/foo\">bar</a>\n<style>\n  a {\n    background-color: red\n  }\n</style>\ngives:\n<style>a{background-color:#00f}</style><a href=/foo>bar</a><style>a{background-color:red}</style>\nCan you give a more specific example illustrating your issue?\n. @jay8t6 I am unfamiliar with the framework which you've mentioned, so it would be more helpful for me to see a more concrete example before I comment on the issue further.\n. @jay8t6 that example only has one <style> section AFAICT, and it seems to minify properly.\n. Closing for now. Will reopen once a concrete example of failure is provided.\n. @jay8t6 glad that you've got it worked out.\n. I just tried it here\n<!doctype html>\n<html>\n<body>\n<h1>Hello World!</h1>\n</body>\n</html>\ngives me:\n<!DOCTYPE html><h1>Hello World!</h1>\nWould you mind giving me an example of the problem you've described?\n. ... the same example but with collapseWhitespace only:\n<!DOCTYPE html><html><body><h1>Hello World!</h1></body></html>\n. 1. that doesn't look like a direct use of html-minifier\n   - which module are you using?\n   - do they use the latest version of html-minifier?\n2. you have only provided the minified output - what does the input looks like?\n3. I notice the use of IE's conditional comment there, so may be that's related.\n. Closing for now. Will reopen if a reproducible case is provided.\n. Please provide a concrete example as to the issue you have encountered?\n. It's not working because uglify-js does not support ES6 (yet?)\n. Thank you for the detailed description of the issue.\nSo if I understand correctly, you are trying to use webpack on html-minifier and its dependencies in order to use the latter within a browser as opposed to running in native Node.js environment? If so, both html-minifier and uglify-js use browserify for this use-case, and you can grab the artifacts from here.\n. And just to summarise, if you want your particular use case to work as-is, then IMHO you'll need to file an issue with webpack and let them sort this out for you.\n. Reading on MDN crossorigin does not look like a boolean attribute to me.\nIn any case, html-minifier currently does not optimise this one way or another.\n. I care less about written specifications than how web browsers behave and what they actually support, which MDN tends to be fairly good at reporting. FWIW, MSDN also reports it as a string rather than boolean.\nHow certain are we that omitting the value would work across all the browsers that support crossorigin? IIRC you can't just omit a string attribute value in general.\n. Closing for now as this is working as expected with the current browsers. If/when the situation changes, we shall re-visit this issue.\n. That is odd indeed. I have traced it back to https://github.com/kangax/html-minifier/commit/2c2217c4b9af3a2848fca0acb48f23920ae6dcf0 so far, but the flag has been manipulated before that as well.\nGiven that clean-css has updated since, perhaps we should investigate whether the defaults are good enough these days and remove that advanced=false instead.\n/cc @XhmikosR\n. @XhmikosR thanks for the clarification. I shall take your advice rather than risking some nasty surprises then.\n. @simontabor thanks for the change.\n. html-minifier aims to optimise HTML inputs - yours look like RSS to me.\n. Just tested online, <div draggable=\"true\"></div> gives <div draggable=true></div>. There is even a test for it.\nPlease provide an example which demonstrates your issue?\n. Closing as not reproducible.\n. You can play around with various options online to see which resolves your issue at hand.\nA concrete example illustrating your problem would also be helpful.\n. I think the fix would be to manually extract the surrounding whitespaces instead of using the same regex. I will take a look when I get some spare cycles, but pull requests are always welcome :wink: \n. Thank you for the images - but may I get the actual HTML markup so it's easier to see the issue at hand?\n. Closing due to lack of response - please provide a test case so this can be investigated further.\n. The correct way is to use &lt; - there has been many (closed) issues about this, and #549 is somewhat related as well.\n. I don't see any reasons to remove that dependency which works as it is. I may be persuaded if we depend on the (two) individual sub-modules rather than change-case directly, but even then it's not exactly a big deal.\n. Thanks for working on this.\n. Updated version of eslint has stricter no-useless-escape checks for regular expressions, so fixing them in the source code.\nThanks to @vlyahovich for noticing this.\n. There's a HTML comment inside your example, so the parsing failed due to nested comment. PR to improve on this corner case is welcomed.\n. Actually, just tested on IE11 and the example you've provided cannot be parsed by IE either.\n\nSo if this is some template syntax for server-side rendering, use ignoreCustomFragments to workaround this syntax problem.\n. Tested with online demo\njs\n(function () {\n  'use strict';\n  var obj = {\n    someKey: 'someValue'\n  };\n}());\ngives\njs\n!function(){\"use strict\"}()\nEither case, this is strictly inside uglify-js territory.\n. By specifying the version, do you mean this is a regression, i.e. it works before in a previous version of html-minifier?\nIf I understand correctly, the parser would simply drop dangling end tags regardless of minifier options.\n. In that case it's probably a \"feature\" since the very beginning.\nPull request to improve on this situation is welcome, of course.\n. After playing around with this a bit, the major problem with supporting dangling close tags is that we've lost the context which the fragment is in, so options like removeOptionalTags won't work properly.. Looks good - waiting for Travis to complete before merging. Thanks for the work.\n. Let me close-then-open this PR to give Travis a little kick... :sweat_smile: \n. Not sure what's happening over at Travis - I'll come back later to sort this out.\n. Read the latest changes, still looks good. And thanks for squashing the commits.\n. I just published it <10 minutes ago - so may be wait for a bit? :stuck_out_tongue_winking_eye: \n. I run into that myself as well, but given I had to play a game of patience with Travis CI earlier today I guess I can give it another hour before I look into this further.\n. Published 3.2.1 and works on my end - so should be fixed for everyone now.\n. Funny that... I tried it three times and the third attempt failed with a 404. Then now I can't get 3.2.1 anymore.\nIn either case, I don't think I can do much as it's a npm issue obviously.\n. I have hacked around a bit and npm unpublish both 3.2.1 and 3.2.0 - so we are now back on 3.1.1 for the time being.\nAnd I shall wait for npm to sort itself out before publishing the latest version. Sorry about the trouble!\n. 3.2.2 is now published and should hopefully be working for everybody.\n. See #745 - I have removed the latest release for now and wait for npm to settle down first.\n. npm is throwing a fit at the moment - see #745 and #746.\nI think I'll wait for a day or two before doing npm publish again, as I've already had enough from Travis CI earlier today.\n. 3.2.2 is now published.\n. See #745, #746 and https://github.com/npm/registry/issues/85\n. 3.2.2 is now published.\n. See #745 and https://github.com/npm/registry/issues/85\nAlso http://status.npmjs.org/incidents/wx7mld1cj0vz\n. 3.2.2 is now published\n. I tried <link href=\"http://foo/?ln=fr\" rel=alternate hreflang=fr> and html-minifier does not remove the quotes. Please provide the input HTML which cause the output you've claimed.. It would have already been captured by ignoreCustomFragments, and should not remove attribute quotes in that case.\nI will have a look at what went wrong when I am in front of a computer. Thanks for the report!. Should be fixed in 3.2.3. That's either npm or grunt-contrib-htmlmin - nothing I can help you with here.. minifyCSS is needed for any CSS minification to take place, be it <style> in <head> or <body>, or even style=\"...\" within elements.\nSo I failed to see how this additional paragraph would clarify the situation.. minifyCSS does more than just removing line-breaks :sweat_smile: \nBut yes, I agree with the general issue of not having a recommended set of options on by default seems to be catching a lot of people out. OTOH, this would be a major change, and I don't think we've arrived to a consensus on what those options should be yet.\nMay be adding a general warning of \"all minification options are off by default\" will incentivise people to actually read the options table? Either way, I'm afraid the text in this PR is too narrowly-scoped for the general audience, which would cause more confusion than clarification IMHO.\nThanks for the heads up nonetheless - I'll see what I can add before the next release.. PR is welcome to implement this feature.. You may specify a function() to minifyJS to work around it. But based on the issue you quoted it's ultimately a bug/feature of uglify-js.\nClosing, but thanks for the workaround which others might find useful :wink: . This isn't valid HTML to begin with, so I don't see why html-minifier would handle it in the first place.\nAlso, please specify the version of html-minifier which you believe to have worked.. Tested on html-minifier with your example for 2.0.0 and 2.1.5 - Parse Error is thrown in both cases.\nGlad to hear you have found a workaround for your issue. :+1: . /dist/htmlminifier.min.js should be the only file you need to use html-minifier within a web browser.\nEverything else is just UI and Web Worker logic.. Oh and of course if you want to use a specific version, use the tagged file, e.g. for 3.2.3. If you encounter any issues beyond the suggestion above, please reopen.. Trimming whitespace and trailing semi-colon is a separate optimisation to style=\"...\", and in fact introduced before minifyCSS: https://github.com/kangax/html-minifier/commit/60addbb1bdf83eb851d8c4ec7cb65722ddc7cabd - is this breaking anything in the browser?\nAs for the whitespace being removed around custom fragments, that's because you've specified trimCustomFragments: true.. trimCustomFragments acts on custom fragments without any context information - and to be fair it cannot really reliably work that out since those bits do not have to conform to HTML in the first place.\nIf you have some ideas to improve upon the current behaviour, please send in a pull request and we can discuss about that. Other than that, since we have determined there isn't any bugs with the current implementation, I shall be closing this issue.. The code works as is. Please specify a test case which you expect to work but doesn't.. str needs to be a string, which isn't what has been supplied there.\nNot a bug with html-minifier - closing.. Even without html-minifier, use of template strings as boolean attribute values is not recommended ( see \"Binding to boolean attributes\"). @XhmikosR that is indeed the case. advanced is now level 2 optimisations, and clean-css by default is on level 1\nhttps://github.com/jakubpawlowicz/clean-css#optimization-levels. I see you have reported the issue to clean-css already. Closing.. Read your fork's commit for context, seems to be something to do with clean-css.\nPlease open an issue with clean-css for such issues as they are discovered. Of course if it turns out to be related to html-minifier, leave a comment and I'll reopen this issue.. I just tried the following example with minifyJS:true\nhtml\n<script>\n// comment\nconsole.log();\n</script>\nAnd it correctly gives:\nhtml\n<script>console.log()</script>\nCan you give an example of your problem?. Thanks for the report - fixing via #780.. Working on it \ud83d\ude09 . 3.3.1 is released - please test and ensure it works for you \ud83d\ude09 . Do the original input and minified output render differently on a web browser?. @jacksonp you can paste the contents here using ```html\\n<content\\n>\\n```\nI have had a quick look and see an issue, but will need to know all the possible outputs so I can come up with a proper fix. But let's reopen this for now.. Try ignoreCustomFragments with [/{{[\\s\\S]*?}}/]?. I tried your example above and haven't got any errors:\n$ echo '<html>{{ something }}<a{{ if }} href=\"test\"{{ end }}>test</a></html>' | html-minifier --ignore-custom-fragments [\"{{[\\s\\S]*?}}\"]\n<html>{{ something }}<a {{ if }} href=\"test\" {{ end }}>test</a></html>. That's because your command line isn't escaping the string correctly. I'm on Windows, and my version of the command looks like this:\nhtml-minifier --ignore-custom-fragments \"[\"\"{{[\\\\s\\\\S]*?}}\"\"]\". I use the API myself most of the time, and not so well-versed with character escaping rules on difference OSes command line interfaces. But essentially html-minifier --ignore-custom-fragments wants a JSON representation of an array of strings which corresponds to the regex's.\nAlternatively, you can supply a JSON configuration file via html-minifier -c <.conf> - see https://github.com/kangax/html-minifier/blob/gh-pages/sample-cli-config-file.conf for such an example.. Closing as resolved - please reopen if otherwise.. I've performed the same test with either default options or just collapseWhitespace and both gave me the correct results, i.e. no initial whitespace.\nOutputs are <!DOCTYPE html><p>Auto generated HTML and <!doctype html><p>Auto generated HTML</p> respectively. Note there isn't even a whitespace between <!DOCTYPE html> and <p> - are you sure you have enabled collapseWhitespace and that those are actually \"\\x20\"?. This is working as expected then - conservativeCollapse will always leave one space behind.. conservativeCollapse is for the conservative case, since people might be feeding minify() with fragments of the document. Either case, it's only one byte (or two if you have another one at the end), so I don't think it's worth the extra logic.\n(I'm assuming you are addressing me in the comment above.). (Presumably you are asking the same question as https://github.com/kangax/html-minifier/issues/766#issuecomment-278663295 )\nAre you trying to use html-minifier in the web browser? If so, please pick up a copy from here.. The online version uses the file I mentioned above to function. Refer to https://github.com/kangax/html-minifier/blob/gh-pages/assets/master.js for a good example on how it is used.. --> instead of ->?. The current behaviour is based on https://mathiasbynens.be/notes/unquoted-attribute-values\nPlease demonstrate a case where a web browser would fail to parse the minified HTML. Otherwise file a bug with the corresponding software library instead.\nEspecially since not enabling removeAttributeQuotes is a valid workaround, if I understand you correctly.. < is not valid HTML - use &lt;. That first character right after Parse Error: in the error message?. Just to make sure - have you enabled minifyCSS?\nIf so, you are passing {{ background: item.color }} directly to clean-css, which I supposed have a difference in behaviour when processing this otherwise invalid piece of CSS code.\nConsider using ng-style for your Angular Expressions instead.. Closing for now as nothing is found against html-minifier. Please re-open if there is any new discovery with respect to this issue.. https://github.com/kangax/html-minifier#ignoring-chunks-of-markup ?\nPlease re-open if this does not work for your use case.. Not sure what you've done wrong with this PR, but you might want to open another one as it says there are 50 files changed and certainly doesn't look correct.. Please provide example input and minified output to illustrate your issue.. From what you described this looks like a bug with html-minifier. I shall investigate and work on a patch.\nThanks for the report.. << is invalid HTML. Sounds reasonable - PR is welcomed.. ${this.addAttr ? 'attr=\"val\"' : ''} within a tag is definitely not compliant with any HTML specifications. Read up on ignoreCustomFragments.\nAny pull request to improve documentations are always welcome.. Without any example input, expected/actual output I wouldn't know what you are referring to.\nIn any case, collapseWhitespace alone would seem to fit your description.\nClosing as this isn't an issue per se with html-minifier.. It is valid HTML to omit / in self-closing elements - the parser you are using with the minified output is not compliant and needs to be fixed.\nAlternatively, read https://github.com/kangax/html-minifier#options-quick-reference which provides an option named keepClosingSlash.. html-minifier relies on clean-css to perform minifyCSS - can you verify this is reproduced on clean-css and if so, file an issue with them instead?. You've included the quotes within ignoreCustomFragments, so yeah html-minifier won't see the existing quotes anymore and will add a new pair like so.\nDoes ignoreCustomFragments: [/\\{\\{.*?\\}\\}/] (without the quotes in the RegExp) not work for you somehow?. I see - that would be the issue as that extra whitespace shouldn't be there.\nLet me see if I can fix that.. I started investigating this but failed to reproduce the whitespace as you described:\n```js\n$ node\n\nvar minify = require('.').minify\nminify(<span class=\"sprite sprite-{{sprite}}\"></span>\n  <span class=\"{{sprite}}\"></span>,{\n  ignoreCustomFragments: [/{{.*}}/],\n  collapseWhitespace: true,\n  removeAttributeQuotes: true\n})\n''\n```\n\nCan you specify the options which produce the extraneous whitespace in your example?. @silverwind thanks for the information and sorry for the delay.\nI would be grateful if you can verify whether #807 addresses your particular use case.. html-minifier uses uglify-js to compress JavaScript snippets within the HTML input, so any customisation can be configured through minifyJS which will get passed through.\nAnd if you can't find what you want from there, file an issue with https://github.com/mishoo/UglifyJS2/issues instead.. @silverwind thanks for taking a look. I've expanded the tests using your example.. You don't need any special options like customAttrSurround in your example (and I think you meant to use ignoreCustomFragments for what you are thinking of anyway), because all your handlebars stuff are not mangled with actual HTML - so they will just be treated as plain text and compressed accordingly.. I use the online minifier with default settings and get:\nhtml\n{{#minify this}}<!DOCTYPE html><html lang=en prefix=\"og: http://ogp.me/ns#\"><meta content=\"text/html; charset=utf-8\"http-equiv=Content-Type><meta content=\"IE=Edge\"http-equiv=X-UA-Compatible><meta content=\"index, follow\"name=robots><link href=/ rel=home><meta content=\"initial-scale=1,width=device-width,maximum-scale=1,user-scalable=no\"name=viewport><title>jerome724 - {{title}}</title><link href=/css/materialize.min.css rel=stylesheet><link href=/css/app.min.css rel=stylesheet>{{> header }} {{> nav }}<main>{{{ content }}}</main>{{> footer }}<script src=/js/jquery.min.js></script><script src=/js/materialize.min.js></script><script src=/js/primus.js></script><script src=/js/app.min.js></script>{{/minify}}\nwhich at a quick glance seems to be what you are looking for.. @jerome724 is your issue regarding html-minifier resolved? :wink:. This is a side effect of fixing #805.\nAFAICT the new output is still correct, so I think you can safely adjust your test case to this new behaviour.. Please let me know if my analysis is amiss to re-open this issue.. As you said, 3.4.4 was also affected, which released a while back. That is the release which carries the fix for #805.. What do you mean by \"not work\"? It produces valid HTML AFAICT.\nDifferent, but valid.. Because \\t are used to pad around custom fragments during transformation, sortClassName would give sub-optimal results after the fix for #805. But as long as it is still valid HTML and renders identically, it is an acceptable outcome.\nUnless you are claiming your example output actually isn't valid HTML or gives a different rendering in a web browser, please update your own test case to adjust to this new behaviour.. The trade-off was made to fix a correctness issue, which is more important than optimal output.\nI do understand why your test case failed, and sorry for the inconvenience it caused. I believe updating your test case is the correct solution in this scenario.. I'm trying to understand the use case for this feature.\nI'd expect class being the more common form of specifying this sort of whitespace rule (which we cannot detect, especially if the definition is on a separate style sheet).\nDoes this PR solve an issue which conservativeCollapse isn't able to cover?. Wouldn't inlining white-space: pre-wrap make the size of your HTML file increase significantly?\nWould that offset the byte savings when compared with conservativeCollapse?\nI'm not too thrilled about inserting a very (CSS-)specific rule to html-minifier, especially if this isn't a common coding pattern to begin with.\nIf you don't want extra code complexity, you may consider conservativeCollapse:true globally and forgo saving a few bytes.\nHaving said that, I'm wondering if extending collapseWhitespace to be more configurable would be the best of both worlds. That way, you can even specify a match with your particular CSS class name without re-coding your HTML files.. I see, so you need a behaviour like <pre> as opposed to conservativeCollapse.\nHave you considered <!-- htmlmin:ignore -->?\nWhile the code change looks minimal by itself, I'm more concerned with cost of maintenance going forward. Since this is completely non-extensible and is expected to be rarely used, I'd be in favour of existing solutions if at all possible.\nThe bigger question is obviously whether html-minifier should take all CSS rules into account when performing optimisations, and if so how should we approach this in a manageable manner.. > Oh, it wasn't actually being defaulted, so I would suggest changing it like this: papandreou/html-minifier@67d608f\nIf that patch alone would address you needs, then I am not against it since it does not add much overhead.. Thanks for the understanding :wink: \nI'll keep this PR open to keep track on this potential area of improvement.. I'm building 3.5.1 as we speak, so Soon:tm:. html-minifier 3.5.1 published on npm. Your example works in http://kangax.github.io/html-minifier/ - which version of html-minifier & what options are you using?. Good to know :+1: . minifyCSS is the option - please post a reproducible case if you believe it is not working for you.. IIRC /*! is special and is retained by clean-css by default.\nConsult https://github.com/jakubpawlowicz/clean-css for the option to pass to minifyCSS to remove all comments.. Try --minify-js alone, i.e. with default options?\nOtherwise, please post the example which you believe isn't working.. Closing as it doesn't look like an issue with html-minifier.\nDo continue with any questions on how to use various options.. Even if you upload it, I won't be able to read such a huge file.\nCan you reduce that down to a minimal test case which illustrates the issue?. Judging from your description, there seems to be incompatible behaviour from WebEngine.\nWithout any further information or a more concrete example, I'm afraid there isn't much I can make out of this issue.\nDoes this issue exist if you perform similar actions on say Chromium or Firefox?. Closing as it doesn't seem like an issue with html-minifier.. Looks good, thanks!\nI'll make a new release later today when I get home.. That's the norm for command line options - use --config-file if you want minify() style via JSON.. trimCustomFragments is applied without any semantic knowledge, i.e. whether it's within an attribute value or a text node, so at least extending that would involve some heavylifting.\nHaving said that, with your example above I can get it to work with ignoreCustomFragments set to [/[^\"']*?{{.*?}}[^\"']*(?=[\"'])/]. May need to employ [^<>\"'] for fun and profit in the general case.. Anything to do with custom fragments is orthogonal to any valid HTML - think of it as a pre-processor that generates valid HTML for the rest of optimisations to proceed, then restore the broken pieces at the very end.. > Your regex seems to have a few unintended matches.\nNot surprised - it was a hack to demonstrate a potential solution :ghost: \nBut my comment above just reminds me of something - your input isn't invalid HTML to begin with, so why use custom fragments at all?\njs\nrequire('.').minify(`\n  <div id=\"list {{name}}-list\">\n    {{name}}\n  </div>\n`, {\n  collapseWhitespace: true\n});\ngives:\nhtml\n<div id=\"list {{name}}-list\">{{name}}</div>\n. In that case, how about:\njs\nrequire('.').minify(`\n  <div id=\"list {{name}}-list {{#is type \"music\"}}music{{else}}film{{/is}}\">\n    {{name}}\n  </div>\n`, {\n  ignoreCustomFragments: [/{{.*?[\"'].*?}}/],\n  collapseWhitespace: true\n})\nwhich gives:\nhtml\n<div id=\"list {{name}}-list {{#is type \"music\"}}music{{else}}film{{/is}}\">{{name}}</div>. I agree that there isn't a trivial solution for the specific requirements you are aiming for here, OTOH it's a bit of a corner case (ignoring custom fragments while retaining context).\nSo if my proposed solution can resolve your issue, I'll proceed to close this - will keep this at the back of my mind in the next round of overhaul for custom fragments :wink: . Thanks for letting me know of your use cases. Always good to keep tap especially around features which I don't get to use myself.. Never used them before - is there some examples that can be tested within a normal web browser?\nThat way at least we can experiment with the code snippets to see if it is optimisable across major platforms.. Actually, looking at https://developer.mozilla.org/en-US/docs/Web/Accessibility/An_overview_of_accessible_web_applications_and_widgets\n```html\n Now *these* are Tabs! \n We've added role attributes to describe the tab list and each tab. \n\n\nChapter 1\n\n\nChapter 2\n\n\nQuiz\n\n\n\n Notice the role and aria-labelledby attributes we've added to describe these panels. \nChapter 1 content goes here\nChapter 2 content goes here\nQuiz content goes here\n\n``\nThosearia-labelledby` don't look very boolean to me?. Yeah, HTML5 or not, I think we should at least wait for these features to mature a bit more before fiddling with them.\nSo let's wait until we have ubiquitous access to aria on major browser platforms before revisiting this again :wink: . Does the current behaviour cause failure in any major browsers?. Unless there is comprehensive proof that nothing breaks and there is a general reduction in gzip sizes across a representative sample, I'm reluctant for any code changes.. @XhmikosR I shall take your word on compatibility :wink:\nWill put together a PR after my belated :birthday: party.. Speaking of community...\nhttps://stackoverflow.com/questions/7020961/uppercase-or-lowercase-doctype\n\nNote that if you don\u2019t uppercase DOCTYPE in an XHTML document, the XML parser will return a syntax error.\n\nAccording to the discussions above, if we go for uppercase, everything works - otherwise something might break.. @XhmikosR they mentioned something along the lines of XHTML5\n@DamonHD thanks for the observation and the point about optional tags\nI was worried about those enterprisy (read: Java) libraries getting upset about conformance issues, but you guys have successfully convinced me otherwise.\nWill put that PR together when I get home.. minifyJS uses uglify-js - please file a report with https://github.com/mishoo/UglifyJS2/issues by providing a test case that can be reproduced by others for investigation.. Works fine AFAICT:\n``html\n$ npm install html-minifier\n$ npm ls-- html-minifier@3.5.2\n  +-- camel-case@3.0.0\n  | +-- no-case@2.3.1\n  | | -- lower-case@1.1.4\n  |-- upper-case@1.1.3\n  +-- clean-css@4.1.3\n  | -- source-map@0.5.6\n  +-- commander@2.9.0\n  |-- graceful-readlink@1.0.1\n  +-- he@1.1.1\n  +-- ncname@1.0.0\n  | -- xml-char-classes@1.0.0\n  +-- param-case@2.1.1\n  |-- no-case@2.3.1 deduped\n  +-- relateurl@0.2.7\n  -- uglify-js@3.0.15\n    +-- commander@2.9.0 deduped-- source-map@0.5.6 deduped\n$ node\n\nrequire('html-minifier').minify(<html>\n    <body>\n      Hello World!\n    </body>\n  </html>, {\n    removeAttributeQuotes: false,\n    collapseWhitespace: true,\n    removeComments: true\n  });\n'Hello World!'\n```\n\nPlease provide a proper example which demonstrate the failure.. I've already provided proof that things are working as they should. I've yet to see anything from you which shows otherwise.\nNobody can provide assistance with the current level of information you have provided. So if that's the best you can do, then I'm afraid you'll be on your own.. @simllll hi, it's me again :sunglasses: \nI assume you've got to the bottom of this in https://github.com/mishoo/UglifyJS2/issues/2077#issuecomment-307410397, so I'm closing this.. I haven't done anything with that before, though what is your use case which dist/htmlminifier.min.js currently cannot cover?\nI was worried you are asking for Ryzen support for a second there.. I think I understand your requirements, though I'm afraid this is out of my depth.\nPull request on this is welcome - and if you need help understanding this codebase in order to make those changes, ask away :wink: . Those /dist files are used by the online minifier so far and that's about it, so chances are you are correct that nobody is using it for the purpose you've described.\nFeel free to make changes as long as the online minifier remains operational afterwards :wink: . @rogerdielrton no problem - whatever works for you.. The documentation on https://github.com/kangax/html-minifier/blob/gh-pages/README.md would be the latest.\nIf you think something needs to be improved, please file a Pull Request.. Does specifying the same input & output file not working thus requiring this new flag?. This PR does not pass Travis CI: https://travis-ci.org/kangax/html-minifier/builds/247290811\nOn the code changes itself, there is no need to introduce inplace as commander already stores the --inplace flag. Also I fail to see why a simple setting of output file/directory to that of input wouldn't suffice, rather than all the extra file handling code.. processScripts is for processing HTML templates, not JavaScript - I think you are looking at minifyJS\nAs for why the code between <script> is not being minified, they aren't valid JavaScript:\n```js\n$ type test.js\nfunction () {\n   console.log('Not Minified!');\n}\n$ type test.js | node\nfunction () {\n         ^\nSyntaxError: Unexpected token (\n    at createScript (vm.js:74:10)\n``.ignoreCustomFragments` works just fine:\n```js\n$ node\n\nrequire('.').minify(`\n{{!< default}}\n\n\n    {{#if tag.image}}\n    \n    {{/if}}\n\n`, { ignoreCustomFragments: [ /{{[\\s\\S]*?}}/ ] });\n'\\n{{!< default}}\\n\\n\\n    {{#if tag.image}}\\n    \\n    {{/if}}\\n\\n'\n``. You'll have to figure out how shell in Windows works, or alternatively use--config-fileand use JSON instead.. While this is out of scope forrequire(\"html-minifier\").minify(), you may roll your own processor by utilisingrequire(\"html-minifier/src/htmlparser\")`\nSee https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js#L946 for example usage.. html-minifier targets complete HTML fragments as default, and you can tweak options to fit your specific use cases.. Think false positives for non-PHP users when they need to use <? as part of normal text, for instance.. That's working as expected - you may view the result in a web browser to see why that single whitespace is preserved.. Setting minifyURLs to https://abc.com/ will minify stated input to stated output from above.. If you haven't noticed by now, minifyURLs is handled by relateurl - so if you want its capability extended, go file an issue there.. Try setting includeAutoGeneratedTags to false.. processConditionalComments only supports proper HTML fragments, which would not apply in your case.. URL can be supplied through minifyURLs.\nPull Request is welcomed if you want to parse <base> as value for minifyURLs.. It will be interpreted as <a href=\"\" />, which is valid format but invalid attribute value.. Please don't worry about it - I tried to save that space at one point and discovered the painful truth :wink: . Tested with the online version:\nhtml\n<!-- htmlmin:ignore -->\n<!--#include virtual=\"https://www.someWebsite.com/static/login/onlinelogin.html\" -->\n<!-- htmlmin:ignore -->. Use minifyJS: function(text, inline) { ... } to swap in any external JavaScript optimiser as you see fit.\nuglify-es is pretty much in the alpha stage, without any extensive test coverage etc. so won't be used as the default minifier here.. inline=true is for things like <a onclick=\"doIt()\"> - normal <script>alert(42);</script> has inline=false. You'll need to use the API rather than CLI to specify function as parameter values.. I don't actively support uglify-es - it is there to make it easier for other people to test and develop, which hasn't really happened much so far.\nFeel free to make a pull request to extend CLI support for function type parameter values.. > Do you still find that all major websites are ES5?\n@kzc none of the sites I frequent use ES6 even in separate files, let alone embedded within HTML.\nBut as you noticed, any malformed JS will be untouched by html-minifier, so ES6 isn't a showstopper per se.\n\nThat's a good one! :-)\n\nI'll revisit the issue when the compatibility/performance story changes - AFAICT majority of code pushed to the client browser are still pretty much good old JavaScript.\nI do concur the state of ES6+ has improved over the years, however :wink:. Online minifier takes:\nhtml\n<a translation-url href=\"platform/new\" class=\"color-white\">...</a>\nand gives:\nhtml\n<a class=color-white href=platform/new translation-url>...</a>\nwithout any parse errors.. If you look at the actual error reported & the file you've linked above, there is this fragment:\n<a translation-url=\"\" <a=\"\" href=\"platform/news\" class=\"color-white\">\nwhich is invalid HTML, thus cannot be parsed and processed.. You'll need to investigate whether the uncompressed byte saved is worth the disruption to gzip, which may result in more than a single byte lost in suboptimal compression.\nOtherwise, feel free to put together a pull request to make your case :wink: . See https://github.com/kangax/html-minifier/issues/843#issuecomment-326791250. clean-css rather than html-minifier is performing the file inlining - you can pass the necessary options to minifyCSS.. You can use any custom CSS processor via minifyCSS: function(style) { ... }\nBear in mind styles that aren't directly referenced in HTML might be used by dynamic scripts.. Personally I can't see any easy way or interface to implement this feature.\nYou are of course welcomed to put together a Pull Request to get this done.. Closing as workaround exists - any enchancement proposals in the form of Pull Request is welcomed.. I prefer only changing the /\\s/ that is necessary to pass your new unit tests rather than a blanket replacement.\nFor instance, https://github.com/kangax/html-minifier/pull/849/files#diff-bd35077e6c438d3f6866b57bb2481260L33 isn't necessary.\n(I have tested on a few web browsers and agree that the issue illustrated by your test cases need to be fixed.). @papandreou I see - if you can have the new test cases cover all the replacements of \\s to [ \\r\\n\\t\\f], I'll be very happy and convinced :wink: . I prefer changing them only if/when we hit an issue, and would therefore has test coverage for it.\nThe new tests & rollbacks LGTM - if there isn't anything else I shall go ahead & merge.. @papandreou I shall merge after your rebase is pushed out then (GitHub having a slow day?)\nThanks a lot for the patch!. That's the plan - I went straight to bed after merging your PR :sweat_smile: \nGive me a few hours while I sort out my $day_job, then I'll make 3.5.5 :wink: . https://github.com/kangax/html-minifier#options-quick-reference\nminifyCSS: {...} to pass options to clean-css. Please address the failed test cases - they illustrate why your proposed code change is unsafe.. ${module}-count is by no means valid HTML attribute, so you may need to look at ignoreCustomFragments to include the whole token not just the ${...} bit.. I assume the issue has been addressed, so I'll close this PR.. Closing as duplicate of #798. Pull Request to illustrate your use case is welcomed.. It would make more sense to suppress the trailing semicolon trimming when minifyCSS:false than to create a new flag that adds semicolons.. So the only change for html-minifier I can see is when minifyCSS: false, currently it will still strip out the trailing semicolon - and I'm amenable to change that behaviour so that any style strings stays unmodified (the quotes may still be removed, but that's a different issue).\nFor the case when minifyCSS is enabled, you will need to find out the configuration for clean-css to preserve the trailing semicolon.. Refer to the first paragraph of https://github.com/kangax/html-minifier/pull/854#issuecomment-334737124 for suggested fix to be included in this PR.. AFAICT your latest patch just adds trailing semicolon to all style attributes regardless of settings, so no that since it increases the size of minified output in all cases.. Please exclude dist/* from your commits - they will be re-generated during the next release.. @DChristiany thanks for working on this - please address https://github.com/kangax/html-minifier/pull/854#discussion_r146529311 & https://github.com/kangax/html-minifier/pull/854#issuecomment-338947775 and we should be good to go.. This project goes by the name of html-minifier - example code doesn't look like HTML to me.. The option in question doesn't concern html-minifier - please file an issue with htmlmin instead.\nI have tested your input using online minifier and cannot reproduce the issue either.. Please provide a reproducible test case.. htmlparser.js:235 refers to the normal Parse Error, so most likely due to invalid input.. https://stackoverflow.com/questions/4015345/how-to-properly-escape-quotes-inside-html-attributes. That's not valid HTML syntax at all - consider using ignoreCustomFragments as workaround.. Works in online minifier when trying with <meta charset=\"\"/>\nPlease provide an actual reproducible test case when reporting bugs.. svg compression not supported in html-minfier - pull request welcomed.. That's invalid HTML \u2013 try ignoreCustomFragments. Block tags are not allowed inside an inline tag:\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/span\nhttps://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Phrasing_content. Please provide an example to illustrate your problem.. That's out of scope for html-minifier - you can perform direct manipulation via HTMLParser\nhttps://github.com/kangax/html-minifier/blob/v3.5.7/src/htmlparser.js#L114. https://github.com/kangax/html-minifier/releases. Please submit a Pull Request for your feature.. If preserveLineBreaks is disabled, line breaks get optimised away whenever possible - seems pretty reasonable to me.. Lose that dot in --file-ext:\n```\n$ npm install html-minifier\n+ html-minifier@3.5.8\nadded 15 packages in 1.141s\n$ ls dist\n. ..\n$ ls src\n. .. index.html\n$ html-minifier --file-ext html --input-dir src --output-dir dist --config-file options.conf\n$ ls dist\n. .. index.html\n. `uglify-js` cannot process the above input either.. First of all, I can't reproduce your \"actual\" result:sh\n$ html-minifier test.html --collapse-whitespace\nFoo BarFooBar\n```\nAnd it doesn't seem to match your \"expected\" result either.\nAs for your proposed list of additions:\n- br is making a new line\n- map only overlays on top of other items\n- script is not visible\nThe rest looks good to me.\nPlease file a Pull Request alongside new tests to address this issue.. I see - thanks in advance and looking forward to your PR :+1: . Works for me using the online version:\nhtml\n<pre>\n<br>\n</pre>\n<u>\ntest fail</u>. Use &lt;&gt;.. Closing as duplicate of #877 - uglify-js supports JavaScript only, while your input is ES6.. Not reproducible using online minifier.\nhtml\n<img src=\"photo.png\"/>\nwith default options plus keepClosingSlash gives:\nhtml\n<img src=photo.png />. There's nothing safe about this transformation, so I don't see why html-minifier should do this.. The current output renders exactly the same on the browser:\n```html\n\n\n\n\nInput\nOutput\n\n\n\n\n  before ul\n\nitem1\nitem2\n\n\n\n\n before ul  item1 item2  \n\n\n\n```\n\n. @weixu365 I see - in which case, please file the PR as you mentioned :+1: \nPlease also double-check that the output is/remains valid when removeOptionalTags is also enabled.. That's not how testing works.\nPlease add tests which fails in the current version but passes with your changes in this PR.. Please exclude any changes to dist/* and package*.json from this PR.. Duplicate of #843\nContains a solution on how to use custom proccessor in minifyJS.. Feel free to create a Pull Request to rename and update all references to this file.. Duplicate of #863. This library only supports JavaScript, and the API is synchronous.. We use browserify which works.\nhttp://kangax.github.io/html-minifier/. Try the browser bundle which is used within http://kangax.github.io/html-minifier/\nhttps://github.com/kangax/html-minifier/tree/gh-pages/dist. Pull Request welcomed.. Thanks for the work!. The constraints are:\n- minify(html options) needs to return the minified string, i.e. not a Promise or some callback\n- the codebase remains JavaScript, i.e. no ES6+ is allowed\nOtherwise feel free to make a Pull Request with your desired feature alongside with relevant tests.. As stated in https://github.com/kangax/html-minifier/issues/906#issuecomment-379634151, you need to preserve the signature of minify(), i.e. it needs to return a string that is the minified input.\nAny changes to that interface would be a breaking change and cannot be accepted.. I see.\nBefore I can perform a code review, please exclude any auto-generated files from the changeset, i.e. dist/*.js. Thanks - looking at the changes, one question jumps out - is HTMLParser still functional synchronously?\nApologies for not mentioning this earlier - there are users would rely on that to perform pre/post-processing, outside the scope of minification.\nOne way I can think of is similar to ignoreCustomFragments, i.e. assign temporary (unique) strings as placeholders for asynchronous minify{CS,J}S. That way the changes would also be confined within src/htmlminifier.js. > HTMLParser is synchronous when minifyCSS and minifyJS are synchronous\nI seem to have trouble validating that - the following test file is used:\n```js\n// test.js\nvar HTMLParser = require('./src/htmlparser').HTMLParser;\nvar input = require('fs').readFileSync('./index.html', 'utf8');\nfunction log(prefix) {\n  return function() {\n    var args = [].slice.call(arguments);\n    args.unshift(prefix);\n    console.log.apply(console, args);\n  };\n}\nnew HTMLParser(input, {\n  start: log('start'),\n  end: log('end'),\n  chars: log('chars'), \n  comment: log('comment')\n});\nOn current HEAD of `gh-pages`:\n$ cat test.js | node\nchars\n  html\nstart html [ { name: 'lang',\n    value: 'en',\n    customAssign: '=',\n    customOpen: '',\n    customClose: '',\n    quote: '\"' } ] false\nchars\n   html head\nstart head [] false\n... snip many lines in between ...\nend body [] false\nchars\n /body /html\nend html [ { name: 'lang',\n    value: 'en',\n    customAssign: '=',\n    customOpen: '',\n    customClose: '',\n    quote: '\"' } ] false\nchars\n /html\n... whereas with this PR:\n$ cat test.js | node\nchars\n  html function (error) {\n            if (error) {\n              return handleError(error);\n            }\n        prevTag = '';\n        checkForParseError();\n      }\n\n``. We may be able to simplify the logic if we restrict use ofcbusage ofminify{CS,J}Sif and only ifminify(..., cb)is used. That way we don't need to rely onundefinedas return value to switch to asynchronous paths, and we don't need to make extraneous calls togetAsyncTaskCallback()during synchronous mode.. Have we handled these cases ofminify{CS,J}S()` for the asynchronous mode?\nhttps://github.com/kangax/html-minifier/blob/e7bcf1680f2e5b3c4fe232a2ffface1c7a481ad1/src/htmlminifier.js#L260-L264\nhttps://github.com/kangax/html-minifier/blob/e7bcf1680f2e5b3c4fe232a2ffface1c7a481ad1/src/htmlminifier.js#L282-L291\nhttps://github.com/kangax/html-minifier/blob/e7bcf1680f2e5b3c4fe232a2ffface1c7a481ad1/src/htmlminifier.js#L323-L326\nThey deal with the miinification of attribute values, e.g. <div style=\"display: none;\">. Thanks for addressing https://github.com/kangax/html-minifier/pull/908#discussion_r180976881 & https://github.com/kangax/html-minifier/pull/908#discussion_r180977523 - here are the test cases for https://github.com/kangax/html-minifier/pull/908#issuecomment-380703422:\njs\n// test.js\nvar minify = require('.').minify;\n[\n  // covered by this PR\n  '<script>alert(1 + 2);</script>',\n  '<style>p{display: none;}</style>',\n  // TODOs\n  '<p onclick=\"alert(1 + 2);\">',\n  '<p style=\"display: none;\">',\n  '<style media=\"{max-width: 100px}\"></style>'\n].forEach(function(input) {\n  var expected = minify(input, {\n    customEventAttributes: [/^on*/],\n    minifyCSS: function() {\n      return 'CSS';\n    },\n    minifyJS: function() {\n      return 'JS';\n    }\n  });\n  minify(input, {\n    customEventAttributes: [/^on*/],\n    minifyCSS: function(text, cb) {\n      cb('CSS');\n    },\n    minifyJS: function(text, inline, cb) {\n      cb('JS');\n    }\n  }, function(err, actual) {\n    if (err) {\n      console.error(input);\n      console.error(err);\n      console.error();\n    }\n    else if (expected !== actual) {\n      console.error('Mismatch:', input);\n      console.error('Sync: ', expected);\n      console.error('Async:', actual);\n      console.error();\n    }\n  });\n});\nWith the current PR:\n```\n$ cat test.js | node\n\nTypeError: cb is not a function\n    at Object.minifyJS (stdin:26:7)\n    at cleanAttributeValue\n\nTypeError: cb is not a function\n    at Object.minifyCSS ([stdin]:23:7)\n    at cleanAttributeValue\n\n\nTypeError: cb is not a function\n    at Object.minifyCSS ([stdin]:23:7)\n    at cleanAttributeValue\n```. Here's a quick hack (based on current `gh-pages`) that passes all the tests in this PR:\n\n `src/htmlminifier.js` \n\n```diff\n--- a/src/htmlminifier.js\n+++ b/src/htmlminifier.js\n@@ -285,7 +285,7 @@ function cleanAttributeValue(tag, attrName, attrValue, options, attrs) {\n       if (/;$/.test(attrValue) && !/&#?[0-9a-zA-Z]+;$/.test(attrValue)) {\n         attrValue = attrValue.replace(/\\s*;$/, ';');\n       }\n-      attrValue = unwrapInlineCSS(options.minifyCSS(wrapInlineCSS(attrValue)));\n+      attrValue = options.minifyCSS(attrValue, 'inline');\n     }\n     return attrValue;\n   }\n@@ -322,7 +322,7 @@ function cleanAttributeValue(tag, attrName, attrValue, options, attrs) {\n   }\n   else if (isMediaQuery(tag, attrs, attrName)) {\n     attrValue = trimWhitespace(attrValue);\n-    return unwrapMediaQuery(options.minifyCSS(wrapMediaQuery(attrValue)));\n+    return options.minifyCSS(attrValue, 'media');\n   }\n   return attrValue;\n }\n@@ -613,93 +613,100 @@ function identity(value) {\n   return value;\n }\n\n-function processOptions(options) {\n-  ['html5', 'includeAutoGeneratedTags'].forEach(function(key) {\n-    if (!(key in options)) {\n-      options[key] = true;\n+function processOptions(values, async) {\n+  var asyncWrap = async ? function(fn) {\n+    return function(text, type, callback) {\n+      callback(fn(text, type));\n+    };\n+  } : identity;\n+  var options = {\n+    canCollapseWhitespace: canCollapseWhitespace,\n+    canTrimWhitespace: canTrimWhitespace,\n+    html5: true,\n+    ignoreCustomComments: [/^!/],\n+    ignoreCustomFragments: [\n+      /<%[\\s\\S]*?%>/,\n+      /<\\?[\\s\\S]*?\\?>/\n+    ],\n+    includeAutoGeneratedTags: true,\n+    log: identity,\n+    minifyCSS: asyncWrap(identity),\n+    minifyJS: asyncWrap(identity),\n+    minifyURLs: identity\n+  };\n+  Object.keys(values).forEach(function(key) {\n+    var value = values[key];\n+    if (key === 'log') {\n+      if (typeof value === 'function') {\n+        options.log = value;\n       }\n-  });\n-\n-  if (typeof options.log !== 'function') {\n-    options.log = identity;\n     }\n-\n-  if (!options.canCollapseWhitespace) {\n-    options.canCollapseWhitespace = canCollapseWhitespace;\n+    else if (key === 'minifyCSS' && typeof value !== 'function') {\n+      if (!value) {\n+        return;\n       }\n-  if (!options.canTrimWhitespace) {\n-    options.canTrimWhitespace = canTrimWhitespace;\n+      if (typeof value !== 'object') {\n+        value = {};\n       }\n-\n-  if (!('ignoreCustomComments' in options)) {\n-    options.ignoreCustomComments = [/^!/];\n+      options.minifyCSS = asyncWrap(function(text, type) {\n+        text = text.replace(/(url\\s*\\(\\s*)(\"|'|)(.*?)\\2(\\s*\\))/ig, function(match, prefix, quote, url, suffix) {\n+          return prefix + quote + options.minifyURLs(url) + quote + suffix;\n+        });\n+        try {\n+          if (type === 'inline') {\n+            text = wrapInlineCSS(text);\n           }\n-\n-  if (!('ignoreCustomFragments' in options)) {\n-    options.ignoreCustomFragments = [\n-      /<%[\\s\\S]*?%>/,\n-      /<\\?[\\s\\S]*?\\?>/\n-    ];\n+          else if (type === 'media') {\n+            text = wrapMediaQuery(text);\n           }\n-\n-  if (!options.minifyURLs) {\n-    options.minifyURLs = identity;\n+          text = new CleanCSS(value).minify(text).styles;\n+          if (type === 'inline') {\n+            text = unwrapInlineCSS(text);\n           }\n-  if (typeof options.minifyURLs !== 'function') {\n-    var minifyURLs = options.minifyURLs;\n-    if (typeof minifyURLs === 'string') {\n-      minifyURLs = { site: minifyURLs };\n+          else if (type === 'media') {\n+            text = unwrapMediaQuery(text);\n           }\n-    else if (typeof minifyURLs !== 'object') {\n-      minifyURLs = {};\n-    }\n-    options.minifyURLs = function(text) {\n-      try {\n-        return RelateUrl.relate(text, minifyURLs);\n+          return text;\n         }\n         catch (err) {\n           options.log(err);\n           return text;\n         }\n-    };\n+      });\n     }\n-\n-  if (!options.minifyJS) {\n-    options.minifyJS = identity;\n+    else if (key === 'minifyJS' && typeof value !== 'function') {\n+      if (!value) {\n+        return;\n       }\n-  if (typeof options.minifyJS !== 'function') {\n-    var minifyJS = options.minifyJS;\n-    if (typeof minifyJS !== 'object') {\n-      minifyJS = {};\n+      if (typeof value !== 'object') {\n+        value = {};\n       }\n-    (minifyJS.parse || (minifyJS.parse = {})).bare_returns = false;\n-    options.minifyJS = function(text, inline) {\n+      (value.parse || (value.parse = {})).bare_returns = false;\n+      options.minifyJS = asyncWrap(function(text, inline) {\n         var start = text.match(/^\\s*.*/);\n         var code = start ? text.slice(start[0].length).replace(/\\n\\s*\\s*$/, '') : text;\n-      minifyJS.parse.bare_returns = inline;\n-      var result = UglifyJS.minify(code, minifyJS);\n+        value.parse.bare_returns = inline;\n+        var result = UglifyJS.minify(code, value);\n         if (result.error) {\n           options.log(result.error);\n           return text;\n         }\n         return result.code.replace(/;$/, '');\n-    };\n+      });\n     }\n-\n-  if (!options.minifyCSS) {\n-    options.minifyCSS = identity;\n+    else if (key === 'minifyURLs' && typeof value !== 'function') {\n+      if (!value) {\n+        return;\n       }\n-  if (typeof options.minifyCSS !== 'function') {\n-    var minifyCSS = options.minifyCSS;\n-    if (typeof minifyCSS !== 'object') {\n-      minifyCSS = {};\n+      if (typeof value === 'string') {\n+        value = { site: value };\n       }\n-    options.minifyCSS = function(text) {\n-      text = text.replace(/(url\\s*\\(\\s*)(\"|'|)(.*?)\\2(\\s*\\))/ig, function(match, prefix, quote, url, suffix) {\n-        return prefix + quote + options.minifyURLs(url) + quote + suffix;\n-      });\n+      else if (typeof value !== 'object') {\n+        value = {};\n+      }\n+      options.minifyURLs = function(text) {\n         try {\n-        return new CleanCSS(minifyCSS).minify(text).styles;\n+          return RelateUrl.relate(text, value);\n         }\n         catch (err) {\n           options.log(err);\n@@ -707,6 +714,11 @@ function processOptions(options) {\n         }\n       };\n     }\n+    else {\n+      options[key] = value;\n+    }\n+  });\n+  return options;\n }\n\n function uniqueId(value) {\n@@ -803,10 +815,9 @@ function createSortFns(value, options, uidIgnore, uidAttr) {\n   }\n }\n\n-function minify(value, options, partialMarkup) {\n-  options = options || {};\n+function minify(value, options, partialMarkup, callback) {\n+  options = processOptions(options || {}, callback);\n   var optionsStack = [];\n-  processOptions(options);\n   if (options.collapseWhitespace) {\n     value = collapseWhitespace(value, options, true, true);\n   }\n@@ -824,6 +835,8 @@ function minify(value, options, partialMarkup) {\n       t = Date.now(),\n       ignoredMarkupChunks = [],\n       ignoredCustomMarkupChunks = [],\n+      asyncResults = [],\n+      uidAsync,\n       uidIgnore,\n       uidAttr,\n       uidPattern;\n@@ -848,11 +861,13 @@ function minify(value, options, partialMarkup) {\n     return token;\n   });\n\n-  function escapeFragments(text) {\n-    return text.replace(uidPattern, function(match, prefix, index) {\n+  function escapeFragments(fn) {\n+    return function(text, type, callback) {\n+      return fn(text.replace(uidPattern, function(match, prefix, index) {\n         var chunks = ignoredCustomMarkupChunks[+index];\n         return chunks[1] + uidAttr + index + chunks[2];\n-    });\n+      }), type, callback);\n+    };\n   }\n\n   var customFragments = options.ignoreCustomFragments.map(function(re) {\n@@ -865,17 +880,11 @@ function minify(value, options, partialMarkup) {\n       if (!uidAttr) {\n         uidAttr = uniqueId(value);\n         uidPattern = new RegExp('(\\\\s*)' + uidAttr + '([0-9]+)(\\\\s*)', 'g');\n-        var minifyCSS = options.minifyCSS;\n-        if (minifyCSS) {\n-          options.minifyCSS = function(text) {\n-            return minifyCSS(escapeFragments(text));\n-          };\n+        if (options.minifyCSS) {\n+          options.minifyCSS = escapeFragments(options.minifyCSS);\n         }\n-        var minifyJS = options.minifyJS;\n-        if (minifyJS) {\n-          options.minifyJS = function(text, inline) {\n-            return minifyJS(escapeFragments(text), inline);\n-          };\n+        if (options.minifyJS) {\n+          options.minifyJS = escapeFragments(options.minifyJS);\n         }\n       }\n       var token = uidAttr + ignoredCustomMarkupChunks.length;\n@@ -884,6 +893,33 @@ function minify(value, options, partialMarkup) {\n     });\n   }\n\n+  function toSyncSignature(fn) {\n+    return function(text, type) {\n+      var index = asyncResults.length++;\n+      var called = false;\n+      fn(text, type, function(value) {\n+        if (called) {\n+          throw new Error('Async completion has already occurred.');\n+        }\n+        called = true;\n+        asyncResults[index] = value;\n+        taskCompleted();\n+      });\n+      return uidAsync + index + '_' + text + uidAsync;\n+    };\n+  }\n+\n+  if (callback) {\n+    asyncResults.completed = 0;\n+    uidAsync = uniqueId(value);\n+    if (options.minifyJS) {\n+      options.minifyJS = toSyncSignature(options.minifyJS);\n+    }\n+    if (options.minifyCSS) {\n+      options.minifyCSS = toSyncSignature(options.minifyCSS);\n+    }\n+  }\n+\n   if (options.sortAttributes && typeof options.sortAttributes !== 'function' ||\n       options.sortClassName && typeof options.sortClassName !== 'function') {\n     createSortFns(value, options, uidIgnore, uidAttr);\n@@ -1245,6 +1281,7 @@ function minify(value, options, partialMarkup) {\n\n   var str = joinResultSegments(buffer, options);\n\n+  function done() {\n     if (uidPattern) {\n       str = str.replace(uidPattern, function(match, prefix, index, suffix) {\n         var chunk = ignoredCustomMarkupChunks[+index][0];\n@@ -1273,6 +1310,23 @@ function minify(value, options, partialMarkup) {\n     return str;\n   }\n\n+  function taskCompleted() {\n+    if (++asyncResults.completed > asyncResults.length) {\n+      str = str.replace(new RegExp(uidAsync + '([0-9]+)_[\\\\s\\\\S]*?' + uidAsync, 'g'), function(match, index) {\n+        return asyncResults[+index];\n+      });\n+      callback(null, done());\n+    }\n+  }\n+\n+  if (callback) {\n+    taskCompleted();\n+  }\n+  else {\n+    return done();\n+  }\n+}\n+\n function joinResultSegments(results, options) {\n   var str;\n   var maxLineLength = options.maxLineLength;\n@@ -1300,6 +1354,16 @@ function joinResultSegments(results, options) {\n   return options.collapseWhitespace ? collapseWhitespace(str, options, true, true) : str;\n }\n\n-exports.minify = function(value, options) {\n+exports.minify = function(value, options, callback) {\n+  if (callback) {\n+    try {\n+      minify(value, options, null, callback);\n+    }\n+    catch (err) {\n+      callback(err);\n+    }\n+  }\n+  else {\n     return minify(value, options);\n+  }\n };\n```\n. ... except it doesn't quite handle attribute value wrapping correctly:\n>> Actual:\n>> <p style=\"*{font: 12pt 'bar'}\"></p>\n>> Expected:\n>> <p style=\"font: 12pt 'bar'\"></p>. Another issue with attribute values - optimisation of quotes relies on the minified content:\n>> Actual:\n>> <div style=\"font: \"monospace\"\">foo$</div>\n>> Expected:\n>> <div style='font: \"monospace\"'>foo$</div>. These cases are discovered by adding the following to `tests/minifier.js`\n```js\nfunction test_minify(assert, input, options, output, description) {\n  if (typeof options === 'string') {\n    description = output;\n    output = options;\n    options = null;\n  }\n  assert.equal(minify(input, options), output, description || input);\n  if (options) {\n    if (typeof options.minifyJS === 'function') {\n      var minifyJS = options.minifyJS;\n      options.minifyJS = function(text, inline, callback) {\n        callback(minifyJS(text, inline));\n      };\n    }\n    if (typeof options.minifyCSS === 'function') {\n      var minifyCSS = options.minifyCSS;\n      options.minifyCSS = function(text, type, callback) {\n        callback(minifyCSS(text, type));\n      };\n    }\n  }\n  var done = assert.async();\n  assert.notOk(minify(input, options, function(error, result) {\n    assert.notOk(error);\n    assert.equal(result, output);\n    done();\n  }));\n}\n```\n... followed by changing anything of the form:\n\n> `assert.equal(minify(input[, options]), output[, description])`\n\ninto:\n\n> `test_minify(assert, input[, options], output[, description])`. [`tests/minifier.js`](https://github.com/kangax/html-minifier/files/1907056/minifier.txt) that exercises most of the existing test cases in both synchronous and asynchronous modes.\n. I guess you are still in the middle of making changes, but just in case - the latest changes to `test/minifier.js` seems to be skipping asynchronous tests.\n\nHere's an [updated copy](https://github.com/kangax/html-minifier/files/1930686/minifier.txt) of https://github.com/kangax/html-minifier/pull/908#issuecomment-381103707 based on the latest `gh-pages`.\n. To be specific, in my version there are 6291 test cases vs 4693 in the PR.. I recognise the scope of the (re)work and appreciate the efforts thus far :+1:\n\nSorry for the relative radio silence - I'll check in every now and then and see if I can chip in something to get the tests back onto their feet.\n\nMay be I can partially refactor `test/minifier.js` in a separate PR to reduce the diffstat over here :thinking: . There shouldn't be any tests that only work in asynchronous mode - wrapper for `minifyCSS` and `minifyJS` is fairly straightforward and can be automated to make sure every test covers both modes of operation.. This doesn't work: [Amazon.html](https://github.com/kangax/html-minifier/files/1942664/Amazon.txt)\n```js\n$ node\n> require('.').minify(fs.readFileSync('Amazon.html', 'utf8'));\nRangeError: Maximum call stack size exceeded\n    at isExecutableScript\n. Please demonstrate how the minified result is different from the original input.. `uglify-js` only supports JavaScript - see previous reports on possible workarounds.. Most likely because you have ES6 instead of JavaScript within the ``.. Closing as answered - if you still have problems afterwards, please upload the file in question.. See `ignoreCustomFragments`\nhttps://github.com/kangax/html-minifier/blob/gh-pages/README.md. Use `--config-file` with JSON. Please learn the basics of using command line tools: `html-minifier --help`. What is the justification of this change, may I ask?\n\nI see value in testing the latest versions of dependencies, in case any compatibility issues arises.. This PR shows similar performance as the current builds: https://travis-ci.org/kangax/html-minifier/builds/381384835\n\nI am afraid the default settings also win this round.. Thanks for the interesting in tweaking, but I think we'll stock to whatever default settings Travis CI has in this case.. https://github.com/kangax/html-minifier/issues/919#issuecomment-386233733. `processConditionalComments` assumes complete HTML snippets within each Conditional Comment, and may give undesirable results when given unmatched fragments.. `trimCustomFragments` works for me:\n```html\n$ cat test.html\n<?php\n  require 'lib/db.php';\n?>\n<!DOCTYPE html>\n\n<html>\n      <span>This <?php echo 'Man' ?> Online!</span>\n</html>\n```\n```html\n$ html-minifier test.html --collapse-whitespace --trim-custom-fragments\n<?php\n  require 'lib/db.php';\n?><!DOCTYPE html><html><span>This<?php echo 'Man' ?>Online!</span></html>\n```. Pull request to fix this is welcome.. So the way custom fragments are handled in `html-minifier` is we replaced them with a random string before passing the content on for processing.\nhttps://github.com/kangax/html-minifier/blob/9ecabca27bed20391a439a0f0e03514315aff564/src/htmlminifier.js#L871-L892\n\nRecent versions of `clean-css` might have changed its behaviour when encountering said tokens.\nDrop a `console.log(text)` here to see what is being passed onto `clean-css`:\n\nhttps://github.com/kangax/html-minifier/blob/9ecabca27bed20391a439a0f0e03514315aff564/src/htmlminifier.js#L664. Here's a bunch of tests to check against the fix for this issue:\n```diff\ndiff --git a/tests/minifier.js b/tests/minifier.js\nindex fe425f5..e4de955 100644\n--- a/tests/minifier.js\n+++ b/tests/minifier.js\n@@ -2333,6 +2333,74 @@ QUnit.test('style attribute minification', function(assert) {\n   assert.equal(minify(input, { minifyCSS: true }), output);\n });\n\n+QUnit.test('minification of style with custom fragments', function(assert) {\n+  var input;\n+\n+  input = '<style><?foo?></style>';\n+  assert.equal(minify(input), input);\n+  assert.equal(minify(input, { minifyCSS: true }), input);\n+\n+  input = '<style>\\t<?foo?>\\t</style>';\n+  assert.equal(minify(input), input);\n+  assert.equal(minify(input, { minifyCSS: true }), input);\n+\n+  input = '<style><?foo?>{color:red}</style>';\n+  assert.equal(minify(input), input);\n+  assert.equal(minify(input, { minifyCSS: true }), input);\n+\n+  input = '<style>\\t<?foo?>\\t{color:red}</style>';\n+  assert.equal(minify(input), input);\n+  assert.equal(minify(input, { minifyCSS: true }), input);\n+\n+  input = '<style>body{<?foo?>}</style>';\n+  assert.equal(minify(input), input);\n+  assert.equal(minify(input, { minifyCSS: true }), input);\n+\n+  input = '<style>body{\\t<?foo?>\\t}</style>';\n+  assert.equal(minify(input), input);\n+  assert.equal(minify(input, { minifyCSS: true }), input);\n+\n+  input = '<style><?foo?>body{color:red}</style>';\n+  assert.equal(minify(input), input);\n+  assert.equal(minify(input, { minifyCSS: true }), input);\n+\n+  input = '<style>\\t<?foo?>\\tbody{color:red}</style>';\n+  assert.equal(minify(input), input);\n+  assert.equal(minify(input, { minifyCSS: true }), input);\n+\n+  input = '<style>body{<?foo?>color:red}</style>';\n+  assert.equal(minify(input), input);\n+  assert.equal(minify(input, { minifyCSS: true }), input);\n+\n+  input = '<style>body{\\t<?foo?>\\tcolor:red}</style>';\n+  assert.equal(minify(input), input);\n+  assert.equal(minify(input, { minifyCSS: true }), input);\n+\n+  input = '<style>body{color:red<?foo?>}</style>';\n+  assert.equal(minify(input), input);\n+  assert.equal(minify(input, { minifyCSS: true }), input);\n+\n+  input = '<style>body{color:red\\t<?foo?>\\t}</style>';\n+  assert.equal(minify(input), input);\n+  assert.equal(minify(input, { minifyCSS: true }), input);\n+\n+  input = '<style>body{color:red;<?foo?>}</style>';\n+  assert.equal(minify(input), input);\n+  assert.equal(minify(input, { minifyCSS: true }), input);\n+\n+  input = '<style>body{color:red;\\t<?foo?>\\t}</style>';\n+  assert.equal(minify(input), input);\n+  assert.equal(minify(input, { minifyCSS: true }), input);\n+\n+  input = '<style>body{color:red}<?foo?></style>';\n+  assert.equal(minify(input), input);\n+  assert.equal(minify(input, { minifyCSS: true }), input);\n+\n+  input = '<style>body{color:red}\\t<?foo?>\\t</style>';\n+  assert.equal(minify(input), input);\n+  assert.equal(minify(input, { minifyCSS: true }), input);\n+});\n+\n QUnit.test('url attribute minification', function(assert) {\n   var input, output;\n```. That will break as soon as there exists an instance of `specialComments` in the original code.\n\nAnd if you try to use the numeral settings, the ordering of existing and injected `specialComments` would still break everything.\n\nBut as you stated in the code comment, upcoming `clean-css@4.2` will have `/* clean-css ignore */`, so may be we should re-evaluate the fix for that.\n\nNote that the same custom fragment issue would apply to JavaScript snippets since `uglify-js` won't handle invalid syntax either - though it would throw an error which causes `html-minifier` to fall back to verbatim output.\n\nMay be this PR should just be picking up any tokenizer warnings from `clean-css` and output the verbatim styles instead of the incorrect minified output?. I couldn't see a way for this change to not break other existing use cases - may be `clean-css@4.2` will give us a viable option of dealing with custom fragments.\n\nUntil then, I'll leave this open until a proper solution comes to mind.. According to [MDN](https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/disabled):\n\n> Do not set the attribute to `true`, as this will suggest you can set it to `false` to enable the element again, which is not the case.. `lit-html` isn't HTML, which is what this library aims to support.\n\nIf you are using boolean tags in a non-standard-compliant way, then avoid the use of `collapseBooleanAttributes`. https://github.com/kangax/html-minifier/issues/931#issuecomment-393664877. Custom fragments have more conservative whitespace preservation rules by default.\n\nYou can remove those from the input, or you can try `trimCustomFragments` (refer to https://github.com/kangax/html-minifier/blob/gh-pages/README.md). That's not a use case `ignoreCustomFragments` supports.\n\nYour best bet would be to submit a Pull Request enhancing existing `srcset` related optimisation, but you will also need to provide references in the HTML specification that shows `data-srcset` is being processed that way.. https://www.w3.org/TR/html5/syntax.html#comments. No.. Not reproducible using latest version of `html-minifier`\n```\n$ cat test.html\n<script src=\"//cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.min.js\">\n```\n```\n$ html-minifier test.html\n\n```. No idea - try asking `npm` about that.. See `includeAutoGeneratedTags`. LGTM - thanks!. > Is it normal bahavior?\n\nYes, that is invalid HTML - try `<:->`. Pull Request is welcomed.. This is a Chrome conformance bug.. > IE11 also can't work.\n\nI just tested IE11 and I can see an SVG image rendered in front of me.. ![test](https://user-images.githubusercontent.com/1898413/43819409-589b1b8a-9ad2-11e8-837f-e57aeda3811e.png)\n. @DamonHD thanks for the confirmation :+1:\n\nFWIW, Firefox also works with the example in this report:\n\n![test](https://user-images.githubusercontent.com/1898413/43821180-e23e1c70-9ad7-11e8-9973-6663a10d2996.png)\n. Closing as answered.. Use ` ``` ` around your example code and they won't get stripped.. Whitespace not observed from the output of `html-minifier` - most likely inserted by PHP code instead:\n```js\n$ node\n> var minify = require('html-minifer').minify;\n> var options = {\n    collapseWhitespace: true,\n    removeComments: true,\n    minifyCSS: true\n  };\n\n> minify('body{color:#<?=bg?>\"}', options);\n'body{color:#<?=bg?>\"}'\n\n> minify('', options);\n''\n```. Looks like `clean-css` may have changed its error handling behaviour from the older versions:\nhttps://github.com/kangax/html-minifier/blob/6c237eb80858b810aea9086973b30104709cefdc/src/htmlminifier.js#L671\n\nPR is welcome.. Thanks for the patches :+1:. Pull request is welcome - things like `{{ foo.bar }}` are called custom fragments and are picked up by `html-minifier` around here:\nhttps://github.com/kangax/html-minifier/blob/df720b32ffdcda11025a75dc57acef4210a031f4/src/htmlminifier.js#L864-L906\n\nThere exists `trimCustomFragments` which trims whitespaces *around* custom fragments. You can either extend that flag or introduce a new one.. Not a bug \u2014 please read https://github.com/kangax/html-minifier/blob/gh-pages/README.md#options-quick-reference for proper usage of options.. See #435 - it performs `minifyJS` on `foo` and gives `foo;`\n. 1. replaces `'htmlmin' + (Math.random() + '').slice(2)`, ensure that the identifier generated would not collide with input\n   - the loop will almost never be executed more than once\n2. replaces ` htmlmin:temp ` to avoid potential collision with input\n. By replacing ` htmlmin:temp ` with `!deadb33f`, we also get to simplify `isIgnoredComment()` would may give a minor performance boost.\n\nAlso, this PR avoids any extra work done when `ignoreCustomFragments` or ` htmlmin:temp ` are not specified in the input, i.e. `uniqueId()` and `String.prototype.replace()` would never be called if none of this features are requested by the input.\n. That returns a whole match object, whereas `/;$/.test(text)` returns a boolean.\n\nAnyway, I can't see how the RegExp version would give any performance advantage here.\n. I was also tempted to remove the commented code with regards to block elements below...\n. I've pulled it out into `createMap()` and `createMapFromString()`\n. Some saying about great minds huh? :wink:\n. If you mean the parens around `head`, `colgroup` and `caption`, then yes, due to precedence of `&&` over `||`, i.e. `!/^\\s/.test(text)` applies to all of those inside the parens, but not `head` or `body`.\n\nBut I guess another `createMapFromString` is in store here... :stuck_out_tongue_winking_eye: \n. OT: I wonder how far modern JavaScript engines can optimise this to:\n\n```\nif (options.collapseWhitespace) {\n  str = str.replace(new RegExp('\\\\s*' + uidAttr + '\\\\s*', 'g'), function() {\n    return ignoredCustomMarkupChunks.shift();\n  });\n}\nelse {\n  str = str.replace(new RegExp('(\\\\s*)' + uidAttr + '(\\\\s*)', 'g'), function(match, prefix, suffix) {\n    var chunk = ignoredCustomMarkupChunks.shift();\n    return collapseWhitespace(prefix + chunk + suffix, {\n      preserveLineBreaks: options.preserveLineBreaks,\n      conservativeCollapse: true\n    }, true, true);\n  });\n}\n```\n. These tests are for the benefit of keeping track of this tricky logic than of any real world importance, I agree.\n\nPretty sure most people can't tell an empty screen from one with a whitespace on it :ghost:\n. I thought of using `slice`, but then looking up and saw we use `substr` everywhere else :sweat_smile: \n\nDo you want me to replace all the usages?\n. I'm thinking of collapsed whitespaces always getting turned into ` `- but I guess no harm making them`\\s`\n. It's removing the space after `` rather than the one before.\n\nIf there isn't any space before `` then this wouldn't have happened.\n. I guess you mean `trimWhitespace(attrValue.split(/\\s*;\\s*/g))`, but okay :stuck_out_tongue: \n. Ugh - sorry :sweat: \n. I was being conservative - but yeah let's go with yours.\n\nCan you think of other tags while we are at this?\n. Noted for `var` hoisting.\n\nAs for `let`/`const` - I don't think we are quite ready for ES6 yet if we are to support a range of web browsers...\n. It'd add `\n` - I'll add a further test for clarification.\n. I'd have no idea on this one. I can only say I haven't used it in any of my projects yet.\n. I made that term up, and I'm notoriously bad at naming things :sweat_smile: \nautoGenerated sounds generic enough for possible further expansion - though in this case the default would be true, i.e. it'd be the opposite sense to the current setting. Is that okay?\n. @kangax @XhmikosR you two make up your mind and write it in a new issue - I'll pick it up from there :wink: \n. Is this the same as htmlTags from #514?\n. Okay, since this feature is guarded by html5 flag, I guess we are safe to just stick to that spec by the letter.\nmakeMap gives better performance than [].indexOf(), so yes please use that :wink: \n. I have zero idea how webpack works, so PR welcome :wink: \n. Yeah I had some internal back-and-forth on this but couldn't think of the best way. Any suggestions?\n. Sorry I don't quite follow what you mean...?\n. There's == null in cli.js and I'm not sure if I can get rid of that safely...\n. I'll have to edit some files either way htmlparser.js is inline - but outside it is then :wink: \n. I have to change these due to no-multi-spaces complaining - and it's the only place in the project that rule has a trouble with...\n. strict rule from eslint complaints - do you want me to add /* eslint-disable */ instead?\n. No dice :confused: \n{\n  \"env\": {\n    \"browser\": true,\n    \"node\": false\n  }\n}\ngives\n114:2   error  Use the function form of 'use strict'  strict\n. I think it's more to do with the Google Analytics code at the bottom of the script?\n. \"node\": false would mean I need to add /* global: require */ as well - but okay, I'll get them :sweat_smile: \n. You need to keep this for clearing currentChars - try changing this to inlineTags instead of removing the logic.\n. Alright:\n- keep node: true\n- change to strict: [2, \"function\"]\n- add /* eslint-disable */ before GA\nSounds about right?\n. Why not just specify a function in options.minifyJS, then here just do:\njs\nif (typeof options === 'function') {\n  return options(text);\n} else {\n  return UglifyJS.minify(text, options).code;\n}\n. createAttributeSorter()?\n. createSortAttributeFn()?\n. What happened here? Why are all the lines changed?\n. You need to make sure the new tests will run in the web version as well.\n. No worries, I'm pretty new to this as well :ghost:\nI am genuinely confused as to why it flags all the lines as changed even though most of them are visually identical.\n. @kangax as per https://github.com/kangax/html-minifier/commit/139d31496192863f92ba59da38cd608b328af525#commitcomment-16956122\n. Done :wink: \n. typeof v === 'undefined' is different from v === undefined in that the former allows v to not have been declared yet, whereas the latter will cause a runtime error.\nSo I only use the former when I need to cover that specific case, to avoid when I have a typo with v :sweat_smile:\nEither way I'm not too fussed, so I'll change it :wink: \n. Done :wink: \n. Any suggestions? :sweat_smile:\nI'm actually not sure what case convention grunt tasks take, otherwise I might have gone for something with multiple words...\n. https://github.com/mpc-hc/mpc-hc.org/blob/master/Gruntfile.js#L282\nI guess exec-test be it then...\n. I was hoping to forbid future additions of multiple statements like pos.x = x; pos.y = y;\n. We have circular references of functions, so this make it only check for var\n. On closer inspection, the rule (which has max=1 by default) does not complain about this in htmlparser.js:\nif (args[3] === '') { delete args[3]; }\nif (args[4] === '') { delete args[4]; }\nif (args[5] === '') { delete args[5]; }\nwhich according to their documentation is clearly incorrect.\nI'll go with your suggestion and remove this option then.\n. This is what happens without nofunc:\n```\nsrc/htmlminifier.js\n   267:22  error  'minifyJS' was used before it was defined            no-use-before-define\n   285:14  error  'minifyURLs' was used before it was defined          no-use-before-define\n   298:14  error  'minifyCSS' was used before it was defined           no-use-before-define\n   302:12  error  'isMetaViewport' was used before it was defined      no-use-before-define\n   346:21  error  'minify' was used before it was defined              no-use-before-define\n   354:14  error  'minify' was used before it was defined              no-use-before-define\n   729:8   error  'minify' was used before it was defined              no-use-before-define\n  1157:13  error  'joinResultSegments' was used before it was defined  no-use-before-define\nsrc/htmlparser.js\n   90:30  error  'joinSingleAttrAssigns' was used before it was defined  no-use-before-define\n  168:42  error  'parseEndTag' was used before it was defined            no-use-before-define\n  174:29  error  'parseStartTag' was used before it was defined          no-use-before-define\n  177:11  error  'handleStartTag' was used before it was defined         no-use-before-define\n  194:26  error  'parseStartTag' was used before it was defined          no-use-before-define\n  232:7   error  'parseEndTag' was used before it was defined            no-use-before-define\n  242:5   error  'parseEndTag' was used before it was defined            no-use-before-define\n  271:7   error  'parseEndTag' was used before it was defined            no-use-before-define\n  276:9   error  'parseEndTag' was used before it was defined            no-use-before-define\n  281:7   error  'parseEndTag' was used before it was defined            no-use-before-define\n? 18 problems (18 errors, 0 warnings)\n```\n. So I think that's all 3 comments addressed then :tada: \n. If it weren't for VS Code suggesting keywords harvested from the file, I wouldn't have spotted this :disappointed_relieved: \n. It's pretty lightweight and gets the job done, with pretty good hints / auto-completion, integrates well with git and won't get in my way like a full-featured IDE would.\nSo yeah I've been liking it so far :+1: \nMy history of code editors:\n- edit.com\n- Notepad\n- Visual Studio\n- Eclipse\n- NetBeans\n- VS Code\n. Any reason for the extra blank line?\n. I'd have gone with Array.filter(), but this also works.\n. Given that you are removing whitespaces surrounding the custom fragments indiscriminately, may I suggest calling this trimCustomFragments?\n. Given that you are removing whitespaces surrounding the custom fragments indiscriminately, may I suggest calling this trimCustomFragments?\n. May I get a few more tests here with:\n- whitespaces before and/or after <? ... ?>\n- contents before and/or after <? ... ?>\n- consecutive custom fragments\n. Please don't commit files under dist/ - they will be generated and updated when a release is made.\n. This is the case without ignoreCustomFragments - the case you are interested in is a line above, when nothing's changed, i.e. expects to equal to input \ud83d\ude09 \n. Please sort these require() in alphabetical order\n. Please sort these dependencies in alphabetical order\n. I'm well aware of that, just didn't worry too much as this is a single test case of specific input.\nAs you can see in https://github.com/kangax/html-minifier#options-quick-reference, the default values for ignoreCustomFragments is not only non-greedy, but can also handle multi-line values in between the template markers.\nNonetheless, I'll add the ? to make it easier for your eyes. :wink: . Do you mean collapseWhitespace here?. ~Shouldn't the whitespaces in </div> foo bar </div> be optimised here?~\nEdit: Never mind - I misread </div> as <div>. But please add a positive test case:\n``html\n<div class=\"doNotTrimWhitespace\"></div><div> foo bar </div>\n````.trimWhitespaceis not a valid option - it's just a private function within the codebase..html-minifierdoes not throw error upon invalid options - it just ignores them..preserveLineBreaksdoesn't seem to be required here?. This will preserve the trailing semi-colon regardless ofminifyCSS`, which is what I meant in https://github.com/kangax/html-minifier/pull/854#issuecomment-338923832\nThe trailing semi-colon is not needed for standard HTML, so if you need to preserve it, only do so for minifyCSS:false. I see what you mean - yes that is acceptable, as we'll now only trim whitespaces before trailing semi-colon, and clean-css takes care of the rest.\nTo make sure this works in the future, can you add a trailing semi-colon to the following test?\nhttps://github.com/kangax/html-minifier/blob/9a45eb435a8a3ec453da52a752c0d4cf5c071b1d/tests/minifier.js#L2225. Please also exclude changes to this file.. Tests look good, thanks.\nCan you add one more that also does removeOptionalTags: true to make sure the newly placed </p> doesn't get removed?. Perfect - thanks! :+1: . Please leave this out of the PR.. Never mind - I have performed the edit.. Please use typeof minifyCSSResult !== 'undefined' instead of overriding eslint. Please move var runningAsyncTask = true; into here and remove the two references above to avoid allocation in the synchronous case.. Clever use of buffer - unlike custom fragments, scripts and style sheets are guaranteed to take up the whole text :+1: \nMay I suggest storing the index, i.e. buffer.length then push null or whatever to it, instead of introducing a new class?. diffstat is too large as it is for this file to ensure correctness as is already - I'll probably make another PR as I said back in https://github.com/kangax/html-minifier/pull/908#issuecomment-383022651\nThat aside, I don't understand why there is a distinction between test_minify_sync and test_minify_async:\n- the use of existing API should always be synchronous\n- the use of callbacks should always be asynchronous (whether some of them may complete immediately or not)\nSo the requirement is that all existing test cases should always go through both synchronous & asynchronous modes, the only difference should only be whether they throw/return an error or not.. You are free to use setTimeout() within minifyCSS & minifyJS to emulate asynchronous behaviour - I have tried and it works on both node and web testing modes.. --minify-css --minify-js would do, i.e. lose those trues as they are the defaults.. Sure thing.. Does clean-css throw anymore?\nIf not, let's get rid of the whole try-catch, plus that way we get to log all the errors not just the first one in the list.. Wouldn't else if (content) { suffice here? '' is falsy after all.. ",
    "duncanbeevers": "And @rsp!\n. Once the gzip benchmark stuff lands, it'll be much easier to see whether efforts in this area yield size savings.\n. We can try simplistic approaches like alphabetizing attributes, or more sophisticated approaches like identifying which tag/attribute combos occur most-often. For example, determining that div tag's most-common attribute is class while span tag's most-common attribute it id, resulting in better encoding of <div class= and <span id= sequences.\n. What do you intend for this to do?\nWould you like to omit all valueless, non-boolean attributes?\nhtml\nvar input = '<div data-foo></div>';\nexpect(minifiy(input, { removeEmptyAttributes: true }), '<div></div>');\nThis seems like a reasonable behavior, although I haven't seen any markup that would benefit from it, and I have seen markup that would be damaged by it, such as angular templates driven by the presence of some data attribute.\nCan you think of any consequences to this?\n. Agreed.\n. The capability to stream results is solid, but the output format precludes some of the stuff we're doing with customAttrSurround. I'm not sure it would be possible to integrate this in a way that would be backwards-compatible for htmlparser2's existing consumers.\n. I spent a little time writing up a proof-of-concept extensible html tokenizer. https://github.com/duncanbeevers/skunks\nIt's notable difference from projects like htmlparser2 and parse5 is that the tokenizer is built from tokenization rules at run-time rather than relying on a hard-coded tokenizer.\nThis extensibility means that adding new rules for custom dialects is supported directly and can be accomplished through simple extension of the base tokenizers.\nAs an example, I've included an Angular parser that recognizes elements like <ng:include>, while keeping support for these freaky nodes out of the core html tokenizer.\n. Most font icon libraries use the <i> element to denote glyphs. Seems reasonable to remove.\n. @khmelevskii There is no CLI access to this alternative attribute parsing. Please see the included tests for how the functionality works.\nThe API expects RegExp objects passed as customAttrOpen and customAttrClose properties. If these are not provided, the behavior is exactly the same as before this commit.\nWith those properties supplied, the html parser recognizes non-HTML-compliant markup surrounding HTML element attributes.\nFor example, in my usage of the library I supply these very lenient opening and closing rules\njavascript\n{\n  customAttrOpen: /\\{\\{#[^\\}]+\\}\\}/,  // recognizes {{#stuff...}} before element attribute\n  customAttrClose: /\\{\\{\\/[^\\}]+\\}\\}/ // recognizes {{/stuff}} after element attribute\n}\nI don't know the best way to introduce these options to CLI usage of the library, or even whether it's appropriate to try to do so.\n@kangax Do you have any opinions on how this functionality should be exposed?\n. Fixes #189 \n. It sounds like there are a couple pieces that need to be handled for this to be ready for a point release.\n- [ ] CLI\n- [ ] Documentation\n. @toxinhead I'll take a look.\n. @In4matik I knocked out a super-basic version of this functionality here.\nIt's a bit kludgy though I have some ideas about how to improve it, but it should basically accomplish what you're after.\nI tested it against the source of this page with a maxLineLength setting of 900, and collapseWhitespace true, and this was the result.\n. @kangax \nBenchmark output here run with gh-pages as-is, then with limit-line-length but not limiting lines, and finally with a maxLineLength of 500.\nSpeed looks pretty stable, variance seems insignificant.\n. Sure. I was thinking of poking at this some more to get better-compressed results.\nFor example, right now it maximally-compresses\nhtml\n<a class=\"hey\">link link</a>\nto this\nhtml\n<a\n class=\"hey\">\nlink link\n</a>\nI think the best we can hope for is this:\n``` html\n<a\nclass\n=\n\"hey\"\n\nlink\nlink\n</a\n```\n\nBut that's a fish to fry another day!\n. I think this issue can be closed. If we want to pursue more aggressive splitting, I suggest we address that with another more-focused PR.\n. This should make the CLI integration simpler as the functionality now accepts arrays of attribute-surrounding open/close regexp pairs.\nRelated to #189 #201\n@toxinhead I tested this with your /\\{\\%[^\\}]+%\\}/, /\\{\\%[^\\}]+%\\}/ regexp pair and it seemed to work fine. If you still have an issue, open an issue either here, or in kangax/html-minifier if this gets merged, and I'll add an explicit test-case for it.\n. I think in the future I'll leave these dist commits off until post-merge.\n. @jmatsushita This is another issue related to the markup not being valid HTML. Specifically, the flex?=\"\" attribute syntax is invalid HTML.\nI made some changes to the HTML parser to allow it to parse handlebars conditionals surrounding attributes like <input type=\"checkbox\" {{#if condition}}checked{{/if}}>. Your use case is slightly different in that it involves parsing the markup joining the two attribute parts (attribute name, and attribute value).\nMaking this work would require a similar change to the html parser.\n. Great. Let me know if you'd like to see this squashed down or whatever.\n. Hey @tivac \nThe issue here is that you've got ambiguous double-quotes.\nhtml\n<input data-bind=\"text\" placeholder=\"<%= i18n(\"filters.text.label\") %>\"/>\nShould be\nhtml\n<input data-bind=\"text\" placeholder=\"<%= i18n('filters.text.label') %>\"/>\nI wrote a small entry discussing this type of parsing error, and hope to publish it shortly.\nhttps://gist.github.com/duncanbeevers/39635525529e72ecd145\n. This situation shouldn't cause the minification process to hang, but should instead let the user know what's going on. Should be addressed by #192 , Better Parsing Errors.\n. I think there are a number of places where we're using greedy regular expressions where non-greedy would do, and my intuition is that making this switch could significantly reduce both RAM usage and overall run-time.\n. This example has \"invalid\" html at <%- selectionType %>.\nWe offer the customAttrSurround option for dealing with this in handlebars templates.\nhtml\n<input type=\"checkbox\" {{#if checked}}checked{{/if}}>\nI think this situation can be dealt with using a customAttrSurround pair like [/<%\\-\\s+/, /%>/], this preserving the LoDash delimiters and the selectionType attribute \"name\".\n. The \"interior\" of this attribute is not a valid html attribute.\nactive ? 'class=\"active\"' : 'class=\"inactive\"'\nPerhaps you could use something like this?\nhtml\n<div class=\"<%= active ? 'active' : 'inactive' %>\">\nUsing this format, no customAttrSurround is necessary.\n. I think this can be closed.\n. Can you give a better description of the bug here? I wrote a simple test case that didn't fail as I expected it to, and thus wasn't very illuminating.\njavascript\ninput = '<style type=\"text/css\">/*><*/</style>';\nequal(minify(input, { minifyCSS: true }), '<style type=\"text/css\"></style>');\n. @sopilkar This is invalid HTML. You can't use double-quotes inside value attribute value.\nSimply change the internal double-quotes to single-quotes.\njavascript\nvar input = '<input type=\"submit\" name=\"accept\" value=\"{{{ phrase \\'ACCEPT\\' }}}\"/>';\n. Anything to share on this @kangax?\n. What is the expected output here?\nPreserve everything within the conditional comment?\njavascript\nvar input = '<!--[if IE 6]><!-- test --><![endif]-->';\nexpect(minify(input, { removeComments: true }), input);\nRemove the inner comment?\njavascript\nvar input = '<!--[if IE 6]><!-- test --><![endif]-->';\nexpect(minify(input, { removeComments: true }), '<!--[if IE6]><![endif]-->');\nBlow away all the comments?\njavascript\nvar input = '<!--[if IE 6]><!-- test --><![endif]-->';\nexpect(minify(input, { removeComments: true }), '');\n. Whichever way we go, I'd like to have a more concrete use-case to target than this initial snippet.\nI'm all for making the tool easy to use, and I want it to do the right thing out of the box. It's unclear to me what the right thing is, in this case.\n. Newlines in html attribute values are valid and recognized. I think the only way you're going to get what you're after here is with some kind of custom attribute processing. Currently html-minifier provides a handler to its html parser that deals with all of this. To handle this, we'd need to allow you to override/extend the built-in handler's attribute handling.\nI played with this for just a moment, but didn't have a lot of incentive to go very deep. I'm reticent to suggest adding options to html-minifier that are really just proxying for features already provided, fully or partially, by the underlying html parser.\n@szarouski Do you have any estimate of what kind of space savings you'd see in an optimal compression scenario?\nMy gut feeling is that this is too niche a use-case with too meager benefits to qualify for inclusion. I'm biased of course!\n. Looks like a duplicate of https://github.com/kangax/html-minifier/issues/98\n. I think the most \"efficient\" solution in terms of number of output characters would be to generate quotes around the terminal attribute values in self-closed tags.\nxml\n<tag foo=bar baz=\"buzz\"/>\n<tag foo=bar baz=buzz><tagChild/></tag>\n. That attribute might just be acting as part of the ng-table directive, and isn't necessarily even included in the ultimate markup generated by the directive, so the sense of the meaning of the attribute is distinctly different in the context of angular.\nAccording to the w3c spec, sortable is a boolean attribute.\nThe spec for boolean attributes is pretty unequivocal on how these attributes may be used.\n\nA number of attributes are boolean attributes. The presence of a boolean attribute on an element represents the true value, and the absence of the attribute represents the false value.\n...\nThe values \"true\" and \"false\" are not allowed on boolean attributes. To represent a false value, the attribute has to be omitted altogether.\n\nIt's a little unfortunate that ngTable has overloaded the meaning of this attribute in a somewhat confusing way.\nI don't think this qualifies as a bug in html-minifier. My feeling is that the best path forward would be to request a change in ngTable to use an alternative attribute such as sortBy to drive its sorting behavior. The old attribute could continue to be recognized, providing deprecation protection to existing consumers of the library.\nCC @esvit\n. Fixes #227\n. Fixes #228\n. Fixes #185 \n. I noticed on gh-pages, that just running the benchmarks causes changes to the committed, minified files.\nFirst, I think those assets shouldn't be under source control, and we should just rely on the benchmark to generate them as needed. The fact that they're drifting seems a little odd.\n. I've removed all the benchmark-generated assets from source control and tidied up the .gitignore to make sure they don't accidentally get committed.\n. Removed separate gzip benchmark instructions and BitDeli integration\n. This also deals with one previously-overlooked edge case.\nhtml\n<div style></div>\n. Yeah, I'm fine with closing this. I poked around at some of the edge cases and wrote some more granular tests, but it's a little snipe-hunty. I wasn't actually experiencing any problems and just noted some spots where the code could be made more robust.\nI'll scratch out a few more cases if I get the itch.\n. @LaurentGoderre Your needs mentioned in wet-boew#5818 might be served by simply using the maxLineLength option recently-added to html-minifier.\nAs it stands, this PR slightly increases the size of the generated output after gzipping by increasing the total entropy of the input corpus.\nYou can see the difference in compressed output size by running\nnode benchmark.js\nBefore applying this PR, the html-minifier corpus is agressively gzipped down to 8821 bytes while afterwards it compresses to 8828 bytes.\nThis is admittedly a pretty negligible difference, but if the maxLineLength functionality already incorporated in the project meets your needs, I'd like to avoid taking any hit to the baseline compression performance.\n. I am definitely not against adding it as an option.\nCan you explain what problem this pull request alleviates?\n. I haven't seen a . in a tag name before.\nCan you share an example of a project using a . in a tag name in this way? Is it possible to simply use valid html tag names for your directives?\n. Cool, thanks for the feedback. I don't think it's worthwhile changing the base behavior of the minifier to accommodate this nonconformant markup. The error message emitted seems pretty clear.\nThanks for chiming in on the issue in the angular-paginate-anything repo as well.\n. Can you post an example style tag along with the minify options you're using?\n. @genechan Sorry, it looks like the markup got a little shredded here. Can you post your markup as a gist and provide a link to it?\n. It looks like you simply need to specify the minifyCSS option in your minification configuration.\nAfter adding minifyCSS: true, the markup you provided compresses to this.\n. @genechan Would you mind closing this issue?\n. Fixes #219\n. indexOf has to scan through the entire string in the case of no matches. The regular expression can terminate its search at the first mismatched character.\nAn alternative implementation might be to substring off the front of the corpus and just do a strict equality comparison to that, but the regexp implementation generates fewer (no) intermediate objects for garbage collection.\n. Hmm, this is a little tricky. I think technically in a text block like that, < should be html-encoded. I don't know how angular deals with that.\nIt certainly wouldn't look pretty writing {{ $index &lt; value ? '*' : ' ' }}.\nI think this might be a situation that is simply out of reach of this tool. If being able to minify this is important, perhaps you could make a simple filter for emitting the output need based on the value of $index\n. Sorry I missed this issue. Is this still happening after wrapping individual attributes?\n. So the idea with customAttrSurround is that the declared delimiters are immediately-adjacent to the beginning and end of any attr+value pair. What happens within the attribute, and specifically within the quote value portion of the attr+value pair is entirely driven by standard html parsing rules, according to which, whitespace within attribute values is perfectly valid.\nYou're not splitting hairs, as the parser definitely treats the two sections (attr-surround expressions and attr-value pairs) with distinct rules and no implicit crossover.\nIf you want to keep wrapping attrs with that extra whitespace, just go ahead and add it to each part of the regular expression, just as you did. I don't think there's any bug here, and the changes you suggested for the wiki documentation should be sufficient to help others diagnose this issue should they encounter it.\n. The customAttrSurround option adds special per-attribute delimiters. It's not going to be able to recognize multiple attributes wrapped in a single handlebars block.\nYou'll have to duplicate the handlebars block for each attribute you wish recognized.\nhtml\n<img src=\"img/shop.gif\" {{#if sign_logo}}alt=\"{{sign}}\"{{/if}} {{#if sign_logo}}data-echo=\"{{image sign_logo}}\"{{/if}} width=\"80\" height=\"60\" />\nThis does seem marginally useful, and just emitting broken markup without a warning certainly isn't ideal. On the other hand, it pushes more and more knowledge of the workings of templating systems into a general-purpose tool.\nI hope the suggestion helps and the repetition in your markup doesn't grate.\n. @jbenoit2011 The wiki has been updated to call out individual attribute+value pair wrapping.\n. I agree we should not unnecessarily expand attribute values, and JSON is getting embedded everywhere these days. It's simply not that unusual.\nRight now we support the removeAttributeQuotes, which can generate documents with heterogeneous attribute-quoting styles.\nRather than a big switch that turns on and off attribute value quoting, I feel we should attempt to generate output that best suits the input.\nFor example, an option like optimizeAttributeValueQuotes would encompass the current behavior of removeAttributeQuotes, as well as attempt to find an optimal representation for attribute values not eligible for an unquoted representation.\nAs it stands, I think this would be as simple as counting the number of double-quotes and single-quotes within an attribute value and quoting the attribute value using whichever there are fewer few of.\nI'm not sure whether this means we first need to normalize attribute values to a canonical representation before determining their output form. Doing so would allow us to generate optimized representations of otherwise noisy attribute values.\nhtml\n<div data=\"{&quot;foo&quot;: &quot;bar&quot;}\"></div>\n<div data='{\"foo\": \"bar\"}'></div>\nThis seems like a reasonable direction to take attribute-quoting, and worthy of a spike, although I think the proposed implementation is a bit narrowly-focused and demands too much interaction from developers.\nThis is just my two cents, but I'd like the options we expose to match programmer intent, and not demand too much a-priori knowledge of the corpus to be compressed or the mechanics of how said compression will be accomplished. Instead, they should be able to flip a simple switch and get out lots of goodies, with a good level of confidence that we haven't buggered their whole document.\n. I'm concerned about this affecting class names containing templates such as this.\nhtml\n<a class=\"btn {{#if loading}}loading{{/if}}\"></a>\nThe tokenization btn, {{#if, loading}}loading{{/if}} is clearly incorrect.\nI'd also be interested in seeing the compression difference this makes. My suspicion is not much, but I'd be happy to be shown wrong.\n. This patch also provided ~5% speedup on the wikipedia benchmark.\n. The change to the existing test is due to ignored tags no longer being handled as tags per-se, but instead as opaque strings. After they're removed, the ordinary whitespace collapsing rules come into play, and those rules preclude collapsing out the central whitespace in this construct: text``whitespace``text\n. This could be pretty easily adapted to deal with #83 as well.\n. Oh yeah, this also makes ignored-tag-removal a little more strict, demanding matching opening and closing tag pairs.\n<% can only be closed by %> and <? can only be closed by ?>.\n. @ds82 Looks like just a style change is necessary here to appease the jscs check.\n. :+1:\n. This seems like plain old invalid HTML which the parser rightfully barfs on. The error message emitted indicates the problem pretty clearly.\nBrowsers don't seem to respect the markup in the way intended, so I don't think we should jump through any special hoops here.\n\n. Is this something that makes sense to toggle all at once, or on a tag-by-tag basis?\n. @sigvef I'm curious about your use-case. What dialect of HTML are you using that allows for . in tag names?\n. Thanks @sigvef. Much appreciated!\n. Please see the documentation in the README regarding the keepClosingSlash minification option.\n. I'm not certain since Angular 2 is still very nebulous.\nThe [ng-repeat|todo] seems like an attribute-style directive which will iterate over the collection yielded by the attribute value todosOf('good') referencing the individual items as todo.\nThe (click) looks like some kind of event-binding.\nIn the Angular design documents there is an AngularJS Design Doc Templating whose examples all use a more pedestrian-looking on-click, bind-value, and ng-repeat (and kin).\nI've only seen this new syntax in blog posts such as this one concerning details revealed at ng-europe.\n\n. Thanks Juriy!\n. In your first example:\nhtml\n<div <%= \"a\" %>></div>\nThe attribute is \"a\", and the parts surrounding it are <%= and %>.\nTo recognize these via customAttrSurround, include a regular expression pair that captures the opening and closing parts.\njavascript\ncustomAttrSurround: [ [ /<%=\\s+/, /\\s+%>/ ] ]\n. That sounds like a bug with htmlmin:ignore. Can you post a snippet of the failing markup, including the htmlmin comment?\n. customAttrCollapse, as the documentation says, only strips newlines from attribute values.\nI agree that your use-case makes sense. It looks like we could change the regular expression in use.\nhttps://github.com/kangax/html-minifier/blob/f1754cd5607c75b1faa903a19f2b14d10b4ee9eb/src/htmlminifier.js#L253\nfrom (remove newlines)\njavascript\nattrValue = attrValue.replace(/\\n+/g, '');\nto (remove newlines and instances of two-or-more whitespace characters)\njavascript\nattrValue = attrValue.replace(/\\n+|\\s{2,}/g, '');\n. Testing this change with your input produces your expected output.\nhtml\n<div ng-class=\"{ disabled: !charger_subgroup[features._name],recommended: charger_subgroup[features._name].recommenDation &gt; 0,notrecommended: !data.randomcars.count && data.recommendedTypecode != charger_subgroup[features._name].typeCode,active: data.selectedcharger.id === charger_subgroup[features._name].id }\"></div>\n. I poked around at this a little more and there are a lot of weird edge cases I'm concerned about messing up, like collapsing whitespace within quoted strings or any other weirdness people decide to put inside their attributes.\nI think I'd rather see an API where the end-user provides both the attribute-selection and value-collapsing regular expressions.\njavascript\ncustomAttrCollapse: [ /ng\\-class/, /\\r+|\\n+|\\s{2,}/g ]\n. Ping @kangax\n. Updated with manual object copy in lieu of Object.create.\nAdded documentation of behavior to README.\n. This may warrant a MAJOR change.\n. I haven't tried this out as I don't have a Windows rig handy.\nI'm all-for cross-platform path handling, though I haven't really had to deal with it much myself.\n@XhmikosR \nI see you've changed some lines to look like this:\njavascript\npath.join('benchmarks/generated/', fileName) + '.html.gz';\nIs it somehow safe to use / within those sequences, but not to simply concatenate the path strings?\n. The benchmarks run fine for me on OSX.\n\n. Yeah, before running the benchmarks I reset my benchmark2 branch to f0dcf0f37cc148eedea9765ce616bb3217e43ddc\nI have no strong feelings about the benchmark reporter. It's not integrated into the build in any way; we're not using it to prevent performance regressions. It just seems like a nice-to-have, and makes for a good demo of what is achievable with the tool.\nI know chalk is widely-used. I'm not as familiar with cli-tables, and simply hacked in the gzip reporting without looking deeply into the tool.\n. @XhmikosR releateurl is Steven's own project. https://github.com/stevenvachon/relateurl\nIt looks like it's generated by browserify.\nhttps://github.com/stevenvachon/relateurl/blob/master/package.json#L35\n. @honzahommer Please refer the configuration example in the grunt-contrib-htmlmin readme. files is not a top-level option. You can always run grunt using the --verbose flag to see exactly which files are being targeted by a given task. Hopefully that output helps you zero-in the issue.\n. Yes, it sounds like the minifier should only attempt to forward script contents to uglify when the type attribute is unspecified, or text/javascript. Otherwise it should be treated as opaque.\n. @efkan Internally, html-minifier relies on uglifyjs, a very widely-used js-minifier. If you're sending pure javascript, you'll have to use uglify directly to minify that code. If you're serving templates that include inline javascript, you can use html-minifier's minifyJS option to minify that inline code the same way.\n. I actually preferred the original sorting where the entries were manually sorted by initial corpus size, but again, I have no strong feelings about this.\n. This seems like something you'd use a general post-processor for, rather than adding this feature to html-minifier.\nAfter you minify with html-minifier, you can reprocess the output, either with another full-fledged html parser, or with something as simple as sed.\n. When I try out that markup in the demo minifier http://kangax.github.io/html-minifier/, and minify using the default options, I get this output.\nhtml\n<% if (true) {%><% } else { %><%}%><% var a = require('abc'); %><%==obj.name%><div class=\"class <%==obj.emptyClass%>\">div</div>\ncustomAttrAssign, customAttrSurround, and customAttrCollapse are used to extend the html lexer so that it recognizes certain non-valid markup, as used in a number of contemporary web frameworks.\nEach of the options has tests exercising their usage in the test suite, and include examples like these.\ncustomAttrAssign is an array of RegExps, each of which is used to recognize custom markup for the assignation of a value to an html attribute.\nhtml\n<div flex?=\"{{mode != cover}}\"></div>\ncustomAttrSurround is an array of RegExp pairs, each of which is used to recognize custom markup surrounding html attributes.\nhtml\n<input {{#if value}}checked=\"checked\"{{/if}}>\n<input {{#if value1}}data-attr=\"example\"{{/if}} {{#unless value2}}checked=\"checked\"{{/unless}}>\ncustomAttrCollapse is an array of RegExps, each of which is used to recognize an attribute name, and to strip newlines from matching attribute's values.\nhtml\n<div class=\"fragment square\" ng-hide=\"square1.hide\" ng-class=\"{\n  'bounceInDown': !square1.hide,\n  'bounceOutDown': square1.hide\n}\"></div>\n. A lexer, or tokenizer, converts a string, such as an html document, into a collection of discrete, meaningful tokens, or nodes.\nFor example, a string might look like this '<html></html>', and its representation as tokens might look like this. [{ type: 'tag open', value: 'html' }, { type: 'tag close', value: 'html' }]\nAs the program progresses along, consuming the input string, it produces a set of tokens like this. These tokens are then traversed, eliminated, and otherwise massaged, and finally they are used to reconstitute a modified html string.\nFor the examples I showed above, the lexer cannot ordinarily recognize that kind of input. It isn't valid HTML. In order to do something useful with that input the lexer is extended to recognize the parts of the input string and to generate new, or extended token types representing the markup.\nLikewise, the serializer which reconstitutes the markup is extended to recognize the new tokens, and to produce appropriate markup representing them.\n. The Travis CI failure looks spurious, but this functionality still needs to be accompanied by a test case.\nWould you kindly add a simple test case exercising this functionality to make sure we don't regress on it in the future?\n. Yeah, customAttrSurround is pretty simple and explicit in what it does. I'd suggest performing this text || \"text\" transformation prior to passing the data to the template, or moving the control structure outside of the tag so the minifier sees it as text.\n. Right, the first form isn't valid html, while the second is.\nThere's actually a customAttrSurround option to support intra-tag wrapped attributes of the form you're using.\n. @davideanderson This looks expected. <dt> and <dd> are only closed optionally.\nhttp://www.w3.org/TR/html5/syntax.html#optional-tags\n. @davideanderson Thanks for the explanation. According to the html spec, this is definitely not an appropriate collapse.\n. This is broken HTML. You can see one of the style tags is unclosed. html-minifier doesn't do well with simply broken markup.\n. customAttrSurround is used for markup surrounding attribute name-value pairs. In this case, the custom markup is entirely within the attribute value.\nYour issue can be mitigated by using single-quotes rather than double-quotes for the \"images/logo.png\" portion of the attribute value.\nEssentially, the parser is seeing this as a malformed chunk of markup, like <img src=\"{% static \" without a closing bracket.\n. Sorry, build-system issues are a little out of my purview. You can probably programmatically generate that config to pair destination files with source files.\n. You need whitespace between the <p and {%.\n. Duplicate of #332 \n. This is a duplicate of #332 \nThe root cause is the html parser being powered by regular expressions which behave well when faced with valid input, but fall victim to catastrophic backtracking when faced with invalid input.\nhttp://www.regular-expressions.info/catastrophic.html\n. Ooh, I like that.\n. Rather than run the typeof check at the entry to this function, I think it would be better to just do something like:\njavascript\nreturn __RelateUrl.relate(text, options || {});\n. Why the try/catch?\n. I considered not passing in the index and simply comparing attr to attrs[attrs.length - 1], but this felt a little clearer.\n. In this PR, we retain quotes around the ultimate attribute for any element, regardless of the attribute's name.\nFor example, if we have an element like this.\n<img data-foo=\"bar\" />\nIt would be inappropriate to minify it thus\n<img data-foo=bar/>\nIn this case, the data attribute value would come back as \"bar/\".\nSo it's not about quoting based on any specific attribute name, but instead based on attribute position.\nAlternatively, we could just emit an extra space before the closing unary slash for elements with attributes\n<img/>\n<img data-foo=bar />\nNot sure why I didn't think of that before :)\n. Right. This just make the functionality the same as if the parser had encountered <div class=\"\"></div>, and also fixes a crashing error when the parser encountered a valueless style attribute such as <div style></div>.\n. Do you mind moving this comparison up to the preceding else-if clause?\njavascript\nelse if (attrValue && options.customAttrCollapse && options.customAttrCollapse.test(attrName)) {\n. This regexp seems overly-complicated. Can it be replaced like so?\njavascript\nvar matches = text.match(/^\\*\\{([\\s\\S]*)\\}$/m);\n\nThis uses fewer capture groups, and accepts all characters.\n. Perhaps text.match(/;$/)?\n. ",
    "hsablonniere": "We need to group most used attributes of each elements together. Can it be computed, maybe...\n. ",
    "sparanoid": "+1 for trim whitespace to 1 character.\n. +1 for CSS minify, one of my projects uses some dynamic style so I have to code <style> in HTML templates.\n. Wow, @sndrs we are talking about the same thing at the same time: #68 \n. Just fyi I found a list of HTML element maintained by Mozilla:\nhttps://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/HTML5_element_list#Text-level_semantics\nI think all text-level semantics shouldn't be collapsed, But I don't know if there's any side effect I haven't test them yet.\n. Dup: #67 \n. hi @alexlamsl sorry it's my mistake, the actual option is Conservative collapse, when this option is enabled, you can reproduce the above issue.. @adamchal yeah after enabling conservativeCollapse it is working, but I think the additional space before <!doctype should be removed, it is not represented as anything (ie text node) in document tree.. ",
    "stevenvachon": "If this library does not already convert multiple blank lines and spaces within <body> to a single space, then this is a very important one. Because the browser renders\nhtml\n<strong>asdf</strong>asdf\ndifferently than\nhtml\n<strong>asdf</strong> asdf\n. HTML is more picky than that, though. For example, multiple spaces within <pre> are rendered, while those in any other tag are not. Special cases would be necessary.\n. Very cool :)\n. If that were all in a single document, it should produce:\nhtml\n<b>foo</b> <b> foo</b> <b>foo</b>bar <b>foo</b> bar <b> </b>\nWhitespace within <pre> should be preserved.\n. @kangax that could present a problem in situations such as:\nhtml\n<b>foo</b><b>\nbar</b>\nhtml\n<b>foo</b>\n<b>bar</b>\nwhich should produce:\nhtml\n<b>foo</b><b> bar</b>\nhtml\n<b>foo</b> <b>bar</b>\nbut instead produce:\nhtml\n<b>foo</b><b>bar</b>\nwhich renders as:\nfoobar\ninstead of:\nfoo bar\n. Thanks!\n. How about creating an option for custom comments to ignore? There are many libraries out there..\n. Yep, in an object/array-like syntax:\njs\nignoreCustomComments: [\n    {\n        before: /<!--\\s+ko[^\"-->\"]+-->/,\n        after: /<!--\\s+\\/ko\\s+-->/\n    }\n]\nor with <!-- and --> concatenated in later:\njs\nignoreCustomComments: [\n    {\n        before: /\\s+ko[^\"-->\"]+/,\n        after: /\\s+\\/ko\\s+/\n    }\n]\n. I finished the library. It's not 100%, but the only thing remaining are ridiculously invalid URLs (such as ://website.com:abc/). I see that you've marked this as a possible feature; might I ask why it's only \"possible\"? I can help implement it if I know what you are for and against.\n. It saves about the same as removing white space, I've found through my old PHP-based HTML minifier. There are quite a few URLs in an HTML document that you may not have thought of, such as those found in <form>,<img>,<script>,<style> tags.\nIt's safe. I've thoroughly tested it. Just like with minifying HTML, if the input is correct (or mostly correct), the output will be correct.\nRegarding client-side support, ~~URL shortening could always be reserved for only server-side. Also, I could switch from Node's url.parse to this to bring support to the client.~~ browserify works nicely.\n. Interesting. Fortunately, root-relative URLs aren't vulnerable, with which we could assume that scheme-relative URLs are also safe. Anyone concerned with this could set the output type to root-relative. Moving forward, I hope that IE12 corrects this.\nAdditionally, RelateUrl doesn't just convert from absolute to path-relative; it also removes unnecessary parts of the URL. All customizable.\n. ~~I'd probably use cheerio to traverse tags. I'm not sure how integrated that would be with your code. Just make it a separate component? And there's also the subject of client-side support.~~\n. Cool. I'll try to get to it in the coming weeks. ~~It may also be best to wait for a few new features before starting.~~\n. Would you prefer the option and function to be minifyURLs or minifyURIs? Technically, only URLs are minified while URIs are ignored.\n. https://github.com/fb55/htmlparser2/\n. Perhaps we should consider renaming this to \"switch to parse5\": https://www.npmjs.com/package/parse5\n. This is more important than you may think. HTML emails are often delivered by designers with invalid/incorrect source code and would be auto-corrected (as a browser would) with parse5. I realize that switching to this will likely cause issues for minification of handlebars/mustache and downlevel-revealed IE comments, but that shouldn't be a priority in my opinion because:\n- IE9 is not the future\n- It's no longer a good practice to include handlebars/mustache strings in production assets and we don't need to minify our dev templates\nYou could use my handlebars-html-parser in the near future (as I'll be finishing it soon) if such is important to you.\nUsing parse5 would also denecessitate the removeRedundantAttributes option.\nhtml-uglify could catch up and you're toast.\n. ~~html-uglify is using cheerio, so they can add features very quickly and with less effort, despite less performance due to excessive searching. It's also quite actively maintained.~~ See htmlnano.\nparse5 parses HTML like a browser (100% compliance), so it corrects many errors which can cause errors elsewhere (such as CSS selectors).\n. It's forgiving, but it's not compliant. high5 is htmlparser2's complaint upgrade, but it will remove much if not all of the forgiving features, from what was mentioned here.\n. As I said regarding parse5, its compliance corrects invalid HTML, which is very useful to emails which are so funky to put together.\n. Why not use both, then? Use parse5 to correct the structure and rely on its location info to compare with htmlparser. This will allow for parsing things like downlevel-revealed IE comments [despite using parse5].\n. Not a performance gain, correct HTML parsing.\nhtml\n<table><a>asdf</a><tr><td></td></tr></table>\nhtml\nasdf<p>asdfadsf<p><div>asdf</div>\nhtml\n<body class=\"class1\">\n<body class=\"class2\">\n. in the first example, the <a> should've moved to outside the <table>.\nthe second example should've closed the last <p> before the <div>, instead of encapsulating it.\nthe third example should've merged the two <body> elements.\nI think that you're not up to speed on spec-compliant HTML parsing.\n. No, parse5 parses HTML exactly as the browser does. Any hacked specs should be done around a spec compliant parser to ensure that everything else is corrected.\n. ~~It would not get merged because they are within downlevel-hidden conditional IE comments.~~\nOh, yes, the bubbling. A special conditional comment parser would need to be written to handle many of these cases. I had mentioned something to this effect earlier by comparing with parse5's location info.\n. I've listed 3 examples above.\nAlso listed above, parse5 automatically performs removeRedundantAttributes, just as a browser does. There're more cases, but I don't have them all memorized.\n. My second example (<p> one) gives different rendered results due to the use of a non-spec-compliant parser.\n. I doubt that we'll have new hacks. We have a standard that we follow and IE conditional comments are not supported in IE10+. Anything added to the spec will be added to parse5.\n. That's because you have removeOptionalTags=true, which is not a default setting in the provided package.\n. You're referring to CSS/JS hacks. What does that have to do with an HTML parser?\n. It affects css selectors. body > div would no longer work because the structure has been changed to body > p > div. It's incorrect.\n. It's up to you if you want your library to be accurate and complete.\n. This is a bug. This minifier will produce output that will render differently than its input because it affects CSS selectors. It will also affect document.querySelector()/.querySelectorAll().\nYou don't sound very interested in fixing it, so I'll just close it and move on to htmlnano which, through posthtml,  has plans to switch to parse5.\n. @kangax removal of attributes is optional.. changing rendered html structure currently is not, but it is doing it.\n. I never said that anything had to break permanently. Sure, things may break before a release, but how is that different than any other refactor?\n. Additionally, --conservative-collapse should remove whitespace within <head>.\n. Awesome, thanks! Excited for the next (0.6.7) release!\n. I cannot reproduce that here. Mac, Linux and Windows all pass.\n. The contents of IE conditional comments should probably be parsed as HTML (by htmlparser).\n. Right. Sorry for not noticing that.\n. Thanks for merging.\n. Agreed. For now, I have quickly covered HTML and SVG event attributes: stevenvachon/event-attributes\nThere're some IE-specific events that could be added, though.\n. This happens with minifycss:true and style=\"font-family: &quot;fontname&quot;\" as well\n. style attributes containing &quot; still don't work.\n. +1\n. Please publish.\n. Thanks!\n. Closing because this is already being done with htmlnano.\n. Perhaps postcss's powerful parser can handle it, and accurately. If so, we could switch from cleancss to cssnano.\n. The issue is present with preserveLineBreaks=false and conservativeCollapse=true.\n. Yeah, I hadn't noticed that and had to recheck my findings. Unfortunately, they remained.\n. I'm pretty sure that link doesn't exist for practical reasons.\n. Per the HTML specification, the first instance of <base> overrides the page's URL.\nPage URL: http://host/page.html\n<base> URL: /path/page2.html\nResolved URL: http://host/path/page2.html\nAny relative URL on the page will be relative to the resolved URL.. Was this fixed, or is it being ignored?. I mostly copied minifyJS to avoid things beyond my scope.\nRelateUrl.relate(text, options || {}); won't work because options.site is required, otherwise text would have nothing to relate itself to.\n. If the URL is invalid for any reason, it will throw an error.\n. ",
    "mattaningram": "It doesn't make any sense that I can't stop htmlmin from collapsing whitespace inside of text elements. This was a standard feature on a non-grunt html minifier from 4 years ago.\nAt least give us the ability to collapse to a single white space, because if I want spans in a header element htmlmin screws me over every time. Either I use nbsp; and the header doesn't wrap, or I use normal white space, and it renders wrong when I use htmlmin.\nPlease add this feature, I can't find any alternative that is clean.\n. ",
    "ghost": "+1. The behavior should be \"collapse to one space\" instead of completely removing spaces. Here is a real-world example using Bootstrap:\nMy local development, no minification:\n\nProduction env, after minification:\n\nSince there's no space left between elements (checkbox and text, button and button), the margin is gone, leaving an ugly look. Setting collapseWhitespace to false avoids the problem, but clearly is not a fix.\n. @kangax Here you go:\n``` html\n  \n\n\n      This entry is private (visible to only me)\n    \n\n\n\nCancel\n\n``\n. Awesome, thanks. Does this fix apply for the \"two buttons\" problem too?\n. In the case of CSS, this is 100% safe, and afaik, JavaScript is also safe, but under the assumptions that there aren't any errors that are caused by a definition in a later",
    "webnard": "Thanks, @kangax!\n. ",
    "willfarrell": "Is this related to https://github.com/kangax/html-minifier/pull/38?\n. Sorry, commented too soon. Does anyone even use these?\nhttp://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n. Looks good.\nReference W3C.\n. Seeing how this repo is used by grunt-contrib-htmlmin which is used by every developer I know ... yeah.\n. I just had a thought to combine the regex, turns out doing so would be a lot slower (at least in this case). Something for everyone to keep in mind.\nhttp://jsperf.com/html-minifier-regex\n. Awesome. You should push an update to https://github.com/gruntjs/grunt-contrib-htmlmin/blob/master/package.json when npm makes the new version live. The commit will have more weight coming from you then myself.\n. Just noticed that it doesn't minify IE conditional statements ... I'll save it for another day.\n. ... uuuhh, is there a button for that? I just reforked and copied the changed over. See new pull request.\n. ",
    "dben": "Yes, they are pretty frequently used to shim old versions of ie so they work correctly with html5 features/ JSON support\n. ",
    "cloudgifts": "Is there a solution here?\n. My exact code is here with a very simple HTML example below, as you can see the JS comments and white-space are left untouched, ideally this HTML file would all be one line without any comments.  For the JS, the only thing I would like is comment and white-space removal (nothing fancy):\nvar fs = require('fs');\nvar minify = require('html-minifier').minify;\nvar minifyOptions = {\n    'removeComments' : true,\n    'collapseWhitespace' : true,\n    'keepClosingSlash' : true,\n    'caseSensitive' : true,\n    'minifyJS' : true\n};\nvar fileData = fs.readFileSync(__dirname + '/../../test/bp.html', {'encoding' : 'utf8'});\nvar updatedFileData = minify(fileData, minifyOptions);\nfs.writeFileSync(__dirname + '/../../test/bp-min.html', updatedFileData, {'encoding' : 'utf8'});\nInput HTML file:\n<!doctype html>\n<html>\n    <head>\n        <script>\n            // Some JS code\n            var test1 = 1;\n            var test2 = 2;\n            // The sum\n            var test3 = test1 + test2;\n            console.log(test3);\n        </script>\n    </head>\n    <body>\n    </body>\n</html>\nOutput HTML file:\n<!doctype html><html><head><script>// Some JS code\n            var test1 = 1;\n            var test2 = 2;\n            // The sum\n            var test3 = test1 + test2;\n            console.log(test3);</script></head><body></body></html>\n. ",
    "kdex": "Turns out pre-rendering a Vue app creates lots of markup in the fashion of <div v-12345678=\"\">, wasting an extra three bytes per element. Doesn't look like removeEmptyAttributes covers this yet. I have around 250 of those per document.\nIs there any chance we could get this issue re-opened?. Yeah, I'm sure. I've tested enabling all three of them simultaneously before commenting. Test case:\n<div v-12345678=\"\"></div>\nwhich stays the same.. ",
    "DamonHD": "Sure that some combination of:\n```\n          --remove-attribute-quotes \n          --remove-redundant-attributes\n          --remove-empty-attributes\n```\ndoesn't do what you want already?\nFWIW, my script to drive html-minifier is at:\nhttp://earth.org.uk/script/html5-minify.sh\n\nRgds\nDamon. A possibly related suggestion...\nWhen the same async script is included in the document multiple times, such as for simple inclusion of Google AdSense code, it is in that case, and possibly in general OK, to omit the second and subsequent attempts to load the script, eg in:\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-XXX\"\ndata-ad-slot=\"YYYY\"\ndata-ad-format=\"auto\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n....\n....\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-XXX\"\ndata-ad-slot=\"YYYY\"\ndata-ad-format=\"auto\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n....\n\nit saves page weight and possibly some redundant Shift-RELOAD activity in my observation to omit the second:\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n\nRgds\nDamon. FWIW I can confirm that in my use case, for minified static (GZIPPed) HTML pages, using \"doctype\" lowercase does save bytes in the compressed/transferred result.  If I wanted XHTML output then all sorts of other optimisations would have to go away too, such as dropping optional closing tags and element* quoting.\n[Edit: * I meant attribute value, sorry!]. Sometimes I care about optimising the uncompressed size, though I agree that most of the time the size after gzip/zopfli is what matters.\nRgds\nDamon. Thank you.\nCan that function look over the entire document?\nYes, I understand that there are various clear limitations, but for simple cases possibly with some whitelisting of difficult cases, there is likely to be value.  I can see scope to rip another 1% or more out of even my already tight CSS this way, safely.. My JS skills may well not be up to such a thing!\nFor reference, I have done the purifycss thing today as a test, and even though it's failing to remove everything that it could, it is removing over 1% of the entire document weight, and all in the critical initial first-paint rendering path.\nhttp://www.earth.org.uk/note-on-site-technicals-4.html#purifycss. From the command-line?  Eg:\n--minify-css \"O2\"\n\nseems to have no effect and gives no error.. The W3C validator does not like <ul></ul> inside <p> ... </p> and it is regarded as incorrect, so should likely behave as @weixu365 expects, IMHO.\nRgds\nDamon. I don't believe the syntax that you have used is valid HTML (The -- is a rather special sequence).  The W3C tool agrees with me, it seems:\nPremature end of comment. Use --> to end a comment properly.\n. SVG in HTML5 is not vanilla XML as I understand it.  See for example:\nhttp://www.earth.org.uk/note-on-site-technicals-11.html\nand:\nhttp://m.earth.org.uk/note-on-site-technicals-11.html\nwhere attributes without quotes for the embedded SVG work fine in all browsers that I can find, and seem to be 'standard' (I can't at this moment find my reference).\nRgds\nDamon. If you can run a script, as you can from Java, then you can run this tool, though you may be able to avoid the shell and run NPM JavaScript more directly from the JVM.\nHere's the script I use to drive this tool from my makefile (in the directory) above, in case it helps:\nhttp://www.earth.org.uk/script/html5-minify.sh\nRgds\nDamon. I also am seeing this and have had to remove @latest and install @3.5.19.\n(Host RPi3 / Raspbian based on stretch.). I counter-suggest that plenty of well-understood applications designed to work in a pipeline behave exactly like that and for good reason, all the way up from the humble cat, sed, awk, grep, etc...  And this is in many ways a glorified filter too.\nRgds\nDamon. It's fairly well understood that if a (filter) command is silent with no args then you try it with -help or --help.  Else every single time you use it as a filter you need to add arguments and clutter to suppress that (unwanted) output.\nFor non-filter-pipeline commands your case is stronger.\nRgds\nDamon. Also use:\n --collapse-boolean-attributes\n\nRgds\nDamon. Nominally, ie according to spec, head and body and so on are optional.  Absence of head confuses Bing's parser but absence of body is fine.  AMP requires head and body despite being a product of Google which otherwise recommends omitting head and body.\n(Take any set of matching www. m. and amp. pages on my earth.org.uk site to see the handling of those tags for that case.  I only apply this minifier to the m. pages as a result.)\nSo, there is some inconsistency, but the HTML5 spec details that they are indeed optional, and how to infer where they would be to manage without them.\nRgds\nDamon. It wasn't at all obvious to me how to supply (non-default / any) arguments, so I have have never used any with the switches so far, so maybe let this stand to give an extra clue to slow people such as me?. ",
    "mhulse": "63 (Parse error with <?php ?>) seems related.\nAn ignore options object, or similar, could be useful to the end user.\nIf you're busy, I could help you tackle this ...  It seems like ignoring would be the way to go.\nAny thought on where you'd want to implement \"ignore\" functionality? \n. Awesome! I'll look into this and get back to you. Thanks for the feedback. :+1: \n. So, here's where I'm at.\nIt's a work in progress, but here's the code:\nhttps://github.com/mhulse/html-minifier/tree/patch-3/src\nMost of the work is done here:\nhttps://github.com/mhulse/html-minifier/blob/patch-3/src/htmlparser.js#L82-L90\nTest input:\nhtml\nThis is the start. <% ... %>\n<%= ... %>\n<? ... ?>\n<!-- This is the middle, and a comment. -->\nNo comment, but middle.\n<?= ... ?>\n<?php ... ?>\n<?xml ... ?>\nHello, this is the end!\nOutput:\nhtml\nThis is the start.<% ... %><%= ... %><? ... ?>No comment, but middle.<?= ... ?><?php ... ?><?xml ... ?>Hello, this is the end!\nIt's working, but notice the lack of whitespace?\nCheck it out when I remove the \"ignored\" tags:\nhtml\nThis is the start.No comment, but middle.Hello, this is the end!\nNot optimal.\nBecause I patterned this patch after the code that handles HTML comments, I ran this test:\nhtml\n<!-- xxxx -->\nddd     \n<!-- yyy -->\nxxx\nOutput (without removing comments):\nhtml\n<!-- xxxx -->ddd<!-- yyy -->xxx\nWith comments removed:\nhtml\ndddxxx\nSame whitesapce problem.\nQuestion(s):\nFirst and foremost, how should we handle whitespace around \"ignored\" tags?\nSecondly, Is there a better way to handle whitespace for when it comes to comments and \"ignored\" tags?\nThe problem is, the previous/next tags need to be sent to the collapseWhitespaceSmart() method, but htmlparser.js doesn't do that until a bit further down in the code (after the section that checks for comments, and now my code to check for \"ignored\" tags).\nIt's getting late, so I can't think of a good solution right now, but my gut is telling me that if we want to fix this, there's will have to be a refactoring of the htmlparser.js (maybe make it less procedural in that particular section?).\nOn the other hand, I'm still wrapping my head around all of the code, so maybe there's an easy answer? Something that I'm overlooking?\nWith that said, I'm pretty sure comments behaved like above before I ever touched the code ... that tells me someone else ran into this situation and decided not to worry how whitespace collapses around comments; if that's the case, should I not be worried about how whitespace collapses around the \"ignored\" tags too?\nAm I making any sense here?\nI need to catch some zzzzzzs and come back to this code with a fresh start tomorrow. :)\n. @kangax Ahhh, thanks for the example! :+1: \nI was personally working with PHP in mind (which would require the same type of logic, different tags of course, as you posted above), so it's good for me to see an example using tags other than PHP. \nBased on my current work, here's a real world example taken from a WordPress template:\n``` html\n\n<article>\n\n    <div>\n\n        <div>\n\n            <?php if (get_the_post_thumbnail()): ?>\n\n                <a href=\"<?=the_permalink()?>\">\n\n                    <?=the_post_thumbnail('thumbnail', array('class' => 'imgr'))?>\n\n                </a>\n\n            <?php endif; ?>\n\n            <header>\n\n                <p><time datetime=\"<?=get_iso_8601()?>\"><?=the_time('g:i')?> <?=the_time('a')?></time></p>\n\n                <hgroup>\n\n                    <?php\n\n                        $category = get_the_category();\n                        $category_name = $category[0]->cat_name;\n\n                    ?>\n\n                    <?php if (strtoupper($category_name) !== 'UNCATEGORIZED'): ?>\n\n                        <h2><?=$category_name?></h2>\n\n                    <?php endif; ?>\n\n                    <h1><a href=\"<?=the_permalink()?>\"><?=the_title()?></a></h1>\n\n                </hgroup>\n\n            </header>\n\n            <p><?=the_excerpt()?><?=edit_post_link('edit', ' [', ']')?></p>\n\n        </div>\n\n    </div>\n\n</article>\n\n\n```\n... gets converted to:\n``` html\n<?php if (get_the_post_thumbnail()): ?> <?php endif; ?><?php\n                        $category = get_the_category();\n                        $category_name = $category[0]->cat_name;\n\n                    ?><?php if (strtoupper($category_name) !== 'UNCATEGORIZED'): ?><h2><?=$category_name?></h2><?php endif; ?><h1><a href=\"<?=the_permalink()?>\"><?=the_title()?></a></h1></hgroup></header><p><?=the_excerpt()?><?=edit_post_link('edit', ' [', ']')?></p></div></div></article></div>\n\n```\nQuestion #1:\nDoes the above minification look good to you?\nQuestion #2:\nI guess when I expressed concerns with whitespace, I was thinking of situations like:\nhtml\n<p><time datetime=\"<?=get_iso_8601()?>\"><?=the_time('g:i')?> <?=the_time('a')?></time></p>\n... which gets minified to:\nhtml\n<p><time datetime=\"<?=get_iso_8601()?>\"><?=the_time('g:i')?><?=the_time('a')?></time></p>\nNotice that the whitepsace between the_time() calls gets removed.\nI wonder the best way to handle such a situation? Is this something I should be concerned about?\n\nNo worries on the late reply! This is the type of thing that we don't need to rush, so don't hesitate to take your time on helping me out. :octocat: \nSpeaking of help, thanks for taking the time to give me some guidance, I really appreciate it. :smile:\n\nOne last thing, I noticed that there's another fork of this code that handles PHP tags:\nhttps://github.com/nancoder/html-minifier/commit/af096e033382322849bb1400682255db0a740c0c\nI've only had a chance to quickly look at his code, but I was happy to see that we pretty much headed down the same paths in terms of where we put our logic.\nWith that said, I had plans to download that fork and compare his code to mine ... I think our code is pretty similar (only, his focus was just PHP), but just in case he thought of something I missed, I figured it'd be worth the time to compare.\n. Just tested your example code on my fork, and this:\n<% if foo? %>\n  <div class=\"bar\">\n    ...\n  </div>\n<% end %>\n... gets converted to:\n<% if foo? %><div class=bar>...</div><% end %>\nLooks like we're close to having a patch.\nI'll be sure to add this example code as a pass/fail test.\n. @kangax Sounds awesome. I'll be doing a PR tonight for your review.\nThanks much!\n. @iameli Thanks for posting an example. Interesting. I can see how that could get tricky.\n@kangax Lately, I've been using SASS to compress my CSS output ... The last time I used something other than SCSS was grunt-contrib-cssmin which hooks into clean-css:\n\nWhat is clean-css?\nClean-css is a fast and efficient Node.js library for minifying CSS files.\nAccording to tests it is one of the best available.\n. FYI, I'm trying to fix this. I have a discussion going in issue #10 if anyone want's to provide feedback.\n. I'd love to see this option too. Maybe something like in CSS comments:\n\ncss\n/*!\n * This is a comment that's untouched by the minification process.\n */\nSingle line:\ncss\n /*! This is a comment that's untouched by the minification process. */\nFor html comments, maybe something like:\nhtml\n<!--! This is a comment that's untouched by the minification process. -->\n... or something like that. :+1:\nMy goal would be to include a banner at the top of my <head> ... I'd like to minify everything else and keep the banner. :smile:\n. @kangax Good question!\nI think it would be really awesome to put \"banner\" comments into my compressed HTML.\nIn my particular case, I'm wanting to go l33t using something like grunt-asciify and do something like:\nhtml\n<!DOCTYPE html>\n<!--!\n  ______            _                 _                   \n |  ____|          | |               | |                  \n | |__ ___   ___   | |__   __ _ ____ | |__   __ _ _ __    \n |  __/ _ \\ / _ \\  | '_ \\ / _` |_  / | '_ \\ / _` | '__|   \n | | | (_) | (_) | | |_) | (_| |/ /  | |_) | (_| | |      \n |_|  \\___/ \\___/ _|_.__/ \\__,_/___| |_.__/ \\__,_|_|      \n      /_ | / _ \\ / _ \\                                    \n __   _| || | | | | | |                                   \n \\ \\ / / || | | | | | |                                   \n  \\ V /| || |_| | |_| |   __ ___      ___   ___  __ ____  \n   \\_/\\|_(_)___(_)___/   /_ |__ \\    |__ \\ / _ \\/_ |___ \\ \n    /  \\  _   _  __ _     | |  ) |      ) | | | || | __) |\n   / /\\ \\| | | |/ _` |    | | / /      / /| | | || ||__ < \n  / ____ \\ |_| | (_| |_   | |/ /_ _   / /_| |_| || |___) |\n /_/    \\_\\__,_|\\__, (_)  |_|____( ) |____|\\___/ |_|____/ \n                 __/ |           |/                       \n                |___/                                     \n-->\n<html><head><meta charset=\"utf-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"> .... </body></html>\nI'm sure there are better reasons to have this feature, the above is just my personal use case.\nA more real world example might be:\nhtml\n<!DOCTYPE html><!--! Foo bar baz. vX.X.X | Apache License, Version 2.0 | https://github.com/billyjohnson/foo --><html><head><meta charset=\"utf-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"> .... </body></html>\nI suppose one could use grunt-contrib-concat to append a banner to the very top of the HTML file (above the doctype), but I remember that older IEs get thrown into quirks mode if there's anything above a DTD. Here's a possible authoritative note about quirksmode behavior:\n\nMake sure you put the DOCTYPE right at the beginning of your HTML document. Anything before the DOCTYPE, like a comment or an XML declaration will trigger quirks mode in Internet Explorer 9 and older.\nIn HTML5, the only purpose of the DOCTYPE is to activate full standards mode. Older versions of the HTML standard gave additional meaning to the DOCTYPE, but no browser has ever used the DOCTYPE for anything other than switching between quirks mode and standards mode.\n\n... Interesting stuff.\nSo, that's why the Grunt concat task might not be the best option as one would need to insert the comment after the DTD if they wanted to avoid quirksmode in older IEs (that is, if you consider IE9 old, hehe).\nAgain, I'm sure other folks have other (better?) reasons to preserve comments (and whitespace within those comments).\n. I forgot to mention ... Just to clarify, in other build tools, the \"!\" point is the flag used to tell the uglifier/minifier to not strip said comment. Like:\ncss\n/*!\n * Description.\n *\n * @blah DocBlock style comments.\n */\n... or:\njs\n/*! Foo bar baz. vX.X.X | Apache License, Version 2.0 | https://github.com/billyjohnson/foo */\n... that's why I recommended doing something like:\nhtml\n<!--! ... -->\nThough, maybe there's a better way to flag HTML comments?\nHmm, I wonder if you could just do a replacement on the comment for the output version? Like, for example, this:\nhtml\n<!--! ... (comment with optional whitespace/newlines) -->\n... would get converted to this:\nhtml\n<!-- ... (preserved whitespace/newlines) ... -->\n... in the final minified version?\n. > I don't have time for this (and really don't know when I will have it) so if anyone is willing contribute, I'd happily pull this in.\nI'd be willing to do a PR. I'd need to wrap my head around your code in order to get a feel for how things work, but once that happens, I'd give it my best shot.\nOff the top of your head, do you have any tips on which files I'd need to modify and what methods I should focus on? I only ask, as it might speed up the time it takes to learn how your code works. :+1: \nAlso, does it make sense to look for <!--! ... --> and then converting it to <!-- ... --> for the final compressed version; or, is there a better way of flagging HTML comments that we haven't thought of in this thread?\n. @zcorpan \n\nRemoving the ! means that minifying again would drop the comment, which seems like a bad idea.\n\nGood call. Appreciate the clarification. :+1: \n\nIt seems to me this would be implemented by inserting an else if here https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js#L402\n\nThanks for tip! I'll try to send a PR this weekend! :smile: \n. Pull request has been submitted.\nI've added a few commit comments:\nhttps://github.com/mhulse/html-minifier/commit/b1580b2763fd5b72e42e3212257a1201d7239c81\nQuestions:\n\nIs there anything I need to edit in the master branch?\nI wasn't sure how to run the v8 test. I don't have v8 installed (though, I do have node.js installed). Can I homebrew install v8? I wasn't able to get the v8 JS test script to run using node command line. Anyway, Let me know if you want me to get that setup and tested before you pull (I should say, if you decide to pull) this PR into your gh-pages branch.\nIs there anything I'm missing in terms of files to updated? I just manually copied JS from htmlminifier.js into all.js. I assume that's the normal workflow? :smile:\n\nAnyway, the patch was pretty simple. Though, I have to admit, I have not done a ton of testing.\nThe test suite page passed all tests.\nThoughts?\n. > Wait, why do you need v8? All the tests are running through node (just npm test after you built distribution)\nAh! It's funny, I tried several ways of testing, but not npm test.\nJust tested:\n``` bash\n$ npm install\n...\n$ npm test\n\nhtml-minifier@0.5.3 test /Volumes/.../html-minifier\njshint src/htmlminifier.js src/htmllint.js && cat src/htmlparser.js src/htmlminifier.js src/htmllint.js > dist/all.js && node test.js\n\nTesting /Volumes/storage/Users/mhulse/github/html-minifier/src/htmlminifier.js ... done\nSummary:\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 File                                               \u2503 Failed   \u2503 Passed   \u2503 Total    \u2503 Runtime  \u2503\n\u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\n\u2503 ...mhulse/github/html-minifier/src/htmlminifier.js \u2503 0        \u2503 334      \u2503 334      \u2503 77       \u2503\n\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\nGlobal summary:\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Files      \u2503 Tests      \u2503 Assertions \u2503 Failed     \u2503 Passed     \u2503 Runtime    \u2503\n\u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\n\u2503 1          \u2503 42         \u2503 334        \u2503 0          \u2503 334        \u2503 77         \u2503\n\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\n```\nZero failures. :+1: \n\nall.js is just a concat of 3 files (parser, minifier, lint). I added instructions to README, for future!\n\nAwesome! Great tip on the file concat too. I just manually copied/pasted, but > cat src/htmlparser.js src/htmlminifier.js src/htmllint.js > dist/all.js is so much easier (one of those \"why didn't I think of that!\" moments). :laughing: \nLet me know if there's anything else I can do to help test.\nFYI: If/when you pull this request in, I was planning on trying to patch #77. :octocat: \nThanks @kangax!\n. > Cool. So I'll close pull request once you add unit tests for this new behavior, as I mentioned here\nAck, sorry. Missed that. Doing now. :+1: \n. FYI, this issue has been resolved in 05969fe200f1898985970d4a41db9c46891a41cb.\n. I'm noticing this as well. Anyone know of a workaround?\n. I'd love to do a pull request ... I've looked at the JS, but I think it will take me a while to wrap my head around all the JS involved (there's a lot of paths to follow). If anyone feels like saving me some time, and knows of a general area to look, then I'd probably be more motivated to try and patch and do a PR.\nEither way, I'll try to find some time in the coming weeks to see if I can fix (no promises :laughing:).\n. I think I got it figured.\nThis:\nhtml\n<div>\n  <div>\n    <div>\n      <div>\n        <div>\n          <div>\n            <textarea>     this is a textarea </textarea>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n... now returns:\nhtml\n<div><div><div><div><div><div><textarea>     this is a textarea </textarea></div></div></div></div></div></div>\n(FYI, I was also seeing the same problem with <pre> tags)\nAfter a bit of searching/testing, I ended up just having to remove && _canTrimWhitespace(currentTag, currentAttrs) from the if statement on line 390, and && _canCollapseWhitespace(currentTag, currentAttrs) from the if statement on line 393 of htmlminifier.js.\n@trask after adding your test to the test scripts, $ npm test yields:\n``` bash\n$ npm test\n\nhtml-minifier@0.5.3 test /Volumes/.../html-minifier\njshint src/htmlminifier.js src/htmllint.js && cat src/htmlparser.js src/htmlminifier.js src/htmllint.js > dist/all.js && node test.js\n\nTesting /Volumes/.../html-minifier/src/htmlminifier.js ... done\nSummary:\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 File                                               \u2503 Failed   \u2503 Passed   \u2503 Total    \u2503 Runtime  \u2503\n\u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\n\u2503 ...github/mhulse/html-minifier/src/htmlminifier.js \u2503 0        \u2503 348      \u2503 348      \u2503 76       \u2503\n\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\nGlobal summary:\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Files      \u2503 Tests      \u2503 Assertions \u2503 Failed     \u2503 Passed     \u2503 Runtime    \u2503\n\u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\n\u2503 1          \u2503 43         \u2503 348        \u2503 0          \u2503 348        \u2503 76         \u2503\n\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \n```\nI was going to add several more tests and then do a pull request.\n. Another test:\n``` html\nvar = \"hello\";\n#foo { color: red;        }          \n\n\n hello \n! hello \n\n\n     this is a textarea \n\n\n\n\n\n\n       \nxxxx\nx Hello billy \n\n\n \n```\n... output:\nhtml\n<script>var = \"hello\";</script><style>#foo { color: red;        }</style><div><div><div><div><!--! hello --><div><div><textarea disabled=disabled>     this is a textarea </textarea></div></div></div></div></div></div><pre>       \nxxxx</pre><span>x</span> <span>Hello</span> <b>billy</b><input><textarea></textarea>\n. > Looks good. We just need some tests for this.\nI've added 3 tests so far (copied from \"removing comments\" section, and added the ! character):\n``` js\n  test('ignoring comments', function(){\n    input = '! test ';\n    equal(minify(input, { removeComments: true }), input);\ninput = '<!--! foo --><div>baz</div><!--! bar\\n\\n moo -->';\nequal(minify(input, { removeComments: true }), input);\nequal(minify(input, { removeComments: false }), input);\n\n});\n```\n\nResults: ignoring comments (0, 3, 3)\n\n... and, running $ npm test 337 of 337 tests passed.\nCan you think other tests I should add? Should I account for \"ignored\" comments within attributes and/or a combination \"ignored\" comments with \"regular\" <!-- this is a regular --> comments within the same test? I figured attribute comments would be covered under the \"removing comments\" section as attribute comments don't get stripped anyway.\nI have not pushed the above tests to the remote yet ... Kinda wanted to get some feedback before I send an update to my PR. :smile:\nThanks for the help!\n. Allrighty, I've added 13 tests. Results:\n``` bash\n$ npm test\n\nhtml-minifier@0.5.3 test /Volumes/.../html-minifier\njshint src/htmlminifier.js src/htmllint.js && cat src/htmlparser.js src/htmlminifier.js src/htmllint.js > dist/all.js && node test.js\n\nTesting /Volumes/.../html-minifier/src/htmlminifier.js ... done\nSummary:\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 File                                               \u2503 Failed   \u2503 Passed   \u2503 Total    \u2503 Runtime  \u2503\n\u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\n\u2503 ...mhulse/github/html-minifier/src/htmlminifier.js \u2503 0        \u2503 347      \u2503 347      \u2503 78       \u2503\n\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\nGlobal summary:\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Files      \u2503 Tests      \u2503 Assertions \u2503 Failed     \u2503 Passed     \u2503 Runtime    \u2503\n\u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\n\u2503 1          \u2503 43         \u2503 347        \u2503 0          \u2503 347        \u2503 78         \u2503\n\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\n```\n... and the results from /html-minifier/tests:\n\nTests completed in 114 milliseconds.\n338 tests of 338 passed, 0 failed.\n\nLet me know if you'd like me to add more tests and/or do anything else to help out. :+1: \nThanks again!!!! Excellent work on all of this code, it's a pretty cool utility. :octocat: \n. > Thanks @mhulse, looks good! I haven't worked on minifier in ages, so I honestly don't remember that exact logic without delving into it now :) but your explanation makes sense. And thank god for unit tests; we can ensure no current functionality breaks!\nAwesome, sounds good! Thanks for all of your help.\nAs I find more free time over the coming weeks, I'll try to help you patch some of the other issues you have open.\n. Let me know if there's anything I missed.\nQuestion: Should I have bumped the version number in package.json (it's currently 0.5.3)?\nAlso, sorry for all the commits ... I need to learn how to rebase things.\n. > Thanks @mhulse Don't worry about the version, I bumped it myself.\nAwesome, thanks!\n\nNow we just need to figure out how to support custom syntax in ignored tags.\n\nI agree. I'll go ahead an open a new issue for that.\nThanks for all of your help!\n. @kangax, to clarify this issue, does that mean that there should be the option for people to specify their own start/end tags for the ignored pattern match?\nOne situation I can think of might be opening/closing tags for something like Django templates:\nhtml\n{% block foo %}html  stuff goes here{% endblock foo %}\n{# this is a single line server-side comment #}\n{{ variable }}\n... where the pattern to match/ignore would be based on {%, {# or {{ (for opening tags) and %}, #} or }} (for closing tags)?\nIn other words, should the developer be allowed to pass in a regex/pattern to the code for ignoring tags of their choice? If so, should this custom regex/pattern override the existing \"ignore tags\" regex or should it get appended-to (i.e. on top of matching <?, <%, ?>, and %>, it would also match these custom opening/closing tags: {%, {#, {{, %}, #} and }})?\n. > Does this sound reasonable?\nDefinitely! :smile:\nI don't think it would be hard to introduce as a feature either; it should just be as simple as adding two new options and then using those options to search for start/end tags instead of the hard-coded regex variables.\nLike you say, the defaults for the options would be regex pattern that searches for <?, <% and ?>, %>).\nIf you're open to the help, I could probably tackle this feature this weekend. :octocat:\n. Sounds good! Thanks Juriy! :+1: \n. I think I could do the PR this weekend. Fortunately, it should be pretty easy/fast to do. :octocat: \n. @Luis-TP Based on the tags you need to ignore, could you provide an open/close tag example regex for me to test with?\nI think I have a working patch, I just need write a few more tests at this point.\n. @kangax, do you have any preference in terms of the implementation of registration of custom syntax regexes?\nHere's a few ideas ... First, the simplest approach:\njs\nignoreStartTag: typeof options.ignoreStartTag !== 'undefined' ? options.ignoreStartTag : /<(%|\\?)/,\nignoreEndTag: typeof options.ignoreEndTag !== 'undefined' ? options.ignoreEndTag : /(%|\\?)>/,\nignore: function(text, startTag, endTag) {\n  buffer.push(options.removeIgnored ? '' : startTag + text + endTag);\n},\n...or, this approach might allow for better future growth:\njs\nignore: function(text, startTag, endTag) {\n  buffer.push(options.removeIgnored ? '' : startTag + text + endTag);\n},\nregister: {\n  ignore: {\n    startTag: typeof options.ignoreStartTag !== 'undefined' ? options.ignoreStartTag : /<(%|\\?)/,\n    endTag: typeof options.ignoreEndTag !== 'undefined' ? options.ignoreEndTag : /(%|\\?)>/\n  }\n}\n... or, this feels better to me, but it would break backwards compatability:\njs\nignore: {\n  startTag: typeof options.ignoreStartTag !== 'undefined' ? options.ignoreStartTag : /<(%|\\?)/,\n  endTag: typeof options.ignoreEndTag !== 'undefined' ? options.ignoreEndTag : /(%|\\?)>/,\n  callback: function(text, startTag, endTag) {\n    buffer.push(options.removeIgnored ? '' : startTag + text + endTag);\n  }\n},\nIt's late, so maybe I'm over-thinking this?\nAny thoughts/preferences on implementation here?\nThanks!\n. @Luis-TP Thanks for example! I'll build it into my tests. :+1: \n. @kangax that looks good to me. Thanks for feedback. \nI'll send a PR today so we can discuss the details further (if need be). :+1:\n. Well, I thought this would be easy, but with anything programming related, I have been proven wrong. :laughing: \nI was able to get a passing test for @kangax's suggestion of /<\\%+/, but when I tried matching /\\{{2,3}/, my code would never get a chance to \"see\" those spots in the HTML string.\nHere's where I left off:\nhttps://github.com/mhulse/html-minifier/commit/d470390e7f8892207738bf524670170bfed48154\nThe problem:\nBecause opening tags like {{ {{{ are not flagged as HTML (somewhere along the html-minifier's code path ... I have yet to figure this out due to complexity of code) the aforementioned characters get treated as normal text (not HTML) and therefore my code (i.e., else if (html.search(handler.ignoredStartTag) === 0) { ...) never has a chance to parse things that don't start with an angle brace < (in other words, non-< elements are treated as chars and the other parts of the script take over).\nI think I need to take a break and come back at this with a fresh outlook (my Sunday is almost over anyway).\nIn the meantime, does anyone else have any tips on how best to handle this scenario? I think I could use a fresh pair of eyeballs to look at my logic. :+1: \n. @Luis-TP Thanks for clarification. I need to take some time to think about your situation, so I don't have anything helpful to say at the moment.\nRunning your first example through the online html-minifier, I see this error:\n\nParse Error: <button {{#if disabled}}disabled{{/if}}>...</button>\n\nSo, your code doesn't even make it through the parser. I see now.\n\nPerhaps I jumped the gun in thinking that custom syntax could resolve this issue? Would this need to be handled a different way?\n\nHrmm, that is a good question. I have not used handlebars (yet) myself, so a piece of the puzzle is missing for me.\nAs it stands currently, my code would need to be moved/refactored in order to account for custom syntax like you posted.\nBut now that I know more about what you're trying to do, I'll take another look at the html-minifier's code ... We might be able to handle this in another location, separate from \"ignored\" tag checking.\nWith that said, my new code does now allow for someone to pass custom regex into the custom tag checking bits. On one hand, it won't handle {{ or }} template tags, but it will handle tags starting/ending with < and >.\n@kangax If we're thinking purely in terms of small, iterative, \"improvements\" to the code, then I could finish what I'm working on and do a PR. From there, we could open a new issue and continue our talk on how to best handle template tags, like what @Luis-TP posted. How does that sound?\nOf course, I don't mind going back to drawing board if we want to try and account for any/all \"ignored\" type of tags (including template tags like handlebars) in one set of \"ignoreXXXXXTag\" options.\n. @Thomasdezeeuw I've been meaning to re-visit at some point. I've been wrapped up in another project since I last left off here. #98 is related, and I'm going to try to carve out a weekend to do a PR on both.\nIn the meantime, if you could provide example code (or describe your needs in detail) for your particular situation, that would probably be helpful. The more examples I can use to test against, the better. :+1: \n. Last time I left off was here: https://github.com/kangax/html-minifier/issues/83#issuecomment-28165671\nI haven't used the htmlminifier much since then, so my head is out of the code. I'd love to give back to this project, but my free time has been limited lately. :frowning: \nAnyone currently available to tackle this issue?\nBased on work I've done above, and @kangax's comments here https://github.com/kangax/html-minifier/issues/83#issuecomment-28647611, seems like we could be close to having a working patch.\n. Angular has some interesting syntax. I've been meaning to check it out, just haven't had the opportunity.\nHonestly, I don't really understand why Angular isn't using data- prefixes for attributes. Additionally, does Angular recommend that people use multiple lines for attributes? Personally, I rarely spread a tag across multiple lines for the sake of the attribute value.\nWith that said (keep in mind, I'm not familiar with AngularJS needs/requirements/syntax-specifics) ...\nI'm reminded of HTML5 data- attributes. For example, this:\nhtml\n<input id=\"bigglesworth\" type=\"search\" name=\"q\" placeholder=\"&hellip; search &hellip;\" autocomplete=\"off\" data-bigglesworth-options='{\n    \"feed\" : \"feeds/search.json\"\n}'>\n... get's converted to:\nhtml\n<input id=bigglesworth type=search name=q placeholder=\"&hellip; search &hellip;\" autocomplete=off data-bigglesworth-options=\"{\n    \\\"feed\\\" : \\\"feeds/search.json\\\"\n}\">\nA few observations:\n\nThe JSON outer quotes are modified and the inner quotes are escaped.\nAs you can see above, my indentation is left alone.\n\nMy thoughts:\nThought #1:\nLooking at the original example, one could easily do:\nhtml\n<div class=\"fragment square\" ng-hide=\"square1.hide\" ng-class=\"{ 'bounceInDown': !square1.hide, 'bounceOutDown': square1.hide }\"></div>\n<img class=\"pull-left\" alt=\"First image test\" src=\"http://placehold.it/400x200&text=first image test\">\n... and get this output:\nhtml\n<div class=\"fragment square\" ng-hide=square1.hide ng-class=\"{ 'bounceInDown': !square1.hide, 'bounceOutDown': square1.hide }\"></div><img class=pull-left alt=\"First image test\" src=\"http://placehold.it/400x200&text=first image test\">\nWhile having all the attributes, and their values, on one line might be less readable, it's definitely not out of the ordinary (at the very minimum, it would be a quick fix for the OP). :+1: \nThought #2:\nLooking at the example I posted above, before having run it in the minifier, I personally would have assumed the minifier would've ignored my data- attribute value.\nI guess I'd prefer that custom data- attributes be left alone. I just have never been in a situation where I've needed minification of data- attribute values (which are similar to Angular's implementation).\n\nWith that said, I suppose there's nothing wrong with adding a new option(s).\nPerhaps an attribute \"whitelist\" option? Where, if an attribute is in the whitelist, then it's included in the trimWhitespace and collapseWhitespace functionality?\nHonestly, I'll have to look at the code to refresh my memory, but it seems like a whitelist option (with regex capabilities) would be the way to go ... no?\nGoing back to my first comments, I wonder why AngularJS doesn't use data- as a prefix for the attributes? I could be wrong, but I've always been under the assumption that prefixing data- was the official way of writing custom HTML5 attributes? It would be easier for us to whitelist anything that starts with data- than to account for regex. Not impossible, just more juggling needs to be done when allowing the end user that type of freedom.\n. Really though, if you think about it, the AngularJS attributes, and the example I posted, are just ways of passing objects into Javascript, no? I suppose there's less of a chance that these attributes will contain anything more complex than JSON strings or javascript object syntax ... It'd boil down to the end user knowing their markup to make that decision I suppose. Just thought it was worth pointing this out, because the minifier avoids minifying embeded JS blocks, for good reasons ... These attributes are similar in that they contain a whole new level of syntax requirements. Isn't there an issue for JS minification? #56 right? Maybe this issue could be rolled into that issue?\nIt might even be a good time to talk about bringing in a new library for the JS/CSS minification support?\n. @kangax I really like the looks of your last example. Thanks for the feedback. :+1: \nThis logic would be related to the work I started over here: #83. I've been meaning to get back to that issue ... Other things have gotten in the way since I last left off there.\nI need to refresh my memory in terms of the minifier code. I'll take a look at both issues to see where I can help. If it looks like something I can tackle, I post back here with my thoughts and potentially a PR (or soon there after).\n. Sorry I haven't gotten back to ya'll lately. I've been very busy with my day job. I'm not sure when I'll be able to get to this. I would not be opposed to someone else working on this PR. I'm on vacation for the next few weeks ... I hate to keep postponing work on this PR, but I'm hopeful to find the free time when I get back to do a PR. :+1: \n. ",
    "robogeek": "Yes, I was about to report this.  I am using this module via the minify module in case that makes any difference.\n. ",
    "nfriedly": "+1\n. ",
    "vvo": "Ah well ok, I thought it should remove comments like /**/ and // from \n    ",
    "kswedberg": "Any update on this? Is there any chance that the parser could be updated to allow for HTML5 block elements inside <a>?\n. ",
    "hugowetterberg": "Well, it is included if global doesn't contain HTMLParser (not running in browser) and if require() is available (running in node): \nhttps://github.com/hugowetterberg/html-minifier/commit/cf25eaa25f8307a129625136d95879c41d76cd20#L2R23\n...or did you think of some other sort of dependency declaration?\n. So yeah, @bfred-it, I agree. But I guess that that was a typo and you actually meant @hwoarangzk \n. @hwoarangzk as far as I can see this issue is about the minifier going into an infinite loop in the very specific case of an unclosed (malformed) custom element. So what you have encountered is either off topic for this issue OR your markup is malformed, there isn't really room for a middle ground.\nIf you're unable to contribute code that's completely ok, there are many kinds of contributions that you can make to open source projects. In this case you should verify that your markup actually is valid or at least doesn't contain the same mistake that this issue is about. Then try to remove markup until you're left with the minimal markup needed to reproduce the bug. Then file a separate issue that documents what you found.\n@bfred-it reacted to the tone of your original comment, and rightly so. The details of the problem is simply not relevant as you just don't have any right to demand fixes from your peers. Even if that's not what you intended to do it's what your comment sounded like. Keep in mind that just as others should give you leeway because of the obvious language barriers you should try to be sensitive to when a comment has been misinterpreted. You really can't go wrong with generously apologising for unintended slights and backing up your actual arguments with concrete examples and reasoning.\nGood luck and have fun!\n. Ok, it seems like this issue is becoming a catch-all for robust error reporting vs. just hanging. If the issue is that even properly escaped quotes trigger an inf loop then you should reduce your example to just that and not include the other templating stuff. Looking at your example it could just as well be the later markup that causes the issue:\nhtml\n<i><%= status == 2 ? \"pass\" : (status == 3 ? \"fail\" : (status == 1 ? \"undealt\" : \"\")) %></i>\nThat is not valid html, and running your template language through a html tool will probably not work.\nSo: reduce, reduce, and reduce, until you get rid of all ambiguity. And if the problem actually is properly escaped quotes you can ask for the issue to be re-opened.\nEven those who have English as their first language offend each other unintentionally (all the time). But just a unreserved \"Sorry, I didn't mean it that way\" can get things like that cleared away quick & nice.\n. @GriffinSauce Nope, I'm definitely not suggesting that. We don't want software to hang. Detecting infinite loops / halting state is, however, a pretty hard problem https://en.wikipedia.org/wiki/Halting_problem so that wasn't really what I argued for either @johngrogg. And programmatically detecting unreasonable resource usage is out of scope for the project. The normal thing to do after a bug like this would be to create a regression test that makes sure that that it doesn't resurface.\nAfter I was pulled into this thread (by a mention-mistake :smile:) I just argued for the virtue of sticking to the topic of a thread, reducing any examples to the minimum required to reproduce a bug, and taking care not to sound like an entitled ass (because it's a very easy mistake to do).\nBut I'm actually not involved in this project, nor do I use it, I pretty much just responded because I wanted to help clearing up the communication issues.\n. ",
    "stereobooster": "made fixes for your comments.\nP.S. You can leave notes on Diff tab on this page, then comments will stay even if the commits will be replaced.\n. Just published ruby gem thats wraps your library\n. ",
    "neoziro": "Hello, i met the same problem with hulkster, i solved this by a tricky replace https://github.com/neoziro/hulkster/commit/dc7e284245a5fcbf3b1006afe7562decf314fb47. It works but i am interested if you have a best solution.\n. Ok :) so there is no problem.\n. ",
    "tiagoroldao": "This is still unresolved:\nhtml\n<ucpa-feedback></ucpa-feedback>\n<ucpa-help></ucpa-help>\nminifies to:\nhtml\n<ucpa-feedback>\n    <ucpa-help></ucpa-help>\n</ucpa-feedback>\nEdit nevermind, #50 \n. ",
    "aurhe": "When trying to minify:\nhtml\n<pg-notification></pg-notification><div></div>\nit was changing the order of the tags:\nhtml\n<pg-notification><div></div></pg-notification>\nThis commit fixes it.\n. ",
    "samaxes": "This issue is also fixed by #50. Feel free to close this PR.\n. ",
    "matt-bailey": "I'm not sure if this is a related issue, but using object tags seems to create a similar problem (I'm also using grunt-htmlmin, which uses html-minifier). However, I'm a complete Grunt noob, so it may well be something I'm doing wrong...\nThis is my source html:\nhtml\n<object type=\"image/svg+xml\" data=\"image.svg\">\n    <div>[fallback image]</div>\n</object>\nThis is the output html:\nhtml\n<object type=\"image/svg+xml\" data=\"image.svg\">\n    </object><div>[fallback image]</div>\nAs you can see, the inner div is somehow magically moved outside of the object.\nAll the html-minifier options are set to whatever the defaults are.\n. Good stuff, well spotted.\n. ",
    "onearmfrog": "Bug still persists, tags inside svg are broken. I could not find any option to disable html-min for specific tags to solve this.\n. ",
    "xdhmoore": "I am having the same issue with inline svg in my html.  I have a couple  tags whose contents are populated with d3.js:\n<svg>\n  <g class=\"stuff\"/>\n  <g class=\"otherstuff\"/>\n</svg\nhtmlmin produces the following:\n<svg>\n  <g class=\"stuff\">\n  <g class=\"otherstuff\">\n</svg>\nWhich causes the browser to interpret it as:\n<svg>\n  <g class=\"stuff\">\n    <g class=\"otherstuff\"></g>\n  </g>\n</svg>\n. This would also provide a decent workaround for #45.\n. ",
    "stephenplusplus": "Ah, I see. I wasn't sure if custom markup was intended to be supported. And it added to my confusion when running the test in the browser, the output was fine, but from Node, it failed. With Angular gaining momentum, and web components coming, there are an increasing number of devs who would stand to gain from html-minifier supporting these custom elements. I'll see if I have some time this weekend to play around!\n. Hmm, those regex changes must have been introduced elsewhere. dist/all.js was out of date from the actual source files that are within it. When I did a copy-paste of the 3 individual files that comprise 'all.js', that regex change came along with it. A blame should show us where that came from. But, the current end tag regex seems to match any closing tag correctly already.\nIf you'd like to keep HTML 4 and 5 separate, would you prefer 5 be default, and 4 as an option? I'm happy to go back in and make those changes!\n. Cool. I've got a move ahead of me so my time will be limited, but I'll definitely do this as quickly as I can :)\n. Only had a bit of a chance to add this as an option, but gave it a shot.\n. ",
    "grEvenX": "Fix proposed in https://github.com/kangax/html-minifier/pull/50\n. ",
    "davidagraf": "Christ, I do not seem to know html! Sorry for bothering you!\n. ",
    "slundberg": "I should have checked the pull requests....looks\n. I should have looked at the current pull requests and seen that this is a duplicate from last week. So I am closing this one.\n. ",
    "karolsojko": "+1\n. ",
    "mmiszy": "+1\n. ",
    "tkellen": "+1\n. ",
    "sindresorhus": ":+1: \nThis is important for generator-angular which uses grunt-contrib-htmlmin.\n. :+1: \n. Another option is adding this to your .bashrc/.zshrc: https://gist.github.com/sindresorhus/8435329\n. > Unfortunately not enough for this project because the version string needs to be replaced in 3 files in addition to package.json.\nIsn't that what the Gruntfile already does?\n$ grunt && np\nAnyways, you should separate the concerns between preparing for publish and actually publishing. My above tip concerns itself with the latter.\n. That can easily be handled by https://github.com/outaTiME/grunt-replace or a custom task simply using cheerio.\n. Hmm, yeah, good point. \u00af\\(\u00ba_o)/\u00af\n. ",
    "jfaissolle": "I think this is because some tags are wrongly registered in htmlparser. I have the same problem with the <iframe> tag. This one as well as the <object> tag are registered as block level (correct) as well as inline elements (wrong). If you remove them from the inline list in htmlparser.js, it works fine.\n. I just submitted a pull request: #52 \n. ",
    "munsellj": "+1.\nAnother Example:\n<a>\n  <p>Link</p>\n</a>\nBecomes:\n<a></a><p>Link</p>\nInstead of:\n<a><p>Link</p></a>\nI was assuming this was due to collapseWhitespace, but the same issue also occurs when only running removeComments.\n. ",
    "serrynaimo": "+1\n. ",
    "a-ursino": "+1\n. ",
    "josteing": "+1\n. ",
    "chrisdhanaraj": "+1, @Taritsyn fix works.\n. ",
    "iameli": "88 was closed as a duplicate of this\u2013I think that's probably correct, I just wanted to note here that one of the behaviors that you should be able to specify for the interior of ",
    "fxck": "Could really, really use this https://github.com/kangax/html-minifier/issues/88#issuecomment-27135804\nhave you @iameli managed to put something together?\n. Since this is hmltminifier, I wouldn't care about css or js, but it's imho valid request to be able to minify certain script tags. Something like this would have probably worked..\nprocessScripts: [\"text/x-handlebars-template\", \"text/ng-template\"]\nwhere you'd in an array(or maybe just a string would be enough) define which script types to process.\n. Then again @kangax this is why I think the other issue #88 shouldn't have been closed as a duplicate of this one. Because this one wants to actually minify actual inline javascript(using uglify or whatever) and the other wants to use html minification on html templates inside inline javascripts.\n. Yeah @kangax but that's not how angular, or any templating engine, for that matter, works.\nIt's a script tag with standard HTML and some curly braces, which then angular parses and replaces with variables from the controller, instead of javascript. So\n```\n</p>\n<h1>{{foo.title}}</h1>\n\n<p>hi {{foo.name}}, how is it going?</p>\n\n<p>\n```\nbecomes\n<h1>whatever</h1>\n<p>hi whoever, how is it going?</p>\nSo this would be ideal https://github.com/kangax/html-minifier/issues/56#issuecomment-37626939 all it would have to do is not  ignore script tags if their type matched this option..\n. Yeah right and how does what you said contradicts with what I posted? The only reason I posted an actual example with short description of how it works is because he's apparently unfamiliar with the concept. I never said htmlminifier should do anything with the logic.\nAlso \"is not text/javascript\" is kind of stupid, since js will work just fine without any type. Defining what types it should parse(in most cases it will be just one) is definitely more solid solution.\n. Cool, I think we should perhaps make a new issue, since this one is a) about something else and b) it's already closed..\n. Done. https://github.com/kangax/html-minifier/issues/139\n. @kangax have you had a chance to look into it, if it's gonna be a problem or not?\n. Amazing thanks, but still, these are all valid attributes, it could by \"on\" by default.\n. ",
    "unbug": "+1 @fxck \n. @fxck I think @kangax should take a look at logic-less template engine,might help him to release a new version in a shot time.How those engine works is just warp a bunch of HTML in a script tag.and the type is not \"text/javascript\",so just mini those scripts as normal HTML tags.\n. @fxck Actually I just agreed with your idea,I just though if @kangax  take a look at logic-less template engine might help him to understand your idea :)\n. +1 @fxck This is what I am looking for,all my projects use logic-less template engine,looking forward the next version of html-minifier which has got rid of this issue :)\n. ",
    "XhmikosR": "https://github.com/kangax/html-minifier/commit/2a5ce0537f2bc4012d2cee06c77763ee3cbd913b#commitcomment-5707076\nhttp://goalsmashers.github.io/css-minification-benchmark/\n. The reason I suggest clean-css and that I personally use that, is that it's much better maintained, and less error prone. Especially if you skip advanced optimizations, you should be on the safe side. Less.js is using clean-css too.\nThe fact that it generates better compression for some tests see https://github.com/GoalSmashers/clean-css/issues?state=open. I've personally suggested many improvements all these years; basically the transforms is why CSSO beats clean-css and I expect that to be sorted soon :/\nI opened a ticket for a standalone web version https://github.com/GoalSmashers/clean-css/issues/260 Maybe you could help make that happen sooner and use that here too :)\n. @kangax: I tried node-browserify and created successfully a standalone file. Can you try this standalone clean-css build?\nhttps://gist.github.com/XhmikosR/fe6db493bc06eb582101\nhttps://github.com/XhmikosR/clean-css/compare/browserify\n. Seems to work fine @kangax.\nBTW, I really think you should disable mangling for the tests only so that they pass. Isn't it possible to pass uglify and clean-css options yet?\n. Sounds like something isn't being exported properly.\nI'll try to have a look in the next days.\n. I personally cannot reproduce this by just using the npm package.\nWhat are the clear instructions to reproduce the issue with the latest npm package?\n. @kangax: so is there any way currently to make html-minifier keep a specific comment in a valid HTML way? In my case I need to keep <!--googleoff: all--> and <!--googleon: all-->.\n. I have already tried that but it's not valid html. I might work around it with grunt-includereplace.\n. I guess it makes sense to allow specifying custom attributes for both types. Not sure how hard this will be to add though.\nIf there's any request in the future you can always add more features :)\n. There is grunt-htmlcompressor but requires Java since YUI and Closure require Java.\n. :+1: \nI'm mostly interested in PR #94 which makes the plugin unusable since Jekyll outputs HTML this way.\n. Awesome, thanks!\n. Did you try the latest master? I think it is related to https://github.com/kangax/html-minifier/pull/94\n. I still feel Grunt is worth. Because then we can easily add more stuff like uglify etc.\n. Oh, also cat isn't cross platform so it's not a matter of npm run script only.\n. Regardless, I offer to make the switch, will you accept the patch?\n. I see no reason to reinvent the wheel. Scripts are nice and all but limited.\nGrunt is simple to add, cross platform and fully extensible system.\n. @kangax: So should I go ahead with this?\n. @kangax: I will take care of this in the next days then.\n@Dashed: I have tried gulp, but couldn't do the stuff I wanted the way I wanted back then. For the time being, Grunt feels more natural to me.\n. http://xhmikosr.github.io/html-minifier/\nhttp://xhmikosr.github.io/html-minifier/tests/\n. @kangax: I basically removed most options that are on by default. And sorted the remaining entries by name.\nBTW, Travis doesn't seem to show for the PR, would be nice to enable it.\n. Another thing, what do you think about moving the web related files to a separate folder? Like \"web\"? We can make Jekyll use that folder for page generation and the source tree should be cleaner.\nEdit: Actually this doesn't work because then the dist directory isn't copied in the output dir.\n. Maybe it's because the main branch is gh-pages?\n. https://travis-ci.org/kangax/html-minifier/builds/17493755\n. No problem, every day we learn something new :)\nBTW, do you really want to support Node.js v0.6? If not you should remove it from travis and bump engines in package.json.\n. @kangax: any thoughts so far?\nI'm having issues setting up grunt-contrib-qunit and finding a solution for the source files directory structure. But one thing at a time :)\n. @kangax: rebased against the latest changes. I'm not sure I can fix the remaining issues though. If you are not in a hurry I can look closer the next days.\n. @kangax: Almost done. Opinions so far?\nNot sure how to make grunt-contrib-qunit to work yet that's why the PR is stalled.\nAlso about the license headers, I'm thinking maybe moving the htmlminifier.js's header as the main project's header.  What do you think about that?\n. Alternatively I can try using grunt-exec to run node test.js until we have a better solution.\n. I think this is ready to be merged. If someone else can make use of another more appropriate plugin for the tests, that would be perfect. Otherwise, things work fine as they are too :)\nNot sure what to write in the README about Grunt though.\n. Another thing while I'm at it, what do you prefer, single or double quotes?\n. Didn't run dist, feel free to run it :)\n. Yeah I too looked into JSCS for Bootstrap but its indentation warnings seemed weird so I didn't spend a lot of time on it. But I will look into getting JSCS to work in the near future. \n. That's good news! I also switched to JSCS for the indentation check in Bootstrap but I'm not sure I like its approach. I will push the changes in a separate branch in bootstrap later.\n. Apparently my issue is already reported here.\n. OK, I will make those changes tomorrow.\nBTW, even grunt-contrib-uglify doesn't support node.js 0.8 anymore it seems...\nAs for strict, it requires to use the \"use strict\"; part.\n. I went ahead and made the changes. How do you want to handle node.js 0.8? Personally, I believe it's fine to drop 0.8 if you bump the version to like 0.6.0.\n. Well, the core code works fine; the plugins for development don't work with  < 0.10...\n. I went ahead and added JSCS using the config from fabric.js. I made a couple of changes there, but everything should be ok.\nPlease review and let me know if there are any issues :)\n. Something does not work with node.js 0.8 it seems :/\n. BTW, maybe you could make a new npm release? There aren't any important changes so far, but it shouldn't hurt either :)\n. Thanks!\n. Sounds good! I guess you can update the deps in that branch and drop node.js 0.8 support since it's becoming a problem more every day...\n. BTW, personally apart from the ability to minify inline javascript, I miss the opportunity to cleanly ignore specific code. I use <!--googleoff: all--> etc and I only need to keep that from the comments but it's so much trouble to work around this :/\n. Now only one test fails :)\n. Maybe disable mangle in uglify for the tests?\n. I suggested to disable it for the tests only if possible. Unless you have another workaround on your mind of course :)\n. Thanks, looks good. We could even go one step further later and create assets/css, js etc.\n. Awesome, thanks!\nMaybe we could clean up that code? I mean return new CleanCSSModule().minify(text); is the same in both cases.\n. It seems there are cases minification doesn't happen for CSS. I mean I see the spaces after semicolons in style=\"\" not being removed.\nExample\nhtml\n<td colspan=\"2\" style=\"text-align:center;padding:0; line-height:1.2em;;\">\nbecomes\nhtml\n<td colspan=2 style=\"text-align:center;padding:0; line-height:1.2em;\">\n. I'll leave the refactoring to you :)\nBTW, I opened a PR for the cleancss browserify version. Perhaps we could just create it ourselves in the future. But all this after the assets refactoring :)\n. OK, I noticed it and thought I'd bring it up :)\nAnother thing I was thinking. Maybe we should pay it on the safe side and disable clean-css's advanced optimizations by default. Also, I think there should be a way to pass options to clean-css like compatibility. What do you think?\n. There's an option we might need to turn on inline-script.\nhttps://github.com/mishoo/UglifyJS2#beautifier-options\nThis fixes the issue; not sure if there are any side effects or not though.\n. I totally want to have this in a nice page :)\nBut I think we should take this opportunity and refactor the source files before the source tree becomes more messy :P\nAs for the benchmark itself, as long as you can add some code to output to a yml file, we can use that data with Jekyll directly. See: https://github.com/twbs/ratchet/blob/master/docs/_data/ratchicons.yml and http://jekyllrb.com/docs/datafiles/\n. I think we should have /benchmarks/input and benchmarks/output. Then have a simple script which would run the benchmark and output to 2 json files in  _data/. Then we can use that data with Jekyll itself.\nI suggest you make a new branch for this and I can push any changes there too; when we are done we merge the branch into gh-pages.\n. Yeah, that sounds perfect!\n. Awesome, thanks! I think now it should be possible to make browser tests pass too. Also maybe we could add a more extensive example in README.md ?\n. For some reason, browser tests fail for me even after setting mangle: false while in node they pass.\nIt's like the extra options aren't being passed for uglifyjs in the browser.\n. I think we can just check for mangle and if not false then do compressedAst.mangle_names();.\n. Nvm, what I suggested was just gonna fix the tests...\n. Anyway here is what I did https://github.com/XhmikosR/html-minifier/compare\nI left one test with mangling intact.\n. @ftrudeau: simply unwatch the repository if you don't want to receive notifications.\n. Done. Feel free to add more changes for 0.5.5 and 0.6.0 :)\n. Fixed in #171.\n. Same issue with FF 30.\n. FYI, we are now up to 3 failing tests on FF 31. :/\nChrome and IE11 work fine.\n. Even more on FF nightly and latest master\n```\nMozilla/5.0 (Windows NT 6.1; rv:32.0) Gecko/20100101 Firefox/32.0\nTests completed in 172 milliseconds.\n428 assertions of 433 passed, 5 failed.\n```\n. I'm not sure when I'll have some time, but I can try having a look, sure :)\n. Awesome, thanks!\n. This seems an issue with uglify to me. If you go to http://lisperator.net/uglifyjs/ and enter this sample JS code\njs\n$('head').append('<div>hello<\\/script>');\nyou will end up with\njs\n$(\"head\").append(\"<div>hello<\\/script>\")\nassuming you choose to escape </script> in codegen options.\n. Maybe @mishoo can shed some light.\n. The CSS/JS minification support is only added in the current HEAD, i.e. there's no npm release with this feature yet.\n. Well, the comments are not part of the important stuff one wants or\nintended to keep. It makes no sense to keep them apart from debugging\nmaybe. Plus they add to the final size.\nOn Jun 24, 2014 4:18 PM, \"Juriy Zaytsev\" notifications@github.com wrote:\n\nOn a second thought, I don't think they should be removed. Isn't the whole\npoint to remove regular comments but leave other chunks of some \"important\"\ncontent (by surrounding them with \"htmlmin:ignore\" ones)?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/176#issuecomment-46969183\n.\n. When I run this I just get the html file contents output on screen. Is that the same issue?\n. I'm getting one failed browser test with Chrome preserving custom attribute-wrapping markup (1, 0, 1).\n. Yeah. It was because of the dist file being out of date but please verify it works for you too now.\n. @stevenvachon @kangax:\n\nthis is causing tests failures on Windows:\n```\nC:\\Users\\xmr\\Desktop\\html-minifier>npm test\n\nhtml-minifier@0.6.6 test C:\\Users\\xmr\\Desktop\\html-minifier\ngrunt test\n\nRunning \"concat:dist\" (concat) task\nFile dist/htmlminifier.js created.\nRunning \"uglify:minify\" (uglify) task\nRunning \"jshint:grunt\" (jshint) task\n\n\n1 file lint free.\n\n\nRunning \"jshint:src\" (jshint) task\n\n\n4 files lint free.\n\n\nRunning \"jshint:tests\" (jshint) task\n\n\n2 files lint free.\n\n\nRunning \"jshint:web\" (jshint) task\n\n\n1 file lint free.\n\n\nRunning \"jshint:other\" (jshint) task\n\n\n1 file lint free.\n\n\nRunning \"jscs:grunt\" (jscs) task\n\n\n1 files without code style errors.\n\n\nRunning \"jscs:src\" (jscs) task\n\n\n4 files without code style errors.\n\n\nRunning \"jscs:web\" (jscs) task\n\n\n1 files without code style errors.\n\n\nRunning \"jscs:other\" (jscs) task\n\n\n1 files without code style errors.\n\n\nRunning \"exec:test\" (exec) task\nTesting  C:\\Users\\xmr\\Desktop\\html-minifier\\src\\htmlminifier.js ...\ndone\nErrors:\nModule: htmlminifier Test: url attribute minification\n    at Object.input (C:\\Users\\xmr\\Desktop\\html-minifier\\tests\\minifier.js:931:5)\nat Object.Test.run (C:\\Users\\xmr\\Desktop\\html-minifier\\node_modules\\qunit\\node_modules\\qunitjs\\qunit\\qunit.js:136:18)\nat C:\\Users\\xmr\\Desktop\\html-minifier\\node_modules\\qunit\\node_modules\\qunitjs\\qunit\\qunit.js:279:10\nat process (C:\\Users\\xmr\\Desktop\\html-minifier\\node_modules\\qunit\\node_modules\\qunitjs\\qunit\\qunit.js:1277:24)\nat null._onTimeout (C:\\Users\\xmr\\Desktop\\html-minifier\\node_modules\\qunit\\node_modules\\qunitjs\\qunit\\qunit.js:383:5)\nat Timer.listOnTimeout [as ontimeout] (timers.js:112:15)\n\nActual value:\nlink\nExpected value:\nlink\nSummary:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 File                                               \u2502 Failed \u2502 Passed \u2502 Total \u2502\n Runtime \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ...s\\xmr\\Desktop\\html-minifier\\src\\htmlminifier.js \u2502 1      \u2502 444    \u2502 445   \u2502\n 391     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nGlobal summary:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Files \u2502 Tests \u2502 Assertions \u2502 Failed \u2502 Passed \u2502 Runtime \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1     \u2502 67    \u2502 445        \u2502 1      \u2502 444    \u2502 391     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\nExited with code: 1.\nWarning: Task \"exec:test\" failed. Use --force to continue.\n\n\nAborted due to warnings.\nExecution Time (2014-08-16 06:06:15 UTC)\nuglify:minify  282ms  \u2588\u2588\u2588\u2588\u2588 9%\njshint:grunt    31ms  \u2588 1%\njshint:src     187ms  \u2588\u2588\u2588 6%\njshint:tests   141ms  \u2588\u2588\u2588 5%\njscs:grunt     156ms  \u2588\u2588\u2588 5%\njscs:src        94ms  \u2588\u2588 3%\nexec:test         2s  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 68%\nTotal 3s\nnpm ERR! Test failed.  See above for more details.\nnpm ERR! not ok code 0\n```\n. Now tests pass here too. I did clean up node_modules and reinstall modules, maybe there was a relevant update there.\n. Thanks!\n. @LaurentGoderre: this needs to be rebased.\n. @LaurentGoderre: if you add tests which pass, I'd be glad to have a look and merge this.\n. @kangax: any objections in merging this?\n. OK, I guess we'll know if we break something in the process. :P\nPS. @kangax Maybe you should release a v0.6.9? https://github.com/kangax/html-minifier/compare/v0.6.8...gh-pages?w=false\n. @LaurentGoderre: this seems to break some browser tests with FF 33 at least  http://kangax.github.io/html-minifier/tests/\n. @LaurentGoderre: locally, you need Ruby and Jekyll as this is what GitHub pages use. But anyway I solved this by running grunt.\n. See https://github.com/mishoo/UglifyJS2#keeping-comments-in-the-output\nThis isn't an issue with html-minifier per se BTW.\n. Yeah, makes sense :+1: \n. /CC @kangax \n. /CC @kangax \n. Using https://github.com/kangax/html-minifier/compare/benchmark2, I'm getting:\n```\nC:\\Users\\xmr\\Desktop\\html-minifier>node -v && npm -v\nv0.10.35\n1.4.28\nC:\\Users\\xmr\\Desktop\\html-minifier>node benchmark.js\nProcessing... html-minifier\nC:\\Users\\xmr\\Desktop\\html-minifier\\benchmark.js:89\n              throw new Error('There was an error reading ' + minifiedFilePath\n                    ^\nError: There was an error reading benchmarks\\generated\\html-minifier.min.html\n    at C:\\Users\\xmr\\Desktop\\html-minifier\\benchmark.js:89:21\n    at Object.oncomplete (fs.js:108:15)\n```\n/CC @kangax @duncanbeevers: let me know if that works for you; if so we can merge it since it's the proper way to handle dirs cross-platform.\nAbout this issue, I think it's due to gzip; Windows doesn't have it.\n. I pushed that branch a better fix; now everything works on Windows too.\nPlease try it on a non Windows OS just to be safe.\n@duncanbeevers: The plan was to add the whole string in path.join, but previously I had other issues so it didn't work. Now it should work fine.\nProcessing... html-minifier\nfilePath: benchmarks\\html-minifier.html\nminifiedFilePath: benchmarks\\generated\\html-minifier.min.html\ngzFilePath: benchmarks\\generated\\html-minifier.html.gz\ngzMinifiedFilePath: benchmarks\\generated\\html-minifier.min.html.gz\nSo, please try that branch and let me know so that I merge it.\n. @duncanbeevers: I assume you used the latest benchmark2 branch?\nAlso, feel free to comment on the code changes in that PR. I went ahead with chalk since I find it better. But if we can achieve the same using cli-tables, I'm all for using that since it will be one less dev dependency.\n. ```\nC:\\Users\\xmr\\Desktop\\html-minifier>node benchmark.js\nProcessing... html-minifier\nC:\\Users\\xmr\\Desktop\\html-minifier\\benchmark.js:81\n              throw new Error('There was an error reading ' + minifiedFilePath\n                    ^\nError: There was an error reading benchmarks/generated/html-minifier.min.html\n    at C:\\Users\\xmr\\Desktop\\html-minifier\\benchmark.js:81:21\n    at Object.oncomplete (fs.js:107:15)\n```\nFYI, we should probably take care of these too (found with ESLint)\n28:0   error  Missing \"use strict\" statement               strict\n   29:9   error  Don't use octal: '\\0'. Use '\\u....' instead  no-octal-escape\n   29:29  error  Don't use octal: '\\0'. Use '\\u....' instead  no-octal-escape\n   29:43  error  toKb was used before it was defined          no-use-before-define\n   32:0   error  Missing \"use strict\" statement               strict\n   33:9   error  Don't use octal: '\\0'. Use '\\u....' instead  no-octal-escape\n   33:29  error  Don't use octal: '\\0'. Use '\\u....' instead  no-octal-escape\n   33:43  error  toKb was used before it was defined          no-use-before-define\n   36:0   error  Missing \"use strict\" statement               strict\n   40:0   error  Missing \"use strict\" statement               strict\n   43:9   error  Don't use octal: '\\0'. Use '\\u....' instead  no-octal-escape\n   43:50  error  Don't use octal: '\\0'. Use '\\u....' instead  no-octal-escape\n   46:0   error  Missing \"use strict\" statement               strict\n   47:9   error  Don't use octal: '\\0'. Use '\\u....' instead  no-octal-escape\n   47:29  error  Don't use octal: '\\0'. Use '\\u....' instead  no-octal-escape\n   50:0   error  Missing \"use strict\" statement               strict\n   66:20  error  Expected error to be handled                 handle-callback-err\n   71:26  error  Expected error to be handled                 handle-callback-err\n   89:42  error  Expected error to be handled                 handle-callback-err\n  111:1   error  Missing \"use strict\" statement               strict\n. /CC @kangax @duncanbeevers \n. Nope. And last time I brought it up, @kangax said this is intentional.\nYou can use https://github.com/dtrunk90/grunt-xmlmin for that.\n. How was this file generated?\n. OK, I'm asking for the sake of completeness, because every asset should be able to be generated by everyone without magic :D\n. On a side note, I've been meaning to add a grunt task to generate the assets from the local node_modules or copy them if available. Maybe someone else has more time to do this faster.\n. I'd rather have everything in Gruntfile for consistency. Any PR is welcome :)\n. Seems to work fine here.\n. /CC @jakubpawlowicz: any idea why tests keep failing?\n. Rebased and updated to 3.0.1.\n. @silverwind: sure, but use this branch as a base for your PR and CC me when you are done.\n. @silverwind: Awesome, thanks! I tested the changes locally and work fine.\nI'll merge this in a few minutes.\n. The patch looks good. Not sure if it makes sense, but I'll leave that to you and @kangax to decide <3\n. I added a small patch to have the filenames sorted alphabetically. If anyone has a simpler/better solution let me know.\n. Hmm, perhaps I should just use sort() and thus not relying on manually sorting the array.\n. Well, the previous order wasn't right either. I always feel that alphabetical order makes more sense.\nAnyway, /CC @kangax for feedback.\n. @kangax: Windows doesn't have gzip :/\n. @kangax: are you aware if how to use the cli-table's colors? I'd like to give that a go and see how it works compared to chalk, since I'm a fan of minimal dependencies.\n. OK, I'll go with chalk for the time being since it is better than what we had previously, anyway.\n. 1. The html parser used here is modified.\n2. The PR is already based on old master.\nFor more details wait for @kangax \n. @tschwartz: please squash your patches into one.\nPS. No need to open and close the PR every time.\n. @hadfieldn: please squash your patches.\n. Doesn't seem to be related to us. I restarted the build and it finished fine.\n. I wouldn't hurry for this yet because the new versions still have bugs.\nYou also missed the browser version.\n@kangax: better ping me in the future for lib updates and I'll try to have a look asap.\n. Sorry, didn't see the PR but I already did this in https://github.com/kangax/html-minifier/commit/10b82f5974ba6fbd6527cec08550db2f190c8d7e\n. @genintho: can you fetch and rebase?\n. Maybe that trim call breaks tests because it removes the space after the tag?\n. https://github.com/kangax/html-minifier/compare/genintho-issue381-svg\nOne test fixed; the whitespace after the svg tag failing tests still fail. I don't get why though. I tried everything I could think of at this point.\n. It's already the latest since it's using 2.6.x but I will update everything else.\n. Note @kangax you will need to make a new release for this to be picked up.\n. https://github.com/kangax/html-minifier/commit/ebb0b3df3ae675d2d881ec0775a14c8cd03aa455\n. Why didn't you fix the check to check for undefined instead?\n. Well obviously, but the strict comparison is preferred.\n. Whatever.\n. I just had a quick look and I have to say great job @alexlamsl!\nSince tests are passing, I'd say it's safe to merge and wait a little bit for feedback before releasing a new version @kangax.\n. I'd go with 1.2.0. It's a new feature bit not a breaking change.\n. @alexlamsl: you shouldn't mix unrelated commits. You should merge the unrelated patches to master.\n. @alexlamsl: so just rebase and move the following to a new branch and merge them separately\nhttps://github.com/alexlamsl/html-minifier/commit/49a4fa88ce1900a014bf9bc5d9cba730c5bd5281\nhttps://github.com/alexlamsl/html-minifier/commit/0daf5b4adec7dbf70efb21a4411559248ff7539a\nhttps://github.com/alexlamsl/html-minifier/commit/ceefa9ab822df9485d89cdb7695a429841120877\nhttps://github.com/alexlamsl/html-minifier/commit/247d623777dd8b80381acd518ff22321fa365318\nThen see if you can squash some of the remaining patches when it makes sense.\n. I'd still squash those 2 last patches, but otherwise it's much better than the previous PR :)\n. @alexlamsl: are you sure this change doesn't break things? I notice differences in a project of mine, namely https://github.com/mpc-hc/mpc-hc.org (run it with grunt server). I had to turn on conservativeCollapse to get the same output as with the older version. Look for the spaces around the font awesome icons.\n. I also notice spaces before the end closing bracket, like\nhtml\n<a href=/acknowledgments/ >\nI don't remember this one happening with the old version.\nEDIT: happens with 1.2.0 too.\n. But it's not XML.\n. It's non standard behavior if \"some\" browsers behave like that. And HTML is not XML so the specs are clear. Anyway, that issue is a separate one. I'm more concerned about the whitespace issue I mention https://github.com/kangax/html-minifier/pull/519#issuecomment-199222850.\n. Just any page, but it's clearer in the homepage in the news post icons.\nNote that I have already reverted to the old version in master so in order to see what I mean you will need to set grunt-contrib-htmlmin to ^1.0.0 or 1.1.0.\n. It's not possible to build without Ruby, sorry.\nBut what you see is the issue I described, yes. There might be more, but the font awesome ones were the obvious.\n. I just don't get why we need that custom command to generate it. I'd rather if we kept it official.\n. Sorry for the lack of replies, I was busy :/\nPersonally, I'd like to keep things as vanilla as possible. The problem I see with your solution is that you require a custom step even for node; this shouldn't be needed.\nAnyway, whatever @kangax prefers.\n. Great work! Only issue is with the format you went with for eslintrc. I'm used to the json. Also, are you sure the recommended ones don't conflict with the custom rules you added?\nGenerally, I just specify what I need, but if we can make this cleaner I'm all for it as we keep things simple. Having to go through all of those rules is a p.i.t.a. :/\n. @alexlamsl: apart from my comment, I'd go with .eslintrc and merge if everything passes. We can tweak the config later if needed.\n. No worries, it's a minor thing. :+1: \n. @alexlamsl: you shouldn't have done that, because the migration was a good reason to spot issues like this :P\nAnyway, if you are up to it, try to make the ESLint configuration stricter.\n. Ship it.\nOn Mar 24, 2016 16:51, \"Alex Lam S.L.\" notifications@github.com wrote:\n\nEditted commit message to close relevant issue.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/pull/569#issuecomment-200869868\n. Will you make the switch? :)\n\nBTW I'm thinking we might need to find another parser.\nOn Mar 24, 2016 23:58, \"Juriy Zaytsev\" notifications@github.com wrote:\n\nNext step \u2014 ES6 via babel :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/pull/569#issuecomment-201043316\n. data-foo is affected too.\n. It's not valid HTML. But seriously, don't use IE as a development browser...\n. I too am a Windows user, but it's self-destructive to use a browser that doesn't follow the specs most of the time :P\n\nAnyway, back to this issue. If you view the page source with Firefox, you should see it complains about missing space between attributes. Or just use https://validator.w3.org/ and see for yourself :)\n. One more\nhtml\n<html lang=en class=no-js prefix=\"og: http://ogp.me/ns#\"itemscope itemtype=http://schema.org/WebPage>\n. Oh, yet another one, alt\nhtml\n<img src=https://assets.mpc-hc.org/assets/img/cloudvps_small.a29313ea.png width=100 height=70 title=\"CloudVPS - Private Cloud, Clusters &amp; VPS\"alt=\"CloudVPS logo\">\n. All right, so after discussing it with @alexlamsl it seems it's intended. But we should document that turning this on will result in invalid HTML.\n. :+1: \n. So @alexlamsl @kangax when can we have a patch release?\n. Are you sure none of the added rules are not already covered by the eslint recommended?\n. Looks good to me. I'd just squash the patches and merge.\n. Maybe keep inside? It was used in more places I believe.\nWe should also ignore the Google Analytics snippet.\n. /CC @kangax for review and new release.\n. One thing I know for sure, is that the web files will have issues.\nGitHub pages run jekyll s without any other command. This means, we will have assets/master.js with require in it.\n. I know I tested it too. No idea how it's working.\nOn Mar 25, 2016 13:30, \"Alex Lam S.L.\" notifications@github.com wrote:\n\nDo you mean http://kangax.github.io/html-minifier/ ?\nI did test it after merging #569\nhttps://github.com/kangax/html-minifier/pull/569 & it seems to be\nworking...\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/585#issuecomment-201245515\n. So it's because the dist files are created with browserify?\n. @alexlamsl: what options did you use? The only reason I can think of is will peavy having a bug and breaking the <pre> code.\n. Yeah, told you, it's the most logical explanation since it has many code snippets.\n. Looks good to me, hoping for a completely automated solution in the future which will grab the pages each time :)\n. Thanks!\n. I will check it out later. We had some issues.\nOn Apr 6, 2016 01:20, \"Juriy Zaytsev\" notifications@github.com wrote:\n/cc @XhmikosR https://github.com/XhmikosR\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/pull/601#issuecomment-206007421\n. Unfortunately, grunt-exec isn't updated got Grunt 1.0.0, so can break things.\n. Also, we shouldn't need grunt-cli anymore as a devDependecy.\n. As a side note @alexlamsl you should branch on this repo and not on your fork.\n. :shipit: \n. Doesn't 2.0.0 make more sense?\n\nI'll push a branch in grunt-contrib-htmlmin to test the latest html-minifier master.\n. I'm thinking with all these options, we'll need presets soon :/\n. We haven't broken something that we known of as of the time of writing. But since the options are disabled by default, I guess we can still just bump minor version only.\n. OK, I tested it with \"grunt-contrib-htmlmin\": \"git://github.com/gruntjs/grunt-contrib-htmlmin.git#html-minifier-gh-pages\", everything looks good using decodeEntities, sortAttributes and sortClassName.\nI'd feel better if I could test with more projects, but I don't have a lot of time so if someone else could verify the output is the same that would be great.\n. @kangax: BTW, you should give @alexlamsl npm rights too since he can already make releases.\n. BTW @alexlamsl the links in index.json might not be up to date. I updated them in README.md some time ago and forgot about this.\n. I think I updated all of them in README.md. Only http://kangax.github.io/compat-table/es6/ and https://github.com/kangax/html-minifier are left.\n. We could remove that, and add something else. Maybe CNN BBC or something?\nOn Apr 9, 2016 12:14, \"Alex Lam S.L.\" notifications@github.com wrote:\n\nOuchies - MSN gives me this:\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE HTML PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">\n\n...\nI've almost forgotten all about XHTML's existence [image: :cold_sweat:]\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/612#issuecomment-207750656\n. Cool, feel free to add those and normalize the URLs while at it :)\n. 1.3.0\n\n\n1.4.0\n\nNo other change in code, just the space behavior change in html-minifier.\n. So apparently, the behavior now is what it was before, in the original files.\n. Yeah agreed.\nOn Apr 16, 2016 23:51, \"Juriy Zaytsev\" notifications@github.com wrote:\n\nLet's do major to play it safe.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/pull/633#issuecomment-210899796\n. @alexlamsl: not sure when I'll be able to test this, might be tomorrow.\n. Well, for one, that is why you wait for the CI builds to finish.\n\nBut anyway. ESLint is a devDependency. Everything else will still work. So I'd say revert the change for now.\nAnd when it's really the time to drop 0.10, it should be accompanied by a major version bump.\n. Thanks for looking into it. I noticed it accidentally the other day. Do you\nknow which version broke it?\nOn Jul 28, 2016 20:51, \"Alex Lam S.L.\" notifications@github.com wrote:\n\nOh root cause is actually quite straightforward - default value for\nignoreCustomComments has /^!/, which when overrode trips \nhtmlmin:ignore  replacements.\nI'll sleep on this and come up with a fix. Thanks for spotting this\n@XhmikosR https://github.com/XhmikosR\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/696#issuecomment-235972331,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVVtVEU45b-DgdNus--bSVUM0JuEkDvks5qaOwlgaJpZM4JWI78\n.\n. Damn it was broken for so long :/\n\nOn Jul 28, 2016 21:06, \"Alex Lam S.L.\" notifications@github.com wrote:\n\nI haven't tested explicited but b75a420\nhttps://github.com/kangax/html-minifier/commit/b75a4207b56abd8d0f6fda7057e1ff45144d92e0\nlooks like the culprit, so 2.0.0 would be the last version that works,\nand 2.1.0 onwards are broken...\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/696#issuecomment-235976678,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVVtflLxdMTa82dFk7FfDVXPBQD5XHfks5qaO-JgaJpZM4JWI78\n.\n. Thanks! I'll try it in a couple of hours and let you know.\n. @alexlamsl: confirmed, it fixes my use case.\n. @alexlamsl: will you cut a new patch release with this fix?\n. No, I think that's for now. Thanks!\n. Note that screwIE8 is enabled by default in v2.0.0. So if you care about IE8 you need to set it to false.\n. There's nothing to check :p\n\nIf you want IE < 9 compatibility just set the option to false.\n. Yup, it already fails on IE8 so I guess just ignore it.\nSCRIPT438: Object doesn't support property or method 'keys' \nhtmlminifier.min.js, line 7 character 2382\nSCRIPT5007: The value of the property 'require' is null or undefined, not a Function object \nmaster.js, line 4 character 3\n. I don't recall doing this on purpose, but sounds like something I'd do. The reason for this is pretty simple. clean-css's advanced optimizations break stuff numerous times. So I went with the safe solution. And you shouldn't change this IMO.\n. I haven't looked v4. Do they have advanced optimizations disabled by default?. @alexlamsl: you should revisit this. Lowecase doctype does save a few bytes and doesn't cause any issues.. Hey, it's no my word, it's the community's word ;) You can never beat such extended testing.. But when the option to use the HTML5 doctype is enabled, then that case isn't valid, is it? Or maybe I'm missing something in regards to XHTML since I've never had the need to use such thing.. You can always replace it yourself if you think it's better and make a PR.\n. Or actually, just push it since @duncanbeevers has push rights (I forgot about it) :p\n. Concat shouldn't be here.\n. Can't we just transpile the browser version? I have no experience with ES6, but it should be doable judging by other projects.\n. I mean, we use Babel in Bootstrap v4-dev.\n. It's just feels that this change is pretty big since everything will need to be rewritten.\nMaybe wait a little more?\n. I'd suggest that we specify the environment where needed and not globally.\n. We can go with outside instead.\n. I wouldn't go with smart.\n. Maybe remove or align the lines before +.\n. Just add an ignore for that file then.\n. I don't mind which one, I just thought we were using outside already. So, just keep it as you have it here.\n. It was aligned before, no big deal.\n. This is a browser file and strict is fine in the function.\n. Can't we move this before the end body tag?\n. Have you just tried setting node to false without turning off strict?\n. Weird, I'd expect it to handle the browser case. How about strict: [2, \"function\"]? Can you test if it works OK for both cases? Otherwise there is the safe option too.\n. If that's the case please just add eslint ignore around the snippet.\n. Then keep node...\n. :+1: \n. I wouldn't name the task fork...\n. Do we have one line statements? If not, I'd remove it.\n. Why do you use nofunc? In theory we shouldn't have any undefs?\n. Maybe add after even though it's default, it will be clear.\n. OK, just put it back then.\nOn Fri, Apr 8, 2016 at 7:28 PM, Alex Lam S.L. notifications@github.com\nwrote:\n\nIn .eslintrc.json\nhttps://github.com/kangax/html-minifier/pull/614#discussion_r59051996:\n\n\"no-unused-expressions\": \"error\",\n-    \"no-use-before-define\": [\n-      \"error\",\n-      \"nofunc\"\n\nThis is what happens without nofunc:\nsrc/htmlminifier.js\n   267:22  error  'minifyJS' was used before it was defined            no-use-before-define\n   285:14  error  'minifyURLs' was used before it was defined          no-use-before-define\n   298:14  error  'minifyCSS' was used before it was defined           no-use-before-define\n   302:12  error  'isMetaViewport' was used before it was defined      no-use-before-define\n   346:21  error  'minify' was used before it was defined              no-use-before-define\n   354:14  error  'minify' was used before it was defined              no-use-before-define\n   729:8   error  'minify' was used before it was defined              no-use-before-define\n  1157:13  error  'joinResultSegments' was used before it was defined  no-use-before-define\nsrc/htmlparser.js\n   90:30  error  'joinSingleAttrAssigns' was used before it was defined  no-use-before-define\n  168:42  error  'parseEndTag' was used before it was defined            no-use-before-define\n  174:29  error  'parseStartTag' was used before it was defined          no-use-before-define\n  177:11  error  'handleStartTag' was used before it was defined         no-use-before-define\n  194:26  error  'parseStartTag' was used before it was defined          no-use-before-define\n  232:7   error  'parseEndTag' was used before it was defined            no-use-before-define\n  242:5   error  'parseEndTag' was used before it was defined            no-use-before-define\n  271:7   error  'parseEndTag' was used before it was defined            no-use-before-define\n  276:9   error  'parseEndTag' was used before it was defined            no-use-before-define\n  281:7   error  'parseEndTag' was used before it was defined            no-use-before-define\n? 18 problems (18 errors, 0 warnings)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/pull/614/files/4a3bf237a2c9830457cbc6edad9db1a245eb0c90#r59051996\n. yoda :p\n. \n",
    "clakech": ":+1: :scream: \n. ",
    "glassesmouse": "+1 Having the same issue with htmlmin task in grunt.\n. ",
    "jonathan-fielding": "I second this, would be awesome if we had this feature\n. ",
    "johannesjo": "Yeah me too. Shouldn't be too hard to implement.\n. Oh. Sorry, didn't see that. Thank you very much!\n. ",
    "pzi": "+1\n. ",
    "Shuky": "+1\n. ",
    "nancoder": "+1\n. ",
    "hutber": "Awesome :+1: Looking forward to when this is working :) Turning off for now.\n. ",
    "dalgard": "Looks reasonable - awesome.\n. The thing is easily remedied by changing the regex on line 44 in htmlminifier.js to this:\n/(?:<!)?\\[(?:if[^\\]]+|endif)\\]/\n. It seems I didn't have the newest version - I have asked grunt-contrib-htmlmin to update. Sorry for the trouble, please don't change anything.\n(I can see some problems with the code above; mixing my approach with the one in 0.5.2 would need a few changes, but that is a moot point :))\n. ",
    "evilpie": "This might also be interesting. Most of the boolean attributes in Firefox. http://mxr.mozilla.org/mozilla-central/search?string=attribute+boolean&regexp=1&find=%2Fdom%2Fwebidl&findi=&filter=^[^\\0]*%24&hitlimit=&tree=mozilla-central (Still misses DOMWindow or something)\n. For download the value is an optional filename. So just download still forces a download of the resource specified by href. (I implemented this feature in Firefox)\n. ",
    "jefffis": "How's about the scoped attribute for the style tag?\n. I think download needs a string pointing to the actual downloadable file.\n. Ahh, good to know -- thanks for the tip =)\n. ",
    "tobaco": "download ?\n. ",
    "ahmedelgabri": "autocorrect & autocapitalize?\n. ",
    "ditman": "What about autocomplete?\nHTML5 Spec: The autocomplete attribute\n(You'd probably need to inspect the parent form to evaluate properly the \"default\" (empty) state, so not sure that you'd want to minimize this :disappointed:)\n. ",
    "icoloma": "autocomplete is moving to something other than on / off, so not sure if it's a good idea to add it to the list. OTOH, that could happen with almost any boolean attribute.\n. ",
    "freddyb": "sandbox (for iframes) has  a default value, when left blank. does this count as boolean by your definition?\n. ",
    "mckamey": "I was searching for a similar list when I came upon this discussion. I thought you might benefit from an updated list. I started with @mathiasbynens' idea to grep the spec but modified it to only look within the IDL blocks and look at the single-page spec. Then I stripped all the markup and removed every readonly attribute (since these can't be set via markup). I sorted / deduped and this is what I am seeing. Note that it includes a few <video> and <audio> tag attributes which aren't present in your list as of 10 months ago.\n$ curl -s \"http://www.w3.org/TR/html51/single-page.html\" | grep \"attribute boolean\" > boolean.txt\nallowFullscreen\nasync\nautofocus\nautoplay\nchecked\ncompact\ncontrols\ndeclare\ndefault\ndefaultChecked\ndefaultMuted\ndefaultSelected\ndefer\ndisabled\ndraggable\nenabled\nformNoValidate\nhidden\nindeterminate\ninert\nisMap\nitemScope\nloop\nmultiple\nmuted\nnoHref\nnoResize\nnoShade\nnoValidate\nnoWrap\nopen\npauseOnExit\nreadOnly\nrequired\nreversed\nscoped\nseamless\nselected\nsortable\nspellcheck\ntranslate\ntrueSpeed\ntypeMustMatch\nvisible\nYou will probably want to lowercase these for your purposes. Thanks for the starter ideas.\n. Shouldn't that be as easy as cutting and pasting over the top of the current list?\nfunction isBooleanAttribute(attrName) {\n    return (/^(?:allowfullscreen|async|autofocus|autoplay|checked|compact|controls|declare|default|defaultchecked|defaultmuted|defaultselected|defer|disabled|draggable|enabled|formnovalidate|hidden|indeterminate|inert|ismap|itemscope|loop|multiple|muted|nohref|noresize|noshade|novalidate|nowrap|open|pauseonexit|readonly|required|reversed|scoped|seamless|selected|sortable|spellcheck|translate|truespeed|typemustmatch|visible)$/).test(attrName);\n}\nThen just verify all looks good with diff before committing.\n. If you prefer the list:\n[ ] allowfullscreen\n[ ] async\n[ ] autofocus\n[x] autoplay\n[ ] checked\n[ ] compact\n[x] controls\n[ ] declare\n[ ] default\n[x] defaultchecked\n[x] defaultmuted\n[x] defaultselected\n[ ] defer\n[ ] disabled\n[x] draggable\n[x] enabled\n[ ] formnovalidate\n[ ] hidden\n[x] indeterminate\n[ ] inert\n[ ] ismap\n[ ] itemscope\n[x] loop\n[ ] multiple\n[ ] muted\n[ ] nohref\n[ ] noresize\n[ ] noshade\n[ ] novalidate\n[ ] nowrap\n[ ] open\n[x] pauseonexit\n[ ] readonly\n[ ] required\n[ ] reversed\n[x] scoped\n[ ] seamless\n[ ] selected\n[ ] sortable\n[x] spellcheck\n[x] translate\n[ ] truespeed\n[ ] typemustmatch\n[x] visible\n. ",
    "partap": "Just rechecked... <ng-repeat> was a bad example...I'm not using it as a tag (only as an attribute)\n...but I did reproduce the behavior with <ng-include>\nIf I have this in my source:\nhtml\n<ng-include src=\"template\"></ng-include>\nit turns into:\nhtml\n<ng -include=\"\" src=\"template\"></ng>\nHeh, looks like GitHub's syntax highlighter doesn't like dashes in the tag name, either...\n. one more update:  Angular allows an alternative XMLish syntax: <ng:include>, but minifier has the same problem...\nthis:\nhtml\n<ng:include src=\"template\"></ng:include>\nminfies into:\nhtml\n<ng :include=\"\" src=\"template\"></ng>\n. ",
    "sndrs": "@sparanoid nice! \n@kangax added these tests - but what i don't understand is why removing tags from the collapseWhitespaceSmart() tags array and rerunning doesn't cause the tests to fail...?\n. sorry - 08aa320 wasn't right. but the tests still don't fail if the tags array is changed e.g. remove a tag from it...\n. @kangax i wasn't - you're right. running that jshint command still passes the test, even if the tag is ommited from the minifier source, but included in the test. \nif it's omitted from the minify(), is it just parsed as just text in the test? so that <q>blah</q> is parsed like <qwe>blah</qwe> would be?\n. @kangax I'm sorry - yeah that wasn't clear! Ok:\n- exclude q from tags array in collapseWhitespaceSmart() (i.e. [...'mark', 's',...]) but include in the test (i.e. [...'mark', 'q', 's',...]).\n- jshint src/htmlminifier.js src/htmllint.js passes.\n- cat src/htmlparser.js src/htmlminifier.js src/htmllint.js > dist/all.js, no problems.\n- node test.js passes i.e. <p>foo <q>baz</q> bar</p> passes through in the test as  <p>foo <q>baz</q> bar</p>  just fine. \nbut where i've been using this with grunt, blah <q>hi</q> blah was being cinched to blah<q>hi</q>blah, and making this same change (adding q to the tags array) manually in dist/all.js in grunt-contrib-htmlmin fixed it. \ndoes that make sense? i must have misunderstood the tests, but they seem right to me?\n. @kangax ok - sussed the tests: I wasn't passing the collapseWhitespace option. \nhowever, it revealed an issue with non-closing tags like img though, so i've made a change for that...let me know if that's beyond the scope of this pull request and i'll remove it.\ninput would also apply here too i'd say? should be treated like img?\n. @sparanoid that seems a good list to work with, but <br> and <wbr> for example don't seem like they would need to maintain space? let's see if @kangax has any thoughts.\ncurrently, the minifier list omits the following tags that are present in the moz list:\n- <cite>\n- <dfn>\n- <abbr>\n- <data>\n- <time>\n- <var>\n- <samp>\n- <ruby>, <rt>, <rp>\n- <bdi>\n- <bdo>\nwhich all seem like candidates to me, and then\n- <br> \n- <wbr>\nwhich don't.\n. Yeah I wondered about the lists in parser. I'm not sure it's just whether an element is inline, though, that's the issue? For example, a script tag wouldn't need any space around it. I'd expect a minifier to remove all white space there I think. Similarly basefont, for example. I feel like maintaining a manual list is the best move here, based on what you'd expect to happen during minification. \nI think this pertains to images (and some other empty elements) too. I totally agree a list of empty elements is better option than just a quick check for an image. But as with basefont, I wouldn't expect base to preserve a maximum of 1 space around it, but removing  all space from around an img could affect layout, which I don't think I'd expect e.g. if\n<p>Here is a tiny little image <img height=\"11\" width=\"11 /> I made.</p>\nbecame\n<p>Here is a tiny little image<img height=\"11\" width=\"11 />I made.</p>\nI don't think we should rely on CSS to ensure space around an in-text img - the HTML should work without styles. \nThat said, something like\n<p>Here a tiny little image \n    <img height=\"11\" width=\"11 /> \nI made.</p>\nshould definitely be condensed to \n<p>here a tiny little image <img height=\"11\" width=\"11 /> I made.</p>\nimo.\nDoes that make sense? \n. This was just needed for linting.\n. ",
    "zcorpan": "Removing the ! means that minifying again would drop the comment, which seems like a bad idea.\n. It seems to me this would be implemented by inserting an else if here https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js#L402\n. ",
    "blackjid": "I just found out the for some reason the file was saved as binary so, that was really the problem, not about the leading dot. Galileo was wrong this time... :(\nNow that the file is recognised as text and not as binary everything works like charm. Weird..!\n. ",
    "ampgcat": "It seems to be choking around line 116 where it says\nvar str = (age < 1) ? \"baby\" :\n    (age < 5) ? \"toddler\" :\n    (age < 18) ? \"child\": \"adult\";\nThe following is the error message I get from grunt.\nC:\\test>grunt\nRunning \"htmlmin:dist\" (htmlmin) task\nWarning: index.html\nParse Error: < 1) ? \"baby\" :\n    (age < 5) ? \"toddler\" :\n    (age < 18) ? \"child\": \"adult\";\n\nwhich will yield the following report:\n...\nI'm using removeComments: true, collapseWhitespace: true\nI can send you the whole index.html etc. if you need..\n. OK. Just sent it to your gmail account.\n. Mm. I just copy&paste'd the whole html using chrome and IE and pressing 'Minify' didn't return anything in the lower box for me.\nIf I copy&paste a simple html, i.e.\n<!DOCTYPE html>\n\n\nit does return someting in the lower box.\nThis makes me think it IS failing.\nDo you mean you are getting something in the lower box?\n. ",
    "kotnik": "Since we heavily use custom AngularJS directives, we got hit with this as well. If html-minifier supported leaving closing slashes, we'd be able to use singleton tags and have nicer looking HTML.\n@kangax would it help if I provide pull request for this, or you are just reluctant to add this option?\n. ",
    "albell": "+1. Perhaps break out removing svg closing tags as an option?\n. Yep, it looks like turning off \"minifyJS\" preserves the closing script tag. Still, this could be a stumbling block for users. These one-liner snippets are typically left inline to avoid an http request. Maybe the integrated JS minifier should preserve them by default? Just a thought.\n. ",
    "nikgraf": "@kangax need some help here? Exposing it as separate npm module would be nice & then you could add it as dependency for the minifier.\n. What about you create a repo or an organization with a repo and I will do some pull requests?\n. ",
    "Lalem001": "This feature would be very helpful in my latest project. :+1: \n. I am working with handlebars. Open and close tags are {{ ... }} and {{{ ... }}}.\nSimplest regex pattern I can think of, that matches both cases, is:\njs\nignoreStartTag: /\\{{2,3}/,\nignoreEndTag: /\\}{2,3}/\nFrom what I can tell, a closing tag of 3 characters might present a problem.\n. Apologies, I should have clarified that the issues I am having are occurring when using handlebars for dynamic tag attributes. For instance:\nhtml\n<button {{#if disabled}}disabled{{/if}}>...</button>\nAs you can see even github's syntax highlighting marks it as invalid html.\nIf the {{...}} occurs within the attributes quoted value, its not a problem:\nhtml\n<button class=\"{{#if primary}}primary{{/if}}\">...</button>\nFurthermore if the {{...}} occurs within plain text it is usually not a problem either:\nhtml\n<div>{{ example }}</div>\nPerhaps I jumped the gun in thinking that custom syntax could resolve this issue? Would this need to be handled a different way?\n. ",
    "Thomasdezeeuw": "Any progress on this? I could really use this.\n. ",
    "broox": "Has there been any progress on this? I was just trying to minify some mustache templates that may contain markup like...\n<div class=\"name\">{{name}}</div>\n{{#address}}\n    {{>addressTemplate}}\n{{/address}}\n{{^address}}\n    {{>addressFormTemplate}}\n{{/address}}\nbut minify just seems to just hang with that input.\n. @kangax I forgot to follow up on this, but later realized that html was silently failing on one of the included templates.\n. ",
    "KubaBest": "Hi, what is the status of support for custom tags like \"{{\" and \"{%\"?\n. ",
    "pilwon": "@kangax Yeah and my suggestion was to point that to ./src/htmlminifier.js instead. For some reason require('./htmlparser') in dist/all.js fails to work.\n. @kangax,\nProblem\n\nError: module \"./htmlparser\" not found from \"./node_modules/rhtml/node_modules/html-minifier/dist/all.js\"\n\nSolution\nSet main in package.json to actual source file (./src/htmlminifier.js). Note that main variable set in package.json is just an entry point for your module. Node.js WILL correctly handle file dependencies via require(...) so all 3 required files will be used.\nFor whatever reason you pointed to the minified/combined file (./dist/all.js) and this would have been fine as long as you packaged it correctly. However for some reason global.HTMLParser doesn't get set properly in some node.js environment and require('./htmlparser') fails to work. Therefore I see the above error message.\nAfter making the suggested change, it no longer outputs an error message.\n. @kangax I assumed you knew well about how package.json worked since your module already contained customized main value when you could have left it with the default index.js. Explaining only because you asked -- I was simply referring to the error message (require('./htmlparser') fails to work) that brought me to open this issue in the first place, since you didn't bring the actual problem part into discussion.\nSo I updated my last comment and left only the problem-solution part. Let me know if you need more clarification to understand the problem and the suggestion. Thanks for sharing your project-\n. ",
    "cedricziel": "Any progress on this issue?\n. ",
    "evanrs": "I have experienced the same error. I followed the solution given by @pilwon but found there were no changes to be made. To be clear, I am using rhtml@1.0.0, which points to html-minifier@0.5.4.\nThe error occurs only when passing in a variable as the path reference and succeeds only when passing in a string literal. Is this the expected behavior?\n. > Can I ask why you would need to browserify it?\nIncluding html directly in your build is a boon for app responsiveness and code organization. For example, Angular changes views and adds directives before completing a template request. This lends itself to a clunky presentation where some or all of the page may be missing momentarily. Putting the template in the build increases the cost of the first download, but drastically improves the rest of the experience. \nIt's helpful for organizing modular code. var template = rhtml('./settings.html') isolates the concerns of the code to that folder. The alternative {template: '/app/account/user/settings.html'} clutters the code with brittle references that limits reuse.\n. ",
    "TimBeyer": "This issue still exists, if you browserify html-minifier.\nThe relative import does not work for obvious reasons (the file is not in the dist folder) and bundling fails.\n. He's got a point though, I probably should minify the templates during the build stage instead of bundling them unminified and minifying client-side, which seems kind of pointless.\nI needed it because a html to virtual-dom converter seemed to have problems with whitespace text nodes, which I wanted to get rid of using html-minifier\nI've solved it in a different way now though.\nStill, I think this is a bug and should be fixed. Who knows, maybe someone wants to build a client-side html minification service or something like that where using it with browserify makes more sense.\n. ",
    "kkotak": "Hi guys, this still seems to be the problem. Any updates?\n. ",
    "PunkChameleon": "+1 - that sounds fantastic. It can default to not minify anything if none are listed, so it'd only effect those who would want or need it\n. ",
    "ain": "Good request. Vote.\n. I'm adding a very practical illustration here:\nhtml\n<!-- build:js /scripts/main.js -->\n    <script type=\"text/javascript\" src=\"../../scripts/jquery.flexslider.js\"></script>\n    <script type=\"text/javascript\" src=\"../../scripts/functions.js\"></script>\n<!-- endbuild -->\nwhere using negation is not an option as it would break the build:\nhtml\n<!--! build:js /scripts/main.js -->\n    <script type=\"text/javascript\" src=\"../../scripts/jquery.flexslider.js\"></script>\n    <script type=\"text/javascript\" src=\"../../scripts/functions.js\"></script>\n<!--! endbuild -->\n. ",
    "mgcrea": "Need this too, in my case for docs where some partial code should not be minified.\n. ",
    "Globegitter": "Yeah, it would be really nice if there was a valid html way for ignoring blocks of html. Making things a bit more 'complicated' for one of my uses.\n. ",
    "kalinichenko": "Maybe I got it wrong. In what way should I wrap my bunch of code? I tried that way\n<!-- htmlmin:ignore -->\n<td class=\"check widescreen\"><input type=\"checkbox\" <%= check %> /><span class=\"checkbox\"></span></td>\n<!-- htmlmin:ignore -->\nbut still got a parse error. \nThanks in advance for more comprehensive explanation.\n. ",
    "jordanburke": "Seeing the same problem as @kalinichenko \n. ",
    "S3ak": "+1 @kalinichenko \n. ",
    "icd2k3": "+1 @kalinichenko - same problem\n. This doesn't work for me\nfor example\n<div <%= active ? 'class=\"active\"' : 'class=\"inactive\"' %>>\nwith:\ncustomAttrSurround: [\n    [/<%\\=\\s+/, /%>/],\n    [/<%\\-\\s+/, /%>/]\n]\nstill hangs indefinitely. See https://github.com/kangax/html-minifier/issues/293\n. Hey, thanks for the reply Duncan!\nYes things can definitely be rewritten this way, but there's a couple problems...\nFor one, this is a huge existing application so going through all the templates and rewriting all the places where inline/nested ejs tags are used would be a large task. I would also have to instruct my devs not to do this anymore even though it's allowed in ejs templates.\nAlso, there are times when using nested/inline ejs tags is beneficial. For example:\n<img <%= loadLater ? 'data-src=\"imgSRC\"' : 'src=\"imgSRC\"' %> />\nRewriting it to work with htmlmin would make it longer\n<img data-src=\"<%= loadLater ? 'imgSRC' : '' %>\" src=\"<%= loadLater ? '' : 'imgSRC' %>\" />\nIn the meantime I've been able to use htmlcompressor without error, but htmlmin provides better compression.\n. +1 similar issue here: https://github.com/kangax/html-minifier/issues/293\n. Sorry for all the title changes, wanted to be as descriptive as possible\n. ",
    "abhikp": "+1, except removeComments: false doesn't seem to fix it.\n. ",
    "stereokai": "That's what I said, I'm still getting a warning :)\n@kangax to the rescue!\n. Well, every day you learn something new. I didn't know there were so many restrictions within the HTML comment. I also didn't know about the IE8 comment tag, but quirksmode confirms it exists, and I also tested it myself. However, the IE8 <comment> tag will not work, because:\njavascript\n        // Comment:\n        if ( html.indexOf(\"<!--\") === 0 ) {\n          index = html.indexOf(\"-->\");\nFrom: https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlparser.js#L70-L72\n@kangax So perhaps it would be possible to add <comment> and </comment> to the parser?\n. @nborko first off, appreciate your elaborate reply. Yeah, I did try putting the build comments outside the conditional - I wrote in the original post: \"Nesting the comments the other way around results in the IE conditionals getting dropped from the minified HTML file.\" - and the IE conditionals are of course the purpose of this issue.\nBy \"configure manually\", do you mean having separate build tasks for IE < 9 and the rest?\n. That is a good solution. When you say \"works as expected\", what do you mean?\n. @nborko \"so obviously that task has to run before html-minify\" - which one? I am confused :)\n. That's interesting, because looking at my gruntfile, usemin is the last task, but html-minifier is not there. I believe it is a dependency of usemin:\nJavascript\n   ['clean:dist',\n    'useminPrepare',\n    'concurrent:dist',\n    'autoprefixer',\n    'concat',\n    'copy:dist',\n    'cdnify',\n    'ngmin',\n    'cssmin',\n    'usemin']\n. What fork am I using? I'd like to look it up to know what exactly do I have to change now in the Grunt workflow...\n. I am not sure either. The guy that scaffolded the project I'm working on was only working here for a week, and he left long ago. I don't know what Yeoman generator he used. There are only 20 results in the Google machine for \"grunt-contrib-usemin\". I have a hunch you might be right :)\nI'll give it a go tomorrow and let you know. Thank you for your time!\n. ",
    "nborko": "Strictly speaking, it isn't valid HTML since comment text must not contain two consecutive U+002D HYPHEN-MINUS characters (see http://www.w3.org/TR/html5/syntax.html#comments).  Since conditional comments only work in IE anyway, you could use the non-standard <comment> tag instead.\n. I wouldn't suggest adding special cases for non-standard tags, but I also didn't consider that grunt-usemin has a strict requirement to use proper HTML comments, so my suggestion is probably not helpful in that case anyway.\nTreating conditional comments as special at the parser level (before https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlparser.js#L70-L80) rather than at the handler level after being identified as a comment (https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js#L403-418) is probably a better solution, since semantically they're not really comments.  In that case, you'd consider <!--[if to be an opening tag, and [endif]--> to be a closing tag for parsing purposes.  However, that's going to add complexity to the parser and additional handler requirements for something that isn't even supported in standards mode on IE 10+.  And it still isn't valid HTML.\nHave you tried putting the build comments outside the conditional?  If that doesn't work, I would petition the grunt-minify project to recognize it, because it's the only way to get valid HTML, and in the meantime I would suggest in this instance just to configure the concat and uglifyjs tasks manually in the gruntfile.\n. When I plug in the following code:\n<!-- build:js scripts/ieshims.js -->\n<!--[if lt IE 9]>\n<script src=\"bower_components/es5-shim/es5-shim.js\"></script>\n<script src=\"bower_components/json3/lib/json3.min.js\"></script>\n<![endif]-->\n<!-- endbuild -->\nat http://kangax.github.io/html-minifier/, it works as expected.  I don't know what the output of grunt-usemin is before sending it through html-minifier, so that may be the culprit.\nBy \"configure manually,\" I mean don't use the grunt-usemin directives in the HTML, and instead build scripts/ieshims.js with a normal grunt task, e.g.:\n{\n  concat: {\n    '.tmp/concat/scripts/ieshims.js': [\n      'bower_components/es5-shim/es5-shim.js',\n      'bower_components/json3/lib/json3.min.js'\n      ]\n  },\n  uglifyjs: {\n    'scripts/ieshims.js': ['.tmp/concat/scripts/ieshims.js']\n  }\n}\nHTH.\n. <!--[if lt IE 9]><script src=\"bower_components/es5-shim/es5-shim.js\"></script>\n<script src=\"bower_components/json3/lib/json3.min.js\"></script><![endif]-->\nThat's the correct minified output of the HTML.  Of course, that will no longer work with grunt-usemin, so obviously that task has to run before html-minify.  Further investigation shows there is a test case just like yours in the grunt-usemin source tree (https://github.com/yeoman/grunt-usemin/blob/master/test/fixtures/block_with_IEconditionals_within.html), so it seems like this should all work.\n. @stereokai In other words, your files need to be processed by the grunt-usemin processes before getting passed through html-minify, which should be the last step in the build process (or very nearly so).\n. OK, I think I realize the disconnect.  I didn't read closely enough and just assumed you were using https://github.com/yeoman/grunt-usemin, but I see you are using an (old) fork.  Try using the original (and currently maintained) project at that URL.\n. You stated you are using grunt-contrib-usemin (apparently at https://github.com/tinganho/grunt-contrib-usemin), which is a fork of grunt-usemin (at https://github.com/yeoman/grunt-usemin).  I'm not sure how you got to your current build environment, but you'd want to delete grunt-contrib-usemin from your node_modules and either use npm or manually install grunt-usemin.  It should work without any changes to your config file(s).\nYou should probably back up your current build configuration before deleting anything.\n. ",
    "stieler-it": "My proposed fix in PR https://github.com/kangax/html-minifier/pull/93\n. As requested I added a unit test that fails in current implementation and works with the fix. However, I had to change an already existing unit test: This test was correct and actually it would be possible to strip quotes if the attribute containing a trailing slash is not the last one. I assume that not breaking semantics has higher priority than saving some bytes, though.\n. ",
    "remcohaszing": "Since in most cases these attributes are JavaScript, why not simply pass these values to uglify? It has been implemented for on-* attributes, so it could be optional to pass a list of custom uglifiable attributes through the options.\n. This is not my own code. I noticed the angular-ui team did not minify their angular templates, so I decided to try it myself. It did make the tests fail.\n@jeremypeter Your fix does work, but it shouldn't make a difference.\n@kangax I'm new at this, so correct me if I'm wrong, but using a backslash is not the correct way to escape quotes in html.\nWhen trying to minify the following template, even html-minifier throws a Parse Error:\nhtml\n<div class=\"\\\" \"></div>\nThe error is triggered by using an escaped quote followed by a space.\n. It's an AngularJS directive (https://material.angularjs.org/latest/api/directive/mdListItem).\nI think custom elements are part of HTML. Otherwise several popular frameworks, such as AngularJS wouldn't be HTML compatible.\nI do wish to remove optional tags, such as <head> and <body>.\n. The ui-sref directive does add an <a> tag at runtime. I'd say this looks like a bug in AngularJS' HTML parser instead.\nI'll investigate this further later today.\nI have no clue how collapseWhitespace is related, but yes, I'm using it.\n. Thanks! That online version seems to work as expected.\nI've created a simple example showing that browsers seem the cause for this issue, not AngularJS. I validated this by opening a file with the following contents and inspecting it using Firefox and Chrome.\nhtml\n<!doctype html>\n<html ng-app=\"myApp\">\n  <body>\n    <h2>Regular</h2>\n    <div ng-include=\"'template.html'\"></div>\n    <h2>Minified</h2>\n    <div ng-include=\"'minified.html'\"></div>\n    <h2>No closing tag</h2>\n    <div ng-include=\"'minified-no-closing-p.html'\"></div>\n    <h2>Browser generated</h2>\n    <div id=\"browser-generated\"></div>\n    <script type=\"text/ng-template\" id=\"template.html\">\n      <custom>\n        <p>Regular 1</p>\n      </custom>\n      <custom>\n        <p>Regular 2</p>\n      </custom>\n      <custom>\n        <p>Regular 3</p>\n      </custom>\n    </script>\n    <script type=\"text/ng-template\" id=\"minified.html\">\n      <custom><p>Minified 1</p></custom><custom><p>Minified 2</p></custom><custom><p>Minified 3</p></custom>\n    </script>\n    <script type=\"text/ng-template\" id=\"minified-no-closing-p.html\">\n      <custom><p>Minified no closing p 1</custom><custom><p>Minified no closing p 2</custom><custom><p>Minified no closing p 3</custom>\n    </script>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.0/angular.js\"></script>\n    <script>\n      angular.module('myApp', []);\n      document.getElementById('browser-generated').innerHTML = '<custom><p>Minified no closing p 1</custom><custom><p>Minified no closing p 2</custom><custom><p>Minified no closing p 3</custom>';\n    </script>\n  </body>\n</html>\nWhen all custom tags are replaced with divs, it seems to render fine. Thanks for fixing this so fast! :smile_cat: \n. ",
    "ahoereth": "Whats the status on this one?\n. ",
    "anymos": "+1, no a big priority but could be a good cherry on the cake to have\n. ",
    "jessehattabaugh": "Just to give you a couple more use cases for this;\nKnockout's data-bind attrs are essentially JSON as well. I'm not sure they recommend it but breaking them into new lines and indenting sure does make them easier to read.\n<div data-bind=\"\n  css: {\n    fadeIn: selected(),\n    fadeOut: !selected()\n  },\n  visible: function () {\n    // yes sometimes there are function literals\n    return pageWeAreOn() == 'home';\n  }\n\">foo</div>\nAlso, style attributes really benefit from newlines.\n<div style=\"\n  color: red;\n  font-size: 100em;\n\">bar</div>\n. Thanks!\n. What's the plan here? If we change package.json to {main: 'src/htmlminifier.js'} and leave grunt->concat->dist/htmlminifier.js alone will that fix Browserify, or break any other package systems? Or does src/htmlminifier.js need to be changed to support Browserify to replace concat? I'm kinda stuck here.\n. I don't care whether or not you use concat. \nWhat I care about is that when I require(\"html-minifier\") and bundle my code with Browserify, it reads in your concatted ./dist/htmlminifier.js file because package.json says main: ./dist/htmlminifier.js, but when it gets to line 580 of ./dist/htmlminifier.js Browserify throws an error because require is in fact a function and ./dist/htmlparser.js doesn't exist. \nIf you are publishing a package to NPM package.json \"main\" should point to a file that can be required as a CommonJS module. I believe there are other properties of package.json that can point to bundled code appropriate for direct inclusion on the client side. It's a fine idea to use Browserify to bundle ./dist/htmlparser.js because it would save you from having to check whether or not require is a function all the time. But for my purposes, all I care is that htmlparser.js exists when your code require()s it.\n. ",
    "thesamet": "@kangax sorry for not getting into this - I am traveling right now so I'd suggest asking someone else.\n. ",
    "dashed": "Alternatively, I may suggest gulp: https://github.com/gulpjs/gulp\n. This is expected behaviour.\nBoth should output: foo bar. \n. To elaborate, both of the following output differently due to the fact that newlines act like spaces:\nhtml\n<div>\n  <b>foo</b>\nbar\n</div>\nhtml\n<div>\n  <b>foo</b>bar\n</div>\n. ",
    "hugsbrugs": "Yeah ! Thanks !!!!\n. Another error I can't figure out : \n<input type=\"checkbox\" <?= $UserCustomTastingChecked ?>></div></label>\nI have tested : \n<input type=\"checkbox\" \"<?= $UserCustomTastingChecked ?>\"></div></label>\nbut still \"Parse Error\",\nI've tried this online HTML minifier : http://www.willpeavy.com/minifier/ to see if I have more explanations on error to pass through but it doesn't generate this error. What advise would youy give me to have more info for debugging ? Thanks \n. I've seen your online testing page : http://kangax.github.io/html-minifier/\ntrying to remove all options still give me error on same line ... \n. What is strange is that : \n<input type=\"checkbox\" checked>\npass test (with all options activated) and gives : \n<input type=checkbox checked>\nObviously my : \n<?= $UserCustomTastingChecked ?>\nsets \"checked\" or not.\nI had the idea to put : \n<input type=checkbox checked=\" <?= $UserCustomTastingChecked ?>\">\nbut since a \"no-checked\" option doesn't exist, I can't do this way ...\n. ",
    "Grawl": "Agree. A lot of errors (including silent feeeze) with PHP minifining.\n. ",
    "jeremypeter": "You can fix the first bug by changing your single quotes to double, and double quotes to singles\nhtml\n<div class=\"alert\" ng-class=\"'alert-' + (type || 'warning')\">\n    <button ng-show=\"closeable\" type=\"button\" class=\"close\" ng-click=\"close()\">&times;</button>\n    <div ng-transclude></div>\n</div>\n. ",
    "wheresrhys": "html\n<!DOCTYPE html>\n<!--[if IE 7]><html class=\"o-hoverable-on no-js o-useragent-ie7\"><![endif]-->\n<!--[if IE 8]><html class=\"o-hoverable-on no-js o-useragent-ie8\"><![endif]-->\n<!--[if gt IE 8]><!--><html class=\"o-hoverable-on no-js\"><!--<![endif]-->\nand\nhtml\n    {{> /views/origami-templates/o-ft-footer/main}}\n    {{> /views/common/scripts}}\n</body>\n</html>\n. ",
    "mfregoe": "Just wanted to leave this here for anyone else who came upon this issue:\nI had the same problem (with handlebars templates) but only when using the processScripts option.\nMy current workaround is using two separate htmlmin tasks (using grunt-contrib-htmlmin). One task for templates that have open tags (not utilizing processScripts), and another task for templates without open tags (utilizing processScripts).\n. ",
    "alexander-marquardt": "Hey, thanks for the response. I found a work-around - but I thought it\nmight be interesting as a test case, or just to know about in case it\nindicated an error in the code.\nOn Wed, Feb 5, 2014 at 11:23 PM, Juriy Zaytsev notifications@github.comwrote:\n\nYeah, I'm not sure we can do anything about this... What about escaping\ninside quotes (as \"\"\")?\n\nReply to this email directly or view it on GitHubhttps://github.com/kangax/html-minifier/issues/119#issuecomment-34291260\n.\n. \n",
    "KenSharp": "I know it's not supported by the browsers (yet) but there's also <style scoped> to think about. The minifier would either need to know which parent element the scoped refers to, or just ignore it. Combining the scopeds together sounds like a nightmare.\n. Actually:\n\nA p element's end tag may be omitted if the p element is immediately followed by an address, article, aside, blockquote, div, dl, fieldset, footer, form, h1, h2, h3, h4, h5, h6, header, hgroup, hr, main, nav, ol, p, pre, section, table, or ul, element, or if there is no more content in the parent element and the parent element is not an a element.\nhttps://www.w3.org/TR/html5/syntax.html#optional-tags\n\nI think that the minifier is correct, and the validator is incorrect. I'll open an issue with them.\nI'll leave this open for now just so someone more experienced can confirm.\n. You worked it out without me. :-)\nFor reference I was using https://kangax.github.io/html-minifier/ . I think it's time I moved to the command line. Much easier.\n. All looks good here. Sorry for the slow response.\n. I wondered why embedded YouTube videos kept going missing....\nI'm new to Github, I didn't realise every little thing I do would be logged against this ticket. \ud83d\ude33 I need to RTFM.\n. ",
    "corbanbrook": "Coming from angular we will often /> directives that don't transclude.\nFor instance something like this toggle button directive:\nhtml\n<span toggle-checkbox ng-model=\"model.enabled\" />\n. Correct, and I question the validity of closing non-void elements this way.\n. I beleive <div /> is only valid in XML or XHTML\n. Agreed, thanks for your time. \n. Ok, great, looks like that was added last week, ill look forward to the next tagged release.\n. ",
    "LaurentGoderre": "@joelcipriano I opened a PR that does something similar but not quite. It does not preserve whitespace around the line breaks so your output would look like\nhtml\n<!DOCTYPE html>\n<html lang=\"en\" class=\"no-js\">\n<head>\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<title>Carbon</title>\n<meta name=\"title\" content=\"Carbon\">\n<meta name=\"description\" content=\"A front-end framework.\">\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link href=\"stylesheets/application.css\" rel=\"stylesheet\">\n<script defer src=\"scripts/application.js\"></script>\n<link href=\"images/icn-32x32.png\" rel=\"shortcut icon\">\n<link href=\"images/icn-152x152.png\" rel=\"apple-touch-icon\">\n</head>\n<body></body>\n</html>\n. Sure!\n. There you go!\n. I admit that I did not think about that. The maxLineLength will not help us but I,m wondering if we are not pursing something unrealistic\n. @duncanbeevers @kangax would you be opened to adding this as an option?\n. It's a request we have from our user implementers. They want the compression but want to keep some form of readability. We currently use an html minifier that does this but it's Java based and it's soooo slow. This especially helps when dealing with autogenerated output (ex: Jekyll)\n. Quite similar but this also gets rid of whitespace before and after the line breaks. I'm wondering if this would meet their needs\n. Regarding #3, would you rather it be:\njs\nif (options.preserveLineBreaks) {\n  str = str\n    .replace(lineBreakBefore, lineBreakStamp)\n    .replace(lineBreakAfter, lineBreakStamp);\n    .replace(/[\\t\\n\\r]+/g, ' ').replace(/[ ]+/g, ' ')\n    .replace(lineBreakStamp, '\\n');\n} else {\n      // strip non space whitespace then compress spaces to one\n      return str.replace(/[\\t\\n\\r]+/g, ' ').replace(/[ ]+/g, ' ')\n}\n. Ok, #1 and #2 are done. How do you want to deal with #3? (Note that the logic changed a bit)\n. Can you let me know when you publish to npm?\n. Btw, what do we do about the preserveLineBreak vs preserveLineBreaks?\n. I thought I did but I probably screwed up my rebase....sorry about that\n. Sorry about that. Can it be published to npm?\n. Would it be annoying to have v0.6.8\n. Done!\n. If you are using JSON data in HTML data- attributes yes (as show in the test case)\n. Maybe there's something else at play for my issue but in any case, converting\ndata='{\"foo\":\"bar\"}'\nto\ndata=\"{&quot;foo&quot;:&quot;bar&quot;}`\nmakes it quite a big larger. The larger the JSON object, the bigger it gets\n. I found out what the underlying issue is. It incorrectly encodes the data\ndata='{\"foo\": \" \\\"bar\\\" \"}'\nbecomes\ndata=\"{&quot;foo&quot;: &quot \\\"bar\\\" &quot;}'\nwhich is incorrect. It should double encode the \\ and keep encoding the double quotes\n. The problem is this line\nhttps://github.com/kangax/html-minifier/blob/gh-pages/src/htmlparser.js#L351\nIs should probably be:\nescaped: value && value.replace(/(^|.)\"/g, '$1&quot;'),\n@jeresig do you remember why the \\\" pattern is excluded?\n. @kangax in my other PR (#268), I fix my immediate problem and we could take a look at this separately\n. Done!\n. It seems that by rebasing, my PR now has the dist of 7818ce6c1202eec20cc1eea42f6340393c065d99 it seems like it was not included. I wonder if that's what could have caused the test failing\n. Can we merge this until the escaping of attribute can be figured out?\n. Can we merge this to fix the immediate problem with JSON in attributes?\n. There was already a test but adding a more robust one identified a problem with my logic so I updated both\n. How do I reproduce this locally? Also, this did not change the logic that is failing\n. @XhmikosR can we try merging #276 first. They could be a problem if the source and test do not match the dist folder\n. Is there any issue with this?\n. ",
    "xFragger": "thats strange.... i builded a testcase where it breaks.... but okay.... i will have a look for it.... \n. ",
    "matthewwithanm": "I don't think so since it doesn't actually include the option names. I was thinking just something like this:\n| Option | Description | Default |\n| --- | --- | --- |\n| removeComments | Strip HTML comments | false |\n| removeCommentsFromCDATA | Strip HTML comments from scripts and styles | false |\n| removeCDATASectionsFromCDATA | Remove CDATA sections from script and style elements | false |\n| collapseWhitespace | Collapse white space that contributes to text nodes in a document tree. | false |\n| collapseBooleanAttributes | Omit attribute values from boolean attributes | false |\n| removeAttributeQuotes | Remove quotes around attributes when possible. | false |\n| removeRedundantAttributes | Remove attributes when value matches default. | false |\n| useShortDoctype | Replaces the doctype with the short (HTML5) doctype | false |\n| removeEmptyAttributes | Remove all attributes with whitespace-only values | false |\n| removeOptionalTags | Remove unrequired tags | false |\n| removeEmptyElements | Remove all elements with empty contents | false |\n| lint | Toggle linting | false |\nI'd have submitted a PR but I'm not sure where would make the most sense.\n. :thumbsup: Thanks for the project!\n. ",
    "dotnetCarpenter": "I'm using html-minifier as part of htmlmin.\nhtml-minifier: 0.4.5\ngrunt-contrib-htmlmin: 0.1.1\n. Never mind. I found out that the boilerplate's devDependencies, we use at the firm, is pretty outdated. Updating to html-minifier: 0.5.6, fixed the issue.\n. ",
    "zdroid": ":smile:\n. ",
    "nikolajtesla": "Yes, based on my knowledge and documentation knockout comments can look only like this. Thank you for your effort to make tool cooler.\n. ",
    "JBlackCat": "This would be very helpful for me since I am using Apache SSIs and still need to strip other comments without removing the SSIs.\n. ",
    "blowsie": "Could anyhow here show me how I can utilise this to prevent my copyright information being removed?\nThanks \n<!--\n    <%= pkg.name %> - <%= pkg.version %> - <%= pkg.buildID %> - <%= grunt.template.today(\"yyyy-mm-dd\") %>\n    <%= pkg.homepage %>\n    Copyright (c) <%= grunt.template.today(\"yyyy\") %> <%= pkg.author.name %>\n  -->\n. ",
    "kristerkari": "This works:\nhtml\n<!--[if IE]><![endif]-->\n<!DOCTYPE html>\n<!--[if lt IE 7]><html class=\"no-js ie6\"><![endif]-->\n<!--[if IE 7]><html class=\"no-js ie7\"><![endif]-->\n<!--[if IE 8]><html class=\"no-js ie8\"><![endif]-->\n<!--[if gt IE 8]><!--><html class=\"no-js\"><!--<![endif]-->\n  <head>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta charset=\"utf-8\">\n    <title>Document</title>\n  </head>\n  <body>\n  </body>\n</html>\nMinified:\nhtml\n<!--[if IE]><![endif]-->\n<!DOCTYPE html>\n<!--[if lt IE 7]><html class=\"no-js ie6\"><![endif]-->\n<!--[if IE 7]><html class=\"no-js ie7\"><![endif]-->\n<!--[if IE 8]><html class=\"no-js ie8\"><![endif]-->\n<!--[if gt IE 8]><!--><html class=no-js><!--<![endif]-->\n<head>\n<meta http-equiv=X-UA-Compatible content=\"IE=edge,chrome=1\">\n<meta charset=utf-8>\n<title>Document</title>\n</head>\n<body>\n</body>\n</html>\n. html\n<!DOCTYPE html>\n<html lang=\"en\">\n<!--[if lt IE 7]><html class=\"no-js ie6\"><![endif]-->\n<!--[if IE 7]><html class=\"no-js ie7\"><![endif]-->\n<!--[if IE 8]><html class=\"no-js ie8\"><![endif]-->\n<!--[if gt IE 8]><!--><html class=\"no-js\"><!--<![endif]-->\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Document</title>\n  </head>\n  <body>\n  </body>\n</html>\nMinified:\nhtml\n<!DOCTYPE html>\n<html lang=en>\n<!--[if lt IE 7]><html class=\"no-js ie6\"><![endif]-->\n<!--[if IE 7]><html class=\"no-js ie7\"><![endif]-->\n<!--[if IE 8]><html class=\"no-js ie8\"><![endif]-->\n<!--[if gt IE 8]><!--><html class=no-js><!--<![endif]-->\n<head>\n<meta charset=utf-8>\n<title>Document</title>\n</head>\n<body>\n</body>\n</html>\n</html>\nTwo </html> tags.\n. Uncheck \"remove optional tags\".\n. Yeah, I think that W3C Validator does not like most of the things (hacks) that actually fix problems in real browsers, and that's why nobody has been using W3C validator in the last 10 years.\n. I'm not sure where to find info about having <html> inside <head>, but if you want you can have a look at this post, which has many links related to the hack:\nhttp://nicolasgallagher.com/better-conditional-classnames-for-hack-free-css/#the-bubble-up-conditional-comments-method\nand this post also has some pros and cons listed:\nhttps://mathiasbynens.be/notes/safe-css-hacks#conditional-classnames\n. I guess it does not make much sense to try to fix it if tree parsing can handle it. I originally reported this because the most known conditional comment bubbling hack was not getting minfied correctly. Thanks for taking a look at it!\n. Yes, the first example that I posted is the one broken from the blog post. The third one that I posted is probably just me trying to find a different way to break the minifier. I haven't heard of other hacks for this, and I don't develop things for old IE any longer. :)\n. > Amazon and Ebay seem to be happily using the HTTP response header to handle X-UA-Compatible, but then I guess there will be instances, e.g. free web hosts, which people will resort to this hack.\nThis hack has nothing to do with X-UA-Compatible meta tag or header. The hack can be used to get correct class names in <html> tag for IE6-8, e.g. <html class=\"no-js ie8\">.\nYou are able to the use those classnames to scope things for old IE in your CSS, e.g. .ie8 .my-class {}\n. Oh yeah true. I think that the X-UA-Compatible meta tag is good to have there as a fallback even if you are sending it as a header.\n. ",
    "tssajo": "Excellent. Thanks!\n. @kangax Thank you!\n. Thanks for merging.\nHowever, when trying to install html-minifier globally with the command:\nnpm install html-minifier -g\nthe files cli.js and sample-cli-config-file.conf still not get installed...\nI cleaned my npm cache with npm cache clear to no avail.\nOriginally how did you publish html-minifier from github.com to npmjs.org at the first place?\nCan you somehow \"tell\" npmjs.org that new files were added to the git repo?\nOr is it all automatic and a version bump is required?\nSorry, but I don't know how publishing packages to npm works ... Maybe you do?\n. Yes, it works now! Thanks!!\n. You might want to add a release tag for v0.6.1\nto show up on the page https://github.com/kangax/html-minifier/releases\n. These are more than likely related to https://github.com/kangax/html-minifier/issues/213\n. @kangax : I created a PR but in the meantime cli.js got changed in your github repo (which is upstream repo to me)... Can you still merge my PR ?\nIf not, I can rebase my changes, just let me know.\nThanks!\n. @kangax: Created new PR which can be merged as of now: https://github.com/kangax/html-minifier/pull/350\n. Thanks for merging! Please don't forget to eventually bumb version to 0.7.2 to make npm update -g html-minifier work. Thanks!\n. Thanks! Perfect.\n. @kangax , @dciccale : Yeah, I know. I will create a new PR after I rebase my changes. I'll also fix some other bugs which got introduced to cli.js by other people's commits...\n. This is possibly related to https://github.com/kangax/html-minifier/issues/213\n. ",
    "mishoo": "Guys, even if there were an option to keep the original quotes (but there isn't), you should not assume that the raw output from UglifyJS can be safely placed in an attribute value.  HTML-encode your attributes.\n. ",
    "tomByrer": "Ah, I thought it might be dropped in HTML5[.1] in favor for ARIA, but I guess not.\ncheers\n. Thanks!\nI'm starting to use HTML-minifier as you use JSCritic; to quality check foreign HTML.  eg I think Found style attribute on <div> element useful to know; I can move that style=\"__\" into my .CSS.  All the other 18 Found presentational ... I don't care about though.\nThis will help s/n.\n. Thanks!\n. ",
    "lhwparis": "sorry for aksing again i know that page but which one disables minification? am i blind :/ ?\n. ",
    "pallix": "It's because of the angular translate plugin. http://angular-translate.github.io/\n. ",
    "lggwettmann": "I think i found same problem here https://gist.github.com/lggdance/ac6b052292100c95a2e9 - check the view-checkin.html which's  directive loses the value of the open-attribute from\nhtml\n<signup ng-show=\"openit\" name=\"{{input}}\" open=\"openit\" guest=\"guest\" on-signup=\"addGuest()\"></signup>\nto\nhtml\n<signup ng-show=\"openit\" name=\"{{input}}\" open guest=\"guest\" on-signup=\"addGuest()\"></signup>\n.\nAny solutions to that yet?\n. Thanks for pointing that out :) \n. ",
    "schmod": "From my reading of the spec, <elem translate> is equivalent to <elem>\ntranslate only has an effect when you specify the string values \"yes\" or \"no\".\nAs such, translate is not a boolean attribute, and the minifier should not treat it as such.\nFrom the spec (emphasis mine):\n\nThe attribute's keywords are the empty string, yes, and no. The empty string and the yes keyword map to the yes state. The no keyword maps to the no state. In addition, there is a third state, the inherit state, which is the missing value default (and the invalid value default).\nEach element (even non-HTML elements) has a translation mode, which is in either the translate-enabled state or the no-translate state. If an HTML element's translate attribute is in the yes state, then the element's translation mode is in the translate-enabled state; otherwise, if the element's translate attribute is in the no state, then the element's translation mode is in the no-translate state. Otherwise, either the element's translate attribute is in the inherit state, or the element is not an HTML element and thus does not have a translate attribute; in either case, the element's translation mode is in the same state as its parent element's, if any, or in the translate-enabled state, if the element is a root element.\n. \n",
    "jshado1": "This breaks SVGs.\n. Changing\nL466 tag = tag.toLowerCase();\n\u2192 tag = options.caseSensitive ? tag : tag.toLowerCase();\nL522 buffer.push('</', tag.toLowerCase(), '>');\n\u2192 buffer.push('</', options.caseSensitive ? tag : tag.toLowerCase(), '>');\nResolves this.\n. Yep. I'll do it tonight when i get home from work.\n. Grr. I kid you not\u2014just as I run git push, my home internet died.\nWhat testing framework does this use? It was simple enough to update the exisiting tests for caseSensitive, but I'd like to run it just to be sure.\n. How does the /dist directory get updated?\n. Oh whoops. Should i run that and re-submit? Also, any chance this could get tagged for release?\n. ",
    "ravinggenius": "I was able to get close enough to what I want with search and replace. If html-minifier needs to operate on valid HTML documents (understandably), I'll just stick with what I have.\n. ",
    "madstuthemad": "I'm new to grunt as of yesterday and totally loving the fact it does what you want it to do first time - so thanks to you guys and the rest of the community!\nAnyway I agree that this comment should be stripped like the rest. I was surprised to see it there since I had removeComments set to true. I think its counter-intuitive to keep these comments in but others out as there's nothing special about these ones and I don't need them in the minimised code. \n. ",
    "radkodinev": "+1\nI completely agree that those comments should be removed.\n. :+1: :)\n. ",
    "dentuzhik": "Same happens by the way with a style tag.\n. This fix is invalid.\n. @kangax - will you publish this to npm any time soon?\n. ",
    "jonathantneal": "Certainly. Let me know if this will do.\n. ",
    "khmelevskii": "And what to do? An elementary example\n<input {{readonly}} name=\"bar\" value=\"foo\">\nnot minify. html-minifier not possible to use in templates? \nHow can I solve this problem?\n. Thanks a lot!\n. not work for me.\n```\ngit clone git://github.com/kangax/html-minifier.git\ncd html-minifier\nnpm link .\ngrunt\nhtml-minifier test.tpl\nError: Minification error%\n``\n. through node api doesnt work too\n. @duncanbeevers @kangaxcustomAttrOpenandcustomAttrClose` + config file is ok for me. I will test it in my project.\n@kangax, when will new release html-minifier be available in npm?\n. ",
    "osamesama": "You're welcome.  I'll see what I can do.\nOn Wed, Jun 18, 2014 at 3:24 PM, Juriy Zaytsev notifications@github.com\nwrote:\n\nThanks @osamesama https://github.com/osamesama! Can you please add a\nunit test as well?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/pull/190#issuecomment-46496326.\n. \n",
    "kingnight": "grunt-contrib-htmlmin v0.3.0 is  already the newest\n. ",
    "NikolaySl": "https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js#L533 - here lint is read from options which is true or false\nand here https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js#L584 code try to call Lint method on boolean value\nThe object instantiation is missing.\nAlso there is no Lint log output.\nFix - https://github.com/kangax/html-minifier/pull/296\n. Moved\n. ",
    "Boycce": "Awesome, so useful, waiting for working release.\n. This seems to throw an error when onClick=\"\" was included in my template. I boiled it down to onc=\"\"\nminify('<div onc=\"\"></div>', {\ncustomAttrOpen:  /\\{\\%[^\\}]+\\%\\}/,\ncustomAttrClose: /\\{\\%[^\\}]+\\%\\}/\n});\nAbove returns the log Cannot call method 'replace' of undefined\n. Hey @duncanbeevers, I created a fix & test for my problem when passing htmlMinifyOptions with \n<div onc=\"\"></div>\nhttps://github.com/toxinhead/html-minifier/commit/46556e13115827c988cc878012a827e29c5a5b9f\n. Great work.\n. ",
    "HugoHeneault": "Wow. Seems great @duncanbeevers !\nI haven't time to test it, but I will ! Thanks. \n. ",
    "revelt": "For posterity, let me clarify a bit the issue regarding \"some servers\". The SMTP spec RFC 821, defined back in 1982 (source) says:\n\nThe maximum total length of a text line including the  is 1000 characters (but not counting the leading dot duplicated for transparency).\n\nAs far as raw email source vs. line length is concerned, there are other factors in play, such as encoding (which can vary), for example quoted-printable is often used and it will encode limiting line length to 76 and so on. But as far as this 1000 character limiter is concerned, I'm pretty sure it's coming from this RFC 821 spec interpretation.. Updated the title. I'll see what I can do :smiley: \n. This is awesome, it does work now:\nhtml-minifier --input-dir ./test1 --output-dir ./test2 --collapse-whitespace --file-ext html\nThanks guys!\n. I noticed the subfolders are still not read. This might be out of scope of this library, so I'm wondering is it possible to combine two libraries on npm script.\nI asked a question on SE, is it possibly to combine glob-style libraries with others (such as html-minifier).\nIf anybody has an idea that would make minification on folders much easier. Actually, .html only could be globb'ed straight into this library, bypassing this closed issue!\n. > I am curious though - what is the expectation when skipping over non-HTML files. Do we just store minified files in the output directory, or are we expected to copy over image files etc.?\nI have a Hugo-diven static website and I want to run the minifier on the whole /public/ folder \u2014 everything that is generated by Hugo. It's necessary because HTML partials often have spaces everywhere, what adds up when rendered and looks clearly computer-generated with ten spaces, opening <div>, twenty spaces and fifteen line breaks, then some text...\nThanks again for sorting folder recursion + filtering by extension in v3.0.1, I really appreciate that!\n. @alexlamsl thank you so much, at last, first time I can minify my whole static website using html-minifier! \ud83d\udc4d \n. Yes, but nobody puts linebreaks within inline CSS. CSS minification here is mainly for <head> styles. I found issue #396 by wanting to raise such issue myself. In my humble opinion it should be on by default because if I'm going to minify HTML, I'll want everything minified.\nIt's your call to consider, whatever you feel is the most appropriate. Feel free to edit if necessary or amend completely \ud83d\ude00. ",
    "markuz-gj": "Legit! \nkeep do good work. Just had this issue and boom, solved.\n. ",
    "tivac": "Managed to actually get an error for the smaller repro by using it via a node script.\n...html-minifier\\dist\\htmlminifier.js:293\n        throw 'Parse Error: ' + html;\n                              ^\nParse Error: <input data-bind=\"text\" placeholder=\"<%= i18n(\"filters.text.label\") %>\"/>\n.  Here's the likely issue.\nhttp://regexr.com/3980m\nThe regex being used to parse tags (/^<([\\w:-]+)((?:\\s*[\\w:-]+(?:\\s*(?:(?:=))\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)/>) times out trying to process <input data-bind=\"text\" placeholder=\"<%= i18n(\"filters.text.label\") %>\"/> on regexr. I see a similar huge delay when stepping through via node-inspector. I haven't taken the time to grok the regex to see where the likely error is, but this seems like a scary one to fix.\nIn code terms it's freezing on the following line:\nhttps://github.com/kangax/html-minifier/blob/gh-pages/src/htmlparser.js#L227\n. @duncanbeevers Interesting, I guess I expected it to do more aggressive ignoring of content within <% ... %>.\nI made that change & html-minifier still doesn't like that file, but I think having to change our quoting standard in this one case is probably a deal-breaker anyways. Thanks for the answer!\n. ",
    "dhoko": "Another ex to freeze both the NPM version & the online version of html-minifier.\nhtml\n<input\n  type=\"number\"\n  class=\"commandCheckout-input-cvc\"\n  name=\"cvc\"\n  placeholder\"(123)\">\nIt seems there is an infinite loop.\n. ",
    "rsp": "Hey, @kangax, I\u00a0completely agree. I've done it that way because I\u00a0just wanted to quickly see what the results would be on a gzipped data and that was the way that was sure to not break anything in the process. If you think it'd be useful to have then I\u00a0can modify the main benchmark to add gzipped tests.\nI\u00a0think it would be most useful to have all of those values in one table so instead of: File, Before, After, Savings, Time there would be File, Before, After, Before gz, After gz, Savings, Savings gz, Time (time only for unzipped because there is no need to count the gzipping time).\nAnother way would be to have two lines in every table cell - unzipped above, gzipped below. When I have some time I\u00a0can do it in a more useful way. I\u00a0wasn't sure anyone would find it useful.\n. ",
    "rbro": "I was expecting 1 space because of the option --conservative-collapse.\nIf I remove the comment on my own first , then I get 1 space.  Since I'm running --remove-comments, I was expecting the same 1 space since comments should be removed and then whitespace collapsed.\nI was able to get 2 spaces on http://kangax.github.io/html-minifier with these options:\n- Remove comments\n- Collapse whitespace\n- Conservative whitespace collapse\n. ",
    "rasenplanscher": "+1\nI ran into this issue today as well.\n@stevenvachon \nThat suggestion is probably better placed in a new ticket.\n@rbro\nIt might be a good idea to rename the ticket to something like \"Make comment removal happen before whitespace collapsing\" in order to keep it focussed and precise.\n. ",
    "papandreou": "I just tried to upgrade from html-minifier 1.1.1 to 2.1.1, and the fix for this (8b19a64) seems to have caused a regression, according to git bisect.\nIt comes down to:\njs\nconsole.log(require('html-minifier').minify('<div><span></span> <!--# echo \"foo\" --> bar</div>', {\n    collapseWhitespace: true,\n    conservativeCollapse: true,\n    ignoreCustomComments: [ /^#/ ]\n}));\nwhich used to output:\nhtml\n<div><span></span> <!--# echo \"foo\" --> bar</div>\nbut now comes out as:\nhtml\n<div><span></span><!--# echo \"foo\" --> bar</div>\nIt seems like conservativeCollapse is not being honored anymore in this particular case?\n. Another weird thing that changed with that commit: With the same options as above,\nhtml\n<body>\n<!--[if !IE]>-->Not IE<!--<![endif]-->\n</body>\nnow minifies to\nhtml\n<body><!--[if !IE]>--> Not IE<!--<![endif]--> </body>\nbut it used to minify to:\nhtml\n<body> <!--[if !IE]>-->Not IE<!--<![endif]--> </body>\n(notice that the whitespace moved)\n. @alexlamsl Okay, https://github.com/kangax/html-minifier/issues/652\n. Thanks, I can confirm that this branch fixes the two issues I had in my app without introducing any new problems :)\n. No problem -- when are you planning to release a new version with this fix?\n. I agree that white-space: pre hiding in an external stylesheet is more common than it showing up in an inline style. However, I believe that this is still a valid fix for html-minifier.\nMy use case is actually a white-space: pre-wrap in an external stylesheet, but it seems like it'll be easier to rewrite that to use an inline style than to expose the ability to specify options.canTrimWhitespace all the way through my stack :). > Wouldn't inlining white-space: pre-wrap make the size of your HTML file increase significantly?\nIn my case, no. That inline style would sit in a node quite far up the tree.\n\nWould that offset the byte savings when compared with conservativeCollapse?\n\nconservativeCollapse is not enough in my case (I'm actually already specifying that). My problem is that I'm minifying HTML where in some subtrees, multiple spaces are used for alignment of the contents. Even with conservativeCollapse turned on, multiple spaces are compressed into one, so that won't be sufficient.\n\nI'm not too thrilled about inserting a very (CSS-)specific rule to html-minifier, especially if this isn't a common coding pattern to begin with.\n\nIt might not be a common coding pattern (I don't know), but I think it falls into a category where html-minifier obviously does something wrong, and it has all the information to detect it.\n\nHaving said that, I'm wondering if extending collapseWhitespace to be more configurable would be the best of both worlds. That way, you can even specify a match with your particular CSS class name without re-coding your HTML files.\n\nI thought about doing something like that (actually, to alter the behavior for elements matching arbitrary CSS selectors), but it looked like it would be very hard to adapt the html-minifier code to do that. A more limited feature triggered by a class being present would also solve my original problem, so I'd be in favor of that :). Hmm, it actually occurred to me that specifying options.canTrimWhitespace and options.canCollapseWhitespace as a function that returns false won't be sufficient due to the \"or\" constructs here: https://github.com/kangax/html-minifier/blob/19845f3d141bea1eb2adf693b06b6bf6d6e9c4ff/src/htmlminifier.js#L897-L901\n... If the built-in implementation of can{Trim,Collapse}Whitespace returns true, the user-specified one is never consulted, so it's not possible to veto the built-in one returning true.\nSince options.can{Trim,Collapse}Whitespace are already being defaulted, maybe it would be enough to check options.can{Trim,Collapse}Whitespace() in lines 897 and 901? And perhaps the default one could be provided as the third parameter so that users wouldn't need to reimplement the <pre>, <textarea> logic when overriding?. > Since options.can{Trim,Collapse}Whitespace are already being defaulted\nOh, it wasn't actually being defaulted, so I would suggest changing it like this: https://github.com/papandreou/html-minifier/commit/67d608fece5ffa0bd826effd04efa7fb335b4da7. > If that patch alone would address you needs, then I am not against it since it does not add much overhead.\nOkay, you've got yourself a deal. Opened it as a separate PR here: https://github.com/kangax/html-minifier/pull/813\nFor the record I still think this PR is a relevant correctness fix to pull in, but you're the boss :). Okay, that's cool! I've rebased it and fixed the conflict it had with the other change.. Sorry to be a PITA, but approx. when can I expect an npm release with this change? Otherwise I'll just publish a fork.. Thanks a bunch. Really appreciate the quick assistance wrt. all of this :). Thanks a lot for your hard work :). According to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#special-white-space \\s is equivalent to [ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff].\nMaybe the [ \\n\\r\\t] character class I suggest here should be tweaked further to include more characters.\nThe White Space Processing Rules says:\n\nControl characters (Unicode category Cc) other than tab (U+0009), line feed (U+000A), form feed (U+000C), and carriage return (U+000D) must be rendered as a visible glyph and otherwise treated as any other character of the Other Symbols (So) general category and Common script. The UA may use a glyph provided by a font specifically for the control character, substitute the glyphs provided for the corresponding symbol in the Control Pictures block, generate a visual representation of its codepoint value, or use some other method to provide an appropriate visible glyph. As required by [UNICODE], unsupported Default_ignorable characters must be ignored for rendering.\n\n... so at least form feed (\\f) should also be added.. > I prefer only changing the /\\s/ that is necessary to pass your new unit tests rather than a blanket replacement.\n\nFor instance, https://github.com/kangax/html-minifier/pull/849/files#diff-bd35077e6c438d3f6866b57bb2481260L33 isn't necessary.\n\nJust to be sure that I understand your POV correctly -- isn't that actually an argument for adding test cases that validate that and the other replacement?. Okay, I added some more tests for the cases I could find, then rolled back to \\s in the remaining cases.\nHowever, I'm fairly sure that some of those tests can be written, so I probably wouldn't include https://github.com/kangax/html-minifier/pull/849/commits/1d600ccdeb0d47ec8ad737997e467eb1589401ed -- those other kinds of spaces should basically be treated as regular glyphs, so I think /[ \\n\\r\\t\\f]/ is a safer default.. > if there isn't anything else I shall go ahead & merge\nNothing further for now. I might pick it up again when I get some time :). @alexlamsl Hah, I don't know where I tried to push to before, but here it is :). @alexlamsl Thanks! Can I persuade you to do a new release with this fix?. To be honest I had some trouble figuring out exactly what the difference between trimWhitespace and collapseWhitespace are. In my own app where I ran into this problem I found out I always want to toggle them on and off together.. Oh, you're right. I was probably confused because canTrimWhitespace is accepted as an option. So what I actually found out was that in my app I had to specify canTrimWhitespace and canCollapseWhitespace together :). Sure thing. Added the positive test case, squashed and force-pushed now.. Nice catch, fixed + rebased.. ",
    "davidmaxwaterman": "I see the 'customAttrAssign', but I can't seem to get it to work using grunt-contrib-htmlmin.\n. OK, I found the problem. This feature is fairly recent and grunt-contrib-htmlmin need to update its dependencies. I did it manually, and it seems to work as advertised :)\nClosing this.\n. ",
    "stramel": "html\n<ol class=\"row\">\n  <% _.forEach(selectionSort, function(selectionId) { %>\n    <li change-selection=\"selectionChanger\"\n        rules=\"scopeForPopular(scope.selectionSeparator, scope.selectionRules, <%- selectionId %>, 'rules', true)\"\n        selection=\"scopeForPopular(scope.selectionSeparator, scope.selectionRules, <%- selectionId %>, 'selectionRules', false)\"\n        selection-data=\"selectionData[<%- selectionId %>]\"\n        selection-id=\"<%- selectionId %>\"\n        selection-type=\"<%- selectionType %>\"\n        <%- selectionType %>>\n    </li>\n  <% }); %>\n</ol>\n. ",
    "hwoarangzk": "I met the same problem using art-template, is it solved yet?\n. Is this problem solved? I met the same\n. met the same problem. Anyway to solve it?\n. @xuanfeng \nIs there anyway to solve it without modifying the html?\n. What is html lexer? I'm from China and don't quite understand this word. \nWhat's the difference between writing customAttrAssign, customAttrSurround and customAttrCollapse and not writing these options if I use the template like the example in my question? \nThank you :)\n. Thank you so much for your answer! That's really a lot of help :) And how could I write the options? \ncustomAttrAssign, customAttrSurround and customAttrCollapse should be written like:\ncustomAttrAssign: [/\\<%={0,2}/, /%\\>/],\ncustomAttrSurround : [/\\<%={0,2}/, /%\\>/],\ncustomAttrCollapse : [/\\<%={0,2}/, /%\\>/]\nIs this right?\n. Will there be any update to solve this endless loop error? Really expect it coming soon\n. @bfred-it Maybe you don't know the problem detail. I write the correct html but got endless loop when using html-minifier, and I have to admit that I'm not able to fix it by modifying the html-minifier's code now. That's why I want to know whether this will be fixed in the future\n. @hugowetterberg I reported as a new issue #385, but kangax told me that it's duplicated with this issue, so I came in this #332 here. And I said the problem I came across is due to the ambiguous double-quotes even I escaped them. And I don't think that escaped quotes in html is malformed. Another, I'm from China and my English is not as good as you guys, so there maybe some misunderstanding in the post which you can tell me if there is anything I've done wrong. I hope you can understand :) All I want is just to solve the code issue.\n. @bfred-it That's ok :) Out of blows friendship grows\n@hugowetterberg That's really my mistake not posted the actual html code with escaped double-quotes. I'll reopen that issue\n. I ran into the similar problem. At least I expect html-minfier to throw an error when there is a broken html so that I can catch it. Is there any further updates of html-minifier to solve this issue?\n. @kangax I don't think this is the duplicate of #332. Please see the html code with escaped double-quotes:\n<td><a href=\"javascript:\" class=\"common-status common-status-<%= status == 2 ? \\\"on\\\" : (status == 3 ? \\\"off\\\" : (status == 1 ? \\\"none\\\" : \\\"\\\")) %>\" data-id=\"<%= id %>\"><i><%= status == 2 ? \"pass\" : (status == 3 ? \"fail\" : (status == 1 ? \"undealt\" : \"\")) %></i><i class=\"icon icon-pages icon-con-arrow vn\"></i></a></td>\nIf the changed the escaped double-quotes into single-quotes, then html-minifier works fine:\n<td><a href=\"javascript:\" class=\"common-status common-status-<%= status == 2 ? 'on' : (status == 3 ? 'off' : (status == 1 ? 'none' : '')) %>\" data-id=\"<%= id %>\"><i><%= status == 2 ? \"pass\" : (status == 3 ? \"fail\" : (status == 1 ? \"undealt\" : \"\")) %></i><i class=\"icon icon-pages icon-con-arrow vn\"></i></a></td>\nSo I don't think the html code with escaped double-quotes is malformed, am I right? And sometimes we have to write escaped double-quotes in our html. \n. @kangax hi, maybe I didn't make it clear. I don't want to display double-quotes in the html so I didn't write &quot;. slash-escaped double-quotes can't be used in the html? I think it can be used like the code in my last reply\n. ",
    "Pomax": "actually, disregard, the \" comes from a different util earlier in the chain =_=\n. ",
    "eush77": "Actually I can't see the problem neither with <link>'s, nor with other void elements (like <img> or <meta>). It seems that HTMLParser takes care of that.\n. ",
    "sogen": "Hi from HN, :+1:\n. It was some \"ascii banner text\" to use as a bookmark in the CSS code, so I\npasted the pure CSS code (including that comment with the included > < )\ninto the minifier, to check the minification output\nOn Wed, Aug 20, 2014 at 5:25 PM, Juriy Zaytsev notifications@github.com\nwrote:\n\nHm, I see now that it fails in raw form \u2014 /> < */ \u2014 without surrounding\n",
    "genintho": "@kangax thanks.\nPull request updated.\n. I have followed what was describe in the issue. It is bit confusing and yes it is different from what the spec is saying.\nThe case I can think of (which are not what my code is doing):\nspellcheck=\"false\" should stay untouched\nspellcheck=\"true\" should become spellcheck=\"\" (empty string and true are triggering the same behavior)\nspellecheck=\"\" should stay untouched\nspellcheck ???\nspellcheck=\"random\" should trigger a lint error\nFor my understanding, the following\nhtml\n<form spellcheck=\"false\">\n  <input type=\"text\" spellcheck=\"false\"/>\n</form>\ncan safely be transform to\nhtml\n<form spellcheck=\"false\">\n  <input type=\"text\"/>\n</form>\nBut that would probably be hard to code :p \n. @kangax should the different issues mentioned in the PR being closed now that this is merged?\n. @alexlamsl \n\nIt's commit like this where I wish Github provides a diff mode that ignore whitespace changes... :sweat_smile:\n\nhttps://github.com/kangax/html-minifier/pull/569/files?w=1\nSadly you can not comment in this mode.\n. Need to be reverted before final review\n. I am planning to support multiple \"type\"\n. ",
    "sopilkar": "@duncanbeevers This is not invalid HTML. This is part of template that work successful. For this template engine needs use double-quotes only.\nWhat's problem? I think if we use option 'ignoreCustomComments' html-minifier must ignore any characters inside this custom comment.\ngrunt-htmlcompressor can compress this html without problems but it very slow.\n. @kangax For example add a new option:\njavascript\n'ignoreTemplateBrackets': [\n    ['{{{', '}}}'],\n    ['{{#if}}', '{{/if}}']\n    ....\n]\nStep one. If we use this option we need just mark these template blocks as 'ignored' (or escape it and unescape after finish parse).\nStep two - run normal parsing process.\n. ",
    "skumaresan": "Hi,\nWe are using jquery template. I am getting html parse error for below line due to less than symbol.\n${( $data.isCategory = setdepth < 2 ),''}\n. ",
    "Delagen": "Sent to email due cannot attach files to issue\n. thanks. I omit this option.\n. ",
    "szarouski": "You're right, I agree with all the comments in #98, so I'll close that one. Thank you.\n. ",
    "AlicanC": "Should case sensitivity option affect how a file is parsed? Who would want the option to get his tags shagged?\n. Oh, I understand. I never intended to keep their cases, but thanks for pointing it out.\n. @duncanbeevers, thanks a lot!\n. ",
    "JGibel": "Are you putting them in a files property? You shouldn't need that last slash in dest as well.\nfiles: [{\n                expand: true,\n                src: ['source/views/checkout/*.ejs'],\n                dest: 'build/views/checkout'\n            }]\n. ",
    "CodeBendr": "This is what i currently have. But still not working. It only works for single files. Can you send me the code for minifying multiple files? i know am doing something wrong. \nhtmlmin: {\n            options: {\n                removeComments: true,\n                collapseWhitespace: true\n            },\n            ejs_files: {\n                src: 'source/views/*/.ejs',\n                dest: 'build/views'\n            }\n          }\n. ",
    "shinnn": "No problem!\n. The author and contributors cannot help you unless you elaborate on the problem.\n. Could anyone review this?\n. ",
    "conmarap": "Any large chunk. I tried with 500k, for example. \n. Thanks for the confirmation @Klathmon \n. I'll test and let you know.\n. Ok, we can close this out and I'll simply re-open if I see such an example!\n. ",
    "Klathmon": "I can confirm this is also happening to me on a 340kb input file. I can provide the source file to you (@kangax) if you want it.\n. ",
    "pasine": "Never thought it was a bug in html-minifier. I was just not sure if the sortable attribute was boolean. Your link clarify the issue. Thanks.\n. ",
    "niftylettuce": "Line breaks don't seem to be preserved either way - they don't get stripped if this is false or true.  Not sure what to do here, my code still looks like this output after passing through html-minifier:\n``` html\nFoo\nA whole bunch of unwanted \nLine\nBreaks\n\n```\n. ",
    "shoja": "Sure, done.\n. ",
    "thomporter": "Here's the project: https://github.com/begriffs/angular-paginate-anything\nThey already had an open issue on the subject, and I added my 2\u00a2:\nhttps://github.com/begriffs/angular-paginate-anything/issues/41\nAfter reading some of the comments on the issue, I'm of a different opinion on the matter now.  If lint is active, then htmlmin should not allow the dot.  Otherwise, I suppose it should be allowed?  \nI didn't even think to try turning the lint option off to see if it would work before, and wouldn't have liked that option anyway. =)  In fact, I had already renamed the directive in my project to \"paginateit\" and launched before I even posted the issue here.  I just wanted to raise the awareness in both repos. :wink:\n. ",
    "genechan": "Below is my grunt.js settings and style tag. I removed the comments for   manually already because it was breaking my code.\n//Minfiy html from my gruntfile.js\nhtmlmin:{\n  default:{\n    files:{\n      \"../htdocs/index.html\":\"../htdocs/index.html\"\n    }\n  },\n  release:{\n    options:{\n      removeComments: true,\n      collapseWhitespace: true\n    },\n    files:[{\n      expand: true,\n        cwd: '../htdocs',\n        src: ['*.html','**/*.html'],\n        dest: '../htdocs'\n    }]           \n  }\n}\n    <style type=\"text/css\">\n        /* reset.css #############################################################\n'||''|.                            .\n ||   ||    ....   ....    ....  .||.\n ||''|'   .|...|| ||. '  .|...||  ||\n ||   |.  ||      . '|.. ||       ||\n.||.  '|'  '|...' |'..|'  '|...'  '|.' \nreset.css ############################################################# */\nhtml {margin:0;padding:0;border:0;}\nbody, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, code, del, dfn, em, img, q, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, dialog, figure, footer, header, hgroup, nav, section {margin:0;padding:0;border:0;font-weight:inherit;font-style:inherit;font-size:100%;font-family:inherit;vertical-align:baseline;}\narticle, aside, dialog, figure, footer, header, hgroup, nav, section {display:block;}\nbody {line-height:1.5;background:white;}\ntable {border-collapse:separate;border-spacing:0;}\ncaption, th, td {text-align:left;font-weight:normal;float:none !important;}\ntable, th, td {vertical-align:middle;}\nblockquote:before, blockquote:after, q:before, q:after {content:'';}\nblockquote, q {quotes:\"\" \"\";}\na img {border:none;}\n:focus {outline:0;}\n.clearfix:after {content:\"\\0020\";display:block;height:0;clear:both;visibility:hidden;overflow:hidden;}\n.clearfix {display:block;}\n.clear {clear:both;}\n/* END reset.css >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> _/\n            .left{float: left;}\n            .right{float: right;}\n            header{\n    width: 96%;\n    float: right;\n    max-height: 50px;\n}\nheader nav{\n    max-height: 50px;\n}\nnav .logo{\n    max-height: 50px;\n    background-color: black;\n    width: 50%;\n    display: inline-block;\n    height: 50px;\n}\nnav .logo h1{\n    display: inline-block;\n    color:#669999;\n    margin-left: 20px;\n}\nnav .logo ul{\n    float: right;\n}\nnav .logo li{\n    margin-right: 10px;\n}\nnav .logo ul,nav .logo li{\n    display: inline;\n}\nnav .logo a,nav .logo a:visited{\n    color: #666666;\n    text-decoration: none;\n}\nnav .logo,nav .portal{\n    float: left;\n}\nnav .portal{\n    display: inline-block;\n    width: 50%;\n    background-color: #444444;\n    height: 50px;\n}\nnav .portal div{\n    display: inline-block;\n}\nnav .portal span,nav .portal a,nav .portal a:visited{\n    color: #fff;\n    text-decoration: none;\n}\n/_Style forms later*/\nnav form{\n    display: none;\n}\n</style>\n. https://gist.github.com/genechan/c5db7f8c3398fe6abd74\n. I can't believe I missed that.\nThank you so much!!\n. ",
    "ivanbreet": "I totally agree. The filter is the best solution.\nI'll raise it with the Angular-ui guys.\nThank you.\nIvan Breet\nOn Wed, Sep 3, 2014 at 5:24 AM, Duncan Beevers notifications@github.com\nwrote:\n\nHmm, this is a little tricky. I think technically in a text block like that, < should be html-encoded. I don't know how angular deals with that.\nIt certainly wouldn't look pretty writing {{ $index &lt; value ? '*' : ' ' }}.\nI think this might be a situation that is simply out of reach of this tool. If being able to minify this is important, perhaps you could make a simple filter for emitting the output need based on the value of $index\nReply to this email directly or view it on GitHub:\nhttps://github.com/kangax/html-minifier/issues/254#issuecomment-54247800\n. \n",
    "jbenoit2011": "Unfortunately, it does.\n. Ok, great, I agree. May I close ?\n. It does. Thanks for answering. \nCould it be possible to add the caveats in this wiki page\n. Great. Thanks. May I close the issue?\n. ",
    "codeengie": "The same thing is happening to me but with .aspx files. My minifier options are:\nremoveComments: true,\ncaseSensitive: true\nMy content in the .aspx file:\n<asp:Content ContentPlaceHolderID=\"HeadContent\" runat=\"server\"></asp:Content>\n<asp:Content ContentPlaceHolderID=\"FirstContent\" runat=\"server\">\n    <div id=\"content\">Test</div>\n</asp:Content>\n<asp:Content ContentPlaceHolderID=\"SecondContent\" runat=\"server\">\n    <div id=\"content2\">Test2</div>\n</asp:Content>\nBut the content outputs as:\n<asp:Content ContentPlaceHolderID=\"HeadContent\" runat=\"server\"><asp:Content ContentPlaceHolderID=\"FirstContent\" runat=\"server\"><div id=\"content\">Test</div><asp:Content ContentPlaceHolderID=\"SecondContent\" runat=\"server\"> <div id=\"content2\">Test2</div>\n</asp:Content></asp:Content></asp:Content>\nI tried using\n<!-- htmlmin:ignore -->\nbut it still moves the position of the ending tag\n</asp:Content>\n. ",
    "MiladSadinam": "Well i actually use grunt-contrib-htmlmin 0.3.0 which uses html-minifier 0.6.0. So i guess it is a bug with that version.\n. ",
    "fspafford": "I also need this feature so I can ignore some custom tags that are handled on the server side. Example:\n<!-#System_GetValue ID=PageHeader>\n. ",
    "jeresig": "Ugh, lord knowns, that was so long ago! What you have is probably more correct :)\n. ",
    "igorbljahhin": "Forget about versions -- 0.1.3 and 0.3.0 are versions of grunt-contrib-htmlmin module.\nI tested with htmlmin 0.6.8 and got the same issue:\n\nC:\\tmp\\htmlmin-issue>cat src\\main\\webapp\\index.html\n<h1 class=\"headline1 breadcrumb\" ui-view=\"breadcrumb\" />\n<div class=\"block-l sr\" ui-view=\"leftContent\" />\n<div class=\"block-s\" ui-view=\"faqLinks\" />\nC:\\tmp\\htmlmin-issue>html-minifier -v\nhtml-minifier v0.6.8\nC:\\tmp\\htmlmin-issue>html-minifier src\\main\\webapp\\index.html\n<h1 class=\"headline1 breadcrumb\" ui-view=\"breadcrumb\">\n<div class=\"block-l sr\" ui-view=\"leftContent\">\n<div class=\"block-s\" ui-view=\"faqLinks\">\nC:\\tmp\\htmlmin-issue>\n\n. Thanks for pointing to the option \"keepClosingSlash\"!\n. ",
    "samme": "I was imagining an option (default: false) since it's not suitable for every case.\n. ",
    "ds82": "hmm .. strange.\nI included a unit test in the PR that fails without my patch .. \n. Yes. I ran into the issue with the npm version 0.6.8 and reproduced it with hash 3eefb81 of this repo (HEAD before my commit). \n. Ok, I reproduced it with the online demo. The difference it, that I used this option:\ncustomAttrCollapse: /.+/\n.. what I thought would tell html-minifier to collapse all (custom) attributes. With this option, the error occurs. Even in the online demo:\nhttps://cloud.saenger.in/public.php?service=files&t=528d1f987ddb3621beb00833d382ea28&download\n. @duncanbeevers: Of cause, you are right.\nI updated the PR accordingly and rebased against current HEAD\n. ",
    "mgol": "This has just bitten me hard especially that currently grunt-angular-templates swallows the stack trace which makes it hard to pinpoint: https://github.com/ericclemmons/grunt-angular-templates/issues/106\nCould you release a new version?\n. ",
    "justinmusgrove": "sounds good thanks!\n. Sounds good - an easy work around is to escape it\n. ",
    "elliottsj": "\nIs this something that makes sense to toggle all at once, or on a tag-by-tag basis?\n\nEnabling collapseInlineTagWhitespace on a tag-by-tag basis is something I'd like to see. Continued in #691\n. > If you want to extend on this feature, PR is welcome\nSounds good \ud83d\ude04 \nWhich do you think would be the best configuration option to add? I'm leaning towards preserveInlineTagWhitespace as a list of tag names which the collapseInlineTagWhitespace rule should ignore. It'll require that collapseInlineTagWhitespace is enabled, in the same way that collapseInlineTagWhitespace requires that collapseWhitespace is enabled.\n. ",
    "MarkusPint": "+1\n. ",
    "antenando": "+1\n. ",
    "denji": "+1\n. ",
    "dudeonthehorse": "+1\nReally need to use this feature in my Email Development Framework.\n. ",
    "cooljeffro": "Sorry guys. It was a problem on my part with uglify-js\n. ",
    "sigvef": "@duncanbeevers \n\nWhat dialect of HTML are you using that allows for . in tag names?\n\nJust plain old HTML5 (which allows . in tag attribute names). The syntax spec allows attribute names to consist of:\n\none or more characters other than the space characters, U+0000 NULL, U+0022 QUOTATION MARK (\"), U+0027 APOSTROPHE ('), \">\" (U+003E), \"/\" (U+002F), and \"=\" (U+003D) characters, the control characters, and any characters that are not defined by Unicode.\n\nOur specific use-case is to use . as a namespacing divider in attribute names, e.g. <div company.module.parameter=123>..</div>. Hope that makes sense!\n. ",
    "uglow": "I'm also seeing this issue when using grunt-contrib-htmlmin with the following options:\noptions: {\n          collapseWhitespace: true,\n          conservativeCollapse: true,\n          collapseBooleanAttributes: false,   // Setting this to true will reduce the required=\"true\" attribute to required, which breaks the app.\n          removeAttributeQuotes: true,\n          removeComments: true,\n          removeCommentsFromCDATA: true,\n          removeOptionalTags: true\n        }\n. I've documented a configuration that seems to work with Angular2.0.0-beta6\n. @alexlamsl - yes, it is similar to your config but with 2 extra config flags: removeAttributeQuotes and caseSensitive. These flags are also necessary (at least when using html-minifier via html-loader). Just thought this note might help someone else.\n. ",
    "rexdf": "My situation is qutoes \" mismatching. ( In head/meta-summary including some automatically generated summaries)\n. It seems not work at all!  @kangax  You cannnot find it in http://kangax.github.io/html-minifier/.\n. dist: { // Target\n            options: { // Target options\n                //removeComments: true,\n                minifyJS: true,\n                minifyCSS: true,\n                preserveLineBreaks: true,\n                //collapseWhitespace: true\n            },\n            files: { // Dictionary of files\n                'public2/index.html': 'public/index.html', // 'destination': 'source'\n            }\n        },\nThe above code cannot remove groups of empty lines.\n. Yes, it remove all empty char. But some search engines seem not like it (I think so).\n. Thanks for you and your project. I should set both collapseWhitespace and preserveLineBreaks to true.\nIt works now.\n. @kangax  You can try echo -e \"<p>\\na\\n</p>\" | html-minifier --collapse-whitespace --preserve-line-breaks. \n. ",
    "dimylik": "just got same error with Angular expression:\n<span>{{someVar < 0 ? '-' : '+'}}</span>\n. ",
    "Sollll": "Same here:\n{{orderForm.description.$viewValue.length<20....\nI think everything between {{}} should be ignored.\n. ",
    "ciarans": "+1 experiencing this with JS tags\n. ",
    "seriema": "I'm using grunt-contrib-htmlmin (v0.3.0) and clicked the \"report issue with HTML output\" link and ended up here without noticing it was the issue-tracker for another project. Was confused for a sec.\n. The plot thickens... I went through your tests to see if I could help. Maybe add a test. When I noticed that stripping those closing tags are on purpose.\nChecking W3C there seems to be more tags that could be stripped out then.\nBut somehow I'd like an option flag for this. I don't think those few bytes matter so I'd rather have a XML-ish compliance (I'm old).\n. Ah, it's a setting for grunt-contrib-htmlmin that's being passed on to html-minifier that's setting that flag (and others). Thanks for helping me understand what was going on. :) I'll close this for real now.\n. ",
    "Wolfium": "I just suffered from this.\nkeepClossingSlash did the trick, now the cached minized html from source is the same with same tags.\nOnly weird behavior is the defautt is to remove the closing slash\nYou can close this issue as it looks working properly and issue solved.\n. ",
    "goodies4uall": "Wow took an hour to find this one out. Why did we decide to make this propery default to false?. ",
    "andreialecu": "Bump. now with angular2 being in beta this is a big problem when using webpack + html-loader, when in minification mode. It will fail the build.\n. I didn't try this, but maybe [ /\\*/, /[^=]/ ] might work?\nAnother idea might be /[^a-zA-Z\\-]/\n. @alexlamsl shouldn't html-minifier work with this syntax by default without custom workarounds? \nAs far as I know those characters are legal in attributes: https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n. ",
    "doxavore": "I know of customAttrSurround which works for things like:\n<button (click)=\"deleteTodo(todo)\">X</button>\n<input [(ngModel)]=\"todoTitle\">\nusing this config:\nhtmlmin({\n  collapseWhitespace: true,\n  customAttrSurround: [\n    [/\\[/, /\\]/],\n    [/\\(/, /\\)/],\n    [/\\[\\(/, /\\)\\]/]\n  ]\n})\nHowever, I'm not sure how to handle the case of Angular 2's local variables and templates:\n<video #videoLocalVar>\n<li *nfFor=\"#item in list\">\nAre we able to allow prefixes without suffixes? I haven't had any progress after several attempts, such as adding [ /\\*/, new RegExp('') ] to the customAttrSurround.\n. ",
    "code-tree": "So AFAIK, after this patch, the current requirement for Angular 2 is:\nremoveAttributeQuotes: false, caseSensitive: true\nThis test probably then needs to be corrected? As it doesn't look like Angular supports removeAttributeQuotes: true.\n. I agree with @callumlocke. It would be nice to have a list of recommended options. Ones that have been tested well, and are guaranteed not to negatively affect all modern browsers (and most old ones).\nThis could be enabled via a --standard arg or something like that.\n. If not, at least a list of recommended options in the README?\n. After looking through them all, it seems like a safe basic config is?\njson\nremoveComments: true,\ncollapseWhitespace: true,\nconservativeCollapse: true,\n. ",
    "mmobinvestor": "Have the same problem.\nF.e.\n<?php $checked = $cust_row['gender']==1 ? 'checked' : ''; ?>\n<label class=\"radio-inline\">\n    <input type=\"radio\" name=\"gender\" value=\"2\" <?php echo $checked;?> /> \n    Male \n</label>\nor\n<?php $checked = $cust_row['gender']==1 ? 'checked=\"checked\"' : ''; ?>\n<label class=\"radio-inline\">\n    <input type=\"radio\" name=\"gender\" value=\"2\" <?php echo $checked; ?> /> \n    Male \n</label>\nBut, if we add \" \" (quotes)  it became good.\n<?php $checked = $cust_row['gender']==1 ? 'checked' : ''; ?>\n<label class=\"radio-inline\">\n    <input type=\"radio\" name=\"gender\" value=\"2\" \"<?php echo $checked;?>\" /> \n    Male \n</label>\nBut this attribute must not have quotes. That's bug!\nThe same problem is attribute  ' selected ' in  tag < option > \nI tried to solve this problem with code, which I saw at Issue 145, but this code doesn't work. I saw WARNING: TypeError: undefined is not a function Use --force to continue.\nfile Gruntfile.js\nhtmlmin: {\n        multiple: {\n            options: {\n                removeComments: true,\n                collapseWhitespace: false,\n                ignoreCustomComments: [\n                    {\n                        before: /<!--\\s+ignores[^\"-->\"]+-->/,\n                        after: /<!--\\s+\\/ignores\\s+-->/\n                    }\n                ]\n            },\n            files: [{\n                expand: true,\n                cwd: '<%= dirs.test %>/user/template/',\n                src: '*.tpl',\n                dest: '<%= dirs.test %>/user/template/'\n            }]\n        }\n    },\nfile *.tpl\n<!-- igores -->\n<input type=\"radio\" name=\"gender\"  value=\"2\" <?php echo $checked2;?> > Male </label>\n<!-- /ignores -->\n. Help Plz! Solve this problem.\n\u041e\u0447\u0435\u043d\u044c \u043d\u0443\u0436\u043d\u043e, \u0430 \u043d\u0435 \u043f\u0430\u0448\u0435\u0442 :)\n. @kangax , Juriy, can you tell smth about this problem?\nAny issue ? Plz..\n. @duncanbeevers , @kangax \nplz, help us with this bug \n. ",
    "roman-rr": "@kangax \u041f\u043e\u0434\u0441\u043a\u0430\u0436\u0438 \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430 \u043a\u0430\u043a \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a \u043c\u0438\u043d\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0432 \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043a\u043e\u0434\u0430, \u043f\u043e\u0441\u043b\u0435 \n igores  \u041a\u041e\u0414  /ignores \n\u0412\u043e\u0442 \u044d\u0442\u043e\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 html \u0444\u0430\u0439\u043b\u0430\u0445 TypeError: Object # has no method 'test'\nignoreCustomComments: [\n                    {\n                        before: /\\s+ignores[^\"\"]+-->/,\n                        after: /\\s+\\/ignores\\s+/\n                    }\n. ",
    "inetbug": "I have related issue.\nWhen I try to minify\n<li class=\"item {{item.type}}\" {% if (logged) { %}data-order=\"{{item.order}}\"{% } %}>\nhtml-minifier throw parse error.\nI try resolve this by using  <!-- htmlmin:ignore -->, but it doesn't work.\n. <ul class=\"items\">\n{% items.forEach(function (item) { %}\n    <!-- htmlmin:ignore -->\n    <li class=\"item {{item.type}}\" {% if (logged) { %}data-order=\"{{item.order}}\"{% } %}>\n        {{item.content}}\n    </li>\n    <!-- htmlmin:ignore -->\n{% }); %}\n</ul>\n```\n/home/inetbug/project/node_modules/html-minifier/dist/htmlminifier.js:301\n        throw 'Parse Error: ' + html;\nParse Error: \n        {{item.content}}\n    \n htmlmin:ignore \n{% }); %}\n\n```\n. ",
    "drogobetski": "I'm having the issues and no luck!\n. ",
    "fed239": "Same bug with underscore templates. Here is my code:\n```\n htmlmin:ignore \ndata-x=\"<%= x %>\"<% } %>\n\n htmlmin:ignore \n```\n. \n",
    "xuanfeng": "So who have the solutions?\n. I have modify the htmlminifier.js by myself and the <!-- htmlmin:ignore --> can use.\nSee detail: https://github.com/kangax/html-minifier/issues/376\n. @hwoarangzk This is my solution with the issue . https://github.com/xuanfeng/fix-html-minifier-with-htmlmin-ignore\n. I had modify the htmlminifier.js by myself. And the  htmlmin:ignore  work well. The code I didn't pull and there are diff code.\n```\n@@ -161,6 +161,8 @@\n var startTag = startTagForHandler(handler);\n var attr = attrForHandler(handler);\n\n\n//  htmlmin:ignore \n\nvar isIgnoringSpecialTag = false;\nwhile ( html ) {\n   chars = true;\n@@ -173,7 +175,9 @@\n       index = html.indexOf('-->');\n   if ( index >= 0 ) {\n\n\nif ( handler.comment ) {\nif(/ htmlmin:ignore /.test(html.substr(0, 23))){\nisIgnoringSpecialTag = true;\n}else if ( handler.comment ) {\n           handler.comment( html.substring( 4, index ) );\n         }\n         html = html.substring( index + 3 );\n@@ -181,8 +185,19 @@\n       }\n     }\n\n\n\n+\n+        if(isIgnoringSpecialTag){\n+          text = html.substr(0, html.search(/ htmlmin:ignore /));\n+          html = html.substring(html.search(/ htmlmin:ignore /) + 23);\n+          if ( handler.chars ) {\n+            handler.chars(text, prevTag, nextTag);\n+          }\n+          isIgnoringSpecialTag = false;\n+          chars = false;\n+        }\n+\n         // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n-        if ( /^<![/.test( html ) ) {\n+        else if ( /^<![/.test( html ) ) {\n           index = html.indexOf(']>');\n       if (index >= 0) {\n\n@@ -1397,7 +1412,7 @@\n     global.minify = minify;\n   }\n-}(typeof exports === 'undefined' ? this : exports));\n+}(this));\n/*!\n  * HTMLLint (to be used in conjunction with HTMLMinifier)\n```\nAnd the piece of code\nline 155\n```\n  var HTMLParser = global.HTMLParser = function( html, handler ) {\n    var index, chars, match, stack = [], last = html, prevTag, nextTag;\n    stack.last = function() {\n      var last = this[ this.length - 1 ];\n      return last && last.tag;\n    };\nvar startTag = startTagForHandler(handler);\nvar attr = attrForHandler(handler);\n// <!-- htmlmin:ignore -->\nvar isIgnoringSpecialTag = false;\n\nwhile ( html ) {\n  chars = true;\n\n  // Make sure we're not in a script or style element\n  if ( !stack.last() || !special[ stack.last() ] ) {\n\n    // Comment:\n    if ( /^<!--/.test( html ) ) {\n      index = html.indexOf('-->');\n\n      if ( index >= 0 ) {\n        if(/<!-- htmlmin:ignore -->/.test(html.substr(0, 23))){\n          isIgnoringSpecialTag = true;\n        }else if ( handler.comment ) {\n          handler.comment( html.substring( 4, index ) );\n        }\n        html = html.substring( index + 3 );\n        chars = false;\n      }\n    }\n\n\n    if(isIgnoringSpecialTag){\n      text = html.substr(0, html.search(/<!-- htmlmin:ignore -->/));\n      html = html.substring(html.search(/<!-- htmlmin:ignore -->/) + 23);\n      if ( handler.chars ) {\n        handler.chars(text, prevTag, nextTag);\n      }\n      isIgnoringSpecialTag = false;\n      chars = false;\n    }\n\n    // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n    else if ( /^<!\\[/.test( html ) ) {\n      index = html.indexOf(']>');\n\n      if (index >= 0) {\n        if ( handler.comment ) {\n          handler.comment( html.substring(2, index + 1 ), true /* non-standard */ );\n        }\n        html = html.substring( index + 2 );\n        chars = false;\n      }\n    }\n\n    // Ignored elements?\n    else if ( /^<\\?/.test( html ) ) {\n      index = html.indexOf( '?>', 2 );\n      if ( index >= 0 ) {\n        if ( handler.chars ) {\n          handler.chars( html.substring( 0, index + 2 ) );\n        }\n        html = html.substring( index + 2 );\n      }\n    }\n\n    else if ( /^<%/.test( html ) ) {\n      index = html.indexOf( '%>', 2 );\n      if ( index >= 0 ) {\n        if ( handler.chars ) {\n          handler.chars(html.substring( 0, index + 2) );\n        }\n        html = html.substring( index + 2 );\n      }\n    }\n\n    // Doctype:\n    else if ( (match = doctype.exec( html )) ) {\n      if ( handler.doctype ) {\n        handler.doctype( match[0] );\n      }\n      html = html.substring( match[0].length );\n      chars = false;\n    }\n\n    // End tag:\n    else if ( /^<\\//.test( html ) ) {\n      match = html.match( endTag );\n\n      if ( match ) {\n        html = html.substring( match[0].length );\n        match[0].replace( endTag, parseEndTag );\n        prevTag = '/' + match[1].toLowerCase();\n        chars = false;\n      }\n\n    }\n    // Start tag:\n    else if ( /^</.test( html ) ) {\n      match = html.match( startTag );\n      if ( match ) {\n        html = html.substring( match[0].length );\n        match[0].replace( startTag, parseStartTag );\n        prevTag = match[1].toLowerCase();\n        chars = false;\n      }\n    }\n\n    if ( chars ) {\n      index = html.indexOf('<');\n\n      var text = index < 0 ? html : html.substring( 0, index );\n      html = index < 0 ? '' : html.substring( index );\n\n      // next tag\n      tagMatch = html.match( startTag );\n      if (tagMatch) {\n        nextTag = tagMatch[1];\n      }\n      else {\n        tagMatch = html.match( endTag );\n        if (tagMatch) {\n          nextTag = '/' + tagMatch[1];\n        }\n        else {\n          nextTag = '';\n        }\n      }\n\n      if ( handler.chars ) {\n        handler.chars(text, prevTag, nextTag);\n      }\n\n    }\n\n  }\n  else {\n\n    stackedTag = stack.last().toLowerCase();\n    reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)<\\/' + stackedTag + '[^>]*>', 'i'));\n\n    html = html.replace(reStackedTag, function(all, text) {\n      if (stackedTag !== 'script' && stackedTag !== 'style' && stackedTag !== 'noscript') {\n        text = text\n          .replace(/<!--([\\s\\S]*?)-->/g, '$1')\n          .replace(/<!\\[CDATA\\[([\\s\\S]*?)\\]\\]>/g, '$1');\n      }\n\n      if ( handler.chars ) {\n        handler.chars( text );\n      }\n\n      return '';\n    });\n\n    parseEndTag( '', stackedTag );\n  }\n\n  if ( html === last ) {\n    throw 'Parse Error: ' + html;\n  }\n  last = html;\n}\n\n// Clean up any remaining tags\nparseEndTag();\n\nfunction parseStartTag( tag, tagName, rest, unary ) {\n  var unarySlash = false;\n\n  while ( !handler.html5 && stack.last() && inline[ stack.last() ]) {\n    parseEndTag( '', stack.last() );\n  }\n\n  if ( closeSelf[ tagName ] && stack.last() === tagName ) {\n    parseEndTag( '', tagName );\n  }\n\n  unary = empty[ tagName ] || !!unary;\n\n  var attrs = [];\n\n  rest.replace(attr, function () {\n    var name, value, fallbackValue, customOpen, customClose, customAssign, quote;\n    var ncp = 7; // number of captured parts, scalar\n\n    // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n    if (IS_REGEX_CAPTURING_BROKEN && arguments[0].indexOf('\"\"') === -1) {\n      if (arguments[3] === '') { arguments[3] = undefined; }\n      if (arguments[4] === '') { arguments[4] = undefined; }\n      if (arguments[5] === '') { arguments[5] = undefined; }\n    }\n\n    name = arguments[1];\n    if ( name ) {\n      customAssign = arguments[2];\n      fallbackValue = arguments[3];\n      value = fallbackValue || arguments[4] || arguments[5];\n\n      if (customAssign) {\n        quote = arguments[0].charAt(name.length + customAssign.length);\n        quote = (quote === '\\'' || quote === '\"') ? quote : '';\n      }\n\n    }\n    else if ( handler.customAttrSurround ) {\n      for ( var i = handler.customAttrSurround.length - 1; i >= 0; i-- ) {\n        name = arguments[i * ncp + 7];\n        customAssign = arguments[i * ncp + 8];\n        if ( name ) {\n          fallbackValue = arguments[i * ncp + 9];\n          value = fallbackValue\n            || arguments[i * ncp + 10]\n            || arguments[i * ncp + 11];\n          customOpen = arguments[i * ncp + 6];\n          customClose = arguments[i * ncp + 12];\n          break;\n        }\n      }\n    }\n\n    if ( value === undefined ) {\n      value = fillAttrs[name] ? name : fallbackValue;\n    }\n\n    attrs.push({\n      name: name,\n      value: value,\n      escaped: value && value.replace(/(^|.)(\"+)/g, function(match) {\n        return match.replace(/\"/g, '&quot;');\n      }),\n      customAssign: customAssign || '=',\n      customOpen:  customOpen || '',\n      customClose: customClose || '',\n      quote: quote || ''\n    });\n  });\n\n  if ( !unary ) {\n    stack.push( { tag: tagName, attrs: attrs } );\n  }\n  else {\n    unarySlash = tag.match( endingSlash );\n  }\n\n\n  if ( handler.start ) {\n    handler.start( tagName, attrs, unary, unarySlash );\n  }\n}\n\nfunction parseEndTag( tag, tagName ) {\n  var pos;\n\n  // If no tag name is provided, clean shop\n  if ( !tagName ) {\n    pos = 0;\n  }\n  else {\n    // Find the closest opened tag of the same type\n    var needle = tagName.toLowerCase();\n    for ( pos = stack.length - 1; pos >= 0; pos-- ) {\n      if ( stack[ pos ].tag.toLowerCase() === needle ) {\n        break;\n      }\n    }\n  }\n\n  if ( pos >= 0 ) {\n    // Close all the open elements, up the stack\n    for ( var i = stack.length - 1; i >= pos; i-- ) {\n      if ( handler.end ) {\n        handler.end( stack[ i ].tag, stack[ i ].attrs );\n      }\n    }\n\n    // Remove the open elements from the stack\n    stack.length = pos;\n  }\n}\n\n};\n```\n. ",
    "shangcloud": "it appear error 'msg = [Error: Parse Error: <= 2 }}',how can i fix it?\nmy code is \ncustomAttrSurround: [\n        [/\\{\\{.+/, /\\}\\}/]\n ]\n{{ if:  ${a} <= 2 }} <div></div> {{ /if }}\n. ",
    "jantimon": "Same here - any updates?\n. Same as #84 \n. I don't understand your question - I didn't delete anything.\n. The parser is required: HTMLParser = require('./htmlparser').HTMLParser; \nhttps://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js\n. Cool :)\n. ",
    "feross": "You don't need the last bullet point:\n- \"Then in package.json: \"browser\": \"dist/htmlminifier.js\".\"\nBrowserify users who do require('htmlminifier') will have no problems, as browserify will just browserify the file. The dist/htmlminifier.js is just for users who use bower, component, or just want a prebuilt script to use.\n. No problem :)\n. ",
    "ibc": "Yes, sorry, you are right.\nThanks.\n. IMHO the design should be:\n- Create the project as a pure Node project (without concat at all).\n- Test the project (test units) with nodeunit or similar (this is, test the Node project with all its files/modules, rather than testing the \"browser\" library version).\n- browserify the project with --standalone NAME_TO_EXPORT_TO_WINDOW.\nPeriod. But honestly, a good library cannot rely on concatenating files into a single one.\n. > What's wrong with concat?\nBuilding a library with \"concat\" is like doing copy&paste. Those files have no sense by them alone. Even worse: most probably they are syntactically incorrect, so you cannot process them with JSHint/JSLint.\nConcatenating files is not the way to do nothing in JavaScript nowadays. Again: code it as if it was a pure Node project, make your project \"export\" something (via module.exports) and then browserify the whole code with browserify.\n\nWhy is it bad specifically for \"browser-suitable\" library? And what do you mean by \"browser-suitable\"?\n\nA Node project is composed of external modules (libraries) and internal modules (which in fact are other files under the lib/ folder). All those \"dependencies\" (including both external and internal modules) are loaded using require() (similar to require in Ruby or import in Python). A Node project \"exports\" something. In fact each Node library and each internal file under a Node project lib folder export something. This is achieved by settings module.exports.\nAfter the Node project is done, a Grunt o gulp task can easily run browserify on it to generate a single JavaScrip file which contains all the dependencies in it. This is NOT a simple \"concat\" mechanism at all. In fact, the resulting \"bundle\" still keeps all the calls to the function require() and module.exports.\nrequire() and module.exports do not exist in vanilla JavaScript (they are defined in CommonJS and will exist in ECMAScript6), but browserify defines them at the top of the bundle (the browserified file \"suitable for a browser\").\n\"Suitable for a browser\" means that you can use it as usual within your HTML:\n<script src=\"js/html-minifier.bundle.js\"></script>\nTake a look to this project in which I'm co-author: JsSIP.\nMonths ago it used concat which was unmaintainable. Now it is a pure Node project and includes a grunt-browserify task to build the \"browserified\" version, which you can find on the builds/ folder:\n- https://github.com/versatica/JsSIP/tree/master/builds\nFor a simpler example, take a look to this other project: https://github.com/ibc/args2object (but it is not a good example since its source file is a single JS file, but let's imagine there are more files):\n- If I want to use such a args2object library in my Node project I do:\n```\n$ npm install args2object\n// in my Node files:\nvar args2object =  require('args2object');\n```\nThis is, I do NOT need to do require for a \"concatenaded\" file. It is better to use the module as a pure Node module. Let's just use the browserified file for those who code web applications and load the JavaScript files in the old way, this is:\n<script src=\"js/A.js\"></script>\n<script src=\"js/B.js\"></script>\n<script src=\"js/D.js\"></script>\n<script src=\"js/C.js\"></script>\n(oppss, error because D.js depends on a global window.C object defined by C.js (which is loaded after D.js...). \nI've learnt all this stuff about Node (and building browser suitable libraries from a Node project) recently, and I cannot live without it now.I strongly think this is the way to go today.\nFor example, all the stuff you do at https://github.com/kangax/fabric.js/blob/master/dist/fabric.require.js is much easier (and robust) if you code as I suggest above and them use browserify to build such a bundle.\n. @kangax I've forked the project and will try to make a PR with a new \"Node-based\" design. However the fact that test units require \"qunit\" (which internally requires \"pantomjs\") annoys me.\nTest units in this library are supposed to take a string, produce another string and match them with a expected string. No more. There is no need for having a browser emulation within it. Is there something wrong in using any other testunit library that does not depend on Phantomjs? Phantomjs is not relieable, it fails to load some JS files (for example all those generated with browserify), sometimes it fails to install, etc etc, and it is not needed at all for testing html-minifier. I will get rid of it in my fork and use nodeunit instead.\n. ",
    "thany": "Yes, that would be a great little thing to have :)\nA little side note though: in my case the newlines weren't removed either, even though that should've definitely worked, looking at the docs.\n. ",
    "askuzminov": "If html is CRLF, need to remove \\r.\nattrValue = attrValue.replace(/\\n+|\\r+|\\s{2,}/g, '');\n. ",
    "bryanerayner": "This is an issue which especially affects Windows users. If the PR was only closed for lack of test cases being added, I'll gladly add some\n. Perhaps a better method would be trimWhitespace(), then perform the regex on the resulting string?\n. ",
    "luisrudge": "still broken.\n. ",
    "bfred-it": "Ideally it should have a whitelist of collapsable attributes vs. tags. Like in this case, just because the attribute is readonly, it doesn't mean that it should be collapsed (if that's what's happening)\n. Similar to #375\nPerhaps instead of allowing invalid HTML and prompting a visit from Zalgo, if you expect possibly-invalid HTML files, maybe pass them through something like HTML Tidy first.\n. I agree with @duncanbeevers here, -1 to this\u2026 unless you plan on going the PostCSS route (parser separate from the plugins)\n. It's because this is not valid HTML\n\nHTMLMinifier can't work with invalid or partial chunks of markup\n. @hugowetterberg This is open source. Free. If you expect things to happen, do them yourself\u2026 or just fix your HTML, it's more desirable anyway.\n. @hwoarangzk I understand the issue, sorry if I was too harsh. Just so you know, \"Really expect it coming soon\" could have been \"I hope it will be fixed soon,\" it sounds better :)\n\nThe code you posted in #385 is not valid, as you can test on http://validator.w3.org/nu/\n\n. It looks like a recurring problem (with templates) that #382 could fix :-/\n. This definitely shouldn't be part of a minifier.\n@LEDfan use something like ssi on the HTML files before passing them to html-minifier\n. Invalid HTML is not supported. Duplicate of #375 (or vice versa)\n. Not sure of what the problem is, in my test the output is:\njs\n{% extends './basetpl/layout-base.swig' %}{% block header %}<style></style>{% endblock %}\nno colons\n. Self-closing tags are not part of HTML, but XHTML\u2014which html-minifier doesn't seem to officially support.\n. Browsers accept all kinds of invalid HTML (and XHTML); supporting all of it is an insane amount of work. The alternative would be using a headless browser to parse the HTML but that would slow things considerably and would lack other features.\nYou can use the module w3cjs to find those errors instead. \n. According to the docs, you should be able to use the customAttrAssign array to make that work.\n. While it probably shouldn't hang like that, the docs say that\n\nHTMLMinifier can't work with invalid or partial chunks of markup\n\nAlso, looks like a duplicate of #375\n. Going through other issues, it looks like this could be a solution to:\n- #378 + #353 + #385: <%\u2026%> = UglifyJS.minify(content)\n- #336: <?php\u2026?> = content // don't minify at all\n. hmmm can't find how to allow custom tags to be parsed. How would I use SVGO? (example in my first post)\n. But that's not what I meant by custom with this issue, I meant custom tags, not custom processors :-/\nIs my example in the second comment feasible?\n. I'll try next week, sorry for the delay\n. Okay, I tested it and it works correctly. I also added more explicit error messages, I hope I didn't go overboard.\n. Can you show the code where this appears? I think customAttrSurround only works in attributes\n. ",
    "mieszko4": "I think that ignoreCustomFragment is good enough.\n. ",
    "artuska": "Well, it is not a bug, there is nothing to reproduce, everything is working as expected.\nI have collapseWhitespace option set to true.\nIf I have a bunch of any block level elements in my HTML: div, p, etc \u2014 they are collapsing leaving no spaces between them:\noriginal:\n<section>\n    <header>Header</header>\n    <div>Div</div>\n    <p>Paragraph</p>\n</section>\nhtmlmin:\n<section><header>Header</header><div>Div</div><p>Paragraph</p></section>\nIf I have bunch of any inline level elements: button, span, b, i, etc. \u2014 they are collapsing with 1 space between them:\noriginal:\n<section>\n    <button>Button</button>\n    <em>Em</em>\n    <span>Span</span>\n</section>\nhtmlmin:\n<section><button>Button</button> <em>Em</em> <span>Span</span></section>\nSo, I'm just asking for an option to collapse white spaces between all type of tags, not only block-level tags \u2014 option like collapseWhitespace but which is more aggressive:\noriginal:\n<section>\n    <header>Header</header>\n    <div>Div</div>\n    <button>Button</button>\n    <em>Em</em>\n    <span>Span</span>\n</section>\nhtmlmin:\n<section><header>Header</header><div>Div</div><button>Button</button><em>Em</em><span>Span</span></section>\n. Thank you, that would be great! Should I close this issue?\n. ",
    "AleksueiR": ":+1: \n. ",
    "Njke": ":+1: Any progress on that?\n. Btw, here is a quick fix, using gulp-replace (just add this after .pipe(htmlmin(...))):\njs\n.pipe(replace(/>\\s+</g, '><'))\n. ",
    "sapics": "Following, white-spaces around inline tag might remove, isn't it? (need to add new options like removeInlineTagWhitespace)\n``` diff\n// https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js#L59\n-      || (prevTag.substr(0, 1) === '/' && tags.indexOf(prevTag.substr(1)) === -1))) {\n+      || (prevTag.substr(0, 1) === '/' && (options.removeInlineTagWhitespace || tags.indexOf(prevTag.substr(1)) === -1)))) {\n// https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js#L64\n-      || (nextTag.substr(0, 1) !== '/' && tags.indexOf(nextTag) === -1))) {\n+      || (nextTag.substr(0, 1) !== '/' && (options.removeInlineTagWhitespace || tags.indexOf(nextTag) === -1)))) {\n```\n. ",
    "eldiablolives": "yeah, i figured, I think its due to not being able to find a closing tag >, and then other tags come in and the whole thing explodes (but silently, which is the problem in fact) I'd contribute some code but I'm late on my delivery. I got the system to run btw, by removing all the <'s the problem is if ever it bombs along the line I won't have a way to know. I'd suggest instead of returning a parsed text as var res = myFunc(), you do var = res myFunc(..., callback -> (err, html)) then you're backward compatible and ready for error handling (even ugly one) just as long as it doesn't explode\n. that's a theological debate, of course it should and if you're doing simple html pages that's easy to run but if you're doing a server script that includes dozens of templates, then you add some DB content in the mix and you pull external html-ready content (syndication) you get a hodgepodge of html, which is the key reason why one would want it all minimised as it looks like dogs dinner once is all built and riddled with comments, spaces and other crap. We can't just assume coders (like me) are not idiots, that's wishful thinking on the other end as all programs should be able to exit gracefully and handle their own shit, i think your library is the big daddy, it does the job amazingly i've got 50ms/page end to end (which includes EJS, db and other back end nonsense) and thats pretty good in my book on my macAir. I promise one day I'll sit down and write a decent html parser (i've been promising that to myself for the last 10+ years lol)\n. ",
    "honzahommer": "I need this run under Grunt :-(\nOn Tue, Dec 16, 2014 at 1:57 PM, Juriy Zaytsev notifications@github.com\nwrote:\n\nI'm not very familiar with Grunt, but you run HTMLMinifier as in\ninstructions https://github.com/kangax/html-minifier#nodejs:\nvar minify = require('html-minifier').minify;var result = minify('foo', {\n  removeAttributeQuotes: true\n});\nresult; // 'foo'\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/309#issuecomment-67155575\n.\n\n\nBest regards,\nHonza Hommer\nDid you see my new website \u2013 www.honzahommer.cz\nhttp://www.honzahommer.cz?\n. ",
    "michaeldewayneharris": "Seems to be working properly now.\n. ",
    "efkan": "Thank you for your interest. I've tried. \nInput codes;\nvar app = express();\n// CONFIGURE APP \napp.set('view engine', 'ejs');\napp.set('views', path.join(__dirname, 'views'));\nOutput codes\nvar app = express(); // CONFIGURE APP app.set('view engine', 'ejs'); app.set('views', path.join(__dirname, 'views'));\n//CONFIGURE APP still here :(\n. @silverwind, thank you for your respond.\nIf there is possible a tool that is all-in-one I prefer that. I'm already using 'minifier' for JS files and I'm using html-minifier for html files. However my files (like EJS files) included HTML and Javascript codes as nested. For that reason I'm looking for a complete solution :)\n. Thank you. If I can't find any solution properly I'll try..\n. Hi @duncanbeevers, \nThank you for your response. I remember I used to html-minifier with my project. But I can't remember \"how could I do\" :)  This reason maybe minifyJS. Thank you again. I'll try that :)\n. ",
    "silverwind": "You're probably looking for a JS minifier, your code minifies correctly when wrapped in a <script> tag.\n. Well, your code isn't valid HTML, so html-minifier won't work on it. If you really have HTML strings inside your JS (which is bad practice), manually run the strings through html-minifier.\n. The test failure comes down to inline styles not being minified, probably because the style attribute string likely isn't treated as valid CSS in itself.\n@jakubpawlowicz should style contents without a selector still be supported? Here's the nonworking test:\njs\ncleanCSS.minify('color: red; background-color: yellow; font-family: Verdana, Arial, sans-serif').styles\n// -> 'color: red; background-color: yellow; font-family: Verdana, Arial, sans-serif'\n. Wrapping the style string in a * {} works as expected, by the way:\n``` js\nnew (require(\"clean-css\"))().minify(\"color: red; background-color: yellow; font-family: Verdana, Arial, sans-serif\").styles\n// -> 'color: red; background-color: yellow; font-family: Verdana, Arial, sans-serif'\nnew (require(\"clean-css\"))().minify(\"{color: red; background-color: yellow; font-family: Verdana, Arial, sans-serif}\").styles\n// ->  '{color:red;background-color:#ff0;font-family:Verdana,Arial,sans-serif}'\n```\n. I guess we'd need to wrap, minfiy and unwrap the contents of an inline style now. I could do a PR, unless anyone else has a better idea :)\n. @XhmikosR #317 done\n. If you're interested, I could add some release automation tasks to the Gruntfile, which could do the tag, push and publish tasks, leaving only the changelog to be written. It would require a few more devDeps thought.\nSee the patch, minor, major tasks in one of my Gruntfiles.\n. @sindresorhus Nice tip. Unfortunately not enough for this project because the version string needs to be replaced in 3 files in addition to package.json.\nI've yet to find a suitable grunt module that handles everything I need here (bump, replace, git tag).\n. There's an unhandled version tag in index.html, which is the issue.\n. With grunt-replace, how would you obtain the replacement string (the new version, set by a previous task).\n. The furthest I got was to use grunt-version with custom regular expressions, which did the package.json tag and html replace fine, but that left me wondering how to obtain the version for an upcoming git tag task. Sometimes I really hate grunt.\n. FYI, I found the cause for my heroku dependency mess: heroku defaults to npm 1.4.28 (the version packaged with node), which was wrongly resolving the clean-css dependency for this module to 3.x because my module itself depended on that version. After setting heroku to install npm 2.1.x, it correctly installed both 2.x and 3.x.\n. I don't have an immediate need any more, so closing this. Regarding automation: It could be done in grunt but would likely require at least 2-3 extra devDeps, which I think would be module bloat for such a simple job.\n. This is definitely not valid CSS. You can't use HTML escapes in CSS. I see this:\n``` js\n\nnew (require(\"clean-css\"))().minify(\"a{font-family:\"Helvetica Neue\" , \"Helvetica\" , Helvetica , Arial , sans-serif}\").styles\n'a{font-family:&quot}'\n```\n\nIf anything, this should be brought up to clean-css, but I doubt the author wants to include hacks for this.\n. Unfortunately not, with your regex, I get a weird space introduced:\nhtml\n<span class=\"sprite sprite-{{sprite}}\"></span>\nturns into\nhtml\n<span class=\"sprite sprite- {{sprite}}\"></span>. Here are the minimal options with which I can reproduce:\n````js\nconst minify = require('.').minify;\nconst opts = {\n  collapseWhitespace: true,\n  ignoreCustomFragments: [/{{.*?}}/],\n  sortClassName: true,\n};\nconsole.log(minify(<span class=\"sprite sprite-{{sprite}}\"></span>\n  <span class=\"{{sprite}}\"></span>, opts));\nWhich logs:html\n \n```. I'm working around this now by using this replacement after.minify`:\n````js\n\n\" {{a}}  {{b}}  {{c}} \".replace(/(>|^|}}) ({{|<|$)/g, \"$1$2\")\n'{{a}}{{b}}{{c}}'\n````. > trimCustomFragments is applied without any semantic knowledge, i.e. whether it's within an attribute value or a text node, so at least extending that would involve some heavylifting.\n\nAdding this knowledge to trimCustomFragments sounds like a proper solution. I think collapseWhitespace already works like that (e.g. it knows if trimmable whitespace is in a attribute value or not).. By the way: Your regex seems to have a few unintended matches \ud83d\ude09 \nhttps://regex101.com/r/COQsIr/1. Indeed it's not neccesary in that example, but I have it there to guard against issues like this one, which is a possibilty (thought, avoidable by using single quotes).. Feel free to close the issue if you think this is too hard to fix. I'm quite happy with my workaround :). Looking good, I'll test that further.\nOne tweak: {{2,}.*?[\"'].*?}{2,} so it also matches {{{triple}}} and more curly pairs.. Did one more tweak so it also matches multi-line fragments: /{{2,}[\\s\\S]*?[\"'][\\s\\S]*?}{2,}/:\n{{ some\n    fragment }}\nNow I've got to manually trim whitespace inside these fragments, but that's expected :). I don't have much experience with them either, but I noticed it though a stray aria-hidden=true I had in my code. Other booleans include aria-busy, aria-checked, aria-disabled just to name a few (scan for true/false in the spec).\nAs for testing them, it might be possible to run a audit with this Chrome extension.\n. Probably not a good idea after all. While the HTML5 spec includes the feature of minimized boolean attributes, WAI-ARIA does not have such a definition and strongly requires true/false values, so I'd expect parsers (mostly screen readers) to probably not honour this HTML5 feature.. Yeah, yours looks cleaner with one less capture group, and seems to work fine:\nhttp://regexr.com/3a4d1\nhttp://regexr.com/3a4cu\n. Actually just noticed a small mistake in mine, the first * inside the capture group is unnecessary. So please do a PR :)\n. While it doesn't really matter with this input, I prefer using non-greedy .*? so it does not match unintential parts when multiple {{}} expressions are on the same line, for example: https://regex101.com/r/M50E40/1. ",
    "jakubpawlowicz": "I'm not familiar with this code but can check in the evening. Unless someone fixes it sooner!\n. @silverwind as mentioned in https://github.com/jakubpawlowicz/clean-css/issues/418 such content is deemed invalid now, but :100: for wrapping it in a dummy selector.\n. ",
    "danielwg": "This bug appeared to be fixed by 2a57787ea5b0310c41e992dd7b073f3fe5c0f145\n. ",
    "rainboxx": "Waiting for this fix to appear in a release. Is there already a schedule for releasing v0.6.10?\n. Awesome, thanks!\n. ",
    "AshKyd": "My apologies, I seem to have misunderstood what's going on here. The tests were passing with this change, but it looks like it might have been a fluke rather than desired behaviour.\nI also can't reproduce the issue I was having on NPM, so I'm closing this one. Edit: looks like it's specifically an issue with Browserify not being able to find the file. I'll look into it further and I'll come back to you with another PR if I work out what's going on\n. ",
    "inghamc": "I've got a use case (someone please tell me if it's a bad one or there's a better way to do this):\nWe avoid using HTML id= attributes as a code smell, but our client-side unit tests would be far less brittle with \"id\"s.  So we use ... in our HTML and '[testid=\"emailStatus\"]' in our unit test selector rather than hoping 'form span' will always return the right element.  That's great for tests but we don't need testid attributes in our minified HTML.\n. ",
    "dexcell": "+1 on this\n. ",
    "HitkoDev": "@duncanbeevers That works, but then you have to:\n1. Parse the code into a tree\n2. Check each attribute for minification\n3. Write the tree back\n4. Parse the (minified) code again\n5. Check for unwanted attributes and remove them\n6. Write the tree back again\nSure some simple cases could be solved with regular expressions, but I really shouldn't have to explain why handling HTML using RegExp is bad. The bottom line is that ability to blacklist attributes would greatly improve overall application performance by avoiding the need to parse code multiple times, by avoiding the need to minify unwanted attributes, and by reducing the html-minifier output.\n. Looking at src/htmlparser.js it seems that currently HTML is parsed using a combination of linear parser and dynamic regular expressions for matching segments of code. \nAnother thing @duncanbeevers, I believe removing data-, aria-, ng- and similar attributes belongs under the basic function of HTML minification.\n. ",
    "brutalcrozt": "@kangax what currently we use? regex or parser?\nand agreed if use parser is the best, but currently I was use regex on the backend for the shake of time.\nit's nice feature to have if but you have to give clear implementation in this one. I am also not clear about remove redundant and empty attribute, what makes you think it will happen? because of typo? \n. ",
    "davidhund": "This would be awesome. At the moment I'm trying to watch ./src/*.html and have something like: html-minifier -o ./dist/* <STDIN>\nIf html-minifier picks up STDOUT from some other process (such as watch) adding an output-folder would be enough, no?\nAnyway: 'globs' would be awesome: html-minifier ./src/**/*.html ./dest\n. ",
    "simonewebdesign": "I'm writing an npm script and I tried doing something like:\nhtml-minifier -o dist/* source/*.html\nBut it's not producing anything. Would be great indeed to have a output-folder flag.\n. ",
    "vinyanalista": "+1 for that feature! html-minifier seems to be the best HTML compressor out there!\n. I know almost nothing about Node.js, but I know a little about Shell Script, so I made this script to minify HTML files from a folder and its subfolders:\n``` bash\n!/bin/bash\nminify_html.sh\nif test $# -ne 2\nthen\n    echo \"usage: sh minify_html.sh sourcedir destdir\";\n    exit 1;\nfi\nset -xv\nfor FOLDER in find $1 -type d\ndo\n    mkdir -p \"$2/${FOLDER#$1}\";\ndone\nfor HTML_FILE in find $1 -type f -name \"*.html\"\ndo\n    html-minifier --remove-comments -o \"$2/${HTML_FILE#$1}\" \"$HTML_FILE\";\ndone\nfor ASSET in find $1 -type f ! -name \"*.html\"\ndo\n    cp \"$ASSET\" \"$2/${ASSET#$1}\";\ndone\n```\nHow to use it:\nsh minify_html.sh sourcedir destdir\nWhat it does in those three for loops:\n1. Replicate the folder structure\n2. Minify all the HTML files found\n3. Copy all the other files\nBut it does not seem to work... =/ I'm trying to minify my personal website, and it seems like the html-minifier command crashes for the second file found in the second for loop, which is /blog/2012/index.html. The first and the third for loops work as expected.\nAm I doing something wrong? Did I forget something?\n. --remove-comments is just an example. Do I need to tell html-minifier everything I want it to do? Or there is something like a default config? I realized that if I pass it only the input and the output files, it seems actually to just copy the file. What if I want it to perform exactly like the online version?\n. ",
    "ramonck": "Created a pull request to fix this, was generating a pain for me, hope this helps others as well, the idea is to use a --file-ext html, so you only parse what you want.\nhttps://github.com/kangax/html-minifier/pull/680\nBest Regards,\n. I fixed it I think :), please check.\n. ",
    "sroe": "Having the same problem with angular html expression {{ 5 < 6 }}.\n:+1: for fixing or having a ignoreflag?\n. Okay best solution on this: #254 (using &lt; instead of < and so you could also use &gt; for >) for me that is enough :+1: if other solutions are hard to implement.\n. ",
    "v1vendi": ":+1: for the fix\n. ",
    "caulagi": "I can reproduce the problem with this chunk also.  It seems to be caused by the combination of $ and some invalid markup (sorry!) -\n<div>\n  <input ng-model=\"$parent.rate\" tooltip-trigger:\"mouseenter\">\n</div>\n. ",
    "zackiles": "I can confirm this.\n. ",
    "Meligy": "@kangax this is not a duplicate of #332, because, um.. this is #332.\n. Have you tried hte preserveLineBreaks option?\n. Hi @kangax - sorry for not closing this earlier.\nActually, the team that needed this already moved to Polymer 1.0, which doesn't have core-style anymore. And even later my consulting gig with that team was finished.\nBy now most people using Polymer 0.5 should be using Polymer 1.0 anyway. So, I'll just close this one.\nThanks for following up.\n. ",
    "emirotin": "Encountered a similar issue - I had an equal sign missing between the attribute name and value:\n<input type=\"number\" max\"{{ some angular interpolation }}\">\n. ",
    "johngrogg": "Similarly, I accidentally had replaced a = with a - in an html attribute. I agree with @hugowetterberg that this all boils down to finding a way to catch infinite loops and report back at least some sort of generic error instead of just hanging.\nHas anyone been able to track down where in the code the hanging is occurring? Is it lots of places depending on the mistake in the html code, or would there be one or two spots that are the culprits?\n. ",
    "GriffinSauce": "@hugowetterberg I'm not fully following you but are you suggesting that invalid html leading to 100% cpu hang is not an issue? Because in my opinion regardless of the input, be it expected, unexpected, malformed or invalid, a module should never hang.\n. I had the same issue with the following snippet of (invalid) HTML:\n<input class=\"class-name1 class-name2\" / data-attributewithoutvalue>\nSure this is invalid HTML (due to the /) but locking the cpu at 100% is not the behaviour I'd expect.\nI can't describe the exact cause but can note some exclusions:\n- removing the / fixes it\n- removing the classnames fixes it (produces an error)\n- removing the data attribute at the end fixes it\n. ",
    "tschwartz": "@kangax Can you confirm that the test was actually the issue?\n. My apologies for opening and closing the PR numerous times. I have this bad habit of clicking the that button instead of the 'comment' button. I'm not sure why the original regex doesn't allow it but as it stands I get failures on anything that is <%=, that said I can dig into that some more if you wish.\n. @kangax @XhmikosR After thinking about this issue I have a feeling that it's not as simple as I thought it was. There are instances of both <% and <%= that are ignored by the plugin however where it is not ignoring the <%= is when an attribute and it's dynamic value are wrapped in a conditional like so:\n```\n\n    title=\"<%= btn.title %>\"\n  <% } %>\n\nSome text\n```\n\nWhat I'll do is revert my changes, run the tests with no changes to verify that the original test is indeed not broken (it probably isn't), write a test for this case and then fix it.\n. @kangax @XhmikosR I wrote the tests for this scenario however not only would the tests fail but the minification itself fails which is a problem. It would appear that the current functionality doesn't handle nesting of server-side tags within logic. I don't have the time to look into this now but would be happy to PR the test into a feature branch if you so desired and then look into it when I have more time.\n. @kangax Would you mind creating a project branch? I'm somewhat in the same boat with work so I don't have any timelines as to when this will be complete.\n. I guess it would have been better to ask you if you had a branching strategy that was more complex than just PRing into gh-pages. If you were to create a branch off of gh-pages then I could PR into that which would make it easier for you to check it out or to collaborate with others on the same feature.\n. ",
    "niksy": "+1 for this feature.\n. ",
    "valeriangalliat": ":+1: for this, had the same issue on FreeBSD while piping stuff to html-minifier (didn't have the problem on Linux though).\nBTW I \"fixed\" it temporarily with the following patch:\npatch\ndiff --git a/cli.js b/cli.js\nindex 72c59e2..e5354d9 100755\n--- a/cli.js\n+++ b/cli.js\n@@ -176,8 +176,7 @@ cli.main(function(args, options) {\n           // stdin input - typically when invoking a script without any\n           // input (for interactive stdin input).\n           // If you were to just continue, you'd create a tight loop.\n-          process.stderr.write('ERROR: interactive stdin input not supported');\n-          cli.exit(2);\n+          continue;\n         }\n         else if (e.code === 'EOF') {\n           // Happens on Windows 7, but not OS X 10.8.3:\n. @kangax Thanks for merging! Is it possible to release this on npm too? Thank you!\n. Awesome! Still not up-to-date on npm though (sorry for insisting). Or maybe the npm publish is done in some kind of automatic job, and it's just a matter of time?\n. All good! :smile:\n. If you want to reproduce this, just execute the following:\nsh\n(yes ' ' | head -4095 | tr -d '\\n'; echo '\u20ac') | html-minifier\n. ",
    "ashclarke": "In my case, I had an extra quote at the end of an opening tag:\n<div attr=\"x\"\n    attr=\"y\"\n    attr=\"z\" \"></div>\nTook me an hour to figure out what was happening D:\nThanks for raising this issue @seb-angel as I'd probably still be figuring it out.\n. ",
    "hoatle": "I'm facing the same problem.\n. ",
    "dxdc": "Here too. Same issue. Anyone found a resolution?\n. thanks @pc3b3r ... seems like a bit of a hack, but it works. I'll think about it :) ... could also get by with a simple perl find/replace after minification\n. ",
    "pc3b3r": "I moved the data into a new obj with the property \"value\"\njavascript\n$scope.opts = [\n        \"opt1\",\n        \"opt2\",\n        \"opt3\",\n        \"opt4\",\n        \"opt5\"\n    ];\n$scope.toOpts = [];\n$scope.toOpts.push({\"value\" : \"...\"});\nangular.forEach($scope.opts, function(value) {\n    $scope.toOpts.push({\"value\" : value});\n});\nand in the view something like\nhtml\n<select ng-options=\"opt.value as opt.value for opt in toOpts\"></select>\nHope it helps\n. ",
    "dciccale": "Needs rebase\n. ok, then i will just use a custom is-enabled attr. however a more powerful solution would be knowing the scope of the attribute to actually apply the minifying rule or not. this could mean a major change of course.\nor i should stick to html conventions and check for the attribute presence instead of its value.\nwhat are your thoughts?\n. My minification is also broken\noriginal html\nhtml\n<span class=\"btn btn-zen-default btn-file\" ng-class=\"{'disabled': isUploading}\">\n  <i class=\"zmdi zmdi-download\"></i>\n  <ng-transclude></ng-transclude>\n  <input type=\"file\" file-change=\"upload()\" ng-model=\"file\" name=\"file\">\n</span>\nafter minification with options\njs\nvar htmlminOpts = {\n  removeComments: true,\n  collapseWhitespace: true,\n  removeEmptyAttributes: false,\n  collapseBooleanAttributes: true,\n  removeRedundantAttributes: true\n};\nhtml\n<span class=\"btn btn-zen-default btn-file\" ng-class=\"{\\'disabled\\': isUploading}\"><i class=\"zmdi zmdi-download\"></i></span>\n<ng-transclude></ng-transclude><input type=\"file\" file-change=\"upload()\" ng-model=\"file\" name=\"file\">\nthe <ng-transclude> tag renders outside the span along with the <input> tag and should be inside.\naren't both elements inline?\n. the previous version was working (just to have in mind), I don't know what exactly changed now.\nthanks @sumitkm will try it out.. and come back\n. amazing @sumitkm it works! thanks so much\n. @alexlamsl merged doesn't mean published in this case right? :D\n. ",
    "fritx": ":+1: There is a flag named \"removeIgnored\", however, what we need seems to be \"ignoreSomething\"...\n. I am meeting the same problem, anyone could help?\n. ",
    "wankdanker": "Hi @kangax. Thank you for responding and making the change to the README. I was afraid this might be the case. Thank you for your work on this excellent module. :)\n. ",
    "aburi": "I'm getting parse errors as well with my Django templates files on code like this:\n<img src=\"{% static \"images/logo.png\" %}\">\n. Similarly with:\n<img src=\"{% static \"images/logo.png\" %}\">\n. @kangax, would you be able to provide a short example of how to use ignoreCustomFragments to ignore {{, for example? I'm not sure where to place it in my Gruntfile.js. Thanks.\n. Thanks @kangax.\n. Thanks - that worked! So I don't even need to use the customAttrSurround option.\nOn a side note, I'm trying to target every html file in a certain directory:\nfiles: {\n    'dist/*.html' : 'src/*.html'\n}\nBut it doesn't work properly, and instead creates a *.html file in the destination folder. \nDo you know how to fix this?\n. Understood. Thanks @duncanbeevers \nI'm getting parse errors again, and I assume I should be using customAttrSurround this time?\n<p{% if form.name.errors %} class='error'{% endif %}>\n      {{ form.name.label_tag }}\n      {{ form.name }}\n      {% if form.name.errors %}\n      {% for error in form.name.errors %}\n      <span class='error_msg' style='color:#ff0000'>{{ error }}</span>\n      {% endfor %}\n      {% endif %}\n</p>\n. @duncanbeevers, I tried adding a space prior to posting that, but I received the same parse error. I think it has something to do with having {{ nested inside {%. I'm not sure how to deal what that, but I'll look into it. Thanks for the help!\n. ",
    "ttelang": "html\n<div/>\nworks in Chrome. By mistake I had this in my code and couldn't detect it because it was working perfectly in Chrome. \nBut After minification this entire div was not appearing in the code. so it was very difficult for me to root cause the problem and had to waste lot of time debugging this problem.\nIt would be helpful for others if we warn / show error in case such code is encountered or atleast document this somewhere. \n. ",
    "Keenora": "Works! :) Thank you very much :+1: \n. Oh, I got it. Well, they want to stay as compatible as possible. Totally get that :) Thanks!\n. ",
    "rkpatel33": "Thanks!\n. ",
    "yuvalkarmi": "I can confirm that this is an issue.\nJust spent hours trying to debug an AngularJS app that suddenly stopped working in production (ergo post-minification). After ruling out any javascript changes, I tracked it down to a partial that's used in almost every page of the app: html-minifier was removing the closing tag for option elements that included text.\n@dben's description is reproducible, and this needs a fix.\nCheers!\n. ",
    "davideanderson": "I have just discovered and verified that the same thing is happening to dictionary tags.\n<dl>\n    <dt>something</dt>\n    <dd>anything</dd>\n</dl>\nbecomes\n<dl> <dt>something <dd>anything </dl>\n. @duncanbeevers You are correct, but I shouldn't have simplified my example so much, it appears to ALWAYS remove the trailing tag for <dd>, but it isn't always optional, as pointed out in the spec you linked.\nIn my actual project, I was intermixing <dd> tags with <accordion-group> tags in an angular+foundation project.  All of the trailing </dd> tags were stripped, even if the following tag was not a dd or dt element, making the browser assume the following element was a child of the dd element.\n. ",
    "Snugug": "Adding conservativeCollapse resolves this issue, but it shouldn't be needed for <source>\n. ",
    "hadfieldn": "@XhmikosR Please forgive my ineptitude with git. I'm not sure I'm squashing correctly. I'm going to branch a fresh repository and try again.\n. Thanks @kangax. Not sure how soon I'll have time to add some cli tests, but I'll keep this on my to-do list.\n. ",
    "Recmo": "I'm talking about the spaces around the <math> tag, what happens inside the <math> tag is irrelevant here.\nThe situation is analogous to svg. Both are valid HTML5. Both are commonly used inline in HTML. Both have significant white-space around them then. svg is currently included in the list. math is not.\nRegarding white-space collapsing in MathML itself: After trying some formulas, it seems MathML works fine with all white-space collapsed. I have not investigated this specifically.\n. ",
    "IRIDON": "example - encoding UTF8, failing - encoding UTF-8 without BOM.\n. ",
    "juking": "example: Chinese characters encoding by ANSI \nI want the original coding.\nnot UTF-8 without BOM\n. ",
    "pmendelski": "It's not so obvious when it comes to inlined css (http://stackoverflow.com/questions/5352947/how-to-escape-quotes-in-inline-styles). Thanks anyway. Great job with this repo and issue response time, thanks!\n. ",
    "PaulBGD": "Actually just did a bit of testing, guess it didn't like the\n<%= favoriteIcon + \" \" + favoriteClass %>\n. ",
    "snowindy": "At least it should complain somehow and quit instead of hanging process without a single message.\n. If you don't like adding pre-validation code you could allow thing to count milliseconds since start of processing of portion of html.\nIf for example it takes more than, say, 10s - it's definitely a html markup bug - you may report it.\n. ",
    "ecoutu": "I spent a few hours on this myself, you need to utilize the customAttrAssign option to let html-minifier know about =$ assignments. I was absolutely unable to get it to work from the command line, but I'm using a gulp build process, so it was a breeze to do it programatically:\n```\nvar html = fs.readFileSync('public/index.built.html').toString();\nvar minifiedHtml = minify(html, {\n    customAttrAssign: [/\\$=/],\n    removeComments: true,\n    collapseWhitespace: true\n});\nfs.writeFileSync('public/index.min.html', minifiedHtml);\n```\nI gave up trying to get it to minimize the css, I don't think it's possible if you are using css variables and mixins.\n. ",
    "Compufreak345": "+1 I got the same issues and am currently not using gulp. If there is any hint how I can translate the script from ecoutu to command line parameters (I tried it and failed) I would highly appreciate it. Otherwise I have to start using gulp as well, or maybe drop the grunt-bomb and try https://github.com/KK578/grunt-minify-polymer what promises fixing all the issues with css & javascript. Not sure if it's suitable, still open for ideas. Hard to find any solution to minimize a vulcanized file :0\n/edit : FYI for anyone coming here before the issue is fixed : I ended up using grunt-minify-polymer and got from 882 to 504 KB now. \n. ",
    "JosefJezek": "+1\n. ",
    "richardanaya": "Was this ever resolved?\n. ",
    "akashkrishnan": ":+1: \n. ",
    "StevenWeathers": "I second this, ESI tags are commonly used in large scale complex websites and would be lovely to not have to wrap each set of ESI tags in  htmlmin:ignore  manually, which also can leave big blocks of whitespace in the end run.\n. ",
    "futpib": "Awesome feature, I think it should not be regex/string driven though, I'd much prefer custom passes over DOM (or whatever structure is used to represent syntax trees in html-minifier). Also custom attribute minification would be useful (we have multi-line knockoutjs 'data-bind' attributes, I'm pretty sure minifyJS won't handle those properly).\n. ",
    "ma11hew28": "Yes, let's do this! :+1:\nW3C HTML5 Specification - Optional Tags\n\nAn li element's end tag may be omitted if the li element is immediately followed by another li element or if there is no more content in the parent element.\n\n...\n\nA p element's end tag may be omitted if the p element is immediately followed by an address, article, aside, blockquote, details, div, dl, fieldset, figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, header, hgroup, hr, main, menu, nav, ol, p, pre, section, table, or ul element, or if there is no more content in the parent element and the parent element is an HTML element that is not an a, audio, del, ins, map, noscript, or video element.\n. \n",
    "diegomesata": "I'm using yeoman angular. I have an angular control that have a visible attribute. ngtemplates uses htmlmin.\nMy app is: \n<wj-flex-grid-column ng-repeat=\"col in cols\"  visible=\"{{col.visible}}\"> </wj-flex-grid-column>\nBut in the dist I got: \n<wj-flex-grid-column ng-repeat=\"col in cols\" header=\"{{col.header}}\" visible> </wj-flex-grid-column>\nDo you have any idea? \nThank you\n. ",
    "ebpierce": "I believe the issue you are having is the same as described. To fix this, for now, use a different attribute name (possibly \"show\" or \"shown\", instead of \"visible\".)\n. ",
    "trisys3": "Thanks! I have no idea how to implement it, but from what I can tell you might be able to get away with putting a comment at the bottom of the HTML file, perhaps before the ending <html> or <body> tag. If we put it after, it might work, but will probably cause issues in older browsers, though I don't know how old. I doubt any browsers support HTML source maps yet, but maybe if this module used it, they would start to.\nAnother probable issue would be JavaScript-based frameworks and linters that automatically scan HTML files for comments. It'll be hard to please every single one. I don't believe JavaScript source maps trip up any major linters or frameworks, but HTML comment-parsing is much more prevalent.\n. I was not talking about that kind of \"boolean\" attribute, whose presence means true and whose absence means false. I was talking about attributes like autocomplete or draggable, which can take actual values like true or false. These attributes do not have any special Angular helpers (well, except ng-attr-, which is more general-purpose). html-minifier still collapses these attributes if they have any value outside an enum. For example, for draggable, if the value is anything but true or false, it gets collapsed to the empty string.. ",
    "xthsky": "minify should report error, not hang up.\n. ",
    "waltonryan": "Ok, then it probably is a bug. Here are my options. let me know if you would like any more info.\n```\n// package.json\n...\n\"grunt-contrib-htmlmin\": \"^0.4.0\",\n...\n```\n```\n// Gruntfile.js\n...\n    htmlmin: {\n      build: {\n        options: {\n          removeComments: true,\n          collapseWhitespace: true\n        },\n        files: [{\n          expand: true,\n          cwd: 'build/',\n          src: ['.html', 'templates//.hbs'],\n          dest: 'build/min/'\n        }]\n      }\n    }\n...\n```\nOutput Snippet:\n```\n// min/example-email.html\nhtmlBasic Email Example",
    "Kurtz1993": "Apparently this issue only occurs when custom HTML tags are present... any plans for adding custom HTML tags support?\n. ",
    "stefwalter": "An example:\n$ echo '<button id=\"delete-pod-btn\" title=\"delete-pod\" class=\"btn btn-default delete-entity delete-pod pficon pficon-delete\" data-toge=\"modal\"  \\\n              data-target=\"#adjust-entity\" data-entity=\"{{ selected }}\"></button>' | node_modules/html-minifier/cli.js\n. @sub-mod This is the compilation hang that you ran into. Obviously the HTML is invalid. In your case as a work around, you can just fix the invalid HTML.\n. Version of html-minifier is:\nhtml-minifier@0.7.2 node_modules/html-minifier\n. The hang happens at these lines in the HTML Parser:\n```\n        if ( chars ) {\n          index = html.indexOf('<');\n      var text = index < 0 ? html : html.substring( 0, index );\n      html = index < 0 ? '' : html.substring( index );\n\n      // next tag\n >     tagMatch = html.match( startTag );\n      if (tagMatch) {\n        nextTag = tagMatch[1];\n      }\n      else {\n        tagMatch = html.match( endTag );\n        if (tagMatch) {\n          nextTag = '/' + tagMatch[1];\n        }\n        else {\n          nextTag = '';\n        }\n      }\n\n      if ( handler.chars ) {\n        handler.chars(text, prevTag, nextTag);\n      }\n\n``\n. The startTag regular expression is:/^<([\\w:-]+)((?:\\s[\\w:.-]+(?:\\s(?:(?:=))\\s(?:(?:\"[^\"]\")|(?:'[^']')|[^>\\s]+))?))\\s*(\\/?)>/`\n. ",
    "sub-mod": "@stefwalter thanks\n. ",
    "tim-bradley": "This Option request can be removed. Your task can already minify inline json-ld!!\nNamely, if the processScripts option is used to specify `application/ld+json' then it no longer ignores the json script block and will minify it.\nWell played, Sir. Well played. I salute you.\n. ",
    "dlmiles": "Allow removeComments to take function returning boolean\nSo that would mean each comment of passed into the function and the boolean return value dictates if that particular comment is removed or not.\nThe problem is even in production some comments are not intended to be removed, the mechanism that checks for \"!\" character is too limited and modifies the markup in a way that might break the intended output.\nIf you are going to have <!--! bypass, at least always remove that trailing ! character from the output markup.\n. That would be a better solution to the magic sequence <!--!.\nSo long as the <!-- htmlmin:ignore --> are also removed from the output ?  For a htmlmin process I would expect they are.\nIs there distinction made for which is considered inside ?  like ignore on and ignore off ?\n<!-- htmlmin:ignore:on -->\n. ",
    "ChanJoseph": "ew ..    I am not sure ,     I just try to find out the reason . \nI found that .  It work in some grunt plugin ( like uglify\u3001jshint ) with that way which put the config code into a file to apply .\nhere is some Gruntfile.js codes\n        jshint: {\n            options: {\n                jshintrc: 'config/.jshintrc'\n            },\n            build: [ 'Gruntfile.js', '<%= pkg.path.src.js %>*.js' ]\n        },\nIt work .    but html-minifier plugin doesn't .\nI just don't get it . Do u know why ?\n. Never mind , Thank you ~\n. ",
    "SPxiaomin": "you're welcome\uff1a\uff09\n. ",
    "5lava": "I will use Search before asking. I will use Search before asking. I will use Search before asking.\nI will use Search before asking. I will use Search before asking. I will use Search before asking.\nI will use Search before asking. I will use Search before asking. I will use Search before asking.\n. Yay, well done! Thanks Juriy.\n. > No browser would parse <img src=/logo/> as if it was <img src=\"/logo\" />\"\n@mathiasbynens, turns out you're 99.996293% right :)\nI added following line to my website:\n<img src=/fooooo/>\nand some time later found 701391 requests to /fooooo/ and 26 requests to /fooooo.\nList of user-agents that requested /fooooo (without trailing slash):\nMozilla/5.0 (iPad; CPU OS 8_4 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) OPiOS/11.0.0.96155 Mobile/12H143 Safari/9537.53\nMozilla/5.0 (iPad; CPU OS 9_0_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) OPiOS/11.0.0.96155 Mobile/13A404 Safari/9537.53\nMozilla/5.0 (iPad; CPU OS 9_0_2 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) OPiOS/11.0.0.96155 Mobile/13A452 Safari/9537.53\nMozilla/5.0 (iPhone; CPU iPhone OS 9_0_2 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) OPiOS/11.0.0.96155 Mobile/13A452 Safari/9537.53\nMozilla/5.0 (Linux; Android 4.1.2; SPH-D710 Build/JZO54K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.78 Mobile Safari/537.36 OPR/32.0.1953.96473\nMozilla/5.0 (Linux; Android 4.2.2; AX610 Build/JDQ39) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.78 Mobile Safari/537.36 OPR/32.0.1953.96244\nMozilla/5.0 (Linux; Android 4.4.2; BLU ADVANCE 4.0 L Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.107 Mobile Safari/537.36 OPR/29.0.1809.91837\nMozilla/5.0 (Linux; Android 4.4.2; SM-G7102 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.78 Mobile Safari/537.36 OPR/32.0.1953.96473\nMozilla/5.0 (Linux; Android 5.0.1; SAMSUNG-SGH-I337 Build/LRX22C) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.78 Mobile Safari/537.36 OPR/32.0.1953.96473\nMozilla/5.0 (Linux; Android 5.0.1; VS985 4G Build/LRX21Y) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.78 Mobile Safari/537.36 OPR/32.0.1953.96473\nMozilla/5.0 (Linux; Android 5.0.2; Blade S6 Build/LRX22G) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.78 Mobile Safari/537.36 OPR/32.0.1953.96473\nMozilla/5.0 (Linux; Android 5.0.2; STUDIO X PLUS Build/LRX22G) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.78 Mobile Safari/537.36 OPR/32.0.1953.96473\nMozilla/5.0 (Linux; Android 5.0; BLU ENERGY X PLUS Build/LRX21M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.78 Mobile Safari/537.36 OPR/32.0.1953.96473\nMozilla/5.0 (Linux; Android 5.0; SM-G900F Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.78 Mobile Safari/537.36 OPR/32.0.1953.96473\nMozilla/5.0 (Linux; Android 5.1.1; Build/LVY48F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.78 Mobile Safari/537.36 OPR/32.0.1953.96473\nMozilla/5.0 (Linux; Android 5.1.1; Nexus 6 Build/LVY48F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.78 Mobile Safari/537.36 OPR/32.0.1953.96473\nMozilla/5.0 (Linux; U; Android 4.4.2; zh-cn; GT-I9500 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko)Version/4.0 MQQBrowser/5.0 QQ-Manager Mobile Safari/537.36\nMozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:28.0) Gecko/20100101 Firefox/28.0 (FlipboardProxy/1.6; +http://flipboard.com/browserproxy)\nMozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.42 Safari/537.36 OPR/33.0.1990.11 (Edition beta)\nMozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0\nMozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.78 Safari/537.36 OPR/32.0.1953.96473\nMostly Opera.\n. ",
    "chicoxyzzy": "same issue on node 4.2 and html-webpack-plugin 1.6.0\n. I've found what causes this issue https://github.com/ampedandwired/html-webpack-plugin/commit/909b811d70d0065a81fa36e173e99097b96f6c37\n@MizzleMo you should pass options not true to minify value of html-webpack-plugin\n. ",
    "ovarunendra": "grunt configuration:\n``` javascript\n grunt.initConfig({\n   htmlmin: {                                   \n            dist: {                                    \n                options: {                               \n                    removeComments: true,\n                    collapseWhitespace: true\n                },\n                files: [ {\n                    expand: true,\n                    cwd: 'src/',\n                    src: ['*/.html'],\n                    dest: 'src/'\n                }]\n            }\n        }\n})\ngrunt.loadNpmTasks('grunt-contrib-htmlmin');\n```\nInside src i have two folder each have more than 100 html files. when I run grunt htmlmin it compress first 120 files after that it got hanged.\n. ",
    "grimmdude": "Thanks for that fix.  Will this be in a release soon?\n. Looking forward to this fix too, thanks.\n-Garrett\n. ",
    "david-gang": "Update: I missed #289 \nHi @kangax \nI agree with @fxck \nAngular 2 will be a very popular framework.\nAdditionally according to http://stackoverflow.com/a/30863873/2343743 these attributes are valid.\n. ",
    "rayshan": "I'm guessing that's with the default options selected, since whitespaces are line breaks are removed? My output was after clicking on \"none\" below the list of options. I just tried it again, seems like the option that adds the tags is by unselecting \"Remove optional tags\".\n. ",
    "terry-webfox": "I installed v0.8.0:\nsudo npm install -g html-minifier@0.8.0\nand then the command given above worked. Looks like it's a bug specific to version 1.0.0\n. ",
    "mosbth": "I got the same error when using html-minifier on Travis where version 1.0.0 was installed. It was installed through npm -g html-minifier.\n$ html-minifier --version\nhtml-minifier v1.0.0\nIt failed with this error:\nWARNING html-minifier failed: build//clearfix/clear-no.html\nERROR: The specified config file doesn\u2019t exist or is unreadable:\n/home/travis/build/mosbth/htmlphp/.html-minifier.conf\nMy config file is:\n```\n$ more .html-minifier.conf \n{                                             \n  \"removeComments\": true,                     \n  \"collapseWhitespace\": true,                 \n  \"conservativeCollapse\": true,               \n  \"collapseBooleanAttributes\": true,          \n  \"removeAttributeQuotes\": true,              \n  \"removeRedundantAttributes\": true,          \n  \"useShortDoctype\": true,                    \n  \"removeEmptyAttributes\": false,             \n  \"removeOptionalTags\": false,                \n  \"removeEmptyElements\": false,               \n  \"lint\": false,                              \n  \"keepClosingSlash\": true,                   \n  \"caseSensitive\": true,                      \n  \"minifyJS\": true,                           \n  \"minifyCSS\":  true                          \n}                                               \n```\nThe travis build is here:\nhttps://travis-ci.org/mosbth/htmlphp/builds/91836199\nI updated html-minifier on my local debian (unstable) and it worked fine with 1.0.0. So perhaps its something special with the Travis environment. \nI installed version 0.8.0 at Travis which worked fine (see the build):\nhttps://travis-ci.org/mosbth/htmlphp/builds/91842585\n. @alexlamsl I can confirm that version 1.1.1 gives the same error on Travis. \nhttps://travis-ci.org/mosbth/htmlphp/jobs/107185469\nI'm not able to comment out the line on Travis, so I can not try to see if the problem exists after that.\n. It looks like this:\nComplete build:\nhttps://travis-ci.org/mosbth/htmlphp/jobs/107198002\nThe interesting part when Travis runs the test:\n$ node test.js\nTrying fs.accessSync('.html-minifier.conf');\n/home/travis/build/mosbth/htmlphp/test.js:7\nfs.accessSync('.html-minifier.conf');\n   ^\nTypeError: Object #<Object> has no method 'accessSync'\n    at Object.<anonymous> (/home/travis/build/mosbth/htmlphp/test.js:7:4)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:929:3\nThe script test.js:\n```\n/\n\n/\nvar fs = require('fs');\nconsole.log(\"Trying fs.accessSync('.html-minifier.conf');\");\nfs.accessSync('.html-minifier.conf');\n```\nSame result rerunning the build using fs.R_OK\nhttps://travis-ci.org/mosbth/htmlphp/jobs/107199737\nSo, hey, perhaps just old version of node which does not have this method available.\nTravis automatically installs older version of node. \n$ node --version\nv0.10.36\n. ",
    "karthilxg": "Workaround: Setting the collapseBooleanAttribute value to false fixes this issue temporarily.\njs\n htmlmin: {\n  collapseBooleanAttributes: false,\n}\n. ",
    "kdubuc": "Can you plan a release for use it with npm ? \n. ",
    "codysherman": "Trying to determine if this did or did not end up making into the product. This thread appears to show it was reverted and didn't work out. But on the README, SVG's have a section about \"when they are minified\". So is html-minifier doing something now, but not the full SVGO? And if it is doing anything, why isn't there a flag similar to --minify-css and --minify-js?. ",
    "men232": "+1\n. ",
    "kmturley": "For a workaround you can use optional regex params. If you change:\nignoreCustomFragments: [ (/\\{\\%[^\\%]*?\\%\\}/g) ]\nto be:\nignoreCustomFragments: [ (/\\{\\%[^\\%]*?\\%\\}(\\s)?/g) ]\nThis will optionally allow a space after the first opening tag. So this kind of html tags will work until a fix is made in the library:\n<section class=\"header{% if loggedin = 1 %} logged-in{% endif %}\">\n. ",
    "julmot": "@kangax \n. @alexlamsl Can you please explain what this does?\n. ok thx so far\n. @alexlamsl If so, why isn't it added here?\n\n. @alexlamsl from the website.\n. @alexlamsl Sorry, I don't  have the time to find out what ending tags will be supported and what not. Also the README.md seems to not contain any information about this, there's just the link to a blog post.\n\nLast but not least I don't understand why the options default is false, but on the website it is enabled by default.\nSo if you have the time you are welcome to do a PR to my fork or update the things you named yourself.\n. ",
    "elle919": "It works by using the option:\nignoreCustomFragments:[/<%.*?%>/]\n. ",
    "robwierzbowski": "Agree, turning on a sensible compression configuration with a single option would be great.\n. ",
    "bkimmel": "In my experience as a user and fan of html-minifier it is both a \"practical problem\" (because embedded SVG is part of HTML in practice - and having it quietly butchered in a way that makes it not work is surprising) and a \"matter of principle\" (re: HTML5 spec).  I have used html-minifier (thank you for your hard work) a lot and given nothing back - so I'll volunteer to look at it and see if I can submit a PR to address the issue if that would be generally helpful...\nThanks.\n. ",
    "cpboyd": "I added /\\$=/ to the customAttrAssign, but the resulting file from html-minifier ends up having the style$ value stripped.\ne.g.\n<div id=\"drawer\" style$=\"[[_computeDrawerStyle(drawerWidth)]]\"> becomes:\n<div id=\"drawer\" style$=\"\">\n. @alexlamsl That's how I would expect it to work.  However, the issue seemed more to be with collapsing style attributes.\n. @alexlamsl Ah.  I see.\nThanks for the advice.\n. @alexlamsl As an aside: gulp-minify-inline allows a cssSelector.\nSpecifying style[is!=\"custom-style\"] allows it to ignore the Polymer-specific CSS and apply to the rest.\n. Actually...\nI just removed the cssSelector and css options from gulp-minify-inline and it somehow results in working CSS when the result from html-minifier doesn't look the same as with minifyCss disabled.\nSo the issue for polymer is more that the minifyCSS modifies the style attributes.  Style tags seem to be ok.\n. That works, thanks.\n. ",
    "KnowRe": "I have pretty much the same problem, and it seems like because minifyCSS option drops the content in style attribute.\nWill there be any way to avoid template chunk (such as {{foo}} or [[foo]]) to be minified with style attribute?\n. ",
    "fgirardey": "I have the exact same error with Polymer Annotated attribute binding.\nSee : https://www.polymer-project.org/1.0/docs/devguide/data-binding.html#attribute-binding\n. ",
    "matthieusieben": "Indeed. This issue can be closed unless you want to keep track of the propositions I made.\n. ",
    "manuel-di-iorio": "I don't think we have removeIgnored option\n:rabbit: Joking? It's in your readme reference and in the code\nBtw ignoreCustomFragments works great, thanks. You should update the readme :)\n. ",
    "ifraixedes": "I've just got this issue too.\n. ",
    "isiahmeadows": "It appears already fixed in gh-pages, by simply moving it to where it was supposed to be.\n. I know exactly what caused it: this line was in the wrong spot (i.e. at the bottom of the main script, when it should've been in runMinify). It appears fixed now in gh-pages, although @kangax, could you publish a quick patch fix for that?\n. @kangax I fixed the .jshintrc to permit that. You're welcome.\n. @XhmikosR They both represent nothingness, and this is a little less brittle.\n. @XhmikosR Although this is just a matter of preference, I was just following @kangax's instructions (that's also why I added the linter setting).\n. Okay. I wasn't sure because of the .jshintrc. I usually use != null as well.\n. ",
    "bzb-stcnx": "same error with html-minifier version: v1.0.1 and node 4.2.4\nno error with html-minifier version: v1.0.0 (and node 4.2.4)\n. ",
    "liamcurry": "I'm getting the same error from a fresh NPM install. Installing 1.0.0 fixed it for me.\n. ",
    "jawj": "Same here.\n. ",
    "Nogbit": "I'm having the same problem, just spent way too much time thinking I was doing something wrong.  Not doing that again.  I will always assume it's someone elses fault first.  ;-)\nAlso, it's really this line which then fires the cli.exit.  (as @scriptype  already mentioned)\n. ",
    "kawazoe": "I am still experiencing a similar issue with the latest 1.2.0 release. But instead of stopping after the first file, it stops after the first folder. For instance, the following structure will only generate the two files in the deepest 'Bar' folder.\n- Root/\n  - a.html\n  - Foo/\n    - b.html\n    - Bar/\n      - c.html\n      - d.html\n. I have just created #532 to cover this issue\n. ",
    "gheoan": "+1 for cssnano\n. ",
    "SteveEdson": "Thanks, works great.\n. ",
    "peterbraden": "Thanks!\n. ",
    "ArktekniK": "Hey sorry it looks like I had a syntax error that was caused by a custom formatter. Passing the template works as expected. \nSorry my mistake\n. ",
    "JamesJosephFinn": "Understood. Thanks.\n. ",
    "ybiquitous": "@alexlamsl \nThanks for your review! :smile: \n. ",
    "stuht": "Thanks for the clarification.\nI only added the test case locally to verify the changed behaviour.\n. ",
    "repdien": "ok I just saw it's fixed submitted in #501\n. ",
    "nwanglu": "Thanks, and when will this fix be submitted into NPM?\n. ",
    "zyf0330": "This is \n``` js\nvar str = \"objpicsurl_\";\nvar unnormalAttr = 'ss\"123';\nvar s = '';\nvar s1 = '  ';\nvar s2 = '';\nvar startTag = /^<([\\w:-]+)((?:\\s[\\w:.-]+(?:\\s(?:(?:=))\\s(?:(?:\"[^\"]\")|(?:'[^']')|[^>\\s]+))?))\\s*(\\/?)>/;\nconsole.time('not exists unormal HTML tag');\ns.match(startTag);\nconsole.timeEnd('not exists unormal HTML tag');\nconsole.log('exists unormal HTML tag and start with a whitespace');\nfor(var i in str){\n    console.time(i);\n    s1.replace(str, str.substring(0, str.length - i)).match(startTag);\n    console.timeEnd(i);\n}\nconsole.log('exists unormal HTML tag and not start with a whitespace');\nfor(var i in str){\n    console.time(i);\n    s2.replace(str, str.substring(0, str.length - i)).match(startTag);\n    console.timeEnd(i);\n}\nconsole.log('If I add a char into str, time increase to about double.');\n``\n. Ok., this is the bad HTML tag.\n.console.log('If I add a char into str, time increase to about double.');This is the most important.\n. Yeah, you are right. It is a invalid HTML tag. \nAnd regex match returns null as expect.\nBut it take so long time.\n. 11 chars taste 4300ms, 12 chars taste 8400ms about double.\nBut it is not only one problem about invalid HTML tag.s1is also an invalid HTML tag, but it starts with a tab, so regex match of it is so fast.s2` starts without a tab or other whitespaces, regex match of it is so slow, and time increases double with char length increass of attr value.\n. Sorry, I type \"waste\" wrongly to \"taste\".\n. OK, will see later.  Thanks\nOn Thu, Feb 25, 2016, 18:44 Alex Lam S.L. notifications@github.com wrote:\n\nfix submitted in #510 https://github.com/kangax/html-minifier/pull/510\n- unfortunately it's on a branch other than gh-pages, so I can't give you\n  an online version to test until it is merged [image: :cry:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/507#issuecomment-188721840\n.\n\n\n\u8ffd\u968f\n. So if it is ,  you should add some text to tell people this.\n. I just didn't see something in \"Releases\".\n. ",
    "kath4job": "@alexlamsl ? this include ignoreCustomComments comment can't be removed, if it removed, it will cause the ignoreCustomComments replace back logic error.\n\n. before htmlminfier:\n\nafter : \n\noptions: \n\n. @alexlamsl   yes\n. ",
    "antelle": "Thank you! Please push a new release to npm\n. ",
    "trumbun": "Thanks I added the following command ignoreCustomFragments: [/{{.*?}}/]\n. ",
    "surrim": "Thanks for the cute patch, works fine here.\n. ",
    "jshcrowthe": "Great work with the spec compliance here! I am using html-minifier (via gulp) for a while now and it has been great. However, in an application using web components, this addition broke me. \nWeb Components have the unique nature that they can be put in any of the available content categories. In order for this to work with those using web components, tags that are not, by default, part of the HTML spec (and therefore recognized as  phrasing, flow, or another type) should be ignored.\nI added the following test to https://github.com/kangax/html-minifier/blob/gh-pages/tests/minifier.js#L1191 and it failed:\njavascript\n  test('phrasing content with Web Components', function() {\n    input = '<span><phrasing-element></phrasing-element></span>';\n    output = '<span><phrasing-element></phrasing-element></span>';\n    equal(minify(input, { html5: true }), output);\n  });\n. @alexlamsl: I have refactored the [].indexOf() usage. Let me know what you think!\n. Anything else I need to do?\n. Awesome, thanks a bunch! Can we get a bugfix release for this?\n. The value of htmlTags in #514 includes several tags which are listed as obsolete (https://www.w3.org/TR/html5/obsolete.html#obsolete).\nThe value of knownTags (which, looking at the codestyle, I could refactor to use the makeMap fxn) is based off of the current supported list listed here: https://html.spec.whatwg.org/multipage/indices.html#elements-3\nSo they aren't the same, but with this specific function call already restricting the scope of the function to HTML 5 tags it shouldn't pose an issue.\n. Can do, I will get that pushed first thing tomorrow morning. Thanks for taking a look at this!\n. ",
    "devinus": "How can I turn this off?\n. This is closing the tag even when there's a tag later on closing it, which is against the original intent.\n. ",
    "sameh0": "how to update the npm one ? \ni am using it with Gulp\n. can i install it from git and get it running with Gulp ?\n. this fixed it .\n```\n- href\"#\"\n+ href=\"#\"\n```\n. ",
    "yshterev": "Good job guys .. keep on the good work :smile: \n. Hm.. yes it works from the fork but it does not work when I install from npm. \nIs it possible the npm package is not updated with latest changes ?\nI know the test is a little weird :) .. I just wanted to verify my case will work..a legacy smarty project\n. Sure :thumbsup: Thanks for the quick response.\n. ",
    "k-funk": "\nOriginal HTML doesn't render correctly in a web browser\nhttps://jsfiddle.net/p2t022rg/\nignoreCustomFragments/htmlmin:ignore allows html-minifier bypass the ParseErrors that would occur, but doesn't do any escaping\n. The reason that this new feature makes sense inside of html-minifier is because\nI already have to use the ignoreCustomFragments option on any (python, php, java, c-sharp, etc) code samples on my site, based on a regex matching, otherwise Parse Errors will occur.\nUsing another module to parse every file again and match that same regex seems really inefficient. \nIt makes sense to me for html-minifier to, while parsing, find code that needs to be ignored, and instead of looking over it, encode everything that was matched. It seems like quite a few users have had this problem, and would benefit more from encoding the content that causes Parse Errors instead of ignoring it and making what could be a one-module solution a two+ module solution.\n. I don't think it would work, because I need < to be escaped when I have code samples like new HashMap<String, Object>. If they aren't escaped, the browser thinks they are an html tag.\n. \n",
    "danielbodart": "What about instead of supporting escaping (and then the next feature and next feature...) just support a custom function / callback? \nThe default function could just be ignore and then people that want to do something else can without implementing a complete tool.\n. Oops just realised #382 is probably the answer\n. ",
    "Akshaykalola": "Hello,\nsorry to interrupt your conversation but I  am also receiving HTML Parse error. I am trying to parse the <% if(inlineEdit){ %> that is EJS file syntax, in short, I am trying to minify EJS file using HTML-MINIFIER but not able to do it.\nCan you please shower yours views on same.. options: {                                 // Target options\n                    collapseBooleanAttributes: true,\n                    decodeEntities: true,\n                    html5: true,\n                    minifyCSS   : true,\n                    minifyJS    : true,\n                    processConditionalComments  : true,\n                    removeAttributeQuotes   : true,\n                    removeComments: true,\n                    removeEmptyAttributes: true,\n                    removeOptionalTags: true,\n                    removeRedundantAttributes: true,\n                    removeScriptTypeAttributes: true,\n                    removeStyleLinkTypeAttributes: true,\n                    removeTagWhitespace: true,\n                    sortAttributes: true,\n                    sortClassName: true,\n                    trimCustomFragments: true,\n                    useShortDoctype: true,\n                    collapseWhitespace: true,\n                    ignoreCustomFragments: true\n            }\n\nI am using this options. ",
    "iamallyniam": "Thank you, that worked perfectly.\n. ",
    "pavax": "+1\n. ",
    "tiktaktok": "+1\n. If I look at the code in htmlparser.js I can see that tags such as h3 are listed as phrasing content. This however is not what the HTML specification says:\nhttps://html.spec.whatwg.org/multipage/dom.html#phrasing-content-2\nYou can see that h3 is not in this list. It is listed as \"flow content\".\n. ",
    "trombitas": "Yes, I used <rf> as an example for a non-standard HTML5 tag, but it could be any tag.\n. ",
    "willpracht": "Ah, my bad :). Thanks!\n. ",
    "sumitkm": "@dciccale I think you can't have stuff inside span but we have the same problem. I am trying the following setting, works for me, but I have very conservative minification, ymmv!\nopts =\n{\n ...\n includeAutoGeneratedTags: false\n}\n. @dciccale glad it works, but please treat this as a workaround and proceed with caution. If the minifier was helping you close missing end tags, that fallback I believe is now gone. The sample you quoted, all tags are appropriately closed, that's the key assumption for this workaround.\n. @alexlamsl the 'bugs' have been a 'blessing in disguise'. We had to 'fix' non-compliant html in a hurry :D. looking forward to the next npm publish. \n. ",
    "destructive-dragon": "\"includeAutoGeneratedTags: false\" doesn't work for me, it just removes the closing tags, making the result even weirder :(\n. ",
    "azamat-sharapov": "@SmaugTheGreat try latest gh-pages branch, it should work. I'm doing so, until next release.\n. ",
    "bbuhler": "javascript\n{\n  removeComments: true,\n  collapseWhitespace: true,\n  conservativeCollapse: true,\n  collapseInlineTagWhitespace: true,\n  collapseBooleanAttributes: true,\n  removeAttributeQuotes: true,\n  removeTagWhitespace: true,\n  processScripts: ['text/ng-template'],\n  minifyCSS: true,\n  minifyJS: {\n    mangle: false\n  }\n}\n. Sorry, I thought the small example were enough.\nI can reproduce it with the following HTML in the online minifier.\nhtml\n<!doctype html>\n<!-- htmlmin:ignore --><!--%buildversion%--><!-- htmlmin:ignore -->\n<!--[if lt IE 8]>      <html ng-app=\"app\" ng-csp ng-strict-di ng-attr-lang=\"{{lang}}\" ng-class=\"{'loading': !finished}\" class=\"no-js loading lt-ie9 lt-ie8\"> <![endif]-->\n<!--[if IE 8]>         <html ng-app=\"app\" ng-csp ng-strict-di ng-attr-lang=\"{{lang}}\" ng-class=\"{'loading': !finished}\" class=\"no-js loading lt-ie9\"> <![endif]-->\n<!--[if gt IE 8]><!--> <html ng-app=\"app\" ng-csp ng-strict-di ng-attr-lang=\"{{lang}}\" ng-class=\"{'loading': !finished}\" class=\"no-js loading\"> <!--<![endif]-->\n  <head>\n. It seems to be the combination of removeComments and collapseWhitespace.\n. ",
    "igoradamenko": "Oops. Sorry about that. It seems like error in Gulp plugin (it depends on v.1.0.0 of html-minifier). I've tried to test this case in html-minifier directly and it works fine.\n. No, guys, error exactly in html-minifier. Sorry about the confusion.\nLet's define inline element as A, block element as B and text with space in the start as C. So if A contains B and C follows A then space in C is removed. I think it's wrong, you can see the example in OP of this issue.\nI've created the PR with fix and tests for this. Please check this out: #583 \n. @alexlamsl Done.\n. @alexlamsl Could you also bump version to 1.3.2 for make fixes available in npm?\n. @alexlamsl Okay, thanks!\n. @alexlamsl yep, you are right; it works. I've added yet another commit\n. ",
    "huyph": "Uhm. Perhaps 'collapseBooleanAttributes' is the cause here?\njavascript\n        options: {\n          collapseWhitespace: true,\n          conservativeCollapse: true,\n          collapseBooleanAttributes: true,\n          removeCommentsFromCDATA: true,\n          removeOptionalTags: true\n        },\n. i also found that it also strip in this case:\nloading=\"vm.loadingData1\" \nAnd i am using grunt-contrib-htmlmin v1.1.0\n. Actually the exact string is\n<element indeterminate=\"analyticsSearchersVm.topIPsIndeterminate || analyticsSearchersVm.topCountriesIndeterminate || analyticsSearchersVm.initialLoadAllDataForMapIndeterminate\"/>\nThis does replicate the issue in the online HTML minifier (http://kangax.github.io/html-minifier/)\n. I see. \nSo any reason why HTML mininifier does not do a check on whether the element is of type <input type=\"checkbox\"> ?\n. fair enough...will do once I get a chance :wink: \nThanks for your time! Much appreciate !\n. ",
    "dwelle": "Meanwhile, if I'm not missing some case, one can run this on the output:\nhtml.replace( /<[\\s\\S]+?>|(\\}\\} \\{\\{)/g, (m, g1) => {\n    return g1 ? \"}}{{\" : m;\n});\n. It's not about optimization -- if those whitespaces remain, they break CSS (for inline/inline-block elements). I also can't run html-minifier on output, because we don't render on server-side. We minify the templates, precompile, send those templates to client, and render there.\nAnd since html-minifer already supports options such as customAttrAssign/customAttrSurround to allow the plugin to recognize e.g. HBS syntax, I thought it's in the plugin's scope to [allow to] strip whitespace for block helpers.\n. Line breaks sure would as well. After minification, which turns the above into:\n{{#if}} {{/if}} {{#if shareStatus}}<div></div>{{/if}} {{value}}\n...we pipe it to handlebars to precompile, which parses the string into executable function. Problem is, it retains the HTML whitespace (outside of HBS helpers and other HBS syntax), and that's the problem.\nThere's been a lot of discussion about whitespace control over at wycats/handlebars.js, but the bottom line there is that handlebars doesn't deal with HTML semantics, thus it won't try to strip whitespace on its own.\nSo I thought the most likely candidate to tackle this is html-minifier since it already touches on non-HTML syntax.\n. Both the input and the output breaks the CSS, that's why we're using html-minifier in the first place (because it removes at least some of the spaces).\nignoreCustomFragments won't help, because this introduces even more whitespace issues.\nIMO (and in handlebars maintainers' opinion), the stripping of whitespace in HTML (even if there's HBS sprinkled among it), is best left for something that actually understands HTML (e.g. html-minifier).\n. ",
    "duncanwerner": "As far as I can tell, you're not checking the script type, although that might be implicit. If type checking were supported I'd suggest switching calls based on types, but that's a slightly more complex modification.\nRegarding just using a function instead of options, that makes sense to me.\n. ",
    "bonesoul": "sorry express-beautifier uses and older version of this package, so i notified them now :) https://github.com/lackneets/express-beautify/issues/1\n. thanks :+1: \n. ",
    "ilovebeatles": "Sure. Something like this:\n<div class=\"foo\">bar</div> => minify => <div>bar</div>\n. ",
    "karensg": "It did not integrate with my setup after all. So I switched to grunt-html. Thanks for your quick reply anyway.\n. ",
    "dtate888": "Sorry I went AWOL. That is fine -- there are plenty of other ways I can accomplish what I'm doing anyway. I appreciate the help\n. ",
    "kornelski": "I guess you've found it. For the record, I've reproduced these using default settings on https://kangax.github.io/html-minifier/\n. Thanks for the fix\n. That is difficult for me, because in my case the <!-- htmlmin:ignore --> section is generated by a macro in a template.\nAdditionally shifting of whitespace from before the macro to after the macro looks bad, as it puts a space before a full stop.\n. Works great. Thank you for the fix!\n. ",
    "a3diti": "Never mind, it was a mistake on attributes, i had to use it like this to work:\nhtml-minifier --minify-js --minify-css --remove-comments --remove-empty-attributes --remove-empty-elements --case-sensitive --remote-attribute-quotes --use-short-doctype --collapse-whitespace index.php\nI fixed it by adding --collapse-whitespace and making sure i didn't add --preserve-whitespaces\n. ",
    "hit0907": "Yes, it working. Error when set attribute value is JSON string data-params={\"multiple\":true}\n. My current page html have attributes value contains  ' ,  \" and it working ( data={\"multiple\":true} ). I added ' (data='{\"multiple\":true}' ) and it working. Thanks for tool.\n. ",
    "patrickneugebauer": "I was running v0.10.25.\nI did a fresh command line Install on Ubuntu, the repository is a little bit old.  https://nodejs.org/en/download/releases/ \nI just downloaded the LTS version (v4.4.3) and the original code works correctly.  Thank you for humoring me.\n. ",
    "OverZealous": "Note: I can use conservativeCollapse to work around this for now, but obviously that makes a difference in how much compression we get.\nAnd thanks for all the hard work!\n. OK, this is interesting.  I put together an example of this.  Unexpectedly, it looks like for straight inline elements, this is right.  However, if the element has it's display mode changed to inline-block (for example, for rendering links as a button with padding, etc), then the compressed styling is rendered differently.\nI guess the only correct thing to do in this situation is to use conservativeCollapse, because then I can use an element either way without worrying about alignment.\nThanks.\n. ",
    "akmjenkins": "Thanks so much! I replaced the default:\n[ /<%[\\s\\S]*?%>/, /<\\?[\\s\\S]*?\\?>/ ]\nwith this that allows hitting the closing php tag (?>) or the end of the file:\n[ /<%[\\s\\S]*?%>/, /<\\?[\\s\\S]*?(\\?>|$)/ ]\nand it worked! Thanks!\n. ",
    "inad9300": "You were right in your intuition. With \\\" I was escaping the \" for JSON, but not for the terminal. However, with \\\\\" you escape the \\ for JSON, thus you get an invalid JSON, since you end up with a string attempting to content a free \". Therefore the final solution is to use \\\\\\\", so that you escape both the \\ and the \" for JSON, ending up with a escaped double quote (\\\") in the terminal.\nPerhaps it's worth mentioning it somewhere on the docs.\nThanks!\n. ",
    "nha": "I tried I tried the following:\nnpm install -g html-minifier // version 2.1.3\nhtml-minifier --minify-js true sample.js -o sample.min.js // same output as the input (while it differs with uglify.js 2.6.2)\nhtml-minifier --minify-js sample.js -o sample.min.js      // hangs on forever (well at least a few minutes - then I killed it)\nhtml-minifier --input-dir source/ --output-dir expected/  // writes to stdout, creates one empty file on expected/ (there were several .js files on the source/ folder)\nI did not have more success using the cli.js bash script.\nUsing html-minifier 2.1.3, node 4.2.4 and OSX 10.11\nHow should I use this module ?\n. ",
    "topaxi": "Awesome this works! :)\nFor anyone else, this is the config I'm now using:\njavascript\n{\n  customAttrSurround: [\n    [ /\\{\\{#[^}]+\\}\\}/, /\\{\\{\\/[^}]+\\}\\}/ ]\n  ],\n  ignoreCustomFragments: [\n    /\\{\\{[^\\}]+\\}\\}/g\n  ]\n}\n. ",
    "mrcsmcln": "I'm aware of that option, but I think you might be missing my point. I guess I'm asking why <wbr> isn't included in this list, since it is in fact an element that would be used inline and should have spaces around it, just like <span>, <strong>, <sub>, etc.\n. ",
    "JoeUX": "As I said I already did that. I couldn't make heads or tails of that documentation. It's not explicit about defaults and options, and doesn't give examples of each option.\n. Possibly. I don't yet understand all of it, but the first block seems to be doing root-relative and then a path-relative scheme. I'll need to spend more time with it to understand how the test cases work (I'm new to JS).\nWhat's the syntax for the keys and values of the relateurl options? My entrypoint is either the HTMLMinifier website or the Minify plugin for Sublime Text. I checked out the command line help doc, and it says --minify-urls [value].\nDo all values start with the string RelateUrl like in RelateUrl.ROOT_RELATIVE? That's how all the output options are portrayed on the relateurl site, but none of the other (non-output) options seem to have that syntax. Some of the options have values themselves, like rejectedSchemes, so is this going to be a table/hash structure? (I'm not sure what an \"object\" is in the context of HTMLMinifier or JS in general \u2013 the HTMLMinifier doc gives object as a possible type for relateurl's value.)\n. Hi @Kristinita, it's been a while but I don't think I solved my problem. I'll look into it again.. Also @Kristinita, I gave up on getting relateurl to work because I decided that I wanted full URLs in my webpage source. This was because I want my articles and blog posts to be standalone HTML documents \u2013 I wanted people to be able to download my articles and posts as HTML or MHTML files that they can read offline whenever they want.\nThis is probably a rare behavior, but I download pages as MHTML all the time and I wanted others to be able to do it (there's a flag in Chrome, Opera, and Vivaldi to enable MHTML downloads). For my pages to work properly this way, they need full URLs, since a browser that's opening a local HTML/MHTML file won't know the original page's URL. Having partial URLs would cause images, fonts, and other assets to not load.. I'm puzzled by these comments, since they contradict the docs. Do you want people to file bugs? This is a bug.\n1.  On removing script type attributes, the doc says: \"Remove type=\"text/javascript\" from script tags. Other type attribute values are left intact.\"\nThat's quite clear. Other type values are to be left intact.\nOn the processScripts feature, the doc says: \"Array of strings corresponding to types of script    elements to process through minifier (e.g. text/ng-template, text/x-handlebars-template, etc.)\"\n2. It says script elements. The examples are text elements, specifically templating languages, but since the description says script elements, it should process scripts.\nAnd in fact, it does process scripts. It also processes JSON-LD, which is popping up a lot more lately. I used it to process JSON-LD on that same source file (the formal type is \"application/ld+json\").\nIt doesn't just process templating languages, and the doc doesn't say that it only processes templates. If someone's intention is that it only process templates, then the app would have to be changed and hopefully the doc would be updated.\nI don't know what the \"default value\" for <script type=...> means. There's nothing in the doc or the web app about setting a default value a script type. I never set a default anywhere. The doc implies there's just one hardcoded default (text/javascript), and the source test file had several different types.\n. ",
    "Kristinita": "@JoeUX , type:question \nHave you solved your problem? Did you make a working example?\nThanks.. ",
    "Chariyski": "I have the same bug with:\n<!--[if gte IE 11]><!-->\n  <h3 hidden>Some text</h3>\n<![endif]-->\n. @addaleax I do not understand why you have copied that link, but my case is identical to:\n<!--[if gt IE 6]><!-->\nThis code displays on non-IE browsers and on IE 7 or higher.\n<!--<![endif]-->\nWithout that comment the minifier is working correctly. \n. @addaleax  I'm sorry. I made a mistake with @alexlamsl nick.\nHave a nice day.\n. @alexlamsl Yes that way is working correct.\nThank you :)\n. ",
    "addaleax": "@Chariyski It\u2019s been over 2 years since I\u2019ve had anything to do with this project, is there a chance you wanted to ping somebody else? Otherwise I\u2019m not sure how I\u2019m able to help here. :D\n. ",
    "jdc20181": "I would love to add it, but I can't upload it. \nI need to upload it I found a icon it needs to be saved as Name.favicon\n. I'll try that it'll be Thursday before I can get on again I have to work\nOn Monday, August 22, 2016, Alex Lam S.L. notifications@github.com wrote:\n\nI think you can attach files in an issue - just drag and drop into the\ntext area.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/671#issuecomment-241550167,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AMphBj6lU-A_XKk2s6h_wAgyHs4h02SXks5qig8cgaJpZM4I21m4\n.\n. Sorry for innactivity I have to find a good icon that matches your project\nperhaps you have logo?\n\nOn Sat, Nov 19, 2016 at 4:55 AM Alex Lam S.L. notifications@github.com\nwrote:\n\nClosed #671 https://github.com/kangax/html-minifier/issues/671.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/671#event-865303985, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AMphBuBApXny-n5oVuKS46eDYAXTxQPtks5q_seGgaJpZM4I21m4\n.\n. Ok I will find something...and let you know.\n\nOn Sat, Nov 19, 2016 at 1:29 PM Alex Lam S.L. notifications@github.com\nwrote:\n\nReopened #671 https://github.com/kangax/html-minifier/issues/671.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/kangax/html-minifier/issues/671#event-865408935, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AMphBt1kpg4CCLkqd4BhxD4bnRKL1QGiks5q_0AUgaJpZM4I21m4\n.\n. \n",
    "tomasz1986": "Are you saying that this is a bug in the Validator then?\n. ",
    "imvetri": "@alexlamsl  I will be glad to implement, any guidance you could provide? regarding the development environment setup?\nI am new to github community. \n. @alexlamsl Thanks.. very helpful. \n. Hi @tomasz1986 ,  I am setting up development environment to try out idea suggested by Alex. (making minification asynchronous on browser side).\nWould you mind sharing info how to use html-minifier on browser side? or any references to boilerplate projects will help me much. \nThanks :)\nUPDATE 1: I figured it.. :)\n. I couldn't understand clearly after \"the curious thing is\". Could you provide an example? I'll try to reproduce issue from my side.\n. @benelot , good suggestion. \nCan you provide some clarification on this:- html-minifier only deals with html. Your suggestion is more towards javascript if i'm not wrong.\n. ",
    "outaTiME": "Same here bro, im using:\nconst htmlminOptions = {\n    collapseWhitespace: true,\n    // custom\n    removeComments: true,\n    minifyJS: true,\n    ignoreCustomFragments: [ /<(WC@[\\s\\S]*?)>(.*?)<\\/\\1>/ ]\n  };\non windows platform im getting:\n<script type=\"text/javascript\">var device_id=\"\\t<WC@GPSID></WC@GPSID>\\t\"</script>\nbut if i remove the minifyJS flag:\n<script type=\"text/javascript\">var device_id = '<WC@GPSID></WC@GPSID>';</script>\n. The problem comes with minifyJS flag on windows platform, how to solve this ?\n. But it happens only in windows platform ... in mac it works fine ...\n. The output must preserve both tags like input:\nprobably as follow:\noutput = 'foo<WC@bar>baz moo</WC@bar>loo';\n. ",
    "LeoLei": "It's the same to me!\nnode express with ejs, before compressed\n<script>\n    var isLogin = \"<%= is_login  %>\";\n</script>\nresult in:\n<script>var isLogin=\"\\t<%= is_login  %>\\t\";</script>\nThis will make logic error. And also, if i remove /<%[\\s\\S]*?%>/ from ignoreCustomFragments  list, it leads to an error, thrown by HTMLParser in src/htmlparser.js :\n232       parseEndTag('</' + stackedTag + '>', stackedTag);\n233     }\n234\n235     if (html === last) {\n236       throw new Error('Parse Error: ' + html);\n237     }\nI found the code in the file of src/htmlminifier.js\n793   var customFragments = (options.ignoreCustomFragments || [\n 794     /<%[\\s\\S]*?%>/,\n 795     /<\\?[\\s\\S]*?\\?>/\n 796   ]).map(function(re) {\n 797     return re.source;\n 798   });\n 799   if (customFragments.length) {\n 800     var reCustomIgnore = new RegExp('\\\\s*(?:' + customFragments.join('|') + ')+\\\\s*', 'g');\n 801     // temporarily replace custom ignored fragments with unique attributes\n 802     value = value.replace(reCustomIgnore, function(match) {\n 803       if (!uidAttr) {\n 804         uidAttr = uniqueId(value);\n 805       }\n 806       var token = uidAttr + ignoredCustomMarkupChunks.length;\n 807       ignoredCustomMarkupChunks.push(match);\n 808       return '\\t' + token + '\\t';\n 809     });\n 810   }\nIn the line of 808, the two '\\t's are added. Removing them both,  the compression is going correctly! I'm not sure what's them adding for.\n. ",
    "mdreizin": "@kangax did you have any chance to review it?\nI also have some cases when I ned to remove some attributes (for example data-test=\"xxx\").\n. ",
    "CedarDCX": "Any idea when this feature might get released? It would be a great additional feature which would allow us to remove redundant data-react-* attributes from our markup.. ",
    "jacksonp": "Thanks, I now see that what I put for the expected output is not correct, and that &amp without the trailing ; is in the HTML spec (that was a surprise).\nI was in the process of checking my pages were valid HTML after using html-minifier. As your link notes, the current output, &ampx; is invalid markup. Maybe that's worth a note in the documentation for the --decode-entities option?\nFrom my perspective, I'd like to use --decode-entities, but would also like to end up with valid markup. Possible?\n. Fair enough, thanks for that. I'll just leave a couple points for your consideration.\nIf a validator flags missing optional tags as invalid markup, that sounds like a bug in the validator. I'm not convinced validity is really that relative.\nIt would be nice to be able to use html-minifier as part of a build process that checks for valid HTML (for what it's worth, I'm using https://github.com/validator/validator/).\n. I think this is still an issue:\n$ html-minifier -V\n3.3.1\n$ cat -v nbsp_test.html\n<p> M-BM-  M-BM-  test\n$ html-minifier --collapse-whitespace --conservative-collapse nbsp_test.html | cat -v\n<p>M-BM- test </p>\n(cat -v shows non-breaking spaces as M-BM-.). Yes.\nCan't attach .html files here, but nbsp_test.html renders the same as <p> &nbsp; &nbsp; test and the html-minifier output renders the same as <p>&nbsp;test.. 3.3.2 fixes it. Nice one, thanks.. ",
    "luiz04nl": "I needed some more options:\n--minify-js true --minify-css true --minify-ur-ls true --keep-closing-slash --remove-comments  --collapse-whitespace  --collapse-inline-tag-whitespace --case-sensitive --conservative-collapse \nthank you\n. ",
    "nkvorn": "Hmm, on first look it seems the regex required would be a little monster! For my use case I think I would be better off by preprocessing the html files removing \\* like comments...\nMaybe this could be a future feature of html-minifier. Adding an option to preprocess files with a regex.\n. ",
    "Martin-Andersen": "I have not written the code, but after sleeping on it, I think that the code belongs in the controller.\nwhy to much logic in an html template.\n. ",
    "joeskeen": "Sure.  By that I meant that instead of just stopping minifying the rest of the file, it starts minifying again later on (see the last line of the output: <label>bar</label></td></tr></table>.  So whatever prevents it from minifying the middle of the document seems to no longer be an issue later on.\nAnother thing that confuses me is it's not just the self-closing textarea that is causing this behavior.  In fact, this minifies properly:\nhtml\n<table>\n  <tr>\n    <td>\n      <textarea />\n    </td>\n  </tr>\n</table>\nOutputs:\nhtml\n<table><tr><td><textarea></td></tr></table>\n. @alexlamsl I do agree that the textarea should require a closing tag.  But instead of silently failing to minify a chunk of code following the textarea then having minification mysteriously start to work again, it would be great if there was an error or a warning or something that would indicate that the code is invalid, rather than silently failing to minify.  When we first started using html-minifier, we had a few errors due to invalid markup.  Once we resolved those issues, I assumed that we would get errors whenever the markup is invalid.  But without errors or warnings, it is difficult to identify that there is a problem.\nIs there any way to enable more verbose or diagnostic logging?  Perhaps this would help.\n. OK, so I get that your tool isn't designed to work with malformed HTML.  In fact, it seems that you recently removed linting completely (https://github.com/kangax/html-minifier/commit/22d134003df20d02c479edfb42fd931c6a21d608).  I have referenced this from a feature request on HTMLHint to emit a warning if a self-closing tag isn't valid (https://github.com/yaniswang/HTMLHint/issues/142#issuecomment-235347685).  I am not asking if your tool can please support invalid markup.\nWhat I would like to see is a way to enable more verbose logging for cases like these where your tool is aware that there are problems with the markup when parsing it into the tree (i.e. can't find a closing <textarea> tag).  If there were any output, we could look at our build output for an explanation as to why things didn't turn out the way that we expected them to.  I know that my example was small, but this was amongst thousands of lines of HTML in our code base, and was some old code written long before we started to add minification into our build pipeline.\n. ",
    "delayedone": "Well ok, thanks for the quick response :)\n. ",
    "TitanNano": "yes thats it! Could this be mad more clearly? E.g. point out which part of the line caused the error.\n. ",
    "mblandfo": "Alright. I'm thinking of adding \"Collapse comment whitespace\" and \"Collapse attribute whitespace\" - I guess this will apply to all attributes since I can't think of a reason to limit it to certain attributes right now. \nThese will both use the Conservative collapse method regardless of whether that option is true/false.\n. Oh, yeah, customEventAttributes should work for the data-bind attributes. I guess that's not in the online demo page.\nI'm using knockout.js, so it's not server side.\n. ",
    "stoodder": "Would second this one, running in to the same issue. For me, It's also when dealing with multi-line attributes.. ",
    "benelot": "Oh, I thought it also does other things like scripts inlining as well. I must have misinterpreted this. Thanks for clarification.\n. Thanks for the information, I will propose the idea to unglify-js then. Here is is:\nhttps://github.com/mishoo/UglifyJS2/issues/1253\n. ",
    "tinovyatkin": "I use to load stylesheets when scrips are not available (when they are, I do link rel=preload and loadCSS), and for tracking alternatives for Google Analytics and Facebook pixel. I think a lot of people do the same\n. Anyway, you can merge in document appearance order, so, it will not broke stylesheet load ordering (if somebody are relying on that).\n. Well, even MDN is very good, but it's not an official spec. On the W3C specs, however, crossorigin is used as boolean: rel=preload spec.\nCurrently html-minifier changing this attribute from boolean form crossorigin to crossorigin=\"\" - that's working, but apart of being longer it's not more correct (as MDN lists it must be crossorigin=\"anonymous\")...\n. ",
    "win7killer": "yes, it works, thx\n. ",
    "extensionsapp": "@alexlamsl Tell me how can I track or ignore this error? The site page gives 502 an error. This is very bad. In this case, I would like to get the original line <div> < back </div> at the output instead of the error.. @alexlamsl Can not you give an empty result instead of an error?. In this case, I would like to get the original line <div> < back </div> at the output instead of the error.\nhttps://github.com/kangax/html-minifier/issues/712. ",
    "ken1987": "Don't remove quotes around attributes when possible\n. Sorry @alexlamsl . The result of the previous example is correct.\nThe result of the following example is wrong,when only  Collapse whitespace  is true.\nhtml\n<!DOCTYPE html>\n<html>\n<body>\n    <wbr             data-a=\"a\"                  data-b=\"b\" />\n</body>\n</html>\ncompressed  by v3.0.2\n<!DOCTYPE html><html><body><wbr data-a=\"a\"data-b=\"b\"></body></html>\n. ",
    "gzzhanghao": "Ehm... after digging deeper I found a preserveLineBreaks option which can solve this issue. Thanks for your reply anyway ;)\nBTW, I think the preserveLineBreaks option should be true by default, it won't cost more spaces and can avoid lots of potential issues.\n. @alexlamsl I believe not :(\nCustom fragments were replaced by the placeholders at that moment, so you can't easily find out whether there's a customFragment inside the script.\nSetting sequence: false for minifyJS may help in this issue, but I think it's better to have such an option to prevent other potential issues.\n. Fixed in #720 \n. It works like a charm! Can't wait to merge this :smiley: \n. The issue in #716 still exists in this branch. I think we should restore all substitutions in the escapeFragments method.\n. @alexlamsl It becomes <script>function a(){b(),\\n\\n}</script> after running in php runtime. The trailing comma leads to a syntax error :(\nCustom fragments are not valid javascript stuff, I think we can't simply treat it as a identifier in javascript.\n. ",
    "bjoe2k4": "Okay, thanks, works now.\nSome warning would have been nice, since this worked without value quite nice in earlier versions.\n. ",
    "ubershmekel": "It isn't explained clearly what that value should be, and it is unfortunate that html-minifier just hangs instead of errors :(. ",
    "humaknlght": "Where can I find a complete list of the values I can use?. ",
    "CodaCodr": "Don't know what you did, but...\n\n. So now we've proved my untested example works by testing it... is there a likelihood this parsing error will be fixed soon?  Just asking.\n. Well, you saw my paste. Content of textarea is text. HTMLMinifier should parallel how a browser treats it, not try to treat like... I don't know... an iframe?\nI don't know how you're getting that result (is it the same source? might be worth sending them an issue report).\n. Oh... line 1 ??? Is that a valid document?\n. I can't do the PR, sorry.\nAnd there's no more to discuss, viz:\nFor elements in HTML, the constraints of the Text content model also depends on the kind of element. For instance, an \"<\" inside a textarea element does not need to be escaped in HTML because textarea is an escapable raw text element. (http://w3c.github.io/html/single-page.html#text)\n. Misdirections aside, textarea content is not a corner case. I'm done here.\n. ",
    "adamchal": "Renamed ~~collapseCustomFragments~~ to trimCustomFragments and added more tests with suggested scenarios.\n. @alexlamsl no problem.  Thanks for maintaining this.\n. ",
    "jay8t6": "@alexlamsl Thanks for following up on this quickly. I will see if I can create a small HTML that reproduces the issue. Note that the HTML I am trying to minify is a polymer element that contains CSS within  tag. Would that make a difference?\n. @alexlamsl I meant to say within dom-module tag. \n. @alexlamsl Checkout the HTML content in this fiddle, it contains style tag within some-module:\nhttps://jsfiddle.net/kaycebasques/2q3fqehz/\nAlso, this page talks a little bit about the page:\nhttps://www.polymer-project.org/1.0/docs/devguide/styling\n. @alexlamsl I figured it out. It was an external css file that was being imported into the html after the minify task runs, all I had to do was minify the external css using gulp-clean-css before the import happens, it was a mistake on my side. your minifier works great! this is not an issue, thanks for working with me.\n. ",
    "brunoDegaspare": "Hi @alexlamsl,\nYeah, this is what I am using:\nhtmlmin: {\n   index: {\n     options: {\n         removeComments: false,\n         collapseWhitespace: true\n     },\n     files: {\n         'prod/index.html': 'dev/index.html'\n      }\n   }\n}\nNot sure what I am missing here.\nThis is the output that I get:\n<script src=\"assets/js/app.min.js\"></script>\n      <script src=\"//oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>\n      <script src=\"//oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\n<![endif]--></head><body> (content here) </body></html>\n. ",
    "cchan": "Here's an example @alexlamsl, sorry I didn't provide one earlier.\n<script>$('window').click(() => {\n  console.log('hello');\n});</script>\nI suspect it has something to do with the ES6? It works fine using a function(){} instead.\n. Ah, okay. Darn.\n. Ah, true. Looks like it's on the way, though: mishoo/UglifyJS2#1290\n. ",
    "towerpark": "Instead of failing silently, some warning would be appreciated  :). ",
    "TintypeMolly": "\nSo if I understand correctly, you are trying to use webpack on html-minifier and its dependencies in order to use the latter within a browser as opposed to running in native Node.js environment?\n\nNo, I want to use html-minifier on the server-side(node) to minimize my http response to users' http request. I don't use this on the client side.\nI think I need to look into how browserify deal with this kind of problem and hopefully webpack has something like it.\nThx.\n. @acusti not really. used different minify library.. ",
    "acusti": "@TintypeMolly Did you ever figure out a solution for this issue?. ",
    "zmagyar": "I have ran into the same issue. I think much more projects are using webpack than browserify nowadays. It's a shame this minifier can not be used.\nActually the issue is not with webpack but with minifier/uglify. It does require the fs package for convenience only. I.e. the operation of uglify does not require fs, it is only used to create 'elegant' code. As the minifier uses a fork by @alexlamsl I think this is the right project to file the issue. \nI think it would be a really useful change to change that part as it is more important to allow the usage of the module than having an elegant code which saves a few lines.. ",
    "nandosangenetto": "I have the same issue. \nI used webpack to build my react app for SSR, and I'm trying to minify my HTML on the fly using node with no success.. ",
    "Temoto-kun": "I solved this issue by using null-loader on the path where the main file of uglify-js is loaded.\nI added:\nrules: [\n  // ... some rules\n  {\n    test: path.resolve(__dirname, 'node_modules/uglify-js/tools/node.js'),\n    loader: 'null-loader',\n  },\n  // ...some more rules\n]\ninto my Webpack config.\nI agree it is not something in html-minifier itself, but I think this is a solution nonetheless. Maybe this is an issue of the main files not being in the topmost directory of its require() s.. ",
    "simontabor": "thanks for the quick merge \ud83d\udc4d \n. ",
    "gespinha": "Thanks for the suggestion. I decided to go with a different grunt package instead. Thank you :)\n. ",
    "vlyahovich": "Seems like jslint problems already in main branch\n. Yes, I agree that it is not a big deal. But having many unnecessary packages adds up to build time. I've done some changes, can you please look one more time? Thanks!\n. Done with review. Please take another look.\n. Thanks! Appreciate your work.\n. ",
    "Status420": "It is indeed, its an apache server side include, works fine on IE9 (IE8 Document mode), its not supposed to be parsed for later browsers.  Thanks, I'll test your suggestion.\n. ",
    "Odepia": "I have that issue since version 3.0.0 which was the first version of html-minifier I used for my projects. I am not able to confirm if it is a regression or not, sorry :(\n\nIf I understand correctly, the parser would simply drop dangling end tags regardless of minifier options.\n\nYes, correct.\n. Thank you for the (very) quick reply!\nI hope a next release of html-minifier will fix that issue :)\n. ",
    "sxend": "Thank you for review.\n\nFunction(attrName, tag) to removeEmptyAttributes\n\nOK. I will fix that way.\n. Sorry, committer and author were wrong, so I fixed it and push it again.\nWhen pass CI, Please merge at your favorite timing. :bowing_man: \n. ",
    "inversion": "https://github.com/npm/npm/wiki/Troubleshooting#not-found--server-error\n. @jdrydn transitive dependencies \ud83d\ude22 \nedit: could override with shrinkwrap but waiting is lazier ;)\nedit: as other people have said if the dependencies' semver specifications for html-minifier will match 3.1.1 you can add \"html-minifier\": \"3.1.1\", to your package.json dependencies\n. ",
    "jdrydn": "Oh good, I'm happy I'm not the only one experiencing this!\n. Obviously, it goes without saying, if you're happy to miss out on this update (for now) there's always npm install html-minifier@3.1.1\n. > Installing 3.1.1 is not a workaround, angular-cli requires html-minifier.\n@Canos: Before 3.2.0 was pushed, angular-cli would have installed 3.1.1\n. ",
    "pgetta": "Same here, hope this will be resolved fast\n. ",
    "kronicker": "Same here, waiting... :sleeping: :smile: \n. ",
    "phiphou": "Same as everybody here,  how many time do you think we have to wait ? \n. DNS progagation make take some times no ? So, depending from where you are... \n. Works for me (France) locally, not tested on CircleCI yet, I'll let you know.\n. Yes it is :\n``` bash\n$ npm view html-minifier versions\n[ ... ,\n  '3.0.2',\n  '3.0.3',\n  '3.1.0',\n  '3.1.1',\n  '3.2.2' ]\n```\n. ",
    "codechaotic": "@jdrydn your suggestion did the trick for me. Installed 3.1.1 first and then ran npm install after it. The install used the older version to satisfy transitive dependencies. Thanks.\n. Even if it's a dependency of a dependency downgrading to 3.1.1 is still an option. Npm's dependency resolution algorithm allows this as long as you either install the older version first (so it's available during npm install), or explicitly state the version in your package.json as @DomenicRoti suggested.\n. ",
    "Canos": "I was trying to a new project, i got the message while installing angular-cli, can anybody provide a workaround please? \nInstalling 3.1.1 is not a workaround, angular-cli requires html-minifier.\nThanks\n. ",
    "rosko": "I use react-styleguidist, which uses html-webpack-plugin, which uses html-minifier. Travis CI fails.\n. @alexlamsl please, just publish a new patch version to npm\n. Is it too hard for the maintainers to run npm version patch && npm publish?...\n. Thank you, guys!\n. It works for me... strange\n. very strange... it works locally for me, but doesn't work on TravisCI\n. ",
    "d3viant0ne": "Same issue here. It's a dependency of a dependency and I'm sitting on  my hands at the moment :(\n. @rosko - @DomenicRoti is correct, install that as a devDep and you can get past the build errors\n. ",
    "DomenicRoti": "For a temp fix though this in your package.json:\n\"html-minifier\": \"3.1.1\",\n. If you specify it in your package.json (as 3.1.1) then when you do an npm install, it won't try to install 3.2.0 for Angular-Cli, it will use the version the specified in your package.json\n. ",
    "MohammedSiddiqui": "Makes you wonder how fragile all of this is ... waiting\n. ",
    "danielsamuels": "Yup, our builds just started failing. Installing through Yarn FWIW.\n. Probably needs to propagate to local CDNs?\n. ",
    "luzzardi": "Still not working for me\nnpm ERR! fetch failed https://registry.npmjs.org/html-minifier/-/html-minifier-3.2.1.tgz\n. ",
    "meeksfred": "Still not working for me either.\nnpm ERR! fetch failed https://registry.npmjs.org/html-minifier/-/html-minifier-3.2.1.tgz\nnpm WARN retry will retry, error on last attempt: Error: fetch failed with status code 404\n. ",
    "nesukun": "Same here, forcing to use 3.1.1 works but this is going to break many CI's\n. ",
    "soldair": "im looking into this please track this at the issue created by @heatmonkey\nhttps://github.com/npm/registry/issues/85\n. ",
    "timeapen": "Is this really fixed?  I think we have some kind of transitive dependency that is looking for 3.2.0, so our build is failing.  Also, if I execute a npm view html-minifier versions I don't even see 3.2.2.\n'3.0.0',\n  '3.0.1',\n  '3.0.2',\n  '3.0.3',\n  '3.1.0',\n  '3.1.1',\n  '3.2.0' ]\n. ",
    "heatmonkey": "This is a NPM issue, nevermind.\n. ",
    "ryexley": "Thanks for the update...sorry, I should've looked through previously closed issues before opening this one.\n. ",
    "soubok": "sorry, it's my fault, my href attribute content is provide by <?php ... ?>, then you have no way to know\nthat my php script outputs http://foo/?ln=fr\neg. \n<link href=\"<?php echo 'http://foo/?ln=fr' ?>\" rel=\"alternate\" hreflang=\"fr\">\nhowever, I wondering if ignoreCustomFragments treats this case ?\n. thanks. ",
    "CarbonFactory": "Please close this. I refactored the attributes to valid HTML.\nIt was working with NodeJS4 and html-minifier version 2. ",
    "mr-moon": "CLI also works.... ```\nfs.readdir(SOME_PATH, function (error, files) {\n    files.forEach(function (file) {\n        // minify works\n    });\n});\nfs.readdirSync(SOME_PATH).forEach(function (file) {\n    // minify doesn't work\n});\n```\nWhatta?. ",
    "maruilian11": "@alexlamsl thank you!. ",
    "zebapy": "@alexlamsl What function is exposed to window to even use minifier like this?. Not necessarily. If the import worked, I should be able to use the minify function. \nAs for including the script in the browser via a <script src=\"\"> tag, what global function is exposed and intended to be used? I'm trying to look at the example in assets but it's using require in the browser? . ",
    "nuintun": "I think if custom fragments is attr or attr value, the whitespace can't been removed if not removeTagWhitespace: true, and i also set:\njs\n{  \n  customAttrCollapse: /<%={1,2}.+?%>/,\n  ignoreCustomFragments: [/<%={0,2}.+?%>/],\n  customAttrSurround: [[/<%[^=].*?%>/, /<%[^=].*?%>/]]\n}. ",
    "timreichen": "This tool should include the cli interface, not have a separate package for it. Look at crisper or browserify for example.\nThe structure of a package should be something linke this:\n\n. ",
    "Somebi": "Strange indeed. Now it's gone for me too... Sorry then, close this issue. I'll open and post examples if I'll spot that issue again.. ",
    "bradvogel": "Thanks! Mind rereleasing on npm?. ",
    "benguild": "@alexlamsl Getting \"Parse Error:\" with that after \" --ignore-custom-fragments\" ... outputs the entire body of the file. For other files, it's just generating empty HTML files.. Ah, I see. That does work. However, with quotes in it... it chokes:\nbash\necho '<h4{{ if \"1\" }}>' | html-minifier --ignore-custom-fragments [\"{{[\\s\\S]*?}}\"]\nI'm wondering about other edge-cases, as well.. That works well. Thanks. ",
    "jfoclpf": "FYI I've been using this and so far it's working fine:\n--ignore-custom-fragments \"/{{[{]?(.*?)[}]?}}/\". ",
    "GendelfLugansk": "@zebapy Did you find a workaround? I also have issues importing html-minifier but I'm using ember-cli. UPD: replacing require with requireMinify in htmlminifier.js and then importing it like const htmlMinifier = window.requireMinifier('html-minifier'); seems to work for me. But when replacing one should be careful about words required and requires.. ",
    "xiaoxiaojing": "oh\uff0ci suddenly knew how to do it. Add ignoreCustomFragments:: [ /<%[\\s\\S]*?%>/, /<\\?[\\s\\S]*?\\?>/, /_%_%[\\s\\S]*?%_%_/]. ",
    "SSAT": "Thanks @alexlamsl , but I'm not seeing where is the extra \"<\" is to replace with <. I'm using just the html tag. Can you please elaborate on the solution. I will appreciate it.. ",
    "hillmanov": "I will see if I can find out what webpack is doing with the html-webpack-plugin (which uses this module) when in production mode, and will see if there is a way I can pass in my own custom options. . ",
    "wangyue57": "before htmlmin: \n html\n<button onclick=\"foo(event); return false;\"></button>\nafter htmlmin: \n html\n<button onclick=\"foo(event), !1\"></button>\n. ",
    "r3wt": "triggered. ",
    "petermikitsh": "This creates integration issues with react server-sider rendering. Right now, I'm only observing those issues in Firefox. The markup is reusable in Chrome + Safari.\nWarning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n (client) =\"background:#0C8DCE;\" data-reactid=\"5\">\n (server) =\"background:#0C8DCE\" data-reactid=\"5\"><\nI guess those trailing semicolons do matter.. ",
    "buildbreakdo": "@petermikitsh Have this issue in Chrome as well. Unclear how to configure html-minifier to leave trailing semicolon alone in the style attribute, @alexlamsl is the referenced issue a proposed fix?. ",
    "DChristiany": "I have created a fork (found here: https://github.com/DChristiany/html-minifier), that offers a configuration option, that does not remove trailing semicolons.\nShould I just create a Pull Request (sorry, i'm new to working on open source projects).. We do want the minifying of the CSS, removing whitespace etc.\nWe just need the trailing semicolon.\nI adapted the code, to make sure the semicolon is only added, when minifyCSS is true and adapted the tests.. You're right, I'll close this request. I have gone through the code again and am convinced, that the html minifier removes the semicolon, before clean-css has a chance to.\nWithin cleanAttributeValue there are the following lines:\nif (/;$/.test(attrValue) && !/&#?[0-9a-zA-Z]+;$/.test(attrValue)) {\n        attrValue = attrValue.replace(/\\s*;$/, '');\n}\nand the semicolon is removed within the call to replace.. Would this be a suitable implementation?. No, I force pushed a new commit, replacing the old one. I Just force pushed a new version. THis happens before minifyCss is executed, so minifyCss will throw out semicolons (unless configured otherwise) if minifyCss is true.\nShould I add the check for minifyCSS === false anyways, to make it more explicit?. ",
    "orneryd": "So i am trying to figure out what kind of regex is needed. where does it start looking? do i need to include the entire tag or can it be a part of the tag?\nignoreCustomFragments   Array of regex'es that allow to ignore certain fragments, when matched (e.g. <?php ... ?>, {{ ... }}, etc.) [ /<%[\\s\\S]*?%>/, /<\\?[\\s\\S]*?\\?>/ ]\ndo I need a different regex? because this doesn't work\njavascript\n    ignoreCustomFragments: [/\\$\\{.*?}/],\nEdit: I realize that it's not html compliant. The templates are getting wrapped up into template literal strings, put into javascript and then processed before being inserted into the dom. I'm doing this in favor of pulling in a templating framework.. I also tried this:\nignoreCustomFragments: [/<.*\\$\\{.*?}.*>/],\nno dice, I also tried making certain parts lazy, no dice.. ",
    "sumbad": "Try to use this:\nignoreCustomFragments: [ /<%[\\s\\S]*?%>/, /<\\?[\\s\\S]*?\\?>/, /\\$\\{[\\s\\S]*?\\}/ ]\nIt allows you to use es6 template literals in html markup.. ",
    "jrussellsmyth": "@sumbad your regex fails on nested es6 literals. ",
    "andy-huaan": "Solved, Thank you!. ",
    "goumang2010": "\nWhy keepClosingSlash not work? @alexlamsl . ",
    "jpodwys": "Looks like it was actually due to a bug in the version of iron-list I was using. It's been addressed. now.. ",
    "vanduc1102": "the issue is on 3.5.0 which release 13 hours ago, but #805 was closed 10 days ago, I think you should reopen the issue. both 3.4.4 and 3.5.0 do not work, you can test with my code in the description. ok, I was thinking 3.4.3 and 3.4.4 or 3.5.0 should procedure the same result. because in my testcase I generated the html code from jade and html.twig and compare strings of result by string equals ,some tabs was added to make code easy to read, so with version 3.5.0 my testcase doesn't work anymore.. ",
    "juliojerrick": "I am using nuxt.js\n```\n  at new HTMLParser (/Users/jerrickmedia/Documents/jerrick-new/node_modules/html-minifier/src/htmlparser.js:235:13)\n    at minify (/Users/jerrickmedia/Documents/jerrick-new/node_modules/html-minifier/src/htmlminifier.js:948:3)\n    at exports.minify (/Users/jerrickmedia/Documents/jerrick-new/node_modules/html-minifier/src/htmlminifier.js:1301:10)\n    at _callee2$ (/Users/jerrickmedia/Documents/jerrick-new/node_modules/nuxt/dist/nuxt.js:1134:120)\n    at tryCatch (/Users/jerrickmedia/Documents/jerrick-new/node_modules/regenerator-runtime/runtime.js:65:40)\n    at Generator.invoke [as _invoke] (/Users/jerrickmedia/Documents/jerrick-new/node_modules/regenerator-runtime/runtime.js:303:22)\n    at Generator.prototype.(anonymous function) [as next] (/Users/jerrickmedia/Documents/jerrick-new/node_modules/regenerator-runtime/runtime.js:117:21)\n    at onFulfilled (/Users/jerrickmedia/Documents/jerrick-new/node_modules/co/index.js:65:19)\n```. Looks the issue was fixed in a recent nuxt update. Thanks. ",
    "jogibear9988": "look at this html:\n    <!DOCTYPE html><html><head><meta charset=\"utf-8\"><title>MCC</title><style>/*! blabla */html{line-height:1.15;}</style><body>test 1234</body></html>\n\nthe comment blabla is not removed, used commandline:\n    html-minifier --collapse-whitespace --collapse-inline-tag-whitespace --remove-comments --minify-js true --minify-css true. i've found it! but how can i add a paremter to html-minifier commandline?\n\ndoing like this:\n --minify-css {\"level\":{\"1\":{\"specialComments\":0}}}\n\ndoes not work. solved:\nthis works:\n  --minify-css {\\\"level\\\":{\\\"1\\\":{\\\"specialComments\\\":0}}}. One more Question, my Javascript inside the html seems not to be minimized (code is intended). How can I setup this correctly?\n\n --minify-js {\\\"output\\\":{\\\"beautify\\\":false,\\\"indent_level\\\":0}}\n\nseems not to work... ;-(. I've tried minimize js alone, but the js in my html file still has comments and spaces... i'll post a example. Can I post my HTML File anywhere? Some of the js in the file is minizied, some not.... But it's 6MB (or 600 kb 7zipped). I can not reproduce i a small file.\nI've uploaded it, maybe you see something that is wrong in my file?\nindex-compiled.new.zip\n. ",
    "ngyikp": "No\nIt's just a compression suggestion to shave a few bytes when gzipped. ",
    "rogerdielrton": "Without knowing AMD/RequireJS is a bit diffcult to understand the following, but I go with it:\nIf I put\n\nin my page, then it defines a \"require\" global object that enters in clonflict (replaces or is replaced by) with\n\nSo, my initial RequireJS configuration call, \"require.config({\", fails because \"config\" does not exists in the \"require\" object.\nMy request is: extend Grunt generator to generate an specific version of html-minifier that will be AMD-compatible.\nI think that here, http://requirejs.org/docs/node.html, there is more information about it.\nSorry if I don't reply to you, but now I am going to be out during some hours.. I have implemented the solution given here [http://requirejs.org/docs/commonjs.html#manualconversion] for converting the CommonJS module htmlminifier-3.5.2.min.js into a AMD module, but it does not works. I believe that htmlminifier-3.5.2.min.js is not CommonJS because its first line of code is \"require=function e(t,n,r){...\", when the \"require\" would need be provided and not defined.\nIs that no one has need to use \"html-minifier\" with RequireJS?\nPlease, reply to this issue.. Sorry, alexlamsl, but I have not more time to spend in this question. Finally, I have done a server side service that receives the input HTML and returns the minimized HTML.. ",
    "shlomif": "On Mon, 26 Jun 2017 19:30:28 -0700\n\"Alex Lam S.L.\" notifications@github.com wrote:\n\nDoes specifying the same input & output file not working thus requiring this\nnew flag?\n\n\nHi!\nWell, I'd expect it to work, but it can only handle one file at a time, whereas\n--inplace can handle multiple files similar to \u00abperl -pi -e\n's#str#replacement#g' *.html [more files here]\u00bb. Needing to invoke an\nexecutable separately for each and every file may be prohibitive speed-wise, for\ninstance for this use case:\nhttps://github.com/shlomif/shlomi-fish-homepage/commit/3bb006ec2fc752e90891ad2c655345df84831eb0\nRegards,\n-- @shlomif\n. Ping! Any news? Is there anything else I can do?. On Sun, 16 Jul 2017 21:05:05 -0700\n\"Alex Lam S.L.\" notifications@github.com wrote:\n\nThis PR does not pass Travis CI:\nhttps://travis-ci.org/kangax/html-minifier/builds/247290811\n\n\nI'll try to fix it.\n\nOn the code changes itself, there is no need to introduce inplace as\ncommander already stores the --inplace flag.\n\nCan it be accessed the same way?\n\nAlso I fail to see why a\nsimple setting of output file/directory to that of input wouldn't suffice,\nrather than all the extra file handling code.\n\n\nWell, with an output file there is only one that can be specified and you may\nwish to process several files in one invocation. An output directory is only\nvalid if there is an input directory, and in this case all files inside the\ndirectory and its subdirectory will be processed, while I want to avoid\nprocessing some of them or only process a few selected ones. It is also\nsometimes convenient to specify \"--inplace\" from the command line.\nRegards,\n@shlomif\n\n. Travis-CI fixed now.. Thanks! That was quick.. ",
    "cbdabner": "@alexlamsl Thanks for having a look. I had tried the JSON config file, which also failed. That's why I posted, but now that I look at that, it was a poorly formatted file \ud83d\ude1e\nI have no idea how the shell in windows wants it, but the config file makes it easy.. ",
    "wottpal": "I totally see your point. \nBut IMHO there is only additional value in this and no obvious drawback at all, right? I bet the majority of users with php-files will just skip minification in their build process because of these shortcomings instead of spending time either getting comfortable with regular-expressions like I did or crazily filter their gulp-pipes into entire-php files / html-mixed php files. This is definitely not what we want for a faster web, right?. ",
    "chris-morgan": "Thanks. I didn\u2019t notice that option.. Actually I\u2019ve decided I\u2019m not happy with this approach: it will necessarily break some relative links if you\u2019re putting in a dummy value (that is, if you can\u2019t declare with certainty the URL of the resource, but can declare its protocol).\nminifyURLs | URL | Mangled to\n-------------|-----|-----------\nhttps://everything.is.tls/ | /foo | foo\nhttps://everything.is.tls/dummy/ | ../foo | /foo\nhttps://everything.is.tls/a/b/c/d/e/f/g/ | ../../../../foo | /a/b/c/foo\nBasically, the only way to be sure with this is to choose ridiculously improbable, long and deep paths. Something like this ought to do it, for example:\njavascript\nminifyURLs: 'https://' + ('\\0'.repeat(100) + '/').repeat(100)\n\u2026 but I can\u2019t imagine this will be particularly good for performance.\nI request, then, that this be reopened: minifyURLs is not appropriate for cases where the scheme is known, or even the entire origin, but not the full URL. The package used, relateurl, doesn\u2019t seem to have any convenient way of handling this case. (I know minifyURLs can be a function, but that misses the point.). Observation: this isn\u2019t the first time the collapsing of whitespace around <br> has been remarked upon. I myself have to use conservativeCollapse because of responsive line breaks that are hidden at certain sizes. Sure, for many people the whitespace around line breaks isn\u2019t significant, but it\u2019s quite common for it to be significant, and so it\u2019s dangerous to completely collapse whitespace around line breaks. It\u2019s semantically an inline element.\n710 was correct and should be revived..",
    "jhpratt": "@alexlamsl I have the opposite problem \u2014 I'm attempting to parse strings separately (in a JS template literal), and may only have the close tag. Currently this is removed. Is there any way around this?. ",
    "concatime": "Oh, sorry for wasting you time. So it seems that GTmetrix is using an invalid minifier.. Hahaha, we're on the same boat ;). I will try to report it to GTmetrix.. ",
    "drmrbrewer": "Anyone?. @alexlamsl what is the inline argument?  Do you have a simple example (even pseudo-example) to help me implement this?. @alexlamsl  sorry I need a bit more hand-holding.  At present I'm specifying a config file via the -c switch.  And in the config file I have a bunch of settings like the following:\n{\n  \"caseSensitive\": false,\n  \"minifyJS\": true,\n  \"minifyCSS\": true\n}\n\nSo just to test this, I tried providing a function for minifyJS that just returns text unaltered:\n{\n  \"caseSensitive\": false,\n  \"minifyJS\": \"function(text, inline) { return text }\",\n  \"minifyCSS\": true\n}\n\nBut when I run html-minifier with the above config, it seems like it is still using the default js minifier?. Ah, therein lies the problem.  I need to use it via the CLI.  Is it not possible to add a simple option to minifyJS to allow you to specify es6 minification so that it's usable via the CLI?  \nAnd is uglify-es really basically alpha?  I note that you're the author / publisher on that one too.  And I note that there are 170,000 downloads of uglify-es every month, without any mention or warning in the README that it's only alpha quality.... @alexlamsl can you at least make html-minifier remove comments from script blocks that include ES6?  I have moved any ES6 code into a separate script block, to allow the rest of it to be minified, but I now see that even comments are left alone.  I know that the idea is that you leave any ES6 stuff alone, but surely removing comments is pretty uncontroversial?  I'm a bit of a comment freak and have lots of comments.... @alexlamsl what about it?  Just removing comments might be OK?. @alexlamsl nevermind, I'm now just running the following on the output from html-minifier as a quick and dirty way of removing comment lines from the untouched ES6 parts:\nsed -i '/^[[:blank:]]*\\/\\//d' index.html. Thanks so much @cloudspeech for the code.  Works well, with just one correction...\n\nI assume you meant something like:\nvar code = text.match(/^\\s*\\s*$/) ? '' : text;\n\ninstead of:\nvar start = text.match(/^\\s*\\s*$/, '') : text;.\n",
    "kzc": "@drmrbrewer Regarding the minifyJS function for uglify-es you'd basically have to reimplement the following wrapper to get inline working:\nhttps://github.com/kangax/html-minifier/blob/v3.5.3/src/htmlminifier.js#L678-L688\nAFAICT this uglify minify wrapper handles html comments, sets the uglify parse option bare_returns and strips the final semicolon if present.. \n@alexlamsl Do you still find that all major websites are ES5?\n\nI don't actively support uglify-es\n\nThat's a good one! :-) \n\nit is there to make it easier for other people to test and develop, which hasn't really happened much so far.\n\nFWIW, uglify-es is at least as stable as babel-minify (formerly babili) for minifying ES6. With 50,000 downloads per week you'd expect more bug reports if it were not.\nuglify-es might only have 1% of the downloads of uglify-js at the moment but as soon as uglifyjs-webpack-plugin@1.0.0 is released that ratio will change pretty quickly - and probably more bug reports will follow.. I guess this line ensures if uglify-js cannot parse+minify the code it will return the original:\nhttps://github.com/kangax/html-minifier/blob/v3.5.3/src/htmlminifier.js#L685. > none of the sites I frequent use ES6 even in separate files, let alone embedded within HTML.\nIt's ironic that the success of Babel converting ES6+ to ES5 actually encourages old obsolete browsers to live on. I wonder - what year will the majority of websites make the cutover to ES6? 2020?. uglify-es is no longer maintained. You could use yarn resolutions to replace uglify-js with terser.\n```\n$ cat package.json \n{\n  \"resolutions\": {\n    \"uglify-js\": \"npm:terser\"\n  },\n  \"dependencies\": {\n    \"html-minifier\": \"3.5.20\"\n  }\n}\n$ rm -rf node_modules yarn.lock \n$ yarn --silent --no-progress\nwarning package.json: No license field\nwarning No license field\n$ cat doc.html \n<!DOCTYPE html>\n\n\n\n    document.write(<code>Hello ES${5 + 1}.</code>);\n\n\n\n$ node_modules/.bin/html-minifier doc.html --minify-js --collapse-whitespace && echo\n<!DOCTYPE html>\ndocument.write(\"Hello ES6.\")\n\n``.html-minifierusesuglify-js` which only supports ES5. \nconst and let are ES6 contructs. \nhttps://github.com/kangax/html-minifier/issues/843#issuecomment-419784946. It's working as designed. If it cannot parse the JS it will emit it as is.. ",
    "cloudspeech": "This issue should not be closed prematurely.\nInlined ES6 in HTML document has a perfectly natural use case: Custom Elements a.k.a. Web Components. These will frequently be packaged as .html files, and loaded via HTML imports or their polyfilled equivalents.\nTherefore html-minifier should support ES6 minification. It is immaterial whether those cases are frequent or rare, as counted by some unscientific sample. The use case is supported by web standards, and that's what matters.\nFWIW, here's a simple Node.js script for ES6-aware minification using the API, as indicated by @alexlamsl in the above discussion:\n`#!/usr/local/bin/node\n// reads HTML from stdin and writes minified HTML/CSS/ES6 Javascript to stdout\nvar UglifyJS = require('uglify-es'); // ES6-capable JS minifier\nvar minify = require('html-minifier').minify;\nvar stdin = process.stdin,\n    stdout = process.stdout,\n    inputChunks = [];\nstdin.resume();\nstdin.setEncoding('utf8');\nstdin.on('data', function(chunk) {\n    inputChunks.push(chunk);\n});\nvar uglifyEsOptions = { parse: {} };\n// adapted from https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js:676 onwards\nfunction minify_es6(text, inline) {\n    var start = text.match(/^\\s.*/);\n    var code = start ? text.slice(start[0].length).replace(/\\n\\s*\\s$/, '') : text;\n    uglifyEsOptions.parse.bare_returns = inline;\n    var result = UglifyJS.minify(code, uglifyEsOptions);\n    if (result.error) {\n        console.log('Uglify-es error:', result.error);\n        return text;\n    }\n    return result.code.replace(/;$/, '');\n}\nvar options = {\n    collapseBooleanAttributes: true,\n    collapseWhitespace: true,\n    decodeEntities: true,\n    minifyCSS: true,\n    html5: true,\n    minifyJS: minify_es6,\n    removeAttributeQuotes: true,\n    removeComments: true\n};\nstdin.on('end', function() {\n    var input = inputChunks.join('');\nvar output = minify(input, options);\n\nstdout.write(output);\nstdout.write('\\n');\n\n});`. ",
    "jimmywarting": "is uglify-es still alpha or can we make a switch to use it now?. ",
    "cekvenich": "working code:\nfunction minify_es6(text, inline) {\n      var uglifyEsOptions = { parse: { bare_returns: {}},\n         mangle: false,\n         keep_classnames: true,\n         keep_fnames: true,\n         safari10: true\n      }\n  var code = text.match(/^\\s*\\s*$/) ? '' : text\n  uglifyEsOptions.parse.bare_returns = inline\n\n  var result = Terser.minify(code, uglifyEsOptions)\n  if (result.error) {\n  console.log('Uglify-es error:', result.error)\n  return text\n  }\n  return result.code.replace(/;$/, '')\n\n}//()\n. So... it should now work with es6? . ",
    "randyhoulahan": "I am using it bundled with prerender-node.  If i remove the minifier my doc is pre-rendered.  Kindly give it a try on this file:\nhttps://s3.amazonaws.com/pre-render-cache/https%3A//www.cbd.int/biobridge.html\nRight click and save as for the file.. By have a look I mean run the minifier through it.  Thank You,. Sorry you are correct.  I will confirm my error.  On the frontend rendered version that fragment is not there but may be appearing after being rendered on the backend.  My apologies I missed that.  I will confirm and if so I will close.\nRandy J. Houlahan\nAssociate Information Technology Officer\nSecretariat of the Convention on Biological Diversity  |  United Nations Environment Programme\n413 Saint-Jacques, Suite 800\nMontr\u00e9al, QC, Canada, H2Y 1N9\nTel: + (1) (514) 287-6684 (direct) ext. 324 |  Tel: + (1) (514) 288-2220 (reception)  |  Fax: + (1) (514) 288-6588\nrandy.houlahan@cbd.intrandy.houlahan@cbd.int\nOn Aug 29, 2017, at 3:19 AM, Alex Lam S.L. notifications@github.com<mailto:notifications@github.com> wrote:\nIf you look at the actual error reported & the file you've linked above, there is this fragment:\n\nwhich is invalid HTML, thus cannot be parsed and processed.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/kangax/html-minifier/issues/844#issuecomment-325577154, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AMu6urVwxFFFOYmhOvo9XzFzVV8_DbvFks5sc7ucgaJpZM4PFGpf.\n22 May 2017\nInternational Day for Biological Diversity:\nBiodiversity and Sustainable Tourism\n. ",
    "robliao": "What are the necessary options? I couldn't find them in the clean-css documentation. \nThe inlining options (https://github.com/jakubpawlowicz/clean-css#inlining-options) do not seem to apply here.. ",
    "Vasikaran": "Yeah, I noticed that. This is also use case. This small space has broken my webapp lots of places. What can I do?. Okay I understood. Hereafter I will use ingoreCustomFragments properly. . ",
    "ysc3839": "I have scripts with custom mine type in html. For example:\nhtml\n<script type=\"text/ls-javascript\" id=\"...\">\n// scripts\n</script>\nI want them to be uglify.. ",
    "hinok": "@kangax @alexlamsl Could you publish new version with this change to npm? :). ",
    "Michaelangel007": "Whew, glad it isn't a bug!  (I could of swore I tested that code snippet with tags.)  \nSolution requires <script> and </script> prefix and suffix.. ",
    "dakur": "@alexlamsl Thank you!. ",
    "Tinyuen": "@alexlamsl  Thx! . ",
    "dr0bz": "FYI: I've just tried out http://htmlcompressor.com/compressor/ and https://code.google.com/archive/p/htmlcompressor/ They all let a space there.. ",
    "Cap32": "Thanks for replying.\nBut IMO this job should not be taken by minifier, but by some module like html-corrector. Or at least it should provide an option to disable this feature.. ",
    "kireerik": "Sorry for reporting this. You are right. This is a new JavaScript feature, so it only works with uglify-es.. ",
    "kaidjohnson": "Thanks for the quick response!\nYour actual result and mine are the same. Setting <br> aside for a moment, I'm definitely expecting a space between </label> and <span> since they are both inline elements and I am not using the collapseInlineTagWhitespace option.\nI would expect the same with <br> since it, too, is technically an inline element.\nI'll try to put together a PR with updated tests in the next day or two. Cheers!. ",
    "tomap": "That is not working!\nIf you replace the br with a <p></p>\n<pre>\n<p></p>\n</pre><u>test fail</u>\nYou can see that the rest of the code is on the same line as the </pre>\nwhich is not the case with a br\nYou can try with a larger example to be convinced:\n<pre>\n<br>\n</pre>\n<u>\ntest fail\n<i>\ntr\n</i>\n</u>\n<br>\n. And on a much larger scale, you can check the source code of this page:\nhttps://tp\u00ee.eu/2018/01/12/New-comment-system/. I did some more tests, and it seems any self closing tag inside a pre will trigger this issue (like img or else)\n@alexlamsl Could you please reopen ?. I believe this is now fixed by 51819e6ac3f11ebfd5d8b7d36dd9ae2ebddc0813. just grab what is inside https://github.com/kangax/html-minifier/tree/gh-pages/dist and look at the source code in https://github.com/kangax/html-minifier/blob/gh-pages/index.html and you should be good :). ",
    "azopyros": "When using <br>, minification break\n\n\n\n. ",
    "weixu365": "It would be easier to check the browser result if you add some styles or using the inspector to check the element tree. Here's example code:\n<p style=\"margin: 50px;\">\n  testing ul in p\n<ul>\n  <li>item</li>\n</ul>\nafter ul\n</p>\nIt has the same behaviour on Chrome, Firefox and Safari under MacOSX, here's the screen shot and element tree\n\nThe style only applied to the first part of p tag.\n. Sorry for added dist by mistake.\n. The generated </p> before ul/ol should be removed because it's optional. I also added test to check the <p></p> at the end.. ",
    "bluelovers": "also this\nhtml\n<a class=\"u-index-rigster\" href=\"javascript:zh_tran('s');\" class=\"zh_click\" id=\"zh_click_s\"\">\u7b80\u4f53</a>. ",
    "RebeccaStevens": "Possible Solution\nMake the chars function async and await the minifyCSS/minifyJS functions.\nChange this line:\nhttps://github.com/kangax/html-minifier/blob/f8f755936be00dcb7f25cb7d46807cb9dd6e2880/src/htmlminifier.js#L1109\nto:\njs\nchars: async function(text, prevTag, nextTag) {\nand these lines:\nhttps://github.com/kangax/html-minifier/blob/f8f755936be00dcb7f25cb7d46807cb9dd6e2880/src/htmlminifier.js#L1164\nhttps://github.com/kangax/html-minifier/blob/f8f755936be00dcb7f25cb7d46807cb9dd6e2880/src/htmlminifier.js#L1167\nto:\njs\ntext = await options.minifyJS(text);\njs\ntext = await options.minifyCSS(text);\nIssues with this solution\n\nThe library will no longer be es5 compatible. It will instead be using es8.. How can I use postcss to minify css in html with this library when postcss is asynchronous only?. I am able to make a PR if it is wanted.. I plan on adding documentation updates soon.. The signature of minify() is preserve for synchronous calls. It only differs for asynchronous calls.. Changes to dist files have now been undone.. Just did a rebase.. HTMLParser is synchronous when minifyCSS and minifyJS are synchronous.\n\nDoes HTMLParser also need to be made synchronous for when either minifyCSS or minifyJS are asynchronous?. I'll look into that tomorrow and make the necessary change to get it working.. All the tests should now be running. Unfortunately they're not all passing any more :cry:\nThis PR has been quite a bit more work that I initial thought it would be :tongue:. All the node tests are now passing :grin:\nI'm not sure why one of the web tests  isn't :confused: . :tada:. I believe everything should be working now.\nWith regard to test_minify_sync and test_minify_async; the distinction was because synchronous tests would fail when running a test that can only compete asynchronously. I have since merged these two functions into one; a parameter asyncOnly states whether or not the test can only complete asynchronously.\nWith regard to the minifier.js file; I created a NodeJS script that will automatically convert the original file to use the new test functions. Once that is done, the test functions can be added along with the couple of new tests. This script seems to work correctly except for one single line that I had to change manually.. > There shouldn't be any tests that only work in asynchronous mode\nThat is true for the existing tests but I have added a few extra tests that only apply to the async case.\nFor example, testing that an error occurs if a callback is called more than once. (These new tests can be removed if they are considered unneeded).\nI'll look into what is going on with Amazon.html tomorrow.. So with regard to the Maximum call stack size exceeded error that occurs with Amazon.html; the error occurs because there are too many callbacks being put onto the stack. When I increase the stack size it works fine.\nA simple fix to this issue would be to make all the callback asynchronous. However this would break the current synchronous behaviour. Another approach a long the same lines would be to catch the error and recover from it by making the next callback asynchronous; however this has the same issue as before.\nIn order to keep the current synchronous behaviour, I need to make it so the changes in this PR don't effect the way the synchronous code executes (i.e synchronous code cannot use a large callback chains). In the asynchronous case, one of the two methods proposed above should be implemented.. The Maximum call stack size exceeded error should no longer occur.\nIf a callback is provided to minify all internal Task callbacks will now be made async. This unfortunately has the downside of increasing the execution time when running in async mode.\nI initially tried the approach of recovering from the  Maximum call stack size exceeded error ~~but JavaScript started acting weird when I tried to do this. (I could catch the error as long as I didn't do anything with it. As soon as I tried to do something with the error, the error would no longer being caught by the try catch :confused:)~~ - Turns out it was just my debugger acting up.\nMinify execution times for Amazon.html:\nBefore latest changes:\n| Run Type | Execution Time |\n|:------- | ------:|\n| Sync | ~50ms |\n| Async* | ~50ms |\n*With increased stack size.\nAfter latest changes:\n| Run Type | Execution Time |\n|:------- | ------:|\n| Sync | ~50ms |\n| Async with process.nextTick | ~110ms |\n| Async with setTimeout | ~7000ms |. Both sync and async now run the above test in ~50ms.. Unfortunately with that last change, the sync and async versions of minify are outputting different results. It seems that difference is caused when the Maximum call stack size exceeded error occurs.\nI think I know what's going on (something to do with the buffer changes not be recovered) but I'll leave it until tomorrow.. Everything should now be working correctly.\nIn order to fix the issue with the buffer changes not being rolled back in the event of a Maximum call stack size exceeded error, I had to make it so that the buffer is cloned between each internal task. This adds a lot of overhead resulting in the async version of minify taking ~320ms to complete the minification of Amazon.html (sync version still takes ~50ms).\nI'm not sure if it would be best to go with the make every callback async approach or the recover from an error approach. The first options is faster when in NodeJS as process.nextTick can be used, but it is a lot slower when having to rely on setTimeout which browsers will have to do.\nIdeally it would be best to detect if a Maximum call stack size exceeded error in advance and only make the next callback async in that case. Unfortunately I don't think it's possible to detect this error until after it already occurred. :disappointed:. Will do.. Done. Done. Is it ok to switch the order of options and output so that all optional params are together?\n(Same would apply to test_minify_async). ",
    "meistertoca": "Never mind. There was an odd character.. ",
    "GeorgeTaveras1231": "I am having the same issue as @finethanks. Would be nice if this library required no configuration to work in the browser. \nIt seems like this module \n1. needs to be included in the npm package\n2. needs to export the HtmlMinifier object\n3. needs to be referenced by the browser key in the package.json file. ",
    "deejain": "I just realized that fs is likely part of node.  So, using html-minifier within Angular for minification within my unit tests (to test output of a markdown library) is likely not a use case that's supported.\nIs there any way that I can workaround this limitation?  It would be great if I could use your library for my use case.. ",
    "samuelt1": "I did...?\nOriginal:\n<div>\n<img>\n<img>\n</div>\nminified:\n<div><img> <img></div>. ",
    "tomerb15": "Thanks, I'll check it out\n. ",
    "anlexN": "please update document ! i can not see --config-file usage.. ",
    "DanielRuf": "It enables the cache to cache node_modules which produces faster builds.\nWait a second.. https://travis-ci.org/kangax/html-minifier/builds/382331691\nhttps://travis-ci.org/kangax/html-minifier/builds/382388592. Similar? 1:50 vs 2:20 minutes?. Also you did not benchmark with and without the cache, so how do you know that your build would not have been faster with the cache?. In sum, the complete build would be at least 1 minute faster (10:40 vs 9:44).. > Thanks for the interesting in tweaking, but I think we'll stock to whatever default settings Travis CI has in this case.\nBy default Travis uses 50 which is often slower as there are more diffs to calculate than when you use 5.. ",
    "agross": "This was a breaking change for me as I call html-minifier from an external script. In case you follow semver this would have warranted to be released as 4.x as it is a breaking change to the command line \"API\".. ",
    "mindhaq": "same here. changing this in a minor version broke my build.\nAlso, now I don't know what this flag really does. The help documentation does not really make any sense now.\n--no-html5                           Parse input according to HTML5 specifications.\n",
    "runtomaker": "Works but removing all white spaces :) You can look this: <span>This<?php echo 'Man' ?>Online!</span> This likes \"ThisManOnline\" output.\nWe need remove only before the doctype white space.. ",
    "felipemsantana": "Could you give me some directions of where should I look for to fix this?. @alexlamsl as you can see here: https://github.com/kangax/html-minifier/pull/929/commits/4eb22fe53aa130e7c1afb6dbfce0bcc3266318e7\nNot all tests passed using this implementation, I think the only way is changing the clean-css tokenizer\nShould specialComments: 'all' be forced in clean-css?\nOr maybe show a warning if the value is not all.. I agree about how to handle of warnings of clean-css, will do that.\nI think we should show a warning about specialComments if the value is not all.. These tests are failing because they depends of clean-css tokenizer removal of invalid chars and it emits warnings :confused: \nhttps://github.com/kangax/html-minifier/blob/8043e97d4c961edf5dd938073643f94a56a180ed/tests/minifier.js#L645\nhttps://github.com/kangax/html-minifier/blob/8043e97d4c961edf5dd938073643f94a56a180ed/tests/minifier.js#L693\nhttps://github.com/kangax/html-minifier/blob/8043e97d4c961edf5dd938073643f94a56a180ed/tests/minifier.js#L3238. https://travis-ci.org/kangax/html-minifier/jobs/384392625\nTo avoid breaking backwards compatibility I suggest to add a new option called ignoreWarnings that defaults to true, in next major version of html-minifier you could switch to false, I think this is the only place that has warnings but it won't be strictly bound to clean-css and can be used everywhere else.. @alexlamsl could you please review the changes and my suggestion? I can't use the minifyCSS option because of this bug.. Only for unhandled exceptions, but most of them should be handled.\nDone in https://github.com/kangax/html-minifier/pull/955/commits/56e40e4f726ec2e7599377680e059a2ffdb06ffa @alexlamsl . ",
    "coreyfarrell": "That's not how lit-html uses this type of dynamic attribute in a template.  When a Javascript template contains disabled=\"${disabled}\" lit-html does not include the attribute in the HTML generated. It creates the HTML element without the disabled attribute then sets the element.disabled property (and resets it each time the disabled variable changes).. ",
    "damianobarbati": "+1 for this: how come this was closed?\nOn Node with ESM enabled:\nimport { minify as htmlMinify } from 'html-minifier';\n=>\nSyntaxError: The requested module 'html-minifier' does not provide an export named 'minify'. ",
    "programmersharp": "but it's not a comment, but just html. so, it's intentionally made this way.. ",
    "brunoaugusto": "So, you \"have no idea\", points me to \"npm\", which, even though I could search about, right now, I have no idea what it could be \u2014 a site, a forum, their own GitHub... \u2014 which was hinted by mentioning my little knowledge on the matter and then you simply close the issue. What? Is opened issues bad for business?\nSigh... NPM was only the cancer I subject myself in order to use this project but, nevertheless, it was this project.. ",
    "mohe2015": "@brunoaugusto I don't know if it helps but maybe try to install from source (see README). ",
    "ZSkycat": "@alexlamsl \nresult in Firefox open\nXML parsing error: poor format\nLocation: file:///C:/Users/Cat/Desktop/svg.svg\nLine 1, column 12:\n<svg xmlns=http://www.w3.org/2000/svg viewBox=\"0 0 448 512\"><path d=\"M436 160c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12 -12-12h-20V48c0-26.5-21.5-48-48-48H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h320c26.5 0 48-21.5 48-48v-48h20c6.6 0 12-5.4 12-12v-40c0 -6.6-5.4-12-12-12h-20v-64h20c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-20v-64h20zm-228-32c35.3 0 64 28.7 64 64s -28.7 64-64 64-64-28.7-64-64 28.7-64 64-64zm112 236.8c0 10.6-10 19.2-22.4 19.2H118.4C106 384 96 375.4 96 364.8v-19.2c0-31.8 30.1-57.6 67.2-57.6h5c12 .3 5.1 25.7 8 39.8 8s27.6-2.9 39.8-8h5c37.1 0 67.2 25.8 67.2 57.6v19.2z\"/></svg>\n-----------^\nresult in Edge open\nXML5610: Missing quote characters.     svg.svg (1,12)\nIE11 also can't work.. IE\nversion: 11.165.17134.0\noutput:\nXML5610: Missing quote characters.     svg.svg (1,12)\n\n. removeAttributeQuotes need to handle svg tags like caseSensitive and keepClosingSlash. Can't think this is a normal behavior because of the wrong implementation of the old IE.\nsvg is standard xml, but html is not.. Sorry, I found the reason why I can't work.\n*.svg and *.html are not the same.\nCan't work in *.svg.\nCan work in *.html \nThanks for instructions. @DamonHD . ",
    "petervanderdoes": "I was confused as well, but almost all options are disabled by default.\nwith some playing around, these options work for me html-minifier --collapse-whitespace --remove-comments --remove-optional-tags --remove-redundant-attributes --remove-script-type-attributes --remove-tag-whitespace --use-short-doctype --minify-css true --minify-js true The first option is what you would think was on by default, judging by the name of program being minifier. :). ",
    "JayHoltslander": "Ugh. Thanks for that. Will try again.. ",
    "alencarlucas": "I tested the same configuration with Gulp, and it worked. So, I think it is a bug with HTML-Webpack-Plugin, not related to HTML-Minifier. Closing the issue.. ",
    "dryleaf": "@DamonHD thanks, I will try that approach.. ",
    "gnbl": "Right, as cited above. The emphasis should be on \"fails without error\". Or rather \"ignores error\" without user message.. ",
    "joshribakoff": "\nIt's working as designed. If it cannot parse the JS it will emit it as is.\n\nRight, again, that was acknowledged in the original issue report:\n\nIt would be nice if the user would get to see the underlying error message.\n\nSilently failing instead of having an error or warning is egregious. I'd like to know what the use case is for a tool to silently fail when passed unsupported input?\nPrecisely we are petitioning for the design to change which would make the tool more reliable & save downstream users lots of wasted time & woes. Is there an actual objection to changing the design? It doesn't seem to make much sense to expend time debating whether this is a feature request vs a bug, if that's your intention, we're just expressing our opinion that the current behavior is not very useful & that changing the behavior would be more useful to us.\nPeople will end up with seemingly random unminified output with no idea why, spend lots of time hunting down why, then will end up here & expend your time posting issues.... If the tool outputted a warning then at least users would be cognizant of the implications of adding es6, and would be able to make a deliberate decision to either not use es6 / disable minification intentionally.\nI would like to know if you are objecting to making a change here, and the reason why? Simply replying with facts that were already stated in the original issue report are not particularly helpful. I think it would be more helpful to outright say that you're not supporting the use case (and if so why), or acknowledge that the current workflow can be improved so that someone can start on a PR? Instead it seems to me like we may be spinning our wheels here without any resolution one way or the other, and I have to wonder to what end.\nThis is a great tool & I while I cannot speak for others, I feel the intention of the community is to make it even greater, not debate semantics.. ",
    "lhorvati": "Is it possible for html-minifier to use uglifyes instead uglify-js?\nuglifyes is the same but supports ES6\nhttps://www.npmjs.com/package/gulp-uglifyes. ",
    "danielvaijk": "Actually, you could just use 'terser', which \n\nis a fork of uglify-es that retains API and CLI compatibility with uglify-es and uglify-js@3.\n\nThe uglify-es package is no longer being maintained.\nhttps://www.npmjs.com/package/terser. @janusz-bb, here's a snippet of a module I wrote for one of my projects. The code belongs to a helper function that minifies HTML content (via html-minifier) rendered by Pug on a server application using Express.\nconst html = await new Promise((resolve, reject) => {\n    res.render(page.name, page.data, (err, html) => {\n        err ? reject(err) : resolve(minify(html, {\n            collapseBooleanAttributes   : true,\n            collapseInlineTagWhitespace : true,\n            collapseWhitespace          : true,\n            minifyCSS                   : true,\n            minifyJS                    : (text, inline) => { return terser.minify(text).code; },\n        //  minifyURLs                  :\n            removeAttributeQuotes       : true,\n            removeComments              : true,\n            removeEmptyAttributes       : true\n        }));\n    });\n});\nNotice how I plug in Terser in the minifyJS field of the minify method. That's how I use Terser with html-minifier. :). ",
    "janusz-bb": "@danielvaijk How exactly can we use terser with html-minifier?. ",
    "HCorte": "any feedback on this issue? is the command given wrong or is it a html-minifier bug?. ",
    "ossdev07": "Ping @alexlamsl @kangax \nPlease have a look at this PR.\nIt will be a delight to see phantomjs removed from html-minifier.. Hi @kangax @mathiasbynens \nYes, we can replace phantomjs with puppeteer or chromium.\nWhat do you suggest, how should we move forward with this.. ",
    "rhenwood-arm": "I would also like to see PhantomJS removed. Can you provide feedback on this PR @kangax @mathiasbynens ?. ",
    "thinkloop": "It seems to have been fixed in v3.5.21, closing.. ",
    "michaelficarra": "I'm sure they were just following the style guide.. ",
    "mbrandau": "This is an issue with your HTML code.\n<textarea id=\"roundtrip\" cols=32\" rows=\"4\" disabled></textarea>\n                              ^ Missing quotation mark\n\n. ",
    "jamesgeorge007": "I think it is a good idea to have this since the user would get an idea of the various commands available for the very first time :thinking: . @DamonHD  Most of the CLI tools these days ship with this option. I guess it is good to have despite the thoughts above :thinking: . ",
    "NewFuture": "+1. ",
    "C-Lodder": "@ra-esmith Are you referring to Terser (https://www.npmjs.com/package/terser) ?. I've just tested it and it's working perfectly fine. I'll submit a PR. PR: https://github.com/kangax/html-minifier/pull/993. ui\":400&lang=\"en&quot;\" is not valid. That's what's causing the issue. ",
    "ra-esmith": "right terser, thanks ... :-). ",
    "arpowers": "Having the same issue. . ",
    "oliviertassinari": "That doesn't play well with webpack:\n\nWARNING in ./~/html-minifier/src/htmlminifier.js\nCritical dependencies:\n649:15-28 the request of a dependency is an expression\n @ ./~/html-minifier/src/htmlminifier.js 649:15-28\n\nAnd later\n\nwebpack:///./~/html-minifier/src ^.\\/.*$:13\n    return map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n                                 ^\nError: Cannot find module 'relateurl'.\n. Let me have a look at it.\n. \n",
    "enomws": "Sorry, didn't mean to commit that. I'm new to the whole pull requests thing so I'm making some mistakes.\n. ",
    "damiendart": "Yup! I'll get that changed.. "
}