{
    "sockeqwe": "Thanks!\n. I can do that.\nI'm not sure what exactly you mean with:\n\none member displayed at time instead of list...\n\nThe view pager should display fragments containing a ListView with pull to refresh support, right?\n. So the swiperefreshlayout should refresh the view pager?\n. ok, pretty strange app navigation, but here it is:\nhttps://github.com/sockeqwe/MosbyViewPagerDemo\nTook about 20 minutes to code it thanks to mosby and some annotation processors.\nBtw. I expect from you that you offer me a beer whenever you see me next time for doing your job ;) \n:beers: \n. it's not mosby related at all, so yes,  why not?\n. Got this too today, it seems that jcenter has some server issues today ... Alternativley you can use\nor \n``` groovy\nallprojects {\n  repositories {\n    // jcenter()\n mavenCentral()\n\n// or \n maven {\n      url 'https://oss.sonatype.org/content/repositories/releases/'\n   }\n\n}\n// Icepick requires\n    maven {url \"https://clojars.org/repo/\"}\n}\n```\ninstead of jcenter()\n. Thank you!\nAt first glance I didn't noticed that you have edited the javadoc ... Thought the method signature is wrong\n. Sources and javadoc are provided through maven central.\nThe problem is that the library is packed as .aar and not as a solid .jar. Android Studio is not able to load sources or javadoc for .aar files. Don't ask my why. \nhttps://code.google.com/p/android/issues/detail?id=77425\nhttps://groups.google.com/forum/#!topic/adt-dev/yVPo71O_ZKM\nOkHttp is packed as a .jar. Actually, you can try the testing module which is a simple  .jar. The sources and javadoc for them will be loaded automatically:\njava\ncompile  'com.hannesdorfmann.mosby:testing:1.0.0'\nTry to open MvpLcePresenterTest and you will see that sources / javadoc are attached correctly.\nYou may find this helpful (never used, because I use IntelliJ 14 / Android Studio 1.2 beta which has a build in decompiler):\nhttps://github.com/xujiaao/AARLinkSources\n. I would say it is.\nIn fact, in our company we are using an internal fork of mosby successfully in a very large app with over 2 million users:\n\nAs you see we have 99,8 % percent of crash free users (the majority of crashes are caused by OutOfMemory since we load a lot of images and an awkward third party advertisement sdk) and we still support android 2.3. \nI'm pretty sure we wouldn't have achieved that without a clear mvp architecture.\nIn mosby 1.1 I may change the internal behaviour of AbsParcelableLceViewState and CastedArrayListLceViewState. This may affect you if you have created custom ViewStates inheriting from that base class.\n. Solved by changing ViewStateManager behaviour.\n. Im facing the same problem with Android Studio 1.2 \nIt seems that there are some internal issues with Annotation Processing.\nHowever, this error only occurs on first time you import the project  start or if you clean / rebuild the project manually. If you just press the green Play button to compile and run the sample it should work without any compilation errors.\nLet me know if that works on your machine as well.\n. but pressing the \"Green Play Button\" works, doesn't it?\n. I installed Android Studio 1.1.0, but still get the same error. I don't know exactly what the problem is (I guess something with annotation processing) but simply pressing the \"Play button\" to compile and run works fine for me.\nEnsure that you have pulled the latest version:\nCould you try to compile it from command line:\ngroovy\n./gradlew assemble --stacktrace\nIf you just want to have a look at the sample apps live on your android phone you can download the apk sample files from here:\nhttps://db.tt/ycrCwt1L\nhttps://db.tt/3fVqVdAz\nhttps://db.tt/z85y4fSY\n. Strange. maybe with clean:\ngroovy\n./gradlew clean assemble --stacktrace\nBtw. I'm working on mac osx.\n. I will strip out the samples of the library project. There seems to be a problem with annotation processing in multiple modules (the sample modules uses annotation porcessing). However, just pressing the \"green play button\" (and ignoring any previous error messages from console) works just fine on my mac book with android studio 1.2 Beta 3.\n. @ziem Really strange! I already checked that, but it still works after doing a clean. I also checked if there is somewhere a local relative path definition, but there is nothing like that.\nEven from commandline with\n./gradlew clean assemble --stacktrace it compiles without any problems.\n. OMG! It's true! Javadoc is the problem!\nIn Java 7 javadoc errors result in warnings. Java8 is more strict and will abort compiling.\n@TechFreak  Thank you very much!\nI removed javadoc generation temporarly. Could you please pull the master branch and check if that works on your machine?\nI tried to disable java doc lint by using \ngroovy\ntask androidJavadocs(type: Javadoc) {\n    failOnError false\n    source = android.sourceSets.main.java.srcDirs\n    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))\n  }\nbut it doesn't work right now.\nHowever, I will try to find a solution for them (fixing the javadoc lint errors is also an option )\nWhat command did you run to get the javadoc lint errors?\n. @TechFreak @ziem @IgorGanapolsky I apologize for the inconvenience!\n@IgorGanapolsky Thanks for the bitcoin :+1:  but I prefer a real beer whenever we will meet us :)\nBtw. The mail example is a work in progress and not finisehed yet. I publish a blog post about the mail app example with some tips of how to use mosby in a real world app.\n. if I find time I will add \"profiles\" for mail senders, but I'm not sure what the tabs should contain ^^\nor \nare you asking me about how to implement an activity with tabs in mvp style with mosby? i.e. the number of tabs and type of fragment the tabs will display are loaded dynamically i.e. from a server? \n. I cant promise to implement that, but I try to find time.\nActually, with mosby it's just an MvpLceActivity, where the \"Content\" is a LinearLayout containing  Tabbar and ViewPager. The \"data\" is a list of \"tabs\" like \njava\nclass TabsData {\n     String name;  // The name displayed in the tabbar\n     String fragmentType;  // some kind of mapping from \"foo\" to \"FooFragment\"\n}\nEach Fragment in the ViewPager has it's own MVP thing ... So Activity uses MVP to control the Tabbar PagerAdapter and ViewPager  and each \"tab\" is a Fragment having it's own MVP thing ...\nHope that helps\n. Jep, it's a work in progress and not finished yet (I had to merge everything on master branch because of another problem #10)\nHowever, thanks for reporting!\nBtw. In case you are interested in the mail sample, I will publish soon a blog post about it with some tips of how to use mosby in a real app\n. Thanks, I will have a look later this week!\n. Do you think it's necessary to rename the methods to onRxError() , onRxNext() and onRxComplete? It breaks backward compatibilty. At least I have over 70 presenters in my apps, where I would have to rename the methods\n. Thanks!\n. Hi thanks, full kotlin support is scheduled  for version 2.0. However, if this is the only impediment you face with mosby and kotlin I will merge your pull request into version 1.1 which is expected to be published soon. I have to check if the type parameter forces any inconvenience, but I don't expect something like that since you could always use rawtypes anyways (at least in java, I'm not sure if rawtypes in kotlin are supported).\n. I will have a look at DialogFragment. I guess it's just a copy & paste from already existing MvpFragment implementation\n. Yep, actually, the ViewState implementation already works like that by using a delegate. Have a look at ViewStateManager and  ViewStateSupport. Maybe I should rename ViewStateManager to something like ViewStateDelegate and rename methods  to match activity / fragments lifecycle names to make it more clear how to use them. \n. I have written a new blog post which describes how to use the delegate. \nhttp://hannesdorfmann.com/android/mosby-playbook\nSee \"Tip 22\" (scroll down to the end of the page)\n. @siavashabdoli I have updated the linke: http://hannesdorfmann.com/android/mosby-playbook \nNo there i no example project, but dialogfragments doesn't behave differently than any other fragment.\n. @SuperThomasLab \nsorry, I have missed your comment / question, somehow I have accidentally muted this thread. \nI think it works if you just use onCreateDialog(Bundle) for the dialog title etc. onCreateView(...) for your main custom view.  I have never tried it.\n@liuzhen2008  it might have been renamed in Mosby3 (or moved into another package, but it there is the same class also in Mosby 2 (and Mosby 1).\nI have to update the docs #185 . I think it was MvpViewStateDelegateCallback (must be implemented by your Fragment or Activity) ActivityMvpViewStateDelegateImpl and FragmentMvpViewStateDelegateImpl where you have to forward (delegate) the lifecycle events to.. Not planned to add a DialogFragment base implementation for MVP, MVP ViewState and MVI (mainly because of time constraints) but if such a base implementation is that straight forward as it is with any other Fragment (just adding the corresponding delegate) then we can add it to this library. \nDo you wanna send a pull request?. Thank you very much!\nIf you use traditional Fragment lifecycle callbacks and setup your Dialog's view in Fragment.onCreateView() I would expect that simply adding the delegate like I did here works. . mosby itself needs no special proguard rules.\nHowever, third party libraries like Butterknife, Icepick, FragmentArgs, Retrofit  and Dagger have proguard rules you have to add to your project. So you have to check that third party libraries to get the right proguard rules for each of them.\nI have to clarify that in the README.  I'm sorry about that.\nIt's possible now to ship android libraries with proguard files. But I'm not sure if this will cause any further problems since the user of mosby can update to any other version of the used libraries ... I have to check the documentation.\n. Hi, \nthe reason i use 1.2.0-beta1 is for better support for unit testing, because of  1.2.0 the generated  R.java is shared with plain old unit testing  (folder test and not androidTest).\nHowever, you can simply use 1.1.3 as lang as you don't run the unit test (some unit test features that require 1.2 I have not pushed to master yet).\nBy the way: I'm  also using Android Studio Android Studio 1.2 RC 3 and 1.2.0-beta1 without facing any kind of problems.\nAre you sure that your issue is not related to #10 \n. Hm, really strange ... \nNow I'm facing the problem that I can only build the samples by enabling Android Instrumentation Tests in Android Studio and not Unit Tests. I'm afraid, but I will have to update to android gradle plugin  1.2.0-beta1 with one of my next commits. Could you once more try to pull the latest master branch and to switch to 1.2.0-beta1? Can you build mosby from commandline with ./gradlew clean assemble? Are you using gradlewrapper or maybe an older version of gradle that may cause the problem?\n. Oh I think you have to enable unit test in android studio:\nhttp://tools.android.com/tech-docs/unit-testing-support\nEnable the unit testing feature in Settings > Gradle > Experimental.\nI guess that is the problem you face with 1.2.0-beta1\n. Me neither. The site is refering to android studio 1.1 which is based on intellij 13 . I guess things has changed in android studio 1.2 (based on intellij 14) or removed completely. I can't find this option  anymore. Nevermind ...\n. Hm, now it's my android studio that mark any dependency to support v4 as unknown. However, pressing the play button can compile and run the whole things expected ... Come on google ... what's going on ...\n. Is there a reason why using Icepick 3.0.3 snapshot?\n. Thanks for the pull request!\nI want to stick on a stable version, therefore I changed to Icepick 3.0.2\n. Im not sure what you are talking about. Are you just talking about the dependency declaration:\ncompile 'javax.annotation:javax.annotation-api:1.2'\nor why im using @Singleton instead of defining things like @ActivityScope?\nRegarding the second one: I'm just lazy :)\nBtw. The mail sample will get a huge dagger2 update.\n. https://github.com/LiveTyping/u2020-mvp/blob/master/app/src/main/java/ru/ltst/u2020mvp/ui/ApplicationScope.java\n@Singleton is just an @Scope like @ActivityScope  or @ApplicationScope is. \nYou could say that @Singleton extends Scope  and  @ActivityScope extends Scope ...\n@ActivityScope is defined in the u2020 project, it's nothing already provided by dagger2, while @Singleton is officially part of javax.inject package. As I already said before, I was supper lazy and use @Singleton since there is just one single scope and one component in this demo app.\nOverall, this demo is not a Dagger2 demo at all ...\n. Hey, \nthis is an AnnotationProcessor that reduces writing boilerplate code like ViewHolder classes etc.\nIt's not mosby related, its a third party library just for generating RecyclerView adapter.\nHave a look here:\nhttps://github.com/sockeqwe/AnnotatedAdapter\n. Thanks, that is missing. I have to add that.\nThe idea was to display different kind of error message depending on pull to refresh or not pull to refresh.\ni.e.\nThe TextView that displays an error message (pullToRefresh == false) should show that kind of message:\n\nAn error has occurred. Please click here to retry.\n\nAnd you can click on the error view to retry.\nIf error was on pull to refresh, then the error is displayed as toast, where \"Please click to retry doesn't make sense and therefor only\n\nAn error has occurred\n\nshould be displayed as toast message\n. There is already some kind of Delegate you can use to bring the functionality and workflow of MVP and ViewState to other components. I will rename that delegate in Version 1.1 to make it more easier to plugin to your custom base activity, fragment or view class.\nSee #14 \n. AppCompatActivity will be the default Actvitiy MosbyActivity extends from in mosby version 1.1 which will be released soon.\nAre you using a custom ViewState? If so please post the code.\nOr are you saving something else with @Icicle ?\nThis kind of error typically occurs if reading and writing parcelable data is not in the same order.\n. @javajack as mentioned above mosby version 1.1 will be released soon (hopefully this weekend if I find some more time) and it will use AppCompatActivity.\nI guess Mosby 1.1 will also fix that bug. So I recommend you to wait few days until Mosby 1.1 is released and update your app afterwards.\n. As far as I remember there are no public changes, therefore I expect no migration needed.\nI guess the bug you are reporting is related to CastedArrayListViewState which should be fixed in Mosby 1.1. Is that theViewState you are using in your MainActivity?\n. @javajack \nCould you also please share the  PostList class?\n. @javajack  I have released a SNAPSHOT that should contain a bugfix for that an #24 . Can you please try it:\ngroovy\nallprojects {\n  repositories {\n    jcenter()\n    maven{\n      url 'https://oss.sonatype.org/content/repositories/snapshots/'\n    }\n}\nVersion is 1.1.0-SNAPSHOT\n. Yes, I would say that this snapshot is production ready. I just made a snapshot to get some feedback on #26  and it should fix your problem as well.\nSo yes, if you dont mind and you think it's possible, making a new release through the playstore would definitely help me to get fast feedback on that issues.\n. @javajack I have release Mosby 1.1.0 that you should upgrade to. It should fix that issues. Thanks for your support and patience!\n. Which version of Mosby are you using?\nIt seems that your Data class has not implement the Parcel Interface correctly. \nIs this crash reproduce-able? Can you share the code with me?\n. Hi, what kind of ViewState do you use? Does your data implements Parcelable interface? Could you please post the full stacktrace?\n. > I'm not using any ViewState.\nThat's the problem. If you don't implement the ViewState feature, than you app will crash because it want to save the ViewState when the app goes into background (or will will be killed by the OS).\n\nAs my activity is always forced to be portrait\n\nThen simply don't use MvpLceViewStateActivity / fragment but \"just\" MvpLceActivity / Fragment (without ViewState in the name)\n. So you are saving some other variables / fields of your activity in\nChoosePlanActivity.onSaveInstanceState() because this issue seems not to be\nMosby related\nPabloku notifications@github.com schrieb am Fr., 24. Juni 2016, 11:27:\n\nHi! That's weird because...I am not usign MvpLceViewStateActivity :)\nMy Activity:\npublic class ChoosePlanActivity\n    extends MvpLceActivity, ChoosePlanView, ChoosePlanPresenter>\n    implements ChoosePlanView {\nMy Presenter\npublic class ChoosePlanPresenter extends MvpBasePresenter {\nMy View\npublic interface ChoosePlanView extends MvpLceView> {\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/23#issuecomment-228300282, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AAjnrgRfxqBWU1MyO5h0Q2JV3sczm7HEks5qO6LngaJpZM4EOIQx\n.\n. Hm, pretty strange ... If you have a look at MvpLceActivity  you will see that it extends from MvpActivity. MvpActivity uses ActivityMvpDelegateImpl to forward lifecycle events to. And if you take a look at ActivityMvpDelegateImpl you will see that onSaveInstanceState() does nothing:\nhttps://github.com/sockeqwe/mosby/blob/master/mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/ActivityMvpDelegateImpl.java#L98\n. Thanks for the clarification! \n. Really strange :)\n\nI guess it's related to #23 and will be fixed with mosby 1.1 as well.\n. @javajack Just wanted to ask if you had the chance to update your app to mosby 1.1.0 and if yes, you still get some related crash reports or is it fixed?\nBtw. I have installed your app. The vertical scrolling is pretty nice, is it a kind of vertical view pager? Well done!\n. Are you puting Fragments on  the Backstack?\n. I see, I have already fixed that problem. There was a problem with the backstack. The fix will be part of mosby 1.1 which will be released soon.\nTherefore I will close this issue. Please come back if the problem still exists with mosby 1.1\nHowever, In general I recommend to avoid puting fragments on backstack\n. @fahimk I have released a SNAPSHOT that should contain a bugfix for that. Can you please try it:\ngroovy\nallprojects {\n  repositories {\n    jcenter()\n    maven{\n      url 'https://oss.sonatype.org/content/repositories/snapshots/'\n    }\n}\nVersion is 1.1.0-SNAPSHOT\n. I have released version 1.1.0 which should fix that bugs. Please update your app and come back if you face any bug!\nThank you very much for your help and for sharing additional information like crash reports!\n. You are right, in my blog post I'm talking about v 1.0.0  withMvpViewStateFragment<MvpPresenter> (I will update this blogpost as soon as I have release 1.1.0).  If you have cloned the current master branch then you will see MvpViewStateFragment<MvpView, MvpPresenter> since I'm working on 1.1.0 and I had made this change to implement a more type safe way to deal with internal delegates #14 \nIf you want to play around with mosby the current master branch or the latest snapshot is completely fine (version 1.1.0). You can expect that msoby 1.1.0 is going to be realeased very soon.\n. @IgorGanapolsky are you putting the fragments on the back stack? if yes, there was an issue with the backstack in Version 1.0.0. This should be fixed in the upcoming release 1.1.0. Could you please test your app with1.1.0-SNAPSHOT ? I guess @GNima  is right and this issues is related to the backstack problem in 1.0.0\ngroovy\nallprojects {\n  repositories {\n    jcenter()\n    maven{\n      url 'https://oss.sonatype.org/content/repositories/snapshots/'\n    }\n}\nVersion is 1.1.0-SNAPSHOT\nPlease let me know if the SNAPSHOT Version solves that problem.\nBtw. You may have to make do a small migration: Starting with mosby 1.1.0 all createPresenter() methods are required to be public (instead of protected)\n. Thanks!\n. yes, you are right.  I will update my blog post and explain new things introduced in 1.1.0 (incl. delegates) in the upcoming blog post. \nI'm also thinking about setting up a dedicated github site as central resource of documentation (combining the information provided by both blog posts) and javadoc, if mosby gets more popular.\n. I have update my blog.\nGithub page is in progress #46 \n. Hi, thanks for reporting!\nI'm not sure If I understand you correctly, but in general: yes the view get attached and detached temporarily during orientation changes even if the fragment is retaining.\nI can't reproduce the behaviour described by you. Can you provide a sample? Maybe you forget to calls super methods on overriding methods? Which version of Mosby are you using?\nFor instance have a look at the sample-mail: The LoginFragment is retaining instance state and the associated LoginPresenter  gets the View attached and detached, but I didn't run in the case where isViewArrached() returns false or reference to view in presenter is null.  Can you point me the problem you found on the  code  of the sample-mail (if you can not provide your own sample code that has this problem)?\nA prerequisite in Mosby is that the Presenter runs on the main UI thread. So ever call from presenter isViewAttached() or getView().setXY() must run on androids main UI Thread.\n. Thanks for  reporting!\n. Having multiple fragments in an Activity is not mosby related. Simply use getSupportFragmentManager().beginTransaction(). ... .commit(). However (for simplicity, you may consider start a new activity for \"the full story\" \n. If you want to share your error stacktrace I could try to help you.\nRegarding activity navigation, thid are the very basics and should be\ncovered in any android tutorial... google for android start activity ...\nRakesh Waghela notifications@github.com schrieb am So., 17. Mai 2015\n15:51:\n\nI did.\nApp used to crash on a back button press.\nWhat are the best practices for activity navigation ?\nAny good article you might want to suggest ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/34#issuecomment-102805610.\n. no, i was just playing a little bit around with travis and havent found time yet to finalize this script yet ...\n. Hi, \nonEvent is the way to register methods on GreenRobot's EventBus.  GreenRobots EventBus doesn't have @Subscribe annotations like Otto, instead every method with onEvent prefix gets registered on the EventBus. \n\nonEventMainThread is just the way to specify that the EventBus should dispatch the Event on android's main UI thread. GreenRobots EventBus supports dispatching Events through different threads.\nYou may wonder where the methods gets registered to the EventBus. GreenRobots EventBus supports inheritance quite well. So BaseRxMailPresenter doesn't registers itself directly on the EventBus, but its super class BaseRxAuthPresenter does. Hence, all  onEvent and onEventMainThread methods along the inheritance hierarchy  (inclusive subclasses) gets registered automatically to the EventBus, i.e. MailsPresenter\nHope that answers your question.\n. Do you have added the dependency to icepick processor in In your APP'S build.gradle file?\ngroovy\napt 'frankiesardo:icepick-processor:3.0.2'\nYou can debug your code: override onSaveInstanceState and step into super.onSaveInstance() with your debugger until you reach MosbyActivity.onSaveInstanceState().  Do the same in onCreate() to ensure that really icepick is the problem\n. I cant reproduce your issue. \nI have created a sample test app, where i increment a counter value in onCreate(). So with every orientation change the counter value gets incremented. The counter value is saved and restored with @Icicle. You can download the sample project from here: https://db.tt/GCzquro9\nI think your problem is something else.\nBtw: at least on my machine I have to use apt . With provided it doesn't work.\n. The sample should just prove that @Icicle works and nothing else. The ViewState is not related to @Icicile.\nRegarding the ViewState question:\nParcelableDataLceViewState is just a ViewState implementation where your model T extends Parcelable  while CastedArrayListLceViewState is used for a model ArrayList<T extends Parcelable>\nIn other words: If you have a List of Items, then use CastedArrayListLceViewState, if you just have a single model class (not a list) then use  ParcelableDataLceViewState\n. Hi, \nyes this is the \"desired\" behaviour. \nRetainingFragments (at least in Mosby) can not survive recreation: as you have already noticed correctly viewstate and presenter gets recreated. However, everything else you put into a bundle like Icicile gets restored because it has been stored persistently into the Bundle.\nYour problem is that you have mixed up two concepts:\nEITHER\n- put everything into the bundle by not using \"RetainingFragment\" (so the viewstate will be saved into the bundle as well, but presenter will canceled and restart requests after orientation change) \nOR\n- if you use retaining fragment there is no need to use Icicle. Simply use fields directly as the will survive orientation changes. By doing so this fields will \"loose\" their value on activity recreation as well as ViewState and Presenter. So after activity recreation you are in the same \"new\" state for all components (all fields are reseted and presenter and viewstate as well).\n. In that case your viewstate is null and therefore the presenter starts to reload. In that case the loading view gets display, followed by the contentview with the loaded value.\nSo yes, the android widgets have restored there previous value, but they are not visible, right? I can't understand the problem you are facing. Or probably LCEFragment is not the right thing for your needs? \nCould you post some code? Then I should be able to give you a concrete advice?\nUsually a clean up method is not neede, because you should set the android ui widgets in showLoading(), showContent() and showError(). However, if you really think a clean up method is needed, then you should override onNewViewStateInstance() which is called if no viewstate to restore has been found.\n. I see. That sounds like the filter controls should be part of the view state as well. I guess you filter the list by reloading data in background matching the filter criteria, don't you? If doing so you can enhance an existing LCE viewstate. \nhave a look here: \nhttp://hannesdorfmann.com/android/mosby-playbook/  \nTip 15 and Tip 17 describes how to make a custom viewstate. However, you still have to reset the filer control to it's initial state in onNewViewStateInstance().\n. Ok, not sure what the error exactly is, but we had a problem with java 8 and javadoc #10 . Do you have the possibilitiy to compile the sample with java 7?\n. @brucemax I guess I found the problem. Android does not support java 8 yet. However, it can be used to compile android code if you specify the sourceCompatibility and targetCompatibility in compileOptions. I have added the compileOptions to the gradle files on master branch. Can you pull the latest master branch and verify if that has solved your problem?\n. I'm not 100 % sure, but I think that this warning just says that you should specify the path to jdk. Just ignore it :smiley: \n. Really? Since Mosby 1.1.0?\nTravis CI is building with java 8 without problems and so does my local machine: \nhttps://travis-ci.org/sockeqwe/mosby\nFrom my understanding this is a local machine config classpath problem.\n. OMG! what a stupid mistake! Thanks!\n. TextView covers 95 % of the common use cases and allows Mosby out of the box to set the correct error string to it etc. \nPlease note that you can add Drawables to TextView as described here:\nhttp://stackoverflow.com/questions/15352496/how-to-add-image-in-a-textview-text\nIf you really want to put a custom view as error view then you are on your own. MvpLceFragment and MvpLceActivity implementation requires TextView as error view. However, you can copy and paste the code to plugin in your custom view as error view.\n. The problem is that a view can only have one id so if there is just one singe TextView you can't have a R.id.errorView and R.id.errorMessage at the same time. Yeah we could check that with if ... else ... instanceof but that leads to very fragile code. Hence it's not an option for me.\nFrom my point of view the simplest way is to write your custom MvpLceFragment or Activity (with or without viewstate). There is really no magic in this \"provided\" classes and writing your own shouldn't be a big deal: \nhttps://github.com/sockeqwe/mosby/blob/6b432c128d5997fd5fb041e7dac2dd4532daa619/viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/viewstate/lce/MvpLceViewStateFragment.java\nhttps://github.com/sockeqwe/mosby/blob/master/mvp/src/main/java/com/hannesdorfmann/mosby/mvp/lce/MvpLceFragment.java\n\nAlternatively, might there be a way to provide some sort of override functionality?\n\nYes, you could do the following: Wrap R.id.errorView (still a TextView) in a Layout to accomplish the desired design of the error view.\nThere are 3 methods you can override:\n- Override MvpLceFragment.animateErrorViewIn()\n  https://github.com/sockeqwe/mosby/blob/master/mvp/src/main/java/com/hannesdorfmann/mosby/mvp/lce/MvpLceFragment.java#L159 Instead of animating the error view override this method to animate the whole \"error layout\". \n- Do the same for \"hiding\" the error layout in MvpLceFragment.animateContentViewIn() https://github.com/sockeqwe/mosby/blob/master/mvp/src/main/java/com/hannesdorfmann/mosby/mvp/lce/MvpLceFragment.java#L115\n- The same \"hiding\" animation for MvpLceFragment.animateLoadingViewIn() https://github.com/sockeqwe/mosby/blob/master/mvp/src/main/java/com/hannesdorfmann/mosby/mvp/lce/MvpLceFragment.java#L104\nAlternatively one could also override showError(), showContent() and showLoading() and place there the animations directly or just set the visibility of the views.\nP.S: I think that connectivity example could be implemented with just a single TextView: TextView can have drawables on top of the text, so you could simply put the clouds drawable on top of the text and use ForegroundColorSpan for the \"Try Again\" button http://stackoverflow.com/questions/3282940/set-color-of-textview-span-in-android. By doing so you can keep your layout hierarchy flat.\n. I see. Well the idea of LCE classes (Loading-Error-Content) is to change (animate) the visibility each view R.id.errorView, R.id.loadingView and R.id.contentView so that in each state only 1 of the 3 views is visible at the same time on screen. However, contentView can be any Android ui view. So instead of defining SwipeRefreshLayout as contentView make the RecyclerView your contentView and like this:\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Loading View -->\n<ProgressBar\n    android:id=\"@+id/loadingView\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_gravity=\"center\"\n    android:indeterminate=\"true\" />\n\n\n<android.support.v4.widget.SwipeRefreshLayout\n    android:id=\"@+id/swiperefreshLayout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <!-- Content View -->\n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/contentView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n</android.support.v4.widget.SwipeRefreshLayout>\n\n\n<!-- Error view -->\n<TextView\n    android:id=\"@+id/errorView\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\" />\n\n\n```\nIn that case swiperefreshlayout will always be visible and on top of everything. then it's up to you to decide when to display or hide the swiperefreshlayout or enable swiperefreshlayout gesture.\nbut that's only one possible way. You can also stick with swiperefreshlayout as contentView and override showContent() showError() and showLoading() to define which view will be shown or hidden in each method call.\nas already said, LCE classes are designed to work this way. But if LCE classes are not solving your problem or you have to write workarounds, then simply don't use LCE as base class to extend from. Write your own class that don't extend from LCE but rather from MvpActivity or MvpFragment to achieve whatever you want to implement. Don't fight against LCE classes! if they simply don't fit your needs write your own one.\n. Hi, jep I agree, getView() should be implemented this way. I have changed that.\nHowever, I don't see any reason for deprecating isViewAttached(). \nPresenter can survive orientation changes (i.e. by using retaining fragment) and therefore attachView() and detachView() can be called multiple times. Since WeakReference is immutable there is no other way to reattach a view to an already existing presenter. Btw. you could also write your own BasePresenter without weakreference. MvpBasePresenter uses WeakReference just to avoid memory leaks for the edge case where a developer implements it's own Activity/Fragment and forgets to detach the view from presenter inActivity.onDestroy()`\n. In general I agree that Presenter usually shouldn't have dependencies to android. Actually, the interfaces are packed in a plain old jar file\nhttps://github.com/sockeqwe/mosby/tree/master/mvp-common/src/main/java/com/hannesdorfmann/mosby/mvp\nHere you can find MvpPresenter. MvpBasePresenter implements MvpPresenter could be moved in the same jar. It's not a big deal.\nHowever, the question is: Is it worth to make an effort in refactoring/repackaging this things. Next we may should refactor rx package and so on. Is it really worthwhile? Will mosby ever be used on oher plattforms?\n. @dalewking I thought about your suggestions:\n1. We are not going to rename packages to mvp-android because the main focus of this library is clearly on android. It should be obvious that all packages are for android. Furthermore, we don't wan't break the current dependencies declaration by renaming packages. If Mosby will ever have first class support for swt or swing the package will be named to mvp-swt to clearly indicate that this one is not an \"android package\".\n2. As already mentioned, MvpView and MvpPresenter are already packed in mvp-common.jar and could be used in the old java world as well i.e. for swt or swing. The question is should we move MvpBasePresenter into mvp-common. On one hand MvpBasePresenter uses WeakReference which is the reason why you have to check if view != null ( or isViewAttached()). From my point of view it doesn't make sense to have a WeakReference to View on a desktop application. You could save all those view != null checks on desktop because the view and the presenter don't have different life cycles (like on android).  On the other hand you could share Presenters between desktop and android app if you use MvpBasePresenter and therefore it should be part of mvp-common.  What do you think?\n. I have moved MvpBasePresenter into mvp-common.\nRegarding Kotlin support. I have tested Mosby with Kotlin in a small sample project and as far as i can tell Mosby itself \"works\". As you have already said other third party annotation processors like Butterknife, Icepick and FragmentArgs  doesn't work. However, they don't cause any compilation or runtime error, they just do nothing :) \nSo full Kotlin support will be part of Mosby 2.0 which can be released only after all annotation processors are working properly. See #47 \n. Thanks!\n. Github page is online:\nhttp://hannesdorfmann.com/mosby/\n. Moving the layer would be the simplest solution. However I personally found this as a convenience features in Mosby, even though there might be other developers who doesn't like to use this third party tools. I thought about something like delegation to make it more pluggable, but havent found a good solution yet. I will take it into consideration for Mosby 2.0\n. Kotlin supported in Mosby 2.0\n. Oh yeah I thought about this kind of questions and scenarios quite often. Should the Presenter hold the state? is a view state necessary? Let me explain why the \"default\" implementation does not need a state on presenter site:\n\nwhen Presenter want to update View between onDetach() and onAttach() this State is lost forever\n\nI assume that every interaction with the view runs on androids main UI Thread. Since screen orientation changes run on the UI Thread as well it's impossible that you run into the scenarios where your presenter calls a view method between onDetach() and onAttach().\n\nMaybe it would be better to store ViewState in Presenter?\n\nIt's a good question. The point is how and what exactly would you store in the presenter? i.e. Making a simple http request to get a list of items from backend. You may have to store those things into presenter bundle:\n- the view's state (like showingLoading(), showingContent(), etc.)\n- the loaded data,\n- if a request is already running \n- the URL parameters for the requests URL like http://facebook.com/user/123/friends, where 123 is the user id and a parameter retrieved from activity intents. The url itself is just a string. But what if its an SQL query. Saving the query as String? Saving all parameters from calling method like presenter.loadUserFromDatabase(int age, String name, double latitude, double longitude separately?\n- Since the view (Activity or Fragment) is the entry point, how do you easily distinguish between calling presenter.loadData() from View (i.e. when the Activity or Fragment gets instantiated the first time) and letting the presenter restore and re-execute the request itself.\nWell, everything from the list above could be implemented somehow. Some things are easy, some more challenging and some require the end user of this library to write more code (i.e. saving all those parameters for the sql query). \nSo I came to the conclusion that a lot of those things are already handled by android itself. Like:\n-  if you have an activity, that should get a list of items from backend like http://facebook.com/user/123/friends the Intent already has stored the userid = 123. \n-  Furthermore, we can rely on that every request is triggered by the view by calling presenter.loadFriends(getIntent().getIntExtra('userId')); which reduces the complexity of \"should the view call presenter.loadFriends() or does the presenter internally restores itself and restarts the requests somehow.\nI agree that in a traditional MVP pattern the presenter would be the centralized component and it should be the presenter that stores the state. But from my point of view it makes life and things much easier if the View stores it's state because in that case you only have to take care about two things:\n- if there is no state to restore (which means starting the view for the first time or after activity recreation) then call presenter.loadFriends()\n- if there is a state simply restore it by calling the methods defined in View interface.\nThe reason why Mosby is implemented this way is simplicity  (KISS principle). Always the same workflow - Parameters are stored in Activities Intent or Fragments Arguments.\n\nMaybe we can save Presenter with ViewState in Bundle to survive recreation by low memory clean up?\n\nAs long as you don't use Retaining Fragment the ViewState survives. So if you have loaded the list of Friends the data will still be there after activity recreation. However, you are right that the presenter does not survive. So if the acitivity gets destroyed while a request is running (not completed yet) then Mosby creates a new presenter instance on activity restart and the same request will be started again. I don't think that this makes any difference if you would save the presenters into bundle: at the end you also have to restart the request somehow again, but now you have to consider presenters internal state as well. As already discussed above, from my point of view it's simpler if the workflow is always the same (started by the View, since View is the \"entrypoint\" on android). I also think that if the android operating system decides that a process should be killed then android has a good reason for doing so and I will not \"fight\" against that by trying by hard to make the presenter survive or store things somehow. I believe that in that case a \"reset\" and \"restart\" is a more friendly option.\nHowever, if you think that your app needs a presenter that saves its state into a bundle you can easily do that! Mosby internally uses a delegate. You can replace or enhance the default delegate (that works as described above) by providing your custom delegate which could call presenter.save(Bundle) and presenter.restore(Bundle). For more details have a look here: http://hannesdorfmann.com/android/mosby-playbook/ \n(scroll down to the end of the page to Tip 22)\n. Thanks for your feedback! I really like architectural discussions like this one. I'm not saying that Mosby is the single perfect solution for that complex topic!\nI definitely agree that something between MVP and MVVM would be a good choice and I think Mosbys approach goes (slightly) into this direction. It could become better once it works with DataBinding  though.\nThe problem is that you cant reattach the View to the SAME Presenter/ViewModel instance easily. You (and I) would like to have something like this:\n1. View(Portait) <--> Presenter(Portrait) <--> Background Task (Portrait)\n2. Screen orientation changes\n3. View (Landscape) <--> Presenter(Portrait) <--> Background Task (Portrait)\nWith retaining Fragments it's easy and you get exactly the thing as described above.\nHowever, with everything else (not Retaining Fragment, Activities, android.view.View) it's not easy to reattach View(Landscape) to Presenter(Portrait). So you have something like this:\n1. View(Portait) <--> Presenter(Portrait) <--> Background Task (Portrait)\n2. Screen orientation changes\n3. View (Landscape) <-- create new presenter instance --> Presenter(Landscape) <--> Background Task (Landscape)\nActually, in Mosby there is something like  ViewState in between which is kind of ViewModel. It survives Screen orientation changes and gives the user on UI Level the impression that everything is still the same state as before orientation changes:\n1. View(Portait) <--> ViewState(Portrait) <--> Presenter(Portrait) <--> Background Task (Portrait)\n2. Screen orientation changes\n3. View (Landscape) <--> ViewState(Portrait) <-- create new presenter instance --> Presenter(Landscape) <--> Background Task (Landscape)\nSo the ViewState in Mosby is that kind of object you are describing as:\n\nWhat matters, and what should retain is ViewState/ViewModel (so it should be stored outside Presenter/View).\n\nViewState is not ViewModel and it's not Presenter, it's something in between.\nIf using android services you can also Retain the \"background task\". It should be easy to reconnect the Presenter to an android service like that:\n1. View(Portait) <--> ViewState(Portrait) <--> Presenter(Portrait) <--> Background Service (Portrait)\n2. Screen orientation changes\n3. View (Landscape) <--> ViewState(Portrait) <-- create new presenter instance --> Presenter(Landscape) <--> Background Service (Portrait)\nPlease note that most of the time in my apps make http GET requesst and many popular http frameworks support http request batching. So making a request for the same URL two times (before the first request completes) results in executing the request just one time and inform both callbacks of the first request like Presenter (Portrait) and the second callback like Presenter (Landscape) or the result comes from http cache. Therefore, while working with http usually it's not a big deal if Presenter restarts the request again after screen orientation changes.\n. Hi,\nyou are on the right track. MosbyActivity is the root Activity and just integrates Butterknife and Icepick. What you are looking for is MvpActvity or MvpFragment from mvp module. It's basically just an Activity / Fragment with createPresenter()  method.  If you want to add ViewState support then MvpViewStateActivity or MvpViewStateFragment from viewstatemodule is what you are looking for.\n. exactly\n. Hi,\nthe idea is that this methud gets called from your pull to refresh mechanism as well like SwipeRefreshLayout and that one passes true as parameter. Have a look at the simple example (sample folder)\n. yes, if activity comes on screen then loadData(false) gets triggered. If\nyou want to implement pull-to-refresh by using SwipeRefreshLayout then\nyou should trigger manually from your OnRefreshListener loadData(true).\nIgor Ganapolsky notifications@github.com schrieb am Di., 9. Juni 2015\n17:22:\n\nIt does not have to be triggered by PullToRefresh action. This method is\ntriggered when loading data when activity comes on the screen.\nOn Jun 9, 2015 11:20 AM, \"Hannes Dorfmann\" notifications@github.com\nwrote:\n\nHi,\nthe idea is that this methud gets called from your pull to refresh\nmechanism as well like SwipeRefreshLayout and that one passes true as\nparameter. Have a look at the simple example (sample folder)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/51#issuecomment-110399937.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/51#issuecomment-110400912.\n. Oh yeah, struggled upon that several times too :smiley: \n. Related to #55 \n. are you sure that you have ever attached a view to the presenter? How does you presenter implementation looks like?\n. Good point!\n. This should be another presenter class imho  and not part of MvpBasePresenter.\n. @RoRoche I just realized that getViewOrThrow() is basically the same as:\n\njava\ngetView().doSomething();\nbecause without any if (getView() != null) or if (isViewAttached()) (which I may deprecate anyway in upcoming versions) check it will crash with a NullPointerException. So this seems to be an implementation detail on developers site.. getView() is deprecated in 3.1.0. See #274. Issue fixed \ud83d\ude04 . Hi, as the error message indicates your view type field must be public. Like this:\njava\n@ViewType(...)\npublic final int myViewType = 0;\nBtw. please report issues on  AnnotatedAdapter repo, not on Mosby because AnnotatedAdapter is not related to Mosby.\n. Ok, let's continue the discussion at https://github.com/sockeqwe/AnnotatedAdapter/issues/13\n. Hi, it's definitely on my TODO list! I have plans to do that in the next 2 weeks ...\n. In general I agree, it's painful to write all those isViewAttached() checked.\nFirst let me explain why MvpBasePresenter uses a WeakReference. Usually there is no need to wrap the MvpView in a WeakReference because:\n1. Any async call should be canceled in detachView(), so that no callback should be invoked afterwards. For instance with RxJava and unsubscribe() this works like a charm. \n2. However, there might be scenarios where you don't want to cancel running async background tasks, like when using retaining Fragments. But also in that case the Fragment gets detached and reattached temporarily during orientation changes. However, Mosby assumes that every interaction with the view takes place on the main UI Thread. So every interaction with the view from a callback / presenter must run on the main UI Thread. Hence it's not possible that a callback accesses the view during a screen orientation change, since screen orientation changes run on the main ui thread as well. Therefore, either screen orientation changes run before callback or vice versa, but never in parallel.\nSo why does Mosby's default implementation uses a WeakReference?\nThe only reason why Mosby's default implementation uses a WeakReference is that I wanted to avoid memory leaks if other developers misuse Mosby by writing a custom delegate that i.e. forget to call  presenter.detachView(). \nThus at a first glance you might come to the conclusion that View can never be null. Unfortunately, it can be in case that View is detached (i.e. user has closed the activity by pressing back button) but an async running background thread has not been canceled in detachView(). i.e. as far as I know Retrofit 1.x has no API to cancel running requests. Therefore, we have to check if view != null anyway.\nAlright, so back to your suggestion to use the null object pattern. Your implementation looks good  (there is a little issue with WeakReference, I have added a comment in your commit to point out the problem) and I think in that case it is reasonable to use reflections. \nBut I have in general a problem with the null object pattern in general. I don't like it because usually it only tries to hide other problems (might be an implementation detail like libraries that don't support canceling async threads or a lack of java programming language syntax / expressiveness).\nOn one hand you are right and those view != null checks are pretty annoying. I have to think  about it again, but I think we could try to find a compromise by adding those kind of base presenter, but I see it more as an addition and not as a replacement of MvpBasePresenter. However, having a second  null object based MvpNullObjectBasePresenter implementation may result in having also a bunch of other presenter implemetation like RxNullObjectPresenter, RetrofitNullObjectPresenter and so on.\nOn the other hand that kind of problem could be reduced / solved by Kotlin, where you could replace \njava\n if (isViewAttached()){\n    getView.showContent();\n}\nwith \nkotlin\ngetView()?showContent()\nWhat do you think?\n. http://kotlinlang.org/docs/reference/null-safety.html\n. Hi @jenzz  I was wondering if you would allow me to integrate your  dynamic no-op  view code into the next major release?\n. Great thanks!\nYes, there is no need for WeakReference. \nCould you please also rename the class to  NullObjectPresenter (any better naming idea is very welcome) since it will not be a replacement for MvpBasePresenter but rather an additional presenter. \n. Merged, thanks!\n. No, this is not solvable.\nYou simply should never call view getter methods from\u00a0presenter (view should not offer getter methods at all). Playing ping-pong between view and presenter like presenter.doSomething() which then calls view.getFoo() is ridiculous. Pass all data needed by the presenter as constructor parameter or as method parameter like presenter.doSomething(user). Indeed, the issue tracking is not really meant for such questions.\nHowever, I have to say that currently there is no place for all resources. I have plans to setup a github page for Mosby to collect all resources in one place (incl. javadoc) #46 , but I haven't found time yet to do so and I'm dreaming of getting such questions asked and answered on stackoverflow.\nRegarding your question: @lurbas  is right:\n- MosbyFragment is just the base class for all fragments which already sets up butterknife, fragmentargs and Icepick. \n- MvpFragment extends MosbyFragment and adds Presenter and createPresenter() into the lifecycle of the Fragment\n- MvpLceFragment extends MvpFragment is basically just a template Fragment for displaying different LCE Views (Loading - Content - Error). If you don't have \"Loading\" then don't use this one.\nSo MvpFragment is what you should use.\nBtw. the same classes with the same naming convention are available for Activities, ViewState and Dagger1 as well\n. AboutFragment displays static content ... therefore it doesn't need a presenter, hence it uses MosbyFragment and not MvpFragment\nI'm not saying that I don't want to answer questions, I just say that the issue tracker is like the name suggests for reporting issues ...\nAnd open source also means, that you can study the code by your own and kick in Debugger and so on\n. You are very welcome to contribute to this project and also to ask questions. Until now I tried my best to answer your questions even beyond Mosby related things, like ViewHolder in RecyclerView and some Dagger basics.\nHowever, I can also expect that before asking you have tried to solve the problem you are facing by your own, i.e.by browsing the source code and understand the source code and so on.\nIf you have a closer look at AboutFragment you will see that there is a variable Person and all this fragment does is display the persons data. I think that this can be seen very easily by just reading over those 30 lines of code of AboutFragment.\nNext you may wonder why I use MosbyFragment and not MvpFragment.\nIf you jump into the source codes of this classes you see in the java doc stating what the classes are for:\nhttps://github.com/sockeqwe/mosby/blob/master/mvp/src/main/java/com/hannesdorfmann/mosby/mvp/MvpFragment.java\nhttps://github.com/sockeqwe/mosby/blob/master/core/src/main/java/com/hannesdorfmann/mosby/MosbyFragment.java\nAnd even if there would be not enough information provided by javadoc I guess reading the source code which are just 50 lines of code each should make things more clear.\nAnd yes, there is nowhere specified that static content should be displayed by just using MosbyFragment (even though I pointed that in Tipp 11 on  http://hannesdorfmann.com/android/mosby-playbook/  ) , but you can't expect that every scenario you are facing is documented somehow. At this point I can expect that someone think of oneself.\nHowever, I agree Mosby needs a little bit more documentation and a central point for all resources. I will setup a github page, but I haven't found time yet ( I'm have a regular full time job ). Probably there will be a section for questions or a way to write comments, where you could ask such questions. Ideally such things would be asked and answered on stackoverflow ...\nI just say that issue tracker is not the right place for such questions, but I also have to admit that there is currently no other place for such questions.\nAll I want is that before asking try to understand the code, search javadoc, google for it\n. I apologize it wasn't my intention.\nSee the difference is that MailsFragment loads a list of Mails in background thread. Therefore it implements MVP pattern. The AboutFragment displays a Person which has been passed as Intent extra data (so it doesn't load data in an async thread) and therefore  AboutFragment does not implement MVP (hence it uses MosbyFragment and not MvpFragment).\nIf the Mail example is to complex, then you should check out the other sample apps where more basic stuff of how to use Mosby is implemented.\nI said: \n\nI'm dreaming of getting such questions asked and answered on stackoverflow\n\nI will try to create a place for such questions as part of Mosby's github page. Until done you can ask questions here. All I expect is that you have investigated the code by yourself more then 5 minutes, think of one self and play around a little bit with the sample code before asking. If it's really still unclear, then go ahead and ask your question here.\nOnce again, I apologize, I didn't wanted to be rude.\nFrom my point of view everything is fine and we can put a end to this discussion.\n. Oh yeah I see ... I forgot to check for SDK 21 ... i will fix that this\nevening ...\nA quick fix is in\nfinishBecauseSuccessful(WriteActivity.java:187) : replace\nfinishAfterTransition() just with finish() to make it work on API < 21\nHowardSchmaeu notifications@github.com schrieb am Do., 25. Juni 2015\n17:32:\n\nHey Hannes,\nif i try to start your Mail Sample on a Android 4.3 Version (Genymotion\nGoogle Nexus 4 - API 18) the i got an Error if i try to send a Mail. If i\ntry the same on a 5.0 (also Genymotion Google Nexus 4 - API 21)...\neverything is fine...\nI got this:\n6-25 17:25:12.703 2221-2221/com.hannesdorfmann.mosby.sample.mail E/Event\ufe55\nCould not dispatch event: class\ncom.hannesdorfmann.mosby.sample.mail.model.event.MailSentEvent to\nsubscribing class class\ncom.hannesdorfmann.mosby.sample.mail.write.WritePresenter\njava.lang.NoSuchMethodError:\ncom.hannesdorfmann.mosby.sample.mail.write.WriteActivity.finishAfterTransition\nat\ncom.hannesdorfmann.mosby.sample.mail.write.WriteActivity.finishBecauseSuccessful(WriteActivity.java:187)\nat\ncom.hannesdorfmann.mosby.sample.mail.write.WritePresenter.onEventMainThread(WritePresenter.java:54)\nat java.lang.reflect.Method.invokeNative(Native Method)\nat java.lang.reflect.Method.invoke(Method.java:525)\nat de.greenrobot.event.EventBus.invokeSubscriber(EventBus.java:498)\nat de.greenrobot.event.EventBus.invokeSubscriber(EventBus.java:492)\nat de.greenrobot.event.HandlerPoster.handleMessage(HandlerPoster.java:67)\nat android.os.Handler.dispatchMessage(Handler.java:99)\nat android.os.Looper.loop(Looper.java:137)\nat android.app.ActivityThread.main(ActivityThread.java:5103)\nat java.lang.reflect.Method.invokeNative(Native Method)\nat java.lang.reflect.Method.invoke(Method.java:525)\nat\ncom.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:737)\nat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:553)\nat dalvik.system.NativeStart.main(Native Method)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/58.\n. In the meantime you could use Delegate to set up your own base fragment:\nexplained http://hannesdorfmann.com/android/mosby-playbook/  (Tip 22)\n\nI think migration will be don not before mid July (I also have to do some\nother things)\nIgor Ganapolsky notifications@github.com schrieb am Mi., 1. Juli 2015 um\n07:36 Uhr:\n\nPlease do this. I cannot use Butterknife 7 in MvpLceFragment because of\nthis....\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/59#issuecomment-117441829.\n. Hi, a few hours ago I have released version 1.1.1 containing some minor bug fixes / code clean up. As this is out now, we can continue to working on 1.2 which basically is \"Migrate to Butteeknife 7\". Hence Pull Requests are very welcome, otherwise I will try to find time for that next weekend\n. Thanks for the pull request.\n\nThere are some other (minor) things I want to address with version 1.2.0 for which I hopefully find time next weekend. In the meantime you can use 1.2.0-SNAPSHOT, which contains Butterknife 7 support.\n``` groovy\nallprojects {\n  ... \n  // Sonatype SNAPSHOT repository\nrepositories {\n    maven{\n      url 'https://oss.sonatype.org/content/repositories/snapshots/'\n    }\n...\n}\n```\nHowever, I'm considering to remove Butterknife, FragmentArgs and Icepick  in Mosby 2.0 to avoid such problems (that I have to migrate manually). By removing them I also can fully support Kotlin faster (see #47 ) \n. The same problem as with Butterknife could occur in the future. What if icepick's API change in 3 months? Then we also have to migrate Mosby to make it work and it also may breaks backward compatibility i.e: Now Butterknife 7 is required in Mosby 1.2.0  you can not use Mosby 1.2.0 as long as you haven't migrate your app to Butterknife 7. \nRegarding Kotlin:  I'm not 100% sure, but I think that Kotlin has some other accessibility behaviour as java. As far as I know there must be a setter method used for each field which doesn't has to declared in your Kotlin class but will kind of \"generated\" internally by Kotlin. And you have to set the value  of a field by using the corresponding setter method. The Annotation processor must be changed to use the setter instead of accessing the field directly like it's done at the moment in java.\n. See #63 \n. No, I'm sorry I'm not the owner of this library, because I have developed this library as part of my job. Therefore, my employer is the rights holder. I'm not sure if we will ever open source it, because then we also have to open source the backend which handles the http request and does image transformation and caching and so on. Furthermore, this is part of a complex CDN and supports some \"fancy\" features like \"soccer ball detection\" and specialized cropping algorithms for sports images (we are building sports app).\nFortunately, Picasso itself already offers a similar solution:\nhttps://github.com/square/picasso/tree/master/picasso-pollexor\nin combination with \nhttps://github.com/thumbor/thumbor\n. Basically ImageProxy is a kind of facade. ImageProxy has a method like: ImageProxy.load(ImageView iv, String url)\nInternally ImageProxy is not using Picasso directly Rather ImageProxy uses ImageLoader which is a interface and the component you can use to swap picasso with glide or whatever else:\n``` java\nclass ImageProxy {\n     private ImageLoader imageLoader;\n public void loadImage(ImageView iv, String url){\n     String urlForVersion = getUrlForVersion(iv, url);\n\n     imageLoader.load(iv, urlForVersion);\n }\n\n}\n```\njava\ninterface ImageLoader {\n     public void loadImage(ImageView iv, String url);\n}\n``` java\nclass PicassoImageLoader implements ImageLoader {\n@Override\npublic void loadImage(ImageView iv, String url){\n    Picasso.with(context).load(url).into(iv);\n}\n\n}\n```\n``` java\nclass GlideImageLoader implements ImageLoader {\n@Override\npublic void loadImage(ImageView iv, String url){\n    Glide.with(context).load(url).into(iv);\n}\n\n}\n```\nIf you mean how to use it with Thumbor, here you are on your own ... But rewriting a url is not that hard. Infact Picasso and Glide offer a similar API. Probably you can use Picasso - Thumbor implementation and try to adapt it for Glide\n. What do you mean with different context?\n. There are several ways to do that.\nWhat we did is that we specified a RequestBuilder that provides nearly the same API as Picasso and at the end RequestBuilder creates a RequestOption and calls ImageLoader.load(ImageView iv, String ur, RequestOptions options):\njava\nimageProxy.load(url).resize(50,50).into(iv); // This it the public API\ninto() then internally calls load(iv, ur, options) (so the first code snipped from above was a really simplified version just to show you how one could swap various implementations). At the end ImageLoader takes the RequestOptions (indipendent data structure, not Picasso or Glide related):\n``` java\nclass PicassoImageLoader implements ImageLoader {\n@Override\npublic void loadImage(ImageView iv, String url, RequestOptions options){\n    RequestCreator rc = picasso.load(fullUrl);\n\n    // Placeholder\n    if (options.getPlaceholderResId() != null) {\n         rc.placeholder(options.getPlaceholderResId());\n    }\n\n    // Error view\n    if (options.getErrorResId() != null) {\n         rc.error(options.getErrorResId());\n    }\n\n    // Fading?\n    if (!options.isFading()) {\n         rc.noFade();\n    }\n\n    // Resizing\n    if (options.resize()){\n         rc.resize(options.getResizeWidth(), options.getResizeHeight());\n    }\n\n    ...\n\n    rc.into(iv);\n}\n\n}\n```\n. Yes, whatever suits best for your needs.\nYou may have a look at picasso code to get some inspiration how they have implemented those things https://github.com/square/picasso/blob/master/picasso/src/main/java/com/squareup/picasso/Request.java#L197\nBtw. I don't see the need of a transform operation because the desired image should be provided  (already transformed) by the ImageProxy server ... \n. Yes, you are right, there is a bug introduced with latest Internal delegate implementation change. I will fix it soon\n. Thanks for reporting. \nThe bug is fixed. I have pushed 1.1.1-SNAPSHOT containing the bugfix to sontype's snapshot repository.\n``` groovy\nallprojects {\n  ... \nrepositories {\n    maven{\n      url 'https://oss.sonatype.org/content/repositories/snapshots/'\n    }\n...\n}\n```\nPlease let me know if this SNAPSHOT version fixes that problem for you as well.\n. @pkliang Please let me know if it works as expected now, once you have time to check your app with the  latest snapshot.\n. Thanks!\nLiang Song notifications@github.com schrieb am Di., 7. Juli 2015 um\n15:32 Uhr:\n\n@sockeqwe https://github.com/sockeqwe I have my app tested with the\nlatest snapshot, it works as expected now.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/61#issuecomment-119203188.\n. @pkliang fyi: I have released mosby 1.1.1 containing this bugfix. \n. Thanks!\n. Jep, I also think that developers can move their MyAppsBaseFragment (uses Butternknife, FragmentArgs and Icepick) in a own library if they don't want to write a BaseFragment again and again. This allows them also to use a older version of Butterknife or whatever with the latest version of  Mosby.\n. Also removed Retrofit, Dagger and RxJava dependencies for same reason\n. Yes, that should work.  However, onRetainCustomNonConfigurationInstance() is a method defined in FragmentActivity. Therefore this method does not exists in plain old Activity. I wanted a solution that works universally for both. But I'm how to implement a \"universal\" solution since onRetainNonConfigurationInstance() is marked as final in FragmentActivity. Hence, this method cannot be overridden.\n\nI guess onRetainCustomNonConfigurationInstance() can be used and the plain old Activity (not FragmentActivity) has to override onRetainNonConfigurationInstance().\nThanks for the tip @brianguertin !\n. Implemented, will be part of Mosby 2.0\n. It is implemented. You can have Activities with presenter that survive screen orientation changes since Mosby 2.0. simply extend from MvpActivity or  MvpViewStateActivity (or LCE variants) and call setRetainInstance(true) in onCreate()\n. Under the hood Mosby 2.0 uses onRetainNonConfigurationInstance()\n. Fixed in version 1.3\n. Are you sure you are using 1.1.1  and not 1.2.0-SNAPSHOT ? \n. It seems that you are using  Butterknife 7 with Mosby 1.1.1 because butterknife 7 has renamed Butterknife.inject() to Butterknife.bind()\nButterknife 7 is supported with 1.2.0-SNAPSHOT\n. you are wlecome!\n. Thanks! I will have a look and merge it on weekend.\n. Maybe, but not in the near feature as I'm busier then I wanted to. Maybe I will write a blog post about that topic in fall. At the moment I have other things in mind with higher priority.\n. That is great! Haven't noticed 3.0 release yet! thanks for the hint.\nI think @IgorGanapolsky is misunderstanding something or not sure what he actually wants to test:\nIn MVP you have 3 layer: Model (Business Logic) , View (UI) and Presenter. Each layer can be testet independently. A concrete example: You have a local SQL database storing some kind of  items, having a Presenter to load those items and interact with a View (MvpLceView) which basically displays the list of Items in a RecyclerView:\nHow would I test that is:\n1. Testing Model / BusinessLogic:  Write Unit test just for testing your Model / Business Logic like inserting items in the database works correctly, queuing items from database and so on.\n2. Test Presenter: So the presenter is connected to the database. The database is already testet. So what to test in presenter? Here you should test if Presenter calls Views methods correctly and as expected like view.showLoading(), view.showError() etc. Let's assume ItemsView extends MvpLceView. ItemsView is a interface:\n``` java\n@Test public void testLoadingItemsSuccessful(){\n // A mock view for testing\n MyView view = new MyView {\n\n      public boolean showLoadingCalled = false;\n      public boolean showErrorCalled = false;\n      public boolean showContentCalled = false;\n      public boolean setDataCalled = false;\n\n      public void showLoading(boolean pullToRefresh) {\n           showLoadingCalled = true;\n      }\n\n      public void setData(List<Item> items){\n         showItemsCalled = true;\n      }\n\n     public void showError(Throwable t, boolean pullToRefresh){\n          showErrorCalled = true;\n     }\n\n    public void showContent(){\n       showContentCalled();\n    }\n  }\n\n// Presenter to test\nItemsPresenter presenter = new ItemsPresenter();\npresenter.attachView(view);  // Set the mock view\n\npresenter.loadItems();\n\n// After having loaded items, we test if view methods gets invoked correctly\n   assertTrue(view.showLoadingCalled);\n   assertTrue(view.showContentCalled);\n   assertTrue(view.setDataCalled);\n   assertFalse(view.showErrorCalled);\n}\n```\nThis is how to test an presenter, you basically check if the interaction with the view is as expected. You should also test if an execpetion while loading items has been handled successfully, in other words has been view.showError() called instead of view.showContent(). You may also consider to test if presenter.detachView() really sets the reference to your view to null. That are the things you should test when talking about testing presenter. If you use one of Mosby's MvpLce Presenter you can assume that this is alredy tested for you and you don't have to test that again.\n1. Testing View: Now you know that model is tested and presenter is tested. So in View you basically just test if your UI is displaying things as expected like this:\n``` java\n@Test public void testShowingItems(){\n ItemsActivity view =  ... ;\n\n view.loadData();\n\n assertEquals(view.contentView.getVisibility(), VIEW.VISIBLE);\n assertEquals(view.errorView.getVisibility(), VIEW.GONE);\n assertEquals(view.loadingView.getVisibility(), VIEW.GONE);\n\n}\n```\nIt's pseudo code. just to give you an idea how to test things.\nSo I guess when @IgorGanapolsky  is asking me how to test Presenter (the title of this issue) he is actually asking of how to test model / business logic, don't you? And business logic can be testet as a pure java unit test. Presenter as well. only View test may require android instrumentation tests.\nHope that helps\n. Testing observables, is testing your business logic.\nthere is a observable.toBlocking() method you can use to transfrom your (async) observable into a blocking one and ask for the returning values \nOR\nTestSubscriber\nMore info here: https://medium.com/ribot-labs/unit-testing-rxjava-6e9540d4a329\n. It can be a custom view interface of a hypothetical app ...\nSomethink like LoginView of the mail sample\nor it can be of MvpLceView in an hypothetical app ... \nor whatever view you want to test ...\nit's just pseudeo code to give you an idea of how a test could look like\n. What exactly do you want to test? Which mocked method is not invoked, from\nView?\nTheRishka notifications@github.com schrieb am Do., 14. Jan. 2016, 11:52:\n\nI've encountered another problem while trying to Unit Test presenters. I\nkeep getting \"Wanted but not invoked\" error with Mockito. I've also tried\nto use MvpLcePresenterTest.java in testing package of Mosby. Got the same\nerror. Does anybody have any clues how to use Mockito for testing Mosby\nPresenters?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/68#issuecomment-171611049.\n. MvpLcePresenterTest is used to test if you MyFragmentPresenter calls the corresponding MvpLceView methods like view.showLoading(), view.showContent() etc. as expected.\n\nI guess your test is failing because your Presenter doesn't implement that \"LCE\" calls correctly (or as expected by MvpLcePresenterTest. \nyour method presenter.loadSomeRandomStuff(); should call:\n1. view.showLoading(false);\n2. load some data and then either call:\n- view.setData(data); and view.showContent();\n- or view.showError();\nBut your presenter doesn't seem to call that (MyFragmentView.showLoading(false); has not been called). Therefore the test is failing.\nIf you can't find the problem yourself, you could post the code of MyFragmentPresenter and I will try to help you ...\n. Yeah, your problem is that you use theMvpLcePresenterTestwhich is meant to test a presenter that manages aMvpLceView.\nBUT\nfrom your presenter implementation I can say that this is not aMvpLceView! LCE stands for Loading-Content-Error. Let's have a look atMvpLceView`:\n``` java\ninterface MvpLceView extends MvpView {\npublic void showLoading(boolean pullToRefresh);\n  public void showContent();\n  public void showError(Throwable e, boolean pullToRefresh);\n  public void setData(M data);\n}\n```\nThe MvpLcePresenterTest is just a template to test a presenter that invokes all of this 4 methods on the view. So the presenter that can be tested with MvpLcePresenterTest is something like this:\n``` java\nvoid loadSomeRandomStuff(){\n getView.showLoading(false);\n\n try {\n     List<Object> stuff = setMockArrayList(5); // may throws an error\n     getView().setData(stuff);\n     getView().showContent();\n } catch( Exception e) {\n     getView().showError(e, false);\n}\n\n}\n```\nSo you simply don't have a view that fullfills the idea of  MvpLceView. Therefore the MvpLcePresenterTest will fail. \nIf you read the error message carefully you notice that error:\nWanted but not invoked:\nMyFragmentView.showLoading(false);\nAs already said, the MvpLcePresenterTest assumes that getView(),showLoading(false) has been called. But your Presenter actually don't call that method.\nTL;DR MvpLcePresenterTest is not suitable for the kind of View / Presenter you have. You have to write your own Test!\n. This error comes from the fact that this test template also tests that\ngetView().showError() has been invoked ... Checkout the source code of\nstartLceTest() and you will see what's going on\nTheRishka notifications@github.com schrieb am Do., 14. Jan. 2016, 14:42:\n\nMyFragmentView does extend MvpLceView.\nBut methods are quite bad, like stopRefreshing() is useless coz\nshowLoading() is already defined. So I've redone testable presenter and\nMyFragmentView.\nNow my method looks like this:\nvoid loadSomeRandomStuff(){\n     getView.showLoading(false);\n     try {\n         List stuff = setMockArrayList(5); // may throws an error\n         getView().setData(stuff);\n         getView().showContent();\n     } catch( Exception e) {\n         getView().showError(e, false);\n    }\n}\nJust like you told me. Now it throws another error! It says that some\nmethod wasn't wanted but invoked showError. So it's clear for me that it\nwasn't Mockito or Mosby problem! It was me who misunderstood Mockito\nmessages! I can deal with it on my own, I hope:) Much thanks for your\nsuper-fast replies!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/68#issuecomment-171647664.\n. I think there is a misunderstanding on what the goal of testing a presenter is.\n\nSo may I ask you, what are you trying to test? What do you actually want to test?\n. alright, that sounds good.\nBut is void loadSomeRandomStuff(List<Object> data) really the method you will invoke in your app? To me it seems that you want to invoke this method just for testing (parameter data?)\nSo what you typically do is mocking the view and the business logic. With business logic I mean \"the component that loads the data\". \nActually you are not testing the view (is something displayed, is View with id R.id.contentView == View.VISIBILE) and you are not testing if the business logic is working correctly (does the data is loaded successfully and containing the data x,y,z ). In MVP you test each layer independently from the other: \n- M = Business logic, i.e. Database query works correctly , loading data over http works and gets parsed correctly etc.\n- V = View (i.e. UI tests with espresso): Does View with id R.id.contentView is actually displayed (view has visibility View.VISIBILE or View.GONE), does a click on a certain View like a button triggers an action etc.\n- P = Presenter. here you just test if the Presenter is invoking the corresponding View methods correctly since the Presenter \"manages/coordinates\" the View so here you test something like this:\n  _\"If presenter.loadData() is invoked and could not load data (i.e. simulate no active internet connection) then view.showError() should be called\"\n. I can't open the file (seems to be corrupt) but I guess I know what you are talking about. I don't think that this a bug of Mosby. To me it seems that it's more a bug of design library or at least a misbehaviour while doing translationY animations.  It seems that AppBarLayout or CoordintorLayout makes internally use of translationY property. \nYou should may consider to report this bug on googles bug tracker as well:\nhttps://code.google.com/p/android/issues/list\nThe easiest workaround is to override the animation in MvpLceActivity and MvpLceFragment. You can override protected void animateContentViewIn(). I guess doing a simple cross fade animation will do the job. \nLet me know if that helps.\n. I will do that if you can provide me your XML layout and maybe your apk file ...\nRegarding animation: You could copy and paste the related animation code from showContent() method. Just remove everything that contains translationY :)\nhttps://github.com/sockeqwe/mosby/blob/master/mvp/src/main/java/com/hannesdorfmann/mosby/mvp/lce/LceAnimator.java\n. Yeah, not sure what's going on here, but the problem seems to be the star explode  animation.\nSorry, but you are here on your own since it's not Mosby related. You may consider create a new issue in the github repo of the animations library I'm using\nor \nsimply not use the animation and just swap image resource for stared / unstared or something like this.\n. misunderstanding:\nim just saying that Im not sure which databinding engine should be used:\nAndroids databinding plugin\nOR\nRxAndroid / RxJava\nThat has to be evaluated\nJuli\u00e1n Su\u00e1rez notifications@github.com schrieb am Fr., 17. Juli 2015\n16:59:\n\nAgree with Igor on this one.\nData Binding is a great thing, it gets rid of the need of Butterknife,\nis/will be officially supported, but I also thing that integrating this in\nthe right way in mosby would not be an easy task\nOn Fri, Jul 17, 2015 at 9:52 AM, Igor Ganapolsky <notifications@github.com\n\nwrote:\nData Binding gets rid of the need for Butterknife. It also has Observable\nObjects - which automatically update your Views when data changes. It\nalso\nmakes your ViewHolder code simpler, by binding all the Views for you\nimplicitly. How could this be a bad thing?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/71#issuecomment-122300025.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/71#issuecomment-122302546.\n. @Nilzor thanks for sharing your knowledge!\nButterknife is an alternative, but Butterknife requires R.java file  for getting view ids. I would like to avoid having Android dependencies in the  ViewModel in favor to write unit tests that can run on jvm (rather than a real android device by using InstrumentationTests).\n\nI agree that using a first party solution (android's data binding) would be a better choice regarding maintenance, correctness, further development etc.\nAn advantage of RxJava is that we don't have to worry about lifecycle, since the view simply unsubscribes itself in Activity.onDestroy(). So there is no need to have a method we have to invoke to tell the ViewModel that we should cancel any ongoing async. background threads, because the view has been destroyed. I'm not sure how this could be done easily with android's data binding framework. I guess some kind of cancel command is needed for something like this. Any thoughts on that?\nViewState is a \"special\" class to hold the UI's state during screen orientation changes. So yes, in MVVM that would be part of ViewModel I guess. IMHO : ViewModel = Presenter + ViewState + DataBinding\n. @shism2 What is the difference between MVVP and MVVM?\n. Ditched MVVM in favor of Model-View-Intent; sample is available. Pre release (alpha release of Mosby 3.0.0-alpha1) coming soon.. @virl thanks for sharing your thoughts!\nIn Mosby you don't have to use Fragments if you don't want to. You can use any kind of ViewGroup as well. Example: https://github.com/sockeqwe/mosby/blob/master/sample/src/main/java/com/hannesdorfmann/mosby/sample/mvp/lce/layout/CountriesLayout.java\nCompared to Motar / Flow  Mosby don't need dependency injection for creating presenters that can survive screen orientation changes etc. Dependency injection, like dagger, is just used in the samples as I consider dependency injection as best practice for modern android apps, but Mosby internally is not relying on any kind of dependency injection.\nIn general I agree, that Fragments are tricky and have downsides. Also every iOS developer will laugh about you (android developer) if you tell him that your main view controller (activity) gets destroyed on screen orientation changes. Android is clearly not perfect at this point. \nHowever, I think that a we are fighting against two different things. From my point of view, you try to get rich of fragments lifecycle problems and encapsulating \"controller\" logic into iOS alike view controller. \nI have done iOS development as well and from my point of view UIViewController is meant to be used per UI widget. i.e UITableViewController controls UITableView.  Bringing that to android would mean that there should be  RecyclerViewController to control RecyclerView and not a replacement for a Fragment. However, UIViewController are used to control the whole screen / or a part from a screen, which I'm not sure if that was the original intention of Apple, i.e. UITableViewController control a whole screen with different UI widgets and not only a UITableView.\nNevertheless, this is considered as sound and valid in iOS development and I'm fine with that approach.\nSo you try to achieve something similar by replacing you iOS alike controller with fragments (which are also kind of controller) which makes sense.\nMosby, on the other hand, is not trying to replace controller with presenters. \n \nIn Mosby / MVP separation of concerns is the important bit. So there is still a controller (i.e. Fragment or Activity) that setup RecyclerView Adapter (UITableViewDataSource), reacts on click events, etc.\nHowever, Mosby consider the controller as part of the View. The Presenter is responsible to manage / control the view's state, i.e. displaying a loading spinner while loading data, then show the RecyclerView to display a list of loaded data. \nI think that ViewController works for simple apps, but doesn't scale well for bigger / more complex apps.\nI have worked on bigger iOS projects and ViewController have started to become God Object's with 1000+ lines of code (pretty the same thing we see on android, activities with 1000+ lines of code).\nThat is the separation of concerns I'm talking about and Mosby tries to implement with MVP - passiv view. \nCorrect me if I'm wrong, but that is not the same thing you try to achieve with your ViewController. You simply try to replace Fragment's with a simplified lifecycle model by introducing iOS alike ViewController, don't you?\nWith that said, I think that Mosby can be used with your ViewController implementation as well.  Your ViewController can be seen as View and can be controlled by an Presenter. I also strongly believe that in iOS development MVP or MVVM or whatever else you prefer should be used around ViewController. \n. I have to admit that at first glance Mosby looks a lot like a framework with \" it's  injection magic\" and so on. That's partially true: there are some already build in Activities/Fragments and Presenters you can extend from to avoid writing the same code for doing the same thing over and over again (like a view displaying data, showing loading spinner and an error view). Those framework alike things are in separated modules which you can use in your app if you want to by declaring the corresponding gradle dependency, but if you don't want to use that Activities/Fragments and Presenters as base class in your app, then simply don't include that dependency.\nHowever, the core of Mosby is a tiny mvp library that basically does exactly this:\n\nPresenters can be just regular classes who receive references to interfaces of Views \n\nThat's the core of Mosby. It's a separated module with it's own dependency.\ngroovy\ncompile 'com.hannesdorfmann.mosby:mvp-common:x.y.z'\nIf you want to bind Presenter to Activity , Fragment or any android.view.ViewGroup there is a delegate for that lifecycle managing thing. Basically the delegate just calls presenter.attachView() and presenter.detachView() at the corresponding lifecycle event.\ngroovy\ncompile 'com.hannesdorfmann.mosby:mvp:x.y.z'\nAt this point, for example, one could take your pleasant (not rotten) foundation like your ViewController and let the ViewController be supervised by a Mosby Presenter (even thought it's trivial to implement it by your own). The only thing he has to keep in mind is to call  presenter.attachView() and presenter.detachView(). It's just an example. I just want to point out that the main focus of Mosby is to provide a separation between View and Presenter. Mosby is not build on top of Activity or Fragment nor tries to enhance Activities or Fragments. \n\nWhat I basically saying is this: please stop inventing super-frameworks \n\nSo should I delete this repository?  :)\nSeriously, I don't understand what the purpose of this issue created by you is? \nWhat I have understood so far is you don't like fragments and try to build your own pleasant foundation / library / framework on top of a single activity. Cool, I agree with you that Android is not perfect. So go ahead, maybe you can build a better foundation. But I don't understand how that is related to Mosby? Are you trying to give me some tips how to improve Mosby?\n. > No, one couldn't, because that ViewController will have too much implementation specifics \u2014 for example, controllers nesting and containers and different lifecycle approaches.\nYes, obviously a presenter for a NavigationController doesn't make sense, so my statement was to general. I was thinking about a View that displays a loading spinner while loading data and then a RecyclerView with the loaded items once data has been loaded. In that case someone could use a Presenter to supervise the ViewController that is responsible for switching between showing loading spinner and recyclerview.\nIf you don't mind, could you please repeat what  in your opinion an Android MVP library should look like as I haven't understood what you try explain?\nMVP decouples model and view by using an presenter. From my point of view you are advocating against current android foundation / framework implementation, but I don't understand how that is related to MVP?\n. Yep, as already said, Fragment / Activities are not perfect and I'm sure some engineers on googles android team would implement some things in another way today (who wouldn't write the code one has written a year ago significant differently, if you would then you haven't learned enough about programming during the last year). \nI'm looking forward to see your solution in persisting the arguments you pass to your controller to make them survive through screen orientation changes and activity / process destroying and recreation.\n\nThat's because my library is not over-engineered. But if you declare support to both libs, you have to support maximum level of complexity among them \u2014 that is, Fragments\n\nOnce more, Mosby has ZERO dependencies to Fragment or Activity on it's core since you always talk to a View Interface (and Activity and Fragments are just implementing View interface). Mosby's core consists of plain old java classes and interface.\nHowever, that's another topic.\nI will keep an eye on your ViewController library. Keep up your good work!\n. which java version do you use? Because there was an issue with java 8 and javadoc?\nIf you are using java 8 please download 1.1.1 Version and replace the files maven-push-javalib.gradle (in root folder) with the current one from master branch: https://github.com/sockeqwe/mosby/blob/master/maven-push-java-lib.gradle\nDo the same for maven-push.gradle: https://github.com/sockeqwe/mosby/blob/master/maven-push.gradle\n. just clone latest master branch (or download the zip if you prefer that). It already contains the correct gradle files and should work with java 8\n. Ok, i have just pushed the modified gardle script (removed java doc tasks) to master branch. Can you please checkout latest master branch and retry to import it to android studio.\nAlso do Build --> Clean Project and then Build --> Rebuild (in main menu).\nIf that still doesn't work, there might be another problem. In that case please post the whole error stacktrace: run from command line ./gradlew clean build --stacktrace\n. I'm still not sure what the problem exactly is. On my machine it works with java 8 (with javadoc tasks) and also travis CI is building with java 8 successfully ...\n. Hm, as far as I know JavaVersion.VERSION_1_8 does not work on Android (since byte code has to be java 7 compatible) anyway.\nAs fas as I know only with some other gradle plugins / hacks like Retrolambda one could specify  JavaVersion.VERSION_1_8 at all.\nAs fas As I know no android Hello World project would compile with \n``` groovy\ncompileOptions {\n    sourceCompatibility JavaVersion.VERSION_1_8\n    targetCompatibility JavaVersion.VERSION_1_8\n  }\n```\nHence mosby has set this option explicity to JavaVersion.VERSION_1_7 \n. Makes sense. Thanks for your help!\n. Do you have concrete source code  or a demo project a can have a look at to reproduce this issue ?\n. thanks, I will have a look at it tomorrow\n. I'm not 100% sure, but I don't think that your problem is Mosby related (I may be wrong).\nI have added a demo to the official mosby samples to demonstrate that nested fragments are working properly.\nSomething strange happens in your app with the saved instance state bundle.\nThe savedInstanceState Bundle  of all of your fragments are always null after screen orientation changes which has two causes:\n1. Your Fragments don't have an ID or TAG\n2. You always create a new Fragment and replace the old one.\nI think 2. is the case. \nYour code is a little bit confusing at this point but I guess the problem is that you are replacing the old fragment with a new / or the same fragment retrieved from FragmentManager.findFragmentByTag() previously. \nHave a look at MainActivity.onNavigationDrawerItemSelected():\njava\nFragmentTransaction ft = getSupportFragmentManager().beginTransaction();\nft.replace(R.id.container, fragment, tag);\nft.addToBackStack(null);\nft.commitAllowingStateLoss();\nDoesn't it replace the MonthlyReportFragment?\n. Min SDK is 14 anyway, so it should be removed\n. I see, thanks for reporting.\nThanks for the workaround. This should work. I will think about another solution this weekend, but by now I don't can think of any better solution than that.\n. Fixed in version 1.3. I access the generic type of  Presenter to retrieve the view class\n. Has been fixed in support library 23.0.1\n. You are talking about using android.app.Fragment (not from support library), don't you?\nIf so, yes it's possible to bring Mosby's internal functionality to every kind of Fragment by using delegation, see mosby's github page:\n- http://hannesdorfmann.com/mosby/mvp/ (somewhere in the middle, \"Delegation\" is the headline)\n- http://hannesdorfmann.com/mosby/viewstate/  (scroll down to the end)\n- The statistics Dialog from the mail sample shows how to do that: https://github.com/sockeqwe/mosby/blob/master/sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/statistics/StatisticsDialog.java\nBut that only brings MVP and ViewState management to your custom Fragment. You still have to kick in Butterknife, FragmentArgs etc. as needed manually\n. yes, that means that you have to copy & paste it, but it should be very easy. Basically all you have to change are the imports from support.v4.Fragment to  android.app.Fragment \n\nuse android.app.Fragment as a base class in their application with Mosby MVP in 2017\n\nIt is very very unlikely that you will ever use android.app.Fragment in your app (or at least you shouldn't), even if you target only the latest Android sdk release, let's say minSDK = 26. Support library Fragments have a lot, I repeat it A LOT, more bugfixes and work much more stable and reliable then the platform specific android.app.Fragment. Support Fragments get regularly updates and bugfixes which obviously can't be done for android.app.Fragment. Also, SupportFragments include additional advantages and backwards compatibilities like MediaRouter Support etc.\nI definitely can't see that an App should be build without the support library, same for support Fragments. Support library will never disappear imho, so do support Fragments.. Just for clarification, you only have to copy and paste the\nMvpViewStateFragment class and the corresponding Delegate, not the rest of\nthe Mosby\nAndrejs Mivre\u0146iks notifications@github.com schrieb am Mo., 27. M\u00e4rz 2017,\n18:35:\n\n@sockeqwe https://github.com/sockeqwe Thank you for the info, I'll keep\nthat in mind :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/79#issuecomment-289509527, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrqtmQz_kzCbShSgjVPW6dgNj9Wrgks5rp-VUgaJpZM4F2UoE\n.\n. No, there will be no \"native\" support for that, sorry. You have to go with delegation.\n\nThe reason is the same as discussed in  #63 . So all third party libraries will be removed in Mosby 2.0 which btw. will be released this or next week.\n. Thanks!\n. No, that makes refactoring to painful because if I refactor i.e. rename something in Mosby's internal library I might have to rename it in the mail sample project manually.\nImporting in Android Studio is easy: Simply import the root gradle.build file, then yes you have the other modules visible in Android Studio, but simply start (green play button) sample mail.\n. The only thing you have to do in your project is to replace compile project (':viewstate) with compile com.hannesdorfmann.mosby:viewstate:2.0.0 in the dependencies section. This is not mosby related, its gradle androids build system that allows you to integrate libraries in your project. \n. I guess removong a previous version of the build tool is googles way to force people to update to latest version :) thanks!\n. Thanks\n. No there is no example in the repo as it's not part of the library. Mosby doesn't provide something like a PresentationModelTransformation class you can use. \nI just wanted to point out that the presenter (as the name already suggests) is not only responsible to coordinate the view (showLoading(), showError(), showContent(),  etc.) but is responsible to transform a model to that kind of data structure that the view can present/display afterwards.\nI can give you an example. Are you familiar with RxJava? (would make the example a little bit easier to write)\n. Example (pseudo code, the code may not compile):\nLets assume we are building an app for a restaurant to allow users of the app order a meal online. The app has a DishesView to display a List<Dish>. A Dish is basically just a superclass. There are VegetarianDish extends Dish and FishDish extends Dish and MeatDish extends Dish. Lets that the restaurant is providing a bill of fare over a restful http backend with a json like that:\n``` json\n{\n  \"vegetarian\": [\n    { \"id\": 1,  \"name\": \"Black Bean Enchilada\", \"price\":12.5},\n    ...\n  ],\n\"fish\": [\n    { \"id\": 20,  \"name\": \"Salmon\", \"price\":20.5},\n    ...\n  ],\n\"meat\": [\n    { \"id\": 40,  \"name\": \"Argentina Steak\", \"price\":19.7},\n    ...\n  ]\n}\n```\nSo the json is divided into categories, however we want to display a complete List<Dish> in our app.\nFurthermore, the user has the possibility to mark a certain dish as one of his favorites which is stores into a local database (on the users device). So basically the app loads the bill of faire from backend, combines its data with a local database (just stores the id of favorite dishes so that we can set a boolean flag \"favorite\" to true of false on the Dish class) and then display it as single list.\nA naive approach would be like that:\n``` java\nclass DishesPresenter extends MvpBasePresenter {\nprivate RxHttpBackend backend;\n  private RxDatabase database;\npublic void getDishes(){\n    getView().showLoading();\n// loadData from backend and local database\nObservable.comineLatest(\n   backend.getBillOfFaire(),  // returns Observable<BillOfFaire>\n   database.getFavoriteDishes(), // returns Observable<List<String>> containing a list with all ids of dishes the user has marked as favorite\n  new Func2<BillOfFaire, List<String>, List<Dish>>() { // method to combine both\n       public List<Dish> call(BillOfFaire bof, List<String> favorites){\n           List<Dish> dishes = new ArrayList<>();\n           dishes.addAll(bof.getVegetarianDishes());\n           dishes.addAll(bof.getFishDishes());\n           dishes.addAll(bof.getMeatDishes());\n\n          for (Dish d : dishes) \n              if (favorites.contains( d.getId() ))\n                d.setFavorite(true);\n\n          return dishes;\n       }\n  })\n.map(new Func1<List<Dish>, List<Dish>>(){ // Sort alphabetically\n       public List<Dish> call(List<Dish> dishes){\n           Collections.sort(dishes);\n           return dishes; \n       }\n})\n\n.subscribe(new Subscriber< List >() {\n       public void onNext(List dishes){\n           if (isViewAttached())\n             getView().setData(dishes);\n       }\n   public void onCompleted(){\n       if (isViewAttached())\n         getView().showContent();\n    }\n\n   public void onError(Throwable t){\n       if (isViewAttached())\n         getView().showError(t);\n    }\n});\n\n}\n}\n```\nThe code sample above is very naive and you should not do it like that. why? First it mixes all your \"Model layer\"  responsibilities into the Presenter. Why is it bad? Because you cant test your model layer anymore since there is no separated model layer (everything is \"hardcoded\" in the presenter). So lets refactor the code shown above and introduce a new class DishesRepo which is basically responsible to load the bill of faire from backend and query the local database with favorit dishes to mark dishes as favorite or not. So basically move the combineLatest() code into DishesRepo:\n``` java\nclass DishesRepo {\n  private RxHttpBackend backend;\n  private RxDatabase database;\npublic Observable> getAllDishes(){\n    return Observable.comineLatest(\n       backend.getBillOfFaire(),  // returns Observable\n       database.getFavoriteDishes(), // returns Observable> containing a list with all ids of dishes the user has marked as favorite\n      new Func2, List>() { // method to combine both\n           public List call(BillOfFaire bof, List favorites){\n               List dishes = new ArrayList<>();\n               dishes.addAll(bof.getVegetarianDishes());\n               dishes.addAll(bof.getFishDishes());\n               dishes.addAll(bof.getMeatDishes());\n          for (Dish d : dishes) \n              if (favorites.contains( d.getId() ))\n                d.setFavorite(true);\n\n          return dishes;\n       }\n  });\n\n}\n}\n```\nNow DishesRepo is the \"model\" of MVP and can be tested (unit test). The Presenter now looks more clear:\n``` java\nclass DishesPresenter extends MvpBasePresenter {\nprivate DishesRepo dishesRepo;\npublic void getDishes(){\n    getView().showLoading();\n// loadData from backend and local database\ndishesRepo.getAllDishes()\n.map(new Func1<List<Dish>, List<Dish>>(){ // Sort alphabetically\n       public List<Dish> call(List<Dish> dishes){\n           Collections.sort(dishes);\n           return dishes; \n       }\n})\n\n.subscribe(new Subscriber< List >() {\n       public void onNext(List dishes){\n           if (isViewAttached())\n             getView().setData(dishes);\n       }\n   public void onCompleted(){\n       if (isViewAttached())\n         getView().showContent();\n    }\n\n   public void onError(Throwable t){\n       if (isViewAttached())\n         getView().showError(t);\n    }\n});\n\n}\n}\n```\nSo in this very simple use case we just sort the list of all dishes alphabetically because we know the DishesView wants to display it in alphabetical order. So sorting is the job of the presenter (it's not part of the model because there might be other Views / Presenter that want to display the \"raw\" (unsorted) data).\nBut what about the PresentationModel we talked about earlier. The discussed scenario is so simple (sort a list alphabetically) that there is no need for an additional PresentationModel class.\nLets make the things a little bit more complex. Lets say that the dishes backend also provides a boolean flag lunchOffer. If a dish is marked as favorite by the user and marked as lunchOffer by backend and its lunch time (midday) then the view should display this dish as a special one (i.e. increase text size, display a image of the dish and a offer ribbon instead of just the name of the dish).\nTo make it for our View easier to distinguish between normal dishes and special offer we decide to introduce a DishesPresentationModel. Now its the job of the Presenter to determine whether or not a dish is a lunch offer or not:\n``` java\nclass DishesPresenter extends MvpBasePresenter {\nprivate DishesRepo dishesRepo;\npublic void getDishes(){\n    getView().showLoading();\n// loadData from backend and local database\ndishesRepo.getAllDishes()\n.map(new Func1<List<DishPresentationModel>, List<Dish>>(){ // Sort alphabetically\n       public List<Dish> call(List<Dish> dishes){\n           Collections.sort(dishes);\n           List<DishPresentationModel> pmDishes = new ArrayList<>();\n           for (Dish d : dishes){\n              DishPresentationModel pm = new DishPresentationModel(d);\n              if ( d.isFavorite() && d.isLunchOffer() && isLunchTimeRightNow() )\n                 pm.setShowAsOffer(true);\n\n              pmDishes.add(pm);\n           }\n           return pmDishes; \n       }\n})\n\n.subscribe(new Subscriber< List >() {\n       public void onNext(List dishes){\n           if (isViewAttached())\n             getView().setData(dishes);\n       }\n   public void onCompleted(){\n       if (isViewAttached())\n         getView().showContent();\n    }\n\n   public void onError(Throwable t){\n       if (isViewAttached())\n         getView().showError(t);\n    }\n});\n\n}\n}\n```\nSo now the presenter is \"transforming\" a List<Dish> into List<DishPresentationModel> which is specialized and optimized for DishesView to be displayed (i.e. the  Adapter of the RecyclerView doesn't have to compute if its a lunch offer or not during scrolling).\nI know it's just a very basic example and may not require a PresentationModel at all but I haven't found a better one for now :smile: \nThen I have also mentioned that we could have two different Presenter for phone and tablet or use one single presenter and use different PresentationModelTransformer for phone or tablet.  Lets discuss how the later one could be achieved. With RxJava its easy since we only have to pass a Func1<List<DishPresentationModel> , List<Dish> as constructor parameter like this:\n``` java\nclass DishesPresenter extends MvpBasePresenter {\nprivate DishesRepo dishesRepo;\n  private Func1 , List presentationModelTransformation;\npublic DishesPresenter( Func1 , List> transformer){\n    this.presentationModelTransformation = transformer;\n  }\npublic void getDishes(){\n    getView().showLoading();\n// loadData from backend and local database\ndishesRepo.getAllDishes()\n.map(presentationModelTransformation) // PresentationModel \n.subscribe(new Subscriber< List<DishPresentationModel> >() {\n   public void onNext(List<DishPresentationModel> dishes){\n       if (isViewAttached())\n         getView().setData(dishes);\n   }\n\n   public void onCompleted(){\n       if (isViewAttached())\n         getView().showContent();\n    }\n\n   public void onError(Throwable t){\n       if (isViewAttached())\n         getView().showError(t);\n    }\n});\n\n}\n}\n```\nAnd then your View could do something like that:\n``` java\npublic class DishesActivity extends MvpActivity implements DishesView {\n@Override\n public DishesPresenter createPresenter(){\n      if (isTablet()){\n          Func1<List<DishPresentationModel> , List<Dish>> tabletTransformer = ... ;\n          return new DishesPresenter(tabletTransformer);\n       } else {\n        // its a phone\n        Func1<List<DishPresentationModel> , List<Dish>> phoneTransformer = ... ;\n          return new DishesPresenter(phoneTransformer);\n      }\n }\n\n...\n}\n```\nThe \"disadvantage\" of this approach (passing different \"transformer\") is that the view (since we write the transformer code as part of the Activity) now also have some kind of knowledge of the model (knows about Dish even if the view only displays DishPresentationModel). The View should be as dump as possible and only worry about UI related things and not how to compose the data (that might be a strict point of view and could be relaxed depending on the concrete scenario). Hence I would recommend to think about another approach (having two different presenter classes for  phone and tablet) like this:\njava\ninterface DishesPresenter {\n    void getDishes();\n}\n``` java\nclass PhoneDishesPresenter extends MvpBasePresenter implements DishesPresenter {\nprivate DishesRepo dishesRepo;\n@Override\n  public void getDishes(){\n    getView().showLoading();\n// loadData from backend and local database\ndishesRepo.getAllDishes()\n.map( ... ) // PresentationModel  transformation for phone\n.subscribe(new Subscriber< List<DishPresentationModel> >() {\n   public void onNext(List<DishPresentationModel> dishes){\n       if (isViewAttached())\n         getView().setData(dishes);\n   }\n\n   public void onCompleted(){\n       if (isViewAttached())\n         getView().showContent();\n    }\n\n   public void onError(Throwable t){\n       if (isViewAttached())\n         getView().showError(t);\n    }\n});\n\n}\n}\n```\n``` java\nclass TabletDishesPresenter extends MvpBasePresenter implements DishesPresenter {\nprivate DishesRepo dishesRepo;\n@Override\n  public void getDishes(){\n    getView().showLoading();\n// loadData from backend and local database\ndishesRepo.getAllDishes()\n.map( ... ) // PresentationModel  transformation for tablet\n.subscribe(new Subscriber< List<DishPresentationModel> >() {\n   public void onNext(List<DishPresentationModel> dishes){\n       if (isViewAttached())\n         getView().setData(dishes);\n   }\n\n   public void onCompleted(){\n       if (isViewAttached())\n         getView().showContent();\n    }\n\n   public void onError(Throwable t){\n       if (isViewAttached())\n         getView().showError(t);\n    }\n});\n\n}\n}\n```\n``` java\npublic class DishesActivity extends MvpActivity implements DishesView {\n@Override\n public DishesPresenter createPresenter(){\n      if (isTablet())\n          return new TabletDishesPresenter();\n       else \n          return new PhoneDishesPresenter();       \n }\n\n...\n}\n```\nThe disadvantage here is that you have some duplicated code that you might have to maintain, i.e. if you do a refactoring (more complicated than just renaming a method) then you have to refactor TabletDishesPresenter and PhoneDishesPresenter. Same for bug fixes. However, that might could be reduced with another level of abstraction and inheritence (i.e. TabletDishesPresenter and PhoneDishesPresenter have a common superclass and only have to override a single method where the presentation model transformation happens).\nTo conclude: I think its just a personal preference which one you prefer over the other. I, personally, like more the approach of having tow different presenter classes TabletDishesPresenter and PhoneDishesPresenter simply because I would expect to search and find all \"presentation model code\" in the corresponding Presenter class. As already said, both approaches are fine, use whatever you feel more comfortable with and don't over-engineer to much :smiley: \n. Thanks!\n. Thanks\n. I agree.\nYep, LceViewState<M, V> is correct.\nThanks\n. >  but wasn't sure how to complete your thought there.\nMe neither :) I will just delete this paragraph\n. I think it's a problem with my custom ActivityTransitionAnimation. I don't have much time right now to check that, but I'm pretty sure that this is the problem since I hold a hard reference to a View that will be animated (shared element). Hence the view's parent activity can not be garbage collected --> memory leak\nCan you reproduce this issue on a pre Android 5.0 device?\n. Thanks!\n'LEAK CAN BE IGNORED' is a leak caused internaly by android itself\n. If I remember correctly, the leak is caused by an custom ActivityTransition. So the leak is not caused by Mosby, but the demo's custom activity transition should be fixed  ... so little time so much to do ... \n. Thanks for the clarification. In that case this can be closed.\n. Thanks, i will check it out next week, but I'm not an dagger 2 expert :smile: \n. Hi,\nhave you already seen the github page ? Or in other words do you think that github page is to long to read? There is a javadoc link where you should see all classes, like viewstates, fragments etc. Also there is a little decision hepler chart that shows which Activity, Fragments are available and when to use them.\n. See FAQ on github page. Is that what you are looking for?\nlegarspol notifications@github.com schrieb am Fr., 9. Okt. 2015 18:32:\n\nHo ! Where is the decision chart ? This is what I need.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/92#issuecomment-146922922.\n. Has your code worked before? Have you migrated recently from Mosby 1.x to Mosby 2.0?  Have you tried to clean and rebuild your project?\n\nUsually this kind of issues occur if you have compilation errors in some other source files that leads to the problem that Android Studio  can't resolve some dependencies correctly. What happens if you simply press the \"green play button\" to compile and start your App? You will see some errors in android studio I guess. Are there any other compile error issues (not import / class name not found issues)?\n. Has your code worked with Mosby 1.x before and are you facing this problem since updating to Mosby 2.0.0 ?  Have you tried to press the \"green play button\" in android studio?\nCan I checkout your source code? Is it available on github or somewhere else?\n. You are welcome! Sometimes deleting the build folder also solves that kind of problems\n. I see ... I have to think about it and test some things. I will come back to you soon.\nBefore android gradle plugin 1.2 I used plain java modules as well but Mosby hasn't used android support-annotations at this time. Since 1.2 I use android library project modules instead of plain java modules. The only reason I have used java modules before was to be able to write plain old java unit tests (not instrumentation tests). Since android gradle plugin supports plain old unit tests nowadays I don't see the need of plain old java projects anymore (well, probably the compile time is faster in a plain old java module).\nSimply removing annotations might be a solution, however I dislike that approach. Furthermore kotlin uses this annotations for null safety / null checks when interop to java \n. I will close this for now. However, if more people are facing the same issue I'm willing to reopen it.\n. Thanks!\n. I think that is a SwipeRefreshLayout issue (support library). Please report this issue in support library issue tracker.\n. Hi, I do understand your concerns. I, personally, don't have an additional View class. Actually, I do treat the Activities as views (in a very high level point of view on MVP, see http://hannesdorfmann.com/mosby/images/mvp-controller.png , I treat Activity as view by let it implement the View interface). \nSo yes, the current implementation encourages you to use Activity as view. Nevertheless you can still provide your own view class implementing MvpView and pass that one to the presenter. You can do this by overriding getMvpView() in MvpActivity \nBut yes, this is not obvious and you are right it still encourage you to see Activity as View which from my point of view is a personal preference if you want an additional view object or not.\nHowever, you can already implement something as described by (mirroring createPresenter(), don't make the Activity implement MvpView directly ) by using ActivityMvpDelegate. See this (scroll down until \"Delegation headline\". You can take a plain Activity and use the ActivityMvpDelegate provided by Mosby to implement an Activity that is just a lifecycle container component. \nShould we make this the default behaviour of Mosby? I'm not sure about it. On one hand, it sounds like a good and clean implementation to use the activity only as a lifecycle component. On the other hand it may requires writing more code and addition layers. Furthermore, your suggestion may or may require additional components for navigation (who starts intents, backstack management?, etc.) or forward / delegate lifecycle events to the real view (i.e. if view should stop a certain animation in onPause()). Also for non android experts it would be a little bit harder to get started with Mosby.\nAs already said, in genreal I see the benefit of the architecture described by you. However I doubt that this is the use case of 90 % of the users of this library. Also I don't want to make Mosby that \"complicated\". I think the current way, just having a simple tiny, lightweight library is easy to maintain and allows others (like you) to build custom features on top of Mosby.\nHowever, this doesn't mean that I'm saying NO to your suggestion. I want to involve other developers / community into this decision. I personally wouldn't need that extra abstraction/layer in my apps. However, if I am one developer of a bigger minority who don't need that extra abstraction, I think we should follow the majority and implement your suggestions. \nWhat do you think?\n. I close it, but as already said, I'm open to continue this discussion as required by other developers \n. agree\n. Thanks!\n. You have to call injectDependencies() before super.onCreate()  because the super.onCreate() will call createPresenter() internally.\nAlso, there is already a field called presenter if you extend from a Mosby base class like MvpLceActivity. So in your MyActivity class you have two variables pointing at the same presenter instance myPresenter  and \u00b4presenter. The later one comes as protected field fromMvpLceActivity`. \nI would recommend you to take a slightly different approach regarding dependency injection with dagger2. I would recommend to change your code to something like this:\n``` java\npublic class MyActivity extends MvpLceActivity... {\n  private MyComponent component;\n  ...\nprivate void injectDependencies(){\n     myComponent = DaggerMyComponent.create();  \n    ....\n  }\n@Override\n  public void onCreate(Bundle savedInstanceState) {\n        injectDependencies();\n        super.onCreate(savedInstanceState);\n        ....\n  }\n@NonNull @Override\n  public MyPresenter createPresenter() {\n        return component.getPresenter();\n  }\n  ...\n}\n```\n. Thanks!\n. You are right, the documentation is not up-to-date on this.\nMvpDelegateCallback has been renamed to BaseMvpDelegateCallback in Mosby 2.0\nI will update the docs.\nthanks for reporting!\nVladimir Baryshnikov notifications@github.com schrieb am Do., 19. Nov.\n2015 22:56:\n\nVersion: Mosby v2.0.0:\nAccording to documentation here:\nhttp://hannesdorfmann.com/mosby/mvp/\nThere should be MvpDelegateCallback:\nMvpDelegateCallback: Is an interface every MvpView in Mosby has to\nimplement. Basically it just provides some MVP related methods like\nInstead all delegate classes uses BaseMvpDelegateCallback\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/101.\n. Because in Version 2 I had to introduce ActivityMvpDegateCallback extends\nBaseDelegateCallback and ViewGroupMvpCallback extends  BaseMvpDelegateCallback\nwith some more specific methods for activity / viewgroup. I have\nnoticed that only Fragments use BaseMvpDelegateCallback directly, for\nconsistency I should introduce a FragmentMvpDelegateCallback extends\nBaseMvpDelegateCallback as well I guess\n\nSee documentation for all subclasses\nhttp://hannesdorfmann.com/mosby/static/javadoc/com/hannesdorfmann/mosby/mvp/delegate/BaseMvpDelegateCallback.html\nAs already said this part of the documentation needs an update\n. You are right, without Base it is definetly nicer. To be honest I can't remember what exactly the reason was to introduce Base as prefix. I will check the class hierarchy and check for the related git commit messages. I guess I had a good reason for introducing Base, but can't remember why :smile:  or have changed opinion after having renamed it to Base but forgot to remove the Base prefix.\nI will investigate on that.\nRegarding onViewCreated(): Yes, please open another issue for that. Makes it easier for others to follow the discussion and avoids confusing sub-threads\n. Renamed in 3.0. @Tiny-Times It is just an implementation detail that should prevent memory leaks in case someone overrides mosby's default behaviour (or delegate) and forget to call detachView().\nSo as you already have said correctly, if you use MvpBasePresenter with other Mosby default components than detachView() and attachView() should be called correctly and there would be no need to use a WeakReference. I only use WeakReference to prevent memory leaks on customization / misusing Mosby.\nAs already said, it's just an implementation detail of MvpBasePresenter. Feel free to write your own BasePresenter class without WeakReference.\n. Hm, \nnot tested yet with FragmentStatePagerAdapter but it should work.\nDo you have a project here on github so that I don't have to write a demo to debug from scratch?\n. Hi again, I have added another example for ViewPager (in sample) with and without FragmentStatePagerAdapter ():\nEverything works as expected ... \nhttps://github.com/sockeqwe/mosby/blob/master/sample/src/main/java/com/hannesdorfmann/mosby/sample/mvp/lce/viewpager/ViewPagerActivity.java\nSo I'm closing this issue... I will try to help you on stackoverflow ...\n. A Runtime exception will be thrown in next Version 2.0.1 (commimg very\nsoon) tellimg you that Mosby doesn't support UI less fragments...\nInTwoMinds notifications@github.com schrieb am Sa., 20. Feb. 2016, 02:45:\n\nDirty workaround if anyone stumbles here:\n@Override\npublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    super.onCreateView(inflater, container, savedInstanceState);\n    onViewCreated(null, savedInstanceState);\n    return null;\n}\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/104#issuecomment-186481246.\n. Hi, I will take time tomorrow to write down my thoughts on this ...\n. Sorry for my delayed answer.\nOk I think there are 2 ways to deal with that: \n- Simply call corresponding presenter method in onNext() like this:\n\njava\nRxSearchView.queryTextChanges(searchView).\n                                filter(charSequence ->\n                                        !TextUtils.isEmpty(charSequence))\n                                .throttleLast(100, TimeUnit.DAYS.MILLISECONDS)\n                                .debounce(200, TimeUnit.MILLISECONDS)\n                                .onBackpressureLatest()\n                                .subscribe( searchTerm -> presenter.search(searchTerm) );\nand then the presenter creates his own Observable to exectute the search:\n``` java\nclass SearchPresenter extends MvpBasePresenter { \npublic void search(String searchTerm) {\n     MarsCoordinator.getClientCoordinator().getRxV1Service().\n                        getSearchResourceItemsFromCatalog(false, 0, 50, IRxV1Service.GetSearchResourceItemsFromCatalogRight.RADIO, null, searchTerm.toString().trim(), null) // Assuming this returns an Observable\n     .observeOn( ... )\n     .subscribeOn( ... )\n     .subscribe(\n         searchResults ->  getView().showResult(searchResult) , \n         throwable -> getView().showError(throwable)\n      );\n}\n\n}\n```\nThe problem with this approach is that we are kind of breaking the reactive observable chain since we split it in two observables (on in the View  RxSearchView.queryTextChanges and one in presenter presenter.search() ). I will discuss the advantages  / disadvantages in a minute.\n- Working with one single Observable chain by returning an observable like from the view like this:\n``` java\ninterface SearchView extends MvpView {\n     Observable getSearchInputObservable();\n void showResult(SearchResult result);\n void showError(Throwable error);\n\n}\n```\njava\nclass SearchViewActivity extends MvpActivtiy implements SearchView {\n    ...\n    @Override\n    public Observable<String> getSearchInputObservable() {\n        return RxSearchView.queryTextChanges(searchView).\n                                filter(charSequence ->\n                                        !TextUtils.isEmpty(charSequence))\n                                .throttleLast(100, TimeUnit.DAYS.MILLISECONDS)\n                                .debounce(200, TimeUnit.MILLISECONDS)\n                                .onBackpressureLatest();\n     }\n}\njava\nclass SearchPresenter extends MvpBasePresenter<SearchView> {\n   @Override\n   public void attachView(SearchView view){\n       super.attachView(view);\n       view.getSearchInputObservable()\n              .flatMap(searchTerm -> MarsCoordinator.getClientCoordinator().getRxV1Service().\n                            getSearchResourceItemsFromCatalog( ... , searchTerm) ) // returns an Observable <SearchResult> \n              .subscribeOn(...)\n              .observeOn(...)\n              .subscribe(\n                searchResults ->  getView().showResult(searchResult) , \n                throwable -> getView().showError(throwable)\n               );\n   }\n}\nSo with the second approach we have a single Observable chain. When the view gets attached to the presenter we take the observable from the view ( view.getSearchInputObservable()) and use flatMap to \"transform\" the view's Observable<String> (which provides the searchTerm) to Observable<SearchResult> from ( getSearchResourceItemsFromCatalog() ).\nSo this seems to be a nice solution since the view emits the searchTerm (and any update of the searchTerm) to the presenter which then executes the search result. We have one single observable chain. View and Presenter are still separated (presenter doesn't know how the searchTerm is created, view is still independent i.e. you can change a TextView to another UI widget without having to change the presenters code as long as the other UI Widget provides Observable<String>). So this might be the solution you are looking for, right?\nSo lets discuss both solutions: The main difference between both solutions is that the first breaks the single observable chain into two distinct Observables and Subscriptions whereas the second solution is one single observable flow. \nBUT\nwith the second the single observable chain is tight to the View's lifecycle. This means when the view get's destroyed the whole observable gets unsubscribed. This isn't a bad thing per se, but with Mosby the Presenter can survive screen orientation changes and the single Observable chain discussed in the second aproach will break that. Mosby's design philosophy is to attach and detach the view from Presenter during screen orientation changes:\n1. User launches app --> PortraitView gets instantiated --> PortraitPresenter gets created\n2. User rotates device from portrait to landscape  --> PortraitPresenter stays alive (any ascny running task don't have to be canceled) ; PortraitView gets detached from PortraitPresenter.\n3. LandscapeView gets instantiated --> LandscapeView get attached to PortraitPresenter (still same presenter instance as in portrait)\nBut with the single observable chain of the second aproach things are going like this:\n1. User launches app --> PortraitView gets instantiated --> PortraitPresenter gets created \n2. User rotates device from portrait to landscape  --> PortraitPresenter could stay alive BUT all async running observable tasks are canceled (unsubscribed). Otherwise we have a memory leak. \n3. LandscapeView gets instantiated --> LandscapeView gets attached to PortraitPresenter BUT since all async running observable tasks has been canceled during screen orientation changes, new observable async running  tasks have to be established. That means that the search query started in portrait has to be restarted in landscape.\nSo is this a big disadvantage? It depends. Maybe, maybe not. If you are fine with the fact that: \n-  the View will be started completely new on each screen orientation change (as have been launched for the first time)  or if you want to have do all the boilerplate code to save the state manually in bundle and restore the state afterwards from bundle\n- presenter is created newly on each screen orientation change and re-execute the search query again\n(in other words don't use Mosby's ViewState feature that allows the views state and presenter to be retained during screen orientation changes and all async task are still ongoing) then I would say the second approach is a good solution.\nOtherwise, I would go with the first approach.\nI, personally, do most of the time the first approach. For me it's more important to don't have to deal with screen orientation changes manually. I also see the view just as Input / Output device which for me means I want to have one single observable chain from presenter downwards to business logic (http, database etc.) and the way back to presenter. So for me it's not a big deal to use rxjava in View for handling UI Events like RxSearchView.queryTextChanges()  and Presenter on two  separated Observables. \nHowever, from an Rx workflow point of view the second approach is definetly nicer and cleaner.\nWe could also try to combine the best of both approaches first (SearchObservable is not bound to views lifecycle) and the second (on single Observable flow) by using RxJava's Subject (like BehaviorSubject) in presenter as kind of proxy. But this is an advanced Rx topic. \nNevertheless, keep in mind that the important bit of MVP is to have a clean separation of concerns.\nHope that helps\n. Yes, Mosby LCE (Loading-Content-Error) Activity / Fragment uses this \"hardcoded\" id's:\nFortunately, there is a simple workaround (undocumented, since it's not Mosby related, it's an android feature).\nYou can make \"pointers\" to other ids in xml. Just add an android resource file (name of the file doesn't matter) in your apps res/values/ folder with the following content:\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n Forwards R.id.loading_view to Mosby's R.id.loadingView \n@id/loadingView \n Do the same for R.id.contentView and R.id.errorView \n\n```\nYes you have to include such a resource file in all your projects if you want to continue with your convention and Mosby.\nAlternatively you could make your own library with only the dependency to Mosby and then add this resource file as described above. Then build your library project as android library (.aar) and deploy it on a (private?) maven repository and include your own library in all your projects. By doing so you have integrated Mosby and the resource file with id \"overriding\" / \"forwarding\" with just one single dependency and you don't have to include the resource file from above in every single project.\nHope that helps\n. Agree\nlegarspol notifications@github.com schrieb am Di., 12. Jan. 2016, 17:32:\n\nHi !\nIt might be useful to make LceAnimator.showErrorView(View, View, TextView)\nbecome LceAnimator.showErrorView(View, View, View)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/107.\n. Done, will be released in February \n. That's a very vague question. That depends on your use and how you load data ...\nEITHER \nyou see each RecyclerView as its own independent MvpView  (use LCEView only if all three states (showLoading(), showError(), showContent() are reachable and in each independent MvpView on screen) with its own MvpPresenter that loads items to display just for this single RecyclerView\n\nOR\nUse one single View for the whole screen that loads the data for all 4 RecyclerViews and gives the result back to the View in a optimized PresentationModel (generated by the Presenter) like this:\njava\ninterface MyView extends MvpLceView<MyPresentationModel>\njava\nclass MyPresentationModel {\n   List<Item> row1; // displayed afterwards by first RecyclerView\n   List<Item> row2 // displayed by second RecyclcerView\n   List<Item> row3 // displayed by third RecyclcerView\n   List<Item> row4 // displayed by fourth RecyclcerView\n}\n``` java\nclass MyPresenter extends MvpLcePresenter {\npublic void loadData(boolean pullToRefresh) {\n    retrofit.loadSomething() // RxJava observable\n       .map( singleData) -> transformToPresentationModel(singleData) )\n       .subscribe (  ... ); // showLoading() , showError(), showContent()\n}\n\nprivate MyPresentationModel transformToPresentationModel(List<Item> singleData){\n     MypPresentationModel presentationModel = new MyPresentationModel();\n     for (Item i : singleData){\n         // fill presentationModel\n     }\n     return presentationModel;\n}\n\n} \n``\n. btw @jjvargas  I would appreciate if you would ask those kind of questions on stackoverflow, because it's not Mosby related, it's more general MVP question. I also have an eye on questions tagged with [mosby](http://stackoverflow.com/questions/tagged/mosby). Furthermore, stackoverflow is well indexed by google, so it's easier for others to find your question / answer on stackoverflow and you might also get  better answers and other suggestions / opinions ... Thanks\n. Hm, does that problem really happen in a real life app (I havent tested it yet)? I don't have tested yet, butfindViewById()` will always been called on the relative \"root\" layout.\nIf you have a structure like this:\n- MvpLceViewStateActivity (then it uses activity root layout and will find activity R.id.contentView )\n  - MvpLceViewStateFragment (then it uses fragment root layout and fill find fragments R.id.contentView\n    - MvpLceViewStateFragment (then it uses child fragment root layout and fill find fragments child R.id.contenView)\nAnd the same should be true for the ViewState that is bundled into the Bundle. But every Fragment and Activity has it's own bundle, so there should be no conflict ...\nI already have used MvpLceViewStateActivity  containing a MvpLceViewStateFragment without any conflicts.\nSo are you really facing a conflict in such a scenario?\n. I will investigate on that in detail and come back to you (by the end of this week).\n. Hi,  sorry for the late response.\nI have implemented a little example that shows that nested LCE views are not causing conflicts\nhttps://github.com/sockeqwe/NestedLceViews\nBasically I have the following hierarchy\n- MvpLceViewStateActivity with LinearLayout as contentView\n  - MvpLceViewStateFragment with ViewPager as contentView\n    - MvpLceViewStateActivity (fragment in ViewPager) with ListView as contentView\nAll of them have loadingView, errorView and contentView (the same ids).\nCan you explain how you are getting a conflict?\n. @legarspol Can this issue be closed?\n. Great, thanks! I will leave this issue open until then\n. Hi, thanks for the sample project.\nUnfortunately, I'm busy this week. I will have a look at your sample project at weekend.\nAt first glance without having dove deep into your code) it seems that the problem is not \"mosby\" related, but you are trying grab View's from Fragments from your Activity, don't you? And then you will do that by root activities.findViewById() which obviously would always return the first element with the given id.\n. Hi,\nas already said, I haven't looked yet deep into your sample (once again, thanks for that).\nI am willing to allow people to bring their own id's in as starting in Mosby 3.0 .\nHowever, I do have to verify that there are no clashes at all which I will do this on the upcoming weekend (otherwise giving other id's is just a workaround for a much bigger problem). \n. View id's are configureable in upcoming  3.0. Actually this test class is part of this repo, so your question belongs here:\nhttps://github.com/sockeqwe/mosby/blob/master/testing/src/main/java/com/hannesdorfmann/mosby/testing/presenter/MvpLcePresenterTest.java\nMaybe this is duplicated #68 (scroll down, someone else joined the conversation with similar question, but the original question was an entirely different one). Maybe, you will find the answer right there. Otherwise, I will try to help you.\n. Hi, I have answered you on Stackoverflow.\nRegarding testing View: MvpLceFragmentTest have been removed from this repo. But the only thing they have tested is that a view with id R.id.loadingView has been displayed by doing something like assertEquals(View.VISIBLE, loadingView.getVisibility(), same for errorView and contentView. But  those kind of things are already tested internally by mosby if you use MvpLceFragment or MvpLceActivity as long as you don't manipulate contentView, errorView, loadingView somewhere by your own.\n. Thanks for reporting, i will have a look at it next week\n. Fixed. #221 . How does your build.gradle looks like?\n. Which example are you trying to start?\nSo when you do a gradle sync (or just press the green play button to launch the app) you will see an error log in android studio. Can you please post the full log / stacktrace here\nMaybe a project -> clean helps ... \n. Try Build --> Clean Project and then press the green button to start one of the provided examples. Then you should see the error log in android studio. Please post the entire error log\n. I have no clue :smile: \nGlad that it works\n. Maybe, although I think this is to use case specific. LCE is not only used with RecyclerView / ListView where such \"empty view\" makes sense. \nI have to think about it ... It would be nice to hear other users opinion about this.\n. What I really dislike is to have a feature like this build in which cause other users to add code / or views in xml to work properly but its not used by the majority. So I would say that it is something that should be implemented by each user as needed.\nBut I'm open to hear other opinions ... \n. for instance I do have a LCE where a ViewPager is the contentView and I load \"tabs\" from backend. If there is a empty list of tabs I would forward this to view.showError() (errorView) , because in that case it is an error of the backend because I can expect that there is always at least two  tabs to display. So here it makes no sense too have an additional \"empty View \" in that layout, since it's never used.\n. Is too use case specific, therefore will close this for now ...\n. no ... This is super easy to implement by your own.\nJust add an additional emptyView in your LCE xml layout.\nThe override showContent() of your LCE Activity / Fragment like this:\n```java\nclass MyLceActivity extends MvpLceActivity {\nView emptyView;\n   MyAdapter adapter; // RecyclerViewAdapter   \n@Override\n    public void showContent(){\n       super.showContent();\n       if (adapter.getItemCount() == 0){\n           emptyView.setVisibility(View.VISIBLE);\n       } else {\n           emptyView.setVisibility(View.GONE); \n       }\n    }\n@Override\n   public void showError(){\n      super.showError(); \n      emptyView.setVisibility(View.GONE);\n   }\n@Override \n   public void showLoading(boolean pullToRefresh){\n       super.showLoading(pullToRefresh);\n       emptyView.setVisibility(View.GONE);\n   }\n}\n```. Thanks for your pull request!\nRemoving the public modifier makes no difference. All interface methods are public anyway. So it's basically just a matter of style. However, if we will ever see java 9 on android than it makes a difference if interfaces methods are defined as public or \"default\" package visibility (or private) since java 9 allows visibility modifiers on interfaces. Therefore I prefer to keep the public modifiers on interfaces (if we ever would see java 9 we have to explicitly add them again) \nAs already said, nowadays in java 7 it's just a (personal) matter of style. Therefore I have to thank you for your work, but I don't see much benefit in removing the public modifier.\nWhat do you think?\n. Yes, my coding style (since I'm also programming java 8 on server side) is that I always use public modifiers and I thought I have applied that coding style to mosby as well, but it seems that I have not applied that on all interfaces like ActivityMvpDelegate etc.\nI think it would be a good idea to add the modifiers to that one rather than removing modifiers from others.\n. Thanks for that!\nYou are welcome to contribute in OUR project!\n. Implemented in Presenter Manager.. Presenter is not business logic, presenter is just the connection between business logic (the blue boxes) and the view. Presenter just tells the View what to display, so Presenter kind of coordinates the view. \nFor example, MailProvider (Business logic) is used by InboxPresenter and MailPresenter to either display a list of mails (InboxView) or to display a single Mail (MailView). \nSo creating entirely new Presenters is cheap. If you want to reuse a Presenter you can do that too. Presenter programms against a View Interface. So if you want a new View (i.e. Fragment) that displays the same data just in another way simply implement the View interface on your new Fragment and reuse the same presenter. \n. Thanks, will take a look tomorrow\n. Looks good to me, thanks!\nI would appreciate if you could put the \"hard coded\" resources  android.R.integer.config_longAnimTime also into a int.xml file, so that other could override this if needed.\nOtherwise I will do that after merging your pull request.\n. Thanks, I really should have implemented like that from the very beginning!\nSebastian \u015awierczek notifications@github.com schrieb am Do., 25. Feb.\n2016, 22:50:\n\nSure it will be even better. I changed that.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/pull/117#issuecomment-189001839.\n. Done!. haha :+1: \n\nYes, all the images are just hardcoded (except the flag).\nI haven't time to search for images for each country or for an image service without an api key so I simply hardcoded them (if you know such a service I would be more than happy to use that one instead).\nBtw: Willemstad seems to be a pretty nice city! I think I have to stop by there next time I'm in this area.\n. hi,\nI'm sorry but I'm not sure if I have understood you correctly.\nWhat do you mean with \"update the presenter\"? You mean you have a View and change the \"presenter\" dynamically but the view still remains the same?\n. I see, that makes sense. \nHowever, from my point of view that would change the View as well? In my opinion an entirely new EditView with his own EditPresenter should be visible on screen.\nOtherwise your \"single\" view will have all that \"if state is edit, do this, else, do that\" (instead of the \"single\" presenter).\n. I think this is not the default use case (and I still think a separated View and Presenter for edit mode is the cleaner approach), so I will not add support for that kind of feature you are asking for (setPresenter should dettachView() of previous Presenter and automatically bind the new presenter), because it will blow up the internal code and as already said, I think it's not the way things should be implemented.\nHowever, there is another solution (already existing solution) which should work (not tested yet) that comes close to what you try to achieve.\nMosby provides an ActivityMvpDelegate, FragmentMvpDelegate and ViewGroupMvpDelegate and a corresponding MvpDelegateCallback you have to implement.\nSo what you can do is create two \"ActivityMvpDelegate\" container objects like this (imagine that there are View interfaces NormalView  and EditView):\n``` java\nclass MyActivity extends AppCompatActivity implements EditView, NormalView {\n  private NormalViewDelegate normalViewDelegate;\n  private EditViewDelegate editViewDelegate;\n\n void onCreate(Bundle b){\n        super.onCreate(b);\n        setContentView(R.layout.my_view_with_normal_and_edit_mode);\n        normalViewDelegate = new NormalViewDelegate(this);\n        editViewDelegate = new EditViewDelegate(this);\n\n      normalViewDelegate.onCreate(b);\n      editViewDelegate.onCreate(b);\n  }\n\n void onDestroy(){\n      super.onDestroy();\n      normalViewDelegate.onDestroy();\n      editViewDelegate.onDestroy();\n }\n\n ...  // also forward all other lifecycle callbacks like onResume() etc.\n\n}\n```\nThen EditViewDelegate look like this:\n``` java\nclass EditViewDelegate implements , MvpDelegateCallback {\n   ActivityMvpDelegate mosbyDelegate = new ActivityMvpDelegate<>(this);\n   EditView editView;\nEditViewDelegate(EditView editView){\n       this.editView = editView;\n   }\nvoid onCreate(Bundle b){\n        mobsyDelegate.onCreate(b);\n   }\nvoid onDestroy(){\n        mobsyDelegate.onDestroy();\n   }\n... // also forward other lifecycle events\n@Override   // MvpDelegateCallback method\n   EditView getMvpView(){\n       return editView;\n    }\n@Override // MvpDelegateCallback method\n   EditPresenter createPresenter() {\n         return new EditPresenter();\n    }\n... // other MvpDelegateCallback methods\n}\n```\nYou also have to do the same for NormalViewDelegate. The trick here is that  getMvpView() is actually pointing to the parent activity, because the activity is implementing EditView and NormalView interface. The containers NormalViewDelegate and EditViewDelegate are just there to separate mosby's internal methods which otherwise would cause conflicts (because of generics) if they would be implemented directly in your Activity. \nWith this aproach you will have two decoupled Presenter, \"living\" at the same time, programming agains a dedicated MvpView interface each, but still having one single layout file containing the components of both, NormalView and EditView.\nHope that helps!\n. Do you mean a java library project or android library project?\n. that is strange, I use it a lot in library modules and never had an issue and I can't see how Mosby should be causing a problem in library modules only ...\nHave you tried clean your project? Maybe there are some other dependencies or annotation processors that may cause an issue?\n. Hm, I had similar issues with other libraries where some classes couldn't have been  found in Android Studio. In my case an Annotation Processor has caused this issue. \nIf you do Build -> Rebuild Project I got some errors mainly saying me that the classes could not have been found. But somewhere in between all those errors there was a little error message produced by an annotation processor. After having fixed that all the other \"classes\" has been found and the project compiled successfully.\nMaybe you are facing the same / similar issue?\n. \u00af\\_(\u30c4)_/\u00af\n. Thanks!\n. I feel your pain. But, actually per contract this method can return null and should be null checked, but typically you do that null check with isViewAttached(). I already thought about a custom LINT check #53  .\n\nI know what I'm doing and when I use the view I know that it is not null.\n\nSo why not writing your own Presenter. MvpBasePresenter is really not required (no magic) if you know what you are doing. Have a look at the source code. Actually there is an interface MvpPresenter that MvpBasePresenter implements.\nAlso the javadocs says:\n\nSo using a WeakReference and adding the isViewAttached() check are basically just some\n  kind of safety net and not needed in a \"perfect world\". Please note that if you are sure that\n  you are coding in such a \"perfect world\" then you can also think about implementing your own\n  Presenter entirely without WeakReference and isViewAttached(). Note also that\n  MvpPresenter is an interface. Hence implementing you own Presenter is easy.\n\nSo the presenter you are looking for is as simple as this:\n``` java\nclass IKnowWhatImDoingPresenter implements Presenter {\nprotected V view;\n\n@Override public void attachView(V view) {\n        this.view = view;\n    }\n@Override \n  public void detachView(boolean retainInstance) {\n     view = null\n   }\n}\n```\nThen you don't have a getView() at all and you can access the view directly\n. Thanks for your feedback. I really appreciate that and I think you are right in general, but theoretically view can be null i.e. if you have forgotten to cancel an AsyncTask. I know that this is not the case for your and for my apps because we are advanced android developers. But I think for android beginners (and there are plenty who are using mosby) it's better to have this \"safety net\" and for them it might be useful to get an LINT / IDE warning if they don't check for view != null. However, as you have already said, there are for sure situations where you are entirely sure that the view cannot be null and then those false warnings are annoying, also for beginners. \nSo I will think about removing @Nullable, but I hope to find another solution for this annoying problem.\n. The change was intentional. I thought, however, that if it is not annotated at all kotlin treats it as nullable.. The same way as you would do it without mosby. Let's say you have an MediaPlayer Observable. How would you implement it without mosby? You would subscribe / unsubscribe in Fragment.onPause() and Fragment.onResume(). \nUsually there is no need that a mosby presenter has \"lifecycle callbacks\".\nFurthermore, I don't think that presenter is responsible for lifecycle. Why? Because lifecycle is already a complex topic. If you start to move lifecycle logic in your presenter, than you basically have just moved that spaghetti code from activity to presenter. If you just need to do something onStart() then simple call presenter.doSomething() in Fragments.onStart(). I think there is the need of a separated component responsible for lifecycle handling, the activity, and not the presenter. The presenter should just be responsible to coordinate the view and to be the bridge to the \"business logic\" to retrieve data that should be displayed in the view. Given that \"definition\" of a presenter, I don't see a reason why the presenter needs lifecycle callbacks. All the presenter needs to know is whether or not a view is attached to the presenter. It should be that simple. Actually this is one of the arguments why developers are against fragments (complex lifecycle) and prefer \"custom views\" because custom views lifecycle are only two events: ViewGroup.onAttachedToWindow() and ViewGroup.onDetachedFromWindow().\nWith that said, there might be some cases when the presenter needs lifecycle events, but mainly because the underlying \"business logic\" needs lifecycle events. Think about an app that uses GPS. To not drain the battery too much you would stop GPS tracking when Fragment.onPause() and resume when Fragment.onResume(). So again, it's not the presenter who needs onPause() and onResume() lifecycle but rather the \"business logic\", in that case the GPS tracker, that needs that lifecycle events. So here it might make sense to forward this lifecylce events to the presenter, and then the presenter starts/stops GPS tracking. That would be one of the few scenario where I would say that it would make sense to add lifecycle callbacks to the presenter. But, I think there is a better way for doing that in the GPS example. As already said, is not the responsibility of the presenter to handle lifecycle events. Actually, there is already a component that is responsible for lifecycle events: the fragment / Activity.\nSo instead of forwarding Activity.onPause() and Activity.onResume() to the presenter, just do something like this:\n``` java\nclass TrackingActivity extends MvpActivity implements TrackingView {\n      private GpsTracker tracker;\n  public onCreate(){\n        tracker = new GpsTracker(this); // might need a context\n        ...\n  }\n\n public void onPause(){\n     tracker.stop();\n }\n\npublic void onResume(){\n     tracker.start();\n }\n\n@Override\npublic void createPresenter(){\n      return new TrackingPresenter(tracker);\n }\n\n}\n```\nAnd then the presenter takes the GPS tracker as constructor parameter and registers himself as listener to the GPS tracker (business logic). By doing so you have a presenter that is just responsible to update the View as the original definition of the presenter recommends. Moreover, you still have this clear separation of concerns: Presenter, coordinates the view and listens for data to be displayed on the view from business logic, and a dedicated lifecycle component (the activity or fragment).\nSo I think you could do exactly the same thing with your music player observable. So either add onPause() and onResume() callbacks to your Presenter, but actually you need this lifecycle information  for your \"business logic\", the media playback observable. So you could do the same as GPS Tracker example from above. Make a class like this:\n``` java\nclass UpdateMediaPlayerObservable {\n  Observable  realMediaPlayerObservable = ...;\n  boolean updatedProgress;\n\n Observable getObservable(){\n     return realMediaPlayerObservable.filter( (item) -> updateProgress);\n  }\n\n}\n```\nAnd then in your Fragment:\n``` java\nclass MediaPlayerFragment extends MvpFragment implements MediaPlayerView {\n      private UpdateMediaPlayerObservable mediaPlayer;\n public void onPause(){\n     mediaPlayer.setUpdateProgress(false);\n }\n\npublic void onResume(){\n    mediaPlayer.setUpdateProgress(true);\n }\n\n@Override\npublic void createPresenter(){\n      return new MediaPlayerPresenter(mediaPlayer);\n }\n\n}\n```\nThe trick here is that the presenter still is subscribed when the screen is off, but don't update the \"ui\" because of the .filter() operator. Alternatively, as already said you can forward Fragment.onPause() and Fragment.onResume() to Presenter.onPause() and Presenter.onResume().\nif you really need onResume() and onPause() events in all of your Presenters you could implement your own PausableFragmentMvpDelegateImpl that interacts with an PausablePresenter and use this delegate instead of the default FragmentMvpDelegateImpl. See delegation section here (scroll down until delegation header). But I do think that usually the presenter should not be lifecycle aware (code smells).\nHope that helps\n. http://hannesdorfmann.com/android/presenters-dont-need-lifecycle\n. Great thanks!\nThere was a reason that I haven't annotated them yet: Those classes are part of mvp-common which is a java library (not android library). The problem was that the annotation package android.support.annotation is not available on maven central (or similar) but only with google's private support repo that will be installed locally on each developers machine. \nThe idea of having a separated mvp-common artifact was the ability to move Mosby presenters into pure java library modules (not android library). But I see that things are annotated with @NonNull from android.support.annotation which already cause the same error ...\nSo the question is, is having java libraries modules still relevant. I would say yes. \nWhat do you think?\nIf yes, we should remove all android.suppor.annotations from mvp-common, if no, than we also should add @UiThread to MvpLceView.\n. >  It might be needed for tracking the modern Android trend toward design-by-contract with annotations.\nI 100% support this!\n\nCan you provide a stub for @NonNull as a fallback for non-Android? \n\nI know that there are others like jetbrains annotations, but those are not expected by lint.\nI was thinking about copying the @NonNull and @UiThread into mvp-common under the same package name android.support.annotation. This should work, but I'm afraid that this might cause conflicts in the future.\n. What exactly have you done? Copy support annotations?\n. Thanks for your contribution and tips regarding stubing.\nI have already done something similar with RecyclerView dependencies on other projects (put stub into a jar) and it works, but I feel a little bit bad about it.\nSince nobody has complained about that issue yet, I don't think that it's worth to spend more time on that issue.\nI have opened an separated issue #127  to make it better \"discoverable\", in case that someone is struggling on that.\nThanks for your help and happy easter!\n. I think there is a misunderstanding. The intention of this class is to remove all this isViewAttached() checks for MvpBasePresenter and that you have some kind of safety net in the case you have forgotten to cancel an async background task like this:\n``` java\nclass MyPresenter extends MvpNullObjectBasePresenter {\npublic void loadData(){\n          new AsyncTask(){\n         public Foo doInBackground(){\n               // do something\n               return new Foo();\n         }\n\n       public void onPostExecute(Foo result) {\n           getView().show(result);\n       }\n   \u00a0}.start();\n\n}\n}\n```\nSo the thing here is that we have forgotten to cancel the async task in Presenter.detachView(). So image the Task starts, then the user closes the Activity before the Task has completed (so presenter.detachView() will be called and View will be null), and then  the Presenter tries to \"deliver\" the result in onPostExecute(). In MvpBasePresenter you would have the if(isViewAttached()) check in  onPostExecute() to prevent to calling getView().show(result) because getView() == null. \nWith MvpNullObjectBasePresenter you don't have to check isViewAttached(). Rather you safely call getView().show(result) even if the \"real view\" (i.e. activity) is detached, because getView() will not return null. In this case it will return a MyView NullObject instance (constructed by reflections) that simply do nothing on invocation of show(result). \nThis must be done by reflections an cannot be done with private final V NULL_VIEW = (V) new Object(); because otherwise the app will crash because it cannot be casted to MyView because obviously an instance of Object is not MyView when invoking show(result).\nHowever, yes there is a lot of room for improvements:\nMemo to myself:\n\nInstantiate NULL_VIEW only once in constructor and reuse it\nCheck for Generic type order of class declaration (must not be [0])\nConsider adding WeakReference to avoid memory leaks if misused with non custom MvpDelegate that forgets to invoke presenter.detachView().\n. not worth the effort ...\n. Once it is in mvp-common it is also available for other modules like MVI if\nI remember correctly. Not sure what the best solution would be here. I\npersonally think that you should copy and paste it in your own project as I\nwould not really like to introduce modules if there is not a high demand\nfor it (you are the first person Im aware.of using Mosby for java\napplications as well).\n\nSuperThomasLab notifications@github.com schrieb am Fr., 16. Juni 2017,\n20:57:\n\nHello @sockeqwe https://github.com/sockeqwe,\nI'm using Mosby in a Java module and used your workaround above. It works\nand am able to compile the project. However, I would like to be able to put\nthe Views and Presenters in the Java module. Isn't it better to move\nMvpBasePresenter to the mvp-common module? How should I be able to use\nMvpBasePresenter?\nThanks, Thomas\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/127#issuecomment-309107452, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrryNjctphYBmOYCnKcjf9mPR_-fmks5sEs_egaJpZM4H5SVc\n.\n. Didn't wanted to add more generic type definitions. I'm open to discuss that ...\n\nI, personally, don't have a problem with casting and one could write his own base class with a generic type parameter for ViewState.\n. I'm willing to merge your pull request, I simply hadn't time yet (I'm sorry for not communicating this earlier). This will be part of Mosby 3.0. Since it's a major release, breaking API changes are ok. I have plans to continue the work on Mosby 3.0 at the end of April\n. I don't have time to work on that before mid June ... I can't say when a stable version will be available. I hope mid July, but I can't make any promise. \n. implemented in 3.0. Generic ViewState is implemented now. Sorry, I had to reimplemented that from scratch. Therefore I'm closing your pull request. The way you are doing it is correct. Mosby doesn't specify anything about RxJava or how to handle subscription callbacks like onNext(), onError() and onCompleted().\nSo in your case doing something like \njava\nprotected void onNext(M data) {\n    if (isViewAttached()) {\n        getView().setData(data);\n        getView().showContent();\n    }\n}\nsounds reasonable if your onNext() gets called multiple times.\nActually, that is the reason why there is no build in MvpLceRxPresenter in Mosby because I can't provide a presenter class to extend from for all different kind of use cases.\nSo yes, go ahead and write your own Presenter (or rx subscriber) that fits for your use case.\nIf you find the interaction between view and presenter too complex than probably LceView is not the right choice for you. Then you should think about writing your own View Interface with those method you exactly need.\nRegarding error handling (again it's not Mosby related, it's RxJava related) you might not want to call onError() if you an networking or cache error (or not available) occurs. You can use other rx java operators like onErrorResumeNext() or onErrorReturn() etc. which can be applied on cacheable observable and networking observable to control the overall observable flow in case of errors.\nAdditionally, if your View needs to distinguish between cache or network onNext() you could also think about delivering the result in a wrapper class like this:\njava\nclass Result {  \n  Repo result;\n  boolean fromCache;\n}\nand then Presenter subscribes to Observable<Result> rather than Observable<Repo> (so also your onNext(Observable<Result>) contains the info if coming from cache or network).\nAlso, if you are using retrofit you can override caching headers to force retrofit to always hit the disk cache first (and deliver result in onNext() ) and then continue with the real network request which then triggers again onNext().\nBTW. I would appreciate if you could ask such kind of questions on Stackoverflow and tag your question with mosby. I'm looking regularly on stackoverflow for that kind of questions. I just prefer such questions being asked on stackoverflow, because it's easier searchable through google (and stackoverflow himself) so that it is easier to discover the answer for other users.\n. yes this is correct. Maybe onPostCreate() is better suited than onResume(). However,  people are used to call presenter methods like presenter.loadData() in  Activity.onCreate(). \nSo they would have to move that to onPostCreate() too. You see, you make the other half of users happy by disapointing the others. Furthermore this is a breaking change.\nSo what I typically do is something like this:\n``` java\nclass MyActivity extends MvpActivity {\npublic void onCreate(Bundle b) {\n       setContentView(R.layout.my_layout);\n       // findViewById() etc.\n\n       super.onCreate(b);\n }\n\n}\n```\nCall super.onCreate() after having set ContentView.\nAlternatively, if you really want to have presenter.attachView() called in onResume() you could write your own MvpDelegate that does that in onResume(). Checkout Mosby's github pages for more information about that.\nWhat do you think?\n. We already had this discussion earlier in #42 \nWell, I'm open to discuss and change that but only if enough user of mosby are requesting this.\nAlternatively: You don't  have to use MvpLceFragment etc. if you don't need them. You can always write your own. \nThe idea behind LCE is to have a quick out-of-the box solution by following some conventions. One of them is that ErrorView has to be a TextView because it covers most use cases. If you want something more customizeable then you should consider to write your own class that extends from MvpFragment(without LCE).\n. No worries, it's hard to find similar issues in githubs issue tracker.\nSo I will close this for now, but as already said, if some more users are demanding it, I'm open to reopen this issue and to discuss this.\n. Hi @matoelorriaga ,\nwell, it's unlikely that I will change the current LCE implementation because I think it will add to much boilerplate code when changing error view to a generalized View (not TextView), but I'm willing to listen to your proposal and then we can decide if we want to merge it into Mosby.\nHow would you deal with error string messages, retry click, toast in case of pull to refresh etc? What will be left to the user of the MvpLceFragment to implement?\n. See github pages FAQ section:\nhttp://hannesdorfmann.com/mosby/summary/\n\nCan the Presenter and its view be out of sync during a screen orientation change?\nExcellent question. Mosby assumes that all interaction from Presenter with the View happens on android\u2019s main UI thread. Hence the answer is no that cannot happen since screen orientation changes are executed on the main UI thread as well. So either is a screen orientation executed completely (view reattached) or the presenter invokes the views method after view is reattached since both run on main UI thread or the presenter invokes the views methods before starting screen orientation change.\n\nSo as long as your Presenter invokes View methods on main UI thread your solution is not needed.\n. If you are sure that you are unsubscribing your RxJava subscription properly in presenter.detachView(false) then you shouldn't need isViewAttached()\nI did so in the examples (and also in my production code) because\n\nbut in general I would say it wouldn\u2019t hurt to drive with a safety net.\n\nThere is no Mosby forum. I would like to see those kind of question asked on Stackoverflow because it is better searchable through google so it is easier to discover those question and answers for others.\nI have seen (right now) that you have already asked this question on stackoverflow. Usually I check stackoverflow regularly for new question about mosby, but didn't yesterday ...\n. Hi, I will checkout your example in the evening. \n\nor rotate, the problem described starts.\n\nrotation should work, that might be a bug\n\nnavigate away from the FirstScreen or rotate the device, after Rx onNext callback, the isViewAttached()\n\nThis actually is the correct behaviour as for now, but I might change that in Mosby 3.0  / mosby-conductor 1.0. The problem is that if you Navigate away, the view will be destroyed. If there is no View what should the Presenter update then? So this is more a philosophical question. \nMy initial thought was,  that if you want to do so Conductors setRetainViewMode(RETAIN_DETACH) mode would be an option because then actually there is a UI (even not attached to Activity / Window) that you can update. But I'm not sure if this will leave to memory issues in big apps.\nTherefore I thought, it would be better to go the simple way, if there is no view then Presenter can't do nothing and should unsubscribe from observables in presenter.detachView(false), then once the user comes back to your first screen presenter. public void subscribe(@NonNull UseCase useCase, @Nullable Bundle bundle, final boolean pullToRefresh) will be called again.\nfeedback is very welcome.\n. Is your sample project up to date? I only see a white screen when starting the app ...\nUpdate: My bad, hadn't added permissions for contact (and app haven't asked for runtime permissions) \nAnd what exactly should happen / is not behaving correctly on screen rotation?\n. I found the issue: This is not a Mosby-Conductor problem. this issue has been caused by dagger and the way you inject the presenter. \nYou are creating and injecting a new Presenter instance on every screen orientation change in your onViewBound() method. That means every screen orientation a new presenter will be created. \nMoreover, since you are declaring your own field for presenter you are not using MvpLceViewStateController field for Presenter. See: https://github.com/sockeqwe/mosby-conductor/blob/master/mvp/src/main/java/com/hannesdorfmann/mosby/mvp/conductor/MvpController.java#L19\nMosby internally works as follows:\njava\nif (getPresenter() == null) {\n     setPresenter(  createPresenter() ); \n}\nIn MvpController (the base class of MvpViewStateLceController you are extending from getPresenter() and setPresenter() are using MvpController.presenter field. \nhttps://github.com/sockeqwe/mosby-conductor/blob/master/mvp/src/main/java/com/hannesdorfmann/mosby/mvp/conductor/MvpController.java#L19\nThere are two solutions:\n1. Don't declare your own presenter field but rather do something like this (then it will use  MvpController.presenter field):\njava\n @Override\n    public FirstScreenPresenter createPresenter() {\n        return DaggerFirstScreenComponent.builder()\n            .activityComponent(((RootActivity) getActivity()).getActivityComponent())\n            .firstScreenModule(new FirstScreenModule())\n            .build().presenter();\n    }\nThis ensures that a presenter instance will be created only once since createPresenter() will only be called once.\n1. If you want to use your own field presenter then you also have to override setPresenter() and getPresenter() in your controller that extends from MvpLce\n``` java\npublic class FirstScreen extends BaseController, FirstView, FirstScreenPresenter> implements FirstView {\nprivate static final String MUST_HAVE_NUMBER = \"must_have_number\";\n@Inject\nprotected FirstScreenPresenter presenter;\n\n@Override\n    public FirstScreenPresenter getPresenter(){\n        return presenter;\n    }\n@Override\npublic void setPresenter(FirstScreenPresenter p){\n   this.presenter = p;\n}\n\n```\nbecause of the way Mosby internal works it calls getPresenter(), createPresenter()  and setPresenter(). But still, you have to ensure not to create and inject a new Presenter in your onViewBound() method.\nThis is clearly not your fault, because it requires some knowledge of Mosby internals and it is not documented (yet). I apologize for that.\nBtw. you will run into  same \"problem\" if you use Mosby with Activity / Fragments\nPS: Your presenter will be unsubscribed once the view gets destroyed (see \"philosophical question \"at the beginning of this issue). You use FirstScreen extends MvpViewStateLceController and put it on the backstack.  you will run into the issue that once the user navigates back to FirstScreen (pop backstack) the observable won't  restart again. Those LCE classes are not meant for Reactive programming per default. They are meant to be used by \"beginners\" that are executing a one time http request / async task. So you have to connect the dot's manually: Override onViewStateInstanceRestored(boolean) and call loadData() again to subscribe the presenter again ... \n. You are welcome. No you don't have to save that in onSaveInstanceState() ...\nFor now forget everything I mentioned before about\nonViewStateInstanceRestored() ... you only run into this if you use hot\nobservables like sqlbrite, then you have to write 2-3 lines of code to\nsolve that manually, but for now it seems like you were using rxjava as\nasync task replacement and in that case everything should work out of the\nbox...\nLeonardo Ferrari notifications@github.com schrieb am So., 22. Mai 2016,\n19:07:\n\nFirst of all, I really appreciate all your explanation and help, I'll dive\ndeeper into your code to learn more.\nI think I solved the problem by creating a onCreate method as seen on Conductor\n34 https://github.com/bluelinelabs/Conductor/issues/34:\n@NonNull\n    @Override\n    protected View onCreateView(@NonNull LayoutInflater inflater, @NonNull ViewGroup container) {\n```\n    if(!created){\n        onCreate();\n        created = true;\n    }\nView v;\nv = inflateView(inflater, container);\nButterKnife.bind(this, v);\nonViewBound(v);\n\nreturn v;\n\n}\n```\nAnd use like this:\n@Override\n    protected void onCreate() {\n        DaggerFirstScreenComponent.builder()\n                .activityComponent(((RootActivity) getActivity()).getActivityComponent())\n                .firstScreenModule(new FirstScreenModule())\n                .build().inject(this);\n    }\nI tested and it works. So, is that a good solution ? Should I save the\ncreated variable on saveInstance ?\nThank you so much again !\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/136#issuecomment-220843662\n. Hm, what do you mean with wiring up?\n\nYes you are right onAttach() is delegated to the delegate, but it does nothing. Everything should still work as expected ... https://github.com/sockeqwe/mosby/blob/master/mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/FragmentMvpDelegateImpl.java#L100\n. Thanks for the clarification!\nteamfunk notifications@github.com schrieb am Mi., 1. Juni 2016, 14:26:\n\nwith wiring up i meant the delegation.\nAh i see its my fault. the normal presenter doesn't use onAttach at all\nand only hooks into onViewCreated and onViewDestroyed with attachView and\ndetachView. I might run into a special case (video stuff) where i maybe\nneed to delegate more lifecycle methods to the a presenter but now i got\nhow to do it. Hopefully i can prevent that - i know lifecycle in a\npresenter is not the best idea... This can be closed :-)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/137#issuecomment-222976796, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AAjnrjw7tNrlI9TzZTUgSDhc4pKtSoj8ks5qHXpzgaJpZM4IrZQV\n.\n. Are you suing RxJava?\n. Consider using Model-View-Intent (MVI) module; sample is available. Pre release (alpha release of Mosby 3.0.0-alpha1 containing MVI module) coming soon.. Thanks!\n. Thanks!\n. I don't think that this is a problem of Mosby nor of FragmentArgs. As long as you treat the passed Office just an an argument and not as the actual model in your view everything is fine in my opinion.\nWhat's the difference between passing an id (let's say an integer) or a concrete object (as in your case a Office object as argument? Or Activities Intent extra? Treat them just as arguments.\n\nIf you just going to display Office details, then you may don't even need MVP at all, but just display that Office in your UI directly.\nOtherwise, I tend to agree with @dimsuz . Either create a Presenter with your office object as constructor parameter or for example if you are going to load some data for the given office object pass the office object as parameter to the corresponding presenter method like this: presenter.load(office).\nBtw. since this is an issue tracker, I would like to suggest to ask this kind of questions on stackoverflow. Mainly because stackoverflow is quite good indexed by google so it is easier for others facing the same problem to find the answer there. It's really hard to find questions / answers on Github's issue tracker system, especially when the issue has been closed.\n. Implemented; sample is also available. Pre release (alpha release of Mosby 3.0.0-alpha1) coming soon.. Would rather prefer not to add third party libraries because that would\nmean to update and release a new version of Mosby every time MapFragment\nwill be updated. But I'm open to discuss that.\nAlternatively, if you want to build a library just for MapFragment support\nby your own, I will be more than happy to add a link to your library.\nAlso related to #80 \n. I'm closing this for now, but I'm open to reopen and continue the discussion ...\n. Thanks!\n. I guess editMenuItem is a Toolbar / ActionBar Menu Item, right? \nonNewViewState() will be called after Fragment.onViewCreated(), so your xml layout will definitely be inflated.\nBut I'm not sure when xml menu will be inflated. Do you use plain Toolbar or do you set Toolbar as support action bar.\n. Ok, so ViewState will be instantiated in Fragment.onActivityCreated() as you can see here: \nhttps://github.com/sockeqwe/mosby/blob/master/viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/FragmentMvpViewStateDelegateImpl.java#L51\nhttps://github.com/sockeqwe/mosby/blob/master/viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/MvpViewStateInternalDelegate.java#L116\nAccording to this lifecycle diagram, Fragment.onActivityCreated() will be called after Fragment.onCreateView() and after Fragment.onViewCreated(). So as long as you do your ButterKnife setup before Fragment.onActivityCreated() everything should be fine. \nRegarding menus: Bad news, according to the same diagram, menu inflation happens after Fragment.onActivityCreated(), somewhen after Fragment.onResume(), WTF?\nNot sure how to fix this properly, I think for now your workaround with a post() is the best option.\nI guess, if you use Toolbar.inflateMenu() and Toolbar.setOnMenuItemClickListener() instead of using Toolbar as support ActionBar (with onCreateOptionsMenu() etc). inflation happens immediately and should avoid this problem.\n. Mostly because I use retaining Fragments.\nTherefore, Fragment.onCreate() is only called the very first time. If for example you do dependency injection in Fragment.onCreate() and for instance access Fragement.getActivity() in your dagger module, you will run into memory leaks after screen orientation changes, because the injected components still have references to the \"old\" activity (before screen orientation changes) and no new ones will be injected as Fragment.onCreate() will not be called again after screen orientation changes for retaining Fragments.\nSo one could discuss why not  doing all that in Fragment.onCreateView() ? Well, this is just a personal preference. You could also do it there, but Fragment.onViewCreated() feels more obvious to me and just inflate the xml layout in Fragment.onCreateView(). Again, that is just a personal preference...\nIn general, the advice I can give when working with fragments is to only use 2 lifecycle methods if possible: Fragment.onCreateView() (and maybe Fragment.onViewCreated()) and Fragement.onDestroyView() \n. Thanks!\n. Moved into own module in upcoming 3.0 release. Thanks for reporting! I will take a look at the end of the month. I guess\nit is caused by some dagger scoping issues ...\n\u66fe\u7965\u5f6c notifications@github.com schrieb am Sa., 6. Aug. 2016, 07:46:\n\n[image: image]\nhttps://cloud.githubusercontent.com/assets/3648745/17454958/c7382aac-5bdb-11e6-8440-c5a239a67661.png\n1. go to developer options and turn on 'Don't keep activities'.\n2. open sample-mail app\n3. go to login activity\n4. pressed back.\n5. the result been the pic.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/149, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrrpLv7UY27cUmTAd_3EBDBQV_bM-ks5qdB-vgaJpZM4JeNiV\n.\n. Hi,\nin general every View should have exactly one Presenter. Usually when you run in such a situation this is an indicator that you should split your big one view with one big presenter into multiple smaller Views having a Presenter each. \n\nBasically your search view has  a SearchPresenter, your Activity has its own Presenter.\ni.e. you could create a SearchFragment  with his own SearchPresenter that will be inside your Activity, but has nothing in common with the Activity and your Activity's Presenter.\nIf you want to use the SerachView UI widget, then you can do this too. Mosby provides support for averything that extends from android.view.View like any kind of ViewGroup (like FrameLayout) or also SearchView. So basically you could make a class MySearchView extends SerachView implements MvpView, MvpDelegateCallback{} and then you can create Presenters / ViewState with the same API as you do with any arbitary MvpActivity or MvpFrament. Some ViewGroup implementations are already provided by Mosby like MvpFrameLayout etc.\n. basically yes, since both libraries are following the delegation principle, but you should not intersect both responsibilities. i.e. don't call createPresenter() from a RxLifecycle event, since it is already managed by mosby.\n. Yes, this is the desired behavior. Mosby saves the ViewState in the Fragment. Since the Fragment is on the backstack it can not use setRetainInstance(true). Therefore, ViewState has to be Parcelable. Hence return a ViewState implements RestorableParcelableViewState in createViewState()\nSee documentation: http://hannesdorfmann.com/mosby/viewstate/ section with the name \"How does the ViewState survive screen orientation changes?\"\nMaybe this will be changed in Mosby 3.0.\n. I assume that in your app you are navigating from NotesFragment  to NoteFragment. \nSo in you example the navigation stack is:\n1.  NoteFragment (currently visible to the user)\n2. NotesFragment (on the back stack)\nFurthermore, I assume that with \"restart my app and do the same\" you mean that you kill the app process (or destroy hosting activity) and then restart the app so that the activity and so on are restored (Bundle in onCreate() is not null) ?\nIf both assumptions are correct, then this works as expected. Not sure someValue. I doubt that this  value survives restarts without putting it into a bundle.\n. I might be wrong and something has been changed in latest support library releases but as far as I know it is not possible to put a Fragment with setRetainInstance(true) on the backstack .\n. Thanks for this demo. \nI'm wondering when this has been changed, because I remember that it was not possible to add retaining fragments to the backstack.\nSo you still run into the problem that onNewViewState() is called every time you come back from backstack to the previous fragment, right?\nBtw. in your Activity you have to check if (savedInstanceState == null) before adding FirstFragment, otherwise your code will create a new FirstFragment on each screen orientation change.\nLike this:\n``` java\n  @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    if (savedInstanceState == null) {\n        putFragment(new FirstFragment());\n    }\n}\n\n```\n. yes that is true ... That is more a \"philosophical\" question: If no View exists (or is detached), why should a presenter exist for such non existing view?\nNevertheless, I understand the problem you are facing, but I think this problem can be solved differently. No EventBus, just ensure that all presenters observe the same model.\nIn Mosby 3.0 I will introduce a new Model-View-Intent module. This will solve that \"observing same model\" problem and also remove the ViewState at all...\n. thanks for your feedback! I will investigate and evaluate that and build that into the internal delegate\n. Please note that I have added a Model-View-Intent (MVI) module to mosby. A sample is available in this repo. Pre release (alpha release of Mosby 3.0.0-alpha1) coming soon.  I think MVI solves this kind of problem in a more elegant way. Nevertheless, I will invest some time to find a solution for MVP too.. Fixed for MVP 3.0. Thanks for your suggestion, I will add this!\n. Upcoming 3.0 version contains ParcelableListLceViewState. Seems like a valid option to me ... \n. Oops, thanks! This will close #152 \n. There are 3 options:\n1. Don't use Fragment Arguments, but rather let the Presenter \"query\" the desired data object (Device) from underlying business layer. But it seems that this is not a suitable case for you.\n2.  Pass the fragment argument as presenter's method parameter. I usually do this for \"Screens\" that have some id's as Fragment Argument like imagine a News Application where you have a Fragment to read a NewsArticle. Then my NewsArticlePresenter would have some method like presenter.loadArticle(articleId) (where article id was the fragment argument). Not sure if this works in your case (presenter.init(device)? but in that case I would definitely prefer to pass that as construcor parameter, so solution 3. seems to be better suited solution).\n3.  Pass the Fragment Argument as constructor parameter like new DeviceDetailsPresenter(device). Since you are using dagger, you don't want to instantiate a DeviceDetailsPresenter directly, right? To \"fix\" that you have to create scoped component / subcomponent for this \"DeviceDetailsScreen\". I would suggest to create something like a DeviceDetailsScreenModule which provides a Device:\n``` java\n@Module\nclass DeviceDetailsScreenModule {\n    private Device device;\n    public DeviceDetailsScreenModule(Device device) { this.device = device; }\n@Provides public Device proviceDevice(){ return device; }\n```\njava\npublic class DeviceDetailsPresenter extends MvpBasePresenter<DeviceDetailsView> {\n       @Inject public DeviceDetailsPresenter(Device device) { ... }\n}\nand then you can go the extra way thorough dagger by passing that Device in your  injectDependencies() when you add new DeviceDetailsScreenModule(device) in the component builder.\nThere is no silver bullet, but I usually choose one of this 3 solutions (mabye there are better ways of which I'm not aware of). Usually number 1. and 2. fits my needs.\nAlso worthwhile mentioning: If you just display static data, you may not need MVP at all. Just show it directly in your Fragment.\n. Thanks again!\n. Thanks for reporting.\nWhich version of Mosby do you use? I assume 2.x , because I think this issue has been solved with Mosby 3.0.0-SNAPSHOT\n. Could you please try it with latest 3.0.0-SNAPSHOT and let me know whether or not this issue still occurs in 3.0.0-SNAPSHOT\n. I think it has been renamed to MvpViewStateDelegateCallback \n. Thanks for your feedback. So it's not crashing, but it should crash since the view is not implementing the view interface, right? or does base class you extend from implement MvpView interface?\n. Ok, I have to dive into the code again to verify whether or not this is the desired behavior.\nJust to sum it up:\nYou have a FooActivity extend MvpActivity<FooPresenter, FooView> (but FooActivity doesn't implement FooView) and a FooPresenter extends MvpNullObjectBasePresenter<FooView>. Is that correct?\n. Got it! I have to verify the source code ... Regarding proguard, I guess a\nrule is missing here, will check that too ... Thanks for your patience!\nMiguel Aragues notifications@github.com schrieb am Di., 6. Sep. 2016 um\n18:01 Uhr:\n\nYes, that's the scenario. Some details\n- The Activity is empty, it's just a Fragment container\n- It didn't crash in version 2.0.1 until I used ProGuard\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/159#issuecomment-244999878, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrsSuUtKn0dsdI_QJT3UJZ4CCcIJ6ks5qnY50gaJpZM4J146O\n.\n. Can you please show me a code snipped of your view interface and presenter\nclass (basically I'm only interested in the interface / class definition)\n\nYuri notifications@github.com schrieb am Mi., 4. Jan. 2017, 22:46:\n\nI have same error when tryed to add parametr to my extention of MvpView\ninterface. I tryed to compile with 3.0.0-SNAPSHOT, but gradle cant find it\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/159#issuecomment-270496184, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnro5mKT3P5pZ6M1IRIvfgKQ0hokqkks5rPBNCgaJpZM4J146O\n.\n. @mohaxspb I tried to reproduce your issue, but I can't reproduce it. I have added a unit test with your interface specifications, but it is not crashing.\n\nCould you please take a look here and verify that the classes / interface are equal to what you have:\nhttps://github.com/sockeqwe/mosby/tree/master/mvp-common/src/test/java/com/hannesdorfmann/mosby3/mvp/test/regression159\nand the corresponding test:\nhttps://github.com/sockeqwe/mosby/blob/master/mvp-common/src/test/java/com/hannesdorfmann/mosby3/mvp/test/regression159/MvpNullObjectBasePresenterRegression159Test.java\nCould you also post your stacktrace here?\nAre you absolutely sure that you are using 3.0.0-SNAPSHOT? because the exception should be called directly in constructor (if null object releated) and not when view is detached / because fragment has been destroyed.. Funny, I answered a similar question last week:\nhttps://www.reddit.com/r/androiddev/comments/51sb0e/conductor_and_mvp_how_should_it_be_done/d7fdhmq\nhope that helps\n. Sounds like a both instances of Activity A share the same presenter instance. Are you returning the same presenter instance in createPresenter()? Are you using Dagger2? Sounds  like you have scoped singleton of the presenter. Please verify that.\nYou can be sure that Mosby is not sharing the same presenter instance just because the view is of the same type. Every View gets his own Presenter by calling createPresenter(), but if you return the same Presenter instance from createPresenter() both views (both instances of Activity A) will share the same presenter instance causing this issue described by you.\n. One could use loaders, but historically they were a little bit more buggy than fragments (this seems to be fixed in latest support library) and I also think that the loaders API is not perfectly designed for such a use case (handling presenters).\nUsing a map / array is also a possible way, but then you have to assign id's to map views to presenter. Also you have to manage lifecylce events i.e. when do you remove a presenter from a map? Definitely solvable problems, but I think its easier to implement by saying the presenter sticks as long as the view object is not garbage collected.\nTherefore, I, personally, prefer Retaining fragments.\n. Yes this should be possible, but I never tried both libraries before.\nAndroidAnnotations should work. Just try to annotate your Activity extends MvpActivity with @EActivity etc. \nAlternatively, if AndroidAnnotation for some strange reasons disallow to extend from MvpActivity you can try the following:\nMosby follows the composition over inheritance principle by providing a delegate.\nSee the docs http://hannesdorfmann.com/mosby/viewstate/ (scroll down until ViewState Delegate section). So basically you have to \"forward\"  all lifecycle event to Mosby's ActivityDelegate or FragmentDelegate, see https://github.com/sockeqwe/mosby/blob/master/mvp/src/main/java/com/hannesdorfmann/mosby/mvp/MvpActivity.java\nIn addition you also have to implement ActivityMvpDelegateCallbackor FragmentMvpDelegateCallback\nRegarding Bolts library:\nI can't see any reason why Bolts wont work with Mosby. Just keep in mind to cancel tasks in presenter.detachView(false) (parameter false means that the presenter should be destroyed permanently so some cleanup should be done here, like canceling tasks).\n. Thanks!\nI thought about introducing LCE for layouts too, but while it makes sense for FrameLayout, I'm not sure if this makes sense for other layout s like LinearLayout etc.\nUnfortunately, I don't understand Chinese, but the pictures are looking awesome! Thanks for that!\n. I have decided to not add this to the library itself, but I will add a link to your code.\nThanks anyway!. Hi,\nyes the method isChangingConfigurations() has been introduced with API 11:\nhttps://developer.android.com/reference/android/app/Activity.html#isChangingConfigurations()\nas part of theandroid.app.Activity Plattform class (and not as part android.support.v4.app.FragmentActivity, but FragmentActivity extends Activity).\nHence, this won't work on API < 11.\nYou could implement isChangingConfigurations()  in your Activity and either call\nsuper.isChangingConfigurations() if API >=11 or implement your own thing  if (API < 11). You may want to take a look at Activities source code, but I'm not sure how  this could be back ported. https://github.com/android/platform_frameworks_base/blob/master/core/java/android/app/Activity.java#L5152\nYou could try to just return false if API < 11 . That would mean that the View's state (and Presenter) will not survive screen orientation changes. DISCLAIMER: That might also cause some other unwanted side effects I'm not aware of right now and could break with any future release of Mosby or support library.\n. Sure, it is possible with Mosby. If you call\nMvpActiviy.setRetainInstancestate(true) in onCreate() you dont even have to\nuse a RestireableViewState. Can you share some of your code?\nFilip Zymek notifications@github.com schrieb am Fr., 30. Sep. 2016, 12:06:\n\nHello,\nI am trying out mosby, and I have trouble implementing saving view state\nfor lce view when using activity.\nI tried creating custom view which implements both RestorableViewState\nand LceViewState and return this view createViewState. I've also\nimplemented apply method but with device rotation view state was not\nsaved and mosby was calling showLoading without caling loadData.\nIs it even possible to use LCEViewState with activites?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/166, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrjMQxmSjtizOSY0uyFsF2StPJoHgks5qvN8ggaJpZM4KK7bq\n.\n. > For an AsyncTask, the callback listener should be responsible for the view existing checking.\nSo there are some other considerations for isViewAttatched()?\n\nTypically the presenter is the callback/listener (directly or indirectly). If you forget to cancel a async task, you may run into the situation where the View is not attached, but you try to update the view.\nIf you are sure that you are handling async operations properly then you dont need the chec isViewAttached(). Otherwise,  isViewAttached() is kind of a safety net.\nAlso, there might be situations where you explicitly don't want to cancel a async started operation. This could be handled in your business logic or if updating the view depends on that async operation in presenter i.e. by using isViewAttached() check\n. Hi,\nI'm glad you want to contribute! Well, I also caught myself implementing this multiple times, but I would like to avoid putting this into this library, for various reasons:\n1. maintaining & testing\n2. you never catch all use cases and users will start to complain about it. See #132 #107 #42 about LCE components\n3. I would prefer to keep this library small and concise. See #143  about adding support for Map Fragments. The problem is if we add SE, then next month we may have to add another XY component too and so on.\nI'm open to discuss that, but I think it would be a better approach to write and publish a standalone SE library on top of Mosby. I would be more than happy to share the link to such a extension module library in the README. See https://github.com/Bodo1981/appkit\nWhat do you think?\nBy the way: In my experience you need 3 states i.e. for login: 1. Show login input form. 2. Show loading (Sending) 3. Show Error ( and optionally 4. Show successful)\n. Sorry, I am a little bit busy right now, I will take a detailed look during the weekend...\nIndeed, there are discussions going on to remove LCE from this project (or at least package it into is own artifacts) #148 and I think if I would rewrite this project from scratch I wouldn't add LCE into this project. \nUsually, some other Mosby users give their feedback here on github on some project related decisions. I think we should wait some more days, maybe we get some more opinions about that, and then we make a final decision. I'm open to discuss that with the community and you are part of the community!\n\nI'm not sure if it's a good approach to create a lib on top of Mosby\n\nI'm not really talking about writing a whole big library like appkit, I'm just saying that instead of putting all you code into Mosby directly, we could simple publish those classes as its own artifact (with having a dependency to Mosby).\nDoes that all makes sense for you?\n. I think we can add this but in a separate module in Mosby 3.0 . Still not sure about the naming...\n. Regarding naming: Content Loading Error Success  (CLES) ? Doesn't sound that nice in my ears but nothing better came into my mind until now ... not sure ...\n. Thanks for your hard work! Looks good so far. Could you please update the Gradle wrapper to 2.14.1.. It's not building on travis.\nWhat about ViewState support?\n. You also have to set the version in .travis file\n. Sorry, i'm not on the pc right now. But I will take this over. No worries,\nI will merge your pull request tomorrow and fix travis afterwards\nLeonardo Ferrari notifications@github.com schrieb am Mo., 24. Okt. 2016,\n21:22:\n\nHey man, sorry for the several builds, I'm new to Travis...\nI can't figure out what's going on, could you help me on this ?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/pull/170#issuecomment-255839151, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrsreEaM8mhBQodOi0WMcyS_d1QAYks5q3QV8gaJpZM4KfBJo\n.\n. Why not using lightcycle? It can be used together with mosby\n. I'm not sure if I understood what you are asking for. What would you like to add to mosby and why?\n. I think adding this is not important anymore, is it?. Sorry, I meant the feature. Not really in MVP / ViewState but with new MVI module this whole ViewState stuff is not needed anymore .... You can override animateContentViewIn()\nhttps://github.com/sockeqwe/mosby/blob/master/mvp/src/main/java/com/hannesdorfmann/mosby/mvp/lce/MvpLceActivity.java#L112\n. Sure, go ahead! Thanks for asking! Please post the link once published,\nwould love to learn from you / see how you use it\n\nSakis Kaliakoudas notifications@github.com schrieb am So., 13. Nov. 2016,\n14:48:\n\nHello,\ndo you mind if I use the snapshot v3.0 version of\ncom.example.mvp.MvpNullObjectBasePresenter\nin one of my open source projects? It's going to be a template project\nthat uses the usual MVP with mosby, RxJava, Dagger 2 etc.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/174, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrsJ5A3mRFhr-Oa762piXag3JL_Jpks5q9xUmgaJpZM4Kwsey\n.\n. Thanks for coming back! I will take a look this week!\n\nSakis Kaliakoudas notifications@github.com schrieb am So., 12. Feb. 2017,\n15:18:\n\nHey pal, I just released that project I was talking about:\nhttps://www.reddit.com/r/androiddev/comments/5thahs/open_source_android_app_with_loads_of_goodies_and/\nLooking forward to your feedback : >\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/174#issuecomment-279221526, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrrPzKsNBxzf62O5u3Coa1TYFzPfdks5rbxSmgaJpZM4Kwsey\n.\n. thanks!\n. Hm ... Thanks for reporting, i will take a look tomorrow\n\nRob Krater notifications@github.com schrieb am Do., 17. Nov. 2016, 21:32:\n\nWhile try to build the mail sample I get this error:\napp/src/main/java/com/hannesdorfmann/mosby/sample/mail/statistics/StatisticsDialog.java\nError:(21, 45) error: cannot find symbol class MvpViewStateDelegateCallback\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/176, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrvFakvDZX0oq5if6k8RjxslvRKWNks5q_LnugaJpZM4K1xiZ\n.\n. Hi,\nI'am not able to reproduce this issue. \nThe sample mail app compiles without any issues with the current master branch.\n. The current master branch contains the upcoming major 3.0 version. This class was named differently in 2.x version. I have to dive into the git log to get the Version 2.0 name .\n\nMeanwhile you could also use the 3.0.0-SNAPSHOT version. Hi, \nyou are using the wrong ViewState Type I guess. Are you using ParcelableDataLceViewState? If your \"data\" is an array list you better use ArrayListLceViewState or CastedArrayListLceViewState. That sounds really strange, but I'm pretty sure that this is not mosby related per se. I.e. does both screens use the same \"model\" object? if yes, then this one may inform both presenters of both activities accidentally?  Or do you use an Eventbus which triggers displaying an errorview somehow?\nI would suggest to set a breakpoint in your Activity showError() method to see when this method will be triggered. Then you see the call hierarchy in debugger and you can trace back who and why has caused the activity to show the error view.. Thanks for the detailed information. Unfortunately I can't really say whether or not this is an mosby ugg. Could you try to run your Unit Test with a debugger attached and set a breakpoint in UserDetailsActivity.oncreate() before calling super.onCreate()? and step into the super method and so on to check where exactly this cast exception comes from.\nThanks. > at com.hannesdorfmann.mosby.mvp.MvpActivity.onCreate(MvpActivity.java:41)\nbut then I would expect that this will be the root of the stack trace, but actually the cast exceptions seems to happen in \nat android.app.Activity.getWindow(Activity.java)\nat android.support.v7.app.AppCompatDelegate.create(AppCompatDelegate.java:185)\nHence I'm asking you to add a debugger and step over the hierarchy. Hm, really strange ... At first glance it doesn't seem to be Mosby related ...\nCould you test if this error also occurs with support library version 24.x.y. Maybe it is an issue with robolectric and support library 25.x.y. is this sample project hosted somewhere, so that I could take a closer look at the unit test?. I think this should be fixed with Robolectric 3.2.1. Fix is available in latest snapshot. Thanks for opening this issue and for your detailed code.\nI, personally, prefer the \"convention over configuration\" approach. The \"convention\" is that there must be views with those predefined ids. Otherwise, don't use this Lce class but rather write your own class.\nI'm a little bit concerned that once we start to introduce an annotation based solution for that, Annotations will take over too much, i.e. should we then add an annotation to define the xml layout used for setContentView() etc. Or what about specifying annotations for the error view message. The we could add an annotation for R.string.foo_error_message and so on, then one day we might need to display different error messages for different exceptions types, so we have to add annotation support for that too and suddenly we have \"misused\" annotations for \"logic\" stuff, which is harder to test and harder to customize and bring in custom behavior.\nI definitely would prefer to make that customizable through code rather then annotations, but I'm open to discuss that. See also related issue #109 .. hello,\nwell if you want to use a \"MockPresenter\", then you createPresenter() method must return such a MockPresenter during testing and your RealPresenter in production.\nSo the question is how to change the return value of createPresenter()? If your code looks like this:\n```java\nclass MyFooActivity extends MvpActivity {\n...\n   public FooPresenter createPresenter(){\n        return new FooPresenter();\n   }\n}\n``\nthen you were not able to \"dynamically (at runtime, at the timecreatePresenter()is executed)\" return anotherMockFooPresenterbecause you have hardcodedreturn new FooPresenter()`.\nSo in general: You can't hardcode new FooPresenter() but you have to find a way to \"dynamically\" instantiate a presenter. Something like this would work:\n```java\nclass MyFooActivity extends MvpActivity {\n...\n   public FooPresenter createPresenter(){\n        return ((FooApplication) getApplication()).getPresenterFactory().getFooPresenter();\n   }\n}\n```\nand then during unit test you have to create and use FooTestApplication extends FooApplication which overrides getPresenterFactory() to return a factory that then eventually returns MockFooPresenter when calling getFooPresenter(). Last you have to ensure that FooTestApplication is used during testing instead of the \"real\" FooApplication. This is done with a custom JUnit Test Runner or JUnit rule.\nTypically Dependency Injection libraries like Dagger are used to solve this kind of problem.\nWith Dagger2 your code may look like this:\n```java\nclass MyFooActivity extends MvpActivity {\n...\n   public FooPresenter createPresenter(){\n        return DaggerFooComponent.create().getFooPresenter();\n   }\n}\n```\nWhile testing Dagger will return a Mock Presenter in getFooPresenter() whereas in production it returns the real foo presenter.\nIf you are already familiar with dagger, then maybe you are wondering how you can provide a MockFooPresenter. In that case I strongly recommend to take a look at Artem Zinnatullins awesome sample project: https://github.com/artem-zinnatullin/qualitymatters\nThe trick is that the \"main\" dagger component is composed in QualityMattersApp extends android.app.Application and during testing another instance QualityMattersIntegrationTestApp extends QulityMattersApp is used (custom test runner or junit rule) which then composes the dagger component with the mock components:\nhttps://github.com/artem-zinnatullin/qualitymatters/blob/master/app/src/integrationTests/java/com/artemzin/qualitymatters/QualityMattersIntegrationTestApp.java#L23\nAnother thing to note is that, if you just don't want to hit the real server, then you should consider mocking the http connection with the server or use a mock web server (instead of mocking the Presenter). okhttp offers a MockWebServer and Artem Zinnatullin also has a great example for that: https://github.com/artem-zinnatullin/qualitymatters/blob/master/app/src/integrationTests/java/com/artemzin/qualitymatters/integration_tests/api/QualityMattersRestApiIntegrationTest.java#L33\nHappy testing!. View id's are configureable in upcoming  3.0. you can override createLoadingView() , createErrorView() and createContentView(). You are still forced to use TextView for errorView.\nSee the thing is MvpLceFragment is tailored for a very specific use case. If you have different requirements then you should write your own implementation and not use MvpLceFragment. Sorry, this was a little bit misleading (and I haven't provided any real explination).\nBasically, Mosby internally calls MviActivity.setRestoreViewState(true) and  MviActivity.setRestoreViewState(false) to inform the Activity that MviActivity.render(model) method might be invoked because the view gets reattached like this:\n```java\nclass MyActivity extends MviActivity {\n  private boolean restoreViewState;\n@Override \n  public void setRestoreViewState(boolean b) {\n     this.restoreViewState = b;\n  }\n@Override\n  public void render(MyModel model) {\n      if (restoreViewState){\n          // render slightly different (i.e. don't run animations)\n      } else { \n        // render as usual\n      }\n    }\n}\n```\nThe only real use case I can think of is to NOT to run some animations when reattaching the view (i.e. after screen orientation change).\nThe question of this issue is that: setRestoreViewState() might not be a good name because of ViewState in the name. I'm not sure how people will name their model classes\n. What about calling this method just setRestoreState(boolean) ... just a generic / general name .... Because the render method is called from presenter, but the presenter has\nno knowledge whether or not render() by i.e. screen orientation change\nVasilis Charalampakis notifications@github.com schrieb am Do., 9. Feb.\n2017, 17:07:\n\nWhy do you want to keep setRestoreState(boolean) and not give this\nboolean on the render method? In case someone wants a more sophisticated\nlogic on `setRestoreState(boolean) ?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/184#issuecomment-278687587, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnro3IWQh19kKDTySonJ99kSPzhQuxks5raznFgaJpZM4LdrtG\n.\n. https://www.gitbook.com seems to be a great tool for writing and hosting docs. \nMoving markdown from jekyll to gitbook should be easy. Thanks for your feedback. I think you are right. At the moment I tend to make the visibility of getViewStateObservable() protected, so that in the 1% of cases you can make this public.\n\nWhat do you think about that?. I think it is the best to use the visibility modifier \"workaround\" to be flexible enough for any further use cases we havent thought about yet. \nThank you all for your input! Really appreciated!. I have changed mind : getViewStateObservable() has public visibility in upcoming 3.0 release. \nMainly for unit testing reasons:\nnow you can simply write unit tests for presenter by accessing the presenters observable which makes unit testing more convenient. . oops, forgot to update this:\nFinally I have changed mind again: getViewStateObservable() has protected visibility in 3.0.\nTesting can be done easily even without getViewStateObservable(). Thanks for your feedback @wrparrish  and @mkoslacz . I will follow your advice and \"only\" support Observable type.. Indeed, something went wrong while uploading this artifact. I have pubished that now again. Should work now. Thanks for reporting!. Thanks for your work and reviewing my code. You are right, this is a serious issue.\nHowever, I'm thinking about fixing this issue in another way:\nWith your suggested solution the Presenter will also be destroyed in onDestroy(), but theoretically the presenter should not be destroyed because on an activity restart onStart() onStop() should be called but not onCreate() nor onDestroy().\nSo I think it is better to do the following:\n1. onCreate() (maybe even better onPostCreate() ) create the Presenter\n2. onStart() attach the view from presenter\n3. onStop() detach the view from presenter\n4. onDestroy() do the clean up which may \"destroys\" the presenter\nBy doing so, we ensure that the Presenter \"survives\" Activity restarts. What do you think? Have I missed something?. I have merged your request, and will apply the other changes I have in mind. thanks!\nEdit:\nTurn's out those changes I had in mind are not really helpful.\n. Turns out that this is actually not a Bug of Mosby, but rather a Bug of support lib / fragments with recreation and class loader. It only affects the mvi-sample.\nhttps://code.google.com/p/android/issues/detail?id=196430. https://code.google.com/p/android/issues/detail?id=232471. Do you use a Fragment? Activity? or ViewGroup? Or is it reproducible in the sample application?. Yes, this is a bug, thanks for reporting!\nI will try to fix it tomorrow.. Use inheritance, i.e. LocalDatabaseVideoListFragment extends VideoListFragment and then override the createPresenter method.. We stick with the name MviPresenter. Which version of Mosby are you using?\nmanabreak notifications@github.com schrieb am Sa., 21. Jan. 2017, 12:09:\n\nI ran into this problem when using MvpNullObjectBasePresenter. When a\nfragment is destroyed, the following error crashes the application:\njava.lang.ClassCastException: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType\n    at com.hannesdorfmann.mosby.mvp.MvpNullObjectBasePresenter.detachView(MvpNullObjectBasePresenter.java:38)\nTook a quick glance at the source, but didn't see a solution right away. I\nthought it was because my views used two generic types for the presenter (P\nextends MvpPresenter & Refreshable), but after taking the other type\nout, the problem persists.\nThe problem happens when this fragment gets destroyed:\npublic class InboxFragment extends MessageBaseFragment {\n    @NonNull\n    @Override\n    public InboxPresenter createPresenter() {\n        return new InboxPresenter(...);\n    }\n}\nMessageBaseFragment looks like this (unrelevant code omitted):\npublic abstract class MessageBaseFragment extends BaseMvpFragment implements MessageView {\n    ...\n}\nAnd the BaseMvpFragment is just a small container for injected\ndependencies:\npublic abstract class BaseMvpFragment> extends MvpFragment {\n    ...\n}\nOkay, moving on, the InboxPresenter:\npublic class InboxPresenter extends BaseMessagePresenter {\n    ...\n}\nAnd BaseMessagePresenter:\npublic abstract class BaseMessagePresenter extends MvpNullObjectBasePresenter {\n    ...\n}\nFinally, MessageView:\npublic interface MessageView extends MvpView {\n    ...\n}\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/194, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrpN6FsubxJkQ-4d6O0sMyPwIV6BFks5rUedjgaJpZM4LqCdq\n.\n. This should be fixed with 3.0.0 snapshot. Can you try if this is fixed\nwith  3.0 snapshot?\n\nmanabreak notifications@github.com schrieb am Sa., 21. Jan. 2017, 12:45:\n\nI'm using 2.0.1.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/194#issuecomment-274256810, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrqoEeQsXMUDPG2M6pDDzPp09zZcSks5rUe_rgaJpZM4LqCdq\n.\n. \nYou also have to add the url to the snapshot repository:\n\n```gradle\nallprojects {\n  repositories {\n    ...\nmaven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" }\n\n}\n```\n. And the package  name of all classes has been changed from com.hannesdorfmann.mosby to com.hannesdorfmann.mosby3\nSimply do a search and replace in Android Studio to change the package name in your classes import statements.. Back when I started working on this RxRelay2 wasnt available. However, there are two big disadvantages when switching to Relays (and the first one of them is a real blocker):\n\nRxRelay breaks the Observable contract for onComplete(). This is critical for MviBasePresenter.intent() wrapper function. Let's say that you have View that wants to fire a loadDataIntent() intent like this:\n\n```java\nclass FooActivity extends Activity {\npublic Observable<Boolean> loadDataIntent(){\n      return Observable.just(true); // This also completes , so onComplete() is called\n\n}\n}\n```\nor something like this:\n```java\nclass FooActivity2 extends Activity {\nPublishSubject<Boolean>  loadData = PublishSubject.create();\n\npublic Observable<Boolean> loadDataIntent(){\n    return loadData;\n}\n\npublic void onResume(){\n    super.onResume();\n    loadData.onNext(true);\n   loadData.onComplete();\n\n}\n}\n``\n  If we would use RxRelay inMviBasePresenter.intent()then the Relay will simply ignore theonComplete` terminal.  Therefore, i.e. After a screen orientation change, the loadDataIntent() will fire again, although a onComplete() event has been sent before (but the internal relay ignored it). So with relays there is no way to complete a view's intent observable by sending a onComplete terminal event as specified by the Observable contract. \n\nWhile we could use BehaviorRelay internally for MviBasePresenter.subscribeViewState() I would like to avoid adding third party libraries. Just for this single subscribeViewState() method adding a third party library that we may (even if its unlikely) have to update / migrate and make a release of mosby once  a third party library changes (in the case of breaking changes, I know, very unlikely) is something I want to avoid in general. BehaviorSubjects is doing the job (in subscribeViewState())  good enough in my opinion so that there is no major improvement in switching to  BehaviorRelay.. Oops :)\nThanks for the fix!\n\nSnapshot containing this fix will be available soon.. 1. In a real world app you wouldn't put all that things into your Presenter but rather in a HomeFeedInteractor which handles all those intents and applies the stateReducer.  Maybe we should refactor that.\n2. I'm sorry, but I don't understand what exactly your question is / the purpose of this issue.\n. Got it! Yes that is not documented at all. I apologise. I will write add\nsome unit tests for the sample app and will beginn to write documentation\n/  github pages for MVI and Testing.\nBasically, to test a MVI presenter you have to do the following:\n1) Create a View Instance i.e. by using Mockito\n2) Instantiate your presenter\n3) call presenter.attachView(yourMockedView). This calls internally\npresenter.bindIntents()\n4) now your presenter is setup properly and bound to the view. Now you can\ninvoke the intent you want to test.\n5) invoking an intent will finally result in a view.render(model). Then you\ncatch this model and test it like Assert.assertEquals(expectedModel,\nreceivedModel)\nhussam789 notifications@github.com schrieb am Do., 26. Jan. 2017, 22:35:\n\nI understand, my question is could you provide an example for a unit test\nfor the presenter in MVI sample app (currently there are no tests for it)?\nOr can you give us any advice for writing a test for MVI pattern in general?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/197#issuecomment-275521236, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrthOoqvK0UWOBghXKDjkjZjUDdGvks5rWRGkgaJpZM4Luzh2\n.\n. Full example can be found here:\nhttps://github.com/sockeqwe/mosby/blob/master/sample-mvi/src/test/java/com/hannesdorfmann/mosby3/sample/mvi/view/home/HomePresenterTest.java\n\nWill also put more infos about testing in documentation. While I can reproduce it (I see multiple instances of ShopplingCartOverViewFragment for example) in the heap dump, I think this is a false alarm. I might be wrong, but to me it seems that GC hasn't run yet. Therefore the \"old\" instances are still in the heap dump.\nIf you run GC manually (and wait a few seconds) and then make a heap dump again you will see that there is only one instance remaining for each of them. Can you please verify/confirm the same behavior on your device/pc?\nAlso, Android studio's \"leak detector\" nor LeakCanary have reported a leak in the sample app.. No worries, thanks for reporting anyway!. Thanks for Reporting, I will take a look. I guess it is just a bug in the\nsample app.\nTo Re notifications@github.com schrieb am Di., 31. Jan. 2017, 15:57:\n\nThe navigation in the menu stops working after selecting a category and\nleave the app with a back press and returning to the app.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/199, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrnmUtI7mhe442sOACO783ZiqzwrYks5rX0vHgaJpZM4LyvNC\n.\n. > it looks like presenter keeps some registry of intents that were observed by presenter, and on view reattach it connects it back?\n\nYep, that's basically it. \n\nintent() function creates internally a PublishSubject and subscribeViewState() internally creates a BehaviorSubject which are stored in his internal \"registry\". The \"registry\" is basically just a List.\nIf you take a look at the source code of intent() you will see that actually this function takes a parameter intent(ViewIntentBinder) \nhttps://github.com/sockeqwe/mosby/blob/master/mvi-common/src/main/java/com/hannesdorfmann/mosby3/mvi/MviBasePresenter.java#L364\nViewIntentBinder is actually just a interface with a bind(View) method.\nbasically writing something like \njava\nprotected void bindIntents(){\n    intent(FooView::someIntent());\n}\nis actually\njava\nprotected void bindIntents(){\n    intent(new ViewIntentBinder() {\n        Observable<Something> bind(FooView view){\n            return view.someIntent();\n       }\n    });\n}\nintent(ViewIntentBinder) adds this ViewBinder to the internal \"Registry\" and subscribes it with a PublishSubject. Whenever a View gets attached, we basically iterate over this \"Registry\" (List) and call viewIntentBinder.bind(newAttachedView)\nDoes that answer your question?. Exactly!\nIt is guaranteed that view which is passed to bind(View) is never null.\nAnd yes, bindIntents() just create the ViewIntentBinder objects. The\nViewIntentBinder.bind(view) method is called later to actually bind the\nviews intent. Also these ViewIntentBinders will be called again when the\nview gets reattached to the presenter (but bindIntents () isn't called\nagain while reattaching the view, because we can reuse the ViewIntentBinder\nthat we have created previously)\njungornti notifications@github.com schrieb am Do., 2. Feb. 2017, 07:10:\n\nOh, i think, i got it, when it is called:\nprotected void bindIntents(){\n    intent(new ViewIntentBinder() {\n        Observable bind(FooView view){\n            return view.someIntent();\n       }\n    });\n}\nthen the instance of ViewIntentBinder is created, and that concrete\ninstance knows what concrete intent to return from the given view, so\nthere are no closures. And because of that, we can't talk about NPE,\nbecause non null V view is passed to that concrete ViewIntentBinder\ninstance in bindIntentActually.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/200#issuecomment-276876760, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrrysAzpdKBObFDZosEA3U8caTxSyks5rYXNFgaJpZM4Lz5jw\n.\n. You are welcome\n\njungornti notifications@github.com schrieb am Do., 2. Feb. 2017, 09:54:\n\nHannes, thank you very much for your time on explanation, you are a great\nman! Now i understood.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/200#issuecomment-276900987, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrjVEFe5fXUlY2_joVPASyaM3CNi-ks5rYZnPgaJpZM4Lz5jw\n.\n. the other two intents cause the business logic to change, but the result (the changed model) is pushed back by the loadDetails observable.\n\nTake a look at \n```java\npublic class DetailsInteractor {\n  private final ProductBackendApiDecorator backendApi;\n  private final ShoppingCart shoppingCart;\nprivate Observable getProductWithShoppingCartInfo(int productId) {\n    List> observables =\n        Arrays.asList(backendApi.getProduct(productId), shoppingCart.itemsInShoppingCart());\nreturn Observable.combineLatest(observables, objects -> {\n  //\n  // This will invoked again whenever a item \n  // has been added or removed from shopping cart\n  //\n  Product product = (Product) objects[0];\n  List<Product> productsInShoppingCart = (List<Product>) objects[1];\n  boolean inShoppingCart = false;\n  for (Product p : productsInShoppingCart) {\n    if (p.getId() == productId) {\n      inShoppingCart = true;\n      break;\n    }\n  }\n\n  return new ProductDetail(product, inShoppingCart);\n});\n\n}\n/*\n   * Get the details of a given product\n   /\n  public Observable getDetails(int productId) {\n    return getProductWithShoppingCartInfo(productId)\n        .subscribeOn(Schedulers.io())\n        .map(ProductDetailsViewState.DataState::new)\n        .cast(ProductDetailsViewState.class)\n        .startWith(new ProductDetailsViewState.LoadingState())\n        .onErrorReturn(ProductDetailsViewState.ErrorState::new);\n  }\npublic Completable addToShoppingCart(Product product) {\n    return shoppingCart.addProduct(product); // This will trigger again combineLatest from above\n  }\npublic Completable removeFromShoppingCart(Product product) {\n    return shoppingCart.removeProduct(product); // This will trigger again combineLatest from above\n  }\n}\n```\n. I get your point but I'm not sure if this is a issue related to Mosby.\nI think this is a general Java single inheritance and Generics issue or do you have a concrete solution / advice how to fix this issue in Mosby?\nFrom my point of view the issue is:\njava \ninterface Presenter extends SingleGridContract.Presenter\nand that SingleGridContract.Presenter is bound to SingleGridContract.View as described in the interface definition:\njava\ninterface SingleGridContract.Presenter extends MvpPresenter<SingleGridView>\nSo yes, having something like this:\njava\ninterface Presenter extends SingleGridContract.SingleGridPresenter,   MvpPresenter<ListGridContract.View> { }\nwould be the solution, however, this is not how java generics works because Generics are erased at compile time.\nAgain, I don't think that this is Mosby related.\nHere are some thoughts how to prevent this from the very beginning:\nYou said that basically your ListGridContract.Presenter extends from SingleGridContract.Presenter just because you want to share business logic. BusinessLogic is not meant to live in a Presenter. \nExtract Business Logic into a own Class. Then you can easily include that business logic in both, SingleGridContract.Presenter and ListGridContract.Presenter. Favor composition over inheritance.\nMixins could solve single inheritance issue so that you don't have to extend a class, but rather add a interface to get a concrete implementation in. Unfortunately Mixins (interfaces with default methods) are only available with java 8 or Android API 24 + Jack. Kotlin supports Mixins (also prior Android API 24). \n. > bindIntents() executed only once and selectMenuItem() executed each time,\nwhen activity recreated\nSounds like the expected behavior, what exactly is the unexpected/ buggy\nbehavior?\nIvan Balaksha notifications@github.com schrieb am Mi., 1. Feb. 2017,\n21:50:\n\nI use rxbinding 2.0.0-snapshot and found 1 strange bug with\nRxBottomNavigationView and MVI.\nclass MainPresenter : MviBasePresenter() {\noverride fun bindIntents() { val menu = intent(MainView::selectMenuItem)\n.map { when(it.itemId){ R.id.search -> MainViewState.Search R.id.favorite\n-> MainViewState.Favorite R.id.profile -> MainViewState.Profile else ->\nMainViewState.Messages } } .startWith { MainViewState.Search }\nsubscribeViewState(menu,MainView::render) } }\ninterface MainView : MvpView{ fun selectMenuItem() : Observable\nfun render(state: MainViewState) }\n`\n...\noverride fun createPresenter(): MainPresenter {\nreturn MainPresenter()\n}\noverride fun selectMenuItem(): Observable {\nreturn RxBottomNavigationView.itemSelections(bnvMain)\n}\noverride fun render(state: MainViewState) {\n...\n}\n...\n`\nbindIntents() executed only once and selectMenuItem() executed each time,\nwhen activity recreated\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/202, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrhvm1iBgYJ5odDKc87PZNujz1DuAks5rYPAZgaJpZM4L0Xpy\n.\n. So selectItemMenu() doesn't work anymore after a screen orientation changes, right? What is MainView extending from? Activity or Fragment, FrameLayout etc?. I cant see anything wrong. Does RxBottomNavigationView observalbe ever emit\na onComplete() event. Could you just add a log ?\n\noverride fun selectMenuItem(): Observable {\nreturn RxBottomNavigationView.itemSelections(bnvMain).doOnComplete {\nLog.d(\"Foo\", \"completed\")}\n}\nIvan Balaksha notifications@github.com schrieb am Mi., 1. Feb. 2017,\n22:19:\n\nclass MainActivity : MviActivity(), MainView\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/202#issuecomment-276785590, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnruC2zr3gTYni75mpjJCXmsozoJgLks5rYPbxgaJpZM4L0Xpy\n.\n. Is there a way I could take a look at your concrete code to debug it? Is your code public available on github?. Thanks. Indeed, there must be an internal bug of MviBasePresenter. I havent found the issue yet, but it is really strange that this works in the mvi sampe app (from this repository) and not in your demo app.\n\nHowever, it is an internal bug for sure, I'm working on it.. Ok, I found the bug. Actually it is not Mosby related.\nThe issue is the startWith() operator which blocks because it never emits an item to start with. Don't ask me how startWith(ObservableSource) is used properly.\nUsually you should prefer startWith(concreteValue):\njava\nclass MainPresenter : MviBasePresenter<MainView, MainViewState>() {\n    override fun bindIntents() {\n        val menu = intent(MainView::selectMenuItem)\n                .map {\n                    when(it.itemId){\n                        R.id.search -> MainViewState.Search\n                        R.id.favorite -> MainViewState.Favorite\n                        R.id.profile -> MainViewState.Profile\n                        else -> MainViewState.Messages\n                    }\n                }\n                .startWith(MainViewState.Search) // This is a concrete value to start with\n        subscribeViewState(menu,MainView::render)\n    }\n}\nLast but not least I just wanted to warn you that navigation and how you are aproaching Navigation may lead to some (state) issues because FragmentManager and BottomNavigationView have their own internal state (which they will restore by their own).\ni.e. you have a method like this which you call from your view's render() method:\nkotlin\nfun changeFragment(fragment: Fragment) {\n        val transaction = supportFragmentManager.beginTransaction()\n        transaction.replace(R.id.fragment_container, fragment)\n        transaction.commit()\n    }\nSo far that's fine, but after a screen orientation change (rotate your device) FragmentManager will automatically restore the previous Fragment AND MviBasePresenter will call render() again with the latest value before the screen orientation change which then will call changeFragment() again and replace the previously restored Fragment (restored by FragmentManager) with a new instantiated Fragment. Keep that in mind.. Thanks!. thanks!. Thanks!. Hi,\nIn your presenter's bindIntent() method you are using the startWith()\nincorrect\nYou you should use .startWith(new FeedItem(...)) rather than\nstartWith(items -> new FeedViewState(...)) (the later one is never emitting an item).\nBtw. you just need to include \ngradle\ncompile 'com.hannesdorfmann.mosby3:mvi:3.0.0-alpha3'\nin your dependencies. The others are not required with MVI. Hi, \nwith Mosby you can assume that all UI Widgets are available before the presenter is instantiated (I have to take some time to make that more clear in the documentation).\nfor example, in Activity.onCreate() you call setContentView(R.layout.my_layout) and then you can use  findViewById() etc. to get references to your UI widgets. Mosby guarantees that presenter is created after Activity.onCreate() (presenter will be created in Activity.onStart())\nThe same is true for Fragments: Mosby guarantees that presenter is instantiated after Fragment.onCreateView() and ViewGroups.\nNevertheless, if you create your UI dynamically and you create UI widgets after Presenter is instantiated it is not a problem at all because all that must exist before the Presenter is instantiated is the Observable that represents the intent and NOT your dynamically created UI widget per se.\nSo for instance you could use Subject i.e. PublishSubject  like this:\n```java\nclass MyActivity extends MviActivity implements MyView {\n  private PublishSubject<String> searchIntentSubject = PublishSubject.create();\n\n   ...\n   @Override  // Defined in MyView interface\n   public Observable<String> searchIntent() {\n        return searchIntentSubject;\n   }\n\n   ...\n  @Override \n  public void onResume() {\n      super.onResume();\n      // This is called after presenter is instantiated and intents are bound\n      EditText editText = new EditText(this);\n      editText.addTextChangedListener(new TextWatcher() {\n\n         public void onTextChanged(String s) {\n             searchIntentSubject.onNext(s);\n         }\n         ... \n     }\n      containerLayout.add(editText);\n  }\n\n}\n```\nHope that helps.. You may find https://github.com/JakeWharton/RxRelay useful (just in case that you haven't seen it before). Really strange,\nI never seen such a behavior before.\nYou could try to use alpha4 rather than snapshot. Does that solve your\nissue?\nmanabreak notifications@github.com schrieb am Mi., 8. Feb. 2017, 08:17:\n. I apologize, i will manually upload a new snapshot\nmanabreak notifications@github.com schrieb am Mi., 8. Feb. 2017, 08:32:\n\nThe alpha4 seems to solve the issue. It's really weird that the SNAPSHOT\ndoesn't seem to have the interfaces.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/208#issuecomment-278251234, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnroGxHUXWlFpS9tcBX0OdV1mpBfraks5raW-ggaJpZM4L6d5r\n.\n. I have redeployed the SNAPSHOTS. If you have 2 minutes, could you please check and verify if that this solves your reported issue?. I have no clue what happened and I can't reproduce it. I close the is issue for now. If you have any problem in the future please reopen this issue. I would prefer to keep Mosby very slim. I don't want to push people to have exactly one render() method, that would be very framework-ish and I see Mosby more as a little library. I would like to see that people can use Mosby as a library to build their own \"framework a like\" architecture on top of it if they want to. \n\nFor example, if someone prefers calling view.showLoading(), view.showContent()from Presenter this is still possible inMviBasePresenter`. \n```java\ninterface MyView extends MvpView {\n    public void showLoading();\n    public void showData(Foo foo);\n}\nclass MyPresenter extends MviBasePresenter{\nprotected void bindIntents(){\n        ...\n       Observable observable = ... ;\n       subscribeViewState( observable, { view, model -> \n              if (model.isLoading()) \n                  view.showLoading();\n             else \n                  view.showData(model.getData);\n        }\n   }\n}\n```\nI don't want to limit people. Freedom is quite important for me and the driver of innovation / evolution.\nSo I'm open to discuss this with the community, \nbut from my point of view it doesn't make much sense to limit people and therefore I don't see a good reason to introduce a MviView\nBtw. you could introduce a MviView with a render() method just for your project.. I think we agree that this is something a user of Mosby should do on top of Mosby. If not, feel free to reopen this issue. Yes that's true, but what is your question?\nBtw. Mosby 3 uses such a static map delegate (more or less). Yes, thats easy, i will add that one too.\nBtw. Please report mosby-conductor related issues in mosby-conductor repo / issue tracker\nhttps://github.com/sockeqwe/mosby-conductor/issues. No problem! Btw. the code from above is exactly how  it should look like.\nDo you wanna send a pull request? Then a snapshot version will be build\nautomatically\nMFlisar notifications@github.com schrieb am So., 12. Feb. 2017, 12:26:\n\nSure, just forgot that it's another repo\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/211#issuecomment-279211990, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrqPtNxqxojfXAJdJGy5ae_MQMRXbks5rbuxigaJpZM4L-ca2\n.\n. I have to apologize, \nI simply haven't found time to refactor MVP modules.\nFor the final release 3.0 release both, MVI and MVP will use the same PresenterManager from the presenter manager module.. The implementation of the presenter manager in MVP currently (3.0 SNAPSHOT) uses a retaining Fragment. The problem is that is is not guaranteed when this retaining Fragment is committed. Perhabs that this happens after another MVP fragment is already committed. No guarantees.\n\nThe MVI implementation basically uses a static map with some additional tricks to ensure that it is scoped to the parent activity. \nThis also unifies the way a presenter is stored internally. Activity, Fragment, retaining Fragments, child Fragmetns, ViewGroups (like MvpFrameLayout) now all use this static map.\n\nWhy have you decided to abandon MVP retention mechanisms in the MVI Fragments and Activities?\n\nNot sure what you exactly mean / referring to, but I guess you mean that there is no shouldRetainInstance() / isRetainInstance() method any more? This has now simply be moved into the corresponding MviDelegate and is configureable with a constructor parameter.\n\nDo you plan to do the same in the MVP ones?\n\nYes, MvpDelegates will take that responsibility similar to MviDelegate\n. Hm, haven't thought about it too much yet, but I could think of the following solution:\nModel your error ViewState so that it contains all required data to retry.\nI.e. let's say that your Interactor needs some kind of id that is also required when retrying (by clicking on the retry button). Then your ViewState for error must also contain this id. Something like this:\njava\nclass MyViewState {\n     String id;\n     Throwable error;\n     // ...\n}\nThe rest really depends on how you prefer to model your intents.\ni.e. you could have two intents like this:\n```java\ninterface MyView {\n  Observable  loadDataIntent(); // Fires in activity.onResume() for example\n  Observable retryLoadingIntent() // Fires when retry button clicked\n}\nclass MyPresenter extends MviBasePresenter {\nprotected void bindIntents(){\n      Observable<String> loadIntent = intent(MyView::loadIntent);\n      Observable<String> retryIntent = intent(MyView::retryLoadingIntent);\n      Observable<String> merged = Observable.merge(loaodingIntent, retryIntent);\n\n    Observable<MyViewState> vs = merged.flatMap( \n                                                         id -> interactor.load(id)\n                                                                 .onErrorRetrurn( error -> new MyViewState(error, id) )\n                                                                ...\n      );\n\n   subscribeViewState(vs, MyView::render);\n\n}\n}\n```\nOr you could already do the merging of both observables in the View Layer like this:\n```java\nclass MyViewAcitiyt extends MviActivity implements MyView {\nPublishSubject<String> loadSubject =  ... ; // i.e. fires in onResume()\nPublisSubject<String> retrySubject =  ... ; // fires on retry Button click\n\n...\n@Override\n  public Observable loadIntent(){\n      return Observable.merge(loadSubject, retrySubject);\n  }\n}\n```\nI tend to prefer the first option because it is more explicit about the existence of a retry mechanism: I just have to look at the view interface to know what the view can actually do. It's just a matter of personal preference I guess.\nP.S. Docs for merge() operator can be found here http://reactivex.io/documentation/operators/merge.html\nbtw. could you please post this question on stackoverflow too (and any further questions)? Because github is really bad to be indexed by search engines like google. I'm sure other will have this question too soon or later. Definitely more discoverable if it is put on stackoverflow (There is a Mosby tag on github).. Thanks for reporting. In upcoming 3.0 release a IllegalStateException will be thrown if no view has ever been attached before.. Isn't it much simpler to use RxJava Interop when creating the intent() method on View layer for example in your activity/fragment?. yes, I meant that the View interface already returns a v2 Observable. \nAnyway, converting my apps based on RxJava1 to RxJava2 was pretty straight forward. Basically it was a Replace in Path to replace\nimport rx\nto\nimport io.reactivex\ndefinitely an option to consider .... Thank you so much and for the detailed explanation! This explains a lot.\nI was under the illusion that the ClassLoader from the Bundle (which is set activity or fragment during restoration) will be used somehow \"magically\" internally as the view's state is restored from that bundle.\nAgain, thank you very much!. This is an excellent question!\nI'm afraid, I don't have a good answer for that. \nNevertheless, from what I can tell you from your probelm description is that I have made 2 observations that might help you solving your problem:\n1. is the Form really needed after having clicked on the button? I mean, couldn't just this Form-View be closed when the next screen appears so that this problem (user comes back to this Form-View from the backstack) can be avoided from the very beginning.\n2. It seems that navigation is a core element of your business logic. So probably, Navigation should be part of your business logic. I'm not sure how this could be implemented the best way, but probably something like this (Interactor that interacts with a \"Navigator\" and \"FormValidator\" could work (just to give you an idea):\n```java\nclass FormInteractor {\n    private Navigator navigator;\n    private FormValidator validator;\nObservable<FormViewState> validateForm(String fieldA, String fieldB, ...) {\n     return validator.validate(fieldA, fieldB, ... )\n                 .doOnNext(state -> if (state.isValid()) navigator.navigateToNextScreen() )\n}\n\n}\n``\n Also, a flag likenavigateToNextScreenin aViewStateseems a little bit strange because \"navigating to the next screen\" is actually not effecting the current Form-View at all, right? I see this as a hint that this should not be part ofFormViewState`.\n\nSome additional thoughts about Navigation:\nShort version:\nI think navigation is out of scope of such patterns like MVP, MVVM and MVI. They are only about separating View from Model. Usually I handle navigation in the view layer. i.e if a user clicks a button to start FooActivity then I would directly call startActivity(FooActivity.class) in View layer. Usually, there is no need to let this information sink down to your business logic through an MVI intent() since this will not change the state of any MVI view or business logic at all, right? But your case is slightly different. \nLong version:\nWell, in theory navigation could be handled pretty well with MVI since you could have one \"Model\" containing your navigation back stack. Whenever you want to navigate to another screen, the navigation back stack model would be changed (via an intent() of a View( and at the end of the observable chain there would be a \"Router\" which render(newNavigationStack) method would be called. But instead of rendering UI widgets it would \"just\" update the navigation stack. Again, in theory this would work well.\nIn practice, this is not trivial and hard to implement because android handles navigation stack by its own (i.e. Activity back stack), fragments are handled and restored by the fragment manager etc. So there are a lot of ugly \"side effects\", state handling and restoration that android internally does which makes inplementing such a \"Router\" with render(newNavigationStack) cumbersome and unpractical. Maybe this would work in an single Activity Application and using ViewGroups (instead of fragments etc) where you would be able to just swap out views when \"Router\" tells the single MainActivity to \"render(newNavigationStack)\". Hi there,\nMVI is ready. \nMVP (especially MVP-ViewState) has been refactored a little bit (separate branch MVP here on github). The refactoring is mainly completed but needs some little clean up. Also LCE components will be moved in a separate module. I would say 90% of that is already done and I have plans to finish that over the weekend. My plan is to make a final Mosby 3.0 release on Monday / Tuesday next week. \nI think you should go with latest 3.0-alpha version or wait until next week for the final 3.0 release ... There might only be a little change of ViewState (Generics) from 3.0-alpha to the final 3.0. Thanks! I will merge that as soon as I'm done with my current work (I'm doing some internal refactoring and I think it will cause less merge conflicts if I merge your pull request afterwards). Which app? Which version of Mosby? What's the exception? Could You Please\nprovide an error stacktrace?\nBayramInanc notifications@github.com schrieb am Mi., 8. M\u00e4rz 2017, 23:25:\n\nI did that for maybe 10 15 times, all of them crashed\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/221#issuecomment-285189828, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrsxAEz0AUO0gbIsbe3uwLntuBhHsks5rjyr3gaJpZM4MXXI_\n.\n. Good luck... Fingers crossed!\n\nBayramInanc notifications@github.com schrieb am Do., 9. M\u00e4rz 2017, 08:29:\n\n:) sorry, you are right, \u0131 will do that on saturday, because \u0131 have an\nimportant exam. One time, \u0131 failed in that course and don't want again.. :)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/221#issuecomment-285276109, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrvIS7GMpO3kXZ5vRLqFSW0EvTK44ks5rj6pzgaJpZM4MXXI_\n.\n. This is fixed now. Thanks for reporting!. Adapter is pure View layer. Map all interaction like a click on a button in a RecyclerView ViewHolder back to the Activity / Fragment and then let forward that to the Activity's / Fragment's presenter. \n\nRecyclerView are a little bit trickier because the ViewHolders can be recycled during scrolling etc.\nBy going the road back to the \"parent\" Activity / Fragment and the corresponding Presenter it is much easier and less error prone  to update a ViewHolder (i.e. with animations by using DiffUtils ). Take a ViewHolder just as a way to display a data object but don't add a Presenter for each ViewHolder to coordinate the ViewHolder. Really, just ensure that the ViewHolder gets a data object containing all information the ViewHolder needs to display but don't make this data object be \"controlled\" by a ViewHolders Presenter.  Otherwise, you end up with a mess because one ViewHolder gets update by his Presenter , maybe the ViewHolder has been recycled in the mean time, maybe a screen orientation change has occurred or maybe the \"parent\" Activity / Fragment Presenter has updated the adapter's whole dataset etc.\nDo yourself a favor and use only one Presenter \"coordinating / controlling\" the data ther RecyclerView should display by using \"parents\" Activity / Fragment Presenter.\nBtw. I would really appreciate if you would ask such questions on stackoverflow because github's issue tracker is not really well indexed by Google and therefore this question / answer is super hard to find for others. I regularly answer such Mosby related questions on stackoverflow.\nPlease copy this question to stackoverflow, so that I can copy my answer to this question there too to make it easier for others to find this question / answer. I'm pretty sure you are not the first developer having this quersion nor the last one. Stackoverflow helps a lot to make that questions discoverable. Many thanks in advance! . Thanks!. Thanks!. Thanks. Thank you. thanks!. > the backstack is lost and the app restart from the first controller\nSo the problem is that the whole back stack got lost? If yes, then this is not a Mosby issue. Mosby is not handling or changing conductor's router somehow internally. Mosby doesn't know about Conductor's Router at all. Then you should continue the discussing at https://github.com/bluelinelabs/Conductor/issues/253 as this seems to be a conductor issue.\nIf the back stack is restored properly by Conductor, but you are wondering why your ViewState is like starting the app for the first time, then this is the expected behavior.\nPer default, Mosby is not saving any ViewState information in Bundle. So Mosby is per default not surviving process death.\nPer default Mosby only save instance through screen orientation change and back stack navigation.\nTo do so you have to use a ViewState instance of interface RestorableViewState extends ViewState like ParcelableListLceViewState (if you use the LCE package) which may requires that all your \"model\" data implements the Parcelable interface too.\nBtw. I strongly recommend to update to viewstate-conductor:3.0.0. again, what exactly is the problem you are facing? \nIf I understand your description correctly:\n\nwhen i go back to home and force kill the application from android studio, when i select the application from list of apps, the backstack is lost and the  app restartfrom the first controller, and the saveinstancestate is null.\n\napp restartfrom the first controller, this is not a Mosby issue. As already said, Mosby is not changing Conductor Router. Mosby is not the cause that your app is starting with the first controller.. >My question is: who set the savedinstancestate to null\nNot Mosby. (nor conductor I guess. i think this is managed by the android OS / ActivityManager).\n\nAre you sure that i don't do anything for handle the recreation of backstack when i use mosby?\n\nI am sure\nDo you have your app open source on github so that I can take a closer look?. > wich are the classes that handle the recreation of the backstack when the app is recovered?\nMosby does not recreate the back stack. It's conductor who is recreating the backstack and instantites the controllers on the back stack. Again, Mosby has zero knowledge of the backstack or Router or any other Conductor components involved in backstack management.\nMvpViewStateController adds a feature so that the state of the UI Elements is not lost during screen orientation changes. More info here: http://hannesdorfmann.com/mosby/viewstate/ (the docs talk about fragments, but Conductor controller also recreates the view, so it's the same issue that is solved with ViewState feature)\nCan you post the code of your MainActivity?\n.  \u00af\\_(\u30c4)_/\u00af\nI can't see any issue here. Sorry, I can't help you.\nYou should continue to ask on conductor but if savedInstanceState is really null than this rather seems like some strange device behavior, because as far as I know conductor is not setting the savedInstanceState to null somehow. Actually, I think that it is not possible to set a bundle to null at all because this bundle is handed over to the Activity by the operating system and then activity is passing it to conductor. Same workflow when saving things (like the back stack of controllers) into a bundle. The bundle is created by the operating system and then hand over to Activity.onSaveInstanceState() and forwarded internally to Conductor which then saves the Router. I can't really see how a bundle could be \"set\" somehow to null.\nDouble check:\n- Is you app crashing somehow (do you see stack traces) when the application is killed?\n- Try it with a different device / manufacturer\nLast but not least,\ntry to build a little sample example with just 3-4 Controllers that reproduces this issue and attach it on https://github.com/bluelinelabs/Conductor/issues/253 Otherwise, it will be super hard to reproduce this issue somehow. Also try to build the same navigation hierarchy as you have in your real app like ViewPager and child routers as you have in your real app.\nSorry, I can't help you.  . Nice! That looks awesome. Thank you very much!. This is fixed with version 3.0.1\n\u9648\u84dd\u5ea6 notifications@github.com schrieb am Do., 30. M\u00e4rz 2017, 12:53:\n\nHello, my English is very poor...\nI need to preview\n[image: image]\nhttps://cloud.githubusercontent.com/assets/10044266/24500757/4a77925c-1579-11e7-84a3-c2ff3225b1ed.png\nIn my project:\n[image: image]\nhttps://cloud.githubusercontent.com/assets/10044266/24500900/f12b9aa8-1579-11e7-89e9-4b1d4c5278ff.png\nthank you\uff01\nMosby Version:3.0.0\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/230, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrhJyoaeMiJNmrcyK38MOZriqgTRxks5rq4mWgaJpZM4MuMQZ\n.\n. Thanks for this super helpful bug report!\nIndeed it seems like this is a bug in PresenterManager.\nI think it won't crash if you set keepPresenterInstance = true (constructor parameter of delegate)\n\nIndeed you have to delegate delegate.onViewDestroyed(), so that is another bug of the demo app.\nI will work on that right now, fix should be available soon.. Is fixed, thanks for reporting.\nFix is available in 3.0.2-SNAPSHOT (building right now on CI, available in about 20 Minutes)\nA stable 3.0.2 release to come tomorrow.. 3.0.2 has been released. \nThanks again for your very detailed bug report and sample repository to reproduce the bug (it was super helpful)!. Can you give me more information on how to reproduce the described issue?\nIf I have understood you correctly, you are using the mvi demo app as template for your own app, right? Is your app open source so that I can take a look at it to reproduce it?\nloadNextPage is triggered if the RecyclerView is scrolled to the end of the list.\nIf the RecyclerView only contains 1 Item then \"scrolled to the end of the list\" is triggered immediately because you are at the end of the list. Could this explain your issue? Then this is a implementation detail and you have to find a better way to detect \"scrolled to the end of RecyclerView\". Alternatively your ViewState could contain information whether or not there is a next page.\nbtw. It's strongly recommeneded to update to com.hannesdorfmann.mosby3:mvi:3.0.2. .filter(event -> !swipeRefreshLayout.isRefreshing()) \nI actually would like to demonstarate that pull-to-refresh and load next page is possible at the same time and the order of execution doesn't matter because the state reducer always produces the new state properly (regardless of order of exectuition).\n\nCould you give an example of combining categories if the pull-to-refresh event comes with products of an already existing category (which was already displayed)\n\nDo that in StateReducer. In the state reducer you take the previous state (previous list of items) and  the result of the pull-to-refresh (which is also a list of items). So then simply iterate over the list of items from the previous state and only add those items from pull-to-refresh result if not already present in the list of previous state items.. Thanks for reporting! Indeed, that is true, unlikely but in theory this could happen!\n Actually I wanted to deprecate isViewAttached() in 3.0.\nThe proper way is:\njava\nV view = getView();\nif (view !=null){\n    view.showHello(...);\n}\nWe could add a shorthand like this to MvpBasePresenter:\njava\nifViewAttached(view -> view.showHello(...));\nwhich internally uses View view = getView(); if (view  != null) { ... } as shown in the first code snippet.\nWhat do you think?. 3.1.0 deprecates getView() and isViewAttached()and adds ifViewAttached(). Thanks for your feedback!. > If someone ignores that then app crashing would be his own fault.\nYes but with a more concise API (especially in kotlin) like \nkotlin\nifViewAttached { view -> \n   view.doThis()\n   view.doThat()\n}\nwe can avoid pain like NPE. Hence I think the deprecation of isViewAttached() and getView() is justified. What are your concerns about ifViewAttached() or why would you like to stick with getView()?. yes but still this could happen (theoretically):\nkotlin\nview?.toThis()  // this is executed\n// gc runs and view == null\nview?.toThat() // this is not executed because view == null because of gc\nwhereas with ifViewAttached() its a do all in the lambda because view is guaranteed not to be null or don't execute the lambda at all. Also we have to take java users into account.\nAlso this API seems to me more consistent to what MvpQueuingBasePresenter offers: \nkotlin\nonceViewAttached { view -> \n   view.doThis()\n   view.doThat()\n}. Please define \"cancel\".\nDo you have a cancel button and once the user presses the button you want to cancel the observable from mLogin.buildUseCaseObservable()?\nThen probably Rx Java's takeUntil() operator is what you are looking for.\nhttp://reactivex.io/documentation/operators/takeuntil.html. I'm sorry, I'm not sure what you are aiming to implement, but basically you \"stop\" an observable if you unsubscribe from it. At least this triggers a signal that the observable should stop doing his work. Then it depends on the implementation whether or not it really stops the work or just \"ignores\" the onNext calls (\"ignore the results\"). I think that retrofit stops the http connection on unsubscribe. If you create an observable by your own, you may have to take that into account (and cancel the http request of your underlying http client manually).\nSince your question is a purely Rx Java question (and not about mosby) I encourage you to ask that kind of question on http://stackoverflow.com .\nJust a mosby related thing to note: If the user leaves your login screen permanently (i.e. clicks on the back button) then the observable chain established via intent(...) and subscribeViewState(...) is unsubscribed and stopped. So if you want that your upload continues even when the user navigates away from your Login screen you better put that upload logic in an Android Service (which has its own lifecycle and lives outside of the Activity / Fragment lifecycle).\nPlease ask this kind of questions of http://stackoverflow.com . I'm pretty sure there are many people who can answer RxJava related questions quickly.. Something like this should work:\n```java\nvoid bindIntents() {\n  Observable<?> cancelIntent = intent(LoginView::cancelIntent);\nObservable viewState = intent(LoginView::loginIntent)\n           .flatMap( \n                     loginRequest -> \n                                      mLogin.buildUseCaseObservable(...)\n                                             .takeUntil(cancelIntent)  // TakeUntil directly on buildUserCaseObservable()\n           ) // End of flatmap\n           .map(...)\n           .observeOn(...)\n           .onErrorReturn(...);\n subscribeViewState(viewState, LoginView::render);\n\n}\n```. Please ask on stackoverflow\n\u9648\u84dd\u5ea6 notifications@github.com schrieb am Sa., 8. Apr. 2017, 17:17:\n\nYes, I do. but There is no disconnect http.\nThere is no way to just lifted loginRequesObservable's subscription And do\nnot damage Observable stream?\nintent( (view) -> { return view.login(); } )\n      //retrofit: Observable requestToken(...);\n      .flatMap( (Function) (loginRequest)  -> { return loginRequesObservable } )\nintent( (view) -> { return view.cancel(); } )\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/234#issuecomment-292724394, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrnHDiMZ4r_vRLijMGVOvz66eCxJLks5rt6T9gaJpZM4M3rqs\n.\n. Just ask without mvi / mosby code and I'm sure someone can help you out how\nto implement such a cancelation properly with RxJava.\n\n\u9648\u84dd\u5ea6 notifications@github.com schrieb am Sa., 8. Apr. 2017, 17:19:\n\nThank you very much!\nI'll according to you recommend to do so\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/234#issuecomment-292724521, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrm_i2QS7IS63aeZB2XBqAEhMwKHWks5rt6V0gaJpZM4M3rqs\n.\n. Thank you very much for your kind words!\n\nJust wanted to say that the more I think about this problem the  more I\nbelieve that its very possible that retrofit is not cancelling the http\ncall and just \"ignore result\" (doesn't deliver result by calling onNext()\nbecause the subscriber has unsuscribed caused by takeUntil()). I think it\nwould be a good idea to ask that question on retrofit's github issue\ntracker.\n\u9648\u84dd\u5ea6 notifications@github.com schrieb am Sa., 8. Apr. 2017, 17:25:\n\nOk, I respect you very much, I will try to learn from you!\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/234#issuecomment-292724934, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnro5n5q_rV09_yd15rOvot7JaxeN2ks5rt6b4gaJpZM4M3rqs\n.\n. Thanks! Please update .travis.yml file to match build tools\nhttps://github.com/sockeqwe/mosby/blob/master/.travis.yml#L6\n\nBtw. Why no squash?. Thanks for the explanation and for your contribution!. Damn ... I didn't do this on purpose ... Sorry\nFrieder Bluemle notifications@github.com schrieb am Mo., 10. Apr. 2017,\n17:32:\n\nYou're welcome.. btw, you used a squash merge (I think there is a little\narrow next to the merge button to change it to regular merge). This is what\nI see in my local repo now (on the latest master branch):\n$ git branch -d update-project\nerror: The branch 'update-project' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D update-project'.\nNext time, please let me know if you want me to squash the commits. Thanks\n:)\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/pull/235#issuecomment-292986428, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrgISSmNoU5K_vK3CJmdBR6Yodfkqks5rukuWgaJpZM4M4WW8\n.\n. thanks!. Good Point!\nI have added timeout(), thanks!. Those files are generated with annotation processing and should generated\nwhenever you press the green play button. Alternatively, you can run it\nmanually with Menu  Build -> Rebuild\n\nHave you changed something in the source code?because if you have an\ncompile error the. Annotation processing doesn't run and you get a lot of\nerrors like\nCannot find symbol MailsFragmentBuilder, but the real problem is another\ncompiler error that maybe you have overlooked in the error messages (could\nbe somewhere mixed somewhere in between MailsFragmentBuilder error messages)\nAnyway, our CI server is able to build this project without any problems.\nhttps://travis-ci.org/sockeqwe/mosby\nGaurav Mishra notifications@github.com schrieb am Mo., 17. Apr. 2017,\n07:23:\n\nSorry it might seem a basic mistake , but i am unable to build modules\nother than sample app.\nWhile building sample-mail or sample-mvi I get error in the generated\nfiles:\nError:(18, 53) error: cannot find symbol class DetailsFragmentBuilder\nError:(20, 51) error: cannot find symbol class MailsFragmentBuilder\nError:(42, 70) error: cannot find symbol class MailsAdapterBinder\n/home/gaurav/AndroidStudioProjects/mosby/sample-mail/src/main/java/com/hannesdorfmann/mosby3/sample/mail/mails/MailsAdapter.java\nKindly suggest\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/238, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrjFFrEI4dTZIpfC5IIb1iWrcZaeYks5rwvdsgaJpZM4M-4ao\n.\n. Thank you very much!. Thanks for reporting. Are you trying to build your own app or one of the\nsample apps in this repository?\n\nDawid Hy\u017cy notifications@github.com schrieb am Di., 18. Apr. 2017, 16:32:\n\nMosby Version:\n3.0.2\nExpected behavior\nShould build with proguard\nActual behavior (include a stacktrace if crash)\nNot building with proguard:\nWarning:com.hannesdorfmann.mosby3.mvp.delegate.FragmentMvpDelegateImpl: can't find referenced class edu.umd.cs.findbugs.annotations.SuppressFBWarnings\nWarning:com.hannesdorfmann.mosby3.PresenterManager: can't find referenced class edu.umd.cs.findbugs.annotations.SuppressFBWarnings\nWarning:com.hannesdorfmann.mosby3.mvp.delegate.ViewGroupMvpDelegateImpl: can't find referenced class edu.umd.cs.findbugs.annotations.SuppressFBWarnings\nWarning:com.hannesdorfmann.mosby3.mvp.delegate.ActivityMvpDelegateImpl: can't find referenced class edu.umd.cs.findbugs.annotations.SuppressFBWarnings\nWarning:there were 4 unresolved references to classes or interfaces.\nSteps to reproduce the behavior or link to a sample repository\nBuild with enabled proguard\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/240, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrnhAaAtPPx46Dp0sysUWN3v6I7_wks5rxMl4gaJpZM4NAbdd\n.\n. I will take a closer look at it on Thursday. This annotation should be part of the aar at all (should only be used during compile time).  . Ok, this should be fixed with latest 3.0.3-SNAPSHOT (see readme of how to use snapshot).\n\nCould you please verify that this fixes the proguard problem?\nThen I will gladly release it as 3.0.3. 3.0.3 has been released a minute ago. Should be available soon (may take some more minutes to sync it to maven central)\nThanks for your help!. Hm, so @dimsuz you are saying that you still see the error in your project with mosby conductor if you specify the versions like this:\ngradle\n  compile 'com.hannesdorfmann.mosby3:viewstate-conductor:3.0.0'\n  compile 'com.hannesdorfmann.mosby3:viewstate:3.0.3'. You are right, it should work if you add those 2 transitive dependencies explicitly:\ngradle\n  compile 'com.hannesdorfmann.mosby3:viewstate-conductor:3.0.0'\n  compile 'com.hannesdorfmann.mosby3:viewstate:3.0.3'\n  compile 'com.hannesdorfmann.mosby3:mvp:3.0.3'. In 3.0.3 I have removed this annotation at all, so that they are no longer\nbundled in 3.0.3. Therefore I expect that explicitly adding the 3.0.3\ndependency forces mosby-conductor to use 3.0.3 internally and that the\nissue should be fixed.\ndimsuz notifications@github.com schrieb am Di., 25. Apr. 2017, 21:38:\n\nI will try a bit later today and report! When I add them explicitly those\nannotations will be filtered out? (Just curious)\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/240#issuecomment-297141842, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrn1orpceTcZ24g4zcG1xPSooHAZAks5rzkvJgaJpZM4NAbdd\n.\n. Use switchMap() instead of flatMap() . switchMap unsubscribes any previous\nFolderInteractor.loadFoldersLoaded(viewState) observable before continuing.\n\nMFlisar notifications@github.com schrieb am Fr., 28. Apr. 2017, 08:14:\n\nI'm using an observable like following to update the UI if the selected\nview is changed (in my case I'm showing just different data of the same\ntype, based on the selected view).\nSo what my presenter contains is following:\n@Override\nprotected void bindIntents()\n{\n  ArrayList> observables = new ArrayList<>();\n        // ... other intents...\n\nobservables.add(intent(view -> view.selectedViewIntent())\n            .doOnNext(ignored -> L.withGroup(LOG_GROUP).d(\"Intent: VOLLE Ordner laden...\"))\n            .flatMap(viewState -> FolderInteractor.loadFoldersLoaded(viewState)\n                    .map(folder -> (FolderPartialStateChanges)new FolderPartialStateChanges.SingleFolderLoaded(folder))\n                    .startWith(new FolderPartialStateChanges.LoadingSingleFoldersStarted())\n                    .concatWith(Observable.just(new FolderPartialStateChanges.LoadingSingleFoldersFinished()))\n                    .onErrorReturn(FolderPartialStateChanges.LoadingSingleFoldersError::new)\n                    .subscribeOn(Schedulers.io())\n            )\n    );\nObservable allIntents = Observable.merge(observables);\n  FolderViewState initialState = FolderViewState.builder().build();\n  Observable stateObservable = allIntents.scan(initialState, this::viewStateReducer)\n          .observeOn(AndroidSchedulers.mainThread());\n  subscribeViewState(stateObservable, FolderControllerView::render);\n}\nThe FolderInteractor.loadFoldersEmpty() is emitting a lot of items, one\nby one, that's why it's surrounded with a start and end state. That works\nall fine, but now I face a problem. If the user changes the view while the\nloadFoldersEmpty() is still emitting items, the reduce functing is mixing\nup states... Now my question is, I have hot observables only, how can I\nstop them from emitting when the view changes without unsubscribing? How\nwould you solve the problem or do you have any other idea?\nPS: I'm sorry for posting here, I tried to post this on your block twice,\nbut both times disqus was marking my post as spam and I can't contact you\nthere to tell you...\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/241, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrqYQ4Md2JLxMZIchiCIMeW76mDDZks5r0YOogaJpZM4NLF-b\n.\n. Thanks for your feedback! Glad it works now for you.. Are you sure you are using the latest snapshot?\n\nPlease try to redownload latest 3.0.4-SNAPSHOT with\n./gradlew build --refresh-dependencies. Hm, could you please take a look here:\nhttps://github.com/sockeqwe/mosby/blob/master/mvi-common/src/test/java/com/hannesdorfmann/mosby3/mvi/EagerObservableTest.java\nIsn't it more or less the observable chain you have in your app? This test pass now with latest 3.0.4-SNAPSHOT  (didn't pass before).\nIs your code somewhere available online so that I could take a close look and debug it?. Really strange. I think this unit test covers your code on stackoverflow and passes the tests (100 % not just 3 of 4 times).\nCould add a log to your merge operator (or whatever observable you use before subscribeViewState() to verify that this is really a mosby bug.\n```java\nObservable observable = Observable.merge(...)\nobservable loggingObservable = observable.doOnNext ( newState -> System.out.println(\"new state \"+newState);\nsubscribeViewState(loggingObservable, renderFunc);\n```\nIf this logs are correct, then it might be a mosby bug. But having 3/4 times the wrong observable sounds pretty strange and I'm not sure if it is still a mosby bug.. Yes, then this is not a Mosby bug since your observable doesn't emit your desired output (otherwise it would be logged properly).\nYou have an error (or error in reasoning) somewhere in your rxjava code.\nThe easiest way to debug it is to add logs like observable.doOnNext( doSomeLogging ) to all your observables to track down the real issue.\nThanks for your help.. I'm sorry for the inconvenience Mosby may cause. \nI haven't seen this issue.  Is your code somewhere available on github so I can take a look at it  to debug it? If not, can you provide a full log where I can see all the order of the logging events ( .doOnNext() )\nDo you emit a new intent from view.render() method or is it really like described in your code snippets above:\nkotlin\noverride fun connectDataIntent(): Observable<Boolean> { \n       return Observable.just(true).doOnNext({ Timber.d(\"connectDataIntent doOnNext\") }) \n}\nSo you have a .startWith() at some point in your interactor? If yes, can you show me that piece of code too?. I have looked at your code but couldn't spot any particular issue with your code. \nHowever, I'm not sure if this is an Mosby issue.\n Actually, there is a unit test that makes me wonder if your described error comes from your Interactor or  DefaultLoader.\nDo you still run into the error if you cut out your interactor and replace it with a simple observable like this:\n```kotlin\noverride fun bindIntents() {\n     val connectDataIntent = intent(DualTeamScoringView::connectDataIntent).doOnNext { Timber.d(\" preenter connectDataIntent doOnNext\") }\n                .switchMap {\n                    Timber.d(\"connectDataIntent switchMap ${id}\")\n                // Changed\n                Observable.just(DualTeamScoringViewAction.DataCurrentlyLoading ) // <-- Do this instead of interactor\n\n            }.doOnError { Timber.e(it,\"Fatal error occurred\") }\n            .onErrorReturnItem(DualTeamScoringViewAction.DataLoadingFailed() as DualTeamScoringViewAction)\n            .subscribeOn(Schedulers.io())\n            .observeOn(AndroidSchedulers.mainThread())\n\n    val initialState = dualTeamScoringInteractor.getInitialState()\n\n    subscribeViewState(connectDataIntent.scan(initialState, this::viewStateReducer)\n          .distinctUntilChanged(), DualTeamScoringView::render)\n}\n\n```\nIs it working if you cut out the Interactor?. Finally, I was able to reproduce this issue. I try to isolate it and to fix this as soon as possible.. This is fixed in latest 3.1.1-Snapshot . @jhowens89 could you please try the latest snapshot in you project to verify that this fixes that issue?\nI'm not sure if this is an internal RxJava bug, I will investigate / debug it even more.... Hm, not sure why it doesn't compile. On my machine it compiles just fine and also on Travis CI.\ncould you try to build it from command line:\n./gradlew clean build\nIt should build successfully. Then you can try to run the app from android studio (green play button).\nLet me know if this helps.. hm, compiles on my machine from command line.\n\nHave you changed some code or gradle plugin version?. Ok, I'm now finally able to reproduce this issue on circle ci\nhttps://circleci.com/gh/sockeqwe/mosby/1\nI hope to find some time to fix this issue in August. not really, but I will replace the annotation processor that causes this issue. ```java\n  private void renderShowData(HomeViewState state) {\n    TransitionManager.beginDelayedTransition((ViewGroup) getView());\n    loadingView.setVisibility(View.GONE);\n    errorView.setVisibility(View.GONE);\n    swipeRefreshLayout.setVisibility(View.VISIBLE);\n    boolean changed = adapter.setLoadingNextPage(state.isLoadingNextPage()); // TODO: Internally calls items.size() which is null on orientation change!\nif (changed && state.isLoadingNextPage()) {\n  // scroll to the end of the list so that the user sees the load more progress bar\n  recyclerView.smoothScrollToPosition(adapter.getItemCount());\n}\nadapter.setItems(state.getData());\n\n//  TODO: this must be done before setLoading() otherwise error will occure. see https://github.com/sockeqwe/mosby/issues/244\n```. The corresponding Activity|Fragment|ViewGroup Delegate takes such a boolean flag as constructor parameter.\nSee here:\nhttps://github.com/sockeqwe/mosby/blob/master/mvp/src/main/java/com/hannesdorfmann/mosby3/mvp/MvpActivity.java#L113\nSo you have to override this method getMvpDelegate() (always return same delegate instance, don't create a new on each getMvpDelegate() call)\n. @jhowens89 could you please open a dedicated issue (just copy & paste your comment above) for that because i haven't found any general  working solution for your issue since it is not easy to find out the \"parent\" Fragment  of MviLinearLayout. maybe some other people here know a way to determine the \"parent\" fragment so that we can make the MviViewGroupDelegate lifecycle aware of the \"parent\" fragment.. There are may ways to do this. share() could be used like this in Presenter.bindIntents():\n```java\npublic void bindIntents(){\n  Observable<?> buttonClickIntent = intent(View::butonClickIntent).share();\n  Observable directUpdate = buttonClickIntent.map( / transform to state to update UI immediately / );\n  Observable networkRequest = buttonClickIntent.map( / execute network request /):\nObservable allObservables = Observable.merge(directUpdate, networkRequest);\n  subscribeViewState( allObservable,  View::render);\n}\n```\nAlternatively, you could also do something like this:\njava\npublic void bindIntents(){\n  Observable<Foo> observable = intent(View::clickIntent)\n        .flatMap(click -> {\n               if (shouldRunNetworkRequest()) \n                   return networkApi.getFoo()\n                                    .startWith(Foo.initialValue());  // directly Update UI before starting Http request\n               else\n                   return Observable.just(new Foo() ); // Directly update UI, no networkRequest\n         });\n  subscribeViewState( observable,  View::render);\n}\nI hope this gives you an idea on how this could be achieved.\nThere are also other ways, it really depends on what exactly you want to implement.. Great. Please consider asking future queations like this on stackoverflow because stackoverflow is much better indexed compared to github issue tracker by search engines like google and therefore easier to find for other Mosby users with same / similar question. There is a mosby tag on stackoverflow I regularly keep looking at for new questions. Also this question is not really Mosby related, its more aboit RxJava chain construction.\nI would also appreciate if you could copy over this question & answer to stackoverflow\u200b.\nI'm sure you are not the first nor the last developer facing such a problem. Thanks.. Yes ... I thought  naming it input / output  is slightly easier to wrap your head around, but I'm definitely open for better naming suggestions. This is by no means a fixed API proposal.\nHowever, I didn't wanted to make it to cyclish \ud83d\ude04  nor I want to introduce the concept of Drivers as cycle does. I'm not saying, that concepts of cycle like Drivers are not a good idea, I just don't want to go into the direction of a framework. I would rather just provide a simple \"entry point\" (kind of) and then its up to you how you want to implement your stuff, i.e. cyclish with drivers .... Thanks for your feedback!\n\nWe could leave the lot of boring  PublishSubjects from the view (and interface of view) which are presents for every actions.\n\nNot sure if I have understood that correctly but right now you can do the same:\njava\ninterface MyView extends MvpView {\n    Observable<Intent> intents()\n    void render(MyState state)\n}\nThen you would have just one Observable where you pipe all your view Intent's through. Nobody said you have to define an \"intent-method\" for each intent.\n\nAs I wrote in an another issue, I believe it's can be necessary to unsubscribe from a few heavy resources and rescubscribe on resume\n\nNot sure if that will solve that problem because MviBaseIOPresenter internally must have a BehaviorSubject for the latest state. Otherwise you can't keep the rx stream to your \"business logic\" alive if the view unsubscribes and resubscribes to presenter (i.e. during screen orientation changes). So this is not really solving your problem. To solve this problem you will have to tell the Presenter when to destroy the presenter and it's internal stream permanently. You can do that in Mosby by providing your own MviDelegate like ActivityMviDelegate.  For example the default one that uses Mosby out of the box is ActivityMviDelegateImpl which does that in onStart() <--> onStop(). If you want to have something that operates onStart() <--> onPause() <--> onResume() <--> onStop() then you have to implement your own ActivityMviDelegate as this delegate is the component that is responsible to coordinate lifecycle of view and presenter. That is totally possible with MviBasePresenter right now but as you see, you would have to write the a Delegate for MviBaseIOPresenter too. So your described problem is independent from the Presenter implementation. It's all about coordinating lifecylce of both, view and presenter, and that is the responsibility of the MviDelegate.\n\nWith your example it seems more like MVVM, not MVP. Or not? Only the view knows the presenter, presenter doesn't need to have reference to the view.\n\nYes, that is correct. \nOverall, yes, I will start to work on that soon.. Presenter is available only after onViewCreated() lifecycle callback (which\nis the next one after onCreateView () ). Don't forget to call\nsuper.onViewCreated() when overriding\nMahdi Pishguy notifications@github.com schrieb am Mi., 31. Mai 2017,\n06:28:\n\nwhen i trying to use this library to implementing mvp for fragments, i get\nnull for getPresenter(),\npublic class FragmentCategories extends MvpViewStateFragment\n        implements UserCategoriesView {\n@BindView(R.id.mainCategoriesFlipper)\nViewFlipper mainCategoriesFlipper;\n\n@BindView(R.id.mainCategoryList)\nRecyclerView mainCategoryList;\n\n@BindView(R.id.categoryChildList)\nRecyclerView categoryChildList;\n\n@BindView(R.id.selectedChannelsList)\nRecyclerView selectedChannelsList;\n\nprivate Unbinder              unbinder;\nprivate List<MainCategories>  mainCategories;\nprivate List<ChildCategories> childCategories;\nprivate List<Channels>        channelsList;\nprivate Activity              activity;\nprivate Context               context;\nprivate MainCategoryAdapter   mainCategoryAdapter;\nprivate ChildCategoryAdapter  childCategoryAdapter;\n\n@Override\npublic UserCategoriesPresenter createPresenter() {\n    return new UserCategoriesPresenter();\n}\n\n@Nullable\n@Override\npublic View onCreateView(LayoutInflater inflater, final ViewGroup container,\n                         Bundle savedInstanceState) {\n    View view = inflater.inflate(R.layout.fragment_categories, container, false);\n    mainCategories =  getPresenter().getAllMainCategoryList();\n\n    return view;\n}\n\n@Override\npublic void onDestroyView() {\n    super.onDestroyView();\n    unbinder.unbind();\n}\n\n@Override\npublic void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n    super.onViewCreated(view, savedInstanceState);\n    unbinder = ButterKnife.bind(this, view);\n    EventBus.getDefault().register(this);\n}\n\n@NonNull\n@Override\npublic UserCategoriesViewState createViewState() {\n    return new UserCategoriesViewState();\n}\n\n@Override\npublic void onNewViewStateInstance() {\n}\n\n@Override\npublic void onDestroy() {\n    super.onDestroy();\n    EventBus.getDefault().unregister(this);\n}\n\n}\nfragment presenter class:\npublic class UserCategoriesPresenter extends MvpBasePresenter {\npublic List<MainCategories> getAllMainCategoryList() {\n    return SQLite.select().from(MainCategories.class).queryList();\n}\n\n}\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/248, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrkcdhFMYOM_Pvp5gsMRR8eyAMWbvks5r_OyGgaJpZM4NrJIO\n.\n. just move presenter interaction in onViewCreated()\n\n```java\n    @Override\n    public View onCreateView(LayoutInflater inflater, final ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_categories, container, false);\n        return view;\n    }\n@Override\npublic View onViewCreated(View view, Bundle bundle) {\n    super.onViewCreated(view, bundle);\n     // From now on, presenter is instantiated\n     mainCategories =  getPresenter().getAllMainCategoryList();\n}\n\n```. Not sure if I understood you correctly (nor which idling issue you face)\nbut if you just want to check if ViewState is \"rendered\" correctly you can\ndirectly call MyActivity.render(myState) and then make assertions via\nespresso. No Presenter needed at all to test \"rendering\"\nEmilio Manzano Marcos notifications@github.com schrieb am Do., 1. Juni\n2017, 12:28:\n\nI'm trying to write some UI tests with espresso. But when I mock the\npresenter with mockito (the createPresenter() method of the\nfragment/activity returns a mock), the main thread is never idle and the\ntests keeps waiting until the espresso timeout is reached.\nMy goal is to call the \"render()\" method with mocked view states and check\nif the view is displaying correctly, that's why I'm mocking the presenter,\nbecause I don't need it and I want to isolate the view for the tests.\nWhen I create a \"real\" presenter with mocked dependencies on the\nconstructor instead a mocked one, the main thread is not blocked and the\ntest runs fine. I've been searching what can be blocking the main thread\nbut I don't see what can it be.\nSomebody know what can be blocking the main thread? Or If I need to mock\nsomething else on the presenter with mockito in order to keep the main\nthread dle?\nMVI 3.0.04\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/249, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrhpJJlpoYlb2p1daVnHXyVSm72YAks5r_pJQgaJpZM4NsydV\n.\n. Oh, that shouldn't be blocking. Maybe that's a bug internally, although I\ncan't think right now why or where a blocking interaction with Mosby\ncomponents like presenter takes place.\nIs your app open source so that I could debug that specific use case?\n\nEmilio Manzano Marcos notifications@github.com schrieb am Do., 1. Juni\n2017, 13:36:\n\nThats correct, but I cannot return a null presenter on the\ncreatePresenter() method because MVI lib needs it. That's why I need to\nreturn a no-op mocked presenter, but If I do that the main thread gets\nblocked by something related to mosbys base MVI classes.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/249#issuecomment-305468111, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrhtpMcmD9owPJunNAYcwse3rIX9rks5r_qJXgaJpZM4NsydV\n.\n. I will try to reproduce it, but I can't say when because I'm more busy as I wanted to be right now.\n\nSilly question, but do you increase the idling counter somewhere? Would it be decreased in Presenter somehow which in your case would never be reached so it will cause Espresso to wait until time out because counter is never 0?\nIf not, you could do the following:\nFirst, set a breakpoint of log in your onResume(). If that one ever reaches then it is definitely not Mosby who is blocking. Do the same for your view.render() method to verify whether or not this method has ever been called.\nIf you never reach the break points / logs of onResume() and view.render() then try the following.\nset a break point in your Activity / Fragment onCreate() and onStart() method. Then step into the super call until you reach a class name \"Mvi*Delegate\" something. Then debug this one internally step by step to determine if there is a blocking call. If you find one, please report it.. Thanks for your feedback!. I don't think this is a good idea. We did that at work 2 years ago, didn't worked out to well and increased complexity.\nI have already answered this question somewhere on my blog or somewhere on a github issue where I provided some more details why i think that this is a bad idea. I'm on holidays right now and have no pc with me. I will try to find that answer and copy & paste it here when I'm back from holidays (Thursday). Sorry for my late response, it took me some time to find the answer I have written some time ago, but here it is:\nOriginal question was:\n\nQuestion is actually how to approach that in a clean way? Should I create an instance of presenter for every type of item in the RecyclerView (how and where should I do it then using delegate pattern) or should I create some \"god\" presenter that will handle click actions for every type of item? Thanks in advance!\n\nMy answer was: (on MVP, not MVI but I think that doesn't matter)\n\nFirst it depends on the way how you interprete MVP or which variant of MVP you have implemented. I'm a fan of passive view. In my opinion it's definitely a good idea to split big views in smaller views with own tiny presenter. So every view is decoupled, has it's own Presenter and a clear separation between model and view and the source code for each class is more understandable, testable and a smaller number of lines of code per class. So having a MVP View (i.e. a ViewHolder) and a Presenter for each is a item sounds like a good solution, i.e. every view (i.e. ViewHolder) can handle it's own model independently with his own presenter. So in your example clicking on a button (which is part of ViewHolder) can be handled by his presenter and then update the model and this might trigger the presenter to update the view. For example you could have a Fragment that loads a list of items by using a Presenter and then displays the items in a RecyclerView. The RecyclerView's adapter can be configured (i.e. by using this AdapterDelegates) to instantiate a ViewHolder (which is seen as MVP View) and its own Presenter. The problem here is that your views gets recycled during scrolling. It gets even more complicated if you want to do async background tasks in your ViewHolder's Presenter (i.e. on button click make an http call). So when the view gets recycled you have to tell the presenter to stop somehow or at least detach the view from presenter. But what if you scroll back in RecyclerView to the original ViewHolder where you have clicked the Button which has executed an http call. How do you reattach the view to the original Presenter instance with the running http request? Not that easy since the ViewHolder itself will be recycled and bound. It get even more complex once we start to think about Presenter for ViewHolder that survive screen orientation changes.\nAnother problem I see with this approach (Presenter for each ViewHolder) is that the datasource of the adapter is managed by another presenter (i.e. Presenter of \"parent\" Fragment). So this one can add / remove and also update items. Maybe it is easier if you follow the convention that Presenter of \"parent\" fragment is only responsible to add / remove items from data set and only presenter of ViewHolder is responsible to update the item itself, but I still think that this is much more error prone and might leave to inconsistent state since parent Presenter and ViewHolder Presenter might want to touch a certain ViewHolder.\nSo in theory it sounds like a good idea to split that single big Fragment (MVP View) into smaller views, but in practice this is doable but hard to implement efficiently. Therefore, unfortunately, my recommendation is to use a \"god\" presenter. Usually I have implemented somehow like this: a AdapterDelegate gets a OnClickListener as constructor parameter, which will be set as OnClickListener on the Button of the ViewHolder. The Adapter gets a list of AdapterDelegates as constructor parameters (or an DelegatesManager). So the Fragment itself reacts on the OnClickEvent and invokes the corresponding \"god\" presenter method.\nTL;DR: I recommend to got with the \"god\" presenter. However, I strongly recommend to split a big View (i.e. Activity) into smaller views (i.e. Fragments with own presenters), but applying MVP on RecyclerView items is very tricky and I would avoid that.\n\nSo back to your question. You said you want to introduce Presenter for each ViewHolder because:\n\nI have a RecyclerView with items which became quite complex \n\nCan you elaborate what exactly is complex in your concrete example? I think that this complexity will not be solved by giving each ViewHolder it's own Presenter (maybe the complexity is then just moved somewhere else).. Thanks @charbgr. Thanks!. Its in MvpLceFragment of the library itself. Take a look at the\nshowContent() implementation. It calls a class called LceAnimator.\nHowardSchmaeu notifications@github.com schrieb am Do., 15. Juni 2017,\n13:58:\n\nyou have in your sample mail app a animation/transition on the mails list.\nIf you click in the Menu of Inbox the Mails are shown with an animation\nfrom bottom to to. i've try to find the source where you set this but i\ndidn't.\nCan you tell me where it is?? :-)\nTHX in advance\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/254, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnroUFsLKgL0WpJjODxSXLU3lqJxugks5sERyAgaJpZM4N7HET\n.\n. Super interesting conversation! Thanks for sharing your strategies.\nI think all of your solutions are valid and work for your use case but not necessarily for the general case.\n\nWith that said, I still think that sinking the information, i.e. that you have scrolled to a given position, down as intent through a state reducer is the way I would implement something like this and how I would recommend to implement it. That might seems to be over architected and over complicated and by no means I'm saying that you should change your OneShotFlag solution, or clearTransientState() as described by @dimsuz . I just can speak for myself and for me the most important thing is that the \"model\" is immutable and driving the state. Also I don't see a major difference to what @dimsuz or @sevar83 recommended: They all have to call 1 extra method (clearTransientState() or some flag in the view). So it's the \"same amount of work\"  compared to firing a dismissSnackBarIntent().\n\nbut there may be a sutuation when several new ViewState instances created before SnackbarShownIntent will be triggered, so Snackbar will be shown several times\n\nI think this is just an implementation detail of your UI. If Snackbar is already showing then don't display it again. State Reducer guarantees that the order of those render() events dont matter: at the end you are in the correct state.  I'm also experimenting around with the idea of using Rx backpressure to disallow such things like calling render(newState) while \"old state is not entirely finished with rendering. In this example  \"rendering is finished\" could mean after snackbar disapeared (might be easier to implement with another base presenter class #255). Not sure if this solves this problem though, but I think it could be useful in the case of RecyclerView Item animations where one render call might trigger an animation of a item and a consecutive render call might cause a that the item that is animating right now will removed. Sure, we could coordinate this in the View layer, but if there would be a way to signalize when view.render() is finished we simply could wait until item animation is finished (first view.render() call) before dispatching the next view.render() call which would remove the item. With unidirectional data flow and Rx backpressure we could get this for free.\n\nbut it pollutes StateResucer if there are several such flags.\n\nTrue but at the same time you get the guarantee that state is always the correct regardless of amount of events happening over time as they all go the same way through state reducer.. > In such situation flag showSnackbar=true is lost.\nSounds like the expected behavior for me OR your state reducer should work differently then and set showSnackbar to whatever you would like it to be. I don't see how this makes any difference in having a view attached or not. \nAlso you can call dismissSnackBarIntent() immediately in render() once the snackbar has been fired. This is just an implementation detail, and SnackBars and Toast behave differently then regular UI widgets. Something like this:\njava\n// View Layer\npublic void render(MyState state) {\n   if (state.showSnackBarError) {\n      SnackBar.make(view, \"An error has occurred\", LONG).show()\n      fireSnackBarErrorShownIntent(); \n   }\n}\nSo fireSnackBarErrorShownIntent() will set the state properly   ((state.showSnackBarError=false) and you are back on the right state (although the SnackBar itself is shown for few more seconds on the screen, but again I think this is ok since it is just a UI implementation detail). Of course fireSnackBarErrorShownIntent() will cause to render() state again but then no UI widget will be update, so no big deal.. Thanks for reporting and for providing this example to reproduce this bug! I'm investigating right now .... Ok, so the easiest way to solve this is to increase minSDK to API 17 because since Api 17 activity.isDestroyed() is provided. \nOtherwise, I have to build some work around which I would like to avoid if possible.. Ok, I have to revert my previous comment ...\nI did some research and played around a little bit with \"Don't keep Activities\" option. The Problem with \"Don't keep Activities\" is that your app will not behave like this in the real world.\nFor instance: \n - I have assumed that \"Don't keep activities\" simulates the same behavior as destroying the Activity which is on the backstack while device is on low memory. \n - Or that If  my App has 2 Activities and I navigate from my apps Activity A to my apps Activity B, then on Activity A gets destroyed on low memory while Activity B is still in foreground. I thought that those use cases could be simulated with  \"Don't keep activities\" enabled.\nIt turns out that this is not true.  \"Don't keep activities\" just destroys the activity in a \"strange\" way by forcing  the ActivityManager to recreate the activity. Again, this is not how a real app would behave:\n\n\nI have assumed that \"Don't keep activities\" simulates the same behavior as destroying the Activity which is on the backstack while device is on low memory. \n\n\nThis is not true. Android kills the whole process without any callback at all. Therefore Presenter wont be \"detached\" (detachView() will not be called, whole process is killed).\n\n\nOr that If  my App has 2 Activities and I navigate from my apps Activity A to my apps Activity B, then on Activity A gets destroyed on low memory while Activity B is still in foreground. I thought that those use cases could be simulated with  \"Don't keep activities\" enabled.\n\n\nThis is also not true. Android doesn't kill single Activities of an app. So on low memory, Activity A will not be killed if Activity B is in foreground. Rather the whole process is killed.\nhttps://commonsware.com/blog/2011/10/03/activities-not-destroyed-to-free-heap-space.html\nThis seems like an implementation detail of the Android operating system, but it hasn't changed in years. Given the fact that RAM Memory built in a device is growing, I'm not expecting that Android OS will fall back to such fine and granular memory management (killing single activities) in the near future.\nSo again, \"Don't keep activities\" is not behaving nor simulating any real state your app can face in a real world scenario.\nSo, what about your reported issue? Well, I don't know how to fix it because this is really just the ActivityManager (part of the operating system) that destroys the Activity after all activity lifecycle callbacks of your Activity and Mosby went through. As far as I am concerned there is not much we can do. \nI tend to say that this is \"working as intended\" or \"wont fix\". Any thoughts?.  > I think it would be better if Mosby reflects the right retainInstance value when the Activity is being destroyed in this case.\nNot sure how, as already said, this is something the operating system decides.  As far as I know all Mosby can do is ask activity.isFinishing()  which should return true (and does return true except if \"don't keep Activities\" enabled), but returns false if \"dont keep Activities\" is enabled and you press home.\nI will take a look to check if architecture components ViewModel handle this case properly and if so how it is implemented.. See #274. Feel free to reopen this issue if 3.1.0 (snapshot) doesn't solve this porblem.. Do you have a working demo example fir this that I could use for debugging?\nchennyshan notifications@github.com schrieb am Fr., 12. Jan. 2018, 12:41:\n\nMosby Version 3.1.0\nAfter splitting detachView(boolean retainInstance), it looks like that\nanother problem appears when \"Don't keep activities\" is enable: maybe some\npresenter will never be removed.\nSuppose that we have the following Activities: A -> B -> C (C foreground).\nTo Activity B, detachView() will be invoked, but destroy() will not, and\nit's presenter is retained in PresenterManager now. Then we call start the\nActivity A with FLAG_ACTIVITY_CLEAR_TOP from C. We know that Activity B\nwon't be restored, so it's previous presenter will be left and looks like\nwe have no chance to remove it later.\nAny thoughts?\nThanks for this great library.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/256#issuecomment-357217410, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrocC5KaEF3VqhoAu6qelxRPbROR-ks5tJ0TfgaJpZM4N_ka1\n.\n. @chennyshan sorry for the long pause.\nThis is working as intended:\nThe Problem is that Don't keep activities is actually not emulating any real world behavior. So your users are never see this lifecycle. Actually Don't keep activites forces the ActivityManager to close the activity in such a \"ugly\" manner that Activity.isFinishing() returns false if Don't keep activities is enabled. In the real world it works just fine (if you test your example with \"Don't keep activities\" disabled it works properly).\n\nSo agian, Don't keep activities was introduced for us developer to test activity Activity.onSaveInstanceState() but it is not like the app behaves in the real world!. @HanCheng thanks for your feedback, but I don't understand how this is related to the original question / issue? \nbtw. Nothing is stoping you from saving the presenters state somehow.... > simulate that in some low resource case the os would 'kill' some app which is not in display.\nNo it doesn't. On Low memory your app's process is killed without any notice and guarantees that any lifecycle callbacks is called.\nAll that Don't keep activites option is doing is it forces to call Activity.onSaveInstanceState() but it doesn't simulate any real world behavior.. Minimized with Don't keep Activities options?\nHow do you compose your intents? Do you use subscribeViewState() or manage\nsubscription manually?\nDrobyshevAlex notifications@github.com schrieb am Do., 29. Juni 2017,\n00:12:\n\nWhen I receive a response from the server, I create a new fragment. If the\napplication is minimized I get an error\nio.reactivex.exceptions.OnErrorNotImplementedException: Can not perform\nthis action after onSaveInstanceState\npublic void render(LogoViewState logoViewState) {\n    if (logoViewState instanceof LogoViewState.LoadingState) {\n        statusView.setText(\"Connecting...\");\n    } else if (logoViewState instanceof LogoViewState.DataState) {\n        statusView.setText(logoViewState.toString());\n        if (getActivity() != null) {\n            ((MainActivity)getActivity()).showHomeFragment();\n        }\n    }\n}\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/257, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrkyU_912mdjB4BjrrpIVdpajFL4sks5sIs_ggaJpZM4OImad\n.\n. Im not familiar with Websocket api. Could you please add some logs at:\n\n\nActivity.onSaveInstanceState()\nyour LogoView add a log in onStop()\nIn Presenter.detachView() incl boolean flag\nIn Presenter.bindIntents() please add a log with doOnDispose() on\nlogoViewStateObservale (at the end) and to Observable \"v\" (v.doOnDispose(\n... logcat ...) )\n\nThanks\nDrobyshevAlex notifications@github.com schrieb am Do., 29. Juni 2017,\n01:06:\n\npublic class LogoPresenter extends MviBasePresenter {\n    @Inject\n    WebSocket webSocket;\n@Override\nprotected void bindIntents() {\n    Observable<LogoViewState> logoViewStateObservable =\n        intent(LogoView::serverVersion)\n                .flatMap(version -> {\n                    Observable<Version> v = webSocket.on(\"version\", Version.class);\n                    return v;\n                }).map(LogoViewState.DataState::new)\n                .cast(LogoViewState.class)\n                .observeOn(AndroidSchedulers.mainThread());\n\n    subscribeViewState(logoViewStateObservable, LogoView::render);\n\n    webSocket.emit(\"version\", new Version(2));\n}\n\n}\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/257#issuecomment-311816493, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnriLTamNCkr1jW36_BIr___Hk4h07ks5sItxygaJpZM4OImad\n.\n. You can also try it with switchMap () instead of flatMap (). Not sure if\nthat matters though.\n\nDrobyshevAlex notifications@github.com schrieb am Do., 29. Juni 2017,\n02:08:\n\nI removed websocket and error gone... I'll try tomorrow more tests\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/257#issuecomment-311825925, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrkSb9jXHFlNIm36pQBikPgrVTQTSks5sIusBgaJpZM4OImad\n.\n. Wait, lets step back a moment. Your original question was that you run in\nthe IllegalStateException. This seems to be caused by the fact that the rx\nobsrvale stream is still alive but shouldn't. This could actually be a bug\nof Mosby. Thats why I have asked you if you can reproduce the error with\nsome logs.\n\nDrobyshevAlex notifications@github.com schrieb am Do., 29. Juni 2017,\n13:10:\n\nI don't understand how i can use websocket.\nIf i want to show actual info from server without reuest.\nIt is like a\n// subscribe to socket event\nObservable model = ws.on('user_status');\nHow i can render it with MVI?\nIn MVP it's easy\n    disposable.add(model\n            .observeOn(AndroidSchedulers.mainThread())\n            .subscribe( s -> {\n                if (isViewAttached()) {\n                    getView().showUpdateStatus(s);\n                }\n            }, throwable -> {\n                throwable.printStackTrace();\n            })\n    );\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/257#issuecomment-311935475, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrn1Fb4GWXeShbgzL7H8PamtCJrOIks5sI4YkgaJpZM4OImad\n.\n. Could you please add a log to presenter.detachview(retain)\n\nDrobyshevAlex notifications@github.com schrieb am Do., 29. Juni 2017,\n14:06:\n\nI think webSocket need put to intent. But i can do it only from MvpView.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/257#issuecomment-311946930, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrtEEzX-td9Z0J_k0e-woSXErGNw2ks5sI5MzgaJpZM4OImad\n.\n. Yeah, currently Mosby uses onCreateView()  and onDestroyView() ... I might\nchange that to solve this issue\n\nDrobyshevAlex notifications@github.com schrieb am Do., 29. Juni 2017,\n21:42:\n\nif i can move code from FragmentPresente to ActivityPresenter app work\ngood!\nBut i need some fragments with intent code... I don't want make some\nactivites :)\nCan you help me please?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/257#issuecomment-312082432, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrtvIwuiIZv4-XD7DDKvBl3WqaWUYks5sI_48gaJpZM4OImad\n.\n. I'm sorry but I don't understand your latest comment?. Yes, i have already said in a previous comment, that lifecycle should be\nbetween onStart() and onStop() and that I will fix it soon. Thanks for\nproviding your feedback, logs and help!\n\nDrobyshevAlex notifications@github.com schrieb am So., 2. Juli 2017,\n21:07:\n\nI have a fregment with presenter.\nIf i press back button for close app then fragment has destroed.\nBut subscribers from presenter don't dispose.\nWhen i run application after destroy the fragment i watch in log 2 line\nthat print from doOnNext.\nD/App: test\nD/App: test\nIf a press back button again then nex run application print 3 line to log.\nD/App: test\nD/App: test\nD/App: test\netc...\nI create BaseFragment\npublic abstract class BaseFragment extends MviFragment {\n    protected P presenter;\n    protected Unbinder unbinder = null;\n    private boolean isAttached = true;\n@Override\npublic void onStart() {\n    super.onStart();\n    if (presenter != null && !isAttached) {\n        presenter.attachView(this);\n    }\n}\n\n@Override\npublic void onStop() {\n    super.onStop();\n    if (presenter != null && isAttached) {\n        presenter.detachView(true);\n    }\n}\n\n@Override\npublic void onDestroy() {\n    super.onDestroy();\n    if (presenter != null) {\n        presenter.detachView(false);\n    }\n    if (unbinder != null) {\n        unbinder.unbind();\n    }\n}\n\n}\nNow everything works as it should\npresenter.detachView(false); - fix it\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/257#issuecomment-312510708, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrn5bq7VVyKUG0HmcbUzP_wUF6QMqks5sJ-pggaJpZM4OImad\n.\n. So in latest version 3.0.5-SNAPSHOT the lifecycle has been changed to onStart() and onStop(). \nFor now onStop() is called before onSaveInstanceState(), therefore you won't run in \nCan not perform this action after onSaveInstanceState\n\nHowever, it is not super clear when onSaveInstanceState() is actually called.\n\nNote however: this method may be called at any time before onDestroy()\n\nSource\nWith the current Fragment implementation of support lib 25.x it is called after onStop(). However, this seems to be an implementation detail and could change any time in the future.\nHence, a more generic solution might be required in the future.\nPlease test your app with latest 3.0.5-SNAPSHOT (see instructions in README)  and let me know if this fixes your issue. Thanks in advance!. So the workflow should be as follows:\n\nFragment.onStart() --> presenter.attachView() --> presenter.bindIntents()\nAs long as your Fragment is in foreground it will be \"updated\" by calling view.render().\nYou press home button --> presenter.detachView(true)  --> Presenter is kept (not destroyed). Every incomming websocket message will still be handled in RxJava chain but since no view is attached the latest one will be \"stored\" internally and once View gets attached the latest \"stored\" one will immediately hand over to view.render(latestState)\nApps comes in foreground again, so Fragment is visible again --> presenter.attachView() --> view.render(lastState)\nUser press back button to exit --> fragment.onStop() --> presenter.detachView(false) --> RxJava Chain from bindIntent() gets disposed / unsubscribed.\nStart the app again: Then a new Presenter Instance should be instantiated and workflow starts at 1.\n\nSo you are saying that this is not how your app works? Can you please post the logs you see when you run this workflow.presenter.detachView(false) should be called.\n\nGet response from server 3 times\n\nI can't explain where this comes from. Are you sure that websocket is not caching all received messages while no subscriber and redeliver them once presenter is subscribed to it?\n . Got it! Thanks for the quick response. \nWell this is another kind of issue, it's not related to your original one. It's backstack management related. \nDo you mind to open a new issue where you describe which fragment is on the backstack and which one is \"hidden\" etc. so that I can reproduce it in isolation and write the corresponding tests.. We already had this discussion.\nI would prefer to not be that opinionated about certain things i.e. naming\nit render()\nR\u00f4mulo Eduardo Garcia Moraes notifications@github.com schrieb am Do., 29.\nJuni 2017, 04:37:\n\nActualy, if we want to use the MVI library, we should make the View (\nActivities and Fragments) implements the MvpView interface\nhttps://github.com/sockeqwe/mosby/blob/master/mvp-common/src/main/java/com/hannesdorfmann/mosby3/mvp/MvpView.java,\nand be sure to create and implement the render method, which takes a\nViewState as parameter.\nHow about create a MviView typed interface that has a render(Type\nviewState) and extends MvpView? This way, every time we make a View\nimplement the proposed MviView it's forced to override the render method.\nSugestion of implementation\npublic interface MviView extends MvpView {\npublic void render(VS viewstate);\n\n}\nUsage example\npublic class MainActivity extends Activity implements MviView {\n(...)\npublic void render(SomeViewState viewstate){\n\n}\n}\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/258, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrnIfkQczbb6AX3VC8fkK0QT_qIaSks5sIw3cgaJpZM4OIwgf\n.\n. Ok, the Problem was introduced with the lifecycle change of #257 to onStop() (was onDestroyView() before). \nI have to rethink the solution of #257 or maybe introduce breaking API changes (see #262)\n\n. because attachView() is called possible more often (since invoked in onStart())  then detachView() (called in onDestroy() ). See #274. Feel free to reopen this issue if 3.1.0 (snapshot) doesn't solve this porblem.. We have some similar discussion about SnackBar here #255 \nHowever, I think navigation can be seen as \"side effect\" since it is not affecting (nor changing) the state for your current View. For Example the state of  ProductDetailsActivity is not changed by navigation per se, right?\nNavigation is \"just\" a side effect of a state change in ProductDetailsViewState. Side effects can be modeled in RxJava with doOnNext() operator.\nI think something like this should work:\nAssuming you have some class Navigator:\n```java\nclass Navigator {\n    private final Activity activity;\n@Inject\npublic Navigator(Activity activity){\n    this.activity = activity;\n}\n\npublic void navigateToTestActivity(){\n      TestClickActivity.start(activity);\n}\n\n}\n```\nThen you could inject the Navigator into ProductDetailsPresenter\n```java\nclass ProductDetailsPresenter extends MviBasePresenter<...> {\nprivate final Navigator navigator;\n@Inject\n   public ProductDetailsPresenter(Navigator navigator){\n         this.navigator = navigator;\n    }\n@Override protected void bindIntents() {\n...\nObservable<ProductDetailsViewState> loadDetails =\n    intent(ProductDetailsView::loadDetailsIntent)\n        .doOnNext(productId -> Timber.d(\"intent: load details for product id = %s\", productId))\n        .flatMap(interactor::getDetails)\n        .observeOn(AndroidSchedulers.mainThread());\n\nObservable<ProductDetailsViewState> clickTest =\n    intent(ProductDetailsView::testBtnIntent)\n    .map((aBoolean) ->  new ProductDetailsViewState.TestViewState())\n    .doOnNext( aBoolean -> navigator.navigateToTestActivity() ); // Navigation as side effect\n\nsubscribeViewState(loadDetails.mergeWith(clickTest), ProductDetailsView::render);\n\n} \n}\n```\nOf course you have to keep in mind that Navigator might leak the Activity on config change (since presenter is kept during config change). I just wanted to illustrate a possible solution.\nDoes this makes sense?. Jfyi: I have figured out a simple pattern of how to do navigation properly\n(not only MVI related, but works well with MVI).\nI can share it next week as I'm going to present it on a Meetup next Monday.\nStay tuned.\nAndy Byrnes notifications@github.com schrieb am Mi., 11. Apr. 2018, 06:22:\n\nWould it be feasible to allow certain View States to be consumed instead\nof replacing the previous one?\n@skykelsey https://github.com/skykelsey For this I've been having a\ndummy state that gets emitted by navigation intents (I call it NoOp) and\nis just filtered out to avoid any unnecessary renderings:\nval intent1 = intent(...)val intent2 = intent(...)\nval viewStateObservable = Observable.merge(intent1, intent1).filter { it !is NoOp }\nsubscribeViewState(viewStateObservable, View::render)\nThis, however, doesn't solve the main problem at hand, for which I still\nhaven't come up with an elegant solution, unfortunately. It doesn't seem\nlike Mosby is well equipped to handle navigation in the presentation layer.\nSo in the meantime I've implemented a base presenter that inherits from\nMviPresenter and hacks away at its implementation details to retrieve the\nprevious view state, if it exists, and directly notify the view that a\nnavigation event has occurred. This, combined with filtering out NoOp\nview states, has yet to cause me any issues.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/261#issuecomment-380322785, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrgjDcIoSd1TIj7nYK38vlE5ctmrdks5tnYUegaJpZM4ONlOH\n.\n. My bad, I haven't had time to write a blog post or clean up my example repository ... Maybe next week ... sorry .... Here you go:\nhttp://hannesdorfmann.com/android/mosby3-mvi-8\n\nHope someone find it helpful.. Exactly my thoughts, thanks for your feedback. I would also go with Option 2 and add a @Deprecated on detachView(boolean). But yeah, detachView(boolean) will then be called (sometimes) twice: Once with true and once with false basically like this and maybe not symmetrical (with attachView(), but as you have already said, we never have claimed that attachView() and detachView() are symmetrical)\n```java\ninterface MvpPresenter {\n    public void attachView(V view);\n    @Deprecated public void detachView(boolean retain); // old\npublic void detachView(); // new\npublic void destroy();  // new\n\n}\n```\n```java\nclass MvpBasePresenter implements MvpPresenter {\n@Deprecated\n   @Override\n   public void detachView(boolean retainInstance){\n}\n\n@Override\n   public void detachView(){\n          detachView(true);\n   }\n@Override\n  public void destroy(){\n      detachView(false);\n  }\n}\n```\nHowever, the only remainig question is whether or not we can remove detachView(boolean) from MvpPresenter interface without breaking things:\n```java\ninterface MvpPresenter {\n    public void attachView(V view);\npublic void detachView(); // new\npublic void destroy();  // new\n\n}\n``` \nI think it is possible to do so because in concrete class MvpBasePresenter we can define this method @Deprecated void detachView(boolean) or do you see any problem with this approach?\nSo basically remove the deprecated method from interface but add it to each Presenter class to avoid compile errors.\n. See #274 . Thanks!. MviFragments Lifecycle will be changed to onStart() and onStop() in next version. See #262 \nHowever, it sounds pretty strange that getActivity() is null. That should not be the case since onAttach() is called before onCreateView(). Yes, 3.0.5-SNAPSHOT uses onStart() - onStop() but has an error with\nfragmente on the backstack. Its not reay for production yet.\nSvetlozar Kostadinov notifications@github.com schrieb am So., 16. Juli\n2017, 19:31:\n\nMaybe I don't remember correctly. Probably I've encountered not a null\ngetActivity() but a non-initialized instance. In the past I thought that\nonCreateView() is called after the activity is created.\nIs the fragment lifecycle change already implemented to try it out in the\nSNAPSHOT?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/264#issuecomment-315624041, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrkcoZKuk4ogdOjc29D_29beoXlOXks5sOkkIgaJpZM4OZCjk\n.\n. Thanks for reporting. Seems like a bug. I will take a look at it in first\nweek of August.\n\nAlex Urzhumtcev notifications@github.com schrieb am Mi., 19. Juli 2017,\n10:26:\n\nHello, I discribed the problem on stackoverflow\nhttps://stackoverflow.com/questions/45165126/mosby-3-mvp-presenter-is-always-recreated-when-go-back-to-the-fragment-in-the\nfirst, but didn't get the response so far. So, answer my question here.\nWhen we do popBackStack and return to the previous fragment in the back\nstack, the bundle in the method onViewCreated(View view, Bundle bundle) is\nalways null due to the fact that onSaveInstanceState(Bundle outState)\nwasn't called before. So, when we go back, bundle is null and a presenter\n(and view state) is created again. How in this case we can reuse presenter\nand view state (and not recreate it)?\nYou can see a dummy example below. There is a fragment with 2 buttons. One\nbutton opens a new Fragment and another button goes to the previous one.\nWhen you go back, presenter and view states are recreated. That's not I\nneed, but I described above why it's happenning according to the code in\nthe library. Is there a way to ensure that we reuse presenter and view\nstate when we go back?\n`public class FirstFragment extends\nMvpViewStateFragment {\npublic static final String TAG = \"TAG\";\nprivate Button moveToAnotherFragmentButton;\nprivate Button moveBackButton;\n@nullable https://github.com/nullable\n@override https://github.com/override\npublic View onCreateView(final LayoutInflater inflater, @nullable\nhttps://github.com/nullable final ViewGroup container, @nullable\nhttps://github.com/nullable final Bundle savedInstanceState) {\nfinal View rootFragmentView = inflater.inflate(R.layout.first_fragment,\ncontainer, false);\nmoveToAnotherFragmentButton = (Button)\nrootFragmentView.findViewById(R.id.first_fragment_go_to_another_fragment_button);\nmoveBackButton = (Button)\nrootFragmentView.findViewById(R.id.first_fragment_back_button);\nreturn rootFragmentView;\n}\n@override https://github.com/override\npublic void onViewCreated(@nonnull https://github.com/nonnull final\nView view, @nullable https://github.com/nullable final Bundle\nsavedInstanceState) {\nsuper.onViewCreated(view, savedInstanceState);\nmoveToAnotherFragmentButton.setOnClickListener(ignored -> addToStack(FirstFragment.class));\nmoveBackButton.setOnClickListener(ignored -> getFragmentManager().popBackStack());\n}\n@override https://github.com/override\n@nonnull https://github.com/nonnull\npublic FirstFragmentPresenter createPresenter() {\nLog.e(TAG, \"createPresenter\");\nreturn new FirstFragmentPresenter();\n}\n@nonnull https://github.com/nonnull\n@override https://github.com/override\npublic FirstFragmentViewState createViewState() {\nLog.e(TAG, \"createViewState\");\nreturn new FirstFragmentViewState();\n}\n@override https://github.com/override\npublic void onNewViewStateInstance() {\nLog.e(TAG, \"onNewViewStateInstance\");\n}\nprivate void addToStack(@nonnull https://github.com/nonnull final\nClass<? extends Fragment> fragmentClass) {\nfinal FragmentManager fragmentManager = getFragmentManager();\nif (fragmentManager.isDestroyed()) {\nthrow new UnexpectedException(\"FragmentManager is destroyed\");\n}\nfinal Fragment fragment = Fragment.instantiate(getContext(), fragmentClass.getName());\nfinal FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\nfragmentTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);\nfragmentTransaction.replace(R.id.activity_main_content_container, fragment, null)\n        .addToBackStack(null)\n        .commit();\n}\n}`\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/265, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrqWkiiJ1hwzpaxkglNXcPdQ1lCPxks5sPb3MgaJpZM4OcZK-\n.\n. I read your reported issue again and actually it is not a bug, it has never been implemented and we never claimed that MVP + Backstack work. \n\nThe philosophical reason behind this is:\nIf there is no View, do we need the Presenter to keep alive? If Presenter will update view while not attached, then this \"update\" event will be lost? Therefore we thought it is easier to not support this feature out of the box but rather \"recreate\" everything so that fresh data is loaded as if the presenter / Fragment would be started for the first time.\nHowever, Mosby Model-View-Intent (MVI) module supports fragment on the backstack because it is very clear that the unidirectional dataflow can still be alive even if no view is attached. If you use MVP and RxJava we encourage you to take a look at Mosby MVI.\nSo supporting MVP and backstack  is not a matter of technically possible to implement or not. We know how to implement it. We just didn't do it on purpose so far.\nNevertheless, we will add back stack support for MVP in Mosby 3.1  (scheduled somewhen around August 20) along with a new MVP Presenter that keeps the update events in an internal \"queue\" while view not attached and dispatch them once the view get's reattached.\nWhat do you think about this?. Since this is mostly yet another Presenter implementation I try to find\nsome time for it this week. Its not like moxy which needs an entirely\nframework and tools like annotation processing around it.\nThomas Vos notifications@github.com schrieb am Mo., 24. Juli 2017, 16:50:\n\n@sockeqwe https://github.com/sockeqwe Thanks for an explanation about\nthe back stack. If Mosby 3.1 adds adds support for a \"queue\" it would be\ngreat! How would you recommend me implementing my code, until the new 3.1\napproach, so it will be easy to migrate?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/265#issuecomment-317447597, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrlvE91DYTA0IRmgyAtRX8CK9BKQUks5sRK9KgaJpZM4OcZK-\n.\n. Hi, sorry, not yet. Most likely I have time at end August  to work on\nthat...\n\nOn Do., 17. Aug. 2017, 18:52 Thomas Vos notifications@github.com wrote:\n\n@sockeqwe https://github.com/sockeqwe Hi Hannes, have you had a chance\nto work on the new presenter implementation? Could you share your idea\nabout on how you are going to implement it? If you have a snapshot ready,\nI'll be glad to help with testing. Thanks, Thomas\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/265#issuecomment-323131223, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrqs000n_etDBqxN9niUo1fr3MCEwks5sZG_HgaJpZM4OcZK-\n.\n. See #274. Feel free to reopen this issue if 3.1.0 (snapshot) doesn't solve this porblem.. Thanks,\nI will take a look tomorrow.\n\nWe actually use MviFragment and ViewPager a lot at work (in Production for\nmore than a year) and havent faced such an issue yet.\nLeonardo Ferrari notifications@github.com schrieb am Fr., 21. Juli 2017,\n22:24:\n\nHey Hannes,\nI created a sample project to show the bug. I'm using mosby with MVI\ninside a ViewPager (with stateAdapter), when you navigate to the mvi\nfragment, go back the view pager \"destruction\" offset and go forward again,\nthe app crashes.\nIt also happens if you start an Activity, navigate to the mvi fragment\n(inside view pager), go back (Destroying the Activity and start a new\nactivity), the crash also happens.\nThanks and nice job !\nMosby Version:3.0.4\nExpected behavior: Show fragment with no problem\nhttps://github.com/leonardo2204/mvibug\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/266, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrgxbsKnd5HvQmrA7HqMZMhBdQYo7ks5sQQkagaJpZM4Of2rA\n.\n. Ah that might be the reason. Thanks for the information!\n\nLeonardo Ferrari notifications@github.com schrieb am Fr., 21. Juli 2017,\n22:41:\n\nThanks for the quick reply.\nJust a heads up, the problem seems to occur with FragmentStatePagerAdapter,\nchanging to FragmentPagerAdapter works fine.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/266#issuecomment-317107266, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrlH_b3lJsaz4SHzYrb8KjrG02eb9ks5sQQzjgaJpZM4Of2rA\n.\n. Without having looked at your code, i think I know what the problem is.\nshould be easy to reproduce and fix with your provided example.\n\nLeonardo Ferrari notifications@github.com schrieb am Fr., 21. Juli 2017,\n23:07:\n\nSure, I'm trying to figure out here also, I learnt that the fragment and\nactivity variables get destroyed, but the MviDelegate stays in memory.\nAfter going back and forth, it tries to get the activity or fragment, but\nthe delegate constructor is not called (since it's kept in memory), and it\ncrahses.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/266#issuecomment-317112964, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrviccDXNlJOCeq3Gxd-60Dx6-VtFks5sQRMsgaJpZM4Of2rA\n.\n. Interesting, you do the following:\n\n```java\n    List fragmentList =\n        Arrays.asList(new EmptyFragment(), new EmptyFragment(), new MviFragment());\npublic MyAdapter(FragmentManager fm) {\n  super(fm);\n}\n\n@Override public Fragment getItem(int position) {\n  return fragmentList.get(position);\n}\n\n@Override public int getCount() {\n  return fragmentList.size();\n}\n\n}\n```\nSo you keep all your fragments in the \u00b4fragmentList`  and reuse the instance from the list.\nI don't know if this is good practice (and I never did it like that, hence I never run into this issue).\nfrom official google docs:\n```java\n    /*\n     * A simple pager adapter that represents 5 ScreenSlidePageFragment objects, in\n     * sequence.\n     /\n    private class ScreenSlidePagerAdapter extends FragmentStatePagerAdapter {\n        public ScreenSlidePagerAdapter(FragmentManager fm) {\n            super(fm);\n        }\n    @Override\n    public Fragment getItem(int position) {\n        return new ScreenSlidePageFragment();\n    }\n\n    @Override\n    public int getCount() {\n        return NUM_PAGES;\n    }\n\n```\nSource: https://developer.android.com/training/animation/screen-slide.html#viewpager\nSo I have no idea if this is a good idea to keep the fragment in memory like you did. Not sure if this is the intended way.\nWith an adapter like this (creates new fragment every time) I don't run into this bug:\n```java\nclass MyAdapter extends FragmentStatePagerAdapter {\npublic MyAdapter(FragmentManager fm) {\n  super(fm);\n}\n\n@Override public Fragment getItem(int position) {\n        if (position == 2)\n            return new MviFragment();\n\n        return new EmptyFragment();\n}\n\n@Override public int getCount() {\n  return fragmentList.size();\n}\n\n}\n```\n\nIt also happens if you start an Activity, navigate to the mvi fragment (inside view pager), go back (Destroying the Activity and start a new activity), the crash also happens.\n\nNot able to reproduce this add all (with your original ViewPager adapter that uses fragmentList).. I could fix this crash, but I'm not sure what the consequences are and if I should let them left to the developer.\nFor example: Presenter gets detachView(false) or (unbindIntents() in MVI) call so that the presenter is technically \"destroyed\" if you swipe away from the MviFragment in ViewPager. Then if you swipe back the MviFragment it is reused from your List of Fragments, so is the associated Presenter. However, the Presenter has technically been \"destoryed\" before by calling detachView(false) / unbindIntents(). So we might have to setup the presenter again by calling bindIntents() etc. That would be doable. But is your presenter still working as expected after \"reusing it?\" it really depends if the user stores some internal state in his presenter. Then it might not be working anymore as expected. Hence instantiating a new fresh Presenter instance would be better. But then what's the point of keeping a Fragment Reference in the list? \nSo a possible fix could be: Don't crash, but don't reuse the presenter (so create a new fresh Presenter instance).\nWhat do you think?. thx!. I prefer integration tests over unit tests ...\nAlex Zhdanov notifications@github.com schrieb am So., 13. Aug. 2017,\n14:40:\n\nHello! In HomePresenterTest.java\nhttps://github.com/sockeqwe/mosby/blob/master/sample-mvi/src/test/java/com/hannesdorfmann/mosby3/sample/mvi/view/home/HomePresenterTest.java\nfrom sample app presenter is tested as indivisible item. Would it better to\nseparate tests and create tests for stateReducer and tests for\npartialChangesObservable?\n(where partialChangesObservable is Observable that is created by merging\npartial changes from different intents)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/268, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnriBTP8sHbHcHBFkT9pKGxW0g23Y5ks5sXu7OgaJpZM4O1rVA\n.\n. I have to write my opinion down in a blog post, but in a nutshell:\n\nWhy do we write unit tests?\nBecause we want to test a single unit in isolation.\nWhy isolation? Because in \"traditional software engineering\" we write code that is stateful and has side effect.\nBut what if we write software as composition of pure (no side effect, no state) functions? Then it doesn't matter if we test those function in isolation (unit test) or as part of a integration test because for the same input we are guaranteed to get the same output of a function, right? With MVI (if done right) and RxJava we do write such pure function alike code.\nActually, if we write integration tests, we are also testing the single units. For example HomePresenterTest is an integration test and also tests the state recuder? So what's the point of writing a unit test for the state reducer? You don't gain anything by testing your code twice (single unit test for state reducer and integration test \"HomePresenterTest\" that also covers state reducer).\nTherefore, I am much more into integration testing than unit testing.. Another blog post I have to write:\nIn my apps I write the code for tests in such a way that allows me to separate actions on screens (aka Intents) from assertions / evaluations so that I can run the same test specification (a screen action and an assertion) on  both, jvm (without emulator) for my daily app TDD alike development and instrumentation test (on emulator on CI server), by only having to maintain 1 test specification for both tests.. Actually it is not as fancy as it sounds :)\nyes, something like robot pattern. \nkotlin\ninterface HomeScreenRobot {\n    fun fireXYIntent()\n    fun getRenderedStates() : Observable<List<HomeViewState>>\n}\nand JvmHomeScreenRobot implements HomeScreenRobot and InstrumentationHomeRobot implements HomeScreenRobot\nThen my assertions:\n```kotlin\nclass HomeScreenAssertions (private val robot : HomeScreenRobot){\nprivat val timeoutSeconds : Int = 10\n fun `on click on XY --> State1 is rendered`() {\n     val expectedStates = listOf (state1)\n      robot.fireXYIntent()\n     val rendered = robot.getRenderedStates()\n                      .timeout(timeoutSeconds)\n                       .blockingGet(); // Since observable, we don't even need idling resources at all\n\n    assertEquals(expectedStates, rendered)\n }\n\n}\n```\nThen on Jvm Tests:\n```kotlin\nclass JvmHomeScreenTest {\n @Test\n fun `on click on XY --> State1 is rendered`() {\n        val robot = JvmHomeScreenrobot()\n        val assertions = HomeScreenAssertions(robot)\n\n       assertions.`on click on XY --> State1 is rendered`()\n   }\n\n}\n```\nthe rest is pretty similar to HomePresenterTest\nOn instrumentation tests:\nThe trick is that HomeScreenActivity  is not implementing the Intents and render method directly, but has a  UiBinder injected via dagger:\n```kotlin\nclass HomeActivity : MviActivity {\n    @Inject lateinit var uiBinder : UiBinder\noverride fun onCreate(){\n     setContentView(...)\n    ViewGroup rootView = findViewbyId(...)\n    // do dagger injection stuff\n   application.getApplicationComponent()\n         .homeModule(rootView) // rootView is used for UiBinder\n         .build()\n        .inject(this)\n}\n\noverride fun xyIntent() : Obervable = uiBinder.xyIntent() // delegation\n   override fun render(HomeViewState state) = uiBinder.render(state) // delegation\n}\n```\n```kotlin\nopen class UiBinder(internal val rootView : ViewGroup) : HomeView {\nprivate val xyButton = rootView.findViewById(...);\nopen override fun xyIntent() = RxView.clicks(xyButton);\nopen override fun render(state : HomeViewState) {\n      // render UI widgets\n      ...\n   }\n}\n```\n```kotlin\nclass InstrumentationHomeScreenTest {\n     // TODO prepare Dagger Modules to use InstrumentationUiBinder\n @Test\n fun `on click on XY --> State1 is rendered`() {\n        val instrumentationUiBinder : UiBinder = ...\n        val robot = InstrumentationHomeScreenrobot(instrumentationUiBinder)\n        val assertions = HomeScreenAssertions(robot)\n\n       assertions.`on click on XY --> State1 is rendered`()\n   }\n\n}\n```\n```kotlin\nclass InstrumentationUiBinder(rootView : ViewGroup) : UiBinder(rootView) {\n     private var renderdStates = emptyList()\n     val stateSubjet  = PublishSubject.create>() // used by robot to subscribe too\n override fun xyIntent() : Observable<xy> {\n         // make screenshot of UI --> UI tests without screenshots doesn't make sense\n       Screenshot.snap(rootView)\n           .record(); \n    return super.xyIntent() // call real UiBinder\n}\n\n\noverride fun render(state : HomeViewState) {\n       super.render(state)\n\n          // make screenshot of UI --> UI tests without screenshots doesn't make sense\n        Screenshot.snap(rootView)\n               .record();\n\n        // Thread safe since always runs on main ui thread\n        renderdStates += state\n        publishSubject.onNext(renderedStates) // Notify robot\n }\n\n}\n```\nIf you want to you can also build a nice DSL for robot and assertion in kotlin.\nFor screenshots we use http://facebook.github.io/screenshot-tests-for-android/\nof course this is just a small (pseudocode) illustration of the whole picture. \nFurthermore, you can easly write integration tests for different screens by using their robots and assertions like doing something in DetailsScreen\u00b4 also updatesHomeScreen\u00b4 \nActually I dont need espresso that much nor idling resources at all. I use the state from \u00b4view.render()to verify that the data (what other people do with espresso like verify that a TextView displays the text xy) and screenshots to verify that UI widgets are displaying things as expected. Makes much more sense to me than using espresso (and custom ViewMatchers) to verify your data is correct displayed. However, if you want to use espresso, feel free to use it inInstrumentationUiBinder. I just use espresso to \"tirgger\" the button click event inInstrumentationHomeScreenRobot` but not to verify things.\nOverall, not that fancy. Just a matter of architecting your test code properly (separation of concerns, dependency injection) as you would do with your regular app code ...\nThe \"new\" thing might be UiBinder ...\nmost likely I wouldn't write JVM tests if instrumentation tests run fast enough to do TDD alike development.\nDoes it make sense?. Thanks!. Hey,\nI see ... This bug seems to occur if you have setRetainInstance(true) and `new FragmentMvpViewStateDelegateImpl<>(..., keepPresenterAndViewStateOnBackstack  = false)\u00b4 so you don't want to keep the presenter.\nBeside that this is a bug (thanks for reporting),\nwhat is actually the reason behind  using setRetainInstance(true) in that case? Does it work as expected with setRetainInstance(false)?. See #274. Feel free to reopen this issue if 3.1.0 (snapshot) doesn't solve this porblem.. Hey here, what exactly do you want to test?\nInteractors?\nWe had a discussion lately (see #168) where I have explained why I think integration testing makes more sense especially with MVI. You may find this approach on testing interesting too. Would like to hear your feedback.. Hey,\nsorry, the correct issue is #268  (not #168). Thanks for taking the time to write down your feedback.\nRegarding your original question:\nIf you just want to test Interactors, then go ahead and write tests like:\n```java\n@Test void interactorIsReturningFoo(){\n   Observable observale =  interactor.doSomething();\n   Foo foo = observable.blockingFirst();\nassertEquals(expectedFoo, foo);\n}\n```\nand so on ... But I don't understand how this is related to MVI or Mosby?\n\nIf that's an example of PresenterTest: https://github.com/sockeqwe/mosby/blob/master/sample-mvi/src/test/java/com/hannesdorfmann/mosby3/sample/mvi/view/home/HomePresenterTest.java I would say - it just hurt my eyes.\n\nThis is not a Presenter Test, this is a Integration test as it tests all layers down from Presenter inclusive Business Logic state reducer etc. Perhaps we have a different understanding / definition of what a presenter test is. The only \"Test Double\" in this test is the View Layer, but this could easily be run on a real android view too.\n\nPresenters are part of the delivery mechanism, that is, they are Android specific (in our case). They stay outside of the boundary of my app (Black vertical line in the diagram).\n\nI see your point, but I have a different opinion about that which I think comes from the fact that you are advocating for writing unit tests on business logic / Interactors whereas I recommend to write more integration tests instead of unit tests. So the question is: where does a integration test begins? If you have two parts in your business logic an put them together and test them together then it is already an integration test. From my point of view integration tests should cover as much as possible, ideally from (android) View layer to the deepest part of your business logic and all the way back. Unfortunately, real android view tests (instrumentation tests) are slow, hence often we mock the View layer. Nevertheless, I recommend to write integration tests with android View layer running on a real android device.\nHence, in most cases I would draw the boundary of my MVI based app (Black vertical line in the diagram) between view (interface) and presenter unless Presenter is really android specific which I only rarely can remember that this was the case in one of my apps. Either android specific components were in the view layer or the very end of the business logic like a sqlite database. Both implementation details should be hidden behind a Interface (boundary).\n\nIf I change the framework (Mosby) or simply remove the need for Presenters in my app I would have to write whole new tests or isolation layer for that\n\nThat is the big advantage of integration testing. You see your whole app as a single big black box. The View Interface defines the boundary and usually that is all you need to know. Think of it in a mathematical way. If you have a mathematic function definition like this:\nf(x,y) = x + y\nthen the only thing you need to know to test this function is the public api this function offers: inputs x, y and the return value. But you don't care about the implementation detail (x+y).\nIf you apply that idea on a app:\nf (intentX, intentY) = ... compute state ...  // implementation details\nSo if f(...) is a function describing your whole app (or for simplicity lets say 1 screen) this is all your blackbox / integrationn needs to know (as public API) to test your app / screen. There is no presenter in this equation. If you remove the presenter, the public API doesn't change. Hence you don't need to write new tests (or adjust any existing test) if you remove the presenter. \n\nIf I want to deliver my app via the web and have some additional use cases for that, how should I test them? Create new isolation layer for \"Web\" Use Cases?\n\ni don't understand the question but if your question is if I take my app and replace the android View with a website or whatever else then your website obviously have to implement the View Interface and that's it. No need to change other internals (implementation details) within the Boundary (Black vertical line in the diagram) .\n\nPresenter tests are required, but not for every Presenter (as discussed previously). So tests covering them should be written (and for state reducers) as the need for that arises.\n\nAgain, we might have a different definition of what a presenter test is. I, personally, prefer integration test over  unit tests. If you write unit tests for Interactor, State Reducer and Presenter in isolation, you can never be sure that they integrate and work together as expected. \nthis is a nice illustration of the issue with unit tests: https://twitter.com/ThePracticalDev/status/845638950517706752\nSo you may need some kind of integration test for those components anyway. But then, what is the point of writing integration and unit tests? You gain nothing if you test things twice.\n\nOne Use Case can be used by multiple Presenters - should I duplicate my test logic just to cover all Presenters?\n\nIt sounds rough, but yes you should, otherwise it is not an integration test since this one Use Case is interacting with other parts too, right (otherwise it is exactly the same presenter as an already existing one which is senseless)? Also this ensures that if you refactor that use case, you are sure that it works for all presenters / screens that use this use case, which is not 100% guaranteed if you just write a single unit test for the use case.\n\nThe apparent overuse of a \"Test Double\" (HomeViewRobot) in the Presenter Test (same as the referenced above) shows that testing is not as simple as MVI promised at first:\n\nThere is exactly one \"Test Double\" for the View layer. Everything else are the real app components so the promise:\nassertEquals(expectedViewState, viewState)\nstill holds (if you write integration tests / black box tests aiming to cover all components) because it is exactly like:\nstate = f (intentX, intentY)\nassertEquals(expectedState, state). Thanks for reporting!\nYes, this is a known issue (there are some related issues like better\nbackstack support etc) and I will try to fix this as soon as possible,\nhopefully within the next two weeks as it is involves slightly bigger\ninternal changes.\nOn Do., 31. Aug. 2017, 19:54 Zahid Rasheed notifications@github.com wrote:\n\nI am trying to dispose my subscriptions like below in my presenter\nextending MvpBasePresenter\n@override https://github.com/override\npublic void detachView(boolean retainInstance) {\ncompositeSubscription.clear();\nsuper.detachView(retainInstance);\n}\nThis works when I press the back key but when I press the home key, it\nnever clear subscriptions.\nMainActivity V \u21e2 onPause()\nMainActivity V \u21e0 onPause [8ms]\nMainActivity V \u21e2 onStop()\nXYZController V \u21e2 onDetach(view=android.widget.RelativeLayout{...})\nV \u21e0 onDetach [0ms]\nMainActivity V \u21e0 onStop [6ms]\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/273, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrms7Ehp33-CdsUrCJqSKBx8TInbrks5sdvM4gaJpZM4PJMDc\n.\n. Im working on that, seems that I can provide a snapshot with a fix for that tomorrow ( at least for MVI, MVP soon afterwards). See #274. Feel free to reopen this issue if 3.1.0 (snapshot) doesn't solve this porblem.. hm that is strange ... do you use MVI, MVP, MVP + ViewState? 3.1.0-snapshot?. That seems like the desired behavior?\nIf you app is in background, but hasn't stopped yet, there is still a view\n(although not visible on screen) that can be updated. Hence view not\ndetached from presenter and therefore never called.\n\nSince you are\u200b using Conductor: the new snapshot 3.1.0 is not compatible\nyet with current conductor-mosby plugin 3.0.x ...\nOn Di., 3. Okt. 2017, 11:51 Zahid Rasheed notifications@github.com wrote:\n\nWe are using MVP and mvp-conductor (3.0.0)\nmvp version: 3.0.4\nApp goes into background Don't keep activities: On\nStartZoneController  V  \u21e2 onViewBound(view=android.widget.RelativeLayout{384c681 V.E...... ......ID 0,0-0,0})\n                     V  \u21e0 onViewBound [9ms]\n StartZonePresenter  V  \u21e2 attachView(view=com.example.startzone.presentation.StartZoneController@cca0326)\n                     V  \u21e0 attachView [10ms]\nStartZoneController  V  \u21e2 onDetach(view=android.widget.RelativeLayout{384c681 V.E...... ......ID 0,0-1440,175})\n                     V  \u21e0 onDetach [0ms]\n StartZonePresenter  V  \u21e2 detachView(retainInstance=false)\n                     V  \u21e0 detachView [1ms]\n\nApp goes into background Don't keep activities: Off\nStartZoneController  V  \u21e2 onViewBound(view=android.widget.RelativeLayout{384c681 V.E...... ......ID 0,0-0,0})\n                     V  \u21e0 onViewBound [9ms]\n StartZonePresenter  V  \u21e2 attachView(view=com.example.startzone.presentation.StartZoneController@cca0326)\n                     V  \u21e0 attachView [10ms]\nStartZoneController  V  \u21e2 onDetach(view=android.widget.RelativeLayout{384c681 V.E...... ......ID 0,0-1440,175})\n                     V  \u21e0 onDetach [0ms]\n\n^^ Presenter was never detached.\nmvp version: 3.1.0-SNAPTSHOT\nI can see that detachView is now deprecated. So now I am looking for:\ndetachView() and destroy().\nApp goes into background Don't keep activities: On\nStartZoneController  V  \u21e2 onViewBound(view=android.widget.RelativeLayout{384c681 V.E...... ......ID 0,0-0,0})\n                     V  \u21e0 onViewBound [9ms]\n StartZonePresenter  V  \u21e2 attachView(view=com.example.startzone.presentation.StartZoneController@cca0326)\n                     V  \u21e0 attachView [10ms]\nStartZoneController  V  \u21e2 onDetach(view=android.widget.RelativeLayout{384c681 V.E...... ......ID 0,0-1440,175})\n                     V  \u21e0 onDetach [0ms]\n StartZonePresenter  V  \u21e2 detachView(retainInstance=false)\n                     V  \u21e0 detachView [1ms]\n\n^^No detachView() or destroy()??\nApp goes into background Don't keep activities: Off\nStartZoneController  V  \u21e2 onViewBound(view=android.widget.RelativeLayout{384c681 V.E...... ......ID 0,0-0,0})\n                     V  \u21e0 onViewBound [9ms]\n StartZonePresenter  V  \u21e2 attachView(view=com.example.startzone.presentation.StartZoneController@cca0326)\n                     V  \u21e0 attachView [10ms]\nStartZoneController  V  \u21e2 onDetach(view=android.widget.RelativeLayout{384c681 V.E...... ......ID 0,0-1440,175})\n                     V  \u21e0 onDetach [0ms]\n\n^^No detachView(retainInstance=false), detachView() or destroy()??\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/273#issuecomment-333794203, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrl9bLu_22bO6QFbg7N9vHPV92H59ks5sogObgaJpZM4PJMDc\n.\n. You are right, Presenter should be destroyed ... \nThanks for reporting.\n\nDo you have the source code where you use this somewhere on github so I can take that code for debugging? If not, no problem, it's just that it would save me some time to set up things .... The reason is that (historically) people start to invoke presenter methods right from Activity's onCreate() method which requires that the presenter is alive and has a view attached already in Activity.onCreate(). Good point. I guess adding ifViewAttached(ViewAction) is the best way to\ndeal with that problem.\nI'm wondering if we could make a method that combine both options with a\nparameter (boolean flag) to specify if ViewAction should be added to\ninternal queue or not ...\nThomas Vos notifications@github.com schrieb am Di., 31. Okt. 2017, 19:41:\n\nI have a suggestion for the MvpQueuingBasePresenter. Currenly if you use\nthis presenter implementation you can only use the method\nonceViewAttached(ViewAction). There is no way to just 'skip' the view\naction.\nIn an app I'm creating I made my own presenter implementation with both\nthe methods onceViewAttached(ViewAction) and ifViewAttached(ViewAction).\nFor example if data is loaded I call onceViewAttached(ViewAction) because\nthis action cannot be skipped. However, if you want to show a message/error\ndialog to the user, should the dialog show if the user is navigating 'up'\nin the fragment backstack? I don't think a dialog is relevant anymore\nbecause the view could already have changed state.\nWhat do you think about adding a method like ifViewAttached(ViewAction),\nor maybe a method to cancel the current view actions that are in the queue?\n\u2014\nYou are receiving this because you were assigned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/274#issuecomment-340862527, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrjYjQhfCeHR-wO_jupaxefMDNQGlks5sx2nNgaJpZM4PT5ws\n.\n. This should be fixed with upcoming 3.1.0 version.\nPlease try 3.1.0-SNAPSHOT and let me know if that fixes this issue.\n\nOn So., 17. Sep. 2017, 01:34 Matias Radzinski notifications@github.com\nwrote:\n\nI'm currently developing an app using Mosby 3.0.4 and LeakCanary once in a\nwhile tells me there's a 2 or 3 MB leak here\nhttps://github.com/sockeqwe/mosby/blob/e9462d1011b2acb3e3d6b6605fc17cc5496778c6/presentermanager/src/main/java/com/hannesdorfmann/mosby3/PresenterManager.java#L40\n.\nThere aren't steps to reproduce it since it happens randomly (mostly upon\nclosing the app), but it's not a constant and can't seem to find a reason\nwhy it might be leaking there.\nAny ideas why this might be happening?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/275, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrsfjwmMgAeFxGcWix9k2icQVxbh0ks5sjFrygaJpZM4PZ-4b\n.\n. It's not breaking anything (like crashing),\nbut with Mosby Conductor the new internal changes introduced in 3.1.0 are\nnot applied yet as it requires some Mosby conductor internal changes too. I\ncan provide you a snapshot for Mosby conductor 3.1.0 on Monday.\n\nOn So., 17. Sep. 2017, 03:13 Matias Radzinski notifications@github.com\nwrote:\n\nI'm also using mosby-conductor. Will upgrading to 3.1.0 have any side\neffects? Just wondering if I'll need to update that one too.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/275#issuecomment-330005451, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrhlUZhSAQ6yZaDiun---y_qtXWKKks5sjHI3gaJpZM4PZ-4b\n.\n. Hm, I had an error in reasoning. PresenterManager shouldn't be used at all with conductor.\nDo you use multiple Activities and MviActivity or the like?. I hope this week.\nMosby Conductor mist likely next week.. In 3.1.0 it can distinguish between not being usee anymore and temporarily\ndetached.\n\nThere are two things to note here:\n1. Mosby-Conductor is not using 3.1.0 internally even if you update the\nMosby dependency itself to 3.1.0 because\u200b Mosby-Conductors delegate is not\nmigrated to 3.1.0 yet.\n2. Mosby-Conductor is not using PresenterMangaer at all, hence it is very\nstrange that you see leak canary reports. I will investigate if there is a\nunwanted reference in Mosby-Conductor.\n3. There is a little chance that leak canary is reporting a false positive,\nbecause depending on how you set up leak canary, it might be the case that\nleak carany is checking to early and the presenter is not removed yet, but\nwill be removed later.\n4. Its totally possible that it is indeed a bug, but I wasnt able to\nreproduce it yet in isolation.\nSiavash A notifications@github.com schrieb am So., 12. Nov. 2017, 13:39:\n\n@sockeqwe https://github.com/sockeqwe the real problem is your Delegate\nclasses Implementation can't recognized the view(for example fragment) is\ntotally destroyed or it's destroyed just for orientation change.\nif they store anything like context in static field they get leak from\nLeakCanary but what about when you just don't need the presenter class\nanymore and it remained in PresenterManager? the presenter is not needed\nanymore.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/275#issuecomment-343734345, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnroWw7oDnrwpYUIc3CgBq46JSYQ_aks5s1ubmgaJpZM4PZ-4b\n.\n. @siavashabdoli which classes / code do you think can create a leak?. Hey there,\nI'm sorry for the late response but I have been busy last week. I'm happy that you have started this discussion and for now I can't think of any better place then the issue tracker, so that's completely fine.\n\nI really like the idea of \"MVI units\". We have a similar setup at work and it worked out well so far for us.\nRegarding Dependency injection tactics:\nUnfortunately Android is not build in a dependency injection friendly way. You can't pass dependencies as constructor parameter to Activities or Fragments or ViewGroups if inflated from xml. However, I played around a little bit with the idea of instantiating ViewGroups manually (instead of xml layout) so that I can pass in dependencies as constructor parameter. Unfortunately, I haven't had too much time to create bigger and more complex examples, but so far I can tell that an advantage of that approach is that dependency injection is easier, espacially scoping because all \"MVI units\" that share the same scope are basically living in the same \"scope container\" like a Fragment (or Activity). So Fragment is just some kind of \"Container\" and I instantiate all MVI Units, which are just MVI ViewGroups, manually instead of xml inflation and pass the dependecies to those MVI Units manually as constructor parameter. Of course this also has some disadvantages: Styling of this MVI units also has to be done mostly in code which compared to xml is a little bit cumbersome (but that is basically how iOS guys are doing it too). Regarding Coordinators: This \"pattern\" is widely used and accepted on iOS development but only works well there because iOS developers have full control over instantiating ViewControllers.\nRay Ryan gave a talk Reactive Workflows which seems to go into a similar direction, but I haven't had time yet to check that out in detail.\nRegarding abstractions: \nThe question I ask myself is: what is the thing that takes long and slows me down? Usually, for me, the answer is writing UI. I mean, creating a Presenter, Interactor or business logic is quite simple and fast to do (i.e. define a retrofit interface). So i defenitely think duplicating  code (for example for interactor or presenter) is better than searching for a proper abstraction for them to reuse it. Those are cheap to duplicate. For UI i try to keep it simple and stylable through xml. If I still need a similar UI widget with different behavior, I think duplicating is a good idea. Also delegating stuff worked quite good for me in UI layer rather than abstraction or inheritances. i.e. Widget A and widget B does some similar parts, but others are different. Then putting out the similar part and put it into an own class and delegate from both widgets.\nI'm sorry, but I don't have concrete answers for your questions \ud83d\ude04 . Thanks for sharing your opinion. \n I'm a little bit busy right now, I will take a look at this later this week.. In an early prototype of Mosby 3.0 there was no createPresenter() in MviActivity or MviFragment (haven't started with MviViewGroup implementation), so the View layer had no knowledge of the presenter. Rather there was some kind of \"coordinator / factory\" that was listening for lifecycle events was responsible to do createPresenter() there and attach the view to the presenter.\nThe advantage is that you don't have to inject a presenter into your view. This design allows to reuse the View as the view is basically just an interface with intents and a render method (and a ViewState).\nI presented this solution to some developers, however, they found it rather inconvenient to create a factory / coordinator for each View. So at the end this idea has been discarded, although I have some projects where I still use this approach (closed source, sorry). I also had the feeling that reusability and building independent components was not the highest priority for them.\nRegarding reusability in general my approach is to figure out what is actually expensive to build and time-consuming so that you would like to share / reuse it. I come to the conclusion that it is \"business logic stuff\"  and UI. Business logic is easy to share and reuse as you have full controll over that. In contrast to business logic, for UI / View Layer, you are not in full control of instantiation, lifecycle and other android specific things. So I really just want to reuse the UI Component (view layer) where I define a interface with intents this UI component can trigger and a ViewState that this UI component expects to get to render. So I basically put this 3 classes / interfaces  (ViewState, View Interface and concrete View implementation) into one library and reuse it. So usually I don't pack the presenter into this \"component bundle\", only the View layer as from my point of view the presenter is easy to write your own and also depends a little bit on the business logic you want to interact with (and as described before, business logic is easy to reuse).\nI'm considering going back to that early prototype approach and introducing \"coordinators / factories\" in Mosby 3.2 or 4.x0 to fully get rid of the dependency to the Presenter in View layer. This should make it more dependency injection friendly as no dependency must be injected in View at all \ud83d\ude04. Unfortunately, i'm not sure how this approach solves nesting MVI components, but perhaps this is then just a matter of using views in xml layout hierarchies and put the (shared) state computation together somewhere else .... Thanks!. Thanks! Looks much better now \ud83d\udc4d . Thanks!. Thanks!. Yep, Actvity is required to determine if view is destroyed temporarily or\npermanently and therfore release / destroy Presenter. Im not sure how to\nget this information without activity. I will check that next week but I'm\nafraid that there is no simple solution.\nWhat you can do, however, is to stick with Mosby 2.x for activityless\nViewGroups. You can totally use Mosby 2 and Mosby 3 at the same time in\nyour project.\nLuis R. notifications@github.com schrieb am Do., 23. Nov. 2017, 11:45:\n\nHello!\nWe've been using Mosby for a fair amount of time on a production app.\nWe've had a lot of work coming in, and we haven't been able to update it to\nthe v3. We were happy with v2, but there were several weird crashes that we\nwanted to solve.\nAfter reading the instructions, the update process went super smooth. All\nthe views that we've been using on the app were correctly rendered. Here is\nwhere the complain begins \ud83d\ude04\nOur app is using the WindowManager to show contextual info when you are\noutside of the app. Just like the Facebook Bubbles. For example, our root\nview inherits from MvpRelativeLayout.\nWhen the views are attached to the window, the PresenterManager class\ntries to obtain the Activity, with no success. The context you can retrieve\nthere, is directly the Application object, so it is impossible to cast it\nto Activity.\nIf you want to me to assemble a little project with the parts that would\nreproduce the issue, don't doubt to ask\nMosby Version:\nv3.0.4\nActual behavior (include a stacktrace if crash)\n11-22 23:58:49.622 17039-17039/? E/AndroidRuntime: FATAL EXCEPTION: main\n                                                   Process: com.XXX, PID: 17039\n                                                   java.lang.IllegalStateException: Could not find the surrounding Activity\n                                                       at com.hannesdorfmann.mosby3.PresenterManager.getActivity(PresenterManager.java:229)\n                                                       at com.hannesdorfmann.mosby3.mvp.delegate.ViewGroupMvpDelegateImpl.(ViewGroupMvpDelegateImpl.java:79)\n                                                       at com.hannesdorfmann.mosby3.mvp.layout.MvpRelativeLayout.getMvpDelegate(MvpRelativeLayout.java:77)\n                                                       at com.hannesdorfmann.mosby3.mvp.layout.MvpRelativeLayout.onAttachedToWindow(MvpRelativeLayout.java:85)\n                                                       at XXXX.onAttachedToWindow(WidgetContainer.kt:107)\n                                                       at android.view.View.dispatchAttachedToWindow(View.java:17377)\n                                                       at android.view.ViewGroup.dispatchAttachedToWindow(ViewGroup.java:3319)\n                                                       at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:1658)\n                                                       at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:1386)\n                                                       at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:6733)\n                                                       at android.view.Choreographer$CallbackRecord.run(Choreographer.java:911)\n                                                       at android.view.Choreographer.doCallbacks(Choreographer.java:723)\n                                                       at android.view.Choreographer.doFrame(Choreographer.java:658)\n                                                       at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:897)\n                                                       at android.os.Handler.handleCallback(Handler.java:789)\n                                                       at android.os.Handler.dispatchMessage(Handler.java:98)\n                                                       at android.os.Looper.loop(Looper.java:164)\n                                                       at android.app.ActivityThread.main(ActivityThread.java:6541)\n                                                       at java.lang.reflect.Method.invoke(Native Method)\n                                                       at com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:240)\n                                                       at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:767)\n```\nSteps to reproduce the behavior or link to a sample repository\nAdd any MvpViewGroup class to the WindowManager (using the SYSTEM_ALERT_WINDOW)\nThank you very much!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/281, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrl4vJZe3gdI1pJO7RuD1-KYgf6clks5s5VrfgaJpZM4QooGS\n.\n. It has other reasons why this shouldn't be used in java (it's not about nicer syntax). Mainly because of garbage collection and WeakReference, see https://github.com/sockeqwe/mosby/issues/233. It will be kept deprecated to not break backward compatibility.\n\nAlthough you dont have that problem described in #233 by using kotlin per se but you still can run (theoretically, in practice not very likely to happen) in this \"issue\":\nkotlin\nview?.setData( someData) // This runs fine because view != null\n// <-- gc happens -->\nview?.hideProgressBar() // view == null --> never executed\nIt's not really an issue for the most apps, but perhaps in some edgecases it is important to run either both view.setData() and view.hideProgressbar() or none of them.  ifViewAttached() guarantees that there is a view != null within the lambda or doesn't run at all:\nkotlin\nifViewAttached { view ->\n    view.showData( someData )\n    view.hideProressBar()\n}. Thanks. Yes, will do so ...\nUnfortunately, I wanted to keep things simple and haven't used Dagger. Now for the MVI intercepting part it may be easier to use dagger. So perhaps I have to migrate the  sample app to dagger before.\nIn the meantime you can take a look at this presentation I gave earlier this year:\nhttps://speakerdeck.com/sockeqwe/reactive-statemanagement-with-model-view-intent\nThe testing part begins at slide number 92.\n. Sorry, I still havent found time to do it. In the mean time you may find this useful: \nhttps://www.youtube.com/watch?v=osM-1z5tJ4g&index=27&list=PLr5cF6ekyIDgWee0wtwMKSGcoMvt5fkn_&t=314s. Hey,\ncreatePresenter() is called from onCreate(). So you basically have to call super.onCreate() after you have read the bundle like this:\n```java\npublic class OfferDetailsPdfActivity extends MvpActivity implements OnPageChangeListener, OfferDetailsPdfMvp.View {\nprivate OfferDetailsPdfPresenterImplMvp presenter;\n    private int offerId;\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    Bundle extras = getIntent().getExtras();\n    Debug.d(TAG, \"onCreate: extras = \" + AndroidUtil.bundle2String(extras)\n            + \"\\nsavedInstanceState = \" + AndroidUtil.bundle2String(savedInstanceState)\n    );\n    if (extras != null) {\n        offerId = extras.getInt(Offer.ID);\n    }\n\n       super.onCreate(savedInstanceState);\n\n\n        setContentView(R.layout.offer_details_pdf);\n    ButterKnife.bind(this);\n}\n\n@NonNull\n@Override\npublic OfferDetailsPdfPresenterImplMvp createPresenter() {\n    Debug.d(TAG, \"createPresenter: offerId = \" + offerId);\n    presenter = new OfferDetailsPdfPresenterImplMvp(this, offerId);\n    return presenter;\n}\n\n```\nIm really sorry about that. It has some historical reasons and I don't want to break backward compatibility. Sorry.\nLet me know if that fixes your problem.. Most likely it will never be fixed as it would break backward compatibility. Also I don't consider this as a bug. \nThe problem is the following:\njava\npublic FooActivity extends MvpActivity<FooView, FooPresenter> {\n     @Override\n    protected void onCreate(Bundle bundle) {\n         super.onCreate(bundle);    // if we don't create the presenter in super.onCreate()\n         presenter.loadFoo();      // you can't use presenter here because presenter is null\n    }\n}\nSo if we move createPresenter() to something like onStart() (which happens after onCreate()) you can't use the presenter in onCreate() so your code would look like this:\n```java\npublic FooActivity extends MvpActivity {\n private int someId;\n\n @Override\nprotected void onCreate(Bundle bundle) {\n     super.onCreate(bundle); // doesn't create presenter\n     if (bundle != null) \n          someId = bundle.getInt(\"SomeKey\");\n}\n\n @Override   \n protected void onStart() {\n   super.onStart();           // creates the presenter\n   presenter.loadFoo();      // now you can use the presenter\n}\n\n}\n``\n. So basically, whenever you call a method of your View Interface likeview.showTopAndBottomContainer()`, the implementation of that method has to set the view state accordingly.\nFor example:\n```java\nclass OfferDetailsViewPdfActivity ... {\n@Override\n    public void hideTopAndBottomContainer() {\n        getViewState(). setIsshowTopAndBottomContainer(false);\n        offerDetailsToolBarMainContainer.setVisibility(View.GONE);\n        offerBottomContainer.setVisibility(View.GONE);\n    }\n}\n```\nAlso, in your ViewState you have to read the data from your bundle. I assume isshowTopAndBottomContainer = bundle.getBoolean(iS_SHOW_TOP_AND_BOTTOM_CONTAINER)\nHope that helps. For more information take a look at the documentation: http://hannesdorfmann.com/mosby\n. This issue is not Mosby related only. You will face the same issue if you use just Activities.\nSo there are two things to consider:\nIf your network call lives outside of the lifecycle of Activity because the activity is really destroyed (which seems to be what you are trying to achieve) then you can't use / rely on activity.onSaveInstanceState() or Mosby's ViewState (which is essentially the same under the hood). You have to find another solution for that problem, like using Android Services / JobScheduler plus a Database where you save the state of your request persistently so that once Activity and Presenter gets recreated you can query the database if the request was successful or not.\nIf you are just talking about the fact that the view is just destroyed temporarily (so no view attached to Presenter) you may find MvpQueuingBasePresenter (take a look at onceViewAttached(). \n. Sorry, the Readme is not up-to-date. You have to add this dependency :\ncom.hannesdorfmann.mosby3:mvp-queuing-presenter:3.1.0\nBtw. You better use 3.1.0 (not SNAPSHOT). Also there is no need to include mvi if you are just doing mvp. . I just can speculate, but it seems like you have two instances of your presenter. \nThe first time your Activity is instantiated your Presenter (lets call it PresenterInstance1) is instantiated too and you begin to download your file.\nNext you \"minimise\" the activity but since you have \"Don't keep activities\" enabled, the whole activity is destroyed (and so is the PresenterInstance1, presenter.destroy() should be called). But it seems that you never cancel the download file request (should be done in presenter.destroy() ). \nSo then you reopen your Activity and a new presenter instance (lets call it presenterInstance2) is created and starts downloading again ...\nMeanwhile, the presenterInstance1 get's its callback onSuccess() called, but this presenter is already \"destroyed\", so the View (activity) will never be attached to presenterInstance1. This is usually a memory leak. You better move downloading files into a background service (out of the lifecycle of the activity / presenter) and let the presenter just listen to the download service.\n. Hey thanks for reporting. How do you use your ViewGroup,  do you remove that one manually? How can I reproduce this bug? Did it work in 3.0.4?. I see, thanks for the detailed report. I will work on this kind of issues this weekend\nDaniel Rampelt notifications@github.com schrieb am Do., 29. M\u00e4rz 2018,\n20:55:\n\nA similar error happens when you call finish for an activity in onCreate,\nit tries to delete a null presenter in onDestroy and crashes.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/290#issuecomment-377337195, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrhB-LFSwnhhJPZdgshgXm7IZqH9gks5tjS4pgaJpZM4Q9cib\n.\n. Working on it, along migrating to android x. Use latest snapshot 3.1.1-SNAPSHOT (see README)\n\nKeith Naas notifications@github.com schrieb am Fr., 16. Nov. 2018, 16:41:\n\nIs there a chance to get this fixed without tying it to the conversion to\nandroidx? We are seeing crashes as well.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/290#issuecomment-439433162, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnruqdbBGcIrU_o0r_zNj1bVOaW75Uks5uvtyygaJpZM4Q9cib\n.\n. Thanks for reporting. Will check this later this week. Just to be clear: it causes to crash in both cases: \n1. calling finish() in onResume()\n2. calling finish() in onActivityResult(). No, that's not possible as that is how Android works. Note that's also not possible with any other Framework or Library . Again, you should move things that should live longer than activity / presenter on the outside. \n\nAlso note that \" don't keep Activity option\" is not simulating real world behavior. Only the whole process is destroyed and not single Activities (as don't keep activity is emulating).. Sorry, I'm just on mobile and haven't had a chance to look into your sample\nbut I gladly will add a link to your sample in the readme. Thanks for\nsharing your hard work!\nJames Shvarts notifications@github.com schrieb am Di., 12. Dez. 2017,\n20:03:\n\nClosed #292 https://github.com/sockeqwe/mosby/issues/292.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/292#event-1384214561, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrqyX2z8RDf4lzPaUx2JF9qquOGX-ks5s_s4bgaJpZM4Q-DVs\n.\n. oh man, I think Queuing should be used. Pull request is very welcome.. Thanks everybody for your feedback. So turned out it was mostly \"just\" a README error and the dependency is  already been published under the correct name mvp-queuing-presenter: https://search.maven.org/#artifactdetails%7Ccom.hannesdorfmann.mosby3%7Cmvp-queuing-presenter%7C3.1.0%7Cjar\n\nThanks again, really appreciated it! . Hey,\nI'm sorry but I don't b understand what you mean. Can you give me a concrete example. I'm really sorry but I still Don't understand what information you loose?\nL\u00e1szl\u00f3 Krasny\u00e1nszki notifications@github.com schrieb am Do., 14. Dez.\n2017, 22:54:\n\nSure!\nHere is a viewstate. The data and list properties are coming from\ndifferent resources or refreshind in different time.\npublic class MyViewState {\n    private boolean loading;\n    private String data;\n    private ArrayLis list;\n    private Throwable throwable;\n}\nAnd here is the render method in the view:\n@Override\n    public void render(MyViewState viewState) {\n        if(viewState.isLoading()) {\n            // loading handling\n        } else if(viewState.getError() != null) {\n            // render data and list\n        } else {\n            // error handling\n        }\n    }\nIf I trigger an action (press button, anything) and refresh the data\nproperty in the viewstate with the reducer, I will also reload the UI parth\nwhere I show the list property when I'm rendering.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/294#issuecomment-351847719, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnro143wzmSybWYV6wqPmLE0-mekEVks5tAZklgaJpZM4RCskN\n.\n. that has never been an issue for me and I just can recommend, that until it really gets an issue don't care about it ...\n\nThe only one operation that comes immediately into my mind which is expensive is setting text on a TextView because this will trigger a whole relayout of the text layout even if the text hasn't changed. \nBut again, unless it is really an issue, I wouldn't bother ...\nIf this, however, becomes an issue someday, I would recommend to determine which UI widgets should be updated in the view layer, maybe manually with if else or a librarie like anvil can help. Thanks!. Hey, \nthanks for your feedback! Indeed, there is some \"boilerplate\" if you implement MVI the way I am doing (and promoting) it. However, I would like to give the user of Mosby the freedom to use this library the way it works best for them and for example I don't want to limit them to use a MviView interface with a render(state) method. \nWe had this conversation some time ago:\nhttps://github.com/sockeqwe/mosby/issues/209\nAlso, there are plans to add yet another way to implement MVI (MVVM-ish) where an MviView interface doesn't make sense: \nhttps://github.com/sockeqwe/mosby/issues/247\nSo for now, I think it makes sense to let the developer (the user of this library) the choice how to implement MVI. Mosby should just offer some convenient classes around general problems like lifecycle and retaining presenters.  I think it is not too much work for any developer who wants to use Mosby for MVI based applications to introduce a MviView and AbstractMviPresenter (which is what you have described as MyPresenter in your comment above) in their own app, without having to introduce it in Mosby.\nWhat do you think?. This looks good. Im just wondering if there is a better way to deal with that... Let me think about it this evening...\nThanks!. Sorry, i was too busy lately and have forgotten about this. I have\ndedicated some time this weekend. This should be fixed by Monday.\nI appologize for any inconveniences this may have caused.\nLauri Aalto notifications@github.com schrieb am Mi., 17. Jan. 2018, 09:39:\n\nAny news with this? Would want to get rid of the crashes but would not\nwant to deploy a forked version of Mosby.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/pull/297#issuecomment-358234568, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrlbG4-6uqH-cTKI5ER4d7B3dt_Hoks5tLbHLgaJpZM4RHE38\n.\n. Hm, I tired to reproduce the actual issue to ensure this fixes the described issue.\n\nSo basically you start an activity and in Activity.onCreate() you call Activity.finish(). In the layout of the Activity there is some custom ViewGroup that is powered by Mosby such as a MvpFrameLayout, right?. Ah I see, let me try to reproduce this with  Activity#onResume() and Activity#finishAffinity(). Thanks!. Hm, seems you have implemented it correctly. You have to do the dependency\ninjection in onCreate() BEFORE calling super.onCreate() which you did.\nI think the problem is the following:\nIf you inject into your own presenter variable (I explicitly say own\nvariable, because Mosby internally already has a presenter variable too),\nyou also have to override getPresenter() and setPresenter() of\nMvpActivity(). Please try to add this two methods.\nj2emanue notifications@github.com schrieb am Fr., 22. Dez. 2017, 10:13:\n\ni was successfully using mosby2 for a long time now and changed to mosby3.\nat runtime the presenter cannot be created. Tested on Oreo api 26 emulator\nxxhdpi.\nHere are the dependencies:\nimplementation 'com.hannesdorfmann.mosby3:mvp:3.1.0' // Plain MVP\nimplementation 'com.hannesdorfmann.mosby3:viewstate:3.1.0' // MVP +\nViewState support\nIf i do the following which is creating the presenter without dependency\ninjection there is no issue:\n@nonnull https://github.com/nonnull\n@override https://github.com/override\npublic WelcomePresenter createPresenter() {\nreturn new WelcomePresenter();\n}\nbut the following gives a NPE when using dagger2 in android:\npublic class AuthenticationActivity extends MyappBaseMvpActivity implements AuthenticationView {\n@Inject\nAuthenticationPresenter presenter; //confirmed this value is not null\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    ((MyappApplication) getApplicationContext()).getAppComponent().inject(this); //injecting presenter which works in Mosby2\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_authentication);\n    ButterKnife.bind(this);\n    presenter.loadScreen();\n    //blah blah\n}\n\n@NonNull\n    @Override\n    public AuthenticationPresenter createPresenter() {\n        return presenter; //confirmed through debugger this value is NOT null\n    }\n  }\nHere is what i have tried: moving the \" ((MyAppApplication)\ngetApplicationContext()).getAppComponent().inject(this);\" call after the\nsuper call and even after setnContentView. Same issues.\nHere is the exact error i recieve :\nFATAL EXCEPTION: main\nProcess: com.mobile.myapp.labs, PID: 2680\njava.lang.RuntimeException: Unable to start activity\nComponentInfo{com.mobile.myapp.labs/com.mobile.myapp.ui.login.activities.AuthenticationActivity}:\njava.lang.NullPointerException: Presenter returned from createPresenter()\nis null. Activity is\ncom.mobile.myapp.ui.login.activities.AuthenticationActivity@8ba807c\nat\nandroid.app.ActivityThread.performLaunchActivity(ActivityThread.java:2817)\nat\nandroid.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2892)\nat android.app.ActivityThread.-wrap11(Unknown Source:0)\nat android.app.ActivityThread$H.handleMessage(ActivityThread.java:1593)\nat android.os.Handler.dispatchMessage(Handler.java:105)\nat android.os.Looper.loop(Looper.java:164)\nat android.app.ActivityThread.main(ActivityThread.java:6541)\nat java.lang.reflect.Method.invoke(Native Method)\nat com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:240)\nat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:767)\nCaused by: java.lang.NullPointerException: Presenter returned from\ncreatePresenter() is null. Activity is\ncom.mobile.myapp.ui.login.activities.AuthenticationActivity@8ba807c\nat\ncom.hannesdorfmann.mosby3.mvp.delegate.ActivityMvpDelegateImpl.createViewIdAndCreatePresenter(ActivityMvpDelegateImpl.java:92)\nat\ncom.hannesdorfmann.mosby3.mvp.delegate.ActivityMvpDelegateImpl.onCreate(ActivityMvpDelegateImpl.java:142)\nat com.hannesdorfmann.mosby3.mvp.MvpActivity.onCreate(MvpActivity.java:42)\nat\ncom.mobile.myapp.ui.base.MyappBaseMvpActivity.onCreate(MyappBaseMvpActivity.java:88)\nat\ncom.mobile.myapp.ui.login.activities.AuthenticationActivity.onCreate(AuthenticationActivity.java:56)\nat android.app.Activity.performCreate(Activity.java:6975)\nat\nandroid.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1213)\nat\nandroid.app.ActivityThread.performLaunchActivity(ActivityThread.java:2770)\nat\nandroid.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2892)\nat android.app.ActivityThread.-wrap11(Unknown Source:0)\nat android.app.ActivityThread$H.handleMessage(ActivityThread.java:1593)\nat android.os.Handler.dispatchMessage(Handler.java:105)\nat android.os.Looper.loop(Looper.java:164)\nat android.app.ActivityThread.main(ActivityThread.java:6541)\nat java.lang.reflect.Method.invoke(Native Method)\nat com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:240)\nat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:767)\n12-22 08:58:10.863 1811-1823/system_process E/memtrack: Couldn't load\nmemtrack module\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/298, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnriuP1IgcidmF-zwKwfHUeaxBEHASks5tC3LPgaJpZM4RK0GO\n.\n. Does getPresenter() and setPresenter() actually solves your problem?. Yeah I definitely recommend to create the dependency graph in createPresenter() and have a component like this:\n\njava\n@Component\ninterface MyApplicationComponent {\n   MyPresenter myPresenter();\n}\nRather than \njava\n@Component\ninterface MyApplicationComponent {\n   void inject(MyActivity activityWherePresenterGetsInjected);\n}\nNevertheless, the way you would like to do it (inject presenter into activity) should also work if you override getPresenter() and setPresenter() to use your local variable.. Sure, that is not changed. dagger still creates the presenter instance with\nall required dependencies (constructor parameters of presenter)\nj2emanue notifications@github.com schrieb am Fr., 22. Dez. 2017, 13:14:\n\nMy presenter constructor takes arguments. Dagger builds it for me\nGet Outlook for Androidhttps://aka.ms/ghei36\n\nFrom: James Shvarts notifications@github.com\nSent: Friday, December 22, 2017 6:51:05 PM\nTo: sockeqwe/mosby\nCc: j2emanue; Author\nSubject: Re: [sockeqwe/mosby] Dagger2 - injecting presenter gives Caused\nby: java.lang.NullPointerException: Presenter returned from\ncreatePresenter() is null. Activity is ... (#298)\nIf Presenter is the only thing you inject into your View, you can have the\nobject graph expose it and so you can inject the Presenter itself in\ncreatePresenter(). See example\nhttps://github.com/jshvarts/MosbyMVP/blob/master/conductor-dagger-sample/src/main/java/com/jshvarts/mosbymvp/searchrepos/SearchViewController.kt\nAlso, you don't need to include both mvp and viewstate Gradle dependency.\nThe latter is sufficient.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub<\nhttps://github.com/sockeqwe/mosby/issues/298#issuecomment-353583474>, or\nmute the thread<\nhttps://github.com/notifications/unsubscribe-auth/AEuvOvgU1xjroSxzeC9V_nkiinKnsEehks5tC5epgaJpZM4RK0GO\n\n.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/298#issuecomment-353586695, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrv2ePK0138kuD4zNS0-0G16cC3FSks5tC50OgaJpZM4RK0GO\n.\n. Is your source code available somewhere so that I can try to debug it?\ncreatePresenter() is called in super.onCreate() (see here )\n\n\nI think either you or we are misunderstanding something, so here is a full example implementation what @jshvarts  and I are talking about is the following one:\n```java\npublic class AuthenticationActivity extends MvpActivity implements AuthenticationView {\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_authentication);\n    ButterKnife.bind(this);\n    presenter.loadScreen();  // presenter variable is a Mosby internal variable from MvpActivity\n    //blah blah\n}\n\n@Override\npublic AuthenticationPresenter createPresenter() {\n    return    ((MyappApplication) getApplicationContext()).getAppComponent().authenticationPresenter();\n}\n\n}\n```\n```java\n@Singleton\nclass AuthenticationPresenter extend MvpBasePresenter {\n@Inject\npublic AuthenticationPresenter(UserManager userManager) { // Some dependencies passed as constructor parameter\n    ...\n}\n\n}\n```\n```java\n@Module\nclass AppModule {\n@Provides \n@Singleton\npublic UserManager provideUserManager() {\n   ...\n}\n\n}\n```\njava\n@Singleton\n@Component(modules = {AppModule.class}\ninterface AppComponent {\n    AuthenticationPresenter authenticationPresenter();\n}\nPlease note that we are not manually instantiating AuthenticationPresenter nor specifying it in AppModule. \n\nHow is exposing the method in the component bringing different results then annotating the presenter constructor with @Inject.\n\nYou are not removing @Inject method from presenter constructor, this is still the same as you see in the cose snipped above. The difference is really just how you define your dagger component:  instead of asking dagger to inject presenter into activity (via inject(AuthenticationActicity activity), you ask dagger to give you a presenter (by exposing a method like authenticationPresenter()).\nThe later is the recommended way for Mosby. I have some time tomorrow after lunch. I will try to reproduce / debug your\nissue.\nj2emanue notifications@github.com schrieb am Sa., 23. Dez. 2017, 07:08:\n\njshvarts ,\ni assume that you meant myPresenter variable in the setter and not\nthis.presenter :\n@Override\nvoid setPresenter(LandingPagePresenter presenter) {\n    this.myPresenter = presenter\n}\ni treied exactly as you put and i also tried it in another class just to\nmake sure. its the same error. i have the code exactly how you wrote it.\nlets take a look more in depth at my code:\nhere is my activity:\n`public class LandingPageActivity extends BaseMvpActivity implements LandingPageView {\n@Inject\n\nLandingPagePresenter presenter;\n@Inject\nApplicationMode appMode;\n@Inject\nEventBus bus;\n@Override\npublic void setPresenter(LandingPagePresenter presenter) {\n    this.presenter = presenter;\n}\n@NonNull\n@Override\npublic LandingPagePresenter createPresenter() {\n    return this.presenter;\n}\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    ((MyApplication) getApplicationContext()).getAppComponent().inject(this);\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_homepage);\n    ButterKnife.bind(this);\n    initView();\n}\n}`\nand here is the BaseActivity class definition:\npublic abstract class BaseMvpActivity>\n        extends MvpActivity  {........}\nand here is BaseMvpView:\npublic interface BaseMvpView extends MvpView {\nvoid showError(@StringRes int e);\n\nvoid showError(String msg);\n\n//....blah blah\n}\nagain the environment im running on is Oreo api 26 but i also tried it on\napi 23 emulator.\nwith dependency: implementation\n'com.hannesdorfmann.mosby3:viewstate:3.1.0'\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/298#issuecomment-353709462, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrmfTkfCXaqou--sTvI1yd9pHVTSrks5tDJjsgaJpZM4RK0GO\n.\n. We had a similar discussion here:\nhttps://github.com/sockeqwe/mosby/issues/296. Yes, starting from scratch today maybe we would have something like MVI inteface and MviPresenter.\nThe historical reason why in Mosby-MVI  we have this relationship to MvpView and MvpPresenter is that there is a PresenterManager which is basically a Map<KEY, MvpPresenter<MvpView> that keeps Presenter during screenorientation changes and so on. As you see, unless we use raw types instead of generics, there must be some common super type for both, mvp and mvi ...\n\nSo what would you recommend to do?. Sorry for the late response. I have been quite busy. I will try to review this on Monday.. I think we can merge this.. Yes, I just have worked on another bigfix over the last weekends. I will\nmerge this as soon as I have fixed it and also provide a MVI implementation.\nTassilo Busche notifications@github.com schrieb am Do., 5. Apr. 2018,\n11:00:\n\n@sockeqwe https://github.com/sockeqwe did you have time to look at it?\nthis feature would be greatly appreciated ;)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/pull/300#issuecomment-378867849, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrg-dovmQP2yVqhpYyjl-ZaOkF50Pks5tld08gaJpZM4RRz5U\n.\n. Thanks for your pull request. So this can be closed, right?\n\nIf not, feel free to reopen it. Hey, \nthanks for your pull request but it seems that your source is outdated because getView() has been deprecated.\nTake a look at MvpBasePresenter.java on master:\nhttps://github.com/sockeqwe/mosby/blob/master/mvp/src/main/java/com/hannesdorfmann/mosby3/mvp/MvpBasePresenter.java#L85\n. @kusraevs is right, intent() actually subscribes in presenter.attachView() which actually is called in onStart(). \nThe idea is to not have hot observables in view (hot observable intetns). So the idea is that the presenter subscribes after both, view and presenter, are ready which is only guaranteed after onStart().\nSo basically you have to wrap your head around a little bit but rather than start loading data in onCreate() provide give your view a view.loadDataIntent() that  is a cold observable (observable that only emits once a subscriber is subscribed (presenter).\nLifecycle should be like this:\n- onCreate() : setup UI (or onCreateView() in Fragments)\n- onStart(): everything is ready ( createPresenter() has been called before) and presenter can subscribe to View intents and update view (view.render).\n- onStop(): presenter unsubscribes from view's intent\n- onDestroy(): view is destroyed, so is presenter if view is foing to be destroyed permanently.\nSo if you emit intents outside of onStart() and onStop() the presenter will miss it.\nWith that said, I think that BehaviorSubjects are only the last resort to use in the view layer for delaying emit intents. If you follow the onStart() onStop() lifecycle you should not need workarounds like BehaviorSubjects.\n. I will work on that next week\njhowens89 notifications@github.com schrieb am Fr., 23. Feb. 2018, 01:51:\n\n@sockeqwe https://github.com/sockeqwe Did you ever come to a conclusion\nabout #242 https://github.com/sockeqwe/mosby/issues/242? I was still\nvery new to RxJava back then and I'd like to think the code I write down is\nless problematic, but I can still replicate this issue.\nclass MatchPlayRoundSelectorPresenter @Inject constructor(val interactor: MatchPlayRoundSelectorInteractor) : MviBasePresenter() {\n    override fun bindIntents() {\n        val loadMatchPlayRoundSelectorDataIntent = intent(MatchPlayRoundSelectorView::connectDataIntent)\n                .doOnNext { Timber.e(\"TESTING_BEFORE 1\") }\n                .switchMap { interactor.loadMatchPlayRoundSelectorData() }\n                .doOnNext { Timber.e(\"TESTING_BEFORE 2\") }\n                .subscribeOn(Schedulers.io())\n                .doOnError { Timber.e(it,\"Fatal error occurred\") }\n    val selectNewRoundIntent = intent(MatchPlayRoundSelectorView::selectNewRoundIntent)\n            .map { (round, page) -> interactor.newRoundSelected(round, page) }\n\n    val initialState = interactor.getInitialState()\n\n    val allIntents = Observable.merge(loadMatchPlayRoundSelectorDataIntent, selectNewRoundIntent)\n            .observeOn(AndroidSchedulers.mainThread())\n\n    subscribeViewState(allIntents.scan(initialState, ::viewStateReducer)\n            .distinctUntilChanged(), MatchPlayRoundSelectorView::render)}\n\n}\nThe other side of the equation looks like:\noverride fun connectDataIntent(): Observable =\nObservable.just(Unit)//.doOnNext { Timber.e(\"TESTING_BEFORE 0\") }\nIf I run this code, I'll get the following relevant logs:\n02-22 17:46:12.605 7068-7068/com.tour.pgatour E/MatchPlayRoundSelectorL:\nTESTING_BEFORE render\ncom.tour.pgatour.match_play.leaderboard.match_play_round_selector.MatchPlayRoundSelectorViewState$WithoutData@7830fd3\nIf all I do is uncomment that doOnNext:\n02-22 17:44:57.205 6216-6216/com.tour.pgatour E/MatchPlayRoundSelectorL: TESTING_BEFORE render com.tour.pgatour.match_play.leaderboard.match_play_round_selector.MatchPlayRoundSelectorViewState$WithoutData@fb867e3\n02-22 17:44:57.206 6216-6216/com.tour.pgatour E/MatchPlayRoundSelectorL: TESTING_BEFORE 0\n02-22 17:44:57.206 6216-6216/com.tour.pgatour E/MatchPlayRoundSelectorP: TESTING_BEFORE 1\n02-22 17:44:57.368 6216-6216/com.tour.pgatour E/MatchPlayRoundSelectorP: TESTING_BEFORE 2\n02-22 17:44:58.099 6216-6216/com.tour.pgatour E/MatchPlayRoundSelectorL: TESTING_BEFORE render WithData(viewData=MatchPlayRoundSelectorViewData(roundPlayTabs=[RoundTab(config=TabConfig(text=Round 1, backgroundColor=-16777216, textColor=-1, selectedBackgroundColor=-1, selectedTextColor=-16777216), option=com.tour.pgatour.shared_rel....\nIt's like I'm so close to the boundary of the race condition that even a\nlog will push it over. Thoughts?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/303#issuecomment-367873536, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrsjsgKn0wFcqCDFcchSygyQi2p13ks5tXgt5gaJpZM4Rz2xJ\n.\n. @jhowens89 Do you use a Fragment or Activity. I'm trying to reproduce this .... Fixed. If not, please comment on #242 \n. UnicastSubject should do the trick (instead of PublishSubject or BehaviorSubjct).\n\nhttp://reactivex.io/RxJava/javadoc/io/reactivex/subjects/UnicastSubject.html\nUnicastSubject internally stores all emitted data until there is one subscriber. Once there is a subscriber it acts like PublishSubject.. Thanks, I will take a look this week.\nHowerver, from some older issues / comments in this issue tracker it seems that people are expexting to recreate the presenter with \"Don't keep Activities\". Any opinion?. I don't think so, but needs some more investigation ...\nActivity is needed to understand the lifecycle the View logically belongs too. As far as I know WindowManager doesn't have lifecycle alike callbacks or other ways to figure out whether or not a view is destroyed permanently or just destroyed temporarily because of orientation changes (that*s why ViewGroupMviDelegate needs an Activity. If you don't need that the presenter is retained during screen orientation changes, than you can use ViewGroupMviDelegateImpl(keepPresenterDuringScreenOrientationChange = false) (so that activity is never used and therefore can be used with WindowManager). Ah, sorry, I have overlooked this.\nA better idea would to write your own ViewGroupMviDelegate.\nAll the ViewGroupMviDelegate does is once View is attached to window or detached from Window call createPresenter() and presenter.attachView(), presenter.detachView() and presenter.destroy(). Should not be too hard to implement such a custom delegate. \n```java\nclass MyMviRelativeLayout extends MviRelativeLayout{\nprivate ViewGroupMviDelegate delegate;\n   ... \n@Override \n   protected ViewGroupMviDelegate getMviDelegate() {\n      if (delegate == null) {\n        delegate = new MyCustomViewGroupMviDelegateImpl<>();\n      }\n  return delegate;\n}\n\n}\n```\nWhile I see how you can keep a presenter in memory manually during screen orientation changes (so presenter.attachView() and presenter.detachView() should be easy to implement in your custom delegate, I'm not sure how you would do the \"clean up\" a.k.a calling presenter.destroy().\n. Could  be cleaned up a little bit more, but overall it sholuld work.. It depends, but I think your Repository could return an Observable<State> where State means Error, Loading, Result (List) and so on.\nso rather than fun Repository.getProductDetail(id: Int): Observable<ProductDetails> I would implement fun  Repository.getProductDetail(id: Int): Observable<State>\n. Thanks. Pretty cool stuff, thanks for sharing. However, I would like to not add this to Mosby repo itself because I think its too much team specific, but I gladly add a link to your template generator in readme.. Given the fact that flow 1.0 has never been released and is not actively maintained anymore, I think that it flow is not a future proof bet.\nI should update the blog post, thanks for the hint.\nMaybe Conductor is a alternative and there is a plugin for mosby too. \n. Thanks for the detailed explanation.\nI have to check out the related code next week. Honestly, I can't remember\nwhats going on internally :)\nAlexander Zhdanov notifications@github.com schrieb am Sa., 28. Apr. 2018,\n09:58:\n\nHello!\nI found a memory leak in ViewGroupMviDelegateImpl.\nMosby version is 3.1.0.\nSteps to reproduce:\n\ncreate CustomView extending MviFrameLayout or MviLinearLayout or\n   MviRelativeLayout\nprogrammaticaly add this CustomView to view hierarchy while activity\n   is resumed\nprogrammaticaly remove this CustomView from view hierarchy while\n   activity is resumed\n\nAfter that CustomView will be in memory until activity is destroyed.\nI also found that this is because of registering\nActivityLifecycleCallbacks when creating ViewGroupMviDelegateImpl.\nViewGroupMviDelegateImpl removes ActivityLifecycleCallbacks only when\nactivity is destroyed. But there may a lot of such CustomView those will\nhang in memory though they are detached and removed from view hierarchy.\nI reviewed logic of consuming activity-lifecycle in\nViewGroupMviDelegateImpl and may be we can register\nActivityLifecycleCallbacks when attaching view to presenter and\nunregister ActivityLifecycleCallbacks in two cases: when activity is\ndestroying and also when detaching view from presenter ?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/310, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrk7HcRi4n-5dbyOkpn3nro-Fz8LIks5ttCFCgaJpZM4TrTJj\n.\n. Its not an issue of Mosby. Consider asking this question on stackoverflow.. Right, if you take a look at MviActivity source code you will see that it basically delegates all lifecycle events to a delegate. You have to do the same for your Activity bases class.. Sorry for the long delay. I'm quite busy at the moment, I will take a look at this at the end of July.\nAs far as I can tell is that all automated tests (testing Mosby internals) are passing. Hence (without having investigated into this bug) I have the feeling that this is a Sample App issue.. Unfortunately we are in a bad situation with all this androidx package renaming.\nI can't update Mosby to androidx without breaking other apps.\n\nHowever, what you can do is write your own class BaseActvitiy extends androidx.appcompat.app.AppCompatActivity and then just use the Mosby internal deleage.\nBasically you just have to copy & paste the Mosby internal classes \nhttps://github.com/sockeqwe/mosby/blob/master/mvp/src/main/java/com/hannesdorfmann/mosby3/mvp/MvpActivity.java\nwhich actually then just delegates / forwards lifecycle events to the corresponding delegate.\n. I discussed with Adam Powell some time ago, the method isInBackStack() should actually become public.\n\nstops working after migrating to AndroidX due to the change of package names.\n\nthat is true unfortunately but there is no easy way around this. The plan is the following: Once androidx is a stable release I will pump version of Mosby to Mosby 4.0 and Mosby 4 will be compatible with androidx only. Open to discuss this and happy for any feedback.. I have to double check it but Conductor should not be a problem. It doesn't use BackstackAccessor at all.. Yes\nGuy Carmeli notifications@github.com schrieb am Fr., 26. Okt. 2018, 17:05:\n\n@sockeqwe https://github.com/sockeqwe\nWould you consider using this workaround\nhttps://github.com/grandcentrix/ThirtyInch/commit/05aa2c6ac8eee520e8b0da2bf84b6ce8b79d94bd#diff-4b8d82f65d5fc975ee47d3ccd24b41de\nin mosby:\npublic static boolean isInBackStack(final Fragment fragment) {\n    try {\n        return fragment.isInBackStack();\n    } catch (IllegalAccessError e) {\n        return isInBackStackAndroidX(fragment);\n    }\n}\n/** Hacky workaround because Fragment#isInBackStack is inaccessible with AndroidX/private static boolean isInBackStackAndroidX(final Fragment fragment) {\n    final StringWriter writer = new StringWriter();\n    fragment.dump(\"\", null, new PrintWriter(writer), null);\n    final String dump = writer.toString();\n    return !dump.contains(\"mBackStackNesting=0\");\n}\nAnother possible solution is to keep current implementation and introduce\na BackStackAccessorProvider which will let users use a different logic\nfor determining if a fragment is in the back stack or not.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/318#issuecomment-433439830, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrvkI3qj3HQiKFoKFhtUsEsmMIavlks5uoyTRgaJpZM4VDp2H\n.\n. Thabks a lot. I m going to publish a new release at the end of this week containing this. This makes it useable with jetifier. However I plan to make a 4.0 release that is fully backed on androidx soon (3.x sticks with old support library). This evening, everything is ready on my side, just wanted  to setup CI\nproperly to release it from ci but that didn't work. Will release it\nmanually.\n\nMaxim Pestryakov notifications@github.com schrieb am Di., 6. Nov. 2018,\n09:05:\n\n@sockeqwe https://github.com/sockeqwe When do you plan to release 3.1.1?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/318#issuecomment-436164248, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnrooykfXWuumOk_dMe4oqI2oLr1RVks5usULVgaJpZM4VDp2H\n.\n. I have some problems with gradle uploading files of 3.1.1 release to different locations instead of just one single location. I asked that question on stackoverflow, if someone knows how to fix it, here is the link to stackoverflow:\nhttps://stackoverflow.com/questions/53200255/gradle-uploadarchives-runs-in-parallel-causing-multiple-staging-repositories-on\n\nMeanwhile I have at least published a new 3.1.1-SNAPSHOT containing this stuf or you can use jitpack\n```groovy\nallprojects {\n        repositories {\n            ...\n            maven { url 'https://jitpack.io' }\n        }\n}\ndependencies {\n            implementation 'com.github.sockeqwe:mosby:345efbb0c0'\n}\n```. Thanks for answering, I have that set, doesn't help unfortunately. Will try it on a different machine over the weekend.. I appologize for the inconveniences. In the meantime you can use\n3.1.1-SNAPSHOT\nSee Readme\nDmitry Ivanov notifications@github.com schrieb am So., 11. Nov. 2018,\n09:59:\n\nIm still waiting\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/318#issuecomment-437653807, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjnruZZp3-dxHALS-VBQsDIfZn35mtFks5ut-b5gaJpZM4VDp2H\n.\n. I just released 3.1.1 (not snapshot)\n\n@LukasStancikas is your code available somewhere to reproduce this issue? I guess jetifier is doing to much \"smart\" things ending up having BackstackAccessor somehow twice ... Do you use Mosby in app and in a library that uses Mosby as well?. Thanks! (Sorry that it took that long to merge it). use kotlin or java 8 lamba syntax\nkotlin\nifViewAttached { view -> view.loginFailure(\"failure\") }. Thabks a lot!\nWill make a new release at the end of the week.. Working on it. I'm really sorry I couldn't publish it yet because of some gpg key issues on my new macbook. Hope to get it released soon. Hello,\nI'm sorry to hear that you have problems with this library. I'm not sure if I have understood the problem properly. Is there a way to easily reproduce this or do you have a small example that I could use to debug already in place?. Thanks!. You might find this helpful: http://hannesdorfmann.com/android/presenters-dont-need-lifecycle. Are you sure that the kotlin sample works without that?\n. Why do you add throws Exception to the method signature?\n. Your intention to add these 3 tests is great! \nBut from my point of view all of them are already tested testOnDestroy(). Don't you agree?\nHowever, it would be a good idea to rename that method name because it's misleading.\nYou are right: assertEquals(null, presenter.getView());. This test is missing in testOnDestroy()\n. Not sure about the name showForm(). Maybe we can find something more universal ... \n. good catch1\n. Yeah, my bad. This should be added to all examples that use LeakCanary. Could you please add that to the other examples too?. Arrrr ... have overlooked that you have already added it!\nForget about my last comment!\nThanks a lot!. ",
    "javajack": "List widget comes nowhere in picture, actually. You have already created sample examples using list widget.\nCorrect me if I am wrong.\nI'll try to describe it.\nA pull to refresh layout which has a viewpager with adapter. Each time the pull to refresh is done, the adapter data is refreshed.\nEach time the pull to refresh is done, the viewpager data would be refreshed by calling an API,\nViewpager displays one item at a time from adapter, right ?\nI would request you to build the example upon following third party API, same as github but better portrays the use case of viewpager.\nSee following free API, it returns motivational news items at givesmehope.com\nhttp://api.givesmehope.com/\nOur viewpager example would consume the response or following API call and displays the news items in a viewpager leveraging  Mosby framework , one news item at a time.\nhttp://api.givesmehope.com/v1/posts/all.json?page=1\nPer news item we could display \n\"headline\" property (a text )\nand \"image_src\" property (image) from json responses to display in viewpager.\n\n. Yup, swiperefreshlayout  should refresh the pager !\n. Come over to Mumbai/India buddy, I'll host you with authentic Indian curries and sweets  :) \n. Your comment \"pretty strange app navigation\" is legit and the culprit is swiprefreshlayout mechanism.\nThe layout is so sensitive that is breaks letft/right swipe UX of viewpager.\nhttp://stackoverflow.com/questions/25978462/swiperefreshlayout-viewpager-limit-horizontal-scroll-only\nThe solution is there in the answers , but I'm curious where that fits into mosby framework code base for applying that solution.\n. Ok tested the following solution, and it has improved the pager swipe. \nPull to refresh works as expected.\nhttp://stackoverflow.com/a/27934705/861454\n. Yeah. The blih post is something which me and many other must be looking forward to.\nSome points to cover.\nHow to interact between mosby activity and normal activity.\nDoes rxjava makes sense to be used all the time ?\nWhat should be the database storage mechanism ?\nAnswers to all such questions from your perspective , your best practice :)\n. @IgorGanapolsky That is not in my control as I am leveraging Mosby which extends to appropriate parent class. Unless Mosby does that I can not do that !\nThanks for the toolbar suggestion , that could be worked out.\n@sockeqwe \nMy main activity is clear like water ! Almost the same code as the demo you had posted in separate repo, no icicle annotation in main activity.\nI can share the full code from private bitbucket requesting you to me in javaindia /at/ gmail /dot/ com\n. Cool. I am glad my app in production is helping out this awesome framework to mature !\nI hope it's backwards compatible with version 1 of Mosby or little changes in migration.\n. @sockeqwe \nHere is the code\nhttps://gist.github.com/javajack/73fab4f91a4b9478a42a\n. @sockeqwe \nUpdated the gist with PostList file.\n. What should be the strategy to adapt this snapshot version ?\nI have already posted an app in play store.\nMost of the errors have arrived in user phones.\nI have a phone where I can only test of the SNAPSHOT version works well when integrated or not.\nWould you suggest me to release the APK with this mosby version to try out ?\n. @sockeqwe \nYes I have upgraded and pushed the latest Mosby( TimesBuzz version 1.1.1 ).\nWill share the exception logs, if any ?\nSince the app is just launched for a week or two the user base is tiny and they are on old versions.\nIt may take some time as new users on board with latest version and old users upgrade.\n\"The vertical scrolling is pretty nice..\" That was the vision.\nI was handicapped with overall Android architecture and development.\nI am not a good programmer, this was my first attempt to code \"any\" android stuff.\nI did not code even a hello world app on Android before creating TimesBuzz as a derivative of Mosby.\nThis speaks a volume about the strong conceptual Mosby foundations on which app relies ;)\nI just hustled a bit and leveraged what you and other people had to offer ;) \nIf you could look at my code, I'll be glad to add you in my private bitbucket repo.\nJust ping me your bitbucket username or email id, or connect with me on FB :)\nhttps://www.facebook.com/RakeshWaghela\nI wish I could reciprocate the work/help you did :) :)\n. I did.\nApp used to crash on a back button press.\nWhat are the best practices for activity navigation ?\nAny good article you might want to suggest ?\n. ",
    "zoltanf": "Thank you.\n. ",
    "ziem": "Thanks. I tried cleaning, rebuilding, syncing gradle and running project in random order but unfortunately it's still not working.\nDo you have any other ideas?\n. I'm using OS X (Mavericks). Pressing green play button doesn't work. I also tried both commands - the same errors occurred.\nThanks for apks ;).\n. @sockeqwe that's strange. I'm also using Mac OS X and pressing green button does nothing. Maybe Android Studio cached something from your previous builds?\n. I used other computer (OS: Mavericks, AS: 1.2 Beta) to run mosby. I cloned repo then I opened project using \"Open existing Android Studio project\" and chose root build.gradle. After syncing/building I pressed play and I got errors similar to @TechFreak stacktrace then I pressed play button again, now I got errors with MosbyActivity. Pressed few times more - the same result. I also tried ./gradlew clean assemble --stacktrace - still the same.\n. @sockeqwe Thanks - last commit solves problem :+1: .\n. ",
    "suarezjulian": "Yep, I'm having the same issue. I also tried pressing the Sync Gradle button, but it still fails\n. here is a gist of the gradle stacktrace: https://gist.github.com/62ff4714235bdd7aaced\nIt seems to be complaining about the support library but I do have version 22.0.0 installed on my system. In fact I'm using the exact same version on other projects.\nMy suspicion is that the variables declared on the rootProject with the versions of each library are not being processed correctly by gradle. I'm gonna do some testing and report back my results. BTW I'm using windows @ziem are you also using windows?\n. Tried removing the definition of versions for each libraries from the root gradle file, and using the exact values on each project, but it still doesn't work.\nI tried checking out latest updates from a Linux pc, and got a different error: https://gist.github.com/dee73a2513a1f7e53617\nIt seems to be complaining in the :core-dagger1:androidJavadocs task. Is there a way to skip javadocs generation?\n. Ok, I think I've found the issue and a possible workaround. Using my linux pc I switched from Java 8 to Java 7, I got a lot of warnings about javadocs but the samples built just fine.\nThis (http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html) seems to be the issue, apparently Java 8 is more strict about javadocs than java7, and that's what we are seeing here. I'll try to check back on my windows pc to see if switching to java 7 solves the issue there as well.\nI see 2 solutions to make this work on Java 8, first is to fix all of the javadoc warnings (there are a lot) or second is to disable javadoc lint from the gradle scripts. @sockeqwe not sure which one would you prefer? but I can help you either way.\nIf anyone else can canfirm if switching to java 7 solves their issues it would be great!\n. @sockeqwe Thanks! that fixed it, I can build perfectly from my windows box using java 8 and the latest version from master. BTW the mail example is awesome!\n. Agree with Igor on this one.\nData Binding is a great thing, it gets rid of the need of Butterknife,\nis/will be officially supported, but I also thing that integrating this in\nthe right way in mosby would not be an easy task\nOn Fri, Jul 17, 2015 at 9:52 AM, Igor Ganapolsky notifications@github.com\nwrote:\n\nData Binding gets rid of the need for Butterknife. It also has Observable\nObjects - which automatically update your Views when data changes. It also\nmakes your ViewHolder code simpler, by binding all the Views for you\nimplicitly. How could this be a bad thing?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/71#issuecomment-122300025.\n. If you post the error/stack trace you are seeing we might be able to help\nyou\n\nOn Wed, Jul 29, 2015 at 6:08 AM, HowardSchmaeu notifications@github.com\nwrote:\n\nSorry my Friend, that's what i DID yesterday!!! but i does not work... :-(\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/73#issuecomment-125920901.\n. \n",
    "IgorGanapolsky": "I am getting similar issues.  Gradle build spits out the following errors:\n\nError:(19, 10) error: package rx does not exist\nError:(20, 29) error: package rx.android.schedulers does not exist\nError:(21, 21) error: package rx.schedulers does not exist\nError:(32, 39) error: cannot find symbol class Observable\nwhere T is a type-variable:\nT extends Object declared in class AndroidSchedulerTransformer\nError:(32, 20) error: cannot find symbol class Observable\nwhere T is a type-variable:\nT extends Object declared in class AndroidSchedulerTransformer\n\nI am on Android Studio 1.2 Beta 3.  What is going on??\n. @sockeqwe Thanks for the suggestion to failonError false.  That did the trick for me.  Such a convoluted problem with a such a simple fix!  I can continue to use Java8 now.  Have some bitcoin $1 on me @changetip.\n. It would be awesome if you could augment the mail sample with scrolling tabs.  That would pretty much complete the gamut of Material Design + MVP pattern + dependency injection + RXJava.\n. I am interested in implementing tabs with Toolbar in MVP.  Your second\npoint...\nOn Apr 17, 2015 3:58 PM, \"Hannes Dorfmann\" notifications@github.com wrote:\n\nif I find time I will add \"profiles\" for mail senders, but I'm not sure\nwhat the tabs should contain ^^\nor\nare you asking me about how to implement an activity with tabs in mvp,\ni.e. the number of tabs and type of fragment the tabs will display are\nloaded dynamically i.e. from a server?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/10#issuecomment-94062740.\n. It's a start :)  I'm trying to keep it from getting complicated.  Google's\niosched source code implements tabs in a very convoluted way.  So I was\nwondering if MVP would simplify this process...\n\nThanks,\nIgor\nOn Apr 17, 2015 4:05 PM, \"Hannes Dorfmann\" notifications@github.com wrote:\n\nI cant promise to implement, but I try to find time.\nActually, with mosby it's just an MvpLceActivity, where the \"Content\" is a\nLinearLayout containing Tabbar and ViewPager. The \"data\" is a list of\n\"tabs\" like\nclass TabsData {\n     String name;  // The name displayed in the tabbar\n     String fragmentType;  // some kind of mapping from \"foo\" to \"FooFragment\"\n}\nEach Fragment in the ViewPager has it's own MVP thing ... So Activity uses\nMVP to control the Tabbar PagerAdapter and ViewPager and each \"tab\" is a\nFragment having it's own MVP thing ...\nHope that helps\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/10#issuecomment-94063896.\n. Yes, please rename to make them more clear with the design pattern.\n\nIgor\nOn Apr 27, 2015 4:06 PM, \"Hannes Dorfmann\" notifications@github.com wrote:\n\nYep, actually, the ViewState implementation already works like that by\nproviding a delegate. Have a look at ViewStateManager and ViewStateSupport.\nMaybe I should rename ViewStateManager to something like ViewStateDelegate\nand rename methods to match activity / fragments lifecycle names to make it\nmore clear how to use them.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/14#issuecomment-96799511.\n. I don't think it's the same issue, because I am not seeing explicit errors.  In my case, the green play button never gets enabled because the modules aren't built into android applications.\n. I do not see unit testing feature in Settings > Gradle > Experimental\n. I am now seeing this error in Android Studio gradle message at the bottom:\nA newer version of com.android.tools.build:gradle than 1.2.0-beta1 is available: 1.2.0\n. Did a pull request for 1.2.0, works now!\n. Do you even need support v4?  Maybe you can just get away with v7 :wink: \n. The reason is the creator of Icepick uses 3.0.3-SNAPSHOT in his repo himself now!\n. What I am talking about is what Jake Wharton used in his u2020 project for Dagger.  You can also see usages of this for Dagger 2 here: https://github.com/LiveTyping/u2020-mvp \n. Does @Singleton replace @ActivityScope?\n. I see.  I guess I'll stick to your simpler implementations :smile: \n. Give an example.  You have to extend from AppCompatActivity to get a\nToolbar nowadays....\nOn Apr 29, 2015 1:01 PM, \"fmnstr\" notifications@github.com wrote:\nIt would be a nice enhancement to provide alternative classes that do not\nuse support library.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/22.\n.    Firstly, your MainActivity should extend AppCompatActivity, not\nActionBarActivity - to be in line with latest AppCompat library.  Just a\nsuggestion...  And use a Toolbar.\n   Second, I'm guessing you have annotated your model POJOS with\n@Parcelable.  Are you using Retrofit and GSON libraries for your\nrequest/response logic?\nOn May 2, 2015 8:23 AM, \"Rakesh Waghela\" notifications@github.com wrote:\nHere is the crashlytics report\nhttp://crashes.to/s/de64b446301/details\nDoes it have anything to do with ParclablePlease ( or it's pro-guard\nconfiguration )?\nOr Any other Mosby components ?\nThis is the first time such error has occurred and it doesn't see on a new\ndevice. it is a kind of old device.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/23.\n. Nevermind.  The problem was in my LoginPresenter.  I was trying to inject a parameter into its constructor which was not provided by my Module.\n. @sockeqwe Thanks for making progress on this.  Have some @changetip $1 bitcoin on me.\n. I'm looking forward to this travils.yml file.\n. Do you need to create an emulator like this?\nbefore_install:\n- echo no | android create avd --force -n test -t android-22 --abi armeabi-v7a\n  - emulator -avd test -no-skin -no-audio -no-window &\n. Thanks!\nOn May 20, 2015 1:46 PM, \"Hannes Dorfmann\" notifications@github.com wrote:\nHi,\nonEvent is the way to register methods on GreenRobot's EventBus\nhttps://github.com/greenrobot/EventBus. GreenRobots EventBus doesn't\nhave @Subscribe annotations like Otto, instead every method with onEvent\nprefix gets registered on the EventBus.\nonEventMainThread is just the way to specify that the EventBus should\ndispatch the Event on android's main UI thread. GreenRobots EventBus\nsupports dispatching Events through different threads.\nYou may wonder where the methods gets registered to the EventBus.\nGreenRobots EventBus supports inheritance quite well. So\nBaseRxMailPresenter doesn't registers itself directly on the EventBus,\nbut its super class BaseRxAuthPresenter\nhttps://github.com/sockeqwe/mosby/blob/master/sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/base/presenter/BaseRxAuthPresenter.java\ndoes. Hence, all onEvent and onEventMainThread methods along the\ninheritance hierarchy (inclusive subclasses) gets registered automatically\nto the EventBus, i.e. MailsPresenter\nhttps://github.com/sockeqwe/mosby/blob/master/sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/mails/MailsPresenter.java\nHope that answers your question.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/36#issuecomment-103972048.\n. @fahimk So what's the solution?\n. @fahimk Tried it already.\n. It doesn't matter if I use 'apt' or 'provides'.  Still the same result.\nAnd Icepick works fine elsewhere in my project that isn't extending this\nactivity.\n\nI guess I'll drill down like you suggested to see the cause...\nIgor\nOn May 20, 2015 5:51 PM, \"Hannes Dorfmann\" notifications@github.com wrote:\n\nDo you have added the dependency to icepick processor in In your APPS\nbuild.gradle file?\napt 'frankiesardo:icepick-processor:3.0.2'\nYou can debug your code: override onSaveInstanceState and step into\nsuper.onSaveInstance() with your debugger until you reach\nMosbyActivity.onSaveInstanceState(). Do the same in onCreate() to ensure\nthat really icepick is the problem\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/37#issuecomment-104049370.\n. In your sample, your createViewState() method returns  new ParcelableDataLceViewState<>(); However, in the mosby mail sample, you are returning `new CastedArrayListLceViewState<>();.  Does this have any impact on things, or am I totally looking in the wrong place?\n. I am getting the same error now when building Mosby samples on Windows.  It\nisn't just a warning!  It is a full-blown error that is a show-stopper.\nOn May 27, 2015 6:40 AM, \"Hannes Dorfmann\" notifications@github.com wrote:\nI'm not 100 % sure, but I think that this warning just says that you\nshould specify the path to jdk. Just ignore it [image: :smiley:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/40#issuecomment-105861760.\n. Cross platform?  What gave you the idea that this framework is intended for\nanything other than Android!\nOn May 30, 2015 1:54 PM, \"Dale King\" notifications@github.com wrote:\nThe Presenter side of things should be packaged as plain Java jars with no\nandroid content so that presenter code can be cross platform. For example,\nI see that MvpBasePresenter is packaged right next to MvpActivity and\nMvpFragment and packaged into an android library even though it is not\nAndroid specific. Items that are android specific like mvp should really be\ncalled something like mvp-android since there could theoretically be things\nmvp-swing or mvp-swt for desktop.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/44.\n. I agree with Hannes, people looking for Enterprise Java or Desktop Java\nsolutions should look elsewhere.  Don't bother us - Android devs - with\nstuff we don't care about.\nOn May 30, 2015 2:28 PM, \"Hannes Dorfmann\" notifications@github.com wrote:\nIn general I agree that Presenter usually shouldn't have dependencies to\nandroid. Actually, the interfaces are packed in a plain old jar file\nhttps://github.com/sockeqwe/mosby/tree/master/mvp-common/src/main/java/com/hannesdorfmann/mosby/mvp\nHere you can find MvpPresenter. MvpBasePresenter implements MvpPresenter\ncould be moved in the same jar. It's not a big deal.\nHowever, the question is: Is it worth to make an effort in\nrefactoring/repackaging this things. Next we may should refactor rx package\nand so on. Is it really worthwhile? Will mosby ever be used on oher\nplattforms?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/44#issuecomment-107074230.\n. Thanks!\n\nOn Tue, Jun 2, 2015 at 5:59 PM, Hannes Dorfmann notifications@github.com\nwrote:\n\nHi,\nyou are on the right track. MosbyActivity is the root Activity and just\nintegrates Butterknife and Icepick. What you are looking for is MvpActvity\nor MvpFragment from mvp module. It's basically just an Activity /\nFragment with createPresenter() method. If you want to add ViewState\nsupport then MvpViewStateActivity or MvpViewStateFragment from viewstatemodule\nis what you are looking for.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/49#issuecomment-108110655.\n. I see what the problem is:\nin createViewState() method, I have to return new CastedArrayListLceViewState<>();\n. It does not have to be triggered by PullToRefresh action.  This method is\ntriggered when loading data when activity comes on the screen.\nOn Jun 9, 2015 11:20 AM, \"Hannes Dorfmann\" notifications@github.com wrote:\nHi,\nthe idea is that this methud gets called from your pull to refresh\nmechanism as well like SwipeRefreshLayout and that one passes true as\nparameter. Have a look at the simple example (sample folder)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/51#issuecomment-110399937.\n. I figured out the problem.  Apparently you cannot set TextView text with an int value.  You have to convert it to a String first!  Very misleading error...\n. But mHousecalls is a List, not an integer!!\n. So Kotlin solves this problem by internally looking for null Views?  I\ndidn't know that. Perhaps I should give Kotlin a more serious look.\n\nIgor\nOn Jun 14, 2015 9:11 PM, \"Hannes Dorfmann\" notifications@github.com wrote:\n\nIn general I agree, it's painful to add all those isViewAttached()\nchecked.\nFirst let me explain why MvpBasePresenter uses a WeakReference. Usually\nthere is no need to wrap the MvpView in a WeakReference because:\n1.\nAny async call should be canceled in detachView(), so that no callback\n   should be invoked afterwards. For instance with RxJava and\n   unsubscribe() this works like a charm.\n   2.\nHowever, there might be scenarios where you don't want to cancel\n   running async background tasks, like using retaining Fragments. But also in\n   that case the Fragment gets detached and reattached temporarily during\n   orientation changes. However, Mosby assumes that every interaction with the\n   view takes place on the main UI Thread. So every interaction with the view\n   from a callback / presenter must run on the main UI Thread. Hence\n   it's not possible that a callback accesses the view during a screen\n   orientation change, since screen orientation changes run on the main ui\n   thread as well. Therefore, either screen orientation changes run before\n   callback or vice versa, but never in parallel.\nSo why does Mosby's default implementation uses a WeakReference?\nThe only reason why Mosby's default implementation uses a WeakReference\nis that I wanted to avoid memory leaks if other developers misuse Mosby by\nwriting a custom delegate that i.e. forget to call presenter.detachView().\nThus at a first glance you might come to the conclusion that View can\nnever be null. Unfortunately, it can be in case that View is detached\n(i.e. user has closed the activity by pressing back button) but an async\nrunning background thread has not been canceled in detachView(). i.e. as\nfar as I know Retrofit 1.x has no API to cancel running requests.\nTherefore, we have to check if view != null anyway.\nAlright, so back to your suggestion to use the null object pattern. Your\nimplementation looks good (there is a little issue with WeakReference, I\nhave added a comment in your commit to point out the problem) and I think\nin that case it reasonable to use reflections.\nBut I have in general a problem with the null object pattern in general. I\ndon't like it because usually it only tries to hide other problems (might\nbe an implementation detail like libraries that don't support canceling\nasync threads or a lack of java programming language syntax /\nexpressiveness).\nOn one hand you are right and those view != null checks are pretty\nannoying. I have to think about it again, but I think we could try to find\na compromise by adding those kind of base presenter, but I see it more as\nan addition and not as a replacement of MvpBasePresenter. However, having\na second null object based MvpNullObjectBasePresenter implementation may\nresult in having also a bunch of other presenter implemetation like\nRxNullObjectPresenter, RetrofitNullObjectPresenter and so on.\nOn the other hand that kind of problem could be solved by a Kotlin, where\nyou could replace\nif (isViewAttached()){\n    getView.showContent();\n}\nwith\ngetView()?showContent()\nWhat do you think?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/56#issuecomment-111894936.\n. @sockeqwe Currently, your AboutFragment extends MosbyFragment: https://github.com/sockeqwe/mosby/blob/master/sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/profile/about/AboutFragment.java#L19.\n\nIf what you said above is true, then why provide a sample which extends something which isn't meant to be extended directly?\n. @sockeqwe Thank you for explaining things in detail here.  I believe I have better knowledge about this question now.\nI was gonna leave this issue alone, but you and @lurbas have been condescending and tempted further arguments here.\n\nall this fragment does is display the persons data\n\nI can say the same about MailsFragment: all this fragment does is display the mails data.  Yet MailsFragment extends BaseMailsFragment, which in turn extends BaseMailView.  How is that intuitive??\n\neven though I pointed that in Tipp 11 on http://hannesdorfmann.com/android/mosby-playbook/\n\nWell, this isn't college, and yours isn't a textbook.  So you can expect some people may miss your playbook information.\n\nsuch things would be asked and answered on stackoverflow\n\nMosby isn't ubiquitous on StackOverflow, and therefore users are compelled to ask these questions on your Github repo page now.\nI never expected to be treated so irreverently on Github, especially after contributing pull requests and donating some bitcoin to a project.\n. > hence it uses MosbyFragment and not MvpFragment\nIf someone would've explained it this way in the beginning (instead of being disrespectful @lurbas), this long disturbing conversation thread would've been avoided.\n. Please do this.  I cannot use Butterknife 7 in MvpLceFragment because of this....\n. Why is Icepick a problem?\n. So we would be getting rid of Icepick's orientation handling\nfunctionality...\nOn Jul 13, 2015 12:09 PM, \"Hannes Dorfmann\" notifications@github.com\nwrote:\n\nThe same problem as with Butterknife could be occur. What if icepick's API\nchange in 3 months. Then we also have to migrate Mosby to make it work and\nit also may breaks backward compatibility i.e: Now Butterknife 7 is\nrequired in Mosby 1.2.0 you can not use Mosby 1.2.0 as long as you\nhaven't migrate your app to Butterknife 7.\nRegarding Kotlin: I'm not 100% sure, but I think that Kotlin has some\nother accessibility behaviour as java. As far as I know there must be a\nsetter method used for each field which doesn't has to declared in your\nKotlin class but will kind of \"generated\" internally by Kotlin. And you\nhave to set the value of a field by using the corresponding setter method.\nThe Annotation processor must be changed to use the setter instead of\naccessing the field directly like it's done at the moment in java.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/59#issuecomment-120982696.\n. @jjvargas As opposed to closed-source?\n. @twig Does Parcelable cancel out Icepick?\nOn Sep 7, 2015 7:19 PM, \"twig\" notifications@github.com wrote:\nThank you for this.\nI didn't want to install IcePick because I already had Parcelable.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/63#issuecomment-138392140.\n. @brianguertin . That's a mouthful of a name :)\nOn Aug 6, 2015 2:47 PM, \"Brian\" notifications@github.com wrote:\n@sockeqwe https://github.com/sockeqwe Fortunately, you can use\nonRetainCustomNonConfigurationInstance\nhttp://developer.android.com/reference/android/support/v4/app/FragmentActivity.html#onRetainCustomNonConfigurationInstance%28%29\nwhich is not deprecated\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/64#issuecomment-128471734.\n. Absolutely sure.\nOn Jul 13, 2015 5:15 PM, \"Hannes Dorfmann\" notifications@github.com wrote:\nAre you sure you are using 1.1.1 and not 1.2.0-SNAPSHOT ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/66#issuecomment-121062146.\n. Oh darn.  That makes sense!  Thx\nOn Jul 13, 2015 5:17 PM, \"Hannes Dorfmann\" notifications@github.com wrote:\nIt seems that you are using Butterknife 7 with Mosby 1.1.1 because\nbutterknife 7 has renamed Butterknife.inject() to Butterknife.bind()\nButterknife 7 is supported with 1.2.0-SNAPSHOT\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/66#issuecomment-121062657.\n. @sockeqwe Thanks for making progress on this.  @changetip $1\n. Cool, thx.  I think one the biggest benefits of MVP is being able to write unit tests.  I'm sure people would like to learn...\n. @sockeqwe I was specifically wondering about testing Observables: whether they return valid objects or make the appropriate network calls that they are set up to.  But thanks for your lengthy explanation on testing Presenters with SQLite, I may use that approach in my personal app.\n. I am curious, in your example code above - what is MyView?  Is it an extension of MVPView.  If so, then that code doesn't compile.  Those public fields - showLoadingCalled, showContentCalled - cannot be resolved.\n. Data Binding gets rid of the need for Butterknife.  It also has Observable Objects - which automatically update your Views when data changes.  It also makes your ViewHolder code simpler, by binding all the Views for you implicitly.  How could this be a bad thing?\n. @shism2 What does RXjava have to do with Data Binding?\nOn Aug 15, 2015 6:19 PM, \"shism2\" notifications@github.com wrote:\nCouldn't RXandroid AND android Databinding just be combined into mvp mosby\nframework? It would be something like MVVP\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/71#issuecomment-131456516.\n. @virl Virl How can you have an Android app without Activities?\nOn Jul 19, 2015 6:45 PM, \"Virl\" notifications@github.com wrote:\nHi!\nGreat library, but I think it is not radical enough and doesn't solve main\nproblem: Activities and Fragments.\nFragments are crap and so are Activities. So if you want to make good\nMVP/MVC/MVVP library for android, you have to discard any Fragment and\nActivity usage.\nMore on that can be read here, for example:\nhttps://corner.squareup.com/2014/10/advocating-against-android-fragments.html\nFor last week I'm building something very similar in concept to your\nlibrary \u2014 basically are liberal port of iOS's ViewControllers to Android:\nhttp://www.youtube.com/watch?v=4S4vr23qB7k\nIt have ViewController, NavigationController and TabController with\nbackstack and up button support.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/72.\n. Why would having one Activity be better than multiple activities?  I mean,\nwe are talking about OOP here and separation of concerns.\nOn Jul 19, 2015 6:52 PM, \"Virl\" notifications@github.com wrote:\n@IgorGanapolsky https://github.com/IgorGanapolsky I have fully emulated\nActivities and Fragments with my own component hierarchy without their\nproblems. I even ported iOS Animation Transition framework which uses\nAndroid View Animators (you can see it on video I posted \u2014 it is all single\nActivity).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/72#issuecomment-122712907.\n. Then how will you have multiple layouts if you have an app that must\nconsist of 20 Activities?  I mean you will just dynamically switch their\nViews in Java?  That code will be as ugly as ever.  I agree, Google didn't\ncreate a perfect architecture with Fragments.  But  Activities are fine....\nOn Jul 19, 2015 6:59 PM, \"Virl\" notifications@github.com wrote:\n@IgorGanapolsky https://github.com/IgorGanapolsky I'm not against\nseparation of concerns, I'm just saying that Activities+Fragments are\ncrappy implementation of it. So we must have our own. Basically Presenters\n(or Controllers) must totally replace Activities and Fragments and use only\nnested Views.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/72#issuecomment-122715121.\n. Besides, Flow/Mortar was just a theoretical paper by Square.  Nobody is\nactually is actually using that lame framework in production.\nOn Jul 19, 2015 6:59 PM, \"Virl\" notifications@github.com wrote:\n@IgorGanapolsky https://github.com/IgorGanapolsky I'm not against\nseparation of concerns, I'm just saying that Activities+Fragments are\ncrappy implementation of it. So we must have our own. Basically Presenters\n(or Controllers) must totally replace Activities and Fragments and use only\nnested Views.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/72#issuecomment-122715121.\n. @Virl. Now that i think about it, your point #1 is valid:  Activity\ntransitions and creation on Android are unacceptably slow.  They are\nincredibly ugly.  So yea, getting rid of that bottleneck is a good idea.\nOn Jul 19, 2015 7:07 PM, \"Igor G.\" eazyigz@gmail.com wrote:\nBesides, Flow/Mortar was just a theoretical paper by Square.  Nobody is\nactually is actually using that lame framework in production.\nOn Jul 19, 2015 6:59 PM, \"Virl\" notifications@github.com wrote:\n\n@IgorGanapolsky https://github.com/IgorGanapolsky I'm not against\nseparation of concerns, I'm just saying that Activities+Fragments are\ncrappy implementation of it. So we must have our own. Basically Presenters\n(or Controllers) must totally replace Activities and Fragments and use only\nnested Views.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/72#issuecomment-122715121.\n. @Virl The video shows a nice start.  I hope you can make a ripe framework\nout of it.  @changetip $1\nOn Jul 19, 2015 7:11 PM, \"Virl\" notifications@github.com wrote:\n\n\n@IgorGanapolsky https://github.com/IgorGanapolsky\nhttp://www.youtube.com/watch?v=dqelBt0HQJs \u2014 demo of animations my library.\nIt is single activity.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/72#issuecomment-122716151.\n. @HowardSchmaeu You should be importing the gradle project in Android\nStudio.  In that case it is the top-most build.gradle file in the repo.\nOn Jul 28, 2015 12:01 PM, \"HowardSchmaeu\" notifications@github.com wrote:\n\ni just download the actual Version as .zip File and try to import and\nbuild that... but i got 290 Errors :-)\nI update also to the newest Tools and Stuff with the SDK Manager...\ndid u have ANY Idea ??\nTHX\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/73.\n. Did you set this in your build.gradle:\ncompileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n. @sockeqwe I see.  Well, I use retrolambda, so I am used to putting JavaVersion.VERSION_1_8 - which works perfectly.\n. @oderayi. What do you mean \"isolate\"?  Android Studio (as Intellij) has\nbeen working with modules for years.  This is not something new.  Just run\nthe sample mail app as an Android module, while adding the needed\ndependencies in its build.gradle file if you wish.\nOn Sep 7, 2015 7:56 AM, \"oderayi\" notifications@github.com wrote:\nHello,\nIt would be great to see the sample-mail app as a top level project using\njust the mosby library as a dependency. That way it would be easier to see\nhow mosby can be integrated into an existing app.\nIn the meantime, could you guide on how to isolate the sample-mail app and\nmake it a top level project in Android Studio without having to compile all\nthe dependencies?\nThank you for this great library.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/82.\n. @oderayi You can use Mosby in yout app simply by including the relevant\n(what you need) mosby dependencies in your app module's build.gradle file.\nYou do not need to inspect the source code of Mosby.  However, if you wish\nto become proficient in using Mosby, it would behoove you to study things\nlike MvpLceFragment and MvpLceActivity.\nOn Sep 7, 2015 10:55 AM, \"oderayi\" notifications@github.com wrote:\n@IgorGanapolsky https://github.com/IgorGanapolsky Maybe I asked the\nquestion in a wrong way because I am relatively new to Android/Java.\nMy question is: Can I use Mosby without seeing its source or having its\nsource loaded into my project?\nThanks\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/82#issuecomment-138318065.\n. @ersin-ertan What is your ReposComponent a subcomponent of?\n. \n",
    "changetip": "Hi @sockeqwe, @IgorGanapolsky sent you a Bitcoin tip worth 4,474 bits ($1.00), and I'm here to deliver it \u2794 collect your tip.\nLearn more about ChangeTip\n. Hi @sockeqwe, @IgorGanapolsky sent you a Bitcoin tip worth 4,128 bits ($1.00), and I'm here to deliver it \u2794 collect your tip.\nLearn more about ChangeTip\n. Hi @sockeqwe, @IgorGanapolsky sent you a Bitcoin tip worth 3,399 bits ($1.00), and I'm here to deliver it \u2794 collect your tip.\nLearn more about ChangeTip\n. Hi @virl, @IgorGanapolsky sent you a Bitcoin tip worth 3,505 bits ($1.00), and I'm here to deliver it \u2794 collect your tip.\nLearn more about ChangeTip\n. ",
    "fahimk": "Sorry, didn't realize that. I can rename the private methods, then keep the abstract ones the same.\n. I've updated the change list to use the same method names.\n. Yes, that's what I've done in my current project. \n. yes, they are non retained fragments that are added to backstack\n. Try this: https://github.com/frankiesardo/icepick/issues/50\n. change from:\njava\ncompile 'frankiesardo:icepick:3.0.2'\nprovided 'frankiesardo:icepick-processor:3.0.2'\nto:\njava\ncompile 'frankiesardo:icepick:3.0.2'\napt 'frankiesardo:icepick-processor:3.0.2'\n. ",
    "jenzz": "I've been experimenting with this library a tiny bit this afternoon and was looking for a similiar PreferenceFragment implementation.\nI think the best and most flexible solution for this is a delegate interface / abstraction similar to what we can find in the latest support library update. So I would expect this library to provide abstract MVP implementations for the most common base classes, but if I cannot find a particular implementation, I can still extend the support to any type of Activity, Fragment, etc that I'm looking for.\n. Sure. That's how open-source works, right?\nI'm happy to send over a PR that you can tweak as you see fit.\nI think the use of WeakReference in the presenter needs to be revised though. I suggest dropping them altogether.\nI see the point of being defensive to avoid potential misuse of your library. However, devs should know that for every call to register(), attach(), subscribe() there is most probably a corresponding unregister(), detach() or unsubscribe(). I usually add documentation (Javadoc) to the respective public methods and mention the importance of deregistering to avoid memory leaks.\n. Done.\nI've also moved the new presenter into the mvp-common module since it's an Android-agnostic implementation and there is no need for it to reside in the mvp module which is in fact Android-specific.\n. ",
    "siavashabdoli": "@sockeqwe  your blog page show 404 error :D is there any example for dialogfragment in your project?\n. @sockeqwe  Yes, I see but we can't extend your library class directly in this one. I have to implement MvpViewStateDelegateCallback and implement attaching detaching and all MVP logic, is it right?\n. @sockeqwe the real problem is your Delegate classes Implementation can't recognized the view(for example fragment) is totally destroyed or it's  destroyed just for orientation change.\nif they store anything like context in static field they get leak from LeakCanary but what about when you just don't need the presenter class anymore and it remained in PresenterManager? the presenter is not needed anymore.\nI think for fragment case you should check if onDestory called you should delete the presenter instance. and if developers want to get presenter from cache in case of orientation change they should setRetainInstance to true. when it will be released?\nI didn't get any leak report from LeakCanary. I just checking the implementation and find out it can be leaked whether it report by Canary or not. So I decide to write an issue but I see there is already a thread about that.. ",
    "Thomas-Vos": "@sockeqwe I read your blog post and understand how to use the delegate. However, your example code for a DialogFragment uses a custom view. Where should I call the delegate.onViewCreated(View, Bundle) method if I'm overriding onCreateDialog(Bundle) instead?. @sockeqwe Is there a possibility that you could reopen this issue? I really need an emptyView as I want to show a different view for 'no items' and 'error'. If there are no items, it does NOT mean it is an error.\nFor example for an app where you can create notes. (like Google Keep). If there are no notes created yet it is not an error. Instead it should show an emptyView which shows something like \"No notes created yet, create some by clicking new.\".\nMaybe you could make it so the empty view is optional, so no exception if the view isn't found. This way someone doesn't need to add an emptyView if he doesn't wamt to. \nAny ideas? Thanks, Thomas. Hello @sockeqwe,\nI'm using your library Mosby in a Java module and used your workaround above. It works and am able to compile the project. However, I would like to be able to put the Views and Presenters in the Java module. Isn't it better to move MvpBasePresenter to the mvp-common module? How should I be able to use MvpBasePresenter?\nThanks, Thomas. Thanks for your quick reply. I'll just copy the class into my project as\nyou suggested.\nBtw: I'm using Mosby for an Android app and not (yet) a Java app. The\nreason why I am compiling in a Java module is so I have the flexibility to\nreuse the code for another platform/app based on Java. Maybe someday in the\nfuture I want to port my app to another platform, and this way I only need\nto do program the UI stuff, as the main app logic is programmed in pure\nJava.\nIntel developed some software called Multi-OS Engine. It allows you to\nprogram Android and iOS apps in pure Java. (All within Android Studio!) I\nhave no idea how stable their software is but it looks really promising. If\nyou want to check it out, here's a link: https://multi-os-engine.org/\nRegards,\nThomas\nOn 16 June 2017 at 21:29, Hannes Dorfmann notifications@github.com wrote:\n\nOnce it is in mvp-common it is also available for other modules like MVI if\nI remember correctly. Not sure what the best solution would be here. I\npersonally think that you should copy and paste it in your own project as I\nwould not really like to introduce modules if there is not a high demand\nfor it (you are the first person Im aware.of using Mosby for java\napplications as well).\nSuperThomasLab notifications@github.com schrieb am Fr., 16. Juni 2017,\n20:57:\n\nHello @sockeqwe https://github.com/sockeqwe,\nI'm using Mosby in a Java module and used your workaround above. It works\nand am able to compile the project. However, I would like to be able to\nput\nthe Views and Presenters in the Java module. Isn't it better to move\nMvpBasePresenter to the mvp-common module? How should I be able to use\nMvpBasePresenter?\nThanks, Thomas\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/127#issuecomment-309107452,\nor mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/\nAAjnrryNjctphYBmOYCnKcjf9mPR_-fmks5sEs_egaJpZM4H5SVc\n.\n\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/127#issuecomment-309114554, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AKkGYUgC_PYxZScdPB0p-6hj9M2Z-BUBks5sEteggaJpZM4H5SVc\n.\n. I think it's best to go with option 2 but without making it a breaking change. You should be able to remove the method void detachView(boolean) from the presenter interface but keep in in MvpBasePresenter. If a presenter extends MvpBasePresenter it still \"overrides\" the void detachView(boolean) method, so it shouldn't give a compile error. Then sometime in the future we could remove the void detachView(boolean) method when everyone has had the time to change their code.\n\nI'm currently having some issues with the Fragment's back stack and option 2 should solve this.. @sockeqwe Thanks for an explanation about the back stack. If Mosby 3.1 adds adds support for a \"queue\" it would be great! How would you recommend me implementing my code, until the new 3.1 approach, so it will be easy to migrate?. @sockeqwe Hi Hannes, have you had a chance to work on the new presenter implementation? Could you share your idea about on how you are going to implement it? If you have a snapshot ready, I'll be glad to help with testing. Thanks, Thomas. Hello @sockeqwe, I want to keep the presenter on a configuration change, that's why I call setRetainInstance(true). I just tried without calling setRetainInstance(true); the presenter is not retained anymore on a configuration change, and I'm still having the same issue.\nIf I return to Fragment A (by pressing back or popping the back stack), the presenter is recreated anyway, so that's why I set keepPresenterAndViewStateOnBackstack to false. (issue #265)\nI also noticed if you remove Fragment A from the back stack (go \"up\"), then Fragment B/C call detachView(retainInstance=true). I currently have worked around this by calling detachView(false) manually in the Fragment's onDestroy(). Is this a bug?\nThanks for your help,\nThomas. Hello Hannes,\nThank you very much for the snapshot. I'm currently in progress of testing it.\nI noticed the parameter keepPresenterAndViewStateOnBackstack in the contructor of FragmentMvpViewStateDelegateImpl doesn't work correctly. This is how I initialise the class (within a Fragment):\nnew FragmentMvpViewStateDelegateImpl<>(this, this, true, false);\nNow whenever you put a Fragment on the backstack, and then (after a few seconds) call ifViewAttached(true, ...), an exception is thrown:\njava.lang.IllegalStateException: No View attached to Presenter. Presenter destroyed = false\nThe exception above says the presenter is not destroyed, that's why my RxJava subscription isn't stopped. Shouldn't the presenter be destroyed when the Fragment is put on the backstack?\nThanks, Thomas. Sorry, I don't have the code available on GitHub.\nAlso now there is back stack support I don't need to set the parameter to false anymore, but I thought it would be good to let you know.. I have RxJava2 subjects that need to be subscribed/disposed between onStart and onStop (in the presenter, of course). That Subject calls onNext very often with new data for the view, so MvpQueuingBasePresenter would just make the queues too large. In a Fragment I can use attachView and detachView but it works differently in an Activity because the View is not yet initialised before calling super.onCreate(Bundle), so there is no way to display the data yet.\nIs there a reason that am Activity is attached (to presenter) in onCreate and a Fragment is attached in onStart? How is the presenter supposed know when to \"start\" and \"stop\" subscribing to an infinite data \"stream\"?\nEdit:\nFound a solution for now. I created a subscribe() and unsubscribe() method in the presenter and call those from the View in onStart() and onStop(). In those two method I subscribe/dispose to my data stream. This is similar to the TODO-MVP sample. (see Fragment and Presenter). I also created a onFirstCreate() method in the Presenter that is called from the View in onNewViewStateInstance() to setup some one-time view stuff. (e.g. toolbar title, loading indicator, etc). What do you think about this?. I have a suggestion for the MvpQueuingBasePresenter. Currenly if you use this presenter implementation you can only use the method onceViewAttached(ViewAction). There is no way to just 'skip' the view action.\nIn an app I'm creating I made my own presenter implementation with both the methods onceViewAttached(ViewAction) and ifViewAttached(ViewAction). For example if data is loaded I call onceViewAttached(ViewAction) because this action cannot be skipped. However, if you want to show a message/error dialog to the user, should the dialog show if the user is navigating 'up' in the fragment backstack? I don't think a dialog is relevant anymore because the view could already have changed state.\nWhat do you think about adding a method like ifViewAttached(ViewAction), or maybe a method to cancel the current view actions that are in the queue?. I think creating another method is the best way, so it stays similar to MvpBasePresenter (and it would be more easy to change a class from MvpBasePresenter to MvpQueuingBasePresenter). Other option would be to use something like ifViewAttached(boolean addToQueue, ViewAction action). What do you think?\nBTW: I have been using Mosby 3.1.0 for a few weeks now in a published app and haven't run into any issues. Thanks a lot for this library!. I think the README is incorrect. The dependency name is like this: mvp-queuing-presenter. (just tested) So there shouldn't be a problem, right?\nIf you make a pull request, there's a small typo in the README dependencies. There is a missing ' character.. I think we should use Queuing. https://trends.google.com/trends/explore?date=today%205-y&q=queueing,queuing. ",
    "liuzhen2008": "@sockeqwe I see that we use a MvpViewStateDelegateCallback in the document. Is this only available in mosby3? . @sockeqwe Any idea what the name is in mosby2? \nI see BaseMvpViewStateDelegateCallback and FragmentMvpDelegate. Where can I find the document to properly initialize a \"ViewState\"?. ",
    "mseroczynski": "@sockeqwe Are you planning on adding base implementations for DialogFragment or should it be handled by developer by design? . If I'll manage to implement it I'll surely make a PR, but currently (sadly) I just need a fast working solution for my specific MVP case for my work so please do not consider it 'incoming asap' :). Btw, big thanks(!) for your work with Mosby, awesome blog posts, The Context podcast and everything! \ud83d\udc4d . Please take a look at it, if there's anything to do differently I'd start working on it already (with pleasure :).. ",
    "ltrojanowski": "I'm not sure if it is a good idea to even add this to mosby. It's yet another thing to maintain and I can't imagine how busy someone like @sockeqwe must be anyways. The suggested solution of adding the delegate worked with no problems. If anyone stumbles upon this and wants to copy paste an implementation for MVI check out this gist.. ",
    "TymofiiKriuchkov": "Good day! I have same problem: published applications to Google Play and I receive reports form Crashlytics about a large number of crash of this type:\nFatal Exception: java.lang.RuntimeException\nUnable to start activity ComponentInfo{com.tikamori.facedetector/com.tikamori.facedetector.activity.SecondActivity}: java.lang.RuntimeException: Parcel android.os.Parcel@40fa95d0: Unmarshalling unknown type code 51 at offset 480\n Not using ProGuard and Mosby. May I know how did you fixed this bug?\n. ",
    "Pabloku": "Hi!\nI am receiving some reports from crashlytics with the same bug reported here. I investigated a little and I found out the following to reproduce it:\n1.- I have an activity that extends MvpLceActivity\n2.- This activity is always in portrait mode as specified in Manifest file\n3.- The exception is thrown at super.onCreate(savedInstanceState); savedInstanceState should always be null, as I do not restore anything\n4.- What I found out is that when the activity is \"minimized\" by the user (home button is pressed) and if the activity is \ndestroyed (I forced it using developer options - destroy activities), savedInstanceState is not null when coming back to the app and the exception is thrown.\nIm not sure if it is a bug or maybe (surely) I am missing something.\nCould you help me? I am using version 2.0.1\nThanks in advance!!\n. Hi! \nI'm not using any ViewState. As my activity is always forced to be portrait, I do not need to save any ViewState. And my data do not implements Parcelable. I attach de full stacktrace. \nJust tell me if I can provide you \nanything else. \nstacktrace.txt\nThanks!\n. Hi! That's weird because...I am not usign MvpLceViewStateActivity :)\nMy Activity:\npublic class ChoosePlanActivity\n    extends MvpLceActivity<RelativeLayout, List<ChoosePlan>, ChoosePlanView, ChoosePlanPresenter>\n    implements ChoosePlanView {\nMy Presenter\npublic class ChoosePlanPresenter extends MvpBasePresenter<ChoosePlanView> {\nMy View\npublic interface ChoosePlanView extends MvpLceView<List<ChoosePlan>> {\n. I have no onSaveInstanceState() method in the activity... I will try to create a simple Android Studio project to try to reproduce the problem... Surely I am missing something...\n. Wow! Finally I discovered what was happening!\nThe problem was caused by https://github.com/arimorty/floatingsearchview, a search view we added long time ago to ChoosePlanActivity. It has a restore data logic that was doing the app crash.\nI am so sorry! It was not a Moby problem. \nThanks very much for your help!\n. ",
    "ghost": "Probably same as #26 \n. I couldn't reproduce this, sorry.\n. ",
    "legarspol": "Problem is that in the second case, if the fragment, viewstate and presenter are recreated and empty of past values, the views are still recreated by the system with their previous state...\nThen is the cleanest way to deal with it to call a cleaner function to set the initial state of each component ?\n. Basically I have a common lce list.\nUnder this list I have a panel where I have some filters controls (like some 3 states buttons, and spinner)\nWhen the activity is recreated, the fragment and presenter restart but the filters controls keep their previous selection.\nThe problem is that the data loaded at initialization don't pay attention of the selected controls.\n. Ho ! Where is the decision chart ? This is what I need.\n. I can confirm one thing:\nFragmentA not retaining has a fragment xml node instancing fragmentB not retaining.\nIf both fragment have loadingView etc... defined it does clash.\nCouldn't reproduce the viewstate clash.\n. Hi, I'll not be available to send you a sample project until I think 2\nweeks.\nOn Fri, Feb 19, 2016, 11:24 Hannes Dorfmann notifications@github.com\nwrote:\n\n@legarspol https://github.com/legarspol Can this issue be closed?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/109#issuecomment-186158913.\n. Hi !\nSorry for the delay.\nHere is the problem I ran into:\nhttps://github.com/legarspol/NestedFragment\n\nBasically id clashes if the son appear too soon in the view.\nYou can look at the two branches in the repo. It happens either by including the fragment from xml or programmatically.\nSwitching the position of the fragment or fragment holder with the textview should make the project compile.\n. Hi,\nIt's not what i'm trying to do. It was sadly happen.\nWe are talking about the fact that by not letting the dev define it's own contentView, loadingView and errorView ids we run into clashs.\nAs fragments and host activity both use the same R.id.contentView some configuration break the app as the host lce get sub fragments ids instead of the activities ones.\n. ",
    "brucemax": "@sockeqwe Your truth. All work fine with Java7. And after your update it is fine with java 8 too. But there is warning message: Warning:[options] bootstrap class path not set in conjunction with -source 1.7\nThanks a lot!\n. ",
    "wKovacs64": "@sockeqwe Would there be a negative impact on Mosby to use a View rather than a TextView? It would be nice to allow for richer error views like the connectivity example from the error patterns section in the Material design guide.\nAutomatically setting the error text could remain functional if the appropriate TextView ID was found. This would probably be a new ID, like R.id.errorMessage or something (while the outer View could use R.id.errorView). Might be able to prevent existing apps from breaking by including an instanceof check for when errorView is a TextView?\nAlternatively, might there be a way to provide some sort of override functionality? Just trying to figure out a way to avoid depending on a locally modified version of Mosby.\n. Understood. Thanks.\n. No problem. I haven't used Mosby yet but wanted to try it so I've been reading through all the documentation and just wanted to make sure what I was reading was accurate.\nI'm not sure I follow when you say you didn't want to add getData() because it is LceViewState related. This is in the \"LCE ViewState example\" section, so it should be expected to find LceViewState things here, wouldn't it?\nI agree that the \"Getting Started\" section can/should be simplified compared to the more in-depth individual sections, but I found it odd that it mentions implementing createViewState() but not getData() - they are both required when extending MvpLceViewStateFragment, aren't they? Once I had read the ViewState section and some of the sample code, it felt strange that it was missing from this example. Not a huge deal, just wanted to bring it up for your consideration from the perspective of a new user.\nNote that the other part of this commit is updating the createViewState() signature in the example to return LceViewState<M, V> rather than ViewState. Is this accurate?\nThanks!\n. ",
    "jemshit": "My problem is: i hide content view when there is error occured and show error text. Then i can not swipe down the swipeRefreshLayout and refresh the screen to see if i can load content again.\nThis is content view:\n\nThis is error view:\n\nWhen i am in state of error, i can't load data again using swiperefresh. It is related to my code implementation but i cannot figure out better way:\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Loading View -->\n<ProgressBar\n    android:id=\"@+id/loadingView\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_gravity=\"center\"\n    android:indeterminate=\"true\" />\n\n<!-- Content View -->\n<android.support.v4.widget.SwipeRefreshLayout\n    android:id=\"@+id/contentView\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/recyclerView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n</android.support.v4.widget.SwipeRefreshLayout>\n\n\n<!-- Error view -->\n<TextView\n    android:id=\"@+id/errorView\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\" />\n\n\n```\nSo if i hide contentView, swipeRefresh is gone and there is no way to refresh the screen to retry loading data. My goal is to be able to use swiperefresh even content is not loaded, is loaded, error view is shown or not. In all states i want to refresh the screen.\n. In the sample email app, you have asked user to click on errorView to retry load content.\n\nSince swipeRefresh is default user behavior  to load data, i don't want user to click error text in order to retry. Let them able to be use swiperefresh again. And question is: is there any way to achieve this?\n. If i make recyclerView as contentView, i think there will be conflict, Since library uses code  contentView.setRefreshing(true) in some places. So i did some workaround now and changed implementation of showError.\nInstead of this:\n``` java\n @BindDrawable(R.drawable.error)\n    Drawable errorDrawable;\n    @Bind(R.id.layoutAll)\n    FrameLayout layoutView;\n    ...\n@Override public void showError(Throwable e, boolean pullToRefresh) {\n    super.showError(e, pullToRefresh);\n    contentView.setRefreshing(false);\n  }\n```\nI have done this, i copied some code from showError() inside LceAnimator.java. Also added drawable on top of text:\n``` java\n@Override public void showError(Throwable e, boolean pullToRefresh) {\n        showErrorView(e);\n    }\nprivate void showErrorView(Throwable e){\n     // Add drawable\n    errorView.setCompoundDrawablesWithIntrinsicBounds(null, errorDrawable, null, null);\n    // This is for allowing swipeRefreshLayout to get touch event when i try to swipe down \n    // on any coordinate of text or drawable.\n    errorView.setOnTouchListener(new View.OnTouchListener() {\n        @Override\n        public boolean onTouch(View v, MotionEvent event) {\n            int action = event.getAction();\n            switch (action) {\n                case MotionEvent.ACTION_DOWN:\n                    layoutView.dispatchTouchEvent(event);\n                    break;\n\n                case MotionEvent.ACTION_UP:\n                    v.getParent().requestDisallowInterceptTouchEvent(false);\n                    break;\n            }\n            v.onTouchEvent(event);\n            return true;\n        }\n    });\n   // Not visible yet, so animate the view in\n    errorView.setText(e.getMessage());\n\n    adapter.setCountries(null);\n    contentView.setVisibility(View.VISIBLE);\n    contentView.setRefreshing(false);\n\n    // Rest is Same code\n    AnimatorSet set = new AnimatorSet();\n    ObjectAnimator in = ObjectAnimator.ofFloat(errorView, \"alpha\", 1f);\n    ObjectAnimator loadingOut = ObjectAnimator.ofFloat(loadingView, \"alpha\", 0f);\n\n    set.playTogether(in, loadingOut);\n    set.setDuration(200);\n\n    set.addListener(new AnimatorListenerAdapter() {\n\n        @Override public void onAnimationStart(Animator animation) {\n            super.onAnimationStart(animation);\n            errorView.setVisibility(View.VISIBLE);\n        }\n\n        @Override public void onAnimationEnd(Animator animation) {\n            super.onAnimationEnd(animation);\n            loadingView.setVisibility(View.GONE);\n            loadingView.setAlpha(1f); // For future showLoading calls\n        }\n    });\n\n    set.start();\n}\n\n```\nThe Trick is i don't hide contentView, so the swipeRefreshLayout. I just make recyclerView to have 0 elements if there is error. (swipeRefreshLayout wll have height \"wrap_content\")\nfragment.xml\n``` xml\n\n<!-- Loading View -->\n<ProgressBar\n    android:id=\"@+id/loadingView\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_gravity=\"center\"\n    android:indeterminate=\"true\" />\n\n<!-- Content View -->\n<android.support.v4.widget.SwipeRefreshLayout\n    android:id=\"@+id/contentView\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\">\n\n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/recyclerView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n</android.support.v4.widget.SwipeRefreshLayout>\n\n\n<!-- Error view -->\n<TextView\n    android:id=\"@+id/errorView\"\n    android:layout_gravity=\"center\"\n    android:textSize=\"20sp\"\n    android:textColor=\"@color/textDarkSecondary\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\" />\n\n\n```\nadapter.java\njava\npublic class CountriesAdapter extends RecyclerView.Adapter<CountriesAdapter.CountryViewHolder> {\n    Context context;\n    List<Country> list;\n    ...\n     public void setCountries(List<Country> newList){\n        if(newList==null){\n            list.clear();\n        }else {\n            list = newList;\n        }\n        notifyDataSetChanged();\n    }\nThanks.\n. :+1: \n. ",
    "dalewking": "Another question is whether there is a good reason to create and destroy the weak reference  as the view is attached and detached or should you just create the weak Reference once when  the presenter Is created?\n. This text from the first Mosby article talks about the theory of Presenters being cross platform and I see no reason not to allow it:\n\nFurthermore, by letting Presenter implement OnClickListener the Presenter is bound to the android platform. In theory the presenter and business logic could be plain old java code, which could be shared with a desktop application or any other java application.\n. 1 is fine. For 2 I would move it and I think it is perfectly valid to use Weak reference on desktop although not as important there.\n\nAs far as cross-platform, I am looking at applying Mosby under Kotlin instead of Java which may need some tweaks. For one, Butterknife, Icepick, and probably FragmentArgs do not work with Kotlin (although I have made suggestions to Icepick creator on how to make it work) so to start with I may create a core-kotlin version of core.\n. Didn't realize you were also the creator of FragmentArgs. Added the info to that project for supporting Kotlin\n. In terms of view injection, Kotterknife is not necessarily the best solution. Kotlin has its own support for accessing views of activities and freagments: http://kotlinlang.org/docs/tutorials/android-plugin.html.\nI wonder if there would be a way to make the use of these third party libraries more pluggable i Mosby, but I am not sure what that would look like. I am not sure that really should be done at the top of the hierarchy in Mosby. Perhaps they should be moved to a layer under Mosby and leave it to users of Mosby to create their own base layer that adds this support to a base class that extends MvpActivity. You could even provide that layer as an optional layer.\n. ",
    "dimsuz": "\nWeakReference just to avoid memory leaks for the edge case where a developer implements it's own Activity/Fragment and forgets to detach the view from presenter\n\nHi @sockeqwe! Having seen you repeat this in a few issues, I beleive I am not the only one who was interested in more detailed explanation of the reason you choose to use WeakReference here, so I would suggest to put it either to javadoc or to some documentation/tutorial on the website...\nAlong with suggestion to the user to implement his on \"righteous\" base presenter if he wishes to avoid repeating null checks :)\n. I have the similar experience as @sockeqwe. I used to go down this path of having view with getters, even simple ones like view.getEditTextContent() and this makes unit-testing rather hard (you have to constantly mock and stub view) and in this case state slowly starts moving to the view and presenter turns out to be tightly coupled with view and presenter logic also tends to start moving to view bit by bit...\nInstead what I've found working \"right\" is to hold all this state in presenter, even if it will result in copying. I.e. initial reasoning is like this \"why should I have a copy of userName string in presenter if it is already held in EditText and I can just call view.getUserName() which would get it out of there, and so I wouldn't need an extra variable in presenter...\"\nBut I found that this doesn't work so well. Holding all state in presenter does work though. . @farmazon3000 you should search for onRetainCustomNonConfigurationInstance instead\n. Shouldn't this issue be closed then? :)\nLeak can be ignored usually means it's some system bug or other non-controllable thing.\n. Yes, please keep mosby a library which can serve as a simple and solid foundation for more complex solutions! :) I am finding that this is true right now, I hope this won't change.\n. Nice and detailed explanation, thank you!\nI find that documentation is Mosby is wonderful and having it helps a lot!\n. After upgrading to mosby-3.0.3 I noticed that getView() is not marked as @Nullable anymore.\nThis causes kotlin to infer a non nullable View as a return type of getView().\nWas this change intentional in 3.0.3?\nBy reading this issue I figure that it was initially decided to leave @Nullable annotations for safety, not to remove them...\nIn kotlin it is easy to do something like\nkotlin\nval MvpBasePresenter.viewUnsafe = this.view!!\nbut in Java it's not so nice of course.... It infers it as platform type by default, which has a behavior you described. But if it sees a nullabilty annotation, it will make use of it and infer either a nullable or non-nullable type depending on whether it was @Nullable or @NonNull... So it can make a difference.. What I do is right after I created a presenter in createPresenter(), I extract a model object from Intent/Args and use presenter.setModel(model) before returning it.\nAnd this is the only part where view sees this model object. It only cares to extract it and pass to the presenter - and it's done with it.\n. Oh, I didn't understand that you are talking about  a custom library.\n. We are using mosby in several projects and in each of them we have different requirements for LCE views which happen to differ a bit from each other. And also from Mosby's default implementation of LCE. The concept is there, but I discovered that it is sometimes easier to create my own implementation of LCE stuff than to try to customize mosby's and to apply workarounds for functionality it does a little bit differently. For example mosby has the concept of pullToRefresh (last time I looked) while I might not need it, etc etc.\nSo I feel that it would be a correct move - to separate this into a different artifact which would provide this functionality for the projects that can use it right away. And other implementations can use that for a reference and inspiration also :)\n. I agree with @sockeqwe. In a few project I work on we have developed our own mini-framework of classes on top of basic stuff provided by Mosby. Mosby is good because it is focused on this and doesn't get in the way. It is nice when you have simple, working and stable bare defaults which you can use to build something more custom on top. Extensions can be provided as different modules/libraries, but the core should stay focused imo.. Hmm. I have just set up my (new) project to use 3.0.3 and proguard fails with the message mentioned in this issue... It seems like it is not fixed, dunno why:\nWarning: com.hannesdorfmann.mosby3.mvp.delegate.ActivityMvpViewStateDelegateImpl: can't find referenced class edu.umd.cs.findbugs.annotations.SuppressFBWarnings\nWarning: com.hannesdorfmann.mosby3.mvp.delegate.FragmentMvpViewStateDelegateImpl: can't find referenced class edu.umd.cs.findbugs.annotations.SuppressFBWarnings\nWarning: com.hannesdorfmann.mosby3.mvp.delegate.ViewGroupMvpViewStateDelegateImpl: can't find referenced class edu.umd.cs.findbugs.annotations.SuppressFBWarnings. Ah! That's now coming through a viewstate module, which was implicitly added as a dependency by mvp-conductor which I am using. So this issue should be reopened I guess :). As a workaround until new version is released, one can use\n-dontwarn com.hannesdorfmann.mosby3.mvp.delegate.**\nin proguard-rules.pro. Not exactly. I use only:\ncompile 'com.hannesdorfmann.mosby3:mvp-conductor:3.0.0'\nand it transitively adds dependency on mosby-mvp-lce which seems to cause build failing.\nI created a separate issue/question for this implicit dependency addition:\nhttps://github.com/sockeqwe/mosby-conductor/issues/24. Oops, copy paste error, updated my last message.. I will try a bit later today and report! When I add them explicitly those annotations will be filtered out? (Just curious). OK, it was enough to just add \ncompile 'com.hannesdorfmann.mosby3:viewstate:3.0.3'\nDisregard my last question, I didn't notice that you suggested to just explicitly specify 3.0.3 for other artifacts. My current setup used 3.0.3 for mvp but 3.0.0 for a viewstate (transitively) which caused troubles.\nThanks for helping to sort this out! Issue solved (can't close it, no rights). Interesting solution with OneShotFlag, but can present a bit of an overhead if there are a lot of such flags.\nAs for me I usually have my ViewState models have a method clearTransientState() which resets all one-shot state variables to their default values (by calling this.copy()) and it is the first to be called in the state reducer function. Of course, one needs to update this method every time a new one-shot variable is added, but as it is a part of a ViewState data class, I usually do not forget.. I have some concerns about the 1st option. Although Mosby doesn't specify that calls to attachView()/detachView() are symmetrical, I feel like it is natural of user to assume this, because this is semantically correct behavior. If a view got attached once, why would it be detached more than once? And actually would this be happening if the first scenario will be implemented? Would it be detached twice? I think no :) What will isViewAttached() return in first detachView() and in second detachView()? So this kinda breaks the natural expectations...\nSo I think this will make this callback potentially misused, by a misguided user. I understand that this is a workaround and they tend to be ugly.\nI'm not sure exactly what better option for 1. to suggest though. But what do you think about maybe going with scenario 2, but without making it a breaking change? It seems like you could leave the current detachView(boolean) function, but mark it as @Deprecated and document so that users would use new detachView() and destroy() callbacks instead.. Makes sense! Unit tests currently have some benefits attached to them though: like they run quicker and do not require an emulator to run - therefore making them a better suited for CI. The latter can be solved somehow by running emulator in docker I guess, but I didn't try yet.. Oh, that would be interesting post to read @sockeqwe ! :). @sockeqwe thanks for sharing! I will study it and try to apply to some presenter tests to learn this approach. The fact that it is not fancy should be thought as a compliment I guess, because often \"fancy\" means that there's some complexity involved on some level which could be the sign of a bad design... I'm all for simplicity :). Interesting, it looks like both variants are used!\nAnd one is more popular than another: \nhttps://english.stackexchange.com/questions/60852/queueing-or-queuing. The problem with this is that every project/team will have its own set of such templates. So I think it's not something you can generalize and distribute with a library. You could make another artifact, but then again - 1 out of 5 users will use it, and 4 of them will create something different.. @jhowens89 ooh, a very interesting approach! How does one actually executes this generator? Is it some gradle task in the same project?. +1 I have experienced this issue too, caught it with Leak Canary.. ",
    "lurbas": "Thanks for your response. Well, I understand your approach and respect it. I went through your two articles one more time and have another thought. I want to take the opportunity and share a little inspiration. In my point of view, the ideal architecture would be something between your MVP and MVVM (maybe using mechanism like DataBinding shown at i/o).\nTo be honest, I don't care about saving state on Presenter, or recreating it. What matters, and what should retain is ViewState/ViewModel (so it should be stored outside Presenter/View). Presenter should be a layer between input from View and Model, but after making things done should update ViewModel and doesn't care about View at all. ViewModel after detecting internal changes should update View if any is connected, or wait and apply itself on next View which want to bind with this ViewModel.\nBut all in all, great job :+1: \n. Com'on, you are so annoying. Stop spamming issue tracker! MosbyFragment is only a base. You're not suppose to extend it directly. Use MvpFragment or MvpViewStateFragment. I hope it's your last silly issue. Learn how to read with understanding, or develop some problem-solving skills...\n. I understand people can have questions not directly connected with an actual issue, but the thing is there were like 5 or 6 of them in past couple of days. If someone (@sockeqwe) took lots of his free time and develop this framework, all others could spend some time and really try to understand it or solve their problem by them own. Being an \"open source developer\" doesn't mean you have to babysit everyone.\nThe second thing is people are watching this repository because the want to be notified about issues/bugs/potential crashes that other contributors have found. It's a waste of my time to came here every time I receive notification and found out that you have a personal dilemma.\nMaybe I wrote my prev message in a little disrespectful form, so my apologies. I hope we can end this discussion now.\n. I don't think additional component for navigation is a bad thing. I'm often introducing this kind of class. I like to have all logic connected with opening next screen, checking if I'm in one, or two-pane layout in separated place. Then my presenter doesn't care how the next screen looks like. it's just:\nnavigator.openScreen(DETAILS_SCREEN);\nBut I also don't think there should be any changes in mosby. It is a perfect base, and probably keeping it simple and well understood is the highest priority.\nEvery project is different and every project needs different approach. I think mosby should be the perfect starting point, not ultimate solution.\n. @vanniktech You can also use MapView inside your MvpFragment. Maybe that would be easier for you.\n. ",
    "ChrisKyle": "```\n@Override\npublic void detachView(boolean retainInstance) {\n    if (view != null) {\n    Type[] types =\n            ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments();\n\n    Class<V> viewClass = (Class<V>) types[0];\n    view = NoOp.of(viewClass);\n}\n\n}\n```\nI found NoOp.of(viewClass) have no effect ,Therefore lead view  always null.\n. Thank you. I've got it.\n. ",
    "snowpong": "What is the point of isViewAttached() really, why not use getView() != null? It does the same and no need for extra LINT rule :) \n. ",
    "RoRoche": "What about adding a method as follows:\njava\n@NonNull\npublic V getViewOrThrow() {\n    final V view = getView();\n    if (view == null) {\n        throw new IllegaStateException(\"view not attached\");\n    }\n    return view;\n}. It was mainly about the @Nullable annotation on getView that causes a LINT warning on getView().doSomething();. But I just realized that getView is not nullable anymore in mosby3, so all is fine for me now ;). ",
    "CDRussell": "Hi, I know this issue is a bit old, but seeing as it merged, thought it would still be valid to ask the question.\nI wasn't using Mosby in a project, but came up with the exact same solution independently and I tried it out for a while. However, I discovered a large problem with it not handling methods with return types.\nI did start going down a similar path to how Mosby accepted it (having the ability to return \"default\" ints, booleans, strings etc...) but I couldn't solve the problem of having a method on the view which returned a class I defined in my project. In those scenarios, the call to view.getUser() or whatever would still inevitably return null and subsequently null pointer. \nDid you ever run into this problem, or find a nice solution to it?\nMy solution for reference: https://medium.com/@trionkidnapper/android-mvp-an-end-to-if-view-null-42bb6262a5d1#.6an16xlhn\nThanks. Thanks @sockeqwe @dimsuz; makes a lot of sense.. ",
    "NikitaZhelonkin": "Thanks @sockeqwe, should we check for isViewAttached() inside view's interactions callback?    \npublic void onButtonClick() {\n        if(isViewAttached()){\n            getView().doSomething();\n        }\n}\nI noticed that in fragments view's onClick callback can be called after onDestroyView, so viewRef can return null and we get NPE. ",
    "cody1024d": "Any update on this?  I'm having the same issue, and it's prohibiting me from using Mosby on a personal project.  Can I fork it and then submit a PR?\n. No worries.  I created a Pull Request that should contain all the changes necessary to support ButterKnife v 7.0.1.  See f9a8201\n. I think this is 100% the right direction, and decouples the use of this as an MVP library, instead of it being a framework with multiple dependencies\n. ",
    "jjvargas": "Publicly available and free to use and modify :)\n. Also RoboElectric has released 3.0 :) , It would be a good moment to learn how to use it for the tests. \n. @virl \nI am interested in your framework and would like to know if you are planning to write an article just like Hannes did with Mosby, with more details and a more elaborated example to understand the concept better.\n. Thanks. I was thinking if there is any operator that can help to join both things, but cant find anything useful\n. Thanks for the response. I ended up using a presenter LceRetrofitPresenter and to test it the LceRetrofitPresenterTest.java file that you have provided. it all works fine to test the presenter. \nNow to test the Model on the Dagger2 Mosby sample, which according to  #68 , Its the business logic so I can test that loading data over https works and gets parsed correctly.\npublic interface GithubApi\n{\n    @GET(\"/repositories\")\n    @Headers(\"Cache-Control: no-cache\")\n    public void getRepos(Callback<List<Repo>> callback);\n}\nI have found some articles, check your sample on the mail app and also opened a question in SO\nhttp://stackoverflow.com/questions/35003794/how-to-test-a-rest-api-that-uses-retrofit-and-dagger2/35004089#35004089   \nIts still not very clear to me, what I want is to test the mode using real network and not a mocked response.  Any input on this?\nAnd for the View , you mentioned in the past to  use MvpLceFragmentTest and MvpLceActivityTest to test your MvpLceFragment / Activity.   I cant find these classes do you have any sample? \nThanks\n. ",
    "BaronZ": "I wonder how you can replace Picasso with Glide via ImageProxy\n. what you wrote was what I mean. But what if I want to use some other function like resize() or transform() depends on different context?\n. what if I want to use the resize function provided by Picasso?\nI mean with the ImageProxy, I can only load image via Picasso.with(context).load(url).into(iv);, I can't load via Picasso.with(context).load(url).resize(50, 50).into(iv);\n. Many thx bro, I gotcha. So far so good. And if i need transform() I need to define a field Transformation(indipendent data structure too) in RequestiOptions, right?\n. ",
    "BlakeWL": "wonderful\n. ",
    "pkliang": "Hi, I have updated the log\n. Great! Thanks,  problem fixed.\n. @sockeqwe I have my app tested with the latest snapshot, it works as expected now.\n. ",
    "twig": "Thank you for this.\nI didn't want to install IcePick because I already had Parcelable.\n. @IgorGanapolsky No not at all, but they're similar enough that I didn't want to duplicate libraries.\n. ",
    "brianguertin": "@sockeqwe Fortunately, you can use onRetainCustomNonConfigurationInstance which is not deprecated\n. ",
    "guelo": "@sockeqwe I know this issue is closed but @commonsware discovered and @adamwp confirmed that onRetainNonConfigurationInstance is being undeprecated in N: https://twitter.com/adamwp/status/720612665136009218\n. ",
    "farmazon3000": "\nImplemented, will be part of Mosby 2.0\n\nIs it? When I search for \"getLastNonConfigurationInstance\" in Mosby I get 0 results.\n\nHowever, onRetainCustomNonConfigurationInstance() is a method defined in FragmentActivity. Therefore this method does not exists in plain old Activity.\n\nSo why not use FragmentActivity instead of Activity just for that reason?\n. Ah OK, it is implemented but not like the title suggested with onRetainNonConfigurationInstance but with setRetainInstance.\n. Is possible to see the code then, as I said\n\nWhen I search for \"getLastNonConfigurationInstance\" in Mosby I get 0 results.\n. Isn't this breaking separation of layers a little bit, i.e. View bypasses the Presenter talks with Model.\n. Yes this is where I came from. And this is why I asked the question.\n. \n",
    "TheRishka": "I've encountered another problem while trying to Unit Test presenters. I keep getting \"Wanted but not invoked\" error with Mockito. I've also tried to use MvpLcePresenterTest.java in testing package of Mosby. Got the same error. Does anybody have any clues how to use Mockito for testing Mosby Presenters?\n. Right now I've added your MvpLcePresenterTest into my project. And I'm just trying to cal startLceTest() method of it.\n``` (java)\npublic class MyPresenterTest extends MvpLcePresenterTest,\n        MyFragmentView, MyFragmentPresenter> {\n    @Test\n    public void testBase(){\n        startTest(false);\n    }\n@Override\nprotected Class<MyFragmentView> getViewClass() {\n    return MyFragmentView.class;\n}\n\n@Override\nprotected MyFragmentPresenter createPresenter() {\n    return new MyFragmentPresenter();\n}\n\n@Override\nprotected void loadData(MyFragmentPresenter presenter, boolean pullToRefresh) {\n    presenter.loadSomeRandomStuff();\n}\n\n}\n```\nIt fails with error on line 79 of MvpLcePresenterTest:\nWanted but not invoked:\nMyFragmentView.showLoading(false);\n-> at MvpLcePresenterTest.startTest(MvpLcePresenterTest.java:79)\nActually, there were zero interactions with this mock.\n. I'm not sure if the problem is in presenter... Here is my presenter.loadSomeRandomStuff();:\n``` (java)\n    @VisibleForTesting\n    public void loadSomeRandomStuff() {\n        getView().stopRefreshing();\n        List stuff = setMockArrayList(5);\n    getView().showContent();\n    if (stuff != null && stuff.size() > 0) {\n        getView().setContentVisible(true);\n        getView().setData(stuff);\n    } else {\n        getView().setContentVisible(false);\n    }\n}\n\n```\nStill the same error. MvpLcePresenterTest.java:79\n. MyFragmentView does extend MvpLceView.\nBut methods are quite bad, like stopRefreshing() is useless coz showLoading()  is already defined. So I've redone testable presenter and MyFragmentView.\nNow my method looks like this:\n(java)\nvoid loadSomeRandomStuff(){\n     getView.showLoading(false);\n     try {\n         List<Object> stuff = setMockArrayList(5); // may throws an error\n         getView().setData(stuff);\n         getView().showContent();\n     } catch( Exception e) {\n         getView().showError(e, false);\n    }\n}\nJust like you told me. Now it throws another error! It says that some method wasn't wanted but invoked showError. So it's clear for me that it wasn't Mockito or Mosby problem! It was me who misunderstood Mockito messages! I can deal with it on my own, I hope:) Much thanks for your super-fast replies!\n. Ye, I've digged into it. The current problem now is that I'm testing presenter same presenter method, but on setData() it throws error NotAMockException.\nThe method is the same:\n(java)\nvoid loadSomeRandomStuff(){\n     getView.showLoading(false);\n     try {\n         List<Object> stuff = setMockArrayList(5); // may throws an error\n         getView().setData(stuff);\n         getView().showContent();\n     } catch( Exception e) {\n         getView().showError(e, false);\n    }\n}\nIt seems like I can't generate List that way. So I've tried to Mock List data and pass it as parameter:\n(java)\nvoid loadSomeRandomStuff(List<Object> data){\n     getView.showLoading(false);\n     try {\n         getView().setData(data);\n         getView().showContent();\n     } catch( Exception e) {\n         getView().showError(e, false);\n    }\n}\nThat's the way I'm trying to pass objects:\n``` (java)\n@Mock\nprivate Object obj;\n\n@Before\npublic void setUpMocks(){\n    MockAnnotations.initMocks(this);\n}\n....\n....\n....\n@Override\nprotected void loadData(MyFragmentPresenter presenter, boolean pullToRefresh) {\n    List<Object> data = Arrays.asList(obj, obj, obj);\n    presenter.loadSomeRandomStuff(data);\n}\n\n```\nParticular error:\n(java)\nArgument passed to verify() is of type LinkedList and is not a mock!\nSo...Again, I'm missing something. Would be great, if you could help me once again:(\n. I'm trying to test presenter method by method. I want to ensure that loadSomeRandomStuff() works as intended, data is displayed and loading set to false.\n. ",
    "sargunv": "I'm not familiar with how animations work in Android, but I'll try it out and let you know how it goes. I don't know much about the underlying issue in the design library, so I don't think a report from me would have enough information to be useful. Perhaps you or someone else could report it on Google's bug tracker?\n. Here's the APK, hosted on Dropbox this time: https://dl.dropboxusercontent.com/u/15518568/app-release.apk\nLayout files are in my repo here: https://github.com/sargunster/purdue-dining-courts-android/tree/v2-rewrite/app/src/main/res/layout\nThe relevant layouts are activity_dining_menu and fragment_location_list. The are used by an MvpLceActivity and a MvpLceFragment, respectively. \nApologies for my code being a mess :)\nI'll try the workaround for the animation later today, once I fix some other, probably unrelated, problem in my app.\n. The workaround worked, thanks!\n. ",
    "Nilzor": "Don't forget that Butterknife itself is a kind of databinding, and Jake Wharton acknowledges this himself by making the naming relfect that in v7.0 and in this comment on reddit: https://www.reddit.com/r/androiddev/comments/3beofj/butterknife_700_released/cslilzp. I believe it lacks two-way databinding as of now, but maybe he's got plans to improve that as well now that he sees the competition sharpening (edit: no, don't think so: https://github.com/JakeWharton/butterknife/issues/269)?  So I believe you have ~~3~~2 options.\nAnyway, my money is on Google's solution right now because:\n- It's a part of core Android (albeit a support library). No 3rd party depencenies needed.\n- They've come a long way already with two-way databinding and tooling support (AS navigation, auto complete and more to come)\n- RxAndroid is a beast. Complex, steep learning curve for new developers and a core functionality which has ha whole different focus: asynchronousity. This might be a subjective opinion from me though, I don't have enough experience with the databinding module of RxAndroid to comment on this.\nPS: From looking at your examples, do you agree that your ViewState equals the ViewModel in MVVM terms? (I haven't used your library in a production system yet so my experience is limited, but I do like what I see and I very much appreciate your initiative with this issue! :) )\n. Regarding cancellation: I'm not sure you'd always need that. Depends on the use case. \nScenario 1: HTTP call to service Fragment with retainInstance=true rotates mid-transaction. No problem - if the result arrives mid-rotation (after onPause and before onResume), the data will be set to the idle view model and bound when resuming. If it arrives after rotation, the data will be bound if the fields are of type ObservableField\nScenario 2: HTTP call to service Fragment with retainInstance=false. Device rotates before result arrives. The data binding framework will automatically unsubscribe from the ObservableField-objects, so you won't get any exceptions but some CPU cycles are wasted processing the result and the request will restart.\nScenario 3: Long-running background thread continuously producing data for the view. In this case you'd need cancellation, but I'd say it's out of the scope of a framework.  \nMaybe a framework could/should support a perfect implementation of scenario 2 where the response of the initial request is processed and rendered in the second instance of the view. I'm not sure.\n. ",
    "shism2": "Couldn't RXandroid AND android Databinding just be combined into mvp mosby framework? It would be something like MVVP\n. ",
    "ersin-ertan": "Relevant video on Google's Databinding plugin.\nGoto 42:00 to hear mention of Presenter and ViewModel.\nSome key points about threading: \n- Can notify on any thread\n- UI updates get scheduled for next frame, \n- data read on UI thread\n- only remove items from list on UI thread\n. Note that clicking on a person to see all past mail interactions made then clicking back, then attempting to reproduce the error does not cause a leak. The difference is that the detail portion on the right, does not load, instead the layout is set as the full screen of the mail stream.\nThis leads me to believe that the leak is from of the detail portion.\n. Attempt device 4.1.1 no leak.\nFor future reference(and with no apparent relation to the leak mentioned above), with pre 5.0 there is a 'LEAK CAN BE IGNORED' WriteActivity leak.\n. The WriteActivity leak was an additional leak not regarding the ActivityTransitionAnimation. \nI wanted to put it out there as supplementary information to rule out what it wasn't.\n. It appears to be ActivityComponent\n. ",
    "vladp": "Hello, not a user of mosby yet. But, if it counts, I would vote for mosby to leverage the new Google's databinding\nI would say that as far as functional intent, and original sockeqwe question --  I feel that Google's databinding is more analogous to\nJake Wharton's RxBinding http://github.com/JakeWharton/RxBinding \nTo expand a bit more, I am not sure that Google's databinding is flexible enough (or intended to) bind/observe IO completion events (eg http fetches, or SQLLite query completion) to Mosby's MvpPresenter.\nIn fact, in an app I am building -- I intend to leverage, in some activities, React-Native as well.\nSo I am basically ending up with the following scheme\nModel<--rxAndroid-->Presenter<--G.Databiding-->NativeUI(layout/xyz.xml)\nModel<--rxAndroid-->Presenter<--ReactNativeBridge--->ReactUI (abc.js)\nSo I am ending up with 2 binding tools for the UI layer, while with sticking with rxAndroid for non-UI stuff.\nThere is also a new library that hides underneath ReactNativeBridge stuff, and I might end up leveraging that (still learning though) http://github.com/Kudo/RxRNBridge\n. ",
    "virl": "@IgorGanapolsky By using just single MainActivity and calling to activities of other apps if needed (camera, etc).\n. @IgorGanapolsky I have fully replaced Activities and Fragments with my own component hierarchy without their problems. I even ported iOS Animation Transition framework which uses Android View Animators (you can see it on video I posted \u2014 it is all single Activity).\n. @IgorGanapolsky Basically this project (mosby) suffers from same problems as Flow/Mortar: it implements over-engineered  injection+mvc/mvvp over crappy android component model (buggy Fragments, stupid Activities).\nWhat we really need is to implement simple, transparent, hierarchical component model around Views which make Fragments and Activities unnecessary for in-app usage.\n. @IgorGanapolsky I'm not against separation of concerns, I'm just saying that Activities+Fragments are crappy implementation of it. So we must have our own. Basically Presenters (or Controllers) must totally replace Activities and Fragments and use only nested Views of single MainActivity.\n. As the result, it allows:\n1. Instant screen creation (no activity creation needed).\n2. Custom screen transition animations of any complexity working on 4.1+ devices flawlessly.\n3. Eliminates all Fragment bugs and TransactionManager bugs.\n4. Have clear creation and state model tied to lifetime of single activity, not to multitude of fragments and callbacks.\n5. Allows bug-free nesting of Controllers(Presenters).\n. @IgorGanapolsky you will just implement these 20 activities as Controllers, each backed by its own view hierarchy. There will be Controllers containing other controllers and switching between them \u2014 like UINavigationController in iOS.\n. And all of these controllers will use single Activity as rendering mechanism. They are nested to each other so there are clear separation of concerns.\n. @IgorGanapolsky http://www.youtube.com/watch?v=dqelBt0HQJs \u2014 demo of animations in my library. It is single activity. Works from 4.1\n. You can see my library here: https://github.com/virl/vcdroid\nI hope it will run without too much errors.\n. @sockeqwe Thanks for thorough reply.\nFirst of all, sorry for my English \u2014 it's not my native language.\nI agree that View Controllers essentially are parts of the views and that for complex apps you have to separate business logic from them.\nBut let\u2019s return to reality (namely, to Android Hell): you cannot make good MVP/MVC library on rotten foundation. And in case of Android, such rotten foundation are Activities and Fragments.\nAlso, if you'll try to abstract your library away from that foundation and say that \u201cI potentially support any view layer, but for now that is Activity/Fragment\u201d, you're risking to end up with yet another bloated over-engineered \u201cbusiness logic\u201d framework like JavaEE whose only real purpose is to massage intellectual/architectual muscles of its author.\nWhat that means in practical terms: why do I need your library with all its injection magic, if my Presenters can be just regular classes who receive references to interfaces of Views and ViewControllers in their own constructors? They\u2019ll be perfectly testable too! I don\u2019t need any library or framework for that \u2014 and when not using Activities/Fragments it is trivial.\nWhat I basically saying is this: please stop inventing super-frameworks with which it is STILL IMPOSSIBLE to send bitmap to new modal \u201cActivity\u201d without making copy of it. Or with which showing such Acitivty takes SECONDS and whose animation capabilities are limited. Or which doesn't practically support bug-free multi-nesting of Fragments/Controllers.\nANY ARCHITECTURE (no matter how well-thought-out) built on such rotten foundation will inherit all the problems of that foundation. I, as developer, DON'T CARE that implementing View Layer is not your concern. If you don't fix Android Fragment Crap (AFC), then I will use simpler, more stupid library that does instead of yours (or invent my own, which I did in small scale).\n. @sockeqwe Thanks for reply.\n\nAt this point, for example, one could take your pleasant (not rotten) foundation like your ViewController and let the ViewController be supervised by a Mosby Presenter\n\nNo, one couldn't, because that ViewController will have too much implementation specifics \u2014 for example, controllers nesting and containers and different lifecycle approaches.\n\nAre you trying to give me some tips how to improve Mosby?\n\nI just sharing my thoughts with you about what really useful Android MVP library should do.\n. @jjvargas I'm developing my lib along with my current project (it's P2P messenger for Android) \u2014 I think it is the best way to develop real-life framework. When it will mature a bit, I will write something like an article or detailed README on its github page.\nCurrent version with example is at https://github.com/virl/vcdroid \u2014 basically it very closely mimics iOS ViewController API with support for navigation and tab controllers. It supports animation transitions via Android View Animator API (but wraps them in simple custom transition api). Currently it is very simple library and its example project uses all of its features. If you want to document something or supply a readme file, you can send me Pull Request (as people on github always say when they don't want to do something :) ).\nYou can contact me at virlof@gmail.com\n. @sockeqwe \n\nMVP decouples model and view by using an presenter. From my point of view you are advocating against current android foundation / framework implementation, but I don't understand how that is related to MVP?\n\nI'm not against MVP and in fact fully agree with you on architectural questions. I'm just very practical and think that architectural problems CANNOT be solved ignoring the implementation \u2014 when you try to do that, monsters like JavaEE come to this world.\nIt's like Maslow's hierarchy of needs: to fix Android, FIRST we have to fulfill BASIC NEEDS like flawless animations, nested component model without complex states, etc. And WHEN basic needs ARE fulfilled, THEN we can innovate on higher abstractions over these solutions.\nBasically what I want to say to you is that you should drop ALL the \"Plug-In\" abstractions in your library if you want for it to solve real problems.\nYour library should support only:\n1. One view component hierarchy lib (mine);\n2. One injection lib (constructors);\n3. One architecture type (MVP).\nTHEN it will be useful to someone. Otherwise it will be not so much useful to everyone.\n. @sockeqwe Another example: you're using here (or at least developed) FragmentArgs lib. Why? Because Fragments have insane conventions over constructors and parameters transfer.\nIn my library to pass the argument to created ViewController all you have to do is to inherit it from ViewController and pass via constructor. Or you can just make the setter and set the parameter any time you want (after \"new\" or later):\nFooController foo = new FooController(getActivity(), myparam1, myparam2);\nfoo.setParam3(bar);\nAnd because ViewControllers replace Activities too, you don't have to use ugly Intents and Parcelables anymore too.\nThat's because my library is not over-engineered. But if you declare support for both libs, you have to support maximum level of complexity among them \u2014 that is, Fragments. So as the result your library will become equally bloated and buggy as Fragments. Leaky abstractions.\nAnyway, sorry for so many posts. I hope I described my idea well.\n. ",
    "HowardSchmaeu": "yes i did... but i got all these errors... \ni've here the 1.1.0 Version also and i can Build that without Problems!!!\n. yes i use the newest java version (8.5??)... and it builds with the Version 1.1.1\nWhat i have to do to get this also with the 1.2.0 Mosby Version?? Back to Java 7 ?? \n. Sorry my Friend, that's what i DID yesterday!!! but i does not work... :-(\n. YEHAAA... it works!!! Thank you!!!\n. sorry that i open it again... i saw your answer on reddit... but what can i do to avoid this behavior in the Mail Sample?? i try setting     \nandroid:clickable=\"true\"\nandroid:isScrollContainer=\"true\"\nbut it still scrolls also the background... or did i understand something wrong and this is not going to work on a drawer??\n. sorry for this late response... but YES it works now... THX. ahh okay i got it... thx!!!. okay ... today i found an issue what may depends on THAT issue here or is the root... i don't know but may it helps to find something.\ni had the problem that my Fragment or better the Base Class calls the onDestroyView() on a not expected point. i use almost the same Base Class like this from the origin:\nBaseViewStateFragment\ni was a bit confused because i had not this issue in all my other 2 mosby projects. After a bit investigation i changed back this project to mosby 2 because that was the only different to the other projects. \nAnd voila it just works. it did NOT call onDestroyView()\nI've NO Idea why and where it comes from but now it works. \n@sockeqwe : may it helps to find the real root :). ",
    "allsoft777": "Hi~ Hannes.\nI've attached the demo project.\nIf you have any time, please take a look at the project.\nThe issue is occuring on below path.\nMonthlyReportFragmentItem.java\n@Override\npublic LceViewState,\nMonthlyReportPagerView>> createViewState() {\n    return new MonthlyViewStateImpl<>();\n}\n\u200b\u200bThanks!\n\u200b\n ViewStateTest.zip\nhttps://drive.google.com/file/d/0BwbnfAfPxdhkUy1hYzJfRTZJdjg/view?usp=drive_web\n\u200b\n2015-08-02 22:34 GMT+09:00 Hannes Dorfmann notifications@github.com:\n\nDo you have a concrete source code or a demo project a can have a look at?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sockeqwe/mosby/issues/74#issuecomment-127024441.\n. Yes, you are right. The root cause was on NavigationDrawerFragment class.\nWhenever rotating the device, switching the main fragment is called always.\nI've fixed by modifying the framgment structure.\nThanks.\n. \n",
    "gim-": "Doesn't that mean that if someone wants MvpLceViewStateFragment as android.app.Fragment they have to implement everything from MvpLceViewStateFragment to keep the functionality it provides? Is it really necessary to use v4 support library for legacy API versions and not to provide a better option to use android.app.Fragment as a base class in their application with Mosby MVP in 2017?. @sockeqwe Thank you for the info, I'll keep that in mind :). Wouldn't deprecating isViewAttached() and marking getView() as @Nullable be enough? That way if someone writes something terrible like this:\njava\nif (getView() != null) {\n    getView().doThis();\n    getView().doThat();\n}\nThe lint-check in Android Studio will show a warning that getView().doThis(); and getView().doThat(); can throw NPE. If someone ignores that then app crashing would be his own fault. ifViewAttached() could be just a nice additional helper method.\nEDIT: Ok, I just checked it and it seems like Android Studio will not show any warnings inside a block after if (getView() != null).. ",
    "oderayi": "@IgorGanapolsky Maybe I asked the question in a wrong way because I am relatively new to Android/Java. \nMy question is: Can I use Mosby without seeing its source or having its source loaded into my project?\nIs it possible to just add a maven or gradle repositiory directive in my build.gradle file and have the IDE load the jars?\nThanks\n. @sockeqwe  Yeap, that's what I was hoping someone would mention. \nI guess I have to figure out myself how to decouple the sample mail app from the mosby project, and use the necessary dependencies.\nThank you!\n. ",
    "eugenkiss": "Yeah, kind of a weird thing to do by Google.\n. ",
    "renanferrari": "Hey @sockeqwe, thank you for your answer. Yeah, now that I've come to think about it, it makes sense it's not part of the library, for sure.\nI think I understand most of PresentationModel's concept, but I still would like to see another example, if you don't mind. I never really used RxJava, but I'm sort of familiar with its syntax, so feel free to use it in the example.\nAnd thanks in advance :)\n. Wow, that was an AMAZING answer @sockeqwe, really, really helpful example! Everything is clearer now.\nThank you so much for taking the time to write this :D\n. ",
    "wayanjimmy": "Wow, just get interested in presentation model, and found this discussion, thanks @sockeqwe \n. ",
    "BayramInanc": "it's a fantastic explanation, thank you man!. Actually, whenever \u0131 search, let's say, writing 'm' to searchview and then \u0131 pull  down and \u0131 randomly click an mail, then app crashes. I did that for maybe 10 15 times, all of them crashed. :) sorry, you are right, \u0131 will do that on saturday, because \u0131 have an important exam. One time, \u0131 failed in that course and don't want again.. :). \u0131 did it!\nHere is the link\nhttps://stackoverflow.com/questions/42908174/the-role-of-adapters-in-mvp-pattern. ",
    "pratamawijaya": "yes, my code worked before, im using Mosby 2.0 , i have been trying remove my gradle caches ~/.gradle/caches but it still not working\ni have been trying for running your sample, but in your sample you are not gradle library, it project library, and still working. \n. ah it solved, i deleted again my gradle caches, then redownload all dependency maybe its my internet problem , right now i can import import com.hannesdorfmann.mosby.mvp.lce.MvpLceView; thanks for your fast response, im sorry for bothering you. Thanks\n\n. ",
    "plenza": "Nah, the more I think about that, the more I'm not really so sure about the real need of creating plain old java lib. Android library is perfectly valid for most if not all use cases. I was just overthinking and forgot about YAGNI. And Kotlin interop is another point for keeping the annotations. So forget about it and please close this issue. Thanks!\n. ",
    "wiyarmir": "Wow that was quick :)\n. ",
    "joseprl89": "All very valid points.\nI think you should close this issue mostly because of this part:\n\nFurthermore, your suggestion may or may require additional components for navigation (who starts intents, backstack management?, etc.) or forward / delegate lifecycle events to the real view (i.e. if view should stop a certain animation in onPause()). Also for non android experts it would be a little bit harder to get started with Mosby.\n\nYou are totally right there, we'd be introducing blurred lines into the library and making unclear where should a task be performed.\nProbably this issue is too much of a \"pedantic warning\" :P\n. Sorry not to make it clear enough.\nMy point is that I have a view I want to switch to an \"edit\" mode. I could do with a single presenter, but I'd have to keep several conditions like \"if state is edit, do this, else, do that\".\nI was wondering if I could set a different presenter when the view enters edit mode, that wait instead of having several conditions I'd just have two smaller independent presenters that could be unit tested separately.\nUpon inspecting the setPresenter code given by MvpFragment amongst other, I noticed there's no logic to dettach the view from the previous presenter, and attach it to the new one. Hence this issue.\n. I think we could avoid the if's by having the presenter notify an entirely different method. \nPS: I'll be busy this days on a business trip so I'm not sure If I'll manage to provide much more feedback :/\n. ",
    "epetrenko": "@sockeqwe, @jemshit \nLet me share a solution, which I use for the case if dagger-android extension is used.\nWe can use Provider<T> injection. Code will look like the following:\n```Java\npublic class MyActivity extends MvpLceActivity... {\n  @Inject Provider myPresenterProvider;\n  ...\n@Override\n  public void onCreate(Bundle savedInstanceState) {\n        AndroidInjection.inject(this);\n        super.onCreate(savedInstanceState);\n        ....\n  }\n@NonNull @Override\n  public MyPresenter createPresenter() {\n        return myPresenterProvider.get();\n  }\n  ...\n}\n``\nHere we do injection in Activity by calling just [AndroidInjection.inject(this)`](https://github.com/google/dagger/blob/master/java/dagger/android/AndroidInjection.java) and don't need to have component instances.\n. @sockeqwe Thanks for a quick response.\nYou're right, there are no crashes if presenter should be kept.. ",
    "heralight": "It's  me, thank you! It's a great project !\n. You have right,  strange thing, I don't change this line... Perhaps in android studio.\nI roll back this line.\n. ",
    "vovkab": "Thanks for quick response!\nBtw, any reason why it should be Base and not the one in documentation?\n. As I can see it only have 2 direct interfaces that extend it:\nBaseDelegateCallback:\n-- ActivityMvpDelegateCallback\n-- BaseMvpViewStateDelegateCallback\nimo, old version would look much nicer without Base :)\nSomething like:\nMvpDelegateCallback:\n-- ActivityMvpDelegateCallback\n-- ViewStateMvpDelegateCallback\nbut it is up to you, just my 2cents...\nUnrelated question. Right now as I can see you are creating presenter in onViewCreated, but if you have fragment in your layout.xml file this probably will crash if you use something that is not yet created, to create your presenter. Please let me know I can pull it into separate issue.\n. ",
    "stanleyguevara": "Dirty workaround if anyone stumbles here:\n@Override\npublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    super.onCreateView(inflater, container, savedInstanceState);\n    onViewCreated(null, savedInstanceState);\n    return null;\n}\n. ",
    "jvilya": "I think it is not necessarily.\nTry to override the method findViewById(ind id) in your activity/fragment that extends Mosby's MvpLce* classes in next way:\npublic View findViewById (int id) {\n    if (id == R.id.loadingView) { // mosby's view id for loading\n        return super.findViewById(R.id.loading_view); // your project's view id for loading\n    }\n    // same for contentView and errorView\n    //...\n    return super.findViewById(id);\n}\n. ",
    "thphuc": "Thanks @jvilya and @sockeqwe \nI will try \n. ",
    "antslava": "+1\n. ",
    "hram": "This happend jast after git clone without any modificatios.\n. I do not start any example. Jast open project in AS and if I open MvpActivity class AppCompatActivity displayed red collor and import android.support.v7.app.AppCompatActivity is also red\n. I dont now why but broject builbs and \"Sample\" app runs withour any error (\nExcuse me for troubling. I dont now why AS behaves like that\n. ",
    "leesunghyun": "The kind of View might be different In the screen that use the LCE,\nBecause I think that data is always exist.\nI think is that emptyView is necessary.\nIf there is no data In the screen that use the LCE.\nDo you think that there is not common that you set a emptyView ?\n. I think that is to reconsider the modifier of all of the interface when you migrate to the java 9.\nIt's matter of style as you said, it is right.\nI think have to unify style in a project.\nwould you like add public modifier to ActivityMvpDelegate, ActivityMvpDelegateCallback?\n. Yeah, I respect you.\nI unify coding style for interface.\nAdd the modifiers in interface.\nI want to contribute in your project.\n. Thanks for answers!\n. ",
    "Akkell": "2) So we need to store a strong reference to the presenter as long as Activity is in the Activity back stack.\nSeems there is the way. Didn't test it by myself yet. We can store the reference to presenter in the object of the class that extends IBinder. Then in Activity.onSaveInstanceState() (or View.onSaveInstanceState() if possible) we put this object into Bundle using the code from BundleCompat or alternative way from the article.\nBundle with this reference will be kept as long as Activity is in the Activity back stack. If we get our object back from Bundle - it will be the same object (with our reference). (if we do this in the same VM of course)\n. ",
    "sswierczek": "Sure it will be even better. I changed that. \n. ",
    "ZacSweers": "Oh wait I see they all just use the same images. \ud83c\udfb6 ignore meeeee \ud83c\udfb6\n. ",
    "fmnstr": "Android library project apply plugin: 'com.android.library'\n. Yes, that is strange. I have used it a while back on version 1 on another project with no issues. There are other dependencies on annotation processors.\nThe bizarre thing that urged me to open the issue was that I created a new project with empty activity. new library module and I just added the mvp dependencies. No code nothing, just default stuff from the a.studio wizards. Then I saw in external libraries that only mvp-common got resolved. When I moved the dependencies in app's module all resolved fine.\nI have done a lot of clean, rebuild, invalidate caches for 2 days now but I 'll look some more.\n. Ok.. The test project managed to import MvpFragment from mvp even if it only shows mvp-common in external libraries. I'll dig around adding-removing libraries with annotation processors to see what might be the problem in my main project.\n. Ok strange things happen. I had moved my base classes to app module along with mosby dependencies to continue my work. I just moved them back to the library module along with the dependencies to test any annotation processor issues. Everything resolved and the app ran with no issues.. \nI'll consider this closed and thank you for your time trying to help me.\n. I had the same issue on my app. What I found was that if onSaveInstanceState was not called (eg. from screen orientation) mosby library could not correctly update the \"applyViewState\" flag on MvpViewStateInternalDelegate . This flag gets updated in saveViewState and in createOrRestoreViewState. The latter is not called from a retained fragment coming from backstack so the flag is not applied correctly. So I came up with the following delegate to address this issue.\n```\n/\n * Delegate to help an {@link com.hannesdorfmann.mosby.mvp.viewstate.MvpViewStateFragment} retain its viewstate\n * when added to backstack without an orientation change.\n * When adding a fragment to backstack {@link android.support.v4.app.Fragment#onSaveInstanceState(Bundle)}\n * is not called, so the mvp library does not know that a retained viewstate exists. After the first creation we need the mvp\n * library to reset its flags in order to use the retained state with a call in {@link FragmentMvpDelegate#onCreate(Bundle)}.\n \n * @see MvpViewStateInternalDelegate#applyViewState\n /\npublic class MvpViewStateBackStackSupportDelegate {\nprivate boolean mHasBundleOrFirstCreation;\n\npublic MvpViewStateBackStackSupportDelegate() {\n    mHasBundleOrFirstCreation = true;\n}\n\npublic void onViewCreated(ViewState viewState, FragmentMvpDelegate mvpDelegate, Bundle savedInstanceState) {\n    if (!mHasBundleOrFirstCreation && viewState != null) { //retained view state\n        mvpDelegate.onCreate(savedInstanceState); //restore variables to later apply state\n    }\n\n    if (mHasBundleOrFirstCreation)\n        mHasBundleOrFirstCreation = false; //reset flag, after above check\n}\n\npublic void onSaveInstanceState() {\n    mHasBundleOrFirstCreation = true;\n}\n\n```\nExample usage:\n```\n    private MvpViewStateBackStackSupportDelegate mBackStackSupportDelegate;\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    mBackStackSupportDelegate = new MvpViewStateBackStackSupportDelegate();\n}\n\n@Override\npublic void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n    super.onViewCreated(view, savedInstanceState);\n\n    setRetainInstance(true);\n\n    mBackStackSupportDelegate.onViewCreated(getViewState(), getMvpDelegate(), savedInstanceState);\n}\n\n@Override\npublic void onSaveInstanceState(Bundle outState) {\n    super.onSaveInstanceState(outState);\n    mBackStackSupportDelegate.onSaveInstanceState();\n}\n\n```\n. ",
    "PaulWoitaschek": "Okay. The custom lint check could be helpful but in most of the cases you don't have to do a manual check if the view is attached.\nI.e if you call the view in a presenter method that was called by the view, you're still on the UI Thread and thus you can skip the check. But yup, I'll make my own presenter.\nActually I have created a few classes I'm using that are almost similar to your solution but I want to participate on a larger library that is evolving. \n. Kotlin does not infer it as non nullable. \nIt infers something in between. \nIt does not warn you when you use it without checking for null. But it does not say your check is unnecessary either. . Thanks for the feedback. That was very helpful!\n. I think casts are to be avoided where possible. The power of the compiler helps you greatly to reduce bugs.\nYou could accidentally return the wrong type and get an class cast exception at runtime. \nI cleaned up a little and exposed at least the generic here:\nhttps://github.com/sockeqwe/mosby/pull/129\nReally adding the view state type like suggested above would require more work as there will be clashes with parent classes.\n. To explain what I mean:\nI think it is very vital for a library that expects a specific implementation of a class to use generics correctly. Yes, you have to add generics. But it provides you with safety. \nThere is a reason why you have to do that ugly ((MyPresenter) getPresenter()) cast. You are doing something potentially harmful.\nJust returning a generic ViewState is like going back all the way down to Java 1.4 where you were just using List and always had to worry: Did I put String in here? Or Integer?\nIf this is wanted I can try to make a pull request and generify the ViewState. However please be aware that that affects many classes and is a breaking change as code written before won't compile any longer. But that might be even a good idea which can lead to bugs being detected.\n. ",
    "mkoslacz": "Well, first of all, thanks for the golden shovel award for renewing this thread. \nI'm developing a viper extension for mosby and I have also encountered this annoying issue. The presenter code is covered in yellow warning highlights because of a lint guess that @Nullable methods weren't null checked. It happens despite of fact that appropriate null checking helper methods are called right before calling @Nullable getter methods.\nIn earlier versions of InteliJ there was a possibility to add custom null-check methods in the following way:\nhttps://stackoverflow.com/questions/19302211/how-to-tell-idea-studio-that-the-null-check-has-been-done\nbut unfortunately the \"Confgure Assert/Check Methods\" button is gone now (at least in Android Studio) and I have no idea how to handle this annoying issue without removing @Nullable annotation from getter methods. \nI don't want to remove this annotation because it allowed me to realize that I haven't null-checked a call of actually @Nullable method few times. Well, if it happens to me while using my own library it looks like it could be helpful somehow.\n@sockeqwe, any updates on this?\n. It's thrown while trying to go through (or in) this return statement:\njava\n    /**\n     * Create a {@link android.support.v7.app.AppCompatDelegate} to use with {@code activity}.\n     *\n     * @param callback An optional callback for AppCompat specific events\n     */\n    public static AppCompatDelegate create(Activity activity, AppCompatCallback callback) {\n        return create(activity, activity.getWindow(), callback);\n    }\nActually, the arguments of this method look fine in a debugger:\n\n. Hehe, that's what I'm doing already. Will report soon.. Repo: https://github.com/mkoslacz/Moviper \nBranch: rx-tests-rdp \nModule: rxsample\nTest: com.mateuszkoslacz.moviper.rxsample.viper.view.activity.ListingActivityTest#onViewCreated()\nBtw, this project is a Mosby VIPER extension. The mentioned sample has grown too much, it will probably be extracted to the architecture showcasing project.. Previously, the test was run using Robolectric in the sdk 21 mode, while the project was targeting the sdk 25. After changing both sdks to 23 (and applying this hack) nothing has changed. \nThe interesting thing is that AS keeps routing me to the appcompat-v7-25.0.0 files when navigating through a thrown exception stack.. > in fact it looks like it's a problem with Robolectric and Mockito, it has nothing to do with Glide. \nThis problem can be tracked in the mentioned issue on Robolectric github: #2726.\n@sockeqwe You have shown some interest in diving in this problem, but if you have abandoned it, this issue should be probably closed.. Well, yep, we realized that the problem occurs when you try to inject mocks using Mockito @InjectMocks on the Robolectric shadows. One can workaround it by simple setting a mocked presenter in the @Before method using MvpDelegateCallback#setPresenter(MvpPresenter) on any of the Mosby views. Moreover, mentioned Robolectric snapshot fixes this issue allowing using @InjectMocks on Robolectric objects. Sorry for not updating this thread.. Actually, I don't think that GUI will ever generate such number of events that will need handling backpressure, so imho Observable is good enough. That's even covered in the RxJava 2.0 docs here. Correct me please if there is some other scenario of feeding Presenter from view than simple GUI events. Anyway, if such exotic case exists, one could use Observable to Flowable conversion in this rare case. Well, that's exactly what previous posters said.. Well, I was aware that it may be like this because of the alpha stage, no need to apologize ;)\n@sockeqwe, could you tell me why you have decided to use this particular implementation, not the second one? I'm still curious about the answer for the second question: Why have you decided to abandon MVP retention mechanisms in the MVI Fragments and Activities?  Do you plan to do the same in the MVP ones?. ",
    "paulirotta": "Can you provide a stub for @UiThread as a fallback for non-Android?\nLibrary class-loader-load-order as an overlay (if found it the first package, it stops looking for it in other libs down the list) is a nasty solution generally. But it hidden from normal users and used for cross-platform situations like this. It might be needed for tracking the modern Android trend toward design-by-contract with annotations.\n. I've done similar in a cross-platform library. It worked well, and the future can take care of itself if other platforms add the same annotation.\n. My previous experience with stubbing was Java but not android or annotations. The principle should be the same.\nCreate a .jar library which contains do-nothing annotations which match the signature of the android annotations you want to use. Perhaps you can modify the signature- you don't need to retain at runtime. When using on a non-android platform this in the build path allows compilation without doing harm.\nSimple use of your lib should be kept, so consider including these in non-android builds which you distribute. I'm only using Mosby android and haven't looked at your distro structure or details.\nBut annotations would be a nice bonus for those of us that like it strict. After considering, let me know if I can usefully help.\n. habit and laziness :)\n. Yes, I did these tests for an own patch to add annotations in my project. I minimally adapted them and contributed, but there could be a lot of overlap as I only later saw your tests for the same in master.\n. ",
    "wildsmith": "I just want to say thank you for this post. I came across this issue in one of my projects and tried so much before leveraging the first option you had listed in your post. Thanks again.\n. ",
    "francoispluchino": "@sockeqwe Where are you with this issue, and more generally for the release of the stable version 3.0? Thanks!\n. ",
    "DrewCarlson": "If this is intended behavior then any of these solutions are fine with me.  I have been using your first solution of having an initialization method on the presenter that gets called in onCreate().\nMy issue with that is that it's only required for Activities, which (though small) is a difference I have to keep track of between Fragments and Views.\nThe second approach you provided seems like the best option for me.\nThank you for your insight.\n. I also use multiple variations of LCE for different cases and some are the Mosby provided implementation.  To the same end I have two implementations around forms as well.\nI'm onboard with moving LCE and adding other things like SE to a separate module, that makes the most sense to me.\n. ",
    "BillBosiolis": "Hey @sockeqwe,\nI only searched the open issues so I didn't find #42.\nWell I denitelety agree that TextView covers most cases.\nSo for now, I will either use compound drawables (I can always override the showError() and set a case specific drawable) or implement my 'own' version of MvpLceFragment which will actually use the exact code as the original one but will work with a 'generic' error View.\nThanks for your quick response and your great library (yes, it's not a framework). It has saved me a looot of time :-)\nI think you can close this issue.\n. ",
    "matoelorriaga": "Hello @sockeqwe, I'm using your library in my application, and I override some methods in MvpLceFragment to support using a View instead a TextView. \nAnyway, I'm thinking in implement my own version of MvpLceFragment to support that.\nI'm in favour of adding it in Mosby, I can help you with that.\nRegards,\nMatias\n. ",
    "mrPjer": "I stumbled upon this by trying to make my error view richer by adding additional elements such as a title and an image.\nThe current implementation is quite limited and does not allow this, so I patched up MvpLceViewStateFragment(https://github.com/mrPjer/mosby/commit/b003274f8155db6f8257b5f62e1841e818cfb85a). The patch adds in the concept of a container for the error view which is just a View and can contain anything, as long as the standard errorView is present. If no container is specified, then the errorView is used as the container.\nThis means that there is no overhead for users who do not want to expand their error views, but it is also quite easy to do so for those who do.\nAfter playing around with it, I realized that I can achieve the same thing by overriding the methods animateLoadingViewIn, animateContentViewIn and animateErrorViewIn, as well as attaching a click handler in onViewCreated in my own class.  It's worth mentioning that doing it this way requires going through the same process for Activities extending MvpLceActivity.\nOn one hand, I'd like to see more flexibility in the default classes, but you are right when saying that the default behaviour can be overridden for specific needs.\nHere is the final class of such a Fragment:\n``` kotlin\npackage com.eug2016.android.widget\nimport android.os.Bundle\nimport android.view.View\nimport com.eug2016.android.R\nimport com.hannesdorfmann.mosby.mvp.MvpPresenter\nimport com.hannesdorfmann.mosby.mvp.lce.LceAnimator\nimport com.hannesdorfmann.mosby.mvp.lce.MvpLceView\nimport com.hannesdorfmann.mosby.mvp.viewstate.lce.MvpLceViewStateFragment\nimport org.jetbrains.anko.onClick\nabstract class EUGMvpLceViewStateFragment, P : MvpPresenter> : MvpLceViewStateFragment() {\nprivate lateinit var errorViewContainer: View\n\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n    errorViewContainer = view.findViewById(R.id.errorViewContainer)\n    errorViewContainer.onClick { onErrorViewClicked() }\n}\n\noverride fun animateLoadingViewIn() {\n    LceAnimator.showLoading(loadingView, contentView, errorViewContainer)\n}\n\noverride fun animateContentViewIn() {\n    LceAnimator.showContent(loadingView, contentView, errorViewContainer)\n}\n\noverride fun animateErrorViewIn() {\n    LceAnimator.showErrorView(loadingView, contentView, errorViewContainer)\n}\n\n}\n```\nHere is an image of an errorView which this lets me build:\n\nAnd the relevant error_view.xml:\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<FrameLayout\n    android:id=\"@+id/errorViewContainer\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_centerInParent=\"true\"\n        android:layout_gravity=\"center\"\n        android:orientation=\"vertical\"\n        android:paddingBottom=\"@dimen/errorTextContainerMarginBotton\"\n        android:paddingLeft=\"@dimen/errorTextContainerMarginLeft\"\n        android:paddingRight=\"@dimen/errorTextContainerMarginRight\"\n        android:paddingTop=\"@dimen/errorTextContainerMarginTop\">\n\n        <TextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center\"\n            android:gravity=\"center\"\n            android:text=\"@string/loading_error_title\"\n            android:textColor=\"@android:color/black\"\n            android:textSize=\"32sp\"\n            />\n\n        <TextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginBottom=\"16dp\"\n            android:layout_marginTop=\"16dp\"\n            android:gravity=\"center\"\n            android:text=\"@string/loading_error_message\"\n            />\n\n        <TextView\n            android:id=\"@+id/errorView\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center\"\n            android:drawablePadding=\"16dp\"\n            android:gravity=\"center\"\n            android:padding=\"16dp\"\n            android:textColor=\"#656565\"\n            android:textSize=\"12sp\"\n            />\n\n    </LinearLayout>\n\n    <ImageView\n        android:id=\"@+id/sticker\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentBottom=\"true\"\n        android:layout_alignParentRight=\"true\"\n        android:layout_gravity=\"bottom|right\"\n        android:layout_marginBottom=\"16dp\"\n        android:layout_marginRight=\"16dp\"\n        android:src=\"@drawable/hrki_connect_error\"\n        />\n\n</FrameLayout>\n\n\n```\n. ",
    "lenguyenthanh": "I don't think Loader should be inside the presenter. Presenter on MVP should handle presentation logic only, not other logics like loading data from network or local. \nBtw, if you want, you can use Application Context, or you can inject Context to use it on Presenter(which is a bad practice, I don't suggest to use this).\n. You definitely can use Context in your model (your business logic), and you should use Dependency Injection to inject Context to your model. There are many tasks cannot be done without Context so it's okay to use Context on another layer then View layer.\n. You can use Multicasting in RxJava. Like:\nval buttonStream = view.buttonClickedTream().share()\nbuttonStream.subscribe { updateUI() }\nbuttonStream.flatMap(doNetworkStuff()). subscribe { updateUI() }\nYou can take a look at this blog: http://blog.danlew.net/2016/06/13/multicasting-in-rxjava/\nEdit: Sorry, I didn't read your issue carefully. Can you tell us more how share operator doesn't work?\n. ",
    "mradzinski": "So, assuming that the presenter should not be in charge of loading data then obviously the model is the best choice to implement the loader, right? So my question prevails. The CursorLoader class requires a Context to be passed in its constructor, and neither a Model or a Presenter should hold any instances of a Context, specially the Model since it should not have any knowledge of any other layer rather than the Presenter...\n. @sockeqwe Awesome! I'll go for the 3.0 then. Thanks!. Reading this I have a quick question regarding the current's presenter lifecycle. Is there any method that currently signalize an onDestroy for the presenter or is just simply implied in onDestroyView that the presenter has been destroyed? If so maybe just stating the destruction reason in onDestroyView through some param can be enough (maybe I got this all wrong, sorry if that's the case).. I'm also using mosby-conductor. Will upgrading to 3.1.0 have any side effects? Just wondering if I'll need to update that one too.. That would be absolutely fantastic. Just drop me a line here whenever you get some time to update mosby-conductor and I'll give both a try. Thanks mate!. I do have more than one activity, but only one of them uses Mosby (the other one is just a Splash with no presenter, so nothing to do with this). No MVI activity.. @sockeqwe Hannes, does this affect users of Mosby with Conductor? I guess it'll not since Conductor handles its own backstack and lifecycle which Mosby makes use of it, but I'll soon enough have to migrate to AndroidX for a mammoth of a project and don't want this to be an issue \ud83d\ude15 . ",
    "alexandr2levin": "I got it. If I use Retrofit&RxJava, then I don't need things like isViewAttached() or my solution.\napi.getProjects(accountManager.getUserId())\n                .subscribeOn(ioScheduler)\n                .observeOn(AndroidSchedulers.mainThread())\nAs my code always will run on Android UI Thread. But, your example calls isViewAttached() method anyway. Is it mistake or there is any reason for it?\nI read below:\n\nWhy do I need isViewAttached() check in MvpBasePresenter\nIn a perfect world you wouldn\u2019t need this check. As already said, in Mosby all interaction from Presenter to View happens on android\u2019s main UI thread. Since screen orientation changes are also executed on the main UI thread it is not possible to run into the scenario where view is detached while presenter still wants to update the UI, right? However, we are not living in a perfect world. Let\u2019s say you use an AsyncTask to make an http request and the Presenter gets the result back and updates the View. If you forget to cancel this AsyncTask after the View has been destroyed (i.e. your apps user press the back button, presenter.detachView(false) will be called) then you can run into the scenario that the View is detached from Presenter and then the Presenter gets the result back from AsyncTask and wants to update the View which is null (because detached). So the isViewAttached() check is basically some kind of safety net. In a perfect implementation you wouldn\u2019t need it (presenter - view interaction on main thread, cancel all async background task when view gets destroyed etc.), but in general I would say it wouldn\u2019t hurt to drive with a safety net.\n\nBut still don't get it.\nIs there any forum about Mosby to discuss questions like this?\n. Okay. I understood. Well, thanks again!\n. Yep.\n. > I guess editMenuItem is a Toolbar / ActionBar Menu Item, right?\nYeah, it is a bad example with MenuItem. But NullPointerException also thrown when I trying to update typical View inflated by ButterKinfe. I will test this problem and write back in few days.\n\nBut I'm not sure when xml menu will be inflated.\n\nI think it inflated somewhere after onCreateView. \n\nDo you use plain Toolbar or do you set Toolbar as support action bar.\n\nI use support action bar.\n. > But NullPointerException also thrown when I trying to update typical View inflated\nThere is my mistake. I used to inject additional Views to AppBarLayout from onStart(). Now I do it in onCreateView().\n```\nView toolbarPartView;\nEditText titleEditText;\n@Override\npublic View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n    toolbarPartView = getCustomizer().setExtendedToolbarView(R.layout.view_edit_project_toolbar_part);\n    titleEditText = ButterKnife.findById(toolbarPartView, R.id.title_edit_text);\n    return super.onCreateView(inflater, container, savedInstanceState);\n}\n```\n\n\nthis lifecycle diagram\n\nVery helpful diagram, thanks.\n\nNot sure how to fix this properly, I think for now your workaround with a post() is the best option.\n\nYeah, it works for me. But I will try to use Toolbar.inflateMenu() as it looks more logical. Thanks again :)\n. > Since the Fragment is on the backstack it can not use setRetainInstance(true).\nBut it uses. See example in my first message. someValue increments when I navigate to other Fragment and back. ViewState must be kept too. (it kept sometimes until I restart my app, see screenshots)\n\nClass variables are restored as they must. I test it via incrementing int var every onViewCreated(): ...\n. > I assume that in your app you are navigating from NotesFragment to NoteFragment. \nSo in you example the navigation stack is:\nNoteFragment (currently visible to the user)\nNotesFragment (on the back stack)\n\nRight.\nI'm not so good in English :)\nI will try to rephrase. In some app sessions, ViewState is restored when I navigate to the previous Fragment from backstack. In others, it don't. someValue not stored into Bundle. It survives by setRetainINnstance(true)(but ViewState often recreates).\np.s. \"restart my app\" == \"start new app session\"\n. I will create demo app and will write back soon.\n. Done. https://github.com/Try4W/MosbyRetainingFragmentBackstackDemo\nThere is no Mosby included in the project, but it proofs that \"backstacked\" Fragments usually retained.\n. > Btw. in your Activity you have to check if (savedInstanceState == null) before adding FirstFragment, otherwise your code will create a new FirstFragment on each screen orientation change.\nYes, I forgot about it :)\n\nSo you still run into the problem that onNewViewState() is called every time you come back from backstack to the previous fragment, right?\n\nYeah. But sometimes onNewViewState() called like it must until I restart my app:\n\nIn some app sessions, ViewState is restored when I navigate to the previous Fragment from backstack.\n. It looks that there is no elegant way to update backstacked Views.\n\nFor example, I have two fragments.\nThe first one is ProjectFragment which holds ViewPager with multiple nested fragments.\nThe second is EditProjectFragment.\nUser open app, see ProjectFragment and navigates to EditProjectFragment\nWhen EditProjectFragment saves Project into model, I push ProjectEdited event into my RxBus.\nThen, ViewPager's fragments(presenters) handle this event and trying to update Views that is detached.\nThis problem can be solved via placing ViewState between View and Presenter. Like moxy does:\n\n. > yes that is true ... That is more a \"philosophical\" question: If no View exists (or is detached), why should a presenter exist for such non existing view?\nThat sounds logical, yes.\n\nIn Mosby 3.0 I will introduce a new Model-View-Intent module. This will solve that \"observing same model\" problem and also remove the ViewState at all...\n\nInteresting. I will read about it. When Mosby 3.0 is expected to be released? :)\n\n... this problem can be solved differently. No EventBus, just ensure that all presenters observe the same model.\n\nWhat do you mean?\n\nI think that the easiest solution for now is prevent ViewState from retaining when the user navigates back to previous Fragment. Or how can I force ViewState to be recreated after returning to the previous Fragment from backstack?\n. My workaround to update only at the first start&returning from backstack:\n```\nprivate boolean isBackStacked = false;\nprivate boolean isFreshInstance = true;\n@Override\npublic void onActivityCreated(@Nullable Bundle savedInstanceState) {\n    super.onActivityCreated(savedInstanceState);\n    if(isFreshInstance || isBackStacked) { // fresh instance or returned from back stack\n        isBackStacked = false;\n        logger.debug(\"initializing presenter...\");\n        presenter.initialize();\n    }\n}\n@Override\npublic void onDestroyView() {\n    super.onDestroyView();\n    isFreshInstance = false;\n}\n@Override\npublic void onStop() {\n    super.onStop();\n    if(!getActivity().isChangingConfigurations()) {\n        isBackStacked = true;\n    }\n}\n```\nI think that better solution will be to write my own MvpDelegate but it looks very complicated to understand&edit Mosby's architecture without UML diagrams or something like that.\n. I trying to avoid using isViewAttatched() as it hides unexpected behaviour when some callbacks can be executed while View is detached without any Exception. So, I just drop all requests to model in detachView(...) method.\n. ",
    "leonardo2204": "My mistake, sorry\n. First of all thanks for the reply !\nI'll wait for some news on the 'likely' rotation bug.\nAs per the Rx issue, the problem is that I'm back on the view that calls the Rx, so in my mind it makes no sense that the isViewAttached() returns null. I guess it will be easier to see the code !\nAgain thanks for the help and the excellent lib !\n. Sure, no problem.\nTo reproduce:\nFirst click on the text on the toolbar (the contact list will be updated). The text means to filter contacts with number only, or not.\nRotate the device.\nIf you click again nothing will happen, because the Rx onNext callback never gets called, since onViewAttached() is false.\nUpdate: So sorry, really had forgotten to push some changes, now it's done ! Please, just pull and you are good to go !\n. First of all, I really appreciate all your explanation and help, I'll dive deeper into your code to learn more.\nI think I solved the problem by creating a onCreate method as seen on Conductor #34:\n```\n@NonNull\n    @Override\n    protected View onCreateView(@NonNull LayoutInflater inflater, @NonNull ViewGroup container) {\n    if(!created){\n        onCreate();\n        created = true;\n    }\n\n    View v;\n    v = inflateView(inflater, container);\n    ButterKnife.bind(this, v);\n    onViewBound(v);\n\n    return v;\n}\n\n```\nAnd use like this:\n@Override\n    protected void onCreate() {\n        DaggerFirstScreenComponent.builder()\n                .activityComponent(((RootActivity) getActivity()).getActivityComponent())\n                .firstScreenModule(new FirstScreenModule())\n                .build().inject(this);\n    }\nI tested and it works. So, is that a good solution ? Should I save the created variable on saveInstance ?\nThank you so much again !\n. Sure, no problem.\nI see your point and I agree that people may complain about some tweaks it should have or use cases it wouldn't cover. Nevertheless I think it's a very common use case, and I also get myself implementing this over and over. I'm not sure if it's a good approach to create a lib on top of that just for this feature. If so, LCE should also be a part lib, right ?\nAbout the states, I agree 100%, that' how I do on my side. And I'd give a +1 for the step 4, show successful callback.\nThanks for taking your time and I really appreciate all the work and effort you put on your project dude !\n. Hey @sockeqwe, how is it going ?\nI came up with something like that https://github.com/leonardo2204/mosby.git\nSee what your toughts are on that !\n. Sure, no problem !\nOhh I see it, so that would be something like the viewstate separate lib, right ? I misunderstood haha. In that case I think that would be just fine, also we could even extract the LCE part into the same package.. What do you think ? \nWe'd have something like a MosbyForm, something like that (I'm not good at naming things).\nThanks for your time, I'll wait for some other feedback ;)\n. I kinda stopped developing this features waiting for a feedback from you guys...\nMore thoughts on how to design this new features ?\n. @sockeqwe Thanks for the feedback !\nSure, do you have any naming sugestion ? \nAs soon as I have some more time, I'll keep implementing !\n. @sockeqwe Hmm, I'm not sure about that, IMO, it doesn't seem like a \"natural\" name to refer to Form views. Maybe using send or something else to make it clearer ? Something like Send Loading Error Success (SLER) or Form Loading Error Success (FLES) ??\nAnd also, as it would serve as a Form View, does it make sense to have a Content in this case ? I mean, the content is the Form, so I 'm not sure if we would ever need to hide/show its content.\nThanks again for your reply !\n. Sure, no problem !\nI'm working on it, I think by the end of the day I'll have it implemented !\n. I'll drop another PR, I mistakenly mixed it all. \nSorry about that\n. Just updated the gradle but it's not building, any ideas why ?\n. Hey man, sorry for the several builds, I'm new to Travis... \nI can't figure out what's going on, could you help me on this ?\n. Thank you man so much !\nI'd really appreciate if you could drop me a message here explaining what I did wrong on Travis, to learn from it !\nThanks\n. @sockeqwe You mean the feature or the code itself, since it's ouf of date ?. @sockeqwe No problem :)\nIs there any other new way of doing this ? Sorry for the dumb question, I'm kinda out of date with Android for a while haha. Cool, thanks for the feedback, gonna dive in a little further on this pattern !. Thanks for the quick reply.\nJust a heads up, the problem seems to occur with FragmentStatePagerAdapter, changing to FragmentPagerAdapter works fine.. Sure, I'm trying to figure out here also, I learnt that the fragment and activity variables get null'ed, but the MviDelegate stays in memory. After going back and forth, it tries to get the activity or fragment, but the delegate constructor is not called (since it's kept in memory), and it crahses.. Cool, thanks !. I actually have a wizard screen with variables steps, and I was creating the \"steps\" screen (fragments) according to necessity, adding them to a List.\nBottom line, am I doing something wrong (I mean, which is the best way to reuse the fragments in a wizard like ViewPager) or maybe my sample did not work in your side ?\nAgain, thanks for helping !. I've given this some thought and I agree with your points. I guess it was a poor implementation on my side. I completely rewrote it and it now works as expected.\nThanks for your help on that matter and explanations :D. Hmm good catch... Any ideas ?\n. This was supposed to be on a separate commit, my bad.\n. ",
    "teamfunk": "with wiring up i meant the delegation.\nAh i see its my fault. the normal presenter doesn't use onAttach at all and only hooks into onViewCreated and onViewDestroyed with attachView and detachView. I might run into a special case (video stuff) where  i maybe need to delegate more lifecycle methods to the a presenter but now i got how to do it. Hopefully i can prevent that - i know lifecycle in a presenter is not the best idea... This can be closed :-)\n. ",
    "vkiyako": "It's sometimes very implicit. You can easily make a mistake if you queue a command that shows some animation or an error which is already resolved and so on\n. ",
    "PingForward": "@dimsuz yes, I agree with you it is a good solution I used it in the previous project. Then I try FragmentWithArgs it is pretty cool lib but I think using it with MVP architecture is a bad idea.\n. @dimsuz I talk about architecture but seems  this library broke MVP logic and I thought some one know good hack to leave the lib and use MVP to the right way.\n. ",
    "vanniktech": "Alright I'll prep something up and let you know.\n. Of course you can because both provide delegates.\nOnce I get around to extended mosby components - #143 - I also wanted to add RxLifecycle suport\n. ",
    "ar-g": "Makes sense for me now. Thanks!\n. ",
    "Maragues": "Sorry I forgot to mention, it's version 2.0.1\n. My code does not compile with 3.0.0-SNAPSHOT, it looks like BaseMvpViewStateDelegateCallback no longer exists\n. It doesn't crash in 3.0.0-SNAPSHOT, I see that you catch the exception in MvpNullObjectBasePresenter's constructor \n. It's not crashing, but com.hannesdorfmann.mosby.mvp.MvpActivity does implement MvpView\n. Yes, that's the scenario. Some details\n- The Activity is empty, it's just a Fragment container\n- It didn't crash in version 2.0.1 until I used ProGuard\n. Thanks to you for the time you devote to the community!\n. ",
    "mohaxspb": "I have same error when tryed to add parametr to my extention of MvpView interface. I tryed to compile with  3.0.0-SNAPSHOT, but gradle cant find it. My base interface looks like\n```\npublic interface BaseListMvp {\n    interface View extends BaseMvpView {\n        void updateData(List data);\n    }\ninterface Presenter<D, V extends View> extends BaseDataPresenter<V> {\n    List<D> getData();\n}\n\n}\n```\nI also create BaseListPresenter\n```\npublic abstract class BaseListArticlesPresenter>\n        extends BasePresenter implements BaseListMvp.Presenter {\nprotected RealmResults<D> mData;\n\npublic BaseListArticlesPresenter(MyPreferenceManager myPreferencesManager, DbProviderFactory dbProviderFactory, ApiClient apiClient) {\n    super(myPreferencesManager, dbProviderFactory, apiClient);\n}\n\n@Override\npublic List<D> getData() {\n    return mData;\n}\n\n}\n```\nAnd finaly create concrete presenter so:\n```\npublic class RecentArticlesPresenter extends BaseListArticlesPresenter implements RecentArticles.Presenter {\npublic RecentArticlesPresenter(MyPreferenceManager myPreferencesManager, DbProviderFactory dbProviderFactory, ApiClient apiClient) {\n    super(myPreferencesManager, dbProviderFactory, apiClient);\n}\n\n}\n```\nwhere RecentArticles interface is\n```\npublic interface RecentArticles {\n    interface View extends BaseListMvp.View {\n    }\ninterface Presenter extends BaseListMvp.Presenter<Article, View> {\n}\n\n}\n```\nAnd it works until I try to replace fragement or rotate screen, after fragment try to destoy them self. Then onDestroy called and an error. that mentioned previously in this issue occures. ",
    "CodyEngel": "Yup that's exactly what the problem was. We were using a custom presenter cache that was a little wonky and this afternoon discovered Mosby supports caching the presenter now. We implemented that, I just removed my \"fix\" and everything still works as I would expect. Thanks for explaining what was going on behind the scenes.\n. ",
    "Blankeer": "I create mosbyMvp demo repository.It contain mosby simple source analysis.But it is Chinese.\nhttps://github.com/Blankeer/MVPMosbyDemo\n. I updated MvpLceViewStateFrameLayout,ans add MvpLceFrameLayout.\nhttps://github.com/Blankeer/MVPMosbyDemo/tree/master/app/src/main/java/com/blanke/testmosby/mosby_class\nThanks.\n. ",
    "Trikke": "Oh god, what a coincidence! I was just wondering why MvpLceViewStateFrameLayout didn't exist. Thanks for the class!\nEdit : I updated the class to comply with other \"LceViewState\" Classes\nYou were missing \njava\npublic abstract M getData();\nAnd by default onNewViewStateInstance is overriden to call loadData();\njava\n@Override public void onNewViewStateInstance() {\n        loadData(false);\n    }\nFull source\n``` java\npublic abstract class MvpLceViewStateFrameLayout, P extends MvpPresenter>\n        extends MvpViewStateFrameLayout implements MvpLceView {\nprotected View loadingView;\nprotected CV contentView;\nprotected TextView errorView;\n\npublic MvpLceViewStateFrameLayout(Context context) {\n    super(context);\n}\n\npublic MvpLceViewStateFrameLayout(Context context, AttributeSet attrs) {\n    super(context, attrs);\n}\n\npublic MvpLceViewStateFrameLayout(Context context, AttributeSet attrs, int defStyleAttr) {\n    super(context, attrs, defStyleAttr);\n}\n\npublic MvpLceViewStateFrameLayout(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\n    super(context, attrs, defStyleAttr, defStyleRes);\n}\n\nprotected int getLoadViewId() {\n    return R.id.loadingView;\n}\n\nprotected int getErrorViewId() {\n    return R.id.errorView;\n}\n\nprotected int getContentViewId() {\n    return R.id.contentView;\n}\n\n@Override\nprotected void onFinishInflate() {\n    super.onFinishInflate();\n    loadingView = findViewById(getLoadViewId());\n    contentView = (CV) findViewById(getContentViewId());\n    errorView = (TextView) findViewById(getErrorViewId());\n    if (loadingView == null) {\n        throw new NullPointerException(\n                \"Loading view is null! Have you specified a loading view in your layout xml file?\"\n                        + \" You have to give your loading View the id R.id.loadingView\");\n    }\n    if (contentView == null) {\n        throw new NullPointerException(\n                \"Content view is null! Have you specified a content view in your layout xml file?\"\n                        + \" You have to give your content View the id R.id.contentView\");\n    }\n    if (errorView == null) {\n        throw new NullPointerException(\n                \"Error view is null! Have you specified a content view in your layout xml file?\"\n                        + \" You have to give your error View the id R.id.errorView\");\n    }\n    errorView.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            onErrorViewClicked();\n        }\n    });\n}\n\n@Override\npublic void showLoading(boolean pullToRefresh) {\n    if (!pullToRefresh) {\n        animateLoadingViewIn();\n    }\n}\n\nprotected void animateLoadingViewIn() {\n    LceAnimator.showLoading(loadingView, contentView, errorView);\n}\n\n@Override\npublic void showContent() {\n    animateContentViewIn();\n}\n\nprotected void animateContentViewIn() {\n    LceAnimator.showContent(loadingView, contentView, errorView);\n}\n\nprotected abstract String getErrorMessage(Throwable e, boolean pullToRefresh);\n\nprotected void showLightError(String msg) {\n    Toast.makeText(getContext(), msg, Toast.LENGTH_SHORT).show();\n}\n\nprotected void onErrorViewClicked() {\n    loadData(false);\n}\n\n@Override\npublic void showError(Throwable e, boolean pullToRefresh) {\n    String errorMsg = getErrorMessage(e, pullToRefresh);\n    if (pullToRefresh) {\n        showLightError(errorMsg);\n    } else {\n        errorView.setText(errorMsg);\n        animateErrorViewIn();\n    }\n}\n\nprotected void animateErrorViewIn() {\n    LceAnimator.showErrorView(loadingView, contentView, errorView);\n}\n\n@Override public void onNewViewStateInstance() {\n    loadData(false);\n}\n\n@Override\nprotected void onDetachedFromWindow() {\n    super.onDetachedFromWindow();\n    loadingView = null;\n    contentView = null;\n    errorView = null;\n}\n\n/**\n * Get the data that has been set before in {@link #setData(Object)}\n * <p>\n * <b>It's necessary to return the same data as set before to ensure that {@link ViewState} works\n * correctly</b>\n * </p>\n *\n * @return The data\n */\npublic abstract M getData();\n\n}\n```\n. ",
    "fzymek": "Ok, I got it working with calling setRetainInstance(true) in my activity and using RetainingLceViewState as my ViewState.\nThanks!\n. ",
    "lyrachord": "In FAQ, I saw an answer for the question. But it seems not a perfect choice for me.\nFor an AsyncTask, the callback listener should be responsible for the view existing checking.\nSo there are some other considerations for isViewAttatched()?\n. Thanks @Try4W looks the dropping is one of best practice.\nThe key is still how and where and who to manage the existing state?\nBTW I started in code, the interface binding(include superclass binding) seems not so, eh, flexible or agile? Some ways to avoid theses bindings applied well, f.e. eclipse e4.\nAny?\n. ",
    "MahdiPishguy": "because on this link as far as i understand for this library we don't need to implementing that\n. I'm using classic MVP on android and i would like to use your library, and i'm managing lifeCycle normally, my code is like with spaghetti code\n. @sockeqwe now how can i fix that? i don't understand how can i modify code. @charbgr you have right. in my presenter i have more process and i must to access to some widget in the same time. ",
    "stavfx": "@tux-world, try reading http://hannesdorfmann.com/android/presenters-dont-need-lifecycle. ",
    "urizev": "That's right! I missed that :(\nThanks! And sorry for the obvious question\n. ",
    "athkalia": "Will do : >\nthanks\n. Hey pal, I just released that project I was talking about:\nhttps://www.reddit.com/r/androiddev/comments/5thahs/open_source_android_app_with_loads_of_goodies_and/\nLooking forward to your feedback : >. ",
    "rkrater": "I created a new android studio project then copied in the sample mail project contents. I replaced compile project(':viewstate') with compile 'com.hannesdorfmann.mosby:mvp:2.0.1' & compile 'com.hannesdorfmann.mosby:viewstate:2.0.1'. ",
    "JonathanSanchezSalas": "Hi Hannes.\nThanks a lot for time to try to help me.\nYou were right. I'm using EventBus, and both activities were subscribed to the same event when error occurred. As you pointed, solution was to change events for both activities.\nI really appreciate your knowledge.\nThank you.\n. ",
    "tomasznajda": "Thanks for a quick reply.\nI will provide more detailed informations a little bit later, but I guess the answer is in the stacktrace.\nThe 7th line is from Mosby's MvpActivity.\nruby\nat com.hannesdorfmann.mosby.mvp.MvpActivity.onCreate(MvpActivity.java:41)\nIf it will help, below you can find my UserDetailsActivity#onCreate() method:\njava\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_user_details);\n        ButterKnife.bind(this);\n        getPresenter().onViewCreated();\n    }. ",
    "charbgr": "What about shouldViewStateBeRestored(Boolean) or even more explicit method names like restoreViewState(), alwaysRecreateViewState(). Hmm.. Is ViewState the correct name? If we say that we need to render a model for the view, is ViewModel the correct name? Actually, a ViewModel represents the state of the View.\nAlthough, if we change the name to ViewModel, there will be confusions with MVVM pattern.\nWhat if this boolean came as an argument on the render method? Like render(MyModel model, boolean isViewStateRestored) ? Maybe on an MviView and make it generic.\njava\npublic interface MviView<VS> {\n    void render(VS viewState, boolean viewStateRestored);\n}\n. Why do you want to keep setRestoreState(boolean) and not give this boolean on the render(viewState) method? In case someone wants a more sophisticated logic on setRestoreState(boolean) ? . Ok, I see.\nAs Mosby has a domain object ViewState, setRestoreViewState(boolean) seems the most appropriate method name.. I think playing with visibility is the most appropriate solution. \nIn case someone wants something like two-way binding technique, he will make it public, no?. I also agree with this MviPresenter. Coordinator would be a little confused term if someone uses Square's coordinators. . Seems that retrofit cancels the request.\nhttps://github.com/square/retrofit/blob/master/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallExecuteObservable.java#L72. I find it very strange if observables (like the above) are created on Activity/Fragment/View.\njava\nObservable<InputEvents> inputs = Observable.merge(loadingEvent, pullToRefreshEvent);\nI can't think how you can write tests if you have observables with operators like .scan() on activities. Current approach seems more testable to me.\nOne of the most interesting part of the talk is the part with the Actions, transformers etc which can be useful for LCE. \u03a4his can lead Mosby for a new Redux module. \n. I thought it back yesterday. If you rename Input and Output to Source and Sink respectively, it reminds to me cycle.js, don't you think so? @sockeqwe . You can ask for the instance of the TextView from the ActivityChannelContentView but why do you want something like this?\njava\npublic interface ActivityChannelContentView extends MvpView {\n    TextView getScheduleDateTimeNotify()\n}\n```java\npublic class ActivityChannelContent extends MvpActivity {\n...\n@Override\npublic TextView getScheduleDateTimeNotify() {\n    return this.scheduleDateTimeNotify;\n}\n```\nWhy don't you add a function in ActivityChannelContentView like setTextToDateTimeNotify(..) ?\n. :) You are welcome! Although, I think those kind of questions should be on stackoverflow.. You mean something like Robot pattern?. Sure!\nNice approach! I don't like so much UI tests and I am more https://martinfowler.com/bliki/TestPyramid.html.\nDo InstrumentationUiBinder and InstrumentationHomeRobot make the same work? I usually have a list with rendered states on the Robot class and not on a UiBinder.. ",
    "TobiasRe": "For my project I'm naming the classes ViewModel instead of ViewState, because the model includes the state. My ViewModel classes include a property that reads the state, for easier debugging / state checks.\nI put a facade on top of MviView / MviActivity so I can define my interface like this:\n```Java\nabstract class BaseActivity extends MviActivity {\n  private boolean restoreViewState;\nabstract protected void render(ViewModel model, boolean isRestored);\n@Override \n  public void setRestoreViewState(boolean b) {\n     this.restoreViewState = b;\n  }\n@Override\n  public void render(ViewModel model) {\n     this.render(model, this.restoreViewState)\n    }\n}\n```\n. Thank you.\nThe PublishSubject approach is a very good idea!\nThis will solve my issue.. This is even better, since there won't be errors emitted in this subject.\nThe RxJava world is quite overwhelming in the beginning. Thanks @sockeqwe ,\nactually I resolved the issue using combineLatest very similar to your last approach, with the difference that the retrySubject doesn't need to know the content of the previous intent.\n``` Java\nclass MyViewAcitiyt extends MviActivity implements MyView {\n    PublishSubject retrySubject =  ... ; // fires on retry Button click\n   ...\n@Override\n  public Observable searchIntent(){\n      Observable searchObservable = RxSearchView.queryTextChanges(searchView);\n      return Observable.combineLatest(searchObservable, retrySubject, (searchString, retryClicked) ->     searchString);\n  }\n}\n```\nThere is one thing to notice. combineLatest() only emits items when all Observables emitted a first item after subscribing to them. Thats why I need to initialize the retry after Mosby did its subscriptions.\nJava\n@Override\n  protected void onStart() {\n    super.onStart();\n    retrySubject.onNext(true);\n  }\nI will share this and additional questions like this on StackOverflow in the future. \nI raised this question, because it took me some time to solve and I'm pretty sure I won't be the only one with this feature in mind.\n . ",
    "FabianShallari": "Decoupled communication between UI components/presenters can be achieved as you have correctly mentioned by pushing it down to the business logic layer (best approach) or by using publish subjects (which in this case would act as a specialized one-channel event bus). \nI think that exposing viewState changes of one particular component so that other components (Views, Presenters) can react to that is 99% of the time a code smell and a library should make it hard for its users to be able to create that kind of code. \n1% of cases which depend on this kind of behavior should be encouraged to push the logic down and keep their UI/presenter flows decoupled and isolated from each other.  . My opinion is neutral in that. Personally in my code if I am lazy to push the state down to the business logic and observe it there, I use a PublishSubjector a PublishRelay and inject it to the components (or make it available as a lazy static singleton) that are interested in observing/notifying therefore kind of emulating an EventBus. \nI still have to run into use cases where I need to change BView by referencing AViews state directly so maybe my perspective is not the most helpful in this case. Theoretically you are kind of breaking encapsulation by exposing it so maybe not the best approach there \ud83d\ude15  \nAnybody else knows of any good use case when you need to expose it that cannot be achieved via EventBus, PublishSubject, Observable Business Logic?.. ",
    "wrparrish": "I think you are on the right track,  which is leaving the developer to handle  Flowable.toObservable()  and keeping  mosby cleaner, by just providing the Observable return types.   That being said,  i am not super familiar with MVI,  but have been using mosby  (Thanks for your work!)   for around 18 months or so.   . \ud83d\udc4d   on the new presenter,   and   input / output   seems straight forward to me.. ",
    "yatatsu": "I agree that the Presenter should be created at onPostCreate(), and I think it's ok that surviving through onStart()/onStop(). \nBut now behavior, the Presenter without orientation changes, seems to be recreated at onStart() because it removed from the presenterManager at onStop().. ",
    "kibao": "I use MviActivity and didn't try to reproduce in the sample applicaiton, because only ProductDetailsActivity extends MviActivity and it doesn't use unbindIntents method.\nI've just tested with clean project with classes listed below and when I leave the app, go back to the app few times, logcat shows only one bindIntents and many unbindIntents.\nMainActivity.java\n```\npublic class MainActivity extends MviActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n@NonNull\n@Override\npublic MainPresenter createPresenter() {\n    return new MainPresenter();\n}\n\n}\n```\nMainPresenter.java\n```\npublic class MainPresenter extends MviBasePresenter {\n    @Override\n    protected void bindIntents() {\n        Log.d(\"MainPresenter\", \"bindIntents\");\n    }\n@Override\nprotected void unbindIntents() {\n    Log.d(\"MainPresenter\", \"unbindIntents\");\n}\n\n}\n```\nMainView.java\ninterface MainView extends MvpView {\n    class ViewState {\n    }\n}. ",
    "manabreak": "I'm using 2.0.1.. Hmm, Gradle seems to be having problems resolving compile 'com.hannesdorfmann.mosby3:mvp:3.0.0-SNAPSHOT'. Is there something that should be changed in addition?. The issue seems to be solved when using 3.0.0 snapshot. Thanks!. The alpha4 seems to solve the issue. It's really weird that the SNAPSHOT doesn't seem to have the interfaces.. No problem, and thanks for quick support. :). Doesn't seem to work. with alpha4 the interfaces are there, with SNAPSHOT they're not. Odd.. ",
    "cyberrob": "Comparing com.hannesdorfmann.mosby.mvp.MvpNullObjectBasePresenter & com.hannesdorfmann.mosby3.mvp.MvpNullObjectBasePresenter, it seems that constructor in the newer version did some magics to recursively check if subclasses is some kind of class in isSubTypeOfMvpView() method.\nIt's awesome! Thanks!. ",
    "hussam789": "I understand, my question is could you provide an example for a unit test for the presenter in MVI sample app (currently there are no tests for it)? Or can you give us any advice for writing a test for MVI pattern in general?. I'm looking at ProductDetailsPresenter and there are 3 intents: addToShoppingCartIntent, removeFromShoppingCartIntent and loadDetailsIntent.\nbut only loadDetailsIntent is passed to the subscribeViewState method.\n```\nintent(ProductDetailsView::addToShoppingCartIntent)\n        .doOnNext(product -> Timber.d(\"intent: add to shopping cart %s\", product))\n        .flatMap(product -> interactor.addToShoppingCart(product).toObservable())\n        .subscribe();\nintent(ProductDetailsView::removeFromShoppingCartIntent)\n    .doOnNext(product -> Timber.d(\"intent: remove from shopping cart %s\", product))\n    .flatMap(product -> interactor.removeFromShoppingCart(product).toObservable())\n    .subscribe();\n\nObservable<ProductDetailsViewState> loadDetails =\n    intent(ProductDetailsView::loadDetailsIntent)\n        .doOnNext(productId -> Timber.d(\"intent: load details for product id = %s\", productId))\n        .flatMap(interactor::getDetails)\n        .observeOn(AndroidSchedulers.mainThread());\n\nsubscribeViewState(loadDetails, ProductDetailsView::render);\n\n``\n is it because the other 2 intents don't cause the business logic to change the viewState (and eventually callingrender())? . recently I came across Andre Staltz's presentation talking aboutStreamIOandMonadicIO[here](https://youtu.be/Tkjg179M-Nc?t=13m22s) but he didn't mention why it's important to have a single input/output event stream:\n![image](https://user-images.githubusercontent.com/1441832/27585776-35595cc6-5b46-11e7-85c2-6f90aea4aad7.png)\nMartin Fowler has an interesting article on his blog about [Command Query Responsibility Segregation](https://martinfowler.com/bliki/CQRS.html).\nhow about naming itMviStreamIOPresenterorMviCqrsPresenter`?. ",
    "niltsiar": "You're right. I've tested it again and it's working properly. I've also tested it while debugging and instances are kept for ages while doing that so maybe that's what happened yesterday and I didn't realise that.\nSorry for the false alarm.. ",
    "jungornti": "Thank you very much for such a high detail explanation, now i'm closer to undestanding. Am i right, that calling this: \nprotected void bindIntents(){\n    intent(new ViewIntentBinder() {\n        Observable<Something> bind(FooView view){\n            return view.someIntent();\n       }\n    });\n}\nactually creates a closure to the view? And then .bind is called later, the correct intent is returned, because reference to view is stored in closure? And if i'm right, calling .bind, when view is detached may result in NPE?\nSorry for silly questions, but i'm really new to java and want to really understand what is going on :). Oh, i think, i got it, when it is called:\nprotected void bindIntents(){\n    intent(new ViewIntentBinder() {\n        Observable<Something> bind(FooView view){\n            return view.someIntent();\n       }\n    });\n}\nthen the instance of ViewIntentBinder is created, and that concrete instance knows what concrete intent to return from the given view, so there are no closures. And because of that, we can't talk about NPE, because non null V view is passed to that concrete ViewIntentBinder instance in bindIntentActually. . Hannes, thank you very much for your time on explanation, you are a great man! Now i understood.. ",
    "zourb": "I faced the same problem, @orcchg , how did you solve this at last? thanks a lot.. I got it and i will have a try, thanks @orcchg . ",
    "orcchg": "@zourb I've solved this the following way:\nBaseActivity --> DerivedActivity --> UltimateActivity (inheritance)\ninterface UltimateContract {\n    void foo();\n}\n```\nUltimateActivity extends BaseActivity<DerivedContract.View, UltimateContract.Presenter> implements UltimateContract.View {\n@Override\npublic void foo() {\n}\n\n}\n```\nUltimatePresenter extends BasePresenter implements UltimateContract.Presenter {\n   void bar() {\n        ((UltimateContract.View) getView()).foo();\n   }\n}\nSo, I ve to cast. But this cast is logically safe.\n. ",
    "tagantroy": "yes, it's sound like expected behavior,but your observable for bottom menu will not work anymore. How can I fix it? I'm use it incorrectly?. class MainActivity : MviActivity<MainView, MainPresenter>(), MainView. added \noverride fun selectMenuItem(): Observable<MenuItem> {\n        return RxBottomNavigationView.itemSelections(bnvMain)\n                .doOnNext {\n                    Log.e(\"SelectMenuItem\",\"title = ${it.title}\")\n                }\n                .doOnComplete {\n                    Log.e(\"SelectMenuItem\",\"onComplete}\")\n        }\n    }\nand \nintent(MainView::selectMenuItem)\n                .doOnNext {\n                    Log.e(\"intent\", \"title = ${it.title}\")\n                }...\nI see logs \"SelectMenuItem: title = ....\" but nothing with \"intent\"\n. i'll provide link tomorrow. link: https://github.com/tagantroy/bottomnavigationmvibug. Thank you. \nI hope mvi future of android development(I'm use it instead mvvm). ",
    "asyncee": "Oh, thank you, Hannes! What a silly typo. I'm confused, why i did not noticed it earlier. Now it is working. Have a nice day! ;). ",
    "MFlisar": "Sure, just forgot that it's another repo. Sure, I'll do that. I faced this problem as well in the last days and was wondering why I don't get my inital state emitted every now and then...\nFirst tests on my side show, that the snapshot is working now. I've a very simple example (can offer this if it helps) that did not work but I can't reproduce it reliably, only every 5-10th time I lost a state. But simply trying to start my activity over and over again I constantly saw this error...\nAfter updating to the snapshot I could not reproduce this issue again - after trying it about 50 times.... using keepPresenterDuringScreenOrientationChange  = false and retaining my presenter manually should work as well, shouldn't it? In my service I can decide when to reset the presenter and when not.... Sadly this won't work, as I said in my first post, the delegate will search for the parent activity here:\nhttps://github.com/sockeqwe/mosby/blob/master/mvi/src/main/java/com/hannesdorfmann/mosby3/ViewGroupMviDelegateImpl.java#L71\nEven If I set keepPresenterDuringScreenOrientationChange = false...\nAnd here again, it would crash I think because there is no activity https://github.com/sockeqwe/mosby/blob/master/mvi/src/main/java/com/hannesdorfmann/mosby3/ViewGroupMviDelegateImpl.java#L121. What do you think of an extension of the ViewGroupMviDelegateImpl like following:\n// add a field like followng => set it true to don't change any old behaviour\nboolean forceActivityContext = true;\n\n// \nvoid setAllowNonActivityContext() {\n    forceActivityContext = false;\n}\n\nIf the field is set to true, everything stays as it is, otherwise I will change the code to not throw an exception. Result is, that the user will have to manually call the code in here https://github.com/sockeqwe/mosby/blob/master/mvi/src/main/java/com/hannesdorfmann/mosby3/ViewGroupMviDelegateImpl.java#L239 to clean up everything because there will not be any destroy callback.\nAnything that speaks against this approach or any better idea?\n   . Actually I totally copied the ViewGroupMviDelegateImpl, replaced the internal activity variable with a context variable  and disabled the retaining of the presenter in it (did not remove the overhead).\nI would say it should be ok, to create the views in my service and attach them. If my service get's destroyed, I detach my views AND destroy them, if the screen is rotated, the views are only detached and reattached.\nResult looks like following: https://gist.github.com/MFlisar/9d0be636fd5868338d300d400a3367a0\nThis is what I call if my service stops after I detached the view: https://gist.github.com/MFlisar/9d0be636fd5868338d300d400a3367a0#file-myviewgroupmvidelegateimpl-java-L241\nI think this should work\nBtw, it may at least make sense to support a service context in the PresenterManager wouldn't it? This way I could enable keepPresenterDuringScreenOrientationChange in my MyViewGroupMviDelegateImpl without the need of copying this class as well\n. ",
    "sevar83": "Well, now I made it compilable at least...\nval loadFeed: Observable<PartialStateChanges> = RxJavaInterop.toV1Observable(intent(RxInteropViewIntentBinder(TvFeedView::loadFeedIntent))\n                .toFlowable(BackpressureStrategy.DROP))\nBut don't know if it gonna work. I hope so. Otherwise I have to migrate the project to RxJava2.. Not sure what do you mean exactly, but intent() is a method of MviBasePresenter and it returns v2 Observable. If I use Interop on the View layer, I should change my view interfaces to v2. Anyway, now it compiles, let's see if it works. crosses fingers. I already tried with RxJava2 in the first place, but some libraries were RxJava1 only and I didn't know the existence of RxJavaInterop. I'm going to migrate as soon I stabilize it. Thanks. . Have a nice holiday, let's speak when you're back.. Sorry, I've just seen your reply. Quite a lot of emails coming from the Mosby maillist. My screen is a horizontally swipeable RV that loads page by page in both directions starting from an arbitrary page. The item is usually fullscreen and inside the item I have a CoordinatorLayout > CollapsibleLayout, NestedScrollView with a bunch of widgets and one or more nested RVs. I have to add even more UI. So, the \"meat\" of the presentation is inside the VeiwHolder. I already discarded the idea of item presenters. It became overly complicated and I couldn't keep the whole picture in my head. Instead I keep some of the logic in the VH but just the low level formatting details, animating childs, etc. The Presenter should not be responsible for all the view details, I guess.. I just use some flag in the view that is set to true on the first scroll. After rotation it's not a problem because the presenter is kept and the last rendered (not the initial one) ViewState is emitted again. So the scrolling happens just one time as it should be. This could work also with stuff like animated transitions. . Hey guys, @jhowens89 I've just seen your invite to come over here. Yes, nesting is one of the hardest problems I've faced. I've got 2 screens with nesting. They are decently stable but not as clean as I wish:\nViewPager controlled by BottomNav not tabs:\nhttps://lh3.googleusercontent.com/mEXnPiy31qt-kQdLR-djW4MRIHpP_kc4JYqoDz2jmBiRhpXHjoVRYMyleXGg5hiSVA=h900-rw\nViewPager with tabs:\nhttps://lh3.googleusercontent.com/MeY4tPIIEoBQJs8HWIvJ2JCirZy8v9su9XFGErnm6_tp9d-LjsPvVdvay00CLWfohHQ=h900-rw\nAll pages of the ViewPagers on both screens are separate MVI controllers (Conductor's equivalent of Fragment). Their parent containers are also MVI Controllers. Parent presenters know nothing about children and vice versa. States and Interactors also have no coupling between. Coupling is only between the parent and children Controller (View) side but as weak as possible. The important thing is that the parent state does not contain/include/is composed of the children states. For example in 2nd screen the whole state of the Search parent controller is just 2 fields - searchText: String and activeTab: Int. This was just my way to do it, there are other ways which look more perspective which I don't have time to explore. \nSome ideas\nMaking the parent state include also the children state, e.g. a SearchState including both pages for movies and TV. Then add a constructor parameter for the child controller - let's call it \"nested mode\" flag. Nested mode should prohibit the controller from acting standalone but only as a child of another controller. This means in \"nested mode\" child controller should not create its own presenter, the parent presenter will bind to its intents and the parent will call to child's render(). Basically this makes it a passive stateless Android widget with the handy render() method. It's parent who is responsible for everything. And when child is not in nested mode it's a plain normal MVI unit - with own presenter. In this way the controllers could be reused in various setups - imagine some complicated multi-view tablet layouts. Maybe it's possible with Mosby but I didn't tried this yet.\nRoot container \nThe idea is that no matter what screen it is - phone or tablet, there always should be a container not necessarily an MVI - responsible for correct placement of the child MVI units in every screen size and rotation. This should not be a responsibility of the MVI units itself. They must render their own data but \"someone from above\" should know how they are actually arranged or if they are visible at all. E.g. I have a very simple toast-like balloon at the bottom showing \"offline\" text when no connection. It's a separate MVI unit which I place it in all screens. The problem in some screens I put it above the BottomNav and in landscape the BottomNav may be missing. In other screens there is no BottomNav.\nI just released my app these days: https://play.google.com/store/apps/details?id=com.mediaclient.movielovers.mobile\nAny feedback and 5-stars won't be refused :) . @jhowens89, Hi, may I try your generator as I'm setting up a new project these days?. ",
    "jonathan-caryl": "Cool, just ping me & I'll rebase on top of your changes.. This had been added to sample-mvi but not to the other samples.. ",
    "Kyba1985": "ok, i had migrated to 3.0.0. \nNow, my question is, wich is the best practice to recreate the state of the backstack of the forced application closed like conductor demo application?. Seems that i'm missing some point; the conductor sample application can recover the backstack, my application can't. When i recover from stopped application, the savedinstancestate of main activity is null (strange!), in the demo app of conductor is !=null, and i think is used to recreate the backstack.\nIn my application the code that handle navigation from a controller to another is the same that is used in the demo conductor. So the only difference that i see in my code is that i'm using mosby. I'm not sure that the problem is mosby, but at the moment, the application works well in navigation from the controllers, but when i force stop the app, when i select it from apps in background the app restart from the first controller with in the mainrouteractivity savedinstancestate == null. My question is: who set the savedinstancestate to null? I can't understand. If i can't find the problem the only way is remove all dependencies from mosby and test the recreation of back stack with my own presenters, but is a lot of work and i want avoid it. \nAre you sure that i don't do anything for handle the recreation of backstack when i use mosby?. No , the application is not mine but is for a company that i work, is on private svn server.\nAnother clue for investigation: \ni'm going deeper in your sample code, the application can handle the backstack recover, so my another question is: wich are the classes that handle the recreation of the backstack when the app is recovered? I see in the createtaskcontroller : MvpViewStateController.\nhas MvpViewStateController class the responsability in the recreation backstack?\nAt the moment my controller base is \npublic abstract class BaseController extends MvpController\nwich is the difference of responsability between Mvpcontroller and MvpViewStateController ?. sure, now i post the mainactivity and application most important code:\nMAIN:\n```java\npublic class MainRouterActivity extends AppCompatActivity implements ActionBarProvider {\n......\n    private static final String TAG = \"MainRouterActivity\";\n    private Router router;\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    if (Build.VERSION.SDK_INT >= 21) {\n        getWindow().getDecorView().setSystemUiVisibility(\n                View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n                        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\n    }\n\n    setContentView(R.layout.main_router_activity);\n    ButterKnife.bind(this);\n\n\n    ApplicationStatus.initialize(this.getApplication());\n    if (savedInstanceState != null) {\n        Log.d(\"initapp\", savedInstanceState.toString());\n    } else {\n        Log.d(\"initapp\", \"saveinstancestate is null\");\n    }\n    router = Conductor.attachRouter(this, flRootContainer, savedInstanceState);\n    if (!router.hasRootController()) {\n        RouterTransaction firstTransaction = RouterTransaction.with(new BrowserViewController());\n        firstTransaction.tag(BrowserViewController.TAG_ROUTER);\n        router.setRoot(firstTransaction);\n    }\n\n}\n\n@Override\npublic ActionBar getSupportActionBar() {\n    return super.getSupportActionBar();\n}\n\n@Override\npublic void onBackPressed() {\n    if (!router.handleBack()) {\n        super.onBackPressed();\n    }\n}\n\n@Override\nprotected void onSaveInstanceState(Bundle outState) {\n    Log.d(\"state\", \"activity saveinstancestate\");\n    super.onSaveInstanceState(outState);\n}\n\n}\n```\nAPPLICATION:\n\ni don't see strange code in the application code, only that is multidex application.\n. Finally i got the issue, not mosby , not conductor, but my first class (a browser like chrome) and his complex saveinstancestate that break the save of the state of the application ... when i replace that class with another fake controller the app works well. Thanks for your time and your patience @sockeqwe \n . ",
    "komok2013": "Thanks for the quick response\nThis line solved the problem:\n@Override public Observable loadNextPageIntent() {\n    return RxRecyclerView.scrollStateChanges(recyclerView)\n        .filter(event -> !adapter.isLoadingNextPage())\n        .filter(event -> event == RecyclerView.SCROLL_STATE_IDLE)\n        .filter(event ->\n            layoutManager.findLastCompletelyVisibleItemPosition() == adapter.getItems().size() - 1\n        )\n        .filter(event -> !swipeRefreshLayout.isRefreshing())\n        .map(integer -> true);\n  }. And if you do not complicate. Could you give an example of combining categories if the pull-to-refresh event comes with products of an already existing category (which was already displayed).. ",
    "olshevski": "I understand that it is very unlikely considering all conditions that should be met. But still it is a piece of code that feels uncomfortable c:\nI guess deprecating isViewAttached() may prevent propagation of this code snippet. But I still can imagine someone writing their code this way:\nif (getView() != null) {\n    getView().doThis();\n    getView().doThat();\n}\nIt seems to be a common practice among various programmers.\nifViewAttached(view -> view.showHello(...)); seems fine.\nPersonally, I just don't see the point in this WeakReference-bulletproofing of someone else's bad code. But that's a whole another \"ideal world\" discussion.. ",
    "jshvarts": "In Kotlin, can if checks be avoided and safe call operator be used instead? view?.doThis(). Does not look like Issues is the right place to discuss it. Closing.. No problem, Hannes! Having implemented custom MVP solutions before, I am really impressed how Mosby+Conductor simplify it. I hope that the sample code will help increase adoption of the library!. Ok. How do you plan to handle the new artifact name in Gradle dependencies? Upload a duplicate one with a correct name starting with this version and keep the old one for current and older versions?. Note: to test the dependency name change, I confirmed that Gradle can find it.  \ncompile 'com.hannesdorfmann.mosby3:mvp-queuing-presenter:3.1.0'\n\n. If Presenter is the only thing you inject into your View, you can have the Component expose it so you can inject the Presenter itself in createPresenter(). \n    override fun createPresenter() = DaggerSearchComponent.builder()\n        .appComponent(GithubApp.component)\n        .searchModule(SearchModule())\n        .build()\n        .presenter()\n\nSee example https://github.com/jshvarts/MosbyMVP/blob/master/conductor-dagger-sample/src/main/java/com/jshvarts/mosbymvp/searchrepos/SearchViewController.kt\nAlso, you don't need to include both mvp and viewstate Gradle dependency. The latter is sufficient.\n. If you look at my example above, you will see that my Presenter gets instantiated by Dagger and it takes parameters via constructor injection. . I believe all you need to do is to have this done:\n@Override\npublic LandingPagePresenter createPresenter() {\n    return ((MyApplication) getApplicationContext()).getAppComponent().landingPagePresenter();\n}\n\nDo not have any Dagger code in the onCreate() and do not declare LandingPagePresenter presenterinstance variable in your Activity (View). Whenever you need to reference the Presenter in your Activity, just call presenter.foo(). That's why I asked in my first reply above if the Presenter was the only one dependency that needs to be injected.\nSomething like this should work (I am converting it from Kotlin as I type):\nIn your Dagger Component:\nvoid inject(LandingPageActivity activity);\n\nIn your LandingPageActivity:\n@Inject\nLandingPagePresenter myPresenter;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    ((MyappApplication) getApplicationContext()).getAppComponent().inject(this);\n    super.onCreate(savedInstanceState);\n    ...\n}\n\n@Override\nvoid setPresenter(LandingPagePresenter presenter) {\n    this.presenter = presenter\n}\n\n@Override\nLandingPagePresenter createPresenter() {\n    return myPresenter;\n}\n\n. Thanks! I see your point about giving users flexibility with the API. I am not advocating adding a MviView#render(state), just advocating a separate marker interface MviView. \nIf you had started Mosby with MVI and then added MVP, would you end up with MvpView interface for both? Unlikely. It seems like the interface was just re-used but the name just irks me. Sure I can create my own MviBasePresenter just to get around it\u2014it just seems like more code I\u2019d like to write to get around this small but visible (to me) issue. \nAnyway, not a huge deal. Feel free to close this. . I see! How about a parent interface Presenter or BasePresenter to be extended by MvpPresenter and MviPresenter and parent marker interface View or BaseView to be extended by MvpView and MviView?  Perhaps the new interfaces could live in the presentermanager module or a new module common or presentermanager could be renamed to common.. Removed javadoc reference to a non-existing ActivityMvpDelegateCallback. ",
    "CLD1994": "Thank you, I try!. This is just the client to ignore the results\uff0cServer or have received a message and returns the results\u3002\nIf it is uploading operation\uff0cHow do I cancel it?. my english is very poor, expression is not clear.\nI am using retrofit, unsubscribe can cancel the request.\nDisposable disposable = mLogin.buildUseCaseObservable().subscribe();\n//stops the http connection on unsubscribe\ndisposable.dispose();\nmy intent is as follows\nintent(new ViewIntentBinder<LoginView, Boolean>() {\n            @NonNull\n            @Override\n            public Observable<Boolean> bind(@NonNull LoginView view) {\n                return view.cancel();\n            }\n        })\n@Override\n    public Observable<Boolean> cancel() {\n        return Observable.create(new ObservableOnSubscribe<Boolean>() {\n            @Override\n            public void subscribe(final ObservableEmitter<Boolean> e) throws Exception {\n                mProgressDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {\n                    @Override\n                    public void onCancel(DialogInterface dialog) {\n                        dialog.dismiss();\n                        if (!e.isDisposed()){\n                            e.onNext(true);\n                        }\n                    }\n                });\n            }\n        });\n    }\nbut use mvi , I can't get requestObservableDisposables.\n. ```\npublic class Login extends UseCase{\nprivate DataSource mDataSource;\n\n@Inject\npublic Login(DataSource dataSource) {\n    mDataSource = dataSource;\n}\n\n@Override\npublic Observable<ResponseValue> buildUseCaseObservable(RequestValues requestValues) {\n    return mDataSource.getRemoteDataSource()\n            .getOauthAPI()\n            .requestToken(...)\n            .subscribeOn(Schedulers.io())\n            .observeOn(AndroidSchedulers.mainThread())\n            .map(new Function<Oauth, ResponseValue>() {\n                @Override\n                public ResponseValue apply(@NonNull Oauth oauth) throws Exception {\n                                        ...\n                }\n            })\n            .startWith(ResponseValue.newBuilder().withOnLogin(true).build())\n            .onErrorReturn(...);\n}\n\npublic static class RequestValues implements UseCase.RequestValues{\n           ...\n}\n\npublic static class ResponseValue implements UseCase.ResponseValue{\n       ...\n}\n\n}\n. Yes, I do. but There is no disconnect http.\nThere is no way to just lifted loginRequesObservable's subscription And do not damage Observable stream?\nintent( (view) -> { return view.login(); } )\n        //retrofit: Observable requestToken(...);\n        .flatMap( (Function) (loginRequest)  -> { return loginRequesObservable } )\nintent( (view) -> { return view.cancel(); } )\n```. Thank you very much!\nI'll according to you recommend to do so\n. Ok, I respect you very much, I will try to learn from you!. ",
    "friederbluemle": "@sockeqwe Sorry, forgot about .travis.yml - I just amended my commit.\nRegarding squash/rebase on GitHub: Using this new feature will rewrite the commits on the GitHub server, i.e. the commit hash will change, and what ends up in the repo is not what I have in my local branch. This will make it necessary to force delete my local branch, even after merging all changes into master (Git will not see the branch as fully merged). Granted, using -D instead of -d when deleting the branch is just a minor inconvenience. Slightly more unsettling in that regard is the fact that without manually checking every line, I cannot be 100% sure that all of my force deleted changesets made it into the repo.\nBottom line is, if you want me to squash some/all of the commits, I'll gladly do so, but I'd rather perform the Git operation myself, and force push the updated branch. :). You're welcome.. btw, you used a squash merge (I think there is a little arrow next to the merge button to change it to regular merge). This is what I see in my local repo now (on the latest master branch):\n$ git branch -d update-project \nerror: The branch 'update-project' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D update-project'.\nNext time, please let me know if you want me to squash the commits. Thanks :). No worries :) Thanks for this awesome project :+1:. ",
    "gaurav-mishra8": "Well the error was in building module sample-mail only. Below is the stack trace\nCaused by: java.lang.NoSuchFieldError: MAP\n    at dagger.internal.codegen.ProvidesMethodValidator.validate(ProvidesMethodValidator.java:115)\n    at dagger.internal.codegen.ModuleProcessingStep.process(ModuleProcessingStep.java:79)\n    at dagger.shaded.auto.common.BasicAnnotationProcessor.process(BasicAnnotationProcessor.java:228)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:794)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.discoverAndRunProcs(JavacProcessingEnvironment.java:705)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$1800(JavacProcessingEnvironment.java:91)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1035)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1176)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1170)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:856)\n    at com.sun.tools.javac.main.Main.compile(Main.java:523)\n    ... 103 more\n```\nSeems like some dagger2 issue.\nGot it fixed by updating Dagger2 version to latest : 2.10 .Not quite sure about the reason for this error.\nThanks it is fixed now . You can close this issue. ",
    "erikdewit87": "I encountered this as well. Got stuck for a while because my mind processed the stacktrace as the same and I stopped reading.. Just happens that the most valuable info is stated in the code block right after the stacktace: \n\nSeems like some dagger2 issue.\nGot it fixed by updating Dagger2 version to latest : 2.10 .Not quite sure about the reason for this error.. \n",
    "dawidhyzy": "My app, which I migrated from Mosby 2.0.\nIt has few classes which implements Activity(Fragment)MvpDelegateImpl.. ",
    "StephaneBg": "Hello,\nI can confirm that I have exactly the same issue when I try to release my app with Proguard.. I've just tried it and it worked fine. Thanks for the quick workaround and the library of course!\nDo you plan to release a new version soon?. ",
    "Rackles": "Hi,\nthis fixed it. \nThank you for your help. . I have to apologize. I made a mistake when testing the bug. I left my temporary fix in the application while testing the updated version of mosby. (I was to eager to test the new version....)\nI'm terribly sorry but this didn't fix my problem.. I redownloaded the snapshot. My problem still persists. . I'm sorry but I can't make the whole code available. \nEssentially the code in stackoverflow shows the components that are causing my problem. Specifically in 3 out of 4 times the render()-function does noto get called with CardViewState.CardBackState. \nI hope this helps. . This log is not correct. Every time the render() function doesn't get triggered, the state also does not get logged. \nSo if I understand you correct this is not a mosby bug. . ",
    "jhowens89": "Did you ever encounter this issue again? I may be experiencing it as well. I'm a bit new to rxjava so I'll let you be the judge.\nIn DualTeamScoringFragment\noverride fun connectDataIntent(): Observable<Boolean> {\n        return Observable.just(true).doOnNext({ Timber.d(\"connectDataIntent doOnNext\") })\n    }\nIn DualTeamScoringPresenter\noverride fun bindIntents() {\n        Timber.e(\"bindIntents id=${id}\")\n        Timber.e(\"interactor_id: ${dualTeamScoringInteractor.id}\")\n        val connectDataIntent = intent(DualTeamScoringView::connectDataIntent).doOnNext { Timber.d(\"preenter connectDataIntent doOnNext\") }\n                .switchMap {\n                    Timber.d(\"connectDataIntent switchMap ${id}\")\n                    dualTeamScoringInteractor.dataSourceObservable()\n                }.doOnError { Timber.e(it,\"Fatal error occurred\") }\n                .onErrorReturnItem(DualTeamScoringViewAction.DataLoadingFailed() as DualTeamScoringViewAction)\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n    val initialState = dualTeamScoringInteractor.getInitialState()\n\n    subscribeViewState(connectDataIntent.scan(initialState, this::viewStateReducer)\n            .doOnNext { Timber.e(\"subscribeViewState doOnNext viewState: ${it.toString()}\") }\n            .distinctUntilChanged(), DualTeamScoringView::render)\n\n}\n\nFrom my perspective, it certainly sounds like a race condition similar to what Rackles described. I always see \"connectDataIntent doOnNext\" in my logs, but it's uncertain if I'll see \"preenter connectDataIntent doOnNext\". Matter of fact, I would say most times I won't see \"preenter connectDataIntent doOnNext\" the first time -- when I first start my app and get past the splash screen. I usually see it after I switch to another fragment and reload this same fragment. Nothing is retained and those id-related logs you see is me tearing apart my dagger scoped implementations to make sure I was getting new instances. It was hard, but not super uncommon to reproduce when I commented things out.  Despite many efforts, I could never reproduce in debug mode (I was trying \nto log \"intentRelaysBinders.size\" and calls to \"reset()\". A last attempt band-aid for the day:\nObservable.just(true).delay(200, TimeUnit.MILLISECONDS)\nseemed to stop the problems. Any insight?. Ha, definitely don't have to apologize for creating such a convenient library. I'll try to post relevant code but at the interactor level everything is injected via dagger so I'll try to post what's relevant and you can ask for particulars.\nI'm not currently setup with a device but I'll get you those logs within the day. Here are files I see as relevant. Let me know if you need more.\ndebug_mosby.zip\n. So I think I solved the problem, but I say think because I'm still not sure why it would be a solution. \nReplacing \ndualTeamScoringInteractor.dataSourceObservable()\nwith\nObservable.just(DualTeamScoringViewAction.DataCurrentlyLoading)\ndidn't change anything. In fact, the mere existence of DualTeamScoringInteractor in the constructor would be enough to cause this behavior. Here is an example of what I'm talking about: \n```kotlin\nclass DualTeamScoringPresenter @Inject constructor(val dualTeamScoringInteractor: DualTeamScoringInteractor) : MviBasePresenter() {\noverride fun bindIntents() {\n    val connectDataIntent = intent(DualTeamScoringView::connectDataIntent).doOnNext { Timber.d(\" preenter connectDataIntent doOnNext\") }\n            .switchMap {\n                Observable.just(DualTeamScoringViewAction.DataCurrentlyLoading() as DualTeamScoringViewAction)\n            }.observeOn(AndroidSchedulers.mainThread())\n            .subscribeOn(Schedulers.io())\n\n    val initialState = DualTeamScoringViewState.BLOCKED.BLOCKING_REFRESH();\n\n    subscribeViewState(connectDataIntent.scan(initialState, this::viewStateReducer)\n            .doOnNext { Timber.e(\"subscribeViewState doOnNext viewState: ${it.toString()}\") }\n            .distinctUntilChanged(), DualTeamScoringView::render)\n\n}\n\nfun viewStateReducer(viewState: DualTeamScoringViewState, viewStateAction: DualTeamScoringViewAction): DualTeamScoringViewState {\n    Timber.e(\"viewState: ${viewState.toString()} viewStateAction: ${viewStateAction.toString()}\")\n\n    return when (viewStateAction) {\n        is DualTeamScoringViewAction.DataAvailable -> return DualTeamScoringViewState.NOT_BLOCKED(primaryScoringBannerModel = viewStateAction.primaryScoringBannerModel, announcementBannerModel = viewStateAction.announcementBannerData, sponsorLogoUrl = viewStateAction.sponsorLogoUrl)\n        is DualTeamScoringViewAction.DataNotYetAvailable -> return DualTeamScoringViewState.BLOCKED.NO_DATA_TO_SHOW()\n        is DualTeamScoringViewAction.DataLoadingFailed -> return when(viewState) {\n\n            is DualTeamScoringViewState.NOT_BLOCKED, is DualTeamScoringViewState.BLOCKED.NO_DATA_TO_SHOW, is DualTeamScoringViewState.BLOCKED.BLOCKING_ERROR -> return viewState\n            is DualTeamScoringViewState.BLOCKED.BLOCKING_REFRESH -> return DualTeamScoringViewState.BLOCKED.BLOCKING_ERROR()\n        }\n        is DualTeamScoringViewAction.DataCurrentlyLoading -> return when(viewState){\n\n            is DualTeamScoringViewState.NOT_BLOCKED -> return viewState\n            is DualTeamScoringViewState.BLOCKED -> return DualTeamScoringViewState.BLOCKED.BLOCKING_REFRESH()\n        }\n    }\n}\n\n}\n```\nSo what fixed it? It was the solution you suggested here: https://stackoverflow.com/a/43717278/8121863\nI sorta fumbled into that solution and after I saw it working I revisited the stackoverflow thread to see if Rackles had been doing the same thing as me. It makes no sense to me. Sure my DualTeamScoringInteractor injects an item that will cause DefaultLoader to be created. And on creating of default loader you see that the init() method will kick off a subscription of a loader. But when I stubbed in your suggested test, how are these streams even connected? Also these subscriptions are preceded by .subscribeOn(Schedulers.io()) in DefaultLoader.\nI tried hard to reproduce some version of this with your EagerView, EagerPresenter, and an EagerFragment -- butchering it even to the point where I started trying to mirror my DualTeamScoring setup rather than your test (using my dagger supplied interactor and such), but even then I had no luck reproducing.\nAny clue what might have been happening?. That's great to hear. I'll keep an eye out for an update.. I ended up doing this override, but the reasoning wasn't configuration changes. \nMy scenario is I have a container-like activity with a fragment that takes up this whole activity. Inside this fragment I have unrelated views and a FragmentStatePagerAdapter. This FragmentStatePagerAdapter obviously contains fragments and inside these view pager fragments I have a MviLinearLayout. When switching the adapter around, the fragments get destroyed, the views inside the fragment get destroyed, but the presenter is retained because its default behavior is to rely on the activity's state.\nAny suggestions on the path forward? The way I see it, I can just say I don't care about retaining the presenter (not the end of the world) or I could have my view group delegate get a reference to my fragment and call FragmentMviDelegateImpl.retainPresenterInstance. I know you mentioned using fragment adapters a lot in your production app, so in your opinion is this a route worth going down or one I should avoid if possible?. I thought about going more programmatically or finding a place to sneak injects in early in the inflation process, but breaking the xml part of our toolset is a dealbreaker and even if I was fine with it I wouldn't want to put my coworkers through that.\nIt's funny you mention that talk. I was discussing a link to the slides with another guy on reddit and it's what motivated me to write out this post. I really hope they post the video soon. I've tried to read through the slides, but I don't learn very well from bullet points lol\nSo this weekend, I've finally decided to get my feet wet with the Coordinators and I'm actually really encouraged by these early results. I actually forked the Coordinators library and added a Coordinators::installRecursiveBinder where I took the binder and wrapped it in this old gist from JW: https://gist.github.com/JakeWharton/7189309\nIt works like a charm and picks up everything even with all the view pagers and nested goodness. So I got the \"coordination layer\" I wanted because there wasn't a need to worry about porting my component around. \nI decided to stop using the MVI delegates for now as they were causing me issues related to the timing of the lifecycle and delegate's createPresenter. So at this point I have no presenter code in my layouts, but I obviously need to hook up my business logic and view states somehow. But now thanks to view my tree traversal which has me traversing MVI layouts looking like this:\nclass DualTeamBannerLayout : RelativeLayout(), DualTeamBannerView\nand the fact all my mosby presenters look like:\nclass DualTeamBannerPresenter: MviBasePresenter<DualTeamBannerView, DualTeamBannerViewState>()\nIt makes it really convenient to figure out what presenters should be going where. In fact, I've started pulling the implementation out and sticking it in a dagger module: \n@Binds\n    @IntoMap\n    @ClassKey(DualTeamBannerLayout::class)\n    fun coordinatorScoring(coordinate: PresenterProvidingCoordinator<DualTeamBannerPresenter, DualTeamBannerView>): Coordinator\nI can be creative with my keys (the Coordinators examples even use xml) and I'm still trying to figure out the best system. I think having this layer entirely separate will give me a lot more options as far as swapping things in and out because my navigation/UI layer and business logic/plumbing layer now have a greater separation of concerns. There are still a lot of issues I need to keep thinking through since this is a pretty big change, but I feel excited about the direction.\n. I've been really busy like @sockeqwe, but I've not forgotten about this thread. I hope to create a detailed post this weekend. I've been putting in a lot of work toward my Coordinator approach and I'm hoping for it to be in state to merge into the rest of my project soon. The one thing I'm stumbling over is ridiculous Ad loading/refresh business logic imposed by the client. But on the positive side, it's making me fully flush out problems I might later encounter.\n@sevar83, I wasn't aware you and Bacillus were the same person! Always kinda funny when that realization happens. I've spoke to you as /u/reconcilable on reddit too. You actually sparked my current coordination layer approach when I was digging around on the Dagger issue tracker and read your comment here: https://github.com/google/dagger/issues/720\nOur approaches seem quite similar in many ways with most of the differences stemming from the fact that you're using conductor and I'm using fragments. I use fragments because the new architecture components give me a lot of lifecycle tools. I use ViewModels to hold my dagger components and it gives me an easy way to determine to determine whether my fragment or activity is getting destroyed permanently or is it just a configuration change. My viewmodels also inherit from LifecycleObserver and I hope to use that to leverage some kinda Relay setup to coordinate items (such as my ads) that would normally rely on lifecycle logic not available to a viewgroup. The ViewModels of the children contain subcomponents and being able to tie that to an independent lifecycle makes scoping pretty easy.\nThe main differences that stick out to me is that your equivalent of my fragments, your controllers seem to do a lot more. My controllers don't have presenters and calling my child controllers' render method wouldn't be applicable because my controllers don't have view code in them. My controllers currently have the following responsibilities:\n\nCreate ViewModel\nImplement method called provideComponent\nBind CoordinatorProvider (which is supplied via the component)\nAlter action bar (if necessary, parent only)\nContain FragmentStatePagerAdapter (if necessary, parent only)\nCoordinating edge cases (if necessary)\n\nMy focus is keeping my MVI units free from \"coordination\" code. I'm fine with my controllers not being reusable if I accomplish this goal because they're fairly free from any complicated logic that can't be copy/pasted and then tweaked a bit.\nSo that being said, I'm not sure I'm an immediate fan of the parent calling the child's render, but I would need to know more about what your controllers do (what's in that render method) and what is the problem you're trying to solve with the parent-child controller relationship?\n. @sockeqwe Did you ever come to a conclusion about #242? I was still very new to RxJava back then and I'd like to think the code I write down is less problematic, but I can still replicate this issue. \n```\nclass MatchPlayRoundSelectorPresenter @Inject constructor(val interactor: MatchPlayRoundSelectorInteractor) : MviBasePresenter() {\n    override fun bindIntents() {\n        val loadMatchPlayRoundSelectorDataIntent = intent(MatchPlayRoundSelectorView::connectDataIntent)\n                .doOnNext { Timber.e(\"TESTING_BEFORE 1\") }\n                .switchMap { interactor.loadMatchPlayRoundSelectorData() }\n                .doOnNext { Timber.e(\"TESTING_BEFORE 2\") }\n                .subscribeOn(Schedulers.io())\n                .doOnError { Timber.e(it,\"Fatal error occurred\") }\n    val selectNewRoundIntent = intent(MatchPlayRoundSelectorView::selectNewRoundIntent)\n            .map { (round, page) -> interactor.newRoundSelected(round, page) }\n\n    val initialState = interactor.getInitialState()\n\n    val allIntents = Observable.merge(loadMatchPlayRoundSelectorDataIntent, selectNewRoundIntent)\n            .observeOn(AndroidSchedulers.mainThread())\n\n    subscribeViewState(allIntents.scan(initialState, ::viewStateReducer)\n            .distinctUntilChanged(), MatchPlayRoundSelectorView::render)}\n\n} \n```\nThe other side of the equation looks like: \noverride fun connectDataIntent(): Observable<Unit> = Observable.just(Unit)//.doOnNext { Timber.e(\"TESTING_BEFORE 0\") }\nIf I run this code, I'll get the following relevant logs:\n02-22 17:46:12.605 7068-7068/com.tour.pgatour E/MatchPlayRoundSelectorL: TESTING_BEFORE render com.tour.pgatour.match_play.leaderboard.match_play_round_selector.MatchPlayRoundSelectorViewState$WithoutData@7830fd3\nIf all I do is uncomment that doOnNext: \n02-22 17:44:57.205 6216-6216/com.tour.pgatour E/MatchPlayRoundSelectorL: TESTING_BEFORE render com.tour.pgatour.match_play.leaderboard.match_play_round_selector.MatchPlayRoundSelectorViewState$WithoutData@fb867e3\n02-22 17:44:57.206 6216-6216/com.tour.pgatour E/MatchPlayRoundSelectorL: TESTING_BEFORE 0\n02-22 17:44:57.206 6216-6216/com.tour.pgatour E/MatchPlayRoundSelectorP: TESTING_BEFORE 1\n02-22 17:44:57.368 6216-6216/com.tour.pgatour E/MatchPlayRoundSelectorP: TESTING_BEFORE 2\n02-22 17:44:58.099 6216-6216/com.tour.pgatour E/MatchPlayRoundSelectorL: TESTING_BEFORE render WithData(viewData=MatchPlayRoundSelectorViewData(roundPlayTabs=[RoundTab(config=TabConfig(text=Round 1, backgroundColor=-16777216, textColor=-1, selectedBackgroundColor=-1, selectedTextColor=-16777216), option=com.tour.pgatour.shared_rel....\nIt's like I'm so close to the boundary of the race condition that even a log will push it over. Thoughts?\n. @MFlisar, I went through a very similar line of thinking even as far as considering templates. I ended writing a generator with KotlinPoet and it has worked out fantastically. Here's an example of what my generator script looks like:\n```\nval destinationData = DestinationData(\"match_play.leaderboard.xxx\")\n         val breakingNewsBanner = MviUnitInput.New(\"Break News Banner\",\n                 layoutType = LayoutType.LINEAR)\n         val liveBanner = MviUnitInput.Existing(\"P Cup Live Banner\",\n                 packageName = \"com.tour.pgatour.dual_team.scoring.live_banner\")\n         val matchPlayBanner = MviUnitInput.New(\"Match Play Banner\",\n                 layoutType = LayoutType.RELATIVE)\n     val tournamentHeader = MviUnitInput.Existing(\"P Cup Tournament Header\",\n             packageName = \"com.tour.pgatour.dual_team.scoring.tournament_model\")\n\n     val weatherBroadcast = MviUnitInput.Existing(\"Weather And Broadcast\",\n             packageName = \"com.tour.pgatour.dual_team.scoring.weather_broadcast\")\n\n     val matchPlayRoundSelector = MviUnitInput.New(\"Match Play Round Selector\",\n             layoutType = LayoutType.LINEAR)\n\n     val roundPlayMatchSummaries = MviUnitInput.New(\"Round Play Match Summaries\",\n             layoutType = LayoutType.RELATIVE)\n\n     val knockOutMatchSummaries = MviUnitInput.New(\"Knockout Match Summaries\",\n             layoutType = LayoutType.RELATIVE)\n\n\n     val feature = FeatureData(featureName = \"Match Play Leaderboard\",\n             topComponentConfig = TopLevelOptionConfig(\n                     uiOption = UiOption.FRAGMENT,\n                     mviUnits = listOf(breakingNewsBanner,\n                             liveBanner,\n                             matchPlayBanner,\n                             tournamentHeader,\n                             weatherBroadcast,\n                             matchPlayRoundSelector),\n                     refreshActionBar = true,\n                     showInterstitial = ShowInterstitial.Yes(\"PAGE_LEADERBOARD\".toConstantsClassName())),\n             childComponents = listOf(\n                     ChildOptionConfig(listOf(\n                             roundPlayMatchSummaries\n                     ),\n                             childFeatureName = \"Round Play Match Summaries\",\n                             indexed = true),\n                     ChildOptionConfig(listOf(\n                             knockOutMatchSummaries\n                     ),\n                             childFeatureName = \"Knockout Match Summaries\",\n                             indexed = false)),\n             bundleArgs = listOf(TourCodeArg, TournamentIdArg))\n\n     FeatureGenerator(destinationData, feature).generateFeature()\n\n```\nThis will build 5 MVI units, reference 3 existing ones, build 3 fragments, and set up a heavy amount of dependency injection for the the whole screen. I would highly recommend the approach. My coworkers use it as well and it greatly increased productivity.  Here's how the actual generator portion of the module are laid out:\n\n. ",
    "skykelsey": "Thanks so much for fixing this. I was having the same issue, and it appeared that when I added some logging it started to work. Must have been some sort of race condition?\nI've verified the issue is present in 3.1.0 and fixed in 3.1.1-SNAPSHOT. I'm having the same problem. It seems the problem is caused by using view state to accomplish navigation as a side effect, as @sockeqwe mentioned. I am not a big fan of passing the Activity into the Presenter though, so I will try out the approach @andreiverdes outlined.\nWould it be feasible to allow certain View States to be consumed instead of replacing the previous one?. Thanks @sockeqwe I'm interested as well when you find the time.. ",
    "chennyshan": "+1, and Release package 3.0.2 is ok. I tried the previous command line, but got the same error as that from android studio. FYI\n```\nFAILURE: Build failed with an exception.\n\n\nWhat went wrong:\nExecution failed for task ':sample-mail:compileDebugJavaWithJavac'.\n\njava.lang.NoSuchFieldError: MAP\n\n\n\nTry:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\n\nBUILD FAILED\n``. Mosby Version 3.1.0\nAfter splittingdetachView(boolean retainInstance), it looks like that another problem appears when \"Don't keep activities\" is enable: maybe some presenter will never be removed.\nSuppose that we have the following Activities: A -> B -> C (C foreground). To Activity B,detachView()will be invoked, butdestroy()will not, and it's presenter is retained in PresenterManager now. Then we call start the Activity A withFLAG_ACTIVITY_CLEAR_TOP` from C. We know that Activity B won't be restored, so it's previous presenter will be left and looks like we have no chance to remove it later.\nAny thoughts?\nThanks for this great library.. @sockeqwe .Thanks for your reply.\nI attached the demo and logcat output as following:\n\nMosbyDemo.zip\n. @sockeqwe , I really want to know that what do you think about my question. \nThanks a lot. ",
    "BrianOdisho": "@sockeqwe any general idea on what could be causing this issue?. ",
    "roshanpisharody": "The intent method in the presenter takes the observable returned by the view. I added a share operator on the button click observable so that I could have two subscribers one for updating ui immediately and other for network operation. But with that setup the UI updation code never executes.\n. Thanks. Your Suggestion works. \n. I would definitely going to do that. But stackoverflow Blocked me for one day. I will post this question tommorow. . ",
    "larten": "I think there is one good reason to implement this idea: We could leave the lot of boring PublishSubjects from the view (and interface of view) which are presents for every actions.\nAnd actually we do this merge() before we pass the Observable to the subscribeViewState() method.\nOh and one more. As I wrote in an another issue, I believe it's can be necessary to unsubscribe from a few heavy resources when we navigate to another screen and rescubscribe on resume. With own lifecyclehandling it seems more easy to do this.\n@sockeqwe With your example it seems more like MVVM, not MVP. Or not? Only the view knows the presenter, presenter doesn't need to have reference to the view.\n\"Basically, Mosby will just be used to keep presenter through screen orientation changes.\"\nAnd I don't agree with this. I mean this is an awesome tool and knowledge or way to organise your code (presentation layer) and manage viewstates. Sure!\nHere is a viewstate. The data and list properties are coming from different resources or refreshing in different times.\njava\npublic class MyViewState {\n    private boolean loading;\n    private String data;\n    private ArrayLis<MyObject> list;\n    private Throwable throwable;\n}\nAnd here is the render method in the view:\njava\n@Override\n    public void render(MyViewState viewState) {\n        if(viewState.isLoading()) {\n            // loading handling\n        } else if(viewState.getError() != null) {\n            // render data and list\n        } else {\n            // error handling\n        }\n    }\nIf I trigger an action (press button, anything) and refresh the data property in the viewstate with the reducer, I will also reload the UI part where I show the list property when I'm rendering.\n. No it's okay, sorry for that and thank you for your time!\nHere is an example: (but in the example contains only 3 states of viewstate (loading, data loaded and error)\nhttps://gist.github.com/larten/10c35f46a11d089e3f321d46aa40e04a\nEvery time when a state will be changed you will render all views again. Imagine, you have a data class with 20 fields and after some interactions, only one text field changed. Instead of updating one single TextView you will re-render all views.\nI think it's unnecessary to update every view. We should update on the UI only what changed (like DiffUtil on RecyclerView).\nMaybe I should use subclasses of my EpisodeDetailsViewState for example and when I'm rendering I should make a difference depends on class. But it seems not too elegant solution.\nI try to find something like the ObservableField in the MVVM databinding solutions. When you change a property in the viewstate you notify the subscribed UI elements only, if the data changed.. Android Studio supports own code templates by default. You can find a lot of articles about the creation.\nI have a few base classes based on mosby library and I can create the fragment, presenter, viewstate classes only with set the feature name.. You can create base classes and the team/projects can it use as a submodule or library.\nWith generics and abstract methods/variables it's possible and reduce boilerplate code.. ",
    "emanzanoaxa": "Thats correct, but I cannot return a null presenter on the createPresenter() method because MVI lib needs it. That's why I need to return a no-op mocked presenter, but If I do that the main thread gets blocked by something related to mosbys base MVI classes.. Unfortunately is not open source, I'll continue looking to see if I find the problem. I'll post here if I find something, thanks for your reply (and for this great lib) :). Sorry It was not a mosby related issue, with some emulators/devices the UI get blocked (I suppose because some other dependency of the app was blocking the UI on the emulators). I was trying with a new test app and the MVI lib and all was working fine. So this can be closed.\nThanks anyway :). ",
    "qwert2603": "@dimsuz but some flags may be lost in a situation when several ViewStates will be created while Fragment (or Activity) is recreating and only last ViewState will be rendered when View is reattached.. @sockeqwe @dimsuz Thank You for your comments.\nLet's imagine the situation when:\n View is detached\n ViewState_1 with showSnackbar=true is created\n ViewState_2 with showSnackbar=false is created, flag is reset as result of calling clearTransientState()\n View is attached\n* ViewState_2 is rendering.\nIn such situation flag showSnackbar=true is lost.\nAnother approach when we have intent dismissSnackBarIntent(). There may be a situation when:\n ViewState_1 with showSnackbar=true is created\n ViewState_1 rendering begin\n ViewState_2 is created and it have showSnackbar=true like in ViewState_1\n ViewState_1 rendering end\n dismissSnackBarIntent() is triggered\n ViewState_2 is rendering. Snackbar is showing again.\nOf course, nothing wrong is we show Snackbar twice. But there may be more important events like moveToAnotherScreen or showCormirmationDialog.\n\nI'm also experimenting around with the idea of using Rx backpressure to disallow such things like calling render(newState) while \"old state is not entirely finished with rendering.\n\nThis may solve the problem, but we can't wait seconds for Snackbar's dismissing or animation's finish.\nAlso I'd like to say that OneShotFlag becomes immutable after first call OneShotFlag#getFlag(vsId: Long). It returns same value for same ViewState_Id. Moreover var readId: Long? = null can be private.. @sevar83 I used such approach before, but refused because I try to make View as passive as possible. And this is duplicating flags in ViewState and View (represented by Fragment or Activity).. > Sounds like the expected behavior for me\nIt all depends on use case.\nLooks like there is no simple way to solve \"Snackbar's problem\". Anyway we should write some additional code :). @sockeqwe ok, but unit test are important, too.\nI'll try to write some utit tests for presenter from demo app later.. I agree with it.\nLooks like we need to change basic approaches of developing apps, because MVI is different from others MV* patterns. But the game is worth candle.. @dimsuz presenter's test from sample app doesn't require emulator. ",
    "md3kung": "So when memory is low, android kills the process that runs the activity and not the activity itself. Now that is something I wasn't aware of ...\nThe thing is, this misconception is spread all over the internet. As a result lot of production ready apps survive that use case. Although, after reading Dianne Hackborn's comment, I do not understand the purpose behind that option anymore.\nSilly thing is that, I found out that some Android ROMs use that option for energy saving purposes by default : https://www.reddit.com/r/Xiaomi/comments/5guhh9/why_is_miui_8_so_aggressive_about_killing/davckqn\nI think it would be better if Mosby reflects the right retainInstance value when the Activity is being destroyed in this case.. ",
    "HanCheng": "@sockeqwe  In my experience, the Don't keep activities can easily spot real bugs/issues that are hard to reproduce in the real world. I have seen lots of weird crashes in some of the Samsung devices, after turn it on, its easy to reproduce. I suggest to save/restore presenter states in onSaveInstanceState and onRestoreInstanceState in activity. . ",
    "lannyf77": "@sockeqwe the Don't keep activities alive is a great helper for spotting easily missed cases. When it is turned on, if you minimize the app the os will simulate that in some low resource case the os would 'kill' some app which is not in display. In that case (any case that os kills app because of low resource) it means os may use the savedInstanceState when the app is restored, and for that the isFinishing() will return false  -- means the app is not really 'finishing'.  but if activity is destroyed by calling the finish() regardless whether the 'dont keep activity alive' set or not the isFinishing will be true.. ",
    "DrobyshevAlex": "1) shutdown server\n2) run app\n3) press home button or launch other app\n4) run server\n```\npublic class LogoPresenter extends MviBasePresenter {\n    @Inject\n    WebSocket webSocket;\n@Override\nprotected void bindIntents() {\n    Observable<LogoViewState> logoViewStateObservable =\n        intent(LogoView::serverVersion)\n                .flatMap(version -> {\n                    Observable<Version> v = webSocket.on(\"version\", Version.class);\n                    return v;\n                }).map(LogoViewState.DataState::new)\n                .cast(LogoViewState.class)\n                .observeOn(AndroidSchedulers.mainThread());\n\n    subscribeViewState(logoViewStateObservable, LogoView::render);\n\n    webSocket.emit(\"version\", new Version(2));\n}\n\n}\n```\nerror on line \n((MainActivity)getActivity()).showHomeFragment();\nbecause app in pause. Android not allowed use FragmentManager.replace if app on pause.\nIf app try set new fragment without action user (callback websocket, http, or just other thread after some time) when app background (incoming call, run other app, etc...) i got crash app.\n. I removed websocket and error gone... I'll try tomorrow more tests. I don't understand how i can use websocket.\nIf i want to show actual info from server without reuest.\nIt is like a \n// subscribe to socket event\nObservable<Object> model = ws.on('user_status');\nHow i can render it with MVI?\nIn MVP it's easy\ndisposable.add(model\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe( s -> {\n                    if (isViewAttached()) {\n                        getView().showUpdateStatus(s);\n                    }\n                }, throwable -> {\n                    throwable.printStackTrace();\n                })\n        );. ```\n    @Override\n    protected void bindIntents() {\n    Observable<LogoViewState> o = webSocket.on(\"version\", Version.class)\n            .doOnNext( i -> Log.d(\"Presenter\", \"doOnNext\") )\n            .observeOn(AndroidSchedulers.mainThread())\n            .cast(Version.class)\n            .map(LogoViewState.DataState::new);\n\n    o.doOnDispose( () -> {\n        Log.d(\"Presenter\", \"doOnDispose\");\n    } );\n\n    subscribeViewState(o, LogoView::render);\n\n    webSocket.emit(\"version\", new Version(1));\n}\n\n```\n@Override\n    public void render(LogoViewState logoViewState) {\n        if (logoViewState instanceof LogoViewState.LoadingState) {\n            statusView.setText(\"Connecting...\");\n        } else if (logoViewState instanceof LogoViewState.DataState) {\n            Log.d(\"fragment\", \"1\");\n            statusView.setText(logoViewState.toString());\n            if (getActivity() != null) {\n                Log.d(\"fragment\", \"2\");\n                ((MainActivity)getActivity()).showHomeFragment();\n            }\n        }\n    }\n\nD/Activity: onCreate\nD/Activity: onResume\nD/Activity: onPause\nD/Activity: onSaveInstanceState\nD/Fragment: onStop\nD/Presenter: doOnNext\nD/fragment: 1\nD/fragment: 2\nW/System.err: io.reactivex.exceptions.OnErrorNotImplementedException: Can not perform this action after onSaveInstanceState\nE/AndroidRuntime: FATAL EXCEPTION: main\n                                                                   Process: ru.terraideas.smart, PID: 8574\n                                                                   io.reactivex.exceptions.OnErrorNotImplementedException: Can not perform this action after onSaveInstanceState. I think webSocket need put to intent. But i can do it only from MvpView.\n\nUpdated: I put webSocket.on in view but app is crashed\n@Override\n    public void detachView(boolean retainInstance) {\n        super.detachView(retainInstance);\n        Log.d(\"Presenter\", \"detachView(\" + (retainInstance ? \"true\" : \"false\") + \")\");\n    }\ndetachView in presenter havn't executed. The code is in the previous message.\n```\npublic class LogoPresenter extends MviBasePresenter {\n    @Inject\n    WebSocket webSocket;\n@Override\nprotected void bindIntents() {\n\n    Observable<LogoViewState> o = intent(LogoView::subscribe)\n            .doOnNext( i -> Log.d(\"Presenter\", \"doOnNext\") )\n            .observeOn(AndroidSchedulers.mainThread())\n            .map(LogoViewState.DataState::new).doOnDispose( () -> {\n                Log.d(\"Presenter\", \"doOnDispose\");\n            } ).cast(LogoViewState.class);\n\n    subscribeViewState(o, LogoView::render);\n\n    webSocket.emit(\"version\", new Version(1));\n}\n\n@Override\npublic void detachView(boolean retainInstance) {\n    super.detachView(retainInstance);\n    Log.d(\"Presenter\", \"detachView(\" + (retainInstance ? \"true\" : \"false\") + \")\");\n}\n\n}\n```\nLog from detachView haven't printed. detail log\n\nD/Activity: onPause\nD/FragmentMviDelegateImpl: Saving MosbyViewId into Bundle. ViewId: c7e9b66f-844d-4a3c-8376-fe36709c5bad\nD/ActivityMviDelegateImpl: Saving MosbyViewId into Bundle. ViewId: ced14644-d2aa-4441-848a-2d3133cb572f\nD/Activity: onSaveInstanceState\nD/Fragment: onStop\nD/ActivityMviDelegateImpl: detached MvpView from Presenter. MvpView view.MainActivity@343dd24b   Presenter: view.MainPresenter@3dfa8a7a\nD/Presenter: doOnNext\ncrash..\n\ndetached only Activity. Can I detach Fragment?\nI think the problem is that the subscriber can change Activity after the application is stopped. \nI would like to \"ViewState\" be changed after \"onStop\" but \"render\" run after the application be \"onStart\".. if i can move code from FragmentPresente to ActivityPresenter app work good!\nBut i need some fragments with intent code... I don't want make some activites :)\nCan you help me please?. It is not easy :(\nIf i attach/detach view in onStart/onStop from fragment the crash gone.\nBut after onStart \"Android\" run FragmentManager transaction and i have new crash\n\njava.lang.IllegalStateException: FragmentManager is already executing transactions. Another error.\nunsubscribe don't work when frament destroy.\n\n@Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        unbinder.unbind();\n        presenter.detachView(false);\n    }\n- so work fine. I have a fregment with presenter.\nIf i press back button for close app then fragment  has destroed.\nBut subscribers from presenter don't dispose.\nWhen i run application after destroy the fragment i watch in log 2 line that print from doOnNext.\nD/App: test\nD/App: test\nIf a press back button again then nex run application print 3 line to log.\nD/App: test\nD/App: test\nD/App: test\netc...\nI create BaseFragment\n```\npublic abstract class BaseFragment extends MviFragment {\n    protected P presenter;\n    protected Unbinder unbinder = null;\n    private boolean isAttached = true;\n@Override\npublic void onStart() {\n    super.onStart();\n    if (presenter != null && !isAttached) {\n        presenter.attachView(this);\n    }\n}\n\n@Override\npublic void onStop() {\n    super.onStop();\n    if (presenter != null && isAttached) {\n        presenter.detachView(true);\n    }\n}\n\n@Override\npublic void onDestroy() {\n    super.onDestroy();\n    if (presenter != null) {\n        presenter.detachView(false);\n    }\n    if (unbinder != null) {\n        unbinder.unbind();\n    }\n}\n\n}\n```\nNow everything works as it should\npresenter.detachView(false); - fix it. I'm sorry :) I bad speak english.\nLast commit don't fix all bugs. It' fixed first error.\nSecond error in my last message.\nFragment.onDestroy is not trigger detach(false) therefore after each exit application and run - observable send +1 duplicate event to subscribers.\nFirst run app\n- Run app\n- Get response from server\n- Press back button to exit\nSecond run app (without kill)\n- Run app\n- Get response from server 2 times\n- Press back button to exit\n\nRun app\nGet response from server 3 times\n\nbecause Fragment.onDestroy() not call presenter.detachView(false). I debug the app. Really presenter.onDestroy(false) was triggered.\nBut if a remove line \npresenter.detachView(false);\nfrom fragment onDestroy then unsubscribe not work...\n. I found.\nI debug again. So:\n\nApp run\nApp -> setFragment LogoFragment (without add in BackStack)\nApp -> setFragment HomeFragment\nLogo.detach(true)  (its right so app is not stopped)\nPress Back Button\nHomeFragment.detach(false)\n\nso we have'nt detach(false) for hidden fragment if close app. Why not just call in MviBaseFragment detachView(false) in Fragment.onDestroy()?. count of onStart == count of onStop? \nif take version 3.0.4 and make like \n```\npublic abstract class BaseFragment extends MviFragment {\n    protected P presenter;\n    private boolean isAttached = true;\n@Override\npublic void onStart() {\n    super.onStart();\n    if (presenter != null && !isAttached) {\n        presenter.attachView(this);\n    }\n}\n\n@Override\npublic void onStop() {\n    super.onStop();\n    if (presenter != null && isAttached) {\n        presenter.detachView(true);\n    }\n}\n\n@Override\npublic void onDestroy() {\n    super.onDestroy();\n    presenter.detachView(false);\n}\n\n}\n```\n257 and #260 both work fine\nsince 3.0.5  i make simple \n```\npublic abstract class BaseFragment extends MviFragment {\n    protected P presenter;\n@Override\npublic void onDestroy() {\n    super.onDestroy();\n    presenter.detachView(false);\n\n}\n```\nMy app work is right. unsubscribe work. ",
    "littleGnAl": "@sockeqwe Thanks. It's a good solution, and maybe I can just pass the View to the Presenter just like MVP does, but I think whether have a more elegant way to do this\uff1f\uff08Maybe like your discussion in #255\uff09. ",
    "andreiverdes": "Hi!\nI chose to include navigation through the MVI pattern to be able to log every user action within the app.\nI had the same problem above and couldn't just pass references to a Navigator or start activities from the Presenter because I keep the presentation layer in a separate project module.\nMy solution was to clear the navigation flags with another MVI intent triggered by onPause. \nI know it's a bit dirty, I'm new to MVI, any feedback is welcomed! :D\nPS: Great library!\n```kotlin\nPresenter.kt\n...\noverride fun bindIntents() {\n...\nval clearViewStateIntent = intent { view -> view.clearNavigationIntent()}\n                .map { LandingViewState() }\n                .subscribeOn(Schedulers.io())\n    val allIntents = Observable.merge(\n            createViewIntent,\n            loginIntent,\n            signUpIntent,\n            clearViewStateIntent\n    ).observeOn(AndroidSchedulers.mainThread())\n\n    subscribeViewState(allIntents, LandingContract.View::render)\n\n}\nkotlin\nActivity.kt\n...\noverride fun onPause() {\n        pauseSubject.onNext(true)\n        super.onPause()\n    }\noverride fun render(viewState: LandingContract.State) {\n        when (true) {\n            viewState.navigateToLoginScreen() -> SignInActivity.start(this)\n            viewState.navigateToManageScreen() -> ManageActivity.start(this)\n            viewState.navigateToSignUpScreen() -> SignUpActivity.start(this)\n        }\n    }\noverride fun clearNavigationIntent(): Observable<LandingContract.Intent.ClearNavigationIntent> {\n    return pauseSubject.map { LandingContract.Intent.ClearNavigationIntent() }\n}\n\n```\n. ",
    "abyrnes": "@sockeqwe How do you suggest handling navigation in the case where the next screen needs data that is in the view state?. > Would it be feasible to allow certain View States to be consumed instead of replacing the previous one?\n@skykelsey For this I've been having a dummy state that gets emitted by navigation intents (I call it NoOp) and is just filtered out to avoid any unnecessary renderings:\n```kotlin\nval intent1 = intent(...)\nval intent2 = intent(...)\nval viewStateObservable = Observable.merge(intent1, intent1).filter { it !is NoOp } \nsubscribeViewState(viewStateObservable, View::render)\n``\nThis, however, doesn't solve the main problem at hand, for which I still haven't come up with an elegant solution, unfortunately. It doesn't seem like Mosby is well equipped to handle navigation in the presentation layer. So in the meantime I've implemented a base presenter that inherits fromMviPresenterand hacks away at its implementation details to retrieve the previous view state, if it exists, and directly notify the view that a navigation event has occurred. This, combined with filtering outNoOp` view states, has yet to cause me any issues.. Makes sense :)\nIndeed it takes no time at all to extend from MviBasePresenter and create a base version of the implementation discussed above. \nThanks for the insight!. I'm not really sure why you'd want to, but to do so you'd manually have to copy MviActivity into your project and just replace the parent class with Activity. ",
    "tschuchortdev": "\nI have figured out a simple pattern of how to do navigation properly\n\nAny news on this? I couldn't find anything about it on your blog. . ",
    "contrudar": "@sockeqwe I understood the explanation and I'll take a look at MVI. Also what you said about Mosby 3.1. looks like what the library \"Moxy\" does. But still curious how to solve my problem. I use only one activity and when I go from one fragment to another and go back I don't wanna load data again and to make a user wait for data again. Just interesting how this standard case should be implemented with current version of Mosby?. ",
    "curiousily": "Hi again,\nYes, interactors (business logic) only. Don't want to test anything related to Mosby.\nIt seems like #168 doesn't have anything related to testing? Maybe a typo?\nRegards. Hi,\nThis took some time :smile: \nTL; DR\nI want to test my \"business logic\" and don't want my tests coupled with the delivery mechanism. I don't want my tests to know anything about the existence of Presenters.\nThe long version:\nRead the discussion at #268 and your posts about MVI (about 2-3 times). Also, watched Uncle Bob's Clean Coders videos on TDD and Clean Architecture lectures.\nI want my tests to be:\n\nAs readable/lean as possible\nAs easy to write/add as possible\nDepend on as few test doubles as possible (that is, seldom use of any insert your favorite mock library )\nCovering my business logic heavily and test everything else based on developer preference (E.g. I don't want to test a Presenter that simply navigates to another page on click)\n\nI believe that the argument should be \"Why skip the Interactor and test the Presenter?\". Since the latter will require (much) more work to test properly. For the sake of argument, let's review why Interactor testing is a must (In my opinion, of course):\n\n\nIf that's an example of PresenterTest: https://github.com/sockeqwe/mosby/blob/master/sample-mvi/src/test/java/com/hannesdorfmann/mosby3/sample/mvi/view/home/HomePresenterTest.java I would say - it just hurt my eyes.\nPresenters are part of the delivery mechanism, that is, they are Android specific (in our case). They stay outside of the boundary of my app (Black vertical line in the diagram). If I change the framework (Mosby) or simply remove the need for Presenters in my app I would have to write whole new tests or isolation layer for that.\nIf I want to deliver my app via the web and have some additional use cases for that, how should I test them? Create new isolation layer for \"Web\" Use Cases?\nPresenter tests are required, but not for every Presenter (as discussed previously). So tests covering them should be written (and for state reducers) as the need for that arises.\nOne Use Case can be used by multiple Presenters - should I duplicate my test logic just to cover all Presenters?\nThe apparent overuse of a \"Test Double\" (HomeViewRobot) in the Presenter Test (same as the referenced above) shows that testing is not as simple as MVI promised at first:\n\nkotlin\nassertEquals(expectedViewState, viewState)\nThat is, of course, because MVI just is a presentation pattern. It shouldn't dictate how we architecture or test our app.\nWith all that being said, I don't believe that Mosby does anything wrong. Just saying that good samples should include proper testing of Interactors.\nFeel free to ask, if any questions arise! :slightly_smiling_face:. Thanks for taking the time. This is a real treat \ud83d\udc4d \n\nBut I don't understand how this is related to MVI or Mosby?\n\nAs I stated previously\n\n\nOf course, all of this might not be relevant to mosby at all. Still, this might be helpful for the community.\n\n\nYes, it is not related to Mosby. I am perfectly fine with not addressing this issue here.\n\nThis is not a Presenter Test, this is a Integration test as it tests all layers down from Presenter inclusive Business Logic state reducer etc. \n\nI completely agree. It is an integration test. Integration tests have a (very large) place in developing \"proper\" apps and should cover all the things you've mentioned.\nMVI is awesome beyond a reasonable doubt, I completely agree here.\n\ni don't understand the question but if your question is if I take my app and replace the android View with a website or whatever else then your website obviously have to implement the View Interface and that's it. No need to change other internals (implementation details) within the Boundary (Black vertical line in the diagram) .\n\nYes, that is correct. I am talking about going to Web (for example) from Android. Let's have another look at the diagram:\n\nThe presenter is outside the black vertical line. That makes sense because the presenter prepares ViewModels that are specific for the view. Take for example an Android app that displays a Todo list. Each Todo ViewModel is composed of {name, dueDate, isCompleted} and all is great. Now, you want to present that list via a Web page. Due to the large screens that Web apps are displayed on, we (the designer) decides to display the duration of a task. A GUI is added for editing it, as well. So, we need new ViewModel and Presenter to handle all that.\nAgain, Integration Tests are needed to ensure that everything is glued together correctly. \nWhat I meant by that:\n\n\nThe apparent overuse of a \"Test Double\" (HomeViewRobot) in the Presenter Test (same as the referenced above) shows that testing is not as simple as MVI promised at first:\n\n\nis the fact that we have to use \"Test Double\" for every one of our tests. Test doubles make testing a bit harder to write and read compared to testing return values of methods. I would prefer to write simpler tests whenever I can, I tend not to skip writing them when that is the case \ud83d\ude04 \nPersonally, the promised simplicity, explicit state presentation and immutability by MVI are there only if my tests are simple to write & read too.\nAgain, thank you for your time!\n. ",
    "chris6647": "Our temporary fix involves having each presenter implement an interface Clearable, with an onCleared method.  Each presenter calls that method on detachView, as well as our BaseController calling it onDetach (we are using Conductor, so if you're not, it would just be the equivalent method in i.e. Fragments) to ensure we are properly cleaning up after ourselves every time.. ",
    "ZahidRasheed": "I just gave it a shot. So I removed the deprecated detachView(boolean retainInstance) and tried using detachView() and destroy() but apparently both of them never get called, not even when the view is detached. . We are using MVP and mvp-conductor (3.0.0)\nmvp version: 3.0.4\nApp goes into background Don't keep activities: On\njava\n    StartZoneController  V  \u21e2 onViewBound(view=android.widget.RelativeLayout{384c681 V.E...... ......ID 0,0-0,0})\n                         V  \u21e0 onViewBound [9ms]\n     StartZonePresenter  V  \u21e2 attachView(view=com.example.startzone.presentation.StartZoneController@cca0326)\n                         V  \u21e0 attachView [10ms]\n    StartZoneController  V  \u21e2 onDetach(view=android.widget.RelativeLayout{384c681 V.E...... ......ID 0,0-1440,175})\n                         V  \u21e0 onDetach [0ms]\n     StartZonePresenter  V  \u21e2 detachView(retainInstance=false)\n                         V  \u21e0 detachView [1ms]\nApp goes into background Don't keep activities: Off\njava\n    StartZoneController  V  \u21e2 onViewBound(view=android.widget.RelativeLayout{384c681 V.E...... ......ID 0,0-0,0})\n                         V  \u21e0 onViewBound [9ms]\n     StartZonePresenter  V  \u21e2 attachView(view=com.example.startzone.presentation.StartZoneController@cca0326)\n                         V  \u21e0 attachView [10ms]\n    StartZoneController  V  \u21e2 onDetach(view=android.widget.RelativeLayout{384c681 V.E...... ......ID 0,0-1440,175})\n                         V  \u21e0 onDetach [0ms]\n^^ Presenter was never detached.\nmvp version: 3.1.0-SNAPTSHOT\nI can see that detachView is now deprecated. So now I am looking for:  detachView() and destroy(). \nApp goes into background Don't keep activities: On\njava\n    StartZoneController  V  \u21e2 onViewBound(view=android.widget.RelativeLayout{384c681 V.E...... ......ID 0,0-0,0})\n                         V  \u21e0 onViewBound [9ms]\n     StartZonePresenter  V  \u21e2 attachView(view=com.example.startzone.presentation.StartZoneController@cca0326)\n                         V  \u21e0 attachView [10ms]\n    StartZoneController  V  \u21e2 onDetach(view=android.widget.RelativeLayout{384c681 V.E...... ......ID 0,0-1440,175})\n                         V  \u21e0 onDetach [0ms]\n     StartZonePresenter  V  \u21e2 detachView(retainInstance=false)\n                         V  \u21e0 detachView [1ms]\n^^No detachView() or destroy()??\nApp goes into background Don't keep activities: Off\njava\n    StartZoneController  V  \u21e2 onViewBound(view=android.widget.RelativeLayout{384c681 V.E...... ......ID 0,0-0,0})\n                         V  \u21e0 onViewBound [9ms]\n     StartZonePresenter  V  \u21e2 attachView(view=com.example.startzone.presentation.StartZoneController@cca0326)\n                         V  \u21e0 attachView [10ms]\n    StartZoneController  V  \u21e2 onDetach(view=android.widget.RelativeLayout{384c681 V.E...... ......ID 0,0-1440,175})\n                         V  \u21e0 onDetach [0ms]\n^^No detachView(retainInstance=false), detachView() or destroy()??\n. Please feel free to close this issue. We had a confusion as we thought Presenter will get a detachView call back when the Controller gets onDetach callback.. ",
    "harrylefit": "When is 3.1.0 version released ? My app's leaked on PresenterManager. ",
    "devAseemSharma": "@jhowens89 I was working on refactoring my existing code, after going through your discussion thread I was having some confusion while implementing things as per the guide, basically I need to know how exactly we can use Dagger2 in this MVI architecture? I hope you must have gone through same situation at the start, it would be really helpful if you could provide some reference regarding this.\nThanks. ",
    "lurecas": "Sorry for the long delay in getting back to you.\nIn the end, we went with both versions of Mosby on our app.\nThanks. ",
    "bdelville": "I'd like to revive this Thread. Since Android-X mosby3 only is needed. ",
    "KushtrimPacaj": "Ok, that makes sense. But the problem doesn't carry on the view?.  one line use case.\nThe getView would either get a strong reference on which we call the method, or null in which case nothing happens.\nAnyways, the suggestion was just not to remove it from the library, it may be kept deprecated in favor of the more foolproof API. ",
    "micutad": "Perfect! Thanks for the link. I will go through the presentation.\nMaybe sample could have also things like: navigation that don`t change the state, navigation that is emitted as part of the business logic, validation of inputs etc.\nBut as you already mentioned, this isn't really the scope of MVI. I just wonder how this looks like in your projects.. ",
    "lucamtudor": "I'm looking forward to it!. ",
    "lmdic": "Yes, it's help. And now is work.\nBut... it's not very convenient. I MUST remember that if Activity have incoming params(extras) I MUST call onCreate() after read this paramas(extras). I hope you fix this in the future version.\nThanks.. ",
    "laalto": "So far only seen this is crash reports sent via automated tooling, no repro cases reported. I'll try to cook up one in near future.\nDidn't receive such crash reports before Mosby 3.1.0 update and that lead me to believe it's related as there were lifecycle-related changes (such as MvpFragment createPresenter() getting invoked in onCreate() rather than onViewCreated() fragment lifecycle phase).\nThe app itself is large with tens of developers contributing. In most places the UI is based on MvpFragment with MvpNullObjectBasePresenter. But now that you mention it, I cannot exclude that there is somewhere e.g. MvpView-based approaches (with potential lifecycle-related bugs). Have to recheck when back at work and not busy with something else.\nAlso noting that I posted the wrong code snippet. It does have a typo, but the crash is in the next private method. Sorry about that.. Ok, finally got some time to debug this deeper. No original repro steps known but here's something that produces similar stacktraces:\n\nThe app has a bottom navigation bar that is-a MvpFrameLayout (and hence ViewGroupMvpDelegateImpl seen in stacktrace)\nEach post-login activity in the app checks for a valid session in onResume()and if the session is stale, calls finish() to go back to login activity\nViewGroupMvpDelegateImpl starts listening for activity lifecycle changes once instantiated but only inits the presenter in onAttachedToWindow() which runs after  activity onResume()\n\nHere's a sample activity that demonstrates the above:\n```\npublic class MosbyBug290Activity extends AppCompatActivity {\nstatic class BottomNaviPresenter extends MvpBasePresenter<MvpView> {\n}\n\nstatic class BottomNavi extends MvpFrameLayout<MvpView, BottomNaviPresenter> {\n\n    public BottomNavi(Context ctx) {\n        super(ctx);\n    }\n\n    @Override\n    public BottomNaviPresenter createPresenter() {\n        return new BottomNaviPresenter();\n    }\n\n    // override to extend visibility from protected to public\n    @Override\n    public Parcelable onSaveInstanceState() {\n        return super.onSaveInstanceState();\n    }\n}\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    BottomNavi navi = new BottomNavi(this);\n    setContentView(navi);\n\n    // Do something that forces ViewGroupMvpDelegateImpl to be constructed\n    // and register itself to listen for activity lifecycle changes\n    navi.onSaveInstanceState();\n}\n\n@Override\nprotected void onResume() {\n    super.onResume();\n\n    // Simulate a session timeout that throws the user back to login activity\n    finish();\n\n    // onAttachedToWindow() where the presenter is initialized only runs after activity onResume()\n    // and hence receiving a crash here\n}\n\n}\n``. Any news with this? Would want to get rid of the crashes but would not want to deploy a forked version of Mosby.\n. In the real application almost like that: Code inActivity#onResume()checks for session validity and callsActivity#finishAffinity()to throw the user back to login screen in case the session is no longer valid. And yes, there's a bottom navigation bar in the top-level activity that is powered byMvpFrameLayout`.\nI have actually been doing some testing with this by deploying this fix in our internal QA builds and monitoring how it's doing. Before doing that there used to be a background radiation of 1..3 crashes a day from our internal QA, without QA people being able to come up with repro steps, only suspicions that \"something times out in the background\". There have been no more crashes after deploying this change.. In our AndroidX-enabled app the 3.1.1 does not work out of the box, BackstackAccessor crashes with NoSuchMethodError and not with IllegalAccessError as handled in the code. The configuration I was testing has proguard optimizations enabled so it might be part of the issue here.\nMy workaround:\n\nkeep a BackstackAccessor fork and utils-fragment exclusions as in https://github.com/sockeqwe/mosby/issues/318#issuecomment-403536460 above \nbase the fork on utils-fragment but just call the isInBackStackAndroidX() hack directly\n\nI believe this could be fixed in the library by catching NoSuchMethodError as well.. ",
    "martinflorek": "Anything new regarding this issue? I think that I just hit the same bug in v 3.1.0, but with MviPresenter and the Conductor library:\njava.lang.NullPointerException: Attempt to invoke interface method 'void com.hannesdorfmann.mosby3.mvi.MviPresenter.destroy()' on a null object reference\n    at com.hannesdorfmann.mosby3.MviConductorLifecycleListener.postDestroy(MviConductorLifecycleListener.java:133)\nMy app has a complex routing with several nested routers in Conductor and this crash happens when the app is resumed after a long time in background into state with backstack bigger then one. Then after tapping the back it does not pop the backstack but crashes.\nIt can be reproduced with the \"Don't keep activities\" enabled in the debug options in the phone's settings. Then navigating to some screen where the backstack grows and minimizing the app (i.e. press home) will crash the app, sometimes :/. ",
    "drampelt": "A similar error happens when you call finish for an activity in onCreate, it tries to delete a null presenter in onDestroy and crashes.. As a temporary workaround until then for those who want to continue using AndroidX, you can exclude the utils-fragment module dependency in your build.gradle:\ngradle\ncompile 'com.hannesdorfmann.mosby3:mvi:3.1.0' {\n    exclude group: 'com.hannesdorfmann.mosby3', module: 'utils-fragment'\n}\nand then define your own androidx.core.app.BackstackAccessor class:\n```java\npackage androidx.core.app;\nimport androidx.fragment.app.Fragment;\npublic class BackstackAccessor {\n    public static boolean isFragmentOnBackStack(Fragment fragment) {\n        return false;\n    }\n}\n```. ",
    "Vivecstel": "when the new update will be released? I am also getting this exception on crashlytics on some users:\nCaused by java.lang.NullPointerException\n       at com.hannesdorfmann.mosby3.mvp.delegate.ViewGroupMvpDelegateImpl.detachPresenterIfNotDoneYet(ViewGroupMvpDelegateImpl.java:301)\n       at com.hannesdorfmann.mosby3.mvp.delegate.ViewGroupMvpDelegateImpl.onActivityDestroyed(ViewGroupMvpDelegateImpl.java:255)\n       at android.app.Application.dispatchActivityDestroyed(Application.java:265)\n       at android.app.Activity.onDestroy(Activity.java:1541)\n       at android.support.v4.app.FragmentActivity.onDestroy(FragmentActivity.java:358)\n       at android.support.v7.app.AppCompatActivity.onDestroy(AppCompatActivity.java:209)\n       .... ",
    "diogojg": "I'm also detecting this crash from time to time and on Crashlytics. @sockeqwe Are going to release a new update anytime soon? Thanks!. ",
    "keith30xi": "Is there a chance to get this fixed without tying it to the conversion to androidx?  We are seeing crashes as well.. ",
    "Burtsev-Ivan": "Version 3.1.1-SNAPSHOT still fails. ",
    "vladimirfx": "Reproducable on 3.1.1 release. ViewGroupMviDelegateImpl\nI've call finish() in onResume and onActivityResult . I don't know actually. Stacktrace do not include either:\n```\nCaused by java.lang.NullPointerExceptionAttempt to invoke interface method 'void com.hannesdorfmann.mosby3.mvp.MvpPresenter.detachView()' on a null object reference\u00a0Raw Text\n--\n\u00a0 | com.hannesdorfmann.mosby3.ViewGroupMviDelegateImpl.detachPresenterIfNotDoneYet\u00a0(ViewGroupMviDelegateImpl.java:275)\n\u00a0 | com.hannesdorfmann.mosby3.ViewGroupMviDelegateImpl.onActivityDestroyed\u00a0(ViewGroupMviDelegateImpl.java:251)\n\u00a0 | android.app.Application.dispatchActivityDestroyed\u00a0(Application.java:253)\n\u00a0 | android.app.Activity.onDestroy\u00a0(Activity.java:1995)\n\u00a0 | android.support.v4.app.FragmentActivity.onDestroy\u00a0(FragmentActivity.java:413)\n\u00a0 | android.support.v7.app.AppCompatActivity.onDestroy\u00a0(AppCompatActivity.java:210)\n\u00a0 | android.app.Activity.performDestroy\u00a0(Activity.java:7297)\n\u00a0 | android.app.Instrumentation.callActivityOnDestroy\u00a0(Instrumentation.java:1250)\n\u00a0 | android.app.ActivityThread.performDestroyActivity\u00a0(ActivityThread.java:4437)\n\u00a0 | android.app.ActivityThread.handleDestroyActivity\u00a0(ActivityThread.java:4468)\n\u00a0 | android.app.ActivityThread.-wrap5\u00a0(Unknown Source)\n\u00a0 | android.app.ActivityThread$H.handleMessage\u00a0(ActivityThread.java:1678)\n\u00a0 | android.os.Handler.dispatchMessage\u00a0(Handler.java:106)\n\u00a0 | android.os.Looper.loop\u00a0(Looper.java:171)\n\u00a0 | android.app.ActivityThread.main\u00a0(ActivityThread.java:6651)\n\u00a0 | java.lang.reflect.Method.invoke\u00a0(Method.java)\n\u00a0 | com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run\u00a0(RuntimeInit.java:547)\n\u00a0 | com.android.internal.os.ZygoteInit.main\u00a0(ZygoteInit.java:824)\n```. ",
    "j2emanue": "ok.  could you make it so that it accepts the presenter i am returning on onCreatePresenter ?  I'll have to call this in all of our classes which is a huge task.  Dagger2 does not work in base abstract classes.  So each concrete class i'll have to override the getters/setters for the presenter.  we never use to have to do this before , im wondering if you can change it to not do that ?. so here is what i did:\n@NonNull\n    @Override\n    public LandingPagePresenter createPresenter() {\n        return presenter; //confirmed this is not null\n    }\n@Override\npublic void setPresenter(@NonNull LandingPagePresenter presenter_notused) {\n    super.setPresenter(presenter); //confirmed neither presenter and presenter_notused are null (and they are the same )\n}\n\ni still unfortuantly, got the same error. which ill show below:\nFATAL EXCEPTION: main\n                                                                      Process: com.mobile.myapp.labs, PID: 8977\n                                                                      java.lang.NullPointerException: Presenter returned from createPresenter() is null. Activity is com.mobile.myapp.ui.landing.LandingPageActivity@252836b\n                                                                          at com.hannesdorfmann.mosby3.mvp.delegate.FragmentMvpDelegateImpl.createViewIdAndCreatePresenter(FragmentMvpDelegateImpl.java:104)\n                                                                          at com.hannesdorfmann.mosby3.mvp.delegate.FragmentMvpDelegateImpl.onCreate(FragmentMvpDelegateImpl.java:268)\n                                                                          at com.hannesdorfmann.mosby3.mvp.MvpFragment.onCreate(MvpFragment.java:101)\n                                                                          at android.support.v4.app.Fragment.performCreate(Fragment.java:2246)\n                                                                          at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1377)\n                                                                          at android.support.v4.app.FragmentTransition.addToFirstInLastOut(FragmentTransition.java:1187)\n                                                                          at android.support.v4.app.FragmentTransition.calculateFragments(FragmentTransition.java:1070)\n                                                                          at android.support.v4.app.FragmentTransition.startTransitions(FragmentTransition.java:115)\n                                                                          at android.support.v4.app.FragmentManagerImpl.executeOpsTogether(FragmentManager.java:2374)\n                                                                          at android.support.v4.app.FragmentManagerImpl.removeRedundantOperationsAndExecute(FragmentManager.java:2332)\n                                                                          at android.support.v4.app.FragmentManagerImpl.execSingleAction(FragmentManager.java:2209)\n                                                                          at android.support.v4.app.BackStackRecord.commitNowAllowingStateLoss(BackStackRecord.java:649)\n                                                                          at android.support.v4.app.FragmentStatePagerAdapter.finishUpdate(FragmentStatePagerAdapter.java:167)\n                                                                          at android.support.v4.view.ViewPager.populate(ViewPager.java:1238)\n                                                                          at android.support.v4.view.ViewPager.populate(ViewPager.java:1086)\n                                                                          at android.support.v4.view.ViewPager.onMeasure(ViewPager.java:1616)\n                                                                          at android.view.View.measure(View.java:22002)\n                                                                          at android.widget.LinearLayout.measureVertical(LinearLayout.java:958)\n                                                                          at android.widget.LinearLayout.onMeasure(LinearLayout.java:685)\n                                                                          at android.view.View.measure(View.java:22002)\n                                                                          at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:6580)\n                                                                          at android.support.design.widget.CoordinatorLayout.onMeasureChild(CoordinatorLayout.java:719)\n                                                                          at android.support.design.widget.CoordinatorLayout.onMeasure(CoordinatorLayout.java:791)\n                                                                          at android.view.View.measure(View.java:22002)\n                                                                          at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:6580)\n                                                                          at android.widget.FrameLayout.onMeasure(FrameLayout.java:185)\n                                                                          at android.support.v7.widget.ContentFrameLayout.onMeasure(ContentFrameLayout.java:139)\n                                                                          at android.view.View.measure(View.java:22002)\n                                                                          at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:6580)\n                                                                          at android.widget.LinearLayout.measureChildBeforeLayout(LinearLayout.java:1514)\n                                                                          at android.widget.LinearLayout.measureVertical(LinearLayout.java:806)\n                                                                          at android.widget.LinearLayout.onMeasure(LinearLayout.java:685)\n                                                                          at android.view.View.measure(View.java:22002)\n                                                                          at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:6580)\n                                                                          at android.widget.FrameLayout.onMeasure(FrameLayout.java:185)\n                                                                          at android.view.View.measure(View.java:22002)\n                                                                          at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:6580)\n                                                                          at android.widget.LinearLayout.measureChildBeforeLayout(LinearLayout.java:1514)\n                                                                          at android.widget.LinearLayout.measureVertical(LinearLayout.java:806)\n                                                                          at android.widget.LinearLayout.onMeasure(LinearLayout.java:685)\n                                                                          at android.view.View.measure(View.java:22002)\n                                                                          at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:6580)\n                                                                          at android.widget.FrameLayout.onMeasure(FrameLayout.java:185)\n                                                                          at com.android.internal.policy.DecorView.onMeasure(DecorView.java:721)\n                                                                          at android.view.View.measure(View.java:22002)\n                                                                          at android.view.ViewRootImpl.performMeasure(ViewRootImpl.java:2410)\n                                                                          at android.view.ViewRootImpl.measureHierarchy(ViewRootImpl.java:1498)\n                                                                          at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:1751)\n                                                                          at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:1386)\n                                                                          at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:6733)\n                                                                          at android.view.Choreographer$CallbackRecord.run(Choreographer.java:911)\n12-22 11:30:01.985 8977-8977/com.mobile.myapp.labs E/AndroidRuntime:     at android.view.Choreographer.doCallbacks(Choreographer.java:723)\n                                                                          at android.view.Choreographer.doFrame(Choreographer.java:658)\n                                                                          at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:897)\n                                                                          at android.os.Handler.handleCallback(Handler.java:789)\n                                                                          at android.os.Handler.dispatchMessage(Handler.java:98)\n                                                                          at android.os.Looper.loop(Looper.java:164)\n                                                                          at android.app.ActivityThread.main(ActivityThread.java:6541)\n                                                                          at java.lang.reflect.Method.invoke(Native Method)\n                                                                          at com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:240)\n                                                                          at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:767). My presenter constructor takes arguments. Dagger builds it for me\nGet Outlook for Androidhttps://aka.ms/ghei36\n\nFrom: James Shvarts notifications@github.com\nSent: Friday, December 22, 2017 6:51:05 PM\nTo: sockeqwe/mosby\nCc: j2emanue; Author\nSubject: Re: [sockeqwe/mosby] Dagger2 - injecting presenter gives Caused by: java.lang.NullPointerException: Presenter returned from createPresenter() is null. Activity is ... (#298)\nIf Presenter is the only thing you inject into your View, you can have the object graph expose it and so you can inject the Presenter itself in createPresenter(). See example https://github.com/jshvarts/MosbyMVP/blob/master/conductor-dagger-sample/src/main/java/com/jshvarts/mosbymvp/searchrepos/SearchViewController.kt\nAlso, you don't need to include both mvp and viewstate Gradle dependency. The latter is sufficient.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/sockeqwe/mosby/issues/298#issuecomment-353583474, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AEuvOvgU1xjroSxzeC9V_nkiinKnsEehks5tC5epgaJpZM4RK0GO.\n. I see no difference if I do this. I'm calling  dagger inject before super.oncreate . Therefore my presenter already has a reference. I don't think createpresenter method is called before onCreate , right? I guess you guys changed the implementation a bit.  How is exposing the method in the component bringing different results then annotating the presenter constructor with @Inject.  I tried overriding set/getters as recommended but same issue. . here is what i have done:\nMy app component has the following declared:\nLandingPagePresenter landingPagePresenter();\nand in the landingPageActivity i took out the @Inject annotation so now the presenter declartion looks like this:\n//  @Inject\n    LandingPagePresenter presenter;\nhere is the onCreate method:\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ((MyApplication) getApplicationContext()).getAppComponent().inject(this);\n        super.onCreate(savedInstanceState);\n        presenter= getPresenter(); //now i am calling your getPresenter method but i also tried without this\n        setContentView(R.layout.activity_homepage);\n      //blah blah\n    }\nhere is the createpresenter override:\n```\n@NonNull\n    @Override\n    public LandingPagePresenter createPresenter() {\n//confirmed dagger did return a presenter here through debugger\n       return ((MyApplication) getApplicationContext()).getAppComponent().landingPagePresenter();\n}\n\n```\ni also tried the following:\n@NonNull\n    @Override\n    public LandingPagePresenter createPresenter() {\n//confirmed dagger did return a presenter here through debugger\n       presenter= ((MyApplication) getApplicationContext()).getAppComponent().landingPagePresenter();\nreturn presenter;\n    }\nhere is the constructor signature for the presenter::\n@Inject\n    public LandingPagePresenter( GatewayFactory gatewayFactory, GetFeedsUsecase feedsUsecase,  MySharedPrefRepo sharedPrefRepo) { //...blah blah\n}\ni still get the same error:\nE/AndroidRuntime: FATAL EXCEPTION: main\n                                                                      Process: com.mobile.my.labs, PID: 5100\n                                                                      java.lang.NullPointerException: Presenter returned from createPresenter() is null. Activity is com.mobile.my.ui.landing.LandingPageActivity@b0c662e\n                                                                          at com.hannesdorfmann.mosby3.mvp.delegate.FragmentMvpDelegateImpl.createViewIdAndCreatePresenter(FragmentMvpDelegateImpl.java:104)\n                                                                          at com.hannesdorfmann.mosby3.mvp.delegate.FragmentMvpDelegateImpl.onCreate(FragmentMvpDelegateImpl.java:268)\n                                                                          at com.hannesdorfmann.mosby3.mvp.MvpFragment.onCreate(MvpFragment.java:101)\n                                                                          at android.support.v4.app.Fragment.performCreate(Fragment.java:2246)\n                                                                          at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1377)\n                                                                          at android.support.v4.app.FragmentTransition.addToFirstInLastOut(FragmentTransition.java:1187)\n                                                                          at android.support.v4.app.FragmentTransition.calculateFragments(FragmentTransition.java:1070)\n                                                                          at android.support.v4.app.FragmentTransition.startTransitions(FragmentTransition.java:115)\n                                                                          at android.support.v4.app.FragmentManagerImpl.executeOpsTogether(FragmentManager.java:2374)\n                                                                          at android.support.v4.app.FragmentManagerImpl.removeRedundantOperationsAndExecute(FragmentManager.java:2332)\n                                                                          at android.support.v4.app.FragmentManagerImpl.execSingleAction(FragmentManager.java:2209)\n                                                                          at android.support.v4.app.BackStackRecord.commitNowAllowingStateLoss(BackStackRecord.java:649)\n                                                                          at android.support.v4.app.FragmentStatePagerAdapter.finishUpdate(FragmentStatePagerAdapter.java:167)\n                                                                          at android.support.v4.view.ViewPager.populate(ViewPager.java:1238)\n                                                                          at android.support.v4.view.ViewPager.populate(ViewPager.java:1086)\n                                                                          at android.support.v4.view.ViewPager.onMeasure(ViewPager.java:1616)\n                                                                          at android.view.View.measure(View.java:22002)\n                                                                          at android.widget.LinearLayout.measureVertical(LinearLayout.java:958)\n                                                                          at android.widget.LinearLayout.onMeasure(LinearLayout.java:685)\n                                                                          at android.view.View.measure(View.java:22002)\n                                                                          at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:6580)\nin all cases above i have not overriden setPresenter or getPresenter. \ni guess i'll have to see if anyone else gets these errors and for now return to mosby2 unless you guys see something im not doing or missed . . I think I have to inject dagger dependencies from onCreate because I have other dependencies that need to be injected in not just a present. For example analytics manager etc.\nGet Outlook for Androidhttps://aka.ms/ghei36\n\nFrom: James Shvarts notifications@github.com\nSent: Saturday, December 23, 2017 5:37:41 AM\nTo: sockeqwe/mosby\nCc: j2emanue; Author\nSubject: Re: [sockeqwe/mosby] Dagger2 - injecting presenter gives Caused by: java.lang.NullPointerException: Presenter returned from createPresenter() is null. Activity is ... (#298)\nI believe all you need to do is to have this done:\n@Override\npublic LandingPagePresenter createPresenter() {\n    return ((MyApplication) getApplicationContext()).getAppComponent().landingPagePresenter();\n}\nDo not have any Dagger code in the onCreate() and do not declare LandingPagePresenter presenter in your Activity (View). Whenever you need to reference the Presenter in your Activity, just call presenter.foo()\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/sockeqwe/mosby/issues/298#issuecomment-353685378, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AEuvOkZVMrPt3SO03oTL-SsYYwuaD6e4ks5tDC81gaJpZM4RK0GO.\n. jshvarts ,\ni assume that you meant myPresenter variable in the setter and not this.presenter :\n@Override\nvoid setPresenter(LandingPagePresenter presenter) {\n    this.myPresenter = presenter\n}\ni treied exactly as you put and i also tried it in another class just to make sure. its the same error.  i have the code exactly how you wrote it.  lets take a look more in depth at my code:\nhere is my activity:\n``public class LandingPageActivity extends BaseMvpActivity implements LandingPageView {\n    @Inject\nLandingPagePresenter presenter;\n\n@Inject\nApplicationMode appMode;\n\n@Inject\nEventBus bus;\n\n\n\n@Override\npublic void setPresenter(LandingPagePresenter presenter) {\n    this.presenter = presenter;\n}\n\n@NonNull\n@Override\npublic LandingPagePresenter createPresenter() {\n    return this.presenter;\n}\n\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    ((MyApplication) getApplicationContext()).getAppComponent().inject(this);\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_homepage);\n    ButterKnife.bind(this);\n    initView();\n}\n\n}`\n\n```\nand here is the BaseActivity class definition:\npublic abstract class BaseMvpActivity<V extends BaseMvpView, P extends MvpPresenter<V>>\n        extends MvpActivity<V, P>  {........}\nand here is BaseMvpView:\n```\npublic interface BaseMvpView extends MvpView {\nvoid showError(@StringRes int e);\n\nvoid showError(String msg);\n\n//....blah blah\n}\n```\nagain the environment im running on is Oreo api 26 but i also tried it on api 23 emulator.\nwith dependency:  implementation 'com.hannesdorfmann.mosby3:viewstate:3.1.0'\nfor completeness below is my dagger2 component:\n```\n@Singleton\n@Component(modules = {AppModule.class, NetworkModule.class, ActivityModule.class})\npublic interface AppComponent {\nvoid inject(MyApplication target);\n\nvoid inject(LandingPageActivity target);\n\n//......\n}\n```. do you guys want to set up a phone call or screen share so we can fix this issue ?. ",
    "lebeshev": "@j2emanue Hi!\nIt's probably too late, but since an issue hasn't been closed I want to tell you about how I make dependency injection for mosby. I use MVI instead of MVP but it doesn't change a lot.\nI have a LoginFragment class with corresponding LoginPresenter and LoginComponent.\nCode of LoginComponent:\n```Java\n@Subcomponent\npublic interface LoginComponent {\n@Subcomponent.Builder\ninterface Builder {\n\n    LoginComponent build();\n\n}\n\nvoid inject(LoginFragment loginFragment);\n\n// Important!\nLoginPresenter getLoginPresenter();\n\n}\n```\nI have a separate class called Injection, where I handle lifecycle of all my components and subsomponents. It looks kinda like this:\n```Java\npublic class Injection {\nprivate Injection() {\n}\n\nprivate static AppComponent appComponent;\n\nprivate static LoginComponent loginComponent;\n\npublic static void init(Application application) {\n    appComponent = DaggerAppComponent.builder()\n            .application(application)\n            .build();\n}\n\npublic static LoginComponent inject(LoginFragment loginFragment) {\n    loginComponent = appComponent.loginComponentBuilder().build();\n    loginComponent.inject(loginFragment);\n    return loginComponent;\n}\n\npublic static void clear(LoginFragment loginFragment) {\n    loginComponent = null;\n}\n\n}\n```\nAnd here is how all this stuff is being used in LoginFragment:\n```Kotlin\nclass LoginFragment : MviFragment(), LoginView {\nprivate lateinit var loginComponent: LoginComponent\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n    loginComponent = Injection.inject(this)\n    super.onCreate(savedInstanceState)\n}\n\n// Other lifecycle methods\noverride fun createPresenter(): LoginPresenter = loginComponent.loginPresenter\n\n}\n``\nThis way I can inject all my fragment's dependensies using members-injection (callingInjection.inject(this)) and get my presenter using provision method (theLoginPresenter getloginPresenter()` one). You can read more about members-injection and provision methods in docs.\nUsing this method I get no runtime exceptions. Hope I helped! . ",
    "pawelnbd1992": "@j2emanue Did you fix this issue ?. Someone fixed this issue ? @sockeqwe give me a hint where to look error.. ",
    "leslieam": "I've got the same issue. Using Dagger 2.16 and Mosby 3.1.0.. java.lang.NullPointerException: Presenter returned from createPresenter() is null.\nI've got the same issue when I switch to 3.1.0 or 3.1.1. It worked on mosby 3.0.1.. Looking forward to this issue solved. I'm getting the same issue.\njava.lang.IllegalAccessError: Method 'boolean androidx.fragment.app.Fragment.isInBackStack()' is inaccessible to class 'androidx.core.app.BackstackAccessor'. ",
    "ExpensiveBelly": "What's the reason behind using DialogFragments with MVI? We are currently using AlertDialogs. The ViewState is restored after rotation so a new AlertDialog is displayed. It's working wonders for us. \nWe try to stay away from DialogFragments (and fragments in general) as it's very easy to get into https://www.androiddesignpatterns.com/2013/08/fragment-transaction-commit-state-loss.html. ",
    "Tassiroo": "@sockeqwe did you have time to look at it? this feature would be greatly appreciated ;). ",
    "tseglevskiy": "Small update. I thought about this a little. Possible requirement of schedulers in layer with presenters and controllers is not an issue: any code can manage their multithreading. And that mechanics often is OS-dependent. So I create thread manager and provide it to upper layers. \nAnyway, I'd like to listen your comments. \nAlso I see another issue. The Mosby MVI library brings to layer with presenters lots of Android-specific libraries. I'd like to have Mosby in two parts: first one will contain interfaces for presenters and views, and I can use it in layer with presenters, second one will contain implementation of framework, and it will be safe in Android-specific layer. \nWhat do you think?. Oh, you already did it. I reread tree of dependencies and found the mvi-common module. It is exactly what I ask. So now my layer with presenters is clean. Thank you. :). ",
    "kusraevs": "Binding intents actually starts in attachView method of MviBasePresenter. In MviActivity this method calls in onStart. So if you use PublishSubject item could be emitted before this time because it is a hot observable. If you use Observable.just(..) we don't have this problem.\nIn this situation i use BehaviorSubject instead of PublishSubject.\nBut if you call startWith inside intent() function it should work ok. So this is issue is the same as #242 as far as i concern\n. UnicastSubject will not act like PublishSubject because if another subscriber will subscribe to UnicastSubject, it will receive an IllegalStateException, even if previous subscriber was disposed.\nThat's why we cannot use it in this situation. . ",
    "shmakova": "Hello, I have a problem.\nI want to use PublishSubject in onActivityResult, but it is called before onStart, so intent doesn't fire. Is there any way to fire it?\nI have tried to use BehaviorSubject but it repeats last intent after I return back to the screen. ",
    "johnwilde": "I looked through the older issues and came across your comment https://github.com/sockeqwe/mosby/issues/256#issuecomment-359770008 which was very helpful because I didn't realize that \"real world\" behavior will kill the app process (and we won't end up with multiple presenters).  It seems you're aware of the issue and it will only happen when testing with \"don't keep activities.\"  \nI don't think I found the issue/comments in which people are expecting to recreate the presenter.  It's unfortunate that \"don't keep activities\" doesn't match what happens in reality.  I'm not sure this change is a good idea after all because this now treats it essentially the same as a configuration change.  However, not destroying the presenter is a potential source of confusion for developers trying to test with that option enabled - maybe removing the isFinishing check would make it clearer that retaining the presenter is only relevant for configuration changes.. ",
    "ValeriusGC": "Here is the change i made to fix this problem:\nMviBasePresenter.java\njava\n        Subject<I> intentRelay = ReplaySubject.create();\n        //Subject<I> intentRelay = UnicastSubject.create();\nthis was inserted on  513d1e9 (\"use unicast subject\", 2018-04-08) . ",
    "p8499": "When I upgrade mosby library from 3.1.0 to 3.1.1 I faced with this problem too.. Maybe UnicastSubject conflicts with the navigation feature,\nstateObservable.share().map{...}.addTo(compositeDisposable)\nthus makes it subscribed by two observables.. ",
    "tommus": "AndroidX is now stable 1.0.0. Even more, Google wrote that the Support 28.0.0 is the last version that supports android.support package. It is time to move on.. I've read and responded to Your SO issue. TLDR; make sure You have no org.gradle.parallel=true in your project root gradle.properties file. Based on Your local Gradle configuration, using command line parameter to disable above mentioned paralellism might not work properly. It is worth to give a try.. ",
    "guyca": "@sockeqwe \nWould you consider using this workaround  in mosby:\n```java\npublic static boolean isInBackStack(final Fragment fragment) {\n    try {\n        return fragment.isInBackStack();\n    } catch (IllegalAccessError e) {\n        return isInBackStackAndroidX(fragment);\n    }\n}\n/\n Hacky workaround because Fragment#isInBackStack is inaccessible with AndroidX\n/\nprivate static boolean isInBackStackAndroidX(final Fragment fragment) {\n    final StringWriter writer = new StringWriter();\n    fragment.dump(\"\", null, new PrintWriter(writer), null);\n    final String dump = writer.toString();\n    return !dump.contains(\"mBackStackNesting=0\");\n}\n```\nAnother possible solution is to keep current implementation and introduce a BackStackAccessorProvider which will let users use a different logic for determining if a fragment is in the back stack or not.\n. Thanks @sockeqwe, submitted a pr.\nEdit 1: submitted a new pr\nEdit 2: I published my fork which is compatible with AndroidX on jitpack. If anyone is interested you can use it until the PR is merged: implementation 'com.github.guyca:mosby:3.1.6'. ",
    "MaximPestryakov": "@sockeqwe When do you plan to release 3.1.1?. @sockeqwe fix ci, please. ",
    "Jacks0N23": "@sockeqwe still no new release version ((. ",
    "walker622": "Im still waiting. ",
    "Jeff11": "Unfortunately, the build fails with this exception, because of duplicate BackstackAccessor. \nWarning: Exception while processing task java.io.IOException:\nCan't write [/home/me/projects/myappAndroid/myapp/build/intermediates/transforms/proguard/prodmyapp/release/0.jar]\n(Can't read [/home/me/projects/myappAndroid/myapp/build/intermediates/transforms/RealmTransformer/prodmyapp/release/0(;;;;;;;**.class)]\n(Can't read [androidx]\n(Can't read [core]\n(Can't read [app]\n(Can't read [BackstackAccessor.class]\n(Duplicate jar entry [androidx/core/app/c.class])))))). ",
    "LukasStancikas": "Yes error similar to @Jeff11  persists in 3.1.1-SNAPSHOT version using gradle dependency 'Program type already present: androidx.core.app.BackstackAccessor'. ",
    "terrakok": "Hello @sockeqwe !\nBackstackAccessor used for checking that we should persist presenter on screen rotation because isRemoving == true for fragments inside backstack on screen rotation. Right?\nBut we can check it other way: android calls onSaveInstanceState for this fragments before screen rotation.\n```kotlin\nabstract class BaseFragment : AppCompatFragment() {\nprivate var instanceStateSaved: Boolean = false\n\n//This is android, baby!\nprivate fun isRealRemoving(): Boolean =\n    (isRemoving && !instanceStateSaved) //because isRemoving == true for fragment in backstack on screen rotation\n        || ((parentFragment as? BaseFragment)?.isRealRemoving() ?: false)\n\n//It will be valid only for 'onDestroy()' method\nprivate fun needDestroyPresenter(): Boolean =\n    when {\n        activity?.isChangingConfigurations == true -> false\n        activity?.isFinishing == true -> true\n        else -> isRealRemoving()\n    }\n\noverride fun onResume() {\n    super.onResume()\n    instanceStateSaved = false\n}\n\noverride fun onSaveInstanceState(outState: Bundle) {\n    super.onSaveInstanceState(outState)\n    instanceStateSaved = true\n}\n\noverride fun onDestroy() {\n    super.onDestroy()\n    if (needDestroyPresenter()) {\n        //destroy presenter\n    }\n}\n\n}\n```\nI think @guyca code is dirty hack :wink: . ",
    "FynnJason": "Is there a better way to check if the view is null and reduce the amount of code?. ",
    "alexmetcalfe": "Hey @sockeqwe any chance that a release can be cut soon? . "
}