{
    "mathiasverraes": "http://twitter.com/#!/mathiasverraes/status/124753732897488896\n. use cent symbol for USD:\nfunction \u00a2($amount) {\n    return new Money($amount, new Currency('USD'));\n}\n. see https://github.com/mathiasverraes/money/pull/86\n. using bcmath? \n. see https://github.com/mathiasverraes/money/pull/55/files#r16972250\n. Closing, formatting for users is not a concern of the value object, but should be in a separate money formatter thing.\n. Sweet, thanks! \nhttp://packagist.org/packages/mathiasverraes/money\n. This code is used in many non-symfony2 projects, some which are out of my control. So a separate repo might be better. I think that is also more consistent with sf2 best practices. You could host on your own github, or I'd be happy to have it here. \nAlternatively, we could move it outside of the lib folder. That would make the separation cleaner but keep it in one repo. \n/\n/lib\n/symfony2-bundle (or whatever)\n(Note that the doctrine type should also be moved then, but I don't want to break existing code)\n. > I mostly opened a PR to have a place to discuss this with you\nBest way to use PR's :)\n\nTag a release now (e.g. 1.1.0)\n\ndone\n\nMove the doctrine code into a separate repository\n\nWill need to find some time for this.\n\nCreate a repository for the Symfony bundle that requires both this repository and the dbal type.\n\ntodo: point to new repo in existing docs, so people don't duplicate that work.\n. 5066762232ff967c167413b88203a8b6084f9e67 and fc2504b3bc26d5e4ef3e5b29181685e6e4e3f3b7 add support for all currencies, so we don't need to add each individual currency anymore. \nI agree with @marijn that formatting is something that should not be in the Money class, but in a separate MoneyFormatter. One idea I had was to simply create a little bridge between Money and something like Zend Currency. \nIn any case, take into account that formatting is not currency-dependent, but locale-dependent. For example, in Brazil you write BRL 9.999,99 but in the US that would still be written as BRL 9,999.99 \n. Thanks :)\n5066762232ff967c167413b88203a8b6084f9e67 and fc2504b3bc26d5e4ef3e5b29181685e6e4e3f3b7 add support for all currencies, so we don't need to add each individual currency anymore. \ne714662 adds the float typecast and a check for numeric. \n708d8d5 renames units to amount throughout.\nI couldn't use your pull request because it's three different things in one commit.\n. Yep :-)\n. Also see https://github.com/mathiasverraes/money/pull/19#discussion_r2361831 \n. Hi Marco,\nFirst, I think that you accidentally touch upon an interesting thing in your constructor: Zero EUR is the same as Zero USD. I made a pull request for that: https://github.com/mathiasverraes/money/pull/21 (It's work in progress, it needs test for all operations, and the implementations)\nI think that should solve the problem of instantiating Products when you don't know the Currency yet.\n(As a side note, a better practice is to always pass a price to the Product constructor. After all, a Product without a price is not a valid Product. Eg: new Product($productName, $productCode, $price) )\nCan you explain why you want a default Currency? Isn't the Currency always dependent on context?\nI'm hesitant to introduce a default currency, because what would you propose is global state, and is a source for bugs. You can indeed prevent those bugs with a DefaultCurrencyAlreadyDefinedException, but that feels like fixing a hack with a hack. \nIf you want an application wide default Currency, you could do something like this:\n``` php\nclass MyDefaultCurrency extends Currency\n{\n    public function __construct()\n    {\n        parent::__construct('BRL');\n    }\n}\nnew Money(15, new MyDefaultCurrency);\n```\nThoughts?\n. > I agree that product should be constructed with valid required values, but it's not possible using Symfony's Form Component,\nThe short  answer would be \"don't use Symfony Forms\" :-)\nThe long answer is: decouple the forms from the model. It's bad practice. You can do that for example by building the forms using a GoF Command, then use that Command to pass instructions to your entities. Or you could use a ViewModel or just plain arrays -- basically anything that sits between your model and your UI is better than coupling.\nIn any case, by using a zero Money without a Currency, you can effectively initialize Products with a 0 price, and leave it up to the client code to add a price later, using a  config parameter or a user preference to assign the Currency.\nHaving a global, or .ini configuration, still feels like a bad solution. If you have a single currency environment, (eg in each tenant needs to pick a single currency for the whole shop), then maybe you don't need Money and simple integers will do?\n. Closing, global defaults lead to all kinds of things, and better code is not one of them.\n. @asm89 @marcospassos @marijn  @sascha-tasch\nI think I'm pretty much done with Money::zero(), except for some documentation. Can you guys play around with, see if you can find any issues I missed?\n. Again sorry for taking so long. So much to do, so little time! Feel free to email or tweet me whenever I take to long to respond.\nI think this whole Zero Money thing is still not right. Your comments made that even more clear. \nPeople are going to be very confused, because it's not so predictable anymore how an operation will behave. Depending on the amount (0 or something else) you will get an Currency exception.\nSo how to proceed with this feature? There are some questions that we need to answer: Do we need to have a difference between Money::zero() and Money::EUR(0)? Are they interchangeable? Are Money::EUR(0) and Money::USD(0) interchangeable?\nI'm not even sure anymore whether we need to have this feature at all. Most things have a set currency anyway. If your bank account is in EUR, making it empty and then depositing in USD won't suddenly make it a USD bank account. \nI've been looking at similar projects in other languages, but I could't find anything about handling zeros.\n. Closed it, I don't believe it makes sense\n. The point of interfaces is to be able to swap out implementations. In the case of Money, (and in many Value Objects), I can't see what the point would be of swapping implementations. \nIf we were talking about something like a ConversionRateFetcher, that would definitely have to be an interface, because you could have different implementations depending on what 3PD service you'd want to talk to.\nThe problem you're describing is about integrating different systems. In that case, the burden would be up to you to write an interface that suits you, and write adapters for Money and for the other monetary value object. There would be no point for mathiasverraes/money to provide an interface, because that would have a lot of methods that are not relevant for you, and that probably wouldn't have an equivalent in the 3PD code. For example, my interface would have an allocate() method, but if you application doesn't need allocation, and the 3pd doesn't have it, why would I want to force you to implement it anyway? \n. Added branch alias in https://github.com/mathiasverraes/money/commit/a6e2b696f40994f131938ce4c0924f2d99a33ecc#composer.json and tagged 1.2.0\n. Oops, seems like I need to spend more time watching github issues :-) \nI'm of course happy to look at any PR's. A MoneyConverter sounds like a useful addition :-) \n. Out of scope, keeping this lib small and focused.\n. Closing, keeping this lib small and focused\n. Closing, I agree that Currency should not be coupled to a list of possible values, or a dependency that validates values. It's too volatile, and devs should be free to decide what is valid in their system (eg cryptocurrencies, in-game currencies, historic currencies...). Removing the current behavior will be part of 3.0.\n. thanks!\n. I think this can be merged. I just need to have a better versioning strategy, because I made a bit of a mess of things. \n. merged in the nextrelease branch for the 3.0, thanks :)\n. https://twitter.com/mathiasverraes/status/447435010577268736\nhttps://twitter.com/mathiasverraes/status/447435172364165120\n. Merged, thanks :)\n. Merged in the 3.0 branch https://github.com/mathiasverraes/money/pull/46\n. Thanks for the pull request. Could you elaborate why adding interfaces would give you a better guarantee? \nThe point of interfaces is to allow polymorphism, and the point of polymorphism is to make it easy to swap out different implementations. There is at this point no reason to have a different implementation for neither Money nor Currency. For example, is there any reason why you would want a different implementation of $money->add() ?\n. @toopay Interfaces give you no guarantee that the interface doesn't change. Changelogs and tests do. \nAs for your example, the library supports $fiver = Money::USD(5) so you don't really need a USD class. You can still add that in your own code if you wish, but it still does not prove the need for a Money interface. Typehinting can be done on Money, and that would be perfectly fine because there is nothing in Money that would require a second implementation.\nRe PSR: I can perfectly imagine why you would want to switch to a different Logger. Logger is a service. Money is a Value Object. Completely different context. Sebastian wrote his own Money because he probably doesn't like this one, so he probably doesn't like the interface in the first place, and a standard would be pointless. Then again, maybe he simply didn't google it before building his own :-)\nAgreed on semantic versioning. That has been a bit of an issue in the past, I marked it 1.0 and then did a bunch of changes. I want to to move to a 2.0 release and be very strict about breaking changes. \nClosing by lack of evidence.\n. Awesome, that's an impressive feature list :-)\n. If you need high precision, you could build a BigMoney class. See\nhttp://www.joda.org/joda-money/ for inspiration. It's similar to Money but\nnever loses the precision. It should probably use the bcmath php extension.\nOn 9 Jan 2014 21:44, \"Cam Spiers\" notifications@github.com wrote:\n\nThe core of multiply uses:\n(int) round($this->amount * $multiplier, 0, $rounding_mode)\nIt works as follows:\n1. Multiply amount by specified integer or float multiplier\n2. Round to 0 dp using PHP round and the specified rounding mode\n3. Type cast to an integer\n4. Create new Money value object\nSo the answer is yes, it can do what you are asking, in the sense that you\ncan have a float multiplier, but remember that the Money class works in the\nsmallest currency unit, so in the case of USD as an example, you can't get\nsub-cents values. 1 cent is the smallest unit, and the multiply method will\nrespect that and your rounding mode to arrive at the new value for your new\nMoney value object.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mathiasverraes/money/issues/40#issuecomment-31974083\n.\n. You guys are right, I've been a bit messy in the past with version numbers. I've just branched of nextrelease, that will become the 3.0 as soon as I'm happy about it.\n. Made a milestone, filling it up now https://github.com/mathiasverraes/money/issues?milestone=1&state=open\n. it is indeed\n. Fixed in d06dbf9d2fad636621d888f17624cecd6b3ef329\n. Put in the old ones. \n. Storing it as a string makes perfect sense. I do that as default, unless I need to query the value -- and even in that case I might have both a money field with the string, and a split money_amount and money_currency field. Don't believe the normalisation hype :-)\n\nIn any case, I'm sure somebody has provided a doctrine embeddable for Money somewhere. \n. > since EVERY value has the same currency by default\nNever make assumptions about other domains :-)\nI've worked in ecommerce where the prices of products were not converted.\nEg EUR 599 vs GBP 479. Shop owners don't want to list GBP 476.54 as the\nprice. Doing any kind of querying on prices there would have been\npointless. Full text searches were done in solr.\nNot all value objects are measurements by the way. But I guess that is\nrather off topic here.\nOn 27 August 2014 20:07, M\u00e1rk S\u00e1gi-Kaz\u00e1r notifications@github.com wrote:\n\nWell, I am sure you can understand why I say it is weird. Think about a\ndistance measurement: you do not store it as a string with a unit. You\nspecify a base and convert it if needed.\nIn case of currencies it is a bit hard, since the conversion rates are not\nsimple(not just 10 for example) and are always changing. So from this point\nof view storing monetary values as string is ok.\nIn other cases (like an ecommerce site) the currency is not strongly tied\nto the actual value, since EVERY value has the same currency by default and\nusually this can be converted to another currency (with the CurrencyPair\nfor example). So I would rather say storing integers is better when it is\npossible.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mathiasverraes/money/issues/50#issuecomment-53615488.\n\n\nMathias Verraes\nmathias@verraes.net\nhttp://verraes.net\n@mathiasverraes http://twitter.com/mathiasverraes\n. No, the first line is EUR 5, the second line adds another 5, then the resulting EUR 10 is allocated.\n$fiveEur = Money::EUR(500);\n$tenEur = $fiveEur->add($fiveEur);\n. +1 :-)\n. @nostrzak You might want to look at http://verraes.net/2014/05/final-classes-in-php/\n. Why do you want to extend Money? \n. If you have a good usecase for getDecimalAmount(), I'd be happy to add that. But simply adding inheritability for the sake of a missing method, is rather drastic. (Money and Currency should have been final classes, but I didn't know any better when I wrote it).\n. @sascha-tasche OOP is not about inheritance. \n. see http://verraes.net/2014/05/final-classes-in-php/ \n. There's other ways to extend code. You can use Composition, for example, your class can use Money internally and delegate to it. \nAs for support: because Money is a very small and mature library with a single goal, it is very safe to depend on. If for some reason it doesn't work for you anymore, it would be easy to fork it and do what you like. I'm sure you depend on software that is a lot harder to fork and adapt: frameworks, databases and drivers, the php language, linux...\n. One question, sometimes you use, return new self() sometimes return new Money(). What's the reason for that?\nNo that should be cleaned up. I prefer return new Money for clarity.\n. They're not final because in 2010 when I first wrote this thing, I didn't know any better. They should be final. Every problem that anybody's told me about, can be better solved using composition than inheritance. \nMoney is a value object. There is no reason whatsoever to mock it. I'd love to hear it if you think of one. For the same reason, there's no reason to delegate it, or have different implementations. Either Money behaves correctly and optimal, or it doesn't, in which case it needs to be fixed. It's not as if anybody will suddenly come up with a new way of adding to monetary value that works completely different than the implementation in the lib. \n. > > I just confirmed that I agree with you.\nI'm sorry, you're right, I skimmed your comment to quickly. I guess I'm used to people disagreeing with the finals thing :-)\nThey will be final in a next major release.\n. I hope you don't mind me nitpicking on the details, I feel we might as well try to get it completely right :)\n. When the meaning is unclear, the first reaction should be to try to find a\nbetter name.\n$money->greaterThat($other)\nvs\n$money->isGreaterThan($other)\nThe second version leaves no ambiguity in my opinion, so I would change it.\nOn 27 August 2014 16:27, M\u00e1rk S\u00e1gi-Kaz\u00e1r notifications@github.com wrote:\n\nActually I agree with you in some points, but I think it is better to\nclear what a function does in some cases. Like: greaterThan. Which is\ngreater than what? This might be something that you possibly mark as noise.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mathiasverraes/money/pull/54#issuecomment-53580089.\n\n\nMathias Verraes\nmathias@verraes.net\nhttp://verraes.net\n@mathiasverraes http://twitter.com/mathiasverraes\n. The idea was that you can catch all \\Money\\Exception instances, but I don't\nthink anybody would want to do that anyway. My current preference would be\nto have simple exceptions for each case, that extend the root \\Exception.\nOn 27 August 2014 16:31, M\u00e1rk S\u00e1gi-Kaz\u00e1r notifications@github.com wrote:\n\nRegarding the PHP exception thing, that blog post does not even exist\nanymore. I think adding interfaces, because they might be used in the\nfuture is not a good solution. And you can even do it later.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mathiasverraes/money/pull/54#issuecomment-53580819.\n\n\nMathias Verraes\nmathias@verraes.net\nhttp://verraes.net\n@mathiasverraes http://twitter.com/mathiasverraes\n. Feel free to switch it to psr4, i don't care either way :-)\nOn 27 August 2014 16:35, M\u00e1rk S\u00e1gi-Kaz\u00e1r notifications@github.com wrote:\n\nThe last comment was only regarding the docblock description marking as\nnoise.\nHave you considered changing to PSR4 autoload?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mathiasverraes/money/pull/54#issuecomment-53581412.\n\n\nMathias Verraes\nmathias@verraes.net\nhttp://verraes.net\n@mathiasverraes http://twitter.com/mathiasverraes\n. For future work, can you do separate PR's for separate problems? This one is getting too big, too many different stuff going on. \n. > > And the tests does not really need a namespace at all\nI like tests to have a separate namespace, as it \"simulates\" production code where the client code of a library is not going to be in the same namespace as the library. Anyway, in php it doesn't matter all that much. \nMerging. We can always change more stuff later :)\n. I agree with your argument that it helps to prevent changing currencies, but I don't think that this is a real problem -- it has never occurred. It is internal implementation, so it doesn't really matter a lot. So I decided to go the zmq way and just accept it, and change it again if it annoys me in the future. Working code trumps opinions :-)\n. Ok, just fix the public and we can merge it.\n. - [ ] Adapt documentation\n. The solution imho is:\n- Currency is a simple value object.  It validates whether the passed currency name is a string but nothing else.\n- Currency no longer contains a list of currencies\n- AvailableCurrencies is an interface with array behaviour and some methods like contains(Currency $currency)\n- Currency has a method isValidWithin(AvailableCurrencies $availableCurrencies) which is a simple double dispatch to  AvailableCurrencies#contains(Currency $currency)\n- final class ISOCurrencies implements AvailableCurrencies and contains a list of ISO codes\n- Client code is responsible for doing the validation against an AvailableCurrencies implementation\n- In the docs, users are encouraged to provide custom AvailableCurrencies, eg for a small subset of currencies they support, to get the list from some storage, to use cryptocurrencies or fantasy currencies (in games)...\n. - [ ] Adapt documentation\n. If you want to, that'd be great :)\n. Merged. The intermediate object is not a good idea, it doesn't match the domain (conceptually, multiplying and then changing the currency is not what happens in the domain).\n. @sagikazarmark  Please review https://github.com/mathiasverraes/money/pull/60\n. a new line before return statements is recommended\nIn a three line method, that has no effect on readability. Therefore, I don't care. \ninteger is used all over the file as type instead of int)\nso integer|float might be better.\nfixed\n. Oh I guess I misread your earlier comment, I thought you meant int was better. Feel free to send a new PR.  I don't care either way, and neither does php. Proper IDE's understand both, as do humans. \n. Hi Roelof,\nJust use an text input field for the amount. If you have multiple currencies, put them in a select box. In your code, (depending on your framework), you can get the value from the request and put them in a Money object. You can use the stringToUnits function for the amount:\n$amount = Money::stringToUnits($_POST['amount']);\n$currency = $_POST['currency'];\n$money = new Money($amount, new Currency($currency));\n. No, this is not a money formatting library. You can use http://php.net/manual/en/numberformatter.formatcurrency.php for that.\n. I think the notation is confusing. If anything, __toString should render an ISO representation.\n. I agree, it should fail or work. Looking into it.\n. Fixed in #65, merged to master and to nextrelease\n. The exception is correct. \"111.9300000\" should not be parsed because it creates confusion. If we were to accept \"111.9300000\", the question arises what to do about \"111.9300001\". Should we now parse this as well? Should it be rounded? If you need to deal with strings like \"111.9300000\", I suggest fixing this problem at the source. \n. See my comment on https://github.com/mathiasverraes/money/issues/67#issuecomment-64536839\n. Don't do this kind of back and forth multiplying . I confuses which of the two amounts is the single source of truth. Is the price 399 incl taxes, or is the price 333 plus taxes? Sooner or later, you will have to round the price, and at that point you'll need a clear audit trail. \nThat said, there are valid cases for working with floats. To that goal, we need a separate class called BigMoney, that allows more than two decimals, using something like bcmath. Pull requests welcome :)\n. Sure, would be awesome :) Please send a PR against the nextrelease branch.\n. Thanks, looks interesting indeed. \n. thanks!\n. I appreciate the effort, but these comments add no value whatsoever. The name of the method makes it abundantly clear what it does. If not, we need to find a better name. \n. How does being consistent about comments, when they are redundant, add value? (Not being sarcastic, please help me understand).\n. getAmount() / 100\n. Merged the PR. In the 3.0 release, it will be easier to use your own currencies.\n. Thanks, see https://github.com/mathiasverraes/money/pull/86\n. The minimum requirement for the nextrelease branch will be php 5.4\n. No :-)\nGot a pull request?\n. thanks, merged.\n. thanks, merged\n. wrong target branch\n. Thanks, can you get rid of all the empty docblocks you introduced?\n. @sagikazarmark \n\n\nFor the record: I am not a maintainer of this repository, so it is not my call.\n\n\nYou now have push permissions. Thanks for your efforts in this project.\n. I feel I'm more of a bottleneck than an asset to this project, so I feel it's better to share responsibilities. Let me know if you need any assistance or advice.\n. Thanks!\n. Thanks!\n. The current version is very stable, and even if a new version is released,\nyou'll be able to continue using the old one without problems.\n\u2014\nMathias Verraes\nSoftware Consultant\nValue Object Comm.V http://value-object.com\nBlog http://verraes.net/ - Email mathias@verraes.net -  Twitter\nhttp://twitter.com/mathiasverraes - LinkedIn\nhttps://www.linkedin.com/in/mathiasverraes\nOn 20 August 2015 at 17:23, Benjamin Milde notifications@github.com wrote:\n\nI'm in the means of using this project in one of my own. Now I'm reading\nthat a new version will break backwards compatibility, but the\n\"nextrelease\" branch was last updated in February. Is there still work\nbeing done or should I better use the older released version?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mathiasverraes/money/issues/105.\n. Apologies for the neglect to this library. Formatting should, imho, be outside of the Money class, for example in a MoneyFormatting class. PRs welcome (and maintainers also welcome).\n. True, but it is not explicit that we specifically accept both.\n. thanks!\n. Please do :)\nOn 25 Nov 2015 10:38, \"Frederik Bosch\" notifications@github.com wrote:\nRecently I saw this being discussed on Twitter too. I believe the overall\nconclusion is that best thing to use would be GMP\nhttp://nl3.php.net/manual/en/book.gmp.php, if it is not available on\nthe system switch to BC Math http://nl3.php.net/manual/en/book.bc.php.\nOther https://github.com/ircmaxell/PHP-PasswordLib/pull/10 libraries\nseem to prioritize this way too.\nHowever, there might also be reasons for using BC Math over GMP because\nGMP only deals with integers, and not with decimals (there is a proposal\nhttps://wiki.php.net/rfc/gmp-floating-point for the GMP\nimplementation). For another money library this was a reason to choose BC\nMath over GMP https://github.com/ulabox/money.\nTaking into account the feature state of this library, I would say that\nbest thing to prioritize as follows: GMP, BC Math and finally the (current)\nnative PHP method. I am happy to implement and push a PR soon.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mathiasverraes/money/issues/111#issuecomment-159550703\n.\n. BigMoney is something different: it means money with unlimited division.\nYou may want to work with something smaller than 1 cent, and round only\nwhen you make an actual payment. That is fundamentally different behaviour\nfrom Money, which always works with the smallest denomination.\n\nThat said, I agree the name BigMoney is confusing. I took from the java\nimplementation but PreciseMoney is probably a better name.\nBoth Money and PreciseMoney should be implemented with the better math\nlibs. Please PR against the nextrelease branch.\n\u2014\nMathias Verraes\nSoftware Consultant\nValue Object Comm.V http://value-object.com\nBlog http://verraes.net/ - Email mathias@verraes.net -  Twitter\nhttp://twitter.com/mathiasverraes - LinkedIn\nhttps://www.linkedin.com/in/mathiasverraes\nOn 25 November 2015 at 12:43, Frederik Bosch notifications@github.com\nwrote:\n\nNot in my opinion. I would rather build this in. Why would you want to\nconsume another api for larger values? Who knows when to use BigMoney? It\nwould lead to unexpected results in the Money class, because you would have\nthrow exceptions when you cannot calculate a result because the resulting\nor initial value is too large. The developer does not know when that is\nhappening in developing time. How would a new BigMoney class interoperate\nwith a Money class?\nMy idea was to pick a strategy in the constructor. Something like.\n$calculators = [new GmpCalculator(), new BcMathCalculator(), new PhpCalculator()];foreach ($calculators as $calculator) {  if ($calculator->isSupported()) {  }}\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mathiasverraes/money/issues/111#issuecomment-159581749\n.\n. The point here is to return a new Money object, not change the object in place. There's a very good reason to make the Money objects immutable and always return new ones. See http://money.readthedocs.org/en/latest/Immutability.html and http://martinfowler.com/bliki/ValueObject.html.\n\nClosing.\n. I do try to follow PSR, especially when it helps readability. I suppose I don't think that the difference between if () and if() matters much :-) Anyway, I'll do some cleanup in a separate commit, as making lots of formatting changes makes PR's unreadable.\n. The more elegant solution would be to introduce a RoundingMode value object and move the validation there. To prevent BC breaks, we  can still allow the current way of using Money::ROUND_*, but mark it deprecated. When a string is detected instead of a RoundingMode, we instantiate the RoundingMode VO ourselves. Does that make sense?\n- [ ] adapt changelog\n. The pattern for amount is  \"/(-)?(\\d+)([.,])?(\\d)?(\\d)?/\" as you can see in stringToAmount. But's better to simply split the string, have the first part handled by stringToAmount() and the second by Currency. That will avoid the duplicate validation.\n. Does changing it have any effect on anything at all? If not, don't bother :-)\n. Comments like these are just noise in my opinion. We don't need to explain php.\n. That's an implementation detail, not the purpose of __toString. \n\"Returns a string representation of Currency\" is more accurate, but again, that would be noise. So I prefer no comment.\n. \"Base currency\" is noise if the name of the variable is $baseCurrency. \"Currency to convert from\" is useful, that's something that actually helps explaining what it does. \nThe same goes for some of the other comments.\n. Rename to $conversionRatio, drop the comment. Naming > comments :)\n. why public?\n. This can't possibly fail, the sum of two integers is an integer.\n. This can't possibly fail, the subtraction of two integers is an integer.\n. I don't really see the point. If you have 92233720368547758.07 EUR/USD/... then you probably didn't make that using this library :-) Oh well, happy to merge it.\n. That defies the point of having a value object. It makes it impossible to serialize Money because now you'd have to include a list of all currencies in each Money value -- which is a mutable concept anyway.\n. I really dislike supporting two styles of methods. It creates confusion and bugs. Array is the best choice because it reflects the fact that it is a list of variable length.\n. I understand why it appeals, but it is really bad practice in php. If we had method overloading, there'd be a case for it. It also has no cognitive overload as allocate([1, 2]) is just as easy to read and understand as allocate(1, 2).\nUnless you have a problem that is better solved with a variadic definition, I'm sticking with arrays.\n. \"contains\" makes more sense to me than \"exists\". It's a list, it contains things, but that doesn't prove it \"exists\" :-)\n. To me this generic class has no value. It saves typing a few characters, but it loses in expressiveness. Think DDD, explicit naming and contracts! ISOCurrencies, CryptoCurrencies, MyProjectAcceptedCurrencies ...\n. Get rid of the parent class.  See http://verraes.net/2014/08/dry-is-about-knowledge/\n. ",
    "jaymecd": "@mathiasverraes, any updates on this issue? \nWould be good to have JMS Serializer support\nas xml:\nxml\n<money currency=\"EUR\">12345</money>\nas json:\njson\n{\"currency\": \"EUR\", \"amount\": 12345}\n. ",
    "cordoval": "maybe this library should just provide an example or two on how this can be serialized with a simple serializer like the default symfony serializer, no need to make it complex or too dependent on JMS i believe. And just provide the templates, nothing else.\n. also persisting the composer.lock makes me already say this is a :-1: \n. travis fails on the test you wrote?\n. i think time constraints could be the only reason, we can bump up the patch number at any time for any merge or commit that fixes or change something according to semver.\n. if it helps Gush has a semver commad for this :baby: :+1: thanks for you video oh phpuk\n. I think there should be a cookbook to show how to \"extend\" (really use) the library\n. integer\n. instead of int -> integer\n. do we still need this as the method name starts with test?\n. i agree good idea\n. shouldn't this just be composer install?\n. travis.xml -> phpunit.xml.dist\n. if you have an annotation @test then you don't need the test prefix, please revert this\n. i mean self-update is probably ok, but the composer update? why\n. you are merging those two tests?\n. --dev is not needed\n. -c phpunit.xml.dist is not needed\n. better to not add it back since it is an old version\n. the .travis.yml file has a total arbitrary indentation which i think should be corrected for all the file to 4 spaces per indentation level\n. i don't think the symfony/intl should be required by this library\nmaybe it could allow for the usage of it but not hook a dependency on the component\nmaybe setting up an interface where we can hook the default hard coded array currently\ninside the library or any other implementation of those codes.\n. missing trailing dot\n. i fail to see the need for the parenthesis here\n. ```\n3.0.0\n```\n. ",
    "tylercrompton": "+1 This is the only reason I am not using this library. Implementing \\JsonSerializable would be quite trivial.\n. Right. I forgot JsonSerializable isn't in PHP 5.3. Eh. I would actually consider upgrading the PHP dependency to 5.4+ instead. PHP 5.3 hasn't even had security support for nearly six months now. Anybody dealing with money, should not be using PHP 5.3 for this very reason.\n. Personally, I prefer not to add support for a version of a language that the implementers no longer support. Besides, the test would pass with aforementioned change but the code would still fail in production. In order to add support, we'd have to provide a custom json_encode function that would handle objects implementing \\JsonSerializable. That just seems like too much to me.\n. ",
    "camspiers": "Can this be closed?\n. Related to this, there is a fairly big issue with integer overflow in this library. Although I really like your library Mathias, I choose to use https://github.com/sebastianbergmann/money for various reasons, but I still want to help this library.\nIf you have a look at my recent pull requests:\n- https://github.com/sebastianbergmann/money/pull/9\n- https://github.com/sebastianbergmann/money/pull/13\nThis library suffers from the same issues, either silently (and wildly) losing imprecision, or actually failing but not really given appropriate errors.\nRegards\n. Can this be closed?\n. @cordoval Why? It a misconception that lock files committed to repositories have any affect when consuming the repository, they don't. They only matter when running install from within the project, and I think in these instances the lock file is really useful, it speeds up the install process when you are wanting to make contributions to a project.\n. @mathiasverraes Were you thinking something more along the line of this?\n. @mathiasverraes I have made it so the rounding mode is required in the RoundingMode constructor.\n. @mathiasverraes I have added the static factory methods\n. If you think it is useful I can get it ready to merge.\nOn Wednesday, 3 September 2014, M\u00e1rk S\u00e1gi-Kaz\u00e1r notifications@github.com\nwrote:\n\nAnything on this?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mathiasverraes/money/pull/33#issuecomment-54144692.\n. @toopay in your example of the usd money it doesn't make sense to reimplement the interface that would already be implemented by the money class.\n\nIf interfaces were to be introduced it makes more sense to submit them interface as a fig standard like the psr3 logger interface.\nSebastian Bergman the creator of phpunit also has a money implementation very much like this one. If both this library and that one implemented a common interface that neither defined, then library creators that need a money implementation could gain better interoperability with other libraries that use a money implementation.\n. @toopay it offers no more guarantee to use an interface as an interface can be changed just a an implementation can. You should be using version constraints to ensure contracts are met by implementations.\n. @toopay yep that may be the case but as stated there is no advantage to having an interface defined by this library. You get no more of a guarantee and there isn't any polymorphic motivations. A commitment to semantic versioning by this library would give more guarantee. Thoughts Mathias?\n. Really good point on the service vs value object. :)\nOn Sunday, 3 November 2013, Mathias Verraes wrote:\n\nClosed #37 https://github.com/mathiasverraes/money/pull/37.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mathiasverraes/money/pull/37\n.\n. The core of multiply uses:\n\nphp\n(int) round($this->amount * $multiplier, 0, $rounding_mode)\nIt works as follows:\n1. Multiply amount by specified integer or float multiplier\n2. Round to 0 dp using PHP round and the specified rounding mode\n3. Type cast to an integer\n4. Create new Money value object\nSo the answer is yes, it can do what you are asking, in the sense that you can have a float multiplier, but remember that the Money class works in the smallest currency unit, so in the case of USD as an example, you can't get sub-cents values. 1 cent is the smallest unit, and the multiply method will respect that and your rounding mode to arrive at the new value for your new Money value object.\n. :+1: \n. @sagikazarmark Awesome effort!\n. @wpillar the reasons for this design are covered in https://github.com/mathiasverraes/money/pull/53\nThe following commit attempted the same thing: https://github.com/codepilotde/money/commit/ba2ce01fce6d746f78ff6ad4876a38cd70f2d576\n. You should get an error if you try to run this. Because you can't use floats... If 0.1 is meant to represent 10 cents, then you need to use 10 not 0.1.\n. Seems like a reasonable addition.\n. https://github.com/sebastianbergmann/money/blob/master/src/Money.php#L131-L134\nhttps://github.com/sebastianbergmann/money-intl-formatter/blob/master/src/IntlFormatter.php\nWhen displaying currency values you should take into account locale as well. The php NumberFormatter class takes care of this. You should also take into account the currencies subunit when doing the division. For example with Yen you should be string 100 Yen as int(100) and therefore when you format and display you shouldn't be dividing by 100.\nhttps://en.wikipedia.org/wiki/Denomination_(currency)#Subunit_and_super_unit\n. I don't think this should be changed. The existing code will give a much better error message in the case that you pass through something that == 0. The assertOperand function covers the type check.\nAs an example, if you pass through false with your code it will say 'Division by zero'.\n. Here are some more examples:\ncam-mbp:~ cam$ php -r \"var_dump('' == 0);\"\nbool(true)\ncam-mbp:~ cam$ php -r \"var_dump(false == 0);\"\nbool(true)\ncam-mbp:~ cam$ php -r \"var_dump(null == 0);\"\nbool(true)\n. The woes of type juggling\n. @mathiasverraes I just noticed something that should be fixed though :). On line 232 we are still passing in true from when we used to pass in the division boolean.\n$this->assertOperand($divisor, true);\n. You are right in everything you say. Unrestricted integer support has been discussed before and would be possible with something like bcmath (https://github.com/mathiasverraes/money/issues/7), but it just hasn't been implemented.\nI think that we should at least add a clear message in the README that money sizes are limited by integer size in your environment (32bit vs 64bit), and if you are using a database the same holds true for that.\nThere are also some other things to be aware of, if you look over at the @sebastianbergmann implementation of Money, I added a bunch of failure states when arithmetic on money would cause loss of precision (and sometimes completely crazy values).\nhttps://github.com/sebastianbergmann/money/commits?author=camspiers\nThese changes should probably be ported over to this library too. These problems become particularly pernicious when dealing in currencies like bitcoin, but they are also a huge problem if people don't validate ecommerce inputs well.\nTo give an obvious scenario, imagine a product worth $5000, on a 32 bit system, adding 500000 of these items to your cart will cause your cart to have a negative total, WTF, let's just hope that people have their systems setup well to catch this stuff.\nhttps://github.com/mathiasverraes/money/blob/master/lib/Money/Money.php#L216\n. You're welcome. I don't have bandwidth at the moment, but I am fairly confident that were you to provide a PR @mathiasverraes would be keen to add the changes. Good luck.\n. thanks!\n. @cordoval Sorry, I thought you were meaning something else. What do you mean by \"integer\"?\n. There are many other examples of int being used in doc blocks in this codebase, and only one example of integer. Either I change them all to integer or I leave this one as it is. @mathiasverraes Any preference either way?\n. Should we make this Iterator and ArrayAccess friendly?\n. Not in the case of an overflow. Php overflows to float.\nOn Tuesday, 2 September 2014, Mathias Verraes notifications@github.com\nwrote:\n\nIn src/Money.php:\n\n@@ -223,7 +242,11 @@ public function subtract(Money $subtrahend)\n     {\n         $this->assertSameCurrency($subtrahend);\n-        return $this->newInstance($this->amount - $subtrahend->amount);\n-        $amount = $this->amount - $subtrahend->amount;\n  +\n-        $this->assertInteger($amount);\n\nThis can't possibly fail, the subtraction of two integers is an integer.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mathiasverraes/money/pull/55/files#r16972124.\n. Haha, yeah I see what you mean. The context where it has been useful for me\nin the past, is having a fully general way to handle loss of precision in\necommerce. This includes handling cases where things added to a cart for\nexample cause overflow.\n\nOn Tuesday, 2 September 2014, Mathias Verraes notifications@github.com\nwrote:\n\nIn src/Money.php:\n\n\n* Asserts that an integer value didn't become something else\n* (after some arithmetic operation)\n*\n* @param numeric $amount\n*\n* @throws OverflowException If integer overflow occured\n* @throws UnderflowException If integer underflow occured\n*/\nprivate function assertIntegerBounds($amount)\n{\nif ($amount > PHP_INT_MAX) {\nthrow new OverflowException;\n} elseif ($amount < ~PHP_INT_MAX) {\nthrow new UnderflowException;\n}\n}\n\n\nI don't really see the point. If you have 92233720368547758.07 EUR/USD/...\nthen you probably didn't make that using this library :-) Oh well, happy to\nmerge it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mathiasverraes/money/pull/55/files#r16972250.\n. Minor, remove the space round (\n. \n",
    "sa-tasche": "using gmp?\n. The default currency should be the local currency, set in the php.ini (or user.ini). So it's probaly a good idea to have a util class for currency/money and a \"DefaultMoney\" class which uses this util class.\n. No. But it's obvious for me that the user want to use his currency in her own shop. And that's the point.\n. @mathiasverraes @marcospassos (Sorry for my bad english)\nI meant something similar to $locale = ini_get(DEFAULT_LOCALE);\nBut I found only intl.default_locale in php.ini and that's from a PECL extension.\nMy second idea was to using something like\nsetlocale(LC_MONETARY, YOUR_DEFAULT_LOCALE);\n$formatted_money = money_format(....)\nBut at this time, I use my third solution: I allow to use a \\Closure. So if it's set, the Money/Currency object calls it and so the user can use her own solution/extention (like NumberFormatter or native PHP functions like money_format() or what ever she want.\nBut as a fourth solution it's possibly better to use the own 'CurrencyFormatter' interface.\nI prefer this idea.\nTo sum up:\nFirst basic idea: I have a Currency class which knows the number/currency format. And a Money class which adds his number to its format -- similar to \\sprintf().\nSecond basic idea: I have a mechanism which knows my default currency and all my supported currencies.\n@marcospassos You see hopefully, that I mean the same thing. With the difference that I don't want to using a new config file but the PHP's user.ini. Your right, that it's a bad idea to using a static file or to rely on the existens of an user.ini.\nI think this is the reason why you doesn't understand me. But I didn't considered that I can not explicitly use user.ini.\n. @mathiasverraes @marcospassos @asm89\nI prefer to introduce a MoneyBag class, which can handle zero and non-zero amounts of money objects, and handles the exchange rates and currency pairs. A money object must have a currency. (?? No NullCurrency object for the money class, but for MoneyBag. ??)\nA new class should be introduced for representing a (bank) account. It should handle Money and the new MoneyBag. The (bank) account object handles only Money or MoneyBag, and must not handling exchange rates or currency pairs. With this features we are able to representing a (bank) account which can handle one currency (only Money) or more than one currencies (MoneyBag). And our Money represents only a value.\nA money object with a zero amount is comparable to any other money object with a zero amount, but is not interchangable (they are not equal).\n. [Edited...]\nThe point is, that I use a class with another class, and never in a vacuum.\nhttp://www.php.net/manual/en/language.oop5.interfaces.php#107364\nFirst\n1.0. To seprate the implementation from the API;\n1.1. If I have an interface, I can change the implementation and reuse the interface;\n2.0. I understand interfaces as a way to define contracts between classes (i.e. adapters, a class which use the impl.);\n2.1. If I have a contract, I can implement an adapter (or adapters) for more than one implementation;\n3.0. If I seperate, I can implement a MoneyBag class which can handle all money objects and which can handle exchange rates and acts like a Money class, ....\n[1.0 .. 2.0] a good practice, I think so.\nSecond\nI imagine I'm a developer of a big project.\nGiven that my project team (or my company) using an another monetary class, but our client use Verraes' Money class.\nThat brings us to the task: \"Write an adapter\".\nThird (or second, if you will)\n----> means \"relys on...\"\n----+ means \"implements\"\nExample 1 (Why an interface for the Value Object Money?)\n[ Money class ] <----------------- [ adapter ] ----+  [ monetary interface ] <----- [something / from an another company]\n[ another monetary class ] <--------/\n- (Explained above in Second)\n- Money class and another monetary class could be implementations for two web shops.\n- (As an addition: If I want now to use only my own implementation, I can rewrite the adapter to my own monetary impl without changing the interface. An additional reason for example 2)\nExample 2 (Why interfaces?)\n/-----> [c3]\n[srv1] ------->\\\n[ srv2 ] ----> [ adapter... ] <---- [ srv3 ]\n  \\<--------- [ c1 ]  [ c2 ] --------->/\n- Three seprateted services (srv#n) with three seprate classes (c#n).\n- The shops communicates through the adapters (or adapter).\n- srv2 and srv3 can be on two sperated servers (SaaS or something else)\n- srv1 and c3 can be placed on a local server.\n- One the services can be market places, social networks, etc.\n. Stop this development!!!\nThe currency class should only represent a (any) currency and never know anything about \"known\" currencies.\nI suggest a currency factory.\nWhat if I wants to use it for my own currencies (or for Facebook coins and so on)?\n. Yes but this source dependency is a bad idea.\n. @thewilkybarkid\n\"The currency class should only represent a (any) currency and never know anything about \"known\" currencies.\nI suggest a currency factory.\nWhat if I wants to use it for my own currencies (or for Facebook coins and so on)?\"\n. @marcospassos +2\n. @mathiasverraes  Because it's OOP?\n. First: learn the basics of programming. Your question is typical for beginners.\nYou must now: How I get values from a form. Read PHP's manuel: http://php.net\nIf you now it you must learn to use an object/class in PHP.\nThat it's!\nExample:\nYou know how you get values from a form and you have the following variables:\n$form_amount\n$form_currency\n//If you know how to use classes, you know what to do.\n$currency = new Currency($iso_code, $name); //You need to look up the name. \n$example = new Money($amount, $currency);\nRead the code/API doc to learn whether you can use a Factory. If you don't know what that is use google.\n. ",
    "josecelano": "Which BigDecimal class are you planning to use?\nI am working on an implementation using https://github.com/Litipk/php-bignumbers\n. @mathiasverraes I have done a test implementing Money class using a BigDecimal library (https://github.com/Litipk/php-bignumbers) I have only changed amount type from integer to Decimal.\nHere is the test:\nhttps://github.com/josecelano/money/blob/master/lib/Money/BigMoney.php\nI call it BigMoney but I only want to use your libary with big integers (I do not need to scale over the currency default decimal places). Then I suppose it is a new implementation of Money. Althougth I think it could be easily changed to implement your BigMoney.\nJust after the commit I have found this new library: https://github.com/keiosweb I suppose I can use it for all possible values (int, big int and more presicion). Do you think it's better to have only one class rather than 2 as you propose? I think it is a good idea to have two but the first one (Money) should support big amounts. I suppose there could be countries with hyperinflation where you can easily overflow max integer in 32 bits systems.\n. OK thanks @sagikazarmark but I do not see any big integer in that brancg. It seems internal amount attribute is still an integer.\n. @sagikazarmark I have not had time to test this new verion but there is something I still do not understand, you are using big integer functions for calculations but you are still using an integer to store the amount attribute, then you still have the integer max size limit. For example if I want to add two Money objects and the result is greater than max integer value (in 32 or 64 bit systems), then the result does not fit in an integer.\nGMP calculator add method returns a string (gmp_strval) but Money constructor expects an integer.\n. Thanks!\n. Bitcoin has 8 decimal places and the maximun amount available will be 21 millions (when bitcoin mining ends). Decimal places of bitcoins are called \"satoshis\". 21 millions converted to satoshis would be: 21.000.000 * 10^8 which is greater than max integer in 32-bit system (2.147.483.647). \nTherefore, it is not sufficient to add BTC to currencies list.\nI have read in this issue:\nhttps://github.com/mathiasverraes/money/issues/7\nthat your are planning to add BigMoney class to allow decimal scalability. In the bitcoin case it is needed scalability even without using more than 8 decimals, but It seems you do not like using float as I have read here:\nhttps://github.com/mathiasverraes/money/pull/55/files#r16972250\nWith int type max value (32 bit system), bitcoin amount would be 21.47483648 satoshis which is a very small amount.\nCould bitcoin be used with that BigMoney class?\n. Could be possible to use DecimalN like this:\nhttps://github.com/ikr/money-math-php/tree/master/src/MoneyMath instead of int?\n. Hi @thedavidmeister maybe this could be interesting for you:\nhttps://github.com/mathiasverraes/money/issues/7#issuecomment-91863422\n. Some months ago I was testing how to deal with bit integers and I did this fork:\nhttps://github.com/josecelano/money/blob/master/lib/Money/BigMoney.php\nInstead of using integer or string for the amount I used another class. In this implementation Money has not the responsibility to deal with bit integers and it delegates to another class. The only problem is that library uses only bcmath extension. But maybe there is another similar class which uses calculatorsas you did it.\n. Sorry,there was definitely a misunderstanding. What I called BigMoney is an implementation of Money which allows big integers, not decimals. I used Decimal class but internally I force the constrain of not using decimals, I mean all values would have no deciaml part even if that class allows it. But the idea I want to expose is you could use another class to store the amount and delegate to that class the responsabiliti of dealing with bit integers. In fact, I was looking for a BigInteger class but I do nto remember why finally I decided to use Decimal for that test.\n. ",
    "sagikazarmark": "@josecelano big integer values are supported now on the nextrelease branch.\n. Integer support is implemented as Calculators. If you have gmp or bcmath installed, it will automatically use those which allows you to represent big integers.\n. @josecelano that's what the docblock says, but look at the validation:\nhttps://github.com/mathiasverraes/money/blob/nextrelease/src/Money.php#L57\nThere is a PR which fixes that docblock as well.\n. #58 implements some sort of repository for currencies. You will be able to use custom currencies, but it will be your responsibility to check whether a currency is \"real\" or not. (By the definition of value object validation will be no more part of the Currency implementation)\n. #58 Implements a decent logic for solving this issue. None of the mentioned solutions can be taken into action. IMO became invalid.\n. @camspiers Your PR is still valid. I saw it earlier, so I did not change those methods. However, after merging some of my PRs, you will probably have to rebase your branch. About the integer thing: the upcoming PSR about dockblocks will probably require that all types full names are written. This is why I corrected bool and int values to boolean and integer.\n. Anything on this?\n. :+1: \n. @mathiasverraes I have a feeling that this became invalid. Most of test changes is already in place by #54.\nRegarding other commits:\n- I don't think that logging config should be part of default phpunit config. It can be set up on demand by a custom phpunit config, this is why the extension dist is used\n- Ignoring deprececated uncovered functions is pointless\n- Same for travis phpunit config, Doctrine extension is not part of the library anymore\nI ported all useful changes to #57 \n. Isn't it already in place?\n. What deprecated features exactly @mathiasverraes ?\n. Cool :+1: \n. These two branches are quite far from each other now. Should we just leave it that way, move next release to master and master to 1.x, or try to rebase?\nI would still create an 1.x branch anyway, so not sure merging this worths the hassle.\nThoughts?\n. I think this PR became large and completely unmergable, so I am closing it.\n. Regarding subunit handling and having a list of currencies this aproach is not bad at all.\n. IMO this is fixed.\n. Should new features be documented in the \"old\" documentation? Or wait for implementing the \"new\" one?\n. For now, I am willing to maintain the sphinx version\n.  There were already a Doctrine Type which is removed now. The removed type can be found here. However it makes it a bit weird to store it in database, since the database value must be stored as string.\n. Well, I am sure you can understand why I say it is weird. Think about a distance measurement: you do not store it as a string with a unit. You specify a base and convert it if needed.\nIn case of currencies it is a bit hard, since the conversion rates are not simple(not just 10 for example) and are always changing. So from this point of view storing monetary values as string is ok.\nIn other cases (like an ecommerce site) the currency is not strongly tied to the actual value, since EVERY value has the same currency by default and usually this can be converted to another currency (with the CurrencyPair for example). So I would rather say storing integers is better when it is possible.\n. I did not say correctly than, but usually (meaning open source Magento, OpenCart, Prestashop or the upcoming Sylius, etc) it is the case. Since I have no real experience with international ecommerce (there are not much international business like this in Hungary) I can't say for sure. However the point was to provide an understandable example where not storing the currency with the value is possible. And under these circumstances I still think storing integer values makes it easier to handle it as data. But I get it, in some cases it simply does not matter whether it is stored as integer or not. (Especially in PHP, where for example MySQL queries return all data as string)\n. This is an Entity, not a type. IMO it is wrong, because Money is a value object, which should rather be a type. Question: how do you handle the case when more than one entity requires a \"money\"? Do you even associate it to other entities?\n. Sorry, missed that.\n. @mathiasverraes Why isn't these classes final then? IMO Value Objects in general should be final. Two possible arguments against it:\n- Using a decorator means you cannot pass it eg. in type hinted functions. (Answer: use interfaces, but in this case be prepared for a hard work. Fork the project instead)\n- Cannot be mocked easily (Answer: Don't mock them. They should be treated as types. You wouldn't mock a String object eg. in Java, right?)\n. I just confirmed that I agree with you. When you say they should be final, do you mean they WILL be? Eg. in a next major release?\n. Absolutely not, it is better to clear the \"standards\".\n. Actually I agree with you in some points, but I think it is better to clear what a function does in some cases. Like: greaterThan. Which is greater than what? This might be something that you possibly call noise.\n. Regarding the PHP exception thing, that blog post does not even exist anymore. I think adding interfaces, because they might be used in the future is not a good solution. And you can even do it later.\n. The last comment was only regarding the docblock description marking as noise.\nHave you considered changing to PSR4 autoload?\n. You might want to fill in your email address in @author block.\n. Test does not really \"share\" the namespace. They are only loaded when the composer is in \"dev\" mode, this will probably only true when using phpunit. The reason for this that it is easier if the test does not have to import all the classes. (And the tests does not really need a namespace at all)\nThe reason I like adding @covers annotations to tests that I will always know what that test should cover. And of course it is about coverage, and let PHPUnit know what functions are covered in that test.\nThe reason behind newInstance is that the developer is forced to create an instance based on the current object. It makes sure that the created object will not contain any other currency, etc. In fact, this is how I (and many PHP devs) solve this in case of immutable objects. From the other side, it also means that the created object is not just AN object, but it is derived from the current one. I can remove that if you want, but this is something that makes it easier to work with immutable objects (and read their codes, IMO the name newInstance is self-explaining).\nSorry, I forgot I am commenting to a PR. :(\n. I am done with commenting to this PR. Since (as you said) this is a really big one, I would wait for this being accepted to avoid merge conflicts.\n. Regarding the newInstance thing: I am curious if I was able to convince you or just accepted it? ;)\n. Ok, changed it\n. Is it possible to merge this PR and collect all documentation in one PR?\n. Reverted functionality\n. I am noz even sure if this implementation is a good idea. Easier to implement custom logic, but having that repository injected as an instance.... wince Currency is a Value Object I am not sure if it is a good idea.\n. Probably Currencies should not be injected into Currency. You can use the currencies implementation to create a new Currency or you can just instantiate it. However, this way there is no real validation whether the currency is valid or not.\n. Ok, so I started the good way. Let me see if I can implement this.\n. Should I adapt documentation?\n. How about a createCurrency function in the interface?\nSince the value object depends on some sort of \"code\" (ISO, etc) it is possible to have it in the interface. This also means that the implementation also have to do some validation. If this is not going to be part of the interface UnknownCurrencyException should probably be removed because there is no more validation in the core itself.\nI would also like to create a general implementation (like Currencies) and implement a final ISO on top of it.\n. I revised myself, create currency is useless. However I created a general implementation for Currency repositories.\n. Function name changed\n. @mathiasverraes any update?\n. Is there anything I need to do?\n. I was also thinking about this. In this solution CurrencyPair seems to be a pointless extra layer, however pretending convert is an internal function (meaning CurrencyPair is the recommended way of currency conversion) it might be OK. (My only objection is: it probably shouldn't be part of a value object, but I am not 100% sure about this)\n(Regarding CS: a new line before return statements is recommended, and integer is used all over the file as type instead of int)\nAlso about dockblocks: $conversionRatio is not strictly float, so integer|float might be better.\n(I only try to be consistent about dockblocks, because they are some sort of in-code documentation for developers)\n. I read the code like a CS fixer, so did not realized the length. :-) \n. Is there any specific reason why you replaced all occurences of integer type in dockblocks with int? IMO (and according to the upcoming PSR) integer is better.\n. Why the colon? I think it should be aligned with the stringToUnits method.\n. Also, PRs are not welcome against the master branch.\n. I didn't say it should call the stringToUnits function, but should be aligned with it. So what goes in stringToUnits that comes out from __toString.\nRegarding the branch thing: sorry, I was not correct. Not against, but into the master branch. The master branch is kinda legacy now, however @mathiasverraes just tagged a hotfix release. Other than that should not be merged into the master, because the development branch is nextrelease. Merging into master would also mean that it has to be ported to the nextrelease branch as well.\n. Since the library is not depending on ISO currencies any more, I wonder if it is a good idea.\n. The relevant PR is closed.\n. Hey guys,\nThese things look very interesting, I would like to bring these libraries closer.\n. Thanks for sharing guys.\n@alcohol we rely on a currency list added in #125\n@antonienko based on your work there is this is WIP: #123\n. I don't think that comments add a value, but being consistent about them does. I don't think that the description is a MUST HAVE part of it, but if the rest of the class has documentation (parameters, return value) then a PR should follow it. It's part of the Coding Style (or at least should be).\n. I only meant being consistent about STYLING comments. It is the same as using spaces or tabs, camelCaseing, etc. Being consistent about using long/short name of primitives (int/integer), separating return tag from parameters, etc.\nI admit, I usually like being consistent about EVERYTHING.\n. Thanks for the tip @teohhanhui \n. @teohhanhui I would prefer keeping money clear from convenience stuff.\n. Some docblocks are still in. :+1: anyway\n. :+1: \n. @estheban There are some docblock issues. Con you take a look at the comments above?\n. Thanks. Can you please squash your commits. Also, does this only apply to the previous version (master branch) or the next version as well?\nIn the latter case: can you please submit your PR against the nextrelease branch instead?\n. Thanks\n. Currency lists have been completely removed from Money. No more currency code checking. If you need to work with a set of currencies, you have to implement Currencies interface.\n. @fabiocarneiro Indeed it is :)\n. The current master is likely to be renamed to 1.x and maintained for some time. Since this PR makes sense on that branch, I am merging it.\nThank you @fabiocarneiro \n. Will do as soon as I get some time. Please follow #109 for details.\n. Currencies are not necessarily ISO currencies. They can be anything. Maybe this makes things more comfortable, but don't think it should be added to the core class.\n. The point is that the possible types of currencies are not limited. You can use 'gold', 'bitcoin' or anything else as \"currency code\". ISO currencies are bundled with this repository because they are the most common forms of currency code. The library would work just fine without the included currency list.\nSo you can't even auto generate them, since there is no limitation on the currency code.\n. I am reluctant to accept that as an argument. It maybe uncomfortable, but I don't think including it is right.\n. For the record: I am not a maintainer of this repository, so it is not my call.\n. @mathiasverraes Yeah, got the notification, came out of nowhere. :smile: \nThanks for the trust.\n. Will do, thanks. I will try to move forward with the big money idea if I have the time.\n. @mathiasverraes I stated above I would be happier without this. We have been accused with \"not having aligned opinions\" (which is not a major sin I think). So what's your opinion before closing this without having our opinions aligned?\n. Thanks anyway @davidkalosi, contribution to OSS is always appreciated.\n. I have various feelings about this.\nFirst of all: you can absolutely create imaginary currency types. There is no limitation on that. The fact that only an ISOCurrency list is available in the repository does not mean you can't. In fact, this is the reason why we introduced AvailableCurrencies: to allow you to provide a custom list of currencies.\nSecondly: there is a good reason why the Money is not aware of any currency loading at all. It is a value object, there should not be more responsibility in that class.\nLast, but not least: Currency is a value object too, thus introducing an interface breaks the rule IMHO. Not just because you can implement a custom one, but because the currency should not have anything else, but the data (code) which identifies it. Why do you need an interface then?\nLastly: I can hardly see the extra features this PR adds. I mean, what is that you CAN'T do without this PR with the current implementation?\nCurrency auto-loading? That is your responsibility and should not be in the core. And as I proved earlier, you can do it, ISO is not hard coded.\nCustom currency implementations? As said above, it breaks the Value Object being of the Currency.\nFor the record: I've been trying to implement something similar earlier (meaning my custom money implementation) with interfaces, loaders and the like, but then I found @mathiasverraes's package and I found it much more better. The point is that I think it tries to be very strict about how money should be handled and reduces extensibility to a minimum level which is fine IMO.\n. Actually you confused me a little bit.\n\nIn fact I think that currency should be always passed in the constructor.\n\nIsn't it right now?\n\nThe only reason I've introduced this loading login is to allow \"Money::CURRENCY\"\n\nCan't you do this currently?\n\nbe forced to only have the \"code\" property\n\nThat's where I disagree. The point of currency is to provide information about the money value and nothing more. Any further information should be stored elsewhere, where you can actually use the Currency object as the key.\n\nI have currency name, number of decimal precision\n\nI admit that this is related to the currency. However the point of the Currency object is to let you identify. So this kind of data should be stored elsewhere. (Since you mentioned doctrine: Currency is an association, not an entity). At least this is the case now, but we can argue about it.\n\nAlso, these informations are saved on a backend (i.e. Doctrine), so always duplicating force the application to have and use adapters.\n\nSorry, what? :smile: I have my own doctrine types and extensions for money which work just fine.\n\nyou can load all the currency at once, or load only the one use need (e.g. from DB).\n\nThat's again something that is out of scope. If I were you, I would create a factory wrapper which contains all your custom knowledge to load currencies and any further custom logic. Also, check the ISOCurrencies, which itself does the currency loading and can check if it is in your custom set.\nIt seems to me that (almost) everything you want is already in the library. That extra which is not should be implemented as custom logic IMHO.\n. > In the current implementation the allocation is left to a simple new statement with a fixed class.\nThis is only a problem because you want custom currency implementations.\n\nit seem so natural to allow different currencies implementation.\n\nWhy not a money interface then? I think currently the approach is to have Currency as a Value Object, thus an interface is not acceptable here. If @mathiasverraes agrees to change that... However, there are still problems with your Currency implementation: for example equals should only accept an object of the same type, not an interface. Typehinting is a perfect solution there, a type check would not be.\n\nISOCurrencies, ... it seem so natural to allow different currencies implementation.\n\nISOCurrencies? Where?\nI understand it seems easier to have all those information in a Currency object, but it simply does not belong there. Again: Value Object. Short definition: an object representing a simple entity (aka. value in this case). Currency itself (not the object) belongs to the Money (not the object). It really matters if you pay 200 something for an item: dollars or bitcoins? That's why currency belongs to the money. But name? It does not. Imagine the scenario: you are developing a multi language e-commerce site. Do you really want to put the name into the Currency object. Or just the identifier which gives you the proper translation of the currency name. This is just an example, where it is not a good idea, but also shows why it is better to have Currency as a value object.\n\nBut to use Doctrine, I cannot just pass \"EUR\" I should pass the persisted Currency. Are you doing another easier way?\n\nIIRC @mathiasverraes puts the currency code into the price field and parses the string into a Money object using a DBAL type.\n\nThis is the first thing I have though, but consider this two examples\n\nYou are overcomplicating things :smile: \n``` php\nuse Money\\AvailableCurrencies;\nuse Money\\Currency;\nuse Money\\Money;\nclass MoneyFactory\n{\n    private $currencies = [];\npublic function __construct()\n{\n    // load currencies\n\n    // example\n    $this->currencies['EUR'] = [\n        'name'         => 'Euro',\n        'reversedName' => 'oruE',\n        'whatever'     => 'anything',\n    ];\n}\n\npublic function createMoney($amount, $currencyCode)\n{\n    $currency = new Currency($currencyCode);\n\n    // optionally check if it is available:\n    // $currency->isAvailableWithin($this);\n\n    return new Money($amount, $currency);\n}\n\n/**\n * {@inheritdoc}\n */\npublic function contains(Currency $currency)\n{\n    return isset($this->currencies[$currency->getCode()]);\n}\n\npublic function getCurrencyName(Currency $currency)\n{\n    if ($currency->isAvailableWithin($this)) {\n        return $this->currencies[$currency->getCode]['name'];\n    }\n}\n\n}\n```\nUsage:\nphp\n$factory = new MoneyFactory;\n$money = $factory->createMoney(123, 'EUR');\n$currencyName = $factory->getCurrencyName($money->getCurrency());\nThe good thing is that you can inject this factory into any of your custom logic (formatting, storage) and you can use it there. So that these kinds of custom data do not have to travel with the VALUE object, since it is not value, but some kind of metadata. If you are really concerned about separating your code, you can have your own Metadata (AvailableCurrencies with some extensions) class (which handles loading and is injected into your Factory) so that you have the metadata and factory logic at two different places.\n. > I mean the currencies.php file and the like... \nIt has nothing to do with the Currency object. It is just there, because it is the most common use case.\n\nSo, you are suggesting to have services which provide property and method of currencies, instead of providing property and method along with the currency.\n\nExactly. The implementation itself is up to you. Imagine it like Doctrine's metadata....\n. I would close this for now.\n. Hm, should we include this in the repo?\n. Well, it seems bitcoin is a widely requested feature. Further more, it is plain PHP code without any dependencies. Given these two details, I don't think it's a problem to include it.\n. Fixed in #148\n. Fixed in #100 and #130\n. :+1: I think you should open a PR against nextrelease as well.\n. :+1: \n. Duplicate of #99\n. > Formatting is one thing, but some way of getting back to a string (or float) should belong in the Money-class, shouldn't it?\nI don't think so. There are so many ways to represent money as a string, I don't think we should pick one. Also, construction is somehow belongs to the Money object, transformation to other types does not.\n\nAlso: there are forks / similar libraries that have unique features (for example big numbers).\n\nYeah, this is planned for a long time now. If you have examples, forks which you know, can you pleas link them here so I can take a look?\n\nIs there an interface that we could agree on\n\nSo far, there weren't any as we are talking about a ValueObject.\nThere is an initiative for standards: https://github.com/e-ig/standards/pull/3\nSo far, I am not completely satisfied with it as is rather an opinionated thing than a real standard.\n\ncould we merge some of these features in this library?\n\nAbsolutely. Do you have some sort of list of these features?\n. There is already a third-party formatter interface, see mathiasverraes/money#71.\nI am pretty much in favor of the idea.\nI wonder if it should be part of this library, or a separate package. I think that maximum half of money representation is actually used for displaying the value, not just working with it, but having the interface and some kind of \"default\" implementation outside of this package increases complexity.\n. Well, I haven't looked closer at the referenced library, but I knew something is there.\nAs for MoneyFormatter: I don't actually see a problem having it in this package, so let get this moving. @frederikbosch If you want to provide a PR, that would be great.\nI have something in my mind for a long time now: sub unit formatting. The idea is to pass in a subunit, or set of subunits for Currencies (this can be clarified) and modify the value to a float value if necessary. To achieve this, we would need to introduce some kind of ScalarMoneyFormatter which does the same as money formatter, but with scalar values.\nNot sure though if it worths the hassle, but we have to provide some way to support subunits in the future.\n. Something like this:\n``` php\n<?php\n$money = new Money(1234, new Currency('EUR'));\n$formatter = new SubunitFormatter(new SomeOtherFormatter(), ['EUR' => 100]);\nclass SubunitFormatter implements MoneyFormatter\n{\n    protected $delegatedFormatter;\npublic function __construct(ScalarMoneyFormatter $delegatedFormatter)\n{\n    $this->delegatedFormatter = $delegatedFormatter;\n}\n\npublic function format(Money $money)\n{\n    //calculate subunit\n    return $this->delegatedFormatter->formatScalar($scalarValue);\n}\n\n}\nclass SomeOtherFormatter implements MoneyFormatter, ScalarMoneyFormatter { }\n```\n. Nope, 12.34\nThe point is that subunits are also stored in integers, this way you can display cents and other values.\n. Haven't checked the impl so far, but yes. :+1: \n. Will do, thank you.\n. I will review the changes and tag a release, hopefully this week.\n. Tagged v1.3.0\n. Should we have a separate class for this (like the BigMoney idea)?\n. Fixed in #115\n. This is nice @thewilkybarkid thanks. Can you please answer to the few comments above?\n. I think this is OK.\n. Thanks @thewilkybarkid \n. This is awesome, thank you.\n. Can you please open this PR against the nextrelease branch?\n. Thank you.\nA few more things I noticed are commented. Also, the indentation seems to be inconsistend: sometimes 2 space, sometimes 4.\n. Makes sense. Decent IDE will reindent it anyway.\n. Cool, thanks. And even rebased. :+1: \n. Sounds good. Merry Christmas :smile:\n. > CalculatorInterface\nNo need for the Interface suffix.\n\nIt should be possible by using the API to change the (static) calculator.\n\nIs there a reason for that? Does it make sense to allow the user to change the priority order we define?\n\nString are now allowed inside Money because\n\nSoes it mean strings are allowed from the public API as well? I am not a big fan of the idea, because it requires more validation logic than necessary.\n\nWhen possible all calculators must implement all functionality that is now in use by the Money class\n\nIf we have an interface then this assumption is moved to the fact that the interface must be implemented by all calculators.\n\nThe BC library does not convert '0.500000' to '0.5'\n\nIs this a problem? With don't need decimal precision.\n. Nice PR @frederikbosch.\nI added some comments, mostly related CS thing, but there are some design questions as well.\n. > The string is validated\nBut is it necessary to be a public detail? IMO we can do it internally, but from a public API point of view, accepting integers is fine.\n. Sorry, missed the big integer point. You are right of course.\n. > If we have an interface then this assumption is moved to the fact that the interface must be implemented by all calculators. Right, but libraries have limitations themselves, like I said in my previous comments, e.g. GMP does not have rounding build-in. I tried to create a workaround for the limitations.\nIf necessary, we can create interfaces to indicate supported features and act according to it. For example: RoundingCalculator has a round method. If calculator is not a RoundingCalculator fallback to something. This is just an example, not sure if in this case this is the right solution.\n. No, it's not. :)\n. I generally agree with you. But PHP 7 is just released and not yet available in the latest Ubuntu LTS. Not to mention, that most of applications will need 5.x support for at least a few years. I don't feel the urge to drop 5.x support right away.\n. > The only things that are left are {inheritDoc}\nLowercase please to be consistent with the rest of the library.\n. There are some other inline comments left.\n. @frederikbosch Git trims it when you take a look at the file. In diffs, git marks a missing new line with an icon.\n. It is now, yes.\n. Rebase the branch please. I think it's mostly comments, or stuff, what you moved to PhpCalculator.\n. Have you pulled the nextrelease branch from upstream before rebasing?\n. You should.\n. It is, but in that case I have to close this PR and there are some things you wanted to do.\nHere is how you can rebase the branch:\nbash\ngit remote add upstream https://github.com/mathiasverraes/money.git\ngit fetch upstream\ngit checkout nextrelease\ngit rebase upstream/nextrelease\ngit push origin nextrelease #if this fails, it means you have commits in your own nextrelease branch, where you shouldn't have\ngit checkout <YOUR FEATURE BRANCH>\ngit rebase nextrelease\nAs soon as there is a conflict, the rebase will stop and you can fix the conflicts (if you use an IDE, you can use it, otherwise good old plain text). When you are done with all conflicts:\nbash\ngit add .\ngit rebase --continue\nBut you have to make sure that every conflict is resolved or you might commit unresolved conflicts into the library.\nWhen you finished: git push -f\nAnother possibility is to pull your branch into the main repo an open a PR from there, but in this case, you still need to open a PR against that branch if you want further modifications.\n. Ah, realized that I can help if you add me as a collaborator to your forked repo.\n. Ok, rebased. Make sure to checkout your nextrelease branch as a new local branch.\n. Looks good to me. I added a few more CS related things, can you please correct those? The rest can be automatically fixed by CS fixer.\n. For now, yes. I am aware of the inheritdoc recommended usage, but it is a common pattern to use it for all kinds of docblocks. IDEs recognize it, even if phpDocumentor says otherwise. There is demand for complete docblock inheritance, and phpDocumentor is working on it for some years now.\n. Cool, thanks. Ready for merge then?\n. Thanks @frederikbosch \n. #111 should automatically be closed.\nTagging sounds good, but we should first rebase/merge into master.\n. This became invalid in #125\n. Thanks @piotrantosik \n. Thanks @piotrantosik \n. A few new lines are missing from the end of files. Apart from that :+1: \n. Cool. :+1: \n. :+1: \n. I had this in my mind for a long time now. So far I have been looking at the ISO library in #71, but your package looks more \"pure\" data source.\nWould you like to open a PR? If so, please remove the update command and the buzz dependency as well.\n. Make sure you are looking at the nextrelease branch:\nhttps://github.com/mathiasverraes/money/blob/nextrelease/bin/update_currencies.php\nhttps://github.com/mathiasverraes/money/blob/nextrelease/composer.json#L18\n. I have some questions regarding your library in general before merging this to get a clear view:\n- What is considered to be a BC break? Removal of currencies? Change in name? Since the code contains some validation features, it is crucial that the same data will always be available in the same version.\n- What is the release cycle?\n. What if a user relies on a currency which gets removed? I think removal of a currency (even if very unlikely) should be considered as BC break, or at least be highlighted as much as the Heartbleed bug.\n. Okay, thanks for clarification.\n. Closed in #125\n. Hm, I wasn't aware of the fact that it is 90MB+.\nI think @umpirsky planned a separate php version of that repository.\n@umpirsky any input to what @barryvdh mentioned?\n. To tell the truth, I am not sure that we need ISOCurrencies in the main repo anyway. Since we have an organization, we can separate this component so that we remove all kinds of dependencies from the main package. WDYT?\nThe package suggestion is a good idea as well, but I think it does not address @barryvdh's concerns, since you still have to install 90MB if you want to use it.\n. @frederikbosch The intl extension is somewhat OK because it is a PHP extension, not really an external dependency. However Swap and CurrencyList are external dependencies.\nAlthough if everyone is happy with making the currency list a suggested dependency, then I am fine with it as well.\n. Oh, just realised that you are suggesting to make it a dev dependency and copy the file. I am fine with that as well. The extra advantage would be removing the extra IO (checking the file existence) operation.\n. @umpirsky thanks for the contribution.\n. Thanks. Please note that this PR is against the current stable, but soon legacy version. See the nextrelease branch for the upcoming release.\n. Merging this into the legacy version.\n. Thanks @rgeraads \n. This is already addressed on the currencies branch:\nhttps://github.com/mathiasverraes/money/compare/nextrelease...currencies\nWould you mind submitting some tests there?\n. Looks good, thanks.\n. Thanks @piotrantosik \n. I like the general idea, but I am unsure about instantiating a new calculator every time. Seems to be an overkill to me. How about falling back to static property in the non-static getCalculator method?\nThe object itself can still be stored in the money object, hence it will be the same reference.\nI can imagine a static globalCalculator property and getGlobalCalculator methods.\nWhat do you think?\n. Sorry, I caused some confusion, I though you might want to keep the getCalculator method. If there is no separation, I think it is better to rename it back to calculator and getCalculator. Sorry about that.\nI think the getCalculator does not have to be static, as we don't want to statically access it. The calculator property can and should be static.\n:+1: Nice catch @piotrantosik \n. LGTM, thank you.\n. This is the legacy branch. The upcoming release branch already contains this.\n. Is this a good idea with the PhpCalculator\n. So calculators return strings and integers based on what?\n. Well, I tend accept this merge, but still need to get used to the fact that amount will be stored as string.\n. Merging the deprecation PR caused some conflicts.\n. No problem, I will do it.\n. Conflicts solved in #136\n. Yeah, BigMoney casued a lot of confusion in me as well. But it refers to the precision of the value, not the integer size.\n. The tests has an error:\nhttps://travis-ci.org/mathiasverraes/money/jobs/102045637#L198\n. > Trying to @cover or @use not existing method \"Money\\CurrencyPair::getRatio\"\nThere is an inappropriate annotation somewhere.\n. :wink: \n. Closes #134\n. :+1:\n. Changelog as well.\n. Well, the same as HTTPlug. :smile: \nAs you said, it's Open Source, so timing does not always happen as planned.\nWe have some open PRs to be merged, some of them are critical. Also, some issues could be addressed in 3.0. After that I would like to go through the usual alpha-beta-release process.\n. I would say rather close than far. No more big changes planned, only the current issues.\n. Docs already has an issue\n. I think leaving master as is can be confusing. Nevertheless being 3.x the default, it's still master's role. So I think we should try to contact authors relying on master.\nRelying on master is a bad idea anyway.\n. Lack of time, sorry. :cry: \n. Development is happening on master branch now.\n. Wonder if require_once and/or caching loaded currencies in a static property could make it faster.\nWDYT @umpirsky?\n. Ok, I'll open an issue for that, let's get this merged.\n. :+1: \n. /cc @florianv @umpirsky\n. Even better what I thought. Currencies are not loaded when not used.\n. Don't worry about the failing tests, it is caused because of some bad phpunit configuration. I will fix that.\n. Okay, rethinking this: MoneyFormatter makes sense. In theory (even if doesn't make sense) CurrencyFormatter would be a viable option.\nI haven't thought about a PreciseMoney implementation yet, so that would require a custom formatter interface.\n. THanks @frederikbosch \n. Travis only has en_US installed. The funny thing is that I didn't have this issue with/without nl_NL installed, I had totally different issues.\nI would rewrite the test examples to use en_US locale, it is probably commonly installed for others anyway. I would also skip tests on machines where en_US locale is not available.\n. > That might lead to too many unexpected results.\nWhat might lead to ...?\nI think I missed an important part: we should try to set the locale to en_US at the beginning of the test. If it fails, skip.\n. I didn't pay too much attention, maybe something else was wrong. It is PHP after all, stability is not one of the keywords. Also, intl is especially something vague.\n. I think we could preserve the \"original\" parsing logic in a separate parser, which was less smart, but more stable.\n. Agree, I didn't want to give up on intl extension, but for simpler cases, the previous logic could be useful as well, like SimpleParser.\n. :+1: \n. Okay, but I guess this way you are able to stick to the \"default/previous\" strategy or come up with a better, since we have an interface for that and no pressure on which to use.\n. I remember I had some issues with NumberFormatter itself, and this injection approach, but I can't see any better solution. Although, it would be nice to look around and find some usage examples.\nMy biggest concern is the required configuration in of the NumberFormatter. It needs some basic config to work well (which is not necessarily configurable later).\n. Some resources I found:\nhttp://ux.stackexchange.com/questions/1869/preferred-format-to-display-negative-currency-us-english/1875\nhttp://stackoverflow.com/questions/31408633/numberformatterparsecurrency-gives-different-results-on-machines-with-same-php\nI think formatting/parsing is not that easy after all.\nFor example I have this error on my machine:\n1) Tests\\Money\\MoneyFormatterTest::testDifferentDigits\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'\u20ac\u00a06,135-'\n+'\u20ac\u00a0-6,135'\nI think it depends on some setting we haven't think about: machine locale maybe?\nIf so, I propose setting the locale specifically in each TestCase (or check if phpunit provides an easier way to do so, like env vars?), for example en_US (I think this is the only one installed on travis).\nIf this is the case, we probably can't control the behavior, which we have to document.\n. > en_US (I think this is the only one installed on travis)\n. https://docs.travis-ci.com/user/common-build-problems/#System%3A-Required-language-pack-isn%E2%80%99t-installed\n. So the problem is that the intl extension falls back to something, if the given locale is not found, right?\n. Yup.\n. I installed nl_NL locale, no change. Also, if I set the locale in PHP specifically to nl_NL.UTF-8, I get even more errors. :smile: \n. @frederikbosch thanks for checking. Actually I meant this for parsing, seems I failed to ask the question in the right issue.\n. Thanks @frederikbosch \n. Thanks @frederikbosch \n. Hey @judgej \nThanks for reporting the issue, good catch.\nIf you have already fixed this issue, can you link us to an existing solution/in what context you used this? Just for curiosity. Thanks\n. You are right, Money does not accept other than an integer value. However, it is an issue of Number object, which we might use in a PreciseMoney.\n. @judgej Number is currently used internally. From Money's public API there is no way you pass a float value in, but there is a chance that the Number class will be used in the future where this could actually cause an issue (PreciseMoney).\n. PR merged, this can be closed I guess. Thanks everyone.\n. Nice solution. :+1: \n. @browner12 I am not completely sure I remember what exactly your design was. But if I am correct, your \"Calculators\" were \"outside\" of the Money API. While our calculators are encapsulated into the Money object API. It is an internal detail which allow us to use various numeric value handling. Hope that answers your question.\n. Does Bitcoin support subunits?\n. Ok, thanks\n. I am fine with the constant\n. In that case: can you resubmit the PR against master as soon as I renamed nextrelease to master?\n. Thanks for the PR. I am also aware of the alcohol library and I chose to use @umpirsky's implementation instead. Although it is bigger in size, I am more confident of the ISO code update process and it provides a plain list instead of an object. I would wait for @umpirsky's response to the other issue so that we have all the possibilities listed.\n. I have bad news for you then: Money class will be final as of 3.0. Although I see your use-case, I think it would be better to use encapsulation and create a wrapper around money. Adds complication, but for the sake of interface implementation I am not sure making it non-final makes sense.\n. Good catch :+1:\n. No, it's not. :) Lemme fix that :D\n. You are now super-god-admin.\n. Thank you very much\n. Thanks for reporting this. I will look into this next week or ask @frederikbosch if he has time.\n. LGTM. I added a few styling comments.\n. no clue, travis DERP. Restarted.\n. Two comments added.\nThis is fine from my point of view. I don't use Bitcoin, if anyone has problem with it, we can treat it as bugfix.\n. :+1: \n. I want to be really cautious about releasing a stable. Many other libraries rely on this one which makes it even more important to have a really stable release. We are going through the regular release states. BC breaks should not happen once we reach RC phase. That's the most I can promise at the moment.\n. Yes\n. I think we are ready for beta. But changelog first.\n. Sorry for the trouble. However the next version of Money is not stable yet, nor the fundamental changes have been documented, so relying on a development version is up to you.\n. You are right. We will make sure to mentioned that in the changelog and the upcoming documentation. Thanks for feedback.\n. @frederikbosch IMO raising requirement \"just because\" does not make any sense. If we want to use any features from 5.5, then sure, go ahead and drop support for 5.4. But if there isn't any, then why make this step? I see your reasoning, but I don't see the advantage in just dropping support without any real benefit.\n. Yeah-yeah, I haven't forgot it. In fact, I have been thinking about this every day. :wink: \nI don't have any reasons against it after all. Also, as I can see, composer finally got the feature of overriding the platform, so not even a fork is required.\nAnyway, go ahead, increase the PHP version. :smile: \n. I have a little bit tough week. I will try to share some love with OSS project next week.\n. Well, it might not be a break, but would make the package uninstallable after a certain version on a certain PHP version.\n. I've been doing a LOT of research on this topic. What actually made me to drop support for 5.4 was that this actually seems to be the trend. Despite that packages/frameworks don't necessarily use any features from newer PHP versions, they keep dropping support. I realized that @frederikbosch was right, this is somewhat a duty of ours.\nHowever, yeah, dropping 5.5 support.....seems a little early to me.\n. In terms of features, I think we will reach kind of maximum in 3.x. After that we can drop PHP 5.x support in 4.0 and kind of support both versions then stop supporting 3.x if 7.0 is spread enough.\n. I am okay with releasing an alpha, but the API changed a lot and in RC releases we are not allowed to do that anymore. Also I am on holiday next week, so I would prefer releasing a beta next week and an RC a week after if we find the API stable enough.\n. I have to admit I haven't followed the latest development. I will try to catch up (btw. @frederikbosch awesome work!), but I became a maintainer of Guzzle too and I don't know if I will have that much time for OSS now. That said, I will try to review the current state and if I am happy with it, I will push it to RC. However, it shouldn't remain there too long, so I will only do that if I can make sure that after a 1-2-3 week period we can tag a stable release. In the meantime I will try to start the MoneyBundle too, so I can try it out in a few applications too.\n. @emaillenin  Can you please open a separate issue? Would be nice if you could provide some test code.\n. #296 is part of my final review. I would set end of October as the deadline.\n. So this is the last issue open in the 3.0.0 milestone. I am happy with the current phase and willing to tag the new release soon.\n. Nothing, we are done. Tagged https://github.com/moneyphp/money/releases/tag/v3.0.0\n. Closing in favor of #180 \nWe will have that list pushed as a whole (once it is complete) instead of one by one.\nThanks @elstamey \n. I am :-1: on this. Although it might be handy, Money should preserve it's identity as a value object and should not be polluted with all the possible instantiation stuff. The reason why we implemented parsers is to allow devs creating money objects whatever way they want.\n. It will be, this is just a list where we can collect stuff before writting to a dedicated location.\n. Yeah, it is some kind of note to self.\n. Actually I think it would be better to keep the usual keepachangelog style AND:\n- add the [BC] tag before each change which is BC breaking\n- optionally make it bold\n- also a big fat warning that most of the library is rewritten, so apart from the big breaks, there might be minor ones (refer to docs plz)\n. > My suggestion would be to repeat the BC breaks in the changelog when we release 3.0.0.\nSounds like a sensible idea. :+1: \n. Will do in the next few days as I will be on holiday.\n. I am going to finish this during the weekend and review the rest of the open issues/feature request. Then I would say we are ready for an RC.\n. Agreed, but I would do some reviews and add some content in the evening.\n. Agreed. Also, the conflicts must be solved.\n. Leave it to me then.\n. @frederikbosch finally we get this sorted out. :smile: \n. @mikemand in 3.0 we tried to remove responsibilities from the Money objects. We a few removed special construction logic. The reason why we introduced formatters is to support any kind of formatting logic.\nWhich do you think should be the default? We could have something like concatenation of amount and currency name...but I'm not sure about the use case.\n. One problem I can see: this is what actually happens:\n158243 * -0.052631578947368\nThere is no internal subunit conversion. Apart from that you described it correctly.\nHALF_UP in this (and actually in every) case rounds in the higher number direction, which is (weird or not) towards the lower absolute value.\nFrom my point of view this is the logical behavior.\n. Well, there is something interesting going on here:\nbash\n$ php -r 'echo round(158243 * -0.052631578947368, 0, PHP_ROUND_HALF_UP);'\n$ php -r 'echo round(158243 * -0.052631578947368, 0, PHP_ROUND_HALF_DOWN);'\nBoth returns -8329 since there is probably no halfway here. I will check this issue, thanks for reporting.\n. Thanks for your work on this @frederikbosch \n. Sounds reasonable. Is it a blocker for the release? It seems to me that it's mostly optimization, no API break is necessary.\n. bash\n$ php -r 'echo round(floatval(1/14.834670), 6) * 14.834670;'\nThis should end up in exactly one and it does not. I hardly think that this is a CurrencyPair issue, but the result of the rounding. In order to preserve consistency (and hence the immutability) we cannot do rounding upon a specific action. After each one, the rounding is done. But as you can see, this is the mistake of \"your\"/php's rounding, not Money's one.\n. Not sure. We use string for Money as a compromise. It is very unlikely that we run into issues with the float representation.\nWhat's the advantage?\n. The reason behind using integer is to avoid rounding issues. The reason behind using string for representing numbers is to allow using Calculators handling big integers. Other words: the reason why we don't use float is rounding.\nHowever in this case we usually want to have a decimal value. Storing it as string, just to not store it as float does not come with any advantage that I can see. On the other hand, it is inconvenient, just like in case of Money, but there we have bigger justification for doing so.\n. What's the alternative to represent non-integer values (apart from string)? Keep in mind, that casting is almost as bad as rounding issues that might occur. As an alternative, we could do this on the JSON level to preserve higher precision: cast to string when serialization happens, do the reverse when deserialization. This is a one time operation and does not mess up mathematical ones with string representation. See my reasoning above why I think string is actually worse than float.\nI see the precision problem, but I highly doubt that it might cause any problems (it didn't in the past). However, I don't think we should leave it, but I don't think string is a solution. Until we find one, we should have a separate issue and mention it in the docs.\n. But it is an internal, one-time operation. Also, we do that to make sure the input value is float. Ideally nothing happens, as the input should already be float. Internally afterwards we use float as the representation.\n. @frederikbosch can we consider this discussed and close? For now I am happy with the current solution. If we ever experience any issues regarding this, we can always reconsider this feature, although either as a bugfix or rather with a major version dump.\n. :+1: \n. Thanks for the PR. We are not maintaining the currency list ourselves, but we use https://github.com/umpirsky/currency-list/ as a source. I contacted @umpirsky about the possibilities. If we can't make this currency in that package I will temporarily merge this one and add a note somewhere not to overwrite it until it makes it to the list.\nAre you fine with that?\n. Actually, I am thinking about adding a currency.local.php where these kind of corrections/additions could be done, even if the data source does not support it (yet). It could be merged with the base currency list. The downside is the extra IO, but opcache should mitigate it. Also, it is a relatively small file (It think mostly returning an empty array).\n@frederikbosch WDYT?\n@mongosoft do you think you can modify the PR accordingly?\n. Np, I will take a look at it at the weekend then.\n. Good point @frederikbosch, this is actually a good solution. What do you think about it @mongosoft ?\nThis is a good solution, because it frees us from covering the edge cases.\n. Nice addition @jongotlin, thanks.\nIt seems to me a common practice that in such exceptions when the type is object, the FQCN is given as type instead of \"object\". WDYT?\n. I think you misunderstood me. I meant this scenario should return stdClass as \"type\", not object.\n. > Or do mean you want me to check if its an object, return its fqcn?\nExactly.\n. Something like this:\n``` php\nuse Money\\Parser\\StringToUnitsParser;\nfinal class StaticUnitParser\n{\n    /*\n     * @var StringToUnitsParser\n     /\n    private static $parser;\npublic static function parse($money, $forceCurrency = null) {\n    return static::getParser()->parse($money, $forceCurrency);\n}\n\nprivate static function getParser()\n{\n    if(null === static::$parser) {\n        static::$parser = new StringToUnitsParser();\n    }\n\n    return static::$parser;\n}\n\n}\n``\n.CurrencyParser`?\n. What's the use case?\n. I see. Wouldn't it be better to only define a default currency and if forced currency is passed, use that instead? Or should it be a separate implementation?\n. Thanks for reporting, I created a potential fix PR.\n. I will take a look at it.\nFirst thought: I would rather create an aggregate currency repository instead of using decorator here.\n. > And it does not harm anyone.\nNo, it does not, but is not-so-good design IMO. It would encourage people to create decorators like this.\nDecorators perform well when a specific behaviour needs to be added to very well defined interfaces, which is not really true for a repository.\nI was thinking about something like this:\n``` php\nfinal class AggregateCurrencies implements Currencies\n{\n    private $currencies;\npublic function __construct($currencies)\n{\n    $this->currencies = $currencies;\n}\n\npublic function contains(Currency $currency)\n{\n    foreach ($this->currencies as $currencies) {\n        if ($currencies->contains($currency)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n}\n```\nThis way bitcoin currency repository would only be responsible for bitcoin.\nIt is also easier to configure in DI (while configuring long decorator-chains can be hard or confusing)\n. > Maybe close this one then\nNot necessary to close. Mark it [WIP] and then rebase when aggregate is added separately.\nAFAIK it was your argument to call them MoneyFormatters, because we might want to add other formatters?\nWhat's important for me is to have consistent naming and structure. Here are the options I could imagine:\n- Have them in Bitcoin namespace and call them simply MoneyFormatter and MoneyParser.\n- Have them in their respective namespace (Formatter, Parser) and call them BitcoinMoneyFormatter and BitcoinMoneyParser\n- Call them BitcoinFormatter/Parser, but we should have similar naming in case of other parsers/formatters? (IntlFormatter?)\n(BTW consistency and structure: should we have a Currencies namespace? If we put BitcoinCurrencies in Currencies namespace with ISO it would make sense IMO)\n. > BitcoinCurrencies will be dropped\nI didn't say BitcoinCurrencies should be dropped :wink: \nIt should be there, but only contain bitcoin. Also, maybe constants from Formatter and Parser might be moved here as the source of all truth.\n. From my POV this is ready to be merged.\n. @frederikbosch WDYT?\n. Well, I agree with you and I have some doubt in myself. However the current formatter tries to provide a fallback logic by accepting a fallback formatter and I was thinking if we could remove the decoration somehow.\n. Aye. Also, what about the parser? We can't really have a supports method there. Maybe we could have an AggregateParser based and determine \"support\" based on the return value (money object or not).\n. Looks good to me. Maybe we could add the default as part of the formatter array with a key \"default\" or \"*\". Another thing that we might think about is adding regex support for keys so that it is easier to register one formatter for many currencies.\n. Yeah, regex could match currencies, but not sure it's the way we should do it. It would after all be the same as adding the formatter multiple times (listing the currencies) and adds a considerable amount of overhead, so let's drop regexes.\n. It currently throws an invalid argument exception. IMO it should probably throw a parse exception if we already have one.\n. The other option is to throw ParseException everywhere.\n. @frederikbosch What do you think about this?\n. Well, there are some PHPUnit tests remained, mostly the ones with functional nature (testing NumberFormatter and the like). I usually prefer spec tests because it is much more straigthforward about what we input and what we expect, also the mocking is much more easier than PHPUnit (I replaced many tests with using mocks instead of actual code). I am pretty sure it will take 5 seconds for you to understand.\nI think you should probably look through some of the specs and if you think you can get familiar with it, then let's go with it.\n. If it comes with API breaking changes, then it has to be addressed before the RC.\n. Looks good. Added a few comments.\n. That way we can use SPL exceptions as well and extend whichever we want. For example UnresolvableCurrencyPairException should be invalid argument:\nUnresolvableCurrencyPairException extends \\InvalidArgumentException implements Exception\n. :+1: \n. https://github.com/php-http/httplug/blob/master/src/Exception.php\nhttps://github.com/lstrojny/fxmlrpc/blob/master/src/fXmlRpc/Exception/ExceptionInterface.php\nhttps://github.com/FriendsOfSymfony/FOSHttpCache/blob/master/src/Exception/HttpCacheExceptionInterface.php\nThere are a few :wink: \n. Can you squash commits?\n. To be honest, I used require statements on purpose. While I also used to do this, some recent changes made this impossible to work. However, looking at the test results, it seems to work again. I am going to look at phpspec issues to see if this issue has been official fixed.\nThanks for the PR.\n. Here is the actual issue: https://github.com/phpspec/phpspec/issues/825\n. As @ciaranmcnulty stated here, this will only work as long as there are no typehints in the traits.\n@pamil can you please place a comment in the traits that currently PHPSpec does not support typehint mocks in traits (and a link to the issue above)?\n. Thanks @pamil \n. Well, if it's not REALLY supported, then it is not supported and should not be used IMO. :smile: \nThanks for the heads up anyway. For now, it doesn't seem to be a big issue not to use typehints in our traits.\n. Can you please try setting the fraction digit attribute of the number formatter?\nhttps://github.com/moneyphp/money/blob/master/tests/Formatter/IntlMoneyFormatterTest.php#L24\n. Fraction digit in our case is the same as the subunit. Unfortunately we haven't found a better way to use the core NumberFormatter. Subunit is not part of the money object, that's why you must configure it in the formatter (in our case, in the number formatter).\nIf you have a better idea, please give us a hint, but I think @frederikbosch investigated the possibilities quite well.\n. AFAIK we had it in the constructor once, no idea, why we removed. However (looking at the formatter code) we not just rely on the NumberFormatter instance, but actually use the attribute in the code. This would make it impossible to format money to have fraction digits.\nFor example:\nphp\n$money = new Money(500, new Currency('EUR')); // this means 500 EUR, no subunits\n$numberFormat->setAttribute(NumberFormatter::FRACTION_DIGITS, 2);\n$formatter->format($money);\n//Outputs \u20ac 5,00 not \u20ac 500,00\n@frederikbosch can you give us an input here?\n. The factor is highly dependent on use case (eg. currencies without subunits or application does not care about them), but probably that's the most common configuration of the money object. So either add it to the interface (increases coupling, which is not good IMO), add a new interface (FactorAwareFormatter), or rather make it a constructor argument.\n. Reopening this as I think it is not solved yet. While I understand the points above, I still think we misuse the NumberFormatter as @bramstroker pointed. See this case:\nphp\n$money = new Money(500, new Currency('EUR')); // this means 500 EUR, no subunits\n$numberFormat->setAttribute(NumberFormatter::FRACTION_DIGITS, 2);\n$formatter->format($money);\n//Outputs \u20ac 5,00 not \u20ac 500,00\nWith other words: we are not able to control fraction digits anymore, but only subunits.\n. Just for me to understand: this way if subunits are NOT defined, we use NumberFormatter fraction digits as subunits?\n. Why do we do that? At least I wouldn't expect this behaviour if I were a stranger.\n. I am still thinking about this use case:\nphp\n$money = new Money(500, new Currency('EUR')); // this means 500 EUR, no subunits\n$numberFormat->setAttribute(NumberFormatter::FRACTION_DIGITS, 2);\n$formatter->format($money);\n//Outputs \u20ac 5,00 not \u20ac 500,00\nNo subunits, but fraction digits.\nWhat would happen in this case?\n. > But if you want to set a different number of fractions than the subunits, then you will have to set them both.\nThis is what concerns me: why? Why are there any coupling between the two setting? I expect them to be separately configured. Also your use cases covered everything, but not my example. I understand that it could be something like:\nphp\n$money = new Money(500, new Currency('EUR'));\n$numberFormatter =  new \\NumberFormatter('en_US', \\NumberFormatter::CURRENCY);\n$numberFormatter->setAttribute(NumberFormatter::FRACTION_DIGITS, 2);\n$formatter = IntlMoneyFormatter::withSubunits($numberFormatter, 0);\n$formatter->format($money); //Outputs \u20ac 500.00\nBut if I set the fraction digits, I don't expect it to behave as subunits, but fraction digits. If I don't set the subunit explicitly to 0, then I am unable to use JUST fraction digits.\nSo what I don't really understand that WHY it is necessary to use fraction digits as fallback if subunits are not set? Why can't we just have subunits defaulting to 0 and leaving fraction digits to the user?\nThat way:\n- User has control over the process\n- There is no coupling between configuration\n- Easier to understand and document (from my POV)\n. > I would expect that the intl extension takes care of it these things. That is what the extension is for, right?\nNo. The term subunit does not exist in the number formatter. Think about the example I showed. EUR value, but no subunit, although there are smaller values than euros (cents).\nThe intl extension is to format a value according to a locale, not a currency. Of course it formats the currency, but only in terms of sign, fraction digits, etc. Subunit is not part of this.\n\nIt would be best if the Currency object would carry the number of subunits for that currency.\n\nNo, because of the same reason. Subunit is a relative, and not strongly tied to currencies in every case. There might be a lowest possible value in a currency (like cents), but you might not always want to represent it. That's why subunit is a configuration of your application.\n. Honestly, I agree with you, but I simply can't see a way to add subunit to the model correctly. This is not a problem on the formatter level, but the domain model level.\n. Thanks for the information, it is indeed very useful. I hope we can solve this issue soon.\n. Why not an extension of currencies then? SubunitCurrencies interface can have that method and we don't need another term within the project and we could even implement it in the aggregate currencies stuff.\nAlso, I would make this thing optional in formatters: named constructor or something.\n. Good catch @frederikbosch \n. @judgej Do you use the 1.x stable or the 3.x upcoming version?\nIn the upcoming version we are working hard on making Money as easy to use as possible.\nWhat you are trying to achieve is quite hard, since the amount is internally stored in integer format, which means Money (Currency) should be aware of the subunit. We tried to avoid this and make the value objects as simple and flexible as possible. Right now we are working on a formatting solution which involves a separate formatter object and a currency repository.\nCasting the Money object to string could be a nice addition, but I guess everyone would expect a different result: just the amount, amount with currency, amount with currency symbol, etc.\n. > So the currency here is not aware of the size of the subunit?\nNo, this library never did that. The main reason was that currencies themselves does not necessarily have minor units (although most physical currencies have).\nRight now we are thinking about two possible solutions:\n1. We already have the term of currency repository which contains basic and meta information for whatever currency you would like to use (see #223)\n2. The other possibility is to add subunit support to the currency object itself. However, there are two problems with that:\n   - You would have to create currency objects like new Currency('EUR', 2)\n   - Convenient Money::EUR(123) factories wouldn't work anymore\nAlso, this makes the creation of a money object rather hard: new Money(123, new Currency('EUR', 2)) In this case, is the input amount \u20ac123 or \u20ac1.23?\nMinor units are actually useful if you want to format the amount. Using 1 or 100 for calculations doesn't matter, it only matters when you want to output the value.\nThis is a major problem we are aware of and blocks the 3.0 version, but there is no nice solution for this:\n- Adding minor units makes many things complicated\n- Not adding it makes the library harder to use\n. What's your usecase for decorators?\n. This is a quite common use case, which I also have. I suggest you reading @webmozart's post about: https://webmozart.io/blog/2015/09/09/value-objects-in-symfony-forms/ (given you are using symfony).\nI don't think adding formatter logic to the VO is a good idea, it should be handled by an external service.\n. > But may be useful to return some string representation for logging or for debugging.\nWe already have something similar: JSON serializability.\n\nInfrastructure or framework should not affect design of the model.\n\n:100: :+1: \n. This has been a little bit improved again, see #289. I am thinking about some quick setup code since in many cases ISOCurrencies are used for everything. Although that's convenience stuff, it would live outside the domain, so it's kind of okay.\n. Awesome, thank you very much.\n. Please refer to https://github.com/moneyphp/money/pull/193. If it is part of the IANA data sources, we can update the currency list.\n/cc @umpirsky \n. Well, this is not completely correct. See the following example: var_dump(json_decode(json_encode(PHP_INT_MAX+1)))\nThis will be a float value, not integer.\n. Two small comments, LGTM apart from those.\n. We don't. I got the point, I will fix these tests and close this PR.\n. No need for assertion: ->shouldReturn(something);\n. Do we really need a separate repository for that? Can't we simply place a build script in this one? I am all for separating everything, but I also have bad experience, so I think twice or three times before separating anything.\nIt is still not decided how we do subunits: access repositories or have it in the currency object?\nApart from that :100: :+1: \n. I would rather create a repository interface extension: CurrenciesWithSubunit\nphp\nfunction getSubunitFor(Currency $currency);\nBy definition a subunit should always be an integer value and I think we should fall back to 0 if we have no information.\n. Well, it does not have to be an extension, but IMO we should implement these interfaces in monolithic repositories. Kind of breaks SRP, but it's repository pattern.\n. No, it's not different, but fits into the domain better IMHO.\n. Your assumption is correct. :wink: \n. > Now, I think that CurrenciesSpecification should be moved into Currencies. So Currencies interface has two methods: contains and specify. If the repository contains the currency, it must be able to specify its characteristics. Right?\nThis is Multiple Responsibility Principle too.\nCan you give me some more usecases for a Specification object? Sounds like a generic metadata store, dunno if we need that.\n. I am going to turn of the automatic MR creation from StyleCI. It's annoying.\n. I am not entirely happy to have subunitFor in the Currencies interface. Subunit is not a core part of Currencies. I am still on the side of a separate interface. I don't care if both are implemented in the same class, but they seem to be separate responsibilities.\n\nHow should AggregateCurrencies look like when we have CurrenciesWithSubunit\n\nThe answer is simple: it shouldn't change. Since they are different responsibilities, you need to use two different objects: one Currencies instance decorated with AggregateCurrencies and an other one is the Subunit repo. (If it was DI, we would have two separate services).\nOn the other hand, it would probably increase complexity which might not worth the effort.\nA few cosmetic points:\n- methods names are better when they are in imperative: getSubunitFor. Contains is kind of an exception\n- document better when UnkownCurrencyException should be thrown (when repo does not contain currency via contains?)\n. There are multiple - and I have to say - serious problems with this PR.\n\nA subunit is a property of the currency and should be modelled as such.\n\nNo, it is definitely not. Subunit is something logical which you mostly have for \"real\" currencies. You cannot buy a half bitcoin. Also, from the Money point of view this subunit doesn't really matter as long as you use the same logical unit for addition/substraction. It only matters when you \"present\" the value.\nCan you tell me a use case when you needed subunits, but it wasn't a presentation?\n\nCurrencies should - according to its description - 'provide a list of currencies'.\n\nThis is probably a little bit misleading, but the point is still the same: provide some kind of repository for currencies. I think it fits into the SRP to have a check method in it (we might also want to add other things here in the future), but if subunit is a totally different kind of data, then it should not be included in this interface. My preference is still the CurrenciesWithSubunit interface.\n\nThere is only one Euro or one US dollar currency. Hence my application should have one currency object per currency, not multiple.\n\nDefinitely not. We apply the Value Object pattern here where equality is based on the VALUE that's represented, not the object reference. In the Currency, this value is the currency code, in the Money the value is the numeric value AND the currency together (see equals functions)\nFor the moment I don't think having a find method in the repository makes sense. You can simply create a new currency and check validity manually.\n. > Even a Bitcoin has a subunit\nOkay, let's close to this problem from another point of view: Currency is a VO and as such, it should only have the minimum internal structure that helps representing that single value. That's the currency code. In case of money, it's the number AND the currency. Think about money in real life: when you hold a ten EUR note, it doesn't tell you that there are cents too.\nAbout having further details in currency: take a look at this standard proposal: https://github.com/e-ig/standards/pull/3\nIt contains many other proposed fields and I had quite a few fights with people in that discussion to explain why it is a bad idea.\nI see a few possible solutions for the problem:\n- subunit is a problem for us at the moment, so we need to solve it. CurrenciesWithSubunit is a possible solution. As for the name: everyone should solve it on their own :trollface: The biggest problem in my opinion is that Name specifically is usually a translated field and I really don't want to provide translations. Every framework handles translations separately.\n- we can go for the CurrencySpecification solution too (although I would rather call them CurrencyDetail(s)), but we should then probably make it a general metadata storage: require a name, require a subunit, allow adding an optional array with any other meta data (maybe require the Currency object for reference too?). However in this case we have to declare the behaviour for dependent components: what should happen if there is no subunit?\n. > But does that mean an object cannot have any further properties than what it is dependent on?\nYes, it does. :smile:  It is not the behaviour, it's the object identity.\n\nEvery currency has an official name.\n\nNo. I only accept a currency on my website which does not have a name only a code: 8g7bv87b786cv8zuvb786bv7zv76v (<- yes, this is the currency code :trollface:)\nThe point here: this is a money processing library and having an official way to format these values should be the maximum that we provide as a presentation tool. I think we should rather concentrate on this and leave presentation and everything else to consumers, because there is no generic way of doing the presentation layer.\n\nTherefore people can perfectly create their own Currencies implementation, e.g. ChineseLocalizedISOCurrencies and attach a different name to the currency.\n\nNo-no, currency repositories return currencies which does not have special forms. Translation should completely be out of scope here. Currency details on the other hand could be localized.\n. This PR goes against Value Objects. Please check the linked PR, I gave several examples when having such fields/features in a currency object is a bad idea, even can cause problems.\n\nHow should I solve displaying ISOCurrencies names then?\n\nIn symfony, I would create a service which accepts a currency and I would use the currency code appended to a trans key and use the translator to translate the currency name.\n. Since this is rather a logic problem, not a domain one I see no reason to have a custom exception, but I see no reason against either.\n. Well, if this would be the only case where we use an SPL exception and not our custom one then maybe it would make sense for consistency.\n. Thank @bendavies \n. Hi @xterr,\nThanks for reaching out. We are trying to make this library as minimal as possible and storing all ISO currency data (as we are talking about ISO currencies) would probably be too much data here.\nThat being said, there were a number of requests to provide more data for ISO currencies, so we might create a separate package with a set of tools to ease using them, but there is no ETA or roadmap for that yet.\nAlso, if we are talking about database: I would probably recommend that you use the currency code in the database. It might add some storage overhead, but it will always be unique (you can use imaginary currencies too) and does not require an extra mapping between the code and the currency.\n. Honestly I haven't followed coverage in this library. I will setup Scrutinizer to see some stats about what's going on. Thanks for the note.\n. Well, I would say go ahead, but try to separate them logically in PRs instead of submitting a huge test suite so that we can review it effectively and as quickly as possible. Thanks for the contribution in advance.\n. The plan is to cover as much as possible with specs (and replace unit tests wherever possible).\n. Thanks @sahildua2305 , will merge it as soon as CI is ready. \n. You will have to store your money as integer:\n$fiveEur = Money::EUR(12345);\n. Yes and no. It depends on what minor units you want to use. Money provides you a way to represent your money value and do some calculations with it. At the moment we are working on this part to clarify whether we want minor units to be included in Currency objects or not. Until then, it's up to you.\nIt only matters when you want to format your money.\n. This is nice, thanks @piku235. I will review it during the weekend.\n. Thanks for reporting the issue. Indeed it seems to be a bug. I will try to provide some test cases based on your example and provide a fix too,\n. @frederikbosch  can you please take a look?\n. It's only code review, if you have a few minutes. Enjoy your holiday!\n. We could probably throw a logic exception when doing operations with\ndecimals.\nFrederik Bosch notifications@github.com ezt \u00edrta (2016. okt\u00f3ber 1.,\nszombat):\n\nAlso relevant in this thread is the GMP Floating Point Support RFC\nhttps://wiki.php.net/rfc/gmp-floating-point.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/moneyphp/money/issues/278#issuecomment-250906796, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABK2kFZ6L7zaXWqicVwLXy3S2Q-x38Dlks5qvkAEgaJpZM4KJusn\n.\n. Well, I agree. Honestly, I am not sure I completely understood the problem. However, if there is a leak in the API which easily leads to errors like this AND fixing them requires an API change we should do something.\n\nAgain: not sure if this is the case.\n. Without actually checking this: if you are curious about terminology, the latest changes in Swap can be a good base. It is actually two library now:\nhttps://github.com/florianv/swap\nhttps://github.com/florianv/exchanger\n. I am thinking about a third wrapper class: Accept a money and a currency only and don't care about internals (exchange, converter). It might be an overkill, but from a consuming point of view: I might not always be interested in currency pair details.\n. Just for the record: does this fix #275 ?\n. Actually I rather meant a wrapper around Converter than altering it's usecase. I see a valid use case for using the converter with an already existing currency pair.\n. And what about those who want to use a fixed conversion rate? They have to create an Exchange for a static list this way.\n. Okay, it's not a big deal after all. In that case, should we provide a default implementation for a static Exchange list?\n. I am sorry, but I won't accept this patch in it's current form. This has already been rejected two times before, which means to me that it's commonly requested feature. However, this library tries to be a generic Money lib which does not emphasize ISO currencies.\nAlthough I don't like this solution, this issue has been raised quite a few times now, so I opened an issue to sort it out: #282\n. @Sharom generally I agree with you, but there seems the community wants it. If we can find a way which does not pollute the classes with noise then I am not against it. But in it's current form, the above PR is the third one that I rejected to merge so far.\n. Agreed.\n. Although I recommended this in the original PR, it has been missed. Can you please check @frederikbosch ?\n. I think a similar issue has already be raised here: #278\nJust for curiousity: what made you using the calculator directly? As far as I know it works well with the money object.\n@frederikbosch since this issue keeps coming back, maybe we should do something about it. Put some lines in the docs, even throw an exception somewhere?\n. So is it actually something which can be fixed? Not a limitation of GMP, like in the referenced issue?\n. @frederikbosch okay, agreed.\n. Alrighty, up to @frederikbosch then\n. Actually it's not just proofreading: I want to catch up. ;)\nThe site is not top prio.\nI would say we both better proofread, improve whenever we can.\n. @tuwannu Thanks.\n@frederikbosch I am on it.\n. Hm, I updated the the repo URL, should be ok now\n. @frederikbosch what's your RTD username?\n. Ah, okay. :) Then I can't add you there.\n. I would like to do some improvements before releasing. @tuwannu PRs are very welcome.\n. I also did some grouping, please feel free to suggest modifications there. I also like the documentation of operators.\n. Agreed.\n. @frederikbosch I also think the points are valid, and avoiding confusion should be high prio. Also, I am more concerned about break in behaviour than breaks like this. We are not stable or RC yet, so we can freely change the API. That said we can just deprecate it, but starting a stable with deprecations is not a good sign.\n. @daerimin we just accepted a PR which removed this class, however at that time it was still in the repository. Are your issues resolved? Please check the documentation to see the changes: http://money.readthedocs.io/en/latest/Formatting.html#decimal-formatter\n. Parsers has been changed a little bit. If you want to parse a monetary value (with currency) use the IntlParser.\n. What happens if I call it with some random currency? It returns the static value. AFAIK that's exactly why we introduced the UnkownCurrency exception. Am I wrong?\n. https://github.com/moneyphp/money/blob/master/src/Currencies/BitcoinCurrencies.php#L24-L30\nThis one returns 8 for each currency, while I think it should throw an exception for non-bitcoin: https://github.com/moneyphp/money/blob/master/src/Currencies/ISOCurrencies.php#L44-L46\n. Thanks, still WIP and uncovered the GMP division issue which I would like to get done first.\n. Well, I already finalized the tests for GMP Calculator on this branch, so you can create one from it to solve the issue.\n. Hm, okay. It might be a problem for large numbers then where we cannot make sure that the precision is correct and in those cases, Money is responsible for rounding. But for smaller numbers we might be able to calculate the fractional part in advance, right?\nIf so than I think we can just state that this is for internal usage and we cannot guarantee precision 100% and we just do what we can.\n. Well, we have to state that in the documentation somewhere.\n. Yes, I will squash, also test refactoring is not ready yet.\n. First you need to install the swap package which you have the command in the docs.\nTo be complete, you should use this: composer require florianv/swap:^2.0. (At the moment we don't support 3.0 yet).\nThen you need to configure Swap as per the instructions here: https://github.com/florianv/swap/tree/2.x#usage\nFinally you need to follow the rest of the documentation.\nDoes this help?\n. > Unfortunately it seems that by using composer to download the code, large portions are left out.\nThat's quite weird. Can you show me your composer.json?\n. Have you done this somewhere?\nrequire 'vendor/autoload.php';\n. Hm, strange.\n. Yeah sure, not questioning the fact, rather thinking whether it's a common practice or not. If no, then why not?\n. Well, if we are happy with it, just tag v1.0.0.\nThis hurts my eyes:\n\n. I wonder if we should rather have a static factory for ExchangeRateProvider instead of the current solution.\n@florianv your feedback is very welcome.\n. Thanks for the feedback @florianv \n. Unfortunately money/money is taken\n. ...and it's a fork of this library :joy: \n. Probably yes, but that would mean that all the packages/applications depending on it would break. It still has 10-20 installs/day.\n. Yup. I am also releasing a last beta with the current name.\n. @frederikbosch Can you please add me here as a maintainer? https://packagist.org/packages/moneyphp/iso-currencies\nI cannot add packages with this vendor.\n. Alias? I want to deprecate that package. I don't think there is such thing as alias, only abandon.\n. Here: https://packagist.org/packages/moneyphp/iso-currencies ???\nYou created this package\n. You have to log in to packagist. There should be a cross next to your avatar\n. Composer maintainer and packagist maintainer is not the same.\n. @tuwannu first of all, thank you very much for your PR, I appreciate it.\nSecondly: without a review I already see that this will conflict with #308. May I suggest that we wait for that to be merged before proceeding with this one?\n. Thank you very much @tuwannu \n. Alright, I merged #308, can you please rebase?\n. Add them to https://github.com/moneyphp/money/blob/master/doc/spelling_word_list.txt\n. I like it, thanks @tuwannu. @frederikbosch might also want to review it though.\n. I am merging this, #313 might go into a separate PR.\n. Thanks @tuwannu \n. I think this is what @frederikbosch meant earlier. I agree, but to avoid conflicts again, this should be the last step.\n. Since we use readthedocs, I don't know.\n. Sorry, I am already doing this and a bit more which will conflict\n. Will integrate the test part\n. Good idea\n. Which version of Swap do you use? The latest method has been added in version 3, this library is not compatible with version 2.\n. Did you configure Swap correctly? Also, can you please your code instead of copying the code that we wrote here? \ud83d\ude04 \n. Please close the issue if it is fixed. Thanks.\n. Because it's a Value Object and it doesn't make sense to have alternative implementations and as such an abstraction is not necessary.\nMocking value objects is an anti-pattern, since it represents a value. You should instead use dummy values, like $money = new Money(1234, new Currency('XYZ'));\nFor most of the custom behaviour that you might need there is a functional solution too, which is more suitable in this case and does not require inheritance. I am not 100% sure why you would need a Proxy class.\nHope it helps. I definitely have to write a blog post about this.\n. @matt-usurp composition is a perfect solution in this case if you need to use your own API and need the behaviour of Money. Although I don't see a reason why you couldn't use Money in your own abstraction. Since it's a final value object you can safely rely on it in your own interfaces.\n. > The crux of the issue is that the library supplies an implementation of Money that you consider final but people will want to build upon.\nWhich you can do. You can't extend it, because inheritance does not make any sense. There is a functional solution for almost all the issues that you could list.\n\nIt really doesn't matter as its business logic\n\nIf it is business logic, then it has nothing to do with the Money VO.\n\nI am now confused as to why this hasn't been closed yet.\n\nMostly because we are trying to help people understand that this is not a bad thing and there is a solution for their use case too.\n\nwhy are there no MoneyInterface and CurrencyInterface for us to provide implementations of?\n\nBecause they are value objects and it doesn't make sense to provide alternative implementations as they would essentially be the same.\nBlog post became B+ prio now.\n. > In many ways I regret even writing here.\nI am sorry for that.\nHere is my solution for scenarios like this (although haven't tested yet), we are going to provide that as doctrine embeddable:\n``` php\n// ..\nprivate $amount;\nprivate $currency;\npublic function getMoney() : Money\n{\n    return new Money($this->amount, new Currency($this->currency));\n}\npublic function setMoney(Money $money)\n{\n    $this->amount = $money->getAmount();\n    $this->currency = $money->getCurrency()->getCode();\n}\n```\nSince in case of value objects equality does not depend on the object reference, you are free to create new objects every time you want to get the value. Although it might be a little bit redundant in terms of the currency codes stored multiple times, I see no harm in that as joins might hit the performance more than storing the code instead of a foreign id.\n. > This was really where I just wanted to extend to implement the interface and move on (this is what I was getting at in my original message)\nWell, to be honest I don't see how relying on external interfaces is less coupling than using external implementation.\nAnyway, if you really need custom logic, you can always fork this repo and use your custom version (as I needed to in some very specific cases as well)\n. I've started to write a blog post with examples where I provide solutions for some scenarios, not sure when it will become a thing though.\n. @wimby your example does not justify inheritance at all, in fact, it suggests a very bad design. You should think of a Value Object just like as a scalar type: you don't extend string, int and bool types, do you?\nAdding custom domain logic (VAT) to a Value Object is a very bad idea exactly because of the above. You should create a Price class instead (which suites your domain better than Money) and add the price there as Money, the VAT as whatever value as you want. The gross value can be returned from the price object as a new Money value (since it's immutable).\nFinal classes are not meant to keep developers from stupid things, but to enforce good design...on the library as well.\nAs said above: you don't mock int values, right? Why would you a ValueObject?. > But it just mean I don't understand difference between Money and Price\nMoney is a Value Object, Price is a Domain Object. Price contains domain logic, Money contains logic for handling the monetary value. VAT is domain logic.\n\nIf some object is immutable doesn't necessarily mean that its type or class should be immutable too.\n\nI think you are mixing immutability with inheritance here. Immutability means that the internal state cannot be changed. Inheritance means the class can have children.\n\nThe main rule here should be if extending satisfies Liskov substitution principle\n\nDo you apply Liskov to integer and float. Value Object is a type which represents value. EVERY code that adds any logic besides that is simply wrong. Period.\n\nfinal is not just recommendation -- it's restriction\n\nYes, it is. As you cannot create an extended int type or whatever. I understand that you might want to add behaviour or fix something quickly: for that you can fork the project, as it is not something that requires a programatical solution: eventually (if it is a real bug) the lib should have it, in the meantime you can use a forked version.\n\nIf I want to change how Money is going to be JSON encoded\n\nYou can: create a wrapper -> domain object\n\nP.S.: DateTimeImmutable can be extended and it's really helpful to temporary fix bugs.\n\nI am pretty sure you don't want to fork PHP and build a custom version if there is a bug in DateTimeImmutable. Fortunetaly you can fork this library if you want.\nI think more than enough said about why closing the API is a good choice (really, I need to write a blog post about it). In almost every case there is a much better solution than inheritance, so all you need to do is find that solution and enjoy the better design.. I don't think it's the terminology we think about differently, rather the practical usage. In almost all the cases above (and in other issues) people wanted to add their domain logic to a Value Object. I think we can agree that this is just wrong, don't do it. This is what the final keyword enforces: no domain logic.\nLooking at the current implementation, I think Money provides everything I can think of which can be useful for handling a monetary value...without any kind of domain logic. This might not be true, but let's assume for a moment that it is. This means that any behaviour that you might want to add is something that is only necessary for your domain. According to the above (from a design perspective, not from the pure definition of Value Objects) this is wrong, so adding it to the Money value is a bad idea (no matter if the code is in this library or not). Since inheritance is not allowed (which would let us do tha above), the final keyword is justified, which does not only mean you cannot extend it, but also enforces you a kind of design which should be followed by consuming code. While this might sound crazy, I don't think following the mentality of a library is wrong.\nSince there is no perfect implementation, this is probably isn't one either, but I still haven't heard a use case where inheritance would be justified. It's misused in most of the cases and there is usually another solution, which might not be simpler, but better designed.\nAll in all: Money is not final, because it is a Value Object. It is final, because we see no reason NOT to be final. As soon as you bring me 3 valid reasons where inheritance is your only/best option we might think about opening the API. I haven't heard any so far.\nThe proper solution (IMO) for your problem is having a separate serialization layer which normalizes your money object as you wish. For example you can do it with Symfony Serializer component or with your custom serialization layer. I admit that this serialization feature is quite opinionated, but to be honest: I wouldn't use it at all.. > Why you need three reasons? One valid reason should be enough :D\nWell, I am not fair: I don't think there are valid reasons, only validish ones and from those one is not enough.\nLet me turn the question: why do you think inheritance is the only/better solution?\nWhat you are trying to add here is a behaviour to a Value Object. I have several problems with that:\n\nThere is no real multiple inheritance, so if you need multiple behaviours what do you do? (Composition solves this problem)\nAlthough VO definition does not say anything about custom behaviour, I still think that fundamentally VOs are only meant to represent a value and expose the minimum set of features which is necessary to interact with that value. Not technically correct, but this is why I compare them to scalar types.\nValue representation usually involves some kind of serialization. Inheritance makes this harder as you have to manage multiple options (types of the same VO, even this sounds like an abomination)\n\nI am a little bit tired of proving the same point over and over again (not to mention that others already did quite a few times, read the linked posts in Ocramius's post). If you go through the issues (there were more than this one) you will find that in almost all cases @frederikbosch or I provided a solution with composition which in the end turned out to be a better and accepted solution.\nIf you REALLY need inheritance, there is no way that you find another solution (which is guaranteed to be better as per the above IMO) then you are free to fork this library and maintain a custom one with removed final keyword. You can always update that fork based on MoneyPHP without any problems.. > Because (a) there is no interface for Money, if some function, lets say function pay(Money $m) accepts Money in typehint, there is no other way.\nNo other way...for what? I don't see an argument here.\nThe more I think about this SafeMoney example the more I think that it's actually a business logic rule forced into a Value Object.\n\nThe keyword is extends no inherits.\n\nSorry, what? Extension and the extends keyword are not the same. Extension means that we have some kind of extension points (plugins, events, etc), composition strategies, etc. The extends keyword is used for inheritance in PHP (and many other) language.\n\nYou closed Money (and Number) for extension.\n\nWe closed it for inheritance and haven't described any extension points, so basically composition is all you have. You could say that this is closed for extension, but it's not really correct.\n\nNo. I have extended Money for safety threshold property which is a value. And -- this is harder to spot -- I have added some semantics with SafeMoney class.\n\nAs I mentioned above I believe that you are trying to put your business logic into a value object. Business rules change, Value Objects don't: Tomorrow you might require every user called Bob to give DNA before paying in USD between $4.99 and $5.50. Would you put that into the Money object as well?\n\nit makes no decisions, no added logic.\nThat's the whole point of the feature you added: to make a decision about the value...based on a property. Or did I miss something?. > If some function requires Money, there is no way to use composition, because type system won't accept objects that are-not-a Money.\n\nThis only matters if you actually want to use Money as a type in your functions/methods. If you use composition (like a Price object) you can put whatever there which suits your needs.\n\nYou should really define domain or business logic, otherwise it loses any point here.\n\nBased on how do you decide if a money is safe or not? How is this condition originated from the Money value? IMO this is something that YOU define and use in your code  to decide how it should behave. This rule is probably subject of change, might be combined with others, etc. So I would put this kind of validation in a different layer which collects your rules and tells you if your money and/or other data passes these rules. Not sure if I understood your use case well, but I am not convinced that this requires inheritance.\n\nLet me read the article for you\n\nI know the \"classical\" (original) approach for OCP, but I simply can't accept to narrow down the term \"extension\" to inheritance. Neither John Skeet nor Mathias Verraes and I am pretty sure there are other people.\nAs such, I don't think Money is closed for extension.\nI don't deny that inheritance is the easier way. I know that the lack of an interface makes extension even harder, but is there an alternative implementation that makes sense and is different from the current one?\n\nNo, because pay it is not Money's method. But I can extend Money for MoneyWithDNA that will carry Bob's DNA.\n\nBut you want it to be safe as well! SafeMoneyWithDna? What about single responsibility?. Do you specifically mean this feature for the FixedExchange implementation? If so, :+1:\n. The problem is that this would require to have multiple calls to an external service in some cases.\nAlso, in reality conversion rates cannot always obviously calculated from the other (because of rounding, etc).\nTherefore I would rather not add it to the API.\nInstead I would implement a InverseExchange (or something like that) as a behavioural decorator which adds this behaviour to any exchanges (basically try the inverse of the currency pair if it is not found in the given exchange).\n. Honestly I don't like the idea of this reverse thing at all. But if we do this, I would say we should have it as a separate behaviour. If one of the exchanges supports it and the other not it could lead to confusions. With a separate decorator anyone can add it to any exchanges on their own.\n. > But, IMHO, you're idea is an unnecessary complexity.\nI don't see why. It's a perfect way to avoid duplicating the same behaviour in all exchanges + makes it optional, so that people don't get confused with unexpected behaviour.\n. We are going to provide a doctrine integration package. Since equality in case of Value Objects is not determined by reference, we don't actually need to use the objects in the embeddable. I will get back to you once I was able to setup the package.\n. This is a perfect scenario which shows the benefit of option two from #328. > I think there is no performance hit if you nest the ReversedCurrenciesExchange\nWell, I think there is indirectly. Let's say you use swap which sends an HTTP request for each quote call. If you nest two ReversedCurrenciesExchange and the neither the currency pair nor it's reverse cannot be found then it will send 4 HTTP requests: two for the first reverse, two for the second, and this increases exponentially.\nBut I would say this is a human error. Nevertheless, should be mentioned in the docs.\n. @frederikbosch added some docs, can you please give some feedback?\n. Sounds good to me, although I am thinking about a little bit different doctrine usage. Wonder if we can support multiple formats in RTD (like adding an XML version as well)\n. Doctrine type mapping is probably not an option since it allows you to have ONE column.\nMy concern is that option one includes too much Doctrine magic and reflection whereas in case of option too it's just scalars that it needs to take care of. I am not saying you are not right, just checking the options.\n. Thanks for all the input here.\n@geekdevs nice catch about the sorting issue. Using bigint as suggested by @frederikbosch might be an option.\nI will try to play with it within a symfony bundle, but since it's a few lines of code (config), maybe we can ship it within this package?. Hm, haven't thought about this. It's definitely a pro then for the embeddable solution.. @guiwoda Contributions are certainly welcome. We had a few options listed, but unfortunately I didn't really have the time I wanted to spend on it.\nA good first step would be doing some research based on this and the linked issues to see what options we considered, what the pros and cons are and decide based on that.\nI am not against having multiple solutions supported as they could serve different purposes. Whether we want to ship an integration layer in this or in a separate package is up to discussion. I usually like keeping things separated.\nSo if you can find some time to pick up this issue that would be really great, many thanks in advance for the offer.. @jkobus back from holiday, I will try to find some time next week for it.. Can you please give us the following:\n- Example code of yours\n- output of $ php -m\nAt first it sounds like integer overflow, but the given number is not that large and this library handles it (in theory).\n. I am sorry, but this has been discussed numerous times and the answer is no. This is a value object and as such, represents a value. If you need such data create some kind of provider which can tell this to you based on the currency object.\n. > Anyway, despite the \"value object\" approach, the \"Currency\" class could have a \"getSymbol\" as it have a \"getCode\".\nIt has getCode because code is it's value, but currency is not.\n\nProbably I will implement a more versatile formatter to reach my goals.\n\nIf you come up with something that you think would be valuable for the community, share with us and we will see if we can include it in this library.\n. > I like the http://carbon.nesbot.com/docs/ approach. Where the \"entity\" performs all the translations, formats, etc by itself.\nExcept this is not an \"entity\", but a value object. :smile: Also, it is possibly a huge break of SRP.\nAnyway, usually the functional approach is correct, even if it means you need to write formatters/parsers. That might be dependency on this library, but it won't work without them in case of VOs. This is probably a downside, but enforces better design which is a win IMO.\n. @Surt this is THE solution, the static proxy is just sauce.. @AyubM \n\nYou guys need to get a grip -- this is PHP not Java.\n\nI don't see how the programming language is relevant. If you are not comfortable with the interface, feel free to write whatever wrapper around it that makes it easier for you to use. It will still do the job.\n\nWhatever you call this style, it goes against PHP community standards.\n\nI would like to see those standards, especially because complexity is usually defined by the problem, not the programming language.\n@ossinkine that would break BC, also symbol is rather relevant for ISO currencies. While I don't see a huge need for having symbols in the core at the moment (really, how many symbols does someone use unless developing an general use-case ecommerce platform?), I'm not against implementing something in the ISO Currency repository, optionally with a separate interface.\n@frederikbosch what do you think?. @frederikbosch congrats! Let's talk about this later!. @wimby thanks for reporting this issue. I've opened a PR and will release it as 3.1 since there are already additions on this branch.\nI also opened a followup ticket (#340) as I spotted another issue as well.. Round two pushed. I would say -0 is kind of okayish, as the real number might be -0.5\nI also added tests for multiple leading zeros before a number.. I think we ditched ctype_digit once for the exact same reason, but I didn't remember.\nWell, I have another idea, don't know how that would work: filter_var could filter for being an integer and a regex too. I have to check the filter_var implementation, but if it quits once a filter fails, then we might be able to fail early and avoid evaluating the regex. However in other cases it would still be used, and I am itching a little bit, because it's slow.. I agree that -0 should be supported, but plus sign shouldn't IMO. Please see my updated solution, it seems to be simpler, not sure about the performance though, but if it's negligible, I would go with the simpler way.. Thanks for the contribution. To be completely honest, I don't really see how this works. Being an integer means there is no fractional part, in which case the string casting should be the same as the integer part. Not saying this is wrong, just trying to understand what's going on.\n@frederikbosch can you please take a look?. I agree with @frederikbosch: this is not really related to money as a value, but your custom need. You could create a nice wrapper around Exchanges and Money to get the desired result.\nAt least I don't really see how this would fit into a generic purpose money package.. Thanks for the PR. Hm, you could add your options here: https://github.com/florianv/exchanger/blob/master/src/ExchangeRateQueryBuilder.php#L19. Ah, sorry, overlooked a class name, they are so similar. :smile: \nSure thing then, but I would rather create an optional options array and pass it as is to the underlying object. Is that what you are suggesting?. I usually do caching on the HTTP Client level, but if Swap has support for it on it's own level, I don't see a problem supporting it.\nPersonally I think supporting Swap's config options would be a better way to go. There are no default config support in Swap, so the options has to be passed when the actual quote-ing happens. For that a simple, optional options array would be perfect in our SwapExchange. That way caching is implicitly supported.\nIf you want to open a PR @MichaelGooden, go ahead with the above in mind, otherwise I will pick it up as soon as my time allows.. Thanks for contributing to the project.\nI think the third option sounds like the cleanest, but modifying the converter sounds a little bit weird to me. It has a nice, single responsibility, I wouldn't add more to that.\nProbably adding a historical exchange interface, an implementation for swap and a HistoricalConverter could be the way to go?\nWDYT @frederikbosch . Well, when designing your application and database structure, you have to define a scope and a planned limit of amounts you need. You should probably choose a data type which suits that limit.. The Money object is immutable. Your code should be:\n``` php\n$total = Money::EUR(0);\n$total = $total->add($new);\n```. Thanks for the contribution.\nI am thinking about making the two exchange interfaces somehow compatible, so the same underlying implementations can be implemented in one class.\nMaybe rename HistoricalExchange::quote to quoteHistorical or just historical and implement this interface on the existing SwapExchange?\nI feel that having the same method name can be confusing, also using the same object as kind of a facade could make using it a bit easier.\nWDYT?. > I've been thinking about this, but I'm afraid extending the current interface is going to incur BC\nOf course it is, never said anything else. What I meant that it should be possible to implement the two interfaces in ONE CLASS.. Whoa, not so fast. \ud83d\ude04 \nHonestly I don't really like the idea of making DateTime a mandatory argument. Although strictly speaking what you are saying is true, I hardly think that in most of the use cases we need that kind of precision. On the other hand it adds a considerable amount of complexity to not just the code, the interface itself.\nI think payment is hardly ever handled by applications using this library, so if someone REALLY need realtime/historical currency rates, then he/she can use our more sophisticated implementation of Historical rates.\nIf we targeted PHP 5.6, we could use something like this probably for arbitrary options passed to the convert method: https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis\nUntil then @stefandoorn's solution for a separate convertHistorical method sounds like a viable way for me. . Sorry, I'm on a holiday now, this has to wait a little. \ud83c\udf34 . Okay, so as far as I can see we are looking at two proposed changes:\n\nadd historical rate support to exchanges\nadd historical conversion support\n\nAs for the exchange part, I don't see any problem with it. Some exchange implementations indeed support historical rates. I could even imagine that the abstraction you suggested @frederikbosch be implemented as an exchange as well, not a converter factory (pass the date to the exchange, which wraps a historical exchange).\nOn the other hand, I have to agree with @frederikbosch that relying on historical rates from whatever source doesn't seem to be a good idea. So keeping some kind of local cache/list for rates you are interested in sounds like a better choice.\nAs for the converter part: I'm really not sure about it. I have to think about it a bit.\nWDYT @frederikbosch ?. Thanks for the report, I will take a look at this soon.. Looks good to me. Can you add the exact same example provided by the issue reporter, to make sure his use case is covered?. I added the examples to the Calculator test case and it broke Gmp. \ud83d\ude22 . @frederikbosch can you please review my changes?. @frederikbosch careful!!! Why did you merge master into this branch? Please revert!. Because of the history. I will fix it :. Ah, okay, you squashed the commits, it's fine. Please do not merge the master branch into feature branches. Use rebase if you have to update the history.. > Merge branch 'master' into bc-compare-zero\nThis one is not really good.\nRebase is simple: it rewinds the HEAD to the latest common point with master, then replays the commits on that tree. This way commits will look like they were added after the latest master state. But it requires some care too: it rewrites the history, so you have to force push, which will conflict for others.\nSquashing before merging is also okay, but in that case we don't have a preview of the state before merging.. I will tell you the reason: the key differences are that isset is a language construct, array_key_exists is not, also the first checks if an array has a value for a specific key, while the latter checks if a specific key exists in the array (without accessing the value).. Thanks, we will look into this.. I think this is related to #352. I am not against adding empty string parsing, although we have to make sure that all parsers support empty strings in this case.\nThe other two are rather parser specific I think, but sound reasonable too.\nAfter a quick look, this regex would probably fix the decimal point ones:\n/^(?P<sign>-)?(?P<digits>0|[1-9]\\d*)?\\.?(?P<fraction>\\d+)?$/\nFor the empty string we can use a separate check.. Seems to be ok. Thanks for the contribution!\nCan you please clarify what you mean by redundant?\nWhen we implemented the new (v3) Swap we followed @florianv's suggestion do implement it instead of exchanger.. @Ellrion sorry for the huge delay, this will be part of 3.2.0 release (no ETA yet, but hopefully soon).. @Ellrion can you please update your PR to use the latest stable version?. @Ellrion thanks a lot for your work. I made the requested changes myself.. Thanks for the contribution, will be reviewed shortly.. I think we specifically rejected these PRs and requests in the past, because:\n\nnot everyone expects the same format when casting money to string\nwe have formatters\n\nThat said, I would consider merging this as this contains the less formatting logic possible. However, I think it can still be confusing, not to mention it's not useful at all when you use subunits.. Do you mean exposing it as part of the interface or as part of that specific repository?\nIf it's the latter, I am not against it.. I don't have a reason why we couldn't, but in that case you need to directly rely on that repository. It depends on your use case if it's good or bad.\n@frederikbosch anything to add?\n@barryvdh would you mind opening a PR?. Hm, I don't see this as a huge break of our principles. That information is part of the currency list, so exposing it doesn't sound like a big problem to me. But I leave it to you, you kind of own this part of the project.. Hi Erik,\nThanks for bringing this up.\nAlthough I see this would be convenient, I also have some concerns about it. Although the main use-case of this library is to use it with ISO currencies, it's not the only possibility. So it may not cause issues in case of ISO currency names, but it could in other cases (like Bitcoin).\nHow about the following:\nphp\n$money = new Money(100, new Currency(strtoupper($currency));\nI don't think it's a problem if you do it in your code and we do not force and introduce such thing in Money.\nWhat do you think?. HHVM support was never my top priority. As a fellow PHP developer expressed what HHVM was good for:\n\nhhvm seems to have done its job by pushing the php core devs to make php 7 about as fast as hhvm. I think we can add it to the allow_failures part of travis config.. I would say as a quick fix we should just allow it to fail then invest some time and check if we can fix the tests and properly support HHVM. If we can do that with a reasonable effort then we should, if not we can drop it entirely. I don't recall exactly what HHVM specific code we have, so I can't make a commitment to drop it right now.. @frederikbosch can you please review this?. Ping @angekouf can you please take a look at the tests?. Thanks for the proposal, but I think it does not fit well into the domain. Although it might be more comfortable, I would vote on correctness in this case.\n\nI would wait for some opinion from @frederikbosch though before closing.\nSorry for the negative answer.. Am I correct when I say this is the implementation of #381 ?. Thanks for your work anyway.. I also like the idea, going through the implementation now.\nAbout Calculators: I would like to keep that an internal detail if possible. So for now, I would just copy the code from the Money class and rewrite Calculator handling in a separate PR. Since it's an internal detail, we are allowed to make changes there.. Thanks @mcordingley . I am pretty sure that add returns a Money object.\nFor now you could go with the following code:\n```\n/* $addends Money[] /\n$addends = [];\n$money = Money::EUR(1);\nforeach ($addends as $addend) {\n    $money = $money->add($addend);\n}\n```\nI can see a lot of potential improvements on this front: accept a variadic argument list, return type, etc. Version 4 will likely come with PHP 7.2 as the minimum version.. Not sure if it's necessary. With variadic we can do something like this\nphp\npublic function add(...Money $money)\nthen use it like\nphp\n$money = $money->add($m1, $m2, $m3, ...);. Further thinking about this: we can implement this functionality now using func_get_args.. I don't understand why.\nphp\n$money->add($m);\n$money->add($m, $m, $m);\nsimilarly:\n1 + 2\n1 + 2 + 3. Why would it be dirty? As long as PHP 5.6 is not a hard requirement we can emulate a variadic using func_get_args. Maybe it's not nice to the eye, but it works, is forward compatible and a widely accepted solution to this particular problem (lack of variadic).. @frederikbosch Well, I think both the following could work:\nfunction add(Money $addend, ...Money $extraAdded){}\nfunction add(...Money $addends){}\nI don't see a reason why we should validate if there is a first argument. In fact, if we support variadic I could imagine that someone may want to expand an array of money objects and just pass that to money::add (eg. shopping cart amendments). That array could even be empty (no amendments). In that case the user would have to introduce a check instead of just calling add. So I would say there is no need to check if there is a first addend.\nAbout sum: why not just use add?\nMoney::EUR(0)->add(....)\nThe currencyIfEmpty sounds a bit leaky and error prone to me. User should be explicit about the currency here. Also, from a UX point of view array is somewhat less convenient IMO (at least compared to variadic).\nFor me the variadic add sounds like the cleanest possible solution.\n@gmponos exactly.. Since we dropped PHP 5.5 support, we can implement this functionality using variadic.. Hm, which operations exactly?\nAdd and subtract probably makes sense, but not sure if others do.. Thanks for sharing. My plan is to change the add function to be variadic and accept more than one arguments.. @bendavies see #456 \n. Stable is now the default version on RTD.. @programarivm read your post and the discussion on the other thread.\nI think there has been some misunderstanding, specifically about BIGINT != bigint and assuming that gmp/bcmath are mandatory.\nThe library uses string as the numeric representation, which allows, but does not enforce using BIGINT as the data type in your database.\nThe maximum numeric value which you can represent with Money is much bigger than PHP_MAX_INT thanks to this, but yeah, know your limits and use whichever data type makes sense in your persistence layer.\n\nin order for Money to work OK, your server needs to rely on special libraries for running precision arithmetic functions\n\nthis is not correct. those are completely optional, you don't have to use them if you don't want to.\ngenerally I agree with the principle, but I don't agree with all your reasoning:\n\nWhat is a realistic max limit for money in my app?\nDoes my app need to use currencies?\n\nThese questions should probably be asked in the context of an application. However, this is a generic purpose library which chose to use currencies and tries not to limit the maximum amount you can represent with it. We found that this is the way we can provide a library for the most common use cases, but it might not fit for everyone for whatever reasons and that's perfectly fine.\nTBH I am not against adding a note to the documentation, but I think that it should already be obvious to choose the appropriate data type for your application.. > not raising awareness about how things work behind the scenes.\nI can accept this point if you say that the documentation does not give enough explanation how the Calculator logic works under the hood. But I think it is:\nhttp://moneyphp.org/en/latest/concept.html#integer-limit\n\nmy understanding the current Money library induce developers to infere that everything is OK with thinking in terms of BIGINT always\n\nCan you please point me to the docs or a single source which you think  encourages developers to ALWAYS think in terms of BIGINT? The possibility is given, the tools are given, that's it.\nOr is it the problem that Money internally picks BC/GMP by default if it detects it?. Well, if you want to enforce that principle in the first place, you shouldn't install or enable those extensions.\nAlthough there may be a slight performance penalty when having them enabled, but not using their capabilities, I don't think there is any more risk in having this convenience layer.\nLast, but not least: changing this now would affect behaviour =>\u00a0BC break which would require a new major version.\nHonestly, I am not really convinced by the points you raised. If you don't want to use GMP/BC then don't enable the extension. If you enabled the extension, but don't want to use it, you can still explicitly registering the integer calculator as the first one. This may change in the future, but I don't think it requires any actions from us now.\nThanks for raising these points anyway.. CurrencyList works for me too. I think you are mixing things up a little: You implemented a currency repository.\nhttps://github.com/moneyphp/money/tree/master/src/Currencies\nWe use the Currencies suffix there, but only to stay within the domain and avoiding naming, like Repository.\nEven you originally called it ArrayCurrencies\nSo I would either find a name following that pattern or go with CurrencyList which is also somewhat okay within the domain.. I'm more in favor of CurrencyList at the moment.. Will take a look at it tomorrow. I would like to slow down a bit on tags\nand not release every time a new feature is added. We kinda abuse patch\nreleases.\nOn Aug 25, 2017 9:22 AM, \"Frederik Bosch\" notifications@github.com wrote:\n\nThanks for reviewing @sagikazarmark https://github.com/sagikazarmark. I\nthink this is ready to go. Merge and tag?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/moneyphp/money/pull/391#issuecomment-324843952, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABK2kKPkKEgi8_Xs9ZkP8JORuH-zQBTzks5sbnZOgaJpZM4Ot-k1\n.\n. > Then you will have to change your root composer.json to use minimum-stability and prefer-stable\n\nPreferably you maintain a fork, until your feature is merged upstream and I see no problem with that, given that the project is actively maintained.\nCurrently we have a few patch releases containing mainly new features, not actual patches which is kind of abuse of semver.\nTagging a new release every time a new, mostly insignificant (no offense contributors) feature is added does not give us and users enough time to take a look at the changes, iterate whenever necessary, make them more mature. And TBH, in case of a feature like this I see no problem with just copying the code to the project and using it from there until the new version is released. If done right, it should not be more work than renaming the class in one or two places, which is what we keep the massive beasts called IDEs eating up all our RAM for.\nI understand that keeping up the speed is cool, but that's not how stability and maturity are achieved, and in a project like this that's priority one.. > When merged to master, tagging must be always possible.\nNot necessarily. You can branch off from the latest stable tag, do some changes, create a patch release, and merge back to master.\nI tagged this PR with 3.1 release milestone. There are a few other new features proposed, so let's finish them as well and release them together as 3.1. @gmponos thanks for all the hard work. I did one, last, thorough review, so once those are resolved I don't think any more changes are necessary to get this merged.\nThere is one which might be subject of discussion, but I think we can sort it out quickly.. Thanks a lot @gmponos for your work and your patience. :). I don't really like the idea of auto-updating. That way you cannot lock to a version which is known to be working.. I think some of them can be implemented in a BC manner in this version as well, and remove the unwanted behaviour in the next major. Parser and CalculatorRegistry can surely be done this way.. Yeah, me too, but I would like to avoid maintaining two versions and we've just released Money 3.0, so people using it would probably not want to migrate again.\nSo as long as we have to maintain 3.0 I would rather pack the new features in it as long as possible.. @frederikbosch I know you worked on Precise Money a lot, but I think it would be better to aim that for 4.1\nLet's make 4.0 about removing deprecations and moving to 7.1. WDYT?. Thanks for the suggestion. I'll add it to the todolist.. Thanks @jarobe42 a lot, this will be part of the 3.1 release which will happen in the next few weeks.. Thanks for all the feedback. I would like to concentrate on the 3.1 release ahead of us, but after that I will start working on migrating to PHP 7, probably 7.1\nThat should let us clear a bunch of docblocks and remove deprecations.. Thanks a lot for your PR @jaikdean , sorry for the late feedback. I like the idea, kudos for the really high quality PR.\nI had one minor comment regarding the number of provided tests, I would like to see a bit more examples.\nApart from that, I have nothing to say, but thanks (and hit the merge button ;) ). Thanks @flajos for your contribution, sorry for the late feedback.\nAs far as I can see the builds are breaking because of the documentation, but that has been fixed in https://github.com/moneyphp/money/commit/1fc94fcc55ae3b534932d8cdab33bc591e4c3e24, so I'm just going to merge your fix.. @frederikbosch can you please take care of changelog and the release?. @Aerendir I think there is a bit of misunderstanding: DecimalMoneyParser and DecimalMoneyFormatter are part of the library, only the example code presenting the usage was made up by @unglud.\nSo I don't think there is anything to do here.. Personally I'm not against that change, normally users should not be able to tell the difference, if they do, that's a leak in the abstraction.\nWhat do you think @frederikbosch ?. Does this thing work if you simply add them in a php file (not above the Money class)?\nThis request has been rejected previously, mainly because it pollutes the Money class and makes the file unreadable. If it works, I would even be happy to auto generate it just like we do with our currency list.. We had similar requests earlier with more than two proposed factory methods (aka. all of them). That's what I mean when I say unreadable.\nI'm afraid if we start going down on this path it will never end.\nI will think about it and look around for possible solutions.. Found it finally: #92 I would really like to avoid something like this.\nI could accept saying have the top ten currencies added as typehint, but no more, because:\n\nMoney is not limited to ISO currencies\nISO currency list is generated (How do we maintain generated list within the class)\nnumber of currencies\n\nI would really be happier with some other solution where we don't have to maintain a dynamic list within the source code. For example some generated file with doc blocks or whatever IDEs can read.\nAlternatively we could generate an ISO or whatever class which contains a factory for all the currencies.\ntl;dr This solution should be our last shot at the problem.. > file that will do the job on the local machine and don't have it in repo.\nSince this is just for development that could work, but I'm not against having this in the repo either if it works.\n@shirshir thanks for your suggestion, I was hoping that there was some kind of official way to do this in PHPstorm, but it seems like we can't use it then. But I would love to revisit this if PHPStorm adds support for static methods. (Perhaps we could open an issue in Jetbrains' issue tracker).\n@Gummibeer would you like to open a pull request?\n(Hint: we usually put these stuff into composer scripts as well to make running them easier).\nWe can discuss in a PR whether we want to maintain the list in the repo or not.. > But adding a phpstorm only version would be a nice addition but not as the only one.\nIndeed, for now we can just go with this version and think about phpstorm later.\n\nSo I will add a pollished script like the one I posted and make it available via composer.\n\nGreat, thanks a lot.. Closing this then. Thanks @willemstuursma anyway. I second @frederikbosch 's opinion. Would Money::fromNumber(Number::fromFloat(3.5)) work for you @bendavies ?. Hm, I see. I'll leave this decision to @frederikbosch . LOL, how the hell did we miss this?. @frederikbosch I didn't mean to blame, no need for excuses.. Patch released, thanks @willemstuursma . You might be interested in #391 which lets you instantiate your custom currency list. If you ever need further ISO currencies (and you don't want to add each of them one by one, and of course don't need to support larger amount of subunits) you can wrap your custom one and the ISO one in an aggregate with yours being the first. I believe this is a cleaner approach than extending the ISOCurrencies class.\nFor the moment you can just copy the class and use the one from this library whenever it gets merged and released.. Yes, it is a design decision we made and discussed quite a few times (you can search for it in the issue tracker).\nModifying behavior is exactly one thing that we wanted to forbid, adding behavior is another question, but it's forbidden for now too.\nWhat is your use case? Usually there is an other way that's usually cleaner than extending the money class.\nThis will probably not change.. > First simplified constructor\n\nSo I have something like Money::createFrom($oldObject)\n\nIt's a common misconception that you have to put all these functions into static methods of a class, but PHP is not Java, you can simply create functions which do that for you. Especially if it contains some kind of business logic, it has no place in the money value object. Some would argue that what Money is depends on the domain (which is true), but you can wrap money if necessary.\n\nIt pretty messy explanation I agree, but all I want to say, everything will be much much easer if I could just simply extend Money class.\n\nExtension in terms of extends is overused and abused in most of the cases IMO, that's why we decided to make Money final.. I think a few concepts are being mixed up here. Money is not a dependency in terms being injected to somewhere. You don't inject (or mock) string literals or integers, do you? Money is also rather a value, not a service, so it should not get injected. It doesn't mean of course that you cannot pass it to another object to set it's state, but it's not dependency injection.\nSo ultimately, you shouldn't mock Money in the first place.\nAdding an interface has also been discussed quite a few times and IMO it's also a kind of abusing OOP: there is no alternative implementation that does things differently than the current one, therefore adding an interface would merely be a hack to fool PHP and allow things like mocking (which should not be necessary in the first place).. You mean it's final, right? Hehe\nJokes aside: I hate to turn other people down because they don't understand/accept this decision. I try to discuss and find a solution...which I believe sometimes succeeds.. I noticed and I'm not really happy about them. \ud83d\ude15 \nYeah, you can just ignore them.. Haven't had the chance to try it, but I like the idea of having a generated something that causes the IDE to show proper typehints. IMO it's much more than adding them to Money.\nThis script generates a file which is not autoloaded, but read by IDEs, so they can properly show typehints for magic ISO currency constructors.\nAs said I haven't reviewed it properly, but I would say it's not a blocker, so if we can't make it into 3.1, that's not a huge problem. I will try to pick it up this week.. Would that work with IDEs? If so, a generated trait sounds like an acceptable compromise.. @frederikbosch I think it's an acceptable compromise in this case. It's ugly for sure, but let's think of it this way: if there wasn't __callStatic (which is - let's be honest - also not really nice) you would have to generate all that code.\nIn fact, I think we could even move that callStatic function to the generated trait as well. That way all ISO static nastiness is moved out of money (on the implementation level). But that's just an idea.\nI did a little research and without writing an actual idea plugin (which just blows a mind) we probably can't achieve dynamic methods without this. Unfortunately this area is barely covered by JetBrains and Google.. \u261d\ufe0f  I created a separate PR with my experiments based on your code @Gummibeer . Any input is welcome there.. Thanks a lot!. How do you want to format a PHP object in javascript? I mean: you somehow need to return the object to javascript in a string representation, so why not format the value there? Unfortunately I don't use too much JavaScript, so I can't help with that.. Thanks for the report @dmitry027 \nIndeed it seems to be a bug, and I think it's related to the subunit difference between these currencies.\nSpecial thanks for the test cases!. Hm, looks like I reacted too quickly. The above script produces the expected result. I also added a few test cases and they seem to pass: #423\nWhich version of Money do you use? We fixed a few rounding and formatting issues since 3.0. You mean #427. Maybe we could run all test suites with all calculators? That would uncover these issues much earlier.. I think so, I was trying to provide more tests to reproduce #422, but turned out this is not the cause. Still, large subunit difference tests are nice to have.. Yeah, I usually prefer milestones for these kind of things.. Yup, tagged the new version.. Yeah, it's because of the Yoda condition rule added by StyleCI. I can turn that rule off and styleci should be ok if you wish.. > Can you turn Yoda off?\nOn it. Maybe we could turn self_accessor off as well?. Thanks a lot, looks good to me.\n@frederikbosch can you please check as well?. Making classes final by default is generally a good idea when no extension (mean: inheritance) is expected. If you need to add behaviour you can use composition to create your own wrapper or simply copy the class you want to modify.. Sorry, really don't see the issue with what you described.. @frederikbosch Looks like there were some comments made after merging. Sorry for not reviewing it earlier, but I kinda agree with those points.. No, it is not.\nUnfortunately this is an issue that occurs when float is casted to string on specific locales.\nThere is no float casting in version 3.0.x here:\nhttps://github.com/moneyphp/money/blob/v3.0.0/src/Converter.php#L42\nBut there is on the latest master.\nTrying to write test for this now.. Looks like the solution is rather trivial: do not cast float to string at all. Sprintf seems to be a good alternative, we just have to use Number::fromFloat everywhere.. As far as I can see the conversion ratio can only be float right now. At least based on docbloc, and I think it's fine.\nAlso, this works: https://3v4l.org/KffDE. The conversion ratio will always be float, so we have to deal with float values at some points.\n@insbrook can you check if #447 solves your problem?. Can you please open a separate issue for that? You can address it to be a general solution for this problem, I suspect we have to review all string casting operations.. Once travis gets back from where it is now the tests should pass.. I think conversion ratios are hardly ever integer values. The contract currently says float, so if something returns an integer it's a bug and needs to be converted to float. I can live with that for now, instead of adding some logic for guessing the format.. @frederikbosch can you review this before merging?. Are there any use cases for alternative implementations? And even then, do they actually do the same thing?\nIn my opinion the Converter is a service, or a facade if you wish. It depends on abstractions, which makes it kinda extensible. It's also relatively small, so for any custom use cases it can just be copied and modified.\nPersonally I think this is a bit overengineering. If you can give me a few examples where this might actually be useful within the domain I might reconsider.. When I said copying code, I didn't mean to use it as an alternative to the Converter in this library. \nDependencies between code does not always require an abstraction. Also, as I said I consider the Converter as a service which rarely require an abstraction, so I don't see LSP necessarily related here.\nYou are right about the unit testing part: it's not a unit test anymore, it's called an integration test. You shouldn't mock what you don't own anyway.\nhttps://adamwathan.me/2017/01/02/dont-mock-what-you-dont-own/. > but why should we object to an interface for the converter?\nI'm not objecting anything given valid reasons provided. I asked specifically for reasons to provide alternative implementations...none has been given.\nThink about it this way: there is a Converter interface......then there is a DefaultConverter as we probably can't define any other use cases where a converter implementation makes sense. (The only difference is that they have meaningful names, but ultimately everyone will just think of it as the default implementation)\nPlease, prove that I'm wrong!\nAs far as I can see the only reason for this interface right now is to be able to mock it....which is just simply wrong. Even if there was an interface, mocking it would still be wrong.\n\nIntegration test is good, but it is not a replacement for a unit test, it can be a complement.\n\nSure thing. But there are cases when you can't write unit tests, because on the unit level you don't own the whole code. That's the definition of writing integration tests.\nSadly you can find some examples even in Money where we mock interfaces not owned by us. Not good, but sometimes it's acceptable. But adding an interface purely for being able to mock it is (again) wrong IMHO.\nIf I were you, I would probably mock the exchange interface if I had to.\nBut I don't see why using the fixed exchange and calling it integration test is bad.\nUltimately, you can also provide your own abstraction over currency conversion (as pointed out in a comment in the linked issue), that is how you can own the entire code.\n@frederikbosch I'm leaving this decision to you. It won't hurt if this interface makes it's way into the package, but currently I can only see bad practice out of it and that's not the effect an OS library should have or support.. Thanks for reporting this issue. Looks like the code is indeed wrong (probably a copy&paste error).\nPlease see #451 for the fixed example.. For one, you could check the changelog to see all changes since 1.x, there are quite a few breaking changes, but that should be okay as they are released under a new minor version.\nWe decided to store the amount internally as string because there are many cases when we have to work with string representations: formatting, parsing, arbitrary precision libs(bcmath, gmp).\nIf you know you have only values within the integer limit of your platform, you should be safe casting the amount to integer. (Note that in case the integer limit overflows the resulting value will be of type float).\nAlternatively you can use builtin comparison and mathematical functions.\nSee the documentation for details: http://moneyphp.org. Whatever is best for you! Good luck!. There were discussions in the past, but those were mostly related to concrete DBAL layers (doctrine, laravel, etc).\nNot sure if we can spend time on doing some experiments right now, but we are certainly happy to review PRs and provide a place for this information.. Thanks for your answer @sstok , but I'm afraid it's not relevant in this case.\nAlthough you are right about not using float for monetary values, during some internal calculations it's inevitable that some results will be float values before converting them back to integer. The problem here is that based on the locale PHP casts float values to string with different decimal separators.\nAlthough heavily argued, but arbitrary precision libraries (especially when used in an environment where you have no, or limited control of the input, like all web applications written in PHP) can carry some security issues, so it may not fit everyone. (Read earlier issues and discussions)\n@chekalskiy thanks for opening this issue, I will investigate it as soon as possible.. Tagged 3.1.2. > What do you think of a static named constructor sum in addition?\n\nIt would help my own codebase a lot.\n\nDo you have an example use case? I'm not against it per se, but I would like to see how it would be used. My only concern is that having sum for add would be a little inconsistent. What about subtract then?\n\nAlso, you could reduce the number of getCalculator calls.\n\nNice catch, thanks.. > You should be able to supply the currency as second argument to create the zero amount.\nI'm not sure I like that idea. Let's stick to the shopping cart example: normally your shopping cart contains items with prices. The cart itself doesn't know anything about currencies or payment methods.\nWith that sum solution you would have to pass a currency object to the cart to use it when there are no items in the cart. It's not only an unnecessary knowledge for the cart, but also makes it extremely easy to get into an inconsistent state: what if you change the currency? You naturally iterate through the cart and change the money values, but you also have to think about passing the new currency to the cart as well.\nI understand the zero money problem, but I don't know the solution and I think the sum function this way is not really a good idea.\nWithout the currency fallback and requiring at least one element in the array the static sum function could work.. Can't really think of any other solution right now. Thanks. Hm, yeah, great idea, would definitely make testing easier. However, there has to be some sort of static initialization, preferably outside of money, because the whole point of this separation is that other components can access the same calculator context.\nWill work on this, let's see what I can come up with.. @frederikbosch okay, so I made the registry a singleton, added a few features and reorganized internals.\nBut somehow it still doesn't feel right this way. Could use some fresh eyes. \ud83d\udc41 . @chekalskiy can you please check if this solves the issue for you?. Yup, it did.. No, as they don't involve casting float to string:\n\nadd: adding two integers will result in an integer anyway\nsubtract: subtracting one integer from another will result in an integer\nabsolute: there is no calculation related to precision\nmod: there is no calculation related to precision. But I've just found other places where the tests break. I added a new test case for running all tests with russian UTF8 locale for the php calculator.. @frederikbosch see the separate commit with the breaking tests. Solution pushed in a separate commit.. Merging this as it fixes the problem, but I'm going to do some refactoring around the number class. I feel that there is too many string casting here and there.. Also, this PR fixes a number of local aware decimal separator issues with bcmath and gmp.. (Note in advance: this PR became a bit bigger, so I don't want to squash commits, there are a few meaningful ones). Thanks for the review!. Thanks for reporting. Can you check if the linked PR solves the issue for you?. Released 3.1.3 with the fix. @willemstuursma Great idea, will do.\n\n@Gummibeer users of this library are not supposed to run the generator script. If you need that kind of functionality you either need to write your own factory or live with the IDE not recognizing the currency.. Again, this file is part of this library, any modification to it should be considered a serious anti-pattern and it's behavior is undefined, not supported.\nYou are free to do that though, but I think the solution I provided above (creating your own factory) is the best way to achieve the same functionality.\n. I already tried it, I guess people could live with that.\nBut: I'm not a huge fan of this whole static factory thing, especially of the callStatic method. If we ever decide to rather generate static factory methods...with this solution we can.\nFurthermore, I believe the Money class becomes a bit cleaner without the whole static factory thing, that's why I moved the callstatic to the generated trait as well.\nThe alternative would be writing a PHPStorm plugin, which would probably address all your concerns. I looked into it, did some research, and I needed half a day cooldown period after that, because my mind was blown.\nTo sum up: I think this is an acceptable compromise, even makes things a bit cleaner in terms of static hack moved out of money. It makes a huge step forward in DX, which at least at some level should be our goal too.. AFAIK it cannot add new methods, only the old API which is now deprecated.. I'm okay with saying we should keep looking to see if there is a better solution, but I think rejecting this solution without a viable alternative is not the way forward.. Although it's not a nice solution, I believe it improves DX. I guess I will have to take my chances with brain damage and look at phpstorm plugins again. \ud83d\ude04 \nhttps://www.jetbrains.org/intellij/sdk/docs/phpstorm/php_open_api.html\nThis looks exactly what we need. The reason why Money::EUR is great is because it's domain specific. Any change to this will be less domain specific. The callStatic method is not a nice way of doing anything, but in this case I don't see any other option.\nI spent another hour staring at Java code and I believe besides auto-completion, we need to cheat PHPStorm to handle the references well.\nThe more I think about this, the more I'm willing to just accept this solution as is. I believe thinking of it as a \"change for the sake of IDEs\" is a limited point of view. The change is for the sake of developer experience and in this case it doesn't hurt any design principles (like all the criticism we get because of the final classes). It is tested, so if something goes wrong, we will know about it. And the code is literally the same.\nThe solution you proposed @frederikbosch IMO is not a good one, because it doesn't make DX any better. The IDE will just complain about a different thing.\nThe good thing about this solution is that any time in the future if we find a better one we can just remove this madness without breaking any API. But currently I'm not convinced if that's even possible or worth the effort. (Please take into consideration that I've just spent an hour looking at java code, which probably affected my mood in a negative way \ud83d\ude04 ) Also, compared to a PHPstorm specific solution, (I believe) this one is universal, so it will work for those who are stuck with something else.. Did my arguments really convince you or you just tired of the debate? \ud83d\ude04 . I understand. We can revisit this in the future, for now this is a good enough solution. Thanks for working towards quality. \ud83d\udc4d . Money already has a compare method which follows the \"standard\" compare interface (-1, 0, 1).\nUsing that you write a simple minimum and/or maximum search as you would do with any other values.\nAll money methods are safe to use in terms of currency and other validity checks, meaning trying to compare values with different currencies results in an exception.\nNote that creating a \"zero\" money value is not easy at all, because you have to know the target currency. This means you always need at least one money object in the input.\nMy first idea is to implement them as static functions in the Money class:\n\nMoney::min\nMoney::max\nMoney::avg\netc\n\n@frederikbosch WDYT?. Nice, that would indeed make things easier. Also, the at-least-one-element problem can easily resolved by throwing an exception when the array resulting from the variadic has zero elements. But in that case you still have to make sure that your iterable contains at least one element or catch the exception and handle the fallback, but that's not that nice.. Looking from a defensive perspective you can never be sure that there is at least one element. Think about a shopping cart: it can be empty or has items in it. Of course you can branch based on the cart item count, but that's again not very nice IMO.. > Of course you can branch based on the cart item count, but that's again not very nice IMO.\nThis is the problematic thing. Consider the following:\nphp\n$prices = $cart->getPriceIterator();\n$sum = Money::sum($prices);\nIf you code in a defensive way, you have to put a zero value there because the iterator might be empty.\nThat would make every single usage of sum look like this:\nphp\n$prices = $cart->getPriceIterator();\n$sum = Money::sum(Money::EUR(0), $prices);\nIn an earlier comment I think I already explained, that the currency here is probably a leak in your code. At this point you probably shouldn't know about it.\nSo I guess there is no nice solution using the aggregation functions, the implementation can work both ways, the problem remains the same.. Yeah, it looks like it's hard for me to imagine the actual usage, so would be nice to see it in form of tests and implementation.. stdClass is not a contract, so I would rather not accept it as a parameter.\nWhy would this method be better than new Money($json->amount, new Currency($json->currency))?. Well, after decoding from JSON it does not really have anything to do with JSON, so fromJson sounds odd to me.\nUsing array sounds a bit more logical to me: that's what we output from jsonSerialize and I think it's easier to work with.\nAlso with arrays, we can support multiple representations:\n\n['amount' => '123', 'currency' => 'EUR']\n['123', 'EUR']\n\nAn alternative I can think of is a Money\\json_decode function which internally does the decoding, validates the value and just instantiates the Money object.. ```php\n$json = new \\stdClass();\n$json->amount = '123';\n$json->currency = 'EUR';\n$money = Money::fromJson($json);\n```\nWhen you call that method, you can no longer talk about json, only about an object which is a result of a json_decode call. If json decoding is not part of the job then it's not about json anymore from money point of view. No matter what your use case is.. I would also be more comfortable with implementing one of the two solutions suggested above instead of using stdClass.. Maybe something like #475 ?. Maybe we could implement it as a separate function?. You are somewhat right: I don't like having normalization logic in Money either. Actually it breaks SRP, so if this function ever gets inside this package it will probably be a separate function or placed in a separate class.\nI don't think however, that this functionality would be totally out of scope for the package. Providing some utilities for serialization can help getting started, while you can still write your own when using Money in a more complex application.. I think you can already achieve this with the current converter: \n\nSet up a fixed exchange with the currency with 1 as the ratio\nPass the same currencies with different subunit to the converter\n\nAlternatively you can implement a constant exchange which always returns one, no matter the currencies. That way you can spare some configuration.. Since you already typehint PayPalCurrencies, you could avoid the extra ISOCurrencies injection and implement the subunit difference logic directly in PayPalCurrencies.\n@gmponos does the above code solve your problem?\nAlthough I would like to keep the core library as minimal as possible (it's not the LOC, it's maintainability and complexity of the library), it's clear that there are tons of use cases around this library and the community could use some central place to share code and knowledge. I would like to support that, I'm just not yet completely sure what would be the best way to do it (accept community packages to be in this org, documentation pages, an awesome-money repo, etc).\nI would be happy to hear your opinion about the matter.. Well, I'm not going to use it much, but yeah, I can think of a few cases when it can come handy. So sure. I disabled the bot.\nLooks good to me. Added it to the 3.2 milestone.. @broberts-mrmc @oligus This sounds like a great addition to this library. I will try to find some time to work on it.. I'm not entirely sure what you are trying to do. Money stores amounts in integers internally (technically integers in strings). It also takes subunits into account, so when you write Money::CNY(2069) internally it is stored as 2069, but it really means (for example when you try to format the money) is 20.69.\nIf you divide that with 100 it will become 20.69 internally, which really means 0.2069. Since this currency only handles values until 0.XX, the rest will be rounded.\nAmount will only be an integer. If you want to format the money, use a MoneyFormatter, or keep in mind currency's subunit.\nHope this helps. I recommend you reading the documentation, these concepts are discussed there in details. If you are missing something from there, feel free to open another issue.. I recommend creating a wrapper around the ISOCurrencies class, implementing the Currencies interface. That way you can override the minorUnit for the currencies you need to.. @judgej not only this library has no solution, everywhere two money objects interact the currency must be the same. \ud83d\ude04 \nJokes aside: It seems to me that this is a quite specific use case and we are trying to keep the library as minimal as possible. That being said, I'm not against collecting knowledge for specific use cases somewhere in the MoneyPHP ecosystem.\nIf you come up with a decent solution, I'm more than happy to provide some space to host it:\n\ndocumentation page\nseparate repo as an example (I guess writing code for the above problem wouldn't count as a whole package, would it?)\nthis issue\netc\n\nAs for the solution: I guess you would have to use one of the Calculators (or convert to int) and manually add the values together. You can use the Currency to determine the subunit for each of them.. I'm not sure it would make sense to choose a calculator on a per instantiation basis, it's rather a one time choice. Do you have any use cases that would require it?\nAs for choosing a calculator: I'm not against making it part of this PR: #458 \nOne could instruct a global registry to use a chosen calculator. > this is an issue IMO, because moneyphp/money encourages to install the extensions.\nI don't think we ever encouraged to install anything, but let's not get into that conversation again. \ud83d\ude04 \nIf you take a look at the linked PR, there is a disableArbitraryPrecisionCalculators method in the registry which does exactly the thing you want.\n\ngive a bit more power to the programmer.\n\nYeah, this might not be that good with the currently available API.. > Anyway I still wonder if BcMathCalculator and GmpCalculator could be moved from moneyphp/money to a new repo (moneyphp/big-money).\nI don't think it's necessary, but it would make the implementations less accessible. Having that code in this repository doesn't create a hard dependency on bcmath or gmp. I understand that you want to see these things gone, but please understand that it won't happen.\n\nI agree with this recommendation: Apply the principle of Least Privilege to all systems and services\n\n@programarivm we got your message, repeating it over and over and over again won't move things forward, quite the contrary.. Closing as #458 will provide solution to the original problem.. I can think of an optional second argument:\npublic function allocate(array $ratios, $allocation = self::ALLOCATE_FIRST). I would rather create an additional function for that use case, internally one can call the other, but until there is actual use case for such behavior, implementing allocation to the first and the last targets might just be enough and definitely easier to use.. LGTM, thanks.. I guess it can also be a readability thing: don't have to check what the parent does, because it does nothing.. This feature was implemented in #478, waiting for release.. This sounds like a nice addition to the library.\nFor now you can create a custom exchanger with fixed rates to ensure you always get the same result.\nWhere this method should go: I will have to think about it. It would be nice to keep it separated from the exchange stuff, so a separate class would probably be a better fit, but we will see.\nIn the meantime, feel free to submit a PR to see how it would work.. Yeah, good idea. I'm going to release 3.2 and postpone the rest of the things in the tube.. Done in: https://github.com/moneyphp/money/releases/tag/v3.2.0. @UlrichEckhardt thanks a lot for bringing this issue up. Would you mind opening a pull request with the proposed changes? That would provide a better way to review and discuss the changes.. Fixed in #505. Yeah, it looks great. Thanks!. SInce that block is about not supported formats, I would probably remove that example entirely.. It depends on what you want to do with your currency. Creating the currency itself is easy: just give it a currency code and use it.\nIf you want currency conversion, then you can either implement your own Exchange class (which eg. contacts a separate service asking for conversion rate) or just use the FixedExchange with hardcoded values.\nFor formatting you will need to implement a MoneyFormatter. If you use other currencies as well, you can channel it into an AggregatedMoneyFormatter.\nLikewise, you can do the same for parsing a string representation of your currency.\nLast, but not least, you might want to implement your own Currencies, which is a collection of currencies. As with the exchange, you can also use an existing implementation, like CurrencyList.\nI suggest you checking out the Bitcoin implementations.\n(Note to self: we might have to write some documentation about this topic). You can easily use multiple currency source with the AggregatedCurrencies class. Other than that: yeah, this could work.. Hm, not sure how we missed this.. Noone is going to get the error twice: the code in this change will convert the currency into a Currency object, so the underlying parsers won't trigger the error.. Thanks for the contribution, but I'm not really in favor of this change.\n\nthe ratio really is Money\n\nThis is just incorrect. As @UlrichEckhardt pointed out the ratio is just a number.. I'm gonna merge it, because I don't have anything against it, but it's premature optimization.. Thanks!. Well, technically it is a BC break. I would rather make it optional and trigger a deprecation error when something is passed.. Yeah, it looks like it's technically required.. Thanks!. Thanks!. The max/avarage amount is dependent of the currency. So in case of high inflation, it easily reaches the maximum integer value. Not speaking of 32bit integer.\n. Not sure if it has any benefit.\n. I just realized that. I solved a problem and introduced another. See my last comment.\n. It does not mean you cannot use arrays. If it is mentioned in the docs you just go with it and don't use any other way. However, IMO using array is the same as using many parameters. At the end, they also become an array.\n. Reverting it then.\n. This is not necessary. Prefixing the method name with test is enough.\n. Empty docblock\n. Empty line\n. Same as here\n. Can you please add file headers? I have the feeling they are going to be removed from the project entirely, but should be consistent until then.\n. Although I am a big fan of OOP, do we really need an updater object here?\n. Not sure how Buzz actually works, but shouldn't we handle some possible errors here? No internet connection, and so on.\n. Yeah, I meant this: not sure if we want to see exceptions, but an error message stating what happened.\n. Yeah, probably a little but over separated. Since there isn't any control in the flow.\n. Fair enough. Okay, leave it this way.\n. I would rather say \"you'll have to\"\n. Finy by me.\n. I wonder if the quotes are necessary. Sometimes you use them, sometimes not. Also, in this particular case: the slash in the class name is inconsistent with the rest of the docs.\n. Although I prefer YAML as well, user can still use XML as well, right? Not sure why, but it seems XML is some kind of standard out there.\n. Sorry, after rereading my comment I relized that I was totally unclear: I meant that XML could also be mentioned, the configuration itself is perfectly fine in YAML.\n. Please add yourself as an author (if you are OK with that) and remove the rest from here.\n. Classes from root namespace are OK to be used in the form of \\InvalidArgumentException. Import statements like this does not make things easier to use/read.\n. -extra line\n. -extra line\n. Unnecessary comment\n. Please add a new line before return statements\n. In case of interface implementations, use {@inheritdoc} please.\n. Please use camelCase variables and add a new line after this statement to increase readability.\n. Missing newline\n. Missing newline\n. Missing newline\n. Can't we make this a static function? In that case we don't need to instantiate all calculators when detecting the right one.\n. types from @param phpdocs are missing\n. Only Calculator, not CalculatorInterface.\n. Missing newline.\n. Empty phpdoc.\n. Something like detect, initialize or find would fit better here IMO.\n. If the supported method would be static, we could even add possibility for custom calculators. Somthing like Money::registerCalculator with our calculators in the list out of the box.\n. Missing newline.\n. Unnecessary import\n. Can we create an abstract test case with an abstract getCalculator method to avoid duplication?\n. Missing newline.\n. I think having a singular method would be better. I would also add a check whether the class exists at all and implements our Calculator interface. Also, why default? It could be just calculators IMO\n. Also, a new calculator should be added to the beggining of the list to make sure custom calculators are checked first.\n. Missing newline\n. Can you please remove package phpdoc and add yourself as an author (If you are OK with that)?\n. I know it's kind of obvious, but can you please add some documentation here as well?\n. Return and param docs are not necessary with inheritdoc.\n. I would use an array_unshift here. Array additions can behave as a bitch.\n. I would remove this line and modify the docblock to Calculator $calculator\n. Consistency.\n. should be a dev requirement for unit tests, like gmp and bcmath\n. Is digit the same what I called subunit? If so I would rather call it fractionDigits following NumberFormatter convention. Also, I would not set it to 2 as default. Maybe it is common, but it depends on the user: one might not even support subunits (like rounds up cents and doesn't care about the rest)\n. Do we really need a separate method for that?\n. I would say we need that space after the comma.\n. By removing custom instantiation, what if the second parameter of the constructor is not that constant? Will this formatter work? If not, we should document it (even if this class's constructor IMO)\n. Author is missing\n. Type is missing\n. Let's call this delegatedFormatter\n. Add some spacing before ifs to increase readability\n. Before control structures in general\n. Author is missing\n. Let's call this delegated as well.\n. Type is missing\n. I can't see a reason why it couldn't be final. WDYT?\n. Missing new line\n. Missing newline\n. This shoulg go into the Removed section IMO\n. Well, I think the logical way of rounding is the way how @pamil described rounding, but I never realized the difference here. For consistency, I think it would be better to maintain the current behavior, as the change would cause as much confusion as the misleading itself. Keyword: documentation.\nAs compromise, we could have ROUND_HALF_*_NORMAL, or something like you suggested @frederikbosch, but a little bit more concise.\n. Edge case: what happens if someone enters -0 here? Will it have any effect at all?\n. Ah, no. No more responsibilities. The reason why people CAN describe rounding is to avoid problems originating from default behaviors.\nAll in all: I don't think there is a right solution for this problem. If we change, there will be problems. But this way it is misleading. Again: docs FTW, but apart from that, we can't really make everyone happy.\n. RTD allows us to maintain separate versions of documentations. I don't think it's necessary to add version here.\n. I would rather use carret.\n. Agreed. Not sure if a version is necessary at all. composer require will install the latest stable.\n. Because we need the currency if no force currency is passed.\n. But it does not give us the currency\n. Not sure if it strongly belongs to the readme. This should be emphasized somewhere in the docs IMO.\n. This should go into a let method (see other specs) which is the same as setUp in PHPUnit.\n. This can remain here. You can have multiple construction. In this case the one in the let method will be the default, and this one will override it.\n. We don't need this anymore.\n. IMO MoneyFormatter[] is enough\n. Yoda condition\n. What if money is not string? This will trigger an error.\n. Neither the moneyFormatter argument\n. Hm, maybe we could improve this text a little. Money usually refers to the object or the amount. Maybe unformatted/raw money should be string?\n. I would rather have this as an interface.\n. That way we can use SPL exceptions as well and extend whichever we want. For example UnresolvableCurrencyPairException should be invalid argument.\n. null is casted to 0 if used in arithmetical expressions. Shouldn't 0 be the default value?\n. I would prefer adding this to spec tests.\n. public function __construct(\\NumberFormatter $formatter, $subunits = 0) ?\nSubunit is still optional\n. > It is good to have available, but why should it be required?\nI don't understand. What is required?\n. Sorry, I missed this check:\nif ($this->subunits === null) {\nI thought there was no check for being set, so using null always casted to integer (0) seemed to be unnecessary.\n. Not sure this is the fastest, but we can improve that if necessary without breaking API. I will try to write some benchmarks.\n. Thumb rule: everything, that is not functional nature test should go to specs.\n. Yeah, I agree, quite clever. :smile: \n. it_calculates_the_absolute_value?\n. same here\n. Hm, I am not sure what is gramatically correct: subunit or subunitS. The first seems to be more logical to me. Can you check which is correct?\n. As per the spec, shouldn't this default to 0?\n. author block and docblock\n. UnkownCurrencyException would be better? Could be used by other repositories too.\n. Hm, should we do this or always return with zero if a currency is not found? Not sure\n. IMO $currencies is enough\n. What happened here?\n. bash\n. $\n. Can you add a Testing heading? Like here: https://github.com/php-http/httplug\n. I don't think this is necessary, it's kind of obvious.\n. Sorry, I meant composer install here. For me, it's quite obvious\n. Please add this to your global gitignore\n. MovePoint doesn't sound declarative enough. MovingDecimalPoint maybe? Or MovingDecimalPlaces?\n. Move point again. Move decimal places? Not sure, but sounds better for me.\n. Is it a good idea not to accept a Number instance here? /cc @frederikbosch \n. I am not really sure that this is a good idea. But I don't see a better option. Alternative: remove conversion from the Money object and move it to a Converter object.\n/cc @frederikbosch \n. Missing author and possible description about this class.\n. Maybe use the currency equals method? It's kind of Currency domain logic after all.\n. $baseCurrencySubunit sounds better IMO, the current one is an inverse logic which is harder to understand for me.\n. Same here: $counterCurrencySubunit\n. $subunitDifference?\n. The following seems to be the same instead of two ifs:\nphp\n        if (0 !== $differenceInSubunit) {\n            $ratio = $ratio * pow(10, abs($differenceInSubunit));\n        }\nEven if there is a need to have two separate checks: the difference cannot be less than and more than 0 at the same time, so I would use elseif to avoid evaluating both conditions if not necessary. But if the above works, I would rather use that.\n. Maybe I wasn't clear: I would prefer having the solution above as it's essentially the same, but simpler. Is there any specific use case why we need both branches?\n. Amount is already string AFAIK.\n. This is not recommended. It might cause some inconsistencies in composer as it does not update the repository information\n. Please use this as a boilerplate: https://github.com/php-http/boilerplate/blob/master/.travis.yml#L31-L36\n. Please put back the original\n. Not actual inconsistencies, but rather delays in updated repository information. I got the intel from @xabbuh originally, I don't have any references. The relevand PR: https://github.com/php-http/boilerplate/pull/19\n. Cool, thanks for that.\n. I would rather say \"XXX is not bitcoin and is not supported by this currency repository\"\n. Hm indeed, it's an optional dependency after all.\n. Well, we would basically duplicate Swap with an exchange like that. Swap is a convenience wrapper around ExchangeRateProvider. However this exchange does not work without Swap, so I am not sure if we should just use Swap or not. It's just new SwapExchange(new Swap(/**/)) after all.\n. allocated to N\n. All and always does not sound good IMO. Let's drop \"All\".\n. Nice catch, thanks.\n. Actually I wanted to test here that the first exception is rethrown. I am not 100% sure about it, but it seemed to be right to throw the exception of the original currency pair and as such, it should be an expected behaviour => tested.\n. Using $e seems to be a common pattern. Do you suggest to use $exception in this specific case because of the next exception? I would like to be consistent about this.\n. No, it contains a list of words that should be ignored by the spell checker.\n. All right, sounds ok to me.\n. I don't see how this is better TBH. The current version makes the stub throw a specific instance and we expect to get it back. Testing the exception context is out of scope here IMO, as it is not part of the behaviour of this class, but part of any other exchanges instead.\nWhat you suggest would require to know exception's internal state which is - again - out of scope IMO.\nDo you disagree?\n. > This way we can assert that the first exception is rethrown, the current spec implementation does not assert it. \nWhy? The same instance is checked, although VO equality is not, but I don't think that responsibility belongs here. We just rethrow an exception that we receive from a delegated object. The exception context should be tested in the tests of that delegated object IMO.\n. If it belonged here we would have to construct a new exception in this class, or test it's content and throw some other exception if the thrown one has improper currencies in it. Otherwise the fault of another component could cause fault in this class.\n. Ah, I see, I though they are matched by identity. Indeed, your solution would is the right one then.\n\nreal solution here is to create a brand new exception\n\nHm, that wouldn't make the decoration completely transparent and actually from a public API point of view the only important thing is that there was no match for our original currency pair.\n. As far as I can see you fixed quite a number of bugs with this PR, so maybe we should list them or write them in a more general way.. Is this equal to 0? Should (new Money('000', new Currency('USD')))->equals(new Money('0', new Currency('USD'))) === true?. Guess it should be $fractionalPart. Some comment about what's happening here? Also, Yoda pls for variables.. Note that this removes all leading zeros. Can't recall why this was an issue for me.. Wouldn't this be better with a for/foreach loop, since we use the counter variable (and the value too)?. We really have one sign supported, do we need an array for that?. zeros. Why do we allow leading zeros?. zeros are. IMO not accepted is always the same as InvalidArgumentException, so it should be mentioned once somewhere.. Are you sure this should be in the getting started guide? I would say we cover edge cases with this documentation.. I am still failing to see how this is a solution. Can you please enlighten me, because I am missing something. isInteger checks if the fractional part is empty, and getIntegerPart returns the integer part. But if the fractional part is empty, $amount itself should be valid as well, shouldn't it?. Still don't see why not a for loop here. I remember we had an issue with Same. Maybe it was related to gmp?. Did I? I think I meant something like the fractional part, and further chunks of the integer part can start with zeros.. Yeah, but i case of 3.000 isInteger would be false, wouldn't it?. IMO it's cleaner to use for when using a counter.. I still think this does not belong to a Getting started guide, but let's not block the PR with it.. For variables we use Yoda condition (constant value, operator, variable). I would use sprintf here. For one we do it elswhere, secondly it's more readable IMO.. Leading zeros, not zero's. Yoda. Yoda. New line before control structures. Sprintf. We started using this style, so it's rather about being consistent.. When releasing, please change this to Fixed, we are following Keep a Change Log format.. Please don't use the FQCN.. Please don't use the FQCN.. Can you please fix length?. I would rephrase this paragraph like this:\nThe CurrencyList class provides a way for a developer to build a custom currency repository.\nThe class accepts an associative array indexed by the currency code\nand another associative array as the value containing minorUnit and numericCode keys and positive integer values.\n. Certainly not bitcoin. Missing new line. Looks like checking for the interface implementation is missing: https://github.com/moneyphp/money/blob/master/spec/Currencies/BitcoinCurrenciesSpec.php#L19. A list of custom currencies.. This could be a multiline if for readability.. This could be a multiline if for readability.. > Does it need to be the same lenth as CurrencyList\nYup. > Does it need to be the same lenth as CurrencyList\nYup. I would like to see Currency|string|null instead here. Better to be explicit about return types.. I believe we should deprecate passing a string here and remove that in 4.0\nSo I propose triggering a deprecation notice here:\nphp\n@trigger_error('Passing a currency as string is deprecated since 3.1 and will be removed in 4.0. Please pass a '.Currency::class.' instance.', E_USER_DEPRECATED);. Same deprecation could go here.. This doesn't seem to be related to the PR. Can you please explain?. I tend to prefer using the class name in return type hints to indicate a new object is going to be returned. At least for consistency, this should be reverted.. Not sure this will work as intended. What if $amount == (float)PHP_INT_MAX+1 ?. Can you please add a few tests for negative numbers as well?. Looks like there is one extra dash here. ;). provides a way for developers to create. I wonder if we really need this inner associative array. I guess it's there for future options, but for now it's harder to document and understand IMO. Maybe just accept string => integer pairs? We can always add support in a BC way for other types.\nWDYT?. I think this part is not necessary. Just mention in the previous section that an invalid array would end up in an exception being thrown.. XBT?. does_not_contain. See my eariler comment regarding this.. This is widely used in the PHP ecosystem. Triggered errors will immediately be bypassed, so no BC break.\n@jarobe42 you can and should trigger errors within the if block, only for those calls which received a string, not a currency.. We still support PHP 5.6. But we could drop 5.x from the requirements.. Using gettype for type checking is generally not advised, but using separate ifs is probably cleaner.. Although I (finally) understand your use case, I believe this is fundamentally different from json serialization.\nJSON is the serialization part, this is denormalization (converting an intermediate representation to the actual form). You could use it for YAML or XML serialization as well.\nThat's why I tried to keep this thing separated from JSON from the very beginning.\nIt could be mentioned in documentation though.. I believe max/min/avg are well-known forms aggregation functions. Sum is already in that shorter form.. I believe max/min/avg are well-known forms aggregation functions. Sum is already in that shorter form.. This isn't correct. The second argument is not an array. I believe I saw ...Money notation somewhere, but I'm not sure.. I believe max/min/avg are well-known forms aggregation functions. Sum is already in that shorter form.. This isn't correct. The second argument is not an array. I believe I saw ...Money notation somewhere, but I'm not sure.. This isn't correct. The second argument is not an array. I believe I saw ...Money notation somewhere, but I'm not sure.. This isn't correct. The second argument is not an array. I believe I saw ...Money notation somewhere, but I'm not sure.. I really would love to see this test split per method.. This should rather be a separate test with a phpunit version requirement\nhttps://phpunit.de/manual/current/en/incomplete-and-skipped-tests.html#incomplete-and-skipped-tests.skipping-tests-using-requires. This wouldn't be a good idea anyway, because it sets a global instance.. ",
    "frederikbosch": "@josecelano This is fixed in #133.\n. @TNAJanssen To be implemented after 3.0 will be released.\n. @TNAJanssen The initial PR has been proposed.. @TNAJanssen Maybe you could give some feedback.. @bmeynell If it is critical you might as well help to get it done, e.g. give your feedback on PR #335. It is all too easy to say something is critical and do nothing at all. Nonetheless, your comment helped me awaking the PR, see my comment from today in the thread.. Let's make this happen too. Why not create a new class PreciseMoney as indicated in #111 by @mathiasverraes?\nI think we can reuse the calculators are created in PR #115, but rounding should be extended with precision. Only bcmath can help us out in this case, because GMP is still waiting for RFC GMP Floating Point Numbers to be accepted yet.\n@sagikazarmark Do you have any specific ideas on this topic?\n. This is a duplicate of #7.\n. Let's use #174.\n. @sagikazarmark \n- getName in Currency\n- getRatio in CurrencyPair\n- getUnits in Money\n. PR in #135.\n. There is an open PR and branch for documentation updates.\n. @sagikazarmark Shall I fill the documentation gaps (exchange, swap) and remarks? Then release RC1? \n. I think documentation is acceptable at this stage.\n. Just committed documentation for currencies. I am going to close this one too.\n. The IntlMoneyParser in #148 does not support bitcoin, because it is not supported in the intl extension. My suggestion would be to close this issue after #148 is merged and leave implementation up to the user. A very simplistic approach could be as follows.\n``` php\n<?php\nuse Money\\Currency;\nuse Money\\Money;\nuse Money\\MoneyParser;\nclass BitcoinSupportedMoneyParser implements MoneyParser\n{\n    private $innerParser;\npublic function __construct(MoneyParser $innerParser)\n{\n    $this->innerParser = $innerParser;\n}\n\npublic function parse($formattedMoney, $forceCurrency = null)\n{\n    if (strpos($formattedMoney, \"\\0xC9\\0x83\") === false) {\n        return $this->innerParser->parse($formattedMoney, $forceCurrency);   \n    }\n\n    // bitcoin parsing here\n    return new Money($formattedMoney, new Currency('XBT'));\n}\n\n}\n```\n. @sagikazarmark This one can be closed too\n. Why would we want include it? By using the intl parser together with the parser interface, the user has all the possibilities to implement such a bitcoin parser of his own.\nIf we include this one, what is then the boundary what to include and what not?\n. And if we include a bitcoin parser, we should - by means of consistency - also include a formatter. \nMaybe we avoid getting same questions by including one. I am happy to PR both formatter and parser. Can you let me know what your decision is @sagikazarmark?\n. Ok, will PR next week.\n. @josecelano @thedavidmeister Could you please have a look at PR #155? Thanks.\n. Recommitted to master. Who can do a review on the bitcoin parser and formatter? We need someone who deals with this on a regular basis.\n. Regardless the fact that #101 has been merged, it might be an idea to also create a MoneyParser interface with a IntlMoneyParser implementation. By using ext/intl the support for different notations will be - I guess - much larger.\n@sagikazarmark What do you think?\n. The current stringToUnit method might become StringToUnitParser class. The current static method will call the StringToUnit->parse method and needs to be deprecated.\n. Should be fixed in #148.\n. @mathiasverraes If this PR is going to be merged, I would be happy to add another PR for the nextrelease branche.\n. @camspiers Thanks, just removed the space.\n. @sagikazarmark Done.\n. My idea would be to create a MoneyFormatter interface with one public method: 'format(Money $money)'. And then an implemention 'IntlMoneyFormatter' inside this package, which should proxy the currency formatter in the intl extension of php. Other people can create their own implementions through the interface.\n. @sagikazarmark In my opinion this library should provide a method how to format a money object, and include one example. So I would include the MoneyFormatter interface and the IntlMoneyFormatter. Can PR if you'd like.\n. Just found the formatter you are referencing. Personally, I think three public methods is not necessary.\nWe only need a format method. We could return an new (value) object - containing base units, symbol and by locale - but I rather return a string. If someone needs only the symbol, then he can create a new formatter - e.g. SymbolFormatter - himself by implementing the interface.\n. Will do the PR. I do not sure if I understand you on the subunits.\n. @sagikazarmark Thanks for clearing that, but what would the result be if I call the format method on the SubunitFormatter? .34? As in I do not get what you mean by 'subunit'. What value do you need? And why (business case example)?\n. Ah ok, but that is why is done here, right?\n. @sagikazarmark Nonetheless, I will come up with something, then we can discuss whether you like the implementation.\n. Just created PR, please review.\n. This one can be closed as the formatter is merged.\n. Recently I saw this being discussed on Twitter too. I believe the overall conclusion is that best thing to use would be GMP, if it is not available on the system switch to BC Math. Other libraries seem to prioritize this way too.\nHowever, there might also be reasons for using BC Math over GMP because GMP only deals with integers, and not with decimals (there is a proposal for the GMP implementation). For another money library this was a reason to choose BC Math over GMP.\nTaking into account the feature state of this library, I would say that best thing to prioritize as follows: GMP, BC Math and finally the (current) native PHP method. I am happy to implement and push a PR soon.\n. Not in my opinion. I would rather build this in. Why would you want to consume another api for larger values? Who knows when to use BigMoney? It would lead to unexpected results in the Money class, because you would have throw exceptions when you cannot calculate a result because the resulting or initial value is too large. The developer does not know when that is happening in developing time. How would a new BigMoney class interoperate with a Money class?\nMy idea was to pick a strategy in the constructor. Something like.\n``` php\n$calculators = [new GmpCalculator(), new BcMathCalculator(), new PhpCalculator()];\nforeach ($calculators as $calculator) {\n  if ($calculator->isSupported()) {\n}\n}\n``\n. Just created a PR for this feature.\n. This one can be closed.\n. In the next few days I will write something on the design decisions I made. This will help reviewing the PR (I guess).\n. While creating this PR, I had the following things in mind.\n1. It must be possible to change money calculations per math library. Therefore there should be an interface that has to be implemented per library:CalculatorInterface.\n2. The calculators we are looking for are: PHP, BC and GMP.\n3. A calculator is a static property of theMoneyvalue object. I cannot see any scenario where you want to mix calculators.\n4. It should be possible by using the API to change the (static) calculator.\n5. All calculations insideMoneyclass should be replaced by calls to the active calculator\n6. String are now allowed insideMoneybecause libraries like GMP and BC express numbers as strings.\n7. Checks that are related to native php calculations, likeassertIntegerBounds`, should be moved to the PhpCalculator.\n8. When possible all calculators must implement all functionality that is now in use by the Money class\nThings I came across into when creating this PR.\n1. Both BC and GMP libraries do not have every rounding method build-in. The GMP library does not have rounding tie-breakers. But since we do not need extreme precision - we want (big) integers without decimals - rounding can be done by simple string conditionals.\n2. The BC library does not convert '0.500000' to '0.5'\n3. The GMP library does not recognize decimals at all, calculations like multiply should convert  numbers to non-decimals before calculation, and convert back after finishing calculations. This is done by removing the decimal sign (multiply by eX) and the reinsert the decimal sign after calculation.\n4. Divisions in GMP are done by multiplying with 1 / divisor.\n5. I changed the body of the allocateTo method, with a simpler (one-line) call to allocate.\nPlease let me know whether you need more clarification.\n. @sagikazarmark Thanks for the comments, fixed most of the issues you brought up. Regarding your questions.\n1. No need for the Interface suffix. Removed it.\n2. Does it make sense to allow the user to change the priority order we define? Changed it to registerCalculators as you suggested.\n3. Does it mean strings are allowed from the public API as well? I am not a big fan of the idea, because it requires more validation logic than necessary. The string is validated\n4. If we have an interface then this assumption is moved to the fact that the interface must be implemented by all calculators. Right, but libraries have limitations themselves, like I said in my previous comments, e.g. GMP does not have rounding build-in. I tried to create a workaround for the limitations.\n5. Is this a problem? With don't need decimal precision. It is not, but it should be taken into account.\n. @sagikazarmark No, that is whole point of no integer limits, right? Big integer (bigger than php's max int) can only be expressed in string, not in integers.\n. I dropped php 5.4 support, and added php 7. Is that alright?\n. Just restored it. My advice would be to drop it. Libraries should encourage people not to use a PHP version that has no security support any more. Moreover, this the nextrelease branch, not the current master.\n. But, you are right, that is at least out of the scope of this PR :)\n. The only things that are left are {inheritDoc} and Can we create an abstract test case with an abstract getCalculator method to avoid duplication?. The rest should be done.\n. @sagikazarmark Ok, I will do it somewhere next week. Regarding the other comments, they should be fixed, I do not know why it is still there.\n. Hmm, my git says new lines after every class are committed, Github thinks different.\n. @sagikazarmark The trailing new line, I do not get it. It's not there when viewing the file. It is there when editing the file. What's going on?\n. But is it alright now then?\n. hmm, what do you want me to do with the conflicts?\n. I think it would be best that you merge it as is and fix what you want to fix regarding CS.\n. Done, rebased.\n. No.\n. I have no idea how. Is it not possible that you do this?\n. Just did that, as in: gave you rights to the repo as collaborator.\n. @sagikazarmark Thanks! Will see if I can finish the PR today.\n. I think the PR should be ready. Added documentation to the Calculator class. Used {@inheritdoc} blocks in the calculator implementations.\n. Fixed things, except for the docblock. You sure you want to remove @param and @return there?\n. OK, removed the @param and @return blocks where {@inheritdoc} is used.\n. I would say so :)\n. Great! Thanks @sagikazarmark for reviewing! Maybe we can create an alpha release? I would be happy with some sort of tag.\n111 can also be closed.\n. I would just rename branches in such cases ;) But I do not if that has any negative side-effects.\n. My implementation is not correct, I just notice. The NumberFormatter should help me out with some setTextAttribute I think, but my first tries failed. Will look into it later.\n. Problem fixed, also added the require-dev. What do you think of implementation? I will update CS, according to my last PR, after the general idea is approved.\n. @sagikazarmark Maybe you can merge this one too. It will help reviewing the MoneyParser PR. Or do you have any remarks left? I also just squased the commits.\n. Done, and squashed again.\n. Great, thanks! I will create MoneyParser soon. Let's get this library to 3.0.0!\n. @sagikazarmark Why don't we suggest the package of @umpirsky? Just as we suggest intl for formatting and parsing.\n@barryvdh Currencies is an interface. It should be no problem to implement it with another library (e.g. alcohol's). However, I do understand the problem of the huge repo. That would be solved by suggesting instead of requiring as I proposed to @sagikazarmark.\n. @sagikazarmark I would like to see Money as a standalone package without any dependency. But I think we can leave the (intl) formatters and parsers in. There is no need to extract it to another repo. Same for ISOCurrencies. It should be optionsl in the form of a suggestion in the composer.json.\nWhy would @barryvdh's problem not be solved when we would suggest the package of @umpirsky? Then the user can choose to require it or not. And he obviously would not.\n. PR created. I was partially right: isZero, isPositive and isNegative were fine. Nonetheless added a test for them. equals was not fine since the line was changed in #131. However, I do agree, strict comparison is better than loose comparison.\n. Good question, let's test it.\n. Added another commit to the PR. The PhpCalculator now returns string where required.\n. Calculators return an integer in the compare method, so 1, 0 and -1. Other methods return a string now.\n. Fixed in #136.\n. In order to create a MoneyParser PR, I need this to be merged. I just improved more docblock and squashed my commit.\n. @sagikazarmark I agree. It is a big change. #115 was more comprehensive than I thought at first.\n. Yeah, and now I need to rebase? :) Still don't know how, sorry about that...\n. @josecelano bcmath is the only option for PreciseMoney. I rather use that term than BigMoney, because we already have BigMoney because there is no more integer limit. GMP only uses integers, not decimals, see the RFC for floating points integration in PHP.\nThe solution I will propose soon will have the following structure.\n- PreciseCalculator with methods like roundPrecisely\n- PreciseMoney\n- BcMathCalculator implementing PreciseCalculator\n- I still have to think have to deal with formatting and parsing.\nWhen the RFC for GMP lands, we only have to implement PreciseCalculator for GMP.\n. Travis suggests this PR contains errors, which it does not. Travis itself errors. I do not see any possibility to rerun the failed build.\n. @sagikazarmark I never saw Error Output: stty: standard input: Inappropriate ioctl for device as PHP error.\n. @sagikazarmark Thanks, just learned something new!\n. Great, you can expect the MoneyParser PR this week.\n. @barryvdh We have failings tests left in my two PRs. Then there will be a release (I guess).\n. I haven't found time to look into it. It would be really helpful if someone can help out. I am not an intl expert.\n. It's close. I would love to see Omnipay with Money :+1: \n. Thinking about it, I have another option to consider. Why not make a new branch: 3.x which pulls from nextrelease. Then make the 3.x branch the default branch on github. This ensures when people arrive on this project's page, they will see how to use Money the new way. My suggestion would be to split #137 and create an issue for only the README.md update. That one should be fixed before making the 3.x default on Github.\nThen we can release 3.0.0. New development should be done in the 3.x branch, where as the master and nextrelease branches will be retained (and locked/closed).\nThis way we will not break current installation while still being able to move forward.\n. @sagikazarmark I just created my final set of PRs for 3.0.0. If we solve the negative amount issue in those PRs, I think it should be ready for shipment.\n. @sagikazarmark What is stopping you from merging the 4 open PRs?\nDo you have the ability to tag a new version? Or do we need Mathias for that?\n. :+1: \n. @sagikazarmark Agree, the prefix Money is not required. Actually, I never know when to suffix or prefix a class with its functionality. I never read upon a good standard for it. My current methodology is to think of the users of the class. What would he/she want the class name to be when it is being used?\nSo with the MoneyFormatter, does the class name describe its actual meaning? I think it does. When the class/interface name would be only Formatter, it could be confusing in code of the user when there are multiple Formatter classes in the user's code. Then he/she would be required to do use Money\\Formatter as MoneyFormatter.\nMaybe I am exaggerating, but why rename the Money\\Money to Money\\Value? Because it would give the same confusion in user's code, requiring the user to use the object with an alias (Money\\Money or Money\\MoneyValue).\nBut if there are valid reasons to do it differently, please correct me. I am merely applying my own standards here.\n. @sagikazarmark What do we do when there is PreciseMoney in 3.1.0. Can a PreciseMoney object be formatted with the same MoneyFormatter as we are using now? Or do we need a PreciseMoneyFormatter interface?\n. Hmm, why is this failing on Travis while tests are succeeding on my machine?\n. @sagikazarmark Right, we should do that. But I doubt if people will have same results when using the classes. That might lead to too many unexpected results.\n. @sagikazarmark I agree with that. But I do not get why your results with nl_NL are so different. That tells me that we have an unstable API.\n. @barryvdh Do not get this wrong: Money is reliable. We are talking about an unmerged PR on parsing and formatting negative values with intl extension.\n@sagikazarmark We should look into this more before drawing conclusions.\n. @sagikazarmark The PR already contains the original parser.\n. @sagikazarmark Why don't we inject NumberFormatter into IntlMoneyParser and IntlMoneyFormatter?\nThis we place behaviour of the intl extension outside of Money. As such we only have to guarantee/test the conversion, and not the results of NumberFormatter itself like we are doing now.\n. Yes, if Money provides an intl parser and formatter, at least we should know how to use it! Hence, we should know how to configure it.\nBut, now the intl parser and formatter implementations are instantiating the NumberFormatter object. This limits the user in configuring the NumberFormatter how he or she wants it. For example, the current class does not allow a developer to create a pattern.\n. Okay. When constructing an NumberFormatter as below, the outcomes are different because the Travis is using a different default pattern.\nphp\n$formatter = new \\NumberFormatter('en_US', \\NumberFormatter::CURRENCY);\n$config = [ .. ];\nvar_dump($config);\nTravis:\narray(9) {\n  'locale_valid' =>\n  string(5) \"en_US\"\n  'locale_actual' =>\n  string(2) \"en\"\n  'pattern' =>\n  string(23) \"\u00a4#,##0.00;(\u00a4#,##0.00)\"\n  'attr_positive_prefix' =>\n  string(1) \"$\"\n  'attr_positive_suffix' =>\n  string(0) \"\"\n  'attr_negative_prefix' =>\n  string(2) \"($\"\n  'attr_negative_suffix' =>\n  string(1) \")\"\n  'attr_padding_char' =>\n  string(1) \"*\"\n  'attr_currency_code' =>\n  string(3) \"USD\"\n}\nMy Ubuntu (14.04) machine:\narray(9) {\n  'locale_valid' =>\n  string(5) \"en_US\"\n  'locale_actual' =>\n  string(2) \"en\"\n  'pattern' =>\n  string(10) \"\u00a4#,##0.00\"\n  'attr_positive_prefix' =>\n  string(1) \"$\"\n  'attr_positive_suffix' =>\n  string(0) \"\"\n  'attr_negative_prefix' =>\n  string(2) \"-$\"\n  'attr_negative_suffix' =>\n  string(0) \"\"\n  'attr_padding_char' =>\n  string(1) \"*\"\n  'attr_currency_code' =>\n  string(3) \"USD\"\n}\nWhat is causing the default pattern to be different?\n. So, now I got a green light.\n``` php\n$formatter = new \\NumberFormatter('en_US', \\NumberFormatter::CURRENCY);\n$formatter->setPattern(\"\u00a4#,##0.00;-\u00a4#,##0.00\");\n$parser = new IntlMoneyParser($formatter);\n$this->assertEquals($units, $parser->parse($string, 'USD')->getAmount());\n```\nOnly setting a string with double quotes which include a pattern for positive and negative amounts via the setter (not via constructor) will give a stable result.\n. @sagikazarmark So we now have two parsers.\n- The easy regex based one, called StringToUnitsParser. That one only parses a string into an amount. The developer is required to supply the currency.\n- The intl one for the developer's advanced locale based parsing. This parser also parses a currency symbol, but can behave differently per system if not setting a pattern explicitly.\n. It seems that both Travis failures (#148 and #149) are related to negative amounts. My machine uses a dash while travis use parenthesis. The weird thing is, this should not differ because we are using the same locale.\nSo is my machine or Travis wrong? Or is there something not set in order to get the same results?\n. Can you run the tests at your machine @sagikazarmark?\n. You are right, I think it also depends on locale, whether it is available or not. When it is not available, it falls back to the system's locale.\nThat failing test of yours uses locale nl_NL. I would totally get that you do not have that one installed (not even 1% of the world's population is Dutch). What happens if you install that locale?\nSuppose that works, then the questions is how to get locales installed on Travis? Or we should figure out what the system's locale of the Travis machine is.\n. Oh sorry, I misread that. But then why is en_US on my machine different from en_US at Travis? I read those links you sent me, but the answer is not clear yet. The example of one those guys uses a pattern. We are not using a pattern.\n. @sagikazarmark I will give that a try.\n. @sagikazarmark That is my best guess. Did you only have one failing test? The one you posted here?\n. Ok, can you install the nl_NL locale and see what happens? I will try to get Travis to talk (sometime later today, not now, other things on my mind too).\n. @sagikazarmark Did not find time to look into this. Will do quickly. Do not want to slow down release.\n. @sagikazarmark The IntlMoneyFormatter is now consistent with the IntlMoneyParser: \\NumberFormatter is now injected via the constructor.\nMaybe we should also include an easier formatter. I looked at money_format but that one expects a float. So we cannot use that one. Another method could be to use sprintf. We can also leave it at one formatter.\n. Good question, will look into it.\n. @sagikazarmark The formatter will still work if the second constructor parameter (style) is different. Look at my last commit to this PR where I test this.\nWhen one chooses to set the style to decimal or percentage, the formatter will actually format it to decimals and percentages. If there also is a pattern set, then the pattern will be chosen over the style. I think this is desired behaviour. I rather wonder what happens with parsing.\n. @sagikazarmark Then you can merge this PR ;) I will add tests for the parser too in a new PR.\n. Frankly, I do not get why this an issue of Money. The conversion to float does not happen in this library, right?\n. @judgej Ah, alright. You are consuming the Number class standalone. I get it. PR is on the way.\n. Fix pushed, waiting for PR to be merged.\n. @browner12 The Calculator class was made in order to support unlimited integer support (bigger than PHP_MAX_INT) through gmp and bc. See #111.\n. Reasoning and design decisions to be found with the PR at #115.\n. No it is different. NumberFormatter does not give expected returns when there is no pattern (like before). At my computer exceptions are thrown, apparently not on Travis.\n. Some forum said it does, even up to 8 fractions at this moment\n. @sagikazarmark https://millybitcoin.com/can-i-buy-a-fraction-of-a-bitcoin/ was my source. Just to repeat: I do not have any knowledge in the Bitcoin field. If other solutions are better, please suggest. I would not merge this, until someone with Bitcoin knowledge has approved this.\n. Regarding code style: I do know if I am happy with one constant in the formatter and one constant in the parser. Maybe there should be a separate object. What do you think @sagikazarmark?\n. This can perfectly wait for 3.1.0 or 3.0.1.\n. Sure, happy to do so. This was just a maintenance PR. \n. Solved by commit 766bdc8\n. Thanks @barryvdh for finding problem ad providing solution!\n. @barryvdh You can move this code to your own package in your own namespace (I guess it is for Omnipay) because you are using the lib by alcohol to implement the Currencies interface. This is probably the reason why we have chosen to make an interface: it helps people creating their own currency lists according to their own needs. Nobody is requiring you to use the implementation that is embedded in this package.\n@sagikazarmark I agree that reliability is first priority in this case. And @barryvdh I think we all agree that having a huge package size is not what we want. So there will be a solution for it.\n. @judgej Money 3.0 is final. So you cannot extend it any more. This removes the need for late static binding.\n. @judgej If you want to build a bridge (for Omnipay or else) you use composition rather than inheritance.\n``` php\n<?php\nuse Money\\Money;\nclass MoneyAmount implements AmountInterface {\nprivate $amount;\npublic function __construct (Money $money) {\n    $this->amount = $money;\n  }\npublic function getAmount() {\n    return $this->amount->getAmount();\n  }\npublic function getCurrencyCode() {\n    return $this->amount->getCurrency()->getCode();\n  }\n}\n$gateway->purchase([\n  'amount' => new MoneyAmount(new Money(100, new Currency('EUR')))\n]);\n```\n. closed by comments and examples of @sagikazarmark and @frederikbosch.\n. @sagikazarmark I dont have permission to close issues and write to the repos. Is that intentional?\n. Woah, that feels great! ;)\n. I just found out that StyleCI automatically pushes a PR for style inconsistencies. Since I removed the inconsistencies by hand already, I removed those PRs.\n. What is wrong with Travis? Why does it not start?\n. Ok. will add the new lines, squash and then merge.\n. @rastydnb What version of Money are you using?Can you say which server is right, which is wrong? Which extensions are on the server that is right, which are on the server that is wrong?\nWhen you work with 6 decimals, you could overflow PHP_MAX_INT. Unlimited integer support has been added in Money 3.0. You should realize that if you want to use Money with unlimited integer calculations, you need bc math or gmp to be installed as extension.\nProbably one machine has one of these extensions while the other has not. Or you are Money 1.x. Final option: there is a bug ;)\n. @rastydnb Yes that is possible. You can check PHP_INT_MAX from cli by running.\nsh\nphp -r \"var_dump(PHP_INT_MAX);\"\nCompare that to your amount and you know if that is the cause. Upgrading to the 3.0 alpha release of Money should fix the problem, if you have either BC Math or GMP installed as extension.\n. @rastydnb Yesterday we released a beta version. Please use that instead of the alpha version. We fixed one important bug in that version.\n. @damonjones This is already fixed, see commit 766bdc8\n@sagikazarmark We should release a new version that includes this fix. Do you have time to fix the currencies issue (large repo issue)? If not, I can take that one. I think we should tag after we fixed that.\n. We plan to release 3.0 stable if we have finished docs. There will be no more new features in 3.0. Maybe you could give a help on the docs ;).\nBut, since there are a lot of new features, there will be a beta before a stable release.\n. @sagikazarmark You want me to edit the CHANGELOG? What will be the new version?\n. @sagikazarmark What will be the new version? Beta1 or alpha2?\n. Yes, but changelog contains version name in text headers. Will create it.\n. @sagikazarmark Done. I think we are ready for release.\n. Money is upgrading from 1.x to 3.x. That indicates a huge step. Kind of harsh to blame oss contributors for your bad day while you left dev-master in yourself.\n. @sagikazarmark I still think we should drop PHP 5.4. If high-quality packages like this one does not make the step, how can we expect others to do it? PHP 5.4 is history and most certainly insecure. Let's be forward looking and secure. We really should require 5.5.\n. @sagikazarmark Packages like moneyphp have a huge reach. That gives those packages a certain position in the PHP community. They should take advantage of that position by influencing the community. Force the community to take steps, accompanied with a message why those steps are required.\nThe position we are in now in makes it even easier. We are going to release a new major version with BC breaks. A perfect reason to stop supporting PHP versions that are insecure. Our next opportunity is 4.0.0, if we follow semantic versioning. Finally: we just released a new 1.x release. The PHP 5.4 users are perfectly served by this package.\n. Alright. Final try, then I'll leave it. Suppose, just suppose, today there is a major security flow found in PHP 5.4 or lower. And internals of PHP decides not to patch it but rather advices people to upgrade to the newer versions. What would we do?\n1. We would just leave it\n2. We would release a new major version\n3. We would release a new minor version (and do a BC break)\nRemember: if people want support for PHP 5.4 or PHP 5.5 they can fork the repo, change the version number in the composer.json and they are done. Or they use version 1.x of this package.\nSo I still do not get why Money should come with a new major version and still support probably insecure end-of-life PHP versions?\n. :+1: \n. Maybe time to release a first release candidate? RC1?\n. Aight, take care!\n. I think not. The current release is beta, which means subject to any change. The decision to only support stable and secure PHP versions remains.\nIf it was completely up to me, I am even willing to drop PHP 5.5 support. But I don't think I can persuade @sagikazarmark to agree with me on that one ;)\n. Let's release 3.0 and 3.1 with PreciseMoney for PHP 5.5+. Then 4.0 can be PHP 7+.\n. @sagikazarmark Today I have pushed the library a lot. I want to get the release 3.0.0 out. People are mailing me when it will happen. I understand their impatience. For myself it also takes too long. I want to finish this project and maintain it. Let's try to get a new alpha release asap, preferably this week. And a RC next week.\n. Sounds great. I will release the alpha now, and a beta next week. I will wait with releasing the RC after we had a conversation on it.\n. Oh, there already is a beta I see. I will have to release a new beta (beta2).\n. I'd love to help out to create a first RC, but I cannot. Maybe @sagikazarmark has time, because I do not have it the next two weeks.\n. @dereuromark We will release a new beta this week. There have been backward incompatible changes due to #280. As soon as we have the feeling that we have a stable API, we will tag a release candidate.\n. New beta is there. If there are no API changes - or issues with API related changes - in the upcoming two weeks, we should be able to tag the RC.\n. @sagikazarmark I'd say we merge #296 and fix #298 and then tag a stable. Our documentation is in a reasonable state and the library is very complete. We should be happy where we are now. We have done a terrific effort and the result is great, if I may say so. It is time for 3.0 stable. Other improvements can be made later in time in later releases.\n. @dilab Correct. It was created after beta 3. There is a new release coming up.\n. Agreed, let's tag the stable release.\n. @sagikazarmark Great work with the domain, logo and readme! It looks really good. Is there anything left? \n. My suggestion is dev dep, suggest for those who need to update on regular basis and copy file. I would leave ISOCurrencies inside Money.\n. @superdummy What happens if you use dev-master? It seems like the same bug that was reported in #164 and fixed in commit 50753be.\n. For me: this looks alright and can be merged.\n. Let's merge it and tag a second alpha or first beta release.\n. Thanks @elstamey. This is really appreciated. We might want to add more to the list because there are more BC breaks, e.g. stringToUnits has been moved to a parser.\n. @pinkbigmacmedia Why not using a parser for this? I think the StringToUnitsParser will help you converting a decimal.\nphp\n$parser = new StringToUnitsParser();\n$money = $parser->parse((string) 999.99, 'EUR');\n. I have nothing to add to that.\n. I created a new PR, also contains the commit by @elstamey, and suggests three BC breaks. I looked in the commit history and this is what I was able to find.\n. I think we should close this, we could use his suggestions for PreciseMoney when it will be implemented.\n. Good idea, will change it.\n. @sagikazarmark The PR is updated to your suggestions. My suggestion would be to repeat the BC breaks in the changelog when we release 3.0.0.\n. @sagikazarmark Updated. I qualified all removed features as BC breaks. Because any removed feature is breaking, right?\n. I'd say we merge this one too today.\n. @sagikazarmark Please do. You can merge it in directly. Documentation should become an on-going process.\n. Yeah, I'll take care of that. Though merging and rebasing is not something I am particularly good at.\n. @sagikazarmark Sure :)\n. @mikemand What would you suggest as the outcome? Because I cannot see why you want this.\nIf you want to change Money into a human readable string, you will need a formatter mostly because displaying a currency is different for everyone. So that leaves only displaying the amount. Why would (string) $money be beneficial over $money->getAmount()?\nThe only thing I can think of is that you are using some kind of Active Record pattern where is no such thing as a value object (at least not in the ones that I am aware of). But you still want the money object to be stored in the database. And $record->orderTotal = $money is troubling because it cannot be casted to a string. Something like that?\n. @sagikazarmark @pamil @davidomelettes Sorry, I missed the debate. But as soon as I saw the bug being reported, I decided to reproduce it. Saw the current version contained mistakes and fixed it. I'd probably better have told directly that I was working on a fix.\nCould you all three have a really really thorough look at the PR? The behaviour that is inside the BcMathCalculator and GmpCalculator need a very good review because both were behaving different than the PhpCalculator in the case of negative numbers.\n. And pretty please: style fixes come last. The focus MUST be on the API and the behaviour inside the classes first.\nSince the number of stars inside this package raised very quickly in the last months, I guess many people are already pulling the current beta package inside their projects. This means good reviews cannot wait any longer. I hope (and count on) your help to give a qualitative review.\n. @davidomelettes Thank you very much for brining this up. There were no tests concerning negative numbers in the library. I added plenty today and yesterday, fixing more than one issue regarding negative numbers.\nAlso, two new rounding modes were added: ROUND_HALF_POSITIVE_INFINITY and ROUND_HALF_NEGATIVE_INFINITY. This should fix the issue brought up by @pamil. I would be really grateful if both of you could help us by reviewing PR #186. This is quite complicated and needs more than two eyes (being me and @sagikazarmark).\n. @davidomelettes HALF_UP was always an equivalent of PHP_ROUND_HALF_UP. We decided not to change that, but rather add a new ROUND_HALF_POSITIVE_INFINITY rounding mode for rounding towards zero.\n. @davidomelettes Towards zero for negative numbers. ROUND_HALF_POSITIVE_INFINITY rounds towards positive infinity. So 1.5 becomes 2 and -1.5 becomes -1. This is different from ROUND_HALF_UP, where a -1.5 becomes -2.\n. @davidomelettes But, if you have a suggestion for a better name, please bring it up :)\n. Alrighty then. When @sagikazarmark gives his confirmation, we are ready to merge.\n. My pleasure!\n. True. It is growing. But actually is it only the rounding problem that is giving complexity. For me, I rather see Money as a library without any dependencies. Not even within the own organization. Embedding the code always leaves us with the possibility to add/remove a method when we need to within the scope of this library. No waiting for external libs that have created their own dependencies with their own BC issues.\nIf people want to use our calculators, they can grab the code, or ask to abstract them in another library.\nWhat I do think is necessary is that we do some more abstractions regarding rounding. These blocks in the BcMath and Gmp calculator can be much cleaner. I'd say we focus on that.\n. Great! I think we can do optimization without BC break.\n. @sagikazarmark is right.\n4250 \u00d7 0.067409656 = 286.491038\n4243 \u00d7 0.067409656 = 286.019170408\nBoth result in an amount of 286 when rounding. You will need PreciseMoney, which will be realized in 3.1.0, in order to have a money value object with decimals.\nHowever, you could change the value object by changing the fraction of the amount to 5.\n``` php\n$ratio = '14.834670';\n$inverseRatio = '0.067409656';\n$pair = CurrencyPair::createFromISO('USD/ARS ' . $ratio);\n$inversePair = CurrencyPair::createFromISO('ARS/USD ' . $inverseRatio);\n$moneyUsd = new Money(286000, new Currency('USD'));\n$moneyArs = new Money(4243000, new Currency('ARS'));\n$this->assertEquals(4242716, $pair->convert($moneyUsd)->getAmount());\n$this->assertEquals(286019, $inversePair->convert($moneyArs)->getAmount());\n```\nBut that will have consequences for your whole application.\n. @sagikazarmark It is not that I want to use string. I think we should we avoid float whenever we can. Maybe that a simple conversion to float via (float) is harmless, but why do we want a floating point number in our class?\n. @sagikazarmark You have a point there. I cannot see the advantage too. We should be aware though.\n. Do we really want to have float in our codebase? Please read the RFC on higher float precision. Especially the current behaviour of some values. We should avoid float, at almost any cost.\n. @sagikazarmark The problem is that we are casting to float. We are not securing what is going in, only that the value is numeric, not the type. Still agree though that it is highly unlikely that it causes issues.\n. :+1: \n. @sagikazarmark I still think we should remove any reference to float in this library. Take what I had today.\nphp -r \"echo (new NumberFormatter('nl_NL', NumberFormatter::DECIMAL))->parse('64,46') * 100;\" // result: double(6446)\nphp -r \"echo intval((new NumberFormatter('nl_NL', NumberFormatter::DECIMAL))->parse('64,46') * 100);\" // result: int(6445)\nIf I was not convinced enough, now I am really convinced: working with float/double is really harmful. The PR I put forward was not even strict enough. We should only accepts string and throw an exception on float/double. Let the user do the math (conversion to string) outside this library. Float inside Money must be avoided at any cost.\n. @sagikazarmark I think we should not merge this, nor we should add the possibility for currency.local.php. I have the following reasoning. The list of currencies is only used inside ISOCurrencies, which implements Currencies. That means someone like @mongosoft can easily create an own implementation of Currencies. In this case using a decorator perfectly solves the issue.\n``` php\n<?php\nnamespace MyNs;\nuse Money\\Currencies;\nuse Money\\Currency;\nuse Money\\ISOCurrencies;\nclass BynSupportedCurrencyList implements Currencies {\nprivate $delegatedList;\npublic function __construct(Currencies $list) {\n    $this->delegatedList = $list;\n  }\npublic function contains(Currency $currency) {\n    if ($currency->getCode() === 'BYR') {\n      return true;\n    }\n    return $this->delegatedList->contains($currency);\n  }\n}\n$currencies = new BynSupportedCurrencyList(new ISOCurrencies());\n```\nOr am I missing something here?\n. @sagikazarmark We should document it, and add it to a FAQ which we can include in our README.\n. Great, good luck!\n. Looks good, one remark.\n. Thanks @jongotlin \n. We want to provide implementations of the MoneyParser. As such you can type hint the interface, not the concrete class StringToUnitsParser. That is something you inject in your code.\nI don't recommend it, but you could create a static class in your own code that does the two calls in your first example.\nIs this enough explanation? I could emphasize it with code examples.\n. Sure!\n``` php\n<?php\nnamespace My;\nclass Controller {\n  private $moneyParser;\npublic function __construct (MoneyParser $moneyParser) {\n    $this->moneyParser = $moneyParser;\n  }\npublic function read (ServerRequestInterface $request, ResponseInterface $response, callable $next) {\n    $money = $this->moneyParser->parse($request->getParsedBody()['submittedFormValue'], 'USD');\n  }\n}\n// And now we inject (e.g. using a DI container) the parser that is relevant.\n$controller = new My\\Controller(new StringToUnitsParser());\n```\n. Now let's go one step further, we are going to create our own parser.\n``` php\n<?php\nnamespace My;\nclass FixedCurrencyParser implements CurrencyParser {\n  private $currencyCode;\n  private $delegatedParser;\npublic function __construct(CurrencyParser $delegatedParser, $currencyCode) {\n   $this->delegatedParser = $delegatedParser;\n   $this->currencyCode = $currencyCode;\n  }\npublic function parse($money, $forceCurrency = null) {\n    return $this->delegatedParser->parse($money, $this->currencyCode);\n  }\n}\nclass Controller {\n  private $moneyParser;\npublic function __construct (MoneyParser $moneyParser) {\n    $this->moneyParser = $moneyParser;\n  }\npublic function read (ServerRequestInterface $request, ResponseInterface $response, callable $next) {\n    $money = $this->moneyParser->parse($request->getParsedBody()['submittedFormValue']);\n  }\n}\n// and then our controller\n$controller = new My\\Controller(new My\\FixedCurrencyParser(new StringToUnitsParser(), 'USD'));\n``\n. In the final step, the controller is completely unaware of the parse method. It does not care, as long as it parses. You decide via injection how to do the parsing. Advantage: you can always change the implementation.\n. @lakhman Right. And yes, @sagikazarmark,CurrencyParseris wrong. I did it from the top of my head, so I probably made some errors :) Glad I was able to help.\n. @sagikazarmark TheFixedCurrencyMoneyParsercould be part of the library. Makes sense in my opinion, what do you think?\n. In my own applications I do not require multiple currencies. AFixedCurrencyMoneyParserwould really help in such case.\n. @lakhman @sagikazarmark I am also fine withDefaulktCurrencyMoneyParserinstead ofFixedCurrencyMoneyParser`.\n``` php\nclass DefaultCurrencyMoneyParser implements MoneyParser {\n  private $currencyCode;\n  private $delegatedParser;\npublic function __construct(MoneyParser $delegatedParser, $currencyCode) {\n   $this->delegatedParser = $delegatedParser;\n   $this->currencyCode = $currencyCode;\n  }\npublic function parse($money, $forceCurrency = null) {\n    if ($forceCurrency === null) {\n      return $this->delegatedParser->parse($money, $this->currencyCode);\n    }\n    return $this->delegatedParser->parse($money, $forceCurrency);\n  }\n}\n```\n. :+1: \n. @sagikazarmark @Nikolai-Senkevich Good catch. Can be merged after CI is OK.\n. @sagikazarmark Can you have a look? I realized we were missing the Currencies implementation for Bitcoin so I added that one too. With a third Bitcoin class I decided to move it to a separate namespace. This can be argued.\n. @sagikazarmark The Currencies implementation for Bitcoin does not withhold us from creating an aggregate repository. Creating a repo is a good idea. It could be added in version 3.1. In this cade a decorator is the quickest way to complete support for bitcoin. And it does not harm anyone.\n. @sagikazarmark Agreed. Let's do the aggregate repo. Maybe close this one then, and reissue this PR with only formatter and parser classes renamed.\nWhat do you think BitcoinMoneyFormatter or BitcoinFormatter. My vote goes to the latter but wonder what you think.\n. Ok. I'll update this PR next week.\n- No more Bitcoin namespace.\n- Class names will be BitcoinMoneyFormatter and BitcoinMoneyParser in the namespaces Formatter and Parser.\n- BitcoinCurrencies will be dropped.\n- Currencies namespace will be added and will contain ISOCurrencies and AggregateCurrencies.\nOk?\n. Aight, good ideas!\n. Could you create a PR?. Looks great! Merge it in!\n. @sagikazarmark Should this not belong in the client library? The client library is responsible for injecting the correct formatter into a class that is using a formatter. This resonsibility should not be passed to the formatter itself I think.\n. Ah I get it. You mean the delegatedFormatter inside the Bitcoin formatter? It might be a good idea indeed to remove that. Let me think on this.\n. @sagikazarmark What about something like this?\n``` php\n<?php\nfinal class CurrencySpecificMoneyFormatter implements MoneyFormatter {\nprivate $formatters = [];\npublic function __construct(array $formatters) {\n    foreach ($formatters as $currencyCode => $formatter) {\n      $this->addFormatter($currencyCode, $formatter);\n    }\n  }\nprivate function addFormatter($currencyCode, MoneyFormatter $formatter) {\n    $this->formatters[$currencyCode] = $formatter;\n  }\npublic function format(Money $money) {\n    $currencyCode = $money->getCurrency()->getCode();\n    if (isset($this->formatters[$currencyCode])) {\n      return $this->formatters[$currencyCode]->format($money);\n    }\n    throw new FormatterException('Cannot format currency ' . $currencyCode);\n  }\n}\n```\n. Or with a default.\n``` php\n<?php\nfinal class AggregateMoneyFormatter implements MoneyFormatter {\nprivate $currencySpecificFormatters = [];\n  private $defaultFormatter;\npublic function __construct(MoneyFormatter $defaultFormatter, array $currencySpecificFormatters) {\n    $this->defaultFormatter = $defaultFormatter;\n    foreach ($currencySpecificFormatters as $currencyCode => $formatter) {\n      $this->addFormatter($currencyCode, $formatter);\n    }\n  }\nprivate function addFormatter($currencyCode, MoneyFormatter $formatter) {\n    $this->currencySpecificFormatters[$currencyCode] = $formatter;\n  }\npublic function format(Money $money) {\n    $currencyCode = $money->getCurrency()->getCode();\n    if (isset($this->currencySpecificFormatters[$currencyCode])) {\n      return $this->currencySpecificFormatters[$currencyCode]->format($money);\n    }\n    return $this->defaultFormatter->format($money);\n  }\n}\n``\n. Then there is no need forsupportsmethod. Because the aggregate formatter is handling which formatter should be formatting which money object. In this case the currency code is the determinative factor. Clients can implement their own strategy with another determinative factor.\n. Alright, we could do the*method. Is regex the method to match currencies?\n. Closed by #216 \n. Just improved the README. I think this good to go too.\n. What do you mean with this? Now a Parse_r_exception is thrown. Do you want to rename the class?\n. @sagikazarmark Never used PHP Spec. I have nothing against this because I do not know what we gain. Do you want to replace PHPUnit?\n. @sagikazarmark I read them, easy read. Please merge. I will adapt.\n. In my opinion we do not needBigMoney`. The design of our classes is fine and the mere fact that we use strings internally should not be a problem. People understand it very well when explaining the reason. We should only bring it more upfront though. It is something that belongs in the README.\nRegarding PreciseMoney, that would indeed cause problems with other classes. But maybe PreciseMoney is just really different and requires different parsers and formatters. I think we should be careful in sharing code between Money and PreciseMoney. Just like Mathias wrote in his blog.\n. @sagikazarmark Just created a PR for the README. It now contains a sentence on the usage of strings internally. See #214.\n. Closed by #214.\n. This does not need any further explanation. Exchanging is well documented. I think it is pretty clear: multiply use the same currency whereas conversion use a different currency. I am going to close it.\n. @sagikazarmark Thanks for the review. Improved the code based on your remarks.\n. After Travis is alright, I am merging this in.\n. Why as interface? You mean like a marker interface? What is the difference with an abstract class in thise case?\n. @sagikazarmark Good idea. You do not see that many marker interfaces in PHP.\n. Merge it in?\n. @bramstroker @sagikazarmark There are a few things at play here. I will walk them through step by step.\n1. Money is unaware of the number of subunits. While that might be two digits for the majority of the Western currencies, this is not always the case. There are currencies with 0, 2 or 3 as default fraction digit.\n2. This means that fractions digits belongs to presentation: parsing and formatting a Money object. While creating our formatters, we created a IntlMoneyFormatter that had the fraction digits and locale in its constructor.\n3. But then we found out that the \\NumberFormatter from the intl extension behaves differently per system. We could not find out how to reset the behaviour as such that we had control over it unless we were using a pattern. That left us with two options: IntlMoneyFormatter where the user injects its own \\NumberFormatter, or secondly PatternizedMoneyFormatter where the user injects its own pattern that would be used to format a currency. Since the former gives the user most control, I choose for that option.\n4. Then the string padding. Since version 3.0 we are supporting integer higher than PHP_INT_MAX through BCMath and GMP we cannot use regular PHP divisions anymore because that might lead to over/underflows. The internal amount is a string, not an integer a any more. So amount / 100 is unfortunately not possible. I got around with it by using string padding.\nFinally, the above does not mean you, as a client user of the library, are not able to implement different behaviours. You can simply implement your own implementation of MoneyFormatter by creating a completely new class or you can decorate the IntlMoneyFormatter to your likes. Please see the example below.\n``` php\n<?php\nnamespace My;\nuse Money\\Formatter\\IntlMoneyFormatter as BaseIntlMoneyFormatter;\nuse Money\\MoneyFormatter;\nfinal class IntlMoneyFormatter implements MoneyFormatter {\n  private $delegatedFormatter;\npublic function __construction ($fractionDigits) {\n    $numberFormatter = new \\NumberFormatter();\n    $numberFormatter->setAttribute(\\NumberFormatter::FRACTION_DIGITS, $fractionDigits);\n    / set some more attributes on the number formatter here /\n    $this->delegatedFormatter = new BaseIntlMoneyFormatter($numberFormatter);\n  }\npublic function format(Money $money) {\n    return $this->delegatedFormatter->format($money);\n  }\n}\n```\nHopefully this makes sense and helps you moving on with formatting your Money object.\n. @sagikazarmark Now I get it. I will issue a PR.\n. See #223.\n. @sagikazarmark Correct.\n. @sagikazarmark Because intl is perfectly capable of coming up with the correct subunits. At least that is what I think. Maybe that should be tested better.\n. @sagikazarmark See below the behaviour.\nBy default, when there is no fraction digit in the number formatter, intl takes care of it by using locale or maybe even the currency subunit default.\nphp\n$money = new Money(500, new Currency('EUR'));\n$numberFormatter =  new \\NumberFormatter('en_US', \\NumberFormatter::CURRENCY);\n$formatter = new IntlMoneyFormatter($numberFormatter);\n$formatter->format($money); //Outputs \u20ac 5,00\nBut you can still set the number of fractions manually.\nphp\n$money = new Money(500, new Currency('EUR'));\n$numberFormatter =  new \\NumberFormatter('en_US', \\NumberFormatter::CURRENCY);\n$numberFormatter->setAttribute(NumberFormatter::FRACTION_DIGITS, 2);\n$formatter = new IntlMoneyFormatter($numberFormatter);\n$formatter->format($money); //Outputs \u20ac 5,00\nBut if you want to set a different number of fractions than the subunits, then you will have to set them both.\nphp\n$money = new Money(500, new Currency('EUR'));\n$numberFormatter =  new \\NumberFormatter('en_US', \\NumberFormatter::CURRENCY);\n$numberFormatter->setAttribute(NumberFormatter::FRACTION_DIGITS, 0);\n$formatter = IntlMoneyFormatter::withSubunits($numberFormatter, 2);\n$formatter->format($money); //Outputs \u20ac 5\nAnd \nphp\n$money = new Money(500, new Currency('EUR'));\n$numberFormatter =  new \\NumberFormatter('en_US', \\NumberFormatter::CURRENCY);\n$numberFormatter->setAttribute(NumberFormatter::FRACTION_DIGITS, 0);\n$formatter = IntlMoneyFormatter::withSubunits($numberFormatter, 0);\n$formatter->format($money); //Outputs \u20ac 500\n. @sagikazarmark Because it is the IntlMoneyFormatter. I would expect that the intl extension takes care of these things. That is what the extension is for, right? If we force the subunits to be zero then the user must explicitly tell the formatter for every currency it wants to format how many subunits it has. Then we could better skip the extension.\n. @sagikazarmark It would be best if the Currency object would carry the number of subunits for that currency.\n. @sagikazarmark PR updated. I understand your points. Though I have to say I still do not fully agree. In my opinion you cannot construct a Money with or without subunits. If you construct a Money object you must always use the lowest possible denominator. That means in the case of EUR always cents.\nphp\nnew Money(500, new Currency('EUR'));\nThat should always represent the same value, no matter which application you are using. In your case, that might mean \u20ac 5 but that might also mean \u20ac 500. That is just plain wrong. In my opinion that is \u20ac 5, period. The question how to format it belongs to the formatter, with or without fractions. Subunits should not be part of formatting in the first place. While typing this, I actually still believe that this PR should not be merged.\n. @sagikazarmark That is right. Let me give it another thought.\n. @sagikazarmark I also found out that there is something like NumberFormatter::MULTIPLIER. I do not know if it can help us. That how I also found out about #227.\n. @sagikazarmark By the way, everything that has been said here, is also true for a parser. The parser is also not aware of the amount of subunits.\n. @sagikazarmark My final thoughts are that we should create a subpackage minor-units or subunits. Quite similar to the creation of the currencies, we can create an array with the code as key and the number of subunits as value.\nphp\n<?php return [\n  'EUR' => 2,\n  'USD' => 2,\n // and so on\n]\nAnd do something like this.\nphp\n$formatter = new MoneyIntlFormatter(new \\NumberFormatter(), new CurrencySubunitRepo());\nAnd then the interface for CurrencySubunitRepo is like this.\nphp\npublic function getSubunitsFor(string $currencyCode) : int;\nOur package implementation of CurrencySubunitRepo uses the array but if required developers can implement the CurrencySubunitRepo interface themselves.\n. @sagikazarmark Good idea. Let's do that.\n. Just issued a new PR. Please comment your feedback over there. I would love to hear it.\n. Maybe ctype_digit. Although I have not used that for a long time. Is it still valid to use it?\n. Issue solved by merging PR today.\n. Subunit formatting was solved today with different solution. Thanks for your effort though. Everybody's input helped to get this done.\n. Fix is on the way via #245.\n. Sorry, but this PR is not going to be merged.\n1. __toString was discussed before and refused.\n2. normalize is not needed, we already have normalizers for that.\n3. why do need pow if there is no Money method for it?\n4. When do we need fromFloat?\n. You should a parser instead of fromFloat. See the StringToUnitsParser. There is a more comprehensive solution towards subunits on the way.\n. @bendavies Are you abs for money or other purposes? I have the feeling that you like the classes to be used outside Money, right?\n. Oh sorry, I did not see the absolute method on Money. It actually looks quite good.\n. @sagikazarmark I think we can merge this one in.\n. @bendavies I rather name the methods the same: absolute for Money and Calculator implementations.\n. Why do need beberlei/assert to check if something is true?\n. Fixed in PR #260.\n. Oh, forgot to mention that this gives us better control over currency updates. We need that.\n. @sagikazarmark I created an additional repository without thinking, probably because it is external now. On the other hand; it is within our own organization. I do not see a problem with it.\n. Closed.\n. @sagikazarmark Why do want to extend another interface?\n. @pamil That can easily be renamed. I can do that.\n. @sagikazarmark Actually, that is not completely different from what I am proposing. Just different names.\n. @sagikazarmark Refactoring... give me two minutes.\n. @sagikazarmark Is this any better?\n. @pamil What do you think?\n. CurrenciesWithSubunit might be better of in Money namespace instead of the Money\\Currencies namespace since Currencies is also in the Money namespace.\n. @sagikazarmark Since you are already giving detailed comments I assume you like this design better then the initial one?\n. Haha, ok. I will fix those issues and think about the default of zero. Don't know for sure if that is what we want.\n. Just updated the PR. I did not go for the default subunit of zero. Rather I added a FallbackSubunit class that can catch exceptions from a delegated CurrenciesWithSubunit aand apply a fallback from another CurrenciesWithSubunit. Basically, the fallback will act as a decorator.\n. Also went for singular: subunit.\n. By the way, I have not created spec tests for the different CurrenciesWithSubunit because I want to have an agreement on the architecture. I will add those. \n. Actually I think this solution it far better than others we discussed before. Thanks for the suggestion @sagikazarmark. I will leave this here for some days. Without objections this will be merged somewhere next week.\n. My reasoning for not using a subunit default is as follows.\n1. The ISOCurrencies class is only aware of the how and what of ISO currencies. A default is only appropriate if there is a ISO default. I do not believe there is one. Moreover, it would be weird when contains returns false and getSubunitFor actually returns a number. So it should indeed throw an exception.\n2. ConstantSubunit is a class where you - if you use it - can inject the number zero without any problem. That is the whole idea of the class.\nHence, we need a third class: FallbackSubunit that applies a constant when the delegated is failing.\n``` php\n<?php\nuse Money\\Currencies\\ConstantSubunit;\nuse Money\\Currencies\\FallbackSubunit;\nuse Money\\Currencies\\ISOCurrencies;\nuse Money\\Formatter\\IntlMoneyFormatter;\n$currencies = new ISOCurrencies();\n$formatter = new IntlMoneyFormatter(\n  new \\NumberFormatter(...),\n  new FallbackSubunit(\n    $currencies,\n    new ConstantSubunit(0)\n  )\n);\n``\n. @Sharom I took your idea and merged into the branch. It is little different from your proposal but I definitely like the interfaceCurrenciesSpecificationbetter thanCurrenciesWithSubunit. The new value objectSpecificationshould throw exception I guess instead of returning null when it does not know a specific value (numeric code or name of a currency). But I'd like to hear first how @sagikazarmark and @pamil think about this compared to what we had before.\n. Now, I think that CurrenciesSpecification should be moved into Currencies. So Currencies interface has two methods: contains and specify. If the repository contains the currency, it must be able to specify its characteristics. Right?\n. @sagikazarmark Now I closed the other PR and got back here. And I also tried to work withCurrenciesWithSubunitlike you are proposing. It simply does not work within our domain to have it as a new interface.\n1. How should AggregateCurrencies look like when we haveCurrenciesWithSubunit?\n2. How should CachedCurrencies look like when we haveCurrenciesWithSubunit`?\nWhile trying to make it work I found that the solutions can be.\n1. We will end-up with dirty instanceof checks if we implement CurrenciesWithSubunit in those classes.\n2. Or we have to create new classes AggregateCurrenciesWithSubunit and CachedCurrenciesWithSubunit. That becomes a nightmare.\n3. We leave those classes untouched and we accept that there no aggregation and cache for subunit.\nBasically decorating Currencies | CurrenciesWithSubunit becomes very hard if we add another interface for subunits. We should keep it simple. subunitFor is a requirement of our domain and belongs to something our repository should provide by default. Now if you have a specific currency without a subunit, you create your own Currencies implementation.\n``` php\nnamespace My;\nuse Money\\Currencies;\nclass 8g7bv87b786cv8zuvb786bv7zv76v implements Currencies {\npublic function contains(Currency $currency) {\n     return $currency->getCode() === '8g7bv87b786cv8zuvb786bv7zv76v';\n  }\npublic function subunitFor(Currency $currency) {\n    return 0;\n  }\n}\n```\n@sagikazarmark If you still have time... ;) Please provide some feedback here.\n. I am going to wait until Travis finishes this one. I will squash it and merge it. There were many iterations and many experiments. I have done as much as I could with all the feedback. Now it is decision time. We have to move on.\n. This PR includes formatting and parsing with rounding. That means parsing $1000.005 for a currency with subunit of 2 will become Money::US(100001) and formatting  Money::US(5055) with subunit of 2 and formatting fraction digits of 0 will become '$51'.\n. This PR also includes Currencies extending \\IteratorAggregate. So one we can iterate over every currency code inside a currency repository. So Currencies actually provides currency codes.\n. This PR does not include a solution to a name of a currency. Iteration via \\IteratorAggregate allows to see which currency codes are available. The library user can translate a currency code to a currency name via its own objects.\n. Thanks @sagikazarmark @pamil @Sharom and others that helped giving the feedback.\n. @sagikazarmark Thanks for the feedback. I understand it very well. I will have a look at the UnknownCurrencyException.\n. Updated the PR a little more. No more entity property on the currency. There is no real use-case for it other than meta data. The currency name however does have a use-case. I can imagine people want to render a currency list, so one should be able to iterate over ISOCurrencies and display the name of currency.\nBy the way @sagikazarmark, with this setup, there is a default subunit of zero.\n. @sagikazarmark Thanks for your reply. It really helps to see the problem better. I agree with most of the points your make, but disagree with the fact that a subunit is completely different data. Every currency has a subunit. Even a Bitcoin has a subunit. The value (8) is even greater than for any other currency! So yes, you can actually own a half Bitcoin!\nThen, let's take another attribute into account: the name of currency. And let's pick a simplified use-case. Suppose we have an application with multiple webshops. Every shop could have a different currency. So I want to render a list of currencies. And on my shop settings page I want to display the currency name.\n1. Who is providing the list of names? Probably the Currencies implementation by providing an Traversable over it, where the currency code is the key, and the name of the currency is the value. We save the currency code with our shop entity in a database. This part is solved.\n2. But how do we display the name on our shop settings page? The only thing we can do is iterate over Currencies again, lookup our currency code in the key and then display the value. That is not a practical solution.\nSuppose we want to provide a better solution. If we continue on the path of creating a new interface we create the interface CurrenciesWithName. So then we have the interfaces Currencies, CurrenciesWithName and CurrenciesWithSubunit. Three concepts in our domain while in real life there is one concept currency with three attributes code, name and subunit.\nNow I'd say we add name and subunit to\n1. Currency by the withName and withSubunit which will be inject via Currencies\n2. Currencies via the methods subunitFor and nameFor.\nTherefore I updated the other PR to provide these solutions.\nFinally: once again, please shoot at the points I am making. More iterations help to create better code. I think we are getting close to the final solution.\n. > Okay, let's close to this problem from another point of view: Currency is a VO and as such, it should only have the minimum internal structure that helps representing that single value. That's the currency code. In case of money, it's the number AND the currency. Think about money in real life: when you hold a ten EUR note, it doesn't tell you that there are cents too.\nCompletely agreed. But does that mean an object cannot have any further properties than what it is dependent on? The solution in this PR does not change the behaviour of Currency. It leaves behaviour untouched. We need new classes for different behaviour (SRP). In this case we only attach properties that are tight to a currency to the object itself. They are optional.\n\nwhat should happen if there is no subunit?\n\nCurrencies that do not have a subunit will have a subunit of zero. In this PR it is the default value within the currency object. In the case of the PR that creates CurrenciesWithSubunit there have to be more objects ConstantSubunit and FallbackSubunit in order to provide defaults. Or if we have subunitFor as method of Currencies that method has to be implemented.\n\nAs for the name: everyone should solve it on their own :trollface: The biggest problem in my opinion is that Name specifically is usually a translated field and I really don't want to provide translations. Every framework handles translations separately.\n\nAlso disagree here. Every currency has an official name. But you are right in the fact that localization might translate the official name differently. Therefore people can perfectly create their own Currencies implementation, e.g. ChineseLocalizedISOCurrencies and attach a different name to the currency.\n. You are right on the ChineseLocalizedISOCurrencies, that is a bad idea. Also updated the PR to actually see it without name, but I am not convinced yet. Actually, I think I still disagree.\n1. How should I solve displaying ISOCurrencies names then? I will end up creating a new class loading the currencies again. ISOCurrencies is a repository that is still not providing anything.\n2. Currencies that have no name, can actually have no name. Moreover, no name is default. It is the same as is with the subunit default of zero.\n. You are right. Negative ratio should throw an exception. Good question on the the negative money, I think the generated values are incorrect.\nphp\n(new Money(-5, new Currency('USD')))->allocate([3, 7]); // Now returns [-1, -4]\n(new Money(-5, new Currency('USD')))->allocate([3, 7]); // Should returns [-4, -1]\nRight? We could use the recently added method absolute to fix this I guess.\n. @Sharom See PR #260. It fixes both issues. Could you have a look and see if this correct behaviour now?\n. I did not use absolute by the way. That was not helpful in this case.\n. @Sharom Hmm. Now I am doubting too.\n. I reverted to the old behaviour. Let's leave as it is. We could always add another constant to the Money class, as with rounding.\nSo negative ratios are not allowed. And when there is a negative amount (debt), the one with largest share gets most of the debt.\n. @sagikazarmark What do you think?\n. @pamil Thanks, just issued PR #262 \n. @sandrokeil Well, there were times I also followed your pattern. Meaning every exception from a library should be thrown from within that library. Now I see things different. What is an exceptional state and who is responsible for creating that state?\nOnly when the library itself turns into an exceptional state, e.g. cannot parse currency because it is not supported by a parser, it must be a library exception. But when user is providing wrong arguments, the exceptional state is the responsibility of the user of the library, then I am fine with SPL exceptions.\n. You are right! Will do that asap!\n. Thanks for mentioning!\n. @xterr See: https://github.com/moneyphp/iso-currencies. But like @sagikazarmark says: it is not stable and it is also not created for external usage. This is going to be closed because it will not be implemented any time soon.\n. Since the coverage of the spec tests is good, I will close this one.\n. As soon as Travis in #280 is done, we will merge that PR and this issue will fixed. Thanks for reporting and your help to make this a better package!\n. @Michael-vb Tried to fix your issue in a PR. But I dont have any computer now, only phone. Maybe you can finish the PR yourself. Otherwise I will finish it when I come home in two weeks.\n. @sagikazarmark Could you review this PR? It became a little more than a simple fix.\n. Okay, even some more changes were required because of failing tests after merging. Let me explain why.\nphp\nNumber::isInteger('5.0'); // false\n(new Number('5', '00'))->isDecimal(); // false\nThat is inconsistent. And that was basically tested @sagikazarmark recently added test for really big numbers containing zeros. Hence, the tests failed. With the updated PR the Number class is now consistent, allowing '5.00' as an integer and therefore allowing the same for Money. So the following is now allowed.\nphp\nnew Money(5, new Currency('USD'));\nnew Money('5', new Currency('USD'));\nnew Money('5.00', new Currency('USD'));\n. @sagikazarmark Could you have a look at this one? Afterwards I want to tag a new beta.\n. Due to rounding and consistency of behaviour of numbers with trailing zeros, this package now accepts integers with trailing zeros.\n. I also feel that a static property is the wrong decision. If you ask me there three options.\n1. Money knows about subunits\n2. Currency knows about subunits\n3. Conversion should take place in a new class\nThe case of conversion with different subunits is quite similar to the case of the same currency with different subunits (think of gasstations). How to solve that conversion?\nThat leads me to say that subunits should be part of the Money class. So option 1. Because then you solve both cases. Think about it. The integer of 100 is useless if you do not know the currency and the unit of measurement.\n. @piku235 Thanks for all your effort here. Unfortunately we solved issue in another way. Without your PR however, we would never came up with this solution and the required thinking. I hope you do not mind us solving differently. Moreover, hope you want to contribute again in the future. Thanks again!\n. Will do next week, on holidays now\n. Uh, in two weeks\n. @sagikazarmark Can be merged if you ask me! Very nice found! Those zero bugs are harder than we think!\n. Why would you want that in a Money context? It is impossible to construct a Money object with a decimal.\n. The same story is true for almost any gmp_ method. You cannot substract or add a decimal number with the current GMP calculator. But since adding and subtracting decimals is not required by this package either (for the same reason I already gave that it is impossible to construct a Money object with a decimal), there will not be support for it until we start working on PreciseMoney. See #7.\n. Also relevant in this thread is the GMP Floating Point Support RFC.\n. @sagikazarmark I think we should just leave it. If there is no Money problem, there is no problem. We already have insufficient hands to get 3.0 out in reasonable time. If we starting fixing these issues...\n. Thanks @medinae.\n. Yes, will update your suggestions tomorrow!\n. @sagikazarmark I liked your suggestion regarding accepting money and currency only. However, I think we do not need a third class for it. Better to change the Converter to your suggested signature. So now there is a Converter to change Money and Exchange for those interesed in CurrencyPair.\n. @sagikazarmark Hmm, true that.\n. @sagikazarmark But why is that a problem? You can implement Exchange, right? That is what it is for?\n. This way you have a perfect separation of responsibilities. The fact that someone will be using a fixed exchange rate should be expressed in an Exchange related class, not in the converter. The converter should depend on the exchange.\n. I think that would be a good idea. Hang on, I will make it part of the PR.\n. Great, I think this made the PR better!\n. @sagikazarmark Merge after Travis also likes it?\n. Hmm docs.\n. Now it is done. Will merge after Travis is happy.\n. @sagikazarmark There is no real opportunity to do this magic in php doc. I'd say we close it. It hurts my eyes ;)\n. See the integration paragraph in the readme. Store the amount as an integer in your DB, and the currency as a string (varchar).\n. Sorry, you are right, can be merged!\n. Good call @sagikazarmark. Obviously I was not aware of these methods. But I should have looked better.\n. Will merge after Travis is happy.\n. @Michael-vb This has been fixed in the latest master.\n. Thanks for reporting.\n. @sagikazarmark In the case of issue #278, there was an example that could never be the case inside Money. Why would you want to compare non-integers? That is simply impossible with Money because Money requires the amount to be integer. We never compare non-integers.\nBut issue #286 is different. One should be able to multiply an amount with decimal leading zero value. As you can see in the multiply method I created a workaround the limitation of GMP.\nMy point with the calculators is: they are Money internals. Anything inside the calculators that causes bugs inside Money should be fixed. Every other case should be ignored.\n. @sagikazarmark Decimals within Money are only relevant when multiplying or with divisions. That is why I only created the workaround inside the GMP calculator for multiply and divide. Decimals are irrelevant when adding, subtracting and comparing because Money will always require integers for those methods.\n. I have nothing to add here. The PR looks good. Maybe the name of class. I think we could drop String from the name. That results in DecimalMoneyFormatter which I think covers the purpose of the class.\n. @teohhanhui There is nothing wrong with that code duplication. There is no need for abstraction.\n. Oh, I did agree with @sagikazarmark comment though. Amount is already string. So please change that. I only wanted to say that I have no more comments on the PR than that.\n. Will merge after Travis is happy.\n. @teohhanhui Great PR, thanks for your help!\n. Not a bad solution either.\n. @sagikazarmark If you want to setup a site, let me handle this then.\n. Stupid question: how do you do that?\n. @tuwannu Thanks by the way ;)\n. @tuwannu Thanks!\n@sagikazarmark I see that we already had a webhook, but I think it is broken since we moved to another github url. Since I have no access on ReadTheDocs, could you try to fix it? Simply readding the URL to github is not the solution.\n. Works, great!\n. @sagikazarmark I dont have RTD :)\n. I am in favor of any enhancement as long as it does not block from releasing 3.0 stable.\n. Great work here! Maybe I would move Bitcoin down to the last position in the ToC. If @tuwannu can rebase his PR, we might have a stable release this week?\n. I checked the boxes, because I think we have done enough in this respect. If you agree too @sagikazarmark then you can close this issue.\n. This looks good. I wonder (do not see a test for it): what happens if I parse $ 1.00 like so.\nphp\n$parser->parse('$ 1.00', 'USD');\n. Okay, so when people want to parse an amount with a currency symbol they will have to use the IntlMoneyParser. Or they create a decorator within their own domain that removes any special character from the decimal amount. Right?\nCould you highlight what is breaking of this parser comparing to the StringToUnitsParser?\n1. Only a minus sign is allowed in the DecimalMoneyParser while both plus and minus were allowed in the StringToUnitsParser.\n2. ....\nWe might want to consider to have both StringToUnitsParser and DecimalMoneyParser in our library, depending on the purpose of both classes. Could you highlight why the former has been removed instead of having both?\n. @sagikazarmark I think the points are valid. However it does mean we will break BC again. WDYT?\n. Then I am going to merge this.\n. @teohhanhui Many thanks again. Great work!\n. I am on it\n. Fixed via #296.\n. Why? The contains method already returns false?\n. It never returns the currency code. It returns boolean for contains, int for subunitFor and iterator for getIterator. I dont see the problem.\n. You are right!\n. PR is there.\n. Agreed, I would it when you're happy with the changes.\n. +merge\n. I will pickup the GMP problem. If you could do this one, I am not so experienced with phpspec.\n. @sagikazarmark Done, but I need to refactor. It is quite hard to be honest. I added also comments to this method with some explanations. Since GMP does not support floating point precision, we will never be able to give precision on anything resulting in a decimal. But the amount of precision (like in BC math) is something we should be able to control.\n. At this moment there is a precision of 1, which will make sure that the resulting integer will be rounded correctly.\n. @sagikazarmark There will not be a problem with GMP in the current Money context since there will always be a correct amount. But, if we move on to PreciseMoney this might be troublesome because we cannot give enough precision on the fractional part.\n. But I will have another look at this. I think I can still improve a lot.\n. @sagikazarmark  That might not even be necessary. We don't do that for BC math, are we? We can inject a precision integer to the GMP constructor, just like we are doing with BC math.\n. Done. I want to have a second look at this another time. Since it is quite mathematical, I should review the approach and the resulting code.\n. Moreover, we have had some issues with leading and trailing zero in the past. I should be careful and make sure that such problems might not be introduced again.\n. Okay, I am happy now with the result. It is simplified and logic now.\n1. If the divisor is decimal, multiply amount and divisor with 10 * (length of divisor fractional part)\n2. Calculate the integer part of the result and the remainder using gmp_div_qr\n3. Multiply the remainder part - if any - with the injected precision\n4. Do another division calculation with the multiplied remainder\n5. Concatenate the result of 2 and 4 with keeping in my the precision used at 4.\nExample: 2 / 0.5 = 4\n1. Divisor is decimal with fractional length of 1, multiply both with 10, results in 20 and 5\n2. 20 / 5 = 4\n3. No remainder, return 4\nExample: 98 / 24 = 4.083333333333333\n1. Divisor is not decimal, no need for multiplication\n2. 98 / 24 = 4 with a remainder of 2\n3. Multiply the remainder with 10 ^ 14 (default scale 14) = 2 * 10 ^ 14\n4. Fractional part: 2 * 10 ^ 14 / 24 = 8,333333333\u00d710\u00b9\u00b2\n5. Result: 4.083333333333333\n. I'd say we merge it in. Of course, when Travis is also happy with it.\n. Maybe you can squash your commits too @sagikazarmark \n. Ok, will push that directly to master.\n. @sagikazarmark Yes, final, no need to extend them. If there might ever be a reason to extend, someone can do that in the PR.\n. @sagikazarmark Final was never a habit in the PHP world. Thanks to Mathias et al we learned.\n. Fixed via #296.\n. I left it dev-master because it has no external purpose.\n. Hehehe, I understand, I also have problems with complaining IDEs. Will tag 1.0.0 and reference it here.\n. Merge it in, looks good!\n. Agree: moneyphp/money. Too bad money/money has been taken. And I believe there is an alias option?\n. @sagikazarmark Shall I take care of this one?\n. Let's go for moneyphp/money instead of money/money.\n. You might want to create an alias for mathiasverraes/money.\n. Oh, I thought there was such an option. I think I cannot add a maintainer..\n. I think that goes by changing the composer.json. There is no such thing as changing a maintainer with the UI. Or is there?\n. Ah, great! Thanks!\n. @tuwannu Great PR. We were indeed lacking comparison and operation docs.\n. @tuwannu Please use the TOC from #313. That looks great.\n. Agreed. Since we both liked the PR, I asked to put them in frequency order.\n. Great, thanks again!\n. Can we add Let's Encrypt to our website?\n. Googling says there is not. Never mind. No privacy data on that host.\n. Done. Also added some words on testing.\n. Cool.\n. Maybe add the logo in the README too. Now there is only one location where it is visible.\n. @sagikazarmark We should discussing these things. Your time more valuable than to answer this again again and again. Sorry for those who do not understand/agree with our design decisions. We should reference our docs where we explain things, and that's it. Not happy? Start your own library and design things for yourselve.\n. And to that guy that is creating a currency in database with an id (instead of the value as the primary key): you do not understand the difference between an entity/model and a value. Once an object is not identified by its value but rather with its id: it becomes an entity/model in your application and you should you start to model things differently. You are probably running a database driven app, versus the domain driven concept of this library.\n. @wimby Learn about composition, and why/when to use it over inheritance (almost always). Solution to your problem.\n```php\n<?php\nnamespace X;\nfinal class Price {\nprivate $amount;\n   private $vat;\npublic function __construct(Money $amount, VAT $vat) {\n     // ...\n  }\n}\nfinal class VAT {\n  private $exempted = false;\n  private $percentage = 0;\npublic function __construct ($percentage) {\n  }\npublic function isExempted() {\n    return $this->exempted;\n  }\npublic static function exempted() {\n    $vat = new self(0);\n    $vat->exempted = true;\n   return $vat;\n  }\n}\n. Let's keeping discussing a topic that has been closed for months. Money is final, period.. Agreed. Will be added soon.\n. We can fix this inside FixedExchange, right? The responsibility of reverse conversion inside the swap implementation is not ours.\n. The amount is a string in Money 3. Otherwise this is rather a problem for Doctrine to solve.\n. Oth, currency does not have a property nam. This is called code in Money 3.\n. @garak We could notify people but it is not a BC break. It is private property so it did not cause an API change. The fact that Doctrine uses Reflection to get the value of this property, means that any rename of variable causes problems. Embeddables via reflection should therefore be a last resort.\n. Private variables may always changes. The fact that Doctrine use Reflection is a risk that that package is taking.\n. @garak Fair enough, just changed the CHANGELOG.\n. Like it, merge it in! Regarding your note: I think there is no performance hit if you nest the ReversedCurrenciesExchange. That class is not doing anything special performance wise. When nesting the quote method returns immediately and the result will only pass more stations that return as well.\n. @sagikazarmark Good job! I think you have proposed a good solution like this. Good idea to create a decorator for it. Merge it in.\n. My suggestion would be to map the amount as a Doctrine bigint field.\n. Closing this in favor of #328.. The second option does not make any sense. If you ask me: 1. use the value object directly, 2. implement a doctrine interface/extend doctrine.\nExample: http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/cookbook/custom-mapping-types.html.\n. Shall we close this one? It is out of the scope of this library. Maybe inside the scope of this organization. But it should not be an open issue here. Right? I am closing, until someone comes up with a good reason to have it open here.. @guiwoda No idea. I am not using Doctrine. Maybe @sagikazarmark knows?. @programarivm As mentioned on the frontpage of this library: we are using strings because we want to support big integers! This lib includes BigMoney. So that basically makes all your arguments invalid.\nTwo remain:\n1. 64-bit machines handle bigints differently than 32-bit machines: use 64-bit if you want big int.\n2. This is a tricky issue across different database vendors: not the responsibility of this library, but of your mapper.. @programarivm See https://github.com/moneyphp/money#features for all features that the lib is offering you. Apparently more than you think ;). > That said, if you are using some ancient 20 year old 32bit only server processor to handle millions in financials, you must be a bank. God help you.\nHaha :+1: . @guiwoda Since I do not use Doctrine, I am not the person to provide you with the feedback. I know Mark is on holidays at this moment. So it will have to wait. Maybe give him a @ mention in two weeks or so.. @programarivm If you find a vulnerability, please report it. Your suggestions are not helping at all. Because of a CVE in the past, that does not mean functionality should not be used. We are still using SQL, are we? How many CVEs can you find on that topic? Please bother other people if you do not have anything useful to say.. Please come up with a better description of the issue.\n. Which is correct. Allocate expects an array where as allocateTo expects an integer.\n. The docs example is incorrect indeed. Must be updated. Thanks!\n. Done\n. @garikaib Very welcome!. Hmm interesting case! I am not against this per se. What do you think @sagikazarmark. @digilist Would #334 be sufficient?. That PR requires some extra work. However, where would we need to take the possibility of such an object into account? Multiply and divide are obvious, but are there more places that we need to change? If we allow an object as operand we need to implement it comprehensively.. After thinking this through, I think this is not a good idea after all. The API we have now is simple. With this feature, we are moving towards a more complicated API. Maybe we should add this for PreciseMoney. I figure that the need then for such a feature is much more severe than with Money now.. Few considerations before continuing:\n\nIs this the right path to start with?\nWhat to do with the PHP Calculator? It will have strange results when multiplying and dividing, so I left it out of the PreciseMoney calculators. However, I did implement some changes for tests to succeed (all floating number bug related changes).\n\nWhat should be next?\n1. What to do with formatting and parsing? Do we want to support it at all?\n2. What to do with conversion? Do we want to support it at all?\n3. ...\n. @m4tthumphrey You can already do that.\nphp\nnew Money(11535, new Currency('GBP'));\nnew Money(4251, new Currency('GBP'));\nYou should implement your own currency with subunits set to 4. See the BitcoinCurrencies how to do this. If there are more currencies involved than only the pound, use the Aggregate Currencies class to turn multiple currencies it into a single repository.\nPreciseMoney could be used if you do not want to round your amounts. But as you can see, this branch has not been merged yet. Use at your own risk.\n. No progress. I expect to look at in the end of the year. If someone could give some feedback, that could - of course - help to have the feature earlier.. @sagikazarmark I am planning to update this PR. The considerations I mentioned earlier on are still valid.\nIs this the right path? Meaning: should we create a new class PreciseMoney that supports unlimited decimals? Or should we embed the functionality in Money? The current solution is the former. However it has cons. First of all, we cannot reuse the formatters/parsers/currencies within PreciseMoney. But that is - of course - only a con if the domain requires the functionality. And there is a way of overcoming this by creating conversion methods: Money <-> PreciseMoney.\nSo the questions are?\n\nCreate a new class PreciseMoney or embed in Money?\nIf answer is create a new class PreciseMoney, how to support formatters/parsers/currencies?\nShould we create a toMoney(int $decimals) in PreciseMoney?\nShould we create a toMoney(Currencies $currency) method in PreciseMoney?\nOr should there be something like PreciseToMoneyConverter?\nOr should be add methods to Money, like fromPreciseMoney()?\n\nWhat if PreciseMoney was not be currencies aware, so PreciseMoney = f(amount) instead of PreciseMoney = f(amount, currency)?. My initial answers are as follows.\n\n\nCreate a new class PreciseMoney or embed in Money?\n\nNew class\n\n\nIf answer is create a new class PreciseMoney, how to support formatters/parsers/currencies?\nConvert PreciseMoney to Money (one direction).\n\n\nShould we create a toMoney(int $decimals) in PreciseMoney?\nYes\n\n\nShould we create a toMoney(Currencies $currency) method in PreciseMoney?\nNo\n\n\nOr should there be something like PreciseToMoneyConverter?\nNo\n\n\nOr should be add methods to Money, like fromPreciseMoney()?\nNo, we should add fromMoney(Money $money): PreciseMoney and toMoney(int $decimals): Money to PreciseMoney only. Money does not have to know the existence of PreciseMoney.\n\n\nWhat if PreciseMoney was not be currencies aware, so PreciseMoney = f(amount) instead of PreciseMoney = f(amount, currency)?\nBad idea.. @sagikazarmark Could you emphasize your thoughts. Maybe just start with some initials thoughts. Then we will iterate towards the optimal solution.. @willemstuursma Cool to see you drop in. Could you emphasize why we should not be able to convert to Money? How to support formatters/parsers/currencies for PreciseMoney without conversion possibility?. @willemstuursma Great idea. However, I am on honeymoon leave from Tuesday. So, it will have to wait until November.. Good catch, thanks. @elazer could you add tests for this?. @elazer assertEquals means ==, so I guess 1. is interpreted as a float which == 1 as an int. The test should be changed to assertSame, meaning ===. Then it will fail I guess. The end result should be assertSame('1', $formattedMoney).. @sagikazarmark Why is this failing? Dont get the sphinx problem.. @sagikazarmark Thanks for fixing!. @elazer Thanks for the PR. Will be merged by #341.. Good catch and fix.. @wimby I think it does with his PR. Why wouldn't it?. Regular expressions are generally very slow.. See #341.. I think this is as correct as 3.0000, which is also allowed. So not a bug to me. But I think it is wise to add a test for it and as such make it a tested feature.. This is tested now in my alternative solution for #338.. Will be merged by #341.. Also tested '.5' and '-.5'.. @wimby I changed str_split into a while loop using string offsets. That must be faster.. Yes, see my tests. PHP allows them too.. https://3v4l.org/tqkZ1\n\n\n\nAccording to Wikipedia \"In common numeral notation (which is used in arithmetic and elsewhere), the sign of a number is often denoted by placing a plus sign or a minus sign before the number. For example, +3 denotes \"positive three\", and \u22123 denotes \"negative three\". When no plus or minus sign is given, the default interpretation is that a number is positive. Because of this notation, as well as the definition of negative numbers through subtraction, the minus sign is perceived to have a strong association with negative numbers (of the negative sign). Likewise, \"+\" associates with positivity.\"\nSo, I'd say that closes +0 as to be allowed. Don't have the time now to look into 000.\n. Again Wikipedia \"A leading zero is any 0 digit that comes before the first nonzero digit in a number string in positional notation.\" suggests indeed that 000 should not be allowed because of the lacking first non-zero digit.. Number is used in calculators too. Mostly to get consistent output. Especially when using scale to multiply and divide with BC math.\n@wimby Agree, let's only support 0, -0 and +0. So 000 should not be supported. I will fix that. And I will document valid inputs.\n@sagikazarmark Do you agree; or have any objection on this?. I also think we should use assertSame here instead of assertEquals. Will update that too (and fix some minor test-related bugs).. @wimby @sagikazarmark I fixed some more bugs. '-100.-100' was accepted. This has been fixed. I also documented accepted values and changed assertEquals to assertSame.\n@wimby I did accept '000'. Simply because it involves more code to not accept it. I do not find it a problem to accept it. If you have strong arguments against this, please let me know. I might reconsider.\n@sagikazarmark Could you review this PR? I think it provides a better solution than we had before. It validates the integer part differently than the fractional part (fractional part cannot have a sign). It should also be faster than the previous solution. Finally, I took your advise and made the plus sign to be not accepted.. Okay. I changed more. 000 is now not supported any more. Otherwise I moved the responsibility into a single method for integer part and a single method for the fractional part.. @sagikazarmark Any more change requests? I would love to merge this PR.. @wimby Since documentation is part of this part we do have 'specification' after merging.\n@sagikazarmark I want to finish this. It's open for too long.\nAt this moment:\n- trailing zero's are (must be due to BC math)\n- leading zero's are not accepted\n- only zero's with length more than 1 is not accepted\n- plus sign is not accepted. @sagikazarmark @VaclavSir This is fixed in #341 too. Thanks for reporting and the fix.. This is not supported out of the box, but you could create something yourself. I think things belongs to your own domain layer. Though, there is something to say for this feature.\n@sagikazarmark How do you feel about this?. Thanks!. @MichaelGooden Isn't this a reason to create a new object? CachedSwapExchange. Which should be in your own namespace?. @sagikazarmark Maybe it does indeed. Since I don't do a lot with exchange and caching, could you take this one? :). Thanks, fixed in current master. Thought about this problem. The best thing we could to do is to add a DateTime argument to Exchange and Converter because an exchange and a conversion is always on a certain moment. It is up to the implementation to do something with it or not. But because that leads to BC breaks, we cannot do that right now.\nIs there any alternative? Yes, and that involves no change to the library code at all. If I had to solve this without arguments in the exchange and converter classes, I'd go for something like this.\n```php\n<?php\nnamespace External\\Controller;\nclass Controller {\n  private $converterFactory;\npublic function __construct(External\\Service\\HistoricalConverterFactory $converterFactory) {\n    $this->converterFactory = $converterFactory;\n  }\npublic function index ($date, $amount, $currency, $counterCurrency) {\n     $converter = $this->converterFactory->factory(DateTimeImmutable::createFromFormat($date));\n     $counterAmount = $converter->convert(new Money($amount, new Currency($currency)), new Currency($counterCurrency));\n  }\n}\nnamespace External\\Service;\nclass HistoricalConverterFactory {\n  private $database;\n  private $currencies;\npublic function __construct(Database $database, Currencies $currencies) {\n    $this->database = $database;\n    $this->currencies = $currencies;\n  }\npublic function factory(DateTimeImmutable $date) {\n    $rates = $this->database->select()->where('date', '=', $date->format('Y-m-d'))->get();\n    // modify $rates as such that it becomes a currency to currency (array) map\n    $exchange = new FixedExchange($rates);\n    return new Converter($this->currencies, $exchange);\n  }\n}\n```\nActually, I think this is maybe an even better approach than to add the argument. At least it is a perfect separation of concerns. But, a date (moment) is part of the exchange/conversion domain. So it should eventually become part of the library, in a version where BC would be allowed.. @sagikazarmark How do you think about it? My suggestion would be to close the issue, leave the PR open and tag it as version 4.. @sagikazarmark Alright. But why do you prefer this method over the factory pattern - using existing classes - that I am suggesting? I mean: why should we extend the library with functionality that is not required? What do you we gain from adding two interfaces and consequent implementations?. @sagikazarmark When reading this I see that there was no reply to the factory pattern in this case. I still think that is the best solution in this case. See my code above.. Why would the list be large? If you iterate it, the extra converter class would be gone when you move to the next item.. @sagikazarmark Enjoy! Well deserved I guess!. > In which case we'd lose the ability to reuse a converter for a repeated date - we'd be instantiating a new Converter each time. It's not a huge issue, but I just think it fails to really solve the problem.\nThat's not true. Your factory can return the same object(s), e.g. internally cached in an array, right? Or you can increase the design and create a CachedHistoricalConverterFactory and SqlHistoricalConverterFactory which comes along with the HistoricalConverterFactory interface. The  CachedHistoricalConverterFactory would act as a decorator for the SqlHistoricalConverterFactory.\nAnd then you inject the interface in your controller, which means you lean on an interface instead of a concretion. And that's what we always want, right?. @sagikazarmark I'd love to make a final decision on the issue. People have made their points, no need to extend the discussion. My viewpoint is clear: our current solution is sufficient for this use case, I see no reason to extend this library as suggested. @sagikazarmark Your viewpoint was different. I leave the final decision up to you. Shall we go for it or not?. @sagikazarmark I think we should leave the functionality as is and not extend it to historical rates. The current interfaces allow developer to take any path to extend conversion their own way.\n\nThey can add an interfaces in their own code for historical conversion and then implement that interface in their code.\nThey can extend our interfaces in their own code (would not be my preference though) and then implement those interfaces in their code.\nThey can go for the factory solution I proposed above.\n\nI think that this package must not provide a 100% technical solution to the problem. Let the developers decide for themselves.. Closed until someone decides it should be implemented.. I cannot reproduce this. . @damonjones Can you see what #352 does?. Uh, that should be #353 . @sagikazarmark Thanks for the help here. Merged the master into this branch because I recently released 3.0.1. There were quite a number of fixes. Bugfixes should not wait too long with a release. I know how much I appreciate it when a maintainer follows a bugfix directly with a tag/release. So I released a minor version in February.. @sagikazarmark I modified your solution. I think this one is easier to understand. Thanks for your noticing that my initial solution lacked scope.. @sagikazarmark If Travis thinks is alright, I merging it in.. Why revert? Tests are OK.. What history?. @sagikazarmark Okay, I am still not familiar how rebasing (really) works.. I dont have a problem with this. However, I do prefer isset over array_key_exists. But I dont have a specific reason why.. Will be merged when Travis feels OK with #359.. Thanks, merged and tagged.. Use a parser, see http://moneyphp.org/en/latest/features/parsing.html#decimal-parser. Fixed by #357 . Looks great. I'd also have to figure out if this bug also apllies to the BC calculator. I guess not because BCMath supports decimals.. Thanks, merged and tagged.. Think so too.. Will close it after that one is merged in. If the problem is not solved, we can reopen it.. @Surt I will take care of this. You can expect fixes tomorrow.. @Surt I cannot replicate this. I tried the following.\n```php\nMoney::registerCalculator(new BcMathCalculator(0));\n$money = new Money(399, new Currency(self::CURRENCY));\n$this->assertSame('333', $money->divide(1.2)->getAmount());\nMoney::registerCalculator(new GmpCalculator());\n$money = new Money(399, new Currency(self::CURRENCY));\n$this->assertSame('333', $money->divide(1.2)->getAmount());\nMoney::registerCalculator(new PhpCalculator());\n$money = new Money(399, new Currency(self::CURRENCY));\n$this->assertSame('333', $money->divide(1.2)->getAmount());\n```\nI tried PHP 5.6 and PHP 7.0. Could you share your system settings: what php version are you using? Do you have BCMath or GMP enabled? That is not required btw, but it tells me which calculator your setup is using.. @Surt But that is not a problem that this library is causing. We expect actual numbers, not localized numbers. So I guess there is no bug left in our repo that is causing your problems, right?. @sagikazarmark WDYT about this? Should we change our code because of it?\n@Surt A better solution (instead of str_replace) is sprintf('%.8g', $value). @sagikazarmark We could replace (string) with (string) Number::fromString(). The question, do we want that?. @Surt That is for sure.\n@Surt How about echo sprintf('%.8G', 1.3);. Cool. Thanks.. @Surt PR #361 will solve the issue.. Same as #354 but now with isset instead of array_key_exists.. @sagikazarmark Let's tag after this is merged.... @sagikazarmark I updated the changelog, so a new tag will follow after travis has approved the latest merges with the master.. @sagikazarmark Thanks for style fix. I know I am also not great at that. You are the guard regarding code style.. @judgej When is the exception being thrown? I wonder if this is a DecimalMoneyParser problem or a Money problem.. @sagikazarmark And we must make sure that our decimal parser can at least work with the same values that Money accepts.. Added tests for all parsers. Only the DecimalMoneyParser can parse empty strings because the other parsers require a currency sign to be present.. @sagikazarmark If this is alright, I will tag a new version.. @mdrost Can you explain with causes problems?. Since the description of this issue is too limited, I am closing it. Because I can somewhat understand what you mean, I listed a possible solution to the list of ideas for the next major version.. @Zxurian Fixed again, this time with tests.. Thanks!. Thanks! Good catch!. @Ellrion Sorry, I leave this up to @sagikazarmark. My knowledge of the exchange part of the library is limited. I cannot give a comprehensive review of this feature.. @Ellrion Nice feature!\n@sagikazarmark This is good to go if you ask me.. @sagikazarmark I'd say we do not do this. Maybe we should create .github where specifically mention that we refuse related to __toString and removing final.. @MichaelGooden You can upgrade the currencies dependency to 3.0 now.. @MichaelGooden Thanks for the update. I moved from 2 to 3 because it is essentially a BC breaking update. Could you also update the CHANGELOG? Maybe nice to add the remark of the Belarusian currency as well.. Hehe, I guess you are right. Sometimes I take decisions too quickly. @sagikazarmark is probably already aware of that ;). Will tag today, have to update some more CHANGELOG.. Done.. Hmmm... the ISOCurrencies states the following.\n\nPlease be aware that this library solely exists to provide iso currencies for moneyphp/money. Using this library for other purposes is at your own risk. Numeric codes are not use, because we didn't need it.\n\nTherefore, if numeric codes will serve a purpose for functionality / domain logic within the Money library, I will obviously agree. If, however, it is being done purely to extend our currencies class as repository / persistence logic, I am against it.\nIf this is for the latter case, I would recommend to create your own currencies repository. You are allowed to grab my code from the ISOCurrencies package and turn it into your own needs. Then you still have the opportunity to implement the Currencies interface, if you want to serve your own class as repository for Money. It will serve as perfect boundary.\nBut why not simply extend the class/repository? Money is created for domain logic, not for currency repositories. We should focus on that, and do that well. Moreover, the amount of code you need to create your own repo is very small.  \n@barryvdh If I were you, I'd have the currencies in your package, even if we would extend our repository. Having that responsibility in your package, gives you the power to change. It is not worth it to have it as an abstraction that is handled by someone else.. @barryvdh Why do you need it any how?. > But what you are suggesting, is that I either create my own OmnipayCurrencies class, which loads the currencies from my own resources, or that I extend ISOCurrencies and add the method there?\nThat is what I am suggesting.\n```php\nnamespace Omnipay\\Common\\Currencies;\nuse Money\\Currencies;\nfinal class ISOCurrenices implements Currencies {\n}\n```\n. > Oh I can't extend you ISOCurrencies class because it's final. I could create my own ISOCurrencies, but that would be duplicating your implementation, resources etc.\nCorrect. But there is nothing wrong with code duplication. Having that code in your own package gives you control over it. I think you need it over time.. > Gateways format the amount etc, but sometimes need to convert the currency code to numeric.\nDo you have an example? Maybe we could create formatter with the numeric code too. Then it is more than just repository needs. Then we are solving a case.. @sagikazarmark I'd rather remove it from our currency list then. We must not add methods to our library that serve as a database purpose. There must be more to it. The repo contains more data than just the minor unit and the currency code. We once decided not to incorporate the name and other fields in our package. I think I will leave it like this.. I do not fully agree, but what the heck. I think you would want to have a tag too? :). Tagged! Good luck with Omnipay!. We should work on a better error. But you should invest some time how configure NumberFormatter. See - amongst other - this method: http://php.net/manual/en/numberformatter.setattribute.php.. @sagikazarmark Continue supporting hhvm and update travis? Or drop? Maybe drop next major version.. Totally agree. Drop on Travis now then? Or wait for 4.x?. It fails due to misconfiguration (something on ubuntu version). We should update the travis.yml. Adding it to allowed_failures would be the same as removing it. Because we are not testing hhvm now/then.. So we have three options.\n\nMake sure HHVM tests work, but are allowed to fail\nMake sure HHVM tests work, but are not allowed to fail\nDrop HHVM tests\n\nMy preference is number three.. Bueno. Thanks!. @sagikazarmark Will do, it seems OK. But I am missing tests that prove the point.\n@angekouf Can you add a test that shows that there the calculator is not correct at some point?. Tests fail, no clear reason why to do it. It can only make sense when using PreciseMoney. Closing until better explanation given.. That is not possible at this moment. You could create something like the following.\n```php\nnamespace MyNamespace;\nfinal class NamedISOCurrencies implements \\IteratorAggregate, \\ArrayAccess {\n // read the currencies php file and implement the interface methods\n}\n```\nThen you can do the following.\nphp\n$currencies = new NamedISOCurrencies();\nforeach ($currencies as $code => $name) {}\n$dollar = $currencies['USD'];\nHowever, it is something that belongs in your own namespce. We do not want to have it in this library, because it opens up a world that we do not want to get into. Next thing request would be internationalized names or to distribute even more properties of currencies. This library is to help with domain issues regarding money and amounts. This is not a currency repository. Hope you understand.. ?. @mahbubkabir Doctrine is outside the scope of this package. Furthermore, I cannot help you with it (not using Doctrine).. Agree with @sagikazarmark. You simply don't divide by another amount. You split it according a ratio. Correctness over comfort.. @mcordingley Sorry, but I do not understand the problem that is trying to be solved here. Could you elaborate?. @mcordingley Got it. Will review accordingly!. @sagikazarmark I am in favor of this feature. How about you?\nI have got some style and code remarks on the PR, but before going into detail I rather have an agreement on the feature first.. Good job! Will review again soon. Think we can merge it in soon.. @mcordingley Did you consider to 'try' the decorated exchange directly before actually going for the indirect conversion?\nphp\n    public function quote(Currency $baseCurrency, Currency $counterCurrency)\n    {\n        try {\n                return $this->exchange->quote($baseCurrency, $counterCurrency);\n        } catch (UnresolvableCurrencyPairException $e) {\n                $rate = array_reduce($this->getConversions($baseCurrency, $counterCurrency), function ($carry, CurrencyPair $pair) {\n                    return static::getCalculator()->multiply($carry, $pair->getConversionRatio());\n                }, '1.0');\n                return new CurrencyPair($baseCurrency, $counterCurrency, $rate);\n        }\n    }. @mcordingley Exactly, so, I prefer to include it. Afterwards I think it is good to go.. @mcordingley We could reconsider the calculator part in next major versions.. Tag will have to wait until tomorrow.. Thanks @mcordingley. Great feature!. Tag is there, happy converting!. ```log\n\u279c  ~ dig any moneyphp.org                                                                                                                                                                                   \n; <<>> DiG 9.10.3-P4-Ubuntu <<>> any moneyphp.org\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 22736\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n;; QUESTION SECTION:\n;moneyphp.org.                  IN      ANY\n;; ANSWER SECTION:\nmoneyphp.org.           1782    IN      CNAME   readthedocs.io.\n;; ADDITIONAL SECTION:\nreadthedocs.io.         283     IN      A       162.242.198.235\n;; Query time: 1 msec\n;; SERVER: 127.0.1.1#53(127.0.1.1)\n;; WHEN: Thu Jul 20 09:12:18 CEST 2017\n;; MSG SIZE  rcvd: 74\n``. Good one. Actually I think it is a mistake that we accept a string. It would have been better if we only would have acceptedCurrency` object. So yes, I think it is a good one. If you create a PR, please update all the parsers.\nFor BC reasons we should leave the allowance of the string in. In new major versions we should remove the allowance for string.. @sagikazarmark I am also interested in the sum function.. @sagikazarmark Cool. That's a good idea. Maybe we should go for version 4 and have PHP 7.1 as next minimal version. I do not think 7.2 has any syntax changes that we will benefit from specifically, so 7.1 would be fine.. @sagikazarmark I rather see an additional method. Cannot explain why though.. @sagikazarmark Thinking it through, I agree that add(...Money) would be an enhancement to the library. I'd say we go for a new major version with at least PHP 5.6 support and add this to the list of ideas, because we can then use ...Money. But if you want to implement it in the current lib, I have nothing really against it.\nI do think, that ...Money would have be the second argument. There should be at least one amount to be added.\nphp\nfunction add(Money $addend, ...Money $extraAdded){}\nI would also like to note that when I saw this issue, I first thought it would mean a static constructor that accepts an array of amounts.\nphp\n$money = Money::sum([Money::EUR(10), Money::EUR(5)]);\nHow about that? That is more than just adding up the amounts, because we need to check if the array is empty. I actually would like to see this feature, because it would help me in many cases. Something like this.\n```php\npublic static function sum(array $amounts, Currency $currencyIfEmptyAmounts = null): Money {\n  if (empty($amounts) && $currencyIfEmptyAmounts === null) {\n     throw new SomeException;\n  }\nif (empty($amounts)) {\n     return new Money(0, $currencyIfEmptyAmounts);\n  }\nreturn array_unshift($amounts)->add($amounts);\n}. > About sum: why not just use add?\n\nMoney::EUR(0)->add(....)\n\nAgree. Never mind.. Good idea! We should implement it in a consistent manner and add it for all arithmetic operations.. @Banandrew It\u2019s not released yet. Only available in master now.. Yeah, you\u2019re right. We will have a look into that.. I understand your reasoning, though I prefer to have one method for one piece of functionality. If there would have been a completely incorrect chosen name, I might have accepted an alias function for BC reasons. Since that is not the case, I close this issue. Thanks for your suggestion though.. This is only acceptable with theoretical proof of the security limits. You did not provide any proof before. Only examples of some old CVEs in libraries that provide unlimited integers usage. That is, however, not a proof of concept and therefore there is no ground to accept this PR.. Doctrine and database is not the responsibility of this library. And that BC math and GMP would open a window of opportunity for security vulnerabilities is just speculation. I did not read any proof for that statement.\nMaybe - and I hope he does not care that I drag him into this thread - @paragonie-scott could give his opinion on this statement.. There was need a for unlimited integers in one of the issues. I decided to implement it using bc math and gmp, depending on the available extensions. And that is the final word to it. Case closed.. This cannot be accepted. We use this https://github.com/moneyphp/iso-currencies package as source for currencies, which in turn uses some official source. If you want to update iso currencies, update via that package.. Ah, then it is completely reasonable. I will check after weekend and merge it then.. I am not necessarily against this. I'd rather call it ArrayCurrencies I guess. Not completely sure about the name.. Please do :). Agreed. Currency list would be even better!. I'd say ArrayCurrencies or CurrencyList. @sagikazarmark Can you make the final decision? Then we can pull this in.. Cool, @gmponos can you finish the PR? Then I will take care of the final review and merge it in.. Thanks for reviewing @sagikazarmark. I think this is ready to go. Merge and tag?. @sagikazarmark Disagree there. I find it always extremely annoying to wait for release with other libraries, especially when it is a dependency of a dependency in a project. Then you will have to change your root composer.json to use minimum-stability and prefer-stable, which must be avoided at any cost. So I'd rather tag on every feature for my other libraries.. > Tagging a new release every time a new, mostly insignificant (no offense contributors) feature is added does not give us and users enough time to take a look at the changes, iterate whenever necessary, make them more mature.\nThis is not a problem of tagging. That is a problem of pulling/merging to master. When merged to master, tagging must be always possible. If we want to have a longer review period, we must wait longer with merging to master. And in certain cases, that is justifiable, but in others it is not. We have unit and spec tests, and we have the human eye. That must be enough for small changes.\nIn other cases, when it involves many code lines, I agree that longer review periods are necessary. I guess I am too hasty on those reviews. My attitude is indeed to keep things going and not wait too long. This generates a window of opportunity for stability and maturity problems. I will try to improve here. Maybe we should make a distinction in PRs: (1) requires team review (2) requires single reviewer.\nNonetheless, I really think we should tag after merging to master. If we think changes are stable and merged to master, then we can directly open the code to the public. Then regarding the tag number. I think we should follow sem ver. Maybe I should have created 3.1.0 earlier on, but I also think that is debatable. Did we really add features? In my point of view we did not. We added implementations of features we already got. So in that light, I think the last number should be increased, as we/I did.. Thanks for everyone's hard work in here.. @gmponos You could always create your own currencies implementation, like you are already suggesting. That way you can have your ISO currencies always up-to-date.\nRegarding your suggestion, that is at least something we should discuss for a next major release. Unfortunately, it would have BC breaks if we would change the constructor (with injecting a loader) now.. @gmponos I updated the library with up-to-date currencies.. @gmponos I dont like that idea. I agree that the library should have the feature you are suggesting. But using static setters to implement a feature is not the correct way forward. Moreover, we are not limiting the feature to be used now. If you create your own currencies implementation, you can use it now.. The latter suggestion was discussed before I believe. @sagikazarmark Can you remember why we choose not to implement it like that?. I believe that requires an internet connection to be there all the time. Second I think one cannot use composer commands in a dependency. So if one adds moneyphp as dependency to the root composer.json (or as a dependency of a dependency), one should also add the comand.\nIf we change current implementation, we should improve it. Not hack it. Until we have the solution I suggest to aff a feature by implementing  Currencies in your own namespace.. @sagikazarmark True. I rather go for everything in the next major version. I would be more than happy to give the first shot at this and move everything towards PHP 7.1 code.. Thanks!. Let's not do this. This is a library. We should be application agnostic. Therefore I see no reason to give examples. Moreover, I never would want to give support on such thing. Finally, this issue would be open for ages. Therefore, I rather close it.. @gmponos Obviously not. Passing in an empty array means 100% sure to have a failing parser/formatter object. Therefore I would not find it breaking to throw a InvalidArgumentException on such occasion.. I mentioned #386 and #397 in the 3.1 tracking issue. Closing this one.. Let's conclude that version 4 will be targeting PHP 7.1+.. Thanks for the great effort here!. See latest release.. @sagikazarmark I think we should merge this and tag. It is a bug that should be fixed asap.. Exactly, use the decimal parser, see documentation. Furthermore there is also Number::fromFloat.. @alvinchevolleaux It is indeed more performant. However, since it does not support rounding (no decimals numbers), I was reserved towards my implementation of it. Compare the two calculator classes and see the difference in required code to achieve multiplying and division. The least thing I could do was prioritizing BCMath over GMP.. @alvinchevolleaux It is already added. GMP is only not the default calculator because I found that too risky.. Well I am simply against accepting one more type in the constructor. Use a named public static constructor it.. @bendavies I get your point, but I stick to my main point: I do not want to have a constructor that becomes a bag of mixed types.\nWhat could be the solution that fits both viewpoints.\n```php\nMoney::fromFloat(3.5);\npublic static function fromFloat($amount)\n{\n  if (!is_float($amount)) {\n    throw new \\InvalidArgumentException();\n  }\nreturn new self((string)Number::fromFloat($amount));\n}\n``\n. This issue has too many problems. If there is a float, say3.5, should that become 3 or 4? Or should we use a rounding mode? But since the method will be static, we have to change more. And since I am totally against making the constructor a bag mixed types, I am going to close it. This is possible, but requires a more comprehensive solution than the current proposition.. @sagikazarmark There was a request to add implementation for Bitcoin. I just created it and fulfilled the request. The person that needed it never replied on the code. I think it _looked_ fine from our point of view. However, if you are not using code that you have written, I think there is a higher chance that it contains bugs. Which is the case here. I think we can merge it in.. @willemstuursma I think that if you want to have an internationalized formatted bitcoin, you should use theNumberFormatterfrom ext-intl and theIntlMoneyFormatter`.\n```php\n$currencies = new AggregateCurrencies([\n  new ISOCurrencies(),\n  new BitcoinCurrencies()\n]);\n$xbtNumberFormatter = new \\NumberFormatter('en_US', \\NumberFormatter::CURRENCY);\n$xbtNumberFormatter->setSymbol(\\NumberFormatter::CURRENCY_SYMBOL, \"\\xC9\\x83\");\n$formatters =  new AggregateMoneyFormatter([\n  '*'   => new IntlMoneyFormatter($isoNumberFormatter, $currencies),\n  'XBT' => new IntlMoneyFormatter($xbtNumberFormatter, $currencies)\n]);\n```\nThis gives you the proof that you can use intl even with your own currency.\nBut that leaves you with the problem that the locale must be injected instead of passed to a method, which might be more what you are looking for. In that case, I advice you to create a factory within your own namespace. An example what the class might look like is as follows.\n```php\nnamespace OutsideMoney;\nfinal class LocaleMoneyFormatterFactory\n{\nprivate $currencies;\npublic function __construct(Currencies $currencies) {\n    $this->currencies = $currencies;\n  }\npublic function factory(string $locale): MoneyFormatter\n  {\n    $xbtNumberFormatter = new \\NumberFormatter($locale, \\NumberFormatter::CURRENCY);\n    $xbtNumberFormatter->setSymbol(\\NumberFormatter::CURRENCY_SYMBOL, \"\\xC9\\x83\");\nreturn new AggregateMoneyFormatter([\n  '*'   => new IntlMoneyFormatter($isoNumberFormatter, $this->currencies),\n  'XBT' => new IntlMoneyFormatter($xbtNumberFormatter, $this->currencies)\n]);\n\n}\n}\n```\nThis does not belong in the Money namespace because what is inside the factory is not necessarily  restricted to the domain of this library. There can be all sorts inputs to a factory.\nAs this an answer to the issue at hand, I am closing it. We can always reopen in case there is reason for it.. @willemstuursma That is related to subunits since Money\\Money::XBT(1) is actually 0.00000001 XBT. The number of subunits for Bitcoin is 8. So you will have to initialize a larger amount, or change the number of decimals in the \\NumberFormatter.. > Shouldn't it be set automatically by the IntlMoneyFormatter based on the Currency?\nWe had a discussion on this topic when I proposed merging the Formatter and its implementations in. I can remember I was of the same opinion as you are now. However, we decided not got for it. Cannot recall why.. Solutions given. Issue closed.. Discussed thousand times. Get over it, it is not final. Search the issues why.\n@sagikazarmark I really do not understand why you keep replying to this. Waste of your time. I say: immediate closure and lock conversation.. @sagikazarmark Do you get what is happening here? Can you make sure this will be merged?. @willemstuursma As you mentioned yesterday that you would like to see this land, could you reply and say if this is what you are looking for?. Since there is no consensus yet in this PR, I will release 3.1 without it.. I think it's a really bad idea to add a trait to Money for the sake of code completion.. @willemstuursma Never knew this PHPUnit function. Looks good. Could you also add one test to use this comparator? I would like to see what a new test would look like. And we could rewrite tests to this methodology. My final question would be if there is support for this in the latest PHPUnit (still 6?).. @willemstuursma Dunno, I believe that @sagikazarmark is already looking at it. Others were also complaining.. @willemstuursma I see you added a test to the comparator. That is perfect, but not what I meant. I'd like to see a test that is using it within the current test framework, e.g. here. You told me that you will have to add it to the PHPUnit bootstrap or to the XML file. I prefer the XML file since we already have that one. Finally I think this should live within an own namespace. Since it is PHPUnit specific, I would suggest something like Money\\PhpUnit\\Comparator.\nSo, in order to merge.\n- [x] add a test to the current framework, using the XML file if possible\n- [x] move to namespace\n. @willemstuursma Looks good. Question, why is the Comparator class itself not final? Is there a reason for it?. @sagikazarmark In my opinion this can be merged in. This could - over time - give a huge cleanup to our unit tests.. Without any complaints, this will be merged Thursday.. Wonderful, thank you!. Sorry, I dont see this as a beneficial. I simply don't get what has been added to docs.. Duplicate of #465. @dmitry027 #422 fixes your issue.. Is this ready to merge?. Ah, I just found out about github milestones, which @sagikazarmark has already created for 3.1.0.. Ready to release 3.1 if you ask me.. Uh, I added a new PR ratioOf. I'd be very happy to have it merged and included in 3.1.. @sagikazarmark In my opinion we are ready to release 3.1. If you can have a look at the ratioOf PR, I'd be very happy.. Already merged the ratioOf method. That leaves the final #440 as final todo.. Added version 3.1.0 to the changelog. Ready to release after we cleared #440 and have a corresponding green light on Travis.. Since all PRs are merged, Travis is green, I am going to close this one. Release is up for next Monday.. @sagikazarmark I saw your remark on the changelog, good catch. Are we good to go with the release in your opinion?. I kind of get your problem. Can you however emphasize with an example?. @sagikazarmark This is a harder problem. The problem is on this line. That results in a float. Then, in the next line, $money->multiply is called. Because a floating point is given as multiplier, it is converted to string first. So, Number::fromFloat is called, which on its turn calls sprintf to convert the float to a real number. And sprintf is not aware of big integers.\nSo, this problem has two possible solutions. One: fromFloat should return big integer aware results. Two: we change the calculation that results in a float instead of string.. Three. We add a calculation method to Money in order to use a Calculator for the calculation.. I think the pow calculation can be removed, and replaced by a simple string manipulations. I'll try that first.. Maybe just disable/remove it.. Is there not some setting that only reviews code changes? Instead of the whole package? Personally, I totally not like Yoda, so I would be against it.. @sagikazarmark Can you turn Yoda off? I don't think I can do that. We already demand strict equality. That should be enough.. Merging, since it passes Travis.. For the moment this has no sense. The RFC is - so far as I can tell - pretty much dead. In case the RFC, or a similar one, gets merged this might be reevaluated. Closed for now.. Nice, thanks. Good one, thanks. Yeah, lets do that.. Yeah, only wondering what the new Symfony package is doing in the composer.json. I am not familiar with that package.. We have failing Travis though, because of an each method being used, probably from that Symfony package. Maybe remove that deprecation warning there first. I cannot merge without at least green light from Travis.. Gonna merge this. I tried to upgrade PHPUnit, but that also requires an upgrade of PHPSpec. And the new PHPSpec requires return types. So, that has to become part of Money v4.. I believe we just added the Converter class as generic contract for combining Exchange and Currencies. The latter two were separate concepts before. The Converter creates a simple API for conversion. I don't see a problem with adding an interface, but I also do not see why you want to decorate the converter.\n@ossinkine If you want to cache, what do you want to cache? Currencies or Exchange? You can inject CachedCurrencies or create a CachedExchange. The library is lacking the CachedExchange, it would be an addition to the library to have it.. Closed until there is an explanation that explains the need to interface the converter. I am happy to discuss it.. > Besides, I have outlined the concrete problem and so far no one has proposed a concrete solution.\nWelcome to open source. If you have a concrete problem, you propose the solution yourself. There is even a name for it: Pull Request. Maintainers have no obligation what-so-ever to propose a concrete solution for a specific problem that you seem to have. If you want to have things done, create a PR. And then we can discuss that.. @ossinkine I fail to see the need for the interface, but I also do not see any harm in it. If it makes you - and perhaps other - happy, we could merge it. That said, I am not the only maintainer of the library, and their arguments might lead to the outcome that the PR will not be merged. Nonetheless, the amount of time it takes to create the PR is already much less than the time invested in this discussion.... @sagikazarmark I improved the test and removed the assert as suggested.\nHowever I did not move the 0 check to the calculator. See how we are implementing the divide method: the division by 0 check is in there, and not in the calculator. For the sake of consistency I choose to go for the same implementation in the ratioOf method.. @sagikazarmark Let's drop PHP 5.5 from version 3.1. I have trouble getting a green light on Travis for PHP 7.2 because of PHPUnit 4. That is why I am upgrading to PHPUnit 5.\nUpgrading to PHPUnit 5 means dropping PHP 5.5, which I think is not a problem at all. It has probably dropped below 5% of usage. It is not getting support from PHP anymore. Finally, those users can still use Money 3.0.x which is all they need as legacy projects.. The alternative is allowing failures for PHP 7.2 tests, which I think is far more worse.. I see that the originating problem is #432. But to be honest, I have no time and energy to fix that. PHP 5.5 is EOL / done.. Also updated the readme to clarify our view point towards supporting PHP versions.. Rebased it to latest master.. All tests and functionality is almost exactly the same as for the IntlMoneyFormatter and IntlMoneyParser. I would love to have these features too in 3.1.. Use case: parse values from webforms with localized decimal inputs into Money objects.. @sotsky Do you have GMP or BCMath installed on your system?. Because I believe BCMath and GMP don't return any number with the exponential character e. Only PHP does that. My advise would be to install one of the two extensions. The Money library will automatically do the switch.. @sotsky Which calculation is resulting in an value with exponential character? Because I don't think BCMath will do that.. Ah, that is something we can work with, thanks! I will test and fix it.\n@bendavies Thanks for your work. I am going to have a look at the example above, compare the results between current code and your PR and see what is the best solution to this problem.. Version 3.0.x is not doing that?. @sagikazarmark I can remember having a discussion on topic before... but we should simply not accept a float. What if the conversion rate 1.25 (float) would be '1.25' (string)?. Maybe for now. But any floating point has given us nothing but trouble. If we are moving towards a new version, with strict typing, we should only accepts strings and integers. Maybe we should a fromScalar then, which would accept int, string and float and does the right thing depending on the type.. Is it possible that quote returns a non-float. If so, it will be a problem too. Maybe we should add fromScalar now.\nphp\npublic static function fromScalar($numeric)\n{\n    if (is_float($numeric)) return self::fromFloat($numeric);\n    if (is_string($numeric)) return self::fromString($numeric);\n    if (is_integer($numeric)) return new self($numeric);\n    throw new \\InvalidArgumentException();\n}\n. Or use a switch to reduce the overhead.. Aight, sounds good.. Seems good. I changed the MoneyTest using setlocale() to also use $this->setLocale().. Merged it. Also merged the PR of @bendavies. Will tag 3.1.1 if the Travis lights turn green on the master commits.. Hmm. This would be the ideal situation, and we should could consider going for this in a new major version. But this is never going to land in Money 3.\nIf you want this right now, and I believe you do, we should create an interface that is compatible with the current state of the library. Why not call the interface CurrencyConverter? Then we would not have to change the name of Converter?. In a new major version we then might rename Converter to ExchangeConverter.. Cool.. @sagikazarmark What do you think? I don't think there is any harm in having the converter implementing an interface.. > Second reason is there is no way to test class which use converter because you cannot create a mock for converter.\nThat is a bad reason. You don't mock the Converter, you mock what's injected in them. \nphp\n$converter = new Converter($this->createMock(Currencies::class), $this->createMock(Exchange::class));\nFurthermore, my advice would be to use a mock as a final resort, not as a common test technique.. > Unit test should test my class but not the converter.\nYes, but that does not mean you are not allowed to instantiate other objects.. @sagikazarmark Your position is the same as mine, but why should we object to an interface for the converter?. > But I don't see why using the fixed exchange and calling it integration test is bad.\nIt definitely is not, see it as a fake object.\n\nUltimately, you can also provide your own abstraction over currency conversion (as pointed out in a comment in the linked issue), that is how you can own the entire code.\n\nI second that. Nobody tells you that you are required to use every class in this project.\n\nI asked specifically for reasons to provide alternative implementations...none has been given\nPlease, prove that I'm wrong!\n\n@ossinkine If you can prove him wrong, I will merge, otherwise I close it.. See Converter and Exchange, and corresponding docs.. Also see Money::sum and its discussion. You might want to contribute your opinion there.. Sorry. We don\u2019t take the responsibility for persistency. You might look at previous issues for other people\u2019s solutions. Good luck!. Looks great. What do you think of a static named constructor sum in addition? That would look similar to the code of Ben. It would help my own codebase a lot.. Also, you could reduce the number of getCalculator calls.. Suppose you have a collection/iterable of money objects. You have to pop one and then start adding the others. Could be the amount payable in a shopping cart.\nAlso, what the collection/iterable is empty? Empty cart. The sum is zero. You should be able to supply the currency as second argument to create the zero amount.. @sagikazarmark You are right. Have been thinking what would be best practise after this PR. That would be the following.\nphp\n$sum = (new Money(0, new Currency('EUR')))->add(...$collection);\nSo create a zero amount and then add the collection.. However, how would one create the sum of an iterable? This PR solves sum only for arrays. So the only way to solve it for iterables is to convert the iterable to an array and then add.. Me neither, maybe another solution will be proposed in the future. I think the current solution is alright.. Perfect, great work!. Looks good!. @sagikazarmark I was thinking. We could decide to not make the Registry a static class. And set it as a static property of Money, like this. You would agree that we must avoid static classes. However, I also see that it involves some additional code. What is the best solution here, and why?\n```php\n// create a register\n$registry = new Registry([\n  new BcMathCalculator(),\n  new GmpCalculator(),\n  new PhpCalculator(),\n]);\n// Money class\nfinal class Money {\n  private function getCalculatorRegister() {\n    if (!self::$calculatorRegister) {\n      self::$calculatorRegister = Register::fromDefaultExtensions();\n    }\n    return self::$calculatorRegister;\n  }\n  private function getCalculator() {\n    return self::getCalculatorRegister()->getCalculator();\n  }\n  / @deprecated /\n  public static function registerCalculator($calculator) {\n    self::getCalculatorRegister()->register($calculator);\n  }\n  public static function setCalculatorRegistry($registry) {\n    self::$calculatorRegister = $register;\n  }\n}\n```. Totally agree. In my perception, in version 4 we should use Number everwhere internally. That means only accepting Number or directly do the conversion on every numeric parameter.. This must be done through our iso-currencies package, which uses this xml file as repository for the currencies.. Great idea!. @sagikazarmark Great work here, I like the solution. However, I am still not convinced we should be doing this. It just feels as a bad decision to create classes for the sake of type completion in an IDE. I totally get what the advantages are, but I just feel that we should not make ourselves responsible for IDE usage. Our responsibility should stick to creating an awesome value object.\nA simple alternative could be the following. Create a new repo/package called moneyphp/money-ide. Add a file with the following.\n```php\nnamespace Money;\nfinal class Money {\n/\n * @method static Money AED(string $amount)\n * @method static Money ALL(string $amount)\n * ....\n/\n}\n```\nSo a user then has two Money files, the one from this library and the new one from moneyphp/money-ide. PHPStorm will complain about it (Multiple definitions exist for class Money), but is only a notice (not an error). Furthermore, it will give all the required type completions. Give it a try. Then people that really want it, can use it by requiring the package and our value object stays clean from IDE related features.. I dont know if he likes it, but I am going to mention @Haehnchen in this conversation. He is the one who is responsible for creating the Jetbrains Symfony plugin. Maybe he knows a better method for creating type completion for our dynamic method problem.\np.s. Sorry Daniel if you don't like the @ mention.. > Furthermore, I believe the Money class becomes a bit cleaner without the whole static factory thing, that's why I moved the callstatic to the generated trait as well.\nI agree.\n\nTo sum up: I think this is an acceptable compromise, even makes things a bit cleaner in terms of static hack moved out of money. It makes a huge step forward in DX, which at least at some level should be our goal too.\n\nI don't agree there. I feel our research was not broad enough. There must be more possibilities.. Isn't there something we can do with this: https://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Advanced+Metadata?. I am not rejecting without a viable alternative. I gave one. Since we both agree on the support for the whole static factory thing, especially of the callStatic method, I rather feel more for dropping support for the whole __callStatic than extending it. At least that is a discussion we never had.. I rather add this Money::fromString('EUR1000') and (string)$money; // EUR1000, which also gives convenience and is a similar factory, than we go forward on __callStatic.. And/or something like Money::amount('EUR', 1000);. Then we would be rid of the __callStatic ugliness and the IDE completion.. Aight. Go for it!. Well, I understand that this solution is OK for now and does not bring any possible problems for the future if we want to change something. That said, I\u2019d rather have no responsibility for IDEs and DX at all.. Thank you, for your recent massive contributions to the package!. I would love to have those static methods, for the same reason as we discussed with sum. The sum solution is OK, but as you already notice here, creating zero can difficult. I do think it is the best solution though. It is also compatible with the above example provided by @willemstuursma.\n@sagikazarmark My/our initial conclusion in the sum PR was that an iterable cannot be unpacked. That is incorrect. See argument unpacking via in the PHP doc.\nSo this example works.\n```php\nfunction x() {\n  yield Money::EUR(1);\n  yield Money::EUR(2);\n}\n$list = x();\nMoney::least(...$list); //Money::EUR(1)\n```\nwhich would make the static methods very powerful.. @sagikazarmark Look at the code of @willemstuursma. He added a required first argument as $first_item. I think that is a very nice solution that requires the caller of the method to make sure the iterable has at least one argument. If the caller is not sure the collection contains one element, a zero amount has to be prepended to the call.\n```php\npublic static function least(Money $first_item, Money ...$monies): Money {}\nMoney::least(...$list); // this caller knows really sure there is one argument\nMoney::least(Money::EUR(0), ...$list); // the caller does not know it for sure and adds a zero element\n```\nSee also this example.. So we don't have to check if the iterable is empty or not, that happens outside our scope.. I don't understand that. Do you think the $first_item is nice, or not nice? In my opinion there are three options.\n\nRequire a $first_item as suggest by @willemstuursma.\nOnly the variadic argument and throw an exception if the list is empty.\nSupply a Currency to be used to return zero if the list is empty.. I don't agree, multiple reasons. First the example is wrong, because $prices is not unpacked, but I guess that was because you typed it fast.\n\n\nIf you code in a defensive way, you have to put a zero value there because the iterator might be empty.\n\nNot necessarily. As you can see in this example, PHP 7.0+ throw exceptions (ArgumentCountError and TypeError) when $first_item is not there. You can catch those and handle them. Only in PHP5.6 the result is an error. Or you decide to prepend the zero amount.\n\nIn an earlier comment I think I already explained, that the currency here is probably a leak in your code. At this point you probably shouldn't know about it.\n\nI don't agree. Take the cart example: if it is empty you are very likely to display the amount of zero somewhere. That is a result of a sum. So you must know the currency at that point. Actually, in all my applications using Money this is true. I see it as a domain requirement to know the currency before generating a sum.. @sagikazarmark Shall I prepare the PR for this one? And then continue discussing it there?. PR is there. Maybe you can both have a look.. The ISO 4217 currently only accepted the Mauritanian currency. Can you create a PR with the updated currencies? You can do that in the separate package. Therefore I close it here.. I merged the currencies PR and tagged a new release (3.1.1). Now we should be able to update the currencies here.. >how about return self::sum($first, ...$collection)->divide(func_num_args());\nI tend to reduce the number of method calls, if possible and not decreasing readability. Regarding the test and the exceptions, I updated it. That's much better indeed.\n@sagikazarmark What do you think?. Thanks, but I meant to ask you your opinion on the feature (s). Keep?. Shall we disable those bot posts? It obscures the conversation.. @sagikazarmark I improved the PR by implementing your suggested changes.. @sagikazarmark Could you have another look at this PR? I would like to see this land in master and be tagged in a version.. I think it is pretty easy to come up with a solution. The only question is where to add the method. Rounding to nearest whole unit requires to know the number of subunits. So if we add the method rounded to Money than it might look like this.\nphp\nfunction rounded(int $subunits) {\n  return new Money(Number::roundMoneyValue($this->amount, 0, $subunits));\n}\nMaybe there should be zero's padded to the result of the Number::roundMoneyValue call, but otherwise I guess it should work. Of course, requires some testing.. Maybe @broberts-mrmc is willing to create a PR (with tests) based on my suggested code.. I agree, my proposed name is not ideal. roundToSubunits sounds good. We do not have any aliases, and my suggestion would be to not ever have them. Just pick a name that suits you best, and we will discuss it when the PR is there.. My solution. This will never be part of this package, because it should be defined outside the Money domain.\n```php\n<?php\nnamespace Value;\nuse Money\\Money;\nfinal class VatPercentage\n{\n    /*\n     * @var string\n     /\n    private $percentage;\n/**\n * @param string $percentage\n */\npublic function __construct(string $percentage)\n{\n    if ($percentage !== '' && !is_numeric($percentage)) {\n        throw new \\InvalidArgumentException('Invalid vat percentage');\n    }\n\n    $this->percentage = $percentage;\n}\n\n/**\n * @return bool\n */\npublic function isExempted(): bool\n{\n    return $this->percentage === '';\n}\n\n/**\n * @return bool\n */\npublic function isZero(): bool\n{\n    return $this->percentage === '0';\n}\n\n/**\n * @param VatPercentage $vatPercentage\n * @return bool\n */\npublic function equals(self $vatPercentage): bool\n{\n    return $this->percentage === $vatPercentage->percentage;\n}\n\n/**\n * @param string $value\n * @return bool\n */\npublic function isSameValueAs(string $value): bool\n{\n    return $this->percentage === $value;\n}\n\n/**\n *\n */\npublic function toRatio()\n{\n    if ($this->percentage === '') {\n        throw new \\UnexpectedValueException('Cannot return a ratio for an exempted vat percentage');\n    }\n\n    return $this->percentage / 100;\n}\n\n/**\n * @param Money $amount\n * @return Money\n */\npublic function calculateVatFor(Money $amount)\n{\n    if ($this->percentage === '' || $amount->isZero()) {\n        return new Money(0, $amount->getCurrency());\n    }\n\n    return $amount->multiply($this->percentage / 100, Money::ROUND_HALF_DOWN);\n}\n\n/**\n * @param Money $amount\n * @return Money\n */\npublic function calculateInclusiveAmountFor(Money $amount)\n{\n    return $amount->add($this->calculateVatFor($amount));\n}\n\n/**\n * @param string $decimalSeparator\n * @return bool|string\n */\npublic function format($decimalSeparator = '.'): string\n{\n    if ($this->percentage === '') {\n        return '';\n    }\n\n    $value = rtrim($this->percentage, '0');\n\n    if (isset($value[-1]) && $value[-1] === '.') {\n        return substr($value, 0, -1) . '%';\n    }\n\n    return $value . '%';\n}\n\n/**\n * @return string\n */\npublic function __toString(): string\n{\n    return $this->percentage;\n}\n\n/**\n * @return VatPercentage\n */\npublic static function exempted(): self\n{\n    return new self('');\n}\n\n/**\n * @return VatPercentage\n */\npublic static function zero(): self\n{\n    return new self('0');\n}\n\n}. See the docs.. We are not supporting symbols inside Currencies at all. Only formatting. If you want to use symbols, you can use the IntlFormatter, which in turn uses the intl extension.. @spotman Unless I am mistaken, this PR does not change anything related to Money code or dependencies. Therefore, we did not spend much time on it yet.. This WIP never got anywhere, thanks for the try @VolCh. Hopefully we can manage an upgrade to PHP 7.x soon.. Look at the DecimalFormatter in the docs.. Correct, look at how to decorate classes, or implement the Currencies interface yourself.. Thanks. @mnapoli I believe we have seen this report earlier. I think it is domain specific to whom to allocate the remaining cent. The current behaviour is: allocate to the first one in the list with a ratio above 0. This also means you can sort your list of ratio's to change the one who gets the remainder.. I am not sure we want this. But I am definitely not against it (now). It is something that the library could perfectly handle. My doubt is only how to keep it simple, without being to restrictive.. @sagikazarmark Yes, the alternative would be public function allocate(array $ratios, \\Closure $remainder = null), which would allow the user to implement it's own sorted algorithm.\nphp\n$money->allocate([33, 66], function ($a, $b) { return $b <=> $a });\nThen, the caller has full control. But that might be overkill. If we use your method @sagikazarmark, then a user that wants full control must still sort the ratio list before calling allocate.. p.s. We have more than 2000 stars. Good work!. You're right. And I guess you mean first and largest, because I guess that's what @mnapoli 's intention is.. Replaced by #526.. This is a duplicate of #480 . @gmponos I have some questions before coming to a solution.\n1. What does that API return: a string with lots of fractional numbers or a really exponential floating point?\n2. How is that number represented in PHP: a float or a string? \n3. If it is a float, is it bigger than the constant PHP_FLOAT_MAX (constant available since PHP 7.2)?\nAnd maybe you can try this one in the meanwhile.\nphp\nuse Money\\Number;\n$money = $parser->parse((string)Number::fromNumber($amount), $currency);. Closed in favour of #520.. @mnapoli @sagikazarmark It does seems a better solution than what we had. I think this can be merged. How about you?. Thanks. Not that I am aware of. Usually I have the following standard for libraries with high code coverage: any code that can be removed and still passes tests, should be removed.. Duplicate of #499 . How about a new tag @sagikazarmark? Why shouldn't we just release it?. I will postpone fixing this is issue until a solution is found for moneyphp/iso-currencies#9 (comment).. @sagikazarmark Shall we create the tag then?. We are not Doctrine.. Thanks for the suggestion, I think we will leave it to current setup for now.. Replaced by #526. In that PR conflict is solved and included example of #492. @sagikazarmark @andythedandy Thanks for both your help.. @gmponos Reasonable explanation. I will close this PR in favour of #524.. I think there is a mismatch between your currencies that go through the Money package and the ones that are available in SwapExchange. Can you be a little more precise around the Exception that is thrown?. Closing due to inactivity.. Closed, in favour of #525 .. @gmponos Thanks for your help here and the clear answer.. @rtheunissen Nice work over there with the extension, I like it. I was not aware of it.\n@sagikazarmark I am in favour of merging this PR in the 3.x range. And I also think @rtheunissen is right regarding risks of float usage. We should take care of that in the 4.x releases.. As @sagikazarmark has stated, your best option is to use AggregateCurrencies together with CurrencyList.\nphp\n$currencies = new AggregateCurrencies([\n    new BitcoinCurrencies(),\n    new ISOCurrencies(),\n    new CurrencyList([\n         'CUSTOM_CURRENCY_CODE' => 2,\n    ])\n]);\nInject that into other classes that require Currencies interface in the constructor.. @gmponos While you are correct, you are only partly correct. Someone with an own implementation of Currencies will never get the error. Rather twice than zero.\n@sagikazarmark We also missed this for the Bitcoin parser.\n@gmponos Can you update the PR to include Bitcoin too?. @sagikazarmark Ah yes, you are right, so this is a good solution.. Because of the merge of #540 this has some duplicate (not conflicting) code. Therefore I created #543 which will be merged when the lights are green. Closing this in favour of #543.. Thanks @gmponos for your work!. @gmponos Why not inject a Decimal parser and then delegate the parsing process once you have handled the exponential part? Maybe I should have a closer look, but as it seems to me there is a lot of duplicate code?\n```php\npublic function __construct(Currencies $currencies, DecimalMoneyParser $delegatedParser) {\n   $this->currencies = $currencies;\n   $this->delegatedParser = $delegatedParser;\n}\npublic function parse($money, $forceCurrency = null) {\n   // ....\n  $number = number_format($expo, $subunit, '.', '');\n  return $this->delegatedParser->parse($number, $forceCurrency);\n}. This PR, while not correct in the solution, is pointing at a weak point of the library itself. This is also noticed in #516. We should use strings or an object like Number everywhere to prevent float usage. I am closing this. Discussion should take place in #465.. I think this should throw an InvalidArgumentException because I don't feel this is BC.. Thanks!. I decided to drop this issue. If someone creates an own implementation of Currencies for Bitcoin, with a different subunit, then it can still use the formatter. Therefore I think it is fine to leave it as is.. Also fixes #506 . Thanks everyone involved in fixing this issue.. The fraction argument is how to format the Bitcoin, e.g. display cents or not. It is a different concept than the subunits of the currency.. @sagikazarmark Can I merge this? I removed an argument (the last one) from the constructor. Is that a BC break?. Can you add it to suggest? It is not required.. Why does scrutinizer fail? Otherwise I think this can be merged.. @Freeaqingme Can you add a test for this?. @sagikazarmark Looks good to me. I can also see the utility in this addition. Have great days!. I think this outside Money scope. You will have to care of this tourself. You might want to use https://github.com/moneyphp/currencies and create your own map with numeric code as array key.. We don\u2019t want to move towards a currency repository library. This library solves problems with money calculations. If you need to convert currency numeric <-> letter codes, this should happen in your own code.. You are free to create a PR. Then we can discuss whether or not we want to merge it.. It might be included in the next release feature release (3.3.x), not in the proposed 3.2.1.\n@sagikazarmark What do you think of this feature? Basically the wish is to use numeric codes as Currency, like below.\nphp\n$currencies = new ISOCurrencies();\n$money = new Money(100, new Currency(123));\n$currencies->contains($money->getCurrency()); // also checks against numeric code\nRight @kunicmarko20?\nIf we want to have this feature, should we change the code of ISOCurrencies or should there be a new NumericISOCurrencies class? My feeling is that the latter is a better solution.. How about php7+?. Can you add a failing test as PR? Then I will fix it.. I cannot replicate this with PHP 5.6. @alesak I already created the PR.. @sagikazarmark Current changes to master since last release are only bug fixes. I suggest to release 3.2.1. What do you think?. @sagikazarmark When dividing the a negative amount the outcomes are different. The calculation -500 / 110 results in -4.54545454545455 according to PHP and GMP, whereas BC says it is -4.54545454545454. I think that BC Math is not rounding, but using the scale argument to determine the number of fractional digits.. The solution could be.\n\nOnly add the negative division test to the GMP calculator.\nMake sure the outcomes will be equal (how?). It is not the latest commit to master, but the latest PR (#546) on the gmp_divide branch. I think our badge on the frontpage should be for the the master only.. Cool thanks. @zek Could you include a test for this? One that failed in the situation before your change, and now works with your change.. Thanks, look good to me. @sagikazarmark What do you think?. Thanks @zek!. I created these classes, but I am not using them. It was frequently requested. I think our previous decision was to avoid to become a currency repository. @sagikazarmark What do you think?. I am ok with merging a CryptoCurrencies class (implementing Currencies) PR. This could look similar as the ISOCurrencies class. See also our iso currencies repo. Are you aware of any (pseudo)official source for all crypto currencies? In the iso currencies repo we are using the ISO 4217 Maintenance Agency. If we go for this I would prefer similar methodology: automatic update based on a third party. I don't like the idea that this library also becomes maintenance agency.. I am not a fan personally. This feature will lead to a significant increase in the support we have to give to this library. The dynamics of crypto currencies is huge. I am not willing to maintain that. I can see the value in it for sure. My suggestion would be that someone creates a separate package for this. \n\n@sagikazarmark Do you have an opinion in this matter?. Hi guys, as I really think that this discussion/issue belongs in its own library, I am going to close this issue. This library is not a currency repository, but focuses on the logic side of money related calculations.\nOnce there is a library that organizes everything around bitcoin, we are more than happy to include a link to that library on our readme/frontpage.. Good catch, thanks. I would not agree with this. The phpDocumentor documentation says \"The inline tag {@inheritDoc} is used in a description to import the description of a parent element, even if the child element already has a description.\" So {@inheritdoc} is only relevant to the description. The current Money class also contains inherited docblock with return docs.\n. I don't get why this is necessary, but OK, I will add it.\n. No, we really do not need it. Removed it, and squashed again.\n. Or should I throw an exception here? My feeling is not: a number can have an empty fractional part.\n. Regarding the terminology: I am basing in on this thread on StackExchange.\nUpdate: corrected the link.\n. @pamil Yes, I correct the behaviour as such that it is conform the round function in PHP. Why is that behaviour wrong?\n. Just fixed this.\n. @pamil While I totally agree that it is misleading, I am not sure that this package should move away from that (misleading) behaviour. The PHP behaviour is the one we had in version 1 of this package. It is very well explainable that we follow the PHP behaviour by default. We could introduce new rounding modes: Money::ROUND_HALF_TOWARDS_POSITIVE_INFINITY and Money::ROUND_HALF_TOWARDS_NEGATIVE_INFINITY. We could even make the default behaviour changable.\n@sagikazarmark What do you think?\n. Done. Good one!\n. @sagikazarmark Fully agree: documentation is the keyword. And honestly, I also did not realize the difference. I think many people don't.\nMy vote would not go to NORMAL. I mean, what is normal? But I understand that my own suggestion is also not great. What about these?\nMoney::ROUND_HALF_POSITIVE_INFINITY\nMoney::ROUND_HALF_NEGATIVE_INFINITY\nMoney::ROUND_HALF_UP\nMoney::ROUND_HALF_DOWN\n[removed]\n. Misread your suggestion on keeping the current behaviour. Agree. Let's not change the API. But shall we add the constants? Do we need to add a possibility to change the default behaviour (e.g. Money::changeDefaultRoundingMode).\n. Good question, let's test that.\n. Ok good reasoning. We will leave the current behaviour, add two constants and have no extra responsibility for change default behaviour. Right?\n. This is tested now, the behaviour was correct.\n. Copied from readme. I believe current standards indicate we should use cli: composer require. And then composer its preference for versioning. I'll update both.\n. True, will update.\n. Cool, let's do that then.\n. I think an operand of '1.5' should be allowed.\n. Because $this->formatter is an IntlFormatter.\n. Disagree. I think we should put it upfront. Clear for anybody. How many times do people read docs? It does not weigh up to the times they read a readme.\n. Has been removed now.\n. Also done. Good idea. Included an example.\n. It should be either null (optional) or required in the constructor. We could also make a named constructor for this. So then you have two options.\nphp\n$formatter = new IntlMoneyFormatter(new \\NumberFormatter());\n// or\n$formatter = IntlMoneyFormatter::withSubunits(new \\NumberFormatter(), 2);\nThe advantage is you can eliminate null from the constructor, which is a good thing because you want to avoid null as much as you can. And it is more explicit.\n. Will do.\n. It is good to have available, but why should it be required? There was nothing wrong with the old behaviour. Only it does not match everyone's needs. This fixes that.\n. @sagikazarmark The case: \"we are not able to control fraction digits anymore, but only subunits\".\nLook at the last two commits I added, specifically testNoFractionDigitsNoSubunitsNoPattern. The default behaviour that intl gives us is fine for the majority of the cases. The case that @bramstroker has added is the case when you want to display a different amount of fractions than the number of subunits that a currency has.\nThat is what this PR fixes. You now have control over both.\n. Alright, what do you think? Merge it in?\n. Exactly my thoughts, I merged it because I was happy on the API. And actually, I thought this was pretty clever ;).\n. @sagikazarmark I was doing that, was fighting with it actually because I got errors that I was not able to fix quickly. Decided to leave it. My bad.\n. @sandrokeil Could you clarify a bit more? Don't get your point. It's the argument that is wrong here, right? It's not a Money exception.\n. Change in DecimalMoneyFormatter.\n. Agree here.\n. Done.\n. Done.. Changed into not accepted. I think that is better,. Done.. We are supporting .5 in the current version due to our current number validation. With .5 the integer part is empty, str_split results in an empty array, so count($invalid) === 0 becomes true. Hence, we support .5.\nSo, because I do not want BC break, I continue supporting this. But then we have to be consequent. This means .5 and -.5 are now supported. Hence, - is a valid integer part and should result in -0. We might want to undo this in release where we do BC again.. We should decide now what to do with it. Afterwards, it becomes a feature (or not). I have nothing against, but I also see no reason why to support it.. Nope, then we need a function call (strlen). This should make it faster.. Agreed, was left when I had support for the plugs sign. It is removed now.. Because you requested that feature I believe, I am fine with not supporting it.. Before, if you pass 3.000, then the private property 'amount' would be set to '3.000'. If you then do equals on 'new Money (3, new Currency())' it would fail. Afterwards, it will not. It is a good solution.. And I dont see a problem with while.. Dont recall that.. Nope. BC math returns like this, depending on the scale variable.. Actually I do. It's because of the scale variable with BC math. Then trailing zero's are added. So we are not using assertSame in calculator tests.. Updated.. Updated. Dropped support for leading zero's. Let's not worry too much on this. Getting started should help how to construct a Money object. I agree - it is the edge cases. But let's accept it now. If we want to move it to another section later, we can always do that.. It should be safe. Why wouldn't it?. Sharp!. Please do use global classes, rather use \\stdClass.. use $this->assertEquals. use $this->setExpectedException.. Not at all, sharp in the meaning of thank you for your good (sharp) remark.. @bendavies Yes, if we start doing this, we should update all our tests. I rather have consistency indeed.. My instinct tells me that is a bad idea. I cannot recall the last time I used trigger_error. I rather use the docblock @deprecated, which could give visual feedback to developers if their IDE supports it.. The zero case, good thinking, I will apply a test case and implementation for that one.\nRegarding $six->ratioOf($three), that is already there since ratioOf is a method of Money, right? It does not matter whether we call ratioOf on $six or $three.. Thanks for your feedback. Updated the PR.. What's the point of this and not only ^7.0?. I would not use elseif here. But rather only a new if statement, or maybe, even a switch statement.\nphp\nswitch (gettype($number)) {\n  case 'integer':\n   ...\n}\nThe above saves a one or more function calls.. Rather would say you want something like Register::phpOnly().. I would remove the suffix Calculator.. I would remove the suffix Calculator.. I would remove the suffix Calculator.. I would remove the suffix Calculator.. I would remove the suffix Calculator.. I would remove the suffix Calculator.. If on a new line.. ",
    "TNAJanssen": "What is the status of this issue?\n. ",
    "bmeynell": "\ud83d\udc4d Agree this is a critical feature and a must-have when requiring handling of fractions of lowest denominations (e.g., \"fraction of cents\"). Comes up a lot in computing averages, applying discounts, and even simple addition of multiple amounts that are in \"fractions of cents\".. > I was going to write a massive chunk here about my implementation but really it doesn't matter.\nWhat's the use case?\n. I had expected this functionality as well in this library. The formula to do a reverse conversion is simple, but would be nice to have as part of this library and unit tested.\n. @sagikazarmark - I've found Number to be a nifty little utility for representing a Decimal - somewhere between the \"numeric\" PHP primitives and a full-fledged Money object.. @Yamakasi - 16333.17 is not a large amount -- in the grand scheme of things.\nWhat version are you using? In my composer version (^3.0) your example with throw an InvalidArgumentException('Amount must be an integer(ish) value').\nQuick Test 1:\nphp\n$amount = '16333.17';\nvar_dump(filter_var($amount, FILTER_VALIDATE_INT)); // bool(false)\n$number = Number::fromString($amount);\nvar_dump($number->isInteger()); // bool(false)\nTry this instead (note, no decimal):\nphp\n$money = new Money('1633317', new Currency('EUR'));\nQuick Test 2:\nphp\n$amount = '1633317';\nvar_dump(filter_var($amount, FILTER_VALIDATE_INT)); // int(1633317)\n$number = Money\\Number::fromString($amount);\nvar_dump($number->isInteger()); // bool(true)\n... If you still have issues after attempting what's above then please reply with as much information and surrounding context as possible. For example, saying \"it fails\" is useless for people who want to help, but an actual exception, fatal error, stacktrace, etc., etc., goes a long way to getting an answer and solution expediently.. @Yamakasi - There's also very good documentation at http://moneyphp.org/en/latest/ if you haven't come across it. Below is a small screenshot from http://moneyphp.org/en/latest/getting-started.html which looks related to what you're attempting to do.\n\n. @Yamakasi - The documentation (and screenshot above) states that trailing .00 will resolve as valid, but nothing else will. It does seem odd, but I'm sure there's reason and discussion behind that behavior, I simply don't know what it is. Glad your code is working better now!. > What is best to store the money in a Database\nThere is much active discussion about this here (search the repo) and overall -- as well as how to integrate with an ORM. Personally, I lean toward storing the smallest possible denomination (e.g., \"cents\") in one column and the ISO currency code in a tandem column.. @Yamakasi - Please close this issue if you're satisfied it's been resolved. TY!. @Yamakasi - I am also interested in this question, in a general sense. I'll defer answering your question to others and/or the project maintainers. The impression I get from this project is it follows the UNIX philosophy of \"do one thing and do it well\", which in this case, is operations on money by following Fowler's pattern on the subject.\nThat said, extension libraries (separate GH project(s)) that use this project as a required dependency, would be AWESOME. For example, in your case, a library that performs financial calculations. Something like https://github.com/markrogoyski/math-php#finance but utilizes Money objects.. @dzona - I'm curious about this too - did you come to any conclusions? 0 is clearly hard-coded for add() and subtract() in lieu of $this->scale:\nAdd:\nhttps://github.com/moneyphp/money/blob/8655b0f62763acb893bad53be35323af25ad557c/src/Calculator/BcMathCalculator.php#L46-L49\nSubtract:\nhttps://github.com/moneyphp/money/blob/8655b0f62763acb893bad53be35323af25ad557c/src/Calculator/BcMathCalculator.php#L59-L62\n\ud83e\udd14. What is the failure message in your test case?\n\nHas anyone any suggestions how to get this kind of use-case to work with current library?\n\nMy guess: It's just math and nothing to do with this library. Once you round, the value you have is completely new -- even for the same currency. If you need inverse function then your best bet is likely to store both the integer and fractional part that make up the decimal as a ratio and use that ratio to support the inverse function. See https://ren.zone/articles/safe-money for storing as a rational number.. ",
    "marijn": "If and when you merge this, make sure to register the package on packagist.\nP.S. Thanks for making this library, it's much appreciated :smile:\n. I mostly opened a PR to have a place to discuss this with you :smile:\nMy suggestion:\n1. Tag a release now (e.g. 1.1.0)\n2. Move the doctrine code into a separate repository\n3. Create a repository for the Symfony bundle that requires both this repository and the dbal type. \n. Code has been moved to pink-tie/money-bundle\n. Hey @mathiasverraes, sorry for the rebase hell :blush:\nIf you could merge #14 and this PR than all should be fine :smile:\n. Just to be clear, #14 should be merged before this one. \n. Maybe it would be nicer to create a seperate Object called MoneyFormatter (or a better name) which would be responsible for formatting the Money object for screen rendering. It could utilize some of the functionality available in ext-intl.\nAll in all I'm not really in favor of weighing down the Money class with a lot more methods...\n. That is why I was suggesting Intl:-)\n. I think we need to add support for all currencies. However, I wonder if keeping a list like this is really the way to go... \n. Because you shouldn't use exceptions for flow control. You want to assert in a few methods that the object is not entering an invalid state. For example: you don't want to add to amounts with different currencies. However, you also want to provide the client code with the option to test if the objects are of the same currency, hence the isSameCurrency method. \n. :-1:\n. I hope I didn't sound to grumpy. It is a great start of a monday to see Pull Requests come in :smile: even when it may not be merged, discussing it is always a good thing. \n. Sorry, I was misreading this on my iPhone. The reason why you get a new object is because value objects (like Money) should be immutable. You best read up on immutable in regards to value objects.\n. You assume that the user is in the same region as the machine\u2026?\n. Would you mind explaining why? Money is a Value Object. It shouldn't have a separate interface because of it. \n. As far as I'm concerned :+1: \n. Why not go the extra mile and make it an InvalidCurrencyPairException?\n. Even though this is an extra dependency it does make sense. This way the project is far more forward compatible. \n. > The currency class should ony represent a (any) currency and never know anythin about \"known\" currencies.\n\nAgreed.\nWhat if I will use it for my own currencies (or for Facebook coins and so on)?\nI suggest a currency factory.\nMakes sense.\n. What about adding an equals method to Currency as well? You could utilize that in this method. \n. Then I would suggest to utilize it :smile:\n. I think what @mathiasverraes is trying to say is that it doesn't make sense to have multiple implementations of Money. \n. Still: thanks for opening a PR:)\n. Would you mind sharing your use-case?\n. I would suggest to make a MoneyFormatter class in you project. \nIf you need to persist the object you can use the MoneyType to store money objects as fields with the doctrine ORM. \nDoes that help you a bit? \n. I think it would be reasonable to have __toString render the ISO representation. \n. :+1: \n. I've not been a fan of getName but getCode is not a lot better in my opinion. How about getSymbol? \n. Would you mind describing each data provider shortly in the key so that it becomes easier to understand later on what kind of data set it contains? Think along the lines of Equal currency pairs EUR-GBP.\n. Why not fromString? Seems more aligned with toString.\n. \n",
    "travisbot": "This pull request fails (merged 3a6db007 into 745babe3).\n. This pull request fails (merged 43a2bcfd into 745babe3).\n. This pull request fails (merged 6b675578 into 745babe3).\n. This pull request passes (merged 46cdbf61 into 745babe3).\n. This pull request passes (merged 46cdbf61 into 745babe3).\n. This pull request fails (merged a2b89fe9 into 745babe3).\n. This pull request passes (merged 0c03bc8a into 745babe3).\n. This pull request passes (merged eb44ba9e into 745babe3).\n. This pull request passes (merged 2fad1b1b into 745babe3).\n. This pull request passes (merged f985a14a into 745babe3).\n. This pull request passes (merged 40ee2fce into 745babe3).\n. This pull request passes (merged 8b21b7d8 into 745babe3).\n. ",
    "diegosouza": "Late reply but I'm here to say I really agree with you two.\nOnly some time after that changes I took a look at intl. It's strange an extension to handle basic stuff... but in the PHP world is like that.\nThe locale-dependent is really the best/right approach.\n. ",
    "faridmovsumov": "Thank you for info\n. When I read method name \"add\" I expect this method only adds moneys. It doesn't require to return Money object\n. php\npublic function add(Money $money){\n    if ($this->isSameCurrency( $money )) {\n        $this->amount += $money->amount;\n    } else {\n        throw new InvalidArgumentException( \"You can't add money with different currencies\" );\n    }\n}\n. Thank you for information. \n. ",
    "marcospassos": "Hello Mathias,\nFirst fo all, thanks so much for your comments. You bring up some really good points.\nI agree that product should be constructed with valid required values, but it's not possible using Symfony's Form Component, so I've to set using the setters.\nAbout the default currency, some implementations (like Python) allows defining a default currency, but I agree you suggestion sounds better, but highly coupled. About the context, in my specific case I need allow just one currency per tenant (configured at setup time).\n. @sascha-tasche I disagree. In multitenant applications you need to set the default currency according with user shop configuration. So, brazilians for example, would like to set Reais (R$) as default currency. So, it must be not static.\n. IMHO, zero should not have a currency. Operations like subtraction and addition should absorb the currency of non-zero number.\n``` php\n$this->assertEquals(\n    Money::zero(),\n    Money::zero()\n);\n$this->assertEquals(\n    Money::USD(5)->add(Money::zero()),\n    Money::USD(5)\n);\n// This is very important\n$this->assertEquals(\n    Money::zero()->add(Money::USD(5)),\n    Money::USD(5)\n);\n```\n. Exactly, another good example:\nphp\nclass Product {\n   protected $price; \n   public function __construct() {\n         $this->price = new Money::zero();\n    }\n    // (...)\n}\n. IMHO this bundle asks for a Bank class. A Bank is like a money factory that knows which is the application base currency and is able to exchange money through currencies.\n. Exactly. IMHO Money::zero() is a wildcard, but should be possible enforce my desirable currency.\n. ",
    "asm89": "I like the idea of @marcospassos. It allows for code like:\n``` php\n<?php\n$total = Money::zero();\nforeach ($products as $product) {\n    $total = $total->add($product->getPrice());\n}\n```\n. +1 :)\nOp 9 apr. 2013 00:40 schreef \"Marcos Passos\" notifications@github.com het\nvolgende:\n\nExactly, so I can just:\nclass Product {\n   protected $price;\n   public function __construct() {\n         $this->price = new Money::zero();\n    }}\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mathiasverraes/money/pull/21#issuecomment-16083662\n.\n. @mathiasverraes Commented. Let me know what you think. :)\n. ping @mathiasverraes  :)\n. ping @mathiasverraes We use your library in our production application, it would be nice if you could add this feature and work to a stable release. Happy to help! We currenctly rely on dev-master which I'd rather do not.\n. ping @mathiasverraes :)\n. ping @mathiasverraes \n. ping @mathiasverraes \n. Cool. We'll look into extracting this code and contributing it then. :) (cc @ebroekmeulen)\n. do you follow PSR* for CS? I see a mix of if() and if ()\n. this means you can't have 0 of a currency? Are we sure that's appropriate? Maybe you want to enforce EUR. I'd say you can have:\n\nMoney::EUR(0)\nMoney::zero()\n. Can currency really be null? It can be null in the constructor parameters, but it's currently always set.\n. Maybe pickCurrency should be added on Currency? Currency#pick(Currency $other);. NullCurrency will then always return the other, while Currency will return itself. I think that's more clean than adding instanceof here.\n. Should something like this be implementing in Currency? If you have two Currency objects and one of them is NullCurrency should they always return true?\ne.g.\nNullCurrency#equals(Currency) # true, see code\nCurrency#equals(Currency)     # undefined as of now (false because of the $name)\n. ",
    "ludofleury": "What is the use case of a Money Zero without currency ?\nTo me, Money is always defined by a currency and a value, in short:\nMoney::USD(0) equals Money::EUR(0);\nMoney::EUR(0) not equals 0;\n. ",
    "thewilkybarkid": "That does sound like a better approach, but this PR is only changing the data source.\n. Why?\n. I said I agreed with that, but this PR isn't addressing that due to it beginning a relatively large architecture change. My question was directed at why changing the data source to a well-maintained external library is a bad idea (which you haven't stated).\n. If #92 is accepted, that this should be expanded to generate the list.\n. There are getters for all three: getName = \"Euro\", getCode = \"EUR\", getSymbol = \"\u20ac\".\n. Buzz throws an exception at this point. Anything other than a valid JSON response will cause an exception in loadJson(). Of course if they return a JSON response with some other content then... don't commit the change. :)\n. Not really (and I didn't put much thought into it). Just there to separate things out a bit.\n. Well, it's only something that a maintainer would run, so I felt it was clear enough.\n. Sorted (complete with out-of-date year :wink:)\n. ",
    "makasim": "-1, It brings too much for such a simple check. Even when there are discussion about removing that check at all.\n. you are right, sorry for bothering. \n. +1 on the interface and different impl\n. ",
    "texdc": ":-1:   The Symfony Intl component is not the only intl component available.  Don't tie this to any particular framework.  Use the MoneyBundle instead.\n. @pamil thanks, will do.\n. @marijn I agree.  It was an oversight and has been corrected.\n. I thought about doing that, but then considered it redundant.  I'll add them if others request it.\n. ",
    "h4cc": "I need to mention, that the symfony/intl component needs the intl library, which may not be fully available on all systems.\n. ",
    "pamil": "ping @mathiasverraes \n. Can you add test with shuffled currencies, but right ratio? It will only test correctness of currencies.\n. ping @mathiasverraes :)\n. @marijn There is equals method in Currency - here.\nEdit: I have just seen it and it appears to be invalid. It tries to access private property name from $other. It needs to be fixed, I'll make pull request for it.\n. I made a mistake, equals method in Currency isn't invalid. It's really weird, but it's PHP behaviour -.-\nExample 3 from PHP documentation\n\nObjects of the same type will have access to each others private and protected members even though they are not the same instances. This is because the implementation specific details are already known when inside those objects.\n\nSo we only have to utilize it :)\n. @sagikazarmark it takes the HALF_UP and HALF_DOWN modes into account only if the fraction is exactly 0.5, nothing more, nothing less.\nBy the way, PHP's round() behaves incorrectly for these modes, as HALF_UP rounds away from zero instead of towards the positive infinity, the opposite for HALF_DOWN.\n. @frederikbosch naming sounds good, some documentation for these rounding modes and it'll be all right :tada:\n. @sagikazarmark totally forgot about this PR, here it comes :)\n. Anyway, we should stick to either subunit or subUnit :) The first one looks better for me.\n. Negative amounts are all right, but mixed sign ratios surely shouldn't be allowed - anyway, all of the allocated money should have the same sign. Negative ratios aren't as bad as mixed ones, but IMO it's the feature we don't need just for clarity.\n. \ud83d\udc4d  for Currency objects.\n. The real question is: why not? :)\n. Almost all specs & tests in Sylius are final and we haven't got any issues with it yet.\n. I guess speaking with the current owner of money/money may be worth a try :)\n. No, I've fixed it and sent another commit.\n. In fact, rounding half up should result in -8328.5 moved towards positive infinity which results in -8328. That's the way PHP behaves too, but with introducing our custom constraints, we can fix that issue and provide correct implementations (I did something like that some time ago in Rounder).\n. What if I create a Number('42.00'), will it return 00? IMHO it should return the same value for both 42 and 42.00.\n. @frederikbosch the naming is misleading, rounding half up means towards the positive infinity, rounding half down - towards negative infinity. However, PHP (and Java) implements the first one as away from zero and the second as towards zero. \nhttps://en.wikipedia.org/wiki/Rounding#Round_half_up may be helpful\n. We can just do return rtrim($fractionalPart, '0') here, so it will be shorter and will also make the number 42.500 return the same fractional part as 42.5.\n. Why not $this->formatter->parse($money) instead?\n. And it also has NumberFormatter::parse.\n. Since we pass null as currency, it seems like a better choice.\n. Oh, I see, standard PHP library is so weird.\n. Is it really needed? It's impossible to install this package with florianv/swap<3.0.\n. If it's SwapExchange that uses Swap, shouldn't we make ExchangerExchange that uses ExchangeRateProvider?\n. Anyway, what about just not accepting ExchangeRateProvider here, it seems easy to make Swap instance out of it and doing that will reduce complexity.\n. $exchange -> $swap?\n. Haven't noticed it's in require-dev, so in fact it is possible to install it with lower Swap version, but as you said, it's optional dependency so there is no sense to restrict it.\n. The exceptions are compared by classes and then by their properties, we can use UnresolvableCurrencyPairException::class instead of $e with the same outcome.\n. All other specs are final.\n. $exception?\n. $inversedException?\n. What is the purpose of this file? Shouldn't it be gitignored?\n. Yes, there are two exceptions, so being more verbose would make it a little bit cleaner (at least for me).\n. I think that's the correct behaviour too, but this spec does not assert it.\nThe following code:\n``` php\n$exchange->quote($baseCurrency, $counterCurrency)->willThrow(UnresolvableCurrencyPairException::createFromCurrencies($baseCurrency, $counterCurrency));\n$exchange->quote($counterCurrency, $baseCurrency)->willThrow(UnresolvableCurrencyPairException::createFromCurrencies($counterCurrency, $baseCurrency));\n$this->shouldThrow(UnresolvableCurrencyPairException::createFromCurrencies($baseCurrency, $counterCurrency))->duringQuote($baseCurrency, $counterCurrency);\n```\nShould assert it (though I would double-check it by trying to make this spec failing by expecting the second exception).\n. It's pretty obvious that UnresolvableCurrencyPairException thrown during quote($baseCurrency, $counterCurrency) will have the same base / counter currencies. We can think of an exception as a Value Object.\nThis way we can assert that the first exception is rethrown, the current spec implementation does not assert it. \n. That's the implementation of shouldThrow matcher in PhpSpec. If you take a look at ThrowMatcher::verifyPositive() you can see that the exceptions aren't compared by identity, but by their classes ($exceptionThrown instanceof $exception) and then by their properites (excluding file, line, string, trace and previous).\nThe exception $e is new UnresolvableCurrencyPairException().\nThe exception created by willThrow(UnresolvableCurrencyPairException::class) is handled by ThrowPromise and results in new UnresolvableCurrencyPairException() too.\nThey are equal in terms of ThrowMatcher as their message, code, baseCurrency and counterCurrency properties are equal.\nTo sum it up, the spec will still pass even if the second exception was rethrown.\n. You're right, the exception creation might not belong here, but without it, it's not possible to assert that the first exception is rethrown but not the second one.\nAnyway, I think we got too deep in this problem and the real solution here is to create a brand new exception in that case, which will explicitly say that it couldn't resolve both (base currency / counter currency) pair and (counter currency / base currency) pair.\n. ",
    "toopay": "\nCould you elaborate why adding interfaces would give you a better guarantee?\n\nI think interface will guarantee that all MoneyInterface implementor (in these case, Money class) will always have a set of API that defined in Money class before these refactor (so do with Currency and CurrencyPair class). As simple as that :)\n\nis there any reason why you would want a different implementation of $money->add() \n\nFor now, i may not think different implementation of add, but since now it accept MoneyInterface in the future it could be used to calculate different currency (for instance, if we add another api to convert it?).\nBut for sure, i now can have something like :\n``` php\n<?php\nnamespace Acme;\nuse Money\\Money;\nuse Money\\Currency;\nuse Money\\Contracts\\MoneyInterface;\nuse Money\\Contracts\\CurrencyInterface;\nclass USD extends Money implements MoneyInterface\n{\n    const CURRENCY = 'USD';\n/**\n * @{inheritDoc}\n */\npublic function __construct($amount, CurrencyInterface $currency = null)\n{\n    parent::__construct($amount, new Currency(self::CURRENCY));\n}\n\n}\n```\nThis can make some difference, if i fluently uses it :\nphp\n// this more shorter and understandable\n$fiver = new USD(500);\n// instead\n$fiver = new Money(500, new Currency('USD'));\nAt the end, since you stated \"at this point\", i'm sure you're gonna need these at some point :)\n. @marijn The only problem is i will always unsure that the implementation will be exists in the first place. Is there any guarantee that add will be available to be used, unless the Money class have either abstract or interface that underlying it? Other value object like DateTime or even ArrayObject has its contracts, not to be mean that it allow for different implementation (even people will always could do that), but to guarantee for its API to be exists and available to be used.\n. > If interfaces were to be introduced it makes more sense to submit them interface as a fig standard like the psr3 logger interface.\nThat would be great. But i doubt we could have it at anytime soon.\n. > Interfaces give you no guarantee that the interface doesn't change\n@mathiasverraes I can argue that knowing our implementation not longer valid (when the interface changed) is faster and more cheap to fix, rather than scanning changelog or revision history to know why some api not longer available.\n\nAgreed on semantic versioning. That has been a bit of an issue in the past, I marked it 1.0 and then did a bunch of changes. I want to to move to a 2.0 release and be very strict about breaking changes.\n\nOff course, i still can live with that. But compared to other value object like DateTime or ArrayObject that have its blueprint/interface, do you really think intoduce interface isn't a pursuable notion?\n. Since this completing code-coverage to 100%, it can be used to verify #37 \n. ",
    "philippe-levan": "Thanks for the merge and the congratulation :-)\n. ",
    "CMCDragonkai": "Thanks @mathiasverraes based on googling for joda-money I found this class: https://github.com/ikr/money-math-php\n. ",
    "keiosweb": "announcing Keios/MoneyRight - bcmath based money object heavily based on your work @mathiasverraes, we were using your library, so MoneyRight has API matching 1.2.1 release and can work as drop-in replacement for projects depending on GAAP 4 decimal points precision.\n. ",
    "niepi": "This is also a problem when you use allocate with floats and you have results that have fractions of cents. Those then are cut off and will lead to errors. I don't think this is technically a bug, but I was not aware of this.\n$discountValue = $discountValue / 100;\n            $remainingValue = 100 - $discountValue;\n            list($discount, $remaining) = $money->allocate([$discountValue, $remainingValue]);\n            $money = $money->subtract($discount);\n$69 will be $63,82 instead of $63,825\n. ",
    "fedeisas": "The rounding should be performed upon instantiation or formatting of the Money instances?\n. I think it's because when you can Money::convert it rounds the value to cents. Maybe rounding should be done upon formatting?\n. ",
    "samvaughton": "Yeah I would appreciate this as well. I did it myself recently, was a lot easier than expected!\n. ",
    "anthonysterling": "How are you thinking of addressing this Mathias?\n. ",
    "davidkalosi": "I am using this. I ended up creating a MoneyBundle tailored to the needs of that specific project.\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<doctrine-mapping xmlns=\"http://doctrine-project.org/schemas/orm/doctrine-mapping\"\n                  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                  xsi:schemaLocation=\"http://doctrine-project.org/schemas/orm/doctrine-mapping\n                          http://www.doctrine-project.org/schemas/orm/doctrine-mapping.xsd\">\n  <embeddable name=\"Money\\Money\">\n    <field name=\"amount\" type=\"integer\"/>\n    <field name=\"currency\" type=\"currency\" length=\"3\"/>\n  </embeddable>\n</doctrine-mapping>\n. @sagikazarmark - it is an embeddable thus a value object. not an entity. check the mapping file again. \n. could be anything, I can change it to call the stringToUnits method. and this is such a minor change that it can be merged from the master as well. and I will not use the master brunch in the future.\n. Here it is since this somehow faded ... https://github.com/mathiasverraes/money/pull/92\n. can you please elaborate on this ? alter all they are just doc blocks so I really do not see a reason. and again they could be even auto generated in the build process by iterating over the list of known currencies\n. the only side effect is that you won't get IDE hints for them. ISO currencies are used mostly anyway and they seldom change.\n. never mind. I would at least expect that the maintainers of the library to have aligned opinions.\nsee https://github.com/mathiasverraes/money/issues/70\n. Your call, you can reject this PR. I am not using this library anymore due to numerous other reasons (like fractions of cents etc)\n. ",
    "lwojciechowski": "I'm using Money in the Symfony bundle and I'd like to extend it to add project specific methods for formatting and money statistics. I believe my needs are to specific to make them as pull request. Also I have need to add some annotations to some of the fields for serialization.\n. Thanks for the feedback. I'll look again into my project then.\n. @mathiasverraes as deadlines come close I chose the shortcut. \nThanks you all for constructive feedback.\n. ",
    "codepilotde": "Let's say for example a getDecimalAmount method?\n. My usecase ist the support of legacy code which works (sorry for that) with decimal money and I don't want to place it somewhere else as in My\\Money class. As it is responsible for handling money things the correct way. \nthe second use case is. Money is a lib, as i don't know how long you will support it. If it's extendable it will not have to wait for your updates and i can let your code untouche but fix things earlier.\n. @mathiasverraes from the point of a lib provider your right.\n. ",
    "khasinski": "+1\n. ",
    "lunika": "the same example in a short way : \n```\nuse Money\\Money;\n/* @var \\Money\\Money $start /\n$start = Money::EUR(399);\n/* @var \\Money\\Money $ht price without tax /\n$ht = $start->divide(1.2);\n/* @var \\Money\\Money $ttc price with tax /\n$ttc = $ht->multiply(1.2);\nvar_dump($ttc->equals($start));\n```\n. ",
    "jrdnrc": "Oh wow I completely forgot about this! Sorry >.<\n. ",
    "sovaalexandr": "Also came to suggest same library instead of using currencies.php\n. Prefer option 1 but already had some gotcha. Doctrine embeddable don't fallow value semantics. Money object can be changed from outside if it's an embeddable. Consider case:\nphp\n$amount = $balance->getAmount();\n$report->withAmount($amount);\n$entityManager->flush($report);\n// Some time later\n$entityManager->refresh($balance) // Here report could be also modified, if somebody changed balance amount (Money).\n$entityManager->flush(); // Here modified report will be persisted with overwrite of previous data.\nAnd the workaround is like:\nphp\npublic function withAmount(Money $amount) {\n    $this->amount = clone $amount;\n}. ",
    "antonienko": "Based on this issue, I've created this helper, that maybe somebody can find useful.\n. ",
    "wpillar": "@camspiers hmm, annoying but a fair point. Guess I'll have to wrap it. Thanks for pointing me in the right direction.\n. ",
    "fmasa": "My fingers were faster than mind. Docs made it clear. Sorry for my stupidity :)\n. ",
    "teohhanhui": "Now that Money::getAmount returns a string, we can just do\nphp\nsubstr_replace($money->getAmount(), '.', '-2', 0)\nto obtain the actual amount as string (say, perhaps you want to store the value as \"decimal\"/\"numeric\" type in the database).\n. Shouldn't we add this as a convenience method?\n. There's duplicated code, because it's just IntlMoneyFormatter without the last step.\n. DecimalMoneyFormatter has no dependency on the intl component. Can't say the same about IntlMoneyFormatter...\n. It will throw exception. I'll add the test for that.\n. Differences from StringToUnitsParser:\n1. No plus sign allowed.\n2. Digits (before the decimal point) is compulsory.\n3. Comma is not allowed as the decimal separator. Only the dot (.) is allowed.\n4. Also fixed a bug where trailing dot (e.g. 0., 1., 1234.) was considered valid.\nThe guiding principle for me is to eliminate all ambiguities. There is no longer the question of whether this alternate format or that shorthand format is supported, because there is only one simple, standard format. And it's the same format as DecimalMoneyFormatter, so it's idempotent in that sense.\nWhy remove StringToUnitsParser? Because it is redundant and only adds confusion as to which parser to use. If the user needs more control, it's possible to use IntlMoneyParser by providing a \\NumberFormatter which uses a custom pattern. Or implement a custom parser.\n. Any reference that it might cause inconsistencies?\n. Found it: https://github.com/travis-ci/travis-ci/issues/4579\n. https://github.com/travis-ci/travis-ci/issues/4579#issuecomment-138548147\n\nThe repo subfolder in the cache contains metadata downloaded from Packagist (and other repos you may have registered in the project), and these would probably have changed for each build (the main files giving access to others are updated every few minutes because of the frequency of changes in packages). I'm not sure the time won thanks to the caching of some of the metadata files (the ones for packages not updated since your previous Travis build) would actually outweight the time spent storing the Travis cache again for each build.\n. \n",
    "sergeyklay": "Hi!\n@tylercrompton Can you please add JsonSerializable interface class for passing php-5.3 tests?\nphp\n<?php\ninterface JsonSerializable\n{\n    public function jsonSerialize();\n}\n. To pass the php-5.3 test is sufficient to add the \\JsonSerializable stub and using spl_autoload_register function in phpunit bootstrap file:\nphp\nif (version_compare(phpversion(), '5.3.0', '<=')) {\n...\n}\n. :+1: \n. Good catch! :+1: \n. also use visibility here, like public function jsonSerialize()  to follow the general coding style and PSR standard\n. ",
    "lbialy": "Can do in a while, but I have something even nicer for you, I will publish it from company account today, Keios.\n. ",
    "estheban": "Yes, sorry automatic script.\n. Docblocks removed and thanks\n. Updated\n. squashed.\nAlso valid only for the master branch.\n@sagikazarmark added the logic in nextrelease with commit https://github.com/mathiasverraes/money/commit/4d8294c1591bbaaf52afa32d01b16f8006d10eec\n. ",
    "fabiocarneiro": "@mathiasverraes ping :dancers: \n. @mathiasverraes I've been watching your discussion with @danizord in twitter about this PR (here), and I totally agree with your point that you should define the application currencies somewhere instead of using the ones provided by Money. But...\nThe use case we're working on is a module that integrates Money with doctrine and zf2, and we would like to provide in this case the list of all available currencies in Money. So if this module is working directly with Money, it makes sense to it know the money currency limitations/possibilities. It doesn't necessarily means they'll be all used in the application, and i'm not sure this limitation is up to you to force. Having a feature doesn't mean it'll be even used. The application developer will know he doesn't accept all those currencies and will probably prefer to have a list of supported ones instead of having a full list of useless things.\nAlthough there is a method in nextrelease that makes available to ask if some currency is available or not, there is no method in the current one that does that and that is the one we're using right now. I propose you to merge this and release 1.3. I still think this could be included in both, but maybe it could be removed for the next one.\nThat said, i'll say again that it would be nice to have this list available so we could integrate with the money form element in our module and it would be a fallback in case the developer doesn't specify the currency list.\n. @sagikazarmark That is still valid for the current release.\n. ",
    "danizord": "@sagikazarmark many thanks! Can you tag a release for it?\n. Raising dependency versions is not BC break AFAIK. We can always change PHP version if we feel that we need some PHP 5.5 feature without breaking BC.\n. Yeah but the point is that you can do it in minor versions. So I think we could release first 3.0 version supporting 5.4 then raising PHP version in a next version?\n. No problem for me :+1: \n. Or... let's make it ^7.0 and take advantage of awesome scalar and return type hints :)\n. ",
    "giosh94mhz": "I just saw that in PR #58 you've added a class ISOCurrencies which implements AvailableCurrencies. I think, this interface can be a good starting point for what I wrote before...\n. Closed, just like #95 \n. Thank you @sagikazarmark for your fast feedback! I try to reply to all you comment.\nImaginary currency can be created, but there are limitations AFAIK. To add it I can just do new Currency(\"GOLD\") or the shortcut Money::GOLD(123); this can be done even if that currency isn't part of the current domain model. The interface AvailableCurrencies as it is now, seems ok to validate a currency against a set, but not to \"get\" a currency from a valid set, or throw.\nI agree that Money library should not know about loading. In fact I think that currency should be always passed in the constructor. The only reason I've introduced this loading login is to allow \"Money::CURRENCY\" syntax, which is cool and provide backward compatibility, even if it's not SOLID OOP.\nI think that Currency should be value object (that's why the method equals is defined), but it should not be forced to only have the \"code\" property. For example, in my domain I have currency name, number of decimal precision, and a conversion rate based on default currency (ok, the latter is too specific and should be refactored out :). Also, these informations are saved on a backend (i.e. Doctrine), so always duplicating force the application to have and use adapters. This is also the main reason why I think that having a loader may be good: you can load all the currency at once, or load only the one use need (e.g. from DB).\nSo, If I use my own implementation of currency I always need to do something like this:\nphp\n$money = new Money(123, $myCurrency->getCode());\nor define my custom Money and Currency with duplicated interface, and for each method do:\nphp\n    public function doSomething()\n    {\n        $newMoney = $this->wrappedMoney->doSomething();\n        $currency = $myCurrencyLoader->load($newMoney->getCurrency()->getCode());\n        return new MyMoney($newMoney, $currency);\n    }\n...or similar.\nSo, in the end.\nI love too the way this library is written, and that's why I've opened this PR in the first place. I was expecting this kind of feedback. What I say is this: with this PR, the library can be used the same way as before, with Money and Currency used as strict ValueObject. In the case of \"complex\" system where having the currency code is not enough, you can provide your own Currency class with extra information and carry it along with the pure money value. Also, by having a clear (even if misplaced, though) hook point to set the list of available currencies.\nAll I say obviously don't apply to Money, of course. If someone need to extend both Money and Currency, then this library is not what he's looking for.\n. Mmm probably my explanation was a bit fuzzy :)\n\n\nIn fact I think that currency should be always passed in the constructor.\n\nIsn't it right now?\n\nThe only reason I've introduced this loading login is to allow \"Money::CURRENCY\"\n\n\nYou can now both initialize using new Money(123, new Currency(\"EUR\")) and Money::EUR(123). The former is more formal and IMO the way to go, the latter is a convenient shortcut, but imply the knowledge of how a Currency is allocated. Since the Money class use __callStatic to create magic methods, then there should be a static component which know how to allocate an object. In the current implementation the allocation is left to a simple new statement with a fixed class. \n\nThat's where I disagree. The point of currency is to provide information about the money value and nothing more. Any further information should be stored elsewhere, where you can actually use the Currency object as the key.\n\nWell, for the same reason I think that Currency should be an interface. I mean, If the only information useful from a currency was the code, then it would have become a string property in money. But the class already provide information about CurrencyPair, ISOCurrencies, ... it seem so natural to allow different currencies implementation.\n\nSince you mentioned doctrine: Currency is an association, not an entity\n\nLet's go a bit off-topic. I don't get this. I have many tables with tuple of columns: money and currency. Money is just a \"string\" and currency is an association to a Currency entity. But to use Doctrine, I cannot just pass \"EUR\"  I should pass the persisted Currency. Are you doing another easier way?\n\nAlso, these informations are saved on a backend (i.e. Doctrine), so always duplicating force the application to have and use adapters.\n\nThat's definitely not clear, sorry :) As I explained before, with Doctrine I need to pass reference to persisted entities, so the Currency class cannot be used. This mean that if I use Money class as is, I need an Adapter, an abstraction or some EntityListeners to replace the correct instance before persist. This is about doctrine, but I think that if someone save on CSV (shame on you :) is the same.\n\nIf I were you, I would create a factory wrapper which contains all your custom knowledge to load currencies and any further custom logic.\n\nThis is the first thing I have though, but consider this two examples\n``` php\nclass Factory {\n    public function createMoney($amount, $currency) {\n        return new Money($amount, $currency->getCode());\n    }\n    public function createCurrency($code) {\n        return $this->loadOrCreateFromSomewhere($code);\n    }\n}\n$eur = $factory->createCurrency(\"EUR\");\n$money = $factory->createMoney(123, $eur);\n$money->getCurrency()->equals($eur); // ok cool\n$eur->customMethod(); // whatever\n$money->getCurrency()->customMethod(); // undefined method error\n```\nStill I have the same problem if not using my custom currencies inside Money, unless I also use a custom money which reimplement all Money method. But this is overkill: this library is small, and if I need to adapt all the classes, then it is better to use another library (or a fork).\n\nIt seems to me that (almost) everything you want is already in the library. That extra which is not should be implemented as custom logic IMHO.\n\nMaybe I simply don't see it... maybe you have some example?\n. > ISOCurrencies? Where?\nI mean the currencies.php file and the like... \n\nBut name? It does not. Imagine the scenario: you are developing a multi language e-commerce site. Do you really want to put the name into the Currency object. Or just the identifier which gives you the proper translation of the currency name.\n\nYou got a point here. If I think of Money as something like a-primitive-type-php-should-have-provided it sounds good: use the Currency as an simple type and leave the rest to the domain (i.e. formatter, available currency contraint, etc...).\n\nThe good thing is that you can inject this factory into any of your custom logic (formatting, storage) and you can use it there. So that these kinds of custom data do not have to travel with the VALUE object, since it is not value, but some kind of metadata.\n\nSo, you are suggesting to have services which provide property and method of currencies, instead of providing property and method along with the currency. The latter seem more convenient in my domain, but maybe is not the way to go...\nI will think about it more carefully tomorrow...  with fresh mind!\n. Ok, as you prefer.\nBy the way @sagikazarmark, some time as passed and I can give you some more feedback. I really loved your approach and used in other situation of my project (e.g. tipical Status[id, name, description]), but still using the CurrencyInterface for Money. Maybe this is just my preference :) Anyway, thank you for your valuable feedback.\n. ",
    "thedavidmeister": "yeah, that does look interesting. I'm just about to roll a release for something I'm working on that uses the current Money setup, so I don't want to start a refactor now. But it's something worth following up as I had to jump through some hoops along the way that I would have expected Money to handle better.\n. FYI http://stackoverflow.com/questions/14169820/regular-expression-to-match-all-currency-symbols\n. $string = preg_replace('@\\p{Sc}*@', '', $string);\n. https://github.com/mathiasverraes/money/pull/101\n. https://github.com/mathiasverraes/money/pull/100\n. ",
    "LostKobrakai": "Thanks for the clarification. Then I'm going with the stable branch.\n. ",
    "jtallant": "I really think this would make a lot of sense. I always have to implement it myself. When dealing with money, you're going to need to display it in a user friendly way 99% of the time. The ruby lib supports it https://github.com/RubyMoney/money/blob/master/lib/money/money/formatting.rb\n. ",
    "johanwilfer": "Ping @mathiasverraes \n. Formatting is one thing, but some way of getting back to a string (or float) should belong in the Money-class, shouldn't it? I can prepare a PR. I can also help with maintaining if you would like.\nAlso: there are forks / similar libraries that have unique features (for example big numbers). Is there an interface that we could agree on so that supporting libraries only have to support one interface, or maybe could we merge some of these features in this library?\n. ",
    "moon0326": "+1\n. ",
    "umpirsky": ":+1: I need bitcoin support.\n. @sagikazarmark Thanks.\n. @sagikazarmark Sure, I would like to submit PR, no problem.\nAm I missing something or there is no buzz dependency? Can you post link to update command here?\n. @sagikazarmark Oh, ok, thanks!\n. @sagikazarmark \n\nWhat is considered to be a BC break? Removal of currencies? Change in name? Since the code contains some validation features, it is crucial that the same data will always be available in the same version.\n\nNo, I think BC break will be change in data format. For example if we decide to add currency symbol or rounding rules... \n\nWhat is the release cycle?\n\nI hope to update the list few time per year.\n. @sagikazarmark If you look at https://github.com/umpirsky/currency-list/blob/master/data/en/currency.php even some ancient currencies are still there (e.g. 'YUN' => 'Yugoslavian Convertible Dinar (1990\u20131992)',). When updating currency list I will have clear diff and if something gets removed I will notify you.\nYou can also control exact version of currency list via composer if you want to be 100% sure.\n. I think replace the build script with a call to https://raw.githubusercontent.com/umpirsky/currency-list/master/data/en/currency.php or include the repo as dev-dependancy is good idea.\nWe can also create separate package which include only PHP format with en locale? Will be very tiny.\n. @sagikazarmark Thanks for merging it. :+1: \n. @sagikazarmark Good catch, thanks!\nProposed fix in https://github.com/mathiasverraes/money/pull/140.\n. @sagikazarmark Not sure about require_once, but caching loaded currencies can. Even if not static, it is a good idea to do it once.\n. @sagikazarmark Thanks, I am on it. :+1: \n. :+1: \n. @sagikazarmark Thanks! :+1: \n. If it is used only as a dev dependency to just copy only one file which this package needs and keep it versioned, then I think we can consider size problem solved.\n. Basically all someone needs to do is clone https://github.com/umpirsky/currency-list and:\ncomposer install\n./bin/build\nAnd submit the pull request. Sometimes it's hard to setup all dependencies, not sure when will I have time to do it, but I will be happy to merge PR and release new version.\n. ",
    "pkruithof": "Thanks!\n. ",
    "mnapoli": "Thank you for the great answer! Those check you implemented on Sebastian Bergmann's implementation are indeed pretty great. We ended up rolling our own implementation 100% based on that implementation, minus the currency (we don't have to deal with currencies).\nFor the database I map PHP's integers to BIGINT. At any point (from DB, to DB, etc.) if there's an int overflow there will be an exception, so at least there won't be any silent data corruption/wtf.\nIt would indeed be good to implement such checks in this library too.\n. > This also means you can sort your list of ratio's to change the one who gets the remainder.\nThat is cleverly simple indeed! The library could do that though (and I'm not against implementing it myself if others confirm this is what we want).\nI have been talking about this to a few people working with numbers and it seems the answer is not that obvious (I was convinced I found a bug, but I now have doubts).\nLet's see if others have an opinion on this.. I think it is necessary to add new tests to cover the problem you are describing.. Yes please :)\nWe have red errors everywhere in PhpStorm now with the latest release (we use ints).. ",
    "afoeder": "Will add a new one with the proper target.\n. The indendation is because of in the first case (2 indents) it's yaml standardd, in the other case (4) it's Symfony standard / convention... wdyt?\n. Adjusted everything @sagikazarmark \n. Thanks too, nice joy. Have a fine weekend!\n. yeah actually that's a leftover from a rephrase; was meant rather like\n\nSince [...] you'll want to use [...].\n\nHow about that?\n. usually I use the quotes whenever a value is \"arbitrary\" and not somehow schema-defined... but you're right, I don't do that consistently here...\n. I am totally not familiar with the XML mapping type (see http://doctrine-orm.readthedocs.org/en/latest/reference/xml-mapping.html#example for an example); this would be a typical case where I'd point my finger to another contributor to augment this documentation when he stumbles upon this and adapts it on his own for XML.\nAdditionally, I tend to argue that for Doctrine mapping configuration, the usual way is Annotations / YAML / XML...\n. hehe yep I see, makes also sense now when knowing your POV... I'll adjust it.\n. ",
    "barryvdh": "While I would agree that not having to update manually is a plus, but do you realise that the https://github.com/umpirsky/currency-list repository is huge?  It contains 6000+ files and accounts to 90+ MB. And you're just using it 1 load 1 array of currencies?\nWhy not replace the build script with a call to https://raw.githubusercontent.com/umpirsky/currency-list/master/data/en/currency.php or include the repo as dev-dependancy, and copy the file?  How often do currencies change, I'm guessing not that often..\n. Is there an estimated planning for a stable 3.0 release?\n. Ha, yeah I'm asking for the same reason, also Omnipay v3 ;)\nAnd I'm not in a rush, just curious if it's close or still far away :)\n. Could it be that the locale is not available on the Travis setup?\nThis gives the same (unclear) message: https://3v4l.org/1p9eF\n. Hmm, I don't have a lot of experience here, but if results are unreliable, I'm not sure I'd trust this to handly my money stuff.\n. Yes I understand Money is stable, I was just referring to intl parsing by itself ;)\n. The proposed fix is here: https://github.com/thephpleague/omnipay-common/pull/70/files\nIf you both agree that's a good solution, that would be great :)\n. For example, see this library: https://github.com/alcohol/iso4217\nPerhaps that would be a better fit that the current currency list?\n. PR in https://github.com/moneyphp/money/pull/160\n. No I don't actually need this code. I just wanted to provide an alternative solution to the current package, because of it's size. But moving it to suggest is even better ;)\n. Not the interface (I assume only ISOCurrencies has it), but as part of the ISOCurrencies class itself.. I have them in my package currently, even copied from that package: https://github.com/thephpleague/omnipay-common/blob/master/update_currencies.php\nBut with the related PR, I was trying to offload some of the money parsing etc to this package, but it feels a bit duplicated. Especially since I need your currency class to parse the money, they need to be in sync. And I can replace all of it with your currencies, except to conversion to numeric code.\nBut what you are suggesting, is that I either create my own OmnipayCurrencies class, which loads the currencies from my own resources, or that I extend ISOCurrencies and add the method there?\nI think I can do the latter, to keep the maintenance here.\n\n@barryvdh Why do you need it any how?\n\nSee https://github.com/thephpleague/omnipay-common/pull/151\nGateways format the amount etc, but sometimes need to convert the currency code to numeric.. Oh I can't extend you ISOCurrencies class because it's final. I could create my own ISOCurrencies, but that would be duplicating your implementation, resources etc.. This is what would change in https://github.com/thephpleague/omnipay-common/pull/151 after the PR in #374 : https://github.com/thephpleague/omnipay-common/commit/c75183a503615740db10f8e6b80905f7897fa618\nOmnipay abstract the gateways, so a customer would pass an amount + currency, similar to all. The gateway defines if it wants the decimal formatted string as amount or the integer value. Same goes for the currency, it is passed as extra parameter (in http request to the gateway driver), usually with the USD code, but sometimes the numeric code.. Thanks :). ",
    "rgeraads": "Thank you for the heads-up! I will use the nextrelease branch.\n. Created #129 :)\n. ",
    "piotrantosik": "I agree that to return to the static - it is better performance.\nPlease recheck code and give me a feedback.\n. Ok, soo now is:\n- private static calculator property\n- private methot to get this property\nAnd looks good for me :smile:\n. ",
    "opb": "realise I may have submitted PR to incorrect branch?\n. thanks!\n. ",
    "florianv": ":+1: \n. Thanks @sagikazarmark for taking initiative on that!\nThis looks ok to me, nothing to add \ud83d\udc4d \n. Hey,\n\nWhen we implemented the new (v3) Swap we followed @florianv's suggestion do implement it instead of exchanger.\n\nIndeed, I didn't expect people would use Exchanger directly as framework integrations provide the Swap service and don't expose Exchanger.\nTo me Swap is more convenient but from some issues and suggestions I got, it seems that some people use Exchanger directly, maybe without a framework.\nThis implementation looks good to me. Maybe we could merge both but I'm not sure which name to use for the implementation. ",
    "judgej": "There's a PR here, which may or may not be the best solution.\nI saw a constructor with an unrestricted parameter that did (string) $number, so assuming a float could go into that constructor (since nothing is stopping that ATM) then that's why this is a heads up.\n. That was a whirlwind of a change. Thanks!\n. I can still do this now and get the correct class:\n$amount = new MyMoney(999, new \\Money\\Currency('GBP'));\nbut this gives me a different class:\n$amount = MyMoney::GBP(999);\n. Here is my adapter:\nhttps://github.com/academe/SagePay-Integration/blob/master/src/Money/Money.php\n(now https://github.com/academe/SagePay-Integration/blob/master/src/Money/MoneyAmount.php)\nIt is very simple, and can be used as an alternative to the built-in Amount class here:\nhttps://github.com/academe/SagePay-Integration/blob/master/src/Money/Amount.php\nsince they both share the same interface.\n. This is kind of how I see it working for OmniPay: if someone wants to write a built-in money handler, then great, but so long as it is class that has an interface that OmniPay expeacts, then any third-party package can be used instead. We don't have to argue about which one, since they can all be supported through an adapter.\n. np - I'll change it my end. My gateway is all new and experimental, so nothing there is fixed in stone yet. It was six or two-threes which I tried first anyway.\nEdit: and done.\n. Just a simple (string)$myMoney to give me 1.00 for \u00a31 aka 100p would be nice.\n. I started on 1.3 b but have moved to the 3.x beta.\nSo the currency here is not aware of the size of the subunit? I thought I was going mad when I couldn't find it. To have to keep that information separate from the currency itself seems to defeat half the object of this library.\nHumans and currency exchange services rates work in major units and minor units. Computers can work largely in minor units. Accounts like to work in fractions of minor units. Being able to easily move between these forms is what is going to make this library much more useful.\n. I'm trying to write decorators for some of the features I need to wrap around Money, since it cannot be extended dues to the use of final. The problem is, without an interface, the decorators cannot be type-hinted, which is a bit of a pain. If they are type-hinted against Money class, then the decorators cannot be nested, which is one of the reasons for using decorators.\nI am really growing to dislike the final keyword...\n. I need the money object to be castable to a string, for use in a form. The form renderer will take any data type, so long as it will cast to s string. So [GBP, 120] will cast to a string as \"1.20\".\nAlso would like an easy formatter for displaying the value in display screens, so $money->format() on [GBP, 120] will give me \"\u00a31.20\".\nThe idea is to pass a monetary amount around as an object, into places where it interacts with the user, and it just works without a tonne of additional helper functions to have to format/convert/etc. There is also the issue of having to parse the value entered into a form by a user, but I think that's covered.\n. Hmm, the Form Model Accessors in the Laravel Collective HTML form generator bound to a model is supposed to be able to handle transformations, but it seems it's only on L5.2 and I'm on L5.1 (https://laravelcollective.com/docs/5.2/html#form-model-binding). I'll dig into how it works to see if it can be used in a similar way.\n. Presenting as a string is important here, as floats don't have trailing zeros, so some formatting is still needed.\n\nMy solution is to create an accessor on my eloquent model to make sure it always returns the underlying integer in the database as a Money object. Matching mutators then make sure a Money object can be passed back in for saving.\nI've creating a macro in Laravel to present the money amount in form for editing. The macro extends the Laravel Collective form package. That formats it nicely and puts a currency symbol in the field as a bootstrap icon.\n{!! Form::money('my_money_field', null, ['class' => 'form-control']) !!}\nWhen just displaying, I have an application helper. The helper just displays the amount as a string with a currency symbol:\n{{ \\AppHelper::formatMoney($model->my_money_field) }}\nNow, then submitting a form in Laravel, the input is given directly to the model, which means it is a string. The model mutator is clever enough to accept either a Money object or a string, which it then parses into Money for saving.\nI'm sure there is a layer somewhere in the laravel form handling that should be able to take certain input data in certain contexts and parse it into a Money object before my model even sees it, but I've not found where that would be. I'm guessing not middleware, because the middleware does not have the context of what is being POSTed - it would not know what should be parsed and what should be left alone.\nAnyway, I have a end-to-end solution that works, though does feel kind of bodged and clunky. I think perhaps that feeling comes from how closely bound form items and database columns are in laravel, so data to and from the browser tends to be treated as text or numbers all the way to the database. Maybe a DTO layer would help here? Not sure. Anyway, I'm walking that fine line between learning the best and proper way to do things, and trying to get the project out the door, hence my original question, and why I'm happy with my solution even if it does feel a little clunky to me.\n. Good question - I should have noted that. I'll take my data fixes out and get the details.. ErrorException in DecimalMoneyParser.php line 54: Cannot parse \".99\" to Money.\nSame error and location for \"\", \".99\", \"99.\" and \".\", not that anyone should be parsing \".\" as a number, but it's a very edge case.\nphp\nconst DECIMAL_PATTERN = '/^(?P<sign>-)?(?P<digits>0|[1-9]\\d*)(?:\\.(?P<fraction>\\d+))?$/';\n...\n        if (!preg_match(self::DECIMAL_PATTERN, $decimal, $matches)) {\n            throw new ParserException(sprintf(\n                'Cannot parse \"%s\" to Money.',\n                $decimal\n            ));\n        }. Brilliant - much appreciated :-). Yes, it is a bit of a unique case. What I have is the guts of the Money class copied and pasted into a custom class to do the calculations. Because Money is marked as final, it puts a walled garden around what it contains, so nothing inside it can be put to use for other purposes. Also because Money does not have an interface, I'm resorting to duck-typing when summing a Money object with a MixedMoney object, which does not feel ideal.\nI'll see what I can do to tidy up and maybe simplify what I have and link/post it here to see if it will be of any use to others.. This is the class I am using for a mixed currency sum:\nhttps://github.com/consilience/iso20022-pain/blob/master/pain001/Money/Mixed.php\n```php\n$mixed = new Mixed(0);\n$mixed = $mixed->add(Money::GBP( 100)); //   1.00\n$mixed = $mixed->add(Money::EUR(2000)); //  20.00\n$mixed = $mixed->add(Money::JPY( 300)); // 300\ndump($mixed->format());\n// 321.00\n```\nIt's just a validation thing used as a rough confidence check (along with a record count) that the full contents of am ISO 20022 pain.001 file is complete. It's not used for any other purpose, so this mixing of currencies is not an issue.\nI'm not sure it is something worth putting into the documentation, as it is well out of scope of actually managing and representing money amounts in any form (this isn't a money amount, it's a kind of checksum), so I'll leave this here in case it finds a use for someone tackling this, but I think the issue can be closed,. ",
    "browner12": "thanks @frederikbosch \nyup, @sagikazarmark, that was it.  mine was external rather than being a dependency of my Money. thanks for the reply.\n. lol. https://github.com/moneyphp/money/issues/322. correct, while 99% of PHP installs are going to have the JSON extension compiled in by default, it is possible to omit it.\nI would agree that this belongs in 'require' since a package class is implementing JsonSerializable.. ",
    "rastydnb": "HI @frederikbosch thanks for the response. \nIn the good server we have debian jessie 64bits nginx and php-fpm, and in the wrong server we have CentOS release 6.7 (Final) 32bits and apache without cgi ,the money version is 1.2.2.\nThe extension are the same in two servers\nWe think like you, and is PHP_MAX_INT where is the error\nIs posible that the error was because the os is 32bits?\nThx\n. Thanks @frederikbosch \n. ",
    "elstamey": "I'm not sure.  Money broke us today and earlier last month.  I believe it is because of this commit:\nhttps://github.com/moneyphp/money/commit/04490c14cbd46b117d0d13b59c9aae8beda9edb1\nMoney wasn't able to be a string before, and we were getting a string back instead of the integer we expected, and it's been a not-fun day.  \nThis should at least be mentioned in the changelog specifically.\n. Agreed.  We accidentally left the dev-master in production.  We have resolved that.  But when we determined the problem was related to Money, the Changelog did not give us any idea of the actual change that happened.  I believe changing the value of amount to a string is a significant change and \"of note\" for others who may wonder what changes are coming.\n. Thank you!  :)\n. I have no problem with your pushing those changes to this branch or taking this work to another branch.\n. OK, but if the warning isn't actually written in docs, it's not really helpful to the people like me who were surprised and broken.\n. Thank you!  When this is merged, I'll be so glad! \nUsers can more readily see breaking changes in the changelog.  We had to find the change to GetAmount's returning a string by reading the code because nothing was obvious in the changelog.\n. ",
    "guiwoda": "Hey guys!\nThis is just a /ping. I started a project a few days ago and I'm pointing at 3.0.0-beta2. Hope we can get it to 3.0 soon!\n. Awesome, thanks!\nDocs should be updated too, right? Maybe I can help with that.\n. @frederikbosch what's the status on the Doctrine integration library?\nCan I help you guys with that? I'm contributor in Laravel Doctrine and I have multiple projects mapping Money to Doctrine already.\nCheers!. Alright, I'm on it!\nYou can see progress here:\nhttps://github.com/guiwoda/doctrine-money. Hey @sagikazarmark!\nI tagged you in an issue in the repo I linked in the comment above. I don't know if what I've done is enough to make it into a library or if you guys expect to have framework integration as well.\nREADME explains the basic way to add mappings to Doctrine, so that should be enough for any usage. Anything else would be extra help for framework specific code (Laravel's ServiceProvider, for example.). Guys, you've been pretty quick to correct @programarivm in his bigint assertion, but I'm still waiting for your feedback on the Doctrine integration package!. I don't understand, I made the embeddable implementation in literally 5 minutes. If embeddables don't fit in your implementation, it will probably take you another 5 minutes to do whatever you see fit.\nIt's not about solving everyone's problems, it's about providing at least one solution!\nI've been using Money and Doctrine for live projects, and I've never had any issue at all with the bigint implementation. Decimal doesn't make any sense unless you are actually converting from cents to decimal and back every time.\nCan't we at least have one official doctrine package, then iterate over it for other alternative? I'm asking for concensus here, not perfection.. @Padam87 you don't need to override if you never actually add the wrong mapping at all. If bigint doesn't work for you, then don't add the provided mapping and that's it. You can still use the provided Currency mapping, tho.\nI don't really care about your use case. Don't get me wrong, I'm not saying it's not valid. But, as it was pointed out earlier in this thread, this lib already made the choice to use strings and work with BigMoney. This is not about making the most flexible library out there with every possible money representation.\nI believe an initial bigint representation, aligned with Moneys internal properties, is as straightforward as it gets. It allows for database math (which string doesn't) and I believe the entire planet's gross income combined doesn't overflow a bigint representing cents.. ",
    "dereuromark": ":+1: for a stable release.\n. ",
    "emaillenin": "Why do we not have support for string with more than 2 decimals in StringToUnitsParser? Is this intended? There are few currencies that have more than 2 decimal places.\n. ^ Good to see it has been fixed now - https://github.com/moneyphp/money/pull/292\n. ",
    "dilab": "Just a heads up. I do not think DecimalMoneyParser is included in 3.0.0-beta3.\nIt is documented though http://money.readthedocs.io/en/latest/Parsing.html#decimal-parser\n. ",
    "superdummy": "Thanks so much for your help and even more for the great library! Yes with dev-master its working! Thanks!\n. ",
    "matchilling": "@frederikbosch Fair enough. I just found the one-liner as one way for creating money objects kind of handy.\nCould we potentially have something like this on Money\\Money:\nphp\n/**\n  *\n  * @param  string  $money\n  * @param  string  $currency\n  * @return Money\n  */\npublic static function fromString($money, $currency)\n{\n    $parser = new StringToUnitsParser();\n    return $parser->parse( (string) $money, $currency);\n}\n. ",
    "mikemand": "I was going to suggest just having __toString call the MoneyFormatter and return its output but now that I think about it, I don't think it would be feasible. It would assume way too much about the end user's setup, notably that they have set the LC_MONETARY locale correctly. And it would also let the Money object know about its Formatter, which is against the whole point of the Formatter in the first place.\nMy specific use case is to pull the amount (stored as an int - which lines up great with) and currency from the database through my DBAL (in this case, Eloquent's Active Record) via my Repository then display it for the user. However, I can just as easily use my Repository (or even a transformer/presenter of some sort) to build the display and output that instead.\nThank you for your time, and this wonderful package.\n. ",
    "davidomelettes": "But it's not HALF_UP, it's PHP_ROUND_HALF_UP. Or at least, that's what it purports to be.\n$ php -r 'echo round(158243 * -0.052631578947368, 0, PHP_ROUND_HALF_UP);'\n$ -8329\nEven if it was rounding -8328.578947368 in the other direction, should that not mean the expected result would be -8328? I'm still struggling to see how it arrives at -8327.\n. I've been keeping an eye on your PR @frederikbosch, and have been unable to find any fault in your work.\nAm I to understand that the HALF_UP rounding mode will now be equivalent to PHP_ROUND_HALF_UP? That is, it will round away from zero?\n. ROUND_HALF_POSITIVE_INFINITY rounds towards zero?\nI agree, documentation will be key. ;)\n. Makes perfect sense, with the right context. I agree with the naming.\n. @sagikazarmark Linked PR resolves the issue, thanks.. ",
    "mohorev": "@sagikazarmark Yes. That would be cool!\n. @sagikazarmark Sorry, I think I can not do it correctly and beautifully.\n. @frederikbosch @sagikazarmark I agree that this is the best solution at the moment. I like it. That will be enough to solve my problem.\n. ",
    "jongotlin": "I had to look in the manual when not using annotation and the example uses only the class name. But if you want me to change I'm happy to do so.\nhttps://phpunit.de/manual/4.8/en/phpunit-book.html#writing-tests-for-phpunit.exceptions.examples.ExceptionTest3.php\n. Ah. Isn't that the case when you're using get_class? gettype doesn't care about what object it is.\n. Or do mean you want me to check if its an object, return its fqcn?\n. Got it :-) \nEven better\n. You're right. My misstake.\n. ",
    "lakhman": "can you show a code snippet? it would be helpful.\n. yeah ok, gotcha, thanks!\n. Excellent! Much cleaner! I'm going to go with the 2nd approach, much cleaner, I can inject into the classes I require, I'm using Symfony3 and this is the correct way of doing things, and yes If I need to change the implementation down the line, this makes it much easier.\nI think FixedCurrencyParser should implement MoneyParser no?\nThanks!\n. A FixedCurrencyMoneyParser would be helpful, I also am only using 1 currency, I suspect many others will also do the same.\n. ",
    "ghost": "since June 2017 the symbol has changed. \u20bf\nSource: https://en.bitcoin.it/wiki/Bitcoin_symbol\nSee: https://en.wiktionary.org/wiki/%E2%82%BF. ",
    "ciaranmcnulty": "Actually, you can do require PhpSpec\\Loader\\StreamWrapper::wrapPath('Path/To/Foo.php') and it'll work, but it's not really supported behaviour\n. ",
    "bramstroker": "@sagikazarmark \nI get a \"correct\" value when using fraction digits 2.\n\u20ac 1,00\nBut this is not the same behaviour as using the NumberFormatter without the Money object. i.e.\nFractional digits should only affect the position of dots and comma's and decimal positions, but never affect the base value.\n```\n$numberFormat = new NumberFormatter('nl_NL', NumberFormatter::CURRENCY);\n$numberFormat->setAttribute(NumberFormatter::FRACTION_DIGITS, 2);\necho $numberFormat->formatCurrency(500, 'EUR') . PHP_EOL;\n//Outputs \u20ac\u00a0500,00\n$numberFormat->setAttribute(NumberFormatter::FRACTION_DIGITS, 0);\necho $numberFormat->formatCurrency(500, 'EUR') . PHP_EOL;\n//Outputs \u20ac\u00a0500\n``\n. @sagikazarmark \nThanks for the explanation. I now understand why you choose to do it like this.\nYou mean by subunits the amount of decimals which needs to be substracted to get to the \"normal\" value? I.e.  500 / 100 = 5\nMaybe it would be a good idea to add that \"factor\" to the constructor of theIntlMoneyFormatter`, That way it would not alter the core NumberFormatter behaviour and the implementation can be much simpler imo by just dividing the amount by the specified factor instead of all the string padding what happens now,\n. @sagikazarmark \nIt feels not really good to me to, because:\n- You use FRACTION_DIGITS as a \"hack\" to get the amount of zero's for the subunits\n- The user must alter the numberFormatter state each time you format a value, which is an implementation detail and not visible by looking at the public API\nMaybe you can alternatively alter the interface definition to make it possible to pass the \"factor\" there.\nfunction format(Money $money, $factor = 2)\n. ",
    "jyggen": "The problem with using NumberFormatter::FRACTION_DIGITS is that it's for the locale and not the currency, so using it to determine the subunit is dangerous. You've kind of agreed on that already, but here's an example anyway where the price is formatted differently based on the user's configured locale which outputs the wrong price for a Japanese user:\n``` shell\n---- 15.99 USD for en_US ----\nFraction Digits:    2\nFormat:             $15.99\n---- 15.99 USD for sv_SE ----\nFraction Digits:    2\nFormat:             15,99\u00a0US$\n---- 15.99 USD for fr_CA ----\nFraction Digits:    2\nFormat:             15,99\u00a0$\u00a0US\n---- 15.99 USD for ja_JP ----\nFraction Digits:    0\nFormat:             $1,599.00\n```\nCode used to produce the output above:\n``` php\n<?php\nuse Money\\Currency;\nuse Money\\Formatter\\IntlMoneyFormatter;\nuse Money\\Money;\nrequire_once 'vendor/autoload.php';\nfunction debug($price, $currency, $locale) {\n    $money = new Money($price, new Currency($currency));\n    $numberFormatter = new \\NumberFormatter($locale, \\NumberFormatter::CURRENCY);\n    $moneyFormatter = new IntlMoneyFormatter($numberFormatter);\necho '---- '.($price/100).' '.$currency.' for '.$locale.' ----'.PHP_EOL;\necho 'Fraction Digits: '.$numberFormatter->getAttribute(\\NumberFormatter::FRACTION_DIGITS).PHP_EOL;\necho 'Format:          '.$moneyFormatter->format($money).PHP_EOL;\necho PHP_EOL;\n\n}\ndebug(1599, 'USD', 'en_US');\ndebug(1599, 'USD', 'sv_SE');\ndebug(1599, 'USD', 'fr_CA');\ndebug(1599, 'USD', 'ja_JP');\n```\n. ",
    "Sharom": "\nI don't think adding formatter logic to the VO is a good idea, it should be handled by an external service.\n\n\ud83d\udc4d I think, that translation between VO and string representation are responsibilities of a formatter and a parser.\nBut may be useful to return some string representation for logging or for debugging.\nFor example\nphp\n$money = new Money(10000, new Currency('USD'));\necho (string) $money;\nprints:\n[Money\\Money: amount=10000 currency=USD]\nor\n[Money\\Money: amount=10000 currency=[Money\\Currency: code=USD]]\n. > I need the money object to be castable to a string, for use in a form. The form renderer will take any data type, so long as it will cast to s string.\nInfrastructure or framework should not affect design of the model.\n@judgej I am sure, that exist some another way to resolve your issue without modification of Money. If framework, which you use, does not provide some ability to implement form transformer, you can use DTO for aggregating information from a form. Then you can transform data from DTO to your model and vise versa.\n. > @judgej I am sure, that exist some another way to resolve your issue without modification of Money.\n\nIf framework, which you use, does not provide some ability to implement form transformer, you can use\nDTO for aggregating information from a form.\nThen you can transform data from DTO to your model and vise versa.\n\nI should correct myself. It's better to use PRESENTATION MODEL pattern.\n. I think, that we can add CurrencySpecification value.\nCurrencySpecification should contain information about subunits, name of subunit and so on.\nAlso we should provide CurrencySpecificationRepositoryInterface:\nphp\ninterface CurrencySpecificationRepositoryInterface\n{\n    /**\n     * @param Currency $currency\n     * @return CurrencySpecification|null\n     */\n     public function findCurrencySpecification(Currency $currency);\n}\nAfter that we can inject an instance of CurrencySpecificationRepositoryInterface into the formatter/parser.\nAnd CurrencyRepository can provide currency by currency specifications =)\n. > Now, I think that CurrenciesSpecification should be moved into Currencies. So Currencies interface has two methods: contains and specify. If the repository contains the currency, it must be able to specify its characteristics. Right?\n@frederikbosch I am not sure. I think that it's better to have separated interfaces. Currency and CurrencySpecification are different things. Therefore a repository of currencies and repository of specifications are different too. Two responsibilities of a one interface smell bad.\nBut currency can be created by a specification. In this case Currencies can use repository of specifications.\nI suggest not rushing with a final decision. Let's think about it.\n. One other case related to subunits\nSometimes we need to accomplish some rounding of money:\n1. Let we have some thing with purchase price equal to 10.20 USD;\n2. And we want to sell it with ~12% profit: 10.20 USD * 12% = 11.42 USD;\n3. But price 11.42 USD looks ugly, 10.50 USD looks better!\nThis functionality may be implemented on Money in the future.\nAnd we need information about subunits to be able do this.\n. >  We could use the recently added method absolute to fix this I guess.\n@frederikbosch Current behavior subordinate to mathematical logic. But I am not sure that this behavior is correct from financial side.\n. I am not sure about allocation of negative amount. It's question about domain.\nPrevious behavior may be correct. If we do allocation of debt (represented as negative amount) for example.\nphp\n(new Money(-5, new Currency('USD')))->allocate([3, 7]); // => [-1, -4]\n. I don't think that we need these magic methods. It is not useful for production application. Usually you receive currency from database or some other sources.\nYou can see Money::USD(100) in tests only.\n. But this can be useful in production:\n``` php\n$currencies = new ISOCurrencies();\n$money = new Money(\n    $amountFromDatabase,\n    $currencies->get($rawCurrencyFromDatabase)\n);\n```\n. ",
    "Garbee": "There are two good methods here using a presenter model. The latter could lose precision due to using float, but doable.\n(Click the summaries to see the example code.)\n\n\n\nAssuming bcmath is available\n\n\n\n``` php\nphp\nuse Money\\Money;\n\nclass MoneyPresenter {\n    /** @var Money $money */\n    private $money;\n\n   public function __construct(Money $object) {\n        $this-money = $object;\n    }\n\n    public function amount() : string {\n        return bcdiv($this->money->getAmount(), 100);\n    }\n}\n```\n\n\n\n\n\nIf bcmath isn't available, return a float and round it on the frontend.\n\n\n\n``` php\nphp\nuse Money\\Money;\n\nclass MoneyPresenter {\n    /** @var Money $money */\n    private $money;\n\n   public function __construct(Money $object) {\n        $this-money = $object;\n    }\n\n    public function amount() : float {\n        return $this->money->getAmount() / 100;\n    }\n}\n```\n\n\n. You can format either of the presenters I posted however you wish. I just did the math as the example, but you can do a currency format in there. As well as another method to get a string of the integer out with trailing zeros. Give bcmath functions some precision, and you'll have trailing zeros in your output.\nLaravel doesn't provide a \"layer\" for this. It is one you'd need to implement on your own. Accessors/Mutators are typically exactly what this is for.\n. Ah, right. This would mean only about 21 million could be handled well. If anyone does anything going over that it is going to get wonky.\n. ",
    "iampersistent": "I will make the fixes tomorrow. I just wanted to get the PR in to start the conversation. \n. ",
    "stevenscg": "Really nice library. Thanks for sharing.\nWe uncovered this potential issue when using the library to format amounts for storage in a legacy application.\n. Thanks @frederikbosch !!\n. ",
    "Achse": "Hey @frederikbosch, thank you for your replay. I am really sorry about that an I'll try to explain it.\n- (1) About __toString(), no problem, I can remove it from pull request.\n- (2) Without__toString() there will be no need for normalize. (Btw can you point me to thouse normalizers?)\nBut in those other points I feel really sad about:\n- (3) Method pow is needed to transform numberOfSubUnits (for example dollar has 2 levels) into amount of smallest values for 1 unit (100 cents in this example) and is used in fromFloat method to create integer-like string value from float-like string value.\n  - If you really dislike this way, it can be rewritten in way that Currency will store directly amount if subunits for 1 unit (100 in our Dollar example). But I used this log_10 way, because of crypto-currencies.  They can have really many subunits for 1 unit (For example cryptocurrency Ethereum have 1 Ether = 1000000000000000000 Wei.\n- (4) Its not \"literary\" float. Mostly it is for creating Money from string that contains value like: 1.34 This is really needed in cases\n  - you are creating money object from users input (Form mostly),\n  - when you working with crypto-currencies and most of APIs and other systems works with exact string in \"float\"-like format.\nThank you for reconsideration of this feature.\n. ",
    "bendavies": "note that i've called it abs on the calculators and absolute on money.\nwhich do you prefer? shall we name them the same?\n. comments addressed. \n@sagikazarmark i went for it_calculates_the_absolute_amount/value which follows the convention of the existing specs on the class.\n. @frederikbosch because the specs weren't asserting/checking anything at all\n. @sagikazarmark not possible without refactoring as the return from equal isn't a prophecy, it's a real Money object. (i think, from memory)\n. @sagikazarmark are you going to fix this yourself?\n. before this was merged, i solved this problem like this:\n$numberFormatter = new \\NumberFormatter('en_US', \\NumberFormatter::PATTERN_DECIMAL, '0.00');\n$decimalFormatter = new IntlMoneyFormatter($numberFormatter, $currencies);\n. yeah, the duplicated code (not a bad thing i know), could probably be removed and the DecimalMoneyFormatter could be composed with the IntlMoneyFormatter \n. good point\n. nice @MichaelGooden, that's very close to what i have.. Nice PR!. Unfortunately there is no registry to get a supported Calculator, so I can't see a nice way of inferring a calculator automatically apart from duplicating?https://github.com/moneyphp/money/blob/cf363f54cb3b8fe9d2c1eb82de4e6e6bbb1e9fa8/src/Money.php#L486-L527. I'm just using this in my project:\n```php\nfunction sum(Money ...$collection): Money\n{\n    $result = array_pop($collection);\n    foreach ($collection as $value) {\n        $result = $result->add($value);\n    }\nreturn $result;\n\n}\n``. How about we convert the float back to a string with sprintf?\nhttps://3v4l.org/H0FVj\n. I have fixed it in my forms MoneyTransformer at the moment:return new Money(\\sprintf('%.0f', $value['amount']), new Currency($value['currency']));. I've just noticedNumber::fromFloat, so myMoneyis now constructed asreturn new Money(Number::fromFloat($value['amount']), new Currency($value['currency']));`\nThis can probably be closed.. @frederikbosch there are two tests, one from a float, and one from scientific notation. (and i was just testing the maximum float representable by php fyi).\nbtw, why is there MoneySpec and MoneyTest? There seems to be some overlap.. @frederikbosch sorry, i missed what you were objecting to, hence my non nonsense reply.. @sagikazarmark hey! that doesn't add any ease of constructing over my current solution which is:new Money(Number::fromFloat(3.5), new Currency('USD');\nThe point of this PR was to provide a constructor that can take a string, int or float, so I don't have to do any checking up front.\nI'm not particularly attached to the idea though, so no problem if you guys don't like it!. @sotsky https://github.com/moneyphp/money/issues/408\nuse Number::fromFloat. Ah yes, I see the issue. I'll try submit a PR today.. @sotsky can you see if https://github.com/moneyphp/money/pull/445 fixes your problem?. is this safe?\nWhat about using one of the Money\\Calculator classes?. well, php floating point precision!. Sorry, didn't mean to sound sharp if that's what you mean.\nI'm just referring to the warning on this page\nhttp://php.net/manual/en/language.types.float.php. hah, good. I wasn't sure which definition you were using :). is this for consistency? they are actually static..... so, shall we use a Calculator?. i was making consistent with fromString above. i'll revert this and you can handle in another PR if you wish.. this works fine.. sorry, i misread. yes this doesn't work. what should be the behaviour/error here?. ",
    "sandrokeil": "Each exception should rely on Money\\Exception\\Exception. So in this case I would prefer this Exception or is there a special reason why to use \\InvalidArgumentException?\n``` php\nnamespace Money\\Exception;\nuse InvalidArgumentException as PhpInvalidArgumentException;\nclass InvalidArgumentException extends PhpInvalidArgumentException implements Exception\n{\n}\n```\nSo you can catch all component exceptions Money\\Exception\\Exception, only the component invalid argument exception Money\\Exception\\InvalidArgumentException or all invalid argument exceptions \\InvalidArgumentException.\n. Alright, I was just wondering of the mixed usage.\n. @frederikbosch Thanks for your explanation. Sounds interesting to me.\n. @frederikbosch Why not using a component exception here? The InvalidArgumentException must be created too.\n. ",
    "sahildua2305": "Thanks for instant reply @sagikazarmark!\nEven I haven't checked any stats about this library. I just had a look at the tests and realized that there was a scope of improvement. I think having more tests (at least covering all the functions/methods) is always better. So let me know if I should go ahead with adding tests or not yet?\n. Yes, @sagikazarmark! I will push some test over the weekend to get them reviewed once. \n. I looked a bit deeper and realized that it's actually the coverage of unit tests which is pretty low (screenshot). However the coverage of specs looks good.\nWas it planned to keep most of the tests under specs? Let me know if we should aim for better coverage for unit tests as well. @sagikazarmark \n\n. Okay. I was thinking of adding some more unit tests, which I shouldn't do now. Thanks for letting me know.\n. @sagikazarmark Looks like it's ready :smile: \n. I'm not sure. GitHub bug may be. I tried this twice. Didn't change anything on this line. It still shows this line in diff.\nIt's same anyway.\n. The terminal sign ($)? Yes, that's why I didn't add it at first place. I'll add it though. Makes more sense.\n. Sure! \n. Oh yeah! Thanks :)\n. Oh okay. My bad. Makes sense. I'll remove it.\n. ",
    "jiriko": "Is 1.2345 equal to Money::EUR(12345) ?\n. ",
    "piku235": "I also hit on that some time ago, when testing conversion between EUR (2 minorUnits) and JPY (no minor units). At this moment I'm using a modified version, I highly needed it in one of my projects, generally works. :) I think I'll be able to share with you my solution pretty soon when I'll finish doing final tests.\n. Thanks for the hint.\n. Ok, I think the MovingDecimalPointExamples it's a good name, thanks.\n. At the beggining I couldn't find a good name for it, so I just borrowed it from movePointLeft method of the BigDecimal class (Java). If it's also confusing for others then of course I think we can change it to moveDecimalPlaces or something more clear.\n. hmm.. what we'll gain by doing so? Looking at the Currency interface arguments of each method are of int|float|string type.\n. Yes, initially I was thinking the same, the logic behind conversion for sure will get bigger and maybe it'll be better to move it, but after looking a while on the Money class and seeing calculator instances are also holded by static property I decided to go the samy way to keep the class organization.\n. ",
    "muteor": "I am not sure about the optional currencies dependency, I think it would be better to make currency know about subunits, I see it as currency is actually invalid without its subunit because conversion (and other operations) does not work without it, therefore you should not be able construct a currency without specifying its subunit.\nphp\n$currency = new Currency('USD', 2); // code, minorUnit\nMight also be easier to store the subunit_to_unit like ruby money does: https://github.com/RubyMoney/money/blob/master/config/currency_iso.json\nAnother approach could be to make CurrencyPair depend on Currencies this way the conversion could be correct, though I think this still leaves the design open to improper conversions.\nTDLR: We should make it impossible to do incorrect conversions.\n. ",
    "vukanac": "$currencies->subunitFor(new Currency('USD')); // returns the subunit for the dollar (2)\n. As I can see, it will be nice to be able to get $formated value\nfrom IntlMoneyFormatter::format() method.\n. ",
    "Michael-vb": "@sagikazarmark no it didn't work with the money object too. But by default money object uses bcmath and this error occurs when bcmath is not installed. e.g.:\nPHP\nMoney::registerCalculator(\\Money\\Calculator\\GmpCalculator::class);\n(new Money(1000, new Currency('USD')))->multiply(0.029);\nwill throw the error\n. @frederikbosch thank you! I've seen. Just answered the previous question\n. ",
    "unnawut": "Speaking of documentation, do you still mean http://money.readthedocs.io?\nI noticed the last build was 8 months ago (http://readthedocs.org/projects/money/builds/). So I triggered a new build. The TOC should now be updated\n. Go to http://readthedocs.org/projects/money/builds/ and look for a button that says \"Build Version\". Pick a version then click the button should run the build.\nActually, you should be able to set ReadTheDocs to build automatically via a webhook. Check out the explanation below \"Auto-updating\" at http://docs.readthedocs.io/en/latest/features.html#auto-updating\n. Right now the docs seem to explain well the money concepts covered in this library. However it's a little difficult for someone to get started i.e. \"How do I add/subtract two amounts?\", \"How do I compare amounts which one is larger/smaller?\". That person needs to look through possibly all topics in the docs right now and still don't get an answer.\nI would suggest to improve the docs structure to be more like Carbon, where there are clear headings and content for Getters, Setters, Comparison, Addition & Subtraction, etc.\nDoes this sound like a good idea to you guys? If so I could give this a try and submit a pull request.\n. See #311 for my docs suggestions. I added sections about Money operators as well as grouped the TOC a little bit. I hope this structure makes more sense from a user point of view.\n. Ah, my bad for not realizing there is a doc branch.\nI'll wait for #308 to be merged, then I will re-evaluate my PR.\n. Heavy conflicts so I decided to make a new PR #312 instead.\n. Travis's make -C doc spelling is reporting spelling errors as follow:\nfeatures/comparison.rst:56:USD:\nfeatures/comparison.rst:56:USD:\nfeatures/comparison.rst:59:greaterThanOrEqual:\nNot sure what is wrong. Can anyone help?\n. @sagikazarmark Thanks. All green now.\nThe built docs is available for review at http://tuwannu-money.readthedocs.io/en/docs-new/\n. My bad, typo error. Fixed.\n. Fixed.\n. ",
    "daerimin": "Composer install is missing a lot.  Downloaded the .zip and they seem to be there.\n. Thank you for the reply! Seemingly so, yes - I have the classes I need and my code is working \u2013 but if I understand correctly, the parser is being done away with?  That\u2019s the whole reason I went searching for a library, is so I can turn strings that represent currency (\u201c$1.00\u201d) into something I can do math with.\n. Thank you very much for your guidance.  Unfortunately it seems that by using composer to download the code, large portions are left out.  The only way I could get either library to work was to \"git clone\" both projects, the cd into the new folders and run \"composer install\" - only doing this seems to provide all the classes.\n. I thought it was as well.  This could just be my ineptitude with Composer.  If so I sincerely apologize.  I typed the command you gave above exactly, and the following composer.json was created:\n{\n    \"require\": {\n        \"florianv/swap\": \"^2.0\"\n    }\n}\nWhen I run \"composer install\" and then include the subsequent \"vendor\" folder in my project and attempt to use the Swap\\Builder class, I get a \"class not found\" error.  When I use the git clone method (which also includes \"composer install\"), and include that code instead, everything works.  Hence my conclusion.  It may be that I'm simply leaving out a step, or there's something else I don't know to do.\n. Yes, that much I do know.  :)\n. ",
    "manticorp": "Argh, have update - now I'm getting:\n```\n /\nfinal class UnresolvableCurrencyPairException extends \\InvalidArgumentException implements Exception\n{\n    /\n     * Creates an exception from Currency objects.\n     \n     * @param Currency $baseCurrency\n     * @param Currency $counterCurrency\n     \n     * @return UnresolvableCurrencyPairException\n     /\n    public static function createFromCurrencies(Currency $baseCurrency, Currency $counterCurrency)\n    {\n        $message = sprintf(\n            'Cannot resolve a currency pair for currencies: %s/%s',\n            $baseCurrency->getCode(),\n            $counterCurrency->getCode()\n        );\n    return new self($message);\n}\n\n}\nArguments\n\"Cannot resolve a currency pair for currencies: GBP/USD\"\n```\n. Sure...it's pretty long winded and cryptic out of context...but here's the code where I'm trying to use this:\n```\n</<?php\nuse Money\\Converter;\nuse Money\\Currency;\nuse Money\\Exchange\\SwapExchange;\nuse Money\\Currencies\\ISOCurrencies;\nuse Money\\Money;\nuse InvalidArgumentException;\nclass PriceObj {\n    public function exchangeWith($converter, $exchange, $currency)\n    {\n        $thisClass = get_class($this);\n    if (!$currency instanceof Currency) {\n        $currency = new Currency($currency);\n    }\n\n    // $this->getAmount returns Money\\Money instance\n    $newAmount = $converter->convert($this->getAmount(), $currency);\n\n    $newPrice = new $thisClass($newAmount);\n    $newPrice->fromOld($this);\n    $newPrice->setExchangeRate($exchange->quote($this->getCurrency(), $currency)->getConversionRatio());\n\n    return $newPrice;\n}\n\n}\nclass SomeClass {\npublic function exchangeTo($price, $currency, $options = null)\n{\n    $converter          = $this->getConverter();\n    if($price instanceof PriceObj) {\n        $currencyPrice = $price->exchangeWith($converter, $this->getExchange(), $currency);\n    } else {\n        throw new InvalidArgumentException('Real error message here');\n    }\n    return $currencyPrice;\n}\n\npublic function getConverter()\n{\n    $exchange = $this->getExchange();\n    $converter = new Converter(new ISOCurrencies(), $exchange);\n    return $converter;\n}\n\npublic function getExchange()\n{\n    // $swap = Implementation of \\Swap\\SwapInterface\n    $swap     = app('swap');\n    $exchange = new SwapExchange($swap);\n    return $exchange;\n}\n\n}\n```\nIt's in a Laravel application :/\n. Hmm it appears to be working on server, just not locally...probably a configuration thing...\nIn any case, upgrading Swap version seems to have fixed for now - thanks a lot!\n. ",
    "matt-usurp": "I was surprised by this final declaration also. But the original author has good reason and I think I am in the same boat as he is.\nI can agree that mocking a value object is an anti-pattern, however by declaring final we cannot make use of interfaces that our decoupled code base rely on. \nFor example we have a MonetaryValueInterface that is used as the generic pointer to a money value object. Luckily all the methods we require in this interface map (almost perfectly, minus some parameter naming issues) to the ones available in your API. Unfortunately I cannot simply implement your library doing something like class MonetaryValue extends Money implements MonetaryValueInterface as I have been able to do with past libraries. Instead I am faced with a pretty massive refactor OR I must create a MoneyWrapper that constructs an instance of Money under the hood and just manipulates it with some rather pointless looking method calls.\nFor clarification, I used to use sebastian/money before it got deprecated, then for some reason moved to mathiasverraes/money before realising that this library was its origin and moved to this.\n. I was going to write a massive chunk here about my implementation but really it doesn't matter. \nThe crux of the issue is that the library supplies an implementation of Money that you consider final but people will want to build upon. Locking it down (c94206304b6dac6ca44c52c99cdd7f806f8e318c) is a very hostile choice in my opinion. The final (in this case) should be made by the developer in the application its used.\n. @bmeynell It really doesn't matter as its business logic and I am not going copy the code here. Although as I said above we have an interface that is used all over the code base. In more detail though it requires that an instance of the AppBundle\\Entity\\Currency is passed around with the Money. Funnily enough we cannot even extend Money\\Currency because it is final too.\nThe issue was marked as question which implies that there can be input. I am now confused as to why this hasn't been closed yet.\nUltimately, putting the extend and final fight to a side, why are there no MoneyInterface and CurrencyInterface for us to provide implementations of?\nEdit\nThe source of my frustration is down to the commit that just finals everything because the new maintainer decided the entire project needed a paradigm shift. However I can swallow that easier knowing it came with a major version bump so its an expected break when upgrading.\n. > There is a functional solution for almost all the issues that you could list.\nSure, and I as you said above \"composition is perfect\". This is what I had already started writing yesterday, however I decided to check the issues (or even create one) to ask this exact issue. In many ways I regret even writing here.\n\nBecause they are value objects and it doesn't make sense to provide alternative implementations as they would essentially be the same.\n\nThis is an excellent way of thinking, \"I have done it already so use mine\". They would be essentially the same except they are not, I need to convert my currency object to yours then convert it back again once its been passed along the chain of services, in most cases the original currency will be lost and it will probably triggering an additional database query to get it back. All because my currency (although having the same methods exactly) has one additional property in it which is its database primary key ($id) but you won't let me use it. This is what I mean by business logic. An interface would also fix this.\nReally, I understand why final is used. I understand the bonuses of doing this, how it prevents issues being raised for user-land created issues and such. I have read through the google discussions and the various blogs (even the one by the previous owner). Like I get it. I just cannot say that I agree 100% with the design decisions made in this latest release.\nBe it I haven't looked at your changes in this release that closely. I fully support how far this project has come and the new functionality is amazing. So yeah, maybe I am wrong here.\n. > I am sorry for that.\nIts fine, rather me talk here than everyone just sit on their hands keeping quiet.\nAgreed, this is how I have fixed it in most places. As for your embeddable idea I wanted this originally before I even needed to upgrade to money@3.0 but sadly doctrine embeddable's do not support foreign keys as of yet.\nI still have to create a wrapper or composition class to house this though as it needs to go through my existing classes, I don't want to add a hard dependency to your money package in our code base as that goes against our decoupled practices. This was really where I just wanted to extend to implement the interface and move on (this is what I was getting at in my original message).\n. ",
    "wimby": "@sagikazarmark @frederikbosch \n\nYou can't extend it, because inheritance does not make any sense.\n\nSorry, but this argument is invalid. Just because something is a Value Object does not mean it make sense to make it final:\nphp\nclass CzechMoney extends Money {\n    function __construct($amount) {\n        parent::__construct($amount, new Currency('CZK'));\n    }\n}\nOr more obvious should be different example: what if class Integer extends from class Number, shouldn't Number be final just because it is a Value Object?\nHow about OddNumber? OddNumber IS A Number and IS AN Integer, if some function accepts number, it should accept odd number as well.\nYou definitely should remove final from classes provided to others, because you never know in what environments it will be used. If anyone want to mock it, it's his/her problem, but look at programmers as adults not kids that don't know how to use it.\nP.S.: I would need to extend Money for information if the value is with VAT or not, how should I do this instead of creating my own Money class? Where should I put methods to add or remove VAT?. Thanks for quick response and good solution for Price! :)\nBut it just mean I don't understand difference between Money and Price (I put that in P.S. section). It doesn't prove that final is right here and I still think that two paragraphs above P.S. hold.\n\nyou don't extend string, int and bool types, do you?\n\nOh I think I would: e.g. AsciiString and Utf8String can be a good examples. They are String, but have different sets of alphabet. Or how about extending int to finite field Z5 or smallint? If some object is immutable doesn't necessarily mean that its type or class should be immutable too. The main rule here should be if extending satisfies Liskov substitution principle (which Price and Money does not. How about adding Price class to this package?).\nBut main reason, why I think you should remove it is because \"to enforce good design\" is not true either: final is not just recommendation -- it's restriction. If I want to change how Money is going to be JSON encoded (e.g. I want to add some \"$type\": \"Money\", so that decoding would be easier and based on $type value) I have a serious problem. Same with __toString or __debuginfo. I can't do this with composition.\nP.S.: DateTimeImmutable can be extended and it's really helpful to temporary fix bugs.. I am looking forward to your blog post, really :-)\nthere are some good articles about final, e.g.: http://ocramius.github.io/blog/when-to-declare-classes-final/\nwhen he states:\n\nWhen to avoid final:\nFinal classes only work effectively under following assumptions:\n\nThere is an abstraction (interface) that the final class implements\nAll of the public API of the final class is part of that interface\n\nIf one of these two pre-conditions is missing, then you will likely reach a point in time when you will make the class extensible, as your code is not truly relying on abstractions.\n\nYou don't have interfaces yet you make it final.\nInheritance means the class can be extended.\nMaybe we have different terminology for Value Objects. I understand it as an object thats equality is based on its value (iff two objects represent same values they are considered same). Its natural to make them immutable because changing value changes equality (which can be bad if it is in some hash based collection).\nThere is nothing about other logic.\nLets take array -- its equality with other arrays is based on equality of items and order of the items it contains, so it is a Value Object. Arrays are usually mutable, because when it contains lots of items its more efficient. Arrays provide methods for adding, removing and iterating, some serialization methods, some printing or debugging methods, it can have methods for sorting and searching, it can have methods for intersecting and unioning with other arrays and so on. It still make perfect sense to extend array for lets say a Vector that allows only numbers as its items. I still can add new methods e.g. method for sum or product or multiply with a number...\n@sagikazarmark It would help me, if you can show a (good design of course ;-)) solution for (at least) last \"question\" from my last comment: I need every JSON value that is not string, number, bool or null (JSON primitives) to be a (JSON) object with \"$type\" property equal to class name of the (PHP) object.\nphp\nclass Money implements JsonSerializable\n{\n    function jsonSerialize() {\n        return [\n            '$type' => 'Money',\n            'amount' => $this->amount,\n            'currency' => $this->currency,\n        ];\n    }\n}\nHow can I do it?. Why you need three reasons? One valid reason should be enough :D\nMore interesting is what you consider valid. Final keyword doesn't enforce no domain logic, it enforces no any logic, no extending at all.\nMaybe we should define domain logic.\nFor me Domain is set of objects from real world with its interactions. Money is definitely object from real world, it is basic building block for ecommerce or banking software. I can have in my domain some Money that is considered safe, lets say 100 dollars. If something is over this value, lets say a signature is required.\nHaving class SafeMoney in my Domain is perfectly valid. SafeMoney is_a Money. It can extend Money for some safety threshold value. Why you consider this bad design? For me this is THE (only) solution.\nJust because something is in package (or library) does not mean it can't be part of Domain.\nI would like to hear your definition of domain logic :-). Hello again... \n\nwhy do you think inheritance is the only/better solution?\n\nBecause (a) there is no interface for Money, if some function, lets say function pay(Money $m) accepts Money in typehint, there is no other way. And (b) its not about inheritance or polymorphism, is about extension. The keyword is extends no inherits. You closed Money (and Number) for extension.\n\nWhat you are trying to add here is a behaviour to a Value Object.\n\nNo. I have extended Money for safety threshold property which is a value. And -- this is harder to spot -- I have added some semantics with SafeMoney class. Its still a Value Object, it makes no decisions, no added logic.\nIf you think that final makes class better, then its only a religion. If you leave class without final, it can be used in same ways as with final. If you add final, you make it weaker.. Inheritance and interfaces are used to model IS-A relationship, compositions and aggregations are used to model HAS-A relationship. PHP's type system is based on IS-A relationship only. No objections here I guess.\n\nNo other way...for what?\n\nIf some function requires Money, there is no way to use composition, because type system won't accept objects that are-not-a Money.\n\n... it's actually a business logic rule forced into a Value Object.\n\nYou should really define domain or business logic, otherwise it loses any point here.\nThe business logic is outside SafeMoney -- SafeMoney is object that says: I'am Money (IS-A) and I have some adjective Safe which is a parameter. If you don't care about Safeness use me the same way as you use Money.\n\nExtension means that we have some kind of extension points (plugins, events, etc), composition strategies, etc.\n\nLet me read the article for you:\n\nA module will be said to be open if it is still available for extension. For example, it should be possible to add fields to the data structures it contains, or new elements to the set of functions it performs.\n\nAdding a field or new set of functions is usually done with inheritance. Of course you can create your custom way of extending classes, but unless PHP let you change IS-A behaviour, it won't work with current type system and you actually won't be extending (adding an item to an array won't extend the type of an array).\n\nYou could say that this is closed for extension, but it's not really correct.\n\nAny arguments here?\n\nWould you put that into the Money object as well?\n\nNo, because pay it is not Money's method. But I can extend Money for MoneyWithDNA that will carry Bob's DNA.\nIf everything you want (with final) is better design for everyone, then just remove final and let users themselves decide if they need inheritance or if composition is better for them. Money will be SOLID and pragmatic. It's that easy.\nIf you are tired of explaining why composition is almost always better again and again, you can write an article and just link it (or find an article there are lots of them), but don't deny inheritance. It has its well established and unreplaceable (if there is no interface) place.. > Based on how do you decide if a money is safe or not? How is this condition originated from the Money value? IMO this is something that YOU define and use in your code to decide how it should behave. This rule is probably subject of change, might be combined with others, etc. So I would put this kind of validation in a different layer which collects your rules and tells you if your money and/or other data passes these rules.\nExactly. My rules could be like this: \"Money is told to be Safe if it is under some arbitrary value. With Safe Money user is not required to sign transaction.\"\nSo how can you tell if Money is Safe? I can put this validation to a different layer (everywhere where its necessary and if something changes I need to find these places... there must be a better way). Or realize that Safe is a property of Money and can be lost with addition and multiplication and gained with subtraction and division. So I can create class SafeMoney with method isSafe() which covers this validations. Do we agree here? Now SafeMoney IS Money... damn I need to use SafeMoney everywhere even where I am fine with just Money.\n\nAs such, I don't think Money is closed for extension.\n\nThanks for articles. Can you show me how you extend Money please?\n\nbut is there an alternative implementation that makes sense and is different from the current one?\n\nThere is ALWAYS an alternative implementation. If you don't like SafeMoney, there are many more others: with double (or defined) subunit precision, with different rounding rules, without rounding at all, using just integers (more efficient but with limited amount)... usually if I have business rules for USD only it makes sense to have UsdMoney.\n\nWhat about single responsibility?\n\nIts still something to pay with.\nIf you don't want to remove final from Money, you can create an interface MoneyInterface and IS-A relationship would be achievable with that too.. Thanks @sagikazarmark for fixing this so quick \ud83d\udc4d\none little thing pls: validateNumberAsInteger('---123') should return false too.. actually, there seems to be still bugs for numbers -0, 000, +123 and even 123456789012345678+13456\n@frederikbosch https://3v4l.org/j6QUv. how about preg_match('/^-?[1-9]\\d*|0$/', $input) IMHO its more readable and faster (no need for creating new arrays). I guess ctype_digit is LC_CTYPE locale specific, I don't think you want to support all these characters:\nhttps://forums.phpfreaks.com/topic/157880-solved-you-guys-ever-use-ctype-for-validation/?p=832933. why wouldn't you just use https://github.com/moneyphp/money/pull/341? And if you don't want to support plus sign, remove it from signs.... @frederikbosch Confirmed.\nInteresting is that preg_match seems to be 2x slower in php7.0 than php5.6, creating arrays is about 2x faster... for preg_match to be faster than arrays would require numbers 2k+ digits.\nCycle is definitely a better way.. @frederikbosch same questions here:\nshould 000, +0, -0 and +123 be allowed?\nhttps://3v4l.org/0J2ij. I can't see 000 and +0 in tests... 000 returns false for FILTER_VALIDATE_INT. I don't think you should look into what PHP accepts as a token T_LNUMBER:\n- 0123 is read as octal representation of 83 in decimal\n- 0x123 is read as hexadecimal (291 in decimal)\nboth are allowed as integers in PHP parser but not with FILTER_VALIDATE_INT.\nI would hold with wikipedia and FILTER_VALIDATE_INT, which disallow anything starting with 0 except only 0. In Math usually does not make sense to have positive and negative zero (+0 and -0), but FILTER_VALIDATE_INT allows it, so what. Same with plus sign. \nIf I understand it correctly, what is allowed here goes to Calculator which HAS to handle it (gmp and bcmath can handle plus sign but behave differently with leading zero).. @frederikbosch sorry for delayed response.\n\nI did accept '000'... If you have strong arguments against this, please let me know.\n\nIt is probably irrelevant now, but if you asked...\nI don't have any arguments against accepting 000 or +123 as inputs. I usually try to go with some standard (like common arithmetics which is intuitive to user or common subset of PHP, BCMath and GMP which can help interoperability).\nIts true that it involves more code not to accept it, but another code would be required for e.g. comparison.\nOn the other hand be liberal in what you accept and conservative in what you send, so probably accepting 000 and +123 and then internally\u00a0normalize it to 0 and 123 is more robust.\nBut I think that the most important is specification what is accepted than what is accepted, because it's constraint and it's part of the interface.. Just for curiosity, what is the reason for using Yoda style? I would guess that typos are hardly imaginable with tests, code reviews and triple equal operators... isn't readability more valuable?. ",
    "TrogWarZ": "I agreed with that Money must be just immutable value object (VO), but there always can be alternatives that will leave it as VO but add some semantics, decorate, typehinting, make more dry and so on.\nEven if i want to do something \"bad\" like add some method called payThisToJohnOrNancy \u2013\u00a0that will add decision and behaviour, rely on other logic and so on, yes.. but why do you deny me to do that? Talks about \"bad\" or \"good\" practices are holywars IMO but let me (as a developer of my software) decide that.\nI personally like the way of libraries to stay minimalistic and don't add features that don't need majority of devs \u2013 other examples are already provided by other commentators like UsdMoney, PaypalMoney, getPercentageOf, etc (that will stay only VO and possibly will have final-keyword in my project after extension). But there is need adequate way to add them if i need and this library doesn't have them.\n\nyou can always fork this repo and use your custom version\n\nYes, i can fork library but i don't like to reinvent the wheel because it will be another project \u2013\u00a0to add force to this \"money abstraction\" i need to remove final, change new self to new static, add interfaces... and, hardest thing, community \u2013 this library, for example, used in tbbc/money-bundle (and many others). So, if i fork money, i need to fork another libraries (maybe, not just one) too. Big changes and headaches due to lack of force.\nHow do you think \u2013 what's the better way to add SafeMoney or UsdMoney for example? What's the best practices?. ",
    "onchie": "I mean, EUR/USD 1.25 is the same as USD/EUR 0.8, right?\n(I don't know much about standards in currency conversion)\nCan we just add it to the Money\\Exchange::quote() specifications?\n. @sagikazarmark  So, it's a no then. But, IMHO, you're idea is an unnecessary complexity.\n. Oh. I'm so stupid. I was requiring money/money instead of moneyphp/money.\nSorry for the trouble. Thanks!. ",
    "garak": "Yeah, changed \"name\" to \"code\" and everything is fine. Thanks for the suggestion.\nBTW, the changelog is missing that BC break (I'll open a PR for that).\n. Is there a way to map Currency in Doctrine without using reflection? If not, also changing a private property should be considered a BC break\n. @frederikbosch I see and I don't want to argue about that.\nBut considering that people are using this library with Doctrine, maybe a small mention could be fair.\n. ",
    "Padam87": "I like option 1 better. My projects implement it in a similar way. Currency is a custom type, not an embeddable, and I use a decimal field for the amount.\n. ## Option 3\nhttps://github.com/Padam87/AccountBundle/blob/master/Resources/Money/doctrine/Money.orm.xml\nhttps://github.com/Padam87/AccountBundle/blob/master/Doctrine/Type/CurrencyType.php\nhttps://github.com/Padam87/AccountBundle/blob/master/Doctrine/Type/MoneyType.php\nPros:\n- Almost as easy and simple as Option 1\n- You get to choose your own storage solution... use the provided types, or register a different one. You want to store the amount as string, not double? Need 4 precision? No problem, swap it out.\nCons:\n- The query time conversion is a bit iffy (PHP conversion would be OK by default)\n. @geekdevs The bundle takes a very different approach, any chance it would be able to adapt?\n. That is one of the reasons I'm using decimal in my projects, and why I would suggest Option 3, with the custom types + embeddables.\nSometimes (think of analytics) storing the \"real\" amount is necessary, and decimal allows to do that without the floating point issues...\n. I think this issue is too complex to have an universal solution.\nEmbeddable seems like the way to go for the value object, but the field mapping is opinionated, no matter what you choose.\nTherefore I strongly suggest this:\nxml\n<doctrine-mapping>\n    <embeddable name=\"Money\\Money\">\n        <field name=\"amount\" type=\"money\" />\n        <field name=\"currency\" type=\"currency\" />\n    </embeddable>\n</doctrine-mapping>\nThe library can provide a default money type (which may be a string, bigint or decimal), and a currency type.\nLet's say the lib provides a bigint type, and I would prefer a decimal for my system.\nI could still use this lib with my custom decimal money type, I would just have to override the money type in the doctrine config.. For you, decimal does not make sense, for me it does, there is probably someone who would prefer to use string... different use cases and opinions.\nIf you set it to bigint, you won't be able to override it, because doctrine won't allow you to change field types with overrides. If you create a custom type for it (you could even map it to bigint by default), it can be swapped out easily.. +1 Same here.\nOur system is HUF based, but we allow customers to use other currencies for payment.\nWe store the exchange rate at the time of purchase.\nWe also log expenses for every order, and store the ratio at the time of logging those expenses.\n1 to 4 currencies are usually involved for every order.\nFor our profit stats, we convert everything to HUF, using the stored ratios. This feature would make it a lot easier.. @sagikazarmark How about leaving the exchanges out of this, and just adding an optional 4th parameter?\nLet me know, and I will add tests.. ",
    "geekdevs": "@Padam87 absolutely, developing something similar to Option1 is in plans for next major version of the bundle. If it's implemented within moneyphp/money - even better, we can reuse it.\n. one thing to remember about storing amount as string is that sorting might be painful:\n1, 10, 2, 20, 3, 4\n. ",
    "MichaelGooden": "This is the approach I am using in multiple projects: https://github.com/MichaelGooden/mdg-money-doctrine\nCurrency is put in as a custom doctrine type (which incidentally didn't suffer from the \"BC break\" in v3.0.0)\nMoney is then implemented as an Embeddable using bigint for the amount and the Currency custom type.\nYou can then do fun stuff like arithmetic in the database:\n```php\nuse Money\\Currency;\nuse Money\\Money;\npublic function getBalance(UserProxy $userProxy, Currency $currency) : Money\n{\n    $qb = $this->repository->createQueryBuilder('t');\n\n    $qb->add('select', 'SUM(t.amount.amount)')\n        ->andWhere('t.amount.currency = :currency')\n        ->andWhere('t.userProxy = :user')\n        ->setParameter('currency', $currency)\n        ->setParameter('user', $userProxy);\n\n    $balance = $qb\n        ->getQuery()\n        ->getSingleScalarResult();\n\n    if (!is_numeric($balance)) {\n        $balance = 0;\n    }\n\n    return new Money($balance, $currency);\n}\n\n```. @programarivm Unfortunately none of your points are valid. All your linked resources are either irrelevant, referring to problems fixed in modern versions or talking about a bug in a specific adaptor for a minor DB engine (that has not even had a stable release in 3 years.)\nThis library intentionally uses string for storing the integer, which ties in nicely with Doctrine. You can have a look at (one) way of doing it in my library\nYour only vaguely relevant point is that machines running 32bit software are going to have a bad day. That said, if you are using some ancient 20 year old 32bit only server processor to handle millions in financials, you must be a bank. God help you.. @guiwoda I use my own :D https://github.com/michaelgooden/mdg-money-doctrine. @programarivm I find your vendetta most entertaining.. How? That is an internal object that is created dynamically when you request an exchange.\nTrust me, there is no way to do this without changing source files or making ugly hacks.. I could of course easily do that, but I feel that caching support for something like this that is accessing public web services would be used often enough to validate inclusion in the base project?. Maybe a bit extreme to bump the iso-currencies version from 2.0 to 3.0 but it works! This should be ready to merge.\nSide note: With this update the old Belarusian ruble (BYR) was removed as it has been discontinued in favour of the new Belarusian ruble (BYN). [https://en.wikipedia.org/wiki/Belarusian_ruble#Third_ruble.2C_2016_-_present]. Changelog done.\nThe only effective change in iso-currencies was removing essentially broken behavior that no one should have been relying on in the first place. Not BC breaking in my humble opinion. :D. Rather safe than sorry @frederikbosch. Thanks for merging this so quickly. Any chance we could get this tagged with a version?. ",
    "jkobus": "Any follow-ups @sagikazarmark?. ",
    "programarivm": "Hi everybody,\nUsing bigints is mentioned a couple of times in this thread, and many others out there, as being a natural way to integrate Doctrine with money. However -- please correct me if wrong -- are not bigints inherintly unnecessary and risky? \nHere are some facts:\n\nDoctrine will convert bigints into strings\n64-bit machines handle bigints differently than 32-bit machines\nEven in 64-bit architectures, a few developers have reported unexpected behavior when dealing with bigints\nThis is a tricky issue across different database vendors\nMapping SQL BIGINT to actual PHP integers is an issue\nDealing with bigints is all complexity that leads you to implement a BigMoney feature actually\n\nI may be ignoring something, but I wonder why it is encouraged to use bigint when it turns out that it actually violates the KISS principle, increasing the surface of vulnerability of applications using it.\nI think that in terms of simplicity, performance, scalability, and most importantly security, bigints should be used only when necessary; for example in astronomy apps. What is the point of using BIGINT as a rule of thumb? Keep in mind that the maximum BIGINT value is 18446744073709551615, and there's about $60 trillion on Earth -- which is $60,000,000,000,000.\nFor further information, please visit:\n\n\nDoctrine bigint from int to string\n\n\nHow to deal with integer limits?\n\n\nBug\u00a0#65613 | Bigint is truncated to 32bits even on 64bit machines\n\n\nbigint truncated via PDO?\n\n\nHow much money is in the world?. I'm still surprised that you'll find OK to use bigint arbitrarily without any good reason behind. My point is a general one, it is about sticking with a simplicity mindset when it comes to writing apps or using this or that library, because you want to control complexity in your apps. \n\n\nTo my understanding:\n\nDealing with money is not a necessary condition for using bigints\nDon't get me wrong, but not all apps need the currency feature\n\nBy the way, I found another issue about setting up Doctrine and Money for PHP:\n\n\nDoctrine embedded stopped working when upgrading from 1.3 to 3.0. On a different side note, what about BC Math and GMP vulnerabilities?\n\n\nCVE-2016-4537\n\nCVE-2017-7963\n\nPlease educate users by adding a disclaimer in the documentation: use bigints carefully, otherwise your app's vulnerability surface may increase for free.\n. I just posted this:\n\nThe Least Privilege Principle Applied to PHP Bigints\n\nOn the other hand, please refer to:\n\nWhen must arbitrary precision arithmetic functions be used in PHP?\n\nIMO, a disclaimer should be added informing users that in order for Money to work OK, your server needs to rely on special libraries for running precision arithmetic functions, and the attack surface of your app may be affected because of that.. OK @frederikbosch  please don't merge yet the exact phrase originally suggested as it is written right now in this PR. \nLet's elaborate on it a bit further.\n@sagikazarmark to my understanding the current Money library induce developers to infere that everything is OK with thinking in terms of BIGINT always -- because PHP is limited? -- and this could lead them to activate the BC and GMP functions. Would you accept this as an example of how violating the least privilege principle makes an app prone to human error? :)\nDon't get me wrong, your idea is great, and it is OK to include BC and GMP functions if you know what you're doing, but I think the Money library is silently evangelizing a bad practice among the developers community by not raising awareness about how things work behind the scenes.. I don't agree with the following:\n\nHowever, this is a generic purpose library which chose to use currencies and tries not to limit the maximum amount you can represent with it.\n\nIMO, Money should not be addressed to the general public including GMP and BC functions out of the box. But no problem. If you want to manage huge numbers, knowing what you're doing, then extend the library with the GMP and BC features.. Exactly, the magic shouldn't be like this:\n\nBC Math (requires bcmath extension)\nGMP (requires gmp extension)\nPlain integer\n\nAccording to the least privilege principle, we should simply have:\n\nPlain integer\n\nThat's it. No magic.\nThen, in order to run advanced, arbitrary precision arithmetic features, the API user would explicitly set the mode they wish to operate on -- GMP or BC Math. This way, for example if they decided to use GMP (explicitly) but it turns out that for whatever reason is off, the code will not run.. Thanks for letting me suggest how to make the library better.\n\nIf you don't want to use GMP/BC then don't enable the extension. \n\nThat was the point, it is you (Money's conceptual framework) actually encouraging to enable gmp and bcmath as shown in the following example.\n\nMoney should fix the problem, if you have either BC Math or GMP installed as extension.\n\n\nDifferent values in two servers with same php\n\nCan I address one question? I am really curious to know why we'd run arbitrary precision functions in common web apps.. Yep, the previous examples might not look very practical.\nAt this moment the idea is to make sure that the app won't run arbitrary precision arithmetic functions if a system administrator activates the extensions unintentionally -- this is an issue IMO, because moneyphp/money encourages to install the extensions.\nAlso, a malicious attacker could suggest somebody to just install moneyphp/money with the objective of enabling BC Math and GMP in order to use the extensions for other purposes. \nSo, who's behind the decision that the server runs arbitrary precision arithmetic?\n\nmoneyphp/money\nProgrammer\nSysadmin\nAttacker\n\nI believe this is an issue -- at least theoretically!\nThe API interface could also use a second parameter to enable the so-called safe mode, which is optional, like this:\n$fiveEur = Money::EUR(500, true);\n$tenEur = new Money(1000, new Currency('EUR'), true);\nThe global registry sounds really good. I believe it will bring awareness and give a bit more power to the programmer.. Hi, just provided this insight into another repo: https://github.com/php-amqplib/php-amqplib/pull/573\nLet me share this: https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-php-could-allow-for-arbitrary-code-execution_2017-093/\nI agree with this recommendation: Apply the principle of Least Privilege to all systems and services. Thanks for the remark. If my memory serves me, I copied that line of code from the following method:\n```\n     /*\n      * @return Calculator\n      /\n     private function getCalculator()\n     {\n         if (null === self::$calculator) {\n             self::$calculator = self::initializeCalculator();\n         }\n     return self::$calculator;\n }\n\n``. Yep,disableArbitraryPrecisionCalculatorsis really helpful in my opinion. Anyway I still wonder ifBcMathCalculatorandGmpCalculatorcould be moved frommoneyphp/moneyto a new repo (moneyphp/big-money`).. ",
    "AlessandraV": "Maybe this issue is dealing with floats? Part of the issue is that some of our is a float, integer or string before it is converted. So we added some code to handle this. I just now added the if $amount is greater than 20 mil and it seemed to make the large numbers output as not negative numbers. Here is my code:` \n```\npublic static function getMoney($amount, $options = array()) {\n    $defaults = array(\n        'currency' => self::$currencyCode\n    );\n    $options = array_merge($defaults, $options);\n$largeValue = false;\nif ($amount > 2000000) {\n    $largeValue = true;\n    $amount  = $amount / 10000;\n}\n\nif (!is_int($amount)) {\n    if (is_string($amount)) {\n        if (strpos($amount, '.') == true) {\n            $amount = floatval($amount);\n        }\n        elseif (intval($amount) == $amount) {\n            $amount = intval($amount * 100);\n        }\n        else {\n            $amount = floatval($amount);\n        }\n    }\n    if (is_float($amount)) {\n        $amount = intval(round($amount, 2) * 100);\n    }\n}\nelse {\n    $amount = $amount * 100;\n}\n\n$amount = $amount * 100;\n\nif ($largeValue == true) {\n    $amount = $amount * 10000;\n}\n\nreturn new \\Money\\Money($amount, new \\Money\\Currency($options['currency']));\n\n}`\n```\n. ",
    "Surt": "Ok, understood. Anyway, despite the \"value object\" approach, the \"Currency\" class could have a \"getSymbol\" as it have a \"getCode\". I read the approach you are giving to the library, the final class implementation, etc..\nProbably I will implement a more versatile formatter to reach my goals.\n. Actually my solutions are mostly specific formatters and parsers.\nWhat I don't like is the need of those dependencies over my code. I mean, I wrote lot of lines creating different formatters-parsers instances all over the code for just this library.\nI tried with composite, creating some kind of adapter for money, but there is a lot of duplicated code, and workarounds for __call, that seems like patches to me. :( (since the final don't allow to extend.\nI also tried creating an utility class with static methods, wich perform all the parsers-formatters instantiation etc.. \nI like the http://carbon.nesbot.com/docs/ approach. Where the \"entity\" performs all the translations, formats, etc by itself.\nwell, I guess I'll make up with it after a while :)\n. Finally I ended with an ugly workaround, creating a repository of static methods for some functionality. I don't like it but, it's functional for the moment.\n```php\nclass MoneyUtilities\n{\n    public static function extractPercentage(Money $money, $percentage)\n    {\n        $result = clone $money;\n        $percentage = $result->divide(100 + $percentage)->multiply($percentage);\n        $subtotal = $money->subtract($percentage);\n    return [\n        'percentage' => $percentage,\n        'subtotal'   => $subtotal,\n    ];\n}\n\npublic static function getSymbol(Money $money)\n{\n    return (new SymbolMoneyFormatter())->format($money);\n}\n\npublic static function getConvertedAmount(Money $money, $intl = true)\n{\n    return (new AmountMoneyFormatter())->format($money, $intl);\n}\n\npublic static function toString(Money $money)\n{\n    return (new IsoMoneyFormatter())->format($money);\n}\n\npublic static function parseString($money, $forceCurrency = null)\n{\n    return (new StringMoneyParser())->parse($money, $forceCurrency);\n}\n\n}\n```\n```php\nfinal class SymbolMoneyFormatter implements MoneyFormatter\n{\n    /*\n     * @var \\NumberFormatter\n     /\n    private $formatter;\n/**\n * @var Currencies\n */\nprivate $currencies;\n\n/**\n * {@inheritdoc}\n */\npublic function format(Money $money)\n{\n    // Create a NumberFormatter\n    $formatter = new \\NumberFormatter('es_ES', \\NumberFormatter::CURRENCY);\n\n    // Prevent any extra spaces, etc. in formatted currency\n    $formatter->setPattern('\u00a4');\n\n    // Prevent significant digits (e.g. cents) in formatted currency\n    $formatter->setAttribute(\\NumberFormatter::MAX_SIGNIFICANT_DIGITS, 0);\n\n    // Get the formatted price for '0'\n    $formattedPrice = $formatter->formatCurrency(0, $money->getCurrency()->getCode());\n\n    // Strip out the zero digit to get the currency symbol\n    $zero = $formatter->getSymbol(\\NumberFormatter::ZERO_DIGIT_SYMBOL);\n    $currencySymbol = str_replace($zero, '', $formattedPrice);\n\n    return $currencySymbol;\n}\n\n}\n```. By the way, triying to do this:\n/** @var \\Money\\Money $start */\n$start = Money::EUR(399);\n$ht = $start->divide(1.2);\necho $ht->getAmount().\"\\n\";\ngives me a InvalidArgumentException: Division by zero maybe it's something related to the php configuration?. still InvalidArgumentException: Division by zero  on master\nAnd the same behaviour when getting the percentage. It doesn't  happend when using strings for values in operations, instead of numbers....\n$money = Money::EUR(100); \n$percentage = $money->multiply(10 / 100);\n// gives percentage = 0\n$money = Money::EUR(100); \n$percentage = $money->multiply('0,1');\n// gives percentage = 10, the correct answer\nbut I can't make it work casting the value with (string)0.1, orstrval(0.1), it gives an InvalidArgumentException: Operand should be a numeric value, \"string\" given.\n:(\ncasting 0.1 to string gives me 0,1 maybe due to locale settings, I don't know. But the library must be agnostic.. Hi,\nPHP 5.6.30 with \nBCMath support => enabled\nDirective => Local Value => Master Value\nbcmath.scale => 0 => 0\nI'm using php-fpm through nginx\nIf I set the Calculator as \"Money::registerCalculator(new PhpCalculator());\" it works fine, but the division by zero appears when setting the BcMathCalculator\nAnyway, with PhpCalculator\n```\n        Money::registerCalculator(new PhpCalculator());\n        $money = new Money(100, new Currency('EUR'));\n        $ht = $money->multiply(0.5);\n    echo $ht->getAmount().\"\\n\";\n\n```\nthe amount returned is 0 :(. When debuggin I saw\n$this->getCalculator()->compare((string) $divisor, '0') === 0 // /vendor/moneyphp/money/src/Money.php (line 329)\nThe casted to string values gives me a comma instead a dot. (1.9 => '1,9')\nMaybe it's due to the Locale settings?\nsetlocale(LC_ALL, 'es_ES.UTF-8');\nEDITED:\nYep, it seems that Locale affects to number casting in PHP. Would be great to find a way to override this, in my actual situation I can set a str_replace comma by dot, but I doubt that this will work with any locale settings.. @frederikbosch I'm sending a number, but the library cast it to string, wich causes the problem. To be aware of scalar types must be a must-do. I've solved it, but using an ugly patch. \nWhoever is using the library as me will found a problem wich is related to that casting, except for some lucky ppl with default configuration been the one under the library was programed. \nAs I said, I solved it sending the number already casted and using str_replace but... as I see it if I'm sending a float I expect the system to take that float, not a particular cast of it.. echo sprintf('%.8g', 1.3);\ngives me '1,3' with comma instead of dot.\nI know it is a weird php behaviour, but also, if you decide not to take this in consideration it would be good to warn the users about this particularity.. printf('%.8g', 1.3);  // \"1,3\"\n        printf('%.8G', 1.3); // \"1,3\"\n        printf('%.8F', 1.3); // \"1.3\"\nhttp://php.net/manual/en/function.sprintf.php\nF - the argument is treated as a float, and presented as a floating-point number (non-locale aware). Available since PHP 5.0.3.\nso, \"%.8F\" seems to be the way to go.\n. Great! Thank you for your work, Keep going!. ",
    "AyubM": "You guys need to get a grip -- this is PHP not Java.\nI have to import 5 different classes just to do something basic with your library.\nWhatever you call this style, it goes against PHP community standards.\n. ",
    "ossinkine": "@sagikazarmark What about adding symbolFor method (like subunitFor) in Currencies interface?. @sagikazarmark Symbol is needed to pass it to NumberFormatter because:\n1. Not all common symbols are supported by intl extension.\n2. You cannot set fraction digits until the formatter does not know currency symbol.. @Gummibeer Currencies are also final. I can understand why value objects should be final, but why should services be?. Final interface? Seriously?. I agree, but if this is a service I expect it implements some interface and my new service (with the composition) also will implement it. And when I test my class which depends on this service I will mock interface which impemented by this class.. @Gummibeer Correct.\n@sagikazarmark Let's look at a following example.\nI have some class which depends on Converter:\n```php\nclass SomeService\n{\n    private $converter;\npublic function __construct(Converter $converter)\n{\n    $this->converter = $converter;\n}\n\npublic function doSomething()\n{\n    // ...\n    $this->converter->convert($money, $counterCurrency, $roundingMode);\n    // ...\n}\n\n}\nHow do you propose to add new behavior to `Converter`? And how should I write a unit test for `SomeService`?. @Gummibeer Actually you can impement your example right now with the composition:php\nclass NewConverter\n{\n    private $converter;\npublic function __construct(Converter $converter)\n{\n    $this->converter = $converter;\n}\n\npublic function __call($method, $arguments)\n{\n    if (strpos($method, 'convertTo') === 0) {\n        // some else checks\n        $this->converter->convert(...);\n    }\n}\n\n}\n``\nMy issue related to LSP. I want to be able to transparently replace original converter with my new one where it is needed. For exampleCachedConverterlike a [CachedCurrencies](https://github.com/moneyphp/money/blob/master/src/Currencies/CachedCurrencies.php)..CachedConvertermight cache a result of conversion. There are a lot of cases why decoration is needed,CachedConverteris one of them. Just try to imagine.\nAnother issue I faced is unit test. There is no way to test class which useConverter` without instantiate the converter. If the test creates a new converter it is not the unit test anymore.\n. @mbessolov Why someone should create own interface for converter and use it if converter is a part of this library and it is logical that it should be placed here? If two or more independend systems use converter, they will have two different interfaces.\nI understand I can stop using this library and create own new one, but this issue was created because we all want to make this library better.\nBesides, I have outlined the concrete problem and so far no one has proposed a concrete solution.. @frederikbosch I can create PR where create an interface but you will close it and say something like \"I don't see the issue in final class with no interface\".\nSo I've created this issue first to discuss here.\nDo I create such a PR?. I tried to keep it consistent with already existing classes.\nI'll do as you suggested.. Updated. @sagikazarmark It has been discussed a lot of times.\n\nfor any custom use cases it can just be copied and modified\n\nNo, you cannot just copies because original converter and new one don't have a common interface (see LSP). Class which use original converter does not accept new one.\nSecond reason is there is no way to test class which use converter because you cannot create a mock for converter.. @frederikbosch Unit test should test my class but not the converter.. I should not instantiate and use other objects if they can affect my code.\nThe goal of unit testing is to isolate each part of the program and show that the individual parts are correct. (Wikipedia). That mean if the converter will be broken my test should still be working.. Your position is understandable, although it is very subjective and difficult to accept.\nIntegration test is good, but it is not a replacement for a unit test, it can be a complement.. ",
    "kslimani": "It would be nice to have a \"reliable\" way to converts a money amount into an array (or object, ?) to retrieve splitted data (positive or negative, the unsigned part, the decimal part, the symbol, the thousand separator, the decimal separator and the mask).\nThis is usefull if you needs to display the amount in a \"fancy\" way. (thought it may be out of the scope of this library ?)\n. Should be something like : \n$vat = $amount->multiply($vatPercentage)->divide(100);\n(assuming $amount is a Money object).\n. ",
    "garikaib": "Thank you for this and your excellent work. Using arrays makes more sense\nanyway.\n. ",
    "digilist": "Thanks for your quick response! Just casting the value to string is more simple and a good idea. For me this would work. I don't know about other cases yet, as I haven't explored the internals of this library that much yet. But if that's the case, I agree with you, that this should be adjusted everywhere.\nHowever, what about cases in which an object is passed that cannot be casted to string? Then, there will be a \"cryptic\" error that the object cannot be casted to string (\"Catchable fatal error:  Object of class stdClass could not be converted to string\"). With an additional check and an explicit error message it will be easier for developers to identify the reason for that error.\nAnother case I am thinking about is the PHPCalculator if bcmath or gmp is not available. Then, the string must be casted back into an integer all the times. So maybe, if the value is already an integer or float, it might not be casted to string (it would work though).. ",
    "m4tthumphrey": "Is this still active? I presume I am right in thinking that this is to allow us to perform operations using more decimal places? Ie GBP 1.1535 * 0.4251 etc?. I was more enquiring than actually looking to use it! \nI have just looked into the custom currencies and I see how it works now! Thanks!. ",
    "gmponos": "Hello,\nWhat's the status of this? Is it gonna be merged?. > Further thinking about this: we can implement this functionality now using func_get_args.\n$money->add($m);\n$money->add($m, $m, $m);\n@sagikazarmark can you accomplish this without breaking BC? Most probably you can but I feel it will be a little dirty solution.. @sagikazarmark Sorry I thought that Money object implements an Interface.\nSince it does not you can remove the argument from function public function add(Money $addend) and have it as public function add() then use func_get_args and nothing will break since the class is also final.. Most probably I should have written that in the description but what I did was run the composer command that you have in the current package and commit the changes.. I am talking about this command which uses the iso-currencies package.. I thought about the same name too. Let's leave it open until any better suggestion/feedback comes up.\n\nI am not necessarily against this.\n\nNice.. Then I will start writing some tests about it.. > CurrencyList works for me too\n\nAgreed. Currency list would be even better!\n\nOK. I am not renaming it yet. Maybe something else comes up. Rather than naming of the class do you believe you could review the rest?. > do you believe you could review the rest\nAny news about this?\nAbout the class naming I was thinking about it. All the other classes have a suffix Currency but the name CurrencyList has Currency as a prefix. I am a guy that likes consistency. So I would've suggest instead one of the following.\n\nListCurrency\nArrayCurrency\nSimpleCurrency\nCustomCurrency \n\nLet me know if there is any of the obove that you prefer or I should still go with CurrencyList.. \ud83e\udd26\u200d My mistake... What I wanted to say is to use the Currencies suffix and my suggestions are these:\n\nListCurrencies\nArrayCurrencies\nSimpleCurrencies\nCustomCurrencies\n\nor if you still want to go with CurrencyList. > @gmponos can you finish the PR?\nDone.. I thought that you don't mind if I also state my opinion since I am on this discussion but I am not a maintainer.\n\nCurrently we have a few patch releases containing mainly new features, not actual patches which is kind of abuse of semver.\n\nAre you saying that you are going from 3.0.0 to 3.0.1 and that 3.0.1 version contains new features? Why not just go to 3.1.0?\n\nTagging a new release every time a new, mostly insignificant (no offense contributors) feature is added does not give us and users enough time to take a look at the changes, iterate whenever necessary, make them more mature. \n\nI aggree on this one but most importantly I believe this should be handled differently per case.\nBut I have to note a few things more.\n\n@sagikazarmark  since you are also a maintainer on Guzzle if I am not mistaken the new tag of guzzle took almost a year to be tagged. Let's just don't extend on why guzzle took so long but I hope this doesn't take so long also.\nPlease tag before dropping any  PHP version.. Inside the CurrencyList class I have added a function to get the CurrencyNumericCode.\n\nI've added this function because I thought it was required by the interface Currencies but it seems it is not.\nI believe that it should be removed.. I am not sure why styleci requires from me changes at classes that I have not changed. \ud83d\ude15 . What i would've suggest was something like this:\n``` php\n<?php\nnamespace Money\\Currencies;\nuse Money\\Currencies;\nuse Money\\Currency;\nuse Money\\Exception\\UnknownCurrencyException;\n/\n * List of supported ISO 4217 currency codes and names.\n \n * @author Mathias Verraes\n /\nfinal class ISOCurrencies implements Currencies\n{\n    /\n     * Map of known currencies indexed by code.\n     \n     * @var array\n     /\n    private static $currencies;\nprivate static $loader;\n\npublic function __construct() {\n       self::$loader = new ISOCurrenciesLoader();\n   }\n/**\n * {@inheritdoc}\n */\npublic function contains(Currency $currency)\n{\n    return isset($this->getCurrencies()[$currency->getCode()]);\n}\n/**\n * {@inheritdoc}\n */\npublic function subunitFor(Currency $currency)\n{\n    if (!$this->contains($currency)) {\n        throw new UnknownCurrencyException('Cannot find ISO currency '.$currency->getCode());\n    }\n    return $this->getCurrencies()[$currency->getCode()]['minorUnit'];\n}\n/**\n * Returns the numeric code for a currency.\n *\n * @param Currency $currency\n *\n * @return int\n *\n * @throws UnknownCurrencyException If currency is not available in the current context\n */\npublic function numericCodeFor(Currency $currency)\n{\n    if (!$this->contains($currency)) {\n        throw new UnknownCurrencyException('Cannot find ISO currency '.$currency->getCode());\n    }\n    return $this->getCurrencies()[$currency->getCode()]['numericCode'];\n}\n/**\n * @return \\Traversable\n */\npublic function getIterator()\n{\n    return new \\ArrayIterator(\n        array_map(\n            function ($code) {\n                return new Currency($code);\n            },\n            array_keys($this->getCurrencies())\n        )\n    );\n}\n/**\n * Returns a map of known currencies indexed by code.\n *\n * @return array\n */\nprivate function getCurrencies()\n{\n    if (null === self::$currencies) {\n        self::$currencies = $this->loadCurrencies();\n    }\n    return self::$currencies;\n}\n\n/**\n * @return void\n */\npublic static function setLoader(LoaderInterface $loader)\n{\n     self::$loader = $loader.\n}\n\n}\n```\nOne more solution could be that in someway you could require (not as dev) the moneyphp/iso-currencies and put in composer require/install/update commands to automatically fetch the ISO currencies and update the file. This means that the file must be added in .gitignore.. > But using static setters to implement a feature is not the correct way forward. \nYea I can feel you here. I just suggested that as a BC change that will resolve this issue. I believe we have an understand and I don't think this needs more argue. \n\nOne more solution could be that in someway you could require (not as dev) the moneyphp/iso-currencies and put in composer require/install/update commands to automatically fetch the ISO currencies and update the file. This means that the file must be added in .gitignore.\n\nPlease consider also researching this solution before moving to a Loader (as you said on the other issue about the new major release).. > Can you remember why we choose not to implement it like that?\nping @sagikazarmark . OK... i'll fix this. IMHO the example above is against defensive programming therefore I believe that it should not be an argument for implementing a feature like this.\n\nEncoding/decoding the object will lead you to generate new objects each time you call getAmount function. This might end up with unwanted results.\nAlthough it's might be an extreme scenario, having it as an array makes the Money object mutable. No one can ensure the same amount value when it will be converted back to an object.\n\nDoing a long shot here I believe that this class ChargebackNotification will be used to an API or for storing it to the database. In both cases this has to do with the implementation of your Client or Database.\nFor instance doctrine supports having a field as Json. Guzzle client supports converting an array or an object to a JSON automatically. I believe twig also has a function for serializing things etc etc. \nSo IMHO you shouldn't encode it in the first place when you call addPayload.\nSorry if I am not getting it maybe I miss the bigger picture.. Sorry for saying my opinion although not a member of this library but I really believe that serialization/deserialization has nothing to do with the library.. I am not sure if my case was clear enough since I didn't understand how returning a fixed exchange of 1 will solve my problem. So I will explain a little better.\nBoth my application and the payment provider read and understand amounts as minor units but I use IsoCurrencies which says that the HUF has 2 decimals but Payment Provider says that HUF has 0 decimals\n| amount | my value of amount as minor | their value of amount as minor\n|---------|--------------------|---------------------------------\n| 1 HUF   | 100 |  1\n| 2 HUF  | 200 | 2\n| 5000 HUF | 500000 | 5000\nand vise versa there are other payment providers that we need the oposite\n| amount | my value of amount as minor | their value of amount as minor\n|---------|--------------------|---------------------------------\n| 1 IDR   | 1 |  100\n| 2 IDR | 2 | 200\n| 5000 IDR | 5000 | 500000\nand bit coin too. We have 8 and they have 6\n| amount | my value of amount as minor | their value of amount as minor\n|---------|--------------------|---------------------------------\n| 1 BTC | 100000000 |  1000000. Hello, basically most of the questions can be answered through the test case that I have added.\nOn the test case I just simulated the same thing as my App is doing but let's take it from the top and answer your questions just to be specific here:\n\nIt returns it as exponential.\nit is represented as a float. check the test.\nI guess not because PHP_FLOAT_MIN is 2.2250738585072e-308 and I just have e-15\n\nI will give a try to the Number but never the less should this be inside the DecimalParser?. Any idea how this should be handled after all?. Just out of curiosity.. is there any benefit by removing it other than getting rid of the extra function call?. It seems that this PR was created by the fact that the BitcoinFormatter accepts a list of currencies. Checking the file of the formatter.. this raised also some questions for me as well..\n\nWhy is it needed to pass Currencies inside this formatter since it is specific for only one Currency which is Bitcoin and not in general about about crypto currency.\nIf the following statement must apply if (BitcoinCurrencies::CODE !== $money->getCurrency()->getCode()) then why is this needed:\n\n$subunit = $this->currencies->subunitFor($money->getCurrency());\n        $valueBase = Number::roundMoneyValue($valueBase, $this->fractionDigits, $subunit);\nWe already know the subunit of the currency.. it's the subunit passed on the constructor... Hello there,\nMost probably you are referring to the ISOCurrencies class. The Currencies of this class are fetched from this API. So the official ISO declares that IDR has decimals and this is the file that updates the ISOCurrencies. There might be other lists that point that IDR does not have decimals, not sure. I think I have run into some of them.\nFrom my experience as I work at a company that handles money everyday and believe me this is a very common mistake. IDR officially has 2 decimals but due to inflation (not sure if inflation is the correct word) IDR is an underestimated currency. People that are using IDR they are trading using thousands or millions of IDR in order to buy goods and this made the decimals redundant in everyday life. For instance in order to buy a loaf of bread they are spending 5.000 IDR. The amounts here are random.\nIf you want to handle IDR currencies without decimals you will have to implement your own Currencies class or initialize a CurrencyList class which allows you to pass your own currencies/decimals.. I tried to find a related PR but I couldn't and I thought it had no reason to be there. Now I see.... \ud83e\udd14 Now that I think of this... not sure if it is the best.. If a developer passed currency as a string he will get the deprecation twice if he used an Aggregator along with the Parsers you have inside here.\nSo that might be the reason of not having this feature at the start.. Correct... will do the changes. @money-team let me know if this going to the correct direction for you in order to finalize the PR and fix the CI failures.. @frederikbosch I though about the same solution too. But I dislike it for the following reasons:\n\nFirst of all I had in mind some next steps that can be taken. It can be found here. The argument about duplication stands almost for every parser. So the next step could be using a trait in all parsers and avoiding the duplication.\nSecondly I will need to do some checks inside exponential parser and then the same checks will be repeated inside the decimal parser. For instance:\n\nExponentialParser.php\n```\n    public function parse($money, $forceCurrency = null)\n    {\n        if (!is_string($money)) {\n            throw new ParserException('Formatted raw money should be string, e.g. 1.00');\n        }\n    if (null === $forceCurrency) {\n        throw new ParserException(\n            'ExponentialParser cannot parse currency symbols. Use forceCurrency argument'\n        );\n    }\n   ....\n  $this->delegatedParser->parse(...);\n\n```\nThe same checks above will be checked again inside the delegatedParser\n\nThe initialization process in order to add inside an AggregatorParser a DecimalParser and an ExponentialParser it would feel kinda odd for me...\n\n$decimal = new DecimalParser(...);\n$exponention = new ExponentialParser($decimal, $currencies);\n$aggregator = new AggregatorParser([\n    $decimal, \n    $exponential\n])\nAnyway my current solution stands to the following facts:\n\nMost of the parsers already have the same code.. written a little bit differently.. check the PR above.\nI could implement the solution directly inside DecimalParser but my solution requires to use number_format function. if I did that most probably it would raise some questions like why the DecimalParser doesn't use the number_format function on the rest of the code. And also are values like these \"1.234e-11\" considered \"Decimals\".. Playing with words here...\n\n. Done.. At least add a docblock about it in order not to be spawned again?. Hello just thinking out loud here... why not requering bitcoin currencies instead and not the interface and remove the fraction argument?. You have Currency and Money object implement JsonSerializable. Doesn't this make it required?\nhttp://php.net/manual/en/class.jsonserializable.php\nNow that I've checked it online I see that PHP says that json extension is compiled into PHP by default\nsee http://php.net/manual/en/json.installation.php\n\ud83e\udd14 so why does PHPStorm suggests this? Is it possible for someone to compile PHP without this extensions?. it just occurred to me... https://twitter.com/gmponos/status/1073611157792006144. Note that numeric code is used only for ISO currencies and does not exist for all currencies or in the interface.. dup of https://github.com/moneyphp/money/pull/527 ?. My bad... \ud83d\udc4d  misread... Most probably you may disaggree with this name but I could not come with any better. Any thoughts. What do you mean? Does it need to be the same lenth as CurrencyList So it means 13 -?. Done. Done.. Done. Done. Done. pfff.. copy-paste!. I need to fix the missing s at %s before merging this.. Fixed. Done.. Done.. I believe it's fine now. Check it out :). I agree... I believe it's fine now. Check it out :). Done. Done. I believe it's fine now. Check it out :). OK I have made the change to BitcoinMoneyParser as well.. just to be sure here,,, $forceCurrency is never used inside this parser... so not sure if it makes sense to have a deprecation in here.... ",
    "willemstuursma": "Hi @frederikbosch. \nHere at Mollie we think adding a PreciseMoney type is a great idea, but you should not be able to convert from PreciseMoney to Money. . @frederikbosch Why don't you drop by our office next week and we can discuss it with out team - maybe a few beers and we can see how Mollie can help bring this to fruition. . Oh congrats! Well, send me an email when you're back and enjoy your honeymoon together! . @pcbulldozer in the mean time, you can also create high precision currencies and use those.. We would love to see a PHP 7.1 version. . No sorry, they have to go on the class file for PhpStorm to understand it. They could also go on a parent class but than, logically, you would have to move the __callStatic method too.\nI'm not sure what you think is unreadable? It would need one line in the PhpDoc per factory function.\nAn alternative would be to drop the __callStatic and get proper static methods.. I agree with @Gummibeer. \nAs this is a library, the code won't be browsed a lot by most people using it but the syntax completion will be used a lot. . Calling in @shirshir who had another solution.. Also, slightly related:\nnew AggregateMoneyFormatter([\n                '*'   => new IntlMoneyFormatter($numberFormatter, new ISOCurrencies),\n                'XBT' => new BitcoinMoneyFormatter(8, new BitcoinCurrencies())\n            ]) \ninstanciates the formatters in the correct way (e.g. one formatter to format all currencies and Bitcoin).\nThe formatters cannot be passed as a normal array, even though they have a contains() method that can be used to see if they support the currency. . I don't want to define any output templates, I need a formatter that I can just pass the locale and it will deal with it.\nI'm not an expert on which formatting applies in each territory, so I need the formatter to figure this out for me. \nI just need $formatter->format($money, string $locale); It works perfectly fine for the ISO currencies. \nPersonally, I wouldn't go for any string chopping / concatination but instead try to reuse some of the goodies from ext-intl. . I can do a PR if you want?. Hi @frederikbosch, I can't get your example to work: \n```\n<?php\nrequire  \"../vendor/autoload.php\";\n$currencies = new \\Money\\Currencies\\AggregateCurrencies([\n    new \\Money\\Currencies\\ISOCurrencies(),\n    new \\Money\\Currencies\\BitcoinCurrencies()\n]);\n$isoNumberFormatter = new \\NumberFormatter('en_US', \\NumberFormatter::CURRENCY);\n$xbtNumberFormatter = new \\NumberFormatter('en_US', \\NumberFormatter::CURRENCY);\n$xbtNumberFormatter->setSymbol(\\NumberFormatter::CURRENCY_SYMBOL, \"\\xC9\\x83\");\n$formatters =  new \\Money\\Formatter\\AggregateMoneyFormatter([\n    'XBT' => new \\Money\\Formatter\\IntlMoneyFormatter($xbtNumberFormatter, $currencies),\n    '*'   => new \\Money\\Formatter\\IntlMoneyFormatter($isoNumberFormatter, $currencies)\n]);\n$amount = Money\\Money::XBT(1);\nvar_dump($formatters->format($amount));\n```\nOutput:\nstring(7) \"XBT0.00\"\nAre you sure you can use the IntlFormatter?. Okay, but then the symbol is still not used (even though it is set).. > change the number of decimals in the \\NumberFormatter.\nShouldn't it be set automatically by the IntlMoneyFormatter based on the Currency?. @frederikbosch do you have any more ideas, or should I dive into it?. > @willemstuursma As you mentioned yesterday that you would like to see this land, could you reply and say if this is what you are looking for?\nTo be quite frank, I would prefer all out of the box supported currencies (ISO + XBT) to be configured as magic methods in the phpdoc for the Money class (as per #409). \nThey should be created using some script of course. \nI a library consumer, I don't really spend any time in the Money class and as a Money developer, I can always collapse the comments using my IDE. \nHaving a helper script is better than nothing, but not the best solution for library consumers. . What if we were to move the phpdoc with the method definitions into a trait or interface that is used exclusively for this?. @Gummibeer I'd prefer an auto generated file that is part of the repository - so no set up needed, and scripts only needed for re-generating the file if new currencies are added. \nI'd also move the __callStatic() method into the trait, so I'd name it something like Money\\Money\\StaticHelperMethodsTrait.. What's up with the overzealous StyleCI job @frederikbosch?. Thanks @frederikbosch. Not used to final classes, added. . Looks great, good naming too.\nOnly thing I can add is that I think the list of @method declarations should be sorted. . That's not possible or needed, since the generated file is part of this repository anyway.. We're very happy at Mollie with this addition! . This is our current implementation, for reference:\n```php\nfunction least(Money $first_item, Money ...$monies): Money\n{\n    $least = $first_item;\n    foreach ($monies as $money) {\n        if ($money->lessThan($least)) {\n            $least = $money;\n        }\n    }\nreturn $least;\n\n}. Sure, that is also very easy but a convenience function would even be handier:\nphp\n$json = json_decode(...);\n$money = Money::fromJson($json);\nstdClass is the default output from json_decode, but arrays are also very common.. > Well, after decoding from JSON it does not really have anything to do with JSON, so fromJson sounds odd to me.\nIt's supposed to be the inverse of json_encode($money);.. Maybe the naming could be improved. . This is an example use case I had in mind:\n```php\n<?php\nclass ChargebackNotification\n{\n    public function addPayload(Payment $payment, Money $amount)\n    {\n        $this->payload = json_encode([\n            \"amount\" => $amount,\n            \"payment_id\" => $payment->getPrimaryKey()\n        ]);\n    }\nprotected function getAmount(): Money\n{\n    $decoded = $this->getPayload(); /** @var stdClass $decoded */\n    return Money::fromDecodedJsonObject($decoded->amount); //?\n}\n\n}\n```\nI hope this clarifies it a bit. As you can see, the encoded Money object is part of a larger structure.. We came up with this:\n```php\nclass PayPalCurrencies implements \\Money\\Currencies\n{\n    /*\n     * @var ISOCurrencies\n     /\n    private $iso_currencies;\npublic function __construct(ISOCurrencies $iso_currencies)\n{\n    $this->iso_currencies = $iso_currencies;\n}\n\npublic function contains(Currency $currency)\n{\n    return $this->iso_currencies->contains($currency);\n}\n\npublic function subunitFor(Currency $currency)\n{\n    switch ($currency->getCode()) {\n        case \"HUF\": return 0;\n        case \"TWD\": return 0;\n    }\n\n    return $this->iso_currencies->subunitFor($currency);\n}\n\npublic function getIterator()\n{\n    return new \\ArrayIterator([\n        new Currency(\"HUF\"),\n        new Currency(\"TWD\"),\n    ]);\n}\n\n}\n```\n```php\nclass PayPalExchange implements \\Money\\Exchange\n{\n    /*\n     * @var PayPalCurrencies\n     /\n    private $paypal_currencies;\n/**\n * @var ISOCurrencies\n */\nprivate $iso_currencies;\n\npublic function __construct(PayPalCurrencies $paypal_currencies, ISOCurrencies $iso_currencies)\n{\n    $this->paypal_currencies = $paypal_currencies;\n    $this->iso_currencies    = $iso_currencies;\n}\n\npublic function quote(Currency $baseCurrency, Currency $counterCurrency): CurrencyPair\n{\n    Assert::eq($baseCurrency, $counterCurrency);\n\n    $subunit_difference = $this->paypal_currencies->subunitFor($baseCurrency) - $this->iso_currencies->subunitFor($baseCurrency);\n\n    return new CurrencyPair(\n        $baseCurrency, $counterCurrency,\n        10 ** $subunit_difference\n    );\n}\n\n}\n```\nAnd then create a Converter using the custom currencies and convert to the same currency. . I guess you could also just cast the array to stdClass using (object) or the other way around and get rid of half the lines.. I guess that it would be nice in the test to show its opposite usage:\n$normalized = json_decode(json_encode($money));. ",
    "pcbulldozer": "Hi all. Not sure where to see if there is any activity on this (and the other release) items?\nLooking for a Money library around which to wrap a series of financial calculators and models - this one works well, bar the precision aspects. I'd have thought the quickest (perhaps not the most elegant) way to get there would have been to allow for instance-specific registration of a calculator (since the calculators can already be created with higher precision) and then to expose a NO_ROUNDING mode on the multiply and divide methods. I see @frederikbosch comments above - I'd probably have gone the other way and expand the functionality of Money, rather than add PreciseMoney to the mix, but I think I can see his motivation. \nEither way, great library, great potential, so hoping these items are on the cards for the near future!. thanks @willemstuursma will be giving this some thought today! appreciate the response.. ",
    "arubacao": "@willemstuursma Did you take a look and mind sharing your solution? . ",
    "elazer": "There is a test for this already, but the tests passed even though it should have failed.\n$this->assertEquals(1, '1.'); does not fail.. ",
    "mnvx": "Thanks. I think it is good way.. ",
    "miclf": "@frederikbosch & @sagikazarmark it\u2019s nothing :)\nThanks for making submitting PRs to the docs easy in the first place because, for tiny fixes like this, too many projects underestimate how perceived easiness is important in one\u2019s decision to contribute or not.. ",
    "stefandoorn": "I had to move on already a bit to get the support in my current project, so I took your suggestions and forked the repo and implemented support.\nProgress here: stefandoorn/money@7b267d1b625798dceb2f4ab5861fdb00d42b4a79.\nIf this makes sense, I can finalise and submit the PR.. I'll take a look on that this week. I'm ok with it :) I think the main criteria should be that we are not introducing BC.. @sagikazarmark I've been thinking about this, but I'm afraid extending the current interface is going to incur BC, as it will require implementations (which are not always just this library) will need to add this additional method also. So then this would require releasing a new major release. Or, am I missing something?\nWe might be able to have 2 interfaces and implement both interfaces on the implementing class. That could be of something. Then it's kind of optional to the implementing party. Shall I take a look into that?. Alright. \nAdditional: what do you think of combining Converter & HistoricalConverter, either by adding a 'convertHistorical' method or adding an optional variable to 'convert' and checking inside whether Exchange implemented the HistoricalExchange and throwing an exception if not?. ",
    "yooouuri": "That solves it, many thanks!. ",
    "jarobe42": "Apologies for jumping in, but I had a go at extending @stefandoorn's changes as per the discussion: https://github.com/moneyphp/money/compare/master...jarobe42:historical-exchange\nBasically, I've added an extra HIstoricalExchange interface which extends Exchange. Along with this, Converter has a convertHistorical which throws an exception if called when the Converter's exchange does not implement HIstoricalExchange\nBefore I go further, is my understanding of the suggested changes correct? . @frederikbosch The issue I see with the Factory Pattern is that a new Converter instance is going to be created for each and every historical date. This could potentially grow quite large if you were to be iterating over a list of values of different dates that needed to be converted.. > Why would the list be large? If you iterate it, the extra converter class would be gone when you move to the next item.\nIn which case we'd lose the ability to reuse a converter for a repeated date - we'd be instantiating a new Converter each time. It's not a huge issue, but I just think it fails to really solve the problem.\nPerhaps my interpretation is wrong, but to me, the Converter object should not be pinned to a date - rather it's just extra information to be passed on to the Exchange.. Thanks for the feedback, @sagikazarmark. I've made the discussed changes, let me know if there's anything else!. Good catch. I've updated this.. Good idea. I'll add that in.. Nothing changed here - I swapped the order of these two following lines, as it made more sense to me that $decimal would be used immediately after being cast;\n$decimal = (string) $decimal; and\n$subunit = $this->currencies->subunitFor($currency);\nThere's no real benefit to doing this though, so I'll flip it back around so as not to add confusion in the git history.\n. trigger_error is something I haven't used much lately either, but unless I'm mistaken, there'd be no way to indicate that the use of parse is only deprecated when $currency is parsed as a string. I'd be concerned that showing a deprecation notice for all calls of parse, including those that pass the correct Currency parameter, would be more confusing.. ",
    "Gorbov": "Catch it!\nError in BcMathCalculator.php or  BCMath extension of PHP7.\nAfter remove support of BcMathCalculator.php:\nphp\npublic static function supported()\n{\n    return FALSE;//extension_loaded('bcmath');\n}\nI got a right value:\n1000.10 RUB = 100010 RUB PARSED\n1000.10 RUB = 3269 AZN. ",
    "NinoSkopac": "Awesome, thanks.. ",
    "jildertmiedema": "This will fix the multiplication of \"0 x 0.8\". ",
    "egbertwietses": "Why do you have add and subtract functions on a class that you put on the same level as an integer / string? Anyhow composition it is then.... ",
    "Ellrion": "\nCan you please clarify what you mean by redundant?\n\nI use florianv/exchanger (not florianv/swap). Becouse swap it wrapper for exchanger. I use many implementation of  Exchanger\\Contract\\ExchangeRateProvider and when i want to use Money\\Exchange \nI have code like this\nphp\n/**\n * @var Exchanger\\Contract\\ExchangeRateProvider $service\n */\n$exchange =  new SwapExchange(new Swap(new Exchanger($service)));\n$converter = new Converter($this->app['money.currencies'], $exchange)\nbut better\nphp\n/**\n * @var Exchanger\\Contract\\ExchangeRateProvider $service\n */\n$exchange =  new ExchangerExchange($service));\n$converter = new Converter($this->app['money.currencies'], $exchange)\n And there will be no dependence on florianv/swap\nPlease excuse my bad English. @frederikbosch Whot about it?. ",
    "eberkund": "Thanks for the suggestion, that is indeed what I am doing right now.\nI can see what you're saying but in the case of crypto-currencies isn't it the same situation? I can't imagine any cases where you would have currency \"XYZ\" and currency \"xyz\" refer to different things.. I think it is the same issue which stems from currency symbols being case sensitive. You'll have to use strtoupper like @sagikazarmark suggested.\nPersonally I think currency symbols should be case insensitive but this is a decision for the library author/maintainers.\n. ",
    "sserbin": "This also results in an exception when using Currencies\\IsoCurrencies to determine the currency scale:\n```php\n$usd = new Money\\Currency('usd');\n$currencies = new Money\\Currencies\\ISOCurrencies;\n$scale = $currencies->subunitFor($usd); // throws Money\\Exception\\UnknownCurrencyException: Cannot find ISO currency usd\n``\nI suppose theCurrencyconstructor should normalize the input *or* theCurrencies\\ISOCurrenciesshould test forcontains` in a case-insensitive manner.\nOr should I create a separate issue?. ",
    "pumi2527": "\n\n379.\n\n",
    "brunoleles": "@sagikazarmark you are correct, it was a implementation for #381.\nI seen the response after I've made the pull request.\nclosing. :]. ",
    "mcordingley": "The getConversions method is intended to be able to be taken public if the user is interested in finding the exact chain of conversions needed to get from the base currency to the counter currency. I left it private, as increasing visibility is easier than decreasing it.. Sure. It's all about being able to resolve exchange rates between currencies that don't have a direct mapping in the base exchange. If such a direct mapping doesn't exist, then it's impossible with the current tools to resolve an exchange rate. The existence of ReversedCurrenciesExchange already suggests that there are gaps in the set of currencies exchanged. This complements that by finding a minimal set of conversions using intermediate currencies to make the desired exchange.\nIt can also enhance a fixed set of exchanges. Stacking this on top of ReversedCurrenciesExchange means that a fixed exchange with only mappings from USD to other currencies could now map between any two currencies found in the exchange.. Seems as if that code could get shifted out into a CalculatorRegistry that classes can use, but I don't have the particulars fully worked out in my head and it's beside the point of this PR. I think I'd rather keep this code dumb with regards to resolving calculators.. That would speed things up in the common case of a direct mapping.. Good catch. That's in, and I think we're good to go. The only part I don't like is the Calculator handling code, but that's a whole separate issue. \ud83d\udc4d . You're welcome!. I don't entirely follow. Did you mean \"Please don't use\"?. Just pushed a removal of those use statements.. Updated.. Updated.. If precision is a concern here, then there has to be a Calculator.. Added a Calculator argument to the constructor. What do you think about letting it be an optional argument that defaults to one of the built-in Calculator classes?. ",
    "melokki": "Yes, I've saw that the add function returns a Money object in the code after I wrote this message, but when I came the delete the message it was too late, the replies were already here.\nThank you for your answer @sagikazarmark It helped me to solve the problem :)\n. @vladyslavstartsev \nI am using this library with laravel. You just add the library to your composer.json file like any other package, composer update and you are ready to go.\nExamples from the documentation worked out of the box for me.. ",
    "Banandrew": "@sagikazarmark Hello, could you please confirm that variadic arguments work? I\u2019ve just tried the example from the documentation in isolation, it only adds the first argument and ignores the rest:\n```PHP\n$value1 = Money::EUR(800);                // \u20ac8.00\n$value2 = Money::EUR(500);                // \u20ac5.00\n$value3 = Money::EUR(600);                // \u20ac6.00\n$result = $value1->add($value2, $value3); // \u20ac13.00, because $value3 is ignored.\n``\n**EDIT:** To elaborate, that\u2019s on3.1.3.. @frederikbosch Thank you, the reason why I got confused is because the documentation onmoneyphp.orgresolves to thelatestversion by default \u2014 perhaps, it would be better to usestable` instead.. ",
    "XAKEPEHOK": "Maybe it is good idea will be add additional method isEquals which will be like alias for equals for keeping backward capabilities. ",
    "vladyslavstartsev": "@melokki Thanks! I was having issues because 1) I didn't know what is value object 2)I didn't know how to represent it (Money, Currency and etc.) in DB.. ",
    "EmiiKhaos": "Do it. There is no reason to support php 5 anymore for new releases. Any project staying at 5.x doesn't deserve it ^^\nAlso consider to use php 7.1 as minimum . ",
    "jaikdean": "I fully support bumping the requirement to 7.1, it brings a lot of benefits. A lot of popular open source frameworks and libraries (Symfony, Laravel, Doctrine etc) are making the switch to 7 or 7.1 in their next major release.\nI'd suggest only backporting bug fixes. The current feature set is very strong, so new features are unlikely to be critical to existing projects, and in the cases where they are, upgrading to PHP 7.1 is often quite straightforward.. @sagikazarmark Does anything else need doing on this?. Good spot, I've added some and they flagged up a bug in the GmpCalculator::mod() implementation, which I've now fixed.. ",
    "Gummibeer": "Cause the active support ends this year and the security next year I also see no reason to create more releases with php5.6 or even lower in mind.\nhttp://php.net/supported-versions.php\nFor me: every library that, active, supports php5 anymore slow down the acceptanceof php7.. But PhpDoc Tags don't make code unreadable!? They have a different styling, could be collapsed and are helpful to identify the start of a new class/method. And they also help the developer to find the right method and what he has to pass and what he get in return.\nSo I have to support a good code documentation. Yes, it will make the file longer but not unreadable.. I agree - doing this by hand will end in chaos. If the DocBlock isn't this easy to generate a package that does something similar is https://github.com/barryvdh/laravel-ide-helper. PhpStorm also understands something like.\nsrc/Money.php\nphp\nclass Money {\n // __callstatic\n}\ndoc/Money.php (autogenerated)\nphp\nclass Money {\n    public static function euro() {\n        return 'EUR';\n    }\n}\nIt will have a small hint that this class exists two times but autocomplete and so will work. Cause of the fact that this file isn't loaded by composer there is no problem on runtime. The only \"problem\" is how to generate this file automaticly. And I think it would be enough if this repo ships a generate_money_doc.php file that will do the job on the local machine and don't have it in repo.. I have thought about it and have some pseudocode:\ngenerate_money_doc.php\n```php\n$currenciesClasses = [\n  \\Money\\Currencies\\ISOCurrencies::class,\n];\necho '<?php'.PHP_EOL;\necho 'namespace Money;'.PHP_EOL;\necho 'final class Money implements \\JsonSerializable {'.PHP_EOL;\nforeach($currenciesClasses as $currencies) {\n  foreach(currencies as $currency) {\n    $code = $currency->getCode();\n    echo 'public static function '.$code.'($amount) { return new self($amount, new Currency(\\''.$code.'\\')); }'.PHP_EOL;\n  }\n}\necho '}'.PHP_EOL;\n```\nWith this the dev can also add his own currency lists and this will produce a file that contains all the overloaded static methods.. @shirshir Which version of phpstorm do you use? The Code generated by by my snippet shows autocomplete and works except of the point that it shows that the class ist defined two times.\nAnd the benefit is that it also works in other IDEs cause it creates the class with all methods in normal php style.. I will do. But adding a phpstorm only version would be a nice addition but not as the only one. Cause it will disable the support for Atom, Sublime and whatever all the Editors are named.\nSo I will add a pollished script like the one I posted and make it available via composer.. PR #415 is open - it works pretty good but I'm open for improvements.. @willemstuursma if you take a look into the DecimalMoneyFormatter (the only other formatter without dependencies) it also uses just the english format.\nI think the formatters in this package are very limited - one reason is that strings are used what makes the usage of number_format impossible - so it has to be rebuild.\nMy idea would be a combination of chunk_split(), substr() and some math. The best formatter would be one that can handle a template similar to the date() function to define the output string.\nphp\n$formatter->format($money, '{i:3:,}'); // integer separated every 3 chars with ,\n$formatter->format($money, '{f:3:,:2:.}'); // float separated every 3 chars with , and 2 decimal separated with .\n$formatter->format($money, 'U{f:3:,:2:.}'); // unit on left with float\n$formatter->format($money, '{f:3:,:2:.}U'); // unit on right with float\nDoes this makes sense? And what should be definable? It could be also in a more coding way like:\nphp\n$formatter->format($money, Formatter::TYPE_FLOAT, 3, ',', 2, '.', Formatter::UNIT_LEFT);\n$formatter->format($money, Formatter::TYPE_INT, 3, ',', null, null, Formatter::UNIT_NONE);\n. No, you have to define your own Currencies that handles existing or your custom Currency. The easiest way would be to override the ISOCurrencies->loadCurrencies() and load your own/customized list. https://github.com/moneyphp/money/blob/master/src/Currencies/ISOCurrencies.php#L95\nThe subunit is loaded from the minorUnit key. https://github.com/moneyphp/money/blob/master/src/Currencies/ISOCurrencies.php#L40. @unglud if you want to make the public methods of Money available on your MyMoney you can use the overloading __call method http://php.net/manual/de/language.oop5.overloading.php#object.call . With a simple check like:\nphp\nif(method_exists($method, $this->money)) {\n  return call_user_func_array([$this->money, $method], $arguments);\n}\nThis code isn't tested so could be that I forgot one line or so - but this is a classic way to make methods from other classes available. And I would rename your MyMoney to MoneyManager - after this rename it's exactly what it does and no more reason to extend the original class.. I have to support @spiro79 - in my opinion it's not the task of the package provider to protect the User/Dev. No one can destroy your work if it's not final but it makes a lot much harder for the user.. This is the generated file including both default currencies classes (ISOCurrencies, BitcoinCurrencies).\n_ide_helper.money.php\nhttps://pastebin.com/545ZXC8z. @sagikazarmark have you changed the styleci settings? I haven't changed these files and there are also no changes in master branch.\nShould I ignore them or create a new PR to fix these issues?. It generated a helper php file for all passed in \"Currencies\" classes. This helper file does not have any effect on runtime cause it's not autoloaded. But most (every?) IDEs read all php files in project directory - that's why it also detects this helper file and can display all static methods listed in it for autocomplete.\nThe user/dev just has to execute the command (see first comment) and has this file, if wanted or available also with all custom Currencies.\nIt is the solution for the, wanted, PHP Doc Tags in the Money class itself. . @willemstuursma so you want something like:\nrepo code\n```php\nclass Money {\n    use MoneyStaticHelperDoc;\n}\ntrait MoneyStaticHelperDoc {}\n```\nCI/local Command override\nphp\n/**\n * @method ...\n */\ntrait MoneyStaticHelperDoc {}\nCause of the fact that this is already here I would be fine to extend this and add a second symfony command. So every user/dev can use his favorite way.\nIf I got your idea right I will test if it works in PhpStorm and if it does I will create a second command. . Ok, but if it is autogenerated you have to commit/Push it from TravisCI or anyone who Changes something related has to generate it!?\nBut in all cases we need a second command.. @willemstuursma & @frederikbosch I've added the requested trait solution. And merged the latest master.. @frederikbosch I also, but it was the wish by @willemstuursma. The IDE helper file works pretty good and does what was requested.. This will bring the Money class closer to a real type that is similar to a native php one.\nCause of the reason that this library supports php5.6 at the moment: is there any fallback that could be used?. Opt-in wouldn't work cause the class is final - the only way would be to have a second class like MagicMoney (no real idea).. How far I got - all classes except of the Currencies are final ones.\nSo I think that it is a general decision. . I mean the interface: https://github.com/moneyphp/money/blob/master/src/Currencies.php\n. The issue is that there is no Interface for the final classes that I can use for custom implementations to have a contract what this class offers.\nInterfaces are also awesome for dependency injection.\nSo the primary question isn't why everything ist final, this is discussed enough and a mix of standards and subjective opinions, but why the final classes doesn't have Interfaces that I can reuse to customize and extend some behaviors.\n\nAnd sorry for the silly first comments.^^ I haven't thought about. . And a basic example usecase why it's usefull to extend Converter would be magic methods like convertToUSD which is catched by __call and a check if the part after convertTo is an available currency.\nThere are even more examples for other classes - these don't have to be in the package but it will help to be able to add these methods in a simple way without creating a whole new Converter.. @ossinkine Yes, but after this NewConverter isn't checkable to be a converter - with an interface ConverterContract I can use it for dependency injection, instance of checks and so on.\nBut yes, adjusting the existing logic is the best usecase.. @sagikazarmark that's bad - my PR supported custom Currencies which ist very handy if create custom ones.. I think it would be nice to also have a $this->assertEquals(2, $six->ratioOf($three));. And I'm also interested in the case of $zero->ratioOf($six) and vice versa.. That's in general right but my thought was to check lower divided by bigger number and bigger number divided by lower one. It's not a real other case but I know that sometimes math functions do stupid things if one of the numbers is bigger/lower than the other one. It's no real request but I think that this single line won't hurt and is just another check to be sure that it works in every case.\nThe zero cases are real math special ones. And sometimes one is also a bit special. For ratios, in my understanding we have following cases:\nx / y = r\n{x=0} {y>0} | r=0\n{0<x<y} | 0<r<1\n{x=y} | r=1\n{0<y<x) | 1<r<INFINITY\n{x>0} {y=0} | r=INFINITY/null/Exception\nTo be sure that it works in all of them the test should be:\n```php\npublic function test_it_returns_ratio_of()\n{\n    $currency = new Currency('EUR');\n    $zero = new Money(0, $currency);\n    $three = new Money(3, $currency);\n    $six = new Money(6, $currency);\n$this->assertEquals(0, $zero->ratioOf($six));\n$this->assertEquals(0.5, $three->ratioOf($six));\n$this->assertEquals(1, $three->ratioOf($three));\n$this->assertEquals(2, $six->ratioOf($three));\n$six->ratioOf($zero); // will result in an exception\n\n}\n``. **done** You can remove the assert, the test assertion is the exception in the doc Tag. . Shouldn't this be done in thedivide` methods itself cause it's a Division problem and no ratio one!?. ",
    "flajos": "Thanks @sagikazarmark!\nNice work by the way :+1: . ",
    "unglud": "```\nfunction parseFloat($float)\n    {\n        $currencies = new ISOCurrencies();\n        $moneyParser = new DecimalMoneyParser($currencies);\n    return $moneyParser->parse((string)$float, 'EUR');\n}\n\n.\nfunction toString($print = false)\n    {\n        $currencies = new ISOCurrencies();\n        $moneyFormatter = new DecimalMoneyFormatter($currencies);\n        $formatted = $moneyFormatter->format($this->money);\n    if ($print) {\n        return number_format((float)$formatted, 2, ',', '.');\n    }\n\n    return $formatted;\n}\n\n``. Nope, but you can just extend the library with your own class and make it behave as you willing to. Also it will insure you from possible breaking updates.. The thing is, stuff you described works well for you and for me, but for other people not. Lib do what it suppose to do. Single responsibility thing. It's just simple construction block, which suppose work perfectly in all places where you use it. If you want lib make a coffee or laundry you just extend the lib, 'cuz in this case you make specific task done.. What I really do not like, but it's just my opinion, that class Money itself is final, which complicate it extension.. You can start with the pull request and see how it goes.. I guess you can try to parse value from symfony object before you put it to money. \nhttps://github.com/moneyphp/money/issues/406#issuecomment-332131006. I have several use cases\nFirst simplified constructor\nInsteadMoney::EUR(500)I usenew Money(5)` 'cuz I have only one currency and want to put in argument what ever I want.\nSecond, I have legacy object, which methods return numbers, and I want them return Money instead. So I have something like Money::createFrom($oldObject) and now I have $oldObject instanceof Money, where I can do like $oldObject->getNetValueOfLols() instanceof Money\nMy current implementation is I have MyMoney class which have parameter $this->money  instanceof Money and to be able use MyMoney->add for example I do this ugliness: \npublic function add($addend)\n{\n    return new self(0, $this->money->add($addend->getMoneyObject()));\n}\nIt pretty messy explanation I agree, but all I want to say, everything will be much much easer if I could just simply extend Money class.\nHere gist, if you want\nhttps://gist.github.com/unglud/3215dd0e5f77ecad135048fd56533e66\n. try command:\ncomposer why-not moneyphp/money ^3\nyou will see the reason. ",
    "Aerendir": "@unglud Is this code anywhere in the library?. But don't you think this should be a feature of the library itself? Why should have I to write code outside the library when I have a library that deals with monetary values?\nIt should provide me all the ways to get a Money object, without taking care of what I pass... This is the purpose of a library, or not? Also because the effort is not so great as you demonstrated providing me the code in less than a minute...\nAlso if it doesn't deal with all the possible formats and castings a money value can have.. And also Currency is final... This caused me really a lot of headaches...\nI agree with the single responsibility principle... But following it too strictly I think is not good in this case.\nI'm don't saying that the Money object itself should handle those situations.\nI'm saying that providing a generic parser should be a really good help for those who need to parse money values in the most common ways they are represented (maybe also with currency symbols and similar things).\nIn my opinion this IS responsibility of this library as it wants to provide tools and utilities to manage monetary values.\nAnd as monetary values are represented also in this way, then...\nA parser is required in my opinion... But, yes, it is only an opinion of mine and I cannot force anyone.... I worked around this with a Doctrine embeddable, saving also the converted amount other than the base amount... Anyway, thank you for your reply!. ",
    "alvinchevolleaux": "Okay fair enough. Maybe if I have time one day I could try a PR myself adding this functionality to the calculator class of GMP.. ",
    "shirshir": "You should have code completion in PhpStorm by creating a helper file with meta data in the root of your project:\n```php\n<?php\nnamespace PHPSTORM_META {\nuse Money\\Money;\n\noverride(Money::EUR(0),\n    map([\n        '' => Money::class,\n    ])\n);\n\n}\n```\nUnfortunately this does not work, the new syntax (for example as generated by the Laravel ide helper that @Gummibeer suggested, like this) does not work for the magic static factory methods. \nI got it to work (for example with EUR) with the following helper file contents (the old syntax):\n```php\n<?php\nnamespace PHPSTORM_META {\n$STATIC_METHOD_TYPES = [\n    \\Money\\Money::EUR('') => [\n        '' == '\\Money\\Money',\n    ],\n];\n\n}\n``\nNote that this still marks theEUR` method as undefined, but at least code completion works \ud83d\ude04. You may need to restart PhpStorm to refresh the meta data.\n\n. @Gummibeer I am using 2017.2.4. Thanks for your suggestion. You could also include your generated file with a local customised version of the PhpStorm stubs. This has the advantage that you can re-use the generated stub in multiple projects. Still, PhpStorm will think that two versions of the class exist, one in the vendor directory, and one in the stubs directory. But that is a small tradeoff. \ud83d\ude42. ",
    "spiro79": "I'm facing some issues on my application while unit testing because of the final class.\nOn our unit tests we try not to instantiate any external dependencies but being a final class it is not possible for PHPUnit to mock it.\nI see your point for composition over inheritance but shouldn't that be left for the implementation to decide?\nIf you want to leave it final you could provide an interface, that way you can easily provide the means to mock your class.\n. ",
    "dmitry027": "The library version is 3.0.9.\nI've figured out that code behaves like described after installing gmp extension (php version is 5.6.32).. Correction: bcmath extension must not be installed to reproduce this.. ```php\nuse Money\\Converter;\nuse Money\\Currencies;\nuse Money\\Currencies\\AggregateCurrencies;\nuse Money\\Currencies\\ISOCurrencies;\nuse Money\\Currency;\nuse Money\\Exception\\UnknownCurrencyException;\nuse Money\\Exchange\\FixedExchange;\nuse Money\\Money;\nfinal class EthereumCurrencies implements Currencies\n{\n    const CODE = 'ETH';\npublic function contains(Currency $currency)\n{\n    return self::CODE === $currency->getCode();\n}\n\npublic function subunitFor(Currency $currency)\n{\n    if ($currency->getCode() !== self::CODE) {\n        throw new UnknownCurrencyException(\n            $currency->getCode() . ' is not ethereum and is not supported by this currency repository'\n        );\n    }\n\n    return 18;\n}\n\npublic function getIterator()\n{\n    return new \\ArrayIterator([new Currency(self::CODE)]);\n}\n\n}\n$currencies = new AggregateCurrencies([\n    new EthereumCurrencies(),\n    new ISOCurrencies(),\n]);\n$exchange = new FixedExchange([\n    'ETH' => [\n        'USD' => 330.84,\n    ],\n]);\n$converter = new Converter($currencies, $exchange);\n$eth = Money::ETH('1');\n$usd = $converter->convert($eth, new Currency('USD'));\necho $usd->getAmount() . \"\\n\";         // expected: 0, actual: 0\n$eth = Money::ETH('10');\n$usd = $converter->convert($eth, new Currency('USD'));\necho $usd->getAmount() . \"\\n\";         // expected: 0, actual: 0\n$eth = Money::ETH('100000000000000000');  // 10^17\n$usd = $converter->convert($eth, new Currency('USD'));\necho $usd->getAmount() . \"\\n\";         // expected: 3308, actual: 0\n$eth = Money::ETH('1000000000000000000'); // 10^18\n$usd = $converter->convert($eth, new Currency('USD'));\necho $usd->getAmount() . \"\\n\";         // expected: 33084, actual: 0\n```. ",
    "Jean85": "Wouldn't be good to integrate a tool like PHP-CS-Fixer to have a fast way to fix CS on the dev side?. ",
    "Jared-Dev": "I threw that together simply because there is the library that could be installed already (linked in the RFC) if someone wants to use it. Since they are magic methods the fact that they exist wouldn't have any effect until the PHP extension was added. Also, since it's added as a trait it doesn't actually have to be added by default and could instead be an opt-in option.. ",
    "sstok": "Minor correction. bootstrap.php is already loaded by Composer.. http://symfony.com/doc/current/components/phpunit_bridge.html#trigger-deprecation-notices\nThis helps with reporting (silenced) deprecation messages. Otherwise they go unnoticed, until someone (like me :) ) encounters them in there own code when using the Symfony phpunit-bridge.\nhttps://travis-ci.org/rollerworks/search/jobs/317282924#L865\n\n\n```\nPassing a currency as string is deprecated since 3.1 and will be removed in 4.0. Please pass a Money\\Currency instance instead: 50x\n    6x in MoneyToLocalizedStringTransformerTest::testReverseTransformWithoutCurrency from Rollerworks\\Component\\Search\\Tests\\Extension\\Core\\DataTransformer\n    6x in MoneyToLocalizedStringTransformerTest::testReverseTransform from Rollerworks\\Component\\Search\\Tests\\Extension\\Core\\DataTransformer\n    5x in MoneyToLocalizedStringTransformerTest::testReverseTransformWithGrouping from Rollerworks\\Component\\Search\\Tests\\Extension\\Core\\DataTransformer\n    4x in MoneyToLocalizedStringTransformerTest::testDecimalSeparatorMayBeCommaIfGroupingSeparatorIsNotComma from Rollerworks\\Component\\Search\\Tests\\Extension\\Core\\DataTransformer\n    4x in MoneyTypeTest::testMoneyPatternWorksForYen from Rollerworks\\Component\\Search\\Tests\\Extension\\Core\\Type\n    4x in MoneyToLocalizedStringTransformerTest::testDecimalSeparatorMayBeDotIfGroupingSeparatorIsNotDot from Rollerworks\\Component\\Search\\Tests\\Extension\\Core\\DataTransformer\n    2x in MoneyTypeTest::testPassMoneyNL from Rollerworks\\Component\\Search\\Tests\\Extension\\Core\\Type\n    2x in MoneyTypeTest::testPassMoneyDe from Rollerworks\\Component\\Search\\Tests\\Extension\\Core\\Type\n    2x in MoneyToLocalizedStringTransformerTest::testDecimalSeparatorMayBeCommaIfGroupingSeparatorIsCommaButNoGroupingUsed from Rollerworks\\Component\\Search\\Tests\\Extension\\Core\\DataTransformer\n    2x in MoneyToLocalizedStringTransformerTest::testDecimalSeparatorMayBeDotIfGroupingSeparatorIsDotButNoGroupingUsed from Rollerworks\\Component\\Search\\Tests\\Extension\\Core\\DataTransformer\n    2x in MoneyToLocalizedStringTransformerTest::testReverseTransformWithGroupingButWithoutGroupSeparator from Rollerworks\\Component\\Search\\Tests\\Extension\\Core\\DataTransformer\n    1x in MoneyToLocalizedStringTransformerTest::testReverseTransformWithGroupingAndFixedSpaces from Rollerworks\\Component\\Search\\Tests\\Extension\\Core\\DataTransformer\n    1x in DqlConditionGeneratorResultsTest::it_finds_pubDate_limited_by_price from Rollerworks\\Component\\Search\\Tests\\Doctrine\\Orm\n    1x in DqlConditionGeneratorResultsTest::it_finds_by_customer_and_status_and_total from Rollerworks\\Component\\Search\\Tests\\Doctrine\\Orm\n    1x in DqlConditionGeneratorResultsTest::it_finds_by_customer_and_status_or_price from Rollerworks\\Component\\Search\\Tests\\Doctrine\\Orm\n    1x in DqlConditionGeneratorResultsTest::it_finds_by_status_and_label_or_quantity_limited_by_price from Rollerworks\\Component\\Search\\Tests\\Doctrine\\Orm\n    1x in DqlConditionGeneratorResultsTest::it_finds_by_excluding_equals_pattern from Rollerworks\\Component\\Search\\Tests\\Doctrine\\Orm\n    1x in NativeQueryConditionGeneratorResultsTest::it_finds_pubDate_limited_by_price from Rollerworks\\Component\\Search\\Tests\\Doctrine\\Orm\n    1x in NativeQueryConditionGeneratorResultsTest::it_finds_by_customer_and_status_and_total from Rollerworks\\Component\\Search\\Tests\\Doctrine\\Orm\n    1x in NativeQueryConditionGeneratorResultsTest::it_finds_by_customer_and_status_or_price from Rollerworks\\Component\\Search\\Tests\\Doctrine\\Orm\n    1x in NativeQueryConditionGeneratorResultsTest::it_finds_by_status_and_label_or_quantity_limited_by_price from Rollerworks\\Component\\Search\\Tests\\Doctrine\\Orm\n    1x in NativeQueryConditionGeneratorResultsTest::it_finds_by_excluding_equals_pattern from Rollerworks\\Component\\Search\\Tests\\Doctrine\\Orm\n```\n\n\n. The deprecation warnings comes from PHPUnit.\n\nDeprecated: The each() function is deprecated. This message will be suppressed on further calls in [...]/vendor/phpunit/phpunit/src/Util/Getopt.php on line 38\n\nYou properly want to upgrade (which the Symfony PHPUnit bridge also makes much easier, as you can use the new namespaces TestCase class while still supporting older PHPUnit versions).\nFor now I silenced this notice \ud83d\udc4d \nHappy holidays.. > 5378617246039E-6\nThat seems like an integer overflow, are you using a 32bit PHP version or don't have the gmp extension installed?. Don't use float for monetary values, use bcmath or gmp with a correct precision \ud83d\udc4d\nThe problem with float is that it's not precise enough for money values and easily leads to rounding problems. Just Google \"money as float\" \ud83d\ude05 and you will see everyone will tell you it's not good idea.\nSorry if my reply sounds a bit harsh. I am under the weather.. and can't think of a proper way to comminate this.. Can you explain the reason behind this change?. ",
    "mbessolov": "@ossinkine if there is a dependency in your code on the Converter, and you want to replace the Converter  implementation with your own implementation, why not just modify the dependency in your code then?\nIf the dependency exists in somebody else's code, then  you may ask them to modify the way the dependency is declared (as using an interface is not the only option). After all, if they want their system to be easily customized, they should provide others a way to do it.\nAnd if they don't want their system to be easily customizable, the interface wouldn't help either way, as they will not use it.. ",
    "sotsky": "It's valid exponential form of the float numbers.\nsee http://php.net/manual/en/language.types.float.php\n Floating point numbers (also known as \"floats\", \"doubles\", or \"real numbers\") can be specified using any of the following syntaxes:\n<?php\n$a = 1.234; \n$b = 1.2e3; \n$c = 7E-10;. @bendavies \nIssue occur when I use converter at \\Money\\Converter::convert:48\nSo that is internal issue.. Thanks. @frederikbosch  @bendavies \nYes that fixes my issue.\nI have BCMath installed.. @frederikbosch \nI have following exchange\nMoney\\Exchange\\ReversedCurrenciesExchange {\n  exchange: Money\\Exchange\\FixedExchange {\n    list: [\n      \"BTC\" => [\n        \"UAH\" => \"273509.80\"\n      ]\n    ]\n  }\n}\nand than call\n$converter->convert($moneyParser->parse(1, 'BTC'), new \\Money\\Currency('UAH'))->getAmount()\n. ",
    "insbrook": "Yes, that's it, problem solved. \nThanks a lot.. ",
    "chekalsky": "@frederikbosch I think we should reopen this issue because the problem is still here:\n```php\n $full_summ = new Money(1000000, new Currency('RUB'));\n $vat_summ = $full_summ->divide(1.18);\necho 'Should be: ' . round(10000/1.18, 2);\necho \"\\n\";\necho 'We have: '. $vat_summ->getAmount()/100;\n```\nGives us:\nShould be: 8474,58\nWe have: 8474,57\nAfter debugging I found that it's because of divide($amount, $divisor) in PhpCalculator.php \u2014 there we have return (string) $result \u2014 on some locales (e.g. ru_RU.UTF8) it creates 847457,627 instead of 847457.627 and after that that part after the comma are gone in further operations.. I'll check a bit later. Thank you. I've tested and now my test case looks fine. \ud83d\udc4d\nBut shouldn't we add castString() to add(), subtract(), absolute() and mod() methods?. ",
    "Itach1Uchixa": "I know that there are ways to do it. I already read the documentation moreover I have experience of doing it. Please read it again and try to understand what I'm trying to say. ",
    "enekochan": "I think I'll go with using the builtin comparison and mathematical functions most of the times and rework my API client so it works with string amounts. Thank you.. ",
    "mtangoo": "\nSorry. We don\u2019t take the responsibility for persistency. \n\nOh! Sorry for bothering.\n\nYou might look at previous issues for other people\u2019s solutions. Good luck!\n\nThat was the first thing to do. \nThanks for responding anyway!. ",
    "FlintCIBot": "Lint errors were found. A patch is also available.\nPlease see the report: https://flintci.io/repositories/3351/analyses/2547\nThis comment was posted by FlintCI. It can be disabled in the repository settings.. Lint errors were found. A patch is also available.\nPlease see the report: https://flintci.io/repositories/3351/analyses/8367\nThis comment was posted by FlintCI. It can be disabled in the repository settings.. ",
    "pascal-hofmann": "The currency of Sao Tom\u00e9 and Pr\u00edncipe was accepted with ISO 4217 amendment number 164.\nThanks for the pointer to the correct package. I've created a PR for moneyphp/iso-currencies.. ",
    "oligus": "This would be really nice to have, here is what I'm doing at the moment:\n$money = Money::USD(151);\n$rounded = round($money->getAmount(), -2);\n$result = Money::USD($rounded); // 200\n. ",
    "broberts-mrmc": "@oligus Well, I guess that's two votes!  For such a well-developed library/project, it's surprising this kind of rounding isn't needed more often and isn't yet incorporated in Money.  I'm sure there are a few nuances to a complete implementation including currency agnosticism.\nThe logic in your solution is more concise than mine, which is also a currency specific (USD) solution.  I attempted to avoid native, numeric types (e.g. integer, float) and operations in the intermediate logic in any instance that could, potentially involve large values.  As you know, PHP's built-in round() function always returns a float, and therefore has the storage and operational \"features\" of that type.  \nMy solution should probably also include some exception handling for the various exceptions thrown by Money.  I contemplated writing a custom class that extends Money in order to add this functionality in a manner that was integrated into an overall money solution, but the maintainers chose to define the Money class as FINAL.\nHere's my solution in case it's helpful to you or you wish to expand upon it.\n```\n// Obtain amount as string from existing Money object\n$str = $input->getAmount();\n// If not zero...\nif ($str !== '0') {\n// Obtain whole units of currency\n$whole = substr($str, 0, strlen($str)-2).'00';\n\n// Obtain fractional units of currency\n$factional = (int) substr($str, -2);\n\n// If there are no whole units of currency...\nif ($whole === '00') {\n\n    // Force to single zero\n    $whole = '0';\n}\n\n// Create money object from whole units of currency\n$result = Money::USD($whole);\n\n// If factional units of currency should round to the\n// nearest whole unit of currency...\nif (abs($factional) >= 50) {\n\n    // If whole units of currency are positive...\n    if ($result->isPositive() === true) {\n\n        // Addend should be positive\n        $addend = Money::USD(100);\n\n    // Otherwise, if whole units of currency are negative...\n    } else if (result->isNegative() === true) {\n\n        // Addend should be negative\n        $addend = Money::USD(-100);\n\n    // Otherwise...\n    } else {\n\n        // If fractional units of currency are positive...\n        if ($factional >= 0) {\n\n            // Addend should be positive\n            $addend = Money::USD(100);\n\n        // Otherwise...\n        } else {\n\n            // Addend should be negative\n            $addend = Money::USD(-100);\n        }\n    }\n\n    // Add appropriate unit of currency corresponding to\n    // fractional units of currency to facilitate the\n    // rounding operation\n    $result = $result->add($addend);\n}\n\n// Otherwise...\n} else {\n// Default to zero value money object\n$result = Money::USD(0);\n\n}\n```. I\u2019ll take a look and possibly submit a PR with tests in the next week or two.\nYes, your suggested solution seems reasonable, I suppose the tests will tell.\nMay I suggest a more descriptive or intuitive method name? Since \u201cround\u201d is already in use for another purpose, and \u201crounded\u201d seems a little odd as in the implementation code would invoke the proposed method and the method will have yet to do its work at the time of invocation (i.e. avoid a past tense method name). I\u2019m open to arguments here.\nMaybe this method signature:\nfinal function roundToSubunits(int $subunits = 0) : Money { ... }\nAlias...\nfinal function roundToNearestWholeUnitOfCurrency() : Money {\nreturn $this->roundToSubunits(0);\n}\nOn Jul 3, 2018, at 3:24 AM, Frederik Bosch notifications@github.com<mailto:notifications@github.com> wrote:\nExternal Email Message\n\nMaybe @broberts-mrmchttps://github.com/broberts-mrmc is willing to create a PR (with tests) based on my suggested code.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/moneyphp/money/issues/480#issuecomment-402054955, or mute the threadhttps://github.com/notifications/unsubscribe-auth/APvK7P7_L_VGryyhjWiG3ouycPR_Kuhqks5uCyo4gaJpZM4TaL-r.\n. ",
    "rtheunissen": "Isn't this just half away from zero?\nhttps://3v4l.org/AAlXq. ",
    "Yamakasi": "@bmeynell:\nThanks, this is indeed wrong at my side but it's strange it works good with a value of 100000.00\nI don't see the exception, could be codewise here, I need to check, but the above working example is strange isn't it ? It does seem to crash from some higher number.\n. @bmeynell thanks, I'm always curious about such behaviour. What is best to store the money in a Database: as Decimal and create an Integer out of it for this library or an Integer is best ?. Yes I have exactly the same way. Thanks for the confirmation!. @kslimani thanks, this sounds good.\nDo I need the PHP formatter class (money based) for this ?\n@bmeynell yes I agree with you but the question is forward only, backwards as well or all between with it as also?. It seems you need to parse a DecimalMoneyParser and calculate with that, if I'm right.. ",
    "spotman": "@frederikbosch Any news about this PR?. My bad, I had not seen changed files on this PR... Yep, it does not makes sense in case of migration to  PHP7.. ",
    "wujunze": "I see  Thanks for you  @sagikazarmark . ",
    "zlanich": "Awesome! Thank you.\nBest Regards,\nZach Lanich\nBusiness Owner, Entrepreneur, Creative\nOwner/CTO\nweCreate LLC\nwww.WeCreate.com http://www.WeCreate.com\nFrom: M\u00e1rk S\u00e1gi-Kaz\u00e1r notifications@github.com notifications@github.com\nReply: moneyphp/money\nreply@reply.github.com\nreply@reply.github.com\nDate: September 8, 2018 at 12:53:16 AM\nTo: moneyphp/money money@noreply.github.com money@noreply.github.com\nCC: zlanich zach@zachlanich.com zach@zachlanich.com, Author\nauthor@noreply.github.com author@noreply.github.com\nSubject:  Re: [moneyphp/money] min & max methods (#497)\nThis feature was implemented in #478\n\nhttps://github.com/moneyphp/money/pull/478, waiting for release.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/moneyphp/money/issues/497#issuecomment-419612952, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABc76UaVMrJ75u-bhwXD9yUFcvSr0SSyks5uY008gaJpZM4WYBC5\n.\n. \n",
    "UlrichEckhardt": "I'd also love to have a 3.1.4 or 3.2.0, can I help somehow?\n. Here's the promised patch:\n0001-Fix-numeric-comparison-for-negative-numbers.patch.txt\n. Okay, the first PR had a failure in a test (the test itself seems to have failed, not the tested code), but now it should be ready. Any questions left, @sagikazarmark ?. \"the ratio really is Money\" -- sorry, but that is IMHO not a good way to look at things: The conversion ratio from CUR1 to CUR2 is a number and its unit is CUR2/CUR1. Basically, a big aspect of this library is to couple a value with a unit, and the conversion ratio is nothing different, only that the unit is a ratio of currencies and not a single currency here.\nNotes:\n * Try to look at it from the other side and switch the argument that combines currency and value. That way, you could as well say that it should take a base amount, which is the cost of a single unit of the target currency.\n * Combined, you could supply both currencies and the conversion ratio using two Money objects. That approach would at least preserve some symmetry.\n * And yes, you can construct a conversion ratio from different parameters. However, I'd leave the current way as it is and use a static factory function instead, like the createFromIso() function there.\n. I'm not 100% sure about the exact place, but I believe that you can loop using an iterator with the foreach ($iterator as $key => $value) {...} syntax. However, I'm wondering what your use-case is and whether the numeric index shouldn't be treated as implementation detail/artifact.\n. ",
    "marcosdsanchez": "After https://github.com/moneyphp/iso-currencies/pull/9#discussion_r237204506 is fixed, instead of static constructors which break BC, I'd prefer to have different classes depending on what's the set about. We can also create a new class which is an aggregate of historical + isoCurrencies.\nSomething like this:\n```php\nfinal class AllISOCurrencies implements Currencies\n{\n    private $aggregate;\npublic function __construct()\n{\n    $this->aggregate = new Currencies\\AggregateCurrencies([\n       new ISOCurrencies(),\n       new HistoricalCurrencies(),\n    ]);\n}\n....\n\n```. ",
    "m00t": "@marcosdsanchez makes sense. Thanks for noticing the minor units issue!. ",
    "mishavantol": "I'm able to reproduce this behaviour, will update the it_allocates_amount test and look into it.. Or it could just be changed to 'UTF-8'. I see the other tests use that format too.. > Just a note: The compare() use there is broken, see moneyphp#503. This will at least affect merging your PR and mine, but it's easily fixed.\nEasy fix indeed \ud83d\ude04 . ",
    "tonydspaniard": "Scale is a must for any operation to provide proper results. Not sure but could also  be #509 related. ",
    "zek": "My other question is If I should create Currency object as XBT for all coins ( such as ETH, BTC ). > One that failed in the situation before your change, and now works with your change.\nI am not familiar with testing. I don't know how can I test \"before your change\" part but I added second part. \nThis PR actually is not critical but before this PR jsonSerialize function returns currency object.\n~~~\narray(2) { [\"amount\"]=> string(3) \"100\" [\"currency\"]=> object(Money\\Currency)#738 (1) { [\"code\":\"Money\\Currency\":private]=> string(3) \"EUR\" } }\n~~~\nI believe we must return\n~~~\narray(2) { [\"amount\"]=> string(3) \"300\" [\"currency\"]=> string(3) \"EUR\" }\n~~~. BTC might be almost same thing as XBT but actually BTC !== XBT (at least in my situation)\nhttps://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=XBT\nAs you see the rate is not 1. Some markets work as XBT some others work as BTC. \nSo the Currency Conversion also fails in this situation. Cuz your class uses XBT but cryptonator.com uses BTC. I had to manually change currency field before converting to USD or EUR.\nin cryptonator example\nXBT to USD (error)\nBTC to USD (ok)\nSo  I created my own basic class and I use BTC instead of XBT because It doesnt make sense to change XBT to BTC before conversion that causes a lot of if statements everywhere of the code. \nI know supporting cryptocurrencies is not liability of this library but cryptocurrencies is the future and you may think supporting it better.. > Are you aware of any (pseudo)official source for all crypto currencies?\nI use cryptocompare and coinmarketcap but coinmarketcap is paid now. As I know the best option is \nhttps://www.cryptocompare.com/api/data/coinlist/\n\nI don't like the idea that this library also becomes maintenance agency.\n\nDefinitely. There are thousands of crypto currencies we can't support all of them cuz ever day a new one pops.\n. I guess ethereum is 10^9\nSo it may change\n6 Mar 2019 \u00c7ar, saat 09:46 tarihinde TM Lee notifications@github.com \u015funu\nyazd\u0131:\n\n@ivaaaan https://github.com/ivaaaan all price amount is displayed as\nfollows\n1 USD as $1.00\n1 BTC as 1.0 BTC\n0.001 ETH as 0.001 ETH\nI supposed if 10^8 is your subunit, yes 10^-8 is the way to normalize it\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/moneyphp/money/issues/552#issuecomment-469989750, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADTYey_Cb2vS1R-3gZ3HVCgIfbmY8sr-ks5vT2RdgaJpZM4bC4nu\n.\n. \n",
    "rogervila": "Thank you. \nJust another quick question: Is there any ISO currency that can act as a placeholder for custom currencies? \nI have checked this list, ad looks like the ones that start with X are 'special': https://github.com/moneyphp/money/blob/master/resources/currency.php\nIf there is not, I think I'll extend ISOCurrencies with a custom class in order to add my currency here: https://github.com/moneyphp/money/blob/master/src/Currencies/ISOCurrencies.php#L95\nand then, the conversion should be something like this (not tested yet)\n```php\nuse App\\Money\\Currencies; // Extends ISOCurrencies \nuse Money\\Converter;\nuse Money\\Currency;\nuse Money\\Exchange\\FixedExchange;\n$exchange = new FixedExchange([\n    'EUR' => [\n        'CUSTOM' => 1.25\n    ]\n]);\n$converter = new Converter(new Currencies(), $exchange);\n$eur100 = Money::EUR(100);\n$customMoney= $converter->convert($eur100, new Currency('CUSTOM'));\n```\nWhat do you think @sagikazarmark ?\n. ",
    "Freeaqingme": "@frederikbosch Sure thing. Please see the updated change set.. ",
    "kunicmarko20": "Another option is exposing the whole array and I can do that in my code, but getCurrencies is private and getIterator doesn't give numeric codes. Iterator only returns the letter code:\nhttps://github.com/moneyphp/money/blob/cdf172c75f0dcb514fa4756b14033f472129d80e/src/Currencies/ISOCurrencies.php#L64-L74\nI am using moneyphp internaly, for money and currencies and I am getting numeric code from a external service, to be able to use currency I need to convert numeric code to letter code as this library checkes only the letter code:\nhttps://github.com/moneyphp/money/blob/cdf172c75f0dcb514fa4756b14033f472129d80e/src/Currencies/ISOCurrencies.php#L28\n. Yep, what would work for me is having a method that would convert numeric to letter or just exposing the whole array of values. Does one of those 2 sound like a good idea?. Can you please elaborate why is it out of scope? Numeric code is also part of ISO 4217.. I agree on the conversion part but a \"Currencies\" class that validates both letter and number code should probably be a part of the lib.\nSomething like this https://github.com/alcohol/iso4217/blob/master/ISO4217.php#L26-L35\nDon't want to bother you anymore, thank you for replying.. If this gets accepted, the only other thing I would propose is adding alphabeticCodeFor since there is numericCodeFor. @frederikbosch is there any chance to get some feedback on this and maybe include it into the next release?. The ideal thing would be to support both numeric and alphanumeric and not separately. That is why I provided it this way, and left the initial comment as an alternative would be providing new \"Currencies\" class that can handle both since the numeric is also part of the ISO.. ",
    "alesak": "PHP 5.6 MoneyPHP version 3.2.0. > How about php7+?\nHaven't tested it, we are still forced to run it on 5.6 as lots of our older projects are not fully compatible with PHP7. Sorry, it looks like the value has to be -500:\n```\n$value = new Money('-500', new Currency('USD'));\n$p = $value->divide(110); //throws exception\n/vendor/moneyphp/money/src/Number.php on line 287\n/vendor/moneyphp/money/src/Number.php(38): Money\\Number::parseFractionalPart('-54545454545455')\n/vendor/moneyphp/money/src/Number.php(56): Money\\Number->__construct('-4', '-54545454545455')\n/vendor/moneyphp/money/src/Number.php(89): Money\\Number::fromString('-4.-54545454545...')\n/vendor/moneyphp/money/src/Calculator/GmpCalculator.php(191): Money\\Number::fromNumber('-4.-54545454545...')\n/vendor/moneyphp/money/src/Money.php(456): Money\\Calculator\\GmpCalculator->round('-4.-54545454545...', 1)\n/vendor/moneyphp/money/src/Money.php(338): Money\\Money->round('-4.-54545454545...', 1)\ndefault.php(55): Money\\Money->divide(110)\n```\nPHPCalculator & BcMathCalculator works. > Can you add a failing test as PR? Then I will fix it.\nI will try to do so but I am not sure when I can get the chance. ",
    "cebe": "How is this a duplicate? This issue is about the parser, the PR is about the formatter.. Is there any reason why the BitcoinMoneyParser does not use the DecimalMoneyParser internally?. Added a failing test in #542, it could probably be solved by using DecimalMoneyParser internally, but I am unsure about the reasons why it is not used already.. this could probably be solved by #529. @frederikbosch thanks for the fix! how about the tests on DecimalMoneyParserTest.php ? I think these should be added too.. I took this from \nhttps://github.com/moneyphp/money/blob/70b0c99beed1dc76dc2d6c7210df9e4f64db9159/src/Parser/DecimalMoneyParser.php#L49-L57. see #540 , #539 . ",
    "alle": "@zek @frederikbosch Thank you very much, guys! \u263a\ufe0f. ",
    "ivaaaan": "Any updates about this task? At least we can add support of the most popular cryptocurrencies. What do you think about this? If we agreed on such a list, I would try to implement this.. Quickly created for my own purposes: https://github.com/ivaaaan/cryptocurrencies-money. @tmlee there's no subunits info in this API. What value should we use by default? 10^-8? . ",
    "tmlee": "Hey guys, have you given the CoinGecko API a try? It is free and publicly available without keys at https://www.coingecko.com/api\nWe cover over 4000 cryptocurrencies from over 300 exchanges. And got plenty of endpoints for you to play with.\nHappy to answer any questions! Cheers!\n. @ivaaaan all price amount is displayed as follows \n1 USD as $1.00\n1 BTC as 1.0 BTC\n0.001 ETH as 0.001 ETH\nI supposed if 10^8 is your subunit, yes 10^-8 is the way to normalize it\n. ",
    "mitchellolsthoorn": "The method exists() does not exist in AvailableCurrencies. This should be contains()\n. ",
    "slavcodev": "Do you mean empty($formatters)?. "
}