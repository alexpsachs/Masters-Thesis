{
    "benzweig": "stallman would be proud of me. accept this\n. \n. stallman would be proud of me. accept this\n. \n. ",
    "casesandberg": "Thanks for the fix @benzweig, however, its already been fixed on the feature-documentation branch :)\n. Thanks @vladikoff \n. Thats no good! I went ahead and fixed that @muffinresearch, thanks for the heads up!\nhttps://github.com/casesandberg/reactcss/commit/4eb5826357c02cb920c908c2a7de32ae87abf281\n. Hey, really sorry about that @bramdevries, I had the package.json pointing to the .coffee files instead of the compiled .js ones. If you go ahead and update reactcss to 0.3.1 on NPM that should solve the issue!\n. Hey @bramdevries, There was a legacy require in there, it should be fixed now if you update to 0.3.2\nhttps://github.com/casesandberg/reactcss/commit/abdd96dc35bcdc014fad0c2b3eabf16f39591d06\n. Does adding this make it work?\nimport React from 'react';\nOr are you not importing react where you are rendering it?\n. You are totally right, that is my bad. I will update that now!\nThanks for working through this with me\n. @wootwoot1234 ReactCSS maps a flat style object to the styles function on the component. As long as you declare the right kind of CSS it will work!\n. Thanks for catching this @luisrudge, I will get this fixed later today!\n. Fixed!\n. Thanks for catching this @luisrudge, I will get this fixed later today!\n. Fixed!\n. Hey @jason-wolfe, sorry for the confusion. I am going to be splitting out the documentation so there is a section for both the mixins implementation and the es5 implementation. \nIn the meantime, you can check out a working file of it here: https://github.com/casesandberg/reactcss/blob/master/examples/Button.es5.jsx#L49\nNotice on like 49, you have to declare a styles function that returns this.css, that's what makes it work.\n. Added calling the styles function to the mixins example!\n. See the answer on https://github.com/casesandberg/reactcss/issues/10, when using the mixin implementation you have to define this.styles yourself. I wanted to have it auto-included by the mixin, but react yells at you when you try to overwrite it, and you need to be able to overwrite it when you activate classes with custom expressions. \n. Hey @henriquea, sorry it took me a while to get back to you. \nThere is actually a mixin called Extend that does the same thing!!\n'default': {\n   button: {\n     height: '44px'\n  },\n  activeButton: {\n     Extend: 'button',\n     background: 'blue'\n  }\n}\nIt works to extend any style in the same class by name\n. Awesome @henriquea, let me know any other thoughts or suggestions you have :)\n. Thanks @liady !\n. I did! Thanks @liady!\nI am doing one or two more projects with it, and then I will be releasing it as a standalone documentation package!!\n. @liady only problem is you can't declare it in your component if its already in the mixin and its necessary if you want to add arguments to it. \n. Yeah, but then the ES5 and ES6 versions are structured differently. I wanted to keep them as similar as possible until ES6 becomes the standard.\n. Looking into it today @piyushchauhan2011 \n. If you merge master into this and resolve conflicts I can merge it in!\n. Thanks! This has been completely removed in 1.0.0\n. @kevinsimper ReactCSS will never support traditional media queries. I am currently working on another package that allows you to use element queries (width and height of each component) and that will be baked nicely into ReactCSS :)\n. Do you know what the is=\"...\" attribute does? I cant find anything about it. \nAlso, since the react-map-styles is doing string replace, it wont break anything unless you are trying to use is. I have been trying to come up with a more long-term solution other than hijacking it anyways. \n. Found out that the is=\"...\" syntax is for web component support and not recommended by Facebook so we should be fine on that front.\nhttps://twitter.com/soprano/status/651880693748899840\n. Looking into the component classes error as we speak.\n. Dependency has been fixed in reactcss@0.4.2\n. @9o @mhahn @seekshiva @liady @henriquea @shaunstanislaus @vladikoff @hharnisc @chrisgervang\n. @hharnisc Definitely not doing to drop support completely, however throw warnings to help people migrate. \nOnly change with removing inheritance is that you will have to bind the styles method with the fat arrow:\nstyles = () => css();\nor in the constructor:\n```\nconstructor() {\n  super();\n  this.styles = this.styles.bind(this);\n}\nstyles() {\n  return css();\n}\n``\n. @e-karma Are you having problems with it in0.14.0? The only issue I am aware of is it throws a console warning, but other than that is should work just fine.\n. The plan is to have it done before the 18th of this month. Is there anything in particular you need in the mean time? I am working on a 1.0.0 branch and can build whatever you need next\n. Sorry @e-karma, I have the week off and will be finished it up in the next few days\n. Yes @igorpreston, I have just been super busy the past couple of weeks. I will get something out as soon as I can!\n. Just got server-side rendering working (https://github.com/casesandberg/reactcss/commit/ca7cf3352b32fe74cc512643e2233381207ba02e), going to be upgrading the repo to work with0.14.0` tonight!\n. Sorry. I am going to be releasing 0.5.0 with all of these changes this\nweekend!\nOn Friday, January 15, 2016, e-karma notifications@github.com wrote:\n\nHey @casesandberg https://github.com/casesandberg, any input on this?\nNot sure which way to move forward. Thanks\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/casesandberg/reactcss/issues/23#issuecomment-172120433\n.\n. Ah @e-karma, I see what you are saying. I am going to do some digging to see if there is a way for this to work alongside decerators.\n. Been looking into it but its really tricky. Wont have a fix in until mid-next-week at a minimum \n. Launched!\n. react-map-styles is just a string replace, you can just require it in and use the function to transform:\n\n```\nimport 'mapStyles' from 'react-map-styles';\nlet output = ReactDOMServer.renderToString(RootComponent);\nlet transformed = mapStyles(output);\n``\n. What do you mean by \"className isn't getting converted and neither is children\"?\n. Well shit. Thanks for digging into this. I am going to dig into this tonight to see if there is a quick fix, but I agree we might just have to move away fromis`. Do you have any thoughts around what we could change it to?\n. Sorry for the delay on this @mhahn I am going to try and get a solution working for you tonight. \nHow would you feel about using spreads instead of static properties? That way this can all be done programmatically and not have to rely on a string replace:\n<div {...class(\"foo bar\")} />\n. Another solution would be revert back to the string replace but use class instead of is. I wonder if this is possible (I am pretty sure react will just throw a warning). Because reverting back to the original syntax would be nice too. This might get confusing mixing class and className though. Or even inlineClass.\n. Hey, just got server-side rendering working in the 1.0.0 branch! https://github.com/casesandberg/reactcss/commit/ca7cf3352b32fe74cc512643e2233381207ba02e\nIt's a little messy now, I will clean it up tonight and write a paragraph on how to use it so you can get running with it before the official 1.0.0 launch\n. Yeah definitely, this isn't intended to run client-side in prod. I would say you would still want to do a string replace when building for prod. Similarly you would use this method server-side for serving up static assets.\n. What do you mean by that?\n. Ah, it totally does because it changes the render on parent to be a spread and passes it down as props:\nbefore:\nrender() {\n    return <Child is=\"Parent\" />;\n}\nAfter:\nrender() {\n    return <Child {...this.styles().Parent} />;\n}\n. Yep, the string replace will transform it correctly. Similarly the solution that iterates through all the children will transform it the same if you try to render it with ReactDOMServer!\n. Did you ever do some testing to see if this solution adds to much overhead?\n. Ah! reactcss@1.0.0 removes react-map-styles and works flawlessly with server side rendering!\n. My bad. Updated! reactcss@0.4.2\n. What does your webpack settings look like? Also what version of react-color are you using?\n. This was fixed in reactcss@0.4.4\n. Hmm, why do you find yourself extending components in that way? I dont understand what you are trying to do.\n. I will fix this today!\n. Fixed! Update to reactcss@0.4.3 to reap the leaner codebase!\n. Fixed in 1.0.0\n. The API has been changed in 1.0.0 to make this unnecessary!\n. Deprecated in 1.0.0\n. Hey @e-karma! Thinking through this now. It needs to be something that works with presentational classes as well. This is something I am going to solve quickly because I really do want support with Redux.\nAlso, why is it that you cant wrap presentational components in a wrapper class? ie: \n```\nconst Example = () => (\n)\nexport default ReactCSS(Example)\n``\n. @e-karma Sorry for the delay. Been brainstorming all day and have a simplified API for the1.0.0release which has support for react-native, server side rendering and and redux. Coming in the next few days!\n. @e-karmareactcss@1.0.0` hit today with support for redux! Check out more about it here: http://reactcss.com/#redux\n. There is actually a whole new API interface with 1.0.0 which makes this unnecessary. Thanks for your work though!\n. Thanks man \ud83d\ude4c\n. There is a PR open for this! Just waiting for it to be resolved and will merge it!\nhttps://github.com/casesandberg/reactcss/pull/56\n. If you fix the conflicts I will be happy to merge this!\n. NP, thanks for this!\n. Tagged Release!\n. Oh! I am not sure, I will try and look into this soon\n. I am not sure what you are asking? @kuailingmin \n. Looked into this today and it looks like there is no way to do inline styles with CSS Transition Group /: https://facebook.github.io/react/docs/animation.html\n. This is awesome! Can you squash and then I will merge it?\n. Thanks for the PR @jacobrask, this is up at reactcss@1.0.5\n. This was fixed in reactcss@1.0.4\n. Sorry for the confusion, I will update the titles so they are less confusing :)\n. Ah, great point!\n. This is in reactcss@1.0.5\n. I may be wrong but I dont think there is a way of doing that with inline styles?\n. Thanks \ud83d\udcbc\n. reactcss@1.0.6\n. Nice! Can you run npm run lib on this and I can then merge it in\n. Perfect! This is up at reactcss@1.0.7\n. Yeah! Hopefully I can get to it one day soon\n. @chrisgervang think you could tackle this?\n. Someone just made one! https://www.nuget.org/packages/reactcss.TypeScript.DefinitelyTyped/0.0.1\n. I don't know how it snuck in there, would love a PR!\n\ncase\nOn Wednesday, September 21, 2016, jharris4 notifications@github.com wrote:\n\n@casesandberg https://github.com/casesandberg I'd be happy to make a PR\nwith the change to package.json, but I wasn't sure if there was some reason\nI'm not aware of that made you put it in peerDependencies... Can you\nclarify? Thx\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/casesandberg/reactcss/issues/111#issuecomment-248660917,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEa0JGfthKaV0yhrj1Zh4qnaqjjEVh6aks5qsVaRgaJpZM4KBpb1\n.\n. Fixed in https://github.com/casesandberg/reactcss/pull/113. Use it reactcss@1.0.8\n. Just re-deployed reactcss@1.0.9 fixes the issue.\n. Hey @martynchamberlin! You can read more about vendor prefixes in react here.\n\nTL;DR Drop the leading dash and uppercase the vendor namespace:\nconst styles = reactCSS({\n  'default': {\n    sidebar: {\n      overflowStyle: 'none',\n      MsOverflowStyle: 'none'\n    }\n  }\n});\n. It handles prefixing of transform for you!\nhttps://github.com/casesandberg/reactcss/blob/master/src/autoprefix.js#L68\n. I don't understand why you are adding all of the exports to the default export. Can you provide some information around why you want to make this change?. The later is the cleaner way to do imports with es6, however. If you want them attached to the reactCSS var you can always do:\nimport { * as reactCSS } from 'reactCSS'. Thanks @quagliero! Can you run npm run docs-dist and commit the docs bundle as well?. Sorry about this. I updated ReactCSS to not use map on objects, you shouldn't have to do anything special using react-color@2.11.2. Look like webpack might have an issue finding a plugin? (Issue Thread here: https://github.com/lodash/babel-plugin-lodash/issues/83). The only plugn that is there, and it was added recently, is the lodash plugin: https://github.com/casesandberg/reactcss/blob/master/.babelrc#L8. I am investigating.. That is weird. It seems not to be an issue on this end as far as I can tell. There wasn't any changes that would affect something like this from 1.2.0 to 1.2.2. Can you clear your node_modules, reinstall and let me know if this is still an issue?. I removed the .babelrc from the NPM payload and it fixes this issue!. Thanks for the fix @benzweig, however, its already been fixed on the feature-documentation branch :)\n. Thanks @vladikoff \n. Thats no good! I went ahead and fixed that @muffinresearch, thanks for the heads up!\nhttps://github.com/casesandberg/reactcss/commit/4eb5826357c02cb920c908c2a7de32ae87abf281\n. Hey, really sorry about that @bramdevries, I had the package.json pointing to the .coffee files instead of the compiled .js ones. If you go ahead and update reactcss to 0.3.1 on NPM that should solve the issue!\n. Hey @bramdevries, There was a legacy require in there, it should be fixed now if you update to 0.3.2\nhttps://github.com/casesandberg/reactcss/commit/abdd96dc35bcdc014fad0c2b3eabf16f39591d06\n. Does adding this make it work?\nimport React from 'react';\nOr are you not importing react where you are rendering it?\n. You are totally right, that is my bad. I will update that now!\nThanks for working through this with me\n. @wootwoot1234 ReactCSS maps a flat style object to the styles function on the component. As long as you declare the right kind of CSS it will work!\n. Thanks for catching this @luisrudge, I will get this fixed later today!\n. Fixed!\n. Thanks for catching this @luisrudge, I will get this fixed later today!\n. Fixed!\n. Hey @jason-wolfe, sorry for the confusion. I am going to be splitting out the documentation so there is a section for both the mixins implementation and the es5 implementation. \nIn the meantime, you can check out a working file of it here: https://github.com/casesandberg/reactcss/blob/master/examples/Button.es5.jsx#L49\nNotice on like 49, you have to declare a styles function that returns this.css, that's what makes it work.\n. Added calling the styles function to the mixins example!\n. See the answer on https://github.com/casesandberg/reactcss/issues/10, when using the mixin implementation you have to define this.styles yourself. I wanted to have it auto-included by the mixin, but react yells at you when you try to overwrite it, and you need to be able to overwrite it when you activate classes with custom expressions. \n. Hey @henriquea, sorry it took me a while to get back to you. \nThere is actually a mixin called Extend that does the same thing!!\n'default': {\n   button: {\n     height: '44px'\n  },\n  activeButton: {\n     Extend: 'button',\n     background: 'blue'\n  }\n}\nIt works to extend any style in the same class by name\n. Awesome @henriquea, let me know any other thoughts or suggestions you have :)\n. Thanks @liady !\n. I did! Thanks @liady!\nI am doing one or two more projects with it, and then I will be releasing it as a standalone documentation package!!\n. @liady only problem is you can't declare it in your component if its already in the mixin and its necessary if you want to add arguments to it. \n. Yeah, but then the ES5 and ES6 versions are structured differently. I wanted to keep them as similar as possible until ES6 becomes the standard.\n. Looking into it today @piyushchauhan2011 \n. If you merge master into this and resolve conflicts I can merge it in!\n. Thanks! This has been completely removed in 1.0.0\n. @kevinsimper ReactCSS will never support traditional media queries. I am currently working on another package that allows you to use element queries (width and height of each component) and that will be baked nicely into ReactCSS :)\n. Do you know what the is=\"...\" attribute does? I cant find anything about it. \nAlso, since the react-map-styles is doing string replace, it wont break anything unless you are trying to use is. I have been trying to come up with a more long-term solution other than hijacking it anyways. \n. Found out that the is=\"...\" syntax is for web component support and not recommended by Facebook so we should be fine on that front.\nhttps://twitter.com/soprano/status/651880693748899840\n. Looking into the component classes error as we speak.\n. Dependency has been fixed in reactcss@0.4.2\n. @9o @mhahn @seekshiva @liady @henriquea @shaunstanislaus @vladikoff @hharnisc @chrisgervang\n. @hharnisc Definitely not doing to drop support completely, however throw warnings to help people migrate. \nOnly change with removing inheritance is that you will have to bind the styles method with the fat arrow:\nstyles = () => css();\nor in the constructor:\n```\nconstructor() {\n  super();\n  this.styles = this.styles.bind(this);\n}\nstyles() {\n  return css();\n}\n``\n. @e-karma Are you having problems with it in0.14.0? The only issue I am aware of is it throws a console warning, but other than that is should work just fine.\n. The plan is to have it done before the 18th of this month. Is there anything in particular you need in the mean time? I am working on a 1.0.0 branch and can build whatever you need next\n. Sorry @e-karma, I have the week off and will be finished it up in the next few days\n. Yes @igorpreston, I have just been super busy the past couple of weeks. I will get something out as soon as I can!\n. Just got server-side rendering working (https://github.com/casesandberg/reactcss/commit/ca7cf3352b32fe74cc512643e2233381207ba02e), going to be upgrading the repo to work with0.14.0` tonight!\n. Sorry. I am going to be releasing 0.5.0 with all of these changes this\nweekend!\nOn Friday, January 15, 2016, e-karma notifications@github.com wrote:\n\nHey @casesandberg https://github.com/casesandberg, any input on this?\nNot sure which way to move forward. Thanks\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/casesandberg/reactcss/issues/23#issuecomment-172120433\n.\n. Ah @e-karma, I see what you are saying. I am going to do some digging to see if there is a way for this to work alongside decerators.\n. Been looking into it but its really tricky. Wont have a fix in until mid-next-week at a minimum \n. Launched!\n. react-map-styles is just a string replace, you can just require it in and use the function to transform:\n\n```\nimport 'mapStyles' from 'react-map-styles';\nlet output = ReactDOMServer.renderToString(RootComponent);\nlet transformed = mapStyles(output);\n``\n. What do you mean by \"className isn't getting converted and neither is children\"?\n. Well shit. Thanks for digging into this. I am going to dig into this tonight to see if there is a quick fix, but I agree we might just have to move away fromis`. Do you have any thoughts around what we could change it to?\n. Sorry for the delay on this @mhahn I am going to try and get a solution working for you tonight. \nHow would you feel about using spreads instead of static properties? That way this can all be done programmatically and not have to rely on a string replace:\n<div {...class(\"foo bar\")} />\n. Another solution would be revert back to the string replace but use class instead of is. I wonder if this is possible (I am pretty sure react will just throw a warning). Because reverting back to the original syntax would be nice too. This might get confusing mixing class and className though. Or even inlineClass.\n. Hey, just got server-side rendering working in the 1.0.0 branch! https://github.com/casesandberg/reactcss/commit/ca7cf3352b32fe74cc512643e2233381207ba02e\nIt's a little messy now, I will clean it up tonight and write a paragraph on how to use it so you can get running with it before the official 1.0.0 launch\n. Yeah definitely, this isn't intended to run client-side in prod. I would say you would still want to do a string replace when building for prod. Similarly you would use this method server-side for serving up static assets.\n. What do you mean by that?\n. Ah, it totally does because it changes the render on parent to be a spread and passes it down as props:\nbefore:\nrender() {\n    return <Child is=\"Parent\" />;\n}\nAfter:\nrender() {\n    return <Child {...this.styles().Parent} />;\n}\n. Yep, the string replace will transform it correctly. Similarly the solution that iterates through all the children will transform it the same if you try to render it with ReactDOMServer!\n. Did you ever do some testing to see if this solution adds to much overhead?\n. Ah! reactcss@1.0.0 removes react-map-styles and works flawlessly with server side rendering!\n. My bad. Updated! reactcss@0.4.2\n. What does your webpack settings look like? Also what version of react-color are you using?\n. This was fixed in reactcss@0.4.4\n. Hmm, why do you find yourself extending components in that way? I dont understand what you are trying to do.\n. I will fix this today!\n. Fixed! Update to reactcss@0.4.3 to reap the leaner codebase!\n. Fixed in 1.0.0\n. The API has been changed in 1.0.0 to make this unnecessary!\n. Deprecated in 1.0.0\n. Hey @e-karma! Thinking through this now. It needs to be something that works with presentational classes as well. This is something I am going to solve quickly because I really do want support with Redux.\nAlso, why is it that you cant wrap presentational components in a wrapper class? ie: \n```\nconst Example = () => (\n)\nexport default ReactCSS(Example)\n``\n. @e-karma Sorry for the delay. Been brainstorming all day and have a simplified API for the1.0.0release which has support for react-native, server side rendering and and redux. Coming in the next few days!\n. @e-karmareactcss@1.0.0` hit today with support for redux! Check out more about it here: http://reactcss.com/#redux\n. There is actually a whole new API interface with 1.0.0 which makes this unnecessary. Thanks for your work though!\n. Thanks man \ud83d\ude4c\n. There is a PR open for this! Just waiting for it to be resolved and will merge it!\nhttps://github.com/casesandberg/reactcss/pull/56\n. If you fix the conflicts I will be happy to merge this!\n. NP, thanks for this!\n. Tagged Release!\n. Oh! I am not sure, I will try and look into this soon\n. I am not sure what you are asking? @kuailingmin \n. Looked into this today and it looks like there is no way to do inline styles with CSS Transition Group /: https://facebook.github.io/react/docs/animation.html\n. This is awesome! Can you squash and then I will merge it?\n. Thanks for the PR @jacobrask, this is up at reactcss@1.0.5\n. This was fixed in reactcss@1.0.4\n. Sorry for the confusion, I will update the titles so they are less confusing :)\n. Ah, great point!\n. This is in reactcss@1.0.5\n. I may be wrong but I dont think there is a way of doing that with inline styles?\n. Thanks \ud83d\udcbc\n. reactcss@1.0.6\n. Nice! Can you run npm run lib on this and I can then merge it in\n. Perfect! This is up at reactcss@1.0.7\n. Yeah! Hopefully I can get to it one day soon\n. @chrisgervang think you could tackle this?\n. Someone just made one! https://www.nuget.org/packages/reactcss.TypeScript.DefinitelyTyped/0.0.1\n. I don't know how it snuck in there, would love a PR!\n\ncase\nOn Wednesday, September 21, 2016, jharris4 notifications@github.com wrote:\n\n@casesandberg https://github.com/casesandberg I'd be happy to make a PR\nwith the change to package.json, but I wasn't sure if there was some reason\nI'm not aware of that made you put it in peerDependencies... Can you\nclarify? Thx\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/casesandberg/reactcss/issues/111#issuecomment-248660917,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEa0JGfthKaV0yhrj1Zh4qnaqjjEVh6aks5qsVaRgaJpZM4KBpb1\n.\n. Fixed in https://github.com/casesandberg/reactcss/pull/113. Use it reactcss@1.0.8\n. Just re-deployed reactcss@1.0.9 fixes the issue.\n. Hey @martynchamberlin! You can read more about vendor prefixes in react here.\n\nTL;DR Drop the leading dash and uppercase the vendor namespace:\nconst styles = reactCSS({\n  'default': {\n    sidebar: {\n      overflowStyle: 'none',\n      MsOverflowStyle: 'none'\n    }\n  }\n});\n. It handles prefixing of transform for you!\nhttps://github.com/casesandberg/reactcss/blob/master/src/autoprefix.js#L68\n. I don't understand why you are adding all of the exports to the default export. Can you provide some information around why you want to make this change?. The later is the cleaner way to do imports with es6, however. If you want them attached to the reactCSS var you can always do:\nimport { * as reactCSS } from 'reactCSS'. Thanks @quagliero! Can you run npm run docs-dist and commit the docs bundle as well?. Sorry about this. I updated ReactCSS to not use map on objects, you shouldn't have to do anything special using react-color@2.11.2. Look like webpack might have an issue finding a plugin? (Issue Thread here: https://github.com/lodash/babel-plugin-lodash/issues/83). The only plugn that is there, and it was added recently, is the lodash plugin: https://github.com/casesandberg/reactcss/blob/master/.babelrc#L8. I am investigating.. That is weird. It seems not to be an issue on this end as far as I can tell. There wasn't any changes that would affect something like this from 1.2.0 to 1.2.2. Can you clear your node_modules, reinstall and let me know if this is still an issue?. I removed the .babelrc from the NPM payload and it fixes this issue!. ",
    "bramdevries": "Just updated to 0.3.1 and now I get the following:\n```\n\n\nError: Cannot find module '../src/check-class-structure' from 'node_modules/reactcss/lib'\n```\n\n\nSeems like it's going wrong here: https://github.com/casesandberg/reactcss/blob/master/src/inline.coffee#L4\n. Hmm it's solved the compile errors, but now I'm getting runtime errors:\n``` javascript\nimport ReactCSS from 'reactcss';\nexport default class SideMenu extends ReactCSS.Component {\nclasses() {\n    return {\n        'default': {\n            sidemenu: {\n                background: 'red'\n            }\n        }\n    }\n}\n\nrender() {\n    return (\n        <div is='sidemenu' />\n    );\n}\n\n};\n```\nGives this error:\nUncaught ReferenceError: React is not defined\n. Okay so doing this worked:\n``` javascript\nimport React from 'react/addons';\nimport ReactCSS from 'reactcss';\nexport default class SideMenu extends ReactCSS.Component {\nclasses() {\n    return {\n        'default': {\n            sidemenu: {\n                background: 'red'\n            }\n        }\n    }\n}\n\nrender() {\n    return (\n        <div style={this.styles().sidemenu}>\n            <p>Test</p>\n        </div>\n    );\n}\n\n};\n```\nThe documentation doesn't mention having to import both React and ReactCSS, I assumed ReactCSS replaced React\n. Just updated to 0.3.1 and now I get the following:\n```\n\n\nError: Cannot find module '../src/check-class-structure' from 'node_modules/reactcss/lib'\n```\n\n\nSeems like it's going wrong here: https://github.com/casesandberg/reactcss/blob/master/src/inline.coffee#L4\n. Hmm it's solved the compile errors, but now I'm getting runtime errors:\n``` javascript\nimport ReactCSS from 'reactcss';\nexport default class SideMenu extends ReactCSS.Component {\nclasses() {\n    return {\n        'default': {\n            sidemenu: {\n                background: 'red'\n            }\n        }\n    }\n}\n\nrender() {\n    return (\n        <div is='sidemenu' />\n    );\n}\n\n};\n```\nGives this error:\nUncaught ReferenceError: React is not defined\n. Okay so doing this worked:\n``` javascript\nimport React from 'react/addons';\nimport ReactCSS from 'reactcss';\nexport default class SideMenu extends ReactCSS.Component {\nclasses() {\n    return {\n        'default': {\n            sidemenu: {\n                background: 'red'\n            }\n        }\n    }\n}\n\nrender() {\n    return (\n        <div style={this.styles().sidemenu}>\n            <p>Test</p>\n        </div>\n    );\n}\n\n};\n```\nThe documentation doesn't mention having to import both React and ReactCSS, I assumed ReactCSS replaced React\n. ",
    "jason-wolfe": "Thanks!\n. Hmm I'm not sure if you're misreading or if I'm confused on this one. I was referring to the prop name on div being styles instead of style, no the value being assigned to the prop being this.styles().\nI think it should be <div style={this.styles().model}> instead.\n. Thanks!\n. Hmm I'm not sure if you're misreading or if I'm confused on this one. I was referring to the prop name on div being styles instead of style, no the value being assigned to the prop being this.styles().\nI think it should be <div style={this.styles().model}> instead.\n. ",
    "henryboldi": "@andrewliebchen _But what about Opera Mini?!\n. @e-karma Check https://github.com/casesandberg/reactcss/tree/1.0.0\n. @andrewliebchen _But what about Opera Mini?!\n. @e-karma Check https://github.com/casesandberg/reactcss/tree/1.0.0\n. ",
    "luisrudge": ":+1:  for that. This fixes an error with eslint as well, since this component needs React to be present, but my file doesn't use React anywhere.\n. :+1:  for that. This fixes an error with eslint as well, since this component needs React to be present, but my file doesn't use React anywhere.\n. ",
    "jamiebuilds": "Here's an example from Radium: https://github.com/FormidableLabs/radium/blob/master/modules/enhancer.js\n. Clearing out old issues, closing for inactivity\n. Here's an example from Radium: https://github.com/FormidableLabs/radium/blob/master/modules/enhancer.js\n. Clearing out old issues, closing for inactivity\n. ",
    "henriquea": "Hey @casesandberg yes I saw it today, totally lame! \ud83d\ude04 Then I closed the issue myself.\nHaving fun with this library man! Thanks for the good work\n. @casesandberg I like the proposal. Considering in  0.14 the pure components/functions are a big deal, removing the old class method make sense for me. \n. Hey @casesandberg yes I saw it today, totally lame! \ud83d\ude04 Then I closed the issue myself.\nHaving fun with this library man! Thanks for the good work\n. @casesandberg I like the proposal. Considering in  0.14 the pure components/functions are a big deal, removing the old class method make sense for me. \n. ",
    "liady": "[Off topic]\nDid you built the documentation framework and components yourself?\nAny thoughts on releasing it as an independent project? (It looks very good)\n. :+1:\n. @casesandberg Yeah, I see the problem.\nTheoretically it could be:\njs\nReactCSS.mixin.styles = function(){\n  return this.css(this.conditionalClasses && this.conditionalClasses.call(this));\n}\nand when using this mixin:\njs\nvar Item = React.createClass({\n  mixins: [ReactCSS.mixin],\n  // totaly optional now:\n  conditionalClasses: function(){\n    return {\"hovered\": this.state.hovered}\n  }\nAnd that way conditionalClasses will be an optional key only for those who want to declare conditional classes rules. All the rest won't have to declare styles at all.\nBut now it will probably be a breaking change for those who are already using it.\n. [Off topic]\nDid you built the documentation framework and components yourself?\nAny thoughts on releasing it as an independent project? (It looks very good)\n. :+1:\n. @casesandberg Yeah, I see the problem.\nTheoretically it could be:\njs\nReactCSS.mixin.styles = function(){\n  return this.css(this.conditionalClasses && this.conditionalClasses.call(this));\n}\nand when using this mixin:\njs\nvar Item = React.createClass({\n  mixins: [ReactCSS.mixin],\n  // totaly optional now:\n  conditionalClasses: function(){\n    return {\"hovered\": this.state.hovered}\n  }\nAnd that way conditionalClasses will be an optional key only for those who want to declare conditional classes rules. All the rest won't have to declare styles at all.\nBut now it will probably be a breaking change for those who are already using it.\n. ",
    "piyushchauhan2011": "@casesandberg  ??\n. @casesandberg  ??\n. ",
    "wdmtech": "Try: \nBASH\nbower install https://github.com/casesandberg/reactcss.git\nIn absence of a bower.json file :smile: \n. Try: \nBASH\nbower install https://github.com/casesandberg/reactcss.git\nIn absence of a bower.json file :smile: \n. ",
    "mwildehahn": "hm... it's passing the element through now but the element isn't getting rendered correctly. the on* events don't seem to be firing.\nwhereas if i pass it directly to the component it works fine.\n. Seems like the not rendering properly is an issue with the component, not how its passed with this.\n. no idea, i just was reading the new react documentation and thought of\nthis.\ni meant more of \"conflict\" than break. i'll see if i can lookup anything\nabout \"is\"\nOn Tue, Sep 29, 2015 at 8:39 PM case notifications@github.com wrote:\n\nDo you know what the is=\"...\" attribute does? I cant find anything about\nit.\nAlso, since the react-map-styles is doing string replace, it wont break\nanything unless you are trying to use is. I have been trying to come up\nwith a more long-term solution other than hijacking it anyways.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/casesandberg/reactcss/issues/22#issuecomment-144273561\n.\n. @casesandberg sorry for blending this and https://github.com/casesandberg/reactcss/issues/23 together. @jhytonen is right, I upgraded to the version on master and the warnings etc. have gone away. everything seems to be working well.\n. +1 to the proposed changes, let me know if i can help!\n. fyi: I'm getting these same errors \"uncaught Error: Invariant Violation: findComponentRoot(..., .0.0.0.0.0)\" when trying to use React 0.14. Initial load seems to work, but still publishes warnings, re-rendering seems to be failing at certain times.\n. re: \n\nstyles = () => {\n    return css({\n      'default': {\n        title: {\n          color: '#333',\n        },\n      },\n    }, {\n      'foo-bar': 2 + 2 === 4,\n    });\n  }\ni'd be for simplifying to something like this. we don't use activations very often, but whenever we do i forget the syntax.\none comment is that i would prefer to limit the import boilerplate to setup a new component. if there was a way styles could look something like:\nstyles = () => {\n    classes: {\n         default: {\n              ...\n         }\n    },\n    activations: {\n         ...\n    },\n}\nwhere whatever was referencing styles in reactcss would do:\nconst { classes, activations } = Component.styles()\nreturn css(classes, activations)\nor something, then i wouldn't have to import css everywhere which would be nice.\n. @casesandberg lmk if there is anything i can help with, our team is focused on getting server side rendering released this week.\n. :heart_eyes: :+1: :laughing: that makes so much sense. thank you. i've been going down the completely wrong path trying to think of how to get webpack to pre-process...\n. hm, i don't think this is as straightforward as that. i think the is is somehow preventing react from processing the jsx tag completely.\nbefore the transformation, renderToString outputs:\n<div className=\"infoBar___yu82e well\" is=\"root\" children=\"[object Object]\" data-reactid=\".2cfeu6dc35s.3\">\nafter the transformation, we get:\n<div className=\"infoBar___yu82e well\" style={ this.styles().root } children=\"[object Object]\" data-reactid=\".2cfeu6dc35s.3\">\nso it is correctly expanding is, but className isn't getting converted and neither is children.\ni'm testing this with this repo: https://github.com/erikras/react-redux-universal-hot-example\nwith the following diff:\n```\ndiff --git a/src/components/InfoBar/InfoBar.js b/src/components/InfoBar/InfoBar.js\nindex adecf18..7b68d62 100755\n--- a/src/components/InfoBar/InfoBar.js\n+++ b/src/components/InfoBar/InfoBar.js\n@@ -1,7 +1,8 @@\n-import React, {Component, PropTypes} from 'react';\n+import React, {PropTypes} from 'react';\n import {bindActionCreators} from 'redux';\n import {connect} from 'react-redux';\n import {load} from 'redux/modules/info';\n+import { Component } from 'reactcss';\n@connect(\n     state => ({info: state.info.data}),\n@@ -12,11 +13,21 @@ export default class InfoBar extends Component {\n     load: PropTypes.func.isRequired\n   }\n\nclasses() {\nreturn {\ndefault: {\nroot: {\nbackgroundColor: 'black',\n},\n},\n};\n}\n+\n   render() {\n     const {info, load} = this.props; // eslint-disable-line no-shadow\n     const styles = require('./InfoBar.scss');\n     return (\n\n\n\n           This is an info bar\n           {' '}\ndiff --git a/src/server.js b/src/server.js\nindex 5eee239..09ae331 100755\n--- a/src/server.js\n+++ b/src/server.js\n@@ -12,6 +12,7 @@ import Html from './helpers/Html';\n import PrettyError from 'pretty-error';\n import http from 'http';\n import SocketIo from 'socket.io';\n+import mapStyles from 'react-map-styles';\n\nimport {ReduxRouter} from 'redux-router';\n import createHistory from 'history/lib/createMemoryHistory';\n@@ -101,8 +102,11 @@ app.use((req, res) => {\n         if (status) {\n           res.status(status);\n         }\n-        res.send('<!doctype html>\\n' +\n-          ReactDOM.renderToString());\n+        const content = ReactDOM.renderToString();\n+        const transformed = mapStyles(content);\n+        console.log(content);\n+        console.log('TRANSFORMED:\\n' + transformed);\n+        res.send('<!doctype html>\\n' + transformed);\n       }).catch((err) => {\n         console.error('DATA FETCHING ERROR:', pretty.render(err));\n         res.status(500);\ndiff --git a/webpack/dev.config.js b/webpack/dev.config.js\nindex 132862b..24b25e2 100755\n--- a/webpack/dev.config.js\n+++ b/webpack/dev.config.js\n@@ -62,7 +62,7 @@ module.exports = {\n   },\n   module: {\n     loaders: [\n-      { test: /.js$/, exclude: /node_modules/, loaders: ['babel?' + JSON.stringify(babelLoaderQuery), 'eslint-loader']},\n+      { test: /.js$/, exclude: /node_modules/, loaders: ['babel?' + JSON.stringify(babelLoaderQuery), 'eslint-loader', 'react-map-styles']},\n       { test: /.json$/, loader: 'json-loader' },\n       { test: /.less$/, loader: 'style!css?modules&importLoaders=2&sourceMap&localIdentName=[local][hash:base64:5]!autoprefixer?browsers=last 2 version!less?outputStyle=expanded&sourceMap' },\n       { test: /.scss$/, loader: 'style!css?modules&importLoaders=2&sourceMap&localIdentName=[local][hash:base64:5]!autoprefixer?browsers=last 2 version!sass?outputStyle=expanded&sourceMap' },\n``\n. the output fromrenderToString` is:\n<div className=\"infoBar___yu82e well\" style={ this.styles().root } children=\"[object Object]\" data-reactid=\".2cfeu6dc35s.3\">\nas opposed to:\n<div class=\"infoBar___yu82e well\" data-reactid=\".2cfeu6dc35s.3\">\nwithout reactcss.\n. it's not converting className to class\n. a more straight forward repro (assuming react and react-dom):\nrepro.js\n```\nvar React = require('react');\nvar ReactDOM = require('react-dom/server');\nvar CommentBox = React.createClass({displayName: 'CommentBox', render: function() { return ( React.createElement('div', {className: \"commentBox\"}, \"Hello, world! I am a CommentBox.\")); } });\nvar CommentBoxWithIs = React.createClass({displayName: 'CommentBox', render: function() { return ( React.createElement('div', {className: \"commentBox\", is: \"test\"}, \"Hello, world! I am a CommentBox.\")); } });\nvar commentBox = React.createElement(CommentBox, null);\nvar commentBoxWithIs = React.createElement(CommentBoxWithIs, null);\nconsole.log('original: %s', ReactDOM.renderToString(commentBox))\nconsole.log('with reactcss: %s', ReactDOM.renderToString(commentBoxWithIs))\n```\nresults in:\n$ node repro.js\noriginal: <div class=\"commentBox\" data-reactid=\".1ukajf9nxts\" data-react-checksum=\"-1784209694\">Hello, world! I am a CommentBox.</div>\nwith reactcss: <div className=\"commentBox\" is=\"test\" children=\"Hello, world! I am a CommentBox.\" data-reactid=\".adjpxx9ji8\" data-react-checksum=\"-1799212608\">Hello, world! I am a CommentBox.</div>\n. it has to do with is explicity:\nhttps://github.com/facebook/react/blob/master/src/renderers/dom/shared/ReactDOMComponent.js#L745\nhttps://github.com/facebook/react/blob/master/src/renderers/dom/shared/ReactDOMComponent.js#L491\nif is is listed in the props at all, it treats all the attributes within the element as \"custom\", which means it just dumps the key=\"value\", which is why className, children etc. don't get converted.\nif you read through the React 0.14 release notes you can see them mention this:\nhttp://facebook.github.io/react/blog/2015/09/10/react-v0.14-rc1.html#notable-enhancements\n\"In React DOM, arbitrary attributes are supported on custom elements (those with a hyphen in the tag name or an is=\"...\" attribute)\"\naside from coming up with an alias for is i can't think of a way to make this work.\n. I'm not sure what the alternative should be, \"is\" really does make the most sense.\nI think react has conflicting handling of \"is\", on one hand its listed as a valid html dom property, on the other hand, using it means the component is considered custom...\ni filed this issue: https://github.com/facebook/react/issues/5298\nbut i'm not too confident that will get resolved/resolved quickly.\nsome ideas on alternatives:\n- using a vendor suffix: isCSS=\"root\", looks ugly though\n- since you mentioned including multiple classes in https://github.com/casesandberg/reactcss/issues/23 (which i think would be great): classes=\"common root\"\n  the above also stays consistent with the classes function, which i kind of like.\n. no worries, don't feel like you have to rush on my account. i'm happy to wait for the 1.0 release.\nthinking through the case where i would also be spreading other properties:\n<div\n    className=\"something\"\n    otherProp=\"something\"\n    {\n         ...class(\"foo bar\")\n         ...this.props\n    }\n/>\ni'm ok with that, i think the static property looks better, but i would be willing to give that up for the simplicity of not having to do something special for server-side rendering.\n. i like the idea of supporting the function as well as the static property.\ni think using class would be too confusing. inlineClass or classes would work for me. i like the plural version because it indicates that you can use multiple values.\n. i tried switching this to inlineStyles to see if i could then run mapStyles on the React rendered output. From what I can tell, react drops any properties that it can't handle and don't start with data-. So I'm opting for not relying on react-map-styles and just going with the vanilla style=\n. even if we used something like data-inline-styles, we use the material-ui library which relies on child components pulling the style from parent components in some cases. as soon as react renders those elements, it doesn't matter if we replace data-inline-styles since the child components have already been rendered.\n. i'd love to bench mark this and get a a sense if it has any performance implications. iterating through the whole tree before rendering seems somewhat intense to me vs just not using is\n. yea, the issue with the string replace is libraries like\nhttp://www.material-ui.com/#/ where they fetch the style/attributes from\nthe parents.\nso if react renders the components, we lose out on passing those values\ndown.\nOn Thu, Dec 3, 2015 at 11:07 AM case notifications@github.com wrote:\n\nYeah definitely, this isn't intended to run client-side in prod. I would\nsay you would still want to do a string replace when building for prod.\nSimilarly you would use this method server-side for serving up static\nassets.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/casesandberg/reactcss/issues/24#issuecomment-161749626\n.\n. if we do something like:\n\nclass Parent extends Component {\n      classes() {\n          \"Parent\": {\n               \"primaryTextColor\": \"blue\",\n          }\n     }\n     render() {\n         return ;\n     }\n}\nwhere Child is something like:\nclass Child extends Component {\n      render() {\n            const { primaryTextColor } = this.props;\n            return ;\n      }\n}\nmy understanding is that as soon as we call ReactDOM.renderToString() we\nneed to have \"primaryTextColor\" passed down to the SubComponent. the string\nreplace doesn't achieve that right?\nOn Thu, Dec 3, 2015 at 11:11 AM case notifications@github.com wrote:\n\nWhat do you mean by that?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/casesandberg/reactcss/issues/24#issuecomment-161750553\n.\n. sorry, \"it totally does\" -- need to be there right? or the string replace handles that?\n. Ok, I'm with you.\n\nString replace over the files works, it doesn't work if you call it after the ReactDOM.renderToString (which was the initial idea for server side rendering).\nThe solution you have for iterating through the children does look like it solves the issue, I'd just be interested in exploring what overhead this adds to each request for server side rendering.\noverall, thanks so much for getting to this!\n. I didn't, I just am about to get server side rendering deployed in the next\ncouple of days. Once that is there I'll have a baseline to test this.\nI removed \"is=\" from all of my components, but we should be able to see if\nsimply iterating through the tree has any noticeable impact.\nOn Wed, Dec 9, 2015 at 4:34 PM case notifications@github.com wrote:\n\nDid you ever do some testing to see if this solution adds to much overhead?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/casesandberg/reactcss/issues/24#issuecomment-163447553\n.\n. A couple things I've seen using react-css in production:\n\nclasses method gets huge, quick. this could be a side effect of having too large of classes in the first place, but what i like about inline styles is that the styles are defined with the component. what i found was that we ended up with these huge classes functions defining all of these styles and they became unwieldy fast.\ni think class components themselves tend to become really large. i've started using stateless components which make composing components much easier. i'm not sure how these work with the current API of ReactCSS (i know v2 was on the horizon at some point).\ni haven't looked into the technical details, but something like radium's api: https://github.com/FormidableLabs/radium#usage is interesting because i could do something like:\n```\nconst MyStatelessComponent = () => {\n      const styles = {text: {color: 'black'}};\n      return \"hi\";\n}\nexport { MyStatelessComponent };\nexport Radium(MyStatelessComponent);\n```\nif ReactCSS is a HoC we could do the same thing which would definitely be interesting.\n. hm... it's passing the element through now but the element isn't getting rendered correctly. the on* events don't seem to be firing.\nwhereas if i pass it directly to the component it works fine.\n. Seems like the not rendering properly is an issue with the component, not how its passed with this.\n. no idea, i just was reading the new react documentation and thought of\nthis.\ni meant more of \"conflict\" than break. i'll see if i can lookup anything\nabout \"is\"\nOn Tue, Sep 29, 2015 at 8:39 PM case notifications@github.com wrote:\n\nDo you know what the is=\"...\" attribute does? I cant find anything about\nit.\nAlso, since the react-map-styles is doing string replace, it wont break\nanything unless you are trying to use is. I have been trying to come up\nwith a more long-term solution other than hijacking it anyways.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/casesandberg/reactcss/issues/22#issuecomment-144273561\n.\n. @casesandberg sorry for blending this and https://github.com/casesandberg/reactcss/issues/23 together. @jhytonen is right, I upgraded to the version on master and the warnings etc. have gone away. everything seems to be working well.\n. +1 to the proposed changes, let me know if i can help!\n. fyi: I'm getting these same errors \"uncaught Error: Invariant Violation: findComponentRoot(..., .0.0.0.0.0)\" when trying to use React 0.14. Initial load seems to work, but still publishes warnings, re-rendering seems to be failing at certain times.\n. re: \n\nstyles = () => {\n    return css({\n      'default': {\n        title: {\n          color: '#333',\n        },\n      },\n    }, {\n      'foo-bar': 2 + 2 === 4,\n    });\n  }\ni'd be for simplifying to something like this. we don't use activations very often, but whenever we do i forget the syntax.\none comment is that i would prefer to limit the import boilerplate to setup a new component. if there was a way styles could look something like:\nstyles = () => {\n    classes: {\n         default: {\n              ...\n         }\n    },\n    activations: {\n         ...\n    },\n}\nwhere whatever was referencing styles in reactcss would do:\nconst { classes, activations } = Component.styles()\nreturn css(classes, activations)\nor something, then i wouldn't have to import css everywhere which would be nice.\n. @casesandberg lmk if there is anything i can help with, our team is focused on getting server side rendering released this week.\n. :heart_eyes: :+1: :laughing: that makes so much sense. thank you. i've been going down the completely wrong path trying to think of how to get webpack to pre-process...\n. hm, i don't think this is as straightforward as that. i think the is is somehow preventing react from processing the jsx tag completely.\nbefore the transformation, renderToString outputs:\n<div className=\"infoBar___yu82e well\" is=\"root\" children=\"[object Object]\" data-reactid=\".2cfeu6dc35s.3\">\nafter the transformation, we get:\n<div className=\"infoBar___yu82e well\" style={ this.styles().root } children=\"[object Object]\" data-reactid=\".2cfeu6dc35s.3\">\nso it is correctly expanding is, but className isn't getting converted and neither is children.\ni'm testing this with this repo: https://github.com/erikras/react-redux-universal-hot-example\nwith the following diff:\n```\ndiff --git a/src/components/InfoBar/InfoBar.js b/src/components/InfoBar/InfoBar.js\nindex adecf18..7b68d62 100755\n--- a/src/components/InfoBar/InfoBar.js\n+++ b/src/components/InfoBar/InfoBar.js\n@@ -1,7 +1,8 @@\n-import React, {Component, PropTypes} from 'react';\n+import React, {PropTypes} from 'react';\n import {bindActionCreators} from 'redux';\n import {connect} from 'react-redux';\n import {load} from 'redux/modules/info';\n+import { Component } from 'reactcss';\n@connect(\n     state => ({info: state.info.data}),\n@@ -12,11 +13,21 @@ export default class InfoBar extends Component {\n     load: PropTypes.func.isRequired\n   }\n\nclasses() {\nreturn {\ndefault: {\nroot: {\nbackgroundColor: 'black',\n},\n},\n};\n}\n+\n   render() {\n     const {info, load} = this.props; // eslint-disable-line no-shadow\n     const styles = require('./InfoBar.scss');\n     return (\n\n\n\n           This is an info bar\n           {' '}\ndiff --git a/src/server.js b/src/server.js\nindex 5eee239..09ae331 100755\n--- a/src/server.js\n+++ b/src/server.js\n@@ -12,6 +12,7 @@ import Html from './helpers/Html';\n import PrettyError from 'pretty-error';\n import http from 'http';\n import SocketIo from 'socket.io';\n+import mapStyles from 'react-map-styles';\n\nimport {ReduxRouter} from 'redux-router';\n import createHistory from 'history/lib/createMemoryHistory';\n@@ -101,8 +102,11 @@ app.use((req, res) => {\n         if (status) {\n           res.status(status);\n         }\n-        res.send('<!doctype html>\\n' +\n-          ReactDOM.renderToString());\n+        const content = ReactDOM.renderToString();\n+        const transformed = mapStyles(content);\n+        console.log(content);\n+        console.log('TRANSFORMED:\\n' + transformed);\n+        res.send('<!doctype html>\\n' + transformed);\n       }).catch((err) => {\n         console.error('DATA FETCHING ERROR:', pretty.render(err));\n         res.status(500);\ndiff --git a/webpack/dev.config.js b/webpack/dev.config.js\nindex 132862b..24b25e2 100755\n--- a/webpack/dev.config.js\n+++ b/webpack/dev.config.js\n@@ -62,7 +62,7 @@ module.exports = {\n   },\n   module: {\n     loaders: [\n-      { test: /.js$/, exclude: /node_modules/, loaders: ['babel?' + JSON.stringify(babelLoaderQuery), 'eslint-loader']},\n+      { test: /.js$/, exclude: /node_modules/, loaders: ['babel?' + JSON.stringify(babelLoaderQuery), 'eslint-loader', 'react-map-styles']},\n       { test: /.json$/, loader: 'json-loader' },\n       { test: /.less$/, loader: 'style!css?modules&importLoaders=2&sourceMap&localIdentName=[local][hash:base64:5]!autoprefixer?browsers=last 2 version!less?outputStyle=expanded&sourceMap' },\n       { test: /.scss$/, loader: 'style!css?modules&importLoaders=2&sourceMap&localIdentName=[local][hash:base64:5]!autoprefixer?browsers=last 2 version!sass?outputStyle=expanded&sourceMap' },\n``\n. the output fromrenderToString` is:\n<div className=\"infoBar___yu82e well\" style={ this.styles().root } children=\"[object Object]\" data-reactid=\".2cfeu6dc35s.3\">\nas opposed to:\n<div class=\"infoBar___yu82e well\" data-reactid=\".2cfeu6dc35s.3\">\nwithout reactcss.\n. it's not converting className to class\n. a more straight forward repro (assuming react and react-dom):\nrepro.js\n```\nvar React = require('react');\nvar ReactDOM = require('react-dom/server');\nvar CommentBox = React.createClass({displayName: 'CommentBox', render: function() { return ( React.createElement('div', {className: \"commentBox\"}, \"Hello, world! I am a CommentBox.\")); } });\nvar CommentBoxWithIs = React.createClass({displayName: 'CommentBox', render: function() { return ( React.createElement('div', {className: \"commentBox\", is: \"test\"}, \"Hello, world! I am a CommentBox.\")); } });\nvar commentBox = React.createElement(CommentBox, null);\nvar commentBoxWithIs = React.createElement(CommentBoxWithIs, null);\nconsole.log('original: %s', ReactDOM.renderToString(commentBox))\nconsole.log('with reactcss: %s', ReactDOM.renderToString(commentBoxWithIs))\n```\nresults in:\n$ node repro.js\noriginal: <div class=\"commentBox\" data-reactid=\".1ukajf9nxts\" data-react-checksum=\"-1784209694\">Hello, world! I am a CommentBox.</div>\nwith reactcss: <div className=\"commentBox\" is=\"test\" children=\"Hello, world! I am a CommentBox.\" data-reactid=\".adjpxx9ji8\" data-react-checksum=\"-1799212608\">Hello, world! I am a CommentBox.</div>\n. it has to do with is explicity:\nhttps://github.com/facebook/react/blob/master/src/renderers/dom/shared/ReactDOMComponent.js#L745\nhttps://github.com/facebook/react/blob/master/src/renderers/dom/shared/ReactDOMComponent.js#L491\nif is is listed in the props at all, it treats all the attributes within the element as \"custom\", which means it just dumps the key=\"value\", which is why className, children etc. don't get converted.\nif you read through the React 0.14 release notes you can see them mention this:\nhttp://facebook.github.io/react/blog/2015/09/10/react-v0.14-rc1.html#notable-enhancements\n\"In React DOM, arbitrary attributes are supported on custom elements (those with a hyphen in the tag name or an is=\"...\" attribute)\"\naside from coming up with an alias for is i can't think of a way to make this work.\n. I'm not sure what the alternative should be, \"is\" really does make the most sense.\nI think react has conflicting handling of \"is\", on one hand its listed as a valid html dom property, on the other hand, using it means the component is considered custom...\ni filed this issue: https://github.com/facebook/react/issues/5298\nbut i'm not too confident that will get resolved/resolved quickly.\nsome ideas on alternatives:\n- using a vendor suffix: isCSS=\"root\", looks ugly though\n- since you mentioned including multiple classes in https://github.com/casesandberg/reactcss/issues/23 (which i think would be great): classes=\"common root\"\n  the above also stays consistent with the classes function, which i kind of like.\n. no worries, don't feel like you have to rush on my account. i'm happy to wait for the 1.0 release.\nthinking through the case where i would also be spreading other properties:\n<div\n    className=\"something\"\n    otherProp=\"something\"\n    {\n         ...class(\"foo bar\")\n         ...this.props\n    }\n/>\ni'm ok with that, i think the static property looks better, but i would be willing to give that up for the simplicity of not having to do something special for server-side rendering.\n. i like the idea of supporting the function as well as the static property.\ni think using class would be too confusing. inlineClass or classes would work for me. i like the plural version because it indicates that you can use multiple values.\n. i tried switching this to inlineStyles to see if i could then run mapStyles on the React rendered output. From what I can tell, react drops any properties that it can't handle and don't start with data-. So I'm opting for not relying on react-map-styles and just going with the vanilla style=\n. even if we used something like data-inline-styles, we use the material-ui library which relies on child components pulling the style from parent components in some cases. as soon as react renders those elements, it doesn't matter if we replace data-inline-styles since the child components have already been rendered.\n. i'd love to bench mark this and get a a sense if it has any performance implications. iterating through the whole tree before rendering seems somewhat intense to me vs just not using is\n. yea, the issue with the string replace is libraries like\nhttp://www.material-ui.com/#/ where they fetch the style/attributes from\nthe parents.\nso if react renders the components, we lose out on passing those values\ndown.\nOn Thu, Dec 3, 2015 at 11:07 AM case notifications@github.com wrote:\n\nYeah definitely, this isn't intended to run client-side in prod. I would\nsay you would still want to do a string replace when building for prod.\nSimilarly you would use this method server-side for serving up static\nassets.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/casesandberg/reactcss/issues/24#issuecomment-161749626\n.\n. if we do something like:\n\nclass Parent extends Component {\n      classes() {\n          \"Parent\": {\n               \"primaryTextColor\": \"blue\",\n          }\n     }\n     render() {\n         return ;\n     }\n}\nwhere Child is something like:\nclass Child extends Component {\n      render() {\n            const { primaryTextColor } = this.props;\n            return ;\n      }\n}\nmy understanding is that as soon as we call ReactDOM.renderToString() we\nneed to have \"primaryTextColor\" passed down to the SubComponent. the string\nreplace doesn't achieve that right?\nOn Thu, Dec 3, 2015 at 11:11 AM case notifications@github.com wrote:\n\nWhat do you mean by that?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/casesandberg/reactcss/issues/24#issuecomment-161750553\n.\n. sorry, \"it totally does\" -- need to be there right? or the string replace handles that?\n. Ok, I'm with you.\n\nString replace over the files works, it doesn't work if you call it after the ReactDOM.renderToString (which was the initial idea for server side rendering).\nThe solution you have for iterating through the children does look like it solves the issue, I'd just be interested in exploring what overhead this adds to each request for server side rendering.\noverall, thanks so much for getting to this!\n. I didn't, I just am about to get server side rendering deployed in the next\ncouple of days. Once that is there I'll have a baseline to test this.\nI removed \"is=\" from all of my components, but we should be able to see if\nsimply iterating through the tree has any noticeable impact.\nOn Wed, Dec 9, 2015 at 4:34 PM case notifications@github.com wrote:\n\nDid you ever do some testing to see if this solution adds to much overhead?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/casesandberg/reactcss/issues/24#issuecomment-163447553\n.\n. A couple things I've seen using react-css in production:\n\nclasses method gets huge, quick. this could be a side effect of having too large of classes in the first place, but what i like about inline styles is that the styles are defined with the component. what i found was that we ended up with these huge classes functions defining all of these styles and they became unwieldy fast.\ni think class components themselves tend to become really large. i've started using stateless components which make composing components much easier. i'm not sure how these work with the current API of ReactCSS (i know v2 was on the horizon at some point).\ni haven't looked into the technical details, but something like radium's api: https://github.com/FormidableLabs/radium#usage is interesting because i could do something like:\n```\nconst MyStatelessComponent = () => {\n      const styles = {text: {color: 'black'}};\n      return \"hi\";\n}\nexport { MyStatelessComponent };\nexport Radium(MyStatelessComponent);\n```\nif ReactCSS is a HoC we could do the same thing which would definitely be interesting.\n. ",
    "kevinsimper": "@casesandberg Okay nice, do you have a link? :)\n. @casesandberg Okay nice, do you have a link? :)\n. ",
    "seekshiva": "There is another issue related to React 0.14. Should I post it here or create a new issue?\n. Seems like react is enforcing that all react components extend React.Component directly.\nclass MyComponent extends ReactCSS.Component {\n  render(){\n    return <div />\n  }\n}\nthrows this warning:\nWarning: MyComponent(...): React component classes must extend React.Component\n. There is another issue related to React 0.14. Should I post it here or create a new issue?\n. Seems like react is enforcing that all react components extend React.Component directly.\nclass MyComponent extends ReactCSS.Component {\n  render(){\n    return <div />\n  }\n}\nthrows this warning:\nWarning: MyComponent(...): React component classes must extend React.Component\n. ",
    "jhytonen": "Don't know if the component classes issue is really an issue?\nThe warnings appear, because reactcss has a dependency to react 0.13. That version does not have \"isReactComponent\" flag set for the React.Component class from which ReactCSS.Component inherits. When I updated reactcss' dependecy to react 0.14, the warnings disappeared and everything works just fine.\nHere is the code that React uses to validate the inheritance:\nwarning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component')\nThe above happens only with the npm package. In master this seems to have been fixed. @seekshiva Are you on master or version 0.4.x?\n. @casesandberg Would it be possible for you to release a version of reactcss with the dependency fixed? \n. Don't know if the component classes issue is really an issue?\nThe warnings appear, because reactcss has a dependency to react 0.13. That version does not have \"isReactComponent\" flag set for the React.Component class from which ReactCSS.Component inherits. When I updated reactcss' dependecy to react 0.14, the warnings disappeared and everything works just fine.\nHere is the code that React uses to validate the inheritance:\nwarning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component')\nThe above happens only with the npm package. In master this seems to have been fixed. @seekshiva Are you on master or version 0.4.x?\n. @casesandberg Would it be possible for you to release a version of reactcss with the dependency fixed? \n. ",
    "hharnisc": "react-map-styles: :+1: \nReact Native Support :+1: \nI also like the idea of removing the classes method in favor or using styles. I think it's more clear, though be good to think about a transitional period to allow people to migrate over to the new styles\nWhat's the repercussions to dropping support for ReactCSS.Component inheritance?\n. react-map-styles: :+1: \nReact Native Support :+1: \nI also like the idea of removing the classes method in favor or using styles. I think it's more clear, though be good to think about a transitional period to allow people to migrate over to the new styles\nWhat's the repercussions to dropping support for ReactCSS.Component inheritance?\n. ",
    "e-karma": "Hello @casesandberg, first off, i'd like to thank you for all the work you've put in for ReactCSS + Bounds.  I'm using both in my main project.  This is the first time i've enjoyed styling and don't think I can go back to the old way.   That said, I'm trying as hard as I can to stay with it, but it appears without .14 compatibility, I will need to migrate, at least in the short term.  \nAll your proposed changes seem like fantastic ideas and I was already thinking similar things.  Any idea when the updates might be available?  Thanks in advance and I look forward to supporting your work!\n. @casesandberg yea, every component that utilizes GetInitialState, it locks the page up.  Seeing many of these errors => \n-uncaught Error: Invariant Violation: findComponentRoot(..., .0.0.0.0.0)\n-uncaught TypeError: Cannot read property '_currentElement' of null\n-Warning: getInitialState was defined on CreateEvent, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?\ni'm rather new to React so some of this may be my implementation, but after many hours wrestling with it, undoubtedly things break when using ReactCSS + Bounds and then clear up when removed. (doesnt' seem to like extending ReactCSS.component)\nHow long until you look to release an update?   Thanks again!\n. I know youre busy @casesandberg and definitley appreciate all the work you've done, but a timeline for 1.0 update would help immensely.  \nI'd also like to propose adding styles for hover selectors if that wasn't something in the works.  Thanks!\n. Hey, thanks!  Could you possibly swap out ReactCSS.Component for React.Component?  I had to remove the lib until fixed because that did more than generate a console warning.   What would the new implementation be?  ES7 Decorator for me is best-case as I have concerns with using mixins (they can only be used in React.createClass but not in React.Component ES6 class).  \n-I'm eager for same update within react-bounds/context/color as Bounds became unusable since the update for the same reasons I think.\n-Does ReactCSS enable :hover styling?\nThanks in advance; big fan of your work!!\n. Hey @casesandberg, still on track for an update by tomorrow?\n. Sounds good @casesandberg!  Happy thanksgiving and let me know if theres anything I can do to help\n. Excellent!  Thanks @casesandberg!  \nI'm still curious, how are you going to include reactcss features into a react component? Inherit direcly from ReactCSS.Component, mixin or ES7 decorator?\nAlso when do you expect the 1.0.0 release w/ doc updates?\n. Hi @casesandberg, very confused at this point.  It seems it is still unfinished but you're last comment 2 weeks ago makes me unsure and unfortunately my project is stuck in limbo.  What is the status of the project?   Thanks\n. Thanks @9o and Thanks @casesandberg .   I spent some time with the new branch and have run into an unfortunate bug.  It appears as though ReactCSS cannot be used alongside other wrappers or ES7 decorators that are applied to the same class.\n@Decorator\nexport class Klass extends Component { ... }\nexport default ReactCSS(Klass);\nIn that example, ReactCSS never works because it wraps the wrapper from Decorator and not the actual class. \nIf this isn't error on my part, it seems like the only viable solution would be to rewrite reactcss wrapper either as decorator or as ES6 wrapper (ReactCSS(ClassName)).  Anyone else have insight or experience with this?\n. Hey @casesandberg, any input on this?  Not sure which way to move forward. Thanks\n. @casesandberg Great! Let me know what you find out. \n. Hey @casesandberg, did you have any luck?  If a fix has to wait at least until next week, thats no problem, just let me know so I can swap out the ES7 Decorators in the short-term.  As always, let me know if theres anything I can do to help!\n. Our presentational components are already wrapped with redux container components. I am not sure they work well with reactcss, considering history with decorators support. Even though we can wrap presentational component with reactcss, that's not wrapped with redux container, we still have no place to put the classes() function, because presentational component is function itself.\nDecorator Support enables wrapping of the Presentation Component with ReactCSS and still use Redux Container, but the main problem remains, which is how to access classes() that is attached only to a class.\nIf the presentational component wasn't wrapped, it could work fine, but again, we have no place to put classes() function because component is not a class.  \nDo you have any ideas?\nThanks again!\n. Hello @casesandberg, first off, i'd like to thank you for all the work you've put in for ReactCSS + Bounds.  I'm using both in my main project.  This is the first time i've enjoyed styling and don't think I can go back to the old way.   That said, I'm trying as hard as I can to stay with it, but it appears without .14 compatibility, I will need to migrate, at least in the short term.  \nAll your proposed changes seem like fantastic ideas and I was already thinking similar things.  Any idea when the updates might be available?  Thanks in advance and I look forward to supporting your work!\n. @casesandberg yea, every component that utilizes GetInitialState, it locks the page up.  Seeing many of these errors => \n-uncaught Error: Invariant Violation: findComponentRoot(..., .0.0.0.0.0)\n-uncaught TypeError: Cannot read property '_currentElement' of null\n-Warning: getInitialState was defined on CreateEvent, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?\ni'm rather new to React so some of this may be my implementation, but after many hours wrestling with it, undoubtedly things break when using ReactCSS + Bounds and then clear up when removed. (doesnt' seem to like extending ReactCSS.component)\nHow long until you look to release an update?   Thanks again!\n. I know youre busy @casesandberg and definitley appreciate all the work you've done, but a timeline for 1.0 update would help immensely.  \nI'd also like to propose adding styles for hover selectors if that wasn't something in the works.  Thanks!\n. Hey, thanks!  Could you possibly swap out ReactCSS.Component for React.Component?  I had to remove the lib until fixed because that did more than generate a console warning.   What would the new implementation be?  ES7 Decorator for me is best-case as I have concerns with using mixins (they can only be used in React.createClass but not in React.Component ES6 class).  \n-I'm eager for same update within react-bounds/context/color as Bounds became unusable since the update for the same reasons I think.\n-Does ReactCSS enable :hover styling?\nThanks in advance; big fan of your work!!\n. Hey @casesandberg, still on track for an update by tomorrow?\n. Sounds good @casesandberg!  Happy thanksgiving and let me know if theres anything I can do to help\n. Excellent!  Thanks @casesandberg!  \nI'm still curious, how are you going to include reactcss features into a react component? Inherit direcly from ReactCSS.Component, mixin or ES7 decorator?\nAlso when do you expect the 1.0.0 release w/ doc updates?\n. Hi @casesandberg, very confused at this point.  It seems it is still unfinished but you're last comment 2 weeks ago makes me unsure and unfortunately my project is stuck in limbo.  What is the status of the project?   Thanks\n. Thanks @9o and Thanks @casesandberg .   I spent some time with the new branch and have run into an unfortunate bug.  It appears as though ReactCSS cannot be used alongside other wrappers or ES7 decorators that are applied to the same class.\n@Decorator\nexport class Klass extends Component { ... }\nexport default ReactCSS(Klass);\nIn that example, ReactCSS never works because it wraps the wrapper from Decorator and not the actual class. \nIf this isn't error on my part, it seems like the only viable solution would be to rewrite reactcss wrapper either as decorator or as ES6 wrapper (ReactCSS(ClassName)).  Anyone else have insight or experience with this?\n. Hey @casesandberg, any input on this?  Not sure which way to move forward. Thanks\n. @casesandberg Great! Let me know what you find out. \n. Hey @casesandberg, did you have any luck?  If a fix has to wait at least until next week, thats no problem, just let me know so I can swap out the ES7 Decorators in the short-term.  As always, let me know if theres anything I can do to help!\n. Our presentational components are already wrapped with redux container components. I am not sure they work well with reactcss, considering history with decorators support. Even though we can wrap presentational component with reactcss, that's not wrapped with redux container, we still have no place to put the classes() function, because presentational component is function itself.\nDecorator Support enables wrapping of the Presentation Component with ReactCSS and still use Redux Container, but the main problem remains, which is how to access classes() that is attached only to a class.\nIf the presentational component wasn't wrapped, it could work fine, but again, we have no place to put classes() function because component is not a class.  \nDo you have any ideas?\nThanks again!\n. ",
    "igorpreston": "Hi @casesandberg, is this project still being maintained?\n. @casesandberg hello, may I know when 1.0.0 version will be released on npm with docs? Really looking forward to it.\n. Hi @casesandberg, is this project still being maintained?\n. @casesandberg hello, may I know when 1.0.0 version will be released on npm with docs? Really looking forward to it.\n. ",
    "relifeted": "I have the same problem. \nseems that webpack confused when resolving the module \"merge\".\nI try to rename merge.js to other name, and also change require syntax, it works.\nmy solution is add resolve.alias in webpack config like this:\njavascript\n   resolve: {\n    alias: {\n      'merge': path.resolve(__dirname, './node_modules/merge/merge.js')\n    }\n  }\nit should prevent this problem,\nbut would @casesandberg please change merge.js into other name?\n. I have the same problem. \nseems that webpack confused when resolving the module \"merge\".\nI try to rename merge.js to other name, and also change require syntax, it works.\nmy solution is add resolve.alias in webpack config like this:\njavascript\n   resolve: {\n    alias: {\n      'merge': path.resolve(__dirname, './node_modules/merge/merge.js')\n    }\n  }\nit should prevent this problem,\nbut would @casesandberg please change merge.js into other name?\n. ",
    "abhishiv": "Awesome thanks!\n. Awesome thanks!\n. ",
    "nheyn": "While switching over to ReactCss for my personal website, I created a basic higher-order component, see https://gist.github.com/nheyn/ac4f4200313fd34d81ee. \nIt is a little bit of a hack, I had to make a \"dummy Component\" to bind to the inline(...) function. It was the only way to get the classes object from the Component (that was passed to the higher-order component) and return it from this.classes(...) in inline(...).\nOther then that, it's similar to Component.js. The main differences are:\n- The css(...) method is added to the props of the passed in Component\n- The css(...) method (now a prop) must be passed the classes object (I added it as the 1st argument)\n- The styles(...) method must always be defined\nHere is one of the Components (with some simplifications) that uses the higher-order component:\n```\nimport React from 'react';\nimport useStyles from '../useStyles';\nconst Section = React.createClass({\n  contextTypes: {\n    screenSize: React.PropTypes.string.isRequired\n  },\n  styles() {\n    const { screenSize } = this.context;\nreturn this.props.css(this.classes(), {\n  smallScreen: screenSize === 'xs' || screenSize === 'sm'\n});\n\n},\n  classes() {\n    return {\n      'default': {\n        section: {\n          position: 'absolute',\n          left: '10%',\n          right: '10%',\n          heynioColors: 'default'\n        }\n      },\n      'smallScreen': {\n        section: {\n          left: 0,\n          right: 0\n        }\n      }\n    };\n  },\n  render() {\n    const style = this.styles();\nreturn (\n  <section style={style.section}>\n    {this.props.children}\n  </section>\n);\n\n}\n});\nexport default useStyles(Section);\n```\n. While switching over to ReactCss for my personal website, I created a basic higher-order component, see https://gist.github.com/nheyn/ac4f4200313fd34d81ee. \nIt is a little bit of a hack, I had to make a \"dummy Component\" to bind to the inline(...) function. It was the only way to get the classes object from the Component (that was passed to the higher-order component) and return it from this.classes(...) in inline(...).\nOther then that, it's similar to Component.js. The main differences are:\n- The css(...) method is added to the props of the passed in Component\n- The css(...) method (now a prop) must be passed the classes object (I added it as the 1st argument)\n- The styles(...) method must always be defined\nHere is one of the Components (with some simplifications) that uses the higher-order component:\n```\nimport React from 'react';\nimport useStyles from '../useStyles';\nconst Section = React.createClass({\n  contextTypes: {\n    screenSize: React.PropTypes.string.isRequired\n  },\n  styles() {\n    const { screenSize } = this.context;\nreturn this.props.css(this.classes(), {\n  smallScreen: screenSize === 'xs' || screenSize === 'sm'\n});\n\n},\n  classes() {\n    return {\n      'default': {\n        section: {\n          position: 'absolute',\n          left: '10%',\n          right: '10%',\n          heynioColors: 'default'\n        }\n      },\n      'smallScreen': {\n        section: {\n          left: 0,\n          right: 0\n        }\n      }\n    };\n  },\n  render() {\n    const style = this.styles();\nreturn (\n  <section style={style.section}>\n    {this.props.children}\n  </section>\n);\n\n}\n});\nexport default useStyles(Section);\n```\n. ",
    "codecov-io": "Current coverage is 80.74%\n\nMerging #34 into master will not affect coverage as of 03a4008\n\ndiff\n@@            master     #34   diff @@\n======================================\n  Files            7       7       \n  Stmts          135     135       \n  Branches        36      36       \n  Methods          0       0       \n======================================\n  Hit            109     109       \n  Partial          5       5       \n  Missed          21      21\n\nReview entire Coverage Diff as of 03a4008\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 80.74%\nMerging #39 into master will not affect coverage as of acb6c8a\n\ndiff\n@@            master     #39   diff @@\n======================================\n  Files            7       7       \n  Stmts          135     135       \n  Branches        36      36       \n  Methods          0       0       \n======================================\n  Hit            109     109       \n  Partial          5       5       \n  Missed          21      21\n\nReview entire Coverage Diff as of acb6c8a\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 80.74%\nMerging #34 into master will not affect coverage as of 03a4008\n\ndiff\n@@            master     #34   diff @@\n======================================\n  Files            7       7       \n  Stmts          135     135       \n  Branches        36      36       \n  Methods          0       0       \n======================================\n  Hit            109     109       \n  Partial          5       5       \n  Missed          21      21\n\nReview entire Coverage Diff as of 03a4008\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 80.74%\nMerging #39 into master will not affect coverage as of acb6c8a\n\ndiff\n@@            master     #39   diff @@\n======================================\n  Files            7       7       \n  Stmts          135     135       \n  Branches        36      36       \n  Methods          0       0       \n======================================\n  Hit            109     109       \n  Partial          5       5       \n  Missed          21      21\n\nReview entire Coverage Diff as of acb6c8a\nPowered by Codecov. Updated on successful CI builds.\n. \n",
    "leonuh": "When will you be able to publish this change?\n. When will you be able to publish this change?\n. ",
    "raulanatol": "Fixed!. Sorry for the multiple commits.\n. Fixed!. Sorry for the multiple commits.\n. ",
    "ninja-software": "I'm guessing the author uses a OSX or Windows, as this is only an issue on Linux (you know, that platform that runs most webservers?)\nRenaming to hover.js fixes this problem.\n. I'm guessing the author uses a OSX or Windows, as this is only an issue on Linux (you know, that platform that runs most webservers?)\nRenaming to hover.js fixes this problem.\n. ",
    "kuailingmin": "const styles = ReactCss({\n            'default':{\n                head : {\n                    position:'absolute',\n                    top:'0px',\n                    left:'0px'\n                }\n            }\n        });\n\n\nbut:I want to add more style CSS attributes,How to write?\n. <div style={styles. head}></div>\n. const styles = ReactCss({\n            'default':{\n                head : {\n                    position:'absolute',\n                    top:'0px',\n                    left:'0px'\n                }\n            }\n        });\n\n\nbut:I want to add more style CSS attributes,How to write?\n. <div style={styles. head}></div>\n. ",
    "faroe228": "It's not working for me and I'm using React.version 15.1.0\nI noticed it's using a boolean hover property.  My first workaround was to just dynamically assign the default css based on the hover property value ( looks like hover key is ignored ).\nUpdate: did some searching found out you have to add something like this to your reactcss \n, {\n          'hover': (props.hover === true)\n   }\n. It's not working for me and I'm using React.version 15.1.0\nI noticed it's using a boolean hover property.  My first workaround was to just dynamically assign the default css based on the hover property value ( looks like hover key is ignored ).\nUpdate: did some searching found out you have to add something like this to your reactcss \n, {\n          'hover': (props.hover === true)\n   }\n. ",
    "rkumar-cognam": "not working for me too.  Where exactly you put\n{\n'hover': (props.hover === true)\n}\ncan you please paste your code \n. not working for me too.  Where exactly you put\n{\n'hover': (props.hover === true)\n}\ncan you please paste your code \n. ",
    "vinceroti": "If anyone comes across this and still is having trouble with hover, you have to add this.props to the end of your styles. I'll post my code as an example.\n```\nimport reactCSS, { hover } from 'reactcss';\nimport React, { Component } from 'react';\nimport { Glyphicon } from 'react-bootstrap';\nclass Portfolio extends Component {\nrender() {\n    const styles = reactCSS({\n      'default': {\n        portfolio: {\n          backgroundColor: 'gray',\n          color: 'white',\n          margin: 'auto',\n          textAlign: 'center',\n          paddingTop: '50px'\n        },\n    line: {\n      padding: '0',\n      border: 'none',\n      borderTop: 'solid 5px',\n      textAlign: 'center',\n      width: '100px',\n      maxWidth: '20%',\n      margin: 'auto',\n      backgroundColor: '#18BC9C',\n      color: 'white',\n      display: 'inline-block',\n      borderRadius: '250px',\n\n    },\n\n    star: {\n      display: 'inline-block',\n      position: 'relative',\n      top: '11px',\n      fontSize: '2em',\n      padding: '0 0.25em',\n      borderColor: 'white',\n    },\n\n    title: {\n      fontWeight: 'bold',\n      fontSize: '40px',\n      letterSpacing: '2.5px'\n    },\n\n    ul: {\n      paddingLeft: '0',\n      listStyleType: 'none'\n    },\n    image: {\n      display: 'inline-block',\n      margin: 'auto',\n      marginTop: '20px',\n      width: '250px',\n      maxWidth: '90%',\n    },\n  },\n  'hover': {\n    image: {\n      backgroundColor: \"red\"\n    }\n  }\n}, this.props)\n\nreturn (\n  <div style={styles.portfolio} id=\"portfolio\">\n    <h2 style={styles.title}> PORTFOLIO </h2>\n    <hr style={styles.line}/>\n      <Glyphicon glyph=\"star\" style={styles.star} />\n    <hr style={styles.line} />\n    <div>\n      <ul style={styles.ul}>\n\n          <li style={styles.image}><img style={styles.image} src=\"wiki.png\" alt=\"Wikipedia Logo\" /></li>\n\n          <li style={styles.image}><img style={styles.image}  src=\"google.png\" alt=\"Google Logo\" /></li>\n        </ul>\n    </div>\n  </div>\n);\n\n}\n}\nexport default hover(Portfolio)\n```. If anyone comes across this and still is having trouble with hover, you have to add this.props to the end of your styles. I'll post my code as an example.\n```\nimport reactCSS, { hover } from 'reactcss';\nimport React, { Component } from 'react';\nimport { Glyphicon } from 'react-bootstrap';\nclass Portfolio extends Component {\nrender() {\n    const styles = reactCSS({\n      'default': {\n        portfolio: {\n          backgroundColor: 'gray',\n          color: 'white',\n          margin: 'auto',\n          textAlign: 'center',\n          paddingTop: '50px'\n        },\n    line: {\n      padding: '0',\n      border: 'none',\n      borderTop: 'solid 5px',\n      textAlign: 'center',\n      width: '100px',\n      maxWidth: '20%',\n      margin: 'auto',\n      backgroundColor: '#18BC9C',\n      color: 'white',\n      display: 'inline-block',\n      borderRadius: '250px',\n\n    },\n\n    star: {\n      display: 'inline-block',\n      position: 'relative',\n      top: '11px',\n      fontSize: '2em',\n      padding: '0 0.25em',\n      borderColor: 'white',\n    },\n\n    title: {\n      fontWeight: 'bold',\n      fontSize: '40px',\n      letterSpacing: '2.5px'\n    },\n\n    ul: {\n      paddingLeft: '0',\n      listStyleType: 'none'\n    },\n    image: {\n      display: 'inline-block',\n      margin: 'auto',\n      marginTop: '20px',\n      width: '250px',\n      maxWidth: '90%',\n    },\n  },\n  'hover': {\n    image: {\n      backgroundColor: \"red\"\n    }\n  }\n}, this.props)\n\nreturn (\n  <div style={styles.portfolio} id=\"portfolio\">\n    <h2 style={styles.title}> PORTFOLIO </h2>\n    <hr style={styles.line}/>\n      <Glyphicon glyph=\"star\" style={styles.star} />\n    <hr style={styles.line} />\n    <div>\n      <ul style={styles.ul}>\n\n          <li style={styles.image}><img style={styles.image} src=\"wiki.png\" alt=\"Wikipedia Logo\" /></li>\n\n          <li style={styles.image}><img style={styles.image}  src=\"google.png\" alt=\"Google Logo\" /></li>\n        </ul>\n    </div>\n  </div>\n);\n\n}\n}\nexport default hover(Portfolio)\n```. ",
    "jacobrask": "You want them all as a single commit?\n. You want them all as a single commit?\n. ",
    "paulocmoreno": "Hi guys, any progress with this issue? If needed I can help. Include the entire lodash is a very big con for reactcss and react-color.\n. Hi guys, any progress with this issue? If needed I can help. Include the entire lodash is a very big con for reactcss and react-color.\n. ",
    "rmarscher": "Great! There was no lib script in the package.json, but I assume you meant the gulp js:dist task. I ran that, added it as the lib script in package.json and rebased the branch. Let me know if you need anything else to get this merged.\n. Great! There was no lib script in the package.json, but I assume you meant the gulp js:dist task. I ran that, added it as the lib script in package.json and rebased the branch. Let me know if you need anything else to get this merged.\n. ",
    "coopermaruyama": "Ah, I just made a PR/test to fix this and saw you did it already. Thanks for doing this!\n. Ah, I just made a PR/test to fix this and saw you did it already. Thanks for doing this!\n. ",
    "khakulov": "@casesandberg \nPlease remove it from peerDependencies and add to devDependencies\n. You did something wrong:\n\nThe warning still there\n. @casesandberg \nPlease remove it from peerDependencies and add to devDependencies\n. You did something wrong:\n\nThe warning still there\n. ",
    "jharris4": "@khakulov It already is in devDependencies, so it really just needs to be removed from the peerDependencies\n. @casesandberg I'd be happy to make a PR with the change to package.json, but I wasn't sure if there was some reason I'm not aware of that made you put it in peerDependencies... Can you clarify? Thx\n. Strange, the package.json on npm for 1.0.8 still has the peerDependency, but the package.json here on github does not. Not sure what happened...\n. @casesandberg any idea why the change to package.json didn't make it to npm ?\n. @khakulov It already is in devDependencies, so it really just needs to be removed from the peerDependencies\n. @casesandberg I'd be happy to make a PR with the change to package.json, but I wasn't sure if there was some reason I'm not aware of that made you put it in peerDependencies... Can you clarify? Thx\n. Strange, the package.json on npm for 1.0.8 still has the peerDependency, but the package.json here on github does not. Not sure what happened...\n. @casesandberg any idea why the change to package.json didn't make it to npm ?\n. ",
    "martynchamberlin": "Ah, I see, right. Thanks for clarifying! \n. Ah, I see, right. Thanks for clarifying! \n. ",
    "j-f1": "@casesandberg I feel it\u2019s easier and clearer to do\njs\nimport reactCSS from 'reactcss'\n// ...\nComponent = reactCSS.hover(Component)\nthan\njs\nimport reactCSS, { hover } from 'reactcss'\n// ...\nComponent = hover(Component)\n// Where did `hover` come from? Did I override it by accident somewhere?. Then how would I use the default export? (reactCSS({ ... })). @casesandberg Any updates?. @casesandberg I feel it\u2019s easier and clearer to do\njs\nimport reactCSS from 'reactcss'\n// ...\nComponent = reactCSS.hover(Component)\nthan\njs\nimport reactCSS, { hover } from 'reactcss'\n// ...\nComponent = hover(Component)\n// Where did `hover` come from? Did I override it by accident somewhere?. Then how would I use the default export? (reactCSS({ ... })). @casesandberg Any updates?. ",
    "quagliero": "@casesandberg docs updated and pushed. Build is failing but pretty sure it's not me \ud83d\ude04 . @casesandberg docs updated and pushed. Build is failing but pretty sure it's not me \ud83d\ude04 . ",
    "andrewgleave": "Found it!\nIf you're using lodash-webpack-plugin you need to ensure you enable the collections feature.\nIf you don't, map will be specialised for arrays only.\n. Found it!\nIf you're using lodash-webpack-plugin you need to ensure you enable the collections feature.\nIf you don't, map will be specialised for arrays only.\n. ",
    "gufranmirza": "\"plugins\": [ \"babel-plugin-lodash\"]\nif your main webpack config is missing above plugin it wont work, after adding it works fine.. \"plugins\": [ \"babel-plugin-lodash\"]\nif your main webpack config is missing above plugin it wont work, after adding it works fine.. ",
    "PDS42": "I'm still experiencing this issue, with the following logs:\nERROR in ./node_modules/reactcss/lib/index.js\ntoolbox             | Module build failed: Error: Plugin 0 specified in \"/app/node_modules/reactcss/.babelrc\" provided an invalid property of \"__wrapped__\"\ntoolbox             |     at Plugin.init (/app/node_modules/babel-core/lib/transformation/plugin.js:131:13)\ntoolbox             |     at Function.normalisePlugin (/app/node_modules/babel-core/lib/transformation/file/options/option-manager.js:152:12)\ntoolbox             |     at /app/node_modules/babel-core/lib/transformation/file/options/option-manager.js:184:30\ntoolbox             |     at Array.map (native)\ntoolbox             |     at Function.normalisePlugins (/app/node_modules/babel-core/lib/transformation/file/options/option-manager.js:158:20)\ntoolbox             |     at OptionManager.mergeOptions (/app/node_modules/babel-core/lib/transformation/file/options/option-manager.js:234:36)\ntoolbox             |     at OptionManager.init (/app/node_modules/babel-core/lib/transformation/file/options/option-manager.js:368:12)\ntoolbox             |     at File.initOptions (/app/node_modules/babel-core/lib/transformation/file/index.js:212:65)\ntoolbox             |     at new File (/app/node_modules/babel-core/lib/transformation/file/index.js:135:24)\ntoolbox             |     at Pipeline.transform (/app/node_modules/babel-core/lib/transformation/pipeline.js:46:16)\nI've tried the solutions I found here and there, none worked -including adding babel-plugin-lodash. I would appreciate any help on this issue! . I'm still experiencing this issue, with the following logs:\nERROR in ./node_modules/reactcss/lib/index.js\ntoolbox             | Module build failed: Error: Plugin 0 specified in \"/app/node_modules/reactcss/.babelrc\" provided an invalid property of \"__wrapped__\"\ntoolbox             |     at Plugin.init (/app/node_modules/babel-core/lib/transformation/plugin.js:131:13)\ntoolbox             |     at Function.normalisePlugin (/app/node_modules/babel-core/lib/transformation/file/options/option-manager.js:152:12)\ntoolbox             |     at /app/node_modules/babel-core/lib/transformation/file/options/option-manager.js:184:30\ntoolbox             |     at Array.map (native)\ntoolbox             |     at Function.normalisePlugins (/app/node_modules/babel-core/lib/transformation/file/options/option-manager.js:158:20)\ntoolbox             |     at OptionManager.mergeOptions (/app/node_modules/babel-core/lib/transformation/file/options/option-manager.js:234:36)\ntoolbox             |     at OptionManager.init (/app/node_modules/babel-core/lib/transformation/file/options/option-manager.js:368:12)\ntoolbox             |     at File.initOptions (/app/node_modules/babel-core/lib/transformation/file/index.js:212:65)\ntoolbox             |     at new File (/app/node_modules/babel-core/lib/transformation/file/index.js:135:24)\ntoolbox             |     at Pipeline.transform (/app/node_modules/babel-core/lib/transformation/pipeline.js:46:16)\nI've tried the solutions I found here and there, none worked -including adding babel-plugin-lodash. I would appreciate any help on this issue! . "
}