{
    "YorickPeterse": "Looking good, I'll merge this after I'm done rewriting the AST (and everything related) in the \"refactor-ast\" branch.\n. Just a small heads up: I haven't forgotten about this pull request. I'm\ncurrently in the middle of re-factoring most of the codebase and this has taken\nup most of my time so far. Hopefully I'll be able to merge this pull request in\nthe coming month (giving a clear estimate is a bit difficult at this time).\n. In Git commit 79a06b72ad90c49dfd4329ea14b8e45200395757 I started working on a new Slop based CLI. This means that I won't be able to merge this pull request as is. Having said that, your suggestions will be taken into account and I'll make sure to properly mention you. I'll leave this pull request (and the other issue) open until they have been addressed in the new CLI.\n. heh, it appears I ninja fixed this before you got your hands on it. This was addressed in the following commit: https://github.com/YorickPeterse/ruby-lint/commit/b4a3c0ce6b06c9eadc493eed5ac7687ac7e16612\nThanks for the contribution anyway!\n. Ah, seems I forgot to update the manifest. I'll see if I can get rid of it all together without having to rely on git ls-files.\n. Probably the result of a find-replace I ran a while ago, good catch!\n. Sadly I'll have to reject this PR for the following two reasons:\n1. The link syntax was actually correct, it's used this way to ensure that YARD documentation contains the proper page references as the doc directory doesn't exist in the final HTML output.\n2. The triple backtick syntax messes up Kramdown for some reason, the use of the triple tidle (~~~) also seems to mess things up, as such I went with simply indenting the code blocks.\nRegardless, thanks for your time and interest! :)\n. They are \"broken\" as Github doesn't support YARD style links. The only alternative to support both is to have different  READMEs but keeping them in sync would be a pain.\n. Then the entire README would have to be written in Rdoc, which would be inconsistent with the other documentation files (also in Markdown). I don't find it worth the effort to convert the README to Rdoc just so that the links work on Github,\n. The changes for the constant loader should be fine, the ones for the spec fixtures aren't really needed since they're imported files.\n. If you could rebase those two commits into a single one I'd be happy to merge it. Thanks!\n. From the top of my head you can squash the latest two commits as following:\ngit rebase -i HEAD~2\nThis will pop open an editor with something like this:\npick 123sha1 Commit message.\npick 456sha1 Another commit.\nWhat you can do is change the first pick to squash (this will squash it with the previous commit). Once done you can do a force push. More info can be found here: http://ariejan.net/2011/07/05/git-squash-your-latests-commits-into-one/\nAlternatively if it's too much trouble I can cherry-pick the specific commit.\n. Thanks!\n. It appears we were both working on the same change. I added this behaviour in a07ee7d1c9da843746797c4c5a7fac7d2d1acb5b which is not that different from your changes. Thanks for looking into this though!\n. One of the things I've been meaning to do is set up a much bigger comparison document at some point in time. This document wouldn't just compare ruby-lint and RuboCop but also tools from other languages such as jshint and plain old ruby -W. The main idea of that is to give people a better understanding of what to expect. I'll see if I can take care of this in the (very) near future.\nOther than that, thanks for the name correction!\n. While I certainly appreciate the interest, I'm not sure if dumping this in the README is the way to go. Second, my concern with claiming compatibility with any platform other than Linux is that it means I actually have to actively support those platforms [1]. New features, changes to existing code, all of that I'd have to verify on every platform. Don't get me wrong, I really do want people to be able to use ruby-lint on as many platforms as possible. However, for the time being I don't want to make any claims unless I'm certain things work.\nThinking of it, a Wiki page would probably be a better idea. It would allow Github users to easily add notes about whatever platform they tried ruby-lint on.\n[1]: I don't like claiming ruby-lint works on X when in reality it might not. I want to be certain about it before making such claims.\n. I've set up the following Wiki page for this: https://github.com/YorickPeterse/ruby-lint/wiki/Platforms. If you could add these notes about Windows to that page that would be much appreciated.\n. The build failure leads me to believe that in some cases source.name returns nil, opposed to an empty String. This in turn causes the code here https://github.com/allquixotic/ruby-lint/blob/288249ca757867d89f34add49cafa5f6ecd80a0d/lib/ruby-lint/inspector.rb#L83 to crap out. \nThinking of it probably the best way would be to add an early return on line 49 (https://github.com/allquixotic/ruby-lint/blob/288249ca757867d89f34add49cafa5f6ecd80a0d/lib/ruby-lint/inspector.rb#L49). All the following code is useless if we don't have a constant name to store the data under. If you want to dig into this feel free to go nuts, otherwise I'll take a look at this myself.\nOne final note, could you reformat your Git commit message so that the first line has at most 50 characters? This makes it easier for me to see what a commit is about, as well as making it easier to compile changelogs between releases. An example commit message can be seen in ccdf3fc918b06b47eac3fa07ee305a551ccf22d9. You can edit a commit by either using git commit --amend (assuming this is your latest commit) or by using git rebase -i HEAD~N where N is the amount of commits you want to edit. Once done, do a git push -f to your branch. A quick terminal screencast on this can be seen here: http://showterm.io/7464f5df1729d9b2335c7.\n. I've fixed the test in 882ae752f912fa8138db32da77efc8d06a072511 which should remove the need for any other change other than the use of source.name. Could you rebase off master (git rebase master) and repush? The tests should pass after that.\n. No problem, thanks! :+1:\n. While appreciated I have little interest in adding more badges to the README. The existing badges aren't very useful either and I'll probably be removing them in the near future. The services behind them can definitely be useful, I just don't really see the purpose (any more) of the badges other than being a gimmick.\n. The build failure looks unrelated so this is good to go. On a sidenote, tagging commits with stuff like \"TASK\", \"TODO\", etc isn't really needed.\n. I can't really grok the output of the benchmark sadly. Could you do me a favour and write one using https://github.com/evanphx/benchmark-ips? This Gem takes care of warming up things (which can make a big difference when a JIT is involved) which typically leads to more reliable results. Also, please share the benchmark code so I can double check things.\nFunctionality wise this looks fine to me.\n. So I did some digging again to see why this was using Array#| in the first place. Basically this is to ensure that self is not added multiple times, this was added in 08c80f60a193014e430ee1b64e88c1e2ea9ca82f. By using Array#+ this check is lost, meaning it could in theory be possible for self to end up multiple times in the array.\nTo check the performance without involving the entire CLI I wrote the following benchmark:\n``` ruby\nrequire 'benchmark/ips'\nrequire_relative 'lib/ruby-lint'\ndefinitions = RubyLint::Definition::RubyObject.new\nRubyLint.registry.load('Encoding')\nRubyLint.registry.apply('Encoding', definitions)\nencoding = definitions.lookup(:const, 'Encoding')\nBenchmark.ips do |bench|\n  bench.report 'RubyObject#lookup' do\n    encoding.lookup(:const, 'Kernel')\n  end\nend\n```\nThis requires some insight in how ruby-lint works, so don't worry if this doesn't make a lot of sense. Basically it loads a definition for Encoding and then looks up something defined somewhere higher in the ancestor chain (Kernel in this case), triggering the code in question.\nOn my laptop the output without any changes is as following:\n```\nCalculating -------------------------------------\n   RubyObject#lookup    21.711k i/100ms\n\nRubyObject#lookup    278.391k (\u00b1 1.1%) i/s -      1.411M\n```\nBy switching to Array#+ the output changes to the following:\n```\nCalculating -------------------------------------\n   RubyObject#lookup    27.376k i/100ms\n\nRubyObject#lookup    378.418k (\u00b1 1.2%) i/s -      1.916M\n```\nTo ensure the self check is still in place I used the following patch instead:\n``` diff\ndiff --git a/lib/ruby-lint/definition/ruby_object.rb b/lib/ruby-lint/definition/ruby_object.rb\nindex 1193674..c4a045e 100644\n--- a/lib/ruby-lint/definition/ruby_object.rb\n+++ b/lib/ruby-lint/definition/ruby_object.rb\n@@ -697,7 +697,9 @@ module RubyLint\n         if parent.type == type and parent.name == name\n           parent_definition = parent\n         else\n-          parent_definition = parent.lookup(type, name, true, exclude | [self])\n+          exclude = exclude + [self] unless exclude.include?(self)\n+\n+          parent_definition = parent.lookup(type, name, true, exclude)\n         end\n     return parent_definition\n\n```\nIf we then re-run the benchmark the output is as following:\n```\nCalculating -------------------------------------\n   RubyObject#lookup    25.734k i/100ms\n\nRubyObject#lookup    338.675k (\u00b1 2.8%) i/s -      1.698M\n```\nTo summarize:\nArray#|            278.391k (\u00b1 1.1%) i/s -      1.411M\nArray#+            378.418k (\u00b1 1.2%) i/s -      1.916M\nArray#+ with check 338.675k (\u00b1 2.8%) i/s -      1.698M\nPersonally I'm satisfied with the combination of Array#+ and an\nArray#include? check as it retains the guard while still speeding up things a\nbit. If you'd like you can apply the patch above to your pull-request, otherwise\nI'll commit it myself.\nOut of curiosity, did you find this specific bit of code by using some sort of\nprofiling tool, or did you end up at it based on a gut feeling of sorts?\n. These aren't regular Markdown links for Github, they're YARD links that are rendered on the website: http://code.yorickpeterse.com/ruby-lint/latest/#documentation. Using Markdown links like these in turn won't work on the website.\nHaving said that the contributing link is incorrect as I renamed the file to use all capitals without actually updating the link itself. I'll fix the contributing link and re-generate the documentation. Thanks for looking into this though.\n. I'm not really sure why it would have to use US_ASCII for Ruby 1.9, UTF8 should work just fine. Either way, we'll go with this and see what happens. Thanks!\n. This fix is available in ruby-lint 2.0.5, which has just been pushed to RubyGems.\n. Test failures are unrelated (fixed in master). Rebased into ff40b7d3edb4f7190a12a4d156322a0ba1c98790, thanks!\n. This has been released as ruby-lint 2.1.0.\n. I'm not 100% I follow what's going on. Also please add some tests for this behaviour (which should also clear things up a bit).\n. @madgen No, I think I get it. I'd argue this is the parser Gem being wack but I doubt getting anything changed there is going to work. I'll take a look at this and the failing specs in the coming days.\n. The Markdown links are meant to stay this way so they work correctly in the YARD documentation, see https://github.com/YorickPeterse/ruby-lint/pull/76 for the past discussion on this.\n. @jvalentini No problem!\n. Thanks!\n. Thanks!\n. This has been released in ruby-lint 2.2.0\n. Thanks!\n. Thanks!\n. > Another way to improve this would be qualifying the method with the class/module it is defined in, but I didn't see an obvious way to determine that.\nIn theory this should be possible using the scope variable, but it may be a tad tricky to get the fully qualified name.\n\nYet another way to address this would be omitting the names from the report but quoting the source, clang style:\n\nA separate reporter class could probably do this by reading the file (present in an entry), getting the line (also present) and then displaying it below the message.\n. Thanks!\n. Thanks!\n. Thanks!\n. @mvidner I'm not sure if this is something that should be in ruby-lint. Generally it assumes that project structures follow the usual Ruby conventions. To be honest I'd rather have people stick with those conventions instead of adding a mapping system to ruby-lint.\n. @mvidner @jreidinger: It's not so much about how many projects use a non standard layout, it's more about me just not wanting to add code that deviates from the usual convention.\n\nI think it will be better if there is possibility to have option that use require with LOAD_PATH, even if it will be much slower, it is still just pc time and not human one.\n\nThere have been multiple discussions on this in the past. ruby-lint will not follow require calls or use LOAD_PATH as both are next to impossible to handle without actually running Ruby code. For example, ruby-lint can not understand what the following is supposed to do:\nruby\nrequire foobar\nor:\nruby\nrequire File.expand_path('...', __FILE__)\nTo support this ruby-lint needs to be a fully fledged interpreter.\n. Previous discussions on require:\n- https://github.com/YorickPeterse/ruby-lint/issues/131#issuecomment-51507905\n- http://code.yorickpeterse.com/ruby-lint/latest/file.definitions.html#degraded-performance\n- https://github.com/YorickPeterse/ruby-lint/issues/142#issuecomment-77154697\n- https://github.com/YorickPeterse/ruby-lint/issues/129#issuecomment-51491887\nConstant mapping has also been suggested in the past:\nhttps://github.com/YorickPeterse/ruby-lint/issues/142#issuecomment-77744537\nWhile I appreciate the interest/work I'm going to close this PR as I don't feel comfortable pulling in a system where users have to keep a dictionary around of all their constant and alternative paths.\n. Closing in favour of https://github.com/YorickPeterse/ruby-lint/pull/185\n. @mvidner Please submit that to the same PR and rebase things so it doesn't end up with commits like \"Added X\" and \"Fixed that thing I did in X\".\n. Closing in favour of https://github.com/YorickPeterse/ruby-lint/pull/186\n. Thanks!\n. Thanks!\n. #184 is merged, could you rebase this PR based on the current master branch?\n. @mvidner For future PRs please submit yardoc changes as a separate PR as this makes changes easier to review.\n. Other than the COC note this looks fine, thanks!\n. Travis is being an unstable **** but some builds pass so it looks like a Travis specific problem. Thanks!\n. This isn't the default output format, nor is there any built in presenter that produces this output.. Please use the Hash rocket syntax, this keeps it consistent with other code.\n. These empty comment lines (same as the above) can be removed as well.\n. The level expectations should remain intact.\n. Doesn't 2.2 automatically pick the latest patch level version?\n. Same here, I believe jruby is supposed to automatically use the latest 9k version. I'd rather not update the Travis config file every time a new Ruby version comes out.\n. For these tests we can just use double quotes, this removes the need for escaping the single quotes.\n. Why is there a nil check here? I'd rather have @allow_keyword always set to a Fixnum so this can just be and @allow_keyword == 0. Also please keep the and instead of &&.\n. Please keep the order as it was and add the new variables at the end. Right now I can't tell from this diff what actually changed since various values have been moved around.\n. This should not be changed. RSpec takes care of adding spec to the load path so require_relative is not needed.\n. Oh wait, I now see you removed the numbered global variables except for $0 at the end.\n. Having said that, I'd rather not have issue numbers in comments as it doesn't really add that much value.\n. Please use:\n\nIf the number is not found ...\n. @mvidner Please submit that to the same PR (or a new PR containing all the changes), I don't want to pick commits from random places.\n. Why exactly is this using ||=?\n. If the argument isn't needed you can just use def after_module(*).\n. Since this method tries to load constants while dealing with nesting I'd rather have it named something like load_nested_constant. \n. Please use parenthesis when passing arguments (to join in this case).\n. Please add an empty line after an end\n. Use \"#{ns}::#{constant}\" instead.\n. No, I don't want tests doing things such as setting/getting instance variables directly. If the purpose is to stub out whatever registry is used you should use RSpec stubs for this.\n. Please add an empty line after this end\n. @mvidner If this is only needed for the tests then you can just stub things out using something like loader.should_receive(:registry).and_return(...)\n. These changes don't seem to be related to this PR. If this method is not used anymore a separate PR should just remove it.\n. What's the reason for this comment? Right now it doesn't really convey any useful information since it's a question.\n. This isn't needed. To be honest I'm kinda annoyed by YARD's hyperlinks (since they're non-standard) so I'd rather just keep the COC Markdown as-is.\n. \n",
    "andywenk": "don't you worry ;-)\n. everything is fine with me ;-) don't worry !\n. ",
    "phlipper": "Hi @YorickPeterse,\nThanks for the explanation. The syntax highlighting was a minor tweak, but the documentation links appear \"broken\" and like invalid markdown on GitHub:\n\nI'll have to pay more attention to alternate documentation locations in the future :)\n. If you're using YARD as your primary documentation, would it make more sense to have a README.rdoc vs. README.md? The issue isn't that GitHub is broken, it's that the {file:...} syntax isn't valid markdown, but it is valid RDOC.\n. ",
    "oliverklee": "I've updated the pull request accordingly.\n. I'm currently struggling with rebasing both commits into one \u2026\n. ",
    "bbatsov": "\nOne of the things I've been meaning to do is set up a much bigger comparison document at some point in time. This document wouldn't just compare ruby-lint and RuboCop but also tools from other languages such as jshint and plain old ruby -W. The main idea of that is to give people a better understanding of what to expect. I'll see if I can take care of this in the (very) near future.\n\nSounds great. Let me know if you need any information regarding RuboCop for this document.\n. ",
    "allquixotic": "Edited the wiki.\nClosing this pull request.\n. Hmm. The build failed. I looked at the CI report but I wasn't able to figure out, clearly, why it is failing. I may have to run the tests locally and see if I can repro. Obviously I don't expect you to pull this while it's breaking the CI build.\n. Can't figure out how to rewrite history. I'll just make a new branch and re-make the change.\n. Sorry for all the musical chairs / musical branches. \n. ",
    "seancaffery": "That's fair enough. I did run them the wrong way around.\nReadygo accounts for things like GC and jitter. If you're interested, you can take a look at the timing methodology.\nI did the benchmark with benchmark-ips. Here are the results.\nmaster\n```\nCalculating -------------------------------------\n             or vs +     1.000  i/100ms\n\n         or vs +      0.077  (\u00b1 0.0%) i/s -      1.000  in  12.932026s\n\n```\nmy branch\n```\nCalculating -------------------------------------\n             or vs +     1.000  i/100ms\n\n         or vs +      0.104  (\u00b1 0.0%) i/s -      1.000  in   9.576817s\n\n```\nbench.rb\n``` ruby\nrequire_relative 'lib/ruby-lint'\nrequire 'benchmark/ips'\nBenchmark.ips do |x|\n  x.report('or vs +') do\n    ruby bin/ruby-lint model.rb\n  end\nend\n```\nThis isn't ideal, but there is something in ruby-lint that messes with the output of benchmark-ips and I don't know enough yet to understand what it is.\n. I wasn't sure if it mattered about the duplicates, but it seems you put it there for a reason. I updated my branch to include your patch.\nThanks for the explanation on how to profile this. It will make future testing a lot easier and faster.\nI just used ruby-prof. I thought it was a bit strange that Array#| kept appearing so I went and looked at what it was doing and replaced it with something similar.\nThe drive to start looking at this was having synstastic use ruby-lint as a checker, but it was taking too long to open files in my project. I think there are other wins to be had, but I need to spend some more time understanding the code before I have a go at those. The code documentation definitely makes this a lot easier :)\n. ",
    "jochenschneider": "Ah ok, never mind.\n. ",
    "cabo": "(Actually, builds for all Ruby versions succeeded; there just seems to be a rvm problem on Macs that breaks before even getting to ruby-lint.)\n. BTW, if you want to faithfully mirror the way ::Parser::CurrentRuby uses the currently running version of Ruby to select the language dialect, you need\nruby\nFile.read(..., :encoding => RUBY_VERSION[0] == \"1\" ? Encoding::US_ASCII : Encoding::UTF_8)\nbut then I don't know how much of a feature that selection actually is for ruby-lint.\n. ",
    "madgen": "Okay, here is the problem. Ruby-lint correctly infers #[]= needs two arguments. So when analysis looks on on_send and identifies this method, we need two arguments minimum. The problem is Parser parses weirdly if there is a parallel assignment involved. In that case methods with '=' suffix are collected as left values and the last argument of such methods is collected as an array.\nIf you compare the send down here with the one in my original post, you can see here []= method here takes two arguments as it should while the one above only takes the key. \n``` ruby\nh = Hash.new\nh[1] = 2\n=> s(:send,\ns(:send, nil, :h), :[]=,\ns(:int, 1),\ns(:int, 2))\n```\n. Is there any place in particular you'd like me to explain better?\n. Alright, hope my fix works and let me know if you need anything else.\nAlso I think travis builds are failing due to independent reasons.\nThanks for the project, I find it very useful.\n. ",
    "jvalentini": "Ah, I see. Apologies for missing the previous issue but thank you for the quick response!\n. ",
    "mvidner": "I've removed the empty comments.\n. This should solve issue #165.\n. Reverted the change in the existing test.\n. Another way to improve this would be qualifying the method with the class/module it is defined in, but I didn't see an obvious way to determine that.\nYet another way to address this would be omitting the names from the report but quoting the source, clang style:\nconsole\ntest.rb:14:9:error: wrong number of arguments (expected 0 but got 1)\n    user.greet(:foo)\n         ^^^^^^^^^^\n. @YorickPeterse thanks for merging my earlier PRs quickly! Is there a chance to merge this one too?\nShould I fix something in the implementation? Or do you have in mind a different approach?\n. I see, thanks.\nI am not sure which way to go now, but these should help me decide:\n- sample some popular gems to see how strict they are in following the conventions\n- read the discussions in the past issues of ruby-lint because I've noticed a discussion of requires there\n. We should add a test case for $10.\n. https://github.com/mvidner/ruby-lint/tree/regexp_fix addresses your comments in https://github.com/mvidner/ruby-lint/commit/fc5a56b0ef88f04c49e1d1d6ce74cd1578991169\n. Thank you, updated.\nOn the theme of code style, if you pick a RuboCop config, I will be happy to apply it.\n. Rebased\n. Thank you, I've updated this to separate the yardoc, and add more tests.\n. Thanks, updated.\n. Note that the crash occurs only if the named class is not known. That is,\nrb\nclass A; end\nclass << A; self; end\nwould be processed just fine.\nIn the concrete case of bundler, the problematic source is\nrb\n        source_index_class = (class << Gem::SourceIndex; self; end)\nwhich concerns an older version of rubygems that is not described in ruby-lint/definitions.\n. No, in fact it picks 2.2.0. I haven't checked why.\n. Before, this was picking jruby-1.7.something.\nI admit that the Travis/RVM versioning logic is a mystery to me. In a project of mine where I try to use multiple rubies (ruby-dbus) I care about the result being green for correct code, so I simply marked the less stable rubies that I don't care as much about as allowed failures:\nyml\nmatrix:\n  allow_failures:\n    - rvm: ruby-head\n    - rvm: rbx\n. rb\nvar = some_value\nvar = another_value\ndoes not seem right. Did you mean to delete the 1st assignment? Or make the second a ||=?\n. I have fixed that, renaming the attribute to loop_nesting, in https://github.com/mvidner/ruby-lint/commit/d38dc7d2f1d62085c02a592ae9a5a79a2102ef52 (branch https://github.com/mvidner/ruby-lint/tree/fix_nested_loops).\n. Because most callers does not pass a :registry argument to ConstantLoader.new, in which case this ensures that the attribute is set to the global registry. But in the test we pass a private registry.\nIt works within the scheme Iterator#initialize(options) + Iterator#after_initialize but maybe I am missing a better way to do it.\n. Yes, but I preferred a way which tells the reader what the API is.\n. Ah, you are right!\n. You're right. I was unsure about that. Now I have added more tests.\n. ",
    "jreidinger": "To be honest I also do not like this mapping file, it is too much work and need constant maintenance, so not so useful. I think it will be better if there is possibility to have option that use require with LOAD_PATH, even if it will be much slower, it is still just pc time and not human one.\n. @mvidner any idea where to place such test? I only see test that it is set. will try harder :wink: \n. issue fixed. It can be found in spec/ruby-lint/virtual_machine/blocks_spec.rb or spec/ruby-lint/virtual_machine/assignments/variables_spec.rb but I do not feel it is correct places for such tests.\n. OK, now all issues should be solved and also test case added.\n. you are right, it should be ||=\n. "
}