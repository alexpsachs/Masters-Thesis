{
    "timjansen": "Hi Tomas,\nI had form serialization in there and removed it a while ago. The source\ncode of values() is still in my collection of dead code:\nhttps://github.com/timjansen/minified.js/blob/master/srcContent/js/deadcode.js\nThe reason is mainly that Minified is planned as three modules: Web (the\none that's on the site), Util (collections,dates&formatting, in Github only\nright now and what I am currently working on) and App, a MVC-framework\nbased on the other two modules. I intend to keep all functions to handle\nforms in App, and I am still wondering whether values() is a good match for\nApp or whether it is too low-level for the module.\nTim\nOn Sat, Jul 13, 2013 at 4:22 PM, Tom\u00e1s Pollak notifications@github.comwrote:\n\nGood job mate! Thanks for putting this up and for the goal of staying\nlight (I remember the days when jQuery was around 4kb minified... haha).\nI was just wondering if there's a specific reason why you decided not to\ninclude form serialization in your library. It's something I constantly use\nand probably the only thing that would keep me from switching over to\nminified.js.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/1\n.\n. That's true, and MVC is the main goal of the App module, but it will also\ncome with some higher-end stuff that's useful without MVC, like events\nfor changes in text field (similar to HTML5's input event, just with <IE9\nsupport).\n\nTim\nOn Sat, Jul 13, 2013 at 8:04 PM, Tom\u00e1s Pollak notifications@github.comwrote:\n\nUnderstood. I do think that if you're already including $.request in the\nWeb part, it makes all the sense to include those couple of lines of code\nthat retrieve a form's values in order to send that $.request. It think\nit's a pretty common use.\nFor me, App sounds more like controllers/models/views, not common\nCSS/DOM/AJAX stuff.\nBut that's just me. :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/1#issuecomment-20923828\n.\n. The idea is that Util is a collection of browser-independent tools that can\nalso be used in node.js. Minified's build system uses it already (in Rhino).\n\nThe source in /src/minified-util-src.js is pretty complete. It just lacks\ndocumentation and the build system needs to be able to merge minified-web\nand minified-util into a single file.\nAnyway, I am currently resetting the size goal of Minified to <4Kb for the\nNon-IE-version only, and will probably commit a new version that contains\nvalues() later tonight.\nTim\nOn Mon, Jul 15, 2013 at 5:50 AM, Tom\u00e1s Pollak notifications@github.comwrote:\n\nEvents for changes in text fields sounds more like Util than App to me,\nbut it's your call! :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/1#issuecomment-20950769\n.\n. Thanks, seems like somehow I accidentally removed the first few characters\nwhen I updated the site.. just had to recompile to fix.\n\nOn Sat, Jul 13, 2013 at 5:40 PM, Kory Mathis notifications@github.comwrote:\n\nLooks like some code is missing for the doctype in index.html. I can fork\nand fix later on if needed but it should be a quick fix.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/2\n.\n. Added links to the top of README.md and on the (otherwise empty) Wiki main page.\n\nThanks!\n. Fixed this in quickstart.xml, thank you!\n. The source code for this is /srcContent/docs/quickstart.xml. Fixed it there (and re-compiled). Thanks for finding this!\n. The source code of the .html files is in /srcContent/**.xml, but I'll just fix it. Thanks for pointing that out!\n. I'm sorry, I am not familiar with Brunch at all. First time I hear about it.\n. This will be in the next release, probably as a selector parameter for on().\n. Not a real one, but I think it will take about 7 days. \n. Have you seen the API change in beta 3? The live selector is now at a\ndifferent position. If it still does not work, can you please provide a\ncode sample. Thanks. Tim\nOn Dec 22, 2013 5:16 PM, \"Toobian\" notifications@github.com wrote:\n\nOn beta2 delegate events worked, but when I try to update on the last\nversion (beta4), it does not work. =(\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/9#issuecomment-31090194\n.\n. You need to write this:\n\n$(document).on('click', function() {\n$('#console').add(HTML(\"Click\")); }, 'button');\nSince beta 3 Minified has sub-selectors and live-selectors as separate\narguments. Live selectors are after the handler.\nTim\nOn Dec 22, 2013 6:41 PM, \"Toobian\" notifications@github.com wrote:\n\nYes i see API change. I test a simple example :\n\nButton1\n\n\n\nWith :\nvar MINI = require('minified');\nvar =MINI., $=MINI.$, $$=MINI.$$, EE=MINI.EE, HTML=MINI.HTML;\n$(document).on('button', 'click', function() {\n    $('#console').add(HTML(\"Click\"));\n});\n$('#myDiv').add(HTML(\"Button2\"));\nThe click event works with Button1 but not with Button2.\nTo see that I create fiddle http://jsfiddle.net/Mpj7F/\nI hope it will help you ;)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/9#issuecomment-31091846\n.\n. It's not possible in beta 1, but it will be in beta 2 (should be out in a week or so). Then the constructor of Minified lists will be exposed as MINI.M:\nMINI.M.prototype.plugin = function() {}\n. Just assign it to $. There is only one instance.\nOn Aug 23, 2013 9:11 AM, \"Lukas Oppermann\" notifications@github.com wrote:\nIs there also a way to add a fn without a selector, like the $.loop fn? I\nguess it would need to be added to MINIbut I did not get it to work.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/10#issuecomment-23147177\n.\n. The How-To document will describe all ways to extend Minified in a new Extending Minified section. Will be published when beta 5 is out.\n. Thanks, I am currently traveling but will take care of integrating this in\nbeta 3 when I am back on the weekend.\n\nTim\nOn Sep 24, 2013 2:16 AM, \"Brian Takita\" notifications@github.com wrote:\n\nHere is the config I use to install Beta2.\nhttps://github.com/timjansen/minified.js.git#3ecd8f283a16eb312663b445f4ae453f244547c1\nin bower.json\n{\n  \"name\": \"package-name\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"minifiedjs\": \"https://github.com/timjansen/minified.js.git#3ecd8f283a16eb312663b445f4ae453f244547c1\"\n  },\n  \"devDependencies\": {}}\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/11#issuecomment-24977253\n.\n. I have finally created a bower package. It is called 'minified'. Because I have been too lazy so far to properly tag Minified, I can't provide a real version of beta 2. Going all the way back would not make sense because the directory structure of the library is different now. I have now created a somewhat misleading beta 2 tag containing the current Minified version, but simply because I didn't want to play games with semver to create a 'current' version. What's tagged as beta 2 is actually pretty close to what beta 3 will be. I promise to take care of proper tagging starting with beta 3 :)\n\nAs far as I can see Bower does not really support having two different names for a package, like 'minified' and 'minfied-oldie'. But, if I understand Bower correctly, you can decide which version to use by either including dist/minified.js (the new name of the version without legacy IE support) or dist/minified-legacyie.js. \n. No, the reason why you need beta 2 for the example on Twitter (\nhttp://jsfiddle.net/tjansen/76n9S/) is that beta 2 introduced MINI.M, so\nyou can add offset() yourself.\nMINI.M.prototype.offset = function() {\nvar elem = this[0];\nvar dest = {x: 0, y: 0};\nwhile (elem) {\ndest.x += elem.offsetLeft;\ndest.y += elem.offsetTop;\nelem = elem.offsetParent;\n}\nreturn dest;\n};\ndeadcode.js is just my cut&paste file for code that I removed and may want\nto add in the future. I removed offset() a long time ago.\nI am currently trying to re-add it, but still need to optimize 15 bytes\naway to stay under my self-imposed 4kB target.\nTim\nOn Fri, Aug 2, 2013 at 5:34 PM, Adam Gray notifications@github.com wrote:\n\nIs this in the current release? I see it in deadcode.js.. but I don't see\nit anywhere else. I don't want to add/submit a pull request if it is\nsomething you decided against. Last time we spoke on twitter you indicated\nit was up and available in the next beta release.\nLet me know! Cheers :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/12\n.\n. offset() is in Minified since beta 3.\n. Your example is actually not a pseudo selector but an attribute selector. If you use Minified's Non-IE build (and you can live without IE8 support) it should work, as Minified will use the browser's native engine. \n\nFor builds with legacy IE support, those higher-end CSS features are unfortunately way out of scope, but there's a different way of doing it:\n$('meta').filter(function(node) { return node.getAttribute('name') == 'keywords'; })\n. Loop function looks good to me. Need to reproduce it tonight, but can't see\nright now why it should fail.\nOn Aug 23, 2013 9:05 AM, \"Lukas Oppermann\" notifications@github.com wrote:\n\nI try to build a smooth scrolling animation like this\nif( duration == undefined){ duration = 1000; }\nvar step = offset/duration;\n        var current = step;\n        $.loop(function(t, callback){\n            if (t > duration) { // time is up: call stopFunc()!\n                callback();\n                return;\n            }\n            console.log(step+' '+t+' '+duration);\n            window.scrollBy(0,current);\n            current += step;\n        });\nMy page is 4500px height and if I animate it with 1000px it stops very\nshort. Even if I use Math.ceil to bump the step up to 5px. Am I using the\nloop fn wrong?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/16\n.\n. The reason why it stops early is because you used 'return' as soon as\nyou reached the duration, so don't scroll one last time. I'm sorry,\nloop's API example does it like that, but that's not a good idea if\nyou want to reach a specific position. I will fix the example.\n\nAlso, using a fixed-size 'step' is probably not what you want. You\nshould avoid working with fixed steps in animations because you can't\ncontrol in which frequency $.loop() calls your callback. That's a\nfeature, because browsers can adjust the frequency depending on\nwhether the page in currently displayed (then the frequency will be\nhigh to allow smooth animation) or somewhere in the background (then\nbrowsers will lower the frequency or not call it at all, in order to\nsave CPU time and conserve energy). Even with something more reliable,\nlike setInterval(), fixed steps will not always work correctly.\nI have created a version that works with absolute values:\nhttp://jsfiddle.net/wAGgV/2/\nOne more thing: if you just want to animate a simple value, but\nanimate() is not powerful enough to do it, you can animate a regular\nobject property with animate() and only use loop() to set the value.\nhttp://jsfiddle.net/YDgWg/1/\nBTW, scrolling will be supported natively in beta 3 and you will only\nneed to write\n$(window).animate({$$scrollY: 6000}, 1000);\nTim\nOn Fri, Aug 23, 2013 at 9:13 AM, Lukas Oppermann\nnotifications@github.comwrote:\n\nWell let me add, that if I animate it with a duration of 1000 it stops\nearly, but if I use a duration of 2000 it works. Thanks for checking.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/16#issuecomment-23147263\n.\n. I am not sure whether I understand what you want to do:\n- do you want percentage support in animate(), like being able to do\n  $(selector).animate({$width: '50%'}) ? That would be relatively hard to do,\n  I guess, since it is difficult to determine the current percentage of a\n  style.\n- or do you want to sync something to a certain value, like a smooth\n  toggle? e.g.\n\nvar st = $(selector).smoothToggle({$backgroundColor: '#f00'},\n{$backgroundColor: '#00f'});\nwhere st(0) would set the color to red (#f00), st(100) to blue (#00f) and\nst(50) to purple (#808)? Then you would bind the smooth toggle function st\nto some value.\nThanks,\nTim\nOn Mon, Aug 26, 2013 at 7:55 AM, Lukas Oppermann\nnotifications@github.comwrote:\n\nHey, I do not know if it is possible at all or already implemented and I\ndid not see it.\nBut since by now animations on websites are very important and often used\nI think it would be a very helpfull feature, to be able to set an animation\nto x% so sync it with other behavior.\nFor e.g. animate the bg color with the moving of the mouse from left 0% to\nright 100%.\nAny chance that would be implemented or is that implemented already?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/17\n.\n. No, it does not exist yet, but I really like the idea and have just\nimplemented it as dial() (named analog to toggle()), albeit with input\nvalues between 0 and 1 instead of percentages:\n\nMINI.dial = function (properties1, properties2, linearity) {\n```\nvar self = this;\nvar interpolate = isFunction(linearity) ? linearity : function(startValue,\n```\nendValue, t) {\nreturn startValue + t * (endValue - startValue) * (linearity +\n(1-linearity) * t * (3 - 2*t));\n```\n};\nlinearity = linearity || 0;\nfunction toString(s) { // dependency, cut&pasted from\n```\nminified-web-src.js\n```\n    return s!=_null ? ''+s : '';\n}\nfunction replace(s, regexp, sub) { // dependency, cut&pasted from\n```\nminified-web-src.js\n```\n    return toString(s).replace(regexp, sub||'');\n}\nfunction extractNumber(v) { // dependency, cut&pasted from\n```\nminified-web-src.js\n```\n    return parseFloat(replace(v, /^[^\\d-]+/));\n}\nfunction getColorComponent(colorCode, index) {\nreturn (/^#/.test(colorCode)) ?\n\n    parseInt(colorCode.length > 6 ? colorCode.substr(1+index*2, 2)\n\n```\n: ((colorCode=colorCode.charAt(1+index))+colorCode), 16)\n```\n    :\n    parseInt(replace(colorCode, /[^\\d,]+/g).split(',')[index]);\n\n}\nreturn function(t) {\neachObj(properties1, function(name, start) {\n\n    var newValue = 'rgb(', end=properties2[name];\n\n    if (/^#|rgb\\(/.test(end)) { // color in format '#rgb' or\n\n```\n'#rrggbb' or 'rgb(r,g,b)'?\n```\n            for (var i = 0; i < 3; i++)\n            newValue +=\n\n```\nMath.round(interpolate(getColorComponent(start, i), getColorComponent(end,\ni), t)) + (i < 2 ? ',' : ')');\n```\n            }\n    else\n\n        newValue = replace(end, /-?[\\d.]+/,\n\n```\ntoString(interpolate(extractNumber(start), extractNumber(end), t)));\n```\n        self.set(name, t>=1?end:t<=0?start:newValue);\n});\n\n};\n```\n};\nHope this works, I have unit-tested it inside Minified but needed to\ncut&paste several dependencies into the function. Hope I didnt forget any.\nBut best thing about it is that I have also re-implemented animate() to use\ndial() internally, and even without real size optimization it adds only 4\nbytes to Minified. So I really intend to include this in beta 3.\nThanks,\nTim\nOn Mon, Aug 26, 2013 at 8:38 PM, Lukas Oppermann\nnotifications@github.comwrote:\n\nYeah, I am thinking about the second one I think, does that already exist?\nI did not find it in the docs. So can I set smoothToggle to \"50\" and it\nwould animate to purple.\nlike\n$(selector).smoothToggle({$backgroundColor: '#f00'},{$backgroundColor:\n'#00f'}, 50); ?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/17#issuecomment-23284947\n.\n. There were a number of errors in my last snippet, because I copy&pasted it\nfrom the Minfied source code without adding all the required dependencies.\nSorry about that.\n\nHere's a working example for colors and numeric values:\nhttp://jsfiddle.net/QCqJC/2/\nTim\nOn Tue, Aug 27, 2013 at 10:30 AM, Lukas Oppermann\nnotifications@github.comwrote:\n\nOkay, that is pretty awesome. But it only works with colors, right? So if\nI want to use it for position or height it does not work? Or am I just\ndoing it wrong? The reason for all this is just, that this way one can\nanimate elements in sync with the users scrolling behavior.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/17#issuecomment-23320455\n.\n. Done, will be in beta 3.\n. I am not sure whether I understand your question.\n\nvar test = function() {\n    $('.introduction').toggle('active');\n};\ntest();\nand\nvar test = $('.introduction').toggle('active');\ntest();\nare basically the same thing. toggle() returns a toggle function that\nwill toggle CSS class when invoked. Do you want a function that\ntoggles?\nOr do you just want to toggle a CSS class? Then you can write\n$('.introduction').set('active');\nWithout prefix, set() will toggle CSS classes. To add a CSS class you\nneed to prefix it with a '+'.\nTim\nOn Thu, Aug 29, 2013 at 1:04 PM, Lukas Oppermann\nnotifications@github.comwrote:\n\nHey,\nif I get it correctly at the moment I need to do the following to toggle a\nclass on click.\nvar t = $('.introduction').toggle('active');\n$('#intro_name').on('click', t);\nWould it be possible to change it so I can to this.\nvar test = function(){\n    $('.introduction').toggle('active');\n};\ntest();\nOr is that a lot of lines for to little benefit?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/19\n.\n. I wonder what you are trying to do with this list. Are you creating that\nlist to register event handlers (have you seen EE's onCreate parameter?) or\ndo you want to set properties on the element (EE's second parameter allows\nall set() properties)? What's the use case for this?\n\nAuto-invoking element factories is not that easy. Apart from $(function)\nalready registering ready-handlers, not all element factories return a\nsingle function. In fact, clone() will always return a list containing both\nstrings (for text nodes) and functions (for elements). Beta 3 has a new\nfunction HTML() that will also create lists.\nThanks,\nTim\nOn Thu, Aug 29, 2013 at 2:48 PM, Vladimir Penkov\nnotifications@github.comwrote:\n\nthis code:\n$(EE(\"span\")())\nshould be written as\n$(EE(\"span\"))\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/20\n.\n. I see. EE has been designed to allow complex HTML fragments with a single\nexpression. Possibly an easier way to write it is this:\n\nvar ul = $(EE(\"ul\", { ... }));\nfor (var i = 0; i < items.length; i++) {\n   ul.add(EE(\"li\", { ... }, [\n```\n  EE(\"span\", {\"@title\": \"artist\"}),\nEE(\"span\", {\"@title\": \"track\"} )\n```\n], function(li) {\n```\n  if (condition)\n  li.on(\"click\", function() {} );\n\n```\n});\n}\nIf your items contain neither nulls nor embedded lists, you can also do\nthis:\nvar ul = EE(\"ul\", { ... }, $(items).collect(function(item, i) {\n```\nreturn EE(\"li\", { ... }, [\nEE(\"span\", {\"@title\": \"artist\"}),\nEE(\"span\", {\"@title\": \"track\"} )\n```\n], function(li) {\n```\n  if (condition)\n  li.on(\"click\", function() {} );\n\n```\n});\n});\nUsing $() for non-element lists has some problems, it will remove nulls and\nflatten lists, but the Util module in beta 3 that has an alternative _()\nconstructor for lists.\nEven conditional attributes and nodes can be handled by EE's syntax. Nulls\nin the children list will be ignored, and attributes whose values are null\nwill not be set. Your code with optional spans for artists and tracks:\nvar ul = EE(\"ul\", { ... }, $(items).collect(function(item, i) {\n```\nreturn EE(\"li\", { ... }, [\nitem.artists ? EE(\"span\", {\"@title\": \"artist\"}, item.artist) : null,\nitem.track ? EE(\"span\", {\"@title\": \"track\"}, item.track ) : null\n```\n], function(li) {\n```\n  if (condition)\n  li.on(\"click\", function() {} );\n\n```\n});\n});\nWould that be an acceptable solution for your use case?\nTim\nOn Thu, Aug 29, 2013 at 7:50 PM, Vladimir Penkov\nnotifications@github.comwrote:\n\nmy usecase:\nvar ul = $(EE(\"ul\", { ... }));for (var i = 0; i < items.length; i++) {\n   var li = $(EE(\"ul\", { ... }));\n   li.add(EE(\"span\", {\"@title\": \"artist\"} ));\n   li.add(EE(\"span\", {\"@title\": \"track\"} ));\n   if (condition) {\n      li.on(\"click\", function() {} );\n   }\n   ul.add(li);}\nthis is JQuery style of creating compound layouts with conditional logic\nand monad style programming\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/20#issuecomment-23508805\n.\n. The issue with $('') is that it needs to create the element\nimmediately in order to make things like on() work. But then I can not\neasily do something like\n\n$('.manyElements').add(EE('span'));\nwithout getting into cloning hell.\nI am currently considering to change EE() (and clone() and HTML()) to\nalways return a list of functions. Then a new function build() could allow\nthe user to build an instance using the factory and you could write\nEE('span').build().on('click', function() {})..\nAnd maybe it is even possible to auto-build the list functions like on()\nwhich only work on DOM nodes, so you could write\nEE('span').on('click', function() {})..\nTim\nOn Fri, Aug 30, 2013 at 5:46 AM, Vladimir Penkov\nnotifications@github.comwrote:\n\nI think it's too complicated - remembering all this function names ant\nparameters.\nThe cool feature of jquery is\n1. easy list construction with one expression for all cases: $(), which\nresults in\n2. you get feature-rich list and do not think of nulls etc\nthe thing that you omit nulls and flatten lists is correct. The only\nreason I prefer lists is that I just want to iterate through it with syntax\nsugar constructions (.each) without null-checkings.\nBTW var ul = $(EE(\"ul\", { ... })); in your 1st example wont work (see\ntopic title).\nYou have 2 contradictory forms of usage. Using list constructor you have\nto invoke EE:\n$( EE(\"...\")() )\nbut using add you don't have to\n$( \".selector\" ).add( EE(\"...\") )\nThink of replacing the EE(\"span\") operator with $(\"\"), you can track this by '<' as first character.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/20#issuecomment-23539026\n.\n. I have given up my aversion against cloning in add(), and have committed\na version of EE() that returns a list containing the new element instead of\na factory. All the cloning is done in add() (as well as in addBefore(),\nfill(), replace() and the others - they all use add() internally). clone()\nalso does return a clone now, and not a factory anymore. This feature\nincreased Minified's size by 24 bytes, which is quite acceptable, and I may\nbe able to squeeze it down some more.\n\nThis means your example can be written as:\nvar ul = EE(\"ul\", { ... });\nfor (var i = 0; i < items.length; i++) {\n   var li = EE(\"ul\", { ... });\n   li.add(EE(\"span\", {\"@title\": \"artist\"} ));\n   li.add(EE(\"span\", {\"@title\": \"track\"} ));\n   if (condition) {\n      li.on(\"click\", function() {} );\n   }\n   ul.add(li);\n}\nThe change will be in beta 3 (which I think will be out between\nmid-September and early October - the code is pretty far, but I need to\nwork on docs and the site before it is ready to be released).\nTim\nOn Fri, Aug 30, 2013 at 9:01 AM, Tim Jansen tim@tjansen.de wrote:\n\nThe issue with $('') is that it needs to create the element\nimmediately in order to make things like on() work. But then I can not\neasily do something like\n$('.manyElements').add(EE('span'));\nwithout getting into cloning hell.\nI am currently considering to change EE() (and clone() and HTML()) to\nalways return a list of functions. Then a new function build() could allow\nthe user to build an instance using the factory and you could write\nEE('span').build().on('click', function() {})..\nAnd maybe it is even possible to auto-build the list functions like on()\nwhich only work on DOM nodes, so you could write\nEE('span').on('click', function() {})..\nTim\nOn Fri, Aug 30, 2013 at 5:46 AM, Vladimir Penkov <notifications@github.com\n\nwrote:\nI think it's too complicated - remembering all this function names ant\nparameters.\nThe cool feature of jquery is\n1. easy list construction with one expression for all cases: $(), which\nresults in\n2. you get feature-rich list and do not think of nulls etc\nthe thing that you omit nulls and flatten lists is correct. The only\nreason I prefer lists is that I just want to iterate through it with syntax\nsugar constructions (.each) without null-checkings.\nBTW var ul = $(EE(\"ul\", { ... })); in your 1st example wont work (see\ntopic title).\nYou have 2 contradictory forms of usage. Using list constructor you have\nto invoke EE:\n$( EE(\"...\")() )\nbut using add you don't have to\n$( \".selector\" ).add( EE(\"...\") )\nThink of replacing the EE(\"span\") operator with $(\"\"), you can track this by '<' as first character.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/20#issuecomment-23539026\n.\n. You're right, it should always be the element you registered on.\n\n\nTim\n On Sep 2, 2013 8:16 AM, \"Lukas Oppermann\" notifications@github.com wrote:\n\nI personally feel, when I use $('.anchor').on('click', function(){}); the\nthis should always be the clicked .anchor element.\nBut with this code it does not\n$('.anchor').on('click', function(){\n   console.log(this);\n});\nFor the html\n\ntext\n\nIn this case this will be the .label element, while I feel it should\nstill the .anchor since I clearly asked for an on-click event for this\nelement. Any chance of a change to this behavior?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/21\n.\n. Checked in for beta 3.\n. Awesome, thanks, will pull tonight.\nOn Sep 2, 2013 8:25 AM, \"Wolfgang Kluge\" notifications@github.com wrote:\nUses (^|\\s) and (\\s|$) instead of \\b in regular expressions. Thus, \"b\" is\nnot matched in \"a-b-c\".\nYou can merge this Pull Request by running\ngit pull https://github.com/WolfgangKluge/minified.js dashes-in-classnames\nOr view, comment on, or merge it at:\nhttps://github.com/timjansen/minified.js/pull/22\nCommit Summary\n- Allow dashes in classnames\nFile Changes\n- M src/minified-src.jshttps://github.com/timjansen/minified.js/pull/22/files#diff-0(4)\n- M src/minified-web-src.jshttps://github.com/timjansen/minified.js/pull/22/files#diff-1(2)\n- M src/test-web/minified-web-class-test.jshttps://github.com/timjansen/minified.js/pull/22/files#diff-2(24)\nPatch Links:\n- https://github.com/timjansen/minified.js/pull/22.patch\n- https://github.com/timjansen/minified.js/pull/22.diff\n. You always needs to request the module as 'minified' which is the name defined by Minified. AMD also allows anonymous modules that are loaded by file name, but Minified isn't anonymous because then it could not be loaded with AMD syntax if no AMD loader is present or with Sparkplug.js (https://github.com/timjansen/sparkplug.js).\n\nAs you have to requested 'minified', but require.js can not now in which file it is located, you need to tell require.js where to find it. I don't have any experience with require.js, but if I understand it correctly you should be able to define the path to Minified like this:\nrequire.config({\n    paths: {\n        minified: 'libs/minified'\n    }\n});\nTim\n. You need to use camel case, as it uses the style object. $backgroundImage\nshould work.\nTim\n On Sep 25, 2013 5:14 PM, \"Alfinch\" notifications@github.com wrote:\n\nUsing set() to change the 'background-image' property of an element does\nnot seem to work in Firefox. Oddly it seems to be specific to this\nproperty; setting the 'background' shorthand property works fine.\ne.g. -\n$('#myElement').set('$background-image', 'url(\"../images/background.jpg\")');\njsFiddle to demonstrate the issue:\nhttp://jsfiddle.net/LmuVc/\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/24\n.\n. Minified can not handle 'orange' as color in animations. Only #000, #000000\nand rgb(255, 255, 255) are supported as formats.\n\nTim\nOn Tue, Oct 8, 2013 at 9:44 PM, Richard notifications@github.com wrote:\n\nI try'd this line in the moving box example on jsFiddle\n$('#block').set({$backgroundColor: '#FFFFCC'}).animate({$backgroundColor: 'orange'},750);\nthere is no animation?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/25\n.\n. Changed this for beta 3. Only the IE compatibility version is affected.\n\nIf you need an immediate work-around, you'd need to add some lines to\nminified-web.js:\nIn the beginning of the file:\nvar oldOnLoad = window.onload;\nAnd at the end:\nvar minifiedOnLoad = window.onload;\nwindow.onload = function() {\n  minifiedOnLoad();\n  if (oldOnLoad) oldOnLoad();\n};\nTim\nOn Wed, Oct 16, 2013 at 3:54 PM, Vladimir Penkov\nnotifications@github.comwrote:\n\nvar oldOnload = s.onload;\ns.onload=function() {\ntriggerDomReady();\nif (oldOnload) oldOnload();\n}\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/26#issuecomment-26419302\n.\n. I am using the same Chrome version on Mac OS, and here it works. Which\nMinified version are you using? Can you test this page:\n\nhttp://minifiedjs.com/test/readytest.html\nIf that one works (3x 'success'), how can I reproduce it?\nThanks,\nTim\nOn Mon, Feb 3, 2014 at 6:46 PM, Yuli C. notifications@github.com wrote:\n\nI do not know why, but this breaks $.ready() for me in Chrome\n32.0.1700.102\n\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/26#issuecomment-33979968\n.\n. Modified the page to use the same version that you are using, but it's\nstill working here. Can you post a snippet of the code that is not working?\n\nThanks,\nTim\nOn Mon, Feb 3, 2014 at 7:03 PM, Yuli C. notifications@github.com wrote:\n\nYour test works, so I suppose I should open a separate issue.\nI got the version that gives me trouble from\nhttp://minifiedjs.com/download/minified-legacyie.js\nMy machine is a Mac Mini running latest OS.\n\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/26#issuecomment-33981543\n.\n. No worries, I am always glad to help.\n\nTim\nOn Sun, Feb 9, 2014 at 2:03 PM, Yuli C. notifications@github.com wrote:\n\nJust to confirm, the issue was of my own making -- something I won't get\ninto except to say that a combination of an older version of Curl.js with\nsome optimizer/Uglify related mischief has gotten me thinking it was in\nMinified. Sorry to have wasted your time, I don't usually end up doing\nthat. :/\n\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/26#issuecomment-34573211\n.\n. Thank you, just in time for beta 3, will be in :)\n. The problem is that ready() is not invoked when Minified is loaded after the onload/DOMReady events. I am going  release a new version that fixes this in the next days. \n. I am not sure whether this.define would work. It's some time since i wrote\nthat code, but i think there was the possibility that 'define' is just a\nlocal function. And in that case typeof is the only way to check whether\nthe function exists, as far as i know.\n\nThe reason for the Regexp is simply that it saved a byte or two, compared\nto a '==\"undefined\"'. In the end, most code is written the way it is in\nMinified because it reduces size. Usually I try to implement things in all\nthe ways I can think of, and then check what results in the shortest code\nafter compilation and gzipping.\nThis.define is probably smaller, but i'd need to check the AMD spec whether\nit is possible. I also need to look at your test cases later, not at a\ncomputer atm.\nThanks,\nTim\nOn Sunday, November 17, 2013, Giorgio Arata wrote:\n\nMinified Javascript library use a RegExp based control structure to check\nif define function is resolvable. I'm really interested to know how you\ndecided this was a better solution compared with a simpler \"if\n(!this.define) { }\" control structure. Did you encounter weird malfunctions\nwith Internet Explorer 8 or previous for example? Is this a trick to have a\nshorted code structure, assuming that a more costly RegExp check is more\nrobust and/or concise?\nI'm attaching my test cases to do the same check with various approaches.\n[image: diapo8]https://f.cloud.github.com/assets/520077/1559054/fd9a9f96-4fbb-11e3-89c6-cf11c5919fbc.png\nBest regards, Giorgio Arata.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/29\n.\n. Thanks, I didn't think of using delete for this. That's pretty awesome. I\nrewrote your code a little bit for Google Closure like this ('def' will\nautomatically be shortened by Closure, and 'define' and 'require' are\nquoted to prevent Closure from renaming them):\n\nvar def = {};\n!(delete define) || (this['define'] = function(name, f) {def[name] = f();});\n!(delete require) || (this['require'] = function(name) { return def[name];\n});\nUnfortunately, it makes the Web module one byte larger than the old\nversion, after compilation and gzipping. The complete distribution is one\nbyte smaller though. I guess the reason for that is that relatively complex\nconstructs like !(delete define) | (...) do not compress very well.\nIf you want to try out how the code affects code size, check out\nminified.js. You can get the size of the code using \"grunt measuresize\". Or\nyou can run \"grunt watch\" which will automatically monitor the source code\nand print its current size after every change. It's quite possible that\nyour approach can become smaller than the old code, but just needs some\ntweaking. I haven't played with it yet.\nThanks!\nTim\nOn Mon, Nov 18, 2013 at 1:00 AM, Giorgio Arata notifications@github.comwrote:\n\nWell, lurking throught your minified-web-full-src.js source code I've\nextracted a chunk that catches my interest.\nif (/^u/.test(typeof define)) { // no AMD support available ? define a minimal version\n        var def = {};\n        this['define'] = function(name, f) {def[name] = f();};\n        this['require'] = function(name) { return def[name]; };\n}\nIf your intent is to save some bytes without sacrificing the library\ncorrectness, my purposed solution could be conceptualized and written as\nfollow:\nvar \u0192 = {};\n!(delete define) || (this.define = function(name, f) {\u0192[name] = f();});\n!(delete require) || (this.require = function(name) { return x[name]; });\nIf you use var the variable are declared within the scope you are in (e.g.\nof the function). Whenevere require.js script is loaded before\nminified.js, you variables define and require are intialized as\nexpected, because of the or operator. Otherwise they become truly global\nvariables pointing to your minimal AMD implementation. Remember that if you\nuse var in the global scope, the variable cannot be deleted and the delete\nattempt returns false. This happen also when define is a local function.\nThank you very much for your comments.\nBest regards, Giorgio Arata.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/29#issuecomment-28668197\n.\n. Hmm.. I guess you are trying to use Minified's AMD fallback as a\nlightweight AMD loader. It was never intended as such, and its define\nimplantation isn't planned as public API. It was just the easiest way to\nimplement the AMD fallback.\n\nHave you seen Sparkplug?\nhttps://github.com/timjansen/sparkplug.js\nIt is a lightweight, synchronous AMD loader which is designed for something\nlike this.\nThe problem with defining define.amd is that it would suggest that Minified\nis AMD compliant, which it isn't. Over time people would request missing\nfeatures until I have Sparkplug completely integrated, which is something I\nwould rather avoid, because it adds about 500 bytes.\nTim\n On Nov 25, 2013 2:17 AM, \"Jak Wings\" notifications@github.com wrote:\n\nThe AMD Wikihttps://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property-says there should be \"amd\" property for \"define\" function. And I have met a\nlibrary that will check that property first before running.\nCould minified.js have a minimum definition for define.amd ?\ndefine.amd = {};\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/30\n.\n. Thank you, will change this in beta 4.\n\nTim\nOn Tue, Nov 26, 2013 at 8:28 PM, Ram Singla notifications@github.comwrote:\n\nIf we include es5-shim on legacy browser. Then minifiedjs breaks due to\nthe following line.\nIS_PRE_IE9 = !!document.all && ![].map;\nas es5-shim monkey patches the Array.prototype with a new map function.\nif we change this to following line then it works well even when es5-shim.\nIS_PRE_IE9 = !!document.all && !document.addEventListener;\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/31\n.\n. You can't use $(this), but I don't see any reason why $(item) should not\nwork.\nHere's a simple example that does it: http://jsfiddle.net/8B44S/1/\n\nBy the way,\n1. instead of get('@data-nestable'), you can also write get('%nestable').\nIt's a shortcut for data attributes.\n2. Beta 4 will introduce a new alternative to each(), called per(). It does\nnot return the item, but a list containing the item, so you don't have to\ncreate it using $(item) anymore. It will look like this:\nlists.per(function(il, index){\n   var plugin = il.get(\"%nestable\");\n});\n1. starting with beta 4, Minified will also set 'this' in all\n   iterators. However, it will be set to the list, not the current item,\n   as the current item is already available as argument.\nTim\nOn Mon, Dec 9, 2013 at 4:07 PM, Lukas Oppermann notifications@github.comwrote:\n\nHey,\nis there any way to get the current item of the each loop as a minified\nselection?\nThis is what I am trying:\nlists.each(function(item, index){\n   var plugin = $(this).get(\"@data-nestable\");\n}\nI get this Uncaught TypeError: undefined is not a function if I use\n$(item) instead of $(this), I get the same error. Any idea?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/32\n.\n. Currently I don't have any offline docu, but it is very easy to download\nthe complete site. Just go to the gh-pages branch on Github and download\nthe ZIP: https://github.com/timjansen/minified.js/tree/gh-pages\n\nIf you unzip it and put it on a HTTP server it should run without problems.\nThe API docs will probably also work locally without server.\nI fixed the example and added the property examples to trav(), thanks! Will\nappear with beta 4 very soon.\nTim\nOn Fri, Dec 13, 2013 at 9:32 AM, Lukas Oppermann\nnotifications@github.comwrote:\n\nHey, is there any offline docu for minified?\nMaybe you could have the api docu download to local storage the moment one\nvisits the page? Would be very awesome.\nBy the way I think there is a typo in the first example for select\nvar parents = $('ol.myList').selector('li', true); shouldn't it be select\ninstead of selector?\nAlso it would be nice to list all possible words lie NextSibling,\nparentNode, etc. in the docu for the trav fn.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/33\n.\n. Currently you can use comma and period, but nothing else. I will try to\nfind a solution for spaces and others in the next release.\n\nThanks,\nTim\nOn Sat, Jan 25, 2014 at 1:50 PM, Stephan Walter notifications@github.comwrote:\n\nPlease allow other characters for digit grouping.\nMost of Europe, South America and Africa use the comma as a decimal\nseparator and therefore use a different character for thousands separator.\nIn common are space, period. Somewhat less common are apostrophe and thin\nspace (U+202F).\nAccording to ISO 31-0:\nNumbers consisting of long sequences of digits can be made more readable\nby separating them into groups, preferably groups of three, separated by a\nsmall space. For this reason, ISO 31-0 specifies that such groups of digits\nshould never be separated by a comma or point, as these are reserved for\nuse as the decimal sign.\nFurther reading:\nhttps://en.wikipedia.org/wiki/Thousands_separator#Digit_grouping\nhttps://en.wikipedia.org/wiki/ISO_31-0#Numbers\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/34\n.\n. I have rewritten formatValue() to allow any character for grouping. Will be\nin beta 5.\n\nTim\nOn Sat, Jan 25, 2014 at 3:00 PM, Stephan Walter notifications@github.comwrote:\n\nI should add that Japan for example groups digits into ten-thousands (4\ndigits), but this already seems to be working. Thanks for your effort!\n\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/34#issuecomment-33289508\n.\n. Yeah, i think its currently only changing height. Will put this in my todo\nlist.\n\nThanks,\nTim\n On Jan 25, 2014 6:34 PM, \"Stephan Walter\" notifications@github.com wrote:\n\nI would expect $$slide to hide an element completely when sliding out. But\nthe padding is still visible. (at least on Firefox 26)\nThis can be seen in the jsfiddle example:\nhttp://jsfiddle.net/tjansen/USMfD/\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/35\n.\n. I have experimented a bit with adding $padding and $margin to the $$slide effect, but it did increase the file size quite a bit. At the same time, it does not really look good to animate padding and margin, it won't look like a real slide effect. \n\nI am putting this on hold for know. As work-around I would recommend to wrap the sliding element in a <div> without margin and padding. Then the effect looks perfect. \n. Awesome, thank you!\nI also did some additional changes: I added stop() support for aborting the request. The beauty of stop() is that is propagates through promise chains, so you can use then() to add a handler and use the promise() returned by then() to call stop().\nAnd I modified the signatures of the success()/failure() handlers to include the XHR object. In most cases, this should be more comfortable than getting the XHR from the promise. It is still required for upload promise though.\n. As you mentioned, '@value' reads the attribute and select does not have\none. But you can use get() to read an object's property:\n$('select').get('value') will get the job done.\nTim\nP.S.: Two more tips: when you read more than one attribute, values() is\noften more comfortable to get their values. In beta 5 you still need to\nassign names to the fields to use values(), but starting with beta 5 the id\nwill be sufficient.\nAnd if I need only one value, I usually write $$('select').value, which is\na little bit shorter than using get().\nOn Sat, Apr 12, 2014 at 7:44 PM, Igor Santos notifications@github.comwrote:\n\nI tried to get the value of a select tag using $('select').get('@value')but it didn't work, while doing that for inputs does the job. However,\n$('select')[0].value works fine.\nI can guess it does not work because the value is not an attribute from\nthe tag, but a property from the node. However, I do think this is an\nautomatic thing the devs would try to write. Do you think this could be\nfixed?\n\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/37\n.\n. Never thought about it, but it would sure be nice if it did :) I'll see\nwhat I can do...\n\nOn Sun, Apr 13, 2014 at 4:41 AM, Igor Santos notifications@github.comwrote:\n\nBtw 2, should onChange() work with selects? Because it's not...\n\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/37#issuecomment-40298066\n.\n. $$(selector) currently has no context support. I should add it for\nconsistency.\n\nTim\nOn Sun, Apr 27, 2014 at 1:46 AM, Igor Santos notifications@github.comwrote:\n\nThe current version of my app http://gc.igorsantos.com.br has a bug\nregarding the selection of child elements.\nReproduction steps:\n1. Create a new Workout (unrelated with the bug, only to enable some UI\nelements)\n2. open the source code in the inspector\n3. put a breakpoint at the line where you first find \"focus\" (currently\naround line 1510, return $$('input', root).focus())\n4. Create a new Exercise inside that workout\n5. Code will stop. You'll notice $$('input', root) finds the field from\nthe parent, while $('input', root)[0] gives correctly the first input\nfrom the fieldset\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/38\n.\n. You can already use next() instead of siblings(), and up() instead of\nparent(). There is no children() yet, but it's on my post-1.0 todo list.\nselect() is similar, but only selects all descendants.\n\nThe work-around for children is $('label', $('input').up(), true).\nTim\nOn Sun, Apr 27, 2014 at 2:36 AM, Igor Santos notifications@github.comwrote:\n\nNot sure if this fits the library's philosophy, but suggesting an idea\nnever hurts :)\nI would like to be able to do something like $('input').siblings('label')or even easier but more verbose\n$('input').parent().children('label').\nI think the addition of parent(), parents(), children() and siblings()methods would make code much more readable and easier to write, instead of\nhaving to go back and forth with minified lists and DOM objects :)\nI could even implement them if you feel like, but I'm only afraid I won't\nhave your minification skills haha\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/39\n.\n. Oh, don't know my own API... there is a already a child-only argument for\nselect(). So the shortest work-around is $('input').up().select('label',\ntrue).\n\nOn Sun, Apr 27, 2014 at 12:18 PM, Tim Jansen tim@tjansen.de wrote:\n\nYou can already use next() instead of siblings(), and up() instead of\nparent(). There is no children() yet, but it's on my post-1.0 todo list.\nselect() is similar, but only selects all descendants.\nThe work-around for children is $('label', $('input').up(), true).\nTim\nOn Sun, Apr 27, 2014 at 2:36 AM, Igor Santos notifications@github.comwrote:\n\nNot sure if this fits the library's philosophy, but suggesting an idea\nnever hurts :)\nI would like to be able to do something like $('input').siblings('label')or even easier but more verbose\n$('input').parent().children('label').\nI think the addition of parent(), parents(), children() and siblings()methods would make code much more readable and easier to write, instead of\nhaving to go back and forth with minified lists and DOM objects :)\nI could even implement them if you feel like, but I'm only afraid I won't\nhave your minification skills haha\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/39\n.\n. This is a limitation of the DOM event model: focus and blur don't bubble.\n\n\nhttp://www.quirksmode.org/dom/events/blurfocus.html\nDoes it work in jQuery? I have no idea how to implement a work-around for\nthis.\nTim\n On May 3, 2014 2:27 AM, \"Igor Santos\" notifications@github.com wrote:\n\nPS: I was wondering if the usage of onChange was eating up the focus\nevent, but even after removing it the behaviour was still the same as\nabove. Updating to the last version of minified from the dist folder in\nthis repository doesn't change either.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/41#issuecomment-42091213\n.\n. Maybe there is a way to implement it, like using mutation observers to\nmonitor the DOM and really register them on creation of the element. There\nis just no easy way, as far as I know.\n\nPersonally I also favor registering events on creation, because this makes\nyour code less dependent on the HTML and will generally result in less\nfragile code. Minified's event registration methods have been designed to\nmake it easy to do this (that's why there are sub-selectors everywhere).\nI am going to release a module with high-level event registration methods,\nkind of like onChange() and onOver(), but also with similar event handlers\nfor things like mouse and key events. Automatic event registration based on\nDOM mutation may be a good fit for the module. But unless it is simple to\nimplement I think it shouldn't make it into the Web module.\nTim\nOn Sat, May 3, 2014 at 5:53 PM, Igor Santos notifications@github.comwrote:\n\nGood question, I'll try to test it later.\nToo bad, so there's no way to implement focus events on elements created\non\nthe fly other than manually attaching the events upon creation?\nOn May 3, 2014 3:32 AM, \"Tim Jansen\" notifications@github.com wrote:\n\nThis is a limitation of the DOM event model: focus and blur don't\nbubble.\nhttp://www.quirksmode.org/dom/events/blurfocus.html\nDoes it work in jQuery? I have no idea how to implement a work-around\nfor\nthis.\nTim\nOn May 3, 2014 2:27 AM, \"Igor Santos\" notifications@github.com wrote:\n\nPS: I was wondering if the usage of onChange was eating up the focus\nevent, but even after removing it the behaviour was still the same as\nabove. Updating to the last version of minified from the dist folder\nin\nthis repository doesn't change either.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/timjansen/minified.js/issues/41#issuecomment-42091213>\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/timjansen/minified.js/issues/41#issuecomment-42097792>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/41#issuecomment-42108401\n.\n. There's a relatively simple solution described here:\nhttp://stackoverflow.com/questions/1199293/simulating-focus-and-blur-in-jquery-live-method\n\nBasically I need to use event capturing instead of bubbling for focus and\nblur on normal browsers, and on legacy IEs there are proprietary events\nthat can bubble.\nTim\nOn Sat, May 3, 2014 at 6:16 PM, Tim Jansen tim@tjansen.de wrote:\n\nMaybe there is a way to implement it, like using mutation observers to\nmonitor the DOM and really register them on creation of the element. There\nis just no easy way, as far as I know.\nPersonally I also favor registering events on creation, because this makes\nyour code less dependent on the HTML and will generally result in less\nfragile code. Minified's event registration methods have been designed to\nmake it easy to do this (that's why there are sub-selectors everywhere).\nI am going to release a module with high-level event registration methods,\nkind of like onChange() and onOver(), but also with similar event handlers\nfor things like mouse and key events. Automatic event registration based on\nDOM mutation may be a good fit for the module. But unless it is simple to\nimplement I think it shouldn't make it into the Web module.\nTim\nOn Sat, May 3, 2014 at 5:53 PM, Igor Santos notifications@github.comwrote:\n\nGood question, I'll try to test it later.\nToo bad, so there's no way to implement focus events on elements created\non\nthe fly other than manually attaching the events upon creation?\nOn May 3, 2014 3:32 AM, \"Tim Jansen\" notifications@github.com wrote:\n\nThis is a limitation of the DOM event model: focus and blur don't\nbubble.\nhttp://www.quirksmode.org/dom/events/blurfocus.html\nDoes it work in jQuery? I have no idea how to implement a work-around\nfor\nthis.\nTim\nOn May 3, 2014 2:27 AM, \"Igor Santos\" notifications@github.com\nwrote:\n\nPS: I was wondering if the usage of onChange was eating up the focus\nevent, but even after removing it the behaviour was still the same as\nabove. Updating to the last version of minified from the dist folder\nin\nthis repository doesn't change either.\n\u2014\nReply to this email directly or view it on GitHub<\n\nhttps://github.com/timjansen/minified.js/issues/41#issuecomment-42091213>\n\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/timjansen/minified.js/issues/41#issuecomment-42097792>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/41#issuecomment-42108401\n.\n. Just checked in a fix. Blur and focus are now working as described in the\nlink above. onFocus() is also working with bubbling.\n\n\nOn Sat, May 3, 2014 at 6:37 PM, Tim Jansen tim@tjansen.de wrote:\n\nThere's a relatively simple solution described here:\nhttp://stackoverflow.com/questions/1199293/simulating-focus-and-blur-in-jquery-live-method\nBasically I need to use event capturing instead of bubbling for focus and\nblur on normal browsers, and on legacy IEs there are proprietary events\nthat can bubble.\nTim\nOn Sat, May 3, 2014 at 6:16 PM, Tim Jansen tim@tjansen.de wrote:\n\nMaybe there is a way to implement it, like using mutation observers to\nmonitor the DOM and really register them on creation of the element. There\nis just no easy way, as far as I know.\nPersonally I also favor registering events on creation, because this\nmakes your code less dependent on the HTML and will generally result in\nless fragile code. Minified's event registration methods have been designed\nto make it easy to do this (that's why there are sub-selectors everywhere).\nI am going to release a module with high-level event registration\nmethods, kind of like onChange() and onOver(), but also with similar event\nhandlers for things like mouse and key events. Automatic event registration\nbased on DOM mutation may be a good fit for the module. But unless it is\nsimple to implement I think it shouldn't make it into the Web module.\nTim\nOn Sat, May 3, 2014 at 5:53 PM, Igor Santos notifications@github.comwrote:\n\nGood question, I'll try to test it later.\nToo bad, so there's no way to implement focus events on elements created\non\nthe fly other than manually attaching the events upon creation?\nOn May 3, 2014 3:32 AM, \"Tim Jansen\" notifications@github.com wrote:\n\nThis is a limitation of the DOM event model: focus and blur don't\nbubble.\nhttp://www.quirksmode.org/dom/events/blurfocus.html\nDoes it work in jQuery? I have no idea how to implement a work-around\nfor\nthis.\nTim\nOn May 3, 2014 2:27 AM, \"Igor Santos\" notifications@github.com\nwrote:\n\nPS: I was wondering if the usage of onChange was eating up the focus\nevent, but even after removing it the behaviour was still the same\nas\nabove. Updating to the last version of minified from the dist folder\nin\nthis repository doesn't change either.\n\u2014\nReply to this email directly or view it on GitHub<\n\nhttps://github.com/timjansen/minified.js/issues/41#issuecomment-42091213>\n\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/timjansen/minified.js/issues/41#issuecomment-42097792>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/41#issuecomment-42108401\n.\n. Should have been fixed with 1.0 already (just cleaning up old issues).\n. I wasn't aware of this, but it seems like either Google Closure or Uglify\nare unescaping escaped unicode characters (like \\u1fff). Need to find some\nway to prevent this. It is certainly not intended.\n\n\n\nThanks for finding this!\nOn Sat, May 3, 2014 at 8:55 PM, Yuli C. notifications@github.com wrote:\n\nWhen trying to add beta5 to jsdelivr/jsdelivr#748https://github.com/jsdelivr/jsdelivr/pull/748I encountered some issues, the most serious of which was actual unicode\ncharacters in the minified source for the library (not escaped). Is there a\nreason for this?\nLove the lib, BTW. It's not getting used enough, I think.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/42\n.\n. Fixed in beta 6.\n. I have added beta 6 to NPM. Package name is minified. Please check whether\nit works.\n\nThanks,\nTim\nOn Sun, Jun 8, 2014 at 10:54 PM, Paul Osborne notifications@github.com\nwrote:\n\nThanks for the work you've done on Minified, I'm currently evaluating it\nfor a project i'm working on. However, i've run into an issue when trying\nto use it with Browserify.\nI believe the solution is to include it in the NPM registry so that when\nit is installed it can be found within the NODE_PATH.\nThanks.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/43.\n. Ok, I was hoping that browserify would work as Node.js should support AMD:\nhttp://nodejs.org/docs/v0.5.0/api/modules.html#aMD_Compatibility\n\nOtherwise I need to define a new target for CommonJS.\nNot sure wheather deamdify will work, but minified-src.js should be quite\neasy to convert into CommonJS. Just replace all code at the beginning up to\nand including \"define('minified', function() {\" with \"module.exports =\n(function() { \".\nAnd then replace the \"});\" at the end with \"})();\". That's all that should\nbe necessary.\nTim\nOn Mon, Jun 9, 2014 at 1:53 PM, Paul Osborne notifications@github.com\nwrote:\n\nLooks like the AMD format is preventing it working with Browserify,\nreplacing define with module.exports seems to resolve the issue. I'm\ncurrently looking at deamdify https://www.npmjs.org/package/deamdify as\na possible solution.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/43#issuecomment-45483620\n.\n. Will try to include this in the next release.\n\nThanks,\nTim\nOn Tue, Jun 10, 2014 at 7:17 PM, Paul Osborne notifications@github.com\nwrote:\n\nAllowing an optional context to be passed into .each and .eachObj\nprevents the need to create a scope variable such as _this or self for\nuse in callbacks. Underscore provides this\nhttps://github.com/jashkenas/underscore/blob/master/underscore.js#L97\n_.each(list, function (item) {\n    this.add(item);}, this);\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/44.\n. Will be in beta 6.1.\n. Thank you, fixed it! Will release an update soon.\n. Yes, Minified stops event propagation by default. To prevent this, prefix\nwith a pipe. Or prefix with a '?' to let the return value decide.\n\nTim\nOn Thu, Jul 10, 2014 at 7:00 PM, Jason Connell notifications@github.com\nwrote:\n\nWe found out how to fix it with the |click (pipe click)\nhttp://jsfiddle.net/mWLUV/12/\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/46#issuecomment-48633049\n.\n. Do you have a complete example? '$' is just returning the value of the\nelement's className property, which should always have all class names.\n\nThanks,\nTim\nOn Thu, Sep 25, 2014 at 5:05 AM, trinione notifications@github.com wrote:\n\nI need the command to return the entire class value. Currently, it only\nreturns the first classname.\nExample:\nThe command:\n$(page).get('$')\nReturns: 'pa-page'.\nHow can I get the entire class value?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/47.\n. Sorry, this got lost in my inbox. Can you try 'className' directly? As in\n$$(page).className?\nDo you have a complete example, as in JSFiddle?\n\nThanks,\nTim\nOn Fri, Sep 26, 2014 at 5:39 AM, trinione notifications@github.com wrote:\n\nThe example I gave only returns the first name 'pt-page' .\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/47#issuecomment-56915959\n.\n. Please re-open if you still have this issue.\n. Nia (Minifieds next gen) already has logging of uncaught exceptions, but I\nwill look into adding a global handler.\n\nThanks,\nTim\n On Oct 1, 2014 11:55 PM, \"Alden Daniels\" notifications@github.com wrote:\n\nBoth RSVP https://github.com/tildeio/rsvp.js/ and Bluebird\nhttps://github.com/petkaantonov/bluebird support a global on error\nthat is called whenever there appears to be an uncaught exception within a\npromise.\nThis is crucial - without this option, errors are silently swallowed when\nthe developer fails to add an .error() handler. Worse, right now there's\nliterally no way to detect an error that occurs in the final .error()\nhandler on the promise chain.\nRead @petkaantonov https://github.com/petkaantonov's excellent\ndocumentation about how errors should be handled in promises:\nhttps://github.com/petkaantonov/bluebird#error-handling\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/48.\n. Minified 1.1 will re-throw (unhandled) exception to the callng thread. Nia also has global error handlers now.\n. If I understand you correctly, a .get('value') on the  element\nshould be all you need.\n\nTim\nOn Wed, Nov 5, 2014 at 10:25 PM, trinione notifications@github.com wrote:\n\nHi:\nBeen trying to figure it out, but can't.\nHow to get the SELECTED data value of '19' when the user selects 'Steve' ?\nJohn\nSteve\nRebecca\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/49.\n. I see. Then select all options, use  filter() to get all that are selected\n(filter with function(el) { return el.selected; })  and call get('%idno')\non the resulting list to get the data attribute.\nOn Nov 5, 2014 11:41 PM, \"trinione\" notifications@github.com wrote:\nTim:\nNope, that does not work.\nalert($(\"#theList\").value);\nNOTE: I need to retrieve the 'data-attribute', not a 'value'. The\nfollowing works for a 'value'\nalert($$(\"#pastPupilsList\").value);\nWhen the code is:\n\nJohn\nSteve\nRebecca\n\nHOWEVER, I need the 'data' value for 'data-idno'.\n\nJohn\nSteve\nRebecca\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/49#issuecomment-61895158\n.\n. You're selecting , not the options.\n\nTry\n$('#theList option').filter(function(el) { return el.selected;\n}).get('%idno'))\nOn Nov 6, 2014 12:21 AM, \"trinione\" notifications@github.com wrote:\n\nIs this code correct? Cause it is not working.\n```\n    var list = $('#theList').filter(function(el) {\n        return el.selected; })\nalert($(list).get('%idno'));\n\n```\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/49#issuecomment-61900593\n.\n. I created a JSFiddle with your code snippet:\n\nhttp://jsfiddle.net/bm6nd7qh/1/\nSeems to work.\nTim\nOn Thu, Nov 6, 2014 at 10:11 AM, trinione notifications@github.com wrote:\n\nI had tried exactly that also. The result is 'undefined'.\nvar idno = $('#theList option').filter(function(el) {\n            return el.selected;\n        }).get('%idno');\n        alert(idno)\nResult >> undefined\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/49#issuecomment-61946945\n.\n. Please use $(this).select(...).\n\nTim\nOn Nov 11, 2014 1:55 PM, \"trinione\" notifications@github.com wrote:\n\nI am trying to translate the following jQuery to Minified but can't get it\nto work.\njQuery:\n$(this).find('.swiper-scrollbar')[0]\nWhat I think Minified should be:\n$(this).find('.swiper-scrollbar 0')\nHowever, it does not work.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/50.\n. You're right. I have added all 2xx codes to Nia as success codes. Not sure\nabout updates for Minified yet.\n\nThanks\nTim\nOn Thu, Nov 20, 2014 at 5:40 AM, Marius Smit notifications@github.com\nwrote:\n\nWe use MinifiedJS in our framework because it is small and does what we\nneed (templating, formatting, etc.) without having to include a whole lot\nof other libs. Our REST services return the HTTP codes depending on the\naction e.g. 200 = success and 201 = created. Minified throws an error\nthough for anything other than 200 which isn't desired xhr.status == 200.\nWe've updated our local copy to accept all 200 codes.\nDo you plan to add this check? I see that nia also only checks for 200.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/51.\n. Implemented this in Minified for 1.1.\n. Not yet. There's call(), but it only calls a list of functions, and not the\nmethods stored in a property of the list members.\n\nWill add a underscore-like invoke() function.\nThanks,\nTim\nOn Thu, Feb 19, 2015 at 5:24 PM, Sergey Korotkov notifications@github.com\nwrote:\n\nI know I can use each with callback function. But might be there is kind\nof shorthand?\nTrivial example is how to call .play() method on EE(\"audio\",{'@src\nhttps://github.com/src':'something}). I know I can use [0].play(), but\nagain might be there are shorthand?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/52.\n. Yeah, I am very aware of the limitations because of the size. This is why\nthe next gen will be significantly larger (but still about 50% of jQuery if\nyou don't count the extra modules).\n\nTim\nOn Fri, Feb 20, 2015 at 9:21 AM, Sergey Korotkov notifications@github.com\nwrote:\n\n@timjansen https://github.com/timjansen Thanks for your reply.\nMeanwhile my compliments for your hard work with this library, library\nitself and docs are awesome. I believe it is has kind of limited use areas\njust because size doesn't matter so much for majority of web apps. However\nfor some use cases its hard to underestimate its benefits (balance between\nsize and functionality). From that aspect I believe it is good that it has\nits own API, its not only small itself but allows to write smaller code\naround it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/52#issuecomment-75203977\n.\n. Why do you need this? Synchronous mode is deprecated in FF30, possibly\nother browsers as well.\n\nTim\n On Apr 1, 2015 11:15, \"FedorFL\" notifications@github.com wrote:\n\nHello, please add to .request settings ability to pass async mode key:\nvar async = ('async' in settings)? settings['async']:true\n    //xhr['open'](method, url, true, settings['user'], settings['pass']);\n    xhr['open'](method, url, async, settings['user'], settings['pass']);\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/53.\n. No, unfortunately not in Minified. The next-gen Nia (which is not making a\nlot of progress in the last few months unfortunately) will be much better\nin that regard. It has both better reporting, as well as global handlers.\nBut I have no immediate plans for Minified, as that would bring it over the\n4kb limit.\n\nTim\nOn Thu, May 21, 2015 at 5:02 PM, Namek notifications@github.com wrote:\n\nAwhile development, sometimes features silently stop working and it needs\na static analysis of code to find out what's happening.\nWhen a callback (in.on() or in a promise) throws an error, it is catched\nand no one notices that. Is there a way to globally handle it and/or\nrethrow it?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/54.\n. It's required for compliance with the Promises/A+ spec. It's quite possible\nthat the project works fine without it, never tried it.\n\nTim\nOn Wed, Jun 3, 2015 at 1:40 PM, Namek notifications@github.com wrote:\n\nIs that try/catch necessary? Can I fork the project and just remove it?\nTracking errors is really hard and time consuming because of this. And,\nduring development, some errors are not found straightaway which increases\n\"bugfix\" commits.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/54#issuecomment-108324788\n.\n. It's swallowed in the sense of not passing the exception through to the\ncalling thread, and thus it won't show in the browser's console. It's not\nswallowed from the Promise/A+ perspective, as the promise returned by the\nerror()/then() method will report the exception as a rejected promise. The\nspec does not define what's reported on the console.\n\nI am aware of the issue, but unfortunately a bit short on time in the last\nmonths. If I can find the time, I am going to create a Minified 1.1 as an\nintermediate release which will contain a solution for this and the other\nmost important issues (but it will be also a bit over >4kb).\nTim\nOn Wed, Jun 3, 2015 at 1:45 PM, Namek notifications@github.com wrote:\n\nIs it really compliant to swallow error when there is no error handler?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/54#issuecomment-108329462\n.\n. Assuming you use the full version, there should be two places where\nexceptions would have to be reported:\nhttps://github.com/timjansen/minified.js/blob/master/src/minified-extras-full-src.js\nLines 255 and 263. If you'd just add a console.log() in there, you would\nhave error reporting for all exceptions that are thrown by any exception\nhandler.\n\nReally throwing the exception to let it pass through to the calling thread,\nso it will interoperate with the browser's debugger and so on, is not that\neasy though. You don't want every exception to be reported, as some are\nalready handled by a proper error handler. The Nia implementation of\npromise() therefore tracks which error handlers have been registered for a\nparticular promise, and only rethrows exception when there is no error\nhandler for them (\nhttps://github.com/niajs/nia/blob/master/src/nia-headless-src.js starting\nline 1417).\nI can understand your view of smallness being not that important. That's\nwhy I started Nia as replacement.\nThe build system is so complex because of the builder and the\ndouble-optimization. That's also something I addressed with Nia (and the\nreason why it has no builder).\nTim\nOn Wed, Jun 3, 2015 at 2:03 PM, Namek notifications@github.com wrote:\n\nTo me, efficient work and software stability is much more important than\nsmallness of the library.\nI didn't have much time to look too deply into the code (BTW building\nsystem is bit weird) but what I would suggest is a logic like:\nif hasErrorHandler then\n    try { operation() } catch err { errorHandler(err) }\nelse\n  operation();\nDo you think that's possible?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/54#issuecomment-108343200\n.\n. Checked in a new promise implementation for Minified 1.1: In the Web module, all exceptions thrown by then() handlers are re-thrown into the callling thread. In the complete version, it will do the same, but only if there is no rejection handler registered.\n. Thank you for your patch. I am not sure yet how to go on with this issue as\nwell as some other smaller issues that have been discovered in 1.0, as\nfixing them will break the 4kb barrier.\n\nI am not applying your patch yet as I think there is likely a more compact\nsolution. Nia already supports multi-options, and it's implemented like\nthis:\n    if (el.multiple)\n    return $('option', el, true).collect(function(option) { if\n(option.selected) return option.value; });\nAs there are several things like this, I hope to start working on 1.1 in\nthe next days.\nThanks,\nTim\nOn Sun, May 24, 2015 at 8:23 PM, Ebben Feagan notifications@github.com\nwrote:\n\nThe documentation for the values function says if there are multiple\nresults for a name it will return an array and that seems to work for\ncheckboxen and the like but not for selects. I have confirmed this in IE7+\nand A grade browsers.\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/timjansen/minified.js/pull/55\nCommit Summary\n- $(form).values() doesn't support multiple select\nFile Changes\n- M src/minified-web-full-src.js\n  https://github.com/timjansen/minified.js/pull/55/files#diff-0 (11)\nPatch Links:\n- https://github.com/timjansen/minified.js/pull/55.patch\n- https://github.com/timjansen/minified.js/pull/55.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/pull/55.\n. The reason was probably to save a byte or two. Will change this in 1.1 .\n\nThanks,\nTim\nOn Fri, Jul 3, 2015, 16:03 Roman notifications@github.com wrote:\n\nHere is a gist https://gist.github.com/romanlv/16365aba918d1bab0de1\nwith code to reproduce the problem\nSimply changing var _window = this; to var _window = window; in\nminified-leagacy-ie-src.js seems to fix the problem, but I'm not sure\nwhat the reason for using original statement in the first place\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/56.\n. You're right, WebContent does not even exist anymore, thanks.\n\nTim\nOn Fri, Aug 28, 2015 at 12:00 AM, Maik Riechert notifications@github.com\nwrote:\n\n\"main\" points to \"WebContent/minified.js\" which I think should be\n\"dist/minified.js\" right?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/58.\n. Implemented for PUT. Did not implement it for DELETE, as the HTTP spec suggests that DELETE bodies will be ignored. \n. Thank you, will add that additional check.\n\nTim\nOn Thu, Oct 8, 2015, 07:58 Dmitry Bedrin notifications@github.com wrote:\n\nSome libraries provide only a require function, without define\nMinified.js breaks such libraries. Consider following example:\nhttp://jsfiddle.net/bedrin/g6kyho7v/\nAs you can see, I can use Shred before adding Minified.JS, but after that\nit is broken.\nThe problematic code is this:\nif (/^u/.test(typeof define)) { // no AMD support available ? define a minimal version\n    (function(def){\n        var require = this['require'] = function(name) { return def[name]; };\n        this['define'] = function(name, f) { def[name] = def[name] || f(require); };\n    })({});\n}\nIt should test for require function as well\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/60.\n. Looked at it again, and I don't see a good way of solving this issue in Minified. If I add the check for 'require', Minified will go into AMD-compatibility mode. But that won't work either, because Shred's 'require' definition would clash with an AMD loader. \n\nMinified is designed to either work with an existing AMD loader, or provide its own stub. I am not sure what Shred is using... adding CommonJS support would be an option for Minified, but from what I have seen in the (minified) Shred source code, it won't help either. As long as Shred just declares global variables without supporting any module system, it's hard to avoid naming clashes.\n. No worries, I am pretty busy this week and didn't have time to look into it\nyet.\nTim\nOn Wed, Oct 14, 2015, 22:09 Christian Grobmeier notifications@github.com\nwrote:\n\nI am very sorry, please ignore this issue.\nThe problem was Jekyll which I use. It uses Liquid, which also uses {{}}\nfor templating things. This brought up a conflict with the MinifiedJS\ntemplating features.\nIncluding minified with enclosing raw tags solved the issue for me:\n// Using gulp and gulp-insert\n.pipe(insert.wrap('{% raw %}', '{% endraw %}'))\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/62#issuecomment-148181120\n.\n. What exactly confused you? It's Promises/A+ compatible (in the full\ndistribution). Even though the construction is different, using an existing\npromise shouldn't be very different.\n\nThanks,\nTim\nOn Tue, Oct 27, 2015 at 10:57 PM, Maik Riechert notifications@github.com\nwrote:\n\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Promise\nI was rather confused when I wanted to use $.ajax and found that it is a\ncompletely different type of Promise than the ES6 standard.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/64.\n. I added catch() as alternative to error().\n\nRegarding multi-args as callback parameters, I still think it's unfortunate that ES6 does not have them. They make so life so much easier, especially with $.request(). \n. $(selector, context) searches through the descendants of the context nodes,\nnot the nodes themselved. You can use .select() to search through the nodes\nthemselves: HTML('').select('a')\nTim\nOn Thu, Oct 29, 2015 at 7:32 PM, Maik Riechert notifications@github.com\nwrote:\n\nI think I just discovered the same bug with normal HTML:\n$('a', HTML(''))// va {0: a, length: 1, : true}\n$('a', HTML(''))// va {length: 0, : true}\nWhy does the second query not find the  element??\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/66#issuecomment-152277665\n.\n. Minified can't handle Document as query context yet, only elements. Please\nuse xml.documentElement as a work-around for now:\n\nvar layers = $('Layer', xml.documentElement);\nThanks,\nTiim\nOn Thu, Oct 29, 2015 at 4:57 PM, Maik Riechert notifications@github.com\nwrote:\n\nreq.open('GET', 'http://igems.doi.gov/arcgis/services/igems_haz/MapServer/WMSServer?service=wms&version=1.1.1&request=GetCapabilities')\nreq.overrideMimeType('text/xml')\nreq.addEventListener('load', function() {\n  var xml = req.responseXML\n  var layers = $('Layer', xml)\n  console.log(layers) // empty list\n  layers = xml.getElementsByTagName('Layer')\n  console.log(layers) // HTMLCollection of many elements\n})\nreq.send()\nWhy isn't this working? I tried to follow a jquery tutorial\nhttp://fuzzytolerance.info/blog/2012/03/05/2012-03-06-parsing-wms-getcapabilities-with-jquery/\nwhich does the same thing, but with minified I get an empty list as shown\nabove.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/66.\n. HTML() converts text into HTML nodes. Haven't tried it with , but\ngenerally clone() should be what you are looking for.\n\nTim\nOn Thu, Oct 29, 2015 at 6:57 PM, Maik Riechert notifications@github.com\nwrote:\n\nI put my templates within </template and\ncurrently use a little helper to fetch the template content:\nfunction fromTemplate (id) {\n  return document.importNode($('#' + id)[0].content, true).children[0]\n}\nvar el = fromTemplate('mytemplate')\n$('#foo').add(el)\nI thought I could switch to just using var el = HTML('#mytemplate') but\nthat didn't work. Would be a nice addition!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/timjansen/minified.js/issues/67.\n. When you put HTML into a ",
    "tomas": "Understood. I do think that if you're already including $.request in the Web part, it makes all the sense to include those couple of lines of code that retrieve a form's values in order to send that $.request. It think it's a pretty common use.\nFor me, App sounds more like controllers/models/views, not common CSS/DOM/AJAX stuff. \nBut that's just me. :)\n. Events for changes in text fields sounds more like Util than App to me, but it's your call! :)\n. Nice!\n. ",
    "lukasoppermann": "Cool.\n. Is there also a way to add a fn without a selector, like the $.loop fn? I guess it would need to be added to MINIbut I did not get it to work.\n. Way to be stupid, of course that was about the only thing I did not try. Thanks, maybe (if it is not there yet in which case I must have missed it) you could add it to the doc in the extending section?\n. Well let me add, that if I animate it with a duration of 1000 it stops early, but if I use a duration of 2000 it works. Thanks for checking.\n. Awesome, thank you so very much.\n. Yeah, I am thinking about the second one I think, does that already exist? I did not find it in the docs. So can I set smoothToggle to \"50\" and it would animate to purple.\nlike \n$(selector).smoothToggle({$backgroundColor: '#f00'},{$backgroundColor: '#00f'}, 50); ?\n. Hey, I had to reformat a a bit and do I need to use MINI.M.prototype?\nIt did not work otherwise. But now I get the error\nUncaught ReferenceError: isFunction is not defined\nAwesome, that you implemented it, beta 3 seems to have all I need. :)\nSo I basically just need to assign 0.5 to linearity to get the animation at 50%, right? \nAny idea about the error though?\n```\nMINI.M.prototype.dial = function (properties1, properties2, linearity) {\nvar self = this;\n\nvar interpolate = isFunction(linearity) ? linearity : function(startValue, endValue, t) \n{\n    return startValue + t * (endValue - startValue) * (linearity + (1-linearity) * t * (3 - 2*t));\n};\n\nlinearity = linearity || 0;\n\nfunction toString(s) { // dependency, cut&pasted from minified-web-src.js\n    return s!=_null ? ''+s : '';\n}\n\nfunction replace(s, regexp, sub) { // dependency, cut&pasted from minified-web-src.js\n    return toString(s).replace(regexp, sub||'');\n}\n\nfunction extractNumber(v) { // dependency, cut&pasted from minified-web-src.js\n    return parseFloat(replace(v, /^[^\\d-]+/));\n}\n\nfunction getColorComponent(colorCode, index) {\n    return (/^#/.test(colorCode)) ?\n        parseInt(colorCode.length > 6 ? colorCode.substr(1+index*2, 2)\n        : ((colorCode=colorCode.charAt(1+index))+colorCode), 16)\n        : parseInt(replace(colorCode, /[^\\d,]+/g).split(',')[index]);\n}\n\nreturn function(t)\n{\n    eachObj(properties1, function(name, start) \n    {\n\n        var newValue = 'rgb(', end=properties2[name];\n\n        if (/^#|rgb\\(/.test(end)) \n        { // color in format '#rgb' or '#rrggbb' or 'rgb(r,g,b)'?\n            for (var i = 0; i < 3; i++)\n            {\n\n                newValue += Math.round(interpolate(getColorComponent(start, i), getColorComponent(end, i), t)) + (i < 2 ? ',' : ')');\n            }\n        }\n        else\n        {\n            newValue = replace(end, /-?[\\d.]+/, toString(interpolate(extractNumber(start), extractNumber(end), t)));\n        }\n        self.set(name, t>=1?end:t<=0?start:newValue);\n\n    });\n\n};\n\n};\n```\n. Okay, that is pretty awesome. But it only works with colors, right? So if I want to use it for position or height it does not work? Or am I just doing it wrong? The reason for all this is just, that this way one can animate elements in sync with the users scrolling behavior. \nAlthough the color stuff helps me a lot already.\n. You are the best, this makes all my dreams come true. :smile: \nLooking forward to the beta 3, but I am going to start using it now already, Thank you so much.\n. Naa, actually I was looking for set() classes without prefix.\nI did not quite get that from the docs.\n. Yeah, my bad, I messed something else up, thanks for explaining though, also good to know about the %nestable.\n. Ahh, yeah, very sensible, I got it local like you said.\nMaybe at some point you could fix the links to include a .? Like ./css/... because otherwise it may not work depending on your local setup and I would have to fix it every time I download the updated api docu. \nThanks anyway, it already helps me a lot.\n. ",
    "andyhmltn": "The diff isn't very helpful in this case, but this is due to the source being minified. If there's another way to add this with a more descriptive diff, let me know and I'll do it :+1: \n. No worries :smile: \n. ",
    "AnSavvides": "Hey Tim,\nAh, that makes sense - well, I've certainly learnt something new today, thank you for taking the time to elaborate on this.\nIn this case, feel free to close this pull request and keep up the good work!\nAndreas\n. ",
    "arimlib": "Great! thanks Tim.\nis there a deadline for the next release?\n. ",
    "Toobian": "On beta2 delegate events worked, but when I try to update on the last version (beta4), it does not work. =(\n. Yes i see API change. I test a simple example :\n```\n\nButton1\n\n\n\n```\nWith :\n```\nvar MINI = require('minified');\nvar =MINI., $=MINI.$, $$=MINI.$$, EE=MINI.EE, HTML=MINI.HTML;\n$(document).on('button', 'click', function() {\n    $('#console').add(HTML(\"Click\"));\n});\n$('#myDiv').add(HTML(\"Button2\"));\n```\nThe click event works with Button1 but not with Button2.\nTo see that I create fiddle http://jsfiddle.net/Mpj7F/\nI hope it will help you ;)\n. OK\nSorry for that, it's working now.\nThanks =)\n. ",
    "btakita": "+1\n. ",
    "instanceofme": "Thanks\n. ",
    "mike-engel": "Cool thanks. Sorry for the mixup, I was pretty tired when I wrote this issue. I'll start using the Non-IE build for my project.\n. ",
    "letmaik": "I had the same problem, I tried to use toggle() but what I actually wanted was set(), it's a bit confusing.\n. Can you release a new version with this fix? It is impossible to use minified from within npm.\n. There is no \".error()\" method in the ES6 promises (but .catch()), and \nthe callbacks also just accept a single argument.\n. Sorry I removed my second comment from this issue earlier since it wasn't actually related. Please have a look again.\n. That works, thanks!\n. With clone() I cannot use templating. I thought that since HTML accepts <script> it might accept other things as well, but I guess it only works for script since that's just regarded as text. With <template> you would have to convert it from DOM nodes to text, do templating, and convert it to nodes again. Maybe not the best thing to do.\n. You said in the other ticket \"$(selector, context) searches through the descendants of the context nodes, not the nodes themselved. You can use .select() to search through the nodes themselves: HTML('<a href=\"#\"></a>').select('a')\". I tried select() but it doesn't work either. The docs say list.select(selector, childrenOnly) is equivalent to $(selector, list, childrenOnly).\nI found how to do it in jquery: $(el).filter('a'). minified's filter() doesn't accept css selectors. Wouldn't it be nice if it could accept the same restricted selectors that $() already supports? Otherwise, I probably would have to do something like $(el).filter(function(node) { return node.tagName === 'a' }) which is pretty verbose.\n. ",
    "papirosko": "my usecase:\njavascript\nvar ul = $(EE(\"ul\", { ... }));\nfor (var i = 0; i < items.length; i++) {\n   var li = $(EE(\"ul\", { ... }));\n   li.add(EE(\"span\", {\"@title\": \"artist\"} ));\n   li.add(EE(\"span\", {\"@title\": \"track\"} ));\n   if (condition) {\n      li.on(\"click\", function() {} );      \n   }\n   ul.add(li);\n}\nthis is JQuery style of creating compound layouts with conditional logic and monad style programming\n. I think it's too complicated - remembering all this function names ant parameters.\nThe cool feature of jquery is\n1. easy list construction with one expression for all cases: $(), which results in\n2. you get feature-rich list and do not think of nulls etc\nthe thing that you omit nulls and flatten lists is correct. The only reason I prefer lists is that I just want to iterate through it with syntax sugar constructions (.each) without null-checkings.\nBTW var ul = $(EE(\"ul\", { ... })); in your 1st example wont work (see topic title).\nYou have 2 contradictory forms of usage. Using list constructor you have to invoke EE:\n$( EE(\"...\")() )\nbut using add you don't have to\n```\n$( \".selector\" ).add( EE(\"...\") )\nThink of replacing the EE(\"span\") operator with $(\"\"), you can track this by '<' as first character. \n```\n. var oldOnload = s.onload; \ns.onload=function() {\n   triggerDomReady(); \n   if (oldOnload) oldOnload();\n}\n. ",
    "Alfinch": "That solved the problem, thanks.\n. ",
    "godDLL": "I do not know why, but this breaks $.ready() for me in Chrome 32.0.1700.102\n. Your test works, so I suppose I should open a separate issue.\nI got the version that gives me trouble from http://minifiedjs.com/download/minified-legacyie.js\nMy machine is a Mac Mini running latest OS.\n. I might have spoken too soon, this behaviour can be from the interaction with other libraries I have in the project. I was pretty sure Minified is to blame, because when I changed to non-legacy-supporting build it was gone.\nAnd I'd have to reduce the code considerably first. Will update when I have a proper test case for you.\nThanks for responding so quickly, that's impressive commitment to your baby.\n. Just to confirm, the issue was of my own making -- something I won't get into except to say that a combination of an older version of Curl.js with some optimizer/Uglify related mischief has gotten me thinking it was in Minified. Sorry to have wasted your time, I don't usually end up doing that. :/\n. Glad to be of use! If you please could take a look at the linked jsdelivr PR you'll find some suggestions from integration guys, in addition to the Unicode issue.\n. ",
    "electric-al": "Awesome work!\n. ",
    "garata": "Well, lurking throught your minified-web-full-src.js source code I've extracted a chunk that catches my interest.\nif (/^u/.test(typeof define)) { // no AMD support available ? define a minimal version\n        var def = {};\n        this['define'] = function(name, f) {def[name] = f();};\n        this['require'] = function(name) { return def[name]; }; \n}\nIf your intent is to save a few bytes without sacrificing the library correctness, my purposed solution could be conceptualized and written as follow:\nvar \u0192 = {};\n!(delete define) || (define = function(name, f) {\u0192[name] = f();});\n!(delete require) || (require = function(name) { return \u0192[name]; });\nIf you use var the variable are declared within the scope you are in (e.g. of the function). Whenevere require.js script is loaded before minified.js, you variables define and require are intialized as expected, because of the or operator. Otherwise they become truly global variables pointing to your minimal AMD implementation. Remember that if you use var to define a scoped variable, the variable cannot be deleted thus delete attempt returns false. This happen also when define is a local function.\nPlease note that I've omitted the \"this.\" from both define and require initializations. The reason is, If you don't use var, the variables bubbles up through the layers of scope until they encounters a variable by the given name or the global object (window, if you are doing it in the browser), where they then attach. Is this your intended behavior? Are you assuming that \"this\" is equal to window object for example when minified.js runs in a browser?\nThank you very much for your comments.\nBest regards, Giorgio Arata.\n. Hallo Tim, thank you for your feedback about the Google Closure restrictions you have to deal with.\nOk, after digging a bit and coming up with various unsatisfying solutions I conceived a JS closure based approach.\n!(delete define) || !function($, _){$['define'] = function (name, f) { _[name] = f(); }; $['require'] = function(name) { return _[name]; };}(this, {});\nAs you can easily notice, in this code snippet a closure around the def object is added and a single or operator is used to check if define is resolvable or not. That is just what you need, because as we said define may be declare as local function too, but this is not necessarily true for require function. For example in a node.js require is build-in and a delete require; instruction has the nasty effect to wipe out a core functionality.\nSo, I cannot speak about the optimizibility with Google Compiler of this chunk of code. Maybe the end result is quiet similar to the actual minified.js size. Anyhow, I believe this is not the main point here, since if you trust on Google Compiler for randomness applied to global var names such as def, it may occur that accidentally your library \"shield\" another variable named the same way declared at top level. Simply it's not safe to do any assumption in this case, you cannot force minified.js users to read its compressed source code.\nI'd like to hear from you on this topic.\nBest regards, Giorgio Arata.\n. ",
    "jakwings": "OK, I get it. Thanks for your recommendation. sparkplug.js seems very practical and tiny. :)\n. ",
    "sw": "I should add that Japan for example groups digits into ten-thousands (4 digits), but this already seems to be working. Thanks for your effort!\n. Example file:\nhttp://stephan.walter.name/files/minified-example.html\nThis is supposed to be an accordion effect. Clicking on the red [label] elements should slide out the green [div]s completely\n. ",
    "igorsantos07": "I thought about $$('select') but that's not an option since I'm using on('change', func) and using this directly inside it :)\nBesides that, yeah, you got me, I was stupid thinking about using \"@value\" hahahaha\nAnd I didn't know about values! Got no use for it now but will keep a note about it, thanks (:\nBtw, I love when OS maintainers are responsive and friendly, you got some points here (:\n. Btw 2, should onChange() (again, me and onChange haha) work with selects? Because it's not...\n. Hmmmmm gonna use those.\nHowever I think it would be cool if those where named the same way they're found elsewhere (be it jQuery or DOM attributes) (:\n. PS: I was wondering if the usage of onChange was eating up the focus event, but even after removing it the behaviour was still the same as above. Updating to the last version of minified from the dist folder in this repository doesn't change either.\n. Good question, I'll try to test it later.\nToo bad, so there's no way to implement focus events on elements created on\nthe fly other than manually attaching the events upon creation?\nOn May 3, 2014 3:32 AM, \"Tim Jansen\" notifications@github.com wrote:\n\nThis is a limitation of the DOM event model: focus and blur don't bubble.\nhttp://www.quirksmode.org/dom/events/blurfocus.html\nDoes it work in jQuery? I have no idea how to implement a work-around for\nthis.\nTim\nOn May 3, 2014 2:27 AM, \"Igor Santos\" notifications@github.com wrote:\n\nPS: I was wondering if the usage of onChange was eating up the focus\nevent, but even after removing it the behaviour was still the same as\nabove. Updating to the last version of minified from the dist folder in\nthis repository doesn't change either.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/timjansen/minified.js/issues/41#issuecomment-42091213>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/timjansen/minified.js/issues/41#issuecomment-42097792\n.\n. \n",
    "paulosborne": "Looks like the AMD format is preventing it working with Browserify, replacing define with  module.exports seems to resolve the issue. I'm currently looking at deamdify as a possible solution.\n. ",
    "jtomaszewski": "@paulosborne , did you manage to include minified.js somehow with browserify ?\n. ",
    "thetutlage": "Yes it works by tweaking minfied-web-src.js and package.json file\nIn minfied-web-src.js replace \njavascript\ndefine('minified', function() {\nwith\nmodule.exports = (function () {\nand at the end\njavascript\n});\nwith\njavascript\n})();\nAlso inside package.json file you need to reference minfied-web-src.js file as the main file \n. ",
    "gino1234": "Great.. that fixed it for me...\n. ",
    "jasontconnell": "We found out how to fix it with the |click (pipe click)\nhttp://jsfiddle.net/mWLUV/12/\n. ",
    "trinione": "\n\nThe example I gave only returns the first name 'pt-page' .\n. Tim:\nNope, that does not work.\nalert($(\"#theList\").value);\n\nNOTE: I need to retrieve the 'data-attribute', not a 'value'. The following works for a 'value'\n        alert($$(\"#pastPupilsList\").value);\n\nWhen the code is:\n\n```\n\nJohn\nSteve\nRebecca\n\n```\n\nHOWEVER, I need the 'data' value for 'data-idno'.\n\n```\n\nJohn\nSteve\nRebecca\n\n```\n. Is this code correct? Cause it is not working.\n\n```\n        var list = $('#theList').filter(function(el) {\n            return el.selected; })  \n\n        alert($(list).get('%idno'));\n```\n. Great! That works. \n\nI had tried it with the 'option' word added, but I had a typo in my code (forgot one character in the field name!).\n\nThank you for the prompt assistance.\n\nIDEA/Suggestion: Would a Message boad/Forum be better on the Minifiedjs.com website that would allow users to Search and possibly find solutions easier?\n. Thanks. It did work. I just had a typo on the actual page I was working on.\n. Wow! Thanks!  Trust that I spend hours trying (and 'learning') before I post a question.\n\nHere is what works for anyone who may stumble upon this thread.\n\n```\n    $('.scroll-container').each(function(item, index){\n        new Swiper(item, {\n            mode:'vertical',\n            scrollContainer: true,\n            mousewheelControl: true,\n            scrollbar: {\n                container: $(item).select('.swiper-scrollbar')[0]\n            }\n        })\n    })\n```\n. Let me just say that the reasons I use MinigiedJS is that it delivers on\nthe size inferred by its name. The documentation.  It is top notch.\nComprehensive with examples of use on many if not most things.\n\nThe list of changes on Nia is long and interesting.\n\nIs Nia at  stage I should consider it I stead of Minified.\n\nTruth be told,  Minified offers all I need.  Size.  Documentation. Simple\nto use website.\nOn Nov 20, 2015 7:02 PM, \"Tim Jansen\" notifications@github.com wrote:\n\n> I am still updating Minified.js as needed. So I am fixing bugs, and if\n> there's something important missing in Minified, I will add it. It didn't\n> plan to do that, but as Nia is not done and there are people using\n> Minified, I decided to continue making releases.\n> \n> Not sure whether you should use it in your project. After all, it's a niche\n> library with relatively few users. I would use it only for personal\n> projects. There's nothing worse than maintaining a site that's based on an\n> abandoned framework.\n> \n> Regarding Nia: in the last year I didn't have as much time and energy for\n> working on it as I had hoped. Hopefully this will improve in a few weeks,\n> after I moved to a new place, but I really don't want to promise anything.\n> Nia is actually pretty far, but a crucial component (the MVC module) is\n> missing. I can't make any predictions if/when it will be finished.\n> \n> I have given up on backward compatibility with Minified though, which is\n> another reason for keeping Minfied alive. Nia's still very similar and you\n> would feel comfortable when you know Minified, but there is a long list of\n> incompatibilities (https://github.com/niajs/nia/blob/master/CHANGES.md).\n> \n> Tim\n> \n> On Fri, Nov 20, 2015 at 12:57 AM, trinione notifications@github.com\n> wrote:\n> \n> > Hi:\n> > I really like Minified, however last year I say an announcement that it\n> > would be replaced with another library you were working on called Nia. As\n> > such, I stopped working on Minified as it seemed to be a soon to be\n> > retired\n> > project.\n> > \n> > Recently I came upon the Minified project and saw version 1.1 has\n> > recently\n> > been released. Yay! I check on the Nia project and it is still not\n> > released.\n> > \n> > I am confused. Should I develop with Minified as it is a project that\n> > will\n> > be around, or should I not.\n> > \n> > Minified, IMO, has a lot to offer and is quite powerful. The\n> > documentation\n> > is remarkable for projects of this kind and I believe it can develop a\n> > solid fo\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/timjansen/minified.js/issues/69.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/timjansen/minified.js/issues/69#issuecomment-158551784\n> .\n. Tim:\nWhat about just renaming Minified to Nia?\n\nMinified is a fantastic offering,  but it's potential has been stymied with\nthe prospect of Nia.\n\nIt is understandable that you cannot get Nia done. It's a heck of an\neffort. I vote for.renaming to Nia and moving it along.\n\nJust a suggestion.\n\nOn Aug 24, 2016 7:03 PM, \"Tim Jansen\" notifications@github.com wrote:\n\n> There is no real mechanism to create UI widgets in Minified. That's pretty\n> much out of scope. The only thing Minified may help you with is\n> modularizing using AMD modules.\n> \n> Sorry, but there is almost no progress in Nia. Currently I just don't have\n> the time to work on it. IF it should ever really be released (and that's a\n> big IF), it will be ES6 only. I am, very very slowly, in the progress of\n> switching the whole code base to ES6. There's just no sense in writing for\n> ES5, given that it won't be ready in a long time.\n> \n> Tim\n> \n> On Tue, Aug 23, 2016 at 5:40 AM, Jhony Alberto Grillet Medina <\n> notifications@github.com> wrote:\n> \n> > Hello Tim. Greetings from Venezuela!\n> > Since I didn't hear about Minified.js a long time ago, I have to ask.\n> > Can I go further and make UI widgets (like jQueryUI but Minified-only\n> > compatible)? Or shall I must wait for Nia to do this?\n> > I'm really interested in help on the Minified.js documentation\n> > translating\n> > (in spanish) and code the \"MiniUI\" (a temptative name for the project)\n> > Hope your things are getting well...\n> > Cheers and keep the good work!\n> > Jhony Grillet.\n> > \n> > \u2014\n> > You are receiving this because you were mentioned.\n> > Reply to this email directly, view it on GitHub\n> >  > issuecomment-241618178>,\n> > or mute the thread\n> >  > AA1SBhgorm3MflGL6FH0My3sIzhUF16Oks5qimuigaJpZM4GmAyS>\n> > .\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/timjansen/minified.js/issues/69#issuecomment-242235214,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AD0OLW6uhRPvOBiN0Ocgmm26FKvjByxDks5qjM2ogaJpZM4GmAyS\n> .\n.",
    "aldendaniels": "@timjansen - Cool, great to hear. Thanks!\n. ",
    "sergeyksv": "@timjansen Thanks for your reply. Meanwhile my compliments for your hard work with this library, library itself and docs are awesome. I believe it has kind of limited use areas just because size doesn't matter so much for majority of web apps. However for some use cases its hard to underestimate its benefits (balance between size and functionality). From that aspect I believe it is good that it has its own API, its not only small itself but allows to write smaller code around it.\n. I read about \"minified reboot\" that you announce. Honestly I believe there is a place for library how it is exist now, extremely small with precisely balanced functionality. So don't be surprised if community will choose 1.0 (current one) vs nextget :). However if you keep its core small enough keeping the rest in optional modules then who knows :). Honestly 50% of jQuery scares me :)\n. ",
    "lefedor": "Hello, if it's will be deprecated, I'll better change my code, thanks for the hint.\nI've needed it because of I'm changing old code to work with minified.\n. ",
    "Namek": "Is that try/catch necessary? Can I fork the project and just remove it? Tracking errors is really hard and time consuming because of this. And, during development, some errors are not found straightaway which increases \"bugfix\" commits.\n. Is it really compliant to swallow error when there is no error handler?\n. To me, efficient work and software stability is much more important than smallness of the library.\nI didn't have much time to look too deply into the code (BTW building system is bit weird) but what I would suggest is a logic like:\nif hasErrorHandler then\n    try { operation() } catch err { errorHandler(err) }\nelse\n  operation();\nDo you think that's possible?\n. Thanks! I just tried that and it works. Unfortunately, original stacktrace is lost.\n. ",
    "bedrin": "Yeah, I wanted to make a pull request but also didn't find a good way to solve it.\nAs a workaround I have added following javascript before embedding (basically copy-pasteing) Minified to my code:\n``` javascript\n;(function(){\n    var defs = {};\nfunction require(name) {\n    return defs[name];\n}\n\nfunction define(name, f) {\n    defs[name] = defs[name] || f(require);\n}\n\n//@@include('../bower_components/minified/dist/minified.js')\n\n// my code which is using minified\n\n}.apply({}));\n```\nWith this code in front of Minified, it doesn't spoil the global (window) context.\nProbably you can think of changing the Minified so it would define 'require' and 'define' functions not in global scope but rather in local scope, so it would be manageable by end users\n. ",
    "grobmeier": "Thanks @timjansen !\nWorkaround posted here: http://www.grobmeier.de/manipulating-css-classes-svg-12102015.html\n. I am very sorry, please ignore this issue.\nThe problem was Jekyll which I use. It uses Liquid, which also uses {{}} for templating things. This brought up a conflict with the MinifiedJS templating features.\nIncluding minified with enclosing raw tags solved the issue for me:\n// Using gulp and gulp-insert\n.pipe(insert.wrap('{% raw %}', '{% endraw %}'))\n. ",
    "friksa": "Not trying to add noise here, but I just discovered MinifiedJs and I love it.  I cannot believe that I never heard of it before.  It is perfect for certain projects and a very important tool in my tool belt.  Thanks so much for maintaining it!!\n. ",
    "mariussmit": "If I may chip in as well; I've been using Minified for the past few years in all development from business websites to PhoneGap apps and I absolutely love it. It not only packs quite a punch with features you have to download in other libs if you're using JQuery, but those features are just easier and often better than the others.\nNotable stuff for me:\n- get/set calls that handle everything\n- Templating (IMO better than Handlebars)\n- .formatValue with choice formatting. Brilliant.\n- .date funcs with _.parseDate. No more MomentJS.\nI've extended MINI.M.prototype with a couple of helper functions I use a lot like .html, .val, .data, .prev and .up.\nI think everyone using Minified wishes that it would become more popular so that it can stay alive for years to come.\nThanks for all you effort so far @timjansen \n. ",
    "ChinuxParibus": "Hello Tim. Greetings from Venezuela!\nSince I didn't hear about Minified.js a long time ago, I have to ask.\nCan I go further and make UI widgets (like jQueryUI but Minified-only compatible)? Or shall I must wait for Nia to do this?\nI'm really interested in help on the Minified.js documentation translating (in spanish) and code the \"MiniUI\" (a temptative name for the project)\nHope your things are getting well...\nCheers and keep the good work!\nJhony Grillet.\n. ",
    "tazziedave": "Ok, I see that float was a keyword form ECMAScript 2 until ECMAScript 5 - see https://mathiasbynens.be/notes/reserved-keywords so I understand it may need special handling.\nI'm using Google Chrome Version 48.0.2564.116 m (the latest) with a localhost WAMPSERVER setup.\nThe code I'm using is:\nli.set({$overflow: \"hidden\", $float: (options.vertical ? \"none\" : \"left\")});\nWhat's happening is that overflow style is being added to the HTML element on the page but the float style isn't is: i.e. no \"float : left\", instead the M HTMLelements are each getting an additional attibute: cssFloat : \"left\" as shown below,\nclientWidth: 548\ncontentEditable: \"inherit\"\ncssFloat: \"left\"\ndataset: DOMStringMap\ndir: \"\"\nIt's also happening with the latest versions of Firefox, Opera and IE.\nTo get it to work I've made the following change:\nin the set function\nfrom\n   var match = /^(\\W*)(.*)/.exec(replace(replace(name, /^\\$float$/, 'cssFloat'), /^%/,'@data-'));\nto\n   var match = /^(\\W*)(.*)/.exec(replace(name, /^%/,'@data-'));\nI'll be uploading to an Apache webserver today, so I'll let you know if anything changes\n. Tried it on remote host, no change.\nDave\n. ",
    "RomeroMsk": "For me .set('$float', anything) does not work too.\nBut .set('$cssFloat', anything) works.\n. ",
    "pwFoo": "Have you tested https://rawgit.com/?\nPaste a github url like\nhttps://github.com/timjansen/minified.js/blob/master/dist/minified-web.js\nAnd get a CDN URL.\nhttps://cdn.rawgit.com/timjansen/minified.js/c19fda25/dist/minified-web.js. ",
    "DanielRuf": "Or use unpkg. "
}