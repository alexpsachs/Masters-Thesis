{
    "everzet": "fixed in develop. will be in next release!\n. merged in develop branch, thanks!\nwill be in next release!\n. There will be no fatal error. You can use any method name call on $steps as you want. It's because Behat doesn't matter what keyword you use for a step and it doesn't differentiate them anyway, but you should!\nhttps://github.com/Behat/Behat/blob/master/src/Behat/Behat/Definition/Loader/PhpFileLoader.php#L73\n. merged ;-)\n. I can be stupid sometimes on fridays :-) That's really the only needed change for new extension to work:\nhttps://github.com/Behat/Behat/commit/7753bbfa5d9a33199e499e2ea9c23fa482a00887#L3L24\nAnd Console component update:\nhttps://github.com/Behat/Behat/commit/3dacb750790cf99ce5354f541896f01898dd60a0\n. Merged. Thanks! Will be in next big release (1.1) this week. Big things coming!\n. Merged. Will be in next release (1.1) this week\n. Will look into today ;-)\n. Fixed with bd5b95779d672c04a8a8f6533e76e8bdeefe8ac4. Will be in 1.1 release later this weekend. Thanks for using Behat and finding/describing bugs ;-)\n. Merged with 5de933e3d0b12177882591efba08b39103e9702c and tuned with 3dd8ac4dc860e8b4cc7e854a8332ba51144f4b0a, 9ba7fada1b8fd79127119b0bf58ae76682069074.\nAlso, HtmlFormatter now fixed too with d9fa595492bc36c122454a6803bcbae98f411f3c.\nThank you for great investigation and patch! Fixes will be in 1.1 release on monday ;-)\n. feb63a0c5a8ed89646f88ed4be02c95b98914cf1 Thanks agan ;-)\n. Check your pear configuration. Checked on Linux, Mac and Windows just now - all works fine.\nTry:\npear channel-update pear.behat.org\n. As i've expected ;-) No problem!\n. FIxed with 143f52bf7ee861effb14d41fac3a894e351293ee. Will be in next minor release (today or tommorow). Thanks ;-)\n. I like to keep it as a notice that Environment is simple variable holder for people, not basic object with closed API :-)\n. I've removed them cuz i don't want them to be so verbose. They are self-explanatory right now and i like it.\n. Merged. Thanks bro for your great work!!!\n. merged!\n. Yes. It's already have -p shortcut in develop branch and will be in next minor release ;-)\n. Not exactly. I will add additional data collector, which will record every failed featurePath:scenarioLine into user home directory. And on --rerun Behat will run only features from this file.\nWorking on it.\n. Implemented in develop branch. Try it with:\nbin/behat.php --rerun ~/.behat_rerun\nIn this case, Behat will store all failed scenarios paths in ~/.behat_rerun file OR will use it as scenarios source, if it's already not empty.\nSo, basic usecase is:\nbin/behat.php --rerun ~/.behat_rerun\nruns all features in current workdir. If you have failed scenarios and you run again:\nbin/behat.php --rerun ~/.behat_rerun\nthen Behat will run only failed scenarios from previous run.\nYou fix scenarios and run again:\nbin/behat.php --rerun ~/.behat_rerun\nIt shows previously failed scenarios as green. And when you run it again:\nbin/behat.php --rerun ~/.behat_rerun\nIt will run all scenarios in current workdir again. And so on...\n. How you defining it?\n. You mean features/support/hooks.php, not support/hooks.php, right?\nBehat has complete test suite, which covers almost all core features, including hooks (suite particulary). Now, both current master and current develop branches of Behat pass all inner features, including this one: https://github.com/Behat/Behat/blob/master/features/hooks.feature, so the problem is definetly on your side.\n. Either:\n1. Mink library is not in your $PATH\n2. You did something wrong\nCheck $PATH first\n. 1. Double-check your $PATH\n2. Check, that you installed both behat & mink from pear.behat.org\n3. Post your feature suite files content here (behat.yml, features/support/bootstrap.php and others)\n4. What's your operating system\n. Glad to know ;-) No problem. Ask if you have any question in official google group: https://groups.google.com/forum/#!forum/behat\n. Version 1.1.2 released with bugfix: https://github.com/Behat/Behat/blob/master/CHANGES.md#readme\nYou can update through PEAR or submodule pull ;-)\n. Yes, you're right. Features should be used as base path in formatters. If your steps folder located not under features path, then there's no way to trim paths in formatter correctly and steps paths will be not trimmed. That's correct behavior.\n. Try develop branch with your configuration. And if all works fine - i'll push new fixed version on PEAR this evening ;-)\n. Or maybe we should show paths relative to the current working directory???\n. Try latest develop branch. Behat now uses current workdir path to trim commented paths in formatters. It's more logical behavior, i think.\n. It's not about being pretty. It's about being useful. If we use CWD as formatters base path - users are ablle to copy file paths right from the comments and use them in fav editor like that:\nvim COPYIED_FROM_COMMENT_PATH\n. Please, next time send PR's against develop branch. develop branch is for development. master is for staging only. Thanks ;-)\n. Oh, yes. Sorry. Bad me! Thanks then ;-)\n. Merged into develop. Will be in next release later today.\nNext time, please send PR against develop branch. master is for staging. Development happens in develop branch ;-)\n. Released 1.1.4 with fix ;-) You can update through pear.behat.org!\n. Cool. Thanks for great work and PR's. And keep them coming ;-)\n. That's strange!\n``` bash\neverzet@evermac: ~/Devel/github/php/Behat/Behat\n\u26a1 behat --version\nBehat version 1.1.4\neverzet@evermac: ~/Devel/github/php/Behat/Behat\n\u26a1 behat features/result_types.feature        \n..................................\n6 scenarios (6 passed)\n34 steps (34 passed)\n0m2.244s\neverzet@evermac: ~/Devel/github/php/Behat/Behat\n\u26a1 behat features/result_types.feature:193        \n.....\n1 scenario (1 passed)\n5 steps (5 passed)\n0m0.436s\n. Show me your `behat.yml` if you have one.\n. Ok. Cool. you've found a bug!\nSomething changing path in your configuration.\n. Does it helped?\n. bash\n\u26a1 behat -V\nBehat version 1.1.4\n\u26a1 behat features/search.feature:6\nFeature: Search\n  In order to see a word definition\n  As a website user\n  I need to be able to search for a word\nScenario: Searching for a page that does exist               # features/search.feature:6\n    Given I am on /wiki/Main_Page                              # /opt/local/lib/php/mink/src/Behat/Mink/Integration/steps/mink_steps.php:15\n    When I fill in \"search\" with \"Behavior Driven Development\" # /opt/local/lib/php/mink/src/Behat/Mink/Integration/steps/mink_steps.php:31\n    And I press \"searchButton\"                                 # /opt/local/lib/php/mink/src/Behat/Mink/Integration/steps/mink_steps.php:23\n    Then I should see \"agile software development\"             # /opt/local/lib/php/mink/src/Behat/Mink/Integration/steps/mink_steps.php:62\n1 scenario (1 passed)\n4 steps (4 passed)\n0m5.436s\n\u26a1 ~/Devel/github/php/Behat/Behat/bin/behat.php -V\nBehat version DEV\n\u26a1 ~/Devel/github/php/Behat/Behat/bin/behat.php features/search.feature:6\nFeature: Search\n  In order to see a word definition\n  As a website user\n  I need to be able to search for a word\nScenario: Searching for a page that does exist               # features/search.feature:6\n    Given I am on /wiki/Main_Page                              # /opt/local/lib/php/mink/src/Behat/Mink/Integration/steps/mink_steps.php:15\n    When I fill in \"search\" with \"Behavior Driven Development\" # /opt/local/lib/php/mink/src/Behat/Mink/Integration/steps/mink_steps.php:31\n    And I press \"searchButton\"                                 # /opt/local/lib/php/mink/src/Behat/Mink/Integration/steps/mink_steps.php:23\n    Then I should see \"agile software development\"             # /opt/local/lib/php/mink/src/Behat/Mink/Integration/steps/mink_steps.php:62\n1 scenario (1 passed)\n4 steps (4 passed)\n0m5.025s\n``\n. Use patched version fromdevelopbranch instead of1.1.4. I've didn't updated pear versions yet!\n. Thanks @mmoreramerino. I'm closing this...\n. 1. Use latestDEVversion of Behat fromdevelop` branch instead of pear version\n2. Try to debug by yourself\nCuz for me both old and new (DEV) versions work as expected in all of your usecases.\n. It's happened from last Symfony2 update. I'll fix it later today!\n. Fixed with ebf134f57a08f2028bc4b58f3b69e012e107b7a7\n. I've fixed it little bit different with ebf134f57a08f2028bc4b58f3b69e012e107b7a7.\nI've used array_combine to not double-write every event name (cuz event names exactly matches listener methods). In your fix possibility of entering wrong event name in subscriber routine is 2x ;-)\n. Thanks. But next time - send PR against develop branch, so i would be able to merge it ;-)\n. All development happens inside develop branch. And if you've looked at it before creating this PR, you might notice this commit:\nhttps://github.com/Behat/Behat/commit/bd22eb2ce47a7a7afef907a7d35c70dab16692b6\nAnd i don't like your fix, cuz it could make some nastiest conflicts with some ugly libraries, which set error_reporting() inside their core explicitly. In your case, they will lower or higher the Behat's error_reporting level implicitly, which is very-very-very bad behavior. And what's even worse, in your case, same test suites in different environments will throw different set of errors (based on local php.ini configs).\nMy fix does not have such problems, as it introduces new Behat-level error_reporting constant, which will allways stay the same. Fix will come with v2.0 release next week ;-)\n. @thefringeninja don't worry. v2 will be fully backward-compatible and will support both sintaxes: http://everzet.com/post/6719826499/behat-v2-announce ;-)\n. Please, resend this PR against develop branch and i'll merge it with pleasure!\n. @schmittjoh the interesting part about that is Behat doesn't and shouldn't have assertion lib bundled with it. The cool part is that you can use whatever assertion tool you like. One requirement though is that assertions should throw exceptions :-)\nMy choice is PHPUnit assertions :-) And yes, you can use them very nicely with Behat. For example take a look at Behat feature suite:\nhttps://github.com/Behat/Behat/blob/master/features/bootstrap/FeatureContext.php\nhttps://github.com/Behat/Behat/blob/master/features/bootstrap/FeatureContext.php#L8\nhttps://github.com/Behat/Behat/blob/master/features/bootstrap/FeatureContext.php#L138\n;-)\n. Added: https://github.com/Behat/Behat-docs/commit/926fa8babf0af4878131b99977f8652443f5eb04.\nhttp://docs.behat.org/ updated accordingly ;-)\n. The point is - Mink is session oriented. One session is in relation with driver and, as consequense, with browser 1-to-1. So, you really need to just create a new sessions with different browser configurations. To do this, override registerMinkSessions($mink) method in your FeatureContext:\nhttps://github.com/Behat/BehatBundle/blob/master/Context/MinkContext.php#L88\nand create as many sessions in Mink as you need (example here).\nAfter that, you'll be able to switch to interesting session with:\ngherkin\n@mink:SESSION_NAME\nScenario: ...\n  ...\nFor example:\n``` php\n<?php # .../FeatureContext.php\n...\nprotected function registerSessions(Mink $mink)\n{\n    parent::registerSessions($mink);\n$mink->registerSession('chrome',   new Session(\n    $this->initSahiDriver('chrome', $this->getParameter('sahi'))\n));\n\n}\n...\n```\ngherkin\n@mink:chrome\nScenario: JS scenario to be runned inside chrome browser\n  ...\nBy the way, this:\ngherkin\n@mink:sahi\nScenario: ...\n  ...\nwill do exactly the same as this:\ngherkin\n@javascript\nScenario: ...\n  ...\n;-)\n. Nope. Default scenario steps always run against single default Mink session. And with this @javascript or @mink:... you're just switching this system-wide default session to some specific one (by the way, after each scenario, Mink will switch back to system-wide default).\nSo, your @mink:firefox @mink:chrome will make this scenario to run in chrome (last one).\nThis @... stuff is just grouping and filtering mechanism. Tags doesn't control testers flow.\n. Yeah, i've got ya. You can do it quite easily with Scenario Outlines for example:\n``` gherkin\nScenario Outline: Scenario to be runned against different browsers\n  Given I use \"\" browser\n  ...\nExamples:\n    | browser |\n    | firefox |\n    | chrome  |\n```\nThe only thing left is to implement Given I use \"([^\"]+)\" browser step, which will switch the session.\n. This problem is solved properly with Behat Profiles. With profiles, you can provide system-wide configuration with filters like this:\nyaml\nfirefox:\n    filters:\n        tags: '@javascript&&~@chrome'\n    context:\n        parameters: { browser: firefox }\nchrome:\n    filters:\n        tags: '@javascript&&@chrome'\n    context:\n        parameters: { browser: chrome }\nWith such configuration:\n$ behat -p firefox\nwill run all scenarios with tag @javascript, but without @chrome tag.\n$ behat -p chrome\nwill run all scenarios with both @javascript and @chrome tags.\nSo, calling two this commands:\n$ behat -p firefox\n$ behat -p chrome\nWill run scenarios in both browsers, providing useful output.\nThe problem is, there's no profiles in BehatBundle. Maybe we should add them... What do you think?\n. Please, remove modifications of .gitignore and .DS_Store file and resend PR against develop branch instead of master and i'll merge it.\n. Nice. Will be in next release ;-)\n. Keywords in definition printer can't be translated, cuz for Behat Given|When|Then|And are all the same. Some languages could have 5 variants and some 10. It doesn't matter for Behat really, but it should be matter for you and if we'll provide wrong variants to you it would be even worse, than english ones.\nAnyway, think about it as about technical info. You're not seeing step text - it's regex instead. So it's not keyword that should be translated - it's just a default step type ;-)\n. Behat is not a testing tool (mainly), it's design tool. Taking this into account, adding this feature will not add some real value to tool, it will just give option that nobody will use. Isolation is important for functional tests and behavior descriptions too, but it's not the main target of features - main target is correct application behavior (design).\nAnd for unit-tests use PHPUnit ;-)\n. No it should not. The language, that you specify in behat.yml or with parameter is the language of Behat formatter (output generator) - that's why it's placed under formatter section of configs. This option doesn't affect Gherkin parser.\nFeatures are explicit pieces of information, that could and should be used separately from Behat in many cases. Keeping this in mind, hiding some important information (like language) from them in Behat configs is the true crime!\nAlso, single project could have features in multiple languages ;-) And english is used by default.\n. https://github.com/Behat/Behat-docs/commit/c1f76bfd2e052b57a494ea1b7b2fd7db982da9d6\n. Why do you need this??? FeatureContext just defines a hooks and step definitions. That's all! Why do you want multiple copies of same steps in your suite? It doesn't makes sense to me. It's impossible by couple of reasons and most important one is that Behat will not be able to resolve what definition to use, when he'll have multiple contexts with exact same step definitions (inheritance). Another reason is that every FeatureContext defines loadable hooks and Behat can have multiple - multiple contexts will load multiple hooks at a time.\nFeatureContext is just a code representation of your features - step definitions and hooks. And i don't see why you might need multiple classes, that'll provide same information (even if we forgot, that Behat not able do handle them anyway).\nTo use main context steps - use context aliases:\n$this->getMainContext()->visit(...);\n. Kris, i'm using git-flow for both Behat and Mink. The development branch is develop. Can you \"repull this request\"? :-)\n. I don't like this PR. And have two reasons for that:\n1. paths provide very useful information for steps, so this info should be turned on by default\n2. with this code:\n$formatter->setParameter('paths', $input->getOption('paths'));\nyou will not be able to set this parameter through behat.yml, as it'll always be overridden by input option either it exists or not.\n. @henrikbjorn @stloyd because it'll break things up as @stof explained.\n@stof it won't work either. Because other libraries (symfony) doesn't have such checks. And depending on what is required first - you will or will not get the fatal error. Adding such check everywhere will not solve problem either, cuz different libs could rely on different versions of autoloaders (different submodule checkouts) - this will lead to even more frustrating errors like \"Symfony\\Component\\ClassLoader\\Autoload.php doesn't have ... method\", which IS depending from where you're requiring it.\n@henrikbjorn @stloyd @stof the main point behind Behat\\Behat\\ClassLoader\\... is that Behat should work with any codebase out there without the need to frustrate the user during setup process. If you'll find a better way to solve problems, explained here - i'll be happy! Cuz i can't ;-)\n. Implemented snippets formatter:\nbehat -f snippets --dry-run\nwill only show snippets even without executing steps or hooks.\nThere's also --append-snippets option, which will force Behat to append snippets to the main context (automagically):\nbehat --append-snippets\nThose changes are already implemented+tested in develop branch. Behat 2.2.0 will come with them out of the box.\n. There's -v option, which when passed shows up extended Exception message to you. For most exceptions it means \"stack trace\" ;-)\n. U r doing something crazy :-) Explain how you installed behat and how you use it (what command you call from where).\n. First, Behat doesn't gets step definitions from space :-) In order for him to read them, you should show him where to search.\nBy default, your descriptions live in Context class: http://docs.behat.org/guides/4.context.html. So in order to define and list them, you should create that class first. The shortest way to do this is with behat --init: http://docs.behat.org/quick_intro.html#basic-usage.\nWhen you call behat without arguments, it assumes, that you have features folder (which contains your features AND context) inside the current working directory, which in your case is not.\nNext, BehatBundle comes with it's own behat runner, which you should use instead of behat: app/console behat. How to use it you should read here: http://docs.behat.org/bundle/index.html#prepare-your-bundle-for-behat\nTo see the list of Mink steps as in article on our blog, you should follow the steps in this manual: http://docs.behat.org/cookbook/behat_and_mink.html. Or in this, in case you want to use BehatBundle: http://docs.behat.org/bundle/index.html#mink-integration-minkcontext\nAnd i think it would be better if you could just read the documentation more carefuly, cuz everything i've just said are well explained there ;-)\n. Behat IS NOT unit testing or specification testing tool. Behat is Scenario-oriented BDD framework with functional testing capabilities as part of communication process between stack-holder and developers. It means, that Behat was created and evolving as agile planning and functional testing methodology. However, if you want to use it as unit testing or spec testing tool, you can, but keep in mind, that we'll not add into Behat functions, that it wasn't intended to do ideologically ;-)\nPersonally, i would recommend you to use PHPUnit or PHPSpec for internal api testing. Behat was created for black-box like, functional, user-observable behavior testing :-)\n. The whole idea of Behat features describing is built around the idea of defining one single business dictionary for your domain area. It means, that by defining this dictionary one time you can use it in all your project scenarios. But when we're talking bout source code testing, we're talking bout source code, not about custom terms. By building dictionary for a public API testing of your library, you'll finish with duplicating entire php language in step definitions :-) And, what's even worse, at some point, you'll notice, that you're writing dictionary definitions (step definitions) more than testing or describing target behavior. That's the only reason xwhy Behat is oriented on the black box testing.\nOne of the brillian ideas about BDD - you should describe behavior in terms, that end user should understand. So, when you're talking about website users - it's browser behavior, that you're describing and Behat+Mink fits there awesomely. When you're talking bout console tool user - it's custom CLI user dictionary (run, go to directory, etc.), that you should describe and Behat fits there too: https://github.com/Behat/Behat/blob/master/features/bootstrap/FeatureContext.php#L95. But when you're talking about php library users - you're talking bout source code. And best terms to describe php library behavior to it's users is the source code itself.\nIt's the reason, why Behat itself tested with Behat features, but Gherkin parser and Mink tool are tested with PHPUnit ;-)\n. Fixed in 2.1.2\n. Fixed in 2.1.2\n. Yep, forgot to remove this instruction after console refactoring.\n\nThe console component is not easy to extends because of all this private properties\n\nI was one of those guys, who've refactored it ;-) And there's a good reason for it:\nhttp://fabien.potencier.org/article/47/pragmatism-over-theory-protected-vs-private\n. The hooks are fired in the order, in which they were defined inside your context. That's it. I don't wanna add complex hooks ordering mechanism, as it will add more WTF effects into the feature suites. You can always redefine any hook functions with inheritance, simply disabling them and placing your own hook functions in the order you want to. It's all control you'll ever need to in your feature suites - more controll will totally kill hook system simplicity and i'm trying very hard to avoid this ;-)\n. This requires too much work to be done easily. The main distributing platform for Behat in future is Composer and http://packagist.org/. So, PEAR will work in basic cases, but i don't want to spend too much time on fighting with it for complex cases and 5% of users - there's more important features/bugsfixes to do ;-)\n. It's totally unreadable and not logical for the feature reader. Gherkin is not a programming language, it's just a markdown for your user stories :-)\nBackground is for initial context steps, that are common for entire your system. If you have different initial steps for different scenarios - place them inside scenarios in order for reader to understand what's happening there!\n. @alexanderilyin tables have different purpose.\n. It's not Behat - it's php, that smart enough to throw noticec about that. Behat only catches and prints them nicely.\nIf you want stack trace - add -v option to the behat call\n. Please, add failing scenario before fixing something:\nhttps://github.com/Behat/Behat/blob/master/features/annotations/definitions_transformations.feature\nin order for me to be sure that:\na. you've run the tests\nb. i'll not break your fix in future versions\nThanks ;-)\n. Why not sending PR with a test for a broken case?\n. Modify scenarios in feature files! Don't cheat your behavior expectations.\n. Data is data. And behavior expectations are behavior expectations. You shouldn't change behavior expectation any way other than modifying *.feature file.\n*.feature file describes your behavior. *Context class describes how to test your behavior descriptions. That's it. Features shouldn't describe how to test themselves and Contexts shouldn't modify your behavior expectations. It's like a contract.\nWhen customer/developer/tester/manager opens your *.feature - he should be able to see the whole picture without reading php source code inside context classes. It means, that you just can't hijack feature files content without loosing pieces of important information and behavior explanations, needed for project understanding.\nHooks are here just for hooking into test (not behavior description) process at specific stages and doing specific programming things on them, not about modifying your feautures.\nIf you want to modify your feature files from inside your context - 99%, that you're doing something extremely ugly and Behat just wasn't planned to be used that way!\n. You don't need to duplicate scenario in order to run it with different test setup.\nWhat you're trying to achieve is just a complex feature suite configuration.\nBehat and Mink provides a way to specify which session will be used as @javascript one. Modify your behat.yml:\n``` yaml\nlinux-chrome:\n  context:\n    parameters:\n      javascript_session:  linux_chrome_session\nwindows-ie7:\n  context:\n    parameters:\n      javascript_session:  windows_ie7_session\n```\nNow run your features with (if you want to run @javascript scenarios inside linux_chrome_session):\nbehat -p linux-chrome\nor (if you want to run @javascript scenarios inside windows_ie7_session):\nbehat -p windows-ie7\nFeatures stay the same, context stays the same without dirty tricks - you only changing suite run configuration.\n. run_all.sh:\n``` bash\n!/bin/sh\nbehat -f progress -p linux-chrome\nbehat -f progress -p linux-firefox\nbehat -f progress -p linux-opera\nbehat -f progress -p windows-ie6\nbehat -f progress -p windows-ie7\nbehat -f progress -p windows-ie8\n``\n.behat.yml`:\n``` yaml\ndefault:\n  filters:\n    tags:  '~@javascript'\nlinux-chrome:\n  context:\n    parameters:\n      javascript_session:  'linux_chrome_session'\n  filters:\n    tags:  '@javascript'\nwindows-ie7:\n  context:\n    parameters:\n      javascript_session:  'windows_ie7_session'\n  filters:\n    tags:  '@javascript'\n```\nrun non-javascript features:\nbehat\nrun linux-chrome @javascript only features:\nbehat -p linux-chrome\nrun windows-ie7 @javascript only features:\nbehat -p windows-ie7\nplus run_all_features.sh (to run all):\n``` bash\n!/bin/sh\nbehat -f progress\nbehat -f progress -p linux-chrome\nbehat -f progress -p windows-ie7\n```\nProblem solved?\n. No, modifying feature suite inside hook just to be able to change test suite configuration - that sounds not logical to me ;-)\n\nif you won't do this little code modification\n\nThe truth is, this little code modification proposed by you will not change anything. It's php - every object gets passed by reference. It doesn't matter where you get scenarios (before or after event dispatch) - you'll work with same old scenarios. If your dirty on-the-fly modification inside hook doesn't work the way you expect - it's just because it wasn't planned to work that way :-)\n. Well... It looks not so bad after little thinking. Maybe (just maybe) it's that 1 of 99% uglies :-) Because you're not changing actual scenarios really, but altering the way Behat evaluates existing ones. I need to think bout it little bit more.\n. I've just said maybe ;-)\n. @stof can't wait :)\n. The method you want to add at the end of each scenario is @AfterScenario hook\n. If this issue is not closed still - move it to the Mink repository. It has nothing to do with Behat itself - i'm closing it here.\n. It happens from time to time with new Firefox versions ;-)\n. Closed in favour of #70\n. Fixed by @stof with latest BehatBundle PR ;-)\n. junit formatter expects folder and pretty expects either file OR stdout. Stdout is represented with empty string, so:\nphp behat.phar -f=pretty,junit --out=,/home/somedir\nnotice , at the begining of --out - there's 2 outputs actually - empty (stdout) for pretty formatter and somedir for junit formatter.\nAll this is well described in http://docs.behat.org/guides/6.cli.html#format-options\n. Obiously\n. yaml\ndefault:\n  context:\n    parameters:\n      javascript_session: selenium\n. Wow. You're printing features? Cool :-)\n. I'm not sure that it will fix anything. Setting error_reporting() to 0 just because some library stupidly uses @ means you will loose any warning or notification in your entire codebase during suite run. And it's important.\nSo, if you still want to use guzzle and guzzle don't/can't remove @ from codebase, then you should filter non-needed exceptions in your own suite definitions with try ... catch.\nAvoiding exceptions/notifications/errors in test/feature suite is a bad practice for most people and that said, it shouldn't be part of Behat, IMO.\n. And if you still need to avoid any error/notification (except exceptions, of course) in your feature suite, you can use BEHAT_ERROR_REPORTING constant (placed anywhere in your features/bootstrap/):\nphp\ndefine('BEHAT_ERROR_REPORTING', 0);\nNo need to add another dirty way to do dirty stuff. We already have one, which kills my conscience :-)\n. @stof i know that @ changes global ERROR_REPORTING level to 0 temporarly. But when we check for 0 === error_reporting(), it means we create lot and lot of confusion to users in the future.\nJust imagine, that user tests something with error_reporting(0) somewhere in the code. But this same user will also want to get all errors in feature suite - he'll set BEHAT_ERROR_REPORTING to E_ALL, but still will get nothing, because error handler will check global error_reporting() for 0.\nNow you got me?\n. @davedevelopment @stof ok, after thinking little bit i've decided to use Symfony2 behavior here (almost), so i'll merge this PR. Thanks for pointing out, guys. And thanks for PR, @davedevelopment\n. @web-dev resend against develop branch. All development happens there.\n. @web-dev next time, please cherry-pick/rebase to remove those merge commits ;-) For now, i've done it myself.\nThanks ;-)\n. https://github.com/Behat/Behat/blob/develop/src/Behat/Behat/Exception/ErrorException.php#L45\n. @stof pushing right now\n. *.feature files are not tests. It's your project features descriptions. And Behat just gives you a way to describe (with step definitions) how to automatically check whether or not those features are implemented/finished/works.\nCode coverage is nonesense for StoryBDD and Behat especially, cuz we're not talking bout code at all. And feature coverage is impossible till someone invents human-mind-(reading|parsing) software for machines :-)\n. Seriously, you're trying to achieve wrong thing here. Behat tests your *.feature files (that your features requirements are achieved), not your code. That's where its name coming from, btw (BEHAvior Tester).\nCode coverage is controversial idea and code coverage for StoryBDD framework is just nonsense. If you're doing code testing with StoryBDD - you're doing it wrong.\n. You're completely loosing point here. There's two complementary but fairly different ways of doing BDD - SpecBDD and StoryBDD.\nSpecBDD is all about developing specifications for your low-level implementation units and communication between those. It's evolution of usual unit tests. It's something you're trying to achieve with your example above, but doing it with wrong tool. Good examples of SpecBDD frameworks are http://rspec.info, http://phpspec.net or in case of your .Net - http://nspec.org.\nStoryBDD is about developing human-readable business-targeted behavior descriptions about your application functionality. It's evolution of DDD and functional testing into something mixed. With StoryBDD you're writing scenarios for stakeholders, but those scenarios aren't tests and have no aim to target all application functionality, except the one interesting for business (stakeholder). Although scenarios aren't tests, their acceptance phase could be automated with StoryBDD framework like http://cukes.info, http://www.specflow.org or http://behat.org. With StoryBDD you could start with low-level descriptions like you provided above, but the final idea then is still needs to be \"to describe domain area of business\", not \"to test the code\".\nIn best case, you should use both techniques with or without specific tools for them. But using StoryBDD tool for SpecBDD or vise versa is worst idea you could ever make for your development flow.\nBehat isn't a SpecBDD tool, it wasn't been created and highly inefficient as such. Behat is a StoryBDD tool. Although you could use same testing code or assertions behind both, approaches are completely different. And if in one case code coverage might have any sense (SpecBDD) for another (StoryBDD) it's completely nonsense.\n. @Daniel15 main disadvantage about using StoryBDD for writing code specs exists because SpecBDD and StoryBDD operate on absolutely different levels of abstractions.\nIn StoryBDD, you're forming (creating) domain dictionary by exploring business requirements and added values of the features. This dictionary (you could think - step definitions) is undefined at the beginning of the project and different from area to area. It means, that for every project (and event for most roles inside this project), you should create your own set of language (step definitions), that you will use to describe project domain. And StoryBDD gives you ability to do exactly that - create new dictionaries, explore domain area and expose business values of the features.\nIn SpecBDD there's only one possible domain language - language of objects and their relations. Language on which you're already writing your code. \"This object should be created and this object should be provided as argument\". That's why all SpecBDD frameworks are using syntax of language on which they were written - because that's the way your objects (domain) talk in the system.\nNow, let's see how using wrong tool for the job could ruin your flow:\n1. Using SpecBDD tool for StoryBDD. You'll pretend, that you're talking with business people, but doing it using language which is irrational and not readable to any person outside technical world. Most likely, you'll finish with scenarios or specifications, that will be both unreadable by business people and unmaintainable by developers:\nphp\n   <?php\n   // this code is fictional, but could easily become reality\n   // if you're using wrong tools for the job\n   $msg = $this->getConfiguration()->get('test_email');\n   $story->Given()->I->sendEmail('tester', $msg);\n   $story->Then()->getUser('tester')->should()->recieve($msg);\n2. Using StoryBDD tool for SpecBDD. You'll try to describe purely implementational (code) details in the tool, that aims on easing exploration of new domains. But in your case (code specs), domain is already known - it's programming language you're using. So, most likely, you'll finish with bloated feature suite and step definition dictionary, that will tend to solve only one thing - recreating your programming language syntax and logic with regular expressions:\ngherkin\n   # this step is fictional, but could easily become reality\n   # if you're using wrong tools for the job\n   Given I instantiate \"Daniel15\\Entity\\TopicMessage\" with:\n     | author  | hi      |\nBoth those types of tests share same big problem - after month of active development, they'll become umaintainable, unusable and, finally, abandoned. Just because they will not be able to solve problems they tended to solve - easing development and communications.\n. Reopened issue and moved it into FAQ section to prevent such questions in the future and provide detailed explanation on why not.\n. @Daniel15 classes in most cases is a bad representation of business features. It's great representation of their implementation :-)\nAs of pure business features coverage report, indeed, it could be extremely useful. The problem here is that computers at the current level of technology doesn't have the way to predict or create new business rules for concrete application. Even developers in most cases can't. The only person, who is sufficient with this kind of business predictions is product owner (stakeholder). Coverage of the non-described business features for the product highly relies on ability to predict/calculate those business features first.\nI think, technology that will be able to automatically tell you what features you need based only on initial idea of the project would be a next big thing after iPad mini. But we don't know yet whether any of those would be actually released :-)\nAs about already defined business requirements (written *.feature files), Behat already have informal coverage for them in form of undefined, pending and failed scenarios. Building some sort of chart from this data is as easy as creating new Behat formatter.\n. @AndyAtTogether again. *.feature files are not functional tests - they are business-oriented domain descriptions, that could be tested (domain descriptions, not application).\nIf something isn't described in *.feature - it doesn't mean, that this part of application is redundant or should be removed - it just means, that this part is not important for business. Though some application code is not important to business, it still could be important part of it's implementation (support/extension points f.e.).\nAnd yes, StoryBDD or Behat particularly doesn't  replace functional testing entirely, though intersect it in general cases.\n. @nicopaez you misunderstood purposes of Behat (and probably cucumber). Behat doesn't run your features, it tests them. Your features are not runnable - they are just plain text descriptions of your project business features. Context describes how to test them, Behat automates this testing. Nobody runs features, they're just testable. You're writing not tests, but textual descriptions of application business values, that could be tested itself later with Behat. And same goes for Cucumber. *.feature files are not tests. If you're writing them as tests, you're creating big problems for yourself in the future - read this tread to understand why.\n. > And if that is your opinion, then you should update Behat documentation...\n@nicopaez thanks for pointing. Fixed: https://github.com/Behat/en-docs.behat.org/commit/6de9edaaa43305b6ff5892fdc2be7b17d209b151\n. > @everzet how is Behat supposed to test them? It executes your code!!!\nAbsolutely right. FeatureContext is a test, *.feature file is not. Don't confuse those two as they even have different aims. *.feature and Gherkin describes your application business, Cucumber & Behat tests your application AND those business rules from *.feature files, not contrary.\nAnd i don't want to repeat myself, but:\n\nIf something isn't described in *.feature - it doesn't mean, that this part of application is redundant or should be removed - it just means, that this part is not important for business. Though some application code is not important to business, it still could be important part of it's implementation (support/extension points f.e.).\n. @xczimi usage of Behat doesn't cancel requirement to spec or unit test your code. Of course, you can write websites in assembler and even have some benefits out of the process, but there are much better tools for this problem on the market and developer's job to choose and use them. Behat wasn't been created to operate on code level, it's StoryBDD tool (yes, StoryBDD, not WholeBDD) - there's also SpecBDD, which has different goals and provides different tools for implementation level.\n. @sooqini I'm not against doing it. I'm against doing it in the core.\n. Which would mean you didn't do BDD in the first place. But I see your point. Coverage probably could be used for such sanity checks. That said, I think risk of abusing this functionality is still too high to include it in the core!\n\nSent from my iPhone\n\nOn 24 Oct 2013, at 07:45, SvenBrunk notifications@github.com wrote:\nFor BDD you could actually use a code coverage report the other way round.\nWhen you are finished with your behaviour tests and every requirement is covered... if you then find lines uncovered, they can most probably be removed. Else you have hidden requirements.\n\u2014\nReply to this email directly or view it on GitHub.\n. > Doing nothing is still by far the worst option.\n\nYou\u2019re missing the point here. It is not Behat's responsibility to do something in this case. Behat has very specific and narrow use-case - to support BDD delivery by providing scenario automation tool. Making sure that you\u2019re not writing useless code outside of the cycle is not a test automator job.\nKonstantin Kudryashov\n--- PHP developer, BDD evangelist, Scrum master\na: http://about.me/everzet\nb: http://everzet.com\nc: https://github.com/everzet\nOn 24 Oct 2013, at 12:50, srcspider notifications@github.com wrote:\n\nThat said, I think risk of abusing this functionality is still too high to include it in the core!\nDoing nothing is still by far the worst option.\nAs long as you take control over the functionality you can clearly label it as \"just a sanity check tool\" so there's very little risk of it getting out of hand or causing misinformation. People that would abuse it (for whatever reason), would either abuse something similar anyway or not do anything at all.\n\u2014\nReply to this email directly or view it on GitHub.\n. > I'm just saying if the implementation were to come along it would be a \nmistake to not add it and moderate it. \n\nI don\u2019t see how not adding and, especially, not moderating a functionality that most users don\u2019t need is a mistake :/\nFeature you talk about is very narrow and has very specific use-case - you need it only if you\u2019re using BDD tool without doing BDD. And I prefer tools to help people in fixing problems, not symptoms.\nKonstantin Kudryashov\n--- PHP developer, BDD evangelist, Scrum master\na: http://about.me/everzet\nb: http://everzet.com\nc: https://github.com/everzet\nOn 24 Oct 2013, at 13:31, srcspider notifications@github.com wrote:\n\nI know, I've tried for the purpose of using it as a metric. =P \nI'm just saying if the implementation were to come along it would be a \nmistake to not add it and moderate it. \nFor what it's worth code coverage with unit tests is just as brittle, even \nif you have everything green it doesn't mean you're actually testing every \npossible case, just passing though the code with cases that don't cause \nproblems; at least a code converge with behat would more easily be \nunderstood as just a \"sanity check\" since you don't make direct contact \nwith the implementation. \nOn Thu, Oct 24, 2013 at 3:24 PM, Christophe Coevoet < \nnotifications@github.com> wrote: \n\n@srcspider https://github.com/srcspider but this is not easy to \nimplement either. When specifying a web app with Behat, the code of the web \napp will often run separately (it is the case for all Mink drivers doing \nreal HTTP requests to a webserver, i.e. all except the symfony2 driver). So \ncollecting the code coverage in the Behat thread won't help (except for \ncleaning your FeatureContext from unused code). \nAnd collecting the code coverage in your app requires modifying its source \ncode, which cannot be done by Behat itself. \n\u2014 \nReply to this email directly or view it on GitHubhttps://github.com/Behat/Behat/issues/92#issuecomment-26987533 \n. \n\u2014\nReply to this email directly or view it on GitHub.\n. I'm closing this issue as it is seems to be very old. Please reopen with updated stats if that's not the case!\n. Whole 4 seconds to parse? How huge your feature suite is?\n. I don't mean, that there could be something wrong with your suite, i just want to get whole picture in order to come with better solution, cuz regexing files before parsing doesn't look good for me and it will not work in complex cases with tag inheritance.\n. Ok. Indeed, it's alot. I'm thinking about optional parser caching layer. That could solve all slowness problems.\n. @msaspence it's in the latest release already (2.3.3) does it fixes your problem?\n. In Behat it's called steps execution chaining: http://docs.behat.org/guides/2.definitions.html#step-execution-chaining (see last example)\n. i'm not sure that i got you\n. so chain them, what's the problem?\n. ... it's about declaring how your application should work from some user perspective. It's your job, as developer, to describe how to test (perform) those declarations internally.\n. I still can't get your point. Could you provide an example of what do you really want?\n. You're getting it wrong. You always should describe your features from single POW. You're describing role (observer) in the narrative and you should stick to his POW all the time. It means, if you're describing feature from the website user point of view - you shouldn't care about what JS events you fire internally - YOU ARE USER.\n\n\nRole is someone, to whom you're trying to bring business value, described in feature. In most cases, it's user or administrator. And common thing about both those guys - they don't care about implementation, they only care about application behavior.\n. @headrevision you totally getting wrong the whole idea of compound steps: http://www.engineyard.com/blog/2009/15-expert-tips-for-using-cucumber/ N13 is the exact article, that you've provided. And it describes the same behavior that Behat has with chained steps.\nCompound steps in cucumber are usual step definitions, that are defined near other step definitions inside steps.rb, same as in Behat.\nWhat you want instead is to make programming language for users/readers inside feature descriptions. It's wrong for both cucumber and behat.\n. @headrevision features should not be tight to your application implementation, they should describe application behavior from the specific role POW. Features are not tests. It's just a specifications, which testing could be automated by providing definitions for steps in FeatureContext. So, basically:\n1. *.feature file contains behavior description (user story)\n2. steps.rb in cucumber and FeatureContext in Behat are the things, that describe tester (cucumber, Behat) how to test those features\nThat's it. Nothing more. And yes, your feature testing could start failing by exactly 2 reasons:\n1. behavior, described in *.feature files doesn't work anymore, because application is broken\n2. behavior, described in *.feature files doesn't work anymore, because definition of I am logged in sentence become outdated\nIn both cases - it's developer job to fix testing flow.\nIn first case, developer need to fix application and feature suite will start passing right after that, without changes. In second scenario, developer should update single step definition I am logged in inside FeatureContext, after that every feature will pass once again without the need to change behavior description. Because I am logged in behavior description doesn't changes. Changed the way user logged in and in most (not all) cases - it's implementation detail.\n. @headrevision for reusability. You don't care where the step is defined (in which subcontext) and with which arguments. You just use known step signature and it will be called everytime whenever Behat knows about this particular definition. It's another way of reusability. That's it.\n@headrevision i'm asking you third or even fourth time - provide concrete examples (with features and contexts) about what workflow you want to get at the end and i'll show you where you're wrong. Our talk without concrete examples becomes too metaphysical to be useful for anybody.\n. @headrevision show me exact feature itself. Your 2 steps doesn't give us anything really to understand what you want :-)\n@stof you were talking to me?\n. Yep, you're trying to implement programming language out of user stories. Show this feature (with compound step) to anybody non-technical - if he'll be able to read it, i'll be surprised. Cuz even i can't. So the question is - why to pollute and mess feature files with stuff that woun't be readable for person (role) required to read those features?\nAlso, i see, that you have real problems with not understanding the idea of user roles. Scenarios should be written (or described from role) by user (at least virtually) and for user. Almost no user will be able to read this:\ngherkin\nWhen I type \"behaviour driv\" in input field \"query\"\nWhen I wait \"500\" ms\nThen I should see the list of suggestions to the value of input field \"query\"\nIt's purely technical stuff. And if you're stating As a user in narrative - you're lying (to yourself and feature reader). I think all other problems come from this particular one. Because if you're really talking as user, you wouldn't say anything like:\ngherkin\nWhen I bring the focus to input field \"<id>\"\nWhen I type \"<text>\" in input field \"<id>\"\nor\ngherkin\nWhen I move over the first suggestion in the list of suggestions to the value of input field \"<id>\"\nWhen I click the first suggestion in the list of suggestions to the value of input field \"<id>\"\nInstead, you (as user) will always say:\ngherkin\nWhen I fill search field with \"...\"\nor\ngherkin\nWhen I select the first suggestion from autocompletion box\nAnd in order to hide those implementation details, you will move them into FeatureContext. Cuz purely technical steps ARE usually implementation details.\nYou see, the whole idea of Behat/cucumber is to hide everything, that described role will not be able to understand or wouldn't care about in place, where he shouldn't look (FeatureContext, steps.rb).\n. @headrevision this is where you getting things wrong. You're developing features not for UX expert, but for a end user. And keeping this in mind, you should describe features for user, not for UX expert. UX expert is not a user - he's a developer.\nStoryBDD is for describing/developing features, that have real business value for real users. Implementation details doesn't add real value to your product - it's just implementation details.\nRead http://dannorth.net/whats-in-a-story\n. There's different types of BDD as there's different types of testing. There's StoryBDD, which concentrates entirely on user stories and business values of your features and there's SpecBDD, which does all the else, including functional testing.\nYour feature role can be anything. It could be even database administrator, if you think, that this is the role who'll benefit and that his benefits are important for your application, but in this case, you'll state this role in narrative and should stick to it across all feature scenarios. There's nothing wrong with it. But you should describe feature for one single role. You just can't describe same feature with same scenarios for both non-technical and purely technical roles or your feature will be useless for anyone of them.\nIf you have a feature, that has a business value for some end user, but in the same time has some business values to the UX designer and his (UX designer) benefit is really important for you, as a product owner - you should describe 2 features actually, because it's 2 separate user stories really.\nUser role consistency is the most important thing in StoryBDD and it's well described in the article, that i've linked upper.\n. @headrevision you have 2 features, 2 roles, 2 domain dictionaries. Domain dictionary terms live inside FeatureContext. Your features should be self-explanatory. If they are not, without addition of compound steps, then you're doing it wrong :-) Compound steps will not fix anything, they will only make your features more complicated to the reader and this is exactly what Gherkin tries hard to avoid ;-)\n. use either short notations:\nbash\n-dl\n-di\n-d needle\nor full notation:\nbash\n--definitions l\n--definitions i\n--definitions needle\n--definitions now requires a specifier of values that you want to list\n. Fixed with https://github.com/Behat/Gherkin/commit/5f40595c4f41754de3eaba7e97c9fedcd7a51ec8\n. It will not work, as Gherkin\\LineFiter doesn't know about line:line specificators: https://github.com/Behat/Gherkin/blob/master/src/Behat/Gherkin/Filter/LineFilter.php\n. Also, you've sent PR against wrong branch. Behat and Gherkin development happens inside develop branches ;-)\n. Implemented, thanks to @headrevision\n. Please, resend this PR against develop branch\n. Option is called --ansi now. Will update the docs\n. done ;-)\n. It's not about Behat, it's about Mink and it should be fixed now as new Mink version is released.\n. We've decided to not go further with this approach as it messes up Behat core and complicates codebase too much.\n. --retry seems not clear for me. Retry what? What about renaming it to --retry-step? @stof ?\n. @Furizaa please, rename variables to $retryStep from $retry too.\n. @Furizaa i think you should just extend StepEvent with retry attempts knowledge.\n. Yup, doing --retry-scenario seems more logical. And yup, it will be more complex task :-)\n. @Furizaa i'm starting to think, that we're solving this problem with wrong hammer. This feature doesn't worth complexity it requires to be added.\n. @Furizaa yeah, this feature doesn't worth it. There should be a better way to fix your issue. Ping me when you'll find one :-) I'll think bout it too.\n. @Furizaa if you're still interested in doing this thing. I have good news for you. We can add this functionality without the need to complicate Behat core. Contact me if you're still interested ;-)\n. @eliza411 of course :) Feel free to mail/im me.\n. Hi Melissa.\nYeah, timeouts could be a pain. The problem is, web is unstable by nature\nThe more realistically you're trying to test it, the more unstable your \ntesting\nenvironment will be. So you need some protectors :)\nFixed timeouts doesn't give you guarantee, that things will not break with\ndynamic bandwidth. So what you need is dynamic timeouts. It's timeouts\nbased on some condition. There's special wait() method on Session. First\nargument is milliseconds limit - set it to 1 minute (60000). Second argument\nis JS expression, that will be evaluated on the browser side. Session will\nstop waiting if either of those conditions meet (1 minute wait OR JS \nexression\nreturns true). Do you have some notification for the event completion? Check\nfor its appearance - this will be your dynamic timeout. This will not \nonly fix\nyour problem, but in case of high speed app will decrease your test suite\nrun-time.\n--retry is just an emulation around real dynamic timeouts. You can do \nit in your\ncode and it will be more reliable solution, cuz this way you'll be able \nto notice\nslow parts in YOUR code. Problem with --retry was that it was changing too\nmuch in the core of Behat, but didn't provided enough flexibility that \nyou will\nneed in the future. Also, this is something, that you could easily do in \nyour\nown definitions. Have step, that is unpredictably failing because of \ntimeout?\nI would suggest to override its definition and add dynamic timeout there ;)\nHope it helps.\n\nMelissa Anderson mailto:notifications@github.com\nSeptember 26, 2012 12:03 PM\nThanks! I've described what we're experiencing below. I think sdboyer,\njhedstrom, or one of the other developers can dig into writing retry code\nwith some pointers from you if it is a viable option. I'm happy to \nlook in\nother directions to solve these problems if that's the more prudent thing\nto do.\nOn Wed, Sep 26, 2012 at 1:44 AM, Konstantin Kudryashov \nnotifications@github.com wrote:\n\n@eliza411 https://github.com/eliza411 of course :) Feel free to \nmail/im\nme.\n\u2014\nReply to this email directly or view it on \nGitHubhttps://github.com/Behat/Behat/pull/109#issuecomment-8883021.\n\nWe have only one environment against which to run our tests because of \nthe\ncomplexity of services running (varnish, twistd, beanstalk, solr, etc) \nand\nprivacy issues about access to the unsanitized user database. The full\nsuite takes about 45 minutes, so it's been a little slow troubleshooting\nthe timeout issues, and I may be misdiagnosing, but timeouts and\nintermittent failures seem to fall into three main categories:\nType one:\nIt seems like we have certain tests that will regularly time out the \nfirst\ntime they've been run in a while but then will run reliably on all\nsubsequent runs. This feels like whack-a-mole ... that something times \nout\nevery run but not always the same step. So that's one thing.\nfeatures/drupalorg/docs_management.feature\nfeatures/drupalorg/casestudy.feature\nfeatures/drupalorg/frontpage_git.feature\nfeatures/drupalorg/spotlight.feature\nType two:\nInitialization of git repositories can take a varying amount of time. \nSeems\nlike the first initialization to run after the server has been idle \nawhile\nfails and succeeds every time thereafter until the server has been \nidle. I\nhate adding 10 seconds to every git step just to catch the initial\ncondition.\nfeatures/git/project_commits.feature\nType three:\nAny xml feed test is subject to timeout the first time the feed is \naccessed\nafter the server's been sitting idle a while.\nfeatures/drupalorg/security_feed.feature\nfeatures/drupalorg/security_contrib_feed.feature\nfeatures/drupalorg/projectsearch_issue_feed.feature\nfeatures/drupalorg/packaging_whitelist_feed.feature\nfeatures/drupalorg/security_psa_feed.feature\nThe project is located at http://drupal.org/project/doobie\nThe git repo can be browsed at http://drupalcode.org/project/doobie.git\nI'm trying to work with developers to check out step definitions and\nconfigurations, too, but this is the behavior that had me googling \n--retry\nto try to get a test suite we can trust not to throw failures that are \nnot\nreflective of a problem with the code base.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/Behat/Behat/pull/109#issuecomment-8884885.\n\n\nKonstantin Kudryashov\n--- PHP developer, BDD evangelist, Scrum master\na: http://about.me/everzet\nb: http://everzet.com\ng: https://github.com/everzet\n. Will do.\n. PHPUnit is not default nor recommended assertion tool. Behat was designed to be assertion-agnostic tool. It also tries to solve absolutely different kind of problems, where there's no distinguish between failure or exception. If your scenario fails - it fails, no matter by wrong assertion or syntax failure. If you want more fine-grained control of your application stability, you should use xUnit or xSpec tool to test your app internals in addition to application behavior logic testing\n. Assertion-tool agnostic, sorry :-)\n. @headrevision again, it's your job to distinguish internal failure from internal exception. For Behat everything looks the same: if scenario doesn't work - it just doesn't work, it failed.\nIf you want xUnit type distinction for lower level then you just need a xUnit type tests in addition to high-level black-boxed behavior descriptions. That's it.\nAnd if we're talking bout 3rd-party code problems VS. your-own code problems, then it's 100% your job as a developer to distinguish them, not a testing tool.\nBehat IS NOT xUnit or xSpec testing tool. It's scenario-oriented BDD framework.\n. @headrevision there's no distinction between system failure, assertion exception or something else in terms of scenario-oriented BDD - when system fails, scenario fails too.\nIf you want this distinction - no one prevents you from creating own custom formatter, that will output different type of exceptions differently. But it simply doesn't make sense to put it into Behat core.\n. @headrevision Cool :-) Can you repack it to separate repository, so other users could easily use your formatters? I'm thinking about creating a special Behat/CommonFormatters repository for 3rd-party formatters\n. @headrevision i've created official repo: https://github.com/Behat/CommonFormatters and given push access to you. Can you push there ? :-)\n. Are you sure, that this XSD is correct ?\nelement testcase: Schemas validity error : Element 'testcase': This element is not expected. Expected is ( properties ). is kinda kills me.\n. It could be a formatter option, to provide suite base url :-)\n. Yup. Add it to the HTMLFormatter as optional preference.\n. @jubianchi thanks for reporting this. Should be fixed in just released 2.3.4.\n. Behat could supports this. But the problem with skipped approach is that you blow up your context dictionary with useless definitions. I'll think about ways to solve your problem in cleaner way.\n. I would add support for throwing Behat exceptions in pre- hooks. This way, you'll be able to throw PendingException in tagged BeforeScenario hook to mark this scenario steps as skipped.\n. After little bit thinking, i wouldn't do anything with it. Problem with adding exceptions handling support into hooks is that we'll make things more complicated even for your own team. Just imagine you've added some named or tagged hook to skip specific scenarios altogether. 1 month later someone starts adding normal scenario, but which will be evaluated by your hook as applicable. What user will see is that scenario will start skipping without meaningful (for him) reason and he'll not be able to understand why, without looking at the context code and searching for this specific hook. So no, it's bad way to extend Behat.\nWhat i propose for you instead is to use tags and tag filtering. You can mark scenarios, that shouldn't be interpreted by Behat with specific tag like @ui-specs. And in behat.yml you can just do that:\nyaml\ndefault:\n  filters:\n    tags: ~@ui-specs\nAfter that, behat will simply ignore this scenarios. With this way, you can even ignore whole features by adding tag above feature keyword.\n. @MPV i would suggest using Gherkin parser directly and rendering customer features report by hands. This way you'll be able to generate whatever you want. And it's really easy. It would require something like 50 lines of simple code.\n. What language do you have as locale?\n. Starting from v2.3, Behat uses your default system locale to format (only format) output. It means, that you still can have features in different languages, but Behat formatters will try to talk with you in your own language. Like that:\n```\n......................\n5 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 (5 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e)\n22 \u0448\u0430\u0433\u0430 (22 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e)\n0m0.571s\n```\nIf you have ru as system locale. But i've forgot to set fallback locale when your language is not supported. Your locale language obviously isn't supported, so you see translation keys. There's 2 ways to fix that:\n1. Send pull request with translation for your own locale: https://github.com/Behat/Behat/blob/master/i18n.php. So, Behat will talk with you in your native language.\n2. Wait for a new version with enabled fallback locale (in 10 minutes).\nI personally would choose first one ;-)\n. v2.3.5 with the fix released: https://github.com/Behat/Behat/blob/master/CHANGES.md#readme\nBut i still think that adding your system locale language translation to Behat is best option ;-)\n. Yes:\nyml\ndefault:\n  formatter:\n    parameters:\n      language: 'sw'\nAlso, if you want to use different (from your current locale) language system-wide, you could add:\nbash\nexport BEHAT_PARAMS=\"formatter[parameters][language]=sw\"\nto your .bashrc or .zshrc ;-) This will force Behat to use this locale in all your projects.\nThis will work only in just released v2.3.5, cuz prior to that there was a bug in Behat. Now it's fixed.\n. I'm not sure that i like remote_base_url option name. What about paths_base_url ? @stof mate, what do you think ?\n. But contexts could live in different directories. You talk bout main context, right?\n. Let's try it this way :-)\n. @headrevision can you provide proof scenario for this feature?\n. Oh, as far as i see, you're using closured definitions. What would happen with usual context classes? Could you add a scenario ?\n. @headrevision could you rebase, please and i'll merge ;-)\n. @headrevision also, http://travis-ci.org/#!/Behat/Behat/jobs/1188944. It's for you ;-)\n. @headrevision you owe me a fix: http://travis-ci.org/#!/Behat/Behat/jobs/1191620 ;-)\n. When you need to customize template - you can do it without overriding. You just need to place apropriate template into specific folder.\n. Yep, noted this by myself too. Thanks for reminding ;-)\n. @headrevision it's not unit testing. Behat doesn't have unit tests. Only observable behavior descriptions. We describe/test only outcomes, based on specific incomes of system as the whole. It has nothing to do with unit testing.\nAs of comfort, sometimes there's too much details go into outcome expectations, which is most noticeable in html formatter scenarios. We could simplify it alot if we need so.\n. @headrevision thanks for fixing: http://travis-ci.org/#!/Behat/Behat ;-)\n. The whole BehatBundle itself is the bug i'm trying to fix right now.\n. It will be fixed with Symfony2Extension\n. Check http://pear.behat.org//get/behat-2.3.5.tgz for gherkin dependency. Constraints are here.\nDowngrade to behat/gherkin-2.1.1 by hands. Pear shouldn't allow you to upgrade while you're on behat 2.3.5 then.\n. Use http://getcomposer.org/\n. CommonFormatters should become an extension.\n. Writing it :-)\n. Use Symfony2Extension instead. If you have troubles with how, please, fill free to contact me through twitter, IRC or ML anytime :)\n. use %behat.paths.base% instead of %%BEHAT_BASE_PATH%%.\n%behat.paths.base% directs to either:\n- behat.yml (or custom config) directory path, if config file exists and loaded\n- current working directory in other cases\nThere's no magic %%...%% directives in Behat anymore. Only:\n- behat.paths.base - described above\n- behat.paths.features - features path (defaults to features)\n- behat.paths.bootstrap - bootstraps path (defaults to %behat.paths.features%/bootstrap)\nAlso, all paths are relative from behat.paths.base by default, meaning, that you can use just features instead of %behat.paths.base%/features.\n. Yep. Just no magic happens now. Custom directories are still supported, but you need to specify them explicitly in config:\n``` yml\nbehat.yml\ndefault:\n  paths:\n    features:   'foo'\n    bootstrap:  'foo/bootstrap'\n```\nPaths in config are relative from config path. So, just put behat.yml whenever you want and call Behat with --config:\nbash\n$> behat --config=/usr/local/etc/global_behat.yml\n. Why not using profiles? Each module have it's own profile and shortname:\n``` yml\nbehat.yml\nproject suite:\nfeatures/\nfeatures/bootstrap\ndefault:\n  paths:\n    features: 'features'\nmodule1 suite:\nmodules/module_1/features/\nmodules/module_1/features/bootstrap\nmodule1:\n  paths:\n    features: 'modules/module_1/features'\nmodule2 suite:\nmodules/module_2/features/\nmodules/module_2/bootstrap/\nmodule2:\n  paths:\n    features:  'modules/module_2/features'\n    bootstrap: 'modules/module_2/bootstrap'\n```\nThen just run them independently:\nbash\n$> behat\n$> behat -p=module1\n$> behat -p=module2\n. The problem with guessing path from argument is that argument could be anything. Now any extension could extend Behat and provide support for it's custom loaders. For example, Symfony2Extension adds support for bundle-related paths:\nbash\n$> behat @SomeBundleName/login.feature\nYou just can't get path from it before loading suite.\n. @zeebinz maybe it would be easier to create specific extension for your configuration, with custom Context\\ClassGuesser and custom Gherkin\\Loader. This way, you'll be able to autoload everything in your suite-specific way.\n. What are you trying to achieve? And yeah, Behat is not unit testing framework.\n. I've asked you to provide scenario, you're concentrating on implementation :)\n. @zombor of course. Behat could/should be used to describe everything, that has business value in the project.\nBut exceptions are too much low-level to describe as business rules (in most cases). In 99% cases, most deep level for Behat is \"some action can not be done\" (web UI, cli, web API or anything), not \"... exception has been thrown\" as @stof said. Business people make observations around application input/output, not classes and their exceptions - it's developers area.\n. I will try to clarify this as much as possible in my symfony_live talk.\n. - @stof meant 3.0, not 2.3\n- event though clear progress is not possible by the reasons @stof highlighted in previous comment, there is a way to show something really close to \"progress\" in the outline row. And cucumber does it. I'm in the middle of reworking pretty formatter in 3.0 which will do the same\n. We dropped chained steps in 3.0 out of the core. Because they were making both formatters and your contexts very complicated\n. It has nothing to do with PyString, Behat or Gherkin. It's particular Mink driver bug - MinkSahiDriver.\n. Formatters are responsible for almost all the output Behat produces:\nhttps://github.com/Behat/Behat/blob/master/src/Behat/Behat/Formatter/FormatterInterface.php\nhttp://docs.behat.org/guides/7.config.html#formatter\n. Could you be more specific about context in which you're getting this exception and what you're actually doing before getting it. Because it just works for me:\n\n. Again. What are you doing and how you're doing it?\nBecause it just works for everyone else:\n\n. @stof I think, in case of CLI options, they should be relative to the current working directory. It seems more logical for me. What do you think?\n. @stof all of the CLI options are relative to CWD, all configuration options are relative to config file. I think this is the best way. And yeah, i'll document it.\n. @tmartin no way to run whole suite yet (i'm searching for a clean way to do it) - one bundle per run for now. For CI, you could create multiple profiles and configure CI to run them one by one.\n. @clemherreman what command you're using to run it?\n. Moved to https://github.com/Behat/Behat/issues/148#issuecomment-6410725\n. You already can run entire suite with one command. Though, running multiple suites (profiles) with single run isn't possible yet. I'm working on it currently. Feature is planned for 2.5\n. set it in your environment\n. yes\n. I like the idea of running single outline row instead of whole outline as they are already isolated. But i don't like complicating feature selection syntax :) I think we could implement it with old way of scenarios referring.\nSo, what i'll propose is to support specification of outline rows in the same way as you do with scenarios:\ngherkin\n1 | Scenario Outline: Some Outline\n2 |   Given step one with <var1>\n3 |   When step two with <var2>\n4 |   Then step three\n5 |\n6 |   Examples:\n7 |     | var1 | var2 |\n8 |     | 1    | 4    |\n9 |     | 2    | 5    |\n10|     | 3    | 6    |\nSo, running:\nbash\n$> behat features/outline.feature:1\nWill run entire outline.\nbash\n$> behat features/outline.feature:9\nWill run second row in outline.\nbash\n$> behat features/outline.feature:9-10\nWill run second and third rows only.\nWhat do you think?\n. @cogitatio it will require changes on Gherkin side, but i'll do it as i've said - feature is pretty useful ;) Thanks for pointing!\n. Done with https://github.com/Behat/Gherkin/commit/30ea22dbeb1044a63f5911417a738dfcddb90b8e. Should be in next Gherkin release ;-)\n. Oh, right.\n. It's DependencyInjection limitation: https://github.com/symfony/symfony. You could report there.\n. As you're here anyway, could you also fix a https://github.com/Behat/Behat/blob/develop/src/Behat/Behat/Hook/Loader/ClosuredHookLoader.php#L51 for hooks ? :)\n. Awesome, thanks!\n. As @stof mentioned, you could run only specific set of features (filtering by tags, titles) and group them into profiles. Multiprofiles runner is coming.\n. @cogitatio as i've said, multirunner is in works :) I'm planning to do controller around behat CLI to do multiprofile/multiserver runs.\n. dunno :)\n. I'm closing this issue as this will not happen anymore. There are easier ways of achieving parallel execution. I also reached conclusion that parallelisation of tests creates a trade-off you'd never want to have in your tests - trading stability for speed. The best way to improve speed of your tests is following a testing pyramid.\n. I'd rather go for custom extension :) I don't want to put every single feature into Behat core as i want to keep it clean and small (as much as possible). But also, we have extremely powerful extension system now with which you could easily achieve your needs.\n. Not yet really. But there's fast introduction: http://everzet.com/post/22899229502/behat-240\nand lot of examples:\nhttps://github.com/Behat/MinkExtension\nhttps://github.com/Behat/Symfony2Extension\nAnd i'm always here to being asked ;)\n. Thanks for the quick fix. I've just released 2.4.2 with fix.\nPlease, in future send PR to develop branch ;)\n. Why not Composer?\n. Yep, composer by default operates on project level. But nothing prevents you to use it as system-level tool. It's simpler, more clean and stable (at least for Behat).\n. How you can use composer on system level:\nStep#1: Make Composer system binary\n\ncd /usr/local/php-libs (or different user-level path)\ncurl http://getcomposer.org/installer | php\nmake bin/composer-g script:\n\nbash\n   #!/bin/sh\n   cd `dirname $0`/..\n   php composer.phar $@\n4. chmod +x bin/composer-g\n5. echo '{\"config\": {\"bin-dir\": \"bin\"}}' > composer.json\nStep#2: Add /usr/local/php-libs/bin to your PATH\n``` bash\n.bash_profile\nexpor PATH=/usr/local/php-libs/bin:$PATH\n```\nStep#3: Install package globally\nbash\n$> composer-g require behat/behat\nStep#4: Use global package as it were installed through PEAR\nbash\n$> behat\nStep#5: When it's time - update global packages\nbash\n$> composer-g update\n. > Have you a documentation about this usage?\nJust did. Didn't I? :D\n. Cool part: when you'll use composer-g require behat/behat, Composer will ask you about preferred version. I highly recommend to use 2.4.*@stable.\nThis way, you'll be able to update Behat to new minor releases ignoring BC breaks and unstable ones (something that totally broke PEAR packages for 2.4.0). That's what i mean by \"stable\". You'll get updates, but only when they're not producing BC breaks and only if they're compatible with each other.\n. Already: https://github.com/Behat/Behat/blob/master/src/Behat/Behat/Context/ContextDispatcher.php#L68-74\nBut yeah, could be improved even more, i think :/\n. Same as --config :) Yep, will add those.\n. And you'll use Console 2.2 automatically with each new Behat installation.\n. Try -v option.\n. Ah. Wait. Feature name would be indeed very useful.\n. First of all, behat.phar is now hosted on behat.org and it's already have shellbang. So just do:\nbash\n$ wget http://behat.org/downloads/behat.phar\n$ chmod +x behat.phar\n$ ./behat.phar\nOr you could even rename behat.phar into behat if you want :)\n. Oh wait. You're right. There's no shellbang in behat.phar. And there's actually a reason behind it. I can't do it or it will break phar for Windows guys :/\nOther option is to provide 2 phars, which seems like a maintenance hell for me :(\n. Just use php behat.phar. It will work that way everywhere (including Windows).\n. Hmmm. Yeah, you're right. Who'll send a PR ? :)\n. Documentation lives here: https://github.com/Behat/en-docs.behat.org\n. I know you actually wanted to send this PR to develop branch :) So, i'll just close this one and give you ability to do this the way you actually wanted ;)\n. All development happens in develop branch. Please resend PR there. Thanks :)\n. @muhqu c'mon, man. It's so hard to add one commit with CS fix in order to make your PR acceptable? It's OpenSource, mate. Nobody owes you anything - if you fix something, you're making it for yourself in first place. The only thing we're requiring is to be consistent with other code this library have. And the only reason this constraint exists is because we want other guys, that will do PR in future to have much more pleasant experience to work with clean & consistent code. It's not about bashing you or your code.\nAlso, i don't know about which HookDispatcher you're talking about, but mine has correct CS since the beginning: https://github.com/Behat/Behat/blob/master/src/Behat/Behat/Hook/HookDispatcher.php#L275-280\n. @muhqu no problem. It happens from time to time with everyone :) Thanks for the PR and the quick CS fix :)\n@stof you approve this PR now?\n. could you please rebase/resend PR to avoid including my commits - cuz it will mess history little bit. Then i'll be more than happy to merge this PR. Thanks.\n. We can close this one. Idea was to avoid the need to specify path to rerun file every time. It was done in 3.0 :)\n. Use composer for 2.1\n. No. Maybe in future, but not now.\n. Working on updated version of website, but don't have much time lately as of huge changes in life. I'll eventually finish all the planned stuff, but it'll take some time. Sorry for inconvenience :(\nKonstantin Kudryashov\n--- PHP developer, BDD evangelist, Scrum master\na: http://about.me/everzet\nb: http://everzet.com\ng: https://github.com/everzet\nOn Monday, 21 January 2013 at 19:51, Pablo Morales wrote:\n\nWill be awesome remove the pear install option from behat.org (http://behat.org). I waste a lot of time.  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/Behat/Behat/issues/185#issuecomment-12511863).\n. Send a PR, i'll accept it.\n\n\nKonstantin Kudryashov\n--- PHP developer, BDD evangelist, Scrum master\na: http://about.me/everzet\nb: http://everzet.com\ng: https://github.com/everzet\nOn Aug 13, 2012, at 11:37 AM, Ben Waine notifications@github.com wrote:\n\nOne solution could be to look for the the COMPOSER_VENDOR_DIR environment variable.\nThe downside here being that as composer is a project oriented tool you'd have to pass the environment variable to the bin/behat command each time it's run.\nCOMPOSER_VENDOR_DIR=\"deps\" bin/behat\nThis could be aliased though.\nhttp://getcomposer.org/doc/03-cli.md#composer-vendor-dir\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah, i thought about something like that myself. But this solution is actually great as it could work. Also, in the process of doing so, we could also optimize PHAR package to dump most of the classes into single file, which will also improve speed.\n\nIf you want to update PHAR compiler to do so, i'll be glad to participate :)\n. Yeah, there is common compiler script, that most extension devs use (as far as i know) - build.php. We could just provide more robust one, with what we need. Even in 3rd party repo (ExtensionCompiler).\n. But the problem is - those extensions (*.phar) wouldn't be compatible with normal (composer) Behat and normal (composer) extensions would not be compatible with behat.phar, which could cause frustration. Especially if we're talking bout custom user extensions (user tries to create his own extension with behat.phar). Hmmm.\n. Well, yeah. Especially configuration loaders. We could normalize that, of course, hiding those dependencies inside Behat core, but it still could cause problems for someone, who'll want to extend/reuse something from the Symfony2 core :/\n. Hmmm. As far as i understand, this also effectively removes comments from code? Looks clear and simple :)\n. But we need to work on preventing usage of this Behat version with phar extensions. And i think, it should be handled by extension. We could just set a constant (something like BEHAT_IN_PHAR) to true, so extension PHAR would be able to check it and throw exception if not the case. What do you think?\n. And yeah, building of extension phar should be handled by general script (lib), that we'll need to write.\n. @schmittjoh yeah, of course :)\n. Found another problem - Behat feature suite depends on components too (Finder especially). So now, with newly generated behat.phar, lots of features fail :/\n. @schmittjoh this feature for example, fails. Because of that dependency.\n. Anyway. After little bit evaluation, i think that's a major change in extensions infrastructure. So, i think we should communicate/consult with our community first, before doing it. I'll write a blog post for our extension developers in coming hours about problem and solution we have :)\n. @schmittjoh i've written the blog post: http://everzet.com/post/29622748103/behat-extensions-and-dependencies-conflicts. Could you proof-read it and tell me if it's ok? I'll tweet it after that.\nWaiting... :)\n. @schmittjoh well, agree. Updated post Call for feeback section with your comment. It's ok now? :) \n. Yeah, i think we should continue. But instead of writing our very-own packaging script, we should migrate to https://github.com/kherge/Box, enhancing it with this vendors namespace autoreplacement option. What do you think?\n. Nope, didn't started anything. I'll continue working on this solution when i'll have some time (preparations for sfLive:UK). But i still agree that there's a problem here and we need to fix it. And as we didn't received bad responses, i'm willing to continue this route. If you have willing or time - you could continue without me, i'll help where i will be able to ;)\n. @schmittjoh yeah, that is a way to go if you're concerned about interference. I was trying to find some way to move your initial idea forward, but haven't been able to find any clean possibility :)\n. Try to use --prefer-source option when installing with Composer and such problems occur.\n. Not sure about proposal. I think only integration extensions should go there or we'll end up with HUUUUUGE list of proposals during composer installation :) But i'm more than interested in bringing your extension here: http://extensions.behat.org ;)\n. @headrevision just gave you administrative rights to the repo. Forgot to do that at the beginning ;)\n. @headrevision in order to include extension on behat.org, create manual file (doc/index.rst) and phar creation (init.php). Example:\nhttps://github.com/Behat/MinkExtension\n. @headrevision to what? Adding extension to behat.org?\n. It became insanely hard to manage all those extensions on behat.org manually :) I'm building new website which will do that automatically. Sorry for that. I really love and respect your work, it's just my time :/\n. That's awesome!\nKonstantin Kudryashov\n--- PHP developer, BDD evangelist, Scrum master\na: http://about.me/everzet\nb: http://everzet.com\nc: https://github.com/everzet\nOn 13 May 2013, at 23:50, Fabian Kiss notifications@github.com wrote:\n\nFinally I did it by my own. It is still in an early stage, but I will work on it:\nhttps://github.com/headrevision/BehatReporter\n@everzet What do you think about it?\n\u2014\nReply to this email directly or view it on GitHub.\n. 2.4 & MinkExtension?\n. 1. Implement MinkAwareInterface with your class. If you extended MinkContext, it already implements this interface.\n2. After that Behat will set all Mink parameters to this context through setMinkParameters(...) call before each scenario.\n\nSave needed value through defining your own setMinkParameters(...) (in case of implementing MinkAwareInterface) or by overriding setMinkParameters(...) (in case of extending MinkContext - just don't forget to call parent one after it)\n. You can use static variable (which could sound like a dirty solution, cuz it is).\nBetter solution would be to create custom event listener and hook it into behat through extension system.\nHere's how you'd make an extension like that:\n``` php\nfeatures/bootstrap/extensions/users_removal.php\nrequire_once DIR.'/users_removal_listener.php';\nclass UsersRemovalExtension extends Behat\\Behat\\Extension\\Extension {}\nreturn new UsersRemovalExtension();\n```\n``` yaml\nfeatures/bootstrap/extensions/config/services.yml\nservices:\n    fgimenez.users_removal.listener:\n        class: UsersRemovalListener\n        arguments: [ '@behat.mink', '%behat.mink.parameters%' ]\n        tags: [{ name: 'behat.event_subscriber', priority: 0 }]\n```\n``` php\nfeatures/bootstrap/extensions/users_removal_listener.php\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nclass UsersRemovalListener implements EventSubscriberInterface\n{\n    private $mink;\n    private $parameters;\npublic function __construct(Behat\\Mink\\Mink $mink, array $parameters)\n{\n    $this->mink       = $mink;\n    $this->parameters = $parameters;\n}\n\npublic static function getSubscribedEvents()\n{\n    return array('afterFeature' => 'removeTestUsers');\n}\n\npublic function removeTestUsers($event)\n{\n    if (!$event->getFeature()->hasTag('testusers')) {\n        return;\n    }\n\n    $this->mink->visit($this->parameters['base_url'] . TEST_USER_DELETE_ENDPOINT);\n}\n\n}\n```\nThat's it. Now just initialize this extension in your profile:\n``` yaml\nbehat.yml\ndefault:\n    extensions:\n       'features/bootstrap/extensions/users_removal.php': ~\n``\n. Fixed in Gherkin 2.2.5. Update through composer or git:\nhttps://github.com/Behat/Gherkin/blob/master/CHANGES.md#225--2012-09-26\n. If it's an issue - it has nothing to do with Behat. Maybe Mink...\n. Nope, it surely works for us with travis: https://travis-ci.org/Behat/Behat\n. Oh, right. That might be it :/ @MPV ?\n. @MPV could you confirm ?\n. @ctrahey definitions are parsed on-demand by default in v3beta. But if you'd like to add this functionality cleanly to v2, I'd love to accept this PR.\n. @ctrahey I have that feeling you'll love v3 a lot :)\n. Just ignore scenarios that are not critical via tagging. \n. @varas stack traces are hidden behind very verbose mode-vv`\n. Behat contexts autoloader is last big headache for me and subject for removal in future.\n. If you want to fine-tune formatters output, you should extend formatters layer. That's because single execution flow of behat could have more than one formatter with different output streams associated with it. Good news is that today-tomorrow will land huge formatters refactoring that will add multiple additional extension points to default formatters in addition to currently existing ones.\n. PEAR versions are highly outdated - we're not maintaining them anymore. Use Composer version instead.\n. Were you been able to resolve this or you still need my help? Sorry for long answer :(\n. Yep, also updated Travis to check Behat feature suite against all major symfony versions: https://travis-ci.org/Behat/Behat\n. Undefined/pending is not evaluated as failed by Behat by default. Because\nunfinished suite is not failed - it's unfinished!\nIf you want to get failure for yellow scenarios, use '--strict' option.\nOn Tuesday, December 11, 2012, Stepan Tanasiychuk wrote:\n\n@everzet https://github.com/everzet this is what we talked about at the\nconference\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Behat/Behat/issues/221#issuecomment-11237262.\n\n\n\nhttp://about.me/everzet/bio\n. There is a reason why Behat is a BDD (behavior DRIVEN development) tool and\nnot functional tester. Behat is oriented on supporting development, not\ntesting process by default.\nWhen we're developing through user stories, we have tens of undescribed\nfeatures in the suite. But that doesn't mean that achieving green state of\nthe currently developed scenario shouldn't result in green state of CI\nserver - in reality, quite opposite.\nOn Wednesday, December 12, 2012, jekakm wrote:\n\n@everzet https://github.com/everzet Thank you, its works. But I think,\nno matter if build has failed or unfinished - exit code didn't should be 0.\nBecause unfinished status also signalize about some problem.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Behat/Behat/issues/221#issuecomment-11282171.\n\n\n\nhttp://about.me/everzet/bio\n. I'll add BaseScenarioEvent, which both ScenarioEvent and OutlineExampleEvent will extend. This way, you'll be able to typehint BaseScenarioEvent.\n. @Taluu it's a new behavior of github - it'll automatically close issue when appropriate commit goes into master. ;)\n. In TODO.\n. I've added logic to wrap lines after each 70 steps and print current amount of steps evaluated. Sadly, we can't print percents or total amount of steps evaluated before entire suit finishes. This is because of parsing nature of Behat - we simply can't parse all the features before running them - it'll introduce unacceptable response feedback delay. So, Behat parses and runs features one by one, meaning we don't know how much steps it'll run at the end in the middle of the process.\nAnyway, hope this change still will make your life easier.\n. @Taluu read my comment above. It's impossible to do without parsing entire feature suite upfront and that's not how Behat does it ;)\n. Actually no. But I don't see why we couldn't add it by refactoring that horrible PrettyFormatter a bit :)\n. The formatter logic becomes really convoluted with this change, so I'm postponing this feature. At least till 3.1\n. Moved it back to 3.0 as the latest refactoring I'm finishing for formatters easily allows that now :)\n. Landed in develop\n. This change will effectively break Behat for all excepts edge-Symfony2 users.\n. https://github.com/symfony/symfony/pull/6571#issuecomment-11919075\n. Closing this as Symfony2 PR was reverted.\n. This sounds promising, but regretfully I'll not have time to review it this week. I'll surely look into it in a week or two. Sorry for delay ! And thanks for such a complex contribution ;)\n. Sorry for a long wait. I'll look into your PR this week ;)\n. On Thursday, 10 January 2013 at 15:24, Johannes Bauer wrote:\n\nThe path of the vendor directory shouldn't be hardcoded or people aren't able to use a custom directory.\n\nPeople shouldn't use custom vendor directories in the first place.\nBut ok. Make a PR with \"unhardcoding\" path to autoloader and i'll happily\nmerge it if it still works :)\n. But you know what... If you chosen to use custom vendor dir, using custom binstubs for packages also sounds like a reasonable idea ;)\n. Oh, it sounded too harsh. Sorry for that! It's just I seriously can't see any meaningful reason why would you want to change vendor directory :)\n. After conversation with @stof on twitter, looks like Behat binstub handles vendor dir wrong way for now and it should be fixed anyway. So, I'll happily merge your PR if you'll provide any @Haensel or will do it on my own when I'll have some time.\n. @Haensel Ah, nope. Looks like Behat does it's job just ok:\nhttps://github.com/Behat/Behat/blob/develop/bin/behat#L18\nBut on your system binstubs are copied into ./bin (or ./vendor/bin), right? You're on Windows?\n. @Haensel after looking at your example code, it looks like you're using outdated version of Behat. Just update and you should be fine.\n. @stof yeah, I completely missed this patch of yours, brother :) Sorry for that.\n. @Haensel it looks like your problem is solved in develop branch - just update to dev-develop.\n. @Haensel thanks :) And sorry once again for being harsh and inattentive at the start.\n. Thank you very much for raising this and providing contribution!\n. @stof brother, could you try to provide a PR for that? I would be more than happy to merge it and release new version, but sadly I have absolutely no time to work on projects in coming weeks :(\n. No problem, Christophe. It just means I'll do it myself after those weeks :)\n. Just create a separate profile with a @wip tag and dry-run enabled. Running this profile will give you an info you beed\n. Thanks for contribution. I'll try to release new version this weekend!\n. I prefer to use latest version instead of waiting while Travis guy update it :)\n. Thanks for contribution!\n. That's great! Thanks for contribution. Proper communication with users is really important for us :)\n. The logic is the same as with skipping all consequent steps after failing one. If you have an error in login form which results in hook failure, it most likely means all your other scenarios will fail with this same hook. So trying to do same login actions again and again just to see the same exception is a time waste.\nIf you have a hook, that has 50% chance of failure - there's something wrong in your context.\n. Hooks are really loosely coupled with your features. Hooks are not part of your features, they are part of your current testing environment. You shouldn't do anything including such high failure rate as you have inside hooks, just because the more high your hook failure rate is the closer it comes to be a \"part of behavior\". And any part of behavior should be described inside scenario(s), not be a testing environment variable. So yeah, hooks throw catchable, but non-controllable exceptions. Because you should be able to rely on your testing environment configuration, if you can't - there's no point to test further.\nIn your example, @userIsLoggedIn obviously is a part of behavior and application business logic. Failure just gives you a notice that it wants to become a Given I am logged in step inside feature.\n. Ok, it might be related to #240. I think we need an intermediate states before and after scenario to print failures and mark scenario as failed if hook or background is failed. I'll work on it. But no dynamic failing :)\n. You're mixing up language grammar. If you want to assert something,\nyou should state assertion. You would never say \"Then I am on index page\",\nyou would rather say \"Then I should be on the index page\". Same as in\nrussian or in most languages out there.\nKonstantin Kudryashov\n--- PHP developer, BDD evangelist, Scrum master\na: http://about.me/everzet\nb: http://everzet.com\ng: https://github.com/everzet\nOn Wednesday, 6 February 2013 at 13:42, Anton Serdyuk wrote:\n\nMay be I doing something wrong, but every time I want to do something like that\nGiven I have balance \"500\" When I buy some stuff Then I have balance \"400\"\nor\nGiven I am on login page When I log-in Then I am on index page\nNow I can not do it, because behat doesnt differ Given and Then keywords.\nI know, I can do something like Then I will have balance \"400\" instead of I have balance \"400\", but it sounds ugly.\nWhat do you think, should this feature be implemented for example in future releases or not?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/Behat/Behat/issues/241).\n. PHPUnit is not required for Behat. You can use its assertions if its installed, but you're not forced to, about which documentation explicitly states.\n. Well, yeah. The fun part is that preg_match_all() works as you expect, parsing non-existing captures into empty string values :)\n. @Taluu I think current message is quite descriptive already: https://github.com/Behat/Behat/blob/develop/src/Behat/Behat/Console/Processor/InitProcessor.php#L122-L129\n. @Taluu I don't think we should try to make obvious things even more obvious for newcomers by making advanced users life harder. I, for example, don't remember those 2 lines and enforcing me to go to docs every time I'm bootstrapping new project could cause more harm than good.\n. @Taluu but maybe you're right. It's already in the \"Quick intro\": http://docs.behat.org/quick_intro.html#more-about-steps.\n. I think I'm ok to remove those \"3rd-party libraries\" comment from FeatureContext snippet. @stof @schmittjoh what do you think, guys?\n. php code should stay php code for maintenance and convenience sake.\n\nphp\n    /**\n     * @Given /^\u044f \u0431\u044d\u0442\u043c\u0435\u043d$/\n     */\n    public function \u044f\u0411\u044d\u0442\u043c\u0435\u043d()\n    {\n        throw new PendingException();\n    }\nMight sound like a good idea, but it wouldn't when you'll want to do something like:\nphp\n$this->\u044f\u0411\u044d\u0442\u043c\u0435\u043d();\n. And yes, you can remove if\n. Oh, right. Totally forgot about it. @thomasheidenreich switch to the stable version for now and thanks for reporting!\n. @thomasheidenreich I've fixed filtering mechanism on Gherkin side. Now it should filter-out empty features not matching your filter. Please, check!\n. I'm not sure that I like this solution :/ I don't like such deep integration with any assertion tool. Because this means every time new tool becomes available out there, we'll need to update core formatters. What about providing some extension point inside formatter to print exceptions? Like Behat\\Formatter\\ExceptionPrinter ?\n@RichardBradley what do you think? I could lead you in right direction if you want.\n. Hey Richard. Sorry for long answer. What I mean here - I'm ok to include this into core. But everything PHPUnit-related should be decoupled from formatters. What this means is that you should create separate \"ExceptionPrinter\" class, which every formatter will use. By default, formatters could initialize PHPUnitExceptionPrinter if user didn't said otherwise.\n. Agree.\n. Gherkin already supports multiple tags on since entity. @bug @bug123 @story @story/234 ? Why complicating your life with complex search routines ? :)\n. Well, if you'd make a clean PR with this improvement + tests to Gherkin repo, I would be happy to merge it. As of doing it myself - I don't have enough time and interest to invest into it :)\n. I would go with internal counter. Something like f2s5\n. @neochief no, thank you!\n. Thank you!\n. @swirekadam you've broke the build. Could you fix it: https://travis-ci.org/Behat/Behat/jobs/5411214?\n. I reverted your PR. Please, fix it, rebase it and send again.\n. Could you rebase this PR please?\n. Yep, this is wrong & travis proves it.\n. You can also remove $num variable from loop as it's not needed anymore.\n. Thanks @robocoder ;)\n. Yes, it could: http://docs.behat.org/guides/6.cli.html#gherkin-filters\n. @gquemener fix the build & I'll merge it ;)\n. Update your phpunit ;)\n. @gquemener updates?\n. @gquemener done ;)\n. There are common context extensions like behatch contexts, which provides some CLI definitions.\n. There are different approach and not a single one is the best for everyone and every case. You should try them one by one until you'll find the one that fits you best. I'd start from Page Objects pattern and extension from Sensio UK guys: http://extensions.behat.org/page-object/\n. Sorry what?\n. @spolischook glad that it helped. @stloyd thanks for helping guy, Jos.\n. It looks like Mink question, not related to Behat.\n. Wanna try to do it? I would happily help you to prepare and accept your pull request.\n\u2014\nKonstantin Kudryashov\nOn Tue, Apr 9, 2013 at 7:18 PM, Patrick Cummins notifications@github.com\nwrote:\n\nIt would be very useful if a list of 'nearly matching' test statements was displayed whenever an exact match could not be found.\nThis could be done by using a levenshtein function to assign a character difference score to all available tests in the current feature context.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Behat/Behat/issues/272\n. We have a definition search in -dl. I think that solves the issue\n. Yep, it looks nice. I've restarted Travis build. If it passes, we can merge this PR.\n. Oh, wait. One thing, you've forgot to add new option to behat.yml configuration reader:\nhttps://github.com/Behat/Behat/blob/develop/src/Behat/Behat/DependencyInjection/Configuration/Configuration.php#L99-L119\n. Could you resend a PR against 2.5 (at least) and 3.0 (preferably) branches?\n. Which kind of projects get messed by UTF8 and how?\n. @stof yep, it makes lot of sense. Problem is we need to refactor both Gherkin and Behat codebase for that. And I don't have time for that. If someone will make such PR - I would happily merge it\n. Thanks!\n. @trashofmasters I answered in original issue. Tell me if it helps.\n\n@cretz I also wasn't been happy bootstrapping in 2.x, but it was an architectural limitation rather than anything else. In 3.x we have a proper autoloader included with behat out of the box. \n@lisachenko I don't hate AOP. I'm just still waiting for that one example which would prove to be better than OOP. As far as any AOP code or example I've seen to date - it's messy, hideous and clunky way to do composition without actually doing composition.\n. @lisachenko BDD solves communicational problem. It lives and grows in particular cases because nobody before and since did came with a better solution for these particular cases. Problem that AOP tries to solve in programming was solved a long time ago via OOP (specifically: compositionally). AOP replaces need for design and composition by introducing monkey patching. I don't think AOP is a good solution for this problem and I haven't seen it used as a solution for other problems.\nAs of DbC - I don't see how it is impossible with pure OOP. It just needs to be integrated into the way you code without being an afterthought cramped on top of your design, I guess :) DbC itself is a pretty cool concept and I'd like to learn more about it in the future.\nBut overall, design by contract is what we essentially do in BDD. Except that our contract is not a contract - it's communication in examples. In this regard your particular Gherkin syntax in annotation looks extremely close to BDD. So close as it becomes unclear why would one choose to map their communication to one particular method (your method contract example) or even class instead of driving entire system design through it (BDD).\n. Which version of Behat are you using? Either you're using some old buggy version OR you're missing some details. I've just did exactly the same thing you've described but don't have any problems. Just update Behat\n. Will do today!\n. @titomiguelcosta try --prefer-source flag when running composer.\n. Released 2.4.6\n. Nice idea. Could you create a PR?\n. My workaround is simpler - extend RawMinkContext instead of MinkContext when you don't need Mink step definitions: https://github.com/Behat/MinkExtension/blob/master/src/Behat/MinkExtension/Context/RawMinkContext.php\n. Replace MinkContext with RawMinkContext in your use list. To understand namespaces, watch this short video:\nhttp://knpuniversity.com/screencast/php-namespaces-in-120-seconds\n. It is not Behat issue. It is Mink one. If problem still exists - please, reopen it on Mink repo.\n. :)\n. I'm with all hands for JSON formatter compatible with cucumber. Up for a challenge?\n. Moved to 3.1. I think for 3.0 it is enough to have same set of features as 2.5\n. As soon as we'll have missing formatters, core extensions (Symfony2, Mink) updated and a new behat.org. I'd say 1-2 weeks\n. @stof I'm really-really happy with the codebase after all those context PRs merged.\n. @pluseg care to send a PR for next minor - 3.2?\n. No. There's absolutely no reason to rely on element classes as\nMink perfectly understands link IDs, titles, text or wrapped image alts:\nfindLink\nSame as any other named Mink selector (link, button, field).\nKonstantin Kudryashov\n--- PHP developer, BDD evangelist, Scrum master\na:\u00a0http://about.me/everzet\nb:\u00a0http://everzet.com\nc:\u00a0https://github.com/everzet\nOn 28 June 2013 at 23:55:52, Josh Ribakoff (notifications@github.com) wrote:\nI have a CRUD app I'm writing tests for. I have this screen that lists records, and has an edit button next to each record. I want to press the edit button for a specific record.\nCurrently I've had to modify my templates to add a CSS class. For example instead of class=\"btn-edit\", I've had to change to class=\"btn-edit btn-edit-recordA\" and class=\"btn-edit btn-edit-recordB\"\nI created a step for that like this:\nWhen I follow \"btn-edit\" for \"recordA\"\nIs that considered the best practice? It seems odd because I have these CSS classes that exist for no purpose other than testing. Is there a better way? It would be cool to have something like this in the cookbook, because CRUD apps are very ubiquitous!\n\u2014\nReply to this email directly or view it on GitHub.\n. Behat is not your testing tool in that case - Mink is. And more specifically - GoutteDriver. I suggest you to open an issue or better, Pull Request, in that repo instead.\n. I'd isolate all date-manipulation functions into specific script/module/class.\nThen in testing environment (and only in testing environment) I'd replace that\nspecific script with smart double.\nKonstantin Kudryashov\n--- PHP developer, BDD evangelist, Scrum master\na:\u00a0http://about.me/everzet\nb:\u00a0http://everzet.com\nc:\u00a0https://github.com/everzet\nOn 29 June 2013 at 03:41:07, Josh Ribakoff (notifications@github.com) wrote:\nIn unit testing my functions would have a parameter for the current time, so that my tests are deterministic. When testing through the user interface how would I do this?\nBasically I'm testing a calendar. It defaults to the current month and disables the user from browsing more than 3 months into the future or to past months. Therefore I can't browse to a specific month, 3 months from now that would be invalid.\nWith traditional unit testing this is relatively straight forward, I simply specify \"today\" as some specific date, and then request a calendar within a valid range of this date.\nAll I can think of is to add a URL/GET parameter for specifying the current date. That could introduce a security issue if not disabled in production. Would this be the recommended way to specify the date as an input of the program, instead of it using the system date?\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks @Taluu !\n. M-kay.\n. I'll accept such PR easily :)\n. Should also be fixed in v3. Could you confirm?\n. Implemented in 3.0\n. That's not how outlines work. Here's how they work:\n``` gherkin\nScenario Outline: submit guess\n    Given the secret code is \"\"\n    When I guess \"\"\n    Then the mark should be \"\"\nExamples:\n  | code | guess | mark |\n  | 1234 | 5555  |      |\n  | 1234 | 1555  | +    |\n  | 1234 | 2555  | -    |\n  | 1234 | 5254  | ++   |\n  | 1234 | 5154  | +-   |\n  | 1234 | 2545  | --   |\n\n```\nMore here.\n. In v2 you can check registered subcontexts with subcontext API. In v3 you can check all currently used contexts via $event->getContextPool()->hasContext(...)\n. I'm so so so sorry @stof :)\n. @Taluu I think your question is answered here: http://youtu.be/8RqFzqj79iY. There's no main context from now on. Every suite could have zero or more contexts and different suites could have same step definitions defined by different contexts. That said, duplicate step definitions are still forbidden inside same suite.\n. @Taluu inheritance, decomposition and clean design are your friends from now on. And I imagine community will come up with much better abstraction layers using new flexible core. Like page objects for web contexts...\nP.S.: Also, you can get any suite context via a hook event:\n``` php\nprivate $contexts;\n/*\n * @BeforeScenario\n /\npublic function getAllSuiteContexts(ScenarioEvent $event)\n{\n    $this->contexts = $event->getContextPool()->getContexts();\n}\n```\n. @Taluu as I said - if you really-really miss subcontexts - it would be really easy to implement them on top of v3. I just don't think it is necessary - there are much better tools available in the core now ;)\n. @gimler behat v3 technically does not depend on any feature of 5.4 or 5.5. There's no reason to break compatibility with php versions that it actually supports :)\n. @headrevision new website with docs and community extension management is coming.\n. @benscholler going to SymfonyLive:London where me and @MarcelloDuarte will have an awesome talk :)\n. @jhedstrom I know. And yes, dynamism of ContextPool was one of the key considerations during core design phase.\n. Thanks!\n. Fancy a pull request? :)\n. Thank you!\n. 2.5 ?\n. I think GH automatically closed PR because I removed a branch. @mprzytulski could you resend PR against both 3.0 and 2.5 now?\n. Merged. Thanks @mprzytulski !\n. Gherkin is not a programming language, it's a business flow description language. Making it easier for developer to express complex logic you're making it harder for anyone else to read it. And Gherkin already has unnecessary complex structures in it (outlines) so I we wouldn't want to add new ones.\n. @realtebo feel free to fix it: https://github.com/Behat/en-docs.behat.org\n. @realtebo everything works, you see it yourself based on the output you're providing here. What's lacking is not the docs of behat - it's your understanding of basic console applications and basic principles of using them.\n\nI'm a newbie with behat, I'm at my first installation and first tun.\nI'm asking: \"Must I delete the already here feature/*.feature files ?\"\nAnd \"Is it okay that I've a vendor folder under a vendor folder ?\"\n\nYou're installing console application into some folder. This application as any other unix command uses current working directory to search for tests or things to run. Much like when you run ls you see list of files for the current directory, running bin/behat runs tests for the current directory. It's more than natural that running bin/behat from inside behat source folder will run behat tests instead of your projects tests. Because you're not in your project folder, you're in behat folder with behat tests.\n\nAnd no documentation about how to use /bin/behat ....\n\nAs with any unix command execute it with -h (aka help) - bin/behat -h. And you'll see extensive help message.\n\nI'm loosing half a day simply to start to use.\n\nYou're loosing half a day because of your lack of applicable knowledge (CLI & Unix in particular). Stop complaigning about the tools, learn how to deal with it and be a better programmer.\n. Inside your project (Yii) directory:\nbash\n$> curl -sS https://getcomposer.org/installer | php -- --install-dir=bin\n$> php composer.phar require behat/behat=2.4\n$> bin/behat --init\nFeel free to send a PR to docs repo if you'll find a better way to \"explain it to newcomers\".\n. @realtebo there are limits to what introduction doc could do. It mostly does not make sense to introduce people into PHP or UNIX CLI inside Behat quick intro doc - we're just assuming that you know it, because you're trying to use PHP CLI application to write automated tests.\nAs of failing tests, we're continuously testing each Behat commit against 3 latest PHP versions and 3 latest dependency versions: https://travis-ci.org/Behat/Behat. If you found some case (OS / Dependency version) that fails test suite - create applicable issue with detailed information around your environment.\n. Woah. Good catch!\n. Yeah, I'm kinda thinking if that's even possible.\n. Wait. I misunderstood this request completely. This request is about not applying same transformation twice to a same-looking steps in a feature? If so, I'm afraid it goes against the principles of behat - full isolation of scenarios.\n. @sooqini right. I'm afraid the fact that you can mutate multiline arguments inside transformations is a design flaw of Gherkin 1.x (that will be fixed in behat 3.0.0). You shouldn't change arguments inside transformation - that's not the job of transformation, you should return new ones from it - transform one argument into another.\n. @sooqini Gherkin2 nodes don't have setters.\n. Thank you!\n. @bookvik thanks for contribution\n. We don't need to support different versions as Behat uses only a small subset of all available tags and attributes. Common denominator that fulfils all schemas would do. I think that's exactly what I kinda did yesterday in v3.\n. , is \"or\". && is \"and\"\n. @GalCohen here, look at example: https://github.com/Behat/Behat/blob/2.5/features/annotations/tag_filters.feature#L306\n. Documenting obviously broken behavior is not our way - we'll fix it :)\nOn Friday, October 4, 2013, Christophe Coevoet wrote:\n\nActually, they are not totally incompatible. But the translation files\nhave to operate on the generated regex, not on the turnip-style pattern.\nThis makes it quite impossible to translate them (it requires knowing the\nway the regex is generated and relying on the fact that it will not change)\nThis should either be fixed or documented clearly as unsupported.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Behat/Behat/issues/335\n.\n\n\n\nKonstantin Kudryashov\n--- PHP developer, BDD evangelist, Scrum master\na: http://about.me/everzet/bio\nb: http://everzet.com\nc: https://github.com/everzet\n. I think this feature will be awesome for core. And fairly easy to implement\n. I think it could be a great feature. If it doesn't complicate things too much...\n. @stof just updating changelog and tagging. We don't touch phar for now.\n. It looks and works completely different in the latest 3.0 :( I'm working towards preparing 3.0beta9 ASAP\n. @stof never considered other options :) \n. Should be fixed with 3.0\n. @nonlux what you need is a custom extension with custom context initialiser that will inject your shared service into the context. If you need some service in the context - you inject this service, not the whole container.\n. @nonlux there is. It is called \"extension\". And it's as easy as it should be, but not easier. It's hard enough to give anyone enough time to think about rationale of sharing anything between scenarios in your feature. Cuz scenarios isolation was introduced with a good reason.\n. @chillu update to latest 3.0rc1 ? :)\n. I believe it's a bug in Symfony2 DIC config. And it should be gone this way or another in 3.0 as we're not using XML anymore \n. @stof I already seen that one. Will fix ASAP. Now go and celebrate, brother ;)\n. @docteurklein my macbook was gradually dying while I was finishing it. There's something romancing in sending PR over GPRS when you're at home with 60megabit broadband...\n. @stof as I said, I'm really proud of what I managed to come up with. I just hope you guys will love it the same way I do.\n. @stof it will. When I'll be moving Testwork into a separate branch somewhere around Behat v3.1 \n. Doup. Separate repo, not branch.\n. > @stof: I think Behat\\Transliterator should also be extracted (I'm not even sure it belongs to a Behat repo as it is coming from Doctrine 1 initially)\nThat's why I moved it into a Behat\\Transliterator. I'd love to simply use this as a package if somebody provided it. I tried to find it multiple times on packagist. So it seems Behat organization will provide it :)\n. @stof autoloader functionality is not really tight to Behat. In PhpSpec for example we needed it in couple of places. Anyways, it's optional extension and thus could be avoided if there's no need in it.\n. @stof all things are fixed except verbose flag question as it needs more consideration. Travis is also passing now. Thank you for spending some of your holiday time, mate ;)\n. @stof Windows makes me sad :(\n. @stof thanks\n. @stof wait. So there are 2 problems for you:\n1. Formatters share same OutputPrinter. Which should never happen (formatters should have separate instances of printer) and should be insured by DIC\n2. --no-colors is not respected by SnippetController\nRight?\n. @stof I know. I tried to find alternative for -r flag in hhvm but documentation there is rather limited. And I can't install it locally as it takes ages to download all the soruces over GPRS\n. Formatters use isolated printers because they want to be able to change output target for the printer. Independently.\nEverything else uses container-scoped printer. There are no prototype-scoped services in Behat or Testwork. Or I'm failing to see them.\n. But I agree. It is kinda messy. I think I'll switch to using printer only in formatters. Other services will use current default application output.\n. @stof just checked your changes - brilliant work. I think I'll finish with doing what I said previously:\n\nI think I'll switch to using printer only in formatters. Other services will use current default application output.\n\nAnd then I'll merge this PR. We can't use same Output in formatters OutputPrinter because OutputPrinter uses its own version of Symfony OuputFormatterInterface - with different tokens ({+-} instead of <>)\n. @stof thanks for all the help, mate. You're amazing!\n. @stof thanks. And fixed exception presenter.\n. @WouterJ awesome!\n. Coming in 3.1\n. I'm refactoring 3.0 progress and pretty formatters right now because of their complexity. If I manage to tackle composition right, outcome possible would be a much easier html formatter to implement.\n. @DaveMC08 it's somewhere around 0% at the moment. I scratched initial work on HTML formatter because of the need to do complete rewrite in PrettyFormatter\n. @robinmaree PrettyFormatter in 3.0 is just a chain of responsibility. There is nothing to extend. And it was a mistake to extend anything in 2.0 in the first place.\n. @DaveMC08 yes. Same as JUnit formatter. They have more differences than commonalities :)\n. @emwalpole that would be awesome!!!\n. I am really happy with HTML formatter being an extension. @dutchiexl are you still maintaining it? I'd be happy to give it official signal boost.\n. I think keeping HTML formatter outside the core makes sense. HTML formatter always felt like something very different to the rest of formatters. Conceptually it's more like a dashboard and I would like to see it evolving into something like interactive monitoring tool. Being part of core would constraint that.\n. Yes. Was a stupid decision to add it in the first place\n. @WouterJ @stof means stdout from steps and hooks that Behat now captures\n. Also don't forget that hook exceptions now can equally cause failures\n. @WouterJ don't know. I'm not really into JUnit format yet :)\n. Also, how about couple scenarios in the junit feature that will test it against junit XSD's? I think you can find XSDs in Atoum framework. This could solve our compatibility issues once and for all\n. Then the file \"junit/suite.xml\" should be a valid document according to \"junit7.xsd\"\n. Agree with @stof \n. @tchaffee @WouterJ it was waiting for the last PR to land into the 3.0. Which landed there this week.\n. @tchaffee I would love if you and @WouterJ could move this formatter forward.\n. @WouterJ I think you're underestimating amount of things I broke with that refactoring :) But that's the last that big one until 4.0 (or hopefully even later). So take your time ;)\n. @tchaffee keep in mind that the goal of the formatter always was support of CI servers (such as Jenkins), which sometimes use improper formats. Multifiles format came initially from Cucumber. But I don't know why they ended up with that in the first place.\n. @WouterJ @tchaffee expect any support and guidance from me that you need.\n. @stof please tell me if this PR makes as much sense for you as it does for me when you have free time :)\n. That's the last change, I promise :) From now on - just adding features.\n. @stof is it better now?\n. @stof so what do you think? Worth a merge?\n. Do not merge if you're back. I found some other related places in need of improvement.\n. Done.\n. @stof Finder is an optional dependency of it, no?\n. Let's drop it then? :)\n. Woohoo. Great job!\n. Agreed :)\n. Agree. Let's do it!\n. Let's keep it for extensions\n. I'm against empty iterators as it could cause unneeded suite events to be fired.\nBut I agree with removing supports - as we could simply return null from locator\n. Or I didn't get you :/\n. Have read your text again and I think now I get it. And I agree. Let's always return an iterator from locator\n. And let's add empty iterator implementation ;)\n. Suite constraint = additional Suite argument to methods\n. Before class name. And yes, rename the supports method to follow convention\n. @stof great minds think alike :) Yeah, I think it would be a great feature for 3.1. But for now... I think generating best-fit default context for this particular suite is a best option.\n. Let's drop the context setting. So now you'll always need to pass contexts through contexts:\nyml\ncontexts:\n    FeatureContext:\n        param: key\n    CustomContext: ~\nFirst has constructor arguments, seconds doesn't.\nBut don't forget to make sure that those parameters are properly merged (instead of been replaced) during config loading\n. Suite setting.\nyml\ndefault:\n    suites:\n        my_suite:\n            contexts:\n                FeatureContext: { key: param }\n. Let's remove parameters from suite at least.\n. Thus, parameters will simply become $settings['parameters']\n. That's weird. Basically this function is used to color example row columns according to state of the steps in which they were used. It is defined either in TableNode or ExampleTableNode of gherkin\n. @stof could you rebase? \n. Yeah, looked into wrong space\n. Yes, let's rename it to GenericSuite and move to Testwork.\n. Needs rebase\n. Please rebase\n. Ok, it just takes time to show the merge button after last merge\n. Please merge if it passes on Travis \n. Yeah\n. If you're talking about paths on the right, then:\n1. They are highlighted as comment\n2. Which foreground is black (Symfony2 console)\n3. And you can change any color through behat.yml or BEHAT_PARAMS\nI'd love to change color to something else, but we're kinda limited with available options in Symfony Console\n. No it will not :) We have three options here:\n1. Leave it onto user to manually change style color\n2. Make platform-dependant style, which will be black on unix and magenta on windows\n3. Make magenta a default colour for comments\nI think I'm favouring first option as I'm sure you can change background color of terminal both on windows and unix, rendering those defaults useless. Also, magenta color in my scale of importance is on the same level as green - making comments more important than scenario and feature titles\n. Ready to merge. /cc @stof \n. Don't merge it just now - I decided to move context constructor arguments definition to contexts section of the config.\n. Ready to merge.\n. Ready to merge.\n. Oops. You're right\n. Ready to merge\n. @stof done\n. @stof ok, sorry.\n. @stof ArgumentHolder goes away in the next PR, which means there's no point to fix it now and contexts configuration could be updated later.\n. I was thinking about it myself. Lets see if we can land it to 3.0\n. Closing in favour of #452\n. @stof we should probably allow tests only for main branches (2.5, 3.0). What do you think?\n. @stof I had a better idea: https://github.com/Behat/Behat/pull/426 :)\n. @stof I'm totally ok to add integration PHPUnit test in this case :)\n. :+1: \n. So maybe there were some changes in how HHVM handles regexps?\n. I'll add --strict flag to the .travis.yml to avoid false-positives in the future.\n. Resolved\n. @stof agreed.\n. :+1: \n. You can always write more loose regex. I really don't see a need to do it in core\n. No. You can't change priorities of events. Hooks is enough complex concept without priorities :)\nWhat you want is a custom event listener/subscriber and custom extension.\n. @chillu also, check coding style and refactor AnnotatedContextReader::readDocBlockCallees() and ConsoleDefinitionInformationPrinter::printDefinitions() by extracting description logic into private methods as they start to look scary.\n. Yes. Working on it.\n. On it\n. @stof I found a way to compose testers. Preparing PR, you'll love it :)\n. @stof it required bit more work than initially anticipated. I tried 2 different approaches since the first implementation, but finally found one that is even better than the initial one. It's 100% done - I just need to update formatters, because I broke them a bit with this refactoring. I think it's a matter of 2 days. I'll push unfinished work into the temporary branch on wednesday if I didn't finish before that. So that you can check it out.\n. @stof it takes a little bit longer because of formatters rewrite, but I'm really-really-really close. Near there. Today-tomorrow hopefully.\n. Landed in develop\n. :+1: \n. @stof fixed. Thanks!\n. @stof what do you think about it? Mergeable?\n. Good catches @ciaranmcnulty !\n. @nchagrass will look into 2.5 too. Thanks for reporting.\n. It is for 2.5\n. @stof I kinda missed this one :( Could you rebase it???\n. @stof I see two options:\n1. optimize string difference inside context before comparing (easier)\n2. define different feature files for different environments with different tags (harder)\n. @stof news? Do you want me to carry on from this point?\n. @stof leave the test suite on me ;)\n. Close in favour of #496 \n. @stof I'm almost done with that testers refactoring you asked. Today's evening - tomorrow morning will be a PR.\n. Done by finalising most of the core classes and documenting interfaces\n. @stof I still didn't finish (look checkboxes), but it should give you an idea of where is it going.\n. @docteurklein I think it'll help if you can take a look too :)\n. @stof overall feeling about refactoring?\n. @stof it is extremely hard to handle hooks output now. I think I'm missing a concept here with hooks :/\n. @stof I've found the missing concept. Actually there were two:\n1. setUp and tearDown are not as binary operations as I first thought they were - they could produce multiple stats. Thus they should be converted to VOs.\n2. Also, hook dispatching is falsely tight to the event subsystem - they are different concepts and should be separated.\nI'm 70% done with refactoring. Expect new commits this evening.\n. @stof landed. I like this version much-much-much more. Now hooks are natural part of the test cycle, but they are completely decoupled from it at the same time. Please take a look and tell me what you think\n. @stof if you give it a go - I'm finishing pretty & progress formatters and this PR is mergable. All doc block changes and cleanups will come with separate PRs.\n. Pretty formatter is finished.\n. Progress formatter is finished. Now fixing the broken test suite.\n. @stof ready for review. There's still a lot of cleanup and doc block update should happen, but I prefer to do that as a separate PR if you don't mind.\nWhat do you think about it?\n. @stof totally understandable. Sorry for this amount of work and thank you again for all your help. It matters and helps a lot!\n. @stof in terms of following cleanup (if you're interested), I already started work in separate branch: https://github.com/Behat/Behat/compare/feature%2Ftesters-refactoring...optimization%2Flast-cleanup\n. @stof there were literally two last bits left that I hated about RC - testers and formatters. And this refactoring handles them both. After cleaning codebase up following this refactoring, it's a release.\n. @stof fully agree.\n. @stof my plan is:\n1. Fix things you've found\n2. Cleanup\n3. Tag RC3\n4. Give it week or two while I'm finishing behat.org\n5. Go gold\n. @stof I fixed most of the things in this PR and started working on others in cleanup. Do you think this one is mergable or do you want to take more time to take a look at it? If it's ok - merge it, we'll gradually and quickly improve from that point with much smaller PRs :)\n. @stof it'll also be much easier with scrutinizer help: https://scrutinizer-ci.com/g/Behat/Behat :) Thanks @schmittjoh \n. @stof this one is ready for a merge\n. It is mostly about doc-blocks cleanup and final keyword addition everywhere plus small refactorings here and there required to make that possible.\n. @stof fixed both comments. Feel free to merge.\n. @sandersjj where did you got behat from? Composer or phar?\n. @sandersjj are you sure there is no extra spaces anywhere?\n. I just:\n1. Created new suite with feature:\n   Feature:\n     Scenario:\n       Then I wait until I see \"136,00\"\n2. Executed bin/behat --init, bin/behat --append-snippets\n3. Copy-pasted your regexp @Then /^(?:|I )wait until I see \"(?P<text>[^\"]*)\"$/ to the generated step in the context class\nEverything works. Behat finds a pattern and successfully matches it. It should be something on your side.\n. Could you copy-paste part of your context class and feature of interest here?\n. And where is your defined step definition?\n. :+1: tell me if you need any clarification or guidance!\n. 1-2. You're not required to use classes that you don't need to use. All those interfaces And classes there just for simplification of console and HTML formatters. If you can reuse some of them in Junit formatter - amazing, if not - no problem. Code clarity and quality are your primary targets.\n3. This method is for you to provide extension devs with clear extension points (if you want to provide some) for your formatters (look into extensions ::process(). And remember - no extension points is always better than the set of bad ones ;)\n. @WouterJ old listeners didn't need this information. The question is - are the old listeners wrong on not expecting it or is it you just have a need in new listener at hand ;)\n. @WouterJ how's it going, guys?\n. @WouterJ I'll fix this one today.\n. @WouterJ look how https://github.com/Behat/Behat/blob/3.0/src/Behat/Behat/Output/Node/EventListener/AST/OutlineTableListener.php works\n. @WouterJ calculate\n. @WouterJ yes\n. version?\n. @t3dev cool. Lemme check and I'll return to you ASAP (later today) with a bugfix or explanation\n. Woah. I totally forgot about this one. Looking into it right about now.\n. Yup, found it. It's totally a bug. Fixing\n. @t3dev fixed in 3.0. Sorry for such a delay :(\n. :)\n. Yeah, this classname vs class name bugs me too. But we decided to stick with classname just to avoid confusion in the future.\n. Also, --strict now causes exercise to fail when no features found. Even in case when no path argument provided.\n. Thank you @j-d \n. That's MinkExtension and/or PageObjectExtension issue, not behat one. Could you please reopen this issue there so MinkExtension and PageObjectExtension contributors could help you?\n. That's not the bug really. It's a limitation of previous release strategy. We didn't change application version in the console app before tagging a new release. This should be fixed with the new release of 2.5.x and is already fixed in 3.x releases.\n. Why?\n. @seb0zz agree. As this is a new feature and we're following SemVer now, you can expect it to be added in 3.1, which shouldn't take long. For now, you can capture the current scenario using separate BeforeScenario hook.\n. Guys. I'm sad to spoil the party, but please move the issue to Mink repo. It has nothing to do with Behat.\n. Have you resolved this issue?\n. I don't. I'm afraid I can't help you much without debugging on your side as I can't reproduce an issue\n. Closing as there were no feedback on this one for quite some time. @gubarazer or anyone else - feel free to reopen it if no info emerge\n. Great job @Herzult and @stof :) Thank you guys for nailing it!\n. @stof merged. Will fix index ASAP and remove HHVM from allowed failures :)\n. Wanted to do this myself today. Good call, brother\n. If it's unused - drop the method. Drop the code ruthlessly :)\n. I tried to reproduce this one, but I can't. I presume it's too specific for both type of filesystem and the way php is compiled (case-dependent). I'm moving it away from 3.0.0 :/ If you have ideas on how to mitigate this one - PR or directions for 3.0.1 would be useful.\n. @stof I don't think so\n. There is no src/Behat/Behat/DependencyInjection/BehatExtension.php and XML usage in v3.0 against which you're sending PR :)\n. Well, it happens because both system-wide and project-specific behat uses composer autoloader. This allows your project-specific behat to know about all autoloading routines your project classes know about. But this also mean that system-wide behat has its own autoloader with own autoloading routines that know nothing about your project. This is not a bug.\nSolution: always use project-specific behat (this is a right way) or put needed classes under the bootstrap folder.\n. I don't think it has anything to do with behat.\n. @stof no. Why?\n. Don't worry. I did that, but in tag not branch: https://github.com/Behat/Behat/blob/v3.0.0/src/Behat/Behat/ApplicationFactory.php#L45 ;)\n. You wrongly configured your behat.yml. paths setting is suite-related in v3 and hence lives under the suite settings. Run behat --config-reference for config reference ;)\nFeel free to ask clarification if my explanation didn't help.\n. You can also check suite.feature inside behat internal suite for reference.\n. Remove behat.yml from your project and you'll be able to run --config-reference\nThere are plenty of examples over link I gave you in the previous comment - just follow the link. Like this one: https://github.com/Behat/Behat/blob/3.0/features/suite.feature#L146-L153\n. It is expected behaviour. The idea was - if before hook or step itself failed, the system is in unpredictable state, thus you can't run after hook.\nNow, after thinking it through a bit, I'm starting to think that I might missed the core concept a bit. Maybe it's only failing before hook causes step and after hook to be ignored, but the failing step doesn't affect after hook run. Thoughts?\n. So we're talking about structure like this:\n| Before\n     | Test\n | After\nWhich means those scenarios:\n```\n [v] Before\n     [v] Test\n [v] After\n\n[v] Before\n     [x] Test\n [v] After\n\n[x] Before\n     [s] Test\n [s] After\n```\nRight?\n. Cool. I'll prepare a fix and release 3.0.1 ASAP.\n. @edysanchez fixed in the PR. I will release 3.0.1 with the fix as soon as @stof merges that PR. Thanks for reporting this one. Logical bugs are always the most interesting ones ;)\n. @stof thanks buddy :)\n. And v3.0.1 has landed. @edysanchez thanks again for reporting!\n. You should wait for Gherkin changes to be merged before opening PR to behat\n. They do make sense. And this is definitely a bug. Fixing\n. Fixed in 3.0.2. Thanks for reporting it, @FGM !\n. @stof :+1: \n. Solution?\n. Care to PR? :)\n. I think it's a good idea :)\n. Both consumers and implementers. If you have a new responsibility - you add a new interface (with possibility to deprecate an old one).\nThe beauty of your case is that use statements is not a Snippet interface responsibility. Because the concept of use statement is local to an idea of a context class (think closured definitions in contrast). So, you need to add methods to ContextSnippet, not Snippet :) And ContextSnippet not only is a class, it is a final one - meaning you can safely add methods there without introducing any BC break ;)\n. @stof does it?\n. Doing getUsedClasses() is not an AggregateSnippet responsibility, IMO.\n. @stof you can get original snippet (aka ContextSnippet) from AggregateSnippet by calling getSnippet()\n. Oh no, wait. It will generate a snippet.\n. So I think you need to add getAggregatedSnippets() method to an AggregateSnippet. It will give you access to a ContextSnippet, which will give you getUsedClasses()\n. @stof there's nothing wrong in releasing often :)\n. :+1:\n. I don't think we need to consider that as a BC break.\n. There is a snippet generation, which is a generic operation. And there is context snippet generation, which is local to contexts. It happens right now that we generate snippets only for contexts. But I can easily see that snippets could be generated for something that does not need classes to be imported. I think use statement if not local to the context snippets, it is at least local to code snippets.\nI think the right course of actions would be to add AggregateSnippet::getFirstSnippet() method and use it inside context snippet appender to get use statements.\n. @stof ready for review and potential merge!\n. At the end, there's not much BC break here. Just a removal of getSetup() from Before*Tested. Everything else should be fully BC.\n. @stof feel free to merge if no problems found. I'll release v3.0.4 straight away (if you support the idea of bugfix-driven BC break in patch-level).\n. @stof cool. Releasing then\n. You have a broken behat.yml. Could you post it here?\n. @parvbhullar if you're unexperienced with Behat v2, do not use Behat v3 yet\n. Sorry for that.\n. That's weird\n. Are you sure that you have 4 spaces after - FeatureContext::\ntext\n        - FeatureContext:\n            url:\ninstead of two?\n. Also. Are you sure that you're not using tabs in place of 4 spaces?\n. And the last one - are your context arguments actually called $url and $key2 ???\n. I think I know what went wrong there. Correct me if I'm wrong, but your context constructor looks like that, right?:\n``` php\n<?php\npublic function __construct($parameters)\n{\n    // ...\n}\n```\nIf not - ignore further reading and we'll try to debug further. But if I am right, continue reading, I'll explain what happens in details.\nPassing context constructor arguments in v3\n$parameters made sense in v2, because we were passing all arguments together as one value. In v3 however, we have much more care in trying to make context classes as much POPO (Plain Old PHP Object) as possible. In v3 we have much better way to instantiate our context classes :)\nOrdered arguments\nThis includes the fact that now we allow to pass individual arguments to your constructor by order:\nyml\ndefault:\n  suites:\n    default:\n      contexts:\n        - FeatureContext:\n            - [ 'http://url1', 'http://url2' ]\n            - 'ssh_key'\n``` php\n<?php\npublic function __construct($urls, $sshKey)\n{\n    // ...\n}\n```\nFirst parameter in behat.yml becomes first argument to your constructor.\nNamed arguments\nIn addition to ordered arguments, we also allow passing arguments by their name. Like that:\nyml\ndefault:\n  suites:\n    default:\n      contexts:\n        - FeatureContext:\n            ssh: 'ssh_key'\n            urls: [ 'http://url1', 'http://url2' ]\n``` php\n<?php\npublic function __construct($urls, $ssh)\n{\n    // ...\n}\n```\nNotice that order in case of named arguments is unimportant.\nYour case\nNow. What happens in case of this behat.yml:\nyml\ndefault:\n  suites:\n    default:\n      contexts:\n        - FeatureContext:\n            ssh: 'ssh_key'\n            urls: [ 'http://url1', 'http://url2' ]\nand this context:\n``` php\n<?php\npublic function __construct($parameters)\n{\n    // ...\n}\n```\n? Behat tries to find parameters value in the list of your context parameters, can't find it and assigns null. That's the same reason why it works when you group arguments under parameters ;)\n. Glad to help. Sorry for absence of docs for now. They should've fixed this faster :( Working on them in the evenings after work. Expecting to push them this week.\n. @FrenkyNet thank you!\n. @WouterJ I have a feeling you're approaching it from the wrong angle. You don't introduce additional objects just in sake of introducing additional objects. You implement listeners AND printers. And only after that you extract complicated logic into other classes via refactoring. This will save you time on premature optimisation in places where there's none needed. \n. @WouterJ got you. I just had this feeling when you said \"I removed assertion counters because I don't really need them\" that you ended up with bunch of objects that you created prematurely\n. @WouterJ if you can't really do anything in that case - that's limitation. If you can - that's a missing feature.\n. @WouterJ it would be useful to have stdout in the report. Not required though... How can I help you with Example Outline stuff?\n. @peterjmit @WouterJ catch BeforeOutlineTested and record the title you're interested in for future use.\n. Close in favour of #618. Thanks for all your great work @WouterJ :)\n. For quite some time I wanted something like https://github.com/cucumber/aruba for Behat, but never had time (and didn't want to own yet another project) to start something. This could indeed be an amazing addition to Behat family and simplify both core and extensions development a lot.\n. I'm ok with that.\n. Scenario Outline is a collection of Example scenarios. Why would you want to have Background be \"called\" before this collection of scenarios?\n. I'm sorry, I'm not sure I understand you. Could you rephrase, please?\n. \n. @stloyd run composer update and you should be fine.\n. Use -di (definitions information) instead of -dl (definitions list)\n. this is not supported in v3. It is possible though to add such support through extension layer. There were talks at last meetup about implementing such extension.\n. @darsadow there are 3 things that I don't like about your approach:\n1. Special hardcoded behat_parameters.yml file\n2. Making this functionality part of the core\n3. That you inject parameters into the same container as Behat uses for its own services\nTo elaborate on these things a bit more:\n1. I don't like approach with hardcoding special files in the Behat core as I think one (behat.yml) is enough. When I was talking about ability to define own services and own parameters, I was referring to something like:\n   https://github.com/symfony/DependencyInjection/blob/master/Loader/YamlFileLoader.php\n   Where you could have structure like that:\nyaml\n   default:\n       extensions:\n           Behat\\ServicesExtension:\n               imports: [ behat_parameters.yml ]\n               services:\n                   my_service:\n                       class: Your\\Class\n               parameters:\n                   your_param: your_value\n2. I don't believe that environment configuration and service definition belongs to the core. Yes, it is extremely useful if your framework doesn't provide you with service container out-of-the-box. But if it does (Laravel, Symfony2, etc...) - that's what you should use. Symfony2Extension will provide you with ability to use services and parameters defined in the app container, meaning you can use test/prod services/parameters as arguments to your contexts. So the extended functionality with custom container we're talking about here is not needed in those cases. Thus, this functionality is app/framework-dependent and shouldn't be in the core\n3. Your parameters are your parameters and your services are your services. Trying to mix Behat internal and your custom services/parameters in one environment will cause conflicts and dirty dependencies. This move will also cause people to use this extension point to override internal Behat services and parameters, which I absolutely don't want - that's what Extension interface is for. Thus, you will probably want to create and use your own container to define services and parameters, isolated from the Behat container.\n. I tagged the new Gherkin release. Please update composer.json\n. @vaidasm thank you for a bug fix.\n. I think I have a solution. In Behat 3 we have 2 levels of filters - suite filters and profile filters:\nyaml\ndefault:\n    suites:\n        web:\n            filters:\n                ...\n    gherkin:\n        filters:\n            ...\nAnd though I fully agree with @stof on suite filters - they define what suite is and should not be overridden, @bjoerne2's ~devonly seems more like a profile-level filter:\nyaml\ndefault:\n    gherkin:\n        filters:\n            tags: ~devonly\nThese are applied to all suites inside a single profile, which means they are naturally not that tight to the suite configuration. I think it will be logical to override these with CLI options.\n@bjoerne2 @stof what are your thoughts, guys?\n. will do in next patch release\n. Defect is proven to be non-existent by 0911cb5cf5a349f82d41ef113e6be32bebad853b\n. Defect is proven to be non-existent by 0911cb5cf5a349f82d41ef113e6be32bebad853b\n. Agreed\n. Travis doesn't agree with you:\n- https://github.com/Behat/Behat/blob/master/features/syntax_help.feature#L127\n- https://travis-ci.org/Behat/Behat/jobs/26752992\n. It is not part of the core anymore and as @jakzal described there was a very good reason for that.\n. Could you provide a context for this exception?\n. @dready perfect! Thank you\n. Not yet and I don't see it coming quite yet. \n. You need:\nphp\n/**\n * @Transform :user\n *\n * @param string $user\n * @return User\n */\npublic function castEmailAsUser($user)\n{\n    return User::getInstance()->setEmail($email);\n}\n/**\n * @Then :type email should be dispatched\n * @Then a :type email should be dispatched to :user\n *\n * @param string $type\n * @param string $address\n */\npublic function assertEmailDispatch($type, User $user = null)\n{\n    throw new PendingException();\n}\nNote that arguments to methods is actually called $user. Named transformations work only if both your token and argument name in step definition match token name in transformation.\nIf you want to use regular expressions, then you should do partial matching:\nphp\n/**\n * @Transform /^(.*) email$/\n *\n * @param string $email\n * @return User\n */\npublic function castEmailAsUser($email)\n{\n    return User::getInstance()->setEmail($email);\n}\n/**\n * @Then /^a \"([^\"]*)\" email should be dispatched$/\n * @Then /^a \"([^\"]*)\" email should be dispatched to \"([^\" ]* email)\"$/\n *\n * @param string $type\n * @param string $address\n */\npublic function assertEmailDispatch($type, User $user = null)\n{\n    throw new PendingException();\n}\nNote that email is part of the scope - that's how regular expression in transformation knows what to match against. Named scopes just here for you to match definition arguments. They don't work as you expect them to with transformations.\nIf you want to read more about transformations... Use the Source, Luke:\nhttps://github.com/Behat/Behat/blob/master/src/Behat/Behat/Transformation/Transformer/RepositoryArgumentTransformer.php#L104-L118\n. @stof tell me if you need any help!\n. @WouterJ could you create a feature file that reproduces the bug?\n. Thanks :)\n. @WouterJ thanks for reporting. Will be in next minor\n. There's nothing like that in the v3. Maybe in future minor releases, but not in the nearest weeks.\n. @andytson I cannot reproduce it. I think this might be an environmental bug. Could you paste your entire feature and screenshot of it running with a warning here? Plus, your terminal locale would help a lot.\n. Alright! That might be it. Lemme check\n. I found it. Here's what happens:\nBehat prints background steps only once, for the first scenario in the feature. Thus it does not include background steps calculation for the further scenarios. The trick is if background step fails or is pending, that step is shown in all scenarios, which causes this exception :)\nGreat catch, @andytson :) Fixing right now!\n. bin/behat --config-reference\n. autoload works exactly like psr-0 configuration inside composer.json. They both are backed by PSR0 autoloader.\n. Gherkin is not a language for writing tests, it's a language to help you think about business problems in business terms. You can effectively use Gherkin for testing, but that's not what this tool was created for, nor what it will try to ever be.\n. behat -p tickets or behat -p accounts\nYou can not run multiple profiles at the same time in v2. That's one of the reasons suites were introduced in v3.\n. @WouterJ could you rebase it so I can merge?\n. Yup\n. This is a new feature. Thus, it should go into 3.1. I think we should fork the current master into 3.0 before merging new features\n. @stof do we need what? This feature?\n. @WouterJ thank you very much for contribution!\n. This was a bug introduced in the Symfony 2.5 and fixed by: https://github.com/symfony/Console/commit/5e8b3e4e17102eeb807ccd65750302a5402863cb\n. @WouterJ, you failed this test suite.\n. Close in favour of refactored and fixed #577. Thanks @WouterJ !\n. That's what configuration files and environment variable are for. This feature will make things very complicated to CLI users.\n. @stloyd good catch\n. @stloyd could you open an issue?\n. Yup\n. Done in v3.0.11\n. @WouterJ thanks!\n. php\n/**\n * @Given something foo\n * @Given something fiz bar\n */\n. / works for single words only, yes\n. We need a scenario to cover that case somewhere.\n. Thanks!\n. It is a known Symfony\\Console bug. They broke it in 2.5.0 with https://github.com/symfony/Console/commit/396e6c8bb0c63f682fcaecab06692d91dacc06c5\nand fixed it afterwards with https://github.com/symfony/Console/commit/5e8b3e4e17102eeb807ccd65750302a5402863cb\nSo either wait for 2.5.1 or downgrade to 2.4.x.\n. Not sure about table_row:.. syntax (maybe just row:... ?). But otherwise - cool feature.\n. I'm not sure that this syntax is supported by Symfony2 Yaml component\n. I think the problem is that merging of configs is actually handled by Symfony2 Config, not Yaml component. By switching merging responsibility to Yaml we will gain flexibility you outlined previously, but will loose all the merging flexibility Config component provides.\n. @DaveMC08 interesting idea overall, but in the end I still have a major problem with that - low return of investment. Referential feature in YAML is already clumsy on its own (hence limited usage of the feature across the projects). Making it work cross-file will make it even harder to comprehend and at the same time will require tremendous effort to implement and debug such functionality. Simply put - no, it does not worth it.\nBut please, don't take it in the wrong way. Both me and @stof tried to see what you're trying to achieve and attempted to find a way through with your idea. It's just not that feature ;)\n. @stof what do you think overall about this refactoring?\n. Wrap your directory part of the step into quotes and regenerate the snippet. Like that:\ngherkin\nThen I should see <number> images uploaded to \"<directory>\"\nBecause for turnip web/uploads means web or uploads. Like here:\ngherkin\nGiven there is/are :count monsters\n. @stof good catch\n. It is definitely possible in v3. But that feature is more related to MinkExtension than to the Behat itself\n. I need to think about it a bit more\n. Feature <-> Scenario tag relationship is inheritance, not overriding. That's intended Gherkin feature.\n. I'm sorry, but we do not add features to Gherkin. Gherkin is extremely concise and limited language. And that's by design. That's because Gherkin is not a programming language, it's a structure for human collaboration.\n. No. Reuse test and application code, not their description.\n. @nicocans no, you do not run features in steps :) It's simply when you have a feature that describes authorisation, it is fine to go with:\ngherkin\nGiven there is a user \"everzet\" with password \"qwerty\" # Context::thereIsAUser()\nAnd I am on the login page                             # Context::IAmOnTheLoginPage()\nWhen I login using \"everzet\" and \"qwerty\"              # Context::ILoginUsing()\nThen I should be logged in                             # Context::IShouldBeLoggedIn()\nBut if you then just need to be logged in other scenarios, there's no point in repeating those details - so you just define a new step:\ngherkin\nGiven I am logged in as \"everzet\"  # Context::IAmLoggedInAs\nAnd inside this step definition, you do all the things you did before in 4 different steps. You can even reuse methods of previous step definitions:\nphp\npublic function IAmLoggedInAs($username)\n{\n    $this->thereIsAUser($username, 'qwerty');\n    $this->IAmOnTheLoginPage();\n    $this->ILoginUsing($username, 'qwerty');\n}\n. Thank you!\n. I closed this issue because there were no response. Feel free to reopen if that's still an issue and you want to continue.\n. This is not Behat problem. It is Symfony2 issue, at most Symfony2Extension issue.\n. Thanks!\n. Use -vvv to see stack trace\n. It will be an interface that ScenarioTester should extend.\n. yup. It will also introduce the BC break, which will force us to introduce BC layer on top of all that.\n. That's right\n. Tests are failing :(\n. @james75 cool, keep me posted. Great stuff!\n. @james75 can you please refactor JUnitStepPrinter::printStep() so I can merge the PR?\n. @james75 I'll merge it together with others right before 3.1 release soon\n. Gimme some time, guys. I need to sort out the strategy for minor releases first. Real soon.\n. @stof @r1pp3rj4ck we're not discussing semver. Behat follows semver from 3.0.0\n. Rerunning the build. 3.1 is near and this PR is a big part of it. Thanks guys for a great work!\n. I'm not sure I understand and, therefore, agree with changes to OutputPrinter interface and ConsoleOutputPrinter. Need reasoning behind these, otherwise it looks almost ready for merge except comments I made.\n. Closing in favour of #676\n. @ciaranmcnulty we would not support this notation. Turnip already has million edge cases for me to add another hundred :)\n. This is definitely a bug and we'll fix it\n. @fesor I added support for typehints lookup in the method parameters. This will solve your issue as long as you use typehints :) In cases when Behat can't match typehint nor the argument name, I think it's more than logical and expected that we will try to apply arguments left to right.\n. Use\nphp\n/**\n * @Given some stuff\n * @Given or an alternative\n */\nor regular expression. Turnip is simple on purpose ;)\n. @stof as a matter of fact we do exactly the same thing Turnip does https://github.com/jnicklas/turnip/#custom-step-placeholders, but it's called transformations in our land:\nhttp://docs.behat.org/en/v3.0/guides/2.definitions.html#step-argument-transformations (second example)\n. @stof good point. Didn't though about it from that perspective.\n. Shell has too low amount of widely supported colours (only 8) to throw away one of them just because you didn't reconfigure your shell :) My shell background is also black, but I still can see black text in it:\n\n. If you still want to use colourful magenta, use your behat.yml or environment variable to configure it:\ndefault:\n  formatters:\n    pretty:\n      output_styles:\n        comment: [ 'magenta' ]\n. @fchris82 add enabled: false\n. I'd say use v3 and suites:\n- http://docs.behat.org/en/v3.0/guides/5.suites.html\n- https://github.com/Behat/MinkExtension/blob/master/doc/index.rst#configuration\n. Features that are \"not login and not logout and news\":\n~@login&&~@logout&&@news\n. Gherkin is not a programming language. Even though your example is by design overly simplistic, it does hurt my head already in attempt to figure out what it does. I can't even imagine what will it do with someone that never done programming before. So no.\n. I'm closing this PR as it is seems to be abandoned. Please feel free to rebase and resubmit it if that's not the case!\n. Yes you should be able to:\ndefault:\n  gherkin:\n    filters:\n      tags: wip\n  suites:\n    mine:\n      filters:\n        tags: mine\n. One caveat though - it wouldn't override. All filters would be applied together instead.\n. @jakzal @B2F I released new MinkExtension for v3 with visitPath() shortcut method in the RawMinkContext.\n. If you installed behat through Composer (you should've), then you don't need to configure anything on Behat side. Make sure your classes are loadable by Composer and Behat will be able to find them.\n. Not sure I understand your problem. Could you elaborate?\n. Switch to using Composer for both your composer and PEAR libraries - that's much easier solution than what you're trying to do\n. Behat has nothing to do with web pages or elements on them.\n. Try to use @AfterStep hook for that.\n. What @gggeek said\n. Behat has nothing to do with testing website. You probably have an issue with your website or Mink itself.\n. Suites are not deeply merged and that is intentional, because we don't really know the set of parameters there - suites are free-flow data container. What you can do in your case is use YAML references. Example: https://gist.github.com/bowsersenior/979804\n. Thank you very much for contribution!\n. @stof what do you think overall about this?\n. @stof @WouterJ all things fixed, thanks guys!\n. @stof glad you like it :) For now I switched focus to behat.org, but this shouldn't take too long and BC layer + JUnit formatter merge is my next step.\n. I still think there might be some merit in this PR, but I think it might have went way overboard with structural changes. I'll keep it open for now, but will not merge it into 3.1.\n. This was too big of a change. When we come closer to 4.0, we'll probably end up doing something similar, but for now - I'm closing this thing. I'll keep branch hanging for future references.\n. EnvironmentReader must return arrays according to its interface:\nhttps://github.com/Behat/Behat/blob/master/src/Behat/Testwork/Environment/Reader/EnvironmentReader.php#L35-L42\nYou're intentionally breaking the contract otherwise, where it stops being my responsibility to fix it :)\n. I wish PHP had return and collection type-hints, so I can enforce it, but it doesn't, so I can't. Hence, it is your responsibility to respect interface promises defined in phpDoc.\n. Behat is a single-command application. You can add custom options using console controllers, but we wouldn't support custom commands.\n. RuntimeTransformation works only with predefined types of transformations. What you need is a dynamic argument transformer. You need to implement and register this:\nhttps://github.com/Behat/Behat/blob/master/src/Behat/Behat/Transformation/Transformer/ArgumentTransformer.php\n. I'm sorry, if these interfaces do not exist, then how does Behat initialise and use your FeatureContext class that obviously implements them?\n. vendor/behat/behat/src/Behat/Behat/Context\n. Try to configure your PhpStorm properly so it properly indexes your vendor folder, I guess. It's definitely not a problem with Behat. ContextInterface was the case in 2.x. In 3.x it was renamed to Context. Where does your IDE finds Context is a mystery to me, but definitely not Behat's fault.\n. Turn off or properly configure XDEBUG. Or debug your extensions to not do things recursively\n. @stof very easy to reach if you're using multiple frameworks at the same time.\n. @timiTao on a side-note - disabling XDebug will also give a significant performance boost to your tests.\n. Thanks for reporting. This is definitely a bug.\n. Gherkin is complex enough as it is. I don't see this functionality in the core. Feel free to build custom extension or join forces with Ryan from KnpLabs - they're building something like that.\n. Gherkin is not a programming, nor testing language. This is a language that is supposed to simplify the way you talk with non-technical stakeholders, not complicate it.\nI'm ok that Knp built the extension to lean Gherkin more towards testing, but that's not the direction Behat will ever go officially. That's not the problem we're trying to solve, because it was already solved very efficiently with PhpUnit, Codeception and other pure testing tools.\n. Please use the mailing list for discussions. This repository is for development of Behat.\n. Please use the mailing list for discussions. This repository is for development of Behat.\n. @kendoctor I didn't thought about it :( I'm sorry. I'm planning to establish a forum on Behat.org, where you also will be able to discuss these topics. In the meantime I guess IRC (#behat@freenode.net) is our best option for China :(\nI'm sorry again for inconvenience.\n. In order to automate implementation from the features, your features must describe solutions. And even though it is possible, it is not the way of Behat (Behaviour Driven Development).\nIn Behaviour Driven Development you describe problems, so that developers can come up with right solutions. You do not describe how you would solve particular problem, you just discuss what this problem is about.\nWhat you want to do is probably possible to certain extent, but goes against what Behat as a core is. I'd advise you pursue custom extension, so people can join you in your way of using tool. But that's not what Behat was built for, nor it is something that I see in the core of the tool.\n. Thanks buddy :)\n. @WouterJ commented on your remaining questions\n. @WouterJ what's so special about current implementation of Statistics?\n. > at last, if we create an interface Statistics, we have to rename the Statistics class, which means it won't get an obvious name...\nThat option. The question I asked 10 min ago - if Statistics is a new interface and old Statistics is just a particular implementation of that interface - what's special about that implementation?\n. ... answering what's so special about JUnitStatistics too might help finding what's special about original Statistics\n. @adalbertwysocki my comments about Statistics are still standing\n. :heart: TotalStatistics and PhaseStatistics\n. @WouterJ rebase :)\n. :+1: \n. Great job everyone involved. Especially @WouterJ and @james75. Stellar!\n. :+1: \n. You need to install and use latest composer as part of the build. We can't rely on Travis guys to keep Composer updated.\n. fair enough\n. I'm happy with this changeset for now, so I'm merging it. Thanks @WouterJ ! Keep up the great work.\n. Cleanup environment (database, cache, APIs) after every scenario using @AfterScenario hook:\nhttp://docs.behat.org/en/v2.5/guides/3.hooks.html\n. Use very verbose mode for that. It's -vv :)\n. Glad that I could help :)\n. Can you open a new issue with a clear explanation like you just gave in the last comment?\n. Perfect. Thanks!\n. You need to fix failing tests. I reran the test suite just now.\n. Perfect! Thank you very much :)\n. Thank you!\n. Yes, create your own CLI Controller by implementing:\nhttps://github.com/Behat/Behat/blob/master/src/Behat/Testwork/Cli/Controller.php\n. @dutchiexl yes, but don't forget to tag it as a controller, so Behat will be able to find it in a big list of services and add this definition to the container (like this).\n. 1. I don't understand what you are saying. Can you rephrase?\n2. It seems your issue is with Behat/MinkExtension, not Behat/Behat itself. Can you reopen an issue with rephrased clear explanation there instead?\nThanks!\n. I wouldn't say it is a bug. But it's definitely a missing feature from 2.5.\n. Thanks for reporting @rajeshtaneja :)\n. You seem to use libpng and it tries very hard to communicate to you that you have incorrect sRGB profile. As @stof said - it seems to have nothing to do with Behat itself.\n. They would. But why would you rerun on CI?\n. @timiTao Travis tests Behat on unix. I'd still love to check if we're running properly on Windows.\n. @stof awesome! Thanks for doing it.\n. Gherkin is not a programming nor testing language.\n. Please reopen this issue in the Symfony2Extension. This is a Behat repository\n. Woah :/\n. I'm closing this issue as it is seems to be very old and might as well have been fixed. Please reopen with updated stats if that's not the case!\n. Nodes in Gherkin do not have access to their parents to eliminate cyclic references and improve performance. That is done at a cost of loosing some functionality like the one you show.\n. Do not use out-of-the-box stepdefs?\n. @stof same way we would handle any other BC-prone code, I guess - do not touch it until the new major. We can introduce separate \"fixed\" version of translation and advise people to use it on their own risk between majors.\n. Thank you very much for contribution!\n. @timiTao no BC breaks planned.\n. As soon as behat.org is done, I'll switch to 3.1\n. working on it now\n. I'm sorry but this has nothing to do with behat. Behat does not use MySQL or any other database for any purpose imaginable. This error comes from your code Behat has no control over.\n. This is ok'ish, but a very fragile setup. I'd much prefer explicit traits or parent class with shared logic.\n. Use Symfony2Extension to integrate with Symfony2: https://github.com/behat/symfony2extension\n. I'm sorry Behat has nothing to do with Laravel. You probably should point your question to:\nhttps://github.com/laracasts/Behat-Laravel-Extension\n. You could probably make it a bit faster, but not by much.\nAs Jakub said, going through UI in your tests is your personal choice, not something BDD or Behat dictates. And going through UI will always be slow, because instead of simply exercising code directly you go through the entire app + phantomjs stack.\nI'm closing this issue as it's completely unrelated to Behat.\n. Thank you very much for contribution!\n. Not enough context. Could you debug?\n. I'm closing this issue as it is seems to be very old and might as well have been fixed. Please reopen with updated stats if that's not the case!\n. @stof I agree.\n. Care to contribute: https://github.com/behat/docs ?\n. More explicit setting should always override more implicit one. Anything else causes a lot of confusion.\n. Configuration given by command line is the most explicit one. Flags that you use when you run behat override both configuration and environment variables. Here's the order of configuration loading:\n1. Environment variable\n2. Configuration file\n3. Explicit command line flags\nI find this order very intuitive and the one creating least confusion. The fact that you're the first person in couple of years questioning it kind of proves that point :)\n. I'm ok to go with BEHAT_ENV_PRECEDENCE. Feel free to open a separate PR\n. I'm closing this issue as it is seems to be very old and might as well have been fixed. Please reopen with updated stats if that's not the case!\n. I'm closing this issue as it is seems to be very old and might as well have been fixed. Please reopen with updated stats if that's not the case!\n. @sroze send a PR in\n. @sherakama nice. Thank your for PR. I'll review it ASAP\n. @bpaz care to send a PR?\n. Yes, but you need to parse them out manually in your stepdefs.\n. Please use Yaml links and references instead.\n. Use suites and profiles inheritance instead. Every profile inherits entire configuration from default, including suite. That means if you provide your entire multisite configuration in form of different suites under default, you then will be able to add custom profiles that will enable or disable particular suites on premise. Example: https://github.com/Behat/Borg/blob/master/behat.yml\n. It seems to me you need to use hooks.\n. I'm closing this PR as it is seems to be abandoned. Please feel free to rebase and resubmit it if that's not the case!\n. Thank you very much for contribution!\n. Feels like it is related to https://github.com/Behat/Behat/issues/802#issuecomment-167989339\n. I'm afraid we'll need to live with this one till 3.2. Unless somebody comes up with a quicker BC solution.\n. I'm closing this issue as it is seems to be very old and might as well have been fixed. Please reopen with updated stats if that's not the case!\n. This wouldn't work as container is not rebuilt between suites in a single profile. Use profiles for extension-bound configs. However, if what you want is custom configuration for the same extension per suite - you already can do it if extension is built that way. Simply put - it is extension responsibility to provide you with a config that allows drastical change of environment between suites.\n. Thank you for reporting it. Should be fixed in 3.1!\n. Can you show me your scenario?\n. I'm closing this issue as it is seems to be very old and might as well have been fixed. Please reopen with updated stats if that's not the case!\n. I'm closing this PR as it is seems to be abandoned. Please feel free to rebase and resubmit it if that's not the case!\n. This problem seems to be unrelated to this particular codebase. Feel free to reopen if I'm wrong.\n. @MartijnBraam could you confirm that RC1 still has this bug for you?\n. @clemens-tolboom ?\n. @clemens-tolboom thank you!\n. @kerasai transform for tables works differently. This is a separate issue.\n. @clemens-tolboom any news?\n. The best thing to do here is to use hooks if you want to continue with your course of actions. That said, it seems to me you're doing something extremely complex and there should be a better way to achieve your outcome than hacking Behat event system.\n. working on it\n. I like the idea, but think it belongs in custom extension. Happy to promote yours @Sam-Burns ;)\n. Could you provide a failing test case in the Behat test suite? I want to help, but need more information.\n. I'm closing this issue as it is seems to be fixed. Please reopen with updated stats if that's not the case!\n. default:\n    formatters:\n        progress: true\n        pretty:\n            output_path: %paths.base%/build/behat/summary.html\n            output_decorate: false\n        junit:\n            output_path: %paths.base%/build/behat\n. This problem seems to be unrelated to this particular codebase. Feel free to reopen if I'm wrong.\n. Sounds to me like you need a custom https://github.com/Behat/Behat/blob/master/src/Behat/Testwork/Environment/Handler/EnvironmentHandler.php\n. @Taluu can you add a test so I can merge it?\n. ## TLDR;\nThere are already tests that cover this case. The reason why those weren't failing is because of defensive/type-based programming on my side. Basically those constants are used to guard us from bad behaviour. Sadly they are made redundant by the second layer of type-check guards.\nLonger version\nThose constants are used during creation of hooks and scopes. They are then used by the HookRepository to fetch callbacks appropriate for a just fired hook. Technically, there is a bug and in case of ScenarioHook this guard will be ignored and will go on firing both Feature and Scenario hooks at the same time. So why doesn't it fail? Keep reading.\nIf hook and scope name check out (even wrongly), we pass forward to filtering guard. Filtering guard checks if the kind of hook (all hooks in case of Behat) is filterable and if so asks it to filter itself based on a given Scope. If you drill down to RuntimeScenarioHook, you'll see that the first thing this thing does is type-checks the scope you pass.\nBasically it means that hooks have two guards in play - name-based and type-based ones. This is redundancy and an obvious design flaw. I shouldn't have checked type inside RuntimeScenarioHook and should've followed tell-don't-ask instead of querying the Scope. This way already existing tests would've highlighted the name-guard bug.\nThis PR and implications\nWith two guards in place and commitment to BC, there's not much we can do. I'll still merge this PR as it should potentially provide very minor performance optimisation by avoiding unnecessary type checks.\n. @Taluu thanks for spotting!\n. @Taluu why don't you just echo? echo is the new printDebug, you don't need to implement anything.\n. @Taluu which formatter do you use?\n. short formatters do not output debug information. Switch to pretty and you'll see the output properly.\n. We wouldn't support PyString transformations. Running regexes on every single multiline in the project does not seem to produce good results, nor there are any simple ways to filter only particular PyStrings.\nThis is one place where generic solution probably wouldn't work.\n. Use hooks and temporary state in your context (or trait). That's nasty, but will work.\n. working on it\n. I think upgrade hurdle was always overrated. We could do better job at docs, though. @djdevin care to contribute a cookbook to https://github.com/behat/docs ? :)\n. I like the idea. Care to PR?\n. @Soullivaneuh presumably you don't want to change the configuration setting. You just want to change defaults, right?\nCurrent default for Gherkin cache path value is https://github.com/Behat/Behat/blob/ca2c78e4695ee120d44363fd8ea3b3fc28330ff7/src/Behat/Behat/Gherkin/ServiceContainer/GherkinExtension.php#L87-L91\nwhere's you want it to be something like https://github.com/Behat/Behat/blob/ca2c78e4695ee120d44363fd8ea3b3fc28330ff7/src/Behat/Behat/Gherkin/ServiceContainer/GherkinExtension.php#L142 where instead of %paths.base% you would use %paths.cache%, defined/calculated somewhere else.\n. Try renaming your FeatureContext to something else. I think you stumbled upon a known configuration bug where Behat always loads FeatureContext whenever it is present, even if you didn't told it to.\n. I checked and Behat works as expected. It seems what you were trying to do is having multiple custom contexts registered and extending base context class. In this case each of your contexts will have same hooks ran. This is expected and perfectly normal behaviour. Find better ways of reusing your steps and hooks outside of inheritance.\n. Convenience is the core reason for that. You seem to have hit and edge-case where it kind worked the other way around, though. Ideas?\n. Did you find the source of the issue?\n. I'm closing this issue as it is seems to be very old and might as well have been fixed. Please reopen with updated stats if that's not the case!\n. Working on it\n. Thanks guys!\n. This problem seems to be unrelated to this particular codebase. It seems to be a Mink/PhantomJS issue and at best belongs to https://github.com/minkphp/MinkSelenium2Driver. Feel free to reopen if I'm wrong.\n. Thank you very much for contribution!\n. I didn't go away, but formatters settings changed drastically since RC. The way you configure any formatter now is either with --format-settings:\nbehat --format-settings='{\"paths\": false}'\nor with BEHAT_PARAMS environment variable:\nexport BEHAT_PARAMS='{\"formatters\": {\"pretty\": {\"paths\": false}}}'\nCheck https://github.com/Behat/Behat/blob/master/features/format_options.feature for examples\n. Given I do something when the scenario start\nThen the A give OK\nAnd ...\nAnd ...\nBut ...\nThen the B give KO\nAnd ...\nAnd ...\nBut ...\nThen I do something at the end of the scenario\nScenario makes me think you're trying to use Behat for something it wasn't intended to be used to - not BDD. It looks to me that you're trying to use Behat as a pure testing tool and in this case I'm not surprised that you're hitting hurdles.\n. This complicates handling of environment variables way too much. I'd like to keep already complicated logic as it is without overcomplicating, so I'm closing this.\n. Nice! Thank you very much for contribution!\n. @stof I don't think so.\n. If that attribute wouldn't confuse existing implementations of JUnit (Jenkins and such), I'm all for it.\n. Here are my thoughts on this one after reflecting on it for some time.\nSupporting outdated versions of PHP is technically free for us - it does not require additional effort (yet?) or care at the moment - it is just Travis running the test builds and in most cases when tests get broken on 5.3 or 5.4, they also get broken on 5.6 (which is not EOL). So from purely practical perspective, there is absolutely no reason to drop support for 5.3 and 5.4.\nThat leaves us with the political reason alone - promote abandoning of non-supported language versions for projects. And event though I do understand that driver, I don't think it's either necessary, nor effective as Behat usually is not a runtime, but pure development dependency. Pushing Symfony or other major libraries to drop support for older versions of PHP is a much more effective argument for upgrade.\nWith those two points in mind, I don't feel comfortable dropping support for versions that are technically supported in the minor version. I do, however, support drop of EOL PHP versions in the next major version of Behat and that is most-likely what will happen when we get to 4.0. But before that, I don't think that benefits (upgrade promotion) outweigh costs (possible confusion and BC argument).\n. Provided an argument in the related issue. Closing this PR as it is non-merge able anyways ATM. If the discussion in related issue will arrive at conclusion of progressing with this PR - feel free to rebase and reopen it.\n. Argument resolvers are an extension point in Behat. They provide no userland functionality out of the box, but some extensions can provide their own support for those. Like Symfony2Extension:\nhttps://github.com/Behat/Symfony2Extension/blob/master/doc/index.rst#injecting-parameters\nhttps://github.com/Behat/Symfony2Extension/blob/master/src/Behat/Symfony2Extension/Context/Argument/ServiceArgumentResolver.php\n. reopened original issue\n. I don't think there is. You can listen to events and estimate time in your own listener though\n. @peterjmit that would be awesome if you could PR this one!\n. I did notice that too, but thought it was to do with the lack of readline module in my php7 environment. Did something change in regards how SIGINT capture works in php7?\n. Couple actually:\n1. Minimise amount of fragile UI tests you have\n2. Manually handle spinning inside your step definitions\nI wouldn't allow Behat core to support flaky tests. That is never right solution for those.\n. Thank you very much for sending pr. Sadly I cannot accept this one.\nI think this is taking conventions too far. There is a fine line by crossing which conventions become both too powerful and too confusing. For the use case you provided I definitely believe explicit configuration based on --config switch is better.\n. Nope.\n. You should use --out=std for standard output. Look for examples here:\nhttps://github.com/Behat/Behat/blob/master/features/multiple_formats.feature\n. If you get a fatal error and you are on PHP prior to 7.0 - that is expected outcome. On PHP prior to 7.0, we can not recover from fatals and, obviously, can not generate the proper report.\n. I second @stof advice. Having a feature with 752 steps sounds crazy to me, 45k is plane insane. You are basically telling us that your features are unreadable to humans, yet you invest into writing and automating them in human-readable language.\nMy suggestion would be either to invest heavily in humanising your features by splitting them into much smaller, cohesive functionality slices OR to move to a proper end-to-end testing framework and stop pretending you do BDD.\n. Can not replicate on latest version. So I assume it was either fixed somewhere down the road or it is something very weird and environmental for you.\n. Please feel free to reopen if you can replicate on latest 3.1 version.\n. @Hermannovich this is a different problem and 3.2.1 (just released) should fix it for you.\n. @rajeshtaneja thank you for sticking around and finding a way to fix this one.\n. Thank you very much for contribution!\n. In my opinion that would complicate things without a good reason.\n. Should be fixed in master\n. Tests are failing.\n. Thank you very much for contribution!\n. You can use Yaml syntax for that:\nhttps://gist.githubusercontent.com/bowsersenior/979804/raw/24fd472a16c60e42ad2996a771c7f3121a73bafa/stooges.yml\n. My current thinking is to implement VO support with 3 behaviours:\n1. Automatic fromString transformation by default\nWhen no other transformation found, but the argument is type-hinted, Behat will attempt to call Typehint::fromString($argument). This part is already implemented in #907 \n2. Pure type-based based transformation for php7\nPure typed transformation, that matches all type-hints:\nphp\n/**\n * @Transform\n */\npublic function toUser($user) : User\n{\n    return User::fromString($user);\n}\n3. Both named and typed transformation for php7\nIn case you want to handle specific case differently, you'll be able to use both variable name AND type. Transformation will get applied ONLY if both match the argument:\nphp\n/**\n * @Transform :name\n */\npublic function toNamedUser($name) : User\n{\n    return User::named($name);\n}\nOrder of application\nThese will be applied in following order: 3, 2, 1. The first found wins.\nThoughts?\n. @ciaranmcnulty you're having a problem with nudge or with default support for fromString? It's not quite clear from your brief comment.\n. Implemented\n. Thank you very much for contribution!\n. This is intended behaviour. To enforce failure on pending or undefined steps use --strict flag\n. As @stof said, you're not getting away from that check - you're just changing the nature of it. And between checking for type and checking for null, I prefer type. Because misuse of type always yields clearer exceptions than misuse of null.\n. It's here now: http://docs.behat.org/en/v3.0/user_guide/command_line_tool/formatting.html\n. Thank you very much for contribution!\n. Because you're running from inside Docker, MinkExtension can not figure out how to show you the content of response. You could either use show_cmd configuration option of MinkExtension or use print last response instead of show last response\n. If Behat is a dev dependency in your composer.json, you don't need to configure anything. Behat by default will use Composer autoloader, meaning every class Composer can find, Behat will be able to find too. Simply configure PSR-4 autoloading in Behat and it should work. I think you're overthinking it.\nI'm closing this - please, feel free to reopen if you think there's still major documentation issue.\n. Moved the ticket to Gherkin repository\n. Regex always captures parameters as strings. It is your responsibility as definition writer to cast the capture into the type it needs to be. strval attempts to guess the type string represents - in your case it is integer, not string.\n. Yes it can. Check\nhttps://github.com/Behat/Behat/blob/master/features/extensions.feature\nhttps://github.com/ciaranmcnulty/behat-stepthroughextension\nfor reference\n. I'm closing this PR as it is seems to be abandoned. Please feel free to rebase and resubmit it if that's not the case!\n. I'd suggest to use Yaml references for anything crazy with the configuration :)\nhttps://gist.github.com/bowsersenior/979804\n. Yes. And all columns should be present in the table.\n. I'll build and attach phrase to releases from now on. Didn't know people were using them :)\n. I'm closing this issue as it is seems to be very old and might as well have been fixed. Please reopen with updated stats if that's not the case!\n. Good catch. Will do this evening!\n. Good one. Will fix this evening.\n. I'll move RuntimeTransformation back. I don't mind with triggering deprecation errors yet, it's not as current of occurrence as in Symfony ATM.\n. \ud83d\udc4d \n. > Thus far Behat has not introduced any conventions to how users design or write code, and I don't think it's appropriate for the core app to do so.\nWhy?\n. Ok, it seems we're overwhelmingly against this feature in its current form. I then see two options for this PR:\n1. Close it like it never happened\n2. Do what @stof suggested. Remove the fromString not found exception by silently checking for fromString existence before transformation. If method exists - automatically use it for transformation, if not - silently skip the transformation\nHappy to discuss and agree on either. Thoughts?\n. @jakzal, @pamil I'd keep discussion about wider object transformations improvement (like 5.x support and such) outside of the scope of this PR and keep it in the #863.\n. @sVeloper sounds like Symfony2Extension bug, rather than Behat itself.\n. Folder into which you try to write output must exist. Reopen this issue if that doesn't help\n. @sroze good catch. That totally wasn't been intentional.\n. SimpleArgumentTransformation interface didn't exist until 3.2. So we're all good :)\nhttps://github.com/Behat/Behat/tree/v3.1.0/src/Behat/Behat/Transformation\n. @pamil I'm not planning on adding it myself, but if you want to - please go ahead.\n. Feels like something environmental in your specific context...\n\n. @generalconsensus thanks for contributing for the first time!\nThere are couple of design issues with your PR. I would be happy to either fix them myself for you or give you indication and explanation on how/why to fix them yourself (as a coaching exercise). Either way is fine with me :)\n. @generalconsensus I went through your solution thoroughly and am afraid it wouldn't work as you probably expect it to.\nFirst of all, you're still interacting with SuiteTested. That event is fired after all features in a suite were tested.\nYou also change the behaviour of JUnitSuitePrinter::printHeader() function to use the feature filename instead of suite name. JUnitSuitePrinter::printHeader() is called once before the suite execution. That filename you generate will be shared across all features in the suite.\nThis all means that if you have 1 suite with 3 features, you will still get 1 xml file at the end. All you did is made that 1 xml file to be named with a first feature filename instead of suite name.\nIf you want to actually proceed with your idea, I'd suggest you to extend the test case and focus on describing how the new functionality will work with suites, features and files. Use https://github.com/Behat/Behat/blob/master/features/junit_format.feature as a starting point.\nIt also seems to me that you might misunderstand what suites actually are (forgive me if I'm wrong). If that's the case, please read the official intro: http://docs.behat.org/en/v3.0/user_guide/configuration/suites.html.\n. I'm closing this PR as it goes in the wrong direction. @generalconsensus please feel free to open another PR when you've written examples (in form of tests under the features/ folder) on how your change will work in the following cases:\n- 1 suite with 1 feature\n- 1 suite with 0 features\n- 1 suite with 3 features\n- 2 suites; 1 suite with 3 features, 1 suite with 2\nEven without automating it - just describe the change you expect. We would be happy to help from that point. But until then you need to do some initial thinking on your own :)\n. @mathroc this logic wouldn't work if your scenario has backgrounds.\n. Sadly the way StepTester is implemented, it is not as trivial of change as I'd hope to and would require huge ripples of BC-support layers throughout the codebase if it is to be implemented.\nSadly this is one of these points, where I need to consider the value of feature against its cost and at this moment its overwhelmingly too expensive for what it is. So for now, I'd update documentation to explicitly state that step hooks don't work with tags.\n. Sounds like a bug in Mink or XDebug. Can't imagine anything in Behat core causing this.\n. @ciaranmcnulty @jakzal \n\n. > Fantastic! Will this work with --append-snippets too?\nyes it will\n\nI think in the case of only one context existing you could default to that one?\n\nfirst context is the default choice - just pressing \u21a9 will result in that context being selected.\n. @ciaranmcnulty it would. Because --snippets-for without value will ask you the same question for each suite. This question provides a fine-grained control not only to which contexts to append snippets to, but which suites to ignore for now:\n\n. Something is wrong with the autoloader. Play with the vendor/bin/behat script.\n. @alberto56 any news?\n. @alberto56 ok, I debugged a bit and apparently this is a known bug in composer.\nPlease track this issue in the Composer repository as there's not much we can do to fix it on our side. In the meantime, the simplest solution for your case would be to not name your project folder behat.\n. @alberto56 you're welcome. Quite a tricky one you've discovered ;)\n. My initial thought is that this feature is a newcomer nightmare. Especially with your intended use of sharing state across contexts.\n. I don't see how you're simplifying anything. You're exchanging explicit complexity with implicit one. Need for sharing between contexts highlights wrong choice of your context boundaries, not the problem with the tool.\n. @jakzal split contexts according to your domain boundaries, not technical components. Bounded contexts have natural loose coupling.\n. bounded contexts also have natural limit on dictionary used in them :)\n. @gorghoa I'm afraid not :) There are considerations we as maintainers need to take into account when accepting something into the core or not.\nBiggest problem with this PR and the concept behind it is that it adds cognitive overhead to the tool that is already pretty heavy on implicit concepts. And even though slight cognitive overhead might not be an issue for power users like you or @sroze, it absolutely will be an issue for newcomers - people that just get started with the BDD.\nLogic applicable primarily for power-users deserves to live outside of the core - in its own extension.\n. This is not the hack, this yaml feature is the reason why we never planned any custom merge capabilities.\n. Thank you for the thinking and work on this one, but I'm closing it. See the reasoning and explanation in #924\n. > Do we have a versions policy anywhere?\nGood shout.\n. @ciaranmcnulty added versioning policy\n. Just to be crystal clear - this PR is only about dropping support for 2.0-2.6. 2.7 support will remain no matter the outcome of this PR - it is a LTR and killing support for it for no reason is like shooting ourselves in the foot.\n. After thorough thinking on this one I decided to postpone the bump until the 4.0 release. Here's my thinking:\n1. There's no technical need to bump entire Symfony dependency to 2.7. Some dependencies that did need to be bumped were already bumped in their own PRs\n2. If we remove support for unmaintained Symfony versions, it would make sense to also remove support for unsupported PHP versions. And we already agreed that it is too big of a change mid-major\n3. We will likely need to bump minimum Symfony version to 3.x again in couple of months with 4.0 release. That seems excessive\n4. Bumping versions required explicit change of policy mid-major. And I'm not quite comfortable with what it means\nOverall, it's the point number 1 that I think swayed me over. If there's no technical need for a bump, there's no need for a bump.\nOnly meaningful reason left I see to do it is to nudge people to upgrade to latest Symfony. Behat is opinionated in many ways, but which version of Symfony you use is not in that list.\n. I don't feel like we exceeded the capability of 3.x branch and I also do not yet have a clear deprecation plan. So maybe after 3.2 or 3.3.\n. Behat 2 is not supported anymore. Feel free to send PR to docs\n. Added notes to the 2.5 branch of this repo: https://github.com/Behat/Behat/blob/2.5/README.md\nAnd to the 2.5 docs index: http://docs.behat.org/en/v2.5/\n. Can you provide a test case? Simple version of \"Steps to reproduce\" section from your issue would work nicely!\n. It is not a cost effective test case if it is not automated :) Can you write a representative feature file under features/ folder?\n. @rajeshtaneja write an automated test case (living under features/ folder) as part of this PR. Your steps to reproduce should be a test, so that we both know that you fixed the problem and that we don't break your fix accidentally in future updates.\n. @rajeshtaneja that's awesome! Thank you.\n. @rajeshtaneja you can expect the RC1 in the next couple of days.\n. Good catch. Yes, only the suite-wide filter was added. You can use the role filter instead for now.\n. This sounds like a problem related to https://github.com/behat/symfony2extension. Please open an issue there as you'll get more support and context in it.\nThis repository is focused on Behat core.\n. You are obviously missing something.\n\n. @AlexeyDemidov can you please open an issues following https://github.com/Behat/Behat/blob/master/CONTRIBUTING.md#submitting-an-issue guidelines?\n. Your listener can listen to more than one event. If the event you look at doesn't provide needed context, try previous event in the chain - BeforeScenario\n. Yup\n. Thank you very much for contribution!\n. I'm not in on a joke. Sorry\n. @Taluu threshold wasn't raised to 2.7 yet. We will drop support for versions prior to 3.0 in Behat 4.0. \n@wikimatze but until then, we must support 2.x branch, hence the usage of code Symfony 3 considers deprecated. As @Taluu said - it does not make sense for you to run checks over vendors. There's no benefit in checking code you can't control.\n. Please provide more context about your test suite and environment as neither me nor Travis can reproduce your problem without it. Seems problem is not inherently in Behat and it is something local to your environment:\n\nWhich means no one can really help you unless you give us more details.\n1. What is your PHP version and php.ini config?\n2. What is your feature?\n3. What is your context?\n4. What is your behat.yml configuration?\n5. What is the output for exactly the same filters, but without junit formatter?\n6. Any other bit of information you can think of being specific to your environment/setting?\n. No, that's not what I mean. What I mean is that I have no idea why junit formatter doesn't work for you. All I know is that it does work for me and there's not enough information in your issue to guess why it might not work for you.\n. @AlexeyDemidov can you try to run the Behat's own test suite on your machine? In particular the junit_format.feature.\nAfter cloning this repository and installing dependencies with composer:\nbash\nbin/behat features/junit_format.feature\n. @AlexeyDemidov do the progress or pretty formatters produce output?\n. @AlexeyDemidov this is very strange, but we're getting somewhere. Can you show me your behat.yml?\n. > full test suite takes 2 hours to complete\n\ud83d\ude22 \n. Well, here you go. In php 5.3 and 5.4 we can not effectively render the junit output on language errors:\nhttps://github.com/Behat/Behat/blob/master/features/junit_format.feature#L529-L587\nThis is fixed for further php versions starting from 5.5. Both PHP 5.3 and 5.4 are effectively reached their end of lives years ago. I suggest you upgrade the version of php you run your tests on. As it seems your tests are isolated from your environment anyways (end-to-end), that should not require you updating your actual application (if you can't).\n. @AlexeyDemidov can you debug a bit further on your local machine? At this point I'm at loss of ideas and am constrained by complete inability to reproduce your problem.\n. This sounds like a very deliberate setup focused around parallelisation. If you already have automated scripts (you probably should) that generate your *.scenarios files, why these scripts can't generate flat *.scenarios files instead of relying on this inexistent hierarchy.\nOn our side, *.scenarios was a feature intended to simplify sharing of particular scenario subset between individual team members. What you are doing here obviously doesn't match that intention and I don't really want to overcomplicate the feature for a narrow use case.\n. The core purpose of transformations is to keep your scenarios problem-focused and clean from all the programming craft. Seems like you're trying to make a programming language out of your scenarios. There are better tools to do just that.\n. There is an AfterFeature hook. However, having contexts in that hook doesn't make much sense because of how context isolation works - each scenario gets its own set of context instances and those aren't shared across scenarios.\n. What's your actual use case?\n. I'd suggest you to rethink how you isolate your environments. Your optimisation would break as soon as you use --order option, as it should. I'm afraid for this reason we can't support this particular feature in the core. I'm not sure you should use this feature either, but that's your choice.\n. I agree with this\n. Closed in 954\n. That is perfect! Thank you very much for contribution!\n. What @ciaranmcnulty said. Your application itself seems to be running on anything but PHP7. Running Behat on php7 doesn't change which version of php your application runs on.\n. Oh PHP...\n. @rajeshtaneja can you check if #963 fixes you problem?\n. \nCheck you php.ini config and make sure you catch warnings and errors in the environment in which you run Behat.\n. Update your dependencies. I just fixed it in Gherkin v4.4.5:\nhttps://github.com/Behat/Gherkin/blob/master/CHANGES.md#445--2016-10-30\n. I hope you understand that just a single screenshot without much context or background into your suite setup makes it impossible to help you.\nPlease collect more context about your environment and open a new issue conforming to our very simple contribution guide. Then we will be able to help you.\n. features folder was created because you didn't change the paths setting of your default suite:\ndefault:\n  suites:\n    default:\n      contexts:\n        - 'Replenish\\\\Feature\\\\Context\\\\ReplenishContext'\n      paths: [ '%paths.base%/features' ] # <- is the default setting\nBehat's built-in autoloader and, by extension, --init does not support PSR-4. But --init would not attempt to generate a class if class already exists and is autoloadable by Composer.\nAlso, if you use Composer's autoloader there's no need to specify autoload section in Behat.\n. Check what PhpSpec does:\nhttps://github.com/phpspec/phpspec/blob/master/features/bootstrap/ApplicationContext.php#L117-L132\nI think it answers your question. If it does, please close this issue.\n. @mathroc thank you very much for effort, but can you add new scenario instead of changing the old one? I'd like scenarios to focus on one edge case at a time.. @pocky can you give me an example of what is it you're trying to do?. Thank you very much for contribution!. What @Taluu said. Please open your issue at minkphp/mink There people more suited will be able to help you.. @stof thanks for your feedback, as always. I fixed everything you highlighted.. > Specialised syntax in the config file, i.e. @-prefixed values, may not come under the normal BC rules but we should consider this.\n@ciaranmcnulty @ prefix only works when you have services: configuration option provided. So no problems for BC. @ciaranmcnulty service-based resolvers come first as they are more specific (as in local to suites). I'd avoid using services with Symfony2Extension until it is updated to support new functionality in proper way.. Why would you do that?. Please open issue in https://github.com/Behat/MinkExtension. Only one output per format is currently supported.. What's your use case?. Why don't you just replace the placeholders in Gherkin on the edge of the parsing phase?\nJust implement your own version of GherkinFileLoader and register it as GherkinExtension::LOADER_TAG with higher priority than the default GherkinFileLoader. This way you can replace your placeholders during the feature parsing phase, making the process invisible to Behat and its formatters.. In regards to extension point, I wouldn't touch formatters. They are easily the most complicated part of the codebase already and I'm very cautious at making it even worse.. There is nothing in Behat core to support such behaviour. That said, each individual extension can provide additional support for the config it provides.. Context parameters are indeed not merged, but overridden between configurations.\nThis is expected behaviour, but it is due to the technical, not logical limitations. In other words - it works this way because I didn't figure out the better way yet. Help is greatly appreciated!. I feel like we'll have to live with this one for a while. @cravecode thanks for your thinking though :) It all matters and helps!. All step definitions go through CallCenter::makeCall, which catches all exceptions, including catchable errors.\nThe catch you're referring to is there only to catch exceptions from inside definitions search routine.. You didn't describe issue - you asked for a feature. I pointed that feature is already implemented as part of Behat core, granting closure of this particular ticket.\nI'm afraid we can't help you much until you describe your issue clearly, preferably with a reproducible example. I'd use separate ticket for that. Please make sure you provide enough context so that we can actually help you debug the issue instead of guessing what's wrong.. They are exclusive on purpose to remove confusion. There is a concept of priority, but the container resolver has the highest priority there is.\nIf you really need to surface services from two containers, I'd suggest creating third, aggregate container, delegating to two others.. Might be interesting. As long as it doesn't introduce complexity into the core, colour me interested.. Three constraints I'd put on it are:\n\nIt needs to be completely optional\nIt mustn't introduce extra complexity to the core. Ideally, it should reduce existing complexity if possible\nPrefer more general, less tool-specific (Puli) implementation. @Taluu can you update the changelog?. @Taluu thank you!. @Taluu thanks for a fix. Especially thank you for a scenario and update of the CHANGELOG - that does make my life much easier!. @ciaranmcnulty I think the key message here is that Symfony autoloader we use for this feature really goes away. Which means that if we are to support this feature in the future, we should either copy the component into our codebase or reimplement it.\n\nSo our choice is:\n\nDrop the feature\nCopy-paste Autoloader component into Behat core\nReimplement Autoloader in Behat core\nSwitch to using Composer autoloader\n\nDropping the feature does make it tricky to use behat.phar. But I'd rather bundle Composer into PHAR stub than drag dead component over.. Yup. I meant exactly reappropriating that thing to autoloading features/bootstrap. I do think autoloading feature should be turned off by default in non-phar version of 4.x. If you install Behat through Composer, you should use Composer for autoloading.. I'd rather not tie ExtensionManager to Puli directly. Sounds like abstraction is due.. > I don't really want to add it in the require-dev section...\n@Taluu why not?. I just reran the test and it still fails. Something is broken. > Any extension using $input->getArgument('paths') or $input->setArgument('paths') and expecting a string will break.\nArgh. Good catch :/ There is a way, though. You can switch back to paths being just a singular string and parse it out in the controller. This will force people to use\n> behat \"pathA pathB\"\n\ninstead of\n> behat pathA pathB\n\nBut it is surely better than waiting for 4.0, which is not even scheduled yet.. :/. @slavcodev can you update the CHANGELOG?. Thank you very much for contribution!. Thanks @pamil . Merged on master. I prefer core to be small. Both to give wider community reason/motivation to contribute and to keep things simple on the maintenance side.. Hi Walter. What's the point of introducing abstraction layer to your context if you're not abstracting your implementation detail away from it? :)))\nYour particular page object should abstract away the captcha challenge between shared, but simpler interface. This technically means that instead of writing:\n```\nCreateAccountContext\n$this->createAccountPage->getElement( ... )-> ...\nLoginContext\n$this->login->getElement( ... )-> ...\n```\nyou should write:\n$this->captcha->fill()\nDepending on the situation then you'll be able to use the same context, but a different page object, implementing same interface.. nope, I was building it locally, so it's worse - it is built on 7.1. :/. Should be automatically building against 5.4 from now on. It is notoriously hard to debug, so it might take couple releases to ensure it all works.... Thanks for reporting it.. Try:\ntestoutput:\n  formatters:\n    junit:\n      output_path: \"results/xml/\"\nFormatters are configured through child options.. Postponed till FIG actually accepts PSR-11. Currently it is in review:\nhttp://www.php-fig.org/psr/. In the meantime you can probably use a shortcut with a temporary *.scenarios file:\nyour_first.feature:lineno\nyour_second.feature:lineno\n. So how are you planning to use this extension point? Create your own custom binstub?. Ah. I missed the options you outlined in the description.. You can disable cache via config:\ndefault:\n  gherkin:\n    cache: ~\n. Keep in mind that *Suite hooks are called only once.. This is because scenario titles are allowed to span multiple lines:\nScenario: This title\n  spans multiple lines\n  before the actual steps start\n  Given ...\n  When ...\n  Then .... Use , instead of &&. && means literally \"both sides should be present\", , means \"either side\" or simply or.\nSo:\n--tags=~manual,~wip\n. @bwowk once again - thanks for nudging in :). As this seems to be usage question in relation to interconnection of different tech, StackOverflow is a better place for it.. What @stof said :). Thank you very much for a great work! I did some very small refactoring and merged into master.. Can you give more context on the use-case you're trying to address?. Cool. Closing this then.. This seems to have nothing to do with Behat and has much to do with your Symfony environment configuration. Behat doesn't use neither Symfony\\Component\\Debug nor container cache.. Missed this one :/. @bwowk thanks for helping people out! This matters a lot for community and helps contributors greatly.. Cucumber has a log formatter. I'll put it on my list of things to consider.. fixed. Thank you!. @drzraf I'm going to revert this. This turned out to be a major BC break. See Behat/Symfony2Extension#125 for example. This should stay in third-party extension :) I don't want to diverge Behat behaviour too much away from other Cucumber implementations.. Can you provide us with simple steps to reproduce a situation when exception isn't caught?. Can you provide a test case?. Closing then. @generalconsensus feel free to reopen if you still experience the issue.. @Taluu @stof container-interop was updated with a minor to migrate to PSR-11. In 1.2 they basically extend all the base PSR-11 interfaces.\nThere's also no public API change, so the upgrade from Interop 1.1 to Interop 1.2 (which extends PSR-11) is non-breaking. This all means that for people depending on Interop container interfaces the change should be transparent. Unless they are locking particular minor version of Interop in their composer.json, which there's no reason to.. @Taluu @stof I specified explicit conflict with container-interop prior to 1.2 in composer.json, which would explicitly force Composer to update container-interop to 1.2. Unless users locked their container-interop version, in which case they would be forced to unlock it.. @Taluu you and @stof are right in regards to exceptions and more generally implement. Switched all internal container classes back to extend from Interop-Container rather than PSR11.. Great job! I love it :). @glennmcewan do you mind to rebase this PR and remove the fiddling with composer.json as the new version of Gherkin was released with a fix?. Thanks for contribution!. @WillGibson you can disable interaction with --no-interaction flag. But Behat needs you to tell it which context to generate snippets for with --snippets-for=..., so if you want snippets generated non-interactive you need to use the flag.. @WillGibson Behat never generated snippets silently without you telling it which context to generate it for. This is because Behat tries really hard to avoid name collisions in the context method names.\nIt's just before you had implements SnippetAcceptingContext on some of your contexts and now you have --snippets-for.. This doesn't sound like a normal behaviour. Can you provide me with steps to reproduce the problem on my side?. Not going to do as this will influence people to ignore flaky tests - behaviour I don't want to encourage.. Behat doesn't give execution order guarantees. With that, your suggestion doesn't work easily. I'd suggest looking into explicit segmentation strategies as nifr suggested.. This is not normal behaviour. Can you provide steps to reproduce?. Closed due to no response. We didn't explicitly drop the support, but we stopped bothering with it as much. Version was dropped from the matrix because newer Travis VMs don't even have 5.3.\nBottom line: Behat should still work on PHP 5.3, but it might get broken from version to version (unintentionally). Next major will kill support altogether.. @cherifGsoul It's supposed to be used anywhere it makes your life easier. If you don't know when to use it, then please don't use it! This feature isn't built for best practice (it is not a silver bullet), it is build for good practice (it is a solution to a problem).. Check the documentation: http://docs.behat.org/en/latest/user_guide/configuration/suites.html. You broke tests.. Please provide more context.. Thank you for spot and fix :). Revert to 3.3 for now, I'll try to look into the bug ASAP.. @pfrenssen I can't replicate it in 3.4.1:\n\nCan you confirm that bug is still there on your side?. I tried to set up automatic build of phars on tags via Travis. It's notoriously hard to debug, so help welcome.\nIn the meantime, you can do it manually as @jakzal describes. @jakzal that would be awesome!. WIll try this noon. Removed the typehint. @Taluu you used slightly wrong assertion class. Can you update and I'll merge?. @Taluu top one, man :). This might have a deep-cutting implications on formatters, so I'd look into this one for next major.. @hackel yes, use narrative filter: https://github.com/Behat/Behat/blob/master/features/suite.feature#L413. @dianaarnos as @stof said.. Thank you very much for contribution and sorry for a wait!. This is because you have a background.. Yeah. Pretty formatter is a nightmare to maintain (due to inherent format complexity) to be honest, so this is definitely on my radar, but I wouldn't make any promises :). @danchukas at this point in time we're not adding any functionality to the Gherkin language outside of what Cucumber does.. Thanks for reporting!. @spolischook I know I'm late with comment, but as @Taluu said, we need to respect BC.. I concur with @ciaranmcnulty . This should go into your global gitignore, not in project one!\n. It should be -d, right?\n. Although, - is not necessary, please add it so code would be consistent across all processors: https://github.com/Behat/Behat/blob/master/src/Behat/Behat/Console/Processor/ContainerProcessor.php#L31. Thanks ;-)\n. Indentation is broken here. You should fix it!\n. You should collect this instruction into single line as it become short enough.\n. You should use $definition->getPath() instead, cuz there could be also a closure definitions with real file paths.\nCheck:\nhttps://github.com/Behat/Behat/blob/master/src/Behat/Behat/Annotation/Annotation.php#L62\nand\nhttps://github.com/Behat/Behat/blob/master/src/Behat/Behat/Annotation/Annotation.php#L95\n. It should be --definitions-source, IMO :-)\n. #behat .step .path\n. @stof no, this one is just formatters translations. It's custom and has nothing to do with Cucumber - Cucumber doesn't translate formatters output, only syntax.\n. Extra space? :)\n. that additional line is not needed\n. same here\n. Remove spaces around function arguments.\n. Careful with such things :)\n. No need to rebase. Just fix this problem with another commit and push!\n. Good catch. Missed this one.\n. Fixed.\n. I think I'll keep it this way. It gives it some charm :)\n. Really good catch. Fixing\n. You're right, things are becoming confusing from this point. I'll split CallHandler and ResultHandler functionality in three:\n- CallFilter - filters call before it's being made and returns new one\n- CallHandler - handles call and returns result (first one wins)\n- ResultFilter - filters result and returns new one\n. The primary reason I use custom format is because Gherkin has some syntax parts that are using <> - outline tokens for example. So for example outline with something line:\nAnd I sent a <comment>\nCaused a lot of trouble previously as OutputFormatter has predefined / unremovable comment style\n. I'm not sure if this situation is fixed. But logically, I think I'll still prefer to avoid confusion by using different syntax entirely.\n. Good call.\n. Why?\n. Ok, yeah, you're right. Because of the getSuite in this object. Suite is a mandatory parameter of Subjects - fixing.\n. Nice touch :)\n. $subjects is a collection of collection of subjects :/\n. No, I do want to know that there are more than one feature in the array - otherwise we need to parse next batch\n. Yes, because Testwork defines null type as a default suite type and I don't want to override suite extension just to override that.\n. Good catch.\n. @stloyd because configs are merged and you want to give people ability to disable filters - by setting them to null in child configs.\n. It wouldn't work with RecursiveIteratorIterator\n. Agree.\n. No. But it doesn't need to. Progress formatter prints hooks or steps output only if they throw an exception. If they don't - output is not shown. It's because in progress formatter there's no easy way to print output in a way that will make clear where it came from (bring source context). Thus, if you want to see all outputs - pretty formatter is your guy :)\n. Very good catch.\n. Because it's an optional dependency.\n. Hmmm. Interesting. Didn't thought about it this way :/\n. 2-space indentation, please :)\n. We double-escape those things, not simply escape them.\n. It is general convention I got for the core - all core services are 50. It makes it clear that you can have higher or lover priority services. Negative priority is not the most obvious thing on the earth :)\n. Damn PhpStorm adds those on every refactoring :( So I'll edit those at the end\n. You're right.\n. Agreed\n. Good catch.\n. No, because you don't want to override default setting set through behat.yml\n. Good catch\n. You're right.\n. EventDispatcher in context of Testwork doesn't make much sense without Testers integration.\n. DelegatingEventListener ?\n. If the background produced output, then it is rendered. Otherwise - not.\n. Fair point. Let me see how complex is it...\n. Only failing BeforeScenario hooks make scenarios skipped. Exercise still fails (because there are failing hooks), but the scenario itself is not failed - it is skipped. Because the thing that never been executed (any of the scenario steps weren't) can't actually be failed.\n. It is caused by expand option turned on. Expand causes outline example steps to be printed like usual steps - with paths. The way paths are printed in collapsed view is that formatter waits till the first example is finishes and gets step paths from them - in case of expanded view we want to print steps straight away, without delay.\n. Simply put - skipped scenarios !== skipped paths. Skipped scenarios are scenarios that weren't been tested by behat. And behat treats this as a failure.\n. stupid conventions eaten my brain. You're right, is prefix should be removed.\n. @schmittjoh I think it's short and concise enough already. Trying to abstract it will cause more confusion.\n. We'll switch ResultToStringConverter to be an interface when we'll need one (either because of the need for extension point or PhpSpec introduction) :) There's no extension point here right now because I don't see why we'd want one right now. But final keyword makes sure that when (and if) we'll need one, we'll be able to add it without BC breaks.\n. Fully agree.\n. Good catch.\n. This one is tricky one :) It literally means $code === PASSED. So the exercise result is an interpretation of testers result, not the result itself (if that makes sense) :)\nWhat do you think?\n. Agreed.\n. nope, it is a string\n. It's 1-2-1 binding from now on. Decoupling events from hooks removed the need to attach same hooks to multiple events.\n. changed in last-cleanup branch\n. I didn't want to pollute this PR with docBlock and cleanup changes. I though it would've been harder to review that way.\n. It is singular.\n. Nope. It is singular now\n. Fixed in cleanup branch\n. It is essentially a permutation of \"Chain of responsibilities\" pattern. So chain it is.\n. fixed\n. good idea. Fixing\n. That was the PhpStorm. Fixed in the cleanup\n. Fixed in the cleanup\n. Fixed in the cleanup.\n. Fixed in the cleanup\n. Could you send a PR? Or fix it straight away?\n. Yeah, you're right. It did make sense to me at first somehow :/ (something along the lines of \"private dependency together with the private service\")\nCould you send a PR?\n. Whoops\n. Symfony container will try to replace %...% in translation messages if we'd go though addMethod. That was the first thing I tried.\n. Yeah, which in case of array of those messages becomes stupid and tricky. I just decided to go with controller for now.\n. I don't think retrofitting is fair :)\n. Our ruleset is a bit less strict. We don't promise BC on classes. That's part of the reason why most classes in Behat are final.\nWe promise BC on interfaces and service constants only. And there's not much harm you can do using these two ;)\nSo in our case there should be even less confusion when are you crossing the BC zone than in Symfony2 - follow/use interfaces and you're safe.\n. Application is final. There's no point in adding protected methods in :) Make it private?\n. Have you missed this line that proxies decoration state to formatter?\n. Ah :)\n. Empty error message?\n. Ah, right!\n. This whole thing need a lot of love through refactoring\n. @stof because of named argument transformations later on.\n. Good catch\n. And again. Thanks buddy :)\n. Sweet!\n. Broken doc-block\n. We already have ScenarioLike, ScenarioNode and Scenario across the project. I don't want to introduce new UL term - ScenarioElement. Could we rename it to ScenarioPrinter?\n. These method names assume you'll always print tags using this printer. This limits that interface reusability, essentially meaning that you'll use this interface only once, creating a hollow abstraction. We need to either generalise this interface or drop it altogether. There's absolutely no need to have an interface for every kind of printer if we don't need them for reusability yet.\n. I'm not sure I agree with this change. Could you elaborate on why do you exactly need it?\n. There should be a better way to do that\n. Again, there should be a better way to do that.\n. +1\n. this is broken and causes this on PHP prior to 5.3.7. Solution would be to use Reflection, but I thought 5.3.3 is kinda old enough to ditch it instead.\n. Agreed.\n. Misconfigured IDE slipped through commit :(\n. Same\n. That's a very good call! Doing it now.\n. Done. Moved it to Behat\\Testwork\\Environment.\n. Thanks @WouterJ :)\n. @WouterJ yup, but your concern is very legit. There are couple of classes in Testwork that are not final. Which is fine as long as the reason behind that is not Behat alone, you're right. Currently we don't have implementation creep from Behat to Testwork, but we do need to keep an eye on this one ;)\n. @WouterJ that's how casting looks in php :) With that private method I do almost exactly the same thing Java casting does, only manually.\n. I have a feeling I need to turn off that right margin in my editor :D\n. Fair point!\n. That's a very good point. I went overboard here.\n. Not really. Very good point.\n. I rewrote this logic from scratch. It now adapts tester iteratively, but does it only if needed. This should solve the priority issue without visible performance decrease. But please double-check me :)\n. It's definitely isn't me :)\n. > If we make it final, we should make sure it supports other jUnit specs too.\n\nNo we don't. If there's no need for extension point now, the chances are there never will be a need for them. And as soon as there is a need for supporting other jUnit specs, we'll either find a way to do a proper extension point OR will remove final keyword.\n\nRemoving final or private keyword later is always a thousand times easier than adding it.\n. If base Statistics doesn't work for JUnit formatter I'd rather JUnit had it's own version of Statistics than everyone else to depend on interface they don't fully use.\n. A better way to be able to extend this point.\nI'd move the whole createOutput() or createOutputConsole() behaviour to the external Factory instead of relying on override of protected methods :)\n. I'm not sure this one will result in what you expect it would :)\n. Same as this one\n. It doesn't really matters that much in tests.\n. Removing if and early return will make transformations stack. I don't want transformations to stack. I want flexibility in applying more transformers if previous one didn't transform the value, but without complexity of stacked transformations. Also, making them stack seems to be a BC break.\n. That's why I don't want it to be configurable and anything but fromString. If you want to configure it - you should use custom transformation.\n. If you want to configure it - you should use custom transformations.\nThere's not much worse for cognition than configurable conventions. I believe the only configuration we should have for conventions is \"off\" toggle - and this one already has it.\n. Ta. Fixed.\n. Coding style is broken. Please follow PSR-0\n. Also, refactoring drastically needed. Too many nested ifs\n. I can not remove the method, because it is a dependency of the other deprecated logic. It's more of a reminder for myself to drop the guy in 4.0.\n. Here. Use delegation instead of control (also known as \"Tell, don't ask\" principle).\nCan you refactor this piece of code to avoid employing creating and reading public properties from the formatter? Try to find a way to tell objects what you want them to do, rather that asking them what they have.\n. 1. You are asking $formatter to give you the name\n2. You are also asking $suite to give you the name\n3. You then create a file name on the spot from these two pieces of information\nYou basically just asked a person to hand you over their phone just to check the current time. Instead of simply asking the person what time is it. Imagine next time person forgets his phone at his desk, but still does wear a watch on his hand - your time-asking routine will completely fail, even though the person still can tell you what time it is. If only you asked for what you actually care about - the current time, not their phone.\nYou have $formatter, you have $suite, you have a behaviour of figuring out the filename based on the information these two have. Give that behaviour a name (e.g. generateFilename()) and assign it to the object that can own it (e.g. $formatter->generateFilenameFor($suite)).\nTell objects to tell you the time, don't ask for their phone just to check it yourself! Allow objects flexibility in providing you with the real answers you seek.\n. Adding new methods to existing interfaces would be a BC break. Besides that, generateFilenameFor() seems to be a very-specific behaviour for a particular formatter, not all formatters in general.\n. Please typehint the $suite variable.\n. I did initially. It breaks apart in the Symfony\\Console prior to 2.7. Didn't want to introduce hacks just for the sake of it. I'll revert back to isInteractive() in 4.x\n. Good catch, though. I made the tradeoff more explicit in https://github.com/Behat/Behat/commit/c04e67f3a1cfad72b7e79e192e537fb42268af26\n. Agreed. I grown to dislike this style too. Was just going through motions.. Good shout. I kinda use these interchangeably.. To stop static analysis tools (like Scrutinizer) from complaining about non-existing method :(. I was trying to give people who don't care about Interop\\Container\\ContainerInterface a clear, transparent entry.. I'm actually not super-attached to it.. Implicit conversion VS explicit conversion. I'm easier with this case than the one you mentioned next. In this particular case it is indeed unclear that what I am expected to pass to $container->getDefinition(...) is a string, not an object. I'd be happy to make it explicit.. This again can be considered implicit VS explicit. Except in this case I obviously tell sprintf I need a string (@%s). Hence, I'd argue conversion is already explicit here and additional conversion would only confuse things.\nThat is unless you have a different tech/clarity reason I haven't thought of yet :). Actually, having separate interface breaks the second general principle. So I'll go ahead and drop Behat\\Behat\\HelperContainer\\ServiceContainer.. Thanks for explanation. Makes perfect sense and I would change it in this case.. Cool. I'll introduce casting only to the getDefinition(...) case then.. If we follow the pattern naming from the previous comment, we keep following it for null objects :). Potentially. But that's too small of an op to worry about reuse at this point.. Please also add getPath() with @deprecated tag for BC. It can return the first path given.. For BC please ensure that $paths argument can be either a string or an array. Both must be supported for now.\n$this->paths = (array) $paths;\n. Sorry.. I'd rather this method and all the other mentions of Puli to be hidden behind an abstraction.. @WillGibson are you ok to bump it?. I think this is the bit that breaks the build on 5.3 :/. I feel uneasy about doing this with stable core release. If that's the only way of doing the feature, my preference shifts to just providing an extension point in the core, but Puli being an extension (maybe even official).. Yeah, well, the only challenge you will have now is that you will need to introduce an extension point for extension instantiators, which is definitely a head-scratcher.. Missing description. Focus on differences. Missing description. Focus on differences. No. I don't envision any other implementation of Validator at the moment. I also don't see it becoming dependent on any external service.\nIn this regard there's no real difference between\nphp\npublic function __construct(...)\n{\n    $this->validator = new Validator();\n}\nand\nphp\npublic function __construct(..., Validator $validator = null)\n{\n    $this->validator = $validator ?: new Validator();\n}\nI'd rather not expose any extra dependencies without good reason yet.. @stof I like the way you think :). Good shout.. second argument must be optional for BC. Third argument must be optional for BC. Bonus points for having integration test!. Ideally needs a typehint.. ",
    "naholyr": "Note that this output also produces an unterminated string error, which is fixed by my previous pull request.\n. OK in fact I mixed two errors: the unterminated string, and an error on \"Etant donn\u00e9\" (code is generated with the space between the two words). No undefined, just syntax errors.\n. ",
    "docteurklein": "what about merging this one ?\n. ``` text\n    When I visit \"app_foo_show\" page                                          \n                                                                # FeatureContext::visitRoute()\n    When I follow \"Unsafe Delete\"                                             \n                                                                # Behat\\MinkExtension\\Context\\MinkContext::clickLink()\n  exception 'InvalidArgumentException' with message 'Context \"Behat\\\\MinkExt\n\nension\\Context\\MinkContext\" can not be found in a context pool.' in vendor/beh\nat/behat/src/Behat/Behat/Context/Pool/InitializedContextPool.php:93\n      Stack trace:\n      #0 vendor/behat/behat/src/Behat/Behat/Callee/EventSubscriber/CalleeExecuto\nr.php(72): Behat\\Behat\\Context\\Pool\\InitializedContextPool->getContext('Beha\nt\\MinkExten...')\n      #1 [internal function]: Behat\\Behat\\Callee\\EventSubscriber\\CalleeExecu\ntor->executeCallee(Object(Behat\\Behat\\Definition\\Event\\ExecuteDefinitionEven\nt), 'executeDefiniti...', Object(Symfony\\Component\\EventDispatcher\\EventDispa\ntcher))\n```\n. Actually I think it was: https://github.com/Behat/Behat/pull/309\n. you made it! :) You sacrified your machine for that, she would be proud of it.\n. all good!\n. I know my description is maybe cryptic, please tell me if you want more details :)\n. i'm talking about https://github.com/Behat/Behat/blob/3.0/src/Behat/Testwork/Autoloader/ServiceContainer/AutoloaderExtension.php#L76\nThis should be called at runtime.\n. Ok, the problem doesn't appear in behat because the autoloader is registered since it used by SuiteWithContextsSetup. (maybe)\n. i fixed it by implementing an empty SuiteSetup, just to load the autoloader :/\nhttps://github.com/docteurklein/funk-spec/blob/master/src/Funk/Suite/Setup/Autoload.php\n. that's a good idea.\n. @everzet glad it landed in latest RC :)\ngreat work ! \\o/\n. oh, I'm sorry but I didn't find it, even tho I searched for an existing issue first! Apparently didn't search enough :)\nThanks. Closing.\n. I wrote something in relation to this issue: https://github.com/funk-spec/funk-spec/compare/fix/autoload\nIt is however modifying the generated classloader, which seems bad according to what @stof said above).\n. well, you'll still be able to mock the other methods of the class.\n. ",
    "ThePixelDeveloper": "Need to debug a bit further, but it's screwing up here\nhttps://github.com/Behat/Behat/blob/master/src/Behat/Behat/Console/Command/BehatCommand.php#L435\n. ",
    "glenjamin": "Thanks for the quick response!\nWe just identified and fixed another related issue: 74b1644c95f74a9982de7be6a9438986c8f1e356\n. Apologies, turned out to be the corporate proxy/firewall, which respected a no-cache header in the request via curl, forcing it to reload.\n. Forgot to add context, thats HTMLFormatter.printColorizedTableRow line 377\n. This also seems to affect the path relativization stuff in the pretty formatter, I tried setting the base_path parameter of the formatter to $featuresPath instead of $basePath, and this worked correctly.\nI'm not sure how well this will behave if the various sub-paths of features are overridden further.\n. Yep, this works correctly. Thanks!\n. This behaviour does make more sense, but it's not really as pretty.\nAs far as those paths go, I only actually care about the sub-path from features/ that the feature file resides in, and the sub-path from features/steps that the step resides in. The rest of the information about the file can be derived from the context (or just the extension) while reading.\nFor example:\nScenario: (Filtering) Basic check of quick links              # api/get-quick-links-1615-homepage-quick-links.feature:8\n  Given the following event types exist:                      # steps/creator_steps.php:53\n    | Class        | Name                    | Quick Link |\n    | Horse Racing | Kempton                 | Yes        |\n    | Football     | Barclays Premier League | Yes        |\n    | Tennis       | Wimbledon               | No         |\n  And the following horse races exist:                        # steps/creator_steps.php:110\n    | Event Type | Name         |\n    | Kempton    | 3.15 Kempton |\n. I hadn't considered that, makes sense to me.\n. glenjamin/master tracks Behat/develop, confusingly.\nUnless github's got confused somewhere, this is basically a PR against develop :)\n. You can hold off on this one for the moment, I've noticed that there's one too many closing div tags in this.\n. Corrected previous commit with correct HTML nesting.\n. It would be nice to allow multiple filenames, which would allow globs: \"behat features/*\" for example\n. @cogitatio I'm intrigued, if you just fork the process and run some tests in each one - how much speedup would you expect to get?\nI'd expect that the only way to get a massive speed up by parallelisation would be to split across multiple boxes - especially if you're using something like Mink to make HTTP calls to a web service that has some sort of state (database for example). How do you stop the two parallel tests from clobbering each other's state?\n. Sounds good to me, are there docs for extensions?\n. ",
    "msaspence": "brilliant thanks\n. thanks, this is one of the features I miss most from cucumber\n. adding \nbehat ffec3e6f2bc4f94a3b3a953fed58d76902b08e59\nto your deps.lock file will reinstall behat 2.1.3\n. Currently I have 243 scenarios with 2596 steps\n. And the feature files are in subfolders to give me some structure\nie:\nfeature/{catagory}/{test}.feature\nNot sure if that is relavant or not\n. Ah, yes that sounds like a much better way of doing it\nOn 15 Feb 2012, at 15:14, Konstantin Kudryashov wrote:\n\nOk. Indeed, it's alot. I'm thinking about optional parsing caching layer. That could solve all slowness problems.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Behat/Behat/issues/95#issuecomment-3981922\n. Yes that is epic, thanks\nfrom 3.5 seconds to parse suite but not run anything to .193s\n. \n",
    "neverender": "Straight from the docs:\nin support/hooks.php\n$hooks->beforeSuite(function($event) {\n    // Do something before whole test suite\n});\n$hooks->afterSuite(function($event) {\n    // Do something after whole test suite\n});\nThat code right there will give the error. Again, the other hooks work just fine\n. Yes, I meant features/support/hooks.php\nAnyway, I figured out what i did. It was originally a feature hook and I just changed the name, without getting rid of the extra argument. I didn't have my code in front of me when I last commented, so I didn't realize. Thanks for your help. Closing.\n. Well, I installed it with pear and the pear directory is in my $PATH (behat was installed with pear and it works fine). Oh, and require_once 'mink/autoload.php'' doesn't give me any errors either. Otherwise, I'm not sure what I could have done wrong. The instructions here were pretty simple. I copied your behat.yml example line for line, as well as the 'require_once' stuff. Is there anything else I need to do?\n. Ha. Sorry, false alarm. I really need to read documentation better. I had behat.yml in the wrong directory. (shouldn't be in /features/support). Working fine now. I really appreciate your help.\n. ",
    "zimathias": "This seems to be related to the relative path. If the argument passed is a full path, behat works as expected:\n$ behat `pwd`/features/sales_pages.feature:9\n[...]\n1 scenario (1 failed)\n3 steps (1 passed, 1 skipped, 1 failed)\n0m0.31s\n. $ cat behat.yml \ndefault:\n    environment:\n        parameters:\n            start_url: http://www.example.com/\nimports:\n    - mink/behat.yml\n. Adding some debug statement in the locateFeaturesPaths function shows that the current working directory changes:\n$featuresPath   = $matches[1];                                  \n            $lineFilter     = ':' . $matches[2];                            \n+          var_dump(getcwd()) . \"\\n\";\nThe current working directory is changed to:\nstring(23) \"/tmp/pharextract/goutte\"\n. Given that the current working directory is related to goutte, I'd guess it's related to mink.\n. Yes. The patch fixes the issue. Thanks!\n. After further testing it seems that the commit fixes the use cases where a relative directory and relative file are given as arguments. The use case where a specific scenario is given still fails. See issue #26 for more information.\n. Thanks for the explanation. I didn't know that the type of step wasn't related to the function definition. \nAs you've outlined, the type of step is useful to understand what the step actually do - (ie \"Then I am logged\" is different from \"Given I am logged\"). Then it seems that having the type of the step listed in the step definition would provide more context to understand what the step does?\nWhich outline is the most helpful when a developer write tests with behat?\n$ behat --steps       \n'/^I should be redirected to \"([^\"]*)\"$/'\nOr\n$ behat --steps       \nThen '/^I should be redirected to \"([^\"]*)\"$/'\n. ",
    "mmoreram": "Step prefixes are only for comprehension purpose. So, you can call a step using When, Then and Given, that program will do the same. Also, these words are only for trying to understand what exactly do the step ( \"Then I am logged\" is not the same as \"Given I am logged\", but you cant define both.\nSo listing steps is not really usefull, because you can change word with no effects.\n. ",
    "Kein1945": "I have similar problem. I see that is old issue, but may be my experience help for someone.\nIt is possible that your system proxy settings lead to failure, all requests. Mink use curl for connect to url. If you are using linux just try this code:\n$ php -r '$cr = curl_init(); curl_setopt($cr, CURLOPT_URL, \"http://localhost/\"); curl_exec($cr);'\nIf you see in response sahi injects, that wasn't proxy, if don't see just set http_proxy environment for ''\n$ export http_proxy=\"\"\n$ behat\nIt work's good for me\n. ",
    "Ases": "Seems that this breaks behat.\nphp\n<?php #src/Behat/Behat/Hook/HookDispatcher.php\n    public static function getSubscribedEvents()\n    {\n        return array(\n            'suite.before' => 'beforeSuite',\n            'suite.after' => 'afterSuite',\n            'feature.before' => 'beforeFeature',\n            'feature.after' => 'afterFeature',\n            'scenario.before' => 'beforeScenario',\n            'scenario.after' => 'afterScenario',\n            'outline.example.before' => 'beforeOutlineExample',\n            'outline.example.after' => 'afterOutlineExample',\n            'step.before' => 'beforeStep',\n            'step.after' => 'afterStep'\n        );\n    }\nThe code should be more like this?\n. It's a more elegant solution.\nYou're doing a nice job, keep it up ;-)\n. ",
    "hidenorigoto": ":thumbsup:\n. ",
    "lucassouza1": "Ok, thanks.\n. ",
    "thefringeninja": "I forked from master because it looks like v2 is not backwards compatible with 1.1.9. \nI've had nothing but bad luck when it comes to the object oriented test context. What happens when your steps are scattered among many objects? When I do this in c# (nbehave) I need to delegate state maintenance to a static object.\n. ",
    "schmittjoh": "Yeah, I like it. Maybe add a note about this power to the docs?\n. Does this allow to do things like\n``` cucumber\n@mink:firefox @mink:chrome\nScenario: ...\n```\nSort of what @dataProvider is doing for phpunit, but for sessions?\n. What do you think about adding a feature that allows to run the same scenario against more than one session? \nFor headless browsers that doesn't matter so much, but if I run a scenario in a Sahi session, then I likely want that scenario to pass in all configured browsers (Firefox, Chrome, IE, etc.). I could copy/paste the scenario and apply different sessions, but then I get potentially many scenarios and something like @sessionProvider would be a bit easier.\n. I'm not sure how it is done at the moment, but one problem is that all extensions would have to be compiled with the same compiler otherwise they might refer to classes which do not actually exist anymore.\n. Are third-party classes usually used in extensions?\n. I have made an initial implementation for this. We should probably add some checks to ensure that only compiled extensions can be used with a compiled behat.phar file.\nAlso, we probably have to make it easier to compile an extension to a phar file. I don't know what the current process is here. Would you mind taking a look?\nOverall, this should allow Behat to be used for testing any Symfony version, and make it less fragile, and more independent. Also, the maintenance burden should go down considerably as changes in Symfony2 will not immediately break Behat anymore.\n. Comments are kept intact (doc comments at least). Coding style of the dumped code is a bit different, but that should not matter too much.\nI agree that we need some checks to ensure phar is only used with phar, and also about the build script. Would you mind if I leave these changes to your capable hands? I'm sure you can do them faster than me :)\n. Can you elaborate this?\n. I think the problem results from the fact that you are not autoloading the code explicitly, but have relied on it coming bundled with Behat, no? So, I guess everyone who does not have explicit autoloading would see similar issues. Not sure how many people that are though.\n. The post makes it sound like quite an ordeal to go through, but all that an extension developer would have to do is to compile his extension with a special script that we even provide him. That's easy, and the benefit for the end user is huge! :)\n. yeah well, let's see what people think\n. What do you think; should we close this, or would you like to continue?\n. I would first write a specific script for Behat, and then see what parts can be abstracted into a generic solution because I'm not sure whether a generic solution is possible; or do you already have something working with Box?.\n. I'm closing this.\nThe approach I'm using now is to run Behat with an entire set of own dependencies, and not add it to the project's root composer.json. Behat then only communicates with the application by calling console commands. That way the application's dependencies, and Behat's dependencies are never loaded in the same process and no conflicts can occur. \nIt also means that you can never use $kernel inside feature contexts, but that is actually not a problem as you can easily just call a console command which does the work instead.\n. You seem to have quite some duplicated code in these event dispatching testers which only differ slightly, have you considered adding a base class in this case?\n. ",
    "stof": ":+1: for profiles in BehatBundle\n. @iamexe as pointed 10 months ago by @everzet in his latest comment, the answer is to use behat profiles, and launching the behat features once for each browser you want to test.\nProfiles were not supported in BehatBundle because of the way the bundle was working, but this flaw disappears for Behat 2.4 as the bundle will now die in favor of the Symfony2Extension for Behat.\n. yes, and it works in Behat 2.3 standalone too (but not when using Behat 2.3 through BehatBundle)\n. you should cherry-pick the right commit to get rid of these merge commits.\n. @everzet did it this way to make it simpler to avoid clashes when doing a require_once of the class loader file. But a better solution could indeed be to use a conditional require_once, like Silex does\n. Behat is not the creator of the Gherkin format (hint: this is the cucumber team). And our goal is to respect the Gherkin format so that feature files are independent of the tool used to automate their verification.\nAnd given that neither @everzet nor me are convinced by this feature, we won't lobby to have such feature in gherkin itself\n. @everzet in Behat 3 and MinkExtension 2.0, running the javascript scenarios against different browsers can even be done in 1 run by using separate suites rather than separate profiles (well, actually, it will be possible this evening as currently, it only works in my local version of MinkExtension 2.0)\n. see https://github.com/Behat/MinkExtension/pull/136\n. the file is vendor/.composer/autoload.php instead of autoload.php now as it is generated by composer\n. @everzet Read the patch more carefully. It is not setting the error reporting level to 0. It is checking if it was set to 0 by some code using the @ operator to suppress errors.\nSymfony2 does an equivalent check in its error handler: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Debug/ErrorHandler.php#L59\nAnd guzzle probably cannot remove such @ for the same reason Buzz, Zend_Http and other library use @ in front of file_get_contents: in case of failure, PHP returns false but also triggers a warning, which is a crappy way to do things. So Guzzle cannot change it as long as it uses PHP.\n. Btw, read http://www.php.net/manual/en/function.set-error-handler.php and you will see that PHP requires some dirty stuff explicitly to avoid breaking the @ operator with a custom error handler.\n. this is already fixed in the develop branch\n@everzet what about doing a 2.3.2 bugfix release ?\n. Behat does not know about the way the logic is implemented to achieve the behavior so it would be rather hard. When using Mink for instance, it does an HTTP request to a website and tests the output. It has no way to know what has been executed. It could even run on a separate machine (see the demo testing wikipedia for instance)\n. @Daniel15 the issue is that you could get the code coverage of your step definition, not of your application. Mink does HTTP requests to your applications, so it does not have access at all to the logic in it to get code coverage (it does not even know that the application itself is written in PHP)\n. @srcspider but this is not easy to implement either. When specifying a web app with Behat, the code of the web app will often run separately (it is the case for all Mink drivers doing real HTTP requests to a webserver, i.e. all except the symfony2 driver). So collecting the code coverage in the  Behat thread won't help (except for cleaning your FeatureContext from unused code).\nAnd collecting the code coverage in your app requires modifying its source code, which cannot be done by Behat itself.\n. @MarcelloDuarte as I said above, implementing code coverage in Behat is not cheap. PhpSpec runs the code, so it is easy to write an extension for it collecting code coverage (and it has been done). Behat generally runs your app, not just your code. As the code ends up being run in a different PHP process, the code triggering the code coverage collection cannot be added in Behat. It needs to be added in the app (and then some code added in Behat to fetch the collected data and build a report for it).\n. @MarcelloDuarte well, it is the PhpSpec extension which calls xdebug to trigger the coverage.\nDecorating the bootstrap of the application to collect code coverage for Behat is not easy when testing a web app with Mink: unless you are faking the HTTP calls with the symfony2 driver (which works only for Symfony2 projects when you don't need JS), Mink will not call your app itself. It will call your HTTP server through Goutte or Selenium. So adding the xdebug coverage requires modifying the source code of the app itself to interfere with it (which is dangerous as it requires modifying versionned files, and requires to be implemented in an app-specific way). It becomes even worse when you consider that the HTTP server could run on a different machine (see the example of the doc running a behat feature against the wikipedia website).\nThis is why I'm saying it is not a cheap implementation (and probably also why nobody has implemented it yet as an extension)\n. @gggeek there is already an extension doing this: https://packagist.org/packages/vipsoft/code-coverage-extension\n. The feature description file is not about defining the way the features are implemented to be run by Behat.\n. @headrevision step chaining is about the way you implement steps in Behat, not about things you do in your feature files. It is about reusing low-level steps (Mink ones for instance) in your own steps instead of having to copy-paste the logic.\n. One example: you can have a feature file testing your login process and so describing each step (filling the fields with the username and password and then submitting). All other steps testing behaviors for authenticated users could use a Given I am logged in step which does the process under the hood as these features are not about repeating the login process (which would make them less readable).\n. @headrevision if tests are failing, it should be the developer job to fix the code. Why would you avoid having a dev to do the development work ?\n. @everzet if you are interested in reusability of code, you can access the different subcontexts too, but you need to know their name.\nAnd you haven't given an example about the way you would like to define this in feature files. You only said you want to do it in feature files\n. @everzet no. But the github autocompletion on mentions is crappy. It is able to suggest you first when I start writing @he\n. @headrevision subcontexts are about the inner implementation of steps, meaning you can use low levels step internally to implement steps used in your feature files. They are developer tools\n. This is indeed an issue but a Mink one, not a Behat one. As you can see, the error is in Behat\\Mink\\Exception\\ResponseTextException\n. well, the text of the doc is sayign --ansi properly. The screenshot of the output of behat --help is indeed outdated. My suggestion is to remove it entirely. Maintaining this screenshot uptodate would be too much work. It is better to tell people to run it if they want the full help\n. @MPV Can you try with the develop branch of Mink ? It should be fixed in it\n. @everzet agreed\n. Btw, should the retry be done at the step level or at the scenario level ? Executing a step twice may lead to a different behavior than doing it once in the scenario\n. @Furizaa you squashed the commits but then you merged your old remote branch instead of forcing the push, meaning you did not clean the history but duplicated changes in it\n. @headrevision Behat is testing your system as a black box. It does not know what the system did internally but only what the output is. Depending of the way you test your system, you may not even be able to distinguish the 2 cases: when testing a website, your browser will always receive a response (which should give you what you want but may tell you something went wrong or show you an octocat falling from a cliff), never a PHP exception.\nSo what Behat could detect is a PHP error in the implementation of the steps, but not in the system you test.\n. @headrevision can you update the readme to link to the Behat repo instead of linking to your own repo ?\n. and for tests, create a features folder in the repo, like in the Behat repo. Btw, would it make sense to move the code in a src folder as you also have the doc and the tests in it ?\n. -- tags ~javascript will exclude the javascript tag\n. @headrevision the bootstrap folder is the only place where Behat loads the PHP file. But if one of these files registers an autoloader, you will be able to use classes placed elsewhere.\n. github still says that the branch conflicts with our develop branch. Are you sure you rebased against the current state of the branch ?\n. @MPV except that Behat 2.3.5 will break with a Fatal error when using it with Gherkin 2.2.1. There is a reason to mark these versions as incompatible\n. app/autoload.php is specific to symfony. I don't think behat should have it.\n. a scenario expected to fail ?\nBtw, Behat is about testing the expected output. And the output of the application will not be a PHP exception. If an exception occurs, you will receive a blank page or an error page.\n. @zombor I know it is not limited to web. but if you are testing that you expect an exception, you are at the unit testing level, not at the behavior testing level IMO.\n. - Chained steps are not part of the core anymore for Behat 2.3\n- For table nodes, the reporter has no way to know which part of it was handled by the step implementation. This is part of code written by Behat users so I don't think we should force them to report partial progress of the step logic here.\n. yeah, sorry\n. all relative paths are relative to the location of the config file in Behat.\n. @everzet yeah, it could indeed be more logical\n. but we need to be documented clearly which options are relative to the current working directory\n. @everzet Should it be closed now that 3.0 supports multiple suites ?\n. All development happens in the develop branch. Please resend a PR to this branch instead\n. Thanks\n. seems good\n. you can already use tags to exclude scenarios (or features as scenarios inherit the tags from the feature) from the run: http://docs.behat.org/guides/6.cli.html#gherkin-filters\n. thanks\n. you have to execute it in the folder where you have your behat.yml file or to use the --config option, as Behat is searching the config in the current dir by default.\n. This option is documented when using the 2.2 version of the Console component as global options have been added to the help.\n. @everzet composer has a shebang and I use it on windows from gitbash. In such case, the shebang is useful too.\nThe issue when using php behat.phar is that you have to put the phar locally. It cannot search it in the path.\nThe shebang does not work from the cmd shell on windows indeed, but it does not break things (you simply have to call the php executable explicitly)\n. I just checked the 3.0.14 phar on https://github.com/Behat/Behat/releases and it has the shellbang properly\n. hmm, github.com/downloads is the legacy download system of Github, which has been shutdown more than 1 year ago. I did not even thought that the old files where still available through it. What you downloaded using this link is the 2.4.0 release\n. yep, it is good now. Merged\n. http://travis-ci.org/#!/Behat/Behat/jobs/1940132\n. thanks\n. could you add such a case in the feature suite to avoid regressions ?\n. @everzet is it OK for you ?\n. All development happens in the develop branch for Behat. Please resend it to the appropriate branch\n. Thanks\n. hmm, this is still not enough\n. @muhqu please rebase your branch. Github tells me it cannot be merged as is.\n. thanks\n. @nakohdo The Behat output is in UTF-8\n. In 3.0-RC1, only the i18n.feature is failing on Windows\n. @everzet please provide more details here\n. fixed\n. All development happens in the develop branch. Please send a PR to the appropriate branch instead\n. There is already such a feature: http://docs.behat.org/guides/2.definitions.html#step-argument-transformations\n. (HTTP/1.1 502 Bad Gateway) is not a github redirect but a github failure in their download system\n. @damonzocp note that the --prefer-source option does not have any value. Its goal is to tell composer to perfer the source install (i.e. git clone) over the dist install (i.e. downloading the zipball)\n. @damonzocp As composer uses the Symfony2 console component, the standard --help option is available to have the help of the command :)\n. Newer versions of Behat are working on Windows, so closing\n. formatters are defined in the container in 3.0-RC1\n. can you paste your behat.yml file ?\n. do you have a class named HTML in your project ?\n. I think this should be fixed as a side effect of #254. @MPV could you try the develop branch to confirm ?\n. Did you try to put Behat in verbose mode with --verbose ?\n. This is wrong. When using a file path, this file is expected to return an extension instance:\n``` php\n// some code to be able to get the extension class\nreturn new MyExternalExtension()\n```\nSee the existing extensions for instance: https://github.com/Behat/MinkExtension/blob/master/init.php\nThis PR cannot be merged as it would break all existing extensions.\n. Please send pull requests to the develop branch.\n. @xmeltrut Defining the classes is done by PHP when the file i loaded. If you define classes, I strongly advice you to setup an autoloader for them, so that you don't need to bother about the order of the require_once calls. PHP will simply load missing classes.\n. @xmeltrut requiring all files in the folder is not an autoloader. It is simply a bunch of require_once calls (even if they are generated dynamically based on the content of the folder).\n. Closing as this has been changed in 3.0\n. I pushed the right fix instead. See the commit linked above\n. could you submit it to the develop branch instead ? All development happen there. The master branch is only updated when releasing a new version\n. why do you need to add a run method doing nothing more than calling the parent method with the same arguments ? This is useless. Simply rely on the method defined in the parent class.\ndoRun is not meant to be called directly. It is called inside run. I don't know why this method is public in the Console component.\nThe issue with the output is that behat formatters are not using the console output to manage their output. They are writing to php://stout directly (still using the Console component StreamOutput).\n. thanks\n. thanks\n. We won't do this as it would forbig us to tag a release anymore. An unbound constraint means we tell composer that this version of Behat is compatible with any Gherkin version, which includes any future release of the library, including makor versions doing a full rewrite. And we of course cannot guarantee this compatibility.\nAnd as a released version cannot be changed anymore, we cannot \"fix\" the constraint the day we break BC in Gherkin major version.\nWhat is the issue in Flow3 requiring to use a different version of Gherkin ?\n. @everzet is it done in 3.0 or no ?\n. shouldn't you update the compiler pass registering initializers too ?\n. the initializer for adding subcontexts already exists: http://extensions.behat.org/context-initializer/\n. @everzet Actually, it is fixed in develop but not in master\n. https://github.com/Behat/Behat/blob/master/bin/behat#L18 vs https://github.com/Behat/Behat/blob/develop/bin/behat#L18\n. See https://github.com/Behat/Behat/commit/5f0c140d799d755a41aa164afd61c4b2b79db179\n. Actually, this is even worse: the root config is taking precedence when merging custom profiles. The issue concerns only the merging for the default profile\n. I don't have much time right now either. So not sure I will be able to do it quickly\n. This is an issue coming from the Symfony2 Console component (which is used by Behat) and which is fixed in Symfony 2.2: https://github.com/symfony/symfony/issues/5316\n. dev-master should also be aliased\n. spaces are our coding standards. Switching to tabs is rejected.\n. Fixed in 3.0-RC1\n. Fixed in 3.0\n. Please give the full error message to know which place exactly is requiring phpunit\n. This is because of the way regexes work. as the group is optional, it will not be in the matches if it is not found:\n``` php\npreg_match('/^a message about blah is( not)? displayed$/', 'a message about blah is not displayed', $m);\nvar_dump($m);\npreg_match('/^a message about blah is( not)? displayed$/', 'a message about blah is displayed', $m);\nvar_dump($m);\n```\nso you have 2 solutions:\n- adding a default value for the method argument:\nphp\n  public function aBlahMessageIsShown($negate = null) {\n- changing the regex to always have the group: /^a message about blah is(| not) displayed$/\n. @Taluu this is indeed far simpler than my own alternative given above :smile: \n. and we don't want true or false to know if the pattern matched or no. Behat needs the matched value\n. Reading the stacktrace, this happens when loading the bootstrap script: require_once('/home/quickstart/Behat/features/bootstrap/FeatureContext.php')\nSo what is requiring PHPUnit is your behat context, not behat.\n. I agree. Behat does not use PHPUnit anymore in its own code, so removing it will avoid this issue for newcomers. People wanting to use PHPUnit for assertions would probably know about the doc anyway as there is chances that they got the idea after reading the example in the doc. so :+1: from me\n. it has been removed\n. @RichardBradley using the #249 notation does not turn the issue into a PR. It creates a reference between them. See above and you will see it:\n\n. @RichardBradley PRs are always issues (a PR is issue+code).\nActually, there is a way to attach a changeset to an existing issue to create a PR, but only if you use the API to create the PR. When using the web interface, it always creates a new one.\nBut the interlinking is enough IMO, especially as github will then close the issue automatically when the PR gets merged into the main branch (which in the case of Behat means when a release is done with the change as the master branch is updated only for releases).\n. Please report it to the Symfony2Extension issue tracker.\n. It is named --config\n. timestamp of generation will not help. We don't need uniqueness between different formattings but between links in a given formatting.\n. This is wrong IMO. It is logical that a file wins over the file it includes.\n. @nenadalm You should distribute a behat.yml.dist and ignore the behat.yml. Behat will read it when behat.yml does not exist, and you can include the dist file in your behat.yml to avoid duplicating all settings\n. This is wrong. The 2.1 XmlFileLoader can be used too (it should not be mixed though).\n. Closing this as Behat 3 properly uses the translations for keywords (example step texts themselves are not translated, but maintaining such translations in gherkin is not worth it IMO)\n. This looks good to me. What do you think about it @everzet ?\n. why putting null for a boolean value ?\n. thanks\n. thanks\n. can you rebase actually ? It is conflicting with the merge of #274\n. Closing as it should be reported to MinkExtension if it happens again, not to Behat itself\n. The TableNode is not traversable in Gherkin 3.1, so I think this is not necessary\n. This is a libxml bug. See https://github.com/symfony/symfony/issues/7291\nClosing it as there is nothing Behat can do here. It is related to your PHP setup.\n. @everzet couldn't Behat pass the encoding explicitly instead of relying on the internal one ? It seems safer IMO. A testing tool should not forbid being used on legacy projects.\n. Fixed in 3.0\n. The dev version of Behat is marked as compatible with 2.3 already (and tested against it)\n. closing as new releases have been made since then\n. If you want it before the autoloader, I don't think you have another solution. A bootstrap file would have to be configured and called by behat, meaning it would happen after the autoloader is included\n. btw, what is the use case for bootstrapping something before including the composer autoloader ?\n. if the extension is not enabled in your behat config, it will never be known by Behat, and so having it installed or no won't make any difference.\nPlease provide a small project reproducing the issue so that we can look at what is wrong\n. @everzet what about a new release ? the develop branch already allows 2.3\n. thanks\n. it could still be included in 3.0 if the contribution is done soon enough of course.\n@everzet do you already have an ETA for the release ?\n. The PEAR package for Behat is not maintained anymore (none of the 2.4 releases ever went into it). You should not be using it anymore.\nI'm using Behat on Windows through composer without issue.\nRegarding the deployment, Behat should be listed as a dev requirement in your project, not as a normal requirement, and your deployment process should run composer install --no-dev so that dev dependencies don't get installed. This is exactly what dev dependencies are about\n. Well, what looks broken is not Behjat but the Console component. However, you are downloading unmaintained versions.\nAnd the pear channel is not documented anymore as an installation source\n. @flip111 as said above, use bin\\behat (or vendor\\bin\\behat if you haven't changed your bin-dir in yoru composer.json) to run behat, not behat, to use the script installed by composer, not the script available in the path.\n. according to my code review, yes. I haven't tried it yet\n. the issue is that the Background is not parsed as an outline (and you can have outlines and normal scenarios in the same feature file, so it would not work)\n. @aleherse There is no placeholder used in background in the feature file you are pasting.\nand Behat/Gherkin indeed does not support multiple sets of examples for the same outline. This could be added (please open a feature request on https://github.com/Behat/Gherkin/) but AFAIK, this is equivalent to putting all examples together as far as the runner is concerned (only the display is different)\n. I think you forgot to paste the phpdoc containing the annotation, so the first function is not considered as a step definition. Because of this, it gives you the snippet again (with a different method name to avoid fatal errors)\n. The phpdoc is actually the relevant part of the snippet it gives you.\nI suggest reading the doc about writing step definitions: http://docs.behat.org/guides/2.definitions.html\n. fixed by #314\n. Unable to reproduce. The method setSkip is defined in 2.5: https://github.com/Behat/Behat/blob/2.5/src/Behat/Behat/Tester/FeatureTester.php#L52\nAre you using a behat extension replacing the FeatureTester ?\n. @mprzytulski any news of the 2.5 PR ?\n. the gherkin constraint has been bumped to 2.3 in the latest 2.5 branch (not released yet). See #329\n. If you are using composer to manage your own vendors, you should follow the installation method 1, not the method 3. the goal of the method 3 is to install behat from source independently of your project (a global behat installation from source for instance)\n. there was an issue on Packagist a few hours ago (see their Twitter account for the announcement). Simply retry now\n. This is not a Behat issue. It is because you have a composer install from source (and so containing a git folder) and you added the vendor dir to your own git repo so git considered it as a submodule.\nRead http://getcomposer.org/doc/faqs/should-i-commit-the-dependencies-in-my-vendor-directory.md\n. @everzet shouldn't Gherkin nodes be immutable ?\n. @everzet is it OK for you ? Travis tells me that composer is fine with the new requirements\n. Behat itself does not deal with browsers at all. You are asking in the wrong project\n. Are you using the version 2.5 or 3.0-beta ?\n. A test covering this case would be good to avoid regressions\n. Can you give the link to the JUnit spec ? I always failed to find the official one (and I found conflicting ones)\n. @rande It looks like this output is not compatible with Jenkins according to @tonypiper. I think being compatible with Jenkins CI is more important than matchng the output of PHPUnit (PHPUnit will never try to read your Behat output while Jenkins will)\n. @GalCohen ~@test&&~@test2\n. to understand it, here is what is evaluated as boolean expression in the different cases:\n~test,test2: (NOT test) OR test2\n~@test,~@test2: (NOT test) OR (NOT test2) which is equivalent to NOT (test AND test2)\n~@test&&~@test2: (NOT test) AND (NOT test2)\nthe @ in the tag name is optional in all cases: @``is replaced by an empty string in the [TagFilter](https://github.com/Behat/Gherkin/blob/v3.0.3/src/Behat/Gherkin/Filter/TagFilter.php#L74)\n. @GalCohen See my comment above.~@test,~@test2will only exclude tags which have _both_ tags\n. @GalCohen ah indeed, if you don't have quotes around it,&&` will probably be interpreted by your shell as separating commands instead of being part of the argument passed to PHP\n. OK, this is labelled as a bug\n. Fixed in 3.0-RC1\n. I think this is a formatter which could be added in the core. What do you think @everzet ?\nIn the meantime, extensions are able to register formatters in 3.0\n. @dave1010 there is --dry-run to skip the execution\n. @dave1010 using --dry-run has no impact on the format of the output. they are unrelated settings. So it would be --dry-run --format terse doing it\n. yes exactly. \n. @everzet what do you think here ?\n. I will look at it tomorrow as I will be working on Gherkin (which is where this feature should be implemented)\n. Behat does not look for the context by looking in a folder. It expects an autoloadable class.\nWhen uisng Behat 2.x, it is common to put it in features/bootstrap/ because Behat will take care of loading the class for you, put it can be anywhere if another autoloader is able to find it (for instance your composer autoloader).\nNote that 3.0 removed the loading of classes from features/bootstrap/ (it provides a way to configure an autoloader instead)\n. Well, this messed up commit (this is 582125d1348451e5a8ba3a14ca46d2711c461943) was pushed to Behat in 2011, before Github enabled the fsck safeguard on each push.\nAFAIK, there is no way to fix this without rewriting the full history of the Behat repo since then, which would be a major mess for the community (anyone having a clone or a fork of Behat somewhere would have to delete it and start over from the new history).\nI'm not sure it is worth it, especially given that it does not forbid forking the repo on Github (as Github reuses the existing objects when forking).. Of course they will rewrite the history, as the issue is precisely the history.. your suggested regex is not equivalent. I would make I have a header \"foo\" \"bar\" baz\" while we don't want such match\n. explode(PHP_EOL, would break if your project uses Unix-style line endings and you are on Windows (which is a common case)\n. @everzet is there anything else to do when releasing than updating the changelog and tagging ? Generating a phar archive maybe ?\n. Are you using Behat 2.5 or 3.0 ?\n. For 2.x, there is no solution. For 3.0, just echo something from your context files. Behat 3.0 is capturing the output generated during the scenario and is adding it to the report.\n. well, for 2.x, there could be some way to achieve it, but it would involve using custom output formatters to implement the feature\n. @everzet I suggest you create a PR with your new version before merging in the 3.0 branch. It will be easier for me to review it than doing it on each individual commit\n. well, it was not done for the initial 3.0 refactoring :)\n. Closing as 3.0-RC1 is now out\n. are you using Behat 2 or 3 ?\n. Btw, quoting the same page of the doc (a little later when scrolling):\n\nSo, the @BeforeScenario or @AfterScenario hook will receive either a Behat\\Behat\\Event\\ScenarioEvent or Behat\\Behat\\Event\\OutlineExampleEvent instance, depending on the situation. It\u2019s your job to differentiate between them if needed.\n. I think the online doc is still talking about 2.5 as 3.0 is not stable yet. and this event class has indeed been renamed in 3.0\n. Injecting the container to use it as service locator is considered as a bad practice. So I would not recommend doing it.\n\nThus, which container would you inject ? The Behat container (which will probably be useless for you) or the container of your symfony application (in which case it cannot be implemented in Behat directly, as it is not tied to Symfony) ?\nNote that injecting the app container itself can create really weird issues in case the kernel is shutdown and booted again, thus creating a new container instance. You should use the KernelAwareInterface of the Symfony2Extension in such case, allowing you to retrieve the current container instance\n. this needs to be covered by tests\n. hmm yeah, it is covered indeed\n. I will review it as soon as I have time for it. (it will probably need to wait until tomorrow).\nHowever, I can already tell you that you failed the Travis review: the trait.feature should be skipped on PHP 5.3\n. @everzet to be honest, I already started looking at this refactoring before you opened the PR, when I saw that you created the branch. And from what I already saw, I like it (but I haven't reviewed it fully yet)\n. However, I have to admit that I was expecting to see a spec/ folder appearing during this new rewrite :smile: \n. I think Behat\\Transliterator should also be extracted (I'm not even sure it belongs to a Behat repo as it is coming from Doctrine 1 initially)\n. @beberlei would it make sense to provide it in the Doctrine organization ? It is some Doctrine 1 code after all\n. @everzet the autoloader functionality is not tied to Behat. The default path %paths.base%/features/bootstrap is, and this is the line on which I commented\n. @everzet FYI, I reviewed the Testwork part (with some pain because github hides the diff for half of it). The Behat part will wait a bit longer\n. @everzet I have a big issue. I tried running the Behat suite on windows. Result: 83 scenarios, 0 passed, 83 failed\nAnd the filtering of features by path is not working anymore in this new version\n. OK, I found the issue with the PathsFilter: missing realpath call on the locators passed to the PathsFilter constructor to fix the directory separators. Where should we fix it ? In the PathsFilter constructor (it ensures things will work properly for all usages of Gherkin) or in the places defining the feature locators of a suite ?\n. I also found the issue with most failures: the step I run behat only capture stdout. On Unix, it redirects stderr to stdout, but on Windows, it is displayed in the main stderr. As Console writes to stderr when an exception occurs, everything gets messed up in the tests.\nUnfortunately, exec() does not support capturing STDERR. Should we switch to the Process component to run the Behat process in the FeatureContext ?\n. @everzet To support windows properly, we should have a way to avoid unicode chars used in the PrettyFormatter. The Windows console does not use unicode. Otherwise, we will face https://github.com/phpspec/phpspec/issues/106 as well\n. I'm working on fixing some Windows bugs\n. I found the reason for some of my issues in the tests: the SnippetController does not use the same CliOutputPrinter than formatter. This means that --no-colors is not respected for snippets (the formatters are responsible for configuring the printer here).\nI'm not sure why this is the case. The ProgressFormatter and the PrettyFormatter are sharing the same instance.\nIt may be related to the scope inconsistency between the Testwork and Behat CliExtension when defining the printer service\n. @everzet The HHVM builds are broken on Travis because of the command being used to specify the tag filtering, making these builds useless\n. @everzet actually, they don't get the same instance. I just failed at seeing the difference in their spl_object_hash (the beginning and the end was the same, and the human brain is bad at seeing a small difference in the middle of a word).\nHowever, the definition of the OutputPrinter service is kind of messy\n- formatters are defining their own (anonymous) services for it\n- the CliExtension defines a printer service used by many other services (all places needing one, except formatters). This one is inconsistent between Behat (container-scoped) and Testwork (prototype-scoped, but never used when running Behat because of the overwrite), and is never configured based on the CLI options.\n. Btw, should all these services really build a CliOutputPrinter using its own console output, or should it be build using the main OutputInterface (used by the Command, and which is configured properly) ?\n. @everzet see https://github.com/Behat/Behat/blob/c39c70169c994bde7c156a2b3663026d4e79b49f/src/Behat/Testwork/Cli/ServiceContainer/CliExtension.php#L133\nThis does not affect Behat, because it overwrites the method\n. @everzet actually, it would be even cleaner if the formatter were using the main output as well when they are sending to the real output (which would respect things if the command is called with a custom output implementation, like in a CommandTester for instance).\nThey would need a separate Printer only when they send to nowhere (kinda useless) or to a file. Instead of switching the output path of a printer instance set in it, we should probably inject a different printer instance based on the config. what do you think ?\n. the output of the --init step does not respect --no-colors either. I think it runs too early, before the configuration is processed\n. and to understand why it breaks things for me: I'm running my console in ConEmu, so the main process is guessed as supporting colors based on the ConEmu environment variable (which is true). But the subprocess does not run in ConEmu (PHP runs it directly in cmd) so it does not support colors. But as it inherits the environment, it is guessed as supporting them. So any code ignoring --no-colors will fail by output ANSI colors to the output.\nThis is not an issue on Unix, because the guessing of the color support is not based on an environment variable but on isatty (so subprocessed are always guessed as not supporting them, which hides the fact that --no-color is not supported)\n. I pushed the changes I did to support Windows.\nRemaining failures:\n- the init.feature scenarios (see my previous comment reporting a bug causing this)\n- the i18n.feature scenarios (not sure if this can be fixed, as it uses some unicode output, which may get messed in the process output)\n- the context.feature:257 scenario (I don't know why yet)\n. OK, fixed the init feature by changing the priority of the OutputController\n. Here we go, the only remaining windows failures are the i18n.feature scenarios\n. @everzet Please have a look at the changes I pushed. If you agree with them, it is OK to merge this PR IMO. I don't consider that fixing the i18n.feature on Windows is needed before the merge (I don't know whether it is even possible to fix it easily).\nthe remaining issue is fixing the HHVM setup on Travis, but it can be done separately\n. :+1: \n. I think we can also say that you are amazing when seeing this new version :smiley: \n. @cordoval updating the Behat documentation for 3.0 is part of the next steps for @everzet \n. that's great. You can look at the PhpSpec formatter to see how the XML should look, and the XSD used by Jenkins to validate the file is at https://svn.jenkins-ci.org/trunk/hudson/dtkit/dtkit-format/dtkit-junit-model/src/main/resources/com/thalesgroup/dtkit/junit/model/xsd/junit-4.xsd\n. @WouterJ I don't think it make sense to output a junit report to the console itself actually\n. @WouterJ this would be inconsistent with the way other formatter behaves when their output is sent to a file instead of the console\n. No, you create a JunitFormatter which does not extend CliFormatter. It does not need to delegate the writing to an OutputPrinter IMO (especially as I think building the XML with SimpleXML like in PhpSpec might be a better idea than streaming the XML output and hoping that our logic always produce a valid XML)\n. the developer implementing the new formatter should take #326 into account\n. having multiple formatters work. We have scenarios ensuring it: https://github.com/Behat/Behat/blob/master/features/multiple_formats.feature\nHowever, the junit formatter is not yet available in Behat 3 (there is a pending PR adding it)\n. @ichionid you have an indentation issue for the output_path. It should be a child of html, but you configured it as a child of formatters\n. @everzet the question now is whether we want to put an HTML formatter in core or we consider than an extension is enough for that.\nI see several advantages on an extension:\n- it allows proper dependency management (relying on Twig for templates for instance)\n- it could allow to have several extensions with different approaches to the reporting. For Behat 2, there is some 'advanced_html' formatters out there (or whatever name they choose) because some people wanted more things (or less things) than in the core formatter\n. @dutchiexl are you willing to continue maintaining it ?\n. The vagrant file is gone in the 3.0 branch of the library, so closing\n. It is not really necessary to have a Vagrant box to contribute to Behat. I think it is even better if the contributors are using their own machine when they contribute to Behat, as it means that we have better chances to have a library working on different setups. If everyone developing Behat was using the Vagrant box, it would hurt the support for any other platforms. For instance, I spent a few hours yesterday ensuring that Behat 3.0-RC1 runs properly on Windows.\nIMO, using a Vagrant box in the project is fine when you are developing an application where you know how the prod environment will look like (to replicate it when developing). In Behat, we don't control our prod environment (our prod environments are the dev and CI setups of people using Behat)\n. I would rather drop this VagrantFile from the 2.5 branch as well instead. What do you think @everzet ?\n. removed from the 2.5 branch as well\n. thanks\n. thanks\n. thanks\n. thanks\n. @danielcsgomes looks like you messed your rebase as you duplicated some upstream commits in the history of your PR\n. Merged. Thanks guys\n. Please don't revert other contributions done in this file when you resolve the conflicts\n. Behat 2.5 translates snippets as mod\u00e8les. I think 3.0 should do the same\n. 2.5 does not have a translation for hooks. Hooks were not first class citizen\n. I rebased and squashed the commits before merging to fix the conflicts. Thanks for your contribution\n. Closing as #369 was first and does not erase the French translation\n. However the other PR has a few differences in the translations. Can you review them to help getting the best one ?\n. Please don't revert the formatting changes I did\n. @ricoli @danielcsgomes you both submitted a portuguese translation (the other one is #367). Can you work on talking the best of each one ? As I don't speak Portuguese, I cannot choose between both PRs\n. @danielcsgomes other translations are translating snippets\nfor what it is worth, Behat 2.5 is using exemplos in its Portuguese translation\n. Closing in favor of #367 where the work has been combined\n. I amended your commit to order the locales properly before merging. Thanks for your contribution\n. Thanks\n. This looks good to me for now. don't forget to include the stdout in the junit report as it supports it\n. @WouterJ the stdout should be placed in the dedicated <system-out> tag, not inside <failure>\n. could you try to fix the permission issue making the suite fail on Travis ?\n. I posted the link to the XSD in the issue for asking for the formatter\n. Given the way the JUnit report looks like, I don't think it will possible to keep the description of scenarios in the report actually. The JUnit format has not been thought to contain the source of the test, but only the result of the run.\nI think we should build the JUnit report by thinking at the Scenario level only.\nFor people wanting a better report in their Jenkins build, we should implement #292 to allow integrating with the Cucumber plugin of Jenkins instead of trying to go through the JUnit support.\n. yeah, let's build a JUnit report based on the JUnit expectations, not based on Behat full capabilities.\nThe proper Jenkins integration should be made through the cucumber plugin\n. @WouterJ what is the status of this PR ?\n. thanks\n. When looking at the file locally, I saw a messed encoding. It looks like your submission was not encoded in UTF-8 but the github UI handled it while displaying. could you submit a fix ?\n. your messed your history. I duplicates the commits of the portuguese translation PR. Can you clean your branch ?\n. thanks\n. the diff is messy because Github used the encoding of the beginning of the diff (i.e. the bad one) to display the patch, no the new one (appearing only later).\nThanks for the fix\n. Looks good to me\n. thanks\n. @everzet I pushed the fix for the regex. I consider it is ready to be merged\n. To be honest, it does not remove the dependency, as Gherkin still depends on the Finder\n. nope: https://github.com/Behat/Gherkin/blob/e2aebb6c5ceb331c6170fc1d327fbe6fffcdab61/composer.json#L18\n. i progress\n. done\n. on it\n. @everzet the Behat\\Testwork\\ServiceContainer\\Exception\\ProcessingException is not used anymore in Behat. Should we keep it for extensions (and other Testwork users) or drop it ?\nFYI, I'm currently using it in the new version of MinkExtension (where the alias of a driver cannot be optional). I would be in favor of keeping it so that extensions can easily throw a ServiceContainerException when they process the container.\n. not needed: https://github.com/Behat/MinkExtension/pull/117#issuecomment-31585792\n. While looking at it, I'm wondering about the signature of the SubjectLocator. Currently, it returns null|SubjectIterator.\nBut this means that there is actually 2 ways for a SubjectLocator to deal with an unsupported locator or an unsupported suite:\n- returning null, which then need to be checked by the SubjectFinder to skip it\n- returning an empty iterator.\nThe built-in GherkinFilesystemLocator never returns null as it checks the locator lazily in the iterator.\nI suggest simplifying the SubjectFinder by always returning an iterator in the SubjectLocator. We could eventually provide an implementation of an empty iterator to be used when the SubjectLocator checks the locator itself instead of letting the iterator do it:\n``` php\nnamespace Behat\\Testwork\\Subject;\nclass EmptySubjectIterator extends \\EmptyIterator implements SubjectIterator\n{\n    /*\n     * @var Suite\n     /\n    private $suite;\npublic function __construct(Suite $suite)\n{\n    $this->suite = $suite;\n}\n\n}\n```\nwhat do you think about this suggestion ?\n. do you prefer to pass it before the class name or after in the signature ?\n. and should I rename supportsClassname to supportsClassnameAndSuite ?\n. There is one thing I don't understand in your description:\n- the KernelAwareContext can be used in suites defined outside bundles (the features of my Symfony2 project are not placed in the bundle but at the root of the project to be first-class citizens, but I still access the kernel in some places)\n- the MinkAwareContext is not related to the fact that you are in a bundle or outside it.\nThe best way to combine them would be to have an extensible API to build the generated class (it may be based on the PhpSpec ClassCreator API for instance, but I'm not sure it is enough to build user-facing code with comments)\n. Ok, the suggestion of the issue is implemented, so closing. I will open a separate issue for the class builder API\n. how would the suite configuration look like to provide these settings for different context classes ?\n. what is contexts here ? a suite setting, or the config of the ContextExtension ?\n. merging parameters for contexts (or even the list of contexts) between profiles will be hard, as the suite needs to be a prototyped node (as we don't know the list of allowed settings) so we cannot handle contexts in a special way. and thus, the SuiteExtension lives in Testwork currently\n. OK, I'm on it\n. I have the same issue about merging parameters between configs: the settings are using a VariableNode for the prototype, which means settings don't get merged deeply.\nHowever, the list of contexts or paths is not merged either so I think it could even be confusing to handle it differently for parameters. But this requires modifying an expected behavior (I have to change the .feature files)\n. duplicate of #389 \n. @everzet can you give some insight on it ?\n. The point is getRowAsStringWithWrappedValues does not exist in Gherkin\n. Sorry, was an issue of PhpStorm not reloading the content of the TableNode file properly after an update of the vendors (it was still using the node from Gherkin 2.x form my switch to Behat 2.5)\n. is it needed to rebase ? Github does not tell me it conflicts\n. are you sure ? Github does not asks for it\n. Are you OK with the changes in the features (I gave more details in the related issue discussion) ?\n. Well, as you asked to merge, I assume you are OK with the changes, so merging\n. thanks\n. That's not related to Behat at all. You are running composer here, not Behat. And the repo where it fails is not even a Behat repo. Please contact the Composer support instead\n. I haven't had time to review it in detail anyway\n. why closing this ?\n. you forgot to simplify the SubjectFinder as it does not need to handle null anymore\n. :+1: for me if Travis agrees\n. you should rebase the branch so that Github updates the PR as the other PR has been merged\n. @everzet next time you want to notify me, please do it only in the PR, not in the commit message. Otherwise, I get a new notification for each rebase as it creates a new commit.\n. @everzet you should update this PR according to my review, as other PRs are depending on it\n. Ok, then merging. But then next PR suffers from the same issue so I will comment on it again.\n. Needs a rebase\n. :+1: \n. @everzet I even suggest marking it as 3.0 as it will helps a lot for documenting the new configuration. Feel free to push to 3.1 instead if you prefer\n. I'm pretty sure it can land. I may work on it this weekend if you don't do it before\n. :+1: assuming nothing is broken (but Travis cannot catch up the queue fast enough currently)\n. @everzet as you are using the Behat repo for feature branches, Travis is triggering 2 builds each time: once for the branch code, and once for the PR with the merged code. This does not help with the load.\n. Well, the issue is that it is easy to miss things when creating a new maintenance branch. When you switch from master/develop to 2.5 and 3.0, Behat went untested on Travis during 2 weeks, because 2.5 was not tested there. This is why I removed the restriction\n. hmm, actually, we can specify a blacklist rather than a whitelist, and I know we can use regexes. So we could exclude branches named like features/* and hotfix/*. If you keep following this convention for your branches (you seem to follow it from what I saw recently), it will avoid useless builds most of the time\n. OK, merging this one even if  Travis still needs to run a few jobs in the matrix\n. :+1: \nSupporting both options means the merging of the config is impossible to understand (the singular key always wins, even if it was defined in the imported file)\n. I think this would deserve a test, but I'm not sure which tool is the right one for this. I think testing this is easier with a PHPUnit integration (looping over the iterator) rather than by specifying the behavior of the grouped iterator with PhpSpec. What do you think @everzet ?\n. OK, the HHVM testing is now completly broken. Since a few weeks, all steps are marked as being undefined (and builds are marked as passing because of that)\n. :+1: but it needs some .feature file\n. :+1: \n. using PHP_EOL only as replacement is not good either. All my projects are using LF line endings even though I'm on Windows, because I'm not the only dev working on them and we want consistent line endings. The replacement needs to support both\n. probably because of outdated docs.\nThe site is being rebuild by @everzet currently AFAIK\n. @everzet I actually found the place where this website was stored. Can you deploy the change ?\n. Making my code more complex, I managed to avoid reporting substeps in the output. But as they are still executed after the dispatching of the event because of the way the hookable tester is built, the reporting is broken. I would really need a way to decorate the step tester differently\n. @everzet what is the ETA for this PR ? \n. @everzet any news ?\n. This refactoring looks a really great idea.\n. is it still an issue after #450 ?\n. @everzet ping\n. when, using the turnip syntax to report a 2.5 issue is weird, givent hat it is not supported.\n. There was no need to rebase it. It was already rebased on the latest 3.0 branch. However, I pushed a few more changes\n. OK, tests are failing on Symfony 2.3 (and on my Windows machine with 2.4) because of small differences in the output of the reference dumper. How would you handle it ?\n. if you have time for it, yeah it would be good\n. @everzet I rebased my branch to fix the conflicts. However, it would be great if you have time to fix the testsuite\n. I think we should find a way to write the feature without relying on the exact format of the reference output, as we don't control it. This will avoid the pain of handling formatting changes between Symfony 2.3 and 2.4, and also avoid the pain of having to update these scenario neach time we alter the config a bit in Behat\n. Well, the issue is that we could have different expectations here: currently, using a metastep is equivalent to calling the method directly on the context (well, a bit slower because it requires parsing the step and searching the method, but avoids bothering on the context defining it on the other hand).\nThe chained steps are purely an implementation detail.\nTriggering the events for each substep introduces lots of issues.\nAnd it cannot be introduced in 2.5 anyway, because it is a huge BC break\n. @jmauerhan It will be an issue for any testsuite relying on the current behavior, i.e. getting the hook triggered only for real steps.\nAnd the hook and the event must stay consistent (otherwise it will become impossible), and triggering the event for substeps will have a much bigger impact (breaking all formatters by displaying the chained steps in the output for instance).\nRegarding 3.0, it does not have step chaining at all in core anymore. The goal is to implement it as an extension, but it does not work currently (the existing code is precisely facing the issue I'm describing about triggering these events too often). A refactoring is in progress to allow implementing the ChainedStepsExtension properly (expected to be submitted for review this week)\n. @everzet could you temporary change the Travis config so that it can run the suite ? It currently fails entirely because of the missing progress formatter\n. @everzet this refactoring looks good to me. I haven't tried to update the ChainedStepsExtension yet, but I'm quite sure it is now possible to implement it.\nIt would be great to re-implement the other formatters to see how much code can be shared between them\n. @everzet I will review it in detail this evening. I need some time to do it given the amount of changes\n. I haven't tried to update the ChainedStepsExtension yet to see whether it can be implemented properly now (from my review, I think it can). However, I like the new architecture. Much more flexible than the previous one.\nIt is unfortunate that you chose to tag Behat as RC for previous releases though. BC breaks between each RC are not really an indicator of being ready for a release...\n. @everzet I would actually make a RC3 to have a real RC before the stable release to let extension authors update their code for the BC breaks done after RC2.\n. @everzet this plan looks good to me\n. Merging as is. It will be easier to review small improvements\n. :+1: for all changes done so far\n. except for the 2 comments I made, it is OK for me.\nI assume that you will submit the refactoring of the definition wrapping as a separate PR ?\n. which Behat version are you using ?\n. then composer show -i behat/behat will show you the metadata of the installed behat package\n. hmm, 2.4.6 is pretty old. why not uisng 2.5 ?\nand btw, Mink 1.4 is quite old as well\n. which PHP version are you using ?\n. $event->getSuite() gives you the suite for all events IIRC\n. IMO, the HTML formatter will not need it: I don't see the reason to split the report into several files.\nthe only reason we need it for the JUnit formatter is because the JUnit format is simply not adapted to what Behat is reporting\n. @WouterJ the main branch of the repo is now named master rather than 3.0 (naming 3.0 is a pain given that such new feature will make us bump the version to 3.1 according to semver). Could you reopen the PR against the master branch ? This PR will get closed automatically by github because of the removal of the 3.0 branch of the repo.\n. your behat.yml does not configure the bundle for the Symfony2Extension\n. if you already have an existing feature suite, there is no reason to run --init again anyway\n. Can you make Travis run a build on PHP 5.3.3 to ensure compatibility in the future ?\nWe don't need to run it for all Symfony versions (which would take time for nothing on Travis) so I suggest adding it in the build matrix explicitly instead of adding it in the list of PHP versions used to build the default matrix:\nyaml\nmatrix:\n  #...\n  include:\n    - php: 5.3.3\n      env: SYMFONY_VERSION='2.4.*'\n. there is something weird happening in the 5.3.3 build. Looks like there is another bug\n. OK, so the issue on HHVM was really a weird one: the order in which the pattern policies were applied was not the same. they were registered with the same priority, which means their order was undefined (it depends of the order in which PHP decides to give them). and running the turnip policies before the regex one means that all patterns are processed as beign turnip ones, leading to wrong regexes...\n. And now, the only remaining HHVM failure is because the notice message uses index rather than offset. We are running on HHVM again!\n. I'm currently working on some phpdoc and CS fixes. Will push them once I'm done\n. Note that this setup is based on the one used in MinkExtension since 1 month\n. @everzet should it be considered as fixed by 01feae86764c985615dca660b65da7e0515c695f ?\n. This happens when your process is too long and the connection timeouts.\nAnd indeed, this is not related to Behat. Behat does not use MySQL at all. If you look at the stack trace, it comes from Drupal, not from Behat.\n. The autoloader should be removed from the SuiteWithContextsSetup, right ?\n. ah sorry, I forgot that the SuiteWithContextsSetup was using the ClassLoader for other stuff as well, not only to trigger the register call for instantiation.\n. @WouterJ you can now benefit from this fix for your own framework for free (well, not exactly for free, you need to update to the dev version)\n. feature files are isolated (actually, scenarios inside it are). So IMO, this does not make sense.\n. @TLyngeJ IMO, the issue is the way you write your scenario. Given I create new \"foobar\" application is a weird wording for the Given step. A Given describe the initial state, not actions which are taken.\nWhat I have in my scenarios are a step Given there is an application \"foobar\". and the implementation will create it in the DB directly. this has several advantages:\n- the scenario does not depend on the fact that all creation interfaces are working (if the creation interfaces are broken, the scenario covering the creation should fail, but not all other scenarios about the display pages and so on, which would be unusable). Otherwise, the scenario will actually not be focused on what it describes.\n- the scenario runs much faster. Doing a few DB queries is way faster than going through 3 different pages of the app (which implies HTTP requests and their processing).\nThe Given steps are generally the only steps where it is OK to deal with your internal storage directly (When and Then steps should deal with what the user can do and see)\n. this looks like a bug to me\n. @everzet I think a failed step should still run the after hook. The hook will still be able to decide to skip the logic on failed steps if they want as the AfterStepScope contains the test result\n. yes\n. I will look at it this evening\n. @everzet this one would deserve a fix without waiting for 3.1.0 IMO (it will have to be in a 3.0.2 now)\n. The solution I see is handling --colors in the Application class (as done for --ansi in symfony) rather than in a Controller.\n. thanks\n. this would probably be solved by adding ->performNoDeepMerging() on the filters nod ein the configuration\n. what do you think @everzet ?\n. @everzet regarding the BC on interfaces, is it only for consumers of the class or also for implementers ? This makes a huge difference as full BC on an interface means I cannot add a new method in the Snippet interface, requiring to add a new child interface for snippets knowing about the needed use statements.\nOn the other hand, if we only guarantee BC for consumers of the interface, adding a new method is not an issue\n. @everzet the issue is that AggregateSnippet would have to be aware of it as well, and it depends on Snippet currently\n. The SnippetAppender is appending an AggregateSnippet, not a ContextSnippet. And this is the place where the used classes need to be retrieved from the snippet\n. The snippet abstraction is a bit weird to me: the code is split between Behat\\Behat\\Snippet and Behat\\Behat\\Context\\Snippet. The logic of needing some classes in the snippet template is not specific to contexts IMO. Any snippet generating code is likely to need some use statements\n. anyway, the PR is opened, so we can discuss it there\n. too bad you were fast on releasing 3.0.3 after your own fixes today. I was hoping to get this in before the next release (will we get a fourth 3.0.x release out during the same weekend :smile: ?)\n. :+1: \n. well, given that most extension probably expect the new behavior (relative order of *Tested::BEFORE and hooks), it think it is OK to do it in 3.0.4\n. well, this is a Behat 2 config. So running it in Behat 3 will not work.\nHowever, I don't understand why you would get this error. Parsing this Yaml will return an array\n. I don't understand what you mean. there is nothing about getWindowsNames in Behat. And if you are talkign about Mink, it is totally possible to use the Mink master branch with Behat 2.5 and MinkExtension 1.3.1\n. note that if you use the dev version of Mink, you should probably alos use the dev versions of drivers\n. Your exception does not come from Mink.\nBut then, if you use Behat 3, the first think to do is to fix your config to be a Behat 3 config, ot a Behat 2 one\n. Look at the Behat features to see how its config look like, until the 3.0 doc is online: https://github.com/Behat/Behat/tree/master/features\nRegaring alter boxes, I think you are confusing tools. Behat does not deal with browsers but with automating the verification of features. So it has no alert boxes to deal with, be it in 2.x or 3.x\n. Behat and Mink are 2 separate projects. The version of Behat you use has nothing to do with the features available in Mink\n. Well, see the comment above giving the answer, where FeatureContext is the fully qualified class name of the context class. It works the same when the class is namespaced (except quoting the class name with single quotes may be needed to have a valid Yaml syntax because of the backslash, but I'm not even sure it is needed)\n. install the dev version of Gherkin. We merged a change which avoids hitting the huge PHP 5.6 bug (they broke half of the array_* functions)\n. OK, I just tagged Gherkin 4.1.1 which is fixed. Update your lock file and it will work on PHP 5.6 again\n. @peterjmit avoiding circular references is indeed done on purpose:\n- it is necessary to make gherkin nodes immutable (you cannot create an immutable circular object graph as you won't be able to instantiate it)\n- it was one of the thing improving Behat memory usage a lot (PHP is way better at releasing memory for non-circular object graphs, as this does not require going through the garbage collector)\n. well, doing something like aruba is actually quite similar to the FeatureContext of Behat (it implies making some stuff configurable instead of hardcoding Behat-specific stuff in it).\nSo I assume it would go more in the direction of the second option.\nWe could probably start it as a context allowing to run Behat processes (the use case for Behat and extensions) and then enhance it in a second step to support any CLI tool. What do you think ?\n. In 2.5, you will have to overwrite it also for the phantomjs profile because of an inconsistency in the way the config of the default profile gets applied for other profiles.\n``` yaml\nimports:\n  - behat.yml.dist\ndefault:\n    extensions:\n        Behat\\MinkExtension\\Extension:\n            selenium2:\n                wd_host: http://localhost:4444/wd/hub\nphantomjs:\n    extensions:\n        Behat\\MinkExtension\\Extension:\n            selenium2:\n                wd_host: http://localhost:4444/wd/hub\n```\nthis has been solved in Behat 3 already\n. It is weird if it does not work.\nBut on a side note, I find it weird to see Given I Load my fixtures as a step in the scenario. Loading fixtures is not part of the description of the feature. It is an implementation detail of the test of the feature implementation. This should be done in a @BeforeScenario hook instead\n. Looks like you have a different issue @tyx \n. @shouze how are you loading scenario-specific fixtures with your step being Given I load fixtures ? This looks like a generic loading only.\nfor scenario-specific fixtures, I have some steps sayign stuff like Given there is a user \"John Doe\" which can be used in scenario. But this is different than Given I load fixtures. In the first case, the sentence is part of the scenario narrative. In the second one, it is not (your stakeholders will probably not even understand what \"fixtures\" mean in the sentence when reading the feature)\n. for events, you should indeed register on beforeScenarioOutline as well\n. @shouze either have a domain-related sentence describing the initial state, or use a hook to load the fixtures (you can register the hook for some tags only if you want to load a specific set of fixtures only for some features)\n. @tyx events and hooks have different purposes in Behat. Because of this, the events are indeed different for outline examples rather than normal scenarios. On the other hand, hooks (which are an extension point for context classes) don't make a distinction. The @BeforeScenario hook is used for both cases\n. for the purpose of loading fixtures, a hook seems more appropriate indeed\n. can you run behat in verbose mode to get more detauls about the exception ?\n. btw, the exception message product_attribute object::type has \"text\" value but \"text,\" expected does not look like a Behat exception message\n. -1 for this. We should not make our gherkin parser support non-Gherkin syntaxes. The goal is to follow the Gherkin spec (written by the Cucumber guys).\n. currently, it is not possible\n. This change is done on purpose in 2.3. In Behat 3, the filter specifies which scenarios belong to a given suite. The CLI option allows to filter scenarios being run, but this should not replace the suite definition.\n. sounds good to me as well\n. This is logical. If it is excluded by the suite level filter, it is not part of the suite. There is no reason for the scenario to run as part of the suite in such case.\nIf you want your suite to include every scenario, why adding a tag filter in the suite ?\n. I think we could make this cache folder configurable again. what do you think @everzet ?\n. thanks\n. @stloyd nope. Chained steps don't exist in Behat 3\n. @jakzal the extension does not work currently. It was working with some previous implementation of Behat 3 the beta versions) but not with the final version. And I haven't spent time on it to figure whether it can be fixed entirely now\n. you can pass arguments to the context constructor in your config.yml too. See http://behat.readthedocs.org/en/latest/guides/4.contexts.html#context-parameters\n. at the time the hook runs, the step has not yet been matched to a step definition. So it simply cannot be provided\n. @ianbytchek finding the callable needing to run the step is the job of the RuntimeStepTester. The HookableStepTester has no reason to know how to perform this resolution (it does not even have a reason to know that testing the step will involve matching it to a PHP callable)\n. Please read the documentation in the SymfonyExtension repository (same for MinkExtension) rather than on behat.org. The behat.org website is still for Behat 2.5\n. I don't thiknk you have read the Symfony2Extension carefully to follow it. Otherwise you would have seen tht Behat\\Symfony2Extension\\Extension is not the name of the extension class anymore in the version 2 for Behat 3. you need to register it as Behat\\Symfony2Extension only (and the same is true for MinkExtension):\nhttps://github.com/Behat/Symfony2Extension/blob/master/doc/index.rst#through-composer\n. thanks\n. If your classes are autoloadable by your composer autoloader, they can be sued by Behat too, even when they don't follow PSR-0\n. this is because the name of your class is not WebContext but myCompany\\Interfaces\\WebContext as you put it in a namespace. So you need to fix the config referencing it\n. I have an idea about how to build this. I will try to build an extension for this during the weekend (maybe earlier if I have time for it)\n. While working on my idea yesterday evening, I discovered that there is a much better way to do this, without any extra Behat extension: https://gist.github.com/stof/930e968829cd66751a3a\nI will submit a PR to the doc with this\n. @gggeek This issue is about having a way to communicate between contexts, so I don't understand your comment saying you don't want multiple contexts. If you don't have multiple contexts, you are simply not concerned about the issue of communicating between them.\n. @RynnHeldeD I suggest keeping this closed in favor of the solution I suggested above (and for which I sent a documentation PR)\n. The weird thing is that the translator is not reset between suites AFAIK. so it should already have the translations\n. the default profile is special. It gets merged into each other profile. So if you define the paths in the default profile, you won't need to duplicate it in other profiles\n. -1. The snippet appender is adding it automatically when needed\n. the key is named output, not formatter for the output formatting in Behat 3\n. ah no sorry, the OutputExtension is not named output but formatters\n. Thje JUnit support is quite ready. For the HTML, there is no work done on it yet\n. no, it is not merged yet. See the opened PRs\n. from composer or from github releases\n. :+1: I think this is ready to be included in the release as well.\n. This is broken\n. Both Travis and Scrutinizer are showing it (even though we don't have failure conditions configured on Scrutinizer so it sets the status as green)\n. this is related to the turnip syntax, right ?\n. you need to bump the Gherkin requirement\n. ah sorry, I forgot we already bumped it for another Gherkin fix\n. @everzet do we need it ? If we follow semver strictly, it would mean that people can update to the next minor version without breaking anything. This means that we would not need to provide patch releases for previous minor releases. See Twig for instance. It has never created maintenance branches for its minor releases in 3 years\n. Using arbitrary option names like that would be insane to implement (and to document). Thus, it won't play well with class names, as \\ is not valid in option names (or at least insane as it is the escape char in the shell).\nHowever, Behat allows you to pass the configuration you want by putting it in JSON in the BEHAT_PARAMS environment variable:\nbash\n$ BEHAT_PARAMS='{\"suites\":{\"default\":{\"contexts\":[{\"MyAwesomeContext\":{\"outputFolder\":\"/data/output\",\"baseUrl\":\"http://localhost:8080\"}}]}}}' bin/behat -s default\nThis is probably painful to write by hand (it is much easier to create a local behat.yml file, import  the project's behat.yml.dist file shipped in the project and overwrite the few config you want) but it can be handy for scripts calling behat.\n. this is actually a bug when the default value is null, because the check uses isset rather than array_key_exists. see #584\n. I think this makes sense. It is uncommon to have your domain language being case sensitive IMO.\nAnd if you really define 2 steps differing only by the case (which would now be reported as ambiguous steps), it probably mean that the author of the features is masochist\n. well, there is several points here:\n- this regex is not anchored => it cannot be turned into turnip (and it is probably a bad idea for Behat)\n- turnip has a syntax for alternatives using /, but I think it works for single words only\n. a scenario covering this must be added\nand it must be added before adding the code change, to run the scenario on the existing codebase first. I think the current code should allow this already\n. @fchris82 you should add a scenario using a step defined with a nullable tableNode and not passing it, yes, as it is a new usage scenario compared to the tested one.\nand indeed, using array_key_exists is better\n. @alesblaznik could you submit your bugfix as a PR ?\n. Fixed in #585\n. thanks\n. make sure that opcache does not strip docComments. Check the value of opcache.save_comments. If it is 0, docComments are removed, and so the metadata is not available anymore\n. concatenating all files will make it very hard to merge configs whihc are overwriting other parts of the config. Merging config is a very hard task, and doing it on YAML strings rather than on PHP data structures is even worse.\nYou cannot just concatenate: you cannot have a duplicate key in a YAML hash. One of them will be discarded\n. YAML does not have a way to import a file in another one.\nA common usage of imports is overwriting the config locally:\nbehat.yml.dist (versionned)\nyaml\ndefault:\n    suites:\n        default:\n            # more config...\n    extensions:\n        Behat\\MinkExtension:\n            browser: firefox\n            base_url: http://locahost/\nbehat.yml (ignored from VCS)\n``` yaml\nimports:\n    - behat.yml.dist # import the default project ocnfig instead of duplicating it\ndefault:\n   extensions:\n        Behat\\MinkExtension:\n            base_url: http://myapp.dev/\n```\nSuch usage cannot be handled with file concatenation. You need to merge the configs together, not to concatenate them.\nThe imports are really about importing several config files. Changing this to concatenate them is a no-go as it would be a big BC break making imports much less usable IMO.\n. @DaveMC08 The YAML component is about loading a single file (the YAML spec as well). YAML does not have a concept of merging several files together.\n. Please display a non-shorted version so that I can understand how this should work for you. I fear that the output you expect will still require merging configs, which cannot be done without parsing the config files, which itself canot be done without merging as you want to merge the YAML files rather than the config.\n. btw, please describe the use case you want to achieve here. Maybe there is already a way to achieve it with the current importing system\n. imports in Behat is about importing a config, not about importing a file content (we could imagine allowing importing PHP files in the future btw).\nand this is what I feared. Your expectation is that TAML strings are merged together. This would required building an AST of the YAML contents (i.e. a parser not resolving YAML references but exposing them in the output), then merging the 2 ASTs together (which would require a dedicated merging tool as it would have to deal with the AST, not with PHP arrays), and the finishing the parsing of YAML by resolving references to get the actual content. such work is totally insane (and requires building a YAML parser slower than existing implementations as it would do the work in several passes).\nAnd at the same time, your YAML files would not be valid according to the spec (because YAML references are inside the document, not accross files).\nWhat you describe is not the behavior of YAML (YAML will mark something.yml as invalid)\n. @DaveMC08 It is not allowing native YAML feature, given that it relies on invalid YAML files.\nYAML does not have imports, so saying a proper import would make it valid is wrong. You are inventing new concepts, so this is not YAML anymore.\n. @everzet this looks like an issue in the turnip snippet generator though, because it means the generated step pattern cannot match the step triggering the generation\n. This is complex, because this means that services defined by the extension may need to be configured in different ways for each suite, while all suites can run one after the other in the same process. This would make it very hard to write extensions (we would have to introduce a suite scope in the container, and a way to change the service definition based on the suite => insane handling).\n. Thus, Gherkin is not a language defined by Behat, so we cannot extend it like this by ourselves anyway\n. hmm, if it is supported in cucumber, we probably need to support it as well. What do you think @everzet ?\n. @nicocans the FeatureContext class is PHP code. You can apply any PHP feature in them\n. Suite filters are meant to filter which scenarios are part of the suite. This makes it easier to filter scenarios instead of forcing to split suites in different folders.\nIf your scenario does not match the criteria of any suite, how should we run it ? We are only able to run suites in Behat.\n. This is configured in the behat.yml file, not by defining a constant (constants are not a flexible way to be configured, as you could not overwrite the config easily).\nyaml\ndefault:\n    calls:\n        error_reporting: 7 # value of E_ERROR | E_WARNING | E_PARSE\nBtw, Behat 3 has behat --config-reference to dump the config reference, which shows you all the available configuration.\n. you can use as many traits as you want in your contexts (and you can split your step definitions in as many contexts as you want)\n. --priority=reverse and --priority=random both look weird IMO. It is not really a priority\n. This sorting has a major drawback: it kills the lazy-iterations over specifications. The discovery of scenarios is not the only places using lazy iteration. The discovery of features uses it as well (we iterate over the filesystem and apply gherkin filters on a node to decide whether it should be part of the current suite).\nRegarding your use case, maybe you are interested in the --rerun option, which runs the scenarios which failed during the previous run\n. hmm, at which level would it be ?\n. but ScenarioTester receives the FeatureNode and the ScenarioNode as arguments, which are not in Testwork. This would require defining the concept of Testcase first\n. This will be closed once #656 is merged, right ?\n. @Vinceveve if you want to work on the cucumber json formatter, create a new PR for it\n. @everzet IMO, the best solution would be to rely on semver to define the version: if we merge new features, the next version will be a minor one. If there is only bugfixes, it is a patch one. this is what Twig does since 3 or 4 years now and it works well.\nThe only case where you need to maintain several branches in parallel is when you break BC (just bumping the major version), which should be done sparringly as it makes it harder for both users and maintainers.\n. @everzet what I mean is that as long as we are BC, we don't really need a strategy for minor releases. Release often, and choose the version number according to semver. Start maintaining parallel branches for different versions only when you break BC (i.e. for when moving to 4.0)\n. I don't think this is supported in the original Turnip syntax either. @everzet do you consider the original Turnip syntax as being a DSL reference (like for Gherkin), or is it fine to diverge from it ?\n. The syntax comes from https://github.com/jnicklas/turnip. But we may decide to support things which are not part of the syntax supported in this library given that we won't be able to use the full Turnip DSL (which involves the definition of steps and so on)\n. currently not. Alternatives are only possible for single words using /\n. Such custom step placeholders are related to the way this Turnip project hooks into RSpec. this is not possible in Behat (we just borrowed the turnip syntax because it is nice, but we cannot borrow the whole project with its Ruby-specific features).\nwht you want in Behat is probably the step argument transformation: http://docs.behat.org/en/v3.0/guides/2.definitions.html#step-argument-transformations\n. @everzet we don't do exactly the same. Turnip matches are affecting the way the Turnip placeholder is converted to a regex. the first example in the doc would generate the regex /^there are (?P<count>\\d+|no) monsters$/. Transformations are a second step only. So there are :count monsters would still match there are \"foobar\" monsters in Behat (but the transformation would not be applied after that, or would fail), which can result in ambiguous step definitions depending of what you want to do in your own steps.\nso while transformations are the way to achieve the feature here, they are not exactly the same\n. @everzet on Windows with ConEmu, black text and black backgound are the same black, not a gray, meaning the path does not appear\n. The profile defines the configuration used to build the DI container at the core of Behat. Running multiple profiles at once would require booting Behat several times independently (you can even have different extensions being enabled in each profile), and so there would still be 1 report per profile. I would just be a shortcur for behat -p prod && behat -p firefox && behat -p gprs. I don't see any way to have multiple profiles running in a combined report given what profiles are\n. but this would change the meaning of profiles entirely.\n. Well, for the different browsers, using suites is better than using profiles IMO\nActually, I think it might be possible to build composite profiles by merging several ones. After all, we are already doing it: the default profile is merged in other profiles automatically. I will try to experiment with it.\n. , means OR. You are saying (NOT @login) OR NOT(@logout) OR NOT(@news). your @news feature will be accepted by the other branches of the conditions.\nIf you don't want any of these tags, use && between tag rather than ,\n. Well, the way the precedence of && and , works is that ~@login&&~@logout&&@news is parsed as NOT(login) AND (NOT(logout) OR news). Do you have a @login tag on the feature you are trying to run ?\n. nope, this is not possible.\nHowever, another way to do would be to use show_auto and show_cmd from MinkExtension: https://github.com/Behat/MinkExtension/blob/master/doc/index.rst#additional-parameters and doing something with the HTML file you get\n. @gquemener making it a formatter means it would look very similar to a TAP output (it would just be a matter of putting the execution result on the left). So I think a better feature would be to implement a TAP formatter.\n. a suite level filter defines what is part of the suite. Only scenarios with these tags will be able to be run in this suite (if you don't have any other suite, other scenarios will never run).\nthe profile level filter is a way to restrict scenarios independantly of the suites (it will not replace the suite filters), and this filter can be overwritten by using the --tags option in the CLI\n. Suites filters are a different kind of filters, achieving a different use case. They are defining what is part of the suite.\nBtw, given suites are configured inside a profile, you can change the suite filters for a given profile too\n. I think you are confusing things. A Profile is a set of configuration which is loaded. Then, the filters can be configured in 2 different places inside the profile:\n- suite filters to define what goes inside the suite\n- gherkin loader filters (under the gherkin key in the config), which can be overwritten by the CLI option\nThe resulting filter is a combination of both (i.e. a scenario must match both the suite filtering and the loader filtering to be accepted).\nAnd when you have several profiles, any of these filter can be replaced in each profile.\n. PEAR-style is a subset of PSR-0, so the Behat3 autoload config supports it as well.\n. For Behat 3, the documentation is at http://docs.behat.org/en/v3.0/guides/6.profiles.html#custom-autoloading\n. $scope->getTestResult()->getException() gives you the exception. You cannot get the CLI output as it is generated by the formatter when displaying the exception, not in advance\n. This looks weird. The same context is used for the whole scenario. It is only reset between scenarios, not between steps. We even have scenarios enforcing this: https://github.com/Behat/Behat/blob/master/features/context.feature\n. you should not do that. Scenarios are meant to be isolated\n. Are you using Behat 2.5 or 3.0 ?\n. Well, Behat 2.5 did not have any concept of suites, so there were no suite settings. And suite settings are indeed not merged deeply\n. @jhedstrom this is the opposite. A file overwrites settings from imported files. this is why you should put the config in behat.yml.dist in the repo, and put behat.yml in the gitignore. This way, people can choose to create a behat.yml locally, import the dist file and overwrite what they want\n. You config asks Behat to use the FeatureContext class for your suite, but the class name is Site\\MainBundle\\Features\\Context\\FeatureContext in your snippet\n. MinkExtension supports using Zombie as well, with the same easy configuration than for others. Just make sure that zombie is installed globally, or that you configure the node_modules_path option of the driver\n. Well, the best place would be to add the driver-specific options in https://github.com/Behat/MinkExtension/blob/master/doc/index.rst#drivers\n. Please update the Gherkin constraint to ~4.4@dev (the next minor release including the change will be 4.4, and @dev will allow to make Travis build your PR until we make the Gherkin release)\n. You will need to whitelist dev versions of Gherkin in your project too if you don't have Behat as the root project (but Behat should be the root project when developing it)\n. @PurpleBooth I just updated the branch alias for the Gherkin master branch, which was outdated. So ~4.4@dev will match it now\n. @everzet I think this refactoring is great (I will now finish my review, which was only partial yesterday because I had to leave)\n. This new version looks really good. The last step is now to implement the BC layer\n. Fixed in https://github.com/Behat/Behat/commit/d8b73d1bd4925f926d8707c2d1e4ab5bd661c4b3 already\n. yeah, it will be in the next release. We considered that it was not critical and so it did not deserved creating a new release just for that while we have some pending work in review.\nanyway, I'm closing this issue\n. Install a stable Symfony version. Symfony Console 2.7.x-dev added the deprecation warning in a buggy way (making it triggered all the time), and it is not fixed yet\n. @timiTao given that PHP cannot enforce the return type for us, the only way to throw an exception for broken implementation would be to check validate the return type in all places using the object, which means considering that we don't have a contract. This would add lots of maintenance cost for this (and overhead). This is something approximately no project is doing when defining interfaces. \n. Well, an interface is precisely a contract. This is how you define contracts in code\n. I don't understand what you mean\n. @everzet should we do the same in the 2.5 branch ?\n. 100 is actually pretty low as nesting level\n. I known. This is why I'm saying it is pretty low for a limit. The main goal of this limit is to forbid infinite recursions to debug more easily. But any work with a hierarchical structure can reach 100 quickly.\nDerick himself recognized a while ago that the default value in XDebug might not be the best one IIRC.\n. This recursion limit is something provided by XDebug. PHP itself does not limit recursion.\nIf you run php -m, I'm quite sure that you will discover that XDebug is enabled in your setup.\n. The script is never at vendor/bin/behat. This location only contains a symlink or a proxy script (depending on whether symlinks are supported)\n. Generating a project fulfilling the specifiction seems out of the scope of Behat (and this is probably not possible as the feature definition is not enough to descrive how to do it, otherwise you would not need developers in your team anymore)\n. OK, setting an invalid locale in the LANG environment variable triggers a Fatal Error in HHVM itself, so I changed it to set the LANG variable as en\n. @chrisemerson we still support PHP 5.3 (which makes sense to that projects maintaining PHP 5.3 compat can still run their features on this version)\n. Just got 17 messages saying the same thing. No need to add more (this is becoming spammy).\nI will review this PR this evening (if my ISP agrees given that my internet connection was not working yesterday evening and this morning).\n. @WouterJ last step: fixing tests\n. :+1:\n. IMO, we don't need to selfupdate Composer each time. Using the version on Travis is fine IMO (we can at least trust the Travis team to avoid rolling it back to an older version). So you should add a comment saying to remove the self-update once they ship the version with --prefer-lowest (which will be the case the next time they update their images, i.e. in January, because they always download the latest Composer when building the image)\n. The failures seem related to changes in the way the Console component outputs colors\n. thanks\n. Can you rebase your branch to rerun tests as I fixed the tests of the 2.5 branch ?\n. @chillu ping\n. Which version of Behat are you using ?\nIf it is installed through composer, use composer show -i behat/behat to show the info about the installed version of the package\n. Behat 2.4 is more than 2 years old. This version is not maintained anymore and has indeed not been updated to avoid deprecations.\nUse either Behat 2.5 or 3 (both have been fixed)\n. Regarding composer vs php composer.phar, it is a matter of having composer available globally in your system, or downloading it in the project. I always use a global composer, which is why I give it this way\n. Behat does not do anything with libpng AFAIK. This seems related to what your are doing in your own contexts\n. @webit4me can you rebase your PR so that it does not include unrelated commits ?\n. you still have commits from @WouterJ which don't seem related to this PR\n. The step Then the response should contain json is not provided by Behat itself (Behat does not provide any steps itself). Please report it to the extension you use.\n. Well, if the method is in your own feature context, changing the way the matching is done is something related to your own code, not to Behat. Just write a step definition which checks only what you need\n. @webit4me not that your commit is not associated to your github account (not the same email address). You may want to alter your commit to use the proper email, or add it in your github account\n. You are missing HTML escaping in tons of places\n. There is a --rerun option to run only the scenarios which have failed during the previous run. Is it what you need ?\n. The drawback is that PHP is not installed on Appveyor workers. Having to install PHP on their machines might be cumbersome: http://www.appveyor.com/docs/installed-software \n. the BEHAT_PARAMS allows to provide a configuration, which will override the settings of the behat.yml (the merging rules are the same than for merging the default profile into other profiles)\n. note that a few scenarios are failing in the Behat 2.5 branch because of changes in the Symfony Console component about the way colors are handled. This is not related to this fix. But the new scenario added in the first commit is really failing without the fix.\n. OK, rebased as I fixed color tests in #699.\n. This looks like a BC break in PHP 5.6\n. what is the command you ran exactly ?\n. Closing as there was no feedback\n. @everzet any idea how to deal with this ?\n. @everzet this does not answer about how we should handle the maintenance of these stepdefs\n. @timiTao the 3.1 release will probably be done once #656 is completed (which will indeed be after behat.org is done)\n. @rajeshtaneja the only missing part in #656 is the BC layer for existing extensions. Note that this PR only affects extensions trying to extend the testers. Others won't be affected by changes done in 3.1\n. CLosing because this is indeed not a Behat issue. Behat itself is not slow (the WebDriver stack for Mink is because of how WebDriver works)\n. And going through the UI with WebDriver is even slower than using an headless driver for Mink (BrowserKit, Goutte or Zombie)\n. Which version of Behat are you using ?\n. Closing as duplicate of https://github.com/Behat/MinkExtension/issues/155 which is in a much better place as Behat itself has nothing to do with Mink\n. Symfony 2.0 to 2.2 are EOLed, so I think it is fine to bump the requirement to 2.3+ for symfony/translator.\nWhat do you think @everzet ?\n. @sminnee please update the symfony/translator constraint in the composer.json and remove these versions from the Travis config then\n. Well, this PR needs to be updated\n. @danieledangeli don't use 2.1 (which is not maintained anymore). Use 2.6 if you don't want the deprecation warnings (only symfony 2.7-dev is throwing deprecation warnings).\nand the proper fix for the issue is the one in this PR, except that it is not ready to be merged as it breaks the testsuite. The PR author has not updated the PR based on the feedback received\n. Closing as I merged #681\n. This issue tracker is about asking support for Behat, not for Packagist.\n. I don't like this concept of $batch. And your POC is broken: as soon as I specify a path, you consider it is the inner process, even though multiple scenarios are matched.\nAnyway, I'm not a fan of this. Behat should not force using subprocesses (especially not subprocesses running Behat again). And the way you implemented it makes it quite impossible to write formatters properly (try to combine your work with the JUnit formatter PR for instance).\nThe fact that Symfony does not release memory properly on shutdown is an issue which should be solved in Symfony, not in Behat: https://github.com/symfony/symfony/issues/13448\nAnd if you want to isolate scenarios, a better way would be to run the Symfony code inside a subprocess only (which is supported by the BrowserKit component, but MinkExtension does not allow to configure the client as insulated yet)\n. Btw, in the case of the Symfony2 driver type, MinkExtension currently gets the client configured in the Symfony2 kernel, so making it insulated would be a matter of manipulating the container of your project to add the needed method call.\n. @gonzalovilaseca if you run the Symfony request in a subprocess, your application will only be loaded in the subprocess\n. @gonzalovilaseca this won't do it on a per-scenario basis if you don't rset it at the end (it will impact all next steps too)\n. What is the command you used exactly ?\n. 100 is actually quite low as nesting limit as soon as hierarchical structures are involved. (this is one of the reason the default limit has been bumped in XDebug 2.3). I suggest using an higher value (I generally put it to 1000)\n. @ct-jensschulze some changes in Symfony have changed a bit the nesting level recently indeed, because of a bugfix. This means that in a typical Behat setup, the max nested calls went from just below 100 to a bit above 100.\nThis is in code outside our control anyway.\nAnd I don't think trying to force nested calls to stay below 100 is actually worth it (it would force to refactor the code to write it in a much complex way, likely to introduce bugs)\n. OK, closing this issue. the proper way is to use a more sensible nesting limit than 100 (the goal of this limit is to prevent infinite recursion anyway)\n. Well, if you want suites without tests to be considered as passing, don't run them in strict mode. The soft mode already allows such suites to be marked as passing\n. Are you sure that the background ran after the beforeScenario hook ? Looking at the output alone is not the right way to determine it, because the formatter can do what it want to display things (the JUnit formatter waits until the end of the suite to write the XML file for instance)\n. 100 is quite low as max nesting level, and this can indeed cause issues (it depends of how the object graph looks in the container, which is why it may stay below 100 on some versions btw)\n. @johnbillion actually, the default is 256 is the latest versions of XDebug (even though the doc has not been updated, which looks like a mistake).\nAnd this is not only about Behat internals but also about the Symfony ones (moving from 94 to 104 calls IIRC is related to a refactoring in Symfony to fix a bug). And when dealing with nested structures, 100 is actually not that high (I already reached it regularly in other cases dealing with hierarchical structures).\n. Well, if you still get it with a level set to 1000, you probably have an infinite loop somewhere.\nBut anyway, if it happens with app/console server:run, it has strictly nothing to do with Behat.\n. @ebrahimdunro do you have the same issue in case of a long file with uncommented scenarios ?. thanks\n. You should detect the existing value and do the update only if it would increase it. If the existing value is already bigger, it should not be reset to a lower value\n. thanks\n. actually, according to the output you pasted, it is on line 13, not on line 12:\nScenario: Authenticated user views with assigned department \"Vacation or day-off \nrequest\" page # features/application.feature:13\n(note that I hard-wrapped the output to make the snippet more readable)\n. This repo has nothing to do with Mink\n. This looks weird. I'm using Xdebug and Behat together and it works\n. Replacing the StepTester should be totally possible from an extension.\nI don't like this idea:\n- using the keyword to determine this is wrong. Behat accepts any step for any keyword (the different keywords are there to make your steps more readable, but Behat does not care at all)\n- limiting it to Then step is not the right behavior either. `When I click on the button\" may benefit from spinning in case it cannot find the button for instance\n- spinning any failing step automatically assumes that any failed step can be retried safely. I can think of cases where this will break your suite. The spinning should probably be done based on the type of exceptions being thrown (for things coming from Mink, it may be based onExpectationExceptionorElementNotFoundException` while not retrying other failures like failures to load the page for instance)\n. @iongion When PHPUnit is installed through Composer, the library is not added in the include_path. So to find the functions, you will need to give a path:\nphp\nrequire_once __DIR__.'/../../vendor/phpunit/phpunit/src/Framework/Assert/Functions.php';\nYou may need to adjust the path to the vendor folder depending of the location of your file of course\n. @iongion Behta 3 does not generate such comment anymore\n. The question is how it is possible to reach this code with an invalid position\n. Making suites inherit from a suite named default would be a BC break, and it would also make the code much more complex than today when merging configurations together (the merging of the default profile into other profiles is already buggy as it does not merges configs in the right order when multiple files are involved)\n. This is because of the config normalization replacing hyphens with underscores in the config keys. We should disable this normalization for keys of prototyped nodes (I hope we could make it the default behavior in Symfony 3.0 as this is the logical behavior but it is not the default on for legacy reasons).\nWith the current code, your suite is actually named my_test_suite\n. I'd rather fix this issue (it is a one-line addition in the code) than documenting it.\n. What is your use case exactly ?\n. Changing the config between features would not work anyway, even if you set the values from PHP rather than Yaml. Services are not reconfigured after the DI container is built.\n. thanks\n. The issue is that an exercise containing multiple suites will need to generate multiple files. the JUnit format does not allow to output the results of several suites in the same file in a meaningful way AFAIK (if I'm wrong, a PR improving the JUnit formatter is of course welcome).\nIf you are running features in parallel, the best option is probably to use a different folder each time\n. Using a config file is easier in case Behat is launched by a developer. The environment variable is mainly meant to be used on CI server where the common configuration way is though env variables.\n. Closing in favor of #681 and #749 which have been merged\n. thanks\n. the constant does not work in Behat 3. The error reporting is configured in the behat.yml file instead.\nRegarding the SecurityContext warning being triggered all the time, this is an issue in Symfony 2.7.0 (2.7.1 won't trigger it all the time anymore)\n. well, have you configured the context class name in your behat.yml to tell Behat to use them ? If you don't configure anything, Behat will try to use the FeatureContext class\n. We should check whether $level matches the binary flag returned by error_reporting() instead of checking whether the binary flag is 0.\n. unfortunately, I don't think there is a quick fix.\n@everzet any plan to finish #656 soon ?\n. Which config key are you talking about ?\n. Well, some extensions actually don't define any configuration setting. But when dumping the reference, they still appear in it because the root node of the extension is still added in the tree currently.\n. Well, there is nothing to configure inside arguments.\nWe should improve the way we build the configuration tree to avoid showing such useless nodes.\n. please add curly braces for the if\n. There is a Turnip syntax for optional words:\nphp\n/**\n * @Given some (thing)\n */\n. Can you show the version of the console component you are using with composer show symfony/console -i (or composer show symfony/symfony -i if the previous command tells you it is not found) ?\n. and are you using Behat 2.5 or 3 ?\n. 2.4 is several years old and it is unmaintained. Please use either 2.5 or 3.x\n. use composer show behat/behat -i to see the installed version of behat (or look in your composer.lock)\n. Btw, I'm closing this issue because it was already fixed in Behat 2.5\n. Can you make the same for all other prototyped nodes ?\n. @MartijnBraam can you show the scenario you wrote for the working case ?\n. Can you share the blackfire comparison between before and after the change ?\n. > It will not noticeably affect those users who have lots of suites, each with its own Context. However, if the user's tests are organised using traits and a single Context\nHow does it depend on the number of suites/contexts ? the TurnipPatternPolicy is shared between all suites/contexts AFAIK\n. well, this is expected. You are asking Behat to output in a STDOUT file, and it does what you are asking.\nthe way to output to the console output is to use std, null or false for the option value, not STDOUT\n. The JUnit formatter does not exist in 3.0. There is a pending PR to implement it for 3.1\n. your issue is that (values|contents) is also a capturing group. and mixing named and positional capturing groups will indeed lead to weird things sometimes.\nThe fix is to use a non-capturing group in your regex if you don't care whether the step says values or contents (and to use a named group for it if you care)\n. @lmrafael if you care about the value, you also need to add the $value argument.\nand if you split your steps into 2 definitions, it makes me think you don't care about which word was used, as you will not be able to know which of them was used to call your step definition.\n. @lmrafael if your implementation does not care about whether the sentence use value or content (i.e. the behavior does not change), simply use a non-capturing group\n. The TableNode has to be at the end of arguments though, even if you add more named arguments to account for named groups (the arguments of the regex are resolved to an array, and the TableNode is then added at the end)\n. @Taluu this is a bad idea. This bin/behat file is a vendor file (on any system supportign symlinks, it is just a symlink to the real Behat file).\n@OutOfBrain what are you doing in this bootstrap.php file ? We don't have a bootstrap file in Behat, but we might have ways to achieve the feature you need.\n. I think the right solution would be either to use a @BeforeSuite hook in your context (there is no @BeforeExercise because contexts are per suite, so it would still run for each suite) or to create a Behat extension doing the work for you (if the hook is not early enough for your needs)\n. no, you just have to define it in a context which is applied in all your suites\n. Well, having more details about why it is considered invalid would be good to fix this.\n. MinkExtension 2.x (for Behat 3) allows to create as many sessions as you want. you will have to define your own steps though. The builtin MinkContext is only able to use the default session.\n. > or from the StepNode in Gherkin.\nthis won't happen because it would force to make the Gherkin object graph cyclic again, which was precisely avoided in Gherkin 3+ because cyclic object graphs were preventing the refcount to release memory, forcing to use the garbage collector for that, which was increasing memory usage (the GC will delete them only later than what we can do now) and the CPU time (the GC has a performance impact when it enters into action).\n. @achange-in-grovo the fact that ignore rules specific to your dev environment should be ignored at the environment level rather than at the project level does not really belong to the readme either (otherwise most projects should be setting this in the readme)\n. thanks\n. we cannot do it on just a bit of the message, as we have no knowledge about how the message looks like\n. I will do it this weekend, unless @everzet can do it faster\n. @scaytrase I was busy with the SymfonyCon, and so not able to work on releases. This will happen in the next days (but I cannot give a date yet)\n. Well, what do you have in your beforeStep ?\n. Can you try bin/behat --suite=api src/Application/ApiBundle/Features/AdminAccessControl.feature ?\nI don't remember how the path name look like when using the symfony_bundle suite type, as I don't use it myself.\n. ah yeah, this was how I provided it in Behat 3.\n. Well, mbstring exists for PHP 7 too. It looks like you installed PHP 7 without the extension.\n. @ciaranmcnulty the right solution might be to make the Symfony polyfill provide ext-mbstring, so that it can fulfill such requirement, instead of forcing all Behat users to install it. This would make it opt-in.\n. @adamcameron 3.x is a full rewrite of Behat, so the configuration works differently\n. If you need to load fixtures before the step, you should not be doing it only before the first outline. This is wrong. Outlines are meant to be isolated (even though a bug in Behat means that they are not fully isolated)\n. This is indeed not supported in our Turnip syntax currently. Note that you can always achieve it by defining the step using a regex rather than turnip.\n@everzet is it supported in the original turnip system ?\n. Well, given that people are using Behat to test their libraries, dropping support for PHP means forbidding them to test their package on these versions too.\nSo I would not drop support just for the sake of dropping support. What is the actual benefit you will see here ?\n. speed improvements is already there, as you can already run PHP 7 in your projects. The fact that the min version is PHP 5.3 does not mean you cannot use PHP 7. And this will not be a benefit for Behat itself (it does not change the maintenance load to have it faster when using PHP 7).\nChanging the composer requirement means that people running a composer update on 5.3 will get old releases instead of the latest. So this is not a \"it may work\". It is a \"we don't let you try\"\n. And regarding traits, I cannot thing of places in the Behat codebase which would use them, even if the min requirement was 5.4 (I don't use traits much to be honest).\n. Well, what I mean is that Behat dropping support for older PHP versions means that any project tested through Behat also has to drop it (as they won't be able to test their project anymore unless they use an outdated version of Behat, which is not good either). And I don't think I can have stats on the versions used by projects using Behat.\n. See my comment on the issue for the actual implication of this change\n. Each stable release has the phar file attached to it in github releases: https://github.com/Behat/Behat/releases\n. yeah probably\n. you can use an extension to get this info (or maybe only a custom output formatter if the info is already available and just not displayed, I don't remember).\n. > why is ErrorException instantiated but not assigned for example?\nit is not instantiated. The ErrorException constructor is called because we want its behavior without having the behavior of the FatalErrorException constructor (which is in between in the class hierarchy)\n. @peterjmit it applies the logic of the ErrorException constructor (we would write it as parent::__construct if ErrorException was the direct parent in the class hierarchy)\n. Well, it depends whether Selenium itself supports these fields, which depend on the version of Selenium and of the instrumented browser.\nIn any case, this is not an issue in Behat (it may be reported against Mink, but my answer would be the same)\n. Technically, | also works (it is the older syntax). But I agree about switching to the newest syntax as it is the one documented by Composer.\nhowever, please change your commit message, as it does not describe at all what the commit is doing.\n. Well, Behat displays whatever you put in the exception message when you trigger an exception to make the scenario fail. If you want more details, write a more detailed exception message.\n. Well, having a single huge feature file will indeed use more memory than several small files, as Behat loads features one by one, but it has to load the whole feature. You should really split your scenarios into separate feature files. Having 45000 steps in the feature file looks insane.\nRegarding the comparison with Behat 2.5.5, I only see a set of numbers, not 2, so it does not allow us to see the difference. And please also try it on the stable 3.0.15 version. In my experience, Behat 3 uses less memory than Behat 2, not more. So it could either be an edge case due to the huge files, or a regression in 3.1\n. @rajeshtaneja please open a pull request with your fix\n. btw, a better fix might be to rely on ob_get_level()\n. or even just echo sprintf('Sceenshot saved to: %s', $filePath) as formatters will display what the step definitions or hooks are displaying.\n. Closing this as throwing exceptions for a working step just does not make sense. Exceptions indicate failures.\n. would be great to add a scenario covering this to prevent regressions\n. Well, suite-specific parameters are stored in the Suite object in Behat 3, which is available in the SuiteScope.\n. anything inside suites in your config file (inside the name of the current suite) will be stored in suite settings\n. @pamil what would be your syntax corresponding to the @Transform Email:secret case ?\n. @sroze the issue with your <classname>:<token> proposal is that it conflicts with the table transformations\n. This is not the only prefix used (we also have row and rowtable). And using this pattern for class names would mean that we can never use this pattern anymore in the future for other kinds of builtin transformations.\nAnd we cannot throw an exception, as this would prevent using the existing feature.\nSo IMO, we need to find a future-proof notations for such transformations.\n. Anyway, closing this as it is not an issue in Behat. Your questions are related to Mink.\n. Closing this because it is not an issue with Behat. Behat does not care about what you are doing inside your steps.\nAs explained in the mink issue, the problem you have is probably a misunderstanding of the flow about when a browser is involved or no.\n. @rudiedirkx having a getCallResult when no call was made would be weird. And this would not save you the if but only change the condition from instanceof to null !== ...\n. I suggest doing this simple change:\nyaml\nbefore_install:\n    # Remove xdebug as per https://getcomposer.org/doc/articles/troubleshooting.md#xdebug-impact-on-composer\n    - if [\"$TRAVIS_PHP_VERSION\" = 'hhvm']; then phpenv config-rm xdebug.ini; fi\n. The issue seems to be with one of your step definition, not with your feature file.\nPlease run Behat in verbose mode (with -v), to get a stack trace for the error, and then paste it here\n. @djdevin you can write a Behat extension which would register a loader reading features from elsewhere than the local filesystem. This is what the (now unmaintained) Github extension was implementing for Behat 2.4. You could have an extension reading features directly from Testrail\n. This won't work, as you glob it based on the current working directory, while the path is expected to be related to the base path (which may be a different working directory).\nand this cannot be accepted without a scenario covering the feature (we actually need multiple scenarios to cover the different cases btw).\nand this is also broken in case glob does not find anything and returns false.\n. > glob returns an empty array if found nothing\nit cannot also return false in some cases: http://php.net/glob#refsect1-function.glob-returnvalues\n. I will review your code as soon as I have time. Creating such a tool for Behat was on my TODO list since a long time, but I never started it.\n. which is exactly why I plan to review it :smile: \n. Behat 3 still has these constants, but they are not in scope classes. They are in the TestResult extension: https://github.com/Behat/Behat/blob/v3.1.0/src/Behat/Testwork/Tester/Result/TestResult.php#L20\nBe careful that $event->getTestResult() will not return an integer but an object (implementing the TestResult interface)\n. We should link to a tag rather than to the master branch to avoid such issues\n. thanks\n. the issue is that you are loading the local composer autoloading when running behat, and this is the same file than the one used when building the phar, so the random string added in the function name is the same in the phar and in your local project.\nIf you run composer dump-autoload again in your local behat project, it will use a different random string, which will not conflict with the phar.\nThe issue happens only because you use the phar to run behat on the source code used to generate the phar itself.\n. hmm, we should remove the behat.bat script, which was written for PEAR (which is not supported anymore).\nHave you tried going into vendor/bin instead of vendor/behat/behat/bin/, where composer should be generated its own behat.bat file working properly ?\n. thanks\n. AFAIK, we don't have an infinite loop. But the parser uses recursion heavily, which means it can reach a deep nesting in case of big files.\nAnyway, please provide the gherkin file triggering this error. We cannot do anything to solve the error if we can't reproduce it.\n. I have no idea what Allure is\n. You should implement the Formatter interface rather than just EventSubscriberInterface, so that people can configure the allure formatter like other formatters (this will also require you to implement the FormatterFactory and make your extension to register it inside the output extension in its init method)\n. the job of a formatter is precisely to create a file. In your case, the behat allure formatter will output the XML file needed for allure to generate its full shiny report\n. What is the code of $this->setResponse() ?\n. because we don't have a context instance at this point, as each scenario gets a separate context instance.\n. @phil-davis this is a valid way to do it IMO (well, unless one of your read-only scenario is not actually read-only). > When you attempt to execute this, you'll get exception like this:\n\n...> Method fromString does not exist\nThere are now two possible routes out of this situation...\n\nI think that this message is not clear at all. I think it would be better if the transformation was checking the existence of fromString to decide whether it supports the argument or no, which would result in the argument not being transformed if it cannot.\nThus, it would remove the requirement to keep this transformer in last position forever (the current implementation requires it because if partial support check)\n. Well, why are you trying to configure paths at the beginning of your config ? There is no such config in Behat 3\n. :+1: for this revamping\n. Using the returned value to pass it to the next step is indeed a very bad idea, as it means your second step can never be used elsewhere than just before the first one (adding another step between them would break everything).\nUse a property in your context. This is one of the goal of the context (and the reason of its name)\n. I'm with @jakzal @ciaranmcnulty and @everzet here (which means that maintainers involved here all agree btw)\n. This is breaking everything. Previously, when the suite name was not provided, all suites were registered. Now, you register none of them\n. this has nothing to do with Behat itself, as it does not deal with Goutte or Guzzle in any way (and so has no idea where they are configured)\n. Yeah, but as I don't know which project relying on Guzzle you are using, I cannot help you\n. Radio inputs are covered by selectOption, as they are about selecting a choice in a radio group.\nBtw, <input type=\"radio\"> is never considered as a button in HTML, which is why our button APIs don't deal with them.. Contexts are defined per suite, so this would force to have a different suite for each feature file. I think this is because you have xdebug enabled with xdebug.overload_var_dump = 2 in your php.ini, which adds the location before the dump output.\nIIRC, Xdebug switched the default value of this ini setting from 1 (overload with the colored output but a compatible format) to 2 in a recent version. I never tried this. But if you use Symfony 3.2+, it may work as we use the Symfony DIC. Have you tried it ?\nNote that it will not work everywhere, as some settings are necessary when building the container, and Symfony resolves env variables later than that (on purpose).. The issue is that Behat really allows anything in suite parameters. So we have no way to provide a strict configuration there.\nWe could build a system validating them strictly (and then allowing to merge deeper), but it would require some BC-breaking changes. Extensions would have to register explicitly the suite settings they support, and any other key would become forbidden (or silently dropped from the configuration, which is even worse IMO).. hmm, actually, due to the fact that most people use a shortcut notation for settings, we may find a BC way to handle it for them (not easy for people using the settings key explicitly). It would require some work though. which catch are you talking about ?. Please add a test covering this. Well, is there a bug or no ?. OK then. + is the equivalent of array_replace, not array_merge. array_merge re-indexes the numeric keys, which looks wrong to me here. Can you add a scenario covering this ?\nIf it requires PHP 7.1+ nullable typehints, tag it as @php7.1 (btw, this made me saw that our CI setup dealing with these tags is broken for PHP 7+. It was not ready for changing the PHP major version). Well, if the bug can be triggered on all PHP versions, then writing a scenario covering it is even easier. I'd rather deprecate the behat autoloading config entirely, in favor of the autoload-dev feature of composer (which did not exist at the time it was added in Behat). We have the Composer ClassLoader class inside the phar, as Behat itself uses composer.. Btw, using it should be a no-brainer, as the API of Symfony\\Component\\ClassLoader\\ClassLoader is similar to the one of Composer\\Autoload\\ClassLoader. and probably even in phar versions when we can load the project-level composer autoloading file (we should warn users about using the composer autoload-dev for such cases even in 3.x). @Taluu instantiate a new Composer ClassLoader when autoloading is configured in Behat (we should not try to alter the configuration of the instance generated by Composer, as it would kill the performance optimizations done in the generated autoloader).\nAnd we should display a warning if it is configured without using the phar. > I am not sure how to test this, but maybe registering the built-in extensions in the puli json file, and then remove the extensions parameter from the constructor could lead to something ? And then test that a built-in extension loads itself correctly ?\nTest this by writing a Behat scenario doing it with a custom extension.. @Taluu dev requirements are things needed to run our tests. They have no impact on our users. So we can put what we need in them.\nForcing contributors to install puli separately to be able to run tests would make things harder for them, for no benefit. @everzet but would it work for the circleCI features ?\nBtw, this would be a nightmare to implement, because you can have spaces inside path, so we would have to provide our own escaping inside this string. And requiring to escape spaces in the path to avoid considering the argument as a path list is a BC break for callers of Behat (and makes it much harder to use Behat by default), which is worse than breaking extensions IMO (especially given that extensions should generally not mess with arguments implemented by another one IMO). thus, if an extension relies on the argument directly, changing the content of the string from a path to a space-delimited list of escaped path would also break BC for the extension, as it would have to change the way it uses the string.. Some scenario must be written to cover this case.\nAnd the order of precedence must be defined clearly.. This still need scenarios covering this new feature. I don't think we should consider it as deprecated IMO. yml is also very common for YAML files. I'm quite sure we don't need to wait until Behat 4, if we keep implement the container-interop interface on our own container for BC reasons.\nWe can change the check for the expected ContainerInterface to expect a PSR one. This would not be a BC break, as container-interop now extends PSR-11 (we would have to bump the min version to 1.2 of course).\nRemoving container-interop entirely may be harder regarding BC indeed, in case someone expects the Behat container itself being an interop one. But this is not necessary for the first step of PSR-11 support.. Here is what we need to end up with:\n\nwe need to require interop 1.2+ rather than 1.1+ (to have the version using PSR)\nany place consuming a container should accept the PSR interface\nany place defining container-related things (the container itself and the exceptions) should use the interop class (which extends PSR) to keep backward compatibility. Using the container to load instantiators for extensions looks weird to me, as extensions are precisely responsible for building the container, so the container is not usable at the time extensions are instantiated. about getting the source for a class and method, can't you use the features of the IDE ? It probably already have a way to navigate to a given method if it supports PHP.. I suggest adding the file path only when running the command in verbose mode, so that we don't bother users running this command with this extra file path while you need it only for VSCode. You would just have to turn on the verbose mode when running the command in your extension.\nAnd yes, please open a PR. It is easier to discuss the implementation that way.. Your code is missing lots of features from Behat (scenario execution is not properly isolated for instance, and test result is ignored).\nI strongly suggest you to avoid executed scenarios like this, as you would have to reimplement most features of Behat (as you use only of the the very low level feature).\n\nIMO, it would be much better to write a Behat extension registering a custom loader for scenarios (looking into your DB) and then using Behat itself to run it. It would avoid reimplementing Behat itself. if you use selenium, the page processing will not happen in the same process than the Behat code (as selenium will hit your webserver). So it won't be doing its DB calls inside the transaction you start in the Behat process.. Well, for tests using seleniums, the approach you need is the one you gave just above (resetting the DB for real). This issue has nothing to do with Behat itself, but with MinkExtension. So it should have been opened on https://github.com/Behat/MinkExtension. But I will answer anyway.\nthere is 2 different things here which could match your question:\n\nhaving multiple sessions but using available drivers (so having multiple sessions using the selenium2 driver for instance). This is supported in MinkExtension 2+ (so when using Behat 3) by using the full configuration format instead of the shortcut one:\n  yaml\n  default:\n    extensions:\n      Behat\\MinkExtension:\n        default_session: first_session\n        sessions:\n          first_session:\n            selenium2: ~\n          second_session:\n            selenium2: ~\n\nregistering custom drivers. This requires writing a Behat extension providing the necessary integration. This is how the Symfony2Extension can register a symfony2 driver for MinkExtension (note that once the driver is registered, it can be used both using the shortcut or the full format).. I don't understand what you mean. Can you give more details ?. I'm -1 for having the locator altering the state of the Gherkin object. This is likely to create weird edge cases. The right path should be set when instantiating the Gherkin object instead.. #1056 is doing exactly what I was asking there. I forgot about it when reviewing this PR yesterday. I'm quite sure this PR is unnecessary now.. I don't understand what you mean. @everzet if we decide to drop 5.3 support, we need to update the composer.json to tell composer about it. I see only 2 ways to fix this:\n\n\nmake a new 3.4.x release which is actually compatible with PHP 5.3, so that the highest version selected by Composer actually works (and then drop support properly in a later version of Behat)\n\nrewrite the history to change the composer.json of the 3.4.0 and 3.4.1 releases (just deleting the tags won't help, as it is very easy to re-add them by mistake in the future due to the way Git works; tags are not meant to be deleted after they got shared; and rewriting tags is also painful).\n\nAnd btw, this is a good example of why keeping composer support for a PHP version when we don't have CI for it anymore is a bad idea. Compatibility will get broken without seeing it, and then we would be lying to Composer (and so hurting our users). Dropping compat properly actually has less impact on users.. I agree that rewriting history is a bad idea.. I don't think the Gherkin language supports that (it supports tags per example for scenario outline, which we are missing, but I think this is the only place where we miss support for tags). The environment returned by the getter in BeforeScenarioScope is an initialized one, as this hook runs after the isolation is performed.. This is really weird, because there should be no relations at all between the Symfony annotation cache and the Behat JUnit formatter.\nCan you share the actual backfire profiles rather than some screenshots, to let us explore them more ?. @philtweir your change looks legitimate. Please open a PR for it.. the background would run for all scenarios anyway, so how to you plan to avoid re-executing it ?. Could we have a Behat scenario covering this case to prevent regressions ?. Well, write a scenario in https://github.com/Behat/Behat/tree/master/features reproducing the case triggering an Error at a point where your patch is needed to get the proper exit code.\nI even suggest you to try running your scenario without the patch as well, to see it failing (otherwise it means that either your patch is useless or your scenario does not cover it).. Well, maybe it was fixed in the Symfony Console component in the meantime. I don't remember which changes we made in the component in this timeframe, but I know that some work on this topic was done at some point.. @jakzal when working on the fix on the Symfony side, please make sure to add a test covering this case though, so that a similar BC break is catched by the testsuite in the future.. putting the regex in unicode mode would means that any non-unicode input would not be supported anymore as it will make the regex fail. Are we sure that we won't break existing projects ?. or running composer with PHP 5.6 as well.. if you don't declare the context classes to use in the config file, Behat won't know which one to use. If you don't configure things, Behat defaults to using the FeatureContext class.\nAutoloading is about letting PHP find the source file when asking for a class. It is not about autodiscovering context classes in Behat.. Well, calling ->getUrl() before visiting a page is an unsupported usage of the Mink API. and accessing the webdriver session before starting the session won't work (as it won't exist yet). Note that I don't think SuiteWithContextsSetup works fine when using composer's autoload-dev instead of the Behat autoloading config (but that's a separate issue). This is a dev requirement, not a normal requirement. This relates to the tooling used by Behat.. Yeah, this is either fixed by upgrading to the dev version of Behat (which does not have this requirement anymore) or to the dev version of symfony/flex (which does not have the root cause of this bug anymore). that's not related to Behat, that's related to your existing dependencies (doctrine/annotations is marked as locked in the output, which means it is already part of your project).\nIt looks like your existing lock file was generated with a newer PHP version, and so your local set of dependencies is not compatible with PHP 5.5.38. Try running composer install instead. I'm quite sure it will fail in the same way.\ncomposer require performs a partial update, which means that the solver is not allowed to upgrade or downgrade any of your existing packages, and so it cannot downgrade doctrine/annotations.. I'm closing this issue, as it has nothing to do with Behat (try with any other package name in your broken project, and they will also fail...). Behat itself is just a runner here. It is not managing your CI environment to run builds. That's a feature for your CI environment, not for Behat.\nFor instance, Travis supports defining a cron to automatically run a job every day, week or month.\nI'm closing this issue, as it is not something in the scope of Behat.. Well, if you register the 2 context classes in the same suite, you cannot have the definition of the same step in both classes (be it through inheritance from a parent class or from explicit declaration in the class), as that would be ambiguous (Behat would not know which context it should use when calling the method).\nif your 2 contexts are used in different suites, both are fine. Behat does not care where the methods are defined. It cares about having only one definition for each step among registered contexts. . Well, the Behat testsuite is different. It is not about running a scenario in a different process, but about having a scenario running Behat (because the scenario actually describes the usage of Behat).\nThe answer here is no. There is no option to isolate scenarios in separate processes.. Well, I think you are missing the call checking the expectation on the mock object in your case (something you don't see when using mocks inside PHPUnit because PHPUnit does it for you already).\nThe exception would happen inside $mockObject->__phpunit_verify() and you don't call it (see the private TestCase::verifyMockObjects method to see the implementation in PHPUnit). Hardcoding such Symfony-specific thing in the Behat runner is not the good way to handle that.\nand anyway, loading the .env files does not need to be done before loading the composer autoloader (and loading vendor/autoload.php can be done as many times as you want without any issue).\nSo -1 for that change.\nSupport for the Symfony Flex .bootstrap.php file is something to be handled by the Symfony extension.. there is an encoding issue here.\n. this should not be done with a JS hover but with some CSS (eventually added through JS if it should not apply to the case where JS is disabled)\n. css\n.feature h2:hover, .scenario h3:hover {\n        cursor: pointer\n}\nand if you want to do this only when JS is enabled, a solution could be to add a class on the root when JS is enabled and use it in the CSS (to keep the styling and the JS separated)\n. type=\"text/javascript\" is not required anymore in HTML5 (and even IE6 supports omitting it).\nRegarding the place to put it, I would keep it at the end of the body, but move jQuery there as well (which has a bigger impact that this inline script)\n. do you really need such complex selector to target these spans ?\n. This file is auto-generated from the i18n file downloaded from cucumber so adding stuff in it is wrong.\n. this should probably use the class constant to avoid issues if the values are changed\n. do you really want to mark unstable steps as failure in strict mode ?\n. missing empty line\n. the setter should be after the constructor (with other setters)\n. shouldn't this be incremented each time you try (so each time you enter the loop) ?\n. the readme has probably been written before the switch to using the cucumber file :) @everzet can you confirm ? or maybe it is only gherkin than reuses translations ?\n. please fix the CS here. It should be on the same line that the closing curly brace\n. this should be a separate scenario.  You should not have a Given section after the Then\n. indeed, sorry (even if it is true for Given too)\n. you are either using 2 spaces or a tab (I cannot know from here as github displays tabs with 2 spaces in the PR diff), whether it should be 4 spaces\n. Please add a use statement for the class. And the typehint should be the LoaderInterface IMO, not a specific implementation\n. Please don't add trailing whitespace. Empty lines hsould remain really empty\n. This is wrong. This will read the composer.json of Behat (which does not rename the vendor dir), not the one of the project\n. this case is the one where Behat is installed as the main package, where we know that the vendor dir is not renamed\n. no. __DIR__ will be vendor/behat/behat/bin as it is where this file is. What you have in bin/behat is only a symlink or a proxy file, not this file.\n. actually, the fix is easy: instead of moving back to the project and then inside the vendor dir (thus assuming its name), this line should use __DIR__.'/../../..' as we know that this file will be placed in $vendor . '/behat/behat/bin/\n. This has nothing to do with Behat. It is the way Composer install things. And look again. What you have in bin is a symlink to this file, not the file itself\n. Please revert this change. You should not remove these translations\n. Please add the license header in all the files you added (copy-paste it from another file of the library)\n. missing type for the params (should be stirng in both cases)\n. Please add a use statement for the interface\n. Pease revert this indentation change\n. This is useless. You can do an instanceof on non-existent classes as it does not trigger the autoloading (a PHP object knows all the classes it inherits from and instanceof simply uses this list)\n. I would remove this comment.\n. this curly brace should be on the previous line\n. Please follow the PSR-2 coding standards (the main issue here being the indentation done with a mix of tabs and spaces)\n. This logic is wrong. Ids have to be unique on the page. but feature names and scenario names are not unique\n. Btw, you have a good example of the uniqueness issue here as this id is a duplicate...\n. instead of a get_class and the class name as string, you should use instanceof:\nphp\nswitch(true) {\n    case ($node instance ScenarioNode):\n        // do something\n}\n. The curly brace should be on its own line\n. This line is useless as you already redefine the variable\n. Please use single quotes\n. typo interuption\n. is the definition really serializable ?\n. This does not follow the XSD for skipped elements. It does not have a type, and it should look like <skipped>{{ message }}</skipped>\n. because there is no develop branch anymore (the commit message explains it) so keeping it would only confuse contributors (or create an issue if the develop branch is recreated later with an old branch alias in it)\n. This looks specific to Behat. But this code lives in Testwork\n. London is changing you. You switched from en_US to en_GB for your class naming :smile: \n. I see an issue here: the new call will be handled only by the remaining handlers. The previous handlers don't have a chance to tell they support the new call.\n. what if it returns something else ? should it throw an exception about invalid handler return value or just expect handlers to be implemented properly ?\n. the PHP type is callable, not callback (both were used in old documentation, but the code uses callable)\n. I think extending InvalidArgumentException is better than RuntimeException given the way this exception is used\n. according to the implementation of the CallCentre, it can also return a Call\n. ReflectionFunctionAbstract would cover it, no ?\n. Symfony 2.3+ supports several levels of verbosity. Should we keep it ?\nThus, will it only be used to make exceptions more verbose ? I think testing tools make want to allow formatters to take the verbosity into account for anything.\n. I suggest keeping the --no-interaction coming from the Console component (it is important to allow disabling the interaction on a CI server)\n. should we really overwrite the terminal width ? This looks weird to me\n. this is not consistent with the code, which returns 0 in this case\n. I suggest normalizing the basePath to be sure it uses DIRECTORY_SEPARATOR as separator, otherwise the string replacements could fail (I haven't tried running it on Windows yet though)\n. It's OK for me. But it could lead to some confusing code as most open-source libraries are using en_US out there\n. what about switching back to the Symfony pattern ? The output formatter was improved a lot in Symfony 2.1, so using <> for tags may be working properly now that Symfony 2.0 is not a concern anymore.\nIt could be done in a separate PR though.\n. you should describe what the return value is. I know it is the source code itself (because I checked the provided implementation), but some people might wonder whether it can be a path to a file containing the code.\n. please make it use LF here instead of PHP_EOL, as the other lines of the template are using LF line endings.\n. why marking it as final ? It will hurt you if you start writing specs for Behat as you won't be able to mock this class (and this method is not part of the interface)\n. null is already covered by mixed\n. this line is not needed. It is already assigned on line 78\n. The right type would be Callee[][]\n. The suiteName is already part of the parent class. So it should be removed from here (as well as the getter), and the parent constructor should be called\n. the parent should be InvalidArgumentException\n. the parent should be InvalidArgumentException\n. the parent should be InvalidArgumentException\n. should the constructor arguments really be the same for all classes ?\n. is it really needed to make it static ? Do we need this global state ?\n. This method and its 2 private helpers are quite the same in the Regex and the Turnip generators. Is it possible to share the logic instead of copy-pasting it ?\n. but nothing ensure that steps don't use {} in their content. The clean way would be to use OutputFormatter::escape() (compatible only with the < syntax)\n. isn't it possible to rely on the Symfony pluralization rules for this instead of hardcoding the ranges ?\n. this can be simplified using isAnInstanceMethod()\n. getSuite can return null. This should be taken into account\n. Suite|null\n. php\n$skip = $skip || $beforeHooks->hasExceptions()\n. this condition and the array initialization in it can be removed. $groupedSubjects[$collection->getSuite()->getName()][] = $collection; will create the nested array without notice if it does not exist yet (reading is a notice, not writing)\n. shouldn't this variable be named subject rather than collection ?\n. hmm, actually, what is confusing that that a single object Subjects already has a plural name. This make the naming confusing when representing a list of Subjects (which is called subjects here).\nIs it possible to rename this interface to use a singular name for the iterator ?\n. thus the code reads exactly as it intended: we skip the next part if we are already skipping or if the hook failed\n. small issue, but this looks wrong\n. is it intended to change the type ?\n. null and array are not the only possible types for a variable. This class does not control the code initializing the Suite, so it should avoid false assumption about preconditions IMO\n. no need to use a closure. pass 'strnatcasecmp' as callable\n. you should pass the CURRENT_AS_PATHNAME flag, which will avoid the need for the array_map('strval', ...) call (and for the instantiation of all the SplFileInfo objects).\n. shouldn't it be anchored at the end as well ?\n. I think the current code could match any file in a folder named something.feature\n. hmm, indeed. I think it should be reported as a PHP bug though, as it means that new RecursiveDirectoryIterator('/tmp', RecursiveDirectoryIterator::CURRENT_AS_PATHNAME) is a broken implementation of RecursiveIterator\n. done: https://bugs.php.net/bug.php?id=66405\n. I would actually create a different step to verify that the output is empty\n. it is always a string because of the implementation of getExpectedOutput\n. undefined property outlineName\n. why replacing the path separators ?\n. you need to rebase your code. It is getFeature no\n. I would set the atribute using the SimpleXmlElement API, so that it handles escaping the needed chars.\n. you should set the status based on $event->getResultCode() instead\n. this does not make sense. You should keep using an absolute path to access the filesystem\n. please use / rather than DIRECTORY_SEPARATOR here as string comparisons are not needed\n. actually, this comment should be on the next line.\nYour code assume that the working directory is the base path, but it is not always true (there is a --config option to launch behat from a separate directory)\n. this is a SimpleXmlElement\n. you can, by using the existing steps. The existing features also have some paths in the output, and they are passing on Windows properly (I spent a few hours on January 1st to ensure it as I'm also on Windows).\nYou may need to adapt a bit the getExpectedOutput method to replace the \\ in a few more places, but the report should use the path of the OS used to generate it IMO, like for other formatters\n. shouldn't you also add \" to the chars forbidden in the path, to avoid matching too long ?\n. I would rewrite the feature description to describe better why we have this formatter. I don't expect anyone to use a JUnit report when their goal is to debug their feature.\ngherkin\nFeature: JUnit Formatter\n  In order to integrate with Jenkins\n  As a feature runner # Not sure about the role name actually\n  I need to be able to generate a JUnit-compatible report\n. the scenario title should describe the scenario. I does not describe anything currently\n. Please remove the unused use statements to keep the scenario shorter\n. Given I must have 10 is not setting an initial state but it is performing a verification. This is not a Given step, but a Then step (which means it should not appear there)\n. there is no reason that a step producing some output is also a failed step\n. using the outline title as key is wrong, as it is not unique at all.\nA proper implementation would use an exampleIndex property in the formatter, which get reset when starting an outline and incremented for each example\n. the permissions should be 0777, not 0. Otherwise nobody can access this folder\n. you need to normalize suite name. It can be any string, and special chars in file names are generally a bad idea (of course, if the suite is named user, the normalization should still produce user.xml)\n. I think resolveArguments should always be called. You could have an ArgumentResolver inspecting the context constructor via Reflection to inject some arguments\n. This could be improved. You know that for each context, the prototype must be an array node (as it contains an array of arguments). The variable node only need to be inside it.\nThis would impact the way configurations are merged though\n. Please don't short-circuit resolvers here. See https://github.com/Behat/Behat/pull/419#discussion_r8755368\n. This would bit us if we switch back to master one day (when facing the same issue than wit Gherkin as soon as 3.0 is released, btw). I would rather use a blacklist (if the blacklist is not specific enough, it will simply trigger extra build that we don't care about, it would not let code get through untested)\n. should be $class for consistency with the renamed done in #423 (it either need to be fixed here, or when rebasing the other PR after that)\n. Will this line work properly if a BeforeStep hook throws an exception ?\n. what I mean is, will getCallResult return a CallResult in case the step itself is not called because of an exception in the before hook ?\n. missing typehint\n. I would use and rather than&& here to use the proper operator: you are interested in the control flow operator, not in the boolean operator\n. missing typehint\n. and why not using constructor injection ?\n. what if the code uses CRLF newlines (i.e. Windows-style line endings) ?\n. wouldn't it be faster to call the static method directly through $class::getAcceptedSnippetType() ? Such code works as of PHP 5.3: http://3v4l.org/huloT\nThis would avoid using Reflection altogether (checking the interface does not require Reflection, as done in the previous method).\n. you should use single quotes, which will remove the need for escaping the $ char\n. what about changing the way the detection of the regex is done, to allow using regex modifiers as well (in case you want it to be case insensitive for instance) ? Would it make sense ?\n. should we validate that the pattern is a valid regex to throw an exception to the user in such case rather than having him try to understand why the regex does not match ? See http://3v4l.org/YThvg for a validation of the pattern being a valid regex\n. is there anything preventing to use preg_quote for this ?\n. are these priorities really necessary when they are the same anyway ?\n. hmm, right\n. shouldn't it be removed ?\n. shouldn't this call tearDown instead ?\n. shouldn't this be tearDown ?\n. should be tearDown\n. You should keep the short class name\n. You should keep the short class name\n. do we need a separate interface for this ? The different output is a matter of interface implementation\n. should be the short name\n. do we need a separate interface for it ?\n. you have an extra space in the shortcut ternary operator\n. All this logic is repeated. It should be a new helper method in the processor\n. This looks weird. It means that the EventDispatcherExtension is now dependant on the TesterExtension, making it less reusable.\nIMO, we need 2 extensions here:\n- EventDispatcherExtension providing the support of register listeners in a dispatcher\n- another extension registering the tester wrappers\n. should be null === here.\nand shouldn't this include self::AFTER_ALL_EVENTS as well ?\n. Instead of duplicating the logic of the Application class, you should simply use $output->getVerbosity()\n. Do we really want a stateful listener which is never reset ? This looks weird to me\n. I would avoid the plural class name. This is often a pain later when naming things, as an instance of this class is still a single object (being a listener itself).\nMaybe ChainEventListener or something like that\n. why casting the boolean as integer while the method is expected to return a boolean ?\n. I don't understand what you mean here. You are still overwriting the default for all these cases. The only condition needed to have the same logic is to do a check on $output->getVerbosity() > OutputInterface::VERBOSITY_VERBOSE before setting the default verbosity. There is no need to duplicate the Application logic configuring the verbosity\n. well, Delegating feels like a decorator pattern. This listener is used to chain/group several listeners. Chain is used in Doctrine (for the logger and the mapping driver), Group is used in Monolog (the GroupHandler). I don't remember what Symfony uses for such cases\n. This method is an exact copy-paste of PrettyStepPrinter::printStep minus the last line. Wouldn't it be possible to avoid the duplication ?\n. is it intended to remove the reference to the scenario from the display of failed steps ? IMO it was useful (for instance to rerun only this scenario by knowing the line needed to filter it). An improvement could be to add the scenario title rather than removing the path\n. is it intended to expand the background steps here now ?\n. why is there no path anymore ? It is inconsistent\n. This change looks wrong to me. If there is an exception in a hook, it does not look like a reason to skip the scenario. It is a failure. There is a big difference here as skipping makes the testsuite pass while failing a scenario makes the testsuite fail (actually, it is worse: the exercise is failing without failing scenarios, which is confusing as 2 passed, 2 skipped can also be a summary of a passing run)\n. this name with 2 verbs in it looks really weird (same for next methods)\n. the naming is weird as it also deals with exception, not only with output\n. hmm sorry, output and stdOut are different concepts here (it may be confusing though)\n. shouldn't we provide an interface (and typehint against it) when making classes final ?\nBtw, if we were using specs for Behat, this final keyword would beat us here, as it would prevent doubling the converter in specs of classes using it as a collaborator\n. I think this one is generic enough to be in Testwork rather than Behat. What do you think ?\n. this could be return $this->callResult->getException(); directly, as the method already returns null when it does not have an exception\n. should this actually be part of the TestResult ? considering a pending step as passing or failing actually depends on the interpretation, so it looks to me it is not the responsibility of the StepResult to decide it\n. are you planning to do this in the current PR or to keep it for the subsequent cleanup ?\n. you haven't fixed this issue\n. shoudln't this be implemented as an ExceptionStringer with low priority ?\n. you should add a beforeNormalization turning the constant names into the integer values, to allow having a readable Yaml config\n. the name should be scopeNames as it is an array of names now (same for the constructor argument)\n. should be string[] (and it should be typehinted as array)\n. string[]\n. should be renamed to a plural\n. actually, the phpdoc should be changed to {@inheritDoc}\n. according to the interface, $hook->getScopeName() returns an array, so this should be an in_array check\n. there is no such service in the extension\n. missing type\n. couldn't we use $eventName = null instead (having the = null to handle older Symfony version) ? I would find it cleaner than relying on func_get_arg for the future-proof branch of the code\n. I would move the array_merge on the same line that the return keyword\n. why removing the indentation of the tree ? I find the indented tree much more readable as it allows seeing easily which calls are related to the same node\n. The logic is similar but not duplicated:\n- the method signatures are different each time\n- the event class being used is different each time as well\n. well, then the phpdoc in RuntimeHook is wrong on the property\n. Well, this means that all TestResult implementations have to provide the same data twice actually. Given that the alternative is to duplicate the $code === PASSED in many places, I think the current way is fine. But the phpdoc of the method should be improved\n. this needs to be updated as array[] as well\n. tis means >=1.0.1,<1.1.-dev. why forbidding to use the 1.1+ versions in this constraint ? My goal is to follow semver for this package, so a BC breaking change would make it 2.0\n. you should not define the same service 3 times. It does not make sense\n. done in b3095d523f52a\n. it comes from the Jenkins SVN repo\n. does this need to be done in a controller ? It does not depend on the input at all, so the extension could do it in its process method by adding method calls on the service\n. why is it abstract ?\n. ah right, it works fine for file resources, but when loading translations from arrays, it would require escaping the % in them\n. And given the container is not cached in the case of Behat, the benefit of loading the file at compile time vs runtime is void. The container compile time happens for each run\n. why 3.0.1 rather than 3.0.0 ?\n. what do you think about addign a link to http://symfony.com/bc so that people can see what is causing a BC break exactly ? Some changes are causing BC breaks while it is not obvious at first. The Symfony team did a great work at identifying all these cases and documenting them (the BC is documented in the API column. Normal classes in Symfony are classes for which some BC breaks are actually allowed, but not all of them)\n. well, the 3.0.1 release already respect semver compared to 3.0.0\n. see line 116. It is already handled\n. this is overwriting a method of the Symfony application to extend it (hence the call to the parent method)\n. it is not empty, but it may depend on your PCRE version (not sure if it is changed or no) and PHP version (not sure HHVM has the exact same message), so I choose to stop the expectation before it\n. FYI, the following error message looks like preg_match(): Compilation failed: missing ) at offset 9 for me\n. $this->step->getKeywordType() is always in this array because of the way it is defined in Gherkin, so the check can be removed entirely IMO\n. this cannot be part of 3.0.9 as it is already released.\nanyway, don't bother about the changelog. @everzet takes care of it when releasing\n. I would put it at the end, making it easier for extension authors to be compatible with several versions of Behat at the same time (passing extra arguments to a method is allowed in PHP, so they could always pass the keywords and be done with it if it is at the end, while they cannot if the argument is added in the middle)\n. shoudln't it display a single keyword instead of displaying all alternatives ? This would make it a valid step (using all keywords alternatives together is not valid in steps)\n. I would use the first keyword\n. @everzet should the check by name really be there ? The arguments passed to this method are indexed numerically\n. ah indeed. Why not indexing it numerically at this point ?\n. shouldn't this be typehinted\n. this documentation is wrong (otherwise the next key could never be an integer)\n. missing visibility\n. I would name the class SortedExercise instead\n. This implementation has a drawback. The sorting is done 3 times independently for the different steps of the process. This means that for the random sorting, the order could be different for instance\n. missing type\n. There is a drawback moving the shuffling to a private method: reference mismatch.\nThe argument is passed as copy-on-write to the method (not copying but only incrementing the refcount of the zval for now). Then, you pass it to shuffle which expects a reference. Given that the zval is not a reference and is used several times (twice in this case), it must be duplicated in memory before being referenced for shuffle.\nOn the other hand, if you keep the shuffling in prioritise directly, $prioritisedFeatures will be a zval used only once, and so it can become a reference without being duplicated in memory.\nSee http://jpauli.github.io/2014/06/27/references-mismatch.html for a complete explanation (my knownledge on this topic comes from this article)\n. missing type\n. I suggest removing the aliasing here\n. please remove = null. It is useless.\n. SpecificationIterator[]\n. I would rather call it NoopRenderer\n. extra space\n. I would make these methods private\n. yes, because it is extended in the Behat namespace (to avoid registering 2 extensions for the tester stuff in Behat). But we introduce such extension point only when needed.\n. you should check whether it exists\n. IMO, the folder should not need to exist first. It is not consistent with the way other tools are working. for instance, PHPUnit creates the output folder if it does not exist\n. why making the StatisticsPrinter optional ? If you don't want to print the statistics, don't collect them at all\n. why changing the base class ?\n. this looks wrong to me. Having 2 different option printers and using one of them each time with lots of conditionals is not the right solution. you should have a different class containing the logic related to your suitePrinter, and used for the junit formatting\n. renaming the class is a BC break. It is not worth it IMO\n. this can be much simpler:\nphp\nif ($parameter->getClass()->isInstance($value)) {\n    return $num;\n}\n. this can be much simpler:\nphp\nif ($parameter->getClass()->isInstance($value)) {\n    return $num;\n}\n. object, not mixed\n. mixed is enough. It already covers null.\n. why changing this ?\n. why changing this ?\n. I would keep the signature on 1 line\n. why adding a newline between the braces ? This is weird\n. the formatting is weirdhere as well\n. shouldn't the isolation be implemented in Testwork ? The only dependency to Behat here is the ScenarioContext::createIsolatedContext method, and this could be moved to an interface in Testwork which would be implemented by ScenarioContext\n. technically, it does. The return value is a FeatureContext, not any TestContext\n. should be on one line\n. this is because they are now extended in Behat itself\n. Is it worth abbreviating the name ?\n. Should it force returning an EnvironmentIsolatingContext or should it allow returning any TestContext ?\n. should be on 1 line\n. I would keep this on 1 line\n. I think avoiding the alias here would be more readable. At my first look at the class, I missed it and was started wondering whether Traversable could be used as type rather than Iterator because I though about the type as being \\Iterator\n. This logic means that priorities are separated for arranging testers and basic testers for the decorators. Is it expected ?\n. The logic wrapping in an arranging adapter and then an adapter to the basic interface again should be done only when there is some ArrangingTester decorators, to avoid useless wrapping.\n. As soon as we open it, the BC concerns become much bigger (look at the Symfony BC rules, and remove everything where inheritance is involved. You will see that the list is much smaller). This is why we prefer keeping classes final in any place where it is possible.\n. This is about extending a Behat class in Behat. Testwork is not involved here\n. @WouterJ it is casting when writing code in a statically typed way (casting from TestContext to FeatureContext)\n. Please revert this formatting change. The configuration tree is much more readable when indenting it according to the tree it represents\n. wrong indentation of the array here (it should be indented 1 level more than the line containing array(\n. same here\n. same indentation issue here\n. technically, getDefinition expexts an id, not a Reference. So you should pass (string) $reference\n. you should keep the alignment here (PHP-CS-Fixer will readd it next time we run it though)\n. and you should use findDefinition in case the reference targets an alias\n. should be findDefinition``in case``$wrapper`` references an alias\n. you have extra spaces here\n. I would removeWithfrom the name\n. why adding a method doing nothing here ? There is no interface mandating it, so we could just remove it (until the day we need to extract an interface for this printer)\n. why aliasing it here ?\n. these methods should be private\n. should be final\n. shouldn't it be{@inheritdoc}?\n. actually, it looks like it should be a private method\n. can it be final ?\n. can it be private ?\n. instead of having 2 different steps calling Composer, I would rather define an environment variable$COMPOSER_FLAGSand setting it to--prefer-lowest --prefer-stablein one of the jobs\n. This requires bumping thesymfony/translation` requirement to 2.3+\n. @chillu can you do this change ?\n. no they are not. the Translation component defines dev requirements on them only, not requirements\n. this looks wrong to me. string is the type here, not the value the user entered. So IMO, it should not be enclosed in backticks\n. this empty docblock should be removed\n. defining these functions does not need to be done on domReady. You can do it earlier\n. this function does not depend on the parent scope, so you don't need to redefine it for each highlighting call\n. wrong indentation\n. hardcoded stats look wrong to me\n. I would vote for removing this abstract class. It does not add much value IMO\n. I think this should not be necessary. The formatter should create the folder if it does not exist yet (just like other formatters are creating the file)\n. I would still vote for making it private\n. I still vote for making it final (removing the keyword is easy. Adding it is a BC break)\n. the license header should be preserved\n. and it should be added in other classes you added\n. Can you keep the Memory use statement before the Timer one (alphabetical sorting) ?\n. the second argument should be typehinted as array.\nAnd could this method be private ?\n. the date looks wrong\n. wrong phpdoc\n. wrong phpdoc\n. You should throw an exception in case the output path is a file\n. this does not work because you assume a specific path to Behat, which is likely to be wrong in many cases\n. you should not change coding standards when contributing. Assignment operators are not aligned\n. anything talking about browser should be removed. Behat does not know about browsers\n. -1 for this. This means there is nothing ensuring that Behat can be installed in minimum-stability: stable.\nYou should change the minimum-stability in Travis jobs needing it instead (see how I did it in Assetic)\n. do we actually need this aliasing as 2.8 ?\n. you should also update the dev dependency\n. DEPENDENCIES='dev' already installs the 3.0 versions of Symfony as this is the highest compatible version (except for symfony/process because you forgot to change the requirement). So it is useless to add a second job\n. typo here. Missing g\n. please don't depend on the whole polyfill byt only the deps we need\n. no need to test dev dependencies on both 5.6 and 7.0 IMO. Please remove this extra job\n. the priority is useless, as orderers are not sorted (they are accessed by name)\n. this should be on the previous line to be more readable. It is the same argument, not a different argument\n. Please keep the @author annotation with the original author (i.e. @nicolas-grekas IIRC)\n. This exception should be in Behat\\Testwork\\Call\\Exception, as it is only used by the Call subsystem \n. PHP 5.6 already runs the scenario tagged as @php5.4, due to the way our Travis config works. It is meant to be a min version (and the code used in the Travis setup is currently broken for PHP 7+ when generating the list btw)\n. no need to put anything there, as 5.3 is the min version supported by Behat instead. And using it to exclude PHP 7 is wrong though. It has this behavior only because the code used on Travis actually treats PHP 7.0 as a 5.0 release (so excluding any test with a min version tag)\n. @Taluu The goal is to make the FatalThrowableError appear as being the original error instead of seeing a FatalThrowableError traced in CallCenter and then having to investigate linked exceptions\n. why ?\n. this looks wrong\n. this is duplicating the HHVM build\n. this will not be added for normal PHP builds, so this looks weird\n. This file does not use directives, so the document markers are useless here. So I'd rather avoid them. Thus, it makes the file less readable as many people don't know about them (and the Travis doc does not use them).\nThis is why I'm asking you why you use them. I know that they exist, but I don't see any benefit here\n. Please read section 9.1.3 about bare documents (just after your section about document markers). this is what is used in this file.\n. And a bare document does not use the markers, which is totally valid. and in this case, using a bare document is more readable than using an explicit document\n. please use a strict comparison\n. I suggest using the @trigger_error('...', E_USER_DEPRECATED) convention used by Symfony (which reminds me that someone wrote a Behat extension to collect deprecations, which I said I would review and I forgot to do it)\n. btw, if you rename the class, deprecating it is useless: it is already a BC break. you would need to keep it in the Call namespace\n. does PHP really allows for multibyte chars in capture group names, and handles them properly ? I don't think so. I'm quite sure the limit is 32 single-byte chars. So you should use strlen\n. you should replace \\s* by \\s*+ to make the quantifiers possessive. This will avoid lots of useless backtracking.\nand I think the [^\\\\\\\\$]+ quantifier could also be possessive.\n. btw, backtracking is even worse on PHP 7: some kind of backtracking can make PCRE reach the JIT stack limit much sooner than reaching the backtrack limit (set to 1000000 in PHP), so regexes working (inefficiently) on PHP 5.6 could break on PHP 7 for the same input\n. you should use $input->isInteractive() instead. The input can be non-interactive without having this option, thanks to autodetection of whether the command is run in a TTY or no.\n. please don't add trailing whitespaces\n. please keep the variable definition outside the if. It is more readable\n. I would actually stop aligning constraint to avoid such kind of diffs. if is enough thanks to the return. And I'm not even sure we need this second check. you should not mark it as deprecated, as you should not call deprecated APIs internally. And this is a private function anyway.\nThis looks more like a TODO than a deprecation here btw. should be (string) $reference as getDefinition expects a string (the id), not a Reference object. same here about using the string. what is the goal of this interface, when the code actually expects Interop\\Container\\ContainerInterface anyway ?. Thus Symfony never explicitly mentions that getDefinition supports castable objects. If it works today, it is purely because of an implementation detail (probably because of using lowercase which supports it). So it means that passing a castable object is not covered by the BC policy (as it is a case not respecting the documented contract). So making it explicit is necessary to be future-proof. yeah, I was not sure about it being necessary here.. having { both for PHP interpolation and the string content is hardly readable. Please use sprintf instead. this is now broken, as there is no guarantee that the glob will return the files in the order of precedence defined by Behat when there are several such files (for instance, when having both a committed behat.yml.dist and overwriting it with a git-ignored behat.yml.\nTo limit the number of is_file calls, the solution could be to use a loop of the paths, do is_file inside the loop and then returning early as soon as a file is found (as we don't care about others anyway) instead of filtering the whole list. GLOB_BRACE is not defined on all systems. Some systems don't support it, which means you would drop support for them here.. to be BC, we should keep extending the interop interface for now (which extends the PSR one). Otherwise, existing try/catch may not work anymore (if they were catching the interop one). our class must keep implementing the interop interface to be BC (which will make it implement the PSR one). I would remove this job entirely instead. Testing against precise minor versions of Symfony makes sense only for LTS versions. Running against the latest Symfony version is already done by normal jobs. removing DEPENDENCIES='low' testing is a no-go. I suggest adding deprecation warnings using the Symfony convention (i.e. @trigger_error('...', E_USER_DEPRECATED);) in deprecated APIs.\nBehat does not provide reporting of usage of deprecated APIs yet (I think there is a third-party extension doing it though), but it may still help people using  Behat programmatically (which are the only ones caring about it, as the built-in usage of Behat should not trigger deprecated APIs for the ExtensionManager). as it is a deprecated API anyway, this is fine. The final exception should be changed, as it would be wrong for custom instantiator.\nYou may want to build the message based on exception messages provided by each instantiator.. the extensionsPath argument should be deprecated.\nSo instantiators should be passed as second argument in the non-deprecated signature. The BC layer would enter into action when it is not an array.\nyour current logic would force keeping the $extensionsPath argument in 4.0 when removing the BC layer.. We need a deprecation warning when reaching the Bc layer IMO.. this must not be inside the sprintf. Your code is broken. what should be inside the sprintf is __FUNCTION__.. wrong check. It must be ArgumentResolverFactory. Another option is to create an internal class implementing ArgumentResolverFactory by wrapping a SuiteScopedResolverFactory (which is easy to do).\nThis class would then wrap the SuiteScopedResolverFactory into this internal adapter implementation in case the provided argument does not implement the new interface but only the old one. And then, the private property can be guaranteed to always contain a ArgumentResolverFactory. wrong phpdoc. Should be ArgumentResolverFactory. \u1ef3ou cannot, as the implementation still implements it for BC. The deprecation should have a message giving the version it was deprecated in, and the alternative.\nAnd I would also add a @trigger_error('...', E_USER_DEPRECATED); in the method.. this should not alter the Gherkin object it received as argument. Change the service definition of the gherkin service instead.. and this code breaks for an empty string. they keyIndex is sometimes incremented manually inside the loop, so a foreach cannot be used.. this breaks in case of empty string. the one which should be tested explicitly here is the 3.4 LTS, like done for 2.7 and 2.8. The 4.0.*@dev is useless. no need to expire them when the composer.json is changing. Even if we change one dependency, the others could still benefit from the cache.. that's weird to me. The first choice is 0, not 1. as this bumps the min version to 2.7+, you could also clean InteractiveContextIdentifier::interactionIsNotSupported. 2.5 and 2.6 are EOLed since years. So that's fine here.. I think we should also make them public. ",
    "vglushonkov": "Hello everyone. This issue is 10 months age, so maybe it is why i can't make my Behat run tests in different from Chrome browser (why not firefox, i don't really know).\nMy task is to run ALL the tests i have with different browsers. Is it achievable thru the command line of Behat, ot Sahi, anyhow? \nI tried to https://github.com/Behat/Behat/issues/38#issuecomment-1573050 but it still says \"session ff is not registered\". As long as i understang, this soliution requires me to create 4 sets of identical tests, but with @mink: ff, chrome, ie and opera. This is not really what i need. Maybe there is a way to set Sahi to run a browser type i want before running behat tests?\n. You say if I have behat 2.4 (I have 2.3.3) I need just to add firefox profile to behat.yml like this:\nparameters: { browser: firefox }\nand then just run my CL like this?\nC:\\projects\\oli-port\\repo\\branch>php app/console --env=test behat src\\Ailove\\OlimpBundle\\Features\\Regression\\TeamSochiProducts.feature -f html --out ....\\test_results.html --profile ff\n. Thanks, everything works fine\n. ",
    "alfrekjv": "Thanks :)\n------Mensaje original------\nDe: everzet\nPara: Alfredo Juarez\nAsunto: Re: [Behat] Added Spanish Translation (#41)\nEnviado: 25 de jul de 2011 12:49 PM\nNice. Will be in next release ;-)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Behat/Behat/pull/41#issuecomment-1648051\nEnviado desde mi oficina m\u00f3vil BlackBerry\u00ae de Telcel\n. alright, my mistake, how can I fix it?\n. oh yeah, give me a sec..\n. fixed.\n. ",
    "arendjantetteroo": "Great, thanks. \nI'm currently translating the mink definitions but the Given,When,Then are not translated when doing behat --definitions lang=xx . I would assume they would show in the language that is requested like the rest of the definitions. Is this a bug or a configuration problem on my end? \n. Ok, good to know. Thanks. \n. You need to add the following to the top of your feature files to use another language,otherwise behat assumes it's in english :\nlanguage: pt\n. I had the same problem 2 days ago, see http://groups.google.com/group/behat/browse_thread/thread/93d0ab611e90d7b1\nA PR for the docs would be nice. \n. ",
    "thedavidmeister": "I'd use this option right now. Thanks for calling me a \"nobody\".\n. ",
    "c4rl": "Shot:\n\nBehat is not a testing tool\n\nChaser:\n\n. ",
    "ircmaxell": "Requesting that this to be reopened, considering Behat is definitely used as a testing tool as much as a design tool.\n. Nevermind then\n. ",
    "ciaranmcnulty": "This is actually in 3.1 IIRC\n. This seems to be a duplicate of #277 \n. :thumbsup: This was exactly what I wanted from the issue.\nOnly comment is that you might want to handle multi-namespace files too (so rather than reading $relectionClass->getFilename() look at ->getStartLine() too and work backwards from there to the NS definition.\nThat's a big edge case though.\n. I just wish my regex-fu was good enough to fix :-) I will have a look if I can though\n. :+1: \n. Looks great, thanks!\n. :+1: I would like this feature please ;-)\n. I would still like this feature please (nearly 1 year on :-P )\n. @stof Are you going to address @everzet's suggestion? If not I think it's still usable as it is and should be merged\n. Aha, thanks\n. I wasn't sure if row: was too generic, happy to change it.\nAside: I'd like some way of disambiguating tables with similar columns\n. I changed the prefix to \"row:\"\n. @everzet Do you want this as a separate extension? Is it too small?\n. I'd still like this merged ;-)\nNot sure what scrutinizer's issue is\n. Rebased and fixed after #654 modified this part of the codebase\n. @stof if you do a release I'd appreciate it if you could include this, it's 1.5 years old\n. :joy: I've been dreaming of this day\n. @kocherovf Who are you asking? It's an open-source project ;-)\n. I've thought about this a little more, would it make more sense as a separate Extension? It's currently built into the TesterExtension but I could easily refactor it.\n. @stof That's fair, my future use cases are prioritisations (e.g. looking at which tests failed recently) but these two builtins aren't.\nOrder? Sort?\n. From a chat with @everzet, I will change terminology to 'order' and move this out into a separate Extension that if possible is only dependent on Testwork.\nI'm aware that it loses lazy-loading, but I can't see a way to avoid that that won't break when new Specifications are added - I think the only real way to tackle that is to document this drawback in the option's usage information.\nThe motivation for random/reverse is dependency-detection; I don't see them being run as a matter of course, maybe just occasionally, or possibly in some CI environments (where the lack of lazy-parsing won't affect the overall execution time significantly).\nI'm aware of --rerun and I want to explore more complex prioritisation mechanisms (that would not be suitable for core, so I will probably do in extensions)\n. Not sure if this is expected behaviour or not, but was a gotcha for me.\n. @james75 if you import/export the XML from the PyString before the comparison you should be able to normalise it against different libxml versions\n. Name and shame! That guy sounds awesoke\n. Failing?\n. Ah ok, someone with contrib rights can kick off the travis build again perhaps.\n. Is the syntax actually documented anywhere? I've only seen a few howto-type things.\n. I like this formatter! It's debatable whether it should be in core, I think that's a decision for @everzet how many formatters he wants to ship with.\n. The CI issues here seem to just need a re-run.\nThe change seems sensible where values can accept a null :+1: \n. This is a dupe of #591 ?\n. Nope, it's not. Sorry ;-)\n. I like this feature but it needs rebasing or merging.\nWhat happens when a table has >1 row (+ header) and this transform is used?\n. :+1: \n. Like @stof says this feels like something that you can solve by not using --strict.\n. I'm closing as there's a straightforward solution (don't use --strict)\n. I agree that Environment is more specific than config file.\nOne comes from a VCS (typically), the other is local to the machine.\nHowever making this change would be a BC break so could potentially cause issues if done in 3.x\n. I could be crazy but it looks like your Scenario is on line 12?\n. I agree that this is not appropriate for core, but probably makes sense for your particular usage so would be a good subject for an Extension.\nI'm not sure this should be left open?\n. On the face of it this seems reasonable, but you should replace the scenario with one explaining the new behaviour.\n. Do you need a scenario that covers this for snippet generation?\n. It's a shame the root cause for your error isn't known, but :+1: on adding the guard.\n. This change makes sense to me\n. You're looking for these? https://github.com/Behat/Behat/tree/master/src/Behat/Behat/Hook/Scope\n. No idea; it works for me.\n. :+1: Looks good to me\n. What is the use case for this? The example is hard for me to understand...\n. Your minimum-stability: dev will be overriding any package-specific stability levels, so you're getting a 2.x dev version.\n. You will need to also update the test suite.\nAre you sure this is invalid JUnit XML? I know a few teams already using the JUnit formatter.\n. Can you confirm the step definition?\n. In a suite that large, what impact does this have on memory usage? That's the other side of the coin when doing this type of optimisation. I'd love to see some stats from your suite?\nIf it's not a major impact I'm :+1: on this change.\n. Great, thanks!\n. It's kinda worrying that this change hasn't caused any difference in the test suite\n. Can you add a test that will fail if your change is reverted?\n. This is not appropriate for the repository to enforce, otherwise every project will have a huge .gitignore.\n. I agree that setting minimum-stability is inappropriate.\nThe change to ~2.1|~3.0 is probably right, assuming 3.0 works?\n. Thanks @Taluu and @stof, updated\n. The symfony polyfill may still be a good idea!\n. @rajeshtaneja it's not actually that dramatic; you'd still be able to use Behat. You'd just not be able to upgrade to newer versions\n. I think this should wait for a major version\n. I don't think SemVer requires a major version bump so it's up to @everzet\n. That's a nice idea Samuel. \nI have a concern that the trailing comma is not obvious enough at first glance? Maybe something like Email:*?\n. @Transform type:email and maybe discuss further how Transforms can be composed together\n. 2 and 3 both sound good to me; in each case I've tagged a @Transform explicitly\nNudging VOs to have fromString rather than something with a better name might be a nudge in the wrong direction.\n. @everzet to separate the concerns about 1:\n- I am nervous about adding any method naming style nudges, because I think method naming is contextual.\n- I don't think fromString is a good name if there is an existing domain concept, so I fear that having a default may prevent consideration of other options.\nIt's such a weak method name that using __construct would be just as good\n. There is some work inside Cucumber to adopt an expression syntax similar to our Turnip expressions: https://github.com/cucumber/cucumber/tree/master/cucumber-expressions\nWhat's interesting is that they introduce the name of a transformation that can be embedded into the syntax:\n@Given I am a user called {name:user}\n(Note it isn't a type, it's the name of a transform called user that quite possibly outputs User objects).\nThere is also an idea if implicit transforms that overlaps with @everzet's implicit transform ideas.\nI think at this stage it's good to make sure the mechanism aligns with the cucumber concepts enough that we can consider adopting the expressions.\n. Mink gets this directly from the driver so it may be a concern of the specific selenium driver.\nI think because we're just asking the browser for the markup, you'll get the browser's DOM tree. You could try using the goutte driver as that just does HTTP requests from PHP to fetch the page.\n. If this is to remove unnecessary tests for prod, it should probably also exclude the various CI tool configs, and probably the features folder\n. This appears to be much faster on the PHP engines.\nHowever phpenv is killing the HHVM build, which is actually 12X slower most of the time anyhow :-/\n. To address this we would need to internally generate shorter names (or use numeric indexes) and then maintain a mapping of these names to the longer placeholder name.\nA short-term fix would be to throw a more verbose exception earlier before the regex is generated.\n. Unfortunately behat.yml is not required, so not sure how we can address this\n. I don't think so - when we do skipping that's baked into the ScenarioTester and StepTester.\nYou'd need to decorate the StepTester and override the results of run in a stateful way - this probably can't be done via the events system.\n. Did you mean to open this against the drupalextension, rather than base Behat?\n. you probably want @Transform :TIME_STAMP\n. You can completely ignore scenarios that have a certain tag using the --tags= command-line option, or in the suite configuration\n. You're locking to 3.0.15 which indeed doesn't support Symfony 3 (it was released many months before it)\nUse Behat 3.1 and you will be able to install it with Symfony 3\n. While I would use this as an extension, I don't think this should be core.\nThus far Behat has not introduced any conventions to how users design or write code, and I don't think it's appropriate for the core app to do so.\nIf you want to go ahead, the error message needs to be far more explicit about why the hell it things fromString should exist or why it's looking for it.\n. New exception message is a big improvement\n. Really in favour of the deprecation, and the CLI flags seem sensible (not reviewed the code yet).\nThe more helpful method when snippets are not generated can be even more helpful - it's still not clear for instance which context(s) are in the current suite and could be matched.\nCouple of ideas:\n- Multiple-choice interactive dialog (my favourite, but first interaction in Behat)\n- Output the list of Contexts with the flag as prefix, so it's copypastable\n. Fantastic! Will this work with --append-snippets too?\nI think in the case of only one context existing you could default to that one?\n. I mean in the --append-snippets case where selecting None would not make sense\n. What is the motivation against having a property on the context class?\n@sroze I don't see how this works if there are steps inbetween the one that returns the bucket and the one that wants to use it, or if there are multiple bucket objects.\n. @sroze I don't get how any of that is simpler than $this->bucket ?\n. @sroze The difference is with a property it can be private so it narrows my search scope - I now have to worry that some other context is populating it.\nThe entire job of a context is to carry state between steps in a scenario in a specific interpretation of the steps. Hiding the state is just sweeping it under the carpet. Sharing the state with other contexts is breaking encapsulation and maintainability.\n. @jakzal Sounds like you want small files even if they break when you try and use them independently? Try Traits.\n. Do we have a versions policy anywhere?\nThis is a good move but brace yourself for the backlash :-)\n. @andytson it would be irresponsible to claim support for a version in composer.json but not actually test against it\n. i will when I figure out how to make the docs look nice locally so I can test it\n. That PHP error indicates the code isn't being run on PHP 7\n. If I have services option and the symfony2extension is there fallback, or are all @-params interpreted as non-Symfony services?. @stof we could switch to https://github.com/ciaranmcnulty/version-based-test-skipper if needed. That's a good choice for Symfony projects, and similar 'modern' frameworks but not all projects use composer - consider a user running Wordpress and using behat.phar\nI do agree we should encourage Composer usage, and we could do so in the current version of Behat by updating the documentation to include composer by default, but we need to consider how it will work in the use case of Behat as a stand-alone tool.. At the time we added automated PHAR generation to PhpSpec, @everzet was experimenting with signing the PHARs for Behat and it looked complicated to automate :-). Extensions are by definition someone else's project so they can use whatever coding standards they want. There are are some custom rules in scrutiniser config. @everzet FYI Symfony console 3.2.8 is wrapping Errors in DebugException (fixed already in master) so this a generic PHP fatal, in case you get similar reports\nDefinitely seems like the issue is the symfony cache not writeable so not Behat related. The error (and usage of PHPUnit_Framework_Assert) seems to be in CWTest\\Context\\AdPackageContext::iVerifyTheStructureOfTheCreateAdPackagePage(), which is not part of Behat?. Is CWTest\\Context\\AdPackageContext yours or a third party extension? Maybe show what verifyField and iVerifyTheStructureOfTheCreateAdPackagePage look like\n. Yep this is why that package probably shouldn't tag phpunit/phpunit: *. @fbourigault I don't think that has ever worked. Really we need to fix it.\nIf 3.4.1 disallows PHP 5.3 users, they'll still get 3.4.0 installed\nI think dropping older version support explicitly is a good idea in future though (even 3.4.2). Thanks, @Taluu . Thank you @spolischook, sorry it took so long to merge. Worth checking the --order=random CLI flag, or associated config key in Yaml, isn't being used. but yes it's otherwise meant to be the same sequence as the feature file. To 'throw the first stone' I'd encourage you to start discussion with the cucumber/cucumber project. The Context is re-instantiated for each Scenario - this is why everything up to beforeScenario must be static. I'm not sure why Scrutinizer is complaining here - looks like the issues were all pre-existing. @vijaycs85 This looks good, is it possible to also get it working on older/newer Symfony Finder versions?. Forking a project is a lot of maintenance when new features come out.\nPerhaps you could explain more about the feature and make a PR? Or alternatively you could bundle your changes into a behat extension that people could install?. @spolischook Can you add a new interface that extends Suite, and have GenericSuite implement it? This would mean you can rely on an interface still\nJust adding it to the concrete class risks us breaking your code in future by not respecting the BC. Possibly, but we would need some way to decide which parameters to pass - this could be ambiguous. Thanks @ilovemistakes \nWe'll need to keep an eye open for any new issues from people using unicode languages. Thanks @DonCallisto . Thanks!. TBH I'd rather take the symfony extension out. contexts takes the class name. Can you provide some details?. Thanks @Taluu . @jakzal try the symfony-hosted one https://github.com/phpspec/phpspec/pull/1201/files. great!. Looks like a cool optimisation - my only worry would be if there's an adverse affect on memory usage for suites which have a large number of unique step defs - any ideas how to profile it?. Thanks, @jdeniau!. It doesn\u2019t make one class, no. When it runs a step, Behat looks in all the contexts of the current suite for a matching method. \nIf more than one method matches the step (either by two different patterns matching the step, or in your case because you copy pasted them method into two contexts) you get an error message. It's possible mink could stay... if only to avoid lots of support questions. Looks good but Travis is borked. Thanks @jakzal . It's because BeforeScenarioScope::getEnvironment() is documented as returning an object implementing the Behat\\Testwork\\Environment\\Environment interface. \nHowever, at runtime it is most likely returning an instance of the Behat\\Behat\\Context\\Environment\\InitializedContextEnvironment class, which has extra methods including getContext. This is fine in a dynamically typed language like PHP.\nIf you want to be extra type-safe you can do:\n```\npublic function login(BeforeScenarioScope $scope)\n{\n    $env = $scope->getEnvironment();\nif($env instanceof InitializedContextEnvironment) {\n    $env->getContext(RestContext::class)->iAddHeaderEqualTo('Authorization', \"Bearer $this->token\");\n}\n\n}\n```. Yep looks good, thank you. Thanks @philtweir!. It just uses the composer autoloader, so what you posted should work. How are you configuring suites in behat.yml?. Looks right, did you dump the composer autoloader?. Glad it's resolved \ud83d\udc4d \n. @felds that's not how require-dev works; transitive dependencies aren't installed by anyone requiring behat/behat\n. You can comment out a step:\n```\nWhen I have a scenario\nBut I don't want this step to run\nThen everything will be cool\n```. Behat doesn\u2019t have a Date concept - what is the automation code behind those step definitions?. I've definitely got code that uses step definitions inside Traits and it works fine. That\u2019s how we present output from hooks. Is it possible the hook is outputting some new lines / blank strings?. In the past we've handled things like this without BC breaks by detecting the new API is available and using it if so, but leaving the old code in as well.\nIf you can do the switch at the DI level (i.e. have two implementations of the caller), all the better. No, working off master is correct \nIt looks like the newer release of behat/gherkin is causing an issue. Does the generated method not have a pattern on it? (i.e. no '@given')?. Ah you said you removed the comments. What's likely is that the generated step pattern is failing to match your step.\nThis would obviously be a bug because we'd hope to generate a pattern that then matches the thing we generated it from!\nIf you can share the pattern it'd be helpful - most likely is that the (s) in the step is confusing things. Sounds ok, if that conforms to the Unit schema. From what I recall, the JUnit schemas were written retrospectively so I can well imagine there are competing standards :-/. Because $iterators is passed each time, I was unclear whether there is a scenario where the array would change between the two executions?\nIf there isn't I can cache it here.\n. Wow, that is new to me thanks - I'll amend! Would passing the $prioritisedSuites as a reference fix the issue?\n. TestWork extensions seem to be protected e.g TesterExtension - not sure if it's a deliberate extension point though?\n. That is a better name, thanks.\n. Gotcha, will change.\n. :+1: You need to keep ConsoleOutputPrinter, but might be able to introduce a new StreamOutputPrinter as well.\n. Why rethrow here? Is the original message not clear enough?\n. s/validate/valid\n. Maybe be less specific about the tool here\n. If you provide the constant LIBXML_NOEMPTYTAG here it will help keep output consistent across platforms\n. Extra newline here\n. Wha... the docs lied to me?!\n. If you take the braces off here it should fix the HHVM problem.\n. Indentation of your opening \"\"\" is off in all scenarios (this is common when copy/pasting)\n. You should not commit these comments - if you think it needs explanation then maybe these pieces of logic can be extracted into private methods (or collaborators)\n. indentation here seems wrong\n. Switching on the type of the context suggests generation of the events could be responsibility of the context itself\n. This condition is not needed. If they're equal you can still return $transformedValue (as $value is returned below);\nAdditionally the continue above doesn't add much to comprehension, you could flip that if and nest the return inside it.\n. Missing a  docblock for$method\n. If it's a factoryMethod then the constructor param should be named the same\n. Could this be passed into the constructor instead? It could come from configuration but have a default?\n. Probably also need to check the method is compatible i.e. Unary, can take a string as it's arguments (compatible typehints)\n. 'Having a container\". I'd rather this was called Composite, after the design pattern. Aggregate risks confusion with the DDD concept, or other usages where an aggregate is a collection. There might be better naming - noop from the comment makes sense, or maybe empty?. A similar check takes place in ServicesResolverFactory - can these be done in one place? Perhaps a value object?. I was so pleased about resolving the conflict via github, too. We should probably discuss whether it's ok to drop 2.5 and 2.6. There's no explicit BC policy in place; I think @everzet's opinion matters here. I don't like that the same thing is returned in two places - the logic could be rejiggered to have a single return type (i.e. write it if it's needed, then return it in both cases). you should only return it if it's set (the loop maybe got to the end and didn't find anything). Note the unreachable exception after this - you could move the exception up and put a condition around it. The fact the tests didn't catch this means there's one missing :-). ",
    "greggles": "For anyone else who finds this the parameter is --order=random.. ",
    "dcsg": "i didn't see that in doc's, now is working! i will read again the docs and make a PR with it if the doc's does not mention it ;)\n. But it doesn't make sense, the language is set to \"pt\" in behat.yml it should work without the reference inside the feature file or not @everzet?\n. @everzet you are more faster than me, i was just about to do a PR on that ;) tks\n. @stof yes, will do that. Thanks for the information.\n. @stof done! Sorry for that I just grabbed the master file my bad.\n. @stof rebased it. If @ricoli agree with the changes it can be merged\n. @ricoli I do think that snippets makes more sense, but it's my opinion. I will merge your code in my branch because there is some parts that yours makes more sense. Do you agree?\n. @stof yes now I do remember that I used exemplos on the translations for Behat 2.5. @ricoli do you agree with exemplos instead of snippets or fragmentos?\n. ",
    "ftassi": "behat-docs repo has been moved. Just for reference, here is the correct link to the patch https://github.com/Behat/en-docs.behat.org/commit/c1f76bf\n. ",
    "cordoval": "oh ok thanks for explaining I thought i could not use mink shortcuts on subcontexts due to this impossibility\nnow I am a bit more clear on the code too, thanks a lot @everzet !\n. nevermind i can, but the behavior on sahi at least is unpredictable for some reason, strange.\n. for the case on phpspec i also thought this held, however someone respectable came up with an extension to do code coverage in phpspec, at first I thought it was a bad idea, but then i realized some use cases or in some flows it made sense. Not sure it is the case of behat, but who knows. Sometimes tools find different use cases, even if it is not the former one. So with care, let's say that is not the best idea for behat right now.\n. I know you guys are experts, just a bit concerned in documentation, i am actually using the beta8 https://github.com/pborreli/composer-service/pull/36/files but really would appreciate understand some of the coolio latest stuff, I can be of help if you need me to write a blog post or anything, but if you are coming up with a post and consider it enough (maybe not for newbies) then fine too. just a suggestion.\n. how can that be valid yaml? this errors in the parsing of your behat it has nothing to do with behat, missing : probably\n. you just polluted the thread, next time please open your issue in a separate ticket or better go for the mailing list.\n. what was wrong @everzet ? why did you close it without comment?\n. was it not a micro  PR then?\n. why did you remove the extra branch-alias?\njust curious\n. ",
    "kriswallsmith": "ug, rebasing...\n. ready\n. All set.\n. Ok, closing.\n. No. The -- and - are not necessary here.\nOn Monday, August 29, 2011 at 11:36 AM, everzet wrote:\n\n\n@@ -33,7 +33,7 @@ class HelpProcessor implements ProcessorInterface\n \"Print *.feature example.\\n\" .\n \"Use --lang to see specific language.\"\n )\n- ->addOption('--definitions', null, InputOption::VALUE_NONE,\n- ->addOption('--definitions', 'd', InputOption::VALUE_NONE,\n\nIt should be -d, right?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Behat/Behat/pull/49/files#r105699\n. \n",
    "henrikbjorn": "I dont get this, why not use Symfony2 ClassLoader component instead? (it is 3 files)\n. Then do a Behat ClassLoader that extends the ClassLoader Component instead. Copy Pasting code is never a good idea.\n. ",
    "stloyd": "I dont know it too ;-) I think now it's kept for kind of BC with old Behat code, but its just guess ;-)\n. BehatBundle was not yet updated to work with Behat 2.2, and in this new version RerunProcessor was merged with RunProcessor.\nPlease be patient ;-) Bundle will be updated ASAP :-)\n. It has nothing to do with Behat, it's problem with your code that calls deprecated function.\nJust lower the logging level in test env (not recommended), or grep your code (or update your dependencies) for deprecated functions and replace them with the new ones (recommended way).\n. Just for note, that step operates only on data returned by: \nphp\n/**\n * @Given /^([^\"\"]*) with following data should be created:$/\n */\npublic function objectWithFollowingDataShouldBeCreated($type, TableNode $table)\n{\n    $data = $table->getRowsHash();\n    foreach ($data as $property => $value) {\n        // $value in last call is array, in every other place is string\n    }\n}\n. @stof Yes, it's not from Behat, it's from custom step I have posted above and it's caused by:\n| type | text | (there is whitespace after last|):\n- 3.0 creates: string => 'type' & array => ['text', ''], \n- ~2.4 creates: string => 'type' & string => 'text'.\nBut this can be closed, it seems to be issue with Gherkin not Behat it self.\n. @everzet Thanks! =)\n. IIRC just the class namespaces was renamed, so this should look like:\n``` php\nuse Behat\\Behat\\Definition\\Call;\n/*\n * @When /^I do something$/\n /\npublic function iDoSomething($page)\n{\n    return new Call\\Then('I should do this too');\n}\n```\n. Hmmm this looks like broke case when you use some methods internally with additional parameters:\n``` php\nSylius\\Bundle\\CoreBundle\\Behat\\CoreContext\n/**\n * @Given /^the following shipping methods are configured:$/\n * @Given /^the following shipping methods exist:$/\n * @Given /^there are shipping methods:$/\n */\npublic function thereAreShippingMethods(TableNode $table)\n{\n    foreach ($table->getHash() as $data) {\n        $calculator = array_key_exists('calculator', $data) ? str_replace(' ', '_', strtolower($data['calculator'])) : DefaultCalculators::PER_ITEM_RATE;\n        $configuration = array_key_exists('configuration', $data) ? $this->getConfiguration($data['configuration']) : null;\n\n        $this->thereIsShippingMethod($data['name'], $data['zone'], $calculator, $configuration, false);\n    }\n\n    $this->getEntityManager()->flush();\n}\n\n/**\n * @Given /^I created shipping method \"([^\"\"]*)\" within zone \"([^\"\"]*)\"$/\n * @Given /^There is shipping method \"([^\"\"]*)\" within zone \"([^\"\"]*)\"$/\n */\npublic function thereIsShippingMethod($name, $zoneName, $calculator = DefaultCalculators::PER_ITEM_RATE, array $configuration = null, $flush = true)\n{\n    /* @var $method ShippingMethodInterface */\n    $method = $this\n        ->getRepository('shipping_method')\n        ->createNew()\n    ;\n\n    $method->setName($name);\n    $method->setZone($this->findOneByName('zone', $zoneName));\n    $method->setCalculator($calculator);\n    $method->setConfiguration($configuration ?: array('amount' => 2500));\n\n    $manager = $this->getEntityManager();\n    $manager->persist($method);\n    if ($flush) {\n        $manager->flush();\n    }\n\n    return $method;\n}\n\n```\nThis will end with error:\nbash\n[Behat\\Behat\\Definition\\Exception\\UnknownParameterValueException]\nCan not find a matching value for an argument `configuration` of the method\n`Sylius\\Bundle\\CoreBundle\\Behat\\CoreContext::thereIsShippingMethod()`.\n. @everzet Sure, here you go: #581. Hope that description is quite clear =)\n. IMO type=\"text/javascript\" should be added. Also this should be moved to <head>.\n. As you can see there is used xhtml doctype...\n. Why checking against null? IIRC there is isset() call in hasSetting() which already return false if value is null.\n. More curious than real issue, why not using !empty($this->features)? You don't need to know how many items are in this variable, you want to know it's set or not right? =)\n. Why checking twice? If the filters is null it will not pass first check anyway, so !is_array() should be enough.\n. ",
    "Ziiweb": "Hi Konstantin!\nI just installed Behat as you say here http://docs.behat.org/quick_intro.html#method-1-pear \nAnyway, when right now I call \"behat --description\" I'm getting this:\n~$ behat -d\n[InvalidArgumentException]\nFeatures path \"/home/me/features\" does not exist  \nbehat [-c|--config=\"...\"] [-p|--profile=\"...\"] [--init] [-f|--format=\"...\"] [--out=\"...\"] [--colors] [--no-colors] [--no-time] [--lang=\"...\"] [--no-paths] [--no-snippets] [--snippets-paths] [--no-multiline] [--expand] [--story-syntax] [-d|--definitions] [--name=\"...\"] [--tags=\"...\"] [--rerun=\"...\"] [--strict] [features]\nThen I installed BehatBundle on Symfony 2.0.3\nJavi\n. ",
    "acoulton": "@everzet, thanks for the quick reply (and the tool!).\nI appreciate the distinction between Behat and PHPUnit/PHPSpec. I've used PHPUnit before, though I'm new to Behat. However, I thought (and may be wrong) that it was appropriate to use BDD/functional testing for the public API and functionality of a module/library. I'm certainly aware of several Ruby libraries that have cucumber tests for their public API.\nIn that case, calling a method and receiving an exception seems to me to be equivalent black-box like, functional, user-observable testing in the same way that loading a URL and getting a 404 in Mink is - it all depends on who the user is that is doing the observing? A third-party application developer integrating your library is still a user, aren't they?\nObviously the internal api of your classes and application should be covered by unit testing, as you say.\nIt's entirely possible I've misunderstood though - as I say I'm new to the BDD concept although already finding it a powerful one. Behat is a great tool!\n. Many thanks for the explanation, that makes a lot of sense. I'll stick to\nphpunit for APIs and move to behat for testing full-stack apps and\ncomponents. Was just so impressed with the concept I wanted to use it\neverywhere :)\nOn 8 Oct 2011 15:47, \"Konstantin Kudryashov\" \nreply@reply.github.com\nwrote:\n\nThe whole idea of Behat features describing is built around the idea of\ndefining one single business dictionary for your domain area. It means, that\ndefining this dictionary one time you can use it in all your project\nscenarios. But when we're talking bout source code testing, we're talking\nbout source code, not about dictionary. Building dictionary for an public\nAPI testing of your library, you'll finish with duplicating of entire php\nlanguage in step definitions :-) And, what's even worse, at some point,\nyou'll notice, that you're writing dictionary definitions (step definitions)\nmore than testing or describing target behavior. That's the only reason why\nBehat is oriented on the black box testing.\nOne of the brillian ideas about BDD - you should describe behavior in\nterms, that end user should understand. So, when you're talking about\nwebsite users - it's browser behavior, that you're describing and Behat+Mink\nfits there awesomely. When you're talking bout console tool user - it's\ncustom CLI user dictionary (run, go to directory, etc.), that you should\ndescribe and Behat fits there too:\nhttps://github.com/Behat/Behat/blob/master/features/bootstrap/FeatureContext.php#L95.\nBut when you're talking about php library users - you're talking bout source\ncode. And best terms to describe php library behavior to it's users is the\nsource code itself.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Behat/Behat/issues/58#issuecomment-2332339\n. \n",
    "b01": "@everzet So wait, you're saying that I should not use Behat to perform functional test on my PHP libraries for public APIs. . ",
    "jvexiau": "Works fine, thanks!\n. ",
    "alexanderilyin": "@everzet Don't you suggest to use tables instead?\n. @stof \"behat/behat\": \"3.0.*@dev\",. Missed that in docs but it's still about OutlineExampleEvent and not about ExampleEvent but now it's not looks like a bug maybe just outdated docs.\n. ",
    "francoisbruneau": "@everzet This means there is no more compact way of writing the following feature?\n```\nFeature: Account creation \n  As a visitor of the website\n  I want to be able to create a user account\nScenario Outline: I can create an account\n    Given I go to the  site\n    And I go to \"Account creation page\"\n    When I fill in the account creation form\n    Then I should see \"Your account was successfully created.\"\nExamples:\n| localized |\n| American |\n| French |\n\nScenario Outline: I must fill out all mandatory fields\n    Given I go to the  site\n    And I go to \"Account creation page\"\n    When I try to submit an empty form\n    Then all mandatory fields should be highlighted\nExamples:\n    | localized |\n    | American |\n    | French |\n```\nEspecially the following two lines which are repeated and would be tempting to put in a Background. \nGiven I go to the <localized> site\nAnd I go to \"Account creation page\"\nIn this example, all scenarii could then be executed for each locale.\n. ",
    "dancourse": "+1 for this suggestion. If the Background could take a table which the Scenario Outline also ran from it would save a LOT of duplication.\n. ",
    "muglio": "+1 Would <3  the ability to outline a background. It would be extremely helpful in bulk setting up test preconditions.\n. ",
    "deyikong": "7 years later, I still feel the need. You don't need to add it. but the need is there. I understand you want to respect the Gherkin format, but improvements are a better form of respect IMO. . ",
    "sooqini": "I appear to experiencing a bug with this code, the array_shift($transformArguments) removes the single element in the array, in other word preg_match matched the whole string without any captured parenthesized subpatterns. I have fixed it by changing the line to:\narray_splice($transformArguments, 0, min(1, count($transformArguments) - 1));\n. Its due to having no capture groups in the transform regex, would be good to allow this where just the one arg is required\n/**\n     * @Transform /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/\n     */\n    public function mockEmail($string) {\n. This seems the best place to ask this question - is it possible to unfreeze before running the tests so the scenarios can be modified? I see the method on the Gherkin class but there doesn't seem to be a way to get a reference to it in beforeSuite.\nMy use case is as follows: I have created a set of email test steps which mock any emails in a feature using step transformation if a @emails tag is present. An additional feature I would like to add is a check to see if all received emails were accounted for (referenced in a step) so I added code in an after scenario hook to throw an exception if any additional unexpected emails were sent. Problem is this doesn't make the scenario fail but just stops behat running completely. So I thought of dynamically adding an extra step in beforeScenario @emails which does the unexpected email check instead - that way the scenario would fail with meaningful output. \nI could just add that step manually to every .feature file, \"And no other emails should of been sent\", but I want that feature to be implicit with the use of the @emails tag otherwise its feels like forgettable boilerplate.\n. @everzet I feel your argument is too purist, sure code coverage and StoryBDD doesn't make much sense compared to SpecBDD or TDD and usage of Behat doesn't cancel the requirement to spec or unit test your code. \nBut in the real world of constrained budgets and time, we tend to end up cutting some corners and knowing the coverage of your feature tests is valuable information without incurring a big overhead. \nThat being said, I don't think its particularly the job of Behat to manage/generate the coverage specially as its not the coverage of the story that we are interested in here.\n. No, its the fact I can mutate the TableNode passed into the transformer \n. I agree, was just easier to mutate the TableNode and return it, I saw a setRows (will this be deprecated then?) method before looking into constructing a new instance :) \nI've fixed it with $table = clone $table as the first line of my function; \n. ",
    "marmotz": "I don't understand. Events is not present to eventually (!!) modify data if we need it ?\n. In fact, I want to test all @javascript scenario in my sahi sessions (linux{chrome|firefox} & windows{ie6/7/8/9|chrome|firefox}).\nDuplicate stories for each sahi sessions is not a good idea. If I add a new sahi session, I don't want to check all my scenarios and reduplicate missing, or if a scenario changes, I don't want to correct all duplicates scenario...\nWell, I use @beforeFeature to duplicate scenario on the fly and attach a new tag @mink:my_sahi_session to automatically change mink default session name\n. It's not acceptable.\nI should launch x times tests for each os/browsers and read x results to know where there are problems.\nI want to launch one instance of behat/mink to do all my tests.\n. that's why i duplicate scenario in @beforeFeature and attach a specific tag to change automatically sahi sessions.\nAll goutte tests was executed one times, all @javascript tests was executed for each os/browsers like it was configured in behat.yml.\nIf I launch x times all tests, I launch x times all non @javascript tests when it's useless.\n. Well... launch x times behat doesn't seem logical, but if you won't do this little code modification, i just must close my fucking mouth\n. This proposition give the possibility to add or remove scenario in the current feature.\nFor example to duplicate scenario automatically to launch scenario for each os/browsers.\nFeatures file was written without according importance on where tests was launch. Behat just launch scenario according to configuration. Mink was used to abstract brower testers, Sahi was thinking to execute test on multi browser... but no way to easily link scenario, behat, mink and sahi to execute one scenario on all sahi instance without... launch behat/mink x times.\n@clemherreman, i'm not angry but hungry.\nthe capabilty to behat/mink (i don't know which of them) to execute scenario in multiple sessions (sahi sessions, multiple browsers, multiple vm with different OS, etc..) seems me logical and absolutly useful.\nIt's actually not possible, well i try to do differently, but automatically and in one launch\n. Encore une victoire de canard !!\nThanks to reevaluate this issue :)\nIf you my code to integrate to Mink, just ask me :)\n. I don't use Behat since 7 months and now, i saw that you add a freeze feature ?\nHave you add a easy way to execute a test on multiple sahi/selenium instance ?\n. ",
    "clemherreman": "I think events are here to add some specific code, usually to ensure that your tests a insulated : reloading a fresh database content, stop any network connection made by earlier tests, record and send the progress of the test suite to another application, and so on.\nAll these technical tasks are abstracted and moved away from the *.feature specially to keep them understandable by (almost) any non-technical reader.\nThis said, what is your point ? Why do you need to modify (like adding tags) to Scenarios on a @beforeFeature event ?\n. You have X scenarios, you want to test it on a Y browsers, it seems logical that you will get X_Y results, and not X results, as you have one result per scenario _and per browser*.\nIf your test suite is launched via CI (like jenkins), that shouldn't be a problem, if you run it manually, then a little .sh script that run every behat command would do the trick.\n. There's no need to get angry. You get an answer and ready-to-be-pasted code to a question you asked less than 24h ago, with explications on how you can do what you want to do - and what's even better - why you shouldn't do that your way, and yet, you're being rude.\nAct like you want, but that's neither nice nor constructive.\n. After some other tests, it seems the bug is only on my machine. I'm trying to reproduce it, but I'm a little stuck.\nSo far, someone else managed to run the test without problem. Difference of versions are Firefox version and PHP version.\nSee the stackoverflow related question (which is a clone of this issue).\nThis issue is not closed yet, but if I don't manage to reproduce it, it will be.\n. You're right, I do soon then.\nLe 12 nov. 2011 \u00e0 12:55, Konstantin Kudryashov\nreply@reply.github.com\na \u00e9crit :\n\nIf this issue is not closed still - move it to the Mink repository. It has nothing to do with Behat itself - i'm closing it here.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Behat/Behat/issues/68#issuecomment-2717189\n. Breaking news, I updated Sahi ot the last version, and bug is gone =)\n. Agreed. I just met the same issue, when I inserted some non-breakable space in a scenario indentation, and all I got was this message.\n. Not related to SF2.1 of SF2.0, as mine doesn't either.\n\nThe command seems to detect *.feature files correctly, but isn't using the FeatureContext classes that is located in the same directory of the features.\nExample of a Bundle directory :\nMyBundle/\n|\n-- Features/\n  |\n  -- Context/\n    |\n    -- FeatureContext.php <== Contains \"use MyBundleDictionnary;\" ans some step definitions\n  -- MyBundleDictionnary.php # Contains lots of step definitions\n  -- My_Feature.feature  # these are loaded, but steps in it aren't found, and marked as \"To be implemented\"\n  -- My_other.feature\nAny pointers ? :)\n. Until a better way is found, at @widop we use this little script (kudos to @tmartin)\n``` bash\n!/bin/bash\nbundles=( MyFirstBundle MySecondBundle Etc etc... )\nfor bundle in ${bundles[@]}\ndo\necho \"Testing ${bundle}...\"\n    bin/behat @${bundle} $*\ndone\n```\n. You're welcome. Tribute to @pborreli ^^\n. ",
    "YoungElPaso": "Hmm, interesting debate.  I think I understand the basis of both positions.  A shell script switching profiles seems a bit hackish but I understand the logic of NOT modifying a feature on the fly.  That said, the @beforeFeature hook and the addScenario method seem almost perfectly paired to do that.  I think being able to add a step to a scenario like 'I check this with X profile' and implementing something like a scenario outline wouldn't be too crazy, especially if the profile names were logical - ie 'chrome', 'phantomjs' etc.  It'd still be human readable.\n. @marmotz Did you ever achieve this? I've been looking into implementing the Symfony container interface for FeatureContext - to get the services container and modify the Gherkin service (unfreeze), but not having much luck.\n. ",
    "frankcarey": "I want to simply add an additional test step to the end of every scenario as a final check that there weren't any errors during the tests that were not apparent to the actual functionality, like php notices/warnings. Let's call it \"And I didn't generate any errors.\"\nWhat I was going to do was at the end of every scenario, check a specific url on the server that keeps a log of any php notices since it was last cleared. If the url returned empty, then the scenario would pass. If there were any errors/warnings/notices in the log then the final step would throw an exception.\nI also wanted to add a tag of @ignoreLogErrors where certain problematic scenarios could be ignored.\nI just tried using @BeforeScenario and @BeforeFeature in v2.5 to do this, but I now realize this method seems currently futile because of freeze(). Any other ideas on how to skin this cat?\n. @everzet Sure I can perform the actions at that point, but I certainly can't add a final stepNode there, can I ?  The reason for adding a step is that if I throw an exception in the hook, the whole test suite fails instead of having just one step or scenario fail and then progress. I think that in 3.0 this is changed, but any other ideas on implementing in 2.5?...  I'd settle for something like a Background step, but that runs at the end instead of the beginning.\n. For those finding this - Note that there is now a --strict option\n. Same issue here. I'm trying to run a function before every step in a scenario with a tag of @debug.\n/** @BeforeStep */\nhook works, but that will run for EVERY step in EVERY scenario. When I instead use \n   /** @BeforeStep @debug */\nThen the function doesn't run.\n. #476 is related where steps don't have access to scenarios and thus tags\n. This is what I have to get around the issue:\n``` Php\n/*\n   * @BeforeStep\n   /\n  public function debugStepsBefore(BeforeStepScope $scope)\n  {\n    // Tests tagged with @debug will perform each step and wait for [ENTER] to proceed.\n    if ($this->scenario->hasTag('debug')) {\n      $env = $scope->getEnvironment();\n      $drupalContext = $env->getContext('Drupal\\DrupalExtension\\Context\\DrupalContext');\n      $drupalContext->iPutABreakpoint();\n    }\n  }\n/*\n   * @BeforeScenario\n   /\n   public function registerScenario(BeforeScenarioScope $scope) {\n     // Scenario not usually available to steps, so we do ourselves.\n     // See issue \n     $this->scenario = $scope->getScenario();\n     //print  $this->scenario->getTitle();\n   }\n```\n. Some grepping in the codebase helped me find the answer:\nbin/behat --format-settings='{\"expand\": true}'\nLeaving this ticket open as it should really be added to CHANGES.md and documented in the docs.. I'd even make a case for making it the default honestly.\n. Related issue is that I'm trying to set these options by default in behat.yaml but the format-settings don't seem to work from there?\nThe latest docs only show the option to set a format, not it's options..\nhttp://docs.behat.org/en/latest/guides/6.profiles.html#formatters\nThe 2.5 docs show the full set of options:\nhttp://docs.behat.org/en/v2.5/guides/7.config.html#formatter\n. Any updates here? Was this intended?\n. Actually, this is broken for me as well. Running it like this works fine..\nbin/behat -c behat.docker.yml features/dataset.all.feature\nBut when I set line numbers it fails, I even tried a large range to see if I was off..\nbin/behat -c behat.docker.yml features/dataset.all.feature:1-100\nThis gives error:\n[Behat\\Testwork\\Tester\\Exception\\WrongPathsException]\n  No specifications found at path(s) `features/dataset.all.feature:1-100`.\nHere's a list of the versions I'm running..\nphp --version\nPHP 5.6.16-2+deb.sury.org~precise+1 (cli)\ncomposer version 1.0-dev (72cd6afdfce16f36a9fd786bc1b2f32b851e764f) 2015-12-28 17:35:19\n```\n$ composer show -i \nbehat/behat                     dev-master 2059cbe Scenario-oriented BDD framework for PHP 5.3\nbehat/gherkin                   v4.4.0             Gherkin DSL parser for PHP 5.3\nbehat/mink                      v1.7.0             Browser controller/emulator abstraction for PHP\nbehat/mink-browserkit-driver    v1.3.0             Symfony2 BrowserKit driver for Mink framework\nbehat/mink-extension            v2.1.0             Mink extension for Behat\nbehat/mink-goutte-driver        v1.2.0             Goutte driver for Mink framework\nbehat/mink-selenium2-driver     v1.3.0             Selenium2 (WebDriver) driver for Mink framework\nbehat/transliterator            v1.1.0             String transliterator\ndevinci/devinci-behat-extension dev-master bf79d2c Provides extra behat goodies.\ndrupal/drupal-driver            v1.1.3             A collection of reusable Drupal drivers\ndrupal/drupal-extension         v3.1.2             Drupal extension for Behat\nfabpot/goutte                   v3.1.2             A simple PHP Web Scraper\nguzzlehttp/guzzle               6.1.0              Guzzle is a PHP HTTP client library\nguzzlehttp/promises             1.0.3              Guzzle promises library\nguzzlehttp/psr7                 1.2.1              PSR-7 message implementation\ninstaclick/php-webdriver        1.4.3              PHP WebDriver for Selenium 2\nnucivic/dkanextension           dev-master c66e343 Provides base DKAN class for Drupal Extension\npsr/http-message                1.0                Common interface for HTTP messages\nsymfony/browser-kit             v2.7.6             Symfony BrowserKit Component\nsymfony/class-loader            v2.7.6             Symfony ClassLoader Component\nsymfony/config                  v2.7.6             Symfony Config Component\nsymfony/console                 v2.7.6             Symfony Console Component\nsymfony/css-selector            v2.7.6             Symfony CssSelector Component\nsymfony/dependency-injection    v2.7.6             Symfony DependencyInjection Component\nsymfony/dom-crawler             v2.7.6             Symfony DomCrawler Component\nsymfony/event-dispatcher        v2.7.6             Symfony EventDispatcher Component\nsymfony/filesystem              v2.7.6             Symfony Filesystem Component\nsymfony/process                 v2.7.6             Symfony Process Component\nsymfony/translation             v2.7.6             Symfony Translation Component\nsymfony/yaml                    v2.7.6             Symfony Yaml Component\n```\n. Still no dice .. Were does the line number processing happen? Tracing the code to Behat\\Behat\\Gherkin\\Specification\\Locator\\ FilesystemFeatureLocator::findFeatureFiles() which is looking if the entire string is an actual file or directory.\nNote that I'm using the dev-master branch of behat ( all my versions are posted above)\n. Note that this issue is specific to line numbers for us. We can run a specific file without any issue using our versions.\n. While I agree that behat should support setting more than one feature file, we have a workaround for circleCI that nicely handles parallelism. \nSee https://github.com/NuCivic/dkan/blob/7.x-1.x/test/circle-behat.sh\nYou all it like:\nbash circle-behat.sh some/folder some/file.feature some/other/folder\nand it should work.\nDownside is that if you are interested in creating junit output, each call overwrites the previous call when creating the default.xml file.\nSo, I think this is an important feature request. Behat should be able to handle this.\nRelated issue: https://github.com/Behat/Behat/issues/808\n. ",
    "cpintea": "Any news on the problem of adding a new scenario grammatically? What i want is to rerun the failed scenarios bunt in the same behat run in which they fail. Because in a significant number of time there are spurious failure (cause by network , cloud infrastructure) i need to rerun test in case of failure several time from code, handle the results and generate one report(with spurious fail information). One solution could be to re-inject failed scenarios in behate run (after feature maybe). or an intermediary hook in which you can add grammatically scenarios node that fail (object previous saved ). There is any solution to do this beside of do a framework to handle several behat runs save intermediary results and compile after you run a behat --rerun . ",
    "jakzal": "@cpintea this issue was closed as it's not a practice a testing framework should promote.\nAutomated tests should be repeatable. It should be possible to run them many times in a row and get exactly the same results. Otherwise there's no trust in the test suite and in extreme cases maintaining such test suite stops being beneficial. \nIn my experience, instead of trying to work around fragile tests I found it better to make them less fragile. This might require changing your testing strategy or appllication design.\nBtw, I don't encourage it, but a simple way to solve your problem (if I understood it correctly) is to try a to rerun failed tests a few times:\nbash\n n=0; until [ $n -ge 5 ]\n do\n      ./vendor/bin/behat --rerun && break\n      n=$[$n+1]\n done\nYou'd have to merge results in some way though.. Awesome work! :beers: \n. @Taluu read the Gone part again. Behat is multicontextual now. Besides, you can use traits.\n. :+1: I also needed to implement one for the page object extension: https://github.com/jakzal/BehatPageObjectExtension/blob/features/features/bootstrap/BehatRunnerContext.php\n. I'm not sure if I understand your question. I'm guessing you're looking for step argument transformations. Everything that comes from gherkin is a string. You can use transformations to convert it to a desired type.\nRelated docs:\n- Behat 2: http://docs.behat.org/guides/2.definitions.html#step-argument-transformations\n- Behat 3: http://behat.readthedocs.org/en/latest/guides/2.definitions.html#step-argument-transformations\n. Since it wasn't such a great idea after all, it was taken out of the core. Just use OO :)\nThe feature is provided as an extension tho: https://github.com/Behat/ChainedStepsExtension\n. Yept, but it's still there. If anyone feels the need he can contribute a fix.\n. @B2F which methods? Usually you need to access the Mink Session, in which case you need to extend the RawMinkContext class.\n. see #546\n. We're not really getting loads of questions on stackoverflow. I think it's managable at this point and there's no need for a new tag (as long as people specify the version they've used). I like the fact that I can simply filter by Behat. With a new tag I'd need to filter twice ;)\n. @bgruszka that's a default setting. You (or someone else) must have turned it off at some point.\n. nice :+1:\n. @everzet if I understood it correctly, there's some additional handling in an extension needed to cover:\nyaml\ndefault:\n  suites:\n    my_suite:\n      contexts:\n        - FeatureContext\n      extensions:\n        mink:\n          base_url: 'http://other.url.dev/app_test.php'\n  extensions:\n    Behat\\MinkExtension:\n      base_url: 'http://localhost/app_test.php'\n      sessions:\n        default:\n          symfony2: ~\nWouldn't it be better if the suite extensions section was merged with globally configured extensions section (suite taking precendence)? As far as I noticed that's what people starting with Behat 3 expect.\n. It makes the output 6 characters longer tops ;)\n. :+1: \n. I just went through a process of migrating a Behat v2 project to Behat v3, and I can tell you with full confidence that dependencies between contexts are bad. It quickly becomes a hard to maintain mess. I'm happy sub contexts feature was removed.\nMuch better option is to treat your context files as controllers and delegate all the work to other layers. You don't need to put everything in your context files, instead you can create other objects and inject them into your contexts. It's very easy with the extension system behat provides (only drawback is it's not very well documented yet). \nIn case of Mink, you can inject the Mink object into your context by implementing MinkAwareContext, or simply extending RawMinkContext. You could also use the page object extension, which focuses on making your web-related contexts clean.\nIn summary, don't access other context's methods, but use the same services in both.\nAlso, see my answer on stackoverflow for a similar question: http://stackoverflow.com/a/25877253/330267 \n. > Anyway, any hint on the session driver version problem ?\nWhat problem? :)\n. Do $this->getSession()->visit($this->locatePath('somepath')) so that base_url is included in the call. \n. Nice!\n. > some developers might prefer to use some html tags in their features to style up the result/report\nStyling reports by modifying features sounds terribly wrong. \n. Don't run your tests on production people :/\n. Tools you use (phantomjs/selenium/other similar) ARE SLOW, and will always be. That's their nature. It's not something anyone can fix. This is a Behat repo by the way. Your issue is more related to Mink.\nIf you want quick tests do not go through the user interface, but exercise your code directly (then, obviously have few integration or smoke tests going through the whole thing).\n. @jbenoit2011 indeed, fancy sending a PR?\n. You don't need those require_once statements if you install phpunit with composer.\n. > Do I have to add every context I might use to every suite?\nYes. Suites don't inherit from the default one like profiles do. \"default\" suite is actually just a name and has no special meaning. \n. Autoloading contexts would defeat the whole purpose of suites, as it's actually a feature we can load the same steps from different contexts for different suites. I suggest you re-think how you organise your contexts and suites. If configuration is an issue, there might be other problem here.\n. I'll only add you can add multiple --out options too:\nphp\n./bin/behat --format pretty --out std --format junit --out build\n. @legovaer make sure you're reading Behat3 docs, and not Behat2. Part of the problem is that Behat2 docs are shown by default on behat.org (ping @everzet).\nBehaviour described above is indeed the expected one. You can close this issue.\nIf you feel like there's something missing in the docs, please open an issue (or a PR) in the docs repo.\n. Indeed. This should work equally well. \n. getSynopsis() fix was already proposed in #749\n. Ah, just noticed you metnioned #749 yourself ;)\n. Symfony 2.0-2.2 are not supported for quite some time now. Perhaps it's time to drop support for them in Behat. ping @everzet \n. Looks like #656 refactoring would fix this issue, but is there a quick fix we could do before #656 is finished?\n. There's no concept of non-capturing groups in turnip syntax. The following should work just fine:\nphp\n/**\n * @Given /^some (?:thing)$/\n */\n. There's no migration document as far as I know. As long as you didn't rely on mink too much, the migration isnt't hard. \nOn a high level you'll need to:\n- update the configuration file (suites mentioned by you)\n- update your contexts to implement the Context interface instead of extending the base context class\n- instead of using sub-contexts, configure all of them in behat.yml (all contexts are equal now!)\n- write a cookbook on migration ;)\nI've done this in past and it wasn't really hard. However, my contexts were decoupled from mink and I didn't have too many dependencies between contexts.\nI'm happy to help you with specific issues that might arise as you proceed with the migration.\n. :+1:\n. Duplicate of #739. Fixed in 78edcc3495198976913ea4423e82f4b30fe32805 :)\n. @mozzymoz it's simpler then you think. Have a look at the docs. \nI also added an additional explanation to the deprecation message.\nIf you think there's still use for the context, open an issue at https://github.com/sensiolabs/BehatPageObjectExtension\n. Have you looked into how ./bin/behat --rerun is implemented yet?\n. ./bin/behat --config-reference will give a config reference for behat.yml:\n```\ndefault:\n    # ...\ntranslation:\n\n    # Sets output locale for the tester\n    locale:               en\n\n    # Sets fallback output locale for the tester\n    fallback_locale:      en\n\ngherkin_translations:  []\n\n# ...\n\n```\n. see #734\n. By the looks of your scenario you used Mink with the MinkExtension for Behat, so your problem is not really related to this repository. \nAnyway, you'd be probably better off asking on stackoverflow.com which is specially designed for Q/As. Github repositories are mostly monitored by people intersted in tool's development.\n. It doesn't feel right to introduce the fromString as a convention. It will encourage adding this kind of method to all value objects (since transformers will become so easy). In general I share @ciaranmcnulty's concerns expressed in #863. \nI really like option 3 from https://github.com/Behat/Behat/issues/863#issuecomment-235400924. Any reason why we couldn't support a variation of that in PHP 5.x? \n. :+1:\n. Anything from 2.1 is currently allowed. You can force the minimum version in your extension.\n. You need to specify --out for all --formats:\nbehat --no-colors --strict --format junit --out behat --format pretty --out std\n. In this particular scenario there's no --out option passed, so defaults are used. As soon as you pass a single --out you need to define it for all formats (as format, out is an array).\nPlease close this issue if you consider it resolved.\n. Could --snippets-for also accept a path to the context class? I often put my context classes in a namespace, which would require me to type a lot. A path can be autocompleted by shell, and since we're in a command line context while calling the command it feels more natural.\nEDIT: my suggestion is not needed if you take @ciaranmcnulty's suggestion below\n. > this is simpler for different context files as we wouldn't need to use static variables in files nor injecting context into other contexts\nI don't see how it's simpler. What I see is lots of WTF moments trying to trace which step this variable came from. \nYou don't need static variables btw.\n. @gorghoa I shouldn't debug to see where these things come from. This should be self-explanatory imo. Explicit.\n. > sharing between contexts highlights wrong choice of your context boundaries\nThis might be tricky. Usually there's something common between most scenarios. If we wanted to avoid sharing state between contexts completely, we'd need to put everything in a single context.\n. @everzet this will make them too big\n. Even scenarios within the same domain boundary might need different state stored between steps. If one scenario talks about a single thingy, while other scenario talks about collection of thingies I'll end up with two properties (used on different occasions). It's not an issue with two properties, but it will quickly grow.\nAnyway, coming back to this PR, as mentioned earlier I think it's better to keep things explicit and keep dependencies visible. It's easier to notice something is wrong with the way we organised our contexts. Therefore \ud83d\udc4e for adding anything like this to the core. \n. This is not really Behat related. You should probably report this to https://github.com/Behat/MinkExtension.\n. With vendor/bin/behat --profile=laravel you're running all suites (laravel and html) in the profile laravel. Perhaps you meant to run vendor/bin/behat --profile=laravel --suite=laravel ?\n. With hooks you can hook into behat's process: http://behat.readthedocs.io/en/latest/user_guide/context/hooks.html\nFor example, with the BeforeFeature hook you gain access to BeforeFeatureScope which eposes some feature details (title among other things). You can store this in your context for future use.\nLet me just add that if you feel you need this you're probably doing something hackish.\n. In past, when I didn't know parallelisation is a solution to the wrong problem, I used GNU parallel to execute my features in parallel. See http://zalas.eu/running-behat-in-parallel-with-selenium-grid/\nGoogle \"Behat parallel\" for more options and even some Behat extensions.\nAlternative to parallelisation is making your tests fast by avoiding going through the UI all the time (executing most of scenarios through your service layer, decoupled from the infrastructure like db).. @sakonachhoeurng by the way, I'm not sure if this is the right place to discuss this. This tracker is used for Behat development, and Behat doesn't have (or will have) native support for running tests in parallel (see https://github.com/Behat/Behat/issues/159#issuecomment-168751860).. Thanks for reporting. See https://github.com/Behat/docs/pull/116 for a fix.. @mi-haque this belongs to the MinkExtension. Additional capabilities can be specified under the extra_capabilities section. Only the most common capabilities are explicitly defined in the config.\nCan be closed here.. You've got wrong indentation level in the latest profile:\nlatest:\n  extensions:\n    Laracasts\\Behat:\n      env_path: .env.behat\n  Behat\\MinkExtension:\n    base_url: http://www.test.latest.customer-portal.wehost.asia\nMinkExtension should be under the extensions key:\nlatest:\n  extensions:\n    Laracasts\\Behat:\n      env_path: .env.behat\n    Behat\\MinkExtension:\n      base_url: http://www.test.latest.customer-portal.wehost.asia\nSame thing for the demo profile.. Can be closed.. @oabdelsamad since this is a duplicate can you close please? . Perhaps it was forgotten again.\nAs a workaround, you can create a phar file yourself:\nFirst, fetch Behat sources:\ngit clone https://github.com/Behat/Behat.git\ncd Behat/\ncomposer install\nNext, install the box project and build the phar:\ncurl -LSs https://box-project.github.io/box2/installer.php | php\n./box.phar build. @everzet I could have a look one weekend.. @everzet looks like it's already set up as it should be. The only thing I can currently think of is that the github api key is invalid or not exported.\nThe following command is able to generate a new key and store it securely inside .travis.yml:\ntravis setup releases --force\nIt will reformat your .travis.yml, but you could use it to generate the key, copy it, revert .travis.yml to its current state and add the key back.. I believe they're run in the order they're defined. Have a look at the LazyFeatureIterator and Behat\\Gherkin\\Parser classes.\nObviously, you shouldn't rely on the order of scenarios. This is most likely the reason why it's not documented.. This should also help with #1095. What you're trying to introduce is a new feature to the gherkin language. It's unlikely to be merged to this project as it would make it diverges from the official gherkin syntax (coming from cucumber). \nI think your best shot is to try to suggest it to cucumber, or maintain it as an extension. As Ciaran said, forking Behat is probably the worst choice because of maintenance overhead.. Behat has nothing to do with web interactions. You're probably looking for Mink or the MinkExtension for Behat.. Since this has nothing to do with Behat directly you'd be better off creating this ticket in Mink or MinkExtension.\nThere's nothing to do here.. Since you specified multiple --format options you need to pass the same number of --out options. Use std for standard output:\nvendor/bin/behat --format progress --out std --format junit --out var/test/behat-log-junit\nIt's not a bug. See the docs for full overview: http://behat.org/en/latest/user_guide/command_line_tool/formatting.html. AppVeyor issue seems to be caused by something else.. All green \ud83d\ude03 . Thanks :+1:\nFor now, the BC breaking change was reverted in Symfony. We're not sure if/how the issue it was trying to fix is going to be taken care of.. This is definitely not a Behat issue. Browser automation is implemented with Mink, MinkExtension, Selenium2Driver, and other libraries - like webdriver.  The exception seems to be coming from webdriver, but it might as well be caused by the way MinkExtension configures it. The best thing you could do is debug it a bit more, check the logs, and report it to a more appropriate repository.. Reading this post from over 6 yrs ago, the feature was intended. I think there's no other cucumber implementation that supports it though.. > maybe I could make a nice tool in the end\nWhat would be a good use case for such a tool? It seems you're trying to rewrite Behat with PHPUnit as a runner from what you describe.. \ud83d\udc4d . @ciaranmcnulty your suggestions seem to have worked \ud83c\udf7a . I didn't know appveyor provides php. Good catch!\nHowever, this will extend the build time from ~2.5min to ~17.5min. Is it worth it? We already run tests against all supported php versions on travis. Appveyor is ther just so we confirm there's no incompatibility issues with windows. Latest PHP version should be sufficient imo.. Looks good to me \ud83d\udc4d . Yes, there are issues with handling yaml in php, but I'd say that Symfony yaml component used in Behat handles the task pretty well. Extensions can provide validation and I don't really see how switching to json would make the config any more friendly (apart from satisfying personal preferences).\nI also don't see how json is more readable to yaml. If anything json brings more \"noise\".\nWhat new would json bring apart from the syntax, a BC break, and more code to maintain in Behat?\nHow would it improve the end user experience?\n. Caused by https://github.com/symfony/symfony/pull/25521\nChoices are key => value pairs. The key should be used as a default. It's documented this way too.. This would normally be solved by decoration, but we don't have an interface here ;)\nI'd indeed extract some private methods to make the public method more concise and readable, i.e.:\n```php\n     public function transformPatternToRegex($pattern)\n    {\n        if (!isset($this->patternToRegexpCache[$pattern])) {\n            $this->patternToRegexpCache[$pattern] = $this->transformPatternToRegexWithSupportedPolicy($pattern);\n        }\n    return $this->patternToRegexpCache[$pattern];\n}\n\nprivate function transformPatternToRegexWithSupportedPolicy(string $pattern): string\n{\n    foreach ($this->policies as $policy) {\n        if ($policy->supportsPattern($pattern)) {\n            return $policy->transformPatternToRegex($pattern);\n        }\n    }\n\n    throw new UnknownPatternException(sprintf('Can not find policy for a pattern `%s`.', $pattern), $pattern);\n}\n\n```. Sorry... I forgot that Behat still supports php 5, and my example used php 7 constructs. Also, I haven't tested the \"rafactoring\". Did it in my head ;). Using traits is equivalent to copy & paste. If you don't want your hook be called twice, don't include it twice. \nEither include your twite in one of the contexts, or put your hook in its own context.. see https://github.com/Behat/Behat/issues/1161#issuecomment-402939539. looks good to me :+1:. Sounds like a perfect job for tags.. > Tags don't quite do it on a sufficiently granular level \nWhat's insufficient in tags?\nCould you please describe your use case in more detail? . > Ok, I'm just finding this a little weird. I'm used to PHPUnit where I just tell it folder locations, and it figures out what classes to load.\nThe same way, Behat finds all your feature files automatically. In case of Behat though, there's an additional layer - step definitions in your context files. These can't be automatically loaded as there might be multiple definitions of each step.\nBehat lets you to group scenarios into suites. Each suite could use the same vocabulary (same steps) with different implementations. One use case for this is running the same scenarios on the domain level, against a web ui, and rest api (three suites, same steps, different implementations). This wouldn't be possible without explicit definitions.\nIf you don't like it or simply have a different use case, you could create a Behat extension that would load all the found context implementations (in your \"sub\" namespace).\n\nDo I need to define the contexts in config as the full namespace?\n\nYes.\n. @johnrobertporter so could this issue be closed?. Re #994. Should be fixed by #1171.. You seem to have missed the : after FeatureContext to indicate the list of arguments will follow:\nyaml\ndefault:\n    suites:\n        default:\n            contexts:\n                - FeatureContext:\n                     kernel: '@kernel'. > Whenever I run \"vendor/behat/behat/bin/behat\",\nis it the same if you run vendor/bin/behat ?. Behat is tested this way itself. It leverages the Symfony's Process component.. Have a look at https://github.com/bamarni/composer-bin-plugin. It aims to solve such dependency issues.. If you use the Symfony2Extension, than I vaguely remember the container you get in your features is not the same instance as used by your app.. Seems like you don't have PHP installed, and your operating system opens the file instead of executing it.. How about suggesting both?\nphp\n\"- use <info>--definitions l</info> or <info>-dl</info> to just list definition expressions.\"\n. This is probably not what we want here. It will always return 0 and point to None. This should potentially be a hard coded 1 as we already check if there's at least one context class above.. If it's desired to restrict the component to versions without this bug we should probably also add^2.8.33 and ^3.4.3.. It used to select the first context class from $contextClasses, which is the second element of $choices. The first choice is None, and that's not the default we want.. Making them synthetic was sufficient to make this particular problem go away, but you're probably right.. Updated.. ",
    "oleg-andreyev": "Changing steps at runtime could be useful, when you have quite large set (~4K) of e2e scenarios and run them in parallel, and to guarantee uniqueness for commons steps, like Given I have product with \"<url>\", there needs to be some way to modify steps at runtime (before actual scenario execution).. When we had one instance there were problems with random failures, so we've hooked into behat process and replacing \"special\" placeholder with unique value and we didn't had data uniqueness issue since.\nP.S. we no longer run our 4k scenarios on single instance. +1\n. ",
    "spolischook": "run all tests in parallel on one instance? any way it seems to be a crazy random fail idea.. @everzet can I throw SkippedException or something like that in hook to get skipped tests in the main report?. ``` bash\n...Bundle\\Features\\Context\\FeatureContext::iAmOnHomepage()\n16384: MinLength is deprecated since version 2.1 and will be removed in 2.3. Use Length instead. in vendor/symfony/symfony/src/Symfony/Component/Validator/Constraints/MinLength.php line 31\n```\nI have this error for any step, when i use default_session 'symfony2' on symfony2.2\n. Joseph you are great!!! Konstantin thanks for Behat - awesome tool!\nAll works fine!\n. I'm also have this issue. I need to create a report if something went wrong with Scenario/Scenario Outline, and it seems to be great if I have title of Scenario Outline to get more verbose report. . @everzet changes by https://github.com/higrow/Behat/commit/eabe3346303034ba9426b84b4791a660abfaf2b5 as clear as possible. Can I provide behat scenarios for this feature?. @guillaumeray it would be nice to have a CLI Controller in your extension. @higrow @everzet can you look at PR https://github.com/Behat/Behat/pull/1083. @wouterj please, take a look https://github.com/Behat/Behat/pull/1083. @TerjeBr here is possible solution https://github.com/oroinc/platform/tree/master/src/Oro/Bundle/TestFrameworkBundle/BehatStatisticExtension. @emulgeator you can create step to check this\n. Add PR with your own test cases to definitions_transformations.feature and make tests red.\nAlso I've just test \"34\" and it match to /^\".*\"$/ pattern, see http://rubular.com/r/OV07Y2g3Uu\n. @gimler You can create Subscriber and tag it by 'event_dispatcher.subscriber' tag name. Inject in it whatever you want. However fast search don't give me a result for formarter service. If you will found it please write example of your code here, I'm interested in it.\nHere some examples of subscriber FeatureIsolationSubscriber | config |  load configuration in Extension\n. @cve you can create subscriber make it as service and inject everything you want.\nSee for example:\n- Subscriber\n- service yml configuration\nKeep attention to tag event_dispatcher.subscriber\n. Sorry, there are right links:\n- Subscirber\n- service yml configuration\n. ``` php\n/*\n     * @var ObjectManager\n     /\n    static protected $em;\n/**\n * SymfonyDoctrineContext constructor.\n *\n * @param EntityManagerInterface $em\n */\npublic function __construct(EntityManagerInterface $em)\n{\n    self::em = $em;\n}\n\n```\nbut listener will be more clear and extendable.\n. @cve You need create (if you not have one) extension to load this configuration and also you need to load extension in behat.yml like:\nyml\ndefault:\n  extensions:\n    Acme\\DemoBundle\\Tests\\Behat\\MyExtension: ~\n. >  it makes sense to clear database before each scenario, not before feature.\n\nsecond scenario will get \"dirty\" application state\n\nClear database take a time that can be decreased if clear it before feature, not the scenario (yes, I know that it violates the BDD spec)\nNo problem with dirty state if your scenarios locate in one feature - you always can see what was happen before, in previous scenarios - this approach has some disadvantages by coupling scenarios, but also this can be more faster, especially on large db \n. you need to enable your xdebug for cli.\nIn Ubuntu it might be /etc/php5/cli/php.ini\n. Create test.php\nphp\n$hello = 'world';\necho $hello;\nAnd now set breakpoint and run it in console\nphp test.php\nis this work for you?\n. I guess no\n. what about context property, that can be set in one step and read in another? Or you mean something else?\n. @gorghoa method parameter is a magic.\nP.S.: In this case, I always quote \"Explicit is better than implicit.\"\n. We have the same needs, and implement common_contexts in own extension.\nSee\nhttps://github.com/orocrm/platform/blob/master/src/Oro/Bundle/TestFrameworkBundle/Resources/config/behat.yml.dist#L21\nhttps://github.com/orocrm/platform/blob/master/src/Oro/Bundle/TestFrameworkBundle/Behat/ServiceContainer/OroTestFrameworkExtension.php#L181\n. What goal you want to achieve?\n. I have similar task, but I don't care about scenario context https://github.com/orocrm/platform/blob/5797bf9fd64ad5a20f7ae2fc17a8c9ecf03101dc/src/Oro/Bundle/TestFrameworkBundle/Behat/Listener/StepDurationMeasureSubscriber.php\n. maybe you can use suites for this purpose?\n. I think problem in this approach that this is not readable for business person.\n. Reason - https://github.com/minkphp/MinkSelenium2Driver/blob/22c10858e5204ac8dfe85f2d0b576cdb04cd2ec3/src/Selenium2Driver.php#L679-L681\n. You have two ways:\n- Extend driver and redefine default behavior\n- Add custom method to element and fill it as you wish (you can set value without TAB or set plain value to input)\n. I discover that QuestionHelper has no any other dependencies except input and output, so I just use it in Controller. Thanks for your attention.\n. rename it to mySuie - is it works for you?\nOn Mon, Nov 28, 2016 at 11:56 AM, Mathieu Rochette <notifications@github.com\n\nwrote:\nwell, in behat.yml I have a suite named \"my-suite\" but when I run behat\n--suite=my-suite it tells me that my-suite is not found\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Behat/Behat/issues/968#issuecomment-263228937, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB4v2wHSBEUv-iL1g7ZnWU8J_7zYsxoiks5rCqU2gaJpZM4K9j5X\n.\n\n\n-- \nSerhii Polishchuk\nSymfony developer\na:   8072 Melrose Ave.\n      Los Angeles, CA 90046\nw:  www.oroinc.com\np:   +380 (93) 418 75 75\ne:   spolishchuk@oroinc.com spolishchuk@oroinc.com\ns:   serge_partner_ck\n. So next scenario is valid for you:\nWhen my suite name is  my-suite\nAnd I run in console:\nbehat --suite=my-suite\nThen I have an error:\nmy-suite is not found\nBut when my suite name is mySuite\nAnd I run in console:\nbehat --suite=mySuite\nThen my tests suite run without error\nOn Mon, Nov 28, 2016 at 12:27 PM, Mathieu Rochette <notifications@github.com\n\nwrote:\nyes it does work with mySuite too\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/Behat/Behat/issues/968#issuecomment-263235777, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB4v25M9OCz3U7FioD970Yu2YilAgculks5rCqx8gaJpZM4K9j5X\n.\n\n\n-- \nSerhii Polishchuk\nSymfony developer\na:   8072 Melrose Ave.\n      Los Angeles, CA 90046\nw:  www.oroinc.com\np:   +380 (93) 418 75 75\ne:   spolishchuk@oroinc.com spolishchuk@oroinc.com\ns:   serge_partner_ck\n. In RuntimeStepTester, when some users code runs it can throw any kind of errors.\nhttps://github.com/Behat/Behat/blob/a998d45dca71340d5dd79b60fe1b6f7c70ff08fe/src/Behat/Behat/Tester/Runtime/RuntimeStepTester.php#L73\nI think it's affect all behat users, cause some times error was happen and I can't recognize what feature was produce it.. This is not resolve my issue. When I use progress loader I can't recognize what feature was produce the exception.. gherkin\nGiven I am on \"Account Index\" page\nand then mach this to url or even to route. You can set null as dependency and then replace it in your Extension\nyml\nmy_own_service:\n  class: Namespace\\To\\Class\n  arguments:\n    - ~\nIn this way you should have null in constructor.\nIn Extension you can replace this argument according to some conditions:\nphp\npublic function process(ContainerBuilder $container)\n{\n$container\n  ->getDefinition('my_own_service')\n  ->replaceArgument(0, new Reference('dependecy_service'));\n}\nor just use setter injection\n. for UI tests with behat we are use simple bash script that create db and host for every worker and that run every testsuite in workers. For Travis-ci we are use only 2 workers, but locally I setup 4 workers and it works well - all my 4 cores was loaded by 100%.. > Is there a better way to make all of this work?\nYea! Just define contexts in your suite configuration. @forceedge01 Your link is right. You can define all contexts in configuration for each suite individually, but if you need something like autoload contexts we have some implementation in our project.\nThere are shared contexts https://git.io/vS3RX that will added to every autoloaded suite.\nThere is https://git.io/vS3RE extension method that create suite for each bundle that has at list one feature and add shared contexts with its own Feature context to it. It could be if MinkExtension is not installed. Just check it on Jenkins:\nshell\nls -l ./vendor/behat/mink-extension/src/Behat/MinkExtension/ServiceContainer/MinkExtension.php. It looks like you miss something. You need double check all configurations because it is no difference between direct call and behat call of application. First of all check base_url in behat.yml, it should be the same url as you calling while you notice that listener is calling.\nHow you recognize that listener not calling?. You can try discover FilterController to find the bug. Is it just for title customizing or it also will be a step implementation?. It's a great tool. Just sent it to my QA.. Double check application url in the browser address field . I think he means chained steps, @imakhil see https://github.com/Behat/Behat/issues/546 . @Ocramius as we talking with you today, this issue was resolved and can be closed.. > Then I can use them to do the cleanup in my Drupal.\nI don't believe that your approach  will work  \nI suggest to create db dump before suite and restore database from dump after each scenario.\nFor better performance use ramfs for your db.. Just look at the InitializedContextEnvironment.\nTry dump all existing contexts in your suite:\nphp\n/**\n * @BeforeScenario\n */\npublic function gatherContexts(BeforeScenarioScope $scope)\n{\n    $environment = $scope->getEnvironment();\n    var_dump($environment->getContextClasses());\n    exit;\n}. I guess behat try to find your feature from the path of your config. Try:\nbash\nbin/behat -c tests/src/Behat/behat.local.yml features/testing.feature:3\nI suggest use composer bin path, see https://getcomposer.org/doc/articles/vendor-binaries.md. Is this issue same for feature running? or it happens only for scenario run?. @avant1 Yep, but I need to do it in some hook or listener, without changes the code of my/other contexts. I have some bad thing in my Extension - scenario coupling.\nIf some of the step in current feature was failed I should skip all other steps, even in other scenarios.. @bwowk I don't want to skip all feature, but skip all steps in feature after failed step, even steps from other scenarios. You can tag method of context instead of step itself.. This is really easy to implement:\nController - https://github.com/oroinc/platform/blob/master/src/Oro/Bundle/TestFrameworkBundle/Behat/Cli/InteractiveExecutionController.php#L42\nSubscriber - https://github.com/oroinc/platform/blob/master/src/Oro/Bundle/TestFrameworkBundle/Behat/Listener/InteractiveExecutionSubscriber.php. Just investigate existing solution in Behat. Implementations of FormatterFactory is a good starting point.\nBe aware that for now only two outputs is supported - file and stdout, see https://github.com/Behat/Behat/issues/1088. Did you try this solution in practice? It's working, but method is not highlighting by IDE because of interface.\nAny way, it's working however is very dirty hack. It would be better to have meta context, like in behat 2 but it's not possible for now.. It's working in our case, see -  https://github.com/oroinc/platform/blob/master/src/Oro/Bundle/SecurityBundle/Tests/Behat/Context/ACLContext.php#L38-L42. :+1: . It looks like a bug\n\n. I'm not sure about create an issue, I guess you should investigate this better.\nBut any way you can see at minkphp/Mink at list in NodeElement. There are few methods that can be interested for you, e.g. selectOption. This issue can be closed as well. @Taluu In our case we are redistribute suites after it's configurations according to statistic of suite duration. So we are make auto generated suites that will execute approx same time, see OroBehatStatisticExtension. BC break removed.. For parallel execution we are using generating divided suites with auto generated names, like User_1 User_2 . Use uniqid is not a perfect deal, because it will litter the report directory. Use the build number should make a deal.. Also you can change the directory for output for each run and this is should resolve your issue. Move your issue to appropriate repository https://github.com/jhedstrom/drupalextension. While it's not a part of Gherkin specification nobody approve this to Behat, so you can implement it on your own extension, or as @jon-acker said you still have native workaround to implement that. . ChainedStepsExtension is the right place. You can take ownership on this extension and translate steps to english. But you should be ready to invest huge amount of time to it. This extension mimic feature that was in Behat v2, and can't be implemented in Behat v3 by technical reasons. You should discover the versions history, existing codebase and prepare the solution. But as I said before, it can be weeks or months of time.. See Oro\\Platform\\AvailableFeaturesController, I guess for scenarios it will be very similar.. Did you have namespaces? Use namespace for you contexts e.g. Acme\\DemoBundle\\Behat\\FeatureContext. I'm using namespaces and it's works perfect, if you have composer.json you can configure namespaces https://getcomposer.org/doc/04-schema.md#psr-4. Just distinguish context with beforesuite hook and include it in any suite you like.\n. What the version of Behat you have?\nIt's works, at list with \"behat/behat\": \"3.4.*\"\nSee https://github.com/oroinc/platform/blob/master/src/Oro/Bundle/SecurityBundle/Tests/Behat/Context/ACLContext.php#L41. There is no way to skip step on some condition, I have try it to implement but without success.\nIf you'll have any code to review will happy to do so.. I'm really interested in skip scenarios by condition, I can help with implementation or review this feature in behat.. This is actually what we talk about in issue https://github.com/Behat/Behat/issues/1051\nBut there is no way to do so. There should be KernelAwareContext I guess. It's not worked out of the box - something should happen for Behat that it aware about Kernel. . Behat used default paths to find out your features and contexts - it's ok for very simple use cases, however explicitly defined suites in behat.yml is preferred way. \nSo my suggestion is - add behat.yml configuration and define your suites where you should define Contexts(s) namespaces and feature(s) paths.. Symfony Kernel was reboot for each scenario, so if you set property in one scenario but get it in other one - you'll get default value. I guess you can find related code in Environment for EnvironmentHandler classes. fixed\n. fixed\n. @Taluu I know that this is Bc break, but it's more convenient to relay on interface. Fixed. Fixed. ",
    "tentacode": "thank you this is just what I needed\n. Oh wait, I might not have RTFM enought\n. For the record, correct use of cmd is :\nphp behat.phar -f=pretty,junit --out=,/home/somedir\n. Just my thought, we have had the same problem with timing but we just added custom step definitions like \nI wait 10 seconds until I see \"Page loaded\"\n. ",
    "davedevelopment": "My boss isn't that interested in the feature files, but wondered if he'd read a printout (or actually a print to PDF). \n. No probs, I wasn't aware of the BEHAT_ERROR_REPORTING flag, so hadn't thought that eventuality out.\n. @everzet I think the extension class still needs to override the load method, as the abstract extension class will look in it's own directory for the services.(yml|xml)?\n. I started an aruba clone some time ago, but haven't really touched it https://github.com/davedevelopment/montserrat\n. I should add that I confirmed the signal handler in SigintController is successfully registered, it just doesn't seem to fire.\n. I do have readline compiled in. I only glanced through the changelog for 7.0.0 and couldn't see anything relevant. I've just had another play and managed to get a fairly minimal test case together without behat, will carry on playing with it and see where I get.\n. It's something to do with the positioning of declare(ticks=1). Reading the php docs, I assumed moving it up to the bin/behat executable would at least get it working, but didn't. Moving in to the block of a step does make it work.\ncucumber\nFeature: test\n    Scenario: test\n        Given I wait for 5 seconds\n        Given I wait for 5 seconds\n        Given I wait for 5 seconds\n        Given I wait for 5 seconds\n        Given I wait for 5 seconds\n        Given I wait for 5 seconds\n``` php\n    /*\n     * @Given I wait for 5 seconds\n     /\n    public function iWait()\n    {\n        declare(ticks = 1); # this makes the magic happen, removing it forces a full run\n        $start = time();\n        while(time() < $start + 5) {\n            $a = 0; # tickable statement, php 7 would run the loop without ticking otherwise\n        }\n    }\n```\nI don't have any more time to dig in to this right now, but I guess there must be somewhere suitable for the declare directive to go.\n. Filed a bug report, will see what they say https://bugs.php.net/bug.php?id=71448\n. Probably not, I just put in what I knew would work, I get by on the front-end, but I'm best placed doing things people don't see :)\n. ",
    "web-dev": "Whoops, PR'ed against master again...\n. ",
    "fabiofabbrucci": "Thank you. Your anserws were very precious to me, to understand better the meaning of BDD versus a TDD.\nThank you very much. Bye bye :)\n. ",
    "Daniel15": "If the feature context is running code, can't you get the coverage of the code it's executing?\n. @stof In some situations, that would be okay. Using Mink is just one way to do testing with Behat. In my case, I'm directly interacting with PHP objects in the step definitions, so getting the code coverage of the step definitions would work fine. Specflow's (similar to Behat or Cucumber but for .NET) approach is to wrap a unit test around each scenario, so tests are just run with a regular unit test runner instead of a specific runner (like Behat), and standard code coverage tools can be used.\n. I don't quite follow what you're saying. What's the difference between a test like this:\n``` php\npublic function testBasicAddition()\n{\n    // Arrange / Given\n    $calculator = new Calculator();\n// Act / When\n$result = $calculator->add(1, 1);\n\n// Assert / Then\nAssert::AreEqual(2, $result);\n\n}\n```\nAnd a specification like this:\ngherkin\nScenario: Basic addition\n    Given a new calculator\n    When I add 1 and 1\n    Then the result should be 2\nThey're both doing the exact same test, except one is written as a scenario instead of a \"traditional\" unit test. The top one is probably what you'd do when using TDD, whereas the bottom one could be what you do when following BDD> In the end, they're testing the exact same thing. \nI don't care about code coverage as a number, I just think getting a coverage report is useful to determine whether my scenarios are comprehensive, and which scenarios I'm missing. From what I know, BDD essentially extends TDD by adding test cases written in a natural language. And guess what TDD involves? Unit testing. And guess what people often do with unit tests? Generate code coverage reports. I really don't think it's nonsense.\nAre you saying that Specflow is \"doing it wrong\" as well? They create unit tests based on the feature files (which could be used for unit tests, or functional tests, or whatever you want). And I'm sure that Cucumber promotes the same thing - They show writing of code that directly interacts with Ruby objects.\n. > In best case, you should use both techniques with or without specific tools for them. But using StoryBDD tool for SpecBDD or vise versa is worst idea you could ever make for your development flow.\nWhy? What disadvantages does using Behat, Specflow or Cucumber for SpecBDD have? I've seen lots of people do it before. \n. > In best case, you should use both techniques with or without specific tools for them. But using StoryBDD tool for SpecBDD or vise versa is worst idea you could ever make for your development flow.\nWhy? What disadvantages does using Behat, Specflow or Cucumber for SpecBDD have? I've seen lots of people do it before. \n. Thanks for all the information, @everzet and @MarcelloDuarte. I've learned some great things here, I appreciate it . I'll look into PHPSpec and NSpec. :)\nWith StoryBDD, isn't code coverage information about your business logic classes still somewhat useful, to know if you've missed a certain business rule in your tests (if you're writing tests for an existing codebase)?\n. ",
    "MarcelloDuarte": "StoryBDD is specifying how your feature works, SpecBDD is specifying how you classes will achieve that. SpecBDD frameworks are designed to achieve just that so, in principle, they should do that part better. A SpecBDD framework is much more like a unit test framework, mirroring you project class files, so it communicates better which part of the code you are testing. With a StoryBDD you want to know which features you are testing, and they are great for that.\nSo apart from improving the \"test as documentation\" part, using the right tool at each level also gives you a better design perspective. A StoryBDD framework implements the focus on the user part of BDD. That focus is carried down to your classes using A SpecBDD framework. The language is their to help you focus on what matters most. Unit Tests frameworks language put the focus on verification rather than specification, which leads to bad tests in the end, as in tests focused on structure, not behaviour. In Cucumber you can still use BDD expectations to keep the focus on behaviour, and I use them in Behat myself, even when I am writing feature focused step definitions - I have a SpecContext I use for that, so I can say e.g. $output->should->be('Chuck Norris') as opposed to $this->assertEquals($output, 'Chuck Norris'). But that's just really because I am a bit too crazy about BDD.\nBDD was created to teach developers putting their focus on what matters most while writing tests. In 1999 a ATDD framework was created (which is like a StoryBDD framework) by Ward Cunningham. Ward is a big part of the XP community, do you can see how important it is to have that. That didn't stop him using sUnit for his Smalltalk code. We are running the StoryBDD tool as well and that is telling us what is the next class to Spec.\n. @srcspider I too struggle to understand the value of code coverage (in general, but more so for Behat). Just why are you using Behat to hit code in the first place? Why not a unit test framework? Even if we accept that the metric is useful, it doesn't make any sense here, unless you are using this tool for something it was not designed to do in the first place.\nConsidering you are not using Behat to describe code, but to describe features (as it is designed to do), what value do you see having all the code lines used by the feature ticked green for \"code\" coverage. It is not even \"code\" coverage, is it? The code works within a context, not in ever context it is used. Even if you get 100% green lines you will not have any assurance of \"code\" or \"feature\" coverage with this feature request.\n. @srcspider yes, I noticed that. Let's just leave it then. BDD was created as a training tool, anyway. Should the guys start coming up with the code coverage discussion again, we can always instruct them with a better perspective.\n. @srcspider Yes! It is really cheap to implement this. There is nothing preventing a feature like that to be coded as an extension, like @everzet suggested. Plus Sebastian has nicely separated the code coverage component from PHPUnit, so it can be reused in situations like this. It's a really easy task to get an extension up and running for this. If someone has a use case for this, we can support with pointers on how to implement \u2013 probably better on IRC. In core we keep the tool a bit more focused, because it is also a goal of the BDD tools to educate users in the right way to do TDD.\n. @stof it would not be PhpSpec or PHPUnit collecting the code coverage data. xdebug does that. To use xdebug_start_code_coverage and xdebug_get_code_coverage in the same process that runs the application, the extension could interfere with the bootstrap of the application and make sure these methods decorate the run\n. @stof HTTP fake calls via framework drivers or a maybe just a separated cc collector component (not necessarily a Behat extension) configured to whitelist/blacklist directories that would be listening to the calls for the application \u2013 much like in the way of xdebug profiling with cache grind. Developers wouldn't have to touch the versioned files. This could be achieved this via configuration.\nI am not saying this is natural, just not that complex.\n. ",
    "AndyAtTogether": "I think code coverage on .feature files is very relevant. My reasoning is that i don't want code that i don't need. If i've got code that is uncovered then either it is redundant and should be removed or someone has had to write code that is required but is not driven by a .feature and that should be an indicator that its time to pause and have a re-think.\nAnyway thats my 2 pence worth on the subject, however it appears to be moot as using specflow i can't get coverage information on the code under test, only on the step definitions which other than for identifying redundant step definitions (which is suppose there may be some merit in) renders the coverage information pretty useless\n. I agree with you, and i'd like to know what code has been written that is \"not important for the business\", I think its a really useful sanity check to see what code has been driven by features and what code is not.\nHappily i can now do this to my hearts content using specflow and dotcover as now I'm able to get the coverage information i was looking for :-)\n. ",
    "nicopaez": "I agree with  AndyAtTogether.\n*.feature files are executable, that is the value they add, if there weren't executable, then we would continue writing Word-based specifications. So, when I run my .features the application code is invoked and it is important to know if any fragment of your code is not been invoked because I could be that the code is not required.\nIn Ruby I do this with Cucumber and SimpleCov.\n. @everzet how is Behat supposed to test them? It executes your code!!!\nAnd if that is your opinion,  then you should update Behat documentation:\nBehat is a tool that makes behavior driven development (BDD) possible. With BDD, you write human-readable stories that describe the behavior of your application. These stories can then be run as actual tests against your application. \n. Thanks!\n. ",
    "xczimi": "I understand why you are trying to enforce this, but.\nBDD stands for Behavior Driven Development not Business Driven Development. There are behaviors simple or complex on many different levels/tiers of all applications. \nWhen it comes to applications, business is the consumer, but all other tiers of software have consumers (other software, developers, etc) and they all depend on behavior of the underlying \"thing\" .\nGherkin allows us to describe these behaviors in English in a computer or solution agnostic way. This helps  understanding expectations on many levels.\nSo accepting that not for the primary reason behat was constructed, I'd argue that code coverage could be a  relevant property of a behat execution of tests described by gherkin.\n. ",
    "yuriteixeira": "Well, I respect and completely understand the points from you guys, but in my humble opinion, in some cases, like an API developed with Silex, that was previously covered with automated functional tests, Behat comes as a great alternative and code coverage feature would be a great addition. Let me try to explain myself:\nLook at this code: https://github.com/yuriteixeira/behat-silex. Instead of define how the API should behave with bloated functional tests, I just described how it should work with a natural language. \nSo, to test it, I just instantiate the Application Kernel and through \\Symfony\\BrowserKit\\Client, I run the API without do a real http request. Because of this, PHPUnit can generate a code coverage report and so Behat, since I do the same in my FeatureContext.php. \nDon't you think that at least on this case, when I want to test how an API behaves, code coverage couldn't be an interesting addition?\n. ",
    "rjmunro": "I was able to see what code had been tested using xcache's coverager feature. It can be easily configured to measure any php run on the server and log it to /tmp or wherever you like.\n. ",
    "SvenBrunk": "When you are testing a website for example, then there definitely is something you can use as basis for a coverage report. Not a code coverage report, but a website part coverage report. That is why the page coverage addon for selenium/firefox exists.\nAnd of course this could be useful for any other UI too. There always is something like an API between user and software that can be checked for coverage\n. That's great, thanks :) But this will generate a behat test code coverage report, right? :)\nTo achieve what I was looking for, you probably need auto_prepend_file and auto_append_file from PHP. I did not yet try it, but http://phpunit.de/manual/3.7/en/selenium.html contains a description for that (and selenium already seems to contain files for prepend, append and a helper script):\n\nPHPUnit_Extensions_SeleniumTestCase can collect code coverage information for tests run through Selenium:\nCopy PHPUnit/Extensions/SeleniumCommon/phpunit_coverage.php into your webserver's document root directory.\nIn your webserver's php.ini configuration file, configure PHPUnit/Extensions/SeleniumCommon/prepend.php and PHPUnit/Extensions/SeleniumCommon/append.php as the auto_prepend_file and auto_append_file, respectively.\nIn your test case class that extends PHPUnit_Extensions_SeleniumTestCase, use\nprotected $coverageScriptUrl = 'http://host/phpunit_coverage.php';\nto configure the URL for the phpunit_coverage.php script.\n. For BDD you could actually use a code coverage report the other way round.\nWhen you are finished with your behaviour tests and every requirement is covered... if you then find lines uncovered, they can most probably be removed. Else you have hidden requirements.\n. I don't even know if it would work as something else but an additional tool. But it would need some interface to the core I guess. And of course one to the system beeing tested. (Which isn't necessarily the same as the one running the tests after all.)\n. Exactly. For that I would even like to have it down to line coverage (or more path coverage, so I know what logical paths were taken and which not)\n. \n",
    "srcspider": "For anyone interested in seeing how the code coverage for their behat tests looks like here's a simple way to get it.\n\"behat/behat\": \"2.4@stable\",\n\"behat/mink-extension\": \"*\",\n\"behat/mink-goutte-driver\": \"*\",\n\"behat/mink-selenium2-driver\": \"*\",\n\"phpunit/php-code-coverage\": \">=1.2.10,<1.3.0\"\n``` php\n// $file = path to behat.yml\n// $coverage_out = filepath where you want to save coverage data\n// $some_irrelevant_dir = directory you want to blacklist\n// $some_relevant_dir = directory you want to whitelist\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder,\n    Symfony\\Component\\Console\\Input\\ArrayInput,\n    Symfony\\Component\\Console\\Output\\NullOutput;\nuse Behat\\Behat\\DependencyInjection\\BehatExtension,\n    Behat\\Behat\\DependencyInjection\\Configuration\\Loader;\n// ...\n$filter = new \\PHP_CodeCoverage_Filter();\n$filter->addDirectoryToBlacklist($some_irrelevant_dir);\n$filter->addDirectoryToWhitelist($some_relevant_dir);\n// ... more filters\n$coverage = new \\PHP_CodeCoverage(null, $filter);\n$coverage->start('Behat Coverage');\n$container = new ContainerBuilder();\n$loader  = new Loader($file);\n$configs = $loader->loadConfiguration('default');\n$basePath = \\realpath(\\dirname($file));\n$extension = new BehatExtension($basePath);\n$extension->load($configs, $container);\n$container->addObjectResource($extension);\n$container->compile();\n$container->get('behat.console.command')->run(new ArrayInput(['--ansi' => true]), new NullOutput());\n$coverage->stop();\n$writer = new \\PHP_CodeCoverage_Report_PHP;\n$writer->process($coverage, $coverage_out.'.cov');\n$writer = new \\PHP_CodeCoverage_Report_HTML;\n$writer->process($coverage, $coverage_out);\n```\nAnd err... in your vendor/behat/behat/src/Behat/Behat/Console/Processor/FormatProcessor comment out $input->getOption('verbose') (ie. lines 165, 167). There's obviously a better way but I don't use symphony and I'm too lazy to figure out a workaround to whatever's wrong with passing that argument the way it's documented you should (it may be behat quirk). If you actually need this beyond curiosity I'm sure you'll figure out how to get it to run with out the little hack in FormatProcessor.\n. @everzet \n\nThat said, I think risk of abusing this functionality is still too high to include it in the core!\n\nDoing nothing is still by far the worst option. \nAs long as you take control over the functionality you can clearly label it as  \"just a sanity check tool\" so there's very little risk of it getting out of hand or causing misinformation. People that would abuse it (for whatever reason), would either abuse something similar anyway or not do anything at all.\n. I know, I've tried for the purpose of using it as a metric. =P\nI'm just saying if the implementation were to come along it would be a\nmistake to not add it and moderate it.\nFor what it's worth code coverage with unit tests is just as brittle, even\nif you have everything green it doesn't mean you're actually testing every\npossible case, just passing though the code with cases that don't cause\nproblems; at least a code converge with behat would more easily be\nunderstood as just a \"sanity check\" since you don't make direct contact\nwith the implementation.\nOn Thu, Oct 24, 2013 at 3:24 PM, Christophe Coevoet \nnotifications@github.com wrote:\n\n@srcspider https://github.com/srcspider but this is not easy to\nimplement either. When specifying a web app with Behat, the code of the web\napp will often run separately (it is the case for all Mink drivers doing\nreal HTTP requests to a webserver, i.e. all except the symfony2 driver). So\ncollecting the code coverage in the Behat thread won't help (except for\ncleaning your FeatureContext from unused code).\nAnd collecting the code coverage in your app requires modifying its source\ncode, which cannot be done by Behat itself.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Behat/Behat/issues/92#issuecomment-26987533\n.\n. > I don\u2019t see how not adding and, especially, not moderating a functionality that most users don\u2019t need is a mistake :/\n\nThere's obviously some interest in the feature, and \"most users don't need\" is really subject to the problem that \"you don't really know you don't need something until you tried it\" especially with checking/debugging/etc tools. If everything in the world was so perfect we shouldn't need profilers and debuggers, but we do. There's also the issue of \"circumstances,\" if this \"feature\" helps even a little to produce better more reliable software I believe it's worth it.\nIf you don't want it that's that, my point with moderating was that a feature like this is likely to cause splits in the community, and while forks are cool, forks that are purely for the purpose of minor things like this that would obviously bother nobody that \"doesn't need them\" if they were in are just unnecessary splits in the community. Why do we need jslint vs jshint for example; we shouldn't.\nGit, as an example, has a ton of tools not all of which might be considered \"bare minimum,\" (in my opinion) and some of which are hidden away. Nobody seems to be bothered by their existence (assuming they are even aware of their existence), but I'm sure anyone who really needs them is thankful they are there.\n. @MarcelloDuarte I don't disagree with that view; I've pretty much expressed it several messages earlier.\n. @MarcelloDuarte it's hard to force a perspective on someone that is working under different circumstances to you. The loudest of us almost always point out the most idealistic circumstances, but that doesn't necessarily apply to all users. Some people have higher time constraints, work in smaller teams etc. Just like with choosing hardware there are different metrics and views. Personally even when I use code coverage I almost never look at it as more then a rough statistic (essentially no better then what you all are describing a behat coverage would be) that I use (among other things) to base a rough judgement on how stable/usable/etc my piece of code is. (I know that's now how everyone else does it; unless I'm mistaken a lot of people use it as a \"I'm done\" indicator.) Since for me it's just a statistic it's not like I have any \"forgone conclusions about it,\" if it ends up being useless at times that's perfectly fine, because it's really cheap to do (or at least would be with a no-extra-knobs implementation). \n. Any progress on the extention part?\n. Just recursively read up until you find a directory with a composer.json file then parse it and do the proper configuration.\nSimilar to how git searches up until it finds a .git directory.\n. I support the idea of non-critical failure. \nYou could then use behat to test if the environment is suited for running the application. Well \"good enough\" anyway.\nCurrently you can still use it like that, it just takes knowledge of the tests.\n. (what autoloader?)\n. I'm fairly sure everyone benefits from not repeating something over and over, both when reading and writing it. If anything the current state where everything would be repeated is only really readable by a developer since I can use tools like diff (which isn't exactly a great solution itself) where as a normal person would have to go though the same one several times because they can't exactly be sure it's different. \nIMHO, for the case in question, the non-dev people who would have an interest in reading it or writing it would feel this is disrespecting their time too. I'm fairly sure the language is far less effective when people literally hate it and have to allocate grotesque amounts of time with virtually no benefit, then if it had one extra sentence in it's rules.\n. ",
    "alwinmark": "I think the Point is, that using Behat for  the codecoverage is only useful if you don't do BDD or TDD. Because otherwise you create the tests before implementing the classes and therefore you should have a very high code coverage measuring the qualitiy of your behaviour or unittests. Behat would falsify that quality measurement.\nBut if you aren't using BDD or TDD you can reduce your effort trying to bring your Codecoverage to an high value, because you know, you are already testing certain lines.\nBut I also think Behat would make sense for testing Bugs and Edgecases as well. Especially for Bugs it would be nice creating the Gherkin description, implementing the Tests so the Bugreporter can see on the CI how far the bugfix allready is done.\nAnd the other thing are the Edgecases. When a developer sees an edgecase and extends the Featurestory with this Scenario the PO can review this decision easily and at least recognize them, which he wouldn't if they would be written in phpunit.\n. +1 I like that... especially this could be a good sanity check for the feature scenarios. If they only cover a small code, they are maybe not precise enough...\nVon Samsung Mobile gesendet\n-------- Urspr\u00fcngliche Nachricht --------\nVon: Marcello Duarte notifications@github.com \nDatum: 24.10.2013  17:51  (GMT+01:00) \nAn: Behat/Behat Behat@noreply.github.com \nCc: CansaSCityShuffle alwin@atk-solutions.de \nBetreff: Re: [Behat] Does Behat generate Code Coverage? (#92) \n@stof HTTP fake calls via framework drivers or a maybe just a separated cc collector component (not necessarily a Behat extension) configured to whitelist/blacklist directories that would be listening to the calls for the application \u2013 much like in the way of xdebug profiling with cache grind. Developers wouldn't have to touch the versioned files. This could be achieved this via configuration.\nI am not saying this is natural, just not that complex.\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "robocoder": "https://github.com/vipsoft/code-coverage-extension is a prototype.  (I'll add filtering and xcache coverager support later this week.)\nFeedback and PRs appreciated.\n. Thanks @stof.  I assumed it had to be Symfony-aware, but the confusion arises because our composer.json has:\n\"config\": {\n        \"bin-dir\": \"bin\"\n    },\n. I have some negative test cases in my .feature file to test step definitions in my custom sub context are throwing exceptions, e.g., AmbiguousException.\n. As an example, I have a step definition that takes an optional TableNode.\nIn the abnormal case, the step definition throws AmbiguousException if ($conditionA xor $conditionB) i.e., both or neither conditions must be satisfied.\n. Sorry, it looks like I wasn't clear.  @expectedException means the scenario expects a Behat exception.\nBut having looked at the Behat/Behat's features/ directory, it's evidently better to use:\nGiven a file named ...\n  When I run \"behat ...\"\n  Then it should fail\n  And the output should contain:\n    \"\"\"\n    ...\n    \"\"\"\n. It's the newlines.\nTry encoding any CR and LF in the value, e.g.,\n&#13; and &#10;\nrespectively.\n. @everzet does that mean the multirunner should still work if I override behat.console.command.class?\n. What's in your behat.yml file?\n(p.s. I'm also using the latest behat sources, and I ran 1024 iterations of your test feature using goutte, symfony2, and selenium2 drivers without a problem.)\n. Try running the latest version of VirtualBox.  I find it's been more stable on OSX with the more recent versions.  (I'm currently running Virtualbox 4.2.1 with Ubuntu 12.04 guest on OSX 10.7.5.)\n. No, the case I'm referring to would be multiple transformations of the same argument.  Pseudo-code:\n```\n/*\n * @Transform /.+/\n /\npublic function prependText($arg) {\n    return 'text' . $arg;\n}\n/*\n * @Transform /.+/\n /\npublic function appendText($arg) {\n    return $arg . '!';\n}\n/*\n * @Given /^I should see \"([^\"]+)\"$/\n /\npublic function shouldSee($arg) {\n    echo $arg . \"\\n\";\n}\n```\nIf I have Given I should see \"foo\", currently, behat would output:\nfoo!\nI'm proposing it return:\ntext: foo!\n. try:\n$command->setFeaturesPaths(preg_split(\"/\\r?\\n/\", trim(file_get_contents($file))));\n. ",
    "gggeek": "I will try to refrain from the test-purist vs. test-pragmatist approach discussion, but I definitely see some value in being able to get code coverage out of behat tests:\n- using only 1 testing framework instead of 2 or 3 has a lot of value, esp. when you have to teach all team members how to write tests, or when the set of configs to run your tests against is complex enough that you have to write your test-executor-framework on top of the chosen test-framework\n- even if believing strongly in code coverage is bad, looking at the reports as ballpark-figures can be enlightening: finding scenarios you forgot to write, changes between spec time and implementation time leading to huge chunks of dead code etc...\n- sometimes you might end up in a project where only behaviour tests have been written and not unit tests, for any reason outside of your control (lack of resources, anyone?)\n- when developing and testing a REST API, the diving line between unit test and functional test gets much thinner and you do not have selenium acting as a middleman. Sending to the API tested the magical cookie which starts xdebug code coverage and retrieving it for treatment is not so hard\nI short, I do not advocate adding it by default in behat, but I vote plus one for documenting how it is possible, or having a behat extension making it easier.\n. @stof thanks. It is not very clear from the docs if that only works for Sf, though, or if its more generic\n. I would second the ability to have inter-context communications.\nThe usecase is the following:\n- in the testsuite we have different Context classes. Some are related to the pages being tested (proper \"feature Contexts\"), some are more generic in nature (handling debug logs, saving screenshots, sending notifications, setting up environment etc). We might call them \"helper contexts\"\n- in fact helper contexts might not even be created as Contexts at all. The thing is, they often need to have some initialization/cleanup done at specific points of the execution process, and making them Contexts which use the Behat hooks via tagged methods is the easiest way to achieve this (maybe it could also be achieved by creating a behat extension and using directly Symfony events listeners? Even if it is, it sounds like a lot of work)\n- this results in the feature context needing to access the helper context to execute some stuff\nAt the moment the codebase resorts to making most methods in helper contexts static methods, and putting a huge amount of current-state information in a singleton class.\nBut that feels bad.\nInstead of making every context a singleton on its own, I was thinking of binding them to a context-pool via creation of an extension and letting the helper contexts expose an Interface, say \nphp\ninterface shareableContext\n    public function shareMe($callable)\n    {\n        $callable($this);\n    }\nThis might be in the end just a more convoluted way of doing what we do already with all our static methods...\nApropos PageObject: I am so far not convinced of its benefits. It seems overkill most of the time. Plus it does not directly address my needs.\nThe long story:\na) The tests I have seen written end up in feature steps which read given I test that the functionality X works, which removes imho all the advantages bdd has over say unit tests, as only the coder knows what is going on, and the product manager can not read nor write features\nb) the way the pageObject class itself works is a bit counterintuitive vs. the http navigation flow (dev can create a pageObject without navigating to it and viceversa)\nc) most tests end up split in 3 parts: the feature file, the context and the pageObject. This makes it hard to write and understand them\n. @rajeshtaneja  I will try to post a gist of the work I have done\n. Here's the gist https://gist.github.com/gggeek/f7a27006b9861ec841b9\nSorry if it is not fully usable as-is (you have to make a behat extension out of it, plus it does not contain examples of contexts sharing each other), but it should be understandable to people who grok behat\n. @stof I had found out that possibility, but did not go that way because I did not want to litter my behat.yml with a lot of contexts declared in every suite (in fact the tests I was given had many such 'supporting' contexts in each suite, and I tried to remove as many as possible).\nBut I might have missed something. Is it f.e. possible to declare some contexts only once in a way that they apply to each suite anyway?\n. @stof you are right. My comment was not meant as a NACK, rather as an explanation of the rationale behind the different approach I had taken, so fine with me with the docs approach.\nFor the record, the contexts I wanted to eliminate from behat.yml were context with purely 'support' functionality - I agree that for the common case you'd want communication to happen between contexts which are declared as part of a suite because they do fully 'belong' there.\n. Anything I can do here to help getting this merged, or are we just waiting for 3.1 to be released?\nI see scrutinizer complained, but it does not keep the results around for long enough...\n. +1 for merging different sets of settings into a profile - or to document how to achieve the same goal via some \"easy\" means (e.g. env vars or cli switches).\nIn my first usage of behat/mink/selenium I have multiple axes along which settings change, to decide where/how tests are run:\n- os-and-browser to use\n- local selenium2 server vs. browserstack\n- prod vs. test vs. integration webservers to test against\n- the web app itself is declined in N slightly different versions which could/should be tested independently (think as deployed to 40 different countries, each time with customizations)\nOf course not all combinations would make sense (eg. a mobile browser could be used to test fewer site-versions, or some os+browser would only be available on browserstack).\nIdeally I'd like the test code to be completely independent from the above permutations.\nEven if it proves to be impossible in the end, being able to avoid combinatorial explosion is a very valuable target.\n. I worked around this by having another php script generating behat.yml.\nNeither efficient nor clean. so +1 for this request\n. Also waiting for this eagerly :-)\n. @tPl0ch good idea. Will test it right now\n. @andrerom so far so good, but I only tested a simple case (one testsuite).\nI plan to do a more complex test today (running multiple suites in parallel and bringing the results back in a single jenkins job).\nI had to tweak a bit the composer.json, lying on version numbers, to get it working with my other dependencies: \"dev-formatter_junit_1 as 3.0.5\"\n. @andrerom seems to work as well with the Build+Flow+Test+Aggregator+Plugin plugin.\nOtoh I could not have aggregate test reports properly produced by plain 'matrix type' jobs (I would pin it on Jenkins rather than Behat tough)\n. You can pass the urls as parameters to your contexts:\n1. define them as arguments in the constructors of the context classes\n2. pass in the values via the behat.yml\n3. you might have to have your contexts extend minkcontext and override the function where urls to be visited are generated, to inject the two different hostnames\nAs for the 2 environments, you should be able to define 2 profiles in behat.yml: the default profile with all the settings, and the \"staging\" profile where you change just those urls\nIt should work, at least on v3, and as long as your different parameters/environments are just 4 and not  a full fledged matrix.\nIt is a bit of a lengthy process, I know. Not sure how to make it easier out of the box\n. Nevermind, found the bug in the external script.\nIt was building command X, echoing it to screen, then actually executing command Y...\nI must have been drunk\n. Can't wait to see it in stable release :-)\n. +1\n. ",
    "dr-fozzy": "I belive need to correct a mistakes, and not the symptoms... The syntax of Behat test is pretty easy. Otherwise, try http://www.phpsh.org/\n. In that context - I agree, such feature would be nice.\n. ",
    "grahamc": "Sure, the syntax is pretty easy, but minor things like a CSS selector being slightly wrong becomes tedious. All I'm saying is I think it would be a valuable feature to provide.\n. ",
    "alganet": "This could be very useful for testing javascript-heavy apps running on Selenium. For now, my team have been using rspec with pry just for this specific feature. We're developing those single-page apps that change the page DOM a lot.\nSelenium has its quirks. Sometimes it loses references to dynamically updated nodes and we need to come up with xpath/css selectors that avoid these problems. Having a console set up ready to test these assertions is very handy.\n. ",
    "dbollaer": "I have created part of the solution. Right now I still need to use methods, instead of gherkin language.\nSome idea's on how to fix this would be nice.\nHere is the first part of the code\nhttps://gist.github.com/dbollaer/4985370\nand here is an example on how to use it.\ngherkin\nGiven I am on the home page\nWhen I execute\nThen I should see \"my result\"\nWhen the program enters execute, I type my commands(interactively)\nLike: \nfollowLink;my page\npressButton;submit\nOn the end; I type \".\"\nAnd then it executes \"Then I should see \"my result\"\nThis way I don't have to restart selenium, when I am writing my script.\n. ",
    "lindsaymacvean": "How do I implement this into my feature context file, do I use a 'use' statement or should I change this into a class?\n. I put this trait in another file called InteractiveShell.php\nThen called it from my main FeatureContext.php file like so:\ninclude 'InteractiveShell.php';   \nclass WebContext extends MinkExtension  \n{  \n  use DevelopmentDictionary;  \n}\n. I am now confused how to use commands like the below from the interactive execute() shell:\n$page = $this->getSession()->getPage();  \n$this->visit('/admin/structure/taxonomy/organisational_unit/add');  \n.\nEssentially I want to pass the context of the parent class to the execute() method so that I can run mink extension commands.\n. ",
    "headrevision": "I know, but what I meant was to leave the chaining entirely in the feature description file - without any further logic in the context class.\n. Just imagine selecting a suggestion from an AJAX-driven Google-like query field with autocompleted suggestions. In that case the step When I select the first suggestion to input \"behaviour driv\" could be considered as a compound step constituted by the steps When I fill the query field with \"behaviour d\", When I press the arrow down key and When I press the enter key.\n. The problem is that I can only do that programmatically in the context class and not declaratively in the feature description file as I would like to do it. Yes, the programmatic way works well, but I think a declarative chaining could lead to a better understandability of the browser interaction conducted, eg. in the case of handling such complex form elements as I have exemplified. The thing is the understandability as perceived by non-developers who are only able to read and understand the steps but not the step definitions.\n. Well, you can consider low-level browser interactions (bringing focus to an element, typing, etc.) as internal implementation of a high-level browser interaction. But you can also consider (and use) them as atomic steps themselves. And you could leave that choice solely to the producer of the feature file if there were a purely declarative way to chain steps. Just a thought...\n. Imagine you have two people who work on the same feature file (let's call them users). One user thinks of interactions largely analog to browser events such as mouseOver, keyPress, etc. while the other user thinks of more abstract interactions like When I select the first suggestion to input \"behaviour driv\". In this case its not about implementation but about different abstraction levels of their scenarios that have to be unified (as it is one feature file). By doing that programmatically you do not make the (need for) unification discernible to them, what certainly is a disadvantage. Ok, you could agree on using a common abstraction level, but instead of two different users then think of legacy feature descriptions you have to bring together with newly written descriptions.\n. Ok, so why do you need step chaining at all?\n. So here one concrete motivation to express the compound step Given I am logged in descriptively in the feature file: \nImagine you have added a checkbox to your login form that is required to be checked in order to log in successfully. Now the run of a scenario containing this step fails. But as the user can read und understand (in this simple case) the involved steps, it is very likely the user can detect the cause for the failure without the support of a developer. And in the case there is a generic step for checking checkbox, the user can even fix the broken compound step.\n. @everzet: With your argumentation I just don't see the need for calling steps (instead of step definitions) in other step definitions if it is all about implementation. Why you do not rely solely on step definitions in the (sub)context class for that purpose?\n@stof: In practice \"users\" most likely do not have write access to the repository that holds feature file and context class. Thus they still need a developer to commit (and review) a fixed description. Let's just imagine the case the developer will say: \"Thank you for updating the scenario along with your change request to add a checkbox to the login form. It runs successfully, we can commit it.\" Why not strengthen the users' involvement in the BDD process that way? I think the philosophy of BDD/ATDD (opposed to TDD) is exactly about that.\n. @everzet: I agree that calling steps from step definitions facilitates reusability as you do not have to know the context class which includes a certain step definition. You have that functionality already as you have to match steps from the feature file with methods of the context classes. A likewise dynamic \"dispatching\" is feasible for step definition calls, too. Wouldn't that be nicer if you are actually interested in reusability of code instead of step matching?\n@everzet: We have elaborated two concrete examples meanwhile (Given I am logged in and When I select the first suggestion to input \"behaviour driv\"). While I argue that the chaining in both cases represents a decomposition of a step at a higher abstraction level, you argue that the chaining hides implementation details. I think both points of view are right. So I motivated my approach of descriptive chaining with a better understandability of low-level browser interaction (still representing real user actions), a stronger involvement of users in the BDD process (by not labeling them as incapable to understand decomposition), and limitations in practice (feature descriptions with varying abstraction levels). You can indeed refer to that as \"programming language for users\", after all Gherkin is a DSL, so why not extending it? What other examples I should provide if you boil down everything to \"implementation details\" without taking into account my reasoning?\n. OK, here are two scenarios that describe the generic behaviour of our Google-like query field:\nScenario: Trigger the receiving of suggestions to the input field's value\n  ...\n  When I bring the focus to input field \"query\"    # for triggering event\n  When I type \"behaviour driv\" in input field \"query\"\n  When I wait \"500\" ms    # wait for AJAX response\n  Then I should see the list of suggestions to the value of input field \"query\"\n\nScenario: Select a suggestion to the input field's value by mouse\n  ...\n  When I move over the first suggestion in the list of suggestions to the value of input field \"query\"    # for triggering event\n  When I click the first suggestion in the list of suggestions to the value of input field \"query\"\n  Then I should get redirected to another page\nThen there is another scenario in another feature file describing behaviour which incorporates that of the Google-like query field above. Thus, we can say that we are talking about behavior at another abstraction level:\nScenario Outline: Review item\n  ...\n  When I fill input field \"query\" with \"<incomplete_text>\"\n  When I select the first suggestion in the list of suggestions to the value of input field \"query\"\n  ...\n\nHere the step definitions to those steps at the higher abstraction level:\n/**\n * @When /^I fill input field \"([^\"]*)\" with \"([^\"]*)\"$/\n */\npublic function iFillInputField($id, $text)\n{\n    return array(\n        new When(\"I bring the focus to input field \\\"$id\\\"\"),\n        new When(\"I type \\\"$text\\\" in input field \\\"$id\\\"\")\n    );\n}\n\n/**\n * @When /^I select the first suggestion in the list of suggestions to the value of input field \"([^\"]*)\"$/\n */\npublic function iSelectFirstSuggestionToInputFieldValue($id)\n{\n    return array(\n        new When(\"I move over the first suggestion in the list of suggestions to the value of input field \\\"$id\\\"\"),\n        new When(\"I click the first suggestion in the list of suggestions to the value of input field \\\"$id\\\"\")\n    );\n}\nI didn't think about a concrete way of expressing step chaining declaratively. Spontaneously, I would propose the following scheme:\nCompound step: I fill input field \"<id>\" with \"<text>\"\n  When I bring the focus to input field \"<id>\"\n  When I type \"<text>\" in input field \"<id>\"\n\nCompound Step: I select the first suggestion in the list of suggestions to the value of input field \"<id>\"\n  When I move over the first suggestion in the list of suggestions to the value of input field \"<id>\"\n  When I click the first suggestion in the list of suggestions to the value of input field \"<id>\"\n. In the case of the scenarios concerned about low-level browser interaction, the user is an UX expert. He/she definitely thinks of such steps and extracts them from acceptance criteria (call it ATDD for now). In the case of the scenarios that incorporate that interaction, the user is an ordinary visitor of a website. As you can see, there are different roles and thus different domain languages, whereas the visitor's language is an abstraction of the UX expert's one. Don't you think that is a valid application of scenario-oriented BDD?\n. Sorry, but you got it wrong. BDD is definitely not limited to behaviour as perceived by end-users. Pretty much the same as a user story is not limited to end-users (otherwise you would call it end-user story, SCNR). Just consider that the autocompletion represents a feature itself for an UX expert. In that case the system in respect of BDD could be a set of reusable form elements and if you like it, you could call the UX expert \"end-user\" in this context.\nTo clarify that: I didn't say it is a good practice to relate business value to clients that are not your eventual end-users. But it is absolutely valid and common when writing both user stories and scenarios for BDD.\n. As I said, it is not the same feature. The one feature incorporates the other one. Likewise the business value of the end-user feature bases on that of the UX expert, but it's not the same. Yes, you have two separate user stories. Thus role consistency is not violated. You can relate both user stories to each other (actually you should do that), so why not facilitating that similarly in StoryBDD?\n. By using subcontexts it is already possible (and no unlikely) that you blend different roles / domain languages into each other. If you are really that strict about role consistency, you should discard that feature of Behat. :)\nNonetheless, the compound steps I talked about are self-explanatory. I just consider the decomposition as additional information for the reader. But he/she doesn't have to read it to understand the compound steps.\n. @stof Anyway you use steps in that case. And steps are expressed in a certain domain language and they belong to a certain role. Thus it is not unlikely that you mix all that unintentionally as long as you do not limit yourself to subcontexts that are only \"internal\". Instead of that, OOP ist a developer tool you can use for reusability (SCNR).\n. it does now: https://github.com/Behat/Gherkin/pull/14\n. appendant Gherkin PR: https://github.com/Behat/Gherkin/pull/15\n. I do not see why there should be no usefulness for a distinction between a failure and an error by definition. Don't you think the rationale why it was implemented in PHPUnit is not valid in the case of Behat too? What do you mean with \"different kind of problems\" in this respect?\nI agree you should not be restricted to a certain assertion framework. First, I would treat a \"failure step\" (a step that failed due to an assertion not fulfilled) as a refinement of a conventional failed step. Second, I would consider a generic way to recognize - independently from the framework - if a step failed due to an assertion not fulfilled or due to an error. Nonetheless I would implement the recognition only for PHPUnit by default. Imagine you have one failed step and one failure step when running a feature. In the case you use another framework than PHPUnit, you get \"2 failed steps\". In the case you use PHPUnit, you get \"2 failed steps (1 failure step)\".\n. @stof I experienced that a customer (being not even aware of xUnit principles of course) wanted to distinguish between a kind of these two things. There were components from a third-party website embedded in the website under test. The customer knew that the third-party site malfunctions from time to time (due to a time out). He asked for a distinction between the case the third-party site malfunctions from the case the embedding itself is broken. The first case can hardly be eliminated from the perspective of the customer. But it is a failure that is to expect and thus pretty much identical to xUnit's notion of a failure.\nBTW, xUnit's distinction between error and failure has nothing to do with black-box testing. Apply an assertion method - potentially triggering a failure - on the return value of a method of the SUT. That is pure white-box testing so far, isn't it?\n. @everzet It is not about low-level white-box testing, after all the customer asked for that distinction and the third-party components are clearly discernible as such by the customer / the website visitor. As well as a fine-grained output in the form of a distinction between error and failure is not prescribed for xUnit by definition, it is not forbidden for scenario-oriented BDD by definition.\n. @everzet FYI: I have implemented it in the form of custom formatters. See https://github.com/headrevision/Behat/tree/falsesteps (only PHPUnit is supported).\n. @everzet I changed the namespace from Headrevision to Behat\\CommonFormatters, can you just create a repository for that namespace by yourself? Thus i can fork it.\n. @everzet FYI: I have created a CommonFormatters repository by my own now. And I have put the Formatters mentioned above and some others there. Feel free to fork: https://github.com/headrevision/CommonFormatters\nThough, I have also written a \"unit test\" for each formatter (eg. https://github.com/headrevision/Behat/blob/csvstatistics/features/closures/csv_statistics.feature). I don't know where to put those in this repository.\n. @everzet Do you mean to add it to the default formatters (Behat\\Behat\\Formatter)?\n. see https://github.com/Behat/Behat/pull/122\n. I don't like it either. :) What's about context_base_url? Actually the source of a context class (not of a specific method) is linked to.\n. It is assumed that what you append to the base URL is identical to a valid path relative to the bootstrap directory which is specified in the config. As you can only specifiy one bootstrap dir per profile, there are no different directories, right?\n. @stof there should be no problem with autoloaded classes as long as they are in the directory specified by base_path or in a subdirectory of it\n. It should be ready now. :)\n. OK, should be ready now. :)\n. conflict-free now\n. @everzet I just don't feel comfortable providing some Behat\\CommonFormatters that rely on additional template files by default. Alternatively you have to rewrite the entire HTML included in the HtmlFormatter class (as it is the case so far for the CommonFormatters).\n. Here is my attempt to implement it: https://github.com/headrevision/Behat/blob/htmlexpanded/src/Behat/Behat/Formatter/HtmlFormatter.php\nJust try it via behat -f html features/SOME_SCENARIO_OUTLINES.feature --expand\n. Should be completed now.\n. fixed in PR #128\n. Might be the same for pending steps?\n. @everzet Is there a documentation or howto for doing that?\n. I agree, you can hardly include every single extension available for Behat as a suggestion in composer. I shamelessly copied the installation instructions from that site. So yes, why not mention the extension there? :) \nBesides, can you complete the setup of Travis CI for https://github.com/Behat/CommonFormatters? I cannot do that as I do not own the repo.\n. @everzet created doc as well as phar build script (behat.org link to phar file is a deadlink so far)\n. @everzet What happened to that?\n. @everzet Yes.\n. OK\n. By output I mean the output of Behat, which runs on a server. Of course you could use an SSH app to run Behat and watch its output. But I would like to display the output in a more accessible way than that.\n. Finally I did it by my own. It is still in an early stage, but I will work on it:\nhttps://github.com/headrevision/BehatReporter\n@everzet What do you think about it?\n. @everzet Really great work! Will there be a page on Github or the Behat website where you can see which Behat extension / open-source project has been updated to be compatible with v3?\n. the path appended to remote_base_url is retrieved absolutely by reflection while it is assumed that base_path (removed from absolute path by relativizePathsInString()) is the \"local\" equivalent to remote_base_url\n. ",
    "irs": "Sorry, I will move it to Mink.\n. ",
    "chrisemerson": "This was 2 years ago, and STILL the website claims there is a --colors option! http://docs.behat.org/guides/6.cli.html\nI've spent ages trying to work this out, grrr\n. The transformRegex, transformToken etc methods within RepositoryArgumentTransformer currently return null when they can't handle the current type of transform - perhaps they should be throwing exceptions instead of giving null a special meaning? That would make it a lot easier to handle.\n. Awesome, thanks!\n. Or use a trait\n. I see, ignore me then! Sorry, didn't realise that was a requirement.\n. Now just have to wait for a new tagged stable version with it in :P\n. It's much easier to be more restrictive initially than to bring in restrictions later. Making the class final (if there are no abstract elements to it) means that it can't be overridden, which helps towards the overall best practice of favouring composition over inheritance, as I understand it anyway.\n. ",
    "Furizaa": "Sadly our problems are much deeper. For example: We use NewRelic on our page that sends some metrics at dom-ready to the NewRelic server by loading a pixel and pushing the metrics by appending them to the GET request. For unknown reasons thou, some times (like one of three) the server won't send a reply. So the page loads until the Selenium timeout occurs.\nSame problems with Banners from Adservers that have their 5 minutes, polluting out Jenkins result in the end. \n. Made the changes from the review except the i18n stuff.\n. Fixed.\nHave you guys any concerns if I add an event that gets fired on a retry-step attempt? @stof @everzet\n. @stof Thought about that too and for me it would make sense. But I fear that a implementation for this wouldn't be so easy.\n. Squash'd all last commits together. Will try to change it to --retry-scenario now.\n. So - I recently squashed it all together. retry-scenario works now. A few thoughts:\n- I have added tests for normal scenarios as well as scenarios with a background and outline. All tests are in the retry_scenario.feature file wich feels a little bit bloated.\n- After a step fails but is flagged for a retry attempt, the remaining tests in this scenario will also be marked as unstable instead of skipped. Not sure if this is the right direction - also it bloats the code up a few lines.\n- Imagine a scenario with a couple of steps. When a step fails the preceding ones are still counted as passed and the failing plus the remaining ones are counted as unstable. So far so good. But now the scenario will run again and all steps are counted again. For me this is a major concern because it gives you an inconsistent number of scenarios/steps in the report - but I have no idea how this could be fixed in a clean manner.\n. @everzet I still think it would be a nice feature but I fully understand your point. I learned a lot about the Symfony components (wich are awesome - just sayin') so it wasn't all in vain. So no hard feelings if you close the request. ;)\n. I'm not involved in the project anymore - but sure, I'm still interested in doing this if this is considered an good addition to Behat. For the project I've worked on it won't be necessary anymore though.\n. It should work that way:\nbehat --format \"pretty,junit\" --out \",build/logs/\" features\nIts also documented here http://docs.behat.org/guides/6.cli.html (scroll down to formatter option) :)\nWe also output HTML via \nbehat --format \"pretty,junit,html\" --out \",build/logs/,build/report.html\" features\nand pass that throu the html publisher plugin to get a nice report.\n. This wont affect functionality. But you're right - I will change that for the sake of readability.\n. Is there a other way to get this in then?\nEdit The readme.md states to edit the file to contribute to translations.\n. This was intended but after further thought I guess I won't them to fail in strict mode. And yeah I also will use the class constants :)\n. ",
    "eliza411": "We're running into issues with timeouts that happen occasionally because of performance issues for the Drupal test environment that we don't really have control to tune. @everzet I'm wondering if we can contact you as \"still interested\" :) \n. ",
    "MPV": "Sorry about the long delay, we recently upgraded Behat and I just remembered this fix. \nUnfortunately it doesn't seem to work - nothing changed in Jenkins. \nJudging by this answer, this is how it probably should be implemented:\nhttp://stackoverflow.com/questions/8697923/junit-xml-packages-in-hudson/8708238#8708238\n. Works like a charm. \nThanks!\n. Hmm... I see what you mean. \nThe idea with marking scenarios or features with separate tags is maybe not the best option for us, since we (currently at least) mix \"steps that do/test something\" and \"steps that are empty\" (since we can't do anything with them). \nExamples of these steps might be CSS styling, positioning, color \u2013 things that we've decided not to test with Mink (yet), but we still want to have in our features since they are a part of the customer requirements. \n. Ah, you're right. When I added\n--lang en\n...it worked all fine. Thanks! (I'll maybe add Swedish translations later down the line)\nAnother question: \nMy team is distributed (Sweden, England and Serbia) so we will probably have different system locales. \nIs there a way to configure a specific locale in the behat.yml file? \n. Perfect! The behat.yml setting worked flawlessly. \n. Hi, \nI can't even install Behat v2.3.5 with PEAR:\n$ sudo pear list -c pear.behat.org\nInstalled packages, channel pear.behat.org:\n===========================================\nPackage Version State\nbehat   2.3.4   stable\ngherkin 2.2.0   stable\nmink    1.3.3   stable\n$ sudo pear remote-list -c behat\nChannel behat Available packages:\n=================================\nPackage Version\nbehat   2.3.5\ngherkin 2.2.1\nmink    1.3.3\n$ sudo pear install pear.behat.org/behat-2.3.5  \nbehat/behat is not compatible with installed package \"behat/gherkin\" version 2.2.0\nNo valid packages found\ninstall failed\n$ sudo pear install pear.behat.org/gherkin-2.2.1\ndownloading gherkin-2.2.1.tgz ...\nStarting to download gherkin-2.2.1.tgz (154,377 bytes)\n.......................done: 154,377 bytes\ninstall ok: channel://pear.behat.org/gherkin-2.2.1\n$ sudo pear install pear.behat.org/behat-2.3.5  \nbehat/behat requires package \"behat/gherkin\" (version >= 2.1.1, version <= 2.2.0, excluded versions: 2.2.0), installed version is 2.2.1\nNo valid packages found\ninstall failed\n. It works fine if you use \"--ignore-errors\" though (also no errors when running Behat):\n$ sudo pear install --ignore-errors pear.behat.org/behat-2.3.5\nbehat/behat requires package \"behat/gherkin\" (version >= 2.1.1, version <= 2.2.0, excluded versions: 2.2.0), installed version is 2.2.1\ndownloading behat-2.3.5.tgz ...\nStarting to download behat-2.3.5.tgz (145,614 bytes)\n..........................done: 145,614 bytes\ninstall ok: channel://pear.behat.org/behat-2.3.5\n$ sudo pear list -c behat\nInstalled packages, channel pear.behat.org:\n===========================================\nPackage Version State\nbehat   2.3.5   stable\ngherkin 2.2.1   stable\nmink    1.3.3   stable\n. Interesting topic. \nI ran across parallel_tests for Cucumber the other day that seems to do something similar for the Ruby people. \nMaybe you've already seen it \u2013\u00a0otherwise it could serve as some inspiration?\n. +1\n. Here are the exact versions used, as per \"bin/composer.phar show\":\ninstalled:\n  alexandresalome/php-selenium [1.0.1] : PHP Library for Selenium\n  behat/behat [v2.4.0] : Scenario-oriented BDD framework for PHP 5.3\n  behat/gherkin [v2.2.5] : Gherkin DSL parser for PHP 5.3\n  behat/mink [v1.4.0] : Web acceptance testing framework for PHP 5.3\n  behat/mink-extension [v1.0.0] : Mink extension for Behat\n  behat/mink-selenium-driver [v1.0.1] : Selenium driver for Mink framework\n  behat/mink-selenium2-driver [v1.0.2] : Selenium2 (WebDriver) driver for Mink framework\n  instaclick/php-webdriver [v1.0.7] : PHP WebDriver for Selenium 2\n  phpunit/php-code-coverage [1.2.2] : Library that provides collection, processing, and rendering functionality for PHP code coverage information.\n  phpunit/php-file-iterator [1.3.2] : FilterIterator implementation that filters files based on a list of suffixes.\n  phpunit/php-text-template [1.1.2] : Simple template engine.\n  phpunit/php-timer [1.0.3] : Utility class for timing\n  phpunit/php-token-stream [1.1.4] : Wrapper around PHP's tokenizer extension.\n  phpunit/phpunit [3.7.0] : The PHP Unit Testing framework.\n  phpunit/phpunit-mock-objects [1.2.0] : Mock Object library for PHPUnit\n  symfony/config [v2.1.2] : Symfony Config Component\n  symfony/console [v2.1.2] : Symfony Console Component\n  symfony/css-selector [v2.1.2] : Symfony CssSelector Component\n  symfony/dependency-injection [v2.1.2] : Symfony DependencyInjection Component\n  symfony/dom-crawler [v2.1.2] : Symfony DomCrawler Component\n  symfony/event-dispatcher [v2.1.2] : Symfony EventDispatcher Component\n  symfony/finder [v2.1.2] : Symfony Finder Component\n  symfony/translation [v2.1.2] : Symfony Translation Component\n  symfony/yaml [v2.1.2] : Symfony Yaml Component\n. I just realised that we were testing with 2.4.0 when there is already 2.4.4 available!\nI tried with 2.4.4 and this problem was solved!\n```\n$ bin/composer.phar update\nLoading composer repositories with package information\nUpdating dependencies\n  - Removing behat/behat (v2.4.0)\n  - Installing behat/behat (v2.4.4)\n    Downloading: 100%         \nWriting lock file\nGenerating autoload files\n$ bin/behat --profile gotutvvm --config tests/acceptance/behat.yml --out build/logs/ --format junit --tags ~@wip&&~@unstable&&~@manual tests/acceptance/features/\n[... (not the same error any more) ...]\n```\n. @stof Sure. \nMy behat.yml file:\ndefault:\n  paths:\n    features: '%behat.paths.base%/features/'\n    bootstrap: '%behat.paths.base%/context/'\n  formatter:\n    parameters:\n      language: 'en'      \n  extensions:\n    Behat\\MinkExtension\\Extension:\n      default_session: selenium\n      javascript_session: selenium\n      selenium:\n        host: localhost\n        port: 4444\n      browser_name: googlechrome\n      base_url: http://my_url_here/\n. Any ideas?\n. Hi, \nSorry for the delay. \nI have now checked and I can confirm that it works (i.e. that -f html generates html output). \nJust for reference, here's an excerpt of my composer.json and composer.lock files to indicate the behat version i was using:\n\"behat/behat\": \"2.4.*@dev\",\n[...]\n            \"name\": \"behat/behat\",\n            \"version\": \"dev-develop\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/Behat/Behat.git\",\n                \"reference\": \"4c0d81f8507aebf9cceaac2ad8dd1fdb8481ada4\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/Behat/Behat/zipball/4c0d81f8507aebf9cceaac2ad8dd1fdb8481ada4\",\n                \"reference\": \"4c0d81f8507aebf9cceaac2ad8dd1fdb8481ada4\",\n                \"shasum\": \"\"\n            },\n[...]\n. +1\n. I think this is a good idea. In my case though, I would rather actually see the entire scenario that failed in the jUnit output. Most times the scenario text would help more than just getting the exception stacktrace. \nWould this be possible to do?\n. I understand what you mean. Just feels like we're getting an awful lot of\ntags. :)\n(We have quite a few already)\nAnd one scenario could be affected by several bugs and stories.\nBut maybe not important enough to warrant a change? ;)\n.\n. This is my first pull request to Behat. I hope it's alright? \nI've updated both the feature files and the implementation so that they match, and tested that it works. \n. On this topic:\n\nstof:\nThis logic is wrong. Ids have to be unique on the page. but feature names and scenario names are not unique\n\n\n\nMPV:\nOh yes, that's right!\nWould you have any suggestion on the solution?\nMy first ideas was one of the following:\n- micro/millisecond timestamp of generation\n- random number/hash\n- internal counter\n\nAny new ideas? \nWe can cross off the timestamp idea (as per the previos comment by @stof). \nI think we can also cross of the random idea, since it can't be tested (i.e. can't match it's feature scenarios). \nDoes that leave us with an internal counter? Any other ideas? \n. @pluseg / @everzet / @stof: Was this added into Behat?. +1 for merging this pull request.\n. Yes, of course, this should be in Mink. My bad, thanks for reminding me. \nI have re-posted it there instead: https://github.com/Behat/Mink/issues/606\n. That's much better! Will do.\n. Thanks. It tried using spaces (usually have tabs in my projects) but it appears my editor broke it. Will amend. \n. Oh yes, that's right! \nWould you have any suggestion on the solution? \nMy first ideas was one of the following:\n- micro/millisecond timestamp of generation \n- random number/hash\n- internal counter\n. ",
    "sanpii": "Thank's for your answer.\nI'm not familiar with Junit and this XSD is the only one method what I found for debugging :/\nI'm willing to try something else.\n. Ok, with the create-test-report target, it works fine!\nhttp://lestbddphp.wordpress.com/2012/01/03/behat-with-sauce-labs-and-jenkins/\n. This is for an installation on an integration server. For me, composer is a project oriented tool and pear system oriented.\nIs it a bad point of view?\n. > It's simpler, more clean and stable (at least for Behat).\nI like these arguments :) Have you a documentation about this usage?\n. Very nice, thank's :)\n. http://instablogg.com/g9eTJcP\nAdding a custom formatter to Behat\nAdding a custom formatter to behat is fairly easy, but getting it into the code was a little confusing. Once your formatter class is completed and namespaced up, add an entry to the dependency injection config:\n<service id=\"behat.formatter.dispatcher.custom\" class=\"%behat.formatter.dispatcher.class%\">\n     <argument>Behat\\Behat\\Formatter\\Custom\\Custom</argument>\n     <argument>custom</argument>\n    <argument>Internal custom formatter</argument>\n    <tag name=\"behat.formatter.dispatcher\" />\n</service>\nBobs your uncle. This can now be run as a proper option in the CLI:\n$ bin/behat --format custom\n@SkyBetDaly\n. ",
    "jubianchi": "Thank you for the quick fix ;)\n. ",
    "Mikalai-Kabzar": "@everzet can I throw SkippedException or something like that in hook to get skipped tests in the main report?\nI have the same question.\nI want to integrate Behat with EPAM Report portal. How can I handle skipped tests?. ",
    "AsaAyers": "Thanks. Looking at the --help now I see the \"tag filter expression\" reference. In case anyone else finds this issue before finding the documentation I missed, I found some info on expressions at http://docs.behat.org/guides/6.cli.html#gherkin-filters. It doesn't reference the ~ operator though.\n. ",
    "joshribakoff": "I'm following the tutorial here: http://docs.behat.org/quick_intro.html, and getting this error.\n```\n$ vendor/bin/behat --version\nBehat version DEV\njosh@josh:~/www/application$ vendor/bin/behat\n[Behat\\Gherkin\\Exception\\ParserException]                                                                                                         \n  Expected Comment or Scenario or Outline or Step token, but got PyStringOperator on line: 7 in file: /home/josh/www/application/features/ls.feature  \nbehat [--init] [-f|--format=\"...\"] [--out=\"...\"] [--lang=\"...\"] [--[no-]ansi] [--[no-]time] [--[no-]paths] [--[no-]snippets] [--[no-]snippets-paths] [--[no-]multiline] [--[no-]expand] [--story-syntax] [-d|--definitions=\"...\"] [--name=\"...\"] [--tags=\"...\"] [--cache=\"...\"] [--strict] [--dry-run] [--stop-on-failure] [--rerun=\"...\"] [--append-snippets] [--append-to=\"...\"] [features]\n```\n. Also my editor is configured to save in UTF-8.\n. User Error. I didn't copy the \"Feature\" part, only copied the \"Scenario\" part.\n. I can't find the documentation for adding this option to behat.yml I figure out on my own its like this:\ndefault:\n        options:\n                stop_on_failure: ~\n. I think I get what you're saying. Even if my buttons all just say \"edit\", they should have a title attribute so the user gets a tooltip \"edit record A\". This also makes it usable for screen readers, text only browsers, and incidentally testing tools like Mink. Makes sense. Thanks\n. I placed this in my FeatureContext.php and it now gives the correct behavior. This is concerning because I should be able to trust my testing tool, this makes me feel like I can't.\nphp\n/** Patches bug https://github.com/Behat/Behat/issues/298 */\n    public function assertCheckboxChecked($checkbox)\n    {\n        $checked = $this->assertSession()->fieldExists($checkbox)->getAttribute('checked');\n        if(!$checked) {\n            throw new Exception('Checkbox should be checked');\n        }\n    }\n. Thanks that sounds like a great idea. So something like this I guess?\nphp\nclass DateTime\n{\n    function current()\n    {\n        if($this->isTestEnvironment() && file_exists('current_time')) {\n            return file_get_contents('current_time');\n        }\n        return time();\n    }\n}\nMy test could create a file called current_time and write a \"fake\" time there. Then I could make sure that file is not present in production. I could even test things like setting the 'current time' to Jan 1st, and then do some action, then setting the time to Jan 7th and loading some other page to make sure the text \"created 7 days ago\" appears on the page. I like it.\n. ",
    "jcbwlkr": "@joshribakoff I totally just did the same thing...\n. ",
    "ulrichsg": "Ah, ok. Thanks.\n. ",
    "zeebinz": "So just to clarify: there's no means now of referencing the features directory passed via commandline in the config file, so can't add paths relative to it?\nAnd also no way of loading features from a non-standard directory without using behat.yml, since bootstrap isn't found by default in any passed directory? \ne.g. 'behat foo', where foo/bootstrap/FeatureContext.php exists, still gives the 'Context not found' error?\n. Thanks for the clarification.  The challenge comes when you have a number of features spread across different paths (e.g. modules). It makes a single global config with shared profiles for the entire suite somewhat difficult to use. Instead, it forces copying of behat.yml into each module somewhere, which then need to be kept in sync in some way - unless I've not understood this correctly?\nIt's a shame that the paths can't be overridden by commandline options; this would make running  a suite programatically a tiny bit easier, I think.\n. Thanks, but a profile for each module means that these need to be known in advance and behat.yml edited manually, rather than being able to load features dynamically.  I'll look into writing a custom loader, and check out the Symfony extension.\n. Thanks everzet, that sounds like a good solution, now to dig a bit deeper into the code. :)\n. ",
    "zombor": "@stof It's also important to keep in mind that Behat isn't (or should not be, imo) completely focused on web UI testing. There's a lot more to BDD than testing html output. That may not change the scenario here, but I think it's an important distinction.\nIt should be a common situation where you can do BDD development with raw code with Behat.\n. @robocoder You can use any kind of phpunit assertions in your step definitions. Just use them :)\n. > but if you are testing that you expect an exception, you are at the unit testing level, not at the behavior testing level\nSurely throwing an exception is behavior, just as any other output.\n\nBut exceptions are too much low-level to describe as business rules (in most cases).\n\nSure. I would not have a gherkin step that says \"Then the class will throw ExceptionThing\". I would say \"Then I should see an error\" or maybe something more specific with an error message string or something.\nThe step definition hides the actual implementation details (or rather, can emulate a delivery mechanism), and I don't think it's particularly wrong to assert an exception being thrown for this kind of behavior in the step definition if that's what the behavior calls for.\nThis probably isn't the right forum for this kind of discussion though :)\n. ",
    "muhqu": "+1 that would indeed be a great impovement\n. sry, for being too offensive last friday... sigh\n. @everzet just used githubs integrated editor... plain awesome feature. \n. @stof thanks!\n. I have tried to add a Scenario in syntax_help.feature that used behat -dl --ansi but unfortunately I was not able to match against the output with a And the output should contain: Step. I don't know how to encode the expected colored output using the PyStringNode. Something like this:\n01. Failed asserting that Binary String: 0x1b5b33326d476976656e1b5b306d201b5b3\n3336d2f5e492068617665201b5b306d1b5b33333b316d285c642b291b5b306d1b5b33336d20617\n0706c65733f242f1b5b306d0a1b5b33326d205768656e1b5b306d201b5b33336d2f5e492061746\n5201b5b306d1b5b33333b316d285c642b291b5b306d1b5b33336d206170706c65733f242f1b5b3\n06d0a1b5b33326d205768656e1b5b306d201b5b33336d2f5e4920666f756e64201b5b306d1b5b3\n3333b316d285c642b291b5b306d1b5b33336d206170706c65733f242f1b5b306d0a1b5b33326d2\n05468656e1b5b306d201b5b33336d2f5e492073686f756c642068617665201b5b306d1b5b33333\nb316d285c642b291b5b306d1b5b33336d206170706c6573242f1b5b306d contains \"Given /^\nI have (\\d+) apples?$/\nAny Idea how to add such a test?\n. btw, I have not found any *.feature tests for the behavior of --ansi or --no-ansi.\n. @stof what do you think?\n. referring to the whitespace before the And? I thought it is common practice to right-align step prefixes, is it not?\nGiven ...\n   When ... \n    And ...\n   Then ... \n    And ...\n. @everzet fine now?\n. @stof it should now let you merge it.\n. Huh... is it really my pull-request that breaks the build on php 5.5?\n. just added #274 to fix the failing test \n. @everzet I just added it there, but I don't really know what its there for... I'm not so used to this Symfony DI stuff. Any hint on how to validate its now working as expected?\n. I just choosed what was used for the other booleans.. :-/ \n. @robocoder thx for #275 !\n. c'mon guys, I provide you with a patch that adds test cases for features you've not tested and now you're complaining on curly braces?! If this patch is agains your CS, then prettify it yourself before merge.\n. also... I don't get what you mean... the try { } catch { } is/was formated the same way in HookDispatcher\n. I guess you mean not have a 2nd When after the Then, as the Given is part of the output I'm checking against... right?\n. ",
    "ghost": "@everzet then this should be updated/removed?\nhttp://knplabs.com/en/blog/behat-like-a-boss-meta-steps\n. No, I am on OSX actually.\nIt may be a bad practice to customize those directories but there was a reason for doing that and as composer adds the possibility it should at least be possible I think. I guess using composer's environment variables should do the trick (+ making it cross OS compatible): http://getcomposer.org/doc/03-cli.md#composer-vendor-dir, http://getcomposer.org/doc/03-cli.md#composer-vendor-dir\nI'll try to fix this via a pull tonight if needed\n. Thanks, will try that one and either close this issue or submit a pull request ;-)\n. Hi again. I tried the develop branch but that didn't work either. So I checked other packages using binaries and they're using file_exists instead of is_dir. I mentioned that in the PR description. This fixes this issue, at least for me. Any thoughts? I guess it has to do with the symlinking of files\n. Closing as PR was accepted :)\n. I just checked this behaviour again. It still exists...so:\nhttps://github.com/Behat/Symfony2Extension/issues/41\n. +1, i have the same problem,\n$shortFeatureFile = preg_replace('#(.*features/)(.*)(\\\\.feature)#U', '$2', $feature->getFile());\n    $scenarioFileIdentifier = str_replace(DIRECTORY_SEPARATOR, '-', $shortFeatureFile);\n    $this->filename = 'TEST-' . $scenarioFileIdentifier . '.xml';\nWorks with minimal name (for example : TEST-frontend-customers-create.xml). Used for screenshots name.\n. Thank you for your quick response, I did, but i cant find a way to fix this exception.\nOn the doc, the only thing I haven't performed is adding\n\nuse Behat\\Symfony2Extension\\Context\\KernelDictionary\n\non my FeatureContext.php.\nI added it, but still the expcetion. What I miss?\n. My bad... Thank you a lot!\n(And congrats for this Bdd tool)\n. I've tried it with no config, then I tried it with using the autoloader (as explained in the docs) but that just placed non-namespaced classes in the folder I described. Whatever I try, I can't pick up classes.\nAlso, I don't want to have to manually declare each Context in the config file, as this seems to defeat the purpose of autoloading?\nI also used the paths for the suites to allow my features to be located where they are (separated from the php). This bit seems ok btw.\nLast time I tried behat, it was the old version that allowed me to explicitly declare the features folder, and the bootstrap folder. How come it changed from something so simple?\nCan you post an example config file that would achieve the description I'm after, if it's not too cheeky to ask?. Ok, I'm just finding this a little weird. I'm used to PHPUnit where I just tell it folder locations, and it figures out what classes to load.\nDo I need to define the contexts in config as the full namespace?. Thanks. Not saying I don't like it, just confused after years of one approach to testing.\n\n\nDo I need to define the contexts in config as the full namespace?\n\nYes.\n\nThis is what I've been missing I think.\nThanks for the input guys!. I guess so. I still think it's very weird though ;). Hmm, just got back to this...\ncomposer.json\n\"autoload-dev\": {\n        \"psr-4\": {\n            \"Company\\\\DefaultContext\\\\\": [\"tests/behaviour\"]\n        }\n    },\nbehat.yml\ndefault:\n  suites:\n    default:\n      paths:\n        - '%paths.base%/features'\n      contexts:\n        - 'Company\\\\DefaultContext\\\\FeatureContext'\nfolder structure\n/features\n    /something.feature\n/tests\n    /behaviour\n        /FeatureContext.php\nFeatureContext.php\n```\n<?php\nnamespace Company\\DefaultContext;\nuse ...\nclass FeatureContext extends Context\n{\n    ...\n}\n```\nbehat output\n```\n$ behat\nIn UninitializedContextEnvironment.php line 44:\nCompany\\\\DefaultContext\\\\FeatureContext context class not found and can not be used.\nbehat [-s|--suite SUITE] [-f|--format FORMAT] [-o|--out OUT] [--format-settings FORMAT-SETTINGS] [--init] [--lang LANG] [--name NAME] [--tags TAGS] [--role ROLE] [--story-syntax] [-d|--definitions DEFINITIONS] [--snippets-for [SNIPPETS-FOR]] [--snippets-type SNIPPETS-TYPE] [--append-snippets] [--no-snippets] [--strict] [--order ORDER] [--rerun] [--stop-on-failure] [--dry-run] [--] []\n```\nAny pointers?. Aha! It was the double back slashes.. ",
    "jonathaningram": "Ok thanks. So can I recreate the issue there?\nOn 10/06/2012, at 5:43 AM, Konstantin Kudryashovreply@reply.github.com wrote:\n\nIt has nothing to do with PyString, Behat or Gherkin. It's particular Mink driver bug - MinkSahiDriver.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Behat/Behat/issues/142#issuecomment-6222937\n. \n",
    "brikou": "It works as expected under linux env (I've just checked), but my main dev env. is linux virtualized under windows, so my hard drive is NTFS (shared folder between linux and windows) but running OS is linux... this setup is kind of weird but effective for me.\nI believe that this weird env. is the problem source, I already had this kind of problem with composer (https://github.com/composer/composer/pull/491)...\nI'll try to investigate over this issue, cheer\n. @everzet sorry not given feedback sooner, but now it just work as expected... cheer\n. ",
    "tmartin": "Is there a way to specify an absolute path in the command line like --out /path/to/directory ? For now, it concats the path,  as it assumes that it's a relative one, which leads to a no such file or directory exception.\n. @everzet Thanks for the quick response. I'll do it this way then. :)\n. ",
    "herrsebi": "+1 \nW'd also like to use behat to functionally test components that may be composed differently in various projects. For this we would need to be able to specify muliple folders where features may reside, and optionally multiple folders for the feature contexts. \n. ",
    "DylanBowden": "Thanks, now that makes sense. I was thinking that Behat was setting the environment variable for it then to be available for use in and around FeatureContext.php. What you're saying is that Behat will pick up the environment variable if it is already set.\n. ",
    "tristanbes": "Nevermind, it's a problem with the session... It's not starting.\n. The problem is that the key is not recognized : \n[Symfony\\Component\\Config\\Definition\\Exception\\InvalidConfigurationException]  \n  Unrecognized options \"formatter\" under \"testwork\"\nI saw that @WouterJ is currently working on the junit formatter (#527)\n. meh, still the same:  \nUnrecognized options \"output\" under \"testwork\"\n```\ndefault:\n    ...\nlocal:\n    output:\n        name: progress,html\n        parameters:\n            output_path: ,ci/build/behat/index.html\n            language: en\n    extensions:\n        Behat\\MinkExtension:\n            selenium2:\n                wd_host: http://172.16.1.1:4444/wd/hub\nbuild:\n    output:\n        name: progress,junit,html\n        parameters:\n            output_path: ,ci/build/behat/junit,ci/build/behat/index.html\n```\nIs that possible somehow to have a full file configuration please as an example ?\n. Thanks guys ;-)\n. What is good is that writing things down will help you resolve the issue. :smile: \ndumping the autoloader via composer install fixed the problem.\n. @mavimo Thank you :) \n. +1 can't wait to finally plugin tests into jenkins\n. All good then ? It's been since this summer I've waited for those Junit PRs to be merged :)\nThanks to all this PR contributors and especially @WouterJ \n. Alert, alert, tests are green :+1: \ngr8 job !\n. That's another 6month wait :D \n\n. What's the status of this since 3.3 is almost due date \ud83d\udce6  ?. ",
    "cogitatio": "Would be Great, if the failtests formatter can Write that Format. But from what i have Seen, when i skimmed through the code, suggested, that you cant find out that line number easily. \n. Awesome. If you need any help, poke me. \n. Very nice. But this change is not yet reflected in the FailedTestsFormatter, or is it? Then the reruns will be alot shorter :)\n. I know that. And we are already doing that, but why should i reorganize my tests all the time, if i want to run them in parallel. Adding or removing tags to hundreds of tests seems inefficient.\nI would rather mark the exceptions and let behat handle the parallell testrunning. I could just tell behat to run 1 test in parallel :) or 10 with a single configuration option.\nThat would speed up our testing proccess immensely.\n. Interesting, what exactly are you planning there?\n. ",
    "woledzki": "I should open that pull request for develop branch, sorry :/\n. done :)\n. ",
    "cgsmcmlxxv": "@everzet, I successfully ran behat tests in parallel threads using pcntl_fork without clobbering the thread sates. What is your status? Can I help?\n. @martinfobian, it may be a problem with the number of handlers for opened files (file descriptors). OS X has incredibly low number of such handlers. Try to raise the number of file descriptors.\n. A workaround may be to define your step into a local function in FeatureContext (or subcontext) and from there to call the real step method/class in a try/catch body, but without throwing an exception. In this way you can define your own critical hierarchy. NB: once a step is failing, the following steps depending on that particular step will fail as well. I would recommend to organize scenarios in such a way to group only a logic chain of steps and not multiple (quasi-)independent chains. Good luck!\n. doRun() and run() are not my problem (yeah, I admit it didn't come to my mind to call directly run(), my bad). My real problem here is the output class instance propagation.\n@stof Thanks for the explanation, but I didn't quite get its conclusion in this context. If Behat uses Console component (more precisely, StreamOutput class) why not to forward the OutputInterface implementation user provides with? Especially that there is implemented a switch for different output types (raw, formatted and plain - if memory serves).\nMy main problem with this output propagation is parallel threads reports which become pretty messy if I do not buffer them somehow (or any other output controlling method). As I said, the solution I have in this moment is to call exec(\"behat_command\",$log) in each thread instead of calling run(), but this is more a hack than the correct way.\n. ",
    "fpalomo": "hello guys,\nany news on this feature? \n. ",
    "odino": "+1\nany news?\n. @everzet any idea?\n. yes, looking forward for you patch!\n. ",
    "VladSavitsky": "Currently I'm running 4 processes of behat at the same time.\nI'm using drupal which allow to have multisiting configuration which means that I have 1 copy of code base. But it's not a problem to clone whole project in separate folders and run behat in each of them.\nThen I created separate database for each site so there will be no conflicts between behat-processes. They could happen when one process creates data and another removes it.\nNext I've created separate behat.yml file which point to desired domain. I've placed this files in the same folder with default behat.yml.\nNow I could run several behat-processes using tags to separate test scenarios:\n./behat --config .//behat.clean.test1.yml -f \"pretty,html\" --out \", ./reports/report_clean.test1_date +%Y-%m-%d--%H:%M:%S.html\" --tags \"~@access&&~@menu&&~@permissions\"\nNext process should include only scenarios excluded before:\n./behat --config .//behat.clean.test2.yml -f \"pretty,html\" --out \", ./reports/report_clean.test2_date +%Y-%m-%d--%H:%M:%S.html\" --tags \"@access,@menu,@permissions\"\nNote! There is a difference in tags in this two commands.\nIf there is another way to run it I'll try because configuration takes a lot of time.\n. ",
    "neochief": "Ok, you've asked, I've got it :)\nhttps://github.com/shvetsgroup/ParallelRunner\n. Done.\n. Thanks!\n. Thanks again for your review. It turned out, that definitions are indeed not really useful after un-serialization.\nBut, I had to take the other approach to serialization, since the PHP's default way of doing it, caused a lot of problems on un-serialization. For instance, each unserialized event contained it's own copy of context object. In my case it lead to enormous memory consumption of a testing script and eventual memory abuse.\nMy second approach to serialization ended-up with Symfony's Serializer component. It not only allowed to define my own serialization structure, but also to hook-in into un-serialization and re-use existing objects in newly created events.\nThere's just one minor thing left to fix: https://github.com/Behat/Behat/pull/295\n. ",
    "fantasticjamieburns": "If your fixtures are isolated properly then this works well under linux whilst developing:\nfind ./features -name *.feature \\\n| parallel --gnu --halt-on-error=2 --keep-order \\\n  bin/behat --ansi --format=pretty\nThe \"parallel\" command will automatically detect the number of CPU cores available and scale accordingly. In addition, it can be configured to spread the load across a cluster of machines via SSH.\nCaveat: this approach will not aggregate the total passed/skipped/failed for reporting purposes.\n. ",
    "rajeshtaneja": "+1\n@neochief  Any plans to update ParallelRunner to 3.x ?\n. Thanks @eddiejaoude \nI am trying this now. Nice framework :+1: \n. I think step chaining was important and step calling was a bridge for accessing steps between contexts.\nI am working on behat 2.x to 3.x migration and it is a big drawback for us that chaining and step access in not supported in shining behat 3.\nConsider a situation:\n1. For custom form field library, so that library will define how to set/get values from custom fields. For this you need to write form_context and step definition.\n2. For multiple authentication plugins, you do the same. Write custom steps in different context to get user authenticated.\nNow if you are testing a page, you need steps from above contexts to authenticate user and fill custom form fields.\nWith Step access from different contexts, it was not required for dev to search code to find out what api in which context should be used. Step definition list is enough to get them going. \nCurrent problems:\n1. Dev has to know more about what all context api's availabl, before they can re-use it.\n2. Inter context communication is not possible #558\n3. Step chaining used to help wrap few steps which were repeated in multiple scenarios in different modules/plugins. Like login step, which includes:\n  a) Expand navigation if JS\n  b ) Click on login link\n  c) Fill user name\n  d) Fill password\n  e) Press login\nWill appreciate if anyone can help/guide me how this can be achieved elegantly in behat 3. \nMy issues are:\n1. How to call different steps from different (20+) contexts. Api calling might work, but it's not as easy as just calling new Given and not to worry about different context and not knowing which api is in which context.\n2. Chain/Combine steps for reuse (like login).\n. Have you guys find out how to use access data between contexts.\nI am in the middle of upgrading to behat 3 and this is a big problem for us.\nSteps like: i_click_on() are used in mostly all context. If I use trait, then it fails with duplicate step error. \nAppreciate any help here :)\n. Thanks Christophe  and Gaetano ,\nIt will be very helpful, if I can get some clue on how to re-arrange my contexts. I looked at pageObject and I think that is an overkill. We have all basic functions like i_login_as(), i_have_following_users() etc. and they need to be part of mostly every context. The list is too big and it comes from different part of code. In behat 2.x it was used as sub-context, so that was not a problem, but not context being isolated is making me think what is the best way to re-arrange them. \nI can create a new context object in my current context and set mink to call steps from diffent context, but saying so, this is messy way and (To be frank) I am not sure if that is the right way.\nCheers.\n. Thanks Gaetano,\nThis is a good way to share context, just wondering how step definition list be populated. Anyway will try apply this design to see if I can get anywhere.\n. Thanks Konstantin.\nWith -vv (verbose) option output is as below. Not sure what I am missing here, but extra information (html snippet) is same as in 2.x.\n```\nAnd the field \"City/town\" matches value \"$NASTYSTRING3\" # /home/rajesh/moodles/behat3/moodle/admin/tool/behat/tests/behat/nasty_strings.feature:34\n      The 'City/town' value is '$NASTYSTRING3', '& ' \\\" \\ '$@NULL@$ < > & < > @@TEST@@ \\\" \\ , ; : .\u00a0\u65e5\u672c\u8a9e\u00ad% %%' expected\n  +--[ HTTP/1.1 200 | http://localhost/behat3/user/editadvanced.php?id=2&course=1 | GoutteDriver ]\n  |\n  |  <!DOCTYPE html>\n  |  <html  dir=\"ltr\" lang=\"en\" xml:lang=\"en\">\n  |  <head>\n  |      <title>Acceptance test site: Edit profile</title>\n  |      <link rel=\"shortcut icon\" href=\"http://localhost/behat3/theme/image.php/clean/theme/1420775858/favicon\" />\n  |      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n  |  <meta name=\"keywords\" content=\"moodle, Acceptance test site: Edit profile\" />\n  |  <script type=\"text/javascript\">\n  |  //<![CDATA[\n  |  var M = {}; M.yui = {};\n  |  M.pageloadstarttime = new Date();\n  |  M.cfg = {\"wwwroot\":\"http:\\/\\/localhost\\/behat3\",\"sesskey\":\"8Savbabtvb\",\"loadingicon\":\"http:\\/\\/localhost\\/behat3\\/theme\\/image.php\\/clean\\/core\\/1420775858\\/i\\/loading_small\",\"themerev\":\"1420775858\",\"slasharguments\":1,\"theme\":\"clean\",\"jsrev\":\"1420775858\",\"svgicons\":true,\"developerdebug\":true,\"behatsiterunning\":true};var yui1ConfigFn = function(me) {if(/-skin|reset|fonts|grids|base/.test(me.name)){me.type='css';me.path=me.path.replace(/\\.js/,'.css');me.path=me.path.replace(/\\/yui2-skin/,'/assets/skins/sam/yui...\n  |\n\n```\n. Sorry Konstantin,\nI meant, it's not as explanatory as in 2.x. \nIn 2.x it was failure was very clear:\n1. Had failure number\n2. Failing step\n3. Failing scenario with path\n4. Feature in which failure happened.\nIn 3.x it just have\n1. Failing step with path\n2. Exception.\nIt would be nice to have a failure information similar to 2.x\n. Thanks Konstantin,\nHave created https://github.com/Behat/Behat/issues/688\n. Thanks Konstantin,\n. Hello @stof and @everzet, \nI can see you guys are working on behat.org, can you guys please provide estimate time for 3.1 release. We are in process of upgrading to behat 3.0.*, but seems #656 will resolve some associated issues and would be nice candidate for upgrade.\n. Thanks @stof \n- We use scenario name and step name while saving screen shot, so #653 will help us fix this.\n- Trying to support step chaining for BC\n- We have custom formatters to extract feature-scenarios for distributing features between different jobs by passing it to re-run.\n. +1 for not dropping support for older PHP versions. We support php 5.4.4+ versions for our software and if support is dropped for older versions then we won't be able to run behat with older versions.\nPHP version support should only be dropped if it's a hurdle in future enhancements, and not because it's old.\n. @ciaranmcnulty, I don't agree with that. \nAssume 3.x don't support php5.4, Now if you want to run Behat on your project to ensure it works with php5.4 and php 7, thes how will you do it ?\nAre you going to run Behat 2.55 for php 5.4 and Behat 3.x with php7 ? If yes, then you need to maintain 2 different branches of your contexts/steps, to run tests, as 3.0 is not BC.\n. Thanks for the quick response @stof and @everzet \nI did a basic testing with Behat 3.0.15 and it seems memory usage is within limits. There is no extra memory used after every step. I will confirm this after running few test cases. \nAs per large Feature file, that was just a quick modification to existing code, to see what's causing the problem. Also, it is quite a valid case to have lot of steps in a feature file. Consider a feature file with 2 Scenario outline with around 35 steps each and 10 Examples . Which is quite readable and total steps will be 2 x 35 x 10=700.\nI will add more information on this and try find the cause of issue for 3.1.x \nFYI: \n1. Try dump memory usage after every step in 3.1.0-RC2 and you should observe incremental memory usage, which is not case in 2.5.5 or 3.0.15\n2. Behat 3.1.0-RC2 is consuming 27.94Mb and 3.0.15 is consuming 17.21Mb\nThanks.\n. Output buffer is not closing if buffer is empty which is nested for each call.\nhttps://github.com/Behat/Behat/pull/852\n. @jakubzapletal, I do agree what @everzet is saying. As said before the test case provided is just a quick copy/paste to show that there is a problem with memory consumption in 3.1.0-RC2 and not just with big feature file but with small-multiple feature files as well.\nProbably my approach of defining the problem was not correct. I do agree with @everzet and @stof about the limited steps in feature file and that is one thing on our todo list to fix.\nI will appreciate if @stof or @everzet can look at the the  https://github.com/rajeshtaneja/Behat/commit/4c6309b43c45205c97d2abfc39cd0879f0588c75 . The problem is that ob_get_length() should be checked for false and on 0 (zero) it should clean and close the buffer.\nThe problem was introduced by https://github.com/Behat/Behat/commit/97b006c538af425ea0ec0d10d962a2040278a2af\n. Thanks @stof \nAs output buffer is stackable, could it be possible that there is a open buffer before  startErrorAndOutputBuffering() is called ? \nRather then relying on ob_get_level() or ob_get_length() it would be nice to just keep track if the buffer was successfully open and if yes the close it.\nPatch implementing it:\nhttps://github.com/rajeshtaneja/Behat/commit/d68cfc0c3f50ce169f1421575d95dae6da8104da\n. Thanks @everzet \n. @everzet / @stof, What do you think about this ?\n. As per documentation, rerun save list of failed scenarios to run them again also, \nwe have few scenarios which we skip if running php7 or gd extension is not installed on the platform. In those cases the skipped scenarios are saved in the list.\nThis is not a major deal as exit code is 0 with skipped scenarios. It will be nice to either update docs or just include scenarios which are failed. \nI am not sure what complications are expected with this change, but would be nice to know.\nThanks for the feedback.\n. grrr.. Sorry about that. Fixed it.\nThanks @everzet \n. Thanks @stof,\nI will try get to sort this in coming week. Sorry quite busy with regular stuff...\n. Information has been added https://github.com/Behat/Behat/issues/932\nSteps to reproduce:\n\ngit clone https://github.com/rajeshtaneja/MinkExtension-example.git\ncd MinkExtension-example\ncurl http://getcomposer.org/installer | php\nphp composer.phar install\n\nRun behat\n\ngit checkout multiplesuites\nbin/behat\n- Only one feature file is executed with 3 scenarios.\n- Check /tmp/behat_rerun_cache/xxxx.scenarios and you will see only 1 scenario listed\n\nRe-run behat\n\nbin/behat --rerun\n\nYou will observe features are executed twice, as temp context doesn't have search.feature it should only be executed once.\n. Our features are distributed in different modules, so if plugin is installed it will have it's own features and context.\nSorry I didn't get the cost factor problem involved. Can you please explain. Other then the current solution  , I can override scenario list locator to check if it's a json file or just scenarios and return feature accordingly.\n. Thanks @everzet ,\nAdded testcase.\n. Thank you for keeping up the awesome work. \nSorry, I didn't get your comment earlier about the testcase. I was reading between the lines....\nCan you please let us know due date for 3.2.0\n. Thanks @everzet \n. The failure seems to be happening because of https://github.com/Behat/Gherkin/commit/db8be8a11b49926fc52e3b4c53134b711b7ed487\n. Thanks for fixing this @everzet,\nConfirming, patch resolves the issue.\n. ",
    "eddiejaoude": "My 2 cents...\nRobo Task Runner is another option http://robo.li/tasks.html#parallelexec \nCodeception has a good usage example: http://codeception.com/docs/12-ParallelExecution\neg.\nphp\n    function parallelAll()\n    {\n        $this->parallelSplitTests();\n        $result = $this->parallelRun();\n        $this->parallelMergeResults();\n        return $result;\n    }\n\n@fantasticjamieburns great command for pure maximum speed :+1: \n. @timiTao Robo have updated their website & I can't find their equivalent docs for that page. The 2nd link has an example of how to use Robo in parallel. \nIt might be work logging an issue/ticket with Robo\n. ",
    "timiTao": "@eddiejaoude first link is not working...\n. @jwfuller  thaks a lot :) :+1: \n. @johnhunt This was abused too much. Maybe PageObject could help you with that matters :)\nOr maybe you want to do too much in one scenario.\nThis is more about complaining, that question with help to find a solution.. @everzet will this be in behat at near future?\n. +1 :)\n. @amitaibu \nAbout chained step(original name) - it is dropped\n\nhttps://github.com/Behat/Behat/blame/master/CHANGES.md#L114\n\nLittle hack from KNP:\n\nhttps://github.com/KnpLabs/FriendlyContexts/blob/master/doc/feature-smartStep.md\n. @amitaibu about  why -\nhttps://github.com/Behat/Behat/issues/141#issuecomment-41492718\n. yeah, i understand this, but shouldn't this throw any exception at least? if array is not given - i had problems to locale this\n. @stof totally right :+1: it will create harder to debug, but if you consider this as contracts, developer should deliver correct data.\n\nSad, but in this case, nothing to do :)\n. @stof: i want to have additional option to call own commands that can use fully from configuration of behat.yml file.\nLike  extensions. \nFor example, configuration of dbal in my extension.\nRigth now i have:\n\nbin/console.php test-tools:generate:table-to-gherkin TABLE_NAME\n\nthat help me with creating new tests. I don't want to create separate project to do that.\nlike now is \n\nbin/behat\n\nbut it blocking to use any other command - hardcoded.\nNow i have my own \n\nclass Application extends \\Symfony\\Component\\Console\\Application\nclass ApplicationCliCompilerPass implements CompilerPassInterface\nclass ApplicationFactory extends BaseFactory\n\nto could call console.php\nCould you add this as build in feature?\n. @everzet thx, i will use that :+1: \n. @everzet i need to return to this problem. I made, as you told( working fine) , but have one problem. \nWhen have defined transformation in Context like\n@Then Assert the array :json is identical with :arg2\nand \n/** @Transform json */\nfunction tranformJson($json) {return json_decode($json);}\nthen i call in feature\nThen Assert the array clipboard(test) is identical with [{}]\nIt will be never call function tranformJson, because clipboard get first, and block transformation.\nAny other advices? Maybe need to implement CallFilter ? That is only option i found. CALL_FILTER_TAG\n. i dont have configured xDebug. I guest something is wrongly read comments, and by recursion hit limit\nAs i told, runned commented scenarion.\n. i find out, that it was enabled - probably tryed in past, but forgot about this. Sorry for troubles.\n@everzet about this, i knew it :) Thanks :+1: \n. :+1: \n. i have idea, maybe create new extension\nhttps://github.com/Behat/Behat/blob/master/src/Behat/Behat/Transformation/Transformer/ArgumentTransformer.php\nthat will will create i special chart, that normaly cann't be done in string? like null. \nI could be called specialChar(null),  specialChar(\\n) etc \n?\nOne extension like this, i made - Clipboard for behat.\n. isnt this for .NET? server, as i read on page ABOUT? \nAnd second this, wasn't travis running with behat? I'm simply intreseted why :)\n. :+1:  :)\n. :+1: i would too to know that\n. @gries  I think you problem is not functionality, but management over tests.\nIn my opinion, Context should be iPhone5(5c|5s|6|6plus) but suite should be package  additionality of your page. In this case, the tags are unneserry like iphone5s. For given context, you should tests given feature. This way you will have for suites x configuration, but at scenarios, you will have clear view of behavioral. In this case, you don't need validation to check if run scenario - you simply control everything in configuration files ( you could have more)\n. I assume you have a lot. Now i'm about 20 features, 700 scenarios ( after run tests)\nFor example assume that only iPhone 6 have > 500 width(guess).\niphone5s:\n    suites:\n        core:\n            paths:\n                - %paths.base%/features/core\n            contexts:\n                - FirefoxContext\n                - iPhoneContext\n        cart:\n            paths:\n                - %paths.base%/features/cart\n            contexts:\n                - FirefoxContext\n                - iPhoneContext\niphone6:\n    suites:\n        core:\n            contexts:\n                - FirefoxContext\n                - iPhoneContext\n            paths:\n                - %paths.base%/features/core\n        cart:\n            contexts:\n                - FirefoxContext\n                - iPhoneContext\n            paths:\n                - %paths.base%/features/cart/navigation.feature\nAnd tests, as previous:\nfeatures/\n    core/\n        hello-world.feature ; executed on all browsers\n    cart/\n        navigation.feature ; executed on all browsers\n        item_count.feature ; executed on all browsers with with a screen > 500\nCalling this could be, that run for cart with iphone6(>500) and item_count.feature will be not run.\nphp bin/behat --profile=\"iphone6\" --suite=\"cart\"\nIn this case, if iphone6 are have a little others step implementation, you simply ovewrite iPhoneContext to iPhoneSixContext and change this without changing scenarios. \nDon't do managment over tests in scenarios.\n. In all depends on your approach and goals. \nI show you other one way. It depends on what you know.\nIn this example, you could at last create matrix of cover all posibilities of devices x browsers x feature - yes, this could create a lot of profiles and suites. You could simply create generator for this ;)\nI'm aware of creating a lot of configurations, but that is role of this file behat.yml - to manage you tests, not at your scenarios.\nAbout refactor cart/, you could simply always list all feature files. This still will have a lot o lines, but you wont be forced to refactor parts like from folder, to selected file.\nYou will be more aware of what is, and what is not tested in which configuration. If you will have too much job with manage config files- create simply generator for configurations. This way, adding new feature could simply recreate this file, and eventually change what you dont want ;).\nThis is my proposition, not solid resolve of all problems. In other context, other approach could be much better. All depends on your goals and on what you want focus. I show how to manage tests over a lot of devices and configurations, in my opinion.\n. @gries yeap, i will be interested to see the code ;)\n. any more information? folder structure? config file?\n. @Gordiievskyi i created few extension and this could help you - some examples.\nhttps://github.com/timiTao/BehatExtensionExamples\nLook in features for each interface ;)\n. Due to that, i'm working on https://github.com/timiTao/behat-aggregate-container. \nAny suggestions?. That is my opinion on this topic.\n@bartonhammond  I work with Behat long time and the reason that was ChainedSteps was abandon due to be in conflict with BDD itself. As gherkin aim is to provide Use Case scenario, that way you will start treating them as scripts made from others scripts etc. After some time debugging business scenarios will be hell as then will drop describing some logic clearly. \nAnother thing, calling technical elements in the scenario is too very bad practice. Read at least about PageObject.\nThe amigos that you mention prepare the ground (dictionary) for the domain expert. That is ok if he doesn't know about the implementation of steps. If their description is not clear enough - then you have some smell of understanding what is done in given step.\n@spolischook Is I know, It could be done less than a month - but that is the raw estimate.. @blixit You need show some code if you want help to reproduce it.\nbehat.yml, Behat version.. ",
    "jwfuller": "http://robo.li/tasks/Base/#parallelexec\n. ",
    "jhenya": "Hi there\nfantasticjamieburns, \nDid you try it?\n\"Caveat: this approach will not aggregate the total passed/skipped/failed for reporting purposes.\"  commented on 1 Jul 2013 \n. I implement parallel execution it with xargs and GNU Parallel and implement consolidated report based on BehatHtmlFormatterPlugin extension. Please see details here \nhttp://parallelandvisualtestingwithbehat.blogspot.com/p/blog-page.html\n. ",
    "kandelyabre": "you can try extension https://packagist.org/packages/tonicforhealth/behat-parallel-scenario\n. ",
    "ioleo": "Also see liuggio/fastest\n. Thanks. I'll try that. \n. ",
    "seyfer": "@jhenya will not work to run tests just in parallel since with one DB parallel changes via UI lead to other tests to fail.\n@ioleo thanks, so far the most advanced tool. But for me it failed to run, I have created an issue.\n@neochief tried this one also. Outdated for Behat 3. Tried to fix it, but doesn't work now. \nIf anyone can have a look, would be great.\nThanks all for sharing.\nWhat worked for me so far is not paralleling, but running chrome without Selenium in headless mode. It 2-3x times faster. But without VNC.\n. ",
    "minayaserrano": "Ok, I'll keep it in mind the develop branch, sorry!\n. ",
    "srutto": "I installed behat a few days ago and every time I try to run it I get a Context class not found. My behat.yml seems configured ok. I'm lost, don't understand what the problem could be. Please help. \n. ",
    "deerawan": "I have succesfully managed this error. Here is my structured folder\nbin/\n     behat\n     behat.yml\nfeatures/\n     search.feature\nIn command line, I have to execute inside bin, so I did\nbehat ../features/search.feature\nand the context class error is gone. I dunno why we should execute behat from directly from bin folder :)\n. ",
    "dkmuir": "At first I thought the trick composer was doing when piping the installer to php was that it was reading the local environment, and would then fetch/build the phar for it. Had a look through the script though, and it looks like they just have the shebang line there regardless. \nWould it really be a problem for Windows though? It can't execute .phar files directly, and effectively requires a batch script for it to work anyway. (I haven't used Windows in a looong time...)\n. ",
    "richardfleming": "Hi.  Sorry to post in an old issue, but in the latest behat.phar, the shellbang is missing. \nI'm new to behat, so I don't know if this is expected behaviour 1.5 years later.\nRich\n. Perfect.  I'll download the latest from releases.\nI downloaded behat by following the quick-intro guide on behat.org which instructs you to download https://github.com/downloads/Behat/Behat/behat.phar\nThanks!\n. ",
    "shrikeh": "I'll take this one.\n\u2014\nSent from Mailbox\nOn Fri, Jan 9, 2015 at 5:24 AM, Richard Fleming notifications@github.com\nwrote:\n\nHi.  Sorry to post in an old issue, but in the latest behat.phar, the shellbang is missing. \nI'm new to behat, so I don't know if this is expected behaviour 1.5 years later.\nRich\nReply to this email directly or view it on GitHub:\nhttps://github.com/Behat/Behat/issues/167#issuecomment-69294803\n. I'll pick this one up.\n. Actually, running behavioural testing against production with tools such as\nGhost Inspector plugged into PagerDuty if they fail is great. Metric-based\nmonitoring cannot hope to have the depth of understanding of your business\nvalue that behavioural testing allows. I don't really care if my server is\nat 95% of CPU utilisation: that's a smell, sure, but what I really care\nabout is if my users can't transact.\n\nJust split your tests with a tag called @production and have only those\nones run.\n. As 5.4 is EOL, I'm quite fine with this. If you need to support 5.4, you\ncan do some magic in your build env. The reason composer uses composer.json\nis a default value that can be overridden as a CLI argument; you could\ncreate a separate JSON file called php54-support.json with the versions you\nneed, and have your build vendor off that in a matrix.\nBarney Hanlon\nhttp://about.me/barneyhanlon\nPHP Software Engineer\n+44 7702 271 484\nOn 25 Jan 2016, at 07:49, Rajesh Taneja notifications@github.com wrote:\n@ciaranmcnulty https://github.com/ciaranmcnulty, I don't agree with that.\nAssume 3.x don't support php5.4, Now if you want to run Behat on your\nproject to ensure it works with php5.4 and php 7, the how will you do it ?\nAre you going to run Behat 2.55 for php 5.4 and Behat 3.x with php7 ? If\nyes, then you need to maintain 2 different branches of your contexts/steps,\nto run tests, as 3.0 is not BC.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Behat/Behat/issues/821#issuecomment-174429909.\n. Tsk @stof, read your specs ;-)\n. http://www.yaml.org/spec/1.2/spec.html#id2800401\n. You should always start and end your document with markers, whether you use directives or not. It's a document, so it should have document markers.\n. A question, on a side note: 5.3/5.4 are EOL, should they not be under an allowed_failures section?\n. Please re-read the example in section 2.2 of the YAML spec.\n. > 9.1.4. Explicit Documents\n\nAn explicit document begins with an explicit directives end marker line but no directives. Since the existence of the document is indicated by this marker, the document itself may be completely empty.\n. \n",
    "jpd4nt": "Composer changed its default package stability on 04/07/2012\nhttps://groups.google.com/forum/?fromgroups#!topic/composer-dev/_g3ASeIFlrc\nnice way to start learning how behat works....\nadd: \"minimum-stability\": \"dev\" after config\n. ",
    "alexandresalome": "Ooooh yeah: #171\n. ",
    "weaverryan": "Thanks @stof! I think maybe subconsciously I was trying to slide this into the \"stable\" branch, but you're right - it's definitely not a bug fix :)\nNew PR at #177\n. @bt-eric Tests are failing, I think in areas related to translations. Related to your setFallbackLocales() change or just a phantom failure on travis? Do those tests pass locally?\n. ",
    "nakohdo": "Any update on this issue? I'm running Behat with Windows PowerShell 2.0 on Windows 7 64 bit and am also having supposedly encoding related problems.\nI've tried to change the $OutputEncoding from standard ASCII to ibm850 (Western European) according to  http://blogs.msdn.com/b/powershell/archive/2006/12/11/outputencoding-to-the-rescue.aspx but that didn't solve the issue. For example running behat --story-syntax --lang fr stil comes out garbled.\n. Thanks, I had forgotten that. And I finally found the correct syntax to change the encoding to UTF8 thanks to http://rkeithhill.wordpress.com/2010/05/26/handling-native-exe-output-encoding-in-utf8-with-no-bom/ :\n$OutputEncoding = [System.Text.Encoding]::UTF8\nFrench and the other European languages display correctly. Now I only have to find a console font which also is capable of Japanese - but that's another issue ;-)\nEDIT:\nFound some promising instructions at\nhttp://stackoverflow.com/questions/586503/complete-monospaced-unicode-font and \nhttp://www.johndcook.com/blog/2009/07/24/windows-console-fonts/\n. As a GUI for Behat there's also http://halleck45.github.io/BehatWizardBundle/\n. ",
    "hckurniawan": "So PEAR way is no longer maintained?\n. ",
    "atomicframeworks": "Ran across this earlier today.  Glad to have this information thanks!\n. ",
    "pablofmorales": "Will be awesome remove the pear install option from behat.org. I waste a lot of time. \n. ",
    "borste": "please mark the pear variant as deprecated.., i waste a lot of time to, to found this blog entry.\nthanks\n. ",
    "benwaine": "One solution could be to look for the the COMPOSER_VENDOR_DIR environment variable. \nThe downside here being that as composer is a project oriented tool you'd have to pass the environment variable to the bin/behat command each time it's run. \nbash\nCOMPOSER_VENDOR_DIR=\"deps\" bin/behat\nThis could be aliased though. \nhttp://getcomposer.org/doc/03-cli.md#composer-vendor-dir\n. ",
    "kostiklv": "Sent to correct branch: https://github.com/Behat/Behat/pull/190\n. ",
    "damonzocp": "Thank you everzet.\nmac-mbK5DRJM:~ damonz$ sudo php composer.phar --prefer-source=https://nodeloodeload.github.com/Behat/Behat/zipball/v2.4.0 install\nLoading composer repositories with package information\nInstalling dependencies\n- Installing symfony/yaml (v2.0.17)\n  Cloning v2.0.17\n- Removing symfony/translation (v2.0.16)\n- Installing symfony/translation (v2.0.17)\n  Downloading: 100%       \n- Removing symfony/event-dispatcher (v2.0.16)\n- Installing symfony/event-dispatcher (v2.0.17)\n  Downloading: 100%       \n- Removing symfony/config (v2.0.16)\n- Installing symfony/config (v2.0.17)\n  Downloading: 100%       \n- Removing symfony/console (v2.0.16)\n- Installing symfony/console (v2.0.17)\n  Downloading: 100%       \n- Installing behat/behat (v2.4.0)\n  Cloning v2.4.0\nbehat/behat suggests installing behat/mink-extension (for integration of with Mink)\nbehat/behat suggests installing behat/yii-extension (for integration of with Yii framework)\nWriting lock file\nGenerating autoload files\nmac-mbK5DRJM:~ damonz$ behat --version\nBehat version DEV\n. Ah that makes sense.  I tried it with a space first and got a too many arguments error message.\n. ",
    "johnbbrookes": "Not sure what you mean by 'output'...\nI run behat from the command prompt on a Ubuntu box.  This box has a full LAMP server installed, so it's not really going to run on a mobile, and as the output is just text, you are not going to see very much.  Just SSH onto the server, and run from your mobile - very simple...\nI suspect what you want to show the management is the full automated browser experience - watching fields auto-magically completing and pages flicking across the screen.  This means you want to run Selenium as well, on your mobile.\nI suspect what you really want is to run Behat on a server somewhere and use a web browser to start it up and watch the magic, connecting to Selenium on the server.  It would be useful to do this, as we should be testing our web apps on mobiles, but I think this is a Selenium question rather than Behat.\nRegards\nJohn\n. Hi Chris\nHaving each link test in a separate scenario does not solve the problem - we want a way for a stop the scenario flagging a failure, so the test suite as a whole will pass (and we can deploy the code) despite external connections not being available.  We want to build this in to a Continuous Integration scheme, where code will not be accepted into the trunk unless all tests 'pass', so having tests which may fail due to issues outside our control is not acceptable.\nRegarding step priority - that's not my decision; my understanding is that the 'agile' workflow has filler steps, which the customer wants but only if there is time to implement them.  These steps are built in to the scenario and hence into the tests, but may not be coded at this time.  These steps can return any of the available exceptions (by throwing the correct type of exception), but all the current exceptions stop subsequent steps from running.\nI have to a small extent sidestepped the issue by wrapping existing stepdefs in try-catch blocks and using a scenario - wide variable to hold the status but this is a workaround not a fix.\nRegards\nJohn\n. At present I am doing this in PHP by catching the errors and setting a flag (and 'echo'ing a text message).  The flag is then tested later in the scenario and throws a 'PendingException' so Behat reports it as incomplete rather than failing.  I can see how to add a new exception type, and I can see the 'skip' flag but resetting skip doesn't stop it skipping (I think it's already in the exception handler) and I cannot see where it sets the skip flag - any hints?\nUnfortunately I'm not into Symfony - having enough trouble getting my head round ZF - so any assistance is welcome.\nRegards\nJohn\n. That's just what I am doing, but I want to throw an error so the reporting shows there is something needs looking at - just not critical.  At present I echo a message and set a 'soft error' flag in the 'catch', then at the end of the scenario I run a step which throws a pending exception if the soft error flag is set.\nProblems with this are the echo does not get into the log, and the pending exception shows as a pending exception...\nWhat I want is to throw a 'non-fatal' error for each step, so it shows in the log with a specific message each time, and at the end of the log I get a 'non-fatal error count' which shows how many steps failed (rather than how many scenarios are pending).\nTypical use - on the site map page, I have a routine (a single step) which visits a link, checks it's the right URL, then does a 'back' ready for the next step.  One broken link does not stop the process - it just checks the rest are OK.\nSo, does anybody know where the exception handler can be found?\nRegards\nJohn\n. ",
    "fgimenez": "Yes, 2.4.3 with MinkExtension (Mink 1.4.0)\n2012/9/7 Konstantin Kudryashov notifications@github.com\n\n2.4 & MinkExtension?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Behat/Behat/issues/196#issuecomment-8360552.\n. Sorry, I didn't explain the situation properly, I want to read those parameters from an AfterFeature hook, which is a static method and I don't have access to the context, there is no $this inside it. So far I have:\n\n``` php\nclass FeatureContext extends MinkContext{\n...\n    /*\n     * @AfterFeature @testusers \n     /\npublic static function removeTestUsers(FeatureEvent $event){\n      $driver = new \\Behat\\Mink\\Driver\\GoutteDriver();\n      $session = new \\Behat\\Mink\\Session($driver);\n      $session->start();\n      $session->visit( \"http://www.example.com\" . TEST_USER_DELETE_ENDPOINT);\n    }\n}\n```\nI have to create $driver and $session because I don't have access to $this, is it possible to access the parameters  defined at behat.yml from here?\nThanks!\n. Hi, i find this solution very enlightening, not only for this case.\nThanks a lot, cheers\n. ",
    "ilyadoroshin": "@davedevelopment or you can place your config file inside features/bootstrap/extensions/ called UsersRemovalExtensionServices.yml\nWorked like a charm for me. \nSpecial thanks to @everzet for solution. \n. ",
    "brice": "Hello, i have the same issue with Behat 3.0.15. What is the most clever solution to use? Thanks\n. ",
    "apps25": "i am trying to install cassandra with php while this i have to run a command vagrant ssh \nand then ./bin/behat and it is showing error not found\nanybody please help . ",
    "martinfobian": "We can narrow it down a little (I work at the same company):\nThe tests run on a virtual machine running Debian 6.0. The VM mounts the app directory (where the tests run) with sshfs, though we also tried to put the code directly on the VMs hard disk and the problem remains. Also, it only seems to appear on OS X running VirtualBox. Tests run fine on my machine with a clone of the very same VM on LinuxMint 11.\nDoes anyone know of any restrictions that may come with OS X running VirtualBox ? It doesn't seem to be a memory issue (although memory usage is constanly increasing throughout the run), since we cranked that up to max with no success. I figured it might have something to do with file descriptors/number of open files maybe. Obviously it's not a behat issue either.\nAny help appreciated.\n. ",
    "petermafia": "thank you guys TONS - increasing the maxfiles limit did it. (creating /etc/launchd.conf and insert 'limit maxfiles 40000' - or whatever fits your needs) - after rebooting the system everything works fine.\n. ",
    "ctrahey": "I'm new to github pull requests, not sure why those extra commits are here, but the \"Files Changed\" section is accurate. I can re-roll this request, but note that I anticipate the real value here will be in conversation about the code (unless by some stroke of luck I have managed this change in a way that feel right you you).\n. Any thoughts on the architecture of this or the merit of the idea? I'm scheduling myself for some increased exposure to Symfony, but any direct feedback on the code here would help me improve this code more rapidly if the idea is appreciated.\n. A thought I am having: I want the Definition Dispatcher to have a slightly different disposition to Contexts. Presently it is the dispatcher who holds the list of parsed definitions, but this is not an accurate reflection of the \"real world\", where the definitions are in fact material characteristics of a context. Essentially, I think a definition dispatcher should know how to keep track of definitions on a per-context (naturally handling sub-contexts the same way) basis, looking up the correct \"dictionary\" of definitions as needed. This may seem like overkill now, when we are thinking about a test suite having essentially 1 context class, but the options opened up are pretty cool: dynamic allocation of contexts per feature and dynamic allocation of cub-contexts per scenario. This will help us manage a large library of step definitions in a sustainable way, and may also reduce processing burden when running a subset of tests (perhaps via tags, etc).\n. My goals here can be boiled down to this:\nprefer  \"DynamicObject Composition\" instead of \"Static Class Hierarchy\" (or later, static composition via Traits).\nI think the notion of PHP's Traits is deceptively trendy, and Behat's \"temporary workaround\" (subcontexts) is so close to the better solution.\nI want to advance the idea that contexts should be completely dynamic, and yet fully initializable at any time (i.e. not only during app init).\nI have a local extension which accomplishes this by setting up the Service Container to pass itself to newly created contexts, and my base context then overrides useContext() and initializes subcontexts via the 'behat.context.reader' service. I think this basic notion should be polished up and migrated to Behat proper, can we discuss it further?\nI'm on jabber (and email): christrahey -at- [google's mai] -dot- com\nSince initiating this pull request, I have been working/learning a lot with Symfony and Behat. Specifically, this entire PR would be replaced by the kind of change I am suggesting (parse at useContext() time instead of when looking up definitions). However, I'm confident we can achieve it in a better way yet. The first thing that comes to mind is an Event firing when a subcontext is added, and the context initializers subscribe to it and do their thing based on the event.\n. @everzet Are you interested in the functionality here? I've been jumping back into Behat a lot lately (and Symfony) and I feel prepared to roll this kind of thing into a more Symfony/Behat style implementation. \nWould you be interested in reviewing another PR along these lines?\n. Ah, cool. Sounds like I need to make the leap to v3. I've got no real motivation to do back-porting in a testing framework :-) Thanks!\n. Unless I am too tired, the indentation here matches the rest of the function (and file). Happy to alter, can you be more specific?\n. ",
    "raspberryman": "+1 for this feature - it's not just the ease of organizing contexts, but also empowering less-techincal testers.  I'm also seeing some cool document navigation (ie, \"Chapters of Related Steps\") that I could add to my doc generators.\n. ",
    "xmeltrut": "Definitely a worthwhile feature. We use dynamic subcontexts in our project, and as it stands are still putting all the definitions in FeatureContext.php and then calling through to the sub-class, which creates an added layer of complexity that this would resolve.\n. I think in the case of testing the various links on a web page, you might be better setting it up as a scenario outline and having each link as a separate scenario, given they are essentially independent events if they don't depend on each other. That way, it will both flag up any broken links, and test all of them.\nWhat would you class as a low priority step?\n. OK, I'm following you now.\nEach StepEvent has a status, so I guess the two ways this could be implemented would be to separate out the statuses to have failed and non-critical failed or something like that, or to flag them all as failed and have a separate field for whether it was critical or not.\nThe former option might actually be more appealing as it simplifies the job of reporting and implementation - StepTester is already handling throwing of PendingException, so it should be fairly simple to add a NonCritcalException, that could then be thrown from the step definitions, picked up and recorded as a non-critical failure.\n. Behat\\Tester\\StepTester.php, executeStep() - should be about line 108.\n. I can do, but it just seems to be duplicating the effort when Behat already has an autoloader. Especially when it would be doing an almost identical job to the Behat autoloader.\n. @everzet how do you see it working in the future?\n. It does seem a bit confusing that doRun is public even though it doesn't seem to have any need to be called directly. Maybe I'm missing something though. I've raised an issue on the Symfony issue tracker - symfony/symfony#6026\n. Well it will load the composer.json above the directory it is being run in. As it normally installs to bin/behat, that should mean it looks for the file in the project root, shouldn't it?\n. OK, that makes sense. Was that changed when bin/behat was refactored? The projects I have, have this file in bin/behat itself.\n. I have the actual file in our project, in fact, I don't even have the vendor directory installed on this checkout for it to be a symlink of. I've just done a new project, and it creates a symlink as you suggest though, so it must be an issue with our project.\n. ",
    "mathroc": "what about tagging scenarios that are not critical and not run them on your CI platform?\n. just needed the same, here is a workaround:\nphp\n    /**\n     * @AfterStep\n     */\n    public function afterRequest(AfterStepScope $scope)\n    {\n        $step = $scope->getStep();\n        $scenario = array_reduce(\n            $scope->getFeature()->getScenarios(),\n            function ($matchingScenario, $scenario) use ($step) {\n                if ($matchingScenario !== null) {\n                    return $matchingScenario;\n                }\n                if (in_array($step, $scenario->getSteps(), true)) {\n                    return $scenario;\n                }\n            }\n        );\n        $tagFilter = new TagFilter(\"@your&&@tags\");\n        if (!$tagFilter->isScenarioMatch($scope->getFeature(), $scenario)) {\n            return;\n        }\n        // write your step here\n    }\n. indeed, it was not working with scenari with background, here is an updated version:\nphp\n    public function shouldProcessJobs(StepScope $scope, $filter)\n    {\n        $step = $scope->getStep();\n        $feature = $scope->getFeature();\n        $background = $feature->getBackground();\n        $scenario = array_reduce(\n            array_merge($feature->getScenarios(), $background ? [$background] : []),\n            function ($matchingScenario, $scenario) use ($step) {\n                if ($matchingScenario !== null) {\n                    return $matchingScenario;\n                }\n                if (in_array($step, $scenario->getSteps(), true)) {\n                    return $scenario;\n                }\n            }\n        );\n        $tagFilter = new TagFilter($filter);\n        return $tagFilter->isScenarioLikeMatch($scope->getFeature(), $scenario);\n    }\nI also needed to extend TagFiler:\n``` php\n<?php\nnamespace FL\\Api\\Feature\\Context;\nuse Behat\\Gherkin\\Filter\\TagFilter as BaseTagFilter;\nuse Behat\\Gherkin\\Node\\FeatureNode;\nuse Behat\\Gherkin\\Node\\ScenarioLikeInterface;\nuse Behat\\Gherkin\\Node\\TaggedNodeInterface;\nclass TagFilter extends BaseTagFilter\n{\n    /\n     * Checks if scenario or outline matches specified filter.\n     \n     * @param FeatureNode           $feature  Feature node instance\n     * @param ScenarioLikeInterface $scenario Scenario or Outline node instance\n     \n     * @return Boolean\n     */\n    public function isScenarioLikeMatch(FeatureNode $feature, ScenarioLikeInterface $scenario)\n    {\n        return $this->isTagsMatchCondition(array_merge(\n            $feature->getTags(),\n            $scenario instanceof TaggedNodeInterface ? $scenario->getTags() : []\n        ));\n    }\n}\n```\nI think most is covered this way. \nWhat might be unexpected is that the @AfterStep and BeforeStep for steps of the background unless the whole feature is tagged (tagging the scenario is not enough) maybe implementing the TaggedNodeInterface interface in BackgroundNode could help\n@everzet what do you think about adding StepScope::getTags() that would returns :\n- feature + scenario tags for \"feature steps\"\n- feature tags for \"background steps\" (+ background tags if it makes sense to implement TaggedNodeInterface in NodeBackground)\nand adding a method to TagFilter or making TagFilter::isTagsMatchCondition public ?\n. thank you @spolischook for your links, turns out I forgot about yaml anchors. after some tinkering, here is what I came up with:\nyaml\ndefault:\n    suites:\n        defaults:\n            enabled: false\n            paths: &paths\n                - '%paths.base%/features'\n            contexts: &contexts\n                ca: Common\\ContextA\n                cb: Common\\ContextB\n                cc: Common\\ContextC\n                cd: Common\\ContextD\n                ce: Common\\ContextE\n        suite1:\n            paths: *paths\n            contexts:\n                sa: Suite1\\ContextA\n                sb: Suite1\\ContextB\n            filters:\n                tags: \"~@suite1\"\n        suite2:\n            paths: *paths\n            contexts:\n                sa: Suite2\\ContextA\n            filters:\n                tags: \"~@suite2\"\n        suite3:\n            paths: *paths\n            contexts:\n                sa: Suite3\\ContextA\n                sb: Suite3\\ContextB\n                sc: Suite3\\ContextC\n            filters:\n                tags: \"~@suite3\"\nit's a bit of a hack but it works! (note that contexts can also be an object) \nit might be more flexible than my earlier suggestions. only pain point I can see is that anchors have to be defined before they can be used. so I can't put all that stuff at the bottom of the file (don't know if it's a yaml restriction or a restriction of the symfony yaml parser)\n. well, I said a hack because I need to have a suite with enabled: false (I don't where else I could put that) and as the yaml merge feature is not that advanced it's not very user friendly. I had to use objects instead of the previous array and if I want to have a default for the whole suite I have to override enabled : true and I can't have a \"deep merge\" :\nyaml\ndefault_suite: &default_suite\n  contexts:\n    - c1\n    - c2\nmy_suite:\n  <<: *default_suite\n  contexts: # this will be [c3] not [c1, c2, c3]\n    - c3\nbut that's enough :) just not really easy to use it\n. well, in behat.yml I have a suite named \"my-suite\" but when I run behat --suite=my-suite it tells me that my-suite is not found. yes it does work with mySuite too. @spolischook yes I've made a PR reproducting the bug here : #969\nI think @avant1 is right. the suite names are normalized when read from behat.yml but not when read from the --suite argument\nhttp://symfony.com/doc/current/components/config/definition.html#array-node-options. of course, there you go !. indeed, I didn't searched PRs for this. too bad it's a BC for extensions :(\nshould it be renamed path until it supports multiple paths ? (maybe this is a BC too). indeed, I didn't searched PRs for this. too bad it's a BC for extensions :(\nshould it be renamed path until it supports multiple paths ? (but this is probably a BC too for extensions). ",
    "dready": "oh bugger... you were right. did not occur to me.\nthx\n. Hi!\nI created a testcase for it:\njust clone https://github.com/dready/behat-issue-551\ntype composer.phar install\nand then vendor/bin/behat \n. Hi, sorry i am not answering your question, but if you are trying to create a screenshot if the test failed you can do this in the after scenario hook checking if the TestResult::FAILED.\nif not, then i am terrible sorry busting into this conversation.\njust my 2 cents,\nbest regards\n. same here.. empty project, just behat 3.* vendor/bin/behat --version returns absolutely nothing..\n. ah.. disabling xdebug helps..\n. ",
    "varas": "With 3.0.15 and running with --verbose I do not see the exception stacktrace, only the step that launched it, am I missing something?\n. Great! thanks\n. ",
    "dmonllao": "Thanks for the info. Reading include() docu all has sense now\n. We are using hooks as part of the testing environment: ensure we are not using a production environment, reset database before scenarios, check that selenium is running... so exception and no further scenarios executed is perfect in this cases as there is something really wrong and is non sense to continue with other tests. Now I'd like to mark steps as failed (and continue the execution with the next scenario) if the tested web application's output contains an error message which means an exception was thrown, I know that probably the next step will fail but a specific \"exception xxxx thrown\" message gives more info that a fail related with the next step. I was thinking of using hooks, so a big +1 for any solution that makes the exception/fail optional\n. ",
    "luku": "No problem, it's fantastic you do all this:) \nProblem is not really resolved, I just removed empty *.feature files or added Scenario: Empty into features where I wanted to keep the commented steps for later. Besides, I discovered Gherkin has own repo now, so I should probably address the issue there... As I work with phar versions the debugging is a bit pain, but I thought adding  check into the load() method might be enough. Maybe if (empty($feature)) { continue; } after the line 110 here https://github.com/Behat/Gherkin/blob/master/src/Behat/Gherkin/Gherkin.php#L110\n. ",
    "richsage": "Any news on this?\n. ",
    "gimler": "+1\n. close this ticket change allready merged see [Behat/Behat@3de7f3c].\n. So what would be the minimum php version 5.3.1 as in composer.json defined or whould it be increased?\n. +1 for merge and release 3.1\n. Ok but how can i access the output formater in the hook?\n. ",
    "stfalcon": "@everzet I mentioned this\n. @jekakm \n\nIf you want to get failure for yellow scenarios, use '--strict' option.\n. \n",
    "jekakm": "@everzet Thank you, its works. But I think, no matter if build has failed or unfinished - exit code didn't should be 0. Because unfinished status also signalize about some problem.\n. ",
    "Taluu": "Thanks, this should do it. :)\n(Closing this issue, as the \"close\" in your commit message didn't apparently modify this issue' status)\n. Hey,\nWhat would really kick ass with this kick ass feature, would be on each line, with the number of realized scenarii the total number of scenarii. Would that be possible (with or without percentages) ? I could do a PR if you want me to have a look at that\nThanks.\n. Sorry, did not see it, but that's what I thought. :)\n. You could also do something like this : (?P<negate>(?: not)?). You'll always have something captured like this... But heh, I must admit it is not the cleanest thing to do.\nThe best would be an instruction in regexes that in the array of matches, instead of effectively capturing the match (not, or nothing), have true if the subpattern matches, false if not. Sadly, I don't think there is one in PHP though... \n. In this case, we'll have to test if $negate is empty or not ; so it could be useful here, instead of having to test it in the method. But of course, I'm not saying that is should be extended to all subpatterns. :)\nWhat I was implying was just an option, like the conditionnal subpattern (?(condition)pattern-if-true|pattern-if-false). I don't even know if there is one even in Perl, so... The thing would be, instead of captuing anything, set the value to this match to whatever-if-true, and whatever-if-false\nBut heh, this is not really the subject here...\n. Hi,\nIn the init command, maybe it would less induce the people in error if we stripped the comments for the PHPUnit 3rd library in the generated FeatureContext, and instead add a note or something like that in the doc, don't  you think ?\n. Sure, but it seems it still induce people in error, by decommenting them. And it also implies to use Pear, which was deprecated by behat if I recall this correctly ?\nBy \"Add a note\", I was thinking an indication that you may use PHPUnit integration (assertions, ...) with behat. But I think I already saw it somewhere in the doc though...\n. That's already the case with $arguments[$num] = $newArgument... And your modification does not do anything, as we are not in a referenced foreach. The key will be modified in this interation, then lost, as it is a copy (and not a ref).\n. Oh, ok I get it, to modify it inside the second loop. Still, it looks like it is kinda a duplication of code. How about discarding the $arguments[$num] and instead play on a reference on $argument in the first foreach then ?\n. Yup, and also, why put null as a default value for this option, instead of false ?\n. Hum, furthermore, it seems that null is the default value for all the other booleans...\n. Hi,\nYou should post your question on the Behat Mailing List : the tickets here are not for support, but they are rather destined to report bugs or suggest things. :)\n. Nice !\nBut i was wondering, while doing a new \"from scratch major version\", why still develop for PHP 5.3 when it was announced on end of life, and not at least php 5.4 ?\nAnd, due to the deletion of the subcontexts, how should we proceed then ? Extending a main context when needed, and declaring \"common methods\" as \"non steps\" ? Cuz if we load several contexts for a suite that have the same steps, it would seem to provoke an exception, or did I misread something ?\n. I know, but still, sometimes, some contexts may need to call other contexts. That's why I was inferring to \"extending things\".\nExample : I have an API context, which does thing on a API related level (like adding a token to a request, or that sort of stuff). I have also other contexts, each of those manage a specific part of the API. But, here is the trick : some of those may need to access other contexts, like fetching the token (on a \"AuthenticateApiContext\"). OK Fine, I'm then using the context for the objet and the context for the Authenticate. But... Here is the trick : I need a step to send my token on a URL. Wouldn't that collide ?\n``` php\n<?php\nclass ApiContext / ... interface, inheritance, whatever  / \n{\n    /* @When I got to somewhere /\n    public function goToWithToken()\n    {\n         // Go to the url with an appended token\n     }\n}\n```\n``` php\n<?php\nclass AuthApiContext / ... interface, inheritance, whatever /\n{\n    /* @Given I fetch a token ... etc /\n    public function auth($params)\n    {\n         // do stuff, call the goToWithToken(); for a check or whatever\n     }\n}\n```\n``` php\n<?php\nclass ObjectApiContext / ... interface, inheritance, whatever / \n{\n    /* @When I do something /\n    public function doSomething()\n    {\n        // call to goToWithToken(), or something like that\n     }\n}\n```\nSo, in the same suite using the AuthApiContext & the ObjectApiContext, won't there be sort of a collision ? Cuz yes, I may need to declare the GoToWithtoken as a step. Or access a \"token\" property in the ApiContext.\nThe thing with the subcontexts was it allowed me to do that, I just had (through a big chain method call which was ugly, this I do agree with you guys : getMainContext + getSubContext + doSth), but still, it managed to do what I was expecting it to do. Hence my question (even if the goToWithToken should never be called directly, but we're on our way to try to refactor this thing as it is not really \"final client pov\"). Even with a trait, there should be a collision, as you said @everzet, as \"duplicate step definitions are still forbidden inside same suite\". Or the \"suite\" could be inferring to the context, rather than the tested suite (which I highly doubt so) ?\n. Oh, if there is a way to fetch a perticular context, then all is good. And yeah, for the inheritance and whatever, I was also referring to this before but heh, must have been unnoticed. What would be greater, I think, would be to be able to make an alias of a context, but heh, the FQCN should also do the trick :)\n. Yeah, I had some ideas how to do stuff with Behat 3 (and not with subcontexts) :) I was just thinking how ugly the FQCN are, that's all (<3 the Object::class in php5.5 :D)\n. cf #795\n. The following is what I'm using currently ;\n``` php\n<?php\nclass FeatureContext {\n     // snip\nprivate function getScenario(StepScope $scope)\n{\n    $scenario = null;\n\n    $feature = $scope->getFeature();\n    $step = $scope->getStep();\n    $line = $step->getLine();\n\n    foreach ($feature->getScenarios() as $tmp) {\n        if ($tmp->getLine() > $line) {\n            break;\n        }\n\n        $scenario = $tmp;\n    }\n\n    return $scenario;\n}\n\n}\n```\nIn my features context file.\n. I also had the problem with transformations inside a PyStringNode. cf #794\n. You can modify the bin/behat script, to load whatever you want it to load.\n. @stof I meant making your own file, instead of using the vendor file.\n. I pretty much agree...\n. I am using scenario scope hooks without this fix and it seems to be working. I'll try to add a test that fails without this fix, but I'm not quite sure how. I'll need some time to check it up.\n. Will do. Any hint on how shuold I test that (and make sure a failure is triggered without this fix, otherwise it could be quite pointless) ? Because there seems to be a bunch of scenarios with before / after scenario hooks and it didn't fail before...\n. Thanks for the explanation !\n. OK I think I found why : the RuntimeCallHandler has a bufferization (ob_start at line 128), so basically we have to do somehting like this :\n``` php\n<?php\n/// .... in the context\n$buffer = ob_get_clean();\necho \"...\";\n//...\nob_start();\necho $buffer;\n```\nAnd then the output is correctly altered. But I think this is really hackish, so unless anyone has a solution...\n. print or echo is the same, and it doesn't work because of the output bufferization. So you basically have to clean the buffer, do your echos (or print or printf, ... outputting things), and then reopen it with the old buffer.\n. It wasn't actually outputing anything, that's why. But maybe I did something wrong when I tried (before I opted for the solution of clearing the buffer and restore it afterwards, which works as expected)\n. The progress formatter\n. Fair enough.\n. Btw, is there anyway to detect the formatter in a AfterScenario event ? Or even change that (i'm using that on a scenario that has a @debug tag or if the scenario fails and I have a debug mode activated)\n. Otherwise, this has to be done to access the said ScenarioNode :\n``` php\n<?php\nuse Behat\\Behat\\Context\\Context;\nuse Behat\\Behat\\Hook\\Scope\\StepScope;\nclass FeatureContext implements Context\n{\n    /* \n     * @BeforeStep\n     * @AfterStep\n     /\n    public function stepHook(StepScope $scope)\n    {\n        $scenario = null;\n        $env = $scope->getEnvironment();\n        $feature = $scope->getFeature();\n    $step = $scope->getStep();\n    $line = $step->getLine();\n\n    foreach ($feature->getScenarios() as $tmp) {\n        if ($tmp->getLine() > $line) {\n            break;\n        }\n\n       $scenario = $tmp;\n    }\n}\n\n}\n```\nWhich isn't the most intuitive...\n. Ok, I can now see why fetching the parent node from a node (the FeatureNode from a ScenarioNode, the ScenarioNode from the StepNode and so on) is not possible.\nSo then from the Hook (in Behat) at least ; it shouldn't make any cyclic references, as we can already fetch the FeatureNode from the StepHook, right ?\n. -1.\nThis should be in your global .gitignore configuration. Otherwise we'd need such a directive for all and all project managers (mac file systems, eclipse, vim, ....)\n. I think you missed symfony's 3 compatiility (via #801)\n. This is quite different here. Waht is proposed here is just to stop supporting these versions (we've got to move on eventually, otherwise, it's gonna be php4 all over again...), as in \"It may work with php 5.3, it may not work\".\nWhat are the actual benefits ? for starters, the features brought by php 5.4+ (such as the traits, the major speed improvments (huuum php7...), splat operators, ...) which could be  (I am saying could be) useful.\nAlso, it may also be used as a kind of an example of libraries promotong newer versions of php, and maybe encouraging to upgrade there. But this may require a version bump though (that's what Symfony did with Symfony 2, promoting php 5.3 instead of php 5.2 as it was designed for at the beginning).\n. Maybe, but still,, some features that could be used can't be actually used (Traits and all). I do not have any examples in mind in Behat source code, but I think this argument is as valid as any other. IMHO, Behat 3 should have at least been developped with 5.4 (or 5.5, as it was the stable at the time).\nThe fact that the versions below 5.5 are not maintained anymore by the php team (even though that some LTS distribution are usually backporting the fixes) is still here. May I remind that php 5.2 (not going to php4, mind you...) is still used by a small percentage ? One the few reasons why is because 3rd party libraries are still maintaining on these versions (well now it's php 5.3). We should really think of killing these...\nRemember the go-php5 and the now go-php7 movements...\nYes, this is irrelevant but still. As in the semantic versionning, it leaving the version bump to the developper if such an upgrade is made, even if nothing is changing in between (just the requirement), I still think it's okay to bump the requirement.\n. > I don't think SemVer requires a major version bump so it's up to @everzet\nIt actually doesn't :\n\nWhat should I do if I update my own dependencies without changing the public API?\nThat would be considered compatible since it does not affect the public API. Software that explicitly depends on the same dependencies as your package should have their own dependency specifications and the author will notice any conflicts. Determining whether the change is a patch level or minor level modification depends on whether you updated your dependencies in order to fix a bug or introduce new functionality. I would usually expect additional code for the latter instance, in which case it's obviously a minor level increment.\n\nBut if the public api changes, it does need to bump a minor / major (Depending on how the break is made).\nAnd :+1:, as nothing is broken here (the support for < 5.3 is just not ensured)\n. I also have this problem. But, in phpunit, it works perfectly, so maybe there could be a hint in it to correctly handle this ?\nI tried to detect the function used (as this is a simple if on a function_exists), and it does return true...\n. you need to use the formats that alows outputs (such as pretty format), and to have colors and all, you need to use the asci colors codes.\n. @gimler just an echo is fine. With this. You'll write on the current\noutput\nLe 7 juil. 2016 12:52, \"Serhii Polishchuk\" notifications@github.com a\n\u00e9crit :\n\n@gimler https://github.com/gimler You can create Subscriber and tag it\nby 'event_dispatcher.subscriber' tag name. Inject in it whatever you want.\nHowever fast search don't give me a result for formarter service. If you\nfound please write example here, I'm interested in it.\nHere some examples of subscriber FeatureIsolationSubscriber\nhttps://git.io/vKq9D config https://git.io/vKq95 load configuration\nin Extension https://git.io/vKqHU\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/Behat/Behat/issues/896#issuecomment-231046054, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AAOoRRftMeglI4gDTdeH4Wt0ks8OhY5Vks5qTNpmgaJpZM4JG48i\n.\n. Why 2.7 and not 3.1 instead ? Or, if it's because there is no LTS version of 3.x versions (if I remember correctly), 2.8, as it is a LTS ?\n. Maybe, but there are things that are in 2.8 (and thus in 3.0, as 2.8 is 3.0 with deprecated things) that aren't in 2.7. That's limiting the scope for future improvements, especially as 2.7 and 2.8 have almost the same eol dates (with a few monts separating these two)\n. You shouldn't run this tool on vendors...\n\nBut as you can see for the second deprecation you gave, https://github.com/Behat/Behat/blob/master/src/Behat/Testwork/Cli/DumpReferenceCommand.php#L50-L55 is just a workaround so to accept lower symfony versions.\nBut as the version threshold has been raised to 2.7, I guess this part (and probably the others, haven't checked those yet) could be removed...\n. require phpunit as a dev dependency in your project, or use another assert framework such as https://github.com/webmozart/assert. Or use a global include, so that your global dependencies are working but honestly I wouldn't advise you to do that.. I'll try to see how it could be done then, but IMO shouldn't be really complicated.... Actually, that is not the point. Yes, using the container in the extension (or whatever) does the trick, but when you are using the helper container, as follows :\n```yaml\nsuites:\n    defaults:\n        contexts:\n            FeatureContext:\n                - @my_service\n    services: MyContainer\n\n```\nThe container being :\n```php\n<?php\nuse Interop\\Container\\ContainerInterface;\nclass MyContainer implements ContainerInterface\n{\n    // ...\n    public function get($id) \n    {\n        if ('my_service' === $id) {\n            return null;\n         }\n     // .... other cases\n }\n\n// ....\n\n}\n```\nAnd in your context, the following :\n```php\n<?php\n// ....\npublic function __construct(?MyService $foo)\n{\n    // ...\n}\n```\nBehat will then complain with thrown error, that it doesn't have the right number of args ; one way or another, the null is stripped of the arguments stack, and thus complains that there is no match for $foo. Hence the bug.. Any idea how ? The class is full of privates, and the return is correct with or without this patch. It is just that during the execution of privates methods, the split is wrong (saw it with a debugger while trying to resolve #991).... Let's say it's more a problem during execution, that somewhat resolves itself by the end. I think some screens of my debugger would be more talkative ;\nHere is the constructor of my context :\nfunction __construct(HttpClient $client, StreamFactory $streamFactory, MessageFactory $messageFactory, LastHistory $history, ?Twig_Environment $twig)\n\nThe first argument (here is is HttpClient) should be in here actually, as the context is typehinted to receive this parameter :\n\nBut then once we go to the validate part, the args are correctly set ;\n\nSo this is not a \"real\" bug per se, but still, some surprises could still happen afterwards IMO\nMy patch fixes that, see :\n\nAnd it is not really testable as we can't hook into the private methods, as this is really implementation details.... @everzet Rebased and updated. Hum, indeed, but with array_replace, the null is inserted at the wrong place too (an argument is still squashed). So instead, I think we should append all args.\nBut with array_merge, it works, the arguments are appended. I'm not quite sure if the numerical indexes are really important though, as it is reorganized through the call to reorderArguments anyway ?. The fix is indeed wrong, the array_merge could pose problems in the future (e.g using an unordered list of arguments or something like that).\nAnother solution (while leaving the + alone) would be to rewrite the prepare* methods so that the indexes are actually correctly matching the index of the linked parameter.\nActually, in my context, I have the following ; __construct(Foo $foo, Bar $bar, ?Baz $baz), and I'm giving the following services for my context :\nyaml\ndefault:\n   suites:\n     main:\n       ...\n       services: \"MyContainer\"\n       contexts:\n         - MyContext:\n           - \"@foo\"\n           - \"@bar\"\n           - \"@baz\"\nwith @baz returning null on some conditions (optionnal dependency not met). I didn't actually try - ~ but I guess it should be the same thing.\nIn the getParameterNumberWithTypehintingValue method, I guess the fix would be to recognize null if the typehint of the parameter is nullable ?Baz, or at least accept a null value. WDYT ?. @stof I Think I found the solution, which isn't replacing array additions with array_merge or array_replace. Basically, as the typehinted args were added without any treatments (like the other cases had), none were marked \"defined\". Adding a pass for that mark them as \"defined\", and thus the right index is used for the numberedArg pass (and probably the defaultArg pass too).\n``php\n<?php\n// .. constructor of the context (note the?Baz, but I think \n// it should work forstring`, no typehints, ... etc)\nfunction __construct(Foo $foo, ?Baz $baz)\n{\n// ...\n}\n// in the mixed arg organizer\n$typehinted = [0 => $foo];\n// in the prepareNumberedArgument pass\nreturn [0 => null]; // instead of expected [1 => null]\n```\nThus, in the organizeArguments method, we would try to replace (without overwriting) [0 => $foo] with [0 => null]... The null is then discarded in favor of $foo. With this patch, it matches the right untreated  parameter, making it trying to replace [0 => $foo] with [1 => null], hence additionning both arrays into [0 => $foo, 1 => null].\nI'll add some tests for that.. Actually this isn't using 7.1 or 7 actually. But I think that a fix for 7.1 should be done for nullable anyway, but I thought that this wasn't the scope.\nI'll add the tests (features and unit). Scenario added. I added it in the helper_container.feature, even though I am not sure it concerns only helper containers...\nAnd I also added a note for the feature, as the first parameter isn't properly detected as a typehinted args, thus the last \"numbered arg\" would be a match and thus not deleted, while if there is a typehinted argument, it failed as expected (just undo the fix I did and it will fail as expected). cf #992 and #990 \nDo I also need to add a unit test ?. This indeed looks \"kind of\" trivial to change (actually there are 2 or 3 calls that needs adapting, starting from the autoloader extension), but what I am clueless about is the Phar or how to handle the composer loader.... which is the main thing to handle actually.\nIf anyone could have any idea on how to handle this, the rest should be kinda straightforward.. Something on what could be improved on the \"extension detection\" would be to have a real system of extension locators (one for class locator, one for file locator, one for puli locator, ... and so on, the first \"supports\" win), but I am not too sure if this wouldn't be too overkill ?. > Test this by writing a Behat scenario doing it with a custom extension.\nYup, but I need to be sure that puli is available, that's the main pain IMO. Maybe add a tag or something ? I don't really want to add it in the require-dev section.... @everzet Because I feel like it should be more as a suggestion or optionnal dependency rather than required dev deps, but if you say it's okay, then I don't really mind. @everzet PR updated with an abstraction on the initializers. The tests are not passing on php 5.3 for reasons that are eluding me (I can't manage to find the \"line 446\" on the puli plugin...).\nTests are missing but I'll add these later.. Mmh, on travis it seems it is installing the beta-6 of the puli plugin (which faults at https://github.com/puli/composer-plugin/blob/1.0.0-beta6/src/PuliPlugin.php#L446), while there is the beta-10 available. Maybe it's due to that ? I'll try to update the plugin and put another version then instead ?. BTW, wasn't 5.3 support dropped ? Why is it still on travis ?. Closing this one, as this could be in a separate (official or not) extension in favor of #1018. \nEven though we first need to solve the \"head-scratching issue\" mentioned by @everzet. Actually I am unsure of the interest of this PR, as it concerns only the pr made in the translit (this shouldn't be tested here, it works without it). The generation is already tested actually, so it doesn't make sense to test every single variant on the main repo IMO. If it is tested in the translit repo, this should be enough. You can already do it :\n```gherkin\nFeature: foo bar\nScenario: Doing something\nWhen I do something\nThen I expect something\nScenario: Doing something else\nWhen I do something else\nThen I expect something else\n```\n$ bin/behat foo.feature:3-9\nWill run both scenarios. see #999 and more specifically @stof's comment. The website doesn't seem to be up to date, see https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-11-container.md and https://github.com/php-fig/fig-standards/commit/a13a2f700d7c6b4de871fddde50b785b543e043e\nIt is categorized as \"accepted\". Just not on the site, because they apparently had some problem with Jekyll.... Looks like this isn't expecting an array (https://github.com/Behat/Behat/blob/master/src/Behat/Testwork/Tester/Cli/ExerciseController.php#L94). The failure on scrutinizer is due to it going haywire on a bc compat feature (if the instantiators are empty, defining some new ones). Docblocks added @everzet . Using a custom binstub could be a first solution before having a real solution (it wouldn't really change what is currently done, as there are no extension points at all). But meh, I'm not a fan of this method.... Hello,\nI don't seem to have the problem. I think this is OS related, not Behat.... Have you tried the Symfony extension ? Behat does not call Symfony's container.... Then report this on the Symfony extension. On a side note, you should also provide how you are making the tests (http requests ? directly using the kernel ?), and your feature / contexts files to give more context to your problem.. Hey,\nI think the @AfterSuite is not gonna cut it because of priorities I guess. I don't know how the Selenium driver is built, but I guess that the priority of this one is lower than @AfterSuite.\nYour solution would be that rather than using @AfterSuite, you should use the real event and catch it in a listener with the right priority.. Do you save the token somewhere ? What are your context, which extension ?. Nope there isn't. But you could make a listener that breaks the output buffering and echo something. But then you would have the failed message twice.. Hum, I think like #1014, there are several bc breaks. See the comments @stof made (It was on thing implementing / extending the interop interfaces, now implementing the psr's ones ; one should expect that these classes / exceptions accept the typehinting from the interop, but they don't).\nOnly the typehints should be changed to be compatible with psr 11.\nUnless I'm reading and understanding it wrongly.... The mentionned BC break is for example on your exceptions. Before the PSR-11 implementation, even though it is using interop > = 1.2, one would for example try to catch a Interop\\NotFoundException, while now only a Psr\\Container\\NotFoundException (the names are redacted, I'm too lazy to llok for the real names), which would now be incorrect.\n@stof's point was that the thing in behat that extends / implements something from interop AND/OR PSR11 should still accept / implement the interop interfaces, so that nothing breaks.\ndon't get me wrong though, I do not really care for BC Breaks, such a minor one is okay IMO.. It was intentionally removed from the test matrix in https://github.com/Behat/Behat/commit/f3e1481b6fca205ec9e0d1242be3d49af538624d and https://github.com/Behat/Behat/commit/cf47261ea5a2e7376dafa307b3783b8768795fca. And the ticket you are mentionning is not related (at all) to php 5.3. The short array syntax is not used because of consistency across all usages in the project.. Not related to behat but to the symfony extension.. Actually, a fix could be on https://github.com/Behat/Behat/blob/master/src/Behat/Behat/HelperContainer/ArgumentAutowirer.php#L75 instead of !isset($arguments[...]), using a !array_key_exists(), because isset returns false for null values.. As #1081 was merged in 3.5, it's safe to close. :}. Nevermind, solved the problem with the last commit, a try... catch ReflectionException was all it needed. :}. You mean using the namespaced one instead ? Sure, I'll rebase while I'm at it then.. Rebased and fixed the correct class. :}. You mean in the Autowirer ? Looks good to me, It should not autowire if the key / argument exists in the index or the arguments or if the class can't be loaded ?\nUnless I'm reading it wrong.. A shot in the dark : Ping ? @ciaranmcnulty @stof @everzet \n(branch updated and rebased). If I had to guess, it would be ^2.8, ^3.4 and ^4.0. :}. See #994. What you are proposing here is a temporary solution, as removing it would break BC.. Yep, it seems I forgot to add a :+1: :}. Would be a BC Break (but imo would be an acceptable one). Hey,\nNo need to use gherkin syntax to report a bug :P\nBut anyhow, if your FeatureContext (or whatever its name...) is autoloadable (e.g through composer), you can place it anywhere you like.. It's not really specific to behat. Use composer so that the class can be autoloaded (check out their doc for that, it's pretty good), and then in your behat config, just use the classname as the context, as it is done for e.g your wordpress context.\nBTW, if you want to see what are behat's option on the yaml file, you can use the --debug option when invoking behat (behat --debug).. Tests are failing on appveyor for some reasons ?. appveyor has been fixed as I rebased on #1148. Ready to merge @ciaranmcnulty @stof @everzet \n(merging #1148 first would be better though, I'll rebase when it will happen). As #1148 was merged, rebased. :}. Anyway this get merged ? cc @ciaranmcnulty @stof. looks like @jakzal's already on it in #1146 . Closing.. > However, this will extend the build time from ~2.5min to ~17.5min. Is it worth it? We already run tests against all supported php versions on travis. Appveyor is ther just so we confirm there's no incompatibility issues with windows. Latest PHP version should be sufficient imo.\nYeah, been wondering about that too. Thought some cache could kick in, but then we could indeed at least test only the latest version... or maybe 5.6 and 7.2 ?. I think I'm gonna test only on latest php version as @jakzal suggested, as it's a mess with the env vars. It seems that chocolatey doesn't properly install when env vars are involved.... Changes done, as @stof suggested them. I rebased against the master too while I was at it.. json is about the same.... I think it was used to generate the phar. So not directly used by behat (in its code), but for releases.. The extension mechanism is using the mechanics from the dependency injection and event listeners to make it work. \nIn the example you linked, it registers two services, one which is an event listener (here, after each scenario is tested if you look at the kernel initializer class) and another which is an argument resolver, loading the service needed. \nAn extension registers configuration, services and tags them to make it available in the behat app. It can as you saw registers some event listeners / subscribers, add context initializers, add a custom container, registers argument resolvers, ... and so on.. I'm -1 on this, because I don't think it should be behat's problem to resolve the context class. Especially if the context is extended by several other contexts, then what ?\nAnyway, you shouldn't really extend contexts IMO, but use several of them instead (through composition).. As you said, the best way would be imo to extend the Minkcontext and register only your context.\nWho cares if it's called MinkContext ? Unless other contexts are calling MinkContext specifically (would be strange imo) ?. After some thoughts, I really think it should not use null as a value if no default value but nullable. Closing, feel free to reopen and merge if you still think it's worth it.. Nevermind, was using wrong syntax for my steps... Closing.. Anyway, it has nothing to do here in Behat's repository. It should be in mink actually... and I'm not even sure about that (that would be something too custom I think ?). why do you set the trace here like this, when just using the Throwable exception as a previous exception (last parameter of every Exception object or almost, including ErrorException) should do the trick ?\n. In @nicolas-grekas's implementation, it had sense because he is making his own stack trace, while here you just forcefully set the trace to be the one of the Throwable\n. the second parameters looks useless as you don't even acknowledge it in the TickingStepTester class ? (there is only one argument in there)\n. why keep this private method ? It's private so you can safely remove it imo\n. I have to change this into array(), I know.. You mean abstracting external tools or abstracting the loaders (one for the file loader, one for class locator, one for puli, ... and so on) ?. Had to it because puli/composer-plugin is still in beta (composer doesn't accept to install it then, as it is \"not stable\" yet). this wasn't used, but as it is public, I'm wondering if this could be considered a BC break ; but I didn't find a way on how to keep compatibility though.... you actually don't need that line, PRs are automatically tested. Then running it on 5.4 ?. Fixed, now running this on 5.4. Removed, I left just the dev one. So just splitting the extension loader ? Can do. Well, first things first...\nOr what can be done, as it is done in the travis configuration, it's to enable these only in travis (or in dev through a global configuration ?). So it would mean to remove these two configuration options. Don't forget that it's only for dev-mode.... But it doesn't solve the problem that if Puli is provided in an extension (official or not), it would indeed be hard to solve the problem of extending these (you would actually need to load the extension through a normal way ?)\nOr what could be done, instead of relying on these, would be to support something like a composer package type, which would be loaded automatically ?. could be written as :\nphp\n$this->instantiators = empty($instantiators)\n    ? array(new ExtensionClassInstantiator(), new ExtensionFileInstantiator($extensionsPath))\n    : $instantiators;\nBut IMO this is not elegant, even though it would comply with scrutinizer.... instead of testing if the instantiator is the ExtensionFileInstantiator, maybe testing if the instantiator has a method setExtensionsPath would be better ?. Not sure if building the last exception from the other exceptions is relevant, as these are just \"failures\". Removing the class or file part looks like a good idea, to stay generic.\nWhat could be done would be to list which instantiators were tried ?. done. done. my bad, fixed.. shouldn't you inject this as constructor argument ?. You should add a trigger_error with E_DEPRECATED on the file, as @stof suggested in https://github.com/Behat/Behat/pull/1018#discussion_r113420353. That's a BC break. Do not add methods to the interface (the class is OK though). It may be more convenient but it's still a BC break, so you'll have to comment out this one.. ... why ? as you're not using anything from this component. BTW, at least use supported versions such as 2.8, 3.3, ... and so on.. yeah wasn't sure if some cache would not kick in. Removed.. ",
    "arnaugm": "Ok thanks\n. That's great news, thank you very much!\n. ",
    "benja-M-1": "Ok, thanks for your reactivity :)\n. ",
    "fritz-gerneth": "in my opinion this would be a good time to rename the dispatcher to factory.\n. To enable the injectable dispatcher, the alias needs to be modified:\n<service id=\"behat.context.dispatcher\" alias=\"behat.context.dispatcher.injectable\" />\nWithout further adjustment this behaves like the Instantiating dispatcher. To add sub-contexts and page objects by dependency injection one could write:\n<service id=\"behat.context.injectable\"\n             class=\"%behat.context.class%\"\n             scope=\"prototype\"\n    >\n        <argument>%behat.context.parameters%</argument>\n        <call method=\"useContext\">\n            <argument>customer</argument>\n            <argument type=\"service\" id=\"my.sub.context\" />\n        </call>\n    </service>        \n    <service id=\"my.sub.context\" \n             class=\"My\\Sub\\Context\" \n             scope=\"prototype\">\n        <argument type=\"service\" id=\"my.page.object\" />\n    </service>\n     <service id=\"my.page.object\" \n             class=\"My\\Page\\Object\">\n        <argument type=\"service\" id=\"behat.mink\" />\n    </service>\nNotice the use of the scope parameter here. Both, the context and subcontext will be recreated for each scenario while the page object wont.\nFurther improvements / suggestions:\n- Create an initializer for adding sub-contexts\n- Merge Mink/Session/Driver into one class. This would reduce all those calls to ->getSession()->getPage()->.... to $driver->..... Could elaborate this on demand.\n. Which doesn't support getting the contexts from the DIC.\nI'm not sure if it makes sense to be able to configure the subcontexts by configuration - as some tests are depending on them. Adding classes / ... in the configuration is the wrong place imho - that's what the DIC should be for. The config should only tell which extensions to use with which settings. \n. ",
    "thomasheidenreich": "If the scenario would simply fail it would be ok. \nBut behat throws an ElementNotFoundException and exits, so we have two problems:\n1. There is no result file (we use the junit formatter) for the failed feature \n2. No further features are executed. \nTo clearify some code:\nCurrent situation:\n``` php\n\n @BeforeScenario\n\n*/\npublic function defaultSetup($event) {\n    $this->generateUser();\n    $scenario = $event->getScenario();\nif ( $scenario->hasTag('userIsLoggedIn')  ){\n    $this->loginUser();\n}\n\n// ...\n\n}\n```\n$this->loginUser() throws an ElementNotFoundException and behat exits.\nThere is no reason to not execute scenarios which don't have the @userIsLoggedIn tag!\nOur prefered solution would be like:\n``` php\n\n @BeforeScenario\n\n*/\npublic function defaultSetup($event) {\n    $this->generateUser();\n    $scenario = $event->getScenario();\nif ( $scenario->hasTag('userIsLoggedIn')  ){\n    try{\n        $this->loginUser();\n    }catch{\n        $scenario->markAsFailed();\n        return false;\n    }\n}\n\n// ...\n\n}\n```\nThere seems to be no function like markAsFailed()\nHope this is much clearer now.\nWhat I also cannot understand is, why there is even an exception thrown, why could this not be handled like the usual 'Form field with id|name|label|value \"foobar\" not found.' error within features? (Simply mark as failed and continue with next)\n. I totally agree, that there is no further point in testing if the environment fails, but I think there should be a way to let scenarios and features fail in their respective before/after hooks.\nI also agree on the point, that the login should be done inside the feature (in it's background), but as our feature files are delivered by our customers and are not negotiable there is (sadly) no point discussing this...\nWhat I cannot agree on, is the fact, that a failing hook writes nothing to the test results - there has been a failure (wherever that came from) and this has to be stated somewhere in the test results.\nWhy isn't it possible to catch the exception within behat and mark the feature as failed?\n. That's fine with me, as long as further features are run and the error is stated in the (junit) result :)\n. This now causes test results to be written for features which are excluded from execution\nExample:\n- We have 100 feature files\n- 70 are tagged with \"@regression\"\n  -- 20 of them are tagged with \"@donotexecute\"\nI call behat with --tags='@regression&&~donotexecute' --format junit and expect 50 result files to be written, but there are now 100 files written!\nPlease change this back, as writing results for features which are not selected for execution sees very impractical!\nThanks,\nThomas\nps: Because there is no way to tell if there was an exception in the setup (see https://github.com/Behat/Behat/issues/239), I have to rely on the result count.\n. ",
    "m00t": "@everzet, I see, thank you! \n. Any chances this would be merged? We have the similar issue, and this fix seem to help us too\n. ",
    "RichardBradley": "Thanks -- that makes sense.\nIt seems that regexes work differently in PHP to other languages.\nFor example, in Ruby the group would still appear in the captures list, with a null captured value:\nm = /^a message about blah is( not)? displayed$/.match 'a message about blah is displayed'\np m.captures  # => [nil]  (i.e. an array of length 1, not an empty array)\nThis is the same in C#, Java and other PCRE languages. I suppose I am not that surprised that PHP is non-standard in this regard, as it is in so many others :-)\nI'll use one of the alternative regexes you suggest.\nI wonder if this merits a note in the documentation.\n. I notice that the FeatureContext in Behat itself has several repetitive calls to PHPUnit_Framework_TestFailure::exceptionToString, for this same reason.\n. This was fixed by the pull request #250. \n(I don't know why that pull request appeared in a separate thread -- I added this issue number in the commit comments, and I intended it to appear here. I'll check the github docs more carefully next time I try this.)\n. @stof, so is there any way I could have created a pull request which was part of this thread, given that I opened this issue before I started coding? Or are pull requests always issues and issues can never become pull requests?\n. This is for issue #249. How come it didn't appear on there. Have I done something wrong?\n. @stof is there anything else you'd like from me before you merge this?\nThanks,\nRich\n. @everzet I agree that it is not ideal to tie Behat to PHPUnit. However, I do think this is the correct thing to do in this case.\nThe best fix would be for PHPUnit to change their exceptions so that the \"message\" was the full user-presentable message for the exception. I believe that the underlying bug here is with PHPUnit, but realistically we're very unlikely to be able to get them to change that.\nThe code linking Behat to PHPUnit:\n- is small and isolated\n- will not fail if PHPUnit is not used\n- adds almost no overhead if PHPUnit is not used\nIt also makes Behat \"just work\" in the most common case -- using PHPUnit assertions without any extra configuration needed.\nIf we were to add a new Formatter:\n- Would it be usable in conjunction with other formatters, e.g. the HTML formatter for CI servers? I think formatters are mutually exclusive, so your proposed change would leave things still broken for CI servers running behat reports in HTML format. The fix attached here fixes all formatters: text and html.\n- Would it be turned on by default? Users would need to notice that they had a problem, figure out that the problem was with PHPUnit assertion formatting and turn it on the new Behat\\Formatter\\PHPUnitException formatter. In the meantime, any failing tests would give impenetrable errors (just \"failed asserting two strings were equal\"). This seems difficult and not user friendly.\nYou mention that we might need to update Behat every time a new assertion tool becomes available -- I don't think that will be the case. I would hope that all other assertion tools will not be broken in the same way that PHPUnit is, but would include the full user message in their exceptions \"message\" property. If so, then no further changes will be necessary.\nAlso note that, while Behat is not explicitly tied to PHPUnit, it is the most common assertion framework, and the Behat manual does suggest PHPUnit as an assertion framework (with no other options suggested). We should ensure that Behat works well \"out of the box\" with PHPUnit.\nI think this fix is the correct pragmatic solution, and makes Behat better for most users (and has no effect on users not using PHPUnit).\n. @everzet -- have you had a chance to look over my reply? Have I addressed your concerns to your satisfaction?\nThanks,\nRich\n. So you would like ConsoleFormatter::exceptionToString split out into an ExceptionPrinter class, which is pluggable and configurable?\nThat seems a bit heavyweight to me and out of scope for this bug.\nWould you consider merging this version as-is, as an improvement to the current code, and leaving the pluggable ExceptionPrinter API for later?\n. OK, thanks. I'll leave tracking the ExceptionPrinter \"todo\" with you.\nPerhaps raise a new issue to keep track of it? Or re-open this issue, or issue #249 until it is resolved.\n. Thanks, I wasn't aware of that. Now fixed.\nOn 28/02/2013 15:27, Christophe Coevoet wrote:\n\nIn src/Behat/Behat/Formatter/ConsoleFormatter.php:\n\n@@ -300,4 +300,26 @@ protected function configureOutputConsole(StreamOutput $console)\n             $message, $number, $parameters, 'behat', $this->parameters->get('language')\n         );\n     }\n+\n-    /\n-     * Creates a user-presentable string describing the given exception.\n-     \n-     * @param $exception \\Exception The exception to describe\n-     /\n-    protected function exceptionToString(\\Exception $exception)\n-    {\n-        if (class_exists('PHPUnit_Framework_Exception', false)\n\nThis is useless. You can do an instanceof on non-existent classes as \nit does not trigger the autoloading (a PHP object knows all the \nclasses it inherits from and instanceof simply uses this list)\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/Behat/Behat/pull/250/files#r3190085.\n. \n",
    "mloureiro": "Hi there\nNot sure if this is a feature request or a bug related to this.\nFollow symlinks is working on single files, however if the symlink is a folder it won't fetch the files inside.\nIs this a bug or a  feature request?\nThanks\n. @leevigraham if I remember well I hadn't found an alternative\n. Has I expected.\nThanks :)\nQuestion, is that intended, or just not implemented yet?\nCause could go something like:\n(some stuff/or an alternative)\nedit:\n or need to be implemented on Turnip first\n. I know that, but sometimes it just have many possible details to just duplicate several times the setences.\nBut I do understand.\n. Thanks for the fast reply @stof \nActually I was looking to do:\n(?P<action>(?:action1|anotherAction|oneLastAction))\nWhere only the listed actions will actually be matched on the RegEx, which is the possible solution for the case.\nClosing the ticket\n. > which can result in ambiguous step definitions depending of what you want to do in your own steps.\nit's exactly that. :)\n. Actually it would be better that the default parameters would be set out of suites:\n. Adding related issue https://github.com/Behat/Behat/issues/560 link\n. ",
    "leevigraham": "@MLoureiro Did you find a fix for this. It still seems to be an issue.\n. Closed.\n. ",
    "konradpodgorski": "@everzet now it should be ok\n. ",
    "iamdey": "This is probably related to symfony2extension. Look at kernel config : http://extensions.behat.org/symfony2/index.html#configuration\n. ",
    "adamdunkley": "+1 :+1: \n. ",
    "nenadalm": "I think that included file should win, because file is loaded to array and then rewritten by included file. So 'base_url' should be 'http://test.website.com/' at first and then rewritten by 'http://test-something.website.com/' because it's defined later in yml.\nBut if current behaviour is ok, how should I overwrite behat.yml? (it's needed because everyone has it's own configuration) I tried to use parameters, but it screamed at me something about not expected Array...\n. Ok, I'll do that. Thanks\n. ",
    "swirekadam": "I will create new fork and apply commit once again\n. sorry - i have problem with rebasing the fork. I will clodes that request and push another. I try it again\n. ",
    "gquemener": "Failed scenarios are not related to this PR, but I can take a look ;)\n. Wow that's strange, on my env (php5.4.6), two other scenarios fail\n``\n01. Failed asserting that two strings are equal.\n    In stepThen it should fail with:'.  # FeatureContext::itShouldPassWith()\n    From scenario ***.                    # features/annotations/steps_chaining.feature:317\n    Of feature `Call step in other step'. # features/annotations/steps_chaining.feature\n\nFailed asserting that two strings are equal.\n    In step Then it should fail with:'.  # FeatureContext::itShouldPassWith()\n    From scenario ***.                    # features/closures/instep_call.feature:187\n    Of featureCall step in other step'. # features/closures/instep_call.feature\n```\n\nI thought that was what travis told, but nope... waat?\n. Aaah much better.\nLet's install php5.5 now !\n. I'm having trouble installing php5.5. Compiling stuff, ya know...\nI'll give it another shot tomorrow.\nIf I may ask, could you restart the build, to be sure it's really failing? :D\n. \nCongratulations!\nThis looks really awesome, and a great piece of code!\n. Why switching to DOMDocument when the current implementation using string generation is quite clear enough? https://github.com/Behat/Behat/blob/2.5/src/Behat/Behat/Formatter/JUnitFormatter.php\n. Behat scenarios already ensures that by validating generated output, doesn't it?\nJust sayin', I like to keep stuff simple.\n. I don't want to brag about myself at all, but this kind of formatter works pretty well (and is validated through behat) and is still readable: https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Formatter/JUnitFormatter.php\n. Only drawback of using pure string solution is that the behat scenario needs to cover all the cases (to ensure it generates valid junit), because the formatter will not complain about a malformed or invalid xml. BUT in that case, the CI parser will complain.\n. Or maybe introduce it inside the TestWork @everzet?\nHaven't had time to look through it yet, but it seems that PhpSpec might use it in a future refactoring. I really don't know if it's possible to use the same JUnitFormatter for behat, phpspec, etc., just suggesting here.\n. @stof As I've mentionned above, don't you think that generating one junit report per feature file avoids to corrupt the whole junit report when one scenario crashes?\nBy corrupting, I mean I've already seen junit output that just contain the opening testsuite tag because, for some reason, the process ended before it writes the rest of the file.\nOf course, I'm talking about 2.5.*.\n. I personnally think this would be an awesome improvement, very usefull on CircleCI indeed to parallelize execution.. Here's Circle CI behaviour : https://circleci.com/docs/parallel-manual-setup/#using-configuration-files-modifier\n\nBy default, the file arguments will be appended to the end of the command.\n\nI'm not sure how it'll react if behat expects it to be quoted, but I wouldn't recommend so.\nWell, that's too bad that the argument is already named paths and not path (any historical reason for that?).\nWhat about bumping to 4.0.0 ?. \"\\DOMDocument\" is not necessary here?\n. Oh right, never saw that before. Thanks\n. You know, you can easily define a pattern to analyze many junit files with jenkins.\nIn the \"Publish Junit test result\" step, define the path to: build/junit/behat/*.xml and generate behat output to build/junit/behat/, and that's it!\nWe use it on our jenkins and it works pretty well\n. @tchaffee This is odd, indeed my generated junit files contain testcase (not testsuite) elements that have a classname attribute, but still I manage to publish report for them (I have about 140 generated files).\nNothing fancy, just followed the step described in my previous post.\nIn the end, I think that generating one junit file per feature file is a really good option (at least it doesn't corrupt the whole junit report if one scenario of the suite crashes).\n. ",
    "nomasprime": "@everzet thanks, could be what I'm looking for. \nSlightly off topic but should I be organising my contexts by feature? I'm used to do this as laid out in The Cucumber Book. Are there any examples of working like this with Behat?\nI'm thinking I could achieve this by passing combinations of contexts into my feature contexts as dependancies...\n. Thanks @everzet. Of course you're right but, unless I'm missing something, think I'll stick with organising by feature rather than by pages - works OK for me. \nJust need to figure out how to... Ah! I just realised I don't need to combine contexts like this at all so long as the subcontexts are available. Sorry, I was thinking about this all wrong. \nYou're an awesome sounding board though, right up there with my Agent 47 action figure ;)\n. @everzet One thing with behatch extension, there only seem to be steps for executing commands and not for evaluating output. Do you know how to do this or should I jump over to their github?\n. Never mind @everzet, noticed the behatch extension has it's own built-in assertions, think I'm going to roll my own so I can maybe use phpspec...\n. ",
    "jossemarGT": "Bumping in this old issue, is the story syntax localization supported for the3.0.15 release? In order to use Dado/Cuando/Entonces instead of Given/When/Then.\nBTW, excuse me if I'm asking for something that already exist, but, I didn't find documentation related to syntax localization.\n. If someone else has the same resquest/question, behat already support gherkin internalization as you can read in the docs also you can check the Behat/Gherkin repo and its keyword sets for every supported language.\n. ",
    "davelens": "Ah, apologies. : )\n. ",
    "rtuin": "I will, but depending on whether https://github.com/Behat/Gherkin/pull/54 will be merged or not.\n. ",
    "floriansemm": "some projects need the encoding ISO-8859-1. \nThe reported bug cases a problem with mb_strlen($string, $encoding). if $encoding (it's optional) is not set PHP uses the internal encoding. In our project symfony set the internal encoding to ISO, but Behat overwrites this setting with UTF-8, but it must be ISO.\n. Twig solves this problem very well:\n$mbEncoding = mb_internal_encoding();\nmb_internal_encoding('ASCII');\nlater the lexer set the encoding back to the old encoding:\nif (isset($mbEncoding)) {\n    mb_internal_encoding($mbEncoding);\n}\nsee: https://github.com/fabpot/Twig/blob/master/lib/Twig/Lexer.php:85\n. I think this issue should implement in the Symfony2-Extension\n. I think this is an issue for the MinkExtension\nIn your case I should see should find the text in the cell. When steps can't find your text, then it's something broken with your application.\n. You can do the following:\n1. if you run your tests headless, which to real browser. So you can see what behat is exactly doing.\n2. give your cell an HTML-Id an write a XPath expression. After that you can search with this XPath for this element\n. I can see any markup.\nHave a look at this.\n. .//*[@class='leftalign cell c1']\nwith this Xpath you get the whole second td.\n. ",
    "titomiguelcosta": "I just did a fresh install and it fails for me. I create a project just with behat and it install symfony 2.2 components. My composer.json looks like:\n{\n  \"require\": {\n    \"behat/behat\": \"dev-master\"\n  },\n  \"minimum-stability\": \"dev\"\n}\nIf I force version 2.4.6, it fails saying that version does not exist. But we see it on packagist.\n. I end up solving the problem using 2.4.*@dev\n. when I try to upgrade, I get the error on composer: The requested package behat/behat 2.4.6 could not be found. Trying to upgrade my project to Symfony 2.3\n. Still getting the same error. Even after deleting composer cache (removed the ~/.composer folder). Any idea what might be?\n$ composer update --prefer-source\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nYour requirements could not be resolved to an installable set of packages.\nProblem 1\n    - The requested package behat/behat 2.4.6 could not be found.\n. ",
    "cretz": "I am building a tool for helping testing that asserts that all parameters, return values, and property references are the value their phpdoc says they are. I am using https://github.com/lisachenko/go-aop-php/ for this which needs to bootstrap the autoloader.\nI guess I was thinking about some minor code in the bin script to take the param out of argv and run it before autoload. But you're right, it's not really that big of deal considering it is easy to invoke the behat app manually.\n. That is exactly what I am building. A runtime contract system. And it works quite well. I would never encourage running this in production, but running for your test cases or in a QA/staging environment is quite healthy. I can only get so far with static analysis.\n~~Closing this issue with the assumption that the level of customization I am asking for requires manual behat invocation.~~ Meh, leaving open to let @everzet decide if he wants it.\n. ",
    "lisachenko": "@cretz What you want is contract programming. I have the same idea to create contract framework for PHP by combining Behat and Go! AOP, but unfortunately haven't time for this.\nI know, that @everzet hates the AOP ) But combining crazy tools can give birth for a new cool tool.\n. @everzet AOP like BDD - both of them are new tools for PHP world and every new tool requires some time to be accepted by community. Unfortunately, AOP community is growing slowly, as it's very advanced technique. But number of stars for project keeps increasing :) \nBTW, I have implemented DbC (Design By Contract) framework with AOP https://github.com/lisachenko/php-deal and it looks very nice. How can you do the same with pure OOP? Not sure that this will be possible... What is your opinion about DbC?\nPS. I'm also want to ask your opinion about Gherkin syntax support for DbC:\nphp\n    /**\n     * Deposits fixed amount of money to the account\n     *\n     * @param float $amount\n     *\n     * @Contract\\Ensure(\"\n     *    Given amount is greater than 0\n     *    And amount is numeric\n     *    Then current balance should be equal to old balance plus amount\n     * \")\n     */\n    public function deposit($amount)\n    {\n        $this->balance += $amount;\n    }\n. ",
    "metaturso": "I second this. In fact this issue may as well relate to issue #490 (Behat can't load custom context classes when Composer autoloader is in use). \nTrying to drop a bootstrap file in the context directory, or using a @BeforeSuite hook, won't work as there's no guarantee that Behat didn't already try to load a context class. \nNow, if Behat loaded a bootstrap file before right before starting to execute any of the features, not unlike PHPUnit does with the --bootstrap option, the developer would at least have a chance to prepare the environment or the SUT long before the any attempt is made at loading the Context classes.\n. ",
    "kenden": "This happens when the extension:\nBehat\\Symfony2Extension\\Extension\nis installed, but is not configured in behat.yml\n(ie, in behat.yml, there is not:\n    extensions:\n        Behat\\Symfony2Extension\\Extension:\n           mink_driver: true\n            bundle: CompanyWebsiteBundle\nWhen the symfony extention is installed but not configured, we should still be able to run a single feature.\nSo\nbin/behat registration.feature\nshould work.\nThis is behat 2.5.2\n. ",
    "benji07": ":+1: \n. @everzet fixed\n. :+1: \n. :+1: \n. @ciaranmcnulty everything is broken :), i can't install \"behat/mink\", \"behat/mink-selenium2-driver\", \"behat/symfony2-extension\", and \"behat/mink-browserkit-driver\" but i will do PR for those too\n. @ciaranmcnulty my test suite run properly with symfony3\n. @stof i update the travis file & the composer file\n. @stof this line ?\n- if [ \"$DEPENDENCIES\" = \"dev\" ]; then perl -pi -e 's/^}$/,\"minimum-stability\":\"dev\"}/' composer.json; fi;\n. i borrow that in https://github.com/sonata-project/SonataIntlBundle/blob/master/.travis.yml#L43\n. ",
    "chillu": "ping :)\n. Its tested by my edits to features/syntax_help.feature, isn't it? I think it could use some more fine grained PHPUnit tests rather than highlevel Behat ones, but there's no existing unit tests in the project, right? If you want me to add more tests via Behat features, could you guide me in the right direction please? \n. So any further action required from me on this?\n. Sorry I'm on leave with sporadic internet access will update to\nlatest 3.0 next week :)\n\nOn 09.01.2014, at 22:19, Konstantin Kudryashov notifications@github.com wrote:\nClosed #355.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for the valueable feedback, guys!\n- Fixed coding conventions (running phpcs locally now against Symfony2 standard)\n- Using PHP_EOL now for newline replacements\n- Created AnnotatedContextReader::readDescription(). It returns a string, so presumably shouldn't follow the \"read ... callees\" naming, correct?\n- Created ConsoleDefinitionInformationPrinter::extractHeader()|extractDescription|extractFooter(). Means we're getting $regex twice, is that an acceptable increase in complexity, or should I pass it into the method?\n. trim($description, \"\\r\\n\") - does that work for you?\n. No worries, removed the useless $fileContent declaration now.\n. @stof The branch didn't need rebasing. I've re-run the tests locally and they all pass. I've removed the 2.0, 2.1 and 2.2 Symfony build targets from travis.yml, since that conflicts with the new composer settings. \n. Tests are passing now as well.\n. Should be closed as duplicate of https://github.com/Behat/Behat/pull/681? This other PR already bumps the dependency versions.\n. OK, bumped to ~2.3.  Do you think it makes sense to bump the other symfony requirements explicitly as well? symfony/config and symfony/yaml are implicitly bumped due to https://github.com/symfony/Translation/blob/2.3/composer.json\n. Ah heh, didn't read the JSON properly - all good then.\n. \n",
    "pthurmond": "Ok, well I am kinda new to namespacing so I am probably getting that wrong, but I have tried this \"class LoginContext extends RawMinkContext\" and it keeps saying that the class is not found.\nMy use calls are:\nuse Behat\\Behat\\Context\\ClosuredContextInterface,\n    Behat\\Behat\\Context\\TranslatedContextInterface,\n    Behat\\Behat\\Context\\BehatContext,\n    Behat\\Behat\\Context\\ExtendedContextInterface,\n    Behat\\Behat\\Exception\\PendingException;\nuse Behat\\Gherkin\\Node\\PyStringNode,\n    Behat\\Gherkin\\Node\\TableNode;\nuse Behat\\MinkExtension\\Context\\MinkContext,\n    Behat\\MinkExtension\\Context;\nuse Behat\\Mink\\Mink,\n    Behat\\Mink\\WebAssert,\n    Behat\\Mink\\Session;\n. Awesome, I missed that. Thank you so much. I really appreciate your time and patience. Thanks!\n. Currently using Behat 2.4 actually.\n. But I will be upgrading to the 3.x series here soon. So I would like to know about this for 2.4 and 3.x if you can. Thanks!\n. ",
    "dirkaholic": "@RichardKnop Did you open the same issue in the Mink repo ? Can't find it there. As I experience the same issue right now when using the PhpBrowser module of codeception that also uses Mink.\n. ",
    "RichardKnop": "@dirkaholic No I haven't. I have downgraded Guzzle to older version instead. Feel free to open the issue in Mink repo.\n. @dirkaholic To solve this issue in the meantime, downgrade Guzzle to 3.6.5.\n. ",
    "fidella": "You have to set Guzzle to follow redirects and that error will go away.\n. ",
    "FaKeller": "I am experiencing the same issue and downgrading Guzzle to 3.6.5 solved the issue.\n@fidella How do you set Guzzle to follow the redirects from within Behat?\n. ",
    "pluseg": "Hi, guys! @everzet, @stof, we've created a form\u0430tter for this issue https://github.com/Vanare/behat-cucumber-formatter. \nDo you have any feedback?\n. ",
    "flip111": "Offtopic: Stof it would be greatly appreciated if you could put your testing configuration up somewhere, for my reference. Myself i use Jenkins + Ant + PHP QA tools + Behat + Mink + Selenium. This QA & Testing toolchain as a whole does not work yet on my system.\nOntopic: I leave the issue open because it's possible to download a \"broken\" behat version with PEAR.\n. Not sure if i can use the ticket for this. But it would be nice to have require-dev instead of require in the behat quick intro http://docs.behat.org/quick_intro.html\n{\n    \"require-dev\": {\n        \"behat/behat\": \"2.4.*@stable\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"config\": {\n        \"bin-dir\": \"bin/\"\n    }\n}\n. That will give me:\nC:\\inetpub\\symfony23>behat -v\nPHP Fatal error:  Class 'Symfony\\Component\\Finder\\Iterator\\FilterIterator' not found in C:\\PHP\\pear\\Symfony\\Component\\Finder\\Iterator\\FileTypeFilterIterator.php\n on line 20\nPHP Stack trace:\nPHP   1. {main}() C:\\PHP\\behat:0\nPHP   2. Symfony\\Component\\Console\\Application->run() C:\\PHP\\behat:27\nPHP   3. Symfony\\Component\\Console\\Application->doRun() C:\\PHP\\pear\\Symfony\\Component\\Console\\Application.php:121\nPHP   4. Symfony\\Component\\Console\\Application->doRunCommand() C:\\PHP\\pear\\Symfony\\Component\\Console\\Application.php:191\nPHP   5. Symfony\\Component\\Console\\Command\\Command->run() C:\\PHP\\pear\\Symfony\\Component\\Console\\Application.php:899\nPHP   6. Behat\\Behat\\Console\\Command\\BaseCommand->initialize() C:\\PHP\\pear\\Symfony\\Component\\Console\\Command\\Command.php:233\nPHP   7. Behat\\Behat\\Console\\Command\\BaseCommand->processProcessors() C:\\PHP\\pear\\behat\\src\\Behat\\Behat\\Console\\Command\\BaseCommand.php:116\nPHP   8. Behat\\Behat\\Console\\Processor\\LocatorProcessor->process() C:\\PHP\\pear\\behat\\src\\Behat\\Behat\\Console\\Command\\BaseCommand.php:105\nPHP   9. Behat\\Behat\\PathLocator->locateBootstrapFilesPaths() C:\\PHP\\pear\\behat\\src\\Behat\\Behat\\Console\\Processor\\LocatorProcessor.php:40\nPHP  10. Symfony\\Component\\Finder\\Finder->files() C:\\PHP\\pear\\behat\\src\\Behat\\Behat\\PathLocator.php:217\nPHP  11. Behat\\Behat\\ClassLoader\\MapFileClassLoader->loadClass() C:\\PHP\\pear\\behat\\src\\Behat\\Behat\\PathLocator.php:0\nPHP  12. require() C:\\PHP\\pear\\behat\\src\\Behat\\Behat\\ClassLoader\\MapFileClassLoader.php:55\nThat will launch the pear installation of behat (which i tried before) but i don't want to use anymore. I've added C:\\PHP\\ to my windows sytem PATH variable. Now i use composer.json and install behat on a per-project base. It seems a bit odd if i need to adjust my system path for each project ??\n. Ah yes, i mistakenly read the last message wrong. The issue is solved now, and it's not a behat issue. Although some improvement in the documentation would be nice. I might make a pull request for this later. Thanks for support.\n. ",
    "Baachi": "Try this: \nC:\\inetpub\\symfony23>bin\\behat -v\n. The bracket should be on its own line.\n. Wrong indention here\n. The @property annotation is not used in Behat\n. Missing space between if and (.\n. ",
    "mandarille": "I think it's because you include the < code >, < guess > and < mark > in \" and \". It's then treated as regular scenarios and not scenario outlines.\nAnother way to have comments for each section would be to use \"# this is a comment\"\n. ",
    "aleherse": "I think that @stof is right, and the @mandarille solution of using comments is a valid solution but looking for features files of the codebreaker kata I found that in Cucumber you can use this scenario.\n``` gherkin\nScenario Outline: submit guess\n    Given the secret code is \"\"\n    When I guess \"\"\n    Then the mark should be \"\"\nScenarios: no matches\n  | code | guess | mark |\n  | 1234 | 5555  |      |\n\nScenarios: 1 number correct\n  | code | guess | mark |\n  | 1234 | 1555  | +    |\n  | 1234 | 2555  | -    |\n\nScenarios: 2 numbers correct\n  | code | guess | mark |\n  | 1234 | 5254  | ++   |\n  | 1234 | 5154  | +-   |\n  | 1234 | 2545  | --   |\n\n```\nBut I have checked it and it's not working on Behat, even using Examples or Scenario instead of Scenarios. So I think that this could be a nice feature to add.\nThank you for your answers\n. ",
    "mzimen": "Thanks a lot, it's fixed. I didn't know that phpdoc is used for matching step.\n. ",
    "Swop": "Congrats!! :clap: \n. Cool ! thanks @everzet @stof\n. ",
    "benscholler": "@everzet How do I buy you a beer without using Gittip? ;)\n. ",
    "jhedstrom": "With context pools, presumably these could be dynamically added outside of behat.yml? The Drupal Extension is making heavy use of subcontexts to auto-discover step-definitions that are bundled with individual Drupal modules (https://github.com/jhedstrom/drupalextension/blob/master/src/Drupal/DrupalExtension/Context/Initializer/DrupalAwareInitializer.php#L47)\n. I'm seeing this as well. Changed values from imports don't override values that are already defined it seems.\n. I'm seeing this on Behat 3. I recall this working as expected on 2.5.\n. I'm seeing this trying to override an extension setting, so suites shouldn't impact it:\nyaml\ndefault:\n  suites:\n    default:\n      contexts:\n        - ...\n  extensions:\n    Behat\\MinkExtension:\n      base_url: http://default.url\nimports:\n  - behat.local.yml\nand then importing another file, trying to set base_url to something else doesn't override the value set in behat.yml.\n. The logic above would normally work, but fails if there are background steps in the feature.\n. ",
    "rande": "I was pretty sure about this request ;) It is on my to do list ...\n. Done #313\n. Need to push this against the 2.5 branch ... closing this PR\n. @everzet do you have an estimate time for the PR to be in a stable release ?\n. @everzet any change to have a new release of behat with this PR ?\n. The CI server is retrieving behat.phar from the behat website. And the package does not include this change. So some junit results are just incomplete for now. \nSo I am asking when do you plan to update the phar package ?\n. The #314 PR try to mimic the junit generated by PHPUnit. I guess this PR will break this support.\n. @WouterJ @everzet we might help you to complete this PR. Can you provide us information about the remaining work ?\nThanks\n// cc @mremi\n. ",
    "mprzytulski": "Re: #315 - as a preparation of PR for 2.5 branch requires bit more work I will do that during this evening. \n. ",
    "romainneutron": "For the record : \nadding \"behat/gherkin\":\"dev-develop@dev\" or \"behat/gherkin\":\"dev-master@dev\" as a requirement solves this issue. But it seems another bug as behat/gherkin develop branch has the branch alias \"2.2-dev\" whereas it seems that it should be \"2.3-dev\" (2.3.* releases already occured on any of theses branches).\nMaybe, an update of behat/behat composer file from \"behat/gherkin\":\"~2.2.9\" to \"behat/gherkin\":\"~2.2, >=2.2.9\" should be okay\n. ",
    "patwcummins": ":+1:\n. :+1: Good catch!  This seems like an oversight\n. ",
    "realtebo": "My background: This is the first time I see behat, I've not idea of what composer is, but I've a lot of experience with Yii and git.\nSystem: ubuntu / mint  linux 64bit\n1. Please update the docs. The differences between 1,2 and 3  are not explained. A newbie has no idea where to puch her head\n2. Do you mean that all of this un-passed tests are due to wrong installing method ?\n3. Which is the goal to tell user to execute bin/behat ? Is it for demo ? Is this needed to init behat ? \n4. I tried to restart from scratch with a clean Yii just-created webapp at /home/realtebo/yiiapp\nI'm gone into my develop pc home [/home/realtebo]\nI executed \ngit clone git://github.com/Behat/Behat.git && cd Behat\nSo i'm now at /home/realtebo/Behat\ngit submodule update --init\nwget -nc http://getcomposer.org/composer.phar\nphp composer.phar install\nThat, always from /home/realtebo/Behat I executed \nbin/Behat\nThe esit: \n96 scenari (29 passato, 67 fallito)\n473 step (399 passato, 7 saltato, 67 fallito)\nSo I think  the problem is not the installation steps\n. Also: if I follow the quick start guide I'm trying to do\n$ mkdir ls_project\n$ cd ls_project\n$ behat --init\nbehat: cmomand not found\nAnd no documentation about how to use /bin/behat  .... \nThe quick start guide must be 100% error free or a news user searching for a test suite simply go crazy and fly away. I feel this is a good project but I'm loosing half a day simply to start to use.\n. I've NOT an idea how to fix .... \nI'm still trying to make it work\n. Add this: copy/pasted the code i got\nPHP Fatal error:  Class 'Behat\\Behat\\Context\\BehatContext' not found in /home/mirko/ls_project/features/bootstrap/FeatureContext.php on line 10\nand the code itself is \n```\n<?php\nuse Behat\\Behat\\Context\\BehatContext,\n    Behat\\Behat\\Exception\\PendingException;\nuse Behat\\Gherkin\\Node\\PyStringNode,\n    Behat\\Gherkin\\Node\\TableNode;\nclass FeatureContext extends BehatContext\n{\n    private $output;\n/** @Given /^I am in a directory \"([^\"]*)\"$/ */\npublic function iAmInADirectory($dir)\n{\n    if (!file_exists($dir)) {\n        mkdir($dir);\n    }\n    chdir($dir);\n}\n\n/** @Given /^I have a file named \"([^\"]*)\"$/ */\npublic function iHaveAFileNamed($file)\n{\n    touch($file);\n}\n\n/** @When /^I run \"([^\"]*)\"$/ */\npublic function iRun($command)\n{\n    exec($command, $output);\n    $this->output = trim(implode(\"\\n\", $output));\n}\n\n/** @Then /^I should get:$/ */\npublic function iShouldGet(PyStringNode $string)\n{\n    if ((string) $string !== $this->output) {\n        throw new Exception(\n            \"Actual output is:\\n\" . $this->output\n        );\n    }\n}\n\n}\n```\nPHP 5.4.6-1ubuntu1.3 (cli) (built: Jul 15 2013 18:19:45) \nCopyright (c) 1997-2012 The PHP Group\nZend Engine v2.4.0, Copyright (c) 1998-2012 Zend Technologies\n    with Xdebug v2.2.1, Copyright (c) 2002-2012, by Derick Rethans\n. @everzet Yes, I'm a newbie --. I know the concept of executing command from 'current directory' ,,, and so on.\nBUT the doc needs to be more 'monkey-as-realtebo' friendly. I'm not complaining the tool, only the doc. \nAnd originally i opened this issue because for me it's strange that behat self-test has a negative output..\nSo I gone off-topic, but the issue is still here. If is normal that behat self-test fail ... ok...  close the issue\nFor cli konwledge: on ubuntu, the suggested workaround doesn't works .... \n\"learn how to deal with it and be a better programmer.\"\nI'll do it\n. Thanks for explanation ! Right to close.\nI was creating an app scaffold for internal use, so for us is still a good idea to commit.\nWe simply batched removal of .git folder in vendor subfolders, than run git rm --cached vendor/ and git add -A vendor/ as workaround and all was working without problem.\n. ",
    "BevanR": "I don't know.  I was tired.  It was another issue.  Sorry I didn't come back to close this.\n. Thanks!  This gave me the info I needed to get this working:\nyaml\n      zombie:\n        node_modules_path: /usr/local/lib/node_modules/\n      default_session: 'zombie'\n      javascript_session: 'zombie'\nWhere is this best documented so others can find it more easily?\n. https://github.com/Behat/MinkExtension/pull/171\n. ",
    "JJK801": ":+1: \n. ",
    "nchaulet": "Junit spec using in jenkins : https://svn.jenkins-ci.org/trunk/hudson/dtkit/dtkit-format/dtkit-junit-model/src/main/resources/com/thalesgroup/dtkit/junit/model/xsd/junit-4.xsd\n. You can also found all junit spec here https://github.com/jubianchi/atoum.js/tree/master/resources/xsd \n. current Junit Formater is compatible with Junit6 too.\ncould be interesting to add a Junit(6 or 7)Formater or an option in current JunitFormater to add more information ?\n. I think a options junit_version: 4 by default could be a good solutions ans really simple to implement\n. ",
    "tonypiper": ":+1: - have been wrestling with this today.\n. This PR undoes changes from #314 (not mine, I hasten to add). Is there a case for having a separate junit6 formatter if both are useful but not compatible? \n. Don't know what's easier - a new formatter, or a 'version' parameter? But yes it would be good to have the extra information available for people running junit 6/7 without breaking things for people using junit 4 (like we are, on Jenkins CI)\n. ",
    "lotholf": ":+1: \n. ",
    "GalCohen": "Can you write it out? with @ or without? one ~ or two? none of those worked for me.\n. I'm trying ~@test,~@test2  both test1 and test2 are showing up. \nalso tried &&\nI got one file with one tag, and another file with the other tag. I want all the tests to run except those two. Neither option seems to work as both tests are running regardless. \nIndividually, I can able to exclude each one, so I know the tags work.\n. Looks like I needed quotes around the tags. Thanks!\n. ",
    "B2F": "Well, it seems that steps from a context are available with Behat\\Behat\\Context\\Step{Given|When|Then} in its subcontext.\n. Let's say you have OneContext which does not extends MinkContext but MinkContext is used in the same suite as OneContext. How can you access MinkContext methods from OneContext ? It would solve the issue. Thanks.\n. I did not realize that I had access to the session with RawMinkContext, still, I don't know how to set the webdriver this way.\nI suggest that the old way was complementing the lack of documentation on this side, which was my argument, the ease of use / user experience was better at first hand.\nHowever, I fully agree with your arguments which is in short, I assume, loose coupling reduce maintenance efforts.\nAnyway, any hint on the session driver version problem ?\nThanks a lot for the support, the existing documentation is great nonetheless.\n. Well, in my RawMinkContext child I naively called\n $this->getSession()->visit('somepath');\nThen, when I tag my scenario with @javascript I got this error upon running it:\nf.QueryInterface is not a function\nSystem info: ...\nBuild info: ...\nDriver info: driver.version: unknown (WebDriver\\Exception\\UnknownError)\n. Perfect. Thanks a lot Jakzal !\n. ",
    "dave1010": "In addition to formatting executed test output (--format), it would be useful to be able to list the scenarios without executing them (like how --definitions works). I do this crudely at the moment with bash: for i in features/*.feature; do head -n 4 $i; grep ' Scenario' $i; echo; done\nAnother useful thing (both as a format output for executing and listing without executing) would be just listing features, with no scenarios or steps.\n. @stof --dry-run still lists all the steps. I guess I'm thinking something along the lines of:\n- --format terse executes but doesn't show steps, just scenarios and features (as proposed by @patxi1980 originally)\n- --format very-terse executes but doesn't show steps or scenarios, just features\n- --dry-run --terse same as --dry-run but doesn't show steps, just scenarios and features\n- --dry-run --very-terse same as --dry-run but but doesn't show steps or scenarios, just features\nI guess an extension could provide the different formatters for execution. I'm not sure about dry-run formatting.\n. @stof ah, I think that makes sense. So if --format terse was implemented then it would automatically have the same output for --dry-run.\n. ",
    "netraagal": "Hi,\nIs this solution developped on the actual version ?. thanks! I will get a look as soon as I can. Thanks @spolischook ! it was exactly what I needed :)\nI created a gist for it.. I am on the behat doc since this morning and I will not say how many time I have passed the filter doc \ud83d\ude04 \nSometimes, you need someone to say it explicitly to you... Thank you @shwetaneelsharma !\nI will not test today the use of profil, as I don't have time for it, but I will test it soon.\nBut I will keep open this issue as I want to know if it's a correct behaviour. . Soooo...\nI finally know why it act like that. Not a problem from Behat.\nSome command lines don't care about the double quote, and considere & as it's used in command: the separator between differents commands.... ",
    "MaksSlesarenko": "+1\n. ",
    "dbriones": "+1\n. +1. This issue bit us last week.\n. ",
    "yjqg6666": "$git ls-tree 7708dad681f44c1d69c369c9b1bd55832ee4eb52\n160000 commit 7d7191e44d5d810d690ee16b17eca27743a7243a  gherkin\n160000 commit 2ae542748a8065aba925b44b99755010dbf12ac9  symfony\n160000 commit 76280e55c7058afcbce623eae571cf1bf7c22b84  symfony\n160000 commit 29d7d138597baee23786285feba384ae694d51cf  symfony\n160000 commit 9c807fe281c09655e9136df287aafc811bdd7ac1  symfony\n160000 commit 348b27d333e9b4d65bd25ffb9cc69c419a5e83fe  symfony\n160000 commit f70e0ba1b04e7db4b3aa6d122470291d4fb34732  symfony\n160000 commit 0603a77abada52469a7b889124dae57618441613  symfony\nthat's the source of the error.\nreference: https://stackoverflow.com/questions/13178720/tree-contains-duplicate-file-entries. just FYI. All the methods mentioned will rewrite the history.  The repo just can not be pushed if the remote enabled the fsck (transfer.fsckObjects, fetch.fsckObjects, receive.fsckObjects). . ",
    "ithinkihaveacat": "Given that this has almost certainly caused zero actual problems in the four years since this was reported (the hash in the comment makes it pretty easy to find!) I don't think there's any reason to actually do anything about this.\nMaybe this will cause someone some grief or bewilderment in the year 2043 when someone needs to do an unusual repo transformation but hey, they can just get their personal robot to sort it out while they float about merrily in their self-driving airship\u2026. ",
    "arno14": "Yes this code works.\n. ",
    "andrerom": "Seems to be fixed now.\n. @gggeek Did it work? :)\n. ",
    "Frikki": "BUMP\n. Okay. This is definitely a Symfony issue affecting Behat. A solution is in your project that uses Behat to specify in the projects composer.json:\n\"require-dev\": {\n        \"symfony/console\": \"2.4.x-dev\",\n        \"symfony/yaml\": \"2.6.x-dev\",\n        \"behat/behat\": \"~3.0.14\"\n    },\n. @ockham It is a Symfony issue, See my comment above.\n. ",
    "filipslomski": ":(\n. ",
    "babarinde": "Just some path issues\nMy apologies\n. ",
    "jpingo": "That sound's good!\n. ",
    "pcardiga": "This would be great. This would allow the design of common features files that might be differently implemented in different bundles in case of Symfony. In such a way, local .feature and common .feature files might be used together.\n. ",
    "pedroresende": "@floriansemm Thanks, I'll add the issue to https://github.com/Behat/Symfony2Extension\n. New issue created https://github.com/Behat/Symfony2Extension/issues/42\n. ",
    "nonlux": "Yes, I understand the \"complexity\" of in using the container. \nBut there are times when you need to transfer data between the two scenarios. I think it would be convenient to use the Behat container. \nFor example: Translator service\nI do not want to use the Symfony2Extension  only for this. I implemented simple initialization of translator. But now it is created with each scenario. Why? If I could keep it Behat container would not have it reinitialization. I would be easier to use it in different contexts.\n. Yes.\nPerhaps, the container the wrong way.\nBut I think should be a mechanism for implementation of third-party services in the context in  behat \"at the box\".\n. ",
    "wouterj": "FYI, I'm working on this one\n. And it seems like there is no output on the console? Only in a file?\n@stof thanks for the link. I thought I already found an XML schema, but it seems to be outdated\n. @stof yeah, but you can do something like \"Report generated in ...\". In 2.5, nothing was shown.\n. @stof yes, after looking more in the code I think it's better to only do the file. That way, people can configure another outputter for the console\n. @stof / @everzet  but that means I have to create a new Printer which only prints to files?\n. @stof ok, that way. Thank you!\n. Btw, I recommended waiting till the jUnit thing is merged, as it'll provide a file system outputter, which can come quite usefull for HTML reports.\n. @stof what do you mean with stdout? I thought we decided to not make it possible to write JUnit to the console?\n. @everzet so I should print out the steps and hooks that are captured? And how should we report hook exceptions. Should we add hooks as another assertion, another step (as is done with backgrounds)?\n. OK, finished the basic functionality. Lot's of duplicated code, I'll improve it sunday :) After this there are still a lot of things to do...\n. @stof thanks for your review, I fixed all comments.\nI've also improved the code a lot, so no duplicated code anymore. I also started writing a feature for capturing the stdout, but that's somewhat a problem. In jUnit, there is a way to output the captured output, but that's only available for <failure> and <error> elements. Imo, a test hook should not be an assertion, so it should not be an element at all. It seems like jUnit doesn't have a feature for hooks.\n. @everzet that's sounds like a good idea. Do you think a step like Then \"junit/default.xml\" file should be JUnit comptable would do the trick?\n. Ok, added the junit schema test.\nBut there is one issue, we can only use 1 <skipped> element and it should be the first element. We must also put all elements in a specific order that means that (a) we cannot dump all skipped steps (or do we put them in one skipped element?) and (b) the order of the steps would be really crazy, meaning that (1) \"And\" in a step can be confusing and (2) the output of hooks would not be put in the correct location\n. So you mean just the scenario + status and the failure/error message?\n. Let's call it \"forgotten\" :blush:\nI'll adapt the missing things this week.\n. @everzet I already started looking at your refactor PR. I'll update this PR within a week.\n@tchaffee I have not a lot of junit experience. I warmly welcome any feedback on how the generated files should look like. If you want to help me too with writing the code, you can make a PR to my branch in my repo. You can also contact me on IRC or via my email (see my GitHub profile)\n. continues in #466\n. @everzet yes, my mistake. keyword => comment. But nonetheless, they are invisible :)\n\nI'd love to change color to something else, but we're kinda limited with available options in Symfony Console\n\nThe problem is that all options available on windows are used by the Symfony Console component. Using another value means it doesn't work on windows (resulting in just white text).\nI think using \"magenta\" is the best choice, but I'm afraid it looks not nice on a 8+-bit console...\n. @everzet agreed. I just changed my terminal colors and it worked, I thought it had some bugs (displaying black background on stdout), but I can't reproduce it now.\nSo let's stick with the current behaviours and document BEHAT_PARAMS soon :wink: \n. Btw, you are talking about the RuntimeCallHandler in Behat3.\n. @dylanlgs the thing I pointed out was not the implementation of that feature, it was only the place where the error handlers are set instead of the Definition class you talked about.\n. Hmm, ok some questions :)\n1. Previously, I skipped the Formatter and just worked directly with the SimpleXmlElement. That is not possible anymore, since I the interfaces declared a Formatter as first argument to each step. Should I create an XmlFormatter which wraps a SimpleXmlElement class?\n2. The CounterPrinter and ListPrinter are created for the Console, but not for generating an XML file. Can I just skip these classes or should I create new implementations of these in the JUnit namespaces (that'll be very hard, since they are final classes)?\n3. I don't really understand what FormatterFactory#processFormatter() should do.\n. @gquemener it ensures we always get a valid XML file.\n. @gquemener hmm, good point. However, @stof said it would be a good thing to use the SimpleXml library. However, directly writing into the file stream makes things much and much easier :) (since SimpleXml things can't be streamed).\nHowever, this will result in wrong XML files when aborting the process before it was finished, doesn't it?\nWdyt @everzet ?\n. @gquemener well, if we go with the string based solution, I'll create a FileOutputPrinter in TestWork which works with file streams and then create a JUnitFormatter in TestWork which is able to create valid JUnit XML and pushes that into the file. Then each implementation can create its own junit format extension to do whatever they need to do with JUnit :)\n@tchaffee I really appreciate your help. In the diff, you can see the features which shows what I want see what I to use as output. Would love if you can give some feedback on that (what are you missing, what should be removed, etc.). The features all check if they are compatible with the XML schema definition defined by Jenkins, so they should all work on Jenkins. However, I'll give you a shout when you can test this thing. I properbly need some days to get this thing started however :)\n. I created a JUnitOutputPrinter based on the StreamOutputPrinter. The thing left now: Implementing it into Behat/Behat\n. @everzet got a new problem: How can I get the name of the test suite in a SetupListener? (or is it available in another listener?)\n. @stof yes, but the new formatters don't have access to $event, only to $event->getSetup() :(\n. ping @everzet. Do I need to create a new event listener for that?\n. @everzet the testsuite name is used as the file name. So we have to know the name in the begin of the cycle. The same would apply for the HTML formatter. However, the console formatters don't have to know it.\n. @everzet I've started to work on this again this week. However, I need to register something to an event which is always dispatched after the suite, so I can add the closing </testsuites> tag in the file. It turns out the AfterSuiteTested event isn't dispatched when using --stop-on-failure, so it'll result in invalid reports if you use that. See also #482 \n. @everzet another problem: The start tag of a testsuite contains the amount of tests run, the failures, successes, etc. So this has to be determined in the AfterFeatureTested event. However, these results come from the scenario events. There is no way to access those results in the AfterFeatureTested event, so we have to use the scenario events for that. This means the tags of the scenario's will be placed before the <testsuite> tag.\nThe only solution I see is to build some sort of \"stack\" to store the scenario results and then parse this stack into a JUnit report in the AfterFeatureTested event. Do you know anything better to solve this?\n. Ok, I finally figured out how to solve the problems with the <testsuite> outputting. Now I have to implement the same thing for <testcase> and after that a very simple step printer is the only thing left.\n. @everzet I tried to build the Scenario printer. Is there a way to get the amount of steps (including background steps) for a scenario node? The statistics only counter all steps.\n. @everzet you mean I need to calculate this myself using the events?\n. -1 these method should all be part of the interface or abstract class. \n. I also don't believe that the definition of these methods can cause problems, since the rest of the definition are the same, afaics?\n. wait my mistake, the problem was that the definition was already set on the parent interface/class. I'm +1 now :)\n. :+1: I had a problem with this when trying to use Testwork for my own framework. I solved it way less nice than you did here :)\n. I've decided to remove the assertion counters. They are not required and I can't make them working, we can fix it after this PR is finished.\n. @everzet hmm, I'm not sure if I understand you correctly. I haven't introduced new \"additional\" objects except from the JUnitXsdChecker helper class. All other things were required in order to make this working.\n. I added 2 more scenarios, testing what happends if the script aborts before the end. Using --stop-on-failure, everything is correct. However, when aborting due to a PHP error, we end up with an invalid JUnit file. Can we say this is expected or is this a bug?\n. ping @stof @everzet can you please give your opinions about including stdout in the report or not?\nAnd everzet, can you please help me with the Example Outline stuff?\n. What needs to be done now:\nFix outline names\nAnd \"junit/default.xml\" file should contain: # features/junit_format.feature:96\n      Failed asserting that two strings are equal.\n      --- Expected\n      +++ Actual\n      @@ @@\n               </testcase>\n      -        <testcase name=\"Passed &amp; Failed #1\" status=\"failed\">\n      +        <testcase name=\"| 5     | 16     |\" status=\"failed\">\n                   <failure message=\"Then I must have 16: Failed asserting that 15 matches expected '16'.\"/>\n               </testcase>\n      -        <testcase name=\"Passed &amp; Failed #2\" status=\"passed\"/>\n      -        <testcase name=\"Passed &amp; Failed #3\" status=\"failed\">\n      +        <testcase name=\"| 10    | 20     |\" status=\"passed\"/>\n      +        <testcase name=\"| 23    | 32     |\" status=\"failed\">\n                   <failure message=\"Then I must have 32: Failed asserting that 33 matches expected '32'.\"/>\n               </testcase>\n           </testsuite>\n       </testsuites>'\nI planned to make the name of the scenario outline the name of the scenario + an incrementing number. This is a problem, since there is no easy way to get the name of the scenario inside the scenario outline event. We should register to the scenario event, find some way to save the scenario name and reuse that in the outline event.\n\nI've removed the output displaying thing, that can be added later on.\n. @everzet I which events have I access to the title of the scenario outline?\n. @james75 great you have worked on this one! I was working on it as well, but I can't find a nice solution.\nThat feature should indeed be removed. It is invalid and it is no longer supported (system-out features should be removed).\n. @james75 the whole output printer feature was refactored, causing me to do very crazy stuff. The new output printers are work live, so we can't no longer build a feature using SimpleXmlElement and then output it in the end.\n. @everzet I think I was unclear:\nCommand\nbash\nbehat -dl --lang=nl\nExpected\nbash\ndefault | Stel ik ben iets\ndefault | Als ik wat doe\ndefault | Dan moet ik wat hebben\nActual\nbash\ndefault | Given ik ben iets\ndefault | When ik wat doe\ndefault | Then moet ik wat hebben\nDo you see what I mean with \"Gherkin keywords are not translated\"?\n. From 2.5 to 3.0 means you get lots of BC breaks :)\nInstead of having only one main FeatureContext per application which could have child contexts (which was the case in 2.5), Behat 3.0 allows you to configure multiple Contexts per suite.\nSo instead of one main and many child context classes, you can multiple context classes on the same level. You can configure them in the configuration file:\n``` yaml\nbehat.yml\ndefault:\n    suites:\n        your_suite:\n            paths:    [ %paths.base%/features ]\n            contexts: [ DomainContext, AnotherContext, NewContext ]\n``\n. The same problem occurs when runningbin/behat -dl --lang=nl`, the first suite is translated the second isn't\n. @everzet will do that tomorrow\n. @everzet I couldn't create a nice feature file, so I've created the most simple repo I could to reproduce this problem: https://github.com/WouterJ/behat-bug\n. And the test result/output: https://travis-ci.org/WouterJ/behat-bug/builds/27961348\n. Did some research, the problem is here: https://github.com/Behat/Behat/blob/master/src/Behat/Behat/Context/Environment/Reader/ContextEnvironmentReader.php#L88-90\nIt only initializes the Context class once for the first suite (which is a good thing). However, the context readers are also used to load message catalogues for each suite. The reader is only called once for the translatable Context class, because it is loaded after it. This means that only the messages of the first suite are loaded, not those of the next.\nNow I understand the code better (TranslatableContextInterface etc.), I'll create a feature for it so you can verify your fix (if you fix it :P)\n. @stof no, messages are loaded on a suite basis (using the fourth parameter of ->load and ->trans). The message catalogues look like:\nphp\nArray (\n    ['suite1'] => Array (\n        ['message_one'] => 'eerste bericht'\n        ...\n    )\n    ...\n)\nThe translations for a suite are only loaded if it is initialized (more specific, if the translatable context is initialized). Since the context is initialized only once, only the translations of the first suite are loaded.\n. I removed the right alignment feature of the -dl command. One reason of that is because @everzet mentioned several times that it is a bad practise to do so and it is really hard to properly count the length of a string with russian characters, which makes this feature very hard to achieve.\n. @everzet I'm on a holiday for 2 weeks. Feel free to rebase thus one yourself when you want to merge it quickly\n. Sorry @everzet, seems like I forgot this after my holiday. I've rebased now\n. fixed (if I'm correct)\n. @stof are you sure? Behat requires behat/gherkin: ~4.3 (https://github.com/Behat/Behat/blob/master/composer.json#L19 ) and the NarrativeFilter was added to 4.3.0: https://github.com/Behat/Gherkin/blob/v4.3.0/src/Behat/Gherkin/Filter/NarrativeFilter.php\n. @everzet @stof meant a seperate 3.0 branch.\nIf you strictly follow semver (and I thought you planned to do that), none update in the complete 3.x serie should have a BC break. That means, from a BC perspective, that upgrading from 3.0 to 3.1 is equal to upgrading from 3.0.5 to 3.0.6. This means that you would just release a new minor version once a new feature is implemented (like this one) and then continue to increment the release versions for the 3.1 serie, until another feature is implemented which will be in 3.2, etc. In these cases, there is no need to maintain the 3.0.x and 3.1.x serie, only  the latest 3.x version needs to be maintained.\n. Is there any change this can be merged soonish? I'm now hired to integrate Behat in a Dutch company and they want me to write the specifications in Dutch.\n. I submitted a fix for this in https://github.com/Behat/Behat/pull/573\n. You have to escape the % character in your config by doubling it:\nphp\nHome: \"http://example.net/login.php?something_added&bounce=http%%3A%%2F%%2Fwhere.com%%2F\"\nThis is by-design in the Symfony DI component\n. :+1: thank you. I'm learning a lot of your PRs fixing mine :)\n. > In general, you should strongly avoid creating version tags.\n\nI would only use version tags when the question content is irrevocably tied to a specific version of something and can never be relevant to earlier versions or later versions.\nIn other words, it is perfectly sufficient to tag your question c# when it contains c# code. You do not need to say that it is c#-4.0 because it uses LINQ features. c# is c#!\nThe only questions that should use the c#-4.0 tag, in my opinion, are those questions which are specifically asking for detail about features that were added in 4.0.\n\n-- Jeff Atwood explaining the version tag policy of StackExchange\nBtw, we can't \"make\" a tag a stackoverflow. Nobody can. A user with tag creation priveleges (and that doesn't require a very high rep) can create tags when creating a question with a new tag.\n. This applies to all parameters, not only TableNodes/PyStrings.\n. @everzet could you please tag the 100st release of Behat including this fix?\n. Whether it's a default setting or not, I think it has to be documented as it can be a quite common problem when using opcache.\n. You should create a new step, e.g. Given user \"John Doe\" exists. You should not copy/past all step definitions from the create user feature.\n. You should use namespaces for this:\nyaml\ndefault:\n    autoload:\n        '': %paths.base%/tests/Behat\n    suites:\n        silex:\n            contexts:\n                - Silex\\Context\n                - Silex\\AccountContext\n                - Silex\\CityContext\n        domain:\n            contexts:\n                - Domain\\Context\n                - Domain\\AccountContext\n                - Domain\\CityContext\n``` php\n// features/bootstrap/Domain/Context.php\n// ...\nclass Context implements ...\n{\n    // ...\n}\n```\nHowever, if you're context classes depends on your code implementation (silex vs domain), I don't think you are using Behat the correct way. Or, in other words, I think you shouldn't be using Behat at all.\n. @everzet the ConsoleOutputPrinter was made stream independent, to also work with other streams (a file stream): https://github.com/WouterJ/Behat/commit/db061e17bedd1b77c66eeb56ab5b8dc5cc045906\nThis is from the time where I was using a stream to use create junit reports.\n. @mikeerickson it's a very difficult feature to implement, because jUnit is quite a strict format that's not really made for Behat and because Behat isn't really prepared for this kind of formatters.\nI'm sure it'll be finished one time, just not how soon as it's a hell of a job.\n. I've created https://github.com/Behat/Behat/pull/676 , which fixes almost all comments here (except from the onces listed in that PR). If we can answer the final 2 comments (see other PR), this feature is ready.\nThis PR can be closed, thanks @james75 !\n. Looks a lot better! (I love seeing you do big refactorings and making an already very great code base even better)\n. Thanks! I'll work on it this weekend\n. I've refactored the OutputPrinter stuff to use factories, it looks a lot cleaner now :) See ce49fbd\nI'm not sure about the Statistics, as it would mean that we have to duplicate a complete class just to be able to reset a counter.\n. @everzet that statistics decorator/wrapper thing we discussed some days ago will require making a statistics interface (as we're passing the JUnitStatistics to some normal StatisticsListeners). I don't really like that, as I'm not sure how to call the base statistics then. Can you give some hints?\n. @everzet well, you suggested to create final class JUnitStatistics. Now, because it is injected in Behat\\Behat\\Output\\Node\\EventListener\\Statistics\\ScenarioStatsListener (which has a typehint for Statistics), it fails.\nHowever:\n- we can't change the typehint for that class, as it doesn't rely on JUnitStatistic's API, just on the Statistics API (it is also used by other formatters);\n- if we extend JUnitStatistics with Statistics, we get something very weird imo;\n- at last, if we create an interface Statistics, we have to rename the Statistics class, which means it won't get an obvious name...\n. Ok, coming back to this naming thing I think TotalStatistics and PhaseStatistics might be good names for the implementations? I'll update pretty soon\n. Okay, I think everything is done now\n. Done :)\n. I think he's waiting for @stof's +1\n. Thanks @stof! I've updated the PR\n. Thanks for merging this one @everzet. It has been a wild ride :)\n. Hmm, it looks indeed like a bug.\nCan you maybe add a scenario to features/junit_format.feature to reproduce this issue? We can then see how to fix the bug\n. :+1: \n. :+1: My coworkers just asked for this as well. When you aren't very familiair with Behat and the scenarios, it's hard to understand the Behat 3 output.\n. You should add scenario's for this feature.\nAlso, I don't like the way the output printers are set. This has to be refactored once #676 is merged, as it introduces a Filesystem output printer.\n. What @stof wants you to do (given that origin points to this repository and webit4me to your fork):\n```\n$ git fetch origin\n$ git checkout feature/formatter/html\n$ git rebase origin/master\n... fix any conflicts (if any) and run git rebase --continue after it\n$ git push webit4me -f feature/formatter/html\n```\n. @webit4me there are 2 standards, I always love to call the original repository origin and my fork the same as my username (this is also the convention recommended by github). Some other people call their own repository origin and the original repository upstream.\nAny way, you have to add this as a remote:\n$ git remote add upstream https://github.com/Behat/Behat.git\nThen you can optionally rename the remotes to be equal to what I use:\n$ git remote rename origin webit4me\n$ git remote rename upstream origin\n. When escaping, they will be shown as <?php.\nOp za 24 jan. 2015 16:27 schreef Ali Bahman notifications@github.com:\n. 3.0.14 (latest stable)\n. This can be closed, @stof @everzet \n. @stof @everzet this can be closed\n. As Behat doesn't require curl, but some Mink drivers do, I propose to open this issue for the http://github.com/minkphp/ organization. I'm definitely +1 for adding better error handling for this.\n. I prefer \"Mislukte\" instead of \"Gefaalde\", wdyt?\n. because imo the junit result should not differ to which OS you are using.\nMore practical: I develop using Windows and travis uses Linux, I cannot write a feature that works on both :)\n. ok, this is a left over from the code I used when I didn't knew about mkdir recursive feature (and btw, I forgot to update the code to enable that recursive feature...)\n. good idea! I added a simple sluggifier\n. for some reason, $callResult is null in most of the scenario's. Is that expected (did I miss something?) or is it a bug?\n. the same problem occurs here, where CallResults calls ->hasStdOuts() on the CallResult, which is null. Meaning I get an error: \"Called method of a non-object\".\n. ping @everzet @stof ?\n. no, the context is in the global namespace :)\n. Currently, the plan is to output one file per suite. If Jenkins doesn't support that, we have to look for another solution.\n. A Behat suite is something new in Behat 3. It's a group of feature files with specific configuration (e.g. a special Context class). By default, the suite is called \"default\" and contains all features and uses the FeatureContext class.\nEach Behat suite has feature files, which contain scenarios and those contain steps. We decided to use <testsuites> for a suite, <testsuite> for a scenario and <testcase> for a step.\n. Well, it depends on your case. You might also need more suites (for example, to test different roles). But at last, the number of suites depends on what you configured, so you always know how many files are generate (if that might solve the problem).\n. I'll rename this to FeatureElementListener\n. Yeah, I thought about that too. But how do we determine which one to take? Simply take the first one? Or randomly choosing one (-1 for that btw)? E.g. for the dutch language, I like the second keyword more than the first\n. I've changed it now. It uses the first keyword when dumping the list and it prints all keyword versions when dumping details about a step.\n. $arguments has both numeric indexes as named keys: https://github.com/Behat/Behat/pull/577/files#diff-f249ccb5e9652d4d67c49bf2d0689c94R177\n. Since travis does only have 5.3.3 or 5.3.27 as 5.3.x PHP version, isn't it a bit strange to claim support for 5.3.7 while you can't test it? (so you cannot be sure if you merge new PRs that this requirement is still true)\n. why do you unlock this event class, but leave the other event classes locked? It seems a bit inconsistent.\n. the method doesn't cast anything, it only checks for a valid context class. Won't it be better to just have a void method guardContext or guardContextIsFeature?\n. You seem to have forgotten to update this wrong format.\n. It seems a bit strange to me to open some closed classes since it turns out Behat needed to override them. Imo, if Behat overides scenario event classes, it's also likely another library would override another event class.\nThis is a problem with closing your API, you're never sure when you're going to override something.\n. I understand, but if it comes down to \"Close everything of Testwork, except if we override it in Behat\", I'm -1. That would couple Testwork develop to much to Behat develop. Testwork is a very great library to use for other testing libs, which might need to be able to do custom things with other classes than Behat.\n. Wait, sorry. It turns out I need some more coffee. I really thought this class was part of testwork. Excuses for the noise.\n. you need to add a line feed character here\n. If I'm correct either you or me can be the author of this class.\n. I created this interface with the HTML printer in mind, which would also require an element printer.\n. this can now be reverted indeed. To support assertion counters in junit reports, I had a resetStepCounters and resetAllCounters method. Since it was to hard to support the counters, I've removed junit support for it, but forgot to revert this change.\n. I still think it's more guarding (type hinting) than casting (type casting), but after @stof's explaination, I can at least understand its naming :)\n. Removing this interface would mean there is a listener in Output\\Node\\EL\\AST that only works with JUnit. Should I move it to jUnit?\n. what do you mean with this? In the JunitOutputPrinter, this is overwritten in order to return a file stream instead of a console stream.\n. another way would be to create an abstract stream output printer, with this method abstract.\n. I had to revert this back, since junit needs to reset the counters (the counter features are added again). Junit reports the counters per scenario, while the current formatters only report the total count.\n. I removed the interface and moved the listener\n. It doesn't support the full jUnit specs, just the things Behat is using. If we make it final, we should make sure it supports other jUnit specs too.\n. Hmm, I didn't look too good at the class. With the refactoring done by @james75, it seems to support the full jUnit specs (and many other things too, do you think we need some validation?).\n. the other formatter factory classes aren't final\n. other formatter factory classes have all these methods \"protected\"\n. you should add this to your global gitignore or the not commited git ignore (.git/info/exclude). It should not be part of the project's gitignore.\n. all files should end with a line feed character\n. Behat can't use traits, as it needs to be compatible with PHP 5.3\n. If you make it final, you only have to take care of backwards compatibility for the public API (the usage API). You don't have to worry about breaking things in case someone wants to extend the class.\nBesides that, it makes no sense to extend this and if you want to extend this class, there are other better ways of doing so.\nAdding a final later on will be hard, as that means a huge break for everyone extending this class. Removing it later on isn't a break, as nobody was extending it (sicne it wasn't possible), so it's just an extra feature.\n. The code now creates the directory when it does not exists. Please note that this means that there is no validation of the output_path parameter anymore and it's just assumed it's a directory that has to be generated\n. ",
    "elnur": ":+1:\n. Any progress on this?\n. ",
    "jaymecd": "Any progress on this feature so far? Tnx\n. ",
    "nchagrass": "@jaymecd see https://github.com/Behat/Behat/pull/676\n. This also happens on v2.5.0\n. :+1: \n. Hi @movrack \nI don't speak for @everzet but he's kind of busy with Symfony Live London coming up this weekend,\nthe junit output formatter should be merged soon after the event.\nCheers,\n. @tPl0ch : what you could do for now is using @james75 fork : \njavascript\n/// composer.json\n\"require-dev\": {\n        \"behat/behat\": \"dev-formatter_junit_1 as 3.0.4\"\n},\n[...]\n\"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/james75/Behat.git\"\n        }\n    ]\nSee #618 \n. it has been merged see #676 \n. ``` php\n    /*\n     * @AfterStep\n     /\n    public function takeScreenshotAfterFailedStep(AfterStepScope $scope)\n    {\n        if (99 === $scope->getTestResult()->getResultCode()) {\n            $this->takeScreenshot();\n        }\n    }\nprivate function takeScreenshot()\n{\n    $driver = $this->getSession()->getDriver();\n    if (!$driver instanceof Selenium2Driver) {\n        return;\n    }\n    $baseUrl = $this->getMinkParameter('base_url');\n    $fileName = date('d-m-y') . '-' . uniqid() . '.png';\n    $filePath = $this->getContainer()->get('kernel')->getRootdir() . '/../web/tmp/';\n\n    $this->saveScreenshot($fileName, $filePath);\n    print 'Screenshot at: ' . $baseUrl . 'tmp/' . $fileName;\n}\n\n```\nSomething like that works\n. \n. No offence : google\n. Why not using a different profile that will extend the default one ?\n``` yaml\ndefault:\n    paths:\n        features: features\n        bootstrap: %behat.paths.features%/bootstrap\n    extensions:\n        Behat\\MinkExtension\\Extension:\n            goutte: ~\n            selenium2:\n                browser: \"chrome\"\n                wd_host: \"whateverUrl\"\nproduction:\n    extensions:\n        Behat\\MinkExtension\\Extension:\n            selenium2:\n                wd_host: \"anotherUrl\"\n```\n. use this to make usage of the base url:\nphp\n$this->visistPath('test/new');\n. As long as https://github.com/Behat/Behat/pull/591 don't get merged you will not be able to do so... (I might be wrong)\n. This functionality already exists by using: \"-v -vv -vvv\"\n. I don't think we need to replicate the Symfony/Console behaviour here but it is not for me to say.\n. There is already a class with this name.\n. Shall we just get rid of it ?\n. ",
    "j-arnaiz": "Hello,\nNot official but I implemented a junit extension, feel free to try and improve ;)\nhttps://packagist.org/packages/jarnaiz/behat-junit-formatter\nRegards!\n. ",
    "robinmaree": "Should this extend PrettyFormatter and rely on the same functions used in 2.0?\n. ",
    "ragingdave": "Just out of curiosity, any idea how far the refactor is away from being finished.  Looking to have html reports of behat runs.  I would also not mind helping if need be.\n. So in this case the HTMLFormatter will be a separate formatter, and not really based off of The PrettyFormatter?\n. Well maybe it will help if I explain myself a bit more....I am trying to pass a large config array to all the contexts, previously that could be done with useContext and passing the array to each context as they get added. Is there a way to do that anymore, or do I have to redefine the array for each context that I need?\n. Yes I know that I am just trying to prevent redefining key/value pairs for 3 or 4 contexts....That is what the useContext was great for....and that is what I am trying to find a solution for.\n. Just to update for those in a similar situation, I was able to somewhat get this working by transistioning sort of back to a single featureContext, but using traits as a dictionary of step definitions, and a shared parameters array passed to the single FeatureContext. Hope it helps others!\n. Resolved due to yml format issue\n. I am aware of that part.  I have the need to use features that are the same across suites in a given profile but can't be in the other profile.  I can put it in the default suite of a profile but not in the default profile.\n. I would actually propose that the same mentality as profile default is put into effect into the suite defaults, I would think others might expect that to be the same behavior across those two ideas.\nEx.\nProfile default is inherited by other profiles.\nSuite default is inherited by other suites.\n. I would definitely like to help get that done but the code is a bit hard to follow atm.  The latest split of core things into Testwork kind of has me mixed up.\n. Ah ok... Thank for the quick reply!\n. It definitely is supported as I am currently using it in tests currently, however it is in one file right now.  I am looking to break up a growing file and this would help a lot of we can properly support it\n. I still think that a different import solution should be put in place to allow full usage of the yaml spec or more than is supported currently. As far as what is handled currently, each file is treated as a separate file, so anything that yaml can't natively cross-file load will be broken if implemented that way.\nAlso, I would think that the imports are being used to break files up and specifically break files apart, in which case a concatenation technique should work for the majority of people.\n. Yeah in abit more testing I see that alot of the configs get lost. I do believe that there needs to be a way to maintain compatibility with YAML spec with regards to how the imports are working, As the symfony component seems to support things that behat imports cannot at the moment.  And although I see now that contatenation will not work, there needs to be a way for the spec to be supported. I don't necessarily want to overwrite parts of the config but instead extend upon them.\n. In that case I would propose new functionality that would allow imports to merge together before loading, at least at a subset of imports with a flag of some kind? such that:\n```\nbehat.yml\nshortened for easy example\n\nFeatureContext:\n    parameters:\n        user: &USER\n            username: default\n            password: pass\nimports:\n'something.yml' #some flag that says to merge this file into this current one before loading\n```\n\n\n\n```\nsomething.yml\nagain shortened\n\nFeatureContext:\n    parameters:\n        user:\n            <<: *USER\n           password: diff_pass\n```\n\nThat way all current functionality is maintained, while giving the added choice of leveraging this kind of functionality? It also puts the blame on the configuration if it screws up as this is a special use case.\n. The use case is simply being able to use the node anchors/references across files.  I realize this is not supported by yaml to be able to use them across files, but how behat and imports work, this should be a supported function of the import mechanism.\nfull example:\n```\nbehat.yml\nplatform:\n    suites:\n        client1:\n            contexts:\n                - FeatureContext:\n                      parameters:\n                          user: &USER\n                              username: username\n                              password: pass\nimports:\n    - 'something.yml'\n```\n```\nsomething.yml\nplatform:\n    suites:\n        client1:\n            contexts:\n                - FeatureContext:\n                      parameters:\n                          user_extra:\n                              <<: *USER\n                              password: diff_pass\n```\nWould result in (at least in yaml)\n```\ncombined\nplatform:\n    suites:\n        client1:\n            contexts:\n                - FeatureContext:\n                      parameters:\n                          user:\n                              username: username\n                              password: pass\n                          user_extra:\n                              username: username\n                              password: diff_pass\n```\nas this is the current functionality of yaml.\n. I would feel that a slightly slower but more useful parser would be worth the work to allow more of native yaml into the configs.  And yes I am aware that something.yml is not valid as it stands now, but if it was in the behat.yml file it would be valid but a proper import would make it so.\nie.\n```\nbehat.yml\nplatform:\n    suites:\n        client1:\n            contexts:\n                - FeatureContext:\n                      parameters:\n                          user: &USER\n                              username: username\n                              password: pass\n                          user_extra:\n                              <<: *USER\n                              password: diff_pass\n```\nresulting in the same result as above\n. I understand that yaml does not have imports, I guess my main concern was based on differing ideas of how the imports should work.  The way they work now is very close to a, what I consider, proper import.  But this is based on the idea that each file is not being considered separate but instead one large broken up file.  Being that each import is being viewed as a single file instead of an extension of everything before it, that makes my point moot. If this is the case then go ahead and close this issue as it is then not relevant to the current direction of behat's import.\n. That seems logical enough however when I do something like:\nyaml\ntags: '~@login&&~@logout,@news'\nI would expect to see the news run which it doesn't.\nAdditionally,\nyaml\ntags: '~@login&&~@logout&&@news'\nDoesn't have news being tested either.\nI am sure I am just missing something, but from the looks of it, I can't say \"don't run this and this but do run that\".\n. Basically what I am trying to do in the scope of my example is be able to be selective on what is run and what is not.  For instance, if I have features tagged as such:\nfeat1: @login @logout @pages\nfeat2: @news @pages\nfeat3: @client\nfeat4: @home @pages\nI want to be able to say, don't run login or logout but run news.\nI would think if I just have:\nyaml\ntags: '~@login&&~@logout,@news'\nThen it should work.\nI guess my bigger question is how should these be ordered to allow such granularity? Should I just have the excluded items at the end then? Or am I just coming at this all wrong?\n. So basically the profile filters are there to allow CLI overriding, and nothing else? Why wouldn't they be able to be overridden by the suite level filters? Ie Being able to turn on tags for the whole profile but some suites don't need a particular tag run or vice versa.\n. so there are profile level suite filters?  Would these be overridden by the suite level filters?\n. Just really looking for an example or a doc page to look at...\n. What I guess I am really trying to figure out is if there are filters that can be set in the profile and then overridden in the suites\n. ",
    "cardinall": "Hi everybody\nhave you ever tried to use \"formatter:\" in behat.xml file using behat 3.0.x ? pls share your config if it works.\nalso how to use multiple formats in CLI ? the official method (-f pretty,progress,junit --out=,,/website/logs/behat-xml) doesn't work on 3.0.x\nthanks in advance\n. Correct me, if Im wrong, but in your example there is no conflict between formats, progress is like method of printing, but the direction is the same. in official docs written that it is available to print pretty output in screen, and the junit output in files. \nI used 2.5 , and it supports multiple directions. Now in 3.0.x multiple directions (file/screen/folder) at the same time seems unavailable.\nP.S. junit is already available, but there is a conflict when I used it with pretty and progress \nmy version is \"behat version 3.0-dev\"\n. there is a way to use several directions\nbehat --format=pretty --out=somefile --format=progress --out=null --format==junit --out=/website/logs/behat-xml ...\n. ",
    "emwalpole": "@everzet Sorry to ask again, but what is progress on the html formatter? If there hasn't been any, I would like to try working on it as I need it to work. Thanks!\n. @everzet I have gone and recreated the HtmlFormatter as best I can using the existing PrettyFormatter files, Symfony Templating, and Bootstrap styling. I will try to figure out how to do a pull request and you can take a look at it I hope. Thanks!\n\n. @DaSayan I can put up what I have if you want to use it immediately, but it needs a lot of testing and I was actually thinking about overhauling it already now that I know better how it works (after staring at the code for so long). I want to do it in a more dynamic/flexible way whereas current code seems like just a hack of the pretty printer with a lot of template files (html tags everywhere!).\n. @dutchiexl Nice, yours is wayyy simpler than mine :)! I should look into Twig more.\n. ",
    "ianterrell": "@emwalpole Awesome. :)\n. ",
    "DaSayan": "Sorry to ask, but there is some news about the HTML formatter ?\n@emwalpole Good ^^\nWill it be possible to use it ? I didn't see the code on your repo.\n. @emwalpole I understand.\nI had a need about this formatter because the pretty formatter isn't good enough for my needs, and I regret the HTML formatter of Behat 2...\nI tried by myself to make a HTML formatter but I was quickly blocked, because I don't know enough Symfony and the Behat core to understand where to begin and where to put the new code.\nI think that for now, I will take a look into your project, make much testing, and see how have you done it :)\nAnd if I see things that I can improve (regardless of the overhauling) or some bugs, I could also possibly participate if you want.\nThanks for the sharing !\n. @dutchiexl I forked from your plugin to generate a HTML report with Behat 2 HTML report format.\nIt's a little dirty and there is many to be done, but it works...\nAlso, I wanted and managed to make the plugin working without Twig (for some reasons)\n. For my part, I will continue to develop on my fork of dutchiexl's plugin.\nI have some ideas to implement, and many cleaning to do.\nBut the logic that I want to follow is a quite different from dutcihiexl's version (with no Twig for example), so I don't know if it will be possible to merge my developments into dutchiexl, or if my fork will split off...\n@dutchiexl  : what do you think about this ?\n. @dutchiexl Ok I am agree with you.\nI am working to make the rendering behind an abstraction layer.. \nI think also that I will reintegrate your Twig report at side of the Behat 2 HTML report, behind this abstraction, and let the choice to choose the report format in the behat.yml config file. \nAlso, it will be possible for somebody to add new report formats if he wants.\n. ",
    "iso13": "@emwalpole I can have my team test as well.  We are running BEHAT 2.5 and the HTML report is how the business reviews the results.\nCheers,\nDavid\n. Getting the following message:\nWarning: file_put_contents(/Users/dtran/Work/starwood/behat/vendor/emuse/behat-html-formatter/src/../reports/test_report.html): failed to open stream: Permission denied in /Users/dtran/Work/starwood/behat/vendor/emuse/behat-html-formatter/src/BehatHTMLFormatter.php on line 314\nSo ran it as sudo bin/behat --tags @dave -p test --format html --out test.html\nNot outputting the test.html.  Any insight?\n. Thanks.  That works like a charm.\n. ",
    "dutchiexl": "I created a plugin for HTML reporting, It works out of the box. It creates an array of suits, features, steps ... that can be rendered in a single template.\nSince this works closely with symfony I used twig as a dependency. You can check it out or fork me. I could use some help creating a nice report.\nI also added the plugin to packagist\nhttps://github.com/dutchiexl/BehatHtmlFormatterPlugin.git\nhttps://packagist.org/packages/emuse/behat-html-formatter\n. I could use some help, so if anyone feels compelled, give me a sign ;)\n. This tag doesn't do anything from the plugin perspective: --out test.html\nthe report is always called test_report.html and is inside vendor/emuse/behat-html-formatter/reports.\nThe permissions on the folder should be so that behat can write to the folder.\nDoes this help ?\n. Working without twig would mean creating an abstraction layer, which means alot of work :). I could check it out, but I can't promise it will be high on my priority list :/\n. Are you going to use composer or not ?\n. you should add\n\"emuse/behat-html-formatter\": \"dev-master\",\nto your \"require\" section of composer and do a composer update. This will install the plugin. Then just use the guide in github\nhttps://github.com/dutchiexl/BehatHtmlFormatterPlugin.git\nIf you get stuck let me know\n. Are you using behat 3 ?\nIs the file indented like this:\n\n  formatters:\n    teamcity: false\n    pretty: true\n    html:\n      output_path: %paths.base%/build/html\n\nignore the other formatters\n. I am a fan of the extension, this would give you the most flexibility.\n. For the moment I certainly am. I would have to see at what point the extension is growing, for at the moment I do not know how many people are using it, and if there are a lot of new requirements.\n. I believe that we would profit by using one repositorie. \u00c0 lot of functionality would still be the Same even if different rendering engines are used. In my opinion the rendering should be an abstraction. \n. AHA, ok and how do I implement this controller is my extension ?\nIf I am not mistaken, I use the load function in the extension and then create a definition of the controller ? How does behat know which controller to use ?\n\n $definition = new Definition('Behat\\Behat\\Definition\\Cli\\AvailableDefinitionsController', array(\n            new Reference(SuiteExtension::REGISTRY_ID),\n            new Reference(self::WRITER_ID),\n            new Reference($this->getListPrinterId()),\n            new Reference($this->getInformationPrinterId())\n        ));\n\n. ",
    "ichionid": "@emwalpole seems like you laid down a really useful tool. Being a composer json ignorant(:p) could you guide me a guid on how to install your plugin?\n. I can use composer. I installed the initial behat through composer. Problem is that I am not 100% sure how it works.\n. Ok package was discovered. However, adding the lines proposed in the readme file I get an \"\nInvalid type for path \"testwork.formatters.output_path\". Expected array, but got string\"\nMy .yaml looks like:\nyaml\ndefault:\n  suites:\n    default:\n      contexts:\n        - FeatureContext\n        - Drupal\\DrupalExtension\\Context\\DrupalContext\n        - Drupal\\DrupalExtension\\Context\\MinkContext\n        - Drupal\\DrupalExtension\\Context\\MessageContext\n        - Drupal\\DrupalExtension\\Context\\DrushContext\n  formatters:\n    html:\n    output_path: %paths.base%/build/html/behat\n  extensions:\n    emuse\\BehatHTMLFormatter\\BehatHTMLFormatterExtension:\n      name: html \n    Behat\\MinkExtension:\n      goutte: ~\n      browser_name: chrome\n      javascript_session: selenium2\n      selenium2: ~\n      base_url: http://my.local.dev\n    Drupal\\DrupalExtension:\n      blackbox: ~\n      api_driver: 'drush' \n      drush:\n        alias: 'self'\n      text:\n        log_out: \"Log out\"\n        log_in: \"Log in\"\nBtw big thanks for the help!(Sorry can't add spaces, comment text trims empty spaces.\n. yes behat 3, it seems that this one did the deal. Thanks!\n. ",
    "narozhniyy": "Hi everyone, I add this to my behat.yml :\nformatters:\n    html:\n        output_path: %paths.base%/\n  extensions:\n    emuse\\BehatHTMLFormatter\\BehatHTMLFormatterExtension:\n        name: html\n        renderer: Twig\n        file_name: Index\n        print_args: true\n        print_outp: true\n        loop_break: true\nAnd behat show error :   [Behat\\Testwork\\Output\\Exception\\FormatterNotFoundException]\nhtml formatter is not found or has not been properly registered. Registered formatters: junit, progress, pretty.\nCan anybody help me?\n. @legovaer ok, thanks. How I can create html report with using Behat 3 core?\n. @legovaer this is the most useless discussion, read and write about that Behat 3 dosen't have html reports, people need examples, and solutions, and when I ask about issue of one solution which describe on entire page you say don't write here, write in new issue, but this theme about Behat 3 html reports as and my question too. \n. Not working for me undefined method getContainer(), which lib did you use? (behat 3)\n. @BentCoder it's will be great, thanks\n. @BentCoder did you forget about me?\n. ",
    "legovaer": "@narozhniyy Your issue does not belong here, the extension you are using is not inside the core of Behat. If you need support on this extension, create a new issue in the project page of BehatHtmlFormatterPlugin.\nWhen you create your issue, make sure that the output of your behat.yml is formatted using Markdown. That will be easier to read.\n. @narozhniyy Simple answer: you can't.\nIf you had read the entire page you would have noticed this comment. Currently it's not possible to output HTML using only Behat 3.x's core functionality. \nHowever, using the BehatHtmlFormatterPlugin extension developed by @dutchiexl will allow you to generate HTML. If you are facing any issues using this extension, create a new issue on the extension's GitHub project page.\n. And what do you think about the idea that all suites will inherit from the default suite? This will save me a lot of lines in my configuration file. \nI'm quite sure I'm not the only person who's using more then 2 contexts in every suite.\n. I'm just thinking out loud here, but it would be nice to have these contexts 'auto-loaded'. E.g.;\nAs soon as one of the contexts is calling the getContext() method on the environment object, Behat will automatically check if that context has been loaded yet, if that's not the case, Behat will load that context. \n/** @BeforeScenario */\n  public function gatherContexts(BeforeScenarioScope $scope) {\n    $environment = $scope->getEnvironment();\n    $this->messageContext = $environment->getContext('Drupal\\DrupalExtension\\Context\\MessageContext');\n    $this->drupalContext = $environment->getContext('Drupal\\DrupalExtension\\Context\\DrupalContext');\n  }\nThe downside is that it will be no longer possible to have a clear and structured overview of all contexts that are used as we currently have inside the configuration file.\nI don't know if this will be even feasible.\n. Maybe I have indeed a wrong perception about 'Suites'. The way I implement the suites, If I'd like to test the behaviour of GitHub;\nSuites\n- suite 1: test user authentication\n- suite 2: test comment functionalities\n- suite 3: test issue functionalities\n- suite 4: test repository functionalities\nContext\n- user-authentication: steps for user management\n- comment: steps for comment management\n- issue: steps for issue management\n- repositories: steps for repository management\n- mink: steps for testing the website ui\nIn this case, suite 1 should use the user-authenticationand mink context. But suite 2 should use mink, user-authentication and comment.\nThis is just an easy example and I'm already using 3 contexts in one suite. In my current project, I'm using the PageObject extension. For almost every page (which contains a lot of different functionalities), I have a separate PageObjectContext. This results in overload of extra contexts I need to use. In Behat 2 this was easily covered by just loading them as sub contexts (using a directory iterator).\n. That works indeed. \nNot sure wether I should close this issue or not, the (expected) default behavior is not working. Unless the new default behavior is like what has been described above. In that case the documentation needs to be updated.\n. @jakzal I'm quite sure that it's not in the Behat3 docs. Behat3.0 Running Tests is an empty page. \nThanks for the link to the docs repo. I'll start contributing to the docs.\n. Ticket closed because this is expected behaviour in Behat 3.0 as mentioned by @jakzal.\n. Indeed. Executing ./bin/behat --suite=my_test_suite works, but isn't the expected behavior of course. Maybe a remark needs to be added to the documentation?\n. You can find the documentation here\n. ",
    "firegate666": "Stumbled across this issue and the BehatHtmlFormatterPlugin by @dutchiexl works awesome for me. Thx.\n. You can setup a file in bootstrap with your needs. I require composer autoloader this way\n. In our bootstrap file we set up some basic constants, connections, load configs, add custom handlers and stuff like that. Similar to the bootstrap you can add for PHPUnit\n. Hm, will think about a hook. I would have to define the @BeforeSuite hook in each context. My temp solution is a common parent class that does the trick.\n. Well, look at all the attributes missing in the second XML about execution times and test counts. \nBut I'll try to figure out more details.\n. Ok, I've figured out. The previous version of jUnit formatter output was PHPUnit compatible, but the new one is jUnit. I adjusted the jenkins configuration to use jUnit instead of PHPUnit 3.x\n. ",
    "davegallant": "Thanks so much @dutchiexl. I like the bouncing circle animation.\n. ",
    "rebajz": "@dutchiexl your html plugin is great. It possible to do in the future multi-language version? In behat 2.5.5 working --lang=cs and html report was in cs language....\n. I am looking forward to it so much. I need insert scenario name to screenshot name... ;-)\n@AfterStep (afterStepScope)\n. thanks, ok, understand\nBut this working for me:\n/\n\n     * @Then /^I check url \"([^\"])\" i should be on$/\n    */\n    public function checkURLIShouldBeOn($field){\n        $session = $this->getSession();\n        $domain = $session->getCurrentUrl();\nif (strpos($domain,$field) !== false){\n        echo \"url are same\";\n    }else{\n        throw new \\Exception('Im not on url i wanted to be. Im on url ' . $domain);\n    }\n}\n. ",
    "SamyOteroGlez": "I installed the plugin and I got this error: \n[Symfony\\Component\\Config\\Definition\\Exception\\DuplicateKeyException]  \n  Duplicate key \"html\" for path \"testwork.formatters\".\nwhen run the behat command (vendor/bin/behat).\n\n`Here is my behat.yml:\ndefault:\n\nextensions:\n      Behat\\MinkExtension:\n            base_url: http://localhost\n            sessions:\n                  first_session:\n                      goutte: ~\n                  second_session:\n                      selenium2: ~\nformatters:\n      html:\n            output_path: %paths.base%\n      extensions:\n            emuse\\BehatHTMLFormatter\\BehatHTMLFormatterExtension:\n            name: html\n            renderer: Twig,Behat2\n            #file_name: report\n            print_args: true\n            print_outp: true\n            loop_break: true`\nhere is my composer.json:\n\n`{\n\n\"require\": {\n    \"behat/behat\": \"3.@stable\",\n    \"behat/mink\": \"1.@Stable\",\n    \"behat/mink-extension\":  \"\",\n    \"behat/mink-goutte-driver\":     \"\",\n    \"behat/mink-selenium2-driver\":  \"\",\n    \"behat/mink-sahi-driver\":  \"\",\n    \"emuse/behat-html-formatter\": \"0.1.*\"\n  }\n}`\nAny ideas?\nThanks in advanced.\n. Thank you very much for the response.\nI tried to use that function selectOption($select, $option) but I'm getting this error\nElement is not clickable at point (1245, 9.333328247070312). \nOther element would receive the click: \n<a class=\"dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"></a>\nAlso I tried writing a test to check a radio button on the bootstrap page, wish are the same I'm using in my project and it works perfectly well.\nI read about it on:\nhttp://stackoverflow.com/questions/18979890/check-radio-button-with-behat\nhttp://stackoverflow.com/questions/13518157/check-radio-button-state-in-a-behat-mink-scenario\nhttps://github.com/Behat/MinkExtension/issues/166\nHere is how looks the radio button:\n\nI'm not sure how to solve this.\nThanks in advance.\nSamy\n. In this case, the radiobutton it's hidden, and you can check/un-check it using the labels and it takes the value using js.\nThat could be the reason of my issue?\nif that is the case, \nHow can I test that behaviour using behat/mink?\nThanks\nSamy\n. The url seems to be the correct one\nThanks. I know that could be related with the Laravel environments, if you run the tests in under the test environment previously defined and you access to the app through the browser, the app will not be running under the test environment. \nTo avoid that problem I just defined a unique environment for everything (at least until solve this issue, this will change in the future) and also I have only one db, no test databases.\nThanks.. I think I solved the issue.\nFor some reason DB::beginTransaction() and DB::rollback() does not work properly with Behat.\nHere is my solution\n```\n/*\n     * @javascript\n     * @BeforeFeature\n     /\n    public static function before(BeforeFeatureScope $scope)\n    {\n        putenv('APP_ENV=local');\n    $tableNames = Schema::getConnection()->getDoctrineSchemaManager()->listTableNames();\n\n    DB::statement('SET FOREIGN_KEY_CHECKS = 0');\n\n    foreach ($tableNames as $name) {\n        //if you don't want to truncate migrations\n        if ($name == 'migrations') {\n            continue;\n        }\n        DB::table($name)->delete();\n    }\n    DB::statement('SET FOREIGN_KEY_CHECKS = 1');\n\n    Artisan::call('migrate');\n\n    try {\n        Artisan::call('db:seed');\n    } catch (Exception $e) {\n        dump('seeder failed');\n    }\n}\n\n/*\n     * @javascript\n     * @AfterFeature\n     /\n    public static function after(AfterFeatureScope $scope)\n    {\n        putenv('APP_ENV=local');\n        Artisan::call('migrate:rollback');\n    $tableNames = Schema::getConnection()->getDoctrineSchemaManager()->listTableNames();\n    DB::statement('SET FOREIGN_KEY_CHECKS = 0');\n\n    foreach ($tableNames as $name) {\n        //if you don't want to truncate migrations\n        if ($name == 'migrations') {\n            continue;\n        }\n        DB::table($name)->delete();\n        //Schema::dropIfExists($name);\n    }\n    DB::statement('SET FOREIGN_KEY_CHECKS = 1');\n}\n\n```. Thanks @stof.\nSo here what could be the best approach for my tests? I want some test running without selenium and others with selenium.\nMany thanks.\n. Thanks!\nCheers.. Thanks so much @stof \nCheers. ",
    "rogeriopradoj": "Oh, ok. I was preparing a Pull request for this.\nAny reason for dropping Vagrant?\nBest...\nRogerio\n. Well said!!!\nThanks, Christophe!\n\u1427\nBest regards\nRogerio\n. ",
    "ricoli": ":+1: all good\n. Oh didn't see the previous PR... @danielcsgomes can you let me know what you think of my translation? Similar to yours, apart from \"steps\" as \"defini\u00e7\u00f5es\", \"snippets\" as \"fragmentos\" and singular cases for the counts.\n. @danielcsgomes sure, go ahead and merge, might as well use your PR since it was created first.\n. @stof, @danielcsgomes I thought that exemplos would create confusion with the Examples keyword of Gherkin, which would be translated in the same way - that's why I went for fragmentos (snippets are fragments of code anyway). Then again, exemplos is also a fitting translation for snippets so I'm OK with it.\n. ",
    "tgalopin": "Woops, sorry for the revert.\nThanks for the tip. I'll check for \"Hooks\" in 2.5.\n. Yup, saw it so I kept \"hooks\".\n. ",
    "peterrehm": "@Danez updated.\n@stof I have also cross checked it with the other PR #371. Should be good to go.\n. ",
    "weyandch": "hiya @stof , didn't check the open PRs when following your link on twitter.. my fault.\nThe existing one from peterrehm is absolutely fine and should be merged\n. ",
    "salahm": "Sorry, it was done before the new formatting\n. ",
    "whisller": "Uh didn't notice that PR with this same translation was prepared ;) Next time! :)\n. Hehehe :) Started fixing then realised \"well it's not bug it's feature\" :D\n. ",
    "tchaffee": "Could someone give me an update on this? It's WIP for 2 months. Is it stalled?\nI've noticed with my installed version of behat that the junit output isn't really correct. It's missing the  tag, ALL of the output should be in one file not separate files, and the  tag has a classname attribute which is not allowed per the spec.\nI'd love to help move this along and get these things fixed. Or perhaps even help with other priorities so this gets to the top of the list.\n. So I'm back from the slopes and can start looking at this now. It looks like @WouterJ is leading this?\nI'm using the JUnit output on Jenkins so hopefully I can help with some direction about what works and what doesn't. I actually wrote a quickie PHP script to massage the existing output to get it to work with the Jenkins JUnit plugin.\nIn any case, let me know how I can help and I'll be happy to contribute.\n. If it helps to make a decision about what @gquemener is suggesting: PHPSpec JUnit output works well for my CI needs. Might be a reasonable approach to copy / paste and get it working and then decide if it still needs a refactor to use SimpleXML for some reason?\n. A bit late responding here but hopefully my feedback will still help. Where did you get the XML schema (features/bootstrap/schema/junit.xsd)? At a glance it looks ok, but if you're using the same source as Jenkins then that's going to do the trick for me.\n. That's perfect for my needs, and hopefully others who are looking to integrate with CI tools. One more question: per the spec, is the goal now to output one file? Behat currently outputs one file per every .feature file, which isn't very useful for a CI tool like Jenkins where you need one file reporting on all the features.\n. Can you clarify what you mean by \"suite\"? Is that a .feature file?\nFor CI needs keep in mind that (at least for Jenkins) you need to give the name of the file to process. So that would mean updating my CI everytime there is a new .feature file, which is less than ideal.\nLooking at the XML schema it should be clearer what the objective is: a  (note plural ) element that contains many  elements.\n. That sounds reasonable. Safe to assume that in normal practice there would only be one Behat suite and that Behat suites are created infrequently? As opposed to scenarios and steps which obviously can grow by the day.\n. I'm just going to have to guess here and go with my original assumption that suites won't be added often. For sure we don't want a unique file for each scenario because scenarios can potentially be added on a daily basis or even more frequently than that and it that would require updating the CI config every time. It's hard for me to tell until I start using it, but I think safe to move ahead on the assumption that suites won't be added frequently and that most projects will use one suite for the life of the project.\n. @gquemener Thanks for that suggestion. I originally tried that, but the XML behat produces isn't valid according the schema Jenkins uses. Just for example, the testsuite element has a classname attribute that is not valid. If you can help me get around that I can try to create a step with *.xml and see how the output looks.\n. IDK, maybe we are using different versions of behat? Here's an example of what I get in one file.\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuite classname=\"behat.features\" errors=\"0\" failures=\"0\" name=\"Visitor login\" file=\"/home/tchaffee/ws2/gowili-beta/src/features/visitor_can_login.feature\" tests=\"28\" time=\"47.564057\">\n    <testcase classname=\"Visitor login\" name=\"Log in with username and password\" time=\"8.915216\">\n    </testcase>\n    <testcase classname=\"Visitor login\" name=\"Log in with bad credentials\" time=\"10.494067\">\n    </testcase>\n    <testcase classname=\"Visitor login\" name=\"Trying to login without credentials\" time=\"8.994555\">\n    </testcase>\n    <testcase classname=\"Visitor login\" name=\"Trying to login as non existing user\" time=\"9.601966\">\n    </testcase>\n</testsuite>\nIn any case, I'm not opposed to multiple files. I have only one goal: get behat playing nicely with Jenkins.\n. ",
    "XWB": "@stof Check new PR\n. ",
    "dylanlgs": "Well then, I guess this is a request for a feature that already exists, and it's time to upgrade versions. Closing.\n. Yeah, but I took a few minutes more to think about it, and really the behavior I'm looking for can be accomplished by catching the error exception and making sure it is due to an invalid argument type. So while it might still be cool to have the annotation, there are other ways of achieving what I was after.\n. ",
    "aequasi": "+1\n. ",
    "srizzling": "Or is this soultion the neatest? \n$text = \"\\t\" . \"Scenario: \" . $scenario->getTitle() . \"\\n\";\n $text .= implode(\"\\n\\t\\t\", $this->getStepText($scenario));\npublic function getStepText($scenario){\n        $steps = $scenario->getSteps();\n        $array = array();\n        foreach ($steps as $value){\n            $array[] = $value -> getText();\n        }\n        return $array;\n    }\n. ",
    "jmauerhan": "Hi stof,\nCould you be a little more specific in what issues it introduces? I have been playing around and edited the code in the StepTester class to trigger the @BeforeStep and @AfterStep hooks, and I am not seeing any issues with my test suite - in fact it also gave us the added benefit of seeing the chained step in the \"pretty\" output, something else we wanted to try to do. (I am working on an extension to allow the rest of my team to use the change and avoid editing the vendor files directly). But after using it on our entire test suite, I did not get any different results than before, the same tests passed/failed, etc, the only change was our beforeStep function ran between each sub-step as well. Maybe it depends on what you have in your beforeStep?\nThanks so much for the quick response, I really appreciate it. I totally understand not adding it to the current version. Unfortunately we aren't planning to upgrade to 3.0 any time soon but do you know if this is still the case in 3.0? It sounds like it would be.\nEdit: When I did make the change the output came out a little different than I expected, but it was easy to modify, and put the steps in the order I wanted.\n. I've done this in 2.5, I'm not sure how much everything has changed with 3.0+ However, I would suggest not trying to test both at the same time, but each aspect individually, if at all possible. \nIf you need to, here is how I did it in 2.5: Create a new instance of a Driver and it's Session in your context, and assign it to another variable in your context. \nMy main driver was selenium, and this step opened a Goutte driver with the Goutte/Guzzle clients. I saved it to a property and used it for the rest of the tasks I needed it for.\n```\n$goutteClient = new \\Behat\\Mink\\Driver\\Goutte\\Client();\n$guzzleClient = new \\Guzzle\\Http\\Client();\n$goutteClient->setClient($guzzleClient);\n$driver = new \\Behat\\Mink\\Driver\\GoutteDriver($goutteClient);\n```\n. Thanks @everzet - I'll update to 3.1 and try again. I am on Windows, I should have mentioned that, so it could be environmental, a lot of times people forget to check if file writing things work on Windows and often they don't, cause... Windows ;) \n. ",
    "sandersjj": "Actually no clue because when I do behat -V \nI get 'Behat version DEV'\nSo not sure\n. Composer\nOp 13 mrt. 2014 14:58 schreef \"Konstantin Kudryashov\" \nnotifications@github.com:\n\n@sandersjj https://github.com/sandersjj where did you got behat from?\nComposer or phar?\n\nReply to this email directly or view it on GitHubhttps://github.com/Behat/Behat/issues/460#issuecomment-37535377\n.\n. Cool :\nbehat/behat                   v2.4.6             Scenario-oriented BDD framework for PHP 5.3\nbehat/gherkin                 v2.2.9             Gherkin DSL parser for PHP 5.3\nbehat/mink                    v1.4.3             Web acceptance testing framework for PHP 5.3\nbehat/mink-browserkit-driver  v1.0.5             Symfony2 BrowserKit driver for Mink framework\nbehat/mink-extension          v1.1.4             Mink extension for Behat\nbehat/mink-goutte-driver      v1.0.9             Goutte driver for Mink framework\nbehat/mink-selenium2-driver   v1.0.6             Selenium2 (WebDriver) driver for Mink framework\n. In this configuration:\n\nbehat/behat                   v2.5.0             Scenario-oriented BDD framework for PHP 5.3\nbehat/gherkin                 v2.2.9             Gherkin DSL parser for PHP 5.3\nbehat/mink                    v1.4.3             Web acceptance testing framework for PHP 5.3\nbehat/mink-browserkit-driver  v1.0.5             Symfony2 BrowserKit driver for Mink framework\nbehat/mink-extension          1.3.x-dev a6c0b09  Mink extension for Behat\nbehat/mink-goutte-driver      v1.0.9             Goutte driver for Mink framework\nbehat/mink-selenium2-driver   v1.0.6             Selenium2 (WebDriver) driver for Mink framework\nI have got the same behaviour.\n. PHP 5.5.10-1~dotdeb.1 (cli) (built: Mar  6 2014 18:55:59) \n. @everzet I have double checked it a few times and even copy pasted from the output of behat -d\nBut still get the message that it's not implemented \n. Actually I have got a very simple FeatureContext:\n``` php\n<?php\nuse Behat\\Behat\\Context\\Step;\nuse Behat\\MinkExtension\\Context\\MinkContext;\nuse Behat\\Behat\\Event\\StepEvent;\nuse Sanpi\\Behatch\\Context\\BehatchContext;\nuse Behat\\MinkExtension\\Context\\RawMinkContext;\nclass FeatureContext extends MinkContext\n{\n/**\n * User credentials for login with selenium\n */\nprivate $users;\n\n\npublic function __construct(array $parameters)\n{\n    if (isset($parameters['users'])) {\n        $this->users = $parameters['users'];\n    } else {\n        throw new \\Exception('behat.yml does not contain parameters for user credentials');\n    }\n\n    $this->useContext('behatch', new BehatchContext($parameters));\n}\n\n}\n```\nAnd the line in my scenario is:\ngherkin\nThen I wait until I see \"136,00\"\nThe error:\n```\nYou can implement step definitions for undefined steps with these snippets:\n/**\n * @Then /^I wait until I see \"([^\"]*)\"$/\n */\npublic function iWaitUntilISee($arg1)\n{\n    throw new PendingException();\n}\n\n```\n. ",
    "pniederlag": "\"bleeding edge\" behat/behat 3.0.x-dev 7432267\n. ",
    "seb0zz": "I need to access the tags of a scenario to check if certain actions in my code should be performed before the step. Also it seems to be a bit inconsistent if it is possible to get the feature or suite but not the scenario. Especially because the scenario is much closer to the step in the hierarchy. \n. +1\n. ",
    "josephmilla": "\"I should see\" is detecting the other texts/links it's just the ones inside table elements that are causing the problems.\n. html\n<tbody><tr class=\"r0 lastrow\">\n<td class=\"leftalign cell c0\" style=\"\"><a href=\"../user/view.php?id=4&amp;course=1\">alice jones</a></td>\n<td class=\"leftalign cell c1\" style=\"\">ajones@example.com</td>\n<td class=\"leftalign cell c2\" style=\"\"></td>\n<td class=\"leftalign cell c3\" style=\"\"></td>\n<td class=\"left align cell c4\" style=\"\">Never</td>\n...\nHere's the table and the \"alice jones\" that I need to detect. How can I implement the XPath for this case?\n. I don't think I can use that since the username that I'm searching for will always change.\n. Here's the code: https://gist.github.com/josephmilla/9794500\n. Nope. It's not working:\n(::) failed steps (::)\n1. Xpath matching locator \".//*[@class='leftalign cell c1']\" not found.\n. ",
    "gubarazer": "I have configure the bundle in my behat.yml: \nextensions:\n  Behat\\Symfony2Extension\\Extension:\n    mink_driver: true\n    bundle: myBundle\n    kernel:\n      env: test\n      debug: true\nNow ./bin/behat -c behat.yml works on my computer but on my server it does nothing.\nI think I have to --init my bundle on my server test like that: \n./bin/behat --init @myBundle\nWhen I run this command nothing happened. So i try to do this without specifying the bundle (./bin/behat --init) but i have the following message: \n[InvalidArgumentException]\nProvide features argument in order to init suite.\n. In this case i don't understand why i don't have any output when i run ./bin/behat -c behat.yml or ./bin/behat @myBundle\n. Not yet, but i'll work on it again later (or now if you have any idea concerning my problem). \n. ",
    "Herzult": "@stof I think this is due to the use of is_subclass_of in https://github.com/Behat/Behat/blob/3.0/src/Behat/Behat/Context/Environment/UninitializedContextEnvironment.php#L50.\nIf you take a look at the changelog in the doc http://www.php.net/manual/en/function.is-subclass-of.php, you'll see it doesn't support interface names before 5.3.7.\n. ",
    "glensc": "you mean if i push it against proper 2.x branch, it will be rejected too? or why you closed the issue?\n. ",
    "lsolesen": "Probably not. But it finishes all the behat tests and it happens after it\ngives its results.\nDen 16/04/2014 20.14 skrev \"Konstantin Kudryashov\" <notifications@github.com\n\n:\nI don't think it has anything to do with behat.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Behat/Behat/issues/491#issuecomment-40632864\n.\n. \n",
    "TLyngeJ": "I'll admit that I might be on the wrong track here. :-)\nBut how would it then be possible to reuse a chunk of feature steps? If I write them as PHP, using the Given, Then and When classes, I would loose some of the features, the CLI provides.\nI would really like not to repeat the 20 lines it takes to fill out a new application in every feature.\n. Ahh, your so right. Thanks for the clarification.\nAs I mentioned before, I had a feeling that I wasn't using this right. Thanks for bringing me back on track. :-)\n. ",
    "mikeerickson": "@everzet Any chance you can supply a sample behat.yml file?   \nWhen i run any command (including behat --config-reference) I receive the error so I cant eve get help?  Is this info documented somewhere that I missed?\n. All clear now, deleted the Behat.yml file and started over using some of the examples.   Thx! \n. Curious, is this ever going to be completed.  It has been in works for a heck of a long long time. \n. Seems we are getting closer!\n. ",
    "Gordiievskyi": "Guys have the same issue with behat 3.0 with phpStorm 8. Could you help me, how can I add my own bootstrap for suite that I need to load some libraries. I did that in FeatureContext.php. But that is hardcoded. Let me know if you need more info\n. Hi guys any thoughts ?\n. many thanks. It helped.\n. That's a kind of report. In behat we have output in several formatts. There is extention https://github.com/dutchiexl/BehatHtmlFormatterPlugin . But it has lots of issues(only one metric as the biggest gap). So allure is report that can be added as adaptor to many tools(phpUnit for example).\nThat's how report will looks loke http://allure.qatools.ru/\n. Am I right that to create extention that will be bale to listen such events like after step and do something there I need to implement two interfaces: EventSubscriberInterface and ExtensionInterface  ?\n. > so that people can configure the allure formatter like other formatters\n\nYou mean they than can write --format \"allure\"?\nAlso I am looking inti extension https://github.com/dutchiexl/BehatHtmlFormatterPlugin\nAnd it doesn't have FormatterFactory, but I can use it as --format \"html\"\n. Also, actually I don't need formattor of behat, Adaptor I have to implement will format and create file itself, all I need is to give him what to collect. Example: If after step hook shows up I need to give the result status(succes,failed,skipped etc) and step description, thats it. Adaptor will create xml with everything I gave him in xml format. So Should I implement  Formatter or EventSubscriberInterface, in this case ?\n. Please need a help with enabling my extention. I am not an advanced user of php. http://behat-docs.readthedocs.io/en/latest/user_guide/extending_behat/developing_a_custom_extension.html\nIts blank. Can you help with some doc?\n\nBR\n. I stuck with load my extension. Getting this:\nInvalid argument supplied for foreach() in D:\\automationTests\\rp1-automationtraining\\vendor\\behat\\behat\\src\\Behat\\Testwork\\ServiceContainer\\ContainerLoader.php on line 96.\n. Am I right I need also implement OutputPrinter interface ? cause I am getting an error Call to a member function setOutputPath() on a non-object\n. thanks for advice, will do, then I think issues should be closed\n. ",
    "edysanchez": "@everzet  I am with @stof ,  an after hook is a nice place to check what was wrong if there were any error\n. I tried just the same that @jakzal post but I couldn't update the base_url, I post the issue here instead of MinkExtension because I thought that was a configuration handling issue of behat, any advice on how to have suite level variables in behat3?\n. ",
    "parvbhullar": "default:\n  context:\n    class:                            'FeatureContext'\n    parameters :\n          admin_autodispose_date: 04/25/2014\n  paths:\n    bootstrap:                        'features/bootstrap'\n  extensions:\n    Behat\\MinkExtension\\Extension:\n      base_url:                       'http://mywebsite.com'\n      javascript_session:             'selenium2'\n      selenium2:                      ~\n      goutte:                         ~\n      files_path:                     \"C:\\\\picture\\\\\"\n      formatter:\n          name:                             pretty,junit,html\n          parameters:\n            output_path:                    null,junit,behat_report.html\n. Its only create a prob when i choose version 3.0.*\n. Basically i'm facing problem in handling switch windows and alert popups. 2.5.* code base is not supporting (getWindowsNames) . here is my composer.json \njson\n{\n    \"require\": {\n        \"behat/behat\": \"v3.0.3\",\n         \"behat/mink\": \"1.6.*@dev\",\n        \"behat/mink-extension\": \"*\",\n        \"behat/mink-goutte-driver\": \"*\",\n        \"behat/mink-selenium-driver\": \"*\",\n        \"behat/mink-selenium2-driver\": \"*\",\n        \"behat/mink-sahi-driver\": \"*\",\n        \"jaz303/phake\": \"*\",\n        \"symfony/process\": \"*\",\n        \"gabordemooij/redbean\": \"v3.5.1\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"config\": {\n        \"bin-dir\": \"bin\"\n    }\n}\nany other reference for handling alert windows and switching windows will be helpful.\n. ya my bad, i'm talking about mink. I'm using code base as described in composer.json but when run my test then its throwing the exception Catchable fatal error: Argument 2 passed...\nChanging the drivers to dev version will fix the problem?\n. Is there any documentation regarding Behat 3 config?\n. Ok, I'm just asking what is the difference between behat v2 and v3 config and is there any reference to handle alert boxes in v2.\n. But MinkSelenium2driver does dealing with browser and that driver also built by you guys. \n. ",
    "KashifSaadat": "Just to add:\nI've run the context.feature file and it passes successfully, however when trying the same and creating an identical behat.yml as specified within the test, I get NULL parameters.\n. Hey,\nI've just checked and I am using spaces rather than tabs, also there are 4 spaces for the url indented inwards.\n. Aha that's perfect, thanks for clearing this up :D\nIn my case I will actually need to use '$parameters' within my Construct due to some abstraction I've got and multiple testing suites passing through different parameters, but that's no problem.\nThis issue can be closed :) Thanks!\n. No worries, thanks for the help :)\n. ",
    "sloba88": "But how do I nest parameters when I have FeatureContext class path defined? I am using Behat 3.0.15\ndefault:\n    suites:\n        default:\n            contexts: [Blah\\Tests\\FeatureContext]\nI can't find this documented anywhere.\n. Ah, I see, I somehow thought FeatureContext was reserved key name, not a class name. Thanks.\n. ",
    "weitzman": "This was the best place I found on the whole internet that explained how to pass params to context contructor. If its documented on docs.behat.org, I could not find it. Thanks.\n. FWIW I have the same need. Adding 300 steps (see prior post) is a poor workaround.. ",
    "dz0ny": "ack\n. thx :)\n. ",
    "peterjmit": "I would really like to see this merged so my team can start using v3 with our CI environment (I've been maintaining a v3 branch on our project for some time now!).\nPersonally I would be happy with this being merged as is (if the outline titles are the only issue).\nI have taken a look at the issue and from what I understand it stems from the fact that at this point https://github.com/Behat/Behat/blob/master/src/Behat/Behat/Tester/Runtime/RuntimeOutlineTester.php#L61 we lose all information about the context (i.e. the OutlineNode) that an instance of ExampleNode is being tested in.\nOne solution to that would be to provide ExampleNode with more information, for example an ExampleNode is instantiated as follows (in Behat\\Gherkin) \nphp\n// Behat/Gherkin/Node/OutlineNode.php\nforeach ($this->table->getColumnsHash() as $rowNum => $row) {\n    $examples[] = new ExampleNode(\n        $this->table->getRowAsString($rowNum + 1),\n        $this->tags,\n        $this->getSteps(),\n        $row,\n        $this->table->getRowLine($rowNum + 1)\n    );\n}\nIf I change this to the following, then features/junit_format.feature works (but a slew of other tests fail)\nphp\n// Behat/Gherkin/Node/OutlineNode.php\nforeach ($this->table->getColumnsHash() as $rowNum => $row) {\n    $examples[] = new ExampleNode(\n        // Give the Example node a title based on its parent\n        sprintf('%s #%d', $this->getTitle(), $rowNum + 1),\n        $this->tags,\n        $this->getSteps(),\n        $row,\n        $this->table->getRowLine($rowNum + 1)\n    );\n}\nAlternatively the constructor signature could be changed to carry a reference to the parent OutlineNode but perhaps this has been purposely avoided (circular references). Or just a property such as parentTitle.\nThe only other point I see the information we need being available is in  Behat\\Behat\\Output\\Node\\EventListener\\AST\\FeatureElementListener. Events are captured to be printed when the feature is completed in FeatureElementListener::captureScenarioEvent. There we have access to the parent FeatureNode::getScenarios (AfterScenarioTested::getFeature), but to use that would be messy.\nAny thoughts @everzet @WouterJ?\n. @WouterJ like I said (badly explained), the only place I could see that information being available is in \nAfterScenarioTested - however to reach it, you would have to traverse the list of all the scenarios for that feature\n. @stof what does calling ErrorException::__construct do in this circumstance (is there any way of figuring it out short of reading PHP src)?\n. @stof ah, I wasn't aware you could do that (effectively skip constructors up the class hierarchy if I am now understanding correctly) - you learn something new every day: thanks!\n. @stof @everzet  Scrutinizer timed out and I don't have access to restart, can one of you do the honors?\n. This should be ready to merge unless there is more feedback/changes required for the PHP7 tag on the junit feature\n. @stof not sure if this is what you meant, perhaps just php5.3 if it works as a \"minimum version\"\n. @stof this test fails on php 7 locally (imo is expected to fail), so do I remove the tags or not?\n. that was a bad copy paste \ud83d\ude33 \n. ",
    "unusorin": "hey guys, any news regarding this formatter? An estimation would be great since I'm reading comments about this since January. \n. ",
    "james75": "Is there any particular reason the last scenario expects the resulting junit XML to be:\nxml\n      <?xml version=\"1.0\"?>\n      <testsuites name=\"default\">\n        <testsuite name=\"World consistency\" tests=\"2\" failures=\"0\" errors=\"0\">\n          <system-out>output from hook!</system-out>\n          <system-out>output from another hook!</system-out>\n          <testcase name=\"Adding some interesting value\" assertions=\"3\" status=\"PASSED\"/>\n          <system-out>output from another hook!</system-out>\n          <testcase name=\"Subtracting some value\" assertions=\"4\" status=\"PASSED\">\n            <system-out>output from step!</system-out>\n          </testcase>\n        </testsuite>\n      </testsuites>\nAs according to the xsd this is invalid.\nI've been having a play and I've gotten everything to work but the only failure point is this xml which fails validation, however its expected :confused: \n. Apologies @WouterJ I was looking at your older branch where most of the code is in a formatter and you use the SimpleXmlElement to build the XML. Ive been trying to workout why you moved away from this approach as there new seems to be so much logic around building the XML.\n. Im not really very keen of the manual XML printing, so I had a go a refactoring it using DOMDocument and I think it works really nicely. The tests are happy apart from the formatting of the outline names which seems fairly trivial to fix. \njames75/Behat@e38139249a2a3fcc23392547038fe56abbb061b4\n. @mavimo  I would urge you to have a go with my latest commit at https://github.com/james75/Behat/tree/formatter_junit_1 \nI have managed to get everything working except system-out capture which was deemed unnecessary at this point. I have done some extensive testing with our suites and it seems good.\n. Yes there seems to be an issues with getting consistent  XML from the DomDocument I think its related to libxml version I am looking into it.\n. That is the best solution Ive found. All the others are unreliable and we really only care about the content and structure.\n. Sooo.. it seem when you call a node 'error' it will not to close the tag with </error>. If I change the name of the node it works as expected :worried: \n. It terns out the the malformed XML was due to the OutputFormatter doing it job. Using the 'RAW' output type seems to mitigated all of these issuse.\n@everzet and @ciaranmcnulty what are your view on the output folder being missing? error or create?\n. @Vinceveve are you fully up to date I believe I have just solved this one.\n. @ciaranmcnulty thanks for that has done the trick\n. @everzet the refactoring has been done.\n. I have rebased the formatter on to master. The other day noticed that skipped tests where not getting reported in our test summary in jenkins. The testcases were being reporting as skipped however there was no total offered in the testsuite tag. I have made an update it to provide skipped count for all testsuites. Since my last commit it seem like some changes have been made to hhvm which have caused the xml validation part of the tests to throw errors. See: https://github.com/travis-ci/travis-ci/issues/2863 \n. Thanks for the feedback I was able to replicate this in a scenario which I've now added to the feature. You were correct a couple of bits need flushing between the feature events. I would also like to thank a nameless member of my team who said \"I think Ive seen that clicking through some of our reports\" :smile: \n. From what I can tell this should now pass as this change https://github.com/travis-ci/travis-build/pull/322\n. I was mimicking the current behaviour of the current StreamOutputPrinter. However I feel that creating the folder would be a more convenient option.\n. Seems unnecessary to me\n. You would think that would be the case alas it seems not to be. Using that option for me caused it to produce some tags with no closing what so ever which broke the spec.\n. Thanks for the feedback its unlikely ill be able to make the requested changes until Jan. If someone wants to make them (@nchagrass) ill merge them to my branch.\nOn 19 December 2014 20:36:24 GMT+08:00, Konstantin Kudryashov notifications@github.com wrote:\n\n\n+/\n- * Prints scenario open and close tags.\n- \n- * @author Wouter J wouter@wouterj.nl\n- /\n  +interface ScenarioElementPrinter\n  +{\n-    /\n-     * Prints scenario open tag using provided printer.\n-     \n-     * @param Formatter   $formatter\n-     * @param FeatureNode $feature\n-     * @param Scenario    $scenario\n-     * @param TestResult  $result\n-     /\n-    public function printOpenTag(Formatter $formatter, FeatureNode\n  $feature, Scenario $scenario, TestResult $result);\n\n+1\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Behat/Behat/pull/618/files#r22102397\n\n\nSent from my Android phone with K-9 Mail. Please excuse my brevity.\n. ",
    "mavimo": "I try this MR but there is some issue on multiple feature file that cause XML syntax error, as you can see above:\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<testsuites name=\"default\">\n    <testsuite name=\"First feature\" tests=\"1\" failures=\"0\" errors=\"0\">\n        <testcase name=\"First scenario\" assertions=\"1\" status=\"passed\"    </testsuite>\n    <testsuite name=\"Second feature\" tests=\"2\" failures=\"0\" errors=\"0\">\n/>\n        <testcase name=\"Second scenario\" assertions=\"1\" status=\"passed\"/>\n    </testsuite>\n</testsuites>\ntestcase is closed after testsuite is closed and reopened.\n. @james75 I'm totally agree with you, but i need to have a working function asap and i fixed the notified bugs. I will work on rewrite it on next weeks, but before I will add some other tests related to multiple features files (that actually break the result).\n. @james75 I tested with my suites and work as expected. Refactoring with DOMDocument improve code quality. Some more docs is required, like:\nBehat\\Testwork\\Output\\Printer\\JUnitOutputPrinter::addAttributesToNode\nbut i think can be :+1: \n. @tristanbes take a look to #527\n. We also need to close all already opened testcase, method must be:\n```\npublic function addTestsuite(array $testsuiteAttributes = array())\n{\n    $this->closeOpenTestcase();\n    $this->closeOpenTestsuite();\n$this->xsdChecker->validateTestsuiteAttributes($testsuiteAttributes);\n\n$this->getWritingStream()->writeln(sprintf(\n    '    <testsuite%s>',\n    $this->printAttributes($testsuiteAttributes)\n));\n\n$this->testsuiteNodeOpen = true;\n\n}\n```\n. We need to define that the current node is closed, add:\n$this->testcaseNodeOpen = false;\n. ",
    "singles": "@stof Yep, I was thinking about solution like that. Thanks for clarifying :) \n. ",
    "tyx": "To let my Scenario outline with my others simple scenarios. For now, as background load my fixtures, if Background is not called, I have not my fixtures in my Scenario Outline.\nSo I guess it is a normal behavior :dancers: \n. Here is an example what I wanted to do : \nhttps://gist.github.com/tyx/7790b25fe245d0e936f9\nIn my mind background would be called also before Scenario Outline but it would not. \nSo in fact Scenario Outline should be alone in a feature ? And all background stuff will go in the scenario outline too ?\n. It does not work on 2.5.3 for me.\n. @everzet You're right It works. It is not the bug.\nIn fact it is the event beforeScenario which is not propaged apparently.\n. Thank you @stof ! In fact it is beforeOutline event ;)\nSo, we just not propaged beforeScenario event between each scenario created from examples in Scenario Outline and it is a normal behavior. Right ?\n. I totally missed this distinction. Thank you for this explanation.\nSo I should use Hook instead of Event for my purpose ?\n. Ok great. Thanks for your support. We could consider this issue as solved ;)\n. Hello,\nIs this issue still planned for the 3.2 ?\n. ",
    "shouze": "@stof ok for a @BeforeScenario but I'm curious about how you implement it. I'm agree you can load some fixtures in a @BeforeScenario hook but in your features don't you often need to load some scenario specific fixtures?\nI'm ok for some feedback of your own on this subject. Fixtures are often the undocumented part but we need it prior to test in many many cases.\n. @stof yes definitely in this example. \nNow let's say we want to write a cart feature for an e-commerce website. The tested feature is the cart behavior when we always have the same products into it from the starting point.\nIn this case in the background step you need to load the product fixtures isn't it?\nExcepting that, I'm agree that it's a developer facility to load fixtures the developer way and it's always better to have some well constructed sentences managed by our domain context.\n. ",
    "HomelessFreak": "The reason it would be giving you that Pending Exception message is because the regex of \"(?:|I ) log in as parent\" does not match \"I log in as parent\" due to the space after the I in the brackets. If you use \"(?:|I) log in as parent\" It should work.\nSome one else will have to answer the other questions.\nGood luck.\n. ",
    "williamscel": "Awesome. I looked over that function so many times and missed that. Thanks Alot. Now for the cross browser.\n. It works!!\n. ",
    "darsadow": "I've added it in core but extensions sounds good as well.\nAnd shame on me I was so quiet on meetup ...\n. Ok, I've checked how it cam be done with extension and works as it should. Today I should publish working extension if someone is interested.\nThanks for clarifying things.\nCheers\n. ",
    "bjoerne2": "I understand. Is the suggestion to create several scenarios, in my case a normal and a devonly one? Do I have to copy & paste the whole scenario configuration then with all parameters? Can I configure that my devonly specs are not executed by default but are executable via command line parameters?\n. Sounds good to me!\n. ",
    "coldcandor": "It looks like we might be able to use the suggestion here as a workaround for what I want to do in #605, but it doesn't seem to be working.  I'm on behat 3.0.12 and have the following:\nImportant Feature file\n@one-off @abc-123\nFeature: Decommission blah blah\nprofile level filters\ngherkin:\n        filters:\n            tags: ~@one-off\nsuite level filters\nfilters:\n                tags: @homepage,@login,@logout\nNo matter what I do, I can't get it to run something that's not explicitly listed in that suite filter list.\nbin/behat -p a -s x --tags=\"one-off\"\nbin/behat -p a --tags=\"one-off\"\nbin/behat -p a -s x --tags=\"one-off&&abc-123\"\nall return nothing\nbin/behat -p a\nruns everything in the suite filters and no one-off, as expected.\nIn the end, the only way I was able to get this to work was to include a new tag on every feature, something like \"@default\", and include that in the suite level filters (profile level doesn't work, I assume because it's overriden by CLI) for every client.  Is this really intentional?\n. ",
    "olaurendeau": "Thanks !\n. ",
    "clemens-tolboom": "I get dutch by default. So the switch is working aka\nbash\n$ bin/behat --definitions l\ntest_suite |  When /^I fill hidden field \"([^\"]*)\" with \"([^\"]*)\"$/\n...\ntest_suite | Given /^dat (?:|ik )op de homepage ben$/\nrequiring English\nbash\n$ bin/behat --definitions l --lang=en\ntest_suite |  When /^I fill hidden field \"([^\"]*)\" with \"([^\"]*)\"$/\n...\ntest_suite | Given /^(?:|I )am on (?:|the )homepage$/\nThe title for this issue is misleading. It should be \"Step keywords are not translated when listing\"\n. That makes the output way longer. And is not really informative.\nMy point is to learn people the long version first. Later on they can check for a shorter version themselves.\nBottom line: always use long options in documentation.\n:-)\n. I should rephrase my previous comment as this is code :-/\nbash\n$ behat --help\n...\n --definitions (-d)    Print all available step definitions: <=== short option\n                      - use --definitions l to just list definition expressions. <==== patched version\n                      - use --definitions i to show definitions with extended info. <==\n                      - use --definitions 'needle' to find specific definitions. <==\n...\nhas the short option already mentions but I did not got it.\n. I've updated my previous comment ... I meant the --definitions (-d) part.\n. I will check this next week.\n. @everzet sorry ... no time in the foreseeable future :(\n. ",
    "kendoctor": "That's what I want. But, ...in V3. Step reusable, scenario reusable.\nStep1 with more than one gherkin descriptions.  (One To Many)\nStep2 will never have the same gherkin description(s) with Step1.\nIt seems Step.GherkinDescriptions.\nThen.\nContext.Steps\nMyProject.Contexts\nStep3 reuse Context1.Step1 and Context2.Step2, Then exists in Context3\nThen. Problem is in suites : which context should i put in ? \nStep3 depends on Context1 and Context2.\nIdea. Build a auto-generated cached Context in run-time ?\nAutoGeneratedContext collects all contexts steps used in this suite .\n. With tags AutoTagContext ? With Suites AutoSuiteContext ?\nContext Hooks:\nEvery context may exist some hooks. These hooks of one context designed just for steps in this context.\nIf merging all steps needed for one tag or suite into one context , merging all hooks of all contexts used will be unpredictable ? \nHow to avoid renaming gherkin description step-chaining feature in  behat v2?\n1. should not use new Step\\Then(\".....repeating description...\")\n2. method call $this->stepMethod() ? only $this scope\n3. new Context() ? then call method ? it's not allowed as it causes chaos.\n4. merge contexts may produce some conflicts about same methods, same properties.\nThen. How can i get the step-chain feature in V3?\nThe rule is \nThe step which may have different gherkin descriptions\nshould be unique objective, at least in one project.\nThen we have a global table of steps.\n we can use this style to call other steps in one step.\n$this->callStep('stepMethodName', stepMethodArguments ....);\ncallStep will search in global table to fetch correct step to call.\nBut, it produce a problem, that is the same step method names. \nContext namespacing ? Context::stepMethodName ?\nIt will let me do remember this step defined in which context, but it seems to work.\nContext with long namespaces ? Vendor....\\OneContext. Same Context class Names !\nThen will be Full\\Qualified\\ContextName::stepMethodName. it seems tedious.\nAny ideas?\n. As I deep into more about behat v3. It's difficult to redefine Spec Nodes and Suite Definitions before Exercise Test.\nThe behat flow is limited to do that.\nMy idea:\n1. Build Specification Nodes: StepNode, ScenarioNode... meanwhile building  Suites Definitions\n2. Build two repositories or pools with DI services : one for Specifications, another for Suites\n3. Dispatches events , Here we can add, modify or something else for both nodes and definitions.\n4. Done. Then go to next to Exercise Test.\n. I did not mention Gherkin programming. \nI mean How to organize Gherkin description.\nWhy?\nAs i read one post from someone, how to guarantee the code quality of  implementation for user-defined steps or any others ?\nFor example.\nGiven I login as Administrator.\nTwo ways achieve this goal.(symfony)\n1.  if step1 : I on \"login\" page step2: i fill fields with exists,  combine these steps to get \"I login as ...\"\n2.  through mink session ( only take effects in headless),  programmatically create token \nThe second way is not right way obviously.\nIf i use first way, then I need a chaining step feature.\nOk. Let talk about next\nGiven there are following entities....\nI programmatically construct these entities data to achieve a Given?\nIf these codes have issues, the Behat test will not predict to be right.\nI consider Constructing Data of Application should Use Application functionality.\nFor example, on a ecommerce platform. As a shop owner, I create a product in Administration Backend.\nIf this product is published, then the product will be presented on the frontend page.\nThen.\nFeature: create a product\nA: Scenario: create a product \nB: Scenario: publish a product\nFeature: shopping\nC: Scenario: browse products\nD: Scenario: add to cart\nThe flow is A -> B -> C -> D\nThe platform data is built by users actions or interactions. Not programmatically. \n. google services banned in china.\n. Like Axure tool, it also can make a demo project, emphasizing UI,UX, interactions, not exactly implementing logics, only just for demonstration.\nIf definition steps become rich, I think it also can  be true. \n. ",
    "johnhunt": "Unfortunately, I've found that actually removing this feature was a bad choice. I'm sure it could be abused but in my case (testing remote APIs) it was really important.. now trying to find a workaround :(. The only solution I've found is to create a monster context that does everything so I can run steps such as:\nWhen I visit \"https://blahblah\" I expect the JSON node value \"a.b.c\" to equal \"john\" and retry 10 times, every 30 seconds.\nWhat I'd really like to do is use the distinct out the box contexts and then just jump back.. oh well :/ (I have created a monster context that inherits from ubirak rest and json inspectors . ",
    "ianbytchek": "I've had that feeling. But after it did run, that information must be available. Besides, if the hook is fired before the step it kind of implies that this step is happening, would it be difficult to rearrange the order and fire the hook after matching the context?\n. @stof ok, so there is no simple way from the hook handler to find out the context? I might be missing a point, but is there a reasonable use case for the hook and step scope details? \nI'm trying to think outside my current requirements, but shouldn't step hooks be restricted to the context where those steps are defined or at least provide a way to do that, e.g., by providing the context of the step? \n. As far as there was a good reason for that. Thanks!\n. Ok, if I understand correctly, the regex in @transform matches other things as well, whether the regex is named or not doesn't matter. Can anyone point me in the right direction where to read more about how the :argument selector works, are there any restriction on characters, are there any more examples on using them? Any solution for the named regex?\n. PR added, this affects only null values.\n. :smile: \n. Lol, thought so.\nSent from my iPhone\n\nOn 12 Sep 2014, at 14:18, Konstantin Kudryashov notifications@github.com wrote:\nGherkin is not a programming language. Even though your example is by design is overly simplistic, it does hurt my head already in attempt to figure out what it does. I can't even imagine what will it do with someone that never done programming before. So no.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "RynnHeldeD": "Hi stof !\nThanks for your help ! I think I am missing something with PSR and autoloader...\nI tried with the following  configuration : \nbehat.yml\ndefault:\n    autoload:\n            - %paths.base%/bootstrap/\n    suites:\n        test:\n            paths:\n                - %paths.base%/features/web\n            contexts:\n                - WebContext\n                - FeatureContext\nStructure\nbehat/\n|- bin/\n|- bootstrap/\n   |- Features/\n      |- FeatureContext.php\n   |- Interfaces/\n      |- WebContext.php\n|- features/\n   |- web/\n      |- feature1.feature\n      |- feature2.feature\ncomposer.json\n[...]\n\"autoload\": {\n      \"psr-4\": {\n          \"myCompany\\\\\": \"bootstrap/\"\n      }\n    },\nMy class WebContext is in namespace myCompany\\Interfaces and implements Behat\\Behat\\Context\\Context. Same for FeatureContext (but it is in namespace myCompany\\Features ).\nI do run composer.phar update but I still get the following error : \n[Behat\\Behat\\Context\\Exception\\ContextNotFoundException]   \n  `WebContext` context class not found and can not be used.\nWhat I am doing wrong ? :(\n. Oh, right. It works now !\nSorry for the newbie questions.\nBelow is the behat.yml working with the autoload and structure in my previous post, for people who may have the same problem : \ndefault:\n    autoload:\n            - %paths.base%/bootstrap/\n    suites:\n        test:\n            paths:\n                - %paths.base%/features/web\n            contexts:\n                - myCompany\\Interfaces\\WebContext\n                - myCompany\\Features\\FeatureContext\nI still have other questions about Behat 3 but I think I should create other topics instead.\nI close this issue, thanks a lot for helping stof !\n. It seems that such system is not possible anymore (or if yes, please inform us in that topic !).\nA workaround is to create a singleton class which have static fields and methods that could be callable from other context. It works well for a kind of MemoryClass which holds data you need in other contexts.\nAlso the Behat Page Extension seems very promising in regrouping functions into Page objects that could be reuse in code. Check it out here : http://extensions.behat.org/page-object/\nThanks to @norzechowicz for all the ideas and help !\n. Indeed, the PageObjectExtension looks promising.\nAs for the singleton hack, for know it is a necessary hack as we need some data to be shared across all contexts during our tests. It's still better than a non-working app ! \n. Alright, as there was some discussion, I thought it would be pertinent to reopen, sorry.\n. ",
    "Sydney-o9": "Remember that you need to run php composer.phar dump-autoload if you modify your composer.json.. ",
    "norzechowicz": "As I told you, this singleton is a \"hack\" and you use it on your own risk. IMO you should not use one context in another because things might have different meaning for them. Its very easy to make a mess this way in your test suite. \nAnyway PageObjectExtension should solve your problems :beer: \n. ",
    "manuelgerstner": "This should solve the issue right? http://stackoverflow.com/questions/29674685/how-to-communicate-between-contexts-in-behat-3\n. ",
    "kix": "@stof, whoops, I must've hit some edge case here. I'll try to recreate the error and reopen if confirmed.\n. ",
    "andytson": "https://gist.github.com/andytson/72369c963a3810bf7808\n\n. locale\nLANG=\"en_GB.UTF-8\"\nLC_COLLATE=\"en_GB.UTF-8\"\nLC_CTYPE=\"en_GB.UTF-8\"\nLC_MESSAGES=\"en_GB.UTF-8\"\nLC_MONETARY=\"en_GB.UTF-8\"\nLC_NUMERIC=\"en_GB.UTF-8\"\nLC_TIME=\"en_GB.UTF-8\"\nLC_ALL=\n. Ok, I guess looking at the image, it suggests it's because the scenario background starts getting embedded in the scenario after the 2nd scenario, and the scenario only lines up based on the steps not in the background.\n. Does \"remove support\" have to mean \"don't allow it to work\"?\n. maybe, yep, if the tests start to fail, but before the failure?\n. anyway, I have no uses of Symfony 2.6- so no stake in this, just thought I'd be devils advocate\n. ",
    "karolsojko": "If I'm not mistaken only progress and pretty formatter are available in v3 currently\n. ",
    "dtrenz": "Based on this thread, it appears that the resolution was to use the following format for specifying multiple formatters, but this does not work:\nbuild:\n    formatters:\n        name: progress,junit,html\n        parameters:\n            output_path: ,ci/build/behat/junit,ci/build/behat/index.html\nThis produces the following exception:\nInvalid type for path \"testwork.formatters.name\". Expected array, but got string\nBased on that error I tried this instead:\nbuild:\n    formatters:\n        name: [progress,junit,html]\n        parameters:\n            output_path: ,ci/build/behat/junit,ci/build/behat/index.html\nBut this produces a new error:\n`name` formatter is not found or has not been properly registered.\nHelp?\n. OK, so I finally figured out that the correct format is:\nbuild:\n    formatters:\n        progress:\n        junit: [ci/build/behat/junit]\n        html: [ci/build/behat/index.html]\nUnfortunately, I also figured out that the only formatters that are supported as of now (v3.0.12) seem to be pretty and progress.\nPlease bring back support for junit and html soon!\nThanks\n. ",
    "serialbandicoot": "+1 for please bring back support for junit and html soon.\n. Great looking forward to it being merged into Master.\n. ",
    "jjcarrion": "Does the JUnit support has been already merged to master?\n. ",
    "KristineK": "@stof is jUnit available on Behat 3 (behat version 3.0-dev)?\nI tried with \njunit: [ci/build/behat/junit] and junit_false: [ci/build/behat/junit] \nbut got\n  junit_false formatter is not found or has not been properly registered.\n. ",
    "murnieza": "I think it is already merged \n. ",
    "medamineDev": "i had the same problem , and it works like this : \nwhen i call the behat like this : \nC:\\user\\www\\behat-learning\\vendor\\bin> behat -dl\nit give me the error like yours : \n[Behat\\Behat\\Context\\Exception\\ContextNotFoundException]\n  FeatureContext context class not found and can not be used.\nbut when i call the bahat like this : \nC:\\user\\www\\behat-learning>vendor\\bin\\behat  -dl\nit works Fine :)\n. ",
    "xtrasmal": "Ah great. So where can I get version 3?\n. Cool, i've found it \n- \n\nOp 22 jun. 2014 om 18:48 heeft \"Christophe Coevoet\" notifications@github.com het volgende geschreven:\nfrom composer or from github releases\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "tasuki": "Wow, you're fast! Was planning to have a look at it in the evening but no luck :)\n. ",
    "fchris82": "I have just seen the solution of @dlabs :  https://github.com/dlabs/Behat/commit/a2e78eac1c1af039ffcae925e45ac1b13e6f51d6 It's work fine too.\n@stof I don't understand ... Must I add a complete scenario?\n. @stof \"and indeed, using array_key_exists is better\"\nI think the same. Should I close it?\n. @WouterJ \n\nThis applies to all parameters, not only TableNodes/PyStrings.\n\nYes, I know. It is intentional. I use this only TableNodes/PyStrings now, but other people can use with other parameters too. If somebody use =null it is conscious . I don't see a problem.\n. On windows:\n\ndefault:\n  formatters:\n    pretty:\n      output_styles:\n        comment: [ 'magenta' ]\n    progress:\n      output_styles:\n        comment: [ 'magenta' ]\nI am using the pretty and progress format too. When I set in the config both then I must always add in the command line which format should I use instead of simple bin\\behat...\n. @everzet It works! Thank you :)\n. ",
    "alesblaznik": "@everzet Sure. I've added scenario.\n. @ianbytchek I've already made pull-request covering that. See #585 \n. ",
    "bgruszka": "Oh.. you have right... I had save_comments off. I turned it to on and it is working well now. Sorry for opening this issue. \nI have one more question - is in documentation info about turning on save_comments (It might be helpfull for others)?\n. ",
    "loalf": "Thank YOU, ;)\n. ",
    "mareg": ":+1: \n. ",
    "jerryladoo": "I have found the problem. That is because of env: test. It works now after I changed it to env:dev\n. It works now. Thanks @everzet.\n. ",
    "cdarken": "This is the closest issue to my problem, so I'm asking here, sorry if it's not the right place.\nI'm having a problem with specifying parameters for my context.\nI'm using the format from the documentation:\ndefault:\n    suites:\n        default:\n            contexts:\n                - MyAwesomeContext:\n                    baseUrl: http://localhost:8080\n                    tempPath: /var/tmp\nLike this:\ndefault:\n  suites:\n    ws:\n      paths: [ %paths.base%/app/tests/behat/features ]\n      contexts:\n        - Tests\\Behat\\ApiAccessContext\n          baseUrl: http://localhost:8000\nBut when executing behat I get this error:\nUnable to parse in \"..../behat.yml\" at line 9 (near \"  baseUrl: http://localhost:8000\").\nWhat am I doing wrong? I something changed in the last version? I'm using v 3.0.14.\n. Crap, I must be blind. Just noticed the : after context class is missing. Thanks a lot!\n. ",
    "keithdtyler": "Well then, how about supporting this syntax, which has been available in Cucumber since at least 2011 (according to https://github.com/cucumber/cucumber/issues/54):\n``` gherkin\nExamples:\n  | first | last |\n  | Alice | Smith |\n@wip\nExamples:\n  | first | last |\n  | Bob | Jones |\n```\nSee also: http://stackoverflow.com/questions/17277358/cucumber-tags-for-scenario-outline-examples\n. ",
    "brianmrock": "Was this ever implemented?  This feature would be really useful for one of our projects. \n. ",
    "kocherovf": "Will you plan to implement this feature?\n. ",
    "nytche": "WouterJ, can you explain these? you launch a complete feature in one step?\n. ok, so i can reuse methods like that ?\nphp\npublic function IAmLoggedInAs($login)\n{\n    $this->thereIsAUserWithPassword($login, $password);\n    $this->IAmOnTheLoginPage();\n    ...\n}\nit's almost factorization, isn't it?\n. yes, I did. everything works except that.\n. And why don't you use tags?\n. ",
    "BlackScorp": "awesome that backslash worked, about code implementation, i test my features in 2 different ways onetime i just test the business logic without the framework to make sure iam not dependant on the framework and then i test it with the frontend both tests suites do the same things at the end but in different ways https://github.com/Opentribes/Core/tree/develop/features/bootstrap  maybe i made it wrong before but now i want to make it better :D thx for the backslashes, i thing this issues can be closed\n. ",
    "rkmax": "playing around with bin/behat \nI've replaced \n``` php\nfunction includeIfExists($file)\n{\n    if (file_exists($file)) {\n        return include $file;\n    }\n}\nif ((!$loader = includeIfExists(DIR.'/../vendor/autoload.php')) && (!$loader = includeIfExists(DIR.'/../../../autoload.php'))) {\n    fwrite(STDERR,\n        'You must set up the project dependencies, run the following commands:'.PHP_EOL.\n        'curl -s http://getcomposer.org/installer | php'.PHP_EOL.\n        'php composer.phar install'.PHP_EOL\n    );\n    exit(1);\n}\n```\nWith (taking from app_dev.php)\nphp\nrequire_once __DIR__.'/../../../../var/bootstrap.php.cache';\nrequire_once __DIR__.'/../../../../app/AppKernel.php';\nfor now working fine i need test more\n. ",
    "Nadrshin": "It works, thank you.\n. ",
    "Vinceveve": "after trying I have an unclosed tag for error\nxml\n<testcase name=\"Searching exact domain name\" status=\"undefined\">\n      <error type=\"undefined\" message=\"And the &quot;meta.pagination.total&quot; property equals 1\">\n    </testcase>\nThanks a lot for the work :+1: \n. @james75 you're totally right, it's working fine now, thank you :)\nBy the way where can I start to do the json formatter ? \n. @james75 looks like you're not cleaning some array between features, here is what i get on multiple feature (latest behat, php 5.5).\nEvery features list the previous Scenarios\nxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites name=\"async\">\n  <testsuite name=\"DAS client\" tests=\"3\" failures=\"0\" errors=\"0\">\n    <testcase name=\"It analyse domains\" status=\"passed\"></testcase>\n    <testcase name=\"It analyse domains even if their is an accent\" status=\"passed\"></testcase>\n    <testcase name=\"It stops on timeout\" status=\"passed\"></testcase>\n  </testsuite>\n  <testsuite name=\"EPP client\" tests=\"7\" failures=\"0\" errors=\"0\">\n    <testcase name=\"It analyse domains\" status=\"passed\"></testcase>\n    <testcase name=\"It analyse domains even if their is an accent\" status=\"passed\"></testcase>\n    <testcase name=\"It stops on timeout\" status=\"passed\"></testcase>\n    <testcase name=\"It connect and login\" status=\"passed\"></testcase>\n    <testcase name=\"It gets Info for given domain\" status=\"passed\"></testcase>\n    <testcase name=\"It gets Info for given domain even if it has accents\" status=\"passed\"></testcase>\n    <testcase name=\"It changes domain auth info\" status=\"passed\"></testcase>\n  </testsuite>\n  <testsuite name=\"HTTP2 client\" tests=\"12\" failures=\"0\" errors=\"0\">\n    <testcase name=\"It analyse domains\" status=\"passed\"></testcase>\n    <testcase name=\"It analyse domains even if their is an accent\" status=\"passed\"></testcase>\n    <testcase name=\"It stops on timeout\" status=\"passed\"></testcase>\n    <testcase name=\"It connect and login\" status=\"passed\"></testcase>\n    <testcase name=\"It gets Info for given domain\" status=\"passed\"></testcase>\n    <testcase name=\"It gets Info for given domain even if it has accents\" status=\"passed\"></testcase>\n    <testcase name=\"It changes domain auth info\" status=\"passed\"></testcase>\n    <testcase name=\"Cookie is active, user agent is set, js disabled, and flash not installed\" status=\"passed\"></testcase>\n    <testcase name=\"it supports https connection\" status=\"passed\"></testcase>\n    <testcase name=\"it supports post requests\" status=\"passed\"></testcase>\n    <testcase name=\"It has connect timeout\" status=\"passed\"></testcase>\n    <testcase name=\"It has request timeout\" status=\"passed\"></testcase>\n  </testsuite>\n</testsuites>\n. @james75 you're welcome, thanks a lot for the work ! :)\n. ",
    "sroze": "Great, it's the really missing feature :)\n. Hey @everzet, what about that PR ? :)\n. I definitely agree with it. If such an --append-to option is not specified it would be nice to let select in a list of contexts if the user wants to append to snippets somewhere!\n. What's your use case? I would argue that the environment variables shouldn't take precedence, as that would potentially cause a lot of troubles with potential differences between setups. If you want to have installation-only settings you can still use the behat.yml.dist (versioned) and the behat.yml file locally.\n. @everzet this PR sounds good and should be merged before the 3.1 release :+1: \n. Can't agree more on the need. Why not simply improving the existing syntax by optionally prefixing the : by the class name (with or without namespace)?\n``` php\n/*\n * @Transform Email:\n /\nfunction toEmail($string)\n{\n    return Email::fromString($string);\n}\n/*\n * @Then an email should be sent from :sender to :recipient\n /\nfunction checkEmailWasSent(Email $sender, Email $recipient)\n{\n    // ...\n}\n```\nThat way, we can also mix the both, by having a transformer for a given type and argument name:\nphp\n/**\n * @Transform Email:secret\n */\nfunction toSecretEmail($secret)\n{\n    return Email::fromSecret($secret);\n}\n. True, that's not obvious at all. Why not simply having the colon (:) optional? It won't conflict with the table or regex transformers.\n``` php\nuse FQCN\\Email;\n/*\n * @Transform Email\n /\nfunction toEmail($string)\n{\n    return Email::fromString($string);\n}\n``\n. @stof when the class name isTable, this is true. That's an extremely rare case I would say. We can handle this specific case by throwing an exception and ask to use the FQCN of theTableclass.\n. Using PHP 7 typehints sounds a better approach that in the@Transform` annotation \ud83d\udc4d \nThe last fallback (the fromString static constructor)  is used in many simple VOs and would be really convenient for the developers to be able to typehint their VO without any @Transform definition.\n. So we don't care about introducing a BC break in the SimpleArgumentTransformation interface? It can probably be avoided quite easily by introducing a new one I think, wouldn't it be better? Or are you planning to introduce many BC breaks that would force you to release a new major version soon?\n. It would be good to add some tests too.\n. Now you need to follow the PSR-2, I believe that @everzet's mention of PSR-0 was a typo. Basically, at least the 4 spaces indentation :wink:\n. I will ask you again to add some tests to prove that your feature is working and to prevent anybody to break it in the future. No tests on a testing framework sounds bad ;-P\n. @spolischook just updated the issue body, I pressed \"Create\" too fast. Is it clearer now?\n. @ciaranmcnulty the motivation is to ease sharing context between steps of different context files and simplify the step definitions.\n@stof my proposal is definitely not to inject the returned value of the previous step into the second one: all the returned values of every step (if any) are stored into a \"bag\" for the duration of the scenario. We inject parameters from the step regex (plus some transformations) at the moment; we would add this \"returned value bag\" as an extra option to match the steps' parameters.\nThe second point mentioned by @ciaranmcnulty is when we have multiple objects of the same type in our \"returned values bag\" or even in the step's typehints. We could introduce an annotation that would allow the developer to chose from which step would he like to have the value but I'm not fond of this idea as it would complexify both Behat's internals and the definitions, and in such case, I believe that the step definitions actually don't use reference such as \"this bucket\" but rather \"the bucket named [...]\".\n. @ciaranmcnulty as discussed offline, this is simpler for different context files as we wouldn't need to use static variables in files nor injecting context into other contexts. Also, by using $this->bucket you assume that the property is set by another step, that means you definitely depends of this previous step anyway...\n. @jakzal \n\nI don't see how it's simpler. What I see is lots of WTF moments trying to trace which step this variable came from.\n\nAt the moment it's worst: we do have the WTF moments with \"Which step definition populated this property?\". With this method it would be a lot clearer as because your scenario definition have a very small amount of steps (or there is something wrong in it) and you simply have to know which step in your scenario did produce such a variable.\nMoreover, on a step definition \"point of view\", it is definitely more explicit to define (via a required typed argument) it requires this Bucket than guessing that the $this->bucket property has been populated by some other random step definition.\n. @everzet looks like a BC break \ud83e\udd14 . I'm not fond of these short variable names.\n. You could simply construct them without any other variable like it was before btw.\n. You should use an uppercase R else that will fail on some systems.\n. You can get the file name directly with pathinfo($file, PATHINFO_FILENAME)\n. I would name the variable $iterator as $node instead as this iterator return Nodes.\n. No sure why you need this class in a variable...?\n. This is a useless use as you don't use the class.\n. Could you use only one createNewFile call, such as:\nphp\n$outputPrinter->createNewFile($formatter->fileName ?: $suite->getName());\n(or put the filename in a variable is you prefer)\n. Instead of this method check, I would check if the event is an instance of the SuiteTested class, that way you are sure that the return value is the expected type.\nEven better (but not mandatory here I would say - @everzet to confirm) would be to introduce an interface for the events that contains this method, such as the hook SuiteScope interface.\n. Can you isolate the foreach loop into a dedicated method on the class? An explicit name (as you can see on other methods of this class) is required tho \n. I personally prefer to continue if not instanceof. That helps readability by reducing the depth of indentation.\n. Not sure that you need this variable now as you use it only once\n. You probably only need the empty test here\n. Please write a test for the feature you introduced/changed. You'll see that it is not working and that you are missing an obvious $this-> here ;-)\n. You need to add a new line before {\n. I would also prefer having a method that returns the formater fileName and you simply assign the returned value of this method to $formatter->fileName (so you don't have to pass the Formatter object to your method)\n. If would return only if the path is not empty so it would try for the next FeatureNode in the iterator. And if not not empty path is found then it will return null by default.\n. To prevent a less-likely developer WTF, I'd throw an exception here: as you don't have the type-hint anymore, somebody could inject so weird thing, that would be ignored and would end up to be no argument resolver. Throwing here if $this->resolverFactory !== null would highlight the issue.. ",
    "r1pp3rj4ck": "@everzet do you have an estimation when 3.1 will be released? I'd really like to use this feature in Jenkins\n. I agree with @stof on this one, semver is awesome for the users too.\n. ",
    "gonzalovilaseca": "+1 !\n. @stof Please read the description, this is just a POC, by no means this is something that should be merged. \nIt's just so the community get's the concept, and if it's worth spending more time in doing it properly.\n. @stof This POC only works when you specify a suite: I didn't want to waste time covering all cases if the core idea is flawed.\nEven if the app memory is released there will allways be the increase in memory usage due to included files, so in a very large app test suite, you can run out of memory even if there are no leaks.\n. @stof I know, will try that route then, thanks.\n. Just in case someone else lands here, there is also the option of settind the insultate on a per scenario or step basis:\n/**\n * @BeforeStep\n */\npublic function insulateProcess(BeforeStepScope $scope)\n{\n    $this->getSession()->getDriver()->getClient()->insulate(true);\n}\n. @stof Sure, you can do that in the After* hooks, it all depends on the case, just wanted to give other options if someone lands here.\n. ",
    "kroshp": "+1\n. ",
    "dylanschoenmakers": "+1 love to see this merged!\n. ",
    "digitalbase": "+1 :-)\n. ",
    "jamesmoey": "+1\n. ",
    "dsarm": "used behat 2.5.* to resolve this issue.\n. ",
    "cawolf": "Hi all,\nI'm really sorry to resurrect this, but I'm currently maintaining a growing set of contexts and step definitions, and whenever I need to expand an actor, e.g. (?:|I|you|A user) to (?:|I|you|A user|Another actor), I have to search and replace over multiple distributed files instead of just changing one central const.\nI know that using regular expressions like this bear the risk of ambigous step definitions, but adding a feature to easily maintain these expressions leaves that risk untouched. Besides, Behat will tell me whenever it couldn't identify a single step definition to go to, so it would be safe anyways.\nI was thinking about some kind of preprocessors for these regexes to get this done. What do you think about adding this feature?\nBest regards,\n@cwolf. ",
    "Sorbing": "Suite allows configure the browser_name and base_url... But how can I configure the other parameters of the session or extensions, like capabilities.proxy? And I thought that to set up the environments need to use profile, and for the group tests - suite. \nI already use Behat v3. Thanks)\n. Oh no) I meant the redefinition (merge) of default configuration specified profiles. That is, each profile will replace (or merge) the previous settings (sorry, I do not know very well English)\n. I suggest a composite configuration profiles. Otherwise I don't know how to avoid combinatorial explosion.. For example, I have a profiles:\n```\ndev: ~      # Setup the development base_url\nprod: ~     # Setup the production base_url\nprelive: ~  # Setup the prelive (stage) base_url\nchrome: ~   # Setup the chrome browser\nfirefox: ~  # Setup the firefox browser\nie: ~       # Setup the IE browser\nheadless: ~ # Setup the PhantomJS\ngprs: ~     # Setup the 64kbps bandwidth via proxy\n512K: ~     # Setup the 512kbps bandwidth via proxy\n800x600: ~  # Setup the screen size 800x600\n1024x768: ~ # Setup the screen size 1024x768\n...and a lot of other profiles\n```\nIf we describe each profile separately - I will get over 100 profiles whose names you need to remember.\n. @stof, Thank you) Tell me, can I inherit suite (or suite.contexts) from the base suite (or default)? Otherwise I'll have to specify the contexts for each suite..\n. @stof, you do not have experimented with using multiple profiles at startup behat? I found this issue #560 which few would simplify configuration behat, but it is still pending.\n. It seems that the combination of support profiles nobody needs( @stof, you are not engaged in this issue?\n. The same problem.\nThe file structure:\nbehat.yml # imports: behat/default.yml\nbehat\n\u251c\u2500\u2500 context\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 GeneralContext.php\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 PromoAdminContext.php\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 StoreContext.php\n\u2514\u2500\u2500 default.yml\nfeatures\n\u251c\u2500\u2500 admin\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 promo\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 navigation.feature\n\u2514\u2500\u2500 store\n    \u2514\u2500\u2500 homepage\n        \u2514\u2500\u2500 promo-page.feature\nSuites settings:\ndefault:\n    suites:\n        store:\n            paths: [%paths.base%/features/store]\n            contexts: [GeneralContext, StoreContext]\n        admin_promo:\n            paths: [%paths.base%/features/admin/promo]\n            contexts: [GeneralContext, PromoAdminContext]\nThis test works fine:\nbehat --suite=store features/store/homepage/promo-page.feature\nBut this test throws WrongPathsException exception:\nbehat --suite=admin_promo features/admin/promo/navigation.feature\nIt is strange that successfully launched the first test, but does not start the second...\n. )) The error No specifications found at path (s) caused not valid scenario syntax:\nFeature: Check navigation on the Promo Admin panel\n  Scenario:\n    Given: I am logged in Promo Admin panel\n    ...\nThe problem of excess semicolon in Given:)\n. This is a great idea!\n. I can get a step, on which the error occurred:\nphp\n/**\n * @AfterStep\n * @param \\Behat\\Behat\\Hook\\Scope\\AfterStepScope $scope\n */\npublic function afterStep(Behat\\Behat\\Hook\\Scope\\AfterStepScope $scope)\n{\n  if (!$scope->getTestResult()->isPassed()) {\n    echo $scope->getStep()->getText();\n  }\n}\nBut how to get Error string, or Exception object, or Console Output text:\nScenario: Top menu in Promo Admin is works # features/admin/promo/navigation.feature:14\n    When I click on \"Products\"   # PromoAdminContext::iClickOn()\n    Then I see text \"BEHAT\"                             # PromoAdminContext::iSeeText()\n      The text \"BEHAT\" was not found anywhere in the text of the current page. (Behat\\Mink\\Exception\\ResponseTextException)\n    \u2502\n    \u2502  I see text \"BEHAT\"\n    \u2502\n    \u2514\u2500 @AfterStep # GeneralContext::afterStep()\nPerhaps I 'm not looking where you need (http://i.imgur.com/vv8Ev22.png)..\nUPD. Also I would like to get the scenario object inside the hook @AfterStep, aka $scope->getScenario(). It is possible?\n. Aha! Scenario I was able to get:\nphp\n/** @var \\Behat\\Gherkin\\Node\\ScenarioNode $scenario */\n$scenario = current($scope->getFeature()->getScenarios());\necho $scenario->getTitle();\nRemained the main question - how to get the Exception object (or CLI Output)..\n. P.S. @everzet, I wrote you an email with this question, but you probably have very little free time to spend it on a letters)\n. What do you mean by variable? You want to get some data from the page and save them, then go to another page and get the saved early data? If so, you can save any data in the properies context classes (but only within the same scenario).\n. I also hope for the implementation of support multiple profiles.. We have already discussed such a possibility - https://github.com/Behat/Behat/issues/629\n. I mean the config key testwork.argument (I found it in the reference: behat --config-reference)\ntestwork:\n  argument: []\n  autoload:\n    ...\n. Do I understand correctly that this configuration parameter I should not use?\n. I understand .. Thanks for the answer)\n. ",
    "Trogie": "I still haven't found out how to use suites/profiles/sessions in this partical case... Fighting the same issue...\n. I don't get it...\nTake:\n- 2 different base_urls A and B\n- 3 browsers: X, Y and Z\nHow do I build up the config so I can run my tests on base_url A and on browser X?\nI have 6 different profiles: 2 x 3 and this number will increase fast with more browsers/devices/...\n. Damned again fighting this problem!\n. Yes I knew this was probably not the best place to put it but as there are so many different projects...\nThanks\n. Yes I know Gherkin doesnt have this but we could 'throw the first stone'?. ",
    "videni": "I don't think is syntax error, I  test it with a correct feature file ,  it still give this error ,\nbin/behat --dry-run --append-snippets  features/order/browsing_orders.feature\nthis  feature file is from Sylius\n. ",
    "direct": "Doesn't ring a bell :(\nAnyway - happy New Year..\nFinn Thomsen DIRECTion - do you deserve your customers?   m.\n+45 4055 8055\ne.\nfinn@thomsen.as\nw.\ndirection-marketing.com\nhttp://dk.linkedin.com/in/finnthomsen  http://twitter.com/finnthomsen\n2015-12-30 14:56 GMT+01:00 Konstantin Kudryashov notifications@github.com:\n\nOne caveat though - it wouldn't override. All filters would be applied\ntogether instead.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Behat/Behat/issues/636#issuecomment-168003750.\n. \n",
    "asprega": "Any news on this?\n. ",
    "gael-cosnard": "Any update ?\n. ",
    "jk": "Me too.\n. ",
    "movrack": "Since my request, I didn't find solution. Always waiting.\n. ",
    "tPl0ch": "Is there any progress on this? I struggled a week migrating our v2 to v3 only to realize in the end that I have to remove the whole suite from our integration server for now because we cannot add the results to our analysis tools. They are still running, but just for the sake of knowing they pass (I can do that on my local machine).\n. ",
    "Ere5": "Still no news about this?\n. ",
    "falkolab": "Can you show some example please.\nI use composer.json this way:\n\"autoload\": {\n        \"classmap\": [\"./library/\", \"/Users/iam/LOCAL_PATH/\"]\n    }\nAnd in my context:\n/**\n  * @beforeSuite\n  */\n public static function setUpSuite()\n {\n     require_once './vendor/autoload.php';\n }\nBut I want remove global path from composer.json\n. I can't find any docs to configure autoloader in behat.yml \nI trying to configure this way, but it does not work:\ndefault:\n    autoload:\n        - %paths.base%/tests/features/bootstrap\n        - /Users/<path to library>\n. I've seen it, but have not understand how to configure for my task.\n. Yes! Configure through composer.json working well, but bad idea to using local library path. Because server has different path. But I can use different configurations behat.my.yml and behat.yml for local and server environment.\n. I working on restapi testing. And I need to use some classes from server side library(restapi) in my context. I want that behat autoloader saw it when tests is running.\n. How to use \"environments\" configuration section?\n. I can't use autolad section from behat.yml but wrote own one:\n```\nbehat.yml\ndefault:\n    autoload:\n        '': %paths.base%/../features/bootstrap\n    suites:\n        default:\n            paths:\n              - %paths.base%/../features\n            contexts:\n                - MyContext:\n                  ............\n            settings:\n                autoload:\n                  '': /Users/\n                  ......\n```\nAnd my context:\n```\n<?php\nuse Behat\\Behat\\Context\\SnippetAcceptingContext;\nuse Behat\\Testwork\\Hook\\Scope\\BeforeSuiteScope;\nclass MyContext implements SnippetAcceptingContext {\n    /*\n     * @beforeSuite\n     /\n    public static function setUpSuite(BeforeSuiteScope $scope)\n    {\n        $suite = $scope->getSuite();\n        if($suite->hasSetting('autoload')) {\n            $loader = require './vendor/autoload.php';\n            foreach($suite->getSetting('autoload') as $prefix => $paths) {\n                $loader->add($prefix, $paths);\n            }\n        }\n    }\n```\n. ",
    "ivanbogomoloff": "this works for me in AfterstepScope\nphp\n$scope->getTestResult()->hasException() ? $scope->getTestResult()->getException()->getMessage() : ''. ",
    "xiaolongchen": "I figured it out, Thanks\n. ",
    "alexdrupal": "Oh... ok so context is reset between scenarios?\nAny another way to save data in one scenario for another scenarios without static variables?\n. ok. thank you!\n. ",
    "lifer-da-man": "+1, I'm trying to migrate from Behat 2.4 to Behat 3 and got stuck at this point...\n. ",
    "jasonlfunk": "+1 for deep merging of suite settings. I just ran into a problem where I want some different extension settings (namely a different laravel 5 environment file) for a specific suite so as to use a different repository implementation. I was able to accomplish it with a profile, but it's a little cumbersome to have to execute my suite with:\nbehat --profile backend --suite backend ....\n. ",
    "rakauchuk": "Any updates? (behat version 3.0.15)\n. $ ./bin/behat --version\nbehat version 3.0-dev\n@wundo +1 \n. ",
    "Markcial": "+1, maybe a parameter for deep merging the configurations\n. ",
    "BentCoder": "Small mistakes are inevitable after migrating from Behat v2. That's for that.\n. That worked well. Thanks.\n. @narozhniyy If you can wait a bit, I'll give you full example however while waiting, do research on how to use container in FeatureContext files. There are many examples so you might solve your problem yourself.\n. @narozhniyy No I didn't! There seem to be a problem with the library I think because what was working before doesn't want to work anymore hence reason I left a message here https://github.com/Behat/Behat/issues/764 but no one got back to me yet. Keep an eye on that issue. Let's wait what they say.\n. OK work now!\ncomposer.json\n\"require-dev\": {\n        \"behat/behat\" : \"3.0.15\",\n        \"behat/symfony2-extension\" : \"2.0.0\",\n        \"behat/mink\": \"1.6.1\",\n        \"behat/mink-extension\": \"2.0.1\",\n        \"behat/mink-browserkit-driver\": \"1.2.0\",\n        \"behat/mink-goutte-driver\": \"1.1.0\",\n        \"behat/mink-selenium2-driver\": \"1.2.0\"\n    },\nbehat.yml\ndefault:\n    extensions:\n        Behat\\Symfony2Extension: ~\n        Behat\\MinkExtension:\n            base_url: http://football.local/app_test.php\n            browser_name: firefox\n            sessions:\n                goutte:\n                    goutte: ~\n                selenium2:\n                    selenium2: ~\n                symfony2:\n                    symfony2: ~\n    suites:\n        backend:\n            type: symfony_bundle\n            bundle: ApplicationBackendBundle\n            mink_session: selenium2\n            contexts:\n                - Application\\BackendBundle\\Features\\Context\\FeatureContext:\n                    screen_shot_path: build/phing/behat/screenshot\nFeatureContext\n```\nnamespace Application\\BackendBundle\\Features\\Context;\nuse Behat\\Behat\\Hook\\Scope\\AfterStepScope;\nuse Behat\\Mink\\Driver\\Selenium2Driver;\nuse Behat\\MinkExtension\\Context\\MinkContext;\nclass FeatureContext extends MinkContext\n{\n    private $screenShotPath;\npublic function __construct($screen_shot_path)\n{\n    $this->screenShotPath = $screen_shot_path;\n}\n\n/**\n * Take screen-shot when step fails. Works only with Selenium2Driver.\n *\n * @AfterStep\n * @param AfterStepScope $scope\n */\npublic function takeScreenshotAfterFailedStep(AfterStepScope $scope)\n{\n    if (99 === $scope->getTestResult()->getResultCode()) {\n        $driver = $this->getSession()->getDriver();\n\n        if (! $driver instanceof Selenium2Driver) {\n            return;\n        }\n\n        if (! is_dir($this->screenShotPath)) {\n            mkdir($this->screenShotPath, 0777, true);\n        }\n\n        $filename = sprintf(\n            '%s_%s_%s.%s',\n            $this->getMinkParameter('browser_name'),\n            date('Ymd') . '-' . date('His'),\n            uniqid('', true),\n            'png'\n        );\n\n        $this->saveScreenshot($filename, $this->screenShotPath);\n    }\n}\n\n}\n```\nexample feature\n```\nFeature: Dummy feature\nScenario: Home url\n    Given I am on \"/backend\"\n    Then I should see \"Welcome to Application backend! I will break this test\"\n```\nDownload and run selenium first\nFirst download it (version 2.46.0) and put right into your project folder. http://www.seleniumhq.org/download/\nBc-MBP:football bentcoder$ java -jar selenium-server-standalone-2.46.0.jar\nRun test\n```\nBc-MBP:football bentcoder$  bin/behat --suite=backend\nFeature: Dummy feature\nScenario: Home url                                     # src/Application/BackendBundle/Features/Dummy.feature:3\n    Given I am on \"/backend\"                             # Application\\BackendBundle\\Features\\Context\\FeatureContext::visit()\n    Then I should see \"Welcome to Application backend! I will break this test\" # Application\\BackendBundle\\Features\\Context\\FeatureContext::assertPageContainsText()\n      The text \"Welcome to Application backend!1\" was not found anywhere in the text of the current page. (Behat\\Mink\\Exception\\ResponseTextException)\n--- Failed scenarios:\nsrc/Application/BackendBundle/Features/Dummy.feature:3\n\n1 scenario (1 failed)\n2 steps (1 passed, 1 failed)\n```\nproject folder structure for screenshots\nfootball\n   build\n      phing\n         behat\n            screenshots\nresult\n\n. I have the relevant method in FeatureContext file.\n. PHP Matcher could be the solution.\nhttps://github.com/coduo/php-matcher\n. Is there anybody there!!!! Hellooooo.....\n. Yes but why composer won't fetch them though? Is there anything wrong with the package versions I'm using in composer? I was able to take screenshots with exactly same settings of composer.\n. OK it works now. Thanks. No clue why it didn't work.\n. Thanks, that worked and also the one below works as well.\nbin/behat --suite=api @ApplicationApiBundle/AdminAccessControl.feature\nbin/behat --suite=api @ApplicationApiBundle/AdminAccessControl.feature:12\n. @stof Do you know how formatter works in 3? The code below work in version 2 but not in 3. I think there is a lack of documentation in particular to 3 in general.\n```\nbehat.yml\ndefault:\n    formatter:\n        name: pretty\n        parameters:\n            output_styles:\n                comment: [ magenta ]\n```\n. ",
    "tompedals": "I've managed to put a hacky workaround in place for now. I'm trying to achieve taking a screenshot after every single step of scenarios tagged with @screenshot.\n```\n    /*\n     * @BeforeScenario @screenshot\n     /\n    public function beforeScenario(BeforeScenarioScope $scope)\n    {\n        $this->screenshot = true;\n    }\n/**\n * @AfterScenario @screenshot\n */\npublic function afterScenario(AfterScenarioScope $scope)\n{\n    $this->screenshot = false;\n}\n\n/**\n * @AfterStep\n */\npublic function afterStep(AfterStepScope $scope)\n{\n    if ($this->screenshot) {\n        // Take screenshot\n    }\n}\n\n``\n. Nope, I'm taking a screenshot after every step in scenarios/features tagged with@screenshot`.\n. Closing issue as updated documentation instead.\n. ",
    "arnolanglade": "I am agree with @umpirsky. It is not clear.\n. ",
    "ryancookdev": "I also agree. I lost some time looking through config settings trying to correct this.\n. ",
    "stmllr": "The interface StepScope should provide an API for getting the scenario.\nStepScope has an API for feature but not for scenario, though I would expect that from the structure feature -> scenario -> step \n. ",
    "kwisatz": ":+1: \n. ",
    "fugi": ":+1: \n. ",
    "romaricdrigon": "Another way is : \nphp\n            /** @var \\Behat\\Gherkin\\Node\\ScenarioNode $scenario */\n            $scenario = current($scope->getFeature()->getScenarios());\nHaving a public method would a be must-have though. Event if it implements one of the \"hacks\" at the moment.\n. Ok. \nHow to configure this in behat.yml then? Sorry I've found no doc for this.\n. So I've found. For reference, if it can help somebody else:\nyml\ndefault:\n    calls:\n        error_reporting: 14335 # E_ALL & ~E_USER_DEPRECATED\nThe tests run, bit are polluted with deprecation messages all over. Those are coming from Symfony2 internals in my case, so I'm definitely waiting for 2.7.1!\nThanks for your help @stof \n. For suppressing deprecation notice, a dirty and temporary way, in Behat FeatureContext.php:\nphp\n    /**\n     * @BeforeScenario\n     */\n    static public function suppressDepreciationNotices(\\Behat\\Behat\\Hook\\Scope\\BeforeScenarioScope $scope)\n    {\n        error_reporting(E_ALL & ~E_USER_DEPRECATED);\n    }\nBest solution would be to register a custom handler, in the fashion of the PhpUnit bridge. Though I was unable to make that one work for now.\n. ",
    "PurpleBooth": "I wasn't sure if I was supposed to update the dependency in composer or not, but the tests will keep failing until that happens.\n. I'm not sure if I quite understand you, but this is what happens when I try to bump the version like you suggested:\n```\n$ composer require behat/gherkin ~4.4@dev\n./composer.json has been updated\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nYour requirements could not be resolved to an installable set of packages.\nProblem 1\n    - The requested package behat/gherkin ~4.4@dev could not be found.\n  Problem 2\n    - Installation request for behat/behat 3.0.x-dev -> satisfiable by behat/behat[3.0.x-dev].\n    - behat/behat 3.0.x-dev requires behat/gherkin ~4.4@dev -> no matching package found.\nPotential causes:\n - A typo in the package name\n - The package is not available in a stable-enough version according to your minimum-stability setting\n   see https://groups.google.com/d/topic/composer-dev/_g3ASeIFlrc/discussion for more details.\nRead http://getcomposer.org/doc/articles/troubleshooting.md for further common problems.\nInstallation failed, reverting ./composer.json to its original content.\n$ \n```\n. My understanding of composer is that, to be able to bump the version to 4.4 a branch or tag would need to exist. There isn't a gherkin 4.4 branch or tag, so I can't bump the version to it, and have the build run. \nI've changed the pointer to point to dev-master, until either of those exists, that should allow you to see the tests passing, and run scrutiniser etc.\n. I'll write some tests for that scenario tomorrow and rebase this branch, I hadn't thought of that.\n. @ciaranmcnulty I wrote some tests for the scenario where the columns are empty, and discovered weird things were happening, so I've changed it to ignore tables that don't have 1 key column, 1 values column.\nI haven't committed that test though because it doesn't match the style of any other tests that were in there. I can add it if need be.\n. Fixed those suggested changes.\nI am sort of thinking about closing this PR at the moment. It's nearly a year old and it still hasn't been merged in, I don't really want to keep maintaining the branch forever if it's not going to be merged.\n. This was mostly because this is the notation all other methods in the class used.\nI've fixed all of them.\n. This logic is a bit weird. Should I move this back to the NodeTable in Gherkin, and add a \"Column count\" method or is it okay as it is?\n. ",
    "matteomoretti": "+1\n. ",
    "pfrenssen": ":+1: \n. @PurpleBooth thanks for your work, I understand it can be demotivating if it takes a long time for it to be accepted. If you want I can take over maintenance of this branch if you can add me as a collaborator. We are depending on this for our test suites at the European Commission.\n@stof, do you think this is something that could be worthwhile to add to Behat? Is there anything you think needs to be done?\n. Yes but it is broken for --verbose, that is being fixed by this pull request.\n. > I don't think we need to replicate the Symfony/Console behaviour here but it is not for me to say.\nBehat is actually using Symfony Console, I'm not trying to emulate its behaviour :)\nThis is simply a bug, somebody accidentally used the option VALUE_NONE instead of VALUE_OPTIONAL. I don't think it was ever the intention to have no feature parity between the long option and the shorthand. Currently --verbose is broken since it can only be used to set the first out of 3 possible error levels.\nI stumbled upon this because in my current project we're using Phing to run the tests instead of running them directly on the command line. The Phing BehatTask only supports POSIX long options, not the shorthand ones.\n. I've been debugging this and the problem seems to reside in behat/gherkin after all:\nWhen the basepath is passed in the new version the PathsFilter::isFeatureMatch() no longer works as expected. There is confusion whether the \"path\" of a feature is a relative path or an absolute path.\nPathsFilter::isFeatureMatch() thinks that $feature->getFile() returns an absolute path, and will always return FALSE if it actually contains a relative path such as feature/homepage.feature.\nFrom the documentation of FeatureNode::getFile() it is not explicitly defined whether this is a relative or an absolute path, but it \"feels\" that it should be a relative path, otherwise this method would be named FeatureNode::getPath().. I have a potential fix in https://github.com/Behat/Gherkin/pull/129 but I am not sure if this is the right solution, this is the first time I look at the Gherkin code base.. I have updated the PR with the proposed fix: https://github.com/Behat/Gherkin/pull/129. Can you try out https://github.com/Behat/Gherkin/pull/129 ? I have that patch applied and am able to run individual tests, at least on the command line.\nNote that this is in a different project (Gherkin) so it's a bit pointless to comment there about Behat tests not being able to run, since that is out of scope for the Gherkin project. It fixes the problem on this side though.. Gherkin 4.4 has been released, so the @dev can be removed.\n. It reads a bit strange but the logic is fine. Maybe just add a line of documentation to the second try/catch to explain it?\n. PHPStorm suggests this as an improvement? This makes it less clear to me, I know this works and that you can retrieve individual characters in a string by accessing them using the array key syntax, but the original code is much easier to understand for a human being.. How about foreach()?. ",
    "openprivacy": "This looks good (other than perhaps the date in a comment) and a valuable contribution.\nWhen can I look forward to this being merged and a 3.1 release? (What can I do to help?)\n. :+1:\n. I am waiting for this, too. Am already using a locally patched version with the junit formatter to please Jenkins. Is there some way I/we can support the process?\n. @stof, @everzet - #653 looks like it's been ready to go for a while now. Is anyone still maintaining this? I certainly understand if life (and work) has gotten in the way of your continued work here, but if so, perhaps put out a call for new or co-maintainers (or at least testing and integration help). Behat is a great tool - and you guys have done great work - but it's sliding into oblivion without maintenance. Unfortunately, I can't take on a primary role, but I can help with some testing. Or are people already moving on to other tools?\n. ",
    "ockham": "Same thing is happening to me when trying to run bin/behat --init. I suspect this has something to do with Symfony 2.6, which was released only yesterday.\n. ",
    "PatrickRose": "Related: #546\nCurrently, nothing as far as I can tell though Behat/ChainedStepsExtension#2 has something. I'm currently having a look at whether I can help out with that but it's looking like I don't know enough about Behat's internals to really understand what's not working.\n. ",
    "amitaibu": "Thanks @timiTao  - can you please refer me to the issue for that, I'd like to better understand why it was dropped (I couldn't find it).\n. Thanks!\n. ",
    "zembaalbert": "+1 on this\n. as I see it's not released yet, right? probably it will be included in the next release. But, it's not a blocking issue anyways. \ncool. keep up the good work!\n. ",
    "sminnee": "FYI I fixed this on the 2.5 branch as well #717\n. Hrm, this failed on Symfony 2.0 - 2.2, but was necessary to work in Symfony 2.3. Not sure what to do to fix, except maybe mark the module as not working with 2.3?\n. ",
    "gondo": "i have no idea. if they exist, where can i find them?\nto be honest i'm just starting with the setup, so far this is the first confusing thing and i dont know if i did something wrong or if its meant to be like this.\n. oh thats very strange, stupid PhpStorm had cached previous version 2.5 and was not able to locate nor display proper files ... had to restart to get it to update.\nsorry my (or my IDE) fault.\n. ",
    "sskorc": "@everzet could you please provide more information to reproduce this bug? Some example configuration would be great.\n. ",
    "0-vortex": "So far it seems the transform feature was designed for use with more complex entities, wouldn't hurt to fix the documentation link (docs link to v2.5 instead of latest) and add some more relevant use case scenarios. Type matching with php is silly but we should be able to transform into null !\n. ",
    "sukei": "Here are the lines of code that prevents null to be used as an acceptable value : https://github.com/Behat/Behat/blob/v3.0.14/src/Behat/Behat/Transformation/Transformer/RepositoryArgumentTransformer.php#L116-118\nIt's gonna be hard to change. Maybe we could use an object as a null value? Something like:\nphp\n/**\n * @Transform /^(~)$/\n */\npublic function castNull()\n{\n    return RepositoryArgumentTransformer::nullValue;\n}\nphp\nif (null !== $newValue = $this->transformRegex($definitionCall, $transformation, $value)) {\n    return $newValue === RepositoryArgumentTransformer::nullValue ? null : $newValue;\n}\nAny thought?\n. @chrisemerson +1.\n. ",
    "bkleef": "I cannot wait to integrate Behat 3 in our Jenkins, keep up the great work!\n. ",
    "adalbertwysocki": "Any plans to merge this into master? Seems like everything is reviewed?\n. ",
    "bodabodah": "Friends, I need this feature as soon as possible please.\n. ",
    "smatyas": ":+1: \n. ",
    "lwiesel": ":+1: \n. Can't wait! :smile: \n. ",
    "nervo": ":+1:  for sure\n. Hm, yes, for sure.\nOnce again, from my point of view, configuration given by command line is far more explicit than configuration file :)\nAm i the only one thinking like that ?\n. Maybe i'm just part of the 3 persons on earth who need to use environment variables with behat :)\nI think it's time to describe my use case: on a project, we have to keep at least two environments for testing. One is \"dev\", for developpers, where base_url looks like \"project.dev/app.php\". Other is \"test\" where base_url is unpredictable (vms are launched on the fly).\nThings must be keeped simple for dev (aka. config file shared across all developpers, and a simple command line without parameters), and very specific on the test environment (some parameters must be given at run time)\nI could not figure i'm the only one in this case :)\n. Yep, dude !\n\n. 'Sounds weird, but acceptable :)\n. Ok, have a look on https://github.com/Behat/Behat/pull/816\n. You can have a look on the original pr and all its comments right there: https://github.com/Behat/Behat/pull/725\n. ",
    "dphilpot": ":+1:\n. ",
    "JeremyJames": ":+1: \n. ",
    "JohanLopes": ":+1: \n. ",
    "rooboy35": ":thumbsup: bring it on, thanks guys\n. ",
    "burci": ":+1:\n. ",
    "KingCrunch": "Wait ... When @everzet puts his thumb in, shouldn't it be the ultimate clearance? :wink: \n. :+1: :cake: \n@tristanbes You gif makes me dizzy ... I can't stop looking at it...\n. @everzet Yeah, would be a solution, but they are so convenient -_- They cover some very common steps and not using them feels somehow like reinventing the wheel...\n. ",
    "Blackshawk": ":+1: \n. ",
    "lutangar": ":+1: \n. ",
    "devster": ":+1: \n. \n. ",
    "woecifaun": ":+1: \n. :+1: \n. ",
    "Tom32i": ":+1: \n. ",
    "mburgs": ":+1: \n. ",
    "gdobiecki": "Is there a chance it will be merged any time soon?\n. Hi @legovaer \nPlease try bin/behat -f pretty -f html\nI faced similar issue recently and that helped me.\n. ",
    "dohzoh": "Great Job :+1:\n. ",
    "Gisleburt": "I'm not really sure where to put this, but as this issue is still open and the code is now in master, I thought I'd report it here.\nI'm getting some weird, potentially incorrect output from the junit formatter. \nHere's the output of pretty:\n```\n$ bin/behat -p daniel -s users\nFeature: Login\nAs a basic user\n  - I should  be able to log in\nI should not be able to log in as\n  - an admin\n  - someone without an account\n  - the wrong password\n@javascript\n  Scenario Outline: Fail to log in            # tests/Behat/Users/Features/0.1.Login.feature:13\n    Given I am on the homepage                # Mischief\\Test\\Behat\\FeatureContext::iAmOnHomepage()\n    When I follow \"Login\"                     # Mischief\\Test\\Behat\\FeatureContext::clickLink()\n    Then I should see \"Login to the Mischief\" # Mischief\\Test\\Behat\\FeatureContext::assertPageContainsText()\n    When I enter details for \"\"         # Mischief\\Test\\Behat\\FeatureContext::enterDetailsFor()\n    And I press \"Login\"                       # Mischief\\Test\\Behat\\FeatureContext::pressButton()\n    Then I should see \"Login\"                 # Mischief\\Test\\Behat\\FeatureContext::assertPageContainsText()\n    And I should see \"Buy\"                    # Mischief\\Test\\Behat\\FeatureContext::assertPageContainsText()\nExamples:\n  | user        |\n  \u250c\u2500 @BeforeScenario # Mischief\\Test\\Behat\\FeatureContext::setupDatabase()\n  \u2502\n  \u2502  Downloading Sanitized SQL\n  \u2502  Generating Fixtures\n  \u2502  Fixtures report: /www/vhosts/mischief-website/httpdocs/tests/reports/Behat/Users/artisan.log\n  \u2502\n  \u2502\n  \u2502\n  | fakeUser    |\n  | adminUser   |\n  | invalidUser |\n\n@javascript\n  Scenario Outline: Log in and out as User    # tests/Behat/Users/Features/0.1.Login.feature:29\n    Given I am on the homepage                # Mischief\\Test\\Behat\\FeatureContext::iAmOnHomepage()\n    When I follow \"Login\"                     # Mischief\\Test\\Behat\\FeatureContext::clickLink()\n    Then I should see \"Login to the Mischief\" # Mischief\\Test\\Behat\\FeatureContext::assertPageContainsText()\n    When I enter details for \"\"         # Mischief\\Test\\Behat\\FeatureContext::enterDetailsFor()\n    And I press \"Login\"                       # Mischief\\Test\\Behat\\FeatureContext::pressButton()\n    Then I should not see \"Login\"             # Mischief\\Test\\Behat\\FeatureContext::assertPageNotContainsText()\n    When I click \"user-btn\"                   # Mischief\\Test\\Behat\\FeatureContext::clickSomething()\n    And I wait for \"1\" second                 # Mischief\\Test\\Behat\\FeatureContext::sleepFor()\n    And I click \"edit my profile\"             # Mischief\\Test\\Behat\\FeatureContext::clickSomething()\n    Then I should see \"My Profile\"            # Mischief\\Test\\Behat\\FeatureContext::assertPageContainsText()\n    When I click \"user-btn\"                   # Mischief\\Test\\Behat\\FeatureContext::clickSomething()\n    And I wait for \"1\" second                 # Mischief\\Test\\Behat\\FeatureContext::sleepFor()\n    And I follow \"logout\"                     # Mischief\\Test\\Behat\\FeatureContext::clickLink()\n    Then I should see \"Login\"                 # Mischief\\Test\\Behat\\FeatureContext::assertPageContainsText()\nExamples:\n  | user      |\n  | basicUser |\n\n@javascript\n  Scenario Outline: Login as User on other pages # tests/Behat/Users/Features/0.1.Login.feature:50\n    Given I am on \"\"                       # Mischief\\Test\\Behat\\FeatureContext::visit()\n    Then I should see \"\"            # Mischief\\Test\\Behat\\FeatureContext::assertPageContainsText()\n    When I follow \"Login\"                        # Mischief\\Test\\Behat\\FeatureContext::clickLink()\n    Then I should see \"Login to the Mischief\"    # Mischief\\Test\\Behat\\FeatureContext::assertPageContainsText()\n    When I enter details for \"\"            # Mischief\\Test\\Behat\\FeatureContext::enterDetailsFor()\n    And I press \"Login\"                          # Mischief\\Test\\Behat\\FeatureContext::pressButton()\n    Then I should see \"\"            # Mischief\\Test\\Behat\\FeatureContext::assertPageContainsText()\n    Then I should not see \"\"         # Mischief\\Test\\Behat\\FeatureContext::assertPageNotContainsText()\nExamples:\n  | user      | page     | initialText                | visibleText                | absentText            |\n  | basicUser | /explore | Explore and Share Mischief | Explore and Share Mischief | My Profile            |\n  | basicUser | /buy     | Infinite Possibilities.    | Infinite Possibilities.    | My Profile            |\n  | basicUser | /login   | Login to the Mischief      | My Profile                 | Login to the Mischief |\n\n\u2502\n\u2502\n\u2502  Scenarios:         7\n\u2502   - passed:         7  100.0%\n\u2502   - failed:         0    0.0%\n\u2502   - in progress:    0    0.0%\n\u2502\n\u2502\n\u2502\n\u2514\u2500 @AfterSuite # Mischief\\Test\\Behat\\FeatureContext::scenarioCounter()\n7 scenarios (7 passed)\n59 steps (59 passed)\n1m38.77s (24.48Mb)\n```\nHere's the output of junit:\nxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites name=\"users\">\n  <testsuite name=\"Login\" tests=\"7\" skipped=\"0\" failures=\"0\" errors=\"0\">\n    <testcase name=\"Login as User on other pages #1\" status=\"passed\"></testcase>\n    <testcase name=\"Login as User on other pages #2\" status=\"passed\"></testcase>\n    <testcase name=\"Login as User on other pages #3\" status=\"passed\"></testcase>\n    <testcase name=\"Login as User on other pages #4\" status=\"passed\"></testcase>\n    <testcase name=\"Login as User on other pages #5\" status=\"passed\"></testcase>\n    <testcase name=\"Login as User on other pages #6\" status=\"passed\"></testcase>\n    <testcase name=\"Login as User on other pages #7\" status=\"passed\"></testcase>\n  </testsuite>\n</testsuites>\nAs you can see, all testcases are named Login as User on other pages #X, however I think this is wrong. Shouldn't it look more like this:\nxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites name=\"users\">\n  <testsuite name=\"Login\" tests=\"7\" skipped=\"0\" failures=\"0\" errors=\"0\">\n    <testcase name=\"Fail to log in #1\" status=\"passed\"></testcase>\n    <testcase name=\"Fail to log in #2\" status=\"passed\"></testcase>\n    <testcase name=\"Fail to log in #3\" status=\"passed\"></testcase>\n    <testcase name=\"Log in and out as User #1\" status=\"passed\"></testcase>\n    <testcase name=\"Login as User on other pages #1\" status=\"passed\"></testcase>\n    <testcase name=\"Login as User on other pages #2\" status=\"passed\"></testcase>\n    <testcase name=\"Login as User on other pages #3\" status=\"passed\"></testcase>\n  </testsuite>\n</testsuites>\nHave I set something up incorrectly here?\n. I can... but I'm not 100% sure when. :) Just discovered it at work, and it doesn't actually block me so should carry on with that ;) I'll have to wait for some free time of my own.\nI had a look at the feature you mentioned though. The immediate difference that pops out is I'm using Scenario Outlines, and that features uses Scenarios. It could be a clue. I have features that only use scenarios somewhere so I'll give them a go and report back.\n. ",
    "phiamo": "this works quite well thanks a lot @WouterJ !\n. ",
    "bhaku": "When it will be released ?:) \n. ",
    "DracoBlue": ":+1:\n. \ud83d\udc4d It's really a big issue, that progress-Reporter does not show which @Example line is the reason for breaking the build, because it shows only the Scenario affected.\n. ",
    "dantleech": "Updated\n. Updated.\n. gettype could return unknown type or NULL but apparently it will never return an empty string. So I'm fine with reverting that.\n. ",
    "simplenotezy": "Fixed here: https://github.com/Behat/Behat/commit/7192c4eb862b0a82a6dd19501d9b3b4dc1aa86ef\n. What could I do to get rid of the error message? Where could I post an issue?\n. ",
    "cauerego": "Still getting the exact same \"error\", except it says \"deprecated in 2.2\" and comes as a warning (so, not really an error).\nI'm on a mac, if it's any relevant. Not sure how to find the file from the fix above, I believe it's compiled in the binary and can't verify my binary version, maybe due to #475 .\nMaybe I got an outdated version, somehow?\n. Thanks for the hint!\nI've never heard of Behat, Mink or Composer before installing all of them using this guide. It is 2.4.6 I think. PHP 5.3 and gherkin 2.2.9 are clear. And I actually had to use php composer.phar show -i behat/behat. My composer.json had this: \"behat/behat\": \"2.4.*@stable\",\nNow I'm trying to see how to properly update this... Since this fix is for version 3.\n. ",
    "webit4me": "@stof, rebased as per your request.\n. ah, then i might got it wrong. I thought you want me to fixup (like squash) my latest commits on this branch (which were around WouterJ correction/improvement suggestion) and only keep the first main commit.\nGoing to lookup up to learn how to the what you are asking correctly :) \n. @WouterJ, thanks a lot :) , but one more question to be clear when you are saying \"origin point to the repository\" by repository you mean the main \"Behat\" repo? since at the moment my origin is pointing to the forked version on my webit4me \n$ git remote -v\norigin  https://github.com/webit4me/Behat.git (fetch)\norigin  https://github.com/webit4me/Behat.git (push)\nshould i point my origin to the https://github.com/behat/Behat.git  then follow your steps ?\n. Thank you very much for teaching me this :)\nI'm going to tidy things up and get back to you soon\nCheers \n. Just realised that i've spelled the branch name incorrectly as well :( , if its alright im going to create new branch and open a new request \n. @stof , @WouterJ , hope this one be better. And once more, thanks for the help :)\n.  @stof , escaping html in the html format sounds a bit tricky.\nIn one hand i would say some developers might prefer to use some html tags in their features to style up the result/report as well as in some cases we might have html tags as part of the step arguments e.g. passing html partial  inside a multiple lines steps (\"\"\") to be checked during a test.\nany thought? :)\n. so what's the suggestion , shall we escape all html special characters? if so what will happened to  fixtures with some special character in them e.g. \"<?php\" in the append_snippets.feature ?\n. so if thats the case i think i can easily walk through all variables passing to the getTemplate method and clear them up just before being passed to the template file.\n. Unfortunately it wasn't possible to escape all html tags by walking on the variables passing to he template. so i have done it in different places.\nbut still i would suggest to consider the opportunity of styling the report output by amending the fixture, i.e. like at the moment in the pretty formatter, one can put some more pressure on specific word in a scenario's title by wrapping it in a failed tag and make it bolder for the developer whom going to satisfy that test \ne.g. Scenario: Extension {+failed} should {-failed} be successfully loaded\n. I made sure all templates having a line feed at the end \n. Added a line of description \n. My bad, they are not in use at the moment anyway so i've removed them until i can find a solid solution \n. been removed since is not in use at the moment\n. Tidied up the entire file :)\n. don't know how lost the track on this :( , replaced values with their template's variables \n. Agreed, will take care of it at some point today \n. I took that abstraction out but i have to admit now there is too much duplication in such small module :) \nanyway all changes are in a single commit so we would be able to revert them if change our mind \n. ",
    "ice9js": "Won't that mess up my test results ?\nRight now I'm using the almost finished version of the JUnit formatter... I suppose that the results from the second run would replace the results from the first one.\n. Well, in case you're still wondering:\nOn that project, the tests were actually run in production in addition to the regular CI runs, so we could make sure everything kept on running smoothly. Because of that, occasionally a user would interfere and the test would fail. It was of use to us then, to be able to repeat the particular test, so we didn't have to go through all the faulty results each time.\nI'm not part of that project anymore, so I don't see any reason to go on with this issue anyway, thanks for closing it.\n. ",
    "aaa2000": "Chocolatey is installed on Appveyor workers. I never used it but Chocolatey is a Machine Package Manager, somewhat like apt-get, but built with Windows in mind and there are PHP package https://chocolatey.org/packages?q=PHP\n. I may have misunderstood the bug but \"running tests by specifying one or more line numbers\" works for me on Behat v3.0.15.\n```\nbin/behat -f progress features/append_snippets.feature:231                                                    1 \u21b5\n.....\n1 sc\u00e9nario (1 succ\u00e8s)\n5 \u00e9tapes (5 succ\u00e8s)\n0m0.21s (12.40Mb)\n```\n```\nbin/behat -f progress features/append_snippets.feature:231-405\n..............\n2 sc\u00e9narios (2 succ\u00e8s)\n14 \u00e9tapes (14 succ\u00e8s)\n0m0.41s (12.41Mb)\n```\n. Coule you try with gherkin cache disabled ? \nBEHAT_PARAMS='{\"gherkin\" : {\"cache\" : null}}' bin/behat -c behat.docker.yml features/dataset.all.feature:1-100\n. I tried to reproduce the bug without success by using this scenario. Scenario pass on Behat 3.0.14 and 3.0.15\n```\nFeature: Step Arguments Transformations\n  In order to follow DRY\n  As a feature writer\n  I need to be able to move common\n  arguments transformations\n  into transformation functions\nScenario: Multiple Arguments Transformations\n    Given a file named \"features/multiple_arguments.feature\" with:\n    \"\"\"\n    Feature: Step Arguments\n      Scenario:\n        Given I am \"doe\" and I am a \"manager\" and I have an email \"doe@example.com\"\n    \"\"\"\n    Given a file named \"features/bootstrap/User.php\" with:\n    \"\"\"\n      <?php\n      class User\n      {\n          private $username;\n          private $age;\n      public function __construct($username, $age = 20) {\n          $this->username = $username;\n          $this->age = $age;\n      }\n\n      public function getUsername() { return $this->username; }\n      public function getAge() { return $this->age; }\n  }\n\"\"\"\nGiven a file named \"features/bootstrap/Role.php\" with:\n\"\"\"\n      <?php\n      class Role\n      {\n          public function __construct($name) {\n              $this->name = $name;\n          }\n      }\n    \"\"\"\nAnd a file named \"features/bootstrap/FeatureContext.php\" with:\n\"\"\"\n      <?php\n\n      class FeatureContext implements Behat\\Behat\\Context\\Context\n      {\n          public function __construct()\n          {\n              unset($this->user);\n              unset($this->role);\n              unset($this->email);\n          }\n\n          /** @Transform :user */\n          public function castToUser($username) {\n              return new User($username);\n          }\n\n          /** @Transform :role */\n          public function castToRole($name) {\n              return new Role($name);\n          }\n\n         /**\n           * @Given I am :user and I am a :role and I have an email :email\n           */\n          public function iAmUserAndIAmARole(User $user, Role $role, $email) {\n              $this->user = $user;\n              $this->role = $role;\n              $this->email = $email;\n          }\n      }\n      \"\"\"\nWhen I run \"behat -f progress --no-colors\"\nThen it should pass with:\n\"\"\"\n.\n\n1 scenario (1 passed)\n\"\"\"\n\n```\n@dornathal Can you give more information ? Or can you retry ?\n. I think that the bug has been fixed with #540, what version do you use? The version 3.0.8 should fix that.\nI used this scenario \nLANG=en bin/behat --name=\"Transforming in Datetime\"\n```\n  Scenario: Transforming in Datetime\n    Given a file named \"features/to_null.feature\" with:\n    \"\"\"\n      Feature: I should be able to transform values into datetime for testing\n  Scenario Outline: Converting in datetime\n    Given I have the date \"<value>\"\n    Then it should be of DateTime type\n\n    Examples:\n        | value      |\n        | 1 day ago  |\n        | 10 day ago |\n        | 2 day ago  |\n  \"\"\"\nAnd a file named \"features/bootstrap/FeatureContext.php\" with:\n\"\"\"\n  <?php\n\n  class FeatureContext implements Behat\\Behat\\Context\\Context\n  {\n      public function __construct()\n      {\n          unset($this->value);\n      }\n\n      /**\n       * @Transform :days day ago\n       */\n      public function transformDateTime($days)\n      {\n          return new \\DateTime(\"$days day ago\");\n      }\n\n      /**\n       * @Given I have the date \":value\"\n       */\n      public function iHaveTheValue($value)\n      {\n          $this->value = $value;\n      }\n\n      /**\n       * @Then it should be of DateTime type\n       */\n      public function itShouldBeOfDateTimeType()\n      {\n          if (get_class($this->value) != 'DateTime') {\n              throw new Exception(\"Expected DateTime, got \" . get_class($this->value) . \" (value: \" . var_export($this->value, true) . \")\");\n          }\n      }\n  }\n  \"\"\"\nWhen I run \"behat -f progress --no-colors\"\nThen it should pass with:\n\"\"\"\n......\n\n3 scenarios (3 passed)\n6 steps (6 passed)\n\"\"\"\n\n```\n. I tried to reproduce the bug without success by using this scenario\n```\nScenario: Regex Transforming on scenario outline\n    Given a file named \"features/regex_transform_on_scenario_outline.feature\" with:\n    \"\"\"\n      Feature: I should be able to transform values into different types for testing\n  Scenario Outline: Converting different types\n    Given I have the value \"<value>\"\n    Then it should be of type \"<type>\"\n\n    Examples:\n        | value                                             | type       |\n        |  &utm_source=RacingPost&utm_medium                | NULL       |\n        |  &utm_source=RacingPost&utm_medium=RacingPost.com | string     |\n\n  \"\"\"\nAnd a file named \"features/bootstrap/FeatureContext.php\" with:\n\"\"\"\n  <?php\n\n  class FeatureContext implements Behat\\Behat\\Context\\Context\n  {\n      public function __construct()\n      {\n          unset($this->value);\n      }\n\n      /**\n       * @Transform /(extra wide)$|(wide)$|(medium)$/\n       */\n      public function transformUrl($string)\n      {\n          return null;\n      }\n\n      /**\n       * @Given I have the value \":value\"\n       */\n      public function iHaveTheValue($value)\n      {\n          $this->value = $value;\n      }\n\n      /**\n       * @Then it should be of type :type\n       */\n      public function itShouldBeOfType($type)\n      {\n          if (gettype($this->value) != $type) {\n              throw new Exception(\"Expected \" . $type . \", got \" . gettype($this->value) . \" (value: \" . $this->value . \")\");\n          }\n      }\n  }\n  \"\"\"\nWhen I run \"behat -f progress --no-colors\"\nThen it should pass with:\n\"\"\"\n....\n\n2 scenarios (2 passed)\n\"\"\"\n\n```\n. ",
    "JANorman": "@nchagrass @stof Thanks guys. The problem was more that the selenium server location is not specially known at the time of producing the behat.yml file. I've found the right BEHAT_PARAMS combination as:\nBEHAT_PARAMS=extensions[Behat\\MinkExtension\\Extension][selenium2][wd_host]=http://seleniumexampleserver.com/wd/hub\nThanks for your help!\n. ",
    "mvhirsch": "I don't see any BC break withing PHP 5.6 in the code above.\nI'm also unable to reproduce the bug with 149f8881a1df56496c37094f32d05b53e0cde37b\nPHP 5.6.15 (cli) (built: Oct 29 2015 15:10:18) \nCopyright (c) 1997-2015 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies\n    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2015, by Zend Technologies\n    with Xdebug v2.3.3, Copyright (c) 2002-2015, by Derick Rethans\n    with blackfire v1.6.0, https://blackfire.io, by Blackfireio Inc.\n@songokas can you still reproduce the error?\n. @stof, @everzet I hope it's not to late for suggesting help. \nIs there anything left I can help you with to finish release 3.1?\n. Thank you very much!\n. Please have a look at #707 \n. ",
    "PG2000": "@everzet\nCan you give me some advice which issues should be solved.to release 3.1 ?\nThanks in advance for your support....\n. ",
    "KuenzelIT": "Alright, I'm going to ask at the MInk-repo then.\n@stof As i said, I'm still quite confused with all of this. Isn't PhantomJS also headless? What am I not getting in your last comment?\nI want to go through the UI to make it as \"real\" as possible. And i need Javascript for this. Unfortunately Zombie didn't work on my machine, so I switched to PhantomJS.\n. ",
    "jbouzekri": "I don't know if I went the right way, but I found a solution by creating a custom context which modify all context in the environment before each scenario.\n``` php\n<?php\nnamespace Context;\nuse Behat\\Behat\\Hook\\Scope\\BeforeScenarioScope;\n/\n * Description of MinkOverrideContext\n \n * @author jobou\n /\nclass MinkOverrideContext extends Base\\BaseMinkContext\n{\nprotected $baseUrl;\n\npublic function __construct($base_url)\n{\n    $this->baseUrl = $base_url;\n\n}\n\n/** @BeforeScenario */\npublic function gatherContexts(BeforeScenarioScope $scope)\n{\n    $environment = $scope->getEnvironment();\n\n    foreach ($environment->getContexts() as $context) {\n        if ($context instanceof \\Behat\\MinkExtension\\Context\\RawMinkContext) {\n            $context->setMinkParameter('base_url', $this->baseUrl);\n        }\n    }\n}\n\n}\n```\nAnd then loading it only for my club2 suite : \nyml\n    suites:\n        club2:\n            contexts:\n                - Context\\FeatureContext\n                - Context\\SecurityContext\n                - Context\\MinkOverrideContext:\n                    base_url: http://club2.localhost/\n            filters:\n                tags: @club2\nIt seems to work but I would like to have your feedback on good and bad practice of what I am doing. Thanks in advance\n. Ok thank you for pointing that out. Sorry for the error.\n. ",
    "danieledangeli": "What about this feature? I still have an error with behat/behat\": \"2.5.4\"\n. @stof I fixed it in my project by requiring a specific version for symfony/translator (2.1). I saw that in your composer your are requiring for ~2.1 (so between 2.1 and 3.0). Which is the proper fix for that?\n. @stof Nice! Thanks!\n. ",
    "gries": "I case someone is interested I create a behat-extension that does that: https://github.com/2bepublished/BehatResponsiveFeaturesExtension any feedback is still welcome.\n. Hi thank you for your feedback :)\nbut I think I did not fully grasp what you meant. \nI mean I could make a Context for all devices / configurations but that wouldn't help me in not executing features for those devices.\nMaybe I didn't get your answer right, but if I lets say configure multiple contexts for one suite let's call the suites core and cart I'd have a configuration like this.\nyaml\ndefault:\n    suites:\n        core:\n            contexts:\n                - FirefoxContext\n                - iPhoneContext\n            paths: \n                - features/core \n        cart:\n            contexts:\n                - FirefoxContext\n                - iPhoneContext\n            paths: \n                - features/cart\nAnd my feature-files look something like this:\nfeatures/\n    core/\n        hello-world.feature ; executed on all browsers\n    cart/\n        navigation.feature ; executed on all browsers\n        item_count.feature ; executed on all browsers with with a screen > 500\nHow could I now configure contexts to achieve my goal?\n. My current goal is not to manage scenarios but features so I don't want to disable scenarios based on sizes but features.\nYour approach looks fine but I think this might get little out of hand. Assume you have 20+ browser configurations, you would have to track every feature for every browser, so everytime you add a new feature you'll have to go through all 20+ configs and add the features to all the suites that support them.\nOn some occasions you will have to split up the path parts because before you could include the whole cart/ features on all devices, now you add a features that has a size requirement - so you'll have to go to all devices that don't match the requirement and replace cart/ with:\nyaml\ncart/fitting1.feature\ncart/fitting2.feature\n....\n. thank you for your inputs. I'll give the generator idea a shot, that would combine the oversight over the feature support of browsers and would force our team create a complete feature list which is a nice side effect ;)\nIf you are interested I'll share my results of the config generator here.\n. @timiTao here it is: https://github.com/2bepublished/BehatConfigGenerator still needs a little work to make the config a little more flexible but it should work for most behat + browserstack users.\n. Can be closed - as the config-generator solves my problem\n. ",
    "vincentaubert": "bin/behat --format junit\n. I works Thanks.\nI close the issue\n. ",
    "GuillaumeDievart": "You need to add the option --out=build/logs \n. ",
    "jbenoit2011": "I had the same issue. Wouldn't be better to catch the error?\n. Don't know if related, but I don't want to fill a new issue if it not worth it.\nIn a *.feature file if I comment more than 122 lines, it causes a nesting level fatal error.\nFatal error: Maximum function nesting level of '256' reached, aborting! in /vendor/behat/gherkin/src/Behat/Gherkin/Lexer.php on line 179\nTell me if I should open a new ticket.\nThanks.\n. ",
    "jenschude": "It worked a day before with max nesting level 100 also for me :) So some change from the last version has increased the nesting level. Besides i also just increased the limit\n. No problem at all. :) And yes seems not to be a behat problem, as i just downgraded my install to 3.0.14 and also the other behat packages and still have the nesting level issue.\n. ",
    "itonics-tbeauvais": "Thank you.  I will notify the developers.\n. ",
    "typhonius": "Thanks for your response. Because everything gets run in a big loop over a bunch of files, we don't know whether a test will have 0 suites or some until we run it.\nI have considered writing a new assertion that just returns true. I could then use this to run everything with --strict and have at least one test suite run.\nI suppose conceptually I am wondering whether running no tests should constitute a test failure.\n. ",
    "diamondsea": "Nervo is correct, the proper order for settings priority should be:\n1. Command Line Options (most specific, overrides all others below)\n2. Environment Variables\n3. Configuration Files\n4. Program Defaults       (least specific, only used if not overridden by one of the above)\n(If you don't believe me, here's a link on AWS describing the same precedence: http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#config-settings-and-precedence and in the Java Spring docs: http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html)\nWe are running a complicated environment at www.DOT.gov (Drupal Multisite with multiple \nstage and test servers, where testing specific sites against specific browsers and tags in different combinations on our local dev machines as well as on our servers).  \nHaving a single YAML file doesn't allow all the combinations of what we need to do (I'm going to submit another issue with suggestions on that).  The only way we've been able to do what we need is using environment variables (set inside scripts, in our case) to control the settings, and to do that we have had to remove all those changing options from our behat.yml file because it overwrites our environment settings.  While this works, it then makes it impossible to run a behat test just from the normal command line because we've had to remove all these settings to get it to work.\nChanging the precedence to the order shown above will provide a more flexible system that can be more easily tailored.\n. How about this to preserve BC but allow the proper precedence in 3.x:\n\nSet an environment variable, BEHAT_ENV_PRECEDENCE=1, that will activate the new behavior.    We're going to be setting environment variables anyway, what's one more if it will make it work?\n\nAdmittedly, it's a hack, but it would allow for BC until the normal precedence (cmd, env, yml, code) becomes the default (in whatever version that ends up being in) and the BEHAT_ENV_PRECEDENCE variable is deprecated/removed, while allowing the additional flexibility of using the environment variables now for those who need it.\n. ",
    "Goutte": "Worth noting : I use Behat 3.0.15.\n. Wait... what ?\nI swear I had a Scenario that did not pass if it was the first scenario of a feature !\nAnd now everything runs smoothly !? Who hacked my computer to fix this !?\nLooks like I jumped the gun, again. Another good example of positive bias, since the above printing feature seemed to confirm the bug I was observing. (which must have been unrelated, then)\nThanks for the support, sorry for the bother, and good job making our lives easier ! ;)\n. ",
    "johnbillion": "I should add that the error doesn't occur if I specify ~2.4 as the behat/behat version.\n. Thanks. Increasing Xdebug's max_nesting_level does indeed fix this issue.\n100 is the default value. If Behat is going to call functions nested more than 100 levels deep then it sounds like a note should be added to the readme.\nAside: 100 levels of nested functions sounds pretty high to me, but I'm far from familiar with Behat's internals.\n. ",
    "redndahead": "Add xdebug.max_nesting_level = 1000 to your php.ini file\n. ",
    "willdurand": "got it as well..\n. @stof you're right, increasing the value \"solves\" the issue. Would be nice to have this somewhere in the doc.\n. ",
    "a2test": "I got similar issue\nBut this error occur when i put my project out side wamp ...\nand in command prompt php app/console server:run\nThis commang gives me message to run project on http://127.0.0.1:8000 and this time below error comes.\nCRITICAL - Uncaught PHP Exception Symfony\\Component\\Debug\\Exception\\FatalErrorException: \"Error: Maximum function nesting level of '100' reached, aborting!\" at D:\\projects\\symfony\\vendor\\composer\\ClassLoader.php line 347\nContext: {\"exception\":\"Object(Symfony\\Component\\Debug\\Exception\\FatalErrorException)\"} \ni have set xdebug.max_nesting_level = 1000 in php.ini but it still show max nesting level 100 reached...Pls. guide...\n. ",
    "ebrahimdunro": "if it can help:\nI had this problem. I increased max_nesting_level too. All of these couldn't fix this problem.\nI had a long feature file which many of first scenarios were commented. I remove all commented scenarios and this problem was fixed.. @stof no. after removing the comments everything runs without problem. . @jakzal I know about traits but now I understand that \"behat\" concatenates all context classes in a suit. wow! \nand Why!?\n`default:\nsuites:\nsomething:\n\n  paths:\n\n    - %paths.base%/tests/Features/Something\n\n  contexts:\n\n    - Anything\\FirstContext\n\n    - Anything\\SecondContext`\n\nwith above config, behat actually make one class which has all of two classes. Also, both first and second context classes have their feature files.. So why it use other classes method?? Could you please introduce me an article ? I couldn't find a good documentation about context, suite, profile. . @ciaranmcnulty you're right. thanks.\nnot only steps, it uses my last context class __construct method for all features and scenarios in the suite. \nThanks. alot . ",
    "wheelsandcogs": "Wow, that was simple, thanks :)\n. ",
    "WorkingDevel": "@stof Good point. Changed it now. Also checking now if ini_set is allowed.\n. ",
    "janipalsamaki": "\nNot being able to run scenarios one at a time\n\nYou could use tags to tag the scenario(s) you want to run and then just: behat --tags=mytag or run a scenario by it's name: behat --name \"The name of my scenario\".\n. Try: behat --tags=\"featureA && regression\"\nEdit: Sorry, misunderstood what you were trying to accomplish here (run all scenarios tagged with \"regression\" if the feature is tagged with \"featureA\". Edited the response.\n. Behat/Mink should handle accent marks fine. This works:\nScenario: Follow a link that contains accent mark\n  Given I am on \"https://es.wikipedia.org/wiki/Wikipedia:Portada\"\n  When I follow \"P\u00e1ginas nuevas\"\n  Then I should be on \"https://es.wikipedia.org/wiki/Especial:P%C3%A1ginasNuevas\"\nThis looks like a custom step definition. Care to share the implementation code for it?\nAnd I should click the header \"C\u00f3mo Funciona\" link\nDoes your scenario work when you run it on command line (without Jenkins)?\n. Maybe has something to do with the encoding settings in Jenkins, then (since the error message contains ?? instead of \u00f3):\nhttp://stackoverflow.com/questions/6076203/how-do-you-set-the-default-encoding-in-jenkins\n. print should work just fine.\nFeatureContext:\npublic static function printDebug($string) {\n  print \"$string\\n\";\n}\nExample output:\n\u250c\u2500 @BeforeSuite # FeatureContext::setupSuite()\n\u2502\n\u2502  Testing\n\u2502  \n\u2502\n. This is one way of forcing the browser language in behat.yml. This works with Behat version 3 and when using a BrowserKitDriver based driver (here we provide headers for Guzzle). In this case, the language is set to Japanese:\nyml\ndefault:\n  suites:\n    default:\n      contexts:\n        - FeatureContext:\n  extensions:\n    Behat\\MinkExtension:\n      goutte:\n        guzzle_parameters:\n          verify: false\n          headers:\n            Accept-Language: ja\n      selenium2:\n        browser: chrome\n      base_url: http://www.example.com/\nWhen using a real browser (such as Chrome), forcing the language usually requires setting up a browser profile and using that. Programmatic header manipulation only works when using a  BrowserKitDriver based driver.\n. Could you elaborate a bit on the use case?\n. Same as #646?\n. You might want to create a simple (shell) script that first checks that Selenium is actually running and only after that runs the tests. Something like this (adapt to your OS, shell, Selenium IP/port etc.):\n``` bash\n!/bin/bash\nnc -z -v -w5 127.0.0.1 4444 > /dev/null 2>&1\nif [ $? -ne 0 ]\nthen\n  echo \"Selenium not running!\"\nelse\n  echo \"Running scenarios...\"\n  behat --format junit --profile=prod --config=behat.yml --out /tmp/build/logs\n  echo \"Done!\"\nfi\n``\n. Works for me usingbehat --tags '~@ignorethis'(behat 3.1.0). Could you share your feature file where you have the scenario(s) tagged?\n. Also, the$password` parameter seems to be unused. Do you need that?\n. ",
    "penyaskito": "I'm a big fan of this feature, thanks for the workaround @janipalsamaki.\nHowever I hope it gets fixed.\n. ",
    "dkinzer": "I'm seeing this locally now as well.  I can only run all tests at once by not specifying paths at all.\n. ",
    "slash3b": "I have the same problem with line number:\n```\ni.tribusean@webdev2 /v/w/h/b/bin> ./behat features/application.feature:13\nNo scenarios\nNo steps\n0m0.29s (32.69Mb)\n[Behat\\Testwork\\Tester\\Exception\\WrongPathsException]                \n  No specifications found at path(s) features/application.feature:13.  \nbehat [-s|--suite SUITE] [-f|--format FORMAT] [-o|--out OUT] [--format-settings FORMAT-SETTINGS] [--init] [--lang LANG] [--name NAME] [--tags TAGS] [--role ROLE] [--story-syntax] [-d|--definitions DEFINITIONS] [--append-snippets] [--no-snippets] [--strict] [--rerun] [--stop-on-failure] [--dry-run] [--] []\ni.tribusean@webdev2 /v/w/h/b/bin> ./behat features/application.feature\n@api\nFeature: Application submission\nScenario: Authenticated user views \"Vacation or day-off request\" page # features/application.feature:5\n    Given I am logged in as a user with the \"authenticated user\" role   # Drupal\\DrupalExtension\\Context\\DrupalContext::assertAuthenticatedByRole()\n    When I follow \"My requests\"                                         # Drupal\\DrupalExtension\\Context\\MinkContext::clickLink()\n    And I follow \"Vacation\"                                             # Drupal\\DrupalExtension\\Context\\MinkContext::clickLink()\n    And I follow \"Create request\"                                       # Drupal\\DrupalExtension\\Context\\MinkContext::clickLink()\n    And I follow \"Vacation or day-off request\"                          # Drupal\\DrupalExtension\\Context\\MinkContext::clickLink()\n    Then I should not see text matching \"{{\"                            # Drupal\\DrupalExtension\\Context\\MinkContext::assertPageNotMatchesText()\nScenario: Authenticated user views with assigned department \"Vacation or day-off request\" page # features/application.feature:13\n    Given I am logged in as a user with the \"authenticated user\" role                            # Drupal\\DrupalExtension\\Context\\DrupalContext::assertAuthenticatedByRole()\n    When I follow \"Edit\"                                                                         # Drupal\\DrupalExtension\\Context\\MinkContext::clickLink()\n    And I follow \"edit-field-department-und\"                                                     # Drupal\\DrupalExtension\\Context\\MinkContext::clickLink()\n      Link with id|title|alt|text \"edit-field-department-und\" not found. (Behat\\Mink\\Exception\\ElementNotFoundException)\n    Then I break                                                                                 # Drupal\\DrupalExtension\\Context\\DrupalContext::iPutABreakpoint()\n    When I press \"Save\"                                                                          # Drupal\\DrupalExtension\\Context\\MinkContext::pressButton()\n    Then I break                                                                                 # Drupal\\DrupalExtension\\Context\\DrupalContext::iPutABreakpoint()\n--- Failed scenarios:\nfeatures/application.feature:13\n\n2 scenarios (1 passed, 1 failed)\n12 steps (8 passed, 1 failed, 3 skipped)\n0m14.01s (35.03Mb)\n```\nThanks to @janipalsamaki for hint.\nMy components:\n```\ni.tribusean@webdev2 /v/w/h/bayer_tests> composer show -i\nYou are running composer with xdebug enabled. This has a major impact on runtime performance. See https://getcomposer.org/xdebug\nbehat/behat                  v3.0.15 Scenario-oriented BDD framework for PHP 5.3\nbehat/gherkin                v4.4.1  Gherkin DSL parser for PHP 5.3\nbehat/mink                   v1.7.0  Browser controller/emulator abstraction for PHP\nbehat/mink-browserkit-driver v1.3.1  Symfony2 BrowserKit driver for Mink framework\nbehat/mink-extension         v2.1.0  Mink extension for Behat\nbehat/mink-goutte-driver     v1.2.0  Goutte driver for Mink framework\nbehat/mink-selenium2-driver  v1.3.0  Selenium2 (WebDriver) driver for Mink framework\nbehat/transliterator         v1.1.0  String transliterator\ndrupal/drupal-driver         v1.1.5  A collection of reusable Drupal drivers\ndrupal/drupal-extension      v3.0.13 Drupal extension for Behat\nfabpot/goutte                v3.1.2  A simple PHP Web Scraper\nguzzlehttp/guzzle            6.1.1   Guzzle is a PHP HTTP client library\nguzzlehttp/promises          1.0.3   Guzzle promises library\nguzzlehttp/psr7              1.2.2   PSR-7 message implementation\ninstaclick/php-webdriver     1.4.3   PHP WebDriver for Selenium 2\npsr/http-message             1.0     Common interface for HTTP messages\nsymfony/browser-kit          v3.0.2  Symfony BrowserKit Component\nsymfony/class-loader         v2.8.2  Symfony ClassLoader Component\nsymfony/config               v2.8.2  Symfony Config Component\nsymfony/console              v2.8.2  Symfony Console Component\nsymfony/css-selector         v2.8.2  Symfony CssSelector Component\nsymfony/dependency-injection v2.8.2  Symfony DependencyInjection Component\nsymfony/dom-crawler          v3.0.2  Symfony DomCrawler Component\nsymfony/event-dispatcher     v2.8.2  Symfony EventDispatcher Component\nsymfony/filesystem           v3.0.2  Symfony Filesystem Component\nsymfony/polyfill-mbstring    v1.1.0  Symfony polyfill for the Mbstring extension\nsymfony/process              v3.0.2  Symfony Process Component\nsymfony/translation          v2.8.2  Symfony Translation Component\nsymfony/yaml                 v2.8.2  Symfony Yaml Component\n```\n. @ciaranmcnulty  thanks for notice. The scenario is indeed in line 12,  but it still fails on the line 12.\n. @jakubzapletal thank you, you are right the line with \"And I follow \"edit-field-department-und\" is not correct. Ok, but the first scenario is fine and I did test it one more time (other scenarios were deleted) and still have the same .\nha, @stof is right, the scenario is on the 13-th line, on the first line of application.feature file I have #  language: en, which is not visible in the output. Sorry, completely forgot about that.\n. ",
    "jakubzapletal": "@slash3b It says that the scenario defined on line 13 has failed and that is because of this step And I follow \"edit-field-department-und\"                                                     # Drupal\\DrupalExtension\\Context\\MinkContext::clickLink()\n      Link with id|title|alt|text \"edit-field-department-und\" not found. (Behat\\Mink\\Exception\\ElementNotFoundException)\nThe report is OK, it explicitly says which scenario (with the line of scenario definition) has failed.\n. Hi @rajeshtaneja, I understand that you're trying to solve a technical problem there but @everzet is right about your feature. \nThere is a lot of what could be said and I'll try to say few simple tips:\na) The optimal number of steps for a scenario is 3 (given, when, then) so 12-times more can not be the best approach. Your example looks like a sequence of commands instead of revealing feature behaviour. I think it must be hard to find key steps there. Try to focus what is important for the feature.\nb) Acceptance tests should cover only crucial parts of your application. I believe you could decrease an amount of examples on 1-2 and the rest of edge cases could go to lower testing layers (unit tests).\nAlthough making the testing tool faster is one option, a focus on proper features would be more efficient for now and the future. For example: 2 scenarios with 7 steps per each and 2 examples would mean 2 * 7 * 2 = 28, that would be an improvement of performance by 96%.\n. Would you consider to not keep features in DB? One of the points of feature files is a living documentation following the code. Keeping the features in DB means that it is out of version control of the code, and, if I understand properly, it is managed by another system, in that case by some front-end CMS.\n. Could you please clarify a use case when 2 developers are working on\ndifferent branches and features? Where do they get the data with features?\nDo they have same features or different ones? How would you run CI?\nGenerally I wonder how would the agile development process look like.\nOn Thu, 7 Apr 2016, 15:19 Ariel Zamparini, notifications@github.com wrote:\n\nYes you are correct, I will not fight you there. My main use case for the\nfront-end is to be able to have a team that does not have code base access\nto create, write and manipulate these test cases (a mix of business\nanalysts, quality assurance, frontend and backend developers). We can have\nthe ultimate goal being that we commit the correct test cases to code but\nhaving a whole team try and install all the required binaries and libraries\ncorrectly seemed like a more daunting task vs having them just use a\nwebsite. The site in question has a built in syntax helper, allows the user\nto fill in the user stories and tracks pass/fail rates.\nBehat has been monumental in accomplishing this with how great everything\nworks but it was becoming cumbersome to herd files all the time, or to\ninvoke behat using execs().\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/Behat/Behat/issues/873#issuecomment-206927291\n. By the use case I mean if you have a repository with the main app, where do\nyou have your data related to the new branch? Do you have one central DB\nfor all developers and whole development process or do you somehow verse\nyour data with each branch?\n\nOn Thu, 7 Apr 2016, 20:26 Ariel Zamparini, notifications@github.com wrote:\n\nWe have a simplified Agile process (stand-ups, scrums, sprints, etc) and\nuser stories are directly available in ticket tracking. Currently our issue\nis vastly different development systems... some users have virtual\nmachines, some have mamp, some have wamp. Rather than put the development\nteam on creating installation scripts and debug vastly different\narchitectures we decided to build an app using the fabulous features of\nbehat. You can extend it greatly with selenium automation, unit testing\nframeworks and all kinds of tools. Our eventual goal is to have jenkins\n(along with the jenkins pipeline plugins) run our CI process for us do\ntests before builds. At this point we have not reached these goals. We are\nin the process of getting people used to gherkin formatting and behat\nsyntax, this is mainly part of adoption.\nThe webapp we built helps greatly with this in creating the tests\nthemselves. They can be easily exported and stamped out to version control\nto eventually become part of the process. The webapp can then simply\nreceive jenkins callbacks to run the full suite of tools.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/Behat/Behat/issues/873#issuecomment-207057650\n. \n",
    "manojtr": "This links give 404\n. ",
    "sobi3ch": "So why this is in instructions are here on Behat page?? http://docs.behat.org/en/v2.5/cookbook/behat_and_mink.html#method-2-phar\n. ",
    "chrismacp": "Check your PHP error log, I had a similar issue and it was because of xDebug's 'xdebug.max_nesting_level' not being set to a high enough number by default.\n. ",
    "Chekote": "@stof Where would be the best place for me to discuss this concept? I'm not getting any response here or on Behat Gitter.\n. Thank you so much for your feedback, I really appreciate it. I knew you wouldn't like the idea XD.\nI agree with you completely that from the perspective of Behat core, using the keyword to determine the behavior is definitely wrong. But in our particular project, it isn't because by convention we only use Then for assertions.\nAnother convention that we use in our tests is to use assertions to ensure a valid state is achieved before  attempting to interact with the system. For example, given your example of \"When I click on the button\", a previous step would already have asserted that there is a button. But I do definitely see a benefit of having the \"When I click on the button\" spin without the assertion step being necessary, as it'll make the scenario less verbose.\nYou make a good point about the exception types. I'll definitely need to address that.\n. Yes, I definitely agree that ideally you should compose rather than extend, but I have a specific use case where I\u2019m refactoring a framework to do just that, and not being able to resolve via polymorphism is making that tough. Of course if this is not accepted, I can just use a temporary fork.\nRegarding the problem of multiple extending contexts, it wouldn\u2019t be a issue. I\u2019d be asking for a MyContext. If there were multiple contexts that were a MyContext, any of them would suffice.. @Taluu So I have a concrete example of why I'm doing this, and I'm wondering if there's another solution since this approach looks like it won't be approved:\nWe're using MinkContext but we need to enhance the behavior of some of the Behat steps. Specifically the concept of visibility. MinkContext considers text visible if it is in the DOM, but our extending class only considers it visible if it is within the browser's viewport, and not obscured by any other element.\nOur current approach is to extend MinkContext, override the methods, and then register our extending context instead of the base MinkContext class.\nThe problem arises from the fact that we need to modify an existing Behat step. If I was to write a context class that does not extend MinkContext but attempts to implement a step with the same pattern, Behat is going to complain that there is ambiguity when both contexts are registered.\nThe only other approach I can think of is to NOT register MinkContext, and instead re-implement all of the method signatures in my own context class, and have it call an internal instance of MinkContext that is not registered with the Behat environment. But that just feels wrong.\nDo you have any suggestions on how to effectively override a small subset of the MinkContext methods if we shouldn't use inheritance?. Yes, that's exactly the scenario. The extending context that fixes the visibility checks of mink is in a separate composer package. The projects that leverage the functionality are coded against Mink. To utilize the fixes with this PR in place, the projects require the package and swap out the MinkContext for the extending context in the behat.yml. All of the existing code that tries to get access to MinkContext still works because the extending context \"is-a\" MinkContext.\nIt is possible to utilize the package without this PR, but then you need to tightly couple your other contexts against the extending context. You could argue that that's more appropriate because if you're coding against MinkContext, then you're coding against what it considers visible, and if you want some other behavior, you should code against that context instead.. I'm going to close this in favor of refactoring the inheritance to use composition as you suggested. Thanks so much for helping me reason this out, I really appreciate your assistance.. ",
    "unkind": "@nchagrass I think that PR is not related to this issue.\nThis issue is more general, by the way: column names in TableNode object are truncated, i.e. I receive node with \"locatio\" column name.\n. Ah, I didn't add \"|\" as a right border. It would be better to show error message.\n. ",
    "iongion": "But then the assert functions cannot be found:\n```\n<?php\nuse Behat\\Behat\\Context\\ClosuredContextInterface,\n    Behat\\Behat\\Context\\TranslatedContextInterface,\n    Behat\\Behat\\Context\\BehatContext,\n    Behat\\Behat\\Exception\\PendingException;\nuse Behat\\Gherkin\\Node\\PyStringNode,\n    Behat\\Gherkin\\Node\\TableNode;\n//\n// Require 3rd-party libraries here:\n//\n//   require_once 'PHPUnit/Autoload.php';\n//   require_once 'PHPUnit/Framework/Assert/Functions.php';\n//\n/\n * Features context.\n */\nclass FeatureContext extends BehatContext\n{\n    /\n     * Initializes context.\n     * Every scenario gets it's own context object.\n     \n     * @param array $parameters context parameters (set them up through behat.yml)\n     /\n    public function __construct(array $parameters)\n    {\n        // Initialize your context here\n    }\n/**\n * @Given /^I am in a directory \"([^\"]*)\"$/\n */\npublic function iAmInADirectory($arg1)\n{\n  assertEquals(2, \"2\", 'they are not equal');\n}\n\n/**\n * @Given /^I have a file named \"([^\"]*)\"$/\n */\npublic function iHaveAFileNamed($arg1)\n{\n}\n\n/**\n * @When /^I run \"([^\"]*)\"$/\n */\npublic function iRun($arg1)\n{\n}\n\n/**\n * @Then /^I should get:$/\n */\npublic function iShouldGet(PyStringNode $string)\n{\n}\n\n}\n```\nafter running bin/behat\n```\nFeature: ls\n  In order to see the directory structure\n  As a UNIX user\n  I need to be able to list the current directory's contents\nScenario: List 2 files in a directory # features\\ls.feature:7\nPHP Fatal error:  Call to undefined function assertEquals() in W:\\Workspace\\api\\features\\bootstrap\\FeatureContext.php on line 38\nPHP Stack trace:\nPHP   1. {main}() W:\\Workspace\\api\\vendor\\behat\\behat\\bin\\behat:0\nPHP   2. Symfony\\Component\\Console\\Application->run() W:\\Workspace\\api\\vendor\\behat\\behat\\bin\\behat:32\nPHP   3. Behat\\Behat\\Console\\BehatApplication->doRun() W:\\Workspace\\api\\vendor\\symfony\\console\\Symfony\\Component\\Console\\Application.php:126\nPHP   4. Symfony\\Component\\Console\\Application->doRun() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Console\\BehatApplication.php:68\nPHP   5. Symfony\\Component\\Console\\Application->doRunCommand() W:\\Workspace\\api\\vendor\\symfony\\console\\Symfony\\Component\\Console\\Application.php:195\nPHP   6. Symfony\\Component\\Console\\Command\\Command->run() W:\\Workspace\\api\\vendor\\symfony\\console\\Symfony\\Component\\Console\\Application.php:874\nPHP   7. Behat\\Behat\\Console\\Command\\BehatCommand->execute() W:\\Workspace\\api\\vendor\\symfony\\console\\Symfony\\Component\\Console\\Command\\Command.php:257\nPHP   8. Behat\\Behat\\Console\\Command\\BehatCommand->runFeatures() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Console\\Command\\BehatCommand.php:128\nPHP   9. Behat\\Gherkin\\Node\\AbstractNode->accept() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Console\\Command\\BehatCommand.php:150\nPHP  10. Behat\\Behat\\Tester\\FeatureTester->visit() W:\\Workspace\\api\\vendor\\behat\\gherkin\\src\\Behat\\Gherkin\\Node\\AbstractNode.php:42\nPHP  11. Behat\\Gherkin\\Node\\AbstractNode->accept() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Tester\\FeatureTester.php:88\nPHP  12. Behat\\Behat\\Tester\\ScenarioTester->visit() W:\\Workspace\\api\\vendor\\behat\\gherkin\\src\\Behat\\Gherkin\\Node\\AbstractNode.php:42\nPHP  13. Behat\\Behat\\Tester\\ScenarioTester->visitStep() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Tester\\ScenarioTester.php:87\nPHP  14. Behat\\Gherkin\\Node\\AbstractNode->accept() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Tester\\ScenarioTester.php:148\nPHP  15. Behat\\Behat\\Tester\\StepTester->visit() W:\\Workspace\\api\\vendor\\behat\\gherkin\\src\\Behat\\Gherkin\\Node\\AbstractNode.php:42\nPHP  16. Behat\\Behat\\Tester\\StepTester->executeStep() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Tester\\StepTester.php:95\nPHP  17. Behat\\Behat\\Tester\\StepTester->executeStepDefinition() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Tester\\StepTester.php:126\nPHP  18. Behat\\Behat\\Definition\\Annotation\\Definition->run() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Tester\\StepTester.php:157\nPHP  19. call_user_func_array:{W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Definition\\Annotation\\Definition.php:155}() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Definition\\Annotation\\Definition.php:155\nPHP  20. FeatureContext->iAmInADirectory() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Definition\\Annotation\\Definition.php:155\nFatal error: Call to undefined function assertEquals() in W:\\Workspace\\api\\features\\bootstrap\\FeatureContext.php on line 38\nCall Stack:\n    0.0002     646712   1. {main}() W:\\Workspace\\api\\vendor\\behat\\behat\\bin\\behat:0\n    0.0144    2981320   2. Symfony\\Component\\Console\\Application->run() W:\\Workspace\\api\\vendor\\behat\\behat\\bin\\behat:32\n    0.0188    3550616   3. Behat\\Behat\\Console\\BehatApplication->doRun() W:\\Workspace\\api\\vendor\\symfony\\console\\Symfony\\Component\\Console\\Application.php:126\n    0.1825   10778248   4. Symfony\\Component\\Console\\Application->doRun() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Console\\BehatApplication.php:68\n    0.1828   10778328   5. Symfony\\Component\\Console\\Application->doRunCommand() W:\\Workspace\\api\\vendor\\symfony\\console\\Symfony\\Component\\Console\\Application.php:195\n    0.1828   10778488   6. Symfony\\Component\\Console\\Command\\Command->run() W:\\Workspace\\api\\vendor\\symfony\\console\\Symfony\\Component\\Console\\Application.php:874\n    0.2250   13141400   7. Behat\\Behat\\Console\\Command\\BehatCommand->execute() W:\\Workspace\\api\\vendor\\symfony\\console\\Symfony\\Component\\Console\\Command\\Command.php:257\n    0.2255   13156328   8. Behat\\Behat\\Console\\Command\\BehatCommand->runFeatures() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Console\\Command\\BehatCommand.php:128\n    0.2382   13514096   9. Behat\\Gherkin\\Node\\AbstractNode->accept() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Console\\Command\\BehatCommand.php:150\n    0.2382   13514096  10. Behat\\Behat\\Tester\\FeatureTester->visit() W:\\Workspace\\api\\vendor\\behat\\gherkin\\src\\Behat\\Gherkin\\Node\\AbstractNode.php:42\n    0.2411   13627080  11. Behat\\Gherkin\\Node\\AbstractNode->accept() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Tester\\FeatureTester.php:88\n    0.2411   13627080  12. Behat\\Behat\\Tester\\ScenarioTester->visit() W:\\Workspace\\api\\vendor\\behat\\gherkin\\src\\Behat\\Gherkin\\Node\\AbstractNode.php:42\n    0.2425   13655200  13. Behat\\Behat\\Tester\\ScenarioTester->visitStep() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Tester\\ScenarioTester.php:87\n    0.2433   13715192  14. Behat\\Gherkin\\Node\\AbstractNode->accept() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Tester\\ScenarioTester.php:148\n    0.2433   13715192  15. Behat\\Behat\\Tester\\StepTester->visit() W:\\Workspace\\api\\vendor\\behat\\gherkin\\src\\Behat\\Gherkin\\Node\\AbstractNode.php:42\n    0.2434   13715576  16. Behat\\Behat\\Tester\\StepTester->executeStep() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Tester\\StepTester.php:95\n    0.2454   13844120  17. Behat\\Behat\\Tester\\StepTester->executeStepDefinition() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Tester\\StepTester.php:126\n    0.2454   13844120  18. Behat\\Behat\\Definition\\Annotation\\Definition->run() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Tester\\StepTester.php:157\n    0.2454   13845032  19. call_user_func_array:{W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Definition\\Annotation\\Definition.php:155}() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Definition\\Annotation\\Definition.php:155\n    0.2454   13845352  20. FeatureContext->iAmInADirectory() W:\\Workspace\\api\\vendor\\behat\\behat\\src\\Behat\\Behat\\Definition\\Annotation\\Definition.php:155\n```\n. Found a way to make it work on some obscure thread\nuse PHPUnit_Framework_Assert as Assert;\n// then you can use assertions as static methods of Assert, I would still prefer globals\nAssert::assertEquals(2, \"2\", \"strange equality\")\n. Indeed, but got confused by those two comments that are auto-generated by Behat\n. Closing it as is not a Behat issue itself, but it can appear for beginner Behat users as me, there are at least two ways of working with PHPUnit as explained above by @stof and myself. Hopefully all this thread will help others that might encounter the non-issue.\n. @stof When i started using Behat, I followed the available info on the \ndocumentation page, the sections is basically:\n{\n    \"require\": {\n        \"behat/behat\": \"2.4.*@stable\"\n    }\n}\nMaybe this should be updated, the docs, by default the site opens at\nhttp://docs.behat.org/en/v2.5\n. ",
    "sherakama": "The FOLLOW_SYMLINKS is needed to even find the .feature files. The following PR fixes that.\nhttps://github.com/Behat/Behat/pull/823\nI also had to add the path, even outside of the project, to the suite paths configuration for the end result of the symbolic link as the internal filter would strip out any scenarios that did not originate from one of the base paths.\n. @sroze,\nThanks for reviewing this. I have restored the original formatting. It was easier to debug when I had them separated out in to separate variables. I agree, we don't need them.\n. Thanks!\n. ",
    "bpaz": "After some hours of debug, on the GroupSpecificationIterator, If I check if the position exists with isset in the $iterators array in works fine.\n``` php\nif (isset($this->iterators[$this->position])) {\n            $this->iterators[$this->position]->next();\n            while (!$this->iterators[$this->position]->valid()) {\n                $this->position++;\n            if (!isset($this->iterators[$this->position])) {\n                break;\n            }\n\n            $this->iterators[$this->position]->rewind();\n        }\n    }\n\n```\nMy behat version is 3.0.15\n. any news about this? I can only test 200 OK api responses for now. Tried with dev-master and also with the latest versions of mink and browerkit and its the same problem\n. ",
    "theofidry": "Ush I figured as much, I guess it ain't worth it :( Thanks for your answer.\n. ",
    "cxm0000": "Hi, I use a lot of pageObjects and contexts in our project too thus facing the same issue here.\nWhat I am hoping to happen in Behat 3.x is the ability to inherit contexts from the default suite in the default profile. \n```\ndefault:\n    suite:\n        default\n            contexts:\n                - context_1\n                - context_2\nfoo:\n    suite:\n        default:\n            contexts:\n                - context_foo\nbar:\n    suite:\n        default:\n            contexts:\n                - context_bar\n```\nSo when I run the tests with either the profile \"foo\" or \"bar\", since they also have a suite called \"default\" just like the name in the default profile, I would like them to be able to use \"context_1\" and \"context_2\" from the default profile. This way it will ease the maintenance by adding new common context files in just one place (in the default suite) and at the same time let different profiles have their own context files different from profile to profile.\nWhat do you guys think? Is this useful to have? Thanks!\n. ",
    "TheilPetersen": "I have the exact same issue and would like to see the implementation of a profile array possibility. The format bin/behat -p mysite,saucelabs,quicktests seems quite natural to me.\n. ",
    "JordiGiros": "I agree with all of you guys. Same problem here...\n. ",
    "aman4you": "I save screenshot after step fail in directory and providing the screenshot directory path in formatter parameter output_path. When i have more than one directory of feature files than may be i need to create more than one screenshot directory. But output_path is fixed, i need to change output path to save scrrenshot in different directories.\n. I mean to say every time i run fetures directory, the previous output is overwrite because output_path is fixed. I can change output_path manually before features execution but create directory manually than change output_path with created directory takes time. It will be better if directory create by php with different name(like date) and output_path update automatically with created directory for all feature files. Plz help\n. Thanks \n. ",
    "bt-eric": "Not sure of the best way to handle deprecated functions that get injected from a config file while still maintaining backwards compatibility. In the meantime, pull request #749 fixes the warning from getSynopsis.\n. Thanks @weaverryan, I fixed incorrect formatting in the behat.xml config file and now the tests are passing for me locally. On travis, it fails when the Symfony version is between 2.0. to 2.2.. It passes for Symfony version 2.3.*. The setFallbackLocales method was added in v2.3.0.\n. ",
    "watermanio": "Hey, I had this issue too and thought that looks like it's worth fixing (PR attached). However it broke a test around the use of environment variables - I'm not sure fully what the impact is if others could take a look please?\n. ",
    "tscheepers": "@stof done :-)\n. ",
    "ademarco": "It works fine for me too, thanks to this patch we can now run Phing BehatTask successfully! :+1: \n. ",
    "gboddin": "+1 for POSIX long options compliance !\n. ",
    "sandervd": ":thumbsup: thanks @pfrenssen!\n. ",
    "Deroin": "You should put the parameters with default values to the end of the method declaration. In order to call your method, both parameters have to be set since the second one does not have a default value. This call would be invalid:\nphp\n$tableNode = new TableNode([]);\n$this->lancoUmaFichaDeAtendimentoComDados($tableNode);\nBehat does not parse and include default values but lets PHP handle this on it's own. When you write \nphp\npublic function lancoUmaFichaDeAtendimentoComDados(TableNode $oDados, $encaminhamento = '') {\nThe call above is valid and the method can be called through your definition.\n. An exception is the wrong thing to use in this case as showing the file path is expected behavior.\nYou can use a Logger that prints text to the console or a log file. I am using Monolog for this which makes it pretty simple. Just initialize the logger object and then call something like\n$log->debug(sprintf('Sceenshot saved to: %s', $filePath));\n. Even when UndefinedStepResult has this method implemented there are other possible returned classes of getTestResult(). So if you want to be on the safe side you would need to extend the TestResult interface and thus extend all implementing classes. Since ExecutedStepResult is the only child class of TestResult which makes actual use of getCallResult() this would be bad practice. I would suggest you to simply check the class of your test result like this:\n$result = $scope->getTestResult();\nif ($result instanceof ExecutedStepResult) {\n    $callResult = $result->getCallResult();\n    $returnObj = $callResult->getReturn();\n}\nIn this way for every successfully executed step you will get the return value and you can handle it in whatever way you want and for all other steps you do nothing (or maybe something defined in an else part)\n. The interface does not specify getTestResult() for a very good reason. If the test has not been executed, then there is no result of the execution. So what should getTestResult() return in case a test is skipped or undefined?\n. ",
    "Merenptah": "I'm sorry, I should have been more precise. \nI have the following use case. I have the function\nphp\n/**\n * @Given the person:\n * @params $entity\n */\npublic function givenTheEntity(array $entity) {\n   // something happens\n}\nbut I need this not only for \"person\", but also for some other things. The array gets in by a cast. But the function itself is always the same. I did not want to use something like \"@Given the [^:]+:\", because this is too general. Hence the idea to use \"@Given the (?:person|somethingother|somethingelse):\". I could not get this to work with a catching group (and I actually also do not want to get it to work with this), because of the already present input parameter.\nBut jakzal already answered my question, thanks for that.\n. ",
    "Jodes81": "I presume I'm using Behat version 2.4.* - When I run Behat --version, it returns Behat version DEV (Which I don't understand) but my composer.json is as follows:\njson\n{\n    \"require\": {\n        \"behat/behat\": \"2.4.*@stable\",\n        \"behat/mink\": \"1.4.*@stable\",\n        \"behat/mink-extension\": \"*\",\n        \"behat/mink-goutte-driver\": \"*\",\n        \"behat/mink-selenium2-driver\": \"*\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"config\": {\n        \"bin-dir\": \"bin/\"\n    }\n}\nWhen I run composer show symfony/console -i I get the following:\n```\nname     : symfony/console\ndescrip. : Symfony Console Component\nkeywords :\nversions : * 2.8.x-dev\ntype     : library\nlicense  : MIT License (MIT) (OSI approved) https://spdx.org/licenses/MIT.html#licenseText\nsource   : [git] https://github.com/symfony/Console.git 575782770a015042d2fe34f1388d5073bde784bd\ndist     : [zip] https://api.github.com/repos/symfony/Console/zipball/575782770a015042d2fe34f1388d5073bde784bd 575782770a015042d2fe34f1388d5073bde784bd\nnames    : symfony/console\nautoload\npsr-4\nSymfony\\Component\\Console\\ => .\nrequires\nphp >=5.3.9\nrequires (dev)\npsr/log ~1.0\nsymfony/event-dispatcher ~2.1|~3.0.0\nsymfony/phpunit-bridge ~2.7|~3.0.0\nsymfony/process ~2.1|~3.0.0\nsuggests\npsr/log For using the console logger\nsymfony/event-dispatcher\nsymfony/process\n``\n. Apologies, I missed that. However, when I removeminimum-stability: dev, deletecomposer.lock, runcomposer installandbehat --versionI still getBehat version DEV` (and the PHP strict standards message). Is this the likely cause of the PHP strict messages?\n. ",
    "nicolas-grekas": "Given that the issue disappears as soon as an error handler is registered (yes, its strange... http://3v4l.org/kfu8v)\nI'd say behat should just register some error handler to fix the issue.\n. ",
    "bailey86": "Not tested yet - but I think this is because I didn't have the package php5-curl installed.  (I had curl installed but no php5-curl).\nIt may be an idea to check if required PHP modules are installed at some point during the setup/running of Behat.\n. ",
    "MartijnBraam": "That doesn't change the result.\nAfter some testing I noticed that the transform is working inside tables. It's specifically the scenario outline that causes this.\n. I'm using behat with the drupal-extension. This is a working scenario:\ngherkin\n  @api\n  Scenario: Test the date status\n    Given I am viewing a \"Dossier\":\n      | title          | Test dossier         |\n      | field_stage    | Request acknowledged |\n      | field_due_date | 3 workdays ago       |\nthe 3 workdays ago is replaced with a datetime object.\nIf I change the Scenario to a Scenario Outline and fill the field_due_date with a placeholder then it stops working\n. @everzet I no longer have access to the codebase that has the bug. Maybe @clemens-tolboom can test it.\n. ",
    "kerasai": "Using the @Transform tag does not seem to be working for me to operate on values in tables. I have not attempted this with an examples table for a scenario outline.\nEdit: This does work for \"standard\" string type arguments. Have not looked a PyStringNode case yet.\nphp\n  /**\n   * Tokenize parameters.\n   *\n   * @Transform /(.*)/\n   *\n   * @param string $param\n   *   The parameter before tokenization.\n   *\n   * @return string\n   *   The tokenized parameter.\n   */\n  public function tokenize($param) {\n    return strtr($param, $this->tokens);\n  }\nI understand that this is not exactly how this was intended to be done, but it seems reasonable. Any thoughts or tips?\n. @wcjr as far as I know, it's just not possible to make the transform TableNode or PyStringNode arguments.\nI forget exactly what I did, can't find the code, but somehow I was able to hook into Behat and alter the arguments before it sent them thru to the context that analyzes the step. That's where I applied the replacement.. ",
    "ppaulis": "@everzet I reproduced this using v3.1.0. For testing purposes, I tried to transform (true|false) into a boolean.\n. ",
    "wcjr": "@everzet @kerasai , is there already an issue opened for tables?\nI'm using ^3.3.0 and my transforms are not running on tables.. ok, that sounds really good if you happen to find it, please pass along.  For now, I'm just going to have to do this in the TableNode loop:\nprivate function transformNULLs($value)\n    {\n        return ($value === \"NULL\") ? NULL : $value;\n    }\nIt's getting the job done but obviously not very elegant.. ",
    "zazoomauro": "Locally (from command line) works fine and from the jenkins box command line works fine aswell\nSent from my iPhone\n\nOn 20 Aug 2015, at 11:40, janipalsamaki notifications@github.com wrote:\nBehat/Mink should handle accent marks fine. This works:\nScenario: Follow a link that contains accent mark\n  Given I am on \"https://es.wikipedia.org/wiki/Wikipedia:Portada\"\n  When I follow \"P\u00e1ginas nuevas\"\n  Then I should be on \"https://es.wikipedia.org/wiki/Especial:P%C3%A1ginasNuevas\"\nThis looks like a custom step definition. Care to share the implementation code for it?\nAnd I should click the header \"C\u00f3mo Funciona\" link\nDoes this scenario work when you run it on command line (without Jenkins)?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "Sam-Burns": "@ciaranmcnulty The array is getting 670 strings in our use case (i.e. no. of step definitions).  The strings are regexs made out of Gerkin sentence fragments here, so memory usage went up 202kB in our case.\n. @stof You\u2019re right, the class is shared across suites/contexts, but Behat\\Behat\\Definition\\Search\\RepositorySearchEngine::searchDefinition() is only calling TurnipPatternPolicy::transformPatternToRegex() once per available step definition (for the given suite).  It\u2019s doing this to decide which step definition to use.\nThe implications of this are that there are no performance issues for 'nice' test codebases, which use lots of small context classes, most of which aren't used in most suites.  It's only if you have a single context class with 60 traits being included that you start to run into problems.\n. @stof Regarding profiling data, I can\u2019t run it for the full suite, because Blackfire times out after about 15 minutes for CLI jobs.  (Seriously, this test suite\u2026 sigh)  The attached data came from running Behat over a single tag with ~300 steps executing.  Inclusive CPU time drops from about a minute and a half to about 6 seconds.  The method was executed ~180k times in this subset of our tests.\n\n. Yes, although I'm not sure it's very useful to use the flag when running a single test.  In principle, it should just provide the user with the information; but the information is most useful when running all the tests.  It's also useful during a dry run for very large test suites, I think.\n. Excellent :-) Thank you!\n. @Dyktus Any thoughts on this idea? https://github.com/Sam-Burns/behat-context-file-usage.git\n. @Dyktus The extension doesn't behave differently depending on how Behat is run at present.  If you would like to request such a feature, maybe raise an issue against the extension?\nhttps://github.com/Sam-Burns/behat-context-file-usage/issues/new\nOn that note, I'd suggest that this issue on behat/behat should be closed, unless there is any disagreement?\n. Ref https://github.com/Behat/Behat/pull/822\n. @rajeshtaneja Behat 3.0 will always work for PHP 5.3 and up - no need to worry about that.  You can even pin your repo to 3.*.* and run Composer using any given PHP version - it will install 3.0.x when run in PHP 5.4 and 3.1.x when run in PHP 7.  There is no need for you to have two different test suites.\nThe two arguments here are about responsibility and the internal codebase.  First, we should be encouraging users relying on obsolete versions of PHP with no security support to upgrade, and other major projects like Symfony, PHPUnit, Zend etc. are trying to show leadership in encouraging users (and therefore their hosting services) to upgrade.  Secondly, writing the codebase in PHP 5.3 is becoming annoying, and we've seen builds being broken because of use of short array syntax years after it was invented.\n3.0 will continue to work in PHP 5.4 forever - just carry on using the version you're using until you can upgrade.  But at some point we have to drop support for obsolete language versions, and 18 months after security support for 5.4 ended is already a little too late IMO.\n. @ciaranmcnulty Don't object to you bumping the major version number instead of the minor version, but I don't think that's really necessary, and I know that isn't how Sensiolabs like to do things.\nTo be responsible, support for PHP 5.3 should have been dropped in the summer of '14, so I wouldn't delay any longer.  Also, regarding advertising the tool on Packagist as 'Scenario-oriented BDD framework for PHP 5.3', I think more could be done to make it sound contemporary and relevant in a PHP 7 world.\n. Thanks @Taluu. Together, we can end PHP 5 in our lifetime ;-)\n. It's not uncommon to tag scenarios with an annotation like @wip (i.e. 'work in progress'), and exclude these in your Behat configuration under suite/[suite name]/filter, if that helps. ",
    "roycollings": "I know this is closed, but I'm not sure why you think this is 'extremely complex' or that he's 'hacking Behat event system'?\n$scope->getScenario()->getTitle()\n... is the standard way to get the title of the scenario and it works for a 'scenario', but for a 'scenario outline' it gives the field being substituted instead. \nI'm having the same issue trying to create a runtime report file and this looks 100% like a bug in the Behat hook system to me?\n. ",
    "tikolakin": "So, is there a way to get ScenarioOutline title ?. Hi there, \na folder exists but can't get the output path working\n```\nvagrant@dev:/srv/site$ mkdir log\nvagrant@dev:/srv/site$ ls -al\ntotal 300\ndrwxr-xr-x  27 apache games    918 Aug  2  2016 .\ndrwxr-xr-x. 15 root   root    4096 Jul 20 15:33 ..\n-rwxr-xr-x   1 apache games    311 Aug  1 13:31 behat\n-rw-r--r--   1 apache games  21896 Aug  1 15:43 behat.yml\ndrwxrwxr-x  17 apache games    578 Jul 30 12:15 bin\n-rw-r--r--   1 apache games   2093 Aug  1 13:44 composer.json\n-rw-r--r--   1 apache games 174392 Aug  1 13:44 composer.lock\n-rw-r--r--   1 apache games     79 Jul 20 08:27 Gemfile\ndrwxr-xr-x  16 apache games    544 Aug  1 16:00 .git\ndrwxr-xr-x   3 apache games    102 Jul 22 16:28 .github\n-rw-r--r--   1 apache games    787 Jul 22 16:28 .gitignore\n-rw-r--r--   1 apache games   6411 Jul 29 02:17 gulpfile.js\ndrwxr-xr-x   9 apache games    306 Aug  1 17:56 .idea\n-rw-r--r--   1 apache games     87 Jul 22 16:28 .jscsrc\ndrwxrwxr-x   2 apache games     68 Aug  2  2016 log\n-rw-r--r--   1 apache games   1493 Aug  1 11:58 package.json\ndrwxr-xr-x   5 apache games    170 Jul 22 16:28 packaging\n-rw-r--r--   1 apache games    486 Jul 22 16:28 pdepend.xml\n-rw-r--r--   1 apache games   2538 Jul 22 16:28 phpunit.xml\ndrwxr-xr-x  15 apache games    510 Jul 22 16:28 public\n-rw-r--r--   1 apache games    188 Jul 22 16:28 Rakefile\n-rw-r--r--   1 apache games    545 Jul 22 16:28 README.md\ndrwxr-xr-x   3 apache games    102 Jul 22 16:28 res\ndrwxr-xr-x   3 apache games    102 Jul 22 17:21 results\ndrwxr-xr-x  14 apache games    476 Jul 22 16:53 tasks\ndrwxr-xr-x   5 apache games    170 Jul 22 16:28 tests\ndrwxrwxr-x  41 apache games   1394 Jul 31 18:58 vendor\nvagrant@dev:/srv/site$ bin/behat -f pretty -o log/\n[Behat\\Testwork\\Output\\Exception\\BadOutputPathException]\n  Filename expected as output_path parameter, but got /srv/site/log.\nbehat [-s|--suite SUITE] [-f|--format FORMAT] [-o|--out OUT] [--format-settings FORMAT-SETTINGS] [--init] [--lang LANG] [--name NAME] [--tags TAGS] [--role ROLE] [--story-syntax] [-d|--definitions DEFINITIONS] [--append-snippets] [--no-snippets] [--strict] [--rerun] [--stop-on-failure] [--dry-run] [--] []\nvagrant@dev:/srv/site$ touch log/outputfile.log\nvagrant@dev:/srv/site$ bin/behat -f pretty -o log/outputfile.log\n[Behat\\Testwork\\Output\\Exception\\BadOutputPathException]\n  The argument to output is expected to the a directory, but got /srv/site/log/outputfile.log!\nbehat [-s|--suite SUITE] [-f|--format FORMAT] [-o|--out OUT] [--format-settings FORMAT-SETTINGS] [--init] [--lang LANG] [--name NAME] [--tags TAGS] [--role ROLE] [--story-syntax] [-d|--definitions DEFINITIONS] [--append-snippets] [--no-snippets] [--strict] [--rerun] [--stop-on-failure] [--dry-run] [--] []\nvagrant@dev:/srv/site$\n``\n. Not sure, but it seems the second time the new feature is introduced in such way. I like it.\nit's a good addition to helpers. Behat becomes a better ecosystem to develop in comparison to rest of bdd frameworks \ud83e\udd47 . duplication of #915. we could do it, but we do not generate suites.\nour solution is very simple - we parse./features` then behat executes a single feature\nbased on behat config - all report files are placed in the same folder - and it's a thing we want to improve . so, at the time being, we do create a separate folder for each xml file\nto do this we have to manage it with BEHAT_PARAMS, where we provide a report path \nI would like to not do it as it's now more complicated with another xml reporter\nBuild number doesn't solve it, as single build has xml report per feature file\n\nit will litter the report directory\n\npeople can clean report folder programmatically if they want (mostly issue with local execution)\nbut ok on CI. well, when you run test on local you usually do not need xml reporter))\nit's only valuable on CI when we have separate work directory for each build \nreport folder should not be trash). hi, @everzet @stof \nare you guys available to give a feedback on the above? \nThanks :1st_place_medal: . ",
    "wundo": "hmm we should update the documentation then.\n. ",
    "garyrutland": "Would it be worth updating your documentation then?\nhttp://behat.readthedocs.org/en/v3.0/guides/7.run.html#format-options\nAs far as I can tell, this states that it does exist?\n. After adding more debug, it always seems to be at the beforeStep stage.\nDon't know if that is any help at all.\n. Originally, nothing, but all there is now is an echo.\n```\nuse Behat\\Behat\\Hook\\Scope\\BeforeStepScope;\n...\n/*\n * @BeforeStep\n /\npublic function beforeStep(BeforeStepScope $scope)\n{\n    echo \"Before step\\n\";\n}\n```\n. I'm beginning to wonder if this is a Mink issue, always seems to be when navigating to either the homepage or a specific URL.\nMy feature file:\n```\nFeature: Site\nBackground:\n    Given I am on the homepage\n\nScenario: Homepage on a desktop\n    Given I am on a desktop\n    Then I should see \"Test\"\n\nScenario: Homepage on a tablet\n    Given I am on a tablet\n    Then I should see \"Test\"\n\nScenario: Homepage on a phone\n    Given I am on a phone\n    Then I should see \"Test\"\n\n```\nBefore step:\n```\n/*\n * @BeforeStep\n /\npublic function beforeStep()\n{\n    echo \"Before step\\n\";\n$session = $this->getSession();\n$url = $session->getCurrentUrl();\necho \"URL: {$url}\\n\";\n\n}\n```\nThe output:\n```\n\u250c\u2500 @BeforeSuite # FeatureContext::beforeSuite()\n\u2502\n\u2502  Before suite\n\u2502\n\u2502\n\u250c\u2500 @BeforeFeature # FeatureContext::beforeFeature()\n\u2502\n\u2502  Before feature\n\u2502\n\u2502\nFeature: Site\nBackground:                  # features/site.feature:4\n    \u250c\u2500 @BeforeStep # FeatureContext::beforeStep()\n    \u2502\n    \u2502  Before step\n    \u2502  URL: about:blank\n    \u2502\n    \u2502\n```\nHappens with both these commands:\nGiven I am on the homepage\nGiven I am on \"/\"\nBut every now and again it will work.\n. ",
    "OutOfBrain": "It is already implemented in \"master\", so you can use it\njavascript\ndefault:\n    formatters:\n        junit:\n            output_path: %paths.base%/build/behat\n. ",
    "Dyktus": ":+1: for this idea \n. @Sam-Burns I want to get more details about this case.\nAt the beginning sorry for my english.\nSo only when you run all the tests in the suite this flag --list-unused-definitions should be available, am I right ? \nTry to imagine this situation:\n- When you will run one *.feature this flag can output some unused definitions but only in this scenario not in all of them, right ? \nCorrect me if I think wrong.\n. I forked behat repository and just will try to write something on the weekend :+1: wish me luck\n. @Sam-Burns Looks great :+1: \nReally sorry but to be honest I didn't touch the code at all.\nOne idea. Where do you check if whole suite was run ? I mean what happens when I will run single test. I don't see the code responsible for that.\n. ",
    "fonsecas72": "I would be willing to help anyone to implement something to achieve this.  +1\n. ",
    "danchukas": "I like idea with --list-unused-definitions and --drop-unused-definitions.\nI refactor scenarios now. And it is very difficult. \nPHPStorm's plugin Behat not see unused methods.\nAnd find unused methods (specifically if used --append-snippets) is manual long work on every review code of pull request by members of team.\nAnd when create, refactor, edit or delete steps or scenarios or even all features - we can't get any information about something went wrong.\nPlease, do it or say what I can use else for resolve this situation.\n. I fixed it in fork danchukas/Behat.\nI hope this fix and another features apllied to original Behat.\nhttps://github.com/Behat/Behat/issues/1101. As extension:\n- I am not sure I can do it now. I think it takes very much my time. I see existed extension, it is little hard, and not all works.\nAbout feature:\n1. You can write only:\nExamples Cross:\n|a|b|c|d|\n|1|1|1|1|\n||2|2|2|\n| |3|| |\ninstead of:\nExamples:\n|a|b|c|d|\n|1|1|1|1|\n|1|2|1|1|\n|1|1|2|1|\n|1|2|2|1|\n|1|3|1|1|\n|1|3|2|1|\n|1|1|1|2|\n|1|2|1|2|\n|1|1|2|2|\n|1|2|2|2|\n|1|3|1|2|\n|1|3|2|2|\n\nYou can reuse written 1 or group of steps by cut past to new step in context . Hierarchy of inner steps are not limited. \n\nSituation:\nI have scenario for \"Place ad\", that contains 16 steps.\nI need scenario for edit ad, rate, remove, archive, ...\nThan I need copy past all 16 steps into each new scenario, or create new method in Context where will be all 16 steps as methods what called that 16 steps. So, I need understand how work every step, find all methods, all arguments, and then create new method. If something changed on 16 steps - QA would long understand how fix it.\nI propose only copy 16 steps to return of new method.\nQA what write tests, simple do it by less 1 minute.\nIf something changed on 16 steps - QA easy find what QA must change.\nExample:\n....\nGiven I am on \"/b\"\nWhen I click on \"c\"\nAnd I  click on \"d\"\nAnd I  click on \"g\"\nAnd I  click on \"e\"\nAnd I  click on \"r\"\n....\nI can group it as:\n/**\n * @Then Some Grouped Step\n */\npublic function some_grouped_step()\n{\n    return [\n        'I am on \"/b\"',\n        'I click on \"c\"',\n        'I click on \"d\"',\n        'I click on \"g\"',\n        'I click on \"e\"',\n        'I click on \"r\"',\n    ];\n}\n\nAnd use it in this and next feature as:\nGiven Some Grouped Step\nIn 2.5 used  new When(...), new Given(...). For us It not very usefully. More easy for day-to-day work of QA my variant. \n\n\nWhat is PR I  don't know.\n\"Forking a project is a lot of maintenance when new features come out.\" - I know it and write there - please, add this functionality to main behat.. and it  https://github.com/Behat/Behat/issues/1082\nalready fixed in my fork\nhttps://github.com/danchukas/Gherkin\n. Ok.\nI please Cucumber add \"Examples Cross\" there: https://github.com/cucumber/cucumber/issues/301\nI hope for success answer.\n\n. But what about \"chained execution steps\" (grouped steps, inner steps) ? \nCan you add this very important feature to repository ?. ",
    "lmrafael": "So the problem lies in my regex inability. :sweat_smile:\nAs I need to have pre-fixed options for my step, I do care what it says, so I'm going with a named group. I tried setting it to (?<value>values|contents), but I am still getting the same result as before, and it doesn't works.\nMoving forward I spitted my step into two:\n/**\n * @Then /^the contents of the row on position \"(?P<rowPosition>[^\"]+)\" in \"(?P<table>[^\"]+)\" table are:$/\n * @Then /^the values of the row on position \"(?P<rowPosition>[^\"]+)\" in \"(?P<table>[^\"]+)\" table are:$/\n */\nand worked like a charm. But still doesn't solve my problem, cause I can have steps like:\n/**\n * @Then /^the (value|content) of the cell on row position \"(?P<rowPosition>[^\"]+)\" and column position \"(?P<columnPosition>[^\"]+)\" (is|should be|shall be)(?:| equal to) \"(?P<value>[^\"]+)\"$/\n */\nwith lots of capturing groups, and I don't want to explode them into all possible combinations. :persevere:\nSo the key seems to really be that capturing group, and as I really am not confident at all in my advanced regex abilities, did I set it wrongly again? :baby: What can I put in there to try make it work?\n. Agreed. I got it now!\nUnfortunately me and my team are trying to create an base dictionary to be used along several projects we are running, we will maintain this base, and those projects' QA team will write the .features to them.\nThat is unfortunate because the QA team fought really bad so we would provide this dictionary with a more 'loose' grammar. Hence the (value|content). (is|should be|shall be), (?:| equal to) on our steps.\nSo I could meet my project requirement and be ok with behat specifications I rewrote my steps to something like this:\n```\n/*\n * @Then /^the (?Pvalue|content) of the cell on :targetColumnName column which \"(?P[^\"]+)\" column has the :columnValue value (?Pis|should be|shall be)(?:| equal to) :cellValue$/\n /\npublic function assertCellBasedOnColumnNameValueAndColumnName1($columnName, $columnValue, $targetColumnName, $cellValue, $namedGroup1, $namedGroup2)\n```\nand most of them worked alright, but when using TableNodes, the problem persisted:\n/**\n * @Then /^the (?P<namedGroup1>values|contents) of the row which \"(?P<columnName>[^\"]+)\" column has the \"(?P<value>[^\"]+)\" value in \"(?P<table>[^\"]+)\" table are:$/\n */\npublic function assertRowBasedOnColumnNameValue2($columnName, $value, TableNode $items, $table, $namedGroup1)\nis still returning a Fatal Error for the TableNode argument (must be an instance of Behat\\Gherkin\\Node\\TableNode, string given), and only works when I add an dummy $ignore variable:\npublic function assertRowBasedOnColumnNameValue2($columnName, $value, $ignore, $table, $namedGroup1, TableNode $items)\nAny Ideas?\n. Even though I don't care, I need them to be defined there. There will be auto-generated documentation and it needs to have those options... Project requirements... :sweat_smile:\nSo, moving the TableNode argument to the end did the trick! Everything is green! :tada::tada::tada:\nEven so: \nI don't know if I am being naive again but, deactivating the arguments chaining when an named group is present wouldn't make sense? \nSomething like, or you let the Behat chain them or you explicitly name them. \nThis way we could write richer steps, where the regexes would only affect the step mapping to the .features written steps and not the arguments, so ... do you think that would be an nice to have enhancement, or would break more things than solve?\n. Damn. I knew I was bad at regexes, but I didn't knew how much. Just NOW I realized what you proposed to me.\n(?:values|contents)\nThat's it. Everything is fine. No need to useless arguments. And I feel uberly stupid. \n:flushed::flushed::flushed:\nThanks for the patience man. Stupid me.\n. ",
    "mheki": "What kind of name would you expect here?\nIMO everything looks fine in your example. Take a look at this line:\nAnd I should see \"XYZ\" # Features/guestCRUD.feature:17\nyou have a file path plus a line to the failing step, I think this is detailed enough to investigate your failure.\nThe thing is that # Features/guestCRUD.feature:17 is written using the same font colour as a background. Did you miss it?\n. Looks like the issue can be closed now :)\n. ",
    "vittore": "Ops! Thanks.\nv.\n2015-12-01 9:50 GMT+01:00 Marek Pietrzak notifications@github.com:\n\nWhat kind of name would you expect here?\nIMO everything looks fine in your example. Take a look at this line:\nAnd I should see \"XYZ\" # Features/guestCRUD.feature:17\nyou have a file path plus a line to the failing step, I think this is\ndetailed enough to investigate your failure.\nThe thing is that # Features/guestCRUD.feature:17 is written using the\nsame font colour as a background. Did you miss it?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Behat/Behat/issues/796#issuecomment-160896980.\n\n\nhttp://www.zen.pn.it\n. ",
    "mommeetcoffee": "can we add that to the readme? with a link to here to help people set up the global gitignore? https://help.github.com/articles/ignoring-files/#create-a-global-gitignore\n. good point. but beginners need love too :)\n. ",
    "djdevin": "We just did a successful migration from Behat 2 to 3, it was alright.\nBesides the above, if you used chained steps (new Given(\"I do another step\")) in your contexts those no longer work, you have to make direct calls to the steps.\nWe didn't have any to update any .feature files (~160 scenarios of varying complexity), we used DrupalExtension and Mink.\n. We really need this to pinpoint long running tests/performance issues.\nThought this was easy by just adding \"time\" and \"timestamp\" in JUnitScenarioPrinter.php but I'm not sure where we would pull the duration from.\n. #1083 fixes this. confirmed working in behat 3.5+. We do the same thing. QA does not have access to Git for various reasons and that probably is not going to change. We use Testrail for management of manual tests (a lot) so that's where the automated tests lie as well. This is an \"enterprise\" system so every test case has to have an ID and some other businessy data associated with it - requirement documents, credentials, etc. Testrail has revisioning and branching, so we really have no reason to move everything into .feature files. Sometimes QA can write failing tests intentionally if it's a release blocker and we know what the expectation is - like a message appearing or some field containing a value. Then when the developer creates their feature branch to fix it, it gets tested against the current automated tests and if it passes, it gets merged in.\nPiping really should be supported since Gherkin seems to be geared towards non-developers. Our QA writes the majority of Gherkin now. We also have some testbed sites set up so that QA can run Gherkin tests without having to set up a local environment - the story is the same there, you have to dump the input into a file and then run it which seems unnecessary. If Behat supported piping I think we would even be able to make a Behat console where you can type in individual steps.\nSo we have to dump all our tests out from Testrail which isn't that complicated but it would be nice to not have to put everything in a file to run. To get even more ridiculous (but out of scope of this issue) we run all the tests in parallel (with gnu parallel) which requires extracting them even further, then we have feature files looking like this...\nS719-C12251-restws-automated-scripts-571fc806e9608.feature\nS153-C8483-reports-571fc806e6931.feature\nS136-C10428-e-commerce-571fc806e288a.feature\nS142-C25290-course-objects---requirements-571fc806e383f.feature\nS135-C10207-course-enrollments-571fc806e1f10.feature\nS142-C12629-course-objects---requirements-571fc806e371e.feature\nS142-C25298-course-objects---requirements-571fc806e3b21.feature\nIt \"works\" but I think we could have something more elegant if I didn't have to make hundreds of files.\n. interesting, thanks for the tip!\n. Old issue but still valid without built in parallelism. Here is a workaround that worked for us (run all .feature files, in parallel). The -o part of the JUnit formatter selects a directory to put the resulting .xml file in. We break apart each .feature file and send them to Behat individually with a different -o parameter.\nfind ./features -name \"*.feature\" -printf \"bin/behat %p -f progress -o std -f junit -o xml/%P\\n\" | parallel -j 20\nThis results in a file structure like this:\n@\nxml/foo.feature/default.xml\nxml/bar.feature/default.xml\nxml/something.feature/default.xml\nIn Jenkins' Junit parser you can enter a glob string so we enter xml/*/*.xml which matches all resulting XML files.. Still seeing this with 3.5.0.\nI had to pull in Behat/Gherkin from https://github.com/Behat/Gherkin/pull/129 to get it to work.. ",
    "soullivaneuh": "I could indeed get some free time for this one.\nOne question about configuration:\nhttps://github.com/Behat/Behat/blob/ca2c78e4695ee120d44363fd8ea3b3fc28330ff7/src/Behat/Behat/Gherkin/ServiceContainer/GherkinExtension.php#L113\nThe config is under the gherkin key for this one, but can we get upper level config from this extension class? Because if not, this will be hard to deal with it.\n. @everzet Sorry but why closing this issue? Is it solved?. @stof Could we have a new patch tag for this? Thanks.\n. ",
    "Chriton": "Hello,\nIs there something else that I should do for this to be merged?\n. ",
    "adamquaile": "@stof Yes, I understand that. I'm trying to understand why it's done at all? Perhaps there's a good use-case, but it adds a layer of magic that can be confusing.\n. ",
    "pocky": "Thanks!\n. @everzet \nMy context\n```php\n<?php\nuse Behat\\Behat\\Context\\Context;\nuse Behat\\Gherkin\\Node\\PyStringNode;\nuse Behat\\Gherkin\\Node\\TableNode;\nuse Behat\\Behat\\Tester\\Exception\\PendingException;\n/\n * Defines application features from the specific context.\n */\nclass FeatureContext implements Context\n{\n    /\n     * @Then I say thanks :name\n     */\n    public function iSayThanks($name)\n    {\n        $this->customer->thanks();\n    }\n}\n```\nAnd result:\n```\nFeature: Test project\nScenario:                               # features/beer.feature:3\n    Given I am a customer                 # FeatureContext::iAmACustomer()\n    When I want a beer                    # FeatureContext::iWantABeer()\n    Then the bartender should give me one # FeatureContext::theBartenderShouldGiveOne()\n    And I say thanks \"Tom\"                # FeatureContext::iSayThanks()\n      Fatal error: Call to undefined method Customer::thanks() (Behat\\Testwork\\Call\\Exception\\FatalThrowableError)\n    And I drink my beer                   # FeatureContext::iDrinkMyBeer()\n    And I am \"drunk\"                      # FeatureContext::iAm()\n--- Failed scenarios:\nfeatures/beer.feature:3\n\n1 scenario (1 failed)\n6 steps (3 passed, 1 failed, 2 skipped)\n0m0.02s (8.77Mb)\n```\nI want to catch the exception in And I say thanks \"Tom\"                # FeatureContext::iSayThanks()\n      Fatal error: Call to undefined method Customer::thanks() (Behat\\Testwork\\Call\\Exception\\FatalThrowableError) with this tester.\nThe actual code uses error_get_last() which, as @stof said on my issue, doesn't work with exception. I tried to catch the exception with a simple try/catch or the error message with behat events but I can't find the right solution.\nDo you need more information?\n. I close this problem because I found the solution by refactoring class. ErrorTester implements StepTester to get the result of each step with ExecutedStepResult and then does its job in case of exception.\nThanks (again) for Behat and phpspec.\n\n. ",
    "ibrasho": "Can we fix mink and all the extensions to allow Symfony 3.0 components?\nThe ones I noticed:\nbehat/mink is out-of-sync with minkphp/mink and require symfony/css-selector ~2.0: https://github.com/behat/Mink/blob/master/composer.json\nMinkExtension still require symfony/config ~2.2: https://github.com/minkphp/Mink/blob/master/composer.json\n. I just noticed that behat/mink on packagist is actually phpmink/mink in github.\nSo only the extensions need updating it seems.\n. behat/mink needs a tag also.\nhttps://github.com/minkphp/Mink/issues/682\n. ",
    "scaytrase": "@stof any updates on this?\n. On the one hand - handling features from the other source would be nice. Something like\nsh\necho_some_dot_feature_content() | behat -\nOn the other hand behat feature is not the only scenario, but also the Context. In this case you should either provide context classes alongside your feature context (but nobody wants to known which classes, as your features are stored elsewhere) or use some kind of default context. Second means you will include almost ALL context classes to defaults and won't be able to use different context classes for the same steps (i.e. for different roles testing).\nI've understood the main idea of your system and I'd better look into changing the storage, i.e store features directly in dedicated git repo (skipping the DB), like online github file editing. Just commit file on the save button click. This also immediatly achievs all benefits from VCS (authorship, history, branching)\n. Agree. Phpstorm works better with phar now and 3.x is not bundled to the releases anymore\n. ",
    "pkruithof": "@stof any progress on this? It's blocking the Symfony 3 upgrade for our project unfortunately.\n. ",
    "kwoxer": "Formatter is pretty simple. Mine written for behat 3 is e.g.:\nformatters:\n    pretty:\n      verbose: true\n      paths: false\n      snippets: true\n      multiline: true\n      output_styles:\n        passed: [ green, null ]\n        passed_param: [ green, null, [ bold ] ]\n        skipped: [ blue, null ]\n        skipped_param: [ blue, null ]\n        failed: [ white, red ]\n        failed_param: [ white, red, [ bold, underscore ] ]\n        comment: [ black, null ]\n        undefined: [ yellow, null ]\n        tag: [ black, null ]\n    html:\n      output_path: %paths.base%/build/html/behat\n. Alright I openend issue here: https://github.com/Behat/MinkExtension/issues/257\nYou can close here.\n@spolischook, I already have that patch with the Key::TAB active. My issue is more that the \"fillField\" is filling the field properly but losing focus of the field afterwards.\nThis must by some core functionality of Behat/Mink.\n. Ahh right, via return $url; correct. Thank you.. So with a workaround with more than one table. Alright. Not so sexy but should work indeed. Thank you for info.. ",
    "rennis23": "Pull request with fix https://github.com/Behat/Behat/pull/813\n. You have right.\nThis is problem with my docker configuration.\nIf anybody used official php7 image from docker hub you must install mbstring by command.\ndocker-php-ext-install mbstring\n. This pull request is not necessary.\nI closed issue, because I had wrong docker configuration (described in issue).\n. ",
    "adamcameron": "Cool, thanks for the clarification. But from a software stability standpoint, it did \"go away\" in the sense that the functionality stopped working after upgrading. Different functionality that does the same thing is... different ;-) However I get that this is fine according to semver when bumping full revisions.\nPerhaps the issue should actually remain open, as I think there is still possibly a shortfall in the docs, at least as far as transitioning from 2.x to 3.x? I did google a lot, and had a superficial (too superficial as it turns out!) look through the source code to find out if it had just changed, but found nothing so assumed it had been removed. Is there some \"upgrading from 2.x to 3.x\" doc I didn't find? \nAbove all else, thanks for the quick heads-up, as it gets me moving forward again. And thanks for putting the effort into Behat! :-)\n. ",
    "blazarecki": "Ok, I may try to use Behat as a pure testing tool. \nMy idea was to have an \"optimize outline scenario\", because I don't want to: first, load fixtures in one scenario and then, launch outline scenario which use in read-only the previous loaded fixtures.\nI wanted to have the readability of an outline scenario and the extensibility of a testing tools (before/after).\nThanks for the explanations.\n. ",
    "higrow": "this would be a great addition for me too.\nI can see why the optional attributes are not implemented right now, but would i be a possibility to add a hook to the Output/Node Generation? This would give developers a way to add optional attributes if they need any without cluttering the code too much. \nthanks anyway for your work on this.\n. I implemented a initial version of this in my fork. https://github.com/higrow/Behat/commit/eabe3346303034ba9426b84b4791a660abfaf2b5\nif anyone can verify the approach i'm happy to add tests, clean up and make a pull request. \nI'm unsure how to get the tests passing though because the junit format tests verify the equality of the generated file with the content specified in the junit_format.feature\nBecause the execution time varies i'd have to either stub the duration somehow or change the check to only verify the format, not the exact content. Any preference there? . ",
    "vmwiz": "I would definitely love to see this implemented\n. ",
    "davidsteinsland": "@everzet It would actually improve those CIs, especially CircleCI which has an option to load balance tests between containers (automatically), by looking at the time property.\nHere's how it looks in CircleCI's test summary:\n\n. I am implementing a simple AfterStep listener which gathers data about every step executed; which suite its in, which feature, which scenario, and so on. All the needed data is already provided by the scope, but not the scenario. And this made me wonder if this was a simple slip? Not to complain or anything, but it just comes off a bit weird that scenario is the only thing missing.\nBecause a step may be attached to a background, I thought I'd do something like:\n``` php\n$feature = $scope->getFeature();\n$step = $scope->getStep();\n/* ScenarioLikeInterface /\n$scenario = $step->hasScenario() ? $step->getScenario() : $feature->getBackground();\n``\n. Suites works well if the different tests had been in separate paths, but not all of them are. This is part of our acceptance testing across several applications, where the CI runsa.scenariosin one container andb.scenarios` in another container (to parallelize the builds).\nOn our development machines, we want to run master.scenarios to run all of them easily.\nWe have created extensions that creates database fixtures for us (we can run one feature and \"save\" the SQL queries to a file, which can be imported in another feature). \nThis results in that features must be executed in a given order, hence the scenarios files..\nAlso, because we are testing across several applications (with different base URLs), we have an extension that automatically updates Mink's base_url parameter for each test (based on the directory they live in).\nExample:\napp1/\n  - a.feature\n  - b.feature\napp2/\n  - a.feature\n  - b.feature\nBecause we use the \"app1\" and \"app2\" directories to identify the base URL requirement, we cannot move the features around in paths such as \"suite1/\" and \"suite2/\". \nConclusion: I don't think we can solve this using Suites.\n. The BASE_URI was just an example, but I don't see the problem with the transformation matching feature though. \n. The hook gets called statically and is within a Feature Context. I'm talking about the event dispatcher system.\nIf you read between the lines, I'm actually proposing a new event around the lines of \"Last scenario in feature\".\nBecause this just seem a bit overkill:\n``` php\n    / OutlineTested::AFTER + ScenarioTested::AFTER /\n    public function afterFeature(AfterTested $event)\n    {\n        $scenario = null;\n    if ($event instanceof Event\\AfterScenarioTested) {\n        $scenario = $event->getScenario();\n    } elseif ($event instanceof Event\\AfterOutlineTested) {\n        $scenario = $event->getOutline();\n    } else {\n        return;\n    }\n\n    $environment = $event->getEnvironment();\n    $feature = $event->getFeature();\n\n    $scenarios = $feature->getScenarios();\n    $lastScenario = $scenarios[count($scenarios) - 1];\n\n    if ($lastScenario !== $scenario) {\n        return;\n    }\n    /* last scenario in feature here */\n    foreach ($environment->getContexts() as $context) {\n        /* context instances are not destroyed yet */\n    }\n}\n\n```\n... especially if done in multiple event subscribers.\n. My use case is actually both \"Last scenario/outline in feature\" and \"First scenario/outline in feature\", because I need to perform some extra setups and teardowns.\nIt is perhaps not very representative for the rest of the community, but before features we load DB seeds based on annotations in the feature (FeatureTested::BEFORE works well here). To ensure we don't mess up the application in this phase we close any browser windows (in case tabs are opened from earlier tests).\nSo basically:\nBefore feature: Load DB seeds/reset DB\nAfter last scenario in feature: Close browser (needs Context instances here)\nAfter feature: Save resulting DB seed\nI could perhaps come up with other use cases as well, but this is what we're working on now.\n. ",
    "guillaumeray": "It would be great to have an easy and cleany way to do it, with a behat extension for example \nOh but it already exist ! look at it : https://packagist.org/packages/jarnaiz/behat-junit-formatter . ",
    "paulholden": "Seems the time attribute was written to JUnit output in Behat 2.5 - since upgrading to Behat 3.1 it's noticeable that Jenkins CI has stopped gathering test duration statistics, as the time attribute is missing from the XML... would be great to get this back!. ",
    "javian": "3.1 does not seem to have it assuming that is considered stable.\n. @stof has this just been overlooked for 3.1 ?\n. ",
    "khusseini": "@jakzal great thanks :)\n. ",
    "danepowell": "What's the latest status on this? It just bit me today, pretty annoying.\nIt looks like @peterjmit might have a fix, but I don't see an upstream PR for it.\n. I'm also trying to figure out how to catch any errors/warnings/notices that occur during a scenario and fail the scenario. I can't think of any reasonable way to do this other than via AfterScenario, which unfortunately doesn't actually fail the scenario. Steps doesn't feel like a reasonable workaround at all.. ",
    "pies": "It's very annoying.\n. ",
    "kamazee": "@peterjmit you can simply amend a commit with nothing (just to change its hash) and push (with force), it should restart builds.\n. ",
    "avant1": "Are you familiar with https://github.com/m00t/behat-partial-runner?\nWe are using this extension for parallel tests execution.\nBut I agree, passing more than one .feature file to be runned can be useful.\n. There are Before_Feature_ and Before_Scenario_ hooks. The latter are described here: http://docs.behat.org/en/latest/user_guide/context/hooks.html#scenario-hooks\nAnd those methods are not static. So you can inject any service you need.\nSo the execution order is the following:\n- BeforeFeature hook\n- BeforeScenario hook\n- scenario background \n- scenario1\n- BeforeScenario hook\n- scenario background \n- scenario2\n  and etc.\n\nbefore each scenario I have to repeat the background section...\n\nHooks are not connected with background. Background is a way of making examples shorter and removing duplication of initial steps of multiply scenarios in one feature.\nAnd, if I understand your needs, you probably want to use BeforeScenario hook to clear database.\nIt is needed to make sure that each scenario uses empty (or some initial state) database, and scenarios of one feature do not depend on each other.\nWhen you have multiply scenarios in one feature and you do not clear application state between scenarios you get fragile tests (if you change order of scenarios execution or run part of scenarios tests may not pass). Also your tests may even pass when your application is broken.\n. > Just do it before each scenario :)\nI thought @pamil was talking about BeforeScenario hooks, not background section.\nSo I wanted to make things more clear about the difference between BeforeScenario, BeforeSuite hooks and Background section.\nBut my understanding of quoted words could be wrong :smile: \n\nBut without that, my scenarios have duplications of \"Given the following permissions exitsts...\":\n\nUsing Background in your first example seems valid for me.\nI was just trying to say that it makes sense to clear database before each scenario, not before feature.\nSince you have two scenarios in this feature, second scenario will get \"dirty\" application state (which was left after first scenario).\n. > I can't imagine how to maitain bigger systems with that approach\nWe use this approach on large enough projects (with large number of scenarios, and complex behat suites setups). \nThe only thing that you need to do is to prepare the application state before each scenario. And since you already use those backgrounds to achieve this - you do not need to do anything else.\n\nClear database take a time that can be decreased if clear it before feature, not the scenario (yes, I know that it violates the BDD spec)\n\nAs @pamil have shown, when we talking about some kind of UI tests (where real calls to application are made) database clear step will take very small amount of time comparing to total time of tests execution. \nBasically, all you need is to execute set of DELETE statements in correct order. Recreating database schema may take longer time and is not always needed.\nBackground section execution may take rather long time. But since you execute it anyway for each example (as I see from your scenario) - you will not make tests run much faster. You could move Background to the the beginning of first scenario, and it will not be executed several times, but please do not do that :smile: \nWithout clearing application state between scenarios:\n- you get fragile and not-easy-to-debug tests\n- you cannot just run one example in feature, as it may not pass\n- you cannot make some actions in Background (like creating user with concrete email as it may lead to database unique constraint error) - or you should check if this action has already beed done, but this will make your code much more complex\n- it can be hard to use your scenarios as documentation (since each scenario may depend on previous scenarios of that feature, and you cannot discuss single scenario without having all previous scenarios in mind)\n- it is much more hard to divide your scenarios into groups using tags (often in can be useful)\nSo you loose part of power that BDD together with behat give to you.\nTests speed is very important, I agree. Nobody likes waiting.\nBut when you use dirty application state for most of your scenarios, you tests may not detect problems with the application. And one day tests will pass and broken application will be deployed to production servers.\nThere are several ways to make tests faster. \nAnd here are two of them (in addition to @pamil's comment):\n- for some of scenarios use step implementations that will use only your domain objects, without requests to web server or database - it is not always possible, and it is quite hard to implement, but this approach has lots of advantages\n- just run your tests in parallel and add more test runners - it always works\n. I like the idea of saving domain objects and avoiding calling them by name (if it is not important for scenario) in favor of something like \"this bucket\".\nIt makes scenarios less wordy and allows to concentrate on really important moments of scenario.\nBasically we're using similar approach in some of our projects and it is very convinient. But we are saving current objects into context property, just like @spolischook said. We divide steps implementations into \ntraits and then combine them into context class, so it is not a problem to access current object from different subcontexts.\nAnd I understand that accessing to the same object instance from other context classes may be tricky.\nBut similar functionality can be achieved by changing the structure of contexts.\nOr you could even use hooks to access other contexts: http://docs.behat.org/en/v3.0/cookbooks/accessing_contexts_from_each_other.html\n. As I know PHP itself relies on system time, so one possible thing to do is to change system time to wanted date.\nBut it is a bad approach since it may lead to serious problems with other services that rely on system time.\nMore reliable and accurate way is to avoid direct usage of build-in PHP functionality (like time() or new \\DateTime()) to detect current time but wrap all such calls in a service (or function) and use this wrapper when you need get current date.\nInside that service depending on some conditions in test environment you can return custom time if it was defined, or just current time if scenario does not depend on time.\nSimple example:\n```php\nclass Clock\n{\n    public function getCurrentTime()\n    {\n        $pathToTimeFile = 'some/path/to/current-time.txt';\n        if (file_exists($pathToTimeFile)) {\n            return new \\DateTime(file_get_contents($pathToTimeFile));\n        }\n    return new \\DateTime();\n}\n\n}\n```\nAnd when you want to change current date you just put wanted date to that file (or remove that file if using current time is fine for your scenario).\n. Config keys normalization is disabled only for inner suite keys: https://github.com/Behat/Behat/blob/b171a35e53926220954823d261c83adfc81359c7/src/Behat/Testwork/Suite/ServiceContainer/SuiteExtension.php#L106\nThe same should be done for suite names too (one level upper compared to existing normalizeKeys() call if I understand things correctly).\n. Behat itself requires PHP 5.3, but seems like phar file is being build using PHP 5.5. Depending on PHP version composer installs different versions of packages (that are compatible with that PHP version). And as result that phar file cannot be used on php versions prior to 5.5.\nFor now you can install Behat using composer. \nBut this is a problem, and probably should be fixed, changing phar file build process or at least note in docs would be useful.\n@everzet Is phar build automated? I can't find that functionality in this repository.\n. This process can be automated, here is an article describing it: https://andreas.heigl.org/2017/01/18/building-a-phar-automated/\nShould phar be built on PHP 5.3 only, or maybe we can add multiple phar files for each release, built on 5.3 and 7.1 for example?\n. There is a PR that adds this functionality to Behat: #996\nFor now only one feature file can be passed.. You can skip full step execution inside step definition:\n```php\n    /*\n     * @Given the sky is blue\n     /\n    public function theSkyIsBlue()\n    {\n        if (!$this->planet->canSkyColorBeChanged()) {\n            return;\n        }\n    //perform sky color change\n}\n\n```\n. Can you describe your use case? Maybe something similar can be achieved in a simplier way.. As I know Behat process exists with zero status code when skipped scenarios found. Is it your main problem?\nIf so, try to add --strict option. It will consider any not passed step as failed and process exit code will be non-zero.\n. ",
    "eugene-dounar": "Tags like @thread1 @thread2 are ugly and do not allow dynamically setting\nnumber of parallel instances. Moreover - -tags option overwrite my suite\ntags\n\u0441\u0440, 27 \u044f\u043d\u0432. 2016, 11:33, Nitche notifications@github.com:\n\nAnd why don't you use tags?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Behat/Behat/issues/834#issuecomment-175479483.\n. Thanks, looks like what I need\n\n\u0432\u0442, 26 \u044f\u043d\u0432. 2016, 22:06, Kirill notifications@github.com:\n\nAre you familiar with https://github.com/m00t/behat-partial-runner?\nWe are using this extension for parallel tests execution.\nBut I agree, passing more than one .feature file to be runned can be\nuseful.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Behat/Behat/issues/834#issuecomment-175181567.\n. \n",
    "TerjeBr": "@everzet Why is this closed?\nHas this feature been implemented?\n. ",
    "rusk911": "There was a documentation page on 2.5 for spinning step function. Spent yesterday whole day for trying to get it working. I wanted to write somehing like \"@When I repeat \":some_any_other_defined_step\" :number times\", but seems it's impossible. I can call any method, defined for current context but can't just call it by passing step string neither get matched annotation from within a step method. Unfortunately behat+mink+selenium seems to work very unstable, failing tests randomly, which causes many hours spending on tests debugging....\nAny solutions?\n. ",
    "vanderlee": "Thank you!\n. ",
    "Oliboy50": "my bad, didn't see it before posting this issue...\nBut we still don't see it, when we use incorrectly the CLI:\n```\n$ behat qwerty\nbehat [-s|--suite SUITE] [-f|--format FORMAT] [-o|--out OUT] [--format-settings FORMAT-SETTINGS] [--init] [--lang LANG] [--name NAME] [--tags TAGS] [--role ROLE] [--story-syntax] [-d|--definitions DEFINITIONS] [--append-snippets] [--no-snippets] [--strict] [--order ORDER] [--rerun] [--stop-on-failure] [--dry-run] [--] []\n```\n. ",
    "saturday": "I ended up achieving the same thing with the executeScript method. I'm going to close this and possibly create a pull request for the Selenium2 driver so that date inputs are properly handled.\n. ",
    "DrSchimke": "Ohh, I found a solution for my problem. A possible answer seems to be \"hooks\".\n``` php\nclass MyContext implements Context\n{\n    // ...\n/**\n * @BeforeScenario\n */\npublic function beforeScenario(BeforeScenarioScope $scope)\n{\n    var_dump($scope->getFeature()->getFile());\n}\n\n}\n```\n. ",
    "emulgeator": "@everzet Is there a way to do this somehow then? \nRight now in the afterScenario we are checking if the called application had any errors, warnings or notices and if it had we throw an Exception. The problem is that though cli output contains this the test itself is not failed.. @spolischook But every step I have should check this at the end, as clearly no errors should be triggered under normal circumstances. That means if I have 300 scenarios I have to add 300 steps which is far from optimal. ",
    "mikemadison13": "This is happening elsewhere for me as well, where another package is throwing a fatal (occasionally) during a behat build, and behat doesn't seem to recognize that the fatal should be treated as a failure. . ",
    "lfbn": "I'm using RestApiExtension for Behat that has methods that print the request and response. You could use this extension or do it yourself printing the response body, via the HTTP adapter you're using. Printing or add more detailed exception message like stof said.\n. ",
    "Jerome1337": "Thanks guys for your help.\nI'm using WebApiExtension for Behat and there is a custom step to print the response.\nJust need to add Then print response in the feature\n. ",
    "PanosKou": "please delete this issue.. a dumb question used to live here..\n. ",
    "bttf": "I can confirm this works with behat v3.1\n```\nbehat.yml\ndefault:\n  autoload:\n    '': %paths.base%/features/contexts\n  suites:\n    general:\n      paths: [ %paths.base%/features/general ]\n      contexts: [ MyGeneralContext ]\n    order_requests:\n      paths: [ %paths.base%/features/other ]\n      contexts: [ MyOtherContext ]\n```\n. ",
    "Hermannovich": "@everzet  I was able to reproduce this behavior with behat 3.2. I'm on Windows OS. I have been able to understand the problem. It seems that when the custom context class implements only the Context interface the --dry-run --append-snippets doesn't generate the snippets. However if the context in my case extends the MinkContext everything work fine.\n. Thanks @everzet .\n. ",
    "OskarStark": "Fixes #856\n. should be $error. ",
    "moiroca": "I think I was having typo issue when I run\nvendor/bin/behat -v\nIt should be\nvendor/bin/behat -V\nClosing this issue. \n. ",
    "scara": ":+1: \n. ",
    "christeredvartsen": "Care to paste a short example on how to fetch them, and how they should be specified in the configuration file?\n. Thanks, got it working now so feel free to close the issue. This should perhaps be written in the docs somewhere as well.\n. Is there a way to specify default params for all suites or do I have to repeat the configuration values for all suites?\nyml\ndefault:\n    suites:\n        default:\n            param: value\n            contexts: [ FeatureContext ]\n        someSuite:\n            param: value\n            contexts: [ FeatureContext ]\n        otherSuite:\n            param: value\n            contexts: [ FeatureContext ]\notherProfile:\n     suites:\n        default:\n            param: otherValue\n        someSuite:\n            param: otherValue\n        otherSuite:\n            param: otherValue\nSay I want the param parameter to be set to value for all suites, but when running the otherProfile profile I'd like the value to be set to otherValue instead. Is the above snippet the way to handle this, or is there some other way to make suites inherit parameters from other suites?\n. Any status update for this?. ",
    "pamil": "What do you think about @Transform Email::class?\n. @ciaranmcnulty changing it to phpenv config-rm xdebug.ini || true will keep the HHVM build up and running :tada:\n. You are probably using a turnip notation (:argumentName), with argument name length over those 32 characters. It can be defined anywhere in the suite as Behat run preg_match for all possible step definitions to verify, that only one was matched.\n. TurnipPatternPolicy defines the transformation of turnip notation into a regular expression. Eg. :foo becomes [\\\"']?(?P<foo>(?<=\\\")[^\\\"]*(?=\\\")|(?<=')[^']*(?=')|[\\w\\.\\,]+)['\\\"]?.\nAnd as the PHP documentation says:\n\nIt is possible to name a subpattern using the syntax (?P<name>pattern). This subpattern will then be indexed in the matches array by its normal numeric position and also by name. PHP 5.2.2 introduced two alternative syntaxes (?<name>pattern) and (?'name'pattern).\n\nSo the foo becomes a subpattern name and there's no easy way to deal with it right now. Keeping the name <=32 characters will help :)\n. Works for me, awesome :+1:\n. @everzet can you tag a patch release with this fix? :)\n. Just do it before each scenario :)\n. @spolischook for Sylius we clear the database before each of nearly 500 scenarios and it results in 32s / 8% of the time (Blackfire profile). If you use Travis it should be much more faster, as Travis places databases in the memory.\nEnabling FriendsOfBehat/PerformanceExtension have sped up our test suite by 40 seconds / 8% (Sylius/Sylius#5583), it just requires PHP 5.6+.\nI just want to remind that there are plenty of the ways to optimize your Behat suite and some even without that big tradeoffs. A few more optimization tips may be found here.\n. @avant1 can't agree more! \ud83d\udc4d \n. Totally agree with @jakzal and @ciaranmcnulty, especially that with the second or third option from https://github.com/Behat/Behat/issues/863#issuecomment-235400924 implemented, it will be a no-brainer (and ~6 lines of code) to implement own type-based transformations.\nSupport for PHP 5.x will be very appreciated, we use a lot of transformers that can be type-based in Sylius and can't bump up dependencies to ^7.0.\n. Is it planned to add support for PhpDoc @return tag to the core if transformation does not have a return type? If so, I'd love to add it.\n. All right then, I'll try to send a PR this week.\n. What Mink driver do you use?\n. Build failure not connected with this PR.. @bwowk I've created a library for testing Behat extensions, take a look at https://github.com/FriendsOfBehat/TestContext :). It's the behaviour when run with --strict flag.. Try updating Behat, if it does not help you should look for the cause in your logic - we run over 210 scenarios with Selenium in Sylius and the peak memory usage is around ~30MB.. IMO phpenv config-rm xdebug.ini || true will be more readable than all the stuff happening with environmental variables\n. It's useless as there are no jobs that are allowed to fail.\n. This file does not use directives, so we can get rid of this weird syntax.\n. Missing space.\n. Because we cannot assume Behat in Testwork.. ",
    "boekkooi": "No problem thanks for the merge and your great work!\n. ",
    "ThomWilhelm": "Cheers @ciaranmcnulty I'd thought about switching drivers but have found Selenium better to handle javascript based functionality. Anyway, I tried using:\n$this->getSession()->getPage()->getOuterHtml()\nWhich worked better but there are still some changes from the original request, for example the closing slash on tags such as  don't exist.\nI think either I'll find a way to intercept the HTTP request made, or I could always fire off a new CURL request to the current URL.\n. Thanks @janipalsamaki since I'd opened this I'd already done something similar.\nnmap -oG - 127.0.0.1 -p 4444  | grep 4444/open | wc -l\nAm happy just to use a check such as this before calling behat.\n. ",
    "rudiedirkx": "I found that flag later. Mea culpa.\n. That feels strange. If there's an interface, I shouldn't have to specifically check a class. IMO getTestResult should return a 'valid' StepResult, which is predictable: always a getCallResult(). If I specifically check for ExecutedStepResult, and there's a new kind of (matching) StepResult, I'm excluding that implicitly. That feels strange.\n. NULL. Tests have a result. All test result types should have a way to fetch the result. I think it makes more sense to change the return type depending on test result type instead of the interface. That's the point of an interface, isn't it?\nMaybe I'm biased, because I'm having this 'problem', but a different interface per test result type seems silly.\n(I don't even understand why they have so many classes for a StepResult. They're all practically the same, and the difference is defined in 4 TestResult constants too.)\n. But getCallResult() is never interfaced. Can I ever depend on it?\n. Let's say your features uses custom and pre-defined steps (e.g. Mink) and you want a scenario where a certain user can do 4 things, and a scenario where they can't do those 4 things. It'd be nice to say the next 4 steps must all fail, instead of pass, to pass. The alternative is to create 4 new custom steps to assert the opposite, but that's confusing, because they're custom and pre-defined. In Behat 3 you can't reuse steps anymore =( so that's also not an easy option.\nThere are a few Step result-ish events, but I couldn't find one to actually change a FAIL to a PASS.\n. Can I decorate the StepTester and still use the normal behat bin and its options etc? Can a plugin do that?\n. ",
    "Slamdunk": "This should be all, isn't it?\n. ",
    "ladhadha": "Thanks for replying @stof.\nThere is the console output when i run behat -v\n```\nFeature: Education Calculator\n    As a customer\n    In order to count how much money to save in a period of time to get my kids the best education\nScenario: Count how much to save                                                 # htdocs/content/themes/Astralife/tests/features/educalc.feature:5\nPHP Warning:  preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\nWarning: preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\n    Given My child age now is 7 years old                                          # DomainContext::myChildAgeNowIsYearsOld()\n      TODO: write pending definition\nPHP Warning:  preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\nWarning: preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\n    And My child age when she/he will using the money is 19 years old              # DomainContext::myChildAgeWhenSheHeWillUsingTheMoneyIsYearsOld()\nPHP Warning:  preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\nWarning: preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\n    And He/she will use the money for 12 years                                     # DomainContext::heSheWillUseTheMoneyForYears()\nPHP Warning:  preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\nWarning: preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\n    And I need totally 600000000 for his/him education                             # DomainContext::iNeedTotallyForHisHimEducation()\nPHP Warning:  preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\nWarning: preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\n    And My saving for his/him education is 25000000                                # DomainContext::mySavingForHisHimEducationIs()\nPHP Warning:  preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\nWarning: preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\n    And My monthly saving for his/him education is 0                               # DomainContext::myMonthlySavingForHisHimEducationIs()\nPHP Warning:  preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\nWarning: preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\n    And the annual interest rate is 6%\nPHP Warning:  preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\nWarning: preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\n    And the inflation rate per year is 4%\nPHP Warning:  preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\nWarning: preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\n    When I calculate                                                               # DomainContext::iCalculate()\nPHP Warning:  preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\nWarning: preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\n    Then I should get 960619331 as my totally need (after adjusted with inflation)\nPHP Warning:  preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\nWarning: preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\n    And I should get 40025805 as the Future Value of my current saving             # DomainContext::iShouldGetAsTheFutureValueOfMyCurrentSaving()\nPHP Warning:  preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\nWarning: preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\n    And I should get 0 as the Future Value of my educational monthly savings       # DomainContext::iShouldGetAsTheFutureValueOfMyEducationalMonthlySavings()\nPHP Warning:  preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\nWarning: preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\n    And I should get 40025805 as my total saving when the education start          # DomainContext::iShouldGetAsMyTotalSavingWhenTheEducationStart()\nPHP Warning:  preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\nWarning: preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\n    And I should get 920593526 more money to save                                  # DomainContext::iShouldGetMoreMoneyToSave()\nPHP Warning:  preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\nWarning: preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\n    And I should save more 5014346 monthly                                         # DomainContext::iShouldSaveMoreMonthly()\nPHP Warning:  preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\nWarning: preg_match(): Compilation failed: subpattern name is too long (maximum 32 characters) at offset 56 in /home/baboon/.composer/vendor/behat/behat/src/Behat/Behat/Definition/Search/RepositorySearchEngine.php on line 121\n    And I should save more 60172155 yearly                                         # DomainContext::iShouldSaveMoreYearly()\n1 scenario (1 undefined)\n16 steps (3 undefined, 1 pending, 12 skipped)\n0m0.03s (5.90Mb)\n--- DomainContext has missing steps. Define them with these snippets:\n/**\n * @Given the annual interest rate is :arg1%\n */\npublic function theAnnualInterestRateIs2($arg1)\n{\n    throw new PendingException();\n}\n\n/**\n * @Given the inflation rate per year is :arg1%\n */\npublic function theInflationRatePerYearIs2($arg1)\n{\n    throw new PendingException();\n}\n\n/**\n * @Then I should get :arg1 as my totally need (after adjusted with inflation)\n */\npublic function iShouldGetAsMyTotallyNeedAfterAdjustedWithInflation2($arg1)\n{\n    throw new PendingException();\n}\n\n```\nIs my step definition too long?\n. @pamil so :argumentName can't be more than 32 character?\nHmm.. \n\"It can be defined anywhere in the suite as Behat run preg_match for all possible step definitions to verify, that only one was matched.\"\nThere are any example to define it? or may be I should cut my :argumentName to be less than 32 character :D?\n. @pamil: I'll just simply keep the name <=32 :).\n@ciaranmcnulty: It will be great, so we can have more verbose argumentName \n. ",
    "ArielZamparini-REISys": "Yes you are correct, I will not fight you there. My main use case for the front-end is to be able to have a team that does not have code base access to create, write and manipulate these test cases (a mix of business analysts, quality assurance, frontend and backend developers). We can have the ultimate goal being that we commit the correct test cases to code but having a whole team try and install all the required binaries and libraries correctly seemed like a more daunting task vs having them just use a website. The site in question has a built in syntax helper, allows the user to fill in the user stories and tracks pass/fail rates. \nBehat has been monumental in accomplishing this with how great everything works but it was becoming cumbersome to herd files all the time, or to invoke behat using execs(). \n. We have a simplified Agile process (stand-ups, scrums, sprints, etc) and user stories are directly available in ticket tracking. Currently our issue is vastly different development systems... some users have virtual machines, some have mamp, some have wamp. Rather than put the development team on creating installation scripts and debug vastly different architectures we decided to build an app using the fabulous features of behat. You can extend it greatly with selenium automation, unit testing frameworks and all kinds of tools. Our eventual goal is to have jenkins (along with the jenkins pipeline plugins) run our CI process for us do tests before builds. At this point we have not reached these goals. We are in the process of getting people used to gherkin formatting and behat syntax, this is mainly part of adoption. \nThe webapp we built helps greatly with this in creating the tests themselves. They can be easily exported and stamped out to version control to eventually become part of the process. The webapp can then simply receive jenkins callbacks to run the full suite of tools.\n. We deploy one db and webserver per application along with associated services and configs. With the webapp I am speaking of it can quickly select that selenium connect to different urls to be able to test any phase of development whether that be dev, uat, qa, staging etc. With the data gathering abilities of the db we can see where in the process that a test failed much like most automated testing tools out there.\n. Currently the file stamping mechanism I have saves the features from the db write out to direct files that are stored in a directory that behat can run on. Each feature knows to which client they belong so my folder structure ends up being\n+-- /var/tests/behat\n|   +-- behat binaries\n|   +-- features\n|   |   +-- client_1\n|   |   |   +-- context_file_for_client_1\n|   |   |   +-- feature_tests_for_client_1\netc...\nAgain no problems with behat or the eventual goal of making features part of projects, I understand while you would want to keep that mantra for the project. Just looking for flexibility to running behat within a php environement without console. Otherwise people look at me funny for using exec for running behat T_T\n. ",
    "sentaidigital": "With a --debug or some number of -v flags, behat should provide more information about what it is doing.  Status messages normally suppressed like \"Trying to load behat.yml: not found\" or \"access denied\",  \"Loaded drupal-driver 1.0.0\", stuff like that.  Something, anything, to give those of us debugging a test suite an idea why it is doing what it is doing.\nIn my case, Behat did nothing, and provided no output (even with -v -v) to give me even the barest clue.\n. ",
    "LeoBenoist": ":+1: \n. ",
    "pjedrzejewski": "\ud83d\udc4d \n. ",
    "afurculita": "ping @ciaranmcnulty @everzet \n. ",
    "sergeyfedotov": "\nThis won't work, as you glob it based on the current working directory, while the path is expected to be related to the base path (which may be a different working directory).\n\nOh, sorry. I missed it.\n\nand this is also broken in case glob does not find anything and returns false.\n\nglob returns an empty array if found nothing\n. Actually this feature introduce a BC break. In the current implementation, an exception should be thrown when the imported file doesn't exists, but glob returns an empty array in this case and it is valid. May be an alternative syntax can be used. \nFor example:\nyaml\nimports:\n    - [ path/*/behat.yml ] # array should be processed by the glob\n    - path/to/behat.yml # scalar should be processed in the current manner\n. ",
    "caciobanu": "I'm not sure that the way the extension is coded now is the right way because I don't know the internals of Behat to well. But the code can be changed and adapted to be more in line with Behat.\n. Build is failing due to short array syntax. Do you want me to fix those also, in this PR ?. So 5.3 is not supported anymore? If yes maybe composer.json should be updated?. ",
    "Skullywag": "Also trying to do this, if you move the whole section, in my case:\nsuites:\n    default:\n      contexts:\n        - mysite\\Context\\FeatureContext:\n          - 'test'\n          - 'test2'\n        - Drupal\\DrupalExtension\\Context\\DrupalContext\n        - Drupal\\DrupalExtension\\Context\\MinkContext\n        - Drupal\\DrupalExtension\\Context\\MessageContext\n        - Drupal\\DrupalExtension\\Context\\DrushContext\ninto the imported config file it will work, imported config cannot overwrite the behat.yml config. Seems a bit wrong to have to copy the whole lot to the non git tracked file.\nEdit, ok after reading the above linked ticket it seems I should be putting config in behat.yml.dist and adding that to the repo, and put behat.yml in the gitignore.\n. If you pin behat/gherkin to version 4.4.5 (composer update obviously) and delete your behat_gherkin_cache folder from your temp folder (mine on windows was in the user/myname/appdata/local/temp folder) it will work again, see:\nhttps://github.com/Behat/Gherkin/issues/128 for more details.\nHope that helps someone.. ",
    "aronbeal": "I did, sorry about that.  Closing.\n. Never mind, I see upon further experimentation that there is less distinction between the two types than I thought. I leave my solution in case anyone else is interested.\nI was able to consolidate my tests using the regex matching step:\nphp\n/**\n* @Given /(?:a|the) ([^\\s]+) business:?/\n*/\npublic function theTypeBusiness($business_type, TableNode $table=NULL){\n}\nThe syntax of which obviates the need for quoted arguments.\n. ",
    "ijerry": "This is a \"scenario outline\" example.\nThis is not a transform table issue.\n. Any Takers ?\n.  /*\n     * @Transform :TIME_STAMP\n     /\n    public function transformTIME_STAMP()\n    {\n        return $this->date_stamp('Y-m-d H:i:s:u');\n    }\nLike this \n. for this data => \n|\"<TIME_STAMP>\"  |\n. I dont think this is a solution\nLooking at behat documentation on table transformations:\nAnything behind a colon refers to a column in the table ?\nclass FeatureContext implements Context\n{\n    /**\n     * @Transform table:name,followers\n     */\n. ",
    "1ma": "You are right, stof :+1: Thank you.\n. ",
    "walterdolce": "Err..didn't see v3.1.0 amongst the available versions shown by composer info behat/behat -a. :-P \nI was missing something in the end. All good now. Thanks!\nClosing.\n\n. I didn't know that. Thank you @Taluu !\nThis can be closed then. Is this documented anywhere? I didn't find this feature in the docs... Oh I missed that, thanks @edno !. Thanks @debo,  that could do the trick.\nI should have mentioned I am aware I could use just defined the step above as:\n```\nAnd I solve the Google CAPTCHA challenge on the login page\nAnd I solve the Google CAPTCHA challenge on the create account page\n```\nAnd so make the step really specific. But I am curious as to how people coming across this has solved the problem.. Oh. Never paid attention to the order parameter. Thanks Ciaran. That is most definitely useful.\nThis was more of a question rather than a bug report. I believe I got more insights than expected :)\nThanks both!. Same here. Getting the same error when running the tests from within PhpStorm.. This ceased to happen for me. \nI don't recall making substantial changes to the IDE and I'm still using the latest version of Behat (3.4.1). IIRC, I ran composer dumpautoload at some point, among the many project's code changes, but I can't tell whether that was the cause of the issue resolution.. Did you both update the referenced version of behat within the IDE and ran composer dumpautoload?\n. ",
    "kenorb": "Ok, thanks for explanation. I won't be able to provide gherkin file, since it has a lot of dependencies to internal classes which I'm using. This also happens with xdebug.max_nesting_level set to 4000, but I believe it works for 10000. Or by disabling Xdebug completely.\nI'll close it for now, in case I'll have more details if that's a bug, I'll provide further info. Thanks.\n. Related: sebastianbergmann/phpunit/issues/2585. There is no call PHPUnit_Framework_Assert in the custom Behat files, but I've seen some references in Behat sources.\nHere is the backtrace:\n```\nError: Class 'PHPUnit_Framework_Assert' not found in sites/all/tests/functional/cwtest_behat/src/Context/PageContext.php on line 185\nCall Stack:\n 1. {main}() sites/all/tests/functional/cwtest_behat/vendor/behat/behat/bin/behat:0\n 2. Behat\\Testwork\\Cli\\Application->run($input = ???, $output = ???) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/bin/behat:32\n 3. Behat\\Testwork\\Cli\\Application->doRun($input = class Symfony\\Component\\Console\\Input\\ArgvInput { private $tokens = array (0 => '-c', 1 => 'behat.yml', 2 => '--tags=@ad_package', 3 => '-p', 4 => 'chrome', 5 => '--stop-on-failure'); private $parsed = array (); protected $definition = class Symfony\\Component\\Console\\Input\\InputDefinition { private $arguments = array ('paths' => class Symfony\\Component\\Console\\Input\\InputArgument { ... }); private $requiredCount = 0; private $hasAnArrayArgument = FALSE; private $hasOptional = TRUE; private $options = array ('suite' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'format' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'out' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'format-settings' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'init' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'lang' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'name' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'tags' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'role' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'story-syntax' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'definitions' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'append-snippets' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-snippets' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'strict' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'order' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'rerun' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'stop-on-failure' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'dry-run' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'profile' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'config' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'verbose' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'help' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'config-reference' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'version' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-interaction' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'colors' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-colors' => class Symfony\\Component\\Console\\Input\\InputOption { ... }); private $shortcuts = array ('s' => 'suite', 'f' => 'format', 'o' => 'out', 'd' => 'definitions', 'p' => 'profile', 'c' => 'config', 'v' => 'verbose', 'h' => 'help', 'V' => 'version', 'n' => 'no-interaction') }; protected $stream = NULL; protected $options = array ('config' => 'behat.yml', 'tags' => array (0 => '@ad_package'), 'profile' => 'chrome', 'stop-on-failure' => TRUE); protected $arguments = array (); protected $interactive = TRUE }, $output = class Symfony\\Component\\Console\\Output\\ConsoleOutput { private $stderr = class Symfony\\Component\\Console\\Output\\StreamOutput { private $stream = resource(89) of type (stream); private ${Symfony\\Component\\Console\\Output\\Output}:verbosity = 32; private ${Symfony\\Component\\Console\\Output\\Output}:formatter = class Symfony\\Component\\Console\\Formatter\\OutputFormatter { private $decorated = FALSE; private $styles = array (...); private $styleStack = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleStack { ... } } }; private ${Symfony\\Component\\Console\\Output\\StreamOutput}:stream = resource(83) of type (stream); private ${Symfony\\Component\\Console\\Output\\Output}:verbosity = 32; private ${Symfony\\Component\\Console\\Output\\Output}:formatter = class Symfony\\Component\\Console\\Formatter\\OutputFormatter { private $decorated = FALSE; private $styles = array ('error' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'info' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'comment' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'question' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_regex' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_regex_capture' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_dimmed' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'snippet_keyword' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'snippet_undefined' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }); private $styleStack = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleStack { private $styles = array (...); private $emptyStyle = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... } } } }) sites/all/tests/functional/cwtest_behat/vendor/symfony/console/Application.php:125\n 4. Behat\\Testwork\\Cli\\Application->doRun($input = class Symfony\\Component\\Console\\Input\\ArgvInput { private $tokens = array (0 => '-c', 1 => 'behat.yml', 2 => '--tags=@ad_package', 3 => '-p', 4 => 'chrome', 5 => '--stop-on-failure'); private $parsed = array (); protected $definition = class Symfony\\Component\\Console\\Input\\InputDefinition { private $arguments = array ('paths' => class Symfony\\Component\\Console\\Input\\InputArgument { ... }); private $requiredCount = 0; private $hasAnArrayArgument = FALSE; private $hasOptional = TRUE; private $options = array ('suite' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'format' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'out' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'format-settings' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'init' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'lang' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'name' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'tags' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'role' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'story-syntax' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'definitions' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'append-snippets' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-snippets' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'strict' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'order' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'rerun' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'stop-on-failure' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'dry-run' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'profile' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'config' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'verbose' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'help' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'config-reference' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'version' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-interaction' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'colors' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-colors' => class Symfony\\Component\\Console\\Input\\InputOption { ... }); private $shortcuts = array ('s' => 'suite', 'f' => 'format', 'o' => 'out', 'd' => 'definitions', 'p' => 'profile', 'c' => 'config', 'v' => 'verbose', 'h' => 'help', 'V' => 'version', 'n' => 'no-interaction') }; protected $stream = NULL; protected $options = array ('config' => 'behat.yml', 'tags' => array (0 => '@ad_package'), 'profile' => 'chrome', 'stop-on-failure' => TRUE); protected $arguments = array (); protected $interactive = TRUE }, $output = class Symfony\\Component\\Console\\Output\\ConsoleOutput { private $stderr = class Symfony\\Component\\Console\\Output\\StreamOutput { private $stream = resource(89) of type (stream); private ${Symfony\\Component\\Console\\Output\\Output}:verbosity = 32; private ${Symfony\\Component\\Console\\Output\\Output}:formatter = class Symfony\\Component\\Console\\Formatter\\OutputFormatter { private $decorated = FALSE; private $styles = array (...); private $styleStack = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleStack { ... } } }; private ${Symfony\\Component\\Console\\Output\\StreamOutput}:stream = resource(83) of type (stream); private ${Symfony\\Component\\Console\\Output\\Output}:verbosity = 32; private ${Symfony\\Component\\Console\\Output\\Output}:formatter = class Symfony\\Component\\Console\\Formatter\\OutputFormatter { private $decorated = FALSE; private $styles = array ('error' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'info' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'comment' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'question' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_regex' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_regex_capture' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_dimmed' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'snippet_keyword' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'snippet_undefined' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }); private $styleStack = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleStack { private $styles = array (...); private $emptyStyle = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... } } } }) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Testwork/Cli/Application.php:121\n 5. Behat\\Testwork\\Cli\\Application->doRunCommand($command = class Behat\\Testwork\\Cli\\Command { private $controllers = array (0 => class Behat\\Testwork\\Autoloader\\Cli\\AutoloaderController { private $loader = class Symfony\\Component\\ClassLoader\\ClassLoader { ... } }, 1 => class Behat\\Testwork\\Exception\\Cli\\VerbosityController { private $exceptionPresenter = class Behat\\Testwork\\Exception\\ExceptionPresenter { ... } }, 2 => class Behat\\Testwork\\EventDispatcher\\Cli\\SigintController { private $eventDispatcher = class Behat\\Testwork\\EventDispatcher\\TestworkEventDispatcher { ... } }, 3 => class Behat\\Behat\\Translator\\Cli\\GherkinTranslationsController { private $translator = class Symfony\\Component\\Translation\\Translator { ... } }, 4 => class Behat\\Testwork\\Suite\\Cli\\SuiteController { private $registry = class Behat\\Testwork\\Suite\\SuiteRegistry { ... }; private $suiteConfigurations = array (...) }, 5 => class Behat\\Testwork\\Output\\Cli\\OutputController { private $manager = class Behat\\Testwork\\Output\\OutputManager { ... } }, 6 => class Behat\\Testwork\\Suite\\Cli\\InitializationController { private $repository = class Behat\\Testwork\\Suite\\SuiteRegistry { ... }; private $bootstrapper = class Behat\\Testwork\\Suite\\SuiteBootstrapper { ... } }, 7 => class Behat\\Testwork\\Translator\\Cli\\LanguageController { private $translator = class Symfony\\Component\\Translation\\Translator { ... } }, 8 => class Behat\\Behat\\Gherkin\\Cli\\FilterController { private $gherkin = class Behat\\Gherkin\\Gherkin { ... } }, 9 => class Behat\\Behat\\Gherkin\\Cli\\SyntaxController { private $keywordsDumper = class Behat\\Gherkin\\Keywords\\KeywordsDumper { ... }; private $translator = class Symfony\\Component\\Translation\\Translator { ... } }, 10 => class Behat\\Behat\\Definition\\Cli\\AvailableDefinitionsController { private $suiteRepository = class Behat\\Testwork\\Suite\\SuiteRegistry { ... }; private $writer = class Behat\\Behat\\Definition\\DefinitionWriter { ... }; private $listPrinter = class Behat\\Behat\\Definition\\Printer\\ConsoleDefinitionListPrinter { ... }; private $infoPrinter = class Behat\\Behat\\Definition\\Printer\\ConsoleDefinitionInformationPrinter { ... } }, 11 => class Behat\\Behat\\Snippet\\Cli\\SnippetsController { private $registry = class Behat\\Behat\\Snippet\\SnippetRegistry { ... }; private $writer = class Behat\\Behat\\Snippet\\SnippetWriter { ... }; private $printer = class Behat\\Behat\\Snippet\\Printer\\ConsoleSnippetPrinter { ... }; private $eventDispatcher = class Behat\\Testwork\\EventDispatcher\\TestworkEventDispatcher { ... }; private $output = class Symfony\\Component\\Console\\Output\\ConsoleOutput { ... } }, 12 => class Behat\\Testwork\\Tester\\Cli\\StrictController { private $resultInterpreter = class Behat\\Testwork\\Tester\\Result\\ResultInterpreter { ... }; private $strict = FALSE }, 13 => class Behat\\Testwork\\Ordering\\Cli\\OrderController { private $eventDispatcher = class Behat\\Testwork\\EventDispatcher\\TestworkEventDispatcher { ... }; private $exercise = class Behat\\Testwork\\Ordering\\OrderedExercise { ... }; private $orderers = array (...) }, 14 => class Behat\\Behat\\Tester\\Cli\\RerunController { private $eventDispatcher = class Behat\\Testwork\\EventDispatcher\\TestworkEventDispatcher { ... }; private $cachePath = '/var/folders/vp/tlt7xf791gl1_v56m0xdmrph0000gn/T/behat_rerun_cache'; private $key = 'c24441012c97e4d695122dbf2913e856'; private $lines = array (...) }, 15 => class Behat\\Behat\\EventDispatcher\\Cli\\StopOnFailureController { private $eventDispatcher = class Behat\\Testwork\\EventDispatcher\\TestworkEventDispatcher { ... } }, 16 => class Behat\\Testwork\\Tester\\Cli\\ExerciseController { private $suiteRepository = class Behat\\Testwork\\Suite\\SuiteRegistry { ... }; private $specificationFinder = class Behat\\Testwork\\Specification\\SpecificationFinder { ... }; private $exercise = class Behat\\Testwork\\Ordering\\OrderedExercise { ... }; private $resultInterpreter = class Behat\\Testwork\\Tester\\Result\\ResultInterpreter { ... }; private $skip = FALSE }); private ${Symfony\\Component\\Console\\Command\\Command}:application = class Behat\\Testwork\\Cli\\Application { private $configurationLoader = class Behat\\Testwork\\ServiceContainer\\Configuration\\ConfigurationLoader { private $configurationPath = 'behat.yml'; private $environmentVariable = 'BEHAT_PARAMS'; private $profileFound = TRUE }; private $extensionManager = class Behat\\Testwork\\ServiceContainer\\ExtensionManager { private $extensionsPath = NULL; private $extensions = array (...); private $locatedExtensions = array (...) }; private ${Symfony\\Component\\Console\\Application}:commands = array ('help' => class Symfony\\Component\\Console\\Command\\HelpCommand { ... }, 'list' => class Symfony\\Component\\Console\\Command\\ListCommand { ... }, 'dump-reference' => class Behat\\Testwork\\Cli\\DumpReferenceCommand { ... }, 'behat' => ...); private ${Symfony\\Component\\Console\\Application}:wantHelps = FALSE; private ${Symfony\\Component\\Console\\Application}:runningCommand = ...; private ${Symfony\\Component\\Console\\Application}:name = 'behat'; private ${Symfony\\Component\\Console\\Application}:version = '3.1.0'; private ${Symfony\\Component\\Console\\Application}:catchExceptions = TRUE; private ${Symfony\\Component\\Console\\Application}:autoExit = TRUE; private ${Symfony\\Component\\Console\\Application}:definition = class Symfony\\Component\\Console\\Input\\InputDefinition { private $arguments = array (...); private $requiredCount = 0; private $hasAnArrayArgument = FALSE; private $hasOptional = FALSE; private $options = array (...); private $shortcuts = array (...) }; private ${Symfony\\Component\\Console\\Application}:helperSet = class Symfony\\Component\\Console\\Helper\\HelperSet { private $helpers = array (...); private $command = NULL }; private ${Symfony\\Component\\Console\\Application}:dispatcher = NULL; private ${Symfony\\Component\\Console\\Application}:terminal = class Symfony\\Component\\Console\\Terminal {  }; private ${Symfony\\Component\\Console\\Application}:defaultCommand = 'list'; private ${Symfony\\Component\\Console\\Application}:singleCommand = NULL }; private ${Symfony\\Component\\Console\\Command\\Command}:name = 'behat'; private ${Symfony\\Component\\Console\\Command\\Command}:processTitle = NULL; private ${Symfony\\Component\\Console\\Command\\Command}:aliases = array (); private ${Symfony\\Component\\Console\\Command\\Command}:definition = class Symfony\\Component\\Console\\Input\\InputDefinition { private $arguments = array ('paths' => class Symfony\\Component\\Console\\Input\\InputArgument { ... }); private $requiredCount = 0; private $hasAnArrayArgument = FALSE; private $hasOptional = TRUE; private $options = array ('suite' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'format' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'out' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'format-settings' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'init' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'lang' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'name' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'tags' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'role' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'story-syntax' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'definitions' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'append-snippets' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-snippets' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'strict' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'order' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'rerun' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'stop-on-failure' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'dry-run' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'profile' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'config' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'verbose' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'help' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'config-reference' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'version' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-interaction' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'colors' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-colors' => class Symfony\\Component\\Console\\Input\\InputOption { ... }); private $shortcuts = array ('s' => 'suite', 'f' => 'format', 'o' => 'out', 'd' => 'definitions', 'p' => 'profile', 'c' => 'config', 'v' => 'verbose', 'h' => 'help', 'V' => 'version', 'n' => 'no-interaction') }; private ${Symfony\\Component\\Console\\Command\\Command}:hidden = FALSE; private ${Symfony\\Component\\Console\\Command\\Command}:help = NULL; private ${Symfony\\Component\\Console\\Command\\Command}:description = NULL; private ${Symfony\\Component\\Console\\Command\\Command}:ignoreValidationErrors = FALSE; private ${Symfony\\Component\\Console\\Command\\Command}:applicationDefinitionMerged = TRUE; private ${Symfony\\Component\\Console\\Command\\Command}:applicationDefinitionMergedWithArgs = TRUE; private ${Symfony\\Component\\Console\\Command\\Command}:code = NULL; private ${Symfony\\Component\\Console\\Command\\Command}:synopsis = array ('short' => 'behat [options] [--] []', 'long' => 'behat [-s|--suite SUITE] [-f|--format FORMAT] [-o|--out OUT] [--format-settings FORMAT-SETTINGS] [--init] [--lang LANG] [--name NAME] [--tags TAGS] [--role ROLE] [--story-syntax] [-d|--definitions DEFINITIONS] [--append-snippets] [--no-snippets] [--strict] [--order ORDER] [--rerun] [--stop-on-failure] [--dry-run] [--] []'); private ${Symfony\\Component\\Console\\Command\\Command}:usages = array (); private ${Symfony\\Component\\Console\\Command\\Command}:helperSet = class Symfony\\Component\\Console\\Helper\\HelperSet { private $helpers = array ('formatter' => class Symfony\\Component\\Console\\Helper\\FormatterHelper { ... }, 'debug_formatter' => class Symfony\\Component\\Console\\Helper\\DebugFormatterHelper { ... }, 'process' => class Symfony\\Component\\Console\\Helper\\ProcessHelper { ... }, 'question' => class Symfony\\Component\\Console\\Helper\\QuestionHelper { ... }); private $command = NULL } }, $input = class Symfony\\Component\\Console\\Input\\ArgvInput { private $tokens = array (0 => '-c', 1 => 'behat.yml', 2 => '--tags=@ad_package', 3 => '-p', 4 => 'chrome', 5 => '--stop-on-failure'); private $parsed = array (); protected $definition = class Symfony\\Component\\Console\\Input\\InputDefinition { private $arguments = array ('paths' => class Symfony\\Component\\Console\\Input\\InputArgument { ... }); private $requiredCount = 0; private $hasAnArrayArgument = FALSE; private $hasOptional = TRUE; private $options = array ('suite' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'format' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'out' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'format-settings' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'init' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'lang' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'name' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'tags' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'role' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'story-syntax' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'definitions' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'append-snippets' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-snippets' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'strict' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'order' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'rerun' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'stop-on-failure' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'dry-run' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'profile' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'config' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'verbose' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'help' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'config-reference' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'version' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-interaction' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'colors' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-colors' => class Symfony\\Component\\Console\\Input\\InputOption { ... }); private $shortcuts = array ('s' => 'suite', 'f' => 'format', 'o' => 'out', 'd' => 'definitions', 'p' => 'profile', 'c' => 'config', 'v' => 'verbose', 'h' => 'help', 'V' => 'version', 'n' => 'no-interaction') }; protected $stream = NULL; protected $options = array ('config' => 'behat.yml', 'tags' => array (0 => '@ad_package'), 'profile' => 'chrome', 'stop-on-failure' => TRUE); protected $arguments = array (); protected $interactive = TRUE }, $output = class Symfony\\Component\\Console\\Output\\ConsoleOutput { private $stderr = class Symfony\\Component\\Console\\Output\\StreamOutput { private $stream = resource(89) of type (stream); private ${Symfony\\Component\\Console\\Output\\Output}:verbosity = 32; private ${Symfony\\Component\\Console\\Output\\Output}:formatter = class Symfony\\Component\\Console\\Formatter\\OutputFormatter { private $decorated = FALSE; private $styles = array (...); private $styleStack = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleStack { ... } } }; private ${Symfony\\Component\\Console\\Output\\StreamOutput}:stream = resource(83) of type (stream); private ${Symfony\\Component\\Console\\Output\\Output}:verbosity = 32; private ${Symfony\\Component\\Console\\Output\\Output}:formatter = class Symfony\\Component\\Console\\Formatter\\OutputFormatter { private $decorated = FALSE; private $styles = array ('error' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'info' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'comment' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'question' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_regex' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_regex_capture' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_dimmed' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'snippet_keyword' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'snippet_undefined' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }); private $styleStack = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleStack { private $styles = array (...); private $emptyStyle = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... } } } }) sites/all/tests/functional/cwtest_behat/vendor/symfony/console/Application.php:201\n 6. Behat\\Testwork\\Cli\\Command->run($input = class Symfony\\Component\\Console\\Input\\ArgvInput { private $tokens = array (0 => '-c', 1 => 'behat.yml', 2 => '--tags=@ad_package', 3 => '-p', 4 => 'chrome', 5 => '--stop-on-failure'); private $parsed = array (); protected $definition = class Symfony\\Component\\Console\\Input\\InputDefinition { private $arguments = array ('paths' => class Symfony\\Component\\Console\\Input\\InputArgument { ... }); private $requiredCount = 0; private $hasAnArrayArgument = FALSE; private $hasOptional = TRUE; private $options = array ('suite' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'format' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'out' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'format-settings' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'init' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'lang' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'name' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'tags' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'role' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'story-syntax' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'definitions' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'append-snippets' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-snippets' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'strict' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'order' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'rerun' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'stop-on-failure' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'dry-run' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'profile' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'config' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'verbose' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'help' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'config-reference' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'version' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-interaction' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'colors' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-colors' => class Symfony\\Component\\Console\\Input\\InputOption { ... }); private $shortcuts = array ('s' => 'suite', 'f' => 'format', 'o' => 'out', 'd' => 'definitions', 'p' => 'profile', 'c' => 'config', 'v' => 'verbose', 'h' => 'help', 'V' => 'version', 'n' => 'no-interaction') }; protected $stream = NULL; protected $options = array ('config' => 'behat.yml', 'tags' => array (0 => '@ad_package'), 'profile' => 'chrome', 'stop-on-failure' => TRUE); protected $arguments = array (); protected $interactive = TRUE }, $output = class Symfony\\Component\\Console\\Output\\ConsoleOutput { private $stderr = class Symfony\\Component\\Console\\Output\\StreamOutput { private $stream = resource(89) of type (stream); private ${Symfony\\Component\\Console\\Output\\Output}:verbosity = 32; private ${Symfony\\Component\\Console\\Output\\Output}:formatter = class Symfony\\Component\\Console\\Formatter\\OutputFormatter { private $decorated = FALSE; private $styles = array (...); private $styleStack = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleStack { ... } } }; private ${Symfony\\Component\\Console\\Output\\StreamOutput}:stream = resource(83) of type (stream); private ${Symfony\\Component\\Console\\Output\\Output}:verbosity = 32; private ${Symfony\\Component\\Console\\Output\\Output}:formatter = class Symfony\\Component\\Console\\Formatter\\OutputFormatter { private $decorated = FALSE; private $styles = array ('error' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'info' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'comment' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'question' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_regex' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_regex_capture' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_dimmed' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'snippet_keyword' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'snippet_undefined' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }); private $styleStack = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleStack { private $styles = array (...); private $emptyStyle = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... } } } }) sites/all/tests/functional/cwtest_behat/vendor/symfony/console/Application.php:836\n 7. Behat\\Testwork\\Cli\\Command->execute($input = class Symfony\\Component\\Console\\Input\\ArgvInput { private $tokens = array (0 => '-c', 1 => 'behat.yml', 2 => '--tags=@ad_package', 3 => '-p', 4 => 'chrome', 5 => '--stop-on-failure'); private $parsed = array (); protected $definition = class Symfony\\Component\\Console\\Input\\InputDefinition { private $arguments = array ('paths' => class Symfony\\Component\\Console\\Input\\InputArgument { ... }); private $requiredCount = 0; private $hasAnArrayArgument = FALSE; private $hasOptional = TRUE; private $options = array ('suite' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'format' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'out' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'format-settings' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'init' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'lang' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'name' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'tags' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'role' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'story-syntax' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'definitions' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'append-snippets' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-snippets' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'strict' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'order' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'rerun' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'stop-on-failure' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'dry-run' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'profile' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'config' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'verbose' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'help' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'config-reference' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'version' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-interaction' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'colors' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-colors' => class Symfony\\Component\\Console\\Input\\InputOption { ... }); private $shortcuts = array ('s' => 'suite', 'f' => 'format', 'o' => 'out', 'd' => 'definitions', 'p' => 'profile', 'c' => 'config', 'v' => 'verbose', 'h' => 'help', 'V' => 'version', 'n' => 'no-interaction') }; protected $stream = NULL; protected $options = array ('config' => 'behat.yml', 'tags' => array (0 => '@ad_package'), 'profile' => 'chrome', 'stop-on-failure' => TRUE); protected $arguments = array (); protected $interactive = TRUE }, $output = class Symfony\\Component\\Console\\Output\\ConsoleOutput { private $stderr = class Symfony\\Component\\Console\\Output\\StreamOutput { private $stream = resource(89) of type (stream); private ${Symfony\\Component\\Console\\Output\\Output}:verbosity = 32; private ${Symfony\\Component\\Console\\Output\\Output}:formatter = class Symfony\\Component\\Console\\Formatter\\OutputFormatter { private $decorated = FALSE; private $styles = array (...); private $styleStack = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleStack { ... } } }; private ${Symfony\\Component\\Console\\Output\\StreamOutput}:stream = resource(83) of type (stream); private ${Symfony\\Component\\Console\\Output\\Output}:verbosity = 32; private ${Symfony\\Component\\Console\\Output\\Output}:formatter = class Symfony\\Component\\Console\\Formatter\\OutputFormatter { private $decorated = FALSE; private $styles = array ('error' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'info' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'comment' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'question' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_regex' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_regex_capture' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_dimmed' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'snippet_keyword' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'snippet_undefined' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }); private $styleStack = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleStack { private $styles = array (...); private $emptyStyle = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... } } } }) sites/all/tests/functional/cwtest_behat/vendor/symfony/console/Command/Command.php:264\n 8. Behat\\Testwork\\Tester\\Cli\\ExerciseController->execute($input = class Symfony\\Component\\Console\\Input\\ArgvInput { private $tokens = array (0 => '-c', 1 => 'behat.yml', 2 => '--tags=@ad_package', 3 => '-p', 4 => 'chrome', 5 => '--stop-on-failure'); private $parsed = array (); protected $definition = class Symfony\\Component\\Console\\Input\\InputDefinition { private $arguments = array ('paths' => class Symfony\\Component\\Console\\Input\\InputArgument { ... }); private $requiredCount = 0; private $hasAnArrayArgument = FALSE; private $hasOptional = TRUE; private $options = array ('suite' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'format' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'out' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'format-settings' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'init' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'lang' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'name' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'tags' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'role' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'story-syntax' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'definitions' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'append-snippets' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-snippets' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'strict' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'order' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'rerun' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'stop-on-failure' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'dry-run' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'profile' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'config' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'verbose' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'help' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'config-reference' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'version' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-interaction' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'colors' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-colors' => class Symfony\\Component\\Console\\Input\\InputOption { ... }); private $shortcuts = array ('s' => 'suite', 'f' => 'format', 'o' => 'out', 'd' => 'definitions', 'p' => 'profile', 'c' => 'config', 'v' => 'verbose', 'h' => 'help', 'V' => 'version', 'n' => 'no-interaction') }; protected $stream = NULL; protected $options = array ('config' => 'behat.yml', 'tags' => array (0 => '@ad_package'), 'profile' => 'chrome', 'stop-on-failure' => TRUE); protected $arguments = array (); protected $interactive = TRUE }, $output = class Symfony\\Component\\Console\\Output\\ConsoleOutput { private $stderr = class Symfony\\Component\\Console\\Output\\StreamOutput { private $stream = resource(89) of type (stream); private ${Symfony\\Component\\Console\\Output\\Output}:verbosity = 32; private ${Symfony\\Component\\Console\\Output\\Output}:formatter = class Symfony\\Component\\Console\\Formatter\\OutputFormatter { private $decorated = FALSE; private $styles = array (...); private $styleStack = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleStack { ... } } }; private ${Symfony\\Component\\Console\\Output\\StreamOutput}:stream = resource(83) of type (stream); private ${Symfony\\Component\\Console\\Output\\Output}:verbosity = 32; private ${Symfony\\Component\\Console\\Output\\Output}:formatter = class Symfony\\Component\\Console\\Formatter\\OutputFormatter { private $decorated = FALSE; private $styles = array ('error' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'info' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'comment' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'question' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_regex' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_regex_capture' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'def_dimmed' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'snippet_keyword' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }, 'snippet_undefined' => class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... }); private $styleStack = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleStack { private $styles = array (...); private $emptyStyle = class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle { ... } } } }) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Testwork/Cli/Command.php:63\n 9. Behat\\Testwork\\Tester\\Cli\\ExerciseController->testSpecifications($input = class Symfony\\Component\\Console\\Input\\ArgvInput { private $tokens = array (0 => '-c', 1 => 'behat.yml', 2 => '--tags=@ad_package', 3 => '-p', 4 => 'chrome', 5 => '--stop-on-failure'); private $parsed = array (); protected $definition = class Symfony\\Component\\Console\\Input\\InputDefinition { private $arguments = array ('paths' => class Symfony\\Component\\Console\\Input\\InputArgument { ... }); private $requiredCount = 0; private $hasAnArrayArgument = FALSE; private $hasOptional = TRUE; private $options = array ('suite' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'format' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'out' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'format-settings' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'init' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'lang' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'name' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'tags' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'role' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'story-syntax' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'definitions' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'append-snippets' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-snippets' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'strict' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'order' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'rerun' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'stop-on-failure' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'dry-run' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'profile' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'config' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'verbose' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'help' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'config-reference' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'version' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-interaction' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'colors' => class Symfony\\Component\\Console\\Input\\InputOption { ... }, 'no-colors' => class Symfony\\Component\\Console\\Input\\InputOption { ... }); private $shortcuts = array ('s' => 'suite', 'f' => 'format', 'o' => 'out', 'd' => 'definitions', 'p' => 'profile', 'c' => 'config', 'v' => 'verbose', 'h' => 'help', 'V' => 'version', 'n' => 'no-interaction') }; protected $stream = NULL; protected $options = array ('config' => 'behat.yml', 'tags' => array (0 => '@ad_package'), 'profile' => 'chrome', 'stop-on-failure' => TRUE); protected $arguments = array (); protected $interactive = TRUE }, $specifications = array (0 => class Behat\\Behat\\Gherkin\\Specification\\LazyFeatureIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array (...) }; private $gherkin = class Behat\\Gherkin\\Gherkin { protected $loaders = array (...); protected $filters = array (...) }; private $paths = array (0 => 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature', 1 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Article.feature', 2 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Boxout.feature', 3 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Card.feature', 4 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Cartoon.feature', 5 => 'sites/all/tests/functional/cwtest_behat/Behat/features/CartoonTaxonomy.feature', 6 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Config.feature', 7 => 'sites/all/tests/functional/cwtest_behat/Behat/features/DTILinkAndSync.feature', 8 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Edition.feature', 9 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Headshot.feature', 10 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Login.feature', 11 => 'sites/all/tests/functional/cwtest_behat/Behat/features/NewEditions.feature', 12 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Package.feature', 13 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Picnrun.feature', 14 => 'sites/all/tests/functional/cwtest_behat/Behat/features/PublishedEditions.feature', 15 => 'sites/all/tests/functional/cwtest_behat/Behat/features/custom_moduleEdition.feature', 16 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Puzzle.feature', 17 => 'sites/all/tests/functional/cwtest_behat/Behat/features/RolesPermissions.feature', 18 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Section.feature', 19 => 'sites/all/tests/functional/cwtest_behat/Behat/features/SectionTaxonomy.feature', 20 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Share.feature', 21 => 'sites/all/tests/functional/cwtest_behat/Behat/features/SkeletonGenerator.feature'); private $filters = array (0 => class Behat\\Gherkin\\Filter\\TagFilter { ... }); private $position = 1; private $features = array (); private $currentFeature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (...); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { ... }; private $scenarios = array (...); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 } }, 1 => class Behat\\Testwork\\Specification\\NoSpecificationsIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array (...) } })) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Testwork/Tester/Cli/ExerciseController.php:108\n10. Behat\\Testwork\\Ordering\\OrderedExercise->test($iterators = array (0 => class Behat\\Behat\\Gherkin\\Specification\\LazyFeatureIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array (...) }; private $gherkin = class Behat\\Gherkin\\Gherkin { protected $loaders = array (...); protected $filters = array (...) }; private $paths = array (0 => 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature', 1 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Article.feature', 2 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Boxout.feature', 3 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Card.feature', 4 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Cartoon.feature', 5 => 'sites/all/tests/functional/cwtest_behat/Behat/features/CartoonTaxonomy.feature', 6 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Config.feature', 7 => 'sites/all/tests/functional/cwtest_behat/Behat/features/DTILinkAndSync.feature', 8 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Edition.feature', 9 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Headshot.feature', 10 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Login.feature', 11 => 'sites/all/tests/functional/cwtest_behat/Behat/features/NewEditions.feature', 12 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Package.feature', 13 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Picnrun.feature', 14 => 'sites/all/tests/functional/cwtest_behat/Behat/features/PublishedEditions.feature', 15 => 'sites/all/tests/functional/cwtest_behat/Behat/features/custom_moduleEdition.feature', 16 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Puzzle.feature', 17 => 'sites/all/tests/functional/cwtest_behat/Behat/features/RolesPermissions.feature', 18 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Section.feature', 19 => 'sites/all/tests/functional/cwtest_behat/Behat/features/SectionTaxonomy.feature', 20 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Share.feature', 21 => 'sites/all/tests/functional/cwtest_behat/Behat/features/SkeletonGenerator.feature'); private $filters = array (0 => class Behat\\Gherkin\\Filter\\TagFilter { ... }); private $position = 1; private $features = array (); private $currentFeature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (...); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { ... }; private $scenarios = array (...); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 } }, 1 => class Behat\\Testwork\\Specification\\NoSpecificationsIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array (...) } }), $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Testwork/Tester/Cli/ExerciseController.php:146\n11. Behat\\Testwork\\EventDispatcher\\Tester\\EventDispatchingExercise->test($iterators = array (0 => class Behat\\Behat\\Gherkin\\Specification\\LazyFeatureIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array (...) }; private $gherkin = class Behat\\Gherkin\\Gherkin { protected $loaders = array (...); protected $filters = array (...) }; private $paths = array (0 => 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature', 1 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Article.feature', 2 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Boxout.feature', 3 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Card.feature', 4 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Cartoon.feature', 5 => 'sites/all/tests/functional/cwtest_behat/Behat/features/CartoonTaxonomy.feature', 6 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Config.feature', 7 => 'sites/all/tests/functional/cwtest_behat/Behat/features/DTILinkAndSync.feature', 8 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Edition.feature', 9 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Headshot.feature', 10 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Login.feature', 11 => 'sites/all/tests/functional/cwtest_behat/Behat/features/NewEditions.feature', 12 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Package.feature', 13 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Picnrun.feature', 14 => 'sites/all/tests/functional/cwtest_behat/Behat/features/PublishedEditions.feature', 15 => 'sites/all/tests/functional/cwtest_behat/Behat/features/custom_moduleEdition.feature', 16 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Puzzle.feature', 17 => 'sites/all/tests/functional/cwtest_behat/Behat/features/RolesPermissions.feature', 18 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Section.feature', 19 => 'sites/all/tests/functional/cwtest_behat/Behat/features/SectionTaxonomy.feature', 20 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Share.feature', 21 => 'sites/all/tests/functional/cwtest_behat/Behat/features/SkeletonGenerator.feature'); private $filters = array (0 => class Behat\\Gherkin\\Filter\\TagFilter { ... }); private $position = 1; private $features = array (); private $currentFeature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (...); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { ... }; private $scenarios = array (...); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 } }, 1 => class Behat\\Testwork\\Specification\\NoSpecificationsIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array (...) } }), $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Testwork/Ordering/OrderedExercise.php:80\n12. Behat\\Testwork\\Tester\\Runtime\\RuntimeExercise->test($iterators = array (0 => class Behat\\Behat\\Gherkin\\Specification\\LazyFeatureIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array (...) }; private $gherkin = class Behat\\Gherkin\\Gherkin { protected $loaders = array (...); protected $filters = array (...) }; private $paths = array (0 => 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature', 1 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Article.feature', 2 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Boxout.feature', 3 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Card.feature', 4 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Cartoon.feature', 5 => 'sites/all/tests/functional/cwtest_behat/Behat/features/CartoonTaxonomy.feature', 6 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Config.feature', 7 => 'sites/all/tests/functional/cwtest_behat/Behat/features/DTILinkAndSync.feature', 8 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Edition.feature', 9 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Headshot.feature', 10 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Login.feature', 11 => 'sites/all/tests/functional/cwtest_behat/Behat/features/NewEditions.feature', 12 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Package.feature', 13 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Picnrun.feature', 14 => 'sites/all/tests/functional/cwtest_behat/Behat/features/PublishedEditions.feature', 15 => 'sites/all/tests/functional/cwtest_behat/Behat/features/custom_moduleEdition.feature', 16 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Puzzle.feature', 17 => 'sites/all/tests/functional/cwtest_behat/Behat/features/RolesPermissions.feature', 18 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Section.feature', 19 => 'sites/all/tests/functional/cwtest_behat/Behat/features/SectionTaxonomy.feature', 20 => 'sites/all/tests/functional/cwtest_behat/Behat/features/Share.feature', 21 => 'sites/all/tests/functional/cwtest_behat/Behat/features/SkeletonGenerator.feature'); private $filters = array (0 => class Behat\\Gherkin\\Filter\\TagFilter { ... }); private $position = 1; private $features = array (); private $currentFeature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (...); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { ... }; private $scenarios = array (...); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 } }, 1 => class Behat\\Testwork\\Specification\\NoSpecificationsIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array (...) } }), $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Testwork/EventDispatcher/Tester/EventDispatchingExercise.php:70\n13. Behat\\Testwork\\EventDispatcher\\Tester\\EventDispatchingSuiteTester->test($env = class Behat\\Behat\\Context\\Environment\\UninitializedContextEnvironment { private $contextClasses = array ('CWTest\\Context\\AdPackageContext' => array (), 'CWTest\\Context\\AllEditionsContext' => array (), 'CWTest\\Context\\ArticleContext' => array (), 'CWTest\\Context\\BoxoutContext' => array (), 'CWTest\\Context\\CardContext' => array (), 'CWTest\\Context\\CartoonContext' => array (), 'CWTest\\Context\\CartoonTaxonomyContext' => array (), 'CWTest\\Context\\ContentXMLContext' => array (), 'CWTest\\Context\\DeadLinkContext' => array (), 'CWTest\\Context\\DTILinkContext' => array (), 'CWTest\\Context\\DTISyncContext' => array (), 'CWTest\\Context\\EditionContext' => array (), 'CWTest\\Context\\EditionEditorContext' => array (), 'CWTest\\Context\\EditionPreviewContext' => array (), 'CWTest\\Context\\FirebaseContext' => array (), 'CWTest\\Context\\HeadshotContext' => array (), 'CWTest\\Context\\LoginContext' => array (), 'CWTest\\Context\\MyAccountContext' => array (), 'CWTest\\Context\\NewEditionsContext' => array (), 'CWTest\\Context\\PackageContext' => array (), 'CWTest\\Context\\PackageSyncStatusContext' => array (), 'CWTest\\Context\\PicnrunContext' => array (), 'CWTest\\Context\\PublishedEditionsContext' => array (), 'CWTest\\Context\\custom_moduleEditionContext' => array (), 'CWTest\\Context\\PuzzleContext' => array (), 'CWTest\\Context\\SectionContext' => array (), 'CWTest\\Context\\SectionTaxonomyContext' => array (), 'CWTest\\Context\\SkeletonGeneratorContext' => array (), 'CWTest\\Context\\SkippingEditionContext' => array (), 'CWTest\\Context\\UpdateAnnouncementContext' => array (), 'CWTest\\Context\\HelperContext' => array ('parameters' => array (...)), 'Drupal\\DrupalExtension\\Context\\MinkContext' => array (), 'Drupal\\DrupalExtension\\Context\\DrupalContext' => array ()); private ${Behat\\Testwork\\Environment\\StaticEnvironment}:suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) } }, $iterator = class Behat\\Testwork\\Specification\\GroupedSpecificationIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) }; private $iterators = array (0 => class Behat\\Behat\\Gherkin\\Specification\\LazyFeatureIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { ... }; private $gherkin = class Behat\\Gherkin\\Gherkin { ... }; private $paths = array (...); private $filters = array (...); private $position = 1; private $features = array (...); private $currentFeature = class Behat\\Gherkin\\Node\\FeatureNode { ... } }, 1 => class Behat\\Testwork\\Specification\\NoSpecificationsIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { ... } }); private $position = 0 }, $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Testwork/Tester/Runtime/RuntimeExercise.php:71\n14. Behat\\Testwork\\Hook\\Tester\\HookableSuiteTester->test($env = class Behat\\Behat\\Context\\Environment\\UninitializedContextEnvironment { private $contextClasses = array ('CWTest\\Context\\AdPackageContext' => array (), 'CWTest\\Context\\AllEditionsContext' => array (), 'CWTest\\Context\\ArticleContext' => array (), 'CWTest\\Context\\BoxoutContext' => array (), 'CWTest\\Context\\CardContext' => array (), 'CWTest\\Context\\CartoonContext' => array (), 'CWTest\\Context\\CartoonTaxonomyContext' => array (), 'CWTest\\Context\\ContentXMLContext' => array (), 'CWTest\\Context\\DeadLinkContext' => array (), 'CWTest\\Context\\DTILinkContext' => array (), 'CWTest\\Context\\DTISyncContext' => array (), 'CWTest\\Context\\EditionContext' => array (), 'CWTest\\Context\\EditionEditorContext' => array (), 'CWTest\\Context\\EditionPreviewContext' => array (), 'CWTest\\Context\\FirebaseContext' => array (), 'CWTest\\Context\\HeadshotContext' => array (), 'CWTest\\Context\\LoginContext' => array (), 'CWTest\\Context\\MyAccountContext' => array (), 'CWTest\\Context\\NewEditionsContext' => array (), 'CWTest\\Context\\PackageContext' => array (), 'CWTest\\Context\\PackageSyncStatusContext' => array (), 'CWTest\\Context\\PicnrunContext' => array (), 'CWTest\\Context\\PublishedEditionsContext' => array (), 'CWTest\\Context\\custom_moduleEditionContext' => array (), 'CWTest\\Context\\PuzzleContext' => array (), 'CWTest\\Context\\SectionContext' => array (), 'CWTest\\Context\\SectionTaxonomyContext' => array (), 'CWTest\\Context\\SkeletonGeneratorContext' => array (), 'CWTest\\Context\\SkippingEditionContext' => array (), 'CWTest\\Context\\UpdateAnnouncementContext' => array (), 'CWTest\\Context\\HelperContext' => array ('parameters' => array (...)), 'Drupal\\DrupalExtension\\Context\\MinkContext' => array (), 'Drupal\\DrupalExtension\\Context\\DrupalContext' => array ()); private ${Behat\\Testwork\\Environment\\StaticEnvironment}:suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) } }, $iterator = class Behat\\Testwork\\Specification\\GroupedSpecificationIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) }; private $iterators = array (0 => class Behat\\Behat\\Gherkin\\Specification\\LazyFeatureIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { ... }; private $gherkin = class Behat\\Gherkin\\Gherkin { ... }; private $paths = array (...); private $filters = array (...); private $position = 1; private $features = array (...); private $currentFeature = class Behat\\Gherkin\\Node\\FeatureNode { ... } }, 1 => class Behat\\Testwork\\Specification\\NoSpecificationsIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { ... } }); private $position = 0 }, $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Testwork/EventDispatcher/Tester/EventDispatchingSuiteTester.php:72\n15. Behat\\Testwork\\Tester\\Runtime\\RuntimeSuiteTester->test($env = class Behat\\Behat\\Context\\Environment\\UninitializedContextEnvironment { private $contextClasses = array ('CWTest\\Context\\AdPackageContext' => array (), 'CWTest\\Context\\AllEditionsContext' => array (), 'CWTest\\Context\\ArticleContext' => array (), 'CWTest\\Context\\BoxoutContext' => array (), 'CWTest\\Context\\CardContext' => array (), 'CWTest\\Context\\CartoonContext' => array (), 'CWTest\\Context\\CartoonTaxonomyContext' => array (), 'CWTest\\Context\\ContentXMLContext' => array (), 'CWTest\\Context\\DeadLinkContext' => array (), 'CWTest\\Context\\DTILinkContext' => array (), 'CWTest\\Context\\DTISyncContext' => array (), 'CWTest\\Context\\EditionContext' => array (), 'CWTest\\Context\\EditionEditorContext' => array (), 'CWTest\\Context\\EditionPreviewContext' => array (), 'CWTest\\Context\\FirebaseContext' => array (), 'CWTest\\Context\\HeadshotContext' => array (), 'CWTest\\Context\\LoginContext' => array (), 'CWTest\\Context\\MyAccountContext' => array (), 'CWTest\\Context\\NewEditionsContext' => array (), 'CWTest\\Context\\PackageContext' => array (), 'CWTest\\Context\\PackageSyncStatusContext' => array (), 'CWTest\\Context\\PicnrunContext' => array (), 'CWTest\\Context\\PublishedEditionsContext' => array (), 'CWTest\\Context\\custom_moduleEditionContext' => array (), 'CWTest\\Context\\PuzzleContext' => array (), 'CWTest\\Context\\SectionContext' => array (), 'CWTest\\Context\\SectionTaxonomyContext' => array (), 'CWTest\\Context\\SkeletonGeneratorContext' => array (), 'CWTest\\Context\\SkippingEditionContext' => array (), 'CWTest\\Context\\UpdateAnnouncementContext' => array (), 'CWTest\\Context\\HelperContext' => array ('parameters' => array (...)), 'Drupal\\DrupalExtension\\Context\\MinkContext' => array (), 'Drupal\\DrupalExtension\\Context\\DrupalContext' => array ()); private ${Behat\\Testwork\\Environment\\StaticEnvironment}:suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) } }, $iterator = class Behat\\Testwork\\Specification\\GroupedSpecificationIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) }; private $iterators = array (0 => class Behat\\Behat\\Gherkin\\Specification\\LazyFeatureIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { ... }; private $gherkin = class Behat\\Gherkin\\Gherkin { ... }; private $paths = array (...); private $filters = array (...); private $position = 1; private $features = array (...); private $currentFeature = class Behat\\Gherkin\\Node\\FeatureNode { ... } }, 1 => class Behat\\Testwork\\Specification\\NoSpecificationsIterator { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { ... } }); private $position = 0 }, $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Testwork/Hook/Tester/HookableSuiteTester.php:73\n16. Behat\\Behat\\EventDispatcher\\Tester\\EventDispatchingFeatureTester->test($env = class Behat\\Behat\\Context\\Environment\\UninitializedContextEnvironment { private $contextClasses = array ('CWTest\\Context\\AdPackageContext' => array (), 'CWTest\\Context\\AllEditionsContext' => array (), 'CWTest\\Context\\ArticleContext' => array (), 'CWTest\\Context\\BoxoutContext' => array (), 'CWTest\\Context\\CardContext' => array (), 'CWTest\\Context\\CartoonContext' => array (), 'CWTest\\Context\\CartoonTaxonomyContext' => array (), 'CWTest\\Context\\ContentXMLContext' => array (), 'CWTest\\Context\\DeadLinkContext' => array (), 'CWTest\\Context\\DTILinkContext' => array (), 'CWTest\\Context\\DTISyncContext' => array (), 'CWTest\\Context\\EditionContext' => array (), 'CWTest\\Context\\EditionEditorContext' => array (), 'CWTest\\Context\\EditionPreviewContext' => array (), 'CWTest\\Context\\FirebaseContext' => array (), 'CWTest\\Context\\HeadshotContext' => array (), 'CWTest\\Context\\LoginContext' => array (), 'CWTest\\Context\\MyAccountContext' => array (), 'CWTest\\Context\\NewEditionsContext' => array (), 'CWTest\\Context\\PackageContext' => array (), 'CWTest\\Context\\PackageSyncStatusContext' => array (), 'CWTest\\Context\\PicnrunContext' => array (), 'CWTest\\Context\\PublishedEditionsContext' => array (), 'CWTest\\Context\\custom_moduleEditionContext' => array (), 'CWTest\\Context\\PuzzleContext' => array (), 'CWTest\\Context\\SectionContext' => array (), 'CWTest\\Context\\SectionTaxonomyContext' => array (), 'CWTest\\Context\\SkeletonGeneratorContext' => array (), 'CWTest\\Context\\SkippingEditionContext' => array (), 'CWTest\\Context\\UpdateAnnouncementContext' => array (), 'CWTest\\Context\\HelperContext' => array ('parameters' => array (...)), 'Drupal\\DrupalExtension\\Context\\MinkContext' => array (), 'Drupal\\DrupalExtension\\Context\\DrupalContext' => array ()); private ${Behat\\Testwork\\Environment\\StaticEnvironment}:suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) } }, $feature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { private $title = 'Restart the browser window'; private $steps = array (0 => class Behat\\Gherkin\\Node\\StepNode { ... }); private $keyword = 'Background'; private $line = 6 }; private $scenarios = array (0 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Create Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 14 }, 1 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Edit Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 20 }, 2 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Create Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 34 }, 3 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Edit Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 43 }, 4 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Edit an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 66 }, 5 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Delete an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 87 }, 6 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add and Delete an Ad Package to an edition (do hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 107 }, 7 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add an Ad Package to an edition (do not hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 154 }, 8 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Content override warning on Ad Packages'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 200 }, 9 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 230 }, 10 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 256 }, 11 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 281 }, 12 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 308 }, 13 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify warning message when unpublishing an Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 326 }); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 }, $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Testwork/Tester/Runtime/RuntimeSuiteTester.php:63\n17. Behat\\Behat\\Hook\\Tester\\HookableFeatureTester->test($env = class Behat\\Behat\\Context\\Environment\\UninitializedContextEnvironment { private $contextClasses = array ('CWTest\\Context\\AdPackageContext' => array (), 'CWTest\\Context\\AllEditionsContext' => array (), 'CWTest\\Context\\ArticleContext' => array (), 'CWTest\\Context\\BoxoutContext' => array (), 'CWTest\\Context\\CardContext' => array (), 'CWTest\\Context\\CartoonContext' => array (), 'CWTest\\Context\\CartoonTaxonomyContext' => array (), 'CWTest\\Context\\ContentXMLContext' => array (), 'CWTest\\Context\\DeadLinkContext' => array (), 'CWTest\\Context\\DTILinkContext' => array (), 'CWTest\\Context\\DTISyncContext' => array (), 'CWTest\\Context\\EditionContext' => array (), 'CWTest\\Context\\EditionEditorContext' => array (), 'CWTest\\Context\\EditionPreviewContext' => array (), 'CWTest\\Context\\FirebaseContext' => array (), 'CWTest\\Context\\HeadshotContext' => array (), 'CWTest\\Context\\LoginContext' => array (), 'CWTest\\Context\\MyAccountContext' => array (), 'CWTest\\Context\\NewEditionsContext' => array (), 'CWTest\\Context\\PackageContext' => array (), 'CWTest\\Context\\PackageSyncStatusContext' => array (), 'CWTest\\Context\\PicnrunContext' => array (), 'CWTest\\Context\\PublishedEditionsContext' => array (), 'CWTest\\Context\\custom_moduleEditionContext' => array (), 'CWTest\\Context\\PuzzleContext' => array (), 'CWTest\\Context\\SectionContext' => array (), 'CWTest\\Context\\SectionTaxonomyContext' => array (), 'CWTest\\Context\\SkeletonGeneratorContext' => array (), 'CWTest\\Context\\SkippingEditionContext' => array (), 'CWTest\\Context\\UpdateAnnouncementContext' => array (), 'CWTest\\Context\\HelperContext' => array ('parameters' => array (...)), 'Drupal\\DrupalExtension\\Context\\MinkContext' => array (), 'Drupal\\DrupalExtension\\Context\\DrupalContext' => array ()); private ${Behat\\Testwork\\Environment\\StaticEnvironment}:suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) } }, $spec = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { private $title = 'Restart the browser window'; private $steps = array (0 => class Behat\\Gherkin\\Node\\StepNode { ... }); private $keyword = 'Background'; private $line = 6 }; private $scenarios = array (0 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Create Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 14 }, 1 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Edit Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 20 }, 2 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Create Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 34 }, 3 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Edit Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 43 }, 4 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Edit an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 66 }, 5 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Delete an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 87 }, 6 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add and Delete an Ad Package to an edition (do hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 107 }, 7 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add an Ad Package to an edition (do not hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 154 }, 8 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Content override warning on Ad Packages'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 200 }, 9 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 230 }, 10 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 256 }, 11 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 281 }, 12 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 308 }, 13 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify warning message when unpublishing an Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 326 }); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 }, $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Behat/EventDispatcher/Tester/EventDispatchingFeatureTester.php:71\n18. Behat\\Behat\\Tester\\Runtime\\RuntimeFeatureTester->test($env = class Behat\\Behat\\Context\\Environment\\UninitializedContextEnvironment { private $contextClasses = array ('CWTest\\Context\\AdPackageContext' => array (), 'CWTest\\Context\\AllEditionsContext' => array (), 'CWTest\\Context\\ArticleContext' => array (), 'CWTest\\Context\\BoxoutContext' => array (), 'CWTest\\Context\\CardContext' => array (), 'CWTest\\Context\\CartoonContext' => array (), 'CWTest\\Context\\CartoonTaxonomyContext' => array (), 'CWTest\\Context\\ContentXMLContext' => array (), 'CWTest\\Context\\DeadLinkContext' => array (), 'CWTest\\Context\\DTILinkContext' => array (), 'CWTest\\Context\\DTISyncContext' => array (), 'CWTest\\Context\\EditionContext' => array (), 'CWTest\\Context\\EditionEditorContext' => array (), 'CWTest\\Context\\EditionPreviewContext' => array (), 'CWTest\\Context\\FirebaseContext' => array (), 'CWTest\\Context\\HeadshotContext' => array (), 'CWTest\\Context\\LoginContext' => array (), 'CWTest\\Context\\MyAccountContext' => array (), 'CWTest\\Context\\NewEditionsContext' => array (), 'CWTest\\Context\\PackageContext' => array (), 'CWTest\\Context\\PackageSyncStatusContext' => array (), 'CWTest\\Context\\PicnrunContext' => array (), 'CWTest\\Context\\PublishedEditionsContext' => array (), 'CWTest\\Context\\custom_moduleEditionContext' => array (), 'CWTest\\Context\\PuzzleContext' => array (), 'CWTest\\Context\\SectionContext' => array (), 'CWTest\\Context\\SectionTaxonomyContext' => array (), 'CWTest\\Context\\SkeletonGeneratorContext' => array (), 'CWTest\\Context\\SkippingEditionContext' => array (), 'CWTest\\Context\\UpdateAnnouncementContext' => array (), 'CWTest\\Context\\HelperContext' => array ('parameters' => array (...)), 'Drupal\\DrupalExtension\\Context\\MinkContext' => array (), 'Drupal\\DrupalExtension\\Context\\DrupalContext' => array ()); private ${Behat\\Testwork\\Environment\\StaticEnvironment}:suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) } }, $feature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { private $title = 'Restart the browser window'; private $steps = array (0 => class Behat\\Gherkin\\Node\\StepNode { ... }); private $keyword = 'Background'; private $line = 6 }; private $scenarios = array (0 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Create Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 14 }, 1 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Edit Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 20 }, 2 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Create Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 34 }, 3 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Edit Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 43 }, 4 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Edit an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 66 }, 5 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Delete an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 87 }, 6 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add and Delete an Ad Package to an edition (do hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 107 }, 7 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add an Ad Package to an edition (do not hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 154 }, 8 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Content override warning on Ad Packages'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 200 }, 9 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 230 }, 10 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 256 }, 11 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 281 }, 12 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 308 }, 13 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify warning message when unpublishing an Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 326 }); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 }, $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Behat/Hook/Tester/HookableFeatureTester.php:72\n19. Behat\\Behat\\EventDispatcher\\Tester\\EventDispatchingScenarioTester->test($env = class Behat\\Behat\\Context\\Environment\\InitializedContextEnvironment { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) }; private $contexts = array ('CWTest\\Context\\AdPackageContext' => class CWTest\\Context\\AdPackageContext { private $path = '/node/add/ad-package'; private $adPackagePageTitle = NULL; private $adPackageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\AllEditionsContext' => class CWTest\\Context\\AllEditionsContext { private $path = '/all-editions/'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\ArticleContext' => class CWTest\\Context\\ArticleContext { private $path = '/node/add/article'; private $articlePageHeadline = NULL; private $articleNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\BoxoutContext' => class CWTest\\Context\\BoxoutContext { private $path = '/node/add/boxout'; private $boxoutTitle = NULL; private $boxoutNodeId = NULL; private $boxoutItemCount = -1; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CardContext' => class CWTest\\Context\\CardContext { public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CartoonContext' => class CWTest\\Context\\CartoonContext { private $path = '/node/add/cartoons'; private $cartoonPageHeadline = NULL; private $cartoonNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CartoonTaxonomyContext' => class CWTest\\Context\\CartoonTaxonomyContext { private $path = '/admin/structure/taxonomy/turner_cartoon_type/add'; private $listPath = '/admin/structure/taxonomy/turner_cartoon_type'; private $cartoonTaxonomyNames = array (...); private $cartoonCount = 0; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\ContentXMLContext' => class CWTest\\Context\\ContentXMLContext { public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DeadLinkContext' => class CWTest\\Context\\DeadLinkContext { private $deadLinkPath = '/admin/config/turner/dead-link'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DTILinkContext' => class CWTest\\Context\\DTILinkContext { private $numberOfDTIStoriesLinkedToEditionCode = NULL; private $numberOfNewShellDTIStoriesSelectedForLinking = NULL; private $numberOfLinkToDTIStoriesSelectedForLinking = NULL; private $totalNumberOfDTIStoriesSelectedForLinking = NULL; private $dtiStoryName = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DTISyncContext' => class CWTest\\Context\\DTISyncContext { private $dtiSyncPath = '/admin/config/turner/dti-sync'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionContext' => class CWTest\\Context\\EditionContext { private $pathToSparkEdition = '/content-manager/120449'; private $duplicatedSectionName = NULL; private $dateOfFutureEdition = NULL; private $numberOfArticlesSelectedInTheOriginSection = NULL; private $numberOfArticlesInFutureSectionPriorToDuplication = NULL; private $numberOfArticlesInFutureSectionAfterDuplication = NULL; private $arrOriginalArticleStatusesBeforeDup = NULL; private $arrOriginalArticleStatusesAfterDup = NULL; public $articleShareURL = NULL; public $articleTitleOne = NULL; public $articleTitleTwo = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionEditorContext' => class CWTest\\Context\\EditionEditorContext { private $path = 'edit?destination=content-manager'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionPreviewContext' => class CWTest\\Context\\EditionPreviewContext { private $path = '/sites/all/modules/custom_module/core/reader/reader.html?atom=/editions/edition_'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\FirebaseContext' => class CWTest\\Context\\FirebaseContext { private $firebaseLinkPath = 'admin/config/turner/notifications'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\HeadshotContext' => class CWTest\\Context\\HeadshotContext { private $path = '/node/add/author'; private $headshotPageName = NULL; private $headshotNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\LoginContext' => class CWTest\\Context\\LoginContext { private $path = '/user/login'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\MyAccountContext' => class CWTest\\Context\\MyAccountContext { public $path = '/user'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\NewEditionsContext' => class CWTest\\Context\\NewEditionsContext { private $path = '/content-manager'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PackageContext' => class CWTest\\Context\\PackageContext { private $path = '/node/add/package'; private $packageHeadline = NULL; private $packageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PackageSyncStatusContext' => class CWTest\\Context\\PackageSyncStatusContext { private $packageSyncStatusLinkPath = '/admin/config/turner/package_sync_status'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PicnrunContext' => class CWTest\\Context\\PicnrunContext { private $path = '/node/add/pic-and-run'; private $picnrunHeadline = NULL; private $picnrunNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PublishedEditionsContext' => class CWTest\\Context\\PublishedEditionsContext { private $path = '/published-editions/'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\custom_moduleEditionContext' => class CWTest\\Context\\custom_moduleEditionContext { private $path = '/node/add/custom_module-edition'; private $custom_moduleedition_node_id = NULL; public $publicationDay = NULL; public $publicationMonth = NULL; public $publicationYear = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PuzzleContext' => class CWTest\\Context\\PuzzleContext { private $path = '/node/add/puzzle'; private $puzzleTitle = NULL; private $custom_moduleeditionNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SectionContext' => class CWTest\\Context\\SectionContext { private $path = '/node/add/section'; private $sectionNodeId = NULL; private $sectionName = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SectionTaxonomyContext' => class CWTest\\Context\\SectionTaxonomyContext { private $path = '/admin/structure/taxonomy/sections/add'; private $listPath = '/admin/structure/taxonomy/sections'; private $sectionTaxonomyNames = array (...); private $sectionCount = 0; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SkeletonGeneratorContext' => class CWTest\\Context\\SkeletonGeneratorContext { private $blankPath = '/admin/skeleton/create/blank'; private $weekdayPath = '/admin/skeleton/create/daily'; private $saturdaydayPath = '/admin/skeleton/create/saturday'; private $sundayPath = '/admin/skeleton/create/sunday'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SkippingEditionContext' => class CWTest\\Context\\SkippingEditionContext { private $skippingEditionsPath = 'admin/config/application/variables'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\UpdateAnnouncementContext' => class CWTest\\Context\\UpdateAnnouncementContext { private $updateAnnouncementPath = '/admin/config/turner/announcement'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\HelperContext' => class CWTest\\Context\\HelperContext { public $parameters = array (...); public $randomItems = class CWTest\\Util\\RandomItems { ... }; public $minkContext = class Drupal\\DrupalExtension\\Context\\MinkContext { ... }; private $html = NULL; private $pageElements = array (...); private $currentScenario = class Behat\\Gherkin\\Node\\ScenarioNode { ... }; private $scenarioName = 'Verify the structure of the Create Ad Package page'; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = FALSE; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }, 'Drupal\\DrupalExtension\\Context\\MinkContext' => class Drupal\\DrupalExtension\\Context\\MinkContext { private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }, 'Drupal\\DrupalExtension\\Context\\DrupalContext' => class Drupal\\DrupalExtension\\Context\\DrupalContext { private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = class stdClass { ... }; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }) }, $feature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { private $title = 'Restart the browser window'; private $steps = array (0 => class Behat\\Gherkin\\Node\\StepNode { ... }); private $keyword = 'Background'; private $line = 6 }; private $scenarios = array (0 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Create Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 14 }, 1 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Edit Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 20 }, 2 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Create Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 34 }, 3 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Edit Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 43 }, 4 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Edit an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 66 }, 5 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Delete an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 87 }, 6 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add and Delete an Ad Package to an edition (do hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 107 }, 7 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add an Ad Package to an edition (do not hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 154 }, 8 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Content override warning on Ad Packages'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 200 }, 9 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 230 }, 10 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 256 }, 11 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 281 }, 12 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 308 }, 13 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify warning message when unpublishing an Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 326 }); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 }, $scenario = class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Create Ad Package page'; private $tags = array (0 => 'ad_package', 1 => 'api', 2 => 'regression'); private $steps = array (0 => class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'Given'; private $keywordType = 'Given'; private $text = 'I am logged in as a user with the editor role'; private $arguments = array (...); private $line = 15 }, 1 => class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'When'; private $keywordType = 'When'; private $text = 'I visit the Create Ad Package page'; private $arguments = array (...); private $line = 16 }, 2 => class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'Then'; private $keywordType = 'Then'; private $text = 'I verify the structure of the Create Ad Package page'; private $arguments = array (...); private $line = 17 }); private $keyword = 'Scenario'; private $line = 14 }, $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Behat/Tester/Runtime/RuntimeFeatureTester.php:83\n20. Behat\\Behat\\Hook\\Tester\\HookableScenarioTester->test($env = class Behat\\Behat\\Context\\Environment\\InitializedContextEnvironment { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) }; private $contexts = array ('CWTest\\Context\\AdPackageContext' => class CWTest\\Context\\AdPackageContext { private $path = '/node/add/ad-package'; private $adPackagePageTitle = NULL; private $adPackageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\AllEditionsContext' => class CWTest\\Context\\AllEditionsContext { private $path = '/all-editions/'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\ArticleContext' => class CWTest\\Context\\ArticleContext { private $path = '/node/add/article'; private $articlePageHeadline = NULL; private $articleNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\BoxoutContext' => class CWTest\\Context\\BoxoutContext { private $path = '/node/add/boxout'; private $boxoutTitle = NULL; private $boxoutNodeId = NULL; private $boxoutItemCount = -1; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CardContext' => class CWTest\\Context\\CardContext { public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CartoonContext' => class CWTest\\Context\\CartoonContext { private $path = '/node/add/cartoons'; private $cartoonPageHeadline = NULL; private $cartoonNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CartoonTaxonomyContext' => class CWTest\\Context\\CartoonTaxonomyContext { private $path = '/admin/structure/taxonomy/turner_cartoon_type/add'; private $listPath = '/admin/structure/taxonomy/turner_cartoon_type'; private $cartoonTaxonomyNames = array (...); private $cartoonCount = 0; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\ContentXMLContext' => class CWTest\\Context\\ContentXMLContext { public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DeadLinkContext' => class CWTest\\Context\\DeadLinkContext { private $deadLinkPath = '/admin/config/turner/dead-link'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DTILinkContext' => class CWTest\\Context\\DTILinkContext { private $numberOfDTIStoriesLinkedToEditionCode = NULL; private $numberOfNewShellDTIStoriesSelectedForLinking = NULL; private $numberOfLinkToDTIStoriesSelectedForLinking = NULL; private $totalNumberOfDTIStoriesSelectedForLinking = NULL; private $dtiStoryName = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DTISyncContext' => class CWTest\\Context\\DTISyncContext { private $dtiSyncPath = '/admin/config/turner/dti-sync'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionContext' => class CWTest\\Context\\EditionContext { private $pathToSparkEdition = '/content-manager/120449'; private $duplicatedSectionName = NULL; private $dateOfFutureEdition = NULL; private $numberOfArticlesSelectedInTheOriginSection = NULL; private $numberOfArticlesInFutureSectionPriorToDuplication = NULL; private $numberOfArticlesInFutureSectionAfterDuplication = NULL; private $arrOriginalArticleStatusesBeforeDup = NULL; private $arrOriginalArticleStatusesAfterDup = NULL; public $articleShareURL = NULL; public $articleTitleOne = NULL; public $articleTitleTwo = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionEditorContext' => class CWTest\\Context\\EditionEditorContext { private $path = 'edit?destination=content-manager'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionPreviewContext' => class CWTest\\Context\\EditionPreviewContext { private $path = '/sites/all/modules/custom_module/core/reader/reader.html?atom=/editions/edition_'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\FirebaseContext' => class CWTest\\Context\\FirebaseContext { private $firebaseLinkPath = 'admin/config/turner/notifications'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\HeadshotContext' => class CWTest\\Context\\HeadshotContext { private $path = '/node/add/author'; private $headshotPageName = NULL; private $headshotNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\LoginContext' => class CWTest\\Context\\LoginContext { private $path = '/user/login'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\MyAccountContext' => class CWTest\\Context\\MyAccountContext { public $path = '/user'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\NewEditionsContext' => class CWTest\\Context\\NewEditionsContext { private $path = '/content-manager'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PackageContext' => class CWTest\\Context\\PackageContext { private $path = '/node/add/package'; private $packageHeadline = NULL; private $packageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PackageSyncStatusContext' => class CWTest\\Context\\PackageSyncStatusContext { private $packageSyncStatusLinkPath = '/admin/config/turner/package_sync_status'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PicnrunContext' => class CWTest\\Context\\PicnrunContext { private $path = '/node/add/pic-and-run'; private $picnrunHeadline = NULL; private $picnrunNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PublishedEditionsContext' => class CWTest\\Context\\PublishedEditionsContext { private $path = '/published-editions/'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\custom_moduleEditionContext' => class CWTest\\Context\\custom_moduleEditionContext { private $path = '/node/add/custom_module-edition'; private $custom_moduleedition_node_id = NULL; public $publicationDay = NULL; public $publicationMonth = NULL; public $publicationYear = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PuzzleContext' => class CWTest\\Context\\PuzzleContext { private $path = '/node/add/puzzle'; private $puzzleTitle = NULL; private $custom_moduleeditionNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SectionContext' => class CWTest\\Context\\SectionContext { private $path = '/node/add/section'; private $sectionNodeId = NULL; private $sectionName = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SectionTaxonomyContext' => class CWTest\\Context\\SectionTaxonomyContext { private $path = '/admin/structure/taxonomy/sections/add'; private $listPath = '/admin/structure/taxonomy/sections'; private $sectionTaxonomyNames = array (...); private $sectionCount = 0; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SkeletonGeneratorContext' => class CWTest\\Context\\SkeletonGeneratorContext { private $blankPath = '/admin/skeleton/create/blank'; private $weekdayPath = '/admin/skeleton/create/daily'; private $saturdaydayPath = '/admin/skeleton/create/saturday'; private $sundayPath = '/admin/skeleton/create/sunday'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SkippingEditionContext' => class CWTest\\Context\\SkippingEditionContext { private $skippingEditionsPath = 'admin/config/application/variables'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\UpdateAnnouncementContext' => class CWTest\\Context\\UpdateAnnouncementContext { private $updateAnnouncementPath = '/admin/config/turner/announcement'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\HelperContext' => class CWTest\\Context\\HelperContext { public $parameters = array (...); public $randomItems = class CWTest\\Util\\RandomItems { ... }; public $minkContext = class Drupal\\DrupalExtension\\Context\\MinkContext { ... }; private $html = NULL; private $pageElements = array (...); private $currentScenario = class Behat\\Gherkin\\Node\\ScenarioNode { ... }; private $scenarioName = 'Verify the structure of the Create Ad Package page'; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = FALSE; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }, 'Drupal\\DrupalExtension\\Context\\MinkContext' => class Drupal\\DrupalExtension\\Context\\MinkContext { private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }, 'Drupal\\DrupalExtension\\Context\\DrupalContext' => class Drupal\\DrupalExtension\\Context\\DrupalContext { private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = class stdClass { ... }; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }) }, $feature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { private $title = 'Restart the browser window'; private $steps = array (0 => class Behat\\Gherkin\\Node\\StepNode { ... }); private $keyword = 'Background'; private $line = 6 }; private $scenarios = array (0 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Create Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 14 }, 1 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Edit Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 20 }, 2 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Create Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 34 }, 3 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Edit Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 43 }, 4 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Edit an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 66 }, 5 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Delete an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 87 }, 6 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add and Delete an Ad Package to an edition (do hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 107 }, 7 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add an Ad Package to an edition (do not hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 154 }, 8 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Content override warning on Ad Packages'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 200 }, 9 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 230 }, 10 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 256 }, 11 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 281 }, 12 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 308 }, 13 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify warning message when unpublishing an Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 326 }); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 }, $scenario = class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Create Ad Package page'; private $tags = array (0 => 'ad_package', 1 => 'api', 2 => 'regression'); private $steps = array (0 => class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'Given'; private $keywordType = 'Given'; private $text = 'I am logged in as a user with the editor role'; private $arguments = array (...); private $line = 15 }, 1 => class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'When'; private $keywordType = 'When'; private $text = 'I visit the Create Ad Package page'; private $arguments = array (...); private $line = 16 }, 2 => class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'Then'; private $keywordType = 'Then'; private $text = 'I verify the structure of the Create Ad Package page'; private $arguments = array (...); private $line = 17 }); private $keyword = 'Scenario'; private $line = 14 }, $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Behat/EventDispatcher/Tester/EventDispatchingScenarioTester.php:103\n21. Behat\\Behat\\Tester\\Runtime\\RuntimeScenarioTester->test($env = class Behat\\Behat\\Context\\Environment\\InitializedContextEnvironment { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) }; private $contexts = array ('CWTest\\Context\\AdPackageContext' => class CWTest\\Context\\AdPackageContext { private $path = '/node/add/ad-package'; private $adPackagePageTitle = NULL; private $adPackageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\AllEditionsContext' => class CWTest\\Context\\AllEditionsContext { private $path = '/all-editions/'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\ArticleContext' => class CWTest\\Context\\ArticleContext { private $path = '/node/add/article'; private $articlePageHeadline = NULL; private $articleNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\BoxoutContext' => class CWTest\\Context\\BoxoutContext { private $path = '/node/add/boxout'; private $boxoutTitle = NULL; private $boxoutNodeId = NULL; private $boxoutItemCount = -1; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CardContext' => class CWTest\\Context\\CardContext { public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CartoonContext' => class CWTest\\Context\\CartoonContext { private $path = '/node/add/cartoons'; private $cartoonPageHeadline = NULL; private $cartoonNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CartoonTaxonomyContext' => class CWTest\\Context\\CartoonTaxonomyContext { private $path = '/admin/structure/taxonomy/turner_cartoon_type/add'; private $listPath = '/admin/structure/taxonomy/turner_cartoon_type'; private $cartoonTaxonomyNames = array (...); private $cartoonCount = 0; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\ContentXMLContext' => class CWTest\\Context\\ContentXMLContext { public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DeadLinkContext' => class CWTest\\Context\\DeadLinkContext { private $deadLinkPath = '/admin/config/turner/dead-link'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DTILinkContext' => class CWTest\\Context\\DTILinkContext { private $numberOfDTIStoriesLinkedToEditionCode = NULL; private $numberOfNewShellDTIStoriesSelectedForLinking = NULL; private $numberOfLinkToDTIStoriesSelectedForLinking = NULL; private $totalNumberOfDTIStoriesSelectedForLinking = NULL; private $dtiStoryName = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DTISyncContext' => class CWTest\\Context\\DTISyncContext { private $dtiSyncPath = '/admin/config/turner/dti-sync'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionContext' => class CWTest\\Context\\EditionContext { private $pathToSparkEdition = '/content-manager/120449'; private $duplicatedSectionName = NULL; private $dateOfFutureEdition = NULL; private $numberOfArticlesSelectedInTheOriginSection = NULL; private $numberOfArticlesInFutureSectionPriorToDuplication = NULL; private $numberOfArticlesInFutureSectionAfterDuplication = NULL; private $arrOriginalArticleStatusesBeforeDup = NULL; private $arrOriginalArticleStatusesAfterDup = NULL; public $articleShareURL = NULL; public $articleTitleOne = NULL; public $articleTitleTwo = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionEditorContext' => class CWTest\\Context\\EditionEditorContext { private $path = 'edit?destination=content-manager'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionPreviewContext' => class CWTest\\Context\\EditionPreviewContext { private $path = '/sites/all/modules/custom_module/core/reader/reader.html?atom=/editions/edition_'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\FirebaseContext' => class CWTest\\Context\\FirebaseContext { private $firebaseLinkPath = 'admin/config/turner/notifications'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\HeadshotContext' => class CWTest\\Context\\HeadshotContext { private $path = '/node/add/author'; private $headshotPageName = NULL; private $headshotNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\LoginContext' => class CWTest\\Context\\LoginContext { private $path = '/user/login'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\MyAccountContext' => class CWTest\\Context\\MyAccountContext { public $path = '/user'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\NewEditionsContext' => class CWTest\\Context\\NewEditionsContext { private $path = '/content-manager'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PackageContext' => class CWTest\\Context\\PackageContext { private $path = '/node/add/package'; private $packageHeadline = NULL; private $packageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PackageSyncStatusContext' => class CWTest\\Context\\PackageSyncStatusContext { private $packageSyncStatusLinkPath = '/admin/config/turner/package_sync_status'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PicnrunContext' => class CWTest\\Context\\PicnrunContext { private $path = '/node/add/pic-and-run'; private $picnrunHeadline = NULL; private $picnrunNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PublishedEditionsContext' => class CWTest\\Context\\PublishedEditionsContext { private $path = '/published-editions/'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\custom_moduleEditionContext' => class CWTest\\Context\\custom_moduleEditionContext { private $path = '/node/add/custom_module-edition'; private $custom_moduleedition_node_id = NULL; public $publicationDay = NULL; public $publicationMonth = NULL; public $publicationYear = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PuzzleContext' => class CWTest\\Context\\PuzzleContext { private $path = '/node/add/puzzle'; private $puzzleTitle = NULL; private $custom_moduleeditionNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SectionContext' => class CWTest\\Context\\SectionContext { private $path = '/node/add/section'; private $sectionNodeId = NULL; private $sectionName = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SectionTaxonomyContext' => class CWTest\\Context\\SectionTaxonomyContext { private $path = '/admin/structure/taxonomy/sections/add'; private $listPath = '/admin/structure/taxonomy/sections'; private $sectionTaxonomyNames = array (...); private $sectionCount = 0; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SkeletonGeneratorContext' => class CWTest\\Context\\SkeletonGeneratorContext { private $blankPath = '/admin/skeleton/create/blank'; private $weekdayPath = '/admin/skeleton/create/daily'; private $saturdaydayPath = '/admin/skeleton/create/saturday'; private $sundayPath = '/admin/skeleton/create/sunday'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SkippingEditionContext' => class CWTest\\Context\\SkippingEditionContext { private $skippingEditionsPath = 'admin/config/application/variables'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\UpdateAnnouncementContext' => class CWTest\\Context\\UpdateAnnouncementContext { private $updateAnnouncementPath = '/admin/config/turner/announcement'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\HelperContext' => class CWTest\\Context\\HelperContext { public $parameters = array (...); public $randomItems = class CWTest\\Util\\RandomItems { ... }; public $minkContext = class Drupal\\DrupalExtension\\Context\\MinkContext { ... }; private $html = NULL; private $pageElements = array (...); private $currentScenario = class Behat\\Gherkin\\Node\\ScenarioNode { ... }; private $scenarioName = 'Verify the structure of the Create Ad Package page'; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = FALSE; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }, 'Drupal\\DrupalExtension\\Context\\MinkContext' => class Drupal\\DrupalExtension\\Context\\MinkContext { private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }, 'Drupal\\DrupalExtension\\Context\\DrupalContext' => class Drupal\\DrupalExtension\\Context\\DrupalContext { private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = class stdClass { ... }; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }) }, $feature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { private $title = 'Restart the browser window'; private $steps = array (0 => class Behat\\Gherkin\\Node\\StepNode { ... }); private $keyword = 'Background'; private $line = 6 }; private $scenarios = array (0 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Create Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 14 }, 1 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Edit Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 20 }, 2 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Create Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 34 }, 3 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Edit Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 43 }, 4 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Edit an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 66 }, 5 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Delete an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 87 }, 6 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add and Delete an Ad Package to an edition (do hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 107 }, 7 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add an Ad Package to an edition (do not hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 154 }, 8 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Content override warning on Ad Packages'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 200 }, 9 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 230 }, 10 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 256 }, 11 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 281 }, 12 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 308 }, 13 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify warning message when unpublishing an Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 326 }); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 }, $scenario = class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Create Ad Package page'; private $tags = array (0 => 'ad_package', 1 => 'api', 2 => 'regression'); private $steps = array (0 => class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'Given'; private $keywordType = 'Given'; private $text = 'I am logged in as a user with the editor role'; private $arguments = array (...); private $line = 15 }, 1 => class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'When'; private $keywordType = 'When'; private $text = 'I visit the Create Ad Package page'; private $arguments = array (...); private $line = 16 }, 2 => class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'Then'; private $keywordType = 'Then'; private $text = 'I verify the structure of the Create Ad Package page'; private $arguments = array (...); private $line = 17 }); private $keyword = 'Scenario'; private $line = 14 }, $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Behat/Hook/Tester/HookableScenarioTester.php:74\n22. Behat\\Behat\\Tester\\StepContainerTester->test($env = class Behat\\Behat\\Context\\Environment\\InitializedContextEnvironment { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) }; private $contexts = array ('CWTest\\Context\\AdPackageContext' => class CWTest\\Context\\AdPackageContext { private $path = '/node/add/ad-package'; private $adPackagePageTitle = NULL; private $adPackageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\AllEditionsContext' => class CWTest\\Context\\AllEditionsContext { private $path = '/all-editions/'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\ArticleContext' => class CWTest\\Context\\ArticleContext { private $path = '/node/add/article'; private $articlePageHeadline = NULL; private $articleNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\BoxoutContext' => class CWTest\\Context\\BoxoutContext { private $path = '/node/add/boxout'; private $boxoutTitle = NULL; private $boxoutNodeId = NULL; private $boxoutItemCount = -1; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CardContext' => class CWTest\\Context\\CardContext { public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CartoonContext' => class CWTest\\Context\\CartoonContext { private $path = '/node/add/cartoons'; private $cartoonPageHeadline = NULL; private $cartoonNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CartoonTaxonomyContext' => class CWTest\\Context\\CartoonTaxonomyContext { private $path = '/admin/structure/taxonomy/turner_cartoon_type/add'; private $listPath = '/admin/structure/taxonomy/turner_cartoon_type'; private $cartoonTaxonomyNames = array (...); private $cartoonCount = 0; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\ContentXMLContext' => class CWTest\\Context\\ContentXMLContext { public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DeadLinkContext' => class CWTest\\Context\\DeadLinkContext { private $deadLinkPath = '/admin/config/turner/dead-link'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DTILinkContext' => class CWTest\\Context\\DTILinkContext { private $numberOfDTIStoriesLinkedToEditionCode = NULL; private $numberOfNewShellDTIStoriesSelectedForLinking = NULL; private $numberOfLinkToDTIStoriesSelectedForLinking = NULL; private $totalNumberOfDTIStoriesSelectedForLinking = NULL; private $dtiStoryName = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DTISyncContext' => class CWTest\\Context\\DTISyncContext { private $dtiSyncPath = '/admin/config/turner/dti-sync'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionContext' => class CWTest\\Context\\EditionContext { private $pathToSparkEdition = '/content-manager/120449'; private $duplicatedSectionName = NULL; private $dateOfFutureEdition = NULL; private $numberOfArticlesSelectedInTheOriginSection = NULL; private $numberOfArticlesInFutureSectionPriorToDuplication = NULL; private $numberOfArticlesInFutureSectionAfterDuplication = NULL; private $arrOriginalArticleStatusesBeforeDup = NULL; private $arrOriginalArticleStatusesAfterDup = NULL; public $articleShareURL = NULL; public $articleTitleOne = NULL; public $articleTitleTwo = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionEditorContext' => class CWTest\\Context\\EditionEditorContext { private $path = 'edit?destination=content-manager'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionPreviewContext' => class CWTest\\Context\\EditionPreviewContext { private $path = '/sites/all/modules/custom_module/core/reader/reader.html?atom=/editions/edition_'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\FirebaseContext' => class CWTest\\Context\\FirebaseContext { private $firebaseLinkPath = 'admin/config/turner/notifications'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\HeadshotContext' => class CWTest\\Context\\HeadshotContext { private $path = '/node/add/author'; private $headshotPageName = NULL; private $headshotNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\LoginContext' => class CWTest\\Context\\LoginContext { private $path = '/user/login'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\MyAccountContext' => class CWTest\\Context\\MyAccountContext { public $path = '/user'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\NewEditionsContext' => class CWTest\\Context\\NewEditionsContext { private $path = '/content-manager'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PackageContext' => class CWTest\\Context\\PackageContext { private $path = '/node/add/package'; private $packageHeadline = NULL; private $packageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PackageSyncStatusContext' => class CWTest\\Context\\PackageSyncStatusContext { private $packageSyncStatusLinkPath = '/admin/config/turner/package_sync_status'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PicnrunContext' => class CWTest\\Context\\PicnrunContext { private $path = '/node/add/pic-and-run'; private $picnrunHeadline = NULL; private $picnrunNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PublishedEditionsContext' => class CWTest\\Context\\PublishedEditionsContext { private $path = '/published-editions/'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\custom_moduleEditionContext' => class CWTest\\Context\\custom_moduleEditionContext { private $path = '/node/add/custom_module-edition'; private $custom_moduleedition_node_id = NULL; public $publicationDay = NULL; public $publicationMonth = NULL; public $publicationYear = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PuzzleContext' => class CWTest\\Context\\PuzzleContext { private $path = '/node/add/puzzle'; private $puzzleTitle = NULL; private $custom_moduleeditionNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SectionContext' => class CWTest\\Context\\SectionContext { private $path = '/node/add/section'; private $sectionNodeId = NULL; private $sectionName = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SectionTaxonomyContext' => class CWTest\\Context\\SectionTaxonomyContext { private $path = '/admin/structure/taxonomy/sections/add'; private $listPath = '/admin/structure/taxonomy/sections'; private $sectionTaxonomyNames = array (...); private $sectionCount = 0; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SkeletonGeneratorContext' => class CWTest\\Context\\SkeletonGeneratorContext { private $blankPath = '/admin/skeleton/create/blank'; private $weekdayPath = '/admin/skeleton/create/daily'; private $saturdaydayPath = '/admin/skeleton/create/saturday'; private $sundayPath = '/admin/skeleton/create/sunday'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SkippingEditionContext' => class CWTest\\Context\\SkippingEditionContext { private $skippingEditionsPath = 'admin/config/application/variables'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\UpdateAnnouncementContext' => class CWTest\\Context\\UpdateAnnouncementContext { private $updateAnnouncementPath = '/admin/config/turner/announcement'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\HelperContext' => class CWTest\\Context\\HelperContext { public $parameters = array (...); public $randomItems = class CWTest\\Util\\RandomItems { ... }; public $minkContext = class Drupal\\DrupalExtension\\Context\\MinkContext { ... }; private $html = NULL; private $pageElements = array (...); private $currentScenario = class Behat\\Gherkin\\Node\\ScenarioNode { ... }; private $scenarioName = 'Verify the structure of the Create Ad Package page'; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = FALSE; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }, 'Drupal\\DrupalExtension\\Context\\MinkContext' => class Drupal\\DrupalExtension\\Context\\MinkContext { private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }, 'Drupal\\DrupalExtension\\Context\\DrupalContext' => class Drupal\\DrupalExtension\\Context\\DrupalContext { private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = class stdClass { ... }; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }) }, $feature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { private $title = 'Restart the browser window'; private $steps = array (0 => class Behat\\Gherkin\\Node\\StepNode { ... }); private $keyword = 'Background'; private $line = 6 }; private $scenarios = array (0 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Create Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 14 }, 1 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Edit Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 20 }, 2 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Create Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 34 }, 3 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Edit Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 43 }, 4 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Edit an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 66 }, 5 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Delete an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 87 }, 6 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add and Delete an Ad Package to an edition (do hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 107 }, 7 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add an Ad Package to an edition (do not hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 154 }, 8 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Content override warning on Ad Packages'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 200 }, 9 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 230 }, 10 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 256 }, 11 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 281 }, 12 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 308 }, 13 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify warning message when unpublishing an Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 326 }); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 }, $container = class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Create Ad Package page'; private $tags = array (0 => 'ad_package', 1 => 'api', 2 => 'regression'); private $steps = array (0 => class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'Given'; private $keywordType = 'Given'; private $text = 'I am logged in as a user with the editor role'; private $arguments = array (...); private $line = 15 }, 1 => class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'When'; private $keywordType = 'When'; private $text = 'I visit the Create Ad Package page'; private $arguments = array (...); private $line = 16 }, 2 => class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'Then'; private $keywordType = 'Then'; private $text = 'I verify the structure of the Create Ad Package page'; private $arguments = array (...); private $line = 17 }); private $keyword = 'Scenario'; private $line = 14 }, $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Behat/Tester/Runtime/RuntimeScenarioTester.php:76\n23. Behat\\Behat\\EventDispatcher\\Tester\\EventDispatchingStepTester->test($env = class Behat\\Behat\\Context\\Environment\\InitializedContextEnvironment { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) }; private $contexts = array ('CWTest\\Context\\AdPackageContext' => class CWTest\\Context\\AdPackageContext { private $path = '/node/add/ad-package'; private $adPackagePageTitle = NULL; private $adPackageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\AllEditionsContext' => class CWTest\\Context\\AllEditionsContext { private $path = '/all-editions/'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\ArticleContext' => class CWTest\\Context\\ArticleContext { private $path = '/node/add/article'; private $articlePageHeadline = NULL; private $articleNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\BoxoutContext' => class CWTest\\Context\\BoxoutContext { private $path = '/node/add/boxout'; private $boxoutTitle = NULL; private $boxoutNodeId = NULL; private $boxoutItemCount = -1; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CardContext' => class CWTest\\Context\\CardContext { public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CartoonContext' => class CWTest\\Context\\CartoonContext { private $path = '/node/add/cartoons'; private $cartoonPageHeadline = NULL; private $cartoonNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CartoonTaxonomyContext' => class CWTest\\Context\\CartoonTaxonomyContext { private $path = '/admin/structure/taxonomy/turner_cartoon_type/add'; private $listPath = '/admin/structure/taxonomy/turner_cartoon_type'; private $cartoonTaxonomyNames = array (...); private $cartoonCount = 0; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\ContentXMLContext' => class CWTest\\Context\\ContentXMLContext { public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DeadLinkContext' => class CWTest\\Context\\DeadLinkContext { private $deadLinkPath = '/admin/config/turner/dead-link'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DTILinkContext' => class CWTest\\Context\\DTILinkContext { private $numberOfDTIStoriesLinkedToEditionCode = NULL; private $numberOfNewShellDTIStoriesSelectedForLinking = NULL; private $numberOfLinkToDTIStoriesSelectedForLinking = NULL; private $totalNumberOfDTIStoriesSelectedForLinking = NULL; private $dtiStoryName = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DTISyncContext' => class CWTest\\Context\\DTISyncContext { private $dtiSyncPath = '/admin/config/turner/dti-sync'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionContext' => class CWTest\\Context\\EditionContext { private $pathToSparkEdition = '/content-manager/120449'; private $duplicatedSectionName = NULL; private $dateOfFutureEdition = NULL; private $numberOfArticlesSelectedInTheOriginSection = NULL; private $numberOfArticlesInFutureSectionPriorToDuplication = NULL; private $numberOfArticlesInFutureSectionAfterDuplication = NULL; private $arrOriginalArticleStatusesBeforeDup = NULL; private $arrOriginalArticleStatusesAfterDup = NULL; public $articleShareURL = NULL; public $articleTitleOne = NULL; public $articleTitleTwo = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionEditorContext' => class CWTest\\Context\\EditionEditorContext { private $path = 'edit?destination=content-manager'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionPreviewContext' => class CWTest\\Context\\EditionPreviewContext { private $path = '/sites/all/modules/custom_module/core/reader/reader.html?atom=/editions/edition_'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\FirebaseContext' => class CWTest\\Context\\FirebaseContext { private $firebaseLinkPath = 'admin/config/turner/notifications'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\HeadshotContext' => class CWTest\\Context\\HeadshotContext { private $path = '/node/add/author'; private $headshotPageName = NULL; private $headshotNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\LoginContext' => class CWTest\\Context\\LoginContext { private $path = '/user/login'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\MyAccountContext' => class CWTest\\Context\\MyAccountContext { public $path = '/user'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\NewEditionsContext' => class CWTest\\Context\\NewEditionsContext { private $path = '/content-manager'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PackageContext' => class CWTest\\Context\\PackageContext { private $path = '/node/add/package'; private $packageHeadline = NULL; private $packageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PackageSyncStatusContext' => class CWTest\\Context\\PackageSyncStatusContext { private $packageSyncStatusLinkPath = '/admin/config/turner/package_sync_status'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PicnrunContext' => class CWTest\\Context\\PicnrunContext { private $path = '/node/add/pic-and-run'; private $picnrunHeadline = NULL; private $picnrunNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PublishedEditionsContext' => class CWTest\\Context\\PublishedEditionsContext { private $path = '/published-editions/'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\custom_moduleEditionContext' => class CWTest\\Context\\custom_moduleEditionContext { private $path = '/node/add/custom_module-edition'; private $custom_moduleedition_node_id = NULL; public $publicationDay = NULL; public $publicationMonth = NULL; public $publicationYear = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PuzzleContext' => class CWTest\\Context\\PuzzleContext { private $path = '/node/add/puzzle'; private $puzzleTitle = NULL; private $custom_moduleeditionNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SectionContext' => class CWTest\\Context\\SectionContext { private $path = '/node/add/section'; private $sectionNodeId = NULL; private $sectionName = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SectionTaxonomyContext' => class CWTest\\Context\\SectionTaxonomyContext { private $path = '/admin/structure/taxonomy/sections/add'; private $listPath = '/admin/structure/taxonomy/sections'; private $sectionTaxonomyNames = array (...); private $sectionCount = 0; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SkeletonGeneratorContext' => class CWTest\\Context\\SkeletonGeneratorContext { private $blankPath = '/admin/skeleton/create/blank'; private $weekdayPath = '/admin/skeleton/create/daily'; private $saturdaydayPath = '/admin/skeleton/create/saturday'; private $sundayPath = '/admin/skeleton/create/sunday'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SkippingEditionContext' => class CWTest\\Context\\SkippingEditionContext { private $skippingEditionsPath = 'admin/config/application/variables'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\UpdateAnnouncementContext' => class CWTest\\Context\\UpdateAnnouncementContext { private $updateAnnouncementPath = '/admin/config/turner/announcement'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\HelperContext' => class CWTest\\Context\\HelperContext { public $parameters = array (...); public $randomItems = class CWTest\\Util\\RandomItems { ... }; public $minkContext = class Drupal\\DrupalExtension\\Context\\MinkContext { ... }; private $html = NULL; private $pageElements = array (...); private $currentScenario = class Behat\\Gherkin\\Node\\ScenarioNode { ... }; private $scenarioName = 'Verify the structure of the Create Ad Package page'; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = FALSE; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }, 'Drupal\\DrupalExtension\\Context\\MinkContext' => class Drupal\\DrupalExtension\\Context\\MinkContext { private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }, 'Drupal\\DrupalExtension\\Context\\DrupalContext' => class Drupal\\DrupalExtension\\Context\\DrupalContext { private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = class stdClass { ... }; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }) }, $feature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { private $title = 'Restart the browser window'; private $steps = array (0 => class Behat\\Gherkin\\Node\\StepNode { ... }); private $keyword = 'Background'; private $line = 6 }; private $scenarios = array (0 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Create Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 14 }, 1 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Edit Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 20 }, 2 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Create Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 34 }, 3 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Edit Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 43 }, 4 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Edit an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 66 }, 5 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Delete an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 87 }, 6 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add and Delete an Ad Package to an edition (do hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 107 }, 7 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add an Ad Package to an edition (do not hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 154 }, 8 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Content override warning on Ad Packages'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 200 }, 9 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 230 }, 10 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 256 }, 11 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 281 }, 12 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 308 }, 13 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify warning message when unpublishing an Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 326 }); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 }, $step = class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'Then'; private $keywordType = 'Then'; private $text = 'I verify the structure of the Create Ad Package page'; private $arguments = array (); private $line = 17 }, $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Behat/Tester/StepContainerTester.php:59\n24. Behat\\Behat\\Hook\\Tester\\HookableStepTester->test($env = class Behat\\Behat\\Context\\Environment\\InitializedContextEnvironment { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) }; private $contexts = array ('CWTest\\Context\\AdPackageContext' => class CWTest\\Context\\AdPackageContext { private $path = '/node/add/ad-package'; private $adPackagePageTitle = NULL; private $adPackageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\AllEditionsContext' => class CWTest\\Context\\AllEditionsContext { private $path = '/all-editions/'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\ArticleContext' => class CWTest\\Context\\ArticleContext { private $path = '/node/add/article'; private $articlePageHeadline = NULL; private $articleNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\BoxoutContext' => class CWTest\\Context\\BoxoutContext { private $path = '/node/add/boxout'; private $boxoutTitle = NULL; private $boxoutNodeId = NULL; private $boxoutItemCount = -1; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CardContext' => class CWTest\\Context\\CardContext { public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CartoonContext' => class CWTest\\Context\\CartoonContext { private $path = '/node/add/cartoons'; private $cartoonPageHeadline = NULL; private $cartoonNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CartoonTaxonomyContext' => class CWTest\\Context\\CartoonTaxonomyContext { private $path = '/admin/structure/taxonomy/turner_cartoon_type/add'; private $listPath = '/admin/structure/taxonomy/turner_cartoon_type'; private $cartoonTaxonomyNames = array (...); private $cartoonCount = 0; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\ContentXMLContext' => class CWTest\\Context\\ContentXMLContext { public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DeadLinkContext' => class CWTest\\Context\\DeadLinkContext { private $deadLinkPath = '/admin/config/turner/dead-link'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DTILinkContext' => class CWTest\\Context\\DTILinkContext { private $numberOfDTIStoriesLinkedToEditionCode = NULL; private $numberOfNewShellDTIStoriesSelectedForLinking = NULL; private $numberOfLinkToDTIStoriesSelectedForLinking = NULL; private $totalNumberOfDTIStoriesSelectedForLinking = NULL; private $dtiStoryName = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DTISyncContext' => class CWTest\\Context\\DTISyncContext { private $dtiSyncPath = '/admin/config/turner/dti-sync'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionContext' => class CWTest\\Context\\EditionContext { private $pathToSparkEdition = '/content-manager/120449'; private $duplicatedSectionName = NULL; private $dateOfFutureEdition = NULL; private $numberOfArticlesSelectedInTheOriginSection = NULL; private $numberOfArticlesInFutureSectionPriorToDuplication = NULL; private $numberOfArticlesInFutureSectionAfterDuplication = NULL; private $arrOriginalArticleStatusesBeforeDup = NULL; private $arrOriginalArticleStatusesAfterDup = NULL; public $articleShareURL = NULL; public $articleTitleOne = NULL; public $articleTitleTwo = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionEditorContext' => class CWTest\\Context\\EditionEditorContext { private $path = 'edit?destination=content-manager'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionPreviewContext' => class CWTest\\Context\\EditionPreviewContext { private $path = '/sites/all/modules/custom_module/core/reader/reader.html?atom=/editions/edition_'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\FirebaseContext' => class CWTest\\Context\\FirebaseContext { private $firebaseLinkPath = 'admin/config/turner/notifications'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\HeadshotContext' => class CWTest\\Context\\HeadshotContext { private $path = '/node/add/author'; private $headshotPageName = NULL; private $headshotNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\LoginContext' => class CWTest\\Context\\LoginContext { private $path = '/user/login'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\MyAccountContext' => class CWTest\\Context\\MyAccountContext { public $path = '/user'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\NewEditionsContext' => class CWTest\\Context\\NewEditionsContext { private $path = '/content-manager'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PackageContext' => class CWTest\\Context\\PackageContext { private $path = '/node/add/package'; private $packageHeadline = NULL; private $packageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PackageSyncStatusContext' => class CWTest\\Context\\PackageSyncStatusContext { private $packageSyncStatusLinkPath = '/admin/config/turner/package_sync_status'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PicnrunContext' => class CWTest\\Context\\PicnrunContext { private $path = '/node/add/pic-and-run'; private $picnrunHeadline = NULL; private $picnrunNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PublishedEditionsContext' => class CWTest\\Context\\PublishedEditionsContext { private $path = '/published-editions/'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\custom_moduleEditionContext' => class CWTest\\Context\\custom_moduleEditionContext { private $path = '/node/add/custom_module-edition'; private $custom_moduleedition_node_id = NULL; public $publicationDay = NULL; public $publicationMonth = NULL; public $publicationYear = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PuzzleContext' => class CWTest\\Context\\PuzzleContext { private $path = '/node/add/puzzle'; private $puzzleTitle = NULL; private $custom_moduleeditionNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SectionContext' => class CWTest\\Context\\SectionContext { private $path = '/node/add/section'; private $sectionNodeId = NULL; private $sectionName = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SectionTaxonomyContext' => class CWTest\\Context\\SectionTaxonomyContext { private $path = '/admin/structure/taxonomy/sections/add'; private $listPath = '/admin/structure/taxonomy/sections'; private $sectionTaxonomyNames = array (...); private $sectionCount = 0; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SkeletonGeneratorContext' => class CWTest\\Context\\SkeletonGeneratorContext { private $blankPath = '/admin/skeleton/create/blank'; private $weekdayPath = '/admin/skeleton/create/daily'; private $saturdaydayPath = '/admin/skeleton/create/saturday'; private $sundayPath = '/admin/skeleton/create/sunday'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SkippingEditionContext' => class CWTest\\Context\\SkippingEditionContext { private $skippingEditionsPath = 'admin/config/application/variables'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\UpdateAnnouncementContext' => class CWTest\\Context\\UpdateAnnouncementContext { private $updateAnnouncementPath = '/admin/config/turner/announcement'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\HelperContext' => class CWTest\\Context\\HelperContext { public $parameters = array (...); public $randomItems = class CWTest\\Util\\RandomItems { ... }; public $minkContext = class Drupal\\DrupalExtension\\Context\\MinkContext { ... }; private $html = NULL; private $pageElements = array (...); private $currentScenario = class Behat\\Gherkin\\Node\\ScenarioNode { ... }; private $scenarioName = 'Verify the structure of the Create Ad Package page'; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = FALSE; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }, 'Drupal\\DrupalExtension\\Context\\MinkContext' => class Drupal\\DrupalExtension\\Context\\MinkContext { private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }, 'Drupal\\DrupalExtension\\Context\\DrupalContext' => class Drupal\\DrupalExtension\\Context\\DrupalContext { private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = class stdClass { ... }; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }) }, $feature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { private $title = 'Restart the browser window'; private $steps = array (0 => class Behat\\Gherkin\\Node\\StepNode { ... }); private $keyword = 'Background'; private $line = 6 }; private $scenarios = array (0 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Create Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 14 }, 1 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Edit Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 20 }, 2 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Create Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 34 }, 3 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Edit Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 43 }, 4 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Edit an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 66 }, 5 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Delete an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 87 }, 6 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add and Delete an Ad Package to an edition (do hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 107 }, 7 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add an Ad Package to an edition (do not hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 154 }, 8 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Content override warning on Ad Packages'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 200 }, 9 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 230 }, 10 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 256 }, 11 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 281 }, 12 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 308 }, 13 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify warning message when unpublishing an Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 326 }); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 }, $step = class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'Then'; private $keywordType = 'Then'; private $text = 'I verify the structure of the Create Ad Package page'; private $arguments = array (); private $line = 17 }, $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Behat/EventDispatcher/Tester/EventDispatchingStepTester.php:73\n25. Behat\\Behat\\Tester\\Runtime\\RuntimeStepTester->test($env = class Behat\\Behat\\Context\\Environment\\InitializedContextEnvironment { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) }; private $contexts = array ('CWTest\\Context\\AdPackageContext' => class CWTest\\Context\\AdPackageContext { private $path = '/node/add/ad-package'; private $adPackagePageTitle = NULL; private $adPackageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\AllEditionsContext' => class CWTest\\Context\\AllEditionsContext { private $path = '/all-editions/'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\ArticleContext' => class CWTest\\Context\\ArticleContext { private $path = '/node/add/article'; private $articlePageHeadline = NULL; private $articleNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\BoxoutContext' => class CWTest\\Context\\BoxoutContext { private $path = '/node/add/boxout'; private $boxoutTitle = NULL; private $boxoutNodeId = NULL; private $boxoutItemCount = -1; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CardContext' => class CWTest\\Context\\CardContext { public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CartoonContext' => class CWTest\\Context\\CartoonContext { private $path = '/node/add/cartoons'; private $cartoonPageHeadline = NULL; private $cartoonNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CartoonTaxonomyContext' => class CWTest\\Context\\CartoonTaxonomyContext { private $path = '/admin/structure/taxonomy/turner_cartoon_type/add'; private $listPath = '/admin/structure/taxonomy/turner_cartoon_type'; private $cartoonTaxonomyNames = array (...); private $cartoonCount = 0; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\ContentXMLContext' => class CWTest\\Context\\ContentXMLContext { public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DeadLinkContext' => class CWTest\\Context\\DeadLinkContext { private $deadLinkPath = '/admin/config/turner/dead-link'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DTILinkContext' => class CWTest\\Context\\DTILinkContext { private $numberOfDTIStoriesLinkedToEditionCode = NULL; private $numberOfNewShellDTIStoriesSelectedForLinking = NULL; private $numberOfLinkToDTIStoriesSelectedForLinking = NULL; private $totalNumberOfDTIStoriesSelectedForLinking = NULL; private $dtiStoryName = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DTISyncContext' => class CWTest\\Context\\DTISyncContext { private $dtiSyncPath = '/admin/config/turner/dti-sync'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionContext' => class CWTest\\Context\\EditionContext { private $pathToSparkEdition = '/content-manager/120449'; private $duplicatedSectionName = NULL; private $dateOfFutureEdition = NULL; private $numberOfArticlesSelectedInTheOriginSection = NULL; private $numberOfArticlesInFutureSectionPriorToDuplication = NULL; private $numberOfArticlesInFutureSectionAfterDuplication = NULL; private $arrOriginalArticleStatusesBeforeDup = NULL; private $arrOriginalArticleStatusesAfterDup = NULL; public $articleShareURL = NULL; public $articleTitleOne = NULL; public $articleTitleTwo = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionEditorContext' => class CWTest\\Context\\EditionEditorContext { private $path = 'edit?destination=content-manager'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionPreviewContext' => class CWTest\\Context\\EditionPreviewContext { private $path = '/sites/all/modules/custom_module/core/reader/reader.html?atom=/editions/edition_'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\FirebaseContext' => class CWTest\\Context\\FirebaseContext { private $firebaseLinkPath = 'admin/config/turner/notifications'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\HeadshotContext' => class CWTest\\Context\\HeadshotContext { private $path = '/node/add/author'; private $headshotPageName = NULL; private $headshotNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\LoginContext' => class CWTest\\Context\\LoginContext { private $path = '/user/login'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\MyAccountContext' => class CWTest\\Context\\MyAccountContext { public $path = '/user'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\NewEditionsContext' => class CWTest\\Context\\NewEditionsContext { private $path = '/content-manager'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PackageContext' => class CWTest\\Context\\PackageContext { private $path = '/node/add/package'; private $packageHeadline = NULL; private $packageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PackageSyncStatusContext' => class CWTest\\Context\\PackageSyncStatusContext { private $packageSyncStatusLinkPath = '/admin/config/turner/package_sync_status'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PicnrunContext' => class CWTest\\Context\\PicnrunContext { private $path = '/node/add/pic-and-run'; private $picnrunHeadline = NULL; private $picnrunNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PublishedEditionsContext' => class CWTest\\Context\\PublishedEditionsContext { private $path = '/published-editions/'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\custom_moduleEditionContext' => class CWTest\\Context\\custom_moduleEditionContext { private $path = '/node/add/custom_module-edition'; private $custom_moduleedition_node_id = NULL; public $publicationDay = NULL; public $publicationMonth = NULL; public $publicationYear = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PuzzleContext' => class CWTest\\Context\\PuzzleContext { private $path = '/node/add/puzzle'; private $puzzleTitle = NULL; private $custom_moduleeditionNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SectionContext' => class CWTest\\Context\\SectionContext { private $path = '/node/add/section'; private $sectionNodeId = NULL; private $sectionName = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SectionTaxonomyContext' => class CWTest\\Context\\SectionTaxonomyContext { private $path = '/admin/structure/taxonomy/sections/add'; private $listPath = '/admin/structure/taxonomy/sections'; private $sectionTaxonomyNames = array (...); private $sectionCount = 0; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SkeletonGeneratorContext' => class CWTest\\Context\\SkeletonGeneratorContext { private $blankPath = '/admin/skeleton/create/blank'; private $weekdayPath = '/admin/skeleton/create/daily'; private $saturdaydayPath = '/admin/skeleton/create/saturday'; private $sundayPath = '/admin/skeleton/create/sunday'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SkippingEditionContext' => class CWTest\\Context\\SkippingEditionContext { private $skippingEditionsPath = 'admin/config/application/variables'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\UpdateAnnouncementContext' => class CWTest\\Context\\UpdateAnnouncementContext { private $updateAnnouncementPath = '/admin/config/turner/announcement'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\HelperContext' => class CWTest\\Context\\HelperContext { public $parameters = array (...); public $randomItems = class CWTest\\Util\\RandomItems { ... }; public $minkContext = class Drupal\\DrupalExtension\\Context\\MinkContext { ... }; private $html = NULL; private $pageElements = array (...); private $currentScenario = class Behat\\Gherkin\\Node\\ScenarioNode { ... }; private $scenarioName = 'Verify the structure of the Create Ad Package page'; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = FALSE; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }, 'Drupal\\DrupalExtension\\Context\\MinkContext' => class Drupal\\DrupalExtension\\Context\\MinkContext { private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }, 'Drupal\\DrupalExtension\\Context\\DrupalContext' => class Drupal\\DrupalExtension\\Context\\DrupalContext { private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = class stdClass { ... }; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }) }, $feature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { private $title = 'Restart the browser window'; private $steps = array (0 => class Behat\\Gherkin\\Node\\StepNode { ... }); private $keyword = 'Background'; private $line = 6 }; private $scenarios = array (0 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Create Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 14 }, 1 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Edit Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 20 }, 2 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Create Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 34 }, 3 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Edit Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 43 }, 4 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Edit an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 66 }, 5 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Delete an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 87 }, 6 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add and Delete an Ad Package to an edition (do hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 107 }, 7 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add an Ad Package to an edition (do not hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 154 }, 8 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Content override warning on Ad Packages'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 200 }, 9 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 230 }, 10 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 256 }, 11 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 281 }, 12 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 308 }, 13 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify warning message when unpublishing an Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 326 }); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 }, $step = class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'Then'; private $keywordType = 'Then'; private $text = 'I verify the structure of the Create Ad Package page'; private $arguments = array (); private $line = 17 }, $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Behat/Hook/Tester/HookableStepTester.php:74\n26. Behat\\Behat\\Tester\\Runtime\\RuntimeStepTester->testDefinition($env = class Behat\\Behat\\Context\\Environment\\InitializedContextEnvironment { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array ('paths' => array (...), 'contexts' => array (...), 'filters' => array (...)) }; private $contexts = array ('CWTest\\Context\\AdPackageContext' => class CWTest\\Context\\AdPackageContext { private $path = '/node/add/ad-package'; private $adPackagePageTitle = NULL; private $adPackageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\AllEditionsContext' => class CWTest\\Context\\AllEditionsContext { private $path = '/all-editions/'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\ArticleContext' => class CWTest\\Context\\ArticleContext { private $path = '/node/add/article'; private $articlePageHeadline = NULL; private $articleNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\BoxoutContext' => class CWTest\\Context\\BoxoutContext { private $path = '/node/add/boxout'; private $boxoutTitle = NULL; private $boxoutNodeId = NULL; private $boxoutItemCount = -1; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CardContext' => class CWTest\\Context\\CardContext { public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CartoonContext' => class CWTest\\Context\\CartoonContext { private $path = '/node/add/cartoons'; private $cartoonPageHeadline = NULL; private $cartoonNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\CartoonTaxonomyContext' => class CWTest\\Context\\CartoonTaxonomyContext { private $path = '/admin/structure/taxonomy/turner_cartoon_type/add'; private $listPath = '/admin/structure/taxonomy/turner_cartoon_type'; private $cartoonTaxonomyNames = array (...); private $cartoonCount = 0; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\ContentXMLContext' => class CWTest\\Context\\ContentXMLContext { public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DeadLinkContext' => class CWTest\\Context\\DeadLinkContext { private $deadLinkPath = '/admin/config/turner/dead-link'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DTILinkContext' => class CWTest\\Context\\DTILinkContext { private $numberOfDTIStoriesLinkedToEditionCode = NULL; private $numberOfNewShellDTIStoriesSelectedForLinking = NULL; private $numberOfLinkToDTIStoriesSelectedForLinking = NULL; private $totalNumberOfDTIStoriesSelectedForLinking = NULL; private $dtiStoryName = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\DTISyncContext' => class CWTest\\Context\\DTISyncContext { private $dtiSyncPath = '/admin/config/turner/dti-sync'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionContext' => class CWTest\\Context\\EditionContext { private $pathToSparkEdition = '/content-manager/120449'; private $duplicatedSectionName = NULL; private $dateOfFutureEdition = NULL; private $numberOfArticlesSelectedInTheOriginSection = NULL; private $numberOfArticlesInFutureSectionPriorToDuplication = NULL; private $numberOfArticlesInFutureSectionAfterDuplication = NULL; private $arrOriginalArticleStatusesBeforeDup = NULL; private $arrOriginalArticleStatusesAfterDup = NULL; public $articleShareURL = NULL; public $articleTitleOne = NULL; public $articleTitleTwo = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionEditorContext' => class CWTest\\Context\\EditionEditorContext { private $path = 'edit?destination=content-manager'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\EditionPreviewContext' => class CWTest\\Context\\EditionPreviewContext { private $path = '/sites/all/modules/custom_module/core/reader/reader.html?atom=/editions/edition_'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\FirebaseContext' => class CWTest\\Context\\FirebaseContext { private $firebaseLinkPath = 'admin/config/turner/notifications'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\HeadshotContext' => class CWTest\\Context\\HeadshotContext { private $path = '/node/add/author'; private $headshotPageName = NULL; private $headshotNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\LoginContext' => class CWTest\\Context\\LoginContext { private $path = '/user/login'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\MyAccountContext' => class CWTest\\Context\\MyAccountContext { public $path = '/user'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\NewEditionsContext' => class CWTest\\Context\\NewEditionsContext { private $path = '/content-manager'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PackageContext' => class CWTest\\Context\\PackageContext { private $path = '/node/add/package'; private $packageHeadline = NULL; private $packageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PackageSyncStatusContext' => class CWTest\\Context\\PackageSyncStatusContext { private $packageSyncStatusLinkPath = '/admin/config/turner/package_sync_status'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PicnrunContext' => class CWTest\\Context\\PicnrunContext { private $path = '/node/add/pic-and-run'; private $picnrunHeadline = NULL; private $picnrunNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PublishedEditionsContext' => class CWTest\\Context\\PublishedEditionsContext { private $path = '/published-editions/'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\custom_moduleEditionContext' => class CWTest\\Context\\custom_moduleEditionContext { private $path = '/node/add/custom_module-edition'; private $custom_moduleedition_node_id = NULL; public $publicationDay = NULL; public $publicationMonth = NULL; public $publicationYear = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\PuzzleContext' => class CWTest\\Context\\PuzzleContext { private $path = '/node/add/puzzle'; private $puzzleTitle = NULL; private $custom_moduleeditionNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SectionContext' => class CWTest\\Context\\SectionContext { private $path = '/node/add/section'; private $sectionNodeId = NULL; private $sectionName = NULL; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SectionTaxonomyContext' => class CWTest\\Context\\SectionTaxonomyContext { private $path = '/admin/structure/taxonomy/sections/add'; private $listPath = '/admin/structure/taxonomy/sections'; private $sectionTaxonomyNames = array (...); private $sectionCount = 0; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SkeletonGeneratorContext' => class CWTest\\Context\\SkeletonGeneratorContext { private $blankPath = '/admin/skeleton/create/blank'; private $weekdayPath = '/admin/skeleton/create/daily'; private $saturdaydayPath = '/admin/skeleton/create/saturday'; private $sundayPath = '/admin/skeleton/create/sunday'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\SkippingEditionContext' => class CWTest\\Context\\SkippingEditionContext { private $skippingEditionsPath = 'admin/config/application/variables'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\UpdateAnnouncementContext' => class CWTest\\Context\\UpdateAnnouncementContext { private $updateAnnouncementPath = '/admin/config/turner/announcement'; public $helperContext = class CWTest\\Context\\HelperContext { ... }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 'CWTest\\Context\\HelperContext' => class CWTest\\Context\\HelperContext { public $parameters = array (...); public $randomItems = class CWTest\\Util\\RandomItems { ... }; public $minkContext = class Drupal\\DrupalExtension\\Context\\MinkContext { ... }; private $html = NULL; private $pageElements = array (...); private $currentScenario = class Behat\\Gherkin\\Node\\ScenarioNode { ... }; private $scenarioName = 'Verify the structure of the Create Ad Package page'; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = FALSE; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }, 'Drupal\\DrupalExtension\\Context\\MinkContext' => class Drupal\\DrupalExtension\\Context\\MinkContext { private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }, 'Drupal\\DrupalExtension\\Context\\DrupalContext' => class Drupal\\DrupalExtension\\Context\\DrupalContext { private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = class stdClass { ... }; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }) }, $feature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { private $title = 'Restart the browser window'; private $steps = array (0 => class Behat\\Gherkin\\Node\\StepNode { ... }); private $keyword = 'Background'; private $line = 6 }; private $scenarios = array (0 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Create Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 14 }, 1 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify the structure of the Edit Ad Package page'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 20 }, 2 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Create Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 34 }, 3 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Validation rules on Edit Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 43 }, 4 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Edit an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 66 }, 5 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Create and Delete an Ad Package with specified values'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 87 }, 6 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add and Delete an Ad Package to an edition (do hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 107 }, 7 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add an Ad Package to an edition (do not hide card and masterhead)'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 154 }, 8 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Content override warning on Ad Packages'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 200 }, 9 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 230 }, 10 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 256 }, 11 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package with campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 281 }, 12 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Add a non Sponsored Ad package without campaign ID'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 308 }, 13 => class Behat\\Gherkin\\Node\\ScenarioNode { private $title = 'Verify warning message when unpublishing an Ad Package'; private $tags = array (...); private $steps = array (...); private $keyword = 'Scenario'; private $line = 326 }); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 }, $step = class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'Then'; private $keywordType = 'Then'; private $text = 'I verify the structure of the Create Ad Package page'; private $arguments = array (); private $line = 17 }, $search = class Behat\\Behat\\Definition\\SearchResult { private $definition = class Behat\\Behat\\Definition\\Call\\Given { private ${Behat\\Behat\\Definition\\Call\\RuntimeDefinition}:type = 'Given'; private ${Behat\\Behat\\Definition\\Call\\RuntimeDefinition}:pattern = 'I verify the structure of the Create Ad Package page'; private ${Behat\\Testwork\\Call\\RuntimeCallee}:callable = array (0 => 'CWTest\\Context\\AdPackageContext', 1 => 'iVerifyTheStructureOfTheCreateAdPackagePage'); private ${Behat\\Testwork\\Call\\RuntimeCallee}:description = ''; private ${Behat\\Testwork\\Call\\RuntimeCallee}:reflection = class ReflectionMethod { public $name = 'iVerifyTheStructureOfTheCreateAdPackagePage'; public $class = 'CWTest\\Context\\AdPackageContext' }; private ${Behat\\Testwork\\Call\\RuntimeCallee}:path = 'CWTest\\Context\\AdPackageContext::iVerifyTheStructureOfTheCreateAdPackagePage()' }; private $matchedText = 'I verify the structure of the Create Ad Package page'; private $arguments = array () }, $skip = FALSE) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Behat/Tester/Runtime/RuntimeStepTester.php:73\n27. Behat\\Testwork\\Call\\CallCenter->makeCall($call = class Behat\\Behat\\Definition\\Call\\DefinitionCall { private $feature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { private $title = 'Restart the browser window'; private $steps = array (...); private $keyword = 'Background'; private $line = 6 }; private $scenarios = array (0 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 1 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 2 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 3 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 4 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 5 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 6 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 7 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 8 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 9 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 10 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 11 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 12 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 13 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 }; private $step = class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'Then'; private $keywordType = 'Then'; private $text = 'I verify the structure of the Create Ad Package page'; private $arguments = array (); private $line = 17 }; private ${Behat\\Testwork\\Environment\\Call\\EnvironmentCall}:environment = class Behat\\Behat\\Context\\Environment\\InitializedContextEnvironment { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array (...) }; private $contexts = array ('CWTest\\Context\\AdPackageContext' => class CWTest\\Context\\AdPackageContext { ... }, 'CWTest\\Context\\AllEditionsContext' => class CWTest\\Context\\AllEditionsContext { ... }, 'CWTest\\Context\\ArticleContext' => class CWTest\\Context\\ArticleContext { ... }, 'CWTest\\Context\\BoxoutContext' => class CWTest\\Context\\BoxoutContext { ... }, 'CWTest\\Context\\CardContext' => class CWTest\\Context\\CardContext { ... }, 'CWTest\\Context\\CartoonContext' => class CWTest\\Context\\CartoonContext { ... }, 'CWTest\\Context\\CartoonTaxonomyContext' => class CWTest\\Context\\CartoonTaxonomyContext { ... }, 'CWTest\\Context\\ContentXMLContext' => class CWTest\\Context\\ContentXMLContext { ... }, 'CWTest\\Context\\DeadLinkContext' => class CWTest\\Context\\DeadLinkContext { ... }, 'CWTest\\Context\\DTILinkContext' => class CWTest\\Context\\DTILinkContext { ... }, 'CWTest\\Context\\DTISyncContext' => class CWTest\\Context\\DTISyncContext { ... }, 'CWTest\\Context\\EditionContext' => class CWTest\\Context\\EditionContext { ... }, 'CWTest\\Context\\EditionEditorContext' => class CWTest\\Context\\EditionEditorContext { ... }, 'CWTest\\Context\\EditionPreviewContext' => class CWTest\\Context\\EditionPreviewContext { ... }, 'CWTest\\Context\\FirebaseContext' => class CWTest\\Context\\FirebaseContext { ... }, 'CWTest\\Context\\HeadshotContext' => class CWTest\\Context\\HeadshotContext { ... }, 'CWTest\\Context\\LoginContext' => class CWTest\\Context\\LoginContext { ... }, 'CWTest\\Context\\MyAccountContext' => class CWTest\\Context\\MyAccountContext { ... }, 'CWTest\\Context\\NewEditionsContext' => class CWTest\\Context\\NewEditionsContext { ... }, 'CWTest\\Context\\PackageContext' => class CWTest\\Context\\PackageContext { ... }, 'CWTest\\Context\\PackageSyncStatusContext' => class CWTest\\Context\\PackageSyncStatusContext { ... }, 'CWTest\\Context\\PicnrunContext' => class CWTest\\Context\\PicnrunContext { ... }, 'CWTest\\Context\\PublishedEditionsContext' => class CWTest\\Context\\PublishedEditionsContext { ... }, 'CWTest\\Context\\custom_moduleEditionContext' => class CWTest\\Context\\custom_moduleEditionContext { ... }, 'CWTest\\Context\\PuzzleContext' => class CWTest\\Context\\PuzzleContext { ... }, 'CWTest\\Context\\SectionContext' => class CWTest\\Context\\SectionContext { ... }, 'CWTest\\Context\\SectionTaxonomyContext' => class CWTest\\Context\\SectionTaxonomyContext { ... }, 'CWTest\\Context\\SkeletonGeneratorContext' => class CWTest\\Context\\SkeletonGeneratorContext { ... }, 'CWTest\\Context\\SkippingEditionContext' => class CWTest\\Context\\SkippingEditionContext { ... }, 'CWTest\\Context\\UpdateAnnouncementContext' => class CWTest\\Context\\UpdateAnnouncementContext { ... }, 'CWTest\\Context\\HelperContext' => class CWTest\\Context\\HelperContext { ... }, 'Drupal\\DrupalExtension\\Context\\MinkContext' => class Drupal\\DrupalExtension\\Context\\MinkContext { ... }, 'Drupal\\DrupalExtension\\Context\\DrupalContext' => class Drupal\\DrupalExtension\\Context\\DrupalContext { ... }) }; private ${Behat\\Testwork\\Environment\\Call\\EnvironmentCall}:callee = class Behat\\Behat\\Definition\\Call\\Given { private ${Behat\\Behat\\Definition\\Call\\RuntimeDefinition}:type = 'Given'; private ${Behat\\Behat\\Definition\\Call\\RuntimeDefinition}:pattern = 'I verify the structure of the Create Ad Package page'; private ${Behat\\Testwork\\Call\\RuntimeCallee}:callable = array (0 => 'CWTest\\Context\\AdPackageContext', 1 => 'iVerifyTheStructureOfTheCreateAdPackagePage'); private ${Behat\\Testwork\\Call\\RuntimeCallee}:description = ''; private ${Behat\\Testwork\\Call\\RuntimeCallee}:reflection = class ReflectionMethod { public $name = 'iVerifyTheStructureOfTheCreateAdPackagePage'; public $class = 'CWTest\\Context\\AdPackageContext' }; private ${Behat\\Testwork\\Call\\RuntimeCallee}:path = 'CWTest\\Context\\AdPackageContext::iVerifyTheStructureOfTheCreateAdPackagePage()' }; private ${Behat\\Testwork\\Environment\\Call\\EnvironmentCall}:arguments = array (); private ${Behat\\Testwork\\Environment\\Call\\EnvironmentCall}:errorReportingLevel = NULL }) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Behat/Tester/Runtime/RuntimeStepTester.php:125\n28. Behat\\Testwork\\Call\\CallCenter->handleCall($call = class Behat\\Behat\\Definition\\Call\\DefinitionCall { private $feature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { private $title = 'Restart the browser window'; private $steps = array (...); private $keyword = 'Background'; private $line = 6 }; private $scenarios = array (0 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 1 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 2 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 3 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 4 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 5 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 6 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 7 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 8 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 9 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 10 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 11 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 12 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 13 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 }; private $step = class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'Then'; private $keywordType = 'Then'; private $text = 'I verify the structure of the Create Ad Package page'; private $arguments = array (); private $line = 17 }; private ${Behat\\Testwork\\Environment\\Call\\EnvironmentCall}:environment = class Behat\\Behat\\Context\\Environment\\InitializedContextEnvironment { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array (...) }; private $contexts = array ('CWTest\\Context\\AdPackageContext' => class CWTest\\Context\\AdPackageContext { ... }, 'CWTest\\Context\\AllEditionsContext' => class CWTest\\Context\\AllEditionsContext { ... }, 'CWTest\\Context\\ArticleContext' => class CWTest\\Context\\ArticleContext { ... }, 'CWTest\\Context\\BoxoutContext' => class CWTest\\Context\\BoxoutContext { ... }, 'CWTest\\Context\\CardContext' => class CWTest\\Context\\CardContext { ... }, 'CWTest\\Context\\CartoonContext' => class CWTest\\Context\\CartoonContext { ... }, 'CWTest\\Context\\CartoonTaxonomyContext' => class CWTest\\Context\\CartoonTaxonomyContext { ... }, 'CWTest\\Context\\ContentXMLContext' => class CWTest\\Context\\ContentXMLContext { ... }, 'CWTest\\Context\\DeadLinkContext' => class CWTest\\Context\\DeadLinkContext { ... }, 'CWTest\\Context\\DTILinkContext' => class CWTest\\Context\\DTILinkContext { ... }, 'CWTest\\Context\\DTISyncContext' => class CWTest\\Context\\DTISyncContext { ... }, 'CWTest\\Context\\EditionContext' => class CWTest\\Context\\EditionContext { ... }, 'CWTest\\Context\\EditionEditorContext' => class CWTest\\Context\\EditionEditorContext { ... }, 'CWTest\\Context\\EditionPreviewContext' => class CWTest\\Context\\EditionPreviewContext { ... }, 'CWTest\\Context\\FirebaseContext' => class CWTest\\Context\\FirebaseContext { ... }, 'CWTest\\Context\\HeadshotContext' => class CWTest\\Context\\HeadshotContext { ... }, 'CWTest\\Context\\LoginContext' => class CWTest\\Context\\LoginContext { ... }, 'CWTest\\Context\\MyAccountContext' => class CWTest\\Context\\MyAccountContext { ... }, 'CWTest\\Context\\NewEditionsContext' => class CWTest\\Context\\NewEditionsContext { ... }, 'CWTest\\Context\\PackageContext' => class CWTest\\Context\\PackageContext { ... }, 'CWTest\\Context\\PackageSyncStatusContext' => class CWTest\\Context\\PackageSyncStatusContext { ... }, 'CWTest\\Context\\PicnrunContext' => class CWTest\\Context\\PicnrunContext { ... }, 'CWTest\\Context\\PublishedEditionsContext' => class CWTest\\Context\\PublishedEditionsContext { ... }, 'CWTest\\Context\\custom_moduleEditionContext' => class CWTest\\Context\\custom_moduleEditionContext { ... }, 'CWTest\\Context\\PuzzleContext' => class CWTest\\Context\\PuzzleContext { ... }, 'CWTest\\Context\\SectionContext' => class CWTest\\Context\\SectionContext { ... }, 'CWTest\\Context\\SectionTaxonomyContext' => class CWTest\\Context\\SectionTaxonomyContext { ... }, 'CWTest\\Context\\SkeletonGeneratorContext' => class CWTest\\Context\\SkeletonGeneratorContext { ... }, 'CWTest\\Context\\SkippingEditionContext' => class CWTest\\Context\\SkippingEditionContext { ... }, 'CWTest\\Context\\UpdateAnnouncementContext' => class CWTest\\Context\\UpdateAnnouncementContext { ... }, 'CWTest\\Context\\HelperContext' => class CWTest\\Context\\HelperContext { ... }, 'Drupal\\DrupalExtension\\Context\\MinkContext' => class Drupal\\DrupalExtension\\Context\\MinkContext { ... }, 'Drupal\\DrupalExtension\\Context\\DrupalContext' => class Drupal\\DrupalExtension\\Context\\DrupalContext { ... }) }; private ${Behat\\Testwork\\Environment\\Call\\EnvironmentCall}:callee = class Behat\\Behat\\Definition\\Call\\Given { private ${Behat\\Behat\\Definition\\Call\\RuntimeDefinition}:type = 'Given'; private ${Behat\\Behat\\Definition\\Call\\RuntimeDefinition}:pattern = 'I verify the structure of the Create Ad Package page'; private ${Behat\\Testwork\\Call\\RuntimeCallee}:callable = array (0 => 'CWTest\\Context\\AdPackageContext', 1 => 'iVerifyTheStructureOfTheCreateAdPackagePage'); private ${Behat\\Testwork\\Call\\RuntimeCallee}:description = ''; private ${Behat\\Testwork\\Call\\RuntimeCallee}:reflection = class ReflectionMethod { public $name = 'iVerifyTheStructureOfTheCreateAdPackagePage'; public $class = 'CWTest\\Context\\AdPackageContext' }; private ${Behat\\Testwork\\Call\\RuntimeCallee}:path = 'CWTest\\Context\\AdPackageContext::iVerifyTheStructureOfTheCreateAdPackagePage()' }; private ${Behat\\Testwork\\Environment\\Call\\EnvironmentCall}:arguments = array (); private ${Behat\\Testwork\\Environment\\Call\\EnvironmentCall}:errorReportingLevel = NULL }) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Testwork/Call/CallCenter.php:82\n29. Behat\\Testwork\\Call\\Handler\\RuntimeCallHandler->handleCall($call = class Behat\\Behat\\Definition\\Call\\DefinitionCall { private $feature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { private $title = 'Restart the browser window'; private $steps = array (...); private $keyword = 'Background'; private $line = 6 }; private $scenarios = array (0 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 1 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 2 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 3 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 4 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 5 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 6 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 7 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 8 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 9 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 10 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 11 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 12 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 13 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 }; private $step = class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'Then'; private $keywordType = 'Then'; private $text = 'I verify the structure of the Create Ad Package page'; private $arguments = array (); private $line = 17 }; private ${Behat\\Testwork\\Environment\\Call\\EnvironmentCall}:environment = class Behat\\Behat\\Context\\Environment\\InitializedContextEnvironment { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array (...) }; private $contexts = array ('CWTest\\Context\\AdPackageContext' => class CWTest\\Context\\AdPackageContext { ... }, 'CWTest\\Context\\AllEditionsContext' => class CWTest\\Context\\AllEditionsContext { ... }, 'CWTest\\Context\\ArticleContext' => class CWTest\\Context\\ArticleContext { ... }, 'CWTest\\Context\\BoxoutContext' => class CWTest\\Context\\BoxoutContext { ... }, 'CWTest\\Context\\CardContext' => class CWTest\\Context\\CardContext { ... }, 'CWTest\\Context\\CartoonContext' => class CWTest\\Context\\CartoonContext { ... }, 'CWTest\\Context\\CartoonTaxonomyContext' => class CWTest\\Context\\CartoonTaxonomyContext { ... }, 'CWTest\\Context\\ContentXMLContext' => class CWTest\\Context\\ContentXMLContext { ... }, 'CWTest\\Context\\DeadLinkContext' => class CWTest\\Context\\DeadLinkContext { ... }, 'CWTest\\Context\\DTILinkContext' => class CWTest\\Context\\DTILinkContext { ... }, 'CWTest\\Context\\DTISyncContext' => class CWTest\\Context\\DTISyncContext { ... }, 'CWTest\\Context\\EditionContext' => class CWTest\\Context\\EditionContext { ... }, 'CWTest\\Context\\EditionEditorContext' => class CWTest\\Context\\EditionEditorContext { ... }, 'CWTest\\Context\\EditionPreviewContext' => class CWTest\\Context\\EditionPreviewContext { ... }, 'CWTest\\Context\\FirebaseContext' => class CWTest\\Context\\FirebaseContext { ... }, 'CWTest\\Context\\HeadshotContext' => class CWTest\\Context\\HeadshotContext { ... }, 'CWTest\\Context\\LoginContext' => class CWTest\\Context\\LoginContext { ... }, 'CWTest\\Context\\MyAccountContext' => class CWTest\\Context\\MyAccountContext { ... }, 'CWTest\\Context\\NewEditionsContext' => class CWTest\\Context\\NewEditionsContext { ... }, 'CWTest\\Context\\PackageContext' => class CWTest\\Context\\PackageContext { ... }, 'CWTest\\Context\\PackageSyncStatusContext' => class CWTest\\Context\\PackageSyncStatusContext { ... }, 'CWTest\\Context\\PicnrunContext' => class CWTest\\Context\\PicnrunContext { ... }, 'CWTest\\Context\\PublishedEditionsContext' => class CWTest\\Context\\PublishedEditionsContext { ... }, 'CWTest\\Context\\custom_moduleEditionContext' => class CWTest\\Context\\custom_moduleEditionContext { ... }, 'CWTest\\Context\\PuzzleContext' => class CWTest\\Context\\PuzzleContext { ... }, 'CWTest\\Context\\SectionContext' => class CWTest\\Context\\SectionContext { ... }, 'CWTest\\Context\\SectionTaxonomyContext' => class CWTest\\Context\\SectionTaxonomyContext { ... }, 'CWTest\\Context\\SkeletonGeneratorContext' => class CWTest\\Context\\SkeletonGeneratorContext { ... }, 'CWTest\\Context\\SkippingEditionContext' => class CWTest\\Context\\SkippingEditionContext { ... }, 'CWTest\\Context\\UpdateAnnouncementContext' => class CWTest\\Context\\UpdateAnnouncementContext { ... }, 'CWTest\\Context\\HelperContext' => class CWTest\\Context\\HelperContext { ... }, 'Drupal\\DrupalExtension\\Context\\MinkContext' => class Drupal\\DrupalExtension\\Context\\MinkContext { ... }, 'Drupal\\DrupalExtension\\Context\\DrupalContext' => class Drupal\\DrupalExtension\\Context\\DrupalContext { ... }) }; private ${Behat\\Testwork\\Environment\\Call\\EnvironmentCall}:callee = class Behat\\Behat\\Definition\\Call\\Given { private ${Behat\\Behat\\Definition\\Call\\RuntimeDefinition}:type = 'Given'; private ${Behat\\Behat\\Definition\\Call\\RuntimeDefinition}:pattern = 'I verify the structure of the Create Ad Package page'; private ${Behat\\Testwork\\Call\\RuntimeCallee}:callable = array (0 => 'CWTest\\Context\\AdPackageContext', 1 => 'iVerifyTheStructureOfTheCreateAdPackagePage'); private ${Behat\\Testwork\\Call\\RuntimeCallee}:description = ''; private ${Behat\\Testwork\\Call\\RuntimeCallee}:reflection = class ReflectionMethod { public $name = 'iVerifyTheStructureOfTheCreateAdPackagePage'; public $class = 'CWTest\\Context\\AdPackageContext' }; private ${Behat\\Testwork\\Call\\RuntimeCallee}:path = 'CWTest\\Context\\AdPackageContext::iVerifyTheStructureOfTheCreateAdPackagePage()' }; private ${Behat\\Testwork\\Environment\\Call\\EnvironmentCall}:arguments = array (); private ${Behat\\Testwork\\Environment\\Call\\EnvironmentCall}:errorReportingLevel = NULL }) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Testwork/Call/CallCenter.php:129\n30. Behat\\Testwork\\Call\\Handler\\RuntimeCallHandler->executeCall($call = class Behat\\Behat\\Definition\\Call\\DefinitionCall { private $feature = class Behat\\Gherkin\\Node\\FeatureNode { private $title = 'Ad Package page'; private $description = 'In order to test the Ad Package Content type\\nAs a variety of users\\nI need to verify the Ad Package page structure and functionality'; private $tags = array (); private $background = class Behat\\Gherkin\\Node\\BackgroundNode { private $title = 'Restart the browser window'; private $steps = array (...); private $keyword = 'Background'; private $line = 6 }; private $scenarios = array (0 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 1 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 2 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 3 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 4 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 5 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 6 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 7 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 8 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 9 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 10 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 11 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 12 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }, 13 => class Behat\\Gherkin\\Node\\ScenarioNode { ... }); private $keyword = 'Feature'; private $language = 'en'; private $file = 'sites/all/tests/functional/cwtest_behat/Behat/features/AdPackage.feature'; private $line = 1 }; private $step = class Behat\\Gherkin\\Node\\StepNode { private $keyword = 'Then'; private $keywordType = 'Then'; private $text = 'I verify the structure of the Create Ad Package page'; private $arguments = array (); private $line = 17 }; private ${Behat\\Testwork\\Environment\\Call\\EnvironmentCall}:environment = class Behat\\Behat\\Context\\Environment\\InitializedContextEnvironment { private $suite = class Behat\\Testwork\\Suite\\GenericSuite { private $name = 'regression'; private $settings = array (...) }; private $contexts = array ('CWTest\\Context\\AdPackageContext' => class CWTest\\Context\\AdPackageContext { ... }, 'CWTest\\Context\\AllEditionsContext' => class CWTest\\Context\\AllEditionsContext { ... }, 'CWTest\\Context\\ArticleContext' => class CWTest\\Context\\ArticleContext { ... }, 'CWTest\\Context\\BoxoutContext' => class CWTest\\Context\\BoxoutContext { ... }, 'CWTest\\Context\\CardContext' => class CWTest\\Context\\CardContext { ... }, 'CWTest\\Context\\CartoonContext' => class CWTest\\Context\\CartoonContext { ... }, 'CWTest\\Context\\CartoonTaxonomyContext' => class CWTest\\Context\\CartoonTaxonomyContext { ... }, 'CWTest\\Context\\ContentXMLContext' => class CWTest\\Context\\ContentXMLContext { ... }, 'CWTest\\Context\\DeadLinkContext' => class CWTest\\Context\\DeadLinkContext { ... }, 'CWTest\\Context\\DTILinkContext' => class CWTest\\Context\\DTILinkContext { ... }, 'CWTest\\Context\\DTISyncContext' => class CWTest\\Context\\DTISyncContext { ... }, 'CWTest\\Context\\EditionContext' => class CWTest\\Context\\EditionContext { ... }, 'CWTest\\Context\\EditionEditorContext' => class CWTest\\Context\\EditionEditorContext { ... }, 'CWTest\\Context\\EditionPreviewContext' => class CWTest\\Context\\EditionPreviewContext { ... }, 'CWTest\\Context\\FirebaseContext' => class CWTest\\Context\\FirebaseContext { ... }, 'CWTest\\Context\\HeadshotContext' => class CWTest\\Context\\HeadshotContext { ... }, 'CWTest\\Context\\LoginContext' => class CWTest\\Context\\LoginContext { ... }, 'CWTest\\Context\\MyAccountContext' => class CWTest\\Context\\MyAccountContext { ... }, 'CWTest\\Context\\NewEditionsContext' => class CWTest\\Context\\NewEditionsContext { ... }, 'CWTest\\Context\\PackageContext' => class CWTest\\Context\\PackageContext { ... }, 'CWTest\\Context\\PackageSyncStatusContext' => class CWTest\\Context\\PackageSyncStatusContext { ... }, 'CWTest\\Context\\PicnrunContext' => class CWTest\\Context\\PicnrunContext { ... }, 'CWTest\\Context\\PublishedEditionsContext' => class CWTest\\Context\\PublishedEditionsContext { ... }, 'CWTest\\Context\\custom_moduleEditionContext' => class CWTest\\Context\\custom_moduleEditionContext { ... }, 'CWTest\\Context\\PuzzleContext' => class CWTest\\Context\\PuzzleContext { ... }, 'CWTest\\Context\\SectionContext' => class CWTest\\Context\\SectionContext { ... }, 'CWTest\\Context\\SectionTaxonomyContext' => class CWTest\\Context\\SectionTaxonomyContext { ... }, 'CWTest\\Context\\SkeletonGeneratorContext' => class CWTest\\Context\\SkeletonGeneratorContext { ... }, 'CWTest\\Context\\SkippingEditionContext' => class CWTest\\Context\\SkippingEditionContext { ... }, 'CWTest\\Context\\UpdateAnnouncementContext' => class CWTest\\Context\\UpdateAnnouncementContext { ... }, 'CWTest\\Context\\HelperContext' => class CWTest\\Context\\HelperContext { ... }, 'Drupal\\DrupalExtension\\Context\\MinkContext' => class Drupal\\DrupalExtension\\Context\\MinkContext { ... }, 'Drupal\\DrupalExtension\\Context\\DrupalContext' => class Drupal\\DrupalExtension\\Context\\DrupalContext { ... }) }; private ${Behat\\Testwork\\Environment\\Call\\EnvironmentCall}:callee = class Behat\\Behat\\Definition\\Call\\Given { private ${Behat\\Behat\\Definition\\Call\\RuntimeDefinition}:type = 'Given'; private ${Behat\\Behat\\Definition\\Call\\RuntimeDefinition}:pattern = 'I verify the structure of the Create Ad Package page'; private ${Behat\\Testwork\\Call\\RuntimeCallee}:callable = array (0 => 'CWTest\\Context\\AdPackageContext', 1 => 'iVerifyTheStructureOfTheCreateAdPackagePage'); private ${Behat\\Testwork\\Call\\RuntimeCallee}:description = ''; private ${Behat\\Testwork\\Call\\RuntimeCallee}:reflection = class ReflectionMethod { public $name = 'iVerifyTheStructureOfTheCreateAdPackagePage'; public $class = 'CWTest\\Context\\AdPackageContext' }; private ${Behat\\Testwork\\Call\\RuntimeCallee}:path = 'CWTest\\Context\\AdPackageContext::iVerifyTheStructureOfTheCreateAdPackagePage()' }; private ${Behat\\Testwork\\Environment\\Call\\EnvironmentCall}:arguments = array (); private ${Behat\\Testwork\\Environment\\Call\\EnvironmentCall}:errorReportingLevel = NULL }) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Testwork/Call/Handler/RuntimeCallHandler.php:60\n31. call_user_func_array:{sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Testwork/Call/Handler/RuntimeCallHandler.php:104}(array (0 => class CWTest\\Context\\AdPackageContext { private $path = '/node/add/ad-package'; private $adPackagePageTitle = NULL; private $adPackageNodeId = NULL; public $helperContext = class CWTest\\Context\\HelperContext { public $parameters = array (...); public $randomItems = class CWTest\\Util\\RandomItems { ... }; public $minkContext = class Drupal\\DrupalExtension\\Context\\MinkContext { ... }; private $html = NULL; private $pageElements = array (...); private $currentScenario = class Behat\\Gherkin\\Node\\ScenarioNode { ... }; private $scenarioName = 'Verify the structure of the Create Ad Package page'; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupal = class Drupal\\DrupalDriverManager { ... }; private ${Drupal\\DrupalExtension\\Context\\RawDrupalContext}:drupalParameters = array (...); protected $dispatcher = class Behat\\Testwork\\Hook\\HookDispatcher { ... }; protected $nodes = array (...); public $user = FALSE; protected $users = array (...); protected $terms = array (...); protected $roles = array (...); protected $languages = array (...); private ${Behat\\MinkExtension\\Context\\RawMinkContext}:mink = class Behat\\Mink\\Mink { ... }; private ${Behat\\MinkExtension\\Context\\RawMinkContext}:minkParameters = array (...) }; public $editionContentXML = NULL; public $editionDay = NULL; public $editionMonth = NULL; public $editionYear = NULL }, 1 => 'iVerifyTheStructureOfTheCreateAdPackagePage'), array ()) sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Testwork/Call/Handler/RuntimeCallHandler.php:104\n32. CWTest\\Context\\AdPackageContext->iVerifyTheStructureOfTheCreateAdPackagePage() sites/all/tests/functional/cwtest_behat/vendor/behat/behat/src/Behat/Testwork/Call/Handler/RuntimeCallHandler.php:104\n33. CWTest\\Context\\AdPackageContext->verifyField($field = 'edit-title') sites/all/tests/functional/cwtest_behat/src/Context/AdPackageContext.php:217\n```\nSo you think it's not the problem with Behat it-self? It fails in makeCall in try/catch block in CallCenter.php. I've seen some changes to this function in master, maybe upgrade will help?. I'm using a small composer package cw/behat_test (see: CWTest_Behat/composer.json) which helps to deal with Behat testing in Drupal. Most of the classes are using CWTest_Behat library (see: verifyField). So the AdPackageContext.php looks like:\n```\nnamespace CWTest\\Context;\nuse CWTest\\Exception\\CWContextException;\nuse Turner\\Test\\Loader\\EditionLoader;\nclass AdPackageContext extends PageContext {\n//  Field identifiers.\n  const FIELD_TITLE = 'edit-title';\n  const FIELD_HIDE_MASTERHEAD = 'edit-field-hide-masterhead-und';\n/*\n   * @Given I verify the structure of the Create Ad Package page\n   /\n  public function iVerifyTheStructureOfTheCreateAdPackagePage() {\n    $this->verifyField(self::FIELD_TITLE);\n    $this->verifyField(self::FIELD_HIDE_MASTERHEAD);\n    // etc.\n  }\n}\n```\nAnd verifyField() is basically the same as in PageContext.php. So the error somehow happens when calling verifyField().. Ok, I think I found where is the problem. It is in PageContext.php file, where there is a line loading this class (in incorrect way):\nuse PHPUnit_Framework_Assert as Assertions;\n\nI'll have to report this issue to CWTest_Behat package then as it should use the namespaces syntax instead. Sorry for a trouble and thank you for helping out and tracking this down.. ",
    "rafenden": "Looks like I had to disable Xdebug. This fixed the problem for me.\n. ",
    "nifr": "@Gordiievskyi these kind of questions are better suited for a platform like stackoverflow.com. This is behat's issue tracker for bugs or feature-requests but not a question-and-answer-platform. You're probably not going to get much feedback over here.\nIt's a nice idea to create an Allure (never heard of that result showing tool before) formatter extension. As even the HTML formatter plugin won't make it into behat's core ... an allure formatter won't make it either.\nIf you need help with the implementation of this formatter-extension, just share the code you've written on stackoverflow.com, add the concrete issue/exception and some information about what you've tried so far to solve the problem and people will almost definitely help you out.\n. @pamil Did you start with the PR to add @return phpdoc? There's no reference in here and I can't find it in open PRs. I think this feature would be a great addition to behat. \n. I like this improvement/solution. This solves issues with parallel execution, too.\n. @lasotaartur You can work around this using tags. I implemented something similar for concurrent behat executions in our CI.\n```\n@feature-1\nFeature: Verify billing\n@scenario-1\n  Scenario: Missing product description\n  @scenario-2\n  Scenario: Several products\n```\nNow execute ...\nbin/behat --tags \"$(echo '@'feature-{1..2}'&&@scenario-'{1..4} | tr '[:blank:]' ',')\"\n\n... which resolves to:\nbin/behat --tags @feature-1&&@scenario-1,@feature-1&&@scenario-2,@feature-1&&@scenario-3,@feature-2&&@scenario-1,@feature-2&&@scenario-2,@feature-2&&@scenario-3. What do you mean by \"I installed it in my home directory by cloning behat\"?\n\nHow exactly did you \"install/clone\" it?\nFYI: You might get help and a faster reponse to your question by asking on a Q/A platform like stackoverflow \ud83d\ude04 . ",
    "Pierstoval": "Actually I had to box build behat manually for PhpStorm to use the phar archive...\n. @everzet Actually this is the best way to install behat (as well as phpunit, composer, etc.) because it does not plug all behat as a dependency to the project, because sometimes, PHP applications can introduce conflicts (it's the case with some phpunit version conflicting with some symfony versions).\nPhar install is the best because no conflicts at all :smile: \nCan't wait for other phars to come ;) \n. Do you folks need help in providing phars in each new release?. ",
    "drzraf": "reopen?. That's a bit sad because:\n the only other way is BEHAT_PARAMS which is itself an environment variable too\n most of the options does not have a command line switch (and none of the extension options)\n* but some of the extension's parameters are heavily \"dynamic\", think about MinkExtension:base_url as a good example\nSo we are only left with shell + environment interpolation like  BEHAT_PARAMS=\"...base_url:$HOSTNAME...\" which may not always be an option.. PR #1048 make this possible.\nSide benefit, this now works:\nBEHAT_PARAMS='{\"extensions\":{\"Behat\\\\MinkExtension\":{\"base_url\":\"http://%env(HOSTNAME):81\"}}}'. Will this be reopened? For the day Symfony2 support is dropped? In case %env() support could be enabled on-demand? @yakobe / @sroze ?. Sad, but understandable.\n. indeed (thank you for the tips).\nbut that would be ever better if such a phar file could be built and provided by @everzet on the official github releases page.\n . any news on this?. https://github.com/Behat/Behat/blob/master/.travis.yml#L40 seems ok.\nhttps://github.com/Behat/Behat/blob/master/box.json seems ok.\nhttps://travis-ci.org/Behat/Behat seems ok.\nSo I believe GitHub CI (\"deploy\" job) stopped working at some point.\nAFAICT we have no public log from GitHub CI that would let us inspect further what goes wrong.\n@everzet / @ciaranmcnulty any plan to solve this that's already 2 years without a phar/usable-release.. ",
    "jesseleite": "Hmm, I tried again today and all seems fine.  I must have been doing something wrong, sorry I'll close this.\n. ",
    "cve": "thanks for your reply, but  any suggestions how can I clear db in before and after feature for Symfony?\n. @spolischook thanks for your reply, but links are broken\n. I'm wonder why there is no out of the box solution for that... IMHO Functional tests need's db interaction with  99% cases... In Laravel there is DatabaseMigrations and DatabaseTransactions traits https://laravel.com/docs/5.1/testing#working-with-databases.\nIs there any easier solution instead of making custom listener?\n. @pamil before each scenario I have to repeat the background section...\n. ok guys, thanks for advices\n. I'm added following and methods beforeFeature and afterFeature are not called.\nBehatEventSubscriber\n``` php\n<?php\nnamespace Behat;\nuse Behat\\Behat\\EventDispatcher\\Event\\AfterFeatureTested;\nuse Behat\\Behat\\EventDispatcher\\Event\\BeforeFeatureTested;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Doctrine\\ORM\\Tools\\SchemaTool;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nclass BehatEventSubscriber implements EventSubscriberInterface\n{\n    /*\n     * @var EntityManagerInterface\n     /\n    private $em;\n/**\n * BeforeAfterFeature constructor.\n * @param EntityManagerInterface $em\n */\npublic function __construct(EntityManagerInterface $em)\n{\n    $this->em = $em;\n}\n\npublic function beforeFeature()\n{\n    $metadata = $this->em->getMetadataFactory()->getAllMetadata();\n\n    if (!empty($metadata)) {\n        $tool = new SchemaTool($this->em);\n        $tool->dropSchema($metadata);\n        $tool->createSchema($metadata);\n    }\n}\n\npublic function afterFeature()\n{\n    $this->em->clear();\n}\n\n/**\n * Returns an array of event names this subscriber wants to listen to.\n *\n * @return array The event names to listen to\n */\npublic static function getSubscribedEvents()\n{\n    return [\n        BeforeFeatureTested::BEFORE => ['beforeFeature', 100],\n        AfterFeatureTested::AFTER => ['afterFeature', -100],\n    ];\n}\n\n}\n```\nservices.yml\nyml\nservices:\n    behat.behat_event_subscriber:\n        class: Behat\\BehatEventSubscriber\n        arguments: ['@doctrine.orm.entity_manager']\n        tags:\n            - { name: event_dispatcher.subscriber }\n. What I'm trying to achieve is that:\n``` gherkin\nFeature: Menu structure\n  In order to display menu\n  As an API consumer\n  I need to be able to fetch menu with items which I've access to\nBackground:\n    Given the following permissions exists:\n      | name            | code            |\n      | USER_LIST       | USER_LIST       |\n      | PERMISSION_LIST | PERMISSION_LIST |\nScenario: Get menu for super admin\n    Given I am logged in as super admin\n    When I send a GET request to \"/api/menu\"\n    Then the JSON should be equal to:\n    \"\"\"\n    [\n      {\n        \"name\": \"panel\",\n        \"label\": \"Panel\",\n        \"path\": \"/\",\n        \"icon\": \"fa fa-th\"\n      },\n      {\n        \"name\": \"permission\",\n        \"label\": \"Uprawnienia\",\n        \"path\": \"/permission\",\n        \"icon\": \"fa fa-list\"\n      }\n    ]\n    \"\"\"\nScenario: Get menu for admin group\n    Given I am logged in as \"admin\" with \"admin\" group\n    When I send a GET request to \"/api/menu\"\n    Then the JSON should be equal to:\n    \"\"\"\n    [\n      {\n        \"name\": \"panel\",\n        \"label\": \"Panel\",\n        \"path\": \"/\",\n        \"icon\": \"fa fa-th\"\n      }\n    ]\n    \"\"\"\n```\nPlease note that preparation db for all scenarios is in one place (in background) for reason which you say:\n\nBackground is a way of making examples shorter and removing duplication of initial steps of multiply scenarios in one feature.\n\nBut without that, my scenarios have duplications of \"Given the following permissions exitsts...\":\n``` gherkin\nFeature: Menu structure\n  In order to display menu\n  As an API consumer\n  I need to be able to fetch menu with items which I've access to\nScenario: Get menu for super admin\n    Given the following permissions exists:\n      | name            | code            |\n      | USER_LIST       | USER_LIST       |\n      | PERMISSION_LIST | PERMISSION_LIST |\n    Given I am logged in as super admin\n    When I send a GET request to \"/api/menu\"\n    Then the JSON should be equal to:\n    \"\"\"\n    [\n      {\n        \"name\": \"panel\",\n        \"label\": \"Panel\",\n        \"path\": \"/\",\n        \"icon\": \"fa fa-th\"\n      },\n      {\n        \"name\": \"permission\",\n        \"label\": \"Uprawnienia\",\n        \"path\": \"/permission\",\n        \"icon\": \"fa fa-list\"\n      }\n    ]\n    \"\"\"\nScenario: Get menu for admin group\n    Given the following permissions exists:\n      | name            | code            |\n      | USER_LIST       | USER_LIST       |\n      | PERMISSION_LIST | PERMISSION_LIST |\n    Given I am logged in as \"admin\" with \"admin\" group\n    When I send a GET request to \"/api/menu\"\n    Then the JSON should be equal to:\n    \"\"\"\n    [\n      {\n        \"name\": \"panel\",\n        \"label\": \"Panel\",\n        \"path\": \"/\",\n        \"icon\": \"fa fa-th\"\n      }\n    ]\n    \"\"\"\n```\np.s. @avant1, saying \"before each scenario I have to repeat the background section...\" I want to reply to @pamil, sorry for not mentioning him before\n. @spolischook ok, I will try, thanks\n. > Since you have two scenarios in this feature, second scenario will get \"dirty\" application state (which was left after first scenario).\n@avant1 you are right, but I can't imagine how to maitain bigger systems with that approach, but thanks for clarification about \"dirty\" state app - it makes sense.\n@pamil sorry for misunderstand you, now I see what you meant, thanks\n. ",
    "phil-davis": "This is a nice little back and forth discussion of test isolation vs performance. So an example from me. Running in my VM on my i7 laptop, my database fixtures reload takes 9 seconds. On Travis it is taking 5 to 6 seconds - so still a fair bit of time. In a suite of features with 100 scenarios that is close to 10 minutes of the elapsed time.\nI am thinking to make a separate suite for all the \"readonly\" tests that do login, login with wrong password, use the app menus to navigate around, scroll up and down lists of stuff, click on things to open them and confirm that the data displays,.. Such a suite can run happily with the fixtures loaded just once at the start. At least that can save some time. And then spend 5.5 seconds per scenario for test isolation of scenarios that do actually change data.. I also discovered the idea to have a BeforeScenario method that is tagged like:\n@BeforeScenario @fixtures\nand does the fixtures reload.\nThen tag scenarios that need fixtures with @fixtures or you can tag a whole feature at the top with @fixtures and it runs he BeforeScenario \"fixtures\" code for every scenario in the feature - that saves having to paste @fixtures before every scenario.. For readers of a scenario outline there is a case for being able to make multiple example tables. Then you can head them up with descriptions of their purpose, e.g.\n```\n    Examples: of ordinary Latin character inputs\nExamples: of Unicode inputs\n\nExamples: of invalid inputs\n\nExamples: of weird edge cases for XYZ\n\n```\nthat makes it easier for others to understand the purpose of subsets of examples.\nAnd if/when it becomes supported to tag scenario outline examples, you could also be able to tag each examples table.\nThat way, there is the potential to run different combinations of example tables on a test run. e.g. have examples tables of \"a few typical valid inputs\" and \"a few typical invalid inputs\" and tag those \"smoketest\". Then you can run --tag smoketest with every pull request, and have it finish in a finite amount of time. A less-frequent job can be scheduled to run everything, processing all examples tables including ones that have lists of wacky edge cases.... For the record, the current behavior is that the last examples table is run, e.g.:\n```\n    Background:\n        Given a regular user exists\n        And I am logged in as a regular user\n        And I am on the files page\nScenario Outline: Rename a file using special characters\n    When I rename the file \"lorem.txt\" to <to_file_name>\n    Then the file <to_file_name> should be listed\n    And the files page is reloaded\n    Then the file <to_file_name> should be listed\n\n    Examples:\n    |to_file_name |\n    |'ordinary-name.txt' |\n    |'MixedCaseName.txt' |\n    Examples:\n    |to_file_name |\n    |'\"quotes1\"'  |\n    |\"'quotes2'\"  |\n    Examples:\n    |to_file_name |\n    |'\u0932\u094b\u0930\u0947\u092e.txt'  |\n    |'str\u00e4ng\u00e9 name.txt'  |\n\nruns 2 scenarios for the 2 file names in the last examples table.\nThe other examples tables are ignored - I guess the parser sees them as free text between the Scenario Outline steps and that last Examples table.. After putting the background steps into the scenario outline and removing the \"Background\" section, the ``AfterScenario`` output is still displayed before each line of the table.\nFeature: manage user quota\n  As an admin\n  I want to manage user quota\n  So that users can only take up a certain amount of storage space\nSAUCELABS RESULT: (pass) https://saucelabs.com/jobs/9374ef355d3a43e3851ce978d69de7d3\n  Scenario Outline: change quota to a valid value                          # /home/travis/build/[secure]/core/tests/ui/features/other/managingingUserQuota.feature:7\n    Given a regular user exists but is not initialized                     # FeatureContext::aRegularUserExists()\n    And I am logged in as admin                                            # FeatureContext::iAmLoggedInAsAdmin()\n    And I am on the users page                                             # UsersContext::iAmOnTheUsersPage()\n    And quota of user \"%regularuser%\" is set to \"\"            # UsersContext::quotaOfUserIsSetTo()\n    When quota of user \"%regularuser%\" is changed to \"\"      # UsersContext::quotaOfUserIsSetTo()\n    And the users page is reloaded                                         # UsersContext::theUsersPageIsReloaded()\n    Then quota of user \"%regularuser%\" should be set to \"\" # UsersContext::quotaOfUserShouldBeSetTo()\n    Examples:\n      | start_quota | wished_quota | expected_quota |\n      | Unlimited   | 5 GB         | 5 GB           |\nSAUCELABS RESULT: (pass) https://saucelabs.com/jobs/17b0a8da706649aea72b97536a968c5c\n      | 1 GB        | 5 GB         | 5 GB           |\nSAUCELABS RESULT: (pass) https://saucelabs.com/jobs/fef2759273774cffa2819eca2900f836\n      | 5 GB        | Unlimited    | Unlimited      |\nSAUCELABS RESULT: (pass) https://saucelabs.com/jobs/4b60a705b84e4a0c8d99b94274509f88\n      | Unlimited   | 0 Kb         | 0 B            |\n```\n. Not a high priority! But it would be nice for it to be more consistent between an ordinary \"Scenario\" and a \"Scenario Outline\".. Suggested doc enhancement PR https://github.com/Behat/docs/pull/124\nThat will make the behaviour more easily noticed, rather than just being mentioned in a blog that recedes into the past.. Doc has been added.. ",
    "sVeloper": "It means, that is not necessary to configure paths? Can i disclaim that?\nWhen i delete that from my configuration, i geht this error:\n\n[ReflectionException (-1)]\n  Class AppKernel does not exist\n. I could fix this problem.\nbehat-configuration should looks like that:\n\nfirefox34W7:\n  extensions:\n    Behat\\Symfony2Extension: ~\n    Behat\\MinkExtension:\n      base_url: http://localhost.com/myItems\n      browser_name: firefox\n      default_session: selenium2\n      selenium2:\n        wd_host: http://hub.selenium.intern.com:4444/wd/hub\n        capabilities: {'platform':'WINDOWS', 'browser':'firefox', 'version':'34'}\n  suites:\n    mink_session:\n      contexts:\n        - FeatureContext:\n. ",
    "generalconsensus": "Not quite clear on how to follow PSR-0, but I did refactor the if statements. Please advise\n. @sroze First time contributor to Behat. Points well taken! Let me know what you think of the changes?\n. @everzet Thank you! Yes to coaching exercise! Let me know how I can make this PR work for Behat!\n. @everzet I believe this is what you are looking for, please advise\n. Please let me know if this is a better design pattern\n. Ok I've left a pr on the Gherkin repo: https://github.com/Behat/Gherkin/pull/125. That fixes the bug that fails to find the relative file. . @glennunipro Sir, thank you for your help. I will admit my intention is just to fix not to extend or change functionality. These locator examples below worked back with Behat 2.x as far as I remember. Having just built a fresh Behat 3.3.1 instance I was disappointed to find that this functionality no longer working.  I'm only patching to get things working. I don't know about setting base path through extension. I leave that to core contributors to decide on how best to execute. \n\"a scenario at specific line <comment>(*.feature:10)</comment>.\",\n            \"all scenarios at or after a specific line <comment>(*.feature:10-*)</comment>.\",\n            \"all scenarios at a line within a specific range <comment>(*.feature:10-20)</comment>.\". @glennunipro Thanks for taking so much time on this. I will see if I can help by this afternoon. . I'm not quite clear on the best way forward with this -- I see that the PassthroughFormatter is another Formatter that I should be concerned with. Should I call the generateFilenameFor() method only when I know the $formatter is the NodeEventListeningFromatter class?\n. ",
    "zendoodles": "Interesting... Thank you! Now that I'm looking at the correct documentation (v3.0 instead of v2.5) I see this is actually documented and I should have read the fine manual. \nWhat tripped me up was for the \"progress\" format in the test the --out parameter is not required:\nbehat --no-colors -f pretty -f progress --format-settings='{\\\"multiline\\\": false}\nSo I skimmed over that bit in the rest of the examples there. I would still argue it's a bug, but I don't feel strongly enough to dig into the code and fix it since I have everything working now. \nNot having these tests for junit is also a bug IMO, but again, not one I have time to fix atm.\nThanks!\n. ",
    "crabmusket": "Future Googlers: I am sidestepping this issue by setting a property of the FeatureContext in @BeforeScenario @mytag and clearing it in @AfterScenario @mytag, and then in a 'global' @AfterStep handler I check for the flag. Ugly but works for a basic use case, including background steps.. ",
    "haringsrob": "This is enabled.\nIf, for example I add a breakpoint on index.php it stops. But somewhere deeper into the code it will not.\n. Hi @pamil,\n\"name\": \"behat/mink\",\n            \"version\": \"v1.7.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/minkphp/Mink.git\",\n                \"reference\": \"e6930b9c74693dff7f4e58577e1b1743399f3ff9\"\n            },\nfyi: This is the command I use to test:\nphp -dxdebug.remote_enable=1 -dxdebug.remote_mode=req -dxdebug.remote_port=9000 -dxdebug.remote_host=127.0.0.1 -dxdebug.var_display_max_data=9987 behat features/events.feature\n@spolischook as I said, it breaks in certain locations. But not deep into the code.\n. ",
    "alberto56": "@everzet thanks for the suggestion. I have tried the following (without success):\n- I have tried explicitly adding the autoloader schema (in various ways) to composer.json, but the file is still not found.\n- I have confirmed that ./vendor/autoload.php is in fact loaded (it is); same with ./vendor/composer/autoload_real.php\nI am now in the process of trying to figure out at which point these autoloader files fail to properly load the class Behat\\Behat\\ApplicationFactory, which is called in ./vendor/bin/behat (which is a symlink to ./vendor/behat/behat/bin/behat) and defined in ./vendor/behat/behat/src/Behat/Behat/ApplicationFactory.php.\nIf you want to reproduce the issue, you can copy the code from the issue description into a Dockerfile and run docker build .. Thanks for your help! If I find a solution I will document it here.\n. Thanks @everzet for finding that, much appreciated!\n. ",
    "gorghoa": "Hi,\nRegarding the approach we initially took in gorghoa/ScenarioStateBehatExtension, kindly promoted here by @sroze, i.e injecting directly a fragment of state through the method arguments, we immediately benefit from:\n1.  php type hinting\n2. less state dependency checking in step method\n3. quick failure\nSteps method can therefore be exclusively about what to test\nPS. I tried to wrote an article about that: https://medium.com/@gorghoa/testing-stateless-api-with-behat-7189c99383a3\n. @jakzal, I guess we could store a debug_backtrace when an item is placed in the bucket\n. I do agree about explicit. But I don\u2019t think using a classic var (static, class property, global, whatever) gives you much more knowledge about which part of code gave it its value.\nYou either looking for the code which set a value to a bucket or to a var. I reckon it\u2019s the same thing.\n. I do see you all agree. But I\u2019m not convinced how a method parameter can be less explicit than some code in the function\u2026\n. In ScenarioStateBehatExtension, we\u2019ve used annotations to be more explicit.\u00a0But I guess it will not be enough to you folks^^\n``` php\nuse Gorghoa\\ScenarioStateBehatExtension\\Annotation\\ScenarioStateArgument;\n/\n * @When bonobo gives this banana to :monkey\n \n * @ScenarioStateArgument(\"scenarioBanana\")\n * @ScenarioStateArgument(name=\"scenarioBonobo\", argument=\"bonobo\")\n \n * @param string $monkey\n * @param string $scenarioBanana\n * @param Bonobo $bonobo\n */\npublic function giveBananaToGorilla($monkey, $scenarioBanana, Bonobo $bonobo)\n{\n    // (note that PHPUnit is here only given as an example, feel free to use any asserter you want)\n    \\PHPUnit_Framework_Assert::assertEquals($monkey, 'gorilla');\n    \\PHPUnit_Framework_Assert::assertEquals($scenarioBanana, 'Yammy Banana');\n    \\PHPUnit_Framework_Assert::assertEquals($bonobo->getName(), 'Gerard');\n}\n```\nHere, arguments scenarioBanana and bonobo are injected from the scenario\u2019s state bucket.\n. ",
    "jon-acker": "I really like @sroze idea, I frequently come across this issue of having to refer to objects I've created in previous steps explicitly, and I'm annoyed by the verbosity. \nOther option, as @ciaranmcnulty mentions (which I often use too) is to have a new step definition e.g. \ngherkin\nWhen I add token \"123\" to this bucket\nand refer to the bucket using $this->bucket in the Context\nnevertheless\nI don't like this second approach for various reasons, e.g. you don't know if/when $this->bucket has been set up, it feels arbitrary and there's no convention for naming (which can potentially confuse other devs coming to the Context)\nI can't think immediately of any drawbacks to Sams \"bag\" solution, where a type-hinted parameter is search for in that bag if it doesn't has a Transformer, and I can't think of potential BC issues. Yes, you'll always be getting the same object and you can only have one, unless you rename it, but the situations in which you'd need more than one instance of Bucket are probably few - the idea is similar to PhpSpec reusing the same double declared previously having been matched by name.\nIMO its worth a try and it clearly addresses a pain-point many people experience.\n. Can it be written in a way that the object is not shared between contexts? \nMy main use-case (AFAICS) would be within a single context anyway.\n(I totally agree that if its shared between contexts it could open a nasty can of worms)\n. Given that aside from catting the file back to the console, there's not much point in having ansi colours in the file (I can't think of another use-case) - would it be better to have it never write ANSI colour codes when its outputting to a file?. Did you have some idea of what this output could look like? Something like what symfony's dumper does? or phpunit?. It seems to me that this is expected behaviour.\nIf I understand correctly this would require a  feature with at least two scenarios: the first contains a failure and the second has an undefined step.\nUsing the --rerun switch, only the scenario that failed is run, and if it gets fixed and now passes, the result is success (exit code 0), because that single scenario passes.. What's the benefit in separating examples into separate tables? Would the\nreporting show them as groups?\nOn 25 September 2017 at 11:50, Mohamed Cherif Bouchelaghem \nnotifications@github.com wrote:\n\nI want to use Scenario Outline with multiple example table but it runs the\nlast examples table only, here is an example\nFeature: testing scenarios with multiple examples section\n        Scenario Outline: outline\n          When a table step:            | first   | second   |            |  |  |\n    Examples: First set of examples          | first   | second  |          | 1       | 2       |\n\n    Examples: Second set of examples          | first   | second  |          | 3       | 4       |          | 5       | 6       |\n\nthis example is taken from cucumber issue cucumber/cucumber-js#217\nhttps://github.com/cucumber/cucumber-js/issues/217 where is had the\nsame issue and it was considered as a bug.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Behat/Behat/issues/1082, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA6ZgHCsa5HJ8ImeBstYCde4JuINDWp2ks5sl4WIgaJpZM4Piiqj\n.\n\n\n-- \n\nJon Acker\nTrainer\nINVIQA\nBusiness first\nT: +44 (0)203 1799 555\nM: +44 (0)796 334 6071\n*W: inviqa.com https://inviqa.com *\nDisclaimer:This email and any attachments may be confidential and are\nintended solely for the use of the addressee. Any views or opinions\nexpressed are those of the author and may not represent those of Inviqa. If\nyou are not the intended recipient of this email, you must neither take any\naction based upon its contents, nor copy or show it to anyone. Please\ncontact the sender if you believe you have received this email in error.\n. Even though \"Examples\" and \"Scenarios\" are terms that are often used in\ninterchangeably, Examples in Gherkin != Scenarios. Examples in Gherkin are\na data-table for a Scenario Outline.\nI'm not saying that there's no case for having multiple example tables per\nscenario, but in your case it sounds like you have two separate scenarios.\nOne in which the types exist, and one in which they don't.\nOn 25 September 2017 at 12:13, Mohamed Cherif Bouchelaghem \nnotifications@github.com wrote:\n\nI have multiple scenarios to check and the share contexts/actions the\nexamples above dosent demonstrate the benefit, for example I design a cms\nso I want to check when I define a new content types which dont exist\n(valid scenario) and the second examples to define content types which\nalready exists (invalid scenario), they can be in the same table (examples)\nbut I consider this multiple scenarios in one.\nExamples are Scenarios, right?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/Behat/Behat/issues/1082#issuecomment-331850069, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA6ZgCg18-IHg5yBOrFwCTpFcwvs_e2cks5sl4rTgaJpZM4Piiqj\n.\n\n\n-- \n\nJon Acker\nTrainer\nINVIQA\nBusiness first\nT: +44 (0)203 1799 555\nM: +44 (0)796 334 6071\n*W: inviqa.com https://inviqa.com *\nDisclaimer:This email and any attachments may be confidential and are\nintended solely for the use of the addressee. Any views or opinions\nexpressed are those of the author and may not represent those of Inviqa. If\nyou are not the intended recipient of this email, you must neither take any\naction based upon its contents, nor copy or show it to anyone. Please\ncontact the sender if you believe you have received this email in error.\n. See if this help https://github.com/ciaranmcnulty/behat-stepthroughextension\nIt allows to to execute one step at a time.. Hi @crocodile2u - Both Behat and PHPUnit are Test Frameworks, it does not make sense to integrate one into the other. In fact Behat is much more of a \"pure\" test framework as it merely orchestrates the extensions - which do all the work.\nIf you just want a test class that can parse gherkin - you can use the Gherkin extension by itself.. I'm not aware of any reason the turnip pattern matcher wouldn't use unicode - sounds like this deserves a PR \ud83d\udc4d . You can call other steps from within your context file, e.g.\n$this->iFillInTheUsername('name')\nwill call your existing step. If that step is in a different context file there's a way of accessing that as well.. ",
    "EmiiKhaos": "@andytson This PR means newer Behat releases after it got merged (and of course dev-master) are not installable with Symfony <2.7 anymore. Composer will only install the latest release before this PR.\n. @Taluu 2.7 and 2.8 are still both LTS versions. And you're right, there is no 3.x LTS version. And according to the version policy it's about dropping unsupported versions of 3rd party deps, and not dropping supported versions ;)\n. So you want to annoy all Symfony 2.7 users whom are using behat? :scream: \n. ",
    "AlexeyDemidov": "We have the same issue - after recent update behat stopped sending anything into default.xml.\n. @everzet  can you please clarify - do you mean that a change in a feature, a context or behat.yml can completely break logging output for some formatter? Can you suggest what kind of changes I should look for?\n. @everzet behat tests runs green in the same Jenkins environment. \nI have also tried checking out our project with the commit before the last 'composer update' and it produced jUnit output as expected so it is definitely not the environment. Only things changed are dependencies installed by composer and a lot of changes in behat context - developers reworked tests to use DbContext to insert DB records before running tests. I also pinned behat version to the commit which was working before but it still fails to produce jUnit output (normal -f pretty output is working as expected)\nOur current composer.json\n{\n    \"require\": {\n        \"behat/behat\": \"dev-master#149f8881a1df56496c37094f32d05b53e0cde37b\",\n        \"behat/mink-extension\": \"*\",\n        \"behat/mink-selenium2-driver\": \"*\",\n        \"behat/mink-goutte-driver\": \"*\",\n        \"fzaninotto/faker\": \"*\",\n        \"phpunit/phpunit\": \"*\",\n        \"edmondscommerce/behat-javascript-context\": \"dev-master\"\n    },\n    \"config\": {\n        \"bin-dir\": \"bin/\"\n    }\n}\n. @everzet Yes, both progress and pretty formatting are working in all cases.\n. @everzet I did additional testing and noticed that if run individual feature then jUnit output is generated as expected. I have tried both failing and successful features and they both did produce jUnit output.\n. @everzet it is really weird but after my last comment developers tried running full test suite and it produced jUnit output too.\nI have two explanation for this - either I missed to test full suite after tweaking composer.json dependencies  (there was no other changes to test suite since this issue was opened) or another explanation is that running individual features fixed something in DB which previously caused tests to fail and abort behat run in such way so behat failed to write default.xml at the end of run. I'm currently trying to tweak composer.json again but full test suite takes 2 hours to complete so it will take me some time to get something to report.\n. I was able to reproduce failure to output jUnit format logs - test suite run failed with following message:\n```\n  [WebDriver\\Exception\\ScriptTimeout]                                                                                    \n  timeout: Timed out receiving message from renderer: 10.000                                                             \n    (Session info: chrome=49.0.2623.112)                                                                                 \n    (Driver info: chromedriver=2.21.371461 (633e689b520b25f3e264a2ede6b74ccc23cb636a),platform=Linux 3.2.0-4-amd64 x86_64\n  ) (WARNING: The server did not provide any stacktrace information)                                                     \n  Command duration or timeout: 310.01 seconds                                                                            \n  Build info: version: '2.53.0', revision: '35ae25b', time: '2016-03-15 17:00:58'                                        \n  System info: host: 'ci.domain.com', ip: 'X.X.X.X', os.name: 'Linux', os.arch: 'amd64', os.version: '3.2.0-4-amd64'  , java.version: '1.7.0_111'                                                                                            \n  Session ID: 4f12ce8ce475736d0240aaaaf0fa9cab                                                                           \n  Driver info: org.openqa.selenium.chrome.ChromeDriver                                                                   \n  Capabilities [{platform=LINUX, acceptSslCerts=true, javascriptEnabled=true, browserName=chrome, chrome={userDataDir=/tmp/.com.google.Chrome.P6u8KS, chromedriverVersion=2.21.371461 (633e689b520b25f3e264a2ede6b74ccc23cb636a)}, rotatable=false, locationContextEnabled=true, mobileEmulationEnabled=false, version=49.0.2623.112, takesHeapSnapshot=true, cssSelectorsEnabled=true, databaseEnabled=false, handlesAlerts=true, browserConnectionEnabled=false, webStorageEnabled=true, nativeEvents=true, hasTouchScreen=false, applicationCacheEnabled=false, takesScreenshot=true}]                              \nbehat [-s|--suite SUITE] [-f|--format FORMAT] [-o|--out OUT] [--format-settings FORMAT-SETTINGS] [--init] [--lang LANG] [--name NAME] [--tags TAGS] [--role ROLE] [--story-syntax] [-d|--definitions DEFINITIONS] [--snippets-for [SNIPPETS-FOR]] [--snippets-type SNIPPETS-TYPE] [--append-snippets] [--no-snippets] [--strict] [--order ORDER] [--rerun] [--stop-on-failure] [--dry-run] [--] []\n```\n. @everzet Actually we have PHP 5.5.38 and not 5.3 or 5.4.\n. @everzet could you give a hint how I can approach it? I can read and tweak PHP code but I'm not a PHP developer. \n. ",
    "fefas": "It was not a joke .. I'm sorry if it seems .. I thought it would make sense on test context .. Runscope uses Everything is going to be 200.\nI hope I can do more useful contribution in future.\nThank you\n. ",
    "bizmate": "definitely my problem, i need to move that under a formatters entry/config\nlaravel:\n  formatters:\n    html:\n      output_path: /tmp/behatReportLaravel\n  suites:\n    laravel:\n      contexts:\n        - FeatureContext\n        - LanguageContext\n      filters:\n        tags: \"@int\"\n. ",
    "tkotosz": "Oh good to know about this. Probably the controllers sort order in behat changed for me because of the same usort change in php. see\n. ",
    "karankural": "Hey!!\nI am using window 8. and having \nbehat - 3.2.1 version.\nmink - 1.5.0\nmink-extension - 2.0.1\ndrupal-extension - 3.0\nmink-goutte driver - 1.0\nPHPUnit - 3.7.37\nSO here us my feature file -\nFeature: Some terse yet descriptive text of what is desired\n    In order to realize a named business value\n    As an explicit system actor\n    I want to gain some beneficial outcome which furthers the goal\n@blackbox @1\n    Scenario: User Visits at some site for the first time.\n        Given I am on \"/\"\n        And I should see \"site's title\"\nDo i need to tell anytihng?\n. I added the information.\nOn Sun, Oct 30, 2016 at 4:39 PM, Konstantin Kudryashov \nnotifications@github.com wrote:\n\nI hope you understand that just a single screenshot without much context\nor background into your suite setup makes it impossible to help you.\nPlease collect more context about your environment and open a new issue\nconforming to our very simple contribution guide\nhttps://github.com/Behat/Behat/blob/master/CONTRIBUTING.md#submitting-an-issue.\nThen we will be able to help you.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Behat/Behat/issues/962#issuecomment-257144889, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ARWCj6XsSiCvWikWgyLZj6EviXm4c48Fks5q5HragaJpZM4KjGel\n.\n\n\nRegards,\nKaran Kural\nContact : +91 9999 812 027\nSkype : karan.kural | Twitter : karan_kural\n. ",
    "tumingke0": "sorry, i can not understand your mean . ok, in your country, it is too late, why hwve not you sleep. ",
    "funivan": "\nWant to store features near the context. \nBig amount of features (80) Store methods in several contexts become confusing.\nEasy to specify destination of the snippets (on the automatic snippet generation). @stof Thanks. Using Extention and Controller I can add custom suites to the configuration.  Each suite contains feature and contexts . \n",
    "WillGibson": "Hi @everzet,\nI just started to prepare for this and figured a good first step would be to check all the Behat tests pass before I do anything so I know for sure if I broke stuff :-)\nMostly they do but I'm getting some fails like on...\nLANG=C bin/behat features/extensions.feature:127\n...which is failing because of some extra output at my end not being what the test is expecting...\n```\nFailed asserting that 'FF\n  --- Failed steps:\n\n  001 Scenario:                  # features/extensions.feature:2\n        Given non-existent class # features/extensions.feature:3\n          Fatal error: Class 'Non\\Existent\\Cls' not found (Behat\\Testwork\\Call\\Exception\\FatalThrowableError)\n\n  002 Scenario:                   # features/extensions.feature:4\n        Given non-existent method # features/extensions.feature:5\n          Fatal error: Call to undefined method FeatureContext::getName() (Behat\\Testwork\\Call\\Exception\\FatalThrowableError)\n\n  2 scenarios (2 failed)\n  2 steps (2 failed)\n  /private/var/folders/k1/n7wy5pjj069dvry_2tspxcxh0000gq/T/behat/3a3a1475b52d2e7f1f1542f8518417c5/custom_extension.php:12:\n  string(16) \"Non\\Existent\\Cls\"\n  /private/var/folders/k1/n7wy5pjj069dvry_2tspxcxh0000gq/T/behat/3a3a1475b52d2e7f1f1542f8518417c5/custom_extension.php:17:\n  array(2) {\n    [0] =>\n    string(14) \"FeatureContext\"\n    [1] =>\n    string(7) \"getName\"\n  }' contains \"FF\n\n  --- Failed steps:\n\n  001 Scenario:                  # features/extensions.feature:2\n        Given non-existent class # features/extensions.feature:3\n          Fatal error: Class 'Non\\Existent\\Cls' not found (Behat\\Testwork\\Call\\Exception\\FatalThrowableError)\n\n  002 Scenario:                   # features/extensions.feature:4\n        Given non-existent method # features/extensions.feature:5\n          Fatal error: Call to undefined method FeatureContext::getName() (Behat\\Testwork\\Call\\Exception\\FatalThrowableError)\n\n  2 scenarios (2 failed)\n  2 steps (2 failed)\n  string(16) \"Non\\Existent\\Cls\"\n  array(2) {\n    [0]=>\n    string(14) \"FeatureContext\"\n    [1]=>\n    string(7) \"getName\"\n  }\".\n\n```\nI think it's just the two lines starting with /private/var/folders/.\nI'm sure that in some way this is my fault, but wondered if you have come across it before and could shed any light?\nCurrently running PHP 7.1.0 on macOS 10.12.2 if that makes any odds.. FYI I've had a go at writing a scenario which will fail until such a time as I have made the required changes to make it pass, without breaking any of the other tests of course.\nhttps://github.com/Behat/Behat/compare/master...BiffBangPow:feature/976-apostrophes-vs-capitals-in-snippets. Thanks @stof, that solves that one. \nI have one test still failing depending on which PHP version I run them in...\nRunning...\nLANG=C bin/behat features/junit_format.feature:530\nPHP 5.6 - Passes\nPHP 7.0.9 & 7.1.0 - Fails with...\nThen it should fail with:\n      \"\"\"\n      Call to undefined method PHPUnit_Framework_Assert::assertEqual\n      \"\"\"\n      Failed asserting that '' contains \"Call to undefined method PHPUnit_Framework_Assert::assertEqual\".\nSomething changed with PHP 7+ that the tests don't yet cater for?\nOr something in my config?\nI don't know, but I need to get home for now.. Hi @everzet,\nJust thinking out loud now, but with the way some of Behat's own tests are checking output which may depend on someone's local configuration, I'm wondering if it would be worth considering including a docker configuration so that folks like me can fire it up in an environment where we know all the tests will pass?. Never mind, a colleague suggested that I ignore the local fails and just let Travis take care of the \"Did I break anything\". Which will do the trick.. Hi @everzet, We have a spike day today, so I thought I'd get onto this. Then I realised I have no idea how to test any changes I make to the snippet generating code locally, bin/behat features/snippets.feature runs the existing compiled code of course.\nI'm still trying to figure it out, but how do I run the feature through the code I'm playing with?. Actually, scratch that, I'm being thick and obviously not finding the right bit to change, hence changes having no effect. I'll get there :-). OK, there's a couple of pull requests that go together to address this.\nI'm not sure if they break backwards compatibility in a way that might upset anyone?. @Taluu I think there would need to be a PR here because I added a scenario into features/snippets.feature because it is already testing the area of snippet generation in here, so it seemed write to test the new behaviour in the same way.. What do you think here @stof? Do you want these tests here? Or do you agree with @Taluu?. I get that, but I just want them to come out in terminal without me being offered choices of having to hit enter.. @everzet That doesn't actually provide the behaviour I would prefer, which is simply that I would like the snippets to come out in the CLI without needing to hit enter, like it used to do in the old days by default.\nThis is because we organise our contexts in a way that means that generally when it outputs a load of generated steps, we often want to distribute them around a few contexts, so it's easier just to copy and paste.\nI might look at submitting a PR for this if I get some quiet time.. @everzet I'm not sure we're talking about the same thing, let me see if I can  explain better with an example.\nI know it's not really a big deal, but I would like to be able to tell Behat to just spit the generated snippets out in the CLI, like it does when you hit enter. E.g.\n```\nbehat src/something.feature --snippets-for=cli\nFeature: Something\nScenario: Do a thing\n    Given I have done one thing\n    When I do a second thing\n    Then I should see a third thing\n1 scenario (1 undefined)\n3 steps (3 undefined)\n0m2.00s (17.74Mb)\n\n\ndefault suite has undefined steps. Define them with these snippets:\n\n\n/**\n * @Given I have done one thing\n */\npublic function iHaveDoneOneThing()\n{\n    throw new PendingException();\n}\n\n/**\n * @When I do a second thing\n */\npublic function iDoASecondThing()\n{\n    throw new PendingException();\n}\n\n/**\n * @Then I should see a third thing\n */\npublic function iShouldSeeAThirdThing()\n{\n    throw new PendingException();\n}\n\n```. Ah, yes, it wasn't a PR before. I'll remove that.. This will need sorting out before merging.. Yup, give me a few minutes.... @everzet That's done now, and I squashed it all into a single commit. Just waiting on the build.. ",
    "bwowk": "hey @jonathanjfshaw, you should open this at Behat/MinkExtension\nLet's get that discussion going over there (:. Maybe Behat\\Testwork\\Call\\Filter\\ResultFilter(s) are the way to go about this, but currently the default Node Listeners get some of the output data from the original DefinitionCall, not from the CallResult (and even before Argument Transformations are applied).\nWouldn't it make more sense if they got everything from the CallResult so that it's possible to separately transform the result arguments?\nWith this approach, we could create ResultArgumentTransformers to preprocess arguments before sending them over to be formatted and outputed. I've wrote a extension to allow the usage of placeholders on step arguments that can be replaced by different values based on a --environment CLI option and on specific @tags that appear on the scenarios. \nFor example, if I have the step:\nThen I go to \"${home}\"\nAnd a yml file with mappings of that placeholder values for each environment:\nhome:\n    pretty_name: the homepage\n    $dev: dev.mysite.com\n    $prod: www.mysite.com\nI can run behat with --environment=dev to run it using the dev url, and with --environment=prod to use the prod one. The thing is, I wanna have that pretty_name value that will replace the placeholders on the output of every formatter, so in both cases it would read: Then I go to\" the homepage\", to make some PO-friendly reports. @everzet Would it make sense to have an TRANSFORMATION_TAG extension point on OutputExtension and an OutputTransformation interface akin to the SimpleArgumentTransformation to go with it?\nsomething like\n```php\ninterface OutputTransformation {\npublic function supportsEventAndName(Event $event, $name);\n\npublic function transformEvent(Event $event, $name);\n\n}\n```\nThis way, we could make it so the NodeEventListeningFormatter gets an array of OutputTransformations and applies all of them to the incoming events.\nIf you think this makes sense I can invest myself in a PR.\n. I tried the format above, and also the SYMFONY__VARIABLE__NAME env var, that should map into %variable.name%, but both don't work. At least not in the mink session parameters.\nI guess those are used in the Mink Extension's Context Initializer, so that should be late enough for them to be resolved, shouldn't it?. have a look at Behat/Behat#1048. I think Behat core has everything needed for this to work. The tag filtering works on a ScenarioInterface, and ExampleNode implements it, so if an ExampleNode could get additional tags this should work out of the box.\nNowadays the ExampleNodes have tags, which are inherited from the OutlineNode.\nThe changes would need to be made on https://github.com/Behat/Gherkin\nThere's already an open issue on Behat/Gherkin#117, so let's have this discussion over there. Behat/Gherkin#119 adds support for this syntax:\n```Gherkin\n@example_outline\n  Scenario Outline: I want an example outline\n    ...\n    @case1\n    Examples:\n      | garga|marga |\n      |hodi | brodi |\n@case2\nExamples:\n  | garga|marga |\n  |mura |    ura|\n\n``\nWhich is already supported on Cucumber. Well, I can't see how theScenario Outline: Login with .` would have it's token replaced. From which Example line would it get its replacement?\nFor the pretty formatter the ExampleNode titles are not even printed, only the OutlineNode title.\nOn the other hand, I believe it makes sense in case any other formatter uses the ExampleNode title.\nAnyway, this would be done on the Gherkin package (https://github.com/Behat/Gherkin/blob/master/src/Behat/Gherkin/Node/OutlineNode.php#L207), not on Behat core.\nYou should close this issue and open another one on https://github.com/Behat/Gherkin\n. For the pretty formatter the ExampleNode titles are not even printed, only the OutlineNode title.\nCorrection: ExampleNode titles are printed, and they're the corresponding line on the examples table. Hey @achandna.\nThat issue is related to the Mink Selenium Driver, I'm guessing. You should close this one and open another on https://github.com/minkphp/MinkSelenium2Driver instead :). For anyone interested, I made an extension that does just that:\nBehat Overlook Extension. I can't really picture why you would need a condition like that :astonished:\nAnyway, you can check for that condition on a @BeforeFeature hook, and throw an exception in case it's not fulfilled. Then all the scenarios will be skipped:\nphp\n/**\n * @BeforeFeature @skip_if_foo\n */\npublic static function assertNotFoo() {\n    if (foo) {\n        throw new Exception(\"Foo!\");\n    }\n}\nThe @skip_if_foo tag is optional, if you want to run that check only on the Features tagged like that.. Do the same as above on a @BeforeScenario, but checking for a static foo var on your context, then create a @AfterStep hook that uses an AfterStepScope to check if the step is the one you wanna check and if it failed, and sets foo if it did.\nAnd please explain your use case better when opening an issue. . There's already a --snippets-for option. You just need to pass it the Feature you want snippets generated for as an argument like so: behat --snippets-for FeatureContext. There's the imports key on behat.yml as you can find here (For some reason there's no mention of it on the latest docs, but it still works). That way you can import extra configs on your alternate environment, and those will be merged (looks like suites section is purposefully overwritten instead of merged)\nAnother option would be to have different profiles, overriding just the parts you need. Is #1049 what you mean?. @alice-0-kim the issue is that your variable ${TARGET_URL} is inside single quotes (the outermost, starting on BEHAT_PARAMS='), so it will never be expanded.\nTry it like this, it should work:\nbash\nTARGET_URL='https://example.domain.ca/'\nexport BEHAT_PARAMS=\"{\\\"extensions\\\" : {\\\"Behat\\\\MinkExtension\\\" : {\\\"base_url\\\" : \\\"${TARGET_URL}\\\"}}}\". @p2635 The repo for the docs is https://github.com/Behat/docs\nThere's already an issue for this over there: https://github.com/Behat/docs/issues/120\nCan you close this one, please?. ",
    "jonathanjfshaw": "Good point. I've opened https://github.com/Behat/MinkExtension/issues/265.. I just created a library that does this: jonathanjfshaw/phpunitbehat.\nRepo: https://github.com/jonathanjfshaw/phpunitbehat\nI wrote a blog post explaining it: https://medium.com/@jonathanjfshaw/write-better-tests-by-using-behat-with-phpunit\nWhat I like about integrating Behat and PHPUnit is that you can define your feature in the same file as the step definitions it needs. This makes it easy to write good tests that explain themselves well.. ",
    "aledeg": "Actually, I would prefer to have the choice. Right now, I am outputting my tests results in a file then I display those results in the console. I have no other mean to read its content since I am running those tests on Travis CI.\nYou could argue that I could output directly the results on Travis CI, but as I am running parallel tests in docker containers, it's not possible (or I don't know how to do that).. Thanks guys. I'll have a look and try to make my own.. ",
    "alexfinnarn": "I'd vote for this feature to be moved back in. Why should a specific framework limit the use of environmental variables in Behat for all of the PHP projects, framework users or not? Since Symfony 4 has now been out for awhile, is the \"Symfony2Extension\" necessary to support?\nI would say no and also add that putting this back in the codebase is more in line with the 80/20 rule. I don't know any history of that extension and how it relates to the main Behat project so I'm only talking about this from my newcomer perspective.. ",
    "cravecode": "Thanks for the quick response and confirmation! \nI want to say it is something in how the configuration is defined to Symfony in the configure function of the SuiteExtension.php file.\nBut looking at the way the tree is built, it's pretty intimidating:\nphp\n        $builder\n            ->defaultValue(array('default' => array(\n                'enabled'    => true,\n                'type'       => null,\n                'settings'   => array()\n            )))\n            ->treatNullLike(array())\n            ->treatFalseLike(array())\n            ->useAttributeAsKey('name')\n            ->normalizeKeys(false)\n            ->prototype('array')\n                ->beforeNormalization()\n                    ->ifTrue(function ($suite) {\n                        return is_array($suite) && count($suite);\n                    })\n                    ->then(function ($suite) {\n                        $suite['settings'] = isset($suite['settings'])\n                            ? $suite['settings']\n                            : array();\n                        foreach ($suite as $key => $val) {\n                            $suiteKeys = array('enabled', 'type', 'settings');\n                            if (!in_array($key, $suiteKeys)) {\n                                $suite['settings'][$key] = $val;\n                                unset($suite[$key]);\n                            }\n                        }\n                        return $suite;\n                    })\n                ->end()\n                ->normalizeKeys(false)\n                ->addDefaultsIfNotSet()\n                ->treatTrueLike(array('enabled' => true))\n                ->treatNullLike(array('enabled' => true))\n                ->treatFalseLike(array('enabled' => false))\n                ->children()\n                    ->booleanNode('enabled')\n                        ->info('Enables/disables suite')\n                        ->defaultTrue()\n                    ->end()\n                    ->scalarNode('type')\n                        ->info('Specifies suite type')\n                        ->defaultValue(null)\n                    ->end()\n                    ->arrayNode('settings')\n                        ->info('Specifies suite extra settings')\n                        ->defaultValue(array())\n                        ->useAttributeAsKey('name')\n                        ->prototype('variable')->end()\n                    ->end()\n                ->end()\n            ->end()\n        ;. I'm having a hard time thinking of a clean fix. Everything I've looked into results in special Context specific logic embedded in the SuiteExtension file. This seems nasty. \nMaybe holding off until Behat can use Symfony 3.2+ would be the best option. Then we could use environment variables inside YML files.\nSee: http://symfony.com/doc/current/configuration/external_parameters.html\n\nNew in version 3.2: env() parameters were introduced in Symfony 3.2.. \n",
    "pufferfishareliars": "I would love to see this feature implemented as well, as it would give greater flexibility writing up a more comprehensive set of examples and then running a sub-set of them if desired rather than creating separate duplicate scenarios.. ",
    "jeichorn": "In my case, my transform implements a simple template language, so I just need to echo the output.\nSo if it worked like an action, and you could just send things to stdout and they would show up it would work for me.\nIf it was enabled by some sort of debug flag, then some sort of dumper would make sense.\n. ",
    "MisterGlass": "I just ran an upgrade and am now running into the deprecation error every time I run tests. Is there any update/timeline on this?. ",
    "jeremyb": "Hi, I have the same issue than @MisterGlass. I'm not able to run Behat tests anymore, I always get this error:\nSCREAM:  Error suppression ignored for\nDeprecated: The Symfony\\Component\\ClassLoader\\ClassLoader class is deprecated since version 3.3 and will be removed in 4.0. Use Composer instead. in /var/www/app/vendor/symfony/symfony/src/Symfony/Component/ClassLoader/ClassLoader.php on line 14\nIs there a way to remove this old autoloader extension? Because Composer handles classes autoloading.. ",
    "lucasff": "This is driving me nuts for the last 4 hours.\nI have a problem after all tests run fine, the QuestionHelper of Symfony throws an \"Undefined index: <nameOfMyContext>\".\nSomeone have any idea?. ",
    "franzose": "@docteurklein I got in the same trouble yesterday and made another (simpler) solution. I think it's worth using until Behat gets rid of the Symfony's ClassLoader completely.. ",
    "yuloh": "@everzet I rebased on master and made WrongPathsException backwards compatible.\nIt sounds like there isn't a good way to prevent breaking BC.  I'm personally ok with waiting until 4.0, even if it takes a few years :)\n. ",
    "slavcodev": "Thanks for review, I've updated PR.. Sure, shall I mentioned that *.yml is considered deprecated?. You're right it is common, AFAIK usage of *.yml is historical mistake :)\nDoes it make sense to support both? I mean in the next major releases?\nI think in this case keeping both extensions add complexity, not a useful feature. . The glob pattern take a care about order, there is order of files\n~~~\nbehat.yaml\nbehat.yml\nbehat.yaml.dist\nbehat.yml.dist\nconfig/behat.yaml\nconfig/behat.yml\nconfig/behat.yaml.dist\nconfig/behat.yml.dist\n~~~. ",
    "edno": "@walterdolce, it's available in the command line help: http://behat.org/en/v2.5/guides/6.cli.html. ",
    "debo": "@walterdolce I am not sure if I get the problem fully but to me it sounds that the following is the solution you are looking for:\nhttps://gist.github.com/stof/930e968829cd66751a3a\nhttps://github.com/Behat/docs/pull/65\nI hope it helps.. ",
    "sakonachhoeurng": "Thanks for your suggestion @jakzal and @spolischook, Before asking that I try to use this one https://packagist.org/packages/tonicforhealth/behat-parallel-scenario I seem not understand, it works as run one scenario then open the browser then finish, and then it run other scenario. Do you think it work as parallels? \nFor @jakzal  I will try out your suggestion.\nI use OS Ubuntu 14.04 for my current working. @jakzal yes, sure for this. I can try other way, thanks for anyway suggestion.. ",
    "gmce93": "Using the Symfony2Extension, the easiest way would be to name the parameters you're passing to the Context.\nThe issue in this case would be an easy* fix, by checking which one has a more direct relationship to each argument (for example, using get_class to check if FakeApi is equal, where Api would fail, or by climbing the inheritance chain to find which service is the closest relative).\n* I say easy, because it then becomes tricky when you have two arguments which ask for the same interface -- implemented by two different classes -- to be injected. How on earth do you know which you want in that scenario? It is also tricky when you have two arguments which request different interfaces, and each service candidate satisfies both interfaces.\nI've had a toy around with this and in this case where you're asking for FakeApi which is a child of Api, it can be solved by adding a new method to MixedArgumentOrganiser like prepareTypehintedArguments similar to the other methods, and then iterating each argument and matching the best fitting candidate. I'll make a PR as a POC shortly as I've walked in to the same issue as this\u2026. @everzet @elvetemedve delay in making the PR due extenuating circumstances, but I have created it here: behat/behat#1028\nThat should resolve the issue for your case, at least. Before it is merged, it will need unit tests adding in, but I had no luck in getting them successfully on a fresh copy of master, so I have left it as it is as a POC, just in case it does not get merged / approved.. The  Scrutinizer rating is now stuck at B. It would be silly to even \"simplify\" this method, as there is already quite a superfluous chain of simple methods.. @elvetemedve I agree, implementing the visitor pattern would be an unnecessary way of doing it, but I still feel like the refactoring I have done now is a bit excessive.\nI don't know what Scrutinizer's rating algorithm is, but total lines of 26 in a low complexity method shouldn't mark it down to a B imo. I just had a quick test, and it didn't make a difference. I think removing the inner loop did the trick as that removes paths / complexity. Overkill imo, but if that makes the builds pass...\nAnyway, Scrutinizer is now happy, Behat tests are written, I think this is ready :). I noticed this as Scrutinizer was complaining about the repetition, but I don't know which pattern would be good to eliminate this repetitiveness without adding in a lot of superfluous code (visitor pattern or something).. Ah, it was a new method that I added in, automatically went as public. I had forgotten to check the visibility of other methods. I have updated this one.. I've refactored it to remove repetition, but now Scrutinizer thinks the method is rated D, and after quite a bit more, it is now B.. ",
    "kgogolek": "+1 having the same issue. more documentation around formatters would be much appreciated.. ",
    "bla-kw": "Thank you very much. It works!. ",
    "forceedge01": "@spolischook Thanks for replying. Not sure if suite configuration has anything to do with autoloading context classes. Anyway googled what you said and got here http://behat.org/en/latest/user_guide/configuration/suites.html, don't see how this solves my problem. Maybe i've misunderstood something?\nTo keep this discussion short and sweet, I would really appreciate an example of the suggested implementation please.\nThanks.. Thanks @spolischook for the examples really helpful, much appreciated. So to be to autoload context files properly one solution would be to create an extension which then autoloads relevant context files in. I was trying this in a Context file rather than an extension but I guess the execution path of Behat 3 does not support that fully. It makes sense to be honest to not trigger the BeforeSuite hook if the suite is not going to run.\nSounds good I will try creating a miniature extension based on the implementation you've provided. Thanks very much for your help :). ",
    "vincenzodibiaggio": "Sorry, \nI've opened this issue in the proper project page (https://github.com/instaclick/php-webdriver/issues/75). ",
    "mi-haque": "Moved to  MinkExtension.. ",
    "ewbarnard": "For searchers who find this issue late to the party: I get this error message when I accidentally use single hyphen rather than double hyphen (e.g., -snippets-for rather than the correct --snippets-for) in the runner options. Once I fixed the argument syntax all proceeded correctly; the error message disappeared.. ",
    "paullla": "Yes, I'm using symfony extension.. ",
    "rask": "I'll need to read up on the events and listeners.\nI decided to go with a timeout of a few seconds to fire the ChromeDriver kill command. Works for now but I'm worried it might break from time to time.. ",
    "NoResponseMate": "Have You tried quoting the tags? etc --tags=\"~wip&&~manual\". ",
    "mjaeggi": "Yes, I already tried that way with the same result. ",
    "unekhriukova": "As a step implementation this feature is already exist. So just for title customizing.. ",
    "wout": "Sentinel takes care of maintaining the login session.\nAside from the regular context setup nothing special going on there. I just build up a request url using a series of steps, one step to log in the user with the correct credentials and one step to test the status of the login session.\nFurthermore, I am not using any specific extensions.. I included more info on the Stackoverflow issue:\nhttp://stackoverflow.com/questions/43479251/testing-login-session-with-behat. ",
    "alexdesignworks": "Ok, so I've made this https://github.com/integratedexperts/behat-format-progress-fail\nwith an output like this:\n..\n      --- FAIL ---\n      --- (features/apples.feature):6\n      Background:\n            Then I should have 3 apples\n      ......U.......\n      --- FAIL ---\n      --- (features/apples.feature):6. @ciaranmcnulty \nDo you know which coding standard is used for Behat project?. \"behat/behat\": \"3.5.0\",\n \"behat/mink-extension\": \"2.3.1\"\nand make sure that you clear Gherkin cache. @aledeg check this out https://github.com/integratedexperts/behat-format-progress-fail. @scoolen AFAIK, the idea is that you supposed to handle :value as optional and handle default value in your function's argument (which you already doing). To make :value optional, the strep definition should be written as regex.. ",
    "beeblebrox3": "I did an experiment and that's the result:\n\n. Thanks, @spolischook :)\n@stof I didn't find any way to do that. It doesn't have a good support for PHP out of the box, is necessary another extension to get the symbols recognized and I can't communicate with it. \nI also thought about trying to create an extension for behat to help me with this, if it's not possible to add this to the definitions list.. I made a small change to get this feature working on this commit. \nCan I make a PR?\nThanks!. Ops! Sorry for the delay.\nDidn't know that behat had verbose mode lol\nI'll take a look and make the PR. Thanks @stof and @everzet . Guys, any thoughts on this?. Thanks @everzet \nThis will help us a lot!. ",
    "elvetemedve": "@glennmcewan I think the refactoring you made is good enough. Applying a complex design pattern like the visitor would make it over-engineered in my opinion.\nThe class is rated to B, because one of the method is B, particularly applyPredicateToTypehintedArguments(). If you take a look at the report, you can see that Total Lines is a bit high. Try to remove all the empty lines and see if Scrutinizer likes it.. @glennmcewan I agree that number of lines should be okay as well as a nested foreach. Scrutinizer is too strict in this case. But it's not my call to decide. :)\n. Why did you make this method public? I think it should remain private.. This foreach block looks duplicated to me, the only difference is the if ($reflectionClass->getName() === get_class($candidate)) statement. It would be nice if you could eliminate this repetition.. ",
    "albus-optimus": "Hello! I very easily solved my problem with Codeception. It has 146% support of behat scenarios and provides many useful tools.. ",
    "sergioatzori": "OK thank you.\nI found no issue outside Symfony environment and I'm experiencing this only running behat tests.\nShould I post an issue on Symfony's github?\n. ",
    "j1v3": "Are you sure you don't have a typo on the name of \"Bootstrap\" directory ?\nIn my case solved this issue symply by replacing a capital letter with the name of my file... \nNow my directories structure is like this:\n-> features\n--> context\n---> Authorization \nmy autoload like this  \n\n\"autoload\": { \n--\"psr-4\": {\n---\"\": \"src/\",\n---\"AppBundle\\Tests\\Behat\\Context\\\": \"features/context/\"\n--}\n-}\n\nfor running my class like this on behat.yml:\n- AppBundle\\Tests\\Behat\\Context\\Authorization\\IntegrationLoginContext: []\nI don't know if this is the best solution ... but it works for me!. ",
    "davebirch": "Never mind, I've found and used __DIR__ :). Thanks, for some reason my IDE wasn't showing me that method - shall have a proper dig around the class structure and find out why.\nSeems the method expects the same as behat.yml but without the leading forwardslash, in case anyone else is having the same issue.. ",
    "Pryrios": "Thank you, I will try that, seems a cleaner approach.. ",
    "deviantintegral": "That works, but only if I move features up to the root of my project. This is for a Drupal module, where the tests are owned by the module (as there isn't a \"site\" to test against).\nIs there any reason why Behat couldn't convert the relative paths to absolute paths when referencing them internally?. Looks like this isn't working for the case where features are in a subdirectory:\nWorks:\n$ ../../vendor/bin/behat -c tests/src/Behat/behat.local.yml tests/src/Behat/features\nand this one:\n$ ../../vendor/bin/behat -c tests/src/Behat/behat.local.yml tests/src/Behat/features/media-settings.feature\nbut not with a single scenario (even though the prior command confirmed the line number):\n```\n$ ../../vendor/bin/behat -c tests/src/Behat/behat.local.yml tests/src/Behat/features/media-settings.feature:33\n[Behat\\Testwork\\Tester\\Exception\\WrongPathsException]\n  No specifications found at path(s) tests/src/Behat/features/media-settings.feature:33.\n``. Unfortunately, I get the same exception with this patch even when I use paths relative to the feature file, likefeatures/media-settings.feature`.\nThis particular example is in private code, but I think we'll be working on behat tests for the Facebook Instant Articles module this week.. ",
    "glennmcewan": "This is a bug which I have found to be caused by the GherkinExtension class; it does not give the basePath to each of its loaders, so the loaders are not aware of what the base path is.\nThis works when you're already in the root, because is_file will return true (because the relative path is equal to the absolute path, so it doesn't need to go down the route of looking in the base path).\nSo, I've created a PR here which resolves this, feel free to give it a try and let me know how that works.. Turns out that in my previous comment, the solution was completely wrong. It did fix the case, when running Behat in this scenario, but it broke the unit tests spectacularly (due to the way the Behat self tests work, writing feature files to a temporary folder, outside of the base path).\nThe solution instead is to \"sanitise\" the given path in the FilesystemFeatureLocator, so that it strips out the line ranges from the path before searching for the file in the filesystem.\nI've updated my original PR, builds now passing (except one code style recommendation). If you check out that branch into your project, it should resolve your issue @deviantintegral.. I have updated my Symfony to 3.3, seems to work...\nYour Behat version has also updated from 3.3.0 to 3.3.1 which includes a change to the way dependency injection works for typehinted parameters (although you're using named parameters which should not have affected it, but there is a chance).\nTry reverting Behat back to 3.3.0 and see if that resolves it.\nAlso, it could be that your behat.yml does not have a parent default key. Is it a typo, or do you really mean to have indefault as the parent key?\nhttps://gist.github.com/Stoakes/8478f1ceee891777d1899d8a8965a39f#file-behat-yml-L1. @deviantintegral I'm going to close this; I have had a similar issue when running tests for Drupal modules and the fix for it seems to be different to your case.\nI'm unable to replicate your scenario, but if you make a public repo replicating the issue, I can take a look.\nProviding that the path to the feature is relative to the config file, this should work nicely.. @generalconsensus you may want to look at PR #1046 (and look through the individual commits, to see my approach and how it changed as I learnt more); I tried resolving this previously, and yes I tried the base path but this causes the Behat self-tests to fail, because of the way they search for features.\nThere are a multitude of ways to resolve this -- one of which is quite sizeable, and potentially a BC break; it will require having a %paths.features% parameter, so that you can change the feature path, but leave the base path alone. I feel that is a good feature to add, as the features path doesn't need to be in the root.\n@stof see commit here: https://github.com/Behat/Behat/pull/1046/commits/fb06d564c18ee3bc1723fe0935bd8406b7c16ee0\nThat's how I set the base path on to Gherkin, which is a bit more correct, but it ultimately runs in to the same issue.\nThis will need some more thought / investigation, unless I am wildly over-complicating this.\n@everzet this typically happens when you run behat on a specific line, when you are not in the base path. Unsure how to write a test case for this...the Behat self-tests break when changing the Gherkin base path (which should be the feature path). Perhaps the logic in https://github.com/Behat/Behat/blob/master/features/bootstrap/FeatureContext.php needs reviewing...I had a look but was unsure about it.. I would recommend setting Gherkin's base path when it is registered in to the container via the Extension. Feels a bit more 'expected' that way, imo. Below is a commit where I have done it, on a closed PR which was not merged:\nhttps://github.com/Behat/Behat/commit/fb06d564c18ee3bc1723fe0935bd8406b7c16ee0\nAlso left a review on your latest commits; that's why your builds are failing. Try run the PHPUnit tests locally if possible; saves Travis having to run them etc.. @generalconsensus no worries, I have ran in to the same problem previously, which is why I have the examples to hand :)\nI think that setting the base path is the correct way to resolve it, however this causes a failure with Behat's self tests. I couldn't quite figure it out, but it is down to the way the FeatureContext sets the feature path (random temporary location, for each scenario). I have a feeling that the Extension is not receiving the new base path each time, but was unable to prove that.. Narrowed it down a little; need to amend the logic in Behat\\Gherkin\\Node\\FeatureNode, because Behat\\Gherkin\\Filter\\PathsFilter is given an array of paths, which the FeatureNode's file path should reside within (filters out any given features where the FeatureNode@getFile method does not equal the start of any string paths that it is given to filter against). Behat\\Gherkin\\Filter\\PathsFilterTest specifically tests that it will not match for partial paths, so that tells me FeatureNode should always be given an absolute path for the file property.\nTo do this, I think the solution is to update the way the Gherkin Loaders create the FeatureNodes in the @load method so that they are given an absolute path, rather than a filename (which is somewhat inaccurate, as if the base path is not set, the 'filename' will be features/xyz.feature (not a filename, that's a relative path).\nI'll have a look at options with this, would be handy to get some feedback from @everzet / @stof to make sure this is not taking the wrong approach.. No worries; it's an issue I have ran in to before, dropped it as it seemed to take an unnecessary amount of effort. A fresh look over it revealed a few new ideas.. Got it working locally, PR raised #1056. Failing CI as it cannot pull in my fork of Gherkin (which has another change, and a PR raised).\nMay need review as to whether or not the change is correct in the Gherkin repo.. @stof I'm not sure if this PR is relevant now that #1056 has been merged in, which was my attempt at resolving the same issue.\n@generalconsensus did #1056 fix your case too?. @everzet I noticed, thanks for merging. I've rebased this PR from upstream/master.. There aren't many places that php 5.3 are failing, so it's probably best to fix those -- I think the idea of re-writing history is wrong, but it may also cause strange issues to folk who have older versions cached by Composer.\n+1 for making a new release with the 5.3 fixes in place and watched by CI, followed by a proper deprecation in the 3.5 or 4, whichever comes first.. Sounds handy for debugging purposes, but it is definitely more suited to being a Behat Extension rather than core Behat.\nTags are for organisational purposes, making it easy to run a feature or scenario -- it doesn't make sense to organise or run a single step imo.. Note, you're passing in only 4 arguments here. The constructor expects 5, you'll want to include the $filters parameter here.. ",
    "Stoakes": "So focused on sf 3.3 that I didn't check my behat.yml file. My bad.\nThanks.. ",
    "BR0kEN-": "Reference: https://github.com/Behat/Behat/pull/911\n```\ngit clone git@github.com:Behat/Behat.git\ncd Behat/\ngit checkout v3.3.1\ngit rebase -i d9cac87edd73c71c61c185244c44a02ab174c0b8\nDrop 695a37f5b31b708553be6dd6263cef816322b16f\ncd ../\nrm -rf vendor/behat/behat/\ncp -r Behat/ vendor/behat/behat\n```\nGets it back to work (doable if composer.lock has v3.3.1).. Thanks for pointing out, @phenaproxima. I got it fixed too.. ",
    "phenaproxima": "I am encountering this problem in acquia/lightning. When we switch to Behat 3.3.1, our Scenario Outline tests break because of an UninitializedContextEnvironment being present when we were expecting InitializedContextEnvironment. Is this by design, or is it honestly broken? Is it something Drupal Extension (upon which we are relying) should work around? Any advice would be helpful here.. Turns out the problem I was having was fixable in Drupal Extension: jhedstrom/drupalextension#390. ",
    "oabdelsamad": "@bwowk This is exactly what I want. Thank you so!. ",
    "LoopKarma": "I guess you can use MinkContext from MinkExtension for behat. ",
    "lasotaartur": "bin/behat --limit 10 --start 2 means run max 10 scenarios starting from 2 scenario.\nIt will be helpful for creating separate parallel jobs in CI.. ",
    "cherifGsoul": "Im confused a bit! where this should be used? In a Acceptance tests (ATDD) or Modelling By example (BDD)? \nWhat kind of services should be wired here? I guess Application Services.\nI suggest to write documentations for use cases of this feature.. I have multiple scenarios to check and they share contexts/actions the examples above dosent demonstrate the benefit, for example I design a cms so I want to check when I define a new content types which dont exist (valid scenario) and the second examples to define content types which already exists (invalid scenario), they can be in the same table (examples) but I consider this multiple scenarios in one.\nExamples are Scenarios, right?. @jon-acker After the issue submission I refactored the scenarios to be like you said, thank you :). @everzet Thank you!. ",
    "QassaDevelopers": "We too have the exact same problem. The problem lies indeed with the referenced commit above.\nBecause of this commit, this code fails to work properly:\n```\n// Behat\\Gherkin\\Filter\\PathsFilter.php:50\npublic function isFeatureMatch(FeatureNode $feature)\n{\n    foreach ($this->filterPaths as $path) {\n        if (0 === strpos(realpath($feature->getFile()), $path)) {\n            return true;\n        }\n    }\nreturn false;\n\n}\n```\nThe $feature->getFile() returns a relative path, because the base path is now set. Therefor, the realpath() returns false.\nBecause the feature does not match the PathsFilter, it is not added to the features array in the Gherkin::load() method.. For linux, it is located in the /tmp dir I believe.\nAlso, you can disable the cache in your behat.yml file, using this:\ngherkin:\n    cache: ~\nFull answer here.. ",
    "tanc": "I'm seeing this issue even though I've required behat/behat at 3.3.1:\n```\n  - Installing behat/mink (v1.7.1): Loading from cache\n  - Installing behat/mink-browserkit-driver (v1.3.2): Loading from cache\n  - Installing behat/mink-goutte-driver (v1.2.1): Loading from cache\n  - Installing behat/transliterator (v1.2.0): Loading from cache\n  - Installing behat/gherkin (v4.5.1): Loading from cache\n  - Installing behat/behat (v3.3.1): Loading from cache\n    Skipped installation of bin bin/behat for package behat/behat: name conflicts with an existing file\n  - Installing behat/mink-extension (v2.2): Loading from cache\n  - Installing behat/mink-selenium2-driver (v1.3.1): Loading from cache\n...\nbin/behat features/ac_base.feature -vvv\n[Behat\\Testwork\\Tester\\Exception\\WrongPathsException]\n  No specifications found at path(s) features/ac_base.feature. This might be because of incorrect paths configuration in your suites.\nException trace:\n () at /Users/tanc/Sites/l.install_profile_test/gitroot/vendor/behat/behat/src/Behat/Testwork/Tester/Cli/ExerciseController.php:111\n Behat\\Testwork\\Tester\\Cli\\ExerciseController->execute() at /Users/tanc/Sites/l.install_profile_test/gitroot/vendor/behat/behat/src/Behat/Testwork/Cli/Command.php:63\n Behat\\Testwork\\Cli\\Command->execute() at /Users/tanc/Sites/l.install_profile_test/gitroot/vendor/symfony/console/Command/Command.php:264\n Symfony\\Component\\Console\\Command\\Command->run() at /Users/tanc/Sites/l.install_profile_test/gitroot/vendor/symfony/console/Application.php:841\n Symfony\\Component\\Console\\Application->doRunCommand() at /Users/tanc/Sites/l.install_profile_test/gitroot/vendor/symfony/console/Application.php:206\n Symfony\\Component\\Console\\Application->doRun() at /Users/tanc/Sites/l.install_profile_test/gitroot/vendor/behat/behat/src/Behat/Testwork/Cli/Application.php:124\n Behat\\Testwork\\Cli\\Application->doRun() at /Users/tanc/Sites/l.install_profile_test/gitroot/vendor/symfony/console/Application.php:125\n Symfony\\Component\\Console\\Application->run() at /Users/tanc/Sites/l.install_profile_test/gitroot/vendor/behat/behat/bin/behat:34\n```\nAny idea what I'm doing wrong?. @mvoelker thank you for posting but unfortunately that didn't work for me. I tried blowing away vendor and composer.lock file and re-installing, just in case. I've got gherkin pinned at 4.4.5 and behat at 3.3.1 but I'm still getting the same error.\n- Installing behat/gherkin (v4.4.5): Loading from cache\n- Installing behat/behat (v3.3.1): Loading from cache. I was wondering whether there was some user cache somewhere for gherkin so I tried running it as another user (root) and it works fine. Very odd. Does anyone know where the gherkin cache is on MacOS?. All good now. I destroyed everything and rebuilt with pinned gherkin and behat and tests are running fine.. ",
    "mvoelker": "Hey @tanc \nCheck this solution: https://github.com/Behat/Behat/issues/1085#issuecomment-335165304\n\"... pin behat/gherkin to version 4.4.5 ...\"\nThis worked for me and solved the Problem (in PhpStorm).\nHope it helps.. ",
    "fbourigault": "To reproduce the issue, you have to run vendor/bin/behat features/homepage.feature:XX where XX is not a Scenario: line (i.e. any step in the scenario).. Humm right. I got fooled by PHPStorm which resolve the scenario line from where in the file you triggered a behat run.. On my side I improved the situation in PHPStorm by setting a working directory in the default run/debug Behat configuration. This works but tests are executed three times (I have three suites defined).. Is it possible to get this released?. ",
    "warmwaterkruik": "We also can't run a single feature anymore since the update to Behat 3.4. We start a single feature with bin/behat feature/natarch-continuous/ArchiveLandingPage.feature - I seem to have found the culprit within the Behat\\Behat\\Gherkin\\Specification\\Locator\\FilesystemFeatureLocator::locateSpecifications() - That method instantiates the LazyFeatureIterator with the $locator = 'features/natarch-continuous/ArchiveLandingPage.feature' and $filters = array(new PathsFilter($suiteLocators));\nIf I set the $filters = []; Then the single feature is run. I can also run bin/behat features/natarch-continuous/ and it finds and runs the features inside the directory.\nThis is our behat.yml configuration.\n```yml\ndefault:\n  suites:\n    natarch_features:\n      paths: [ features ]\n      contexts:\n        - Drupal\\DrupalExtension\\Context\\DrupalContext\n        - Drupal\\DrupalExtension\\Context\\MessageContext\n        - Drupal\\DrupalExtension\\Context\\DrushContext\n        - Drupal\\DrupalExtension\\Context\\MarkupContext\n        - rdx\\behatvars\\BehatVariablesContext\n        - FeatureContext\n        - OtapDrushContext\n        - SeleniumContext\n        - CustomSoapContext\n        - DebugContext:\n           screen_shot_path: project/behat/screenshots\n  formatters:\n    pretty:\n    junit:\n      output_path: %paths.base%/build\n  extensions:\n    Behat\\MinkExtension:\n      goutte:\n        guzzle_parameters:\n          verify: false\n      javascript_session: selenium2\n      selenium2:\n        wd_host: http://natarch.dev:8643/wd/hub\nwd_host: http://:4444/wd/hub\n  base_url: http://natarch.dev\n\ndefault_session: selenium2\nbrowser_name: 'firefox'\n  files_path: %paths.base%/features/dummy\nDrupal\\DrupalExtension:\n  subcontexts:\n    paths:\n      - %paths.base%/features/bootstrap\n  blackbox: ~\n  api_driver: 'drupal'\n  drush_driver: 'drush'\n  drush:\n    root: '/var/www/natarch'\n  drupal:\n    drupal_root: '/var/www/natarch'\n  text:\n    username_field: \"Gebruikersnaam\"\n    password_field: \"Wachtwoord\"\n    log_in: \"Inloggen\"\n    log_out: \"Uitloggen\"\n  region_map:\n    breadcrumb: \".region--breadcrumb\"\n    content: \".region-content, .layout-content\"\n    footer: \".region--footer\"\n    header: \".region--header\"\n    highlighted: \".region--highlighted\"\n    main_links: \".region--main-links\"\n    primary_menu: \".region--primary-menu\"\n    secondary_menu: \"#block-natarch-account-menu\"\n    sidebar_first: \".layout-sidebar-first\"\n    site_menu_first: \".region--site-menu-first\"\n    site_menu_second: \".region--site-menu-second\"\n    title_image: \".region--title-image\"\n  selectors:\n    message_selector: \".messages\"\n    error_message_selector: \".messages.messages--error\"\n    success_message_selector: \".messages.messages--status\"\nBehat\\SoapExtension:\n      # An associative array as second argument for \\SoapClient::__soapCall().\n      options: {}\n      # An associative array as parameters for \\DOMXpath::registerNamespace().\n      namespaces: {}\nrdx\\behatvars\\BehatVariablesExtension: ~\n\ntestserver:\n  extensions:\n    Behat\\MinkExtension:\n      selenium2:\n        wd_host: http://miauwmiauwmiauw.test.rad.lan:8643/wd/hub\n      base_url: https://test.miauwmiauwmiauw.nl\n    Drupal\\DrupalExtension:\n      drush:\n        root: '/var/www/miauwmiauwmiauw-web'\n      drupal:\n        drupal_root: '/var/www/miauwmiauwmiauw-web'\ntestzap:\n  extensions:\n    Behat\\MinkExtension:\n      selenium2:\n        #wd_host: http://miauwmiauwmiauw.test.rad.lan:8643/wd/hub\n        wd_host: http://miauwmiauwmiauw:8643/wd/hub\n        capabilities:\n          proxy:\n            proxyType: 'manual'\n            httpProxy: 'localhost:6667'\n```\nCan we remove $filters = array(new PathsFilter($suiteLocators));  from the FilesystemFeatureLocator?\n. ",
    "SunMar": "Hi,\nIs there any progress made on this? We're stuk on Behat 3.3 as well because of this.\nUsing @warmwaterkruik his information I tried to dive deeper into it and it's a real maze.\nWhat I encountered was in PathsFilter the method isFeatureMatch checks if the feature file is in the correct path.\nhttps://github.com/Behat/Gherkin/blob/e66888c99c97b85113822b9f37276c2f9c414c97/src/Behat/Gherkin/Filter/PathsFilter.php#L53\nHowever $feature->getFile() resolves a relative path and not an absolute path, then if your working directory is not the base directory realpath() won't resolve the file, the function returns false and the feature isn't executed. Basically what's discussed in the already referenced #1085 and possibly related to #1056 .\n. On a side note, I was able to run tests again from PhpStorm after in the Run/Debug configuration I set the Custom working directory option (in the default configuration for Behat) to the directory in which behat.yml lives (it needs to align with whatever in Behat is %paths.base%).. Based on information in #1076 I dug a little deeper. PathsFilter gets a relative path from the FeatureNode which doesn't resolve if your working directory is not the same as %paths.base%, and so it filters all features. See my comment there for more specifics.. ",
    "jpcaparas": "Thanks @SunMar that was really helpful. Got our tests running now.. ",
    "deeplfo": "So, we are having the same problem with Behat 3.4.3, which is that each feature file ($feature->getFile()) has its path represented as relative and not absolute, and isFeatureMatch() always returns false since the base paths set in configuration do not match the relative path attributed to the feature file.  Reverting to 3.3.1 fixed this issue.  \nIs there a solution to this for 3.4.x?. ",
    "chrisroane": "This is still a problem for me with behat + gherkin. I was able to work around it by adding a unique tag to tests I want to run individually and just reference that with behat using --tags @MEDSTAT-PUBLICATION-BUCKETS. That seems to be an okay temporary solution until this is fixed.. ",
    "DonCallisto": "Although issue isn't related to this vendor directly, I came up with a solution that seems to work in my side without any vendor modification: I've just created a behat.yml configuration file not at the same folder level of my scenarios, features and so on.\nSomething like\n/var/www/my_project/tests/behat/{Feature|Suite|Context}\n/var/www/my_project/tests/behat/Resources/config/behat.yml\nAs you can see, Feature don't share a sub path with config file and this result in an absolute path due to\nhttps://github.com/Behat/Gherkin/blob/master/src/Behat/Gherkin/Loader/AbstractFileLoader.php#L32-L46\nRunning behat as follow\nbin/behat --config /var/www/my_project/tests/behat/Resources/config/behat.yml\nSeems to make it work from any location (absolute, relative to features, and so on).\nAny thoughts?. @jcornide ATM I think there are no updates. You can with my workaround that seems to fit https://github.com/Behat/Behat/issues/1076#issuecomment-374521592. @jcornide Where you run them from is totally irrelevant: maybe you need to adapt configuration I suggest above to config you have into PHPStorm. . @jcornide we have updated behat/gherkin and now we can run individual tests. \nThis is what I have in composer.json\n \"behat/behat\": \"3.5.0\",\n \"behat/mink-extension\": \"2.3.1\". In a project of mine, `--prefer-lowest` makes behat fail. Let's test here and see what's no good.. Ok, I've noticed that behat 2 is not maintained anymore. So I'm gonna raise this into my `composer.json` file..\n",
    "blackandred": "Workaround:\nIn the FeatureContext before class FeatureContext there could be added for example:\nchdir(__DIR__ . '/../..');. ",
    "jcornide": "Are there any news on this issue?. @DonCallisto it doesn't work for me, I can run the tests from the command line but not from php storm. And the problem is that with symfony 4 only behat 3.4 is compatible. Any news with this issue? this is still being a issue to this day to me, specially with symfony 4. @DonCallisto I don't understand exactly what you mean by the different config files. Anyway, is this still an issue? Is someone capable of running behat tests from the IDE with behat 3.5?. Same here, I still get the same error. I tried the dumpautoload and same result. I'm using phpstorm and I copy pasted it the command phpsotrm uses. If I ran it from the project root works fine, if not I get the path errors. And anyway it has nothing to do with the IDE because as I say in the description it happens directly in the command line callen vendor/bin/behat from outside the project root. Hi, +1 with this problem, would be great if this get solved. ",
    "JeffVeit": "This pull request fixes the issue:\nhttps://github.com/Behat/Gherkin/pull/129\n. ",
    "bgbohling": "I'm having the same problem.  I'm trying to run tests from the command line in a Drupal site vendor/bin/behat -c RELATIVE_PATH_TO/behat.local.yml RELATIVE_PATH_TO/features\nHere's my suites in behat.local.yml:\nsuites:\n    default:\n      contexts:\n        - MY_MODULE_Context\n        - Drupal\\DrupalExtension\\Context\\DrupalContext\n        - Drupal\\DrupalExtension\\Context\\MinkContext\n        - Drupal\\DrupalExtension\\Context\\MessageContext\nI've tried reverting to 3.3.1 per some other discussions I've seen but that didn't help.. ",
    "RoSk0": "Confirmed versions, clear cache and still doesn't work for me... :cry: . ",
    "skilip": "Maybe this documentation helps? http://behat.org/en/latest/user_guide/configuration/suites.html#suite-paths. ",
    "mnapoli": "Still happening, here is how I work around it (I want to run Behat in PhpStorm):\n```yaml\ndefault:\n    ...\nextensions:\n    Behat\\Symfony2Extension:\n        kernel:\n            bootstrap: \"tests/tests_bootstrap.php\" # <-- add this\n            class: App\\Kernel\n\n```\nAnd I create the tests/tests_bootstrap.php file with:\nphp\n<?php\n// Workaround for https://github.com/Behat/Behat/issues/1076\nchdir(__DIR__ . '/..');. ",
    "yakobe": "@Taluu I will create an issue there too. However, if an update breaks an extension that usually means there is a BC break. Are you sure there is no problem with the 3.4 release?. ",
    "bmxlugo": "@yakobe and @Taluu I have found that commit is related, you need to use env variables https://github.com/Behat/Behat/commit/36a9d2788ff1d11b1a25a9bf58f7f8f73a00de6a#diff-38cb5d6599068c5b98d1464939a93445 or give another solution.. ",
    "ikappas": "@everzet Any update on this issue?. ",
    "GregJohnStewart": "Another bump to this issue, would love to play around with the framework, but hard to do with no phar :( Working with the latest phar available, but it is rather old.... It would be nice.... currently using a severely outdated version of the suite because of this :(\n(not that I am one of the maintainers, just trying to help bump the issue). ",
    "sebidchi": "Any news? . ",
    "kleijnweb": "Same issue here. Works with 3.0.5, 3.4.1, not so much.. I'm using the CLI. Haven't done dump autoload, I'll try it, but I can't  imagine that being the issue.\nMy use case is a little different: I run behat from the project root, referencing a config file in a subdirectory. Both the path to the config and the feature file are relative, yet behat 3.4.1 only finds one of them. Without \"paths\" arguments, behat finds all the feature files just fine.. ",
    "vincentmary": "Thank you very much. \nI'm gonna look at your solution.\nHave a nice day. Looked at https://github.com/ciaranmcnulty/behat-stepthroughextension it's ok for me.\nThanks for the help. ",
    "dianaarnos": "@spolischook which solution, exactly? The one in the doc I tried and I only get an Environment object and was unable to get an initialized context in any way. So I can't use the getContext() . I'll try to reproduce this in the next days and come back here :). ",
    "stevepetcu": "I see. So that's why the constructor is run after the @BeforeSuite and @BeforeFeature hooks.\nAnd this also means that everything that happens after the Scenario hooks, including that, doesn't have to be static.\nThanks!. ",
    "Nyholm": "Thank you for merging. ",
    "ecornelisse": "This would be very nice. ",
    "vijaycs85": "@ciaranmcnulty sure, let me know which versions should be covered, I will check them.. ",
    "leftty": "I see. I am using mink, mink-extension and mink-selenium2-driver. Does anyone know on which github project I have to open this issue?. Before selecting the option I have to find a way to type some characters in the react-select component, which I haven't managed to do yet. I will close this issue.. ",
    "OJezu": "Sorry for the delay, here are the profiles:\nhttps://blackfire.io/profiles/30fc94e0-8f8b-4032-bb19-41e1001bddff/graph\nhttps://blackfire.io/profiles/ae85bd97-b838-4d6d-ad7e-ced36e8a7547/graph\nAnd comparsion:\nhttps://blackfire.io/profiles/compare/d543aa8b-c7c6-4496-b5e1-c35722d3cb71/graph\nHere is the bash script we are using to set-up environment for behat tests to make sure they are repeatable:\n```bash\n!/bin/bash\nset -e\nDIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\nPHP_DEBUG_RUNTIME=\"php-debug\"\nPHP_RUNTIME=\"php\"\nBLACKFIRE_RUNTIME=\"blackfire run php\"\nif [[ $1 == '--with-debugger' || $1 == '--debugger' ]]\nthen\n    phpRuntime=\"$PHP_DEBUG_RUNTIME\"\n    behatArgs=( \"${@:2}\" )\nelif [[ $1 == '--with-blackfire' || $1 == '--blackfire' ]]\nthen\n    phpRuntime=\"$BLACKFIRE_RUNTIME\"\n    behatArgs=( \"${@:2}\" )\nelse\n    phpRuntime=\"$PHP_RUNTIME\"\n    behatArgs=( \"$@\" )\nfi\nrm -rf $DIR/../var/cache/test/*\n$DIR/console cache:warm --env=test --no-debug\n$DIR/console doctrine:database:drop --env=test --force\n$DIR/console doctrine:schema:create --env=test\n$phpRuntime -d memory_limit=256M $DIR/behat \"${behatArgs[@]}\"\nRESULT=$?\n$DIR/console doctrine:database:drop --env=test --force\nrm -rf $DIR/../var/cache/test/*\nexit $RESULT\n```. @stof Have you looked at those profiles? They will disappear in a week, AFAIK.. ",
    "gabiudrescu": "sorry, wrong button.. ",
    "FlashBytes": "Thanks for the fast feedback. I will follow the chain of tools until I found the rabbit hole.\nEnjoy. ",
    "dunglas": "It\u2019s just a quick improvement, because classloader v4 doesn\u2019t exist and will not.. ",
    "t1k3": "\"symfony/dependency-injection\": \"3.3.13\". ",
    "valorin": "Looks like this was introduced here: https://github.com/Behat/Behat/pull/1095. ",
    "drbyte": "Experiencing the same problem here ... even though using Behat 3.4.3 which allegedly fixes the BC break in #1095.\nUsing:\nbehat/behat                              v3.4.3\nbehat/gherkin                            v4.5.1\nbehat/mink                               v1.7.1\nbehat/mink-browserkit-driver             v1.3.2\nbehat/mink-extension                     2.3.0\nbehat/transliterator                     v1.2.0\nHad to manually add a dev dependency for symfony/dependency-injection:\"3.*\".\nBut this should really be enforced by behat IMO.. Had to manually add a dev dependency for symfony/dependency-injection:\"3.*\" in my composer.json:\ncomposer require --dev symfony/dependency-injection:\"3.*\"\nand then \ncomposer update\nNot a fan of having to force this. \nBeen fence-sitting about converting all my tests to something other than behat. This may be the shove I needed to go and do it. Sigh.. ",
    "brianbraatz": "Does either dev or release behat work for anyone? \nI am having zero luck :( \nLeft a message on IRC and leaving one here too- Anyone figure this out? I am stumped- the above solutions dont seem to work- I have tried older versions of laravel and older versions of behat and using older versions of symphony di... :(\nhere is what I posted on IRC channel\n\"\nhello out there! - I have spent most of my day trying to figure out an issue I am having with behat- hoping the behat gods on here might offer some wisdom\n7:09 PM Serialization of 'Closure' is not allowed \n7:09 PM https://github.com/Behat/Behat/issues/1108\n7:10 PM I tried adding a dev dependency as drbyte states- maybe I put it in the wrong place- I am still getting the issue\n7:10 PM I have started over with a fresh laravel- \n7:11 PM and also tried going back in time to use older checkins of behat- and I end up with the same problem- \n7:11 PM In RemoveUnusedDefinitionsPass.php line 75:\n7:11 PM   Serialization of 'Closure' is not allowed\n7:12 PM I am new to behat- so maybe I just don't know what I am doing.. I am hoping to get it to run SOMEHOW-- just so I can learn it- but it appears that the released versions as well as the dev version all give that error.. - should I go back in time and use a very old laravel version? is that the problem? \n\"\nthanks!\nBrian\n. ",
    "philtweir": "Working with Laravel 5.6, I am unable to roll back symfony/dependency-injection and cannot see another work-around here - apologies if I am missing another Issue/PR, as it seems quiet on this one since Dec. However, I think the change referenced above fixes this by providing the service container as a Symfony Reference rather than an object.\nI am unfamiliar with Symfony DI, so have had to get to grips with the basics to get this far - as such, I would appreciate some feedback please in case this looks likely to break something non-obvious, or if it's even a sane approach, or misses the point of that class, before tidying up for a PR.\nSide-note: I am using this with behat-laravel-extension, which needs a similar tweak to work, but with that, I now have working Behat 3.4.3 with symfony/dependency-injection 4.1.1. Many thanks, PR is open at #1163 . Having had a look through the features, I'm not too sure what the best approach for a test for this would be, but happy to take some direction.. For context, in case anyone is having similar issues: laracasts/Behat-Laravel-Extension#78 was what led to this PR - in the meantime, following the instructions there should (as a stop-gap) get Behat working for Laravel >=5.6.. Thanks @ciaranmcnulty !. ",
    "shwetaneelsharma": "@bstrx So, how often do you plan to run these tests? I am asking this because I was wondering if somehow you could use tagged hooks here with a bit of workaround. If I understand how often you run the entire test suite, may be I will be able to help you with a possible workaround.. So, does the background script in your case create a DB dump? Also, could you help me with what kind of extensions you are using in Behat?. You can actually exclude the scenarios tagged as @error by configuring it in your behat.yml file. Can you try something like below:\ndefault:\n  gherkin:\n    filters:\n      tags: ~@error\n       suites:\n          website1: // all Features have @website1 tag\n              contexts: [...]\n              paths: [...]\n          website2: // all Features have @website2 tag\n              contexts: [...]\n              paths: [...]\nThis would exclude @error tagged scenarios from both the suites. Now, you can run the tests as vendor\\bin\\behat --tags @website \nAlso, may I suggest you to use profiling here if you have two different websites, instead of creating two different suites. This would avoid the overhead of tagging all scenarios as either @website1 or @website2 in both the suites. Using profiles would be a smarter way and you can just run the test suite for any website by mentioning the profile name. For example: \nvendor\\bin\\behat -p=website1. ",
    "scoolen": "I see your point: if the argument is omitted, in this case \"value\", it still should be present with the default value of null. For example in Behat\\Behat\\Definition\\SearchResult.. ",
    "chernecov": "Any updates?. ",
    "ruudk": "I have the feeling that Behat only catches Exceptions in hooks instead of Throwables.\nWhen I add throw new \\Error('f'); in my LoadData.php and run behat it returns 0 as status code.\nWhen I add throw new \\Exception('f'); in my LoadData.php and run behat it returns 1 as status code.. Can't reproduce anymore. Not sure if tests are failing because of my change or that Master is just broken... @everzet Do you know?. @stof What do you think? I really think this can help to make sure failures are correctly handled on CI.. Scrutinizer is complaing because it doesn't understand \\Error. @stof I'd love to, but can you point me in the right direction? . I cannot even reproduce it anymore, so it could be that it fixed itself. \ud83d\ude48 . @stof Its amazing how you can keep track of every single repository on the internet \ud83d\ude4c Thanks for your help and keep it up \ud83d\udcaa . Removed, not sure why I added that.. Good one, fixed!. ",
    "bruno-ds": "Thank you.\nI had read this doc. It's a personal feeling, but maybe the documentation should say this :\n\nIf you specifie multiple --format options you need to pass the same number of --out options. Use std for standard output. \n",
    "izbatt": "I was able to fix this issue by downgrading to an older version of firefox tag 2.53.0 which is selenium2 compatible. I guess compatibility with the newer version of firefox isn't working yet, but it's mostly working on newer versions of chrome which is why i was getting errors using firefox. \nclosing this for now. . ",
    "Drillan767": "(this wasn't a Behat related issue, my bad). Nevermind, I discovered that $table->getHash() is exactly what I was looking for!. ",
    "bartonhammond": "Is there an example of what that looks like specifically for Behat?  I\u2019m pretty new to Php.  I\u2019m aware that auto load exists but not so much on how to direct what files are loaded and when.\nThanks.... Thanks. For anyone else:\n},\n    \"autoload\": {\n    \"classmap\": [\n        \"features\"\n    ]\n    }. @jon-acker - yes - I'm already doing that, I have large amounts of repeated code in my Context.  But when that Context function runs, there is no display in console log that reflects what is happening.  Therefore, the only amigo that knows what these steps are w/in the Context is the developer.\n@spolischook I was looking at extensions yesterday wondering if I could use that.  Would you know of a specific extension that would be a good starting point for this?  I was hoping https://github.com/Behat/ChainedStepsExtension this would have been helpful but I don't even understand what's its trying to do, especially 'cause it uses Russian.  Any suggestion would be greatly appreciated, thanks.. I took a different approach and it's working already. Basically I put a pre-processor in front of Behat.\nI created someSnippetName.snippet.feature to contain the Steps for the variable someSnippetName.\nThen I converted all the someFeature.feature to someFeature.hbs.feature\nInside the hbs file I use\n{{{someSnippetName}}}\nthat gets replaced w/ the snippet.feature contents\nI then write them out to a temp directory and updated my behat.yml to process these generated feature files.\nHere's the code that does the conversion:\n<?php\n// Use composer autoloader\nrequire_once './vendor/autoload.php';\nuse LightnCandy\\LightnCandy;\n$data = [];\ntry {\n    foreach (glob(\"./features/gherkin/*.snippet.feature\") as $filename) {\n        $snippet = file_get_contents($filename);\n        $name = pathinfo($filename)['filename'];\n        $name = substr($name, 0, ( strlen($name) - strlen('.snippet')));\n        $data[$name]= \"#start $name\\n\" . rtrim($snippet) . \"\\n#end $name\";\n    }\n    foreach (glob(\"./features/gherkin/*.hbs.feature\") as $filename) {\n        $template = file_get_contents($filename);\n        $phpStr = LightnCandy::compile($template);  \n        $renderer = LightnCandy::prepare($phpStr);\n        $name = pathinfo($filename)['filename'];        \n        $name = substr($name, 0, ( strlen($name) - strlen('.hbs')));\n        $name = $name . \".feature\";\n        $string =  $renderer($data);\n        file_put_contents(\"./features/temp/$name\", $string);\n    }\n} catch (Exception $e) {\n    \\Psy\\Shell::debug(get_defined_vars());    \n    throw $e;\n}\nThe benefit is that when the test is running, I see all the statements as they executed - every step is now displayed.\n. @stof - thanks for response.  \nI removed the call during Mink setup.  \nNow I am processing a requested Page:\n/**\n     * @When I go to the :arg1 page\n     */\n    public function iGoToThePage($arg1) {\n        try {\n            $this->current = $this->getPage($arg1);\n            $this->current->open();\n        .....\nAnd I get this error:\nGiven I go to the \"Member access\" page                                   # ThinkwellContext::iGoToThePage()\n      Fatal error: Call to a member function open() on null (Behat\\Testwork\\Call\\Exception\\FatalThrowableError)\nThe code that instantiates is here:\n```\nFrom vendor/sensiolabs/behat-page-object-extension/src/SensioLabs/Behat/PageObjectExtension/PageObject/Factory/DefaultFactory.php:105:\n103|     private function instantiatePage($pageClass)\n104|     {\n\n\n105|         eval(\\Psy\\sh());\n    106|         return new $pageClass($this->mink->getSession(), $this, $this->pageParameters);\n    107|     }\n\n\n$session = $this->mink->getSession()\n=> Behat\\Mink\\Session {#1892}\n$session->isStarted()\n=> false\n```\nI note that the session hasn't started.  I don't understand why the session is not started.  \n\n\n\nMy changes were only with the location of files - I did no code changes.  But somehow now things don't work.  \nI also notice that the Chrome browser is never created.  \nAny thoughts?  I appreciate your help.. This was resolved when I addressed the dependancies in composer to not use \"dev-master\".  . ",
    "ilovemistakes": "Created #1130 . Do you have any case in mind where non-unicode input is not supported in unicode mode?\nGherkin already has a requirement for feature files to be in UTF-8 encoding.\nAccording to PHP docs the PCRE_UTF8 \"turns on additional functionality of PCRE\" and \"Pattern and subject strings are treated as UTF-8\". And they are in UTF-8. So, in our case, non-UTF-8 input (english characters) is a subset of UTF-8 input. Any english word will match in both unicode and non-unicode modes. I've written a test to make sure that english words still match.\nThe only case of breaking existing projects I can think of is when somebody believes that quoteless words, containing non-english characters, must not be treated as definition arguments. But i see no reasons for this belief, as documentation states, that \n\nAll token values of the pattern (e.g. :methodArgument) will be captured and passed to the method argument\n\nThere are no mentions about english and non-english characters.. ",
    "dsinn": "If you want to test that feature by filename, try vendor/bin/behat features/game-config.feature.\nIf you want to test that feature by feature name, try vendor/bin/behat --name=\"Game Configuration\".  I think --name just matches what comes after Feature: within the feature file, based on the old documentation.. ",
    "AC-TimRourke": "PHP version in my testing environment is:\n```bash\nphp --version\nPHP 5.6.31 (cli) (built: Oct 10 2017 02:22:55)\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\n    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies\n    with Xdebug v2.5.5, Copyright (c) 2002-2017, by Derick Rethans\n```. ",
    "JimiPedros": "I basically want to group the relevant feature files with the context files that define the scenario steps . @spolischook I don't understand how using namespaces will do anything. I need each context file to extend the AbstractWebDriver class - but this seems impossible when the context files are in different directories.. I need the structure to be as follows; where I can group feature files and their related context files together as such: \nphp_behat_2copy\n-- bin\n-- src\n---- php\n------ AbstractWebDriver.php\n---- Suites\n------ Suite1\n-------- Suite1.feature\n-------- bootstrap\n---------- Suite1Context1.php\n---------- Suite1Context2.php\n---------- Suite1Context3.php\n------ Suite2\n------ Suite3\n-- vendor\n-- behat.yml\n-- composer.json\n-- composer.lock. ",
    "alice-0-kim": "Thank you @bwowk !. ",
    "zarabatana": "Sorry, I created the issue by mistake.. ",
    "Majkl578": "Don't trust metrics here, cache is never persisted for PRs. If you want to benchmark (it will always vary due to load etc.), you will need to test it in the repository itself (branch is enough), not through PR. :). You can also check Doctrine DBAL build times here: https://ci.appveyor.com/project/doctrine/dbal\n(The config is referenced above and is a bit more more complicated than yours, also collects and sends coverage report.). @Taluu Btw you will probably need different directories for different PHP versions in order to make cache work properly.. You don't need this one.. If you make the version a subdirectory of \"C:\\tools\\php\", this and other occurrences may not turn that ugly. :). ",
    "welly": "Adding\n\n\"config\": {\n    \"platform\": {\n      \"php\": \"5.6\"\n    }\n  },\n\nto my composer.json file resolved the error.. ",
    "micheljp": "Do we need to be on PHP 5.6? I'm on PHP 7. ",
    "greg0ire": "Here is my configuration, maybe the contexts should be a hash?\n```yaml\ndefault:\n    autoload:\n        App\\Features: %paths.base%/app/features/bootstrap\n    extensions:\n        Behat\\MinkExtension:\n            sessions:\n                default:\n                    symfony2: ~\n        Behat\\Symfony2Extension:\n            kernel:\n                path: src/Kernel\n                class: App\\Kernel\n    suites:\n        default:\n            contexts:\n                - App\\Features\\ApiContext\n```. > Here is my configuration, maybe the contexts should be a hash?\nThe docs say it should not.. Thanks @jakzal ! I might be able to work on a fix tonight.. Done!. @jakzal please review again. Let's revert to ~ then. For 2.7 and 3.3 I mean. I might do a separate PR to do this cleanup and more.. @ciaranmcnulty didn't see your message, but I think this is kind of a no-brainer, isn't it?. I think a sensible policy might be to forbid dropping minor versions of sf unless they are no longer supported.. ",
    "jdeniau": "@ciaranmcnulty changed. In the test I mention, I profiled with blackfire, I could only watch supportsDefinitionAndArgument wich call transformPatternToRegexp (because in the optimized version, the call disapear, I think blackfire does not display \"small\" calls).\nWell, the memory usage for supportsDefinitionAndArgument \"bumped\" from 45k to 76k. For the record the global memory usage for this test is 1080M in both case (0.004% \u2192 0.007%), so I think it's pretty anectdotic.\nAs a matter of fact, I think we do more reuse regexp more than we create new ones, especially with tools like behatch/context. @ciaranmcnulty I do not really know how to fix the scrutinizer test without increasing the overall complexity.\nI could add some private functions but it seems kind of really complex for that case, WDYT ?. @jakzal of course \ud83e\udd26, I used short array syntax too at first :/\nShould be fixed. \ud83e\udd26\u200d Of course, it's fixed, and I added a test about it. ",
    "Art4": "As a workaround I'm using tmpfile() to create a temporary file for the Behat output.\n```php\n$outputFile = tmpfile();\n$output = new \\GuzzleHttp\\Psr7\\CachingStream(\n    \\GuzzleHttp\\Psr7\\stream_for($outputFile)\n);\n$input = new StringInput(sprintf(\n    '--suite %1$s --format progress --config %2$s --out %3$s',\n    $suite,\n    $behatFile,\n    str_replace('\\', '\\\\', stream_get_meta_data($outputFile)['uri']) // Fix for Windows\n));\n$app = (new \\Behat\\Behat\\ApplicationFactory())->createApplication();\n$code = $app->run($input);\n$message = $output->__toString();\n$output->close();\n``. I had the same problem withautoload:inbehat.yml`. I decided to simply use my composer.json with PSR-4:\ncomposer.json\n\"autoload\": {\n        \"psr-4\": {\n            \"My\\\\Namespace\\\\\": \"src/\"\n        }\n    }\nsrc/FeatureContext.php\n```php\n<?php\nnamespace My\\Namespace\nclass FeatureContext  implements Context, SnippetAcceptingContext\n{\n    //...\n}\n```\nNote: Don't forget to update your composer.lock by running composer install.. ",
    "titopixelfusion": "It would be great to merge this PR. ",
    "darrencocco": "Tags don't quite do it on a sufficiently granular level without editing the\nupstream projects or maintaining a set of patches that specifically tag\nevery scenario that must excluded.\nOn Wed, 25 Jul 2018, 23:08 Jakub Zalas notifications@github.com wrote:\n\nSounds like a perfect job for tags.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Behat/Behat/issues/1165#issuecomment-407748051, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/APllPWW8yFqibW1XeaiFzjPnBED4pwGVks5uKG2_gaJpZM4Vfb5A\n.\n. I would be happy if the LazyFeatureIterator did not hard code filters and\ninstead used dependency injection to allow extensions like the rest of the\ncode base. Then everyone could write their own filters to suit their needs.\n\nOn Wed, 25 Jul 2018, 23:08 Jakub Zalas notifications@github.com wrote:\n\nSounds like a perfect job for tags.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Behat/Behat/issues/1165#issuecomment-407748051, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/APllPWW8yFqibW1XeaiFzjPnBED4pwGVks5uKG2_gaJpZM4Vfb5A\n.\n. @jakzal \nI am building extension B to upstream project A that has behat tests.\nThere is a feature file in A that has 8 scenarios, 2 of those scenarios are no longer relevant because a part they are testing for has been significantly altered or removed. The other 6 scenarios are just fine and should be retained to ensure the tests are as comprehensive as possible.\n\nChanging the feature file in project A is not feasible and those two specific scenarios don't have tags that clearly identifies just them. Blacklisting the entire feature file is overkill and reduces test coverage because 6 of the scenarios are still valid. As such those scenario will always fail because they cannot be filtered out when extension B is used.\nCopying and pasting the files and just keeping the scenarios that work in B and blacklisting the feature file in A will create the risk of a false positive test result in the future as changes may be made to the upstream feature file that will not be reflected in B and test coverage that could be relevant would be lost.. I am going to write a workaround for this in the mean time(will be used until the functionality exists in the version that the core software that I am building the extension on) using a SpecificationLocator but I consider it more of an ugly workaround rather than an elegant solution. Happy for the team to just take some of the solution I write and use it to implement the feature.. Going to work on it on Sunday hopefully have something resembling sane code by Wednesday.. I give you the fevered dreams of a madman https://github.com/darrencocco/Behat/tree/filter-extensions\naka my first attempt at making filters use D-I etc. Yeah I found the FriendsOfBehat one already(was trying to avoid re-inventing the wheel). If you take a look at the code in my tree it provides a framework for adding arbitrary filters and re-writes the current way that filters are handled to use that framework(works in suit definitions and CLI). I have never worked on Symfony or Behat code so it might not be up to community standards yet but hopefully this is a good starting point.\nIt should actually only take me a few hours to put together that kind of filter, I will see if I can put some time aside in the next 48 hours to write an example in my spare time.. ",
    "aheermohsinse": "At first level, we may use tags to highlight such; later can dump that code pieces at 2nd level.\nI will look into the practical example and share a mockup code for it, could we please have a relevant example feature for this, to try hitting solution.\n\nare we sure no one would need it later in future?. \n",
    "lchrusciel": "We have something similar in mind in FriendsOfBehat organisation. We wanted to extend ExcludeSpecificationsExtension to support Behat CLI syntax(https://github.com/FriendsOfBehat/ExcludeSpecificationsExtension/issues/5) but didn't find time yet. For now, you can only exclude a whole feature file. @darrencocco maybe you can help us and provide a more generic solution? WDYT?. ",
    "Meyfarth": "Hello, when will it be released? We're using dev-master in order to avoid this bug, but I would like to use a stable release of behat.\nThanks. ",
    "felds": "@stof is there any other way to keep tooling working without carrying it over on every installation? Since Behat is a dev library, putting it under require-dev doesn't make much of a difference\u2026\nMaybe moving it to the suggest section?. ",
    "redthor": "This is a new Symfony 4.1 app.\nI can work around it by:\ncomposer config minimum-stability dev\ncomposer require --dev behat/behat  -v\nFWIW I tried the flex-way: composer require behat but the recipe couldn't load.. I have been able to remove the minimum stability setting by using the dev-master release of behat and mink. Composer changes look like this:\ndiff\n@@ -27,12 +27,12 @@\n         \"symfony/yaml\": \"*\"\n     },\n     \"require-dev\": {\n-        \"behat/behat\": \"^3.5@dev\",\n-        \"behat/mink\": \"^1.7@dev\",\n-        \"behat/mink-browserkit-driver\": \"^1.3@dev\",\n-        \"behat/mink-extension\": \"^2.1@dev\",\n-        \"behat/symfony2-extension\": \"^2.1@dev\",\n-        \"behatch/contexts\": \"^3.0@dev\",\n+        \"behat/behat\": \"dev-master\",\n+        \"behat/mink\": \"dev-master\",\n+        \"behat/mink-browserkit-driver\": \"^1.3\",\n+        \"behat/mink-extension\": \"^2.3.1@dev\",\n+        \"behat/symfony2-extension\": \"^2.1\",\n+        \"behatch/contexts\": \"^3.2\",\n         \"friendsofphp/php-cs-fixer\": \"^2.12\",\n         \"phpmd/phpmd\": \"^2.6\",\n         \"phpro/grumphp\": \"^0.14.1\",\n@@ -83,6 +83,5 @@\n             \"allow-contrib\": false,\n             \"require\": \"4.1.*\"\n         }\n-    },\n-    \"minimum-stability\": \"dev\"\n+    }\n }. ",
    "simonschaufi": "Thank you for your explanation. Still I don't really understand when you need the dependencies as Laravel is booted in this line here: https://github.com/laracasts/Behat-Laravel-Extension/blob/292a471321badec123a7f2b00edbde59be5759b0/src/ServiceContainer/BehatExtension.php#L77\nAre the additional definitions like mocks in PHPUnit?\nI'm wondering why there is no documentation where these things are explained. It's not obvious for me what is happening here.... Thank you so much for this link. It made things very clear to me.. ",
    "rpkamp": "The Definitions are used to set up the Dependency Injection Container (DIC) is using from Symfony.\nHere is a nice starter on how it works: https://medium.com/manomano-tech/diving-into-symfonys-dependencyinjection-part-1-first-steps-with-the-container-2fad0593c052\nAlso, it has nothing to do with mocks. . ",
    "PaddyLock": "Aha, thanks very much. . ",
    "nodeJerry": "Thanks Ciaran,\nBut i want to skip all steps in the scenario.\nEffectively an \"empty\" scenario. \nThe scenario text will still be visible / processed and return success. (even though empty)\nBut nothing was done behind he scene.. ",
    "blixit": "@spolischook @timiTao \nI just edited my first post with my files.\nFor version, \n./vendor/bin/behat -V gives me the same error I described sooner\nbut i guess I'm using \"behat/behat\": \"^3.5@dev\" (says my composer.json file). I checked the vendor/behat and \n- I followed the 'testapp' \n- then I changed my FeatureContext content\n```php\n//namespace App\\Behat\\Context;  // I removed namespace\nuse Behat\\Behat\\Context\\Context;\nuse Behat\\Gherkin\\Node\\PyStringNode;\nuse Behat\\Gherkin\\Node\\TableNode;\nuse Behat\\Symfony2Extension\\Context\\KernelAwareContext;\nuse Behat\\Symfony2Extension\\Context\\KernelDictionary;\nuse Symfony\\Component\\HttpKernel\\KernelInterface;\n/*\n * Defines application features from the specific context.\n /\nclass FeatureContext implements KernelAwareContext\n{\nprivate $kernel;\nprivate $containerParameters;\nprivate $parameterKey;\n\npublic function __construct( KernelInterface $kernel)\n{\n    $this->setKernel($kernel);\n}\n\n/**\n * Sets Kernel instance.\n *\n * @param KernelInterface $kernel\n */\npublic function setKernel(KernelInterface $kernel)\n{\n    $this->kernel = $kernel;\n}\n\n}\n```\nNow I have this error: \n```\nPHP Fatal error:  Uncaught TypeError: Argument 1 passed to FeatureContext::__construct() must implement interface Symfony\\Component\\HttpKernel\\KernelInterface, string given in /var/www/html/symfony/tracking/features/bootstrap/FeatureContext.php:22\nStack trace:\n0 [internal function]: FeatureContext->__construct('@kernel')\n1 /var/www/html/symfony/tracking/vendor/behat/behat/src/Behat/Behat/Context/ContextFactory.php(133): ReflectionClass->newInstanceArgs(Array)\n2 /var/www/html/symfony/tracking/vendor/behat/behat/src/Behat/Behat/Context/ContextFactory.php(88): Behat\\Behat\\Context\\ContextFactory->createInstance(Object(ReflectionClass), Array)\n3 /var/www/html/symfony/tracking/vendor/behat/behat/src/Behat/Behat/Context/Environment/Handler/ContextEnvironmentHandler.php(121): Behat\\Behat\\Context\\ContextFactory->createContext('FeatureContext', Array, Array)\n4 /var/www/html/symfony/tracking/vendor/behat/behat/src/Behat/Testwork/Environment/EnvironmentManager.php(93): Behat\\Behat\\Context\\Environment\\Handler\\ContextEnvironmentHan in /var/www/html/symfony/tracking/features/bootstrap/FeatureContext.php on line 22\nI was inside the current function and I noticed that parameters starting with '@' are not resolved as symfony services:php\npublic function createContext($class, array $arguments = array(), array $singleUseResolvers = array())\n    {\n        $reflection = new ReflectionClass($class);\n        $resolvers = array_merge($singleUseResolvers, $this->argumentResolvers);\n        $resolvedArguments = $this->resolveArguments($reflection, $arguments, $resolvers);\n        $context = $this->createInstance($reflection, $resolvedArguments);\n        $this->initializeInstance($context);\n    return $context;\n}\n\n```. ok. It looks like the problem is solved by explicitly installing 2.1.5 and without having to add                \nbootstrap: features/bootstrap/bootstrap.php\n. ",
    "pueppiblue": "Hi,\nwe ran in the same Fatal Error you formerly received as well:\n\nWarning: require_once(/var/www/html): failed to open stream: Success in /var/www/html/vendor/symfony/dependency-injection/ContainerBuilder.php on line 1089\nFatal error: require_once(): Failed opening required '/var/www/html/' (include_path='.:/usr/local/lib/php') in /var/www/html/vendor/symfony/dependency-injection/ContainerBuilder.php on line 1089\n\n\nTurned out we used the behat/symfony2-extension with dev-master stability.\n\"Downgrading\" to 2.1.5 resolved the issue.\nRegarding your parameter issue:\nMaybe it's because you are missing the config entry to point the symfony2-extension to the bootstrap file, which basically only loads the .env file.\nyaml\n extensions:\n         Behat\\Symfony2Extension:\n             kernel:\n                 bootstrap: features/bootstrap/bootstrap.php\n                 class: App\\Kernel\n. ",
    "nickreynke": "Thank you @blixit and @pueppiblue!. ",
    "amitsharmadoj": "Yes you are right. Issue is with drupal-driver. Apologies for putting up the issue at wrong place. \nThanks for your help!. ",
    "Cochonours": "It seems so.\nI played around more with my behat.yml and added back the kernal attr for featureContext \n- FeatureContext:\n            kernel: '@kernel'\nIn this case I have the following error \nCan not find a matching value for an argument `$request` of the method `Behatch\\Context\\RestContext::__construct()`.\nAside from this problem, I would like to know the way to define were to put my FeatureContext file. I don't want it to stay in \"config/features/bootstrap...\".. ",
    "letharion": "Thank you, and apologies for my late reply.\nSo I switched the suites around so my two sub classes are now in separate suites:\ndefault:                                                                                                                                                                                                        \n  suites:                                                                                                                                                                                                       \n    Hello:                                                                                                                                                                                                      \n      contexts:                                                                                                                                                                                                 \n        - HelloFeatureContext:                                                                                                                                                                                  \n          - say: 'hello'                                                                                                                                                                                        \n    World:                                                                                                                                                                                                      \n      contexts:                                                                                                                                                                                                 \n        - WorldFeatureContext:                                                                                                                                                                                  \n          - say: 'world'\nHowever, then I get the opposite problem instead, where Behat considers the World specific functions missing from the Hello feature, even though they are not used there.\n```\n$ cat features/Hello.feature \nFeature: Test Hello\nScenario:\n    Given I say \"hello\"\n    Then I should say hello\n```\n```\n$ cat features/World.feature \nFeature: Test world\nScenario:\n    Given I say \"world\"\n    Then I should say world\n```\n```\n$ cat features/bootstrap/HelloFeatureContext.php \n<?php\nuse Behat\\Behat\\Context\\Context;\nclass HelloFeatureContext extends FeatureContext {\n    public function __construct($say) {\n        parent::__construct($say);\n    }\n/**\n * @Then I should say hello\n */\npublic function iShouldSay() {\n    echo \"hello\";\n}\n\n}\n```\n```\n$ cat features/bootstrap/WorldFeatureContext.php \n<?php\nuse Behat\\Behat\\Context\\Context;\nclass WorldFeatureContext extends FeatureContext {\n    public function __construct($base_uri) {\n        parent::__construct($base_uri);\n    }\n/**\n * @Then I should say world\n */\npublic function iShouldSay() {\n    echo \"world\";\n}\n\n}\n```\n```\n$ cat features/bootstrap/FeatureContext.php \n<?php\nuse Behat\\Behat\\Context\\Context;\n/*\n * Features context.\n /\nclass FeatureContext implements Context {\n    public function __construct(array $parameters) {\n        var_dump($parameters['say']);\n    }\n/**\n * @Given I say :arg1\n **/\npublic function iSay($arg1) {\n    echo $arg1;\n}\n\n}\n```\nThe above yields:\n```\n--- HelloFeatureContext has missing steps. Define them with these snippets:\n/**\n * @Then I should say world\n */\npublic function iShouldSayWorld()\n{\n    throw new PendingException();\n}\n\n--- WorldFeatureContext has missing steps. Define them with these snippets:\n/**\n * @Then I should say hello\n */\npublic function iShouldSayHello()\n{\n    throw new PendingException();\n}\n\n```. ",
    "tsantos84": "Thanks guys.\nAnd does it make sense to have this kind of option?\nEm ter, 12 de fev de 2019 \u00e0s 14:01, Christophe Coevoet \nnotifications@github.com escreveu:\n\nWell, the Behat testsuite is different. It is not about running a scenario\nin a different process, but about having a scenario running Behat (because\nthe scenario actually describes the usage of Behat).\nThe answer here is no. There is no option to isolate scenarios in separate\nprocesses.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Behat/Behat/issues/1193#issuecomment-462818169, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA_iE52mNoYibGdxJwoD1CWl8Mlzh3q4ks5vMuVugaJpZM4ZKV2y\n.\n\n\n-- \nAtt.\nTales Santos\n. ",
    "adeptofvoltron": "actually I used few options -\na)  I cloned behat in to ~/Behat dir...and i add ~/Behat/bin in to PATH variable\nb) I created in ~/Behat dir a composer.json file like: \n{\n    \"require\": {\n        \"behat/behat\": \"^3.5\",\n        \"behat/mink\": \"^1.7\",\n        \"behat/mink-goutte-driver\": \"^1.2\",\n        \"behat/mink-extension\": \"^2.3\"\n    }\n}\nthan after simple composer install I add ~/Behat/vendor/bin in to $PATH variable.\nin both ways I had behat command in my CLI.\n. thx. ",
    "hackel": "That's what I suspected, and I've searched my code for anything that might be inadvertently outputting something but haven't found anything.  I'll keep looking, it's just odd since this happened so suddenly and I can see all of the changes made in my working tree.  Haven't updated any dependencies either.  Could just be an obscure typo in one of my dependencies that got saved by mistake.  I'll try reinstalling them as well.\nEdit: Reinstalling fresh dependencies had no effect.. And of course, as usual, it boils down to user error.  A single newline that somehow got inserted before the opening '<?php' in a config file.  Thanks!. ",
    "djoos": "Hi,\nthanks for your feedback!\nYou\u2019re right, each scenario gets a clean container, however the issue I\u2019m experiencing above happens \u201cbetween\u201d 2 (sequential) steps in 1 scenario; that\u2019s what is really confusing me.... Hi @jakzal,\naha, that's an interesting lead as I am indeed making use of the Symfony2Extension...\nThank you!. ",
    "mab05k": "@ciaranmcnulty building from the master branch is failing for me. Should I be working off of a tag?\nhttps://github.com/Behat/Behat/pull/1204. I think I am going to need some help/guidance with getting the tests passing. The builds are failing with only pushing up changes to the CHANGELOG.md. Is master broken?. ",
    "srosato": "What can we do to fix it?. ",
    "staminna": "I just removed the contents from the above post, not from the actual code ;)\nI removed the (s) from the custom.feature. The error is now of course Drupal specific.\nThanks.. ",
    "paddelboot": "Thanks for the hint. Does it maybe make more sense to use something like Mailtrap - because all I do here is to check that a method was called, but the behaviour I really want to test via BDD/Behat is whether an email is sent.. ",
    "YoannChabert": "Oh yeah. I understand. In fact, I have to update the boostrap.php file in my feature directory, which point on the env file i need.\nSorry for this PR :)\nHope be better next time !. ",
    "marxjohnson": "I've taken a look at the schema used in Behat's own tests and it appears that it doesn't support the file attribute.  I also noticed that it does allow the status attribute, which has been causing errors when I try to publish the results in Jenkins.\nFurther investigation shows that the Jenkins xUnit plugin is using a different (newer?) version of the JUnit schema.  This allows for the file attribute but not the status attribute.\nIn Behat's current JUnit schema, the only other place I can see to log the file name is in the classname field of testcase.  This seems like a minor abuse of that field, but I can't imagine that Behat would use it for anything else in the future, and it makes a reasonable amount of sense to me to have it there.. ",
    "andrewnicols": "Okay so it seems that @BeforeStep hooks are also treated as test setUp.\nWhilst it makes sense to consider things which happen before the test considered as setup, it feels wrong to consider actions which occur midway through the test to be setup.. I believe I've successfully converted @BeforeStep exceptions to a fail.\nThe remaining failures are existing failures currently seen on master (verified by Travis).\nThe second patch in my changeset changes the step executor to treat the first failure resulting from a Step Setup, or Step Test stage as a fail. After that point, any subsequent skip in that Scenario is treated as a Skip.\nIf the Feature, or Scenario caused the skip, then the test is still marked as Skipped.. ",
    "veloce": "Yeah, I could not find a good name, and I knew you would ;)\n. ",
    "danez": "\"Sie\" should be capitalized.\nAnd either use informal form (du) in both sentences or in both cases the respectful form.\n. ",
    "kibao": "It should be 4.2 but there's only 4.2.x-dev at the moment.\n. Yes, I fogot about it.\n. ",
    "timglabisch": "why not  Yaml::parse(file_get_contents(...))? $fileContent is never reused.\n. ",
    "monofone": "I dont understand the intention of making this final, can you explain a little in detail why this one should be final if it is an option to remove the final in future, in my understanding this is exactly the argument to not make this class final.\n. I\u00b4m aware of compositing over inheritance, but I have difficulties to accept the argument that it introduces a BC break adding it, as the only one to make this final. Its just a factory not a leave of a complex inheritance tree which would make ugly things if you inherit it. IMHO\n. @WouterJ Ok, this is something I understand, maintaining the api of this and that it makes no sense to extends this are two arguments I can follow. Thanks for clearing this up.\n. ",
    "fluxsauce": "As per http://symfony.com/doc/current/contributing/community/releases.html\n| Version | Feature Freeze | Release | End of Maintenance | End of Life |\n| --- | --- | --- | --- | --- |\n| 2.3 | 03/2013 | 05/2013 | 05/2016 (36 months) | 05/2017 |\n. ",
    "kalessil": "Covered here:\nphp\n           if ($this->isEmpty($docLine)) {\n                continue;\n            }\n            if ($this->isNotAnnotation($docLine)) {\n                continue;\n            }\nI'd suggest even to simplify if ($this->isEmpty($docLine) || $this->isNotAnnotation($docLine)) .... PhpStrom stubs bug: https://github.com/JetBrains/phpstorm-stubs/commit/2aa970a6cad16b775bc958400114711184fed6c8, I'd suggest reverting.. for ($keyIndex = 0, $keysCount = count($keys); ...) would be more semantically correct IMO. ",
    "thecrimpmaster": "you're missing a comma here. "
}